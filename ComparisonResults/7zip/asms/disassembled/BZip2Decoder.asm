.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 75F056526ED765CBB6A49E3BA4849787
.rdata:00000000 ; Input CRC32 : C6A25953
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BZip2Decoder.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kRandNums      dw 26Bh                 ; DATA XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+35r
.rdata:00000000                                         ; NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+96r
.rdata:00000002                 db 0D0h ; -
.rdata:00000003                 db    2
.rdata:00000004                 db  7Fh ; 
.rdata:00000005                 db    0
.rdata:00000006                 db 0E1h ; ß
.rdata:00000007                 db    1
.rdata:00000008                 db 0A3h ; ú
.rdata:00000009                 db    3
.rdata:0000000A                 db  30h ; 0
.rdata:0000000B                 db    3
.rdata:0000000C                 db  2Dh ; -
.rdata:0000000D                 db    3
.rdata:0000000E                 db 0E9h ; T
.rdata:0000000F                 db    0
.rdata:00000010                 db  36h ; 6
.rdata:00000011                 db    2
.rdata:00000012                 db 0F7h ; ˜
.rdata:00000013                 db    0
.rdata:00000014                 db 0D9h ; +
.rdata:00000015                 db    3
.rdata:00000016                 db 0D4h ; +
.rdata:00000017                 db    2
.rdata:00000018                 db 0CDh ; -
.rdata:00000019                 db    0
.rdata:0000001A                 db 0C6h ; ¦
.rdata:0000001B                 db    1
.rdata:0000001C                 db  5Fh ; _
.rdata:0000001D                 db    3
.rdata:0000001E                 db 0EBh ; d
.rdata:0000001F                 db    1
.rdata:00000020                 db 0E5h ; s
.rdata:00000021                 db    2
.rdata:00000022                 db 0F2h ; =
.rdata:00000023                 db    0
.rdata:00000024                 db 0B5h ; ¦
.rdata:00000025                 db    3
.rdata:00000026                 db 0D6h ; +
.rdata:00000027                 db    0
.rdata:00000028                 db 0DDh ; ¦
.rdata:00000029                 db    2
.rdata:0000002A                 db  5Bh ; [
.rdata:0000002B                 db    3
.rdata:0000002C                 db  4Fh ; O
.rdata:0000002D                 db    1
.rdata:0000002E                 db 0C4h ; -
.rdata:0000002F                 db    2
.rdata:00000030                 db  6Dh ; m
.rdata:00000031                 db    2
.rdata:00000032                 db  3Eh ; >
.rdata:00000033                 db    2
.rdata:00000034                 db  49h ; I
.rdata:00000035                 db    0
.rdata:00000036                 db  8Eh ; Ä
.rdata:00000037                 db    2
.rdata:00000038                 db 0DAh ; +
.rdata:00000039                 db    2
.rdata:0000003A                 db 0D8h ; +
.rdata:0000003B                 db    1
.rdata:0000003C                 db 0A3h ; ú
.rdata:0000003D                 db    1
.rdata:0000003E                 db 0B4h ; ¦
.rdata:0000003F                 db    1
.rdata:00000040 unk_40          db  16h                 ; DATA XREF: .xdata$x:__catchsym$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$3o
.rdata:00000040                                         ; .xdata$x:00002F9Co ...
.rdata:00000041                 db    1
.rdata:00000042                 db 0F0h ; =
.rdata:00000043                 db    1
.rdata:00000044                 db  63h ; c
.rdata:00000045                 db    3
.rdata:00000046                 db 0D2h ; -
.rdata:00000047                 db    0
.rdata:00000048                 db  8Fh ; Å
.rdata:00000049                 db    1
.rdata:0000004A                 db 0A8h ; ¿
.rdata:0000004B                 db    2
.rdata:0000004C                 db 0E0h ; a
.rdata:0000004D                 db    1
.rdata:0000004E                 db  33h ; 3
.rdata:0000004F                 db    0
.rdata:00000050                 db  6Eh ; n
.rdata:00000051                 db    3
.rdata:00000052                 db 0D1h ; -
.rdata:00000053                 db    1
.rdata:00000054                 db  2Bh ; +
.rdata:00000055                 db    3
.rdata:00000056                 db 0A9h ; ¬
.rdata:00000057                 db    0
.rdata:00000058                 db  65h ; e
.rdata:00000059                 db    3
.rdata:0000005A                 db 0A3h ; ú
.rdata:0000005B                 db    2
.rdata:0000005C                 db  63h ; c
.rdata:0000005D                 db    2
.rdata:0000005E                 db 0B9h ; ¦
.rdata:0000005F                 db    2
.rdata:00000060                 db  63h ; c
.rdata:00000061                 db    3
.rdata:00000062                 db  31h ; 1
.rdata:00000063                 db    2
.rdata:00000064                 db  5Eh ; ^
.rdata:00000065                 db    3
.rdata:00000066                 db 0AFh ; »
.rdata:00000067                 db    2
.rdata:00000068                 db 0FBh ; v
.rdata:00000069                 db    1
.rdata:0000006A                 db  1Bh
.rdata:0000006B                 db    1
.rdata:0000006C                 db 0E2h ; G
.rdata:0000006D                 db    1
.rdata:0000006E                 db  81h ; ü
.rdata:0000006F                 db    0
.rdata:00000070                 db  27h ; '
.rdata:00000071                 db    3
.rdata:00000072                 db  4Fh ; O
.rdata:00000073                 db    2
.rdata:00000074                 db 0DDh ; ¦
.rdata:00000075                 db    2
.rdata:00000076                 db  6Fh ; o
.rdata:00000077                 db    2
.rdata:00000078                 db  96h ; û
.rdata:00000079                 db    0
.rdata:0000007A                 db 0EEh ; e
.rdata:0000007B                 db    0
.rdata:0000007C                 db  3Bh ; ;
.rdata:0000007D                 db    0
.rdata:0000007E                 db  7Bh ; {
.rdata:0000007F                 db    1
.rdata:00000080                 db 0ACh ; ¼
.rdata:00000081                 db    2
.rdata:00000082                 db  6Dh ; m
.rdata:00000083                 db    3
.rdata:00000084                 db  71h ; q
.rdata:00000085                 db    2
.rdata:00000086                 db 0A9h ; ¬
.rdata:00000087                 db    0
.rdata:00000088                 db  83h ; â
.rdata:00000089                 db    2
.rdata:0000008A                 db  69h ; i
.rdata:0000008B                 db    0
.rdata:0000008C                 db 0AAh ; ¬
.rdata:0000008D                 db    0
.rdata:0000008E                 db  5Fh ; _
.rdata:0000008F                 db    2
.rdata:00000090                 db    8
.rdata:00000091                 db    2
.rdata:00000092                 db 0A4h ; ñ
.rdata:00000093                 db    3
.rdata:00000094                 db 0D7h ; +
.rdata:00000095                 db    2
.rdata:00000096                 db 0DCh ; _
.rdata:00000097                 db    1
.rdata:00000098                 db 0B5h ; ¦
.rdata:00000099                 db    2
.rdata:0000009A                 db 0A9h ; ¬
.rdata:0000009B                 db    1
.rdata:0000009C                 db 0AEh ; «
.rdata:0000009D                 db    0
.rdata:0000009E                 db  87h ; ç
.rdata:0000009F                 db    2
.rdata:000000A0                 db  49h ; I
.rdata:000000A1                 db    0
.rdata:000000A2                 db  7Ah ; z
.rdata:000000A3                 db    0
.rdata:000000A4                 db  4Fh ; O
.rdata:000000A5                 db    1
.rdata:000000A6                 db  12h
.rdata:000000A7                 db    2
.rdata:000000A8                 db 0BAh ; ¦
.rdata:000000A9                 db    1
.rdata:000000AA                 db  55h ; U
.rdata:000000AB                 db    3
.rdata:000000AC                 db 0B7h ; +
.rdata:000000AD                 db    2
.rdata:000000AE                 db 0F9h ; ·
.rdata:000000AF                 db    0
.rdata:000000B0                 db 0BDh ; +
.rdata:000000B1                 db    1
.rdata:000000B2                 db    3
.rdata:000000B3                 db    2
.rdata:000000B4                 db  8Dh ; ì
.rdata:000000B5                 db    3
.rdata:000000B6                 db  21h ; !
.rdata:000000B7                 db    2
.rdata:000000B8                 db 0BFh ; +
.rdata:000000B9                 db    2
.rdata:000000BA                 db  97h ; ù
.rdata:000000BB                 db    3
.rdata:000000BC                 db  6Ah ; j
.rdata:000000BD                 db    3
.rdata:000000BE                 db 0DAh ; +
.rdata:000000BF                 db    1
.rdata:000000C0                 db  72h ; r
.rdata:000000C1                 db    3
.rdata:000000C2                 db 0F4h ; (
.rdata:000000C3                 db    1
.rdata:000000C4                 db  52h ; R
.rdata:000000C5                 db    2
.rdata:000000C6                 db  64h ; d
.rdata:000000C7                 db    2
.rdata:000000C8                 db  81h ; ü
.rdata:000000C9                 db    2
.rdata:000000CA                 db  21h ; !
.rdata:000000CB                 db    3
.rdata:000000CC                 db 0DCh ; _
.rdata:000000CD                 db    0
.rdata:000000CE                 db 0A2h ; ó
.rdata:000000CF                 db    0
.rdata:000000D0                 db  33h ; 3
.rdata:000000D1                 db    3
.rdata:000000D2                 db 0D8h ; +
.rdata:000000D3                 db    3
.rdata:000000D4                 db  4Dh ; M
.rdata:000000D5                 db    2
.rdata:000000D6                 db    1
.rdata:000000D7                 db    2
.rdata:000000D8                 db 0EFh ; n
.rdata:000000D9                 db    1
.rdata:000000DA                 db  1Fh
.rdata:000000DB                 db    3
.rdata:000000DC                 db 0A1h ; í
.rdata:000000DD                 db    0
.rdata:000000DE                 db  5Ch ; \
.rdata:000000DF                 db    2
.rdata:000000E0                 db 0BEh ; +
.rdata:000000E1                 db    3
.rdata:000000E2                 db  15h
.rdata:000000E3                 db    2
.rdata:000000E4                 db 0DDh ; ¦
.rdata:000000E5                 db    0
.rdata:000000E6                 db  90h ; É
.rdata:000000E7                 db    1
.rdata:000000E8                 db  82h ; é
.rdata:000000E9                 db    1
.rdata:000000EA                 db  63h ; c
.rdata:000000EB                 db    3
.rdata:000000EC                 db  58h ; X
.rdata:000000ED                 db    2
.rdata:000000EE                 db  0Eh
.rdata:000000EF                 db    3
.rdata:000000F0                 db  7Eh ; ~
.rdata:000000F1                 db    1
.rdata:000000F2                 db  54h ; T
.rdata:000000F3                 db    2
.rdata:000000F4                 db  9Eh ; P
.rdata:000000F5                 db    1
.rdata:000000F6                 db 0ABh ; ½
.rdata:000000F7                 db    0
.rdata:000000F8                 db    4
.rdata:000000F9                 db    2
.rdata:000000FA                 db  77h ; w
.rdata:000000FB                 db    1
.rdata:000000FC                 db 0AAh ; ¬
.rdata:000000FD                 db    2
.rdata:000000FE                 db 0E5h ; s
.rdata:000000FF                 db    1
.rdata:00000100                 db  8Fh ; Å
.rdata:00000101                 db    3
.rdata:00000102                 db  14h
.rdata:00000103                 db    1
.rdata:00000104                 db  62h ; b
.rdata:00000105                 db    0
.rdata:00000106                 db  29h ; )
.rdata:00000107                 db    2
.rdata:00000108                 db 0A3h ; ú
.rdata:00000109                 db    0
.rdata:0000010A                 db  62h ; b
.rdata:0000010B                 db    1
.rdata:0000010C                 db  9Ah ; Ü
.rdata:0000010D                 db    2
.rdata:0000010E                 db 0A5h ; Ñ
.rdata:0000010F                 db    3
.rdata:00000110                 db 0A8h ; ¿
.rdata:00000111                 db    1
.rdata:00000112                 db  55h ; U
.rdata:00000113                 db    1
.rdata:00000114                 db  15h
.rdata:00000115                 db    2
.rdata:00000116                 db  66h ; f
.rdata:00000117                 db    3
.rdata:00000118                 db 0E3h ; p
.rdata:00000119                 db    0
.rdata:0000011A                 db 0DAh ; +
.rdata:0000011B                 db    2
.rdata:0000011C                 db 0DBh ; ¦
.rdata:0000011D                 db    1
.rdata:0000011E                 db 0BAh ; ¦
.rdata:0000011F                 db    0
.rdata:00000120                 db    7
.rdata:00000121                 db    1
.rdata:00000122                 db  87h ; ç
.rdata:00000123                 db    2
.rdata:00000124                 db  19h
.rdata:00000125                 db    2
.rdata:00000126                 db 0AEh ; «
.rdata:00000127                 db    2
.rdata:00000128                 db  58h ; X
.rdata:00000129                 db    2
.rdata:0000012A                 db 0E0h ; a
.rdata:0000012B                 db    0
.rdata:0000012C                 db 0D5h ; +
.rdata:0000012D                 db    1
.rdata:0000012E                 db  44h ; D
.rdata:0000012F                 db    0
.rdata:00000130                 db    2
.rdata:00000131                 db    3
.rdata:00000132                 db  97h ; ù
.rdata:00000133                 db    3
.rdata:00000134                 db 0BEh ; +
.rdata:00000135                 db    0
.rdata:00000136                 db  75h ; u
.rdata:00000137                 db    1
.rdata:00000138                 db  26h ; &
.rdata:00000139                 db    1
.rdata:0000013A                 db  36h ; 6
.rdata:0000013B                 db    3
.rdata:0000013C                 db  28h ; (
.rdata:0000013D                 db    3
.rdata:0000013E                 db 0CEh ; +
.rdata:0000013F                 db    0
.rdata:00000140                 db 0B8h ; +
.rdata:00000141                 db    0
.rdata:00000142                 db 0AFh ; »
.rdata:00000143                 db    3
.rdata:00000144                 db  1Bh
.rdata:00000145                 db    3
.rdata:00000146                 db  80h ; Ç
.rdata:00000147                 db    1
.rdata:00000148                 db  7Fh ; 
.rdata:00000149                 db    1
.rdata:0000014A                 db 0CDh ; -
.rdata:0000014B                 db    1
.rdata:0000014C                 db  94h ; ö
.rdata:0000014D                 db    1
.rdata:0000014E                 db 0F6h ; ÷
.rdata:0000014F                 db    2
.rdata:00000150                 db  47h ; G
.rdata:00000151                 db    3
.rdata:00000152                 db  77h ; w
.rdata:00000153                 db    3
.rdata:00000154                 db 0CBh ; -
.rdata:00000155                 db    2
.rdata:00000156                 db  43h ; C
.rdata:00000157                 db    0
.rdata:00000158                 db  6Ah ; j
.rdata:00000159                 db    2
.rdata:0000015A                 db  14h
.rdata:0000015B                 db    1
.rdata:0000015C                 db 0CCh ; ¦
.rdata:0000015D                 db    0
.rdata:0000015E                 db  96h ; û
.rdata:0000015F                 db    3
.rdata:00000160                 db  69h ; i
.rdata:00000161                 db    3
.rdata:00000162                 db    9
.rdata:00000163                 db    3
.rdata:00000164                 db  5Ch ; \
.rdata:00000165                 db    2
.rdata:00000166                 db  30h ; 0
.rdata:00000167                 db    2
.rdata:00000168                 db 0B7h ; +
.rdata:00000169                 db    3
.rdata:0000016A                 db 0A0h ; á
.rdata:0000016B                 db    0
.rdata:0000016C                 db  42h ; B
.rdata:0000016D                 db    2
.rdata:0000016E                 db 0D2h ; -
.rdata:0000016F                 db    2
.rdata:00000170                 db  4Fh ; O
.rdata:00000171                 db    0
.rdata:00000172                 db  24h ; $
.rdata:00000173                 db    3
.rdata:00000174                 db  60h ; `
.rdata:00000175                 db    0
.rdata:00000176                 db  99h ; Ö
.rdata:00000177                 db    1
.rdata:00000178                 db 0C9h ; +
.rdata:00000179                 db    2
.rdata:0000017A                 db 0ACh ; ¼
.rdata:0000017B                 db    3
.rdata:0000017C                 db  8Ch ; î
.rdata:0000017D                 db    2
.rdata:0000017E                 db 0A6h ; ª
.rdata:0000017F                 db    3
.rdata:00000180                 db 0CAh ; -
.rdata:00000181                 db    3
.rdata:00000182                 db 0BFh ; +
.rdata:00000183                 db    1
.rdata:00000184                 db  3Eh ; >
.rdata:00000185                 db    1
.rdata:00000186                 db  61h ; a
.rdata:00000187                 db    1
.rdata:00000188                 db  5Bh ; [
.rdata:00000189                 db    3
.rdata:0000018A                 db 0A0h ; á
.rdata:0000018B                 db    2
.rdata:0000018C                 db  70h ; p
.rdata:0000018D                 db    0
.rdata:0000018E                 db  11h
.rdata:0000018F                 db    3
.rdata:00000190                 db  85h ; à
.rdata:00000191                 db    2
.rdata:00000192                 db  5Fh ; _
.rdata:00000193                 db    3
.rdata:00000194                 db  23h ; #
.rdata:00000195                 db    3
.rdata:00000196                 db  5Eh ; ^
.rdata:00000197                 db    1
.rdata:00000198                 db  8Bh ; ï
.rdata:00000199                 db    0
.rdata:0000019A                 db  5Dh ; ]
.rdata:0000019B                 db    0
.rdata:0000019C                 db  62h ; b
.rdata:0000019D                 db    1
.rdata:0000019E                 db  63h ; c
.rdata:0000019F                 db    0
.rdata:000001A0                 db  34h ; 4
.rdata:000001A1                 db    3
.rdata:000001A2                 db  8Ch ; î
.rdata:000001A3                 db    3
.rdata:000001A4                 db  61h ; a
.rdata:000001A5                 db    2
.rdata:000001A6                 db    4
.rdata:000001A7                 db    3
.rdata:000001A8                 db  9Ah ; Ü
.rdata:000001A9                 db    0
.rdata:000001AA                 db  12h
.rdata:000001AB                 db    1
.rdata:000001AC                 db  44h ; D
.rdata:000001AD                 db    2
.rdata:000001AE                 db 0B8h ; +
.rdata:000001AF                 db    0
.rdata:000001B0                 db  4Fh ; O
.rdata:000001B1                 db    0
.rdata:000001B2                 db  72h ; r
.rdata:000001B3                 db    2
.rdata:000001B4                 db  76h ; v
.rdata:000001B5                 db    2
.rdata:000001B6                 db 0E6h ; µ
.rdata:000001B7                 db    2
.rdata:000001B8                 db  8Dh ; ì
.rdata:000001B9                 db    2
.rdata:000001BA                 db  1Ah
.rdata:000001BB                 db    1
.rdata:000001BC                 db 0FAh ; ·
.rdata:000001BD                 db    2
.rdata:000001BE                 db  6Fh ; o
.rdata:000001BF                 db    2
.rdata:000001C0                 db 0A8h ; ¿
.rdata:000001C1                 db    2
.rdata:000001C2                 db  51h ; Q
.rdata:000001C3                 db    0
.rdata:000001C4                 db  9Fh ; ƒ
.rdata:000001C5                 db    3
.rdata:000001C6                 db  72h ; r
.rdata:000001C7                 db    2
.rdata:000001C8                 db  15h
.rdata:000001C9                 db    3
.rdata:000001CA                 db  7Dh ; }
.rdata:000001CB                 db    0
.rdata:000001CC                 db  9Bh ; ¢
.rdata:000001CD                 db    1
.rdata:000001CE                 db    9
.rdata:000001CF                 db    2
.rdata:000001D0                 db 0AAh ; ¬
.rdata:000001D1                 db    3
.rdata:000001D2                 db  2Ch ; ,
.rdata:000001D3                 db    1
.rdata:000001D4                 db  35h ; 5
.rdata:000001D5                 db    3
.rdata:000001D6                 db  4Eh ; N
.rdata:000001D7                 db    0
.rdata:000001D8                 db  57h ; W
.rdata:000001D9                 db    1
.rdata:000001DA                 db 0AFh ; »
.rdata:000001DB                 db    0
.rdata:000001DC                 db  80h ; Ç
.rdata:000001DD                 db    0
.rdata:000001DE                 db 0FAh ; ·
.rdata:000001DF                 db    0
.rdata:000001E0                 db 0AAh ; ¬
.rdata:000001E1                 db    0
.rdata:000001E2                 db    6
.rdata:000001E3                 db    3
.rdata:000001E4                 db 0CCh ; ¦
.rdata:000001E5                 db    3
.rdata:000001E6                 db  13h
.rdata:000001E7                 db    1
.rdata:000001E8                 db 0E7h ; t
.rdata:000001E9                 db    3
.rdata:000001EA                 db  7Fh ; 
.rdata:000001EB                 db    2
.rdata:000001EC                 db 0EFh ; n
.rdata:000001ED                 db    1
.rdata:000001EE                 db  4Eh ; N
.rdata:000001EF                 db    0
.rdata:000001F0                 db  60h ; `
.rdata:000001F1                 db    1
.rdata:000001F2                 db  7Eh ; ~
.rdata:000001F3                 db    0
.rdata:000001F4                 db  59h ; Y
.rdata:000001F5                 db    3
.rdata:000001F6                 db 0BCh ; +
.rdata:000001F7                 db    3
.rdata:000001F8                 db  66h ; f
.rdata:000001F9                 db    1
.rdata:000001FA                 db  6Bh ; k
.rdata:000001FB                 db    2
.rdata:000001FC                 db  44h ; D
.rdata:000001FD                 db    2
.rdata:000001FE                 db  7Ch ; |
.rdata:000001FF                 db    0
.rdata:00000200                 db 0E1h ; ß
.rdata:00000201                 db    2
.rdata:00000202                 db  52h ; R
.rdata:00000203                 db    2
.rdata:00000204                 db 0BDh ; +
.rdata:00000205                 db    2
.rdata:00000206                 db  64h ; d
.rdata:00000207                 db    2
.rdata:00000208                 db  9Dh ; ¥
.rdata:00000209                 db    2
.rdata:0000020A                 db  70h ; p
.rdata:0000020B                 db    0
.rdata:0000020C                 db  86h ; å
.rdata:0000020D                 db    0
.rdata:0000020E                 db 0B6h ; ¦
.rdata:0000020F                 db    2
.rdata:00000210                 db  6Bh ; k
.rdata:00000211                 db    1
.rdata:00000212                 db 0E0h ; a
.rdata:00000213                 db    3
.rdata:00000214                 db  29h ; )
.rdata:00000215                 db    3
.rdata:00000216                 db 0E7h ; t
.rdata:00000217                 db    2
.rdata:00000218                 db 0A8h ; ¿
.rdata:00000219                 db    0
.rdata:0000021A                 db 0CEh ; +
.rdata:0000021B                 db    3
.rdata:0000021C                 db 0B0h ; ¦
.rdata:0000021D                 db    3
.rdata:0000021E                 db  77h ; w
.rdata:0000021F                 db    1
.rdata:00000220                 db 0ECh ; 8
.rdata:00000221                 db    2
.rdata:00000222                 db  34h ; 4
.rdata:00000223                 db    0
.rdata:00000224                 db  58h ; X
.rdata:00000225                 db    2
.rdata:00000226                 db 0EBh ; d
.rdata:00000227                 db    2
.rdata:00000228                 db  82h ; é
.rdata:00000229                 db    2
.rdata:0000022A                 db 0B6h ; ¦
.rdata:0000022B                 db    0
.rdata:0000022C                 db  5Eh ; ^
.rdata:0000022D                 db    3
.rdata:0000022E                 db  51h ; Q
.rdata:0000022F                 db    0
.rdata:00000230                 db  58h ; X
.rdata:00000231                 db    1
.rdata:00000232                 db  25h ; %
.rdata:00000233                 db    3
.rdata:00000234                 db 0DCh ; _
.rdata:00000235                 db    3
.rdata:00000236                 db 0E3h ; p
.rdata:00000237                 db    2
.rdata:00000238                 db 0FFh
.rdata:00000239                 db    1
.rdata:0000023A                 db  8Fh ; Å
.rdata:0000023B                 db    2
.rdata:0000023C                 db  2Eh ; .
.rdata:0000023D                 db    3
.rdata:0000023E                 db  4Eh ; N
.rdata:0000023F                 db    1
.rdata:00000240                 db 0F9h ; ·
.rdata:00000241                 db    0
.rdata:00000242                 db    3
.rdata:00000243                 db    2
.rdata:00000244                 db  81h ; ü
.rdata:00000245                 db    3
.rdata:00000246                 db 0BBh ; +
.rdata:00000247                 db    3
.rdata:00000248                 db  98h ; ÿ
.rdata:00000249                 db    2
.rdata:0000024A                 db 0D5h ; +
.rdata:0000024B                 db    3
.rdata:0000024C                 db  89h ; ë
.rdata:0000024D                 db    2
.rdata:0000024E                 db  71h ; q
.rdata:0000024F                 db    0
.rdata:00000250                 db 0CEh ; +
.rdata:00000251                 db    3
.rdata:00000252                 db 0CBh ; -
.rdata:00000253                 db    1
.rdata:00000254                 db  7Dh ; }
.rdata:00000255                 db    3
.rdata:00000256                 db 0E4h ; S
.rdata:00000257                 db    0
.rdata:00000258                 db 0B1h ; ¦
.rdata:00000259                 db    1
.rdata:0000025A                 db  45h ; E
.rdata:0000025B                 db    3
.rdata:0000025C                 db  29h ; )
.rdata:0000025D                 db    2
.rdata:0000025E                 db  0Ch
.rdata:0000025F                 db    1
.rdata:00000260                 db  9Eh ; P
.rdata:00000261                 db    3
.rdata:00000262                 db 0F0h ; =
.rdata:00000263                 db    0
.rdata:00000264                 db  66h ; f
.rdata:00000265                 db    0
.rdata:00000266                 db  8Eh ; Ä
.rdata:00000267                 db    2
.rdata:00000268                 db 0CBh ; -
.rdata:00000269                 db    1
.rdata:0000026A                 db  33h ; 3
.rdata:0000026B                 db    0
.rdata:0000026C                 db 0AEh ; «
.rdata:0000026D                 db    2
.rdata:0000026E                 db 0F2h ; =
.rdata:0000026F                 db    2
.rdata:00000270                 db  26h ; &
.rdata:00000271                 db    3
.rdata:00000272                 db 0F8h ; °
.rdata:00000273                 db    2
.rdata:00000274                 db 0EDh ; f
.rdata:00000275                 db    1
.rdata:00000276                 db  93h ; ô
.rdata:00000277                 db    1
.rdata:00000278                 db  9Fh ; ƒ
.rdata:00000279                 db    1
.rdata:0000027A                 db  8Ah ; è
.rdata:0000027B                 db    1
.rdata:0000027C                 db 0AFh ; »
.rdata:0000027D                 db    2
.rdata:0000027E                 db 0BCh ; +
.rdata:0000027F                 db    2
.rdata:00000280                 db 0B2h ; ¦
.rdata:00000281                 db    3
.rdata:00000282                 db  9Eh ; P
.rdata:00000283                 db    2
.rdata:00000284                 db  90h ; É
.rdata:00000285                 db    2
.rdata:00000286                 db  62h ; b
.rdata:00000287                 db    2
.rdata:00000288                 db 0E2h ; G
.rdata:00000289                 db    2
.rdata:0000028A                 db  88h ; ê
.rdata:0000028B                 db    1
.rdata:0000028C                 db 0F8h ; °
.rdata:0000028D                 db    2
.rdata:0000028E                 db  1Fh
.rdata:0000028F                 db    3
.rdata:00000290                 db  77h ; w
.rdata:00000291                 db    3
.rdata:00000292                 db  8Dh ; ì
.rdata:00000293                 db    2
.rdata:00000294                 db 0D2h ; -
.rdata:00000295                 db    3
.rdata:00000296                 db  41h ; A
.rdata:00000297                 db    1
.rdata:00000298                 db  40h ; @
.rdata:00000299                 db    2
.rdata:0000029A                 db  69h ; i
.rdata:0000029B                 db    2
.rdata:0000029C                 db  72h ; r
.rdata:0000029D                 db    2
.rdata:0000029E                 db 0F6h ; ÷
.rdata:0000029F                 db    1
.rdata:000002A0                 db  7Eh ; ~
.rdata:000002A1                 db    3
.rdata:000002A2                 db 0A7h ; º
.rdata:000002A3                 db    2
.rdata:000002A4                 db 0F3h ; =
.rdata:000002A5                 db    0
.rdata:000002A6                 db 0B8h ; +
.rdata:000002A7                 db    1
.rdata:000002A8                 db 0A8h ; ¿
.rdata:000002A9                 db    2
.rdata:000002AA                 db  6Fh ; o
.rdata:000002AB                 db    3
.rdata:000002AC                 db 0C2h ; -
.rdata:000002AD                 db    0
.rdata:000002AE                 db  3Ch ; <
.rdata:000002AF                 db    2
.rdata:000002B0                 db  80h ; Ç
.rdata:000002B1                 db    2
.rdata:000002B2                 db 0D4h ; +
.rdata:000002B3                 db    2
.rdata:000002B4                 db  9Eh ; P
.rdata:000002B5                 db    3
.rdata:000002B6                 db  38h ; 8
.rdata:000002B7                 db    0
.rdata:000002B8                 db 0CCh ; ¦
.rdata:000002B9                 db    0
.rdata:000002BA                 db 0BCh ; +
.rdata:000002BB                 db    2
.rdata:000002BC                 db 0C3h ; +
.rdata:000002BD                 db    2
.rdata:000002BE                 db  97h ; ù
.rdata:000002BF                 db    0
.rdata:000002C0                 db 0C9h ; +
.rdata:000002C1                 db    1
.rdata:000002C2                 db 0C1h ; -
.rdata:000002C3                 db    1
.rdata:000002C4                 db  1Dh
.rdata:000002C5                 db    3
.rdata:000002C6                 db 0C3h ; +
.rdata:000002C7                 db    0
.rdata:000002C8                 db  17h
.rdata:000002C9                 db    3
.rdata:000002CA                 db  2Eh ; .
.rdata:000002CB                 db    2
.rdata:000002CC                 db 0B1h ; ¦
.rdata:000002CD                 db    3
.rdata:000002CE                 db 0A7h ; º
.rdata:000002CF                 db    2
.rdata:000002D0                 db  29h ; )
.rdata:000002D1                 db    1
.rdata:000002D2                 db  3Bh ; ;
.rdata:000002D3                 db    0
.rdata:000002D4                 db  57h ; W
.rdata:000002D5                 db    0
.rdata:000002D6                 db  38h ; 8
.rdata:000002D7                 db    3
.rdata:000002D8                 db 0C9h ; +
.rdata:000002D9                 db    2
.rdata:000002DA                 db  97h ; ù
.rdata:000002DB                 db    2
.rdata:000002DC                 db  9Ch ; £
.rdata:000002DD                 db    1
.rdata:000002DE                 db 0B5h ; ¦
.rdata:000002DF                 db    2
.rdata:000002E0                 db  56h ; V
.rdata:000002E1                 db    1
.rdata:000002E2                 db  5Eh ; ^
.rdata:000002E3                 db    2
.rdata:000002E4                 db  86h ; å
.rdata:000002E5                 db    0
.rdata:000002E6                 db  6Ch ; l
.rdata:000002E7                 db    0
.rdata:000002E8                 db  3Bh ; ;
.rdata:000002E9                 db    2
.rdata:000002EA                 db  6Ch ; l
.rdata:000002EB                 db    1
.rdata:000002EC                 db  77h ; w
.rdata:000002ED                 db    2
.rdata:000002EE                 db 0D4h ; +
.rdata:000002EF                 db    0
.rdata:000002F0                 db 0AEh ; «
.rdata:000002F1                 db    0
.rdata:000002F2                 db  83h ; â
.rdata:000002F3                 db    2
.rdata:000002F4                 db  30h ; 0
.rdata:000002F5                 db    1
.rdata:000002F6                 db  49h ; I
.rdata:000002F7                 db    1
.rdata:000002F8                 db  57h ; W
.rdata:000002F9                 db    1
.rdata:000002FA                 db  61h ; a
.rdata:000002FB                 db    0
.rdata:000002FC                 db 0AEh ; «
.rdata:000002FD                 db    1
.rdata:000002FE                 db 0EFh ; n
.rdata:000002FF                 db    2
.rdata:00000300                 db 0F1h ; ±
.rdata:00000301                 db    1
.rdata:00000302                 db  3Ah ; :
.rdata:00000303                 db    1
.rdata:00000304                 db 0D7h ; +
.rdata:00000305                 db    3
.rdata:00000306                 db  76h ; v
.rdata:00000307                 db    1
.rdata:00000308                 db  36h ; 6
.rdata:00000309                 db    3
.rdata:0000030A                 db 0A0h ; á
.rdata:0000030B                 db    3
.rdata:0000030C                 db  8Ch ; î
.rdata:0000030D                 db    0
.rdata:0000030E                 db 0CEh ; +
.rdata:0000030F                 db    0
.rdata:00000310                 db  49h ; I
.rdata:00000311                 db    0
.rdata:00000312                 db    7
.rdata:00000313                 db    1
.rdata:00000314                 db 0D4h ; +
.rdata:00000315                 db    3
.rdata:00000316                 db 0E0h ; a
.rdata:00000317                 db    2
.rdata:00000318                 db  6Ch ; l
.rdata:00000319                 db    3
.rdata:0000031A                 db 0DEh ; ¦
.rdata:0000031B                 db    1
.rdata:0000031C                 db 0AEh ; «
.rdata:0000031D                 db    1
.rdata:0000031E                 db  31h ; 1
.rdata:0000031F                 db    1
.rdata:00000320                 db 0AAh ; ¬
.rdata:00000321                 db    0
.rdata:00000322                 db    2
.rdata:00000323                 db    2
.rdata:00000324                 db  6Ch ; l
.rdata:00000325                 db    1
.rdata:00000326                 db 0B4h ; ¦
.rdata:00000327                 db    2
.rdata:00000328                 db  3Dh ; =
.rdata:00000329                 db    3
.rdata:0000032A                 db  52h ; R
.rdata:0000032B                 db    0
.rdata:0000032C                 db  57h ; W
.rdata:0000032D                 db    3
.rdata:0000032E                 db 0B9h ; ¦
.rdata:0000032F                 db    3
.rdata:00000330                 db 0A4h ; ñ
.rdata:00000331                 db    2
.rdata:00000332                 db 0F6h ; ÷
.rdata:00000333                 db    0
.rdata:00000334                 db  71h ; q
.rdata:00000335                 db    1
.rdata:00000336                 db 0CAh ; -
.rdata:00000337                 db    3
.rdata:00000338                 db  26h ; &
.rdata:00000339                 db    1
.rdata:0000033A                 db 0EEh ; e
.rdata:0000033B                 db    2
.rdata:0000033C                 db  27h ; '
.rdata:0000033D                 db    3
.rdata:0000033E                 db  3Bh ; ;
.rdata:0000033F                 db    3
.rdata:00000340                 db  96h ; û
.rdata:00000341                 db    0
.rdata:00000342                 db  16h
.rdata:00000343                 db    3
.rdata:00000344                 db  20h
.rdata:00000345                 db    1
.rdata:00000346                 db  9Bh ; ¢
.rdata:00000347                 db    3
.rdata:00000348                 db  24h ; $
.rdata:00000349                 db    3
.rdata:0000034A                 db  7Ah ; z
.rdata:0000034B                 db    1
.rdata:0000034C                 db 0D7h ; +
.rdata:0000034D                 db    0
.rdata:0000034E                 db  3Ch ; <
.rdata:0000034F                 db    3
.rdata:00000350                 db  50h ; P
.rdata:00000351                 db    2
.rdata:00000352                 db  19h
.rdata:00000353                 db    1
.rdata:00000354                 db  35h ; 5
.rdata:00000355                 db    2
.rdata:00000356                 db  2Bh ; +
.rdata:00000357                 db    2
.rdata:00000358                 db 0C6h ; ¦
.rdata:00000359                 db    2
.rdata:0000035A                 db  52h ; R
.rdata:0000035B                 db    0
.rdata:0000035C                 db  80h ; Ç
.rdata:0000035D                 db    3
.rdata:0000035E                 db  3Fh ; ?
.rdata:0000035F                 db    3
.rdata:00000360                 db  23h ; #
.rdata:00000361                 db    2
.rdata:00000362                 db    5
.rdata:00000363                 db    1
.rdata:00000364                 db  0Ch
.rdata:00000365                 db    2
.rdata:00000366                 db 0CEh ; +
.rdata:00000367                 db    1
.rdata:00000368                 db  25h ; %
.rdata:00000369                 db    1
.rdata:0000036A                 db 0D1h ; -
.rdata:0000036B                 db    1
.rdata:0000036C                 db 0F6h ; ÷
.rdata:0000036D                 db    1
.rdata:0000036E                 db  38h ; 8
.rdata:0000036F                 db    0
.rdata:00000370                 db  95h ; ò
.rdata:00000371                 db    2
.rdata:00000372                 db  35h ; 5
.rdata:00000373                 db    3
.rdata:00000374                 db 0D0h ; -
.rdata:00000375                 db    3
.rdata:00000376                 db 0DFh ; ¯
.rdata:00000377                 db    3
.rdata:00000378                 db  92h ; Æ
.rdata:00000379                 db    2
.rdata:0000037A                 db  65h ; e
.rdata:0000037B                 db    3
.rdata:0000037C                 db  89h ; ë
.rdata:0000037D                 db    3
.rdata:0000037E                 db 0F6h ; ÷
.rdata:0000037F                 db    2
.rdata:00000380                 db 0E9h ; T
.rdata:00000381                 db    2
.rdata:00000382                 db 0C1h ; -
.rdata:00000383                 db    0
.rdata:00000384                 db    0
.rdata:00000385                 db    3
.rdata:00000386                 db  26h ; &
.rdata:00000387                 db    2
.rdata:00000388                 db  60h ; `
.rdata:00000389                 db    2
.rdata:0000038A                 db 0A5h ; Ñ
.rdata:0000038B                 db    3
.rdata:0000038C                 db  7Ah ; z
.rdata:0000038D                 db    1
.rdata:0000038E                 db  1Eh
.rdata:0000038F                 db    1
.rdata:00000390                 db 0D7h ; +
.rdata:00000391                 db    0
.rdata:00000392                 db 0D3h ; +
.rdata:00000393                 db    3
.rdata:00000394                 db  18h
.rdata:00000395                 db    3
.rdata:00000396                 db 0C1h ; -
.rdata:00000397                 db    3
.rdata:00000398                 db  3Dh ; =
.rdata:00000399                 db    0
.rdata:0000039A                 db 0B0h ; ¦
.rdata:0000039B                 db    2
.rdata:0000039C                 db  19h
.rdata:0000039D                 db    3
.rdata:0000039E                 db  84h ; ä
.rdata:0000039F                 db    2
.rdata:000003A0                 db 0DAh ; +
.rdata:000003A1                 db    3
.rdata:000003A2                 db  93h ; ô
.rdata:000003A3                 db    1
.rdata:000003A4                 db  6Ah ; j
.rdata:000003A5                 db    0
.rdata:000003A6                 db  6Eh ; n
.rdata:000003A7                 db    1
.rdata:000003A8                 db  89h ; ë
.rdata:000003A9                 db    3
.rdata:000003AA                 db  84h ; ä
.rdata:000003AB                 db    2
.rdata:000003AC                 db  74h ; t
.rdata:000003AD                 db    1
.rdata:000003AE                 db  37h ; 7
.rdata:000003AF                 db    2
.rdata:000003B0                 db 0D2h ; -
.rdata:000003B1                 db    1
.rdata:000003B2                 db 0B2h ; ¦
.rdata:000003B3                 db    1
.rdata:000003B4                 db  85h ; à
.rdata:000003B5                 db    2
.rdata:000003B6                 db 0D2h ; -
.rdata:000003B7                 db    0
.rdata:000003B8                 db  85h ; à
.rdata:000003B9                 db    1
.rdata:000003BA                 db  26h ; &
.rdata:000003BB                 db    2
.rdata:000003BC                 db  97h ; ù
.rdata:000003BD                 db    3
.rdata:000003BE                 db  87h ; ç
.rdata:000003BF                 db    0
.rdata:000003C0                 db  0Ch
.rdata:000003C1                 db    3
.rdata:000003C2                 db    5
.rdata:000003C3                 db    3
.rdata:000003C4                 db  7Bh ; {
.rdata:000003C5                 db    2
.rdata:000003C6                 db  85h ; à
.rdata:000003C7                 db    1
.rdata:000003C8                 db 0C3h ; +
.rdata:000003C9                 db    2
.rdata:000003CA                 db  64h ; d
.rdata:000003CB                 db    0
.rdata:000003CC                 db  72h ; r
.rdata:000003CD                 db    2
.rdata:000003CE                 db 0BEh ; +
.rdata:000003CF                 db    3
.rdata:000003D0                 db 0A5h ; Ñ
.rdata:000003D1                 db    0
.rdata:000003D2                 db 0F8h ; °
.rdata:000003D3                 db    1
.rdata:000003D4                 db  98h ; ÿ
.rdata:000003D5                 db    3
.rdata:000003D6                 db 0B0h ; ¦
.rdata:000003D7                 db    0
.rdata:000003D8                 db 0C1h ; -
.rdata:000003D9                 db    0
.rdata:000003DA                 db 0C9h ; +
.rdata:000003DB                 db    2
.rdata:000003DC                 db  59h ; Y
.rdata:000003DD                 db    3
.rdata:000003DE                 db    9
.rdata:000003DF                 db    1
.rdata:000003E0                 db 0CBh ; -
.rdata:000003E1                 db    0
.rdata:000003E2                 db  32h ; 2
.rdata:000003E3                 db    0
.rdata:000003E4                 db  9Ch ; £
.rdata:000003E5                 db    2
.rdata:000003E6                 db  6Ch ; l
.rdata:000003E7                 db    0
.rdata:000003E8                 db  85h ; à
.rdata:000003E9                 db    2
.rdata:000003EA                 db 0DEh ; ¦
.rdata:000003EB                 db    3
.rdata:000003EC                 db  72h ; r
.rdata:000003ED                 db    2
.rdata:000003EE                 db 0C5h ; +
.rdata:000003EF                 db    0
.rdata:000003F0                 db 0FEh ; ¦
.rdata:000003F1                 db    1
.rdata:000003F2                 db  65h ; e
.rdata:000003F3                 db    1
.rdata:000003F4                 db  66h ; f
.rdata:000003F5                 db    1
.rdata:000003F6                 db  52h ; R
.rdata:000003F7                 db    3
.rdata:000003F8                 db  5Ah ; Z
.rdata:000003F9                 db    3
.rdata:000003FA                 db  6Ch ; l
.rdata:000003FB                 db    1
.rdata:000003FC                 db 0A8h ; ¿
.rdata:000003FD                 db    3
.rdata:000003FE                 db  7Eh ; ~
.rdata:000003FF                 db    2
.rdata:000003FF _rdata          ends
.rdata:000003FF
.text:00000400 ; ===========================================================================
.text:00000400
.text:00000400 ; Segment type: Pure code
.text:00000400 ; Segment permissions: Read/Execute
.text:00000400 _text           segment para public 'CODE' use32
.text:00000400                 assume cs:_text
.text:00000400                 ;org 400h
.text:00000400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; bool __thiscall NCompress::NBZip2::CState::Alloc(NCompress::NBZip2::CState *__hidden this)
.text:00000400                 public ?Alloc@CState@NBZip2@NCompress@@QAE_NXZ
.text:00000400 ?Alloc@CState@NBZip2@NCompress@@QAE_NXZ proc near
.text:00000400                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+7Cp
.text:00000400                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+C0p
.text:00000400
.text:00000400 var_4           = dword ptr -4
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 push    ecx
.text:00000404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000040B                 mov     [ebp+var_4], ecx
.text:0000040E                 mov     eax, [ebp+var_4]
.text:00000411                 cmp     dword ptr [eax], 0
.text:00000414                 jnz     short loc_425
.text:00000416                 push    36F280h
.text:0000041B                 call    _BigAlloc@4     ; BigAlloc(x)
.text:00000420                 mov     ecx, [ebp+var_4]
.text:00000423                 mov     [ecx], eax
.text:00000425
.text:00000425 loc_425:                                ; CODE XREF: NCompress::NBZip2::CState::Alloc(void)+14j
.text:00000425                 mov     edx, [ebp+var_4]
.text:00000428                 xor     eax, eax
.text:0000042A                 cmp     dword ptr [edx], 0
.text:0000042D                 setnz   al
.text:00000430                 add     esp, 4
.text:00000433                 cmp     ebp, esp
.text:00000435                 call    __RTC_CheckEsp
.text:0000043A                 mov     esp, ebp
.text:0000043C                 pop     ebp
.text:0000043D                 retn
.text:0000043D ?Alloc@CState@NBZip2@NCompress@@QAE_NXZ endp
.text:0000043D
.text:0000043D ; ---------------------------------------------------------------------------
.text:0000043E                 align 10h
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; void __thiscall NCompress::NBZip2::CState::Free(NCompress::NBZip2::CState *__hidden this)
.text:00000440                 public ?Free@CState@NBZip2@NCompress@@QAEXXZ
.text:00000440 ?Free@CState@NBZip2@NCompress@@QAEXXZ proc near
.text:00000440                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+9Ap
.text:00000440                                         ; NCompress::NBZip2::CState::~CState(void)+37p
.text:00000440
.text:00000440 var_4           = dword ptr -4
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 push    ecx
.text:00000444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044B                 mov     [ebp+var_4], ecx
.text:0000044E                 mov     eax, [ebp+var_4]
.text:00000451                 mov     ecx, [eax]
.text:00000453                 push    ecx
.text:00000454                 call    _BigFree@4      ; BigFree(x)
.text:00000459                 mov     edx, [ebp+var_4]
.text:0000045C                 mov     dword ptr [edx], 0
.text:00000462                 add     esp, 4
.text:00000465                 cmp     ebp, esp
.text:00000467                 call    __RTC_CheckEsp
.text:0000046C                 mov     esp, ebp
.text:0000046E                 pop     ebp
.text:0000046F                 retn
.text:0000046F ?Free@CState@NBZip2@NCompress@@QAEXXZ endp
.text:0000046F
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; unsigned __int8 __thiscall NCompress::NBZip2::CDecoder::ReadByte(NCompress::NBZip2::CDecoder *__hidden this)
.text:00000470                 public ?ReadByte@CDecoder@NBZip2@NCompress@@AAEEXZ
.text:00000470 ?ReadByte@CDecoder@NBZip2@NCompress@@AAEEXZ proc near
.text:00000470                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+61p
.text:00000470                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+11Ep
.text:00000470
.text:00000470 var_4           = dword ptr -4
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 push    ecx
.text:00000474                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000047B                 mov     [ebp+var_4], ecx
.text:0000047E                 push    8               ; unsigned int
.text:00000480                 mov     ecx, [ebp+var_4]
.text:00000483                 add     ecx, 138h       ; this
.text:00000489                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:0000048E                 add     esp, 4
.text:00000491                 cmp     ebp, esp
.text:00000493                 call    __RTC_CheckEsp
.text:00000498                 mov     esp, ebp
.text:0000049A                 pop     ebp
.text:0000049B                 retn
.text:0000049B ?ReadByte@CDecoder@NBZip2@NCompress@@AAEEXZ endp
.text:0000049B
.text:0000049B ; ---------------------------------------------------------------------------
.text:0000049C                 align 10h
.text:000004A0
.text:000004A0 ; =============== S U B R O U T I N E =======================================
.text:000004A0
.text:000004A0 ; Attributes: bp-based frame
.text:000004A0
.text:000004A0 ; unsigned int __thiscall NCompress::NBZip2::CBase::ReadBits(NCompress::NBZip2::CBase *this, unsigned int)
.text:000004A0                 public ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z
.text:000004A0 ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z proc near
.text:000004A0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadByte(void)+19p
.text:000004A0                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+72p ...
.text:000004A0
.text:000004A0 var_4           = dword ptr -4
.text:000004A0 arg_0           = dword ptr  8
.text:000004A0
.text:000004A0                 push    ebp
.text:000004A1                 mov     ebp, esp
.text:000004A3                 push    ecx
.text:000004A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004AB                 mov     [ebp+var_4], ecx
.text:000004AE                 mov     eax, [ebp+arg_0]
.text:000004B1                 push    eax
.text:000004B2                 mov     ecx, [ebp+var_4]
.text:000004B5                 add     ecx, 8
.text:000004B8                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitm@@QAEII@Z ; NBitm::CDecoder<CInBuffer>::ReadBits(uint)
.text:000004BD                 add     esp, 4
.text:000004C0                 cmp     ebp, esp
.text:000004C2                 call    __RTC_CheckEsp
.text:000004C7                 mov     esp, ebp
.text:000004C9                 pop     ebp
.text:000004CA                 retn    4
.text:000004CA ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z endp
.text:000004CA
.text:000004CA ; ---------------------------------------------------------------------------
.text:000004CD                 align 10h
.text:000004D0
.text:000004D0 ; =============== S U B R O U T I N E =======================================
.text:000004D0
.text:000004D0 ; Attributes: bp-based frame
.text:000004D0
.text:000004D0 ; unsigned int __thiscall NCompress::NBZip2::CBase::ReadBit(NCompress::NBZip2::CBase *__hidden this)
.text:000004D0                 public ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ
.text:000004D0 ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ proc near
.text:000004D0                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+5Dp
.text:000004D0                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+CEp ...
.text:000004D0
.text:000004D0 var_4           = dword ptr -4
.text:000004D0
.text:000004D0                 push    ebp
.text:000004D1                 mov     ebp, esp
.text:000004D3                 push    ecx
.text:000004D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004DB                 mov     [ebp+var_4], ecx
.text:000004DE                 push    1
.text:000004E0                 mov     ecx, [ebp+var_4]
.text:000004E3                 add     ecx, 8
.text:000004E6                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitm@@QAEII@Z ; NBitm::CDecoder<CInBuffer>::ReadBits(uint)
.text:000004EB                 add     esp, 4
.text:000004EE                 cmp     ebp, esp
.text:000004F0                 call    __RTC_CheckEsp
.text:000004F5                 mov     esp, ebp
.text:000004F7                 pop     ebp
.text:000004F8                 retn
.text:000004F8 ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ endp
.text:000004F8
.text:000004F8 ; ---------------------------------------------------------------------------
.text:000004F9                 align 10h
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500 ; __int32 __thiscall NCompress::NBZip2::CBase::ReadBlock(NCompress::NBZip2::CBase *this, unsigned int *, unsigned int, struct NCompress::NBZip2::CBlockProps *)
.text:00000500                 public ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z
.text:00000500 ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z proc near
.text:00000500                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+397p
.text:00000500                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+1A3p ...
.text:00000500
.text:00000500 var_2A0         = dword ptr -2A0h
.text:00000500 var_29C         = dword ptr -29Ch
.text:00000500 var_298         = dword ptr -298h
.text:00000500 var_294         = dword ptr -294h
.text:00000500 var_290         = dword ptr -290h
.text:00000500 var_28C         = dword ptr -28Ch
.text:00000500 var_288         = dword ptr -288h
.text:00000500 var_284         = dword ptr -284h
.text:00000500 var_280         = dword ptr -280h
.text:00000500 var_27C         = dword ptr -27Ch
.text:00000500 var_278         = dword ptr -278h
.text:00000500 var_274         = dword ptr -274h
.text:00000500 var_270         = dword ptr -270h
.text:00000500 var_268         = byte ptr -268h
.text:00000500 var_160         = dword ptr -160h
.text:00000500 var_159         = byte ptr -159h
.text:00000500 var_158         = dword ptr -158h
.text:00000500 var_154         = dword ptr -154h
.text:00000500 var_150         = dword ptr -150h
.text:00000500 var_149         = byte ptr -149h
.text:00000500 var_148         = byte ptr -148h
.text:00000500 var_13C         = dword ptr -13Ch
.text:00000500 var_138         = dword ptr -138h
.text:00000500 var_134         = dword ptr -134h
.text:00000500 var_130         = dword ptr -130h
.text:00000500 var_128         = byte ptr -128h
.text:00000500 var_114         = dword ptr -114h
.text:00000500 var_10C         = byte ptr -10Ch
.text:00000500 var_8           = dword ptr -8
.text:00000500 var_4           = dword ptr -4
.text:00000500 arg_0           = dword ptr  8
.text:00000500 arg_4           = dword ptr  0Ch
.text:00000500 arg_8           = dword ptr  10h
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503                 sub     esp, 2A0h
.text:00000509                 push    edi
.text:0000050A                 push    ecx
.text:0000050B                 lea     edi, [ebp+var_2A0]
.text:00000511                 mov     ecx, 0A8h ; '¿'
.text:00000516                 mov     eax, 0CCCCCCCCh
.text:0000051B                 rep stosd
.text:0000051D                 pop     ecx
.text:0000051E                 mov     eax, dword ptr ds:___security_cookie
.text:00000523                 xor     eax, ebp
.text:00000525                 mov     [ebp+var_4], eax
.text:00000528                 mov     [ebp+var_8], ecx
.text:0000052B                 mov     eax, [ebp+var_8]
.text:0000052E                 mov     ecx, [eax+6EB0h]
.text:00000534                 add     ecx, 1
.text:00000537                 mov     edx, [eax+6EB4h]
.text:0000053D                 adc     edx, 0
.text:00000540                 mov     eax, [ebp+var_8]
.text:00000543                 mov     [eax+6EB0h], ecx
.text:00000549                 mov     [eax+6EB4h], edx
.text:0000054F                 mov     ecx, [ebp+arg_8]
.text:00000552                 movzx   edx, byte ptr [ecx+8]
.text:00000556                 test    edx, edx
.text:00000558                 jz      short loc_56D
.text:0000055A                 mov     ecx, [ebp+var_8] ; this
.text:0000055D                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:00000562                 test    eax, eax
.text:00000564                 setnz   al
.text:00000567                 mov     ecx, [ebp+arg_8]
.text:0000056A                 mov     [ecx+8], al
.text:0000056D
.text:0000056D loc_56D:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+58j
.text:0000056D                 push    18h             ; unsigned int
.text:0000056F                 mov     ecx, [ebp+var_8] ; this
.text:00000572                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:00000577                 mov     edx, [ebp+arg_8]
.text:0000057A                 mov     [edx+4], eax
.text:0000057D                 mov     eax, [ebp+arg_8]
.text:00000580                 mov     ecx, [eax+4]
.text:00000583                 cmp     ecx, [ebp+arg_4]
.text:00000586                 jb      short loc_592
.text:00000588                 mov     eax, 1
.text:0000058D                 jmp     loc_BD0
.text:00000592 ; ---------------------------------------------------------------------------
.text:00000592
.text:00000592 loc_592:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+86j
.text:00000592                 lea     ecx, [ebp+var_10C] ; this
.text:00000598                 call    ?StartInit@CMtf8Decoder@NCompress@@QAEXXZ ; NCompress::CMtf8Decoder::StartInit(void)
.text:0000059D                 mov     [ebp+var_114], 0
.text:000005A7                 mov     [ebp+var_130], 0
.text:000005B1                 jmp     short loc_5C2
.text:000005B3 ; ---------------------------------------------------------------------------
.text:000005B3
.text:000005B3 loc_5B3:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+E0j
.text:000005B3                 mov     edx, [ebp+var_130]
.text:000005B9                 add     edx, 1
.text:000005BC                 mov     [ebp+var_130], edx
.text:000005C2
.text:000005C2 loc_5C2:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+B1j
.text:000005C2                 cmp     [ebp+var_130], 10h
.text:000005C9                 jnb     short loc_5E2
.text:000005CB                 mov     ecx, [ebp+var_8] ; this
.text:000005CE                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:000005D3                 mov     ecx, [ebp+var_130]
.text:000005D9                 mov     [ebp+ecx+var_128], al
.text:000005E0                 jmp     short loc_5B3
.text:000005E2 ; ---------------------------------------------------------------------------
.text:000005E2
.text:000005E2 loc_5E2:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+C9j
.text:000005E2                 mov     [ebp+var_130], 0
.text:000005EC                 jmp     short loc_5FD
.text:000005EE ; ---------------------------------------------------------------------------
.text:000005EE
.text:000005EE loc_5EE:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *):loc_65Fj
.text:000005EE                 mov     edx, [ebp+var_130]
.text:000005F4                 add     edx, 1
.text:000005F7                 mov     [ebp+var_130], edx
.text:000005FD
.text:000005FD loc_5FD:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+ECj
.text:000005FD                 cmp     [ebp+var_130], 100h
.text:00000607                 jnb     short loc_661
.text:00000609                 mov     eax, [ebp+var_130]
.text:0000060F                 shr     eax, 4
.text:00000612                 movzx   ecx, [ebp+eax+var_128]
.text:0000061A                 test    ecx, ecx
.text:0000061C                 jz      short loc_65F
.text:0000061E                 mov     ecx, [ebp+var_8] ; this
.text:00000621                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:00000626                 test    eax, eax
.text:00000628                 jz      short loc_65F
.text:0000062A                 mov     edx, [ebp+var_114]
.text:00000630                 mov     [ebp+var_2A0], edx
.text:00000636                 mov     eax, [ebp+var_114]
.text:0000063C                 add     eax, 1
.text:0000063F                 mov     [ebp+var_114], eax
.text:00000645                 movzx   ecx, byte ptr [ebp+var_130]
.text:0000064C                 push    ecx             ; unsigned __int8
.text:0000064D                 mov     edx, [ebp+var_2A0]
.text:00000653                 push    edx             ; unsigned int
.text:00000654                 lea     ecx, [ebp+var_10C] ; this
.text:0000065A                 call    ?Add@CMtf8Decoder@NCompress@@QAEXIE@Z ; NCompress::CMtf8Decoder::Add(uint,uchar)
.text:0000065F
.text:0000065F loc_65F:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+11Cj
.text:0000065F                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+128j
.text:0000065F                 jmp     short loc_5EE
.text:00000661 ; ---------------------------------------------------------------------------
.text:00000661
.text:00000661 loc_661:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+107j
.text:00000661                 cmp     [ebp+var_114], 0
.text:00000668                 jnz     short loc_674
.text:0000066A                 mov     eax, 1
.text:0000066F                 jmp     loc_BD0
.text:00000674 ; ---------------------------------------------------------------------------
.text:00000674
.text:00000674 loc_674:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+168j
.text:00000674                 mov     eax, [ebp+var_114]
.text:0000067A                 add     eax, 2
.text:0000067D                 mov     [ebp+var_134], eax
.text:00000683                 push    3               ; unsigned int
.text:00000685                 mov     ecx, [ebp+var_8] ; this
.text:00000688                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:0000068D                 mov     [ebp+var_138], eax
.text:00000693                 cmp     [ebp+var_138], 2
.text:0000069A                 jb      short loc_6A5
.text:0000069C                 cmp     [ebp+var_138], 6
.text:000006A3                 jbe     short loc_6AF
.text:000006A5
.text:000006A5 loc_6A5:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+19Aj
.text:000006A5                 mov     eax, 1
.text:000006AA                 jmp     loc_BD0
.text:000006AF ; ---------------------------------------------------------------------------
.text:000006AF
.text:000006AF loc_6AF:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+1A3j
.text:000006AF                 push    0Fh             ; unsigned int
.text:000006B1                 mov     ecx, [ebp+var_8] ; this
.text:000006B4                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:000006B9                 mov     [ebp+var_13C], eax
.text:000006BF                 cmp     [ebp+var_13C], 1
.text:000006C6                 jb      short loc_6D4
.text:000006C8                 cmp     [ebp+var_13C], 4652h
.text:000006D2                 jbe     short loc_6DE
.text:000006D4
.text:000006D4 loc_6D4:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+1C6j
.text:000006D4                 mov     eax, 1
.text:000006D9                 jmp     loc_BD0
.text:000006DE ; ---------------------------------------------------------------------------
.text:000006DE
.text:000006DE loc_6DE:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+1D2j
.text:000006DE                 mov     [ebp+var_150], 0
.text:000006E8
.text:000006E8 loc_6E8:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+216j
.text:000006E8                 mov     ecx, [ebp+var_150]
.text:000006EE                 mov     dl, byte ptr [ebp+var_150]
.text:000006F4                 mov     [ebp+ecx+var_148], dl
.text:000006FB                 mov     eax, [ebp+var_150]
.text:00000701                 add     eax, 1
.text:00000704                 mov     [ebp+var_150], eax
.text:0000070A                 mov     ecx, [ebp+var_150]
.text:00000710                 cmp     ecx, [ebp+var_138]
.text:00000716                 jb      short loc_6E8
.text:00000718                 mov     [ebp+var_154], 0
.text:00000722
.text:00000722 loc_722:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+2E3j
.text:00000722                 mov     [ebp+var_158], 0
.text:0000072C
.text:0000072C loc_72C:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *):loc_75Fj
.text:0000072C                 mov     ecx, [ebp+var_8] ; this
.text:0000072F                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:00000734                 test    eax, eax
.text:00000736                 jz      short loc_761
.text:00000738                 mov     edx, [ebp+var_158]
.text:0000073E                 add     edx, 1
.text:00000741                 mov     [ebp+var_158], edx
.text:00000747                 mov     eax, [ebp+var_158]
.text:0000074D                 cmp     eax, [ebp+var_138]
.text:00000753                 jb      short loc_75F
.text:00000755                 mov     eax, 1
.text:0000075A                 jmp     loc_BD0
.text:0000075F ; ---------------------------------------------------------------------------
.text:0000075F
.text:0000075F loc_75F:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+253j
.text:0000075F                 jmp     short loc_72C
.text:00000761 ; ---------------------------------------------------------------------------
.text:00000761
.text:00000761 loc_761:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+236j
.text:00000761                 mov     ecx, [ebp+var_158]
.text:00000767                 mov     dl, [ebp+ecx+var_148]
.text:0000076E                 mov     [ebp+var_159], dl
.text:00000774                 jmp     short loc_785
.text:00000776 ; ---------------------------------------------------------------------------
.text:00000776
.text:00000776 loc_776:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+2A8j
.text:00000776                 mov     eax, [ebp+var_158]
.text:0000077C                 sub     eax, 1
.text:0000077F                 mov     [ebp+var_158], eax
.text:00000785
.text:00000785 loc_785:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+274j
.text:00000785                 cmp     [ebp+var_158], 0
.text:0000078C                 jbe     short loc_7AA
.text:0000078E                 mov     ecx, [ebp+var_158]
.text:00000794                 mov     edx, [ebp+var_158]
.text:0000079A                 mov     al, [ebp+edx+var_149]
.text:000007A1                 mov     [ebp+ecx+var_148], al
.text:000007A8                 jmp     short loc_776
.text:000007AA ; ---------------------------------------------------------------------------
.text:000007AA
.text:000007AA loc_7AA:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+28Cj
.text:000007AA                 mov     cl, [ebp+var_159]
.text:000007B0                 mov     [ebp+var_148], cl
.text:000007B6                 mov     edx, [ebp+var_8]
.text:000007B9                 add     edx, [ebp+var_154]
.text:000007BF                 mov     al, [ebp+var_148]
.text:000007C5                 mov     [edx+38h], al
.text:000007C8                 mov     ecx, [ebp+var_154]
.text:000007CE                 add     ecx, 1
.text:000007D1                 mov     [ebp+var_154], ecx
.text:000007D7                 mov     edx, [ebp+var_154]
.text:000007DD                 cmp     edx, [ebp+var_13C]
.text:000007E3                 jb      loc_722
.text:000007E9                 mov     [ebp+var_160], 0
.text:000007F3
.text:000007F3 loc_7F3:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+412j
.text:000007F3                 push    5               ; unsigned int
.text:000007F5                 mov     ecx, [ebp+var_8] ; this
.text:000007F8                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:000007FD                 mov     [ebp+var_270], eax
.text:00000803                 mov     [ebp+var_274], 0
.text:0000080D                 jmp     short loc_81E
.text:0000080F ; ---------------------------------------------------------------------------
.text:0000080F
.text:0000080F loc_80F:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+392j
.text:0000080F                 mov     eax, [ebp+var_274]
.text:00000815                 add     eax, 1
.text:00000818                 mov     [ebp+var_274], eax
.text:0000081E
.text:0000081E loc_81E:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+30Dj
.text:0000081E                 mov     ecx, [ebp+var_274]
.text:00000824                 cmp     ecx, [ebp+var_134]
.text:0000082A                 jnb     short loc_897
.text:0000082C
.text:0000082C loc_82C:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+37Dj
.text:0000082C                 cmp     [ebp+var_270], 1
.text:00000833                 jb      short loc_83E
.text:00000835                 cmp     [ebp+var_270], 14h
.text:0000083C                 jbe     short loc_848
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+333j
.text:0000083E                 mov     eax, 1
.text:00000843                 jmp     loc_BD0
.text:00000848 ; ---------------------------------------------------------------------------
.text:00000848
.text:00000848 loc_848:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+33Cj
.text:00000848                 mov     ecx, [ebp+var_8] ; this
.text:0000084B                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:00000850                 test    eax, eax
.text:00000852                 jnz     short loc_856
.text:00000854                 jmp     short loc_87F
.text:00000856 ; ---------------------------------------------------------------------------
.text:00000856
.text:00000856 loc_856:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+352j
.text:00000856                 mov     edx, [ebp+var_270]
.text:0000085C                 add     edx, 1
.text:0000085F                 mov     [ebp+var_270], edx
.text:00000865                 mov     ecx, [ebp+var_8] ; this
.text:00000868                 call    ?ReadBit@CBase@NBZip2@NCompress@@QAEIXZ ; NCompress::NBZip2::CBase::ReadBit(void)
.text:0000086D                 shl     eax, 1
.text:0000086F                 mov     ecx, [ebp+var_270]
.text:00000875                 sub     ecx, eax
.text:00000877                 mov     [ebp+var_270], ecx
.text:0000087D                 jmp     short loc_82C
.text:0000087F ; ---------------------------------------------------------------------------
.text:0000087F
.text:0000087F loc_87F:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+354j
.text:0000087F                 mov     edx, [ebp+var_274]
.text:00000885                 mov     al, byte ptr [ebp+var_270]
.text:0000088B                 mov     [ebp+edx+var_268], al
.text:00000892                 jmp     loc_80F
.text:00000897 ; ---------------------------------------------------------------------------
.text:00000897
.text:00000897 loc_897:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+32Aj
.text:00000897                 jmp     short loc_8A8
.text:00000899 ; ---------------------------------------------------------------------------
.text:00000899
.text:00000899 loc_899:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+3C2j
.text:00000899                 mov     ecx, [ebp+var_274]
.text:0000089F                 add     ecx, 1
.text:000008A2                 mov     [ebp+var_274], ecx
.text:000008A8
.text:000008A8 loc_8A8:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *):loc_897j
.text:000008A8                 cmp     [ebp+var_274], 102h
.text:000008B2                 jnb     short loc_8C4
.text:000008B4                 mov     edx, [ebp+var_274]
.text:000008BA                 mov     [ebp+edx+var_268], 0
.text:000008C2                 jmp     short loc_899
.text:000008C4 ; ---------------------------------------------------------------------------
.text:000008C4
.text:000008C4 loc_8C4:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+3B2j
.text:000008C4                 lea     eax, [ebp+var_268]
.text:000008CA                 push    eax
.text:000008CB                 mov     ecx, [ebp+var_160]
.text:000008D1                 imul    ecx, 6B0h
.text:000008D7                 mov     edx, [ebp+var_8]
.text:000008DA                 lea     ecx, [edx+ecx+468Ch]
.text:000008E1                 call    ?SetCodeLengths@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)
.text:000008E6                 movzx   eax, al
.text:000008E9                 test    eax, eax
.text:000008EB                 jnz     short loc_8F7
.text:000008ED                 mov     eax, 1
.text:000008F2                 jmp     loc_BD0
.text:000008F7 ; ---------------------------------------------------------------------------
.text:000008F7
.text:000008F7 loc_8F7:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+3EBj
.text:000008F7                 mov     ecx, [ebp+var_160]
.text:000008FD                 add     ecx, 1
.text:00000900                 mov     [ebp+var_160], ecx
.text:00000906                 mov     edx, [ebp+var_160]
.text:0000090C                 cmp     edx, [ebp+var_138]
.text:00000912                 jb      loc_7F3
.text:00000918                 mov     [ebp+var_278], 0
.text:00000922                 jmp     short loc_933
.text:00000924 ; ---------------------------------------------------------------------------
.text:00000924
.text:00000924 loc_924:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+44Fj
.text:00000924                 mov     eax, [ebp+var_278]
.text:0000092A                 add     eax, 1
.text:0000092D                 mov     [ebp+var_278], eax
.text:00000933
.text:00000933 loc_933:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+422j
.text:00000933                 cmp     [ebp+var_278], 100h
.text:0000093D                 jnb     short loc_951
.text:0000093F                 mov     ecx, [ebp+var_278]
.text:00000945                 mov     edx, [ebp+arg_0]
.text:00000948                 mov     dword ptr [edx+ecx*4], 0
.text:0000094F                 jmp     short loc_924
.text:00000951 ; ---------------------------------------------------------------------------
.text:00000951
.text:00000951 loc_951:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+43Dj
.text:00000951                 mov     [ebp+var_27C], 0
.text:0000095B                 mov     [ebp+var_280], 0
.text:00000965                 mov     [ebp+var_284], 0
.text:0000096F                 mov     [ebp+var_288], 0
.text:00000979                 mov     [ebp+var_28C], 0
.text:00000983                 mov     [ebp+var_290], 0
.text:0000098D
.text:0000098D loc_98D:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *):loc_A78j
.text:0000098D                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *):loc_B97j
.text:0000098D                 cmp     [ebp+var_284], 0
.text:00000994                 jnz     short loc_9EA
.text:00000996                 mov     eax, [ebp+var_280]
.text:0000099C                 cmp     eax, [ebp+var_13C]
.text:000009A2                 jb      short loc_9AE
.text:000009A4                 mov     eax, 1
.text:000009A9                 jmp     loc_BD0
.text:000009AE ; ---------------------------------------------------------------------------
.text:000009AE
.text:000009AE loc_9AE:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+4A2j
.text:000009AE                 mov     [ebp+var_284], 32h ; '2'
.text:000009B8                 mov     ecx, [ebp+var_8]
.text:000009BB                 add     ecx, [ebp+var_280]
.text:000009C1                 movzx   edx, byte ptr [ecx+38h]
.text:000009C5                 imul    edx, 6B0h
.text:000009CB                 mov     eax, [ebp+var_8]
.text:000009CE                 lea     ecx, [eax+edx+468Ch]
.text:000009D5                 mov     [ebp+var_288], ecx
.text:000009DB                 mov     edx, [ebp+var_280]
.text:000009E1                 add     edx, 1
.text:000009E4                 mov     [ebp+var_280], edx
.text:000009EA
.text:000009EA loc_9EA:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+494j
.text:000009EA                 mov     eax, [ebp+var_284]
.text:000009F0                 sub     eax, 1
.text:000009F3                 mov     [ebp+var_284], eax
.text:000009F9                 mov     ecx, [ebp+var_8]
.text:000009FC                 add     ecx, 8
.text:000009FF                 call    ?ExtraBitsWereRead_Fast@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead_Fast(void)
.text:00000A04                 movzx   ecx, al
.text:00000A07                 test    ecx, ecx
.text:00000A09                 jz      short loc_A10
.text:00000A0B                 jmp     loc_B9C
.text:00000A10 ; ---------------------------------------------------------------------------
.text:00000A10
.text:00000A10 loc_A10:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+509j
.text:00000A10                 mov     edx, [ebp+var_8]
.text:00000A13                 add     edx, 8
.text:00000A16                 push    edx
.text:00000A17                 mov     ecx, [ebp+var_288]
.text:00000A1D                 call    ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitm@@@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitm@@@Z ; NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)
.text:00000A22                 mov     [ebp+var_294], eax
.text:00000A28                 cmp     [ebp+var_294], 2
.text:00000A2F                 jnb     short loc_A7D
.text:00000A31                 mov     eax, [ebp+var_294]
.text:00000A37                 add     eax, 1
.text:00000A3A                 mov     ecx, [ebp+var_28C]
.text:00000A40                 shl     eax, cl
.text:00000A42                 add     eax, [ebp+var_290]
.text:00000A48                 mov     [ebp+var_290], eax
.text:00000A4E                 mov     ecx, [ebp+var_28C]
.text:00000A54                 add     ecx, 1
.text:00000A57                 mov     [ebp+var_28C], ecx
.text:00000A5D                 mov     edx, [ebp+arg_4]
.text:00000A60                 sub     edx, [ebp+var_27C]
.text:00000A66                 cmp     edx, [ebp+var_290]
.text:00000A6C                 jnb     short loc_A78
.text:00000A6E                 mov     eax, 1
.text:00000A73                 jmp     loc_BD0
.text:00000A78 ; ---------------------------------------------------------------------------
.text:00000A78
.text:00000A78 loc_A78:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+56Cj
.text:00000A78                 jmp     loc_98D
.text:00000A7D ; ---------------------------------------------------------------------------
.text:00000A7D
.text:00000A7D loc_A7D:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+52Fj
.text:00000A7D                 cmp     [ebp+var_290], 0
.text:00000A84                 jz      short loc_AF8
.text:00000A86                 lea     ecx, [ebp+var_10C] ; this
.text:00000A8C                 call    ?GetHead@CMtf8Decoder@NCompress@@QBEEXZ ; NCompress::CMtf8Decoder::GetHead(void)
.text:00000A91                 movzx   eax, al
.text:00000A94                 mov     [ebp+var_298], eax
.text:00000A9A                 mov     ecx, [ebp+var_298]
.text:00000AA0                 mov     edx, [ebp+arg_0]
.text:00000AA3                 mov     eax, [edx+ecx*4]
.text:00000AA6                 add     eax, [ebp+var_290]
.text:00000AAC                 mov     ecx, [ebp+var_298]
.text:00000AB2                 mov     edx, [ebp+arg_0]
.text:00000AB5                 mov     [edx+ecx*4], eax
.text:00000AB8
.text:00000AB8 loc_AB8:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+5ECj
.text:00000AB8                 mov     eax, [ebp+var_27C]
.text:00000ABE                 mov     ecx, [ebp+arg_0]
.text:00000AC1                 mov     edx, [ebp+var_298]
.text:00000AC7                 mov     [ecx+eax*4+400h], edx
.text:00000ACE                 mov     eax, [ebp+var_27C]
.text:00000AD4                 add     eax, 1
.text:00000AD7                 mov     [ebp+var_27C], eax
.text:00000ADD                 mov     ecx, [ebp+var_290]
.text:00000AE3                 sub     ecx, 1
.text:00000AE6                 mov     [ebp+var_290], ecx
.text:00000AEC                 jnz     short loc_AB8
.text:00000AEE                 mov     [ebp+var_28C], 0
.text:00000AF8
.text:00000AF8 loc_AF8:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+584j
.text:00000AF8                 mov     edx, [ebp+var_294]
.text:00000AFE                 cmp     edx, [ebp+var_114]
.text:00000B04                 ja      short loc_B7B
.text:00000B06                 mov     eax, [ebp+var_294]
.text:00000B0C                 sub     eax, 1
.text:00000B0F                 push    eax             ; unsigned int
.text:00000B10                 lea     ecx, [ebp+var_10C] ; this
.text:00000B16                 call    ?GetAndMove@CMtf8Decoder@NCompress@@QAEEI@Z ; NCompress::CMtf8Decoder::GetAndMove(uint)
.text:00000B1B                 movzx   ecx, al
.text:00000B1E                 mov     [ebp+var_29C], ecx
.text:00000B24                 mov     edx, [ebp+var_27C]
.text:00000B2A                 cmp     edx, [ebp+arg_4]
.text:00000B2D                 jb      short loc_B39
.text:00000B2F                 mov     eax, 1
.text:00000B34                 jmp     loc_BD0
.text:00000B39 ; ---------------------------------------------------------------------------
.text:00000B39
.text:00000B39 loc_B39:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+62Dj
.text:00000B39                 mov     eax, [ebp+var_29C]
.text:00000B3F                 mov     ecx, [ebp+arg_0]
.text:00000B42                 mov     edx, [ecx+eax*4]
.text:00000B45                 add     edx, 1
.text:00000B48                 mov     eax, [ebp+var_29C]
.text:00000B4E                 mov     ecx, [ebp+arg_0]
.text:00000B51                 mov     [ecx+eax*4], edx
.text:00000B54                 mov     edx, [ebp+var_27C]
.text:00000B5A                 mov     eax, [ebp+arg_0]
.text:00000B5D                 mov     ecx, [ebp+var_29C]
.text:00000B63                 mov     [eax+edx*4+400h], ecx
.text:00000B6A                 mov     edx, [ebp+var_27C]
.text:00000B70                 add     edx, 1
.text:00000B73                 mov     [ebp+var_27C], edx
.text:00000B79                 jmp     short loc_B97
.text:00000B7B ; ---------------------------------------------------------------------------
.text:00000B7B
.text:00000B7B loc_B7B:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+604j
.text:00000B7B                 mov     eax, [ebp+var_114]
.text:00000B81                 add     eax, 1
.text:00000B84                 cmp     [ebp+var_294], eax
.text:00000B8A                 jnz     short loc_B90
.text:00000B8C                 jmp     short loc_B9C
.text:00000B8E ; ---------------------------------------------------------------------------
.text:00000B8E                 jmp     short loc_B97
.text:00000B90 ; ---------------------------------------------------------------------------
.text:00000B90
.text:00000B90 loc_B90:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+68Aj
.text:00000B90                 mov     eax, 1
.text:00000B95                 jmp     short loc_BD0
.text:00000B97 ; ---------------------------------------------------------------------------
.text:00000B97
.text:00000B97 loc_B97:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+679j
.text:00000B97                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+68Ej
.text:00000B97                 jmp     loc_98D
.text:00000B9C ; ---------------------------------------------------------------------------
.text:00000B9C
.text:00000B9C loc_B9C:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+50Bj
.text:00000B9C                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+68Cj
.text:00000B9C                 mov     ecx, [ebp+var_8]
.text:00000B9F                 add     ecx, 8
.text:00000BA2                 call    ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000BA7                 movzx   ecx, al
.text:00000BAA                 test    ecx, ecx
.text:00000BAC                 jz      short loc_BB5
.text:00000BAE                 mov     eax, 1
.text:00000BB3                 jmp     short loc_BD0
.text:00000BB5 ; ---------------------------------------------------------------------------
.text:00000BB5
.text:00000BB5 loc_BB5:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+6ACj
.text:00000BB5                 mov     edx, [ebp+arg_8]
.text:00000BB8                 mov     eax, [ebp+var_27C]
.text:00000BBE                 mov     [edx], eax
.text:00000BC0                 mov     ecx, [ebp+arg_8]
.text:00000BC3                 mov     edx, [ebp+arg_8]
.text:00000BC6                 mov     eax, [ecx+4]
.text:00000BC9                 cmp     eax, [edx]
.text:00000BCB                 sbb     eax, eax
.text:00000BCD                 add     eax, 1
.text:00000BD0
.text:00000BD0 loc_BD0:                                ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+8Dj
.text:00000BD0                                         ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+16Fj ...
.text:00000BD0                 push    edx
.text:00000BD1                 mov     ecx, ebp
.text:00000BD3                 push    eax
.text:00000BD4                 lea     edx, $LN71
.text:00000BDA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BDF                 pop     eax
.text:00000BE0                 pop     edx
.text:00000BE1                 pop     edi
.text:00000BE2                 mov     ecx, [ebp+var_4]
.text:00000BE5                 xor     ecx, ebp
.text:00000BE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BEC                 add     esp, 2A0h
.text:00000BF2                 cmp     ebp, esp
.text:00000BF4                 call    __RTC_CheckEsp
.text:00000BF9                 mov     esp, ebp
.text:00000BFB                 pop     ebp
.text:00000BFC                 retn    0Ch
.text:00000BFC ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z endp
.text:00000BFC
.text:00000BFC ; ---------------------------------------------------------------------------
.text:00000BFF                 align 10h
.text:00000C00 $LN71           dd 4                    ; DATA XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+6D4o
.text:00000C04                 dd offset $LN70
.text:00000C08 $LN70           dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:00000C04o
.text:00000C10                 dd offset $LN66         ; "mtf"
.text:00000C14                 dd 0FFFFFED8h, 10h
.text:00000C1C                 dd offset $LN67         ; "inUse16"
.text:00000C20                 dd 0FFFFFEB8h, 6
.text:00000C28                 dd offset $LN68         ; "mtfPos"
.text:00000C2C                 dd 0FFFFFD98h, 102h
.text:00000C34                 dd offset $LN69         ; "lens"
.text:00000C38 $LN69           db 'lens',0             ; DATA XREF: .text:00000C34o
.text:00000C3D $LN68           db 'mtfPos',0           ; DATA XREF: .text:00000C28o
.text:00000C44 $LN67           db 'inUse16',0          ; DATA XREF: .text:00000C1Co
.text:00000C4C $LN66           db 'mtf',0              ; DATA XREF: .text:00000C10o
.text:00000C50
.text:00000C50 ; =============== S U B R O U T I N E =======================================
.text:00000C50
.text:00000C50 ; Attributes: bp-based frame
.text:00000C50
.text:00000C50 ; _DWORD __thiscall NCompress::NBZip2::CDecoder::CDecoder(NCompress::NBZip2::CDecoder *__hidden this)
.text:00000C50                 public ??0CDecoder@NBZip2@NCompress@@QAE@XZ
.text:00000C50 ??0CDecoder@NBZip2@NCompress@@QAE@XZ proc near
.text:00000C50
.text:00000C50 var_10          = dword ptr -10h
.text:00000C50 var_C           = dword ptr -0Ch
.text:00000C50 var_4           = dword ptr -4
.text:00000C50
.text:00000C50                 push    ebp
.text:00000C51                 mov     ebp, esp
.text:00000C53                 push    0FFFFFFFFh
.text:00000C55                 push    offset __ehhandler$??0CDecoder@NBZip2@NCompress@@QAE@XZ
.text:00000C5A                 mov     eax, large fs:0
.text:00000C60                 push    eax
.text:00000C61                 push    ecx
.text:00000C62                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000C69                 mov     eax, dword ptr ds:___security_cookie
.text:00000C6E                 xor     eax, ebp
.text:00000C70                 push    eax
.text:00000C71                 lea     eax, [ebp+var_C]
.text:00000C74                 mov     large fs:0, eax
.text:00000C7A                 mov     [ebp+var_10], ecx
.text:00000C7D                 mov     ecx, [ebp+var_10] ; this
.text:00000C80                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000C85                 mov     ecx, [ebp+var_10]
.text:00000C88                 add     ecx, 4          ; this
.text:00000C8B                 call    ??0ICompressSetCoderMt@@QAE@XZ ; ICompressSetCoderMt::ICompressSetCoderMt(void)
.text:00000C90                 mov     ecx, [ebp+var_10]
.text:00000C93                 add     ecx, 8          ; this
.text:00000C96                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000C9B                 mov     eax, [ebp+var_10]
.text:00000C9E                 mov     dword ptr [eax], offset ??_7CDecoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000CA4                 mov     ecx, [ebp+var_10]
.text:00000CA7                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressSetCoderMt'}
.text:00000CAE                 mov     ecx, [ebp+var_10]
.text:00000CB1                 add     ecx, 10h        ; this
.text:00000CB4                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00000CB9                 mov     [ebp+var_4], 0
.text:00000CC0                 mov     ecx, [ebp+var_10]
.text:00000CC3                 add     ecx, 138h       ; this
.text:00000CC9                 call    ??0CBase@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBase::CBase(void)
.text:00000CCE                 mov     byte ptr [ebp+var_4], 1
.text:00000CD2                 mov     ecx, [ebp+var_10]
.text:00000CD5                 add     ecx, 6FFCh      ; this
.text:00000CDB                 call    ??0CBZip2CombinedCrc@@QAE@XZ ; CBZip2CombinedCrc::CBZip2CombinedCrc(void)
.text:00000CE0                 mov     ecx, [ebp+var_10]
.text:00000CE3                 add     ecx, 700Ch      ; this
.text:00000CE9                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:00000CEE                 mov     byte ptr [ebp+var_4], 2
.text:00000CF2                 mov     ecx, [ebp+var_10]
.text:00000CF5                 add     ecx, 7010h      ; this
.text:00000CFB                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00000D00                 mov     byte ptr [ebp+var_4], 3
.text:00000D04                 mov     ecx, [ebp+var_10]
.text:00000D07                 add     ecx, 7038h      ; this
.text:00000D0D                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:00000D12                 mov     edx, [ebp+var_10]
.text:00000D15                 mov     dword ptr [edx+7004h], 0
.text:00000D1F                 mov     eax, [ebp+var_10]
.text:00000D22                 mov     dword ptr [eax+7008h], 0
.text:00000D2C                 mov     ecx, [ebp+var_10]
.text:00000D2F                 mov     dword ptr [ecx+7028h], 1
.text:00000D39                 mov     edx, [ebp+var_10]
.text:00000D3C                 mov     byte ptr [edx+6FF8h], 1
.text:00000D43                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D4A                 mov     eax, [ebp+var_10]
.text:00000D4D                 mov     ecx, [ebp+var_C]
.text:00000D50                 mov     large fs:0, ecx
.text:00000D57                 pop     ecx
.text:00000D58                 add     esp, 10h
.text:00000D5B                 cmp     ebp, esp
.text:00000D5D                 call    __RTC_CheckEsp
.text:00000D62                 mov     esp, ebp
.text:00000D64                 pop     ebp
.text:00000D65                 retn
.text:00000D65 ??0CDecoder@NBZip2@NCompress@@QAE@XZ endp
.text:00000D65
.text:00000D65 ; ---------------------------------------------------------------------------
.text:00000D66                 align 10h
.text:00000D70
.text:00000D70 ; =============== S U B R O U T I N E =======================================
.text:00000D70
.text:00000D70 ; Attributes: bp-based frame
.text:00000D70
.text:00000D70 ; _DWORD __thiscall NCompress::NBZip2::CDecoder::~CDecoder(NCompress::NBZip2::CDecoder *__hidden this)
.text:00000D70                 public ??1CDecoder@NBZip2@NCompress@@QAE@XZ
.text:00000D70 ??1CDecoder@NBZip2@NCompress@@QAE@XZ proc near
.text:00000D70                                         ; CODE XREF: NCompress::NBZip2::CDecoder::`scalar deleting destructor'(uint)+11p
.text:00000D70
.text:00000D70 var_10          = dword ptr -10h
.text:00000D70 var_C           = dword ptr -0Ch
.text:00000D70 var_4           = dword ptr -4
.text:00000D70
.text:00000D70                 push    ebp
.text:00000D71                 mov     ebp, esp
.text:00000D73                 push    0FFFFFFFFh
.text:00000D75                 push    offset __ehhandler$??1CDecoder@NBZip2@NCompress@@QAE@XZ
.text:00000D7A                 mov     eax, large fs:0
.text:00000D80                 push    eax
.text:00000D81                 push    ecx
.text:00000D82                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000D89                 mov     eax, dword ptr ds:___security_cookie
.text:00000D8E                 xor     eax, ebp
.text:00000D90                 push    eax
.text:00000D91                 lea     eax, [ebp+var_C]
.text:00000D94                 mov     large fs:0, eax
.text:00000D9A                 mov     [ebp+var_10], ecx
.text:00000D9D                 mov     eax, [ebp+var_10]
.text:00000DA0                 mov     dword ptr [eax], offset ??_7CDecoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressCoder'}
.text:00000DA6                 mov     ecx, [ebp+var_10]
.text:00000DA9                 mov     dword ptr [ecx+4], offset ??_7CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressSetCoderMt'}
.text:00000DB0                 mov     [ebp+var_4], 4
.text:00000DB7                 mov     ecx, [ebp+var_10] ; this
.text:00000DBA                 call    ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::Free(void)
.text:00000DBF                 mov     byte ptr [ebp+var_4], 3
.text:00000DC3                 mov     ecx, [ebp+var_10]
.text:00000DC6                 add     ecx, 7038h      ; this
.text:00000DCC                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:00000DD1                 mov     byte ptr [ebp+var_4], 2
.text:00000DD5                 mov     ecx, [ebp+var_10]
.text:00000DD8                 add     ecx, 7010h      ; this
.text:00000DDE                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:00000DE3                 mov     byte ptr [ebp+var_4], 1
.text:00000DE7                 mov     ecx, [ebp+var_10]
.text:00000DEA                 add     ecx, 700Ch      ; this
.text:00000DF0                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:00000DF5                 mov     byte ptr [ebp+var_4], 0
.text:00000DF9                 mov     ecx, [ebp+var_10]
.text:00000DFC                 add     ecx, 138h       ; this
.text:00000E02                 call    ??1CBase@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBase::~CBase(void)
.text:00000E07                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E0E                 mov     ecx, [ebp+var_10]
.text:00000E11                 add     ecx, 10h        ; this
.text:00000E14                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000E19                 mov     ecx, [ebp+var_C]
.text:00000E1C                 mov     large fs:0, ecx
.text:00000E23                 pop     ecx
.text:00000E24                 add     esp, 10h
.text:00000E27                 cmp     ebp, esp
.text:00000E29                 call    __RTC_CheckEsp
.text:00000E2E                 mov     esp, ebp
.text:00000E30                 pop     ebp
.text:00000E31                 retn
.text:00000E31 ??1CDecoder@NBZip2@NCompress@@QAE@XZ endp
.text:00000E31
.text:00000E31 ; ---------------------------------------------------------------------------
.text:00000E32                 align 10h
.text:00000E40
.text:00000E40 ; =============== S U B R O U T I N E =======================================
.text:00000E40
.text:00000E40 ; Attributes: bp-based frame
.text:00000E40
.text:00000E40 ; __int32 __thiscall NCompress::NBZip2::CDecoder::Create(NCompress::NBZip2::CDecoder *__hidden this)
.text:00000E40                 public ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00000E40 ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ proc near
.text:00000E40                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2Ap
.text:00000E40
.text:00000E40 var_40          = dword ptr -40h
.text:00000E40 var_3C          = dword ptr -3Ch
.text:00000E40 var_34          = dword ptr -34h
.text:00000E40 var_30          = dword ptr -30h
.text:00000E40 var_2C          = dword ptr -2Ch
.text:00000E40 var_28          = dword ptr -28h
.text:00000E40 var_24          = dword ptr -24h
.text:00000E40 var_20          = dword ptr -20h
.text:00000E40 var_1C          = dword ptr -1Ch
.text:00000E40 var_18          = dword ptr -18h
.text:00000E40 var_14          = dword ptr -14h
.text:00000E40 var_10          = dword ptr -10h
.text:00000E40 var_C           = dword ptr -0Ch
.text:00000E40 var_4           = dword ptr -4
.text:00000E40
.text:00000E40 ; FUNCTION CHUNK AT .text:00000FE9 SIZE 00000009 BYTES
.text:00000E40 ; FUNCTION CHUNK AT .text:00000FF7 SIZE 00000096 BYTES
.text:00000E40
.text:00000E40                 push    ebp
.text:00000E41                 mov     ebp, esp
.text:00000E43                 push    0FFFFFFFFh
.text:00000E45                 push    offset __ehhandler$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00000E4A                 mov     eax, large fs:0
.text:00000E50                 push    eax
.text:00000E51                 push    ecx
.text:00000E52                 sub     esp, 30h
.text:00000E55                 push    ebx
.text:00000E56                 push    esi
.text:00000E57                 push    edi
.text:00000E58                 push    ecx
.text:00000E59                 lea     edi, [ebp+var_40]
.text:00000E5C                 mov     ecx, 0Ch
.text:00000E61                 mov     eax, 0CCCCCCCCh
.text:00000E66                 rep stosd
.text:00000E68                 pop     ecx
.text:00000E69                 mov     eax, dword ptr ds:___security_cookie
.text:00000E6E                 xor     eax, ebp
.text:00000E70                 push    eax
.text:00000E71                 lea     eax, [ebp+var_C]
.text:00000E74                 mov     large fs:0, eax
.text:00000E7A                 mov     [ebp+var_10], esp
.text:00000E7D                 mov     [ebp+var_14], ecx
.text:00000E80                 mov     ecx, [ebp+var_14]
.text:00000E83                 add     ecx, 700Ch      ; this
.text:00000E89                 call    ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)
.text:00000E8E                 mov     [ebp+var_18], eax
.text:00000E91                 cmp     [ebp+var_18], 0
.text:00000E95                 jz      short loc_E9F
.text:00000E97                 mov     eax, [ebp+var_18]
.text:00000E9A                 jmp     loc_1071
.text:00000E9F ; ---------------------------------------------------------------------------
.text:00000E9F
.text:00000E9F loc_E9F:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+55j
.text:00000E9F                 mov     ecx, [ebp+var_14]
.text:00000EA2                 add     ecx, 7038h      ; this
.text:00000EA8                 call    ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)
.text:00000EAD                 mov     [ebp+var_1C], eax
.text:00000EB0                 cmp     [ebp+var_1C], 0
.text:00000EB4                 jz      short loc_EBE
.text:00000EB6                 mov     eax, [ebp+var_1C]
.text:00000EB9                 jmp     loc_1071
.text:00000EBE ; ---------------------------------------------------------------------------
.text:00000EBE
.text:00000EBE loc_EBE:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+74j
.text:00000EBE                 mov     eax, [ebp+var_14]
.text:00000EC1                 cmp     dword ptr [eax+7004h], 0
.text:00000EC8                 jz      short loc_EE5
.text:00000ECA                 mov     ecx, [ebp+var_14]
.text:00000ECD                 mov     edx, [ebp+var_14]
.text:00000ED0                 mov     eax, [ecx+7008h]
.text:00000ED6                 cmp     eax, [edx+7028h]
.text:00000EDC                 jnz     short loc_EE5
.text:00000EDE                 xor     eax, eax
.text:00000EE0                 jmp     loc_1071
.text:00000EE5 ; ---------------------------------------------------------------------------
.text:00000EE5
.text:00000EE5 loc_EE5:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+88j
.text:00000EE5                                         ; NCompress::NBZip2::CDecoder::Create(void)+9Cj
.text:00000EE5                 mov     ecx, [ebp+var_14] ; this
.text:00000EE8                 call    ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::Free(void)
.text:00000EED                 mov     ecx, [ebp+var_14]
.text:00000EF0                 mov     edx, 1
.text:00000EF5                 cmp     edx, [ecx+7028h]
.text:00000EFB                 sbb     eax, eax
.text:00000EFD                 neg     eax
.text:00000EFF                 mov     ecx, [ebp+var_14]
.text:00000F02                 mov     [ecx+702Ch], al
.text:00000F08                 mov     edx, [ebp+var_14]
.text:00000F0B                 mov     eax, [ebp+var_14]
.text:00000F0E                 mov     ecx, [eax+7028h]
.text:00000F14                 mov     [edx+7008h], ecx
.text:00000F1A                 mov     [ebp+var_4], 0
.text:00000F21                 mov     edx, [ebp+var_14]
.text:00000F24                 mov     eax, [edx+7028h]
.text:00000F2A                 mov     [ebp+var_2C], eax
.text:00000F2D                 xor     ecx, ecx
.text:00000F2F                 mov     eax, [ebp+var_2C]
.text:00000F32                 mov     edx, 11Ch
.text:00000F37                 mul     edx
.text:00000F39                 seto    cl
.text:00000F3C                 neg     ecx
.text:00000F3E                 or      ecx, eax
.text:00000F40                 xor     eax, eax
.text:00000F42                 add     ecx, 4
.text:00000F45                 setb    al
.text:00000F48                 neg     eax
.text:00000F4A                 or      eax, ecx
.text:00000F4C                 push    eax             ; unsigned int
.text:00000F4D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000F52                 add     esp, 4
.text:00000F55                 mov     [ebp+var_3C], eax
.text:00000F58                 mov     ecx, [ebp+var_3C]
.text:00000F5B                 mov     [ebp+var_34], ecx
.text:00000F5E                 mov     byte ptr [ebp+var_4], 1
.text:00000F62                 cmp     [ebp+var_34], 0
.text:00000F66                 jz      short loc_F9A
.text:00000F68                 mov     edx, [ebp+var_34]
.text:00000F6B                 mov     eax, [ebp+var_2C]
.text:00000F6E                 mov     [edx], eax
.text:00000F70                 push    offset ??1CState@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CState::~CState(void)
.text:00000F75                 push    offset ??0CState@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CState::CState(void)
.text:00000F7A                 mov     ecx, [ebp+var_2C]
.text:00000F7D                 push    ecx
.text:00000F7E                 push    11Ch
.text:00000F83                 mov     edx, [ebp+var_34]
.text:00000F86                 add     edx, 4
.text:00000F89                 push    edx
.text:00000F8A                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:00000F8F                 mov     eax, [ebp+var_34]
.text:00000F92                 add     eax, 4
.text:00000F95                 mov     [ebp+var_40], eax
.text:00000F98                 jmp     short loc_FA1
.text:00000F9A ; ---------------------------------------------------------------------------
.text:00000F9A
.text:00000F9A loc_F9A:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+126j
.text:00000F9A                 mov     [ebp+var_40], 0
.text:00000FA1
.text:00000FA1 loc_FA1:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+158j
.text:00000FA1                 mov     ecx, [ebp+var_40]
.text:00000FA4                 mov     [ebp+var_30], ecx
.text:00000FA7                 mov     byte ptr [ebp+var_4], 0
.text:00000FAB                 mov     edx, [ebp+var_14]
.text:00000FAE                 mov     eax, [ebp+var_30]
.text:00000FB1                 mov     [edx+7004h], eax
.text:00000FB7                 mov     ecx, [ebp+var_14]
.text:00000FBA                 cmp     dword ptr [ecx+7004h], 0
.text:00000FC1                 jnz     short loc_FCD
.text:00000FC3                 mov     eax, 8007000Eh
.text:00000FC8                 jmp     loc_1071
.text:00000FCD ; ---------------------------------------------------------------------------
.text:00000FCD
.text:00000FCD loc_FCD:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+181j
.text:00000FCD                 jmp     short $LN15
.text:00000FCD ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ endp
.text:00000FCD
.text:00000FCF
.text:00000FCF ; =============== S U B R O U T I N E =======================================
.text:00000FCF
.text:00000FCF
.text:00000FCF __catch$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$0 proc near
.text:00000FCF                                         ; DATA XREF: .xdata$x:00002ED8o
.text:00000FCF                 mov     dword ptr [ebp-38h], 8007000Eh
.text:00000FD6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000FDD                 mov     eax, offset $LN19
.text:00000FE2                 retn
.text:00000FE2 __catch$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$0 endp
.text:00000FE2
.text:00000FE3 ; ---------------------------------------------------------------------------
.text:00000FE3                 mov     eax, offset $LN15
.text:00000FE8                 retn
.text:00000FE9 ; ---------------------------------------------------------------------------
.text:00000FE9 ; START OF FUNCTION CHUNK FOR ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00000FE9
.text:00000FE9 $LN15:                                  ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void):loc_FCDj
.text:00000FE9                                         ; DATA XREF: .text:00000FE3o
.text:00000FE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FF0                 jmp     short loc_FF7
.text:00000FF0 ; END OF FUNCTION CHUNK FOR ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00000FF2
.text:00000FF2 ; =============== S U B R O U T I N E =======================================
.text:00000FF2
.text:00000FF2
.text:00000FF2 $LN19           proc near               ; DATA XREF: __catch$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$0+Eo
.text:00000FF2                 mov     eax, [ebp-38h]
.text:00000FF5                 jmp     short loc_1071
.text:00000FF5 $LN19           endp
.text:00000FF5
.text:00000FF7 ; ---------------------------------------------------------------------------
.text:00000FF7 ; START OF FUNCTION CHUNK FOR ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00000FF7
.text:00000FF7 loc_FF7:                                ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+1B0j
.text:00000FF7                 mov     [ebp+var_20], 0
.text:00000FFE                 jmp     short loc_1009
.text:00001000 ; ---------------------------------------------------------------------------
.text:00001000
.text:00001000 loc_1000:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void):loc_106Dj
.text:00001000                 mov     edx, [ebp+var_20]
.text:00001003                 add     edx, 1
.text:00001006                 mov     [ebp+var_20], edx
.text:00001009
.text:00001009 loc_1009:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+1BEj
.text:00001009                 mov     eax, [ebp+var_14]
.text:0000100C                 mov     ecx, [ebp+var_20]
.text:0000100F                 cmp     ecx, [eax+7028h]
.text:00001015                 jnb     short loc_106F
.text:00001017                 mov     edx, [ebp+var_20]
.text:0000101A                 imul    edx, 11Ch
.text:00001020                 mov     eax, [ebp+var_14]
.text:00001023                 add     edx, [eax+7004h]
.text:00001029                 mov     [ebp+var_24], edx
.text:0000102C                 mov     ecx, [ebp+var_24]
.text:0000102F                 mov     edx, [ebp+var_14]
.text:00001032                 mov     [ecx+4], edx
.text:00001035                 mov     eax, [ebp+var_14]
.text:00001038                 movzx   ecx, byte ptr [eax+702Ch]
.text:0000103F                 test    ecx, ecx
.text:00001041                 jz      short loc_106D
.text:00001043                 mov     ecx, [ebp+var_24] ; this
.text:00001046                 call    ?Create@CState@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CState::Create(void)
.text:0000104B                 mov     [ebp+var_28], eax
.text:0000104E                 cmp     [ebp+var_28], 0
.text:00001052                 jz      short loc_106D
.text:00001054                 mov     edx, [ebp+var_14]
.text:00001057                 mov     eax, [ebp+var_20]
.text:0000105A                 mov     [edx+7028h], eax
.text:00001060                 mov     ecx, [ebp+var_14] ; this
.text:00001063                 call    ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::Free(void)
.text:00001068                 mov     eax, [ebp+var_28]
.text:0000106B                 jmp     short loc_1071
.text:0000106D ; ---------------------------------------------------------------------------
.text:0000106D
.text:0000106D loc_106D:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+201j
.text:0000106D                                         ; NCompress::NBZip2::CDecoder::Create(void)+212j
.text:0000106D                 jmp     short loc_1000
.text:0000106F ; ---------------------------------------------------------------------------
.text:0000106F
.text:0000106F loc_106F:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+1D5j
.text:0000106F                 xor     eax, eax
.text:00001071
.text:00001071 loc_1071:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+5Aj
.text:00001071                                         ; NCompress::NBZip2::CDecoder::Create(void)+79j ...
.text:00001071                 mov     ecx, [ebp+var_C]
.text:00001074                 mov     large fs:0, ecx
.text:0000107B                 pop     ecx
.text:0000107C                 pop     edi
.text:0000107D                 pop     esi
.text:0000107E                 pop     ebx
.text:0000107F                 add     esp, 40h
.text:00001082                 cmp     ebp, esp
.text:00001084                 call    __RTC_CheckEsp
.text:00001089                 mov     esp, ebp
.text:0000108B                 pop     ebp
.text:0000108C                 retn
.text:0000108C ; END OF FUNCTION CHUNK FOR ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:0000108C ; ---------------------------------------------------------------------------
.text:0000108D                 align 10h
.text:00001090
.text:00001090 ; =============== S U B R O U T I N E =======================================
.text:00001090
.text:00001090 ; Attributes: bp-based frame
.text:00001090
.text:00001090 ; void __thiscall NCompress::NBZip2::CDecoder::Free(NCompress::NBZip2::CDecoder *__hidden this)
.text:00001090                 public ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ
.text:00001090 ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ proc near
.text:00001090                                         ; CODE XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+4Ap
.text:00001090                                         ; NCompress::NBZip2::CDecoder::Create(void)+A8p ...
.text:00001090
.text:00001090 var_18          = dword ptr -18h
.text:00001090 var_14          = dword ptr -14h
.text:00001090 var_10          = dword ptr -10h
.text:00001090 var_C           = dword ptr -0Ch
.text:00001090 var_8           = dword ptr -8
.text:00001090 var_4           = dword ptr -4
.text:00001090
.text:00001090                 push    ebp
.text:00001091                 mov     ebp, esp
.text:00001093                 sub     esp, 18h
.text:00001096                 mov     eax, 0CCCCCCCCh
.text:0000109B                 mov     [ebp+var_18], eax
.text:0000109E                 mov     [ebp+var_14], eax
.text:000010A1                 mov     [ebp+var_10], eax
.text:000010A4                 mov     [ebp+var_C], eax
.text:000010A7                 mov     [ebp+var_8], eax
.text:000010AA                 mov     [ebp+var_4], eax
.text:000010AD                 mov     [ebp+var_4], ecx
.text:000010B0                 mov     eax, [ebp+var_4]
.text:000010B3                 cmp     dword ptr [eax+7004h], 0
.text:000010BA                 jnz     short loc_10C1
.text:000010BC                 jmp     loc_116C
.text:000010C1 ; ---------------------------------------------------------------------------
.text:000010C1
.text:000010C1 loc_10C1:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+2Aj
.text:000010C1                 mov     ecx, [ebp+var_4]
.text:000010C4                 mov     byte ptr [ecx+7034h], 1
.text:000010CB                 mov     ecx, [ebp+var_4]
.text:000010CE                 add     ecx, 700Ch      ; this
.text:000010D4                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000010D9                 mov     [ebp+var_8], 0
.text:000010E0                 jmp     short loc_10EB
.text:000010E2 ; ---------------------------------------------------------------------------
.text:000010E2
.text:000010E2 loc_10E2:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+9Fj
.text:000010E2                 mov     edx, [ebp+var_8]
.text:000010E5                 add     edx, 1
.text:000010E8                 mov     [ebp+var_8], edx
.text:000010EB
.text:000010EB loc_10EB:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+50j
.text:000010EB                 mov     eax, [ebp+var_4]
.text:000010EE                 mov     ecx, [ebp+var_8]
.text:000010F1                 cmp     ecx, [eax+7028h]
.text:000010F7                 jnb     short loc_1131
.text:000010F9                 mov     edx, [ebp+var_8]
.text:000010FC                 imul    edx, 11Ch
.text:00001102                 mov     eax, [ebp+var_4]
.text:00001105                 add     edx, [eax+7004h]
.text:0000110B                 mov     [ebp+var_C], edx
.text:0000110E                 mov     ecx, [ebp+var_4]
.text:00001111                 movzx   edx, byte ptr [ecx+702Ch]
.text:00001118                 test    edx, edx
.text:0000111A                 jz      short loc_1127
.text:0000111C                 mov     ecx, [ebp+var_C]
.text:0000111F                 add     ecx, 8          ; this
.text:00001122                 call    ?Wait@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Wait(void)
.text:00001127
.text:00001127 loc_1127:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+8Aj
.text:00001127                 mov     ecx, [ebp+var_C] ; this
.text:0000112A                 call    ?Free@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::Free(void)
.text:0000112F                 jmp     short loc_10E2
.text:00001131 ; ---------------------------------------------------------------------------
.text:00001131
.text:00001131 loc_1131:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+67j
.text:00001131                 mov     eax, [ebp+var_4]
.text:00001134                 mov     ecx, [eax+7004h]
.text:0000113A                 mov     [ebp+var_14], ecx
.text:0000113D                 mov     edx, [ebp+var_14]
.text:00001140                 mov     [ebp+var_10], edx
.text:00001143                 cmp     [ebp+var_10], 0
.text:00001147                 jz      short loc_1158
.text:00001149                 push    3
.text:0000114B                 mov     ecx, [ebp+var_10]
.text:0000114E                 call    ??_ECState@NBZip2@NCompress@@QAEPAXI@Z ; NCompress::NBZip2::CState::`vector deleting destructor'(uint)
.text:00001153                 mov     [ebp+var_18], eax
.text:00001156                 jmp     short loc_115F
.text:00001158 ; ---------------------------------------------------------------------------
.text:00001158
.text:00001158 loc_1158:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+B7j
.text:00001158                 mov     [ebp+var_18], 0
.text:0000115F
.text:0000115F loc_115F:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+C6j
.text:0000115F                 mov     eax, [ebp+var_4]
.text:00001162                 mov     dword ptr [eax+7004h], 0
.text:0000116C
.text:0000116C loc_116C:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+2Cj
.text:0000116C                 add     esp, 18h
.text:0000116F                 cmp     ebp, esp
.text:00001171                 call    __RTC_CheckEsp
.text:00001176                 mov     esp, ebp
.text:00001178                 pop     ebp
.text:00001179                 retn
.text:00001179 ?Free@CDecoder@NBZip2@NCompress@@QAEXXZ endp
.text:00001179
.text:00001179 ; ---------------------------------------------------------------------------
.text:0000117A                 align 10h
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 ; bool __stdcall NCompress::NBZip2::IsEndSig(NCompress::NBZip2 *this, const unsigned __int8 *)
.text:00001180                 public ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z
.text:00001180 ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z proc near
.text:00001180                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+104p
.text:00001180
.text:00001180 var_4           = dword ptr -4
.text:00001180 this            = dword ptr  8
.text:00001180
.text:00001180                 push    ebp
.text:00001181                 mov     ebp, esp
.text:00001183                 push    ecx
.text:00001184                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000118B                 mov     eax, [ebp+this]
.text:0000118E                 movzx   ecx, byte ptr [eax]
.text:00001191                 cmp     ecx, 17h
.text:00001194                 jnz     short loc_11DE
.text:00001196                 mov     edx, [ebp+this]
.text:00001199                 movzx   eax, byte ptr [edx+1]
.text:0000119D                 cmp     eax, 72h ; 'r'
.text:000011A0                 jnz     short loc_11DE
.text:000011A2                 mov     ecx, [ebp+this]
.text:000011A5                 movzx   edx, byte ptr [ecx+2]
.text:000011A9                 cmp     edx, 45h ; 'E'
.text:000011AC                 jnz     short loc_11DE
.text:000011AE                 mov     eax, [ebp+this]
.text:000011B1                 movzx   ecx, byte ptr [eax+3]
.text:000011B5                 cmp     ecx, 38h ; '8'
.text:000011B8                 jnz     short loc_11DE
.text:000011BA                 mov     edx, [ebp+this]
.text:000011BD                 movzx   eax, byte ptr [edx+4]
.text:000011C1                 cmp     eax, 50h ; 'P'
.text:000011C4                 jnz     short loc_11DE
.text:000011C6                 mov     ecx, [ebp+this]
.text:000011C9                 movzx   edx, byte ptr [ecx+5]
.text:000011CD                 cmp     edx, 90h ; 'É'
.text:000011D3                 jnz     short loc_11DE
.text:000011D5                 mov     [ebp+var_4], 1
.text:000011DC                 jmp     short loc_11E5
.text:000011DE ; ---------------------------------------------------------------------------
.text:000011DE
.text:000011DE loc_11DE:                               ; CODE XREF: NCompress::NBZip2::IsEndSig(uchar const *)+14j
.text:000011DE                                         ; NCompress::NBZip2::IsEndSig(uchar const *)+20j ...
.text:000011DE                 mov     [ebp+var_4], 0
.text:000011E5
.text:000011E5 loc_11E5:                               ; CODE XREF: NCompress::NBZip2::IsEndSig(uchar const *)+5Cj
.text:000011E5                 mov     al, byte ptr [ebp+var_4]
.text:000011E8                 mov     esp, ebp
.text:000011EA                 pop     ebp
.text:000011EB                 retn    4
.text:000011EB ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z endp
.text:000011EB
.text:000011EB ; ---------------------------------------------------------------------------
.text:000011EE                 align 10h
.text:000011F0
.text:000011F0 ; =============== S U B R O U T I N E =======================================
.text:000011F0
.text:000011F0 ; Attributes: bp-based frame
.text:000011F0
.text:000011F0 ; bool __stdcall NCompress::NBZip2::IsBlockSig(NCompress::NBZip2 *this, const unsigned __int8 *)
.text:000011F0                 public ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z
.text:000011F0 ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z proc near
.text:000011F0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+D2p
.text:000011F0
.text:000011F0 var_4           = dword ptr -4
.text:000011F0 this            = dword ptr  8
.text:000011F0
.text:000011F0                 push    ebp
.text:000011F1                 mov     ebp, esp
.text:000011F3                 push    ecx
.text:000011F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011FB                 mov     eax, [ebp+this]
.text:000011FE                 movzx   ecx, byte ptr [eax]
.text:00001201                 cmp     ecx, 31h ; '1'
.text:00001204                 jnz     short loc_124B
.text:00001206                 mov     edx, [ebp+this]
.text:00001209                 movzx   eax, byte ptr [edx+1]
.text:0000120D                 cmp     eax, 41h ; 'A'
.text:00001210                 jnz     short loc_124B
.text:00001212                 mov     ecx, [ebp+this]
.text:00001215                 movzx   edx, byte ptr [ecx+2]
.text:00001219                 cmp     edx, 59h ; 'Y'
.text:0000121C                 jnz     short loc_124B
.text:0000121E                 mov     eax, [ebp+this]
.text:00001221                 movzx   ecx, byte ptr [eax+3]
.text:00001225                 cmp     ecx, 26h ; '&'
.text:00001228                 jnz     short loc_124B
.text:0000122A                 mov     edx, [ebp+this]
.text:0000122D                 movzx   eax, byte ptr [edx+4]
.text:00001231                 cmp     eax, 53h ; 'S'
.text:00001234                 jnz     short loc_124B
.text:00001236                 mov     ecx, [ebp+this]
.text:00001239                 movzx   edx, byte ptr [ecx+5]
.text:0000123D                 cmp     edx, 59h ; 'Y'
.text:00001240                 jnz     short loc_124B
.text:00001242                 mov     [ebp+var_4], 1
.text:00001249                 jmp     short loc_1252
.text:0000124B ; ---------------------------------------------------------------------------
.text:0000124B
.text:0000124B loc_124B:                               ; CODE XREF: NCompress::NBZip2::IsBlockSig(uchar const *)+14j
.text:0000124B                                         ; NCompress::NBZip2::IsBlockSig(uchar const *)+20j ...
.text:0000124B                 mov     [ebp+var_4], 0
.text:00001252
.text:00001252 loc_1252:                               ; CODE XREF: NCompress::NBZip2::IsBlockSig(uchar const *)+59j
.text:00001252                 mov     al, byte ptr [ebp+var_4]
.text:00001255                 mov     esp, ebp
.text:00001257                 pop     ebp
.text:00001258                 retn    4
.text:00001258 ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z endp
.text:00001258
.text:00001258 ; ---------------------------------------------------------------------------
.text:0000125B                 align 10h
.text:00001260
.text:00001260 ; =============== S U B R O U T I N E =======================================
.text:00001260
.text:00001260 ; Attributes: bp-based frame
.text:00001260
.text:00001260 ; __int32 __thiscall NCompress::NBZip2::CDecoder::ReadSignature(NCompress::NBZip2::CDecoder *this, unsigned int *)
.text:00001260                 public ?ReadSignature@CDecoder@NBZip2@NCompress@@QAEJAAI@Z
.text:00001260 ?ReadSignature@CDecoder@NBZip2@NCompress@@QAEJAAI@Z proc near
.text:00001260                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+349p
.text:00001260                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+111p
.text:00001260
.text:00001260 var_24          = dword ptr -24h
.text:00001260 var_20          = dword ptr -20h
.text:00001260 var_1C          = dword ptr -1Ch
.text:00001260 var_18          = dword ptr -18h
.text:00001260 var_14          = dword ptr -14h
.text:00001260 var_10          = dword ptr -10h
.text:00001260 var_C           = dword ptr -0Ch
.text:00001260 var_8           = dword ptr -8
.text:00001260 var_4           = dword ptr -4
.text:00001260 arg_0           = dword ptr  8
.text:00001260
.text:00001260                 push    ebp
.text:00001261                 mov     ebp, esp
.text:00001263                 sub     esp, 24h
.text:00001266                 mov     eax, 0CCCCCCCCh
.text:0000126B                 mov     [ebp+var_24], eax
.text:0000126E                 mov     [ebp+var_20], eax
.text:00001271                 mov     [ebp+var_1C], eax
.text:00001274                 mov     [ebp+var_18], eax
.text:00001277                 mov     [ebp+var_14], eax
.text:0000127A                 mov     [ebp+var_10], eax
.text:0000127D                 mov     [ebp+var_C], eax
.text:00001280                 mov     [ebp+var_8], eax
.text:00001283                 mov     [ebp+var_4], eax
.text:00001286                 mov     eax, dword ptr ds:___security_cookie
.text:0000128B                 xor     eax, ebp
.text:0000128D                 mov     [ebp+var_4], eax
.text:00001290                 mov     [ebp+var_8], ecx
.text:00001293                 mov     eax, [ebp+var_8]
.text:00001296                 mov     byte ptr [eax+7049h], 0
.text:0000129D                 mov     ecx, [ebp+arg_0]
.text:000012A0                 mov     dword ptr [ecx], 0
.text:000012A6                 mov     [ebp+var_20], 0
.text:000012AD                 jmp     short loc_12B8
.text:000012AF ; ---------------------------------------------------------------------------
.text:000012AF
.text:000012AF loc_12AF:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+6Dj
.text:000012AF                 mov     edx, [ebp+var_20]
.text:000012B2                 add     edx, 1
.text:000012B5                 mov     [ebp+var_20], edx
.text:000012B8
.text:000012B8 loc_12B8:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+4Dj
.text:000012B8                 cmp     [ebp+var_20], 0Ah
.text:000012BC                 jnb     short loc_12CF
.text:000012BE                 mov     ecx, [ebp+var_8] ; this
.text:000012C1                 call    ?ReadByte@CDecoder@NBZip2@NCompress@@AAEEXZ ; NCompress::NBZip2::CDecoder::ReadByte(void)
.text:000012C6                 mov     ecx, [ebp+var_20]
.text:000012C9                 mov     byte ptr [ebp+ecx+var_18], al
.text:000012CD                 jmp     short loc_12AF
.text:000012CF ; ---------------------------------------------------------------------------
.text:000012CF
.text:000012CF loc_12CF:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+5Cj
.text:000012CF                 mov     ecx, [ebp+var_8]
.text:000012D2                 add     ecx, 140h
.text:000012D8                 call    ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:000012DD                 movzx   edx, al
.text:000012E0                 test    edx, edx
.text:000012E2                 jz      short loc_12EE
.text:000012E4                 mov     eax, 1
.text:000012E9                 jmp     loc_13B3
.text:000012EE ; ---------------------------------------------------------------------------
.text:000012EE
.text:000012EE loc_12EE:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+82j
.text:000012EE                 mov     [ebp+var_24], 0
.text:000012F5                 mov     [ebp+var_20], 0
.text:000012FC                 jmp     short loc_1307
.text:000012FE ; ---------------------------------------------------------------------------
.text:000012FE
.text:000012FE loc_12FE:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+C4j
.text:000012FE                 mov     eax, [ebp+var_20]
.text:00001301                 add     eax, 1
.text:00001304                 mov     [ebp+var_20], eax
.text:00001307
.text:00001307 loc_1307:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+9Cj
.text:00001307                 cmp     [ebp+var_20], 4
.text:0000130B                 jnb     short loc_1326
.text:0000130D                 mov     ecx, [ebp+var_24]
.text:00001310                 shl     ecx, 8
.text:00001313                 mov     [ebp+var_24], ecx
.text:00001316                 mov     edx, [ebp+var_20]
.text:00001319                 movzx   eax, byte ptr [ebp+edx+var_14+2]
.text:0000131E                 or      eax, [ebp+var_24]
.text:00001321                 mov     [ebp+var_24], eax
.text:00001324                 jmp     short loc_12FE
.text:00001326 ; ---------------------------------------------------------------------------
.text:00001326
.text:00001326 loc_1326:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+ABj
.text:00001326                 mov     ecx, [ebp+arg_0]
.text:00001329                 mov     edx, [ebp+var_24]
.text:0000132C                 mov     [ecx], edx
.text:0000132E                 lea     eax, [ebp+var_18]
.text:00001331                 push    eax             ; this
.text:00001332                 call    ?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z ; NCompress::NBZip2::IsBlockSig(uchar const *)
.text:00001337                 movzx   ecx, al
.text:0000133A                 test    ecx, ecx
.text:0000133C                 jz      short loc_1360
.text:0000133E                 mov     edx, [ebp+var_8]
.text:00001341                 mov     byte ptr [edx+7048h], 1
.text:00001348                 mov     eax, [ebp+arg_0]
.text:0000134B                 mov     ecx, [eax]
.text:0000134D                 push    ecx             ; unsigned int
.text:0000134E                 mov     ecx, [ebp+var_8]
.text:00001351                 add     ecx, 6FFCh      ; this
.text:00001357                 call    ?Update@CBZip2CombinedCrc@@QAEXI@Z ; CBZip2CombinedCrc::Update(uint)
.text:0000135C                 xor     eax, eax
.text:0000135E                 jmp     short loc_13B3
.text:00001360 ; ---------------------------------------------------------------------------
.text:00001360
.text:00001360 loc_1360:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+DCj
.text:00001360                 lea     edx, [ebp+var_18]
.text:00001363                 push    edx             ; this
.text:00001364                 call    ?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z ; NCompress::NBZip2::IsEndSig(uchar const *)
.text:00001369                 movzx   eax, al
.text:0000136C                 test    eax, eax
.text:0000136E                 jnz     short loc_1377
.text:00001370                 mov     eax, 1
.text:00001375                 jmp     short loc_13B3
.text:00001377 ; ---------------------------------------------------------------------------
.text:00001377
.text:00001377 loc_1377:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+10Ej
.text:00001377                 mov     ecx, [ebp+var_8]
.text:0000137A                 mov     byte ptr [ecx+7048h], 1
.text:00001381                 mov     edx, [ebp+var_8]
.text:00001384                 mov     byte ptr [edx+7049h], 1
.text:0000138B                 mov     ecx, [ebp+var_8]
.text:0000138E                 add     ecx, 6FFCh      ; this
.text:00001394                 call    ?GetDigest@CBZip2CombinedCrc@@QBEIXZ ; CBZip2CombinedCrc::GetDigest(void)
.text:00001399                 mov     ecx, [ebp+arg_0]
.text:0000139C                 cmp     [ecx], eax
.text:0000139E                 jz      short loc_13B1
.text:000013A0                 mov     edx, [ebp+var_8]
.text:000013A3                 mov     byte ptr [edx+704Ah], 1
.text:000013AA                 mov     eax, 1
.text:000013AF                 jmp     short loc_13B3
.text:000013B1 ; ---------------------------------------------------------------------------
.text:000013B1
.text:000013B1 loc_13B1:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+13Ej
.text:000013B1                 xor     eax, eax
.text:000013B3
.text:000013B3 loc_13B3:                               ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+89j
.text:000013B3                                         ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)+FEj ...
.text:000013B3                 push    edx
.text:000013B4                 mov     ecx, ebp
.text:000013B6                 push    eax
.text:000013B7                 lea     edx, $LN15_0
.text:000013BD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000013C2                 pop     eax
.text:000013C3                 pop     edx
.text:000013C4                 mov     ecx, [ebp+var_4]
.text:000013C7                 xor     ecx, ebp
.text:000013C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000013CE                 add     esp, 24h
.text:000013D1                 cmp     ebp, esp
.text:000013D3                 call    __RTC_CheckEsp
.text:000013D8                 mov     esp, ebp
.text:000013DA                 pop     ebp
.text:000013DB                 retn    4
.text:000013DB ?ReadSignature@CDecoder@NBZip2@NCompress@@QAEJAAI@Z endp
.text:000013DB
.text:000013DB ; ---------------------------------------------------------------------------
.text:000013DE                 align 10h
.text:000013E0 $LN15_0         dd 1                    ; DATA XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+157o
.text:000013E4                 dd offset $LN14
.text:000013E8 $LN14           dd 0FFFFFFE8h, 0Ah      ; DATA XREF: .text:000013E4o
.text:000013F0                 dd offset $LN13
.text:000013F4 $LN13           dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000013F0o
.text:00001400
.text:00001400 ; =============== S U B R O U T I N E =======================================
.text:00001400
.text:00001400 ; Attributes: bp-based frame
.text:00001400
.text:00001400 ; __int32 __thiscall NCompress::NBZip2::CDecoder::DecodeFile(NCompress::NBZip2::CDecoder *this, struct ICompressProgressInfo *)
.text:00001400                 public ?DecodeFile@CDecoder@NBZip2@NCompress@@AAEJPAUICompressProgressInfo@@@Z
.text:00001400 ?DecodeFile@CDecoder@NBZip2@NCompress@@AAEJPAUICompressProgressInfo@@@Z proc near
.text:00001400                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+157p
.text:00001400
.text:00001400 var_6C          = dword ptr -6Ch
.text:00001400 var_64          = dword ptr -64h
.text:00001400 var_5C          = byte ptr -5Ch
.text:00001400 var_54          = dword ptr -54h
.text:00001400 var_4C          = dword ptr -4Ch
.text:00001400 var_44          = dword ptr -44h
.text:00001400 var_40          = dword ptr -40h
.text:00001400 var_3C          = dword ptr -3Ch
.text:00001400 var_38          = dword ptr -38h
.text:00001400 var_34          = dword ptr -34h
.text:00001400 var_30          = dword ptr -30h
.text:00001400 var_2C          = dword ptr -2Ch
.text:00001400 var_24          = byte ptr -24h
.text:00001400 var_23          = byte ptr -23h
.text:00001400 var_22          = byte ptr -22h
.text:00001400 var_21          = byte ptr -21h
.text:00001400 var_1C          = dword ptr -1Ch
.text:00001400 var_18          = dword ptr -18h
.text:00001400 var_14          = dword ptr -14h
.text:00001400 var_10          = dword ptr -10h
.text:00001400 var_C           = dword ptr -0Ch
.text:00001400 var_8           = dword ptr -8
.text:00001400 var_4           = dword ptr -4
.text:00001400 arg_0           = dword ptr  8
.text:00001400
.text:00001400                 push    ebp
.text:00001401                 mov     ebp, esp
.text:00001403                 sub     esp, 6Ch
.text:00001406                 push    edi
.text:00001407                 push    ecx
.text:00001408                 lea     edi, [ebp+var_6C]
.text:0000140B                 mov     ecx, 1Bh
.text:00001410                 mov     eax, 0CCCCCCCCh
.text:00001415                 rep stosd
.text:00001417                 pop     ecx
.text:00001418                 mov     [ebp+var_4], ecx
.text:0000141B                 mov     eax, [ebp+var_4]
.text:0000141E                 mov     ecx, [ebp+arg_0]
.text:00001421                 mov     [eax+7000h], ecx
.text:00001427                 mov     ecx, [ebp+var_4] ; this
.text:0000142A                 call    ?Create@CDecoder@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CDecoder::Create(void)
.text:0000142F                 mov     [ebp+var_8], eax
.text:00001432                 cmp     [ebp+var_8], 0
.text:00001436                 jz      short loc_1440
.text:00001438                 mov     eax, [ebp+var_8]
.text:0000143B                 jmp     loc_1808
.text:00001440 ; ---------------------------------------------------------------------------
.text:00001440
.text:00001440 loc_1440:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+36j
.text:00001440                 mov     [ebp+var_C], 0
.text:00001447                 jmp     short loc_1452
.text:00001449 ; ---------------------------------------------------------------------------
.text:00001449
.text:00001449 loc_1449:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *):loc_14F4j
.text:00001449                 mov     edx, [ebp+var_C]
.text:0000144C                 add     edx, 1
.text:0000144F                 mov     [ebp+var_C], edx
.text:00001452
.text:00001452 loc_1452:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+47j
.text:00001452                 mov     eax, [ebp+var_4]
.text:00001455                 mov     ecx, [ebp+var_C]
.text:00001458                 cmp     ecx, [eax+7028h]
.text:0000145E                 jnb     loc_14F9
.text:00001464                 mov     edx, [ebp+var_C]
.text:00001467                 imul    edx, 11Ch
.text:0000146D                 mov     eax, [ebp+var_4]
.text:00001470                 add     edx, [eax+7004h]
.text:00001476                 mov     [ebp+var_10], edx
.text:00001479                 mov     ecx, [ebp+var_10] ; this
.text:0000147C                 call    ?Alloc@CState@NBZip2@NCompress@@QAE_NXZ ; NCompress::NBZip2::CState::Alloc(void)
.text:00001481                 movzx   ecx, al
.text:00001484                 test    ecx, ecx
.text:00001486                 jnz     short loc_1492
.text:00001488                 mov     eax, 8007000Eh
.text:0000148D                 jmp     loc_1808
.text:00001492 ; ---------------------------------------------------------------------------
.text:00001492
.text:00001492 loc_1492:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+86j
.text:00001492                 mov     edx, [ebp+var_4]
.text:00001495                 movzx   eax, byte ptr [edx+702Ch]
.text:0000149C                 test    eax, eax
.text:0000149E                 jz      short loc_14F4
.text:000014A0                 mov     ecx, [ebp+var_10]
.text:000014A3                 add     ecx, 10h        ; this
.text:000014A6                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000014AB                 mov     [ebp+var_14], eax
.text:000014AE                 cmp     [ebp+var_14], 0
.text:000014B2                 jz      short loc_14BC
.text:000014B4                 mov     eax, [ebp+var_14]
.text:000014B7                 jmp     loc_1808
.text:000014BC ; ---------------------------------------------------------------------------
.text:000014BC
.text:000014BC loc_14BC:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+B2j
.text:000014BC                 mov     ecx, [ebp+var_10]
.text:000014BF                 add     ecx, 14h        ; this
.text:000014C2                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000014C7                 mov     [ebp+var_18], eax
.text:000014CA                 cmp     [ebp+var_18], 0
.text:000014CE                 jz      short loc_14D8
.text:000014D0                 mov     eax, [ebp+var_18]
.text:000014D3                 jmp     loc_1808
.text:000014D8 ; ---------------------------------------------------------------------------
.text:000014D8
.text:000014D8 loc_14D8:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+CEj
.text:000014D8                 mov     ecx, [ebp+var_10]
.text:000014DB                 add     ecx, 18h        ; this
.text:000014DE                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000014E3                 mov     [ebp+var_1C], eax
.text:000014E6                 cmp     [ebp+var_1C], 0
.text:000014EA                 jz      short loc_14F4
.text:000014EC                 mov     eax, [ebp+var_1C]
.text:000014EF                 jmp     loc_1808
.text:000014F4 ; ---------------------------------------------------------------------------
.text:000014F4
.text:000014F4 loc_14F4:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+9Ej
.text:000014F4                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+EAj
.text:000014F4                 jmp     loc_1449
.text:000014F9 ; ---------------------------------------------------------------------------
.text:000014F9
.text:000014F9 loc_14F9:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+5Ej
.text:000014F9                 mov     ecx, [ebp+var_4]
.text:000014FC                 mov     byte ptr [ecx+7048h], 0
.text:00001503                 mov     [ebp+var_2C], 0
.text:0000150A                 jmp     short loc_1515
.text:0000150C ; ---------------------------------------------------------------------------
.text:0000150C
.text:0000150C loc_150C:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+12Aj
.text:0000150C                 mov     edx, [ebp+var_2C]
.text:0000150F                 add     edx, 1
.text:00001512                 mov     [ebp+var_2C], edx
.text:00001515
.text:00001515 loc_1515:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+10Aj
.text:00001515                 cmp     [ebp+var_2C], 4
.text:00001519                 jnb     short loc_152C
.text:0000151B                 mov     ecx, [ebp+var_4] ; this
.text:0000151E                 call    ?ReadByte@CDecoder@NBZip2@NCompress@@AAEEXZ ; NCompress::NBZip2::CDecoder::ReadByte(void)
.text:00001523                 mov     ecx, [ebp+var_2C]
.text:00001526                 mov     [ebp+ecx+var_24], al
.text:0000152A                 jmp     short loc_150C
.text:0000152C ; ---------------------------------------------------------------------------
.text:0000152C
.text:0000152C loc_152C:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+119j
.text:0000152C                 mov     ecx, [ebp+var_4]
.text:0000152F                 add     ecx, 140h
.text:00001535                 call    ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:0000153A                 movzx   edx, al
.text:0000153D                 test    edx, edx
.text:0000153F                 jz      short loc_154B
.text:00001541                 mov     eax, 1
.text:00001546                 jmp     loc_1808
.text:0000154B ; ---------------------------------------------------------------------------
.text:0000154B
.text:0000154B loc_154B:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+13Fj
.text:0000154B                 movzx   eax, [ebp+var_24]
.text:0000154F                 cmp     eax, 42h ; 'B'
.text:00001552                 jnz     short loc_1578
.text:00001554                 movzx   ecx, [ebp+var_23]
.text:00001558                 cmp     ecx, 5Ah ; 'Z'
.text:0000155B                 jnz     short loc_1578
.text:0000155D                 movzx   edx, [ebp+var_22]
.text:00001561                 cmp     edx, 68h ; 'h'
.text:00001564                 jnz     short loc_1578
.text:00001566                 movzx   eax, [ebp+var_21]
.text:0000156A                 cmp     eax, 30h ; '0'
.text:0000156D                 jle     short loc_1578
.text:0000156F                 movzx   ecx, [ebp+var_21]
.text:00001573                 cmp     ecx, 39h ; '9'
.text:00001576                 jbe     short loc_1582
.text:00001578
.text:00001578 loc_1578:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+152j
.text:00001578                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+15Bj ...
.text:00001578                 mov     eax, 1
.text:0000157D                 jmp     loc_1808
.text:00001582 ; ---------------------------------------------------------------------------
.text:00001582
.text:00001582 loc_1582:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+176j
.text:00001582                 movzx   edx, [ebp+var_21]
.text:00001586                 sub     edx, 30h ; '0'
.text:00001589                 imul    edx, 186A0h
.text:0000158F                 mov     [ebp+var_30], edx
.text:00001592                 mov     ecx, [ebp+var_4]
.text:00001595                 add     ecx, 6FFCh      ; this
.text:0000159B                 call    ?Init@CBZip2CombinedCrc@@QAEXXZ ; CBZip2CombinedCrc::Init(void)
.text:000015A0                 mov     eax, [ebp+var_4]
.text:000015A3                 movzx   ecx, byte ptr [eax+702Ch]
.text:000015AA                 test    ecx, ecx
.text:000015AC                 jz      loc_170D
.text:000015B2                 mov     edx, [ebp+var_4]
.text:000015B5                 mov     dword ptr [edx+7030h], 0
.text:000015BF                 mov     eax, [ebp+var_4]
.text:000015C2                 mov     byte ptr [eax+7036h], 0
.text:000015C9                 mov     ecx, [ebp+var_4]
.text:000015CC                 mov     byte ptr [ecx+7035h], 0
.text:000015D3                 mov     edx, [ebp+var_4]
.text:000015D6                 mov     byte ptr [edx+7034h], 0
.text:000015DD                 mov     ecx, [ebp+var_4]
.text:000015E0                 add     ecx, 7038h      ; this
.text:000015E6                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000015EB                 mov     eax, [ebp+var_4]
.text:000015EE                 mov     ecx, [eax+7004h]
.text:000015F4                 add     ecx, 18h        ; this
.text:000015F7                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000015FC                 mov     ecx, [ebp+var_4]
.text:000015FF                 mov     edx, [ebp+var_30]
.text:00001602                 mov     [ecx+7044h], edx
.text:00001608                 mov     eax, [ebp+var_4]
.text:0000160B                 mov     dword ptr [eax+7040h], 0
.text:00001615                 mov     ecx, [ebp+var_4]
.text:00001618                 mov     dword ptr [ecx+703Ch], 0
.text:00001622                 mov     ecx, [ebp+var_4]
.text:00001625                 add     ecx, 700Ch      ; this
.text:0000162B                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00001630                 mov     [ebp+var_34], 0
.text:00001637                 jmp     short loc_1642
.text:00001639 ; ---------------------------------------------------------------------------
.text:00001639
.text:00001639 loc_1639:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+26Bj
.text:00001639                 mov     edx, [ebp+var_34]
.text:0000163C                 add     edx, 1
.text:0000163F                 mov     [ebp+var_34], edx
.text:00001642
.text:00001642 loc_1642:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+237j
.text:00001642                 mov     eax, [ebp+var_4]
.text:00001645                 mov     ecx, [ebp+var_34]
.text:00001648                 cmp     ecx, [eax+7028h]
.text:0000164E                 jnb     short loc_166D
.text:00001650                 mov     edx, [ebp+var_34]
.text:00001653                 imul    edx, 11Ch
.text:00001659                 mov     eax, [ebp+var_4]
.text:0000165C                 mov     ecx, [eax+7004h]
.text:00001662                 lea     ecx, [ecx+edx+10h] ; this
.text:00001666                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:0000166B                 jmp     short loc_1639
.text:0000166D ; ---------------------------------------------------------------------------
.text:0000166D
.text:0000166D loc_166D:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+24Ej
.text:0000166D                 mov     ecx, [ebp+var_4]
.text:00001670                 add     ecx, 700Ch      ; this
.text:00001676                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:0000167B                 mov     ecx, [ebp+var_4]
.text:0000167E                 add     ecx, 7038h      ; this
.text:00001684                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00001689                 mov     [ebp+var_34], 0
.text:00001690                 jmp     short loc_169B
.text:00001692 ; ---------------------------------------------------------------------------
.text:00001692
.text:00001692 loc_1692:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2C4j
.text:00001692                 mov     edx, [ebp+var_34]
.text:00001695                 add     edx, 1
.text:00001698                 mov     [ebp+var_34], edx
.text:0000169B
.text:0000169B loc_169B:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+290j
.text:0000169B                 mov     eax, [ebp+var_4]
.text:0000169E                 mov     ecx, [ebp+var_34]
.text:000016A1                 cmp     ecx, [eax+7028h]
.text:000016A7                 jnb     short loc_16C6
.text:000016A9                 mov     edx, [ebp+var_34]
.text:000016AC                 imul    edx, 11Ch
.text:000016B2                 mov     eax, [ebp+var_4]
.text:000016B5                 mov     ecx, [eax+7004h]
.text:000016BB                 lea     ecx, [ecx+edx+14h] ; this
.text:000016BF                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:000016C4                 jmp     short loc_1692
.text:000016C6 ; ---------------------------------------------------------------------------
.text:000016C6
.text:000016C6 loc_16C6:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2A7j
.text:000016C6                 mov     ecx, [ebp+var_4]
.text:000016C9                 add     ecx, 7038h      ; this
.text:000016CF                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000016D4                 mov     edx, [ebp+var_4]
.text:000016D7                 mov     eax, [edx+7040h]
.text:000016DD                 mov     [ebp+var_38], eax
.text:000016E0                 cmp     [ebp+var_38], 0
.text:000016E4                 jz      short loc_16EE
.text:000016E6                 mov     eax, [ebp+var_38]
.text:000016E9                 jmp     loc_1808
.text:000016EE ; ---------------------------------------------------------------------------
.text:000016EE
.text:000016EE loc_16EE:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2E4j
.text:000016EE                 mov     ecx, [ebp+var_4]
.text:000016F1                 mov     edx, [ecx+703Ch]
.text:000016F7                 mov     [ebp+var_3C], edx
.text:000016FA                 cmp     [ebp+var_3C], 0
.text:000016FE                 jz      short loc_1708
.text:00001700                 mov     eax, [ebp+var_3C]
.text:00001703                 jmp     loc_1808
.text:00001708 ; ---------------------------------------------------------------------------
.text:00001708
.text:00001708 loc_1708:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2FEj
.text:00001708                 jmp     loc_17F0
.text:0000170D ; ---------------------------------------------------------------------------
.text:0000170D
.text:0000170D loc_170D:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+1ACj
.text:0000170D                 mov     eax, [ebp+var_4]
.text:00001710                 mov     ecx, [eax+7004h]
.text:00001716                 mov     [ebp+var_40], ecx
.text:00001719
.text:00001719 loc_1719:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *):loc_17EBj
.text:00001719                 mov     ecx, [ebp+var_4]
.text:0000171C                 add     ecx, 140h
.text:00001722                 call    ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)
.text:00001727                 push    edx
.text:00001728                 push    eax             ; unsigned __int64
.text:00001729                 mov     ecx, [ebp+var_4] ; this
.text:0000172C                 call    ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z ; NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)
.text:00001731                 mov     [ebp+var_44], eax
.text:00001734                 cmp     [ebp+var_44], 0
.text:00001738                 jz      short loc_1742
.text:0000173A                 mov     eax, [ebp+var_44]
.text:0000173D                 jmp     loc_1808
.text:00001742 ; ---------------------------------------------------------------------------
.text:00001742
.text:00001742 loc_1742:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+338j
.text:00001742                 lea     edx, [ebp+var_4C]
.text:00001745                 push    edx             ; unsigned int *
.text:00001746                 mov     ecx, [ebp+var_4] ; this
.text:00001749                 call    ?ReadSignature@CDecoder@NBZip2@NCompress@@QAEJAAI@Z ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)
.text:0000174E                 mov     [ebp+var_54], eax
.text:00001751                 cmp     [ebp+var_54], 0
.text:00001755                 jz      short loc_175F
.text:00001757                 mov     eax, [ebp+var_54]
.text:0000175A                 jmp     loc_1808
.text:0000175F ; ---------------------------------------------------------------------------
.text:0000175F
.text:0000175F loc_175F:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+355j
.text:0000175F                 mov     eax, [ebp+var_4]
.text:00001762                 movzx   ecx, byte ptr [eax+7049h]
.text:00001769                 test    ecx, ecx
.text:0000176B                 jz      short loc_1774
.text:0000176D                 xor     eax, eax
.text:0000176F                 jmp     loc_1808
.text:00001774 ; ---------------------------------------------------------------------------
.text:00001774
.text:00001774 loc_1774:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+36Bj
.text:00001774                 lea     ecx, [ebp+var_64] ; this
.text:00001777                 call    ??0CBlockProps@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBlockProps::CBlockProps(void)
.text:0000177C                 mov     [ebp+var_5C], 1
.text:00001780                 lea     edx, [ebp+var_64]
.text:00001783                 push    edx             ; struct NCompress::NBZip2::CBlockProps *
.text:00001784                 mov     eax, [ebp+var_30]
.text:00001787                 push    eax             ; unsigned int
.text:00001788                 mov     ecx, [ebp+var_40]
.text:0000178B                 mov     edx, [ecx]
.text:0000178D                 push    edx             ; unsigned int *
.text:0000178E                 mov     ecx, [ebp+var_4]
.text:00001791                 add     ecx, 138h       ; this
.text:00001797                 call    ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)
.text:0000179C                 mov     [ebp+var_6C], eax
.text:0000179F                 cmp     [ebp+var_6C], 0
.text:000017A3                 jz      short loc_17AA
.text:000017A5                 mov     eax, [ebp+var_6C]
.text:000017A8                 jmp     short loc_1808
.text:000017AA ; ---------------------------------------------------------------------------
.text:000017AA
.text:000017AA loc_17AA:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3A3j
.text:000017AA                 mov     eax, [ebp+var_64]
.text:000017AD                 push    eax
.text:000017AE                 mov     ecx, [ebp+var_40]
.text:000017B1                 mov     edx, [ecx]
.text:000017B3                 push    edx
.text:000017B4                 call    ?DecodeBlock1@NBZip2@NCompress@@YGXPAII@Z ; NCompress::NBZip2::DecodeBlock1(uint *,uint)
.text:000017B9                 mov     eax, [ebp+var_4]
.text:000017BC                 add     eax, 10h
.text:000017BF                 push    eax             ; COutBuffer *
.text:000017C0                 mov     ecx, [ebp+var_40]
.text:000017C3                 mov     edx, [ecx]
.text:000017C5                 add     edx, 400h
.text:000017CB                 push    edx             ; int
.text:000017CC                 lea     eax, [ebp+var_64]
.text:000017CF                 push    eax             ; int
.text:000017D0                 call    ?DecodeBlock@NBZip2@NCompress@@YGIABUCBlockProps@12@PAIAAVCOutBuffer@@@Z ; NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)
.text:000017D5                 cmp     eax, [ebp+var_4C]
.text:000017D8                 jz      short loc_17EB
.text:000017DA                 mov     ecx, [ebp+var_4]
.text:000017DD                 mov     byte ptr [ecx+704Ah], 1
.text:000017E4                 mov     eax, 1
.text:000017E9                 jmp     short loc_1808
.text:000017EB ; ---------------------------------------------------------------------------
.text:000017EB
.text:000017EB loc_17EB:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3D8j
.text:000017EB                 jmp     loc_1719
.text:000017F0 ; ---------------------------------------------------------------------------
.text:000017F0
.text:000017F0 loc_17F0:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *):loc_1708j
.text:000017F0                 mov     ecx, [ebp+var_4]
.text:000017F3                 add     ecx, 140h
.text:000017F9                 call    ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)
.text:000017FE                 push    edx
.text:000017FF                 push    eax             ; unsigned __int64
.text:00001800                 mov     ecx, [ebp+var_4] ; this
.text:00001803                 call    ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z ; NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)
.text:00001808
.text:00001808 loc_1808:                               ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3Bj
.text:00001808                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+8Dj ...
.text:00001808                 push    edx
.text:00001809                 mov     ecx, ebp
.text:0000180B                 push    eax
.text:0000180C                 lea     edx, $LN39
.text:00001812                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001817                 pop     eax
.text:00001818                 pop     edx
.text:00001819                 pop     edi
.text:0000181A                 add     esp, 6Ch
.text:0000181D                 cmp     ebp, esp
.text:0000181F                 call    __RTC_CheckEsp
.text:00001824                 mov     esp, ebp
.text:00001826                 pop     ebp
.text:00001827                 retn    4
.text:00001827 ?DecodeFile@CDecoder@NBZip2@NCompress@@AAEJPAUICompressProgressInfo@@@Z endp
.text:00001827
.text:00001827 ; ---------------------------------------------------------------------------
.text:0000182A                 align 4
.text:0000182C $LN39           dd 3                    ; DATA XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+40Co
.text:00001830                 dd offset $LN38
.text:00001834 $LN38           dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00001830o
.text:0000183C                 dd offset $LN35         ; "s"
.text:00001840                 dd 0FFFFFFB4h, 4
.text:00001848                 dd offset $LN36         ; "crc"
.text:0000184C                 dd 0FFFFFF9Ch, 0Ch
.text:00001854                 dd offset $LN37         ; "props"
.text:00001858 $LN37           db 'props',0            ; DATA XREF: .text:00001854o
.text:0000185E $LN36           db 'crc',0              ; DATA XREF: .text:00001848o
.text:00001862 $LN35           db 's',0                ; DATA XREF: .text:0000183Co
.text:00001864                 align 10h
.text:00001870
.text:00001870 ; =============== S U B R O U T I N E =======================================
.text:00001870
.text:00001870 ; Attributes: bp-based frame
.text:00001870
.text:00001870 ; void __stdcall NCompress::NBZip2::DecodeBlock1(unsigned int *, unsigned int)
.text:00001870 ?DecodeBlock1@NBZip2@NCompress@@YGXPAII@Z proc near
.text:00001870                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3B4p
.text:00001870                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+279p ...
.text:00001870
.text:00001870 var_10          = dword ptr -10h
.text:00001870 var_C           = dword ptr -0Ch
.text:00001870 var_8           = dword ptr -8
.text:00001870 var_4           = dword ptr -4
.text:00001870 arg_0           = dword ptr  8
.text:00001870 arg_4           = dword ptr  0Ch
.text:00001870
.text:00001870                 push    ebp
.text:00001871                 mov     ebp, esp
.text:00001873                 sub     esp, 10h
.text:00001876                 mov     eax, 0CCCCCCCCh
.text:0000187B                 mov     [ebp+var_10], eax
.text:0000187E                 mov     [ebp+var_C], eax
.text:00001881                 mov     [ebp+var_8], eax
.text:00001884                 mov     [ebp+var_4], eax
.text:00001887                 mov     [ebp+var_4], 0
.text:0000188E                 mov     [ebp+var_8], 0
.text:00001895                 jmp     short loc_18A0
.text:00001897 ; ---------------------------------------------------------------------------
.text:00001897
.text:00001897 loc_1897:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock1(uint *,uint)+5Dj
.text:00001897                 mov     eax, [ebp+var_8]
.text:0000189A                 add     eax, 1
.text:0000189D                 mov     [ebp+var_8], eax
.text:000018A0
.text:000018A0 loc_18A0:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock1(uint *,uint)+25j
.text:000018A0                 cmp     [ebp+var_8], 100h
.text:000018A7                 jnb     short loc_18CF
.text:000018A9                 mov     ecx, [ebp+var_8]
.text:000018AC                 mov     edx, [ebp+arg_0]
.text:000018AF                 mov     eax, [ebp+var_4]
.text:000018B2                 add     eax, [edx+ecx*4]
.text:000018B5                 mov     [ebp+var_4], eax
.text:000018B8                 mov     ecx, [ebp+var_8]
.text:000018BB                 mov     edx, [ebp+arg_0]
.text:000018BE                 mov     eax, [ebp+var_4]
.text:000018C1                 sub     eax, [edx+ecx*4]
.text:000018C4                 mov     ecx, [ebp+var_8]
.text:000018C7                 mov     edx, [ebp+arg_0]
.text:000018CA                 mov     [edx+ecx*4], eax
.text:000018CD                 jmp     short loc_1897
.text:000018CF ; ---------------------------------------------------------------------------
.text:000018CF
.text:000018CF loc_18CF:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock1(uint *,uint)+37j
.text:000018CF                 mov     eax, [ebp+arg_0]
.text:000018D2                 add     eax, 400h
.text:000018D7                 mov     [ebp+var_C], eax
.text:000018DA                 mov     [ebp+var_10], 0
.text:000018E1
.text:000018E1 loc_18E1:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock1(uint *,uint)+E8j
.text:000018E1                 mov     ecx, [ebp+var_10]
.text:000018E4                 mov     edx, [ebp+var_C]
.text:000018E7                 mov     eax, [edx+ecx*4]
.text:000018EA                 and     eax, 0FFh
.text:000018EF                 mov     ecx, [ebp+arg_0]
.text:000018F2                 mov     edx, [ecx+eax*4]
.text:000018F5                 mov     eax, [ebp+var_10]
.text:000018F8                 shl     eax, 8
.text:000018FB                 mov     ecx, [ebp+var_C]
.text:000018FE                 or      eax, [ecx+edx*4]
.text:00001901                 mov     edx, [ebp+var_10]
.text:00001904                 mov     ecx, [ebp+var_C]
.text:00001907                 mov     edx, [ecx+edx*4]
.text:0000190A                 and     edx, 0FFh
.text:00001910                 mov     ecx, [ebp+arg_0]
.text:00001913                 mov     edx, [ecx+edx*4]
.text:00001916                 mov     ecx, [ebp+var_C]
.text:00001919                 mov     [ecx+edx*4], eax
.text:0000191C                 mov     edx, [ebp+var_10]
.text:0000191F                 mov     eax, [ebp+var_C]
.text:00001922                 mov     ecx, [eax+edx*4]
.text:00001925                 and     ecx, 0FFh
.text:0000192B                 mov     edx, [ebp+arg_0]
.text:0000192E                 mov     eax, [edx+ecx*4]
.text:00001931                 add     eax, 1
.text:00001934                 mov     ecx, [ebp+var_10]
.text:00001937                 mov     edx, [ebp+var_C]
.text:0000193A                 mov     ecx, [edx+ecx*4]
.text:0000193D                 and     ecx, 0FFh
.text:00001943                 mov     edx, [ebp+arg_0]
.text:00001946                 mov     [edx+ecx*4], eax
.text:00001949                 mov     eax, [ebp+var_10]
.text:0000194C                 add     eax, 1
.text:0000194F                 mov     [ebp+var_10], eax
.text:00001952                 mov     ecx, [ebp+var_10]
.text:00001955                 cmp     ecx, [ebp+arg_4]
.text:00001958                 jb      short loc_18E1
.text:0000195A                 mov     esp, ebp
.text:0000195C                 pop     ebp
.text:0000195D                 retn    8
.text:0000195D ?DecodeBlock1@NBZip2@NCompress@@YGXPAII@Z endp
.text:0000195D
.text:00001960
.text:00001960 ; =============== S U B R O U T I N E =======================================
.text:00001960
.text:00001960 ; Attributes: bp-based frame
.text:00001960
.text:00001960 ; int __stdcall NCompress::NBZip2::DecodeBlock(int, int, COutBuffer *)
.text:00001960 ?DecodeBlock@NBZip2@NCompress@@YGIABUCBlockProps@12@PAIAAVCOutBuffer@@@Z proc near
.text:00001960                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3D0p
.text:00001960                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+2D8p
.text:00001960
.text:00001960 arg_0           = dword ptr  8
.text:00001960 arg_4           = dword ptr  0Ch
.text:00001960 arg_8           = dword ptr  10h
.text:00001960
.text:00001960                 push    ebp
.text:00001961                 mov     ebp, esp
.text:00001963                 mov     eax, [ebp+arg_0]
.text:00001966                 movzx   ecx, byte ptr [eax+8]
.text:0000196A                 test    ecx, ecx
.text:0000196C                 jz      short loc_198C
.text:0000196E                 mov     edx, [ebp+arg_8]
.text:00001971                 push    edx             ; COutBuffer *
.text:00001972                 mov     eax, [ebp+arg_0]
.text:00001975                 mov     ecx, [eax+4]
.text:00001978                 push    ecx             ; int
.text:00001979                 mov     edx, [ebp+arg_0]
.text:0000197C                 mov     eax, [edx]
.text:0000197E                 push    eax             ; int
.text:0000197F                 mov     ecx, [ebp+arg_4]
.text:00001982                 push    ecx             ; int
.text:00001983                 call    ?DecodeBlock2Rand@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z ; NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)
.text:00001988                 jmp     short loc_19A6
.text:0000198A ; ---------------------------------------------------------------------------
.text:0000198A                 jmp     short loc_19A6
.text:0000198C ; ---------------------------------------------------------------------------
.text:0000198C
.text:0000198C loc_198C:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)+Cj
.text:0000198C                 mov     edx, [ebp+arg_8]
.text:0000198F                 push    edx             ; COutBuffer *
.text:00001990                 mov     eax, [ebp+arg_0]
.text:00001993                 mov     ecx, [eax+4]
.text:00001996                 push    ecx             ; int
.text:00001997                 mov     edx, [ebp+arg_0]
.text:0000199A                 mov     eax, [edx]
.text:0000199C                 push    eax             ; int
.text:0000199D                 mov     ecx, [ebp+arg_4]
.text:000019A0                 push    ecx             ; int
.text:000019A1                 call    ?DecodeBlock2@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z ; NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)
.text:000019A6
.text:000019A6 loc_19A6:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)+28j
.text:000019A6                                         ; NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)+2Aj
.text:000019A6                 cmp     ebp, esp
.text:000019A8                 call    __RTC_CheckEsp
.text:000019AD                 pop     ebp
.text:000019AE                 retn    0Ch
.text:000019AE ?DecodeBlock@NBZip2@NCompress@@YGIABUCBlockProps@12@PAIAAVCOutBuffer@@@Z endp
.text:000019AE
.text:000019AE ; ---------------------------------------------------------------------------
.text:000019B1                 align 10h
.text:000019C0
.text:000019C0 ; =============== S U B R O U T I N E =======================================
.text:000019C0
.text:000019C0 ; Attributes: bp-based frame
.text:000019C0
.text:000019C0 ; int __stdcall NCompress::NBZip2::DecodeBlock2(int, int, int, COutBuffer *)
.text:000019C0 ?DecodeBlock2@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z proc near
.text:000019C0                                         ; CODE XREF: NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)+41p
.text:000019C0
.text:000019C0 var_1C          = dword ptr -1Ch
.text:000019C0 var_18          = dword ptr -18h
.text:000019C0 var_14          = dword ptr -14h
.text:000019C0 var_10          = dword ptr -10h
.text:000019C0 var_C           = dword ptr -0Ch
.text:000019C0 var_8           = dword ptr -8
.text:000019C0 var_4           = dword ptr -4
.text:000019C0 arg_0           = dword ptr  8
.text:000019C0 arg_4           = dword ptr  0Ch
.text:000019C0 arg_8           = dword ptr  10h
.text:000019C0 arg_C           = dword ptr  14h
.text:000019C0
.text:000019C0                 push    ebp
.text:000019C1                 mov     ebp, esp
.text:000019C3                 sub     esp, 1Ch
.text:000019C6                 mov     eax, 0CCCCCCCCh
.text:000019CB                 mov     [ebp+var_1C], eax
.text:000019CE                 mov     [ebp+var_18], eax
.text:000019D1                 mov     [ebp+var_14], eax
.text:000019D4                 mov     [ebp+var_10], eax
.text:000019D7                 mov     [ebp+var_C], eax
.text:000019DA                 mov     [ebp+var_8], eax
.text:000019DD                 mov     [ebp+var_4], eax
.text:000019E0                 lea     ecx, [ebp+var_8] ; this
.text:000019E3                 call    ??0CBZip2Crc@@QAE@XZ ; CBZip2Crc::CBZip2Crc(void)
.text:000019E8                 mov     eax, [ebp+arg_8]
.text:000019EB                 mov     ecx, [ebp+arg_0]
.text:000019EE                 mov     edx, [ecx+eax*4]
.text:000019F1                 shr     edx, 8
.text:000019F4                 mov     eax, [ebp+arg_0]
.text:000019F7                 mov     ecx, [eax+edx*4]
.text:000019FA                 mov     [ebp+var_10], ecx
.text:000019FD                 mov     edx, [ebp+var_10]
.text:00001A00                 and     edx, 0FFh
.text:00001A06                 mov     [ebp+var_14], edx
.text:00001A09                 mov     [ebp+var_18], 0
.text:00001A10
.text:00001A10 loc_1A10:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+E5j
.text:00001A10                 mov     eax, [ebp+var_10]
.text:00001A13                 and     eax, 0FFh
.text:00001A18                 mov     [ebp+var_1C], eax
.text:00001A1B                 mov     ecx, [ebp+var_10]
.text:00001A1E                 shr     ecx, 8
.text:00001A21                 mov     edx, [ebp+arg_0]
.text:00001A24                 mov     eax, [edx+ecx*4]
.text:00001A27                 mov     [ebp+var_10], eax
.text:00001A2A                 cmp     [ebp+var_18], 4
.text:00001A2E                 jnz     short loc_1A65
.text:00001A30                 jmp     short loc_1A3B
.text:00001A32 ; ---------------------------------------------------------------------------
.text:00001A32
.text:00001A32 loc_1A32:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+9Aj
.text:00001A32                 mov     ecx, [ebp+var_1C]
.text:00001A35                 sub     ecx, 1
.text:00001A38                 mov     [ebp+var_1C], ecx
.text:00001A3B
.text:00001A3B loc_1A3B:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+70j
.text:00001A3B                 cmp     [ebp+var_1C], 0
.text:00001A3F                 jbe     short loc_1A5C
.text:00001A41                 mov     edx, [ebp+var_14]
.text:00001A44                 push    edx             ; unsigned int
.text:00001A45                 lea     ecx, [ebp+var_8] ; this
.text:00001A48                 call    ?UpdateByte@CBZip2Crc@@QAEXI@Z ; CBZip2Crc::UpdateByte(uint)
.text:00001A4D                 movzx   eax, byte ptr [ebp+var_14]
.text:00001A51                 push    eax             ; unsigned __int8
.text:00001A52                 mov     ecx, [ebp+arg_C] ; this
.text:00001A55                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00001A5A                 jmp     short loc_1A32
.text:00001A5C ; ---------------------------------------------------------------------------
.text:00001A5C
.text:00001A5C loc_1A5C:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+7Fj
.text:00001A5C                 mov     [ebp+var_18], 0
.text:00001A63                 jmp     short loc_1A9C
.text:00001A65 ; ---------------------------------------------------------------------------
.text:00001A65
.text:00001A65 loc_1A65:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+6Ej
.text:00001A65                 mov     ecx, [ebp+var_1C]
.text:00001A68                 cmp     ecx, [ebp+var_14]
.text:00001A6B                 jz      short loc_1A74
.text:00001A6D                 mov     [ebp+var_18], 0
.text:00001A74
.text:00001A74 loc_1A74:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+ABj
.text:00001A74                 mov     edx, [ebp+var_18]
.text:00001A77                 add     edx, 1
.text:00001A7A                 mov     [ebp+var_18], edx
.text:00001A7D                 mov     eax, [ebp+var_1C]
.text:00001A80                 mov     [ebp+var_14], eax
.text:00001A83                 mov     ecx, [ebp+var_1C]
.text:00001A86                 push    ecx             ; unsigned int
.text:00001A87                 lea     ecx, [ebp+var_8] ; this
.text:00001A8A                 call    ?UpdateByte@CBZip2Crc@@QAEXI@Z ; CBZip2Crc::UpdateByte(uint)
.text:00001A8F                 movzx   edx, byte ptr [ebp+var_1C]
.text:00001A93                 push    edx             ; unsigned __int8
.text:00001A94                 mov     ecx, [ebp+arg_C] ; this
.text:00001A97                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00001A9C
.text:00001A9C loc_1A9C:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+A3j
.text:00001A9C                 mov     eax, [ebp+arg_4]
.text:00001A9F                 sub     eax, 1
.text:00001AA2                 mov     [ebp+arg_4], eax
.text:00001AA5                 jnz     loc_1A10
.text:00001AAB                 lea     ecx, [ebp+var_8] ; this
.text:00001AAE                 call    ?GetDigest@CBZip2Crc@@QBEIXZ ; CBZip2Crc::GetDigest(void)
.text:00001AB3                 push    edx
.text:00001AB4                 mov     ecx, ebp
.text:00001AB6                 push    eax
.text:00001AB7                 lea     edx, $LN13_0
.text:00001ABD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001AC2                 pop     eax
.text:00001AC3                 pop     edx
.text:00001AC4                 add     esp, 1Ch
.text:00001AC7                 cmp     ebp, esp
.text:00001AC9                 call    __RTC_CheckEsp
.text:00001ACE                 mov     esp, ebp
.text:00001AD0                 pop     ebp
.text:00001AD1                 retn    10h
.text:00001AD1 ?DecodeBlock2@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z endp
.text:00001AD1
.text:00001AD1 ; ---------------------------------------------------------------------------
.text:00001AD4 $LN13_0         dd 1                    ; DATA XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+F7o
.text:00001AD8                 dd offset $LN12
.text:00001ADC $LN12           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001AD8o
.text:00001AE4                 dd offset $LN11
.text:00001AE8 $LN11           dd 637263h, 0CCCCCCCCh  ; DATA XREF: .text:00001AE4o
.text:00001AF0
.text:00001AF0 ; =============== S U B R O U T I N E =======================================
.text:00001AF0
.text:00001AF0 ; Attributes: bp-based frame
.text:00001AF0
.text:00001AF0 ; int __stdcall NCompress::NBZip2::DecodeBlock2Rand(int, int, int, COutBuffer *)
.text:00001AF0 ?DecodeBlock2Rand@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z proc near
.text:00001AF0                                         ; CODE XREF: NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)+23p
.text:00001AF0
.text:00001AF0 var_24          = dword ptr -24h
.text:00001AF0 var_20          = dword ptr -20h
.text:00001AF0 var_1C          = dword ptr -1Ch
.text:00001AF0 var_18          = dword ptr -18h
.text:00001AF0 var_14          = dword ptr -14h
.text:00001AF0 var_10          = dword ptr -10h
.text:00001AF0 var_C           = dword ptr -0Ch
.text:00001AF0 var_8           = dword ptr -8
.text:00001AF0 var_4           = dword ptr -4
.text:00001AF0 arg_0           = dword ptr  8
.text:00001AF0 arg_4           = dword ptr  0Ch
.text:00001AF0 arg_8           = dword ptr  10h
.text:00001AF0 arg_C           = dword ptr  14h
.text:00001AF0
.text:00001AF0                 push    ebp
.text:00001AF1                 mov     ebp, esp
.text:00001AF3                 sub     esp, 24h
.text:00001AF6                 mov     eax, 0CCCCCCCCh
.text:00001AFB                 mov     [ebp+var_24], eax
.text:00001AFE                 mov     [ebp+var_20], eax
.text:00001B01                 mov     [ebp+var_1C], eax
.text:00001B04                 mov     [ebp+var_18], eax
.text:00001B07                 mov     [ebp+var_14], eax
.text:00001B0A                 mov     [ebp+var_10], eax
.text:00001B0D                 mov     [ebp+var_C], eax
.text:00001B10                 mov     [ebp+var_8], eax
.text:00001B13                 mov     [ebp+var_4], eax
.text:00001B16                 lea     ecx, [ebp+var_8] ; this
.text:00001B19                 call    ??0CBZip2Crc@@QAE@XZ ; CBZip2Crc::CBZip2Crc(void)
.text:00001B1E                 mov     [ebp+var_10], 1
.text:00001B25                 movzx   eax, _kRandNums
.text:00001B2C                 sub     eax, 2
.text:00001B2F                 mov     [ebp+var_14], eax
.text:00001B32                 mov     [ebp+var_18], 0
.text:00001B39                 mov     ecx, [ebp+arg_8]
.text:00001B3C                 mov     edx, [ebp+arg_0]
.text:00001B3F                 mov     eax, [edx+ecx*4]
.text:00001B42                 shr     eax, 8
.text:00001B45                 mov     ecx, [ebp+arg_0]
.text:00001B48                 mov     edx, [ecx+eax*4]
.text:00001B4B                 mov     [ebp+var_1C], edx
.text:00001B4E                 mov     eax, [ebp+var_1C]
.text:00001B51                 and     eax, 0FFh
.text:00001B56                 mov     [ebp+var_20], eax
.text:00001B59
.text:00001B59 loc_1B59:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+139j
.text:00001B59                 mov     ecx, [ebp+var_1C]
.text:00001B5C                 and     ecx, 0FFh
.text:00001B62                 mov     [ebp+var_24], ecx
.text:00001B65                 mov     edx, [ebp+var_1C]
.text:00001B68                 shr     edx, 8
.text:00001B6B                 mov     eax, [ebp+arg_0]
.text:00001B6E                 mov     ecx, [eax+edx*4]
.text:00001B71                 mov     [ebp+var_1C], ecx
.text:00001B74                 cmp     [ebp+var_14], 0
.text:00001B78                 jnz     short loc_1BA5
.text:00001B7A                 mov     edx, [ebp+var_24]
.text:00001B7D                 xor     edx, 1
.text:00001B80                 mov     [ebp+var_24], edx
.text:00001B83                 mov     eax, [ebp+var_10]
.text:00001B86                 movzx   ecx, _kRandNums[eax*2]
.text:00001B8E                 mov     [ebp+var_14], ecx
.text:00001B91                 mov     edx, [ebp+var_10]
.text:00001B94                 add     edx, 1
.text:00001B97                 mov     [ebp+var_10], edx
.text:00001B9A                 mov     eax, [ebp+var_10]
.text:00001B9D                 and     eax, 1FFh
.text:00001BA2                 mov     [ebp+var_10], eax
.text:00001BA5
.text:00001BA5 loc_1BA5:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+88j
.text:00001BA5                 mov     ecx, [ebp+var_14]
.text:00001BA8                 sub     ecx, 1
.text:00001BAB                 mov     [ebp+var_14], ecx
.text:00001BAE                 cmp     [ebp+var_18], 4
.text:00001BB2                 jnz     short loc_1BE9
.text:00001BB4                 jmp     short loc_1BBF
.text:00001BB6 ; ---------------------------------------------------------------------------
.text:00001BB6
.text:00001BB6 loc_1BB6:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+EEj
.text:00001BB6                 mov     edx, [ebp+var_24]
.text:00001BB9                 sub     edx, 1
.text:00001BBC                 mov     [ebp+var_24], edx
.text:00001BBF
.text:00001BBF loc_1BBF:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+C4j
.text:00001BBF                 cmp     [ebp+var_24], 0
.text:00001BC3                 jbe     short loc_1BE0
.text:00001BC5                 mov     eax, [ebp+var_20]
.text:00001BC8                 push    eax             ; unsigned int
.text:00001BC9                 lea     ecx, [ebp+var_8] ; this
.text:00001BCC                 call    ?UpdateByte@CBZip2Crc@@QAEXI@Z ; CBZip2Crc::UpdateByte(uint)
.text:00001BD1                 movzx   ecx, byte ptr [ebp+var_20]
.text:00001BD5                 push    ecx             ; unsigned __int8
.text:00001BD6                 mov     ecx, [ebp+arg_C] ; this
.text:00001BD9                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00001BDE                 jmp     short loc_1BB6
.text:00001BE0 ; ---------------------------------------------------------------------------
.text:00001BE0
.text:00001BE0 loc_1BE0:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+D3j
.text:00001BE0                 mov     [ebp+var_18], 0
.text:00001BE7                 jmp     short loc_1C20
.text:00001BE9 ; ---------------------------------------------------------------------------
.text:00001BE9
.text:00001BE9 loc_1BE9:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+C2j
.text:00001BE9                 mov     edx, [ebp+var_24]
.text:00001BEC                 cmp     edx, [ebp+var_20]
.text:00001BEF                 jz      short loc_1BF8
.text:00001BF1                 mov     [ebp+var_18], 0
.text:00001BF8
.text:00001BF8 loc_1BF8:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+FFj
.text:00001BF8                 mov     eax, [ebp+var_18]
.text:00001BFB                 add     eax, 1
.text:00001BFE                 mov     [ebp+var_18], eax
.text:00001C01                 mov     ecx, [ebp+var_24]
.text:00001C04                 mov     [ebp+var_20], ecx
.text:00001C07                 mov     edx, [ebp+var_24]
.text:00001C0A                 push    edx             ; unsigned int
.text:00001C0B                 lea     ecx, [ebp+var_8] ; this
.text:00001C0E                 call    ?UpdateByte@CBZip2Crc@@QAEXI@Z ; CBZip2Crc::UpdateByte(uint)
.text:00001C13                 movzx   eax, byte ptr [ebp+var_24]
.text:00001C17                 push    eax             ; unsigned __int8
.text:00001C18                 mov     ecx, [ebp+arg_C] ; this
.text:00001C1B                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:00001C20
.text:00001C20 loc_1C20:                               ; CODE XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+F7j
.text:00001C20                 mov     ecx, [ebp+arg_4]
.text:00001C23                 sub     ecx, 1
.text:00001C26                 mov     [ebp+arg_4], ecx
.text:00001C29                 jnz     loc_1B59
.text:00001C2F                 lea     ecx, [ebp+var_8] ; this
.text:00001C32                 call    ?GetDigest@CBZip2Crc@@QBEIXZ ; CBZip2Crc::GetDigest(void)
.text:00001C37                 push    edx
.text:00001C38                 mov     ecx, ebp
.text:00001C3A                 push    eax
.text:00001C3B                 lea     edx, $LN14_0
.text:00001C41                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001C46                 pop     eax
.text:00001C47                 pop     edx
.text:00001C48                 add     esp, 24h
.text:00001C4B                 cmp     ebp, esp
.text:00001C4D                 call    __RTC_CheckEsp
.text:00001C52                 mov     esp, ebp
.text:00001C54                 pop     ebp
.text:00001C55                 retn    10h
.text:00001C55 ?DecodeBlock2Rand@NBZip2@NCompress@@YGIPBIIIAAVCOutBuffer@@@Z endp
.text:00001C55
.text:00001C55 ; ---------------------------------------------------------------------------
.text:00001C58 $LN14_0         dd 1                    ; DATA XREF: NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+14Bo
.text:00001C5C                 dd offset $LN13_1
.text:00001C60 $LN13_1         dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00001C5Co
.text:00001C68                 dd offset $LN12_0
.text:00001C6C $LN12_0         dd 637263h              ; DATA XREF: .text:00001C68o
.text:00001C70
.text:00001C70 ; =============== S U B R O U T I N E =======================================
.text:00001C70
.text:00001C70 ; Attributes: bp-based frame
.text:00001C70
.text:00001C70 ; __int32 __thiscall NCompress::NBZip2::CDecoder::CodeReal(NCompress::NBZip2::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:00001C70                 public ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00001C70 ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:00001C70                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Cp
.text:00001C70                                         ; NCompress::NBZip2::CDecoder::CodeResume(ISequentialOutStream *,ICompressProgressInfo *)+1Bp
.text:00001C70
.text:00001C70 var_6C          = dword ptr -6Ch
.text:00001C70 var_68          = dword ptr -68h
.text:00001C70 var_64          = dword ptr -64h
.text:00001C70 var_60          = dword ptr -60h
.text:00001C70 var_5C          = dword ptr -5Ch
.text:00001C70 var_55          = byte ptr -55h
.text:00001C70 var_48          = dword ptr -48h
.text:00001C70 var_44          = dword ptr -44h
.text:00001C70 var_28          = dword ptr -28h
.text:00001C70 var_20          = byte ptr -20h
.text:00001C70 var_1C          = byte ptr -1Ch
.text:00001C70 var_14          = dword ptr -14h
.text:00001C70 var_10          = dword ptr -10h
.text:00001C70 var_C           = dword ptr -0Ch
.text:00001C70 var_4           = dword ptr -4
.text:00001C70 arg_0           = dword ptr  8
.text:00001C70 arg_4           = dword ptr  0Ch
.text:00001C70 arg_8           = dword ptr  10h
.text:00001C70
.text:00001C70 ; FUNCTION CHUNK AT .text:00001E85 SIZE 0000002F BYTES
.text:00001C70
.text:00001C70                 push    ebp
.text:00001C71                 mov     ebp, esp
.text:00001C73                 push    0FFFFFFFFh
.text:00001C75                 push    offset __ehhandler$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00001C7A                 mov     eax, large fs:0
.text:00001C80                 push    eax
.text:00001C81                 push    ecx
.text:00001C82                 sub     esp, 5Ch
.text:00001C85                 push    ebx
.text:00001C86                 push    esi
.text:00001C87                 push    edi
.text:00001C88                 push    ecx
.text:00001C89                 lea     edi, [ebp+var_6C]
.text:00001C8C                 mov     ecx, 17h
.text:00001C91                 mov     eax, 0CCCCCCCCh
.text:00001C96                 rep stosd
.text:00001C98                 pop     ecx
.text:00001C99                 mov     eax, dword ptr ds:___security_cookie
.text:00001C9E                 xor     eax, ebp
.text:00001CA0                 push    eax
.text:00001CA1                 lea     eax, [ebp+var_C]
.text:00001CA4                 mov     large fs:0, eax
.text:00001CAA                 mov     [ebp+var_10], esp
.text:00001CAD                 mov     [ebp+var_14], ecx
.text:00001CB0                 mov     eax, [ebp+var_14]
.text:00001CB3                 mov     byte ptr [eax+7048h], 0
.text:00001CBA                 mov     ecx, [ebp+var_14]
.text:00001CBD                 mov     byte ptr [ecx+7049h], 0
.text:00001CC4                 mov     edx, [ebp+var_14]
.text:00001CC7                 mov     byte ptr [edx+704Ah], 0
.text:00001CCE                 mov     [ebp+var_4], 0
.text:00001CD5                 push    20000h
.text:00001CDA                 mov     ecx, [ebp+var_14]
.text:00001CDD                 add     ecx, 140h
.text:00001CE3                 call    ?Create@?$CDecoder@VCInBuffer@@@NBitm@@QAE_NI@Z ; NBitm::CDecoder<CInBuffer>::Create(uint)
.text:00001CE8                 mov     [ebp+var_55], al
.text:00001CEB                 movzx   eax, [ebp+var_55]
.text:00001CEF                 test    eax, eax
.text:00001CF1                 jnz     short loc_1CFD
.text:00001CF3                 mov     eax, 8007000Eh
.text:00001CF8                 jmp     loc_1E85
.text:00001CFD ; ---------------------------------------------------------------------------
.text:00001CFD
.text:00001CFD loc_1CFD:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+81j
.text:00001CFD                 push    20000h          ; unsigned int
.text:00001D02                 mov     ecx, [ebp+var_14]
.text:00001D05                 add     ecx, 10h        ; this
.text:00001D08                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00001D0D                 movzx   ecx, al
.text:00001D10                 test    ecx, ecx
.text:00001D12                 jnz     short loc_1D1E
.text:00001D14                 mov     eax, 8007000Eh
.text:00001D19                 jmp     loc_1E85
.text:00001D1E ; ---------------------------------------------------------------------------
.text:00001D1E
.text:00001D1E loc_1D1E:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+A2j
.text:00001D1E                 cmp     [ebp+arg_0], 0
.text:00001D22                 jz      short loc_1D36
.text:00001D24                 mov     edx, [ebp+arg_0]
.text:00001D27                 push    edx             ; struct ISequentialInStream *
.text:00001D28                 mov     ecx, [ebp+var_14]
.text:00001D2B                 add     ecx, 140h
.text:00001D31                 call    ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z ; NBitm::CDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:00001D36
.text:00001D36 loc_1D36:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+B2j
.text:00001D36                 mov     eax, [ebp+var_14]
.text:00001D39                 push    eax             ; struct NCompress::NBZip2::CDecoder *
.text:00001D3A                 lea     ecx, [ebp+var_20] ; this
.text:00001D3D                 call    ??0CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@PAV123@@Z ; NCompress::NBZip2::CDecoder::CDecoderFlusher::CDecoderFlusher(NCompress::NBZip2::CDecoder *)
.text:00001D42                 mov     [ebp+var_5C], eax
.text:00001D45                 mov     byte ptr [ebp+var_4], 1
.text:00001D49                 mov     ecx, [ebp+var_14]
.text:00001D4C                 movzx   edx, byte ptr [ecx+6FF8h]
.text:00001D53                 test    edx, edx
.text:00001D55                 jz      short loc_1D6F
.text:00001D57                 mov     ecx, [ebp+var_14]
.text:00001D5A                 add     ecx, 140h
.text:00001D60                 call    ?Init@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ ; NBitm::CDecoder<CInBuffer>::Init(void)
.text:00001D65                 mov     eax, [ebp+var_14]
.text:00001D68                 mov     byte ptr [eax+6FF8h], 0
.text:00001D6F
.text:00001D6F loc_1D6F:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+E5j
.text:00001D6F                 mov     ecx, [ebp+var_14]
.text:00001D72                 add     ecx, 140h
.text:00001D78                 call    ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)
.text:00001D7D                 mov     [ebp+var_64], eax
.text:00001D80                 mov     [ebp+var_60], edx
.text:00001D83                 mov     ecx, [ebp+var_14]
.text:00001D86                 mov     edx, [ebp+var_64]
.text:00001D89                 mov     [ecx+6FF0h], edx
.text:00001D8F                 mov     eax, [ebp+var_60]
.text:00001D92                 mov     [ecx+6FF4h], eax
.text:00001D98                 mov     ecx, [ebp+var_14]
.text:00001D9B                 add     ecx, 140h
.text:00001DA1                 call    ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ ; NBitm::CDecoder<CInBuffer>::AlignToByte(void)
.text:00001DA6                 mov     ecx, [ebp+arg_4]
.text:00001DA9                 push    ecx             ; struct ISequentialOutStream *
.text:00001DAA                 mov     ecx, [ebp+var_14]
.text:00001DAD                 add     ecx, 10h        ; this
.text:00001DB0                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00001DB5                 mov     ecx, [ebp+var_14]
.text:00001DB8                 add     ecx, 10h        ; this
.text:00001DBB                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:00001DC0                 mov     edx, [ebp+arg_8]
.text:00001DC3                 push    edx             ; struct ICompressProgressInfo *
.text:00001DC4                 mov     ecx, [ebp+var_14] ; this
.text:00001DC7                 call    ?DecodeFile@CDecoder@NBZip2@NCompress@@AAEJPAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)
.text:00001DCC                 mov     [ebp+var_68], eax
.text:00001DCF                 mov     eax, [ebp+var_68]
.text:00001DD2                 mov     [ebp+var_28], eax
.text:00001DD5                 cmp     [ebp+var_28], 0
.text:00001DD9                 jz      short loc_1DF5
.text:00001DDB                 mov     ecx, [ebp+var_28]
.text:00001DDE                 mov     [ebp+var_44], ecx
.text:00001DE1                 mov     byte ptr [ebp+var_4], 0
.text:00001DE5                 lea     ecx, [ebp+var_20] ; this
.text:00001DE8                 call    ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text:00001DED                 mov     eax, [ebp+var_44]
.text:00001DF0                 jmp     loc_1E85
.text:00001DF5 ; ---------------------------------------------------------------------------
.text:00001DF5
.text:00001DF5 loc_1DF5:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+169j
.text:00001DF5                 mov     [ebp+var_1C], 0
.text:00001DF9                 mov     ecx, [ebp+var_14] ; this
.text:00001DFC                 call    ?Flush@CDecoder@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CDecoder::Flush(void)
.text:00001E01                 mov     [ebp+var_6C], eax
.text:00001E04                 mov     edx, [ebp+var_6C]
.text:00001E07                 mov     [ebp+var_48], edx
.text:00001E0A                 mov     byte ptr [ebp+var_4], 0
.text:00001E0E                 lea     ecx, [ebp+var_20] ; this
.text:00001E11                 call    ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text:00001E16                 mov     eax, [ebp+var_48]
.text:00001E19                 jmp     short loc_1E85
.text:00001E19 ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:00001E19
.text:00001E1B
.text:00001E1B ; =============== S U B R O U T I N E =======================================
.text:00001E1B
.text:00001E1B
.text:00001E1B __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 proc near
.text:00001E1B                                         ; DATA XREF: .xdata$x:00002F88o
.text:00001E1B                 mov     eax, [ebp-30h]
.text:00001E1E                 mov     ecx, [eax]
.text:00001E20                 mov     [ebp-4Ch], ecx
.text:00001E23                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E2A                 mov     eax, offset $LN15_1
.text:00001E2F                 retn
.text:00001E2F __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 endp
.text:00001E2F
.text:00001E30 ; ---------------------------------------------------------------------------
.text:00001E30                 mov     eax, offset __tryend$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3
.text:00001E35                 retn
.text:00001E36
.text:00001E36 ; =============== S U B R O U T I N E =======================================
.text:00001E36
.text:00001E36
.text:00001E36 __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 proc near
.text:00001E36                                         ; DATA XREF: .xdata$x:00002F98o
.text:00001E36                 mov     edx, [ebp-3Ch]
.text:00001E39                 mov     eax, [edx]
.text:00001E3B                 mov     [ebp-50h], eax
.text:00001E3E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E45                 mov     eax, offset $LN17
.text:00001E4A                 retn
.text:00001E4A __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 endp
.text:00001E4A
.text:00001E4B ; ---------------------------------------------------------------------------
.text:00001E4B                 mov     eax, offset __tryend$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3
.text:00001E50                 retn
.text:00001E51
.text:00001E51 ; =============== S U B R O U T I N E =======================================
.text:00001E51
.text:00001E51
.text:00001E51 __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2 proc near
.text:00001E51                                         ; DATA XREF: .xdata$x:00002FA8o
.text:00001E51                 mov     dword ptr [ebp-54h], 80004005h
.text:00001E58                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E5F                 mov     eax, offset $LN19_0
.text:00001E64                 retn
.text:00001E64 __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2 endp
.text:00001E64
.text:00001E65 ; ---------------------------------------------------------------------------
.text:00001E65                 mov     eax, offset __tryend$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3
.text:00001E6A                 retn
.text:00001E6B ; ---------------------------------------------------------------------------
.text:00001E6B
.text:00001E6B __tryend$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$3:
.text:00001E6B                                         ; DATA XREF: .text:00001E30o
.text:00001E6B                                         ; .text:00001E4Bo ...
.text:00001E6B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E72                 jmp     short loc_1E79
.text:00001E74 ; ---------------------------------------------------------------------------
.text:00001E74
.text:00001E74 $LN19_0:                                ; DATA XREF: __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2+Eo
.text:00001E74                 mov     eax, [ebp-54h]
.text:00001E77                 jmp     short loc_1E85
.text:00001E79 ; ---------------------------------------------------------------------------
.text:00001E79
.text:00001E79 loc_1E79:                               ; CODE XREF: .text:00001E72j
.text:00001E79                 jmp     short loc_1E80
.text:00001E7B ; ---------------------------------------------------------------------------
.text:00001E7B
.text:00001E7B $LN17:                                  ; DATA XREF: __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1+Fo
.text:00001E7B                 mov     eax, [ebp-50h]
.text:00001E7E                 jmp     short loc_1E85
.text:00001E80 ; ---------------------------------------------------------------------------
.text:00001E80
.text:00001E80 loc_1E80:                               ; CODE XREF: .text:loc_1E79j
.text:00001E80                 jmp     short loc_1E85
.text:00001E82 ; ---------------------------------------------------------------------------
.text:00001E82
.text:00001E82 $LN15_1:                                ; DATA XREF: __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0+Fo
.text:00001E82                 mov     eax, [ebp-4Ch]
.text:00001E85 ; START OF FUNCTION CHUNK FOR ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00001E85
.text:00001E85 loc_1E85:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+88j
.text:00001E85                                         ; NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+A9j ...
.text:00001E85                 push    edx
.text:00001E86                 mov     ecx, ebp
.text:00001E88                 push    eax
.text:00001E89                 lea     edx, $LN28
.text:00001E8F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E94                 pop     eax
.text:00001E95                 pop     edx
.text:00001E96                 mov     ecx, [ebp+var_C]
.text:00001E99                 mov     large fs:0, ecx
.text:00001EA0                 pop     ecx
.text:00001EA1                 pop     edi
.text:00001EA2                 pop     esi
.text:00001EA3                 pop     ebx
.text:00001EA4                 add     esp, 6Ch
.text:00001EA7                 cmp     ebp, esp
.text:00001EA9                 call    __RTC_CheckEsp
.text:00001EAE                 mov     esp, ebp
.text:00001EB0                 pop     ebp
.text:00001EB1                 retn    0Ch
.text:00001EB1 ; END OF FUNCTION CHUNK FOR ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00001EB1 ; ---------------------------------------------------------------------------
.text:00001EB4 $LN28           dd 3                    ; DATA XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+219o
.text:00001EB8                 dd offset $LN27
.text:00001EBC $LN27           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:00001EB8o
.text:00001EC4                 dd offset $LN23         ; "flusher"
.text:00001EC8                 dd 0FFFFFFD0h, 4
.text:00001ED0                 dd offset $LN24
.text:00001ED4                 dd 0FFFFFFC4h, 4
.text:00001EDC                 dd offset $LN25
.text:00001EE0 $LN25           db 65h, 0               ; DATA XREF: .text:00001EDCo
.text:00001EE2 $LN24           dw 65h                  ; DATA XREF: .text:00001ED0o
.text:00001EE4 $LN23           db 'flusher',0          ; DATA XREF: .text:00001EC4o
.text:00001EEC                 align 10h
.text:00001EF0
.text:00001EF0 ; =============== S U B R O U T I N E =======================================
.text:00001EF0
.text:00001EF0 ; Attributes: bp-based frame
.text:00001EF0
.text:00001EF0 ; __int32 __stdcall NCompress::NBZip2::CDecoder::Code(NCompress::NBZip2::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00001EF0                 public ?Code@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00001EF0 ?Code@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00001EF0                                         ; DATA XREF: .rdata:00002E30o
.text:00001EF0
.text:00001EF0 this            = dword ptr  8
.text:00001EF0 arg_4           = dword ptr  0Ch
.text:00001EF0 arg_8           = dword ptr  10h
.text:00001EF0 arg_14          = dword ptr  1Ch
.text:00001EF0
.text:00001EF0                 push    ebp
.text:00001EF1                 mov     ebp, esp
.text:00001EF3                 mov     eax, [ebp+this]
.text:00001EF6                 mov     byte ptr [eax+6FF8h], 1
.text:00001EFD                 mov     ecx, [ebp+arg_14]
.text:00001F00                 push    ecx             ; struct ICompressProgressInfo *
.text:00001F01                 mov     edx, [ebp+arg_8]
.text:00001F04                 push    edx             ; struct ISequentialOutStream *
.text:00001F05                 mov     eax, [ebp+arg_4]
.text:00001F08                 push    eax             ; struct ISequentialInStream *
.text:00001F09                 mov     ecx, [ebp+this] ; this
.text:00001F0C                 call    ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00001F11                 cmp     ebp, esp
.text:00001F13                 call    __RTC_CheckEsp
.text:00001F18                 pop     ebp
.text:00001F19                 retn    18h
.text:00001F19 ?Code@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00001F19
.text:00001F19 ; ---------------------------------------------------------------------------
.text:00001F1C                 align 10h
.text:00001F20
.text:00001F20 ; =============== S U B R O U T I N E =======================================
.text:00001F20
.text:00001F20 ; Attributes: bp-based frame
.text:00001F20
.text:00001F20 ; __int32 __thiscall NCompress::NBZip2::CDecoder::CodeResume(NCompress::NBZip2::CDecoder *this, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:00001F20                 public ?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:00001F20 ?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:00001F20
.text:00001F20 var_4           = dword ptr -4
.text:00001F20 arg_0           = dword ptr  8
.text:00001F20 arg_4           = dword ptr  0Ch
.text:00001F20
.text:00001F20                 push    ebp
.text:00001F21                 mov     ebp, esp
.text:00001F23                 push    ecx
.text:00001F24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F2B                 mov     [ebp+var_4], ecx
.text:00001F2E                 mov     eax, [ebp+arg_4]
.text:00001F31                 push    eax             ; struct ICompressProgressInfo *
.text:00001F32                 mov     ecx, [ebp+arg_0]
.text:00001F35                 push    ecx             ; struct ISequentialOutStream *
.text:00001F36                 push    0               ; struct ISequentialInStream *
.text:00001F38                 mov     ecx, [ebp+var_4] ; this
.text:00001F3B                 call    ?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00001F40                 add     esp, 4
.text:00001F43                 cmp     ebp, esp
.text:00001F45                 call    __RTC_CheckEsp
.text:00001F4A                 mov     esp, ebp
.text:00001F4C                 pop     ebp
.text:00001F4D                 retn    8
.text:00001F4D ?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:00001F4D
.text:00001F50
.text:00001F50 ; =============== S U B R O U T I N E =======================================
.text:00001F50
.text:00001F50 ; Attributes: bp-based frame
.text:00001F50
.text:00001F50 ; __int32 __stdcall NCompress::NBZip2::CDecoder::SetInStream(NCompress::NBZip2::CDecoder *this, struct ISequentialInStream *)
.text:00001F50                 public ?SetInStream@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:00001F50 ?SetInStream@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:00001F50                                         ; DATA XREF: .rdata:00002E34o
.text:00001F50
.text:00001F50 this            = dword ptr  8
.text:00001F50 arg_4           = dword ptr  0Ch
.text:00001F50
.text:00001F50                 push    ebp
.text:00001F51                 mov     ebp, esp
.text:00001F53                 mov     eax, [ebp+arg_4]
.text:00001F56                 push    eax
.text:00001F57                 mov     ecx, [ebp+this]
.text:00001F5A                 add     ecx, 138h
.text:00001F60                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001F65                 mov     ecx, [ebp+arg_4]
.text:00001F68                 push    ecx             ; struct ISequentialInStream *
.text:00001F69                 mov     ecx, [ebp+this]
.text:00001F6C                 add     ecx, 140h
.text:00001F72                 call    ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z ; NBitm::CDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:00001F77                 xor     eax, eax
.text:00001F79                 cmp     ebp, esp
.text:00001F7B                 call    __RTC_CheckEsp
.text:00001F80                 pop     ebp
.text:00001F81                 retn    8
.text:00001F81 ?SetInStream@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:00001F81
.text:00001F81 ; ---------------------------------------------------------------------------
.text:00001F84                 align 10h
.text:00001F90
.text:00001F90 ; =============== S U B R O U T I N E =======================================
.text:00001F90
.text:00001F90 ; Attributes: bp-based frame
.text:00001F90
.text:00001F90 ; __int32 __stdcall NCompress::NBZip2::CDecoder::ReleaseInStream(NCompress::NBZip2::CDecoder *this)
.text:00001F90                 public ?ReleaseInStream@CDecoder@NBZip2@NCompress@@UAGJXZ
.text:00001F90 ?ReleaseInStream@CDecoder@NBZip2@NCompress@@UAGJXZ proc near
.text:00001F90                                         ; DATA XREF: .rdata:00002E38o
.text:00001F90
.text:00001F90 this            = dword ptr  8
.text:00001F90
.text:00001F90                 push    ebp
.text:00001F91                 mov     ebp, esp
.text:00001F93                 mov     ecx, [ebp+this]
.text:00001F96                 add     ecx, 138h
.text:00001F9C                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00001FA1                 xor     eax, eax
.text:00001FA3                 cmp     ebp, esp
.text:00001FA5                 call    __RTC_CheckEsp
.text:00001FAA                 pop     ebp
.text:00001FAB                 retn    4
.text:00001FAB ?ReleaseInStream@CDecoder@NBZip2@NCompress@@UAGJXZ endp
.text:00001FAB
.text:00001FAB ; ---------------------------------------------------------------------------
.text:00001FAE                 align 10h
.text:00001FB0
.text:00001FB0 ; =============== S U B R O U T I N E =======================================
.text:00001FB0
.text:00001FB0 ; Attributes: bp-based frame
.text:00001FB0
.text:00001FB0 ; __int32 __thiscall NCompress::NBZip2::CState::Create(NCompress::NBZip2::CState *__hidden this)
.text:00001FB0                 public ?Create@CState@NBZip2@NCompress@@QAEJXZ
.text:00001FB0 ?Create@CState@NBZip2@NCompress@@QAEJXZ proc near
.text:00001FB0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+206p
.text:00001FB0
.text:00001FB0 var_14          = dword ptr -14h
.text:00001FB0 var_10          = dword ptr -10h
.text:00001FB0 var_C           = dword ptr -0Ch
.text:00001FB0 var_8           = dword ptr -8
.text:00001FB0 var_4           = dword ptr -4
.text:00001FB0
.text:00001FB0                 push    ebp
.text:00001FB1                 mov     ebp, esp
.text:00001FB3                 sub     esp, 14h
.text:00001FB6                 mov     eax, 0CCCCCCCCh
.text:00001FBB                 mov     [ebp+var_14], eax
.text:00001FBE                 mov     [ebp+var_10], eax
.text:00001FC1                 mov     [ebp+var_C], eax
.text:00001FC4                 mov     [ebp+var_8], eax
.text:00001FC7                 mov     [ebp+var_4], eax
.text:00001FCA                 mov     [ebp+var_4], ecx
.text:00001FCD                 mov     ecx, [ebp+var_4]
.text:00001FD0                 add     ecx, 10h        ; this
.text:00001FD3                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:00001FD8                 mov     [ebp+var_8], eax
.text:00001FDB                 cmp     [ebp+var_8], 0
.text:00001FDF                 jz      short loc_1FE6
.text:00001FE1                 mov     eax, [ebp+var_8]
.text:00001FE4                 jmp     short loc_203C
.text:00001FE6 ; ---------------------------------------------------------------------------
.text:00001FE6
.text:00001FE6 loc_1FE6:                               ; CODE XREF: NCompress::NBZip2::CState::Create(void)+2Fj
.text:00001FE6                 mov     ecx, [ebp+var_4]
.text:00001FE9                 add     ecx, 14h        ; this
.text:00001FEC                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:00001FF1                 mov     [ebp+var_C], eax
.text:00001FF4                 cmp     [ebp+var_C], 0
.text:00001FF8                 jz      short loc_1FFF
.text:00001FFA                 mov     eax, [ebp+var_C]
.text:00001FFD                 jmp     short loc_203C
.text:00001FFF ; ---------------------------------------------------------------------------
.text:00001FFF
.text:00001FFF loc_1FFF:                               ; CODE XREF: NCompress::NBZip2::CState::Create(void)+48j
.text:00001FFF                 mov     ecx, [ebp+var_4]
.text:00002002                 add     ecx, 18h        ; this
.text:00002005                 call    ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)
.text:0000200A                 mov     [ebp+var_10], eax
.text:0000200D                 cmp     [ebp+var_10], 0
.text:00002011                 jz      short loc_2018
.text:00002013                 mov     eax, [ebp+var_10]
.text:00002016                 jmp     short loc_203C
.text:00002018 ; ---------------------------------------------------------------------------
.text:00002018
.text:00002018 loc_2018:                               ; CODE XREF: NCompress::NBZip2::CState::Create(void)+61j
.text:00002018                 mov     eax, [ebp+var_4]
.text:0000201B                 push    eax             ; void *
.text:0000201C                 push    offset ?MFThread@NBZip2@NCompress@@YGIPAX@Z ; unsigned int (__stdcall *)(void *)
.text:00002021                 mov     ecx, [ebp+var_4]
.text:00002024                 add     ecx, 8          ; this
.text:00002027                 call    ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create(uint (*)(void *),void *)
.text:0000202C                 mov     [ebp+var_14], eax
.text:0000202F                 cmp     [ebp+var_14], 0
.text:00002033                 jz      short loc_203A
.text:00002035                 mov     eax, [ebp+var_14]
.text:00002038                 jmp     short loc_203C
.text:0000203A ; ---------------------------------------------------------------------------
.text:0000203A
.text:0000203A loc_203A:                               ; CODE XREF: NCompress::NBZip2::CState::Create(void)+83j
.text:0000203A                 xor     eax, eax
.text:0000203C
.text:0000203C loc_203C:                               ; CODE XREF: NCompress::NBZip2::CState::Create(void)+34j
.text:0000203C                                         ; NCompress::NBZip2::CState::Create(void)+4Dj ...
.text:0000203C                 add     esp, 14h
.text:0000203F                 cmp     ebp, esp
.text:00002041                 call    __RTC_CheckEsp
.text:00002046                 mov     esp, ebp
.text:00002048                 pop     ebp
.text:00002049                 retn
.text:00002049 ?Create@CState@NBZip2@NCompress@@QAEJXZ endp
.text:00002049
.text:00002049 ; ---------------------------------------------------------------------------
.text:0000204A                 align 10h
.text:00002050
.text:00002050 ; =============== S U B R O U T I N E =======================================
.text:00002050
.text:00002050 ; Attributes: bp-based frame
.text:00002050
.text:00002050 ; int __stdcall NCompress::NBZip2::MFThread(NCompress::NBZip2::CState *)
.text:00002050 ?MFThread@NBZip2@NCompress@@YGIPAX@Z proc near
.text:00002050                                         ; DATA XREF: NCompress::NBZip2::CState::Create(void)+6Co
.text:00002050
.text:00002050 arg_0           = dword ptr  8
.text:00002050
.text:00002050                 push    ebp
.text:00002051                 mov     ebp, esp
.text:00002053                 mov     ecx, [ebp+arg_0] ; this
.text:00002056                 call    ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::ThreadFunc(void)
.text:0000205B                 xor     eax, eax
.text:0000205D                 cmp     ebp, esp
.text:0000205F                 call    __RTC_CheckEsp
.text:00002064                 pop     ebp
.text:00002065                 retn    4
.text:00002065 ?MFThread@NBZip2@NCompress@@YGIPAX@Z endp
.text:00002065
.text:00002065 ; ---------------------------------------------------------------------------
.text:00002068                 align 10h
.text:00002070
.text:00002070 ; =============== S U B R O U T I N E =======================================
.text:00002070
.text:00002070 ; Attributes: bp-based frame
.text:00002070
.text:00002070 ; void __thiscall NCompress::NBZip2::CState::FinishStream(NCompress::NBZip2::CState *__hidden this)
.text:00002070                 public ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ
.text:00002070 ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ proc near
.text:00002070                                         ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+9Dp
.text:00002070                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+137p ...
.text:00002070
.text:00002070 var_4           = dword ptr -4
.text:00002070
.text:00002070                 push    ebp
.text:00002071                 mov     ebp, esp
.text:00002073                 push    ecx
.text:00002074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000207B                 mov     [ebp+var_4], ecx
.text:0000207E                 mov     eax, [ebp+var_4]
.text:00002081                 mov     ecx, [eax+4]
.text:00002084                 mov     byte ptr [ecx+7035h], 1
.text:0000208B                 mov     ecx, [ebp+var_4]
.text:0000208E                 add     ecx, 10h        ; this
.text:00002091                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00002096                 mov     edx, [ebp+var_4]
.text:00002099                 mov     ecx, [edx+4]
.text:0000209C                 add     ecx, 7010h      ; this
.text:000020A2                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000020A7                 mov     eax, [ebp+var_4]
.text:000020AA                 mov     ecx, [eax+4]
.text:000020AD                 add     ecx, 7038h      ; this
.text:000020B3                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:000020B8                 mov     ecx, [ebp+var_4]
.text:000020BB                 add     ecx, 14h        ; this
.text:000020BE                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000020C3                 add     esp, 4
.text:000020C6                 cmp     ebp, esp
.text:000020C8                 call    __RTC_CheckEsp
.text:000020CD                 mov     esp, ebp
.text:000020CF                 pop     ebp
.text:000020D0                 retn
.text:000020D0 ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ endp
.text:000020D0
.text:000020D0 ; ---------------------------------------------------------------------------
.text:000020D1                 align 10h
.text:000020E0
.text:000020E0 ; =============== S U B R O U T I N E =======================================
.text:000020E0
.text:000020E0 ; Attributes: bp-based frame
.text:000020E0
.text:000020E0 ; void __thiscall NCompress::NBZip2::CState::ThreadFunc(NCompress::NBZip2::CState *__hidden this)
.text:000020E0                 public ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:000020E0 ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ proc near
.text:000020E0                                         ; CODE XREF: NCompress::NBZip2::MFThread(void *)+6p
.text:000020E0
.text:000020E0 var_7C          = dword ptr -7Ch
.text:000020E0 var_78          = dword ptr -78h
.text:000020E0 var_74          = dword ptr -74h
.text:000020E0 var_70          = dword ptr -70h
.text:000020E0 var_6C          = dword ptr -6Ch
.text:000020E0 var_68          = dword ptr -68h
.text:000020E0 var_55          = byte ptr -55h
.text:000020E0 var_44          = dword ptr -44h
.text:000020E0 var_3C          = byte ptr -3Ch
.text:000020E0 var_34          = qword ptr -34h
.text:000020E0 var_28          = dword ptr -28h
.text:000020E0 var_20          = dword ptr -20h
.text:000020E0 var_1C          = dword ptr -1Ch
.text:000020E0 var_18          = dword ptr -18h
.text:000020E0 var_14          = dword ptr -14h
.text:000020E0 var_10          = dword ptr -10h
.text:000020E0 var_C           = dword ptr -0Ch
.text:000020E0 var_4           = dword ptr -4
.text:000020E0
.text:000020E0 ; FUNCTION CHUNK AT .text:00002315 SIZE 000000DA BYTES
.text:000020E0 ; FUNCTION CHUNK AT .text:00002425 SIZE 000000AE BYTES
.text:000020E0
.text:000020E0                 push    ebp
.text:000020E1                 mov     ebp, esp
.text:000020E3                 push    0FFFFFFFFh
.text:000020E5                 push    offset __ehhandler$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:000020EA                 mov     eax, large fs:0
.text:000020F0                 push    eax
.text:000020F1                 push    ecx
.text:000020F2                 sub     esp, 6Ch
.text:000020F5                 push    ebx
.text:000020F6                 push    esi
.text:000020F7                 push    edi
.text:000020F8                 push    ecx
.text:000020F9                 lea     edi, [ebp+var_7C]
.text:000020FC                 mov     ecx, 1Bh
.text:00002101                 mov     eax, 0CCCCCCCCh
.text:00002106                 rep stosd
.text:00002108                 pop     ecx
.text:00002109                 mov     eax, dword ptr ds:___security_cookie
.text:0000210E                 xor     eax, ebp
.text:00002110                 push    eax
.text:00002111                 lea     eax, [ebp+var_C]
.text:00002114                 mov     large fs:0, eax
.text:0000211A                 mov     [ebp+var_10], esp
.text:0000211D                 mov     [ebp+var_14], ecx
.text:00002120
.text:00002120 loc_2120:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+A2j
.text:00002120                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+143j ...
.text:00002120                 mov     eax, [ebp+var_14]
.text:00002123                 mov     ecx, [eax+4]
.text:00002126                 add     ecx, 700Ch      ; this
.text:0000212C                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00002131                 mov     ecx, [ebp+var_14]
.text:00002134                 mov     ecx, [ecx+4]
.text:00002137                 add     ecx, 7010h      ; this
.text:0000213D                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00002142                 mov     edx, [ebp+var_14]
.text:00002145                 mov     eax, [edx+4]
.text:00002148                 movzx   ecx, byte ptr [eax+7034h]
.text:0000214F                 test    ecx, ecx
.text:00002151                 jz      short loc_2169
.text:00002153                 mov     edx, [ebp+var_14]
.text:00002156                 mov     ecx, [edx+4]
.text:00002159                 add     ecx, 7010h      ; this
.text:0000215F                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00002164                 jmp     loc_24A6
.text:00002169 ; ---------------------------------------------------------------------------
.text:00002169
.text:00002169 loc_2169:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+71j
.text:00002169                 mov     eax, [ebp+var_14]
.text:0000216C                 mov     ecx, [eax+4]
.text:0000216F                 movzx   edx, byte ptr [ecx+7035h]
.text:00002176                 test    edx, edx
.text:00002178                 jz      short loc_2184
.text:0000217A                 mov     ecx, [ebp+var_14] ; this
.text:0000217D                 call    ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::FinishStream(void)
.text:00002182                 jmp     short loc_2120
.text:00002184 ; ---------------------------------------------------------------------------
.text:00002184
.text:00002184 loc_2184:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+98j
.text:00002184                 mov     [ebp+var_18], 0
.text:0000218B                 mov     eax, [ebp+var_14]
.text:0000218E                 mov     ecx, [eax+4]
.text:00002191                 mov     edx, [ecx+7030h]
.text:00002197                 mov     [ebp+var_1C], edx
.text:0000219A                 mov     eax, [ebp+var_1C]
.text:0000219D                 add     eax, 1
.text:000021A0                 mov     [ebp+var_20], eax
.text:000021A3                 mov     ecx, [ebp+var_14]
.text:000021A6                 mov     edx, [ecx+4]
.text:000021A9                 mov     eax, [ebp+var_20]
.text:000021AC                 cmp     eax, [edx+7028h]
.text:000021B2                 jnz     short loc_21BB
.text:000021B4                 mov     [ebp+var_20], 0
.text:000021BB
.text:000021BB loc_21BB:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+D2j
.text:000021BB                 mov     ecx, [ebp+var_14]
.text:000021BE                 mov     edx, [ecx+4]
.text:000021C1                 mov     eax, [ebp+var_20]
.text:000021C4                 mov     [edx+7030h], eax
.text:000021CA                 mov     dword ptr [ebp+var_34], 0
.text:000021D1                 mov     dword ptr [ebp+var_34+4], 0
.text:000021D8                 lea     ecx, [ebp+var_44] ; this
.text:000021DB                 call    ??0CBlockProps@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBlockProps::CBlockProps(void)
.text:000021E0                 mov     [ebp+var_4], 0
.text:000021E7                 lea     ecx, [ebp+var_28]
.text:000021EA                 push    ecx             ; unsigned int *
.text:000021EB                 mov     edx, [ebp+var_14]
.text:000021EE                 mov     ecx, [edx+4]    ; this
.text:000021F1                 call    ?ReadSignature@CDecoder@NBZip2@NCompress@@QAEJAAI@Z ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)
.text:000021F6                 mov     [ebp+var_68], eax
.text:000021F9                 mov     eax, [ebp+var_68]
.text:000021FC                 mov     [ebp+var_18], eax
.text:000021FF                 cmp     [ebp+var_18], 0
.text:00002203                 jz      short loc_2228
.text:00002205                 mov     ecx, [ebp+var_14]
.text:00002208                 mov     edx, [ecx+4]
.text:0000220B                 mov     eax, [ebp+var_18]
.text:0000220E                 mov     [edx+703Ch], eax
.text:00002214                 mov     ecx, [ebp+var_14] ; this
.text:00002217                 call    ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::FinishStream(void)
.text:0000221C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002223                 jmp     loc_2120
.text:00002228 ; ---------------------------------------------------------------------------
.text:00002228
.text:00002228 loc_2228:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+123j
.text:00002228                 mov     ecx, [ebp+var_14]
.text:0000222B                 mov     edx, [ecx+4]
.text:0000222E                 movzx   eax, byte ptr [edx+7049h]
.text:00002235                 test    eax, eax
.text:00002237                 jz      short loc_225C
.text:00002239                 mov     ecx, [ebp+var_14]
.text:0000223C                 mov     edx, [ecx+4]
.text:0000223F                 mov     eax, [ebp+var_18]
.text:00002242                 mov     [edx+703Ch], eax
.text:00002248                 mov     ecx, [ebp+var_14] ; this
.text:0000224B                 call    ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::FinishStream(void)
.text:00002250                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002257                 jmp     loc_2120
.text:0000225C ; ---------------------------------------------------------------------------
.text:0000225C
.text:0000225C loc_225C:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+157j
.text:0000225C                 mov     [ebp+var_3C], 1
.text:00002260                 lea     ecx, [ebp+var_44]
.text:00002263                 push    ecx             ; struct NCompress::NBZip2::CBlockProps *
.text:00002264                 mov     edx, [ebp+var_14]
.text:00002267                 mov     eax, [edx+4]
.text:0000226A                 mov     ecx, [eax+7044h]
.text:00002270                 push    ecx             ; unsigned int
.text:00002271                 mov     edx, [ebp+var_14]
.text:00002274                 mov     eax, [edx]
.text:00002276                 push    eax             ; unsigned int *
.text:00002277                 mov     ecx, [ebp+var_14]
.text:0000227A                 mov     ecx, [ecx+4]
.text:0000227D                 add     ecx, 138h       ; this
.text:00002283                 call    ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)
.text:00002288                 mov     [ebp+var_6C], eax
.text:0000228B                 mov     edx, [ebp+var_6C]
.text:0000228E                 mov     [ebp+var_18], edx
.text:00002291                 cmp     [ebp+var_18], 0
.text:00002295                 jz      short loc_22BA
.text:00002297                 mov     eax, [ebp+var_14]
.text:0000229A                 mov     ecx, [eax+4]
.text:0000229D                 mov     edx, [ebp+var_18]
.text:000022A0                 mov     [ecx+703Ch], edx
.text:000022A6                 mov     ecx, [ebp+var_14] ; this
.text:000022A9                 call    ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::FinishStream(void)
.text:000022AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000022B5                 jmp     loc_2120
.text:000022BA ; ---------------------------------------------------------------------------
.text:000022BA
.text:000022BA loc_22BA:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+1B5j
.text:000022BA                 mov     eax, [ebp+var_14]
.text:000022BD                 mov     ecx, [eax+4]
.text:000022C0                 add     ecx, 140h
.text:000022C6                 call    ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)
.text:000022CB                 mov     [ebp+var_74], eax
.text:000022CE                 mov     [ebp+var_70], edx
.text:000022D1                 mov     ecx, [ebp+var_74]
.text:000022D4                 mov     dword ptr [ebp+var_34], ecx
.text:000022D7                 mov     edx, [ebp+var_70]
.text:000022DA                 mov     dword ptr [ebp+var_34+4], edx
.text:000022DD                 jmp     short loc_2315
.text:000022DD ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ endp
.text:000022DD
.text:000022DF
.text:000022DF ; =============== S U B R O U T I N E =======================================
.text:000022DF
.text:000022DF
.text:000022DF __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$0 proc near
.text:000022DF                                         ; DATA XREF: .xdata$x:00002FD8o
.text:000022DF                 mov     eax, [ebp-50h]
.text:000022E2                 mov     ecx, [eax]
.text:000022E4                 mov     [ebp-18h], ecx
.text:000022E7                 cmp     dword ptr [ebp-18h], 0
.text:000022EB                 jz      short loc_22F4
.text:000022ED                 mov     dword ptr [ebp-18h], 80004005h
.text:000022F4
.text:000022F4 loc_22F4:                               ; CODE XREF: __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$0+Cj
.text:000022F4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000022FB                 mov     eax, offset __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$2
.text:00002300                 retn
.text:00002300 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$0 endp
.text:00002300
.text:00002301
.text:00002301 ; =============== S U B R O U T I N E =======================================
.text:00002301
.text:00002301
.text:00002301 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$1 proc near
.text:00002301                                         ; DATA XREF: .xdata$x:00002FE8o
.text:00002301                 mov     dword ptr [ebp-18h], 80004005h
.text:00002308                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000230F                 mov     eax, offset __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$2
.text:00002314                 retn
.text:00002314 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$1 endp
.text:00002314
.text:00002315 ; ---------------------------------------------------------------------------
.text:00002315 ; START OF FUNCTION CHUNK FOR ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:00002315
.text:00002315 loc_2315:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+1FDj
.text:00002315                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000231C
.text:0000231C __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$2:
.text:0000231C                                         ; DATA XREF: __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$0+1Co
.text:0000231C                                         ; __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$1+Eo
.text:0000231C                 cmp     [ebp+var_18], 0
.text:00002320                 jz      short loc_233E
.text:00002322                 mov     edx, [ebp+var_14]
.text:00002325                 mov     eax, [edx+4]
.text:00002328                 mov     ecx, [ebp+var_18]
.text:0000232B                 mov     [eax+703Ch], ecx
.text:00002331                 mov     ecx, [ebp+var_14] ; this
.text:00002334                 call    ?FinishStream@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::FinishStream(void)
.text:00002339                 jmp     loc_2120
.text:0000233E ; ---------------------------------------------------------------------------
.text:0000233E
.text:0000233E loc_233E:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+240j
.text:0000233E                 mov     edx, [ebp+var_14]
.text:00002341                 mov     ecx, [edx+4]
.text:00002344                 add     ecx, 7010h      ; this
.text:0000234A                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:0000234F                 mov     eax, [ebp+var_44]
.text:00002352                 push    eax
.text:00002353                 mov     ecx, [ebp+var_14]
.text:00002356                 mov     edx, [ecx]
.text:00002358                 push    edx
.text:00002359                 call    ?DecodeBlock1@NBZip2@NCompress@@YGXPAII@Z ; NCompress::NBZip2::DecodeBlock1(uint *,uint)
.text:0000235E                 mov     [ebp+var_55], 1
.text:00002362                 mov     [ebp+var_4], 2
.text:00002369                 mov     eax, [ebp+var_14]
.text:0000236C                 mov     ecx, [eax+4]
.text:0000236F                 mov     edx, [ebp+var_1C]
.text:00002372                 imul    edx, 11Ch
.text:00002378                 mov     eax, [ecx+7004h]
.text:0000237E                 lea     ecx, [eax+edx+18h] ; this
.text:00002382                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00002387                 mov     ecx, [ebp+var_14]
.text:0000238A                 mov     edx, [ecx+4]
.text:0000238D                 mov     al, [edx+7036h]
.text:00002393                 mov     [ebp+var_55], al
.text:00002396                 movzx   ecx, [ebp+var_55]
.text:0000239A                 test    ecx, ecx
.text:0000239C                 jnz     short loc_23ED
.text:0000239E                 mov     edx, [ebp+var_14]
.text:000023A1                 mov     eax, [edx+4]
.text:000023A4                 add     eax, 10h
.text:000023A7                 push    eax             ; COutBuffer *
.text:000023A8                 mov     ecx, [ebp+var_14]
.text:000023AB                 mov     edx, [ecx]
.text:000023AD                 add     edx, 400h
.text:000023B3                 push    edx             ; int
.text:000023B4                 lea     eax, [ebp+var_44]
.text:000023B7                 push    eax             ; int
.text:000023B8                 call    ?DecodeBlock@NBZip2@NCompress@@YGIABUCBlockProps@12@PAIAAVCOutBuffer@@@Z ; NCompress::NBZip2::DecodeBlock(NCompress::NBZip2::CBlockProps const &,uint *,COutBuffer &)
.text:000023BD                 mov     [ebp+var_78], eax
.text:000023C0                 mov     ecx, [ebp+var_78]
.text:000023C3                 cmp     ecx, [ebp+var_28]
.text:000023C6                 jnz     short loc_23E6
.text:000023C8                 mov     edx, dword ptr [ebp+var_34+4]
.text:000023CB                 push    edx
.text:000023CC                 mov     eax, dword ptr [ebp+var_34]
.text:000023CF                 push    eax             ; unsigned __int64
.text:000023D0                 mov     ecx, [ebp+var_14]
.text:000023D3                 mov     ecx, [ecx+4]    ; this
.text:000023D6                 call    ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z ; NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)
.text:000023DB                 mov     [ebp+var_7C], eax
.text:000023DE                 mov     edx, [ebp+var_7C]
.text:000023E1                 mov     [ebp+var_18], edx
.text:000023E4                 jmp     short loc_23ED
.text:000023E6 ; ---------------------------------------------------------------------------
.text:000023E6
.text:000023E6 loc_23E6:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+2E6j
.text:000023E6                 mov     [ebp+var_18], 1
.text:000023ED
.text:000023ED loc_23ED:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+2BCj
.text:000023ED                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+304j
.text:000023ED                 jmp     short loc_2425
.text:000023ED ; END OF FUNCTION CHUNK FOR ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:000023EF
.text:000023EF ; =============== S U B R O U T I N E =======================================
.text:000023EF
.text:000023EF
.text:000023EF __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$3 proc near
.text:000023EF                                         ; DATA XREF: .xdata$x:00002FB8o
.text:000023EF                 mov     eax, [ebp-60h]
.text:000023F2                 mov     ecx, [eax]
.text:000023F4                 mov     [ebp-18h], ecx
.text:000023F7                 cmp     dword ptr [ebp-18h], 0
.text:000023FB                 jz      short loc_2404
.text:000023FD                 mov     dword ptr [ebp-18h], 80004005h
.text:00002404
.text:00002404 loc_2404:                               ; CODE XREF: __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$3+Cj
.text:00002404                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000240B                 mov     eax, offset __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$5
.text:00002410                 retn
.text:00002410 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$3 endp
.text:00002410
.text:00002411
.text:00002411 ; =============== S U B R O U T I N E =======================================
.text:00002411
.text:00002411
.text:00002411 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$4 proc near
.text:00002411                                         ; DATA XREF: .xdata$x:00002FC8o
.text:00002411                 mov     dword ptr [ebp-18h], 80004005h
.text:00002418                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000241F                 mov     eax, offset __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$5
.text:00002424                 retn
.text:00002424 __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$4 endp
.text:00002424
.text:00002425 ; ---------------------------------------------------------------------------
.text:00002425 ; START OF FUNCTION CHUNK FOR ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:00002425
.text:00002425 loc_2425:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void):loc_23EDj
.text:00002425                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000242C
.text:0000242C __tryend$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$5:
.text:0000242C                                         ; DATA XREF: __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$3+1Co
.text:0000242C                                         ; __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$4+Eo
.text:0000242C                 cmp     [ebp+var_18], 0
.text:00002430                 jz      short loc_244E
.text:00002432                 mov     edx, [ebp+var_14]
.text:00002435                 mov     eax, [edx+4]
.text:00002438                 mov     ecx, [ebp+var_18]
.text:0000243B                 mov     [eax+7040h], ecx
.text:00002441                 mov     edx, [ebp+var_14]
.text:00002444                 mov     eax, [edx+4]
.text:00002447                 mov     byte ptr [eax+7036h], 1
.text:0000244E
.text:0000244E loc_244E:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+350j
.text:0000244E                 mov     ecx, [ebp+var_14]
.text:00002451                 mov     edx, [ecx+4]
.text:00002454                 mov     eax, [ebp+var_20]
.text:00002457                 imul    eax, 11Ch
.text:0000245D                 mov     ecx, [edx+7004h]
.text:00002463                 lea     ecx, [ecx+eax+18h] ; this
.text:00002467                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:0000246C                 cmp     [ebp+var_18], 0
.text:00002470                 jnz     short loc_247A
.text:00002472                 movzx   edx, [ebp+var_55]
.text:00002476                 test    edx, edx
.text:00002478                 jz      short loc_24A1
.text:0000247A
.text:0000247A loc_247A:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+390j
.text:0000247A                 mov     ecx, [ebp+var_14]
.text:0000247D                 add     ecx, 10h        ; this
.text:00002480                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00002485                 mov     eax, [ebp+var_14]
.text:00002488                 mov     ecx, [eax+4]
.text:0000248B                 add     ecx, 7038h      ; this
.text:00002491                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00002496                 mov     ecx, [ebp+var_14]
.text:00002499                 add     ecx, 14h        ; this
.text:0000249C                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000024A1
.text:000024A1 loc_24A1:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+398j
.text:000024A1                 jmp     loc_2120
.text:000024A6 ; ---------------------------------------------------------------------------
.text:000024A6
.text:000024A6 loc_24A6:                               ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+84j
.text:000024A6                 push    edx
.text:000024A7                 mov     ecx, ebp
.text:000024A9                 push    eax
.text:000024AA                 lea     edx, $LN49
.text:000024B0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000024B5                 pop     eax
.text:000024B6                 pop     edx
.text:000024B7                 mov     ecx, [ebp+var_C]
.text:000024BA                 mov     large fs:0, ecx
.text:000024C1                 pop     ecx
.text:000024C2                 pop     edi
.text:000024C3                 pop     esi
.text:000024C4                 pop     ebx
.text:000024C5                 add     esp, 7Ch
.text:000024C8                 cmp     ebp, esp
.text:000024CA                 call    __RTC_CheckEsp
.text:000024CF                 mov     esp, ebp
.text:000024D1                 pop     ebp
.text:000024D2                 retn
.text:000024D2 ; END OF FUNCTION CHUNK FOR ?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text:000024D2 ; ---------------------------------------------------------------------------
.text:000024D3                 align 4
.text:000024D4 $LN49           dd 4                    ; DATA XREF: NCompress::NBZip2::CState::ThreadFunc(void)+3CAo
.text:000024D8                 dd offset $LN48
.text:000024DC $LN48           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:000024D8o
.text:000024E4                 dd offset $LN43         ; "crc"
.text:000024E8                 dd 0FFFFFFBCh, 0Ch
.text:000024F0                 dd offset $LN44         ; "props"
.text:000024F4                 dd 0FFFFFFB0h, 4
.text:000024FC                 dd offset $LN45
.text:00002500                 dd 0FFFFFFA0h, 4
.text:00002508                 dd offset $LN46
.text:0000250C $LN46           db 65h, 0               ; DATA XREF: .text:00002508o
.text:0000250E $LN45           dw 65h                  ; DATA XREF: .text:000024FCo
.text:00002510 $LN44           db 'props',0            ; DATA XREF: .text:000024F0o
.text:00002516 $LN43           db 'crc',0              ; DATA XREF: .text:000024E4o
.text:0000251A                 align 10h
.text:00002520
.text:00002520 ; =============== S U B R O U T I N E =======================================
.text:00002520
.text:00002520 ; Attributes: bp-based frame
.text:00002520
.text:00002520 ; __int32 __stdcall NCompress::NBZip2::CDecoder::SetNumberOfThreads(NCompress::NBZip2::CDecoder *this, unsigned int)
.text:00002520                 public ?SetNumberOfThreads@CDecoder@NBZip2@NCompress@@UAGJI@Z
.text:00002520 ?SetNumberOfThreads@CDecoder@NBZip2@NCompress@@UAGJI@Z proc near
.text:00002520                                         ; DATA XREF: .rdata:00002E1Co
.text:00002520
.text:00002520 this            = dword ptr  8
.text:00002520 arg_4           = dword ptr  0Ch
.text:00002520
.text:00002520                 push    ebp
.text:00002521                 mov     ebp, esp
.text:00002523                 mov     eax, [ebp+this]
.text:00002526                 mov     ecx, [ebp+arg_4]
.text:00002529                 mov     [eax+7024h], ecx
.text:0000252F                 mov     edx, [ebp+this]
.text:00002532                 cmp     dword ptr [edx+7024h], 1
.text:00002539                 jnb     short loc_2548
.text:0000253B                 mov     eax, [ebp+this]
.text:0000253E                 mov     dword ptr [eax+7024h], 1
.text:00002548
.text:00002548 loc_2548:                               ; CODE XREF: NCompress::NBZip2::CDecoder::SetNumberOfThreads(uint)+19j
.text:00002548                 mov     ecx, [ebp+this]
.text:0000254B                 cmp     dword ptr [ecx+7024h], 4
.text:00002552                 jbe     short loc_2561
.text:00002554                 mov     edx, [ebp+this]
.text:00002557                 mov     dword ptr [edx+7024h], 4
.text:00002561
.text:00002561 loc_2561:                               ; CODE XREF: NCompress::NBZip2::CDecoder::SetNumberOfThreads(uint)+32j
.text:00002561                 xor     eax, eax
.text:00002563                 pop     ebp
.text:00002564                 retn    8
.text:00002564 ?SetNumberOfThreads@CDecoder@NBZip2@NCompress@@UAGJI@Z endp
.text:00002564
.text:00002564 ; ---------------------------------------------------------------------------
.text:00002567                 align 10h
.text:00002570
.text:00002570 ; =============== S U B R O U T I N E =======================================
.text:00002570
.text:00002570 ; Attributes: bp-based frame
.text:00002570
.text:00002570 ; __int32 __thiscall NCompress::NBZip2::CDecoder::SetRatioProgress(NCompress::NBZip2::CDecoder *this, unsigned __int64)
.text:00002570                 public ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z
.text:00002570 ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z proc near
.text:00002570                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+32Cp
.text:00002570                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+403p ...
.text:00002570
.text:00002570 var_14          = dword ptr -14h
.text:00002570 var_10          = dword ptr -10h
.text:00002570 var_C           = dword ptr -0Ch
.text:00002570 var_8           = dword ptr -8
.text:00002570 var_4           = dword ptr -4
.text:00002570 arg_0           = qword ptr  8
.text:00002570
.text:00002570                 push    ebp
.text:00002571                 mov     ebp, esp
.text:00002573                 sub     esp, 14h
.text:00002576                 push    esi
.text:00002577                 mov     eax, 0CCCCCCCCh
.text:0000257C                 mov     [ebp+var_14], eax
.text:0000257F                 mov     [ebp+var_10], eax
.text:00002582                 mov     [ebp+var_C], eax
.text:00002585                 mov     [ebp+var_8], eax
.text:00002588                 mov     [ebp+var_4], eax
.text:0000258B                 mov     [ebp+var_4], ecx
.text:0000258E                 mov     eax, [ebp+var_4]
.text:00002591                 cmp     dword ptr [eax+7000h], 0
.text:00002598                 jnz     short loc_259E
.text:0000259A                 xor     eax, eax
.text:0000259C                 jmp     short loc_25F5
.text:0000259E ; ---------------------------------------------------------------------------
.text:0000259E
.text:0000259E loc_259E:                               ; CODE XREF: NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)+28j
.text:0000259E                 mov     ecx, [ebp+var_4]
.text:000025A1                 mov     edx, dword ptr [ebp+arg_0]
.text:000025A4                 sub     edx, [ecx+6FF0h]
.text:000025AA                 mov     eax, dword ptr [ebp+arg_0+4]
.text:000025AD                 sbb     eax, [ecx+6FF4h]
.text:000025B3                 mov     dword ptr [ebp+arg_0], edx
.text:000025B6                 mov     dword ptr [ebp+arg_0+4], eax
.text:000025B9                 mov     ecx, [ebp+var_4]
.text:000025BC                 add     ecx, 10h        ; this
.text:000025BF                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:000025C4                 mov     [ebp+var_10], eax
.text:000025C7                 mov     [ebp+var_C], edx
.text:000025CA                 mov     esi, esp
.text:000025CC                 lea     ecx, [ebp+var_10]
.text:000025CF                 push    ecx
.text:000025D0                 lea     edx, [ebp+arg_0]
.text:000025D3                 push    edx
.text:000025D4                 mov     eax, [ebp+var_4]
.text:000025D7                 mov     ecx, [eax+7000h]
.text:000025DD                 mov     edx, [ebp+var_4]
.text:000025E0                 mov     eax, [edx+7000h]
.text:000025E6                 mov     ecx, [ecx]
.text:000025E8                 push    eax
.text:000025E9                 mov     edx, [ecx+0Ch]
.text:000025EC                 call    edx
.text:000025EE                 cmp     esi, esp
.text:000025F0                 call    __RTC_CheckEsp
.text:000025F5
.text:000025F5 loc_25F5:                               ; CODE XREF: NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)+2Cj
.text:000025F5                 push    edx
.text:000025F6                 mov     ecx, ebp
.text:000025F8                 push    eax
.text:000025F9                 lea     edx, $LN6
.text:000025FF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002604                 pop     eax
.text:00002605                 pop     edx
.text:00002606                 pop     esi
.text:00002607                 add     esp, 14h
.text:0000260A                 cmp     ebp, esp
.text:0000260C                 call    __RTC_CheckEsp
.text:00002611                 mov     esp, ebp
.text:00002613                 pop     ebp
.text:00002614                 retn    8
.text:00002614 ?SetRatioProgress@CDecoder@NBZip2@NCompress@@QAEJ_K@Z endp
.text:00002614
.text:00002614 ; ---------------------------------------------------------------------------
.text:00002617                 align 4
.text:00002618 $LN6            dd 1                    ; DATA XREF: NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)+89o
.text:0000261C                 dd offset $LN5
.text:00002620 $LN5            dd 0FFFFFFF0h, 8        ; DATA XREF: .text:0000261Co
.text:00002628                 dd offset $LN4          ; "unpackSize"
.text:0000262C $LN4            db 'unpackSize',0       ; DATA XREF: .text:00002628o
.text:00002637                 align 10h
.text:00002640
.text:00002640 ; =============== S U B R O U T I N E =======================================
.text:00002640
.text:00002640 ; Attributes: bp-based frame
.text:00002640
.text:00002640 ; __int32 __stdcall NCompress::NBZip2::CNsisDecoder::SetInStream(NCompress::NBZip2::CNsisDecoder *this, struct ISequentialInStream *)
.text:00002640                 public ?SetInStream@CNsisDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:00002640 ?SetInStream@CNsisDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:00002640
.text:00002640 this            = dword ptr  8
.text:00002640 arg_4           = dword ptr  0Ch
.text:00002640
.text:00002640                 push    ebp
.text:00002641                 mov     ebp, esp
.text:00002643                 mov     eax, [ebp+arg_4]
.text:00002646                 push    eax
.text:00002647                 mov     ecx, [ebp+this]
.text:0000264A                 add     ecx, 0Ch
.text:0000264D                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00002652                 mov     ecx, [ebp+arg_4]
.text:00002655                 push    ecx             ; struct ISequentialInStream *
.text:00002656                 mov     ecx, [ebp+this]
.text:00002659                 add     ecx, 14h
.text:0000265C                 call    ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z ; NBitm::CDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:00002661                 xor     eax, eax
.text:00002663                 cmp     ebp, esp
.text:00002665                 call    __RTC_CheckEsp
.text:0000266A                 pop     ebp
.text:0000266B                 retn    8
.text:0000266B ?SetInStream@CNsisDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:0000266B
.text:0000266B ; ---------------------------------------------------------------------------
.text:0000266E                 align 10h
.text:00002670
.text:00002670 ; =============== S U B R O U T I N E =======================================
.text:00002670
.text:00002670 ; Attributes: bp-based frame
.text:00002670
.text:00002670 ; __int32 __stdcall NCompress::NBZip2::CNsisDecoder::ReleaseInStream(NCompress::NBZip2::CNsisDecoder *this)
.text:00002670                 public ?ReleaseInStream@CNsisDecoder@NBZip2@NCompress@@UAGJXZ
.text:00002670 ?ReleaseInStream@CNsisDecoder@NBZip2@NCompress@@UAGJXZ proc near
.text:00002670
.text:00002670 this            = dword ptr  8
.text:00002670
.text:00002670                 push    ebp
.text:00002671                 mov     ebp, esp
.text:00002673                 mov     ecx, [ebp+this]
.text:00002676                 add     ecx, 0Ch
.text:00002679                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:0000267E                 xor     eax, eax
.text:00002680                 cmp     ebp, esp
.text:00002682                 call    __RTC_CheckEsp
.text:00002687                 pop     ebp
.text:00002688                 retn    4
.text:00002688 ?ReleaseInStream@CNsisDecoder@NBZip2@NCompress@@UAGJXZ endp
.text:00002688
.text:00002688 ; ---------------------------------------------------------------------------
.text:0000268B                 align 10h
.text:00002690
.text:00002690 ; =============== S U B R O U T I N E =======================================
.text:00002690
.text:00002690 ; Attributes: bp-based frame
.text:00002690
.text:00002690 ; __int32 __stdcall NCompress::NBZip2::CNsisDecoder::SetOutStreamSize(NCompress::NBZip2::CNsisDecoder *this, const unsigned __int64 *)
.text:00002690                 public ?SetOutStreamSize@CNsisDecoder@NBZip2@NCompress@@UAGJPB_K@Z
.text:00002690 ?SetOutStreamSize@CNsisDecoder@NBZip2@NCompress@@UAGJPB_K@Z proc near
.text:00002690
.text:00002690 this            = dword ptr  8
.text:00002690
.text:00002690                 push    ebp
.text:00002691                 mov     ebp, esp
.text:00002693                 mov     eax, [ebp+this]
.text:00002696                 mov     dword ptr [eax+6FDCh], 0
.text:000026A0                 xor     eax, eax
.text:000026A2                 pop     ebp
.text:000026A3                 retn    8
.text:000026A3 ?SetOutStreamSize@CNsisDecoder@NBZip2@NCompress@@UAGJPB_K@Z endp
.text:000026A3
.text:000026A3 ; ---------------------------------------------------------------------------
.text:000026A6                 align 10h
.text:000026B0
.text:000026B0 ; =============== S U B R O U T I N E =======================================
.text:000026B0
.text:000026B0 ; Attributes: bp-based frame
.text:000026B0
.text:000026B0 ; __int32 __cdecl NCompress::NBZip2::CNsisDecoder::Read(NCompress::NBZip2::CNsisDecoder *this, void *, unsigned int, unsigned int *)
.text:000026B0                 public ?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.text:000026B0 ?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z proc near
.text:000026B0
.text:000026B0 var_6C          = dword ptr -6Ch
.text:000026B0 var_68          = dword ptr -68h
.text:000026B0 var_62          = byte ptr -62h
.text:000026B0 var_61          = byte ptr -61h
.text:000026B0 var_4C          = dword ptr -4Ch
.text:000026B0 var_48          = dword ptr -48h
.text:000026B0 var_44          = dword ptr -44h
.text:000026B0 var_40          = dword ptr -40h
.text:000026B0 var_3C          = dword ptr -3Ch
.text:000026B0 var_38          = dword ptr -38h
.text:000026B0 var_34          = dword ptr -34h
.text:000026B0 var_30          = dword ptr -30h
.text:000026B0 var_28          = dword ptr -28h
.text:000026B0 var_24          = dword ptr -24h
.text:000026B0 var_20          = byte ptr -20h
.text:000026B0 var_15          = byte ptr -15h
.text:000026B0 var_14          = dword ptr -14h
.text:000026B0 var_10          = dword ptr -10h
.text:000026B0 var_C           = dword ptr -0Ch
.text:000026B0 var_4           = dword ptr -4
.text:000026B0 this            = dword ptr  8
.text:000026B0 arg_4           = dword ptr  0Ch
.text:000026B0 arg_8           = dword ptr  10h
.text:000026B0 arg_C           = dword ptr  14h
.text:000026B0
.text:000026B0 ; FUNCTION CHUNK AT .text:00002ABB SIZE 0000002F BYTES
.text:000026B0
.text:000026B0                 push    ebp
.text:000026B1                 mov     ebp, esp
.text:000026B3                 push    0FFFFFFFFh
.text:000026B5                 push    offset __ehhandler$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.text:000026BA                 mov     eax, large fs:0
.text:000026C0                 push    eax
.text:000026C1                 push    ecx
.text:000026C2                 sub     esp, 5Ch
.text:000026C5                 push    ebx
.text:000026C6                 push    esi
.text:000026C7                 push    edi
.text:000026C8                 lea     edi, [ebp+var_6C]
.text:000026CB                 mov     ecx, 17h
.text:000026D0                 mov     eax, 0CCCCCCCCh
.text:000026D5                 rep stosd
.text:000026D7                 mov     eax, dword ptr ds:___security_cookie
.text:000026DC                 xor     eax, ebp
.text:000026DE                 push    eax
.text:000026DF                 lea     eax, [ebp+var_C]
.text:000026E2                 mov     large fs:0, eax
.text:000026E8                 mov     [ebp+var_10], esp
.text:000026EB                 mov     [ebp+var_4], 0
.text:000026F2                 mov     eax, [ebp+arg_C]
.text:000026F5                 mov     dword ptr [eax], 0
.text:000026FB                 mov     ecx, [ebp+this]
.text:000026FE                 cmp     dword ptr [ecx+6FE4h], 3
.text:00002705                 jnz     short loc_270E
.text:00002707                 xor     eax, eax
.text:00002709                 jmp     loc_2ABB
.text:0000270E ; ---------------------------------------------------------------------------
.text:0000270E
.text:0000270E loc_270E:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+55j
.text:0000270E                 mov     edx, [ebp+this]
.text:00002711                 cmp     dword ptr [edx+6FE4h], 4
.text:00002718                 jnz     short loc_2724
.text:0000271A                 mov     eax, 1
.text:0000271F                 jmp     loc_2ABB
.text:00002724 ; ---------------------------------------------------------------------------
.text:00002724
.text:00002724 loc_2724:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+68j
.text:00002724                 cmp     [ebp+arg_8], 0
.text:00002728                 jnz     short loc_2731
.text:0000272A                 xor     eax, eax
.text:0000272C                 jmp     loc_2ABB
.text:00002731 ; ---------------------------------------------------------------------------
.text:00002731
.text:00002731 loc_2731:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+78j
.text:00002731                 mov     eax, [ebp+this]
.text:00002734                 add     eax, 6EC8h
.text:00002739                 mov     [ebp+var_14], eax
.text:0000273C                 mov     ecx, [ebp+this]
.text:0000273F                 cmp     dword ptr [ecx+6FE4h], 0
.text:00002746                 jnz     short loc_27A2
.text:00002748                 push    20000h
.text:0000274D                 mov     ecx, [ebp+this]
.text:00002750                 add     ecx, 18h
.text:00002753                 call    ?Create@?$CDecoder@VCInBuffer@@@NBitm@@QAE_NI@Z ; NBitm::CDecoder<CInBuffer>::Create(uint)
.text:00002758                 mov     [ebp+var_61], al
.text:0000275B                 movzx   edx, [ebp+var_61]
.text:0000275F                 test    edx, edx
.text:00002761                 jnz     short loc_276D
.text:00002763                 mov     eax, 8007000Eh
.text:00002768                 jmp     loc_2ABB
.text:0000276D ; ---------------------------------------------------------------------------
.text:0000276D
.text:0000276D loc_276D:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+B1j
.text:0000276D                 mov     ecx, [ebp+var_14] ; this
.text:00002770                 call    ?Alloc@CState@NBZip2@NCompress@@QAE_NXZ ; NCompress::NBZip2::CState::Alloc(void)
.text:00002775                 mov     [ebp+var_62], al
.text:00002778                 movzx   eax, [ebp+var_62]
.text:0000277C                 test    eax, eax
.text:0000277E                 jnz     short loc_278A
.text:00002780                 mov     eax, 8007000Eh
.text:00002785                 jmp     loc_2ABB
.text:0000278A ; ---------------------------------------------------------------------------
.text:0000278A
.text:0000278A loc_278A:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+CEj
.text:0000278A                 mov     ecx, [ebp+this]
.text:0000278D                 add     ecx, 18h
.text:00002790                 call    ?Init@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ ; NBitm::CDecoder<CInBuffer>::Init(void)
.text:00002795                 mov     ecx, [ebp+this]
.text:00002798                 mov     dword ptr [ecx+6FE4h], 1
.text:000027A2
.text:000027A2 loc_27A2:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+96j
.text:000027A2                 mov     edx, [ebp+this]
.text:000027A5                 cmp     dword ptr [edx+6FE4h], 1
.text:000027AC                 jnz     loc_28C4
.text:000027B2                 push    8               ; unsigned int
.text:000027B4                 mov     ecx, [ebp+this]
.text:000027B7                 add     ecx, 10h        ; this
.text:000027BA                 call    ?ReadBits@CBase@NBZip2@NCompress@@QAEII@Z ; NCompress::NBZip2::CBase::ReadBits(uint)
.text:000027BF                 mov     [ebp+var_68], eax
.text:000027C2                 mov     al, byte ptr [ebp+var_68]
.text:000027C5                 mov     [ebp+var_15], al
.text:000027C8                 movzx   ecx, [ebp+var_15]
.text:000027CC                 cmp     ecx, 17h
.text:000027CF                 jnz     short loc_27E5
.text:000027D1                 mov     edx, [ebp+this]
.text:000027D4                 mov     dword ptr [edx+6FE4h], 3
.text:000027DE                 xor     eax, eax
.text:000027E0                 jmp     loc_2ABB
.text:000027E5 ; ---------------------------------------------------------------------------
.text:000027E5
.text:000027E5 loc_27E5:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+11Fj
.text:000027E5                 movzx   eax, [ebp+var_15]
.text:000027E9                 cmp     eax, 31h ; '1'
.text:000027EC                 jz      short loc_2805
.text:000027EE                 mov     ecx, [ebp+this]
.text:000027F1                 mov     dword ptr [ecx+6FE4h], 4
.text:000027FB                 mov     eax, 1
.text:00002800                 jmp     loc_2ABB
.text:00002805 ; ---------------------------------------------------------------------------
.text:00002805
.text:00002805 loc_2805:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+13Cj
.text:00002805                 lea     ecx, [ebp+var_28] ; this
.text:00002808                 call    ??0CBlockProps@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBlockProps::CBlockProps(void)
.text:0000280D                 mov     [ebp+var_20], 0
.text:00002811                 lea     edx, [ebp+var_28]
.text:00002814                 push    edx             ; struct NCompress::NBZip2::CBlockProps *
.text:00002815                 push    0DBBA0h         ; unsigned int
.text:0000281A                 mov     eax, [ebp+var_14]
.text:0000281D                 mov     ecx, [eax]
.text:0000281F                 push    ecx             ; unsigned int *
.text:00002820                 mov     ecx, [ebp+this]
.text:00002823                 add     ecx, 10h        ; this
.text:00002826                 call    ?ReadBlock@CBase@NBZip2@NCompress@@QAEJPAIIPAUCBlockProps@23@@Z ; NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)
.text:0000282B                 mov     [ebp+var_6C], eax
.text:0000282E                 mov     edx, [ebp+var_6C]
.text:00002831                 mov     [ebp+var_30], edx
.text:00002834                 cmp     [ebp+var_30], 0
.text:00002838                 jz      short loc_2842
.text:0000283A                 mov     eax, [ebp+var_30]
.text:0000283D                 jmp     loc_2ABB
.text:00002842 ; ---------------------------------------------------------------------------
.text:00002842
.text:00002842 loc_2842:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+188j
.text:00002842                 mov     eax, [ebp+this]
.text:00002845                 mov     ecx, [ebp+var_28]
.text:00002848                 mov     [eax+6FF8h], ecx
.text:0000284E                 mov     edx, [ebp+var_28]
.text:00002851                 push    edx
.text:00002852                 mov     eax, [ebp+var_14]
.text:00002855                 mov     ecx, [eax]
.text:00002857                 push    ecx
.text:00002858                 call    ?DecodeBlock1@NBZip2@NCompress@@YGXPAII@Z ; NCompress::NBZip2::DecodeBlock1(uint *,uint)
.text:0000285D                 mov     edx, [ebp+var_14]
.text:00002860                 mov     eax, [edx]
.text:00002862                 add     eax, 400h
.text:00002867                 mov     [ebp+var_34], eax
.text:0000286A                 mov     ecx, [ebp+var_24]
.text:0000286D                 mov     edx, [ebp+var_34]
.text:00002870                 mov     eax, [edx+ecx*4]
.text:00002873                 shr     eax, 8
.text:00002876                 mov     ecx, [ebp+this]
.text:00002879                 mov     edx, [ebp+var_34]
.text:0000287C                 mov     eax, [edx+eax*4]
.text:0000287F                 mov     [ecx+6FE8h], eax
.text:00002885                 mov     ecx, [ebp+this]
.text:00002888                 mov     edx, [ecx+6FE8h]
.text:0000288E                 and     edx, 0FFh
.text:00002894                 mov     eax, [ebp+this]
.text:00002897                 mov     [eax+6FECh], edx
.text:0000289D                 mov     ecx, [ebp+this]
.text:000028A0                 mov     dword ptr [ecx+6FF4h], 0
.text:000028AA                 mov     edx, [ebp+this]
.text:000028AD                 mov     dword ptr [edx+6FF0h], 0
.text:000028B7                 mov     eax, [ebp+this]
.text:000028BA                 mov     dword ptr [eax+6FE4h], 2
.text:000028C4
.text:000028C4 loc_28C4:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+FCj
.text:000028C4                 mov     ecx, [ebp+this]
.text:000028C7                 mov     edx, [ecx+6FE8h]
.text:000028CD                 mov     [ebp+var_38], edx
.text:000028D0                 mov     eax, [ebp+this]
.text:000028D3                 mov     ecx, [eax+6FECh]
.text:000028D9                 mov     [ebp+var_3C], ecx
.text:000028DC                 mov     edx, [ebp+this]
.text:000028DF                 mov     eax, [edx+6FF4h]
.text:000028E5                 mov     [ebp+var_40], eax
.text:000028E8                 mov     ecx, [ebp+this]
.text:000028EB                 mov     edx, [ecx+6FF8h]
.text:000028F1                 mov     [ebp+var_44], edx
.text:000028F4                 mov     eax, [ebp+var_14]
.text:000028F7                 mov     ecx, [eax]
.text:000028F9                 add     ecx, 400h
.text:000028FF                 mov     [ebp+var_48], ecx
.text:00002902
.text:00002902 loc_2902:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *):loc_2953j
.text:00002902                 mov     edx, [ebp+this]
.text:00002905                 cmp     dword ptr [edx+6FF0h], 0
.text:0000290C                 jz      short loc_2955
.text:0000290E                 mov     eax, [ebp+this]
.text:00002911                 mov     ecx, [eax+6FF0h]
.text:00002917                 sub     ecx, 1
.text:0000291A                 mov     edx, [ebp+this]
.text:0000291D                 mov     [edx+6FF0h], ecx
.text:00002923                 mov     eax, [ebp+arg_4]
.text:00002926                 mov     cl, byte ptr [ebp+var_3C]
.text:00002929                 mov     [eax], cl
.text:0000292B                 mov     edx, [ebp+arg_4]
.text:0000292E                 add     edx, 1
.text:00002931                 mov     [ebp+arg_4], edx
.text:00002934                 mov     eax, [ebp+arg_C]
.text:00002937                 mov     ecx, [eax]
.text:00002939                 add     ecx, 1
.text:0000293C                 mov     edx, [ebp+arg_C]
.text:0000293F                 mov     [edx], ecx
.text:00002941                 mov     eax, [ebp+arg_8]
.text:00002944                 sub     eax, 1
.text:00002947                 mov     [ebp+arg_8], eax
.text:0000294A                 jnz     short loc_2953
.text:0000294C                 xor     eax, eax
.text:0000294E                 jmp     loc_2ABB
.text:00002953 ; ---------------------------------------------------------------------------
.text:00002953
.text:00002953 loc_2953:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+29Aj
.text:00002953                 jmp     short loc_2902
.text:00002955 ; ---------------------------------------------------------------------------
.text:00002955
.text:00002955 loc_2955:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+25Cj
.text:00002955                 cmp     [ebp+var_44], 0
.text:00002959                 jnz     short loc_296F
.text:0000295B                 mov     ecx, [ebp+this]
.text:0000295E                 mov     dword ptr [ecx+6FE4h], 1
.text:00002968                 xor     eax, eax
.text:0000296A                 jmp     loc_2ABB
.text:0000296F ; ---------------------------------------------------------------------------
.text:0000296F
.text:0000296F loc_296F:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+2A9j
.text:0000296F                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+389j
.text:0000296F                 mov     edx, [ebp+var_38]
.text:00002972                 and     edx, 0FFh
.text:00002978                 mov     [ebp+var_4C], edx
.text:0000297B                 mov     eax, [ebp+var_38]
.text:0000297E                 shr     eax, 8
.text:00002981                 mov     ecx, [ebp+var_48]
.text:00002984                 mov     edx, [ecx+eax*4]
.text:00002987                 mov     [ebp+var_38], edx
.text:0000298A                 mov     eax, [ebp+var_44]
.text:0000298D                 sub     eax, 1
.text:00002990                 mov     [ebp+var_44], eax
.text:00002993                 cmp     [ebp+var_40], 4
.text:00002997                 jnz     short loc_29EA
.text:00002999                 mov     [ebp+var_40], 0
.text:000029A0
.text:000029A0 loc_29A0:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *):loc_29DAj
.text:000029A0                 cmp     [ebp+var_4C], 0
.text:000029A4                 jz      short loc_29DC
.text:000029A6                 mov     ecx, [ebp+var_4C]
.text:000029A9                 sub     ecx, 1
.text:000029AC                 mov     [ebp+var_4C], ecx
.text:000029AF                 mov     edx, [ebp+arg_4]
.text:000029B2                 mov     al, byte ptr [ebp+var_3C]
.text:000029B5                 mov     [edx], al
.text:000029B7                 mov     ecx, [ebp+arg_4]
.text:000029BA                 add     ecx, 1
.text:000029BD                 mov     [ebp+arg_4], ecx
.text:000029C0                 mov     edx, [ebp+arg_C]
.text:000029C3                 mov     eax, [edx]
.text:000029C5                 add     eax, 1
.text:000029C8                 mov     ecx, [ebp+arg_C]
.text:000029CB                 mov     [ecx], eax
.text:000029CD                 mov     edx, [ebp+arg_8]
.text:000029D0                 sub     edx, 1
.text:000029D3                 mov     [ebp+arg_8], edx
.text:000029D6                 jnz     short loc_29DA
.text:000029D8                 jmp     short loc_29DC
.text:000029DA ; ---------------------------------------------------------------------------
.text:000029DA
.text:000029DA loc_29DA:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+326j
.text:000029DA                 jmp     short loc_29A0
.text:000029DC ; ---------------------------------------------------------------------------
.text:000029DC
.text:000029DC loc_29DC:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+2F4j
.text:000029DC                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+328j
.text:000029DC                 mov     eax, [ebp+this]
.text:000029DF                 mov     ecx, [ebp+var_4C]
.text:000029E2                 mov     [eax+6FF0h], ecx
.text:000029E8                 jmp     short loc_2A2F
.text:000029EA ; ---------------------------------------------------------------------------
.text:000029EA
.text:000029EA loc_29EA:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+2E7j
.text:000029EA                 mov     edx, [ebp+var_4C]
.text:000029ED                 cmp     edx, [ebp+var_3C]
.text:000029F0                 jz      short loc_29F9
.text:000029F2                 mov     [ebp+var_40], 0
.text:000029F9
.text:000029F9 loc_29F9:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+340j
.text:000029F9                 mov     eax, [ebp+var_40]
.text:000029FC                 add     eax, 1
.text:000029FF                 mov     [ebp+var_40], eax
.text:00002A02                 mov     ecx, [ebp+var_4C]
.text:00002A05                 mov     [ebp+var_3C], ecx
.text:00002A08                 mov     edx, [ebp+arg_4]
.text:00002A0B                 mov     al, byte ptr [ebp+var_4C]
.text:00002A0E                 mov     [edx], al
.text:00002A10                 mov     ecx, [ebp+arg_4]
.text:00002A13                 add     ecx, 1
.text:00002A16                 mov     [ebp+arg_4], ecx
.text:00002A19                 mov     edx, [ebp+arg_C]
.text:00002A1C                 mov     eax, [edx]
.text:00002A1E                 add     eax, 1
.text:00002A21                 mov     ecx, [ebp+arg_C]
.text:00002A24                 mov     [ecx], eax
.text:00002A26                 mov     edx, [ebp+arg_8]
.text:00002A29                 sub     edx, 1
.text:00002A2C                 mov     [ebp+arg_8], edx
.text:00002A2F
.text:00002A2F loc_2A2F:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+338j
.text:00002A2F                 cmp     [ebp+arg_8], 0
.text:00002A33                 jz      short loc_2A3F
.text:00002A35                 cmp     [ebp+var_44], 0
.text:00002A39                 jnz     loc_296F
.text:00002A3F
.text:00002A3F loc_2A3F:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+383j
.text:00002A3F                 mov     eax, [ebp+this]
.text:00002A42                 mov     ecx, [ebp+var_38]
.text:00002A45                 mov     [eax+6FE8h], ecx
.text:00002A4B                 mov     edx, [ebp+this]
.text:00002A4E                 mov     eax, [ebp+var_3C]
.text:00002A51                 mov     [edx+6FECh], eax
.text:00002A57                 mov     ecx, [ebp+this]
.text:00002A5A                 mov     edx, [ebp+var_40]
.text:00002A5D                 mov     [ecx+6FF4h], edx
.text:00002A63                 mov     eax, [ebp+this]
.text:00002A66                 mov     ecx, [ebp+var_44]
.text:00002A69                 mov     [eax+6FF8h], ecx
.text:00002A6F                 xor     eax, eax
.text:00002A71                 jmp     short loc_2ABB
.text:00002A71 ?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z endp
.text:00002A71
.text:00002A73
.text:00002A73 ; =============== S U B R O U T I N E =======================================
.text:00002A73
.text:00002A73
.text:00002A73 __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$0 proc near
.text:00002A73                                         ; DATA XREF: .xdata$x:00003088o
.text:00002A73                 mov     edx, [ebp-54h]
.text:00002A76                 mov     eax, [edx]
.text:00002A78                 mov     [ebp-5Ch], eax
.text:00002A7B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002A82                 mov     eax, offset $LN31
.text:00002A87                 retn
.text:00002A87 __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$0 endp
.text:00002A87
.text:00002A88 ; ---------------------------------------------------------------------------
.text:00002A88                 mov     eax, offset __tryend$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$2
.text:00002A8D                 retn
.text:00002A8E
.text:00002A8E ; =============== S U B R O U T I N E =======================================
.text:00002A8E
.text:00002A8E
.text:00002A8E __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$1 proc near
.text:00002A8E                                         ; DATA XREF: .xdata$x:00003098o
.text:00002A8E                 mov     dword ptr [ebp-60h], 1
.text:00002A95                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002A9C                 mov     eax, offset $LN33
.text:00002AA1                 retn
.text:00002AA1 __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$1 endp
.text:00002AA1
.text:00002AA2 ; ---------------------------------------------------------------------------
.text:00002AA2                 mov     eax, offset __tryend$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$2
.text:00002AA7                 retn
.text:00002AA8 ; ---------------------------------------------------------------------------
.text:00002AA8
.text:00002AA8 __tryend$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$2:
.text:00002AA8                                         ; DATA XREF: .text:00002A88o
.text:00002AA8                                         ; .text:00002AA2o
.text:00002AA8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AAF                 jmp     short loc_2AB6
.text:00002AB1 ; ---------------------------------------------------------------------------
.text:00002AB1
.text:00002AB1 $LN33:                                  ; DATA XREF: __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$1+Eo
.text:00002AB1                 mov     eax, [ebp-60h]
.text:00002AB4                 jmp     short loc_2ABB
.text:00002AB6 ; ---------------------------------------------------------------------------
.text:00002AB6
.text:00002AB6 loc_2AB6:                               ; CODE XREF: .text:00002AAFj
.text:00002AB6                 jmp     short loc_2ABB
.text:00002AB8 ; ---------------------------------------------------------------------------
.text:00002AB8
.text:00002AB8 $LN31:                                  ; DATA XREF: __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$0+Fo
.text:00002AB8                 mov     eax, [ebp-5Ch]
.text:00002ABB ; START OF FUNCTION CHUNK FOR ?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.text:00002ABB
.text:00002ABB loc_2ABB:                               ; CODE XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+59j
.text:00002ABB                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+6Fj ...
.text:00002ABB                 push    edx
.text:00002ABC                 mov     ecx, ebp
.text:00002ABE                 push    eax
.text:00002ABF                 lea     edx, $LN40
.text:00002AC5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002ACA                 pop     eax
.text:00002ACB                 pop     edx
.text:00002ACC                 mov     ecx, [ebp+var_C]
.text:00002ACF                 mov     large fs:0, ecx
.text:00002AD6                 pop     ecx
.text:00002AD7                 pop     edi
.text:00002AD8                 pop     esi
.text:00002AD9                 pop     ebx
.text:00002ADA                 add     esp, 6Ch
.text:00002ADD                 cmp     ebp, esp
.text:00002ADF                 call    __RTC_CheckEsp
.text:00002AE4                 mov     esp, ebp
.text:00002AE6                 pop     ebp
.text:00002AE7                 retn    10h
.text:00002AE7 ; END OF FUNCTION CHUNK FOR ?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.text:00002AE7 ; ---------------------------------------------------------------------------
.text:00002AEA                 align 4
.text:00002AEC $LN40           dd 2                    ; DATA XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+40Fo
.text:00002AF0                 dd offset $LN39_0
.text:00002AF4 $LN39_0         dd 0FFFFFFD8h, 0Ch      ; DATA XREF: .text:00002AF0o
.text:00002AFC                 dd offset $LN36_0       ; "props"
.text:00002B00                 dd 0FFFFFFACh, 4
.text:00002B08                 dd offset $LN37_0
.text:00002B0C $LN37_0         db 65h, 0               ; DATA XREF: .text:00002B08o
.text:00002B0E $LN36_0         db 'props',0            ; DATA XREF: .text:00002AFCo
.text:00002B0E _text           ends
.text:00002B0E
.rtc$TMZ:00002B14 ; ===========================================================================
.rtc$TMZ:00002B14
.rtc$TMZ:00002B14 ; Segment type: Pure data
.rtc$TMZ:00002B14 ; Segment permissions: Read
.rtc$TMZ:00002B14 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002B14                 assume cs:_rtc$TMZ
.rtc$TMZ:00002B14                 ;org 2B14h
.rtc$TMZ:00002B14 ; COMDAT (pick any)
.rtc$TMZ:00002B14 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002B14 _rtc$TMZ        ends
.rtc$TMZ:00002B14
.rtc$IMZ:00002B18 ; ===========================================================================
.rtc$IMZ:00002B18
.rtc$IMZ:00002B18 ; Segment type: Pure data
.rtc$IMZ:00002B18 ; Segment permissions: Read
.rtc$IMZ:00002B18 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002B18                 assume cs:_rtc$IMZ
.rtc$IMZ:00002B18                 ;org 2B18h
.rtc$IMZ:00002B18 ; COMDAT (pick any)
.rtc$IMZ:00002B18 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002B18 _rtc$IMZ        ends
.rtc$IMZ:00002B18
.text:00002B1C ; ===========================================================================
.text:00002B1C
.text:00002B1C ; Segment type: Pure code
.text:00002B1C ; Segment permissions: Read/Execute
.text:00002B1C _text           segment para public 'CODE' use32
.text:00002B1C                 assume cs:_text
.text:00002B1C                 ;org 2B1Ch
.text:00002B1C ; COMDAT (pick any)
.text:00002B1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B1C
.text:00002B1C ; =============== S U B R O U T I N E =======================================
.text:00002B1C
.text:00002B1C ; Attributes: bp-based frame
.text:00002B1C
.text:00002B1C ; void __thiscall NCompress::CMtf8Decoder::StartInit(NCompress::CMtf8Decoder *__hidden this)
.text:00002B1C                 public ?StartInit@CMtf8Decoder@NCompress@@QAEXXZ
.text:00002B1C ?StartInit@CMtf8Decoder@NCompress@@QAEXXZ proc near
.text:00002B1C                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+98p
.text:00002B1C
.text:00002B1C Dst             = dword ptr -4
.text:00002B1C
.text:00002B1C                 push    ebp
.text:00002B1D                 mov     ebp, esp
.text:00002B1F                 push    ecx
.text:00002B20                 mov     [ebp+Dst], 0CCCCCCCCh
.text:00002B27                 mov     [ebp+Dst], ecx
.text:00002B2A                 push    100h            ; Size
.text:00002B2F                 push    0               ; Val
.text:00002B31                 mov     eax, [ebp+Dst]
.text:00002B34                 push    eax             ; Dst
.text:00002B35                 call    _memset
.text:00002B3A                 add     esp, 0Ch
.text:00002B3D                 add     esp, 4
.text:00002B40                 cmp     ebp, esp
.text:00002B42                 call    __RTC_CheckEsp
.text:00002B47                 mov     esp, ebp
.text:00002B49                 pop     ebp
.text:00002B4A                 retn
.text:00002B4A ?StartInit@CMtf8Decoder@NCompress@@QAEXXZ endp
.text:00002B4A
.text:00002B4A ; ---------------------------------------------------------------------------
.text:00002B4B                 align 4
.text:00002B4B _text           ends
.text:00002B4B
.text:00002B4C ; ===========================================================================
.text:00002B4C
.text:00002B4C ; Segment type: Pure code
.text:00002B4C ; Segment permissions: Read/Execute
.text:00002B4C _text           segment para public 'CODE' use32
.text:00002B4C                 assume cs:_text
.text:00002B4C                 ;org 2B4Ch
.text:00002B4C ; COMDAT (pick any)
.text:00002B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B4C
.text:00002B4C ; =============== S U B R O U T I N E =======================================
.text:00002B4C
.text:00002B4C ; Attributes: bp-based frame
.text:00002B4C
.text:00002B4C ; void __thiscall NCompress::CMtf8Decoder::Add(NCompress::CMtf8Decoder *this, unsigned int, unsigned __int8)
.text:00002B4C                 public ?Add@CMtf8Decoder@NCompress@@QAEXIE@Z
.text:00002B4C ?Add@CMtf8Decoder@NCompress@@QAEXIE@Z proc near
.text:00002B4C                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+15Ap
.text:00002B4C
.text:00002B4C var_4           = dword ptr -4
.text:00002B4C arg_0           = dword ptr  8
.text:00002B4C arg_4           = byte ptr  0Ch
.text:00002B4C
.text:00002B4C                 push    ebp
.text:00002B4D                 mov     ebp, esp
.text:00002B4F                 push    ecx
.text:00002B50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B57                 mov     [ebp+var_4], ecx
.text:00002B5A                 mov     eax, [ebp+arg_0]
.text:00002B5D                 shr     eax, 2
.text:00002B60                 movzx   edx, [ebp+arg_4]
.text:00002B64                 mov     ecx, [ebp+arg_0]
.text:00002B67                 and     ecx, 3
.text:00002B6A                 shl     ecx, 3
.text:00002B6D                 shl     edx, cl
.text:00002B6F                 mov     ecx, [ebp+var_4]
.text:00002B72                 or      edx, [ecx+eax*4]
.text:00002B75                 mov     eax, [ebp+arg_0]
.text:00002B78                 shr     eax, 2
.text:00002B7B                 mov     ecx, [ebp+var_4]
.text:00002B7E                 mov     [ecx+eax*4], edx
.text:00002B81                 mov     esp, ebp
.text:00002B83                 pop     ebp
.text:00002B84                 retn    8
.text:00002B84 ?Add@CMtf8Decoder@NCompress@@QAEXIE@Z endp
.text:00002B84
.text:00002B84 ; ---------------------------------------------------------------------------
.text:00002B87                 align 4
.text:00002B87 _text           ends
.text:00002B87
.text:00002B88 ; ===========================================================================
.text:00002B88
.text:00002B88 ; Segment type: Pure code
.text:00002B88 ; Segment permissions: Read/Execute
.text:00002B88 _text           segment para public 'CODE' use32
.text:00002B88                 assume cs:_text
.text:00002B88                 ;org 2B88h
.text:00002B88 ; COMDAT (pick any)
.text:00002B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B88
.text:00002B88 ; =============== S U B R O U T I N E =======================================
.text:00002B88
.text:00002B88 ; Attributes: bp-based frame
.text:00002B88
.text:00002B88 ; unsigned __int8 __thiscall NCompress::CMtf8Decoder::GetHead(NCompress::CMtf8Decoder *__hidden this)
.text:00002B88                 public ?GetHead@CMtf8Decoder@NCompress@@QBEEXZ
.text:00002B88 ?GetHead@CMtf8Decoder@NCompress@@QBEEXZ proc near
.text:00002B88                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+58Cp
.text:00002B88
.text:00002B88 var_4           = dword ptr -4
.text:00002B88
.text:00002B88                 push    ebp
.text:00002B89                 mov     ebp, esp
.text:00002B8B                 push    ecx
.text:00002B8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B93                 mov     [ebp+var_4], ecx
.text:00002B96                 mov     eax, [ebp+var_4]
.text:00002B99                 mov     al, [eax]
.text:00002B9B                 mov     esp, ebp
.text:00002B9D                 pop     ebp
.text:00002B9E                 retn
.text:00002B9E ?GetHead@CMtf8Decoder@NCompress@@QBEEXZ endp
.text:00002B9E
.text:00002B9E ; ---------------------------------------------------------------------------
.text:00002B9F                 align 10h
.text:00002B9F _text           ends
.text:00002B9F
.text:00002BA0 ; ===========================================================================
.text:00002BA0
.text:00002BA0 ; Segment type: Pure code
.text:00002BA0 ; Segment permissions: Read/Execute
.text:00002BA0 _text           segment para public 'CODE' use32
.text:00002BA0                 assume cs:_text
.text:00002BA0                 ;org 2BA0h
.text:00002BA0 ; COMDAT (pick any)
.text:00002BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BA0
.text:00002BA0 ; =============== S U B R O U T I N E =======================================
.text:00002BA0
.text:00002BA0 ; Attributes: bp-based frame
.text:00002BA0
.text:00002BA0 ; unsigned __int8 __thiscall NCompress::CMtf8Decoder::GetAndMove(NCompress::CMtf8Decoder *this, unsigned int)
.text:00002BA0                 public ?GetAndMove@CMtf8Decoder@NCompress@@QAEEI@Z
.text:00002BA0 ?GetAndMove@CMtf8Decoder@NCompress@@QAEEI@Z proc near
.text:00002BA0                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+616p
.text:00002BA0
.text:00002BA0 var_24          = dword ptr -24h
.text:00002BA0 var_20          = dword ptr -20h
.text:00002BA0 var_1C          = dword ptr -1Ch
.text:00002BA0 var_18          = dword ptr -18h
.text:00002BA0 var_14          = dword ptr -14h
.text:00002BA0 var_10          = dword ptr -10h
.text:00002BA0 var_C           = dword ptr -0Ch
.text:00002BA0 var_8           = dword ptr -8
.text:00002BA0 var_4           = dword ptr -4
.text:00002BA0 arg_0           = dword ptr  8
.text:00002BA0
.text:00002BA0                 push    ebp
.text:00002BA1                 mov     ebp, esp
.text:00002BA3                 sub     esp, 24h
.text:00002BA6                 mov     eax, 0CCCCCCCCh
.text:00002BAB                 mov     [ebp+var_24], eax
.text:00002BAE                 mov     [ebp+var_20], eax
.text:00002BB1                 mov     [ebp+var_1C], eax
.text:00002BB4                 mov     [ebp+var_18], eax
.text:00002BB7                 mov     [ebp+var_14], eax
.text:00002BBA                 mov     [ebp+var_10], eax
.text:00002BBD                 mov     [ebp+var_C], eax
.text:00002BC0                 mov     [ebp+var_8], eax
.text:00002BC3                 mov     [ebp+var_4], eax
.text:00002BC6                 mov     [ebp+var_4], ecx
.text:00002BC9                 mov     eax, [ebp+arg_0]
.text:00002BCC                 shr     eax, 2
.text:00002BCF                 mov     [ebp+var_8], eax
.text:00002BD2                 mov     ecx, [ebp+arg_0]
.text:00002BD5                 and     ecx, 3
.text:00002BD8                 shl     ecx, 3
.text:00002BDB                 mov     [ebp+arg_0], ecx
.text:00002BDE                 mov     edx, [ebp+var_8]
.text:00002BE1                 mov     eax, [ebp+var_4]
.text:00002BE4                 mov     edx, [eax+edx*4]
.text:00002BE7                 mov     ecx, [ebp+arg_0]
.text:00002BEA                 shr     edx, cl
.text:00002BEC                 and     edx, 0FFh
.text:00002BF2                 mov     [ebp+var_C], edx
.text:00002BF5                 mov     [ebp+var_10], 0
.text:00002BFC                 mov     eax, [ebp+var_8]
.text:00002BFF                 and     eax, 1
.text:00002C02                 jz      short loc_2C33
.text:00002C04                 mov     ecx, [ebp+var_4]
.text:00002C07                 mov     edx, [ecx]
.text:00002C09                 mov     [ebp+var_14], edx
.text:00002C0C                 mov     eax, [ebp+var_14]
.text:00002C0F                 shl     eax, 8
.text:00002C12                 or      eax, [ebp+var_C]
.text:00002C15                 mov     ecx, [ebp+var_4]
.text:00002C18                 mov     [ecx], eax
.text:00002C1A                 mov     edx, [ebp+var_14]
.text:00002C1D                 shr     edx, 18h
.text:00002C20                 mov     [ebp+var_C], edx
.text:00002C23                 mov     [ebp+var_10], 1
.text:00002C2A                 mov     eax, [ebp+var_8]
.text:00002C2D                 sub     eax, 1
.text:00002C30                 mov     [ebp+var_8], eax
.text:00002C33
.text:00002C33 loc_2C33:                               ; CODE XREF: NCompress::CMtf8Decoder::GetAndMove(uint)+62j
.text:00002C33                 jmp     short loc_2C3E
.text:00002C35 ; ---------------------------------------------------------------------------
.text:00002C35
.text:00002C35 loc_2C35:                               ; CODE XREF: NCompress::CMtf8Decoder::GetAndMove(uint)+F2j
.text:00002C35                 mov     ecx, [ebp+var_10]
.text:00002C38                 add     ecx, 2
.text:00002C3B                 mov     [ebp+var_10], ecx
.text:00002C3E
.text:00002C3E loc_2C3E:                               ; CODE XREF: NCompress::CMtf8Decoder::GetAndMove(uint):loc_2C33j
.text:00002C3E                 mov     edx, [ebp+var_10]
.text:00002C41                 cmp     edx, [ebp+var_8]
.text:00002C44                 jnb     short loc_2C94
.text:00002C46                 mov     eax, [ebp+var_10]
.text:00002C49                 mov     ecx, [ebp+var_4]
.text:00002C4C                 mov     edx, [ecx+eax*4]
.text:00002C4F                 mov     [ebp+var_18], edx
.text:00002C52                 mov     eax, [ebp+var_10]
.text:00002C55                 mov     ecx, [ebp+var_4]
.text:00002C58                 mov     edx, [ecx+eax*4+4]
.text:00002C5C                 mov     [ebp+var_1C], edx
.text:00002C5F                 mov     eax, [ebp+var_18]
.text:00002C62                 shl     eax, 8
.text:00002C65                 or      eax, [ebp+var_C]
.text:00002C68                 mov     ecx, [ebp+var_10]
.text:00002C6B                 mov     edx, [ebp+var_4]
.text:00002C6E                 mov     [edx+ecx*4], eax
.text:00002C71                 mov     eax, [ebp+var_1C]
.text:00002C74                 shl     eax, 8
.text:00002C77                 mov     ecx, [ebp+var_18]
.text:00002C7A                 shr     ecx, 18h
.text:00002C7D                 or      eax, ecx
.text:00002C7F                 mov     edx, [ebp+var_10]
.text:00002C82                 mov     ecx, [ebp+var_4]
.text:00002C85                 mov     [ecx+edx*4+4], eax
.text:00002C89                 mov     edx, [ebp+var_1C]
.text:00002C8C                 shr     edx, 18h
.text:00002C8F                 mov     [ebp+var_C], edx
.text:00002C92                 jmp     short loc_2C35
.text:00002C94 ; ---------------------------------------------------------------------------
.text:00002C94
.text:00002C94 loc_2C94:                               ; CODE XREF: NCompress::CMtf8Decoder::GetAndMove(uint)+A4j
.text:00002C94                 mov     eax, [ebp+var_10]
.text:00002C97                 mov     ecx, [ebp+var_4]
.text:00002C9A                 mov     edx, [ecx+eax*4]
.text:00002C9D                 mov     [ebp+var_20], edx
.text:00002CA0                 mov     eax, 100h
.text:00002CA5                 mov     ecx, [ebp+arg_0]
.text:00002CA8                 shl     eax, cl
.text:00002CAA                 sub     eax, 1
.text:00002CAD                 mov     [ebp+var_24], eax
.text:00002CB0                 mov     ecx, [ebp+var_24]
.text:00002CB3                 not     ecx
.text:00002CB5                 and     ecx, [ebp+var_20]
.text:00002CB8                 mov     edx, [ebp+var_20]
.text:00002CBB                 shl     edx, 8
.text:00002CBE                 or      edx, [ebp+var_C]
.text:00002CC1                 and     edx, [ebp+var_24]
.text:00002CC4                 or      ecx, edx
.text:00002CC6                 mov     eax, [ebp+var_10]
.text:00002CC9                 mov     edx, [ebp+var_4]
.text:00002CCC                 mov     [edx+eax*4], ecx
.text:00002CCF                 mov     eax, [ebp+var_4]
.text:00002CD2                 mov     al, [eax]
.text:00002CD4                 mov     esp, ebp
.text:00002CD6                 pop     ebp
.text:00002CD7                 retn    4
.text:00002CD7 ?GetAndMove@CMtf8Decoder@NCompress@@QAEEI@Z endp
.text:00002CD7
.text:00002CD7 ; ---------------------------------------------------------------------------
.text:00002CDA                 align 4
.text:00002CDA _text           ends
.text:00002CDA
.text$x:00002CDC ; ===========================================================================
.text$x:00002CDC
.text$x:00002CDC ; Segment type: Pure code
.text$x:00002CDC ; Segment permissions: Read/Execute
.text$x:00002CDC _text$x         segment para public 'CODE' use32
.text$x:00002CDC                 assume cs:_text$x
.text$x:00002CDC                 ;org 2CDCh
.text$x:00002CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002CDC
.text$x:00002CDC ; =============== S U B R O U T I N E =======================================
.text$x:00002CDC
.text$x:00002CDC
.text$x:00002CDC __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00002CDC                                         ; DATA XREF: .xdata$x:00002E40o
.text$x:00002CDC                 mov     ecx, [ebp-10h]
.text$x:00002CDF                 add     ecx, 10h        ; this
.text$x:00002CE2                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:00002CE2 __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00002CE2
.text$x:00002CE7
.text$x:00002CE7 ; =============== S U B R O U T I N E =======================================
.text$x:00002CE7
.text$x:00002CE7
.text$x:00002CE7 __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00002CE7                                         ; DATA XREF: .xdata$x:00002E48o
.text$x:00002CE7                 mov     ecx, [ebp-10h]
.text$x:00002CEA                 add     ecx, 138h       ; this
.text$x:00002CF0                 jmp     ??1CBase@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBase::~CBase(void)
.text$x:00002CF0 __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00002CF0
.text$x:00002CF5
.text$x:00002CF5 ; =============== S U B R O U T I N E =======================================
.text$x:00002CF5
.text$x:00002CF5
.text$x:00002CF5 __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00002CF5                                         ; DATA XREF: .xdata$x:00002E50o
.text$x:00002CF5                 mov     ecx, [ebp-10h]
.text$x:00002CF8                 add     ecx, 700Ch      ; this
.text$x:00002CFE                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002CFE __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00002CFE
.text$x:00002D03
.text$x:00002D03 ; =============== S U B R O U T I N E =======================================
.text$x:00002D03
.text$x:00002D03
.text$x:00002D03 __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00002D03                                         ; DATA XREF: .xdata$x:00002E58o
.text$x:00002D03                 mov     ecx, [ebp-10h]
.text$x:00002D06                 add     ecx, 7010h      ; this
.text$x:00002D0C                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00002D0C __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00002D0C
.text$x:00002D11
.text$x:00002D11 ; =============== S U B R O U T I N E =======================================
.text$x:00002D11
.text$x:00002D11
.text$x:00002D11 __ehhandler$??0CDecoder@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00002D11                                         ; DATA XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+5o
.text$x:00002D11
.text$x:00002D11 arg_4           = dword ptr  8
.text$x:00002D11
.text$x:00002D11                 mov     edx, [esp+arg_4]
.text$x:00002D15                 lea     eax, [edx+0Ch]
.text$x:00002D18                 mov     ecx, [edx-8]
.text$x:00002D1B                 xor     ecx, eax
.text$x:00002D1D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D22                 mov     eax, offset __ehfuncinfo$??0CDecoder@NBZip2@NCompress@@QAE@XZ
.text$x:00002D27                 jmp     ___CxxFrameHandler3
.text$x:00002D27 __ehhandler$??0CDecoder@NBZip2@NCompress@@QAE@XZ endp
.text$x:00002D27
.text$x:00002D2C
.text$x:00002D2C ; =============== S U B R O U T I N E =======================================
.text$x:00002D2C
.text$x:00002D2C
.text$x:00002D2C __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00002D2C                                         ; DATA XREF: .xdata$x:00002EA8o
.text$x:00002D2C                 mov     ecx, [ebp-10h]
.text$x:00002D2F                 add     ecx, 10h        ; this
.text$x:00002D32                 jmp     ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text$x:00002D32 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00002D32
.text$x:00002D37
.text$x:00002D37 ; =============== S U B R O U T I N E =======================================
.text$x:00002D37
.text$x:00002D37
.text$x:00002D37 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00002D37                                         ; DATA XREF: .xdata$x:00002EB0o
.text$x:00002D37                 mov     ecx, [ebp-10h]
.text$x:00002D3A                 add     ecx, 138h       ; this
.text$x:00002D40                 jmp     ??1CBase@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CBase::~CBase(void)
.text$x:00002D40 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00002D40
.text$x:00002D45
.text$x:00002D45 ; =============== S U B R O U T I N E =======================================
.text$x:00002D45
.text$x:00002D45
.text$x:00002D45 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00002D45                                         ; DATA XREF: .xdata$x:00002EB8o
.text$x:00002D45                 mov     ecx, [ebp-10h]
.text$x:00002D48                 add     ecx, 700Ch      ; this
.text$x:00002D4E                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002D4E __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00002D4E
.text$x:00002D53
.text$x:00002D53 ; =============== S U B R O U T I N E =======================================
.text$x:00002D53
.text$x:00002D53
.text$x:00002D53 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00002D53                                         ; DATA XREF: .xdata$x:00002EC0o
.text$x:00002D53                 mov     ecx, [ebp-10h]
.text$x:00002D56                 add     ecx, 7010h      ; this
.text$x:00002D5C                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00002D5C __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00002D5C
.text$x:00002D61
.text$x:00002D61 ; =============== S U B R O U T I N E =======================================
.text$x:00002D61
.text$x:00002D61
.text$x:00002D61 __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$4 proc near
.text$x:00002D61                                         ; DATA XREF: .xdata$x:00002EC8o
.text$x:00002D61                 mov     ecx, [ebp-10h]
.text$x:00002D64                 add     ecx, 7038h      ; this
.text$x:00002D6A                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002D6A __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$4 endp
.text$x:00002D6A
.text$x:00002D6F
.text$x:00002D6F ; =============== S U B R O U T I N E =======================================
.text$x:00002D6F
.text$x:00002D6F
.text$x:00002D6F __ehhandler$??1CDecoder@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00002D6F                                         ; DATA XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+5o
.text$x:00002D6F
.text$x:00002D6F arg_4           = dword ptr  8
.text$x:00002D6F
.text$x:00002D6F                 mov     edx, [esp+arg_4]
.text$x:00002D73                 lea     eax, [edx+0Ch]
.text$x:00002D76                 mov     ecx, [edx-8]
.text$x:00002D79                 xor     ecx, eax
.text$x:00002D7B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002D80                 mov     eax, offset __ehfuncinfo$??1CDecoder@NBZip2@NCompress@@QAE@XZ
.text$x:00002D85                 jmp     ___CxxFrameHandler3
.text$x:00002D85 __ehhandler$??1CDecoder@NBZip2@NCompress@@QAE@XZ endp
.text$x:00002D85
.text$x:00002D8A
.text$x:00002D8A ; =============== S U B R O U T I N E =======================================
.text$x:00002D8A
.text$x:00002D8A
.text$x:00002D8A __unwindfunclet$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$2 proc near
.text$x:00002D8A                                         ; DATA XREF: .xdata$x:00002EFCo
.text$x:00002D8A                 mov     eax, [ebp-34h]
.text$x:00002D8D                 push    eax             ; void *
.text$x:00002D8E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002D93                 pop     ecx
.text$x:00002D94                 retn
.text$x:00002D94 __unwindfunclet$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$2 endp
.text$x:00002D94
.text$x:00002D95
.text$x:00002D95 ; =============== S U B R O U T I N E =======================================
.text$x:00002D95
.text$x:00002D95
.text$x:00002D95 __ehhandler$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ proc near
.text$x:00002D95                                         ; DATA XREF: NCompress::NBZip2::CDecoder::Create(void)+5o
.text$x:00002D95
.text$x:00002D95 arg_4           = dword ptr  8
.text$x:00002D95
.text$x:00002D95                 mov     edx, [esp+arg_4]
.text$x:00002D99                 lea     eax, [edx+0Ch]
.text$x:00002D9C                 mov     ecx, [edx-44h]
.text$x:00002D9F                 xor     ecx, eax
.text$x:00002DA1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DA6                 mov     eax, offset __ehfuncinfo$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.text$x:00002DAB                 jmp     ___CxxFrameHandler3
.text$x:00002DAB __ehhandler$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ endp
.text$x:00002DAB
.text$x:00002DB0
.text$x:00002DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00002DB0
.text$x:00002DB0
.text$x:00002DB0 __unwindfunclet$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4 proc near
.text$x:00002DB0                                         ; DATA XREF: .xdata$x:00002F4Co
.text$x:00002DB0                 lea     ecx, [ebp-20h]  ; this
.text$x:00002DB3                 jmp     ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)
.text$x:00002DB3 __unwindfunclet$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4 endp
.text$x:00002DB3
.text$x:00002DB8
.text$x:00002DB8 ; =============== S U B R O U T I N E =======================================
.text$x:00002DB8
.text$x:00002DB8
.text$x:00002DB8 __ehhandler$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text$x:00002DB8                                         ; DATA XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+5o
.text$x:00002DB8
.text$x:00002DB8 arg_4           = dword ptr  8
.text$x:00002DB8
.text$x:00002DB8                 mov     edx, [esp+arg_4]
.text$x:00002DBC                 lea     eax, [edx+0Ch]
.text$x:00002DBF                 mov     ecx, [edx-70h]
.text$x:00002DC2                 xor     ecx, eax
.text$x:00002DC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DC9                 mov     eax, offset __ehfuncinfo$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text$x:00002DCE                 jmp     ___CxxFrameHandler3
.text$x:00002DCE __ehhandler$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text$x:00002DCE
.text$x:00002DD3
.text$x:00002DD3 ; =============== S U B R O U T I N E =======================================
.text$x:00002DD3
.text$x:00002DD3
.text$x:00002DD3 __ehhandler$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ proc near
.text$x:00002DD3                                         ; DATA XREF: NCompress::NBZip2::CState::ThreadFunc(void)+5o
.text$x:00002DD3
.text$x:00002DD3 arg_4           = dword ptr  8
.text$x:00002DD3
.text$x:00002DD3                 mov     edx, [esp+arg_4]
.text$x:00002DD7                 lea     eax, [edx+0Ch]
.text$x:00002DDA                 mov     ecx, [edx-80h]
.text$x:00002DDD                 xor     ecx, eax
.text$x:00002DDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DE4                 mov     eax, offset __ehfuncinfo$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.text$x:00002DE9                 jmp     ___CxxFrameHandler3
.text$x:00002DE9 __ehhandler$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ endp
.text$x:00002DE9
.text$x:00002DEE
.text$x:00002DEE ; =============== S U B R O U T I N E =======================================
.text$x:00002DEE
.text$x:00002DEE
.text$x:00002DEE __ehhandler$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z proc near
.text$x:00002DEE                                         ; DATA XREF: NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+5o
.text$x:00002DEE
.text$x:00002DEE arg_4           = dword ptr  8
.text$x:00002DEE
.text$x:00002DEE                 mov     edx, [esp+arg_4]
.text$x:00002DF2                 lea     eax, [edx+0Ch]
.text$x:00002DF5                 mov     ecx, [edx-70h]
.text$x:00002DF8                 xor     ecx, eax
.text$x:00002DFA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DFF                 mov     eax, offset __ehfuncinfo$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.text$x:00002E04                 jmp     ___CxxFrameHandler3
.text$x:00002E04 __ehhandler$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z endp
.text$x:00002E04
.text$x:00002E04 ; ---------------------------------------------------------------------------
.text$x:00002E09                 align 4
.text$x:00002E09 _text$x         ends
.text$x:00002E09
.rdata:00002E0C ; ===========================================================================
.rdata:00002E0C
.rdata:00002E0C ; Segment type: Pure data
.rdata:00002E0C ; Segment permissions: Read
.rdata:00002E0C _rdata          segment dword public 'DATA' use32
.rdata:00002E0C                 assume cs:_rdata
.rdata:00002E0C                 ;org 2E0Ch
.rdata:00002E0C ; COMDAT (pick largest)
.rdata:00002E0C                 dd offset ??_R4CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderMt'}
.rdata:00002E10                 public ??_7CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@
.rdata:00002E10 ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressSetCoderMt'}
.rdata:00002E10 ??_7CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ dd offset ?QueryInterface@CDecoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002E10                                         ; DATA XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+57o
.rdata:00002E10                                         ; NCompress::NBZip2::CDecoder::~CDecoder(void)+39o
.rdata:00002E10                                         ; [thunk]:NCompress::NBZip2::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00002E14                 dd offset ?AddRef@CDecoder@NBZip2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBZip2::CDecoder::AddRef`adjustor{4}' (void)
.rdata:00002E18                 dd offset ?Release@CDecoder@NBZip2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBZip2::CDecoder::Release`adjustor{4}' (void)
.rdata:00002E1C                 dd offset ?SetNumberOfThreads@CDecoder@NBZip2@NCompress@@UAGJI@Z ; NCompress::NBZip2::CDecoder::SetNumberOfThreads(uint)
.rdata:00002E1C _rdata          ends
.rdata:00002E1C
.rdata:00002E20 ; ===========================================================================
.rdata:00002E20
.rdata:00002E20 ; Segment type: Pure data
.rdata:00002E20 ; Segment permissions: Read
.rdata:00002E20 _rdata          segment dword public 'DATA' use32
.rdata:00002E20                 assume cs:_rdata
.rdata:00002E20                 ;org 2E20h
.rdata:00002E20 ; COMDAT (pick largest)
.rdata:00002E20                 dd offset ??_R4CDecoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00002E24                 public ??_7CDecoder@NBZip2@NCompress@@6BICompressCoder@@@
.rdata:00002E24 ; const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressCoder'}
.rdata:00002E24 ??_7CDecoder@NBZip2@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CDecoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002E24                                         ; DATA XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+4Eo
.rdata:00002E24                                         ; NCompress::NBZip2::CDecoder::~CDecoder(void)+30o
.rdata:00002E24                                         ; NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)
.rdata:00002E28                 dd offset ?AddRef@CDecoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CDecoder::AddRef(void)
.rdata:00002E2C                 dd offset ?Release@CDecoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CDecoder::Release(void)
.rdata:00002E30                 dd offset ?Code@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00002E34                 dd offset ?SetInStream@CDecoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NBZip2::CDecoder::SetInStream(ISequentialInStream *)
.rdata:00002E38                 dd offset ?ReleaseInStream@CDecoder@NBZip2@NCompress@@UAGJXZ ; NCompress::NBZip2::CDecoder::ReleaseInStream(void)
.rdata:00002E38 _rdata          ends
.rdata:00002E38
.xdata$x:00002E3C ; ===========================================================================
.xdata$x:00002E3C
.xdata$x:00002E3C ; Segment type: Pure data
.xdata$x:00002E3C ; Segment permissions: Read
.xdata$x:00002E3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002E3C                 assume cs:_xdata$x
.xdata$x:00002E3C                 ;org 2E3Ch
.xdata$x:00002E3C __unwindtable$??0CDecoder@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00002E3C                                         ; DATA XREF: .xdata$x:00002E64o
.xdata$x:00002E3D                 db 0FFh
.xdata$x:00002E3E                 db 0FFh
.xdata$x:00002E3F                 db 0FFh
.xdata$x:00002E40                 dd offset __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00002E44                 align 8
.xdata$x:00002E48                 dd offset __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00002E4C                 db    1
.xdata$x:00002E4D                 db    0
.xdata$x:00002E4E                 db    0
.xdata$x:00002E4F                 db    0
.xdata$x:00002E50                 dd offset __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00002E54                 db    2
.xdata$x:00002E55                 db    0
.xdata$x:00002E56                 db    0
.xdata$x:00002E57                 db    0
.xdata$x:00002E58                 dd offset __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00002E5C __ehfuncinfo$??0CDecoder@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00002E5C                                         ; DATA XREF: __ehhandler$??0CDecoder@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00002E5D                 db    5
.xdata$x:00002E5E                 db  93h ; ô
.xdata$x:00002E5F                 db  19h
.xdata$x:00002E60                 db    4
.xdata$x:00002E61                 db    0
.xdata$x:00002E62                 db    0
.xdata$x:00002E63                 db    0
.xdata$x:00002E64                 dd offset __unwindtable$??0CDecoder@NBZip2@NCompress@@QAE@XZ
.xdata$x:00002E68                 db    0
.xdata$x:00002E69                 db    0
.xdata$x:00002E6A                 db    0
.xdata$x:00002E6B                 db    0
.xdata$x:00002E6C                 db    0
.xdata$x:00002E6D                 db    0
.xdata$x:00002E6E                 db    0
.xdata$x:00002E6F                 db    0
.xdata$x:00002E70                 db    0
.xdata$x:00002E71                 db    0
.xdata$x:00002E72                 db    0
.xdata$x:00002E73                 db    0
.xdata$x:00002E74                 db    0
.xdata$x:00002E75                 db    0
.xdata$x:00002E76                 db    0
.xdata$x:00002E77                 db    0
.xdata$x:00002E78                 db    0
.xdata$x:00002E79                 db    0
.xdata$x:00002E7A                 db    0
.xdata$x:00002E7B                 db    0
.xdata$x:00002E7C                 db    1
.xdata$x:00002E7D                 db    0
.xdata$x:00002E7E                 db    0
.xdata$x:00002E7F                 db    0
.xdata$x:00002E80 __ehfuncinfo$??1CDecoder@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00002E80                                         ; DATA XREF: __ehhandler$??1CDecoder@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00002E81                 db    5
.xdata$x:00002E82                 db  93h ; ô
.xdata$x:00002E83                 db  19h
.xdata$x:00002E84                 db    5
.xdata$x:00002E85                 db    0
.xdata$x:00002E86                 db    0
.xdata$x:00002E87                 db    0
.xdata$x:00002E88                 dd offset __unwindtable$??1CDecoder@NBZip2@NCompress@@QAE@XZ
.xdata$x:00002E8C                 align 20h
.xdata$x:00002EA0                 db    1
.xdata$x:00002EA1                 db    0
.xdata$x:00002EA2                 db    0
.xdata$x:00002EA3                 db    0
.xdata$x:00002EA4 __unwindtable$??1CDecoder@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00002EA4                                         ; DATA XREF: .xdata$x:00002E88o
.xdata$x:00002EA5                 db 0FFh
.xdata$x:00002EA6                 db 0FFh
.xdata$x:00002EA7                 db 0FFh
.xdata$x:00002EA8                 dd offset __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00002EAC                 align 10h
.xdata$x:00002EB0                 dd offset __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00002EB4                 db    1
.xdata$x:00002EB5                 db    0
.xdata$x:00002EB6                 db    0
.xdata$x:00002EB7                 db    0
.xdata$x:00002EB8                 dd offset __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00002EBC                 db    2
.xdata$x:00002EBD                 db    0
.xdata$x:00002EBE                 db    0
.xdata$x:00002EBF                 db    0
.xdata$x:00002EC0                 dd offset __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00002EC4                 db    3
.xdata$x:00002EC5                 db    0
.xdata$x:00002EC6                 db    0
.xdata$x:00002EC7                 db    0
.xdata$x:00002EC8                 dd offset __unwindfunclet$??1CDecoder@NBZip2@NCompress@@QAE@XZ$4
.xdata$x:00002ECC __catchsym$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$3 dd offset unk_40
.xdata$x:00002ECC                                         ; DATA XREF: .xdata$x:00002EECo
.xdata$x:00002ED0                 db    0
.xdata$x:00002ED1                 db    0
.xdata$x:00002ED2                 db    0
.xdata$x:00002ED3                 db    0
.xdata$x:00002ED4                 db    0
.xdata$x:00002ED5                 db    0
.xdata$x:00002ED6                 db    0
.xdata$x:00002ED7                 db    0
.xdata$x:00002ED8                 dd offset __catch$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$0
.xdata$x:00002EDC __tryblocktable$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ db    0
.xdata$x:00002EDC                                         ; DATA XREF: .xdata$x:00002F18o
.xdata$x:00002EDD                 db    0
.xdata$x:00002EDE                 db    0
.xdata$x:00002EDF                 db    0
.xdata$x:00002EE0                 db    1
.xdata$x:00002EE1                 db    0
.xdata$x:00002EE2                 db    0
.xdata$x:00002EE3                 db    0
.xdata$x:00002EE4                 db    2
.xdata$x:00002EE5                 db    0
.xdata$x:00002EE6                 db    0
.xdata$x:00002EE7                 db    0
.xdata$x:00002EE8                 db    1
.xdata$x:00002EE9                 db    0
.xdata$x:00002EEA                 db    0
.xdata$x:00002EEB                 db    0
.xdata$x:00002EEC                 dd offset __catchsym$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$3
.xdata$x:00002EF0 __unwindtable$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ db 0FFh
.xdata$x:00002EF0                                         ; DATA XREF: .xdata$x:00002F10o
.xdata$x:00002EF1                 db 0FFh
.xdata$x:00002EF2                 db 0FFh
.xdata$x:00002EF3                 db 0FFh
.xdata$x:00002EF4                 db    0
.xdata$x:00002EF5                 db    0
.xdata$x:00002EF6                 db    0
.xdata$x:00002EF7                 db    0
.xdata$x:00002EF8                 db    0
.xdata$x:00002EF9                 db    0
.xdata$x:00002EFA                 db    0
.xdata$x:00002EFB                 db    0
.xdata$x:00002EFC                 dd offset __unwindfunclet$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$2
.xdata$x:00002F00                 db 0FFh
.xdata$x:00002F01                 db 0FFh
.xdata$x:00002F02                 db 0FFh
.xdata$x:00002F03                 db 0FFh
.xdata$x:00002F04                 db    0
.xdata$x:00002F05                 db    0
.xdata$x:00002F06                 db    0
.xdata$x:00002F07                 db    0
.xdata$x:00002F08 __ehfuncinfo$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ db  22h ; "
.xdata$x:00002F08                                         ; DATA XREF: __ehhandler$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ+11o
.xdata$x:00002F09                 db    5
.xdata$x:00002F0A                 db  93h ; ô
.xdata$x:00002F0B                 db  19h
.xdata$x:00002F0C                 db    3
.xdata$x:00002F0D                 db    0
.xdata$x:00002F0E                 db    0
.xdata$x:00002F0F                 db    0
.xdata$x:00002F10                 dd offset __unwindtable$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.xdata$x:00002F14                 db    1
.xdata$x:00002F15                 db    0
.xdata$x:00002F16                 db    0
.xdata$x:00002F17                 db    0
.xdata$x:00002F18                 dd offset __tryblocktable$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ
.xdata$x:00002F1C                 db    0
.xdata$x:00002F1D                 db    0
.xdata$x:00002F1E                 db    0
.xdata$x:00002F1F                 db    0
.xdata$x:00002F20                 db    0
.xdata$x:00002F21                 db    0
.xdata$x:00002F22                 db    0
.xdata$x:00002F23                 db    0
.xdata$x:00002F24                 db    0
.xdata$x:00002F25                 db    0
.xdata$x:00002F26                 db    0
.xdata$x:00002F27                 db    0
.xdata$x:00002F28                 db    1
.xdata$x:00002F29                 db    0
.xdata$x:00002F2A                 db    0
.xdata$x:00002F2B                 db    0
.xdata$x:00002F2C __tryblocktable$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db    0
.xdata$x:00002F2C                                         ; DATA XREF: .xdata$x:00002F68o
.xdata$x:00002F2D                 db    0
.xdata$x:00002F2E                 db    0
.xdata$x:00002F2F                 db    0
.xdata$x:00002F30                 db    1
.xdata$x:00002F31                 db    0
.xdata$x:00002F32                 db    0
.xdata$x:00002F33                 db    0
.xdata$x:00002F34                 db    2
.xdata$x:00002F35                 db    0
.xdata$x:00002F36                 db    0
.xdata$x:00002F37                 db    0
.xdata$x:00002F38                 db    3
.xdata$x:00002F39                 db    0
.xdata$x:00002F3A                 db    0
.xdata$x:00002F3B                 db    0
.xdata$x:00002F3C                 dd offset __catchsym$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5
.xdata$x:00002F40 __unwindtable$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00002F40                                         ; DATA XREF: .xdata$x:00002F60o
.xdata$x:00002F41                 db 0FFh
.xdata$x:00002F42                 db 0FFh
.xdata$x:00002F43                 db 0FFh
.xdata$x:00002F44                 db    0
.xdata$x:00002F45                 db    0
.xdata$x:00002F46                 db    0
.xdata$x:00002F47                 db    0
.xdata$x:00002F48                 db    0
.xdata$x:00002F49                 db    0
.xdata$x:00002F4A                 db    0
.xdata$x:00002F4B                 db    0
.xdata$x:00002F4C                 dd offset __unwindfunclet$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$4
.xdata$x:00002F50                 db 0FFh
.xdata$x:00002F51                 db 0FFh
.xdata$x:00002F52                 db 0FFh
.xdata$x:00002F53                 db 0FFh
.xdata$x:00002F54                 db    0
.xdata$x:00002F55                 db    0
.xdata$x:00002F56                 db    0
.xdata$x:00002F57                 db    0
.xdata$x:00002F58 __ehfuncinfo$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00002F58                                         ; DATA XREF: __ehhandler$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+11o
.xdata$x:00002F59                 db    5
.xdata$x:00002F5A                 db  93h ; ô
.xdata$x:00002F5B                 db  19h
.xdata$x:00002F5C                 db    3
.xdata$x:00002F5D                 db    0
.xdata$x:00002F5E                 db    0
.xdata$x:00002F5F                 db    0
.xdata$x:00002F60                 dd offset __unwindtable$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.xdata$x:00002F64                 db    1
.xdata$x:00002F65                 db    0
.xdata$x:00002F66                 db    0
.xdata$x:00002F67                 db    0
.xdata$x:00002F68                 dd offset __tryblocktable$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.xdata$x:00002F6C                 db    0
.xdata$x:00002F6D                 db    0
.xdata$x:00002F6E                 db    0
.xdata$x:00002F6F                 db    0
.xdata$x:00002F70                 db    0
.xdata$x:00002F71                 db    0
.xdata$x:00002F72                 db    0
.xdata$x:00002F73                 db    0
.xdata$x:00002F74                 db    0
.xdata$x:00002F75                 db    0
.xdata$x:00002F76                 db    0
.xdata$x:00002F77                 db    0
.xdata$x:00002F78                 db    1
.xdata$x:00002F79                 db    0
.xdata$x:00002F7A                 db    0
.xdata$x:00002F7B                 db    0
.xdata$x:00002F7C __catchsym$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$5 db    9
.xdata$x:00002F7C                                         ; DATA XREF: .xdata$x:00002F3Co
.xdata$x:00002F7D                 db    0
.xdata$x:00002F7E                 db    0
.xdata$x:00002F7F                 db    0
.xdata$x:00002F80                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00002F84                 db 0D0h ; -
.xdata$x:00002F85                 db 0FFh
.xdata$x:00002F86                 db 0FFh
.xdata$x:00002F87                 db 0FFh
.xdata$x:00002F88                 dd offset __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
.xdata$x:00002F8C                 db    9
.xdata$x:00002F8D                 db    0
.xdata$x:00002F8E                 db    0
.xdata$x:00002F8F                 db    0
.xdata$x:00002F90                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00002F94                 db 0C4h ; -
.xdata$x:00002F95                 db 0FFh
.xdata$x:00002F96                 db 0FFh
.xdata$x:00002F97                 db 0FFh
.xdata$x:00002F98                 dd offset __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1
.xdata$x:00002F9C                 dd offset unk_40
.xdata$x:00002FA0                 db    0
.xdata$x:00002FA1                 db    0
.xdata$x:00002FA2                 db    0
.xdata$x:00002FA3                 db    0
.xdata$x:00002FA4                 db    0
.xdata$x:00002FA5                 db    0
.xdata$x:00002FA6                 db    0
.xdata$x:00002FA7                 db    0
.xdata$x:00002FA8                 dd offset __catch$?CodeReal@CDecoder@NBZip2@NCompress@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$2
.xdata$x:00002FAC __catchsym$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$7 db    9
.xdata$x:00002FAC                                         ; DATA XREF: .xdata$x:00003054o
.xdata$x:00002FAD                 db    0
.xdata$x:00002FAE                 db    0
.xdata$x:00002FAF                 db    0
.xdata$x:00002FB0                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00002FB4                 db 0A0h ; á
.xdata$x:00002FB5                 db 0FFh
.xdata$x:00002FB6                 db 0FFh
.xdata$x:00002FB7                 db 0FFh
.xdata$x:00002FB8                 dd offset __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$3
.xdata$x:00002FBC                 dd offset unk_40
.xdata$x:00002FC0                 db    0
.xdata$x:00002FC1                 db    0
.xdata$x:00002FC2                 db    0
.xdata$x:00002FC3                 db    0
.xdata$x:00002FC4                 db    0
.xdata$x:00002FC5                 db    0
.xdata$x:00002FC6                 db    0
.xdata$x:00002FC7                 db    0
.xdata$x:00002FC8                 dd offset __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$4
.xdata$x:00002FCC __catchsym$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$6 db    9
.xdata$x:00002FCC                                         ; DATA XREF: .xdata$x:00003040o
.xdata$x:00002FCD                 db    0
.xdata$x:00002FCE                 db    0
.xdata$x:00002FCF                 db    0
.xdata$x:00002FD0                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00002FD4                 db 0B0h ; ¦
.xdata$x:00002FD5                 db 0FFh
.xdata$x:00002FD6                 db 0FFh
.xdata$x:00002FD7                 db 0FFh
.xdata$x:00002FD8                 dd offset __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$0
.xdata$x:00002FDC                 dd offset unk_40
.xdata$x:00002FE0                 db    0
.xdata$x:00002FE1                 db    0
.xdata$x:00002FE2                 db    0
.xdata$x:00002FE3                 db    0
.xdata$x:00002FE4                 db    0
.xdata$x:00002FE5                 db    0
.xdata$x:00002FE6                 db    0
.xdata$x:00002FE7                 db    0
.xdata$x:00002FE8                 dd offset __catch$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$1
.xdata$x:00002FEC __unwindtable$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ db 0FFh
.xdata$x:00002FEC                                         ; DATA XREF: .xdata$x:00003014o
.xdata$x:00002FED                 db 0FFh
.xdata$x:00002FEE                 db 0FFh
.xdata$x:00002FEF                 db 0FFh
.xdata$x:00002FF0                 db    0
.xdata$x:00002FF1                 db    0
.xdata$x:00002FF2                 db    0
.xdata$x:00002FF3                 db    0
.xdata$x:00002FF4                 db 0FFh
.xdata$x:00002FF5                 db 0FFh
.xdata$x:00002FF6                 db 0FFh
.xdata$x:00002FF7                 db 0FFh
.xdata$x:00002FF8                 db    0
.xdata$x:00002FF9                 db    0
.xdata$x:00002FFA                 db    0
.xdata$x:00002FFB                 db    0
.xdata$x:00002FFC                 db 0FFh
.xdata$x:00002FFD                 db 0FFh
.xdata$x:00002FFE                 db 0FFh
.xdata$x:00002FFF                 db 0FFh
.xdata$x:00003000                 db    0
.xdata$x:00003001                 db    0
.xdata$x:00003002                 db    0
.xdata$x:00003003                 db    0
.xdata$x:00003004                 db 0FFh
.xdata$x:00003005                 db 0FFh
.xdata$x:00003006                 db 0FFh
.xdata$x:00003007                 db 0FFh
.xdata$x:00003008                 db    0
.xdata$x:00003009                 db    0
.xdata$x:0000300A                 db    0
.xdata$x:0000300B                 db    0
.xdata$x:0000300C __ehfuncinfo$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ db  22h ; "
.xdata$x:0000300C                                         ; DATA XREF: __ehhandler$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ+11o
.xdata$x:0000300D                 db    5
.xdata$x:0000300E                 db  93h ; ô
.xdata$x:0000300F                 db  19h
.xdata$x:00003010                 db    4
.xdata$x:00003011                 db    0
.xdata$x:00003012                 db    0
.xdata$x:00003013                 db    0
.xdata$x:00003014                 dd offset __unwindtable$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.xdata$x:00003018                 db    2
.xdata$x:00003019                 db    0
.xdata$x:0000301A                 db    0
.xdata$x:0000301B                 db    0
.xdata$x:0000301C                 dd offset __tryblocktable$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ
.xdata$x:00003020                 db    0
.xdata$x:00003021                 db    0
.xdata$x:00003022                 db    0
.xdata$x:00003023                 db    0
.xdata$x:00003024                 db    0
.xdata$x:00003025                 db    0
.xdata$x:00003026                 db    0
.xdata$x:00003027                 db    0
.xdata$x:00003028                 db    0
.xdata$x:00003029                 db    0
.xdata$x:0000302A                 db    0
.xdata$x:0000302B                 db    0
.xdata$x:0000302C                 db    1
.xdata$x:0000302D                 db    0
.xdata$x:0000302E                 db    0
.xdata$x:0000302F                 db    0
.xdata$x:00003030 __tryblocktable$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ db    0
.xdata$x:00003030                                         ; DATA XREF: .xdata$x:0000301Co
.xdata$x:00003031                 db    0
.xdata$x:00003032                 db    0
.xdata$x:00003033                 db    0
.xdata$x:00003034                 db    0
.xdata$x:00003035                 db    0
.xdata$x:00003036                 db    0
.xdata$x:00003037                 db    0
.xdata$x:00003038                 db    1
.xdata$x:00003039                 db    0
.xdata$x:0000303A                 db    0
.xdata$x:0000303B                 db    0
.xdata$x:0000303C                 db    2
.xdata$x:0000303D                 db    0
.xdata$x:0000303E                 db    0
.xdata$x:0000303F                 db    0
.xdata$x:00003040                 dd offset __catchsym$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$6
.xdata$x:00003044                 db    2
.xdata$x:00003045                 db    0
.xdata$x:00003046                 db    0
.xdata$x:00003047                 db    0
.xdata$x:00003048                 db    2
.xdata$x:00003049                 db    0
.xdata$x:0000304A                 db    0
.xdata$x:0000304B                 db    0
.xdata$x:0000304C                 db    3
.xdata$x:0000304D                 db    0
.xdata$x:0000304E                 db    0
.xdata$x:0000304F                 db    0
.xdata$x:00003050                 db    2
.xdata$x:00003051                 db    0
.xdata$x:00003052                 db    0
.xdata$x:00003053                 db    0
.xdata$x:00003054                 dd offset __catchsym$?ThreadFunc@CState@NBZip2@NCompress@@QAEXXZ$7
.xdata$x:00003058 __unwindtable$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z db 0FFh
.xdata$x:00003058                                         ; DATA XREF: .xdata$x:000030A4o
.xdata$x:00003059                 db 0FFh
.xdata$x:0000305A                 db 0FFh
.xdata$x:0000305B                 db 0FFh
.xdata$x:0000305C                 db    0
.xdata$x:0000305D                 db    0
.xdata$x:0000305E                 db    0
.xdata$x:0000305F                 db    0
.xdata$x:00003060                 db 0FFh
.xdata$x:00003061                 db 0FFh
.xdata$x:00003062                 db 0FFh
.xdata$x:00003063                 db 0FFh
.xdata$x:00003064                 db    0
.xdata$x:00003065                 db    0
.xdata$x:00003066                 db    0
.xdata$x:00003067                 db    0
.xdata$x:00003068 __tryblocktable$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z db    0
.xdata$x:00003068                                         ; DATA XREF: .xdata$x:000030ACo
.xdata$x:00003069                 db    0
.xdata$x:0000306A                 db    0
.xdata$x:0000306B                 db    0
.xdata$x:0000306C                 db    0
.xdata$x:0000306D                 db    0
.xdata$x:0000306E                 db    0
.xdata$x:0000306F                 db    0
.xdata$x:00003070                 db    1
.xdata$x:00003071                 db    0
.xdata$x:00003072                 db    0
.xdata$x:00003073                 db    0
.xdata$x:00003074                 db    2
.xdata$x:00003075                 db    0
.xdata$x:00003076                 db    0
.xdata$x:00003077                 db    0
.xdata$x:00003078                 dd offset __catchsym$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$3
.xdata$x:0000307C __catchsym$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$3 db    9
.xdata$x:0000307C                                         ; DATA XREF: .xdata$x:00003078o
.xdata$x:0000307D                 db    0
.xdata$x:0000307E                 db    0
.xdata$x:0000307F                 db    0
.xdata$x:00003080                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00003084                 db 0ACh ; ¼
.xdata$x:00003085                 db 0FFh
.xdata$x:00003086                 db 0FFh
.xdata$x:00003087                 db 0FFh
.xdata$x:00003088                 dd offset __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$0
.xdata$x:0000308C                 dd offset unk_40
.xdata$x:00003090                 db    0
.xdata$x:00003091                 db    0
.xdata$x:00003092                 db    0
.xdata$x:00003093                 db    0
.xdata$x:00003094                 db    0
.xdata$x:00003095                 db    0
.xdata$x:00003096                 db    0
.xdata$x:00003097                 db    0
.xdata$x:00003098                 dd offset __catch$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z$1
.xdata$x:0000309C __ehfuncinfo$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z db  22h ; "
.xdata$x:0000309C                                         ; DATA XREF: __ehhandler$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z+11o
.xdata$x:0000309D                 db    5
.xdata$x:0000309E                 db  93h ; ô
.xdata$x:0000309F                 db  19h
.xdata$x:000030A0                 db    2
.xdata$x:000030A1                 db    0
.xdata$x:000030A2                 db    0
.xdata$x:000030A3                 db    0
.xdata$x:000030A4                 dd offset __unwindtable$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.xdata$x:000030A8                 db    1
.xdata$x:000030A9                 db    0
.xdata$x:000030AA                 db    0
.xdata$x:000030AB                 db    0
.xdata$x:000030AC                 dd offset __tryblocktable$?Read@CNsisDecoder@NBZip2@NCompress@@UAGJPAXIPAI@Z
.xdata$x:000030B0                 db    0
.xdata$x:000030B1                 db    0
.xdata$x:000030B2                 db    0
.xdata$x:000030B3                 db    0
.xdata$x:000030B4                 db    0
.xdata$x:000030B5                 db    0
.xdata$x:000030B6                 db    0
.xdata$x:000030B7                 db    0
.xdata$x:000030B8                 db    0
.xdata$x:000030B9                 db    0
.xdata$x:000030BA                 db    0
.xdata$x:000030BB                 db    0
.xdata$x:000030BC                 db    1
.xdata$x:000030BD                 db    0
.xdata$x:000030BE                 db    0
.xdata$x:000030BF                 db    0
.xdata$x:000030BF _xdata$x        ends
.xdata$x:000030BF
.rdata$r:000030C0 ; ===========================================================================
.rdata$r:000030C0
.rdata$r:000030C0 ; Segment type: Pure data
.rdata$r:000030C0 ; Segment permissions: Read
.rdata$r:000030C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000030C0                 assume cs:_rdata$r
.rdata$r:000030C0                 ;org 30C0h
.rdata$r:000030C0 ; COMDAT (pick any)
.rdata$r:000030C0                 public ??_R4CDecoder@NBZip2@NCompress@@6BICompressCoder@@@
.rdata$r:000030C0 ; const NCompress::NBZip2::CDecoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000030C0 ??_R4CDecoder@NBZip2@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000030C0                                         ; DATA XREF: .rdata:00002E20o
.rdata$r:000030C1                 db    0
.rdata$r:000030C2                 db    0
.rdata$r:000030C3                 db    0
.rdata$r:000030C4                 db    0
.rdata$r:000030C5                 db    0
.rdata$r:000030C6                 db    0
.rdata$r:000030C7                 db    0
.rdata$r:000030C8                 db    0
.rdata$r:000030C9                 db    0
.rdata$r:000030CA                 db    0
.rdata$r:000030CB                 db    0
.rdata$r:000030CC                 dd offset ??_R0?AVCDecoder@NBZip2@NCompress@@@8 ; NCompress::NBZip2::CDecoder `RTTI Type Descriptor'
.rdata$r:000030D0                 dd offset ??_R3CDecoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000030D0 _rdata$r        ends
.rdata$r:000030D0
.data:000030D4 ; ===========================================================================
.data:000030D4
.data:000030D4 ; Segment type: Pure data
.data:000030D4 ; Segment permissions: Read/Write
.data:000030D4 _data           segment dword public 'DATA' use32
.data:000030D4                 assume cs:_data
.data:000030D4                 ;org 30D4h
.data:000030D4 ; COMDAT (pick any)
.data:000030D4                 public ??_R0?AVCDecoder@NBZip2@NCompress@@@8
.data:000030D4 ; class NCompress::NBZip2::CDecoder `RTTI Type Descriptor'
.data:000030D4 ??_R0?AVCDecoder@NBZip2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000030D4                                         ; DATA XREF: .rdata$r:000030CCo
.data:000030D4                                         ; .rdata$r:NCompress::NBZip2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000030D4                                         ; const type_info::`vftable'
.data:000030D8                 db    0
.data:000030D9                 db    0
.data:000030DA                 db    0
.data:000030DB                 db    0
.data:000030DC                 db  2Eh ; .
.data:000030DD                 db  3Fh ; ?
.data:000030DE                 db  41h ; A
.data:000030DF                 db  56h ; V
.data:000030E0                 db  43h ; C
.data:000030E1                 db  44h ; D
.data:000030E2                 db  65h ; e
.data:000030E3                 db  63h ; c
.data:000030E4                 db  6Fh ; o
.data:000030E5                 db  64h ; d
.data:000030E6                 db  65h ; e
.data:000030E7                 db  72h ; r
.data:000030E8                 db  40h ; @
.data:000030E9                 db  4Eh ; N
.data:000030EA                 db  42h ; B
.data:000030EB                 db  5Ah ; Z
.data:000030EC                 db  69h ; i
.data:000030ED                 db  70h ; p
.data:000030EE                 db  32h ; 2
.data:000030EF                 db  40h ; @
.data:000030F0                 db  4Eh ; N
.data:000030F1                 db  43h ; C
.data:000030F2                 db  6Fh ; o
.data:000030F3                 db  6Dh ; m
.data:000030F4                 db  70h ; p
.data:000030F5                 db  72h ; r
.data:000030F6                 db  65h ; e
.data:000030F7                 db  73h ; s
.data:000030F8                 db  73h ; s
.data:000030F9                 db  40h ; @
.data:000030FA                 db  40h ; @
.data:000030FB                 db    0
.data:000030FB _data           ends
.data:000030FB
.rdata$r:000030FC ; ===========================================================================
.rdata$r:000030FC
.rdata$r:000030FC ; Segment type: Pure data
.rdata$r:000030FC ; Segment permissions: Read
.rdata$r:000030FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000030FC                 assume cs:_rdata$r
.rdata$r:000030FC                 ;org 30FCh
.rdata$r:000030FC ; COMDAT (pick any)
.rdata$r:000030FC                 public ??_R3CDecoder@NBZip2@NCompress@@8
.rdata$r:000030FC ; NCompress::NBZip2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000030FC ??_R3CDecoder@NBZip2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:000030D0o
.rdata$r:000030FC                                         ; .rdata$r:00003140o ...
.rdata$r:000030FD                 db    0
.rdata$r:000030FE                 db    0
.rdata$r:000030FF                 db    0
.rdata$r:00003100                 db    5
.rdata$r:00003101                 db    0
.rdata$r:00003102                 db    0
.rdata$r:00003103                 db    0
.rdata$r:00003104                 db    6
.rdata$r:00003105                 db    0
.rdata$r:00003106                 db    0
.rdata$r:00003107                 db    0
.rdata$r:00003108                 dd offset ??_R2CDecoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CDecoder::`RTTI Base Class Array'
.rdata$r:00003108 _rdata$r        ends
.rdata$r:00003108
.rdata$r:0000310C ; ===========================================================================
.rdata$r:0000310C
.rdata$r:0000310C ; Segment type: Pure data
.rdata$r:0000310C ; Segment permissions: Read
.rdata$r:0000310C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000310C                 assume cs:_rdata$r
.rdata$r:0000310C                 ;org 310Ch
.rdata$r:0000310C ; COMDAT (pick any)
.rdata$r:0000310C                 public ??_R2CDecoder@NBZip2@NCompress@@8
.rdata$r:0000310C ; NCompress::NBZip2::CDecoder::`RTTI Base Class Array'
.rdata$r:0000310C ??_R2CDecoder@NBZip2@NCompress@@8 dd offset ??_R1A@?0A@EA@CDecoder@NBZip2@NCompress@@8
.rdata$r:0000310C                                         ; DATA XREF: .rdata$r:00003108o
.rdata$r:0000310C                                         ; NCompress::NBZip2::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003110                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003114                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003118                 dd offset ??_R13?0A@EA@ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:0000311C                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003120                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003124                 db    0
.rdata$r:00003125                 align 4
.rdata$r:00003125 _rdata$r        ends
.rdata$r:00003125
.rdata$r:00003128 ; ===========================================================================
.rdata$r:00003128
.rdata$r:00003128 ; Segment type: Pure data
.rdata$r:00003128 ; Segment permissions: Read
.rdata$r:00003128 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003128                 assume cs:_rdata$r
.rdata$r:00003128                 ;org 3128h
.rdata$r:00003128 ; COMDAT (pick any)
.rdata$r:00003128                 public ??_R1A@?0A@EA@CDecoder@NBZip2@NCompress@@8
.rdata$r:00003128 ; NCompress::NBZip2::CDecoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003128 ??_R1A@?0A@EA@CDecoder@NBZip2@NCompress@@8 dd offset ??_R0?AVCDecoder@NBZip2@NCompress@@@8
.rdata$r:00003128                                         ; DATA XREF: .rdata$r:NCompress::NBZip2::CDecoder::`RTTI Base Class Array'o
.rdata$r:00003128                                         ; NCompress::NBZip2::CDecoder `RTTI Type Descriptor'
.rdata$r:0000312C                 db    5
.rdata$r:0000312D                 db    0
.rdata$r:0000312E                 db    0
.rdata$r:0000312F                 db    0
.rdata$r:00003130                 db    0
.rdata$r:00003131                 db    0
.rdata$r:00003132                 db    0
.rdata$r:00003133                 db    0
.rdata$r:00003134                 db 0FFh
.rdata$r:00003135                 db 0FFh
.rdata$r:00003136                 db 0FFh
.rdata$r:00003137                 db 0FFh
.rdata$r:00003138                 db    0
.rdata$r:00003139                 db    0
.rdata$r:0000313A                 db    0
.rdata$r:0000313B                 db    0
.rdata$r:0000313C                 db  40h ; @
.rdata$r:0000313D                 db    0
.rdata$r:0000313E                 db    0
.rdata$r:0000313F                 db    0
.rdata$r:00003140                 dd offset ??_R3CDecoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003140 _rdata$r        ends
.rdata$r:00003140
.rdata$r:00003144 ; ===========================================================================
.rdata$r:00003144
.rdata$r:00003144 ; Segment type: Pure data
.rdata$r:00003144 ; Segment permissions: Read
.rdata$r:00003144 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003144                 assume cs:_rdata$r
.rdata$r:00003144                 ;org 3144h
.rdata$r:00003144 ; COMDAT (pick any)
.rdata$r:00003144                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00003144 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003144 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00003144                                         ; DATA XREF: .rdata$r:00003110o
.rdata$r:00003144                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00003144                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00003148                 db    1
.rdata$r:00003149                 db    0
.rdata$r:0000314A                 db    0
.rdata$r:0000314B                 db    0
.rdata$r:0000314C                 db    0
.rdata$r:0000314D                 db    0
.rdata$r:0000314E                 db    0
.rdata$r:0000314F                 db    0
.rdata$r:00003150                 db 0FFh
.rdata$r:00003151                 db 0FFh
.rdata$r:00003152                 db 0FFh
.rdata$r:00003153                 db 0FFh
.rdata$r:00003154                 db    0
.rdata$r:00003155                 db    0
.rdata$r:00003156                 db    0
.rdata$r:00003157                 db    0
.rdata$r:00003158                 db  40h ; @
.rdata$r:00003159                 db    0
.rdata$r:0000315A                 db    0
.rdata$r:0000315B                 db    0
.rdata$r:0000315C                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000315C _rdata$r        ends
.rdata$r:0000315C
.data:00003160 ; ===========================================================================
.data:00003160
.data:00003160 ; Segment type: Pure data
.data:00003160 ; Segment permissions: Read/Write
.data:00003160 _data           segment dword public 'DATA' use32
.data:00003160                 assume cs:_data
.data:00003160                 ;org 3160h
.data:00003160 ; COMDAT (pick any)
.data:00003160                 public ??_R0?AUICompressCoder@@@8
.data:00003160 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00003160 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00003160                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003160                                         ; .rdata$r:000037D4o
.data:00003160                                         ; const type_info::`vftable'
.data:00003164                 align 8
.data:00003168 a_?auicompressc db '.?AUICompressCoder@@',0
.data:0000317D                 align 10h
.data:0000317D _data           ends
.data:0000317D
.rdata$r:00003180 ; ===========================================================================
.rdata$r:00003180
.rdata$r:00003180 ; Segment type: Pure data
.rdata$r:00003180 ; Segment permissions: Read
.rdata$r:00003180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003180                 assume cs:_rdata$r
.rdata$r:00003180                 ;org 3180h
.rdata$r:00003180 ; COMDAT (pick any)
.rdata$r:00003180                 public ??_R3ICompressCoder@@8
.rdata$r:00003180 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003180 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:0000315Co
.rdata$r:00003180                                         ; .rdata$r:000037D8o
.rdata$r:00003181                 db    0
.rdata$r:00003182                 db    0
.rdata$r:00003183                 db    0
.rdata$r:00003184                 db    0
.rdata$r:00003185                 db    0
.rdata$r:00003186                 db    0
.rdata$r:00003187                 db    0
.rdata$r:00003188                 db    2
.rdata$r:00003189                 db    0
.rdata$r:0000318A                 db    0
.rdata$r:0000318B                 db    0
.rdata$r:0000318C                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:0000318C _rdata$r        ends
.rdata$r:0000318C
.rdata$r:00003190 ; ===========================================================================
.rdata$r:00003190
.rdata$r:00003190 ; Segment type: Pure data
.rdata$r:00003190 ; Segment permissions: Read
.rdata$r:00003190 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003190                 assume cs:_rdata$r
.rdata$r:00003190                 ;org 3190h
.rdata$r:00003190 ; COMDAT (pick any)
.rdata$r:00003190                 public ??_R2ICompressCoder@@8
.rdata$r:00003190 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00003190 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00003190                                         ; DATA XREF: .rdata$r:0000318Co
.rdata$r:00003190                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003194                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003198                 db    0
.rdata$r:00003199                 align 4
.rdata$r:00003199 _rdata$r        ends
.rdata$r:00003199
.rdata$r:0000319C ; ===========================================================================
.rdata$r:0000319C
.rdata$r:0000319C ; Segment type: Pure data
.rdata$r:0000319C ; Segment permissions: Read
.rdata$r:0000319C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000319C                 assume cs:_rdata$r
.rdata$r:0000319C                 ;org 319Ch
.rdata$r:0000319C ; COMDAT (pick any)
.rdata$r:0000319C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000319C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000319C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000319C                                         ; DATA XREF: .rdata$r:00003194o
.rdata$r:0000319C                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:0000319C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000031A0                 db    0
.rdata$r:000031A1                 db    0
.rdata$r:000031A2                 db    0
.rdata$r:000031A3                 db    0
.rdata$r:000031A4                 db    0
.rdata$r:000031A5                 db    0
.rdata$r:000031A6                 db    0
.rdata$r:000031A7                 db    0
.rdata$r:000031A8                 db 0FFh
.rdata$r:000031A9                 db 0FFh
.rdata$r:000031AA                 db 0FFh
.rdata$r:000031AB                 db 0FFh
.rdata$r:000031AC                 db    0
.rdata$r:000031AD                 db    0
.rdata$r:000031AE                 db    0
.rdata$r:000031AF                 db    0
.rdata$r:000031B0                 db  40h ; @
.rdata$r:000031B1                 db    0
.rdata$r:000031B2                 db    0
.rdata$r:000031B3                 db    0
.rdata$r:000031B4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000031B4 _rdata$r        ends
.rdata$r:000031B4
.data:000031B8 ; ===========================================================================
.data:000031B8
.data:000031B8 ; Segment type: Pure data
.data:000031B8 ; Segment permissions: Read/Write
.data:000031B8 _data           segment dword public 'DATA' use32
.data:000031B8                 assume cs:_data
.data:000031B8                 ;org 31B8h
.data:000031B8 ; COMDAT (pick any)
.data:000031B8                 public ??_R0?AUIUnknown@@@8
.data:000031B8 ; struct IUnknown `RTTI Type Descriptor'
.data:000031B8 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000031B8                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000031B8                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000031B8                                         ; const type_info::`vftable'
.data:000031BC                 align 10h
.data:000031C0 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:000031CF                 align 10h
.data:000031CF _data           ends
.data:000031CF
.rdata$r:000031D0 ; ===========================================================================
.rdata$r:000031D0
.rdata$r:000031D0 ; Segment type: Pure data
.rdata$r:000031D0 ; Segment permissions: Read
.rdata$r:000031D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000031D0                 assume cs:_rdata$r
.rdata$r:000031D0                 ;org 31D0h
.rdata$r:000031D0 ; COMDAT (pick any)
.rdata$r:000031D0                 public ??_R3IUnknown@@8
.rdata$r:000031D0 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000031D0 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000031B4o
.rdata$r:000031D0                                         ; .rdata$r:00003200o ...
.rdata$r:000031D1                 db    0
.rdata$r:000031D2                 db    0
.rdata$r:000031D3                 db    0
.rdata$r:000031D4                 db    0
.rdata$r:000031D5                 db    0
.rdata$r:000031D6                 db    0
.rdata$r:000031D7                 db    0
.rdata$r:000031D8                 db    1
.rdata$r:000031D9                 db    0
.rdata$r:000031DA                 db    0
.rdata$r:000031DB                 db    0
.rdata$r:000031DC                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000031DC _rdata$r        ends
.rdata$r:000031DC
.rdata$r:000031E0 ; ===========================================================================
.rdata$r:000031E0
.rdata$r:000031E0 ; Segment type: Pure data
.rdata$r:000031E0 ; Segment permissions: Read
.rdata$r:000031E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000031E0                 assume cs:_rdata$r
.rdata$r:000031E0                 ;org 31E0h
.rdata$r:000031E0 ; COMDAT (pick any)
.rdata$r:000031E0                 public ??_R2IUnknown@@8
.rdata$r:000031E0 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000031E0 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000031E0                                         ; DATA XREF: .rdata$r:000031DCo
.rdata$r:000031E0                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000031E4                 db    0
.rdata$r:000031E5                 align 4
.rdata$r:000031E5 _rdata$r        ends
.rdata$r:000031E5
.rdata$r:000031E8 ; ===========================================================================
.rdata$r:000031E8
.rdata$r:000031E8 ; Segment type: Pure data
.rdata$r:000031E8 ; Segment permissions: Read
.rdata$r:000031E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000031E8                 assume cs:_rdata$r
.rdata$r:000031E8                 ;org 31E8h
.rdata$r:000031E8 ; COMDAT (pick any)
.rdata$r:000031E8                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000031E8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000031E8 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000031E8                                         ; DATA XREF: .rdata$r:00003114o
.rdata$r:000031E8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000031EC                 db    0
.rdata$r:000031ED                 db    0
.rdata$r:000031EE                 db    0
.rdata$r:000031EF                 db    0
.rdata$r:000031F0                 db    0
.rdata$r:000031F1                 db    0
.rdata$r:000031F2                 db    0
.rdata$r:000031F3                 db    0
.rdata$r:000031F4                 db 0FFh
.rdata$r:000031F5                 db 0FFh
.rdata$r:000031F6                 db 0FFh
.rdata$r:000031F7                 db 0FFh
.rdata$r:000031F8                 db    0
.rdata$r:000031F9                 db    0
.rdata$r:000031FA                 db    0
.rdata$r:000031FB                 db    0
.rdata$r:000031FC                 db  42h ; B
.rdata$r:000031FD                 db    0
.rdata$r:000031FE                 db    0
.rdata$r:000031FF                 db    0
.rdata$r:00003200                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003200 _rdata$r        ends
.rdata$r:00003200
.rdata$r:00003204 ; ===========================================================================
.rdata$r:00003204
.rdata$r:00003204 ; Segment type: Pure data
.rdata$r:00003204 ; Segment permissions: Read
.rdata$r:00003204 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003204                 assume cs:_rdata$r
.rdata$r:00003204                 ;org 3204h
.rdata$r:00003204 ; COMDAT (pick any)
.rdata$r:00003204                 public ??_R13?0A@EA@ICompressSetCoderMt@@8
.rdata$r:00003204 ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003204 ??_R13?0A@EA@ICompressSetCoderMt@@8 dd offset ??_R0?AUICompressSetCoderMt@@@8
.rdata$r:00003204                                         ; DATA XREF: .rdata$r:00003118o
.rdata$r:00003204                                         ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003208                 db    1
.rdata$r:00003209                 db    0
.rdata$r:0000320A                 db    0
.rdata$r:0000320B                 db    0
.rdata$r:0000320C                 db    4
.rdata$r:0000320D                 db    0
.rdata$r:0000320E                 db    0
.rdata$r:0000320F                 db    0
.rdata$r:00003210                 db 0FFh
.rdata$r:00003211                 db 0FFh
.rdata$r:00003212                 db 0FFh
.rdata$r:00003213                 db 0FFh
.rdata$r:00003214                 db    0
.rdata$r:00003215                 db    0
.rdata$r:00003216                 db    0
.rdata$r:00003217                 db    0
.rdata$r:00003218                 db  40h ; @
.rdata$r:00003219                 db    0
.rdata$r:0000321A                 db    0
.rdata$r:0000321B                 db    0
.rdata$r:0000321C                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000321C _rdata$r        ends
.rdata$r:0000321C
.data:00003220 ; ===========================================================================
.data:00003220
.data:00003220 ; Segment type: Pure data
.data:00003220 ; Segment permissions: Read/Write
.data:00003220 _data           segment dword public 'DATA' use32
.data:00003220                 assume cs:_data
.data:00003220                 ;org 3220h
.data:00003220 ; COMDAT (pick any)
.data:00003220                 public ??_R0?AUICompressSetCoderMt@@@8
.data:00003220 ; struct ICompressSetCoderMt `RTTI Type Descriptor'
.data:00003220 ??_R0?AUICompressSetCoderMt@@@8 dd offset ??_7type_info@@6B@
.data:00003220                                         ; DATA XREF: .rdata$r:ICompressSetCoderMt::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003220                                         ; .rdata$r:ICompressSetCoderMt::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003220                                         ; const type_info::`vftable'
.data:00003224                 align 8
.data:00003228 a_?auicompresss db '.?AUICompressSetCoderMt@@',0
.data:00003242                 align 4
.data:00003242 _data           ends
.data:00003242
.rdata$r:00003244 ; ===========================================================================
.rdata$r:00003244
.rdata$r:00003244 ; Segment type: Pure data
.rdata$r:00003244 ; Segment permissions: Read
.rdata$r:00003244 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003244                 assume cs:_rdata$r
.rdata$r:00003244                 ;org 3244h
.rdata$r:00003244 ; COMDAT (pick any)
.rdata$r:00003244                 public ??_R3ICompressSetCoderMt@@8
.rdata$r:00003244 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003244 ??_R3ICompressSetCoderMt@@8 db    0     ; DATA XREF: .rdata$r:0000321Co
.rdata$r:00003244                                         ; .rdata$r:00003278o ...
.rdata$r:00003245                 db    0
.rdata$r:00003246                 db    0
.rdata$r:00003247                 db    0
.rdata$r:00003248                 db    0
.rdata$r:00003249                 db    0
.rdata$r:0000324A                 db    0
.rdata$r:0000324B                 db    0
.rdata$r:0000324C                 db    2
.rdata$r:0000324D                 db    0
.rdata$r:0000324E                 db    0
.rdata$r:0000324F                 db    0
.rdata$r:00003250                 dd offset ??_R2ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Base Class Array'
.rdata$r:00003250 _rdata$r        ends
.rdata$r:00003250
.rdata$r:00003254 ; ===========================================================================
.rdata$r:00003254
.rdata$r:00003254 ; Segment type: Pure data
.rdata$r:00003254 ; Segment permissions: Read
.rdata$r:00003254 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003254                 assume cs:_rdata$r
.rdata$r:00003254                 ;org 3254h
.rdata$r:00003254 ; COMDAT (pick any)
.rdata$r:00003254                 public ??_R2ICompressSetCoderMt@@8
.rdata$r:00003254 ; ICompressSetCoderMt::`RTTI Base Class Array'
.rdata$r:00003254 ??_R2ICompressSetCoderMt@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderMt@@8
.rdata$r:00003254                                         ; DATA XREF: .rdata$r:00003250o
.rdata$r:00003254                                         ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003258                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000325C                 db    0
.rdata$r:0000325D                 align 10h
.rdata$r:0000325D _rdata$r        ends
.rdata$r:0000325D
.rdata$r:00003260 ; ===========================================================================
.rdata$r:00003260
.rdata$r:00003260 ; Segment type: Pure data
.rdata$r:00003260 ; Segment permissions: Read
.rdata$r:00003260 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003260                 assume cs:_rdata$r
.rdata$r:00003260                 ;org 3260h
.rdata$r:00003260 ; COMDAT (pick any)
.rdata$r:00003260                 public ??_R1A@?0A@EA@ICompressSetCoderMt@@8
.rdata$r:00003260 ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003260 ??_R1A@?0A@EA@ICompressSetCoderMt@@8 dd offset ??_R0?AUICompressSetCoderMt@@@8
.rdata$r:00003260                                         ; DATA XREF: .rdata$r:ICompressSetCoderMt::`RTTI Base Class Array'o
.rdata$r:00003260                                         ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003264                 db    1
.rdata$r:00003265                 db    0
.rdata$r:00003266                 db    0
.rdata$r:00003267                 db    0
.rdata$r:00003268                 db    0
.rdata$r:00003269                 db    0
.rdata$r:0000326A                 db    0
.rdata$r:0000326B                 db    0
.rdata$r:0000326C                 db 0FFh
.rdata$r:0000326D                 db 0FFh
.rdata$r:0000326E                 db 0FFh
.rdata$r:0000326F                 db 0FFh
.rdata$r:00003270                 db    0
.rdata$r:00003271                 db    0
.rdata$r:00003272                 db    0
.rdata$r:00003273                 db    0
.rdata$r:00003274                 db  40h ; @
.rdata$r:00003275                 db    0
.rdata$r:00003276                 db    0
.rdata$r:00003277                 db    0
.rdata$r:00003278                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003278 _rdata$r        ends
.rdata$r:00003278
.rdata$r:0000327C ; ===========================================================================
.rdata$r:0000327C
.rdata$r:0000327C ; Segment type: Pure data
.rdata$r:0000327C ; Segment permissions: Read
.rdata$r:0000327C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000327C                 assume cs:_rdata$r
.rdata$r:0000327C                 ;org 327Ch
.rdata$r:0000327C ; COMDAT (pick any)
.rdata$r:0000327C                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:0000327C ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:0000327C ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000327C                                         ; DATA XREF: .rdata$r:0000311Co
.rdata$r:0000327C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003280                 db    0
.rdata$r:00003281                 db    0
.rdata$r:00003282                 db    0
.rdata$r:00003283                 db    0
.rdata$r:00003284                 db    4
.rdata$r:00003285                 db    0
.rdata$r:00003286                 db    0
.rdata$r:00003287                 db    0
.rdata$r:00003288                 db 0FFh
.rdata$r:00003289                 db 0FFh
.rdata$r:0000328A                 db 0FFh
.rdata$r:0000328B                 db 0FFh
.rdata$r:0000328C                 db    0
.rdata$r:0000328D                 db    0
.rdata$r:0000328E                 db    0
.rdata$r:0000328F                 db    0
.rdata$r:00003290                 db  42h ; B
.rdata$r:00003291                 db    0
.rdata$r:00003292                 db    0
.rdata$r:00003293                 db    0
.rdata$r:00003294                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003294 _rdata$r        ends
.rdata$r:00003294
.rdata$r:00003298 ; ===========================================================================
.rdata$r:00003298
.rdata$r:00003298 ; Segment type: Pure data
.rdata$r:00003298 ; Segment permissions: Read
.rdata$r:00003298 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003298                 assume cs:_rdata$r
.rdata$r:00003298                 ;org 3298h
.rdata$r:00003298 ; COMDAT (pick any)
.rdata$r:00003298                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00003298 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00003298 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003298                                         ; DATA XREF: .rdata$r:00003120o
.rdata$r:00003298                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000329C                 align 10h
.rdata$r:000032A0                 db    8
.rdata$r:000032A1                 db    0
.rdata$r:000032A2                 db    0
.rdata$r:000032A3                 db    0
.rdata$r:000032A4                 db 0FFh
.rdata$r:000032A5                 db 0FFh
.rdata$r:000032A6                 db 0FFh
.rdata$r:000032A7                 db 0FFh
.rdata$r:000032A8                 db    0
.rdata$r:000032A9                 db    0
.rdata$r:000032AA                 db    0
.rdata$r:000032AB                 db    0
.rdata$r:000032AC                 db  40h ; @
.rdata$r:000032AD                 db    0
.rdata$r:000032AE                 db    0
.rdata$r:000032AF                 db    0
.rdata$r:000032B0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032B0 _rdata$r        ends
.rdata$r:000032B0
.data:000032B4 ; ===========================================================================
.data:000032B4
.data:000032B4 ; Segment type: Pure data
.data:000032B4 ; Segment permissions: Read/Write
.data:000032B4 _data           segment dword public 'DATA' use32
.data:000032B4                 assume cs:_data
.data:000032B4                 ;org 32B4h
.data:000032B4 ; COMDAT (pick any)
.data:000032B4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000032B4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000032B4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000032B4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000032B4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000032B4                                         ; const type_info::`vftable'
.data:000032B8                 db    0
.data:000032B9                 db    0
.data:000032BA                 db    0
.data:000032BB                 db    0
.data:000032BC                 db  2Eh ; .
.data:000032BD                 db  3Fh ; ?
.data:000032BE                 db  41h ; A
.data:000032BF                 db  56h ; V
.data:000032C0                 db  43h ; C
.data:000032C1                 db  4Dh ; M
.data:000032C2                 db  79h ; y
.data:000032C3                 db  55h ; U
.data:000032C4                 db  6Eh ; n
.data:000032C5                 db  6Bh ; k
.data:000032C6                 db  6Eh ; n
.data:000032C7                 db  6Fh ; o
.data:000032C8                 db  77h ; w
.data:000032C9                 db  6Eh ; n
.data:000032CA                 db  49h ; I
.data:000032CB                 db  6Dh ; m
.data:000032CC                 db  70h ; p
.data:000032CD                 db  40h ; @
.data:000032CE                 db  40h ; @
.data:000032CF                 db    0
.data:000032CF _data           ends
.data:000032CF
.rdata$r:000032D0 ; ===========================================================================
.rdata$r:000032D0
.rdata$r:000032D0 ; Segment type: Pure data
.rdata$r:000032D0 ; Segment permissions: Read
.rdata$r:000032D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032D0                 assume cs:_rdata$r
.rdata$r:000032D0                 ;org 32D0h
.rdata$r:000032D0 ; COMDAT (pick any)
.rdata$r:000032D0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000032D0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032D0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000032B0o
.rdata$r:000032D0                                         ; .rdata$r:00003300o
.rdata$r:000032D1                 db    0
.rdata$r:000032D2                 db    0
.rdata$r:000032D3                 db    0
.rdata$r:000032D4                 db    0
.rdata$r:000032D5                 db    0
.rdata$r:000032D6                 db    0
.rdata$r:000032D7                 db    0
.rdata$r:000032D8                 db    1
.rdata$r:000032D9                 db    0
.rdata$r:000032DA                 db    0
.rdata$r:000032DB                 db    0
.rdata$r:000032DC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000032DC _rdata$r        ends
.rdata$r:000032DC
.rdata$r:000032E0 ; ===========================================================================
.rdata$r:000032E0
.rdata$r:000032E0 ; Segment type: Pure data
.rdata$r:000032E0 ; Segment permissions: Read
.rdata$r:000032E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032E0                 assume cs:_rdata$r
.rdata$r:000032E0                 ;org 32E0h
.rdata$r:000032E0 ; COMDAT (pick any)
.rdata$r:000032E0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000032E0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000032E0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000032E0                                         ; DATA XREF: .rdata$r:000032DCo
.rdata$r:000032E0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000032E4                 db    0
.rdata$r:000032E5                 align 4
.rdata$r:000032E5 _rdata$r        ends
.rdata$r:000032E5
.rdata$r:000032E8 ; ===========================================================================
.rdata$r:000032E8
.rdata$r:000032E8 ; Segment type: Pure data
.rdata$r:000032E8 ; Segment permissions: Read
.rdata$r:000032E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032E8                 assume cs:_rdata$r
.rdata$r:000032E8                 ;org 32E8h
.rdata$r:000032E8 ; COMDAT (pick any)
.rdata$r:000032E8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000032E8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000032E8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000032E8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000032E8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000032EC                 db    0
.rdata$r:000032ED                 db    0
.rdata$r:000032EE                 db    0
.rdata$r:000032EF                 db    0
.rdata$r:000032F0                 db    0
.rdata$r:000032F1                 db    0
.rdata$r:000032F2                 db    0
.rdata$r:000032F3                 db    0
.rdata$r:000032F4                 db 0FFh
.rdata$r:000032F5                 db 0FFh
.rdata$r:000032F6                 db 0FFh
.rdata$r:000032F7                 db 0FFh
.rdata$r:000032F8                 db    0
.rdata$r:000032F9                 db    0
.rdata$r:000032FA                 db    0
.rdata$r:000032FB                 db    0
.rdata$r:000032FC                 db  40h ; @
.rdata$r:000032FD                 db    0
.rdata$r:000032FE                 db    0
.rdata$r:000032FF                 db    0
.rdata$r:00003300                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003300 _rdata$r        ends
.rdata$r:00003300
.rdata$r:00003304 ; ===========================================================================
.rdata$r:00003304
.rdata$r:00003304 ; Segment type: Pure data
.rdata$r:00003304 ; Segment permissions: Read
.rdata$r:00003304 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003304                 assume cs:_rdata$r
.rdata$r:00003304                 ;org 3304h
.rdata$r:00003304 ; COMDAT (pick any)
.rdata$r:00003304                 public ??_R4CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@
.rdata$r:00003304 ; const NCompress::NBZip2::CDecoder::`RTTI Complete Object Locator'{for `ICompressSetCoderMt'}
.rdata$r:00003304 ??_R4CDecoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ db    0
.rdata$r:00003304                                         ; DATA XREF: .rdata:00002E0Co
.rdata$r:00003305                 db    0
.rdata$r:00003306                 db    0
.rdata$r:00003307                 db    0
.rdata$r:00003308                 db    4
.rdata$r:00003309                 db    0
.rdata$r:0000330A                 db    0
.rdata$r:0000330B                 db    0
.rdata$r:0000330C                 db    0
.rdata$r:0000330D                 db    0
.rdata$r:0000330E                 db    0
.rdata$r:0000330F                 db    0
.rdata$r:00003310                 dd offset ??_R0?AVCDecoder@NBZip2@NCompress@@@8 ; NCompress::NBZip2::CDecoder `RTTI Type Descriptor'
.rdata$r:00003314                 dd offset ??_R3CDecoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CDecoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003314 _rdata$r        ends
.rdata$r:00003314
.text:00003318 ; ===========================================================================
.text:00003318
.text:00003318 ; Segment type: Pure code
.text:00003318 ; Segment permissions: Read/Execute
.text:00003318 _text           segment para public 'CODE' use32
.text:00003318                 assume cs:_text
.text:00003318                 ;org 3318h
.text:00003318 ; COMDAT (pick any)
.text:00003318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003318
.text:00003318 ; =============== S U B R O U T I N E =======================================
.text:00003318
.text:00003318 ; Attributes: bp-based frame
.text:00003318
.text:00003318 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00003318                 public ??0CMyUnknownImp@@QAE@XZ
.text:00003318 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+46p
.text:00003318
.text:00003318 var_4           = dword ptr -4
.text:00003318
.text:00003318                 push    ebp
.text:00003319                 mov     ebp, esp
.text:0000331B                 push    ecx
.text:0000331C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003323                 mov     [ebp+var_4], ecx
.text:00003326                 mov     eax, [ebp+var_4]
.text:00003329                 mov     dword ptr [eax], 0
.text:0000332F                 mov     eax, [ebp+var_4]
.text:00003332                 mov     esp, ebp
.text:00003334                 pop     ebp
.text:00003335                 retn
.text:00003335 ??0CMyUnknownImp@@QAE@XZ endp
.text:00003335
.text:00003335 ; ---------------------------------------------------------------------------
.text:00003336                 align 4
.text:00003336 _text           ends
.text:00003336
.text:00003338 ; ===========================================================================
.text:00003338
.text:00003338 ; Segment type: Pure code
.text:00003338 ; Segment permissions: Read/Execute
.text:00003338 _text           segment para public 'CODE' use32
.text:00003338                 assume cs:_text
.text:00003338                 ;org 3338h
.text:00003338 ; COMDAT (pick any)
.text:00003338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003338
.text:00003338 ; =============== S U B R O U T I N E =======================================
.text:00003338
.text:00003338 ; Attributes: bp-based frame
.text:00003338
.text:00003338 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003338                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003338 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003338                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+ABp
.text:00003338
.text:00003338 var_4           = dword ptr -4
.text:00003338
.text:00003338                 push    ebp
.text:00003339                 mov     ebp, esp
.text:0000333B                 push    ecx
.text:0000333C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003343                 mov     [ebp+var_4], ecx
.text:00003346                 mov     eax, [ebp+var_4]
.text:00003349                 push    eax
.text:0000334A                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:0000334F                 mov     eax, [ebp+var_4]
.text:00003352                 add     esp, 4
.text:00003355                 cmp     ebp, esp
.text:00003357                 call    __RTC_CheckEsp
.text:0000335C                 mov     esp, ebp
.text:0000335E                 pop     ebp
.text:0000335F                 retn
.text:0000335F ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:0000335F
.text:0000335F _text           ends
.text:0000335F
.text:00003360 ; ===========================================================================
.text:00003360
.text:00003360 ; Segment type: Pure code
.text:00003360 ; Segment permissions: Read/Execute
.text:00003360 _text           segment para public 'CODE' use32
.text:00003360                 assume cs:_text
.text:00003360                 ;org 3360h
.text:00003360 ; COMDAT (pick any)
.text:00003360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003360
.text:00003360 ; =============== S U B R O U T I N E =======================================
.text:00003360
.text:00003360 ; Attributes: bp-based frame
.text:00003360
.text:00003360 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003360                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003360 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003360                                         ; CODE XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+6Ep
.text:00003360                                         ; __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$3+9j ...
.text:00003360
.text:00003360 lpCriticalSection= dword ptr -4
.text:00003360
.text:00003360                 push    ebp
.text:00003361                 mov     ebp, esp
.text:00003363                 push    ecx
.text:00003364                 push    esi
.text:00003365                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000336C                 mov     [ebp+lpCriticalSection], ecx
.text:0000336F                 mov     esi, esp
.text:00003371                 mov     eax, [ebp+lpCriticalSection]
.text:00003374                 push    eax             ; lpCriticalSection
.text:00003375                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:0000337B                 cmp     esi, esp
.text:0000337D                 call    __RTC_CheckEsp
.text:00003382                 pop     esi
.text:00003383                 add     esp, 4
.text:00003386                 cmp     ebp, esp
.text:00003388                 call    __RTC_CheckEsp
.text:0000338D                 mov     esp, ebp
.text:0000338F                 pop     ebp
.text:00003390                 retn
.text:00003390 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:00003390
.text:00003390 ; ---------------------------------------------------------------------------
.text:00003391                 align 4
.text:00003391 _text           ends
.text:00003391
.text:00003394 ; ===========================================================================
.text:00003394
.text:00003394 ; Segment type: Pure code
.text:00003394 ; Segment permissions: Read/Execute
.text:00003394 _text           segment para public 'CODE' use32
.text:00003394                 assume cs:_text
.text:00003394                 ;org 3394h
.text:00003394 ; COMDAT (pick any)
.text:00003394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003394
.text:00003394 ; =============== S U B R O U T I N E =======================================
.text:00003394
.text:00003394 ; Attributes: bp-based frame
.text:00003394
.text:00003394 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00003394                 public ??0COutBuffer@@QAE@XZ
.text:00003394 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+64p
.text:00003394
.text:00003394 var_4           = dword ptr -4
.text:00003394
.text:00003394                 push    ebp
.text:00003395                 mov     ebp, esp
.text:00003397                 push    ecx
.text:00003398                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000339F                 mov     [ebp+var_4], ecx
.text:000033A2                 mov     eax, [ebp+var_4]
.text:000033A5                 mov     dword ptr [eax], 0
.text:000033AB                 mov     ecx, [ebp+var_4]
.text:000033AE                 mov     dword ptr [ecx+4], 0
.text:000033B5                 mov     edx, [ebp+var_4]
.text:000033B8                 mov     dword ptr [edx+14h], 0
.text:000033BF                 mov     eax, [ebp+var_4]
.text:000033C2                 mov     dword ptr [eax+20h], 0
.text:000033C9                 mov     eax, [ebp+var_4]
.text:000033CC                 mov     esp, ebp
.text:000033CE                 pop     ebp
.text:000033CF                 retn
.text:000033CF ??0COutBuffer@@QAE@XZ endp
.text:000033CF
.text:000033CF _text           ends
.text:000033CF
.text:000033D0 ; ===========================================================================
.text:000033D0
.text:000033D0 ; Segment type: Pure code
.text:000033D0 ; Segment permissions: Read/Execute
.text:000033D0 _text           segment para public 'CODE' use32
.text:000033D0                 assume cs:_text
.text:000033D0                 ;org 33D0h
.text:000033D0 ; COMDAT (pick any)
.text:000033D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033D0
.text:000033D0 ; =============== S U B R O U T I N E =======================================
.text:000033D0
.text:000033D0 ; Attributes: bp-based frame
.text:000033D0
.text:000033D0 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:000033D0                 public ??1COutBuffer@@QAE@XZ
.text:000033D0 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+A4p
.text:000033D0                                         ; __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$0+6j ...
.text:000033D0
.text:000033D0 var_4           = dword ptr -4
.text:000033D0
.text:000033D0                 push    ebp
.text:000033D1                 mov     ebp, esp
.text:000033D3                 push    ecx
.text:000033D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033DB                 mov     [ebp+var_4], ecx
.text:000033DE                 mov     ecx, [ebp+var_4] ; this
.text:000033E1                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:000033E6                 add     esp, 4
.text:000033E9                 cmp     ebp, esp
.text:000033EB                 call    __RTC_CheckEsp
.text:000033F0                 mov     esp, ebp
.text:000033F2                 pop     ebp
.text:000033F3                 retn
.text:000033F3 ??1COutBuffer@@QAE@XZ endp
.text:000033F3
.text:000033F3 _text           ends
.text:000033F3
.text:000033F4 ; ===========================================================================
.text:000033F4
.text:000033F4 ; Segment type: Pure code
.text:000033F4 ; Segment permissions: Read/Execute
.text:000033F4 _text           segment para public 'CODE' use32
.text:000033F4                 assume cs:_text
.text:000033F4                 ;org 33F4h
.text:000033F4 ; COMDAT (pick any)
.text:000033F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033F4
.text:000033F4 ; =============== S U B R O U T I N E =======================================
.text:000033F4
.text:000033F4 ; Attributes: bp-based frame
.text:000033F4
.text:000033F4 ; _DWORD __thiscall CBZip2CombinedCrc::CBZip2CombinedCrc(CBZip2CombinedCrc *__hidden this)
.text:000033F4                 public ??0CBZip2CombinedCrc@@QAE@XZ
.text:000033F4 ??0CBZip2CombinedCrc@@QAE@XZ proc near  ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+8Bp
.text:000033F4
.text:000033F4 var_4           = dword ptr -4
.text:000033F4
.text:000033F4                 push    ebp
.text:000033F5                 mov     ebp, esp
.text:000033F7                 push    ecx
.text:000033F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033FF                 mov     [ebp+var_4], ecx
.text:00003402                 mov     eax, [ebp+var_4]
.text:00003405                 mov     dword ptr [eax], 0
.text:0000340B                 mov     eax, [ebp+var_4]
.text:0000340E                 mov     esp, ebp
.text:00003410                 pop     ebp
.text:00003411                 retn
.text:00003411 ??0CBZip2CombinedCrc@@QAE@XZ endp
.text:00003411
.text:00003411 ; ---------------------------------------------------------------------------
.text:00003412                 align 4
.text:00003412 _text           ends
.text:00003412
.text:00003414 ; ===========================================================================
.text:00003414
.text:00003414 ; Segment type: Pure code
.text:00003414 ; Segment permissions: Read/Execute
.text:00003414 _text           segment para public 'CODE' use32
.text:00003414                 assume cs:_text
.text:00003414                 ;org 3414h
.text:00003414 ; COMDAT (pick any)
.text:00003414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003414
.text:00003414 ; =============== S U B R O U T I N E =======================================
.text:00003414
.text:00003414 ; Attributes: bp-based frame
.text:00003414
.text:00003414 ; _DWORD __thiscall NCompress::NBZip2::CBase::CBase(NCompress::NBZip2::CBase *__hidden this)
.text:00003414                 public ??0CBase@NBZip2@NCompress@@QAE@XZ
.text:00003414 ??0CBase@NBZip2@NCompress@@QAE@XZ proc near
.text:00003414                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+79p
.text:00003414
.text:00003414 var_4           = dword ptr -4
.text:00003414
.text:00003414                 push    ebp
.text:00003415                 mov     ebp, esp
.text:00003417                 push    ecx
.text:00003418                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000341F                 mov     [ebp+var_4], ecx
.text:00003422                 mov     ecx, [ebp+var_4]
.text:00003425                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:0000342A                 mov     ecx, [ebp+var_4]
.text:0000342D                 add     ecx, 8
.text:00003430                 call    ??0?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ ; NBitm::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)
.text:00003435                 mov     eax, [ebp+var_4]
.text:00003438                 mov     dword ptr [eax+6EB0h], 0
.text:00003442                 mov     dword ptr [eax+6EB4h], 0
.text:0000344C                 mov     eax, [ebp+var_4]
.text:0000344F                 add     esp, 4
.text:00003452                 cmp     ebp, esp
.text:00003454                 call    __RTC_CheckEsp
.text:00003459                 mov     esp, ebp
.text:0000345B                 pop     ebp
.text:0000345C                 retn
.text:0000345C ??0CBase@NBZip2@NCompress@@QAE@XZ endp
.text:0000345C
.text:0000345C ; ---------------------------------------------------------------------------
.text:0000345D                 align 10h
.text:0000345D _text           ends
.text:0000345D
.text:00003460 ; ===========================================================================
.text:00003460
.text:00003460 ; Segment type: Pure code
.text:00003460 ; Segment permissions: Read/Execute
.text:00003460 _text           segment para public 'CODE' use32
.text:00003460                 assume cs:_text
.text:00003460                 ;org 3460h
.text:00003460 ; COMDAT (pick any)
.text:00003460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003460
.text:00003460 ; =============== S U B R O U T I N E =======================================
.text:00003460
.text:00003460 ; Attributes: bp-based frame
.text:00003460
.text:00003460 ; public: __thiscall NBitm::CDecoder<class CInBuffer>::CDecoder<class CInBuffer>(void)
.text:00003460                 public ??0?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ
.text:00003460 ??0?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ proc near
.text:00003460                                         ; CODE XREF: NCompress::NBZip2::CBase::CBase(void)+1Cp
.text:00003460
.text:00003460 var_4           = dword ptr -4
.text:00003460
.text:00003460                 push    ebp
.text:00003461                 mov     ebp, esp
.text:00003463                 push    ecx
.text:00003464                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000346B                 mov     [ebp+var_4], ecx
.text:0000346E                 mov     ecx, [ebp+var_4]
.text:00003471                 add     ecx, 8
.text:00003474                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00003479                 mov     eax, [ebp+var_4]
.text:0000347C                 add     esp, 4
.text:0000347F                 cmp     ebp, esp
.text:00003481                 call    __RTC_CheckEsp
.text:00003486                 mov     esp, ebp
.text:00003488                 pop     ebp
.text:00003489                 retn
.text:00003489 ??0?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ endp
.text:00003489
.text:00003489 ; ---------------------------------------------------------------------------
.text:0000348A                 align 4
.text:0000348A _text           ends
.text:0000348A
.text:0000348C ; ===========================================================================
.text:0000348C
.text:0000348C ; Segment type: Pure code
.text:0000348C ; Segment permissions: Read/Execute
.text:0000348C _text           segment para public 'CODE' use32
.text:0000348C                 assume cs:_text
.text:0000348C                 ;org 348Ch
.text:0000348C ; COMDAT (pick any)
.text:0000348C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000348C
.text:0000348C ; =============== S U B R O U T I N E =======================================
.text:0000348C
.text:0000348C ; Attributes: bp-based frame
.text:0000348C
.text:0000348C ; public: __thiscall CInBuffer::CInBuffer(void)
.text:0000348C                 public ??0CInBuffer@@QAE@XZ
.text:0000348C ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitm::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)+14p
.text:0000348C
.text:0000348C var_4           = dword ptr -4
.text:0000348C
.text:0000348C                 push    ebp
.text:0000348D                 mov     ebp, esp
.text:0000348F                 push    ecx
.text:00003490                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003497                 mov     [ebp+var_4], ecx
.text:0000349A                 mov     ecx, [ebp+var_4]
.text:0000349D                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:000034A2                 mov     eax, [ebp+var_4]
.text:000034A5                 add     esp, 4
.text:000034A8                 cmp     ebp, esp
.text:000034AA                 call    __RTC_CheckEsp
.text:000034AF                 mov     esp, ebp
.text:000034B1                 pop     ebp
.text:000034B2                 retn
.text:000034B2 ??0CInBuffer@@QAE@XZ endp
.text:000034B2
.text:000034B2 ; ---------------------------------------------------------------------------
.text:000034B3                 align 4
.text:000034B3 _text           ends
.text:000034B3
.text:000034B4 ; ===========================================================================
.text:000034B4
.text:000034B4 ; Segment type: Pure code
.text:000034B4 ; Segment permissions: Read/Execute
.text:000034B4 _text           segment para public 'CODE' use32
.text:000034B4                 assume cs:_text
.text:000034B4                 ;org 34B4h
.text:000034B4 ; COMDAT (pick any)
.text:000034B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034B4
.text:000034B4 ; =============== S U B R O U T I N E =======================================
.text:000034B4
.text:000034B4 ; Attributes: bp-based frame
.text:000034B4
.text:000034B4 ; __int32 __stdcall NCompress::NBZip2::CDecoder::QueryInterface(NCompress::NBZip2::CDecoder *this, const struct _GUID *Buf1, void **)
.text:000034B4                 public ?QueryInterface@CDecoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:000034B4 ?QueryInterface@CDecoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000034B4                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CDecoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:000034B4                                         ; DATA XREF: .rdata:const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressCoder'}o
.text:000034B4
.text:000034B4 var_4           = dword ptr -4
.text:000034B4 this            = dword ptr  8
.text:000034B4 Buf1            = dword ptr  0Ch
.text:000034B4 arg_8           = dword ptr  10h
.text:000034B4
.text:000034B4                 push    ebp
.text:000034B5                 mov     ebp, esp
.text:000034B7                 push    ecx
.text:000034B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034BF                 mov     eax, [ebp+arg_8]
.text:000034C2                 mov     dword ptr [eax], 0
.text:000034C8                 push    offset _IID_IUnknown ; Buf2
.text:000034CD                 mov     ecx, [ebp+Buf1]
.text:000034D0                 push    ecx             ; Buf1
.text:000034D1                 call    ___@8           ; __(x,x)
.text:000034D6                 test    eax, eax
.text:000034D8                 jz      short loc_34E4
.text:000034DA                 mov     edx, [ebp+arg_8]
.text:000034DD                 mov     eax, [ebp+this]
.text:000034E0                 mov     [edx], eax
.text:000034E2                 jmp     short loc_353B
.text:000034E4 ; ---------------------------------------------------------------------------
.text:000034E4
.text:000034E4 loc_34E4:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+24j
.text:000034E4                 push    offset _IID_ICompressCoder ; Buf2
.text:000034E9                 mov     ecx, [ebp+Buf1]
.text:000034EC                 push    ecx             ; Buf1
.text:000034ED                 call    ___@8           ; __(x,x)
.text:000034F2                 test    eax, eax
.text:000034F4                 jz      short loc_3500
.text:000034F6                 mov     edx, [ebp+arg_8]
.text:000034F9                 mov     eax, [ebp+this]
.text:000034FC                 mov     [edx], eax
.text:000034FE                 jmp     short loc_353B
.text:00003500 ; ---------------------------------------------------------------------------
.text:00003500
.text:00003500 loc_3500:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+40j
.text:00003500                 push    offset _IID_ICompressSetCoderMt ; Buf2
.text:00003505                 mov     ecx, [ebp+Buf1]
.text:00003508                 push    ecx             ; Buf1
.text:00003509                 call    ___@8           ; __(x,x)
.text:0000350E                 test    eax, eax
.text:00003510                 jz      short loc_3534
.text:00003512                 cmp     [ebp+this], 0
.text:00003516                 jz      short loc_3523
.text:00003518                 mov     edx, [ebp+this]
.text:0000351B                 add     edx, 4
.text:0000351E                 mov     [ebp+var_4], edx
.text:00003521                 jmp     short loc_352A
.text:00003523 ; ---------------------------------------------------------------------------
.text:00003523
.text:00003523 loc_3523:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+62j
.text:00003523                 mov     [ebp+var_4], 0
.text:0000352A
.text:0000352A loc_352A:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+6Dj
.text:0000352A                 mov     eax, [ebp+arg_8]
.text:0000352D                 mov     ecx, [ebp+var_4]
.text:00003530                 mov     [eax], ecx
.text:00003532                 jmp     short loc_353B
.text:00003534 ; ---------------------------------------------------------------------------
.text:00003534
.text:00003534 loc_3534:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+5Cj
.text:00003534                 mov     eax, 80004002h
.text:00003539                 jmp     short loc_354C
.text:0000353B ; ---------------------------------------------------------------------------
.text:0000353B
.text:0000353B loc_353B:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+2Ej
.text:0000353B                                         ; NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+4Aj ...
.text:0000353B                 mov     edx, [ebp+this]
.text:0000353E                 mov     eax, [edx+8]
.text:00003541                 add     eax, 1
.text:00003544                 mov     ecx, [ebp+this]
.text:00003547                 mov     [ecx+8], eax
.text:0000354A                 xor     eax, eax
.text:0000354C
.text:0000354C loc_354C:                               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+85j
.text:0000354C                 add     esp, 4
.text:0000354F                 cmp     ebp, esp
.text:00003551                 call    __RTC_CheckEsp
.text:00003556                 mov     esp, ebp
.text:00003558                 pop     ebp
.text:00003559                 retn    0Ch
.text:00003559 ?QueryInterface@CDecoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003559
.text:00003559 _text           ends
.text:00003559
.text:0000355C ; ===========================================================================
.text:0000355C
.text:0000355C ; Segment type: Pure code
.text:0000355C ; Segment permissions: Read/Execute
.text:0000355C _text           segment para public 'CODE' use32
.text:0000355C                 assume cs:_text
.text:0000355C                 ;org 355Ch
.text:0000355C ; COMDAT (pick any)
.text:0000355C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000355C
.text:0000355C ; =============== S U B R O U T I N E =======================================
.text:0000355C
.text:0000355C ; Attributes: bp-based frame
.text:0000355C
.text:0000355C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000355C                 public ___@8
.text:0000355C ___@8           proc near               ; CODE XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+1Dp
.text:0000355C                                         ; NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+39p ...
.text:0000355C
.text:0000355C Buf1            = dword ptr  8
.text:0000355C Buf2            = dword ptr  0Ch
.text:0000355C
.text:0000355C                 push    ebp
.text:0000355D                 mov     ebp, esp
.text:0000355F                 mov     eax, [ebp+Buf2]
.text:00003562                 push    eax             ; Buf2
.text:00003563                 mov     ecx, [ebp+Buf1]
.text:00003566                 push    ecx             ; Buf1
.text:00003567                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000356C                 cmp     ebp, esp
.text:0000356E                 call    __RTC_CheckEsp
.text:00003573                 pop     ebp
.text:00003574                 retn    8
.text:00003574 ___@8           endp
.text:00003574
.text:00003574 ; ---------------------------------------------------------------------------
.text:00003577                 align 4
.text:00003577 _text           ends
.text:00003577
.text:00003578 ; ===========================================================================
.text:00003578
.text:00003578 ; Segment type: Pure code
.text:00003578 ; Segment permissions: Read/Execute
.text:00003578 _text           segment para public 'CODE' use32
.text:00003578                 assume cs:_text
.text:00003578                 ;org 3578h
.text:00003578 ; COMDAT (pick any)
.text:00003578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003578
.text:00003578 ; =============== S U B R O U T I N E =======================================
.text:00003578
.text:00003578 ; Attributes: bp-based frame
.text:00003578
.text:00003578 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00003578                 public _IsEqualGUID@8
.text:00003578 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00003578
.text:00003578 Buf1            = dword ptr  8
.text:00003578 Buf2            = dword ptr  0Ch
.text:00003578
.text:00003578                 push    ebp
.text:00003579                 mov     ebp, esp
.text:0000357B                 push    10h             ; Size
.text:0000357D                 mov     eax, [ebp+Buf2]
.text:00003580                 push    eax             ; Buf2
.text:00003581                 mov     ecx, [ebp+Buf1]
.text:00003584                 push    ecx             ; Buf1
.text:00003585                 call    _memcmp
.text:0000358A                 add     esp, 0Ch
.text:0000358D                 neg     eax
.text:0000358F                 sbb     eax, eax
.text:00003591                 add     eax, 1
.text:00003594                 cmp     ebp, esp
.text:00003596                 call    __RTC_CheckEsp
.text:0000359B                 pop     ebp
.text:0000359C                 retn    8
.text:0000359C _IsEqualGUID@8  endp
.text:0000359C
.text:0000359C ; ---------------------------------------------------------------------------
.text:0000359F                 align 10h
.text:0000359F _text           ends
.text:0000359F
.text:000035A0 ; ===========================================================================
.text:000035A0
.text:000035A0 ; Segment type: Pure code
.text:000035A0 ; Segment permissions: Read/Execute
.text:000035A0 _text           segment para public 'CODE' use32
.text:000035A0                 assume cs:_text
.text:000035A0                 ;org 35A0h
.text:000035A0 ; COMDAT (pick any)
.text:000035A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035A0
.text:000035A0 ; =============== S U B R O U T I N E =======================================
.text:000035A0
.text:000035A0 ; Attributes: bp-based frame
.text:000035A0
.text:000035A0 ; unsigned __int32 __stdcall NCompress::NBZip2::CDecoder::AddRef(NCompress::NBZip2::CDecoder *this)
.text:000035A0                 public ?AddRef@CDecoder@NBZip2@NCompress@@UAGKXZ
.text:000035A0 ?AddRef@CDecoder@NBZip2@NCompress@@UAGKXZ proc near
.text:000035A0                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CDecoder::AddRef`adjustor{4}' (void)+5j
.text:000035A0                                         ; DATA XREF: .rdata:00002E28o
.text:000035A0
.text:000035A0 var_4           = dword ptr -4
.text:000035A0 this            = dword ptr  8
.text:000035A0
.text:000035A0                 push    ebp
.text:000035A1                 mov     ebp, esp
.text:000035A3                 push    ecx
.text:000035A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035AB                 mov     eax, [ebp+this]
.text:000035AE                 mov     ecx, [eax+8]
.text:000035B1                 add     ecx, 1
.text:000035B4                 mov     [ebp+var_4], ecx
.text:000035B7                 mov     edx, [ebp+this]
.text:000035BA                 mov     eax, [ebp+var_4]
.text:000035BD                 mov     [edx+8], eax
.text:000035C0                 mov     eax, [ebp+var_4]
.text:000035C3                 mov     esp, ebp
.text:000035C5                 pop     ebp
.text:000035C6                 retn    4
.text:000035C6 ?AddRef@CDecoder@NBZip2@NCompress@@UAGKXZ endp
.text:000035C6
.text:000035C6 ; ---------------------------------------------------------------------------
.text:000035C9                 align 4
.text:000035C9 _text           ends
.text:000035C9
.text:000035CC ; ===========================================================================
.text:000035CC
.text:000035CC ; Segment type: Pure code
.text:000035CC ; Segment permissions: Read/Execute
.text:000035CC _text           segment para public 'CODE' use32
.text:000035CC                 assume cs:_text
.text:000035CC                 ;org 35CCh
.text:000035CC ; COMDAT (pick any)
.text:000035CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035CC
.text:000035CC ; =============== S U B R O U T I N E =======================================
.text:000035CC
.text:000035CC ; Attributes: bp-based frame
.text:000035CC
.text:000035CC ; unsigned __int32 __stdcall NCompress::NBZip2::CDecoder::Release(NCompress::NBZip2::CDecoder *this)
.text:000035CC                 public ?Release@CDecoder@NBZip2@NCompress@@UAGKXZ
.text:000035CC ?Release@CDecoder@NBZip2@NCompress@@UAGKXZ proc near
.text:000035CC                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CDecoder::Release`adjustor{4}' (void)+5j
.text:000035CC                                         ; DATA XREF: .rdata:00002E2Co
.text:000035CC
.text:000035CC var_10          = dword ptr -10h
.text:000035CC var_C           = dword ptr -0Ch
.text:000035CC var_8           = dword ptr -8
.text:000035CC var_4           = dword ptr -4
.text:000035CC this            = dword ptr  8
.text:000035CC
.text:000035CC                 push    ebp
.text:000035CD                 mov     ebp, esp
.text:000035CF                 sub     esp, 10h
.text:000035D2                 mov     eax, 0CCCCCCCCh
.text:000035D7                 mov     [ebp+var_10], eax
.text:000035DA                 mov     [ebp+var_C], eax
.text:000035DD                 mov     [ebp+var_8], eax
.text:000035E0                 mov     [ebp+var_4], eax
.text:000035E3                 mov     eax, [ebp+this]
.text:000035E6                 mov     ecx, [eax+8]
.text:000035E9                 sub     ecx, 1
.text:000035EC                 mov     [ebp+var_C], ecx
.text:000035EF                 mov     edx, [ebp+this]
.text:000035F2                 mov     eax, [ebp+var_C]
.text:000035F5                 mov     [edx+8], eax
.text:000035F8                 cmp     [ebp+var_C], 0
.text:000035FC                 jz      short loc_3606
.text:000035FE                 mov     ecx, [ebp+this]
.text:00003601                 mov     eax, [ecx+8]
.text:00003604                 jmp     short loc_3630
.text:00003606 ; ---------------------------------------------------------------------------
.text:00003606
.text:00003606 loc_3606:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Release(void)+30j
.text:00003606                 mov     edx, [ebp+this]
.text:00003609                 mov     [ebp+var_8], edx
.text:0000360C                 mov     eax, [ebp+var_8]
.text:0000360F                 mov     [ebp+var_4], eax
.text:00003612                 cmp     [ebp+var_4], 0
.text:00003616                 jz      short loc_3627
.text:00003618                 push    1
.text:0000361A                 mov     ecx, [ebp+var_4]
.text:0000361D                 call    ??_GCDecoder@NBZip2@NCompress@@QAEPAXI@Z ; NCompress::NBZip2::CDecoder::`scalar deleting destructor'(uint)
.text:00003622                 mov     [ebp+var_10], eax
.text:00003625                 jmp     short loc_362E
.text:00003627 ; ---------------------------------------------------------------------------
.text:00003627
.text:00003627 loc_3627:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Release(void)+4Aj
.text:00003627                 mov     [ebp+var_10], 0
.text:0000362E
.text:0000362E loc_362E:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Release(void)+59j
.text:0000362E                 xor     eax, eax
.text:00003630
.text:00003630 loc_3630:                               ; CODE XREF: NCompress::NBZip2::CDecoder::Release(void)+38j
.text:00003630                 add     esp, 10h
.text:00003633                 cmp     ebp, esp
.text:00003635                 call    __RTC_CheckEsp
.text:0000363A                 mov     esp, ebp
.text:0000363C                 pop     ebp
.text:0000363D                 retn    4
.text:0000363D ?Release@CDecoder@NBZip2@NCompress@@UAGKXZ endp
.text:0000363D
.text:0000363D _text           ends
.text:0000363D
.text:00003640 ; ===========================================================================
.text:00003640
.text:00003640 ; Segment type: Pure code
.text:00003640 ; Segment permissions: Read/Execute
.text:00003640 _text           segment para public 'CODE' use32
.text:00003640                 assume cs:_text
.text:00003640                 ;org 3640h
.text:00003640 ; COMDAT (pick any)
.text:00003640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003640
.text:00003640 ; =============== S U B R O U T I N E =======================================
.text:00003640
.text:00003640 ; Attributes: bp-based frame
.text:00003640
.text:00003640 ; public: void * __thiscall NCompress::NBZip2::CDecoder::`scalar deleting destructor'(unsigned int)
.text:00003640                 public ??_GCDecoder@NBZip2@NCompress@@QAEPAXI@Z
.text:00003640 ??_GCDecoder@NBZip2@NCompress@@QAEPAXI@Z proc near
.text:00003640                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Release(void)+51p
.text:00003640
.text:00003640 var_4           = dword ptr -4
.text:00003640 arg_0           = dword ptr  8
.text:00003640
.text:00003640                 push    ebp
.text:00003641                 mov     ebp, esp
.text:00003643                 push    ecx
.text:00003644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000364B                 mov     [ebp+var_4], ecx
.text:0000364E                 mov     ecx, [ebp+var_4] ; this
.text:00003651                 call    ??1CDecoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CDecoder::~CDecoder(void)
.text:00003656                 mov     eax, [ebp+arg_0]
.text:00003659                 and     eax, 1
.text:0000365C                 jz      short loc_366A
.text:0000365E                 mov     ecx, [ebp+var_4]
.text:00003661                 push    ecx             ; void *
.text:00003662                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003667                 add     esp, 4
.text:0000366A
.text:0000366A loc_366A:                               ; CODE XREF: NCompress::NBZip2::CDecoder::`scalar deleting destructor'(uint)+1Cj
.text:0000366A                 mov     eax, [ebp+var_4]
.text:0000366D                 add     esp, 4
.text:00003670                 cmp     ebp, esp
.text:00003672                 call    __RTC_CheckEsp
.text:00003677                 mov     esp, ebp
.text:00003679                 pop     ebp
.text:0000367A                 retn    4
.text:0000367A ??_GCDecoder@NBZip2@NCompress@@QAEPAXI@Z endp
.text:0000367A
.text:0000367A ; ---------------------------------------------------------------------------
.text:0000367D                 align 10h
.text:0000367D _text           ends
.text:0000367D
.text:00003680 ; ===========================================================================
.text:00003680
.text:00003680 ; Segment type: Pure code
.text:00003680 ; Segment permissions: Read/Execute
.text:00003680 _text           segment para public 'CODE' use32
.text:00003680                 assume cs:_text
.text:00003680                 ;org 3680h
.text:00003680 ; COMDAT (pick any)
.text:00003680                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003680
.text:00003680 ; =============== S U B R O U T I N E =======================================
.text:00003680
.text:00003680 ; Attributes: bp-based frame
.text:00003680
.text:00003680 ; _DWORD __thiscall NCompress::NBZip2::CBase::~CBase(NCompress::NBZip2::CBase *__hidden this)
.text:00003680                 public ??1CBase@NBZip2@NCompress@@QAE@XZ
.text:00003680 ??1CBase@NBZip2@NCompress@@QAE@XZ proc near
.text:00003680                                         ; CODE XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+92p
.text:00003680                                         ; __unwindfunclet$??0CDecoder@NBZip2@NCompress@@QAE@XZ$1+9j ...
.text:00003680
.text:00003680 var_10          = dword ptr -10h
.text:00003680 var_C           = dword ptr -0Ch
.text:00003680 var_4           = dword ptr -4
.text:00003680
.text:00003680                 push    ebp
.text:00003681                 mov     ebp, esp
.text:00003683                 push    0FFFFFFFFh
.text:00003685                 push    offset __ehhandler$??1CBase@NBZip2@NCompress@@QAE@XZ
.text:0000368A                 mov     eax, large fs:0
.text:00003690                 push    eax
.text:00003691                 push    ecx
.text:00003692                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003699                 mov     eax, dword ptr ds:___security_cookie
.text:0000369E                 xor     eax, ebp
.text:000036A0                 push    eax
.text:000036A1                 lea     eax, [ebp+var_C]
.text:000036A4                 mov     large fs:0, eax
.text:000036AA                 mov     [ebp+var_10], ecx
.text:000036AD                 mov     [ebp+var_4], 0
.text:000036B4                 mov     ecx, [ebp+var_10]
.text:000036B7                 add     ecx, 8
.text:000036BA                 call    ??1?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ ; NBitm::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:000036BF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000036C6                 mov     ecx, [ebp+var_10]
.text:000036C9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000036CE                 mov     ecx, [ebp+var_C]
.text:000036D1                 mov     large fs:0, ecx
.text:000036D8                 pop     ecx
.text:000036D9                 add     esp, 10h
.text:000036DC                 cmp     ebp, esp
.text:000036DE                 call    __RTC_CheckEsp
.text:000036E3                 mov     esp, ebp
.text:000036E5                 pop     ebp
.text:000036E6                 retn
.text:000036E6 ??1CBase@NBZip2@NCompress@@QAE@XZ endp
.text:000036E6
.text:000036E6 ; ---------------------------------------------------------------------------
.text:000036E7                 align 4
.text:000036E7 _text           ends
.text:000036E7
.text$x:000036E8 ; ===========================================================================
.text$x:000036E8
.text$x:000036E8 ; Segment type: Pure code
.text$x:000036E8 ; Segment permissions: Read/Execute
.text$x:000036E8 _text$x         segment para public 'CODE' use32
.text$x:000036E8                 assume cs:_text$x
.text$x:000036E8                 ;org 36E8h
.text$x:000036E8 ; COMDAT (pick associative to section at 3680)
.text$x:000036E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000036E8
.text$x:000036E8 ; =============== S U B R O U T I N E =======================================
.text$x:000036E8
.text$x:000036E8
.text$x:000036E8 __unwindfunclet$??1CBase@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:000036E8                                         ; DATA XREF: .xdata$x:00003710o
.text$x:000036E8                 mov     ecx, [ebp-10h]
.text$x:000036EB                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000036EB __unwindfunclet$??1CBase@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:000036EB
.text$x:000036F0
.text$x:000036F0 ; =============== S U B R O U T I N E =======================================
.text$x:000036F0
.text$x:000036F0
.text$x:000036F0 __ehhandler$??1CBase@NBZip2@NCompress@@QAE@XZ proc near
.text$x:000036F0                                         ; DATA XREF: NCompress::NBZip2::CBase::~CBase(void)+5o
.text$x:000036F0
.text$x:000036F0 arg_4           = dword ptr  8
.text$x:000036F0
.text$x:000036F0                 mov     edx, [esp+arg_4]
.text$x:000036F4                 lea     eax, [edx+0Ch]
.text$x:000036F7                 mov     ecx, [edx-8]
.text$x:000036FA                 xor     ecx, eax
.text$x:000036FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003701                 mov     eax, offset __ehfuncinfo$??1CBase@NBZip2@NCompress@@QAE@XZ
.text$x:00003706                 jmp     ___CxxFrameHandler3
.text$x:00003706 __ehhandler$??1CBase@NBZip2@NCompress@@QAE@XZ endp
.text$x:00003706
.text$x:00003706 ; ---------------------------------------------------------------------------
.text$x:0000370B                 align 4
.text$x:0000370B _text$x         ends
.text$x:0000370B
.xdata$x:0000370C ; ===========================================================================
.xdata$x:0000370C
.xdata$x:0000370C ; Segment type: Pure data
.xdata$x:0000370C ; Segment permissions: Read
.xdata$x:0000370C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000370C                 assume cs:_xdata$x
.xdata$x:0000370C                 ;org 370Ch
.xdata$x:0000370C ; COMDAT (pick associative to section at 3680)
.xdata$x:0000370C __unwindtable$??1CBase@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:0000370C                                         ; DATA XREF: .xdata$x:0000371Co
.xdata$x:0000370D                 db 0FFh
.xdata$x:0000370E                 db 0FFh
.xdata$x:0000370F                 db 0FFh
.xdata$x:00003710                 dd offset __unwindfunclet$??1CBase@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00003714 __ehfuncinfo$??1CBase@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003714                                         ; DATA XREF: __ehhandler$??1CBase@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003715                 db    5
.xdata$x:00003716                 db  93h ; ô
.xdata$x:00003717                 db  19h
.xdata$x:00003718                 db    1
.xdata$x:00003719                 db    0
.xdata$x:0000371A                 db    0
.xdata$x:0000371B                 db    0
.xdata$x:0000371C                 dd offset __unwindtable$??1CBase@NBZip2@NCompress@@QAE@XZ
.xdata$x:00003720                 db    0
.xdata$x:00003721                 db    0
.xdata$x:00003722                 db    0
.xdata$x:00003723                 db    0
.xdata$x:00003724                 db    0
.xdata$x:00003725                 db    0
.xdata$x:00003726                 db    0
.xdata$x:00003727                 db    0
.xdata$x:00003728                 db    0
.xdata$x:00003729                 db    0
.xdata$x:0000372A                 db    0
.xdata$x:0000372B                 db    0
.xdata$x:0000372C                 db    0
.xdata$x:0000372D                 db    0
.xdata$x:0000372E                 db    0
.xdata$x:0000372F                 db    0
.xdata$x:00003730                 db    0
.xdata$x:00003731                 db    0
.xdata$x:00003732                 db    0
.xdata$x:00003733                 db    0
.xdata$x:00003734                 db    1
.xdata$x:00003735                 db    0
.xdata$x:00003736                 db    0
.xdata$x:00003737                 db    0
.xdata$x:00003737 _xdata$x        ends
.xdata$x:00003737
.text:00003738 ; ===========================================================================
.text:00003738
.text:00003738 ; Segment type: Pure code
.text:00003738 ; Segment permissions: Read/Execute
.text:00003738 _text           segment para public 'CODE' use32
.text:00003738                 assume cs:_text
.text:00003738                 ;org 3738h
.text:00003738 ; COMDAT (pick any)
.text:00003738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003738
.text:00003738 ; =============== S U B R O U T I N E =======================================
.text:00003738
.text:00003738 ; Attributes: bp-based frame
.text:00003738
.text:00003738 ; public: __thiscall NBitm::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00003738                 public ??1?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ
.text:00003738 ??1?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ proc near
.text:00003738                                         ; CODE XREF: NCompress::NBZip2::CBase::~CBase(void)+3Ap
.text:00003738
.text:00003738 var_4           = dword ptr -4
.text:00003738
.text:00003738                 push    ebp
.text:00003739                 mov     ebp, esp
.text:0000373B                 push    ecx
.text:0000373C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003743                 mov     [ebp+var_4], ecx
.text:00003746                 mov     ecx, [ebp+var_4]
.text:00003749                 add     ecx, 8          ; this
.text:0000374C                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00003751                 add     esp, 4
.text:00003754                 cmp     ebp, esp
.text:00003756                 call    __RTC_CheckEsp
.text:0000375B                 mov     esp, ebp
.text:0000375D                 pop     ebp
.text:0000375E                 retn
.text:0000375E ??1?$CDecoder@VCInBuffer@@@NBitm@@QAE@XZ endp
.text:0000375E
.text:0000375E ; ---------------------------------------------------------------------------
.text:0000375F                 align 10h
.text:0000375F _text           ends
.text:0000375F
.text:00003760 ; ===========================================================================
.text:00003760
.text:00003760 ; Segment type: Pure code
.text:00003760 ; Segment permissions: Read/Execute
.text:00003760 _text           segment para public 'CODE' use32
.text:00003760                 assume cs:_text
.text:00003760                 ;org 3760h
.text:00003760 ; COMDAT (pick any)
.text:00003760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003760
.text:00003760 ; =============== S U B R O U T I N E =======================================
.text:00003760
.text:00003760 ; Attributes: bp-based frame
.text:00003760
.text:00003760 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00003760                 public ??1CInBuffer@@QAE@XZ
.text:00003760 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitm::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+14p
.text:00003760
.text:00003760 var_4           = dword ptr -4
.text:00003760
.text:00003760                 push    ebp
.text:00003761                 mov     ebp, esp
.text:00003763                 push    ecx
.text:00003764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000376B                 mov     [ebp+var_4], ecx
.text:0000376E                 mov     ecx, [ebp+var_4] ; this
.text:00003771                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00003776                 add     esp, 4
.text:00003779                 cmp     ebp, esp
.text:0000377B                 call    __RTC_CheckEsp
.text:00003780                 mov     esp, ebp
.text:00003782                 pop     ebp
.text:00003783                 retn
.text:00003783 ??1CInBuffer@@QAE@XZ endp
.text:00003783
.text:00003783 _text           ends
.text:00003783
.text:00003784 ; ===========================================================================
.text:00003784
.text:00003784 ; Segment type: Pure code
.text:00003784 ; Segment permissions: Read/Execute
.text:00003784 _text           segment para public 'CODE' use32
.text:00003784                 assume cs:_text
.text:00003784                 ;org 3784h
.text:00003784 ; COMDAT (pick any)
.text:00003784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003784
.text:00003784 ; =============== S U B R O U T I N E =======================================
.text:00003784
.text:00003784 ; Attributes: bp-based frame
.text:00003784
.text:00003784 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00003784                 public ??0ICompressCoder@@QAE@XZ
.text:00003784 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+30p
.text:00003784
.text:00003784 var_4           = dword ptr -4
.text:00003784
.text:00003784                 push    ebp
.text:00003785                 mov     ebp, esp
.text:00003787                 push    ecx
.text:00003788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000378F                 mov     [ebp+var_4], ecx
.text:00003792                 mov     ecx, [ebp+var_4]
.text:00003795                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000379A                 mov     eax, [ebp+var_4]
.text:0000379D                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000037A3                 mov     eax, [ebp+var_4]
.text:000037A6                 add     esp, 4
.text:000037A9                 cmp     ebp, esp
.text:000037AB                 call    __RTC_CheckEsp
.text:000037B0                 mov     esp, ebp
.text:000037B2                 pop     ebp
.text:000037B3                 retn
.text:000037B3 ??0ICompressCoder@@QAE@XZ endp
.text:000037B3
.text:000037B3 _text           ends
.text:000037B3
.rdata:000037B4 ; ===========================================================================
.rdata:000037B4
.rdata:000037B4 ; Segment type: Pure data
.rdata:000037B4 ; Segment permissions: Read
.rdata:000037B4 _rdata          segment dword public 'DATA' use32
.rdata:000037B4                 assume cs:_rdata
.rdata:000037B4                 ;org 37B4h
.rdata:000037B4 ; COMDAT (pick largest)
.rdata:000037B4                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000037B8                 public ??_7ICompressCoder@@6B@
.rdata:000037B8 ; const ICompressCoder::`vftable'
.rdata:000037B8 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000037B8                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:000037BC                 dd offset __purecall
.rdata:000037C0                 dd offset __purecall
.rdata:000037C4                 dd offset __purecall
.rdata:000037C4 _rdata          ends
.rdata:000037C4
.rdata$r:000037C8 ; ===========================================================================
.rdata$r:000037C8
.rdata$r:000037C8 ; Segment type: Pure data
.rdata$r:000037C8 ; Segment permissions: Read
.rdata$r:000037C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037C8                 assume cs:_rdata$r
.rdata$r:000037C8                 ;org 37C8h
.rdata$r:000037C8 ; COMDAT (pick any)
.rdata$r:000037C8                 public ??_R4ICompressCoder@@6B@
.rdata$r:000037C8 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:000037C8 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000037B4o
.rdata$r:000037C9                 db    0
.rdata$r:000037CA                 db    0
.rdata$r:000037CB                 db    0
.rdata$r:000037CC                 db    0
.rdata$r:000037CD                 db    0
.rdata$r:000037CE                 db    0
.rdata$r:000037CF                 db    0
.rdata$r:000037D0                 db    0
.rdata$r:000037D1                 db    0
.rdata$r:000037D2                 db    0
.rdata$r:000037D3                 db    0
.rdata$r:000037D4                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000037D8                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037D8 _rdata$r        ends
.rdata$r:000037D8
.text:000037DC ; ===========================================================================
.text:000037DC
.text:000037DC ; Segment type: Pure code
.text:000037DC ; Segment permissions: Read/Execute
.text:000037DC _text           segment para public 'CODE' use32
.text:000037DC                 assume cs:_text
.text:000037DC                 ;org 37DCh
.text:000037DC ; COMDAT (pick any)
.text:000037DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037DC
.text:000037DC ; =============== S U B R O U T I N E =======================================
.text:000037DC
.text:000037DC ; Attributes: bp-based frame
.text:000037DC
.text:000037DC ; _DWORD __thiscall ICompressSetCoderMt::ICompressSetCoderMt(ICompressSetCoderMt *__hidden this)
.text:000037DC                 public ??0ICompressSetCoderMt@@QAE@XZ
.text:000037DC ??0ICompressSetCoderMt@@QAE@XZ proc near
.text:000037DC                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+3Bp
.text:000037DC
.text:000037DC var_4           = dword ptr -4
.text:000037DC
.text:000037DC                 push    ebp
.text:000037DD                 mov     ebp, esp
.text:000037DF                 push    ecx
.text:000037E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037E7                 mov     [ebp+var_4], ecx
.text:000037EA                 mov     ecx, [ebp+var_4]
.text:000037ED                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000037F2                 mov     eax, [ebp+var_4]
.text:000037F5                 mov     dword ptr [eax], offset ??_7ICompressSetCoderMt@@6B@ ; const ICompressSetCoderMt::`vftable'
.text:000037FB                 mov     eax, [ebp+var_4]
.text:000037FE                 add     esp, 4
.text:00003801                 cmp     ebp, esp
.text:00003803                 call    __RTC_CheckEsp
.text:00003808                 mov     esp, ebp
.text:0000380A                 pop     ebp
.text:0000380B                 retn
.text:0000380B ??0ICompressSetCoderMt@@QAE@XZ endp
.text:0000380B
.text:0000380B _text           ends
.text:0000380B
.rdata:0000380C ; ===========================================================================
.rdata:0000380C
.rdata:0000380C ; Segment type: Pure data
.rdata:0000380C ; Segment permissions: Read
.rdata:0000380C _rdata          segment dword public 'DATA' use32
.rdata:0000380C                 assume cs:_rdata
.rdata:0000380C                 ;org 380Ch
.rdata:0000380C ; COMDAT (pick largest)
.rdata:0000380C                 dd offset ??_R4ICompressSetCoderMt@@6B@ ; const ICompressSetCoderMt::`RTTI Complete Object Locator'
.rdata:00003810                 public ??_7ICompressSetCoderMt@@6B@
.rdata:00003810 ; const ICompressSetCoderMt::`vftable'
.rdata:00003810 ??_7ICompressSetCoderMt@@6B@ dd offset __purecall
.rdata:00003810                                         ; DATA XREF: ICompressSetCoderMt::ICompressSetCoderMt(void)+19o
.rdata:00003814                 dd offset __purecall
.rdata:00003818                 dd offset __purecall
.rdata:0000381C                 dd offset __purecall
.rdata:0000381C _rdata          ends
.rdata:0000381C
.rdata$r:00003820 ; ===========================================================================
.rdata$r:00003820
.rdata$r:00003820 ; Segment type: Pure data
.rdata$r:00003820 ; Segment permissions: Read
.rdata$r:00003820 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003820                 assume cs:_rdata$r
.rdata$r:00003820                 ;org 3820h
.rdata$r:00003820 ; COMDAT (pick any)
.rdata$r:00003820                 public ??_R4ICompressSetCoderMt@@6B@
.rdata$r:00003820 ; const ICompressSetCoderMt::`RTTI Complete Object Locator'
.rdata$r:00003820 ??_R4ICompressSetCoderMt@@6B@ db    0   ; DATA XREF: .rdata:0000380Co
.rdata$r:00003821                 db    0
.rdata$r:00003822                 db    0
.rdata$r:00003823                 db    0
.rdata$r:00003824                 db    0
.rdata$r:00003825                 db    0
.rdata$r:00003826                 db    0
.rdata$r:00003827                 db    0
.rdata$r:00003828                 db    0
.rdata$r:00003829                 db    0
.rdata$r:0000382A                 db    0
.rdata$r:0000382B                 db    0
.rdata$r:0000382C                 dd offset ??_R0?AUICompressSetCoderMt@@@8 ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003830                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003830 _rdata$r        ends
.rdata$r:00003830
.text:00003834 ; ===========================================================================
.text:00003834
.text:00003834 ; Segment type: Pure code
.text:00003834 ; Segment permissions: Read/Execute
.text:00003834 _text           segment para public 'CODE' use32
.text:00003834                 assume cs:_text
.text:00003834                 ;org 3834h
.text:00003834 ; COMDAT (pick any)
.text:00003834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003834
.text:00003834 ; =============== S U B R O U T I N E =======================================
.text:00003834
.text:00003834 ; Attributes: bp-based frame
.text:00003834
.text:00003834 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00003834                 public ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003834 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003834                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoder(void)+99p
.text:00003834                                         ; NCompress::NBZip2::CDecoder::CDecoder(void)+BDp
.text:00003834
.text:00003834 var_4           = dword ptr -4
.text:00003834
.text:00003834                 push    ebp
.text:00003835                 mov     ebp, esp
.text:00003837                 push    ecx
.text:00003838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000383F                 mov     [ebp+var_4], ecx
.text:00003842                 mov     ecx, [ebp+var_4] ; this
.text:00003845                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:0000384A                 mov     eax, [ebp+var_4]
.text:0000384D                 add     esp, 4
.text:00003850                 cmp     ebp, esp
.text:00003852                 call    __RTC_CheckEsp
.text:00003857                 mov     esp, ebp
.text:00003859                 pop     ebp
.text:0000385A                 retn
.text:0000385A ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000385A
.text:0000385A ; ---------------------------------------------------------------------------
.text:0000385B                 align 4
.text:0000385B _text           ends
.text:0000385B
.text:0000385C ; ===========================================================================
.text:0000385C
.text:0000385C ; Segment type: Pure code
.text:0000385C ; Segment permissions: Read/Execute
.text:0000385C _text           segment para public 'CODE' use32
.text:0000385C                 assume cs:_text
.text:0000385C                 ;org 385Ch
.text:0000385C ; COMDAT (pick any)
.text:0000385C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000385C
.text:0000385C ; =============== S U B R O U T I N E =======================================
.text:0000385C
.text:0000385C ; Attributes: bp-based frame
.text:0000385C
.text:0000385C ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:0000385C                 public ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000385C ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000385C                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)+11p
.text:0000385C                                         ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)+11p
.text:0000385C
.text:0000385C var_4           = dword ptr -4
.text:0000385C
.text:0000385C                 push    ebp
.text:0000385D                 mov     ebp, esp
.text:0000385F                 push    ecx
.text:00003860                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003867                 mov     [ebp+var_4], ecx
.text:0000386A                 mov     eax, [ebp+var_4]
.text:0000386D                 mov     dword ptr [eax], 0
.text:00003873                 mov     eax, [ebp+var_4]
.text:00003876                 mov     esp, ebp
.text:00003878                 pop     ebp
.text:00003879                 retn
.text:00003879 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003879
.text:00003879 ; ---------------------------------------------------------------------------
.text:0000387A                 align 4
.text:0000387A _text           ends
.text:0000387A
.text:0000387C ; ===========================================================================
.text:0000387C
.text:0000387C ; Segment type: Pure code
.text:0000387C ; Segment permissions: Read/Execute
.text:0000387C _text           segment para public 'CODE' use32
.text:0000387C                 assume cs:_text
.text:0000387C                 ;org 387Ch
.text:0000387C ; COMDAT (pick any)
.text:0000387C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000387C
.text:0000387C ; =============== S U B R O U T I N E =======================================
.text:0000387C
.text:0000387C ; Attributes: bp-based frame
.text:0000387C
.text:0000387C ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:0000387C                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:0000387C ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:0000387C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::~CDecoder(void)+5Cp
.text:0000387C                                         ; NCompress::NBZip2::CDecoder::~CDecoder(void)+80p ...
.text:0000387C
.text:0000387C var_4           = dword ptr -4
.text:0000387C
.text:0000387C                 push    ebp
.text:0000387D                 mov     ebp, esp
.text:0000387F                 push    ecx
.text:00003880                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003887                 mov     [ebp+var_4], ecx
.text:0000388A                 mov     ecx, [ebp+var_4] ; this
.text:0000388D                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00003892                 add     esp, 4
.text:00003895                 cmp     ebp, esp
.text:00003897                 call    __RTC_CheckEsp
.text:0000389C                 mov     esp, ebp
.text:0000389E                 pop     ebp
.text:0000389F                 retn
.text:0000389F ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:0000389F
.text:0000389F _text           ends
.text:0000389F
.text:000038A0 ; ===========================================================================
.text:000038A0
.text:000038A0 ; Segment type: Pure code
.text:000038A0 ; Segment permissions: Read/Execute
.text:000038A0 _text           segment para public 'CODE' use32
.text:000038A0                 assume cs:_text
.text:000038A0                 ;org 38A0h
.text:000038A0 ; COMDAT (pick any)
.text:000038A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038A0
.text:000038A0 ; =============== S U B R O U T I N E =======================================
.text:000038A0
.text:000038A0 ; Attributes: bp-based frame
.text:000038A0
.text:000038A0 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000038A0                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:000038A0 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:000038A0                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:000038A0                                         ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:000038A0
.text:000038A0 var_4           = dword ptr -4
.text:000038A0
.text:000038A0                 push    ebp
.text:000038A1                 mov     ebp, esp
.text:000038A3                 push    ecx
.text:000038A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038AB                 mov     [ebp+var_4], ecx
.text:000038AE                 mov     ecx, [ebp+var_4] ; this
.text:000038B1                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:000038B6                 add     esp, 4
.text:000038B9                 cmp     ebp, esp
.text:000038BB                 call    __RTC_CheckEsp
.text:000038C0                 mov     esp, ebp
.text:000038C2                 pop     ebp
.text:000038C3                 retn
.text:000038C3 ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:000038C3
.text:000038C3 _text           ends
.text:000038C3
.text:000038C4 ; ===========================================================================
.text:000038C4
.text:000038C4 ; Segment type: Pure code
.text:000038C4 ; Segment permissions: Read/Execute
.text:000038C4 _text           segment para public 'CODE' use32
.text:000038C4                 assume cs:_text
.text:000038C4                 ;org 38C4h
.text:000038C4 ; COMDAT (pick any)
.text:000038C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038C4
.text:000038C4 ; =============== S U B R O U T I N E =======================================
.text:000038C4
.text:000038C4 ; Attributes: bp-based frame
.text:000038C4
.text:000038C4 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:000038C4                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:000038C4 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:000038C4                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:000038C4
.text:000038C4 var_4           = dword ptr -4
.text:000038C4
.text:000038C4                 push    ebp
.text:000038C5                 mov     ebp, esp
.text:000038C7                 push    ecx
.text:000038C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038CF                 mov     [ebp+var_4], ecx
.text:000038D2                 mov     eax, [ebp+var_4]
.text:000038D5                 push    eax
.text:000038D6                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:000038DB                 add     esp, 4
.text:000038DE                 cmp     ebp, esp
.text:000038E0                 call    __RTC_CheckEsp
.text:000038E5                 mov     esp, ebp
.text:000038E7                 pop     ebp
.text:000038E8                 retn
.text:000038E8 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000038E8
.text:000038E8 ; ---------------------------------------------------------------------------
.text:000038E9                 align 4
.text:000038E9 _text           ends
.text:000038E9
.text:000038EC ; ===========================================================================
.text:000038EC
.text:000038EC ; Segment type: Pure code
.text:000038EC ; Segment permissions: Read/Execute
.text:000038EC _text           segment para public 'CODE' use32
.text:000038EC                 assume cs:_text
.text:000038EC                 ;org 38ECh
.text:000038EC ; COMDAT (pick any)
.text:000038EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038EC
.text:000038EC ; =============== S U B R O U T I N E =======================================
.text:000038EC
.text:000038EC ; Attributes: bp-based frame
.text:000038EC
.text:000038EC ; public: __thiscall IUnknown::IUnknown(void)
.text:000038EC                 public ??0IUnknown@@QAE@XZ
.text:000038EC ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:000038EC                                         ; ICompressSetCoderMt::ICompressSetCoderMt(void)+11p
.text:000038EC
.text:000038EC var_4           = dword ptr -4
.text:000038EC
.text:000038EC                 push    ebp
.text:000038ED                 mov     ebp, esp
.text:000038EF                 push    ecx
.text:000038F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038F7                 mov     [ebp+var_4], ecx
.text:000038FA                 mov     eax, [ebp+var_4]
.text:000038FD                 mov     esp, ebp
.text:000038FF                 pop     ebp
.text:00003900                 retn
.text:00003900 ??0IUnknown@@QAE@XZ endp
.text:00003900
.text:00003900 ; ---------------------------------------------------------------------------
.text:00003901                 align 4
.text:00003901 _text           ends
.text:00003901
.text:00003904 ; ===========================================================================
.text:00003904
.text:00003904 ; Segment type: Pure code
.text:00003904 ; Segment permissions: Read/Execute
.text:00003904 _text           segment para public 'CODE' use32
.text:00003904                 assume cs:_text
.text:00003904                 ;org 3904h
.text:00003904 ; COMDAT (pick any)
.text:00003904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003904
.text:00003904 ; =============== S U B R O U T I N E =======================================
.text:00003904
.text:00003904 ; Attributes: bp-based frame
.text:00003904
.text:00003904 ; unsigned int __thiscall NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00003904                 public ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003904 ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003904                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+49p
.text:00003904                                         ; NCompress::NBZip2::CDecoder::Create(void)+68p
.text:00003904
.text:00003904 var_4           = dword ptr -4
.text:00003904
.text:00003904                 push    ebp
.text:00003905                 mov     ebp, esp
.text:00003907                 push    ecx
.text:00003908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000390F                 mov     [ebp+var_4], ecx
.text:00003912                 mov     ecx, [ebp+var_4] ; this
.text:00003915                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:0000391A                 movzx   eax, al
.text:0000391D                 test    eax, eax
.text:0000391F                 jz      short loc_3925
.text:00003921                 xor     eax, eax
.text:00003923                 jmp     short loc_392E
.text:00003925 ; ---------------------------------------------------------------------------
.text:00003925
.text:00003925 loc_3925:                               ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+1Bj
.text:00003925                 mov     ecx, [ebp+var_4]
.text:00003928                 push    ecx
.text:00003929                 call    _ManualResetEvent_CreateNotSignaled@4 ; ManualResetEvent_CreateNotSignaled(x)
.text:0000392E
.text:0000392E loc_392E:                               ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+1Fj
.text:0000392E                 add     esp, 4
.text:00003931                 cmp     ebp, esp
.text:00003933                 call    __RTC_CheckEsp
.text:00003938                 mov     esp, ebp
.text:0000393A                 pop     ebp
.text:0000393B                 retn
.text:0000393B ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:0000393B
.text:0000393B _text           ends
.text:0000393B
.text:0000393C ; ===========================================================================
.text:0000393C
.text:0000393C ; Segment type: Pure code
.text:0000393C ; Segment permissions: Read/Execute
.text:0000393C _text           segment para public 'CODE' use32
.text:0000393C                 assume cs:_text
.text:0000393C                 ;org 393Ch
.text:0000393C ; COMDAT (pick any)
.text:0000393C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000393C
.text:0000393C ; =============== S U B R O U T I N E =======================================
.text:0000393C
.text:0000393C ; Attributes: bp-based frame
.text:0000393C
.text:0000393C ; bool __thiscall NWindows::NSynchronization::CBaseEvent::IsCreated(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:0000393C                 public ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ
.text:0000393C ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ proc near
.text:0000393C                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+11p
.text:0000393C                                         ; NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+11p
.text:0000393C
.text:0000393C var_4           = dword ptr -4
.text:0000393C
.text:0000393C                 push    ebp
.text:0000393D                 mov     ebp, esp
.text:0000393F                 push    ecx
.text:00003940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003947                 mov     [ebp+var_4], ecx
.text:0000394A                 mov     eax, [ebp+var_4]
.text:0000394D                 xor     ecx, ecx
.text:0000394F                 cmp     dword ptr [eax], 0
.text:00003952                 setnz   cl
.text:00003955                 neg     ecx
.text:00003957                 sbb     ecx, ecx
.text:00003959                 neg     ecx
.text:0000395B                 mov     al, cl
.text:0000395D                 mov     esp, ebp
.text:0000395F                 pop     ebp
.text:00003960                 retn
.text:00003960 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ endp
.text:00003960
.text:00003960 ; ---------------------------------------------------------------------------
.text:00003961                 align 4
.text:00003961 _text           ends
.text:00003961
.text:00003964 ; ===========================================================================
.text:00003964
.text:00003964 ; Segment type: Pure code
.text:00003964 ; Segment permissions: Read/Execute
.text:00003964 _text           segment para public 'CODE' use32
.text:00003964                 assume cs:_text
.text:00003964                 ;org 3964h
.text:00003964 ; COMDAT (pick any)
.text:00003964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003964
.text:00003964 ; =============== S U B R O U T I N E =======================================
.text:00003964
.text:00003964 ; Attributes: bp-based frame
.text:00003964
.text:00003964 ; _DWORD __thiscall NCompress::NBZip2::CState::CState(NCompress::NBZip2::CState *__hidden this)
.text:00003964                 public ??0CState@NBZip2@NCompress@@QAE@XZ
.text:00003964 ??0CState@NBZip2@NCompress@@QAE@XZ proc near
.text:00003964                                         ; DATA XREF: NCompress::NBZip2::CDecoder::Create(void)+135o
.text:00003964
.text:00003964 var_10          = dword ptr -10h
.text:00003964 var_C           = dword ptr -0Ch
.text:00003964 var_4           = dword ptr -4
.text:00003964
.text:00003964                 push    ebp
.text:00003965                 mov     ebp, esp
.text:00003967                 push    0FFFFFFFFh
.text:00003969                 push    offset __ehhandler$??0CState@NBZip2@NCompress@@QAE@XZ
.text:0000396E                 mov     eax, large fs:0
.text:00003974                 push    eax
.text:00003975                 push    ecx
.text:00003976                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000397D                 mov     eax, dword ptr ds:___security_cookie
.text:00003982                 xor     eax, ebp
.text:00003984                 push    eax
.text:00003985                 lea     eax, [ebp+var_C]
.text:00003988                 mov     large fs:0, eax
.text:0000398E                 mov     [ebp+var_10], ecx
.text:00003991                 mov     eax, [ebp+var_10]
.text:00003994                 mov     dword ptr [eax], 0
.text:0000399A                 mov     ecx, [ebp+var_10]
.text:0000399D                 add     ecx, 8          ; this
.text:000039A0                 call    ??0CThread@NWindows@@QAE@XZ ; NWindows::CThread::CThread(void)
.text:000039A5                 mov     [ebp+var_4], 0
.text:000039AC                 mov     ecx, [ebp+var_10]
.text:000039AF                 add     ecx, 10h        ; this
.text:000039B2                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000039B7                 mov     byte ptr [ebp+var_4], 1
.text:000039BB                 mov     ecx, [ebp+var_10]
.text:000039BE                 add     ecx, 14h        ; this
.text:000039C1                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000039C6                 mov     byte ptr [ebp+var_4], 2
.text:000039CA                 mov     ecx, [ebp+var_10]
.text:000039CD                 add     ecx, 18h        ; this
.text:000039D0                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:000039D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000039DC                 mov     eax, [ebp+var_10]
.text:000039DF                 mov     ecx, [ebp+var_C]
.text:000039E2                 mov     large fs:0, ecx
.text:000039E9                 pop     ecx
.text:000039EA                 add     esp, 10h
.text:000039ED                 cmp     ebp, esp
.text:000039EF                 call    __RTC_CheckEsp
.text:000039F4                 mov     esp, ebp
.text:000039F6                 pop     ebp
.text:000039F7                 retn
.text:000039F7 ??0CState@NBZip2@NCompress@@QAE@XZ endp
.text:000039F7
.text:000039F7 _text           ends
.text:000039F7
.text$x:000039F8 ; ===========================================================================
.text$x:000039F8
.text$x:000039F8 ; Segment type: Pure code
.text$x:000039F8 ; Segment permissions: Read/Execute
.text$x:000039F8 _text$x         segment para public 'CODE' use32
.text$x:000039F8                 assume cs:_text$x
.text$x:000039F8                 ;org 39F8h
.text$x:000039F8 ; COMDAT (pick associative to section at 3964)
.text$x:000039F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000039F8
.text$x:000039F8 ; =============== S U B R O U T I N E =======================================
.text$x:000039F8
.text$x:000039F8
.text$x:000039F8 __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:000039F8                                         ; DATA XREF: .xdata$x:00003A38o
.text$x:000039F8                 mov     ecx, [ebp-10h]
.text$x:000039FB                 add     ecx, 8          ; this
.text$x:000039FE                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:000039FE __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:000039FE
.text$x:00003A03
.text$x:00003A03 ; =============== S U B R O U T I N E =======================================
.text$x:00003A03
.text$x:00003A03
.text$x:00003A03 __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00003A03                                         ; DATA XREF: .xdata$x:00003A40o
.text$x:00003A03                 mov     ecx, [ebp-10h]
.text$x:00003A06                 add     ecx, 10h        ; this
.text$x:00003A09                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003A09 __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00003A09
.text$x:00003A0E
.text$x:00003A0E ; =============== S U B R O U T I N E =======================================
.text$x:00003A0E
.text$x:00003A0E
.text$x:00003A0E __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00003A0E                                         ; DATA XREF: .xdata$x:00003A48o
.text$x:00003A0E                 mov     ecx, [ebp-10h]
.text$x:00003A11                 add     ecx, 14h        ; this
.text$x:00003A14                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003A14 __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00003A14
.text$x:00003A19
.text$x:00003A19 ; =============== S U B R O U T I N E =======================================
.text$x:00003A19
.text$x:00003A19
.text$x:00003A19 __ehhandler$??0CState@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00003A19                                         ; DATA XREF: NCompress::NBZip2::CState::CState(void)+5o
.text$x:00003A19
.text$x:00003A19 arg_4           = dword ptr  8
.text$x:00003A19
.text$x:00003A19                 mov     edx, [esp+arg_4]
.text$x:00003A1D                 lea     eax, [edx+0Ch]
.text$x:00003A20                 mov     ecx, [edx-8]
.text$x:00003A23                 xor     ecx, eax
.text$x:00003A25                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A2A                 mov     eax, offset __ehfuncinfo$??0CState@NBZip2@NCompress@@QAE@XZ
.text$x:00003A2F                 jmp     ___CxxFrameHandler3
.text$x:00003A2F __ehhandler$??0CState@NBZip2@NCompress@@QAE@XZ endp
.text$x:00003A2F
.text$x:00003A2F _text$x         ends
.text$x:00003A2F
.xdata$x:00003A34 ; ===========================================================================
.xdata$x:00003A34
.xdata$x:00003A34 ; Segment type: Pure data
.xdata$x:00003A34 ; Segment permissions: Read
.xdata$x:00003A34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003A34                 assume cs:_xdata$x
.xdata$x:00003A34                 ;org 3A34h
.xdata$x:00003A34 ; COMDAT (pick associative to section at 3964)
.xdata$x:00003A34 __unwindtable$??0CState@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00003A34                                         ; DATA XREF: .xdata$x:00003A54o
.xdata$x:00003A35                 db 0FFh
.xdata$x:00003A36                 db 0FFh
.xdata$x:00003A37                 db 0FFh
.xdata$x:00003A38                 dd offset __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00003A3C                 align 10h
.xdata$x:00003A40                 dd offset __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00003A44                 db    1
.xdata$x:00003A45                 db    0
.xdata$x:00003A46                 db    0
.xdata$x:00003A47                 db    0
.xdata$x:00003A48                 dd offset __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00003A4C __ehfuncinfo$??0CState@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003A4C                                         ; DATA XREF: __ehhandler$??0CState@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003A4D                 db    5
.xdata$x:00003A4E                 db  93h ; ô
.xdata$x:00003A4F                 db  19h
.xdata$x:00003A50                 db    3
.xdata$x:00003A51                 db    0
.xdata$x:00003A52                 db    0
.xdata$x:00003A53                 db    0
.xdata$x:00003A54                 dd offset __unwindtable$??0CState@NBZip2@NCompress@@QAE@XZ
.xdata$x:00003A58                 db    0
.xdata$x:00003A59                 db    0
.xdata$x:00003A5A                 db    0
.xdata$x:00003A5B                 db    0
.xdata$x:00003A5C                 db    0
.xdata$x:00003A5D                 db    0
.xdata$x:00003A5E                 db    0
.xdata$x:00003A5F                 db    0
.xdata$x:00003A60                 db    0
.xdata$x:00003A61                 db    0
.xdata$x:00003A62                 db    0
.xdata$x:00003A63                 db    0
.xdata$x:00003A64                 db    0
.xdata$x:00003A65                 db    0
.xdata$x:00003A66                 db    0
.xdata$x:00003A67                 db    0
.xdata$x:00003A68                 db    0
.xdata$x:00003A69                 db    0
.xdata$x:00003A6A                 db    0
.xdata$x:00003A6B                 db    0
.xdata$x:00003A6C                 db    1
.xdata$x:00003A6D                 db    0
.xdata$x:00003A6E                 db    0
.xdata$x:00003A6F                 db    0
.xdata$x:00003A6F _xdata$x        ends
.xdata$x:00003A6F
.text:00003A70 ; ===========================================================================
.text:00003A70
.text:00003A70 ; Segment type: Pure code
.text:00003A70 ; Segment permissions: Read/Execute
.text:00003A70 _text           segment para public 'CODE' use32
.text:00003A70                 assume cs:_text
.text:00003A70                 ;org 3A70h
.text:00003A70 ; COMDAT (pick any)
.text:00003A70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A70
.text:00003A70 ; =============== S U B R O U T I N E =======================================
.text:00003A70
.text:00003A70 ; Attributes: bp-based frame
.text:00003A70
.text:00003A70 ; _DWORD __thiscall NWindows::CThread::CThread(NWindows::CThread *__hidden this)
.text:00003A70                 public ??0CThread@NWindows@@QAE@XZ
.text:00003A70 ??0CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: NCompress::NBZip2::CState::CState(void)+3Cp
.text:00003A70
.text:00003A70 var_4           = dword ptr -4
.text:00003A70
.text:00003A70                 push    ebp
.text:00003A71                 mov     ebp, esp
.text:00003A73                 push    ecx
.text:00003A74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A7B                 mov     [ebp+var_4], ecx
.text:00003A7E                 mov     eax, [ebp+var_4]
.text:00003A81                 mov     dword ptr [eax], 0
.text:00003A87                 mov     eax, [ebp+var_4]
.text:00003A8A                 mov     esp, ebp
.text:00003A8C                 pop     ebp
.text:00003A8D                 retn
.text:00003A8D ??0CThread@NWindows@@QAE@XZ endp
.text:00003A8D
.text:00003A8D ; ---------------------------------------------------------------------------
.text:00003A8E                 align 10h
.text:00003A8E _text           ends
.text:00003A8E
.text:00003A90 ; ===========================================================================
.text:00003A90
.text:00003A90 ; Segment type: Pure code
.text:00003A90 ; Segment permissions: Read/Execute
.text:00003A90 _text           segment para public 'CODE' use32
.text:00003A90                 assume cs:_text
.text:00003A90                 ;org 3A90h
.text:00003A90 ; COMDAT (pick any)
.text:00003A90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A90
.text:00003A90 ; =============== S U B R O U T I N E =======================================
.text:00003A90
.text:00003A90 ; Attributes: bp-based frame
.text:00003A90
.text:00003A90 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00003A90                 public ??1CThread@NWindows@@QAE@XZ
.text:00003A90 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$0+6j
.text:00003A90                                         ; NCompress::NBZip2::CState::~CState(void)+76p ...
.text:00003A90
.text:00003A90 var_4           = dword ptr -4
.text:00003A90
.text:00003A90                 push    ebp
.text:00003A91                 mov     ebp, esp
.text:00003A93                 push    ecx
.text:00003A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A9B                 mov     [ebp+var_4], ecx
.text:00003A9E                 mov     ecx, [ebp+var_4] ; this
.text:00003AA1                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00003AA6                 add     esp, 4
.text:00003AA9                 cmp     ebp, esp
.text:00003AAB                 call    __RTC_CheckEsp
.text:00003AB0                 mov     esp, ebp
.text:00003AB2                 pop     ebp
.text:00003AB3                 retn
.text:00003AB3 ??1CThread@NWindows@@QAE@XZ endp
.text:00003AB3
.text:00003AB3 _text           ends
.text:00003AB3
.text:00003AB4 ; ===========================================================================
.text:00003AB4
.text:00003AB4 ; Segment type: Pure code
.text:00003AB4 ; Segment permissions: Read/Execute
.text:00003AB4 _text           segment para public 'CODE' use32
.text:00003AB4                 assume cs:_text
.text:00003AB4                 ;org 3AB4h
.text:00003AB4 ; COMDAT (pick any)
.text:00003AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003AB4
.text:00003AB4 ; =============== S U B R O U T I N E =======================================
.text:00003AB4
.text:00003AB4 ; Attributes: bp-based frame
.text:00003AB4
.text:00003AB4 ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:00003AB4                 public ?Close@CThread@NWindows@@QAEIXZ
.text:00003AB4 ?Close@CThread@NWindows@@QAEIXZ proc near
.text:00003AB4                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:00003AB4
.text:00003AB4 var_4           = dword ptr -4
.text:00003AB4
.text:00003AB4                 push    ebp
.text:00003AB5                 mov     ebp, esp
.text:00003AB7                 push    ecx
.text:00003AB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ABF                 mov     [ebp+var_4], ecx
.text:00003AC2                 mov     eax, [ebp+var_4]
.text:00003AC5                 push    eax
.text:00003AC6                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00003ACB                 add     esp, 4
.text:00003ACE                 cmp     ebp, esp
.text:00003AD0                 call    __RTC_CheckEsp
.text:00003AD5                 mov     esp, ebp
.text:00003AD7                 pop     ebp
.text:00003AD8                 retn
.text:00003AD8 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00003AD8
.text:00003AD8 ; ---------------------------------------------------------------------------
.text:00003AD9                 align 4
.text:00003AD9 _text           ends
.text:00003AD9
.text:00003ADC ; ===========================================================================
.text:00003ADC
.text:00003ADC ; Segment type: Pure code
.text:00003ADC ; Segment permissions: Read/Execute
.text:00003ADC _text           segment para public 'CODE' use32
.text:00003ADC                 assume cs:_text
.text:00003ADC                 ;org 3ADCh
.text:00003ADC ; COMDAT (pick any)
.text:00003ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003ADC
.text:00003ADC ; =============== S U B R O U T I N E =======================================
.text:00003ADC
.text:00003ADC ; Attributes: bp-based frame
.text:00003ADC
.text:00003ADC ; _DWORD __thiscall NCompress::NBZip2::CState::~CState(NCompress::NBZip2::CState *__hidden this)
.text:00003ADC                 public ??1CState@NBZip2@NCompress@@QAE@XZ
.text:00003ADC ??1CState@NBZip2@NCompress@@QAE@XZ proc near
.text:00003ADC                                         ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+52p
.text:00003ADC                                         ; DATA XREF: NCompress::NBZip2::CDecoder::Create(void)+130o ...
.text:00003ADC
.text:00003ADC var_10          = dword ptr -10h
.text:00003ADC var_C           = dword ptr -0Ch
.text:00003ADC var_4           = dword ptr -4
.text:00003ADC
.text:00003ADC                 push    ebp
.text:00003ADD                 mov     ebp, esp
.text:00003ADF                 push    0FFFFFFFFh
.text:00003AE1                 push    offset __ehhandler$??1CState@NBZip2@NCompress@@QAE@XZ
.text:00003AE6                 mov     eax, large fs:0
.text:00003AEC                 push    eax
.text:00003AED                 push    ecx
.text:00003AEE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003AF5                 mov     eax, dword ptr ds:___security_cookie
.text:00003AFA                 xor     eax, ebp
.text:00003AFC                 push    eax
.text:00003AFD                 lea     eax, [ebp+var_C]
.text:00003B00                 mov     large fs:0, eax
.text:00003B06                 mov     [ebp+var_10], ecx
.text:00003B09                 mov     [ebp+var_4], 3
.text:00003B10                 mov     ecx, [ebp+var_10] ; this
.text:00003B13                 call    ?Free@CState@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CState::Free(void)
.text:00003B18                 mov     byte ptr [ebp+var_4], 2
.text:00003B1C                 mov     ecx, [ebp+var_10]
.text:00003B1F                 add     ecx, 18h        ; this
.text:00003B22                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003B27                 mov     byte ptr [ebp+var_4], 1
.text:00003B2B                 mov     ecx, [ebp+var_10]
.text:00003B2E                 add     ecx, 14h        ; this
.text:00003B31                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003B36                 mov     byte ptr [ebp+var_4], 0
.text:00003B3A                 mov     ecx, [ebp+var_10]
.text:00003B3D                 add     ecx, 10h        ; this
.text:00003B40                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003B45                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003B4C                 mov     ecx, [ebp+var_10]
.text:00003B4F                 add     ecx, 8          ; this
.text:00003B52                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00003B57                 mov     ecx, [ebp+var_C]
.text:00003B5A                 mov     large fs:0, ecx
.text:00003B61                 pop     ecx
.text:00003B62                 add     esp, 10h
.text:00003B65                 cmp     ebp, esp
.text:00003B67                 call    __RTC_CheckEsp
.text:00003B6C                 mov     esp, ebp
.text:00003B6E                 pop     ebp
.text:00003B6F                 retn
.text:00003B6F ??1CState@NBZip2@NCompress@@QAE@XZ endp
.text:00003B6F
.text:00003B6F _text           ends
.text:00003B6F
.text$x:00003B70 ; ===========================================================================
.text$x:00003B70
.text$x:00003B70 ; Segment type: Pure code
.text$x:00003B70 ; Segment permissions: Read/Execute
.text$x:00003B70 _text$x         segment para public 'CODE' use32
.text$x:00003B70                 assume cs:_text$x
.text$x:00003B70                 ;org 3B70h
.text$x:00003B70 ; COMDAT (pick associative to section at 3ADC)
.text$x:00003B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003B70
.text$x:00003B70 ; =============== S U B R O U T I N E =======================================
.text$x:00003B70
.text$x:00003B70
.text$x:00003B70 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00003B70                                         ; DATA XREF: .xdata$x:00003BBCo
.text$x:00003B70                 mov     ecx, [ebp-10h]
.text$x:00003B73                 add     ecx, 8          ; this
.text$x:00003B76                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00003B76 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00003B76
.text$x:00003B7B
.text$x:00003B7B ; =============== S U B R O U T I N E =======================================
.text$x:00003B7B
.text$x:00003B7B
.text$x:00003B7B __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00003B7B                                         ; DATA XREF: .xdata$x:00003BC4o
.text$x:00003B7B                 mov     ecx, [ebp-10h]
.text$x:00003B7E                 add     ecx, 10h        ; this
.text$x:00003B81                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003B81 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00003B81
.text$x:00003B86
.text$x:00003B86 ; =============== S U B R O U T I N E =======================================
.text$x:00003B86
.text$x:00003B86
.text$x:00003B86 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00003B86                                         ; DATA XREF: .xdata$x:00003BCCo
.text$x:00003B86                 mov     ecx, [ebp-10h]
.text$x:00003B89                 add     ecx, 14h        ; this
.text$x:00003B8C                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003B8C __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00003B8C
.text$x:00003B91
.text$x:00003B91 ; =============== S U B R O U T I N E =======================================
.text$x:00003B91
.text$x:00003B91
.text$x:00003B91 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00003B91                                         ; DATA XREF: .xdata$x:00003BD4o
.text$x:00003B91                 mov     ecx, [ebp-10h]
.text$x:00003B94                 add     ecx, 18h        ; this
.text$x:00003B97                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003B97 __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00003B97
.text$x:00003B9C
.text$x:00003B9C ; =============== S U B R O U T I N E =======================================
.text$x:00003B9C
.text$x:00003B9C
.text$x:00003B9C __ehhandler$??1CState@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00003B9C                                         ; DATA XREF: NCompress::NBZip2::CState::~CState(void)+5o
.text$x:00003B9C
.text$x:00003B9C arg_4           = dword ptr  8
.text$x:00003B9C
.text$x:00003B9C                 mov     edx, [esp+arg_4]
.text$x:00003BA0                 lea     eax, [edx+0Ch]
.text$x:00003BA3                 mov     ecx, [edx-8]
.text$x:00003BA6                 xor     ecx, eax
.text$x:00003BA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BAD                 mov     eax, offset __ehfuncinfo$??1CState@NBZip2@NCompress@@QAE@XZ
.text$x:00003BB2                 jmp     ___CxxFrameHandler3
.text$x:00003BB2 __ehhandler$??1CState@NBZip2@NCompress@@QAE@XZ endp
.text$x:00003BB2
.text$x:00003BB2 ; ---------------------------------------------------------------------------
.text$x:00003BB7                 align 4
.text$x:00003BB7 _text$x         ends
.text$x:00003BB7
.xdata$x:00003BB8 ; ===========================================================================
.xdata$x:00003BB8
.xdata$x:00003BB8 ; Segment type: Pure data
.xdata$x:00003BB8 ; Segment permissions: Read
.xdata$x:00003BB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003BB8                 assume cs:_xdata$x
.xdata$x:00003BB8                 ;org 3BB8h
.xdata$x:00003BB8 ; COMDAT (pick associative to section at 3ADC)
.xdata$x:00003BB8 __unwindtable$??1CState@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00003BB8                                         ; DATA XREF: .xdata$x:00003BE0o
.xdata$x:00003BB9                 db 0FFh
.xdata$x:00003BBA                 db 0FFh
.xdata$x:00003BBB                 db 0FFh
.xdata$x:00003BBC                 dd offset __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00003BC0                 db    0
.xdata$x:00003BC1                 db    0
.xdata$x:00003BC2                 db    0
.xdata$x:00003BC3                 db    0
.xdata$x:00003BC4                 dd offset __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00003BC8                 db    1
.xdata$x:00003BC9                 db    0
.xdata$x:00003BCA                 db    0
.xdata$x:00003BCB                 db    0
.xdata$x:00003BCC                 dd offset __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00003BD0                 db    2
.xdata$x:00003BD1                 db    0
.xdata$x:00003BD2                 db    0
.xdata$x:00003BD3                 db    0
.xdata$x:00003BD4                 dd offset __unwindfunclet$??1CState@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00003BD8 __ehfuncinfo$??1CState@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003BD8                                         ; DATA XREF: __ehhandler$??1CState@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003BD9                 db    5
.xdata$x:00003BDA                 db  93h ; ô
.xdata$x:00003BDB                 db  19h
.xdata$x:00003BDC                 db    4
.xdata$x:00003BDD                 db    0
.xdata$x:00003BDE                 db    0
.xdata$x:00003BDF                 db    0
.xdata$x:00003BE0                 dd offset __unwindtable$??1CState@NBZip2@NCompress@@QAE@XZ
.xdata$x:00003BE4                 db    0
.xdata$x:00003BE5                 db    0
.xdata$x:00003BE6                 db    0
.xdata$x:00003BE7                 db    0
.xdata$x:00003BE8                 db    0
.xdata$x:00003BE9                 db    0
.xdata$x:00003BEA                 db    0
.xdata$x:00003BEB                 db    0
.xdata$x:00003BEC                 db    0
.xdata$x:00003BED                 db    0
.xdata$x:00003BEE                 db    0
.xdata$x:00003BEF                 db    0
.xdata$x:00003BF0                 db    0
.xdata$x:00003BF1                 db    0
.xdata$x:00003BF2                 db    0
.xdata$x:00003BF3                 db    0
.xdata$x:00003BF4                 db    0
.xdata$x:00003BF5                 db    0
.xdata$x:00003BF6                 db    0
.xdata$x:00003BF7                 db    0
.xdata$x:00003BF8                 db    1
.xdata$x:00003BF9                 db    0
.xdata$x:00003BFA                 db    0
.xdata$x:00003BFB                 db    0
.xdata$x:00003BFB _xdata$x        ends
.xdata$x:00003BFB
.text:00003BFC ; ===========================================================================
.text:00003BFC
.text:00003BFC ; Segment type: Pure code
.text:00003BFC ; Segment permissions: Read/Execute
.text:00003BFC _text           segment para public 'CODE' use32
.text:00003BFC                 assume cs:_text
.text:00003BFC                 ;org 3BFCh
.text:00003BFC ; COMDAT (pick any)
.text:00003BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BFC
.text:00003BFC ; =============== S U B R O U T I N E =======================================
.text:00003BFC
.text:00003BFC ; Attributes: bp-based frame
.text:00003BFC
.text:00003BFC ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00003BFC                 public ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003BFC ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003BFC                                         ; CODE XREF: NCompress::NBZip2::CState::CState(void)+4Ep
.text:00003BFC                                         ; NCompress::NBZip2::CState::CState(void)+5Dp ...
.text:00003BFC
.text:00003BFC var_4           = dword ptr -4
.text:00003BFC
.text:00003BFC                 push    ebp
.text:00003BFD                 mov     ebp, esp
.text:00003BFF                 push    ecx
.text:00003C00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C07                 mov     [ebp+var_4], ecx
.text:00003C0A                 mov     ecx, [ebp+var_4] ; this
.text:00003C0D                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:00003C12                 mov     eax, [ebp+var_4]
.text:00003C15                 add     esp, 4
.text:00003C18                 cmp     ebp, esp
.text:00003C1A                 call    __RTC_CheckEsp
.text:00003C1F                 mov     esp, ebp
.text:00003C21                 pop     ebp
.text:00003C22                 retn
.text:00003C22 ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003C22
.text:00003C22 ; ---------------------------------------------------------------------------
.text:00003C23                 align 4
.text:00003C23 _text           ends
.text:00003C23
.text:00003C24 ; ===========================================================================
.text:00003C24
.text:00003C24 ; Segment type: Pure code
.text:00003C24 ; Segment permissions: Read/Execute
.text:00003C24 _text           segment para public 'CODE' use32
.text:00003C24                 assume cs:_text
.text:00003C24                 ;org 3C24h
.text:00003C24 ; COMDAT (pick any)
.text:00003C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C24
.text:00003C24 ; =============== S U B R O U T I N E =======================================
.text:00003C24
.text:00003C24 ; Attributes: bp-based frame
.text:00003C24
.text:00003C24 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00003C24                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003C24 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003C24                                         ; CODE XREF: __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$1+6j
.text:00003C24                                         ; __unwindfunclet$??0CState@NBZip2@NCompress@@QAE@XZ$2+6j ...
.text:00003C24
.text:00003C24 var_4           = dword ptr -4
.text:00003C24
.text:00003C24                 push    ebp
.text:00003C25                 mov     ebp, esp
.text:00003C27                 push    ecx
.text:00003C28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C2F                 mov     [ebp+var_4], ecx
.text:00003C32                 mov     ecx, [ebp+var_4] ; this
.text:00003C35                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00003C3A                 add     esp, 4
.text:00003C3D                 cmp     ebp, esp
.text:00003C3F                 call    __RTC_CheckEsp
.text:00003C44                 mov     esp, ebp
.text:00003C46                 pop     ebp
.text:00003C47                 retn
.text:00003C47 ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003C47
.text:00003C47 _text           ends
.text:00003C47
.text:00003C48 ; ===========================================================================
.text:00003C48
.text:00003C48 ; Segment type: Pure code
.text:00003C48 ; Segment permissions: Read/Execute
.text:00003C48 _text           segment para public 'CODE' use32
.text:00003C48                 assume cs:_text
.text:00003C48                 ;org 3C48h
.text:00003C48 ; COMDAT (pick any)
.text:00003C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C48
.text:00003C48 ; =============== S U B R O U T I N E =======================================
.text:00003C48
.text:00003C48 ; Attributes: bp-based frame
.text:00003C48
.text:00003C48 ; public: void * __thiscall NCompress::NBZip2::CState::`vector deleting destructor'(unsigned int)
.text:00003C48                 public ??_ECState@NBZip2@NCompress@@QAEPAXI@Z
.text:00003C48 ??_ECState@NBZip2@NCompress@@QAEPAXI@Z proc near
.text:00003C48                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+BEp
.text:00003C48
.text:00003C48 var_4           = dword ptr -4
.text:00003C48 arg_0           = dword ptr  8
.text:00003C48
.text:00003C48                 push    ebp
.text:00003C49                 mov     ebp, esp
.text:00003C4B                 push    ecx
.text:00003C4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C53                 mov     [ebp+var_4], ecx
.text:00003C56                 mov     eax, [ebp+arg_0]
.text:00003C59                 and     eax, 2
.text:00003C5C                 jz      short loc_3C97
.text:00003C5E                 push    offset ??1CState@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CState::~CState(void)
.text:00003C63                 mov     ecx, [ebp+var_4]
.text:00003C66                 mov     edx, [ecx-4]
.text:00003C69                 push    edx
.text:00003C6A                 push    11Ch
.text:00003C6F                 mov     eax, [ebp+var_4]
.text:00003C72                 push    eax
.text:00003C73                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00003C78                 mov     ecx, [ebp+arg_0]
.text:00003C7B                 and     ecx, 1
.text:00003C7E                 jz      short loc_3C8F
.text:00003C80                 mov     edx, [ebp+var_4]
.text:00003C83                 sub     edx, 4
.text:00003C86                 push    edx             ; void *
.text:00003C87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003C8C                 add     esp, 4
.text:00003C8F
.text:00003C8F loc_3C8F:                               ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+36j
.text:00003C8F                 mov     eax, [ebp+var_4]
.text:00003C92                 sub     eax, 4
.text:00003C95                 jmp     short loc_3CB6
.text:00003C97 ; ---------------------------------------------------------------------------
.text:00003C97
.text:00003C97 loc_3C97:                               ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+14j
.text:00003C97                 mov     ecx, [ebp+var_4] ; this
.text:00003C9A                 call    ??1CState@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CState::~CState(void)
.text:00003C9F                 mov     eax, [ebp+arg_0]
.text:00003CA2                 and     eax, 1
.text:00003CA5                 jz      short loc_3CB3
.text:00003CA7                 mov     ecx, [ebp+var_4]
.text:00003CAA                 push    ecx             ; void *
.text:00003CAB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003CB0                 add     esp, 4
.text:00003CB3
.text:00003CB3 loc_3CB3:                               ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+5Dj
.text:00003CB3                 mov     eax, [ebp+var_4]
.text:00003CB6
.text:00003CB6 loc_3CB6:                               ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+4Dj
.text:00003CB6                 add     esp, 4
.text:00003CB9                 cmp     ebp, esp
.text:00003CBB                 call    __RTC_CheckEsp
.text:00003CC0                 mov     esp, ebp
.text:00003CC2                 pop     ebp
.text:00003CC3                 retn    4
.text:00003CC3 ??_ECState@NBZip2@NCompress@@QAEPAXI@Z endp
.text:00003CC3
.text:00003CC3 ; ---------------------------------------------------------------------------
.text:00003CC6                 align 4
.text:00003CC6 _text           ends
.text:00003CC6
.text:00003CC8 ; ===========================================================================
.text:00003CC8
.text:00003CC8 ; Segment type: Pure code
.text:00003CC8 ; Segment permissions: Read/Execute
.text:00003CC8 _text           segment para public 'CODE' use32
.text:00003CC8                 assume cs:_text
.text:00003CC8                 ;org 3CC8h
.text:00003CC8 ; COMDAT (pick any)
.text:00003CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003CC8
.text:00003CC8 ; =============== S U B R O U T I N E =======================================
.text:00003CC8
.text:00003CC8 ; Attributes: bp-based frame
.text:00003CC8
.text:00003CC8 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Set(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003CC8                 public ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003CC8 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003CC8                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+44p
.text:00003CC8                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+1F7p ...
.text:00003CC8
.text:00003CC8 var_4           = dword ptr -4
.text:00003CC8
.text:00003CC8                 push    ebp
.text:00003CC9                 mov     ebp, esp
.text:00003CCB                 push    ecx
.text:00003CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CD3                 mov     [ebp+var_4], ecx
.text:00003CD6                 mov     eax, [ebp+var_4]
.text:00003CD9                 push    eax
.text:00003CDA                 call    _Event_Set@4    ; Event_Set(x)
.text:00003CDF                 add     esp, 4
.text:00003CE2                 cmp     ebp, esp
.text:00003CE4                 call    __RTC_CheckEsp
.text:00003CE9                 mov     esp, ebp
.text:00003CEB                 pop     ebp
.text:00003CEC                 retn
.text:00003CEC ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003CEC
.text:00003CEC ; ---------------------------------------------------------------------------
.text:00003CED                 align 10h
.text:00003CED _text           ends
.text:00003CED
.text:00003CF0 ; ===========================================================================
.text:00003CF0
.text:00003CF0 ; Segment type: Pure code
.text:00003CF0 ; Segment permissions: Read/Execute
.text:00003CF0 _text           segment para public 'CODE' use32
.text:00003CF0                 assume cs:_text
.text:00003CF0                 ;org 3CF0h
.text:00003CF0 ; COMDAT (pick any)
.text:00003CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003CF0
.text:00003CF0 ; =============== S U B R O U T I N E =======================================
.text:00003CF0
.text:00003CF0 ; Attributes: bp-based frame
.text:00003CF0
.text:00003CF0 ; unsigned int __thiscall NWindows::CThread::Wait(NWindows::CThread *__hidden this)
.text:00003CF0                 public ?Wait@CThread@NWindows@@QAEIXZ
.text:00003CF0 ?Wait@CThread@NWindows@@QAEIXZ proc near
.text:00003CF0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Free(void)+92p
.text:00003CF0
.text:00003CF0 var_4           = dword ptr -4
.text:00003CF0
.text:00003CF0                 push    ebp
.text:00003CF1                 mov     ebp, esp
.text:00003CF3                 push    ecx
.text:00003CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CFB                 mov     [ebp+var_4], ecx
.text:00003CFE                 mov     eax, [ebp+var_4]
.text:00003D01                 mov     ecx, [eax]
.text:00003D03                 push    ecx
.text:00003D04                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00003D09                 add     esp, 4
.text:00003D0C                 cmp     ebp, esp
.text:00003D0E                 call    __RTC_CheckEsp
.text:00003D13                 mov     esp, ebp
.text:00003D15                 pop     ebp
.text:00003D16                 retn
.text:00003D16 ?Wait@CThread@NWindows@@QAEIXZ endp
.text:00003D16
.text:00003D16 ; ---------------------------------------------------------------------------
.text:00003D17                 align 4
.text:00003D17 _text           ends
.text:00003D17
.text:00003D18 ; ===========================================================================
.text:00003D18
.text:00003D18 ; Segment type: Pure code
.text:00003D18 ; Segment permissions: Read/Execute
.text:00003D18 _text           segment para public 'CODE' use32
.text:00003D18                 assume cs:_text
.text:00003D18                 ;org 3D18h
.text:00003D18 ; COMDAT (pick any)
.text:00003D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D18
.text:00003D18 ; =============== S U B R O U T I N E =======================================
.text:00003D18
.text:00003D18 ; Attributes: bp-based frame
.text:00003D18
.text:00003D18 ; void __thiscall CBZip2CombinedCrc::Update(CBZip2CombinedCrc *this, unsigned int)
.text:00003D18                 public ?Update@CBZip2CombinedCrc@@QAEXI@Z
.text:00003D18 ?Update@CBZip2CombinedCrc@@QAEXI@Z proc near
.text:00003D18                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+F7p
.text:00003D18
.text:00003D18 var_4           = dword ptr -4
.text:00003D18 arg_0           = dword ptr  8
.text:00003D18
.text:00003D18                 push    ebp
.text:00003D19                 mov     ebp, esp
.text:00003D1B                 push    ecx
.text:00003D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D23                 mov     [ebp+var_4], ecx
.text:00003D26                 mov     eax, [ebp+var_4]
.text:00003D29                 mov     ecx, [eax]
.text:00003D2B                 shl     ecx, 1
.text:00003D2D                 mov     edx, [ebp+var_4]
.text:00003D30                 mov     eax, [edx]
.text:00003D32                 shr     eax, 1Fh
.text:00003D35                 or      ecx, eax
.text:00003D37                 xor     ecx, [ebp+arg_0]
.text:00003D3A                 mov     edx, [ebp+var_4]
.text:00003D3D                 mov     [edx], ecx
.text:00003D3F                 mov     esp, ebp
.text:00003D41                 pop     ebp
.text:00003D42                 retn    4
.text:00003D42 ?Update@CBZip2CombinedCrc@@QAEXI@Z endp
.text:00003D42
.text:00003D42 ; ---------------------------------------------------------------------------
.text:00003D45                 align 4
.text:00003D45 _text           ends
.text:00003D45
.text:00003D48 ; ===========================================================================
.text:00003D48
.text:00003D48 ; Segment type: Pure code
.text:00003D48 ; Segment permissions: Read/Execute
.text:00003D48 _text           segment para public 'CODE' use32
.text:00003D48                 assume cs:_text
.text:00003D48                 ;org 3D48h
.text:00003D48 ; COMDAT (pick any)
.text:00003D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D48
.text:00003D48 ; =============== S U B R O U T I N E =======================================
.text:00003D48
.text:00003D48 ; Attributes: bp-based frame
.text:00003D48
.text:00003D48 ; unsigned int __thiscall CBZip2CombinedCrc::GetDigest(CBZip2CombinedCrc *__hidden this)
.text:00003D48                 public ?GetDigest@CBZip2CombinedCrc@@QBEIXZ
.text:00003D48 ?GetDigest@CBZip2CombinedCrc@@QBEIXZ proc near
.text:00003D48                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReadSignature(uint &)+134p
.text:00003D48
.text:00003D48 var_4           = dword ptr -4
.text:00003D48
.text:00003D48                 push    ebp
.text:00003D49                 mov     ebp, esp
.text:00003D4B                 push    ecx
.text:00003D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D53                 mov     [ebp+var_4], ecx
.text:00003D56                 mov     eax, [ebp+var_4]
.text:00003D59                 mov     eax, [eax]
.text:00003D5B                 mov     esp, ebp
.text:00003D5D                 pop     ebp
.text:00003D5E                 retn
.text:00003D5E ?GetDigest@CBZip2CombinedCrc@@QBEIXZ endp
.text:00003D5E
.text:00003D5E ; ---------------------------------------------------------------------------
.text:00003D5F                 align 10h
.text:00003D5F _text           ends
.text:00003D5F
.text:00003D60 ; ===========================================================================
.text:00003D60
.text:00003D60 ; Segment type: Pure code
.text:00003D60 ; Segment permissions: Read/Execute
.text:00003D60 _text           segment para public 'CODE' use32
.text:00003D60                 assume cs:_text
.text:00003D60                 ;org 3D60h
.text:00003D60 ; COMDAT (pick any)
.text:00003D60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D60
.text:00003D60 ; =============== S U B R O U T I N E =======================================
.text:00003D60
.text:00003D60 ; Attributes: bp-based frame
.text:00003D60
.text:00003D60 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Reset(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003D60                 public ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003D60 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003D60                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+A6p
.text:00003D60                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+C2p ...
.text:00003D60
.text:00003D60 var_4           = dword ptr -4
.text:00003D60
.text:00003D60                 push    ebp
.text:00003D61                 mov     ebp, esp
.text:00003D63                 push    ecx
.text:00003D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D6B                 mov     [ebp+var_4], ecx
.text:00003D6E                 mov     eax, [ebp+var_4]
.text:00003D71                 push    eax
.text:00003D72                 call    _Event_Reset@4  ; Event_Reset(x)
.text:00003D77                 add     esp, 4
.text:00003D7A                 cmp     ebp, esp
.text:00003D7C                 call    __RTC_CheckEsp
.text:00003D81                 mov     esp, ebp
.text:00003D83                 pop     ebp
.text:00003D84                 retn
.text:00003D84 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003D84
.text:00003D84 ; ---------------------------------------------------------------------------
.text:00003D85                 align 4
.text:00003D85 _text           ends
.text:00003D85
.text:00003D88 ; ===========================================================================
.text:00003D88
.text:00003D88 ; Segment type: Pure code
.text:00003D88 ; Segment permissions: Read/Execute
.text:00003D88 _text           segment para public 'CODE' use32
.text:00003D88                 assume cs:_text
.text:00003D88                 ;org 3D88h
.text:00003D88 ; COMDAT (pick any)
.text:00003D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D88
.text:00003D88 ; =============== S U B R O U T I N E =======================================
.text:00003D88
.text:00003D88 ; Attributes: bp-based frame
.text:00003D88
.text:00003D88 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003D88                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003D88 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003D88                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+266p
.text:00003D88                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+2BFp ...
.text:00003D88
.text:00003D88 var_4           = dword ptr -4
.text:00003D88
.text:00003D88                 push    ebp
.text:00003D89                 mov     ebp, esp
.text:00003D8B                 push    ecx
.text:00003D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D93                 mov     [ebp+var_4], ecx
.text:00003D96                 mov     eax, [ebp+var_4]
.text:00003D99                 mov     ecx, [eax]
.text:00003D9B                 push    ecx
.text:00003D9C                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00003DA1                 add     esp, 4
.text:00003DA4                 cmp     ebp, esp
.text:00003DA6                 call    __RTC_CheckEsp
.text:00003DAB                 mov     esp, ebp
.text:00003DAD                 pop     ebp
.text:00003DAE                 retn
.text:00003DAE ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003DAE
.text:00003DAE ; ---------------------------------------------------------------------------
.text:00003DAF                 align 10h
.text:00003DAF _text           ends
.text:00003DAF
.text:00003DB0 ; ===========================================================================
.text:00003DB0
.text:00003DB0 ; Segment type: Pure code
.text:00003DB0 ; Segment permissions: Read/Execute
.text:00003DB0 _text           segment para public 'CODE' use32
.text:00003DB0                 assume cs:_text
.text:00003DB0                 ;org 3DB0h
.text:00003DB0 ; COMDAT (pick any)
.text:00003DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DB0
.text:00003DB0 ; =============== S U B R O U T I N E =======================================
.text:00003DB0
.text:00003DB0 ; Attributes: bp-based frame
.text:00003DB0
.text:00003DB0 ; void __thiscall CBZip2CombinedCrc::Init(CBZip2CombinedCrc *__hidden this)
.text:00003DB0                 public ?Init@CBZip2CombinedCrc@@QAEXXZ
.text:00003DB0 ?Init@CBZip2CombinedCrc@@QAEXXZ proc near
.text:00003DB0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+19Bp
.text:00003DB0
.text:00003DB0 var_4           = dword ptr -4
.text:00003DB0
.text:00003DB0                 push    ebp
.text:00003DB1                 mov     ebp, esp
.text:00003DB3                 push    ecx
.text:00003DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DBB                 mov     [ebp+var_4], ecx
.text:00003DBE                 mov     eax, [ebp+var_4]
.text:00003DC1                 mov     dword ptr [eax], 0
.text:00003DC7                 mov     esp, ebp
.text:00003DC9                 pop     ebp
.text:00003DCA                 retn
.text:00003DCA ?Init@CBZip2CombinedCrc@@QAEXXZ endp
.text:00003DCA
.text:00003DCA ; ---------------------------------------------------------------------------
.text:00003DCB                 align 4
.text:00003DCB _text           ends
.text:00003DCB
.text:00003DCC ; ===========================================================================
.text:00003DCC
.text:00003DCC ; Segment type: Pure code
.text:00003DCC ; Segment permissions: Read/Execute
.text:00003DCC _text           segment para public 'CODE' use32
.text:00003DCC                 assume cs:_text
.text:00003DCC                 ;org 3DCCh
.text:00003DCC ; COMDAT (pick any)
.text:00003DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DCC
.text:00003DCC ; =============== S U B R O U T I N E =======================================
.text:00003DCC
.text:00003DCC ; Attributes: bp-based frame
.text:00003DCC
.text:00003DCC ; _DWORD __thiscall NCompress::NBZip2::CBlockProps::CBlockProps(NCompress::NBZip2::CBlockProps *__hidden this)
.text:00003DCC                 public ??0CBlockProps@NBZip2@NCompress@@QAE@XZ
.text:00003DCC ??0CBlockProps@NBZip2@NCompress@@QAE@XZ proc near
.text:00003DCC                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+377p
.text:00003DCC                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+FBp ...
.text:00003DCC
.text:00003DCC var_4           = dword ptr -4
.text:00003DCC
.text:00003DCC                 push    ebp
.text:00003DCD                 mov     ebp, esp
.text:00003DCF                 push    ecx
.text:00003DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DD7                 mov     [ebp+var_4], ecx
.text:00003DDA                 mov     eax, [ebp+var_4]
.text:00003DDD                 mov     dword ptr [eax], 0
.text:00003DE3                 mov     ecx, [ebp+var_4]
.text:00003DE6                 mov     dword ptr [ecx+4], 0
.text:00003DED                 mov     edx, [ebp+var_4]
.text:00003DF0                 mov     byte ptr [edx+8], 0
.text:00003DF4                 mov     eax, [ebp+var_4]
.text:00003DF7                 mov     esp, ebp
.text:00003DF9                 pop     ebp
.text:00003DFA                 retn
.text:00003DFA ??0CBlockProps@NBZip2@NCompress@@QAE@XZ endp
.text:00003DFA
.text:00003DFA ; ---------------------------------------------------------------------------
.text:00003DFB                 align 4
.text:00003DFB _text           ends
.text:00003DFB
.text:00003DFC ; ===========================================================================
.text:00003DFC
.text:00003DFC ; Segment type: Pure code
.text:00003DFC ; Segment permissions: Read/Execute
.text:00003DFC _text           segment para public 'CODE' use32
.text:00003DFC                 assume cs:_text
.text:00003DFC                 ;org 3DFCh
.text:00003DFC ; COMDAT (pick any)
.text:00003DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DFC
.text:00003DFC ; =============== S U B R O U T I N E =======================================
.text:00003DFC
.text:00003DFC ; Attributes: bp-based frame
.text:00003DFC
.text:00003DFC ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:00003DFC                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:00003DFC ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:00003DFC                                         ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+95p
.text:00003DFC                                         ; NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+D7p ...
.text:00003DFC
.text:00003DFC var_4           = dword ptr -4
.text:00003DFC arg_0           = byte ptr  8
.text:00003DFC
.text:00003DFC                 push    ebp
.text:00003DFD                 mov     ebp, esp
.text:00003DFF                 push    ecx
.text:00003E00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E07                 mov     [ebp+var_4], ecx
.text:00003E0A                 mov     eax, [ebp+var_4]
.text:00003E0D                 mov     ecx, [eax]
.text:00003E0F                 mov     edx, [ebp+var_4]
.text:00003E12                 mov     eax, [edx+4]
.text:00003E15                 mov     dl, [ebp+arg_0]
.text:00003E18                 mov     [ecx+eax], dl
.text:00003E1B                 mov     eax, [ebp+var_4]
.text:00003E1E                 mov     ecx, [eax+4]
.text:00003E21                 add     ecx, 1
.text:00003E24                 mov     edx, [ebp+var_4]
.text:00003E27                 mov     [edx+4], ecx
.text:00003E2A                 mov     eax, [ebp+var_4]
.text:00003E2D                 mov     ecx, [ebp+var_4]
.text:00003E30                 mov     edx, [eax+4]
.text:00003E33                 cmp     edx, [ecx+8]
.text:00003E36                 jnz     short loc_3E40
.text:00003E38                 mov     ecx, [ebp+var_4] ; this
.text:00003E3B                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00003E40
.text:00003E40 loc_3E40:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:00003E40                 add     esp, 4
.text:00003E43                 cmp     ebp, esp
.text:00003E45                 call    __RTC_CheckEsp
.text:00003E4A                 mov     esp, ebp
.text:00003E4C                 pop     ebp
.text:00003E4D                 retn    4
.text:00003E4D ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:00003E4D
.text:00003E4D _text           ends
.text:00003E4D
.text:00003E50 ; ===========================================================================
.text:00003E50
.text:00003E50 ; Segment type: Pure code
.text:00003E50 ; Segment permissions: Read/Execute
.text:00003E50 _text           segment para public 'CODE' use32
.text:00003E50                 assume cs:_text
.text:00003E50                 ;org 3E50h
.text:00003E50 ; COMDAT (pick any)
.text:00003E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E50
.text:00003E50 ; =============== S U B R O U T I N E =======================================
.text:00003E50
.text:00003E50 ; Attributes: bp-based frame
.text:00003E50
.text:00003E50 ; _DWORD __thiscall CBZip2Crc::CBZip2Crc(CBZip2Crc *__hidden this)
.text:00003E50                 public ??0CBZip2Crc@@QAE@XZ
.text:00003E50 ??0CBZip2Crc@@QAE@XZ proc near          ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+23p
.text:00003E50                                         ; NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+29p
.text:00003E50
.text:00003E50 var_4           = dword ptr -4
.text:00003E50
.text:00003E50                 push    ebp
.text:00003E51                 mov     ebp, esp
.text:00003E53                 push    ecx
.text:00003E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E5B                 mov     [ebp+var_4], ecx
.text:00003E5E                 mov     eax, [ebp+var_4]
.text:00003E61                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00003E67                 mov     eax, [ebp+var_4]
.text:00003E6A                 mov     esp, ebp
.text:00003E6C                 pop     ebp
.text:00003E6D                 retn
.text:00003E6D ??0CBZip2Crc@@QAE@XZ endp
.text:00003E6D
.text:00003E6D ; ---------------------------------------------------------------------------
.text:00003E6E                 align 10h
.text:00003E6E _text           ends
.text:00003E6E
.text:00003E70 ; ===========================================================================
.text:00003E70
.text:00003E70 ; Segment type: Pure code
.text:00003E70 ; Segment permissions: Read/Execute
.text:00003E70 _text           segment para public 'CODE' use32
.text:00003E70                 assume cs:_text
.text:00003E70                 ;org 3E70h
.text:00003E70 ; COMDAT (pick any)
.text:00003E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E70
.text:00003E70 ; =============== S U B R O U T I N E =======================================
.text:00003E70
.text:00003E70 ; Attributes: bp-based frame
.text:00003E70
.text:00003E70 ; void __thiscall CBZip2Crc::UpdateByte(CBZip2Crc *this, unsigned int)
.text:00003E70                 public ?UpdateByte@CBZip2Crc@@QAEXI@Z
.text:00003E70 ?UpdateByte@CBZip2Crc@@QAEXI@Z proc near
.text:00003E70                                         ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+88p
.text:00003E70                                         ; NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+CAp ...
.text:00003E70
.text:00003E70 var_4           = dword ptr -4
.text:00003E70 arg_0           = dword ptr  8
.text:00003E70
.text:00003E70                 push    ebp
.text:00003E71                 mov     ebp, esp
.text:00003E73                 push    ecx
.text:00003E74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E7B                 mov     [ebp+var_4], ecx
.text:00003E7E                 mov     eax, [ebp+var_4]
.text:00003E81                 mov     ecx, [eax]
.text:00003E83                 shr     ecx, 18h
.text:00003E86                 xor     ecx, [ebp+arg_0]
.text:00003E89                 mov     edx, [ebp+var_4]
.text:00003E8C                 mov     eax, [edx]
.text:00003E8E                 shl     eax, 8
.text:00003E91                 xor     eax, dword ptr ds:?Table@CBZip2Crc@@0PAIA[ecx*4] ; uint * CBZip2Crc::Table
.text:00003E98                 mov     ecx, [ebp+var_4]
.text:00003E9B                 mov     [ecx], eax
.text:00003E9D                 mov     esp, ebp
.text:00003E9F                 pop     ebp
.text:00003EA0                 retn    4
.text:00003EA0 ?UpdateByte@CBZip2Crc@@QAEXI@Z endp
.text:00003EA0
.text:00003EA0 ; ---------------------------------------------------------------------------
.text:00003EA3                 align 4
.text:00003EA3 _text           ends
.text:00003EA3
.text:00003EA4 ; ===========================================================================
.text:00003EA4
.text:00003EA4 ; Segment type: Pure code
.text:00003EA4 ; Segment permissions: Read/Execute
.text:00003EA4 _text           segment para public 'CODE' use32
.text:00003EA4                 assume cs:_text
.text:00003EA4                 ;org 3EA4h
.text:00003EA4 ; COMDAT (pick any)
.text:00003EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003EA4
.text:00003EA4 ; =============== S U B R O U T I N E =======================================
.text:00003EA4
.text:00003EA4 ; Attributes: bp-based frame
.text:00003EA4
.text:00003EA4 ; unsigned int __thiscall CBZip2Crc::GetDigest(CBZip2Crc *__hidden this)
.text:00003EA4                 public ?GetDigest@CBZip2Crc@@QBEIXZ
.text:00003EA4 ?GetDigest@CBZip2Crc@@QBEIXZ proc near  ; CODE XREF: NCompress::NBZip2::DecodeBlock2(uint const *,uint,uint,COutBuffer &)+EEp
.text:00003EA4                                         ; NCompress::NBZip2::DecodeBlock2Rand(uint const *,uint,uint,COutBuffer &)+142p
.text:00003EA4
.text:00003EA4 var_4           = dword ptr -4
.text:00003EA4
.text:00003EA4                 push    ebp
.text:00003EA5                 mov     ebp, esp
.text:00003EA7                 push    ecx
.text:00003EA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003EAF                 mov     [ebp+var_4], ecx
.text:00003EB2                 mov     eax, [ebp+var_4]
.text:00003EB5                 mov     eax, [eax]
.text:00003EB7                 xor     eax, 0FFFFFFFFh
.text:00003EBA                 mov     esp, ebp
.text:00003EBC                 pop     ebp
.text:00003EBD                 retn
.text:00003EBD ?GetDigest@CBZip2Crc@@QBEIXZ endp
.text:00003EBD
.text:00003EBD ; ---------------------------------------------------------------------------
.text:00003EBE                 align 10h
.text:00003EBE _text           ends
.text:00003EBE
.data:00003EC0 ; ===========================================================================
.data:00003EC0
.data:00003EC0 ; Segment type: Pure data
.data:00003EC0 ; Segment permissions: Read/Write
.data:00003EC0 _data           segment dword public 'DATA' use32
.data:00003EC0                 assume cs:_data
.data:00003EC0                 ;org 3EC0h
.data:00003EC0 ; COMDAT (pick any)
.data:00003EC0                 public ??_R0?AUCInBufferException@@@8
.data:00003EC0 ; struct CInBufferException `RTTI Type Descriptor'
.data:00003EC0 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003EC0                                         ; DATA XREF: .xdata$x:00002F80o
.data:00003EC0                                         ; .xdata$x:00002FD0o ...
.data:00003EC0                                         ; const type_info::`vftable'
.data:00003EC4                 align 8
.data:00003EC8 a_?aucinbuffere db '.?AUCInBufferException@@',0
.data:00003EE1                 align 4
.data:00003EE1 _data           ends
.data:00003EE1
.data:00003EE4 ; ===========================================================================
.data:00003EE4
.data:00003EE4 ; Segment type: Pure data
.data:00003EE4 ; Segment permissions: Read/Write
.data:00003EE4 _data           segment dword public 'DATA' use32
.data:00003EE4                 assume cs:_data
.data:00003EE4                 ;org 3EE4h
.data:00003EE4 ; COMDAT (pick any)
.data:00003EE4                 public ??_R0?AUCOutBufferException@@@8
.data:00003EE4 ; struct COutBufferException `RTTI Type Descriptor'
.data:00003EE4 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003EE4                                         ; DATA XREF: .xdata$x:00002F90o
.data:00003EE4                                         ; .xdata$x:00002FB0o
.data:00003EE4                                         ; const type_info::`vftable'
.data:00003EE8                 db    0
.data:00003EE9                 db    0
.data:00003EEA                 db    0
.data:00003EEB                 db    0
.data:00003EEC                 db  2Eh ; .
.data:00003EED                 db  3Fh ; ?
.data:00003EEE                 db  41h ; A
.data:00003EEF                 db  55h ; U
.data:00003EF0                 db  43h ; C
.data:00003EF1                 db  4Fh ; O
.data:00003EF2                 db  75h ; u
.data:00003EF3                 db  74h ; t
.data:00003EF4                 db  42h ; B
.data:00003EF5                 db  75h ; u
.data:00003EF6                 db  66h ; f
.data:00003EF7                 db  66h ; f
.data:00003EF8                 db  65h ; e
.data:00003EF9                 db  72h ; r
.data:00003EFA                 db  45h ; E
.data:00003EFB                 db  78h ; x
.data:00003EFC                 db  63h ; c
.data:00003EFD                 db  65h ; e
.data:00003EFE                 db  70h ; p
.data:00003EFF                 db  74h ; t
.data:00003F00                 db  69h ; i
.data:00003F01                 db  6Fh ; o
.data:00003F02                 db  6Eh ; n
.data:00003F03                 db  40h ; @
.data:00003F04                 db  40h ; @
.data:00003F05                 db    0
.data:00003F06                 align 4
.data:00003F06 _data           ends
.data:00003F06
.text:00003F08 ; ===========================================================================
.text:00003F08
.text:00003F08 ; Segment type: Pure code
.text:00003F08 ; Segment permissions: Read/Execute
.text:00003F08 _text           segment para public 'CODE' use32
.text:00003F08                 assume cs:_text
.text:00003F08                 ;org 3F08h
.text:00003F08 ; COMDAT (pick any)
.text:00003F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F08
.text:00003F08 ; =============== S U B R O U T I N E =======================================
.text:00003F08
.text:00003F08 ; Attributes: bp-based frame
.text:00003F08
.text:00003F08 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:00003F08                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:00003F08 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00003F08                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+140p
.text:00003F08
.text:00003F08 var_4           = dword ptr -4
.text:00003F08 arg_0           = dword ptr  8
.text:00003F08
.text:00003F08                 push    ebp
.text:00003F09                 mov     ebp, esp
.text:00003F0B                 push    ecx
.text:00003F0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F13                 mov     [ebp+var_4], ecx
.text:00003F16                 mov     eax, [ebp+var_4]
.text:00003F19                 mov     ecx, [ebp+arg_0]
.text:00003F1C                 mov     [eax+14h], ecx
.text:00003F1F                 mov     esp, ebp
.text:00003F21                 pop     ebp
.text:00003F22                 retn    4
.text:00003F22 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:00003F22
.text:00003F22 ; ---------------------------------------------------------------------------
.text:00003F25                 align 4
.text:00003F25 _text           ends
.text:00003F25
.text:00003F28 ; ===========================================================================
.text:00003F28
.text:00003F28 ; Segment type: Pure code
.text:00003F28 ; Segment permissions: Read/Execute
.text:00003F28 _text           segment para public 'CODE' use32
.text:00003F28                 assume cs:_text
.text:00003F28                 ;org 3F28h
.text:00003F28 ; COMDAT (pick any)
.text:00003F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F28
.text:00003F28 ; =============== S U B R O U T I N E =======================================
.text:00003F28
.text:00003F28 ; Attributes: bp-based frame
.text:00003F28
.text:00003F28 ; _DWORD __thiscall NCompress::NBZip2::CDecoder::CDecoderFlusher::CDecoderFlusher(NCompress::NBZip2::CDecoder::CDecoderFlusher *this, struct NCompress::NBZip2::CDecoder *)
.text:00003F28                 public ??0CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@PAV123@@Z
.text:00003F28 ??0CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@PAV123@@Z proc near
.text:00003F28                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+CDp
.text:00003F28
.text:00003F28 var_4           = dword ptr -4
.text:00003F28 arg_0           = dword ptr  8
.text:00003F28
.text:00003F28                 push    ebp
.text:00003F29                 mov     ebp, esp
.text:00003F2B                 push    ecx
.text:00003F2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F33                 mov     [ebp+var_4], ecx
.text:00003F36                 mov     eax, [ebp+var_4]
.text:00003F39                 mov     ecx, [ebp+arg_0]
.text:00003F3C                 mov     [eax], ecx
.text:00003F3E                 mov     edx, [ebp+var_4]
.text:00003F41                 mov     byte ptr [edx+4], 1
.text:00003F45                 mov     eax, [ebp+var_4]
.text:00003F48                 mov     esp, ebp
.text:00003F4A                 pop     ebp
.text:00003F4B                 retn    4
.text:00003F4B ??0CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@PAV123@@Z endp
.text:00003F4B
.text:00003F4B ; ---------------------------------------------------------------------------
.text:00003F4E                 align 10h
.text:00003F4E _text           ends
.text:00003F4E
.text:00003F50 ; ===========================================================================
.text:00003F50
.text:00003F50 ; Segment type: Pure code
.text:00003F50 ; Segment permissions: Read/Execute
.text:00003F50 _text           segment para public 'CODE' use32
.text:00003F50                 assume cs:_text
.text:00003F50                 ;org 3F50h
.text:00003F50 ; COMDAT (pick any)
.text:00003F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F50
.text:00003F50 ; =============== S U B R O U T I N E =======================================
.text:00003F50
.text:00003F50 ; Attributes: bp-based frame
.text:00003F50
.text:00003F50 ; _DWORD __thiscall NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(NCompress::NBZip2::CDecoder::CDecoderFlusher *__hidden this)
.text:00003F50                 public ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ
.text:00003F50 ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ proc near
.text:00003F50                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+178p
.text:00003F50                                         ; NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1A1p ...
.text:00003F50
.text:00003F50 var_4           = dword ptr -4
.text:00003F50
.text:00003F50                 push    ebp
.text:00003F51                 mov     ebp, esp
.text:00003F53                 push    ecx
.text:00003F54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F5B                 mov     [ebp+var_4], ecx
.text:00003F5E                 mov     eax, [ebp+var_4]
.text:00003F61                 movzx   ecx, byte ptr [eax+4]
.text:00003F65                 test    ecx, ecx
.text:00003F67                 jz      short loc_3F73
.text:00003F69                 mov     edx, [ebp+var_4]
.text:00003F6C                 mov     ecx, [edx]      ; this
.text:00003F6E                 call    ?Flush@CDecoder@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CDecoder::Flush(void)
.text:00003F73
.text:00003F73 loc_3F73:                               ; CODE XREF: NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)+17j
.text:00003F73                 add     esp, 4
.text:00003F76                 cmp     ebp, esp
.text:00003F78                 call    __RTC_CheckEsp
.text:00003F7D                 mov     esp, ebp
.text:00003F7F                 pop     ebp
.text:00003F80                 retn
.text:00003F80 ??1CDecoderFlusher@CDecoder@NBZip2@NCompress@@QAE@XZ endp
.text:00003F80
.text:00003F80 ; ---------------------------------------------------------------------------
.text:00003F81                 align 4
.text:00003F81 _text           ends
.text:00003F81
.text:00003F84 ; ===========================================================================
.text:00003F84
.text:00003F84 ; Segment type: Pure code
.text:00003F84 ; Segment permissions: Read/Execute
.text:00003F84 _text           segment para public 'CODE' use32
.text:00003F84                 assume cs:_text
.text:00003F84                 ;org 3F84h
.text:00003F84 ; COMDAT (pick any)
.text:00003F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F84
.text:00003F84 ; =============== S U B R O U T I N E =======================================
.text:00003F84
.text:00003F84 ; Attributes: bp-based frame
.text:00003F84
.text:00003F84 ; __int32 __thiscall NCompress::NBZip2::CDecoder::Flush(NCompress::NBZip2::CDecoder *__hidden this)
.text:00003F84                 public ?Flush@CDecoder@NBZip2@NCompress@@QAEJXZ
.text:00003F84 ?Flush@CDecoder@NBZip2@NCompress@@QAEJXZ proc near
.text:00003F84                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+18Cp
.text:00003F84                                         ; NCompress::NBZip2::CDecoder::CDecoderFlusher::~CDecoderFlusher(void)+1Ep
.text:00003F84
.text:00003F84 var_4           = dword ptr -4
.text:00003F84
.text:00003F84                 push    ebp
.text:00003F85                 mov     ebp, esp
.text:00003F87                 push    ecx
.text:00003F88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F8F                 mov     [ebp+var_4], ecx
.text:00003F92                 mov     ecx, [ebp+var_4]
.text:00003F95                 add     ecx, 10h        ; this
.text:00003F98                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00003F9D                 add     esp, 4
.text:00003FA0                 cmp     ebp, esp
.text:00003FA2                 call    __RTC_CheckEsp
.text:00003FA7                 mov     esp, ebp
.text:00003FA9                 pop     ebp
.text:00003FAA                 retn
.text:00003FAA ?Flush@CDecoder@NBZip2@NCompress@@QAEJXZ endp
.text:00003FAA
.text:00003FAA ; ---------------------------------------------------------------------------
.text:00003FAB                 align 4
.text:00003FAB _text           ends
.text:00003FAB
.text:00003FAC ; ===========================================================================
.text:00003FAC
.text:00003FAC ; Segment type: Pure code
.text:00003FAC ; Segment permissions: Read/Execute
.text:00003FAC _text           segment para public 'CODE' use32
.text:00003FAC                 assume cs:_text
.text:00003FAC                 ;org 3FACh
.text:00003FAC ; COMDAT (pick any)
.text:00003FAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FAC
.text:00003FAC ; =============== S U B R O U T I N E =======================================
.text:00003FAC
.text:00003FAC ; Attributes: bp-based frame
.text:00003FAC
.text:00003FAC ; unsigned int __thiscall NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00003FAC                 public ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003FAC ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003FAC                                         ; CODE XREF: NCompress::NBZip2::CState::Create(void)+23p
.text:00003FAC                                         ; NCompress::NBZip2::CState::Create(void)+3Cp ...
.text:00003FAC
.text:00003FAC var_4           = dword ptr -4
.text:00003FAC
.text:00003FAC                 push    ebp
.text:00003FAD                 mov     ebp, esp
.text:00003FAF                 push    ecx
.text:00003FB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FB7                 mov     [ebp+var_4], ecx
.text:00003FBA                 mov     ecx, [ebp+var_4] ; this
.text:00003FBD                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:00003FC2                 movzx   eax, al
.text:00003FC5                 test    eax, eax
.text:00003FC7                 jz      short loc_3FCD
.text:00003FC9                 xor     eax, eax
.text:00003FCB                 jmp     short loc_3FD6
.text:00003FCD ; ---------------------------------------------------------------------------
.text:00003FCD
.text:00003FCD loc_3FCD:                               ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Bj
.text:00003FCD                 mov     ecx, [ebp+var_4]
.text:00003FD0                 push    ecx
.text:00003FD1                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00003FD6
.text:00003FD6 loc_3FD6:                               ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+1Fj
.text:00003FD6                 add     esp, 4
.text:00003FD9                 cmp     ebp, esp
.text:00003FDB                 call    __RTC_CheckEsp
.text:00003FE0                 mov     esp, ebp
.text:00003FE2                 pop     ebp
.text:00003FE3                 retn
.text:00003FE3 ?CreateIfNotCreated@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003FE3
.text:00003FE3 _text           ends
.text:00003FE3
.text:00003FE4 ; ===========================================================================
.text:00003FE4
.text:00003FE4 ; Segment type: Pure code
.text:00003FE4 ; Segment permissions: Read/Execute
.text:00003FE4 _text           segment para public 'CODE' use32
.text:00003FE4                 assume cs:_text
.text:00003FE4                 ;org 3FE4h
.text:00003FE4 ; COMDAT (pick any)
.text:00003FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FE4
.text:00003FE4 ; =============== S U B R O U T I N E =======================================
.text:00003FE4
.text:00003FE4 ; Attributes: bp-based frame
.text:00003FE4
.text:00003FE4 ; unsigned int __thiscall NWindows::CThread::Create(NWindows::CThread *this, unsigned int (__stdcall *)(void *), void *)
.text:00003FE4                 public ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
.text:00003FE4 ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z proc near
.text:00003FE4                                         ; CODE XREF: NCompress::NBZip2::CState::Create(void)+77p
.text:00003FE4
.text:00003FE4 var_4           = dword ptr -4
.text:00003FE4 arg_0           = dword ptr  8
.text:00003FE4 arg_4           = dword ptr  0Ch
.text:00003FE4
.text:00003FE4                 push    ebp
.text:00003FE5                 mov     ebp, esp
.text:00003FE7                 push    ecx
.text:00003FE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FEF                 mov     [ebp+var_4], ecx
.text:00003FF2                 mov     eax, [ebp+arg_4]
.text:00003FF5                 push    eax
.text:00003FF6                 mov     ecx, [ebp+arg_0]
.text:00003FF9                 push    ecx
.text:00003FFA                 mov     edx, [ebp+var_4]
.text:00003FFD                 push    edx
.text:00003FFE                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:00004003                 add     esp, 4
.text:00004006                 cmp     ebp, esp
.text:00004008                 call    __RTC_CheckEsp
.text:0000400D                 mov     esp, ebp
.text:0000400F                 pop     ebp
.text:00004010                 retn    8
.text:00004010 ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z endp
.text:00004010
.text:00004010 ; ---------------------------------------------------------------------------
.text:00004013                 align 4
.text:00004013 _text           ends
.text:00004013
.text:00004014 ; ===========================================================================
.text:00004014
.text:00004014 ; Segment type: Pure code
.text:00004014 ; Segment permissions: Read/Execute
.text:00004014 _text           segment para public 'CODE' use32
.text:00004014                 assume cs:_text
.text:00004014                 ;org 4014h
.text:00004014 ; COMDAT (pick any)
.text:00004014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004014
.text:00004014 ; =============== S U B R O U T I N E =======================================
.text:00004014
.text:00004014 ; Attributes: bp-based frame
.text:00004014
.text:00004014 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004014                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004014 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004014                                         ; CODE XREF: NCompress::NBZip2::CState::FinishStream(void)+32p
.text:00004014                                         ; NCompress::NBZip2::CState::ThreadFunc(void)+7Fp ...
.text:00004014
.text:00004014 lpCriticalSection= dword ptr -4
.text:00004014
.text:00004014                 push    ebp
.text:00004015                 mov     ebp, esp
.text:00004017                 push    ecx
.text:00004018                 push    esi
.text:00004019                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004020                 mov     [ebp+lpCriticalSection], ecx
.text:00004023                 mov     esi, esp
.text:00004025                 mov     eax, [ebp+lpCriticalSection]
.text:00004028                 push    eax             ; lpCriticalSection
.text:00004029                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:0000402F                 cmp     esi, esp
.text:00004031                 call    __RTC_CheckEsp
.text:00004036                 pop     esi
.text:00004037                 add     esp, 4
.text:0000403A                 cmp     ebp, esp
.text:0000403C                 call    __RTC_CheckEsp
.text:00004041                 mov     esp, ebp
.text:00004043                 pop     ebp
.text:00004044                 retn
.text:00004044 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004044
.text:00004044 ; ---------------------------------------------------------------------------
.text:00004045                 align 4
.text:00004045 _text           ends
.text:00004045
.text:00004048 ; ===========================================================================
.text:00004048
.text:00004048 ; Segment type: Pure code
.text:00004048 ; Segment permissions: Read/Execute
.text:00004048 _text           segment para public 'CODE' use32
.text:00004048                 assume cs:_text
.text:00004048                 ;org 4048h
.text:00004048 ; COMDAT (pick any)
.text:00004048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004048
.text:00004048 ; =============== S U B R O U T I N E =======================================
.text:00004048
.text:00004048 ; Attributes: bp-based frame
.text:00004048
.text:00004048 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00004048                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00004048 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00004048                                         ; CODE XREF: NCompress::NBZip2::CState::ThreadFunc(void)+5Dp
.text:00004048
.text:00004048 lpCriticalSection= dword ptr -4
.text:00004048
.text:00004048                 push    ebp
.text:00004049                 mov     ebp, esp
.text:0000404B                 push    ecx
.text:0000404C                 push    esi
.text:0000404D                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00004054                 mov     [ebp+lpCriticalSection], ecx
.text:00004057                 mov     esi, esp
.text:00004059                 mov     eax, [ebp+lpCriticalSection]
.text:0000405C                 push    eax             ; lpCriticalSection
.text:0000405D                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00004063                 cmp     esi, esp
.text:00004065                 call    __RTC_CheckEsp
.text:0000406A                 pop     esi
.text:0000406B                 add     esp, 4
.text:0000406E                 cmp     ebp, esp
.text:00004070                 call    __RTC_CheckEsp
.text:00004075                 mov     esp, ebp
.text:00004077                 pop     ebp
.text:00004078                 retn
.text:00004078 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00004078
.text:00004078 ; ---------------------------------------------------------------------------
.text:00004079                 align 4
.text:00004079 _text           ends
.text:00004079
.text:0000407C ; ===========================================================================
.text:0000407C
.text:0000407C ; Segment type: Pure code
.text:0000407C ; Segment permissions: Read/Execute
.text:0000407C _text           segment para public 'CODE' use32
.text:0000407C                 assume cs:_text
.text:0000407C                 ;org 407Ch
.text:0000407C ; COMDAT (pick any)
.text:0000407C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000407C
.text:0000407C ; =============== S U B R O U T I N E =======================================
.text:0000407C
.text:0000407C ; Attributes: bp-based frame
.text:0000407C
.text:0000407C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:0000407C                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000407C ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000407C                                         ; CODE XREF: NCompress::NBZip2::CBase::CBase(void)+11p
.text:0000407C
.text:0000407C var_4           = dword ptr -4
.text:0000407C
.text:0000407C                 push    ebp
.text:0000407D                 mov     ebp, esp
.text:0000407F                 push    ecx
.text:00004080                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004087                 mov     [ebp+var_4], ecx
.text:0000408A                 mov     eax, [ebp+var_4]
.text:0000408D                 mov     dword ptr [eax], 0
.text:00004093                 mov     eax, [ebp+var_4]
.text:00004096                 mov     esp, ebp
.text:00004098                 pop     ebp
.text:00004099                 retn
.text:00004099 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00004099
.text:00004099 ; ---------------------------------------------------------------------------
.text:0000409A                 align 4
.text:0000409A _text           ends
.text:0000409A
.text:0000409C ; ===========================================================================
.text:0000409C
.text:0000409C ; Segment type: Pure code
.text:0000409C ; Segment permissions: Read/Execute
.text:0000409C _text           segment para public 'CODE' use32
.text:0000409C                 assume cs:_text
.text:0000409C                 ;org 409Ch
.text:0000409C ; COMDAT (pick any)
.text:0000409C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000409C
.text:0000409C ; =============== S U B R O U T I N E =======================================
.text:0000409C
.text:0000409C ; Attributes: bp-based frame
.text:0000409C
.text:0000409C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:0000409C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000409C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000409C                                         ; CODE XREF: NCompress::NBZip2::CBase::~CBase(void)+49p
.text:0000409C                                         ; __unwindfunclet$??1CBase@NBZip2@NCompress@@QAE@XZ$0+3j
.text:0000409C
.text:0000409C var_4           = dword ptr -4
.text:0000409C
.text:0000409C                 push    ebp
.text:0000409D                 mov     ebp, esp
.text:0000409F                 push    ecx
.text:000040A0                 push    esi
.text:000040A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040A8                 mov     [ebp+var_4], ecx
.text:000040AB                 mov     eax, [ebp+var_4]
.text:000040AE                 cmp     dword ptr [eax], 0
.text:000040B1                 jz      short loc_40CE
.text:000040B3                 mov     ecx, [ebp+var_4]
.text:000040B6                 mov     edx, [ecx]
.text:000040B8                 mov     eax, [ebp+var_4]
.text:000040BB                 mov     ecx, [eax]
.text:000040BD                 mov     edx, [edx]
.text:000040BF                 mov     esi, esp
.text:000040C1                 push    ecx
.text:000040C2                 mov     eax, [edx+8]
.text:000040C5                 call    eax
.text:000040C7                 cmp     esi, esp
.text:000040C9                 call    __RTC_CheckEsp
.text:000040CE
.text:000040CE loc_40CE:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000040CE                 pop     esi
.text:000040CF                 add     esp, 4
.text:000040D2                 cmp     ebp, esp
.text:000040D4                 call    __RTC_CheckEsp
.text:000040D9                 mov     esp, ebp
.text:000040DB                 pop     ebp
.text:000040DC                 retn
.text:000040DC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000040DC
.text:000040DC ; ---------------------------------------------------------------------------
.text:000040DD                 align 10h
.text:000040DD _text           ends
.text:000040DD
.text:000040E0 ; ===========================================================================
.text:000040E0
.text:000040E0 ; Segment type: Pure code
.text:000040E0 ; Segment permissions: Read/Execute
.text:000040E0 _text           segment para public 'CODE' use32
.text:000040E0                 assume cs:_text
.text:000040E0                 ;org 40E0h
.text:000040E0 ; COMDAT (pick any)
.text:000040E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000040E0
.text:000040E0 ; =============== S U B R O U T I N E =======================================
.text:000040E0
.text:000040E0 ; Attributes: bp-based frame
.text:000040E0
.text:000040E0 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:000040E0                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:000040E0 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:000040E0                                         ; CODE XREF: NCompress::NBZip2::CDecoder::ReleaseInStream(void)+Cp
.text:000040E0                                         ; NCompress::NBZip2::CNsisDecoder::ReleaseInStream(void)+9p
.text:000040E0
.text:000040E0 var_4           = dword ptr -4
.text:000040E0
.text:000040E0                 push    ebp
.text:000040E1                 mov     ebp, esp
.text:000040E3                 push    ecx
.text:000040E4                 push    esi
.text:000040E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040EC                 mov     [ebp+var_4], ecx
.text:000040EF                 mov     eax, [ebp+var_4]
.text:000040F2                 cmp     dword ptr [eax], 0
.text:000040F5                 jz      short loc_411B
.text:000040F7                 mov     ecx, [ebp+var_4]
.text:000040FA                 mov     edx, [ecx]
.text:000040FC                 mov     eax, [ebp+var_4]
.text:000040FF                 mov     ecx, [eax]
.text:00004101                 mov     edx, [edx]
.text:00004103                 mov     esi, esp
.text:00004105                 push    ecx
.text:00004106                 mov     eax, [edx+8]
.text:00004109                 call    eax
.text:0000410B                 cmp     esi, esp
.text:0000410D                 call    __RTC_CheckEsp
.text:00004112                 mov     ecx, [ebp+var_4]
.text:00004115                 mov     dword ptr [ecx], 0
.text:0000411B
.text:0000411B loc_411B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000411B                 pop     esi
.text:0000411C                 add     esp, 4
.text:0000411F                 cmp     ebp, esp
.text:00004121                 call    __RTC_CheckEsp
.text:00004126                 mov     esp, ebp
.text:00004128                 pop     ebp
.text:00004129                 retn
.text:00004129 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00004129
.text:00004129 ; ---------------------------------------------------------------------------
.text:0000412A                 align 4
.text:0000412A _text           ends
.text:0000412A
.text:0000412C ; ===========================================================================
.text:0000412C
.text:0000412C ; Segment type: Pure code
.text:0000412C ; Segment permissions: Read/Execute
.text:0000412C _text           segment para public 'CODE' use32
.text:0000412C                 assume cs:_text
.text:0000412C                 ;org 412Ch
.text:0000412C ; COMDAT (pick any)
.text:0000412C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000412C
.text:0000412C ; =============== S U B R O U T I N E =======================================
.text:0000412C
.text:0000412C ; Attributes: bp-based frame
.text:0000412C
.text:0000412C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:0000412C                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:0000412C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:0000412C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::SetInStream(ISequentialInStream *)+10p
.text:0000412C                                         ; NCompress::NBZip2::CNsisDecoder::SetInStream(ISequentialInStream *)+Dp
.text:0000412C
.text:0000412C var_4           = dword ptr -4
.text:0000412C arg_0           = dword ptr  8
.text:0000412C
.text:0000412C                 push    ebp
.text:0000412D                 mov     ebp, esp
.text:0000412F                 push    ecx
.text:00004130                 push    esi
.text:00004131                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004138                 mov     [ebp+var_4], ecx
.text:0000413B                 cmp     [ebp+arg_0], 0
.text:0000413F                 jz      short loc_4158
.text:00004141                 mov     eax, [ebp+arg_0]
.text:00004144                 mov     ecx, [eax]
.text:00004146                 mov     esi, esp
.text:00004148                 mov     edx, [ebp+arg_0]
.text:0000414B                 push    edx
.text:0000414C                 mov     eax, [ecx+4]
.text:0000414F                 call    eax
.text:00004151                 cmp     esi, esp
.text:00004153                 call    __RTC_CheckEsp
.text:00004158
.text:00004158 loc_4158:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00004158                 mov     ecx, [ebp+var_4]
.text:0000415B                 cmp     dword ptr [ecx], 0
.text:0000415E                 jz      short loc_417B
.text:00004160                 mov     edx, [ebp+var_4]
.text:00004163                 mov     eax, [edx]
.text:00004165                 mov     ecx, [ebp+var_4]
.text:00004168                 mov     edx, [ecx]
.text:0000416A                 mov     eax, [eax]
.text:0000416C                 mov     esi, esp
.text:0000416E                 push    edx
.text:0000416F                 mov     ecx, [eax+8]
.text:00004172                 call    ecx
.text:00004174                 cmp     esi, esp
.text:00004176                 call    __RTC_CheckEsp
.text:0000417B
.text:0000417B loc_417B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000417B                 mov     edx, [ebp+var_4]
.text:0000417E                 mov     eax, [ebp+arg_0]
.text:00004181                 mov     [edx], eax
.text:00004183                 mov     eax, [ebp+arg_0]
.text:00004186                 pop     esi
.text:00004187                 add     esp, 4
.text:0000418A                 cmp     ebp, esp
.text:0000418C                 call    __RTC_CheckEsp
.text:00004191                 mov     esp, ebp
.text:00004193                 pop     ebp
.text:00004194                 retn    4
.text:00004194 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00004194
.text:00004194 ; ---------------------------------------------------------------------------
.text:00004197                 align 4
.text:00004197 _text           ends
.text:00004197
.text:00004198 ; ===========================================================================
.text:00004198
.text:00004198 ; Segment type: Pure code
.text:00004198 ; Segment permissions: Read/Execute
.text:00004198 _text           segment para public 'CODE' use32
.text:00004198                 assume cs:_text
.text:00004198                 ;org 4198h
.text:00004198 ; COMDAT (pick any)
.text:00004198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004198
.text:00004198 ; =============== S U B R O U T I N E =======================================
.text:00004198
.text:00004198 ; Attributes: bp-based frame
.text:00004198
.text:00004198 ; public: bool __thiscall NBitm::CDecoder<class CInBuffer>::Create(unsigned int)
.text:00004198                 public ?Create@?$CDecoder@VCInBuffer@@@NBitm@@QAE_NI@Z
.text:00004198 ?Create@?$CDecoder@VCInBuffer@@@NBitm@@QAE_NI@Z proc near
.text:00004198                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+73p
.text:00004198                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+A3p
.text:00004198
.text:00004198 var_4           = dword ptr -4
.text:00004198 arg_0           = dword ptr  8
.text:00004198
.text:00004198                 push    ebp
.text:00004199                 mov     ebp, esp
.text:0000419B                 push    ecx
.text:0000419C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041A3                 mov     [ebp+var_4], ecx
.text:000041A6                 mov     eax, [ebp+arg_0]
.text:000041A9                 push    eax             ; unsigned int
.text:000041AA                 mov     ecx, [ebp+var_4]
.text:000041AD                 add     ecx, 8          ; this
.text:000041B0                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:000041B5                 add     esp, 4
.text:000041B8                 cmp     ebp, esp
.text:000041BA                 call    __RTC_CheckEsp
.text:000041BF                 mov     esp, ebp
.text:000041C1                 pop     ebp
.text:000041C2                 retn    4
.text:000041C2 ?Create@?$CDecoder@VCInBuffer@@@NBitm@@QAE_NI@Z endp
.text:000041C2
.text:000041C2 ; ---------------------------------------------------------------------------
.text:000041C5                 align 4
.text:000041C5 _text           ends
.text:000041C5
.text:000041C8 ; ===========================================================================
.text:000041C8
.text:000041C8 ; Segment type: Pure code
.text:000041C8 ; Segment permissions: Read/Execute
.text:000041C8 _text           segment para public 'CODE' use32
.text:000041C8                 assume cs:_text
.text:000041C8                 ;org 41C8h
.text:000041C8 ; COMDAT (pick any)
.text:000041C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041C8
.text:000041C8 ; =============== S U B R O U T I N E =======================================
.text:000041C8
.text:000041C8 ; Attributes: bp-based frame
.text:000041C8
.text:000041C8 ; int __stdcall NBitm::CDecoder<CInBuffer>::SetStream(struct ISequentialInStream *)
.text:000041C8                 public ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z
.text:000041C8 ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z proc near
.text:000041C8                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+C1p
.text:000041C8                                         ; NCompress::NBZip2::CDecoder::SetInStream(ISequentialInStream *)+22p ...
.text:000041C8
.text:000041C8 var_4           = dword ptr -4
.text:000041C8 arg_0           = dword ptr  8
.text:000041C8
.text:000041C8                 push    ebp
.text:000041C9                 mov     ebp, esp
.text:000041CB                 push    ecx
.text:000041CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041D3                 mov     [ebp+var_4], ecx
.text:000041D6                 mov     eax, [ebp+arg_0]
.text:000041D9                 push    eax             ; struct ISequentialInStream *
.text:000041DA                 mov     ecx, [ebp+var_4]
.text:000041DD                 add     ecx, 8          ; this
.text:000041E0                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:000041E5                 add     esp, 4
.text:000041E8                 cmp     ebp, esp
.text:000041EA                 call    __RTC_CheckEsp
.text:000041EF                 mov     esp, ebp
.text:000041F1                 pop     ebp
.text:000041F2                 retn    4
.text:000041F2 ?SetStream@?$CDecoder@VCInBuffer@@@NBitm@@QAEXPAUISequentialInStream@@@Z endp
.text:000041F2
.text:000041F2 ; ---------------------------------------------------------------------------
.text:000041F5                 align 4
.text:000041F5 _text           ends
.text:000041F5
.text:000041F8 ; ===========================================================================
.text:000041F8
.text:000041F8 ; Segment type: Pure code
.text:000041F8 ; Segment permissions: Read/Execute
.text:000041F8 _text           segment para public 'CODE' use32
.text:000041F8                 assume cs:_text
.text:000041F8                 ;org 41F8h
.text:000041F8 ; COMDAT (pick any)
.text:000041F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041F8
.text:000041F8 ; =============== S U B R O U T I N E =======================================
.text:000041F8
.text:000041F8 ; Attributes: bp-based frame
.text:000041F8
.text:000041F8 ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:000041F8                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:000041F8 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:000041F8                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::SetStream(ISequentialInStream *)+18p
.text:000041F8
.text:000041F8 var_4           = dword ptr -4
.text:000041F8 arg_0           = dword ptr  8
.text:000041F8
.text:000041F8                 push    ebp
.text:000041F9                 mov     ebp, esp
.text:000041FB                 push    ecx
.text:000041FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004203                 mov     [ebp+var_4], ecx
.text:00004206                 mov     eax, [ebp+var_4]
.text:00004209                 mov     ecx, [ebp+arg_0]
.text:0000420C                 mov     [eax+0Ch], ecx
.text:0000420F                 mov     esp, ebp
.text:00004211                 pop     ebp
.text:00004212                 retn    4
.text:00004212 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00004212
.text:00004212 ; ---------------------------------------------------------------------------
.text:00004215                 align 4
.text:00004215 _text           ends
.text:00004215
.text:00004218 ; ===========================================================================
.text:00004218
.text:00004218 ; Segment type: Pure code
.text:00004218 ; Segment permissions: Read/Execute
.text:00004218 _text           segment para public 'CODE' use32
.text:00004218                 assume cs:_text
.text:00004218                 ;org 4218h
.text:00004218 ; COMDAT (pick any)
.text:00004218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004218
.text:00004218 ; =============== S U B R O U T I N E =======================================
.text:00004218
.text:00004218 ; Attributes: bp-based frame
.text:00004218
.text:00004218 ; public: void __thiscall NBitm::CDecoder<class CInBuffer>::Init(void)
.text:00004218                 public ?Init@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ
.text:00004218 ?Init@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ proc near
.text:00004218                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+F0p
.text:00004218                                         ; NCompress::NBZip2::CNsisDecoder::Read(void *,uint,uint *)+E0p
.text:00004218
.text:00004218 var_4           = dword ptr -4
.text:00004218
.text:00004218                 push    ebp
.text:00004219                 mov     ebp, esp
.text:0000421B                 push    ecx
.text:0000421C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004223                 mov     [ebp+var_4], ecx
.text:00004226                 mov     ecx, [ebp+var_4]
.text:00004229                 add     ecx, 8          ; this
.text:0000422C                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00004231                 mov     eax, [ebp+var_4]
.text:00004234                 mov     dword ptr [eax], 20h ; ' '
.text:0000423A                 mov     ecx, [ebp+var_4]
.text:0000423D                 mov     dword ptr [ecx+4], 0
.text:00004244                 mov     ecx, [ebp+var_4]
.text:00004247                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ ; NBitm::CDecoder<CInBuffer>::Normalize(void)
.text:0000424C                 add     esp, 4
.text:0000424F                 cmp     ebp, esp
.text:00004251                 call    __RTC_CheckEsp
.text:00004256                 mov     esp, ebp
.text:00004258                 pop     ebp
.text:00004259                 retn
.text:00004259 ?Init@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ endp
.text:00004259
.text:00004259 ; ---------------------------------------------------------------------------
.text:0000425A                 align 4
.text:0000425A _text           ends
.text:0000425A
.text:0000425C ; ===========================================================================
.text:0000425C
.text:0000425C ; Segment type: Pure code
.text:0000425C ; Segment permissions: Read/Execute
.text:0000425C _text           segment para public 'CODE' use32
.text:0000425C                 assume cs:_text
.text:0000425C                 ;org 425Ch
.text:0000425C ; COMDAT (pick any)
.text:0000425C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000425C
.text:0000425C ; =============== S U B R O U T I N E =======================================
.text:0000425C
.text:0000425C ; Attributes: bp-based frame
.text:0000425C
.text:0000425C ; public: unsigned __int64 __thiscall NBitm::CDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:0000425C                 public ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ
.text:0000425C ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ proc near
.text:0000425C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+322p
.text:0000425C                                         ; NCompress::NBZip2::CDecoder::DecodeFile(ICompressProgressInfo *)+3F9p ...
.text:0000425C
.text:0000425C var_4           = dword ptr -4
.text:0000425C
.text:0000425C                 push    ebp
.text:0000425D                 mov     ebp, esp
.text:0000425F                 push    ecx
.text:00004260                 push    esi
.text:00004261                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004268                 mov     [ebp+var_4], ecx
.text:0000426B                 mov     ecx, [ebp+var_4]
.text:0000426E                 add     ecx, 8          ; this
.text:00004271                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00004276                 mov     ecx, [ebp+var_4]
.text:00004279                 mov     esi, 20h ; ' '
.text:0000427E                 sub     esi, [ecx]
.text:00004280                 shr     esi, 3
.text:00004283                 xor     ecx, ecx
.text:00004285                 sub     eax, esi
.text:00004287                 sbb     edx, ecx
.text:00004289                 pop     esi
.text:0000428A                 add     esp, 4
.text:0000428D                 cmp     ebp, esp
.text:0000428F                 call    __RTC_CheckEsp
.text:00004294                 mov     esp, ebp
.text:00004296                 pop     ebp
.text:00004297                 retn
.text:00004297 ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ endp
.text:00004297
.text:00004297 _text           ends
.text:00004297
.text:00004298 ; ===========================================================================
.text:00004298
.text:00004298 ; Segment type: Pure code
.text:00004298 ; Segment permissions: Read/Execute
.text:00004298 _text           segment para public 'CODE' use32
.text:00004298                 assume cs:_text
.text:00004298                 ;org 4298h
.text:00004298 ; COMDAT (pick any)
.text:00004298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004298
.text:00004298 ; =============== S U B R O U T I N E =======================================
.text:00004298
.text:00004298 ; Attributes: bp-based frame
.text:00004298
.text:00004298 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00004298                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00004298 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00004298                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:00004298
.text:00004298 var_4           = dword ptr -4
.text:00004298
.text:00004298                 push    ebp
.text:00004299                 mov     ebp, esp
.text:0000429B                 push    ecx
.text:0000429C                 push    esi
.text:0000429D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042A4                 mov     [ebp+var_4], ecx
.text:000042A7                 mov     eax, [ebp+var_4]
.text:000042AA                 mov     ecx, [eax+20h]
.text:000042AD                 xor     esi, esi
.text:000042AF                 mov     edx, [ebp+var_4]
.text:000042B2                 add     ecx, [edx+10h]
.text:000042B5                 adc     esi, [edx+14h]
.text:000042B8                 mov     eax, [ebp+var_4]
.text:000042BB                 mov     edx, [ebp+var_4]
.text:000042BE                 mov     eax, [eax]
.text:000042C0                 sub     eax, [edx+8]
.text:000042C3                 cdq
.text:000042C4                 add     ecx, eax
.text:000042C6                 adc     esi, edx
.text:000042C8                 mov     eax, ecx
.text:000042CA                 mov     edx, esi
.text:000042CC                 pop     esi
.text:000042CD                 mov     esp, ebp
.text:000042CF                 pop     ebp
.text:000042D0                 retn
.text:000042D0 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:000042D0
.text:000042D0 ; ---------------------------------------------------------------------------
.text:000042D1                 align 4
.text:000042D1 _text           ends
.text:000042D1
.text:000042D4 ; ===========================================================================
.text:000042D4
.text:000042D4 ; Segment type: Pure code
.text:000042D4 ; Segment permissions: Read/Execute
.text:000042D4 _text           segment para public 'CODE' use32
.text:000042D4                 assume cs:_text
.text:000042D4                 ;org 42D4h
.text:000042D4 ; COMDAT (pick any)
.text:000042D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042D4
.text:000042D4 ; =============== S U B R O U T I N E =======================================
.text:000042D4
.text:000042D4 ; Attributes: bp-based frame
.text:000042D4
.text:000042D4 ; public: bool __thiscall NBitm::CDecoder<class CInBuffer>::ExtraBitsWereRead(void)const
.text:000042D4                 public ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ
.text:000042D4 ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ proc near
.text:000042D4                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+6A2p
.text:000042D4                                         ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)+78p ...
.text:000042D4
.text:000042D4 var_8           = dword ptr -8
.text:000042D4 var_4           = dword ptr -4
.text:000042D4
.text:000042D4                 push    ebp
.text:000042D5                 mov     ebp, esp
.text:000042D7                 sub     esp, 8
.text:000042DA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000042E1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042E8                 mov     [ebp+var_4], ecx
.text:000042EB                 mov     eax, [ebp+var_4]
.text:000042EE                 cmp     dword ptr [eax+28h], 4
.text:000042F2                 ja      short loc_4314
.text:000042F4                 mov     ecx, [ebp+var_4]
.text:000042F7                 mov     edx, 20h ; ' '
.text:000042FC                 sub     edx, [ecx]
.text:000042FE                 mov     eax, [ebp+var_4]
.text:00004301                 mov     ecx, [eax+28h]
.text:00004304                 shl     ecx, 3
.text:00004307                 cmp     edx, ecx
.text:00004309                 jb      short loc_4314
.text:0000430B                 mov     [ebp+var_8], 0
.text:00004312                 jmp     short loc_431B
.text:00004314 ; ---------------------------------------------------------------------------
.text:00004314
.text:00004314 loc_4314:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+1Ej
.text:00004314                                         ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+35j
.text:00004314                 mov     [ebp+var_8], 1
.text:0000431B
.text:0000431B loc_431B:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead(void)+3Ej
.text:0000431B                 mov     al, byte ptr [ebp+var_8]
.text:0000431E                 mov     esp, ebp
.text:00004320                 pop     ebp
.text:00004321                 retn
.text:00004321 ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ endp
.text:00004321
.text:00004321 ; ---------------------------------------------------------------------------
.text:00004322                 align 4
.text:00004322 _text           ends
.text:00004322
.text:00004324 ; ===========================================================================
.text:00004324
.text:00004324 ; Segment type: Pure code
.text:00004324 ; Segment permissions: Read/Execute
.text:00004324 _text           segment para public 'CODE' use32
.text:00004324                 assume cs:_text
.text:00004324                 ;org 4324h
.text:00004324 ; COMDAT (pick any)
.text:00004324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004324
.text:00004324 ; =============== S U B R O U T I N E =======================================
.text:00004324
.text:00004324 ; Attributes: bp-based frame
.text:00004324
.text:00004324 ; public: bool __thiscall NBitm::CDecoder<class CInBuffer>::ExtraBitsWereRead_Fast(void)const
.text:00004324                 public ?ExtraBitsWereRead_Fast@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ
.text:00004324 ?ExtraBitsWereRead_Fast@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ proc near
.text:00004324                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+4FFp
.text:00004324
.text:00004324 var_4           = dword ptr -4
.text:00004324
.text:00004324                 push    ebp
.text:00004325                 mov     ebp, esp
.text:00004327                 push    ecx
.text:00004328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000432F                 mov     [ebp+var_4], ecx
.text:00004332                 mov     eax, [ebp+var_4]
.text:00004335                 mov     ecx, 4
.text:0000433A                 cmp     ecx, [eax+28h]
.text:0000433D                 sbb     eax, eax
.text:0000433F                 neg     eax
.text:00004341                 mov     esp, ebp
.text:00004343                 pop     ebp
.text:00004344                 retn
.text:00004344 ?ExtraBitsWereRead_Fast@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ endp
.text:00004344
.text:00004344 ; ---------------------------------------------------------------------------
.text:00004345                 align 4
.text:00004345 _text           ends
.text:00004345
.text:00004348 ; ===========================================================================
.text:00004348
.text:00004348 ; Segment type: Pure code
.text:00004348 ; Segment permissions: Read/Execute
.text:00004348 _text           segment para public 'CODE' use32
.text:00004348                 assume cs:_text
.text:00004348                 ;org 4348h
.text:00004348 ; COMDAT (pick any)
.text:00004348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004348
.text:00004348 ; =============== S U B R O U T I N E =======================================
.text:00004348
.text:00004348 ; Attributes: bp-based frame
.text:00004348
.text:00004348 ; public: unsigned int __thiscall NBitm::CDecoder<class CInBuffer>::ReadBits(unsigned int)
.text:00004348                 public ?ReadBits@?$CDecoder@VCInBuffer@@@NBitm@@QAEII@Z
.text:00004348 ?ReadBits@?$CDecoder@VCInBuffer@@@NBitm@@QAEII@Z proc near
.text:00004348                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBits(uint)+18p
.text:00004348                                         ; NCompress::NBZip2::CBase::ReadBit(void)+16p
.text:00004348
.text:00004348 var_8           = dword ptr -8
.text:00004348 var_4           = dword ptr -4
.text:00004348 arg_0           = dword ptr  8
.text:00004348
.text:00004348                 push    ebp
.text:00004349                 mov     ebp, esp
.text:0000434B                 sub     esp, 8
.text:0000434E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004355                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000435C                 mov     [ebp+var_4], ecx
.text:0000435F                 mov     eax, [ebp+arg_0]
.text:00004362                 push    eax
.text:00004363                 mov     ecx, [ebp+var_4]
.text:00004366                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitm@@QBEII@Z ; NBitm::CDecoder<CInBuffer>::GetValue(uint)
.text:0000436B                 mov     [ebp+var_8], eax
.text:0000436E                 mov     ecx, [ebp+arg_0]
.text:00004371                 push    ecx
.text:00004372                 mov     ecx, [ebp+var_4]
.text:00004375                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z ; NBitm::CDecoder<CInBuffer>::MovePos(uint)
.text:0000437A                 mov     eax, [ebp+var_8]
.text:0000437D                 add     esp, 8
.text:00004380                 cmp     ebp, esp
.text:00004382                 call    __RTC_CheckEsp
.text:00004387                 mov     esp, ebp
.text:00004389                 pop     ebp
.text:0000438A                 retn    4
.text:0000438A ?ReadBits@?$CDecoder@VCInBuffer@@@NBitm@@QAEII@Z endp
.text:0000438A
.text:0000438A ; ---------------------------------------------------------------------------
.text:0000438D                 align 10h
.text:0000438D _text           ends
.text:0000438D
.text:00004390 ; ===========================================================================
.text:00004390
.text:00004390 ; Segment type: Pure code
.text:00004390 ; Segment permissions: Read/Execute
.text:00004390 _text           segment para public 'CODE' use32
.text:00004390                 assume cs:_text
.text:00004390                 ;org 4390h
.text:00004390 ; COMDAT (pick any)
.text:00004390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004390
.text:00004390 ; =============== S U B R O U T I N E =======================================
.text:00004390
.text:00004390 ; Attributes: bp-based frame
.text:00004390
.text:00004390 ; public: void __thiscall NBitm::CDecoder<class CInBuffer>::AlignToByte(void)
.text:00004390                 public ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ
.text:00004390 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ proc near
.text:00004390                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+131p
.text:00004390
.text:00004390 var_4           = dword ptr -4
.text:00004390
.text:00004390                 push    ebp
.text:00004391                 mov     ebp, esp
.text:00004393                 push    ecx
.text:00004394                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000439B                 mov     [ebp+var_4], ecx
.text:0000439E                 mov     eax, [ebp+var_4]
.text:000043A1                 mov     ecx, 20h ; ' '
.text:000043A6                 sub     ecx, [eax]
.text:000043A8                 and     ecx, 7
.text:000043AB                 push    ecx
.text:000043AC                 mov     ecx, [ebp+var_4]
.text:000043AF                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z ; NBitm::CDecoder<CInBuffer>::MovePos(uint)
.text:000043B4                 add     esp, 4
.text:000043B7                 cmp     ebp, esp
.text:000043B9                 call    __RTC_CheckEsp
.text:000043BE                 mov     esp, ebp
.text:000043C0                 pop     ebp
.text:000043C1                 retn
.text:000043C1 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ endp
.text:000043C1
.text:000043C1 ; ---------------------------------------------------------------------------
.text:000043C2                 align 4
.text:000043C2 _text           ends
.text:000043C2
.text:000043C4 ; ===========================================================================
.text:000043C4
.text:000043C4 ; Segment type: Pure code
.text:000043C4 ; Segment permissions: Read/Execute
.text:000043C4 _text           segment para public 'CODE' use32
.text:000043C4                 assume cs:_text
.text:000043C4                 ;org 43C4h
.text:000043C4 ; COMDAT (pick any)
.text:000043C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043C4
.text:000043C4 ; =============== S U B R O U T I N E =======================================
.text:000043C4
.text:000043C4 ; Attributes: bp-based frame
.text:000043C4
.text:000043C4 ; public: bool __thiscall NCompress::NHuffman::CDecoder<20, 258>::SetCodeLengths(unsigned char const *)
.text:000043C4                 public ?SetCodeLengths@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAE_NPBE@Z
.text:000043C4 ?SetCodeLengths@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:000043C4                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+3E1p
.text:000043C4
.text:000043C4 var_E4          = dword ptr -0E4h
.text:000043C4 var_E0          = dword ptr -0E0h
.text:000043C4 var_DC          = dword ptr -0DCh
.text:000043C4 var_D8          = dword ptr -0D8h
.text:000043C4 var_D4          = dword ptr -0D4h
.text:000043C4 var_D0          = dword ptr -0D0h
.text:000043C4 var_CC          = dword ptr -0CCh
.text:000043C4 var_C8          = dword ptr -0C8h
.text:000043C4 var_C4          = dword ptr -0C4h
.text:000043C4 var_BC          = dword ptr -0BCh
.text:000043C4 var_64          = dword ptr -64h
.text:000043C4 var_60          = dword ptr -60h
.text:000043C4 var_8           = dword ptr -8
.text:000043C4 var_4           = dword ptr -4
.text:000043C4 arg_0           = dword ptr  8
.text:000043C4
.text:000043C4                 push    ebp
.text:000043C5                 mov     ebp, esp
.text:000043C7                 sub     esp, 0E4h
.text:000043CD                 push    edi
.text:000043CE                 push    ecx
.text:000043CF                 lea     edi, [ebp+var_E4]
.text:000043D5                 mov     ecx, 39h ; '9'
.text:000043DA                 mov     eax, 0CCCCCCCCh
.text:000043DF                 rep stosd
.text:000043E1                 pop     ecx
.text:000043E2                 mov     eax, dword ptr ds:___security_cookie
.text:000043E7                 xor     eax, ebp
.text:000043E9                 mov     [ebp+var_4], eax
.text:000043EC                 mov     [ebp+var_8], ecx
.text:000043EF                 mov     [ebp+var_C4], 1
.text:000043F9                 jmp     short loc_440A
.text:000043FB ; ---------------------------------------------------------------------------
.text:000043FB
.text:000043FB loc_43FB:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+5Dj
.text:000043FB                 mov     eax, [ebp+var_C4]
.text:00004401                 add     eax, 1
.text:00004404                 mov     [ebp+var_C4], eax
.text:0000440A
.text:0000440A loc_440A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+35j
.text:0000440A                 cmp     [ebp+var_C4], 14h
.text:00004411                 ja      short loc_4423
.text:00004413                 mov     ecx, [ebp+var_C4]
.text:00004419                 mov     [ebp+ecx*4+var_60], 0
.text:00004421                 jmp     short loc_43FB
.text:00004423 ; ---------------------------------------------------------------------------
.text:00004423
.text:00004423 loc_4423:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+4Dj
.text:00004423                 mov     [ebp+var_C8], 0
.text:0000442D                 jmp     short loc_443E
.text:0000442F ; ---------------------------------------------------------------------------
.text:0000442F
.text:0000442F loc_442F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+D3j
.text:0000442F                 mov     edx, [ebp+var_C8]
.text:00004435                 add     edx, 1
.text:00004438                 mov     [ebp+var_C8], edx
.text:0000443E
.text:0000443E loc_443E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+69j
.text:0000443E                 cmp     [ebp+var_C8], 102h
.text:00004448                 jnb     short loc_4499
.text:0000444A                 mov     eax, [ebp+arg_0]
.text:0000444D                 add     eax, [ebp+var_C8]
.text:00004453                 movzx   ecx, byte ptr [eax]
.text:00004456                 mov     [ebp+var_CC], ecx
.text:0000445C                 cmp     [ebp+var_CC], 14h
.text:00004463                 jbe     short loc_446C
.text:00004465                 xor     al, al
.text:00004467                 jmp     loc_4679
.text:0000446C ; ---------------------------------------------------------------------------
.text:0000446C
.text:0000446C loc_446C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+9Fj
.text:0000446C                 mov     edx, [ebp+var_CC]
.text:00004472                 mov     eax, [ebp+edx*4+var_60]
.text:00004476                 add     eax, 1
.text:00004479                 mov     ecx, [ebp+var_CC]
.text:0000447F                 mov     [ebp+ecx*4+var_60], eax
.text:00004483                 mov     edx, [ebp+var_C8]
.text:00004489                 mov     eax, [ebp+var_8]
.text:0000448C                 mov     dword ptr [eax+edx*4+0A8h], 0FFFFFFFFh
.text:00004497                 jmp     short loc_442F
.text:00004499 ; ---------------------------------------------------------------------------
.text:00004499
.text:00004499 loc_4499:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+84j
.text:00004499                 mov     [ebp+var_60], 0
.text:000044A0                 mov     ecx, [ebp+var_8]
.text:000044A3                 mov     dword ptr [ecx], 0
.text:000044A9                 mov     edx, [ebp+var_8]
.text:000044AC                 mov     dword ptr [edx+54h], 0
.text:000044B3                 mov     [ebp+var_D0], 0
.text:000044BD                 mov     [ebp+var_D4], 0
.text:000044C7                 mov     [ebp+var_D8], 100000h
.text:000044D1                 mov     [ebp+var_C4], 1
.text:000044DB                 jmp     short loc_44EC
.text:000044DD ; ---------------------------------------------------------------------------
.text:000044DD
.text:000044DD loc_44DD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *):loc_45F4j
.text:000044DD                 mov     eax, [ebp+var_C4]
.text:000044E3                 add     eax, 1
.text:000044E6                 mov     [ebp+var_C4], eax
.text:000044EC
.text:000044EC loc_44EC:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+117j
.text:000044EC                 cmp     [ebp+var_C4], 14h
.text:000044F3                 ja      loc_45F9
.text:000044F9                 mov     ecx, 14h
.text:000044FE                 sub     ecx, [ebp+var_C4]
.text:00004504                 mov     edx, [ebp+var_C4]
.text:0000450A                 mov     eax, [ebp+edx*4+var_60]
.text:0000450E                 shl     eax, cl
.text:00004510                 add     eax, [ebp+var_D0]
.text:00004516                 mov     [ebp+var_D0], eax
.text:0000451C                 cmp     [ebp+var_D0], 100000h
.text:00004526                 jbe     short loc_452F
.text:00004528                 xor     al, al
.text:0000452A                 jmp     loc_4679
.text:0000452F ; ---------------------------------------------------------------------------
.text:0000452F
.text:0000452F loc_452F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+162j
.text:0000452F                 cmp     [ebp+var_C4], 14h
.text:00004536                 jnz     short loc_4544
.text:00004538                 mov     [ebp+var_E4], 100000h
.text:00004542                 jmp     short loc_4550
.text:00004544 ; ---------------------------------------------------------------------------
.text:00004544
.text:00004544 loc_4544:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+172j
.text:00004544                 mov     ecx, [ebp+var_D0]
.text:0000454A                 mov     [ebp+var_E4], ecx
.text:00004550
.text:00004550 loc_4550:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+17Ej
.text:00004550                 mov     edx, [ebp+var_C4]
.text:00004556                 mov     eax, [ebp+var_8]
.text:00004559                 mov     ecx, [ebp+var_E4]
.text:0000455F                 mov     [eax+edx*4], ecx
.text:00004562                 mov     edx, [ebp+var_C4]
.text:00004568                 mov     eax, [ebp+var_8]
.text:0000456B                 mov     ecx, [eax+edx*4+50h]
.text:0000456F                 mov     edx, [ebp+var_C4]
.text:00004575                 add     ecx, [ebp+edx*4+var_64]
.text:00004579                 mov     eax, [ebp+var_C4]
.text:0000457F                 mov     edx, [ebp+var_8]
.text:00004582                 mov     [edx+eax*4+54h], ecx
.text:00004586                 mov     eax, [ebp+var_C4]
.text:0000458C                 mov     ecx, [ebp+var_C4]
.text:00004592                 mov     edx, [ebp+var_8]
.text:00004595                 mov     ecx, [edx+ecx*4+54h]
.text:00004599                 mov     [ebp+eax*4+var_BC], ecx
.text:000045A0                 cmp     [ebp+var_C4], 9
.text:000045A7                 ja      short loc_45F4
.text:000045A9                 mov     edx, [ebp+var_C4]
.text:000045AF                 mov     eax, [ebp+var_8]
.text:000045B2                 mov     ecx, [eax+edx*4]
.text:000045B5                 shr     ecx, 0Bh
.text:000045B8                 mov     [ebp+var_DC], ecx
.text:000045BE                 jmp     short loc_45CF
.text:000045C0 ; ---------------------------------------------------------------------------
.text:000045C0
.text:000045C0 loc_45C0:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+22Ej
.text:000045C0                 mov     edx, [ebp+var_D4]
.text:000045C6                 add     edx, 1
.text:000045C9                 mov     [ebp+var_D4], edx
.text:000045CF
.text:000045CF loc_45CF:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+1FAj
.text:000045CF                 mov     eax, [ebp+var_D4]
.text:000045D5                 cmp     eax, [ebp+var_DC]
.text:000045DB                 jnb     short loc_45F4
.text:000045DD                 mov     ecx, [ebp+var_8]
.text:000045E0                 add     ecx, [ebp+var_D4]
.text:000045E6                 mov     dl, byte ptr [ebp+var_C4]
.text:000045EC                 mov     [ecx+4B0h], dl
.text:000045F2                 jmp     short loc_45C0
.text:000045F4 ; ---------------------------------------------------------------------------
.text:000045F4
.text:000045F4 loc_45F4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+1E3j
.text:000045F4                                         ; NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+217j
.text:000045F4                 jmp     loc_44DD
.text:000045F9 ; ---------------------------------------------------------------------------
.text:000045F9
.text:000045F9 loc_45F9:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+12Fj
.text:000045F9                 mov     [ebp+var_C8], 0
.text:00004603                 jmp     short loc_4614
.text:00004605 ; ---------------------------------------------------------------------------
.text:00004605
.text:00004605 loc_4605:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *):loc_4675j
.text:00004605                 mov     eax, [ebp+var_C8]
.text:0000460B                 add     eax, 1
.text:0000460E                 mov     [ebp+var_C8], eax
.text:00004614
.text:00004614 loc_4614:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+23Fj
.text:00004614                 cmp     [ebp+var_C8], 102h
.text:0000461E                 jnb     short loc_4677
.text:00004620                 mov     ecx, [ebp+arg_0]
.text:00004623                 add     ecx, [ebp+var_C8]
.text:00004629                 movzx   edx, byte ptr [ecx]
.text:0000462C                 mov     [ebp+var_E0], edx
.text:00004632                 cmp     [ebp+var_E0], 0
.text:00004639                 jz      short loc_4675
.text:0000463B                 mov     eax, [ebp+var_E0]
.text:00004641                 mov     ecx, [ebp+eax*4+var_BC]
.text:00004648                 mov     edx, [ebp+var_8]
.text:0000464B                 mov     eax, [ebp+var_C8]
.text:00004651                 mov     [edx+ecx*4+0A8h], eax
.text:00004658                 mov     ecx, [ebp+var_E0]
.text:0000465E                 mov     edx, [ebp+ecx*4+var_BC]
.text:00004665                 add     edx, 1
.text:00004668                 mov     eax, [ebp+var_E0]
.text:0000466E                 mov     [ebp+eax*4+var_BC], edx
.text:00004675
.text:00004675 loc_4675:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+275j
.text:00004675                 jmp     short loc_4605
.text:00004677 ; ---------------------------------------------------------------------------
.text:00004677
.text:00004677 loc_4677:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+25Aj
.text:00004677                 mov     al, 1
.text:00004679
.text:00004679 loc_4679:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+A3j
.text:00004679                                         ; NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+166j
.text:00004679                 push    edx
.text:0000467A                 mov     ecx, ebp
.text:0000467C                 push    eax
.text:0000467D                 lea     edx, $LN27_0
.text:00004683                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004688                 pop     eax
.text:00004689                 pop     edx
.text:0000468A                 pop     edi
.text:0000468B                 mov     ecx, [ebp+var_4]
.text:0000468E                 xor     ecx, ebp
.text:00004690                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004695                 mov     esp, ebp
.text:00004697                 pop     ebp
.text:00004698                 retn    4
.text:00004698 ?SetCodeLengths@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:00004698
.text:00004698 ; ---------------------------------------------------------------------------
.text:0000469B                 align 4
.text:0000469C $LN27_0         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<20,258>::SetCodeLengths(uchar const *)+2B9o
.text:000046A0                 dd offset $LN26
.text:000046A4 $LN26           dd 0FFFFFFA0h, 54h      ; DATA XREF: .text:000046A0o
.text:000046AC                 dd offset $LN24_0       ; "lenCounts"
.text:000046B0                 dd 0FFFFFF44h, 54h
.text:000046B8                 dd offset $LN25_0       ; "tmpPositions"
.text:000046BC $LN25_0         db 'tmpPositions',0     ; DATA XREF: .text:000046B8o
.text:000046C9 $LN24_0         db 'lenCounts',0        ; DATA XREF: .text:000046ACo
.text:000046D3                 align 4
.text:000046D3 _text           ends
.text:000046D3
.text:000046D4 ; ===========================================================================
.text:000046D4
.text:000046D4 ; Segment type: Pure code
.text:000046D4 ; Segment permissions: Read/Execute
.text:000046D4 _text           segment para public 'CODE' use32
.text:000046D4                 assume cs:_text
.text:000046D4                 ;org 46D4h
.text:000046D4 ; COMDAT (pick any)
.text:000046D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046D4
.text:000046D4 ; =============== S U B R O U T I N E =======================================
.text:000046D4
.text:000046D4 ; Attributes: bp-based frame
.text:000046D4
.text:000046D4 ; public: void __thiscall NBitm::CDecoder<class CInBuffer>::Normalize(void)
.text:000046D4                 public ?Normalize@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ
.text:000046D4 ?Normalize@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ proc near
.text:000046D4                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::Init(void)+2Fp
.text:000046D4                                         ; NBitm::CDecoder<CInBuffer>::MovePos(uint)+1Ep
.text:000046D4
.text:000046D4 var_4           = dword ptr -4
.text:000046D4
.text:000046D4                 push    ebp
.text:000046D5                 mov     ebp, esp
.text:000046D7                 push    ecx
.text:000046D8                 push    esi
.text:000046D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046E0                 mov     [ebp+var_4], ecx
.text:000046E3                 jmp     short loc_46F2
.text:000046E5 ; ---------------------------------------------------------------------------
.text:000046E5
.text:000046E5 loc_46E5:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::Normalize(void)+45j
.text:000046E5                 mov     eax, [ebp+var_4]
.text:000046E8                 mov     ecx, [eax]
.text:000046EA                 sub     ecx, 8
.text:000046ED                 mov     edx, [ebp+var_4]
.text:000046F0                 mov     [edx], ecx
.text:000046F2
.text:000046F2 loc_46F2:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::Normalize(void)+Fj
.text:000046F2                 mov     eax, [ebp+var_4]
.text:000046F5                 cmp     dword ptr [eax], 8
.text:000046F8                 jb      short loc_471B
.text:000046FA                 mov     ecx, [ebp+var_4]
.text:000046FD                 mov     esi, [ecx+4]
.text:00004700                 shl     esi, 8
.text:00004703                 mov     ecx, [ebp+var_4]
.text:00004706                 add     ecx, 8          ; this
.text:00004709                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:0000470E                 movzx   edx, al
.text:00004711                 or      esi, edx
.text:00004713                 mov     eax, [ebp+var_4]
.text:00004716                 mov     [eax+4], esi
.text:00004719                 jmp     short loc_46E5
.text:0000471B ; ---------------------------------------------------------------------------
.text:0000471B
.text:0000471B loc_471B:                               ; CODE XREF: NBitm::CDecoder<CInBuffer>::Normalize(void)+24j
.text:0000471B                 pop     esi
.text:0000471C                 add     esp, 4
.text:0000471F                 cmp     ebp, esp
.text:00004721                 call    __RTC_CheckEsp
.text:00004726                 mov     esp, ebp
.text:00004728                 pop     ebp
.text:00004729                 retn
.text:00004729 ?Normalize@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ endp
.text:00004729
.text:00004729 ; ---------------------------------------------------------------------------
.text:0000472A                 align 4
.text:0000472A _text           ends
.text:0000472A
.text:0000472C ; ===========================================================================
.text:0000472C
.text:0000472C ; Segment type: Pure code
.text:0000472C ; Segment permissions: Read/Execute
.text:0000472C _text           segment para public 'CODE' use32
.text:0000472C                 assume cs:_text
.text:0000472C                 ;org 472Ch
.text:0000472C ; COMDAT (pick any)
.text:0000472C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000472C
.text:0000472C ; =============== S U B R O U T I N E =======================================
.text:0000472C
.text:0000472C ; Attributes: bp-based frame
.text:0000472C
.text:0000472C ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:0000472C                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:0000472C ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:0000472C                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::Normalize(void)+35p
.text:0000472C
.text:0000472C var_8           = dword ptr -8
.text:0000472C var_4           = dword ptr -4
.text:0000472C
.text:0000472C                 push    ebp
.text:0000472D                 mov     ebp, esp
.text:0000472F                 sub     esp, 8
.text:00004732                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004739                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004740                 mov     [ebp+var_4], ecx
.text:00004743                 mov     eax, [ebp+var_4]
.text:00004746                 mov     ecx, [ebp+var_4]
.text:00004749                 mov     edx, [eax]
.text:0000474B                 cmp     edx, [ecx+4]
.text:0000474E                 jb      short loc_475A
.text:00004750                 mov     ecx, [ebp+var_4] ; this
.text:00004753                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00004758                 jmp     short loc_4774
.text:0000475A ; ---------------------------------------------------------------------------
.text:0000475A
.text:0000475A loc_475A:                               ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:0000475A                 mov     eax, [ebp+var_4]
.text:0000475D                 mov     ecx, [eax]
.text:0000475F                 mov     dl, [ecx]
.text:00004761                 mov     byte ptr [ebp+var_8+3], dl
.text:00004764                 mov     eax, [ebp+var_4]
.text:00004767                 mov     ecx, [eax]
.text:00004769                 add     ecx, 1
.text:0000476C                 mov     edx, [ebp+var_4]
.text:0000476F                 mov     [edx], ecx
.text:00004771                 mov     al, byte ptr [ebp+var_8+3]
.text:00004774
.text:00004774 loc_4774:                               ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00004774                 add     esp, 8
.text:00004777                 cmp     ebp, esp
.text:00004779                 call    __RTC_CheckEsp
.text:0000477E                 mov     esp, ebp
.text:00004780                 pop     ebp
.text:00004781                 retn
.text:00004781 ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:00004781
.text:00004781 ; ---------------------------------------------------------------------------
.text:00004782                 align 4
.text:00004782 _text           ends
.text:00004782
.text:00004784 ; ===========================================================================
.text:00004784
.text:00004784 ; Segment type: Pure code
.text:00004784 ; Segment permissions: Read/Execute
.text:00004784 _text           segment para public 'CODE' use32
.text:00004784                 assume cs:_text
.text:00004784                 ;org 4784h
.text:00004784 ; COMDAT (pick any)
.text:00004784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004784
.text:00004784 ; =============== S U B R O U T I N E =======================================
.text:00004784
.text:00004784 ; Attributes: bp-based frame
.text:00004784
.text:00004784 ; public: unsigned int __thiscall NBitm::CDecoder<class CInBuffer>::GetValue(unsigned int)const
.text:00004784                 public ?GetValue@?$CDecoder@VCInBuffer@@@NBitm@@QBEII@Z
.text:00004784 ?GetValue@?$CDecoder@VCInBuffer@@@NBitm@@QBEII@Z proc near
.text:00004784                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::ReadBits(uint)+1Ep
.text:00004784                                         ; NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+1Fp
.text:00004784
.text:00004784 var_4           = dword ptr -4
.text:00004784 arg_0           = dword ptr  8
.text:00004784
.text:00004784                 push    ebp
.text:00004785                 mov     ebp, esp
.text:00004787                 push    ecx
.text:00004788                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000478F                 mov     [ebp+var_4], ecx
.text:00004792                 mov     eax, [ebp+var_4]
.text:00004795                 mov     ecx, 8
.text:0000479A                 sub     ecx, [eax]
.text:0000479C                 mov     edx, [ebp+var_4]
.text:0000479F                 mov     eax, [edx+4]
.text:000047A2                 shr     eax, cl
.text:000047A4                 and     eax, 0FFFFFFh
.text:000047A9                 mov     ecx, 18h
.text:000047AE                 sub     ecx, [ebp+arg_0]
.text:000047B1                 shr     eax, cl
.text:000047B3                 mov     esp, ebp
.text:000047B5                 pop     ebp
.text:000047B6                 retn    4
.text:000047B6 ?GetValue@?$CDecoder@VCInBuffer@@@NBitm@@QBEII@Z endp
.text:000047B6
.text:000047B6 ; ---------------------------------------------------------------------------
.text:000047B9                 align 4
.text:000047B9 _text           ends
.text:000047B9
.text:000047BC ; ===========================================================================
.text:000047BC
.text:000047BC ; Segment type: Pure code
.text:000047BC ; Segment permissions: Read/Execute
.text:000047BC _text           segment para public 'CODE' use32
.text:000047BC                 assume cs:_text
.text:000047BC                 ;org 47BCh
.text:000047BC ; COMDAT (pick any)
.text:000047BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047BC
.text:000047BC ; =============== S U B R O U T I N E =======================================
.text:000047BC
.text:000047BC ; Attributes: bp-based frame
.text:000047BC
.text:000047BC ; public: void __thiscall NBitm::CDecoder<class CInBuffer>::MovePos(unsigned int)
.text:000047BC                 public ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z
.text:000047BC ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z proc near
.text:000047BC                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::ReadBits(uint)+2Dp
.text:000047BC                                         ; NBitm::CDecoder<CInBuffer>::AlignToByte(void)+1Fp ...
.text:000047BC
.text:000047BC var_4           = dword ptr -4
.text:000047BC arg_0           = dword ptr  8
.text:000047BC
.text:000047BC                 push    ebp
.text:000047BD                 mov     ebp, esp
.text:000047BF                 push    ecx
.text:000047C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047C7                 mov     [ebp+var_4], ecx
.text:000047CA                 mov     eax, [ebp+var_4]
.text:000047CD                 mov     ecx, [eax]
.text:000047CF                 add     ecx, [ebp+arg_0]
.text:000047D2                 mov     edx, [ebp+var_4]
.text:000047D5                 mov     [edx], ecx
.text:000047D7                 mov     ecx, [ebp+var_4]
.text:000047DA                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitm@@QAEXXZ ; NBitm::CDecoder<CInBuffer>::Normalize(void)
.text:000047DF                 add     esp, 4
.text:000047E2                 cmp     ebp, esp
.text:000047E4                 call    __RTC_CheckEsp
.text:000047E9                 mov     esp, ebp
.text:000047EB                 pop     ebp
.text:000047EC                 retn    4
.text:000047EC ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z endp
.text:000047EC
.text:000047EC ; ---------------------------------------------------------------------------
.text:000047EF                 align 10h
.text:000047EF _text           ends
.text:000047EF
.text:000047F0 ; ===========================================================================
.text:000047F0
.text:000047F0 ; Segment type: Pure code
.text:000047F0 ; Segment permissions: Read/Execute
.text:000047F0 _text           segment para public 'CODE' use32
.text:000047F0                 assume cs:_text
.text:000047F0                 ;org 47F0h
.text:000047F0 ; COMDAT (pick any)
.text:000047F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047F0
.text:000047F0 ; =============== S U B R O U T I N E =======================================
.text:000047F0
.text:000047F0 ; Attributes: bp-based frame
.text:000047F0
.text:000047F0 ; public: unsigned int __thiscall NCompress::NHuffman::CDecoder<20, 258>::DecodeSymbol<class NBitm::CDecoder<class CInBuffer>>(class NBitm::CDecoder<class CInBuffer> *)
.text:000047F0                 public ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitm@@@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitm@@@Z
.text:000047F0 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitm@@@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitm@@@Z proc near
.text:000047F0                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+51Dp
.text:000047F0
.text:000047F0 var_10          = dword ptr -10h
.text:000047F0 var_C           = dword ptr -0Ch
.text:000047F0 var_8           = dword ptr -8
.text:000047F0 var_4           = dword ptr -4
.text:000047F0 arg_0           = dword ptr  8
.text:000047F0
.text:000047F0                 push    ebp
.text:000047F1                 mov     ebp, esp
.text:000047F3                 sub     esp, 10h
.text:000047F6                 mov     eax, 0CCCCCCCCh
.text:000047FB                 mov     [ebp+var_10], eax
.text:000047FE                 mov     [ebp+var_C], eax
.text:00004801                 mov     [ebp+var_8], eax
.text:00004804                 mov     [ebp+var_4], eax
.text:00004807                 mov     [ebp+var_4], ecx
.text:0000480A                 push    14h
.text:0000480C                 mov     ecx, [ebp+arg_0]
.text:0000480F                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitm@@QBEII@Z ; NBitm::CDecoder<CInBuffer>::GetValue(uint)
.text:00004814                 mov     [ebp+var_C], eax
.text:00004817                 mov     eax, [ebp+var_4]
.text:0000481A                 mov     ecx, [ebp+var_C]
.text:0000481D                 cmp     ecx, [eax+24h]
.text:00004820                 jnb     short loc_4838
.text:00004822                 mov     edx, [ebp+var_C]
.text:00004825                 shr     edx, 0Bh
.text:00004828                 mov     eax, [ebp+var_4]
.text:0000482B                 movzx   ecx, byte ptr [eax+edx+4B0h]
.text:00004833                 mov     [ebp+var_8], ecx
.text:00004836                 jmp     short loc_485A
.text:00004838 ; ---------------------------------------------------------------------------
.text:00004838
.text:00004838 loc_4838:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+30j
.text:00004838                 mov     [ebp+var_8], 0Ah
.text:0000483F                 jmp     short loc_484A
.text:00004841 ; ---------------------------------------------------------------------------
.text:00004841
.text:00004841 loc_4841:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+68j
.text:00004841                 mov     edx, [ebp+var_8]
.text:00004844                 add     edx, 1
.text:00004847                 mov     [ebp+var_8], edx
.text:0000484A
.text:0000484A loc_484A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+4Fj
.text:0000484A                 mov     eax, [ebp+var_8]
.text:0000484D                 mov     ecx, [ebp+var_4]
.text:00004850                 mov     edx, [ebp+var_C]
.text:00004853                 cmp     edx, [ecx+eax*4]
.text:00004856                 jb      short loc_485A
.text:00004858                 jmp     short loc_4841
.text:0000485A ; ---------------------------------------------------------------------------
.text:0000485A
.text:0000485A loc_485A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+46j
.text:0000485A                                         ; NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+66j
.text:0000485A                 mov     eax, [ebp+var_8]
.text:0000485D                 push    eax
.text:0000485E                 mov     ecx, [ebp+arg_0]
.text:00004861                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitm@@QAEXI@Z ; NBitm::CDecoder<CInBuffer>::MovePos(uint)
.text:00004866                 mov     ecx, [ebp+var_8]
.text:00004869                 mov     edx, [ebp+var_4]
.text:0000486C                 mov     eax, [ebp+var_C]
.text:0000486F                 sub     eax, [edx+ecx*4-4]
.text:00004873                 mov     ecx, 14h
.text:00004878                 sub     ecx, [ebp+var_8]
.text:0000487B                 shr     eax, cl
.text:0000487D                 mov     ecx, [ebp+var_8]
.text:00004880                 mov     edx, [ebp+var_4]
.text:00004883                 add     eax, [edx+ecx*4+54h]
.text:00004887                 mov     [ebp+var_10], eax
.text:0000488A                 cmp     [ebp+var_10], 102h
.text:00004891                 jb      short loc_4898
.text:00004893                 or      eax, 0FFFFFFFFh
.text:00004896                 jmp     short loc_48A5
.text:00004898 ; ---------------------------------------------------------------------------
.text:00004898
.text:00004898 loc_4898:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+A1j
.text:00004898                 mov     eax, [ebp+var_10]
.text:0000489B                 mov     ecx, [ebp+var_4]
.text:0000489E                 mov     eax, [ecx+eax*4+0A8h]
.text:000048A5
.text:000048A5 loc_48A5:                               ; CODE XREF: NCompress::NHuffman::CDecoder<20,258>::DecodeSymbol<NBitm::CDecoder<CInBuffer>>(NBitm::CDecoder<CInBuffer> *)+A6j
.text:000048A5                 add     esp, 10h
.text:000048A8                 cmp     ebp, esp
.text:000048AA                 call    __RTC_CheckEsp
.text:000048AF                 mov     esp, ebp
.text:000048B1                 pop     ebp
.text:000048B2                 retn    4
.text:000048B2 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitm@@@?$CDecoder@$0BE@$0BAC@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitm@@@Z endp
.text:000048B2
.text:000048B2 ; ---------------------------------------------------------------------------
.text:000048B5                 align 4
.text:000048B5 _text           ends
.text:000048B5
.text:000048B8 ; ===========================================================================
.text:000048B8
.text:000048B8 ; Segment type: Pure code
.text:000048B8 ; Segment permissions: Read/Execute
.text:000048B8 _text           segment para public 'CODE' use32
.text:000048B8                 assume cs:_text
.text:000048B8                 ;org 48B8h
.text:000048B8 ; COMDAT (pick any)
.text:000048B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048B8
.text:000048B8 ; =============== S U B R O U T I N E =======================================
.text:000048B8
.text:000048B8
.text:000048B8 ; [thunk]:public: virtual long __stdcall NCompress::NBZip2::CDecoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000048B8                 public ?QueryInterface@CDecoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000048B8 ?QueryInterface@CDecoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000048B8                                         ; DATA XREF: .rdata:const NCompress::NBZip2::CDecoder::`vftable'{for `ICompressSetCoderMt'}o
.text:000048B8
.text:000048B8 arg_0           = dword ptr  4
.text:000048B8
.text:000048B8                 sub     [esp+arg_0], 4
.text:000048BD                 jmp     ?QueryInterface@CDecoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)
.text:000048BD ?QueryInterface@CDecoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000048BD
.text:000048BD ; ---------------------------------------------------------------------------
.text:000048C2                 align 4
.text:000048C2 _text           ends
.text:000048C2
.text:000048C4 ; ===========================================================================
.text:000048C4
.text:000048C4 ; Segment type: Pure code
.text:000048C4 ; Segment permissions: Read/Execute
.text:000048C4 _text           segment para public 'CODE' use32
.text:000048C4                 assume cs:_text
.text:000048C4                 ;org 48C4h
.text:000048C4 ; COMDAT (pick any)
.text:000048C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048C4
.text:000048C4 ; =============== S U B R O U T I N E =======================================
.text:000048C4
.text:000048C4
.text:000048C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CDecoder::Release`adjustor{4}' (void)
.text:000048C4                 public ?Release@CDecoder@NBZip2@NCompress@@W3AGKXZ
.text:000048C4 ?Release@CDecoder@NBZip2@NCompress@@W3AGKXZ proc near
.text:000048C4                                         ; DATA XREF: .rdata:00002E18o
.text:000048C4
.text:000048C4 arg_0           = dword ptr  4
.text:000048C4
.text:000048C4                 sub     [esp+arg_0], 4
.text:000048C9                 jmp     ?Release@CDecoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CDecoder::Release(void)
.text:000048C9 ?Release@CDecoder@NBZip2@NCompress@@W3AGKXZ endp
.text:000048C9
.text:000048C9 ; ---------------------------------------------------------------------------
.text:000048CE                 align 10h
.text:000048CE _text           ends
.text:000048CE
.text:000048D0 ; ===========================================================================
.text:000048D0
.text:000048D0 ; Segment type: Pure code
.text:000048D0 ; Segment permissions: Read/Execute
.text:000048D0 _text           segment para public 'CODE' use32
.text:000048D0                 assume cs:_text
.text:000048D0                 ;org 48D0h
.text:000048D0 ; COMDAT (pick any)
.text:000048D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048D0
.text:000048D0 ; =============== S U B R O U T I N E =======================================
.text:000048D0
.text:000048D0
.text:000048D0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CDecoder::AddRef`adjustor{4}' (void)
.text:000048D0                 public ?AddRef@CDecoder@NBZip2@NCompress@@W3AGKXZ
.text:000048D0 ?AddRef@CDecoder@NBZip2@NCompress@@W3AGKXZ proc near
.text:000048D0                                         ; DATA XREF: .rdata:00002E14o
.text:000048D0
.text:000048D0 arg_0           = dword ptr  4
.text:000048D0
.text:000048D0                 sub     [esp+arg_0], 4
.text:000048D5                 jmp     ?AddRef@CDecoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CDecoder::AddRef(void)
.text:000048D5 ?AddRef@CDecoder@NBZip2@NCompress@@W3AGKXZ endp
.text:000048D5
.text:000048D5 _text           ends
.text:000048D5
UNDEF:000048E0 ; ===========================================================================
UNDEF:000048E0
UNDEF:000048E0 ; Segment type: Externs
UNDEF:000048E0 ; UNDEF
UNDEF:000048E0 ; __stdcall BigAlloc(x)
UNDEF:000048E0                 extrn _BigAlloc@4:near  ; CODE XREF: NCompress::NBZip2::CState::Alloc(void)+1Bp
UNDEF:000048E4                 extrn __RTC_CheckEsp:near
UNDEF:000048E4                                         ; CODE XREF: NCompress::NBZip2::CState::Alloc(void)+35p
UNDEF:000048E4                                         ; NCompress::NBZip2::CState::Free(void)+27p ...
UNDEF:000048E8                 extrn __RTC_Shutdown:near
UNDEF:000048E8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000048EC                 extrn __RTC_InitBase:near
UNDEF:000048EC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000048F0 ; __stdcall BigFree(x)
UNDEF:000048F0                 extrn _BigFree@4:near   ; CODE XREF: NCompress::NBZip2::CState::Free(void)+14p
UNDEF:000048F4                 extrn ___security_cookie:near
UNDEF:000048F4                                         ; DATA XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+1Er
UNDEF:000048F4                                         ; NCompress::NBZip2::CDecoder::CDecoder(void)+19r ...
UNDEF:000048F8 ; __fastcall __security_check_cookie(x)
UNDEF:000048F8                 extrn @__security_check_cookie@4:near
UNDEF:000048F8                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+6E7p
UNDEF:000048F8                                         ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)+169p ...
UNDEF:000048FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000048FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000048FC                                         ; CODE XREF: NCompress::NBZip2::CBase::ReadBlock(uint *,uint,NCompress::NBZip2::CBlockProps *)+6DAp
UNDEF:000048FC                                         ; NCompress::NBZip2::CDecoder::ReadSignature(uint &)+15Dp ...
UNDEF:00004900 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00004900                 extrn _memset:near      ; CODE XREF: NCompress::CMtf8Decoder::StartInit(void)+19p
UNDEF:00004904                 extrn ___CxxFrameHandler3:near
UNDEF:00004904                                         ; CODE XREF: __ehhandler$??0CDecoder@NBZip2@NCompress@@QAE@XZ+16j
UNDEF:00004904                                         ; __ehhandler$??1CDecoder@NBZip2@NCompress@@QAE@XZ+16j ...
UNDEF:00004908 ; const type_info::`vftable'
UNDEF:00004908                 extrn ??_7type_info@@6B@:near
UNDEF:00004908                                         ; DATA XREF: .data:NCompress::NBZip2::CDecoder `RTTI Type Descriptor'o
UNDEF:00004908                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:0000490C ; __stdcall CriticalSection_Init(x)
UNDEF:0000490C                 extrn _CriticalSection_Init@4:near
UNDEF:0000490C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:00004910 ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00004910                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:00004910                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:00004910                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:00004914 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00004914                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00004914                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00004918 ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:00004918                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:00004918                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:0000491C                 extrn _IID_ICompressSetCoderMt:near
UNDEF:0000491C                                         ; DATA XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *):loc_3500o
UNDEF:00004920                 extrn _IID_ICompressCoder:near
UNDEF:00004920                                         ; DATA XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *):loc_34E4o
UNDEF:00004924 ; const IID IID_IUnknown
UNDEF:00004924                 extrn _IID_IUnknown:near
UNDEF:00004924                                         ; DATA XREF: NCompress::NBZip2::CDecoder::QueryInterface(_GUID const &,void * *)+14o
UNDEF:00004928 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00004928                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000492C ; void __cdecl operator delete(void *)
UNDEF:0000492C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Create@CDecoder@NBZip2@NCompress@@QAEJXZ$2+4p
UNDEF:0000492C                                         ; NCompress::NBZip2::CDecoder::`scalar deleting destructor'(uint)+22p ...
UNDEF:00004930 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00004930                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00004930                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00004934                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00004934                                         ; .rdata:000037BCo ...
UNDEF:00004938 ; __stdcall HandlePtr_Close(x)
UNDEF:00004938                 extrn _HandlePtr_Close@4:near
UNDEF:00004938                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:00004938                                         ; NWindows::CThread::Close(void)+12p
UNDEF:0000493C ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:0000493C                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:0000493C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+14Ap
UNDEF:00004940 ; void *__cdecl operator new(unsigned int)
UNDEF:00004940                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCompress::NBZip2::CDecoder::Create(void)+10Dp
UNDEF:00004944 ; __stdcall ManualResetEvent_CreateNotSignaled(x)
UNDEF:00004944                 extrn _ManualResetEvent_CreateNotSignaled@4:near
UNDEF:00004944                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+25p
UNDEF:00004948 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00004948                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00004948                                         ; CODE XREF: NCompress::NBZip2::CState::`vector deleting destructor'(uint)+2Bp
UNDEF:0000494C ; __stdcall Event_Set(x)
UNDEF:0000494C                 extrn _Event_Set@4:near ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Set(void)+12p
UNDEF:00004950 ; __stdcall Handle_WaitObject(x)
UNDEF:00004950                 extrn _Handle_WaitObject@4:near
UNDEF:00004950                                         ; CODE XREF: NWindows::CThread::Wait(void)+14p
UNDEF:00004950                                         ; NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:00004954 ; __stdcall Event_Reset(x)
UNDEF:00004954                 extrn _Event_Reset@4:near
UNDEF:00004954                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Reset(void)+12p
UNDEF:00004958 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00004958                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00004958                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:0000495C ; private: static unsigned int * CBZip2Crc::Table
UNDEF:0000495C                 extrn ?Table@CBZip2Crc@@0PAIA:near
UNDEF:0000495C                                         ; DATA XREF: CBZip2Crc::UpdateByte(uint)+21r
UNDEF:00004960 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00004960                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00004960                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+14Bp
UNDEF:00004964 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00004964                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00004964                                         ; CODE XREF: NCompress::NBZip2::CDecoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+98p
UNDEF:00004968 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00004968                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00004968                                         ; CODE XREF: NCompress::NBZip2::CDecoder::Flush(void)+14p
UNDEF:0000496C ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:0000496C                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:0000496C                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::CreateIfNotCreated(void)+25p
UNDEF:00004970 ; __stdcall Thread_Create(x, x, x)
UNDEF:00004970                 extrn _Thread_Create@12:near
UNDEF:00004970                                         ; CODE XREF: NWindows::CThread::Create(uint (*)(void *),void *)+1Ap
UNDEF:00004974 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00004974                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00004974                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00004974                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00004978 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00004978                 extrn __imp__EnterCriticalSection@4:near
UNDEF:00004978                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:00004978                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:0000497C ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:0000497C                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:0000497C                                         ; CODE XREF: NCompress::NBZip2::CDecoder::SetRatioProgress(unsigned __int64)+4Fp
UNDEF:00004980 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00004980                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00004980                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::Create(uint)+18p
UNDEF:00004984 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00004984                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00004984                                         ; CODE XREF: NBitm::CDecoder<CInBuffer>::Init(void)+14p
UNDEF:00004988 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:00004988                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:00004988                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:00004988
UNDEF:00004988
UNDEF:00004988                 end