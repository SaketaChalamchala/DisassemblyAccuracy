.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : DA0FFB64DE1A4D0E69E777C22DC45A13
.rdata:00000000 ; Input CRC32 : E547AF5F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\DeflateDecoder.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kLenStart32    db 0                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3A5r
.rdata:00000001                 db    1
.rdata:00000002                 db    2
.rdata:00000003                 db    3
.rdata:00000004                 db    4
.rdata:00000005                 db    5
.rdata:00000006                 db    6
.rdata:00000007                 db    7
.rdata:00000008                 db    8
.rdata:00000009                 db  0Ah
.rdata:0000000A                 db  0Ch
.rdata:0000000B                 db  0Eh
.rdata:0000000C                 db  10h
.rdata:0000000D                 db  14h
.rdata:0000000E                 db  18h
.rdata:0000000F                 db  1Ch
.rdata:00000010                 db  20h
.rdata:00000011                 db  28h ; (
.rdata:00000012                 db  30h ; 0
.rdata:00000013                 db  38h ; 8
.rdata:00000014                 db  40h ; @
.rdata:00000015                 db  50h ; P
.rdata:00000016                 db  60h ; `
.rdata:00000017                 db  70h ; p
.rdata:00000018                 db  80h ; Ç
.rdata:00000019                 db 0A0h ; á
.rdata:0000001A                 db 0C0h ; +
.rdata:0000001B                 db 0E0h ; a
.rdata:0000001C                 db 0FFh
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020 _kLenStart64    db 0                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+389r
.rdata:00000021                 db    1
.rdata:00000022                 db    2
.rdata:00000023                 db    3
.rdata:00000024                 db    4
.rdata:00000025                 db    5
.rdata:00000026                 db    6
.rdata:00000027                 db    7
.rdata:00000028                 db    8
.rdata:00000029                 db  0Ah
.rdata:0000002A                 db  0Ch
.rdata:0000002B                 db  0Eh
.rdata:0000002C                 db  10h
.rdata:0000002D                 db  14h
.rdata:0000002E                 db  18h
.rdata:0000002F                 db  1Ch
.rdata:00000030                 db  20h
.rdata:00000031                 db  28h ; (
.rdata:00000032                 db  30h ; 0
.rdata:00000033                 db  38h ; 8
.rdata:00000034                 db  40h ; @
.rdata:00000035                 db  50h ; P
.rdata:00000036                 db  60h ; `
.rdata:00000037                 db  70h ; p
.rdata:00000038                 db  80h ; Ç
.rdata:00000039                 db 0A0h ; á
.rdata:0000003A                 db 0C0h ; +
.rdata:0000003B                 db 0E0h ; a
.rdata:0000003C                 db    0
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040 _kLenDirectBits32 db 0                  ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3B2r
.rdata:00000040                                         ; .xdata$x:00001540o ...
.rdata:00000041                 align 8
.rdata:00000048                 db    1
.rdata:00000049                 db    1
.rdata:0000004A                 db    1
.rdata:0000004B                 db    1
.rdata:0000004C                 db    2
.rdata:0000004D                 db    2
.rdata:0000004E                 db    2
.rdata:0000004F                 db    2
.rdata:00000050                 db    3
.rdata:00000051                 db    3
.rdata:00000052                 db    3
.rdata:00000053                 db    3
.rdata:00000054                 db    4
.rdata:00000055                 db    4
.rdata:00000056                 db    4
.rdata:00000057                 db    4
.rdata:00000058                 db    5
.rdata:00000059                 db    5
.rdata:0000005A                 db    5
.rdata:0000005B                 db    5
.rdata:0000005C                 db    0
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060 _kLenDirectBits64 db 0                  ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+396r
.rdata:00000061                 align 8
.rdata:00000068                 db    1
.rdata:00000069                 db    1
.rdata:0000006A                 db    1
.rdata:0000006B                 db    1
.rdata:0000006C                 db    2
.rdata:0000006D                 db    2
.rdata:0000006E                 db    2
.rdata:0000006F                 db    2
.rdata:00000070                 db    3
.rdata:00000071                 db    3
.rdata:00000072                 db    3
.rdata:00000073                 db    3
.rdata:00000074                 db    4
.rdata:00000075                 db    4
.rdata:00000076                 db    4
.rdata:00000077                 db    4
.rdata:00000078                 db    5
.rdata:00000079                 db    5
.rdata:0000007A                 db    5
.rdata:0000007B                 db    5
.rdata:0000007C                 db  10h
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080 _kDistStart     dd 0                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+432r
.rdata:00000084                 db    1
.rdata:00000085                 db    0
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088                 db    2
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 db    3
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090                 db    4
.rdata:00000091                 db    0
.rdata:00000092                 db    0
.rdata:00000093                 db    0
.rdata:00000094                 db    6
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db    8
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db  0Ch
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 db  10h
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 db  18h
.rdata:000000A5                 db    0
.rdata:000000A6                 db    0
.rdata:000000A7                 db    0
.rdata:000000A8                 db  20h
.rdata:000000A9                 db    0
.rdata:000000AA                 db    0
.rdata:000000AB                 db    0
.rdata:000000AC                 db  30h ; 0
.rdata:000000AD                 db    0
.rdata:000000AE                 db    0
.rdata:000000AF                 db    0
.rdata:000000B0                 db  40h ; @
.rdata:000000B1                 db    0
.rdata:000000B2                 db    0
.rdata:000000B3                 db    0
.rdata:000000B4                 db  60h ; `
.rdata:000000B5                 db    0
.rdata:000000B6                 db    0
.rdata:000000B7                 db    0
.rdata:000000B8                 db  80h ; Ç
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 db 0C0h ; +
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000C0                 db    0
.rdata:000000C1                 db    1
.rdata:000000C2                 db    0
.rdata:000000C3                 db    0
.rdata:000000C4                 db  80h ; Ç
.rdata:000000C5                 db    1
.rdata:000000C6                 db    0
.rdata:000000C7                 db    0
.rdata:000000C8                 db    0
.rdata:000000C9                 db    2
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 db    0
.rdata:000000CD                 db    3
.rdata:000000CE                 db    0
.rdata:000000CF                 db    0
.rdata:000000D0                 db    0
.rdata:000000D1                 db    4
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 db    0
.rdata:000000D5                 db    6
.rdata:000000D6                 db    0
.rdata:000000D7                 db    0
.rdata:000000D8                 db    0
.rdata:000000D9                 db    8
.rdata:000000DA                 db    0
.rdata:000000DB                 db    0
.rdata:000000DC                 db    0
.rdata:000000DD                 db  0Ch
.rdata:000000DE                 db    0
.rdata:000000DF                 db    0
.rdata:000000E0                 db    0
.rdata:000000E1                 db  10h
.rdata:000000E2                 db    0
.rdata:000000E3                 db    0
.rdata:000000E4                 db    0
.rdata:000000E5                 db  18h
.rdata:000000E6                 db    0
.rdata:000000E7                 db    0
.rdata:000000E8                 db    0
.rdata:000000E9                 db  20h
.rdata:000000EA                 db    0
.rdata:000000EB                 db    0
.rdata:000000EC                 db    0
.rdata:000000ED                 db  30h ; 0
.rdata:000000EE                 db    0
.rdata:000000EF                 db    0
.rdata:000000F0                 db    0
.rdata:000000F1                 db  40h ; @
.rdata:000000F2                 db    0
.rdata:000000F3                 db    0
.rdata:000000F4                 db    0
.rdata:000000F5                 db  60h ; `
.rdata:000000F6                 db    0
.rdata:000000F7                 db    0
.rdata:000000F8                 db    0
.rdata:000000F9                 db  80h ; Ç
.rdata:000000FA                 db    0
.rdata:000000FB                 db    0
.rdata:000000FC                 db    0
.rdata:000000FD                 db 0C0h ; +
.rdata:000000FE                 db    0
.rdata:000000FF                 db    0
.rdata:00000100 _kDistDirectBits db 0                   ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+41Cr
.rdata:00000101                 align 4
.rdata:00000104                 db    1
.rdata:00000105                 db    1
.rdata:00000106                 db    2
.rdata:00000107                 db    2
.rdata:00000108                 db    3
.rdata:00000109                 db    3
.rdata:0000010A                 db    4
.rdata:0000010B                 db    4
.rdata:0000010C                 db    5
.rdata:0000010D                 db    5
.rdata:0000010E                 db    6
.rdata:0000010F                 db    6
.rdata:00000110                 db    7
.rdata:00000111                 db    7
.rdata:00000112                 db    8
.rdata:00000113                 db    8
.rdata:00000114                 db    9
.rdata:00000115                 db    9
.rdata:00000116                 db  0Ah
.rdata:00000117                 db  0Ah
.rdata:00000118                 db  0Bh
.rdata:00000119                 db  0Bh
.rdata:0000011A                 db  0Ch
.rdata:0000011B                 db  0Ch
.rdata:0000011C                 db  0Dh
.rdata:0000011D                 db  0Dh
.rdata:0000011E                 db  0Eh
.rdata:0000011F                 db  0Eh
.rdata:00000120 _kCodeLengthAlphabetOrder db 10h        ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+1BDr
.rdata:00000121                 db  11h
.rdata:00000122                 db  12h
.rdata:00000123                 db    0
.rdata:00000124                 db    8
.rdata:00000125                 db    7
.rdata:00000126                 db    9
.rdata:00000127                 db    6
.rdata:00000128                 db  0Ah
.rdata:00000129                 db    5
.rdata:0000012A                 db  0Bh
.rdata:0000012B                 db    4
.rdata:0000012C                 db  0Ch
.rdata:0000012D                 db    3
.rdata:0000012E                 db  0Dh
.rdata:0000012F                 db    2
.rdata:00000130                 db  0Eh
.rdata:00000131                 db    1
.rdata:00000132                 db  0Fh
.rdata:00000133                 align 4
.rdata:00000133 _rdata          ends
.rdata:00000133
.text:00000134 ; ===========================================================================
.text:00000134
.text:00000134 ; Segment type: Pure code
.text:00000134 ; Segment permissions: Read/Execute
.text:00000134 _text           segment para public 'CODE' use32
.text:00000134                 assume cs:_text
.text:00000134                 ;org 134h
.text:00000134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000134
.text:00000134 ; =============== S U B R O U T I N E =======================================
.text:00000134
.text:00000134 ; Attributes: bp-based frame
.text:00000134
.text:00000134 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoder(NCompress::NDeflate::NDecoder::CCoder *this, bool, bool)
.text:00000134                 public ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z
.text:00000134 ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z proc near
.text:00000134
.text:00000134 var_10          = dword ptr -10h
.text:00000134 var_C           = dword ptr -0Ch
.text:00000134 var_4           = dword ptr -4
.text:00000134 arg_0           = byte ptr  8
.text:00000134 arg_4           = byte ptr  0Ch
.text:00000134
.text:00000134                 push    ebp
.text:00000135                 mov     ebp, esp
.text:00000137                 push    0FFFFFFFFh
.text:00000139                 push    offset __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z
.text:0000013E                 mov     eax, large fs:0
.text:00000144                 push    eax
.text:00000145                 push    ecx
.text:00000146                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000014D                 mov     eax, dword ptr ds:___security_cookie
.text:00000152                 xor     eax, ebp
.text:00000154                 push    eax
.text:00000155                 lea     eax, [ebp+var_C]
.text:00000158                 mov     large fs:0, eax
.text:0000015E                 mov     [ebp+var_10], ecx
.text:00000161                 mov     ecx, [ebp+var_10] ; this
.text:00000164                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000169                 mov     ecx, [ebp+var_10]
.text:0000016C                 add     ecx, 4          ; this
.text:0000016F                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00000174                 mov     ecx, [ebp+var_10]
.text:00000177                 add     ecx, 8          ; this
.text:0000017A                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:0000017F                 mov     ecx, [ebp+var_10]
.text:00000182                 add     ecx, 0Ch        ; this
.text:00000185                 call    ??0ICompressSetOutStreamSize@@QAE@XZ ; ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)
.text:0000018A                 mov     ecx, [ebp+var_10]
.text:0000018D                 add     ecx, 10h        ; this
.text:00000190                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000195                 mov     ecx, [ebp+var_10]
.text:00000198                 add     ecx, 14h        ; this
.text:0000019B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000001A0                 mov     eax, [ebp+var_10]
.text:000001A3                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:000001A9                 mov     ecx, [ebp+var_10]
.text:000001AC                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000001B3                 mov     edx, [ebp+var_10]
.text:000001B6                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:000001BD                 mov     eax, [ebp+var_10]
.text:000001C0                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:000001C7                 mov     ecx, [ebp+var_10]
.text:000001CA                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:000001D1                 mov     ecx, [ebp+var_10]
.text:000001D4                 add     ecx, 18h
.text:000001D7                 call    ??0CLzOutWindow@@QAE@XZ ; CLzOutWindow::CLzOutWindow(void)
.text:000001DC                 mov     [ebp+var_4], 0
.text:000001E3                 mov     ecx, [ebp+var_10]
.text:000001E6                 add     ecx, 40h ; '@'
.text:000001E9                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000001EE                 mov     ecx, [ebp+var_10]
.text:000001F1                 add     ecx, 48h ; 'H'
.text:000001F4                 call    ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)
.text:000001F9                 mov     edx, [ebp+var_10]
.text:000001FC                 mov     al, [ebp+arg_4]
.text:000001FF                 mov     [edx+0D56h], al
.text:00000205                 mov     ecx, [ebp+var_10]
.text:00000208                 mov     dl, [ebp+arg_0]
.text:0000020B                 mov     [ecx+0D57h], dl
.text:00000211                 mov     eax, [ebp+var_10]
.text:00000214                 mov     byte ptr [eax+0D58h], 0
.text:0000021B                 mov     ecx, [ebp+var_10]
.text:0000021E                 mov     byte ptr [ecx+0D59h], 0
.text:00000225                 mov     edx, [ebp+var_10]
.text:00000228                 mov     byte ptr [edx+0D5Ah], 1
.text:0000022F                 mov     eax, [ebp+var_10]
.text:00000232                 mov     byte ptr [eax+0D64h], 0
.text:00000239                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000240                 mov     eax, [ebp+var_10]
.text:00000243                 mov     ecx, [ebp+var_C]
.text:00000246                 mov     large fs:0, ecx
.text:0000024D                 pop     ecx
.text:0000024E                 add     esp, 10h
.text:00000251                 cmp     ebp, esp
.text:00000253                 call    __RTC_CheckEsp
.text:00000258                 mov     esp, ebp
.text:0000025A                 pop     ebp
.text:0000025B                 retn    8
.text:0000025B ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z endp
.text:0000025B
.text:0000025B ; ---------------------------------------------------------------------------
.text:0000025E                 db 6 dup(0CCh)
.text:00000264
.text:00000264 ; =============== S U B R O U T I N E =======================================
.text:00000264
.text:00000264 ; Attributes: bp-based frame
.text:00000264
.text:00000264 ; unsigned int __thiscall NCompress::NDeflate::NDecoder::CCoder::ReadBits(NCompress::NDeflate::NDecoder::CCoder *this, unsigned int)
.text:00000264                 public ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z
.text:00000264 ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z proc near
.text:00000264                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+7Dp
.text:00000264                                         ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+CAp ...
.text:00000264
.text:00000264 var_4           = dword ptr -4
.text:00000264 arg_0           = dword ptr  8
.text:00000264
.text:00000264                 push    ebp
.text:00000265                 mov     ebp, esp
.text:00000267                 push    ecx
.text:00000268                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000026F                 mov     [ebp+var_4], ecx
.text:00000272                 mov     eax, [ebp+arg_0]
.text:00000275                 push    eax
.text:00000276                 mov     ecx, [ebp+var_4]
.text:00000279                 add     ecx, 48h ; 'H'
.text:0000027C                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000281                 add     esp, 4
.text:00000284                 cmp     ebp, esp
.text:00000286                 call    __RTC_CheckEsp
.text:0000028B                 mov     esp, ebp
.text:0000028D                 pop     ebp
.text:0000028E                 retn    4
.text:0000028E ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z endp
.text:0000028E
.text:0000028E ; ---------------------------------------------------------------------------
.text:00000291                 align 4
.text:00000294
.text:00000294 ; =============== S U B R O U T I N E =======================================
.text:00000294
.text:00000294 ; Attributes: bp-based frame
.text:00000294
.text:00000294 ; unsigned __int8 __thiscall NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00000294                 public ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ
.text:00000294 ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ proc near
.text:00000294                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+25Bp
.text:00000294                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+2BEp
.text:00000294
.text:00000294 var_4           = dword ptr -4
.text:00000294
.text:00000294                 push    ebp
.text:00000295                 mov     ebp, esp
.text:00000297                 push    ecx
.text:00000298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000029F                 mov     [ebp+var_4], ecx
.text:000002A2                 mov     ecx, [ebp+var_4]
.text:000002A5                 add     ecx, 48h ; 'H'
.text:000002A8                 call    ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ ; NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)
.text:000002AD                 add     esp, 4
.text:000002B0                 cmp     ebp, esp
.text:000002B2                 call    __RTC_CheckEsp
.text:000002B7                 mov     esp, ebp
.text:000002B9                 pop     ebp
.text:000002BA                 retn
.text:000002BA ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ endp
.text:000002BA
.text:000002BA ; ---------------------------------------------------------------------------
.text:000002BB                 db 9 dup(0CCh)
.text:000002C4
.text:000002C4 ; =============== S U B R O U T I N E =======================================
.text:000002C4
.text:000002C4 ; Attributes: bp-based frame
.text:000002C4
.text:000002C4 ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(NCompress::NDeflate::NDecoder::CCoder *this, unsigned __int8 *, unsigned int)
.text:000002C4                 public ?DeCodeLevelTable@CCoder@NDecoder@NDeflate@NCompress@@AAE_NPAEI@Z
.text:000002C4 ?DeCodeLevelTable@CCoder@NDecoder@NDeflate@NCompress@@AAE_NPAEI@Z proc near
.text:000002C4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+257p
.text:000002C4
.text:000002C4 var_14          = dword ptr -14h
.text:000002C4 var_10          = dword ptr -10h
.text:000002C4 var_C           = dword ptr -0Ch
.text:000002C4 var_8           = dword ptr -8
.text:000002C4 var_4           = dword ptr -4
.text:000002C4 arg_0           = dword ptr  8
.text:000002C4 arg_4           = dword ptr  0Ch
.text:000002C4
.text:000002C4                 push    ebp
.text:000002C5                 mov     ebp, esp
.text:000002C7                 sub     esp, 14h
.text:000002CA                 mov     eax, 0CCCCCCCCh
.text:000002CF                 mov     [ebp+var_14], eax
.text:000002D2                 mov     [ebp+var_10], eax
.text:000002D5                 mov     [ebp+var_C], eax
.text:000002D8                 mov     [ebp+var_8], eax
.text:000002DB                 mov     [ebp+var_4], eax
.text:000002DE                 mov     [ebp+var_4], ecx
.text:000002E1                 mov     [ebp+var_8], 0
.text:000002E8
.text:000002E8 loc_2E8:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+120j
.text:000002E8                 mov     eax, [ebp+var_4]
.text:000002EB                 add     eax, 48h ; 'H'
.text:000002EE                 push    eax
.text:000002EF                 mov     ecx, [ebp+var_4]
.text:000002F2                 add     ecx, 0A80h
.text:000002F8                 call    ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)
.text:000002FD                 mov     [ebp+var_C], eax
.text:00000300                 cmp     [ebp+var_C], 10h
.text:00000304                 jnb     short loc_31F
.text:00000306                 mov     ecx, [ebp+arg_0]
.text:00000309                 add     ecx, [ebp+var_8]
.text:0000030C                 mov     dl, byte ptr [ebp+var_C]
.text:0000030F                 mov     [ecx], dl
.text:00000311                 mov     eax, [ebp+var_8]
.text:00000314                 add     eax, 1
.text:00000317                 mov     [ebp+var_8], eax
.text:0000031A                 jmp     loc_3DE
.text:0000031F ; ---------------------------------------------------------------------------
.text:0000031F
.text:0000031F loc_31F:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+40j
.text:0000031F                 cmp     [ebp+var_C], 13h
.text:00000323                 jnb     loc_3DA
.text:00000329                 cmp     [ebp+var_C], 10h
.text:0000032D                 jnz     short loc_383
.text:0000032F                 cmp     [ebp+var_8], 0
.text:00000333                 jnz     short loc_33C
.text:00000335                 xor     al, al
.text:00000337                 jmp     loc_3EC
.text:0000033C ; ---------------------------------------------------------------------------
.text:0000033C
.text:0000033C loc_33C:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+6Fj
.text:0000033C                 push    2               ; unsigned int
.text:0000033E                 mov     ecx, [ebp+var_4] ; this
.text:00000341                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:00000346                 add     eax, 3
.text:00000349                 mov     [ebp+var_10], eax
.text:0000034C                 jmp     short loc_360
.text:0000034E ; ---------------------------------------------------------------------------
.text:0000034E
.text:0000034E loc_34E:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+BBj
.text:0000034E                 mov     ecx, [ebp+var_10]
.text:00000351                 sub     ecx, 1
.text:00000354                 mov     [ebp+var_10], ecx
.text:00000357                 mov     edx, [ebp+var_8]
.text:0000035A                 add     edx, 1
.text:0000035D                 mov     [ebp+var_8], edx
.text:00000360
.text:00000360 loc_360:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+88j
.text:00000360                 cmp     [ebp+var_10], 0
.text:00000364                 jbe     short loc_381
.text:00000366                 mov     eax, [ebp+var_8]
.text:00000369                 cmp     eax, [ebp+arg_4]
.text:0000036C                 jnb     short loc_381
.text:0000036E                 mov     ecx, [ebp+arg_0]
.text:00000371                 add     ecx, [ebp+var_8]
.text:00000374                 mov     edx, [ebp+arg_0]
.text:00000377                 add     edx, [ebp+var_8]
.text:0000037A                 mov     al, [edx-1]
.text:0000037D                 mov     [ecx], al
.text:0000037F                 jmp     short loc_34E
.text:00000381 ; ---------------------------------------------------------------------------
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+A0j
.text:00000381                                         ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+A8j
.text:00000381                 jmp     short loc_3D8
.text:00000383 ; ---------------------------------------------------------------------------
.text:00000383
.text:00000383 loc_383:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+69j
.text:00000383                 cmp     [ebp+var_C], 11h
.text:00000387                 jnz     short loc_39B
.text:00000389                 push    3               ; unsigned int
.text:0000038B                 mov     ecx, [ebp+var_4] ; this
.text:0000038E                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:00000393                 add     eax, 3
.text:00000396                 mov     [ebp+var_14], eax
.text:00000399                 jmp     short loc_3AB
.text:0000039B ; ---------------------------------------------------------------------------
.text:0000039B
.text:0000039B loc_39B:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+C3j
.text:0000039B                 push    7               ; unsigned int
.text:0000039D                 mov     ecx, [ebp+var_4] ; this
.text:000003A0                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:000003A5                 add     eax, 0Bh
.text:000003A8                 mov     [ebp+var_14], eax
.text:000003AB
.text:000003AB loc_3AB:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+D5j
.text:000003AB                 jmp     short loc_3B6
.text:000003AD ; ---------------------------------------------------------------------------
.text:000003AD
.text:000003AD loc_3AD:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+112j
.text:000003AD                 mov     ecx, [ebp+var_14]
.text:000003B0                 sub     ecx, 1
.text:000003B3                 mov     [ebp+var_14], ecx
.text:000003B6
.text:000003B6 loc_3B6:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint):loc_3ABj
.text:000003B6                 cmp     [ebp+var_14], 0
.text:000003BA                 jbe     short loc_3D8
.text:000003BC                 mov     edx, [ebp+var_8]
.text:000003BF                 cmp     edx, [ebp+arg_4]
.text:000003C2                 jnb     short loc_3D8
.text:000003C4                 mov     eax, [ebp+arg_0]
.text:000003C7                 add     eax, [ebp+var_8]
.text:000003CA                 mov     byte ptr [eax], 0
.text:000003CD                 mov     ecx, [ebp+var_8]
.text:000003D0                 add     ecx, 1
.text:000003D3                 mov     [ebp+var_8], ecx
.text:000003D6                 jmp     short loc_3AD
.text:000003D8 ; ---------------------------------------------------------------------------
.text:000003D8
.text:000003D8 loc_3D8:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint):loc_381j
.text:000003D8                                         ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+F6j ...
.text:000003D8                 jmp     short loc_3DE
.text:000003DA ; ---------------------------------------------------------------------------
.text:000003DA
.text:000003DA loc_3DA:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+5Fj
.text:000003DA                 xor     al, al
.text:000003DC                 jmp     short loc_3EC
.text:000003DE ; ---------------------------------------------------------------------------
.text:000003DE
.text:000003DE loc_3DE:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+56j
.text:000003DE                                         ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint):loc_3D8j
.text:000003DE                 mov     edx, [ebp+var_8]
.text:000003E1                 cmp     edx, [ebp+arg_4]
.text:000003E4                 jb      loc_2E8
.text:000003EA                 mov     al, 1
.text:000003EC
.text:000003EC loc_3EC:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+73j
.text:000003EC                                         ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+118j
.text:000003EC                 add     esp, 14h
.text:000003EF                 cmp     ebp, esp
.text:000003F1                 call    __RTC_CheckEsp
.text:000003F6                 mov     esp, ebp
.text:000003F8                 pop     ebp
.text:000003F9                 retn    8
.text:000003F9 ?DeCodeLevelTable@CCoder@NDecoder@NDeflate@NCompress@@AAE_NPAEI@Z endp
.text:000003F9
.text:000003F9 ; ---------------------------------------------------------------------------
.text:000003FC                 db 8 dup(0CCh)
.text:00000404
.text:00000404 ; =============== S U B R O U T I N E =======================================
.text:00000404
.text:00000404 ; Attributes: bp-based frame
.text:00000404
.text:00000404 ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::ReadTables(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00000404                 public ?ReadTables@CCoder@NDecoder@NDeflate@NCompress@@AAE_NXZ
.text:00000404 ?ReadTables@CCoder@NDecoder@NDeflate@NCompress@@AAE_NXZ proc near
.text:00000404                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1A2p
.text:00000404
.text:00000404 var_2C8         = byte ptr -2C8h
.text:00000404 Src             = byte ptr -2C4h
.text:00000404 var_180         = dword ptr -180h
.text:00000404 var_17C         = dword ptr -17Ch
.text:00000404 var_174         = byte ptr -174h
.text:00000404 var_15C         = dword ptr -15Ch
.text:00000404 Size            = dword ptr -158h
.text:00000404 Dst             = byte ptr -150h
.text:00000404 var_30          = byte ptr -30h
.text:00000404 var_C           = dword ptr -0Ch
.text:00000404 var_8           = dword ptr -8
.text:00000404 var_4           = dword ptr -4
.text:00000404
.text:00000404                 push    ebp
.text:00000405                 mov     ebp, esp
.text:00000407                 sub     esp, 2C8h
.text:0000040D                 push    edi
.text:0000040E                 push    ecx
.text:0000040F                 lea     edi, [ebp+var_2C8]
.text:00000415                 mov     ecx, 0B2h ; '¦'
.text:0000041A                 mov     eax, 0CCCCCCCCh
.text:0000041F                 rep stosd
.text:00000421                 pop     ecx
.text:00000422                 mov     eax, dword ptr ds:___security_cookie
.text:00000427                 xor     eax, ebp
.text:00000429                 mov     [ebp+var_4], eax
.text:0000042C                 mov     [ebp+var_8], ecx
.text:0000042F                 push    1               ; unsigned int
.text:00000431                 mov     ecx, [ebp+var_8] ; this
.text:00000434                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:00000439                 sub     eax, 1
.text:0000043C                 neg     eax
.text:0000043E                 sbb     eax, eax
.text:00000440                 add     eax, 1
.text:00000443                 mov     ecx, [ebp+var_8]
.text:00000446                 mov     [ecx+0D54h], al
.text:0000044C                 mov     ecx, [ebp+var_8]
.text:0000044F                 add     ecx, 48h ; 'H'
.text:00000452                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000457                 movzx   edx, al
.text:0000045A                 test    edx, edx
.text:0000045C                 jz      short loc_465
.text:0000045E                 xor     al, al
.text:00000460                 jmp     loc_702
.text:00000465 ; ---------------------------------------------------------------------------
.text:00000465
.text:00000465 loc_465:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+58j
.text:00000465                 push    2               ; unsigned int
.text:00000467                 mov     ecx, [ebp+var_8] ; this
.text:0000046A                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:0000046F                 mov     [ebp+var_C], eax
.text:00000472                 cmp     [ebp+var_C], 2
.text:00000476                 jbe     short loc_47F
.text:00000478                 xor     al, al
.text:0000047A                 jmp     loc_702
.text:0000047F ; ---------------------------------------------------------------------------
.text:0000047F
.text:0000047F loc_47F:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+72j
.text:0000047F                 mov     ecx, [ebp+var_8]
.text:00000482                 add     ecx, 48h ; 'H'
.text:00000485                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:0000048A                 movzx   eax, al
.text:0000048D                 test    eax, eax
.text:0000048F                 jz      short loc_498
.text:00000491                 xor     al, al
.text:00000493                 jmp     loc_702
.text:00000498 ; ---------------------------------------------------------------------------
.text:00000498
.text:00000498 loc_498:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+8Bj
.text:00000498                 cmp     [ebp+var_C], 0
.text:0000049C                 jnz     short loc_4FB
.text:0000049E                 mov     ecx, [ebp+var_8]
.text:000004A1                 mov     byte ptr [ecx+0D55h], 1
.text:000004A8                 mov     ecx, [ebp+var_8]
.text:000004AB                 add     ecx, 48h ; 'H'
.text:000004AE                 call    ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::AlignToByte(void)
.text:000004B3                 mov     ecx, [ebp+var_8] ; this
.text:000004B6                 call    ?ReadAligned_UInt16@CCoder@NDecoder@NDeflate@NCompress@@QAEIXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAligned_UInt16(void)
.text:000004BB                 mov     edx, [ebp+var_8]
.text:000004BE                 mov     [edx+0D4Ch], eax
.text:000004C4                 mov     eax, [ebp+var_8]
.text:000004C7                 movzx   ecx, byte ptr [eax+0D56h]
.text:000004CE                 test    ecx, ecx
.text:000004D0                 jz      short loc_4D9
.text:000004D2                 mov     al, 1
.text:000004D4                 jmp     loc_702
.text:000004D9 ; ---------------------------------------------------------------------------
.text:000004D9
.text:000004D9 loc_4D9:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+CCj
.text:000004D9                 mov     ecx, [ebp+var_8] ; this
.text:000004DC                 call    ?ReadAligned_UInt16@CCoder@NDecoder@NDeflate@NCompress@@QAEIXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAligned_UInt16(void)
.text:000004E1                 not     eax
.text:000004E3                 movzx   edx, ax
.text:000004E6                 mov     eax, [ebp+var_8]
.text:000004E9                 xor     ecx, ecx
.text:000004EB                 cmp     [eax+0D4Ch], edx
.text:000004F1                 setz    cl
.text:000004F4                 mov     al, cl
.text:000004F6                 jmp     loc_702
.text:000004FB ; ---------------------------------------------------------------------------
.text:000004FB
.text:000004FB loc_4FB:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+98j
.text:000004FB                 mov     edx, [ebp+var_8]
.text:000004FE                 mov     byte ptr [edx+0D55h], 0
.text:00000505                 cmp     [ebp+var_C], 1
.text:00000509                 jnz     short loc_538
.text:0000050B                 lea     ecx, [ebp+Dst]  ; this
.text:00000511                 call    ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::CLevels::SetFixedLevels(void)
.text:00000516                 mov     eax, [ebp+var_8]
.text:00000519                 movzx   ecx, byte ptr [eax+0D57h]
.text:00000520                 neg     ecx
.text:00000522                 sbb     ecx, ecx
.text:00000524                 and     ecx, 2
.text:00000527                 add     ecx, 1Eh
.text:0000052A                 mov     edx, [ebp+var_8]
.text:0000052D                 mov     [edx+0D50h], ecx
.text:00000533                 jmp     loc_6D0
.text:00000538 ; ---------------------------------------------------------------------------
.text:00000538
.text:00000538 loc_538:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+105j
.text:00000538                 push    5               ; unsigned int
.text:0000053A                 mov     ecx, [ebp+var_8] ; this
.text:0000053D                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:00000542                 add     eax, 101h
.text:00000547                 mov     [ebp+Size], eax
.text:0000054D                 push    5               ; unsigned int
.text:0000054F                 mov     ecx, [ebp+var_8] ; this
.text:00000552                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:00000557                 add     eax, 1
.text:0000055A                 mov     ecx, [ebp+var_8]
.text:0000055D                 mov     [ecx+0D50h], eax
.text:00000563                 push    4               ; unsigned int
.text:00000565                 mov     ecx, [ebp+var_8] ; this
.text:00000568                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:0000056D                 add     eax, 4
.text:00000570                 mov     [ebp+var_15C], eax
.text:00000576                 mov     edx, [ebp+var_8]
.text:00000579                 movzx   eax, byte ptr [edx+0D57h]
.text:00000580                 test    eax, eax
.text:00000582                 jnz     short loc_597
.text:00000584                 mov     ecx, [ebp+var_8]
.text:00000587                 cmp     dword ptr [ecx+0D50h], 1Eh
.text:0000058E                 jbe     short loc_597
.text:00000590                 xor     al, al
.text:00000592                 jmp     loc_702
.text:00000597 ; ---------------------------------------------------------------------------
.text:00000597
.text:00000597 loc_597:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+17Ej
.text:00000597                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+18Aj
.text:00000597                 mov     [ebp+var_17C], 0
.text:000005A1                 jmp     short loc_5B2
.text:000005A3 ; ---------------------------------------------------------------------------
.text:000005A3
.text:000005A3 loc_5A3:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void):loc_603j
.text:000005A3                 mov     edx, [ebp+var_17C]
.text:000005A9                 add     edx, 1
.text:000005AC                 mov     [ebp+var_17C], edx
.text:000005B2
.text:000005B2 loc_5B2:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+19Dj
.text:000005B2                 cmp     [ebp+var_17C], 13h
.text:000005B9                 jnb     short loc_605
.text:000005BB                 mov     eax, [ebp+var_17C]
.text:000005C1                 movzx   ecx, _kCodeLengthAlphabetOrder[eax]
.text:000005C8                 mov     [ebp+var_180], ecx
.text:000005CE                 mov     edx, [ebp+var_17C]
.text:000005D4                 cmp     edx, [ebp+var_15C]
.text:000005DA                 jnb     short loc_5F5
.text:000005DC                 push    3               ; unsigned int
.text:000005DE                 mov     ecx, [ebp+var_8] ; this
.text:000005E1                 call    ?ReadBits@CCoder@NDecoder@NDeflate@NCompress@@AAEII@Z ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)
.text:000005E6                 mov     ecx, [ebp+var_180]
.text:000005EC                 mov     [ebp+ecx+var_174], al
.text:000005F3                 jmp     short loc_603
.text:000005F5 ; ---------------------------------------------------------------------------
.text:000005F5
.text:000005F5 loc_5F5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+1D6j
.text:000005F5                 mov     edx, [ebp+var_180]
.text:000005FB                 mov     [ebp+edx+var_174], 0
.text:00000603
.text:00000603 loc_603:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+1EFj
.text:00000603                 jmp     short loc_5A3
.text:00000605 ; ---------------------------------------------------------------------------
.text:00000605
.text:00000605 loc_605:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+1B5j
.text:00000605                 mov     ecx, [ebp+var_8]
.text:00000608                 add     ecx, 48h ; 'H'
.text:0000060B                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000610                 movzx   eax, al
.text:00000613                 test    eax, eax
.text:00000615                 jz      short loc_61E
.text:00000617                 xor     al, al
.text:00000619                 jmp     loc_702
.text:0000061E ; ---------------------------------------------------------------------------
.text:0000061E
.text:0000061E loc_61E:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+211j
.text:0000061E                 lea     ecx, [ebp+var_174]
.text:00000624                 push    ecx
.text:00000625                 mov     ecx, [ebp+var_8]
.text:00000628                 add     ecx, 0A80h
.text:0000062E                 call    ?SetCodeLengths@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)
.text:00000633                 movzx   edx, al
.text:00000636                 test    edx, edx
.text:00000638                 jnz     short loc_641
.text:0000063A                 xor     al, al
.text:0000063C                 jmp     loc_702
.text:00000641 ; ---------------------------------------------------------------------------
.text:00000641
.text:00000641 loc_641:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+234j
.text:00000641                 mov     eax, [ebp+var_8]
.text:00000644                 mov     ecx, [ebp+Size]
.text:0000064A                 add     ecx, [eax+0D50h]
.text:00000650                 push    ecx             ; unsigned int
.text:00000651                 lea     edx, [ebp+Src]
.text:00000657                 push    edx             ; unsigned __int8 *
.text:00000658                 mov     ecx, [ebp+var_8] ; this
.text:0000065B                 call    ?DeCodeLevelTable@CCoder@NDecoder@NDeflate@NCompress@@AAE_NPAEI@Z ; NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)
.text:00000660                 movzx   eax, al
.text:00000663                 test    eax, eax
.text:00000665                 jnz     short loc_66E
.text:00000667                 xor     al, al
.text:00000669                 jmp     loc_702
.text:0000066E ; ---------------------------------------------------------------------------
.text:0000066E
.text:0000066E loc_66E:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+261j
.text:0000066E                 mov     ecx, [ebp+var_8]
.text:00000671                 add     ecx, 48h ; 'H'
.text:00000674                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000679                 movzx   ecx, al
.text:0000067C                 test    ecx, ecx
.text:0000067E                 jz      short loc_684
.text:00000680                 xor     al, al
.text:00000682                 jmp     short loc_702
.text:00000684 ; ---------------------------------------------------------------------------
.text:00000684
.text:00000684 loc_684:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+27Aj
.text:00000684                 lea     ecx, [ebp+Dst]  ; this
.text:0000068A                 call    ?SubClear@CLevels@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::CLevels::SubClear(void)
.text:0000068F                 mov     edx, [ebp+Size]
.text:00000695                 push    edx             ; Size
.text:00000696                 lea     eax, [ebp+Src]
.text:0000069C                 push    eax             ; Src
.text:0000069D                 lea     ecx, [ebp+Dst]
.text:000006A3                 push    ecx             ; Dst
.text:000006A4                 call    _memcpy
.text:000006A9                 add     esp, 0Ch
.text:000006AC                 mov     edx, [ebp+var_8]
.text:000006AF                 mov     eax, [edx+0D50h]
.text:000006B5                 push    eax             ; Size
.text:000006B6                 mov     ecx, [ebp+Size]
.text:000006BC                 lea     edx, [ebp+ecx+Src]
.text:000006C3                 push    edx             ; Src
.text:000006C4                 lea     eax, [ebp+var_30]
.text:000006C7                 push    eax             ; Dst
.text:000006C8                 call    _memcpy
.text:000006CD                 add     esp, 0Ch
.text:000006D0
.text:000006D0 loc_6D0:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+12Fj
.text:000006D0                 lea     ecx, [ebp+Dst]
.text:000006D6                 push    ecx
.text:000006D7                 mov     ecx, [ebp+var_8]
.text:000006DA                 add     ecx, 80h ; 'Ç'
.text:000006E0                 call    ?SetCodeLengths@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)
.text:000006E5                 movzx   edx, al
.text:000006E8                 test    edx, edx
.text:000006EA                 jnz     short loc_6F0
.text:000006EC                 xor     al, al
.text:000006EE                 jmp     short loc_702
.text:000006F0 ; ---------------------------------------------------------------------------
.text:000006F0
.text:000006F0 loc_6F0:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+2E6j
.text:000006F0                 lea     eax, [ebp+var_30]
.text:000006F3                 push    eax
.text:000006F4                 mov     ecx, [ebp+var_8]
.text:000006F7                 add     ecx, 780h
.text:000006FD                 call    ?SetCodeLengths@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAE_NPBE@Z ; NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)
.text:00000702
.text:00000702 loc_702:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+5Cj
.text:00000702                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+76j ...
.text:00000702                 push    edx
.text:00000703                 mov     ecx, ebp
.text:00000705                 push    eax
.text:00000706                 lea     edx, $LN26
.text:0000070C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000711                 pop     eax
.text:00000712                 pop     edx
.text:00000713                 pop     edi
.text:00000714                 mov     ecx, [ebp+var_4]
.text:00000717                 xor     ecx, ebp
.text:00000719                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000071E                 add     esp, 2C8h
.text:00000724                 cmp     ebp, esp
.text:00000726                 call    __RTC_CheckEsp
.text:0000072B                 mov     esp, ebp
.text:0000072D                 pop     ebp
.text:0000072E                 retn
.text:0000072E ?ReadTables@CCoder@NDecoder@NDeflate@NCompress@@AAE_NXZ endp
.text:0000072E
.text:0000072E ; ---------------------------------------------------------------------------
.text:0000072F                 align 10h
.text:00000730 $LN26           dd 3                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+302o
.text:00000734                 dd offset $LN25
.text:00000738 $LN25           dd 0FFFFFEB0h, 140h     ; DATA XREF: .text:00000734o
.text:00000740                 dd offset $LN22         ; "levels"
.text:00000744                 dd 0FFFFFE8Ch, 13h
.text:0000074C                 dd offset $LN23         ; "levelLevels"
.text:00000750                 dd 0FFFFFD3Ch, 140h
.text:00000758                 dd offset $LN24         ; "tmpLevels"
.text:0000075C $LN24           db 'tmpLevels',0        ; DATA XREF: .text:00000758o
.text:00000766 $LN23           db 'levelLevels',0      ; DATA XREF: .text:0000074Co
.text:00000772 $LN22           db 'levels',0           ; DATA XREF: .text:00000740o
.text:00000779                 db 0Bh dup(0CCh)
.text:00000784
.text:00000784 ; =============== S U B R O U T I N E =======================================
.text:00000784
.text:00000784 ; Attributes: bp-based frame
.text:00000784
.text:00000784 ; __int32 __thiscall NCompress::NDeflate::NDecoder::CCoder::CodeSpec(NCompress::NDeflate::NDecoder::CCoder *this, unsigned int, bool)
.text:00000784                 public ?CodeSpec@CCoder@NDecoder@NDeflate@NCompress@@AAEJI_N@Z
.text:00000784 ?CodeSpec@CCoder@NDecoder@NDeflate@NCompress@@AAEJI_N@Z proc near
.text:00000784                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+18Ap
.text:00000784                                         ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+7Dp
.text:00000784
.text:00000784 var_20          = dword ptr -20h
.text:00000784 var_1C          = dword ptr -1Ch
.text:00000784 var_18          = dword ptr -18h
.text:00000784 var_14          = dword ptr -14h
.text:00000784 var_10          = dword ptr -10h
.text:00000784 var_C           = dword ptr -0Ch
.text:00000784 var_8           = dword ptr -8
.text:00000784 var_4           = dword ptr -4
.text:00000784 arg_0           = dword ptr  8
.text:00000784 arg_4           = byte ptr  0Ch
.text:00000784
.text:00000784                 push    ebp
.text:00000785                 mov     ebp, esp
.text:00000787                 sub     esp, 20h
.text:0000078A                 mov     eax, 0CCCCCCCCh
.text:0000078F                 mov     [ebp+var_20], eax
.text:00000792                 mov     [ebp+var_1C], eax
.text:00000795                 mov     [ebp+var_18], eax
.text:00000798                 mov     [ebp+var_14], eax
.text:0000079B                 mov     [ebp+var_10], eax
.text:0000079E                 mov     [ebp+var_C], eax
.text:000007A1                 mov     [ebp+var_8], eax
.text:000007A4                 mov     [ebp+var_4], eax
.text:000007A7                 mov     [ebp+var_4], ecx
.text:000007AA                 mov     eax, [ebp+var_4]
.text:000007AD                 cmp     dword ptr [eax+0D5Ch], 0FFFFFFFFh
.text:000007B4                 jnz     short loc_7BD
.text:000007B6                 xor     eax, eax
.text:000007B8                 jmp     loc_C7B
.text:000007BD ; ---------------------------------------------------------------------------
.text:000007BD
.text:000007BD loc_7BD:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+30j
.text:000007BD                 mov     ecx, [ebp+var_4]
.text:000007C0                 cmp     dword ptr [ecx+0D5Ch], 0FFFFFFFEh
.text:000007C7                 jnz     loc_86D
.text:000007CD                 mov     edx, [ebp+var_4]
.text:000007D0                 movzx   eax, byte ptr [edx+0D58h]
.text:000007D7                 test    eax, eax
.text:000007D9                 jnz     short loc_812
.text:000007DB                 mov     ecx, [ebp+var_4]
.text:000007DE                 movzx   edx, byte ptr [ecx+0D57h]
.text:000007E5                 neg     edx
.text:000007E7                 sbb     edx, edx
.text:000007E9                 and     edx, 8000h
.text:000007EF                 add     edx, 8000h
.text:000007F5                 push    edx             ; unsigned int
.text:000007F6                 mov     ecx, [ebp+var_4]
.text:000007F9                 add     ecx, 18h        ; this
.text:000007FC                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:00000801                 movzx   eax, al
.text:00000804                 test    eax, eax
.text:00000806                 jnz     short loc_812
.text:00000808                 mov     eax, 8007000Eh
.text:0000080D                 jmp     loc_C7B
.text:00000812 ; ---------------------------------------------------------------------------
.text:00000812
.text:00000812 loc_812:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+55j
.text:00000812                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+82j
.text:00000812                 mov     ecx, [ebp+var_4]
.text:00000815                 movzx   edx, byte ptr [ecx+0D5Ah]
.text:0000081C                 push    edx             ; bool
.text:0000081D                 mov     ecx, [ebp+var_4] ; this
.text:00000820                 call    ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z ; NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)
.text:00000825                 mov     [ebp+var_8], eax
.text:00000828                 cmp     [ebp+var_8], 0
.text:0000082C                 jz      short loc_836
.text:0000082E                 mov     eax, [ebp+var_8]
.text:00000831                 jmp     loc_C7B
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 loc_836:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+A8j
.text:00000836                 mov     eax, [ebp+var_4]
.text:00000839                 movzx   ecx, byte ptr [eax+0D58h]
.text:00000840                 push    ecx             ; bool
.text:00000841                 mov     ecx, [ebp+var_4]
.text:00000844                 add     ecx, 18h        ; this
.text:00000847                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:0000084C                 mov     edx, [ebp+var_4]
.text:0000084F                 mov     byte ptr [edx+0D54h], 0
.text:00000856                 mov     eax, [ebp+var_4]
.text:00000859                 mov     dword ptr [eax+0D5Ch], 0
.text:00000863                 mov     ecx, [ebp+var_4]
.text:00000866                 mov     byte ptr [ecx+0D5Bh], 1
.text:0000086D
.text:0000086D loc_86D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+43j
.text:0000086D                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+141j
.text:0000086D                 mov     edx, [ebp+var_4]
.text:00000870                 cmp     dword ptr [edx+0D5Ch], 0
.text:00000877                 jle     short loc_8C7
.text:00000879                 cmp     [ebp+arg_0], 0
.text:0000087D                 jbe     short loc_8C7
.text:0000087F                 mov     eax, [ebp+var_4]
.text:00000882                 mov     ecx, [eax+0D5Ch]
.text:00000888                 sub     ecx, 1
.text:0000088B                 mov     edx, [ebp+var_4]
.text:0000088E                 mov     [edx+0D5Ch], ecx
.text:00000894                 mov     eax, [ebp+var_4]
.text:00000897                 mov     ecx, [eax+0D60h]
.text:0000089D                 push    ecx             ; unsigned int
.text:0000089E                 mov     ecx, [ebp+var_4]
.text:000008A1                 add     ecx, 18h        ; this
.text:000008A4                 call    ?GetByte@CLzOutWindow@@QBEEI@Z ; CLzOutWindow::GetByte(uint)
.text:000008A9                 mov     byte ptr [ebp+var_C+3], al
.text:000008AC                 movzx   edx, byte ptr [ebp+var_C+3]
.text:000008B0                 push    edx             ; unsigned __int8
.text:000008B1                 mov     ecx, [ebp+var_4]
.text:000008B4                 add     ecx, 18h        ; this
.text:000008B7                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:000008BC                 mov     eax, [ebp+arg_0]
.text:000008BF                 sub     eax, 1
.text:000008C2                 mov     [ebp+arg_0], eax
.text:000008C5                 jmp     short loc_86D
.text:000008C7 ; ---------------------------------------------------------------------------
.text:000008C7
.text:000008C7 loc_8C7:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+F3j
.text:000008C7                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+F9j ...
.text:000008C7                 cmp     [ebp+arg_0], 0
.text:000008CB                 ja      short loc_8D9
.text:000008CD                 movzx   ecx, [ebp+arg_4]
.text:000008D1                 test    ecx, ecx
.text:000008D3                 jz      loc_C60
.text:000008D9
.text:000008D9 loc_8D9:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+147j
.text:000008D9                 mov     ecx, [ebp+var_4]
.text:000008DC                 add     ecx, 48h ; 'H'
.text:000008DF                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:000008E4                 movzx   edx, al
.text:000008E7                 test    edx, edx
.text:000008E9                 jz      short loc_8F5
.text:000008EB                 mov     eax, 1
.text:000008F0                 jmp     loc_C7B
.text:000008F5 ; ---------------------------------------------------------------------------
.text:000008F5
.text:000008F5 loc_8F5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+165j
.text:000008F5                 mov     eax, [ebp+var_4]
.text:000008F8                 movzx   ecx, byte ptr [eax+0D5Bh]
.text:000008FF                 test    ecx, ecx
.text:00000901                 jz      short loc_962
.text:00000903                 mov     edx, [ebp+var_4]
.text:00000906                 movzx   eax, byte ptr [edx+0D54h]
.text:0000090D                 test    eax, eax
.text:0000090F                 jz      short loc_923
.text:00000911                 mov     ecx, [ebp+var_4]
.text:00000914                 mov     dword ptr [ecx+0D5Ch], 0FFFFFFFFh
.text:0000091E                 jmp     loc_C60
.text:00000923 ; ---------------------------------------------------------------------------
.text:00000923
.text:00000923 loc_923:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+18Bj
.text:00000923                 mov     ecx, [ebp+var_4] ; this
.text:00000926                 call    ?ReadTables@CCoder@NDecoder@NDeflate@NCompress@@AAE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)
.text:0000092B                 movzx   edx, al
.text:0000092E                 test    edx, edx
.text:00000930                 jnz     short loc_93C
.text:00000932                 mov     eax, 1
.text:00000937                 jmp     loc_C7B
.text:0000093C ; ---------------------------------------------------------------------------
.text:0000093C
.text:0000093C loc_93C:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1ACj
.text:0000093C                 mov     ecx, [ebp+var_4]
.text:0000093F                 add     ecx, 48h ; 'H'
.text:00000942                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000947                 movzx   eax, al
.text:0000094A                 test    eax, eax
.text:0000094C                 jz      short loc_958
.text:0000094E                 mov     eax, 1
.text:00000953                 jmp     loc_C7B
.text:00000958 ; ---------------------------------------------------------------------------
.text:00000958
.text:00000958 loc_958:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1C8j
.text:00000958                 mov     ecx, [ebp+var_4]
.text:0000095B                 mov     byte ptr [ecx+0D5Bh], 0
.text:00000962
.text:00000962 loc_962:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+17Dj
.text:00000962                 mov     edx, [ebp+var_4]
.text:00000965                 movzx   eax, byte ptr [edx+0D55h]
.text:0000096C                 test    eax, eax
.text:0000096E                 jz      loc_A60
.text:00000974                 movzx   ecx, [ebp+arg_4]
.text:00000978                 test    ecx, ecx
.text:0000097A                 jz      short loc_998
.text:0000097C                 cmp     [ebp+arg_0], 0
.text:00000980                 jnz     short loc_998
.text:00000982                 mov     edx, [ebp+var_4]
.text:00000985                 cmp     dword ptr [edx+0D4Ch], 0
.text:0000098C                 jz      short loc_998
.text:0000098E                 mov     eax, 1
.text:00000993                 jmp     loc_C7B
.text:00000998 ; ---------------------------------------------------------------------------
.text:00000998
.text:00000998 loc_998:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1F6j
.text:00000998                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1FCj ...
.text:00000998                 jmp     short loc_9B8
.text:0000099A ; ---------------------------------------------------------------------------
.text:0000099A
.text:0000099A loc_99A:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+26Fj
.text:0000099A                 mov     eax, [ebp+var_4]
.text:0000099D                 mov     ecx, [eax+0D4Ch]
.text:000009A3                 sub     ecx, 1
.text:000009A6                 mov     edx, [ebp+var_4]
.text:000009A9                 mov     [edx+0D4Ch], ecx
.text:000009AF                 mov     eax, [ebp+arg_0]
.text:000009B2                 sub     eax, 1
.text:000009B5                 mov     [ebp+arg_0], eax
.text:000009B8
.text:000009B8 loc_9B8:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool):loc_998j
.text:000009B8                 mov     ecx, [ebp+var_4]
.text:000009BB                 cmp     dword ptr [ecx+0D4Ch], 0
.text:000009C2                 jbe     short loc_9F5
.text:000009C4                 cmp     [ebp+arg_0], 0
.text:000009C8                 jbe     short loc_9F5
.text:000009CA                 mov     ecx, [ebp+var_4]
.text:000009CD                 add     ecx, 48h ; 'H'
.text:000009D0                 call    ?ThereAreDataInBitsBuffer@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ThereAreDataInBitsBuffer(void)
.text:000009D5                 movzx   edx, al
.text:000009D8                 test    edx, edx
.text:000009DA                 jz      short loc_9F5
.text:000009DC                 mov     ecx, [ebp+var_4] ; this
.text:000009DF                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:000009E4                 movzx   eax, al
.text:000009E7                 push    eax             ; unsigned __int8
.text:000009E8                 mov     ecx, [ebp+var_4]
.text:000009EB                 add     ecx, 18h        ; this
.text:000009EE                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:000009F3                 jmp     short loc_99A
.text:000009F5 ; ---------------------------------------------------------------------------
.text:000009F5
.text:000009F5 loc_9F5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+23Ej
.text:000009F5                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+244j ...
.text:000009F5                 jmp     short loc_A15
.text:000009F7 ; ---------------------------------------------------------------------------
.text:000009F7
.text:000009F7 loc_9F7:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2BDj
.text:000009F7                 mov     ecx, [ebp+var_4]
.text:000009FA                 mov     edx, [ecx+0D4Ch]
.text:00000A00                 sub     edx, 1
.text:00000A03                 mov     eax, [ebp+var_4]
.text:00000A06                 mov     [eax+0D4Ch], edx
.text:00000A0C                 mov     ecx, [ebp+arg_0]
.text:00000A0F                 sub     ecx, 1
.text:00000A12                 mov     [ebp+arg_0], ecx
.text:00000A15
.text:00000A15 loc_A15:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool):loc_9F5j
.text:00000A15                 mov     edx, [ebp+var_4]
.text:00000A18                 cmp     dword ptr [edx+0D4Ch], 0
.text:00000A1F                 jbe     short loc_A43
.text:00000A21                 cmp     [ebp+arg_0], 0
.text:00000A25                 jbe     short loc_A43
.text:00000A27                 mov     ecx, [ebp+var_4]
.text:00000A2A                 add     ecx, 48h ; 'H'
.text:00000A2D                 call    ?ReadDirectByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ ; NBitl::CDecoder<CInBuffer>::ReadDirectByte(void)
.text:00000A32                 movzx   eax, al
.text:00000A35                 push    eax             ; unsigned __int8
.text:00000A36                 mov     ecx, [ebp+var_4]
.text:00000A39                 add     ecx, 18h        ; this
.text:00000A3C                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:00000A41                 jmp     short loc_9F7
.text:00000A43 ; ---------------------------------------------------------------------------
.text:00000A43
.text:00000A43 loc_A43:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+29Bj
.text:00000A43                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2A1j
.text:00000A43                 mov     ecx, [ebp+var_4]
.text:00000A46                 xor     edx, edx
.text:00000A48                 cmp     dword ptr [ecx+0D4Ch], 0
.text:00000A4F                 setz    dl
.text:00000A52                 mov     eax, [ebp+var_4]
.text:00000A55                 mov     [eax+0D5Bh], dl
.text:00000A5B                 jmp     loc_8C7
.text:00000A60 ; ---------------------------------------------------------------------------
.text:00000A60
.text:00000A60 loc_A60:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+1EAj
.text:00000A60                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+33Cj ...
.text:00000A60                 cmp     [ebp+arg_0], 0
.text:00000A64                 jbe     loc_C20
.text:00000A6A                 mov     ecx, [ebp+var_4]
.text:00000A6D                 add     ecx, 48h ; 'H'
.text:00000A70                 call    ?ExtraBitsWereRead_Fast@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead_Fast(void)
.text:00000A75                 movzx   ecx, al
.text:00000A78                 test    ecx, ecx
.text:00000A7A                 jz      short loc_A86
.text:00000A7C                 mov     eax, 1
.text:00000A81                 jmp     loc_C7B
.text:00000A86 ; ---------------------------------------------------------------------------
.text:00000A86
.text:00000A86 loc_A86:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2F6j
.text:00000A86                 mov     edx, [ebp+var_4]
.text:00000A89                 add     edx, 48h ; 'H'
.text:00000A8C                 push    edx
.text:00000A8D                 mov     ecx, [ebp+var_4]
.text:00000A90                 add     ecx, 80h ; 'Ç'
.text:00000A96                 call    ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)
.text:00000A9B                 mov     [ebp+var_10], eax
.text:00000A9E                 cmp     [ebp+var_10], 100h
.text:00000AA5                 jnb     short loc_AC7
.text:00000AA7                 movzx   eax, byte ptr [ebp+var_10]
.text:00000AAB                 push    eax             ; unsigned __int8
.text:00000AAC                 mov     ecx, [ebp+var_4]
.text:00000AAF                 add     ecx, 18h        ; this
.text:00000AB2                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:00000AB7                 mov     ecx, [ebp+arg_0]
.text:00000ABA                 sub     ecx, 1
.text:00000ABD                 mov     [ebp+arg_0], ecx
.text:00000AC0                 jmp     short loc_A60
.text:00000AC2 ; ---------------------------------------------------------------------------
.text:00000AC2                 jmp     loc_C1B
.text:00000AC7 ; ---------------------------------------------------------------------------
.text:00000AC7
.text:00000AC7 loc_AC7:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+321j
.text:00000AC7                 cmp     [ebp+var_10], 100h
.text:00000ACE                 jnz     short loc_AE4
.text:00000AD0                 mov     edx, [ebp+var_4]
.text:00000AD3                 mov     byte ptr [edx+0D5Bh], 1
.text:00000ADA                 jmp     loc_C20
.text:00000ADF ; ---------------------------------------------------------------------------
.text:00000ADF                 jmp     loc_C1B
.text:00000AE4 ; ---------------------------------------------------------------------------
.text:00000AE4
.text:00000AE4 loc_AE4:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+34Aj
.text:00000AE4                 cmp     [ebp+var_10], 11Eh
.text:00000AEB                 jnb     loc_C14
.text:00000AF1                 mov     eax, [ebp+var_10]
.text:00000AF4                 sub     eax, 101h
.text:00000AF9                 mov     [ebp+var_10], eax
.text:00000AFC                 mov     ecx, [ebp+var_4]
.text:00000AFF                 movzx   edx, byte ptr [ecx+0D57h]
.text:00000B06                 test    edx, edx
.text:00000B08                 jz      short loc_B26
.text:00000B0A                 mov     eax, [ebp+var_10]
.text:00000B0D                 movzx   ecx, _kLenStart64[eax]
.text:00000B14                 mov     [ebp+var_14], ecx
.text:00000B17                 mov     edx, [ebp+var_10]
.text:00000B1A                 movzx   eax, _kLenDirectBits64[edx]
.text:00000B21                 mov     [ebp+var_18], eax
.text:00000B24                 jmp     short loc_B40
.text:00000B26 ; ---------------------------------------------------------------------------
.text:00000B26
.text:00000B26 loc_B26:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+384j
.text:00000B26                 mov     ecx, [ebp+var_10]
.text:00000B29                 movzx   edx, _kLenStart32[ecx]
.text:00000B30                 mov     [ebp+var_14], edx
.text:00000B33                 mov     eax, [ebp+var_10]
.text:00000B36                 movzx   ecx, _kLenDirectBits32[eax]
.text:00000B3D                 mov     [ebp+var_18], ecx
.text:00000B40
.text:00000B40 loc_B40:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3A0j
.text:00000B40                 mov     edx, [ebp+var_18]
.text:00000B43                 push    edx
.text:00000B44                 mov     ecx, [ebp+var_4]
.text:00000B47                 add     ecx, 48h ; 'H'
.text:00000B4A                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000B4F                 mov     ecx, [ebp+var_14]
.text:00000B52                 lea     edx, [ecx+eax+3]
.text:00000B56                 mov     [ebp+var_14], edx
.text:00000B59                 mov     eax, [ebp+var_14]
.text:00000B5C                 mov     [ebp+var_1C], eax
.text:00000B5F                 mov     ecx, [ebp+var_1C]
.text:00000B62                 cmp     ecx, [ebp+arg_0]
.text:00000B65                 jbe     short loc_B6D
.text:00000B67                 mov     edx, [ebp+arg_0]
.text:00000B6A                 mov     [ebp+var_1C], edx
.text:00000B6D
.text:00000B6D loc_B6D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3E1j
.text:00000B6D                 mov     eax, [ebp+var_4]
.text:00000B70                 add     eax, 48h ; 'H'
.text:00000B73                 push    eax
.text:00000B74                 mov     ecx, [ebp+var_4]
.text:00000B77                 add     ecx, 780h
.text:00000B7D                 call    ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)
.text:00000B82                 mov     [ebp+var_10], eax
.text:00000B85                 mov     ecx, [ebp+var_4]
.text:00000B88                 mov     edx, [ebp+var_10]
.text:00000B8B                 cmp     edx, [ecx+0D50h]
.text:00000B91                 jb      short loc_B9D
.text:00000B93                 mov     eax, 1
.text:00000B98                 jmp     loc_C7B
.text:00000B9D ; ---------------------------------------------------------------------------
.text:00000B9D
.text:00000B9D loc_B9D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+40Dj
.text:00000B9D                 mov     eax, [ebp+var_10]
.text:00000BA0                 movzx   ecx, _kDistDirectBits[eax]
.text:00000BA7                 push    ecx
.text:00000BA8                 mov     ecx, [ebp+var_4]
.text:00000BAB                 add     ecx, 48h ; 'H'
.text:00000BAE                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000BB3                 mov     edx, [ebp+var_10]
.text:00000BB6                 add     eax, _kDistStart[edx*4]
.text:00000BBD                 mov     [ebp+var_20], eax
.text:00000BC0                 mov     eax, [ebp+var_1C]
.text:00000BC3                 push    eax             ; unsigned int
.text:00000BC4                 mov     ecx, [ebp+var_20]
.text:00000BC7                 push    ecx             ; unsigned int
.text:00000BC8                 mov     ecx, [ebp+var_4]
.text:00000BCB                 add     ecx, 18h        ; this
.text:00000BCE                 call    ?CopyBlock@CLzOutWindow@@QAE_NII@Z ; CLzOutWindow::CopyBlock(uint,uint)
.text:00000BD3                 movzx   edx, al
.text:00000BD6                 test    edx, edx
.text:00000BD8                 jnz     short loc_BE4
.text:00000BDA                 mov     eax, 1
.text:00000BDF                 jmp     loc_C7B
.text:00000BE4 ; ---------------------------------------------------------------------------
.text:00000BE4
.text:00000BE4 loc_BE4:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+454j
.text:00000BE4                 mov     eax, [ebp+arg_0]
.text:00000BE7                 sub     eax, [ebp+var_1C]
.text:00000BEA                 mov     [ebp+arg_0], eax
.text:00000BED                 mov     ecx, [ebp+var_14]
.text:00000BF0                 sub     ecx, [ebp+var_1C]
.text:00000BF3                 mov     [ebp+var_14], ecx
.text:00000BF6                 jz      short loc_C12
.text:00000BF8                 mov     edx, [ebp+var_4]
.text:00000BFB                 mov     eax, [ebp+var_14]
.text:00000BFE                 mov     [edx+0D5Ch], eax
.text:00000C04                 mov     ecx, [ebp+var_4]
.text:00000C07                 mov     edx, [ebp+var_20]
.text:00000C0A                 mov     [ecx+0D60h], edx
.text:00000C10                 jmp     short loc_C20
.text:00000C12 ; ---------------------------------------------------------------------------
.text:00000C12
.text:00000C12 loc_C12:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+472j
.text:00000C12                 jmp     short loc_C1B
.text:00000C14 ; ---------------------------------------------------------------------------
.text:00000C14
.text:00000C14 loc_C14:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+367j
.text:00000C14                 mov     eax, 1
.text:00000C19                 jmp     short loc_C7B
.text:00000C1B ; ---------------------------------------------------------------------------
.text:00000C1B
.text:00000C1B loc_C1B:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+33Ej
.text:00000C1B                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+35Bj ...
.text:00000C1B                 jmp     loc_A60
.text:00000C20 ; ---------------------------------------------------------------------------
.text:00000C20
.text:00000C20 loc_C20:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2E0j
.text:00000C20                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+356j ...
.text:00000C20                 movzx   eax, [ebp+arg_4]
.text:00000C24                 test    eax, eax
.text:00000C26                 jz      short loc_C5B
.text:00000C28                 cmp     [ebp+arg_0], 0
.text:00000C2C                 jnz     short loc_C5B
.text:00000C2E                 mov     ecx, [ebp+var_4]
.text:00000C31                 add     ecx, 48h ; 'H'
.text:00000C34                 push    ecx
.text:00000C35                 mov     ecx, [ebp+var_4]
.text:00000C38                 add     ecx, 80h ; 'Ç'
.text:00000C3E                 call    ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)
.text:00000C43                 cmp     eax, 100h
.text:00000C48                 jz      short loc_C51
.text:00000C4A                 mov     eax, 1
.text:00000C4F                 jmp     short loc_C7B
.text:00000C51 ; ---------------------------------------------------------------------------
.text:00000C51
.text:00000C51 loc_C51:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+4C4j
.text:00000C51                 mov     edx, [ebp+var_4]
.text:00000C54                 mov     byte ptr [edx+0D5Bh], 1
.text:00000C5B
.text:00000C5B loc_C5B:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+4A2j
.text:00000C5B                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+4A8j
.text:00000C5B                 jmp     loc_8C7
.text:00000C60 ; ---------------------------------------------------------------------------
.text:00000C60
.text:00000C60 loc_C60:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+14Fj
.text:00000C60                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+19Aj
.text:00000C60                 mov     ecx, [ebp+var_4]
.text:00000C63                 add     ecx, 48h ; 'H'
.text:00000C66                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00000C6B                 movzx   eax, al
.text:00000C6E                 test    eax, eax
.text:00000C70                 jz      short loc_C79
.text:00000C72                 mov     eax, 1
.text:00000C77                 jmp     short loc_C7B
.text:00000C79 ; ---------------------------------------------------------------------------
.text:00000C79
.text:00000C79 loc_C79:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+4ECj
.text:00000C79                 xor     eax, eax
.text:00000C7B
.text:00000C7B loc_C7B:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+34j
.text:00000C7B                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+89j ...
.text:00000C7B                 add     esp, 20h
.text:00000C7E                 cmp     ebp, esp
.text:00000C80                 call    __RTC_CheckEsp
.text:00000C85                 mov     esp, ebp
.text:00000C87                 pop     ebp
.text:00000C88                 retn    8
.text:00000C88 ?CodeSpec@CCoder@NDecoder@NDeflate@NCompress@@AAEJI_N@Z endp
.text:00000C88
.text:00000C88 ; ---------------------------------------------------------------------------
.text:00000C8B                 db 9 dup(0CCh)
.text:00000C94
.text:00000C94 ; =============== S U B R O U T I N E =======================================
.text:00000C94
.text:00000C94 ; Attributes: bp-based frame
.text:00000C94
.text:00000C94 ; __int32 __thiscall NCompress::NDeflate::NDecoder::CCoder::CodeReal(NCompress::NDeflate::NDecoder::CCoder *this, struct ISequentialOutStream *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000C94                 public ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:00000C94 ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z proc near
.text:00000C94                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+59p
.text:00000C94                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+35p
.text:00000C94
.text:00000C94 var_D0          = byte ptr -0D0h
.text:00000C94 var_CD          = byte ptr -0CDh
.text:00000C94 var_CC          = dword ptr -0CCh
.text:00000C94 var_C5          = byte ptr -0C5h
.text:00000C94 var_C4          = dword ptr -0C4h
.text:00000C94 var_C0          = dword ptr -0C0h
.text:00000C94 var_BC          = dword ptr -0BCh
.text:00000C94 var_B8          = dword ptr -0B8h
.text:00000C94 var_B4          = dword ptr -0B4h
.text:00000C94 var_B0          = dword ptr -0B0h
.text:00000C94 var_AC          = dword ptr -0ACh
.text:00000C94 var_A8          = dword ptr -0A8h
.text:00000C94 var_A4          = dword ptr -0A4h
.text:00000C94 var_A0          = dword ptr -0A0h
.text:00000C94 var_9C          = dword ptr -9Ch
.text:00000C94 var_98          = dword ptr -98h
.text:00000C94 var_94          = dword ptr -94h
.text:00000C94 var_90          = dword ptr -90h
.text:00000C94 var_74          = dword ptr -74h
.text:00000C94 var_70          = dword ptr -70h
.text:00000C94 var_68          = dword ptr -68h
.text:00000C94 var_64          = dword ptr -64h
.text:00000C94 var_58          = dword ptr -58h
.text:00000C94 var_54          = dword ptr -54h
.text:00000C94 var_4C          = dword ptr -4Ch
.text:00000C94 var_48          = dword ptr -48h
.text:00000C94 var_44          = dword ptr -44h
.text:00000C94 var_3D          = byte ptr -3Dh
.text:00000C94 var_3C          = dword ptr -3Ch
.text:00000C94 var_38          = dword ptr -38h
.text:00000C94 var_34          = dword ptr -34h
.text:00000C94 var_30          = dword ptr -30h
.text:00000C94 var_2C          = dword ptr -2Ch
.text:00000C94 var_24          = byte ptr -24h
.text:00000C94 var_20          = byte ptr -20h
.text:00000C94 var_18          = dword ptr -18h
.text:00000C94 var_14          = dword ptr -14h
.text:00000C94 var_10          = dword ptr -10h
.text:00000C94 var_C           = dword ptr -0Ch
.text:00000C94 var_4           = dword ptr -4
.text:00000C94 arg_0           = dword ptr  8
.text:00000C94 arg_4           = dword ptr  0Ch
.text:00000C94 arg_8           = dword ptr  10h
.text:00000C94
.text:00000C94 ; FUNCTION CHUNK AT .text:00001024 SIZE 0000003C BYTES
.text:00000C94
.text:00000C94                 push    ebp
.text:00000C95                 mov     ebp, esp
.text:00000C97                 push    0FFFFFFFFh
.text:00000C99                 push    offset __ehhandler$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:00000C9E                 mov     eax, large fs:0
.text:00000CA4                 push    eax
.text:00000CA5                 push    ecx
.text:00000CA6                 sub     esp, 0C0h
.text:00000CAC                 push    ebx
.text:00000CAD                 push    esi
.text:00000CAE                 push    edi
.text:00000CAF                 push    ecx
.text:00000CB0                 lea     edi, [ebp+var_D0]
.text:00000CB6                 mov     ecx, 30h ; '0'
.text:00000CBB                 mov     eax, 0CCCCCCCCh
.text:00000CC0                 rep stosd
.text:00000CC2                 pop     ecx
.text:00000CC3                 mov     eax, dword ptr ds:___security_cookie
.text:00000CC8                 xor     eax, ebp
.text:00000CCA                 push    eax
.text:00000CCB                 lea     eax, [ebp+var_C]
.text:00000CCE                 mov     large fs:0, eax
.text:00000CD4                 mov     [ebp+var_10], esp
.text:00000CD7                 mov     [ebp+var_14], ecx
.text:00000CDA                 mov     [ebp+var_4], 0
.text:00000CE1                 mov     eax, [ebp+arg_0]
.text:00000CE4                 push    eax             ; struct ISequentialOutStream *
.text:00000CE5                 mov     ecx, [ebp+var_14]
.text:00000CE8                 add     ecx, 18h        ; this
.text:00000CEB                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00000CF0                 mov     ecx, [ebp+var_14]
.text:00000CF3                 push    ecx             ; struct NCompress::NDeflate::NDecoder::CCoder *
.text:00000CF4                 lea     ecx, [ebp+var_24] ; this
.text:00000CF7                 call    ??0CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@PAV1234@@Z ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::CCoderReleaser(NCompress::NDeflate::NDecoder::CCoder *)
.text:00000CFC                 mov     [ebp+var_9C], eax
.text:00000D02                 mov     byte ptr [ebp+var_4], 1
.text:00000D06                 mov     edx, [ebp+var_14]
.text:00000D09                 movzx   eax, byte ptr [edx+0D5Ah]
.text:00000D10                 test    eax, eax
.text:00000D12                 jz      short loc_D2A
.text:00000D14                 mov     [ebp+var_A4], 0
.text:00000D1E                 mov     [ebp+var_A0], 0
.text:00000D28                 jmp     short loc_D59
.text:00000D2A ; ---------------------------------------------------------------------------
.text:00000D2A
.text:00000D2A loc_D2A:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+7Ej
.text:00000D2A                 mov     ecx, [ebp+var_14]
.text:00000D2D                 add     ecx, 48h ; 'H'
.text:00000D30                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:00000D35                 mov     [ebp+var_AC], eax
.text:00000D3B                 mov     [ebp+var_A8], edx
.text:00000D41                 mov     ecx, [ebp+var_AC]
.text:00000D47                 mov     [ebp+var_A4], ecx
.text:00000D4D                 mov     edx, [ebp+var_A8]
.text:00000D53                 mov     [ebp+var_A0], edx
.text:00000D59
.text:00000D59 loc_D59:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+94j
.text:00000D59                 mov     eax, [ebp+var_A4]
.text:00000D5F                 mov     [ebp+var_30], eax
.text:00000D62                 mov     ecx, [ebp+var_A0]
.text:00000D68                 mov     [ebp+var_2C], ecx
.text:00000D6B                 mov     ecx, [ebp+var_14]
.text:00000D6E                 add     ecx, 18h        ; this
.text:00000D71                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000D76                 mov     [ebp+var_38], eax
.text:00000D79                 mov     [ebp+var_34], edx
.text:00000D7C
.text:00000D7C loc_D7C:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *):loc_F0Dj
.text:00000D7C                 mov     [ebp+var_3C], 40000h
.text:00000D83                 mov     [ebp+var_3D], 0
.text:00000D87                 cmp     [ebp+arg_4], 0
.text:00000D8B                 jz      short loc_DFF
.text:00000D8D                 mov     ecx, [ebp+var_14]
.text:00000D90                 add     ecx, 18h        ; this
.text:00000D93                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000D98                 sub     eax, [ebp+var_38]
.text:00000D9B                 sbb     edx, [ebp+var_34]
.text:00000D9E                 mov     ecx, [ebp+arg_4]
.text:00000DA1                 mov     esi, [ecx]
.text:00000DA3                 sub     esi, eax
.text:00000DA5                 mov     eax, [ecx+4]
.text:00000DA8                 sbb     eax, edx
.text:00000DAA                 mov     [ebp+var_48], esi
.text:00000DAD                 mov     [ebp+var_44], eax
.text:00000DB0                 mov     ecx, [ebp+var_3C]
.text:00000DB3                 xor     edx, edx
.text:00000DB5                 mov     [ebp+var_B4], ecx
.text:00000DBB                 mov     [ebp+var_B0], edx
.text:00000DC1                 mov     eax, [ebp+var_B0]
.text:00000DC7                 cmp     eax, [ebp+var_44]
.text:00000DCA                 jb      short loc_DFF
.text:00000DCC                 ja      short loc_DD9
.text:00000DCE                 mov     ecx, [ebp+var_B4]
.text:00000DD4                 cmp     ecx, [ebp+var_48]
.text:00000DD7                 jb      short loc_DFF
.text:00000DD9
.text:00000DD9 loc_DD9:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+138j
.text:00000DD9                 mov     edx, [ebp+var_48]
.text:00000DDC                 mov     [ebp+var_3C], edx
.text:00000DDF                 mov     eax, [ebp+var_14]
.text:00000DE2                 movzx   ecx, byte ptr [eax+0D64h]
.text:00000DE9                 test    ecx, ecx
.text:00000DEB                 jnz     short loc_DFB
.text:00000DED                 mov     edx, [ebp+var_14]
.text:00000DF0                 movzx   eax, byte ptr [edx+0D59h]
.text:00000DF7                 test    eax, eax
.text:00000DF9                 jz      short loc_DFF
.text:00000DFB
.text:00000DFB loc_DFB:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+157j
.text:00000DFB                 mov     [ebp+var_3D], 1
.text:00000DFF
.text:00000DFF loc_DFF:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+F7j
.text:00000DFF                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+136j ...
.text:00000DFF                 movzx   ecx, [ebp+var_3D]
.text:00000E03                 test    ecx, ecx
.text:00000E05                 jnz     short loc_E12
.text:00000E07                 cmp     [ebp+var_3C], 0
.text:00000E0B                 jnz     short loc_E12
.text:00000E0D                 jmp     loc_F12
.text:00000E12 ; ---------------------------------------------------------------------------
.text:00000E12
.text:00000E12 loc_E12:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+171j
.text:00000E12                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+177j
.text:00000E12                 movzx   edx, [ebp+var_3D]
.text:00000E16                 push    edx             ; bool
.text:00000E17                 mov     eax, [ebp+var_3C]
.text:00000E1A                 push    eax             ; unsigned int
.text:00000E1B                 mov     ecx, [ebp+var_14] ; this
.text:00000E1E                 call    ?CodeSpec@CCoder@NDecoder@NDeflate@NCompress@@AAEJI_N@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)
.text:00000E23                 mov     [ebp+var_B8], eax
.text:00000E29                 mov     ecx, [ebp+var_B8]
.text:00000E2F                 mov     [ebp+var_4C], ecx
.text:00000E32                 cmp     [ebp+var_4C], 0
.text:00000E36                 jz      short loc_E58
.text:00000E38                 mov     edx, [ebp+var_4C]
.text:00000E3B                 mov     [ebp+var_90], edx
.text:00000E41                 mov     byte ptr [ebp+var_4], 0
.text:00000E45                 lea     ecx, [ebp+var_24] ; this
.text:00000E48                 call    ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)
.text:00000E4D                 mov     eax, [ebp+var_90]
.text:00000E53                 jmp     loc_102E
.text:00000E58 ; ---------------------------------------------------------------------------
.text:00000E58
.text:00000E58 loc_E58:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1A2j
.text:00000E58                 mov     eax, [ebp+var_14]
.text:00000E5B                 cmp     dword ptr [eax+0D5Ch], 0FFFFFFFFh
.text:00000E62                 jnz     short loc_E69
.text:00000E64                 jmp     loc_F12
.text:00000E69 ; ---------------------------------------------------------------------------
.text:00000E69
.text:00000E69 loc_E69:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1CEj
.text:00000E69                 cmp     [ebp+arg_8], 0
.text:00000E6D                 jz      loc_F0D
.text:00000E73                 mov     ecx, [ebp+var_14]
.text:00000E76                 add     ecx, 48h ; 'H'
.text:00000E79                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:00000E7E                 mov     [ebp+var_C0], eax
.text:00000E84                 mov     [ebp+var_BC], edx
.text:00000E8A                 mov     ecx, [ebp+var_C0]
.text:00000E90                 sub     ecx, [ebp+var_30]
.text:00000E93                 mov     edx, [ebp+var_BC]
.text:00000E99                 sbb     edx, [ebp+var_2C]
.text:00000E9C                 mov     [ebp+var_58], ecx
.text:00000E9F                 mov     [ebp+var_54], edx
.text:00000EA2                 mov     ecx, [ebp+var_14]
.text:00000EA5                 add     ecx, 18h        ; this
.text:00000EA8                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00000EAD                 sub     eax, [ebp+var_38]
.text:00000EB0                 sbb     edx, [ebp+var_34]
.text:00000EB3                 mov     [ebp+var_68], eax
.text:00000EB6                 mov     [ebp+var_64], edx
.text:00000EB9                 mov     esi, esp
.text:00000EBB                 lea     eax, [ebp+var_68]
.text:00000EBE                 push    eax
.text:00000EBF                 lea     ecx, [ebp+var_58]
.text:00000EC2                 push    ecx
.text:00000EC3                 mov     edx, [ebp+arg_8]
.text:00000EC6                 push    edx
.text:00000EC7                 mov     eax, [ebp+arg_8]
.text:00000ECA                 mov     ecx, [eax]
.text:00000ECC                 mov     edx, [ecx+0Ch]
.text:00000ECF                 call    edx
.text:00000ED1                 cmp     esi, esp
.text:00000ED3                 call    __RTC_CheckEsp
.text:00000ED8                 mov     [ebp+var_C4], eax
.text:00000EDE                 mov     eax, [ebp+var_C4]
.text:00000EE4                 mov     [ebp+var_70], eax
.text:00000EE7                 cmp     [ebp+var_70], 0
.text:00000EEB                 jz      short loc_F0D
.text:00000EED                 mov     ecx, [ebp+var_70]
.text:00000EF0                 mov     [ebp+var_94], ecx
.text:00000EF6                 mov     byte ptr [ebp+var_4], 0
.text:00000EFA                 lea     ecx, [ebp+var_24] ; this
.text:00000EFD                 call    ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)
.text:00000F02                 mov     eax, [ebp+var_94]
.text:00000F08                 jmp     loc_102E
.text:00000F0D ; ---------------------------------------------------------------------------
.text:00000F0D
.text:00000F0D loc_F0D:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1D9j
.text:00000F0D                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+257j
.text:00000F0D                 jmp     loc_D7C
.text:00000F12 ; ---------------------------------------------------------------------------
.text:00000F12
.text:00000F12 loc_F12:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+179j
.text:00000F12                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1D0j
.text:00000F12                 mov     edx, [ebp+var_14]
.text:00000F15                 cmp     dword ptr [edx+0D5Ch], 0FFFFFFFFh
.text:00000F1C                 jnz     short loc_F71
.text:00000F1E                 mov     eax, [ebp+var_14]
.text:00000F21                 movzx   ecx, byte ptr [eax+0D64h]
.text:00000F28                 test    ecx, ecx
.text:00000F2A                 jz      short loc_F71
.text:00000F2C                 mov     ecx, [ebp+var_14]
.text:00000F2F                 add     ecx, 48h ; 'H'
.text:00000F32                 call    ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::AlignToByte(void)
.text:00000F37                 mov     [ebp+var_74], 0
.text:00000F3E                 jmp     short loc_F49
.text:00000F40 ; ---------------------------------------------------------------------------
.text:00000F40
.text:00000F40 loc_F40:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+2DBj
.text:00000F40                 mov     edx, [ebp+var_74]
.text:00000F43                 add     edx, 1
.text:00000F46                 mov     [ebp+var_74], edx
.text:00000F49
.text:00000F49 loc_F49:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+2AAj
.text:00000F49                 cmp     [ebp+var_74], 4
.text:00000F4D                 jnb     short loc_F71
.text:00000F4F                 mov     ecx, [ebp+var_14] ; this
.text:00000F52                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:00000F57                 mov     [ebp+var_C5], al
.text:00000F5D                 mov     eax, [ebp+var_14]
.text:00000F60                 add     eax, [ebp+var_74]
.text:00000F63                 mov     cl, [ebp+var_C5]
.text:00000F69                 mov     [eax+0D65h], cl
.text:00000F6F                 jmp     short loc_F40
.text:00000F71 ; ---------------------------------------------------------------------------
.text:00000F71
.text:00000F71 loc_F71:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+288j
.text:00000F71                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+296j ...
.text:00000F71                 mov     [ebp+var_20], 0
.text:00000F75                 mov     ecx, [ebp+var_14] ; this
.text:00000F78                 call    ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ ; NCompress::NDeflate::NDecoder::CCoder::Flush(void)
.text:00000F7D                 mov     [ebp+var_CC], eax
.text:00000F83                 mov     edx, [ebp+var_CC]
.text:00000F89                 mov     [ebp+var_18], edx
.text:00000F8C                 cmp     [ebp+var_18], 0
.text:00000F90                 jnz     short loc_FD5
.text:00000F92                 mov     eax, [ebp+var_14]
.text:00000F95                 cmp     dword ptr [eax+0D5Ch], 0FFFFFFFEh
.text:00000F9C                 jz      short loc_FD5
.text:00000F9E                 mov     ecx, [ebp+var_14] ; this
.text:00000FA1                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00000FA6                 mov     [ebp+var_CD], al
.text:00000FAC                 movzx   ecx, [ebp+var_CD]
.text:00000FB3                 test    ecx, ecx
.text:00000FB5                 jz      short loc_FD5
.text:00000FB7                 mov     [ebp+var_98], 1
.text:00000FC1                 mov     byte ptr [ebp+var_4], 0
.text:00000FC5                 lea     ecx, [ebp+var_24] ; this
.text:00000FC8                 call    ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)
.text:00000FCD                 mov     eax, [ebp+var_98]
.text:00000FD3                 jmp     short loc_102E
.text:00000FD5 ; ---------------------------------------------------------------------------
.text:00000FD5
.text:00000FD5 loc_FD5:                                ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+2FCj
.text:00000FD5                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+308j ...
.text:00000FD5                 mov     byte ptr [ebp+var_4], 0
.text:00000FD9                 lea     ecx, [ebp+var_24] ; this
.text:00000FDC                 call    ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)
.text:00000FE1                 jmp     short loc_1024
.text:00000FE1 ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z endp
.text:00000FE1
.text:00000FE3
.text:00000FE3 ; =============== S U B R O U T I N E =======================================
.text:00000FE3
.text:00000FE3
.text:00000FE3 __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$0 proc near
.text:00000FE3                                         ; DATA XREF: .xdata$x:0000152Co
.text:00000FE3                 mov     edx, [ebp-7Ch]
.text:00000FE6                 mov     eax, [edx]
.text:00000FE8                 mov     [ebp-18h], eax
.text:00000FEB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000FF2                 mov     eax, offset __tryend$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$3
.text:00000FF7                 retn
.text:00000FF7 __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$0 endp
.text:00000FF7
.text:00000FF8
.text:00000FF8 ; =============== S U B R O U T I N E =======================================
.text:00000FF8
.text:00000FF8
.text:00000FF8 __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$1 proc near
.text:00000FF8                                         ; DATA XREF: .xdata$x:0000153Co
.text:00000FF8                 mov     ecx, [ebp-88h]
.text:00000FFE                 mov     edx, [ecx]
.text:00001000                 mov     [ebp-18h], edx
.text:00001003                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000100A                 mov     eax, offset __tryend$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$3
.text:0000100F                 retn
.text:0000100F __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$1 endp
.text:0000100F
.text:00001010
.text:00001010 ; =============== S U B R O U T I N E =======================================
.text:00001010
.text:00001010
.text:00001010 __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$2 proc near
.text:00001010                                         ; DATA XREF: .xdata$x:0000154Co
.text:00001010                 mov     dword ptr [ebp-18h], 1
.text:00001017                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000101E                 mov     eax, offset __tryend$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$3
.text:00001023                 retn
.text:00001023 __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$2 endp
.text:00001023
.text:00001024 ; ---------------------------------------------------------------------------
.text:00001024 ; START OF FUNCTION CHUNK FOR ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:00001024
.text:00001024 loc_1024:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+34Dj
.text:00001024                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000102B
.text:0000102B __tryend$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$3:
.text:0000102B                                         ; DATA XREF: __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$0+Fo
.text:0000102B                                         ; __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$1+12o ...
.text:0000102B                 mov     eax, [ebp+var_18]
.text:0000102E
.text:0000102E loc_102E:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1BFj
.text:0000102E                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+274j ...
.text:0000102E                 push    edx
.text:0000102F                 mov     ecx, ebp
.text:00001031                 push    eax
.text:00001032                 lea     edx, $LN44
.text:00001038                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000103D                 pop     eax
.text:0000103E                 pop     edx
.text:0000103F                 mov     ecx, [ebp+var_C]
.text:00001042                 mov     large fs:0, ecx
.text:00001049                 pop     ecx
.text:0000104A                 pop     edi
.text:0000104B                 pop     esi
.text:0000104C                 pop     ebx
.text:0000104D                 add     esp, 0D0h
.text:00001053                 cmp     ebp, esp
.text:00001055                 call    __RTC_CheckEsp
.text:0000105A                 mov     esp, ebp
.text:0000105C                 pop     ebp
.text:0000105D                 retn    0Ch
.text:0000105D ; END OF FUNCTION CHUNK FOR ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:0000105D ; ---------------------------------------------------------------------------
.text:00001060 $LN44           dd 5                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+39Eo
.text:00001064                 dd offset $LN43
.text:00001068 $LN43           dd 0FFFFFFDCh, 8        ; DATA XREF: .text:00001064o
.text:00001070                 dd offset $LN37         ; "flusher"
.text:00001074                 dd 0FFFFFFA8h, 8
.text:0000107C                 dd offset $LN38         ; "inSize"
.text:00001080                 dd 0FFFFFF98h, 8
.text:00001088                 dd offset $LN39         ; "nowPos64"
.text:0000108C                 dd 0FFFFFF84h, 4
.text:00001094                 dd offset $LN40
.text:00001098                 dd 0FFFFFF78h, 4
.text:000010A0                 dd offset $LN41
.text:000010A4 $LN41           db 65h, 0               ; DATA XREF: .text:000010A0o
.text:000010A6 $LN40           dw 65h                  ; DATA XREF: .text:00001094o
.text:000010A8 $LN39           db 'nowPos64',0         ; DATA XREF: .text:00001088o
.text:000010B1 $LN38           db 'inSize',0           ; DATA XREF: .text:0000107Co
.text:000010B8 $LN37           db 'flusher',0          ; DATA XREF: .text:00001070o
.text:000010C0                 db 4 dup(0CCh)
.text:000010C4
.text:000010C4 ; =============== S U B R O U T I N E =======================================
.text:000010C4
.text:000010C4 ; Attributes: bp-based frame
.text:000010C4
.text:000010C4 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Code(NCompress::NDeflate::NDecoder::CCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000010C4                 public ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000010C4 ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000010C4                                         ; DATA XREF: .rdata:00001498o
.text:000010C4
.text:000010C4 var_4           = dword ptr -4
.text:000010C4 this            = dword ptr  8
.text:000010C4 arg_4           = dword ptr  0Ch
.text:000010C4 arg_8           = dword ptr  10h
.text:000010C4 arg_10          = dword ptr  18h
.text:000010C4 arg_14          = dword ptr  1Ch
.text:000010C4
.text:000010C4                 push    ebp
.text:000010C5                 mov     ebp, esp
.text:000010C7                 push    ecx
.text:000010C8                 push    esi
.text:000010C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010D0                 mov     esi, esp
.text:000010D2                 mov     eax, [ebp+arg_4]
.text:000010D5                 push    eax
.text:000010D6                 mov     ecx, [ebp+this]
.text:000010D9                 add     ecx, 8
.text:000010DC                 mov     edx, [ebp+this]
.text:000010DF                 mov     eax, [edx+8]
.text:000010E2                 push    ecx
.text:000010E3                 mov     ecx, [eax+0Ch]
.text:000010E6                 call    ecx
.text:000010E8                 cmp     esi, esp
.text:000010EA                 call    __RTC_CheckEsp
.text:000010EF                 mov     esi, esp
.text:000010F1                 mov     edx, [ebp+arg_10]
.text:000010F4                 push    edx
.text:000010F5                 mov     eax, [ebp+this]
.text:000010F8                 add     eax, 0Ch
.text:000010FB                 mov     ecx, [ebp+this]
.text:000010FE                 mov     edx, [ecx+0Ch]
.text:00001101                 push    eax
.text:00001102                 mov     eax, [edx+0Ch]
.text:00001105                 call    eax
.text:00001107                 cmp     esi, esp
.text:00001109                 call    __RTC_CheckEsp
.text:0000110E                 mov     ecx, [ebp+arg_14]
.text:00001111                 push    ecx             ; struct ICompressProgressInfo *
.text:00001112                 mov     edx, [ebp+arg_10]
.text:00001115                 push    edx             ; unsigned __int64 *
.text:00001116                 mov     eax, [ebp+arg_8]
.text:00001119                 push    eax             ; struct ISequentialOutStream *
.text:0000111A                 mov     ecx, [ebp+this] ; this
.text:0000111D                 call    ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00001122                 mov     [ebp+var_4], eax
.text:00001125                 mov     ecx, [ebp+this]
.text:00001128                 add     ecx, 8
.text:0000112B                 mov     edx, [ebp+this]
.text:0000112E                 mov     eax, [edx+8]
.text:00001131                 mov     esi, esp
.text:00001133                 push    ecx
.text:00001134                 mov     ecx, [eax+10h]
.text:00001137                 call    ecx
.text:00001139                 cmp     esi, esp
.text:0000113B                 call    __RTC_CheckEsp
.text:00001140                 mov     eax, [ebp+var_4]
.text:00001143                 pop     esi
.text:00001144                 add     esp, 4
.text:00001147                 cmp     ebp, esp
.text:00001149                 call    __RTC_CheckEsp
.text:0000114E                 mov     esp, ebp
.text:00001150                 pop     ebp
.text:00001151                 retn    18h
.text:00001151 ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00001151
.text:00001154
.text:00001154 ; =============== S U B R O U T I N E =======================================
.text:00001154
.text:00001154 ; Attributes: bp-based frame
.text:00001154
.text:00001154 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(NCompress::NDeflate::NDecoder::CCoder *this, unsigned __int64 *)
.text:00001154                 public ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z
.text:00001154 ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z proc near
.text:00001154                                         ; DATA XREF: .rdata:00001484o
.text:00001154
.text:00001154 this            = dword ptr  8
.text:00001154 arg_4           = dword ptr  0Ch
.text:00001154
.text:00001154                 push    ebp
.text:00001155                 mov     ebp, esp
.text:00001157                 cmp     [ebp+arg_4], 0
.text:0000115B                 jnz     short loc_1164
.text:0000115D                 mov     eax, 80070057h
.text:00001162                 jmp     short loc_1179
.text:00001164 ; ---------------------------------------------------------------------------
.text:00001164
.text:00001164 loc_1164:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)+7j
.text:00001164                 mov     ecx, [ebp+this]
.text:00001167                 add     ecx, 44h ; 'D'
.text:0000116A                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:0000116F                 mov     ecx, [ebp+arg_4]
.text:00001172                 mov     [ecx], eax
.text:00001174                 mov     [ecx+4], edx
.text:00001177                 xor     eax, eax
.text:00001179
.text:00001179 loc_1179:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)+Ej
.text:00001179                 cmp     ebp, esp
.text:0000117B                 call    __RTC_CheckEsp
.text:00001180                 pop     ebp
.text:00001181                 retn    8
.text:00001181 ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z endp
.text:00001181
.text:00001184
.text:00001184 ; =============== S U B R O U T I N E =======================================
.text:00001184
.text:00001184 ; Attributes: bp-based frame
.text:00001184
.text:00001184 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::SetInStream(NCompress::NDeflate::NDecoder::CCoder *this, struct ISequentialInStream *)
.text:00001184                 public ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:00001184 ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:00001184                                         ; DATA XREF: .rdata:0000146Co
.text:00001184
.text:00001184 this            = dword ptr  8
.text:00001184 arg_4           = dword ptr  0Ch
.text:00001184
.text:00001184                 push    ebp
.text:00001185                 mov     ebp, esp
.text:00001187                 mov     eax, [ebp+arg_4]
.text:0000118A                 push    eax
.text:0000118B                 mov     ecx, [ebp+this]
.text:0000118E                 add     ecx, 38h ; '8'
.text:00001191                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001196                 mov     ecx, [ebp+arg_4]
.text:00001199                 push    ecx             ; struct ISequentialInStream *
.text:0000119A                 mov     ecx, [ebp+this]
.text:0000119D                 add     ecx, 40h ; '@'
.text:000011A0                 call    ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ; NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:000011A5                 xor     eax, eax
.text:000011A7                 cmp     ebp, esp
.text:000011A9                 call    __RTC_CheckEsp
.text:000011AE                 pop     ebp
.text:000011AF                 retn    8
.text:000011AF ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:000011AF
.text:000011AF ; ---------------------------------------------------------------------------
.text:000011B2                 align 4
.text:000011B4
.text:000011B4 ; =============== S U B R O U T I N E =======================================
.text:000011B4
.text:000011B4 ; Attributes: bp-based frame
.text:000011B4
.text:000011B4 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000011B4                 public ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ
.text:000011B4 ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ proc near
.text:000011B4                                         ; DATA XREF: .rdata:00001470o
.text:000011B4
.text:000011B4 this            = dword ptr  8
.text:000011B4
.text:000011B4                 push    ebp
.text:000011B5                 mov     ebp, esp
.text:000011B7                 mov     ecx, [ebp+this]
.text:000011BA                 add     ecx, 38h ; '8'
.text:000011BD                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000011C2                 xor     eax, eax
.text:000011C4                 cmp     ebp, esp
.text:000011C6                 call    __RTC_CheckEsp
.text:000011CB                 pop     ebp
.text:000011CC                 retn    4
.text:000011CC ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ endp
.text:000011CC
.text:000011CC ; ---------------------------------------------------------------------------
.text:000011CF                 db 5 dup(0CCh)
.text:000011D4
.text:000011D4 ; =============== S U B R O U T I N E =======================================
.text:000011D4
.text:000011D4 ; Attributes: bp-based frame
.text:000011D4
.text:000011D4 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(NCompress::NDeflate::NDecoder::CCoder *this, const unsigned __int64 *)
.text:000011D4                 public ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z
.text:000011D4 ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z proc near
.text:000011D4                                         ; DATA XREF: .rdata:00001458o
.text:000011D4
.text:000011D4 this            = dword ptr  8
.text:000011D4
.text:000011D4                 push    ebp
.text:000011D5                 mov     ebp, esp
.text:000011D7                 mov     eax, [ebp+this]
.text:000011DA                 mov     dword ptr [eax+0D50h], 0FFFFFFFEh
.text:000011E4                 mov     ecx, [ebp+this]
.text:000011E7                 mov     byte ptr [ecx+0D4Eh], 1
.text:000011EE                 mov     edx, [ebp+this]
.text:000011F1                 movzx   eax, byte ptr [edx+0D4Ch]
.text:000011F8                 push    eax             ; bool
.text:000011F9                 mov     ecx, [ebp+this]
.text:000011FC                 add     ecx, 0Ch        ; this
.text:000011FF                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:00001204                 xor     eax, eax
.text:00001206                 cmp     ebp, esp
.text:00001208                 call    __RTC_CheckEsp
.text:0000120D                 pop     ebp
.text:0000120E                 retn    8
.text:0000120E ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z endp
.text:0000120E
.text:0000120E ; ---------------------------------------------------------------------------
.text:00001211                 align 4
.text:00001214
.text:00001214 ; =============== S U B R O U T I N E =======================================
.text:00001214
.text:00001214 ; Attributes: bp-based frame
.text:00001214
.text:00001214 ; __int32 __cdecl NCompress::NDeflate::NDecoder::CCoder::Read(NCompress::NDeflate::NDecoder::CCoder *this, unsigned __int8 *, unsigned int, unsigned int *)
.text:00001214                 public ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.text:00001214 ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z proc near
.text:00001214                                         ; DATA XREF: .rdata:00001444o
.text:00001214
.text:00001214 var_3C          = dword ptr -3Ch
.text:00001214 var_38          = dword ptr -38h
.text:00001214 var_1C          = dword ptr -1Ch
.text:00001214 var_18          = dword ptr -18h
.text:00001214 var_14          = dword ptr -14h
.text:00001214 var_10          = dword ptr -10h
.text:00001214 var_C           = dword ptr -0Ch
.text:00001214 var_4           = dword ptr -4
.text:00001214 this            = dword ptr  8
.text:00001214 arg_4           = dword ptr  0Ch
.text:00001214 arg_8           = dword ptr  10h
.text:00001214 arg_C           = dword ptr  14h
.text:00001214
.text:00001214 ; FUNCTION CHUNK AT .text:00001315 SIZE 00000046 BYTES
.text:00001214
.text:00001214                 push    ebp
.text:00001215                 mov     ebp, esp
.text:00001217                 push    0FFFFFFFFh
.text:00001219                 push    offset __ehhandler$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.text:0000121E                 mov     eax, large fs:0
.text:00001224                 push    eax
.text:00001225                 push    ecx
.text:00001226                 sub     esp, 2Ch
.text:00001229                 push    ebx
.text:0000122A                 push    esi
.text:0000122B                 push    edi
.text:0000122C                 lea     edi, [ebp+var_3C]
.text:0000122F                 mov     ecx, 0Bh
.text:00001234                 mov     eax, 0CCCCCCCCh
.text:00001239                 rep stosd
.text:0000123B                 mov     eax, dword ptr ds:___security_cookie
.text:00001240                 xor     eax, ebp
.text:00001242                 push    eax
.text:00001243                 lea     eax, [ebp+var_C]
.text:00001246                 mov     large fs:0, eax
.text:0000124C                 mov     [ebp+var_10], esp
.text:0000124F                 mov     [ebp+var_4], 0
.text:00001256                 cmp     [ebp+arg_C], 0
.text:0000125A                 jz      short loc_1265
.text:0000125C                 mov     eax, [ebp+arg_C]
.text:0000125F                 mov     dword ptr [eax], 0
.text:00001265
.text:00001265 loc_1265:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+46j
.text:00001265                 mov     ecx, [ebp+this]
.text:00001268                 add     ecx, 8          ; this
.text:0000126B                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00001270                 mov     [ebp+var_1C], eax
.text:00001273                 mov     [ebp+var_18], edx
.text:00001276                 mov     ecx, [ebp+arg_4]
.text:00001279                 push    ecx             ; unsigned __int8 *
.text:0000127A                 mov     ecx, [ebp+this]
.text:0000127D                 add     ecx, 8          ; this
.text:00001280                 call    ?SetMemStream@COutBuffer@@QAEXPAE@Z ; COutBuffer::SetMemStream(uchar *)
.text:00001285                 push    0               ; bool
.text:00001287                 mov     edx, [ebp+arg_8]
.text:0000128A                 push    edx             ; unsigned int
.text:0000128B                 mov     ecx, [ebp+this]
.text:0000128E                 sub     ecx, 10h        ; this
.text:00001291                 call    ?CodeSpec@CCoder@NDecoder@NDeflate@NCompress@@AAEJI_N@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)
.text:00001296                 mov     [ebp+var_38], eax
.text:00001299                 mov     eax, [ebp+var_38]
.text:0000129C                 mov     [ebp+var_14], eax
.text:0000129F                 cmp     [ebp+var_14], 0
.text:000012A3                 jnz     short loc_12D5
.text:000012A5                 mov     ecx, [ebp+this]
.text:000012A8                 sub     ecx, 10h        ; this
.text:000012AB                 call    ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ ; NCompress::NDeflate::NDecoder::CCoder::Flush(void)
.text:000012B0                 mov     [ebp+var_3C], eax
.text:000012B3                 mov     ecx, [ebp+var_3C]
.text:000012B6                 mov     [ebp+var_14], ecx
.text:000012B9                 cmp     [ebp+arg_C], 0
.text:000012BD                 jz      short loc_12D5
.text:000012BF                 mov     ecx, [ebp+this]
.text:000012C2                 add     ecx, 8          ; this
.text:000012C5                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:000012CA                 sub     eax, [ebp+var_1C]
.text:000012CD                 sbb     edx, [ebp+var_18]
.text:000012D0                 mov     edx, [ebp+arg_C]
.text:000012D3                 mov     [edx], eax
.text:000012D5
.text:000012D5 loc_12D5:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+8Fj
.text:000012D5                                         ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+A9j
.text:000012D5                 jmp     short loc_1315
.text:000012D5 ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z endp
.text:000012D5
.text:000012D7
.text:000012D7 ; =============== S U B R O U T I N E =======================================
.text:000012D7
.text:000012D7
.text:000012D7 __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$0 proc near
.text:000012D7                                         ; DATA XREF: .xdata$x:000015A4o
.text:000012D7                 mov     eax, [ebp-24h]
.text:000012DA                 mov     ecx, [eax]
.text:000012DC                 mov     [ebp-14h], ecx
.text:000012DF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000012E6                 mov     eax, offset __tryend$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$3
.text:000012EB                 retn
.text:000012EB __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$0 endp
.text:000012EB
.text:000012EC
.text:000012EC ; =============== S U B R O U T I N E =======================================
.text:000012EC
.text:000012EC
.text:000012EC __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$1 proc near
.text:000012EC                                         ; DATA XREF: .xdata$x:000015B4o
.text:000012EC                 mov     edx, [ebp-30h]
.text:000012EF                 mov     eax, [edx]
.text:000012F1                 mov     [ebp-14h], eax
.text:000012F4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000012FB                 mov     eax, offset __tryend$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$3
.text:00001300                 retn
.text:00001300 __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$1 endp
.text:00001300
.text:00001301
.text:00001301 ; =============== S U B R O U T I N E =======================================
.text:00001301
.text:00001301
.text:00001301 __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$2 proc near
.text:00001301                                         ; DATA XREF: .xdata$x:000015C4o
.text:00001301                 mov     dword ptr [ebp-14h], 1
.text:00001308                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000130F                 mov     eax, offset __tryend$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$3
.text:00001314                 retn
.text:00001314 __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$2 endp
.text:00001314
.text:00001315 ; ---------------------------------------------------------------------------
.text:00001315 ; START OF FUNCTION CHUNK FOR ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.text:00001315
.text:00001315 loc_1315:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *):loc_12D5j
.text:00001315                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000131C
.text:0000131C __tryend$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$3:
.text:0000131C                                         ; DATA XREF: __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$0+Fo
.text:0000131C                                         ; __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$1+Fo ...
.text:0000131C                 push    0               ; unsigned __int8 *
.text:0000131E                 mov     ecx, [ebp+this]
.text:00001321                 add     ecx, 8          ; this
.text:00001324                 call    ?SetMemStream@COutBuffer@@QAEXPAE@Z ; COutBuffer::SetMemStream(uchar *)
.text:00001329                 mov     eax, [ebp+var_14]
.text:0000132C                 push    edx
.text:0000132D                 mov     ecx, ebp
.text:0000132F                 push    eax
.text:00001330                 lea     edx, $LN24_0
.text:00001336                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000133B                 pop     eax
.text:0000133C                 pop     edx
.text:0000133D                 mov     ecx, [ebp+var_C]
.text:00001340                 mov     large fs:0, ecx
.text:00001347                 pop     ecx
.text:00001348                 pop     edi
.text:00001349                 pop     esi
.text:0000134A                 pop     ebx
.text:0000134B                 add     esp, 3Ch
.text:0000134E                 cmp     ebp, esp
.text:00001350                 call    __RTC_CheckEsp
.text:00001355                 mov     esp, ebp
.text:00001357                 pop     ebp
.text:00001358                 retn    10h
.text:00001358 ; END OF FUNCTION CHUNK FOR ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.text:00001358 ; ---------------------------------------------------------------------------
.text:0000135B                 align 4
.text:0000135C $LN24_0         dd 2                    ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+11Co
.text:00001360                 dd offset $LN23_0
.text:00001364 $LN23_0         dd 0FFFFFFDCh, 4        ; DATA XREF: .text:00001360o
.text:0000136C                 dd offset $LN20
.text:00001370                 dd 0FFFFFFD0h, 4
.text:00001378                 dd offset $LN21
.text:0000137C $LN21           db 65h, 0               ; DATA XREF: .text:00001378o
.text:0000137E $LN20           dw 65h                  ; DATA XREF: .text:0000136Co
.text:00001380                 db 4 dup(0CCh)
.text:00001384
.text:00001384 ; =============== S U B R O U T I N E =======================================
.text:00001384
.text:00001384 ; Attributes: bp-based frame
.text:00001384
.text:00001384 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::CodeResume(NCompress::NDeflate::NDecoder::CCoder *this, struct ISequentialOutStream *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00001384                 public ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text:00001384 ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z proc near
.text:00001384                                         ; DATA XREF: .rdata:000014A0o
.text:00001384
.text:00001384 this            = dword ptr  8
.text:00001384 arg_4           = dword ptr  0Ch
.text:00001384 arg_8           = dword ptr  10h
.text:00001384 arg_C           = dword ptr  14h
.text:00001384
.text:00001384                 push    ebp
.text:00001385                 mov     ebp, esp
.text:00001387                 mov     eax, [ebp+this]
.text:0000138A                 mov     dword ptr [eax+0D5Ch], 0FFFFFFFEh
.text:00001394                 mov     ecx, [ebp+this]
.text:00001397                 movzx   edx, byte ptr [ecx+0D58h]
.text:0000139E                 push    edx             ; bool
.text:0000139F                 mov     ecx, [ebp+this]
.text:000013A2                 add     ecx, 18h        ; this
.text:000013A5                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:000013AA                 mov     eax, [ebp+arg_C]
.text:000013AD                 push    eax             ; struct ICompressProgressInfo *
.text:000013AE                 mov     ecx, [ebp+arg_8]
.text:000013B1                 push    ecx             ; unsigned __int64 *
.text:000013B2                 mov     edx, [ebp+arg_4]
.text:000013B5                 push    edx             ; struct ISequentialOutStream *
.text:000013B6                 mov     ecx, [ebp+this] ; this
.text:000013B9                 call    ?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.text:000013BE                 cmp     ebp, esp
.text:000013C0                 call    __RTC_CheckEsp
.text:000013C5                 pop     ebp
.text:000013C6                 retn    10h
.text:000013C6 ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z endp
.text:000013C6
.text:000013C6 ; ---------------------------------------------------------------------------
.text:000013C9                 align 4
.text:000013C9 _text           ends
.text:000013C9
.text$x:000013CC ; ===========================================================================
.text$x:000013CC
.text$x:000013CC ; Segment type: Pure code
.text$x:000013CC ; Segment permissions: Read/Execute
.text$x:000013CC _text$x         segment para public 'CODE' use32
.text$x:000013CC                 assume cs:_text$x
.text$x:000013CC                 ;org 13CCh
.text$x:000013CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000013CC
.text$x:000013CC ; =============== S U B R O U T I N E =======================================
.text$x:000013CC
.text$x:000013CC
.text$x:000013CC __unwindfunclet$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z$0 proc near
.text$x:000013CC                                         ; DATA XREF: .xdata$x:000014A8o
.text$x:000013CC                 mov     ecx, [ebp-10h]
.text$x:000013CF                 add     ecx, 18h        ; this
.text$x:000013D2                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:000013D2 __unwindfunclet$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z$0 endp
.text$x:000013D2
.text$x:000013D7
.text$x:000013D7 ; =============== S U B R O U T I N E =======================================
.text$x:000013D7
.text$x:000013D7
.text$x:000013D7 __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z proc near
.text$x:000013D7                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+5o
.text$x:000013D7
.text$x:000013D7 arg_4           = dword ptr  8
.text$x:000013D7
.text$x:000013D7                 mov     edx, [esp+arg_4]
.text$x:000013DB                 lea     eax, [edx+0Ch]
.text$x:000013DE                 mov     ecx, [edx-8]
.text$x:000013E1                 xor     ecx, eax
.text$x:000013E3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000013E8                 mov     eax, offset __ehfuncinfo$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z
.text$x:000013ED                 jmp     ___CxxFrameHandler3
.text$x:000013ED __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z endp
.text$x:000013ED
.text$x:000013F2
.text$x:000013F2 ; =============== S U B R O U T I N E =======================================
.text$x:000013F2
.text$x:000013F2
.text$x:000013F2 __unwindfunclet$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$4 proc near
.text$x:000013F2                                         ; DATA XREF: .xdata$x:000014F0o
.text$x:000013F2                 lea     ecx, [ebp-24h]  ; this
.text$x:000013F5                 jmp     ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)
.text$x:000013F5 __unwindfunclet$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$4 endp
.text$x:000013F5
.text$x:000013FA
.text$x:000013FA ; =============== S U B R O U T I N E =======================================
.text$x:000013FA
.text$x:000013FA
.text$x:000013FA __ehhandler$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z proc near
.text$x:000013FA                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:000013FA
.text$x:000013FA arg_4           = dword ptr  8
.text$x:000013FA
.text$x:000013FA                 mov     edx, [esp+arg_4]
.text$x:000013FE                 lea     eax, [edx+0Ch]
.text$x:00001401                 mov     ecx, [edx-0D4h]
.text$x:00001407                 xor     ecx, eax
.text$x:00001409                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000140E                 mov     eax, offset __ehfuncinfo$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.text$x:00001413                 jmp     ___CxxFrameHandler3
.text$x:00001413 __ehhandler$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z endp
.text$x:00001413
.text$x:00001418
.text$x:00001418 ; =============== S U B R O U T I N E =======================================
.text$x:00001418
.text$x:00001418
.text$x:00001418 __ehhandler$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z proc near
.text$x:00001418                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+5o
.text$x:00001418
.text$x:00001418 arg_4           = dword ptr  8
.text$x:00001418
.text$x:00001418                 mov     edx, [esp+arg_4]
.text$x:0000141C                 lea     eax, [edx+0Ch]
.text$x:0000141F                 mov     ecx, [edx-40h]
.text$x:00001422                 xor     ecx, eax
.text$x:00001424                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001429                 mov     eax, offset __ehfuncinfo$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.text$x:0000142E                 jmp     ___CxxFrameHandler3
.text$x:0000142E __ehhandler$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z endp
.text$x:0000142E
.text$x:0000142E ; ---------------------------------------------------------------------------
.text$x:00001433                 align 4
.text$x:00001433 _text$x         ends
.text$x:00001433
.rdata:00001434 ; ===========================================================================
.rdata:00001434
.rdata:00001434 ; Segment type: Pure data
.rdata:00001434 ; Segment permissions: Read
.rdata:00001434 _rdata          segment dword public 'DATA' use32
.rdata:00001434                 assume cs:_rdata
.rdata:00001434                 ;org 1434h
.rdata:00001434 ; COMDAT (pick largest)
.rdata:00001434                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00001438                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00001438 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.rdata:00001438 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00001438                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+96o
.rdata:00001438                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+57o
.rdata:00001438                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:0000143C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00001440                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00001444                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00001444 _rdata          ends
.rdata:00001444
.rdata:00001448 ; ===========================================================================
.rdata:00001448
.rdata:00001448 ; Segment type: Pure data
.rdata:00001448 ; Segment permissions: Read
.rdata:00001448 _rdata          segment dword public 'DATA' use32
.rdata:00001448                 assume cs:_rdata
.rdata:00001448                 ;org 1448h
.rdata:00001448 ; COMDAT (pick largest)
.rdata:00001448                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:0000144C                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:0000144C ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:0000144C ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:0000144C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+8Co
.rdata:0000144C                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+4Do
.rdata:0000144C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00001450                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00001454                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00001458                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00001458 _rdata          ends
.rdata:00001458
.rdata:0000145C ; ===========================================================================
.rdata:0000145C
.rdata:0000145C ; Segment type: Pure data
.rdata:0000145C ; Segment permissions: Read
.rdata:0000145C _rdata          segment dword public 'DATA' use32
.rdata:0000145C                 assume cs:_rdata
.rdata:0000145C                 ;org 145Ch
.rdata:0000145C ; COMDAT (pick largest)
.rdata:0000145C                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00001460                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00001460 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00001460 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00001460                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+82o
.rdata:00001460                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+43o
.rdata:00001460                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00001464                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00001468                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:0000146C                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:00001470                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:00001470 _rdata          ends
.rdata:00001470
.rdata:00001474 ; ===========================================================================
.rdata:00001474
.rdata:00001474 ; Segment type: Pure data
.rdata:00001474 ; Segment permissions: Read
.rdata:00001474 _rdata          segment dword public 'DATA' use32
.rdata:00001474                 assume cs:_rdata
.rdata:00001474                 ;org 1474h
.rdata:00001474 ; COMDAT (pick largest)
.rdata:00001474                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00001478                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00001478 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00001478 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00001478                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+78o
.rdata:00001478                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+39o
.rdata:00001478                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000147C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:00001480                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:00001484                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00001484 _rdata          ends
.rdata:00001484
.rdata:00001488 ; ===========================================================================
.rdata:00001488
.rdata:00001488 ; Segment type: Pure data
.rdata:00001488 ; Segment permissions: Read
.rdata:00001488 _rdata          segment dword public 'DATA' use32
.rdata:00001488                 assume cs:_rdata
.rdata:00001488                 ;org 1488h
.rdata:00001488 ; COMDAT (pick largest)
.rdata:00001488                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:0000148C                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:0000148C ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:0000148C ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:0000148C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+6Fo
.rdata:0000148C                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+30o
.rdata:0000148C                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:00001490                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:00001494                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:00001498                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:0000149C                 dd offset ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(uint)
.rdata:000014A0                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000014A0 _rdata          ends
.rdata:000014A0
.xdata$x:000014A4 ; ===========================================================================
.xdata$x:000014A4
.xdata$x:000014A4 ; Segment type: Pure data
.xdata$x:000014A4 ; Segment permissions: Read
.xdata$x:000014A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000014A4                 assume cs:_xdata$x
.xdata$x:000014A4                 ;org 14A4h
.xdata$x:000014A4 __unwindtable$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z db 0FFh
.xdata$x:000014A4                                         ; DATA XREF: .xdata$x:000014B4o
.xdata$x:000014A5                 db 0FFh
.xdata$x:000014A6                 db 0FFh
.xdata$x:000014A7                 db 0FFh
.xdata$x:000014A8                 dd offset __unwindfunclet$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z$0
.xdata$x:000014AC __ehfuncinfo$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z db  22h ; "
.xdata$x:000014AC                                         ; DATA XREF: __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z+11o
.xdata$x:000014AD                 db    5
.xdata$x:000014AE                 db  93h ; ô
.xdata$x:000014AF                 db  19h
.xdata$x:000014B0                 db    1
.xdata$x:000014B1                 db    0
.xdata$x:000014B2                 db    0
.xdata$x:000014B3                 db    0
.xdata$x:000014B4                 dd offset __unwindtable$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z
.xdata$x:000014B8                 db    0
.xdata$x:000014B9                 db    0
.xdata$x:000014BA                 db    0
.xdata$x:000014BB                 db    0
.xdata$x:000014BC                 db    0
.xdata$x:000014BD                 db    0
.xdata$x:000014BE                 db    0
.xdata$x:000014BF                 db    0
.xdata$x:000014C0                 db    0
.xdata$x:000014C1                 db    0
.xdata$x:000014C2                 db    0
.xdata$x:000014C3                 db    0
.xdata$x:000014C4                 db    0
.xdata$x:000014C5                 db    0
.xdata$x:000014C6                 db    0
.xdata$x:000014C7                 db    0
.xdata$x:000014C8                 db    0
.xdata$x:000014C9                 db    0
.xdata$x:000014CA                 db    0
.xdata$x:000014CB                 db    0
.xdata$x:000014CC                 db    1
.xdata$x:000014CD                 db    0
.xdata$x:000014CE                 db    0
.xdata$x:000014CF                 db    0
.xdata$x:000014D0 __tryblocktable$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z db    0
.xdata$x:000014D0                                         ; DATA XREF: .xdata$x:0000150Co
.xdata$x:000014D1                 db    0
.xdata$x:000014D2                 db    0
.xdata$x:000014D3                 db    0
.xdata$x:000014D4                 db    1
.xdata$x:000014D5                 db    0
.xdata$x:000014D6                 db    0
.xdata$x:000014D7                 db    0
.xdata$x:000014D8                 db    2
.xdata$x:000014D9                 db    0
.xdata$x:000014DA                 db    0
.xdata$x:000014DB                 db    0
.xdata$x:000014DC                 db    3
.xdata$x:000014DD                 db    0
.xdata$x:000014DE                 db    0
.xdata$x:000014DF                 db    0
.xdata$x:000014E0                 dd offset __catchsym$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$5
.xdata$x:000014E4 __unwindtable$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000014E4                                         ; DATA XREF: .xdata$x:00001504o
.xdata$x:000014E5                 db 0FFh
.xdata$x:000014E6                 db 0FFh
.xdata$x:000014E7                 db 0FFh
.xdata$x:000014E8                 db    0
.xdata$x:000014E9                 db    0
.xdata$x:000014EA                 db    0
.xdata$x:000014EB                 db    0
.xdata$x:000014EC                 db    0
.xdata$x:000014ED                 db    0
.xdata$x:000014EE                 db    0
.xdata$x:000014EF                 db    0
.xdata$x:000014F0                 dd offset __unwindfunclet$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$4
.xdata$x:000014F4                 db 0FFh
.xdata$x:000014F5                 db 0FFh
.xdata$x:000014F6                 db 0FFh
.xdata$x:000014F7                 db 0FFh
.xdata$x:000014F8                 db    0
.xdata$x:000014F9                 db    0
.xdata$x:000014FA                 db    0
.xdata$x:000014FB                 db    0
.xdata$x:000014FC __ehfuncinfo$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000014FC                                         ; DATA XREF: __ehhandler$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z+14o
.xdata$x:000014FD                 db    5
.xdata$x:000014FE                 db  93h ; ô
.xdata$x:000014FF                 db  19h
.xdata$x:00001500                 db    3
.xdata$x:00001501                 db    0
.xdata$x:00001502                 db    0
.xdata$x:00001503                 db    0
.xdata$x:00001504                 dd offset __unwindtable$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.xdata$x:00001508                 db    1
.xdata$x:00001509                 db    0
.xdata$x:0000150A                 db    0
.xdata$x:0000150B                 db    0
.xdata$x:0000150C                 dd offset __tryblocktable$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z
.xdata$x:00001510                 db    0
.xdata$x:00001511                 db    0
.xdata$x:00001512                 db    0
.xdata$x:00001513                 db    0
.xdata$x:00001514                 db    0
.xdata$x:00001515                 db    0
.xdata$x:00001516                 db    0
.xdata$x:00001517                 db    0
.xdata$x:00001518                 db    0
.xdata$x:00001519                 db    0
.xdata$x:0000151A                 db    0
.xdata$x:0000151B                 db    0
.xdata$x:0000151C                 db    1
.xdata$x:0000151D                 db    0
.xdata$x:0000151E                 db    0
.xdata$x:0000151F                 db    0
.xdata$x:00001520 __catchsym$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$5 db    9
.xdata$x:00001520                                         ; DATA XREF: .xdata$x:000014E0o
.xdata$x:00001521                 db    0
.xdata$x:00001522                 db    0
.xdata$x:00001523                 db    0
.xdata$x:00001524                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00001528                 db  84h ; ä
.xdata$x:00001529                 db 0FFh
.xdata$x:0000152A                 db 0FFh
.xdata$x:0000152B                 db 0FFh
.xdata$x:0000152C                 dd offset __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$0
.xdata$x:00001530                 db    9
.xdata$x:00001531                 db    0
.xdata$x:00001532                 db    0
.xdata$x:00001533                 db    0
.xdata$x:00001534                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00001538                 db  78h ; x
.xdata$x:00001539                 db 0FFh
.xdata$x:0000153A                 db 0FFh
.xdata$x:0000153B                 db 0FFh
.xdata$x:0000153C                 dd offset __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$1
.xdata$x:00001540                 dd offset _kLenDirectBits32
.xdata$x:00001544                 db    0
.xdata$x:00001545                 db    0
.xdata$x:00001546                 db    0
.xdata$x:00001547                 db    0
.xdata$x:00001548                 db    0
.xdata$x:00001549                 db    0
.xdata$x:0000154A                 db    0
.xdata$x:0000154B                 db    0
.xdata$x:0000154C                 dd offset __catch$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z$2
.xdata$x:00001550 __unwindtable$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z db 0FFh
.xdata$x:00001550                                         ; DATA XREF: .xdata$x:0000157Co
.xdata$x:00001551                 db 0FFh
.xdata$x:00001552                 db 0FFh
.xdata$x:00001553                 db 0FFh
.xdata$x:00001554                 db    0
.xdata$x:00001555                 db    0
.xdata$x:00001556                 db    0
.xdata$x:00001557                 db    0
.xdata$x:00001558                 db 0FFh
.xdata$x:00001559                 db 0FFh
.xdata$x:0000155A                 db 0FFh
.xdata$x:0000155B                 db 0FFh
.xdata$x:0000155C                 db    0
.xdata$x:0000155D                 db    0
.xdata$x:0000155E                 db    0
.xdata$x:0000155F                 db    0
.xdata$x:00001560 __tryblocktable$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z db    0
.xdata$x:00001560                                         ; DATA XREF: .xdata$x:00001584o
.xdata$x:00001561                 db    0
.xdata$x:00001562                 db    0
.xdata$x:00001563                 db    0
.xdata$x:00001564                 db    0
.xdata$x:00001565                 db    0
.xdata$x:00001566                 db    0
.xdata$x:00001567                 db    0
.xdata$x:00001568                 db    1
.xdata$x:00001569                 db    0
.xdata$x:0000156A                 db    0
.xdata$x:0000156B                 db    0
.xdata$x:0000156C                 db    3
.xdata$x:0000156D                 db    0
.xdata$x:0000156E                 db    0
.xdata$x:0000156F                 db    0
.xdata$x:00001570                 dd offset __catchsym$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$4
.xdata$x:00001574 __ehfuncinfo$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z db  22h ; "
.xdata$x:00001574                                         ; DATA XREF: __ehhandler$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z+11o
.xdata$x:00001575                 db    5
.xdata$x:00001576                 db  93h ; ô
.xdata$x:00001577                 db  19h
.xdata$x:00001578                 db    2
.xdata$x:00001579                 db    0
.xdata$x:0000157A                 db    0
.xdata$x:0000157B                 db    0
.xdata$x:0000157C                 dd offset __unwindtable$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.xdata$x:00001580                 db    1
.xdata$x:00001581                 db    0
.xdata$x:00001582                 db    0
.xdata$x:00001583                 db    0
.xdata$x:00001584                 dd offset __tryblocktable$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z
.xdata$x:00001588                 db    0
.xdata$x:00001589                 db    0
.xdata$x:0000158A                 db    0
.xdata$x:0000158B                 db    0
.xdata$x:0000158C                 db    0
.xdata$x:0000158D                 db    0
.xdata$x:0000158E                 db    0
.xdata$x:0000158F                 db    0
.xdata$x:00001590                 db    0
.xdata$x:00001591                 db    0
.xdata$x:00001592                 db    0
.xdata$x:00001593                 db    0
.xdata$x:00001594                 db    1
.xdata$x:00001595                 db    0
.xdata$x:00001596                 db    0
.xdata$x:00001597                 db    0
.xdata$x:00001598 __catchsym$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$4 db    9
.xdata$x:00001598                                         ; DATA XREF: .xdata$x:00001570o
.xdata$x:00001599                 db    0
.xdata$x:0000159A                 db    0
.xdata$x:0000159B                 db    0
.xdata$x:0000159C                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000015A0                 db 0DCh ; _
.xdata$x:000015A1                 db 0FFh
.xdata$x:000015A2                 db 0FFh
.xdata$x:000015A3                 db 0FFh
.xdata$x:000015A4                 dd offset __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$0
.xdata$x:000015A8                 db    9
.xdata$x:000015A9                 db    0
.xdata$x:000015AA                 db    0
.xdata$x:000015AB                 db    0
.xdata$x:000015AC                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:000015B0                 db 0D0h ; -
.xdata$x:000015B1                 db 0FFh
.xdata$x:000015B2                 db 0FFh
.xdata$x:000015B3                 db 0FFh
.xdata$x:000015B4                 dd offset __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$1
.xdata$x:000015B8                 dd offset _kLenDirectBits32
.xdata$x:000015BC                 db    0
.xdata$x:000015BD                 db    0
.xdata$x:000015BE                 db    0
.xdata$x:000015BF                 db    0
.xdata$x:000015C0                 db    0
.xdata$x:000015C1                 db    0
.xdata$x:000015C2                 db    0
.xdata$x:000015C3                 db    0
.xdata$x:000015C4                 dd offset __catch$?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z$2
.xdata$x:000015C4 _xdata$x        ends
.xdata$x:000015C4
.rtc$TMZ:000015C8 ; ===========================================================================
.rtc$TMZ:000015C8
.rtc$TMZ:000015C8 ; Segment type: Pure data
.rtc$TMZ:000015C8 ; Segment permissions: Read
.rtc$TMZ:000015C8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000015C8                 assume cs:_rtc$TMZ
.rtc$TMZ:000015C8                 ;org 15C8h
.rtc$TMZ:000015C8 ; COMDAT (pick any)
.rtc$TMZ:000015C8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000015C8 _rtc$TMZ        ends
.rtc$TMZ:000015C8
.rtc$IMZ:000015CC ; ===========================================================================
.rtc$IMZ:000015CC
.rtc$IMZ:000015CC ; Segment type: Pure data
.rtc$IMZ:000015CC ; Segment permissions: Read
.rtc$IMZ:000015CC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000015CC                 assume cs:_rtc$IMZ
.rtc$IMZ:000015CC                 ;org 15CCh
.rtc$IMZ:000015CC ; COMDAT (pick any)
.rtc$IMZ:000015CC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000015CC _rtc$IMZ        ends
.rtc$IMZ:000015CC
.rdata$r:000015D0 ; ===========================================================================
.rdata$r:000015D0
.rdata$r:000015D0 ; Segment type: Pure data
.rdata$r:000015D0 ; Segment permissions: Read
.rdata$r:000015D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000015D0                 assume cs:_rdata$r
.rdata$r:000015D0                 ;org 15D0h
.rdata$r:000015D0 ; COMDAT (pick any)
.rdata$r:000015D0                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:000015D0 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000015D0 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000015D0                                         ; DATA XREF: .rdata:00001488o
.rdata$r:000015D1                 db    0
.rdata$r:000015D2                 db    0
.rdata$r:000015D3                 db    0
.rdata$r:000015D4                 db    0
.rdata$r:000015D5                 db    0
.rdata$r:000015D6                 db    0
.rdata$r:000015D7                 db    0
.rdata$r:000015D8                 db    0
.rdata$r:000015D9                 db    0
.rdata$r:000015DA                 db    0
.rdata$r:000015DB                 db    0
.rdata$r:000015DC                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:000015E0                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000015E0 _rdata$r        ends
.rdata$r:000015E0
.data:000015E4 ; ===========================================================================
.data:000015E4
.data:000015E4 ; Segment type: Pure data
.data:000015E4 ; Segment permissions: Read/Write
.data:000015E4 _data           segment dword public 'DATA' use32
.data:000015E4                 assume cs:_data
.data:000015E4                 ;org 15E4h
.data:000015E4 ; COMDAT (pick any)
.data:000015E4                 public ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.data:000015E4 ; class NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.data:000015E4 ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000015E4                                         ; DATA XREF: .rdata$r:000015DCo
.data:000015E4                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000015E4                                         ; const type_info::`vftable'
.data:000015E8                 db    0
.data:000015E9                 db    0
.data:000015EA                 db    0
.data:000015EB                 db    0
.data:000015EC                 db  2Eh ; .
.data:000015ED                 db  3Fh ; ?
.data:000015EE                 db  41h ; A
.data:000015EF                 db  56h ; V
.data:000015F0                 db  43h ; C
.data:000015F1                 db  43h ; C
.data:000015F2                 db  6Fh ; o
.data:000015F3                 db  64h ; d
.data:000015F4                 db  65h ; e
.data:000015F5                 db  72h ; r
.data:000015F6                 db  40h ; @
.data:000015F7                 db  4Eh ; N
.data:000015F8                 db  44h ; D
.data:000015F9                 db  65h ; e
.data:000015FA                 db  63h ; c
.data:000015FB                 db  6Fh ; o
.data:000015FC                 db  64h ; d
.data:000015FD                 db  65h ; e
.data:000015FE                 db  72h ; r
.data:000015FF                 db  40h ; @
.data:00001600                 db  4Eh ; N
.data:00001601                 db  44h ; D
.data:00001602                 db  65h ; e
.data:00001603                 db  66h ; f
.data:00001604                 db  6Ch ; l
.data:00001605                 db  61h ; a
.data:00001606                 db  74h ; t
.data:00001607                 db  65h ; e
.data:00001608                 db  40h ; @
.data:00001609                 db  4Eh ; N
.data:0000160A                 db  43h ; C
.data:0000160B                 db  6Fh ; o
.data:0000160C                 db  6Dh ; m
.data:0000160D                 db  70h ; p
.data:0000160E                 db  72h ; r
.data:0000160F                 db  65h ; e
.data:00001610                 db  73h ; s
.data:00001611                 db  73h ; s
.data:00001612                 db  40h ; @
.data:00001613                 db  40h ; @
.data:00001614                 db    0
.data:00001615                 align 4
.data:00001615 _data           ends
.data:00001615
.rdata$r:00001618 ; ===========================================================================
.rdata$r:00001618
.rdata$r:00001618 ; Segment type: Pure data
.rdata$r:00001618 ; Segment permissions: Read
.rdata$r:00001618 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001618                 assume cs:_rdata$r
.rdata$r:00001618                 ;org 1618h
.rdata$r:00001618 ; COMDAT (pick any)
.rdata$r:00001618                 public ??_R3CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00001618 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001618 ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:00001618                                         ; DATA XREF: .rdata$r:000015E0o
.rdata$r:00001618                                         ; .rdata$r:00001674o ...
.rdata$r:00001619                 db    0
.rdata$r:0000161A                 db    0
.rdata$r:0000161B                 db    0
.rdata$r:0000161C                 db    5
.rdata$r:0000161D                 db    0
.rdata$r:0000161E                 db    0
.rdata$r:0000161F                 db    0
.rdata$r:00001620                 db  0Ch
.rdata$r:00001621                 db    0
.rdata$r:00001622                 db    0
.rdata$r:00001623                 db    0
.rdata$r:00001624                 dd offset ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:00001624 _rdata$r        ends
.rdata$r:00001624
.rdata$r:00001628 ; ===========================================================================
.rdata$r:00001628
.rdata$r:00001628 ; Segment type: Pure data
.rdata$r:00001628 ; Segment permissions: Read
.rdata$r:00001628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001628                 assume cs:_rdata$r
.rdata$r:00001628                 ;org 1628h
.rdata$r:00001628 ; COMDAT (pick any)
.rdata$r:00001628                 public ??_R2CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00001628 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:00001628 ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00001628                                         ; DATA XREF: .rdata$r:00001624o
.rdata$r:00001628                                         ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000162C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001630                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00001634                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00001638                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000163C                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00001640                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00001644                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00001648                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000164C                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00001650                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00001654                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00001658                 db    0
.rdata$r:00001659                 align 4
.rdata$r:00001659 _rdata$r        ends
.rdata$r:00001659
.rdata$r:0000165C ; ===========================================================================
.rdata$r:0000165C
.rdata$r:0000165C ; Segment type: Pure data
.rdata$r:0000165C ; Segment permissions: Read
.rdata$r:0000165C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000165C                 assume cs:_rdata$r
.rdata$r:0000165C                 ;org 165Ch
.rdata$r:0000165C ; COMDAT (pick any)
.rdata$r:0000165C                 public ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000165C ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000165C ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:0000165C                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:0000165C                                         ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00001660                 db  0Bh
.rdata$r:00001661                 db    0
.rdata$r:00001662                 db    0
.rdata$r:00001663                 db    0
.rdata$r:00001664                 db    0
.rdata$r:00001665                 db    0
.rdata$r:00001666                 db    0
.rdata$r:00001667                 db    0
.rdata$r:00001668                 db 0FFh
.rdata$r:00001669                 db 0FFh
.rdata$r:0000166A                 db 0FFh
.rdata$r:0000166B                 db 0FFh
.rdata$r:0000166C                 db    0
.rdata$r:0000166D                 db    0
.rdata$r:0000166E                 db    0
.rdata$r:0000166F                 db    0
.rdata$r:00001670                 db  40h ; @
.rdata$r:00001671                 db    0
.rdata$r:00001672                 db    0
.rdata$r:00001673                 db    0
.rdata$r:00001674                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001674 _rdata$r        ends
.rdata$r:00001674
.rdata$r:00001678 ; ===========================================================================
.rdata$r:00001678
.rdata$r:00001678 ; Segment type: Pure data
.rdata$r:00001678 ; Segment permissions: Read
.rdata$r:00001678 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001678                 assume cs:_rdata$r
.rdata$r:00001678                 ;org 1678h
.rdata$r:00001678 ; COMDAT (pick any)
.rdata$r:00001678                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00001678 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001678 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00001678                                         ; DATA XREF: .rdata$r:0000162Co
.rdata$r:00001678                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00001678                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000167C                 db    1
.rdata$r:0000167D                 db    0
.rdata$r:0000167E                 db    0
.rdata$r:0000167F                 db    0
.rdata$r:00001680                 db    0
.rdata$r:00001681                 db    0
.rdata$r:00001682                 db    0
.rdata$r:00001683                 db    0
.rdata$r:00001684                 db 0FFh
.rdata$r:00001685                 db 0FFh
.rdata$r:00001686                 db 0FFh
.rdata$r:00001687                 db 0FFh
.rdata$r:00001688                 db    0
.rdata$r:00001689                 db    0
.rdata$r:0000168A                 db    0
.rdata$r:0000168B                 db    0
.rdata$r:0000168C                 db  40h ; @
.rdata$r:0000168D                 db    0
.rdata$r:0000168E                 db    0
.rdata$r:0000168F                 db    0
.rdata$r:00001690                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001690 _rdata$r        ends
.rdata$r:00001690
.data:00001694 ; ===========================================================================
.data:00001694
.data:00001694 ; Segment type: Pure data
.data:00001694 ; Segment permissions: Read/Write
.data:00001694 _data           segment dword public 'DATA' use32
.data:00001694                 assume cs:_data
.data:00001694                 ;org 1694h
.data:00001694 ; COMDAT (pick any)
.data:00001694                 public ??_R0?AUICompressCoder@@@8
.data:00001694 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00001694 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00001694                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001694                                         ; .rdata$r:00001F1Co
.data:00001694                                         ; const type_info::`vftable'
.data:00001698                 db    0
.data:00001699                 db    0
.data:0000169A                 db    0
.data:0000169B                 db    0
.data:0000169C                 db  2Eh ; .
.data:0000169D                 db  3Fh ; ?
.data:0000169E                 db  41h ; A
.data:0000169F                 db  55h ; U
.data:000016A0                 db  49h ; I
.data:000016A1                 db  43h ; C
.data:000016A2                 db  6Fh ; o
.data:000016A3                 db  6Dh ; m
.data:000016A4                 db  70h ; p
.data:000016A5                 db  72h ; r
.data:000016A6                 db  65h ; e
.data:000016A7                 db  73h ; s
.data:000016A8                 db  73h ; s
.data:000016A9                 db  43h ; C
.data:000016AA                 db  6Fh ; o
.data:000016AB                 db  64h ; d
.data:000016AC                 db  65h ; e
.data:000016AD                 db  72h ; r
.data:000016AE                 db  40h ; @
.data:000016AF                 db  40h ; @
.data:000016B0                 db    0
.data:000016B1                 align 4
.data:000016B1 _data           ends
.data:000016B1
.rdata$r:000016B4 ; ===========================================================================
.rdata$r:000016B4
.rdata$r:000016B4 ; Segment type: Pure data
.rdata$r:000016B4 ; Segment permissions: Read
.rdata$r:000016B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016B4                 assume cs:_rdata$r
.rdata$r:000016B4                 ;org 16B4h
.rdata$r:000016B4 ; COMDAT (pick any)
.rdata$r:000016B4                 public ??_R3ICompressCoder@@8
.rdata$r:000016B4 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016B4 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00001690o
.rdata$r:000016B4                                         ; .rdata$r:00001F20o
.rdata$r:000016B5                 db    0
.rdata$r:000016B6                 db    0
.rdata$r:000016B7                 db    0
.rdata$r:000016B8                 db    0
.rdata$r:000016B9                 db    0
.rdata$r:000016BA                 db    0
.rdata$r:000016BB                 db    0
.rdata$r:000016BC                 db    2
.rdata$r:000016BD                 db    0
.rdata$r:000016BE                 db    0
.rdata$r:000016BF                 db    0
.rdata$r:000016C0                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000016C0 _rdata$r        ends
.rdata$r:000016C0
.rdata$r:000016C4 ; ===========================================================================
.rdata$r:000016C4
.rdata$r:000016C4 ; Segment type: Pure data
.rdata$r:000016C4 ; Segment permissions: Read
.rdata$r:000016C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016C4                 assume cs:_rdata$r
.rdata$r:000016C4                 ;org 16C4h
.rdata$r:000016C4 ; COMDAT (pick any)
.rdata$r:000016C4                 public ??_R2ICompressCoder@@8
.rdata$r:000016C4 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000016C4 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000016C4                                         ; DATA XREF: .rdata$r:000016C0o
.rdata$r:000016C4                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000016C8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000016CC                 db    0
.rdata$r:000016CD                 align 10h
.rdata$r:000016CD _rdata$r        ends
.rdata$r:000016CD
.rdata$r:000016D0 ; ===========================================================================
.rdata$r:000016D0
.rdata$r:000016D0 ; Segment type: Pure data
.rdata$r:000016D0 ; Segment permissions: Read
.rdata$r:000016D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000016D0                 assume cs:_rdata$r
.rdata$r:000016D0                 ;org 16D0h
.rdata$r:000016D0 ; COMDAT (pick any)
.rdata$r:000016D0                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000016D0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000016D0 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000016D0                                         ; DATA XREF: .rdata$r:000016C8o
.rdata$r:000016D0                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000016D0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000016D4                 db    0
.rdata$r:000016D5                 db    0
.rdata$r:000016D6                 db    0
.rdata$r:000016D7                 db    0
.rdata$r:000016D8                 db    0
.rdata$r:000016D9                 db    0
.rdata$r:000016DA                 db    0
.rdata$r:000016DB                 db    0
.rdata$r:000016DC                 db 0FFh
.rdata$r:000016DD                 db 0FFh
.rdata$r:000016DE                 db 0FFh
.rdata$r:000016DF                 db 0FFh
.rdata$r:000016E0                 db    0
.rdata$r:000016E1                 db    0
.rdata$r:000016E2                 db    0
.rdata$r:000016E3                 db    0
.rdata$r:000016E4                 db  40h ; @
.rdata$r:000016E5                 db    0
.rdata$r:000016E6                 db    0
.rdata$r:000016E7                 db    0
.rdata$r:000016E8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000016E8 _rdata$r        ends
.rdata$r:000016E8
.data:000016EC ; ===========================================================================
.data:000016EC
.data:000016EC ; Segment type: Pure data
.data:000016EC ; Segment permissions: Read/Write
.data:000016EC _data           segment dword public 'DATA' use32
.data:000016EC                 assume cs:_data
.data:000016EC                 ;org 16ECh
.data:000016EC ; COMDAT (pick any)
.data:000016EC                 public ??_R0?AUIUnknown@@@8
.data:000016EC ; struct IUnknown `RTTI Type Descriptor'
.data:000016EC ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000016EC                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000016EC                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000016EC                                         ; const type_info::`vftable'
.data:000016F0                 db    0
.data:000016F1                 db    0
.data:000016F2                 db    0
.data:000016F3                 db    0
.data:000016F4                 db  2Eh ; .
.data:000016F5                 db  3Fh ; ?
.data:000016F6                 db  41h ; A
.data:000016F7                 db  55h ; U
.data:000016F8                 db  49h ; I
.data:000016F9                 db  55h ; U
.data:000016FA                 db  6Eh ; n
.data:000016FB                 db  6Bh ; k
.data:000016FC                 db  6Eh ; n
.data:000016FD                 db  6Fh ; o
.data:000016FE                 db  77h ; w
.data:000016FF                 db  6Eh ; n
.data:00001700                 db  40h ; @
.data:00001701                 db  40h ; @
.data:00001702                 db    0
.data:00001703                 align 4
.data:00001703 _data           ends
.data:00001703
.rdata$r:00001704 ; ===========================================================================
.rdata$r:00001704
.rdata$r:00001704 ; Segment type: Pure data
.rdata$r:00001704 ; Segment permissions: Read
.rdata$r:00001704 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001704                 assume cs:_rdata$r
.rdata$r:00001704                 ;org 1704h
.rdata$r:00001704 ; COMDAT (pick any)
.rdata$r:00001704                 public ??_R3IUnknown@@8
.rdata$r:00001704 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001704 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000016E8o
.rdata$r:00001704                                         ; .rdata$r:00001734o ...
.rdata$r:00001705                 db    0
.rdata$r:00001706                 db    0
.rdata$r:00001707                 db    0
.rdata$r:00001708                 db    0
.rdata$r:00001709                 db    0
.rdata$r:0000170A                 db    0
.rdata$r:0000170B                 db    0
.rdata$r:0000170C                 db    1
.rdata$r:0000170D                 db    0
.rdata$r:0000170E                 db    0
.rdata$r:0000170F                 db    0
.rdata$r:00001710                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001710 _rdata$r        ends
.rdata$r:00001710
.rdata$r:00001714 ; ===========================================================================
.rdata$r:00001714
.rdata$r:00001714 ; Segment type: Pure data
.rdata$r:00001714 ; Segment permissions: Read
.rdata$r:00001714 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001714                 assume cs:_rdata$r
.rdata$r:00001714                 ;org 1714h
.rdata$r:00001714 ; COMDAT (pick any)
.rdata$r:00001714                 public ??_R2IUnknown@@8
.rdata$r:00001714 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001714 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001714                                         ; DATA XREF: .rdata$r:00001710o
.rdata$r:00001714                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001718                 db    0
.rdata$r:00001719                 align 4
.rdata$r:00001719 _rdata$r        ends
.rdata$r:00001719
.rdata$r:0000171C ; ===========================================================================
.rdata$r:0000171C
.rdata$r:0000171C ; Segment type: Pure data
.rdata$r:0000171C ; Segment permissions: Read
.rdata$r:0000171C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000171C                 assume cs:_rdata$r
.rdata$r:0000171C                 ;org 171Ch
.rdata$r:0000171C ; COMDAT (pick any)
.rdata$r:0000171C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:0000171C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:0000171C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000171C                                         ; DATA XREF: .rdata$r:00001630o
.rdata$r:0000171C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001720                 db    0
.rdata$r:00001721                 db    0
.rdata$r:00001722                 db    0
.rdata$r:00001723                 db    0
.rdata$r:00001724                 db    0
.rdata$r:00001725                 db    0
.rdata$r:00001726                 db    0
.rdata$r:00001727                 db    0
.rdata$r:00001728                 db 0FFh
.rdata$r:00001729                 db 0FFh
.rdata$r:0000172A                 db 0FFh
.rdata$r:0000172B                 db 0FFh
.rdata$r:0000172C                 db    0
.rdata$r:0000172D                 db    0
.rdata$r:0000172E                 db    0
.rdata$r:0000172F                 db    0
.rdata$r:00001730                 db  42h ; B
.rdata$r:00001731                 db    0
.rdata$r:00001732                 db    0
.rdata$r:00001733                 db    0
.rdata$r:00001734                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001734 _rdata$r        ends
.rdata$r:00001734
.rdata$r:00001738 ; ===========================================================================
.rdata$r:00001738
.rdata$r:00001738 ; Segment type: Pure data
.rdata$r:00001738 ; Segment permissions: Read
.rdata$r:00001738 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001738                 assume cs:_rdata$r
.rdata$r:00001738                 ;org 1738h
.rdata$r:00001738 ; COMDAT (pick any)
.rdata$r:00001738                 public ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00001738 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00001738 ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00001738                                         ; DATA XREF: .rdata$r:00001634o
.rdata$r:00001738                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000173C                 db    1
.rdata$r:0000173D                 db    0
.rdata$r:0000173E                 db    0
.rdata$r:0000173F                 db    0
.rdata$r:00001740                 db    4
.rdata$r:00001741                 db    0
.rdata$r:00001742                 db    0
.rdata$r:00001743                 db    0
.rdata$r:00001744                 db 0FFh
.rdata$r:00001745                 db 0FFh
.rdata$r:00001746                 db 0FFh
.rdata$r:00001747                 db 0FFh
.rdata$r:00001748                 db    0
.rdata$r:00001749                 db    0
.rdata$r:0000174A                 db    0
.rdata$r:0000174B                 db    0
.rdata$r:0000174C                 db  40h ; @
.rdata$r:0000174D                 db    0
.rdata$r:0000174E                 db    0
.rdata$r:0000174F                 db    0
.rdata$r:00001750                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001750 _rdata$r        ends
.rdata$r:00001750
.data:00001754 ; ===========================================================================
.data:00001754
.data:00001754 ; Segment type: Pure data
.data:00001754 ; Segment permissions: Read/Write
.data:00001754 _data           segment dword public 'DATA' use32
.data:00001754                 assume cs:_data
.data:00001754                 ;org 1754h
.data:00001754 ; COMDAT (pick any)
.data:00001754                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00001754 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00001754 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00001754                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00001754                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001754                                         ; const type_info::`vftable'
.data:00001758                 db    0
.data:00001759                 db    0
.data:0000175A                 db    0
.data:0000175B                 db    0
.data:0000175C                 db  2Eh ; .
.data:0000175D                 db  3Fh ; ?
.data:0000175E                 db  41h ; A
.data:0000175F                 db  55h ; U
.data:00001760                 db  49h ; I
.data:00001761                 db  43h ; C
.data:00001762                 db  6Fh ; o
.data:00001763                 db  6Dh ; m
.data:00001764                 db  70h ; p
.data:00001765                 db  72h ; r
.data:00001766                 db  65h ; e
.data:00001767                 db  73h ; s
.data:00001768                 db  73h ; s
.data:00001769                 db  47h ; G
.data:0000176A                 db  65h ; e
.data:0000176B                 db  74h ; t
.data:0000176C                 db  49h ; I
.data:0000176D                 db  6Eh ; n
.data:0000176E                 db  53h ; S
.data:0000176F                 db  74h ; t
.data:00001770                 db  72h ; r
.data:00001771                 db  65h ; e
.data:00001772                 db  61h ; a
.data:00001773                 db  6Dh ; m
.data:00001774                 db  50h ; P
.data:00001775                 db  72h ; r
.data:00001776                 db  6Fh ; o
.data:00001777                 db  63h ; c
.data:00001778                 db  65h ; e
.data:00001779                 db  73h ; s
.data:0000177A                 db  73h ; s
.data:0000177B                 db  65h ; e
.data:0000177C                 db  64h ; d
.data:0000177D                 db  53h ; S
.data:0000177E                 db  69h ; i
.data:0000177F                 db  7Ah ; z
.data:00001780                 db  65h ; e
.data:00001781                 db  40h ; @
.data:00001782                 db  40h ; @
.data:00001783                 db    0
.data:00001783 _data           ends
.data:00001783
.rdata$r:00001784 ; ===========================================================================
.rdata$r:00001784
.rdata$r:00001784 ; Segment type: Pure data
.rdata$r:00001784 ; Segment permissions: Read
.rdata$r:00001784 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001784                 assume cs:_rdata$r
.rdata$r:00001784                 ;org 1784h
.rdata$r:00001784 ; COMDAT (pick any)
.rdata$r:00001784                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00001784 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001784 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00001784                                         ; DATA XREF: .rdata$r:00001750o
.rdata$r:00001784                                         ; .rdata$r:000017B8o ...
.rdata$r:00001785                 db    0
.rdata$r:00001786                 db    0
.rdata$r:00001787                 db    0
.rdata$r:00001788                 db    0
.rdata$r:00001789                 db    0
.rdata$r:0000178A                 db    0
.rdata$r:0000178B                 db    0
.rdata$r:0000178C                 db    2
.rdata$r:0000178D                 db    0
.rdata$r:0000178E                 db    0
.rdata$r:0000178F                 db    0
.rdata$r:00001790                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00001790 _rdata$r        ends
.rdata$r:00001790
.rdata$r:00001794 ; ===========================================================================
.rdata$r:00001794
.rdata$r:00001794 ; Segment type: Pure data
.rdata$r:00001794 ; Segment permissions: Read
.rdata$r:00001794 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001794                 assume cs:_rdata$r
.rdata$r:00001794                 ;org 1794h
.rdata$r:00001794 ; COMDAT (pick any)
.rdata$r:00001794                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00001794 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00001794 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00001794                                         ; DATA XREF: .rdata$r:00001790o
.rdata$r:00001794                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001798                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000179C                 db    0
.rdata$r:0000179D                 align 10h
.rdata$r:0000179D _rdata$r        ends
.rdata$r:0000179D
.rdata$r:000017A0 ; ===========================================================================
.rdata$r:000017A0
.rdata$r:000017A0 ; Segment type: Pure data
.rdata$r:000017A0 ; Segment permissions: Read
.rdata$r:000017A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017A0                 assume cs:_rdata$r
.rdata$r:000017A0                 ;org 17A0h
.rdata$r:000017A0 ; COMDAT (pick any)
.rdata$r:000017A0                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000017A0 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000017A0 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000017A0                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:000017A0                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000017A4                 db    1
.rdata$r:000017A5                 db    0
.rdata$r:000017A6                 db    0
.rdata$r:000017A7                 db    0
.rdata$r:000017A8                 db    0
.rdata$r:000017A9                 db    0
.rdata$r:000017AA                 db    0
.rdata$r:000017AB                 db    0
.rdata$r:000017AC                 db 0FFh
.rdata$r:000017AD                 db 0FFh
.rdata$r:000017AE                 db 0FFh
.rdata$r:000017AF                 db 0FFh
.rdata$r:000017B0                 db    0
.rdata$r:000017B1                 db    0
.rdata$r:000017B2                 db    0
.rdata$r:000017B3                 db    0
.rdata$r:000017B4                 db  40h ; @
.rdata$r:000017B5                 db    0
.rdata$r:000017B6                 db    0
.rdata$r:000017B7                 db    0
.rdata$r:000017B8                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017B8 _rdata$r        ends
.rdata$r:000017B8
.rdata$r:000017BC ; ===========================================================================
.rdata$r:000017BC
.rdata$r:000017BC ; Segment type: Pure data
.rdata$r:000017BC ; Segment permissions: Read
.rdata$r:000017BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017BC                 assume cs:_rdata$r
.rdata$r:000017BC                 ;org 17BCh
.rdata$r:000017BC ; COMDAT (pick any)
.rdata$r:000017BC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000017BC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000017BC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000017BC                                         ; DATA XREF: .rdata$r:00001638o
.rdata$r:000017BC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000017C0                 db    0
.rdata$r:000017C1                 db    0
.rdata$r:000017C2                 db    0
.rdata$r:000017C3                 db    0
.rdata$r:000017C4                 db    4
.rdata$r:000017C5                 db    0
.rdata$r:000017C6                 db    0
.rdata$r:000017C7                 db    0
.rdata$r:000017C8                 db 0FFh
.rdata$r:000017C9                 db 0FFh
.rdata$r:000017CA                 db 0FFh
.rdata$r:000017CB                 db 0FFh
.rdata$r:000017CC                 db    0
.rdata$r:000017CD                 db    0
.rdata$r:000017CE                 db    0
.rdata$r:000017CF                 db    0
.rdata$r:000017D0                 db  42h ; B
.rdata$r:000017D1                 db    0
.rdata$r:000017D2                 db    0
.rdata$r:000017D3                 db    0
.rdata$r:000017D4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017D4 _rdata$r        ends
.rdata$r:000017D4
.rdata$r:000017D8 ; ===========================================================================
.rdata$r:000017D8
.rdata$r:000017D8 ; Segment type: Pure data
.rdata$r:000017D8 ; Segment permissions: Read
.rdata$r:000017D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000017D8                 assume cs:_rdata$r
.rdata$r:000017D8                 ;org 17D8h
.rdata$r:000017D8 ; COMDAT (pick any)
.rdata$r:000017D8                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:000017D8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000017D8 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000017D8                                         ; DATA XREF: .rdata$r:0000163Co
.rdata$r:000017D8                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000017DC                 db    1
.rdata$r:000017DD                 db    0
.rdata$r:000017DE                 db    0
.rdata$r:000017DF                 db    0
.rdata$r:000017E0                 db    8
.rdata$r:000017E1                 db    0
.rdata$r:000017E2                 db    0
.rdata$r:000017E3                 db    0
.rdata$r:000017E4                 db 0FFh
.rdata$r:000017E5                 db 0FFh
.rdata$r:000017E6                 db 0FFh
.rdata$r:000017E7                 db 0FFh
.rdata$r:000017E8                 db    0
.rdata$r:000017E9                 db    0
.rdata$r:000017EA                 db    0
.rdata$r:000017EB                 db    0
.rdata$r:000017EC                 db  40h ; @
.rdata$r:000017ED                 db    0
.rdata$r:000017EE                 db    0
.rdata$r:000017EF                 db    0
.rdata$r:000017F0                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000017F0 _rdata$r        ends
.rdata$r:000017F0
.data:000017F4 ; ===========================================================================
.data:000017F4
.data:000017F4 ; Segment type: Pure data
.data:000017F4 ; Segment permissions: Read/Write
.data:000017F4 _data           segment dword public 'DATA' use32
.data:000017F4                 assume cs:_data
.data:000017F4                 ;org 17F4h
.data:000017F4 ; COMDAT (pick any)
.data:000017F4                 public ??_R0?AUICompressSetInStream@@@8
.data:000017F4 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000017F4 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000017F4                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000017F4                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000017F4                                         ; const type_info::`vftable'
.data:000017F8                 db    0
.data:000017F9                 db    0
.data:000017FA                 db    0
.data:000017FB                 db    0
.data:000017FC                 db  2Eh ; .
.data:000017FD                 db  3Fh ; ?
.data:000017FE                 db  41h ; A
.data:000017FF                 db  55h ; U
.data:00001800                 db  49h ; I
.data:00001801                 db  43h ; C
.data:00001802                 db  6Fh ; o
.data:00001803                 db  6Dh ; m
.data:00001804                 db  70h ; p
.data:00001805                 db  72h ; r
.data:00001806                 db  65h ; e
.data:00001807                 db  73h ; s
.data:00001808                 db  73h ; s
.data:00001809                 db  53h ; S
.data:0000180A                 db  65h ; e
.data:0000180B                 db  74h ; t
.data:0000180C                 db  49h ; I
.data:0000180D                 db  6Eh ; n
.data:0000180E                 db  53h ; S
.data:0000180F                 db  74h ; t
.data:00001810                 db  72h ; r
.data:00001811                 db  65h ; e
.data:00001812                 db  61h ; a
.data:00001813                 db  6Dh ; m
.data:00001814                 db  40h ; @
.data:00001815                 db  40h ; @
.data:00001816                 db    0
.data:00001817                 align 4
.data:00001817 _data           ends
.data:00001817
.rdata$r:00001818 ; ===========================================================================
.rdata$r:00001818
.rdata$r:00001818 ; Segment type: Pure data
.rdata$r:00001818 ; Segment permissions: Read
.rdata$r:00001818 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001818                 assume cs:_rdata$r
.rdata$r:00001818                 ;org 1818h
.rdata$r:00001818 ; COMDAT (pick any)
.rdata$r:00001818                 public ??_R3ICompressSetInStream@@8
.rdata$r:00001818 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001818 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000017F0o
.rdata$r:00001818                                         ; .rdata$r:0000184Co ...
.rdata$r:00001819                 db    0
.rdata$r:0000181A                 db    0
.rdata$r:0000181B                 db    0
.rdata$r:0000181C                 db    0
.rdata$r:0000181D                 db    0
.rdata$r:0000181E                 db    0
.rdata$r:0000181F                 db    0
.rdata$r:00001820                 db    2
.rdata$r:00001821                 db    0
.rdata$r:00001822                 db    0
.rdata$r:00001823                 db    0
.rdata$r:00001824                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001824 _rdata$r        ends
.rdata$r:00001824
.rdata$r:00001828 ; ===========================================================================
.rdata$r:00001828
.rdata$r:00001828 ; Segment type: Pure data
.rdata$r:00001828 ; Segment permissions: Read
.rdata$r:00001828 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001828                 assume cs:_rdata$r
.rdata$r:00001828                 ;org 1828h
.rdata$r:00001828 ; COMDAT (pick any)
.rdata$r:00001828                 public ??_R2ICompressSetInStream@@8
.rdata$r:00001828 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00001828 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001828                                         ; DATA XREF: .rdata$r:00001824o
.rdata$r:00001828                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000182C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001830                 db    0
.rdata$r:00001831                 align 4
.rdata$r:00001831 _rdata$r        ends
.rdata$r:00001831
.rdata$r:00001834 ; ===========================================================================
.rdata$r:00001834
.rdata$r:00001834 ; Segment type: Pure data
.rdata$r:00001834 ; Segment permissions: Read
.rdata$r:00001834 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001834                 assume cs:_rdata$r
.rdata$r:00001834                 ;org 1834h
.rdata$r:00001834 ; COMDAT (pick any)
.rdata$r:00001834                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00001834 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001834 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00001834                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00001834                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001838                 db    1
.rdata$r:00001839                 db    0
.rdata$r:0000183A                 db    0
.rdata$r:0000183B                 db    0
.rdata$r:0000183C                 db    0
.rdata$r:0000183D                 db    0
.rdata$r:0000183E                 db    0
.rdata$r:0000183F                 db    0
.rdata$r:00001840                 db 0FFh
.rdata$r:00001841                 db 0FFh
.rdata$r:00001842                 db 0FFh
.rdata$r:00001843                 db 0FFh
.rdata$r:00001844                 db    0
.rdata$r:00001845                 db    0
.rdata$r:00001846                 db    0
.rdata$r:00001847                 db    0
.rdata$r:00001848                 db  40h ; @
.rdata$r:00001849                 db    0
.rdata$r:0000184A                 db    0
.rdata$r:0000184B                 db    0
.rdata$r:0000184C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000184C _rdata$r        ends
.rdata$r:0000184C
.rdata$r:00001850 ; ===========================================================================
.rdata$r:00001850
.rdata$r:00001850 ; Segment type: Pure data
.rdata$r:00001850 ; Segment permissions: Read
.rdata$r:00001850 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001850                 assume cs:_rdata$r
.rdata$r:00001850                 ;org 1850h
.rdata$r:00001850 ; COMDAT (pick any)
.rdata$r:00001850                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00001850 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00001850 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001850                                         ; DATA XREF: .rdata$r:00001640o
.rdata$r:00001850                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001854                 align 8
.rdata$r:00001858                 db    8
.rdata$r:00001859                 db    0
.rdata$r:0000185A                 db    0
.rdata$r:0000185B                 db    0
.rdata$r:0000185C                 db 0FFh
.rdata$r:0000185D                 db 0FFh
.rdata$r:0000185E                 db 0FFh
.rdata$r:0000185F                 db 0FFh
.rdata$r:00001860                 db    0
.rdata$r:00001861                 db    0
.rdata$r:00001862                 db    0
.rdata$r:00001863                 db    0
.rdata$r:00001864                 db  42h ; B
.rdata$r:00001865                 db    0
.rdata$r:00001866                 db    0
.rdata$r:00001867                 db    0
.rdata$r:00001868                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001868 _rdata$r        ends
.rdata$r:00001868
.rdata$r:0000186C ; ===========================================================================
.rdata$r:0000186C
.rdata$r:0000186C ; Segment type: Pure data
.rdata$r:0000186C ; Segment permissions: Read
.rdata$r:0000186C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000186C                 assume cs:_rdata$r
.rdata$r:0000186C                 ;org 186Ch
.rdata$r:0000186C ; COMDAT (pick any)
.rdata$r:0000186C                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000186C ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000186C ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:0000186C                                         ; DATA XREF: .rdata$r:00001644o
.rdata$r:0000186C                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:00001870                 db    1
.rdata$r:00001871                 db    0
.rdata$r:00001872                 db    0
.rdata$r:00001873                 db    0
.rdata$r:00001874                 db  0Ch
.rdata$r:00001875                 db    0
.rdata$r:00001876                 db    0
.rdata$r:00001877                 db    0
.rdata$r:00001878                 db 0FFh
.rdata$r:00001879                 db 0FFh
.rdata$r:0000187A                 db 0FFh
.rdata$r:0000187B                 db 0FFh
.rdata$r:0000187C                 db    0
.rdata$r:0000187D                 db    0
.rdata$r:0000187E                 db    0
.rdata$r:0000187F                 db    0
.rdata$r:00001880                 db  40h ; @
.rdata$r:00001881                 db    0
.rdata$r:00001882                 db    0
.rdata$r:00001883                 db    0
.rdata$r:00001884                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001884 _rdata$r        ends
.rdata$r:00001884
.data:00001888 ; ===========================================================================
.data:00001888
.data:00001888 ; Segment type: Pure data
.data:00001888 ; Segment permissions: Read/Write
.data:00001888 _data           segment dword public 'DATA' use32
.data:00001888                 assume cs:_data
.data:00001888                 ;org 1888h
.data:00001888 ; COMDAT (pick any)
.data:00001888                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00001888 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00001888 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00001888                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00001888                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001888                                         ; const type_info::`vftable'
.data:0000188C                 align 10h
.data:00001890 a_?auicompresss db '.?AUICompressSetOutStreamSize@@',0
.data:00001890 _data           ends
.data:00001890
.rdata$r:000018B0 ; ===========================================================================
.rdata$r:000018B0
.rdata$r:000018B0 ; Segment type: Pure data
.rdata$r:000018B0 ; Segment permissions: Read
.rdata$r:000018B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018B0                 assume cs:_rdata$r
.rdata$r:000018B0                 ;org 18B0h
.rdata$r:000018B0 ; COMDAT (pick any)
.rdata$r:000018B0                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:000018B0 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018B0 ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00001884o
.rdata$r:000018B0                                         ; .rdata$r:000018E4o ...
.rdata$r:000018B1                 db    0
.rdata$r:000018B2                 db    0
.rdata$r:000018B3                 db    0
.rdata$r:000018B4                 db    0
.rdata$r:000018B5                 db    0
.rdata$r:000018B6                 db    0
.rdata$r:000018B7                 db    0
.rdata$r:000018B8                 db    2
.rdata$r:000018B9                 db    0
.rdata$r:000018BA                 db    0
.rdata$r:000018BB                 db    0
.rdata$r:000018BC                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000018BC _rdata$r        ends
.rdata$r:000018BC
.rdata$r:000018C0 ; ===========================================================================
.rdata$r:000018C0
.rdata$r:000018C0 ; Segment type: Pure data
.rdata$r:000018C0 ; Segment permissions: Read
.rdata$r:000018C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018C0                 assume cs:_rdata$r
.rdata$r:000018C0                 ;org 18C0h
.rdata$r:000018C0 ; COMDAT (pick any)
.rdata$r:000018C0                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:000018C0 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:000018C0 ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000018C0                                         ; DATA XREF: .rdata$r:000018BCo
.rdata$r:000018C0                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000018C4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000018C8                 db    0
.rdata$r:000018C9                 align 4
.rdata$r:000018C9 _rdata$r        ends
.rdata$r:000018C9
.rdata$r:000018CC ; ===========================================================================
.rdata$r:000018CC
.rdata$r:000018CC ; Segment type: Pure data
.rdata$r:000018CC ; Segment permissions: Read
.rdata$r:000018CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018CC                 assume cs:_rdata$r
.rdata$r:000018CC                 ;org 18CCh
.rdata$r:000018CC ; COMDAT (pick any)
.rdata$r:000018CC                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:000018CC ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000018CC ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:000018CC                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:000018CC                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:000018D0                 db    1
.rdata$r:000018D1                 db    0
.rdata$r:000018D2                 db    0
.rdata$r:000018D3                 db    0
.rdata$r:000018D4                 db    0
.rdata$r:000018D5                 db    0
.rdata$r:000018D6                 db    0
.rdata$r:000018D7                 db    0
.rdata$r:000018D8                 db 0FFh
.rdata$r:000018D9                 db 0FFh
.rdata$r:000018DA                 db 0FFh
.rdata$r:000018DB                 db 0FFh
.rdata$r:000018DC                 db    0
.rdata$r:000018DD                 db    0
.rdata$r:000018DE                 db    0
.rdata$r:000018DF                 db    0
.rdata$r:000018E0                 db  40h ; @
.rdata$r:000018E1                 db    0
.rdata$r:000018E2                 db    0
.rdata$r:000018E3                 db    0
.rdata$r:000018E4                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000018E4 _rdata$r        ends
.rdata$r:000018E4
.rdata$r:000018E8 ; ===========================================================================
.rdata$r:000018E8
.rdata$r:000018E8 ; Segment type: Pure data
.rdata$r:000018E8 ; Segment permissions: Read
.rdata$r:000018E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000018E8                 assume cs:_rdata$r
.rdata$r:000018E8                 ;org 18E8h
.rdata$r:000018E8 ; COMDAT (pick any)
.rdata$r:000018E8                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000018E8 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000018E8 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000018E8                                         ; DATA XREF: .rdata$r:00001648o
.rdata$r:000018E8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000018EC                 align 10h
.rdata$r:000018F0                 db  0Ch
.rdata$r:000018F1                 db    0
.rdata$r:000018F2                 db    0
.rdata$r:000018F3                 db    0
.rdata$r:000018F4                 db 0FFh
.rdata$r:000018F5                 db 0FFh
.rdata$r:000018F6                 db 0FFh
.rdata$r:000018F7                 db 0FFh
.rdata$r:000018F8                 db    0
.rdata$r:000018F9                 db    0
.rdata$r:000018FA                 db    0
.rdata$r:000018FB                 db    0
.rdata$r:000018FC                 db  42h ; B
.rdata$r:000018FD                 db    0
.rdata$r:000018FE                 db    0
.rdata$r:000018FF                 db    0
.rdata$r:00001900                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001900 _rdata$r        ends
.rdata$r:00001900
.rdata$r:00001904 ; ===========================================================================
.rdata$r:00001904
.rdata$r:00001904 ; Segment type: Pure data
.rdata$r:00001904 ; Segment permissions: Read
.rdata$r:00001904 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001904                 assume cs:_rdata$r
.rdata$r:00001904                 ;org 1904h
.rdata$r:00001904 ; COMDAT (pick any)
.rdata$r:00001904                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:00001904 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00001904 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001904                                         ; DATA XREF: .rdata$r:0000164Co
.rdata$r:00001904                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001908                 db    1
.rdata$r:00001909                 db    0
.rdata$r:0000190A                 db    0
.rdata$r:0000190B                 db    0
.rdata$r:0000190C                 db  10h
.rdata$r:0000190D                 db    0
.rdata$r:0000190E                 db    0
.rdata$r:0000190F                 db    0
.rdata$r:00001910                 db 0FFh
.rdata$r:00001911                 db 0FFh
.rdata$r:00001912                 db 0FFh
.rdata$r:00001913                 db 0FFh
.rdata$r:00001914                 db    0
.rdata$r:00001915                 db    0
.rdata$r:00001916                 db    0
.rdata$r:00001917                 db    0
.rdata$r:00001918                 db  40h ; @
.rdata$r:00001919                 db    0
.rdata$r:0000191A                 db    0
.rdata$r:0000191B                 db    0
.rdata$r:0000191C                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000191C _rdata$r        ends
.rdata$r:0000191C
.data:00001920 ; ===========================================================================
.data:00001920
.data:00001920 ; Segment type: Pure data
.data:00001920 ; Segment permissions: Read/Write
.data:00001920 _data           segment dword public 'DATA' use32
.data:00001920                 assume cs:_data
.data:00001920                 ;org 1920h
.data:00001920 ; COMDAT (pick any)
.data:00001920                 public ??_R0?AUISequentialInStream@@@8
.data:00001920 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001920 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001920                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00001920                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00001920                                         ; const type_info::`vftable'
.data:00001924                 align 8
.data:00001928 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00001942                 align 4
.data:00001942 _data           ends
.data:00001942
.rdata$r:00001944 ; ===========================================================================
.rdata$r:00001944
.rdata$r:00001944 ; Segment type: Pure data
.rdata$r:00001944 ; Segment permissions: Read
.rdata$r:00001944 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001944                 assume cs:_rdata$r
.rdata$r:00001944                 ;org 1944h
.rdata$r:00001944 ; COMDAT (pick any)
.rdata$r:00001944                 public ??_R3ISequentialInStream@@8
.rdata$r:00001944 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001944 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:0000191Co
.rdata$r:00001944                                         ; .rdata$r:00001978o ...
.rdata$r:00001945                 db    0
.rdata$r:00001946                 db    0
.rdata$r:00001947                 db    0
.rdata$r:00001948                 db    0
.rdata$r:00001949                 db    0
.rdata$r:0000194A                 db    0
.rdata$r:0000194B                 db    0
.rdata$r:0000194C                 db    2
.rdata$r:0000194D                 db    0
.rdata$r:0000194E                 db    0
.rdata$r:0000194F                 db    0
.rdata$r:00001950                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001950 _rdata$r        ends
.rdata$r:00001950
.rdata$r:00001954 ; ===========================================================================
.rdata$r:00001954
.rdata$r:00001954 ; Segment type: Pure data
.rdata$r:00001954 ; Segment permissions: Read
.rdata$r:00001954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001954                 assume cs:_rdata$r
.rdata$r:00001954                 ;org 1954h
.rdata$r:00001954 ; COMDAT (pick any)
.rdata$r:00001954                 public ??_R2ISequentialInStream@@8
.rdata$r:00001954 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001954 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001954                                         ; DATA XREF: .rdata$r:00001950o
.rdata$r:00001954                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001958                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000195C                 db    0
.rdata$r:0000195D                 align 10h
.rdata$r:0000195D _rdata$r        ends
.rdata$r:0000195D
.rdata$r:00001960 ; ===========================================================================
.rdata$r:00001960
.rdata$r:00001960 ; Segment type: Pure data
.rdata$r:00001960 ; Segment permissions: Read
.rdata$r:00001960 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001960                 assume cs:_rdata$r
.rdata$r:00001960                 ;org 1960h
.rdata$r:00001960 ; COMDAT (pick any)
.rdata$r:00001960                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001960 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001960 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00001960                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00001960                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00001964                 db    1
.rdata$r:00001965                 db    0
.rdata$r:00001966                 db    0
.rdata$r:00001967                 db    0
.rdata$r:00001968                 db    0
.rdata$r:00001969                 db    0
.rdata$r:0000196A                 db    0
.rdata$r:0000196B                 db    0
.rdata$r:0000196C                 db 0FFh
.rdata$r:0000196D                 db 0FFh
.rdata$r:0000196E                 db 0FFh
.rdata$r:0000196F                 db 0FFh
.rdata$r:00001970                 db    0
.rdata$r:00001971                 db    0
.rdata$r:00001972                 db    0
.rdata$r:00001973                 db    0
.rdata$r:00001974                 db  40h ; @
.rdata$r:00001975                 db    0
.rdata$r:00001976                 db    0
.rdata$r:00001977                 db    0
.rdata$r:00001978                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001978 _rdata$r        ends
.rdata$r:00001978
.rdata$r:0000197C ; ===========================================================================
.rdata$r:0000197C
.rdata$r:0000197C ; Segment type: Pure data
.rdata$r:0000197C ; Segment permissions: Read
.rdata$r:0000197C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000197C                 assume cs:_rdata$r
.rdata$r:0000197C                 ;org 197Ch
.rdata$r:0000197C ; COMDAT (pick any)
.rdata$r:0000197C                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:0000197C ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:0000197C ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000197C                                         ; DATA XREF: .rdata$r:00001650o
.rdata$r:0000197C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001980                 db    0
.rdata$r:00001981                 db    0
.rdata$r:00001982                 db    0
.rdata$r:00001983                 db    0
.rdata$r:00001984                 db  10h
.rdata$r:00001985                 db    0
.rdata$r:00001986                 db    0
.rdata$r:00001987                 db    0
.rdata$r:00001988                 db 0FFh
.rdata$r:00001989                 db 0FFh
.rdata$r:0000198A                 db 0FFh
.rdata$r:0000198B                 db 0FFh
.rdata$r:0000198C                 db    0
.rdata$r:0000198D                 db    0
.rdata$r:0000198E                 db    0
.rdata$r:0000198F                 db    0
.rdata$r:00001990                 db  42h ; B
.rdata$r:00001991                 db    0
.rdata$r:00001992                 db    0
.rdata$r:00001993                 db    0
.rdata$r:00001994                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001994 _rdata$r        ends
.rdata$r:00001994
.rdata$r:00001998 ; ===========================================================================
.rdata$r:00001998
.rdata$r:00001998 ; Segment type: Pure data
.rdata$r:00001998 ; Segment permissions: Read
.rdata$r:00001998 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001998                 assume cs:_rdata$r
.rdata$r:00001998                 ;org 1998h
.rdata$r:00001998 ; COMDAT (pick any)
.rdata$r:00001998                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:00001998 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:00001998 ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00001998                                         ; DATA XREF: .rdata$r:00001654o
.rdata$r:00001998                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000199C                 align 10h
.rdata$r:000019A0                 db  14h
.rdata$r:000019A1                 db    0
.rdata$r:000019A2                 db    0
.rdata$r:000019A3                 db    0
.rdata$r:000019A4                 db 0FFh
.rdata$r:000019A5                 db 0FFh
.rdata$r:000019A6                 db 0FFh
.rdata$r:000019A7                 db 0FFh
.rdata$r:000019A8                 db    0
.rdata$r:000019A9                 db    0
.rdata$r:000019AA                 db    0
.rdata$r:000019AB                 db    0
.rdata$r:000019AC                 db  40h ; @
.rdata$r:000019AD                 db    0
.rdata$r:000019AE                 db    0
.rdata$r:000019AF                 db    0
.rdata$r:000019B0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019B0 _rdata$r        ends
.rdata$r:000019B0
.data:000019B4 ; ===========================================================================
.data:000019B4
.data:000019B4 ; Segment type: Pure data
.data:000019B4 ; Segment permissions: Read/Write
.data:000019B4 _data           segment dword public 'DATA' use32
.data:000019B4                 assume cs:_data
.data:000019B4                 ;org 19B4h
.data:000019B4 ; COMDAT (pick any)
.data:000019B4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000019B4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000019B4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000019B4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:000019B4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000019B4                                         ; const type_info::`vftable'
.data:000019B8                 db    0
.data:000019B9                 db    0
.data:000019BA                 db    0
.data:000019BB                 db    0
.data:000019BC                 db  2Eh ; .
.data:000019BD                 db  3Fh ; ?
.data:000019BE                 db  41h ; A
.data:000019BF                 db  56h ; V
.data:000019C0                 db  43h ; C
.data:000019C1                 db  4Dh ; M
.data:000019C2                 db  79h ; y
.data:000019C3                 db  55h ; U
.data:000019C4                 db  6Eh ; n
.data:000019C5                 db  6Bh ; k
.data:000019C6                 db  6Eh ; n
.data:000019C7                 db  6Fh ; o
.data:000019C8                 db  77h ; w
.data:000019C9                 db  6Eh ; n
.data:000019CA                 db  49h ; I
.data:000019CB                 db  6Dh ; m
.data:000019CC                 db  70h ; p
.data:000019CD                 db  40h ; @
.data:000019CE                 db  40h ; @
.data:000019CF                 db    0
.data:000019CF _data           ends
.data:000019CF
.rdata$r:000019D0 ; ===========================================================================
.rdata$r:000019D0
.rdata$r:000019D0 ; Segment type: Pure data
.rdata$r:000019D0 ; Segment permissions: Read
.rdata$r:000019D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019D0                 assume cs:_rdata$r
.rdata$r:000019D0                 ;org 19D0h
.rdata$r:000019D0 ; COMDAT (pick any)
.rdata$r:000019D0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000019D0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000019D0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000019B0o
.rdata$r:000019D0                                         ; .rdata$r:00001A00o
.rdata$r:000019D1                 db    0
.rdata$r:000019D2                 db    0
.rdata$r:000019D3                 db    0
.rdata$r:000019D4                 db    0
.rdata$r:000019D5                 db    0
.rdata$r:000019D6                 db    0
.rdata$r:000019D7                 db    0
.rdata$r:000019D8                 db    1
.rdata$r:000019D9                 db    0
.rdata$r:000019DA                 db    0
.rdata$r:000019DB                 db    0
.rdata$r:000019DC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000019DC _rdata$r        ends
.rdata$r:000019DC
.rdata$r:000019E0 ; ===========================================================================
.rdata$r:000019E0
.rdata$r:000019E0 ; Segment type: Pure data
.rdata$r:000019E0 ; Segment permissions: Read
.rdata$r:000019E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019E0                 assume cs:_rdata$r
.rdata$r:000019E0                 ;org 19E0h
.rdata$r:000019E0 ; COMDAT (pick any)
.rdata$r:000019E0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000019E0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000019E0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000019E0                                         ; DATA XREF: .rdata$r:000019DCo
.rdata$r:000019E0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000019E4                 db    0
.rdata$r:000019E5                 align 4
.rdata$r:000019E5 _rdata$r        ends
.rdata$r:000019E5
.rdata$r:000019E8 ; ===========================================================================
.rdata$r:000019E8
.rdata$r:000019E8 ; Segment type: Pure data
.rdata$r:000019E8 ; Segment permissions: Read
.rdata$r:000019E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000019E8                 assume cs:_rdata$r
.rdata$r:000019E8                 ;org 19E8h
.rdata$r:000019E8 ; COMDAT (pick any)
.rdata$r:000019E8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000019E8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000019E8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000019E8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000019E8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000019EC                 db    0
.rdata$r:000019ED                 db    0
.rdata$r:000019EE                 db    0
.rdata$r:000019EF                 db    0
.rdata$r:000019F0                 db    0
.rdata$r:000019F1                 db    0
.rdata$r:000019F2                 db    0
.rdata$r:000019F3                 db    0
.rdata$r:000019F4                 db 0FFh
.rdata$r:000019F5                 db 0FFh
.rdata$r:000019F6                 db 0FFh
.rdata$r:000019F7                 db 0FFh
.rdata$r:000019F8                 db    0
.rdata$r:000019F9                 db    0
.rdata$r:000019FA                 db    0
.rdata$r:000019FB                 db    0
.rdata$r:000019FC                 db  40h ; @
.rdata$r:000019FD                 db    0
.rdata$r:000019FE                 db    0
.rdata$r:000019FF                 db    0
.rdata$r:00001A00                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A00 _rdata$r        ends
.rdata$r:00001A00
.rdata$r:00001A04 ; ===========================================================================
.rdata$r:00001A04
.rdata$r:00001A04 ; Segment type: Pure data
.rdata$r:00001A04 ; Segment permissions: Read
.rdata$r:00001A04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A04                 assume cs:_rdata$r
.rdata$r:00001A04                 ;org 1A04h
.rdata$r:00001A04 ; COMDAT (pick any)
.rdata$r:00001A04                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00001A04 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00001A04 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00001A04                                         ; DATA XREF: .rdata:00001474o
.rdata$r:00001A05                 db    0
.rdata$r:00001A06                 db    0
.rdata$r:00001A07                 db    0
.rdata$r:00001A08                 db    4
.rdata$r:00001A09                 db    0
.rdata$r:00001A0A                 db    0
.rdata$r:00001A0B                 db    0
.rdata$r:00001A0C                 db    0
.rdata$r:00001A0D                 db    0
.rdata$r:00001A0E                 db    0
.rdata$r:00001A0F                 db    0
.rdata$r:00001A10                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00001A14                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A14 _rdata$r        ends
.rdata$r:00001A14
.rdata$r:00001A18 ; ===========================================================================
.rdata$r:00001A18
.rdata$r:00001A18 ; Segment type: Pure data
.rdata$r:00001A18 ; Segment permissions: Read
.rdata$r:00001A18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A18                 assume cs:_rdata$r
.rdata$r:00001A18                 ;org 1A18h
.rdata$r:00001A18 ; COMDAT (pick any)
.rdata$r:00001A18                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:00001A18 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00001A18 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00001A18                                         ; DATA XREF: .rdata:0000145Co
.rdata$r:00001A19                 db    0
.rdata$r:00001A1A                 db    0
.rdata$r:00001A1B                 db    0
.rdata$r:00001A1C                 db    8
.rdata$r:00001A1D                 db    0
.rdata$r:00001A1E                 db    0
.rdata$r:00001A1F                 db    0
.rdata$r:00001A20                 db    0
.rdata$r:00001A21                 db    0
.rdata$r:00001A22                 db    0
.rdata$r:00001A23                 db    0
.rdata$r:00001A24                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00001A28                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A28 _rdata$r        ends
.rdata$r:00001A28
.rdata$r:00001A2C ; ===========================================================================
.rdata$r:00001A2C
.rdata$r:00001A2C ; Segment type: Pure data
.rdata$r:00001A2C ; Segment permissions: Read
.rdata$r:00001A2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A2C                 assume cs:_rdata$r
.rdata$r:00001A2C                 ;org 1A2Ch
.rdata$r:00001A2C ; COMDAT (pick any)
.rdata$r:00001A2C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00001A2C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00001A2C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00001A2C                                         ; DATA XREF: .rdata:00001448o
.rdata$r:00001A2D                 db    0
.rdata$r:00001A2E                 db    0
.rdata$r:00001A2F                 db    0
.rdata$r:00001A30                 db  0Ch
.rdata$r:00001A31                 db    0
.rdata$r:00001A32                 db    0
.rdata$r:00001A33                 db    0
.rdata$r:00001A34                 db    0
.rdata$r:00001A35                 db    0
.rdata$r:00001A36                 db    0
.rdata$r:00001A37                 db    0
.rdata$r:00001A38                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00001A3C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A3C _rdata$r        ends
.rdata$r:00001A3C
.rdata$r:00001A40 ; ===========================================================================
.rdata$r:00001A40
.rdata$r:00001A40 ; Segment type: Pure data
.rdata$r:00001A40 ; Segment permissions: Read
.rdata$r:00001A40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001A40                 assume cs:_rdata$r
.rdata$r:00001A40                 ;org 1A40h
.rdata$r:00001A40 ; COMDAT (pick any)
.rdata$r:00001A40                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00001A40 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00001A40 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00001A40                                         ; DATA XREF: .rdata:00001434o
.rdata$r:00001A41                 db    0
.rdata$r:00001A42                 db    0
.rdata$r:00001A43                 db    0
.rdata$r:00001A44                 db  10h
.rdata$r:00001A45                 db    0
.rdata$r:00001A46                 db    0
.rdata$r:00001A47                 db    0
.rdata$r:00001A48                 db    0
.rdata$r:00001A49                 db    0
.rdata$r:00001A4A                 db    0
.rdata$r:00001A4B                 db    0
.rdata$r:00001A4C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00001A50                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001A50 _rdata$r        ends
.rdata$r:00001A50
.text:00001A54 ; ===========================================================================
.text:00001A54
.text:00001A54 ; Segment type: Pure code
.text:00001A54 ; Segment permissions: Read/Execute
.text:00001A54 _text           segment para public 'CODE' use32
.text:00001A54                 assume cs:_text
.text:00001A54                 ;org 1A54h
.text:00001A54 ; COMDAT (pick any)
.text:00001A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A54
.text:00001A54 ; =============== S U B R O U T I N E =======================================
.text:00001A54
.text:00001A54 ; Attributes: bp-based frame
.text:00001A54
.text:00001A54 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00001A54                 public ??0CMyUnknownImp@@QAE@XZ
.text:00001A54 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+67p
.text:00001A54
.text:00001A54 var_4           = dword ptr -4
.text:00001A54
.text:00001A54                 push    ebp
.text:00001A55                 mov     ebp, esp
.text:00001A57                 push    ecx
.text:00001A58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A5F                 mov     [ebp+var_4], ecx
.text:00001A62                 mov     eax, [ebp+var_4]
.text:00001A65                 mov     dword ptr [eax], 0
.text:00001A6B                 mov     eax, [ebp+var_4]
.text:00001A6E                 mov     esp, ebp
.text:00001A70                 pop     ebp
.text:00001A71                 retn
.text:00001A71 ??0CMyUnknownImp@@QAE@XZ endp
.text:00001A71
.text:00001A71 ; ---------------------------------------------------------------------------
.text:00001A72                 align 4
.text:00001A72 _text           ends
.text:00001A72
.text:00001A74 ; ===========================================================================
.text:00001A74
.text:00001A74 ; Segment type: Pure code
.text:00001A74 ; Segment permissions: Read/Execute
.text:00001A74 _text           segment para public 'CODE' use32
.text:00001A74                 assume cs:_text
.text:00001A74                 ;org 1A74h
.text:00001A74 ; COMDAT (pick any)
.text:00001A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A74
.text:00001A74 ; =============== S U B R O U T I N E =======================================
.text:00001A74
.text:00001A74 ; Attributes: bp-based frame
.text:00001A74
.text:00001A74 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface(NCompress::NDeflate::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:00001A74                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00001A74 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001A74                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00001A74                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00001A74
.text:00001A74 var_14          = dword ptr -14h
.text:00001A74 var_10          = dword ptr -10h
.text:00001A74 var_C           = dword ptr -0Ch
.text:00001A74 var_8           = dword ptr -8
.text:00001A74 var_4           = dword ptr -4
.text:00001A74 this            = dword ptr  8
.text:00001A74 Buf1            = dword ptr  0Ch
.text:00001A74 arg_8           = dword ptr  10h
.text:00001A74
.text:00001A74                 push    ebp
.text:00001A75                 mov     ebp, esp
.text:00001A77                 sub     esp, 14h
.text:00001A7A                 mov     eax, 0CCCCCCCCh
.text:00001A7F                 mov     [ebp+var_14], eax
.text:00001A82                 mov     [ebp+var_10], eax
.text:00001A85                 mov     [ebp+var_C], eax
.text:00001A88                 mov     [ebp+var_8], eax
.text:00001A8B                 mov     [ebp+var_4], eax
.text:00001A8E                 mov     eax, [ebp+arg_8]
.text:00001A91                 mov     dword ptr [eax], 0
.text:00001A97                 push    offset _IID_IUnknown ; Buf2
.text:00001A9C                 mov     ecx, [ebp+Buf1]
.text:00001A9F                 push    ecx             ; Buf1
.text:00001AA0                 call    ___@8           ; __(x,x)
.text:00001AA5                 test    eax, eax
.text:00001AA7                 jz      short loc_1ACE
.text:00001AA9                 cmp     [ebp+this], 0
.text:00001AAD                 jz      short loc_1ABA
.text:00001AAF                 mov     edx, [ebp+this]
.text:00001AB2                 add     edx, 4
.text:00001AB5                 mov     [ebp+var_4], edx
.text:00001AB8                 jmp     short loc_1AC1
.text:00001ABA ; ---------------------------------------------------------------------------
.text:00001ABA
.text:00001ABA loc_1ABA:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+39j
.text:00001ABA                 mov     [ebp+var_4], 0
.text:00001AC1
.text:00001AC1 loc_1AC1:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+44j
.text:00001AC1                 mov     eax, [ebp+arg_8]
.text:00001AC4                 mov     ecx, [ebp+var_4]
.text:00001AC7                 mov     [eax], ecx
.text:00001AC9                 jmp     loc_1BA8
.text:00001ACE ; ---------------------------------------------------------------------------
.text:00001ACE
.text:00001ACE loc_1ACE:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00001ACE                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:00001AD3                 mov     edx, [ebp+Buf1]
.text:00001AD6                 push    edx             ; Buf1
.text:00001AD7                 call    ___@8           ; __(x,x)
.text:00001ADC                 test    eax, eax
.text:00001ADE                 jz      short loc_1B05
.text:00001AE0                 cmp     [ebp+this], 0
.text:00001AE4                 jz      short loc_1AF1
.text:00001AE6                 mov     eax, [ebp+this]
.text:00001AE9                 add     eax, 4
.text:00001AEC                 mov     [ebp+var_8], eax
.text:00001AEF                 jmp     short loc_1AF8
.text:00001AF1 ; ---------------------------------------------------------------------------
.text:00001AF1
.text:00001AF1 loc_1AF1:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+70j
.text:00001AF1                 mov     [ebp+var_8], 0
.text:00001AF8
.text:00001AF8 loc_1AF8:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:00001AF8                 mov     ecx, [ebp+arg_8]
.text:00001AFB                 mov     edx, [ebp+var_8]
.text:00001AFE                 mov     [ecx], edx
.text:00001B00                 jmp     loc_1BA8
.text:00001B05 ; ---------------------------------------------------------------------------
.text:00001B05
.text:00001B05 loc_1B05:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:00001B05                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00001B0A                 mov     eax, [ebp+Buf1]
.text:00001B0D                 push    eax             ; Buf1
.text:00001B0E                 call    ___@8           ; __(x,x)
.text:00001B13                 test    eax, eax
.text:00001B15                 jz      short loc_1B39
.text:00001B17                 cmp     [ebp+this], 0
.text:00001B1B                 jz      short loc_1B28
.text:00001B1D                 mov     ecx, [ebp+this]
.text:00001B20                 add     ecx, 8
.text:00001B23                 mov     [ebp+var_C], ecx
.text:00001B26                 jmp     short loc_1B2F
.text:00001B28 ; ---------------------------------------------------------------------------
.text:00001B28
.text:00001B28 loc_1B28:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A7j
.text:00001B28                 mov     [ebp+var_C], 0
.text:00001B2F
.text:00001B2F loc_1B2F:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+B2j
.text:00001B2F                 mov     edx, [ebp+arg_8]
.text:00001B32                 mov     eax, [ebp+var_C]
.text:00001B35                 mov     [edx], eax
.text:00001B37                 jmp     short loc_1BA8
.text:00001B39 ; ---------------------------------------------------------------------------
.text:00001B39
.text:00001B39 loc_1B39:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A1j
.text:00001B39                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00001B3E                 mov     ecx, [ebp+Buf1]
.text:00001B41                 push    ecx             ; Buf1
.text:00001B42                 call    ___@8           ; __(x,x)
.text:00001B47                 test    eax, eax
.text:00001B49                 jz      short loc_1B6D
.text:00001B4B                 cmp     [ebp+this], 0
.text:00001B4F                 jz      short loc_1B5C
.text:00001B51                 mov     edx, [ebp+this]
.text:00001B54                 add     edx, 0Ch
.text:00001B57                 mov     [ebp+var_10], edx
.text:00001B5A                 jmp     short loc_1B63
.text:00001B5C ; ---------------------------------------------------------------------------
.text:00001B5C
.text:00001B5C loc_1B5C:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+DBj
.text:00001B5C                 mov     [ebp+var_10], 0
.text:00001B63
.text:00001B63 loc_1B63:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+E6j
.text:00001B63                 mov     eax, [ebp+arg_8]
.text:00001B66                 mov     ecx, [ebp+var_10]
.text:00001B69                 mov     [eax], ecx
.text:00001B6B                 jmp     short loc_1BA8
.text:00001B6D ; ---------------------------------------------------------------------------
.text:00001B6D
.text:00001B6D loc_1B6D:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00001B6D                 push    offset _IID_ISequentialInStream ; Buf2
.text:00001B72                 mov     edx, [ebp+Buf1]
.text:00001B75                 push    edx             ; Buf1
.text:00001B76                 call    ___@8           ; __(x,x)
.text:00001B7B                 test    eax, eax
.text:00001B7D                 jz      short loc_1BA1
.text:00001B7F                 cmp     [ebp+this], 0
.text:00001B83                 jz      short loc_1B90
.text:00001B85                 mov     eax, [ebp+this]
.text:00001B88                 add     eax, 10h
.text:00001B8B                 mov     [ebp+var_14], eax
.text:00001B8E                 jmp     short loc_1B97
.text:00001B90 ; ---------------------------------------------------------------------------
.text:00001B90
.text:00001B90 loc_1B90:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:00001B90                 mov     [ebp+var_14], 0
.text:00001B97
.text:00001B97 loc_1B97:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:00001B97                 mov     ecx, [ebp+arg_8]
.text:00001B9A                 mov     edx, [ebp+var_14]
.text:00001B9D                 mov     [ecx], edx
.text:00001B9F                 jmp     short loc_1BA8
.text:00001BA1 ; ---------------------------------------------------------------------------
.text:00001BA1
.text:00001BA1 loc_1BA1:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+109j
.text:00001BA1                 mov     eax, 80004002h
.text:00001BA6                 jmp     short loc_1BB9
.text:00001BA8 ; ---------------------------------------------------------------------------
.text:00001BA8
.text:00001BA8 loc_1BA8:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+55j
.text:00001BA8                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:00001BA8                 mov     eax, [ebp+this]
.text:00001BAB                 mov     ecx, [eax+14h]
.text:00001BAE                 add     ecx, 1
.text:00001BB1                 mov     edx, [ebp+this]
.text:00001BB4                 mov     [edx+14h], ecx
.text:00001BB7                 xor     eax, eax
.text:00001BB9
.text:00001BB9 loc_1BB9:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+132j
.text:00001BB9                 add     esp, 14h
.text:00001BBC                 cmp     ebp, esp
.text:00001BBE                 call    __RTC_CheckEsp
.text:00001BC3                 mov     esp, ebp
.text:00001BC5                 pop     ebp
.text:00001BC6                 retn    0Ch
.text:00001BC6 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001BC6
.text:00001BC6 ; ---------------------------------------------------------------------------
.text:00001BC9                 align 4
.text:00001BC9 _text           ends
.text:00001BC9
.text:00001BCC ; ===========================================================================
.text:00001BCC
.text:00001BCC ; Segment type: Pure code
.text:00001BCC ; Segment permissions: Read/Execute
.text:00001BCC _text           segment para public 'CODE' use32
.text:00001BCC                 assume cs:_text
.text:00001BCC                 ;org 1BCCh
.text:00001BCC ; COMDAT (pick any)
.text:00001BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BCC
.text:00001BCC ; =============== S U B R O U T I N E =======================================
.text:00001BCC
.text:00001BCC ; Attributes: bp-based frame
.text:00001BCC
.text:00001BCC ; int __stdcall __(void *Buf1, void *Buf2)
.text:00001BCC                 public ___@8
.text:00001BCC ___@8           proc near               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+2Cp
.text:00001BCC                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+63p ...
.text:00001BCC
.text:00001BCC Buf1            = dword ptr  8
.text:00001BCC Buf2            = dword ptr  0Ch
.text:00001BCC
.text:00001BCC                 push    ebp
.text:00001BCD                 mov     ebp, esp
.text:00001BCF                 mov     eax, [ebp+Buf2]
.text:00001BD2                 push    eax             ; Buf2
.text:00001BD3                 mov     ecx, [ebp+Buf1]
.text:00001BD6                 push    ecx             ; Buf1
.text:00001BD7                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00001BDC                 cmp     ebp, esp
.text:00001BDE                 call    __RTC_CheckEsp
.text:00001BE3                 pop     ebp
.text:00001BE4                 retn    8
.text:00001BE4 ___@8           endp
.text:00001BE4
.text:00001BE4 ; ---------------------------------------------------------------------------
.text:00001BE7                 align 4
.text:00001BE7 _text           ends
.text:00001BE7
.text:00001BE8 ; ===========================================================================
.text:00001BE8
.text:00001BE8 ; Segment type: Pure code
.text:00001BE8 ; Segment permissions: Read/Execute
.text:00001BE8 _text           segment para public 'CODE' use32
.text:00001BE8                 assume cs:_text
.text:00001BE8                 ;org 1BE8h
.text:00001BE8 ; COMDAT (pick any)
.text:00001BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BE8
.text:00001BE8 ; =============== S U B R O U T I N E =======================================
.text:00001BE8
.text:00001BE8 ; Attributes: bp-based frame
.text:00001BE8
.text:00001BE8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001BE8                 public _IsEqualGUID@8
.text:00001BE8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001BE8
.text:00001BE8 Buf1            = dword ptr  8
.text:00001BE8 Buf2            = dword ptr  0Ch
.text:00001BE8
.text:00001BE8                 push    ebp
.text:00001BE9                 mov     ebp, esp
.text:00001BEB                 push    10h             ; Size
.text:00001BED                 mov     eax, [ebp+Buf2]
.text:00001BF0                 push    eax             ; Buf2
.text:00001BF1                 mov     ecx, [ebp+Buf1]
.text:00001BF4                 push    ecx             ; Buf1
.text:00001BF5                 call    _memcmp
.text:00001BFA                 add     esp, 0Ch
.text:00001BFD                 neg     eax
.text:00001BFF                 sbb     eax, eax
.text:00001C01                 add     eax, 1
.text:00001C04                 cmp     ebp, esp
.text:00001C06                 call    __RTC_CheckEsp
.text:00001C0B                 pop     ebp
.text:00001C0C                 retn    8
.text:00001C0C _IsEqualGUID@8  endp
.text:00001C0C
.text:00001C0C ; ---------------------------------------------------------------------------
.text:00001C0F                 align 10h
.text:00001C0F _text           ends
.text:00001C0F
.text:00001C10 ; ===========================================================================
.text:00001C10
.text:00001C10 ; Segment type: Pure code
.text:00001C10 ; Segment permissions: Read/Execute
.text:00001C10 _text           segment para public 'CODE' use32
.text:00001C10                 assume cs:_text
.text:00001C10                 ;org 1C10h
.text:00001C10 ; COMDAT (pick any)
.text:00001C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C10
.text:00001C10 ; =============== S U B R O U T I N E =======================================
.text:00001C10
.text:00001C10 ; Attributes: bp-based frame
.text:00001C10
.text:00001C10 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef(NCompress::NDeflate::NDecoder::CCoder *this)
.text:00001C10                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:00001C10 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00001C10                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:00001C10                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00001C10
.text:00001C10 var_4           = dword ptr -4
.text:00001C10 this            = dword ptr  8
.text:00001C10
.text:00001C10                 push    ebp
.text:00001C11                 mov     ebp, esp
.text:00001C13                 push    ecx
.text:00001C14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001C1B                 mov     eax, [ebp+this]
.text:00001C1E                 mov     ecx, [eax+14h]
.text:00001C21                 add     ecx, 1
.text:00001C24                 mov     [ebp+var_4], ecx
.text:00001C27                 mov     edx, [ebp+this]
.text:00001C2A                 mov     eax, [ebp+var_4]
.text:00001C2D                 mov     [edx+14h], eax
.text:00001C30                 mov     eax, [ebp+var_4]
.text:00001C33                 mov     esp, ebp
.text:00001C35                 pop     ebp
.text:00001C36                 retn    4
.text:00001C36 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:00001C36
.text:00001C36 ; ---------------------------------------------------------------------------
.text:00001C39                 align 4
.text:00001C39 _text           ends
.text:00001C39
.text:00001C3C ; ===========================================================================
.text:00001C3C
.text:00001C3C ; Segment type: Pure code
.text:00001C3C ; Segment permissions: Read/Execute
.text:00001C3C _text           segment para public 'CODE' use32
.text:00001C3C                 assume cs:_text
.text:00001C3C                 ;org 1C3Ch
.text:00001C3C ; COMDAT (pick any)
.text:00001C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001C3C
.text:00001C3C ; =============== S U B R O U T I N E =======================================
.text:00001C3C
.text:00001C3C ; Attributes: bp-based frame
.text:00001C3C
.text:00001C3C ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Release(NCompress::NDeflate::NDecoder::CCoder *this)
.text:00001C3C                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:00001C3C ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00001C3C                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)+5j
.text:00001C3C                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)+5j ...
.text:00001C3C
.text:00001C3C var_10          = dword ptr -10h
.text:00001C3C var_C           = dword ptr -0Ch
.text:00001C3C var_8           = dword ptr -8
.text:00001C3C var_4           = dword ptr -4
.text:00001C3C this            = dword ptr  8
.text:00001C3C
.text:00001C3C                 push    ebp
.text:00001C3D                 mov     ebp, esp
.text:00001C3F                 sub     esp, 10h
.text:00001C42                 push    esi
.text:00001C43                 mov     eax, 0CCCCCCCCh
.text:00001C48                 mov     [ebp+var_10], eax
.text:00001C4B                 mov     [ebp+var_C], eax
.text:00001C4E                 mov     [ebp+var_8], eax
.text:00001C51                 mov     [ebp+var_4], eax
.text:00001C54                 mov     eax, [ebp+this]
.text:00001C57                 mov     ecx, [eax+14h]
.text:00001C5A                 sub     ecx, 1
.text:00001C5D                 mov     [ebp+var_C], ecx
.text:00001C60                 mov     edx, [ebp+this]
.text:00001C63                 mov     eax, [ebp+var_C]
.text:00001C66                 mov     [edx+14h], eax
.text:00001C69                 cmp     [ebp+var_C], 0
.text:00001C6D                 jz      short loc_1C77
.text:00001C6F                 mov     ecx, [ebp+this]
.text:00001C72                 mov     eax, [ecx+14h]
.text:00001C75                 jmp     short loc_1CAF
.text:00001C77 ; ---------------------------------------------------------------------------
.text:00001C77
.text:00001C77 loc_1C77:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+31j
.text:00001C77                 mov     edx, [ebp+this]
.text:00001C7A                 mov     [ebp+var_8], edx
.text:00001C7D                 mov     eax, [ebp+var_8]
.text:00001C80                 mov     [ebp+var_4], eax
.text:00001C83                 cmp     [ebp+var_4], 0
.text:00001C87                 jz      short loc_1CA6
.text:00001C89                 mov     esi, esp
.text:00001C8B                 push    1
.text:00001C8D                 mov     ecx, [ebp+var_4]
.text:00001C90                 mov     edx, [ecx]
.text:00001C92                 mov     ecx, [ebp+var_4]
.text:00001C95                 mov     eax, [edx+10h]
.text:00001C98                 call    eax
.text:00001C9A                 cmp     esi, esp
.text:00001C9C                 call    __RTC_CheckEsp
.text:00001CA1                 mov     [ebp+var_10], eax
.text:00001CA4                 jmp     short loc_1CAD
.text:00001CA6 ; ---------------------------------------------------------------------------
.text:00001CA6
.text:00001CA6 loc_1CA6:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+4Bj
.text:00001CA6                 mov     [ebp+var_10], 0
.text:00001CAD
.text:00001CAD loc_1CAD:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+68j
.text:00001CAD                 xor     eax, eax
.text:00001CAF
.text:00001CAF loc_1CAF:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+39j
.text:00001CAF                 pop     esi
.text:00001CB0                 add     esp, 10h
.text:00001CB3                 cmp     ebp, esp
.text:00001CB5                 call    __RTC_CheckEsp
.text:00001CBA                 mov     esp, ebp
.text:00001CBC                 pop     ebp
.text:00001CBD                 retn    4
.text:00001CBD ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:00001CBD
.text:00001CBD _text           ends
.text:00001CBD
.text:00001CC0 ; ===========================================================================
.text:00001CC0
.text:00001CC0 ; Segment type: Pure code
.text:00001CC0 ; Segment permissions: Read/Execute
.text:00001CC0 _text           segment para public 'CODE' use32
.text:00001CC0                 assume cs:_text
.text:00001CC0                 ;org 1CC0h
.text:00001CC0 ; COMDAT (pick any)
.text:00001CC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001CC0
.text:00001CC0 ; =============== S U B R O U T I N E =======================================
.text:00001CC0
.text:00001CC0 ; Attributes: bp-based frame
.text:00001CC0
.text:00001CC0 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00001CC0                 public ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00001CC0 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00001CC0
.text:00001CC0 var_4           = dword ptr -4
.text:00001CC0 arg_0           = dword ptr  8
.text:00001CC0
.text:00001CC0                 push    ebp
.text:00001CC1                 mov     ebp, esp
.text:00001CC3                 push    ecx
.text:00001CC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001CCB                 mov     [ebp+var_4], ecx
.text:00001CCE                 mov     ecx, [ebp+var_4] ; this
.text:00001CD1                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00001CD6                 mov     eax, [ebp+arg_0]
.text:00001CD9                 and     eax, 1
.text:00001CDC                 jz      short loc_1CEA
.text:00001CDE                 mov     ecx, [ebp+var_4]
.text:00001CE1                 push    ecx             ; void *
.text:00001CE2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001CE7                 add     esp, 4
.text:00001CEA
.text:00001CEA loc_1CEA:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:00001CEA                 mov     eax, [ebp+var_4]
.text:00001CED                 add     esp, 4
.text:00001CF0                 cmp     ebp, esp
.text:00001CF2                 call    __RTC_CheckEsp
.text:00001CF7                 mov     esp, ebp
.text:00001CF9                 pop     ebp
.text:00001CFA                 retn    4
.text:00001CFA ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00001CFA
.text:00001CFA ; ---------------------------------------------------------------------------
.text:00001CFD                 align 10h
.text:00001CFD _text           ends
.text:00001CFD
.text:00001D00 ; ===========================================================================
.text:00001D00
.text:00001D00 ; Segment type: Pure code
.text:00001D00 ; Segment permissions: Read/Execute
.text:00001D00 _text           segment para public 'CODE' use32
.text:00001D00                 assume cs:_text
.text:00001D00                 ;org 1D00h
.text:00001D00 ; COMDAT (pick any)
.text:00001D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D00
.text:00001D00 ; =============== S U B R O U T I N E =======================================
.text:00001D00
.text:00001D00 ; Attributes: bp-based frame
.text:00001D00
.text:00001D00 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::~CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00001D00                 public ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00001D00 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00001D00                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:00001D00
.text:00001D00 var_10          = dword ptr -10h
.text:00001D00 var_C           = dword ptr -0Ch
.text:00001D00 var_4           = dword ptr -4
.text:00001D00
.text:00001D00                 push    ebp
.text:00001D01                 mov     ebp, esp
.text:00001D03                 push    0FFFFFFFFh
.text:00001D05                 push    offset __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00001D0A                 mov     eax, large fs:0
.text:00001D10                 push    eax
.text:00001D11                 push    ecx
.text:00001D12                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001D19                 mov     eax, dword ptr ds:___security_cookie
.text:00001D1E                 xor     eax, ebp
.text:00001D20                 push    eax
.text:00001D21                 lea     eax, [ebp+var_C]
.text:00001D24                 mov     large fs:0, eax
.text:00001D2A                 mov     [ebp+var_10], ecx
.text:00001D2D                 mov     eax, [ebp+var_10]
.text:00001D30                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:00001D36                 mov     ecx, [ebp+var_10]
.text:00001D39                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00001D40                 mov     edx, [ebp+var_10]
.text:00001D43                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:00001D4A                 mov     eax, [ebp+var_10]
.text:00001D4D                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00001D54                 mov     ecx, [ebp+var_10]
.text:00001D57                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:00001D5E                 mov     [ebp+var_4], 1
.text:00001D65                 mov     ecx, [ebp+var_10]
.text:00001D68                 add     ecx, 48h ; 'H'
.text:00001D6B                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00001D70                 mov     byte ptr [ebp+var_4], 0
.text:00001D74                 mov     ecx, [ebp+var_10]
.text:00001D77                 add     ecx, 40h ; '@'
.text:00001D7A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001D7F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001D86                 mov     ecx, [ebp+var_10]
.text:00001D89                 add     ecx, 18h        ; this
.text:00001D8C                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00001D91                 mov     ecx, [ebp+var_C]
.text:00001D94                 mov     large fs:0, ecx
.text:00001D9B                 pop     ecx
.text:00001D9C                 add     esp, 10h
.text:00001D9F                 cmp     ebp, esp
.text:00001DA1                 call    __RTC_CheckEsp
.text:00001DA6                 mov     esp, ebp
.text:00001DA8                 pop     ebp
.text:00001DA9                 retn
.text:00001DA9 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00001DA9
.text:00001DA9 ; ---------------------------------------------------------------------------
.text:00001DAA                 align 4
.text:00001DAA _text           ends
.text:00001DAA
.text$x:00001DAC ; ===========================================================================
.text$x:00001DAC
.text$x:00001DAC ; Segment type: Pure code
.text$x:00001DAC ; Segment permissions: Read/Execute
.text$x:00001DAC _text$x         segment para public 'CODE' use32
.text$x:00001DAC                 assume cs:_text$x
.text$x:00001DAC                 ;org 1DACh
.text$x:00001DAC ; COMDAT (pick associative to section at 1D00)
.text$x:00001DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001DAC
.text$x:00001DAC ; =============== S U B R O U T I N E =======================================
.text$x:00001DAC
.text$x:00001DAC
.text$x:00001DAC __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 proc near
.text$x:00001DAC                                         ; DATA XREF: .xdata$x:00001DE4o
.text$x:00001DAC                 mov     ecx, [ebp-10h]
.text$x:00001DAF                 add     ecx, 18h        ; this
.text$x:00001DB2                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00001DB2 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 endp
.text$x:00001DB2
.text$x:00001DB7
.text$x:00001DB7 ; =============== S U B R O U T I N E =======================================
.text$x:00001DB7
.text$x:00001DB7
.text$x:00001DB7 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 proc near
.text$x:00001DB7                                         ; DATA XREF: .xdata$x:00001DECo
.text$x:00001DB7                 mov     ecx, [ebp-10h]
.text$x:00001DBA                 add     ecx, 40h ; '@'
.text$x:00001DBD                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00001DBD __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 endp
.text$x:00001DBD
.text$x:00001DC2
.text$x:00001DC2 ; =============== S U B R O U T I N E =======================================
.text$x:00001DC2
.text$x:00001DC2
.text$x:00001DC2 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text$x:00001DC2                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+5o
.text$x:00001DC2
.text$x:00001DC2 arg_4           = dword ptr  8
.text$x:00001DC2
.text$x:00001DC2                 mov     edx, [esp+arg_4]
.text$x:00001DC6                 lea     eax, [edx+0Ch]
.text$x:00001DC9                 mov     ecx, [edx-8]
.text$x:00001DCC                 xor     ecx, eax
.text$x:00001DCE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DD3                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text$x:00001DD8                 jmp     ___CxxFrameHandler3
.text$x:00001DD8 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text$x:00001DD8
.text$x:00001DD8 ; ---------------------------------------------------------------------------
.text$x:00001DDD                 align 10h
.text$x:00001DDD _text$x         ends
.text$x:00001DDD
.xdata$x:00001DE0 ; ===========================================================================
.xdata$x:00001DE0
.xdata$x:00001DE0 ; Segment type: Pure data
.xdata$x:00001DE0 ; Segment permissions: Read
.xdata$x:00001DE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001DE0                 assume cs:_xdata$x
.xdata$x:00001DE0                 ;org 1DE0h
.xdata$x:00001DE0 ; COMDAT (pick associative to section at 1D00)
.xdata$x:00001DE0 __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db 0FFh
.xdata$x:00001DE0                                         ; DATA XREF: .xdata$x:00001DF8o
.xdata$x:00001DE1                 db 0FFh
.xdata$x:00001DE2                 db 0FFh
.xdata$x:00001DE3                 db 0FFh
.xdata$x:00001DE4                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0
.xdata$x:00001DE8                 db    0
.xdata$x:00001DE9                 db    0
.xdata$x:00001DEA                 db    0
.xdata$x:00001DEB                 db    0
.xdata$x:00001DEC                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1
.xdata$x:00001DF0 __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db  22h ; "
.xdata$x:00001DF0                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ+11o
.xdata$x:00001DF1                 db    5
.xdata$x:00001DF2                 db  93h ; ô
.xdata$x:00001DF3                 db  19h
.xdata$x:00001DF4                 db    2
.xdata$x:00001DF5                 db    0
.xdata$x:00001DF6                 db    0
.xdata$x:00001DF7                 db    0
.xdata$x:00001DF8                 dd offset __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.xdata$x:00001DFC                 db    0
.xdata$x:00001DFD                 db    0
.xdata$x:00001DFE                 db    0
.xdata$x:00001DFF                 db    0
.xdata$x:00001E00                 db    0
.xdata$x:00001E01                 db    0
.xdata$x:00001E02                 db    0
.xdata$x:00001E03                 db    0
.xdata$x:00001E04                 db    0
.xdata$x:00001E05                 db    0
.xdata$x:00001E06                 db    0
.xdata$x:00001E07                 db    0
.xdata$x:00001E08                 db    0
.xdata$x:00001E09                 db    0
.xdata$x:00001E0A                 db    0
.xdata$x:00001E0B                 db    0
.xdata$x:00001E0C                 db    0
.xdata$x:00001E0D                 db    0
.xdata$x:00001E0E                 db    0
.xdata$x:00001E0F                 db    0
.xdata$x:00001E10                 db    1
.xdata$x:00001E11                 db    0
.xdata$x:00001E12                 db    0
.xdata$x:00001E13                 db    0
.xdata$x:00001E13 _xdata$x        ends
.xdata$x:00001E13
.text:00001E14 ; ===========================================================================
.text:00001E14
.text:00001E14 ; Segment type: Pure code
.text:00001E14 ; Segment permissions: Read/Execute
.text:00001E14 _text           segment para public 'CODE' use32
.text:00001E14                 assume cs:_text
.text:00001E14                 ;org 1E14h
.text:00001E14 ; COMDAT (pick any)
.text:00001E14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E14
.text:00001E14 ; =============== S U B R O U T I N E =======================================
.text:00001E14
.text:00001E14 ; Attributes: bp-based frame
.text:00001E14
.text:00001E14 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:00001E14                 public ??1CLzOutWindow@@QAE@XZ
.text:00001E14 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z$0+6j
.text:00001E14                                         ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+8Cp ...
.text:00001E14
.text:00001E14 var_4           = dword ptr -4
.text:00001E14
.text:00001E14                 push    ebp
.text:00001E15                 mov     ebp, esp
.text:00001E17                 push    ecx
.text:00001E18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E1F                 mov     [ebp+var_4], ecx
.text:00001E22                 mov     ecx, [ebp+var_4] ; this
.text:00001E25                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00001E2A                 add     esp, 4
.text:00001E2D                 cmp     ebp, esp
.text:00001E2F                 call    __RTC_CheckEsp
.text:00001E34                 mov     esp, ebp
.text:00001E36                 pop     ebp
.text:00001E37                 retn
.text:00001E37 ??1CLzOutWindow@@QAE@XZ endp
.text:00001E37
.text:00001E37 _text           ends
.text:00001E37
.text:00001E38 ; ===========================================================================
.text:00001E38
.text:00001E38 ; Segment type: Pure code
.text:00001E38 ; Segment permissions: Read/Execute
.text:00001E38 _text           segment para public 'CODE' use32
.text:00001E38                 assume cs:_text
.text:00001E38                 ;org 1E38h
.text:00001E38 ; COMDAT (pick any)
.text:00001E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E38
.text:00001E38 ; =============== S U B R O U T I N E =======================================
.text:00001E38
.text:00001E38 ; Attributes: bp-based frame
.text:00001E38
.text:00001E38 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00001E38                 public ??1COutBuffer@@QAE@XZ
.text:00001E38 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:00001E38
.text:00001E38 var_4           = dword ptr -4
.text:00001E38
.text:00001E38                 push    ebp
.text:00001E39                 mov     ebp, esp
.text:00001E3B                 push    ecx
.text:00001E3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E43                 mov     [ebp+var_4], ecx
.text:00001E46                 mov     ecx, [ebp+var_4] ; this
.text:00001E49                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00001E4E                 add     esp, 4
.text:00001E51                 cmp     ebp, esp
.text:00001E53                 call    __RTC_CheckEsp
.text:00001E58                 mov     esp, ebp
.text:00001E5A                 pop     ebp
.text:00001E5B                 retn
.text:00001E5B ??1COutBuffer@@QAE@XZ endp
.text:00001E5B
.text:00001E5B _text           ends
.text:00001E5B
.text:00001E5C ; ===========================================================================
.text:00001E5C
.text:00001E5C ; Segment type: Pure code
.text:00001E5C ; Segment permissions: Read/Execute
.text:00001E5C _text           segment para public 'CODE' use32
.text:00001E5C                 assume cs:_text
.text:00001E5C                 ;org 1E5Ch
.text:00001E5C ; COMDAT (pick any)
.text:00001E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E5C
.text:00001E5C ; =============== S U B R O U T I N E =======================================
.text:00001E5C
.text:00001E5C ; Attributes: bp-based frame
.text:00001E5C
.text:00001E5C ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00001E5C                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00001E5C ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00001E5C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+6Bp
.text:00001E5C
.text:00001E5C var_4           = dword ptr -4
.text:00001E5C
.text:00001E5C                 push    ebp
.text:00001E5D                 mov     ebp, esp
.text:00001E5F                 push    ecx
.text:00001E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E67                 mov     [ebp+var_4], ecx
.text:00001E6A                 mov     ecx, [ebp+var_4]
.text:00001E6D                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00001E72                 add     esp, 4
.text:00001E75                 cmp     ebp, esp
.text:00001E77                 call    __RTC_CheckEsp
.text:00001E7C                 mov     esp, ebp
.text:00001E7E                 pop     ebp
.text:00001E7F                 retn
.text:00001E7F ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00001E7F
.text:00001E7F _text           ends
.text:00001E7F
.text:00001E80 ; ===========================================================================
.text:00001E80
.text:00001E80 ; Segment type: Pure code
.text:00001E80 ; Segment permissions: Read/Execute
.text:00001E80 _text           segment para public 'CODE' use32
.text:00001E80                 assume cs:_text
.text:00001E80                 ;org 1E80h
.text:00001E80 ; COMDAT (pick any)
.text:00001E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E80
.text:00001E80 ; =============== S U B R O U T I N E =======================================
.text:00001E80
.text:00001E80 ; Attributes: bp-based frame
.text:00001E80
.text:00001E80 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00001E80                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00001E80 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00001E80                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00001E80
.text:00001E80 var_4           = dword ptr -4
.text:00001E80
.text:00001E80                 push    ebp
.text:00001E81                 mov     ebp, esp
.text:00001E83                 push    ecx
.text:00001E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E8B                 mov     [ebp+var_4], ecx
.text:00001E8E                 mov     ecx, [ebp+var_4]
.text:00001E91                 add     ecx, 8          ; this
.text:00001E94                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00001E99                 add     esp, 4
.text:00001E9C                 cmp     ebp, esp
.text:00001E9E                 call    __RTC_CheckEsp
.text:00001EA3                 mov     esp, ebp
.text:00001EA5                 pop     ebp
.text:00001EA6                 retn
.text:00001EA6 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00001EA6
.text:00001EA6 ; ---------------------------------------------------------------------------
.text:00001EA7                 align 4
.text:00001EA7 _text           ends
.text:00001EA7
.text:00001EA8 ; ===========================================================================
.text:00001EA8
.text:00001EA8 ; Segment type: Pure code
.text:00001EA8 ; Segment permissions: Read/Execute
.text:00001EA8 _text           segment para public 'CODE' use32
.text:00001EA8                 assume cs:_text
.text:00001EA8                 ;org 1EA8h
.text:00001EA8 ; COMDAT (pick any)
.text:00001EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001EA8
.text:00001EA8 ; =============== S U B R O U T I N E =======================================
.text:00001EA8
.text:00001EA8 ; Attributes: bp-based frame
.text:00001EA8
.text:00001EA8 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00001EA8                 public ??1CInBuffer@@QAE@XZ
.text:00001EA8 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00001EA8
.text:00001EA8 var_4           = dword ptr -4
.text:00001EA8
.text:00001EA8                 push    ebp
.text:00001EA9                 mov     ebp, esp
.text:00001EAB                 push    ecx
.text:00001EAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001EB3                 mov     [ebp+var_4], ecx
.text:00001EB6                 mov     ecx, [ebp+var_4] ; this
.text:00001EB9                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00001EBE                 add     esp, 4
.text:00001EC1                 cmp     ebp, esp
.text:00001EC3                 call    __RTC_CheckEsp
.text:00001EC8                 mov     esp, ebp
.text:00001ECA                 pop     ebp
.text:00001ECB                 retn
.text:00001ECB ??1CInBuffer@@QAE@XZ endp
.text:00001ECB
.text:00001ECB _text           ends
.text:00001ECB
.text:00001ECC ; ===========================================================================
.text:00001ECC
.text:00001ECC ; Segment type: Pure code
.text:00001ECC ; Segment permissions: Read/Execute
.text:00001ECC _text           segment para public 'CODE' use32
.text:00001ECC                 assume cs:_text
.text:00001ECC                 ;org 1ECCh
.text:00001ECC ; COMDAT (pick any)
.text:00001ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001ECC
.text:00001ECC ; =============== S U B R O U T I N E =======================================
.text:00001ECC
.text:00001ECC ; Attributes: bp-based frame
.text:00001ECC
.text:00001ECC ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00001ECC                 public ??0ICompressCoder@@QAE@XZ
.text:00001ECC ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+30p
.text:00001ECC
.text:00001ECC var_4           = dword ptr -4
.text:00001ECC
.text:00001ECC                 push    ebp
.text:00001ECD                 mov     ebp, esp
.text:00001ECF                 push    ecx
.text:00001ED0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ED7                 mov     [ebp+var_4], ecx
.text:00001EDA                 mov     ecx, [ebp+var_4]
.text:00001EDD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001EE2                 mov     eax, [ebp+var_4]
.text:00001EE5                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00001EEB                 mov     eax, [ebp+var_4]
.text:00001EEE                 add     esp, 4
.text:00001EF1                 cmp     ebp, esp
.text:00001EF3                 call    __RTC_CheckEsp
.text:00001EF8                 mov     esp, ebp
.text:00001EFA                 pop     ebp
.text:00001EFB                 retn
.text:00001EFB ??0ICompressCoder@@QAE@XZ endp
.text:00001EFB
.text:00001EFB _text           ends
.text:00001EFB
.rdata:00001EFC ; ===========================================================================
.rdata:00001EFC
.rdata:00001EFC ; Segment type: Pure data
.rdata:00001EFC ; Segment permissions: Read
.rdata:00001EFC _rdata          segment dword public 'DATA' use32
.rdata:00001EFC                 assume cs:_rdata
.rdata:00001EFC                 ;org 1EFCh
.rdata:00001EFC ; COMDAT (pick largest)
.rdata:00001EFC                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00001F00                 public ??_7ICompressCoder@@6B@
.rdata:00001F00 ; const ICompressCoder::`vftable'
.rdata:00001F00 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00001F00                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00001F04                 dd offset __purecall
.rdata:00001F08                 dd offset __purecall
.rdata:00001F0C                 dd offset __purecall
.rdata:00001F0C _rdata          ends
.rdata:00001F0C
.rdata$r:00001F10 ; ===========================================================================
.rdata$r:00001F10
.rdata$r:00001F10 ; Segment type: Pure data
.rdata$r:00001F10 ; Segment permissions: Read
.rdata$r:00001F10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F10                 assume cs:_rdata$r
.rdata$r:00001F10                 ;org 1F10h
.rdata$r:00001F10 ; COMDAT (pick any)
.rdata$r:00001F10                 public ??_R4ICompressCoder@@6B@
.rdata$r:00001F10 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00001F10 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00001EFCo
.rdata$r:00001F11                 db    0
.rdata$r:00001F12                 db    0
.rdata$r:00001F13                 db    0
.rdata$r:00001F14                 db    0
.rdata$r:00001F15                 db    0
.rdata$r:00001F16                 db    0
.rdata$r:00001F17                 db    0
.rdata$r:00001F18                 db    0
.rdata$r:00001F19                 db    0
.rdata$r:00001F1A                 db    0
.rdata$r:00001F1B                 db    0
.rdata$r:00001F1C                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001F20                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F20 _rdata$r        ends
.rdata$r:00001F20
.text:00001F24 ; ===========================================================================
.text:00001F24
.text:00001F24 ; Segment type: Pure code
.text:00001F24 ; Segment permissions: Read/Execute
.text:00001F24 _text           segment para public 'CODE' use32
.text:00001F24                 assume cs:_text
.text:00001F24                 ;org 1F24h
.text:00001F24 ; COMDAT (pick any)
.text:00001F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F24
.text:00001F24 ; =============== S U B R O U T I N E =======================================
.text:00001F24
.text:00001F24 ; Attributes: bp-based frame
.text:00001F24
.text:00001F24 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00001F24                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00001F24 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00001F24                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+3Bp
.text:00001F24
.text:00001F24 var_4           = dword ptr -4
.text:00001F24
.text:00001F24                 push    ebp
.text:00001F25                 mov     ebp, esp
.text:00001F27                 push    ecx
.text:00001F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F2F                 mov     [ebp+var_4], ecx
.text:00001F32                 mov     ecx, [ebp+var_4]
.text:00001F35                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001F3A                 mov     eax, [ebp+var_4]
.text:00001F3D                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:00001F43                 mov     eax, [ebp+var_4]
.text:00001F46                 add     esp, 4
.text:00001F49                 cmp     ebp, esp
.text:00001F4B                 call    __RTC_CheckEsp
.text:00001F50                 mov     esp, ebp
.text:00001F52                 pop     ebp
.text:00001F53                 retn
.text:00001F53 ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:00001F53
.text:00001F53 _text           ends
.text:00001F53
.rdata:00001F54 ; ===========================================================================
.rdata:00001F54
.rdata:00001F54 ; Segment type: Pure data
.rdata:00001F54 ; Segment permissions: Read
.rdata:00001F54 _rdata          segment dword public 'DATA' use32
.rdata:00001F54                 assume cs:_rdata
.rdata:00001F54                 ;org 1F54h
.rdata:00001F54 ; COMDAT (pick largest)
.rdata:00001F54                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00001F58                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00001F58 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00001F58 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00001F58                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00001F5C                 dd offset __purecall
.rdata:00001F60                 dd offset __purecall
.rdata:00001F64                 dd offset __purecall
.rdata:00001F64 _rdata          ends
.rdata:00001F64
.rdata$r:00001F68 ; ===========================================================================
.rdata$r:00001F68
.rdata$r:00001F68 ; Segment type: Pure data
.rdata$r:00001F68 ; Segment permissions: Read
.rdata$r:00001F68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001F68                 assume cs:_rdata$r
.rdata$r:00001F68                 ;org 1F68h
.rdata$r:00001F68 ; COMDAT (pick any)
.rdata$r:00001F68                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00001F68 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00001F68 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00001F68                                         ; DATA XREF: .rdata:00001F54o
.rdata$r:00001F69                 db    0
.rdata$r:00001F6A                 db    0
.rdata$r:00001F6B                 db    0
.rdata$r:00001F6C                 db    0
.rdata$r:00001F6D                 db    0
.rdata$r:00001F6E                 db    0
.rdata$r:00001F6F                 db    0
.rdata$r:00001F70                 db    0
.rdata$r:00001F71                 db    0
.rdata$r:00001F72                 db    0
.rdata$r:00001F73                 db    0
.rdata$r:00001F74                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00001F78                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001F78 _rdata$r        ends
.rdata$r:00001F78
.text:00001F7C ; ===========================================================================
.text:00001F7C
.text:00001F7C ; Segment type: Pure code
.text:00001F7C ; Segment permissions: Read/Execute
.text:00001F7C _text           segment para public 'CODE' use32
.text:00001F7C                 assume cs:_text
.text:00001F7C                 ;org 1F7Ch
.text:00001F7C ; COMDAT (pick any)
.text:00001F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F7C
.text:00001F7C ; =============== S U B R O U T I N E =======================================
.text:00001F7C
.text:00001F7C ; Attributes: bp-based frame
.text:00001F7C
.text:00001F7C ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00001F7C                 public ??0ICompressSetInStream@@QAE@XZ
.text:00001F7C ??0ICompressSetInStream@@QAE@XZ proc near
.text:00001F7C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+46p
.text:00001F7C
.text:00001F7C var_4           = dword ptr -4
.text:00001F7C
.text:00001F7C                 push    ebp
.text:00001F7D                 mov     ebp, esp
.text:00001F7F                 push    ecx
.text:00001F80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F87                 mov     [ebp+var_4], ecx
.text:00001F8A                 mov     ecx, [ebp+var_4]
.text:00001F8D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001F92                 mov     eax, [ebp+var_4]
.text:00001F95                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00001F9B                 mov     eax, [ebp+var_4]
.text:00001F9E                 add     esp, 4
.text:00001FA1                 cmp     ebp, esp
.text:00001FA3                 call    __RTC_CheckEsp
.text:00001FA8                 mov     esp, ebp
.text:00001FAA                 pop     ebp
.text:00001FAB                 retn
.text:00001FAB ??0ICompressSetInStream@@QAE@XZ endp
.text:00001FAB
.text:00001FAB _text           ends
.text:00001FAB
.rdata:00001FAC ; ===========================================================================
.rdata:00001FAC
.rdata:00001FAC ; Segment type: Pure data
.rdata:00001FAC ; Segment permissions: Read
.rdata:00001FAC _rdata          segment dword public 'DATA' use32
.rdata:00001FAC                 assume cs:_rdata
.rdata:00001FAC                 ;org 1FACh
.rdata:00001FAC ; COMDAT (pick largest)
.rdata:00001FAC                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00001FB0                 public ??_7ICompressSetInStream@@6B@
.rdata:00001FB0 ; const ICompressSetInStream::`vftable'
.rdata:00001FB0 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00001FB0                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00001FB4                 dd offset __purecall
.rdata:00001FB8                 dd offset __purecall
.rdata:00001FBC                 dd offset __purecall
.rdata:00001FC0                 dd offset __purecall
.rdata:00001FC0 _rdata          ends
.rdata:00001FC0
.rdata$r:00001FC4 ; ===========================================================================
.rdata$r:00001FC4
.rdata$r:00001FC4 ; Segment type: Pure data
.rdata$r:00001FC4 ; Segment permissions: Read
.rdata$r:00001FC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001FC4                 assume cs:_rdata$r
.rdata$r:00001FC4                 ;org 1FC4h
.rdata$r:00001FC4 ; COMDAT (pick any)
.rdata$r:00001FC4                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00001FC4 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00001FC4 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00001FACo
.rdata$r:00001FC5                 db    0
.rdata$r:00001FC6                 db    0
.rdata$r:00001FC7                 db    0
.rdata$r:00001FC8                 db    0
.rdata$r:00001FC9                 db    0
.rdata$r:00001FCA                 db    0
.rdata$r:00001FCB                 db    0
.rdata$r:00001FCC                 db    0
.rdata$r:00001FCD                 db    0
.rdata$r:00001FCE                 db    0
.rdata$r:00001FCF                 db    0
.rdata$r:00001FD0                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00001FD4                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001FD4 _rdata$r        ends
.rdata$r:00001FD4
.text:00001FD8 ; ===========================================================================
.text:00001FD8
.text:00001FD8 ; Segment type: Pure code
.text:00001FD8 ; Segment permissions: Read/Execute
.text:00001FD8 _text           segment para public 'CODE' use32
.text:00001FD8                 assume cs:_text
.text:00001FD8                 ;org 1FD8h
.text:00001FD8 ; COMDAT (pick any)
.text:00001FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FD8
.text:00001FD8 ; =============== S U B R O U T I N E =======================================
.text:00001FD8
.text:00001FD8 ; Attributes: bp-based frame
.text:00001FD8
.text:00001FD8 ; _DWORD __thiscall ICompressSetOutStreamSize::ICompressSetOutStreamSize(ICompressSetOutStreamSize *__hidden this)
.text:00001FD8                 public ??0ICompressSetOutStreamSize@@QAE@XZ
.text:00001FD8 ??0ICompressSetOutStreamSize@@QAE@XZ proc near
.text:00001FD8                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+51p
.text:00001FD8
.text:00001FD8 var_4           = dword ptr -4
.text:00001FD8
.text:00001FD8                 push    ebp
.text:00001FD9                 mov     ebp, esp
.text:00001FDB                 push    ecx
.text:00001FDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FE3                 mov     [ebp+var_4], ecx
.text:00001FE6                 mov     ecx, [ebp+var_4]
.text:00001FE9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00001FEE                 mov     eax, [ebp+var_4]
.text:00001FF1                 mov     dword ptr [eax], offset ??_7ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`vftable'
.text:00001FF7                 mov     eax, [ebp+var_4]
.text:00001FFA                 add     esp, 4
.text:00001FFD                 cmp     ebp, esp
.text:00001FFF                 call    __RTC_CheckEsp
.text:00002004                 mov     esp, ebp
.text:00002006                 pop     ebp
.text:00002007                 retn
.text:00002007 ??0ICompressSetOutStreamSize@@QAE@XZ endp
.text:00002007
.text:00002007 _text           ends
.text:00002007
.rdata:00002008 ; ===========================================================================
.rdata:00002008
.rdata:00002008 ; Segment type: Pure data
.rdata:00002008 ; Segment permissions: Read
.rdata:00002008 _rdata          segment dword public 'DATA' use32
.rdata:00002008                 assume cs:_rdata
.rdata:00002008                 ;org 2008h
.rdata:00002008 ; COMDAT (pick largest)
.rdata:00002008                 dd offset ??_R4ICompressSetOutStreamSize@@6B@ ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata:0000200C                 public ??_7ICompressSetOutStreamSize@@6B@
.rdata:0000200C ; const ICompressSetOutStreamSize::`vftable'
.rdata:0000200C ??_7ICompressSetOutStreamSize@@6B@ dd offset __purecall
.rdata:0000200C                                         ; DATA XREF: ICompressSetOutStreamSize::ICompressSetOutStreamSize(void)+19o
.rdata:00002010                 dd offset __purecall
.rdata:00002014                 dd offset __purecall
.rdata:00002018                 dd offset __purecall
.rdata:00002018 _rdata          ends
.rdata:00002018
.rdata$r:0000201C ; ===========================================================================
.rdata$r:0000201C
.rdata$r:0000201C ; Segment type: Pure data
.rdata$r:0000201C ; Segment permissions: Read
.rdata$r:0000201C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000201C                 assume cs:_rdata$r
.rdata$r:0000201C                 ;org 201Ch
.rdata$r:0000201C ; COMDAT (pick any)
.rdata$r:0000201C                 public ??_R4ICompressSetOutStreamSize@@6B@
.rdata$r:0000201C ; const ICompressSetOutStreamSize::`RTTI Complete Object Locator'
.rdata$r:0000201C ??_R4ICompressSetOutStreamSize@@6B@ db    0 ; DATA XREF: .rdata:00002008o
.rdata$r:0000201D                 db    0
.rdata$r:0000201E                 db    0
.rdata$r:0000201F                 db    0
.rdata$r:00002020                 db    0
.rdata$r:00002021                 db    0
.rdata$r:00002022                 db    0
.rdata$r:00002023                 db    0
.rdata$r:00002024                 db    0
.rdata$r:00002025                 db    0
.rdata$r:00002026                 db    0
.rdata$r:00002027                 db    0
.rdata$r:00002028                 dd offset ??_R0?AUICompressSetOutStreamSize@@@8 ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:0000202C                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000202C _rdata$r        ends
.rdata$r:0000202C
.text:00002030 ; ===========================================================================
.text:00002030
.text:00002030 ; Segment type: Pure code
.text:00002030 ; Segment permissions: Read/Execute
.text:00002030 _text           segment para public 'CODE' use32
.text:00002030                 assume cs:_text
.text:00002030                 ;org 2030h
.text:00002030 ; COMDAT (pick any)
.text:00002030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002030
.text:00002030 ; =============== S U B R O U T I N E =======================================
.text:00002030
.text:00002030 ; Attributes: bp-based frame
.text:00002030
.text:00002030 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00002030                 public ??0ISequentialInStream@@QAE@XZ
.text:00002030 ??0ISequentialInStream@@QAE@XZ proc near
.text:00002030                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+5Cp
.text:00002030
.text:00002030 var_4           = dword ptr -4
.text:00002030
.text:00002030                 push    ebp
.text:00002031                 mov     ebp, esp
.text:00002033                 push    ecx
.text:00002034                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000203B                 mov     [ebp+var_4], ecx
.text:0000203E                 mov     ecx, [ebp+var_4]
.text:00002041                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00002046                 mov     eax, [ebp+var_4]
.text:00002049                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:0000204F                 mov     eax, [ebp+var_4]
.text:00002052                 add     esp, 4
.text:00002055                 cmp     ebp, esp
.text:00002057                 call    __RTC_CheckEsp
.text:0000205C                 mov     esp, ebp
.text:0000205E                 pop     ebp
.text:0000205F                 retn
.text:0000205F ??0ISequentialInStream@@QAE@XZ endp
.text:0000205F
.text:0000205F _text           ends
.text:0000205F
.rdata:00002060 ; ===========================================================================
.rdata:00002060
.rdata:00002060 ; Segment type: Pure data
.rdata:00002060 ; Segment permissions: Read
.rdata:00002060 _rdata          segment dword public 'DATA' use32
.rdata:00002060                 assume cs:_rdata
.rdata:00002060                 ;org 2060h
.rdata:00002060 ; COMDAT (pick largest)
.rdata:00002060                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00002064                 public ??_7ISequentialInStream@@6B@
.rdata:00002064 ; const ISequentialInStream::`vftable'
.rdata:00002064 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00002064                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00002068                 dd offset __purecall
.rdata:0000206C                 dd offset __purecall
.rdata:00002070                 dd offset __purecall
.rdata:00002070 _rdata          ends
.rdata:00002070
.rdata$r:00002074 ; ===========================================================================
.rdata$r:00002074
.rdata$r:00002074 ; Segment type: Pure data
.rdata$r:00002074 ; Segment permissions: Read
.rdata$r:00002074 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002074                 assume cs:_rdata$r
.rdata$r:00002074                 ;org 2074h
.rdata$r:00002074 ; COMDAT (pick any)
.rdata$r:00002074                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00002074 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00002074 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00002060o
.rdata$r:00002075                 db    0
.rdata$r:00002076                 db    0
.rdata$r:00002077                 db    0
.rdata$r:00002078                 db    0
.rdata$r:00002079                 db    0
.rdata$r:0000207A                 db    0
.rdata$r:0000207B                 db    0
.rdata$r:0000207C                 db    0
.rdata$r:0000207D                 db    0
.rdata$r:0000207E                 db    0
.rdata$r:0000207F                 db    0
.rdata$r:00002080                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00002084                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002084 _rdata$r        ends
.rdata$r:00002084
.text:00002088 ; ===========================================================================
.text:00002088
.text:00002088 ; Segment type: Pure code
.text:00002088 ; Segment permissions: Read/Execute
.text:00002088 _text           segment para public 'CODE' use32
.text:00002088                 assume cs:_text
.text:00002088                 ;org 2088h
.text:00002088 ; COMDAT (pick any)
.text:00002088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002088
.text:00002088 ; =============== S U B R O U T I N E =======================================
.text:00002088
.text:00002088 ; Attributes: bp-based frame
.text:00002088
.text:00002088 ; public: __thiscall CLzOutWindow::CLzOutWindow(void)
.text:00002088                 public ??0CLzOutWindow@@QAE@XZ
.text:00002088 ??0CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+A3p
.text:00002088
.text:00002088 var_4           = dword ptr -4
.text:00002088
.text:00002088                 push    ebp
.text:00002089                 mov     ebp, esp
.text:0000208B                 push    ecx
.text:0000208C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002093                 mov     [ebp+var_4], ecx
.text:00002096                 mov     ecx, [ebp+var_4] ; this
.text:00002099                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:0000209E                 mov     eax, [ebp+var_4]
.text:000020A1                 add     esp, 4
.text:000020A4                 cmp     ebp, esp
.text:000020A6                 call    __RTC_CheckEsp
.text:000020AB                 mov     esp, ebp
.text:000020AD                 pop     ebp
.text:000020AE                 retn
.text:000020AE ??0CLzOutWindow@@QAE@XZ endp
.text:000020AE
.text:000020AE ; ---------------------------------------------------------------------------
.text:000020AF                 align 10h
.text:000020AF _text           ends
.text:000020AF
.text:000020B0 ; ===========================================================================
.text:000020B0
.text:000020B0 ; Segment type: Pure code
.text:000020B0 ; Segment permissions: Read/Execute
.text:000020B0 _text           segment para public 'CODE' use32
.text:000020B0                 assume cs:_text
.text:000020B0                 ;org 20B0h
.text:000020B0 ; COMDAT (pick any)
.text:000020B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020B0
.text:000020B0 ; =============== S U B R O U T I N E =======================================
.text:000020B0
.text:000020B0 ; Attributes: bp-based frame
.text:000020B0
.text:000020B0 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:000020B0                 public ??0COutBuffer@@QAE@XZ
.text:000020B0 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::CLzOutWindow(void)+11p
.text:000020B0
.text:000020B0 var_4           = dword ptr -4
.text:000020B0
.text:000020B0                 push    ebp
.text:000020B1                 mov     ebp, esp
.text:000020B3                 push    ecx
.text:000020B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020BB                 mov     [ebp+var_4], ecx
.text:000020BE                 mov     eax, [ebp+var_4]
.text:000020C1                 mov     dword ptr [eax], 0
.text:000020C7                 mov     ecx, [ebp+var_4]
.text:000020CA                 mov     dword ptr [ecx+4], 0
.text:000020D1                 mov     edx, [ebp+var_4]
.text:000020D4                 mov     dword ptr [edx+14h], 0
.text:000020DB                 mov     eax, [ebp+var_4]
.text:000020DE                 mov     dword ptr [eax+20h], 0
.text:000020E5                 mov     eax, [ebp+var_4]
.text:000020E8                 mov     esp, ebp
.text:000020EA                 pop     ebp
.text:000020EB                 retn
.text:000020EB ??0COutBuffer@@QAE@XZ endp
.text:000020EB
.text:000020EB _text           ends
.text:000020EB
.text:000020EC ; ===========================================================================
.text:000020EC
.text:000020EC ; Segment type: Pure code
.text:000020EC ; Segment permissions: Read/Execute
.text:000020EC _text           segment para public 'CODE' use32
.text:000020EC                 assume cs:_text
.text:000020EC                 ;org 20ECh
.text:000020EC ; COMDAT (pick any)
.text:000020EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000020EC
.text:000020EC ; =============== S U B R O U T I N E =======================================
.text:000020EC
.text:000020EC ; Attributes: bp-based frame
.text:000020EC
.text:000020EC ; public: __thiscall NBitl::CDecoder<class CInBuffer>::CDecoder<class CInBuffer>(void)
.text:000020EC                 public ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:000020EC ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:000020EC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+C0p
.text:000020EC
.text:000020EC var_4           = dword ptr -4
.text:000020EC
.text:000020EC                 push    ebp
.text:000020ED                 mov     ebp, esp
.text:000020EF                 push    ecx
.text:000020F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000020F7                 mov     [ebp+var_4], ecx
.text:000020FA                 mov     ecx, [ebp+var_4]
.text:000020FD                 call    ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)
.text:00002102                 mov     eax, [ebp+var_4]
.text:00002105                 add     esp, 4
.text:00002108                 cmp     ebp, esp
.text:0000210A                 call    __RTC_CheckEsp
.text:0000210F                 mov     esp, ebp
.text:00002111                 pop     ebp
.text:00002112                 retn
.text:00002112 ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00002112
.text:00002112 ; ---------------------------------------------------------------------------
.text:00002113                 align 4
.text:00002113 _text           ends
.text:00002113
.text:00002114 ; ===========================================================================
.text:00002114
.text:00002114 ; Segment type: Pure code
.text:00002114 ; Segment permissions: Read/Execute
.text:00002114 _text           segment para public 'CODE' use32
.text:00002114                 assume cs:_text
.text:00002114                 ;org 2114h
.text:00002114 ; COMDAT (pick any)
.text:00002114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002114
.text:00002114 ; =============== S U B R O U T I N E =======================================
.text:00002114
.text:00002114 ; Attributes: bp-based frame
.text:00002114
.text:00002114 ; public: __thiscall IUnknown::IUnknown(void)
.text:00002114                 public ??0IUnknown@@QAE@XZ
.text:00002114 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00002114                                         ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+11p ...
.text:00002114
.text:00002114 var_4           = dword ptr -4
.text:00002114
.text:00002114                 push    ebp
.text:00002115                 mov     ebp, esp
.text:00002117                 push    ecx
.text:00002118                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000211F                 mov     [ebp+var_4], ecx
.text:00002122                 mov     eax, [ebp+var_4]
.text:00002125                 mov     esp, ebp
.text:00002127                 pop     ebp
.text:00002128                 retn
.text:00002128 ??0IUnknown@@QAE@XZ endp
.text:00002128
.text:00002128 ; ---------------------------------------------------------------------------
.text:00002129                 align 4
.text:00002129 _text           ends
.text:00002129
.text:0000212C ; ===========================================================================
.text:0000212C
.text:0000212C ; Segment type: Pure code
.text:0000212C ; Segment permissions: Read/Execute
.text:0000212C _text           segment para public 'CODE' use32
.text:0000212C                 assume cs:_text
.text:0000212C                 ;org 212Ch
.text:0000212C ; COMDAT (pick any)
.text:0000212C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000212C
.text:0000212C ; =============== S U B R O U T I N E =======================================
.text:0000212C
.text:0000212C ; Attributes: bp-based frame
.text:0000212C
.text:0000212C ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::CBaseDecoder<class CInBuffer>(void)
.text:0000212C                 public ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:0000212C ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:0000212C                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)+11p
.text:0000212C
.text:0000212C var_4           = dword ptr -4
.text:0000212C
.text:0000212C                 push    ebp
.text:0000212D                 mov     ebp, esp
.text:0000212F                 push    ecx
.text:00002130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002137                 mov     [ebp+var_4], ecx
.text:0000213A                 mov     ecx, [ebp+var_4]
.text:0000213D                 add     ecx, 8
.text:00002140                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00002145                 mov     eax, [ebp+var_4]
.text:00002148                 add     esp, 4
.text:0000214B                 cmp     ebp, esp
.text:0000214D                 call    __RTC_CheckEsp
.text:00002152                 mov     esp, ebp
.text:00002154                 pop     ebp
.text:00002155                 retn
.text:00002155 ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00002155
.text:00002155 ; ---------------------------------------------------------------------------
.text:00002156                 align 4
.text:00002156 _text           ends
.text:00002156
.text:00002158 ; ===========================================================================
.text:00002158
.text:00002158 ; Segment type: Pure code
.text:00002158 ; Segment permissions: Read/Execute
.text:00002158 _text           segment para public 'CODE' use32
.text:00002158                 assume cs:_text
.text:00002158                 ;org 2158h
.text:00002158 ; COMDAT (pick any)
.text:00002158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002158
.text:00002158 ; =============== S U B R O U T I N E =======================================
.text:00002158
.text:00002158 ; Attributes: bp-based frame
.text:00002158
.text:00002158 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00002158                 public ??0CInBuffer@@QAE@XZ
.text:00002158 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)+14p
.text:00002158
.text:00002158 var_4           = dword ptr -4
.text:00002158
.text:00002158                 push    ebp
.text:00002159                 mov     ebp, esp
.text:0000215B                 push    ecx
.text:0000215C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002163                 mov     [ebp+var_4], ecx
.text:00002166                 mov     ecx, [ebp+var_4]
.text:00002169                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:0000216E                 mov     eax, [ebp+var_4]
.text:00002171                 add     esp, 4
.text:00002174                 cmp     ebp, esp
.text:00002176                 call    __RTC_CheckEsp
.text:0000217B                 mov     esp, ebp
.text:0000217D                 pop     ebp
.text:0000217E                 retn
.text:0000217E ??0CInBuffer@@QAE@XZ endp
.text:0000217E
.text:0000217E ; ---------------------------------------------------------------------------
.text:0000217F                 align 10h
.text:0000217F _text           ends
.text:0000217F
.text:00002180 ; ===========================================================================
.text:00002180
.text:00002180 ; Segment type: Pure code
.text:00002180 ; Segment permissions: Read/Execute
.text:00002180 _text           segment para public 'CODE' use32
.text:00002180                 assume cs:_text
.text:00002180                 ;org 2180h
.text:00002180 ; COMDAT (pick any)
.text:00002180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002180
.text:00002180 ; =============== S U B R O U T I N E =======================================
.text:00002180
.text:00002180 ; Attributes: bp-based frame
.text:00002180
.text:00002180 ; void __thiscall NCompress::NDeflate::CLevels::SubClear(NCompress::NDeflate::CLevels *__hidden this)
.text:00002180                 public ?SubClear@CLevels@NDeflate@NCompress@@QAEXXZ
.text:00002180 ?SubClear@CLevels@NDeflate@NCompress@@QAEXXZ proc near
.text:00002180                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+286p
.text:00002180
.text:00002180 var_8           = dword ptr -8
.text:00002180 var_4           = dword ptr -4
.text:00002180
.text:00002180                 push    ebp
.text:00002181                 mov     ebp, esp
.text:00002183                 sub     esp, 8
.text:00002186                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000218D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002194                 mov     [ebp+var_4], ecx
.text:00002197                 mov     [ebp+var_8], 101h
.text:0000219E                 jmp     short loc_21A9
.text:000021A0 ; ---------------------------------------------------------------------------
.text:000021A0
.text:000021A0 loc_21A0:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+3Bj
.text:000021A0                 mov     eax, [ebp+var_8]
.text:000021A3                 add     eax, 1
.text:000021A6                 mov     [ebp+var_8], eax
.text:000021A9
.text:000021A9 loc_21A9:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+1Ej
.text:000021A9                 cmp     [ebp+var_8], 120h
.text:000021B0                 jnb     short loc_21BD
.text:000021B2                 mov     ecx, [ebp+var_4]
.text:000021B5                 add     ecx, [ebp+var_8]
.text:000021B8                 mov     byte ptr [ecx], 0
.text:000021BB                 jmp     short loc_21A0
.text:000021BD ; ---------------------------------------------------------------------------
.text:000021BD
.text:000021BD loc_21BD:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+30j
.text:000021BD                 mov     [ebp+var_8], 0
.text:000021C4                 jmp     short loc_21CF
.text:000021C6 ; ---------------------------------------------------------------------------
.text:000021C6
.text:000021C6 loc_21C6:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+62j
.text:000021C6                 mov     edx, [ebp+var_8]
.text:000021C9                 add     edx, 1
.text:000021CC                 mov     [ebp+var_8], edx
.text:000021CF
.text:000021CF loc_21CF:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+44j
.text:000021CF                 cmp     [ebp+var_8], 20h ; ' '
.text:000021D3                 jnb     short loc_21E4
.text:000021D5                 mov     eax, [ebp+var_4]
.text:000021D8                 add     eax, [ebp+var_8]
.text:000021DB                 mov     byte ptr [eax+120h], 0
.text:000021E2                 jmp     short loc_21C6
.text:000021E4 ; ---------------------------------------------------------------------------
.text:000021E4
.text:000021E4 loc_21E4:                               ; CODE XREF: NCompress::NDeflate::CLevels::SubClear(void)+53j
.text:000021E4                 mov     esp, ebp
.text:000021E6                 pop     ebp
.text:000021E7                 retn
.text:000021E7 ?SubClear@CLevels@NDeflate@NCompress@@QAEXXZ endp
.text:000021E7
.text:000021E7 _text           ends
.text:000021E7
.text:000021E8 ; ===========================================================================
.text:000021E8
.text:000021E8 ; Segment type: Pure code
.text:000021E8 ; Segment permissions: Read/Execute
.text:000021E8 _text           segment para public 'CODE' use32
.text:000021E8                 assume cs:_text
.text:000021E8                 ;org 21E8h
.text:000021E8 ; COMDAT (pick any)
.text:000021E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000021E8
.text:000021E8 ; =============== S U B R O U T I N E =======================================
.text:000021E8
.text:000021E8 ; Attributes: bp-based frame
.text:000021E8
.text:000021E8 ; void __thiscall NCompress::NDeflate::CLevels::SetFixedLevels(NCompress::NDeflate::CLevels *__hidden this)
.text:000021E8                 public ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ
.text:000021E8 ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ proc near
.text:000021E8                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+10Dp
.text:000021E8
.text:000021E8 var_8           = dword ptr -8
.text:000021E8 var_4           = dword ptr -4
.text:000021E8
.text:000021E8                 push    ebp
.text:000021E9                 mov     ebp, esp
.text:000021EB                 sub     esp, 8
.text:000021EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000021F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000021FC                 mov     [ebp+var_4], ecx
.text:000021FF                 mov     [ebp+var_8], 0
.text:00002206                 jmp     short loc_2211
.text:00002208 ; ---------------------------------------------------------------------------
.text:00002208
.text:00002208 loc_2208:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+3Bj
.text:00002208                 mov     eax, [ebp+var_8]
.text:0000220B                 add     eax, 1
.text:0000220E                 mov     [ebp+var_8], eax
.text:00002211
.text:00002211 loc_2211:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+1Ej
.text:00002211                 cmp     [ebp+var_8], 90h ; 'É'
.text:00002218                 jnb     short loc_2225
.text:0000221A                 mov     ecx, [ebp+var_4]
.text:0000221D                 add     ecx, [ebp+var_8]
.text:00002220                 mov     byte ptr [ecx], 8
.text:00002223                 jmp     short loc_2208
.text:00002225 ; ---------------------------------------------------------------------------
.text:00002225
.text:00002225 loc_2225:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+30j
.text:00002225                 jmp     short loc_2230
.text:00002227 ; ---------------------------------------------------------------------------
.text:00002227
.text:00002227 loc_2227:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+5Aj
.text:00002227                 mov     edx, [ebp+var_8]
.text:0000222A                 add     edx, 1
.text:0000222D                 mov     [ebp+var_8], edx
.text:00002230
.text:00002230 loc_2230:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_2225j
.text:00002230                 cmp     [ebp+var_8], 100h
.text:00002237                 jnb     short loc_2244
.text:00002239                 mov     eax, [ebp+var_4]
.text:0000223C                 add     eax, [ebp+var_8]
.text:0000223F                 mov     byte ptr [eax], 9
.text:00002242                 jmp     short loc_2227
.text:00002244 ; ---------------------------------------------------------------------------
.text:00002244
.text:00002244 loc_2244:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+4Fj
.text:00002244                 jmp     short loc_224F
.text:00002246 ; ---------------------------------------------------------------------------
.text:00002246
.text:00002246 loc_2246:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+79j
.text:00002246                 mov     ecx, [ebp+var_8]
.text:00002249                 add     ecx, 1
.text:0000224C                 mov     [ebp+var_8], ecx
.text:0000224F
.text:0000224F loc_224F:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_2244j
.text:0000224F                 cmp     [ebp+var_8], 118h
.text:00002256                 jnb     short loc_2263
.text:00002258                 mov     edx, [ebp+var_4]
.text:0000225B                 add     edx, [ebp+var_8]
.text:0000225E                 mov     byte ptr [edx], 7
.text:00002261                 jmp     short loc_2246
.text:00002263 ; ---------------------------------------------------------------------------
.text:00002263
.text:00002263 loc_2263:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+6Ej
.text:00002263                 jmp     short loc_226E
.text:00002265 ; ---------------------------------------------------------------------------
.text:00002265
.text:00002265 loc_2265:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+98j
.text:00002265                 mov     eax, [ebp+var_8]
.text:00002268                 add     eax, 1
.text:0000226B                 mov     [ebp+var_8], eax
.text:0000226E
.text:0000226E loc_226E:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void):loc_2263j
.text:0000226E                 cmp     [ebp+var_8], 120h
.text:00002275                 jnb     short loc_2282
.text:00002277                 mov     ecx, [ebp+var_4]
.text:0000227A                 add     ecx, [ebp+var_8]
.text:0000227D                 mov     byte ptr [ecx], 8
.text:00002280                 jmp     short loc_2265
.text:00002282 ; ---------------------------------------------------------------------------
.text:00002282
.text:00002282 loc_2282:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+8Dj
.text:00002282                 mov     [ebp+var_8], 0
.text:00002289                 jmp     short loc_2294
.text:0000228B ; ---------------------------------------------------------------------------
.text:0000228B
.text:0000228B loc_228B:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+BFj
.text:0000228B                 mov     edx, [ebp+var_8]
.text:0000228E                 add     edx, 1
.text:00002291                 mov     [ebp+var_8], edx
.text:00002294
.text:00002294 loc_2294:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+A1j
.text:00002294                 cmp     [ebp+var_8], 20h ; ' '
.text:00002298                 jnb     short loc_22A9
.text:0000229A                 mov     eax, [ebp+var_4]
.text:0000229D                 add     eax, [ebp+var_8]
.text:000022A0                 mov     byte ptr [eax+120h], 5
.text:000022A7                 jmp     short loc_228B
.text:000022A9 ; ---------------------------------------------------------------------------
.text:000022A9
.text:000022A9 loc_22A9:                               ; CODE XREF: NCompress::NDeflate::CLevels::SetFixedLevels(void)+B0j
.text:000022A9                 mov     esp, ebp
.text:000022AB                 pop     ebp
.text:000022AC                 retn
.text:000022AC ?SetFixedLevels@CLevels@NDeflate@NCompress@@QAEXXZ endp
.text:000022AC
.text:000022AC ; ---------------------------------------------------------------------------
.text:000022AD                 align 10h
.text:000022AD _text           ends
.text:000022AD
.text:000022B0 ; ===========================================================================
.text:000022B0
.text:000022B0 ; Segment type: Pure code
.text:000022B0 ; Segment permissions: Read/Execute
.text:000022B0 _text           segment para public 'CODE' use32
.text:000022B0                 assume cs:_text
.text:000022B0                 ;org 22B0h
.text:000022B0 ; COMDAT (pick any)
.text:000022B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022B0
.text:000022B0 ; =============== S U B R O U T I N E =======================================
.text:000022B0
.text:000022B0 ; Attributes: bp-based frame
.text:000022B0
.text:000022B0 ; unsigned int __thiscall NCompress::NDeflate::NDecoder::CCoder::ReadAligned_UInt16(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:000022B0                 public ?ReadAligned_UInt16@CCoder@NDecoder@NDeflate@NCompress@@QAEIXZ
.text:000022B0 ?ReadAligned_UInt16@CCoder@NDecoder@NDeflate@NCompress@@QAEIXZ proc near
.text:000022B0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+B2p
.text:000022B0                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+D8p
.text:000022B0
.text:000022B0 var_8           = dword ptr -8
.text:000022B0 var_4           = dword ptr -4
.text:000022B0
.text:000022B0                 push    ebp
.text:000022B1                 mov     ebp, esp
.text:000022B3                 sub     esp, 8
.text:000022B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000022BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022C4                 mov     [ebp+var_4], ecx
.text:000022C7                 mov     ecx, [ebp+var_4]
.text:000022CA                 add     ecx, 48h ; 'H'
.text:000022CD                 call    ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ ; NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)
.text:000022D2                 movzx   eax, al
.text:000022D5                 mov     [ebp+var_8], eax
.text:000022D8                 mov     ecx, [ebp+var_4]
.text:000022DB                 add     ecx, 48h ; 'H'
.text:000022DE                 call    ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ ; NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)
.text:000022E3                 movzx   eax, al
.text:000022E6                 shl     eax, 8
.text:000022E9                 or      eax, [ebp+var_8]
.text:000022EC                 add     esp, 8
.text:000022EF                 cmp     ebp, esp
.text:000022F1                 call    __RTC_CheckEsp
.text:000022F6                 mov     esp, ebp
.text:000022F8                 pop     ebp
.text:000022F9                 retn
.text:000022F9 ?ReadAligned_UInt16@CCoder@NDecoder@NDeflate@NCompress@@QAEIXZ endp
.text:000022F9
.text:000022F9 ; ---------------------------------------------------------------------------
.text:000022FA                 align 4
.text:000022FA _text           ends
.text:000022FA
.text:000022FC ; ===========================================================================
.text:000022FC
.text:000022FC ; Segment type: Pure code
.text:000022FC ; Segment permissions: Read/Execute
.text:000022FC _text           segment para public 'CODE' use32
.text:000022FC                 assume cs:_text
.text:000022FC                 ;org 22FCh
.text:000022FC ; COMDAT (pick any)
.text:000022FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022FC
.text:000022FC ; =============== S U B R O U T I N E =======================================
.text:000022FC
.text:000022FC ; Attributes: bp-based frame
.text:000022FC
.text:000022FC ; bool __thiscall CLzOutWindow::CopyBlock(CLzOutWindow *this, unsigned int, unsigned int)
.text:000022FC                 public ?CopyBlock@CLzOutWindow@@QAE_NII@Z
.text:000022FC ?CopyBlock@CLzOutWindow@@QAE_NII@Z proc near
.text:000022FC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+44Ap
.text:000022FC
.text:000022FC var_14          = dword ptr -14h
.text:000022FC var_10          = dword ptr -10h
.text:000022FC var_C           = dword ptr -0Ch
.text:000022FC var_8           = dword ptr -8
.text:000022FC var_4           = dword ptr -4
.text:000022FC arg_0           = dword ptr  8
.text:000022FC arg_4           = dword ptr  0Ch
.text:000022FC
.text:000022FC                 push    ebp
.text:000022FD                 mov     ebp, esp
.text:000022FF                 sub     esp, 14h
.text:00002302                 push    esi
.text:00002303                 mov     eax, 0CCCCCCCCh
.text:00002308                 mov     [ebp+var_14], eax
.text:0000230B                 mov     [ebp+var_10], eax
.text:0000230E                 mov     [ebp+var_C], eax
.text:00002311                 mov     [ebp+var_8], eax
.text:00002314                 mov     [ebp+var_4], eax
.text:00002317                 mov     [ebp+var_4], ecx
.text:0000231A                 mov     eax, [ebp+var_4]
.text:0000231D                 mov     ecx, [eax+4]
.text:00002320                 sub     ecx, [ebp+arg_0]
.text:00002323                 sub     ecx, 1
.text:00002326                 mov     [ebp+var_8], ecx
.text:00002329                 mov     edx, [ebp+var_4]
.text:0000232C                 mov     eax, [ebp+arg_0]
.text:0000232F                 cmp     eax, [edx+4]
.text:00002332                 jb      short loc_235D
.text:00002334                 mov     ecx, [ebp+var_4]
.text:00002337                 movzx   edx, byte ptr [ecx+24h]
.text:0000233B                 test    edx, edx
.text:0000233D                 jz      short loc_234A
.text:0000233F                 mov     eax, [ebp+var_4]
.text:00002342                 mov     ecx, [ebp+arg_0]
.text:00002345                 cmp     ecx, [eax+10h]
.text:00002348                 jb      short loc_2351
.text:0000234A
.text:0000234A loc_234A:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+41j
.text:0000234A                 xor     al, al
.text:0000234C                 jmp     loc_2439
.text:00002351 ; ---------------------------------------------------------------------------
.text:00002351
.text:00002351 loc_2351:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+4Cj
.text:00002351                 mov     edx, [ebp+var_4]
.text:00002354                 mov     eax, [ebp+var_8]
.text:00002357                 add     eax, [edx+10h]
.text:0000235A                 mov     [ebp+var_8], eax
.text:0000235D
.text:0000235D loc_235D:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+36j
.text:0000235D                 mov     ecx, [ebp+var_4]
.text:00002360                 mov     edx, [ebp+var_4]
.text:00002363                 mov     eax, [ecx+8]
.text:00002366                 sub     eax, [edx+4]
.text:00002369                 cmp     eax, [ebp+arg_4]
.text:0000236C                 jbe     short loc_23CD
.text:0000236E                 mov     ecx, [ebp+var_4]
.text:00002371                 mov     edx, [ecx+10h]
.text:00002374                 sub     edx, [ebp+var_8]
.text:00002377                 cmp     edx, [ebp+arg_4]
.text:0000237A                 jbe     short loc_23CD
.text:0000237C                 mov     eax, [ebp+var_4]
.text:0000237F                 mov     ecx, [eax]
.text:00002381                 add     ecx, [ebp+var_8]
.text:00002384                 mov     [ebp+var_C], ecx
.text:00002387                 mov     edx, [ebp+var_4]
.text:0000238A                 mov     eax, [edx]
.text:0000238C                 mov     ecx, [ebp+var_4]
.text:0000238F                 add     eax, [ecx+4]
.text:00002392                 mov     [ebp+var_10], eax
.text:00002395                 mov     edx, [ebp+var_4]
.text:00002398                 mov     eax, [edx+4]
.text:0000239B                 add     eax, [ebp+arg_4]
.text:0000239E                 mov     ecx, [ebp+var_4]
.text:000023A1                 mov     [ecx+4], eax
.text:000023A4
.text:000023A4 loc_23A4:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CDj
.text:000023A4                 mov     edx, [ebp+var_10]
.text:000023A7                 mov     eax, [ebp+var_C]
.text:000023AA                 mov     cl, [eax]
.text:000023AC                 mov     [edx], cl
.text:000023AE                 mov     edx, [ebp+var_10]
.text:000023B1                 add     edx, 1
.text:000023B4                 mov     [ebp+var_10], edx
.text:000023B7                 mov     eax, [ebp+var_C]
.text:000023BA                 add     eax, 1
.text:000023BD                 mov     [ebp+var_C], eax
.text:000023C0                 mov     ecx, [ebp+arg_4]
.text:000023C3                 sub     ecx, 1
.text:000023C6                 mov     [ebp+arg_4], ecx
.text:000023C9                 jnz     short loc_23A4
.text:000023CB                 jmp     short loc_2437
.text:000023CD ; ---------------------------------------------------------------------------
.text:000023CD
.text:000023CD loc_23CD:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+70j
.text:000023CD                                         ; CLzOutWindow::CopyBlock(uint,uint)+7Ej ...
.text:000023CD                 mov     edx, [ebp+var_4]
.text:000023D0                 mov     eax, [ebp+var_8]
.text:000023D3                 cmp     eax, [edx+10h]
.text:000023D6                 jnz     short loc_23DF
.text:000023D8                 mov     [ebp+var_8], 0
.text:000023DF
.text:000023DF loc_23DF:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+DAj
.text:000023DF                 mov     ecx, [ebp+var_4]
.text:000023E2                 mov     edx, [ecx+4]
.text:000023E5                 mov     [ebp+var_14], edx
.text:000023E8                 mov     eax, [ebp+var_4]
.text:000023EB                 mov     ecx, [eax]
.text:000023ED                 mov     edx, [ebp+var_4]
.text:000023F0                 mov     eax, [edx]
.text:000023F2                 mov     edx, [ebp+var_14]
.text:000023F5                 mov     esi, [ebp+var_8]
.text:000023F8                 mov     cl, [ecx+esi]
.text:000023FB                 mov     [eax+edx], cl
.text:000023FE                 mov     edx, [ebp+var_14]
.text:00002401                 add     edx, 1
.text:00002404                 mov     [ebp+var_14], edx
.text:00002407                 mov     eax, [ebp+var_8]
.text:0000240A                 add     eax, 1
.text:0000240D                 mov     [ebp+var_8], eax
.text:00002410                 mov     ecx, [ebp+var_4]
.text:00002413                 mov     edx, [ebp+var_14]
.text:00002416                 mov     [ecx+4], edx
.text:00002419                 mov     eax, [ebp+var_4]
.text:0000241C                 mov     ecx, [ebp+var_14]
.text:0000241F                 cmp     ecx, [eax+8]
.text:00002422                 jnz     short loc_242C
.text:00002424                 mov     ecx, [ebp+var_4] ; this
.text:00002427                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:0000242C
.text:0000242C loc_242C:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+126j
.text:0000242C                 mov     edx, [ebp+arg_4]
.text:0000242F                 sub     edx, 1
.text:00002432                 mov     [ebp+arg_4], edx
.text:00002435                 jnz     short loc_23CD
.text:00002437
.text:00002437 loc_2437:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CFj
.text:00002437                 mov     al, 1
.text:00002439
.text:00002439 loc_2439:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+50j
.text:00002439                 pop     esi
.text:0000243A                 add     esp, 14h
.text:0000243D                 cmp     ebp, esp
.text:0000243F                 call    __RTC_CheckEsp
.text:00002444                 mov     esp, ebp
.text:00002446                 pop     ebp
.text:00002447                 retn    8
.text:00002447 ?CopyBlock@CLzOutWindow@@QAE_NII@Z endp
.text:00002447
.text:00002447 ; ---------------------------------------------------------------------------
.text:0000244A                 align 4
.text:0000244A _text           ends
.text:0000244A
.text:0000244C ; ===========================================================================
.text:0000244C
.text:0000244C ; Segment type: Pure code
.text:0000244C ; Segment permissions: Read/Execute
.text:0000244C _text           segment para public 'CODE' use32
.text:0000244C                 assume cs:_text
.text:0000244C                 ;org 244Ch
.text:0000244C ; COMDAT (pick any)
.text:0000244C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000244C
.text:0000244C ; =============== S U B R O U T I N E =======================================
.text:0000244C
.text:0000244C ; Attributes: bp-based frame
.text:0000244C
.text:0000244C ; void __thiscall CLzOutWindow::PutByte(CLzOutWindow *this, unsigned __int8)
.text:0000244C                 public ?PutByte@CLzOutWindow@@QAEXE@Z
.text:0000244C ?PutByte@CLzOutWindow@@QAEXE@Z proc near
.text:0000244C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+133p
.text:0000244C                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+26Ap ...
.text:0000244C
.text:0000244C var_8           = dword ptr -8
.text:0000244C var_4           = dword ptr -4
.text:0000244C arg_0           = byte ptr  8
.text:0000244C
.text:0000244C                 push    ebp
.text:0000244D                 mov     ebp, esp
.text:0000244F                 sub     esp, 8
.text:00002452                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002459                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002460                 mov     [ebp+var_4], ecx
.text:00002463                 mov     eax, [ebp+var_4]
.text:00002466                 mov     ecx, [eax+4]
.text:00002469                 mov     [ebp+var_8], ecx
.text:0000246C                 mov     edx, [ebp+var_4]
.text:0000246F                 mov     eax, [edx]
.text:00002471                 mov     ecx, [ebp+var_8]
.text:00002474                 mov     dl, [ebp+arg_0]
.text:00002477                 mov     [eax+ecx], dl
.text:0000247A                 mov     eax, [ebp+var_8]
.text:0000247D                 add     eax, 1
.text:00002480                 mov     [ebp+var_8], eax
.text:00002483                 mov     ecx, [ebp+var_4]
.text:00002486                 mov     edx, [ebp+var_8]
.text:00002489                 mov     [ecx+4], edx
.text:0000248C                 mov     eax, [ebp+var_4]
.text:0000248F                 mov     ecx, [ebp+var_8]
.text:00002492                 cmp     ecx, [eax+8]
.text:00002495                 jnz     short loc_249F
.text:00002497                 mov     ecx, [ebp+var_4] ; this
.text:0000249A                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:0000249F
.text:0000249F loc_249F:                               ; CODE XREF: CLzOutWindow::PutByte(uchar)+49j
.text:0000249F                 add     esp, 8
.text:000024A2                 cmp     ebp, esp
.text:000024A4                 call    __RTC_CheckEsp
.text:000024A9                 mov     esp, ebp
.text:000024AB                 pop     ebp
.text:000024AC                 retn    4
.text:000024AC ?PutByte@CLzOutWindow@@QAEXE@Z endp
.text:000024AC
.text:000024AC ; ---------------------------------------------------------------------------
.text:000024AF                 align 10h
.text:000024AF _text           ends
.text:000024AF
.text:000024B0 ; ===========================================================================
.text:000024B0
.text:000024B0 ; Segment type: Pure code
.text:000024B0 ; Segment permissions: Read/Execute
.text:000024B0 _text           segment para public 'CODE' use32
.text:000024B0                 assume cs:_text
.text:000024B0                 ;org 24B0h
.text:000024B0 ; COMDAT (pick any)
.text:000024B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024B0
.text:000024B0 ; =============== S U B R O U T I N E =======================================
.text:000024B0
.text:000024B0 ; Attributes: bp-based frame
.text:000024B0
.text:000024B0 ; unsigned __int8 __thiscall CLzOutWindow::GetByte(CLzOutWindow *this, unsigned int)
.text:000024B0                 public ?GetByte@CLzOutWindow@@QBEEI@Z
.text:000024B0 ?GetByte@CLzOutWindow@@QBEEI@Z proc near
.text:000024B0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+120p
.text:000024B0
.text:000024B0 var_8           = dword ptr -8
.text:000024B0 var_4           = dword ptr -4
.text:000024B0 arg_0           = dword ptr  8
.text:000024B0
.text:000024B0                 push    ebp
.text:000024B1                 mov     ebp, esp
.text:000024B3                 sub     esp, 8
.text:000024B6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000024BD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000024C4                 mov     [ebp+var_4], ecx
.text:000024C7                 mov     eax, [ebp+var_4]
.text:000024CA                 mov     ecx, [eax+4]
.text:000024CD                 sub     ecx, [ebp+arg_0]
.text:000024D0                 sub     ecx, 1
.text:000024D3                 mov     [ebp+var_8], ecx
.text:000024D6                 mov     edx, [ebp+var_4]
.text:000024D9                 mov     eax, [ebp+arg_0]
.text:000024DC                 cmp     eax, [edx+4]
.text:000024DF                 jb      short loc_24ED
.text:000024E1                 mov     ecx, [ebp+var_4]
.text:000024E4                 mov     edx, [ebp+var_8]
.text:000024E7                 add     edx, [ecx+10h]
.text:000024EA                 mov     [ebp+var_8], edx
.text:000024ED
.text:000024ED loc_24ED:                               ; CODE XREF: CLzOutWindow::GetByte(uint)+2Fj
.text:000024ED                 mov     eax, [ebp+var_4]
.text:000024F0                 mov     ecx, [eax]
.text:000024F2                 mov     edx, [ebp+var_8]
.text:000024F5                 mov     al, [ecx+edx]
.text:000024F8                 mov     esp, ebp
.text:000024FA                 pop     ebp
.text:000024FB                 retn    4
.text:000024FB ?GetByte@CLzOutWindow@@QBEEI@Z endp
.text:000024FB
.text:000024FB ; ---------------------------------------------------------------------------
.text:000024FE                 align 10h
.text:000024FE _text           ends
.text:000024FE
.text:00002500 ; ===========================================================================
.text:00002500
.text:00002500 ; Segment type: Pure code
.text:00002500 ; Segment permissions: Read/Execute
.text:00002500 _text           segment para public 'CODE' use32
.text:00002500                 assume cs:_text
.text:00002500                 ;org 2500h
.text:00002500 ; COMDAT (pick any)
.text:00002500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002500
.text:00002500 ; =============== S U B R O U T I N E =======================================
.text:00002500
.text:00002500 ; Attributes: bp-based frame
.text:00002500
.text:00002500 ; __int32 __thiscall NCompress::NDeflate::NDecoder::CCoder::InitInStream(NCompress::NDeflate::NDecoder::CCoder *this, bool)
.text:00002500                 public ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z
.text:00002500 ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z proc near
.text:00002500                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+9Cp
.text:00002500
.text:00002500 var_4           = dword ptr -4
.text:00002500 arg_0           = byte ptr  8
.text:00002500
.text:00002500                 push    ebp
.text:00002501                 mov     ebp, esp
.text:00002503                 push    ecx
.text:00002504                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000250B                 mov     [ebp+var_4], ecx
.text:0000250E                 push    20000h
.text:00002513                 mov     ecx, [ebp+var_4]
.text:00002516                 add     ecx, 48h ; 'H'
.text:00002519                 call    ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create(uint)
.text:0000251E                 movzx   eax, al
.text:00002521                 test    eax, eax
.text:00002523                 jnz     short loc_252C
.text:00002525                 mov     eax, 8007000Eh
.text:0000252A                 jmp     short loc_254B
.text:0000252C ; ---------------------------------------------------------------------------
.text:0000252C
.text:0000252C loc_252C:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+23j
.text:0000252C                 movzx   ecx, [ebp+arg_0]
.text:00002530                 test    ecx, ecx
.text:00002532                 jz      short loc_2549
.text:00002534                 mov     ecx, [ebp+var_4]
.text:00002537                 add     ecx, 48h ; 'H'
.text:0000253A                 call    ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Init(void)
.text:0000253F                 mov     edx, [ebp+var_4]
.text:00002542                 mov     byte ptr [edx+0D5Ah], 0
.text:00002549
.text:00002549 loc_2549:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+32j
.text:00002549                 xor     eax, eax
.text:0000254B
.text:0000254B loc_254B:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+2Aj
.text:0000254B                 add     esp, 4
.text:0000254E                 cmp     ebp, esp
.text:00002550                 call    __RTC_CheckEsp
.text:00002555                 mov     esp, ebp
.text:00002557                 pop     ebp
.text:00002558                 retn    4
.text:00002558 ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z endp
.text:00002558
.text:00002558 ; ---------------------------------------------------------------------------
.text:0000255B                 align 4
.text:0000255B _text           ends
.text:0000255B
.data:0000255C ; ===========================================================================
.data:0000255C
.data:0000255C ; Segment type: Pure data
.data:0000255C ; Segment permissions: Read/Write
.data:0000255C _data           segment dword public 'DATA' use32
.data:0000255C                 assume cs:_data
.data:0000255C                 ;org 255Ch
.data:0000255C ; COMDAT (pick any)
.data:0000255C                 public ??_R0?AUCInBufferException@@@8
.data:0000255C ; struct CInBufferException `RTTI Type Descriptor'
.data:0000255C ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:0000255C                                         ; DATA XREF: .xdata$x:00001524o
.data:0000255C                                         ; .xdata$x:0000159Co
.data:0000255C                                         ; const type_info::`vftable'
.data:00002560                 db    0
.data:00002561                 db    0
.data:00002562                 db    0
.data:00002563                 db    0
.data:00002564                 db  2Eh ; .
.data:00002565                 db  3Fh ; ?
.data:00002566                 db  41h ; A
.data:00002567                 db  55h ; U
.data:00002568                 db  43h ; C
.data:00002569                 db  49h ; I
.data:0000256A                 db  6Eh ; n
.data:0000256B                 db  42h ; B
.data:0000256C                 db  75h ; u
.data:0000256D                 db  66h ; f
.data:0000256E                 db  66h ; f
.data:0000256F                 db  65h ; e
.data:00002570                 db  72h ; r
.data:00002571                 db  45h ; E
.data:00002572                 db  78h ; x
.data:00002573                 db  63h ; c
.data:00002574                 db  65h ; e
.data:00002575                 db  70h ; p
.data:00002576                 db  74h ; t
.data:00002577                 db  69h ; i
.data:00002578                 db  6Fh ; o
.data:00002579                 db  6Eh ; n
.data:0000257A                 db  40h ; @
.data:0000257B                 db  40h ; @
.data:0000257C                 db    0
.data:0000257D                 align 10h
.data:0000257D _data           ends
.data:0000257D
.data:00002580 ; ===========================================================================
.data:00002580
.data:00002580 ; Segment type: Pure data
.data:00002580 ; Segment permissions: Read/Write
.data:00002580 _data           segment dword public 'DATA' use32
.data:00002580                 assume cs:_data
.data:00002580                 ;org 2580h
.data:00002580 ; COMDAT (pick any)
.data:00002580                 public ??_R0?AUCOutBufferException@@@8
.data:00002580 ; struct COutBufferException `RTTI Type Descriptor'
.data:00002580 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00002580                                         ; DATA XREF: .xdata$x:00001534o
.data:00002580                                         ; .xdata$x:000015ACo
.data:00002580                                         ; const type_info::`vftable'
.data:00002584                 align 8
.data:00002588 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:000025A2                 align 4
.data:000025A2 _data           ends
.data:000025A2
.text:000025A4 ; ===========================================================================
.text:000025A4
.text:000025A4 ; Segment type: Pure code
.text:000025A4 ; Segment permissions: Read/Execute
.text:000025A4 _text           segment para public 'CODE' use32
.text:000025A4                 assume cs:_text
.text:000025A4                 ;org 25A4h
.text:000025A4 ; COMDAT (pick any)
.text:000025A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025A4
.text:000025A4 ; =============== S U B R O U T I N E =======================================
.text:000025A4
.text:000025A4 ; Attributes: bp-based frame
.text:000025A4
.text:000025A4 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:000025A4                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:000025A4 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000025A4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+57p
.text:000025A4
.text:000025A4 var_4           = dword ptr -4
.text:000025A4 arg_0           = dword ptr  8
.text:000025A4
.text:000025A4                 push    ebp
.text:000025A5                 mov     ebp, esp
.text:000025A7                 push    ecx
.text:000025A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025AF                 mov     [ebp+var_4], ecx
.text:000025B2                 mov     eax, [ebp+var_4]
.text:000025B5                 mov     ecx, [ebp+arg_0]
.text:000025B8                 mov     [eax+14h], ecx
.text:000025BB                 mov     esp, ebp
.text:000025BD                 pop     ebp
.text:000025BE                 retn    4
.text:000025BE ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:000025BE
.text:000025BE ; ---------------------------------------------------------------------------
.text:000025C1                 align 4
.text:000025C1 _text           ends
.text:000025C1
.text:000025C4 ; ===========================================================================
.text:000025C4
.text:000025C4 ; Segment type: Pure code
.text:000025C4 ; Segment permissions: Read/Execute
.text:000025C4 _text           segment para public 'CODE' use32
.text:000025C4                 assume cs:_text
.text:000025C4                 ;org 25C4h
.text:000025C4 ; COMDAT (pick any)
.text:000025C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025C4
.text:000025C4 ; =============== S U B R O U T I N E =======================================
.text:000025C4
.text:000025C4 ; Attributes: bp-based frame
.text:000025C4
.text:000025C4 ; __int32 __thiscall NCompress::NDeflate::NDecoder::CCoder::Flush(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:000025C4                 public ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ
.text:000025C4 ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ proc near
.text:000025C4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+2E4p
.text:000025C4                                         ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+97p ...
.text:000025C4
.text:000025C4 var_4           = dword ptr -4
.text:000025C4
.text:000025C4                 push    ebp
.text:000025C5                 mov     ebp, esp
.text:000025C7                 push    ecx
.text:000025C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025CF                 mov     [ebp+var_4], ecx
.text:000025D2                 mov     ecx, [ebp+var_4]
.text:000025D5                 add     ecx, 18h        ; this
.text:000025D8                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:000025DD                 add     esp, 4
.text:000025E0                 cmp     ebp, esp
.text:000025E2                 call    __RTC_CheckEsp
.text:000025E7                 mov     esp, ebp
.text:000025E9                 pop     ebp
.text:000025EA                 retn
.text:000025EA ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ endp
.text:000025EA
.text:000025EA ; ---------------------------------------------------------------------------
.text:000025EB                 align 4
.text:000025EB _text           ends
.text:000025EB
.text:000025EC ; ===========================================================================
.text:000025EC
.text:000025EC ; Segment type: Pure code
.text:000025EC ; Segment permissions: Read/Execute
.text:000025EC _text           segment para public 'CODE' use32
.text:000025EC                 assume cs:_text
.text:000025EC                 ;org 25ECh
.text:000025EC ; COMDAT (pick any)
.text:000025EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025EC
.text:000025EC ; =============== S U B R O U T I N E =======================================
.text:000025EC
.text:000025EC ; Attributes: bp-based frame
.text:000025EC
.text:000025EC ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::CCoderReleaser(NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser *this, struct NCompress::NDeflate::NDecoder::CCoder *)
.text:000025EC                 public ??0CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@PAV1234@@Z
.text:000025EC ??0CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@PAV1234@@Z proc near
.text:000025EC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+63p
.text:000025EC
.text:000025EC var_4           = dword ptr -4
.text:000025EC arg_0           = dword ptr  8
.text:000025EC
.text:000025EC                 push    ebp
.text:000025ED                 mov     ebp, esp
.text:000025EF                 push    ecx
.text:000025F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025F7                 mov     [ebp+var_4], ecx
.text:000025FA                 mov     eax, [ebp+var_4]
.text:000025FD                 mov     ecx, [ebp+arg_0]
.text:00002600                 mov     [eax], ecx
.text:00002602                 mov     edx, [ebp+var_4]
.text:00002605                 mov     byte ptr [edx+4], 1
.text:00002609                 mov     eax, [ebp+var_4]
.text:0000260C                 mov     esp, ebp
.text:0000260E                 pop     ebp
.text:0000260F                 retn    4
.text:0000260F ??0CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@PAV1234@@Z endp
.text:0000260F
.text:0000260F ; ---------------------------------------------------------------------------
.text:00002612                 align 4
.text:00002612 _text           ends
.text:00002612
.text:00002614 ; ===========================================================================
.text:00002614
.text:00002614 ; Segment type: Pure code
.text:00002614 ; Segment permissions: Read/Execute
.text:00002614 _text           segment para public 'CODE' use32
.text:00002614                 assume cs:_text
.text:00002614                 ;org 2614h
.text:00002614 ; COMDAT (pick any)
.text:00002614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002614
.text:00002614 ; =============== S U B R O U T I N E =======================================
.text:00002614
.text:00002614 ; Attributes: bp-based frame
.text:00002614
.text:00002614 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser *__hidden this)
.text:00002614                 public ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ
.text:00002614 ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00002614                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1B4p
.text:00002614                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+269p ...
.text:00002614
.text:00002614 var_4           = dword ptr -4
.text:00002614
.text:00002614                 push    ebp
.text:00002615                 mov     ebp, esp
.text:00002617                 push    ecx
.text:00002618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000261F                 mov     [ebp+var_4], ecx
.text:00002622                 mov     eax, [ebp+var_4]
.text:00002625                 movzx   ecx, byte ptr [eax+4]
.text:00002629                 test    ecx, ecx
.text:0000262B                 jz      short loc_2637
.text:0000262D                 mov     edx, [ebp+var_4]
.text:00002630                 mov     ecx, [edx]      ; this
.text:00002632                 call    ?Flush@CCoder@NDecoder@NDeflate@NCompress@@AAEJXZ ; NCompress::NDeflate::NDecoder::CCoder::Flush(void)
.text:00002637
.text:00002637 loc_2637:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoderReleaser::~CCoderReleaser(void)+17j
.text:00002637                 add     esp, 4
.text:0000263A                 cmp     ebp, esp
.text:0000263C                 call    __RTC_CheckEsp
.text:00002641                 mov     esp, ebp
.text:00002643                 pop     ebp
.text:00002644                 retn
.text:00002644 ??1CCoderReleaser@CCoder@NDecoder@NDeflate@NCompress@@QAE@XZ endp
.text:00002644
.text:00002644 ; ---------------------------------------------------------------------------
.text:00002645                 align 4
.text:00002645 _text           ends
.text:00002645
.text:00002648 ; ===========================================================================
.text:00002648
.text:00002648 ; Segment type: Pure code
.text:00002648 ; Segment permissions: Read/Execute
.text:00002648 _text           segment para public 'CODE' use32
.text:00002648                 assume cs:_text
.text:00002648                 ;org 2648h
.text:00002648 ; COMDAT (pick any)
.text:00002648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002648
.text:00002648 ; =============== S U B R O U T I N E =======================================
.text:00002648
.text:00002648 ; Attributes: bp-based frame
.text:00002648
.text:00002648 ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::InputEofError(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00002648                 public ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ
.text:00002648 ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ proc near
.text:00002648                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+30Dp
.text:00002648
.text:00002648 var_4           = dword ptr -4
.text:00002648
.text:00002648                 push    ebp
.text:00002649                 mov     ebp, esp
.text:0000264B                 push    ecx
.text:0000264C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002653                 mov     [ebp+var_4], ecx
.text:00002656                 mov     ecx, [ebp+var_4]
.text:00002659                 add     ecx, 48h ; 'H'
.text:0000265C                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:00002661                 add     esp, 4
.text:00002664                 cmp     ebp, esp
.text:00002666                 call    __RTC_CheckEsp
.text:0000266B                 mov     esp, ebp
.text:0000266D                 pop     ebp
.text:0000266E                 retn
.text:0000266E ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ endp
.text:0000266E
.text:0000266E ; ---------------------------------------------------------------------------
.text:0000266F                 align 10h
.text:0000266F _text           ends
.text:0000266F
.text:00002670 ; ===========================================================================
.text:00002670
.text:00002670 ; Segment type: Pure code
.text:00002670 ; Segment permissions: Read/Execute
.text:00002670 _text           segment para public 'CODE' use32
.text:00002670                 assume cs:_text
.text:00002670                 ;org 2670h
.text:00002670 ; COMDAT (pick any)
.text:00002670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002670
.text:00002670 ; =============== S U B R O U T I N E =======================================
.text:00002670
.text:00002670 ; Attributes: bp-based frame
.text:00002670
.text:00002670 ; void __thiscall COutBuffer::SetMemStream(COutBuffer *this, unsigned __int8 *)
.text:00002670                 public ?SetMemStream@COutBuffer@@QAEXPAE@Z
.text:00002670 ?SetMemStream@COutBuffer@@QAEXPAE@Z proc near
.text:00002670                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+6Cp
.text:00002670                                         ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)+110p
.text:00002670
.text:00002670 var_4           = dword ptr -4
.text:00002670 arg_0           = dword ptr  8
.text:00002670
.text:00002670                 push    ebp
.text:00002671                 mov     ebp, esp
.text:00002673                 push    ecx
.text:00002674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000267B                 mov     [ebp+var_4], ecx
.text:0000267E                 mov     eax, [ebp+var_4]
.text:00002681                 mov     ecx, [ebp+arg_0]
.text:00002684                 mov     [eax+20h], ecx
.text:00002687                 mov     esp, ebp
.text:00002689                 pop     ebp
.text:0000268A                 retn    4
.text:0000268A ?SetMemStream@COutBuffer@@QAEXPAE@Z endp
.text:0000268A
.text:0000268A ; ---------------------------------------------------------------------------
.text:0000268D                 align 10h
.text:0000268D _text           ends
.text:0000268D
.text:00002690 ; ===========================================================================
.text:00002690
.text:00002690 ; Segment type: Pure code
.text:00002690 ; Segment permissions: Read/Execute
.text:00002690 _text           segment para public 'CODE' use32
.text:00002690                 assume cs:_text
.text:00002690                 ;org 2690h
.text:00002690 ; COMDAT (pick any)
.text:00002690                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002690
.text:00002690 ; =============== S U B R O U T I N E =======================================
.text:00002690
.text:00002690 ; Attributes: bp-based frame
.text:00002690
.text:00002690 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00002690                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00002690 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00002690                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+B5p
.text:00002690
.text:00002690 var_4           = dword ptr -4
.text:00002690
.text:00002690                 push    ebp
.text:00002691                 mov     ebp, esp
.text:00002693                 push    ecx
.text:00002694                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000269B                 mov     [ebp+var_4], ecx
.text:0000269E                 mov     eax, [ebp+var_4]
.text:000026A1                 mov     dword ptr [eax], 0
.text:000026A7                 mov     eax, [ebp+var_4]
.text:000026AA                 mov     esp, ebp
.text:000026AC                 pop     ebp
.text:000026AD                 retn
.text:000026AD ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000026AD
.text:000026AD ; ---------------------------------------------------------------------------
.text:000026AE                 align 10h
.text:000026AE _text           ends
.text:000026AE
.text:000026B0 ; ===========================================================================
.text:000026B0
.text:000026B0 ; Segment type: Pure code
.text:000026B0 ; Segment permissions: Read/Execute
.text:000026B0 _text           segment para public 'CODE' use32
.text:000026B0                 assume cs:_text
.text:000026B0                 ;org 26B0h
.text:000026B0 ; COMDAT (pick any)
.text:000026B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026B0
.text:000026B0 ; =============== S U B R O U T I N E =======================================
.text:000026B0
.text:000026B0 ; Attributes: bp-based frame
.text:000026B0
.text:000026B0 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:000026B0                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000026B0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000026B0                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+7Ap
.text:000026B0                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1+6j
.text:000026B0
.text:000026B0 var_4           = dword ptr -4
.text:000026B0
.text:000026B0                 push    ebp
.text:000026B1                 mov     ebp, esp
.text:000026B3                 push    ecx
.text:000026B4                 push    esi
.text:000026B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026BC                 mov     [ebp+var_4], ecx
.text:000026BF                 mov     eax, [ebp+var_4]
.text:000026C2                 cmp     dword ptr [eax], 0
.text:000026C5                 jz      short loc_26E2
.text:000026C7                 mov     ecx, [ebp+var_4]
.text:000026CA                 mov     edx, [ecx]
.text:000026CC                 mov     eax, [ebp+var_4]
.text:000026CF                 mov     ecx, [eax]
.text:000026D1                 mov     edx, [edx]
.text:000026D3                 mov     esi, esp
.text:000026D5                 push    ecx
.text:000026D6                 mov     eax, [edx+8]
.text:000026D9                 call    eax
.text:000026DB                 cmp     esi, esp
.text:000026DD                 call    __RTC_CheckEsp
.text:000026E2
.text:000026E2 loc_26E2:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:000026E2                 pop     esi
.text:000026E3                 add     esp, 4
.text:000026E6                 cmp     ebp, esp
.text:000026E8                 call    __RTC_CheckEsp
.text:000026ED                 mov     esp, ebp
.text:000026EF                 pop     ebp
.text:000026F0                 retn
.text:000026F0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000026F0
.text:000026F0 ; ---------------------------------------------------------------------------
.text:000026F1                 align 4
.text:000026F1 _text           ends
.text:000026F1
.text:000026F4 ; ===========================================================================
.text:000026F4
.text:000026F4 ; Segment type: Pure code
.text:000026F4 ; Segment permissions: Read/Execute
.text:000026F4 _text           segment para public 'CODE' use32
.text:000026F4                 assume cs:_text
.text:000026F4                 ;org 26F4h
.text:000026F4 ; COMDAT (pick any)
.text:000026F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026F4
.text:000026F4 ; =============== S U B R O U T I N E =======================================
.text:000026F4
.text:000026F4 ; Attributes: bp-based frame
.text:000026F4
.text:000026F4 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:000026F4                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:000026F4 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:000026F4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)+9p
.text:000026F4
.text:000026F4 var_4           = dword ptr -4
.text:000026F4
.text:000026F4                 push    ebp
.text:000026F5                 mov     ebp, esp
.text:000026F7                 push    ecx
.text:000026F8                 push    esi
.text:000026F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002700                 mov     [ebp+var_4], ecx
.text:00002703                 mov     eax, [ebp+var_4]
.text:00002706                 cmp     dword ptr [eax], 0
.text:00002709                 jz      short loc_272F
.text:0000270B                 mov     ecx, [ebp+var_4]
.text:0000270E                 mov     edx, [ecx]
.text:00002710                 mov     eax, [ebp+var_4]
.text:00002713                 mov     ecx, [eax]
.text:00002715                 mov     edx, [edx]
.text:00002717                 mov     esi, esp
.text:00002719                 push    ecx
.text:0000271A                 mov     eax, [edx+8]
.text:0000271D                 call    eax
.text:0000271F                 cmp     esi, esp
.text:00002721                 call    __RTC_CheckEsp
.text:00002726                 mov     ecx, [ebp+var_4]
.text:00002729                 mov     dword ptr [ecx], 0
.text:0000272F
.text:0000272F loc_272F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000272F                 pop     esi
.text:00002730                 add     esp, 4
.text:00002733                 cmp     ebp, esp
.text:00002735                 call    __RTC_CheckEsp
.text:0000273A                 mov     esp, ebp
.text:0000273C                 pop     ebp
.text:0000273D                 retn
.text:0000273D ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:0000273D
.text:0000273D ; ---------------------------------------------------------------------------
.text:0000273E                 align 10h
.text:0000273E _text           ends
.text:0000273E
.text:00002740 ; ===========================================================================
.text:00002740
.text:00002740 ; Segment type: Pure code
.text:00002740 ; Segment permissions: Read/Execute
.text:00002740 _text           segment para public 'CODE' use32
.text:00002740                 assume cs:_text
.text:00002740                 ;org 2740h
.text:00002740 ; COMDAT (pick any)
.text:00002740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002740
.text:00002740 ; =============== S U B R O U T I N E =======================================
.text:00002740
.text:00002740 ; Attributes: bp-based frame
.text:00002740
.text:00002740 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00002740                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00002740 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00002740                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)+Dp
.text:00002740
.text:00002740 var_4           = dword ptr -4
.text:00002740 arg_0           = dword ptr  8
.text:00002740
.text:00002740                 push    ebp
.text:00002741                 mov     ebp, esp
.text:00002743                 push    ecx
.text:00002744                 push    esi
.text:00002745                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000274C                 mov     [ebp+var_4], ecx
.text:0000274F                 cmp     [ebp+arg_0], 0
.text:00002753                 jz      short loc_276C
.text:00002755                 mov     eax, [ebp+arg_0]
.text:00002758                 mov     ecx, [eax]
.text:0000275A                 mov     esi, esp
.text:0000275C                 mov     edx, [ebp+arg_0]
.text:0000275F                 push    edx
.text:00002760                 mov     eax, [ecx+4]
.text:00002763                 call    eax
.text:00002765                 cmp     esi, esp
.text:00002767                 call    __RTC_CheckEsp
.text:0000276C
.text:0000276C loc_276C:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:0000276C                 mov     ecx, [ebp+var_4]
.text:0000276F                 cmp     dword ptr [ecx], 0
.text:00002772                 jz      short loc_278F
.text:00002774                 mov     edx, [ebp+var_4]
.text:00002777                 mov     eax, [edx]
.text:00002779                 mov     ecx, [ebp+var_4]
.text:0000277C                 mov     edx, [ecx]
.text:0000277E                 mov     eax, [eax]
.text:00002780                 mov     esi, esp
.text:00002782                 push    edx
.text:00002783                 mov     ecx, [eax+8]
.text:00002786                 call    ecx
.text:00002788                 cmp     esi, esp
.text:0000278A                 call    __RTC_CheckEsp
.text:0000278F
.text:0000278F loc_278F:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000278F                 mov     edx, [ebp+var_4]
.text:00002792                 mov     eax, [ebp+arg_0]
.text:00002795                 mov     [edx], eax
.text:00002797                 mov     eax, [ebp+arg_0]
.text:0000279A                 pop     esi
.text:0000279B                 add     esp, 4
.text:0000279E                 cmp     ebp, esp
.text:000027A0                 call    __RTC_CheckEsp
.text:000027A5                 mov     esp, ebp
.text:000027A7                 pop     ebp
.text:000027A8                 retn    4
.text:000027A8 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:000027A8
.text:000027A8 ; ---------------------------------------------------------------------------
.text:000027AB                 align 4
.text:000027AB _text           ends
.text:000027AB
.text:000027AC ; ===========================================================================
.text:000027AC
.text:000027AC ; Segment type: Pure code
.text:000027AC ; Segment permissions: Read/Execute
.text:000027AC _text           segment para public 'CODE' use32
.text:000027AC                 assume cs:_text
.text:000027AC                 ;org 27ACh
.text:000027AC ; COMDAT (pick any)
.text:000027AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027AC
.text:000027AC ; =============== S U B R O U T I N E =======================================
.text:000027AC
.text:000027AC ; Attributes: bp-based frame
.text:000027AC
.text:000027AC ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Init(void)
.text:000027AC                 public ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:000027AC ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:000027AC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+3Ap
.text:000027AC
.text:000027AC var_4           = dword ptr -4
.text:000027AC
.text:000027AC                 push    ebp
.text:000027AD                 mov     ebp, esp
.text:000027AF                 push    ecx
.text:000027B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027B7                 mov     [ebp+var_4], ecx
.text:000027BA                 mov     ecx, [ebp+var_4]
.text:000027BD                 call    ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Init(void)
.text:000027C2                 mov     eax, [ebp+var_4]
.text:000027C5                 mov     dword ptr [eax+30h], 0
.text:000027CC                 add     esp, 4
.text:000027CF                 cmp     ebp, esp
.text:000027D1                 call    __RTC_CheckEsp
.text:000027D6                 mov     esp, ebp
.text:000027D8                 pop     ebp
.text:000027D9                 retn
.text:000027D9 ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:000027D9
.text:000027D9 ; ---------------------------------------------------------------------------
.text:000027DA                 align 4
.text:000027DA _text           ends
.text:000027DA
.text:000027DC ; ===========================================================================
.text:000027DC
.text:000027DC ; Segment type: Pure code
.text:000027DC ; Segment permissions: Read/Execute
.text:000027DC _text           segment para public 'CODE' use32
.text:000027DC                 assume cs:_text
.text:000027DC                 ;org 27DCh
.text:000027DC ; COMDAT (pick any)
.text:000027DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027DC
.text:000027DC ; =============== S U B R O U T I N E =======================================
.text:000027DC
.text:000027DC ; Attributes: bp-based frame
.text:000027DC
.text:000027DC ; public: unsigned int __thiscall NBitl::CDecoder<class CInBuffer>::ReadBits(unsigned int)
.text:000027DC                 public ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z
.text:000027DC ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
.text:000027DC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)+18p
.text:000027DC                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3C6p ...
.text:000027DC
.text:000027DC var_8           = dword ptr -8
.text:000027DC var_4           = dword ptr -4
.text:000027DC arg_0           = dword ptr  8
.text:000027DC
.text:000027DC                 push    ebp
.text:000027DD                 mov     ebp, esp
.text:000027DF                 sub     esp, 8
.text:000027E2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000027E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027F0                 mov     [ebp+var_4], ecx
.text:000027F3                 mov     ecx, [ebp+var_4]
.text:000027F6                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize(void)
.text:000027FB                 mov     eax, 1
.text:00002800                 mov     ecx, [ebp+arg_0]
.text:00002803                 shl     eax, cl
.text:00002805                 sub     eax, 1
.text:00002808                 mov     ecx, [ebp+var_4]
.text:0000280B                 and     eax, [ecx+30h]
.text:0000280E                 mov     [ebp+var_8], eax
.text:00002811                 mov     edx, [ebp+arg_0]
.text:00002814                 push    edx
.text:00002815                 mov     ecx, [ebp+var_4]
.text:00002818                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:0000281D                 mov     eax, [ebp+var_8]
.text:00002820                 add     esp, 8
.text:00002823                 cmp     ebp, esp
.text:00002825                 call    __RTC_CheckEsp
.text:0000282A                 mov     esp, ebp
.text:0000282C                 pop     ebp
.text:0000282D                 retn    4
.text:0000282D ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z endp
.text:0000282D
.text:0000282D _text           ends
.text:0000282D
.text:00002830 ; ===========================================================================
.text:00002830
.text:00002830 ; Segment type: Pure code
.text:00002830 ; Segment permissions: Read/Execute
.text:00002830 _text           segment para public 'CODE' use32
.text:00002830                 assume cs:_text
.text:00002830                 ;org 2830h
.text:00002830 ; COMDAT (pick any)
.text:00002830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002830
.text:00002830 ; =============== S U B R O U T I N E =======================================
.text:00002830
.text:00002830 ; Attributes: bp-based frame
.text:00002830
.text:00002830 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::AlignToByte(void)
.text:00002830                 public ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00002830 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00002830                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+AAp
.text:00002830                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+29Ep
.text:00002830
.text:00002830 var_4           = dword ptr -4
.text:00002830
.text:00002830                 push    ebp
.text:00002831                 mov     ebp, esp
.text:00002833                 push    ecx
.text:00002834                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000283B                 mov     [ebp+var_4], ecx
.text:0000283E                 mov     eax, [ebp+var_4]
.text:00002841                 mov     ecx, 20h ; ' '
.text:00002846                 sub     ecx, [eax]
.text:00002848                 and     ecx, 7
.text:0000284B                 push    ecx
.text:0000284C                 mov     ecx, [ebp+var_4]
.text:0000284F                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:00002854                 add     esp, 4
.text:00002857                 cmp     ebp, esp
.text:00002859                 call    __RTC_CheckEsp
.text:0000285E                 mov     esp, ebp
.text:00002860                 pop     ebp
.text:00002861                 retn
.text:00002861 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00002861
.text:00002861 ; ---------------------------------------------------------------------------
.text:00002862                 align 4
.text:00002862 _text           ends
.text:00002862
.text:00002864 ; ===========================================================================
.text:00002864
.text:00002864 ; Segment type: Pure code
.text:00002864 ; Segment permissions: Read/Execute
.text:00002864 _text           segment para public 'CODE' use32
.text:00002864                 assume cs:_text
.text:00002864                 ;org 2864h
.text:00002864 ; COMDAT (pick any)
.text:00002864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002864
.text:00002864 ; =============== S U B R O U T I N E =======================================
.text:00002864
.text:00002864 ; Attributes: bp-based frame
.text:00002864
.text:00002864 ; public: unsigned char __thiscall NBitl::CDecoder<class CInBuffer>::ReadDirectByte(void)
.text:00002864                 public ?ReadDirectByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ
.text:00002864 ?ReadDirectByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ proc near
.text:00002864                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2A9p
.text:00002864
.text:00002864 var_4           = dword ptr -4
.text:00002864
.text:00002864                 push    ebp
.text:00002865                 mov     ebp, esp
.text:00002867                 push    ecx
.text:00002868                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000286F                 mov     [ebp+var_4], ecx
.text:00002872                 mov     ecx, [ebp+var_4]
.text:00002875                 add     ecx, 8          ; this
.text:00002878                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:0000287D                 add     esp, 4
.text:00002880                 cmp     ebp, esp
.text:00002882                 call    __RTC_CheckEsp
.text:00002887                 mov     esp, ebp
.text:00002889                 pop     ebp
.text:0000288A                 retn
.text:0000288A ?ReadDirectByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ endp
.text:0000288A
.text:0000288A ; ---------------------------------------------------------------------------
.text:0000288B                 align 4
.text:0000288B _text           ends
.text:0000288B
.text:0000288C ; ===========================================================================
.text:0000288C
.text:0000288C ; Segment type: Pure code
.text:0000288C ; Segment permissions: Read/Execute
.text:0000288C _text           segment para public 'CODE' use32
.text:0000288C                 assume cs:_text
.text:0000288C                 ;org 288Ch
.text:0000288C ; COMDAT (pick any)
.text:0000288C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000288C
.text:0000288C ; =============== S U B R O U T I N E =======================================
.text:0000288C
.text:0000288C ; Attributes: bp-based frame
.text:0000288C
.text:0000288C ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:0000288C                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:0000288C ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:0000288C                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadDirectByte(void)+14p
.text:0000288C                                         ; NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)+25p ...
.text:0000288C
.text:0000288C var_8           = dword ptr -8
.text:0000288C var_4           = dword ptr -4
.text:0000288C
.text:0000288C                 push    ebp
.text:0000288D                 mov     ebp, esp
.text:0000288F                 sub     esp, 8
.text:00002892                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002899                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028A0                 mov     [ebp+var_4], ecx
.text:000028A3                 mov     eax, [ebp+var_4]
.text:000028A6                 mov     ecx, [ebp+var_4]
.text:000028A9                 mov     edx, [eax]
.text:000028AB                 cmp     edx, [ecx+4]
.text:000028AE                 jb      short loc_28BA
.text:000028B0                 mov     ecx, [ebp+var_4] ; this
.text:000028B3                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:000028B8                 jmp     short loc_28D4
.text:000028BA ; ---------------------------------------------------------------------------
.text:000028BA
.text:000028BA loc_28BA:                               ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:000028BA                 mov     eax, [ebp+var_4]
.text:000028BD                 mov     ecx, [eax]
.text:000028BF                 mov     dl, [ecx]
.text:000028C1                 mov     byte ptr [ebp+var_8+3], dl
.text:000028C4                 mov     eax, [ebp+var_4]
.text:000028C7                 mov     ecx, [eax]
.text:000028C9                 add     ecx, 1
.text:000028CC                 mov     edx, [ebp+var_4]
.text:000028CF                 mov     [edx], ecx
.text:000028D1                 mov     al, byte ptr [ebp+var_8+3]
.text:000028D4
.text:000028D4 loc_28D4:                               ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:000028D4                 add     esp, 8
.text:000028D7                 cmp     ebp, esp
.text:000028D9                 call    __RTC_CheckEsp
.text:000028DE                 mov     esp, ebp
.text:000028E0                 pop     ebp
.text:000028E1                 retn
.text:000028E1 ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:000028E1
.text:000028E1 ; ---------------------------------------------------------------------------
.text:000028E2                 align 4
.text:000028E2 _text           ends
.text:000028E2
.text:000028E4 ; ===========================================================================
.text:000028E4
.text:000028E4 ; Segment type: Pure code
.text:000028E4 ; Segment permissions: Read/Execute
.text:000028E4 _text           segment para public 'CODE' use32
.text:000028E4                 assume cs:_text
.text:000028E4                 ;org 28E4h
.text:000028E4 ; COMDAT (pick any)
.text:000028E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028E4
.text:000028E4 ; =============== S U B R O U T I N E =======================================
.text:000028E4
.text:000028E4 ; Attributes: bp-based frame
.text:000028E4
.text:000028E4 ; public: unsigned char __thiscall NBitl::CDecoder<class CInBuffer>::ReadAlignedByte(void)
.text:000028E4                 public ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ
.text:000028E4 ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ proc near
.text:000028E4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)+14p
.text:000028E4                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadAligned_UInt16(void)+1Dp ...
.text:000028E4
.text:000028E4 var_8           = dword ptr -8
.text:000028E4 var_4           = dword ptr -4
.text:000028E4
.text:000028E4                 push    ebp
.text:000028E5                 mov     ebp, esp
.text:000028E7                 sub     esp, 8
.text:000028EA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000028F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000028F8                 mov     [ebp+var_4], ecx
.text:000028FB                 mov     eax, [ebp+var_4]
.text:000028FE                 cmp     dword ptr [eax], 20h ; ' '
.text:00002901                 jnz     short loc_2910
.text:00002903                 mov     ecx, [ebp+var_4]
.text:00002906                 add     ecx, 8          ; this
.text:00002909                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:0000290E                 jmp     short loc_292C
.text:00002910 ; ---------------------------------------------------------------------------
.text:00002910
.text:00002910 loc_2910:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)+1Dj
.text:00002910                 mov     ecx, [ebp+var_4]
.text:00002913                 mov     edx, [ecx+30h]
.text:00002916                 and     edx, 0FFh
.text:0000291C                 mov     byte ptr [ebp+var_8+3], dl
.text:0000291F                 push    8
.text:00002921                 mov     ecx, [ebp+var_4]
.text:00002924                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:00002929                 mov     al, byte ptr [ebp+var_8+3]
.text:0000292C
.text:0000292C loc_292C:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadAlignedByte(void)+2Aj
.text:0000292C                 add     esp, 8
.text:0000292F                 cmp     ebp, esp
.text:00002931                 call    __RTC_CheckEsp
.text:00002936                 mov     esp, ebp
.text:00002938                 pop     ebp
.text:00002939                 retn
.text:00002939 ?ReadAlignedByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEEXZ endp
.text:00002939
.text:00002939 ; ---------------------------------------------------------------------------
.text:0000293A                 align 4
.text:0000293A _text           ends
.text:0000293A
.text:0000293C ; ===========================================================================
.text:0000293C
.text:0000293C ; Segment type: Pure code
.text:0000293C ; Segment permissions: Read/Execute
.text:0000293C _text           segment para public 'CODE' use32
.text:0000293C                 assume cs:_text
.text:0000293C                 ;org 293Ch
.text:0000293C ; COMDAT (pick any)
.text:0000293C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000293C
.text:0000293C ; =============== S U B R O U T I N E =======================================
.text:0000293C
.text:0000293C ; Attributes: bp-based frame
.text:0000293C
.text:0000293C ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::Create(unsigned int)
.text:0000293C                 public ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z
.text:0000293C ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z proc near
.text:0000293C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+19p
.text:0000293C
.text:0000293C var_4           = dword ptr -4
.text:0000293C arg_0           = dword ptr  8
.text:0000293C
.text:0000293C                 push    ebp
.text:0000293D                 mov     ebp, esp
.text:0000293F                 push    ecx
.text:00002940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002947                 mov     [ebp+var_4], ecx
.text:0000294A                 mov     eax, [ebp+arg_0]
.text:0000294D                 push    eax             ; unsigned int
.text:0000294E                 mov     ecx, [ebp+var_4]
.text:00002951                 add     ecx, 8          ; this
.text:00002954                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:00002959                 add     esp, 4
.text:0000295C                 cmp     ebp, esp
.text:0000295E                 call    __RTC_CheckEsp
.text:00002963                 mov     esp, ebp
.text:00002965                 pop     ebp
.text:00002966                 retn    4
.text:00002966 ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z endp
.text:00002966
.text:00002966 ; ---------------------------------------------------------------------------
.text:00002969                 align 4
.text:00002969 _text           ends
.text:00002969
.text:0000296C ; ===========================================================================
.text:0000296C
.text:0000296C ; Segment type: Pure code
.text:0000296C ; Segment permissions: Read/Execute
.text:0000296C _text           segment para public 'CODE' use32
.text:0000296C                 assume cs:_text
.text:0000296C                 ;org 296Ch
.text:0000296C ; COMDAT (pick any)
.text:0000296C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000296C
.text:0000296C ; =============== S U B R O U T I N E =======================================
.text:0000296C
.text:0000296C ; Attributes: bp-based frame
.text:0000296C
.text:0000296C ; int __stdcall NBitl::CBaseDecoder<CInBuffer>::SetStream(struct ISequentialInStream *)
.text:0000296C                 public ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z
.text:0000296C ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000296C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)+1Cp
.text:0000296C
.text:0000296C var_4           = dword ptr -4
.text:0000296C arg_0           = dword ptr  8
.text:0000296C
.text:0000296C                 push    ebp
.text:0000296D                 mov     ebp, esp
.text:0000296F                 push    ecx
.text:00002970                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002977                 mov     [ebp+var_4], ecx
.text:0000297A                 mov     eax, [ebp+arg_0]
.text:0000297D                 push    eax             ; struct ISequentialInStream *
.text:0000297E                 mov     ecx, [ebp+var_4]
.text:00002981                 add     ecx, 8          ; this
.text:00002984                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:00002989                 add     esp, 4
.text:0000298C                 cmp     ebp, esp
.text:0000298E                 call    __RTC_CheckEsp
.text:00002993                 mov     esp, ebp
.text:00002995                 pop     ebp
.text:00002996                 retn    4
.text:00002996 ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z endp
.text:00002996
.text:00002996 ; ---------------------------------------------------------------------------
.text:00002999                 align 4
.text:00002999 _text           ends
.text:00002999
.text:0000299C ; ===========================================================================
.text:0000299C
.text:0000299C ; Segment type: Pure code
.text:0000299C ; Segment permissions: Read/Execute
.text:0000299C _text           segment para public 'CODE' use32
.text:0000299C                 assume cs:_text
.text:0000299C                 ;org 299Ch
.text:0000299C ; COMDAT (pick any)
.text:0000299C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000299C
.text:0000299C ; =============== S U B R O U T I N E =======================================
.text:0000299C
.text:0000299C ; Attributes: bp-based frame
.text:0000299C
.text:0000299C ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:0000299C                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:0000299C ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000299C                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)+18p
.text:0000299C
.text:0000299C var_4           = dword ptr -4
.text:0000299C arg_0           = dword ptr  8
.text:0000299C
.text:0000299C                 push    ebp
.text:0000299D                 mov     ebp, esp
.text:0000299F                 push    ecx
.text:000029A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029A7                 mov     [ebp+var_4], ecx
.text:000029AA                 mov     eax, [ebp+var_4]
.text:000029AD                 mov     ecx, [ebp+arg_0]
.text:000029B0                 mov     [eax+0Ch], ecx
.text:000029B3                 mov     esp, ebp
.text:000029B5                 pop     ebp
.text:000029B6                 retn    4
.text:000029B6 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:000029B6
.text:000029B6 ; ---------------------------------------------------------------------------
.text:000029B9                 align 4
.text:000029B9 _text           ends
.text:000029B9
.text:000029BC ; ===========================================================================
.text:000029BC
.text:000029BC ; Segment type: Pure code
.text:000029BC ; Segment permissions: Read/Execute
.text:000029BC _text           segment para public 'CODE' use32
.text:000029BC                 assume cs:_text
.text:000029BC                 ;org 29BCh
.text:000029BC ; COMDAT (pick any)
.text:000029BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029BC
.text:000029BC ; =============== S U B R O U T I N E =======================================
.text:000029BC
.text:000029BC ; Attributes: bp-based frame
.text:000029BC
.text:000029BC ; public: unsigned __int64 __thiscall NBitl::CBaseDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:000029BC                 public ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
.text:000029BC ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ proc near
.text:000029BC                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+9Cp
.text:000029BC                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+1E5p ...
.text:000029BC
.text:000029BC var_4           = dword ptr -4
.text:000029BC
.text:000029BC                 push    ebp
.text:000029BD                 mov     ebp, esp
.text:000029BF                 push    ecx
.text:000029C0                 push    esi
.text:000029C1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000029C8                 mov     [ebp+var_4], ecx
.text:000029CB                 mov     ecx, [ebp+var_4]
.text:000029CE                 add     ecx, 8          ; this
.text:000029D1                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:000029D6                 mov     ecx, [ebp+var_4]
.text:000029D9                 mov     esi, 20h ; ' '
.text:000029DE                 sub     esi, [ecx]
.text:000029E0                 shr     esi, 3
.text:000029E3                 xor     ecx, ecx
.text:000029E5                 sub     eax, esi
.text:000029E7                 sbb     edx, ecx
.text:000029E9                 pop     esi
.text:000029EA                 add     esp, 4
.text:000029ED                 cmp     ebp, esp
.text:000029EF                 call    __RTC_CheckEsp
.text:000029F4                 mov     esp, ebp
.text:000029F6                 pop     ebp
.text:000029F7                 retn
.text:000029F7 ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ endp
.text:000029F7
.text:000029F7 _text           ends
.text:000029F7
.text:000029F8 ; ===========================================================================
.text:000029F8
.text:000029F8 ; Segment type: Pure code
.text:000029F8 ; Segment permissions: Read/Execute
.text:000029F8 _text           segment para public 'CODE' use32
.text:000029F8                 assume cs:_text
.text:000029F8                 ;org 29F8h
.text:000029F8 ; COMDAT (pick any)
.text:000029F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000029F8
.text:000029F8 ; =============== S U B R O U T I N E =======================================
.text:000029F8
.text:000029F8 ; Attributes: bp-based frame
.text:000029F8
.text:000029F8 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:000029F8                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:000029F8 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:000029F8                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:000029F8
.text:000029F8 var_4           = dword ptr -4
.text:000029F8
.text:000029F8                 push    ebp
.text:000029F9                 mov     ebp, esp
.text:000029FB                 push    ecx
.text:000029FC                 push    esi
.text:000029FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A04                 mov     [ebp+var_4], ecx
.text:00002A07                 mov     eax, [ebp+var_4]
.text:00002A0A                 mov     ecx, [eax+20h]
.text:00002A0D                 xor     esi, esi
.text:00002A0F                 mov     edx, [ebp+var_4]
.text:00002A12                 add     ecx, [edx+10h]
.text:00002A15                 adc     esi, [edx+14h]
.text:00002A18                 mov     eax, [ebp+var_4]
.text:00002A1B                 mov     edx, [ebp+var_4]
.text:00002A1E                 mov     eax, [eax]
.text:00002A20                 sub     eax, [edx+8]
.text:00002A23                 cdq
.text:00002A24                 add     ecx, eax
.text:00002A26                 adc     esi, edx
.text:00002A28                 mov     eax, ecx
.text:00002A2A                 mov     edx, esi
.text:00002A2C                 pop     esi
.text:00002A2D                 mov     esp, ebp
.text:00002A2F                 pop     ebp
.text:00002A30                 retn
.text:00002A30 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00002A30
.text:00002A30 ; ---------------------------------------------------------------------------
.text:00002A31                 align 4
.text:00002A31 _text           ends
.text:00002A31
.text:00002A34 ; ===========================================================================
.text:00002A34
.text:00002A34 ; Segment type: Pure code
.text:00002A34 ; Segment permissions: Read/Execute
.text:00002A34 _text           segment para public 'CODE' use32
.text:00002A34                 assume cs:_text
.text:00002A34                 ;org 2A34h
.text:00002A34 ; COMDAT (pick any)
.text:00002A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A34
.text:00002A34 ; =============== S U B R O U T I N E =======================================
.text:00002A34
.text:00002A34 ; Attributes: bp-based frame
.text:00002A34
.text:00002A34 ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::ThereAreDataInBitsBuffer(void)const
.text:00002A34                 public ?ThereAreDataInBitsBuffer@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
.text:00002A34 ?ThereAreDataInBitsBuffer@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ proc near
.text:00002A34                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+24Cp
.text:00002A34
.text:00002A34 var_4           = dword ptr -4
.text:00002A34
.text:00002A34                 push    ebp
.text:00002A35                 mov     ebp, esp
.text:00002A37                 push    ecx
.text:00002A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A3F                 mov     [ebp+var_4], ecx
.text:00002A42                 mov     eax, [ebp+var_4]
.text:00002A45                 xor     ecx, ecx
.text:00002A47                 cmp     dword ptr [eax], 20h ; ' '
.text:00002A4A                 setnz   cl
.text:00002A4D                 mov     al, cl
.text:00002A4F                 mov     esp, ebp
.text:00002A51                 pop     ebp
.text:00002A52                 retn
.text:00002A52 ?ThereAreDataInBitsBuffer@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ endp
.text:00002A52
.text:00002A52 ; ---------------------------------------------------------------------------
.text:00002A53                 align 4
.text:00002A53 _text           ends
.text:00002A53
.text:00002A54 ; ===========================================================================
.text:00002A54
.text:00002A54 ; Segment type: Pure code
.text:00002A54 ; Segment permissions: Read/Execute
.text:00002A54 _text           segment para public 'CODE' use32
.text:00002A54                 assume cs:_text
.text:00002A54                 ;org 2A54h
.text:00002A54 ; COMDAT (pick any)
.text:00002A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A54
.text:00002A54 ; =============== S U B R O U T I N E =======================================
.text:00002A54
.text:00002A54 ; Attributes: bp-based frame
.text:00002A54
.text:00002A54 ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::ExtraBitsWereRead(void)const
.text:00002A54                 public ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
.text:00002A54 ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ proc near
.text:00002A54                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+4Ep
.text:00002A54                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+81p ...
.text:00002A54
.text:00002A54 var_8           = dword ptr -8
.text:00002A54 var_4           = dword ptr -4
.text:00002A54
.text:00002A54                 push    ebp
.text:00002A55                 mov     ebp, esp
.text:00002A57                 sub     esp, 8
.text:00002A5A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A68                 mov     [ebp+var_4], ecx
.text:00002A6B                 mov     eax, [ebp+var_4]
.text:00002A6E                 cmp     dword ptr [eax+28h], 4
.text:00002A72                 ja      short loc_2A94
.text:00002A74                 mov     ecx, [ebp+var_4]
.text:00002A77                 mov     edx, 20h ; ' '
.text:00002A7C                 sub     edx, [ecx]
.text:00002A7E                 mov     eax, [ebp+var_4]
.text:00002A81                 mov     ecx, [eax+28h]
.text:00002A84                 shl     ecx, 3
.text:00002A87                 cmp     edx, ecx
.text:00002A89                 jb      short loc_2A94
.text:00002A8B                 mov     [ebp+var_8], 0
.text:00002A92                 jmp     short loc_2A9B
.text:00002A94 ; ---------------------------------------------------------------------------
.text:00002A94
.text:00002A94 loc_2A94:                               ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+1Ej
.text:00002A94                                         ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+35j
.text:00002A94                 mov     [ebp+var_8], 1
.text:00002A9B
.text:00002A9B loc_2A9B:                               ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+3Ej
.text:00002A9B                 mov     al, byte ptr [ebp+var_8]
.text:00002A9E                 mov     esp, ebp
.text:00002AA0                 pop     ebp
.text:00002AA1                 retn
.text:00002AA1 ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ endp
.text:00002AA1
.text:00002AA1 ; ---------------------------------------------------------------------------
.text:00002AA2                 align 4
.text:00002AA2 _text           ends
.text:00002AA2
.text:00002AA4 ; ===========================================================================
.text:00002AA4
.text:00002AA4 ; Segment type: Pure code
.text:00002AA4 ; Segment permissions: Read/Execute
.text:00002AA4 _text           segment para public 'CODE' use32
.text:00002AA4                 assume cs:_text
.text:00002AA4                 ;org 2AA4h
.text:00002AA4 ; COMDAT (pick any)
.text:00002AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AA4
.text:00002AA4 ; =============== S U B R O U T I N E =======================================
.text:00002AA4
.text:00002AA4 ; Attributes: bp-based frame
.text:00002AA4
.text:00002AA4 ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::ExtraBitsWereRead_Fast(void)const
.text:00002AA4                 public ?ExtraBitsWereRead_Fast@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
.text:00002AA4 ?ExtraBitsWereRead_Fast@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ proc near
.text:00002AA4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+2ECp
.text:00002AA4
.text:00002AA4 var_4           = dword ptr -4
.text:00002AA4
.text:00002AA4                 push    ebp
.text:00002AA5                 mov     ebp, esp
.text:00002AA7                 push    ecx
.text:00002AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002AAF                 mov     [ebp+var_4], ecx
.text:00002AB2                 mov     eax, [ebp+var_4]
.text:00002AB5                 mov     ecx, 4
.text:00002ABA                 cmp     ecx, [eax+28h]
.text:00002ABD                 sbb     eax, eax
.text:00002ABF                 neg     eax
.text:00002AC1                 mov     esp, ebp
.text:00002AC3                 pop     ebp
.text:00002AC4                 retn
.text:00002AC4 ?ExtraBitsWereRead_Fast@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ endp
.text:00002AC4
.text:00002AC4 ; ---------------------------------------------------------------------------
.text:00002AC5                 align 4
.text:00002AC5 _text           ends
.text:00002AC5
.text:00002AC8 ; ===========================================================================
.text:00002AC8
.text:00002AC8 ; Segment type: Pure code
.text:00002AC8 ; Segment permissions: Read/Execute
.text:00002AC8 _text           segment para public 'CODE' use32
.text:00002AC8                 assume cs:_text
.text:00002AC8                 ;org 2AC8h
.text:00002AC8 ; COMDAT (pick any)
.text:00002AC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AC8
.text:00002AC8 ; =============== S U B R O U T I N E =======================================
.text:00002AC8
.text:00002AC8 ; Attributes: bp-based frame
.text:00002AC8
.text:00002AC8 ; public: bool __thiscall NCompress::NHuffman::CDecoder<15, 288>::SetCodeLengths(unsigned char const *)
.text:00002AC8                 public ?SetCodeLengths@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAE_NPBE@Z
.text:00002AC8 ?SetCodeLengths@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:00002AC8                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+2DCp
.text:00002AC8
.text:00002AC8 var_BC          = dword ptr -0BCh
.text:00002AC8 var_B8          = dword ptr -0B8h
.text:00002AC8 var_B4          = dword ptr -0B4h
.text:00002AC8 var_B0          = dword ptr -0B0h
.text:00002AC8 var_AC          = dword ptr -0ACh
.text:00002AC8 var_A8          = dword ptr -0A8h
.text:00002AC8 var_A4          = dword ptr -0A4h
.text:00002AC8 var_A0          = dword ptr -0A0h
.text:00002AC8 var_9C          = dword ptr -9Ch
.text:00002AC8 var_94          = dword ptr -94h
.text:00002AC8 var_50          = dword ptr -50h
.text:00002AC8 var_4C          = dword ptr -4Ch
.text:00002AC8 var_8           = dword ptr -8
.text:00002AC8 var_4           = dword ptr -4
.text:00002AC8 arg_0           = dword ptr  8
.text:00002AC8
.text:00002AC8                 push    ebp
.text:00002AC9                 mov     ebp, esp
.text:00002ACB                 sub     esp, 0BCh
.text:00002AD1                 push    edi
.text:00002AD2                 push    ecx
.text:00002AD3                 lea     edi, [ebp+var_BC]
.text:00002AD9                 mov     ecx, 2Fh ; '/'
.text:00002ADE                 mov     eax, 0CCCCCCCCh
.text:00002AE3                 rep stosd
.text:00002AE5                 pop     ecx
.text:00002AE6                 mov     eax, dword ptr ds:___security_cookie
.text:00002AEB                 xor     eax, ebp
.text:00002AED                 mov     [ebp+var_4], eax
.text:00002AF0                 mov     [ebp+var_8], ecx
.text:00002AF3                 mov     [ebp+var_9C], 1
.text:00002AFD                 jmp     short loc_2B0E
.text:00002AFF ; ---------------------------------------------------------------------------
.text:00002AFF
.text:00002AFF loc_2AFF:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+5Dj
.text:00002AFF                 mov     eax, [ebp+var_9C]
.text:00002B05                 add     eax, 1
.text:00002B08                 mov     [ebp+var_9C], eax
.text:00002B0E
.text:00002B0E loc_2B0E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+35j
.text:00002B0E                 cmp     [ebp+var_9C], 0Fh
.text:00002B15                 ja      short loc_2B27
.text:00002B17                 mov     ecx, [ebp+var_9C]
.text:00002B1D                 mov     [ebp+ecx*4+var_4C], 0
.text:00002B25                 jmp     short loc_2AFF
.text:00002B27 ; ---------------------------------------------------------------------------
.text:00002B27
.text:00002B27 loc_2B27:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+4Dj
.text:00002B27                 mov     [ebp+var_A0], 0
.text:00002B31                 jmp     short loc_2B42
.text:00002B33 ; ---------------------------------------------------------------------------
.text:00002B33
.text:00002B33 loc_2B33:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+D3j
.text:00002B33                 mov     edx, [ebp+var_A0]
.text:00002B39                 add     edx, 1
.text:00002B3C                 mov     [ebp+var_A0], edx
.text:00002B42
.text:00002B42 loc_2B42:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+69j
.text:00002B42                 cmp     [ebp+var_A0], 120h
.text:00002B4C                 jnb     short loc_2B9D
.text:00002B4E                 mov     eax, [ebp+arg_0]
.text:00002B51                 add     eax, [ebp+var_A0]
.text:00002B57                 movzx   ecx, byte ptr [eax]
.text:00002B5A                 mov     [ebp+var_A4], ecx
.text:00002B60                 cmp     [ebp+var_A4], 0Fh
.text:00002B67                 jbe     short loc_2B70
.text:00002B69                 xor     al, al
.text:00002B6B                 jmp     loc_2D7D
.text:00002B70 ; ---------------------------------------------------------------------------
.text:00002B70
.text:00002B70 loc_2B70:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+9Fj
.text:00002B70                 mov     edx, [ebp+var_A4]
.text:00002B76                 mov     eax, [ebp+edx*4+var_4C]
.text:00002B7A                 add     eax, 1
.text:00002B7D                 mov     ecx, [ebp+var_A4]
.text:00002B83                 mov     [ebp+ecx*4+var_4C], eax
.text:00002B87                 mov     edx, [ebp+var_A0]
.text:00002B8D                 mov     eax, [ebp+var_8]
.text:00002B90                 mov     dword ptr [eax+edx*4+80h], 0FFFFFFFFh
.text:00002B9B                 jmp     short loc_2B33
.text:00002B9D ; ---------------------------------------------------------------------------
.text:00002B9D
.text:00002B9D loc_2B9D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+84j
.text:00002B9D                 mov     [ebp+var_4C], 0
.text:00002BA4                 mov     ecx, [ebp+var_8]
.text:00002BA7                 mov     dword ptr [ecx], 0
.text:00002BAD                 mov     edx, [ebp+var_8]
.text:00002BB0                 mov     dword ptr [edx+40h], 0
.text:00002BB7                 mov     [ebp+var_A8], 0
.text:00002BC1                 mov     [ebp+var_AC], 0
.text:00002BCB                 mov     [ebp+var_B0], 8000h
.text:00002BD5                 mov     [ebp+var_9C], 1
.text:00002BDF                 jmp     short loc_2BF0
.text:00002BE1 ; ---------------------------------------------------------------------------
.text:00002BE1
.text:00002BE1 loc_2BE1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *):loc_2CF8j
.text:00002BE1                 mov     eax, [ebp+var_9C]
.text:00002BE7                 add     eax, 1
.text:00002BEA                 mov     [ebp+var_9C], eax
.text:00002BF0
.text:00002BF0 loc_2BF0:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+117j
.text:00002BF0                 cmp     [ebp+var_9C], 0Fh
.text:00002BF7                 ja      loc_2CFD
.text:00002BFD                 mov     ecx, 0Fh
.text:00002C02                 sub     ecx, [ebp+var_9C]
.text:00002C08                 mov     edx, [ebp+var_9C]
.text:00002C0E                 mov     eax, [ebp+edx*4+var_4C]
.text:00002C12                 shl     eax, cl
.text:00002C14                 add     eax, [ebp+var_A8]
.text:00002C1A                 mov     [ebp+var_A8], eax
.text:00002C20                 cmp     [ebp+var_A8], 8000h
.text:00002C2A                 jbe     short loc_2C33
.text:00002C2C                 xor     al, al
.text:00002C2E                 jmp     loc_2D7D
.text:00002C33 ; ---------------------------------------------------------------------------
.text:00002C33
.text:00002C33 loc_2C33:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+162j
.text:00002C33                 cmp     [ebp+var_9C], 0Fh
.text:00002C3A                 jnz     short loc_2C48
.text:00002C3C                 mov     [ebp+var_BC], 8000h
.text:00002C46                 jmp     short loc_2C54
.text:00002C48 ; ---------------------------------------------------------------------------
.text:00002C48
.text:00002C48 loc_2C48:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+172j
.text:00002C48                 mov     ecx, [ebp+var_A8]
.text:00002C4E                 mov     [ebp+var_BC], ecx
.text:00002C54
.text:00002C54 loc_2C54:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+17Ej
.text:00002C54                 mov     edx, [ebp+var_9C]
.text:00002C5A                 mov     eax, [ebp+var_8]
.text:00002C5D                 mov     ecx, [ebp+var_BC]
.text:00002C63                 mov     [eax+edx*4], ecx
.text:00002C66                 mov     edx, [ebp+var_9C]
.text:00002C6C                 mov     eax, [ebp+var_8]
.text:00002C6F                 mov     ecx, [eax+edx*4+3Ch]
.text:00002C73                 mov     edx, [ebp+var_9C]
.text:00002C79                 add     ecx, [ebp+edx*4+var_50]
.text:00002C7D                 mov     eax, [ebp+var_9C]
.text:00002C83                 mov     edx, [ebp+var_8]
.text:00002C86                 mov     [edx+eax*4+40h], ecx
.text:00002C8A                 mov     eax, [ebp+var_9C]
.text:00002C90                 mov     ecx, [ebp+var_9C]
.text:00002C96                 mov     edx, [ebp+var_8]
.text:00002C99                 mov     ecx, [edx+ecx*4+40h]
.text:00002C9D                 mov     [ebp+eax*4+var_94], ecx
.text:00002CA4                 cmp     [ebp+var_9C], 9
.text:00002CAB                 ja      short loc_2CF8
.text:00002CAD                 mov     edx, [ebp+var_9C]
.text:00002CB3                 mov     eax, [ebp+var_8]
.text:00002CB6                 mov     ecx, [eax+edx*4]
.text:00002CB9                 shr     ecx, 6
.text:00002CBC                 mov     [ebp+var_B4], ecx
.text:00002CC2                 jmp     short loc_2CD3
.text:00002CC4 ; ---------------------------------------------------------------------------
.text:00002CC4
.text:00002CC4 loc_2CC4:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+22Ej
.text:00002CC4                 mov     edx, [ebp+var_AC]
.text:00002CCA                 add     edx, 1
.text:00002CCD                 mov     [ebp+var_AC], edx
.text:00002CD3
.text:00002CD3 loc_2CD3:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+1FAj
.text:00002CD3                 mov     eax, [ebp+var_AC]
.text:00002CD9                 cmp     eax, [ebp+var_B4]
.text:00002CDF                 jnb     short loc_2CF8
.text:00002CE1                 mov     ecx, [ebp+var_8]
.text:00002CE4                 add     ecx, [ebp+var_AC]
.text:00002CEA                 mov     dl, byte ptr [ebp+var_9C]
.text:00002CF0                 mov     [ecx+500h], dl
.text:00002CF6                 jmp     short loc_2CC4
.text:00002CF8 ; ---------------------------------------------------------------------------
.text:00002CF8
.text:00002CF8 loc_2CF8:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+1E3j
.text:00002CF8                                         ; NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+217j
.text:00002CF8                 jmp     loc_2BE1
.text:00002CFD ; ---------------------------------------------------------------------------
.text:00002CFD
.text:00002CFD loc_2CFD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+12Fj
.text:00002CFD                 mov     [ebp+var_A0], 0
.text:00002D07                 jmp     short loc_2D18
.text:00002D09 ; ---------------------------------------------------------------------------
.text:00002D09
.text:00002D09 loc_2D09:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *):loc_2D79j
.text:00002D09                 mov     eax, [ebp+var_A0]
.text:00002D0F                 add     eax, 1
.text:00002D12                 mov     [ebp+var_A0], eax
.text:00002D18
.text:00002D18 loc_2D18:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+23Fj
.text:00002D18                 cmp     [ebp+var_A0], 120h
.text:00002D22                 jnb     short loc_2D7B
.text:00002D24                 mov     ecx, [ebp+arg_0]
.text:00002D27                 add     ecx, [ebp+var_A0]
.text:00002D2D                 movzx   edx, byte ptr [ecx]
.text:00002D30                 mov     [ebp+var_B8], edx
.text:00002D36                 cmp     [ebp+var_B8], 0
.text:00002D3D                 jz      short loc_2D79
.text:00002D3F                 mov     eax, [ebp+var_B8]
.text:00002D45                 mov     ecx, [ebp+eax*4+var_94]
.text:00002D4C                 mov     edx, [ebp+var_8]
.text:00002D4F                 mov     eax, [ebp+var_A0]
.text:00002D55                 mov     [edx+ecx*4+80h], eax
.text:00002D5C                 mov     ecx, [ebp+var_B8]
.text:00002D62                 mov     edx, [ebp+ecx*4+var_94]
.text:00002D69                 add     edx, 1
.text:00002D6C                 mov     eax, [ebp+var_B8]
.text:00002D72                 mov     [ebp+eax*4+var_94], edx
.text:00002D79
.text:00002D79 loc_2D79:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+275j
.text:00002D79                 jmp     short loc_2D09
.text:00002D7B ; ---------------------------------------------------------------------------
.text:00002D7B
.text:00002D7B loc_2D7B:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+25Aj
.text:00002D7B                 mov     al, 1
.text:00002D7D
.text:00002D7D loc_2D7D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+A3j
.text:00002D7D                                         ; NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+166j
.text:00002D7D                 push    edx
.text:00002D7E                 mov     ecx, ebp
.text:00002D80                 push    eax
.text:00002D81                 lea     edx, $LN27
.text:00002D87                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D8C                 pop     eax
.text:00002D8D                 pop     edx
.text:00002D8E                 pop     edi
.text:00002D8F                 mov     ecx, [ebp+var_4]
.text:00002D92                 xor     ecx, ebp
.text:00002D94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002D99                 mov     esp, ebp
.text:00002D9B                 pop     ebp
.text:00002D9C                 retn    4
.text:00002D9C ?SetCodeLengths@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:00002D9C
.text:00002D9C ; ---------------------------------------------------------------------------
.text:00002D9F                 align 10h
.text:00002DA0 $LN27           dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<15,288>::SetCodeLengths(uchar const *)+2B9o
.text:00002DA4                 dd offset $LN26_0
.text:00002DA8 $LN26_0         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:00002DA4o
.text:00002DB0                 dd offset $LN24_1       ; "lenCounts"
.text:00002DB4                 dd 0FFFFFF6Ch, 40h
.text:00002DBC                 dd offset $LN25_0       ; "tmpPositions"
.text:00002DC0 $LN25_0         db 'tmpPositions',0     ; DATA XREF: .text:00002DBCo
.text:00002DCD $LN24_1         db 'lenCounts',0        ; DATA XREF: .text:00002DB0o
.text:00002DD7                 align 4
.text:00002DD7 _text           ends
.text:00002DD7
.text:00002DD8 ; ===========================================================================
.text:00002DD8
.text:00002DD8 ; Segment type: Pure code
.text:00002DD8 ; Segment permissions: Read/Execute
.text:00002DD8 _text           segment para public 'CODE' use32
.text:00002DD8                 assume cs:_text
.text:00002DD8                 ;org 2DD8h
.text:00002DD8 ; COMDAT (pick any)
.text:00002DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DD8
.text:00002DD8 ; =============== S U B R O U T I N E =======================================
.text:00002DD8
.text:00002DD8 ; Attributes: bp-based frame
.text:00002DD8
.text:00002DD8 ; public: bool __thiscall NCompress::NHuffman::CDecoder<15, 32>::SetCodeLengths(unsigned char const *)
.text:00002DD8                 public ?SetCodeLengths@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAE_NPBE@Z
.text:00002DD8 ?SetCodeLengths@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:00002DD8                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+2F9p
.text:00002DD8
.text:00002DD8 var_BC          = dword ptr -0BCh
.text:00002DD8 var_B8          = dword ptr -0B8h
.text:00002DD8 var_B4          = dword ptr -0B4h
.text:00002DD8 var_B0          = dword ptr -0B0h
.text:00002DD8 var_AC          = dword ptr -0ACh
.text:00002DD8 var_A8          = dword ptr -0A8h
.text:00002DD8 var_A4          = dword ptr -0A4h
.text:00002DD8 var_A0          = dword ptr -0A0h
.text:00002DD8 var_9C          = dword ptr -9Ch
.text:00002DD8 var_94          = dword ptr -94h
.text:00002DD8 var_50          = dword ptr -50h
.text:00002DD8 var_4C          = dword ptr -4Ch
.text:00002DD8 var_8           = dword ptr -8
.text:00002DD8 var_4           = dword ptr -4
.text:00002DD8 arg_0           = dword ptr  8
.text:00002DD8
.text:00002DD8                 push    ebp
.text:00002DD9                 mov     ebp, esp
.text:00002DDB                 sub     esp, 0BCh
.text:00002DE1                 push    edi
.text:00002DE2                 push    ecx
.text:00002DE3                 lea     edi, [ebp+var_BC]
.text:00002DE9                 mov     ecx, 2Fh ; '/'
.text:00002DEE                 mov     eax, 0CCCCCCCCh
.text:00002DF3                 rep stosd
.text:00002DF5                 pop     ecx
.text:00002DF6                 mov     eax, dword ptr ds:___security_cookie
.text:00002DFB                 xor     eax, ebp
.text:00002DFD                 mov     [ebp+var_4], eax
.text:00002E00                 mov     [ebp+var_8], ecx
.text:00002E03                 mov     [ebp+var_9C], 1
.text:00002E0D                 jmp     short loc_2E1E
.text:00002E0F ; ---------------------------------------------------------------------------
.text:00002E0F
.text:00002E0F loc_2E0F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+5Dj
.text:00002E0F                 mov     eax, [ebp+var_9C]
.text:00002E15                 add     eax, 1
.text:00002E18                 mov     [ebp+var_9C], eax
.text:00002E1E
.text:00002E1E loc_2E1E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+35j
.text:00002E1E                 cmp     [ebp+var_9C], 0Fh
.text:00002E25                 ja      short loc_2E37
.text:00002E27                 mov     ecx, [ebp+var_9C]
.text:00002E2D                 mov     [ebp+ecx*4+var_4C], 0
.text:00002E35                 jmp     short loc_2E0F
.text:00002E37 ; ---------------------------------------------------------------------------
.text:00002E37
.text:00002E37 loc_2E37:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+4Dj
.text:00002E37                 mov     [ebp+var_A0], 0
.text:00002E41                 jmp     short loc_2E52
.text:00002E43 ; ---------------------------------------------------------------------------
.text:00002E43
.text:00002E43 loc_2E43:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+D0j
.text:00002E43                 mov     edx, [ebp+var_A0]
.text:00002E49                 add     edx, 1
.text:00002E4C                 mov     [ebp+var_A0], edx
.text:00002E52
.text:00002E52 loc_2E52:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+69j
.text:00002E52                 cmp     [ebp+var_A0], 20h ; ' '
.text:00002E59                 jnb     short loc_2EAA
.text:00002E5B                 mov     eax, [ebp+arg_0]
.text:00002E5E                 add     eax, [ebp+var_A0]
.text:00002E64                 movzx   ecx, byte ptr [eax]
.text:00002E67                 mov     [ebp+var_A4], ecx
.text:00002E6D                 cmp     [ebp+var_A4], 0Fh
.text:00002E74                 jbe     short loc_2E7D
.text:00002E76                 xor     al, al
.text:00002E78                 jmp     loc_3087
.text:00002E7D ; ---------------------------------------------------------------------------
.text:00002E7D
.text:00002E7D loc_2E7D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+9Cj
.text:00002E7D                 mov     edx, [ebp+var_A4]
.text:00002E83                 mov     eax, [ebp+edx*4+var_4C]
.text:00002E87                 add     eax, 1
.text:00002E8A                 mov     ecx, [ebp+var_A4]
.text:00002E90                 mov     [ebp+ecx*4+var_4C], eax
.text:00002E94                 mov     edx, [ebp+var_A0]
.text:00002E9A                 mov     eax, [ebp+var_8]
.text:00002E9D                 mov     dword ptr [eax+edx*4+80h], 0FFFFFFFFh
.text:00002EA8                 jmp     short loc_2E43
.text:00002EAA ; ---------------------------------------------------------------------------
.text:00002EAA
.text:00002EAA loc_2EAA:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+81j
.text:00002EAA                 mov     [ebp+var_4C], 0
.text:00002EB1                 mov     ecx, [ebp+var_8]
.text:00002EB4                 mov     dword ptr [ecx], 0
.text:00002EBA                 mov     edx, [ebp+var_8]
.text:00002EBD                 mov     dword ptr [edx+40h], 0
.text:00002EC4                 mov     [ebp+var_A8], 0
.text:00002ECE                 mov     [ebp+var_AC], 0
.text:00002ED8                 mov     [ebp+var_B0], 8000h
.text:00002EE2                 mov     [ebp+var_9C], 1
.text:00002EEC                 jmp     short loc_2EFD
.text:00002EEE ; ---------------------------------------------------------------------------
.text:00002EEE
.text:00002EEE loc_2EEE:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *):loc_3005j
.text:00002EEE                 mov     eax, [ebp+var_9C]
.text:00002EF4                 add     eax, 1
.text:00002EF7                 mov     [ebp+var_9C], eax
.text:00002EFD
.text:00002EFD loc_2EFD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+114j
.text:00002EFD                 cmp     [ebp+var_9C], 0Fh
.text:00002F04                 ja      loc_300A
.text:00002F0A                 mov     ecx, 0Fh
.text:00002F0F                 sub     ecx, [ebp+var_9C]
.text:00002F15                 mov     edx, [ebp+var_9C]
.text:00002F1B                 mov     eax, [ebp+edx*4+var_4C]
.text:00002F1F                 shl     eax, cl
.text:00002F21                 add     eax, [ebp+var_A8]
.text:00002F27                 mov     [ebp+var_A8], eax
.text:00002F2D                 cmp     [ebp+var_A8], 8000h
.text:00002F37                 jbe     short loc_2F40
.text:00002F39                 xor     al, al
.text:00002F3B                 jmp     loc_3087
.text:00002F40 ; ---------------------------------------------------------------------------
.text:00002F40
.text:00002F40 loc_2F40:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+15Fj
.text:00002F40                 cmp     [ebp+var_9C], 0Fh
.text:00002F47                 jnz     short loc_2F55
.text:00002F49                 mov     [ebp+var_BC], 8000h
.text:00002F53                 jmp     short loc_2F61
.text:00002F55 ; ---------------------------------------------------------------------------
.text:00002F55
.text:00002F55 loc_2F55:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+16Fj
.text:00002F55                 mov     ecx, [ebp+var_A8]
.text:00002F5B                 mov     [ebp+var_BC], ecx
.text:00002F61
.text:00002F61 loc_2F61:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+17Bj
.text:00002F61                 mov     edx, [ebp+var_9C]
.text:00002F67                 mov     eax, [ebp+var_8]
.text:00002F6A                 mov     ecx, [ebp+var_BC]
.text:00002F70                 mov     [eax+edx*4], ecx
.text:00002F73                 mov     edx, [ebp+var_9C]
.text:00002F79                 mov     eax, [ebp+var_8]
.text:00002F7C                 mov     ecx, [eax+edx*4+3Ch]
.text:00002F80                 mov     edx, [ebp+var_9C]
.text:00002F86                 add     ecx, [ebp+edx*4+var_50]
.text:00002F8A                 mov     eax, [ebp+var_9C]
.text:00002F90                 mov     edx, [ebp+var_8]
.text:00002F93                 mov     [edx+eax*4+40h], ecx
.text:00002F97                 mov     eax, [ebp+var_9C]
.text:00002F9D                 mov     ecx, [ebp+var_9C]
.text:00002FA3                 mov     edx, [ebp+var_8]
.text:00002FA6                 mov     ecx, [edx+ecx*4+40h]
.text:00002FAA                 mov     [ebp+eax*4+var_94], ecx
.text:00002FB1                 cmp     [ebp+var_9C], 9
.text:00002FB8                 ja      short loc_3005
.text:00002FBA                 mov     edx, [ebp+var_9C]
.text:00002FC0                 mov     eax, [ebp+var_8]
.text:00002FC3                 mov     ecx, [eax+edx*4]
.text:00002FC6                 shr     ecx, 6
.text:00002FC9                 mov     [ebp+var_B4], ecx
.text:00002FCF                 jmp     short loc_2FE0
.text:00002FD1 ; ---------------------------------------------------------------------------
.text:00002FD1
.text:00002FD1 loc_2FD1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+22Bj
.text:00002FD1                 mov     edx, [ebp+var_AC]
.text:00002FD7                 add     edx, 1
.text:00002FDA                 mov     [ebp+var_AC], edx
.text:00002FE0
.text:00002FE0 loc_2FE0:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+1F7j
.text:00002FE0                 mov     eax, [ebp+var_AC]
.text:00002FE6                 cmp     eax, [ebp+var_B4]
.text:00002FEC                 jnb     short loc_3005
.text:00002FEE                 mov     ecx, [ebp+var_8]
.text:00002FF1                 add     ecx, [ebp+var_AC]
.text:00002FF7                 mov     dl, byte ptr [ebp+var_9C]
.text:00002FFD                 mov     [ecx+100h], dl
.text:00003003                 jmp     short loc_2FD1
.text:00003005 ; ---------------------------------------------------------------------------
.text:00003005
.text:00003005 loc_3005:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+1E0j
.text:00003005                                         ; NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+214j
.text:00003005                 jmp     loc_2EEE
.text:0000300A ; ---------------------------------------------------------------------------
.text:0000300A
.text:0000300A loc_300A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+12Cj
.text:0000300A                 mov     [ebp+var_A0], 0
.text:00003014                 jmp     short loc_3025
.text:00003016 ; ---------------------------------------------------------------------------
.text:00003016
.text:00003016 loc_3016:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *):loc_3083j
.text:00003016                 mov     eax, [ebp+var_A0]
.text:0000301C                 add     eax, 1
.text:0000301F                 mov     [ebp+var_A0], eax
.text:00003025
.text:00003025 loc_3025:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+23Cj
.text:00003025                 cmp     [ebp+var_A0], 20h ; ' '
.text:0000302C                 jnb     short loc_3085
.text:0000302E                 mov     ecx, [ebp+arg_0]
.text:00003031                 add     ecx, [ebp+var_A0]
.text:00003037                 movzx   edx, byte ptr [ecx]
.text:0000303A                 mov     [ebp+var_B8], edx
.text:00003040                 cmp     [ebp+var_B8], 0
.text:00003047                 jz      short loc_3083
.text:00003049                 mov     eax, [ebp+var_B8]
.text:0000304F                 mov     ecx, [ebp+eax*4+var_94]
.text:00003056                 mov     edx, [ebp+var_8]
.text:00003059                 mov     eax, [ebp+var_A0]
.text:0000305F                 mov     [edx+ecx*4+80h], eax
.text:00003066                 mov     ecx, [ebp+var_B8]
.text:0000306C                 mov     edx, [ebp+ecx*4+var_94]
.text:00003073                 add     edx, 1
.text:00003076                 mov     eax, [ebp+var_B8]
.text:0000307C                 mov     [ebp+eax*4+var_94], edx
.text:00003083
.text:00003083 loc_3083:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+26Fj
.text:00003083                 jmp     short loc_3016
.text:00003085 ; ---------------------------------------------------------------------------
.text:00003085
.text:00003085 loc_3085:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+254j
.text:00003085                 mov     al, 1
.text:00003087
.text:00003087 loc_3087:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+A0j
.text:00003087                                         ; NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+163j
.text:00003087                 push    edx
.text:00003088                 mov     ecx, ebp
.text:0000308A                 push    eax
.text:0000308B                 lea     edx, $LN27_0
.text:00003091                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00003096                 pop     eax
.text:00003097                 pop     edx
.text:00003098                 pop     edi
.text:00003099                 mov     ecx, [ebp+var_4]
.text:0000309C                 xor     ecx, ebp
.text:0000309E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000030A3                 mov     esp, ebp
.text:000030A5                 pop     ebp
.text:000030A6                 retn    4
.text:000030A6 ?SetCodeLengths@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:000030A6
.text:000030A6 ; ---------------------------------------------------------------------------
.text:000030A9                 align 4
.text:000030AC $LN27_0         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<15,32>::SetCodeLengths(uchar const *)+2B3o
.text:000030B0                 dd offset $LN26_1
.text:000030B4 $LN26_1         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:000030B0o
.text:000030BC                 dd offset $LN24_2       ; "lenCounts"
.text:000030C0                 dd 0FFFFFF6Ch, 40h
.text:000030C8                 dd offset $LN25_1       ; "tmpPositions"
.text:000030CC $LN25_1         db 'tmpPositions',0     ; DATA XREF: .text:000030C8o
.text:000030D9 $LN24_2         db 'lenCounts',0        ; DATA XREF: .text:000030BCo
.text:000030E3                 align 4
.text:000030E3 _text           ends
.text:000030E3
.text:000030E4 ; ===========================================================================
.text:000030E4
.text:000030E4 ; Segment type: Pure code
.text:000030E4 ; Segment permissions: Read/Execute
.text:000030E4 _text           segment para public 'CODE' use32
.text:000030E4                 assume cs:_text
.text:000030E4                 ;org 30E4h
.text:000030E4 ; COMDAT (pick any)
.text:000030E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030E4
.text:000030E4 ; =============== S U B R O U T I N E =======================================
.text:000030E4
.text:000030E4 ; Attributes: bp-based frame
.text:000030E4
.text:000030E4 ; public: bool __thiscall NCompress::NHuffman::CDecoder<15, 19>::SetCodeLengths(unsigned char const *)
.text:000030E4                 public ?SetCodeLengths@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAE_NPBE@Z
.text:000030E4 ?SetCodeLengths@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAE_NPBE@Z proc near
.text:000030E4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+22Ap
.text:000030E4
.text:000030E4 var_BC          = dword ptr -0BCh
.text:000030E4 var_B8          = dword ptr -0B8h
.text:000030E4 var_B4          = dword ptr -0B4h
.text:000030E4 var_B0          = dword ptr -0B0h
.text:000030E4 var_AC          = dword ptr -0ACh
.text:000030E4 var_A8          = dword ptr -0A8h
.text:000030E4 var_A4          = dword ptr -0A4h
.text:000030E4 var_A0          = dword ptr -0A0h
.text:000030E4 var_9C          = dword ptr -9Ch
.text:000030E4 var_94          = dword ptr -94h
.text:000030E4 var_50          = dword ptr -50h
.text:000030E4 var_4C          = dword ptr -4Ch
.text:000030E4 var_8           = dword ptr -8
.text:000030E4 var_4           = dword ptr -4
.text:000030E4 arg_0           = dword ptr  8
.text:000030E4
.text:000030E4                 push    ebp
.text:000030E5                 mov     ebp, esp
.text:000030E7                 sub     esp, 0BCh
.text:000030ED                 push    edi
.text:000030EE                 push    ecx
.text:000030EF                 lea     edi, [ebp+var_BC]
.text:000030F5                 mov     ecx, 2Fh ; '/'
.text:000030FA                 mov     eax, 0CCCCCCCCh
.text:000030FF                 rep stosd
.text:00003101                 pop     ecx
.text:00003102                 mov     eax, dword ptr ds:___security_cookie
.text:00003107                 xor     eax, ebp
.text:00003109                 mov     [ebp+var_4], eax
.text:0000310C                 mov     [ebp+var_8], ecx
.text:0000310F                 mov     [ebp+var_9C], 1
.text:00003119                 jmp     short loc_312A
.text:0000311B ; ---------------------------------------------------------------------------
.text:0000311B
.text:0000311B loc_311B:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+5Dj
.text:0000311B                 mov     eax, [ebp+var_9C]
.text:00003121                 add     eax, 1
.text:00003124                 mov     [ebp+var_9C], eax
.text:0000312A
.text:0000312A loc_312A:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+35j
.text:0000312A                 cmp     [ebp+var_9C], 0Fh
.text:00003131                 ja      short loc_3143
.text:00003133                 mov     ecx, [ebp+var_9C]
.text:00003139                 mov     [ebp+ecx*4+var_4C], 0
.text:00003141                 jmp     short loc_311B
.text:00003143 ; ---------------------------------------------------------------------------
.text:00003143
.text:00003143 loc_3143:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+4Dj
.text:00003143                 mov     [ebp+var_A0], 0
.text:0000314D                 jmp     short loc_315E
.text:0000314F ; ---------------------------------------------------------------------------
.text:0000314F
.text:0000314F loc_314F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+D0j
.text:0000314F                 mov     edx, [ebp+var_A0]
.text:00003155                 add     edx, 1
.text:00003158                 mov     [ebp+var_A0], edx
.text:0000315E
.text:0000315E loc_315E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+69j
.text:0000315E                 cmp     [ebp+var_A0], 13h
.text:00003165                 jnb     short loc_31B6
.text:00003167                 mov     eax, [ebp+arg_0]
.text:0000316A                 add     eax, [ebp+var_A0]
.text:00003170                 movzx   ecx, byte ptr [eax]
.text:00003173                 mov     [ebp+var_A4], ecx
.text:00003179                 cmp     [ebp+var_A4], 0Fh
.text:00003180                 jbe     short loc_3189
.text:00003182                 xor     al, al
.text:00003184                 jmp     loc_3393
.text:00003189 ; ---------------------------------------------------------------------------
.text:00003189
.text:00003189 loc_3189:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+9Cj
.text:00003189                 mov     edx, [ebp+var_A4]
.text:0000318F                 mov     eax, [ebp+edx*4+var_4C]
.text:00003193                 add     eax, 1
.text:00003196                 mov     ecx, [ebp+var_A4]
.text:0000319C                 mov     [ebp+ecx*4+var_4C], eax
.text:000031A0                 mov     edx, [ebp+var_A0]
.text:000031A6                 mov     eax, [ebp+var_8]
.text:000031A9                 mov     dword ptr [eax+edx*4+80h], 0FFFFFFFFh
.text:000031B4                 jmp     short loc_314F
.text:000031B6 ; ---------------------------------------------------------------------------
.text:000031B6
.text:000031B6 loc_31B6:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+81j
.text:000031B6                 mov     [ebp+var_4C], 0
.text:000031BD                 mov     ecx, [ebp+var_8]
.text:000031C0                 mov     dword ptr [ecx], 0
.text:000031C6                 mov     edx, [ebp+var_8]
.text:000031C9                 mov     dword ptr [edx+40h], 0
.text:000031D0                 mov     [ebp+var_A8], 0
.text:000031DA                 mov     [ebp+var_AC], 0
.text:000031E4                 mov     [ebp+var_B0], 8000h
.text:000031EE                 mov     [ebp+var_9C], 1
.text:000031F8                 jmp     short loc_3209
.text:000031FA ; ---------------------------------------------------------------------------
.text:000031FA
.text:000031FA loc_31FA:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *):loc_3311j
.text:000031FA                 mov     eax, [ebp+var_9C]
.text:00003200                 add     eax, 1
.text:00003203                 mov     [ebp+var_9C], eax
.text:00003209
.text:00003209 loc_3209:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+114j
.text:00003209                 cmp     [ebp+var_9C], 0Fh
.text:00003210                 ja      loc_3316
.text:00003216                 mov     ecx, 0Fh
.text:0000321B                 sub     ecx, [ebp+var_9C]
.text:00003221                 mov     edx, [ebp+var_9C]
.text:00003227                 mov     eax, [ebp+edx*4+var_4C]
.text:0000322B                 shl     eax, cl
.text:0000322D                 add     eax, [ebp+var_A8]
.text:00003233                 mov     [ebp+var_A8], eax
.text:00003239                 cmp     [ebp+var_A8], 8000h
.text:00003243                 jbe     short loc_324C
.text:00003245                 xor     al, al
.text:00003247                 jmp     loc_3393
.text:0000324C ; ---------------------------------------------------------------------------
.text:0000324C
.text:0000324C loc_324C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+15Fj
.text:0000324C                 cmp     [ebp+var_9C], 0Fh
.text:00003253                 jnz     short loc_3261
.text:00003255                 mov     [ebp+var_BC], 8000h
.text:0000325F                 jmp     short loc_326D
.text:00003261 ; ---------------------------------------------------------------------------
.text:00003261
.text:00003261 loc_3261:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+16Fj
.text:00003261                 mov     ecx, [ebp+var_A8]
.text:00003267                 mov     [ebp+var_BC], ecx
.text:0000326D
.text:0000326D loc_326D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+17Bj
.text:0000326D                 mov     edx, [ebp+var_9C]
.text:00003273                 mov     eax, [ebp+var_8]
.text:00003276                 mov     ecx, [ebp+var_BC]
.text:0000327C                 mov     [eax+edx*4], ecx
.text:0000327F                 mov     edx, [ebp+var_9C]
.text:00003285                 mov     eax, [ebp+var_8]
.text:00003288                 mov     ecx, [eax+edx*4+3Ch]
.text:0000328C                 mov     edx, [ebp+var_9C]
.text:00003292                 add     ecx, [ebp+edx*4+var_50]
.text:00003296                 mov     eax, [ebp+var_9C]
.text:0000329C                 mov     edx, [ebp+var_8]
.text:0000329F                 mov     [edx+eax*4+40h], ecx
.text:000032A3                 mov     eax, [ebp+var_9C]
.text:000032A9                 mov     ecx, [ebp+var_9C]
.text:000032AF                 mov     edx, [ebp+var_8]
.text:000032B2                 mov     ecx, [edx+ecx*4+40h]
.text:000032B6                 mov     [ebp+eax*4+var_94], ecx
.text:000032BD                 cmp     [ebp+var_9C], 9
.text:000032C4                 ja      short loc_3311
.text:000032C6                 mov     edx, [ebp+var_9C]
.text:000032CC                 mov     eax, [ebp+var_8]
.text:000032CF                 mov     ecx, [eax+edx*4]
.text:000032D2                 shr     ecx, 6
.text:000032D5                 mov     [ebp+var_B4], ecx
.text:000032DB                 jmp     short loc_32EC
.text:000032DD ; ---------------------------------------------------------------------------
.text:000032DD
.text:000032DD loc_32DD:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+22Bj
.text:000032DD                 mov     edx, [ebp+var_AC]
.text:000032E3                 add     edx, 1
.text:000032E6                 mov     [ebp+var_AC], edx
.text:000032EC
.text:000032EC loc_32EC:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+1F7j
.text:000032EC                 mov     eax, [ebp+var_AC]
.text:000032F2                 cmp     eax, [ebp+var_B4]
.text:000032F8                 jnb     short loc_3311
.text:000032FA                 mov     ecx, [ebp+var_8]
.text:000032FD                 add     ecx, [ebp+var_AC]
.text:00003303                 mov     dl, byte ptr [ebp+var_9C]
.text:00003309                 mov     [ecx+0CCh], dl
.text:0000330F                 jmp     short loc_32DD
.text:00003311 ; ---------------------------------------------------------------------------
.text:00003311
.text:00003311 loc_3311:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+1E0j
.text:00003311                                         ; NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+214j
.text:00003311                 jmp     loc_31FA
.text:00003316 ; ---------------------------------------------------------------------------
.text:00003316
.text:00003316 loc_3316:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+12Cj
.text:00003316                 mov     [ebp+var_A0], 0
.text:00003320                 jmp     short loc_3331
.text:00003322 ; ---------------------------------------------------------------------------
.text:00003322
.text:00003322 loc_3322:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *):loc_338Fj
.text:00003322                 mov     eax, [ebp+var_A0]
.text:00003328                 add     eax, 1
.text:0000332B                 mov     [ebp+var_A0], eax
.text:00003331
.text:00003331 loc_3331:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+23Cj
.text:00003331                 cmp     [ebp+var_A0], 13h
.text:00003338                 jnb     short loc_3391
.text:0000333A                 mov     ecx, [ebp+arg_0]
.text:0000333D                 add     ecx, [ebp+var_A0]
.text:00003343                 movzx   edx, byte ptr [ecx]
.text:00003346                 mov     [ebp+var_B8], edx
.text:0000334C                 cmp     [ebp+var_B8], 0
.text:00003353                 jz      short loc_338F
.text:00003355                 mov     eax, [ebp+var_B8]
.text:0000335B                 mov     ecx, [ebp+eax*4+var_94]
.text:00003362                 mov     edx, [ebp+var_8]
.text:00003365                 mov     eax, [ebp+var_A0]
.text:0000336B                 mov     [edx+ecx*4+80h], eax
.text:00003372                 mov     ecx, [ebp+var_B8]
.text:00003378                 mov     edx, [ebp+ecx*4+var_94]
.text:0000337F                 add     edx, 1
.text:00003382                 mov     eax, [ebp+var_B8]
.text:00003388                 mov     [ebp+eax*4+var_94], edx
.text:0000338F
.text:0000338F loc_338F:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+26Fj
.text:0000338F                 jmp     short loc_3322
.text:00003391 ; ---------------------------------------------------------------------------
.text:00003391
.text:00003391 loc_3391:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+254j
.text:00003391                 mov     al, 1
.text:00003393
.text:00003393 loc_3393:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+A0j
.text:00003393                                         ; NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+163j
.text:00003393                 push    edx
.text:00003394                 mov     ecx, ebp
.text:00003396                 push    eax
.text:00003397                 lea     edx, $LN27_1
.text:0000339D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000033A2                 pop     eax
.text:000033A3                 pop     edx
.text:000033A4                 pop     edi
.text:000033A5                 mov     ecx, [ebp+var_4]
.text:000033A8                 xor     ecx, ebp
.text:000033AA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000033AF                 mov     esp, ebp
.text:000033B1                 pop     ebp
.text:000033B2                 retn    4
.text:000033B2 ?SetCodeLengths@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAE_NPBE@Z endp
.text:000033B2
.text:000033B2 ; ---------------------------------------------------------------------------
.text:000033B5                 align 4
.text:000033B8 $LN27_1         dd 2                    ; DATA XREF: NCompress::NHuffman::CDecoder<15,19>::SetCodeLengths(uchar const *)+2B3o
.text:000033BC                 dd offset $LN26_2
.text:000033C0 $LN26_2         dd 0FFFFFFB4h, 40h      ; DATA XREF: .text:000033BCo
.text:000033C8                 dd offset $LN24_3       ; "lenCounts"
.text:000033CC                 dd 0FFFFFF6Ch, 40h
.text:000033D4                 dd offset $LN25_2       ; "tmpPositions"
.text:000033D8 $LN25_2         db 'tmpPositions',0     ; DATA XREF: .text:000033D4o
.text:000033E5 $LN24_3         db 'lenCounts',0        ; DATA XREF: .text:000033C8o
.text:000033EF                 align 10h
.text:000033EF _text           ends
.text:000033EF
.text:000033F0 ; ===========================================================================
.text:000033F0
.text:000033F0 ; Segment type: Pure code
.text:000033F0 ; Segment permissions: Read/Execute
.text:000033F0 _text           segment para public 'CODE' use32
.text:000033F0                 assume cs:_text
.text:000033F0                 ;org 33F0h
.text:000033F0 ; COMDAT (pick any)
.text:000033F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033F0
.text:000033F0 ; =============== S U B R O U T I N E =======================================
.text:000033F0
.text:000033F0 ; Attributes: bp-based frame
.text:000033F0
.text:000033F0 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Normalize(void)
.text:000033F0                 public ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:000033F0 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:000033F0                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadBits(uint)+1Ap
.text:000033F0                                         ; NBitl::CDecoder<CInBuffer>::GetValue(uint)+11p
.text:000033F0
.text:000033F0 var_8           = dword ptr -8
.text:000033F0 var_4           = dword ptr -4
.text:000033F0
.text:000033F0                 push    ebp
.text:000033F1                 mov     ebp, esp
.text:000033F3                 sub     esp, 8
.text:000033F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000033FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003404                 mov     [ebp+var_4], ecx
.text:00003407                 jmp     short loc_3416
.text:00003409 ; ---------------------------------------------------------------------------
.text:00003409
.text:00003409 loc_3409:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+74j
.text:00003409                 mov     eax, [ebp+var_4]
.text:0000340C                 mov     ecx, [eax]
.text:0000340E                 sub     ecx, 8
.text:00003411                 mov     edx, [ebp+var_4]
.text:00003414                 mov     [edx], ecx
.text:00003416
.text:00003416 loc_3416:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+17j
.text:00003416                 mov     eax, [ebp+var_4]
.text:00003419                 cmp     dword ptr [eax], 8
.text:0000341C                 jb      short loc_3466
.text:0000341E                 mov     ecx, [ebp+var_4]
.text:00003421                 add     ecx, 8          ; this
.text:00003424                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:00003429                 mov     byte ptr [ebp+var_8+3], al
.text:0000342C                 movzx   edx, byte ptr [ebp+var_8+3]
.text:00003430                 mov     eax, [ebp+var_4]
.text:00003433                 mov     ecx, 20h ; ' '
.text:00003438                 sub     ecx, [eax]
.text:0000343A                 shl     edx, cl
.text:0000343C                 mov     ecx, [ebp+var_4]
.text:0000343F                 or      edx, [ecx+30h]
.text:00003442                 mov     eax, [ebp+var_4]
.text:00003445                 mov     [eax+30h], edx
.text:00003448                 mov     ecx, [ebp+var_4]
.text:0000344B                 mov     edx, [ecx+4]
.text:0000344E                 shl     edx, 8
.text:00003451                 movzx   eax, byte ptr [ebp+var_8+3]
.text:00003455                 movzx   ecx, byte ptr ds:?kInvertTable@NBitl@@3PAEA[eax] ; uchar * NBitl::kInvertTable
.text:0000345C                 or      edx, ecx
.text:0000345E                 mov     eax, [ebp+var_4]
.text:00003461                 mov     [eax+4], edx
.text:00003464                 jmp     short loc_3409
.text:00003466 ; ---------------------------------------------------------------------------
.text:00003466
.text:00003466 loc_3466:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+2Cj
.text:00003466                 add     esp, 8
.text:00003469                 cmp     ebp, esp
.text:0000346B                 call    __RTC_CheckEsp
.text:00003470                 mov     esp, ebp
.text:00003472                 pop     ebp
.text:00003473                 retn
.text:00003473 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00003473
.text:00003473 _text           ends
.text:00003473
.text:00003474 ; ===========================================================================
.text:00003474
.text:00003474 ; Segment type: Pure code
.text:00003474 ; Segment permissions: Read/Execute
.text:00003474 _text           segment para public 'CODE' use32
.text:00003474                 assume cs:_text
.text:00003474                 ;org 3474h
.text:00003474 ; COMDAT (pick any)
.text:00003474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003474
.text:00003474 ; =============== S U B R O U T I N E =======================================
.text:00003474
.text:00003474 ; Attributes: bp-based frame
.text:00003474
.text:00003474 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::MovePos(unsigned int)
.text:00003474                 public ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z
.text:00003474 ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z proc near
.text:00003474                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadBits(uint)+3Cp
.text:00003474                                         ; NBitl::CDecoder<CInBuffer>::AlignToByte(void)+1Fp ...
.text:00003474
.text:00003474 var_4           = dword ptr -4
.text:00003474 arg_0           = dword ptr  8
.text:00003474
.text:00003474                 push    ebp
.text:00003475                 mov     ebp, esp
.text:00003477                 push    ecx
.text:00003478                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000347F                 mov     [ebp+var_4], ecx
.text:00003482                 mov     eax, [ebp+var_4]
.text:00003485                 mov     ecx, [eax]
.text:00003487                 add     ecx, [ebp+arg_0]
.text:0000348A                 mov     edx, [ebp+var_4]
.text:0000348D                 mov     [edx], ecx
.text:0000348F                 mov     eax, [ebp+var_4]
.text:00003492                 mov     edx, [eax+30h]
.text:00003495                 mov     ecx, [ebp+arg_0]
.text:00003498                 shr     edx, cl
.text:0000349A                 mov     eax, [ebp+var_4]
.text:0000349D                 mov     [eax+30h], edx
.text:000034A0                 mov     esp, ebp
.text:000034A2                 pop     ebp
.text:000034A3                 retn    4
.text:000034A3 ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z endp
.text:000034A3
.text:000034A3 ; ---------------------------------------------------------------------------
.text:000034A6                 align 4
.text:000034A6 _text           ends
.text:000034A6
.text:000034A8 ; ===========================================================================
.text:000034A8
.text:000034A8 ; Segment type: Pure code
.text:000034A8 ; Segment permissions: Read/Execute
.text:000034A8 _text           segment para public 'CODE' use32
.text:000034A8                 assume cs:_text
.text:000034A8                 ;org 34A8h
.text:000034A8 ; COMDAT (pick any)
.text:000034A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034A8
.text:000034A8 ; =============== S U B R O U T I N E =======================================
.text:000034A8
.text:000034A8 ; Attributes: bp-based frame
.text:000034A8
.text:000034A8 ; public: void __thiscall NBitl::CBaseDecoder<class CInBuffer>::Init(void)
.text:000034A8                 public ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:000034A8 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:000034A8                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::Init(void)+11p
.text:000034A8
.text:000034A8 var_4           = dword ptr -4
.text:000034A8
.text:000034A8                 push    ebp
.text:000034A9                 mov     ebp, esp
.text:000034AB                 push    ecx
.text:000034AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034B3                 mov     [ebp+var_4], ecx
.text:000034B6                 mov     ecx, [ebp+var_4]
.text:000034B9                 add     ecx, 8          ; this
.text:000034BC                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:000034C1                 mov     eax, [ebp+var_4]
.text:000034C4                 mov     dword ptr [eax], 20h ; ' '
.text:000034CA                 mov     ecx, [ebp+var_4]
.text:000034CD                 mov     dword ptr [ecx+4], 0
.text:000034D4                 add     esp, 4
.text:000034D7                 cmp     ebp, esp
.text:000034D9                 call    __RTC_CheckEsp
.text:000034DE                 mov     esp, ebp
.text:000034E0                 pop     ebp
.text:000034E1                 retn
.text:000034E1 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:000034E1
.text:000034E1 ; ---------------------------------------------------------------------------
.text:000034E2                 align 4
.text:000034E2 _text           ends
.text:000034E2
.text:000034E4 ; ===========================================================================
.text:000034E4
.text:000034E4 ; Segment type: Pure code
.text:000034E4 ; Segment permissions: Read/Execute
.text:000034E4 _text           segment para public 'CODE' use32
.text:000034E4                 assume cs:_text
.text:000034E4                 ;org 34E4h
.text:000034E4 ; COMDAT (pick any)
.text:000034E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034E4
.text:000034E4 ; =============== S U B R O U T I N E =======================================
.text:000034E4
.text:000034E4 ; Attributes: bp-based frame
.text:000034E4
.text:000034E4 ; public: unsigned int __thiscall NCompress::NHuffman::CDecoder<15, 19>::DecodeSymbol<class NBitl::CDecoder<class CInBuffer>>(class NBitl::CDecoder<class CInBuffer> *)
.text:000034E4                 public ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z
.text:000034E4 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z proc near
.text:000034E4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::DeCodeLevelTable(uchar *,uint)+34p
.text:000034E4
.text:000034E4 var_10          = dword ptr -10h
.text:000034E4 var_C           = dword ptr -0Ch
.text:000034E4 var_8           = dword ptr -8
.text:000034E4 var_4           = dword ptr -4
.text:000034E4 arg_0           = dword ptr  8
.text:000034E4
.text:000034E4                 push    ebp
.text:000034E5                 mov     ebp, esp
.text:000034E7                 sub     esp, 10h
.text:000034EA                 mov     eax, 0CCCCCCCCh
.text:000034EF                 mov     [ebp+var_10], eax
.text:000034F2                 mov     [ebp+var_C], eax
.text:000034F5                 mov     [ebp+var_8], eax
.text:000034F8                 mov     [ebp+var_4], eax
.text:000034FB                 mov     [ebp+var_4], ecx
.text:000034FE                 push    0Fh
.text:00003500                 mov     ecx, [ebp+arg_0]
.text:00003503                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue(uint)
.text:00003508                 mov     [ebp+var_C], eax
.text:0000350B                 mov     eax, [ebp+var_4]
.text:0000350E                 mov     ecx, [ebp+var_C]
.text:00003511                 cmp     ecx, [eax+24h]
.text:00003514                 jnb     short loc_352C
.text:00003516                 mov     edx, [ebp+var_C]
.text:00003519                 shr     edx, 6
.text:0000351C                 mov     eax, [ebp+var_4]
.text:0000351F                 movzx   ecx, byte ptr [eax+edx+0CCh]
.text:00003527                 mov     [ebp+var_8], ecx
.text:0000352A                 jmp     short loc_354E
.text:0000352C ; ---------------------------------------------------------------------------
.text:0000352C
.text:0000352C loc_352C:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+30j
.text:0000352C                 mov     [ebp+var_8], 0Ah
.text:00003533                 jmp     short loc_353E
.text:00003535 ; ---------------------------------------------------------------------------
.text:00003535
.text:00003535 loc_3535:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+68j
.text:00003535                 mov     edx, [ebp+var_8]
.text:00003538                 add     edx, 1
.text:0000353B                 mov     [ebp+var_8], edx
.text:0000353E
.text:0000353E loc_353E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+4Fj
.text:0000353E                 mov     eax, [ebp+var_8]
.text:00003541                 mov     ecx, [ebp+var_4]
.text:00003544                 mov     edx, [ebp+var_C]
.text:00003547                 cmp     edx, [ecx+eax*4]
.text:0000354A                 jb      short loc_354E
.text:0000354C                 jmp     short loc_3535
.text:0000354E ; ---------------------------------------------------------------------------
.text:0000354E
.text:0000354E loc_354E:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+46j
.text:0000354E                                         ; NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+66j
.text:0000354E                 mov     eax, [ebp+var_8]
.text:00003551                 push    eax
.text:00003552                 mov     ecx, [ebp+arg_0]
.text:00003555                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:0000355A                 mov     ecx, [ebp+var_8]
.text:0000355D                 mov     edx, [ebp+var_4]
.text:00003560                 mov     eax, [ebp+var_C]
.text:00003563                 sub     eax, [edx+ecx*4-4]
.text:00003567                 mov     ecx, 0Fh
.text:0000356C                 sub     ecx, [ebp+var_8]
.text:0000356F                 shr     eax, cl
.text:00003571                 mov     ecx, [ebp+var_8]
.text:00003574                 mov     edx, [ebp+var_4]
.text:00003577                 add     eax, [edx+ecx*4+40h]
.text:0000357B                 mov     [ebp+var_10], eax
.text:0000357E                 cmp     [ebp+var_10], 13h
.text:00003582                 jb      short loc_3589
.text:00003584                 or      eax, 0FFFFFFFFh
.text:00003587                 jmp     short loc_3596
.text:00003589 ; ---------------------------------------------------------------------------
.text:00003589
.text:00003589 loc_3589:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+9Ej
.text:00003589                 mov     eax, [ebp+var_10]
.text:0000358C                 mov     ecx, [ebp+var_4]
.text:0000358F                 mov     eax, [ecx+eax*4+80h]
.text:00003596
.text:00003596 loc_3596:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+A3j
.text:00003596                 add     esp, 10h
.text:00003599                 cmp     ebp, esp
.text:0000359B                 call    __RTC_CheckEsp
.text:000035A0                 mov     esp, ebp
.text:000035A2                 pop     ebp
.text:000035A3                 retn    4
.text:000035A3 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BD@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z endp
.text:000035A3
.text:000035A3 ; ---------------------------------------------------------------------------
.text:000035A6                 align 4
.text:000035A6 _text           ends
.text:000035A6
.text:000035A8 ; ===========================================================================
.text:000035A8
.text:000035A8 ; Segment type: Pure code
.text:000035A8 ; Segment permissions: Read/Execute
.text:000035A8 _text           segment para public 'CODE' use32
.text:000035A8                 assume cs:_text
.text:000035A8                 ;org 35A8h
.text:000035A8 ; COMDAT (pick any)
.text:000035A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035A8
.text:000035A8 ; =============== S U B R O U T I N E =======================================
.text:000035A8
.text:000035A8 ; Attributes: bp-based frame
.text:000035A8
.text:000035A8 ; public: unsigned int __thiscall NCompress::NHuffman::CDecoder<15, 288>::DecodeSymbol<class NBitl::CDecoder<class CInBuffer>>(class NBitl::CDecoder<class CInBuffer> *)
.text:000035A8                 public ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z
.text:000035A8 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z proc near
.text:000035A8                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+312p
.text:000035A8                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+4BAp
.text:000035A8
.text:000035A8 var_10          = dword ptr -10h
.text:000035A8 var_C           = dword ptr -0Ch
.text:000035A8 var_8           = dword ptr -8
.text:000035A8 var_4           = dword ptr -4
.text:000035A8 arg_0           = dword ptr  8
.text:000035A8
.text:000035A8                 push    ebp
.text:000035A9                 mov     ebp, esp
.text:000035AB                 sub     esp, 10h
.text:000035AE                 mov     eax, 0CCCCCCCCh
.text:000035B3                 mov     [ebp+var_10], eax
.text:000035B6                 mov     [ebp+var_C], eax
.text:000035B9                 mov     [ebp+var_8], eax
.text:000035BC                 mov     [ebp+var_4], eax
.text:000035BF                 mov     [ebp+var_4], ecx
.text:000035C2                 push    0Fh
.text:000035C4                 mov     ecx, [ebp+arg_0]
.text:000035C7                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue(uint)
.text:000035CC                 mov     [ebp+var_C], eax
.text:000035CF                 mov     eax, [ebp+var_4]
.text:000035D2                 mov     ecx, [ebp+var_C]
.text:000035D5                 cmp     ecx, [eax+24h]
.text:000035D8                 jnb     short loc_35F0
.text:000035DA                 mov     edx, [ebp+var_C]
.text:000035DD                 shr     edx, 6
.text:000035E0                 mov     eax, [ebp+var_4]
.text:000035E3                 movzx   ecx, byte ptr [eax+edx+500h]
.text:000035EB                 mov     [ebp+var_8], ecx
.text:000035EE                 jmp     short loc_3612
.text:000035F0 ; ---------------------------------------------------------------------------
.text:000035F0
.text:000035F0 loc_35F0:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+30j
.text:000035F0                 mov     [ebp+var_8], 0Ah
.text:000035F7                 jmp     short loc_3602
.text:000035F9 ; ---------------------------------------------------------------------------
.text:000035F9
.text:000035F9 loc_35F9:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+68j
.text:000035F9                 mov     edx, [ebp+var_8]
.text:000035FC                 add     edx, 1
.text:000035FF                 mov     [ebp+var_8], edx
.text:00003602
.text:00003602 loc_3602:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+4Fj
.text:00003602                 mov     eax, [ebp+var_8]
.text:00003605                 mov     ecx, [ebp+var_4]
.text:00003608                 mov     edx, [ebp+var_C]
.text:0000360B                 cmp     edx, [ecx+eax*4]
.text:0000360E                 jb      short loc_3612
.text:00003610                 jmp     short loc_35F9
.text:00003612 ; ---------------------------------------------------------------------------
.text:00003612
.text:00003612 loc_3612:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+46j
.text:00003612                                         ; NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+66j
.text:00003612                 mov     eax, [ebp+var_8]
.text:00003615                 push    eax
.text:00003616                 mov     ecx, [ebp+arg_0]
.text:00003619                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:0000361E                 mov     ecx, [ebp+var_8]
.text:00003621                 mov     edx, [ebp+var_4]
.text:00003624                 mov     eax, [ebp+var_C]
.text:00003627                 sub     eax, [edx+ecx*4-4]
.text:0000362B                 mov     ecx, 0Fh
.text:00003630                 sub     ecx, [ebp+var_8]
.text:00003633                 shr     eax, cl
.text:00003635                 mov     ecx, [ebp+var_8]
.text:00003638                 mov     edx, [ebp+var_4]
.text:0000363B                 add     eax, [edx+ecx*4+40h]
.text:0000363F                 mov     [ebp+var_10], eax
.text:00003642                 cmp     [ebp+var_10], 120h
.text:00003649                 jb      short loc_3650
.text:0000364B                 or      eax, 0FFFFFFFFh
.text:0000364E                 jmp     short loc_365D
.text:00003650 ; ---------------------------------------------------------------------------
.text:00003650
.text:00003650 loc_3650:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+A1j
.text:00003650                 mov     eax, [ebp+var_10]
.text:00003653                 mov     ecx, [ebp+var_4]
.text:00003656                 mov     eax, [ecx+eax*4+80h]
.text:0000365D
.text:0000365D loc_365D:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+A6j
.text:0000365D                 add     esp, 10h
.text:00003660                 cmp     ebp, esp
.text:00003662                 call    __RTC_CheckEsp
.text:00003667                 mov     esp, ebp
.text:00003669                 pop     ebp
.text:0000366A                 retn    4
.text:0000366A ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0BCA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z endp
.text:0000366A
.text:0000366A ; ---------------------------------------------------------------------------
.text:0000366D                 align 10h
.text:0000366D _text           ends
.text:0000366D
.text:00003670 ; ===========================================================================
.text:00003670
.text:00003670 ; Segment type: Pure code
.text:00003670 ; Segment permissions: Read/Execute
.text:00003670 _text           segment para public 'CODE' use32
.text:00003670                 assume cs:_text
.text:00003670                 ;org 3670h
.text:00003670 ; COMDAT (pick any)
.text:00003670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003670
.text:00003670 ; =============== S U B R O U T I N E =======================================
.text:00003670
.text:00003670 ; Attributes: bp-based frame
.text:00003670
.text:00003670 ; public: unsigned int __thiscall NCompress::NHuffman::CDecoder<15, 32>::DecodeSymbol<class NBitl::CDecoder<class CInBuffer>>(class NBitl::CDecoder<class CInBuffer> *)
.text:00003670                 public ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z
.text:00003670 ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z proc near
.text:00003670                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+3F9p
.text:00003670
.text:00003670 var_10          = dword ptr -10h
.text:00003670 var_C           = dword ptr -0Ch
.text:00003670 var_8           = dword ptr -8
.text:00003670 var_4           = dword ptr -4
.text:00003670 arg_0           = dword ptr  8
.text:00003670
.text:00003670                 push    ebp
.text:00003671                 mov     ebp, esp
.text:00003673                 sub     esp, 10h
.text:00003676                 mov     eax, 0CCCCCCCCh
.text:0000367B                 mov     [ebp+var_10], eax
.text:0000367E                 mov     [ebp+var_C], eax
.text:00003681                 mov     [ebp+var_8], eax
.text:00003684                 mov     [ebp+var_4], eax
.text:00003687                 mov     [ebp+var_4], ecx
.text:0000368A                 push    0Fh
.text:0000368C                 mov     ecx, [ebp+arg_0]
.text:0000368F                 call    ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue(uint)
.text:00003694                 mov     [ebp+var_C], eax
.text:00003697                 mov     eax, [ebp+var_4]
.text:0000369A                 mov     ecx, [ebp+var_C]
.text:0000369D                 cmp     ecx, [eax+24h]
.text:000036A0                 jnb     short loc_36B8
.text:000036A2                 mov     edx, [ebp+var_C]
.text:000036A5                 shr     edx, 6
.text:000036A8                 mov     eax, [ebp+var_4]
.text:000036AB                 movzx   ecx, byte ptr [eax+edx+100h]
.text:000036B3                 mov     [ebp+var_8], ecx
.text:000036B6                 jmp     short loc_36DA
.text:000036B8 ; ---------------------------------------------------------------------------
.text:000036B8
.text:000036B8 loc_36B8:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+30j
.text:000036B8                 mov     [ebp+var_8], 0Ah
.text:000036BF                 jmp     short loc_36CA
.text:000036C1 ; ---------------------------------------------------------------------------
.text:000036C1
.text:000036C1 loc_36C1:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+68j
.text:000036C1                 mov     edx, [ebp+var_8]
.text:000036C4                 add     edx, 1
.text:000036C7                 mov     [ebp+var_8], edx
.text:000036CA
.text:000036CA loc_36CA:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+4Fj
.text:000036CA                 mov     eax, [ebp+var_8]
.text:000036CD                 mov     ecx, [ebp+var_4]
.text:000036D0                 mov     edx, [ebp+var_C]
.text:000036D3                 cmp     edx, [ecx+eax*4]
.text:000036D6                 jb      short loc_36DA
.text:000036D8                 jmp     short loc_36C1
.text:000036DA ; ---------------------------------------------------------------------------
.text:000036DA
.text:000036DA loc_36DA:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+46j
.text:000036DA                                         ; NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+66j
.text:000036DA                 mov     eax, [ebp+var_8]
.text:000036DD                 push    eax
.text:000036DE                 mov     ecx, [ebp+arg_0]
.text:000036E1                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:000036E6                 mov     ecx, [ebp+var_8]
.text:000036E9                 mov     edx, [ebp+var_4]
.text:000036EC                 mov     eax, [ebp+var_C]
.text:000036EF                 sub     eax, [edx+ecx*4-4]
.text:000036F3                 mov     ecx, 0Fh
.text:000036F8                 sub     ecx, [ebp+var_8]
.text:000036FB                 shr     eax, cl
.text:000036FD                 mov     ecx, [ebp+var_8]
.text:00003700                 mov     edx, [ebp+var_4]
.text:00003703                 add     eax, [edx+ecx*4+40h]
.text:00003707                 mov     [ebp+var_10], eax
.text:0000370A                 cmp     [ebp+var_10], 20h ; ' '
.text:0000370E                 jb      short loc_3715
.text:00003710                 or      eax, 0FFFFFFFFh
.text:00003713                 jmp     short loc_3722
.text:00003715 ; ---------------------------------------------------------------------------
.text:00003715
.text:00003715 loc_3715:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+9Ej
.text:00003715                 mov     eax, [ebp+var_10]
.text:00003718                 mov     ecx, [ebp+var_4]
.text:0000371B                 mov     eax, [ecx+eax*4+80h]
.text:00003722
.text:00003722 loc_3722:                               ; CODE XREF: NCompress::NHuffman::CDecoder<15,32>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+A3j
.text:00003722                 add     esp, 10h
.text:00003725                 cmp     ebp, esp
.text:00003727                 call    __RTC_CheckEsp
.text:0000372C                 mov     esp, ebp
.text:0000372E                 pop     ebp
.text:0000372F                 retn    4
.text:0000372F ??$DecodeSymbol@V?$CDecoder@VCInBuffer@@@NBitl@@@?$CDecoder@$0P@$0CA@@NHuffman@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z endp
.text:0000372F
.text:0000372F ; ---------------------------------------------------------------------------
.text:00003732                 align 4
.text:00003732 _text           ends
.text:00003732
.text:00003734 ; ===========================================================================
.text:00003734
.text:00003734 ; Segment type: Pure code
.text:00003734 ; Segment permissions: Read/Execute
.text:00003734 _text           segment para public 'CODE' use32
.text:00003734                 assume cs:_text
.text:00003734                 ;org 3734h
.text:00003734 ; COMDAT (pick any)
.text:00003734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003734
.text:00003734 ; =============== S U B R O U T I N E =======================================
.text:00003734
.text:00003734 ; Attributes: bp-based frame
.text:00003734
.text:00003734 ; public: unsigned int __thiscall NBitl::CDecoder<class CInBuffer>::GetValue(unsigned int)
.text:00003734                 public ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z
.text:00003734 ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
.text:00003734                                         ; CODE XREF: NCompress::NHuffman::CDecoder<15,19>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+1Fp
.text:00003734                                         ; NCompress::NHuffman::CDecoder<15,288>::DecodeSymbol<NBitl::CDecoder<CInBuffer>>(NBitl::CDecoder<CInBuffer> *)+1Fp ...
.text:00003734
.text:00003734 var_4           = dword ptr -4
.text:00003734 arg_0           = dword ptr  8
.text:00003734
.text:00003734                 push    ebp
.text:00003735                 mov     ebp, esp
.text:00003737                 push    ecx
.text:00003738                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000373F                 mov     [ebp+var_4], ecx
.text:00003742                 mov     ecx, [ebp+var_4]
.text:00003745                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize(void)
.text:0000374A                 mov     eax, [ebp+var_4]
.text:0000374D                 mov     ecx, 8
.text:00003752                 sub     ecx, [eax]
.text:00003754                 mov     edx, [ebp+var_4]
.text:00003757                 mov     eax, [edx+4]
.text:0000375A                 shr     eax, cl
.text:0000375C                 and     eax, 0FFFFFFh
.text:00003761                 mov     ecx, 18h
.text:00003766                 sub     ecx, [ebp+arg_0]
.text:00003769                 shr     eax, cl
.text:0000376B                 add     esp, 4
.text:0000376E                 cmp     ebp, esp
.text:00003770                 call    __RTC_CheckEsp
.text:00003775                 mov     esp, ebp
.text:00003777                 pop     ebp
.text:00003778                 retn    4
.text:00003778 ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z endp
.text:00003778
.text:00003778 ; ---------------------------------------------------------------------------
.text:0000377B                 align 4
.text:0000377B _text           ends
.text:0000377B
.text:0000377C ; ===========================================================================
.text:0000377C
.text:0000377C ; Segment type: Pure code
.text:0000377C ; Segment permissions: Read/Execute
.text:0000377C _text           segment para public 'CODE' use32
.text:0000377C                 assume cs:_text
.text:0000377C                 ;org 377Ch
.text:0000377C ; COMDAT (pick any)
.text:0000377C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000377C
.text:0000377C ; =============== S U B R O U T I N E =======================================
.text:0000377C
.text:0000377C
.text:0000377C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.text:0000377C                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:0000377C ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:0000377C                                         ; DATA XREF: .rdata:00001454o
.text:0000377C
.text:0000377C arg_0           = dword ptr  4
.text:0000377C
.text:0000377C                 sub     [esp+arg_0], 0Ch
.text:00003781                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00003781 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:00003781
.text:00003781 ; ---------------------------------------------------------------------------
.text:00003786                 align 4
.text:00003786 _text           ends
.text:00003786
.text:00003788 ; ===========================================================================
.text:00003788
.text:00003788 ; Segment type: Pure code
.text:00003788 ; Segment permissions: Read/Execute
.text:00003788 _text           segment para public 'CODE' use32
.text:00003788                 assume cs:_text
.text:00003788                 ;org 3788h
.text:00003788 ; COMDAT (pick any)
.text:00003788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003788
.text:00003788 ; =============== S U B R O U T I N E =======================================
.text:00003788
.text:00003788
.text:00003788 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:00003788                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00003788 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00003788                                         ; DATA XREF: .rdata:0000147Co
.text:00003788
.text:00003788 arg_0           = dword ptr  4
.text:00003788
.text:00003788                 sub     [esp+arg_0], 4
.text:0000378D                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:0000378D ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:0000378D
.text:0000378D ; ---------------------------------------------------------------------------
.text:00003792                 align 4
.text:00003792 _text           ends
.text:00003792
.text:00003794 ; ===========================================================================
.text:00003794
.text:00003794 ; Segment type: Pure code
.text:00003794 ; Segment permissions: Read/Execute
.text:00003794 _text           segment para public 'CODE' use32
.text:00003794                 assume cs:_text
.text:00003794                 ;org 3794h
.text:00003794 ; COMDAT (pick any)
.text:00003794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003794
.text:00003794 ; =============== S U B R O U T I N E =======================================
.text:00003794
.text:00003794
.text:00003794 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.text:00003794                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00003794 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00003794                                         ; DATA XREF: .rdata:00001440o
.text:00003794
.text:00003794 arg_0           = dword ptr  4
.text:00003794
.text:00003794                 sub     [esp+arg_0], 10h
.text:00003799                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00003799 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:00003799
.text:00003799 ; ---------------------------------------------------------------------------
.text:0000379E                 align 10h
.text:0000379E _text           ends
.text:0000379E
.text:000037A0 ; ===========================================================================
.text:000037A0
.text:000037A0 ; Segment type: Pure code
.text:000037A0 ; Segment permissions: Read/Execute
.text:000037A0 _text           segment para public 'CODE' use32
.text:000037A0                 assume cs:_text
.text:000037A0                 ;org 37A0h
.text:000037A0 ; COMDAT (pick any)
.text:000037A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037A0
.text:000037A0 ; =============== S U B R O U T I N E =======================================
.text:000037A0
.text:000037A0
.text:000037A0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.text:000037A0                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:000037A0 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:000037A0                                         ; DATA XREF: .rdata:00001464o
.text:000037A0
.text:000037A0 arg_0           = dword ptr  4
.text:000037A0
.text:000037A0                 sub     [esp+arg_0], 8
.text:000037A5                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000037A5 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:000037A5
.text:000037A5 ; ---------------------------------------------------------------------------
.text:000037AA                 align 4
.text:000037AA _text           ends
.text:000037AA
.text:000037AC ; ===========================================================================
.text:000037AC
.text:000037AC ; Segment type: Pure code
.text:000037AC ; Segment permissions: Read/Execute
.text:000037AC _text           segment para public 'CODE' use32
.text:000037AC                 assume cs:_text
.text:000037AC                 ;org 37ACh
.text:000037AC ; COMDAT (pick any)
.text:000037AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037AC
.text:000037AC ; =============== S U B R O U T I N E =======================================
.text:000037AC
.text:000037AC
.text:000037AC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.text:000037AC                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:000037AC ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:000037AC                                         ; DATA XREF: .rdata:00001450o
.text:000037AC
.text:000037AC arg_0           = dword ptr  4
.text:000037AC
.text:000037AC                 sub     [esp+arg_0], 0Ch
.text:000037B1                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000037B1 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:000037B1
.text:000037B1 ; ---------------------------------------------------------------------------
.text:000037B6                 align 4
.text:000037B6 _text           ends
.text:000037B6
.text:000037B8 ; ===========================================================================
.text:000037B8
.text:000037B8 ; Segment type: Pure code
.text:000037B8 ; Segment permissions: Read/Execute
.text:000037B8 _text           segment para public 'CODE' use32
.text:000037B8                 assume cs:_text
.text:000037B8                 ;org 37B8h
.text:000037B8 ; COMDAT (pick any)
.text:000037B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037B8
.text:000037B8 ; =============== S U B R O U T I N E =======================================
.text:000037B8
.text:000037B8
.text:000037B8 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000037B8                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000037B8 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000037B8                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000037B8
.text:000037B8 arg_0           = dword ptr  4
.text:000037B8
.text:000037B8                 sub     [esp+arg_0], 4
.text:000037BD                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000037BD ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000037BD
.text:000037BD ; ---------------------------------------------------------------------------
.text:000037C2                 align 4
.text:000037C2 _text           ends
.text:000037C2
.text:000037C4 ; ===========================================================================
.text:000037C4
.text:000037C4 ; Segment type: Pure code
.text:000037C4 ; Segment permissions: Read/Execute
.text:000037C4 _text           segment para public 'CODE' use32
.text:000037C4                 assume cs:_text
.text:000037C4                 ;org 37C4h
.text:000037C4 ; COMDAT (pick any)
.text:000037C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037C4
.text:000037C4 ; =============== S U B R O U T I N E =======================================
.text:000037C4
.text:000037C4
.text:000037C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.text:000037C4                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:000037C4 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:000037C4                                         ; DATA XREF: .rdata:0000143Co
.text:000037C4
.text:000037C4 arg_0           = dword ptr  4
.text:000037C4
.text:000037C4                 sub     [esp+arg_0], 10h
.text:000037C9                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:000037C9 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:000037C9
.text:000037C9 ; ---------------------------------------------------------------------------
.text:000037CE                 align 10h
.text:000037CE _text           ends
.text:000037CE
.text:000037D0 ; ===========================================================================
.text:000037D0
.text:000037D0 ; Segment type: Pure code
.text:000037D0 ; Segment permissions: Read/Execute
.text:000037D0 _text           segment para public 'CODE' use32
.text:000037D0                 assume cs:_text
.text:000037D0                 ;org 37D0h
.text:000037D0 ; COMDAT (pick any)
.text:000037D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037D0
.text:000037D0 ; =============== S U B R O U T I N E =======================================
.text:000037D0
.text:000037D0
.text:000037D0 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000037D0                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:000037D0 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000037D0                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}o
.text:000037D0
.text:000037D0 arg_0           = dword ptr  4
.text:000037D0
.text:000037D0                 sub     [esp+arg_0], 8
.text:000037D5                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000037D5 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000037D5
.text:000037D5 ; ---------------------------------------------------------------------------
.text:000037DA                 align 4
.text:000037DA _text           ends
.text:000037DA
.text:000037DC ; ===========================================================================
.text:000037DC
.text:000037DC ; Segment type: Pure code
.text:000037DC ; Segment permissions: Read/Execute
.text:000037DC _text           segment para public 'CODE' use32
.text:000037DC                 assume cs:_text
.text:000037DC                 ;org 37DCh
.text:000037DC ; COMDAT (pick any)
.text:000037DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037DC
.text:000037DC ; =============== S U B R O U T I N E =======================================
.text:000037DC
.text:000037DC
.text:000037DC ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000037DC                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:000037DC ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000037DC                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:000037DC
.text:000037DC arg_0           = dword ptr  4
.text:000037DC
.text:000037DC                 sub     [esp+arg_0], 0Ch
.text:000037E1                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000037E1 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000037E1
.text:000037E1 ; ---------------------------------------------------------------------------
.text:000037E6                 align 4
.text:000037E6 _text           ends
.text:000037E6
.text:000037E8 ; ===========================================================================
.text:000037E8
.text:000037E8 ; Segment type: Pure code
.text:000037E8 ; Segment permissions: Read/Execute
.text:000037E8 _text           segment para public 'CODE' use32
.text:000037E8                 assume cs:_text
.text:000037E8                 ;org 37E8h
.text:000037E8 ; COMDAT (pick any)
.text:000037E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037E8
.text:000037E8 ; =============== S U B R O U T I N E =======================================
.text:000037E8
.text:000037E8
.text:000037E8 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:000037E8                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:000037E8 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:000037E8                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}o
.text:000037E8
.text:000037E8 arg_0           = dword ptr  4
.text:000037E8
.text:000037E8                 sub     [esp+arg_0], 10h
.text:000037ED                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000037ED ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:000037ED
.text:000037ED ; ---------------------------------------------------------------------------
.text:000037F2                 align 4
.text:000037F2 _text           ends
.text:000037F2
.text:000037F4 ; ===========================================================================
.text:000037F4
.text:000037F4 ; Segment type: Pure code
.text:000037F4 ; Segment permissions: Read/Execute
.text:000037F4 _text           segment para public 'CODE' use32
.text:000037F4                 assume cs:_text
.text:000037F4                 ;org 37F4h
.text:000037F4 ; COMDAT (pick any)
.text:000037F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037F4
.text:000037F4 ; =============== S U B R O U T I N E =======================================
.text:000037F4
.text:000037F4
.text:000037F4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:000037F4                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:000037F4 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:000037F4                                         ; DATA XREF: .rdata:00001480o
.text:000037F4
.text:000037F4 arg_0           = dword ptr  4
.text:000037F4
.text:000037F4                 sub     [esp+arg_0], 4
.text:000037F9                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000037F9 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:000037F9
.text:000037F9 ; ---------------------------------------------------------------------------
.text:000037FE                 align 10h
.text:000037FE _text           ends
.text:000037FE
.text:00003800 ; ===========================================================================
.text:00003800
.text:00003800 ; Segment type: Pure code
.text:00003800 ; Segment permissions: Read/Execute
.text:00003800 _text           segment para public 'CODE' use32
.text:00003800                 assume cs:_text
.text:00003800                 ;org 3800h
.text:00003800 ; COMDAT (pick any)
.text:00003800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003800
.text:00003800 ; =============== S U B R O U T I N E =======================================
.text:00003800
.text:00003800
.text:00003800 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.text:00003800                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:00003800 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:00003800                                         ; DATA XREF: .rdata:00001468o
.text:00003800
.text:00003800 arg_0           = dword ptr  4
.text:00003800
.text:00003800                 sub     [esp+arg_0], 8
.text:00003805                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00003805 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00003805
.text:00003805 _text           ends
.text:00003805
UNDEF:00003810 ; ===========================================================================
UNDEF:00003810
UNDEF:00003810 ; Segment type: Externs
UNDEF:00003810 ; UNDEF
UNDEF:00003810                 extrn ___security_cookie:near
UNDEF:00003810                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+19r
UNDEF:00003810                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+1Er ...
UNDEF:00003814                 extrn ___CxxFrameHandler3:near
UNDEF:00003814                                         ; CODE XREF: __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z+16j
UNDEF:00003814                                         ; __ehhandler$?CodeReal@CCoder@NDecoder@NDeflate@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z+19j ...
UNDEF:00003818 ; __fastcall __security_check_cookie(x)
UNDEF:00003818                 extrn @__security_check_cookie@4:near
UNDEF:00003818                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+315p
UNDEF:00003818                                         ; __ehhandler$??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z+Cp ...
UNDEF:0000381C                 extrn __RTC_CheckEsp:near
UNDEF:0000381C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)+11Fp
UNDEF:0000381C                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadBits(uint)+22p ...
UNDEF:00003820                 extrn __RTC_Shutdown:near
UNDEF:00003820                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00003824                 extrn __RTC_InitBase:near
UNDEF:00003824                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00003828 ; const type_info::`vftable'
UNDEF:00003828                 extrn ??_7type_info@@6B@:near
UNDEF:00003828                                         ; DATA XREF: .data:NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'o
UNDEF:00003828                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:0000382C ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
UNDEF:0000382C                 extrn ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00003830 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(unsigned int)
UNDEF:00003830                 extrn ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00003830                                         ; DATA XREF: .rdata:0000149Co
UNDEF:00003834                 extrn _IID_ISequentialInStream:near
UNDEF:00003834                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_1B6Do
UNDEF:00003838                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00003838                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_1B39o
UNDEF:0000383C                 extrn _IID_ICompressSetInStream:near
UNDEF:0000383C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_1B05o
UNDEF:00003840                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00003840                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_1ACEo
UNDEF:00003844 ; const IID IID_IUnknown
UNDEF:00003844                 extrn _IID_IUnknown:near
UNDEF:00003844                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+23o
UNDEF:00003848 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00003848                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000384C ; void __cdecl operator delete(void *)
UNDEF:0000384C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+22p
UNDEF:00003850 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00003850                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00003850                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00003854 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00003854                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00003854                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:00003858                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00003858                                         ; .rdata:00001F04o ...
UNDEF:0000385C ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:0000385C                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:0000385C                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:00003860 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00003860                 extrn _memcpy:near      ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+2A0p
UNDEF:00003860                                         ; NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+2C4p
UNDEF:00003864 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00003864                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00003864                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::ReadTables(void)+308p
UNDEF:00003864                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+3A4p ...
UNDEF:00003868 ; void __thiscall CLzOutWindow::Init(CLzOutWindow *__hidden this, bool)
UNDEF:00003868                 extrn ?Init@CLzOutWindow@@QAEX_N@Z:near
UNDEF:00003868                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+C3p
UNDEF:00003868                                         ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)+2Bp ...
UNDEF:0000386C ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:0000386C                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:0000386C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeSpec(uint,bool)+78p
UNDEF:00003870 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00003870                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00003870                                         ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+12Bp
UNDEF:00003870                                         ; CLzOutWindow::PutByte(uchar)+4Ep
UNDEF:00003874 ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:00003874                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:00003874                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+DDp
UNDEF:00003874                                         ; NCompress::NDeflate::NDecoder::CCoder::CodeReal(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)+FFp ...
UNDEF:00003878 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00003878                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00003878                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Flush(void)+14p
UNDEF:0000387C ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:0000387C                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:0000387C                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:00003880 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00003880                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00003880                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Create(uint)+18p
UNDEF:00003884 ; unsigned char * NBitl::kInvertTable
UNDEF:00003884                 extrn ?kInvertTable@NBitl@@3PAEA:near
UNDEF:00003884                                         ; DATA XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+65r
UNDEF:00003888 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00003888                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00003888                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Init(void)+14p
UNDEF:00003888
UNDEF:00003888