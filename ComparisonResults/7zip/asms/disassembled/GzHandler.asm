.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 8A84C06B0BC2366163F877ED082DE0A3
.rdata:00000000 ; Input CRC32 : A0ECACB9
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\GzHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG70797        db  46h ; F             ; DATA XREF: .rdata:_kHostOSeso
.rdata:00000001 ; struct ICompressProgressInfo unk_1
.rdata:00000001 unk_1           db  41h ; A             ; DATA XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+692o
.rdata:00000002                 db  54h ; T
.rdata:00000003                 db    0
.rdata:00000004 $SG70798        db 'AMIGA',0            ; DATA XREF: .rdata:000000A4o
.rdata:0000000A                 align 4
.rdata:0000000C $SG70799        db 'VMS',0              ; DATA XREF: .rdata:000000A8o
.rdata:00000010 $SG70800        db 'Unix',0             ; DATA XREF: .rdata:000000ACo
.rdata:00000015                 align 4
.rdata:00000018 $SG70801        db 'VM/CMS',0           ; DATA XREF: .rdata:000000B0o
.rdata:0000001F                 align 10h
.rdata:00000020 $SG70802        db 'Atari',0            ; DATA XREF: .rdata:000000B4o
.rdata:00000026                 align 4
.rdata:00000028 $SG70803        db 'HPFS',0             ; DATA XREF: .rdata:000000B8o
.rdata:0000002D                 align 10h
.rdata:00000030 $SG70804        db 'Macintosh',0        ; DATA XREF: .rdata:000000BCo
.rdata:0000003A                 align 4
.rdata:0000003C $SG70805        db 'Z-System',0         ; DATA XREF: .rdata:000000C0o
.rdata:0000003C                                         ; .xdata$x:__catchsym$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4o ...
.rdata:00000045                 align 4
.rdata:00000048 $SG70806        db 'CP/M',0             ; DATA XREF: .rdata:000000C4o
.rdata:0000004D                 align 10h
.rdata:00000050 $SG70807        db 'TOPS-20',0          ; DATA XREF: .rdata:000000C8o
.rdata:00000058 $SG70808        db 'NTFS',0             ; DATA XREF: .rdata:000000CCo
.rdata:0000005D                 align 10h
.rdata:00000060 $SG70809        db 'SMS/QDOS',0         ; DATA XREF: .rdata:000000D0o
.rdata:00000069                 align 4
.rdata:0000006C $SG70810        db 'Acorn',0            ; DATA XREF: .rdata:000000D4o
.rdata:00000072                 align 4
.rdata:00000074 $SG70811        db 'VFAT',0             ; DATA XREF: .rdata:000000D8o
.rdata:00000079                 align 4
.rdata:0000007C $SG70812        db 'MVS',0              ; DATA XREF: .rdata:000000DCo
.rdata:00000080 $SG70813        db 'BeOS',0             ; DATA XREF: .rdata:000000E0o
.rdata:00000085                 align 4
.rdata:00000088 $SG70814        db 'Tandem',0           ; DATA XREF: .rdata:000000E4o
.rdata:0000008F                 align 10h
.rdata:00000090 $SG70815        db 'OS/400',0           ; DATA XREF: .rdata:000000E8o
.rdata:00000097                 align 4
.rdata:00000098 $SG70816        db 'OS/X',0             ; DATA XREF: .rdata:000000ECo
.rdata:0000009D                 align 10h
.rdata:000000A0 _kHostOSes      dd offset $SG70797      ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+189r
.rdata:000000A4                 dd offset $SG70798      ; "AMIGA"
.rdata:000000A8                 dd offset $SG70799      ; "VMS"
.rdata:000000AC                 dd offset $SG70800      ; "Unix"
.rdata:000000B0                 dd offset $SG70801      ; "VM/CMS"
.rdata:000000B4                 dd offset $SG70802      ; "Atari"
.rdata:000000B8                 dd offset $SG70803      ; "HPFS"
.rdata:000000BC                 dd offset $SG70804      ; "Macintosh"
.rdata:000000C0                 dd offset $SG70805      ; "Z-System"
.rdata:000000C4                 dd offset $SG70806      ; "CP/M"
.rdata:000000C8                 dd offset $SG70807      ; "TOPS-20"
.rdata:000000CC                 dd offset $SG70808      ; "NTFS"
.rdata:000000D0                 dd offset $SG70809      ; "SMS/QDOS"
.rdata:000000D4                 dd offset $SG70810      ; "Acorn"
.rdata:000000D8                 dd offset $SG70811      ; "VFAT"
.rdata:000000DC                 dd offset $SG70812      ; "MVS"
.rdata:000000E0                 dd offset $SG70813      ; "BeOS"
.rdata:000000E4                 dd offset $SG70814      ; "Tandem"
.rdata:000000E8                 dd offset $SG70815      ; "OS/400"
.rdata:000000EC                 dd offset $SG70816      ; "OS/X"
.rdata:000000F0 $SG70818        db 'Unknown',0          ; DATA XREF: .data:_kUnknownOSo
.rdata:000000F8 _kProps         db 3                    ; DATA XREF: NArchive::NGz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:000000F9                 db    7
.rdata:000000FA                 db    8
.rdata:000000FB                 db  0Ch
.rdata:000000FC                 db  17h
.rdata:000000FD                 db  13h
.rdata:000000FE                 db    0
.rdata:000000FF                 db    0
.rdata:00000100 _kArcProps      db 2Dh                  ; DATA XREF: NArchive::NGz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000101                 db  4Ah ; J
.rdata:00000102                 db    0
.rdata:00000103                 db    0
.rdata:00000104 ; char _SG71319[4]
.rdata:00000104 $SG71319        db '.gz',0              ; DATA XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+190o
.rdata:00000108 _k_Signature    db  1Fh                 ; DATA XREF: .rdata:0000013Co
.rdata:00000109                 db  8Bh ; Ã¯
.rdata:0000010A                 db    8
.rdata:0000010B                 db    0
.rdata:0000010C $SG71846        db 'gzip',0             ; DATA XREF: .rdata:00000140o
.rdata:00000111                 align 4
.rdata:00000114 $SG71847        db 'gz gzip tgz tpz',0  ; DATA XREF: .rdata:00000144o
.rdata:00000124 $SG71848        db '* * .tar .tar',0    ; DATA XREF: .rdata:00000148o
.rdata:00000132                 align 4
.rdata:00000134 ; struct CArcInfo g_ArcInfo
.rdata:00000134 _g_ArcInfo      db    1                 ; DATA XREF: NArchive::NGz::CRegisterArc::CRegisterArc(void)+Eo
.rdata:00000135                 db    0
.rdata:00000136                 db 0EFh ; n
.rdata:00000137                 db    3
.rdata:00000138                 db    0
.rdata:00000139                 db    0
.rdata:0000013A                 db    0
.rdata:0000013B                 db    0
.rdata:0000013C                 dd offset _k_Signature
.rdata:00000140                 dd offset $SG71846      ; "gzip"
.rdata:00000144                 dd offset $SG71847      ; "gz gzip tgz tpz"
.rdata:00000148                 dd offset $SG71848      ; "* * .tar .tar"
.rdata:0000014C                 dd offset ?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NGz::CreateArc(void)
.rdata:00000150                 dd offset ?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ ; NArchive::NGz::CreateArcOut(void)
.rdata:00000154                 dd offset _IsArc_Gz@8   ; IsArc_Gz(x,x)
.rdata:00000154 _rdata          ends
.rdata:00000154
.data:00000158 ; ===========================================================================
.data:00000158
.data:00000158 ; Segment type: Pure data
.data:00000158 ; Segment permissions: Read/Write
.data:00000158 _data           segment dword public 'DATA' use32
.data:00000158                 assume cs:_data
.data:00000158                 ;org 158h
.data:00000158 _kUnknownOS     dd offset $SG70818      ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1129r
.data:00000158                                         ; "Unknown"
.data:0000015C ; int kNameMaxLen
.data:0000015C _kNameMaxLen    dd offset loc_FFE+2     ; DATA XREF: IsArc_Gz(x,x)+182r
.data:0000015C                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+10Ar
.data:00000160 ; int kCommentMaxLen
.data:00000160 _kCommentMaxLen dd 10000h               ; DATA XREF: IsArc_Gz(x,x)+207r
.data:00000160                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+13Er
.data:00000160 _data           ends
.data:00000160
.text:00000164 ; ===========================================================================
.text:00000164
.text:00000164 ; Segment type: Pure code
.text:00000164 ; Segment permissions: Read/Execute
.text:00000164 _text           segment para public 'CODE' use32
.text:00000164                 assume cs:_text
.text:00000164                 ;org 164h
.text:00000164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000164
.text:00000164 ; =============== S U B R O U T I N E =======================================
.text:00000164
.text:00000164 ; Attributes: bp-based frame
.text:00000164
.text:00000164 ; __stdcall IsArc_Gz(x, x)
.text:00000164 _IsArc_Gz@8     proc near               ; DATA XREF: .rdata:00000154o
.text:00000164
.text:00000164 var_1C          = dword ptr -1Ch
.text:00000164 var_18          = dword ptr -18h
.text:00000164 var_14          = dword ptr -14h
.text:00000164 var_10          = dword ptr -10h
.text:00000164 var_C           = dword ptr -0Ch
.text:00000164 var_8           = dword ptr -8
.text:00000164 var_4           = dword ptr -4
.text:00000164 arg_0           = dword ptr  8
.text:00000164 arg_4           = dword ptr  0Ch
.text:00000164
.text:00000164                 push    ebp
.text:00000165                 mov     ebp, esp
.text:00000167                 sub     esp, 1Ch
.text:0000016A                 mov     eax, 0CCCCCCCCh
.text:0000016F                 mov     [ebp+var_1C], eax
.text:00000172                 mov     [ebp+var_18], eax
.text:00000175                 mov     [ebp+var_14], eax
.text:00000178                 mov     [ebp+var_10], eax
.text:0000017B                 mov     [ebp+var_C], eax
.text:0000017E                 mov     [ebp+var_8], eax
.text:00000181                 mov     [ebp+var_4], eax
.text:00000184                 cmp     [ebp+arg_4], 0Ah
.text:00000188                 jnb     short loc_194
.text:0000018A                 mov     eax, 2
.text:0000018F                 jmp     loc_415
.text:00000194 ; ---------------------------------------------------------------------------
.text:00000194
.text:00000194 loc_194:                                ; CODE XREF: IsArc_Gz(x,x)+24j
.text:00000194                 mov     eax, [ebp+arg_0]
.text:00000197                 movzx   ecx, byte ptr [eax]
.text:0000019A                 cmp     ecx, 1Fh
.text:0000019D                 jnz     short loc_1B9
.text:0000019F                 mov     edx, [ebp+arg_0]
.text:000001A2                 movzx   eax, byte ptr [edx+1]
.text:000001A6                 cmp     eax, 8Bh ; 'Ã¯'
.text:000001AB                 jnz     short loc_1B9
.text:000001AD                 mov     ecx, [ebp+arg_0]
.text:000001B0                 movzx   edx, byte ptr [ecx+2]
.text:000001B4                 cmp     edx, 8
.text:000001B7                 jz      short loc_1C0
.text:000001B9
.text:000001B9 loc_1B9:                                ; CODE XREF: IsArc_Gz(x,x)+39j
.text:000001B9                                         ; IsArc_Gz(x,x)+47j
.text:000001B9                 xor     eax, eax
.text:000001BB                 jmp     loc_415
.text:000001C0 ; ---------------------------------------------------------------------------
.text:000001C0
.text:000001C0 loc_1C0:                                ; CODE XREF: IsArc_Gz(x,x)+53j
.text:000001C0                 mov     eax, [ebp+arg_0]
.text:000001C3                 mov     cl, [eax+3]
.text:000001C6                 mov     byte ptr [ebp+var_4+3], cl
.text:000001C9                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000001CD                 and     edx, 0E0h
.text:000001D3                 jz      short loc_1DC
.text:000001D5                 xor     eax, eax
.text:000001D7                 jmp     loc_415
.text:000001DC ; ---------------------------------------------------------------------------
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: IsArc_Gz(x,x)+6Fj
.text:000001DC                 mov     eax, [ebp+arg_0]
.text:000001DF                 mov     cl, [eax+8]
.text:000001E2                 mov     byte ptr [ebp+var_4+2], cl
.text:000001E5                 movzx   edx, byte ptr [ebp+var_4+2]
.text:000001E9                 test    edx, edx
.text:000001EB                 jz      short loc_206
.text:000001ED                 movzx   eax, byte ptr [ebp+var_4+2]
.text:000001F1                 cmp     eax, 2
.text:000001F4                 jz      short loc_206
.text:000001F6                 movzx   ecx, byte ptr [ebp+var_4+2]
.text:000001FA                 cmp     ecx, 4
.text:000001FD                 jz      short loc_206
.text:000001FF                 xor     eax, eax
.text:00000201                 jmp     loc_415
.text:00000206 ; ---------------------------------------------------------------------------
.text:00000206
.text:00000206 loc_206:                                ; CODE XREF: IsArc_Gz(x,x)+87j
.text:00000206                                         ; IsArc_Gz(x,x)+90j ...
.text:00000206                 mov     edx, [ebp+arg_4]
.text:00000209                 sub     edx, 0Ah
.text:0000020C                 mov     [ebp+arg_4], edx
.text:0000020F                 mov     eax, [ebp+arg_0]
.text:00000212                 add     eax, 0Ah
.text:00000215                 mov     [ebp+arg_0], eax
.text:00000218                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:0000021C                 and     ecx, 4
.text:0000021F                 jz      loc_2DD
.text:00000225                 cmp     [ebp+arg_4], 2
.text:00000229                 jnb     short loc_235
.text:0000022B                 mov     eax, 2
.text:00000230                 jmp     loc_415
.text:00000235 ; ---------------------------------------------------------------------------
.text:00000235
.text:00000235 loc_235:                                ; CODE XREF: IsArc_Gz(x,x)+C5j
.text:00000235                 mov     edx, [ebp+arg_0]
.text:00000238                 movzx   eax, word ptr [edx]
.text:0000023B                 mov     [ebp+var_8], eax
.text:0000023E                 mov     ecx, [ebp+arg_4]
.text:00000241                 sub     ecx, 2
.text:00000244                 mov     [ebp+arg_4], ecx
.text:00000247                 mov     edx, [ebp+arg_0]
.text:0000024A                 add     edx, 2
.text:0000024D                 mov     [ebp+arg_0], edx
.text:00000250
.text:00000250 loc_250:                                ; CODE XREF: IsArc_Gz(x,x)+174j
.text:00000250                 cmp     [ebp+var_8], 0
.text:00000254                 jz      loc_2DD
.text:0000025A                 cmp     [ebp+var_8], 4
.text:0000025E                 jnb     short loc_267
.text:00000260                 xor     eax, eax
.text:00000262                 jmp     loc_415
.text:00000267 ; ---------------------------------------------------------------------------
.text:00000267
.text:00000267 loc_267:                                ; CODE XREF: IsArc_Gz(x,x)+FAj
.text:00000267                 cmp     [ebp+arg_4], 4
.text:0000026B                 jnb     short loc_277
.text:0000026D                 mov     eax, 2
.text:00000272                 jmp     loc_415
.text:00000277 ; ---------------------------------------------------------------------------
.text:00000277
.text:00000277 loc_277:                                ; CODE XREF: IsArc_Gz(x,x)+107j
.text:00000277                 mov     eax, [ebp+arg_0]
.text:0000027A                 movzx   ecx, word ptr [eax+2]
.text:0000027E                 mov     [ebp+var_C], ecx
.text:00000281                 mov     edx, [ebp+arg_4]
.text:00000284                 sub     edx, 4
.text:00000287                 mov     [ebp+arg_4], edx
.text:0000028A                 mov     eax, [ebp+var_8]
.text:0000028D                 sub     eax, 4
.text:00000290                 mov     [ebp+var_8], eax
.text:00000293                 mov     ecx, [ebp+arg_0]
.text:00000296                 add     ecx, 4
.text:00000299                 mov     [ebp+arg_0], ecx
.text:0000029C                 mov     edx, [ebp+var_C]
.text:0000029F                 cmp     edx, [ebp+var_8]
.text:000002A2                 jbe     short loc_2AB
.text:000002A4                 xor     eax, eax
.text:000002A6                 jmp     loc_415
.text:000002AB ; ---------------------------------------------------------------------------
.text:000002AB
.text:000002AB loc_2AB:                                ; CODE XREF: IsArc_Gz(x,x)+13Ej
.text:000002AB                 mov     eax, [ebp+var_C]
.text:000002AE                 cmp     eax, [ebp+arg_4]
.text:000002B1                 jbe     short loc_2BD
.text:000002B3                 mov     eax, 2
.text:000002B8                 jmp     loc_415
.text:000002BD ; ---------------------------------------------------------------------------
.text:000002BD
.text:000002BD loc_2BD:                                ; CODE XREF: IsArc_Gz(x,x)+14Dj
.text:000002BD                 mov     ecx, [ebp+arg_4]
.text:000002C0                 sub     ecx, [ebp+var_C]
.text:000002C3                 mov     [ebp+arg_4], ecx
.text:000002C6                 mov     edx, [ebp+var_8]
.text:000002C9                 sub     edx, [ebp+var_C]
.text:000002CC                 mov     [ebp+var_8], edx
.text:000002CF                 mov     eax, [ebp+arg_0]
.text:000002D2                 add     eax, [ebp+var_C]
.text:000002D5                 mov     [ebp+arg_0], eax
.text:000002D8                 jmp     loc_250
.text:000002DD ; ---------------------------------------------------------------------------
.text:000002DD
.text:000002DD loc_2DD:                                ; CODE XREF: IsArc_Gz(x,x)+BBj
.text:000002DD                                         ; IsArc_Gz(x,x)+F0j
.text:000002DD                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:000002E1                 and     ecx, 8
.text:000002E4                 jz      short loc_362
.text:000002E6                 mov     edx, ds:_kNameMaxLen
.text:000002EC                 mov     [ebp+var_10], edx
.text:000002EF                 mov     eax, [ebp+var_10]
.text:000002F2                 cmp     eax, [ebp+arg_4]
.text:000002F5                 jbe     short loc_2FD
.text:000002F7                 mov     ecx, [ebp+arg_4]
.text:000002FA                 mov     [ebp+var_10], ecx
.text:000002FD
.text:000002FD loc_2FD:                                ; CODE XREF: IsArc_Gz(x,x)+191j
.text:000002FD                 mov     [ebp+var_14], 0
.text:00000304                 jmp     short loc_30F
.text:00000306 ; ---------------------------------------------------------------------------
.text:00000306
.text:00000306 loc_306:                                ; CODE XREF: IsArc_Gz(x,x)+1C0j
.text:00000306                 mov     edx, [ebp+var_14]
.text:00000309                 add     edx, 1
.text:0000030C                 mov     [ebp+var_14], edx
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: IsArc_Gz(x,x)+1A0j
.text:0000030F                 mov     eax, [ebp+var_14]
.text:00000312                 cmp     eax, [ebp+var_10]
.text:00000315                 jnb     short loc_326
.text:00000317                 mov     ecx, [ebp+arg_0]
.text:0000031A                 add     ecx, [ebp+var_14]
.text:0000031D                 movzx   edx, byte ptr [ecx]
.text:00000320                 test    edx, edx
.text:00000322                 jz      short loc_326
.text:00000324                 jmp     short loc_306
.text:00000326 ; ---------------------------------------------------------------------------
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: IsArc_Gz(x,x)+1B1j
.text:00000326                                         ; IsArc_Gz(x,x)+1BEj
.text:00000326                 mov     eax, [ebp+var_14]
.text:00000329                 cmp     eax, [ebp+arg_4]
.text:0000032C                 jnz     short loc_338
.text:0000032E                 mov     eax, 2
.text:00000333                 jmp     loc_415
.text:00000338 ; ---------------------------------------------------------------------------
.text:00000338
.text:00000338 loc_338:                                ; CODE XREF: IsArc_Gz(x,x)+1C8j
.text:00000338                 mov     ecx, [ebp+var_14]
.text:0000033B                 cmp     ecx, [ebp+var_10]
.text:0000033E                 jnz     short loc_347
.text:00000340                 xor     eax, eax
.text:00000342                 jmp     loc_415
.text:00000347 ; ---------------------------------------------------------------------------
.text:00000347
.text:00000347 loc_347:                                ; CODE XREF: IsArc_Gz(x,x)+1DAj
.text:00000347                 mov     edx, [ebp+var_14]
.text:0000034A                 add     edx, 1
.text:0000034D                 mov     [ebp+var_14], edx
.text:00000350                 mov     eax, [ebp+arg_0]
.text:00000353                 add     eax, [ebp+var_14]
.text:00000356                 mov     [ebp+arg_0], eax
.text:00000359                 mov     ecx, [ebp+arg_4]
.text:0000035C                 sub     ecx, [ebp+var_14]
.text:0000035F                 mov     [ebp+arg_4], ecx
.text:00000362
.text:00000362 loc_362:                                ; CODE XREF: IsArc_Gz(x,x)+180j
.text:00000362                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00000366                 and     edx, 10h
.text:00000369                 jz      short loc_3E0
.text:0000036B                 mov     eax, ds:_kCommentMaxLen
.text:00000370                 mov     [ebp+var_18], eax
.text:00000373                 mov     ecx, [ebp+var_18]
.text:00000376                 cmp     ecx, [ebp+arg_4]
.text:00000379                 jbe     short loc_381
.text:0000037B                 mov     edx, [ebp+arg_4]
.text:0000037E                 mov     [ebp+var_18], edx
.text:00000381
.text:00000381 loc_381:                                ; CODE XREF: IsArc_Gz(x,x)+215j
.text:00000381                 mov     [ebp+var_1C], 0
.text:00000388                 jmp     short loc_393
.text:0000038A ; ---------------------------------------------------------------------------
.text:0000038A
.text:0000038A loc_38A:                                ; CODE XREF: IsArc_Gz(x,x)+244j
.text:0000038A                 mov     eax, [ebp+var_1C]
.text:0000038D                 add     eax, 1
.text:00000390                 mov     [ebp+var_1C], eax
.text:00000393
.text:00000393 loc_393:                                ; CODE XREF: IsArc_Gz(x,x)+224j
.text:00000393                 mov     ecx, [ebp+var_1C]
.text:00000396                 cmp     ecx, [ebp+var_18]
.text:00000399                 jnb     short loc_3AA
.text:0000039B                 mov     edx, [ebp+arg_0]
.text:0000039E                 add     edx, [ebp+var_1C]
.text:000003A1                 movzx   eax, byte ptr [edx]
.text:000003A4                 test    eax, eax
.text:000003A6                 jz      short loc_3AA
.text:000003A8                 jmp     short loc_38A
.text:000003AA ; ---------------------------------------------------------------------------
.text:000003AA
.text:000003AA loc_3AA:                                ; CODE XREF: IsArc_Gz(x,x)+235j
.text:000003AA                                         ; IsArc_Gz(x,x)+242j
.text:000003AA                 mov     ecx, [ebp+var_1C]
.text:000003AD                 cmp     ecx, [ebp+arg_4]
.text:000003B0                 jnz     short loc_3B9
.text:000003B2                 mov     eax, 2
.text:000003B7                 jmp     short loc_415
.text:000003B9 ; ---------------------------------------------------------------------------
.text:000003B9
.text:000003B9 loc_3B9:                                ; CODE XREF: IsArc_Gz(x,x)+24Cj
.text:000003B9                 mov     edx, [ebp+var_1C]
.text:000003BC                 cmp     edx, [ebp+var_18]
.text:000003BF                 jnz     short loc_3C5
.text:000003C1                 xor     eax, eax
.text:000003C3                 jmp     short loc_415
.text:000003C5 ; ---------------------------------------------------------------------------
.text:000003C5
.text:000003C5 loc_3C5:                                ; CODE XREF: IsArc_Gz(x,x)+25Bj
.text:000003C5                 mov     eax, [ebp+var_1C]
.text:000003C8                 add     eax, 1
.text:000003CB                 mov     [ebp+var_1C], eax
.text:000003CE                 mov     ecx, [ebp+arg_0]
.text:000003D1                 add     ecx, [ebp+var_1C]
.text:000003D4                 mov     [ebp+arg_0], ecx
.text:000003D7                 mov     edx, [ebp+arg_4]
.text:000003DA                 sub     edx, [ebp+var_1C]
.text:000003DD                 mov     [ebp+arg_4], edx
.text:000003E0
.text:000003E0 loc_3E0:                                ; CODE XREF: IsArc_Gz(x,x)+205j
.text:000003E0                 movzx   eax, byte ptr [ebp+var_4+3]
.text:000003E4                 and     eax, 2
.text:000003E7                 jz      short loc_408
.text:000003E9                 cmp     [ebp+arg_4], 2
.text:000003ED                 jnb     short loc_3F6
.text:000003EF                 mov     eax, 2
.text:000003F4                 jmp     short loc_415
.text:000003F6 ; ---------------------------------------------------------------------------
.text:000003F6
.text:000003F6 loc_3F6:                                ; CODE XREF: IsArc_Gz(x,x)+289j
.text:000003F6                 mov     ecx, [ebp+arg_0]
.text:000003F9                 add     ecx, 2
.text:000003FC                 mov     [ebp+arg_0], ecx
.text:000003FF                 mov     edx, [ebp+arg_4]
.text:00000402                 sub     edx, 2
.text:00000405                 mov     [ebp+arg_4], edx
.text:00000408
.text:00000408 loc_408:                                ; CODE XREF: IsArc_Gz(x,x)+283j
.text:00000408                 mov     eax, [ebp+arg_4]
.text:0000040B                 push    eax
.text:0000040C                 mov     ecx, [ebp+arg_0]
.text:0000040F                 push    ecx
.text:00000410                 call    ?Is_Deflate@NGz@NArchive@@YGIPBEI@Z ; NArchive::NGz::Is_Deflate(uchar const *,uint)
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: IsArc_Gz(x,x)+2Bj
.text:00000415                                         ; IsArc_Gz(x,x)+57j ...
.text:00000415                 add     esp, 1Ch
.text:00000418                 cmp     ebp, esp
.text:0000041A                 call    __RTC_CheckEsp
.text:0000041F                 mov     esp, ebp
.text:00000421                 pop     ebp
.text:00000422                 retn    8
.text:00000422 _IsArc_Gz@8     endp
.text:00000422
.text:00000422 ; ---------------------------------------------------------------------------
.text:00000425                 db 0Fh dup(0CCh)
.text:00000434
.text:00000434 ; =============== S U B R O U T I N E =======================================
.text:00000434
.text:00000434 ; Attributes: bp-based frame
.text:00000434
.text:00000434 ; unsigned int __stdcall NArchive::NGz::Is_Deflate(unsigned char const *, unsigned int)
.text:00000434 ?Is_Deflate@NGz@NArchive@@YGIPBEI@Z proc near ; CODE XREF: IsArc_Gz(x,x)+2ACp
.text:00000434
.text:00000434 var_8           = dword ptr -8
.text:00000434 var_4           = dword ptr -4
.text:00000434 arg_0           = dword ptr  8
.text:00000434 arg_4           = dword ptr  0Ch
.text:00000434
.text:00000434                 push    ebp
.text:00000435                 mov     ebp, esp
.text:00000437                 sub     esp, 8
.text:0000043A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000441                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000448                 cmp     [ebp+arg_4], 1
.text:0000044C                 jnb     short loc_458
.text:0000044E                 mov     eax, 2
.text:00000453                 jmp     loc_4F3
.text:00000458 ; ---------------------------------------------------------------------------
.text:00000458
.text:00000458 loc_458:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+18j
.text:00000458                 mov     eax, [ebp+arg_0]
.text:0000045B                 mov     cl, [eax]
.text:0000045D                 mov     byte ptr [ebp+var_4+3], cl
.text:00000460                 mov     edx, [ebp+arg_0]
.text:00000463                 add     edx, 1
.text:00000466                 mov     [ebp+arg_0], edx
.text:00000469                 mov     eax, [ebp+arg_4]
.text:0000046C                 sub     eax, 1
.text:0000046F                 mov     [ebp+arg_4], eax
.text:00000472                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:00000476                 shr     ecx, 1
.text:00000478                 and     ecx, 3
.text:0000047B                 mov     [ebp+var_8], ecx
.text:0000047E                 cmp     [ebp+var_8], 3
.text:00000482                 jnz     short loc_488
.text:00000484                 xor     eax, eax
.text:00000486                 jmp     short loc_4F3
.text:00000488 ; ---------------------------------------------------------------------------
.text:00000488
.text:00000488 loc_488:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+4Ej
.text:00000488                 cmp     [ebp+var_8], 0
.text:0000048C                 jnz     short loc_4C6
.text:0000048E                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00000492                 sar     edx, 3
.text:00000495                 test    edx, edx
.text:00000497                 jz      short loc_49D
.text:00000499                 xor     eax, eax
.text:0000049B                 jmp     short loc_4F3
.text:0000049D ; ---------------------------------------------------------------------------
.text:0000049D
.text:0000049D loc_49D:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+63j
.text:0000049D                 cmp     [ebp+arg_4], 4
.text:000004A1                 jnb     short loc_4AA
.text:000004A3                 mov     eax, 2
.text:000004A8                 jmp     short loc_4F3
.text:000004AA ; ---------------------------------------------------------------------------
.text:000004AA
.text:000004AA loc_4AA:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+6Dj
.text:000004AA                 mov     eax, [ebp+arg_0]
.text:000004AD                 movzx   ecx, word ptr [eax]
.text:000004B0                 mov     edx, [ebp+arg_0]
.text:000004B3                 movzx   eax, word ptr [edx+2]
.text:000004B7                 not     eax
.text:000004B9                 movzx   edx, ax
.text:000004BC                 cmp     ecx, edx
.text:000004BE                 jz      short loc_4C4
.text:000004C0                 xor     eax, eax
.text:000004C2                 jmp     short loc_4F3
.text:000004C4 ; ---------------------------------------------------------------------------
.text:000004C4
.text:000004C4 loc_4C4:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+8Aj
.text:000004C4                 jmp     short loc_4EE
.text:000004C6 ; ---------------------------------------------------------------------------
.text:000004C6
.text:000004C6 loc_4C6:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+58j
.text:000004C6                 cmp     [ebp+var_8], 2
.text:000004CA                 jnz     short loc_4EE
.text:000004CC                 cmp     [ebp+arg_4], 1
.text:000004D0                 jnb     short loc_4D9
.text:000004D2                 mov     eax, 2
.text:000004D7                 jmp     short loc_4F3
.text:000004D9 ; ---------------------------------------------------------------------------
.text:000004D9
.text:000004D9 loc_4D9:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+9Cj
.text:000004D9                 mov     eax, [ebp+arg_0]
.text:000004DC                 movzx   ecx, byte ptr [eax]
.text:000004DF                 and     ecx, 1Fh
.text:000004E2                 add     ecx, 1
.text:000004E5                 cmp     ecx, 1Eh
.text:000004E8                 jle     short loc_4EE
.text:000004EA                 xor     eax, eax
.text:000004EC                 jmp     short loc_4F3
.text:000004EE ; ---------------------------------------------------------------------------
.text:000004EE
.text:000004EE loc_4EE:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint):loc_4C4j
.text:000004EE                                         ; NArchive::NGz::Is_Deflate(uchar const *,uint)+96j ...
.text:000004EE                 mov     eax, 1
.text:000004F3
.text:000004F3 loc_4F3:                                ; CODE XREF: NArchive::NGz::Is_Deflate(uchar const *,uint)+1Fj
.text:000004F3                                         ; NArchive::NGz::Is_Deflate(uchar const *,uint)+52j ...
.text:000004F3                 mov     esp, ebp
.text:000004F5                 pop     ebp
.text:000004F6                 retn    8
.text:000004F6 ?Is_Deflate@NGz@NArchive@@YGIPBEI@Z endp
.text:000004F6
.text:000004F6 ; ---------------------------------------------------------------------------
.text:000004F9                 db 0Bh dup(0CCh)
.text:00000504
.text:00000504 ; =============== S U B R O U T I N E =======================================
.text:00000504
.text:00000504 ; Attributes: bp-based frame
.text:00000504
.text:00000504 ; __int32 __thiscall NArchive::NGz::CItem::ReadHeader(NArchive::NGz::CItem *this, struct NCompress::NDeflate::NDecoder::CCOMCoder *)
.text:00000504                 public ?ReadHeader@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z
.text:00000504 ?ReadHeader@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z proc near
.text:00000504                                         ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+A0p
.text:00000504                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4C6p
.text:00000504
.text:00000504 var_4C          = dword ptr -4Ch
.text:00000504 var_44          = dword ptr -44h
.text:00000504 var_3C          = dword ptr -3Ch
.text:00000504 var_38          = dword ptr -38h
.text:00000504 var_34          = dword ptr -34h
.text:00000504 var_30          = dword ptr -30h
.text:00000504 var_28          = dword ptr -28h
.text:00000504 var_20          = dword ptr -20h
.text:00000504 var_18          = dword ptr -18h
.text:00000504 var_14          = dword ptr -14h
.text:00000504 var_10          = byte ptr -10h
.text:00000504 var_F           = byte ptr -0Fh
.text:00000504 var_8           = dword ptr -8
.text:00000504 var_4           = dword ptr -4
.text:00000504 arg_0           = dword ptr  8
.text:00000504
.text:00000504                 push    ebp
.text:00000505                 mov     ebp, esp
.text:00000507                 sub     esp, 4Ch
.text:0000050A                 push    edi
.text:0000050B                 push    ecx
.text:0000050C                 lea     edi, [ebp+var_4C]
.text:0000050F                 mov     ecx, 13h
.text:00000514                 mov     eax, 0CCCCCCCCh
.text:00000519                 rep stosd
.text:0000051B                 pop     ecx
.text:0000051C                 mov     eax, dword ptr ds:___security_cookie
.text:00000521                 xor     eax, ebp
.text:00000523                 mov     [ebp+var_4], eax
.text:00000526                 mov     [ebp+var_8], ecx
.text:00000529                 mov     ecx, [ebp+var_8] ; this
.text:0000052C                 call    ?Clear@CItem@NGz@NArchive@@QAEXXZ ; NArchive::NGz::CItem::Clear(void)
.text:00000531                 push    0Ah             ; int
.text:00000533                 lea     eax, [ebp+var_18]
.text:00000536                 push    eax             ; int
.text:00000537                 mov     ecx, [ebp+arg_0]
.text:0000053A                 push    ecx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:0000053B                 call    ?ReadBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@PAEI@Z ; NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)
.text:00000540                 mov     [ebp+var_20], eax
.text:00000543                 cmp     [ebp+var_20], 0
.text:00000547                 jz      short loc_551
.text:00000549                 mov     eax, [ebp+var_20]
.text:0000054C                 jmp     loc_6A1
.text:00000551 ; ---------------------------------------------------------------------------
.text:00000551
.text:00000551 loc_551:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+43j
.text:00000551                 movzx   edx, byte ptr [ebp+var_18]
.text:00000555                 cmp     edx, 1Fh
.text:00000558                 jnz     short loc_56E
.text:0000055A                 movzx   eax, byte ptr [ebp+var_18+1]
.text:0000055E                 cmp     eax, 8Bh ; 'Ã¯'
.text:00000563                 jnz     short loc_56E
.text:00000565                 movzx   ecx, byte ptr [ebp+var_18+2]
.text:00000569                 cmp     ecx, 8
.text:0000056C                 jz      short loc_578
.text:0000056E
.text:0000056E loc_56E:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+54j
.text:0000056E                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+5Fj
.text:0000056E                 mov     eax, 1
.text:00000573                 jmp     loc_6A1
.text:00000578 ; ---------------------------------------------------------------------------
.text:00000578
.text:00000578 loc_578:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+68j
.text:00000578                 mov     edx, [ebp+var_8]
.text:0000057B                 mov     al, byte ptr [ebp+var_18+3]
.text:0000057E                 mov     [edx], al
.text:00000580                 mov     ecx, [ebp+var_8] ; this
.text:00000583                 call    ?IsSupported@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::IsSupported(void)
.text:00000588                 movzx   ecx, al
.text:0000058B                 test    ecx, ecx
.text:0000058D                 jnz     short loc_599
.text:0000058F                 mov     eax, 1
.text:00000594                 jmp     loc_6A1
.text:00000599 ; ---------------------------------------------------------------------------
.text:00000599
.text:00000599 loc_599:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+89j
.text:00000599                 mov     edx, [ebp+var_8]
.text:0000059C                 mov     eax, [ebp+var_14]
.text:0000059F                 mov     [edx+4], eax
.text:000005A2                 mov     ecx, [ebp+var_8]
.text:000005A5                 mov     dl, [ebp+var_10]
.text:000005A8                 mov     [ecx+1], dl
.text:000005AB                 mov     eax, [ebp+var_8]
.text:000005AE                 mov     cl, [ebp+var_F]
.text:000005B1                 mov     [eax+2], cl
.text:000005B4                 mov     ecx, [ebp+var_8] ; this
.text:000005B7                 call    ?ExtraFieldIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::ExtraFieldIsPresent(void)
.text:000005BC                 movzx   edx, al
.text:000005BF                 test    edx, edx
.text:000005C1                 jz      short loc_5FF
.text:000005C3                 lea     eax, [ebp+var_28]
.text:000005C6                 push    eax             ; int
.text:000005C7                 mov     ecx, [ebp+arg_0]
.text:000005CA                 push    ecx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:000005CB                 call    ?ReadUInt16@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAI@Z ; NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)
.text:000005D0                 mov     [ebp+var_30], eax
.text:000005D3                 cmp     [ebp+var_30], 0
.text:000005D7                 jz      short loc_5E1
.text:000005D9                 mov     eax, [ebp+var_30]
.text:000005DC                 jmp     loc_6A1
.text:000005E1 ; ---------------------------------------------------------------------------
.text:000005E1
.text:000005E1 loc_5E1:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+D3j
.text:000005E1                 mov     edx, [ebp+var_28]
.text:000005E4                 push    edx             ; int
.text:000005E5                 mov     eax, [ebp+arg_0]
.text:000005E8                 push    eax             ; NCompress::NDeflate::NDecoder::CCoder *
.text:000005E9                 call    ?SkipBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@I@Z ; NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uint)
.text:000005EE                 mov     [ebp+var_34], eax
.text:000005F1                 cmp     [ebp+var_34], 0
.text:000005F5                 jz      short loc_5FF
.text:000005F7                 mov     eax, [ebp+var_34]
.text:000005FA                 jmp     loc_6A1
.text:000005FF ; ---------------------------------------------------------------------------
.text:000005FF
.text:000005FF loc_5FF:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+BDj
.text:000005FF                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+F1j
.text:000005FF                 mov     ecx, [ebp+var_8] ; this
.text:00000602                 call    ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::NameIsPresent(void)
.text:00000607                 movzx   ecx, al
.text:0000060A                 test    ecx, ecx
.text:0000060C                 jz      short loc_633
.text:0000060E                 mov     edx, ds:_kNameMaxLen
.text:00000614                 push    edx             ; int
.text:00000615                 mov     eax, [ebp+var_8]
.text:00000618                 add     eax, 10h
.text:0000061B                 push    eax             ; AString *
.text:0000061C                 mov     ecx, [ebp+arg_0]
.text:0000061F                 push    ecx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:00000620                 call    ?ReadString@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAVAString@@I@Z ; NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)
.text:00000625                 mov     [ebp+var_38], eax
.text:00000628                 cmp     [ebp+var_38], 0
.text:0000062C                 jz      short loc_633
.text:0000062E                 mov     eax, [ebp+var_38]
.text:00000631                 jmp     short loc_6A1
.text:00000633 ; ---------------------------------------------------------------------------
.text:00000633
.text:00000633 loc_633:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+108j
.text:00000633                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+128j
.text:00000633                 mov     ecx, [ebp+var_8] ; this
.text:00000636                 call    ?CommentIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::CommentIsPresent(void)
.text:0000063B                 movzx   edx, al
.text:0000063E                 test    edx, edx
.text:00000640                 jz      short loc_666
.text:00000642                 mov     eax, ds:_kCommentMaxLen
.text:00000647                 push    eax             ; int
.text:00000648                 mov     ecx, [ebp+var_8]
.text:0000064B                 add     ecx, 1Ch
.text:0000064E                 push    ecx             ; AString *
.text:0000064F                 mov     edx, [ebp+arg_0]
.text:00000652                 push    edx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:00000653                 call    ?ReadString@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAVAString@@I@Z ; NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)
.text:00000658                 mov     [ebp+var_3C], eax
.text:0000065B                 cmp     [ebp+var_3C], 0
.text:0000065F                 jz      short loc_666
.text:00000661                 mov     eax, [ebp+var_3C]
.text:00000664                 jmp     short loc_6A1
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000666
.text:00000666 loc_666:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+13Cj
.text:00000666                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+15Bj
.text:00000666                 mov     ecx, [ebp+var_8] ; this
.text:00000669                 call    ?HeaderCrcIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::HeaderCrcIsPresent(void)
.text:0000066E                 movzx   eax, al
.text:00000671                 test    eax, eax
.text:00000673                 jz      short loc_690
.text:00000675                 lea     ecx, [ebp+var_44]
.text:00000678                 push    ecx             ; int
.text:00000679                 mov     edx, [ebp+arg_0]
.text:0000067C                 push    edx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:0000067D                 call    ?ReadUInt16@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAI@Z ; NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)
.text:00000682                 mov     [ebp+var_4C], eax
.text:00000685                 cmp     [ebp+var_4C], 0
.text:00000689                 jz      short loc_690
.text:0000068B                 mov     eax, [ebp+var_4C]
.text:0000068E                 jmp     short loc_6A1
.text:00000690 ; ---------------------------------------------------------------------------
.text:00000690
.text:00000690 loc_690:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+16Fj
.text:00000690                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+185j
.text:00000690                 mov     ecx, [ebp+arg_0] ; this
.text:00000693                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00000698                 movzx   eax, al
.text:0000069B                 neg     eax
.text:0000069D                 sbb     eax, eax
.text:0000069F                 neg     eax
.text:000006A1
.text:000006A1 loc_6A1:                                ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+48j
.text:000006A1                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+6Fj ...
.text:000006A1                 push    edx
.text:000006A2                 mov     ecx, ebp
.text:000006A4                 push    eax
.text:000006A5                 lea     edx, $LN20
.text:000006AB                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006B0                 pop     eax
.text:000006B1                 pop     edx
.text:000006B2                 pop     edi
.text:000006B3                 mov     ecx, [ebp+var_4]
.text:000006B6                 xor     ecx, ebp
.text:000006B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000006BD                 add     esp, 4Ch
.text:000006C0                 cmp     ebp, esp
.text:000006C2                 call    __RTC_CheckEsp
.text:000006C7                 mov     esp, ebp
.text:000006C9                 pop     ebp
.text:000006CA                 retn    4
.text:000006CA ?ReadHeader@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z endp
.text:000006CA
.text:000006CA ; ---------------------------------------------------------------------------
.text:000006CD                 align 10h
.text:000006D0 $LN20           dd 3                    ; DATA XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+1A1o
.text:000006D4                 dd offset $LN19
.text:000006D8 $LN19           dd 0FFFFFFE8h, 0Ah      ; DATA XREF: .text:000006D4o
.text:000006E0                 dd offset $LN16         ; "buf"
.text:000006E4                 dd 0FFFFFFD8h, 4
.text:000006EC                 dd offset $LN17         ; "xlen"
.text:000006F0                 dd 0FFFFFFBCh, 4
.text:000006F8                 dd offset $LN18         ; "headerCRC"
.text:000006FC $LN18           db 'headerCRC',0        ; DATA XREF: .text:000006F8o
.text:00000706 $LN17           db 'xlen',0             ; DATA XREF: .text:000006ECo
.text:0000070B $LN16           db 'buf',0              ; DATA XREF: .text:000006E0o
.text:0000070F                 db 5 dup(0CCh)
.text:00000714
.text:00000714 ; =============== S U B R O U T I N E =======================================
.text:00000714
.text:00000714 ; Attributes: bp-based frame
.text:00000714
.text:00000714 ; int __stdcall NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCoder *, int, int)
.text:00000714 ?ReadBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@PAEI@Z proc near
.text:00000714                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+37p
.text:00000714                                         ; NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+37p
.text:00000714
.text:00000714 var_4           = dword ptr -4
.text:00000714 arg_0           = dword ptr  8
.text:00000714 arg_4           = dword ptr  0Ch
.text:00000714 arg_8           = dword ptr  10h
.text:00000714
.text:00000714                 push    ebp
.text:00000715                 mov     ebp, esp
.text:00000717                 push    ecx
.text:00000718                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071F                 mov     [ebp+var_4], 0
.text:00000726                 jmp     short loc_731
.text:00000728 ; ---------------------------------------------------------------------------
.text:00000728
.text:00000728 loc_728:                                ; CODE XREF: NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)+35j
.text:00000728                 mov     eax, [ebp+var_4]
.text:0000072B                 add     eax, 1
.text:0000072E                 mov     [ebp+var_4], eax
.text:00000731
.text:00000731 loc_731:                                ; CODE XREF: NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)+12j
.text:00000731                 mov     ecx, [ebp+var_4]
.text:00000734                 cmp     ecx, [ebp+arg_8]
.text:00000737                 jnb     short loc_74B
.text:00000739                 mov     ecx, [ebp+arg_0] ; this
.text:0000073C                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:00000741                 mov     edx, [ebp+arg_4]
.text:00000744                 add     edx, [ebp+var_4]
.text:00000747                 mov     [edx], al
.text:00000749                 jmp     short loc_728
.text:0000074B ; ---------------------------------------------------------------------------
.text:0000074B
.text:0000074B loc_74B:                                ; CODE XREF: NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)+23j
.text:0000074B                 mov     ecx, [ebp+arg_0] ; this
.text:0000074E                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00000753                 movzx   eax, al
.text:00000756                 neg     eax
.text:00000758                 sbb     eax, eax
.text:0000075A                 neg     eax
.text:0000075C                 add     esp, 4
.text:0000075F                 cmp     ebp, esp
.text:00000761                 call    __RTC_CheckEsp
.text:00000766                 mov     esp, ebp
.text:00000768                 pop     ebp
.text:00000769                 retn    0Ch
.text:00000769 ?ReadBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@PAEI@Z endp
.text:00000769
.text:00000769 ; ---------------------------------------------------------------------------
.text:0000076C                 db 8 dup(0CCh)
.text:00000774
.text:00000774 ; =============== S U B R O U T I N E =======================================
.text:00000774
.text:00000774 ; Attributes: bp-based frame
.text:00000774
.text:00000774 ; int __stdcall NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCoder *, int)
.text:00000774 ?SkipBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@I@Z proc near
.text:00000774                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+E5p
.text:00000774
.text:00000774 var_4           = dword ptr -4
.text:00000774 arg_0           = dword ptr  8
.text:00000774 arg_4           = dword ptr  0Ch
.text:00000774
.text:00000774                 push    ebp
.text:00000775                 mov     ebp, esp
.text:00000777                 push    ecx
.text:00000778                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000077F                 mov     [ebp+var_4], 0
.text:00000786                 jmp     short loc_791
.text:00000788 ; ---------------------------------------------------------------------------
.text:00000788
.text:00000788 loc_788:                                ; CODE XREF: NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uint)+2Dj
.text:00000788                 mov     eax, [ebp+var_4]
.text:0000078B                 add     eax, 1
.text:0000078E                 mov     [ebp+var_4], eax
.text:00000791
.text:00000791 loc_791:                                ; CODE XREF: NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uint)+12j
.text:00000791                 mov     ecx, [ebp+var_4]
.text:00000794                 cmp     ecx, [ebp+arg_4]
.text:00000797                 jnb     short loc_7A3
.text:00000799                 mov     ecx, [ebp+arg_0] ; this
.text:0000079C                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:000007A1                 jmp     short loc_788
.text:000007A3 ; ---------------------------------------------------------------------------
.text:000007A3
.text:000007A3 loc_7A3:                                ; CODE XREF: NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uint)+23j
.text:000007A3                 mov     ecx, [ebp+arg_0] ; this
.text:000007A6                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:000007AB                 movzx   eax, al
.text:000007AE                 neg     eax
.text:000007B0                 sbb     eax, eax
.text:000007B2                 neg     eax
.text:000007B4                 add     esp, 4
.text:000007B7                 cmp     ebp, esp
.text:000007B9                 call    __RTC_CheckEsp
.text:000007BE                 mov     esp, ebp
.text:000007C0                 pop     ebp
.text:000007C1                 retn    8
.text:000007C1 ?SkipBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@I@Z endp
.text:000007C1
.text:000007C4
.text:000007C4 ; =============== S U B R O U T I N E =======================================
.text:000007C4
.text:000007C4 ; Attributes: bp-based frame
.text:000007C4
.text:000007C4 ; int __stdcall NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCoder *, int)
.text:000007C4 ?ReadUInt16@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAI@Z proc near
.text:000007C4                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+C7p
.text:000007C4                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+179p
.text:000007C4
.text:000007C4 var_8           = dword ptr -8
.text:000007C4 var_4           = dword ptr -4
.text:000007C4 arg_0           = dword ptr  8
.text:000007C4 arg_4           = dword ptr  0Ch
.text:000007C4
.text:000007C4                 push    ebp
.text:000007C5                 mov     ebp, esp
.text:000007C7                 sub     esp, 8
.text:000007CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007D8                 mov     eax, [ebp+arg_4]
.text:000007DB                 mov     dword ptr [eax], 0
.text:000007E1                 mov     [ebp+var_4], 0
.text:000007E8                 jmp     short loc_7F3
.text:000007EA ; ---------------------------------------------------------------------------
.text:000007EA
.text:000007EA loc_7EA:                                ; CODE XREF: NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)+6Cj
.text:000007EA                 mov     ecx, [ebp+var_4]
.text:000007ED                 add     ecx, 1
.text:000007F0                 mov     [ebp+var_4], ecx
.text:000007F3
.text:000007F3 loc_7F3:                                ; CODE XREF: NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)+24j
.text:000007F3                 cmp     [ebp+var_4], 2
.text:000007F7                 jge     short loc_832
.text:000007F9                 mov     ecx, [ebp+arg_0] ; this
.text:000007FC                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:00000801                 mov     byte ptr [ebp+var_8+3], al
.text:00000804                 mov     ecx, [ebp+arg_0] ; this
.text:00000807                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:0000080C                 movzx   edx, al
.text:0000080F                 test    edx, edx
.text:00000811                 jz      short loc_81A
.text:00000813                 mov     eax, 1
.text:00000818                 jmp     short loc_834
.text:0000081A ; ---------------------------------------------------------------------------
.text:0000081A
.text:0000081A loc_81A:                                ; CODE XREF: NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)+4Dj
.text:0000081A                 movzx   eax, byte ptr [ebp+var_8+3]
.text:0000081E                 mov     ecx, [ebp+var_4]
.text:00000821                 shl     ecx, 3
.text:00000824                 shl     eax, cl
.text:00000826                 mov     ecx, [ebp+arg_4]
.text:00000829                 or      eax, [ecx]
.text:0000082B                 mov     edx, [ebp+arg_4]
.text:0000082E                 mov     [edx], eax
.text:00000830                 jmp     short loc_7EA
.text:00000832 ; ---------------------------------------------------------------------------
.text:00000832
.text:00000832 loc_832:                                ; CODE XREF: NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)+33j
.text:00000832                 xor     eax, eax
.text:00000834
.text:00000834 loc_834:                                ; CODE XREF: NArchive::NGz::ReadUInt16(NCompress::NDeflate::NDecoder::CCOMCoder *,uint &)+54j
.text:00000834                 add     esp, 8
.text:00000837                 cmp     ebp, esp
.text:00000839                 call    __RTC_CheckEsp
.text:0000083E                 mov     esp, ebp
.text:00000840                 pop     ebp
.text:00000841                 retn    8
.text:00000841 ?ReadUInt16@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAI@Z endp
.text:00000841
.text:00000844
.text:00000844 ; =============== S U B R O U T I N E =======================================
.text:00000844
.text:00000844 ; Attributes: bp-based frame
.text:00000844
.text:00000844 ; int __stdcall NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCoder *, AString *, int)
.text:00000844 ?ReadString@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAVAString@@I@Z proc near
.text:00000844                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+11Cp
.text:00000844                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+14Fp
.text:00000844
.text:00000844 var_8           = dword ptr -8
.text:00000844 var_4           = dword ptr -4
.text:00000844 arg_0           = dword ptr  8
.text:00000844 arg_4           = dword ptr  0Ch
.text:00000844 arg_8           = dword ptr  10h
.text:00000844
.text:00000844                 push    ebp
.text:00000845                 mov     ebp, esp
.text:00000847                 sub     esp, 8
.text:0000084A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000851                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000858                 mov     ecx, [ebp+arg_4] ; this
.text:0000085B                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000860                 mov     [ebp+var_4], 0
.text:00000867                 jmp     short loc_872
.text:00000869 ; ---------------------------------------------------------------------------
.text:00000869
.text:00000869 loc_869:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+70j
.text:00000869                 mov     eax, [ebp+var_4]
.text:0000086C                 add     eax, 1
.text:0000086F                 mov     [ebp+var_4], eax
.text:00000872
.text:00000872 loc_872:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+23j
.text:00000872                 mov     ecx, [ebp+var_4]
.text:00000875                 cmp     ecx, [ebp+arg_8]
.text:00000878                 jnb     short loc_8B6
.text:0000087A                 mov     ecx, [ebp+arg_0] ; this
.text:0000087D                 call    ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ ; NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(void)
.text:00000882                 mov     byte ptr [ebp+var_8+3], al
.text:00000885                 mov     ecx, [ebp+arg_0] ; this
.text:00000888                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:0000088D                 movzx   edx, al
.text:00000890                 test    edx, edx
.text:00000892                 jz      short loc_89B
.text:00000894                 mov     eax, 1
.text:00000899                 jmp     short loc_8BB
.text:0000089B ; ---------------------------------------------------------------------------
.text:0000089B
.text:0000089B loc_89B:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+4Ej
.text:0000089B                 movzx   eax, byte ptr [ebp+var_8+3]
.text:0000089F                 test    eax, eax
.text:000008A1                 jnz     short loc_8A7
.text:000008A3                 xor     eax, eax
.text:000008A5                 jmp     short loc_8BB
.text:000008A7 ; ---------------------------------------------------------------------------
.text:000008A7
.text:000008A7 loc_8A7:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+5Dj
.text:000008A7                 movzx   ecx, byte ptr [ebp+var_8+3]
.text:000008AB                 push    ecx
.text:000008AC                 mov     ecx, [ebp+arg_4]
.text:000008AF                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000008B4                 jmp     short loc_869
.text:000008B6 ; ---------------------------------------------------------------------------
.text:000008B6
.text:000008B6 loc_8B6:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+34j
.text:000008B6                 mov     eax, 1
.text:000008BB
.text:000008BB loc_8BB:                                ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+55j
.text:000008BB                                         ; NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+61j
.text:000008BB                 add     esp, 8
.text:000008BE                 cmp     ebp, esp
.text:000008C0                 call    __RTC_CheckEsp
.text:000008C5                 mov     esp, ebp
.text:000008C7                 pop     ebp
.text:000008C8                 retn    0Ch
.text:000008C8 ?ReadString@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@AAVAString@@I@Z endp
.text:000008C8
.text:000008C8 ; ---------------------------------------------------------------------------
.text:000008CB                 db 9 dup(0CCh)
.text:000008D4
.text:000008D4 ; =============== S U B R O U T I N E =======================================
.text:000008D4
.text:000008D4 ; Attributes: bp-based frame
.text:000008D4
.text:000008D4 ; __int32 __thiscall NArchive::NGz::CItem::ReadFooter1(NArchive::NGz::CItem *this, struct NCompress::NDeflate::NDecoder::CCOMCoder *)
.text:000008D4                 public ?ReadFooter1@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z
.text:000008D4 ?ReadFooter1@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z proc near
.text:000008D4                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7ABp
.text:000008D4
.text:000008D4 var_1C          = dword ptr -1Ch
.text:000008D4 var_18          = dword ptr -18h
.text:000008D4 var_14          = dword ptr -14h
.text:000008D4 var_10          = dword ptr -10h
.text:000008D4 var_C           = dword ptr -0Ch
.text:000008D4 var_8           = dword ptr -8
.text:000008D4 var_4           = dword ptr -4
.text:000008D4 arg_0           = dword ptr  8
.text:000008D4
.text:000008D4                 push    ebp
.text:000008D5                 mov     ebp, esp
.text:000008D7                 sub     esp, 1Ch
.text:000008DA                 mov     eax, 0CCCCCCCCh
.text:000008DF                 mov     [ebp+var_1C], eax
.text:000008E2                 mov     [ebp+var_18], eax
.text:000008E5                 mov     [ebp+var_14], eax
.text:000008E8                 mov     [ebp+var_10], eax
.text:000008EB                 mov     [ebp+var_C], eax
.text:000008EE                 mov     [ebp+var_8], eax
.text:000008F1                 mov     [ebp+var_4], eax
.text:000008F4                 mov     eax, dword ptr ds:___security_cookie
.text:000008F9                 xor     eax, ebp
.text:000008FB                 mov     [ebp+var_4], eax
.text:000008FE                 mov     [ebp+var_8], ecx
.text:00000901                 push    8               ; int
.text:00000903                 lea     eax, [ebp+var_14]
.text:00000906                 push    eax             ; int
.text:00000907                 mov     ecx, [ebp+arg_0]
.text:0000090A                 push    ecx             ; NCompress::NDeflate::NDecoder::CCoder *
.text:0000090B                 call    ?ReadBytes@NGz@NArchive@@YGJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@PAEI@Z ; NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)
.text:00000910                 mov     [ebp+var_1C], eax
.text:00000913                 cmp     [ebp+var_1C], 0
.text:00000917                 jz      short loc_91E
.text:00000919                 mov     eax, [ebp+var_1C]
.text:0000091C                 jmp     short loc_941
.text:0000091E ; ---------------------------------------------------------------------------
.text:0000091E
.text:0000091E loc_91E:                                ; CODE XREF: NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+43j
.text:0000091E                 mov     edx, [ebp+var_8]
.text:00000921                 mov     eax, [ebp+var_14]
.text:00000924                 mov     [edx+8], eax
.text:00000927                 mov     ecx, [ebp+var_8]
.text:0000092A                 mov     edx, [ebp+var_10]
.text:0000092D                 mov     [ecx+0Ch], edx
.text:00000930                 mov     ecx, [ebp+arg_0] ; this
.text:00000933                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00000938                 movzx   eax, al
.text:0000093B                 neg     eax
.text:0000093D                 sbb     eax, eax
.text:0000093F                 neg     eax
.text:00000941
.text:00000941 loc_941:                                ; CODE XREF: NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+48j
.text:00000941                 push    edx
.text:00000942                 mov     ecx, ebp
.text:00000944                 push    eax
.text:00000945                 lea     edx, $LN6
.text:0000094B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000950                 pop     eax
.text:00000951                 pop     edx
.text:00000952                 mov     ecx, [ebp+var_4]
.text:00000955                 xor     ecx, ebp
.text:00000957                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000095C                 add     esp, 1Ch
.text:0000095F                 cmp     ebp, esp
.text:00000961                 call    __RTC_CheckEsp
.text:00000966                 mov     esp, ebp
.text:00000968                 pop     ebp
.text:00000969                 retn    4
.text:00000969 ?ReadFooter1@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z endp
.text:00000969
.text:00000969 ; ---------------------------------------------------------------------------
.text:0000096C $LN6            dd 1                    ; DATA XREF: NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+71o
.text:00000970                 dd offset $LN5
.text:00000974 $LN5            dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000970o
.text:0000097C                 dd offset $LN4
.text:00000980 $LN4            dd 667562h              ; DATA XREF: .text:0000097Co
.text:00000984
.text:00000984 ; =============== S U B R O U T I N E =======================================
.text:00000984
.text:00000984 ; Attributes: bp-based frame
.text:00000984
.text:00000984 ; __int32 __thiscall NArchive::NGz::CItem::ReadFooter2(NArchive::NGz::CItem *this, struct ISequentialInStream *)
.text:00000984                 public ?ReadFooter2@CItem@NGz@NArchive@@QAEJPAUISequentialInStream@@@Z
.text:00000984 ?ReadFooter2@CItem@NGz@NArchive@@QAEJPAUISequentialInStream@@@Z proc near
.text:00000984                                         ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+D3p
.text:00000984
.text:00000984 var_1C          = dword ptr -1Ch
.text:00000984 var_18          = dword ptr -18h
.text:00000984 var_14          = dword ptr -14h
.text:00000984 var_10          = dword ptr -10h
.text:00000984 var_C           = dword ptr -0Ch
.text:00000984 var_8           = dword ptr -8
.text:00000984 var_4           = dword ptr -4
.text:00000984 arg_0           = dword ptr  8
.text:00000984
.text:00000984                 push    ebp
.text:00000985                 mov     ebp, esp
.text:00000987                 sub     esp, 1Ch
.text:0000098A                 mov     eax, 0CCCCCCCCh
.text:0000098F                 mov     [ebp+var_1C], eax
.text:00000992                 mov     [ebp+var_18], eax
.text:00000995                 mov     [ebp+var_14], eax
.text:00000998                 mov     [ebp+var_10], eax
.text:0000099B                 mov     [ebp+var_C], eax
.text:0000099E                 mov     [ebp+var_8], eax
.text:000009A1                 mov     [ebp+var_4], eax
.text:000009A4                 mov     eax, dword ptr ds:___security_cookie
.text:000009A9                 xor     eax, ebp
.text:000009AB                 mov     [ebp+var_4], eax
.text:000009AE                 mov     [ebp+var_8], ecx
.text:000009B1                 push    8               ; unsigned int
.text:000009B3                 lea     eax, [ebp+var_14]
.text:000009B6                 push    eax             ; void *
.text:000009B7                 mov     ecx, [ebp+arg_0]
.text:000009BA                 push    ecx             ; struct ISequentialInStream *
.text:000009BB                 call    ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE(ISequentialInStream *,void *,uint)
.text:000009C0                 mov     [ebp+var_1C], eax
.text:000009C3                 cmp     [ebp+var_1C], 0
.text:000009C7                 jz      short loc_9CE
.text:000009C9                 mov     eax, [ebp+var_1C]
.text:000009CC                 jmp     short loc_9E2
.text:000009CE ; ---------------------------------------------------------------------------
.text:000009CE
.text:000009CE loc_9CE:                                ; CODE XREF: NArchive::NGz::CItem::ReadFooter2(ISequentialInStream *)+43j
.text:000009CE                 mov     edx, [ebp+var_8]
.text:000009D1                 mov     eax, [ebp+var_14]
.text:000009D4                 mov     [edx+8], eax
.text:000009D7                 mov     ecx, [ebp+var_8]
.text:000009DA                 mov     edx, [ebp+var_10]
.text:000009DD                 mov     [ecx+0Ch], edx
.text:000009E0                 xor     eax, eax
.text:000009E2
.text:000009E2 loc_9E2:                                ; CODE XREF: NArchive::NGz::CItem::ReadFooter2(ISequentialInStream *)+48j
.text:000009E2                 push    edx
.text:000009E3                 mov     ecx, ebp
.text:000009E5                 push    eax
.text:000009E6                 lea     edx, $LN6_0
.text:000009EC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009F1                 pop     eax
.text:000009F2                 pop     edx
.text:000009F3                 mov     ecx, [ebp+var_4]
.text:000009F6                 xor     ecx, ebp
.text:000009F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000009FD                 add     esp, 1Ch
.text:00000A00                 cmp     ebp, esp
.text:00000A02                 call    __RTC_CheckEsp
.text:00000A07                 mov     esp, ebp
.text:00000A09                 pop     ebp
.text:00000A0A                 retn    4
.text:00000A0A ?ReadFooter2@CItem@NGz@NArchive@@QAEJPAUISequentialInStream@@@Z endp
.text:00000A0A
.text:00000A0A ; ---------------------------------------------------------------------------
.text:00000A0D                 align 10h
.text:00000A10 $LN6_0          dd 1                    ; DATA XREF: NArchive::NGz::CItem::ReadFooter2(ISequentialInStream *)+62o
.text:00000A14                 dd offset $LN5_0
.text:00000A18 $LN5_0          dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000A14o
.text:00000A20                 dd offset $LN4_0
.text:00000A24 $LN4_0          dd 667562h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:00000A20o
.text:00000A34
.text:00000A34 ; =============== S U B R O U T I N E =======================================
.text:00000A34
.text:00000A34 ; Attributes: bp-based frame
.text:00000A34
.text:00000A34 ; __int32 __thiscall NArchive::NGz::CItem::WriteHeader(NArchive::NGz::CItem *this, struct ISequentialOutStream *)
.text:00000A34                 public ?WriteHeader@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z
.text:00000A34 ?WriteHeader@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z proc near
.text:00000A34                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7E9p
.text:00000A34                                         ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+201p
.text:00000A34
.text:00000A34 var_24          = dword ptr -24h
.text:00000A34 var_20          = dword ptr -20h
.text:00000A34 var_1C          = dword ptr -1Ch
.text:00000A34 var_18          = dword ptr -18h
.text:00000A34 var_14          = dword ptr -14h
.text:00000A34 var_10          = dword ptr -10h
.text:00000A34 var_C           = dword ptr -0Ch
.text:00000A34 var_8           = dword ptr -8
.text:00000A34 var_4           = dword ptr -4
.text:00000A34 arg_0           = dword ptr  8
.text:00000A34
.text:00000A34                 push    ebp
.text:00000A35                 mov     ebp, esp
.text:00000A37                 sub     esp, 24h
.text:00000A3A                 mov     eax, 0CCCCCCCCh
.text:00000A3F                 mov     [ebp+var_24], eax
.text:00000A42                 mov     [ebp+var_20], eax
.text:00000A45                 mov     [ebp+var_1C], eax
.text:00000A48                 mov     [ebp+var_18], eax
.text:00000A4B                 mov     [ebp+var_14], eax
.text:00000A4E                 mov     [ebp+var_10], eax
.text:00000A51                 mov     [ebp+var_C], eax
.text:00000A54                 mov     [ebp+var_8], eax
.text:00000A57                 mov     [ebp+var_4], eax
.text:00000A5A                 mov     eax, dword ptr ds:___security_cookie
.text:00000A5F                 xor     eax, ebp
.text:00000A61                 mov     [ebp+var_4], eax
.text:00000A64                 mov     [ebp+var_8], ecx
.text:00000A67                 mov     byte ptr [ebp+var_18], 1Fh
.text:00000A6B                 mov     byte ptr [ebp+var_18+1], 8Bh ; 'Ã¯'
.text:00000A6F                 mov     byte ptr [ebp+var_18+2], 8
.text:00000A73                 mov     eax, [ebp+var_8]
.text:00000A76                 movzx   ecx, byte ptr [eax]
.text:00000A79                 and     ecx, 8
.text:00000A7C                 mov     byte ptr [ebp+var_18+3], cl
.text:00000A7F                 mov     edx, [ebp+var_8]
.text:00000A82                 mov     eax, [edx+4]
.text:00000A85                 mov     [ebp+var_14], eax
.text:00000A88                 mov     ecx, [ebp+var_8]
.text:00000A8B                 mov     dl, [ecx+1]
.text:00000A8E                 mov     byte ptr [ebp+var_10], dl
.text:00000A91                 mov     eax, [ebp+var_8]
.text:00000A94                 mov     cl, [eax+2]
.text:00000A97                 mov     byte ptr [ebp+var_10+1], cl
.text:00000A9A                 push    0Ah             ; unsigned int
.text:00000A9C                 lea     edx, [ebp+var_18]
.text:00000A9F                 push    edx             ; void *
.text:00000AA0                 mov     eax, [ebp+arg_0]
.text:00000AA3                 push    eax             ; struct ISequentialOutStream *
.text:00000AA4                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000AA9                 mov     [ebp+var_20], eax
.text:00000AAC                 cmp     [ebp+var_20], 0
.text:00000AB0                 jz      short loc_AB7
.text:00000AB2                 mov     eax, [ebp+var_20]
.text:00000AB5                 jmp     short loc_AFA
.text:00000AB7 ; ---------------------------------------------------------------------------
.text:00000AB7
.text:00000AB7 loc_AB7:                                ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+7Cj
.text:00000AB7                 mov     ecx, [ebp+var_8] ; this
.text:00000ABA                 call    ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::NameIsPresent(void)
.text:00000ABF                 movzx   ecx, al
.text:00000AC2                 test    ecx, ecx
.text:00000AC4                 jz      short loc_AF8
.text:00000AC6                 mov     ecx, [ebp+var_8]
.text:00000AC9                 add     ecx, 10h        ; this
.text:00000ACC                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000AD1                 add     eax, 1
.text:00000AD4                 push    eax             ; unsigned int
.text:00000AD5                 mov     ecx, [ebp+var_8]
.text:00000AD8                 add     ecx, 10h
.text:00000ADB                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000AE0                 push    eax             ; void *
.text:00000AE1                 mov     edx, [ebp+arg_0]
.text:00000AE4                 push    edx             ; struct ISequentialOutStream *
.text:00000AE5                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000AEA                 mov     [ebp+var_24], eax
.text:00000AED                 cmp     [ebp+var_24], 0
.text:00000AF1                 jz      short loc_AF8
.text:00000AF3                 mov     eax, [ebp+var_24]
.text:00000AF6                 jmp     short loc_AFA
.text:00000AF8 ; ---------------------------------------------------------------------------
.text:00000AF8
.text:00000AF8 loc_AF8:                                ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+90j
.text:00000AF8                                         ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+BDj
.text:00000AF8                 xor     eax, eax
.text:00000AFA
.text:00000AFA loc_AFA:                                ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+81j
.text:00000AFA                                         ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+C2j
.text:00000AFA                 push    edx
.text:00000AFB                 mov     ecx, ebp
.text:00000AFD                 push    eax
.text:00000AFE                 lea     edx, $LN8
.text:00000B04                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B09                 pop     eax
.text:00000B0A                 pop     edx
.text:00000B0B                 mov     ecx, [ebp+var_4]
.text:00000B0E                 xor     ecx, ebp
.text:00000B10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000B15                 add     esp, 24h
.text:00000B18                 cmp     ebp, esp
.text:00000B1A                 call    __RTC_CheckEsp
.text:00000B1F                 mov     esp, ebp
.text:00000B21                 pop     ebp
.text:00000B22                 retn    4
.text:00000B22 ?WriteHeader@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z endp
.text:00000B22
.text:00000B22 ; ---------------------------------------------------------------------------
.text:00000B25                 align 4
.text:00000B28 $LN8            dd 1                    ; DATA XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+CAo
.text:00000B2C                 dd offset $LN7
.text:00000B30 $LN7            dd 0FFFFFFE8h, 0Ah      ; DATA XREF: .text:00000B2Co
.text:00000B38                 dd offset $LN6_1
.text:00000B3C $LN6_1          dd 667562h, 0CCCCCCCCh  ; DATA XREF: .text:00000B38o
.text:00000B44
.text:00000B44 ; =============== S U B R O U T I N E =======================================
.text:00000B44
.text:00000B44 ; Attributes: bp-based frame
.text:00000B44
.text:00000B44 ; __int32 __thiscall NArchive::NGz::CItem::WriteFooter(NArchive::NGz::CItem *this, struct ISequentialOutStream *)
.text:00000B44                 public ?WriteFooter@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z
.text:00000B44 ?WriteFooter@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z proc near
.text:00000B44                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+3E7p
.text:00000B44
.text:00000B44 var_18          = dword ptr -18h
.text:00000B44 var_14          = dword ptr -14h
.text:00000B44 var_10          = dword ptr -10h
.text:00000B44 var_C           = dword ptr -0Ch
.text:00000B44 var_8           = dword ptr -8
.text:00000B44 var_4           = dword ptr -4
.text:00000B44 arg_0           = dword ptr  8
.text:00000B44
.text:00000B44                 push    ebp
.text:00000B45                 mov     ebp, esp
.text:00000B47                 sub     esp, 18h
.text:00000B4A                 mov     eax, 0CCCCCCCCh
.text:00000B4F                 mov     [ebp+var_18], eax
.text:00000B52                 mov     [ebp+var_14], eax
.text:00000B55                 mov     [ebp+var_10], eax
.text:00000B58                 mov     [ebp+var_C], eax
.text:00000B5B                 mov     [ebp+var_8], eax
.text:00000B5E                 mov     [ebp+var_4], eax
.text:00000B61                 mov     eax, dword ptr ds:___security_cookie
.text:00000B66                 xor     eax, ebp
.text:00000B68                 mov     [ebp+var_4], eax
.text:00000B6B                 mov     [ebp+var_8], ecx
.text:00000B6E                 mov     eax, [ebp+var_8]
.text:00000B71                 mov     ecx, [eax+8]
.text:00000B74                 mov     [ebp+var_14], ecx
.text:00000B77                 mov     edx, [ebp+var_8]
.text:00000B7A                 mov     eax, [edx+0Ch]
.text:00000B7D                 mov     [ebp+var_10], eax
.text:00000B80                 push    8               ; unsigned int
.text:00000B82                 lea     ecx, [ebp+var_14]
.text:00000B85                 push    ecx             ; void *
.text:00000B86                 mov     edx, [ebp+arg_0]
.text:00000B89                 push    edx             ; struct ISequentialOutStream *
.text:00000B8A                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00000B8F                 push    edx
.text:00000B90                 mov     ecx, ebp
.text:00000B92                 push    eax
.text:00000B93                 lea     edx, $LN5_1
.text:00000B99                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000B9E                 pop     eax
.text:00000B9F                 pop     edx
.text:00000BA0                 mov     ecx, [ebp+var_4]
.text:00000BA3                 xor     ecx, ebp
.text:00000BA5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000BAA                 add     esp, 18h
.text:00000BAD                 cmp     ebp, esp
.text:00000BAF                 call    __RTC_CheckEsp
.text:00000BB4                 mov     esp, ebp
.text:00000BB6                 pop     ebp
.text:00000BB7                 retn    4
.text:00000BB7 ?WriteFooter@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z endp
.text:00000BB7
.text:00000BB7 ; ---------------------------------------------------------------------------
.text:00000BBA                 align 4
.text:00000BBC $LN5_1          dd 1                    ; DATA XREF: NArchive::NGz::CItem::WriteFooter(ISequentialOutStream *)+4Fo
.text:00000BC0                 dd offset $LN4_1
.text:00000BC4 $LN4_1          dd 0FFFFFFECh, 8        ; DATA XREF: .text:00000BC0o
.text:00000BCC                 dd offset $LN3
.text:00000BD0 $LN3            dd 667562h              ; DATA XREF: .text:00000BCCo
.text:00000BD4
.text:00000BD4 ; =============== S U B R O U T I N E =======================================
.text:00000BD4
.text:00000BD4 ; Attributes: bp-based frame
.text:00000BD4
.text:00000BD4 ; __int32 __stdcall NArchive::NGz::CHandler::GetNumberOfProperties(NArchive::NGz::CHandler *this, unsigned int *)
.text:00000BD4                 public ?GetNumberOfProperties@CHandler@NGz@NArchive@@UAGJPAI@Z
.text:00000BD4 ?GetNumberOfProperties@CHandler@NGz@NArchive@@UAGJPAI@Z proc near
.text:00000BD4                                         ; DATA XREF: .rdata:00004FF8o
.text:00000BD4
.text:00000BD4 this            = dword ptr  8
.text:00000BD4 arg_4           = dword ptr  0Ch
.text:00000BD4
.text:00000BD4                 push    ebp
.text:00000BD5                 mov     ebp, esp
.text:00000BD7                 mov     eax, [ebp+arg_4]
.text:00000BDA                 mov     dword ptr [eax], 6
.text:00000BE0                 xor     eax, eax
.text:00000BE2                 pop     ebp
.text:00000BE3                 retn    8
.text:00000BE3 ?GetNumberOfProperties@CHandler@NGz@NArchive@@UAGJPAI@Z endp
.text:00000BE3
.text:00000BE3 ; ---------------------------------------------------------------------------
.text:00000BE6                 db 0Eh dup(0CCh)
.text:00000BF4
.text:00000BF4 ; =============== S U B R O U T I N E =======================================
.text:00000BF4
.text:00000BF4 ; Attributes: bp-based frame
.text:00000BF4
.text:00000BF4 ; __int32 __stdcall NArchive::NGz::CHandler::GetPropertyInfo(NArchive::NGz::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000BF4                 public ?GetPropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000BF4 ?GetPropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000BF4                                         ; DATA XREF: .rdata:00004FFCo
.text:00000BF4
.text:00000BF4 this            = dword ptr  8
.text:00000BF4 arg_4           = dword ptr  0Ch
.text:00000BF4 arg_8           = dword ptr  10h
.text:00000BF4 arg_C           = dword ptr  14h
.text:00000BF4 arg_10          = dword ptr  18h
.text:00000BF4
.text:00000BF4                 push    ebp
.text:00000BF5                 mov     ebp, esp
.text:00000BF7                 cmp     [ebp+arg_4], 6
.text:00000BFB                 jb      short loc_C04
.text:00000BFD                 mov     eax, 80070057h
.text:00000C02                 jmp     short loc_C31
.text:00000C04 ; ---------------------------------------------------------------------------
.text:00000C04
.text:00000C04 loc_C04:                                ; CODE XREF: NArchive::NGz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000C04                 mov     eax, [ebp+arg_4]
.text:00000C07                 movzx   ecx, _kProps[eax]
.text:00000C0E                 mov     edx, [ebp+arg_C]
.text:00000C11                 mov     [edx], ecx
.text:00000C13                 mov     eax, [ebp+arg_C]
.text:00000C16                 mov     ecx, [eax]
.text:00000C18                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000C20                 mov     eax, [ebp+arg_10]
.text:00000C23                 mov     [eax], dx
.text:00000C26                 mov     ecx, [ebp+arg_8]
.text:00000C29                 mov     dword ptr [ecx], 0
.text:00000C2F                 xor     eax, eax
.text:00000C31
.text:00000C31 loc_C31:                                ; CODE XREF: NArchive::NGz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000C31                 pop     ebp
.text:00000C32                 retn    14h
.text:00000C32 ?GetPropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000C32
.text:00000C32 ; ---------------------------------------------------------------------------
.text:00000C35                 db 0Fh dup(0CCh)
.text:00000C44
.text:00000C44 ; =============== S U B R O U T I N E =======================================
.text:00000C44
.text:00000C44 ; Attributes: bp-based frame
.text:00000C44
.text:00000C44 ; __int32 __stdcall NArchive::NGz::CHandler::GetNumberOfArchiveProperties(NArchive::NGz::CHandler *this, unsigned int *)
.text:00000C44                 public ?GetNumberOfArchiveProperties@CHandler@NGz@NArchive@@UAGJPAI@Z
.text:00000C44 ?GetNumberOfArchiveProperties@CHandler@NGz@NArchive@@UAGJPAI@Z proc near
.text:00000C44                                         ; DATA XREF: .rdata:00005000o
.text:00000C44
.text:00000C44 this            = dword ptr  8
.text:00000C44 arg_4           = dword ptr  0Ch
.text:00000C44
.text:00000C44                 push    ebp
.text:00000C45                 mov     ebp, esp
.text:00000C47                 mov     eax, [ebp+arg_4]
.text:00000C4A                 mov     dword ptr [eax], 2
.text:00000C50                 xor     eax, eax
.text:00000C52                 pop     ebp
.text:00000C53                 retn    8
.text:00000C53 ?GetNumberOfArchiveProperties@CHandler@NGz@NArchive@@UAGJPAI@Z endp
.text:00000C53
.text:00000C53 ; ---------------------------------------------------------------------------
.text:00000C56                 db 0Eh dup(0CCh)
.text:00000C64
.text:00000C64 ; =============== S U B R O U T I N E =======================================
.text:00000C64
.text:00000C64 ; Attributes: bp-based frame
.text:00000C64
.text:00000C64 ; __int32 __stdcall NArchive::NGz::CHandler::GetArchivePropertyInfo(NArchive::NGz::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000C64                 public ?GetArchivePropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000C64 ?GetArchivePropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000C64                                         ; DATA XREF: .rdata:00005004o
.text:00000C64
.text:00000C64 this            = dword ptr  8
.text:00000C64 arg_4           = dword ptr  0Ch
.text:00000C64 arg_8           = dword ptr  10h
.text:00000C64 arg_C           = dword ptr  14h
.text:00000C64 arg_10          = dword ptr  18h
.text:00000C64
.text:00000C64                 push    ebp
.text:00000C65                 mov     ebp, esp
.text:00000C67                 cmp     [ebp+arg_4], 2
.text:00000C6B                 jb      short loc_C74
.text:00000C6D                 mov     eax, 80070057h
.text:00000C72                 jmp     short loc_CA1
.text:00000C74 ; ---------------------------------------------------------------------------
.text:00000C74
.text:00000C74 loc_C74:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000C74                 mov     eax, [ebp+arg_4]
.text:00000C77                 movzx   ecx, _kArcProps[eax]
.text:00000C7E                 mov     edx, [ebp+arg_C]
.text:00000C81                 mov     [edx], ecx
.text:00000C83                 mov     eax, [ebp+arg_C]
.text:00000C86                 mov     ecx, [eax]
.text:00000C88                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000C90                 mov     eax, [ebp+arg_10]
.text:00000C93                 mov     [eax], dx
.text:00000C96                 mov     ecx, [ebp+arg_8]
.text:00000C99                 mov     dword ptr [ecx], 0
.text:00000C9F                 xor     eax, eax
.text:00000CA1
.text:00000CA1 loc_CA1:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000CA1                 pop     ebp
.text:00000CA2                 retn    14h
.text:00000CA2 ?GetArchivePropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000CA2
.text:00000CA2 ; ---------------------------------------------------------------------------
.text:00000CA5                 db 0Fh dup(0CCh)
.text:00000CB4
.text:00000CB4 ; =============== S U B R O U T I N E =======================================
.text:00000CB4
.text:00000CB4 ; Attributes: bp-based frame
.text:00000CB4
.text:00000CB4 ; __int32 __cdecl NArchive::NGz::CHandler::GetArchiveProperty(NArchive::NGz::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000CB4                 public ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000CB4 ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000CB4                                         ; DATA XREF: .rdata:00004FF4o
.text:00000CB4
.text:00000CB4 var_5C          = dword ptr -5Ch
.text:00000CB4 var_55          = byte ptr -55h
.text:00000CB4 var_54          = dword ptr -54h
.text:00000CB4 var_50          = dword ptr -50h
.text:00000CB4 var_4C          = dword ptr -4Ch
.text:00000CB4 var_44          = dword ptr -44h
.text:00000CB4 var_3C          = byte ptr -3Ch
.text:00000CB4 var_2C          = dword ptr -2Ch
.text:00000CB4 var_24          = byte ptr -24h
.text:00000CB4 var_10          = dword ptr -10h
.text:00000CB4 var_C           = dword ptr -0Ch
.text:00000CB4 var_4           = dword ptr -4
.text:00000CB4 this            = dword ptr  8
.text:00000CB4 arg_4           = dword ptr  0Ch
.text:00000CB4 arg_8           = dword ptr  10h
.text:00000CB4
.text:00000CB4 ; FUNCTION CHUNK AT .text:00000EB3 SIZE 0000002F BYTES
.text:00000CB4
.text:00000CB4                 push    ebp
.text:00000CB5                 mov     ebp, esp
.text:00000CB7                 push    0FFFFFFFFh
.text:00000CB9                 push    offset __ehhandler$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000CBE                 mov     eax, large fs:0
.text:00000CC4                 push    eax
.text:00000CC5                 push    ecx
.text:00000CC6                 sub     esp, 4Ch
.text:00000CC9                 push    ebx
.text:00000CCA                 push    esi
.text:00000CCB                 push    edi
.text:00000CCC                 lea     edi, [ebp+var_5C]
.text:00000CCF                 mov     ecx, 13h
.text:00000CD4                 mov     eax, 0CCCCCCCCh
.text:00000CD9                 rep stosd
.text:00000CDB                 mov     eax, dword ptr ds:___security_cookie
.text:00000CE0                 xor     eax, ebp
.text:00000CE2                 push    eax
.text:00000CE3                 lea     eax, [ebp+var_C]
.text:00000CE6                 mov     large fs:0, eax
.text:00000CEC                 mov     [ebp+var_10], esp
.text:00000CEF                 mov     [ebp+var_4], 0
.text:00000CF6                 lea     ecx, [ebp+var_24] ; this
.text:00000CF9                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000CFE                 mov     [ebp+var_4C], eax
.text:00000D01                 mov     byte ptr [ebp+var_4], 1
.text:00000D05                 mov     eax, [ebp+arg_4]
.text:00000D08                 mov     [ebp+var_50], eax
.text:00000D0B                 mov     ecx, [ebp+var_50]
.text:00000D0E                 sub     ecx, 4
.text:00000D11                 mov     [ebp+var_50], ecx
.text:00000D14                 cmp     [ebp+var_50], 4Ah ; 'J' ; switch 75 cases
.text:00000D18                 ja      $LN15           ; jumptable 00000D28 default case
.text:00000D1E                 mov     edx, [ebp+var_50]
.text:00000D21                 movzx   eax, ds:$LN27[edx]
.text:00000D28                 jmp     ds:$LN33[eax*4] ; switch jump
.text:00000D2F ; ---------------------------------------------------------------------------
.text:00000D2F
.text:00000D2F $LN14:                                  ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000D2F                                         ; DATA XREF: .text:$LN33o
.text:00000D2F                 mov     ecx, [ebp+this] ; jumptable 00000D28 case 40
.text:00000D32                 movzx   edx, byte ptr [ecx+40h]
.text:00000D36                 test    edx, edx
.text:00000D38                 jz      short loc_D4D
.text:00000D3A                 mov     eax, [ebp+this]
.text:00000D3D                 mov     ecx, [eax+4Ch]
.text:00000D40                 push    ecx
.text:00000D41                 mov     edx, [eax+48h]
.text:00000D44                 push    edx
.text:00000D45                 lea     ecx, [ebp+var_24]
.text:00000D48                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000D4D
.text:00000D4D loc_D4D:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+84j
.text:00000D4D                 jmp     $LN15           ; jumptable 00000D28 default case
.text:00000D52 ; ---------------------------------------------------------------------------
.text:00000D52
.text:00000D52 $LN12:                                  ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000D52                                         ; DATA XREF: .text:$LN33o
.text:00000D52                 mov     eax, [ebp+this] ; jumptable 00000D28 case 74
.text:00000D55                 movzx   ecx, byte ptr [eax+41h]
.text:00000D59                 test    ecx, ecx
.text:00000D5B                 jz      short loc_D70
.text:00000D5D                 mov     edx, [ebp+this]
.text:00000D60                 mov     eax, [edx+54h]
.text:00000D63                 push    eax
.text:00000D64                 mov     ecx, [edx+50h]
.text:00000D67                 push    ecx
.text:00000D68                 lea     ecx, [ebp+var_24]
.text:00000D6B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000D70
.text:00000D70 loc_D70:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+A7j
.text:00000D70                 jmp     $LN15           ; jumptable 00000D28 default case
.text:00000D75 ; ---------------------------------------------------------------------------
.text:00000D75
.text:00000D75 $LN10:                                  ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000D75                                         ; DATA XREF: .text:$LN33o
.text:00000D75                 mov     edx, [ebp+this] ; jumptable 00000D28 case 70
.text:00000D78                 movzx   eax, byte ptr [edx+42h]
.text:00000D7C                 test    eax, eax
.text:00000D7E                 jz      short loc_D93
.text:00000D80                 mov     ecx, [ebp+this]
.text:00000D83                 mov     edx, [ecx+5Ch]
.text:00000D86                 push    edx
.text:00000D87                 mov     eax, [ecx+58h]
.text:00000D8A                 push    eax
.text:00000D8B                 lea     ecx, [ebp+var_24]
.text:00000D8E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000D93
.text:00000D93 loc_D93:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+CAj
.text:00000D93                 jmp     $LN15           ; jumptable 00000D28 default case
.text:00000D98 ; ---------------------------------------------------------------------------
.text:00000D98
.text:00000D98 $LN8_0:                                 ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000D98                                         ; DATA XREF: .text:$LN33o
.text:00000D98                 mov     ecx, [ebp+this] ; jumptable 00000D28 case 41
.text:00000D9B                 mov     [ebp+var_54], ecx
.text:00000D9E                 mov     edx, [ebp+var_54]
.text:00000DA1                 mov     eax, [ebp+var_54]
.text:00000DA4                 mov     ecx, [edx+60h]
.text:00000DA7                 or      ecx, [eax+64h]
.text:00000DAA                 jz      short loc_DBF
.text:00000DAC                 mov     edx, [ebp+this]
.text:00000DAF                 mov     eax, [edx+64h]
.text:00000DB2                 push    eax
.text:00000DB3                 mov     ecx, [edx+60h]
.text:00000DB6                 push    ecx
.text:00000DB7                 lea     ecx, [ebp+var_24]
.text:00000DBA                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000DBF
.text:00000DBF loc_DBF:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+F6j
.text:00000DBF                 jmp     $LN15           ; jumptable 00000D28 default case
.text:00000DC4 ; ---------------------------------------------------------------------------
.text:00000DC4
.text:00000DC4 $LN6_2:                                 ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000DC4                                         ; DATA XREF: .text:$LN33o
.text:00000DC4                 mov     [ebp+var_2C], 0 ; jumptable 00000D28 case 67
.text:00000DCB                 mov     edx, [ebp+this]
.text:00000DCE                 movzx   eax, byte ptr [edx+3Ch]
.text:00000DD2                 test    eax, eax
.text:00000DD4                 jnz     short loc_DDF
.text:00000DD6                 mov     ecx, [ebp+var_2C]
.text:00000DD9                 or      ecx, 1
.text:00000DDC                 mov     [ebp+var_2C], ecx
.text:00000DDF
.text:00000DDF loc_DDF:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+120j
.text:00000DDF                 mov     edx, [ebp+this]
.text:00000DE2                 movzx   eax, byte ptr [edx+3Fh]
.text:00000DE6                 test    eax, eax
.text:00000DE8                 jz      short loc_DF3
.text:00000DEA                 mov     ecx, [ebp+var_2C]
.text:00000DED                 or      ecx, 20h
.text:00000DF0                 mov     [ebp+var_2C], ecx
.text:00000DF3
.text:00000DF3 loc_DF3:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+134j
.text:00000DF3                 mov     edx, [ebp+this]
.text:00000DF6                 movzx   eax, byte ptr [edx+3Eh]
.text:00000DFA                 test    eax, eax
.text:00000DFC                 jz      short loc_E07
.text:00000DFE                 mov     ecx, [ebp+var_2C]
.text:00000E01                 or      ecx, 40h
.text:00000E04                 mov     [ebp+var_2C], ecx
.text:00000E07
.text:00000E07 loc_E07:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+148j
.text:00000E07                 mov     edx, [ebp+var_2C]
.text:00000E0A                 push    edx
.text:00000E0B                 lea     ecx, [ebp+var_24]
.text:00000E0E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000E13                 jmp     short $LN15     ; jumptable 00000D28 default case
.text:00000E15 ; ---------------------------------------------------------------------------
.text:00000E15
.text:00000E15 $LN2:                                   ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000E15                                         ; DATA XREF: .text:$LN33o
.text:00000E15                 mov     ecx, [ebp+this] ; jumptable 00000D28 case 0
.text:00000E18                 add     ecx, 14h        ; this
.text:00000E1B                 call    ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::NameIsPresent(void)
.text:00000E20                 mov     [ebp+var_55], al
.text:00000E23                 movzx   eax, [ebp+var_55]
.text:00000E27                 test    eax, eax
.text:00000E29                 jz      short $LN15     ; jumptable 00000D28 default case
.text:00000E2B                 push    0
.text:00000E2D                 mov     ecx, [ebp+this]
.text:00000E30                 add     ecx, 24h ; '$'
.text:00000E33                 push    ecx
.text:00000E34                 lea     edx, [ebp+var_3C]
.text:00000E37                 push    edx
.text:00000E38                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:00000E3D                 mov     [ebp+var_5C], eax
.text:00000E40                 mov     byte ptr [ebp+var_4], 2
.text:00000E44                 push    offset $SG71319 ; ".gz"
.text:00000E49                 lea     ecx, [ebp+var_3C] ; this
.text:00000E4C                 call    ?AddAscii@UString@@QAEXPBD@Z ; UString::AddAscii(char const *)
.text:00000E51                 lea     eax, [ebp+var_3C]
.text:00000E54                 push    eax
.text:00000E55                 lea     ecx, [ebp+var_24]
.text:00000E58                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000E5D                 mov     byte ptr [ebp+var_4], 1
.text:00000E61                 lea     ecx, [ebp+var_3C] ; this
.text:00000E64                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E69
.text:00000E69 $LN15:                                  ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+64j
.text:00000E69                                         ; NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j ...
.text:00000E69                 mov     ecx, [ebp+arg_8] ; jumptable 00000D28 default case
.text:00000E6C                 push    ecx             ; struct tagPROPVARIANT *
.text:00000E6D                 lea     ecx, [ebp+var_24] ; this
.text:00000E70                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000E75                 mov     [ebp+var_44], 0
.text:00000E7C                 mov     byte ptr [ebp+var_4], 0
.text:00000E80                 lea     ecx, [ebp+var_24] ; this
.text:00000E83                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000E88                 mov     eax, [ebp+var_44]
.text:00000E8B                 jmp     short loc_EB3
.text:00000E8B ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000E8B
.text:00000E8D
.text:00000E8D ; =============== S U B R O U T I N E =======================================
.text:00000E8D
.text:00000E8D
.text:00000E8D __catch$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000E8D                                         ; DATA XREF: .xdata$x:00003820o
.text:00000E8D                 mov     dword ptr [ebp-48h], 8007000Eh
.text:00000E94                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000E9B                 mov     eax, offset $LN25
.text:00000EA0                 retn
.text:00000EA0 __catch$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000EA0
.text:00000EA1 ; ---------------------------------------------------------------------------
.text:00000EA1                 mov     eax, offset __tryend$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1
.text:00000EA6                 retn
.text:00000EA7 ; ---------------------------------------------------------------------------
.text:00000EA7
.text:00000EA7 __tryend$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1:
.text:00000EA7                                         ; DATA XREF: .text:00000EA1o
.text:00000EA7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000EAE                 jmp     short loc_EB3
.text:00000EB0 ; ---------------------------------------------------------------------------
.text:00000EB0
.text:00000EB0 $LN25:                                  ; DATA XREF: __catch$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0+Eo
.text:00000EB0                 mov     eax, [ebp-48h]
.text:00000EB3 ; START OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000EB3
.text:00000EB3 loc_EB3:                                ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1D7j
.text:00000EB3                                         ; .text:00000EAEj
.text:00000EB3                 push    edx
.text:00000EB4                 mov     ecx, ebp
.text:00000EB6                 push    eax
.text:00000EB7                 lea     edx, $LN32
.text:00000EBD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000EC2                 pop     eax
.text:00000EC3                 pop     edx
.text:00000EC4                 mov     ecx, [ebp+var_C]
.text:00000EC7                 mov     large fs:0, ecx
.text:00000ECE                 pop     ecx
.text:00000ECF                 pop     edi
.text:00000ED0                 pop     esi
.text:00000ED1                 pop     ebx
.text:00000ED2                 add     esp, 5Ch
.text:00000ED5                 cmp     ebp, esp
.text:00000ED7                 call    __RTC_CheckEsp
.text:00000EDC                 mov     esp, ebp
.text:00000EDE                 pop     ebp
.text:00000EDF                 retn    0Ch
.text:00000EDF ; END OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000EDF ; ---------------------------------------------------------------------------
.text:00000EE2                 align 4
.text:00000EE4 $LN32           dd 2                    ; DATA XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+203o
.text:00000EE8                 dd offset $LN31
.text:00000EEC $LN31           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00000EE8o
.text:00000EF4                 dd offset $LN28         ; "prop"
.text:00000EF8                 dd 0FFFFFFC4h, 0Ch
.text:00000F00                 dd offset $LN29
.text:00000F04 $LN29           db 73h, 0               ; DATA XREF: .text:00000F00o
.text:00000F06 $LN28           db 'prop',0             ; DATA XREF: .text:00000EF4o
.text:00000F0B                 align 4
.text:00000F0C $LN33           dd offset $LN2, offset $LN14, offset $LN8_0, offset $LN6_2
.text:00000F0C                                         ; DATA XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74r
.text:00000F0C                 dd offset $LN10, offset $LN12, offset $LN15 ; jump table for switch statement
.text:00000F28 $LN27           db      0,     6,     6,     6
.text:00000F28                                         ; DATA XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6Dr
.text:00000F28                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      1,     2,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     6
.text:00000F28                 db      6,     6,     6,     3
.text:00000F28                 db      6,     6,     4,     6
.text:00000F28                 db      6,     6,     5
.text:00000F73                 align 4
.text:00000F74
.text:00000F74 ; =============== S U B R O U T I N E =======================================
.text:00000F74
.text:00000F74 ; Attributes: bp-based frame
.text:00000F74
.text:00000F74 ; __int32 __stdcall NArchive::NGz::CHandler::GetNumberOfItems(NArchive::NGz::CHandler *this, unsigned int *)
.text:00000F74                 public ?GetNumberOfItems@CHandler@NGz@NArchive@@UAGJPAI@Z
.text:00000F74 ?GetNumberOfItems@CHandler@NGz@NArchive@@UAGJPAI@Z proc near
.text:00000F74                                         ; DATA XREF: .rdata:00004FE8o
.text:00000F74
.text:00000F74 this            = dword ptr  8
.text:00000F74 arg_4           = dword ptr  0Ch
.text:00000F74
.text:00000F74                 push    ebp
.text:00000F75                 mov     ebp, esp
.text:00000F77                 mov     eax, [ebp+arg_4]
.text:00000F7A                 mov     dword ptr [eax], 1
.text:00000F80                 xor     eax, eax
.text:00000F82                 pop     ebp
.text:00000F83                 retn    8
.text:00000F83 ?GetNumberOfItems@CHandler@NGz@NArchive@@UAGJPAI@Z endp
.text:00000F83
.text:00000F83 ; ---------------------------------------------------------------------------
.text:00000F86                 db 0Eh dup(0CCh)
.text:00000F94
.text:00000F94 ; =============== S U B R O U T I N E =======================================
.text:00000F94
.text:00000F94 ; Attributes: bp-based frame
.text:00000F94
.text:00000F94 ; __int32 __cdecl NArchive::NGz::CHandler::GetProperty(NArchive::NGz::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00000F94                 public ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000F94 ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00000F94                                         ; DATA XREF: .rdata:00004FECo
.text:00000F94
.text:00000F94 var_70          = dword ptr -70h
.text:00000F94 var_6C          = dword ptr -6Ch
.text:00000F94 var_68          = dword ptr -68h
.text:00000F94 var_64          = dword ptr -64h
.text:00000F94 var_60          = dword ptr -60h
.text:00000F94 var_5C          = dword ptr -5Ch
.text:00000F94 var_55          = byte ptr -55h
.text:00000F94 var_54          = dword ptr -54h
.text:00000F94 var_50          = dword ptr -50h
.text:00000F94 var_48          = dword ptr -48h
.text:00000F94 var_44          = byte ptr -44h
.text:00000F94 var_34          = dword ptr -34h
.text:00000F94 var_24          = byte ptr -24h
.text:00000F94 var_10          = dword ptr -10h
.text:00000F94 var_C           = dword ptr -0Ch
.text:00000F94 var_4           = dword ptr -4
.text:00000F94 this            = dword ptr  8
.text:00000F94 arg_8           = dword ptr  10h
.text:00000F94 arg_C           = dword ptr  14h
.text:00000F94
.text:00000F94 ; FUNCTION CHUNK AT .text:000011AD SIZE 0000002F BYTES
.text:00000F94
.text:00000F94                 push    ebp
.text:00000F95                 mov     ebp, esp
.text:00000F97                 push    0FFFFFFFFh
.text:00000F99                 push    offset __ehhandler$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000F9E                 mov     eax, large fs:0
.text:00000FA4                 push    eax
.text:00000FA5                 push    ecx
.text:00000FA6                 sub     esp, 60h
.text:00000FA9                 push    ebx
.text:00000FAA                 push    esi
.text:00000FAB                 push    edi
.text:00000FAC                 lea     edi, [ebp+var_70]
.text:00000FAF                 mov     ecx, 18h
.text:00000FB4                 mov     eax, 0CCCCCCCCh
.text:00000FB9                 rep stosd
.text:00000FBB                 mov     eax, dword ptr ds:___security_cookie
.text:00000FC0                 xor     eax, ebp
.text:00000FC2                 push    eax             ; struct _FILETIME *
.text:00000FC3                 lea     eax, [ebp+var_C]
.text:00000FC6                 mov     large fs:0, eax
.text:00000FCC                 mov     [ebp+var_10], esp
.text:00000FCF                 mov     [ebp+var_4], 0
.text:00000FD6                 lea     ecx, [ebp+var_24] ; this
.text:00000FD9                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000FDE                 mov     [ebp+var_50], eax
.text:00000FE1                 mov     byte ptr [ebp+var_4], 1
.text:00000FE5                 mov     eax, [ebp+arg_8]
.text:00000FE8                 mov     [ebp+var_54], eax
.text:00000FEB                 mov     ecx, [ebp+var_54]
.text:00000FEE                 sub     ecx, 3
.text:00000FF1                 mov     [ebp+var_54], ecx
.text:00000FF4                 cmp     [ebp+var_54], 14h ; switch 21 cases
.text:00000FF8                 ja      $LN15_0         ; jumptable 00001008 default case
.text:00000FFE
.text:00000FFE loc_FFE:                                ; DATA XREF: .data:_kNameMaxLeno
.text:00000FFE                 mov     edx, [ebp+var_54]
.text:00001001                 movzx   eax, ds:$LN29_0[edx]
.text:00001008                 jmp     ds:$LN35[eax*4] ; switch jump
.text:0000100F ; ---------------------------------------------------------------------------
.text:0000100F
.text:0000100F $LN14_0:                                ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:0000100F                                         ; DATA XREF: .text:$LN35o
.text:0000100F                 mov     ecx, [ebp+this] ; jumptable 00001008 case 0
.text:00001012                 add     ecx, 14h        ; this
.text:00001015                 call    ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ ; NArchive::NGz::CItem::NameIsPresent(void)
.text:0000101A                 mov     [ebp+var_55], al
.text:0000101D                 movzx   ecx, [ebp+var_55]
.text:00001021                 test    ecx, ecx
.text:00001023                 jz      short loc_105C
.text:00001025                 push    0
.text:00001027                 mov     edx, [ebp+this]
.text:0000102A                 add     edx, 24h ; '$'
.text:0000102D                 push    edx
.text:0000102E                 lea     eax, [ebp+var_44]
.text:00001031                 push    eax
.text:00001032                 call    ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString(AString const &,uint)
.text:00001037                 mov     [ebp+var_5C], eax
.text:0000103A                 mov     ecx, [ebp+var_5C]
.text:0000103D                 mov     [ebp+var_60], ecx
.text:00001040                 mov     byte ptr [ebp+var_4], 2
.text:00001044                 mov     edx, [ebp+var_60]
.text:00001047                 push    edx
.text:00001048                 lea     ecx, [ebp+var_24]
.text:0000104B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00001050                 mov     byte ptr [ebp+var_4], 1
.text:00001054                 lea     ecx, [ebp+var_44] ; this
.text:00001057                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000105C
.text:0000105C loc_105C:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+8Fj
.text:0000105C                 jmp     $LN15_0         ; jumptable 00001008 default case
.text:00001061 ; ---------------------------------------------------------------------------
.text:00001061
.text:00001061 $LN12_0:                                ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:00001061                                         ; DATA XREF: .text:$LN35o
.text:00001061                 mov     eax, [ebp+this] ; jumptable 00001008 case 9
.text:00001064                 cmp     dword ptr [eax+18h], 0
.text:00001068                 jz      short loc_1086
.text:0000106A                 lea     ecx, [ebp+var_34]
.text:0000106D                 push    ecx             ; unsigned int
.text:0000106E                 mov     edx, [ebp+this]
.text:00001071                 mov     eax, [edx+18h]
.text:00001074                 push    eax             ; this
.text:00001075                 call    ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z ; NWindows::NTime::UnixTimeToFileTime(uint,_FILETIME &)
.text:0000107A                 lea     ecx, [ebp+var_34]
.text:0000107D                 push    ecx
.text:0000107E                 lea     ecx, [ebp+var_24]
.text:00001081                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00001086
.text:00001086 loc_1086:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+D4j
.text:00001086                 jmp     $LN15_0         ; jumptable 00001008 default case
.text:0000108B ; ---------------------------------------------------------------------------
.text:0000108B
.text:0000108B $LN10_0:                                ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:0000108B                                         ; DATA XREF: .text:$LN35o
.text:0000108B                 mov     edx, [ebp+this] ; jumptable 00001008 case 4
.text:0000108E                 movzx   eax, byte ptr [edx+41h]
.text:00001092                 test    eax, eax
.text:00001094                 jz      short loc_10AB
.text:00001096                 mov     ecx, [ebp+this]
.text:00001099                 mov     edx, [ecx+54h]
.text:0000109C                 push    edx
.text:0000109D                 mov     eax, [ecx+50h]
.text:000010A0                 push    eax
.text:000010A1                 lea     ecx, [ebp+var_24]
.text:000010A4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000010A9                 jmp     short loc_10D1
.text:000010AB ; ---------------------------------------------------------------------------
.text:000010AB
.text:000010AB loc_10AB:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+100j
.text:000010AB                 mov     ecx, [ebp+this]
.text:000010AE                 add     ecx, 68h ; 'h'
.text:000010B1                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000010B6                 mov     [ebp+var_64], eax
.text:000010B9                 cmp     [ebp+var_64], 0
.text:000010BD                 jz      short loc_10D1
.text:000010BF                 mov     ecx, [ebp+this]
.text:000010C2                 mov     edx, [ecx+20h]
.text:000010C5                 xor     eax, eax
.text:000010C7                 push    eax
.text:000010C8                 push    edx
.text:000010C9                 lea     ecx, [ebp+var_24]
.text:000010CC                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000010D1
.text:000010D1 loc_10D1:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+115j
.text:000010D1                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+129j
.text:000010D1                 jmp     $LN15_0         ; jumptable 00001008 default case
.text:000010D6 ; ---------------------------------------------------------------------------
.text:000010D6
.text:000010D6 $LN6_3:                                 ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:000010D6                                         ; DATA XREF: .text:$LN35o
.text:000010D6                 mov     ecx, [ebp+this] ; jumptable 00001008 case 5
.text:000010D9                 movzx   edx, byte ptr [ecx+40h]
.text:000010DD                 test    edx, edx
.text:000010DF                 jnz     short loc_10F5
.text:000010E1                 mov     ecx, [ebp+this]
.text:000010E4                 add     ecx, 68h ; 'h'
.text:000010E7                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000010EC                 mov     [ebp+var_68], eax
.text:000010EF                 cmp     [ebp+var_68], 0
.text:000010F3                 jz      short loc_1108
.text:000010F5
.text:000010F5 loc_10F5:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+14Bj
.text:000010F5                 mov     eax, [ebp+this]
.text:000010F8                 mov     ecx, [eax+4Ch]
.text:000010FB                 push    ecx
.text:000010FC                 mov     edx, [eax+48h]
.text:000010FF                 push    edx
.text:00001100                 lea     ecx, [ebp+var_24]
.text:00001103                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00001108
.text:00001108 loc_1108:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+15Fj
.text:00001108                 jmp     short $LN15_0   ; jumptable 00001008 default case
.text:0000110A ; ---------------------------------------------------------------------------
.text:0000110A
.text:0000110A $LN3_0:                                 ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:0000110A                                         ; DATA XREF: .text:$LN35o
.text:0000110A                 mov     eax, [ebp+this] ; jumptable 00001008 case 20
.text:0000110D                 movzx   ecx, byte ptr [eax+16h]
.text:00001111                 cmp     ecx, 14h
.text:00001114                 jnb     short loc_1129
.text:00001116                 mov     edx, [ebp+this]
.text:00001119                 movzx   eax, byte ptr [edx+16h]
.text:0000111D                 mov     ecx, _kHostOSes[eax*4]
.text:00001124                 mov     [ebp+var_6C], ecx
.text:00001127                 jmp     short loc_1132
.text:00001129 ; ---------------------------------------------------------------------------
.text:00001129
.text:00001129 loc_1129:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+180j
.text:00001129                 mov     edx, ds:_kUnknownOS
.text:0000112F                 mov     [ebp+var_6C], edx
.text:00001132
.text:00001132 loc_1132:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+193j
.text:00001132                 mov     eax, [ebp+var_6C]
.text:00001135                 push    eax
.text:00001136                 lea     ecx, [ebp+var_24]
.text:00001139                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:0000113E                 jmp     short $LN15_0   ; jumptable 00001008 default case
.text:00001140 ; ---------------------------------------------------------------------------
.text:00001140
.text:00001140 $LN2_0:                                 ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j
.text:00001140                                         ; DATA XREF: .text:$LN35o
.text:00001140                 mov     ecx, [ebp+this] ; jumptable 00001008 case 16
.text:00001143                 add     ecx, 68h ; 'h'
.text:00001146                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000114B                 mov     [ebp+var_70], eax
.text:0000114E                 cmp     [ebp+var_70], 0
.text:00001152                 jz      short $LN15_0   ; jumptable 00001008 default case
.text:00001154                 mov     ecx, [ebp+this]
.text:00001157                 mov     edx, [ecx+1Ch]
.text:0000115A                 push    edx
.text:0000115B                 lea     ecx, [ebp+var_24]
.text:0000115E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00001163
.text:00001163 $LN15_0:                                ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+64j
.text:00001163                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74j ...
.text:00001163                 mov     eax, [ebp+arg_C] ; jumptable 00001008 default case
.text:00001166                 push    eax             ; struct tagPROPVARIANT *
.text:00001167                 lea     ecx, [ebp+var_24] ; this
.text:0000116A                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:0000116F                 mov     [ebp+var_48], 0
.text:00001176                 mov     byte ptr [ebp+var_4], 0
.text:0000117A                 lea     ecx, [ebp+var_24] ; this
.text:0000117D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001182                 mov     eax, [ebp+var_48]
.text:00001185                 jmp     short loc_11AD
.text:00001185 ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:00001185
.text:00001187
.text:00001187 ; =============== S U B R O U T I N E =======================================
.text:00001187
.text:00001187
.text:00001187 __catch$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00001187                                         ; DATA XREF: .xdata$x:00003888o
.text:00001187                 mov     dword ptr [ebp-4Ch], 8007000Eh
.text:0000118E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001195                 mov     eax, offset $LN27_0
.text:0000119A                 retn
.text:0000119A __catch$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:0000119A
.text:0000119B ; ---------------------------------------------------------------------------
.text:0000119B                 mov     eax, offset __tryend$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:000011A0                 retn
.text:000011A1 ; ---------------------------------------------------------------------------
.text:000011A1
.text:000011A1 __tryend$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:000011A1                                         ; DATA XREF: .text:0000119Bo
.text:000011A1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000011A8                 jmp     short loc_11AD
.text:000011AA ; ---------------------------------------------------------------------------
.text:000011AA
.text:000011AA $LN27_0:                                ; DATA XREF: __catch$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+Eo
.text:000011AA                 mov     eax, [ebp-4Ch]
.text:000011AD ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000011AD
.text:000011AD loc_11AD:                               ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1F1j
.text:000011AD                                         ; .text:000011A8j
.text:000011AD                 push    edx
.text:000011AE                 mov     ecx, ebp
.text:000011B0                 push    eax
.text:000011B1                 lea     edx, $LN34
.text:000011B7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000011BC                 pop     eax
.text:000011BD                 pop     edx
.text:000011BE                 mov     ecx, [ebp+var_C]
.text:000011C1                 mov     large fs:0, ecx
.text:000011C8                 pop     ecx
.text:000011C9                 pop     edi
.text:000011CA                 pop     esi
.text:000011CB                 pop     ebx
.text:000011CC                 add     esp, 70h
.text:000011CF                 cmp     ebp, esp
.text:000011D1                 call    __RTC_CheckEsp
.text:000011D6                 mov     esp, ebp
.text:000011D8                 pop     ebp
.text:000011D9                 retn    10h
.text:000011D9 ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000011D9 ; ---------------------------------------------------------------------------
.text:000011DC $LN34           dd 2                    ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+21Do
.text:000011E0                 dd offset $LN33_0
.text:000011E4 $LN33_0         dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:000011E0o
.text:000011EC                 dd offset $LN30         ; "prop"
.text:000011F0                 db 0CCh
.text:000011F1                 db 3 dup(0FFh)
.text:000011F4                 dd 8
.text:000011F8                 dd offset $LN31_0
.text:000011FC $LN31_0         dd 637475h              ; DATA XREF: .text:000011F8o
.text:00001200 $LN30           db 'prop',0             ; DATA XREF: .text:000011ECo
.text:00001205                 align 4
.text:00001208 $LN35           dd offset $LN14_0       ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+74r
.text:00001208                 dd offset $LN10_0       ; jump table for switch statement
.text:00001208                 dd offset $LN6_3
.text:00001208                 dd offset $LN12_0
.text:00001208                 dd offset $LN2_0
.text:00001208                 dd offset $LN3_0
.text:00001208                 dd offset $LN15_0
.text:00001224 $LN29_0         db      0,     6,     6,     6
.text:00001224                                         ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dr
.text:00001224                 db      1,     2,     6,     6 ; indirect table for switch statement
.text:00001224                 db      6,     3,     6,     6
.text:00001224                 db      6,     6,     6,     6
.text:00001224                 db      4,     6,     6,     6
.text:00001224                 db      5
.text:00001239                 db 0Bh dup(0CCh)
.text:00001244
.text:00001244 ; =============== S U B R O U T I N E =======================================
.text:00001244
.text:00001244 ; Attributes: bp-based frame
.text:00001244
.text:00001244 ; __int32 __stdcall NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(NArchive::NGz::CCompressProgressInfoImp *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00001244                 public ?SetRatioInfo@CCompressProgressInfoImp@NGz@NArchive@@UAGJPB_K0@Z
.text:00001244 ?SetRatioInfo@CCompressProgressInfoImp@NGz@NArchive@@UAGJPB_K0@Z proc near
.text:00001244
.text:00001244 var_24          = dword ptr -24h
.text:00001244 var_20          = dword ptr -20h
.text:00001244 var_1C          = dword ptr -1Ch
.text:00001244 var_18          = dword ptr -18h
.text:00001244 var_14          = dword ptr -14h
.text:00001244 var_10          = dword ptr -10h
.text:00001244 var_C           = dword ptr -0Ch
.text:00001244 var_8           = dword ptr -8
.text:00001244 var_4           = dword ptr -4
.text:00001244 this            = dword ptr  8
.text:00001244 arg_4           = dword ptr  0Ch
.text:00001244
.text:00001244                 push    ebp
.text:00001245                 mov     ebp, esp
.text:00001247                 sub     esp, 24h
.text:0000124A                 push    esi
.text:0000124B                 mov     eax, 0CCCCCCCCh
.text:00001250                 mov     [ebp+var_24], eax
.text:00001253                 mov     [ebp+var_20], eax
.text:00001256                 mov     [ebp+var_1C], eax
.text:00001259                 mov     [ebp+var_18], eax
.text:0000125C                 mov     [ebp+var_14], eax
.text:0000125F                 mov     [ebp+var_10], eax
.text:00001262                 mov     [ebp+var_C], eax
.text:00001265                 mov     [ebp+var_8], eax
.text:00001268                 mov     [ebp+var_4], eax
.text:0000126B                 mov     ecx, [ebp+this]
.text:0000126E                 add     ecx, 8
.text:00001271                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:00001276                 test    eax, eax
.text:00001278                 jz      short loc_12CE
.text:0000127A                 mov     [ebp+var_C], 0
.text:00001281                 mov     [ebp+var_8], 0
.text:00001288                 mov     eax, [ebp+this]
.text:0000128B                 mov     ecx, [ebp+arg_4]
.text:0000128E                 mov     edx, [eax+10h]
.text:00001291                 add     edx, [ecx]
.text:00001293                 mov     eax, [eax+14h]
.text:00001296                 adc     eax, [ecx+4]
.text:00001299                 mov     [ebp+var_1C], edx
.text:0000129C                 mov     [ebp+var_18], eax
.text:0000129F                 mov     ecx, [ebp+this]
.text:000012A2                 add     ecx, 8
.text:000012A5                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:000012AA                 mov     [ebp+var_24], eax
.text:000012AD                 mov     esi, esp
.text:000012AF                 lea     ecx, [ebp+var_1C]
.text:000012B2                 push    ecx
.text:000012B3                 lea     edx, [ebp+var_C]
.text:000012B6                 push    edx
.text:000012B7                 mov     eax, [ebp+var_24]
.text:000012BA                 push    eax
.text:000012BB                 mov     ecx, [ebp+var_24]
.text:000012BE                 mov     edx, [ecx]
.text:000012C0                 mov     eax, [edx+10h]
.text:000012C3                 call    eax
.text:000012C5                 cmp     esi, esp
.text:000012C7                 call    __RTC_CheckEsp
.text:000012CC                 jmp     short loc_12D0
.text:000012CE ; ---------------------------------------------------------------------------
.text:000012CE
.text:000012CE loc_12CE:                               ; CODE XREF: NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+34j
.text:000012CE                 xor     eax, eax
.text:000012D0
.text:000012D0 loc_12D0:                               ; CODE XREF: NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+88j
.text:000012D0                 push    edx
.text:000012D1                 mov     ecx, ebp
.text:000012D3                 push    eax
.text:000012D4                 lea     edx, $LN7_0
.text:000012DA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000012DF                 pop     eax
.text:000012E0                 pop     edx
.text:000012E1                 pop     esi
.text:000012E2                 add     esp, 24h
.text:000012E5                 cmp     ebp, esp
.text:000012E7                 call    __RTC_CheckEsp
.text:000012EC                 mov     esp, ebp
.text:000012EE                 pop     ebp
.text:000012EF                 retn    0Ch
.text:000012EF ?SetRatioInfo@CCompressProgressInfoImp@NGz@NArchive@@UAGJPB_K0@Z endp
.text:000012EF
.text:000012EF ; ---------------------------------------------------------------------------
.text:000012F2                 align 4
.text:000012F4 $LN7_0          dd 2                    ; DATA XREF: NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+90o
.text:000012F8                 dd offset $LN6_4
.text:000012FC $LN6_4          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000012F8o
.text:00001304                 dd offset $LN4_2        ; "files"
.text:00001308                 dd 0FFFFFFE4h, 8
.text:00001310                 dd offset $LN5_2        ; "value"
.text:00001314 $LN5_2          db 'value',0            ; DATA XREF: .text:00001310o
.text:0000131A $LN4_2          db 'files',0            ; DATA XREF: .text:00001304o
.text:00001320                 db 4 dup(0CCh)
.text:00001324
.text:00001324 ; =============== S U B R O U T I N E =======================================
.text:00001324
.text:00001324 ; Attributes: bp-based frame
.text:00001324
.text:00001324 ; __int32 __cdecl NArchive::NGz::CHandler::Open(NArchive::NGz::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00001324                 public ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001324 ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00001324                                         ; DATA XREF: .rdata:00004FE0o
.text:00001324
.text:00001324 var_3C          = dword ptr -3Ch
.text:00001324 var_38          = dword ptr -38h
.text:00001324 var_34          = dword ptr -34h
.text:00001324 var_2C          = dword ptr -2Ch
.text:00001324 var_28          = dword ptr -28h
.text:00001324 var_20          = dword ptr -20h
.text:00001324 var_1C          = dword ptr -1Ch
.text:00001324 var_14          = dword ptr -14h
.text:00001324 var_10          = dword ptr -10h
.text:00001324 var_C           = dword ptr -0Ch
.text:00001324 var_4           = dword ptr -4
.text:00001324 this            = dword ptr  8
.text:00001324 arg_4           = dword ptr  0Ch
.text:00001324
.text:00001324 ; FUNCTION CHUNK AT .text:00001457 SIZE 0000002F BYTES
.text:00001324
.text:00001324                 push    ebp
.text:00001325                 mov     ebp, esp
.text:00001327                 push    0FFFFFFFFh
.text:00001329                 push    offset __ehhandler$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000132E                 mov     eax, large fs:0
.text:00001334                 push    eax
.text:00001335                 push    ecx
.text:00001336                 sub     esp, 2Ch
.text:00001339                 push    ebx
.text:0000133A                 push    esi
.text:0000133B                 push    edi
.text:0000133C                 lea     edi, [ebp+var_3C]
.text:0000133F                 mov     ecx, 0Bh
.text:00001344                 mov     eax, 0CCCCCCCCh
.text:00001349                 rep stosd
.text:0000134B                 mov     eax, dword ptr ds:___security_cookie
.text:00001350                 xor     eax, ebp
.text:00001352                 push    eax
.text:00001353                 lea     eax, [ebp+var_C]
.text:00001356                 mov     large fs:0, eax
.text:0000135C                 mov     [ebp+var_10], esp
.text:0000135F                 mov     [ebp+var_4], 0
.text:00001366                 mov     esi, esp
.text:00001368                 mov     eax, [ebp+arg_4]
.text:0000136B                 push    eax
.text:0000136C                 mov     ecx, [ebp+this]
.text:0000136F                 add     ecx, 4
.text:00001372                 push    ecx
.text:00001373                 mov     edx, [ebp+this]
.text:00001376                 mov     eax, [edx+4]
.text:00001379                 mov     ecx, [eax+0Ch]
.text:0000137C                 call    ecx
.text:0000137E                 cmp     esi, esp
.text:00001380                 call    __RTC_CheckEsp
.text:00001385                 mov     [ebp+var_34], eax
.text:00001388                 mov     edx, [ebp+var_34]
.text:0000138B                 mov     [ebp+var_14], edx
.text:0000138E                 cmp     [ebp+var_14], 0
.text:00001392                 jz      short loc_139C
.text:00001394                 mov     eax, [ebp+var_14]
.text:00001397                 jmp     loc_1457
.text:0000139C ; ---------------------------------------------------------------------------
.text:0000139C
.text:0000139C loc_139C:                               ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Ej
.text:0000139C                 mov     eax, [ebp+this]
.text:0000139F                 mov     byte ptr [eax+3Ch], 0
.text:000013A3                 mov     esi, esp
.text:000013A5                 lea     ecx, [ebp+var_20]
.text:000013A8                 push    ecx
.text:000013A9                 push    2
.text:000013AB                 push    0FFFFFFFFh
.text:000013AD                 push    0FFFFFFF8h
.text:000013AF                 mov     edx, [ebp+arg_4]
.text:000013B2                 push    edx
.text:000013B3                 mov     eax, [ebp+arg_4]
.text:000013B6                 mov     ecx, [eax]
.text:000013B8                 mov     edx, [ecx+10h]
.text:000013BB                 call    edx
.text:000013BD                 cmp     esi, esp
.text:000013BF                 call    __RTC_CheckEsp
.text:000013C4                 mov     [ebp+var_38], eax
.text:000013C7                 mov     eax, [ebp+var_38]
.text:000013CA                 mov     [ebp+var_28], eax
.text:000013CD                 cmp     [ebp+var_28], 0
.text:000013D1                 jz      short loc_13D8
.text:000013D3                 mov     eax, [ebp+var_28]
.text:000013D6                 jmp     short loc_1457
.text:000013D8 ; ---------------------------------------------------------------------------
.text:000013D8
.text:000013D8 loc_13D8:                               ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+ADj
.text:000013D8                 mov     ecx, [ebp+var_20]
.text:000013DB                 add     ecx, 8
.text:000013DE                 mov     edx, [ebp+var_1C]
.text:000013E1                 adc     edx, 0
.text:000013E4                 mov     eax, [ebp+this]
.text:000013E7                 mov     [eax+48h], ecx
.text:000013EA                 mov     [eax+4Ch], edx
.text:000013ED                 mov     ecx, [ebp+arg_4]
.text:000013F0                 push    ecx             ; struct ISequentialInStream *
.text:000013F1                 mov     ecx, [ebp+this]
.text:000013F4                 add     ecx, 14h        ; this
.text:000013F7                 call    ?ReadFooter2@CItem@NGz@NArchive@@QAEJPAUISequentialInStream@@@Z ; NArchive::NGz::CItem::ReadFooter2(ISequentialInStream *)
.text:000013FC                 mov     [ebp+var_3C], eax
.text:000013FF                 mov     edx, [ebp+var_3C]
.text:00001402                 mov     [ebp+var_2C], edx
.text:00001405                 cmp     [ebp+var_2C], 0
.text:00001409                 jz      short loc_1410
.text:0000140B                 mov     eax, [ebp+var_2C]
.text:0000140E                 jmp     short loc_1457
.text:00001410 ; ---------------------------------------------------------------------------
.text:00001410
.text:00001410 loc_1410:                               ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+E5j
.text:00001410                 mov     eax, [ebp+arg_4]
.text:00001413                 push    eax
.text:00001414                 mov     ecx, [ebp+this]
.text:00001417                 add     ecx, 68h ; 'h'
.text:0000141A                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:0000141F                 mov     ecx, [ebp+this]
.text:00001422                 mov     byte ptr [ecx+3Ch], 1
.text:00001426                 mov     edx, [ebp+this]
.text:00001429                 mov     byte ptr [edx+3Dh], 1
.text:0000142D                 xor     eax, eax
.text:0000142F                 jmp     short loc_1457
.text:0000142F ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:0000142F
.text:00001431
.text:00001431 ; =============== S U B R O U T I N E =======================================
.text:00001431
.text:00001431
.text:00001431 __catch$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00001431                                         ; DATA XREF: .xdata$x:000038F0o
.text:00001431                 mov     dword ptr [ebp-30h], 8007000Eh
.text:00001438                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000143F                 mov     eax, offset $LN10_1
.text:00001444                 retn
.text:00001444 __catch$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:00001444
.text:00001445 ; ---------------------------------------------------------------------------
.text:00001445                 mov     eax, offset __tryend$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:0000144A                 retn
.text:0000144B ; ---------------------------------------------------------------------------
.text:0000144B
.text:0000144B __tryend$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:0000144B                                         ; DATA XREF: .text:00001445o
.text:0000144B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001452                 jmp     short loc_1457
.text:00001454 ; ---------------------------------------------------------------------------
.text:00001454
.text:00001454 $LN10_1:                                ; DATA XREF: __catch$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+Eo
.text:00001454                 mov     eax, [ebp-30h]
.text:00001457 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001457
.text:00001457 loc_1457:                               ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+73j
.text:00001457                                         ; NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+B2j ...
.text:00001457                 push    edx
.text:00001458                 mov     ecx, ebp
.text:0000145A                 push    eax
.text:0000145B                 lea     edx, $LN15_1
.text:00001461                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001466                 pop     eax
.text:00001467                 pop     edx
.text:00001468                 mov     ecx, [ebp+var_C]
.text:0000146B                 mov     large fs:0, ecx
.text:00001472                 pop     ecx
.text:00001473                 pop     edi
.text:00001474                 pop     esi
.text:00001475                 pop     ebx
.text:00001476                 add     esp, 3Ch
.text:00001479                 cmp     ebp, esp
.text:0000147B                 call    __RTC_CheckEsp
.text:00001480                 mov     esp, ebp
.text:00001482                 pop     ebp
.text:00001483                 retn    10h
.text:00001483 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001483 ; ---------------------------------------------------------------------------
.text:00001486                 align 4
.text:00001488 $LN15_1         dd 1                    ; DATA XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+137o
.text:0000148C                 dd offset $LN14_1
.text:00001490 $LN14_1         dd 0FFFFFFE0h, 8        ; DATA XREF: .text:0000148Co
.text:00001498                 dd offset $LN12_1       ; "endPos"
.text:0000149C $LN12_1         db 'endPos',0           ; DATA XREF: .text:00001498o
.text:000014A3                 align 4
.text:000014A4
.text:000014A4 ; =============== S U B R O U T I N E =======================================
.text:000014A4
.text:000014A4 ; Attributes: bp-based frame
.text:000014A4
.text:000014A4 ; __int32 __cdecl NArchive::NGz::CHandler::OpenSeq(NArchive::NGz::CHandler *this, struct ISequentialInStream *)
.text:000014A4                 public ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:000014A4 ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text:000014A4                                         ; DATA XREF: .rdata:00004FCCo
.text:000014A4
.text:000014A4 var_38          = dword ptr -38h
.text:000014A4 var_34          = dword ptr -34h
.text:000014A4 var_2D          = byte ptr -2Dh
.text:000014A4 var_2C          = dword ptr -2Ch
.text:000014A4 var_14          = dword ptr -14h
.text:000014A4 var_10          = dword ptr -10h
.text:000014A4 var_C           = dword ptr -0Ch
.text:000014A4 var_4           = dword ptr -4
.text:000014A4 this            = dword ptr  8
.text:000014A4 arg_4           = dword ptr  0Ch
.text:000014A4
.text:000014A4 ; FUNCTION CHUNK AT .text:000015F9 SIZE 0000002F BYTES
.text:000014A4
.text:000014A4                 push    ebp
.text:000014A5                 mov     ebp, esp
.text:000014A7                 push    0FFFFFFFFh
.text:000014A9                 push    offset __ehhandler$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:000014AE                 mov     eax, large fs:0
.text:000014B4                 push    eax
.text:000014B5                 push    ecx
.text:000014B6                 sub     esp, 28h
.text:000014B9                 push    ebx
.text:000014BA                 push    esi
.text:000014BB                 push    edi
.text:000014BC                 lea     edi, [ebp+var_38]
.text:000014BF                 mov     ecx, 0Ah
.text:000014C4                 mov     eax, 0CCCCCCCCh
.text:000014C9                 rep stosd
.text:000014CB                 mov     eax, dword ptr ds:___security_cookie
.text:000014D0                 xor     eax, ebp
.text:000014D2                 push    eax
.text:000014D3                 lea     eax, [ebp+var_C]
.text:000014D6                 mov     large fs:0, eax
.text:000014DC                 mov     [ebp+var_10], esp
.text:000014DF                 mov     [ebp+var_4], 0
.text:000014E6                 mov     byte ptr [ebp+var_4], 1
.text:000014EA                 mov     eax, [ebp+this]
.text:000014ED                 sub     eax, 4
.text:000014F0                 mov     esi, esp
.text:000014F2                 push    eax
.text:000014F3                 mov     ecx, [ebp+this]
.text:000014F6                 mov     edx, [ecx-4]
.text:000014F9                 mov     eax, [edx+10h]
.text:000014FC                 call    eax
.text:000014FE                 cmp     esi, esp
.text:00001500                 call    __RTC_CheckEsp
.text:00001505                 mov     esi, esp
.text:00001507                 mov     ecx, [ebp+arg_4]
.text:0000150A                 push    ecx
.text:0000150B                 mov     edx, [ebp+this]
.text:0000150E                 mov     eax, [edx+6Ch]
.text:00001511                 add     eax, 8
.text:00001514                 push    eax
.text:00001515                 mov     ecx, [ebp+this]
.text:00001518                 mov     edx, [ecx+6Ch]
.text:0000151B                 mov     eax, [edx+8]
.text:0000151E                 mov     ecx, [eax+0Ch]
.text:00001521                 call    ecx
.text:00001523                 cmp     esi, esp
.text:00001525                 call    __RTC_CheckEsp
.text:0000152A                 push    1               ; bool
.text:0000152C                 mov     edx, [ebp+this]
.text:0000152F                 mov     ecx, [edx+6Ch]  ; this
.text:00001532                 call    ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z ; NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)
.text:00001537                 mov     eax, [ebp+this]
.text:0000153A                 mov     ecx, [eax+6Ch]
.text:0000153D                 push    ecx             ; struct NCompress::NDeflate::NDecoder::CCOMCoder *
.text:0000153E                 mov     ecx, [ebp+this]
.text:00001541                 add     ecx, 10h        ; this
.text:00001544                 call    ?ReadHeader@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)
.text:00001549                 mov     [ebp+var_2C], eax
.text:0000154C                 mov     edx, [ebp+var_2C]
.text:0000154F                 mov     [ebp+var_14], edx
.text:00001552                 cmp     [ebp+var_14], 0
.text:00001556                 jz      short loc_1560
.text:00001558                 mov     eax, [ebp+var_14]
.text:0000155B                 jmp     loc_15F9
.text:00001560 ; ---------------------------------------------------------------------------
.text:00001560
.text:00001560 loc_1560:                               ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+B2j
.text:00001560                 mov     eax, [ebp+this]
.text:00001563                 mov     ecx, [eax+6Ch]  ; this
.text:00001566                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:0000156B                 mov     [ebp+var_2D], al
.text:0000156E                 movzx   ecx, [ebp+var_2D]
.text:00001572                 test    ecx, ecx
.text:00001574                 jz      short loc_157D
.text:00001576                 mov     eax, 1
.text:0000157B                 jmp     short loc_15F9
.text:0000157D ; ---------------------------------------------------------------------------
.text:0000157D
.text:0000157D loc_157D:                               ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+D0j
.text:0000157D                 mov     edx, [ebp+this]
.text:00001580                 mov     ecx, [edx+6Ch]  ; this
.text:00001583                 call    ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(void)
.text:00001588                 mov     [ebp+var_38], eax
.text:0000158B                 mov     [ebp+var_34], edx
.text:0000158E                 mov     eax, [ebp+this]
.text:00001591                 mov     ecx, [ebp+var_38]
.text:00001594                 mov     [eax+5Ch], ecx
.text:00001597                 mov     edx, [ebp+var_34]
.text:0000159A                 mov     [eax+60h], edx
.text:0000159D                 mov     eax, [ebp+this]
.text:000015A0                 mov     byte ptr [eax+38h], 1
.text:000015A4                 xor     eax, eax
.text:000015A6                 jmp     short loc_15F9
.text:000015A6 ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text:000015A6
.text:000015A8
.text:000015A8 ; =============== S U B R O U T I N E =======================================
.text:000015A8
.text:000015A8
.text:000015A8 __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$0 proc near
.text:000015A8                                         ; DATA XREF: .xdata$x:00003958o
.text:000015A8                 mov     ecx, [ebp-1Ch]
.text:000015AB                 mov     edx, [ecx]
.text:000015AD                 mov     [ebp-24h], edx
.text:000015B0                 mov     dword ptr [ebp-4], 0
.text:000015B7                 mov     eax, offset $LN12_2
.text:000015BC                 retn
.text:000015BC __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$0 endp
.text:000015BC
.text:000015BD ; ---------------------------------------------------------------------------
.text:000015BD                 mov     eax, offset __tryend$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$1
.text:000015C2                 retn
.text:000015C3 ; ---------------------------------------------------------------------------
.text:000015C3
.text:000015C3 __tryend$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$1:
.text:000015C3                                         ; DATA XREF: .text:000015BDo
.text:000015C3                 mov     dword ptr [ebp-4], 0
.text:000015CA                 jmp     short loc_15D1
.text:000015CC ; ---------------------------------------------------------------------------
.text:000015CC
.text:000015CC $LN12_2:                                ; DATA XREF: __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$0+Fo
.text:000015CC                 mov     eax, [ebp-24h]
.text:000015CF                 jmp     short loc_15F9
.text:000015D1 ; ---------------------------------------------------------------------------
.text:000015D1
.text:000015D1 loc_15D1:                               ; CODE XREF: .text:000015CAj
.text:000015D1                 jmp     short $LN7_1
.text:000015D3
.text:000015D3 ; =============== S U B R O U T I N E =======================================
.text:000015D3
.text:000015D3
.text:000015D3 __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$2 proc near
.text:000015D3                                         ; DATA XREF: .xdata$x:00003948o
.text:000015D3                 mov     dword ptr [ebp-28h], 8007000Eh
.text:000015DA                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000015E1                 mov     eax, offset $LN14_2
.text:000015E6                 retn
.text:000015E6 __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$2 endp
.text:000015E6
.text:000015E7 ; ---------------------------------------------------------------------------
.text:000015E7                 mov     eax, offset $LN7_1
.text:000015EC                 retn
.text:000015ED ; ---------------------------------------------------------------------------
.text:000015ED
.text:000015ED $LN7_1:                                 ; CODE XREF: .text:loc_15D1j
.text:000015ED                                         ; DATA XREF: .text:000015E7o
.text:000015ED                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000015F4                 jmp     short loc_15F9
.text:000015F6 ; ---------------------------------------------------------------------------
.text:000015F6
.text:000015F6 $LN14_2:                                ; DATA XREF: __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$2+Eo
.text:000015F6                 mov     eax, [ebp-28h]
.text:000015F9 ; START OF FUNCTION CHUNK FOR ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:000015F9
.text:000015F9 loc_15F9:                               ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+B7j
.text:000015F9                                         ; NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+D7j ...
.text:000015F9                 push    edx
.text:000015FA                 mov     ecx, ebp
.text:000015FC                 push    eax
.text:000015FD                 lea     edx, $LN20_0
.text:00001603                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001608                 pop     eax
.text:00001609                 pop     edx
.text:0000160A                 mov     ecx, [ebp+var_C]
.text:0000160D                 mov     large fs:0, ecx
.text:00001614                 pop     ecx
.text:00001615                 pop     edi
.text:00001616                 pop     esi
.text:00001617                 pop     ebx
.text:00001618                 add     esp, 38h
.text:0000161B                 cmp     ebp, esp
.text:0000161D                 call    __RTC_CheckEsp
.text:00001622                 mov     esp, ebp
.text:00001624                 pop     ebp
.text:00001625                 retn    8
.text:00001625 ; END OF FUNCTION CHUNK FOR ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:00001625 ; ---------------------------------------------------------------------------
.text:00001628 $LN20_0         dd 1                    ; DATA XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+159o
.text:0000162C                 dd offset $LN19_0
.text:00001630 $LN19_0         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:0000162Co
.text:00001638                 dd offset $LN17_0
.text:0000163C $LN17_0         dd 0CCCC0065h, 0CCCCCCCCh ; DATA XREF: .text:00001638o
.text:00001644
.text:00001644 ; =============== S U B R O U T I N E =======================================
.text:00001644
.text:00001644 ; Attributes: bp-based frame
.text:00001644
.text:00001644 ; __int32 __stdcall NArchive::NGz::CHandler::Close(NArchive::NGz::CHandler *this)
.text:00001644                 public ?Close@CHandler@NGz@NArchive@@UAGJXZ
.text:00001644 ?Close@CHandler@NGz@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:00004FE4o
.text:00001644
.text:00001644 this            = dword ptr  8
.text:00001644
.text:00001644                 push    ebp
.text:00001645                 mov     ebp, esp
.text:00001647                 push    esi
.text:00001648                 mov     eax, [ebp+this]
.text:0000164B                 mov     byte ptr [eax+3Ch], 0
.text:0000164F                 mov     ecx, [ebp+this]
.text:00001652                 mov     byte ptr [ecx+3Dh], 0
.text:00001656                 mov     edx, [ebp+this]
.text:00001659                 mov     byte ptr [edx+3Eh], 0
.text:0000165D                 mov     eax, [ebp+this]
.text:00001660                 mov     byte ptr [eax+3Fh], 0
.text:00001664                 mov     ecx, [ebp+this]
.text:00001667                 mov     byte ptr [ecx+40h], 0
.text:0000166B                 mov     edx, [ebp+this]
.text:0000166E                 mov     byte ptr [edx+41h], 0
.text:00001672                 mov     eax, [ebp+this]
.text:00001675                 mov     byte ptr [eax+42h], 0
.text:00001679                 mov     ecx, [ebp+this]
.text:0000167C                 mov     dword ptr [ecx+48h], 0
.text:00001683                 mov     dword ptr [ecx+4Ch], 0
.text:0000168A                 mov     edx, [ebp+this]
.text:0000168D                 mov     dword ptr [edx+60h], 0
.text:00001694                 mov     dword ptr [edx+64h], 0
.text:0000169B                 mov     ecx, [ebp+this]
.text:0000169E                 add     ecx, 68h ; 'h'
.text:000016A1                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:000016A6                 mov     eax, [ebp+this]
.text:000016A9                 mov     ecx, [eax+70h]
.text:000016AC                 mov     edx, [ebp+this]
.text:000016AF                 mov     eax, [edx+70h]
.text:000016B2                 add     eax, 8
.text:000016B5                 mov     ecx, [ecx+8]
.text:000016B8                 mov     esi, esp
.text:000016BA                 push    eax
.text:000016BB                 mov     edx, [ecx+10h]
.text:000016BE                 call    edx
.text:000016C0                 cmp     esi, esp
.text:000016C2                 call    __RTC_CheckEsp
.text:000016C7                 xor     eax, eax
.text:000016C9                 pop     esi
.text:000016CA                 cmp     ebp, esp
.text:000016CC                 call    __RTC_CheckEsp
.text:000016D1                 pop     ebp
.text:000016D2                 retn    4
.text:000016D2 ?Close@CHandler@NGz@NArchive@@UAGJXZ endp
.text:000016D2
.text:000016D2 ; ---------------------------------------------------------------------------
.text:000016D5                 db 0Fh dup(0CCh)
.text:000016E4
.text:000016E4 ; =============== S U B R O U T I N E =======================================
.text:000016E4
.text:000016E4 ; Attributes: bp-based frame
.text:000016E4
.text:000016E4 ; __int32 __cdecl NArchive::NGz::CHandler::Extract(NArchive::NGz::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:000016E4                 public ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000016E4 ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:000016E4                                         ; DATA XREF: .rdata:00004FF0o
.text:000016E4
.text:000016E4 var_1A0         = dword ptr -1A0h
.text:000016E4 var_19C         = dword ptr -19Ch
.text:000016E4 var_195         = byte ptr -195h
.text:000016E4 var_194         = dword ptr -194h
.text:000016E4 var_190         = dword ptr -190h
.text:000016E4 var_18C         = dword ptr -18Ch
.text:000016E4 var_188         = dword ptr -188h
.text:000016E4 var_184         = dword ptr -184h
.text:000016E4 var_17D         = byte ptr -17Dh
.text:000016E4 var_17C         = dword ptr -17Ch
.text:000016E4 var_178         = dword ptr -178h
.text:000016E4 var_174         = dword ptr -174h
.text:000016E4 var_170         = dword ptr -170h
.text:000016E4 var_16C         = dword ptr -16Ch
.text:000016E4 var_168         = dword ptr -168h
.text:000016E4 var_164         = dword ptr -164h
.text:000016E4 var_160         = dword ptr -160h
.text:000016E4 var_15C         = dword ptr -15Ch
.text:000016E4 var_158         = dword ptr -158h
.text:000016E4 var_154         = dword ptr -154h
.text:000016E4 var_14D         = byte ptr -14Dh
.text:000016E4 var_14C         = dword ptr -14Ch
.text:000016E4 var_148         = dword ptr -148h
.text:000016E4 var_144         = dword ptr -144h
.text:000016E4 var_140         = dword ptr -140h
.text:000016E4 var_13C         = dword ptr -13Ch
.text:000016E4 var_138         = dword ptr -138h
.text:000016E4 var_134         = dword ptr -134h
.text:000016E4 var_130         = dword ptr -130h
.text:000016E4 var_129         = byte ptr -129h
.text:000016E4 var_128         = dword ptr -128h
.text:000016E4 var_124         = dword ptr -124h
.text:000016E4 var_120         = dword ptr -120h
.text:000016E4 var_11C         = dword ptr -11Ch
.text:000016E4 var_118         = dword ptr -118h
.text:000016E4 var_114         = dword ptr -114h
.text:000016E4 var_110         = dword ptr -110h
.text:000016E4 var_109         = byte ptr -109h
.text:000016E4 var_108         = dword ptr -108h
.text:000016E4 var_104         = dword ptr -104h
.text:000016E4 var_100         = dword ptr -100h
.text:000016E4 var_F8          = dword ptr -0F8h
.text:000016E4 var_F4          = dword ptr -0F4h
.text:000016E4 var_EC          = dword ptr -0ECh
.text:000016E4 var_E8          = dword ptr -0E8h
.text:000016E4 var_E4          = dword ptr -0E4h
.text:000016E4 var_E0          = dword ptr -0E0h
.text:000016E4 var_DC          = dword ptr -0DCh
.text:000016E4 var_D8          = dword ptr -0D8h
.text:000016E4 var_D4          = dword ptr -0D4h
.text:000016E4 var_D0          = dword ptr -0D0h
.text:000016E4 var_CC          = dword ptr -0CCh
.text:000016E4 var_C8          = dword ptr -0C8h
.text:000016E4 var_C4          = dword ptr -0C4h
.text:000016E4 var_C0          = dword ptr -0C0h
.text:000016E4 var_BC          = dword ptr -0BCh
.text:000016E4 var_AC          = dword ptr -0ACh
.text:000016E4 var_A8          = dword ptr -0A8h
.text:000016E4 var_A0          = byte ptr -0A0h
.text:000016E4 var_98          = dword ptr -98h
.text:000016E4 var_94          = dword ptr -94h
.text:000016E4 var_74          = dword ptr -74h
.text:000016E4 var_70          = dword ptr -70h
.text:000016E4 var_69          = byte ptr -69h
.text:000016E4 var_68          = dword ptr -68h
.text:000016E4 var_64          = dword ptr -64h
.text:000016E4 var_60          = dword ptr -60h
.text:000016E4 var_5C          = dword ptr -5Ch
.text:000016E4 var_58          = dword ptr -58h
.text:000016E4 var_54          = dword ptr -54h
.text:000016E4 var_4D          = byte ptr -4Dh
.text:000016E4 var_4C          = dword ptr -4Ch
.text:000016E4 var_45          = byte ptr -45h
.text:000016E4 var_40          = byte ptr -40h
.text:000016E4 var_38          = dword ptr -38h
.text:000016E4 var_30          = byte ptr -30h
.text:000016E4 var_28          = dword ptr -28h
.text:000016E4 var_24          = dword ptr -24h
.text:000016E4 var_20          = dword ptr -20h
.text:000016E4 var_18          = byte ptr -18h
.text:000016E4 var_10          = dword ptr -10h
.text:000016E4 var_C           = dword ptr -0Ch
.text:000016E4 var_4           = dword ptr -4
.text:000016E4 this            = dword ptr  8
.text:000016E4 arg_4           = dword ptr  0Ch
.text:000016E4 arg_8           = dword ptr  10h
.text:000016E4 arg_C           = dword ptr  14h
.text:000016E4 arg_10          = dword ptr  18h
.text:000016E4
.text:000016E4 ; FUNCTION CHUNK AT .text:00001FE9 SIZE 00000009 BYTES
.text:000016E4 ; FUNCTION CHUNK AT .text:00002021 SIZE 00000173 BYTES
.text:000016E4 ; FUNCTION CHUNK AT .text:000021C0 SIZE 00000032 BYTES
.text:000016E4
.text:000016E4                 push    ebp
.text:000016E5                 mov     ebp, esp
.text:000016E7                 push    0FFFFFFFFh
.text:000016E9                 push    offset __ehhandler$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000016EE                 mov     eax, large fs:0
.text:000016F4                 push    eax
.text:000016F5                 push    ecx
.text:000016F6                 sub     esp, 190h
.text:000016FC                 push    ebx
.text:000016FD                 push    esi
.text:000016FE                 push    edi
.text:000016FF                 lea     edi, [ebp+var_1A0]
.text:00001705                 mov     ecx, 64h ; 'd'
.text:0000170A                 mov     eax, 0CCCCCCCCh
.text:0000170F                 rep stosd
.text:00001711                 mov     eax, dword ptr ds:___security_cookie
.text:00001716                 xor     eax, ebp
.text:00001718                 push    eax
.text:00001719                 lea     eax, [ebp+var_C]
.text:0000171C                 mov     large fs:0, eax
.text:00001722                 mov     [ebp+var_10], esp
.text:00001725                 mov     [ebp+var_4], 0
.text:0000172C                 cmp     [ebp+arg_8], 0
.text:00001730                 jnz     short loc_1739
.text:00001732                 xor     eax, eax
.text:00001734                 jmp     loc_21C0
.text:00001739 ; ---------------------------------------------------------------------------
.text:00001739
.text:00001739 loc_1739:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Cj
.text:00001739                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:0000173D                 jz      short loc_1757
.text:0000173F                 cmp     [ebp+arg_8], 1
.text:00001743                 jnz     short loc_174D
.text:00001745                 mov     eax, [ebp+arg_4]
.text:00001748                 cmp     dword ptr [eax], 0
.text:0000174B                 jz      short loc_1757
.text:0000174D
.text:0000174D loc_174D:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Fj
.text:0000174D                 mov     eax, 80070057h
.text:00001752                 jmp     loc_21C0
.text:00001757 ; ---------------------------------------------------------------------------
.text:00001757
.text:00001757 loc_1757:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+59j
.text:00001757                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+67j
.text:00001757                 mov     ecx, [ebp+this]
.text:0000175A                 movzx   edx, byte ptr [ecx+40h]
.text:0000175E                 test    edx, edx
.text:00001760                 jz      short loc_1784
.text:00001762                 mov     esi, esp
.text:00001764                 mov     eax, [ebp+this]
.text:00001767                 mov     ecx, [eax+4Ch]
.text:0000176A                 push    ecx
.text:0000176B                 mov     edx, [eax+48h]
.text:0000176E                 push    edx
.text:0000176F                 mov     eax, [ebp+arg_10]
.text:00001772                 push    eax
.text:00001773                 mov     ecx, [ebp+arg_10]
.text:00001776                 mov     edx, [ecx]
.text:00001778                 mov     eax, [edx+0Ch]
.text:0000177B                 call    eax
.text:0000177D                 cmp     esi, esp
.text:0000177F                 call    __RTC_CheckEsp
.text:00001784
.text:00001784 loc_1784:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7Cj
.text:00001784                 lea     ecx, [ebp+var_18]
.text:00001787                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:0000178C                 mov     [ebp+var_100], eax
.text:00001792                 mov     byte ptr [ebp+var_4], 1
.text:00001796                 xor     ecx, ecx
.text:00001798                 cmp     [ebp+arg_C], 0
.text:0000179C                 setnz   cl
.text:0000179F                 mov     [ebp+var_20], ecx
.text:000017A2                 lea     ecx, [ebp+var_18]
.text:000017A5                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:000017AA                 mov     [ebp+var_104], eax
.text:000017B0                 mov     esi, esp
.text:000017B2                 mov     edx, [ebp+var_20]
.text:000017B5                 push    edx
.text:000017B6                 mov     eax, [ebp+var_104]
.text:000017BC                 push    eax
.text:000017BD                 push    0
.text:000017BF                 mov     ecx, [ebp+arg_10]
.text:000017C2                 push    ecx
.text:000017C3                 mov     edx, [ebp+arg_10]
.text:000017C6                 mov     eax, [edx]
.text:000017C8                 mov     ecx, [eax+14h]
.text:000017CB                 call    ecx
.text:000017CD                 cmp     esi, esp
.text:000017CF                 call    __RTC_CheckEsp
.text:000017D4                 mov     [ebp+var_108], eax
.text:000017DA                 mov     edx, [ebp+var_108]
.text:000017E0                 mov     [ebp+var_24], edx
.text:000017E3                 cmp     [ebp+var_24], 0
.text:000017E7                 jz      short loc_1809
.text:000017E9                 mov     eax, [ebp+var_24]
.text:000017EC                 mov     [ebp+var_C0], eax
.text:000017F2                 mov     byte ptr [ebp+var_4], 0
.text:000017F6                 lea     ecx, [ebp+var_18]
.text:000017F9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000017FE                 mov     eax, [ebp+var_C0]
.text:00001804                 jmp     loc_21C0
.text:00001809 ; ---------------------------------------------------------------------------
.text:00001809
.text:00001809 loc_1809:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+103j
.text:00001809                 cmp     [ebp+arg_C], 0
.text:0000180D                 jnz     short loc_1849
.text:0000180F                 lea     ecx, [ebp+var_18]
.text:00001812                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001817                 mov     [ebp+var_109], al
.text:0000181D                 movzx   ecx, [ebp+var_109]
.text:00001824                 test    ecx, ecx
.text:00001826                 jz      short loc_1849
.text:00001828                 mov     [ebp+var_C4], 0
.text:00001832                 mov     byte ptr [ebp+var_4], 0
.text:00001836                 lea     ecx, [ebp+var_18]
.text:00001839                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000183E                 mov     eax, [ebp+var_C4]
.text:00001844                 jmp     loc_21C0
.text:00001849 ; ---------------------------------------------------------------------------
.text:00001849
.text:00001849 loc_1849:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+129j
.text:00001849                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+142j
.text:00001849                 mov     esi, esp
.text:0000184B                 mov     edx, [ebp+var_20]
.text:0000184E                 push    edx
.text:0000184F                 mov     eax, [ebp+arg_10]
.text:00001852                 push    eax
.text:00001853                 mov     ecx, [ebp+arg_10]
.text:00001856                 mov     edx, [ecx]
.text:00001858                 mov     eax, [edx+18h]
.text:0000185B                 call    eax
.text:0000185D                 cmp     esi, esp
.text:0000185F                 call    __RTC_CheckEsp
.text:00001864                 push    20h ; ' '       ; unsigned int
.text:00001866                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000186B                 add     esp, 4
.text:0000186E                 mov     [ebp+var_110], eax
.text:00001874                 mov     ecx, [ebp+var_110]
.text:0000187A                 mov     [ebp+var_CC], ecx
.text:00001880                 mov     byte ptr [ebp+var_4], 2
.text:00001884                 cmp     [ebp+var_CC], 0
.text:0000188B                 jz      short loc_18AC
.text:0000188D                 mov     ecx, [ebp+var_CC]
.text:00001893                 call    ??0COutStreamWithCRC@@QAE@XZ ; COutStreamWithCRC::COutStreamWithCRC(void)
.text:00001898                 mov     [ebp+var_114], eax
.text:0000189E                 mov     edx, [ebp+var_114]
.text:000018A4                 mov     [ebp+var_118], edx
.text:000018AA                 jmp     short loc_18B6
.text:000018AC ; ---------------------------------------------------------------------------
.text:000018AC
.text:000018AC loc_18AC:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1A7j
.text:000018AC                 mov     [ebp+var_118], 0
.text:000018B6
.text:000018B6 loc_18B6:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C6j
.text:000018B6                 mov     eax, [ebp+var_118]
.text:000018BC                 mov     [ebp+var_C8], eax
.text:000018C2                 mov     byte ptr [ebp+var_4], 1
.text:000018C6                 mov     ecx, [ebp+var_C8]
.text:000018CC                 mov     [ebp+var_28], ecx
.text:000018CF                 mov     edx, [ebp+var_28]
.text:000018D2                 push    edx
.text:000018D3                 lea     ecx, [ebp+var_30]
.text:000018D6                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:000018DB                 mov     byte ptr [ebp+var_4], 3
.text:000018DF                 lea     ecx, [ebp+var_18]
.text:000018E2                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:000018E7                 mov     [ebp+var_11C], eax
.text:000018ED                 mov     eax, [ebp+var_11C]
.text:000018F3                 push    eax             ; struct ISequentialOutStream *
.text:000018F4                 mov     ecx, [ebp+var_28] ; this
.text:000018F7                 call    ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithCRC::SetStream(ISequentialOutStream *)
.text:000018FC                 push    1               ; bool
.text:000018FE                 mov     ecx, [ebp+var_28] ; this
.text:00001901                 call    ?Init@COutStreamWithCRC@@QAEX_N@Z ; COutStreamWithCRC::Init(bool)
.text:00001906                 lea     ecx, [ebp+var_18]
.text:00001909                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:0000190E                 push    38h ; '8'       ; unsigned int
.text:00001910                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001915                 add     esp, 4
.text:00001918                 mov     [ebp+var_120], eax
.text:0000191E                 mov     ecx, [ebp+var_120]
.text:00001924                 mov     [ebp+var_D4], ecx
.text:0000192A                 mov     byte ptr [ebp+var_4], 4
.text:0000192E                 cmp     [ebp+var_D4], 0
.text:00001935                 jz      short loc_1956
.text:00001937                 mov     ecx, [ebp+var_D4]
.text:0000193D                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00001942                 mov     [ebp+var_124], eax
.text:00001948                 mov     edx, [ebp+var_124]
.text:0000194E                 mov     [ebp+var_128], edx
.text:00001954                 jmp     short loc_1960
.text:00001956 ; ---------------------------------------------------------------------------
.text:00001956
.text:00001956 loc_1956:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+251j
.text:00001956                 mov     [ebp+var_128], 0
.text:00001960
.text:00001960 loc_1960:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+270j
.text:00001960                 mov     eax, [ebp+var_128]
.text:00001966                 mov     [ebp+var_D0], eax
.text:0000196C                 mov     byte ptr [ebp+var_4], 3
.text:00001970                 mov     ecx, [ebp+var_D0]
.text:00001976                 mov     [ebp+var_38], ecx
.text:00001979                 mov     edx, [ebp+var_38]
.text:0000197C                 push    edx
.text:0000197D                 lea     ecx, [ebp+var_40]
.text:00001980                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00001985                 mov     byte ptr [ebp+var_4], 5
.text:00001989                 push    1               ; bool
.text:0000198B                 mov     eax, [ebp+arg_10]
.text:0000198E                 push    eax             ; struct IProgress *
.text:0000198F                 mov     ecx, [ebp+var_38] ; this
.text:00001992                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00001997                 mov     ecx, [ebp+this]
.text:0000199A                 mov     dl, [ecx+3Dh]
.text:0000199D                 mov     [ebp+var_45], dl
.text:000019A0                 mov     eax, [ebp+this]
.text:000019A3                 movzx   ecx, byte ptr [eax+3Dh]
.text:000019A7                 test    ecx, ecx
.text:000019A9                 jz      loc_1AA2
.text:000019AF                 mov     ecx, [ebp+this]
.text:000019B2                 add     ecx, 68h ; 'h'
.text:000019B5                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:000019BA                 mov     [ebp+var_129], al
.text:000019C0                 movzx   edx, [ebp+var_129]
.text:000019C7                 test    edx, edx
.text:000019C9                 jz      short loc_1A04
.text:000019CB                 mov     [ebp+var_D8], 80004005h
.text:000019D5                 mov     byte ptr [ebp+var_4], 3
.text:000019D9                 lea     ecx, [ebp+var_40]
.text:000019DC                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000019E1                 mov     byte ptr [ebp+var_4], 1
.text:000019E5                 lea     ecx, [ebp+var_30]
.text:000019E8                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019ED                 mov     byte ptr [ebp+var_4], 0
.text:000019F1                 lea     ecx, [ebp+var_18]
.text:000019F4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019F9                 mov     eax, [ebp+var_D8]
.text:000019FF                 jmp     loc_21C0
.text:00001A04 ; ---------------------------------------------------------------------------
.text:00001A04
.text:00001A04 loc_1A04:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2E5j
.text:00001A04                 mov     ecx, [ebp+this]
.text:00001A07                 add     ecx, 68h ; 'h'
.text:00001A0A                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00001A0F                 mov     [ebp+var_130], eax
.text:00001A15                 mov     eax, [ebp+var_130]
.text:00001A1B                 mov     [ebp+var_134], eax
.text:00001A21                 mov     esi, esp
.text:00001A23                 push    0
.text:00001A25                 push    0
.text:00001A27                 push    0
.text:00001A29                 push    0
.text:00001A2B                 mov     ecx, [ebp+var_134]
.text:00001A31                 push    ecx
.text:00001A32                 mov     edx, [ebp+var_134]
.text:00001A38                 mov     eax, [edx]
.text:00001A3A                 mov     ecx, [eax+10h]
.text:00001A3D                 call    ecx
.text:00001A3F                 cmp     esi, esp
.text:00001A41                 call    __RTC_CheckEsp
.text:00001A46                 mov     [ebp+var_138], eax
.text:00001A4C                 mov     edx, [ebp+var_138]
.text:00001A52                 mov     [ebp+var_4C], edx
.text:00001A55                 cmp     [ebp+var_4C], 0
.text:00001A59                 jz      short loc_1A93
.text:00001A5B                 mov     eax, [ebp+var_4C]
.text:00001A5E                 mov     [ebp+var_DC], eax
.text:00001A64                 mov     byte ptr [ebp+var_4], 3
.text:00001A68                 lea     ecx, [ebp+var_40]
.text:00001A6B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001A70                 mov     byte ptr [ebp+var_4], 1
.text:00001A74                 lea     ecx, [ebp+var_30]
.text:00001A77                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A7C                 mov     byte ptr [ebp+var_4], 0
.text:00001A80                 lea     ecx, [ebp+var_18]
.text:00001A83                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A88                 mov     eax, [ebp+var_DC]
.text:00001A8E                 jmp     loc_21C0
.text:00001A93 ; ---------------------------------------------------------------------------
.text:00001A93
.text:00001A93 loc_1A93:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+375j
.text:00001A93                 push    1               ; bool
.text:00001A95                 mov     ecx, [ebp+this]
.text:00001A98                 mov     ecx, [ecx+70h]  ; this
.text:00001A9B                 call    ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z ; NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)
.text:00001AA0                 jmp     short loc_1AA9
.text:00001AA2 ; ---------------------------------------------------------------------------
.text:00001AA2
.text:00001AA2 loc_1AA2:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C5j
.text:00001AA2                 mov     edx, [ebp+this]
.text:00001AA5                 mov     byte ptr [edx+3Dh], 1
.text:00001AA9
.text:00001AA9 loc_1AA9:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3BCj
.text:00001AA9                 mov     [ebp+var_4D], 1
.text:00001AAD                 mov     eax, [ebp+this]
.text:00001AB0                 mov     ecx, [eax+70h]  ; this
.text:00001AB3                 call    ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(void)
.text:00001AB8                 mov     [ebp+var_140], eax
.text:00001ABE                 mov     [ebp+var_13C], edx
.text:00001AC4                 mov     ecx, [ebp+var_140]
.text:00001ACA                 mov     [ebp+var_58], ecx
.text:00001ACD                 mov     edx, [ebp+var_13C]
.text:00001AD3                 mov     [ebp+var_54], edx
.text:00001AD6                 mov     [ebp+var_60], 0
.text:00001ADD                 mov     [ebp+var_5C], 0
.text:00001AE4                 mov     [ebp+var_68], 0
.text:00001AEB                 mov     [ebp+var_64], 0
.text:00001AF2                 mov     [ebp+var_69], 0
.text:00001AF6                 mov     [ebp+var_70], 0
.text:00001AFD                 mov     byte ptr [ebp+var_4], 6
.text:00001B01
.text:00001B01 loc_1B01:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8DDj
.text:00001B01                 mov     eax, [ebp+var_38]
.text:00001B04                 mov     ecx, [ebp+var_58]
.text:00001B07                 mov     [eax+20h], ecx
.text:00001B0A                 mov     edx, [ebp+var_54]
.text:00001B0D                 mov     [eax+24h], edx
.text:00001B10                 mov     eax, [ebp+var_38]
.text:00001B13                 mov     ecx, [ebp+var_60]
.text:00001B16                 mov     [eax+28h], ecx
.text:00001B19                 mov     edx, [ebp+var_5C]
.text:00001B1C                 mov     [eax+2Ch], edx
.text:00001B1F                 mov     ecx, [ebp+var_38] ; this
.text:00001B22                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:00001B27                 mov     [ebp+var_144], eax
.text:00001B2D                 mov     eax, [ebp+var_144]
.text:00001B33                 mov     [ebp+var_74], eax
.text:00001B36                 cmp     [ebp+var_74], 0
.text:00001B3A                 jz      short loc_1B74
.text:00001B3C                 mov     ecx, [ebp+var_74]
.text:00001B3F                 mov     [ebp+var_E0], ecx
.text:00001B45                 mov     byte ptr [ebp+var_4], 3
.text:00001B49                 lea     ecx, [ebp+var_40]
.text:00001B4C                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001B51                 mov     byte ptr [ebp+var_4], 1
.text:00001B55                 lea     ecx, [ebp+var_30]
.text:00001B58                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001B5D                 mov     byte ptr [ebp+var_4], 0
.text:00001B61                 lea     ecx, [ebp+var_18]
.text:00001B64                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001B69                 mov     eax, [ebp+var_E0]
.text:00001B6F                 jmp     loc_21C0
.text:00001B74 ; ---------------------------------------------------------------------------
.text:00001B74
.text:00001B74 loc_1B74:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+456j
.text:00001B74                 lea     ecx, [ebp+var_A0] ; this
.text:00001B7A                 call    ??0CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::CItem(void)
.text:00001B7F                 mov     [ebp+var_148], eax
.text:00001B85                 mov     byte ptr [ebp+var_4], 7
.text:00001B89                 movzx   edx, [ebp+var_4D]
.text:00001B8D                 test    edx, edx
.text:00001B8F                 jz      short loc_1B9D
.text:00001B91                 movzx   eax, [ebp+var_45]
.text:00001B95                 test    eax, eax
.text:00001B97                 jz      loc_1CC6
.text:00001B9D
.text:00001B9D loc_1B9D:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4ABj
.text:00001B9D                 mov     ecx, [ebp+this]
.text:00001BA0                 mov     edx, [ecx+70h]
.text:00001BA3                 push    edx             ; struct NCompress::NDeflate::NDecoder::CCOMCoder *
.text:00001BA4                 lea     ecx, [ebp+var_A0] ; this
.text:00001BAA                 call    ?ReadHeader@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)
.text:00001BAF                 mov     [ebp+var_14C], eax
.text:00001BB5                 mov     eax, [ebp+var_14C]
.text:00001BBB                 mov     [ebp+var_70], eax
.text:00001BBE                 cmp     [ebp+var_70], 0
.text:00001BC2                 jz      short loc_1C11
.text:00001BC4                 cmp     [ebp+var_70], 1
.text:00001BC8                 jz      short loc_1C11
.text:00001BCA                 mov     ecx, [ebp+var_70]
.text:00001BCD                 mov     [ebp+var_E4], ecx
.text:00001BD3                 mov     byte ptr [ebp+var_4], 6
.text:00001BD7                 lea     ecx, [ebp+var_A0] ; this
.text:00001BDD                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001BE2                 mov     byte ptr [ebp+var_4], 3
.text:00001BE6                 lea     ecx, [ebp+var_40]
.text:00001BE9                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001BEE                 mov     byte ptr [ebp+var_4], 1
.text:00001BF2                 lea     ecx, [ebp+var_30]
.text:00001BF5                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001BFA                 mov     byte ptr [ebp+var_4], 0
.text:00001BFE                 lea     ecx, [ebp+var_18]
.text:00001C01                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C06                 mov     eax, [ebp+var_E4]
.text:00001C0C                 jmp     loc_21C0
.text:00001C11 ; ---------------------------------------------------------------------------
.text:00001C11
.text:00001C11 loc_1C11:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4DEj
.text:00001C11                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4E4j
.text:00001C11                 mov     edx, [ebp+this]
.text:00001C14                 mov     ecx, [edx+70h]  ; this
.text:00001C17                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00001C1C                 mov     [ebp+var_14D], al
.text:00001C22                 movzx   eax, [ebp+var_14D]
.text:00001C29                 test    eax, eax
.text:00001C2B                 jz      short loc_1C34
.text:00001C2D                 mov     [ebp+var_70], 1
.text:00001C34
.text:00001C34 loc_1C34:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+547j
.text:00001C34                 cmp     [ebp+var_70], 0
.text:00001C38                 jz      short loc_1C5D
.text:00001C3A                 movzx   ecx, [ebp+var_4D]
.text:00001C3E                 test    ecx, ecx
.text:00001C40                 jz      short loc_1C5D
.text:00001C42                 mov     edx, [ebp+this]
.text:00001C45                 mov     byte ptr [edx+3Ch], 0
.text:00001C49                 mov     byte ptr [ebp+var_4], 6
.text:00001C4D                 lea     ecx, [ebp+var_A0] ; this
.text:00001C53                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001C58                 jmp     loc_1FC6
.text:00001C5D ; ---------------------------------------------------------------------------
.text:00001C5D
.text:00001C5D loc_1C5D:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+554j
.text:00001C5D                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+55Cj
.text:00001C5D                 mov     eax, [ebp+this]
.text:00001C60                 mov     ecx, [eax+70h]  ; this
.text:00001C63                 call    ?GetStreamSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetStreamSize(void)
.text:00001C68                 mov     [ebp+var_158], eax
.text:00001C6E                 mov     [ebp+var_154], edx
.text:00001C74                 mov     ecx, [ebp+var_58]
.text:00001C77                 cmp     ecx, [ebp+var_158]
.text:00001C7D                 jnz     short loc_1CA5
.text:00001C7F                 mov     edx, [ebp+var_54]
.text:00001C82                 cmp     edx, [ebp+var_154]
.text:00001C88                 jnz     short loc_1CA5
.text:00001C8A                 mov     [ebp+var_70], 0
.text:00001C91                 mov     byte ptr [ebp+var_4], 6
.text:00001C95                 lea     ecx, [ebp+var_A0] ; this
.text:00001C9B                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001CA0                 jmp     loc_1FC6
.text:00001CA5 ; ---------------------------------------------------------------------------
.text:00001CA5
.text:00001CA5 loc_1CA5:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+599j
.text:00001CA5                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5A4j
.text:00001CA5                 cmp     [ebp+var_70], 0
.text:00001CA9                 jz      short loc_1CC6
.text:00001CAB                 mov     eax, [ebp+this]
.text:00001CAE                 mov     byte ptr [eax+3Eh], 1
.text:00001CB2                 mov     byte ptr [ebp+var_4], 6
.text:00001CB6                 lea     ecx, [ebp+var_A0] ; this
.text:00001CBC                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001CC1                 jmp     loc_1FC6
.text:00001CC6 ; ---------------------------------------------------------------------------
.text:00001CC6
.text:00001CC6 loc_1CC6:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4B3j
.text:00001CC6                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5C5j
.text:00001CC6                 mov     ecx, [ebp+var_68]
.text:00001CC9                 add     ecx, 1
.text:00001CCC                 mov     edx, [ebp+var_64]
.text:00001CCF                 adc     edx, 0
.text:00001CD2                 mov     [ebp+var_68], ecx
.text:00001CD5                 mov     [ebp+var_64], edx
.text:00001CD8                 mov     [ebp+var_4D], 0
.text:00001CDC                 mov     ecx, [ebp+var_28] ; this
.text:00001CDF                 call    ?GetSize@COutStreamWithCRC@@QBE_KXZ ; COutStreamWithCRC::GetSize(void)
.text:00001CE4                 mov     [ebp+var_160], eax
.text:00001CEA                 mov     [ebp+var_15C], edx
.text:00001CF0                 mov     eax, [ebp+var_160]
.text:00001CF6                 mov     [ebp+var_AC], eax
.text:00001CFC                 mov     ecx, [ebp+var_15C]
.text:00001D02                 mov     [ebp+var_A8], ecx
.text:00001D08                 mov     ecx, [ebp+var_28] ; this
.text:00001D0B                 call    ?InitCRC@COutStreamWithCRC@@QAEXXZ ; COutStreamWithCRC::InitCRC(void)
.text:00001D10                 lea     ecx, [ebp+var_40]
.text:00001D13                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001D18                 mov     [ebp+var_164], eax
.text:00001D1E                 lea     ecx, [ebp+var_30]
.text:00001D21                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001D26                 mov     [ebp+var_168], eax
.text:00001D2C                 mov     esi, esp
.text:00001D2E                 mov     edx, [ebp+var_164]
.text:00001D34                 push    edx
.text:00001D35                 push    0
.text:00001D37                 mov     eax, [ebp+var_168]
.text:00001D3D                 push    eax
.text:00001D3E                 mov     ecx, [ebp+this]
.text:00001D41                 mov     edx, [ecx+70h]
.text:00001D44                 push    edx
.text:00001D45                 mov     eax, [ebp+this]
.text:00001D48                 mov     ecx, [eax+70h]
.text:00001D4B                 mov     edx, [ecx]
.text:00001D4D                 mov     eax, [edx+14h]
.text:00001D50                 call    eax
.text:00001D52                 cmp     esi, esp
.text:00001D54                 call    __RTC_CheckEsp
.text:00001D59                 mov     [ebp+var_16C], eax
.text:00001D5F                 mov     ecx, [ebp+var_16C]
.text:00001D65                 mov     [ebp+var_70], ecx
.text:00001D68                 mov     edx, [ebp+this]
.text:00001D6B                 mov     ecx, [edx+70h]  ; this
.text:00001D6E                 call    ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(void)
.text:00001D73                 mov     [ebp+var_174], eax
.text:00001D79                 mov     [ebp+var_170], edx
.text:00001D7F                 mov     eax, [ebp+var_174]
.text:00001D85                 mov     [ebp+var_58], eax
.text:00001D88                 mov     ecx, [ebp+var_170]
.text:00001D8E                 mov     [ebp+var_54], ecx
.text:00001D91                 mov     ecx, [ebp+var_28] ; this
.text:00001D94                 call    ?GetSize@COutStreamWithCRC@@QBE_KXZ ; COutStreamWithCRC::GetSize(void)
.text:00001D99                 mov     [ebp+var_17C], eax
.text:00001D9F                 mov     [ebp+var_178], edx
.text:00001DA5                 mov     edx, [ebp+var_17C]
.text:00001DAB                 mov     [ebp+var_60], edx
.text:00001DAE                 mov     eax, [ebp+var_178]
.text:00001DB4                 mov     [ebp+var_5C], eax
.text:00001DB7                 cmp     [ebp+var_70], 0
.text:00001DBB                 jz      short loc_1E0A
.text:00001DBD                 cmp     [ebp+var_70], 1
.text:00001DC1                 jz      short loc_1E0A
.text:00001DC3                 mov     ecx, [ebp+var_70]
.text:00001DC6                 mov     [ebp+var_E8], ecx
.text:00001DCC                 mov     byte ptr [ebp+var_4], 6
.text:00001DD0                 lea     ecx, [ebp+var_A0] ; this
.text:00001DD6                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001DDB                 mov     byte ptr [ebp+var_4], 3
.text:00001DDF                 lea     ecx, [ebp+var_40]
.text:00001DE2                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001DE7                 mov     byte ptr [ebp+var_4], 1
.text:00001DEB                 lea     ecx, [ebp+var_30]
.text:00001DEE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001DF3                 mov     byte ptr [ebp+var_4], 0
.text:00001DF7                 lea     ecx, [ebp+var_18]
.text:00001DFA                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001DFF                 mov     eax, [ebp+var_E8]
.text:00001E05                 jmp     loc_21C0
.text:00001E0A ; ---------------------------------------------------------------------------
.text:00001E0A
.text:00001E0A loc_1E0A:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6D7j
.text:00001E0A                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6DDj
.text:00001E0A                 mov     edx, [ebp+this]
.text:00001E0D                 mov     ecx, [edx+70h]  ; this
.text:00001E10                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00001E15                 mov     [ebp+var_17D], al
.text:00001E1B                 movzx   eax, [ebp+var_17D]
.text:00001E22                 test    eax, eax
.text:00001E24                 jz      short loc_1E5D
.text:00001E26                 mov     ecx, [ebp+this]
.text:00001E29                 mov     ecx, [ecx+70h]  ; this
.text:00001E2C                 call    ?GetStreamSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetStreamSize(void)
.text:00001E31                 mov     [ebp+var_188], eax
.text:00001E37                 mov     [ebp+var_184], edx
.text:00001E3D                 mov     edx, [ebp+var_188]
.text:00001E43                 mov     [ebp+var_58], edx
.text:00001E46                 mov     eax, [ebp+var_184]
.text:00001E4C                 mov     [ebp+var_54], eax
.text:00001E4F                 mov     ecx, [ebp+this]
.text:00001E52                 mov     byte ptr [ecx+3Fh], 1
.text:00001E56                 mov     [ebp+var_70], 1
.text:00001E5D
.text:00001E5D loc_1E5D:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+740j
.text:00001E5D                 cmp     [ebp+var_70], 0
.text:00001E61                 jz      short loc_1E77
.text:00001E63                 mov     byte ptr [ebp+var_4], 6
.text:00001E67                 lea     ecx, [ebp+var_A0] ; this
.text:00001E6D                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001E72                 jmp     loc_1FC6
.text:00001E77 ; ---------------------------------------------------------------------------
.text:00001E77
.text:00001E77 loc_1E77:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+77Dj
.text:00001E77                 mov     edx, [ebp+this]
.text:00001E7A                 mov     ecx, [edx+70h]  ; this
.text:00001E7D                 call    ?AlignToByte@CCoder@NDecoder@NDeflate@NCompress@@QAEXXZ ; NCompress::NDeflate::NDecoder::CCoder::AlignToByte(void)
.text:00001E82                 mov     eax, [ebp+this]
.text:00001E85                 mov     ecx, [eax+70h]
.text:00001E88                 push    ecx             ; struct NCompress::NDeflate::NDecoder::CCOMCoder *
.text:00001E89                 lea     ecx, [ebp+var_A0] ; this
.text:00001E8F                 call    ?ReadFooter1@CItem@NGz@NArchive@@QAEJPAVCCOMCoder@NDecoder@NDeflate@NCompress@@@Z ; NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)
.text:00001E94                 mov     [ebp+var_18C], eax
.text:00001E9A                 mov     edx, [ebp+var_18C]
.text:00001EA0                 mov     [ebp+var_70], edx
.text:00001EA3                 mov     eax, [ebp+this]
.text:00001EA6                 mov     ecx, [eax+70h]  ; this
.text:00001EA9                 call    ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ ; NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(void)
.text:00001EAE                 mov     [ebp+var_194], eax
.text:00001EB4                 mov     [ebp+var_190], edx
.text:00001EBA                 mov     ecx, [ebp+var_194]
.text:00001EC0                 mov     [ebp+var_58], ecx
.text:00001EC3                 mov     edx, [ebp+var_190]
.text:00001EC9                 mov     [ebp+var_54], edx
.text:00001ECC                 cmp     [ebp+var_70], 0
.text:00001ED0                 jz      short loc_1F1F
.text:00001ED2                 cmp     [ebp+var_70], 1
.text:00001ED6                 jz      short loc_1F1F
.text:00001ED8                 mov     eax, [ebp+var_70]
.text:00001EDB                 mov     [ebp+var_EC], eax
.text:00001EE1                 mov     byte ptr [ebp+var_4], 6
.text:00001EE5                 lea     ecx, [ebp+var_A0] ; this
.text:00001EEB                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001EF0                 mov     byte ptr [ebp+var_4], 3
.text:00001EF4                 lea     ecx, [ebp+var_40]
.text:00001EF7                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001EFC                 mov     byte ptr [ebp+var_4], 1
.text:00001F00                 lea     ecx, [ebp+var_30]
.text:00001F03                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F08                 mov     byte ptr [ebp+var_4], 0
.text:00001F0C                 lea     ecx, [ebp+var_18]
.text:00001F0F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F14                 mov     eax, [ebp+var_EC]
.text:00001F1A                 jmp     loc_21C0
.text:00001F1F ; ---------------------------------------------------------------------------
.text:00001F1F
.text:00001F1F loc_1F1F:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7ECj
.text:00001F1F                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7F2j
.text:00001F1F                 cmp     [ebp+var_70], 0
.text:00001F23                 jz      short loc_1F60
.text:00001F25                 mov     ecx, [ebp+this]
.text:00001F28                 mov     ecx, [ecx+70h]  ; this
.text:00001F2B                 call    ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ ; NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)
.text:00001F30                 mov     [ebp+var_195], al
.text:00001F36                 movzx   edx, [ebp+var_195]
.text:00001F3D                 test    edx, edx
.text:00001F3F                 jz      short loc_1F4F
.text:00001F41                 mov     eax, [ebp+this]
.text:00001F44                 mov     byte ptr [eax+3Fh], 1
.text:00001F48                 mov     [ebp+var_70], 1
.text:00001F4F
.text:00001F4F loc_1F4F:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+85Bj
.text:00001F4F                 mov     byte ptr [ebp+var_4], 6
.text:00001F53                 lea     ecx, [ebp+var_A0] ; this
.text:00001F59                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001F5E                 jmp     short loc_1FC6
.text:00001F60 ; ---------------------------------------------------------------------------
.text:00001F60
.text:00001F60 loc_1F60:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+83Fj
.text:00001F60                 mov     ecx, [ebp+var_28] ; this
.text:00001F63                 call    ?GetCRC@COutStreamWithCRC@@QBEIXZ ; COutStreamWithCRC::GetCRC(void)
.text:00001F68                 mov     [ebp+var_19C], eax
.text:00001F6E                 mov     ecx, [ebp+var_98]
.text:00001F74                 cmp     ecx, [ebp+var_19C]
.text:00001F7A                 jnz     short loc_1F96
.text:00001F7C                 mov     edx, [ebp+var_60]
.text:00001F7F                 sub     edx, [ebp+var_AC]
.text:00001F85                 mov     eax, [ebp+var_5C]
.text:00001F88                 sbb     eax, [ebp+var_A8]
.text:00001F8E                 cmp     [ebp+var_94], edx
.text:00001F94                 jz      short loc_1FB2
.text:00001F96
.text:00001F96 loc_1F96:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+896j
.text:00001F96                 mov     [ebp+var_69], 1
.text:00001F9A                 mov     [ebp+var_70], 1
.text:00001FA1                 mov     byte ptr [ebp+var_4], 6
.text:00001FA5                 lea     ecx, [ebp+var_A0] ; this
.text:00001FAB                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001FB0                 jmp     short loc_1FC6
.text:00001FB2 ; ---------------------------------------------------------------------------
.text:00001FB2
.text:00001FB2 loc_1FB2:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8B0j
.text:00001FB2                 mov     byte ptr [ebp+var_4], 6
.text:00001FB6                 lea     ecx, [ebp+var_A0] ; this
.text:00001FBC                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00001FC1                 jmp     loc_1B01
.text:00001FC6 ; ---------------------------------------------------------------------------
.text:00001FC6
.text:00001FC6 loc_1FC6:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+574j
.text:00001FC6                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5BCj ...
.text:00001FC6                 jmp     short $LN51
.text:00001FC6 ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:00001FC6
.text:00001FC8
.text:00001FC8 ; =============== S U B R O U T I N E =======================================
.text:00001FC8
.text:00001FC8
.text:00001FC8 __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:00001FC8                                         ; DATA XREF: .xdata$x:000039E4o
.text:00001FC8                 mov     ecx, [ebp-0B4h]
.text:00001FCE                 mov     edx, [ecx]
.text:00001FD0                 mov     [ebp-0F0h], edx
.text:00001FD6                 mov     dword ptr [ebp-4], 5
.text:00001FDD                 mov     eax, offset $LN61
.text:00001FE2                 retn
.text:00001FE2 __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00001FE2
.text:00001FE3 ; ---------------------------------------------------------------------------
.text:00001FE3                 mov     eax, offset $LN51
.text:00001FE8                 retn
.text:00001FE9 ; ---------------------------------------------------------------------------
.text:00001FE9 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001FE9
.text:00001FE9 $LN51:                                  ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_1FC6j
.text:00001FE9                                         ; DATA XREF: .text:00001FE3o
.text:00001FE9                 mov     [ebp+var_4], 5
.text:00001FF0                 jmp     short loc_2021
.text:00001FF0 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001FF2
.text:00001FF2 ; =============== S U B R O U T I N E =======================================
.text:00001FF2
.text:00001FF2
.text:00001FF2 $LN61           proc near               ; DATA XREF: __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+15o
.text:00001FF2                 mov     byte ptr [ebp-4], 3
.text:00001FF6                 lea     ecx, [ebp-40h]
.text:00001FF9                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001FFE                 mov     byte ptr [ebp-4], 1
.text:00002002                 lea     ecx, [ebp-30h]
.text:00002005                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000200A                 mov     byte ptr [ebp-4], 0
.text:0000200E                 lea     ecx, [ebp-18h]
.text:00002011                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002016                 mov     eax, [ebp-0F0h]
.text:0000201C                 jmp     loc_21C0
.text:0000201C $LN61           endp
.text:0000201C
.text:00002021 ; ---------------------------------------------------------------------------
.text:00002021 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00002021
.text:00002021 loc_2021:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+90Cj
.text:00002021                 movzx   eax, [ebp+var_4D]
.text:00002025                 test    eax, eax
.text:00002027                 jnz     short loc_206B
.text:00002029                 mov     ecx, [ebp+this]
.text:0000202C                 mov     edx, [ebp+var_58]
.text:0000202F                 mov     [ecx+48h], edx
.text:00002032                 mov     eax, [ebp+var_54]
.text:00002035                 mov     [ecx+4Ch], eax
.text:00002038                 mov     ecx, [ebp+this]
.text:0000203B                 mov     edx, [ebp+var_60]
.text:0000203E                 mov     [ecx+50h], edx
.text:00002041                 mov     eax, [ebp+var_5C]
.text:00002044                 mov     [ecx+54h], eax
.text:00002047                 mov     ecx, [ebp+this]
.text:0000204A                 mov     edx, [ebp+var_68]
.text:0000204D                 mov     [ecx+58h], edx
.text:00002050                 mov     eax, [ebp+var_64]
.text:00002053                 mov     [ecx+5Ch], eax
.text:00002056                 mov     ecx, [ebp+this]
.text:00002059                 mov     byte ptr [ecx+40h], 1
.text:0000205D                 mov     edx, [ebp+this]
.text:00002060                 mov     byte ptr [edx+41h], 1
.text:00002064                 mov     eax, [ebp+this]
.text:00002067                 mov     byte ptr [eax+42h], 1
.text:0000206B
.text:0000206B loc_206B:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+943j
.text:0000206B                 lea     ecx, [ebp+var_30]
.text:0000206E                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00002073                 mov     [ebp+var_BC], 2
.text:0000207D                 mov     ecx, [ebp+this]
.text:00002080                 movzx   edx, byte ptr [ecx+3Ch]
.text:00002084                 test    edx, edx
.text:00002086                 jnz     short loc_2097
.text:00002088                 mov     [ebp+var_BC], 7
.text:00002092                 jmp     loc_2138
.text:00002097 ; ---------------------------------------------------------------------------
.text:00002097
.text:00002097 loc_2097:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9A2j
.text:00002097                 mov     eax, [ebp+this]
.text:0000209A                 movzx   ecx, byte ptr [eax+3Fh]
.text:0000209E                 test    ecx, ecx
.text:000020A0                 jz      short loc_20B1
.text:000020A2                 mov     [ebp+var_BC], 5
.text:000020AC                 jmp     loc_2138
.text:000020B1 ; ---------------------------------------------------------------------------
.text:000020B1
.text:000020B1 loc_20B1:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9BCj
.text:000020B1                 movzx   edx, [ebp+var_69]
.text:000020B5                 test    edx, edx
.text:000020B7                 jz      short loc_20C5
.text:000020B9                 mov     [ebp+var_BC], 3
.text:000020C3                 jmp     short loc_2138
.text:000020C5 ; ---------------------------------------------------------------------------
.text:000020C5
.text:000020C5 loc_20C5:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9D3j
.text:000020C5                 mov     eax, [ebp+this]
.text:000020C8                 movzx   ecx, byte ptr [eax+3Eh]
.text:000020CC                 test    ecx, ecx
.text:000020CE                 jz      short loc_20DC
.text:000020D0                 mov     [ebp+var_BC], 6
.text:000020DA                 jmp     short loc_2138
.text:000020DC ; ---------------------------------------------------------------------------
.text:000020DC
.text:000020DC loc_20DC:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9EAj
.text:000020DC                 cmp     [ebp+var_70], 1
.text:000020E0                 jnz     short loc_20EE
.text:000020E2                 mov     [ebp+var_BC], 2
.text:000020EC                 jmp     short loc_2138
.text:000020EE ; ---------------------------------------------------------------------------
.text:000020EE
.text:000020EE loc_20EE:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9FCj
.text:000020EE                 cmp     [ebp+var_70], 0
.text:000020F2                 jnz     short loc_2100
.text:000020F4                 mov     [ebp+var_BC], 0
.text:000020FE                 jmp     short loc_2138
.text:00002100 ; ---------------------------------------------------------------------------
.text:00002100
.text:00002100 loc_2100:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A0Ej
.text:00002100                 mov     edx, [ebp+var_70]
.text:00002103                 mov     [ebp+var_F4], edx
.text:00002109                 mov     byte ptr [ebp+var_4], 3
.text:0000210D                 lea     ecx, [ebp+var_40]
.text:00002110                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002115                 mov     byte ptr [ebp+var_4], 1
.text:00002119                 lea     ecx, [ebp+var_30]
.text:0000211C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002121                 mov     byte ptr [ebp+var_4], 0
.text:00002125                 lea     ecx, [ebp+var_18]
.text:00002128                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000212D                 mov     eax, [ebp+var_F4]
.text:00002133                 jmp     loc_21C0
.text:00002138 ; ---------------------------------------------------------------------------
.text:00002138
.text:00002138 loc_2138:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9AEj
.text:00002138                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9C8j ...
.text:00002138                 mov     esi, esp
.text:0000213A                 mov     eax, [ebp+var_BC]
.text:00002140                 push    eax
.text:00002141                 mov     ecx, [ebp+arg_10]
.text:00002144                 push    ecx
.text:00002145                 mov     edx, [ebp+arg_10]
.text:00002148                 mov     eax, [edx]
.text:0000214A                 mov     ecx, [eax+1Ch]
.text:0000214D                 call    ecx
.text:0000214F                 cmp     esi, esp
.text:00002151                 call    __RTC_CheckEsp
.text:00002156                 mov     [ebp+var_1A0], eax
.text:0000215C                 mov     edx, [ebp+var_1A0]
.text:00002162                 mov     [ebp+var_F8], edx
.text:00002168                 mov     byte ptr [ebp+var_4], 3
.text:0000216C                 lea     ecx, [ebp+var_40]
.text:0000216F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002174                 mov     byte ptr [ebp+var_4], 1
.text:00002178                 lea     ecx, [ebp+var_30]
.text:0000217B                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002180                 mov     byte ptr [ebp+var_4], 0
.text:00002184                 lea     ecx, [ebp+var_18]
.text:00002187                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000218C                 mov     eax, [ebp+var_F8]
.text:00002192                 jmp     short loc_21C0
.text:00002192 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00002194
.text:00002194 ; =============== S U B R O U T I N E =======================================
.text:00002194
.text:00002194
.text:00002194 __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text:00002194                                         ; DATA XREF: .xdata$x:000039D4o
.text:00002194                 mov     dword ptr [ebp-0FCh], 8007000Eh
.text:0000219E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000021A5                 mov     eax, offset $LN63
.text:000021AA                 retn
.text:000021AA __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text:000021AA
.text:000021AB ; ---------------------------------------------------------------------------
.text:000021AB                 mov     eax, offset __tryend$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.text:000021B0                 retn
.text:000021B1 ; ---------------------------------------------------------------------------
.text:000021B1
.text:000021B1 __tryend$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
.text:000021B1                                         ; DATA XREF: .text:000021ABo
.text:000021B1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000021B8                 jmp     short loc_21C0
.text:000021BA ; ---------------------------------------------------------------------------
.text:000021BA
.text:000021BA $LN63:                                  ; DATA XREF: __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+11o
.text:000021BA                 mov     eax, [ebp-0FCh]
.text:000021C0 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000021C0
.text:000021C0 loc_21C0:                               ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+50j
.text:000021C0                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6Ej ...
.text:000021C0                 push    edx
.text:000021C1                 mov     ecx, ebp
.text:000021C3                 push    eax
.text:000021C4                 lea     edx, $LN77
.text:000021CA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000021CF                 pop     eax
.text:000021D0                 pop     edx
.text:000021D1                 mov     ecx, [ebp+var_C]
.text:000021D4                 mov     large fs:0, ecx
.text:000021DB                 pop     ecx
.text:000021DC                 pop     edi
.text:000021DD                 pop     esi
.text:000021DE                 pop     ebx
.text:000021DF                 add     esp, 1A0h
.text:000021E5                 cmp     ebp, esp
.text:000021E7                 call    __RTC_CheckEsp
.text:000021EC                 mov     esp, ebp
.text:000021EE                 pop     ebp
.text:000021EF                 retn    14h
.text:000021EF ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000021EF ; ---------------------------------------------------------------------------
.text:000021F2                 align 4
.text:000021F4 $LN77           dd 5                    ; DATA XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+AE0o
.text:000021F8                 dd offset $LN76
.text:000021FC $LN76           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000021F8o
.text:00002204                 dd offset $LN70         ; "realOutStream"
.text:00002208                 dd 0FFFFFFD0h, 4
.text:00002210                 dd offset $LN71         ; "outStream"
.text:00002214                 dd 0FFFFFFC0h, 4
.text:0000221C                 dd offset $LN72         ; "progress"
.text:00002220                 dd 0FFFFFF60h, 28h
.text:00002228                 dd offset $LN73         ; "item"
.text:0000222C                 dd 0FFFFFF4Ch, 4
.text:00002234                 dd offset $LN74
.text:00002238 $LN74           db 65h, 0               ; DATA XREF: .text:00002234o
.text:0000223A $LN73           db 'item',0             ; DATA XREF: .text:00002228o
.text:0000223F $LN72           db 'progress',0         ; DATA XREF: .text:0000221Co
.text:00002248 $LN71           db 'outStream',0        ; DATA XREF: .text:00002210o
.text:00002252 $LN70           db 'realOutStream',0    ; DATA XREF: .text:00002204o
.text:00002260                 db 4 dup(0CCh)
.text:00002264
.text:00002264 ; =============== S U B R O U T I N E =======================================
.text:00002264
.text:00002264 ; Attributes: bp-based frame
.text:00002264
.text:00002264 ; __int32 __stdcall NArchive::NGz::CHandler::GetFileTimeType(NArchive::NGz::CHandler *this, unsigned int *)
.text:00002264                 public ?GetFileTimeType@CHandler@NGz@NArchive@@UAGJPAI@Z
.text:00002264 ?GetFileTimeType@CHandler@NGz@NArchive@@UAGJPAI@Z proc near
.text:00002264                                         ; DATA XREF: .rdata:00004FB8o
.text:00002264
.text:00002264 this            = dword ptr  8
.text:00002264 arg_4           = dword ptr  0Ch
.text:00002264
.text:00002264                 push    ebp
.text:00002265                 mov     ebp, esp
.text:00002267                 mov     eax, [ebp+arg_4]
.text:0000226A                 mov     dword ptr [eax], 1
.text:00002270                 xor     eax, eax
.text:00002272                 pop     ebp
.text:00002273                 retn    8
.text:00002273 ?GetFileTimeType@CHandler@NGz@NArchive@@UAGJPAI@Z endp
.text:00002273
.text:00002273 ; ---------------------------------------------------------------------------
.text:00002276                 db 0Eh dup(0CCh)
.text:00002284
.text:00002284 ; =============== S U B R O U T I N E =======================================
.text:00002284
.text:00002284 ; Attributes: bp-based frame
.text:00002284
.text:00002284 ; __int32 __cdecl NArchive::NGz::CHandler::UpdateItems(NArchive::NGz::CHandler *this, struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
.text:00002284                 public ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002284 ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text:00002284                                         ; DATA XREF: .rdata:00004FB4o
.text:00002284
.text:00002284 var_1FC         = dword ptr -1FCh
.text:00002284 var_1F8         = dword ptr -1F8h
.text:00002284 var_1F4         = dword ptr -1F4h
.text:00002284 var_1F0         = dword ptr -1F0h
.text:00002284 var_1EC         = dword ptr -1ECh
.text:00002284 var_1E8         = dword ptr -1E8h
.text:00002284 var_1E1         = byte ptr -1E1h
.text:00002284 var_1E0         = dword ptr -1E0h
.text:00002284 var_1DC         = dword ptr -1DCh
.text:00002284 var_1D8         = dword ptr -1D8h
.text:00002284 var_1D4         = dword ptr -1D4h
.text:00002284 var_1D0         = dword ptr -1D0h
.text:00002284 var_1CC         = dword ptr -1CCh
.text:00002284 var_1C8         = dword ptr -1C8h
.text:00002284 var_1C4         = dword ptr -1C4h
.text:00002284 var_1C0         = dword ptr -1C0h
.text:00002284 var_1B9         = byte ptr -1B9h
.text:00002284 var_1B8         = dword ptr -1B8h
.text:00002284 var_1B4         = dword ptr -1B4h
.text:00002284 var_1B0         = dword ptr -1B0h
.text:00002284 var_1A9         = byte ptr -1A9h
.text:00002284 var_1A8         = dword ptr -1A8h
.text:00002284 var_1A4         = dword ptr -1A4h
.text:00002284 var_19D         = byte ptr -19Dh
.text:00002284 var_19C         = dword ptr -19Ch
.text:00002284 var_198         = dword ptr -198h
.text:00002284 var_194         = dword ptr -194h
.text:00002284 var_190         = dword ptr -190h
.text:00002284 var_18C         = dword ptr -18Ch
.text:00002284 var_188         = dword ptr -188h
.text:00002284 var_184         = dword ptr -184h
.text:00002284 var_17D         = byte ptr -17Dh
.text:00002284 var_17C         = dword ptr -17Ch
.text:00002284 var_178         = dword ptr -178h
.text:00002284 var_170         = dword ptr -170h
.text:00002284 var_16C         = dword ptr -16Ch
.text:00002284 var_168         = dword ptr -168h
.text:00002284 var_164         = dword ptr -164h
.text:00002284 var_160         = dword ptr -160h
.text:00002284 var_15C         = dword ptr -15Ch
.text:00002284 var_158         = dword ptr -158h
.text:00002284 var_154         = dword ptr -154h
.text:00002284 var_150         = dword ptr -150h
.text:00002284 var_14C         = dword ptr -14Ch
.text:00002284 var_148         = dword ptr -148h
.text:00002284 var_144         = dword ptr -144h
.text:00002284 var_140         = dword ptr -140h
.text:00002284 var_13C         = byte ptr -13Ch
.text:00002284 var_130         = dword ptr -130h
.text:00002284 var_12C         = dword ptr -12Ch
.text:00002284 var_128         = dword ptr -128h
.text:00002284 var_124         = dword ptr -124h
.text:00002284 var_120         = dword ptr -120h
.text:00002284 var_11C         = dword ptr -11Ch
.text:00002284 var_118         = dword ptr -118h
.text:00002284 var_110         = byte ptr -110h
.text:00002284 var_104         = byte ptr -104h
.text:00002284 var_FC          = dword ptr -0FCh
.text:00002284 var_F8          = dword ptr -0F8h
.text:00002284 var_F0          = word ptr -0F0h
.text:00002284 var_E8          = dword ptr -0E8h
.text:00002284 var_E4          = dword ptr -0E4h
.text:00002284 var_DC          = dword ptr -0DCh
.text:00002284 var_D8          = dword ptr -0D8h
.text:00002284 var_D4          = dword ptr -0D4h
.text:00002284 var_CC          = word ptr -0CCh
.text:00002284 var_C4          = word ptr -0C4h
.text:00002284 var_B8          = dword ptr -0B8h
.text:00002284 var_B0          = byte ptr -0B0h
.text:00002284 var_A0          = dword ptr -0A0h
.text:00002284 var_98          = word ptr -98h
.text:00002284 var_90          = dword ptr -90h
.text:00002284 var_84          = dword ptr -84h
.text:00002284 var_7C          = word ptr -7Ch
.text:00002284 var_74          = byte ptr -74h
.text:00002284 var_64          = byte ptr -64h
.text:00002284 var_62          = byte ptr -62h
.text:00002284 var_60          = _FILETIME ptr -60h
.text:00002284 var_54          = byte ptr -54h
.text:00002284 var_38          = dword ptr -38h
.text:00002284 var_30          = dword ptr -30h
.text:00002284 var_24          = dword ptr -24h
.text:00002284 var_18          = dword ptr -18h
.text:00002284 var_10          = dword ptr -10h
.text:00002284 var_C           = dword ptr -0Ch
.text:00002284 var_4           = dword ptr -4
.text:00002284 this            = dword ptr  8
.text:00002284 arg_4           = dword ptr  0Ch
.text:00002284 arg_8           = dword ptr  10h
.text:00002284 arg_C           = dword ptr  14h
.text:00002284
.text:00002284 ; FUNCTION CHUNK AT .text:00002BE4 SIZE 00000032 BYTES
.text:00002284
.text:00002284                 push    ebp
.text:00002285                 mov     ebp, esp
.text:00002287                 push    0FFFFFFFFh
.text:00002289                 push    offset __ehhandler$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:0000228E                 mov     eax, large fs:0
.text:00002294                 push    eax
.text:00002295                 push    ecx
.text:00002296                 sub     esp, 1ECh
.text:0000229C                 push    ebx
.text:0000229D                 push    esi
.text:0000229E                 push    edi
.text:0000229F                 lea     edi, [ebp+var_1FC]
.text:000022A5                 mov     ecx, 7Bh ; '{'
.text:000022AA                 mov     eax, 0CCCCCCCCh
.text:000022AF                 rep stosd
.text:000022B1                 mov     eax, dword ptr ds:___security_cookie
.text:000022B6                 xor     eax, ebp
.text:000022B8                 push    eax             ; unsigned int *
.text:000022B9                 lea     eax, [ebp+var_C]
.text:000022BC                 mov     large fs:0, eax
.text:000022C2                 mov     [ebp+var_10], esp
.text:000022C5                 mov     [ebp+var_4], 0
.text:000022CC                 cmp     [ebp+arg_8], 1
.text:000022D0                 jz      short loc_22DC
.text:000022D2                 mov     eax, 80070057h
.text:000022D7                 jmp     loc_2BE4
.text:000022DC ; ---------------------------------------------------------------------------
.text:000022DC
.text:000022DC loc_22DC:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4Cj
.text:000022DC                 cmp     [ebp+arg_C], 0
.text:000022E0                 jnz     short loc_22EC
.text:000022E2                 mov     eax, 80004005h
.text:000022E7                 jmp     loc_2BE4
.text:000022EC ; ---------------------------------------------------------------------------
.text:000022EC
.text:000022EC loc_22EC:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5Cj
.text:000022EC                 mov     esi, esp
.text:000022EE                 lea     eax, [ebp+var_30]
.text:000022F1                 push    eax
.text:000022F2                 lea     ecx, [ebp+var_24]
.text:000022F5                 push    ecx
.text:000022F6                 lea     edx, [ebp+var_18]
.text:000022F9                 push    edx
.text:000022FA                 push    0
.text:000022FC                 mov     eax, [ebp+arg_C]
.text:000022FF                 push    eax
.text:00002300                 mov     ecx, [ebp+arg_C]
.text:00002303                 mov     edx, [ecx]
.text:00002305                 mov     eax, [edx+14h]
.text:00002308                 call    eax
.text:0000230A                 cmp     esi, esp
.text:0000230C                 call    __RTC_CheckEsp
.text:00002311                 mov     [ebp+var_178], eax
.text:00002317                 mov     ecx, [ebp+var_178]
.text:0000231D                 mov     [ebp+var_38], ecx
.text:00002320                 cmp     [ebp+var_38], 0
.text:00002324                 jz      short loc_232E
.text:00002326                 mov     eax, [ebp+var_38]
.text:00002329                 jmp     loc_2BE4
.text:0000232E ; ---------------------------------------------------------------------------
.text:0000232E
.text:0000232E loc_232E:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A0j
.text:0000232E                 lea     ecx, [ebp+var_64] ; this
.text:00002331                 call    ??0CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::CItem(void)
.text:00002336                 mov     [ebp+var_17C], eax
.text:0000233C                 mov     byte ptr [ebp+var_4], 1
.text:00002340                 mov     edx, [ebp+var_24]
.text:00002343                 push    edx             ; int
.text:00002344                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00002349                 mov     [ebp+var_17D], al
.text:0000234F                 movzx   eax, [ebp+var_17D]
.text:00002356                 test    eax, eax
.text:00002358                 jnz     short loc_236E
.text:0000235A                 mov     ecx, [ebp+this]
.text:0000235D                 add     ecx, 0Ch
.text:00002360                 push    ecx             ; struct NArchive::NGz::CItem *
.text:00002361                 lea     ecx, [ebp+var_64] ; this
.text:00002364                 call    ?CopyMetaPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z ; NArchive::NGz::CItem::CopyMetaPropsFrom(NArchive::NGz::CItem const &)
.text:00002369                 jmp     loc_26DA
.text:0000236E ; ---------------------------------------------------------------------------
.text:0000236E
.text:0000236E loc_236E:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+D4j
.text:0000236E                 mov     [ebp+var_62], 0
.text:00002372                 lea     ecx, [ebp+var_7C] ; this
.text:00002375                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000237A                 mov     [ebp+var_184], eax
.text:00002380                 mov     byte ptr [ebp+var_4], 2
.text:00002384                 mov     esi, esp
.text:00002386                 lea     edx, [ebp+var_7C]
.text:00002389                 push    edx
.text:0000238A                 push    0Ch
.text:0000238C                 push    0
.text:0000238E                 mov     eax, [ebp+arg_C]
.text:00002391                 push    eax
.text:00002392                 mov     ecx, [ebp+arg_C]
.text:00002395                 mov     edx, [ecx]
.text:00002397                 mov     eax, [edx+18h]
.text:0000239A                 call    eax
.text:0000239C                 cmp     esi, esp
.text:0000239E                 call    __RTC_CheckEsp
.text:000023A3                 mov     [ebp+var_188], eax
.text:000023A9                 mov     ecx, [ebp+var_188]
.text:000023AF                 mov     [ebp+var_84], ecx
.text:000023B5                 cmp     [ebp+var_84], 0
.text:000023BC                 jz      short loc_23ED
.text:000023BE                 mov     edx, [ebp+var_84]
.text:000023C4                 mov     [ebp+var_128], edx
.text:000023CA                 mov     byte ptr [ebp+var_4], 1
.text:000023CE                 lea     ecx, [ebp+var_7C] ; this
.text:000023D1                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000023D6                 mov     byte ptr [ebp+var_4], 0
.text:000023DA                 lea     ecx, [ebp+var_64] ; this
.text:000023DD                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000023E2                 mov     eax, [ebp+var_128]
.text:000023E8                 jmp     loc_2BE4
.text:000023ED ; ---------------------------------------------------------------------------
.text:000023ED
.text:000023ED loc_23ED:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+138j
.text:000023ED                 movzx   eax, [ebp+var_7C]
.text:000023F1                 cmp     eax, 40h ; '@'
.text:000023F4                 jnz     short loc_2405
.text:000023F6                 lea     ecx, [ebp+var_60]
.text:000023F9                 push    ecx             ; struct _FILETIME *
.text:000023FA                 lea     edx, [ebp+var_74]
.text:000023FD                 push    edx             ; this
.text:000023FE                 call    ?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)
.text:00002403                 jmp     short loc_2443
.text:00002405 ; ---------------------------------------------------------------------------
.text:00002405
.text:00002405 loc_2405:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+170j
.text:00002405                 movzx   eax, [ebp+var_7C]
.text:00002409                 test    eax, eax
.text:0000240B                 jnz     short loc_2416
.text:0000240D                 mov     [ebp+var_60.dwLowDateTime], 0
.text:00002414                 jmp     short loc_2443
.text:00002416 ; ---------------------------------------------------------------------------
.text:00002416
.text:00002416 loc_2416:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+187j
.text:00002416                 mov     [ebp+var_12C], 80070057h
.text:00002420                 mov     byte ptr [ebp+var_4], 1
.text:00002424                 lea     ecx, [ebp+var_7C] ; this
.text:00002427                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000242C                 mov     byte ptr [ebp+var_4], 0
.text:00002430                 lea     ecx, [ebp+var_64] ; this
.text:00002433                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002438                 mov     eax, [ebp+var_12C]
.text:0000243E                 jmp     loc_2BE4
.text:00002443 ; ---------------------------------------------------------------------------
.text:00002443
.text:00002443 loc_2443:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+17Fj
.text:00002443                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+190j
.text:00002443                 mov     byte ptr [ebp+var_4], 1
.text:00002447                 lea     ecx, [ebp+var_7C] ; this
.text:0000244A                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000244F                 lea     ecx, [ebp+var_98] ; this
.text:00002455                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000245A                 mov     [ebp+var_18C], eax
.text:00002460                 mov     byte ptr [ebp+var_4], 3
.text:00002464                 mov     esi, esp
.text:00002466                 lea     ecx, [ebp+var_98]
.text:0000246C                 push    ecx
.text:0000246D                 push    3
.text:0000246F                 push    0
.text:00002471                 mov     edx, [ebp+arg_C]
.text:00002474                 push    edx
.text:00002475                 mov     eax, [ebp+arg_C]
.text:00002478                 mov     ecx, [eax]
.text:0000247A                 mov     edx, [ecx+18h]
.text:0000247D                 call    edx
.text:0000247F                 cmp     esi, esp
.text:00002481                 call    __RTC_CheckEsp
.text:00002486                 mov     [ebp+var_190], eax
.text:0000248C                 mov     eax, [ebp+var_190]
.text:00002492                 mov     [ebp+var_A0], eax
.text:00002498                 cmp     [ebp+var_A0], 0
.text:0000249F                 jz      short loc_24D3
.text:000024A1                 mov     ecx, [ebp+var_A0]
.text:000024A7                 mov     [ebp+var_130], ecx
.text:000024AD                 mov     byte ptr [ebp+var_4], 1
.text:000024B1                 lea     ecx, [ebp+var_98] ; this
.text:000024B7                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000024BC                 mov     byte ptr [ebp+var_4], 0
.text:000024C0                 lea     ecx, [ebp+var_64] ; this
.text:000024C3                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000024C8                 mov     eax, [ebp+var_130]
.text:000024CE                 jmp     loc_2BE4
.text:000024D3 ; ---------------------------------------------------------------------------
.text:000024D3
.text:000024D3 loc_24D3:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+21Bj
.text:000024D3                 movzx   edx, [ebp+var_98]
.text:000024DA                 cmp     edx, 8
.text:000024DD                 jnz     loc_25AB
.text:000024E3                 mov     eax, [ebp+var_90]
.text:000024E9                 push    eax
.text:000024EA                 lea     ecx, [ebp+var_B0]
.text:000024F0                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000024F5                 mov     [ebp+var_194], eax
.text:000024FB                 mov     byte ptr [ebp+var_4], 4
.text:000024FF                 lea     ecx, [ebp+var_B0] ; this
.text:00002505                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:0000250A                 mov     [ebp+var_B8], eax
.text:00002510                 cmp     [ebp+var_B8], 0
.text:00002517                 jl      short loc_252E
.text:00002519                 mov     ecx, [ebp+var_B8]
.text:0000251F                 add     ecx, 1
.text:00002522                 push    ecx             ; unsigned int
.text:00002523                 lea     ecx, [ebp+var_B0] ; this
.text:00002529                 call    ?DeleteFrontal@UString@@QAEXI@Z ; UString::DeleteFrontal(uint)
.text:0000252E
.text:0000252E loc_252E:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+293j
.text:0000252E                 push    0
.text:00002530                 lea     edx, [ebp+var_B0]
.text:00002536                 push    edx
.text:00002537                 lea     eax, [ebp+var_13C]
.text:0000253D                 push    eax             ; struct ICompressProgressInfo *
.text:0000253E                 call    ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte(UString const &,uint)
.text:00002543                 mov     [ebp+var_198], eax
.text:00002549                 mov     ecx, [ebp+var_198]
.text:0000254F                 mov     [ebp+var_19C], ecx
.text:00002555                 mov     byte ptr [ebp+var_4], 5
.text:00002559                 mov     edx, [ebp+var_19C]
.text:0000255F                 push    edx
.text:00002560                 lea     ecx, [ebp+var_54]
.text:00002563                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00002568                 mov     byte ptr [ebp+var_4], 4
.text:0000256C                 lea     ecx, [ebp+var_13C] ; this
.text:00002572                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002577                 lea     ecx, [ebp+var_54] ; this
.text:0000257A                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:0000257F                 mov     [ebp+var_19D], al
.text:00002585                 movzx   eax, [ebp+var_19D]
.text:0000258C                 test    eax, eax
.text:0000258E                 jnz     short loc_259A
.text:00002590                 movzx   ecx, [ebp+var_64]
.text:00002594                 or      ecx, 8
.text:00002597                 mov     [ebp+var_64], cl
.text:0000259A
.text:0000259A loc_259A:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+30Aj
.text:0000259A                 mov     byte ptr [ebp+var_4], 3
.text:0000259E                 lea     ecx, [ebp+var_B0] ; this
.text:000025A4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000025A9                 jmp     short loc_25E6
.text:000025AB ; ---------------------------------------------------------------------------
.text:000025AB
.text:000025AB loc_25AB:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+259j
.text:000025AB                 movzx   edx, [ebp+var_98]
.text:000025B2                 test    edx, edx
.text:000025B4                 jz      short loc_25E6
.text:000025B6                 mov     [ebp+var_140], 80070057h
.text:000025C0                 mov     byte ptr [ebp+var_4], 1
.text:000025C4                 lea     ecx, [ebp+var_98] ; this
.text:000025CA                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000025CF                 mov     byte ptr [ebp+var_4], 0
.text:000025D3                 lea     ecx, [ebp+var_64] ; this
.text:000025D6                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000025DB                 mov     eax, [ebp+var_140]
.text:000025E1                 jmp     loc_2BE4
.text:000025E6 ; ---------------------------------------------------------------------------
.text:000025E6
.text:000025E6 loc_25E6:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+325j
.text:000025E6                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+330j
.text:000025E6                 mov     byte ptr [ebp+var_4], 1
.text:000025EA                 lea     ecx, [ebp+var_98] ; this
.text:000025F0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000025F5                 lea     ecx, [ebp+var_CC] ; this
.text:000025FB                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002600                 mov     [ebp+var_1A4], eax
.text:00002606                 mov     byte ptr [ebp+var_4], 6
.text:0000260A                 mov     esi, esp
.text:0000260C                 lea     eax, [ebp+var_CC]
.text:00002612                 push    eax
.text:00002613                 push    6
.text:00002615                 push    0
.text:00002617                 mov     ecx, [ebp+arg_C]
.text:0000261A                 push    ecx
.text:0000261B                 mov     edx, [ebp+arg_C]
.text:0000261E                 mov     eax, [edx]
.text:00002620                 mov     ecx, [eax+18h]
.text:00002623                 call    ecx
.text:00002625                 cmp     esi, esp
.text:00002627                 call    __RTC_CheckEsp
.text:0000262C                 mov     [ebp+var_1A8], eax
.text:00002632                 mov     edx, [ebp+var_1A8]
.text:00002638                 mov     [ebp+var_D4], edx
.text:0000263E                 cmp     [ebp+var_D4], 0
.text:00002645                 jz      short loc_2679
.text:00002647                 mov     eax, [ebp+var_D4]
.text:0000264D                 mov     [ebp+var_144], eax
.text:00002653                 mov     byte ptr [ebp+var_4], 1
.text:00002657                 lea     ecx, [ebp+var_CC] ; this
.text:0000265D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002662                 mov     byte ptr [ebp+var_4], 0
.text:00002666                 lea     ecx, [ebp+var_64] ; this
.text:00002669                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:0000266E                 mov     eax, [ebp+var_144]
.text:00002674                 jmp     loc_2BE4
.text:00002679 ; ---------------------------------------------------------------------------
.text:00002679
.text:00002679 loc_2679:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3C1j
.text:00002679                 movzx   ecx, [ebp+var_CC]
.text:00002680                 test    ecx, ecx
.text:00002682                 jz      short loc_26CB
.text:00002684                 movzx   edx, [ebp+var_CC]
.text:0000268B                 cmp     edx, 0Bh
.text:0000268E                 jnz     short loc_269B
.text:00002690                 movsx   eax, [ebp+var_C4]
.text:00002697                 test    eax, eax
.text:00002699                 jz      short loc_26CB
.text:0000269B
.text:0000269B loc_269B:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+40Aj
.text:0000269B                 mov     [ebp+var_148], 80070057h
.text:000026A5                 mov     byte ptr [ebp+var_4], 1
.text:000026A9                 lea     ecx, [ebp+var_CC] ; this
.text:000026AF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000026B4                 mov     byte ptr [ebp+var_4], 0
.text:000026B8                 lea     ecx, [ebp+var_64] ; this
.text:000026BB                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000026C0                 mov     eax, [ebp+var_148]
.text:000026C6                 jmp     loc_2BE4
.text:000026CB ; ---------------------------------------------------------------------------
.text:000026CB
.text:000026CB loc_26CB:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3FEj
.text:000026CB                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+415j
.text:000026CB                 mov     byte ptr [ebp+var_4], 1
.text:000026CF                 lea     ecx, [ebp+var_CC] ; this
.text:000026D5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000026DA
.text:000026DA loc_26DA:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E5j
.text:000026DA                 mov     ecx, [ebp+var_18]
.text:000026DD                 push    ecx             ; int
.text:000026DE                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:000026E3                 mov     [ebp+var_1A9], al
.text:000026E9                 movzx   edx, [ebp+var_1A9]
.text:000026F0                 test    edx, edx
.text:000026F2                 jz      loc_282E
.text:000026F8                 lea     ecx, [ebp+var_F0] ; this
.text:000026FE                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002703                 mov     [ebp+var_1B0], eax
.text:00002709                 mov     byte ptr [ebp+var_4], 7
.text:0000270D                 mov     esi, esp
.text:0000270F                 lea     eax, [ebp+var_F0]
.text:00002715                 push    eax
.text:00002716                 push    7
.text:00002718                 push    0
.text:0000271A                 mov     ecx, [ebp+arg_C]
.text:0000271D                 push    ecx
.text:0000271E                 mov     edx, [ebp+arg_C]
.text:00002721                 mov     eax, [edx]
.text:00002723                 mov     ecx, [eax+18h]
.text:00002726                 call    ecx
.text:00002728                 cmp     esi, esp
.text:0000272A                 call    __RTC_CheckEsp
.text:0000272F                 mov     [ebp+var_1B4], eax
.text:00002735                 mov     edx, [ebp+var_1B4]
.text:0000273B                 mov     [ebp+var_F8], edx
.text:00002741                 cmp     [ebp+var_F8], 0
.text:00002748                 jz      short loc_277C
.text:0000274A                 mov     eax, [ebp+var_F8]
.text:00002750                 mov     [ebp+var_14C], eax
.text:00002756                 mov     byte ptr [ebp+var_4], 1
.text:0000275A                 lea     ecx, [ebp+var_F0] ; this
.text:00002760                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002765                 mov     byte ptr [ebp+var_4], 0
.text:00002769                 lea     ecx, [ebp+var_64] ; this
.text:0000276C                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002771                 mov     eax, [ebp+var_14C]
.text:00002777                 jmp     loc_2BE4
.text:0000277C ; ---------------------------------------------------------------------------
.text:0000277C
.text:0000277C loc_277C:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4C4j
.text:0000277C                 movzx   ecx, [ebp+var_F0]
.text:00002783                 cmp     ecx, 15h
.text:00002786                 jz      short loc_27B8
.text:00002788                 mov     [ebp+var_150], 80070057h
.text:00002792                 mov     byte ptr [ebp+var_4], 1
.text:00002796                 lea     ecx, [ebp+var_F0] ; this
.text:0000279C                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000027A1                 mov     byte ptr [ebp+var_4], 0
.text:000027A5                 lea     ecx, [ebp+var_64] ; this
.text:000027A8                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000027AD                 mov     eax, [ebp+var_150]
.text:000027B3                 jmp     loc_2BE4
.text:000027B8 ; ---------------------------------------------------------------------------
.text:000027B8
.text:000027B8 loc_27B8:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+502j
.text:000027B8                 mov     edx, [ebp+var_E8]
.text:000027BE                 mov     [ebp+var_DC], edx
.text:000027C4                 mov     eax, [ebp+var_E4]
.text:000027CA                 mov     [ebp+var_D8], eax
.text:000027D0                 mov     byte ptr [ebp+var_4], 1
.text:000027D4                 lea     ecx, [ebp+var_F0] ; this
.text:000027DA                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000027DF                 mov     ecx, [ebp+arg_C]
.text:000027E2                 push    ecx             ; struct IProgress *
.text:000027E3                 mov     edx, [ebp+this]
.text:000027E6                 add     edx, 6Ch ; 'l'
.text:000027E9                 push    edx             ; NArchive::CSingleMethodProps *
.text:000027EA                 lea     eax, [ebp+var_64]
.text:000027ED                 push    eax             ; NArchive::NGz::CItem *
.text:000027EE                 mov     ecx, [ebp+var_D8]
.text:000027F4                 push    ecx             ; int
.text:000027F5                 mov     edx, [ebp+var_DC]
.text:000027FB                 push    edx             ; int
.text:000027FC                 mov     eax, [ebp+arg_4]
.text:000027FF                 push    eax             ; struct ISequentialOutStream *
.text:00002800                 call    ?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)
.text:00002805                 mov     [ebp+var_1B8], eax
.text:0000280B                 mov     ecx, [ebp+var_1B8]
.text:00002811                 mov     [ebp+var_154], ecx
.text:00002817                 mov     byte ptr [ebp+var_4], 0
.text:0000281B                 lea     ecx, [ebp+var_64] ; this
.text:0000281E                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002823                 mov     eax, [ebp+var_154]
.text:00002829                 jmp     loc_2BE4
.text:0000282E ; ---------------------------------------------------------------------------
.text:0000282E
.text:0000282E loc_282E:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+46Ej
.text:0000282E                 cmp     [ebp+var_30], 0
.text:00002832                 jz      short loc_2855
.text:00002834                 mov     [ebp+var_158], 80070057h
.text:0000283E                 mov     byte ptr [ebp+var_4], 0
.text:00002842                 lea     ecx, [ebp+var_64] ; this
.text:00002845                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:0000284A                 mov     eax, [ebp+var_158]
.text:00002850                 jmp     loc_2BE4
.text:00002855 ; ---------------------------------------------------------------------------
.text:00002855
.text:00002855 loc_2855:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5AEj
.text:00002855                 mov     ecx, [ebp+this]
.text:00002858                 add     ecx, 60h ; '`'
.text:0000285B                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:00002860                 mov     [ebp+var_1B9], al
.text:00002866                 movzx   edx, [ebp+var_1B9]
.text:0000286D                 test    edx, edx
.text:0000286F                 jz      short loc_2892
.text:00002871                 mov     [ebp+var_15C], 80004001h
.text:0000287B                 mov     byte ptr [ebp+var_4], 0
.text:0000287F                 lea     ecx, [ebp+var_64] ; this
.text:00002882                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002887                 mov     eax, [ebp+var_15C]
.text:0000288D                 jmp     loc_2BE4
.text:00002892 ; ---------------------------------------------------------------------------
.text:00002892
.text:00002892 loc_2892:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5EBj
.text:00002892                 push    38h ; '8'       ; unsigned int
.text:00002894                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002899                 add     esp, 4
.text:0000289C                 mov     [ebp+var_1C0], eax
.text:000028A2                 mov     eax, [ebp+var_1C0]
.text:000028A8                 mov     [ebp+var_164], eax
.text:000028AE                 mov     byte ptr [ebp+var_4], 8
.text:000028B2                 cmp     [ebp+var_164], 0
.text:000028B9                 jz      short loc_28DA
.text:000028BB                 mov     ecx, [ebp+var_164]
.text:000028C1                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:000028C6                 mov     [ebp+var_1C4], eax
.text:000028CC                 mov     ecx, [ebp+var_1C4]
.text:000028D2                 mov     [ebp+var_1C8], ecx
.text:000028D8                 jmp     short loc_28E4
.text:000028DA ; ---------------------------------------------------------------------------
.text:000028DA
.text:000028DA loc_28DA:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+635j
.text:000028DA                 mov     [ebp+var_1C8], 0
.text:000028E4
.text:000028E4 loc_28E4:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+654j
.text:000028E4                 mov     edx, [ebp+var_1C8]
.text:000028EA                 mov     [ebp+var_160], edx
.text:000028F0                 mov     byte ptr [ebp+var_4], 1
.text:000028F4                 mov     eax, [ebp+var_160]
.text:000028FA                 mov     [ebp+var_FC], eax
.text:00002900                 mov     ecx, [ebp+var_FC]
.text:00002906                 push    ecx
.text:00002907                 lea     ecx, [ebp+var_104]
.text:0000290D                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00002912                 mov     byte ptr [ebp+var_4], 9
.text:00002916                 push    offset unk_1    ; bool
.text:00002918                 mov     edx, [ebp+arg_C]
.text:0000291B                 push    edx             ; struct IProgress *
.text:0000291C                 mov     ecx, [ebp+var_FC] ; this
.text:00002922                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00002927                 lea     ecx, [ebp+var_110]
.text:0000292D                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002932                 mov     [ebp+var_1CC], eax
.text:00002938                 mov     byte ptr [ebp+var_4], 0Ah
.text:0000293C                 lea     ecx, [ebp+var_110]
.text:00002942                 call    ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&(void)
.text:00002947                 mov     [ebp+var_1D0], eax
.text:0000294D                 mov     esi, esp
.text:0000294F                 mov     eax, [ebp+var_1D0]
.text:00002955                 push    eax
.text:00002956                 push    offset _IID_IArchiveUpdateCallbackFile
.text:0000295B                 mov     ecx, [ebp+arg_C]
.text:0000295E                 push    ecx
.text:0000295F                 mov     edx, [ebp+arg_C]
.text:00002962                 mov     eax, [edx]
.text:00002964                 mov     ecx, [eax]
.text:00002966                 call    ecx
.text:00002968                 cmp     esi, esp
.text:0000296A                 call    __RTC_CheckEsp
.text:0000296F                 lea     ecx, [ebp+var_110]
.text:00002975                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:0000297A                 mov     [ebp+var_1D4], eax
.text:00002980                 cmp     [ebp+var_1D4], 0
.text:00002987                 jz      loc_2A29
.text:0000298D                 lea     ecx, [ebp+var_110]
.text:00002993                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:00002998                 mov     [ebp+var_1D8], eax
.text:0000299E                 mov     edx, [ebp+var_1D8]
.text:000029A4                 mov     [ebp+var_1DC], edx
.text:000029AA                 mov     esi, esp
.text:000029AC                 push    3
.text:000029AE                 push    0
.text:000029B0                 push    1
.text:000029B2                 mov     eax, [ebp+var_1DC]
.text:000029B8                 push    eax
.text:000029B9                 mov     ecx, [ebp+var_1DC]
.text:000029BF                 mov     edx, [ecx]
.text:000029C1                 mov     eax, [edx+10h]
.text:000029C4                 call    eax
.text:000029C6                 cmp     esi, esp
.text:000029C8                 call    __RTC_CheckEsp
.text:000029CD                 mov     [ebp+var_1E0], eax
.text:000029D3                 mov     ecx, [ebp+var_1E0]
.text:000029D9                 mov     [ebp+var_118], ecx
.text:000029DF                 cmp     [ebp+var_118], 0
.text:000029E6                 jz      short loc_2A29
.text:000029E8                 mov     edx, [ebp+var_118]
.text:000029EE                 mov     [ebp+var_168], edx
.text:000029F4                 mov     byte ptr [ebp+var_4], 9
.text:000029F8                 lea     ecx, [ebp+var_110]
.text:000029FE                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002A03                 mov     byte ptr [ebp+var_4], 1
.text:00002A07                 lea     ecx, [ebp+var_104]
.text:00002A0D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002A12                 mov     byte ptr [ebp+var_4], 0
.text:00002A16                 lea     ecx, [ebp+var_64] ; this
.text:00002A19                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002A1E                 mov     eax, [ebp+var_168]
.text:00002A24                 jmp     loc_2BE4
.text:00002A29 ; ---------------------------------------------------------------------------
.text:00002A29
.text:00002A29 loc_2A29:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+703j
.text:00002A29                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+762j
.text:00002A29                 mov     eax, [ebp+this]
.text:00002A2C                 add     eax, 0Ch
.text:00002A2F                 push    eax             ; struct NArchive::NGz::CItem *
.text:00002A30                 lea     ecx, [ebp+var_64] ; this
.text:00002A33                 call    ?CopyDataPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z ; NArchive::NGz::CItem::CopyDataPropsFrom(NArchive::NGz::CItem const &)
.text:00002A38                 mov     [ebp+var_120], 0
.text:00002A42                 mov     [ebp+var_11C], 0
.text:00002A4C                 mov     ecx, [ebp+var_24]
.text:00002A4F                 push    ecx             ; int
.text:00002A50                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00002A55                 mov     [ebp+var_1E1], al
.text:00002A5B                 movzx   edx, [ebp+var_1E1]
.text:00002A62                 test    edx, edx
.text:00002A64                 jz      short loc_2A93
.text:00002A66                 mov     eax, [ebp+arg_4]
.text:00002A69                 push    eax             ; struct ISequentialOutStream *
.text:00002A6A                 lea     ecx, [ebp+var_64] ; this
.text:00002A6D                 call    ?WriteHeader@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)
.text:00002A72                 mov     ecx, [ebp+this]
.text:00002A75                 mov     edx, [ebp+var_120]
.text:00002A7B                 add     edx, [ecx+58h]
.text:00002A7E                 mov     eax, [ebp+var_11C]
.text:00002A84                 adc     eax, [ecx+5Ch]
.text:00002A87                 mov     [ebp+var_120], edx
.text:00002A8D                 mov     [ebp+var_11C], eax
.text:00002A93
.text:00002A93 loc_2A93:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7E0j
.text:00002A93                 mov     ecx, [ebp+this]
.text:00002A96                 add     ecx, 60h ; '`'
.text:00002A99                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00002A9E                 mov     [ebp+var_1E8], eax
.text:00002AA4                 mov     ecx, [ebp+var_1E8]
.text:00002AAA                 mov     [ebp+var_1EC], ecx
.text:00002AB0                 mov     esi, esp
.text:00002AB2                 push    0
.text:00002AB4                 push    0
.text:00002AB6                 mov     edx, [ebp+var_11C]
.text:00002ABC                 push    edx
.text:00002ABD                 mov     eax, [ebp+var_120]
.text:00002AC3                 push    eax
.text:00002AC4                 mov     ecx, [ebp+var_1EC]
.text:00002ACA                 push    ecx
.text:00002ACB                 mov     edx, [ebp+var_1EC]
.text:00002AD1                 mov     eax, [edx]
.text:00002AD3                 mov     ecx, [eax+10h]
.text:00002AD6                 call    ecx
.text:00002AD8                 cmp     esi, esp
.text:00002ADA                 call    __RTC_CheckEsp
.text:00002ADF                 mov     [ebp+var_1F0], eax
.text:00002AE5                 mov     edx, [ebp+var_1F0]
.text:00002AEB                 mov     [ebp+var_124], edx
.text:00002AF1                 cmp     [ebp+var_124], 0
.text:00002AF8                 jz      short loc_2B3B
.text:00002AFA                 mov     eax, [ebp+var_124]
.text:00002B00                 mov     [ebp+var_16C], eax
.text:00002B06                 mov     byte ptr [ebp+var_4], 9
.text:00002B0A                 lea     ecx, [ebp+var_110]
.text:00002B10                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002B15                 mov     byte ptr [ebp+var_4], 1
.text:00002B19                 lea     ecx, [ebp+var_104]
.text:00002B1F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002B24                 mov     byte ptr [ebp+var_4], 0
.text:00002B28                 lea     ecx, [ebp+var_64] ; this
.text:00002B2B                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002B30                 mov     eax, [ebp+var_16C]
.text:00002B36                 jmp     loc_2BE4
.text:00002B3B ; ---------------------------------------------------------------------------
.text:00002B3B
.text:00002B3B loc_2B3B:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+874j
.text:00002B3B                 lea     ecx, [ebp+var_104]
.text:00002B41                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00002B46                 mov     [ebp+var_1F4], eax
.text:00002B4C                 mov     ecx, [ebp+this]
.text:00002B4F                 add     ecx, 60h ; '`'
.text:00002B52                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002B57                 mov     [ebp+var_1F8], eax
.text:00002B5D                 mov     ecx, [ebp+var_1F4]
.text:00002B63                 push    ecx             ; struct ISequentialOutStream *
.text:00002B64                 mov     edx, [ebp+arg_4]
.text:00002B67                 push    edx             ; struct ISequentialInStream *
.text:00002B68                 mov     eax, [ebp+var_1F8]
.text:00002B6E                 push    eax             ; this
.text:00002B6F                 call    ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00002B74                 mov     [ebp+var_1FC], eax
.text:00002B7A                 mov     ecx, [ebp+var_1FC]
.text:00002B80                 mov     [ebp+var_170], ecx
.text:00002B86                 mov     byte ptr [ebp+var_4], 9
.text:00002B8A                 lea     ecx, [ebp+var_110]
.text:00002B90                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002B95                 mov     byte ptr [ebp+var_4], 1
.text:00002B99                 lea     ecx, [ebp+var_104]
.text:00002B9F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002BA4                 mov     byte ptr [ebp+var_4], 0
.text:00002BA8                 lea     ecx, [ebp+var_64] ; this
.text:00002BAB                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:00002BB0                 mov     eax, [ebp+var_170]
.text:00002BB6                 jmp     short loc_2BE4
.text:00002BB6 ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp ; sp-analysis failed
.text:00002BB6
.text:00002BB8
.text:00002BB8 ; =============== S U B R O U T I N E =======================================
.text:00002BB8
.text:00002BB8
.text:00002BB8 __catch$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 proc near
.text:00002BB8                                         ; DATA XREF: .xdata$x:00003A90o
.text:00002BB8                 mov     dword ptr [ebp-174h], 8007000Eh
.text:00002BC2                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002BC9                 mov     eax, offset $LN48
.text:00002BCE                 retn
.text:00002BCE __catch$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 endp
.text:00002BCE
.text:00002BCF ; ---------------------------------------------------------------------------
.text:00002BCF                 mov     eax, offset __tryend$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
.text:00002BD4                 retn
.text:00002BD5 ; ---------------------------------------------------------------------------
.text:00002BD5
.text:00002BD5 __tryend$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
.text:00002BD5                                         ; DATA XREF: .text:00002BCFo
.text:00002BD5                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002BDC                 jmp     short loc_2BE4
.text:00002BDE ; ---------------------------------------------------------------------------
.text:00002BDE
.text:00002BDE $LN48:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0+11o
.text:00002BDE                 mov     eax, [ebp-174h]
.text:00002BE4 ; START OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002BE4
.text:00002BE4 loc_2BE4:                               ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+53j
.text:00002BE4                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+63j ...
.text:00002BE4                 push    edx
.text:00002BE5                 mov     ecx, ebp
.text:00002BE7                 push    eax
.text:00002BE8                 lea     edx, $LN63_0
.text:00002BEE                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002BF3                 pop     eax
.text:00002BF4                 pop     edx
.text:00002BF5                 mov     ecx, [ebp+var_C]
.text:00002BF8                 mov     large fs:0, ecx
.text:00002BFF                 pop     ecx
.text:00002C00                 pop     edi
.text:00002C01                 pop     esi
.text:00002C02                 pop     ebx
.text:00002C03                 add     esp, 1FCh
.text:00002C09                 cmp     ebp, esp
.text:00002C0B                 call    __RTC_CheckEsp
.text:00002C10                 mov     esp, ebp
.text:00002C12                 pop     ebp
.text:00002C13                 retn    10h
.text:00002C13 ; END OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002C13 ; ---------------------------------------------------------------------------
.text:00002C16                 align 4
.text:00002C18 $LN63_0         dd 0Bh                  ; DATA XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+964o
.text:00002C1C                 dd offset $LN62
.text:00002C20 $LN62           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002C1Co
.text:00002C28                 dd offset $LN50         ; "newData"
.text:00002C2C                 dd 0FFFFFFDCh, 4
.text:00002C34                 dd offset $LN51_0       ; "newProps"
.text:00002C38                 dd 0FFFFFFD0h, 4
.text:00002C40                 dd offset $LN52         ; "indexInArchive"
.text:00002C44                 dd 0FFFFFF9Ch, 28h
.text:00002C4C                 dd offset $LN53         ; "newItem"
.text:00002C50                 dd 0FFFFFF84h, 10h
.text:00002C58                 dd offset $LN54         ; "prop"
.text:00002C5C                 dd 0FFFFFF68h, 10h
.text:00002C64                 dd offset $LN55         ; "prop"
.text:00002C68                 dd 0FFFFFF50h, 0Ch
.text:00002C70                 dd offset $LN56         ; "name"
.text:00002C74                 dd 0FFFFFF34h, 10h
.text:00002C7C                 dd offset $LN57         ; "prop"
.text:00002C80                 dd 0FFFFFF10h, 10h
.text:00002C88                 dd offset $LN58         ; "prop"
.text:00002C8C                 dd 0FFFFFEFCh, 4
.text:00002C94                 dd offset $LN59         ; "progress"
.text:00002C98                 dd 0FFFFFEF0h, 4
.text:00002CA0                 dd offset $LN60         ; "opCallback"
.text:00002CA4 $LN60           db 'opCallback',0       ; DATA XREF: .text:00002CA0o
.text:00002CAF $LN59           db 'progress',0         ; DATA XREF: .text:00002C94o
.text:00002CB8 $LN58           db 'prop',0             ; DATA XREF: .text:00002C88o
.text:00002CBD $LN57           db 'prop',0             ; DATA XREF: .text:00002C7Co
.text:00002CC2 $LN56           db 'name',0             ; DATA XREF: .text:00002C70o
.text:00002CC7 $LN55           db 'prop',0             ; DATA XREF: .text:00002C64o
.text:00002CCC $LN54           db 'prop',0             ; DATA XREF: .text:00002C58o
.text:00002CD1 $LN53           db 'newItem',0          ; DATA XREF: .text:00002C4Co
.text:00002CD9 $LN52           db 'indexInArchive',0   ; DATA XREF: .text:00002C40o
.text:00002CE8 $LN51_0         db 'newProps',0         ; DATA XREF: .text:00002C34o
.text:00002CF1 $LN50           db 'newData',0          ; DATA XREF: .text:00002C28o
.text:00002CF9                 db 0Bh dup(0CCh)
.text:00002D04
.text:00002D04 ; =============== S U B R O U T I N E =======================================
.text:00002D04
.text:00002D04 ; Attributes: bp-based frame
.text:00002D04
.text:00002D04 ; int __stdcall NArchive::NGz::UpdateArchive(struct ISequentialOutStream *, int, int, NArchive::NGz::CItem *, NArchive::CSingleMethodProps *, struct IProgress *)
.text:00002D04 ?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z proc near
.text:00002D04                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+57Cp
.text:00002D04
.text:00002D04 var_B8          = dword ptr -0B8h
.text:00002D04 var_B4          = dword ptr -0B4h
.text:00002D04 var_B0          = dword ptr -0B0h
.text:00002D04 var_AC          = dword ptr -0ACh
.text:00002D04 var_A8          = dword ptr -0A8h
.text:00002D04 var_A4          = dword ptr -0A4h
.text:00002D04 var_A0          = dword ptr -0A0h
.text:00002D04 var_9C          = dword ptr -9Ch
.text:00002D04 var_98          = dword ptr -98h
.text:00002D04 var_94          = dword ptr -94h
.text:00002D04 var_90          = dword ptr -90h
.text:00002D04 var_8C          = dword ptr -8Ch
.text:00002D04 var_88          = dword ptr -88h
.text:00002D04 var_84          = dword ptr -84h
.text:00002D04 var_80          = dword ptr -80h
.text:00002D04 var_7C          = dword ptr -7Ch
.text:00002D04 var_78          = dword ptr -78h
.text:00002D04 var_74          = dword ptr -74h
.text:00002D04 var_70          = dword ptr -70h
.text:00002D04 var_6C          = dword ptr -6Ch
.text:00002D04 var_64          = byte ptr -64h
.text:00002D04 var_5C          = dword ptr -5Ch
.text:00002D04 var_58          = dword ptr -58h
.text:00002D04 var_50          = byte ptr -50h
.text:00002D04 var_48          = dword ptr -48h
.text:00002D04 var_40          = byte ptr -40h
.text:00002D04 var_38          = dword ptr -38h
.text:00002D04 var_34          = dword ptr -34h
.text:00002D04 var_2C          = byte ptr -2Ch
.text:00002D04 var_24          = dword ptr -24h
.text:00002D04 var_20          = dword ptr -20h
.text:00002D04 var_18          = dword ptr -18h
.text:00002D04 var_14          = dword ptr -14h
.text:00002D04 var_C           = dword ptr -0Ch
.text:00002D04 var_4           = dword ptr -4
.text:00002D04 arg_0           = dword ptr  8
.text:00002D04 arg_4           = dword ptr  0Ch
.text:00002D04 arg_8           = dword ptr  10h
.text:00002D04 arg_C           = dword ptr  14h
.text:00002D04 arg_10          = dword ptr  18h
.text:00002D04 arg_14          = dword ptr  1Ch
.text:00002D04
.text:00002D04                 push    ebp
.text:00002D05                 mov     ebp, esp
.text:00002D07                 push    0FFFFFFFFh
.text:00002D09                 push    offset __ehhandler$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z
.text:00002D0E                 mov     eax, large fs:0
.text:00002D14                 push    eax
.text:00002D15                 sub     esp, 0ACh
.text:00002D1B                 push    esi
.text:00002D1C                 push    edi
.text:00002D1D                 lea     edi, [ebp+var_B8]
.text:00002D23                 mov     ecx, 2Bh ; '+'
.text:00002D28                 mov     eax, 0CCCCCCCCh
.text:00002D2D                 rep stosd
.text:00002D2F                 mov     eax, dword ptr ds:___security_cookie
.text:00002D34                 xor     eax, ebp
.text:00002D36                 push    eax
.text:00002D37                 lea     eax, [ebp+var_C]
.text:00002D3A                 mov     large fs:0, eax
.text:00002D40                 mov     [ebp+var_18], 0
.text:00002D47                 mov     [ebp+var_14], 0
.text:00002D4E                 mov     esi, esp
.text:00002D50                 mov     eax, [ebp+arg_8]
.text:00002D53                 push    eax
.text:00002D54                 mov     ecx, [ebp+arg_4]
.text:00002D57                 push    ecx
.text:00002D58                 mov     edx, [ebp+arg_14]
.text:00002D5B                 mov     eax, [edx]
.text:00002D5D                 mov     ecx, [ebp+arg_14]
.text:00002D60                 push    ecx
.text:00002D61                 mov     edx, [eax+0Ch]
.text:00002D64                 call    edx
.text:00002D66                 cmp     esi, esp
.text:00002D68                 call    __RTC_CheckEsp
.text:00002D6D                 mov     [ebp+var_20], eax
.text:00002D70                 cmp     [ebp+var_20], 0
.text:00002D74                 jz      short loc_2D7E
.text:00002D76                 mov     eax, [ebp+var_20]
.text:00002D79                 jmp     loc_3195
.text:00002D7E ; ---------------------------------------------------------------------------
.text:00002D7E
.text:00002D7E loc_2D7E:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+70j
.text:00002D7E                 mov     esi, esp
.text:00002D80                 lea     eax, [ebp+var_18]
.text:00002D83                 push    eax
.text:00002D84                 mov     ecx, [ebp+arg_14]
.text:00002D87                 mov     edx, [ecx]
.text:00002D89                 mov     eax, [ebp+arg_14]
.text:00002D8C                 push    eax
.text:00002D8D                 mov     ecx, [edx+10h]
.text:00002D90                 call    ecx
.text:00002D92                 cmp     esi, esp
.text:00002D94                 call    __RTC_CheckEsp
.text:00002D99                 mov     [ebp+var_24], eax
.text:00002D9C                 cmp     [ebp+var_24], 0
.text:00002DA0                 jz      short loc_2DAA
.text:00002DA2                 mov     eax, [ebp+var_24]
.text:00002DA5                 jmp     loc_3195
.text:00002DAA ; ---------------------------------------------------------------------------
.text:00002DAA
.text:00002DAA loc_2DAA:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+9Cj
.text:00002DAA                 lea     ecx, [ebp+var_2C]
.text:00002DAD                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00002DB2                 mov     [ebp+var_4], 0
.text:00002DB9                 lea     ecx, [ebp+var_2C]
.text:00002DBC                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00002DC1                 mov     esi, esp
.text:00002DC3                 push    eax
.text:00002DC4                 push    0
.text:00002DC6                 mov     edx, [ebp+arg_14]
.text:00002DC9                 mov     eax, [edx]
.text:00002DCB                 mov     ecx, [ebp+arg_14]
.text:00002DCE                 push    ecx
.text:00002DCF                 mov     edx, [eax+1Ch]
.text:00002DD2                 call    edx
.text:00002DD4                 cmp     esi, esp
.text:00002DD6                 call    __RTC_CheckEsp
.text:00002DDB                 mov     [ebp+var_34], eax
.text:00002DDE                 cmp     [ebp+var_34], 0
.text:00002DE2                 jz      short loc_2E01
.text:00002DE4                 mov     eax, [ebp+var_34]
.text:00002DE7                 mov     [ebp+var_78], eax
.text:00002DEA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002DF1                 lea     ecx, [ebp+var_2C]
.text:00002DF4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002DF9                 mov     eax, [ebp+var_78]
.text:00002DFC                 jmp     loc_3195
.text:00002E01 ; ---------------------------------------------------------------------------
.text:00002E01
.text:00002E01 loc_2E01:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+DEj
.text:00002E01                 push    20h ; ' '       ; unsigned int
.text:00002E03                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002E08                 add     esp, 4
.text:00002E0B                 mov     [ebp+var_80], eax
.text:00002E0E                 mov     byte ptr [ebp+var_4], 1
.text:00002E12                 cmp     [ebp+var_80], 0
.text:00002E16                 jz      short loc_2E28
.text:00002E18                 mov     ecx, [ebp+var_80]
.text:00002E1B                 call    ??0CSequentialInStreamWithCRC@@QAE@XZ ; CSequentialInStreamWithCRC::CSequentialInStreamWithCRC(void)
.text:00002E20                 mov     [ebp+var_A8], eax
.text:00002E26                 jmp     short loc_2E32
.text:00002E28 ; ---------------------------------------------------------------------------
.text:00002E28
.text:00002E28 loc_2E28:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+112j
.text:00002E28                 mov     [ebp+var_A8], 0
.text:00002E32
.text:00002E32 loc_2E32:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+122j
.text:00002E32                 mov     ecx, [ebp+var_A8]
.text:00002E38                 mov     [ebp+var_7C], ecx
.text:00002E3B                 mov     byte ptr [ebp+var_4], 0
.text:00002E3F                 mov     edx, [ebp+var_7C]
.text:00002E42                 mov     [ebp+var_38], edx
.text:00002E45                 mov     eax, [ebp+var_38]
.text:00002E48                 push    eax
.text:00002E49                 lea     ecx, [ebp+var_40]
.text:00002E4C                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00002E51                 mov     byte ptr [ebp+var_4], 2
.text:00002E55                 lea     ecx, [ebp+var_2C]
.text:00002E58                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002E5D                 push    eax             ; struct ISequentialInStream *
.text:00002E5E                 mov     ecx, [ebp+var_38] ; this
.text:00002E61                 call    ?SetStream@CSequentialInStreamWithCRC@@QAEXPAUISequentialInStream@@@Z ; CSequentialInStreamWithCRC::SetStream(ISequentialInStream *)
.text:00002E66                 mov     ecx, [ebp+var_38] ; this
.text:00002E69                 call    ?Init@CSequentialInStreamWithCRC@@QAEXXZ ; CSequentialInStreamWithCRC::Init(void)
.text:00002E6E                 push    38h ; '8'       ; unsigned int
.text:00002E70                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002E75                 add     esp, 4
.text:00002E78                 mov     [ebp+var_88], eax
.text:00002E7E                 mov     byte ptr [ebp+var_4], 3
.text:00002E82                 cmp     [ebp+var_88], 0
.text:00002E89                 jz      short loc_2E9E
.text:00002E8B                 mov     ecx, [ebp+var_88]
.text:00002E91                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00002E96                 mov     [ebp+var_AC], eax
.text:00002E9C                 jmp     short loc_2EA8
.text:00002E9E ; ---------------------------------------------------------------------------
.text:00002E9E
.text:00002E9E loc_2E9E:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+185j
.text:00002E9E                 mov     [ebp+var_AC], 0
.text:00002EA8
.text:00002EA8 loc_2EA8:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+198j
.text:00002EA8                 mov     ecx, [ebp+var_AC]
.text:00002EAE                 mov     [ebp+var_84], ecx
.text:00002EB4                 mov     byte ptr [ebp+var_4], 2
.text:00002EB8                 mov     edx, [ebp+var_84]
.text:00002EBE                 mov     [ebp+var_48], edx
.text:00002EC1                 mov     eax, [ebp+var_48]
.text:00002EC4                 push    eax
.text:00002EC5                 lea     ecx, [ebp+var_50]
.text:00002EC8                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00002ECD                 mov     byte ptr [ebp+var_4], 4
.text:00002ED1                 push    1               ; bool
.text:00002ED3                 mov     ecx, [ebp+arg_14]
.text:00002ED6                 push    ecx             ; struct IProgress *
.text:00002ED7                 mov     ecx, [ebp+var_48] ; this
.text:00002EDA                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00002EDF                 mov     ecx, [ebp+arg_10] ; this
.text:00002EE2                 call    ?GetLevel@CSingleMethodProps@NArchive@@QBEHXZ ; NArchive::CSingleMethodProps::GetLevel(void)
.text:00002EE7                 cmp     eax, 7
.text:00002EEA                 setl    dl
.text:00002EED                 lea     edx, [edx+edx+2]
.text:00002EF1                 mov     eax, [ebp+arg_C]
.text:00002EF4                 mov     [eax+1], dl
.text:00002EF7                 mov     ecx, [ebp+arg_C]
.text:00002EFA                 mov     byte ptr [ecx+2], 0
.text:00002EFE                 mov     edx, [ebp+arg_0]
.text:00002F01                 push    edx             ; struct ISequentialOutStream *
.text:00002F02                 mov     ecx, [ebp+arg_C] ; this
.text:00002F05                 call    ?WriteHeader@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)
.text:00002F0A                 mov     [ebp+var_58], eax
.text:00002F0D                 cmp     [ebp+var_58], 0
.text:00002F11                 jz      short loc_2F4E
.text:00002F13                 mov     eax, [ebp+var_58]
.text:00002F16                 mov     [ebp+var_8C], eax
.text:00002F1C                 mov     byte ptr [ebp+var_4], 2
.text:00002F20                 lea     ecx, [ebp+var_50]
.text:00002F23                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002F28                 mov     byte ptr [ebp+var_4], 0
.text:00002F2C                 lea     ecx, [ebp+var_40]
.text:00002F2F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F34                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002F3B                 lea     ecx, [ebp+var_2C]
.text:00002F3E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002F43                 mov     eax, [ebp+var_8C]
.text:00002F49                 jmp     loc_3195
.text:00002F4E ; ---------------------------------------------------------------------------
.text:00002F4E
.text:00002F4E loc_2F4E:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+20Dj
.text:00002F4E                 push    9B00h           ; unsigned int
.text:00002F53                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002F58                 add     esp, 4
.text:00002F5B                 mov     [ebp+var_94], eax
.text:00002F61                 mov     byte ptr [ebp+var_4], 5
.text:00002F65                 cmp     [ebp+var_94], 0
.text:00002F6C                 jz      short loc_2F81
.text:00002F6E                 mov     ecx, [ebp+var_94] ; this
.text:00002F74                 call    ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)
.text:00002F79                 mov     [ebp+var_B0], eax
.text:00002F7F                 jmp     short loc_2F8B
.text:00002F81 ; ---------------------------------------------------------------------------
.text:00002F81
.text:00002F81 loc_2F81:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+268j
.text:00002F81                 mov     [ebp+var_B0], 0
.text:00002F8B
.text:00002F8B loc_2F8B:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+27Bj
.text:00002F8B                 mov     ecx, [ebp+var_B0]
.text:00002F91                 mov     [ebp+var_90], ecx
.text:00002F97                 mov     byte ptr [ebp+var_4], 4
.text:00002F9B                 mov     edx, [ebp+var_90]
.text:00002FA1                 mov     [ebp+var_5C], edx
.text:00002FA4                 mov     eax, [ebp+var_5C]
.text:00002FA7                 push    eax
.text:00002FA8                 lea     ecx, [ebp+var_64]
.text:00002FAB                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00002FB0                 mov     byte ptr [ebp+var_4], 6
.text:00002FB4                 cmp     [ebp+var_5C], 0
.text:00002FB8                 jz      short loc_2FC8
.text:00002FBA                 mov     ecx, [ebp+var_5C]
.text:00002FBD                 add     ecx, 4
.text:00002FC0                 mov     [ebp+var_B4], ecx
.text:00002FC6                 jmp     short loc_2FD2
.text:00002FC8 ; ---------------------------------------------------------------------------
.text:00002FC8
.text:00002FC8 loc_2FC8:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2B4j
.text:00002FC8                 mov     [ebp+var_B4], 0
.text:00002FD2
.text:00002FD2 loc_2FD2:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2C2j
.text:00002FD2                 push    0               ; unsigned __int64 *
.text:00002FD4                 mov     edx, [ebp+var_B4]
.text:00002FDA                 push    edx             ; struct ICompressSetCoderProperties *
.text:00002FDB                 mov     ecx, [ebp+arg_10] ; this
.text:00002FDE                 call    ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)
.text:00002FE3                 mov     [ebp+var_6C], eax
.text:00002FE6                 cmp     [ebp+var_6C], 0
.text:00002FEA                 jz      short loc_3033
.text:00002FEC                 mov     eax, [ebp+var_6C]
.text:00002FEF                 mov     [ebp+var_98], eax
.text:00002FF5                 mov     byte ptr [ebp+var_4], 4
.text:00002FF9                 lea     ecx, [ebp+var_64]
.text:00002FFC                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003001                 mov     byte ptr [ebp+var_4], 2
.text:00003005                 lea     ecx, [ebp+var_50]
.text:00003008                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000300D                 mov     byte ptr [ebp+var_4], 0
.text:00003011                 lea     ecx, [ebp+var_40]
.text:00003014                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003019                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003020                 lea     ecx, [ebp+var_2C]
.text:00003023                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003028                 mov     eax, [ebp+var_98]
.text:0000302E                 jmp     loc_3195
.text:00003033 ; ---------------------------------------------------------------------------
.text:00003033
.text:00003033 loc_3033:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2E6j
.text:00003033                 lea     ecx, [ebp+var_64]
.text:00003036                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:0000303B                 mov     [ebp+var_B8], eax
.text:00003041                 lea     ecx, [ebp+var_50]
.text:00003044                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00003049                 mov     esi, esp
.text:0000304B                 push    eax
.text:0000304C                 push    0
.text:0000304E                 push    0
.text:00003050                 mov     ecx, [ebp+arg_0]
.text:00003053                 push    ecx
.text:00003054                 lea     ecx, [ebp+var_40]
.text:00003057                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000305C                 push    eax
.text:0000305D                 mov     edx, [ebp+var_B8]
.text:00003063                 push    edx
.text:00003064                 mov     eax, [ebp+var_B8]
.text:0000306A                 mov     ecx, [eax]
.text:0000306C                 mov     edx, [ecx+0Ch]
.text:0000306F                 call    edx
.text:00003071                 cmp     esi, esp
.text:00003073                 call    __RTC_CheckEsp
.text:00003078                 mov     [ebp+var_70], eax
.text:0000307B                 cmp     [ebp+var_70], 0
.text:0000307F                 jz      short loc_30C8
.text:00003081                 mov     eax, [ebp+var_70]
.text:00003084                 mov     [ebp+var_9C], eax
.text:0000308A                 mov     byte ptr [ebp+var_4], 4
.text:0000308E                 lea     ecx, [ebp+var_64]
.text:00003091                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003096                 mov     byte ptr [ebp+var_4], 2
.text:0000309A                 lea     ecx, [ebp+var_50]
.text:0000309D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000030A2                 mov     byte ptr [ebp+var_4], 0
.text:000030A6                 lea     ecx, [ebp+var_40]
.text:000030A9                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000030AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000030B5                 lea     ecx, [ebp+var_2C]
.text:000030B8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000030BD                 mov     eax, [ebp+var_9C]
.text:000030C3                 jmp     loc_3195
.text:000030C8 ; ---------------------------------------------------------------------------
.text:000030C8
.text:000030C8 loc_30C8:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+37Bj
.text:000030C8                 mov     ecx, [ebp+var_38] ; this
.text:000030CB                 call    ?GetCRC@CSequentialInStreamWithCRC@@QBEIXZ ; CSequentialInStreamWithCRC::GetCRC(void)
.text:000030D0                 mov     ecx, [ebp+arg_C]
.text:000030D3                 mov     [ecx+8], eax
.text:000030D6                 mov     ecx, [ebp+var_38] ; this
.text:000030D9                 call    ?GetSize@CSequentialInStreamWithCRC@@QBE_KXZ ; CSequentialInStreamWithCRC::GetSize(void)
.text:000030DE                 mov     edx, [ebp+arg_C]
.text:000030E1                 mov     [edx+0Ch], eax
.text:000030E4                 mov     eax, [ebp+arg_0]
.text:000030E7                 push    eax             ; struct ISequentialOutStream *
.text:000030E8                 mov     ecx, [ebp+arg_C] ; this
.text:000030EB                 call    ?WriteFooter@CItem@NGz@NArchive@@QAEJPAUISequentialOutStream@@@Z ; NArchive::NGz::CItem::WriteFooter(ISequentialOutStream *)
.text:000030F0                 mov     [ebp+var_74], eax
.text:000030F3                 cmp     [ebp+var_74], 0
.text:000030F7                 jz      short loc_313D
.text:000030F9                 mov     ecx, [ebp+var_74]
.text:000030FC                 mov     [ebp+var_A0], ecx
.text:00003102                 mov     byte ptr [ebp+var_4], 4
.text:00003106                 lea     ecx, [ebp+var_64]
.text:00003109                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:0000310E                 mov     byte ptr [ebp+var_4], 2
.text:00003112                 lea     ecx, [ebp+var_50]
.text:00003115                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000311A                 mov     byte ptr [ebp+var_4], 0
.text:0000311E                 lea     ecx, [ebp+var_40]
.text:00003121                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003126                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000312D                 lea     ecx, [ebp+var_2C]
.text:00003130                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003135                 mov     eax, [ebp+var_A0]
.text:0000313B                 jmp     short loc_3195
.text:0000313D ; ---------------------------------------------------------------------------
.text:0000313D
.text:0000313D loc_313D:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+3F3j
.text:0000313D                 mov     esi, esp
.text:0000313F                 push    0
.text:00003141                 mov     edx, [ebp+arg_14]
.text:00003144                 mov     eax, [edx]
.text:00003146                 mov     ecx, [ebp+arg_14]
.text:00003149                 push    ecx
.text:0000314A                 mov     edx, [eax+20h]
.text:0000314D                 call    edx
.text:0000314F                 cmp     esi, esp
.text:00003151                 call    __RTC_CheckEsp
.text:00003156                 mov     [ebp+var_A4], eax
.text:0000315C                 mov     byte ptr [ebp+var_4], 4
.text:00003160                 lea     ecx, [ebp+var_64]
.text:00003163                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00003168                 mov     byte ptr [ebp+var_4], 2
.text:0000316C                 lea     ecx, [ebp+var_50]
.text:0000316F                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00003174                 mov     byte ptr [ebp+var_4], 0
.text:00003178                 lea     ecx, [ebp+var_40]
.text:0000317B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00003180                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003187                 lea     ecx, [ebp+var_2C]
.text:0000318A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000318F                 mov     eax, [ebp+var_A4]
.text:00003195
.text:00003195 loc_3195:                               ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+75j
.text:00003195                                         ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+A1j ...
.text:00003195                 push    edx
.text:00003196                 mov     ecx, ebp
.text:00003198                 push    eax
.text:00003199                 lea     edx, $LN32_0
.text:0000319F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000031A4                 pop     eax
.text:000031A5                 pop     edx
.text:000031A6                 mov     ecx, [ebp+var_C]
.text:000031A9                 mov     large fs:0, ecx
.text:000031B0                 pop     ecx
.text:000031B1                 pop     edi
.text:000031B2                 pop     esi
.text:000031B3                 add     esp, 0B8h
.text:000031B9                 cmp     ebp, esp
.text:000031BB                 call    __RTC_CheckEsp
.text:000031C0                 mov     esp, ebp
.text:000031C2                 pop     ebp
.text:000031C3                 retn    18h
.text:000031C3 ?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z endp
.text:000031C3
.text:000031C3 ; ---------------------------------------------------------------------------
.text:000031C6                 align 4
.text:000031C8 $LN32_0         dd 5                    ; DATA XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+495o
.text:000031CC                 dd offset $LN31_1
.text:000031D0 $LN31_1         dd 0FFFFFFE8h, 8        ; DATA XREF: .text:000031CCo
.text:000031D8                 dd offset $LN25_0       ; "complexity"
.text:000031DC                 dd 0FFFFFFD4h, 4
.text:000031E4                 dd offset $LN26         ; "fileInStream"
.text:000031E8                 dd 0FFFFFFC0h, 4
.text:000031F0                 dd offset $LN27_1       ; "crcStream"
.text:000031F4                 dd 0FFFFFFB0h, 4
.text:000031FC                 dd offset $LN28_0       ; "progress"
.text:00003200                 dd 0FFFFFF9Ch, 4
.text:00003208                 dd offset $LN29_1       ; "deflateEncoder"
.text:0000320C $LN29_1         db 'deflateEncoder',0   ; DATA XREF: .text:00003208o
.text:0000321B $LN28_0         db 'progress',0         ; DATA XREF: .text:000031FCo
.text:00003224 $LN27_1         db 'crcStream',0        ; DATA XREF: .text:000031F0o
.text:0000322E $LN26           db 'fileInStream',0     ; DATA XREF: .text:000031E4o
.text:0000323B $LN25_0         db 'complexity',0       ; DATA XREF: .text:000031D8o
.text:00003246                 db 0Eh dup(0CCh)
.text:00003254
.text:00003254 ; =============== S U B R O U T I N E =======================================
.text:00003254
.text:00003254 ; Attributes: bp-based frame
.text:00003254
.text:00003254 ; __int32 __stdcall NArchive::NGz::CHandler::SetProperties(NArchive::NGz::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:00003254                 public ?SetProperties@CHandler@NGz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00003254 ?SetProperties@CHandler@NGz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:00003254                                         ; DATA XREF: .rdata:00004FA0o
.text:00003254
.text:00003254 this            = dword ptr  8
.text:00003254 arg_4           = dword ptr  0Ch
.text:00003254 arg_8           = dword ptr  10h
.text:00003254 arg_C           = dword ptr  14h
.text:00003254
.text:00003254                 push    ebp
.text:00003255                 mov     ebp, esp
.text:00003257                 mov     eax, [ebp+arg_C]
.text:0000325A                 push    eax             ; unsigned int
.text:0000325B                 mov     ecx, [ebp+arg_8]
.text:0000325E                 push    ecx             ; struct tagPROPVARIANT *
.text:0000325F                 mov     edx, [ebp+arg_4]
.text:00003262                 push    edx             ; wchar_t **
.text:00003263                 mov     ecx, [ebp+this]
.text:00003266                 add     ecx, 68h ; 'h'  ; this
.text:00003269                 call    ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.text:0000326E                 cmp     ebp, esp
.text:00003270                 call    __RTC_CheckEsp
.text:00003275                 pop     ebp
.text:00003276                 retn    10h
.text:00003276 ?SetProperties@CHandler@NGz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00003276
.text:00003276 ; ---------------------------------------------------------------------------
.text:00003279                 db 0Bh dup(0CCh)
.text:00003284
.text:00003284 ; =============== S U B R O U T I N E =======================================
.text:00003284
.text:00003284 ; Attributes: bp-based frame
.text:00003284
.text:00003284 ; struct IInArchive * __stdcall NArchive::NGz::CreateArc(void)
.text:00003284 ?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ proc near
.text:00003284                                         ; DATA XREF: .rdata:0000014Co
.text:00003284
.text:00003284 var_18          = dword ptr -18h
.text:00003284 var_14          = dword ptr -14h
.text:00003284 var_10          = dword ptr -10h
.text:00003284 var_C           = dword ptr -0Ch
.text:00003284 var_4           = dword ptr -4
.text:00003284
.text:00003284                 push    ebp
.text:00003285                 mov     ebp, esp
.text:00003287                 push    0FFFFFFFFh
.text:00003289                 push    offset __ehhandler$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ
.text:0000328E                 mov     eax, large fs:0
.text:00003294                 push    eax
.text:00003295                 sub     esp, 0Ch
.text:00003298                 mov     [ebp+var_18], 0CCCCCCCCh
.text:0000329F                 mov     [ebp+var_14], 0CCCCCCCCh
.text:000032A6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000032AD                 mov     eax, dword ptr ds:___security_cookie
.text:000032B2                 xor     eax, ebp
.text:000032B4                 push    eax
.text:000032B5                 lea     eax, [ebp+var_C]
.text:000032B8                 mov     large fs:0, eax
.text:000032BE                 push    0A8h ; 'Â¿'      ; unsigned int
.text:000032C3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000032C8                 add     esp, 4
.text:000032CB                 mov     [ebp+var_14], eax
.text:000032CE                 mov     [ebp+var_4], 0
.text:000032D5                 cmp     [ebp+var_14], 0
.text:000032D9                 jz      short loc_32E8
.text:000032DB                 mov     ecx, [ebp+var_14] ; this
.text:000032DE                 call    ??0CHandler@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CHandler::CHandler(void)
.text:000032E3                 mov     [ebp+var_18], eax
.text:000032E6                 jmp     short loc_32EF
.text:000032E8 ; ---------------------------------------------------------------------------
.text:000032E8
.text:000032E8 loc_32E8:                               ; CODE XREF: NArchive::NGz::CreateArc(void)+55j
.text:000032E8                 mov     [ebp+var_18], 0
.text:000032EF
.text:000032EF loc_32EF:                               ; CODE XREF: NArchive::NGz::CreateArc(void)+62j
.text:000032EF                 mov     eax, [ebp+var_18]
.text:000032F2                 mov     [ebp+var_10], eax
.text:000032F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000032FC                 mov     eax, [ebp+var_10]
.text:000032FF                 mov     ecx, [ebp+var_C]
.text:00003302                 mov     large fs:0, ecx
.text:00003309                 pop     ecx
.text:0000330A                 add     esp, 18h
.text:0000330D                 cmp     ebp, esp
.text:0000330F                 call    __RTC_CheckEsp
.text:00003314                 mov     esp, ebp
.text:00003316                 pop     ebp
.text:00003317                 retn
.text:00003317 ?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ endp
.text:00003317
.text:00003317 ; ---------------------------------------------------------------------------
.text:00003318                 db 0Ch dup(0CCh)
.text:00003324
.text:00003324 ; =============== S U B R O U T I N E =======================================
.text:00003324
.text:00003324 ; Attributes: bp-based frame
.text:00003324
.text:00003324 ; struct IOutArchive * __stdcall NArchive::NGz::CreateArcOut(void)
.text:00003324 ?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ proc near
.text:00003324                                         ; DATA XREF: .rdata:00000150o
.text:00003324
.text:00003324 var_1C          = dword ptr -1Ch
.text:00003324 var_18          = dword ptr -18h
.text:00003324 var_14          = dword ptr -14h
.text:00003324 var_10          = dword ptr -10h
.text:00003324 var_C           = dword ptr -0Ch
.text:00003324 var_4           = dword ptr -4
.text:00003324
.text:00003324                 push    ebp
.text:00003325                 mov     ebp, esp
.text:00003327                 push    0FFFFFFFFh
.text:00003329                 push    offset __ehhandler$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ
.text:0000332E                 mov     eax, large fs:0
.text:00003334                 push    eax
.text:00003335                 sub     esp, 10h
.text:00003338                 mov     eax, 0CCCCCCCCh
.text:0000333D                 mov     [ebp+var_1C], eax
.text:00003340                 mov     [ebp+var_18], eax
.text:00003343                 mov     [ebp+var_14], eax
.text:00003346                 mov     [ebp+var_10], eax
.text:00003349                 mov     eax, dword ptr ds:___security_cookie
.text:0000334E                 xor     eax, ebp
.text:00003350                 push    eax
.text:00003351                 lea     eax, [ebp+var_C]
.text:00003354                 mov     large fs:0, eax
.text:0000335A                 push    0A8h ; 'Â¿'      ; unsigned int
.text:0000335F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003364                 add     esp, 4
.text:00003367                 mov     [ebp+var_14], eax
.text:0000336A                 mov     [ebp+var_4], 0
.text:00003371                 cmp     [ebp+var_14], 0
.text:00003375                 jz      short loc_3384
.text:00003377                 mov     ecx, [ebp+var_14] ; this
.text:0000337A                 call    ??0CHandler@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CHandler::CHandler(void)
.text:0000337F                 mov     [ebp+var_18], eax
.text:00003382                 jmp     short loc_338B
.text:00003384 ; ---------------------------------------------------------------------------
.text:00003384
.text:00003384 loc_3384:                               ; CODE XREF: NArchive::NGz::CreateArcOut(void)+51j
.text:00003384                 mov     [ebp+var_18], 0
.text:0000338B
.text:0000338B loc_338B:                               ; CODE XREF: NArchive::NGz::CreateArcOut(void)+5Ej
.text:0000338B                 mov     eax, [ebp+var_18]
.text:0000338E                 mov     [ebp+var_10], eax
.text:00003391                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003398                 cmp     [ebp+var_10], 0
.text:0000339C                 jz      short loc_33A9
.text:0000339E                 mov     ecx, [ebp+var_10]
.text:000033A1                 add     ecx, 8
.text:000033A4                 mov     [ebp+var_1C], ecx
.text:000033A7                 jmp     short loc_33B0
.text:000033A9 ; ---------------------------------------------------------------------------
.text:000033A9
.text:000033A9 loc_33A9:                               ; CODE XREF: NArchive::NGz::CreateArcOut(void)+78j
.text:000033A9                 mov     [ebp+var_1C], 0
.text:000033B0
.text:000033B0 loc_33B0:                               ; CODE XREF: NArchive::NGz::CreateArcOut(void)+83j
.text:000033B0                 mov     eax, [ebp+var_1C]
.text:000033B3                 mov     ecx, [ebp+var_C]
.text:000033B6                 mov     large fs:0, ecx
.text:000033BD                 pop     ecx
.text:000033BE                 add     esp, 1Ch
.text:000033C1                 cmp     ebp, esp
.text:000033C3                 call    __RTC_CheckEsp
.text:000033C8                 mov     esp, ebp
.text:000033CA                 pop     ebp
.text:000033CB                 retn
.text:000033CB ?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ endp
.text:000033CB
.text:000033CB _text           ends
.text:000033CB
.rtc$TMZ:000033CC ; ===========================================================================
.rtc$TMZ:000033CC
.rtc$TMZ:000033CC ; Segment type: Pure data
.rtc$TMZ:000033CC ; Segment permissions: Read
.rtc$TMZ:000033CC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000033CC                 assume cs:_rtc$TMZ
.rtc$TMZ:000033CC                 ;org 33CCh
.rtc$TMZ:000033CC ; COMDAT (pick any)
.rtc$TMZ:000033CC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000033CC _rtc$TMZ        ends
.rtc$TMZ:000033CC
.rtc$IMZ:000033D0 ; ===========================================================================
.rtc$IMZ:000033D0
.rtc$IMZ:000033D0 ; Segment type: Pure data
.rtc$IMZ:000033D0 ; Segment permissions: Read
.rtc$IMZ:000033D0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000033D0                 assume cs:_rtc$IMZ
.rtc$IMZ:000033D0                 ;org 33D0h
.rtc$IMZ:000033D0 ; COMDAT (pick any)
.rtc$IMZ:000033D0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000033D0 _rtc$IMZ        ends
.rtc$IMZ:000033D0
.text:000033D4 ; ===========================================================================
.text:000033D4
.text:000033D4 ; Segment type: Pure code
.text:000033D4 ; Segment permissions: Read/Execute
.text:000033D4 _text           segment para public 'CODE' use32
.text:000033D4                 assume cs:_text
.text:000033D4                 ;org 33D4h
.text:000033D4 ; COMDAT (pick any)
.text:000033D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033D4
.text:000033D4 ; =============== S U B R O U T I N E =======================================
.text:000033D4
.text:000033D4 ; Attributes: bp-based frame
.text:000033D4
.text:000033D4 ; bool __thiscall NCompress::NDeflate::NDecoder::CCoder::InputEofError(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:000033D4                 public ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ
.text:000033D4 ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ proc near
.text:000033D4                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+18Fp
.text:000033D4                                         ; NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)+3Ap ...
.text:000033D4
.text:000033D4 var_4           = dword ptr -4
.text:000033D4
.text:000033D4                 push    ebp
.text:000033D5                 mov     ebp, esp
.text:000033D7                 push    ecx
.text:000033D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033DF                 mov     [ebp+var_4], ecx
.text:000033E2                 mov     ecx, [ebp+var_4]
.text:000033E5                 add     ecx, 48h ; 'H'
.text:000033E8                 call    ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)
.text:000033ED                 add     esp, 4
.text:000033F0                 cmp     ebp, esp
.text:000033F2                 call    __RTC_CheckEsp
.text:000033F7                 mov     esp, ebp
.text:000033F9                 pop     ebp
.text:000033FA                 retn
.text:000033FA ?InputEofError@CCoder@NDecoder@NDeflate@NCompress@@QBE_NXZ endp
.text:000033FA
.text:000033FA ; ---------------------------------------------------------------------------
.text:000033FB                 align 4
.text:000033FB _text           ends
.text:000033FB
.text:000033FC ; ===========================================================================
.text:000033FC
.text:000033FC ; Segment type: Pure code
.text:000033FC ; Segment permissions: Read/Execute
.text:000033FC _text           segment para public 'CODE' use32
.text:000033FC                 assume cs:_text
.text:000033FC                 ;org 33FCh
.text:000033FC ; COMDAT (pick any)
.text:000033FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033FC
.text:000033FC ; =============== S U B R O U T I N E =======================================
.text:000033FC
.text:000033FC ; Attributes: bp-based frame
.text:000033FC
.text:000033FC ; void __thiscall NArchive::NGz::CItem::Clear(NArchive::NGz::CItem *__hidden this)
.text:000033FC                 public ?Clear@CItem@NGz@NArchive@@QAEXXZ
.text:000033FC ?Clear@CItem@NGz@NArchive@@QAEXXZ proc near
.text:000033FC                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+28p
.text:000033FC
.text:000033FC var_4           = dword ptr -4
.text:000033FC
.text:000033FC                 push    ebp
.text:000033FD                 mov     ebp, esp
.text:000033FF                 push    ecx
.text:00003400                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003407                 mov     [ebp+var_4], ecx
.text:0000340A                 mov     ecx, [ebp+var_4]
.text:0000340D                 add     ecx, 10h        ; this
.text:00003410                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00003415                 mov     ecx, [ebp+var_4]
.text:00003418                 add     ecx, 1Ch        ; this
.text:0000341B                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00003420                 add     esp, 4
.text:00003423                 cmp     ebp, esp
.text:00003425                 call    __RTC_CheckEsp
.text:0000342A                 mov     esp, ebp
.text:0000342C                 pop     ebp
.text:0000342D                 retn
.text:0000342D ?Clear@CItem@NGz@NArchive@@QAEXXZ endp
.text:0000342D
.text:0000342D ; ---------------------------------------------------------------------------
.text:0000342E                 align 10h
.text:0000342E _text           ends
.text:0000342E
.text:00003430 ; ===========================================================================
.text:00003430
.text:00003430 ; Segment type: Pure code
.text:00003430 ; Segment permissions: Read/Execute
.text:00003430 _text           segment para public 'CODE' use32
.text:00003430                 assume cs:_text
.text:00003430                 ;org 3430h
.text:00003430 ; COMDAT (pick any)
.text:00003430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003430
.text:00003430 ; =============== S U B R O U T I N E =======================================
.text:00003430
.text:00003430 ; Attributes: bp-based frame
.text:00003430
.text:00003430 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00003430                 public ?Empty@AString@@QAEXXZ
.text:00003430 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+17p
.text:00003430                                         ; NArchive::NGz::CItem::Clear(void)+14p ...
.text:00003430
.text:00003430 var_4           = dword ptr -4
.text:00003430
.text:00003430                 push    ebp
.text:00003431                 mov     ebp, esp
.text:00003433                 push    ecx
.text:00003434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000343B                 mov     [ebp+var_4], ecx
.text:0000343E                 mov     eax, [ebp+var_4]
.text:00003441                 mov     dword ptr [eax+4], 0
.text:00003448                 mov     ecx, [ebp+var_4]
.text:0000344B                 mov     edx, [ecx]
.text:0000344D                 mov     byte ptr [edx], 0
.text:00003450                 mov     esp, ebp
.text:00003452                 pop     ebp
.text:00003453                 retn
.text:00003453 ?Empty@AString@@QAEXXZ endp
.text:00003453
.text:00003453 _text           ends
.text:00003453
.text:00003454 ; ===========================================================================
.text:00003454
.text:00003454 ; Segment type: Pure code
.text:00003454 ; Segment permissions: Read/Execute
.text:00003454 _text           segment para public 'CODE' use32
.text:00003454                 assume cs:_text
.text:00003454                 ;org 3454h
.text:00003454 ; COMDAT (pick any)
.text:00003454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003454
.text:00003454 ; =============== S U B R O U T I N E =======================================
.text:00003454
.text:00003454 ; Attributes: bp-based frame
.text:00003454
.text:00003454 ; bool __thiscall NArchive::NGz::CItem::HeaderCrcIsPresent(NArchive::NGz::CItem *__hidden this)
.text:00003454                 public ?HeaderCrcIsPresent@CItem@NGz@NArchive@@QBE_NXZ
.text:00003454 ?HeaderCrcIsPresent@CItem@NGz@NArchive@@QBE_NXZ proc near
.text:00003454                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+165p
.text:00003454
.text:00003454 var_4           = dword ptr -4
.text:00003454
.text:00003454                 push    ebp
.text:00003455                 mov     ebp, esp
.text:00003457                 push    ecx
.text:00003458                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000345F                 mov     [ebp+var_4], ecx
.text:00003462                 push    2               ; unsigned __int8
.text:00003464                 mov     ecx, [ebp+var_4] ; this
.text:00003467                 call    ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z ; NArchive::NGz::CItem::TestFlag(uchar)
.text:0000346C                 add     esp, 4
.text:0000346F                 cmp     ebp, esp
.text:00003471                 call    __RTC_CheckEsp
.text:00003476                 mov     esp, ebp
.text:00003478                 pop     ebp
.text:00003479                 retn
.text:00003479 ?HeaderCrcIsPresent@CItem@NGz@NArchive@@QBE_NXZ endp
.text:00003479
.text:00003479 ; ---------------------------------------------------------------------------
.text:0000347A                 align 4
.text:0000347A _text           ends
.text:0000347A
.text:0000347C ; ===========================================================================
.text:0000347C
.text:0000347C ; Segment type: Pure code
.text:0000347C ; Segment permissions: Read/Execute
.text:0000347C _text           segment para public 'CODE' use32
.text:0000347C                 assume cs:_text
.text:0000347C                 ;org 347Ch
.text:0000347C ; COMDAT (pick any)
.text:0000347C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000347C
.text:0000347C ; =============== S U B R O U T I N E =======================================
.text:0000347C
.text:0000347C ; Attributes: bp-based frame
.text:0000347C
.text:0000347C ; bool __thiscall NArchive::NGz::CItem::TestFlag(NArchive::NGz::CItem *this, unsigned __int8)
.text:0000347C                 public ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z
.text:0000347C ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z proc near
.text:0000347C                                         ; CODE XREF: NArchive::NGz::CItem::HeaderCrcIsPresent(void)+13p
.text:0000347C                                         ; NArchive::NGz::CItem::ExtraFieldIsPresent(void)+13p ...
.text:0000347C
.text:0000347C var_4           = dword ptr -4
.text:0000347C arg_0           = byte ptr  8
.text:0000347C
.text:0000347C                 push    ebp
.text:0000347D                 mov     ebp, esp
.text:0000347F                 push    ecx
.text:00003480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003487                 mov     [ebp+var_4], ecx
.text:0000348A                 mov     eax, [ebp+var_4]
.text:0000348D                 movzx   eax, byte ptr [eax]
.text:00003490                 movzx   ecx, [ebp+arg_0]
.text:00003494                 and     eax, ecx
.text:00003496                 neg     eax
.text:00003498                 sbb     eax, eax
.text:0000349A                 neg     eax
.text:0000349C                 mov     esp, ebp
.text:0000349E                 pop     ebp
.text:0000349F                 retn    4
.text:0000349F ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z endp
.text:0000349F
.text:0000349F ; ---------------------------------------------------------------------------
.text:000034A2                 align 4
.text:000034A2 _text           ends
.text:000034A2
.text:000034A4 ; ===========================================================================
.text:000034A4
.text:000034A4 ; Segment type: Pure code
.text:000034A4 ; Segment permissions: Read/Execute
.text:000034A4 _text           segment para public 'CODE' use32
.text:000034A4                 assume cs:_text
.text:000034A4                 ;org 34A4h
.text:000034A4 ; COMDAT (pick any)
.text:000034A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034A4
.text:000034A4 ; =============== S U B R O U T I N E =======================================
.text:000034A4
.text:000034A4 ; Attributes: bp-based frame
.text:000034A4
.text:000034A4 ; bool __thiscall NArchive::NGz::CItem::ExtraFieldIsPresent(NArchive::NGz::CItem *__hidden this)
.text:000034A4                 public ?ExtraFieldIsPresent@CItem@NGz@NArchive@@QBE_NXZ
.text:000034A4 ?ExtraFieldIsPresent@CItem@NGz@NArchive@@QBE_NXZ proc near
.text:000034A4                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+B3p
.text:000034A4
.text:000034A4 var_4           = dword ptr -4
.text:000034A4
.text:000034A4                 push    ebp
.text:000034A5                 mov     ebp, esp
.text:000034A7                 push    ecx
.text:000034A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034AF                 mov     [ebp+var_4], ecx
.text:000034B2                 push    4               ; unsigned __int8
.text:000034B4                 mov     ecx, [ebp+var_4] ; this
.text:000034B7                 call    ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z ; NArchive::NGz::CItem::TestFlag(uchar)
.text:000034BC                 add     esp, 4
.text:000034BF                 cmp     ebp, esp
.text:000034C1                 call    __RTC_CheckEsp
.text:000034C6                 mov     esp, ebp
.text:000034C8                 pop     ebp
.text:000034C9                 retn
.text:000034C9 ?ExtraFieldIsPresent@CItem@NGz@NArchive@@QBE_NXZ endp
.text:000034C9
.text:000034C9 ; ---------------------------------------------------------------------------
.text:000034CA                 align 4
.text:000034CA _text           ends
.text:000034CA
.text:000034CC ; ===========================================================================
.text:000034CC
.text:000034CC ; Segment type: Pure code
.text:000034CC ; Segment permissions: Read/Execute
.text:000034CC _text           segment para public 'CODE' use32
.text:000034CC                 assume cs:_text
.text:000034CC                 ;org 34CCh
.text:000034CC ; COMDAT (pick any)
.text:000034CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034CC
.text:000034CC ; =============== S U B R O U T I N E =======================================
.text:000034CC
.text:000034CC ; Attributes: bp-based frame
.text:000034CC
.text:000034CC ; bool __thiscall NArchive::NGz::CItem::NameIsPresent(NArchive::NGz::CItem *__hidden this)
.text:000034CC                 public ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ
.text:000034CC ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ proc near
.text:000034CC                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+FEp
.text:000034CC                                         ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+86p ...
.text:000034CC
.text:000034CC var_4           = dword ptr -4
.text:000034CC
.text:000034CC                 push    ebp
.text:000034CD                 mov     ebp, esp
.text:000034CF                 push    ecx
.text:000034D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034D7                 mov     [ebp+var_4], ecx
.text:000034DA                 push    8               ; unsigned __int8
.text:000034DC                 mov     ecx, [ebp+var_4] ; this
.text:000034DF                 call    ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z ; NArchive::NGz::CItem::TestFlag(uchar)
.text:000034E4                 add     esp, 4
.text:000034E7                 cmp     ebp, esp
.text:000034E9                 call    __RTC_CheckEsp
.text:000034EE                 mov     esp, ebp
.text:000034F0                 pop     ebp
.text:000034F1                 retn
.text:000034F1 ?NameIsPresent@CItem@NGz@NArchive@@QBE_NXZ endp
.text:000034F1
.text:000034F1 ; ---------------------------------------------------------------------------
.text:000034F2                 align 4
.text:000034F2 _text           ends
.text:000034F2
.text:000034F4 ; ===========================================================================
.text:000034F4
.text:000034F4 ; Segment type: Pure code
.text:000034F4 ; Segment permissions: Read/Execute
.text:000034F4 _text           segment para public 'CODE' use32
.text:000034F4                 assume cs:_text
.text:000034F4                 ;org 34F4h
.text:000034F4 ; COMDAT (pick any)
.text:000034F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000034F4
.text:000034F4 ; =============== S U B R O U T I N E =======================================
.text:000034F4
.text:000034F4 ; Attributes: bp-based frame
.text:000034F4
.text:000034F4 ; bool __thiscall NArchive::NGz::CItem::CommentIsPresent(NArchive::NGz::CItem *__hidden this)
.text:000034F4                 public ?CommentIsPresent@CItem@NGz@NArchive@@QBE_NXZ
.text:000034F4 ?CommentIsPresent@CItem@NGz@NArchive@@QBE_NXZ proc near
.text:000034F4                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+132p
.text:000034F4
.text:000034F4 var_4           = dword ptr -4
.text:000034F4
.text:000034F4                 push    ebp
.text:000034F5                 mov     ebp, esp
.text:000034F7                 push    ecx
.text:000034F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000034FF                 mov     [ebp+var_4], ecx
.text:00003502                 push    10h             ; unsigned __int8
.text:00003504                 mov     ecx, [ebp+var_4] ; this
.text:00003507                 call    ?TestFlag@CItem@NGz@NArchive@@ABE_NE@Z ; NArchive::NGz::CItem::TestFlag(uchar)
.text:0000350C                 add     esp, 4
.text:0000350F                 cmp     ebp, esp
.text:00003511                 call    __RTC_CheckEsp
.text:00003516                 mov     esp, ebp
.text:00003518                 pop     ebp
.text:00003519                 retn
.text:00003519 ?CommentIsPresent@CItem@NGz@NArchive@@QBE_NXZ endp
.text:00003519
.text:00003519 ; ---------------------------------------------------------------------------
.text:0000351A                 align 4
.text:0000351A _text           ends
.text:0000351A
.text:0000351C ; ===========================================================================
.text:0000351C
.text:0000351C ; Segment type: Pure code
.text:0000351C ; Segment permissions: Read/Execute
.text:0000351C _text           segment para public 'CODE' use32
.text:0000351C                 assume cs:_text
.text:0000351C                 ;org 351Ch
.text:0000351C ; COMDAT (pick any)
.text:0000351C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000351C
.text:0000351C ; =============== S U B R O U T I N E =======================================
.text:0000351C
.text:0000351C ; Attributes: bp-based frame
.text:0000351C
.text:0000351C ; bool __thiscall NArchive::NGz::CItem::IsSupported(NArchive::NGz::CItem *__hidden this)
.text:0000351C                 public ?IsSupported@CItem@NGz@NArchive@@QBE_NXZ
.text:0000351C ?IsSupported@CItem@NGz@NArchive@@QBE_NXZ proc near
.text:0000351C                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+7Fp
.text:0000351C
.text:0000351C var_4           = dword ptr -4
.text:0000351C
.text:0000351C                 push    ebp
.text:0000351D                 mov     ebp, esp
.text:0000351F                 push    ecx
.text:00003520                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003527                 mov     [ebp+var_4], ecx
.text:0000352A                 mov     eax, [ebp+var_4]
.text:0000352D                 movzx   eax, byte ptr [eax]
.text:00003530                 and     eax, 0E0h
.text:00003535                 neg     eax
.text:00003537                 sbb     eax, eax
.text:00003539                 add     eax, 1
.text:0000353C                 mov     esp, ebp
.text:0000353E                 pop     ebp
.text:0000353F                 retn
.text:0000353F ?IsSupported@CItem@NGz@NArchive@@QBE_NXZ endp
.text:0000353F
.text:0000353F _text           ends
.text:0000353F
.text:00003540 ; ===========================================================================
.text:00003540
.text:00003540 ; Segment type: Pure code
.text:00003540 ; Segment permissions: Read/Execute
.text:00003540 _text           segment para public 'CODE' use32
.text:00003540                 assume cs:_text
.text:00003540                 ;org 3540h
.text:00003540 ; COMDAT (pick any)
.text:00003540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003540
.text:00003540 ; =============== S U B R O U T I N E =======================================
.text:00003540
.text:00003540 ; Attributes: bp-based frame
.text:00003540
.text:00003540 ; public: class AString & __thiscall AString::operator+=(char)
.text:00003540                 public ??YAString@@QAEAAV0@D@Z
.text:00003540 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: NArchive::NGz::ReadString(NCompress::NDeflate::NDecoder::CCOMCoder *,AString &,uint)+6Bp
.text:00003540
.text:00003540 var_C           = dword ptr -0Ch
.text:00003540 var_8           = dword ptr -8
.text:00003540 var_4           = dword ptr -4
.text:00003540 arg_0           = byte ptr  8
.text:00003540
.text:00003540                 push    ebp
.text:00003541                 mov     ebp, esp
.text:00003543                 sub     esp, 0Ch
.text:00003546                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000354D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003554                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000355B                 mov     [ebp+var_4], ecx
.text:0000355E                 mov     eax, [ebp+var_4]
.text:00003561                 mov     ecx, [ebp+var_4]
.text:00003564                 mov     edx, [eax+8]
.text:00003567                 cmp     edx, [ecx+4]
.text:0000356A                 jnz     short loc_3574
.text:0000356C                 mov     ecx, [ebp+var_4] ; this
.text:0000356F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00003574
.text:00003574 loc_3574:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00003574                 mov     eax, [ebp+var_4]
.text:00003577                 mov     ecx, [eax+4]
.text:0000357A                 mov     [ebp+var_8], ecx
.text:0000357D                 mov     edx, [ebp+var_4]
.text:00003580                 mov     eax, [edx]
.text:00003582                 mov     [ebp+var_C], eax
.text:00003585                 mov     ecx, [ebp+var_C]
.text:00003588                 add     ecx, [ebp+var_8]
.text:0000358B                 mov     dl, [ebp+arg_0]
.text:0000358E                 mov     [ecx], dl
.text:00003590                 mov     eax, [ebp+var_8]
.text:00003593                 add     eax, 1
.text:00003596                 mov     [ebp+var_8], eax
.text:00003599                 mov     ecx, [ebp+var_C]
.text:0000359C                 add     ecx, [ebp+var_8]
.text:0000359F                 mov     byte ptr [ecx], 0
.text:000035A2                 mov     edx, [ebp+var_4]
.text:000035A5                 mov     eax, [ebp+var_8]
.text:000035A8                 mov     [edx+4], eax
.text:000035AB                 mov     eax, [ebp+var_4]
.text:000035AE                 add     esp, 0Ch
.text:000035B1                 cmp     ebp, esp
.text:000035B3                 call    __RTC_CheckEsp
.text:000035B8                 mov     esp, ebp
.text:000035BA                 pop     ebp
.text:000035BB                 retn    4
.text:000035BB ??YAString@@QAEAAV0@D@Z endp
.text:000035BB
.text:000035BB ; ---------------------------------------------------------------------------
.text:000035BE                 align 10h
.text:000035BE _text           ends
.text:000035BE
.text:000035C0 ; ===========================================================================
.text:000035C0
.text:000035C0 ; Segment type: Pure code
.text:000035C0 ; Segment permissions: Read/Execute
.text:000035C0 _text           segment para public 'CODE' use32
.text:000035C0                 assume cs:_text
.text:000035C0                 ;org 35C0h
.text:000035C0 ; COMDAT (pick any)
.text:000035C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035C0
.text:000035C0 ; =============== S U B R O U T I N E =======================================
.text:000035C0
.text:000035C0 ; Attributes: bp-based frame
.text:000035C0
.text:000035C0 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:000035C0                 public ?Len@AString@@QBEIXZ
.text:000035C0 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+98p
.text:000035C0
.text:000035C0 var_4           = dword ptr -4
.text:000035C0
.text:000035C0                 push    ebp
.text:000035C1                 mov     ebp, esp
.text:000035C3                 push    ecx
.text:000035C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035CB                 mov     [ebp+var_4], ecx
.text:000035CE                 mov     eax, [ebp+var_4]
.text:000035D1                 mov     eax, [eax+4]
.text:000035D4                 mov     esp, ebp
.text:000035D6                 pop     ebp
.text:000035D7                 retn
.text:000035D7 ?Len@AString@@QBEIXZ endp
.text:000035D7
.text:000035D7 _text           ends
.text:000035D7
.text:000035D8 ; ===========================================================================
.text:000035D8
.text:000035D8 ; Segment type: Pure code
.text:000035D8 ; Segment permissions: Read/Execute
.text:000035D8 _text           segment para public 'CODE' use32
.text:000035D8                 assume cs:_text
.text:000035D8                 ;org 35D8h
.text:000035D8 ; COMDAT (pick any)
.text:000035D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000035D8
.text:000035D8 ; =============== S U B R O U T I N E =======================================
.text:000035D8
.text:000035D8 ; Attributes: bp-based frame
.text:000035D8
.text:000035D8 ; public: __thiscall AString::operator char const *(void)const
.text:000035D8                 public ??BAString@@QBEPBDXZ
.text:000035D8 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+A7p
.text:000035D8
.text:000035D8 var_4           = dword ptr -4
.text:000035D8
.text:000035D8                 push    ebp
.text:000035D9                 mov     ebp, esp
.text:000035DB                 push    ecx
.text:000035DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035E3                 mov     [ebp+var_4], ecx
.text:000035E6                 mov     eax, [ebp+var_4]
.text:000035E9                 mov     eax, [eax]
.text:000035EB                 mov     esp, ebp
.text:000035ED                 pop     ebp
.text:000035EE                 retn
.text:000035EE ??BAString@@QBEPBDXZ endp
.text:000035EE
.text:000035EE ; ---------------------------------------------------------------------------
.text:000035EF                 align 10h
.text:000035EF _text           ends
.text:000035EF
.text$x:000035F0 ; ===========================================================================
.text$x:000035F0
.text$x:000035F0 ; Segment type: Pure code
.text$x:000035F0 ; Segment permissions: Read/Execute
.text$x:000035F0 _text$x         segment para public 'CODE' use32
.text$x:000035F0                 assume cs:_text$x
.text$x:000035F0                 ;org 35F0h
.text$x:000035F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000035F0
.text$x:000035F0 ; =============== S U B R O U T I N E =======================================
.text$x:000035F0
.text$x:000035F0
.text$x:000035F0 __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:000035F0                                         ; DATA XREF: .xdata$x:00003844o
.text$x:000035F0                 lea     ecx, [ebp-24h]  ; this
.text$x:000035F3                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000035F3 __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:000035F3
.text$x:000035F8
.text$x:000035F8 ; =============== S U B R O U T I N E =======================================
.text$x:000035F8
.text$x:000035F8
.text$x:000035F8 __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:000035F8                                         ; DATA XREF: .xdata$x:0000384Co
.text$x:000035F8                 lea     ecx, [ebp-3Ch]  ; this
.text$x:000035FB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000035FB __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:000035FB
.text$x:00003600
.text$x:00003600 ; =============== S U B R O U T I N E =======================================
.text$x:00003600
.text$x:00003600
.text$x:00003600 __ehhandler$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:00003600                                         ; DATA XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5o
.text$x:00003600
.text$x:00003600 arg_4           = dword ptr  8
.text$x:00003600
.text$x:00003600                 mov     edx, [esp+arg_4]
.text$x:00003604                 lea     eax, [edx+0Ch]
.text$x:00003607                 mov     ecx, [edx-60h]
.text$x:0000360A                 xor     ecx, eax
.text$x:0000360C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003611                 mov     eax, offset __ehfuncinfo$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:00003616                 jmp     ___CxxFrameHandler3
.text$x:00003616 __ehhandler$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:00003616
.text$x:0000361B
.text$x:0000361B ; =============== S U B R O U T I N E =======================================
.text$x:0000361B
.text$x:0000361B
.text$x:0000361B __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:0000361B                                         ; DATA XREF: .xdata$x:000038ACo
.text$x:0000361B                 lea     ecx, [ebp-24h]  ; this
.text$x:0000361E                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000361E __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:0000361E
.text$x:00003623
.text$x:00003623 ; =============== S U B R O U T I N E =======================================
.text$x:00003623
.text$x:00003623
.text$x:00003623 __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:00003623                                         ; DATA XREF: .xdata$x:000038B4o
.text$x:00003623                 lea     ecx, [ebp-44h]  ; this
.text$x:00003626                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003626 __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:00003626
.text$x:0000362B
.text$x:0000362B ; =============== S U B R O U T I N E =======================================
.text$x:0000362B
.text$x:0000362B
.text$x:0000362B __ehhandler$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:0000362B                                         ; DATA XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:0000362B
.text$x:0000362B arg_4           = dword ptr  8
.text$x:0000362B
.text$x:0000362B                 mov     edx, [esp+arg_4]
.text$x:0000362F                 lea     eax, [edx+0Ch]
.text$x:00003632                 mov     ecx, [edx-74h]
.text$x:00003635                 xor     ecx, eax
.text$x:00003637                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000363C                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:00003641                 jmp     ___CxxFrameHandler3
.text$x:00003641 __ehhandler$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:00003641
.text$x:00003646
.text$x:00003646 ; =============== S U B R O U T I N E =======================================
.text$x:00003646
.text$x:00003646
.text$x:00003646 __ehhandler$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00003646                                         ; DATA XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00003646
.text$x:00003646 arg_4           = dword ptr  8
.text$x:00003646
.text$x:00003646                 mov     edx, [esp+arg_4]
.text$x:0000364A                 lea     eax, [edx+0Ch]
.text$x:0000364D                 mov     ecx, [edx-40h]
.text$x:00003650                 xor     ecx, eax
.text$x:00003652                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003657                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:0000365C                 jmp     ___CxxFrameHandler3
.text$x:0000365C __ehhandler$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:0000365C
.text$x:00003661
.text$x:00003661 ; =============== S U B R O U T I N E =======================================
.text$x:00003661
.text$x:00003661
.text$x:00003661 __ehhandler$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text$x:00003661                                         ; DATA XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+5o
.text$x:00003661
.text$x:00003661 arg_4           = dword ptr  8
.text$x:00003661
.text$x:00003661                 mov     edx, [esp+arg_4]
.text$x:00003665                 lea     eax, [edx+0Ch]
.text$x:00003668                 mov     ecx, [edx-3Ch]
.text$x:0000366B                 xor     ecx, eax
.text$x:0000366D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003672                 mov     eax, offset __ehfuncinfo$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text$x:00003677                 jmp     ___CxxFrameHandler3
.text$x:00003677 __ehhandler$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text$x:00003677
.text$x:0000367C
.text$x:0000367C ; =============== S U B R O U T I N E =======================================
.text$x:0000367C
.text$x:0000367C
.text$x:0000367C __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:0000367C                                         ; DATA XREF: .xdata$x:00003A40o
.text$x:0000367C                 lea     ecx, [ebp-18h]
.text$x:0000367F                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:0000367F __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:0000367F
.text$x:00003684
.text$x:00003684 ; =============== S U B R O U T I N E =======================================
.text$x:00003684
.text$x:00003684
.text$x:00003684 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00003684                                         ; DATA XREF: .xdata$x:00003A48o
.text$x:00003684                 mov     eax, [ebp-0CCh]
.text$x:0000368A                 push    eax             ; void *
.text$x:0000368B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003690                 pop     ecx
.text$x:00003691                 retn
.text$x:00003691 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00003691
.text$x:00003692
.text$x:00003692 ; =============== S U B R O U T I N E =======================================
.text$x:00003692
.text$x:00003692
.text$x:00003692 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00003692                                         ; DATA XREF: .xdata$x:00003A50o
.text$x:00003692                 lea     ecx, [ebp-30h]
.text$x:00003695                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00003695 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00003695
.text$x:0000369A
.text$x:0000369A ; =============== S U B R O U T I N E =======================================
.text$x:0000369A
.text$x:0000369A
.text$x:0000369A __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:0000369A                                         ; DATA XREF: .xdata$x:00003A58o
.text$x:0000369A                 mov     eax, [ebp-0D4h]
.text$x:000036A0                 push    eax             ; void *
.text$x:000036A1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000036A6                 pop     ecx
.text$x:000036A7                 retn
.text$x:000036A7 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:000036A7
.text$x:000036A8
.text$x:000036A8 ; =============== S U B R O U T I N E =======================================
.text$x:000036A8
.text$x:000036A8
.text$x:000036A8 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:000036A8                                         ; DATA XREF: .xdata$x:00003A60o
.text$x:000036A8                 lea     ecx, [ebp-40h]
.text$x:000036AB                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:000036AB __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:000036AB
.text$x:000036B0
.text$x:000036B0 ; =============== S U B R O U T I N E =======================================
.text$x:000036B0
.text$x:000036B0
.text$x:000036B0 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:000036B0                                         ; DATA XREF: .xdata$x:00003A70o
.text$x:000036B0                 lea     ecx, [ebp-0A0h] ; this
.text$x:000036B6                 jmp     ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text$x:000036B6 __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:000036B6
.text$x:000036BB
.text$x:000036BB ; =============== S U B R O U T I N E =======================================
.text$x:000036BB
.text$x:000036BB
.text$x:000036BB __ehhandler$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:000036BB                                         ; DATA XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:000036BB
.text$x:000036BB arg_4           = dword ptr  8
.text$x:000036BB
.text$x:000036BB                 mov     edx, [esp+arg_4]
.text$x:000036BF                 lea     eax, [edx+0Ch]
.text$x:000036C2                 mov     ecx, [edx-1A4h]
.text$x:000036C8                 xor     ecx, eax
.text$x:000036CA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036CF                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:000036D4                 jmp     ___CxxFrameHandler3
.text$x:000036D4 __ehhandler$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:000036D4
.text$x:000036D9
.text$x:000036D9 ; =============== S U B R O U T I N E =======================================
.text$x:000036D9
.text$x:000036D9
.text$x:000036D9 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:000036D9                                         ; DATA XREF: .xdata$x:00003AD8o
.text$x:000036D9                 lea     ecx, [ebp-64h]  ; this
.text$x:000036DC                 jmp     ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text$x:000036DC __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:000036DC
.text$x:000036E1
.text$x:000036E1 ; =============== S U B R O U T I N E =======================================
.text$x:000036E1
.text$x:000036E1
.text$x:000036E1 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:000036E1                                         ; DATA XREF: .xdata$x:00003AE0o
.text$x:000036E1                 lea     ecx, [ebp-7Ch]  ; this
.text$x:000036E4                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000036E4 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:000036E4
.text$x:000036E9
.text$x:000036E9 ; =============== S U B R O U T I N E =======================================
.text$x:000036E9
.text$x:000036E9
.text$x:000036E9 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:000036E9                                         ; DATA XREF: .xdata$x:00003AE8o
.text$x:000036E9                 lea     ecx, [ebp-98h]  ; this
.text$x:000036EF                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000036EF __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:000036EF
.text$x:000036F4
.text$x:000036F4 ; =============== S U B R O U T I N E =======================================
.text$x:000036F4
.text$x:000036F4
.text$x:000036F4 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:000036F4                                         ; DATA XREF: .xdata$x:00003AF0o
.text$x:000036F4                 lea     ecx, [ebp-0B0h] ; this
.text$x:000036FA                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000036FA __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:000036FA
.text$x:000036FF
.text$x:000036FF ; =============== S U B R O U T I N E =======================================
.text$x:000036FF
.text$x:000036FF
.text$x:000036FF __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:000036FF                                         ; DATA XREF: .xdata$x:00003AF8o
.text$x:000036FF                 lea     ecx, [ebp-13Ch] ; this
.text$x:00003705                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003705 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:00003705
.text$x:0000370A
.text$x:0000370A ; =============== S U B R O U T I N E =======================================
.text$x:0000370A
.text$x:0000370A
.text$x:0000370A __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 proc near
.text$x:0000370A                                         ; DATA XREF: .xdata$x:00003B00o
.text$x:0000370A                 lea     ecx, [ebp-0CCh] ; this
.text$x:00003710                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00003710 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 endp
.text$x:00003710
.text$x:00003715
.text$x:00003715 ; =============== S U B R O U T I N E =======================================
.text$x:00003715
.text$x:00003715
.text$x:00003715 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 proc near
.text$x:00003715                                         ; DATA XREF: .xdata$x:00003B08o
.text$x:00003715                 lea     ecx, [ebp-0F0h] ; this
.text$x:0000371B                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000371B __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 endp
.text$x:0000371B
.text$x:00003720
.text$x:00003720 ; =============== S U B R O U T I N E =======================================
.text$x:00003720
.text$x:00003720
.text$x:00003720 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 proc near
.text$x:00003720                                         ; DATA XREF: .xdata$x:00003B10o
.text$x:00003720                 mov     eax, [ebp-164h]
.text$x:00003726                 push    eax             ; void *
.text$x:00003727                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000372C                 pop     ecx
.text$x:0000372D                 retn
.text$x:0000372D __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 endp
.text$x:0000372D
.text$x:0000372E
.text$x:0000372E ; =============== S U B R O U T I N E =======================================
.text$x:0000372E
.text$x:0000372E
.text$x:0000372E __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 proc near
.text$x:0000372E                                         ; DATA XREF: .xdata$x:00003B18o
.text$x:0000372E                 lea     ecx, [ebp-104h]
.text$x:00003734                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00003734 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 endp
.text$x:00003734
.text$x:00003739
.text$x:00003739 ; =============== S U B R O U T I N E =======================================
.text$x:00003739
.text$x:00003739
.text$x:00003739 __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 proc near
.text$x:00003739                                         ; DATA XREF: .xdata$x:00003B20o
.text$x:00003739                 lea     ecx, [ebp-110h]
.text$x:0000373F                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:0000373F __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 endp
.text$x:0000373F
.text$x:00003744
.text$x:00003744 ; =============== S U B R O U T I N E =======================================
.text$x:00003744
.text$x:00003744
.text$x:00003744 __ehhandler$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text$x:00003744                                         ; DATA XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5o
.text$x:00003744
.text$x:00003744 arg_4           = dword ptr  8
.text$x:00003744
.text$x:00003744                 mov     edx, [esp+arg_4]
.text$x:00003748                 lea     eax, [edx+0Ch]
.text$x:0000374B                 mov     ecx, [edx-200h]
.text$x:00003751                 xor     ecx, eax
.text$x:00003753                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003758                 mov     eax, offset __ehfuncinfo$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text$x:0000375D                 jmp     ___CxxFrameHandler3
.text$x:0000375D __ehhandler$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text$x:0000375D
.text$x:00003762
.text$x:00003762 ; =============== S U B R O U T I N E =======================================
.text$x:00003762
.text$x:00003762
.text$x:00003762 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$0 proc near
.text$x:00003762                                         ; DATA XREF: .xdata$x:00003B54o
.text$x:00003762                 lea     ecx, [ebp-2Ch]
.text$x:00003765                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003765 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$0 endp
.text$x:00003765
.text$x:0000376A
.text$x:0000376A ; =============== S U B R O U T I N E =======================================
.text$x:0000376A
.text$x:0000376A
.text$x:0000376A __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$1 proc near
.text$x:0000376A                                         ; DATA XREF: .xdata$x:00003B5Co
.text$x:0000376A                 mov     eax, [ebp-80h]
.text$x:0000376D                 push    eax             ; void *
.text$x:0000376E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003773                 pop     ecx
.text$x:00003774                 retn
.text$x:00003774 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$1 endp
.text$x:00003774
.text$x:00003775
.text$x:00003775 ; =============== S U B R O U T I N E =======================================
.text$x:00003775
.text$x:00003775
.text$x:00003775 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00003775                                         ; DATA XREF: .xdata$x:00003B64o
.text$x:00003775                 lea     ecx, [ebp-40h]
.text$x:00003778                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003778 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:00003778
.text$x:0000377D
.text$x:0000377D ; =============== S U B R O U T I N E =======================================
.text$x:0000377D
.text$x:0000377D
.text$x:0000377D __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:0000377D                                         ; DATA XREF: .xdata$x:00003B6Co
.text$x:0000377D                 mov     eax, [ebp-88h]
.text$x:00003783                 push    eax             ; void *
.text$x:00003784                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003789                 pop     ecx
.text$x:0000378A                 retn
.text$x:0000378A __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:0000378A
.text$x:0000378B
.text$x:0000378B ; =============== S U B R O U T I N E =======================================
.text$x:0000378B
.text$x:0000378B
.text$x:0000378B __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:0000378B                                         ; DATA XREF: .xdata$x:00003B74o
.text$x:0000378B                 lea     ecx, [ebp-50h]
.text$x:0000378E                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000378E __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:0000378E
.text$x:00003793
.text$x:00003793 ; =============== S U B R O U T I N E =======================================
.text$x:00003793
.text$x:00003793
.text$x:00003793 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00003793                                         ; DATA XREF: .xdata$x:00003B7Co
.text$x:00003793                 mov     eax, [ebp-94h]
.text$x:00003799                 push    eax             ; void *
.text$x:0000379A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000379F                 pop     ecx
.text$x:000037A0                 retn
.text$x:000037A0 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:000037A0
.text$x:000037A1
.text$x:000037A1 ; =============== S U B R O U T I N E =======================================
.text$x:000037A1
.text$x:000037A1
.text$x:000037A1 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:000037A1                                         ; DATA XREF: .xdata$x:00003B84o
.text$x:000037A1                 lea     ecx, [ebp-64h]
.text$x:000037A4                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000037A4 __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:000037A4
.text$x:000037A9
.text$x:000037A9 ; =============== S U B R O U T I N E =======================================
.text$x:000037A9
.text$x:000037A9
.text$x:000037A9 __ehhandler$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z proc near
.text$x:000037A9                                         ; DATA XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+5o
.text$x:000037A9
.text$x:000037A9 arg_4           = dword ptr  8
.text$x:000037A9
.text$x:000037A9                 mov     edx, [esp+arg_4]
.text$x:000037AD                 lea     eax, [edx+0Ch]
.text$x:000037B0                 mov     ecx, [edx-0B8h]
.text$x:000037B6                 xor     ecx, eax
.text$x:000037B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037BD                 mov     eax, offset __ehfuncinfo$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z
.text$x:000037C2                 jmp     ___CxxFrameHandler3
.text$x:000037C2 __ehhandler$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z endp
.text$x:000037C2
.text$x:000037C7
.text$x:000037C7 ; =============== S U B R O U T I N E =======================================
.text$x:000037C7
.text$x:000037C7
.text$x:000037C7 __unwindfunclet$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:000037C7                                         ; DATA XREF: .xdata$x:00003B8Co
.text$x:000037C7                 mov     eax, [ebp-14h]
.text$x:000037CA                 push    eax             ; void *
.text$x:000037CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000037D0                 pop     ecx
.text$x:000037D1                 retn
.text$x:000037D1 __unwindfunclet$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:000037D1
.text$x:000037D2
.text$x:000037D2 ; =============== S U B R O U T I N E =======================================
.text$x:000037D2
.text$x:000037D2
.text$x:000037D2 __ehhandler$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:000037D2                                         ; DATA XREF: NArchive::NGz::CreateArc(void)+5o
.text$x:000037D2
.text$x:000037D2 arg_4           = dword ptr  8
.text$x:000037D2
.text$x:000037D2                 mov     edx, [esp+arg_4]
.text$x:000037D6                 lea     eax, [edx+0Ch]
.text$x:000037D9                 mov     ecx, [edx-10h]
.text$x:000037DC                 xor     ecx, eax
.text$x:000037DE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000037E3                 mov     eax, offset __ehfuncinfo$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ
.text$x:000037E8                 jmp     ___CxxFrameHandler3
.text$x:000037E8 __ehhandler$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:000037E8
.text$x:000037ED
.text$x:000037ED ; =============== S U B R O U T I N E =======================================
.text$x:000037ED
.text$x:000037ED
.text$x:000037ED __unwindfunclet$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ$0 proc near
.text$x:000037ED                                         ; DATA XREF: .xdata$x:00003BB8o
.text$x:000037ED                 mov     eax, [ebp-14h]
.text$x:000037F0                 push    eax             ; void *
.text$x:000037F1                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000037F6                 pop     ecx
.text$x:000037F7                 retn
.text$x:000037F7 __unwindfunclet$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ$0 endp
.text$x:000037F7
.text$x:000037F8
.text$x:000037F8 ; =============== S U B R O U T I N E =======================================
.text$x:000037F8
.text$x:000037F8
.text$x:000037F8 __ehhandler$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ proc near
.text$x:000037F8                                         ; DATA XREF: NArchive::NGz::CreateArcOut(void)+5o
.text$x:000037F8
.text$x:000037F8 arg_4           = dword ptr  8
.text$x:000037F8
.text$x:000037F8                 mov     edx, [esp+arg_4]
.text$x:000037FC                 lea     eax, [edx+0Ch]
.text$x:000037FF                 mov     ecx, [edx-14h]
.text$x:00003802                 xor     ecx, eax
.text$x:00003804                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003809                 mov     eax, offset __ehfuncinfo$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ
.text$x:0000380E                 jmp     ___CxxFrameHandler3
.text$x:0000380E __ehhandler$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ endp
.text$x:0000380E
.text$x:0000380E ; ---------------------------------------------------------------------------
.text$x:00003813                 align 4
.text$x:00003813 _text$x         ends
.text$x:00003813
.xdata$x:00003814 ; ===========================================================================
.xdata$x:00003814
.xdata$x:00003814 ; Segment type: Pure data
.xdata$x:00003814 ; Segment permissions: Read
.xdata$x:00003814 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003814                 assume cs:_xdata$x
.xdata$x:00003814                 ;org 3814h
.xdata$x:00003814 __catchsym$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 dd offset $SG70805+4
.xdata$x:00003814                                         ; DATA XREF: .xdata$x:00003834o
.xdata$x:00003814                                         ; "stem"
.xdata$x:00003818                 align 10h
.xdata$x:00003820                 dd offset __catch$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00003824 __tryblocktable$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00003824                                         ; DATA XREF: .xdata$x:00003868o
.xdata$x:00003825                 db    0
.xdata$x:00003826                 db    0
.xdata$x:00003827                 db    0
.xdata$x:00003828                 db    2
.xdata$x:00003829                 db    0
.xdata$x:0000382A                 db    0
.xdata$x:0000382B                 db    0
.xdata$x:0000382C                 db    3
.xdata$x:0000382D                 db    0
.xdata$x:0000382E                 db    0
.xdata$x:0000382F                 db    0
.xdata$x:00003830                 db    1
.xdata$x:00003831                 db    0
.xdata$x:00003832                 db    0
.xdata$x:00003833                 db    0
.xdata$x:00003834                 dd offset __catchsym$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4
.xdata$x:00003838 __unwindtable$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00003838                                         ; DATA XREF: .xdata$x:00003860o
.xdata$x:00003839                 db 0FFh
.xdata$x:0000383A                 db 0FFh
.xdata$x:0000383B                 db 0FFh
.xdata$x:0000383C                 db    0
.xdata$x:0000383D                 db    0
.xdata$x:0000383E                 db    0
.xdata$x:0000383F                 db    0
.xdata$x:00003840                 db    0
.xdata$x:00003841                 db    0
.xdata$x:00003842                 db    0
.xdata$x:00003843                 db    0
.xdata$x:00003844                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00003848                 db    1
.xdata$x:00003849                 db    0
.xdata$x:0000384A                 db    0
.xdata$x:0000384B                 db    0
.xdata$x:0000384C                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00003850                 db 0FFh
.xdata$x:00003851                 db 0FFh
.xdata$x:00003852                 db 0FFh
.xdata$x:00003853                 db 0FFh
.xdata$x:00003854                 db    0
.xdata$x:00003855                 db    0
.xdata$x:00003856                 db    0
.xdata$x:00003857                 db    0
.xdata$x:00003858 __ehfuncinfo$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00003858                                         ; DATA XREF: __ehhandler$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+11o
.xdata$x:00003859                 db    5
.xdata$x:0000385A                 db  93h ; Ã´
.xdata$x:0000385B                 db  19h
.xdata$x:0000385C                 db    4
.xdata$x:0000385D                 db    0
.xdata$x:0000385E                 db    0
.xdata$x:0000385F                 db    0
.xdata$x:00003860                 dd offset __unwindtable$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00003864                 db    1
.xdata$x:00003865                 db    0
.xdata$x:00003866                 db    0
.xdata$x:00003867                 db    0
.xdata$x:00003868                 dd offset __tryblocktable$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:0000386C                 db    0
.xdata$x:0000386D                 db    0
.xdata$x:0000386E                 db    0
.xdata$x:0000386F                 db    0
.xdata$x:00003870                 db    0
.xdata$x:00003871                 db    0
.xdata$x:00003872                 db    0
.xdata$x:00003873                 db    0
.xdata$x:00003874                 db    0
.xdata$x:00003875                 db    0
.xdata$x:00003876                 db    0
.xdata$x:00003877                 db    0
.xdata$x:00003878                 db    1
.xdata$x:00003879                 db    0
.xdata$x:0000387A                 db    0
.xdata$x:0000387B                 db    0
.xdata$x:0000387C __catchsym$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 dd offset $SG70805+4
.xdata$x:0000387C                                         ; DATA XREF: .xdata$x:0000389Co
.xdata$x:0000387C                                         ; "stem"
.xdata$x:00003880                 db    0
.xdata$x:00003881                 db    0
.xdata$x:00003882                 db    0
.xdata$x:00003883                 db    0
.xdata$x:00003884                 db    0
.xdata$x:00003885                 db    0
.xdata$x:00003886                 db    0
.xdata$x:00003887                 db    0
.xdata$x:00003888                 dd offset __catch$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:0000388C __tryblocktable$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:0000388C                                         ; DATA XREF: .xdata$x:000038D0o
.xdata$x:0000388D                 db    0
.xdata$x:0000388E                 db    0
.xdata$x:0000388F                 db    0
.xdata$x:00003890                 db    2
.xdata$x:00003891                 db    0
.xdata$x:00003892                 db    0
.xdata$x:00003893                 db    0
.xdata$x:00003894                 db    3
.xdata$x:00003895                 db    0
.xdata$x:00003896                 db    0
.xdata$x:00003897                 db    0
.xdata$x:00003898                 db    1
.xdata$x:00003899                 db    0
.xdata$x:0000389A                 db    0
.xdata$x:0000389B                 db    0
.xdata$x:0000389C                 dd offset __catchsym$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
.xdata$x:000038A0 __unwindtable$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:000038A0                                         ; DATA XREF: .xdata$x:000038C8o
.xdata$x:000038A1                 db 0FFh
.xdata$x:000038A2                 db 0FFh
.xdata$x:000038A3                 db 0FFh
.xdata$x:000038A4                 db    0
.xdata$x:000038A5                 db    0
.xdata$x:000038A6                 db    0
.xdata$x:000038A7                 db    0
.xdata$x:000038A8                 db    0
.xdata$x:000038A9                 db    0
.xdata$x:000038AA                 db    0
.xdata$x:000038AB                 db    0
.xdata$x:000038AC                 dd offset __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:000038B0                 db    1
.xdata$x:000038B1                 db    0
.xdata$x:000038B2                 db    0
.xdata$x:000038B3                 db    0
.xdata$x:000038B4                 dd offset __unwindfunclet$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:000038B8                 db 0FFh
.xdata$x:000038B9                 db 0FFh
.xdata$x:000038BA                 db 0FFh
.xdata$x:000038BB                 db 0FFh
.xdata$x:000038BC                 db    0
.xdata$x:000038BD                 db    0
.xdata$x:000038BE                 db    0
.xdata$x:000038BF                 db    0
.xdata$x:000038C0 __ehfuncinfo$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:000038C0                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+11o
.xdata$x:000038C1                 db    5
.xdata$x:000038C2                 db  93h ; Ã´
.xdata$x:000038C3                 db  19h
.xdata$x:000038C4                 db    4
.xdata$x:000038C5                 db    0
.xdata$x:000038C6                 db    0
.xdata$x:000038C7                 db    0
.xdata$x:000038C8                 dd offset __unwindtable$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000038CC                 db    1
.xdata$x:000038CD                 db    0
.xdata$x:000038CE                 db    0
.xdata$x:000038CF                 db    0
.xdata$x:000038D0                 dd offset __tryblocktable$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:000038D4                 align 10h
.xdata$x:000038E0                 db    1
.xdata$x:000038E1                 db    0
.xdata$x:000038E2                 db    0
.xdata$x:000038E3                 db    0
.xdata$x:000038E4 __catchsym$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset $SG70805+4
.xdata$x:000038E4                                         ; DATA XREF: .xdata$x:00003914o
.xdata$x:000038E4                                         ; "stem"
.xdata$x:000038E8                 align 10h
.xdata$x:000038F0                 dd offset __catch$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:000038F4 __unwindtable$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:000038F4                                         ; DATA XREF: .xdata$x:00003920o
.xdata$x:000038F5                 db 0FFh
.xdata$x:000038F6                 db 0FFh
.xdata$x:000038F7                 db 0FFh
.xdata$x:000038F8                 db    0
.xdata$x:000038F9                 db    0
.xdata$x:000038FA                 db    0
.xdata$x:000038FB                 db    0
.xdata$x:000038FC                 db 0FFh
.xdata$x:000038FD                 db 0FFh
.xdata$x:000038FE                 db 0FFh
.xdata$x:000038FF                 db 0FFh
.xdata$x:00003900                 db    0
.xdata$x:00003901                 db    0
.xdata$x:00003902                 db    0
.xdata$x:00003903                 db    0
.xdata$x:00003904 __tryblocktable$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00003904                                         ; DATA XREF: .xdata$x:00003928o
.xdata$x:00003905                 db    0
.xdata$x:00003906                 db    0
.xdata$x:00003907                 db    0
.xdata$x:00003908                 db    0
.xdata$x:00003909                 db    0
.xdata$x:0000390A                 db    0
.xdata$x:0000390B                 db    0
.xdata$x:0000390C                 db    1
.xdata$x:0000390D                 db    0
.xdata$x:0000390E                 db    0
.xdata$x:0000390F                 db    0
.xdata$x:00003910                 db    1
.xdata$x:00003911                 db    0
.xdata$x:00003912                 db    0
.xdata$x:00003913                 db    0
.xdata$x:00003914                 dd offset __catchsym$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00003918 __ehfuncinfo$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00003918                                         ; DATA XREF: __ehhandler$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+11o
.xdata$x:00003919                 db    5
.xdata$x:0000391A                 db  93h ; Ã´
.xdata$x:0000391B                 db  19h
.xdata$x:0000391C                 db    2
.xdata$x:0000391D                 db    0
.xdata$x:0000391E                 db    0
.xdata$x:0000391F                 db    0
.xdata$x:00003920                 dd offset __unwindtable$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00003924                 db    1
.xdata$x:00003925                 db    0
.xdata$x:00003926                 db    0
.xdata$x:00003927                 db    0
.xdata$x:00003928                 dd offset __tryblocktable$?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:0000392C                 db    0
.xdata$x:0000392D                 db    0
.xdata$x:0000392E                 db    0
.xdata$x:0000392F                 db    0
.xdata$x:00003930                 db    0
.xdata$x:00003931                 db    0
.xdata$x:00003932                 db    0
.xdata$x:00003933                 db    0
.xdata$x:00003934                 db    0
.xdata$x:00003935                 db    0
.xdata$x:00003936                 db    0
.xdata$x:00003937                 db    0
.xdata$x:00003938                 db    1
.xdata$x:00003939                 db    0
.xdata$x:0000393A                 db    0
.xdata$x:0000393B                 db    0
.xdata$x:0000393C __catchsym$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$5 dd offset $SG70805+4
.xdata$x:0000393C                                         ; DATA XREF: .xdata$x:000039C4o
.xdata$x:0000393C                                         ; "stem"
.xdata$x:00003940                 db    0
.xdata$x:00003941                 db    0
.xdata$x:00003942                 db    0
.xdata$x:00003943                 db    0
.xdata$x:00003944                 db    0
.xdata$x:00003945                 db    0
.xdata$x:00003946                 db    0
.xdata$x:00003947                 db    0
.xdata$x:00003948                 dd offset __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$2
.xdata$x:0000394C __catchsym$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$4 db    9
.xdata$x:0000394C                                         ; DATA XREF: .xdata$x:000039B0o
.xdata$x:0000394D                 db    0
.xdata$x:0000394E                 db    0
.xdata$x:0000394F                 db    0
.xdata$x:00003950                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00003954                 db 0E4h ; S
.xdata$x:00003955                 db 0FFh
.xdata$x:00003956                 db 0FFh
.xdata$x:00003957                 db 0FFh
.xdata$x:00003958                 dd offset __catch$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$0
.xdata$x:0000395C __unwindtable$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z db 0FFh
.xdata$x:0000395C                                         ; DATA XREF: .xdata$x:00003984o
.xdata$x:0000395D                 db 0FFh
.xdata$x:0000395E                 db 0FFh
.xdata$x:0000395F                 db 0FFh
.xdata$x:00003960                 db    0
.xdata$x:00003961                 db    0
.xdata$x:00003962                 db    0
.xdata$x:00003963                 db    0
.xdata$x:00003964                 db    0
.xdata$x:00003965                 db    0
.xdata$x:00003966                 db    0
.xdata$x:00003967                 db    0
.xdata$x:00003968                 db    0
.xdata$x:00003969                 db    0
.xdata$x:0000396A                 db    0
.xdata$x:0000396B                 db    0
.xdata$x:0000396C                 db    0
.xdata$x:0000396D                 db    0
.xdata$x:0000396E                 db    0
.xdata$x:0000396F                 db    0
.xdata$x:00003970                 db    0
.xdata$x:00003971                 db    0
.xdata$x:00003972                 db    0
.xdata$x:00003973                 db    0
.xdata$x:00003974                 db 0FFh
.xdata$x:00003975                 db 0FFh
.xdata$x:00003976                 db 0FFh
.xdata$x:00003977                 db 0FFh
.xdata$x:00003978                 db    0
.xdata$x:00003979                 db    0
.xdata$x:0000397A                 db    0
.xdata$x:0000397B                 db    0
.xdata$x:0000397C __ehfuncinfo$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z db  22h ; "
.xdata$x:0000397C                                         ; DATA XREF: __ehhandler$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z+11o
.xdata$x:0000397D                 db    5
.xdata$x:0000397E                 db  93h ; Ã´
.xdata$x:0000397F                 db  19h
.xdata$x:00003980                 db    4
.xdata$x:00003981                 db    0
.xdata$x:00003982                 db    0
.xdata$x:00003983                 db    0
.xdata$x:00003984                 dd offset __unwindtable$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.xdata$x:00003988                 db    2
.xdata$x:00003989                 db    0
.xdata$x:0000398A                 db    0
.xdata$x:0000398B                 db    0
.xdata$x:0000398C                 dd offset __tryblocktable$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z
.xdata$x:00003990                 db    0
.xdata$x:00003991                 db    0
.xdata$x:00003992                 db    0
.xdata$x:00003993                 db    0
.xdata$x:00003994                 db    0
.xdata$x:00003995                 db    0
.xdata$x:00003996                 db    0
.xdata$x:00003997                 db    0
.xdata$x:00003998                 db    0
.xdata$x:00003999                 db    0
.xdata$x:0000399A                 db    0
.xdata$x:0000399B                 db    0
.xdata$x:0000399C                 db    1
.xdata$x:0000399D                 db    0
.xdata$x:0000399E                 db    0
.xdata$x:0000399F                 db    0
.xdata$x:000039A0 __tryblocktable$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z db    1
.xdata$x:000039A0                                         ; DATA XREF: .xdata$x:0000398Co
.xdata$x:000039A1                 db    0
.xdata$x:000039A2                 db    0
.xdata$x:000039A3                 db    0
.xdata$x:000039A4                 db    1
.xdata$x:000039A5                 db    0
.xdata$x:000039A6                 db    0
.xdata$x:000039A7                 db    0
.xdata$x:000039A8                 db    2
.xdata$x:000039A9                 db    0
.xdata$x:000039AA                 db    0
.xdata$x:000039AB                 db    0
.xdata$x:000039AC                 db    1
.xdata$x:000039AD                 db    0
.xdata$x:000039AE                 db    0
.xdata$x:000039AF                 db    0
.xdata$x:000039B0                 dd offset __catchsym$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$4
.xdata$x:000039B4                 align 8
.xdata$x:000039B8                 db    2
.xdata$x:000039B9                 db    0
.xdata$x:000039BA                 db    0
.xdata$x:000039BB                 db    0
.xdata$x:000039BC                 db    3
.xdata$x:000039BD                 db    0
.xdata$x:000039BE                 db    0
.xdata$x:000039BF                 db    0
.xdata$x:000039C0                 db    1
.xdata$x:000039C1                 db    0
.xdata$x:000039C2                 db    0
.xdata$x:000039C3                 db    0
.xdata$x:000039C4                 dd offset __catchsym$?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z$5
.xdata$x:000039C8 __catchsym$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 dd offset $SG70805+4
.xdata$x:000039C8                                         ; DATA XREF: .xdata$x:00003A30o
.xdata$x:000039C8                                         ; "stem"
.xdata$x:000039CC                 db    0
.xdata$x:000039CD                 db    0
.xdata$x:000039CE                 db    0
.xdata$x:000039CF                 db    0
.xdata$x:000039D0                 db    0
.xdata$x:000039D1                 db    0
.xdata$x:000039D2                 db    0
.xdata$x:000039D3                 db    0
.xdata$x:000039D4                 dd offset __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:000039D8 __catchsym$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 db    9
.xdata$x:000039D8                                         ; DATA XREF: .xdata$x:00003A1Co
.xdata$x:000039D9                 db    0
.xdata$x:000039DA                 db    0
.xdata$x:000039DB                 db    0
.xdata$x:000039DC                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000039E0                 db  4Ch ; L
.xdata$x:000039E1                 db 0FFh
.xdata$x:000039E2                 db 0FFh
.xdata$x:000039E3                 db 0FFh
.xdata$x:000039E4                 dd offset __catch$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:000039E8 __ehfuncinfo$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:000039E8                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:000039E9                 db    5
.xdata$x:000039EA                 db  93h ; Ã´
.xdata$x:000039EB                 db  19h
.xdata$x:000039EC                 db  0Ah
.xdata$x:000039ED                 db    0
.xdata$x:000039EE                 db    0
.xdata$x:000039EF                 db    0
.xdata$x:000039F0                 dd offset __unwindtable$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000039F4                 db    2
.xdata$x:000039F5                 db    0
.xdata$x:000039F6                 db    0
.xdata$x:000039F7                 db    0
.xdata$x:000039F8                 dd offset __tryblocktable$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000039FC                 db    0
.xdata$x:000039FD                 db    0
.xdata$x:000039FE                 db    0
.xdata$x:000039FF                 db    0
.xdata$x:00003A00                 db    0
.xdata$x:00003A01                 db    0
.xdata$x:00003A02                 db    0
.xdata$x:00003A03                 db    0
.xdata$x:00003A04                 db    0
.xdata$x:00003A05                 db    0
.xdata$x:00003A06                 db    0
.xdata$x:00003A07                 db    0
.xdata$x:00003A08                 db    1
.xdata$x:00003A09                 db    0
.xdata$x:00003A0A                 db    0
.xdata$x:00003A0B                 db    0
.xdata$x:00003A0C __tryblocktable$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    6
.xdata$x:00003A0C                                         ; DATA XREF: .xdata$x:000039F8o
.xdata$x:00003A0D                 db    0
.xdata$x:00003A0E                 db    0
.xdata$x:00003A0F                 db    0
.xdata$x:00003A10                 db    7
.xdata$x:00003A11                 db    0
.xdata$x:00003A12                 db    0
.xdata$x:00003A13                 db    0
.xdata$x:00003A14                 db    8
.xdata$x:00003A15                 db    0
.xdata$x:00003A16                 db    0
.xdata$x:00003A17                 db    0
.xdata$x:00003A18                 db    1
.xdata$x:00003A19                 db    0
.xdata$x:00003A1A                 db    0
.xdata$x:00003A1B                 db    0
.xdata$x:00003A1C                 dd offset __catchsym$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:00003A20                 db    0
.xdata$x:00003A21                 db    0
.xdata$x:00003A22                 db    0
.xdata$x:00003A23                 db    0
.xdata$x:00003A24                 db    8
.xdata$x:00003A25                 db    0
.xdata$x:00003A26                 db    0
.xdata$x:00003A27                 db    0
.xdata$x:00003A28                 db    9
.xdata$x:00003A29                 db    0
.xdata$x:00003A2A                 db    0
.xdata$x:00003A2B                 db    0
.xdata$x:00003A2C                 db    1
.xdata$x:00003A2D                 db    0
.xdata$x:00003A2E                 db    0
.xdata$x:00003A2F                 db    0
.xdata$x:00003A30                 dd offset __catchsym$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
.xdata$x:00003A34 __unwindtable$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00003A34                                         ; DATA XREF: .xdata$x:000039F0o
.xdata$x:00003A35                 db 0FFh
.xdata$x:00003A36                 db 0FFh
.xdata$x:00003A37                 db 0FFh
.xdata$x:00003A38                 db    0
.xdata$x:00003A39                 db    0
.xdata$x:00003A3A                 db    0
.xdata$x:00003A3B                 db    0
.xdata$x:00003A3C                 db    0
.xdata$x:00003A3D                 db    0
.xdata$x:00003A3E                 db    0
.xdata$x:00003A3F                 db    0
.xdata$x:00003A40                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00003A44                 db    1
.xdata$x:00003A45                 db    0
.xdata$x:00003A46                 db    0
.xdata$x:00003A47                 db    0
.xdata$x:00003A48                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00003A4C                 db    1
.xdata$x:00003A4D                 db    0
.xdata$x:00003A4E                 db    0
.xdata$x:00003A4F                 db    0
.xdata$x:00003A50                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:00003A54                 db    3
.xdata$x:00003A55                 db    0
.xdata$x:00003A56                 db    0
.xdata$x:00003A57                 db    0
.xdata$x:00003A58                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:00003A5C                 db    3
.xdata$x:00003A5D                 db    0
.xdata$x:00003A5E                 db    0
.xdata$x:00003A5F                 db    0
.xdata$x:00003A60                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:00003A64                 db    5
.xdata$x:00003A65                 db    0
.xdata$x:00003A66                 db    0
.xdata$x:00003A67                 db    0
.xdata$x:00003A68                 db    0
.xdata$x:00003A69                 db    0
.xdata$x:00003A6A                 db    0
.xdata$x:00003A6B                 db    0
.xdata$x:00003A6C                 db    6
.xdata$x:00003A6D                 db    0
.xdata$x:00003A6E                 db    0
.xdata$x:00003A6F                 db    0
.xdata$x:00003A70                 dd offset __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:00003A74                 db    5
.xdata$x:00003A75                 db    0
.xdata$x:00003A76                 db    0
.xdata$x:00003A77                 db    0
.xdata$x:00003A78                 db    0
.xdata$x:00003A79                 db    0
.xdata$x:00003A7A                 db    0
.xdata$x:00003A7B                 db    0
.xdata$x:00003A7C                 db 0FFh
.xdata$x:00003A7D                 db 0FFh
.xdata$x:00003A7E                 db 0FFh
.xdata$x:00003A7F                 db 0FFh
.xdata$x:00003A80                 db    0
.xdata$x:00003A81                 db    0
.xdata$x:00003A82                 db    0
.xdata$x:00003A83                 db    0
.xdata$x:00003A84 __catchsym$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12 dd offset $SG70805+4
.xdata$x:00003A84                                         ; DATA XREF: .xdata$x:00003AA4o
.xdata$x:00003A84                                         ; "stem"
.xdata$x:00003A88                 align 10h
.xdata$x:00003A90                 dd offset __catch$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00003A94 __tryblocktable$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db    0
.xdata$x:00003A94                                         ; DATA XREF: .xdata$x:00003AB8o
.xdata$x:00003A95                 db    0
.xdata$x:00003A96                 db    0
.xdata$x:00003A97                 db    0
.xdata$x:00003A98                 db  0Ah
.xdata$x:00003A99                 db    0
.xdata$x:00003A9A                 db    0
.xdata$x:00003A9B                 db    0
.xdata$x:00003A9C                 db  0Bh
.xdata$x:00003A9D                 db    0
.xdata$x:00003A9E                 db    0
.xdata$x:00003A9F                 db    0
.xdata$x:00003AA0                 db    1
.xdata$x:00003AA1                 db    0
.xdata$x:00003AA2                 db    0
.xdata$x:00003AA3                 db    0
.xdata$x:00003AA4                 dd offset __catchsym$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12
.xdata$x:00003AA8 __ehfuncinfo$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00003AA8                                         ; DATA XREF: __ehhandler$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:00003AA9                 db    5
.xdata$x:00003AAA                 db  93h ; Ã´
.xdata$x:00003AAB                 db  19h
.xdata$x:00003AAC                 db  0Ch
.xdata$x:00003AAD                 db    0
.xdata$x:00003AAE                 db    0
.xdata$x:00003AAF                 db    0
.xdata$x:00003AB0                 dd offset __unwindtable$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003AB4                 db    1
.xdata$x:00003AB5                 db    0
.xdata$x:00003AB6                 db    0
.xdata$x:00003AB7                 db    0
.xdata$x:00003AB8                 dd offset __tryblocktable$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003ABC                 db    0
.xdata$x:00003ABD                 db    0
.xdata$x:00003ABE                 db    0
.xdata$x:00003ABF                 db    0
.xdata$x:00003AC0                 db    0
.xdata$x:00003AC1                 db    0
.xdata$x:00003AC2                 db    0
.xdata$x:00003AC3                 db    0
.xdata$x:00003AC4                 db    0
.xdata$x:00003AC5                 db    0
.xdata$x:00003AC6                 db    0
.xdata$x:00003AC7                 db    0
.xdata$x:00003AC8                 db    1
.xdata$x:00003AC9                 db    0
.xdata$x:00003ACA                 db    0
.xdata$x:00003ACB                 db    0
.xdata$x:00003ACC __unwindtable$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00003ACC                                         ; DATA XREF: .xdata$x:00003AB0o
.xdata$x:00003ACD                 db 0FFh
.xdata$x:00003ACE                 db 0FFh
.xdata$x:00003ACF                 db 0FFh
.xdata$x:00003AD0                 db    0
.xdata$x:00003AD1                 db    0
.xdata$x:00003AD2                 db    0
.xdata$x:00003AD3                 db    0
.xdata$x:00003AD4                 db    0
.xdata$x:00003AD5                 db    0
.xdata$x:00003AD6                 db    0
.xdata$x:00003AD7                 db    0
.xdata$x:00003AD8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00003ADC                 db    1
.xdata$x:00003ADD                 db    0
.xdata$x:00003ADE                 db    0
.xdata$x:00003ADF                 db    0
.xdata$x:00003AE0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00003AE4                 db    1
.xdata$x:00003AE5                 db    0
.xdata$x:00003AE6                 db    0
.xdata$x:00003AE7                 db    0
.xdata$x:00003AE8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00003AEC                 db    3
.xdata$x:00003AED                 db    0
.xdata$x:00003AEE                 db    0
.xdata$x:00003AEF                 db    0
.xdata$x:00003AF0                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00003AF4                 db    4
.xdata$x:00003AF5                 db    0
.xdata$x:00003AF6                 db    0
.xdata$x:00003AF7                 db    0
.xdata$x:00003AF8                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
.xdata$x:00003AFC                 db    1
.xdata$x:00003AFD                 db    0
.xdata$x:00003AFE                 db    0
.xdata$x:00003AFF                 db    0
.xdata$x:00003B00                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
.xdata$x:00003B04                 db    1
.xdata$x:00003B05                 db    0
.xdata$x:00003B06                 db    0
.xdata$x:00003B07                 db    0
.xdata$x:00003B08                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
.xdata$x:00003B0C                 db    1
.xdata$x:00003B0D                 db    0
.xdata$x:00003B0E                 db    0
.xdata$x:00003B0F                 db    0
.xdata$x:00003B10                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
.xdata$x:00003B14                 db    1
.xdata$x:00003B15                 db    0
.xdata$x:00003B16                 db    0
.xdata$x:00003B17                 db    0
.xdata$x:00003B18                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
.xdata$x:00003B1C                 db    9
.xdata$x:00003B1D                 db    0
.xdata$x:00003B1E                 db    0
.xdata$x:00003B1F                 db    0
.xdata$x:00003B20                 dd offset __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
.xdata$x:00003B24                 db 0FFh
.xdata$x:00003B25                 db 0FFh
.xdata$x:00003B26                 db 0FFh
.xdata$x:00003B27                 db 0FFh
.xdata$x:00003B28                 db    0
.xdata$x:00003B29                 db    0
.xdata$x:00003B2A                 db    0
.xdata$x:00003B2B                 db    0
.xdata$x:00003B2C __ehfuncinfo$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:00003B2C                                         ; DATA XREF: __ehhandler$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z+14o
.xdata$x:00003B2D                 db    5
.xdata$x:00003B2E                 db  93h ; Ã´
.xdata$x:00003B2F                 db  19h
.xdata$x:00003B30                 db    7
.xdata$x:00003B31                 db    0
.xdata$x:00003B32                 db    0
.xdata$x:00003B33                 db    0
.xdata$x:00003B34                 dd offset __unwindtable$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z
.xdata$x:00003B38                 db    0
.xdata$x:00003B39                 db    0
.xdata$x:00003B3A                 db    0
.xdata$x:00003B3B                 db    0
.xdata$x:00003B3C                 db    0
.xdata$x:00003B3D                 db    0
.xdata$x:00003B3E                 db    0
.xdata$x:00003B3F                 db    0
.xdata$x:00003B40                 db    0
.xdata$x:00003B41                 db    0
.xdata$x:00003B42                 db    0
.xdata$x:00003B43                 db    0
.xdata$x:00003B44                 db    0
.xdata$x:00003B45                 db    0
.xdata$x:00003B46                 db    0
.xdata$x:00003B47                 db    0
.xdata$x:00003B48                 db    0
.xdata$x:00003B49                 db    0
.xdata$x:00003B4A                 db    0
.xdata$x:00003B4B                 db    0
.xdata$x:00003B4C                 db    1
.xdata$x:00003B4D                 db    0
.xdata$x:00003B4E                 db    0
.xdata$x:00003B4F                 db    0
.xdata$x:00003B50 __unwindtable$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00003B50                                         ; DATA XREF: .xdata$x:00003B34o
.xdata$x:00003B51                 db 0FFh
.xdata$x:00003B52                 db 0FFh
.xdata$x:00003B53                 db 0FFh
.xdata$x:00003B54                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00003B58                 db    0
.xdata$x:00003B59                 db    0
.xdata$x:00003B5A                 db    0
.xdata$x:00003B5B                 db    0
.xdata$x:00003B5C                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$1
.xdata$x:00003B60                 db    0
.xdata$x:00003B61                 db    0
.xdata$x:00003B62                 db    0
.xdata$x:00003B63                 db    0
.xdata$x:00003B64                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00003B68                 db    2
.xdata$x:00003B69                 db    0
.xdata$x:00003B6A                 db    0
.xdata$x:00003B6B                 db    0
.xdata$x:00003B6C                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00003B70                 db    2
.xdata$x:00003B71                 db    0
.xdata$x:00003B72                 db    0
.xdata$x:00003B73                 db    0
.xdata$x:00003B74                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00003B78                 db    4
.xdata$x:00003B79                 db    0
.xdata$x:00003B7A                 db    0
.xdata$x:00003B7B                 db    0
.xdata$x:00003B7C                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00003B80                 db    4
.xdata$x:00003B81                 db    0
.xdata$x:00003B82                 db    0
.xdata$x:00003B83                 db    0
.xdata$x:00003B84                 dd offset __unwindfunclet$?UpdateArchive@NGz@NArchive@@YGJPAUISequentialOutStream@@_KAAVCItem@12@ABVCSingleMethodProps@2@PAUIArchiveUpdateCallback@@@Z$6
.xdata$x:00003B88 __unwindtable$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:00003B88                                         ; DATA XREF: .xdata$x:00003B98o
.xdata$x:00003B89                 db 0FFh
.xdata$x:00003B8A                 db 0FFh
.xdata$x:00003B8B                 db 0FFh
.xdata$x:00003B8C                 dd offset __unwindfunclet$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:00003B90 __ehfuncinfo$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:00003B90                                         ; DATA XREF: __ehhandler$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:00003B91                 db    5
.xdata$x:00003B92                 db  93h ; Ã´
.xdata$x:00003B93                 db  19h
.xdata$x:00003B94                 db    1
.xdata$x:00003B95                 db    0
.xdata$x:00003B96                 db    0
.xdata$x:00003B97                 db    0
.xdata$x:00003B98                 dd offset __unwindtable$?CreateArc@NGz@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00003B9C                 db    0
.xdata$x:00003B9D                 db    0
.xdata$x:00003B9E                 db    0
.xdata$x:00003B9F                 db    0
.xdata$x:00003BA0                 db    0
.xdata$x:00003BA1                 db    0
.xdata$x:00003BA2                 db    0
.xdata$x:00003BA3                 db    0
.xdata$x:00003BA4                 db    0
.xdata$x:00003BA5                 db    0
.xdata$x:00003BA6                 db    0
.xdata$x:00003BA7                 db    0
.xdata$x:00003BA8                 db    0
.xdata$x:00003BA9                 db    0
.xdata$x:00003BAA                 db    0
.xdata$x:00003BAB                 db    0
.xdata$x:00003BAC                 db    0
.xdata$x:00003BAD                 db    0
.xdata$x:00003BAE                 db    0
.xdata$x:00003BAF                 db    0
.xdata$x:00003BB0                 db    1
.xdata$x:00003BB1                 db    0
.xdata$x:00003BB2                 db    0
.xdata$x:00003BB3                 db    0
.xdata$x:00003BB4 __unwindtable$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ db 0FFh
.xdata$x:00003BB4                                         ; DATA XREF: .xdata$x:00003BC4o
.xdata$x:00003BB5                 db 0FFh
.xdata$x:00003BB6                 db 0FFh
.xdata$x:00003BB7                 db 0FFh
.xdata$x:00003BB8                 dd offset __unwindfunclet$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ$0
.xdata$x:00003BBC __ehfuncinfo$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ db  22h ; "
.xdata$x:00003BBC                                         ; DATA XREF: __ehhandler$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ+11o
.xdata$x:00003BBD                 db    5
.xdata$x:00003BBE                 db  93h ; Ã´
.xdata$x:00003BBF                 db  19h
.xdata$x:00003BC0                 db    1
.xdata$x:00003BC1                 db    0
.xdata$x:00003BC2                 db    0
.xdata$x:00003BC3                 db    0
.xdata$x:00003BC4                 dd offset __unwindtable$?CreateArcOut@NGz@NArchive@@YGPAUIOutArchive@@XZ
.xdata$x:00003BC8                 db    0
.xdata$x:00003BC9                 db    0
.xdata$x:00003BCA                 db    0
.xdata$x:00003BCB                 db    0
.xdata$x:00003BCC                 db    0
.xdata$x:00003BCD                 db    0
.xdata$x:00003BCE                 db    0
.xdata$x:00003BCF                 db    0
.xdata$x:00003BD0                 db    0
.xdata$x:00003BD1                 db    0
.xdata$x:00003BD2                 db    0
.xdata$x:00003BD3                 db    0
.xdata$x:00003BD4                 db    0
.xdata$x:00003BD5                 db    0
.xdata$x:00003BD6                 db    0
.xdata$x:00003BD7                 db    0
.xdata$x:00003BD8                 db    0
.xdata$x:00003BD9                 db    0
.xdata$x:00003BDA                 db    0
.xdata$x:00003BDB                 db    0
.xdata$x:00003BDC                 db    1
.xdata$x:00003BDD                 db    0
.xdata$x:00003BDE                 db    0
.xdata$x:00003BDF                 db    0
.xdata$x:00003BDF _xdata$x        ends
.xdata$x:00003BDF
.text:00003BE0 ; ===========================================================================
.text:00003BE0
.text:00003BE0 ; Segment type: Pure code
.text:00003BE0 ; Segment permissions: Read/Execute
.text:00003BE0 _text           segment para public 'CODE' use32
.text:00003BE0                 assume cs:_text
.text:00003BE0                 ;org 3BE0h
.text:00003BE0 ; COMDAT (pick any)
.text:00003BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BE0
.text:00003BE0 ; =============== S U B R O U T I N E =======================================
.text:00003BE0
.text:00003BE0 ; Attributes: bp-based frame
.text:00003BE0
.text:00003BE0 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00003BE0                 public ??1UString@@QAE@XZ
.text:00003BE0 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1B0p
.text:00003BE0                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+C3p ...
.text:00003BE0
.text:00003BE0 var_8           = dword ptr -8
.text:00003BE0 var_4           = dword ptr -4
.text:00003BE0
.text:00003BE0                 push    ebp
.text:00003BE1                 mov     ebp, esp
.text:00003BE3                 sub     esp, 8
.text:00003BE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003BED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003BF4                 mov     [ebp+var_4], ecx
.text:00003BF7                 mov     eax, [ebp+var_4]
.text:00003BFA                 mov     ecx, [eax]
.text:00003BFC                 mov     [ebp+var_8], ecx
.text:00003BFF                 mov     edx, [ebp+var_8]
.text:00003C02                 push    edx             ; void *
.text:00003C03                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003C08                 add     esp, 4
.text:00003C0B                 add     esp, 8
.text:00003C0E                 cmp     ebp, esp
.text:00003C10                 call    __RTC_CheckEsp
.text:00003C15                 mov     esp, ebp
.text:00003C17                 pop     ebp
.text:00003C18                 retn
.text:00003C18 ??1UString@@QAE@XZ endp
.text:00003C18
.text:00003C18 ; ---------------------------------------------------------------------------
.text:00003C19                 align 4
.text:00003C19 _text           ends
.text:00003C19
.text:00003C1C ; ===========================================================================
.text:00003C1C
.text:00003C1C ; Segment type: Pure code
.text:00003C1C ; Segment permissions: Read/Execute
.text:00003C1C _text           segment para public 'CODE' use32
.text:00003C1C                 assume cs:_text
.text:00003C1C                 ;org 3C1Ch
.text:00003C1C ; COMDAT (pick any)
.text:00003C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C1C
.text:00003C1C ; =============== S U B R O U T I N E =======================================
.text:00003C1C
.text:00003C1C ; Attributes: bp-based frame
.text:00003C1C
.text:00003C1C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003C1C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003C1C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003C1C                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+45p
.text:00003C1C                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+45p ...
.text:00003C1C
.text:00003C1C var_4           = dword ptr -4
.text:00003C1C
.text:00003C1C                 push    ebp
.text:00003C1D                 mov     ebp, esp
.text:00003C1F                 push    ecx
.text:00003C20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C27                 mov     [ebp+var_4], ecx
.text:00003C2A                 xor     eax, eax
.text:00003C2C                 mov     ecx, [ebp+var_4]
.text:00003C2F                 mov     [ecx], ax
.text:00003C32                 xor     edx, edx
.text:00003C34                 mov     eax, [ebp+var_4]
.text:00003C37                 mov     [eax+2], dx
.text:00003C3B                 mov     ecx, [ebp+var_4]
.text:00003C3E                 mov     dword ptr [ecx+8], 0
.text:00003C45                 mov     eax, [ebp+var_4]
.text:00003C48                 mov     esp, ebp
.text:00003C4A                 pop     ebp
.text:00003C4B                 retn
.text:00003C4B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00003C4B
.text:00003C4B _text           ends
.text:00003C4B
.text:00003C4C ; ===========================================================================
.text:00003C4C
.text:00003C4C ; Segment type: Pure code
.text:00003C4C ; Segment permissions: Read/Execute
.text:00003C4C _text           segment para public 'CODE' use32
.text:00003C4C                 assume cs:_text
.text:00003C4C                 ;org 3C4Ch
.text:00003C4C ; COMDAT (pick any)
.text:00003C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C4C
.text:00003C4C ; =============== S U B R O U T I N E =======================================
.text:00003C4C
.text:00003C4C ; Attributes: bp-based frame
.text:00003C4C
.text:00003C4C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003C4C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003C4C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003C4C                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1CFp
.text:00003C4C                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1E9p ...
.text:00003C4C
.text:00003C4C var_4           = dword ptr -4
.text:00003C4C
.text:00003C4C                 push    ebp
.text:00003C4D                 mov     ebp, esp
.text:00003C4F                 push    ecx
.text:00003C50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C57                 mov     [ebp+var_4], ecx
.text:00003C5A                 mov     ecx, [ebp+var_4] ; this
.text:00003C5D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00003C62                 add     esp, 4
.text:00003C65                 cmp     ebp, esp
.text:00003C67                 call    __RTC_CheckEsp
.text:00003C6C                 mov     esp, ebp
.text:00003C6E                 pop     ebp
.text:00003C6F                 retn
.text:00003C6F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00003C6F
.text:00003C6F _text           ends
.text:00003C6F
.data:00003C70 ; ===========================================================================
.data:00003C70
.data:00003C70 ; Segment type: Pure data
.data:00003C70 ; Segment permissions: Read/Write
.data:00003C70 _data           segment dword public 'DATA' use32
.data:00003C70                 assume cs:_data
.data:00003C70                 ;org 3C70h
.data:00003C70 ; COMDAT (pick any)
.data:00003C70                 public ??_R0?AUCInBufferException@@@8
.data:00003C70 ; struct CInBufferException `RTTI Type Descriptor'
.data:00003C70 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003C70                                         ; DATA XREF: .xdata$x:00003950o
.data:00003C70                                         ; .xdata$x:000039DCo
.data:00003C70                                         ; const type_info::`vftable'
.data:00003C74                 align 8
.data:00003C78 a_?aucinbuffere db '.?AUCInBufferException@@',0
.data:00003C91                 align 4
.data:00003C91 _data           ends
.data:00003C91
.text:00003C94 ; ===========================================================================
.text:00003C94
.text:00003C94 ; Segment type: Pure code
.text:00003C94 ; Segment permissions: Read/Execute
.text:00003C94 _text           segment para public 'CODE' use32
.text:00003C94                 assume cs:_text
.text:00003C94                 ;org 3C94h
.text:00003C94 ; COMDAT (pick any)
.text:00003C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003C94
.text:00003C94 ; =============== S U B R O U T I N E =======================================
.text:00003C94
.text:00003C94 ; Attributes: bp-based frame
.text:00003C94
.text:00003C94 ; __int32 __thiscall NCompress::NDeflate::NDecoder::CCoder::InitInStream(NCompress::NDeflate::NDecoder::CCoder *this, bool)
.text:00003C94                 public ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z
.text:00003C94 ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z proc near
.text:00003C94                                         ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+8Ep
.text:00003C94                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3B7p
.text:00003C94
.text:00003C94 var_4           = dword ptr -4
.text:00003C94 arg_0           = byte ptr  8
.text:00003C94
.text:00003C94                 push    ebp
.text:00003C95                 mov     ebp, esp
.text:00003C97                 push    ecx
.text:00003C98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C9F                 mov     [ebp+var_4], ecx
.text:00003CA2                 push    20000h
.text:00003CA7                 mov     ecx, [ebp+var_4]
.text:00003CAA                 add     ecx, 48h ; 'H'
.text:00003CAD                 call    ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create(uint)
.text:00003CB2                 movzx   eax, al
.text:00003CB5                 test    eax, eax
.text:00003CB7                 jnz     short loc_3CC0
.text:00003CB9                 mov     eax, 8007000Eh
.text:00003CBE                 jmp     short loc_3CDF
.text:00003CC0 ; ---------------------------------------------------------------------------
.text:00003CC0
.text:00003CC0 loc_3CC0:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+23j
.text:00003CC0                 movzx   ecx, [ebp+arg_0]
.text:00003CC4                 test    ecx, ecx
.text:00003CC6                 jz      short loc_3CDD
.text:00003CC8                 mov     ecx, [ebp+var_4]
.text:00003CCB                 add     ecx, 48h ; 'H'
.text:00003CCE                 call    ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Init(void)
.text:00003CD3                 mov     edx, [ebp+var_4]
.text:00003CD6                 mov     byte ptr [edx+0D5Ah], 0
.text:00003CDD
.text:00003CDD loc_3CDD:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+32j
.text:00003CDD                 xor     eax, eax
.text:00003CDF
.text:00003CDF loc_3CDF:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+2Aj
.text:00003CDF                 add     esp, 4
.text:00003CE2                 cmp     ebp, esp
.text:00003CE4                 call    __RTC_CheckEsp
.text:00003CE9                 mov     esp, ebp
.text:00003CEB                 pop     ebp
.text:00003CEC                 retn    4
.text:00003CEC ?InitInStream@CCoder@NDecoder@NDeflate@NCompress@@QAEJ_N@Z endp
.text:00003CEC
.text:00003CEC ; ---------------------------------------------------------------------------
.text:00003CEF                 align 10h
.text:00003CEF _text           ends
.text:00003CEF
.text:00003CF0 ; ===========================================================================
.text:00003CF0
.text:00003CF0 ; Segment type: Pure code
.text:00003CF0 ; Segment permissions: Read/Execute
.text:00003CF0 _text           segment para public 'CODE' use32
.text:00003CF0                 assume cs:_text
.text:00003CF0                 ;org 3CF0h
.text:00003CF0 ; COMDAT (pick any)
.text:00003CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003CF0
.text:00003CF0 ; =============== S U B R O U T I N E =======================================
.text:00003CF0
.text:00003CF0 ; Attributes: bp-based frame
.text:00003CF0
.text:00003CF0 ; unsigned __int64 __thiscall NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00003CF0                 public ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ
.text:00003CF0 ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ proc near
.text:00003CF0                                         ; CODE XREF: NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)+DFp
.text:00003CF0                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3CFp ...
.text:00003CF0
.text:00003CF0 var_4           = dword ptr -4
.text:00003CF0
.text:00003CF0                 push    ebp
.text:00003CF1                 mov     ebp, esp
.text:00003CF3                 push    ecx
.text:00003CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CFB                 mov     [ebp+var_4], ecx
.text:00003CFE                 mov     ecx, [ebp+var_4]
.text:00003D01                 add     ecx, 48h ; 'H'
.text:00003D04                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:00003D09                 add     esp, 4
.text:00003D0C                 cmp     ebp, esp
.text:00003D0E                 call    __RTC_CheckEsp
.text:00003D13                 mov     esp, ebp
.text:00003D15                 pop     ebp
.text:00003D16                 retn
.text:00003D16 ?GetInputProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ endp
.text:00003D16
.text:00003D16 ; ---------------------------------------------------------------------------
.text:00003D17                 align 4
.text:00003D17 _text           ends
.text:00003D17
.text:00003D18 ; ===========================================================================
.text:00003D18
.text:00003D18 ; Segment type: Pure code
.text:00003D18 ; Segment permissions: Read/Execute
.text:00003D18 _text           segment para public 'CODE' use32
.text:00003D18                 assume cs:_text
.text:00003D18                 ;org 3D18h
.text:00003D18 ; COMDAT (pick any)
.text:00003D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D18
.text:00003D18 ; =============== S U B R O U T I N E =======================================
.text:00003D18
.text:00003D18 ; Attributes: bp-based frame
.text:00003D18
.text:00003D18 ; void __thiscall NCompress::NDeflate::NDecoder::CCoder::AlignToByte(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00003D18                 public ?AlignToByte@CCoder@NDecoder@NDeflate@NCompress@@QAEXXZ
.text:00003D18 ?AlignToByte@CCoder@NDecoder@NDeflate@NCompress@@QAEXXZ proc near
.text:00003D18                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+799p
.text:00003D18
.text:00003D18 var_4           = dword ptr -4
.text:00003D18
.text:00003D18                 push    ebp
.text:00003D19                 mov     ebp, esp
.text:00003D1B                 push    ecx
.text:00003D1C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D23                 mov     [ebp+var_4], ecx
.text:00003D26                 mov     ecx, [ebp+var_4]
.text:00003D29                 add     ecx, 48h ; 'H'
.text:00003D2C                 call    ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::AlignToByte(void)
.text:00003D31                 add     esp, 4
.text:00003D34                 cmp     ebp, esp
.text:00003D36                 call    __RTC_CheckEsp
.text:00003D3B                 mov     esp, ebp
.text:00003D3D                 pop     ebp
.text:00003D3E                 retn
.text:00003D3E ?AlignToByte@CCoder@NDecoder@NDeflate@NCompress@@QAEXXZ endp
.text:00003D3E
.text:00003D3E ; ---------------------------------------------------------------------------
.text:00003D3F                 align 10h
.text:00003D3F _text           ends
.text:00003D3F
.text:00003D40 ; ===========================================================================
.text:00003D40
.text:00003D40 ; Segment type: Pure code
.text:00003D40 ; Segment permissions: Read/Execute
.text:00003D40 _text           segment para public 'CODE' use32
.text:00003D40                 assume cs:_text
.text:00003D40                 ;org 3D40h
.text:00003D40 ; COMDAT (pick any)
.text:00003D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D40
.text:00003D40 ; =============== S U B R O U T I N E =======================================
.text:00003D40
.text:00003D40 ; Attributes: bp-based frame
.text:00003D40
.text:00003D40 ; unsigned __int64 __thiscall NCompress::NDeflate::NDecoder::CCoder::GetStreamSize(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:00003D40                 public ?GetStreamSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ
.text:00003D40 ?GetStreamSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ proc near
.text:00003D40                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+57Fp
.text:00003D40                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+748p
.text:00003D40
.text:00003D40 var_4           = dword ptr -4
.text:00003D40
.text:00003D40                 push    ebp
.text:00003D41                 mov     ebp, esp
.text:00003D43                 push    ecx
.text:00003D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D4B                 mov     [ebp+var_4], ecx
.text:00003D4E                 mov     ecx, [ebp+var_4]
.text:00003D51                 add     ecx, 48h ; 'H'
.text:00003D54                 call    ?GetStreamSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetStreamSize(void)
.text:00003D59                 add     esp, 4
.text:00003D5C                 cmp     ebp, esp
.text:00003D5E                 call    __RTC_CheckEsp
.text:00003D63                 mov     esp, ebp
.text:00003D65                 pop     ebp
.text:00003D66                 retn
.text:00003D66 ?GetStreamSize@CCoder@NDecoder@NDeflate@NCompress@@QBE_KXZ endp
.text:00003D66
.text:00003D66 ; ---------------------------------------------------------------------------
.text:00003D67                 align 4
.text:00003D67 _text           ends
.text:00003D67
.text:00003D68 ; ===========================================================================
.text:00003D68
.text:00003D68 ; Segment type: Pure code
.text:00003D68 ; Segment permissions: Read/Execute
.text:00003D68 _text           segment para public 'CODE' use32
.text:00003D68                 assume cs:_text
.text:00003D68                 ;org 3D68h
.text:00003D68 ; COMDAT (pick any)
.text:00003D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D68
.text:00003D68 ; =============== S U B R O U T I N E =======================================
.text:00003D68
.text:00003D68 ; Attributes: bp-based frame
.text:00003D68
.text:00003D68 ; void __thiscall COutStreamWithCRC::SetStream(COutStreamWithCRC *this, struct ISequentialOutStream *)
.text:00003D68                 public ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z
.text:00003D68 ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z proc near
.text:00003D68                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+213p
.text:00003D68
.text:00003D68 var_4           = dword ptr -4
.text:00003D68 arg_0           = dword ptr  8
.text:00003D68
.text:00003D68                 push    ebp
.text:00003D69                 mov     ebp, esp
.text:00003D6B                 push    ecx
.text:00003D6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D73                 mov     [ebp+var_4], ecx
.text:00003D76                 mov     eax, [ebp+arg_0]
.text:00003D79                 push    eax
.text:00003D7A                 mov     ecx, [ebp+var_4]
.text:00003D7D                 add     ecx, 8
.text:00003D80                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00003D85                 add     esp, 4
.text:00003D88                 cmp     ebp, esp
.text:00003D8A                 call    __RTC_CheckEsp
.text:00003D8F                 mov     esp, ebp
.text:00003D91                 pop     ebp
.text:00003D92                 retn    4
.text:00003D92 ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z endp
.text:00003D92
.text:00003D92 ; ---------------------------------------------------------------------------
.text:00003D95                 align 4
.text:00003D95 _text           ends
.text:00003D95
.text:00003D98 ; ===========================================================================
.text:00003D98
.text:00003D98 ; Segment type: Pure code
.text:00003D98 ; Segment permissions: Read/Execute
.text:00003D98 _text           segment para public 'CODE' use32
.text:00003D98                 assume cs:_text
.text:00003D98                 ;org 3D98h
.text:00003D98 ; COMDAT (pick any)
.text:00003D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D98
.text:00003D98 ; =============== S U B R O U T I N E =======================================
.text:00003D98
.text:00003D98 ; Attributes: bp-based frame
.text:00003D98
.text:00003D98 ; void __thiscall COutStreamWithCRC::Init(COutStreamWithCRC *this, bool)
.text:00003D98                 public ?Init@COutStreamWithCRC@@QAEX_N@Z
.text:00003D98 ?Init@COutStreamWithCRC@@QAEX_N@Z proc near
.text:00003D98                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+21Dp
.text:00003D98
.text:00003D98 var_4           = dword ptr -4
.text:00003D98 arg_0           = byte ptr  8
.text:00003D98
.text:00003D98                 push    ebp
.text:00003D99                 mov     ebp, esp
.text:00003D9B                 push    ecx
.text:00003D9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DA3                 mov     [ebp+var_4], ecx
.text:00003DA6                 mov     eax, [ebp+var_4]
.text:00003DA9                 mov     dword ptr [eax+10h], 0
.text:00003DB0                 mov     dword ptr [eax+14h], 0
.text:00003DB7                 mov     ecx, [ebp+var_4]
.text:00003DBA                 mov     dl, [ebp+arg_0]
.text:00003DBD                 mov     [ecx+1Ch], dl
.text:00003DC0                 mov     eax, [ebp+var_4]
.text:00003DC3                 mov     dword ptr [eax+18h], 0FFFFFFFFh
.text:00003DCA                 mov     esp, ebp
.text:00003DCC                 pop     ebp
.text:00003DCD                 retn    4
.text:00003DCD ?Init@COutStreamWithCRC@@QAEX_N@Z endp
.text:00003DCD
.text:00003DCD _text           ends
.text:00003DCD
.text:00003DD0 ; ===========================================================================
.text:00003DD0
.text:00003DD0 ; Segment type: Pure code
.text:00003DD0 ; Segment permissions: Read/Execute
.text:00003DD0 _text           segment para public 'CODE' use32
.text:00003DD0                 assume cs:_text
.text:00003DD0                 ;org 3DD0h
.text:00003DD0 ; COMDAT (pick any)
.text:00003DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DD0
.text:00003DD0 ; =============== S U B R O U T I N E =======================================
.text:00003DD0
.text:00003DD0 ; Attributes: bp-based frame
.text:00003DD0
.text:00003DD0 ; void __thiscall COutStreamWithCRC::InitCRC(COutStreamWithCRC *__hidden this)
.text:00003DD0                 public ?InitCRC@COutStreamWithCRC@@QAEXXZ
.text:00003DD0 ?InitCRC@COutStreamWithCRC@@QAEXXZ proc near
.text:00003DD0                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+627p
.text:00003DD0
.text:00003DD0 var_4           = dword ptr -4
.text:00003DD0
.text:00003DD0                 push    ebp
.text:00003DD1                 mov     ebp, esp
.text:00003DD3                 push    ecx
.text:00003DD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DDB                 mov     [ebp+var_4], ecx
.text:00003DDE                 mov     eax, [ebp+var_4]
.text:00003DE1                 mov     dword ptr [eax+18h], 0FFFFFFFFh
.text:00003DE8                 mov     esp, ebp
.text:00003DEA                 pop     ebp
.text:00003DEB                 retn
.text:00003DEB ?InitCRC@COutStreamWithCRC@@QAEXXZ endp
.text:00003DEB
.text:00003DEB _text           ends
.text:00003DEB
.text:00003DEC ; ===========================================================================
.text:00003DEC
.text:00003DEC ; Segment type: Pure code
.text:00003DEC ; Segment permissions: Read/Execute
.text:00003DEC _text           segment para public 'CODE' use32
.text:00003DEC                 assume cs:_text
.text:00003DEC                 ;org 3DECh
.text:00003DEC ; COMDAT (pick any)
.text:00003DEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DEC
.text:00003DEC ; =============== S U B R O U T I N E =======================================
.text:00003DEC
.text:00003DEC ; Attributes: bp-based frame
.text:00003DEC
.text:00003DEC ; unsigned __int64 __thiscall COutStreamWithCRC::GetSize(COutStreamWithCRC *__hidden this)
.text:00003DEC                 public ?GetSize@COutStreamWithCRC@@QBE_KXZ
.text:00003DEC ?GetSize@COutStreamWithCRC@@QBE_KXZ proc near
.text:00003DEC                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5FBp
.text:00003DEC                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6B0p
.text:00003DEC
.text:00003DEC var_4           = dword ptr -4
.text:00003DEC
.text:00003DEC                 push    ebp
.text:00003DED                 mov     ebp, esp
.text:00003DEF                 push    ecx
.text:00003DF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003DF7                 mov     [ebp+var_4], ecx
.text:00003DFA                 mov     ecx, [ebp+var_4]
.text:00003DFD                 mov     eax, [ecx+10h]
.text:00003E00                 mov     edx, [ecx+14h]
.text:00003E03                 mov     esp, ebp
.text:00003E05                 pop     ebp
.text:00003E06                 retn
.text:00003E06 ?GetSize@COutStreamWithCRC@@QBE_KXZ endp
.text:00003E06
.text:00003E06 ; ---------------------------------------------------------------------------
.text:00003E07                 align 4
.text:00003E07 _text           ends
.text:00003E07
.text:00003E08 ; ===========================================================================
.text:00003E08
.text:00003E08 ; Segment type: Pure code
.text:00003E08 ; Segment permissions: Read/Execute
.text:00003E08 _text           segment para public 'CODE' use32
.text:00003E08                 assume cs:_text
.text:00003E08                 ;org 3E08h
.text:00003E08 ; COMDAT (pick any)
.text:00003E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E08
.text:00003E08 ; =============== S U B R O U T I N E =======================================
.text:00003E08
.text:00003E08 ; Attributes: bp-based frame
.text:00003E08
.text:00003E08 ; unsigned int __thiscall COutStreamWithCRC::GetCRC(COutStreamWithCRC *__hidden this)
.text:00003E08                 public ?GetCRC@COutStreamWithCRC@@QBEIXZ
.text:00003E08 ?GetCRC@COutStreamWithCRC@@QBEIXZ proc near
.text:00003E08                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+87Fp
.text:00003E08
.text:00003E08 var_4           = dword ptr -4
.text:00003E08
.text:00003E08                 push    ebp
.text:00003E09                 mov     ebp, esp
.text:00003E0B                 push    ecx
.text:00003E0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E13                 mov     [ebp+var_4], ecx
.text:00003E16                 mov     eax, [ebp+var_4]
.text:00003E19                 mov     eax, [eax+18h]
.text:00003E1C                 xor     eax, 0FFFFFFFFh
.text:00003E1F                 mov     esp, ebp
.text:00003E21                 pop     ebp
.text:00003E22                 retn
.text:00003E22 ?GetCRC@COutStreamWithCRC@@QBEIXZ endp
.text:00003E22
.text:00003E22 ; ---------------------------------------------------------------------------
.text:00003E23                 align 4
.text:00003E23 _text           ends
.text:00003E23
.text:00003E24 ; ===========================================================================
.text:00003E24
.text:00003E24 ; Segment type: Pure code
.text:00003E24 ; Segment permissions: Read/Execute
.text:00003E24 _text           segment para public 'CODE' use32
.text:00003E24                 assume cs:_text
.text:00003E24                 ;org 3E24h
.text:00003E24 ; COMDAT (pick any)
.text:00003E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E24
.text:00003E24 ; =============== S U B R O U T I N E =======================================
.text:00003E24
.text:00003E24 ; Attributes: bp-based frame
.text:00003E24
.text:00003E24 ; _DWORD __thiscall NArchive::NGz::CItem::CItem(NArchive::NGz::CItem *__hidden this)
.text:00003E24                 public ??0CItem@NGz@NArchive@@QAE@XZ
.text:00003E24 ??0CItem@NGz@NArchive@@QAE@XZ proc near ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+496p
.text:00003E24                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+ADp ...
.text:00003E24
.text:00003E24 var_10          = dword ptr -10h
.text:00003E24 var_C           = dword ptr -0Ch
.text:00003E24 var_4           = dword ptr -4
.text:00003E24
.text:00003E24                 push    ebp
.text:00003E25                 mov     ebp, esp
.text:00003E27                 push    0FFFFFFFFh
.text:00003E29                 push    offset __ehhandler$??0CItem@NGz@NArchive@@QAE@XZ
.text:00003E2E                 mov     eax, large fs:0
.text:00003E34                 push    eax
.text:00003E35                 push    ecx
.text:00003E36                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003E3D                 mov     eax, dword ptr ds:___security_cookie
.text:00003E42                 xor     eax, ebp
.text:00003E44                 push    eax
.text:00003E45                 lea     eax, [ebp+var_C]
.text:00003E48                 mov     large fs:0, eax
.text:00003E4E                 mov     [ebp+var_10], ecx
.text:00003E51                 mov     eax, [ebp+var_10]
.text:00003E54                 mov     byte ptr [eax], 0
.text:00003E57                 mov     ecx, [ebp+var_10]
.text:00003E5A                 mov     byte ptr [ecx+1], 0
.text:00003E5E                 mov     edx, [ebp+var_10]
.text:00003E61                 mov     byte ptr [edx+2], 0
.text:00003E65                 mov     eax, [ebp+var_10]
.text:00003E68                 mov     dword ptr [eax+4], 0
.text:00003E6F                 mov     ecx, [ebp+var_10]
.text:00003E72                 mov     dword ptr [ecx+8], 0
.text:00003E79                 mov     edx, [ebp+var_10]
.text:00003E7C                 mov     dword ptr [edx+0Ch], 0
.text:00003E83                 mov     ecx, [ebp+var_10]
.text:00003E86                 add     ecx, 10h
.text:00003E89                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00003E8E                 mov     [ebp+var_4], 0
.text:00003E95                 mov     ecx, [ebp+var_10]
.text:00003E98                 add     ecx, 1Ch
.text:00003E9B                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00003EA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003EA7                 mov     eax, [ebp+var_10]
.text:00003EAA                 mov     ecx, [ebp+var_C]
.text:00003EAD                 mov     large fs:0, ecx
.text:00003EB4                 pop     ecx
.text:00003EB5                 add     esp, 10h
.text:00003EB8                 cmp     ebp, esp
.text:00003EBA                 call    __RTC_CheckEsp
.text:00003EBF                 mov     esp, ebp
.text:00003EC1                 pop     ebp
.text:00003EC2                 retn
.text:00003EC2 ??0CItem@NGz@NArchive@@QAE@XZ endp
.text:00003EC2
.text:00003EC2 ; ---------------------------------------------------------------------------
.text:00003EC3                 align 4
.text:00003EC3 _text           ends
.text:00003EC3
.text$x:00003EC4 ; ===========================================================================
.text$x:00003EC4
.text$x:00003EC4 ; Segment type: Pure code
.text$x:00003EC4 ; Segment permissions: Read/Execute
.text$x:00003EC4 _text$x         segment para public 'CODE' use32
.text$x:00003EC4                 assume cs:_text$x
.text$x:00003EC4                 ;org 3EC4h
.text$x:00003EC4 ; COMDAT (pick associative to section at 3E24)
.text$x:00003EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003EC4
.text$x:00003EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00003EC4
.text$x:00003EC4
.text$x:00003EC4 __unwindfunclet$??0CItem@NGz@NArchive@@QAE@XZ$0 proc near
.text$x:00003EC4                                         ; DATA XREF: .xdata$x:00003EF0o
.text$x:00003EC4                 mov     ecx, [ebp-10h]
.text$x:00003EC7                 add     ecx, 10h        ; this
.text$x:00003ECA                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003ECA __unwindfunclet$??0CItem@NGz@NArchive@@QAE@XZ$0 endp
.text$x:00003ECA
.text$x:00003ECF
.text$x:00003ECF ; =============== S U B R O U T I N E =======================================
.text$x:00003ECF
.text$x:00003ECF
.text$x:00003ECF __ehhandler$??0CItem@NGz@NArchive@@QAE@XZ proc near
.text$x:00003ECF                                         ; DATA XREF: NArchive::NGz::CItem::CItem(void)+5o
.text$x:00003ECF
.text$x:00003ECF arg_4           = dword ptr  8
.text$x:00003ECF
.text$x:00003ECF                 mov     edx, [esp+arg_4]
.text$x:00003ED3                 lea     eax, [edx+0Ch]
.text$x:00003ED6                 mov     ecx, [edx-8]
.text$x:00003ED9                 xor     ecx, eax
.text$x:00003EDB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003EE0                 mov     eax, offset __ehfuncinfo$??0CItem@NGz@NArchive@@QAE@XZ
.text$x:00003EE5                 jmp     ___CxxFrameHandler3
.text$x:00003EE5 __ehhandler$??0CItem@NGz@NArchive@@QAE@XZ endp
.text$x:00003EE5
.text$x:00003EE5 ; ---------------------------------------------------------------------------
.text$x:00003EEA                 align 4
.text$x:00003EEA _text$x         ends
.text$x:00003EEA
.xdata$x:00003EEC ; ===========================================================================
.xdata$x:00003EEC
.xdata$x:00003EEC ; Segment type: Pure data
.xdata$x:00003EEC ; Segment permissions: Read
.xdata$x:00003EEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003EEC                 assume cs:_xdata$x
.xdata$x:00003EEC                 ;org 3EECh
.xdata$x:00003EEC ; COMDAT (pick associative to section at 3E24)
.xdata$x:00003EEC __unwindtable$??0CItem@NGz@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003EEC                                         ; DATA XREF: .xdata$x:00003EFCo
.xdata$x:00003EED                 db 0FFh
.xdata$x:00003EEE                 db 0FFh
.xdata$x:00003EEF                 db 0FFh
.xdata$x:00003EF0                 dd offset __unwindfunclet$??0CItem@NGz@NArchive@@QAE@XZ$0
.xdata$x:00003EF4 __ehfuncinfo$??0CItem@NGz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003EF4                                         ; DATA XREF: __ehhandler$??0CItem@NGz@NArchive@@QAE@XZ+11o
.xdata$x:00003EF5                 db    5
.xdata$x:00003EF6                 db  93h ; Ã´
.xdata$x:00003EF7                 db  19h
.xdata$x:00003EF8                 db    1
.xdata$x:00003EF9                 db    0
.xdata$x:00003EFA                 db    0
.xdata$x:00003EFB                 db    0
.xdata$x:00003EFC                 dd offset __unwindtable$??0CItem@NGz@NArchive@@QAE@XZ
.xdata$x:00003F00                 db    0
.xdata$x:00003F01                 db    0
.xdata$x:00003F02                 db    0
.xdata$x:00003F03                 db    0
.xdata$x:00003F04                 db    0
.xdata$x:00003F05                 db    0
.xdata$x:00003F06                 db    0
.xdata$x:00003F07                 db    0
.xdata$x:00003F08                 db    0
.xdata$x:00003F09                 db    0
.xdata$x:00003F0A                 db    0
.xdata$x:00003F0B                 db    0
.xdata$x:00003F0C                 db    0
.xdata$x:00003F0D                 db    0
.xdata$x:00003F0E                 db    0
.xdata$x:00003F0F                 db    0
.xdata$x:00003F10                 db    0
.xdata$x:00003F11                 db    0
.xdata$x:00003F12                 db    0
.xdata$x:00003F13                 db    0
.xdata$x:00003F14                 db    1
.xdata$x:00003F15                 db    0
.xdata$x:00003F16                 db    0
.xdata$x:00003F17                 db    0
.xdata$x:00003F17 _xdata$x        ends
.xdata$x:00003F17
.text:00003F18 ; ===========================================================================
.text:00003F18
.text:00003F18 ; Segment type: Pure code
.text:00003F18 ; Segment permissions: Read/Execute
.text:00003F18 _text           segment para public 'CODE' use32
.text:00003F18                 assume cs:_text
.text:00003F18                 ;org 3F18h
.text:00003F18 ; COMDAT (pick any)
.text:00003F18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F18
.text:00003F18 ; =============== S U B R O U T I N E =======================================
.text:00003F18
.text:00003F18 ; Attributes: bp-based frame
.text:00003F18
.text:00003F18 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00003F18                 public ??1AString@@QAE@XZ
.text:00003F18 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2EEp
.text:00003F18                                         ; __unwindfunclet$?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6+6j ...
.text:00003F18
.text:00003F18 var_8           = dword ptr -8
.text:00003F18 var_4           = dword ptr -4
.text:00003F18
.text:00003F18                 push    ebp
.text:00003F19                 mov     ebp, esp
.text:00003F1B                 sub     esp, 8
.text:00003F1E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003F25                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F2C                 mov     [ebp+var_4], ecx
.text:00003F2F                 mov     eax, [ebp+var_4]
.text:00003F32                 mov     ecx, [eax]
.text:00003F34                 mov     [ebp+var_8], ecx
.text:00003F37                 mov     edx, [ebp+var_8]
.text:00003F3A                 push    edx             ; void *
.text:00003F3B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003F40                 add     esp, 4
.text:00003F43                 add     esp, 8
.text:00003F46                 cmp     ebp, esp
.text:00003F48                 call    __RTC_CheckEsp
.text:00003F4D                 mov     esp, ebp
.text:00003F4F                 pop     ebp
.text:00003F50                 retn
.text:00003F50 ??1AString@@QAE@XZ endp
.text:00003F50
.text:00003F50 ; ---------------------------------------------------------------------------
.text:00003F51                 align 4
.text:00003F51 _text           ends
.text:00003F51
.text:00003F54 ; ===========================================================================
.text:00003F54
.text:00003F54 ; Segment type: Pure code
.text:00003F54 ; Segment permissions: Read/Execute
.text:00003F54 _text           segment para public 'CODE' use32
.text:00003F54                 assume cs:_text
.text:00003F54                 ;org 3F54h
.text:00003F54 ; COMDAT (pick any)
.text:00003F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F54
.text:00003F54 ; =============== S U B R O U T I N E =======================================
.text:00003F54
.text:00003F54 ; Attributes: bp-based frame
.text:00003F54
.text:00003F54 ; _DWORD __thiscall NArchive::NGz::CItem::~CItem(NArchive::NGz::CItem *__hidden this)
.text:00003F54                 public ??1CItem@NGz@NArchive@@QAE@XZ
.text:00003F54 ??1CItem@NGz@NArchive@@QAE@XZ proc near ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4F9p
.text:00003F54                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+56Fp ...
.text:00003F54
.text:00003F54 var_10          = dword ptr -10h
.text:00003F54 var_C           = dword ptr -0Ch
.text:00003F54 var_4           = dword ptr -4
.text:00003F54
.text:00003F54                 push    ebp
.text:00003F55                 mov     ebp, esp
.text:00003F57                 push    0FFFFFFFFh
.text:00003F59                 push    offset __ehhandler$??1CItem@NGz@NArchive@@QAE@XZ
.text:00003F5E                 mov     eax, large fs:0
.text:00003F64                 push    eax
.text:00003F65                 push    ecx
.text:00003F66                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003F6D                 mov     eax, dword ptr ds:___security_cookie
.text:00003F72                 xor     eax, ebp
.text:00003F74                 push    eax
.text:00003F75                 lea     eax, [ebp+var_C]
.text:00003F78                 mov     large fs:0, eax
.text:00003F7E                 mov     [ebp+var_10], ecx
.text:00003F81                 mov     [ebp+var_4], 0
.text:00003F88                 mov     ecx, [ebp+var_10]
.text:00003F8B                 add     ecx, 1Ch        ; this
.text:00003F8E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003F93                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003F9A                 mov     ecx, [ebp+var_10]
.text:00003F9D                 add     ecx, 10h        ; this
.text:00003FA0                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003FA5                 mov     ecx, [ebp+var_C]
.text:00003FA8                 mov     large fs:0, ecx
.text:00003FAF                 pop     ecx
.text:00003FB0                 add     esp, 10h
.text:00003FB3                 cmp     ebp, esp
.text:00003FB5                 call    __RTC_CheckEsp
.text:00003FBA                 mov     esp, ebp
.text:00003FBC                 pop     ebp
.text:00003FBD                 retn
.text:00003FBD ??1CItem@NGz@NArchive@@QAE@XZ endp
.text:00003FBD
.text:00003FBD ; ---------------------------------------------------------------------------
.text:00003FBE                 align 10h
.text:00003FBE _text           ends
.text:00003FBE
.text$x:00003FC0 ; ===========================================================================
.text$x:00003FC0
.text$x:00003FC0 ; Segment type: Pure code
.text$x:00003FC0 ; Segment permissions: Read/Execute
.text$x:00003FC0 _text$x         segment para public 'CODE' use32
.text$x:00003FC0                 assume cs:_text$x
.text$x:00003FC0                 ;org 3FC0h
.text$x:00003FC0 ; COMDAT (pick associative to section at 3F54)
.text$x:00003FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003FC0
.text$x:00003FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00003FC0
.text$x:00003FC0
.text$x:00003FC0 __unwindfunclet$??1CItem@NGz@NArchive@@QAE@XZ$0 proc near
.text$x:00003FC0                                         ; DATA XREF: .xdata$x:00003FECo
.text$x:00003FC0                 mov     ecx, [ebp-10h]
.text$x:00003FC3                 add     ecx, 10h        ; this
.text$x:00003FC6                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003FC6 __unwindfunclet$??1CItem@NGz@NArchive@@QAE@XZ$0 endp
.text$x:00003FC6
.text$x:00003FCB
.text$x:00003FCB ; =============== S U B R O U T I N E =======================================
.text$x:00003FCB
.text$x:00003FCB
.text$x:00003FCB __ehhandler$??1CItem@NGz@NArchive@@QAE@XZ proc near
.text$x:00003FCB                                         ; DATA XREF: NArchive::NGz::CItem::~CItem(void)+5o
.text$x:00003FCB
.text$x:00003FCB arg_4           = dword ptr  8
.text$x:00003FCB
.text$x:00003FCB                 mov     edx, [esp+arg_4]
.text$x:00003FCF                 lea     eax, [edx+0Ch]
.text$x:00003FD2                 mov     ecx, [edx-8]
.text$x:00003FD5                 xor     ecx, eax
.text$x:00003FD7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FDC                 mov     eax, offset __ehfuncinfo$??1CItem@NGz@NArchive@@QAE@XZ
.text$x:00003FE1                 jmp     ___CxxFrameHandler3
.text$x:00003FE1 __ehhandler$??1CItem@NGz@NArchive@@QAE@XZ endp
.text$x:00003FE1
.text$x:00003FE1 ; ---------------------------------------------------------------------------
.text$x:00003FE6                 align 4
.text$x:00003FE6 _text$x         ends
.text$x:00003FE6
.xdata$x:00003FE8 ; ===========================================================================
.xdata$x:00003FE8
.xdata$x:00003FE8 ; Segment type: Pure data
.xdata$x:00003FE8 ; Segment permissions: Read
.xdata$x:00003FE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003FE8                 assume cs:_xdata$x
.xdata$x:00003FE8                 ;org 3FE8h
.xdata$x:00003FE8 ; COMDAT (pick associative to section at 3F54)
.xdata$x:00003FE8 __unwindtable$??1CItem@NGz@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003FE8                                         ; DATA XREF: .xdata$x:00003FF8o
.xdata$x:00003FE9                 db 0FFh
.xdata$x:00003FEA                 db 0FFh
.xdata$x:00003FEB                 db 0FFh
.xdata$x:00003FEC                 dd offset __unwindfunclet$??1CItem@NGz@NArchive@@QAE@XZ$0
.xdata$x:00003FF0 __ehfuncinfo$??1CItem@NGz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003FF0                                         ; DATA XREF: __ehhandler$??1CItem@NGz@NArchive@@QAE@XZ+11o
.xdata$x:00003FF1                 db    5
.xdata$x:00003FF2                 db  93h ; Ã´
.xdata$x:00003FF3                 db  19h
.xdata$x:00003FF4                 db    1
.xdata$x:00003FF5                 db    0
.xdata$x:00003FF6                 db    0
.xdata$x:00003FF7                 db    0
.xdata$x:00003FF8                 dd offset __unwindtable$??1CItem@NGz@NArchive@@QAE@XZ
.xdata$x:00003FFC                 db    0
.xdata$x:00003FFD                 db    0
.xdata$x:00003FFE                 db    0
.xdata$x:00003FFF                 db    0
.xdata$x:00004000                 db    0
.xdata$x:00004001                 db    0
.xdata$x:00004002                 db    0
.xdata$x:00004003                 db    0
.xdata$x:00004004                 db    0
.xdata$x:00004005                 db    0
.xdata$x:00004006                 db    0
.xdata$x:00004007                 db    0
.xdata$x:00004008                 db    0
.xdata$x:00004009                 db    0
.xdata$x:0000400A                 db    0
.xdata$x:0000400B                 db    0
.xdata$x:0000400C                 db    0
.xdata$x:0000400D                 db    0
.xdata$x:0000400E                 db    0
.xdata$x:0000400F                 db    0
.xdata$x:00004010                 db    1
.xdata$x:00004011                 db    0
.xdata$x:00004012                 db    0
.xdata$x:00004013                 db    0
.xdata$x:00004013 _xdata$x        ends
.xdata$x:00004013
.text:00004014 ; ===========================================================================
.text:00004014
.text:00004014 ; Segment type: Pure code
.text:00004014 ; Segment permissions: Read/Execute
.text:00004014 _text           segment para public 'CODE' use32
.text:00004014                 assume cs:_text
.text:00004014                 ;org 4014h
.text:00004014 ; COMDAT (pick any)
.text:00004014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004014
.text:00004014 ; =============== S U B R O U T I N E =======================================
.text:00004014
.text:00004014 ; Attributes: bp-based frame
.text:00004014
.text:00004014 ; public: __thiscall COutStreamWithCRC::COutStreamWithCRC(void)
.text:00004014                 public ??0COutStreamWithCRC@@QAE@XZ
.text:00004014 ??0COutStreamWithCRC@@QAE@XZ proc near  ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1AFp
.text:00004014
.text:00004014 var_4           = dword ptr -4
.text:00004014
.text:00004014                 push    ebp
.text:00004015                 mov     ebp, esp
.text:00004017                 push    ecx
.text:00004018                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000401F                 mov     [ebp+var_4], ecx
.text:00004022                 mov     ecx, [ebp+var_4] ; this
.text:00004025                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:0000402A                 mov     ecx, [ebp+var_4]
.text:0000402D                 add     ecx, 4          ; this
.text:00004030                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004035                 mov     eax, [ebp+var_4]
.text:00004038                 mov     dword ptr [eax], offset ??_7COutStreamWithCRC@@6B@ ; const COutStreamWithCRC::`vftable'
.text:0000403E                 mov     ecx, [ebp+var_4]
.text:00004041                 add     ecx, 8
.text:00004044                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00004049                 mov     eax, [ebp+var_4]
.text:0000404C                 add     esp, 4
.text:0000404F                 cmp     ebp, esp
.text:00004051                 call    __RTC_CheckEsp
.text:00004056                 mov     esp, ebp
.text:00004058                 pop     ebp
.text:00004059                 retn
.text:00004059 ??0COutStreamWithCRC@@QAE@XZ endp
.text:00004059
.text:00004059 ; ---------------------------------------------------------------------------
.text:0000405A                 align 4
.text:0000405A _text           ends
.text:0000405A
.rdata:0000405C ; ===========================================================================
.rdata:0000405C
.rdata:0000405C ; Segment type: Pure data
.rdata:0000405C ; Segment permissions: Read
.rdata:0000405C _rdata          segment dword public 'DATA' use32
.rdata:0000405C                 assume cs:_rdata
.rdata:0000405C                 ;org 405Ch
.rdata:0000405C ; COMDAT (pick largest)
.rdata:0000405C                 dd offset ??_R4COutStreamWithCRC@@6B@ ; const COutStreamWithCRC::`RTTI Complete Object Locator'
.rdata:00004060                 public ??_7COutStreamWithCRC@@6B@
.rdata:00004060 ; const COutStreamWithCRC::`vftable'
.rdata:00004060 ??_7COutStreamWithCRC@@6B@ dd offset ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004060                                         ; DATA XREF: COutStreamWithCRC::COutStreamWithCRC(void)+24o
.rdata:00004060                                         ; COutStreamWithCRC::QueryInterface(_GUID const &,void * *)
.rdata:00004064                 dd offset ?AddRef@COutStreamWithCRC@@UAGKXZ ; COutStreamWithCRC::AddRef(void)
.rdata:00004068                 dd offset ?Release@COutStreamWithCRC@@UAGKXZ ; COutStreamWithCRC::Release(void)
.rdata:0000406C                 dd offset ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z ; COutStreamWithCRC::Write(void const *,uint,uint *)
.rdata:0000406C _rdata          ends
.rdata:0000406C
.rdata$r:00004070 ; ===========================================================================
.rdata$r:00004070
.rdata$r:00004070 ; Segment type: Pure data
.rdata$r:00004070 ; Segment permissions: Read
.rdata$r:00004070 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004070                 assume cs:_rdata$r
.rdata$r:00004070                 ;org 4070h
.rdata$r:00004070 ; COMDAT (pick any)
.rdata$r:00004070                 public ??_R4COutStreamWithCRC@@6B@
.rdata$r:00004070 ; const COutStreamWithCRC::`RTTI Complete Object Locator'
.rdata$r:00004070 ??_R4COutStreamWithCRC@@6B@ db    0     ; DATA XREF: .rdata:0000405Co
.rdata$r:00004071                 db    0
.rdata$r:00004072                 db    0
.rdata$r:00004073                 db    0
.rdata$r:00004074                 db    0
.rdata$r:00004075                 db    0
.rdata$r:00004076                 db    0
.rdata$r:00004077                 db    0
.rdata$r:00004078                 db    0
.rdata$r:00004079                 db    0
.rdata$r:0000407A                 db    0
.rdata$r:0000407B                 db    0
.rdata$r:0000407C                 dd offset ??_R0?AVCOutStreamWithCRC@@@8 ; COutStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00004080                 dd offset ??_R3COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004080 _rdata$r        ends
.rdata$r:00004080
.data:00004084 ; ===========================================================================
.data:00004084
.data:00004084 ; Segment type: Pure data
.data:00004084 ; Segment permissions: Read/Write
.data:00004084 _data           segment dword public 'DATA' use32
.data:00004084                 assume cs:_data
.data:00004084                 ;org 4084h
.data:00004084 ; COMDAT (pick any)
.data:00004084                 public ??_R0?AVCOutStreamWithCRC@@@8
.data:00004084 ; class COutStreamWithCRC `RTTI Type Descriptor'
.data:00004084 ??_R0?AVCOutStreamWithCRC@@@8 dd offset ??_7type_info@@6B@
.data:00004084                                         ; DATA XREF: .rdata$r:0000407Co
.data:00004084                                         ; .rdata$r:COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004084                                         ; const type_info::`vftable'
.data:00004088                 db    0
.data:00004089                 db    0
.data:0000408A                 db    0
.data:0000408B                 db    0
.data:0000408C                 db  2Eh ; .
.data:0000408D                 db  3Fh ; ?
.data:0000408E                 db  41h ; A
.data:0000408F                 db  56h ; V
.data:00004090                 db  43h ; C
.data:00004091                 db  4Fh ; O
.data:00004092                 db  75h ; u
.data:00004093                 db  74h ; t
.data:00004094                 db  53h ; S
.data:00004095                 db  74h ; t
.data:00004096                 db  72h ; r
.data:00004097                 db  65h ; e
.data:00004098                 db  61h ; a
.data:00004099                 db  6Dh ; m
.data:0000409A                 db  57h ; W
.data:0000409B                 db  69h ; i
.data:0000409C                 db  74h ; t
.data:0000409D                 db  68h ; h
.data:0000409E                 db  43h ; C
.data:0000409F                 db  52h ; R
.data:000040A0                 db  43h ; C
.data:000040A1                 db  40h ; @
.data:000040A2                 db  40h ; @
.data:000040A3                 db    0
.data:000040A3 _data           ends
.data:000040A3
.rdata$r:000040A4 ; ===========================================================================
.rdata$r:000040A4
.rdata$r:000040A4 ; Segment type: Pure data
.rdata$r:000040A4 ; Segment permissions: Read
.rdata$r:000040A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040A4                 assume cs:_rdata$r
.rdata$r:000040A4                 ;org 40A4h
.rdata$r:000040A4 ; COMDAT (pick any)
.rdata$r:000040A4                 public ??_R3COutStreamWithCRC@@8
.rdata$r:000040A4 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040A4 ??_R3COutStreamWithCRC@@8 db    0       ; DATA XREF: .rdata$r:00004080o
.rdata$r:000040A4                                         ; .rdata$r:000040E0o
.rdata$r:000040A5                 db    0
.rdata$r:000040A6                 db    0
.rdata$r:000040A7                 db    0
.rdata$r:000040A8                 db    1
.rdata$r:000040A9                 db    0
.rdata$r:000040AA                 db    0
.rdata$r:000040AB                 db    0
.rdata$r:000040AC                 db    4
.rdata$r:000040AD                 db    0
.rdata$r:000040AE                 db    0
.rdata$r:000040AF                 db    0
.rdata$r:000040B0                 dd offset ??_R2COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Base Class Array'
.rdata$r:000040B0 _rdata$r        ends
.rdata$r:000040B0
.rdata$r:000040B4 ; ===========================================================================
.rdata$r:000040B4
.rdata$r:000040B4 ; Segment type: Pure data
.rdata$r:000040B4 ; Segment permissions: Read
.rdata$r:000040B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040B4                 assume cs:_rdata$r
.rdata$r:000040B4                 ;org 40B4h
.rdata$r:000040B4 ; COMDAT (pick any)
.rdata$r:000040B4                 public ??_R2COutStreamWithCRC@@8
.rdata$r:000040B4 ; COutStreamWithCRC::`RTTI Base Class Array'
.rdata$r:000040B4 ??_R2COutStreamWithCRC@@8 dd offset ??_R1A@?0A@EA@COutStreamWithCRC@@8
.rdata$r:000040B4                                         ; DATA XREF: .rdata$r:000040B0o
.rdata$r:000040B4                                         ; COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000040B8                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000040BC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000040C0                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000040C4                 db    0
.rdata$r:000040C5                 align 4
.rdata$r:000040C5 _rdata$r        ends
.rdata$r:000040C5
.rdata$r:000040C8 ; ===========================================================================
.rdata$r:000040C8
.rdata$r:000040C8 ; Segment type: Pure data
.rdata$r:000040C8 ; Segment permissions: Read
.rdata$r:000040C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040C8                 assume cs:_rdata$r
.rdata$r:000040C8                 ;org 40C8h
.rdata$r:000040C8 ; COMDAT (pick any)
.rdata$r:000040C8                 public ??_R1A@?0A@EA@COutStreamWithCRC@@8
.rdata$r:000040C8 ; COutStreamWithCRC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000040C8 ??_R1A@?0A@EA@COutStreamWithCRC@@8 dd offset ??_R0?AVCOutStreamWithCRC@@@8
.rdata$r:000040C8                                         ; DATA XREF: .rdata$r:COutStreamWithCRC::`RTTI Base Class Array'o
.rdata$r:000040C8                                         ; COutStreamWithCRC `RTTI Type Descriptor'
.rdata$r:000040CC                 db    3
.rdata$r:000040CD                 db    0
.rdata$r:000040CE                 db    0
.rdata$r:000040CF                 db    0
.rdata$r:000040D0                 db    0
.rdata$r:000040D1                 db    0
.rdata$r:000040D2                 db    0
.rdata$r:000040D3                 db    0
.rdata$r:000040D4                 db 0FFh
.rdata$r:000040D5                 db 0FFh
.rdata$r:000040D6                 db 0FFh
.rdata$r:000040D7                 db 0FFh
.rdata$r:000040D8                 db    0
.rdata$r:000040D9                 db    0
.rdata$r:000040DA                 db    0
.rdata$r:000040DB                 db    0
.rdata$r:000040DC                 db  40h ; @
.rdata$r:000040DD                 db    0
.rdata$r:000040DE                 db    0
.rdata$r:000040DF                 db    0
.rdata$r:000040E0                 dd offset ??_R3COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040E0 _rdata$r        ends
.rdata$r:000040E0
.rdata$r:000040E4 ; ===========================================================================
.rdata$r:000040E4
.rdata$r:000040E4 ; Segment type: Pure data
.rdata$r:000040E4 ; Segment permissions: Read
.rdata$r:000040E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040E4                 assume cs:_rdata$r
.rdata$r:000040E4                 ;org 40E4h
.rdata$r:000040E4 ; COMDAT (pick any)
.rdata$r:000040E4                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:000040E4 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000040E4 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:000040E4                                         ; DATA XREF: .rdata$r:000040B8o
.rdata$r:000040E4                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:000040E4                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:000040E8                 db    1
.rdata$r:000040E9                 db    0
.rdata$r:000040EA                 db    0
.rdata$r:000040EB                 db    0
.rdata$r:000040EC                 db    0
.rdata$r:000040ED                 db    0
.rdata$r:000040EE                 db    0
.rdata$r:000040EF                 db    0
.rdata$r:000040F0                 db 0FFh
.rdata$r:000040F1                 db 0FFh
.rdata$r:000040F2                 db 0FFh
.rdata$r:000040F3                 db 0FFh
.rdata$r:000040F4                 db    0
.rdata$r:000040F5                 db    0
.rdata$r:000040F6                 db    0
.rdata$r:000040F7                 db    0
.rdata$r:000040F8                 db  40h ; @
.rdata$r:000040F9                 db    0
.rdata$r:000040FA                 db    0
.rdata$r:000040FB                 db    0
.rdata$r:000040FC                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040FC _rdata$r        ends
.rdata$r:000040FC
.data:00004100 ; ===========================================================================
.data:00004100
.data:00004100 ; Segment type: Pure data
.data:00004100 ; Segment permissions: Read/Write
.data:00004100 _data           segment dword public 'DATA' use32
.data:00004100                 assume cs:_data
.data:00004100                 ;org 4100h
.data:00004100 ; COMDAT (pick any)
.data:00004100                 public ??_R0?AUISequentialOutStream@@@8
.data:00004100 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00004100 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00004100                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004100                                         ; .rdata$r:00004400o
.data:00004100                                         ; const type_info::`vftable'
.data:00004104                 align 8
.data:00004108 a_?auisequentia db '.?AUISequentialOutStream@@',0
.data:00004123                 align 4
.data:00004123 _data           ends
.data:00004123
.rdata$r:00004124 ; ===========================================================================
.rdata$r:00004124
.rdata$r:00004124 ; Segment type: Pure data
.rdata$r:00004124 ; Segment permissions: Read
.rdata$r:00004124 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004124                 assume cs:_rdata$r
.rdata$r:00004124                 ;org 4124h
.rdata$r:00004124 ; COMDAT (pick any)
.rdata$r:00004124                 public ??_R3ISequentialOutStream@@8
.rdata$r:00004124 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004124 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:000040FCo
.rdata$r:00004124                                         ; .rdata$r:00004404o
.rdata$r:00004125                 db    0
.rdata$r:00004126                 db    0
.rdata$r:00004127                 db    0
.rdata$r:00004128                 db    0
.rdata$r:00004129                 db    0
.rdata$r:0000412A                 db    0
.rdata$r:0000412B                 db    0
.rdata$r:0000412C                 db    2
.rdata$r:0000412D                 db    0
.rdata$r:0000412E                 db    0
.rdata$r:0000412F                 db    0
.rdata$r:00004130                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004130 _rdata$r        ends
.rdata$r:00004130
.rdata$r:00004134 ; ===========================================================================
.rdata$r:00004134
.rdata$r:00004134 ; Segment type: Pure data
.rdata$r:00004134 ; Segment permissions: Read
.rdata$r:00004134 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004134                 assume cs:_rdata$r
.rdata$r:00004134                 ;org 4134h
.rdata$r:00004134 ; COMDAT (pick any)
.rdata$r:00004134                 public ??_R2ISequentialOutStream@@8
.rdata$r:00004134 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004134 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00004134                                         ; DATA XREF: .rdata$r:00004130o
.rdata$r:00004134                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004138                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000413C                 db    0
.rdata$r:0000413D                 align 10h
.rdata$r:0000413D _rdata$r        ends
.rdata$r:0000413D
.rdata$r:00004140 ; ===========================================================================
.rdata$r:00004140
.rdata$r:00004140 ; Segment type: Pure data
.rdata$r:00004140 ; Segment permissions: Read
.rdata$r:00004140 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004140                 assume cs:_rdata$r
.rdata$r:00004140                 ;org 4140h
.rdata$r:00004140 ; COMDAT (pick any)
.rdata$r:00004140                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00004140 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004140 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00004140                                         ; DATA XREF: .rdata$r:000040BCo
.rdata$r:00004140                                         ; .rdata$r:00004138o ...
.rdata$r:00004140                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004144                 db    0
.rdata$r:00004145                 db    0
.rdata$r:00004146                 db    0
.rdata$r:00004147                 db    0
.rdata$r:00004148                 db    0
.rdata$r:00004149                 db    0
.rdata$r:0000414A                 db    0
.rdata$r:0000414B                 db    0
.rdata$r:0000414C                 db 0FFh
.rdata$r:0000414D                 db 0FFh
.rdata$r:0000414E                 db 0FFh
.rdata$r:0000414F                 db 0FFh
.rdata$r:00004150                 db    0
.rdata$r:00004151                 db    0
.rdata$r:00004152                 db    0
.rdata$r:00004153                 db    0
.rdata$r:00004154                 db  40h ; @
.rdata$r:00004155                 db    0
.rdata$r:00004156                 db    0
.rdata$r:00004157                 db    0
.rdata$r:00004158                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004158 _rdata$r        ends
.rdata$r:00004158
.data:0000415C ; ===========================================================================
.data:0000415C
.data:0000415C ; Segment type: Pure data
.data:0000415C ; Segment permissions: Read/Write
.data:0000415C _data           segment dword public 'DATA' use32
.data:0000415C                 assume cs:_data
.data:0000415C                 ;org 415Ch
.data:0000415C ; COMDAT (pick any)
.data:0000415C                 public ??_R0?AUIUnknown@@@8
.data:0000415C ; struct IUnknown `RTTI Type Descriptor'
.data:0000415C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:0000415C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000415C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:0000415C                                         ; const type_info::`vftable'
.data:00004160                 db    0
.data:00004161                 db    0
.data:00004162                 db    0
.data:00004163                 db    0
.data:00004164                 db  2Eh ; .
.data:00004165                 db  3Fh ; ?
.data:00004166                 db  41h ; A
.data:00004167                 db  55h ; U
.data:00004168                 db  49h ; I
.data:00004169                 db  55h ; U
.data:0000416A                 db  6Eh ; n
.data:0000416B                 db  6Bh ; k
.data:0000416C                 db  6Eh ; n
.data:0000416D                 db  6Fh ; o
.data:0000416E                 db  77h ; w
.data:0000416F                 db  6Eh ; n
.data:00004170                 db  40h ; @
.data:00004171                 db  40h ; @
.data:00004172                 db    0
.data:00004173                 align 4
.data:00004173 _data           ends
.data:00004173
.rdata$r:00004174 ; ===========================================================================
.rdata$r:00004174
.rdata$r:00004174 ; Segment type: Pure data
.rdata$r:00004174 ; Segment permissions: Read
.rdata$r:00004174 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004174                 assume cs:_rdata$r
.rdata$r:00004174                 ;org 4174h
.rdata$r:00004174 ; COMDAT (pick any)
.rdata$r:00004174                 public ??_R3IUnknown@@8
.rdata$r:00004174 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004174 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00004158o
.rdata$r:00004174                                         ; .rdata$r:00004678o ...
.rdata$r:00004175                 db    0
.rdata$r:00004176                 db    0
.rdata$r:00004177                 db    0
.rdata$r:00004178                 db    0
.rdata$r:00004179                 db    0
.rdata$r:0000417A                 db    0
.rdata$r:0000417B                 db    0
.rdata$r:0000417C                 db    1
.rdata$r:0000417D                 db    0
.rdata$r:0000417E                 db    0
.rdata$r:0000417F                 db    0
.rdata$r:00004180                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004180 _rdata$r        ends
.rdata$r:00004180
.rdata$r:00004184 ; ===========================================================================
.rdata$r:00004184
.rdata$r:00004184 ; Segment type: Pure data
.rdata$r:00004184 ; Segment permissions: Read
.rdata$r:00004184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004184                 assume cs:_rdata$r
.rdata$r:00004184                 ;org 4184h
.rdata$r:00004184 ; COMDAT (pick any)
.rdata$r:00004184                 public ??_R2IUnknown@@8
.rdata$r:00004184 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00004184 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00004184                                         ; DATA XREF: .rdata$r:00004180o
.rdata$r:00004184                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004188                 db    0
.rdata$r:00004189                 align 4
.rdata$r:00004189 _rdata$r        ends
.rdata$r:00004189
.rdata$r:0000418C ; ===========================================================================
.rdata$r:0000418C
.rdata$r:0000418C ; Segment type: Pure data
.rdata$r:0000418C ; Segment permissions: Read
.rdata$r:0000418C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000418C                 assume cs:_rdata$r
.rdata$r:0000418C                 ;org 418Ch
.rdata$r:0000418C ; COMDAT (pick any)
.rdata$r:0000418C                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:0000418C ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000418C ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000418C                                         ; DATA XREF: .rdata$r:000040C0o
.rdata$r:0000418C                                         ; .rdata$r:00004BC4o
.rdata$r:0000418C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004190                 db    0
.rdata$r:00004191                 db    0
.rdata$r:00004192                 db    0
.rdata$r:00004193                 db    0
.rdata$r:00004194                 db    4
.rdata$r:00004195                 db    0
.rdata$r:00004196                 db    0
.rdata$r:00004197                 db    0
.rdata$r:00004198                 db 0FFh
.rdata$r:00004199                 db 0FFh
.rdata$r:0000419A                 db 0FFh
.rdata$r:0000419B                 db 0FFh
.rdata$r:0000419C                 db    0
.rdata$r:0000419D                 db    0
.rdata$r:0000419E                 db    0
.rdata$r:0000419F                 db    0
.rdata$r:000041A0                 db  40h ; @
.rdata$r:000041A1                 db    0
.rdata$r:000041A2                 db    0
.rdata$r:000041A3                 db    0
.rdata$r:000041A4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041A4 _rdata$r        ends
.rdata$r:000041A4
.data:000041A8 ; ===========================================================================
.data:000041A8
.data:000041A8 ; Segment type: Pure data
.data:000041A8 ; Segment permissions: Read/Write
.data:000041A8 _data           segment dword public 'DATA' use32
.data:000041A8                 assume cs:_data
.data:000041A8                 ;org 41A8h
.data:000041A8 ; COMDAT (pick any)
.data:000041A8                 public ??_R0?AVCMyUnknownImp@@@8
.data:000041A8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000041A8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000041A8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000041A8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000041A8                                         ; const type_info::`vftable'
.data:000041AC                 align 10h
.data:000041B0 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000041B0 _data           ends
.data:000041B0
.rdata$r:000041C4 ; ===========================================================================
.rdata$r:000041C4
.rdata$r:000041C4 ; Segment type: Pure data
.rdata$r:000041C4 ; Segment permissions: Read
.rdata$r:000041C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041C4                 assume cs:_rdata$r
.rdata$r:000041C4                 ;org 41C4h
.rdata$r:000041C4 ; COMDAT (pick any)
.rdata$r:000041C4                 public ??_R3CMyUnknownImp@@8
.rdata$r:000041C4 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041C4 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000041A4o
.rdata$r:000041C4                                         ; .rdata$r:000041F4o ...
.rdata$r:000041C5                 db    0
.rdata$r:000041C6                 db    0
.rdata$r:000041C7                 db    0
.rdata$r:000041C8                 db    0
.rdata$r:000041C9                 db    0
.rdata$r:000041CA                 db    0
.rdata$r:000041CB                 db    0
.rdata$r:000041CC                 db    1
.rdata$r:000041CD                 db    0
.rdata$r:000041CE                 db    0
.rdata$r:000041CF                 db    0
.rdata$r:000041D0                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000041D0 _rdata$r        ends
.rdata$r:000041D0
.rdata$r:000041D4 ; ===========================================================================
.rdata$r:000041D4
.rdata$r:000041D4 ; Segment type: Pure data
.rdata$r:000041D4 ; Segment permissions: Read
.rdata$r:000041D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041D4                 assume cs:_rdata$r
.rdata$r:000041D4                 ;org 41D4h
.rdata$r:000041D4 ; COMDAT (pick any)
.rdata$r:000041D4                 public ??_R2CMyUnknownImp@@8
.rdata$r:000041D4 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000041D4 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000041D4                                         ; DATA XREF: .rdata$r:000041D0o
.rdata$r:000041D4                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000041D8                 db    0
.rdata$r:000041D9                 align 4
.rdata$r:000041D9 _rdata$r        ends
.rdata$r:000041D9
.rdata$r:000041DC ; ===========================================================================
.rdata$r:000041DC
.rdata$r:000041DC ; Segment type: Pure data
.rdata$r:000041DC ; Segment permissions: Read
.rdata$r:000041DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000041DC                 assume cs:_rdata$r
.rdata$r:000041DC                 ;org 41DCh
.rdata$r:000041DC ; COMDAT (pick any)
.rdata$r:000041DC                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000041DC ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000041DC ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000041DC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000041DC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000041E0                 db    0
.rdata$r:000041E1                 db    0
.rdata$r:000041E2                 db    0
.rdata$r:000041E3                 db    0
.rdata$r:000041E4                 db    0
.rdata$r:000041E5                 db    0
.rdata$r:000041E6                 db    0
.rdata$r:000041E7                 db    0
.rdata$r:000041E8                 db 0FFh
.rdata$r:000041E9                 db 0FFh
.rdata$r:000041EA                 db 0FFh
.rdata$r:000041EB                 db 0FFh
.rdata$r:000041EC                 db    0
.rdata$r:000041ED                 db    0
.rdata$r:000041EE                 db    0
.rdata$r:000041EF                 db    0
.rdata$r:000041F0                 db  40h ; @
.rdata$r:000041F1                 db    0
.rdata$r:000041F2                 db    0
.rdata$r:000041F3                 db    0
.rdata$r:000041F4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000041F4 _rdata$r        ends
.rdata$r:000041F4
.text:000041F8 ; ===========================================================================
.text:000041F8
.text:000041F8 ; Segment type: Pure code
.text:000041F8 ; Segment permissions: Read/Execute
.text:000041F8 _text           segment para public 'CODE' use32
.text:000041F8                 assume cs:_text
.text:000041F8                 ;org 41F8h
.text:000041F8 ; COMDAT (pick any)
.text:000041F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041F8
.text:000041F8 ; =============== S U B R O U T I N E =======================================
.text:000041F8
.text:000041F8 ; Attributes: bp-based frame
.text:000041F8
.text:000041F8 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000041F8                 public ??0CMyUnknownImp@@QAE@XZ
.text:000041F8 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: COutStreamWithCRC::COutStreamWithCRC(void)+1Cp
.text:000041F8                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+27p ...
.text:000041F8
.text:000041F8 var_4           = dword ptr -4
.text:000041F8
.text:000041F8                 push    ebp
.text:000041F9                 mov     ebp, esp
.text:000041FB                 push    ecx
.text:000041FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004203                 mov     [ebp+var_4], ecx
.text:00004206                 mov     eax, [ebp+var_4]
.text:00004209                 mov     dword ptr [eax], 0
.text:0000420F                 mov     eax, [ebp+var_4]
.text:00004212                 mov     esp, ebp
.text:00004214                 pop     ebp
.text:00004215                 retn
.text:00004215 ??0CMyUnknownImp@@QAE@XZ endp
.text:00004215
.text:00004215 ; ---------------------------------------------------------------------------
.text:00004216                 align 4
.text:00004216 _text           ends
.text:00004216
.text:00004218 ; ===========================================================================
.text:00004218
.text:00004218 ; Segment type: Pure code
.text:00004218 ; Segment permissions: Read/Execute
.text:00004218 _text           segment para public 'CODE' use32
.text:00004218                 assume cs:_text
.text:00004218                 ;org 4218h
.text:00004218 ; COMDAT (pick any)
.text:00004218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004218
.text:00004218 ; =============== S U B R O U T I N E =======================================
.text:00004218
.text:00004218 ; Attributes: bp-based frame
.text:00004218
.text:00004218 ; __int32 __stdcall COutStreamWithCRC::QueryInterface(COutStreamWithCRC *this, const struct _GUID *Buf1, void **)
.text:00004218                 public ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.text:00004218 ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004218                                         ; DATA XREF: .rdata:const COutStreamWithCRC::`vftable'o
.text:00004218
.text:00004218 this            = dword ptr  8
.text:00004218 Buf1            = dword ptr  0Ch
.text:00004218 arg_8           = dword ptr  10h
.text:00004218
.text:00004218                 push    ebp
.text:00004219                 mov     ebp, esp
.text:0000421B                 mov     eax, [ebp+arg_8]
.text:0000421E                 mov     dword ptr [eax], 0
.text:00004224                 push    offset _IID_IUnknown ; Buf2
.text:00004229                 mov     ecx, [ebp+Buf1]
.text:0000422C                 push    ecx             ; Buf1
.text:0000422D                 call    ___@8           ; __(x,x)
.text:00004232                 test    eax, eax
.text:00004234                 jz      short loc_4240
.text:00004236                 mov     edx, [ebp+arg_8]
.text:00004239                 mov     eax, [ebp+this]
.text:0000423C                 mov     [edx], eax
.text:0000423E                 jmp     short loc_4247
.text:00004240 ; ---------------------------------------------------------------------------
.text:00004240
.text:00004240 loc_4240:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004240                 mov     eax, 80004002h
.text:00004245                 jmp     short loc_4258
.text:00004247 ; ---------------------------------------------------------------------------
.text:00004247
.text:00004247 loc_4247:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+26j
.text:00004247                 mov     ecx, [ebp+this]
.text:0000424A                 mov     edx, [ecx+4]
.text:0000424D                 add     edx, 1
.text:00004250                 mov     eax, [ebp+this]
.text:00004253                 mov     [eax+4], edx
.text:00004256                 xor     eax, eax
.text:00004258
.text:00004258 loc_4258:                               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+2Dj
.text:00004258                 cmp     ebp, esp
.text:0000425A                 call    __RTC_CheckEsp
.text:0000425F                 pop     ebp
.text:00004260                 retn    0Ch
.text:00004260 ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004260
.text:00004260 ; ---------------------------------------------------------------------------
.text:00004263                 align 4
.text:00004263 _text           ends
.text:00004263
.text:00004264 ; ===========================================================================
.text:00004264
.text:00004264 ; Segment type: Pure code
.text:00004264 ; Segment permissions: Read/Execute
.text:00004264 _text           segment para public 'CODE' use32
.text:00004264                 assume cs:_text
.text:00004264                 ;org 4264h
.text:00004264 ; COMDAT (pick any)
.text:00004264                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004264
.text:00004264 ; =============== S U B R O U T I N E =======================================
.text:00004264
.text:00004264 ; Attributes: bp-based frame
.text:00004264
.text:00004264 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00004264                 public ___@8
.text:00004264 ___@8           proc near               ; CODE XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+15p
.text:00004264                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+26p ...
.text:00004264
.text:00004264 Buf1            = dword ptr  8
.text:00004264 Buf2            = dword ptr  0Ch
.text:00004264
.text:00004264                 push    ebp
.text:00004265                 mov     ebp, esp
.text:00004267                 mov     eax, [ebp+Buf2]
.text:0000426A                 push    eax             ; Buf2
.text:0000426B                 mov     ecx, [ebp+Buf1]
.text:0000426E                 push    ecx             ; Buf1
.text:0000426F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00004274                 cmp     ebp, esp
.text:00004276                 call    __RTC_CheckEsp
.text:0000427B                 pop     ebp
.text:0000427C                 retn    8
.text:0000427C ___@8           endp
.text:0000427C
.text:0000427C ; ---------------------------------------------------------------------------
.text:0000427F                 align 10h
.text:0000427F _text           ends
.text:0000427F
.text:00004280 ; ===========================================================================
.text:00004280
.text:00004280 ; Segment type: Pure code
.text:00004280 ; Segment permissions: Read/Execute
.text:00004280 _text           segment para public 'CODE' use32
.text:00004280                 assume cs:_text
.text:00004280                 ;org 4280h
.text:00004280 ; COMDAT (pick any)
.text:00004280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004280
.text:00004280 ; =============== S U B R O U T I N E =======================================
.text:00004280
.text:00004280 ; Attributes: bp-based frame
.text:00004280
.text:00004280 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00004280                 public _IsEqualGUID@8
.text:00004280 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00004280
.text:00004280 Buf1            = dword ptr  8
.text:00004280 Buf2            = dword ptr  0Ch
.text:00004280
.text:00004280                 push    ebp
.text:00004281                 mov     ebp, esp
.text:00004283                 push    10h             ; Size
.text:00004285                 mov     eax, [ebp+Buf2]
.text:00004288                 push    eax             ; Buf2
.text:00004289                 mov     ecx, [ebp+Buf1]
.text:0000428C                 push    ecx             ; Buf1
.text:0000428D                 call    _memcmp
.text:00004292                 add     esp, 0Ch
.text:00004295                 neg     eax
.text:00004297                 sbb     eax, eax
.text:00004299                 add     eax, 1
.text:0000429C                 cmp     ebp, esp
.text:0000429E                 call    __RTC_CheckEsp
.text:000042A3                 pop     ebp
.text:000042A4                 retn    8
.text:000042A4 _IsEqualGUID@8  endp
.text:000042A4
.text:000042A4 ; ---------------------------------------------------------------------------
.text:000042A7                 align 4
.text:000042A7 _text           ends
.text:000042A7
.text:000042A8 ; ===========================================================================
.text:000042A8
.text:000042A8 ; Segment type: Pure code
.text:000042A8 ; Segment permissions: Read/Execute
.text:000042A8 _text           segment para public 'CODE' use32
.text:000042A8                 assume cs:_text
.text:000042A8                 ;org 42A8h
.text:000042A8 ; COMDAT (pick any)
.text:000042A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042A8
.text:000042A8 ; =============== S U B R O U T I N E =======================================
.text:000042A8
.text:000042A8 ; Attributes: bp-based frame
.text:000042A8
.text:000042A8 ; unsigned __int32 __stdcall COutStreamWithCRC::AddRef(COutStreamWithCRC *this)
.text:000042A8                 public ?AddRef@COutStreamWithCRC@@UAGKXZ
.text:000042A8 ?AddRef@COutStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00004064o
.text:000042A8
.text:000042A8 var_4           = dword ptr -4
.text:000042A8 this            = dword ptr  8
.text:000042A8
.text:000042A8                 push    ebp
.text:000042A9                 mov     ebp, esp
.text:000042AB                 push    ecx
.text:000042AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042B3                 mov     eax, [ebp+this]
.text:000042B6                 mov     ecx, [eax+4]
.text:000042B9                 add     ecx, 1
.text:000042BC                 mov     [ebp+var_4], ecx
.text:000042BF                 mov     edx, [ebp+this]
.text:000042C2                 mov     eax, [ebp+var_4]
.text:000042C5                 mov     [edx+4], eax
.text:000042C8                 mov     eax, [ebp+var_4]
.text:000042CB                 mov     esp, ebp
.text:000042CD                 pop     ebp
.text:000042CE                 retn    4
.text:000042CE ?AddRef@COutStreamWithCRC@@UAGKXZ endp
.text:000042CE
.text:000042CE ; ---------------------------------------------------------------------------
.text:000042D1                 align 4
.text:000042D1 _text           ends
.text:000042D1
.text:000042D4 ; ===========================================================================
.text:000042D4
.text:000042D4 ; Segment type: Pure code
.text:000042D4 ; Segment permissions: Read/Execute
.text:000042D4 _text           segment para public 'CODE' use32
.text:000042D4                 assume cs:_text
.text:000042D4                 ;org 42D4h
.text:000042D4 ; COMDAT (pick any)
.text:000042D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042D4
.text:000042D4 ; =============== S U B R O U T I N E =======================================
.text:000042D4
.text:000042D4 ; Attributes: bp-based frame
.text:000042D4
.text:000042D4 ; unsigned __int32 __stdcall COutStreamWithCRC::Release(COutStreamWithCRC *this)
.text:000042D4                 public ?Release@COutStreamWithCRC@@UAGKXZ
.text:000042D4 ?Release@COutStreamWithCRC@@UAGKXZ proc near ; DATA XREF: .rdata:00004068o
.text:000042D4
.text:000042D4 var_10          = dword ptr -10h
.text:000042D4 var_C           = dword ptr -0Ch
.text:000042D4 var_8           = dword ptr -8
.text:000042D4 var_4           = dword ptr -4
.text:000042D4 this            = dword ptr  8
.text:000042D4
.text:000042D4                 push    ebp
.text:000042D5                 mov     ebp, esp
.text:000042D7                 sub     esp, 10h
.text:000042DA                 mov     eax, 0CCCCCCCCh
.text:000042DF                 mov     [ebp+var_10], eax
.text:000042E2                 mov     [ebp+var_C], eax
.text:000042E5                 mov     [ebp+var_8], eax
.text:000042E8                 mov     [ebp+var_4], eax
.text:000042EB                 mov     eax, [ebp+this]
.text:000042EE                 mov     ecx, [eax+4]
.text:000042F1                 sub     ecx, 1
.text:000042F4                 mov     [ebp+var_C], ecx
.text:000042F7                 mov     edx, [ebp+this]
.text:000042FA                 mov     eax, [ebp+var_C]
.text:000042FD                 mov     [edx+4], eax
.text:00004300                 cmp     [ebp+var_C], 0
.text:00004304                 jz      short loc_430E
.text:00004306                 mov     ecx, [ebp+this]
.text:00004309                 mov     eax, [ecx+4]
.text:0000430C                 jmp     short loc_4338
.text:0000430E ; ---------------------------------------------------------------------------
.text:0000430E
.text:0000430E loc_430E:                               ; CODE XREF: COutStreamWithCRC::Release(void)+30j
.text:0000430E                 mov     edx, [ebp+this]
.text:00004311                 mov     [ebp+var_8], edx
.text:00004314                 mov     eax, [ebp+var_8]
.text:00004317                 mov     [ebp+var_4], eax
.text:0000431A                 cmp     [ebp+var_4], 0
.text:0000431E                 jz      short loc_432F
.text:00004320                 push    1
.text:00004322                 mov     ecx, [ebp+var_4]
.text:00004325                 call    ??_GCOutStreamWithCRC@@QAEPAXI@Z ; COutStreamWithCRC::`scalar deleting destructor'(uint)
.text:0000432A                 mov     [ebp+var_10], eax
.text:0000432D                 jmp     short loc_4336
.text:0000432F ; ---------------------------------------------------------------------------
.text:0000432F
.text:0000432F loc_432F:                               ; CODE XREF: COutStreamWithCRC::Release(void)+4Aj
.text:0000432F                 mov     [ebp+var_10], 0
.text:00004336
.text:00004336 loc_4336:                               ; CODE XREF: COutStreamWithCRC::Release(void)+59j
.text:00004336                 xor     eax, eax
.text:00004338
.text:00004338 loc_4338:                               ; CODE XREF: COutStreamWithCRC::Release(void)+38j
.text:00004338                 add     esp, 10h
.text:0000433B                 cmp     ebp, esp
.text:0000433D                 call    __RTC_CheckEsp
.text:00004342                 mov     esp, ebp
.text:00004344                 pop     ebp
.text:00004345                 retn    4
.text:00004345 ?Release@COutStreamWithCRC@@UAGKXZ endp
.text:00004345
.text:00004345 _text           ends
.text:00004345
.text:00004348 ; ===========================================================================
.text:00004348
.text:00004348 ; Segment type: Pure code
.text:00004348 ; Segment permissions: Read/Execute
.text:00004348 _text           segment para public 'CODE' use32
.text:00004348                 assume cs:_text
.text:00004348                 ;org 4348h
.text:00004348 ; COMDAT (pick any)
.text:00004348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004348
.text:00004348 ; =============== S U B R O U T I N E =======================================
.text:00004348
.text:00004348 ; Attributes: bp-based frame
.text:00004348
.text:00004348 ; public: void * __thiscall COutStreamWithCRC::`scalar deleting destructor'(unsigned int)
.text:00004348                 public ??_GCOutStreamWithCRC@@QAEPAXI@Z
.text:00004348 ??_GCOutStreamWithCRC@@QAEPAXI@Z proc near
.text:00004348                                         ; CODE XREF: COutStreamWithCRC::Release(void)+51p
.text:00004348
.text:00004348 var_4           = dword ptr -4
.text:00004348 arg_0           = dword ptr  8
.text:00004348
.text:00004348                 push    ebp
.text:00004349                 mov     ebp, esp
.text:0000434B                 push    ecx
.text:0000434C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004353                 mov     [ebp+var_4], ecx
.text:00004356                 mov     ecx, [ebp+var_4] ; this
.text:00004359                 call    ??1COutStreamWithCRC@@QAE@XZ ; COutStreamWithCRC::~COutStreamWithCRC(void)
.text:0000435E                 mov     eax, [ebp+arg_0]
.text:00004361                 and     eax, 1
.text:00004364                 jz      short loc_4372
.text:00004366                 mov     ecx, [ebp+var_4]
.text:00004369                 push    ecx             ; void *
.text:0000436A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000436F                 add     esp, 4
.text:00004372
.text:00004372 loc_4372:                               ; CODE XREF: COutStreamWithCRC::`scalar deleting destructor'(uint)+1Cj
.text:00004372                 mov     eax, [ebp+var_4]
.text:00004375                 add     esp, 4
.text:00004378                 cmp     ebp, esp
.text:0000437A                 call    __RTC_CheckEsp
.text:0000437F                 mov     esp, ebp
.text:00004381                 pop     ebp
.text:00004382                 retn    4
.text:00004382 ??_GCOutStreamWithCRC@@QAEPAXI@Z endp
.text:00004382
.text:00004382 ; ---------------------------------------------------------------------------
.text:00004385                 align 4
.text:00004385 _text           ends
.text:00004385
.text:00004388 ; ===========================================================================
.text:00004388
.text:00004388 ; Segment type: Pure code
.text:00004388 ; Segment permissions: Read/Execute
.text:00004388 _text           segment para public 'CODE' use32
.text:00004388                 assume cs:_text
.text:00004388                 ;org 4388h
.text:00004388 ; COMDAT (pick any)
.text:00004388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004388
.text:00004388 ; =============== S U B R O U T I N E =======================================
.text:00004388
.text:00004388 ; Attributes: bp-based frame
.text:00004388
.text:00004388 ; _DWORD __thiscall COutStreamWithCRC::~COutStreamWithCRC(COutStreamWithCRC *__hidden this)
.text:00004388                 public ??1COutStreamWithCRC@@QAE@XZ
.text:00004388 ??1COutStreamWithCRC@@QAE@XZ proc near  ; CODE XREF: COutStreamWithCRC::`scalar deleting destructor'(uint)+11p
.text:00004388
.text:00004388 var_4           = dword ptr -4
.text:00004388
.text:00004388                 push    ebp
.text:00004389                 mov     ebp, esp
.text:0000438B                 push    ecx
.text:0000438C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004393                 mov     [ebp+var_4], ecx
.text:00004396                 mov     ecx, [ebp+var_4]
.text:00004399                 add     ecx, 8
.text:0000439C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000043A1                 add     esp, 4
.text:000043A4                 cmp     ebp, esp
.text:000043A6                 call    __RTC_CheckEsp
.text:000043AB                 mov     esp, ebp
.text:000043AD                 pop     ebp
.text:000043AE                 retn
.text:000043AE ??1COutStreamWithCRC@@QAE@XZ endp
.text:000043AE
.text:000043AE ; ---------------------------------------------------------------------------
.text:000043AF                 align 10h
.text:000043AF _text           ends
.text:000043AF
.text:000043B0 ; ===========================================================================
.text:000043B0
.text:000043B0 ; Segment type: Pure code
.text:000043B0 ; Segment permissions: Read/Execute
.text:000043B0 _text           segment para public 'CODE' use32
.text:000043B0                 assume cs:_text
.text:000043B0                 ;org 43B0h
.text:000043B0 ; COMDAT (pick any)
.text:000043B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043B0
.text:000043B0 ; =============== S U B R O U T I N E =======================================
.text:000043B0
.text:000043B0 ; Attributes: bp-based frame
.text:000043B0
.text:000043B0 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:000043B0                 public ??0ISequentialOutStream@@QAE@XZ
.text:000043B0 ??0ISequentialOutStream@@QAE@XZ proc near
.text:000043B0                                         ; CODE XREF: COutStreamWithCRC::COutStreamWithCRC(void)+11p
.text:000043B0
.text:000043B0 var_4           = dword ptr -4
.text:000043B0
.text:000043B0                 push    ebp
.text:000043B1                 mov     ebp, esp
.text:000043B3                 push    ecx
.text:000043B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043BB                 mov     [ebp+var_4], ecx
.text:000043BE                 mov     ecx, [ebp+var_4]
.text:000043C1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000043C6                 mov     eax, [ebp+var_4]
.text:000043C9                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:000043CF                 mov     eax, [ebp+var_4]
.text:000043D2                 add     esp, 4
.text:000043D5                 cmp     ebp, esp
.text:000043D7                 call    __RTC_CheckEsp
.text:000043DC                 mov     esp, ebp
.text:000043DE                 pop     ebp
.text:000043DF                 retn
.text:000043DF ??0ISequentialOutStream@@QAE@XZ endp
.text:000043DF
.text:000043DF _text           ends
.text:000043DF
.rdata:000043E0 ; ===========================================================================
.rdata:000043E0
.rdata:000043E0 ; Segment type: Pure data
.rdata:000043E0 ; Segment permissions: Read
.rdata:000043E0 _rdata          segment dword public 'DATA' use32
.rdata:000043E0                 assume cs:_rdata
.rdata:000043E0                 ;org 43E0h
.rdata:000043E0 ; COMDAT (pick largest)
.rdata:000043E0                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:000043E4                 public ??_7ISequentialOutStream@@6B@
.rdata:000043E4 ; const ISequentialOutStream::`vftable'
.rdata:000043E4 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:000043E4                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:000043E8                 dd offset __purecall
.rdata:000043EC                 dd offset __purecall
.rdata:000043F0                 dd offset __purecall
.rdata:000043F0 _rdata          ends
.rdata:000043F0
.rdata$r:000043F4 ; ===========================================================================
.rdata$r:000043F4
.rdata$r:000043F4 ; Segment type: Pure data
.rdata$r:000043F4 ; Segment permissions: Read
.rdata$r:000043F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000043F4                 assume cs:_rdata$r
.rdata$r:000043F4                 ;org 43F4h
.rdata$r:000043F4 ; COMDAT (pick any)
.rdata$r:000043F4                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:000043F4 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:000043F4 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:000043E0o
.rdata$r:000043F5                 db    0
.rdata$r:000043F6                 db    0
.rdata$r:000043F7                 db    0
.rdata$r:000043F8                 db    0
.rdata$r:000043F9                 db    0
.rdata$r:000043FA                 db    0
.rdata$r:000043FB                 db    0
.rdata$r:000043FC                 db    0
.rdata$r:000043FD                 db    0
.rdata$r:000043FE                 db    0
.rdata$r:000043FF                 db    0
.rdata$r:00004400                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00004404                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004404 _rdata$r        ends
.rdata$r:00004404
.text:00004408 ; ===========================================================================
.text:00004408
.text:00004408 ; Segment type: Pure code
.text:00004408 ; Segment permissions: Read/Execute
.text:00004408 _text           segment para public 'CODE' use32
.text:00004408                 assume cs:_text
.text:00004408                 ;org 4408h
.text:00004408 ; COMDAT (pick any)
.text:00004408                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004408
.text:00004408 ; =============== S U B R O U T I N E =======================================
.text:00004408
.text:00004408 ; Attributes: bp-based frame
.text:00004408
.text:00004408 ; public: __thiscall IUnknown::IUnknown(void)
.text:00004408                 public ??0IUnknown@@QAE@XZ
.text:00004408 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00004408                                         ; ICompressCoder::ICompressCoder(void)+11p ...
.text:00004408
.text:00004408 var_4           = dword ptr -4
.text:00004408
.text:00004408                 push    ebp
.text:00004409                 mov     ebp, esp
.text:0000440B                 push    ecx
.text:0000440C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004413                 mov     [ebp+var_4], ecx
.text:00004416                 mov     eax, [ebp+var_4]
.text:00004419                 mov     esp, ebp
.text:0000441B                 pop     ebp
.text:0000441C                 retn
.text:0000441C ??0IUnknown@@QAE@XZ endp
.text:0000441C
.text:0000441C ; ---------------------------------------------------------------------------
.text:0000441D                 align 10h
.text:0000441D _text           ends
.text:0000441D
.text:00004420 ; ===========================================================================
.text:00004420
.text:00004420 ; Segment type: Pure code
.text:00004420 ; Segment permissions: Read/Execute
.text:00004420 _text           segment para public 'CODE' use32
.text:00004420                 assume cs:_text
.text:00004420                 ;org 4420h
.text:00004420 ; COMDAT (pick any)
.text:00004420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004420
.text:00004420 ; =============== S U B R O U T I N E =======================================
.text:00004420
.text:00004420 ; Attributes: bp-based frame
.text:00004420
.text:00004420 ; bool __stdcall IntToBool(int)
.text:00004420                 public ?IntToBool@@YG_NH@Z
.text:00004420 ?IntToBool@@YG_NH@Z proc near           ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C0p
.text:00004420                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+45Ap ...
.text:00004420
.text:00004420 arg_0           = dword ptr  8
.text:00004420
.text:00004420                 push    ebp
.text:00004421                 mov     ebp, esp
.text:00004423                 xor     eax, eax
.text:00004425                 cmp     [ebp+arg_0], 0
.text:00004429                 setnz   al
.text:0000442C                 pop     ebp
.text:0000442D                 retn    4
.text:0000442D ?IntToBool@@YG_NH@Z endp
.text:0000442D
.text:0000442D _text           ends
.text:0000442D
.text:00004430 ; ===========================================================================
.text:00004430
.text:00004430 ; Segment type: Pure code
.text:00004430 ; Segment permissions: Read/Execute
.text:00004430 _text           segment para public 'CODE' use32
.text:00004430                 assume cs:_text
.text:00004430                 ;org 4430h
.text:00004430 ; COMDAT (pick any)
.text:00004430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004430
.text:00004430 ; =============== S U B R O U T I N E =======================================
.text:00004430
.text:00004430 ; Attributes: bp-based frame
.text:00004430
.text:00004430 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00004430                 public ?IsEmpty@AString@@QBE_NXZ
.text:00004430 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2F6p
.text:00004430
.text:00004430 var_4           = dword ptr -4
.text:00004430
.text:00004430                 push    ebp
.text:00004431                 mov     ebp, esp
.text:00004433                 push    ecx
.text:00004434                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000443B                 mov     [ebp+var_4], ecx
.text:0000443E                 mov     eax, [ebp+var_4]
.text:00004441                 xor     ecx, ecx
.text:00004443                 cmp     dword ptr [eax+4], 0
.text:00004447                 setz    cl
.text:0000444A                 mov     al, cl
.text:0000444C                 mov     esp, ebp
.text:0000444E                 pop     ebp
.text:0000444F                 retn
.text:0000444F ?IsEmpty@AString@@QBE_NXZ endp
.text:0000444F
.text:0000444F _text           ends
.text:0000444F
.text:00004450 ; ===========================================================================
.text:00004450
.text:00004450 ; Segment type: Pure code
.text:00004450 ; Segment permissions: Read/Execute
.text:00004450 _text           segment para public 'CODE' use32
.text:00004450                 assume cs:_text
.text:00004450                 ;org 4450h
.text:00004450 ; COMDAT (pick any)
.text:00004450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004450
.text:00004450 ; =============== S U B R O U T I N E =======================================
.text:00004450
.text:00004450 ; Attributes: bp-based frame
.text:00004450
.text:00004450 ; void __thiscall NArchive::NGz::CItem::CopyMetaPropsFrom(NArchive::NGz::CItem *this, const struct NArchive::NGz::CItem *)
.text:00004450                 public ?CopyMetaPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z
.text:00004450 ?CopyMetaPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z proc near
.text:00004450                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+E0p
.text:00004450
.text:00004450 var_4           = dword ptr -4
.text:00004450 arg_0           = dword ptr  8
.text:00004450
.text:00004450                 push    ebp
.text:00004451                 mov     ebp, esp
.text:00004453                 push    ecx
.text:00004454                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000445B                 mov     [ebp+var_4], ecx
.text:0000445E                 mov     eax, [ebp+var_4]
.text:00004461                 mov     ecx, [ebp+arg_0]
.text:00004464                 mov     dl, [ecx]
.text:00004466                 mov     [eax], dl
.text:00004468                 mov     eax, [ebp+var_4]
.text:0000446B                 mov     ecx, [ebp+arg_0]
.text:0000446E                 mov     dl, [ecx+2]
.text:00004471                 mov     [eax+2], dl
.text:00004474                 mov     eax, [ebp+var_4]
.text:00004477                 mov     ecx, [ebp+arg_0]
.text:0000447A                 mov     edx, [ecx+4]
.text:0000447D                 mov     [eax+4], edx
.text:00004480                 mov     eax, [ebp+arg_0]
.text:00004483                 add     eax, 10h
.text:00004486                 push    eax
.text:00004487                 mov     ecx, [ebp+var_4]
.text:0000448A                 add     ecx, 10h
.text:0000448D                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00004492                 mov     ecx, [ebp+arg_0]
.text:00004495                 add     ecx, 1Ch
.text:00004498                 push    ecx
.text:00004499                 mov     ecx, [ebp+var_4]
.text:0000449C                 add     ecx, 1Ch
.text:0000449F                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:000044A4                 add     esp, 4
.text:000044A7                 cmp     ebp, esp
.text:000044A9                 call    __RTC_CheckEsp
.text:000044AE                 mov     esp, ebp
.text:000044B0                 pop     ebp
.text:000044B1                 retn    4
.text:000044B1 ?CopyMetaPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z endp
.text:000044B1
.text:000044B1 _text           ends
.text:000044B1
.text:000044B4 ; ===========================================================================
.text:000044B4
.text:000044B4 ; Segment type: Pure code
.text:000044B4 ; Segment permissions: Read/Execute
.text:000044B4 _text           segment para public 'CODE' use32
.text:000044B4                 assume cs:_text
.text:000044B4                 ;org 44B4h
.text:000044B4 ; COMDAT (pick any)
.text:000044B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044B4
.text:000044B4 ; =============== S U B R O U T I N E =======================================
.text:000044B4
.text:000044B4 ; Attributes: bp-based frame
.text:000044B4
.text:000044B4 ; void __thiscall NArchive::NGz::CItem::CopyDataPropsFrom(NArchive::NGz::CItem *this, const struct NArchive::NGz::CItem *)
.text:000044B4                 public ?CopyDataPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z
.text:000044B4 ?CopyDataPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z proc near
.text:000044B4                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7AFp
.text:000044B4
.text:000044B4 var_4           = dword ptr -4
.text:000044B4 arg_0           = dword ptr  8
.text:000044B4
.text:000044B4                 push    ebp
.text:000044B5                 mov     ebp, esp
.text:000044B7                 push    ecx
.text:000044B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044BF                 mov     [ebp+var_4], ecx
.text:000044C2                 mov     eax, [ebp+var_4]
.text:000044C5                 mov     ecx, [ebp+arg_0]
.text:000044C8                 mov     dl, [ecx+1]
.text:000044CB                 mov     [eax+1], dl
.text:000044CE                 mov     eax, [ebp+var_4]
.text:000044D1                 mov     ecx, [ebp+arg_0]
.text:000044D4                 mov     edx, [ecx+8]
.text:000044D7                 mov     [eax+8], edx
.text:000044DA                 mov     eax, [ebp+var_4]
.text:000044DD                 mov     ecx, [ebp+arg_0]
.text:000044E0                 mov     edx, [ecx+0Ch]
.text:000044E3                 mov     [eax+0Ch], edx
.text:000044E6                 mov     esp, ebp
.text:000044E8                 pop     ebp
.text:000044E9                 retn    4
.text:000044E9 ?CopyDataPropsFrom@CItem@NGz@NArchive@@QAEXABV123@@Z endp
.text:000044E9
.text:000044E9 _text           ends
.text:000044E9
.text:000044EC ; ===========================================================================
.text:000044EC
.text:000044EC ; Segment type: Pure code
.text:000044EC ; Segment permissions: Read/Execute
.text:000044EC _text           segment para public 'CODE' use32
.text:000044EC                 assume cs:_text
.text:000044EC                 ;org 44ECh
.text:000044EC ; COMDAT (pick any)
.text:000044EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044EC
.text:000044EC ; =============== S U B R O U T I N E =======================================
.text:000044EC
.text:000044EC ; Attributes: bp-based frame
.text:000044EC
.text:000044EC ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(NCompress::NDeflate::NEncoder::CCOMCoder *__hidden this)
.text:000044EC                 public ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:000044EC ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:000044EC                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+270p
.text:000044EC
.text:000044EC var_4           = dword ptr -4
.text:000044EC
.text:000044EC                 push    ebp
.text:000044ED                 mov     ebp, esp
.text:000044EF                 push    ecx
.text:000044F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044F7                 mov     [ebp+var_4], ecx
.text:000044FA                 mov     ecx, [ebp+var_4] ; this
.text:000044FD                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00004502                 mov     ecx, [ebp+var_4]
.text:00004505                 add     ecx, 4          ; this
.text:00004508                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000450D                 mov     ecx, [ebp+var_4]
.text:00004510                 add     ecx, 8          ; this
.text:00004513                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004518                 push    0               ; bool
.text:0000451A                 mov     ecx, [ebp+var_4]
.text:0000451D                 add     ecx, 10h        ; this
.text:00004520                 call    ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z ; NCompress::NDeflate::NEncoder::CCoder::CCoder(bool)
.text:00004525                 mov     eax, [ebp+var_4]
.text:00004528                 mov     dword ptr [eax], offset ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.text:0000452E                 mov     ecx, [ebp+var_4]
.text:00004531                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00004538                 mov     eax, [ebp+var_4]
.text:0000453B                 add     esp, 4
.text:0000453E                 cmp     ebp, esp
.text:00004540                 call    __RTC_CheckEsp
.text:00004545                 mov     esp, ebp
.text:00004547                 pop     ebp
.text:00004548                 retn
.text:00004548 ??0CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00004548
.text:00004548 ; ---------------------------------------------------------------------------
.text:00004549                 align 4
.text:00004549 _text           ends
.text:00004549
.rdata:0000454C ; ===========================================================================
.rdata:0000454C
.rdata:0000454C ; Segment type: Pure data
.rdata:0000454C ; Segment permissions: Read
.rdata:0000454C _rdata          segment dword public 'DATA' use32
.rdata:0000454C                 assume cs:_rdata
.rdata:0000454C                 ;org 454Ch
.rdata:0000454C ; COMDAT (pick largest)
.rdata:0000454C                 dd offset ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00004550                 public ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata:00004550 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00004550 ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00004550                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+45o
.rdata:00004550                                         ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00004554                 dd offset ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)
.rdata:00004558                 dd offset ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)
.rdata:0000455C                 dd offset ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:0000455C _rdata          ends
.rdata:0000455C
.rdata:00004560 ; ===========================================================================
.rdata:00004560
.rdata:00004560 ; Segment type: Pure data
.rdata:00004560 ; Segment permissions: Read
.rdata:00004560 _rdata          segment dword public 'DATA' use32
.rdata:00004560                 assume cs:_rdata
.rdata:00004560                 ;org 4560h
.rdata:00004560 ; COMDAT (pick largest)
.rdata:00004560                 dd offset ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00004564                 public ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00004564 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.rdata:00004564 ??_7CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004564                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+3Co
.rdata:00004564                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)
.rdata:00004568                 dd offset ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(void)
.rdata:0000456C                 dd offset ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)
.rdata:00004570                 dd offset ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00004570 _rdata          ends
.rdata:00004570
.rdata$r:00004574 ; ===========================================================================
.rdata$r:00004574
.rdata$r:00004574 ; Segment type: Pure data
.rdata$r:00004574 ; Segment permissions: Read
.rdata$r:00004574 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004574                 assume cs:_rdata$r
.rdata$r:00004574                 ;org 4574h
.rdata$r:00004574 ; COMDAT (pick any)
.rdata$r:00004574                 public ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00004574 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00004574 ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00004574                                         ; DATA XREF: .rdata:00004560o
.rdata$r:00004575                 db    0
.rdata$r:00004576                 db    0
.rdata$r:00004577                 db    0
.rdata$r:00004578                 db    0
.rdata$r:00004579                 db    0
.rdata$r:0000457A                 db    0
.rdata$r:0000457B                 db    0
.rdata$r:0000457C                 db    0
.rdata$r:0000457D                 db    0
.rdata$r:0000457E                 db    0
.rdata$r:0000457F                 db    0
.rdata$r:00004580                 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00004584                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004584 _rdata$r        ends
.rdata$r:00004584
.data:00004588 ; ===========================================================================
.data:00004588
.data:00004588 ; Segment type: Pure data
.data:00004588 ; Segment permissions: Read/Write
.data:00004588 _data           segment dword public 'DATA' use32
.data:00004588                 assume cs:_data
.data:00004588                 ;org 4588h
.data:00004588 ; COMDAT (pick any)
.data:00004588                 public ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8
.data:00004588 ; class NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.data:00004588 ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00004588                                         ; DATA XREF: .rdata$r:00004580o
.data:00004588                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004588                                         ; const type_info::`vftable'
.data:0000458C                 align 10h
.data:00004590 a_?avccomcoder@ db '.?AVCCOMCoder@NEncoder@NDeflate@NCompress@@',0
.data:00004590 _data           ends
.data:00004590
.rdata$r:000045BC ; ===========================================================================
.rdata$r:000045BC
.rdata$r:000045BC ; Segment type: Pure data
.rdata$r:000045BC ; Segment permissions: Read
.rdata$r:000045BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045BC                 assume cs:_rdata$r
.rdata$r:000045BC                 ;org 45BCh
.rdata$r:000045BC ; COMDAT (pick any)
.rdata$r:000045BC                 public ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:000045BC ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000045BC ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:000045BC                                         ; DATA XREF: .rdata$r:00004584o
.rdata$r:000045BC                                         ; .rdata$r:00004604o ...
.rdata$r:000045BD                 db    0
.rdata$r:000045BE                 db    0
.rdata$r:000045BF                 db    0
.rdata$r:000045C0                 db    1
.rdata$r:000045C1                 db    0
.rdata$r:000045C2                 db    0
.rdata$r:000045C3                 db    0
.rdata$r:000045C4                 db    7
.rdata$r:000045C5                 db    0
.rdata$r:000045C6                 db    0
.rdata$r:000045C7                 db    0
.rdata$r:000045C8                 dd offset ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:000045C8 _rdata$r        ends
.rdata$r:000045C8
.rdata$r:000045CC ; ===========================================================================
.rdata$r:000045CC
.rdata$r:000045CC ; Segment type: Pure data
.rdata$r:000045CC ; Segment permissions: Read
.rdata$r:000045CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045CC                 assume cs:_rdata$r
.rdata$r:000045CC                 ;org 45CCh
.rdata$r:000045CC ; COMDAT (pick any)
.rdata$r:000045CC                 public ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:000045CC ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:000045CC ??_R2CCOMCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:000045CC                                         ; DATA XREF: .rdata$r:000045C8o
.rdata$r:000045CC                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000045D0                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000045D4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000045D8                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000045DC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000045E0                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000045E4                 dd offset ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000045E8                 db    0
.rdata$r:000045E9                 align 4
.rdata$r:000045E9 _rdata$r        ends
.rdata$r:000045E9
.rdata$r:000045EC ; ===========================================================================
.rdata$r:000045EC
.rdata$r:000045EC ; Segment type: Pure data
.rdata$r:000045EC ; Segment permissions: Read
.rdata$r:000045EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045EC                 assume cs:_rdata$r
.rdata$r:000045EC                 ;org 45ECh
.rdata$r:000045EC ; COMDAT (pick any)
.rdata$r:000045EC                 public ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:000045EC ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000045EC ??_R1A@?0A@EA@CCOMCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:000045EC                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Base Class Array'o
.rdata$r:000045EC                                         ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000045F0                 db    6
.rdata$r:000045F1                 db    0
.rdata$r:000045F2                 db    0
.rdata$r:000045F3                 db    0
.rdata$r:000045F4                 db    0
.rdata$r:000045F5                 db    0
.rdata$r:000045F6                 db    0
.rdata$r:000045F7                 db    0
.rdata$r:000045F8                 db 0FFh
.rdata$r:000045F9                 db 0FFh
.rdata$r:000045FA                 db 0FFh
.rdata$r:000045FB                 db 0FFh
.rdata$r:000045FC                 db    0
.rdata$r:000045FD                 db    0
.rdata$r:000045FE                 db    0
.rdata$r:000045FF                 db    0
.rdata$r:00004600                 db  40h ; @
.rdata$r:00004601                 db    0
.rdata$r:00004602                 db    0
.rdata$r:00004603                 db    0
.rdata$r:00004604                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004604 _rdata$r        ends
.rdata$r:00004604
.rdata$r:00004608 ; ===========================================================================
.rdata$r:00004608
.rdata$r:00004608 ; Segment type: Pure data
.rdata$r:00004608 ; Segment permissions: Read
.rdata$r:00004608 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004608                 assume cs:_rdata$r
.rdata$r:00004608                 ;org 4608h
.rdata$r:00004608 ; COMDAT (pick any)
.rdata$r:00004608                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00004608 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004608 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00004608                                         ; DATA XREF: .rdata$r:000045D0o
.rdata$r:00004608                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o ...
.rdata$r:00004608                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:0000460C                 db    1
.rdata$r:0000460D                 db    0
.rdata$r:0000460E                 db    0
.rdata$r:0000460F                 db    0
.rdata$r:00004610                 db    0
.rdata$r:00004611                 db    0
.rdata$r:00004612                 db    0
.rdata$r:00004613                 db    0
.rdata$r:00004614                 db 0FFh
.rdata$r:00004615                 db 0FFh
.rdata$r:00004616                 db 0FFh
.rdata$r:00004617                 db 0FFh
.rdata$r:00004618                 db    0
.rdata$r:00004619                 db    0
.rdata$r:0000461A                 db    0
.rdata$r:0000461B                 db    0
.rdata$r:0000461C                 db  40h ; @
.rdata$r:0000461D                 db    0
.rdata$r:0000461E                 db    0
.rdata$r:0000461F                 db    0
.rdata$r:00004620                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004620 _rdata$r        ends
.rdata$r:00004620
.data:00004624 ; ===========================================================================
.data:00004624
.data:00004624 ; Segment type: Pure data
.data:00004624 ; Segment permissions: Read/Write
.data:00004624 _data           segment dword public 'DATA' use32
.data:00004624                 assume cs:_data
.data:00004624                 ;org 4624h
.data:00004624 ; COMDAT (pick any)
.data:00004624                 public ??_R0?AUICompressCoder@@@8
.data:00004624 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00004624 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00004624                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004624                                         ; .rdata$r:0000481Co
.data:00004624                                         ; const type_info::`vftable'
.data:00004628                 db    0
.data:00004629                 db    0
.data:0000462A                 db    0
.data:0000462B                 db    0
.data:0000462C                 db  2Eh ; .
.data:0000462D                 db  3Fh ; ?
.data:0000462E                 db  41h ; A
.data:0000462F                 db  55h ; U
.data:00004630                 db  49h ; I
.data:00004631                 db  43h ; C
.data:00004632                 db  6Fh ; o
.data:00004633                 db  6Dh ; m
.data:00004634                 db  70h ; p
.data:00004635                 db  72h ; r
.data:00004636                 db  65h ; e
.data:00004637                 db  73h ; s
.data:00004638                 db  73h ; s
.data:00004639                 db  43h ; C
.data:0000463A                 db  6Fh ; o
.data:0000463B                 db  64h ; d
.data:0000463C                 db  65h ; e
.data:0000463D                 db  72h ; r
.data:0000463E                 db  40h ; @
.data:0000463F                 db  40h ; @
.data:00004640                 db    0
.data:00004641                 align 4
.data:00004641 _data           ends
.data:00004641
.rdata$r:00004644 ; ===========================================================================
.rdata$r:00004644
.rdata$r:00004644 ; Segment type: Pure data
.rdata$r:00004644 ; Segment permissions: Read
.rdata$r:00004644 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004644                 assume cs:_rdata$r
.rdata$r:00004644                 ;org 4644h
.rdata$r:00004644 ; COMDAT (pick any)
.rdata$r:00004644                 public ??_R3ICompressCoder@@8
.rdata$r:00004644 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004644 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00004620o
.rdata$r:00004644                                         ; .rdata$r:00004820o
.rdata$r:00004645                 db    0
.rdata$r:00004646                 db    0
.rdata$r:00004647                 db    0
.rdata$r:00004648                 db    0
.rdata$r:00004649                 db    0
.rdata$r:0000464A                 db    0
.rdata$r:0000464B                 db    0
.rdata$r:0000464C                 db    2
.rdata$r:0000464D                 db    0
.rdata$r:0000464E                 db    0
.rdata$r:0000464F                 db    0
.rdata$r:00004650                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00004650 _rdata$r        ends
.rdata$r:00004650
.rdata$r:00004654 ; ===========================================================================
.rdata$r:00004654
.rdata$r:00004654 ; Segment type: Pure data
.rdata$r:00004654 ; Segment permissions: Read
.rdata$r:00004654 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004654                 assume cs:_rdata$r
.rdata$r:00004654                 ;org 4654h
.rdata$r:00004654 ; COMDAT (pick any)
.rdata$r:00004654                 public ??_R2ICompressCoder@@8
.rdata$r:00004654 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00004654 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00004654                                         ; DATA XREF: .rdata$r:00004650o
.rdata$r:00004654                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004658                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000465C                 db    0
.rdata$r:0000465D                 align 10h
.rdata$r:0000465D _rdata$r        ends
.rdata$r:0000465D
.rdata$r:00004660 ; ===========================================================================
.rdata$r:00004660
.rdata$r:00004660 ; Segment type: Pure data
.rdata$r:00004660 ; Segment permissions: Read
.rdata$r:00004660 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004660                 assume cs:_rdata$r
.rdata$r:00004660                 ;org 4660h
.rdata$r:00004660 ; COMDAT (pick any)
.rdata$r:00004660                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00004660 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00004660 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00004660                                         ; DATA XREF: .rdata$r:000045D4o
.rdata$r:00004660                                         ; .rdata$r:000050A4o ...
.rdata$r:00004660                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004664                 db    0
.rdata$r:00004665                 db    0
.rdata$r:00004666                 db    0
.rdata$r:00004667                 db    0
.rdata$r:00004668                 db    0
.rdata$r:00004669                 db    0
.rdata$r:0000466A                 db    0
.rdata$r:0000466B                 db    0
.rdata$r:0000466C                 db 0FFh
.rdata$r:0000466D                 db 0FFh
.rdata$r:0000466E                 db 0FFh
.rdata$r:0000466F                 db 0FFh
.rdata$r:00004670                 db    0
.rdata$r:00004671                 db    0
.rdata$r:00004672                 db    0
.rdata$r:00004673                 db    0
.rdata$r:00004674                 db  42h ; B
.rdata$r:00004675                 db    0
.rdata$r:00004676                 db    0
.rdata$r:00004677                 db    0
.rdata$r:00004678                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004678 _rdata$r        ends
.rdata$r:00004678
.rdata$r:0000467C ; ===========================================================================
.rdata$r:0000467C
.rdata$r:0000467C ; Segment type: Pure data
.rdata$r:0000467C ; Segment permissions: Read
.rdata$r:0000467C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000467C                 assume cs:_rdata$r
.rdata$r:0000467C                 ;org 467Ch
.rdata$r:0000467C ; COMDAT (pick any)
.rdata$r:0000467C                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:0000467C ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000467C ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:0000467C                                         ; DATA XREF: .rdata$r:000045D8o
.rdata$r:0000467C                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00004680                 db    1
.rdata$r:00004681                 db    0
.rdata$r:00004682                 db    0
.rdata$r:00004683                 db    0
.rdata$r:00004684                 db    4
.rdata$r:00004685                 db    0
.rdata$r:00004686                 db    0
.rdata$r:00004687                 db    0
.rdata$r:00004688                 db 0FFh
.rdata$r:00004689                 db 0FFh
.rdata$r:0000468A                 db 0FFh
.rdata$r:0000468B                 db 0FFh
.rdata$r:0000468C                 db    0
.rdata$r:0000468D                 db    0
.rdata$r:0000468E                 db    0
.rdata$r:0000468F                 db    0
.rdata$r:00004690                 db  40h ; @
.rdata$r:00004691                 db    0
.rdata$r:00004692                 db    0
.rdata$r:00004693                 db    0
.rdata$r:00004694                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004694 _rdata$r        ends
.rdata$r:00004694
.data:00004698 ; ===========================================================================
.data:00004698
.data:00004698 ; Segment type: Pure data
.data:00004698 ; Segment permissions: Read/Write
.data:00004698 _data           segment dword public 'DATA' use32
.data:00004698                 assume cs:_data
.data:00004698                 ;org 4698h
.data:00004698 ; COMDAT (pick any)
.data:00004698                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00004698 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00004698 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00004698                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00004698                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00004698                                         ; const type_info::`vftable'
.data:0000469C                 align 10h
.data:000046A0 a_?auicompresss db '.?AUICompressSetCoderProperties@@',0
.data:000046C2                 align 4
.data:000046C2 _data           ends
.data:000046C2
.rdata$r:000046C4 ; ===========================================================================
.rdata$r:000046C4
.rdata$r:000046C4 ; Segment type: Pure data
.rdata$r:000046C4 ; Segment permissions: Read
.rdata$r:000046C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046C4                 assume cs:_rdata$r
.rdata$r:000046C4                 ;org 46C4h
.rdata$r:000046C4 ; COMDAT (pick any)
.rdata$r:000046C4                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000046C4 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000046C4 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000046C4                                         ; DATA XREF: .rdata$r:00004694o
.rdata$r:000046C4                                         ; .rdata$r:000046F8o ...
.rdata$r:000046C5                 db    0
.rdata$r:000046C6                 db    0
.rdata$r:000046C7                 db    0
.rdata$r:000046C8                 db    0
.rdata$r:000046C9                 db    0
.rdata$r:000046CA                 db    0
.rdata$r:000046CB                 db    0
.rdata$r:000046CC                 db    2
.rdata$r:000046CD                 db    0
.rdata$r:000046CE                 db    0
.rdata$r:000046CF                 db    0
.rdata$r:000046D0                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000046D0 _rdata$r        ends
.rdata$r:000046D0
.rdata$r:000046D4 ; ===========================================================================
.rdata$r:000046D4
.rdata$r:000046D4 ; Segment type: Pure data
.rdata$r:000046D4 ; Segment permissions: Read
.rdata$r:000046D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046D4                 assume cs:_rdata$r
.rdata$r:000046D4                 ;org 46D4h
.rdata$r:000046D4 ; COMDAT (pick any)
.rdata$r:000046D4                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:000046D4 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000046D4 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000046D4                                         ; DATA XREF: .rdata$r:000046D0o
.rdata$r:000046D4                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000046D8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000046DC                 db    0
.rdata$r:000046DD                 align 10h
.rdata$r:000046DD _rdata$r        ends
.rdata$r:000046DD
.rdata$r:000046E0 ; ===========================================================================
.rdata$r:000046E0
.rdata$r:000046E0 ; Segment type: Pure data
.rdata$r:000046E0 ; Segment permissions: Read
.rdata$r:000046E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046E0                 assume cs:_rdata$r
.rdata$r:000046E0                 ;org 46E0h
.rdata$r:000046E0 ; COMDAT (pick any)
.rdata$r:000046E0                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000046E0 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000046E0 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000046E0                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:000046E0                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000046E4                 db    1
.rdata$r:000046E5                 db    0
.rdata$r:000046E6                 db    0
.rdata$r:000046E7                 db    0
.rdata$r:000046E8                 db    0
.rdata$r:000046E9                 db    0
.rdata$r:000046EA                 db    0
.rdata$r:000046EB                 db    0
.rdata$r:000046EC                 db 0FFh
.rdata$r:000046ED                 db 0FFh
.rdata$r:000046EE                 db 0FFh
.rdata$r:000046EF                 db 0FFh
.rdata$r:000046F0                 db    0
.rdata$r:000046F1                 db    0
.rdata$r:000046F2                 db    0
.rdata$r:000046F3                 db    0
.rdata$r:000046F4                 db  40h ; @
.rdata$r:000046F5                 db    0
.rdata$r:000046F6                 db    0
.rdata$r:000046F7                 db    0
.rdata$r:000046F8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000046F8 _rdata$r        ends
.rdata$r:000046F8
.rdata$r:000046FC ; ===========================================================================
.rdata$r:000046FC
.rdata$r:000046FC ; Segment type: Pure data
.rdata$r:000046FC ; Segment permissions: Read
.rdata$r:000046FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046FC                 assume cs:_rdata$r
.rdata$r:000046FC                 ;org 46FCh
.rdata$r:000046FC ; COMDAT (pick any)
.rdata$r:000046FC                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000046FC ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000046FC ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000046FC                                         ; DATA XREF: .rdata$r:000045DCo
.rdata$r:000046FC                                         ; .rdata$r:000050ACo ...
.rdata$r:000046FC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00004700                 db    0
.rdata$r:00004701                 db    0
.rdata$r:00004702                 db    0
.rdata$r:00004703                 db    0
.rdata$r:00004704                 db    4
.rdata$r:00004705                 db    0
.rdata$r:00004706                 db    0
.rdata$r:00004707                 db    0
.rdata$r:00004708                 db 0FFh
.rdata$r:00004709                 db 0FFh
.rdata$r:0000470A                 db 0FFh
.rdata$r:0000470B                 db 0FFh
.rdata$r:0000470C                 db    0
.rdata$r:0000470D                 db    0
.rdata$r:0000470E                 db    0
.rdata$r:0000470F                 db    0
.rdata$r:00004710                 db  42h ; B
.rdata$r:00004711                 db    0
.rdata$r:00004712                 db    0
.rdata$r:00004713                 db    0
.rdata$r:00004714                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004714 _rdata$r        ends
.rdata$r:00004714
.rdata$r:00004718 ; ===========================================================================
.rdata$r:00004718
.rdata$r:00004718 ; Segment type: Pure data
.rdata$r:00004718 ; Segment permissions: Read
.rdata$r:00004718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004718                 assume cs:_rdata$r
.rdata$r:00004718                 ;org 4718h
.rdata$r:00004718 ; COMDAT (pick any)
.rdata$r:00004718                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00004718 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00004718 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004718                                         ; DATA XREF: .rdata$r:000045E0o
.rdata$r:00004718                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000471C                 align 10h
.rdata$r:00004720                 db    8
.rdata$r:00004721                 db    0
.rdata$r:00004722                 db    0
.rdata$r:00004723                 db    0
.rdata$r:00004724                 db 0FFh
.rdata$r:00004725                 db 0FFh
.rdata$r:00004726                 db 0FFh
.rdata$r:00004727                 db 0FFh
.rdata$r:00004728                 db    0
.rdata$r:00004729                 db    0
.rdata$r:0000472A                 db    0
.rdata$r:0000472B                 db    0
.rdata$r:0000472C                 db  40h ; @
.rdata$r:0000472D                 db    0
.rdata$r:0000472E                 db    0
.rdata$r:0000472F                 db    0
.rdata$r:00004730                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004730 _rdata$r        ends
.rdata$r:00004730
.rdata$r:00004734 ; ===========================================================================
.rdata$r:00004734
.rdata$r:00004734 ; Segment type: Pure data
.rdata$r:00004734 ; Segment permissions: Read
.rdata$r:00004734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004734                 assume cs:_rdata$r
.rdata$r:00004734                 ;org 4734h
.rdata$r:00004734 ; COMDAT (pick any)
.rdata$r:00004734                 public ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00004734 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00004734 ??_R1BA@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:00004734                                         ; DATA XREF: .rdata$r:000045E4o
.rdata$r:00004734                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:00004738                 db    0
.rdata$r:00004739                 db    0
.rdata$r:0000473A                 db    0
.rdata$r:0000473B                 db    0
.rdata$r:0000473C                 db  10h
.rdata$r:0000473D                 db    0
.rdata$r:0000473E                 db    0
.rdata$r:0000473F                 db    0
.rdata$r:00004740                 db 0FFh
.rdata$r:00004741                 db 0FFh
.rdata$r:00004742                 db 0FFh
.rdata$r:00004743                 db 0FFh
.rdata$r:00004744                 db    0
.rdata$r:00004745                 db    0
.rdata$r:00004746                 db    0
.rdata$r:00004747                 db    0
.rdata$r:00004748                 db  40h ; @
.rdata$r:00004749                 db    0
.rdata$r:0000474A                 db    0
.rdata$r:0000474B                 db    0
.rdata$r:0000474C                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000474C _rdata$r        ends
.rdata$r:0000474C
.data:00004750 ; ===========================================================================
.data:00004750
.data:00004750 ; Segment type: Pure data
.data:00004750 ; Segment permissions: Read/Write
.data:00004750 _data           segment dword public 'DATA' use32
.data:00004750                 assume cs:_data
.data:00004750                 ;org 4750h
.data:00004750 ; COMDAT (pick any)
.data:00004750                 public ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.data:00004750 ; class NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.data:00004750 ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00004750                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00004750                                         ; .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004750                                         ; const type_info::`vftable'
.data:00004754                 align 8
.data:00004758 a_?avccoder@nen db '.?AVCCoder@NEncoder@NDeflate@NCompress@@',0
.data:00004781                 align 4
.data:00004781 _data           ends
.data:00004781
.rdata$r:00004784 ; ===========================================================================
.rdata$r:00004784
.rdata$r:00004784 ; Segment type: Pure data
.rdata$r:00004784 ; Segment permissions: Read
.rdata$r:00004784 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004784                 assume cs:_rdata$r
.rdata$r:00004784                 ;org 4784h
.rdata$r:00004784 ; COMDAT (pick any)
.rdata$r:00004784                 public ??_R3CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00004784 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004784 ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 db    0
.rdata$r:00004784                                         ; DATA XREF: .rdata$r:0000474Co
.rdata$r:00004784                                         ; .rdata$r:000047B4o
.rdata$r:00004785                 db    0
.rdata$r:00004786                 db    0
.rdata$r:00004787                 db    0
.rdata$r:00004788                 db    0
.rdata$r:00004789                 db    0
.rdata$r:0000478A                 db    0
.rdata$r:0000478B                 db    0
.rdata$r:0000478C                 db    1
.rdata$r:0000478D                 db    0
.rdata$r:0000478E                 db    0
.rdata$r:0000478F                 db    0
.rdata$r:00004790                 dd offset ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00004790 _rdata$r        ends
.rdata$r:00004790
.rdata$r:00004794 ; ===========================================================================
.rdata$r:00004794
.rdata$r:00004794 ; Segment type: Pure data
.rdata$r:00004794 ; Segment permissions: Read
.rdata$r:00004794 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004794                 assume cs:_rdata$r
.rdata$r:00004794                 ;org 4794h
.rdata$r:00004794 ; COMDAT (pick any)
.rdata$r:00004794                 public ??_R2CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00004794 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'
.rdata$r:00004794 ??_R2CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:00004794                                         ; DATA XREF: .rdata$r:00004790o
.rdata$r:00004794                                         ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004798                 db    0
.rdata$r:00004799                 align 4
.rdata$r:00004799 _rdata$r        ends
.rdata$r:00004799
.rdata$r:0000479C ; ===========================================================================
.rdata$r:0000479C
.rdata$r:0000479C ; Segment type: Pure data
.rdata$r:0000479C ; Segment permissions: Read
.rdata$r:0000479C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000479C                 assume cs:_rdata$r
.rdata$r:0000479C                 ;org 479Ch
.rdata$r:0000479C ; COMDAT (pick any)
.rdata$r:0000479C                 public ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8
.rdata$r:0000479C ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000479C ??_R1A@?0A@EA@CCoder@NEncoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NEncoder@NDeflate@NCompress@@@8
.rdata$r:0000479C                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NEncoder::CCoder::`RTTI Base Class Array'o
.rdata$r:0000479C                                         ; NCompress::NDeflate::NEncoder::CCoder `RTTI Type Descriptor'
.rdata$r:000047A0                 db    0
.rdata$r:000047A1                 db    0
.rdata$r:000047A2                 db    0
.rdata$r:000047A3                 db    0
.rdata$r:000047A4                 db    0
.rdata$r:000047A5                 db    0
.rdata$r:000047A6                 db    0
.rdata$r:000047A7                 db    0
.rdata$r:000047A8                 db 0FFh
.rdata$r:000047A9                 db 0FFh
.rdata$r:000047AA                 db 0FFh
.rdata$r:000047AB                 db 0FFh
.rdata$r:000047AC                 db    0
.rdata$r:000047AD                 db    0
.rdata$r:000047AE                 db    0
.rdata$r:000047AF                 db    0
.rdata$r:000047B0                 db  40h ; @
.rdata$r:000047B1                 db    0
.rdata$r:000047B2                 db    0
.rdata$r:000047B3                 db    0
.rdata$r:000047B4                 dd offset ??_R3CCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047B4 _rdata$r        ends
.rdata$r:000047B4
.rdata$r:000047B8 ; ===========================================================================
.rdata$r:000047B8
.rdata$r:000047B8 ; Segment type: Pure data
.rdata$r:000047B8 ; Segment permissions: Read
.rdata$r:000047B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047B8                 assume cs:_rdata$r
.rdata$r:000047B8                 ;org 47B8h
.rdata$r:000047B8 ; COMDAT (pick any)
.rdata$r:000047B8                 public ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:000047B8 ; const NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000047B8 ??_R4CCOMCoder@NEncoder@NDeflate@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000047B8                                         ; DATA XREF: .rdata:0000454Co
.rdata$r:000047B9                 db    0
.rdata$r:000047BA                 db    0
.rdata$r:000047BB                 db    0
.rdata$r:000047BC                 db    4
.rdata$r:000047BD                 db    0
.rdata$r:000047BE                 db    0
.rdata$r:000047BF                 db    0
.rdata$r:000047C0                 db    0
.rdata$r:000047C1                 db    0
.rdata$r:000047C2                 db    0
.rdata$r:000047C3                 db    0
.rdata$r:000047C4                 dd offset ??_R0?AVCCOMCoder@NEncoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000047C8                 dd offset ??_R3CCOMCoder@NEncoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NEncoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047C8 _rdata$r        ends
.rdata$r:000047C8
.text:000047CC ; ===========================================================================
.text:000047CC
.text:000047CC ; Segment type: Pure code
.text:000047CC ; Segment permissions: Read/Execute
.text:000047CC _text           segment para public 'CODE' use32
.text:000047CC                 assume cs:_text
.text:000047CC                 ;org 47CCh
.text:000047CC ; COMDAT (pick any)
.text:000047CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047CC
.text:000047CC ; =============== S U B R O U T I N E =======================================
.text:000047CC
.text:000047CC ; Attributes: bp-based frame
.text:000047CC
.text:000047CC ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:000047CC                 public ??0ICompressCoder@@QAE@XZ
.text:000047CC ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+11p
.text:000047CC
.text:000047CC var_4           = dword ptr -4
.text:000047CC
.text:000047CC                 push    ebp
.text:000047CD                 mov     ebp, esp
.text:000047CF                 push    ecx
.text:000047D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047D7                 mov     [ebp+var_4], ecx
.text:000047DA                 mov     ecx, [ebp+var_4]
.text:000047DD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000047E2                 mov     eax, [ebp+var_4]
.text:000047E5                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000047EB                 mov     eax, [ebp+var_4]
.text:000047EE                 add     esp, 4
.text:000047F1                 cmp     ebp, esp
.text:000047F3                 call    __RTC_CheckEsp
.text:000047F8                 mov     esp, ebp
.text:000047FA                 pop     ebp
.text:000047FB                 retn
.text:000047FB ??0ICompressCoder@@QAE@XZ endp
.text:000047FB
.text:000047FB _text           ends
.text:000047FB
.rdata:000047FC ; ===========================================================================
.rdata:000047FC
.rdata:000047FC ; Segment type: Pure data
.rdata:000047FC ; Segment permissions: Read
.rdata:000047FC _rdata          segment dword public 'DATA' use32
.rdata:000047FC                 assume cs:_rdata
.rdata:000047FC                 ;org 47FCh
.rdata:000047FC ; COMDAT (pick largest)
.rdata:000047FC                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00004800                 public ??_7ICompressCoder@@6B@
.rdata:00004800 ; const ICompressCoder::`vftable'
.rdata:00004800 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00004800                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00004804                 dd offset __purecall
.rdata:00004808                 dd offset __purecall
.rdata:0000480C                 dd offset __purecall
.rdata:0000480C _rdata          ends
.rdata:0000480C
.rdata$r:00004810 ; ===========================================================================
.rdata$r:00004810
.rdata$r:00004810 ; Segment type: Pure data
.rdata$r:00004810 ; Segment permissions: Read
.rdata$r:00004810 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004810                 assume cs:_rdata$r
.rdata$r:00004810                 ;org 4810h
.rdata$r:00004810 ; COMDAT (pick any)
.rdata$r:00004810                 public ??_R4ICompressCoder@@6B@
.rdata$r:00004810 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00004810 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000047FCo
.rdata$r:00004811                 db    0
.rdata$r:00004812                 db    0
.rdata$r:00004813                 db    0
.rdata$r:00004814                 db    0
.rdata$r:00004815                 db    0
.rdata$r:00004816                 db    0
.rdata$r:00004817                 db    0
.rdata$r:00004818                 db    0
.rdata$r:00004819                 db    0
.rdata$r:0000481A                 db    0
.rdata$r:0000481B                 db    0
.rdata$r:0000481C                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00004820                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004820 _rdata$r        ends
.rdata$r:00004820
.text:00004824 ; ===========================================================================
.text:00004824
.text:00004824 ; Segment type: Pure code
.text:00004824 ; Segment permissions: Read/Execute
.text:00004824 _text           segment para public 'CODE' use32
.text:00004824                 assume cs:_text
.text:00004824                 ;org 4824h
.text:00004824 ; COMDAT (pick any)
.text:00004824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004824
.text:00004824 ; =============== S U B R O U T I N E =======================================
.text:00004824
.text:00004824 ; Attributes: bp-based frame
.text:00004824
.text:00004824 ; __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(NCompress::NDeflate::NEncoder::CCOMCoder *this, const struct _GUID *Buf1, void **)
.text:00004824                 public ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00004824 ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004824                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00004824                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressCoder'}o
.text:00004824
.text:00004824 var_8           = dword ptr -8
.text:00004824 var_4           = dword ptr -4
.text:00004824 this            = dword ptr  8
.text:00004824 Buf1            = dword ptr  0Ch
.text:00004824 arg_8           = dword ptr  10h
.text:00004824
.text:00004824                 push    ebp
.text:00004825                 mov     ebp, esp
.text:00004827                 sub     esp, 8
.text:0000482A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004831                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004838                 mov     eax, [ebp+arg_8]
.text:0000483B                 mov     dword ptr [eax], 0
.text:00004841                 push    offset _IID_IUnknown ; Buf2
.text:00004846                 mov     ecx, [ebp+Buf1]
.text:00004849                 push    ecx             ; Buf1
.text:0000484A                 call    ___@8           ; __(x,x)
.text:0000484F                 test    eax, eax
.text:00004851                 jz      short loc_4875
.text:00004853                 cmp     [ebp+this], 0
.text:00004857                 jz      short loc_4864
.text:00004859                 mov     edx, [ebp+this]
.text:0000485C                 add     edx, 4
.text:0000485F                 mov     [ebp+var_4], edx
.text:00004862                 jmp     short loc_486B
.text:00004864 ; ---------------------------------------------------------------------------
.text:00004864
.text:00004864 loc_4864:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00004864                 mov     [ebp+var_4], 0
.text:0000486B
.text:0000486B loc_486B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:0000486B                 mov     eax, [ebp+arg_8]
.text:0000486E                 mov     ecx, [ebp+var_4]
.text:00004871                 mov     [eax], ecx
.text:00004873                 jmp     short loc_48B0
.text:00004875 ; ---------------------------------------------------------------------------
.text:00004875
.text:00004875 loc_4875:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00004875                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:0000487A                 mov     edx, [ebp+Buf1]
.text:0000487D                 push    edx             ; Buf1
.text:0000487E                 call    ___@8           ; __(x,x)
.text:00004883                 test    eax, eax
.text:00004885                 jz      short loc_48A9
.text:00004887                 cmp     [ebp+this], 0
.text:0000488B                 jz      short loc_4898
.text:0000488D                 mov     eax, [ebp+this]
.text:00004890                 add     eax, 4
.text:00004893                 mov     [ebp+var_8], eax
.text:00004896                 jmp     short loc_489F
.text:00004898 ; ---------------------------------------------------------------------------
.text:00004898
.text:00004898 loc_4898:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+67j
.text:00004898                 mov     [ebp+var_8], 0
.text:0000489F
.text:0000489F loc_489F:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+72j
.text:0000489F                 mov     ecx, [ebp+arg_8]
.text:000048A2                 mov     edx, [ebp+var_8]
.text:000048A5                 mov     [ecx], edx
.text:000048A7                 jmp     short loc_48B0
.text:000048A9 ; ---------------------------------------------------------------------------
.text:000048A9
.text:000048A9 loc_48A9:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+61j
.text:000048A9                 mov     eax, 80004002h
.text:000048AE                 jmp     short loc_48C1
.text:000048B0 ; ---------------------------------------------------------------------------
.text:000048B0
.text:000048B0 loc_48B0:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:000048B0                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+83j
.text:000048B0                 mov     eax, [ebp+this]
.text:000048B3                 mov     ecx, [eax+8]
.text:000048B6                 add     ecx, 1
.text:000048B9                 mov     edx, [ebp+this]
.text:000048BC                 mov     [edx+8], ecx
.text:000048BF                 xor     eax, eax
.text:000048C1
.text:000048C1 loc_48C1:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:000048C1                 add     esp, 8
.text:000048C4                 cmp     ebp, esp
.text:000048C6                 call    __RTC_CheckEsp
.text:000048CB                 mov     esp, ebp
.text:000048CD                 pop     ebp
.text:000048CE                 retn    0Ch
.text:000048CE ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:000048CE
.text:000048CE ; ---------------------------------------------------------------------------
.text:000048D1                 align 4
.text:000048D1 _text           ends
.text:000048D1
.text:000048D4 ; ===========================================================================
.text:000048D4
.text:000048D4 ; Segment type: Pure code
.text:000048D4 ; Segment permissions: Read/Execute
.text:000048D4 _text           segment para public 'CODE' use32
.text:000048D4                 assume cs:_text
.text:000048D4                 ;org 48D4h
.text:000048D4 ; COMDAT (pick any)
.text:000048D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048D4
.text:000048D4 ; =============== S U B R O U T I N E =======================================
.text:000048D4
.text:000048D4 ; Attributes: bp-based frame
.text:000048D4
.text:000048D4 ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(NCompress::NDeflate::NEncoder::CCOMCoder *this)
.text:000048D4                 public ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:000048D4 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000048D4                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)+5j
.text:000048D4                                         ; DATA XREF: .rdata:00004568o
.text:000048D4
.text:000048D4 var_4           = dword ptr -4
.text:000048D4 this            = dword ptr  8
.text:000048D4
.text:000048D4                 push    ebp
.text:000048D5                 mov     ebp, esp
.text:000048D7                 push    ecx
.text:000048D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048DF                 mov     eax, [ebp+this]
.text:000048E2                 mov     ecx, [eax+8]
.text:000048E5                 add     ecx, 1
.text:000048E8                 mov     [ebp+var_4], ecx
.text:000048EB                 mov     edx, [ebp+this]
.text:000048EE                 mov     eax, [ebp+var_4]
.text:000048F1                 mov     [edx+8], eax
.text:000048F4                 mov     eax, [ebp+var_4]
.text:000048F7                 mov     esp, ebp
.text:000048F9                 pop     ebp
.text:000048FA                 retn    4
.text:000048FA ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:000048FA
.text:000048FA ; ---------------------------------------------------------------------------
.text:000048FD                 align 10h
.text:000048FD _text           ends
.text:000048FD
.text:00004900 ; ===========================================================================
.text:00004900
.text:00004900 ; Segment type: Pure code
.text:00004900 ; Segment permissions: Read/Execute
.text:00004900 _text           segment para public 'CODE' use32
.text:00004900                 assume cs:_text
.text:00004900                 ;org 4900h
.text:00004900 ; COMDAT (pick any)
.text:00004900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004900
.text:00004900 ; =============== S U B R O U T I N E =======================================
.text:00004900
.text:00004900 ; Attributes: bp-based frame
.text:00004900
.text:00004900 ; unsigned __int32 __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Release(NCompress::NDeflate::NEncoder::CCOMCoder *this)
.text:00004900                 public ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ
.text:00004900 ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ proc near
.text:00004900                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)+5j
.text:00004900                                         ; DATA XREF: .rdata:0000456Co
.text:00004900
.text:00004900 var_10          = dword ptr -10h
.text:00004900 var_C           = dword ptr -0Ch
.text:00004900 var_8           = dword ptr -8
.text:00004900 var_4           = dword ptr -4
.text:00004900 this            = dword ptr  8
.text:00004900
.text:00004900                 push    ebp
.text:00004901                 mov     ebp, esp
.text:00004903                 sub     esp, 10h
.text:00004906                 mov     eax, 0CCCCCCCCh
.text:0000490B                 mov     [ebp+var_10], eax
.text:0000490E                 mov     [ebp+var_C], eax
.text:00004911                 mov     [ebp+var_8], eax
.text:00004914                 mov     [ebp+var_4], eax
.text:00004917                 mov     eax, [ebp+this]
.text:0000491A                 mov     ecx, [eax+8]
.text:0000491D                 sub     ecx, 1
.text:00004920                 mov     [ebp+var_C], ecx
.text:00004923                 mov     edx, [ebp+this]
.text:00004926                 mov     eax, [ebp+var_C]
.text:00004929                 mov     [edx+8], eax
.text:0000492C                 cmp     [ebp+var_C], 0
.text:00004930                 jz      short loc_493A
.text:00004932                 mov     ecx, [ebp+this]
.text:00004935                 mov     eax, [ecx+8]
.text:00004938                 jmp     short loc_4964
.text:0000493A ; ---------------------------------------------------------------------------
.text:0000493A
.text:0000493A loc_493A:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+30j
.text:0000493A                 mov     edx, [ebp+this]
.text:0000493D                 mov     [ebp+var_8], edx
.text:00004940                 mov     eax, [ebp+var_8]
.text:00004943                 mov     [ebp+var_4], eax
.text:00004946                 cmp     [ebp+var_4], 0
.text:0000494A                 jz      short loc_495B
.text:0000494C                 push    1
.text:0000494E                 mov     ecx, [ebp+var_4]
.text:00004951                 call    ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)
.text:00004956                 mov     [ebp+var_10], eax
.text:00004959                 jmp     short loc_4962
.text:0000495B ; ---------------------------------------------------------------------------
.text:0000495B
.text:0000495B loc_495B:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+4Aj
.text:0000495B                 mov     [ebp+var_10], 0
.text:00004962
.text:00004962 loc_4962:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+59j
.text:00004962                 xor     eax, eax
.text:00004964
.text:00004964 loc_4964:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+38j
.text:00004964                 add     esp, 10h
.text:00004967                 cmp     ebp, esp
.text:00004969                 call    __RTC_CheckEsp
.text:0000496E                 mov     esp, ebp
.text:00004970                 pop     ebp
.text:00004971                 retn    4
.text:00004971 ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ endp
.text:00004971
.text:00004971 _text           ends
.text:00004971
.text:00004974 ; ===========================================================================
.text:00004974
.text:00004974 ; Segment type: Pure code
.text:00004974 ; Segment permissions: Read/Execute
.text:00004974 _text           segment para public 'CODE' use32
.text:00004974                 assume cs:_text
.text:00004974                 ;org 4974h
.text:00004974 ; COMDAT (pick any)
.text:00004974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004974
.text:00004974 ; =============== S U B R O U T I N E =======================================
.text:00004974
.text:00004974 ; Attributes: bp-based frame
.text:00004974
.text:00004974 ; public: void * __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
.text:00004974                 public ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z
.text:00004974 ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z proc near
.text:00004974                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)+51p
.text:00004974
.text:00004974 var_4           = dword ptr -4
.text:00004974 arg_0           = dword ptr  8
.text:00004974
.text:00004974                 push    ebp
.text:00004975                 mov     ebp, esp
.text:00004977                 push    ecx
.text:00004978                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000497F                 mov     [ebp+var_4], ecx
.text:00004982                 mov     ecx, [ebp+var_4] ; this
.text:00004985                 call    ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(void)
.text:0000498A                 mov     eax, [ebp+arg_0]
.text:0000498D                 and     eax, 1
.text:00004990                 jz      short loc_499E
.text:00004992                 mov     ecx, [ebp+var_4]
.text:00004995                 push    ecx             ; void *
.text:00004996                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000499B                 add     esp, 4
.text:0000499E
.text:0000499E loc_499E:                               ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000499E                 mov     eax, [ebp+var_4]
.text:000049A1                 add     esp, 4
.text:000049A4                 cmp     ebp, esp
.text:000049A6                 call    __RTC_CheckEsp
.text:000049AB                 mov     esp, ebp
.text:000049AD                 pop     ebp
.text:000049AE                 retn    4
.text:000049AE ??_GCCOMCoder@NEncoder@NDeflate@NCompress@@QAEPAXI@Z endp
.text:000049AE
.text:000049AE ; ---------------------------------------------------------------------------
.text:000049B1                 align 4
.text:000049B1 _text           ends
.text:000049B1
.text:000049B4 ; ===========================================================================
.text:000049B4
.text:000049B4 ; Segment type: Pure code
.text:000049B4 ; Segment permissions: Read/Execute
.text:000049B4 _text           segment para public 'CODE' use32
.text:000049B4                 assume cs:_text
.text:000049B4                 ;org 49B4h
.text:000049B4 ; COMDAT (pick any)
.text:000049B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049B4
.text:000049B4 ; =============== S U B R O U T I N E =======================================
.text:000049B4
.text:000049B4 ; Attributes: bp-based frame
.text:000049B4
.text:000049B4 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:000049B4                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:000049B4 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:000049B4                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+1Cp
.text:000049B4
.text:000049B4 var_4           = dword ptr -4
.text:000049B4
.text:000049B4                 push    ebp
.text:000049B5                 mov     ebp, esp
.text:000049B7                 push    ecx
.text:000049B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049BF                 mov     [ebp+var_4], ecx
.text:000049C2                 mov     ecx, [ebp+var_4]
.text:000049C5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000049CA                 mov     eax, [ebp+var_4]
.text:000049CD                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:000049D3                 mov     eax, [ebp+var_4]
.text:000049D6                 add     esp, 4
.text:000049D9                 cmp     ebp, esp
.text:000049DB                 call    __RTC_CheckEsp
.text:000049E0                 mov     esp, ebp
.text:000049E2                 pop     ebp
.text:000049E3                 retn
.text:000049E3 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:000049E3
.text:000049E3 _text           ends
.text:000049E3
.rdata:000049E4 ; ===========================================================================
.rdata:000049E4
.rdata:000049E4 ; Segment type: Pure data
.rdata:000049E4 ; Segment permissions: Read
.rdata:000049E4 _rdata          segment dword public 'DATA' use32
.rdata:000049E4                 assume cs:_rdata
.rdata:000049E4                 ;org 49E4h
.rdata:000049E4 ; COMDAT (pick largest)
.rdata:000049E4                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:000049E8                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:000049E8 ; const ICompressSetCoderProperties::`vftable'
.rdata:000049E8 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:000049E8                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:000049EC                 dd offset __purecall
.rdata:000049F0                 dd offset __purecall
.rdata:000049F4                 dd offset __purecall
.rdata:000049F4 _rdata          ends
.rdata:000049F4
.rdata$r:000049F8 ; ===========================================================================
.rdata$r:000049F8
.rdata$r:000049F8 ; Segment type: Pure data
.rdata$r:000049F8 ; Segment permissions: Read
.rdata$r:000049F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000049F8                 assume cs:_rdata$r
.rdata$r:000049F8                 ;org 49F8h
.rdata$r:000049F8 ; COMDAT (pick any)
.rdata$r:000049F8                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:000049F8 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:000049F8 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:000049F8                                         ; DATA XREF: .rdata:000049E4o
.rdata$r:000049F9                 db    0
.rdata$r:000049FA                 db    0
.rdata$r:000049FB                 db    0
.rdata$r:000049FC                 db    0
.rdata$r:000049FD                 db    0
.rdata$r:000049FE                 db    0
.rdata$r:000049FF                 db    0
.rdata$r:00004A00                 db    0
.rdata$r:00004A01                 db    0
.rdata$r:00004A02                 db    0
.rdata$r:00004A03                 db    0
.rdata$r:00004A04                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00004A08                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004A08 _rdata$r        ends
.rdata$r:00004A08
.text:00004A0C ; ===========================================================================
.text:00004A0C
.text:00004A0C ; Segment type: Pure code
.text:00004A0C ; Segment permissions: Read/Execute
.text:00004A0C _text           segment para public 'CODE' use32
.text:00004A0C                 assume cs:_text
.text:00004A0C                 ;org 4A0Ch
.text:00004A0C ; COMDAT (pick any)
.text:00004A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A0C
.text:00004A0C ; =============== S U B R O U T I N E =======================================
.text:00004A0C
.text:00004A0C ; Attributes: bp-based frame
.text:00004A0C
.text:00004A0C ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(NCompress::NDeflate::NEncoder::CCOMCoder *__hidden this)
.text:00004A0C                 public ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ
.text:00004A0C ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00004A0C                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::`scalar deleting destructor'(uint)+11p
.text:00004A0C
.text:00004A0C var_4           = dword ptr -4
.text:00004A0C
.text:00004A0C                 push    ebp
.text:00004A0D                 mov     ebp, esp
.text:00004A0F                 push    ecx
.text:00004A10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A17                 mov     [ebp+var_4], ecx
.text:00004A1A                 mov     ecx, [ebp+var_4]
.text:00004A1D                 add     ecx, 10h        ; this
.text:00004A20                 call    ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NEncoder::CCoder::~CCoder(void)
.text:00004A25                 add     esp, 4
.text:00004A28                 cmp     ebp, esp
.text:00004A2A                 call    __RTC_CheckEsp
.text:00004A2F                 mov     esp, ebp
.text:00004A31                 pop     ebp
.text:00004A32                 retn
.text:00004A32 ??1CCOMCoder@NEncoder@NDeflate@NCompress@@QAE@XZ endp
.text:00004A32
.text:00004A32 ; ---------------------------------------------------------------------------
.text:00004A33                 align 4
.text:00004A33 _text           ends
.text:00004A33
.text:00004A34 ; ===========================================================================
.text:00004A34
.text:00004A34 ; Segment type: Pure code
.text:00004A34 ; Segment permissions: Read/Execute
.text:00004A34 _text           segment para public 'CODE' use32
.text:00004A34                 assume cs:_text
.text:00004A34                 ;org 4A34h
.text:00004A34 ; COMDAT (pick any)
.text:00004A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A34
.text:00004A34 ; =============== S U B R O U T I N E =======================================
.text:00004A34
.text:00004A34 ; Attributes: bp-based frame
.text:00004A34
.text:00004A34 ; int __thiscall NArchive::CSingleMethodProps::GetLevel(NArchive::CSingleMethodProps *__hidden this)
.text:00004A34                 public ?GetLevel@CSingleMethodProps@NArchive@@QBEHXZ
.text:00004A34 ?GetLevel@CSingleMethodProps@NArchive@@QBEHXZ proc near
.text:00004A34                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+1DEp
.text:00004A34
.text:00004A34 var_8           = dword ptr -8
.text:00004A34 var_4           = dword ptr -4
.text:00004A34
.text:00004A34                 push    ebp
.text:00004A35                 mov     ebp, esp
.text:00004A37                 sub     esp, 8
.text:00004A3A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A48                 mov     [ebp+var_4], ecx
.text:00004A4B                 mov     eax, [ebp+var_4]
.text:00004A4E                 cmp     dword ptr [eax+24h], 0FFFFFFFFh
.text:00004A52                 jnz     short loc_4A5D
.text:00004A54                 mov     [ebp+var_8], 5
.text:00004A5B                 jmp     short loc_4A66
.text:00004A5D ; ---------------------------------------------------------------------------
.text:00004A5D
.text:00004A5D loc_4A5D:                               ; CODE XREF: NArchive::CSingleMethodProps::GetLevel(void)+1Ej
.text:00004A5D                 mov     ecx, [ebp+var_4]
.text:00004A60                 mov     edx, [ecx+24h]
.text:00004A63                 mov     [ebp+var_8], edx
.text:00004A66
.text:00004A66 loc_4A66:                               ; CODE XREF: NArchive::CSingleMethodProps::GetLevel(void)+27j
.text:00004A66                 mov     eax, [ebp+var_8]
.text:00004A69                 mov     esp, ebp
.text:00004A6B                 pop     ebp
.text:00004A6C                 retn
.text:00004A6C ?GetLevel@CSingleMethodProps@NArchive@@QBEHXZ endp
.text:00004A6C
.text:00004A6C ; ---------------------------------------------------------------------------
.text:00004A6D                 align 10h
.text:00004A6D _text           ends
.text:00004A6D
.text:00004A70 ; ===========================================================================
.text:00004A70
.text:00004A70 ; Segment type: Pure code
.text:00004A70 ; Segment permissions: Read/Execute
.text:00004A70 _text           segment para public 'CODE' use32
.text:00004A70                 assume cs:_text
.text:00004A70                 ;org 4A70h
.text:00004A70 ; COMDAT (pick any)
.text:00004A70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A70
.text:00004A70 ; =============== S U B R O U T I N E =======================================
.text:00004A70
.text:00004A70 ; Attributes: bp-based frame
.text:00004A70
.text:00004A70 ; void __thiscall CSequentialInStreamWithCRC::SetStream(CSequentialInStreamWithCRC *this, struct ISequentialInStream *)
.text:00004A70                 public ?SetStream@CSequentialInStreamWithCRC@@QAEXPAUISequentialInStream@@@Z
.text:00004A70 ?SetStream@CSequentialInStreamWithCRC@@QAEXPAUISequentialInStream@@@Z proc near
.text:00004A70                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+15Dp
.text:00004A70
.text:00004A70 var_4           = dword ptr -4
.text:00004A70 arg_0           = dword ptr  8
.text:00004A70
.text:00004A70                 push    ebp
.text:00004A71                 mov     ebp, esp
.text:00004A73                 push    ecx
.text:00004A74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A7B                 mov     [ebp+var_4], ecx
.text:00004A7E                 mov     eax, [ebp+arg_0]
.text:00004A81                 push    eax
.text:00004A82                 mov     ecx, [ebp+var_4]
.text:00004A85                 add     ecx, 8
.text:00004A88                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00004A8D                 add     esp, 4
.text:00004A90                 cmp     ebp, esp
.text:00004A92                 call    __RTC_CheckEsp
.text:00004A97                 mov     esp, ebp
.text:00004A99                 pop     ebp
.text:00004A9A                 retn    4
.text:00004A9A ?SetStream@CSequentialInStreamWithCRC@@QAEXPAUISequentialInStream@@@Z endp
.text:00004A9A
.text:00004A9A ; ---------------------------------------------------------------------------
.text:00004A9D                 align 10h
.text:00004A9D _text           ends
.text:00004A9D
.text:00004AA0 ; ===========================================================================
.text:00004AA0
.text:00004AA0 ; Segment type: Pure code
.text:00004AA0 ; Segment permissions: Read/Execute
.text:00004AA0 _text           segment para public 'CODE' use32
.text:00004AA0                 assume cs:_text
.text:00004AA0                 ;org 4AA0h
.text:00004AA0 ; COMDAT (pick any)
.text:00004AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AA0
.text:00004AA0 ; =============== S U B R O U T I N E =======================================
.text:00004AA0
.text:00004AA0 ; Attributes: bp-based frame
.text:00004AA0
.text:00004AA0 ; void __thiscall CSequentialInStreamWithCRC::Init(CSequentialInStreamWithCRC *__hidden this)
.text:00004AA0                 public ?Init@CSequentialInStreamWithCRC@@QAEXXZ
.text:00004AA0 ?Init@CSequentialInStreamWithCRC@@QAEXXZ proc near
.text:00004AA0                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+165p
.text:00004AA0
.text:00004AA0 var_4           = dword ptr -4
.text:00004AA0
.text:00004AA0                 push    ebp
.text:00004AA1                 mov     ebp, esp
.text:00004AA3                 push    ecx
.text:00004AA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AAB                 mov     [ebp+var_4], ecx
.text:00004AAE                 mov     eax, [ebp+var_4]
.text:00004AB1                 mov     dword ptr [eax+10h], 0
.text:00004AB8                 mov     dword ptr [eax+14h], 0
.text:00004ABF                 mov     ecx, [ebp+var_4]
.text:00004AC2                 mov     byte ptr [ecx+1Ch], 0
.text:00004AC6                 mov     edx, [ebp+var_4]
.text:00004AC9                 mov     dword ptr [edx+18h], 0FFFFFFFFh
.text:00004AD0                 mov     esp, ebp
.text:00004AD2                 pop     ebp
.text:00004AD3                 retn
.text:00004AD3 ?Init@CSequentialInStreamWithCRC@@QAEXXZ endp
.text:00004AD3
.text:00004AD3 _text           ends
.text:00004AD3
.text:00004AD4 ; ===========================================================================
.text:00004AD4
.text:00004AD4 ; Segment type: Pure code
.text:00004AD4 ; Segment permissions: Read/Execute
.text:00004AD4 _text           segment para public 'CODE' use32
.text:00004AD4                 assume cs:_text
.text:00004AD4                 ;org 4AD4h
.text:00004AD4 ; COMDAT (pick any)
.text:00004AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AD4
.text:00004AD4 ; =============== S U B R O U T I N E =======================================
.text:00004AD4
.text:00004AD4 ; Attributes: bp-based frame
.text:00004AD4
.text:00004AD4 ; unsigned int __thiscall CSequentialInStreamWithCRC::GetCRC(CSequentialInStreamWithCRC *__hidden this)
.text:00004AD4                 public ?GetCRC@CSequentialInStreamWithCRC@@QBEIXZ
.text:00004AD4 ?GetCRC@CSequentialInStreamWithCRC@@QBEIXZ proc near
.text:00004AD4                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+3C7p
.text:00004AD4
.text:00004AD4 var_4           = dword ptr -4
.text:00004AD4
.text:00004AD4                 push    ebp
.text:00004AD5                 mov     ebp, esp
.text:00004AD7                 push    ecx
.text:00004AD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004ADF                 mov     [ebp+var_4], ecx
.text:00004AE2                 mov     eax, [ebp+var_4]
.text:00004AE5                 mov     eax, [eax+18h]
.text:00004AE8                 xor     eax, 0FFFFFFFFh
.text:00004AEB                 mov     esp, ebp
.text:00004AED                 pop     ebp
.text:00004AEE                 retn
.text:00004AEE ?GetCRC@CSequentialInStreamWithCRC@@QBEIXZ endp
.text:00004AEE
.text:00004AEE ; ---------------------------------------------------------------------------
.text:00004AEF                 align 10h
.text:00004AEF _text           ends
.text:00004AEF
.text:00004AF0 ; ===========================================================================
.text:00004AF0
.text:00004AF0 ; Segment type: Pure code
.text:00004AF0 ; Segment permissions: Read/Execute
.text:00004AF0 _text           segment para public 'CODE' use32
.text:00004AF0                 assume cs:_text
.text:00004AF0                 ;org 4AF0h
.text:00004AF0 ; COMDAT (pick any)
.text:00004AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AF0
.text:00004AF0 ; =============== S U B R O U T I N E =======================================
.text:00004AF0
.text:00004AF0 ; Attributes: bp-based frame
.text:00004AF0
.text:00004AF0 ; unsigned __int64 __thiscall CSequentialInStreamWithCRC::GetSize(CSequentialInStreamWithCRC *__hidden this)
.text:00004AF0                 public ?GetSize@CSequentialInStreamWithCRC@@QBE_KXZ
.text:00004AF0 ?GetSize@CSequentialInStreamWithCRC@@QBE_KXZ proc near
.text:00004AF0                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+3D5p
.text:00004AF0
.text:00004AF0 var_4           = dword ptr -4
.text:00004AF0
.text:00004AF0                 push    ebp
.text:00004AF1                 mov     ebp, esp
.text:00004AF3                 push    ecx
.text:00004AF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AFB                 mov     [ebp+var_4], ecx
.text:00004AFE                 mov     ecx, [ebp+var_4]
.text:00004B01                 mov     eax, [ecx+10h]
.text:00004B04                 mov     edx, [ecx+14h]
.text:00004B07                 mov     esp, ebp
.text:00004B09                 pop     ebp
.text:00004B0A                 retn
.text:00004B0A ?GetSize@CSequentialInStreamWithCRC@@QBE_KXZ endp
.text:00004B0A
.text:00004B0A ; ---------------------------------------------------------------------------
.text:00004B0B                 align 4
.text:00004B0B _text           ends
.text:00004B0B
.text:00004B0C ; ===========================================================================
.text:00004B0C
.text:00004B0C ; Segment type: Pure code
.text:00004B0C ; Segment permissions: Read/Execute
.text:00004B0C _text           segment para public 'CODE' use32
.text:00004B0C                 assume cs:_text
.text:00004B0C                 ;org 4B0Ch
.text:00004B0C ; COMDAT (pick any)
.text:00004B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B0C
.text:00004B0C ; =============== S U B R O U T I N E =======================================
.text:00004B0C
.text:00004B0C ; Attributes: bp-based frame
.text:00004B0C
.text:00004B0C ; public: __thiscall CSequentialInStreamWithCRC::CSequentialInStreamWithCRC(void)
.text:00004B0C                 public ??0CSequentialInStreamWithCRC@@QAE@XZ
.text:00004B0C ??0CSequentialInStreamWithCRC@@QAE@XZ proc near
.text:00004B0C                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+117p
.text:00004B0C
.text:00004B0C var_4           = dword ptr -4
.text:00004B0C
.text:00004B0C                 push    ebp
.text:00004B0D                 mov     ebp, esp
.text:00004B0F                 push    ecx
.text:00004B10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B17                 mov     [ebp+var_4], ecx
.text:00004B1A                 mov     ecx, [ebp+var_4] ; this
.text:00004B1D                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00004B22                 mov     ecx, [ebp+var_4]
.text:00004B25                 add     ecx, 4          ; this
.text:00004B28                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004B2D                 mov     eax, [ebp+var_4]
.text:00004B30                 mov     dword ptr [eax], offset ??_7CSequentialInStreamWithCRC@@6B@ ; const CSequentialInStreamWithCRC::`vftable'
.text:00004B36                 mov     ecx, [ebp+var_4]
.text:00004B39                 add     ecx, 8
.text:00004B3C                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00004B41                 mov     eax, [ebp+var_4]
.text:00004B44                 add     esp, 4
.text:00004B47                 cmp     ebp, esp
.text:00004B49                 call    __RTC_CheckEsp
.text:00004B4E                 mov     esp, ebp
.text:00004B50                 pop     ebp
.text:00004B51                 retn
.text:00004B51 ??0CSequentialInStreamWithCRC@@QAE@XZ endp
.text:00004B51
.text:00004B51 ; ---------------------------------------------------------------------------
.text:00004B52                 align 4
.text:00004B52 _text           ends
.text:00004B52
.rdata:00004B54 ; ===========================================================================
.rdata:00004B54
.rdata:00004B54 ; Segment type: Pure data
.rdata:00004B54 ; Segment permissions: Read
.rdata:00004B54 _rdata          segment dword public 'DATA' use32
.rdata:00004B54                 assume cs:_rdata
.rdata:00004B54                 ;org 4B54h
.rdata:00004B54 ; COMDAT (pick largest)
.rdata:00004B54                 dd offset ??_R4CSequentialInStreamWithCRC@@6B@ ; const CSequentialInStreamWithCRC::`RTTI Complete Object Locator'
.rdata:00004B58                 public ??_7CSequentialInStreamWithCRC@@6B@
.rdata:00004B58 ; const CSequentialInStreamWithCRC::`vftable'
.rdata:00004B58 ??_7CSequentialInStreamWithCRC@@6B@ dd offset ?QueryInterface@CSequentialInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004B58                                         ; DATA XREF: CSequentialInStreamWithCRC::CSequentialInStreamWithCRC(void)+24o
.rdata:00004B58                                         ; CSequentialInStreamWithCRC::QueryInterface(_GUID const &,void * *)
.rdata:00004B5C                 dd offset ?AddRef@CSequentialInStreamWithCRC@@UAGKXZ ; CSequentialInStreamWithCRC::AddRef(void)
.rdata:00004B60                 dd offset ?Release@CSequentialInStreamWithCRC@@UAGKXZ ; CSequentialInStreamWithCRC::Release(void)
.rdata:00004B64                 dd offset ?Read@CSequentialInStreamWithCRC@@UAGJPAXIPAI@Z ; CSequentialInStreamWithCRC::Read(void *,uint,uint *)
.rdata:00004B64 _rdata          ends
.rdata:00004B64
.rdata$r:00004B68 ; ===========================================================================
.rdata$r:00004B68
.rdata$r:00004B68 ; Segment type: Pure data
.rdata$r:00004B68 ; Segment permissions: Read
.rdata$r:00004B68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B68                 assume cs:_rdata$r
.rdata$r:00004B68                 ;org 4B68h
.rdata$r:00004B68 ; COMDAT (pick any)
.rdata$r:00004B68                 public ??_R4CSequentialInStreamWithCRC@@6B@
.rdata$r:00004B68 ; const CSequentialInStreamWithCRC::`RTTI Complete Object Locator'
.rdata$r:00004B68 ??_R4CSequentialInStreamWithCRC@@6B@ db    0 ; DATA XREF: .rdata:00004B54o
.rdata$r:00004B69                 db    0
.rdata$r:00004B6A                 db    0
.rdata$r:00004B6B                 db    0
.rdata$r:00004B6C                 db    0
.rdata$r:00004B6D                 db    0
.rdata$r:00004B6E                 db    0
.rdata$r:00004B6F                 db    0
.rdata$r:00004B70                 db    0
.rdata$r:00004B71                 db    0
.rdata$r:00004B72                 db    0
.rdata$r:00004B73                 db    0
.rdata$r:00004B74                 dd offset ??_R0?AVCSequentialInStreamWithCRC@@@8 ; CSequentialInStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00004B78                 dd offset ??_R3CSequentialInStreamWithCRC@@8 ; CSequentialInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B78 _rdata$r        ends
.rdata$r:00004B78
.data:00004B7C ; ===========================================================================
.data:00004B7C
.data:00004B7C ; Segment type: Pure data
.data:00004B7C ; Segment permissions: Read/Write
.data:00004B7C _data           segment dword public 'DATA' use32
.data:00004B7C                 assume cs:_data
.data:00004B7C                 ;org 4B7Ch
.data:00004B7C ; COMDAT (pick any)
.data:00004B7C                 public ??_R0?AVCSequentialInStreamWithCRC@@@8
.data:00004B7C ; class CSequentialInStreamWithCRC `RTTI Type Descriptor'
.data:00004B7C ??_R0?AVCSequentialInStreamWithCRC@@@8 dd offset ??_7type_info@@6B@
.data:00004B7C                                         ; DATA XREF: .rdata$r:00004B74o
.data:00004B7C                                         ; .rdata$r:CSequentialInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004B7C                                         ; const type_info::`vftable'
.data:00004B80                 db    0
.data:00004B81                 db    0
.data:00004B82                 db    0
.data:00004B83                 db    0
.data:00004B84                 db  2Eh ; .
.data:00004B85                 db  3Fh ; ?
.data:00004B86                 db  41h ; A
.data:00004B87                 db  56h ; V
.data:00004B88                 db  43h ; C
.data:00004B89                 db  53h ; S
.data:00004B8A                 db  65h ; e
.data:00004B8B                 db  71h ; q
.data:00004B8C                 db  75h ; u
.data:00004B8D                 db  65h ; e
.data:00004B8E                 db  6Eh ; n
.data:00004B8F                 db  74h ; t
.data:00004B90                 db  69h ; i
.data:00004B91                 db  61h ; a
.data:00004B92                 db  6Ch ; l
.data:00004B93                 db  49h ; I
.data:00004B94                 db  6Eh ; n
.data:00004B95                 db  53h ; S
.data:00004B96                 db  74h ; t
.data:00004B97                 db  72h ; r
.data:00004B98                 db  65h ; e
.data:00004B99                 db  61h ; a
.data:00004B9A                 db  6Dh ; m
.data:00004B9B                 db  57h ; W
.data:00004B9C                 db  69h ; i
.data:00004B9D                 db  74h ; t
.data:00004B9E                 db  68h ; h
.data:00004B9F                 db  43h ; C
.data:00004BA0                 db  52h ; R
.data:00004BA1                 db  43h ; C
.data:00004BA2                 db  40h ; @
.data:00004BA3                 db  40h ; @
.data:00004BA4                 db    0
.data:00004BA5                 align 4
.data:00004BA5 _data           ends
.data:00004BA5
.rdata$r:00004BA8 ; ===========================================================================
.rdata$r:00004BA8
.rdata$r:00004BA8 ; Segment type: Pure data
.rdata$r:00004BA8 ; Segment permissions: Read
.rdata$r:00004BA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004BA8                 assume cs:_rdata$r
.rdata$r:00004BA8                 ;org 4BA8h
.rdata$r:00004BA8 ; COMDAT (pick any)
.rdata$r:00004BA8                 public ??_R3CSequentialInStreamWithCRC@@8
.rdata$r:00004BA8 ; CSequentialInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004BA8 ??_R3CSequentialInStreamWithCRC@@8 db    0 ; DATA XREF: .rdata$r:00004B78o
.rdata$r:00004BA8                                         ; .rdata$r:00004BE4o
.rdata$r:00004BA9                 db    0
.rdata$r:00004BAA                 db    0
.rdata$r:00004BAB                 db    0
.rdata$r:00004BAC                 db    1
.rdata$r:00004BAD                 db    0
.rdata$r:00004BAE                 db    0
.rdata$r:00004BAF                 db    0
.rdata$r:00004BB0                 db    4
.rdata$r:00004BB1                 db    0
.rdata$r:00004BB2                 db    0
.rdata$r:00004BB3                 db    0
.rdata$r:00004BB4                 dd offset ??_R2CSequentialInStreamWithCRC@@8 ; CSequentialInStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00004BB4 _rdata$r        ends
.rdata$r:00004BB4
.rdata$r:00004BB8 ; ===========================================================================
.rdata$r:00004BB8
.rdata$r:00004BB8 ; Segment type: Pure data
.rdata$r:00004BB8 ; Segment permissions: Read
.rdata$r:00004BB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004BB8                 assume cs:_rdata$r
.rdata$r:00004BB8                 ;org 4BB8h
.rdata$r:00004BB8 ; COMDAT (pick any)
.rdata$r:00004BB8                 public ??_R2CSequentialInStreamWithCRC@@8
.rdata$r:00004BB8 ; CSequentialInStreamWithCRC::`RTTI Base Class Array'
.rdata$r:00004BB8 ??_R2CSequentialInStreamWithCRC@@8 dd offset ??_R1A@?0A@EA@CSequentialInStreamWithCRC@@8
.rdata$r:00004BB8                                         ; DATA XREF: .rdata$r:00004BB4o
.rdata$r:00004BB8                                         ; CSequentialInStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004BBC                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004BC0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004BC4                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004BC8                 db    0
.rdata$r:00004BC9                 align 4
.rdata$r:00004BC9 _rdata$r        ends
.rdata$r:00004BC9
.rdata$r:00004BCC ; ===========================================================================
.rdata$r:00004BCC
.rdata$r:00004BCC ; Segment type: Pure data
.rdata$r:00004BCC ; Segment permissions: Read
.rdata$r:00004BCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004BCC                 assume cs:_rdata$r
.rdata$r:00004BCC                 ;org 4BCCh
.rdata$r:00004BCC ; COMDAT (pick any)
.rdata$r:00004BCC                 public ??_R1A@?0A@EA@CSequentialInStreamWithCRC@@8
.rdata$r:00004BCC ; CSequentialInStreamWithCRC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004BCC ??_R1A@?0A@EA@CSequentialInStreamWithCRC@@8 dd offset ??_R0?AVCSequentialInStreamWithCRC@@@8
.rdata$r:00004BCC                                         ; DATA XREF: .rdata$r:CSequentialInStreamWithCRC::`RTTI Base Class Array'o
.rdata$r:00004BCC                                         ; CSequentialInStreamWithCRC `RTTI Type Descriptor'
.rdata$r:00004BD0                 db    3
.rdata$r:00004BD1                 db    0
.rdata$r:00004BD2                 db    0
.rdata$r:00004BD3                 db    0
.rdata$r:00004BD4                 db    0
.rdata$r:00004BD5                 db    0
.rdata$r:00004BD6                 db    0
.rdata$r:00004BD7                 db    0
.rdata$r:00004BD8                 db 0FFh
.rdata$r:00004BD9                 db 0FFh
.rdata$r:00004BDA                 db 0FFh
.rdata$r:00004BDB                 db 0FFh
.rdata$r:00004BDC                 db    0
.rdata$r:00004BDD                 db    0
.rdata$r:00004BDE                 db    0
.rdata$r:00004BDF                 db    0
.rdata$r:00004BE0                 db  40h ; @
.rdata$r:00004BE1                 db    0
.rdata$r:00004BE2                 db    0
.rdata$r:00004BE3                 db    0
.rdata$r:00004BE4                 dd offset ??_R3CSequentialInStreamWithCRC@@8 ; CSequentialInStreamWithCRC::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004BE4 _rdata$r        ends
.rdata$r:00004BE4
.rdata$r:00004BE8 ; ===========================================================================
.rdata$r:00004BE8
.rdata$r:00004BE8 ; Segment type: Pure data
.rdata$r:00004BE8 ; Segment permissions: Read
.rdata$r:00004BE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004BE8                 assume cs:_rdata$r
.rdata$r:00004BE8                 ;org 4BE8h
.rdata$r:00004BE8 ; COMDAT (pick any)
.rdata$r:00004BE8                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00004BE8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004BE8 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00004BE8                                         ; DATA XREF: .rdata$r:00004BBCo
.rdata$r:00004BE8                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00004BE8                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00004BEC                 db    1
.rdata$r:00004BED                 db    0
.rdata$r:00004BEE                 db    0
.rdata$r:00004BEF                 db    0
.rdata$r:00004BF0                 db    0
.rdata$r:00004BF1                 db    0
.rdata$r:00004BF2                 db    0
.rdata$r:00004BF3                 db    0
.rdata$r:00004BF4                 db 0FFh
.rdata$r:00004BF5                 db 0FFh
.rdata$r:00004BF6                 db 0FFh
.rdata$r:00004BF7                 db 0FFh
.rdata$r:00004BF8                 db    0
.rdata$r:00004BF9                 db    0
.rdata$r:00004BFA                 db    0
.rdata$r:00004BFB                 db    0
.rdata$r:00004BFC                 db  40h ; @
.rdata$r:00004BFD                 db    0
.rdata$r:00004BFE                 db    0
.rdata$r:00004BFF                 db    0
.rdata$r:00004C00                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004C00 _rdata$r        ends
.rdata$r:00004C00
.data:00004C04 ; ===========================================================================
.data:00004C04
.data:00004C04 ; Segment type: Pure data
.data:00004C04 ; Segment permissions: Read/Write
.data:00004C04 _data           segment dword public 'DATA' use32
.data:00004C04                 assume cs:_data
.data:00004C04                 ;org 4C04h
.data:00004C04 ; COMDAT (pick any)
.data:00004C04                 public ??_R0?AUISequentialInStream@@@8
.data:00004C04 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00004C04 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00004C04                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004C04                                         ; .rdata$r:00004C94o ...
.data:00004C04                                         ; const type_info::`vftable'
.data:00004C08                 db    0
.data:00004C09                 db    0
.data:00004C0A                 db    0
.data:00004C0B                 db    0
.data:00004C0C                 db  2Eh ; .
.data:00004C0D                 db  3Fh ; ?
.data:00004C0E                 db  41h ; A
.data:00004C0F                 db  55h ; U
.data:00004C10                 db  49h ; I
.data:00004C11                 db  53h ; S
.data:00004C12                 db  65h ; e
.data:00004C13                 db  71h ; q
.data:00004C14                 db  75h ; u
.data:00004C15                 db  65h ; e
.data:00004C16                 db  6Eh ; n
.data:00004C17                 db  74h ; t
.data:00004C18                 db  69h ; i
.data:00004C19                 db  61h ; a
.data:00004C1A                 db  6Ch ; l
.data:00004C1B                 db  49h ; I
.data:00004C1C                 db  6Eh ; n
.data:00004C1D                 db  53h ; S
.data:00004C1E                 db  74h ; t
.data:00004C1F                 db  72h ; r
.data:00004C20                 db  65h ; e
.data:00004C21                 db  61h ; a
.data:00004C22                 db  6Dh ; m
.data:00004C23                 db  40h ; @
.data:00004C24                 db  40h ; @
.data:00004C25                 db    0
.data:00004C26                 align 4
.data:00004C26 _data           ends
.data:00004C26
.rdata$r:00004C28 ; ===========================================================================
.rdata$r:00004C28
.rdata$r:00004C28 ; Segment type: Pure data
.rdata$r:00004C28 ; Segment permissions: Read
.rdata$r:00004C28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004C28                 assume cs:_rdata$r
.rdata$r:00004C28                 ;org 4C28h
.rdata$r:00004C28 ; COMDAT (pick any)
.rdata$r:00004C28                 public ??_R3ISequentialInStream@@8
.rdata$r:00004C28 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004C28 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00004C00o
.rdata$r:00004C28                                         ; .rdata$r:00004C98o ...
.rdata$r:00004C29                 db    0
.rdata$r:00004C2A                 db    0
.rdata$r:00004C2B                 db    0
.rdata$r:00004C2C                 db    0
.rdata$r:00004C2D                 db    0
.rdata$r:00004C2E                 db    0
.rdata$r:00004C2F                 db    0
.rdata$r:00004C30                 db    2
.rdata$r:00004C31                 db    0
.rdata$r:00004C32                 db    0
.rdata$r:00004C33                 db    0
.rdata$r:00004C34                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00004C34 _rdata$r        ends
.rdata$r:00004C34
.rdata$r:00004C38 ; ===========================================================================
.rdata$r:00004C38
.rdata$r:00004C38 ; Segment type: Pure data
.rdata$r:00004C38 ; Segment permissions: Read
.rdata$r:00004C38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004C38                 assume cs:_rdata$r
.rdata$r:00004C38                 ;org 4C38h
.rdata$r:00004C38 ; COMDAT (pick any)
.rdata$r:00004C38                 public ??_R2ISequentialInStream@@8
.rdata$r:00004C38 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00004C38 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00004C38                                         ; DATA XREF: .rdata$r:00004C34o
.rdata$r:00004C38                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004C3C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004C40                 db    0
.rdata$r:00004C41                 align 4
.rdata$r:00004C41 _rdata$r        ends
.rdata$r:00004C41
.text:00004C44 ; ===========================================================================
.text:00004C44
.text:00004C44 ; Segment type: Pure code
.text:00004C44 ; Segment permissions: Read/Execute
.text:00004C44 _text           segment para public 'CODE' use32
.text:00004C44                 assume cs:_text
.text:00004C44                 ;org 4C44h
.text:00004C44 ; COMDAT (pick any)
.text:00004C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C44
.text:00004C44 ; =============== S U B R O U T I N E =======================================
.text:00004C44
.text:00004C44 ; Attributes: bp-based frame
.text:00004C44
.text:00004C44 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00004C44                 public ??0ISequentialInStream@@QAE@XZ
.text:00004C44 ??0ISequentialInStream@@QAE@XZ proc near
.text:00004C44                                         ; CODE XREF: CSequentialInStreamWithCRC::CSequentialInStreamWithCRC(void)+11p
.text:00004C44
.text:00004C44 var_4           = dword ptr -4
.text:00004C44
.text:00004C44                 push    ebp
.text:00004C45                 mov     ebp, esp
.text:00004C47                 push    ecx
.text:00004C48                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C4F                 mov     [ebp+var_4], ecx
.text:00004C52                 mov     ecx, [ebp+var_4]
.text:00004C55                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004C5A                 mov     eax, [ebp+var_4]
.text:00004C5D                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00004C63                 mov     eax, [ebp+var_4]
.text:00004C66                 add     esp, 4
.text:00004C69                 cmp     ebp, esp
.text:00004C6B                 call    __RTC_CheckEsp
.text:00004C70                 mov     esp, ebp
.text:00004C72                 pop     ebp
.text:00004C73                 retn
.text:00004C73 ??0ISequentialInStream@@QAE@XZ endp
.text:00004C73
.text:00004C73 _text           ends
.text:00004C73
.rdata:00004C74 ; ===========================================================================
.rdata:00004C74
.rdata:00004C74 ; Segment type: Pure data
.rdata:00004C74 ; Segment permissions: Read
.rdata:00004C74 _rdata          segment dword public 'DATA' use32
.rdata:00004C74                 assume cs:_rdata
.rdata:00004C74                 ;org 4C74h
.rdata:00004C74 ; COMDAT (pick largest)
.rdata:00004C74                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00004C78                 public ??_7ISequentialInStream@@6B@
.rdata:00004C78 ; const ISequentialInStream::`vftable'
.rdata:00004C78 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00004C78                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00004C7C                 dd offset __purecall
.rdata:00004C80                 dd offset __purecall
.rdata:00004C84                 dd offset __purecall
.rdata:00004C84 _rdata          ends
.rdata:00004C84
.rdata$r:00004C88 ; ===========================================================================
.rdata$r:00004C88
.rdata$r:00004C88 ; Segment type: Pure data
.rdata$r:00004C88 ; Segment permissions: Read
.rdata$r:00004C88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004C88                 assume cs:_rdata$r
.rdata$r:00004C88                 ;org 4C88h
.rdata$r:00004C88 ; COMDAT (pick any)
.rdata$r:00004C88                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00004C88 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00004C88 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00004C74o
.rdata$r:00004C89                 db    0
.rdata$r:00004C8A                 db    0
.rdata$r:00004C8B                 db    0
.rdata$r:00004C8C                 db    0
.rdata$r:00004C8D                 db    0
.rdata$r:00004C8E                 db    0
.rdata$r:00004C8F                 db    0
.rdata$r:00004C90                 db    0
.rdata$r:00004C91                 db    0
.rdata$r:00004C92                 db    0
.rdata$r:00004C93                 db    0
.rdata$r:00004C94                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00004C98                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004C98 _rdata$r        ends
.rdata$r:00004C98
.text:00004C9C ; ===========================================================================
.text:00004C9C
.text:00004C9C ; Segment type: Pure code
.text:00004C9C ; Segment permissions: Read/Execute
.text:00004C9C _text           segment para public 'CODE' use32
.text:00004C9C                 assume cs:_text
.text:00004C9C                 ;org 4C9Ch
.text:00004C9C ; COMDAT (pick any)
.text:00004C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C9C
.text:00004C9C ; =============== S U B R O U T I N E =======================================
.text:00004C9C
.text:00004C9C ; Attributes: bp-based frame
.text:00004C9C
.text:00004C9C ; __int32 __stdcall CSequentialInStreamWithCRC::QueryInterface(CSequentialInStreamWithCRC *this, const struct _GUID *Buf1, void **)
.text:00004C9C                 public ?QueryInterface@CSequentialInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
.text:00004C9C ?QueryInterface@CSequentialInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004C9C                                         ; DATA XREF: .rdata:const CSequentialInStreamWithCRC::`vftable'o
.text:00004C9C
.text:00004C9C this            = dword ptr  8
.text:00004C9C Buf1            = dword ptr  0Ch
.text:00004C9C arg_8           = dword ptr  10h
.text:00004C9C
.text:00004C9C                 push    ebp
.text:00004C9D                 mov     ebp, esp
.text:00004C9F                 mov     eax, [ebp+arg_8]
.text:00004CA2                 mov     dword ptr [eax], 0
.text:00004CA8                 push    offset _IID_IUnknown ; Buf2
.text:00004CAD                 mov     ecx, [ebp+Buf1]
.text:00004CB0                 push    ecx             ; Buf1
.text:00004CB1                 call    ___@8           ; __(x,x)
.text:00004CB6                 test    eax, eax
.text:00004CB8                 jz      short loc_4CC4
.text:00004CBA                 mov     edx, [ebp+arg_8]
.text:00004CBD                 mov     eax, [ebp+this]
.text:00004CC0                 mov     [edx], eax
.text:00004CC2                 jmp     short loc_4CCB
.text:00004CC4 ; ---------------------------------------------------------------------------
.text:00004CC4
.text:00004CC4 loc_4CC4:                               ; CODE XREF: CSequentialInStreamWithCRC::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004CC4                 mov     eax, 80004002h
.text:00004CC9                 jmp     short loc_4CDC
.text:00004CCB ; ---------------------------------------------------------------------------
.text:00004CCB
.text:00004CCB loc_4CCB:                               ; CODE XREF: CSequentialInStreamWithCRC::QueryInterface(_GUID const &,void * *)+26j
.text:00004CCB                 mov     ecx, [ebp+this]
.text:00004CCE                 mov     edx, [ecx+4]
.text:00004CD1                 add     edx, 1
.text:00004CD4                 mov     eax, [ebp+this]
.text:00004CD7                 mov     [eax+4], edx
.text:00004CDA                 xor     eax, eax
.text:00004CDC
.text:00004CDC loc_4CDC:                               ; CODE XREF: CSequentialInStreamWithCRC::QueryInterface(_GUID const &,void * *)+2Dj
.text:00004CDC                 cmp     ebp, esp
.text:00004CDE                 call    __RTC_CheckEsp
.text:00004CE3                 pop     ebp
.text:00004CE4                 retn    0Ch
.text:00004CE4 ?QueryInterface@CSequentialInStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004CE4
.text:00004CE4 ; ---------------------------------------------------------------------------
.text:00004CE7                 align 4
.text:00004CE7 _text           ends
.text:00004CE7
.text:00004CE8 ; ===========================================================================
.text:00004CE8
.text:00004CE8 ; Segment type: Pure code
.text:00004CE8 ; Segment permissions: Read/Execute
.text:00004CE8 _text           segment para public 'CODE' use32
.text:00004CE8                 assume cs:_text
.text:00004CE8                 ;org 4CE8h
.text:00004CE8 ; COMDAT (pick any)
.text:00004CE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CE8
.text:00004CE8 ; =============== S U B R O U T I N E =======================================
.text:00004CE8
.text:00004CE8 ; Attributes: bp-based frame
.text:00004CE8
.text:00004CE8 ; unsigned __int32 __stdcall CSequentialInStreamWithCRC::AddRef(CSequentialInStreamWithCRC *this)
.text:00004CE8                 public ?AddRef@CSequentialInStreamWithCRC@@UAGKXZ
.text:00004CE8 ?AddRef@CSequentialInStreamWithCRC@@UAGKXZ proc near
.text:00004CE8                                         ; DATA XREF: .rdata:00004B5Co
.text:00004CE8
.text:00004CE8 var_4           = dword ptr -4
.text:00004CE8 this            = dword ptr  8
.text:00004CE8
.text:00004CE8                 push    ebp
.text:00004CE9                 mov     ebp, esp
.text:00004CEB                 push    ecx
.text:00004CEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CF3                 mov     eax, [ebp+this]
.text:00004CF6                 mov     ecx, [eax+4]
.text:00004CF9                 add     ecx, 1
.text:00004CFC                 mov     [ebp+var_4], ecx
.text:00004CFF                 mov     edx, [ebp+this]
.text:00004D02                 mov     eax, [ebp+var_4]
.text:00004D05                 mov     [edx+4], eax
.text:00004D08                 mov     eax, [ebp+var_4]
.text:00004D0B                 mov     esp, ebp
.text:00004D0D                 pop     ebp
.text:00004D0E                 retn    4
.text:00004D0E ?AddRef@CSequentialInStreamWithCRC@@UAGKXZ endp
.text:00004D0E
.text:00004D0E ; ---------------------------------------------------------------------------
.text:00004D11                 align 4
.text:00004D11 _text           ends
.text:00004D11
.text:00004D14 ; ===========================================================================
.text:00004D14
.text:00004D14 ; Segment type: Pure code
.text:00004D14 ; Segment permissions: Read/Execute
.text:00004D14 _text           segment para public 'CODE' use32
.text:00004D14                 assume cs:_text
.text:00004D14                 ;org 4D14h
.text:00004D14 ; COMDAT (pick any)
.text:00004D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D14
.text:00004D14 ; =============== S U B R O U T I N E =======================================
.text:00004D14
.text:00004D14 ; Attributes: bp-based frame
.text:00004D14
.text:00004D14 ; unsigned __int32 __stdcall CSequentialInStreamWithCRC::Release(CSequentialInStreamWithCRC *this)
.text:00004D14                 public ?Release@CSequentialInStreamWithCRC@@UAGKXZ
.text:00004D14 ?Release@CSequentialInStreamWithCRC@@UAGKXZ proc near
.text:00004D14                                         ; DATA XREF: .rdata:00004B60o
.text:00004D14
.text:00004D14 var_10          = dword ptr -10h
.text:00004D14 var_C           = dword ptr -0Ch
.text:00004D14 var_8           = dword ptr -8
.text:00004D14 var_4           = dword ptr -4
.text:00004D14 this            = dword ptr  8
.text:00004D14
.text:00004D14                 push    ebp
.text:00004D15                 mov     ebp, esp
.text:00004D17                 sub     esp, 10h
.text:00004D1A                 mov     eax, 0CCCCCCCCh
.text:00004D1F                 mov     [ebp+var_10], eax
.text:00004D22                 mov     [ebp+var_C], eax
.text:00004D25                 mov     [ebp+var_8], eax
.text:00004D28                 mov     [ebp+var_4], eax
.text:00004D2B                 mov     eax, [ebp+this]
.text:00004D2E                 mov     ecx, [eax+4]
.text:00004D31                 sub     ecx, 1
.text:00004D34                 mov     [ebp+var_C], ecx
.text:00004D37                 mov     edx, [ebp+this]
.text:00004D3A                 mov     eax, [ebp+var_C]
.text:00004D3D                 mov     [edx+4], eax
.text:00004D40                 cmp     [ebp+var_C], 0
.text:00004D44                 jz      short loc_4D4E
.text:00004D46                 mov     ecx, [ebp+this]
.text:00004D49                 mov     eax, [ecx+4]
.text:00004D4C                 jmp     short loc_4D78
.text:00004D4E ; ---------------------------------------------------------------------------
.text:00004D4E
.text:00004D4E loc_4D4E:                               ; CODE XREF: CSequentialInStreamWithCRC::Release(void)+30j
.text:00004D4E                 mov     edx, [ebp+this]
.text:00004D51                 mov     [ebp+var_8], edx
.text:00004D54                 mov     eax, [ebp+var_8]
.text:00004D57                 mov     [ebp+var_4], eax
.text:00004D5A                 cmp     [ebp+var_4], 0
.text:00004D5E                 jz      short loc_4D6F
.text:00004D60                 push    1
.text:00004D62                 mov     ecx, [ebp+var_4]
.text:00004D65                 call    ??_GCSequentialInStreamWithCRC@@QAEPAXI@Z ; CSequentialInStreamWithCRC::`scalar deleting destructor'(uint)
.text:00004D6A                 mov     [ebp+var_10], eax
.text:00004D6D                 jmp     short loc_4D76
.text:00004D6F ; ---------------------------------------------------------------------------
.text:00004D6F
.text:00004D6F loc_4D6F:                               ; CODE XREF: CSequentialInStreamWithCRC::Release(void)+4Aj
.text:00004D6F                 mov     [ebp+var_10], 0
.text:00004D76
.text:00004D76 loc_4D76:                               ; CODE XREF: CSequentialInStreamWithCRC::Release(void)+59j
.text:00004D76                 xor     eax, eax
.text:00004D78
.text:00004D78 loc_4D78:                               ; CODE XREF: CSequentialInStreamWithCRC::Release(void)+38j
.text:00004D78                 add     esp, 10h
.text:00004D7B                 cmp     ebp, esp
.text:00004D7D                 call    __RTC_CheckEsp
.text:00004D82                 mov     esp, ebp
.text:00004D84                 pop     ebp
.text:00004D85                 retn    4
.text:00004D85 ?Release@CSequentialInStreamWithCRC@@UAGKXZ endp
.text:00004D85
.text:00004D85 _text           ends
.text:00004D85
.text:00004D88 ; ===========================================================================
.text:00004D88
.text:00004D88 ; Segment type: Pure code
.text:00004D88 ; Segment permissions: Read/Execute
.text:00004D88 _text           segment para public 'CODE' use32
.text:00004D88                 assume cs:_text
.text:00004D88                 ;org 4D88h
.text:00004D88 ; COMDAT (pick any)
.text:00004D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D88
.text:00004D88 ; =============== S U B R O U T I N E =======================================
.text:00004D88
.text:00004D88 ; Attributes: bp-based frame
.text:00004D88
.text:00004D88 ; public: void * __thiscall CSequentialInStreamWithCRC::`scalar deleting destructor'(unsigned int)
.text:00004D88                 public ??_GCSequentialInStreamWithCRC@@QAEPAXI@Z
.text:00004D88 ??_GCSequentialInStreamWithCRC@@QAEPAXI@Z proc near
.text:00004D88                                         ; CODE XREF: CSequentialInStreamWithCRC::Release(void)+51p
.text:00004D88
.text:00004D88 var_4           = dword ptr -4
.text:00004D88 arg_0           = dword ptr  8
.text:00004D88
.text:00004D88                 push    ebp
.text:00004D89                 mov     ebp, esp
.text:00004D8B                 push    ecx
.text:00004D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D93                 mov     [ebp+var_4], ecx
.text:00004D96                 mov     ecx, [ebp+var_4] ; this
.text:00004D99                 call    ??1CSequentialInStreamWithCRC@@QAE@XZ ; CSequentialInStreamWithCRC::~CSequentialInStreamWithCRC(void)
.text:00004D9E                 mov     eax, [ebp+arg_0]
.text:00004DA1                 and     eax, 1
.text:00004DA4                 jz      short loc_4DB2
.text:00004DA6                 mov     ecx, [ebp+var_4]
.text:00004DA9                 push    ecx             ; void *
.text:00004DAA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004DAF                 add     esp, 4
.text:00004DB2
.text:00004DB2 loc_4DB2:                               ; CODE XREF: CSequentialInStreamWithCRC::`scalar deleting destructor'(uint)+1Cj
.text:00004DB2                 mov     eax, [ebp+var_4]
.text:00004DB5                 add     esp, 4
.text:00004DB8                 cmp     ebp, esp
.text:00004DBA                 call    __RTC_CheckEsp
.text:00004DBF                 mov     esp, ebp
.text:00004DC1                 pop     ebp
.text:00004DC2                 retn    4
.text:00004DC2 ??_GCSequentialInStreamWithCRC@@QAEPAXI@Z endp
.text:00004DC2
.text:00004DC2 ; ---------------------------------------------------------------------------
.text:00004DC5                 align 4
.text:00004DC5 _text           ends
.text:00004DC5
.text:00004DC8 ; ===========================================================================
.text:00004DC8
.text:00004DC8 ; Segment type: Pure code
.text:00004DC8 ; Segment permissions: Read/Execute
.text:00004DC8 _text           segment para public 'CODE' use32
.text:00004DC8                 assume cs:_text
.text:00004DC8                 ;org 4DC8h
.text:00004DC8 ; COMDAT (pick any)
.text:00004DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DC8
.text:00004DC8 ; =============== S U B R O U T I N E =======================================
.text:00004DC8
.text:00004DC8 ; Attributes: bp-based frame
.text:00004DC8
.text:00004DC8 ; _DWORD __thiscall CSequentialInStreamWithCRC::~CSequentialInStreamWithCRC(CSequentialInStreamWithCRC *__hidden this)
.text:00004DC8                 public ??1CSequentialInStreamWithCRC@@QAE@XZ
.text:00004DC8 ??1CSequentialInStreamWithCRC@@QAE@XZ proc near
.text:00004DC8                                         ; CODE XREF: CSequentialInStreamWithCRC::`scalar deleting destructor'(uint)+11p
.text:00004DC8
.text:00004DC8 var_4           = dword ptr -4
.text:00004DC8
.text:00004DC8                 push    ebp
.text:00004DC9                 mov     ebp, esp
.text:00004DCB                 push    ecx
.text:00004DCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DD3                 mov     [ebp+var_4], ecx
.text:00004DD6                 mov     ecx, [ebp+var_4]
.text:00004DD9                 add     ecx, 8
.text:00004DDC                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004DE1                 add     esp, 4
.text:00004DE4                 cmp     ebp, esp
.text:00004DE6                 call    __RTC_CheckEsp
.text:00004DEB                 mov     esp, ebp
.text:00004DED                 pop     ebp
.text:00004DEE                 retn
.text:00004DEE ??1CSequentialInStreamWithCRC@@QAE@XZ endp
.text:00004DEE
.text:00004DEE ; ---------------------------------------------------------------------------
.text:00004DEF                 align 10h
.text:00004DEF _text           ends
.text:00004DEF
.text:00004DF0 ; ===========================================================================
.text:00004DF0
.text:00004DF0 ; Segment type: Pure code
.text:00004DF0 ; Segment permissions: Read/Execute
.text:00004DF0 _text           segment para public 'CODE' use32
.text:00004DF0                 assume cs:_text
.text:00004DF0                 ;org 4DF0h
.text:00004DF0 ; COMDAT (pick any)
.text:00004DF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DF0
.text:00004DF0 ; =============== S U B R O U T I N E =======================================
.text:00004DF0
.text:00004DF0 ; Attributes: bp-based frame
.text:00004DF0
.text:00004DF0 ; _DWORD __thiscall NArchive::NGz::CHandler::CHandler(NArchive::NGz::CHandler *__hidden this)
.text:00004DF0                 public ??0CHandler@NGz@NArchive@@QAE@XZ
.text:00004DF0 ??0CHandler@NGz@NArchive@@QAE@XZ proc near
.text:00004DF0                                         ; CODE XREF: NArchive::NGz::CreateArc(void)+5Ap
.text:00004DF0                                         ; NArchive::NGz::CreateArcOut(void)+56p
.text:00004DF0
.text:00004DF0 var_1C          = dword ptr -1Ch
.text:00004DF0 var_18          = dword ptr -18h
.text:00004DF0 var_14          = dword ptr -14h
.text:00004DF0 var_10          = dword ptr -10h
.text:00004DF0 var_C           = dword ptr -0Ch
.text:00004DF0 var_4           = dword ptr -4
.text:00004DF0
.text:00004DF0                 push    ebp
.text:00004DF1                 mov     ebp, esp
.text:00004DF3                 push    0FFFFFFFFh
.text:00004DF5                 push    offset __ehhandler$??0CHandler@NGz@NArchive@@QAE@XZ
.text:00004DFA                 mov     eax, large fs:0
.text:00004E00                 push    eax
.text:00004E01                 sub     esp, 10h
.text:00004E04                 mov     eax, 0CCCCCCCCh
.text:00004E09                 mov     [ebp+var_1C], eax
.text:00004E0C                 mov     [ebp+var_18], eax
.text:00004E0F                 mov     [ebp+var_14], eax
.text:00004E12                 mov     [ebp+var_10], eax
.text:00004E15                 mov     eax, dword ptr ds:___security_cookie
.text:00004E1A                 xor     eax, ebp
.text:00004E1C                 push    eax
.text:00004E1D                 lea     eax, [ebp+var_C]
.text:00004E20                 mov     large fs:0, eax
.text:00004E26                 mov     [ebp+var_10], ecx
.text:00004E29                 mov     ecx, [ebp+var_10] ; this
.text:00004E2C                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00004E31                 mov     ecx, [ebp+var_10]
.text:00004E34                 add     ecx, 4          ; this
.text:00004E37                 call    ??0IArchiveOpenSeq@@QAE@XZ ; IArchiveOpenSeq::IArchiveOpenSeq(void)
.text:00004E3C                 mov     ecx, [ebp+var_10]
.text:00004E3F                 add     ecx, 8          ; this
.text:00004E42                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:00004E47                 mov     ecx, [ebp+var_10]
.text:00004E4A                 add     ecx, 0Ch        ; this
.text:00004E4D                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:00004E52                 mov     ecx, [ebp+var_10]
.text:00004E55                 add     ecx, 10h        ; this
.text:00004E58                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004E5D                 mov     eax, [ebp+var_10]
.text:00004E60                 mov     dword ptr [eax], offset ??_7CHandler@NGz@NArchive@@6BIInArchive@@@ ; const NArchive::NGz::CHandler::`vftable'{for `IInArchive'}
.text:00004E66                 mov     ecx, [ebp+var_10]
.text:00004E69                 mov     dword ptr [ecx+4], offset ??_7CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NGz::CHandler::`vftable'{for `IArchiveOpenSeq'}
.text:00004E70                 mov     edx, [ebp+var_10]
.text:00004E73                 mov     dword ptr [edx+8], offset ??_7CHandler@NGz@NArchive@@6BIOutArchive@@@ ; const NArchive::NGz::CHandler::`vftable'{for `IOutArchive'}
.text:00004E7A                 mov     eax, [ebp+var_10]
.text:00004E7D                 mov     dword ptr [eax+0Ch], offset ??_7CHandler@NGz@NArchive@@6BISetProperties@@@ ; const NArchive::NGz::CHandler::`vftable'{for `ISetProperties'}
.text:00004E84                 mov     ecx, [ebp+var_10]
.text:00004E87                 add     ecx, 14h        ; this
.text:00004E8A                 call    ??0CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::CItem(void)
.text:00004E8F                 mov     [ebp+var_4], 0
.text:00004E96                 mov     ecx, [ebp+var_10]
.text:00004E99                 add     ecx, 68h ; 'h'
.text:00004E9C                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00004EA1                 mov     byte ptr [ebp+var_4], 1
.text:00004EA5                 mov     ecx, [ebp+var_10]
.text:00004EA8                 add     ecx, 6Ch ; 'l'
.text:00004EAB                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00004EB0                 mov     byte ptr [ebp+var_4], 2
.text:00004EB4                 mov     ecx, [ebp+var_10]
.text:00004EB7                 add     ecx, 74h ; 't'  ; this
.text:00004EBA                 call    ??0CSingleMethodProps@NArchive@@QAE@XZ ; NArchive::CSingleMethodProps::CSingleMethodProps(void)
.text:00004EBF                 mov     byte ptr [ebp+var_4], 3
.text:00004EC3                 push    0D70h           ; unsigned int
.text:00004EC8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00004ECD                 add     esp, 4
.text:00004ED0                 mov     [ebp+var_18], eax
.text:00004ED3                 mov     byte ptr [ebp+var_4], 4
.text:00004ED7                 cmp     [ebp+var_18], 0
.text:00004EDB                 jz      short loc_4EEA
.text:00004EDD                 mov     ecx, [ebp+var_18] ; this
.text:00004EE0                 call    ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)
.text:00004EE5                 mov     [ebp+var_1C], eax
.text:00004EE8                 jmp     short loc_4EF1
.text:00004EEA ; ---------------------------------------------------------------------------
.text:00004EEA
.text:00004EEA loc_4EEA:                               ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+EBj
.text:00004EEA                 mov     [ebp+var_1C], 0
.text:00004EF1
.text:00004EF1 loc_4EF1:                               ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+F8j
.text:00004EF1                 mov     ecx, [ebp+var_1C]
.text:00004EF4                 mov     [ebp+var_14], ecx
.text:00004EF7                 mov     byte ptr [ebp+var_4], 3
.text:00004EFB                 mov     edx, [ebp+var_10]
.text:00004EFE                 mov     eax, [ebp+var_14]
.text:00004F01                 mov     [edx+70h], eax
.text:00004F04                 mov     ecx, [ebp+var_10]
.text:00004F07                 mov     edx, [ecx+70h]
.text:00004F0A                 push    edx
.text:00004F0B                 mov     ecx, [ebp+var_10]
.text:00004F0E                 add     ecx, 6Ch ; 'l'
.text:00004F11                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00004F16                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F1D                 mov     eax, [ebp+var_10]
.text:00004F20                 mov     ecx, [ebp+var_C]
.text:00004F23                 mov     large fs:0, ecx
.text:00004F2A                 pop     ecx
.text:00004F2B                 add     esp, 1Ch
.text:00004F2E                 cmp     ebp, esp
.text:00004F30                 call    __RTC_CheckEsp
.text:00004F35                 mov     esp, ebp
.text:00004F37                 pop     ebp
.text:00004F38                 retn
.text:00004F38 ??0CHandler@NGz@NArchive@@QAE@XZ endp
.text:00004F38
.text:00004F38 ; ---------------------------------------------------------------------------
.text:00004F39                 align 4
.text:00004F39 _text           ends
.text:00004F39
.text$x:00004F3C ; ===========================================================================
.text$x:00004F3C
.text$x:00004F3C ; Segment type: Pure code
.text$x:00004F3C ; Segment permissions: Read/Execute
.text$x:00004F3C _text$x         segment para public 'CODE' use32
.text$x:00004F3C                 assume cs:_text$x
.text$x:00004F3C                 ;org 4F3Ch
.text$x:00004F3C ; COMDAT (pick associative to section at 4DF0)
.text$x:00004F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F3C
.text$x:00004F3C ; =============== S U B R O U T I N E =======================================
.text$x:00004F3C
.text$x:00004F3C
.text$x:00004F3C __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$0 proc near
.text$x:00004F3C                                         ; DATA XREF: .xdata$x:00005030o
.text$x:00004F3C                 mov     ecx, [ebp-10h]
.text$x:00004F3F                 add     ecx, 14h        ; this
.text$x:00004F42                 jmp     ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text$x:00004F42 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$0 endp
.text$x:00004F42
.text$x:00004F47
.text$x:00004F47 ; =============== S U B R O U T I N E =======================================
.text$x:00004F47
.text$x:00004F47
.text$x:00004F47 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$1 proc near
.text$x:00004F47                                         ; DATA XREF: .xdata$x:00005038o
.text$x:00004F47                 mov     ecx, [ebp-10h]
.text$x:00004F4A                 add     ecx, 68h ; 'h'
.text$x:00004F4D                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00004F4D __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$1 endp
.text$x:00004F4D
.text$x:00004F52
.text$x:00004F52 ; =============== S U B R O U T I N E =======================================
.text$x:00004F52
.text$x:00004F52
.text$x:00004F52 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$2 proc near
.text$x:00004F52                                         ; DATA XREF: .xdata$x:00005040o
.text$x:00004F52                 mov     ecx, [ebp-10h]
.text$x:00004F55                 add     ecx, 6Ch ; 'l'
.text$x:00004F58                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00004F58 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$2 endp
.text$x:00004F58
.text$x:00004F5D
.text$x:00004F5D ; =============== S U B R O U T I N E =======================================
.text$x:00004F5D
.text$x:00004F5D
.text$x:00004F5D __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$3 proc near
.text$x:00004F5D                                         ; DATA XREF: .xdata$x:00005048o
.text$x:00004F5D                 mov     ecx, [ebp-10h]
.text$x:00004F60                 add     ecx, 74h ; 't'  ; this
.text$x:00004F63                 jmp     ??1CSingleMethodProps@NArchive@@QAE@XZ ; NArchive::CSingleMethodProps::~CSingleMethodProps(void)
.text$x:00004F63 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$3 endp
.text$x:00004F63
.text$x:00004F68
.text$x:00004F68 ; =============== S U B R O U T I N E =======================================
.text$x:00004F68
.text$x:00004F68
.text$x:00004F68 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$4 proc near
.text$x:00004F68                                         ; DATA XREF: .xdata$x:00005050o
.text$x:00004F68                 mov     eax, [ebp-18h]
.text$x:00004F6B                 push    eax             ; void *
.text$x:00004F6C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00004F71                 pop     ecx
.text$x:00004F72                 retn
.text$x:00004F72 __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$4 endp
.text$x:00004F72
.text$x:00004F73
.text$x:00004F73 ; =============== S U B R O U T I N E =======================================
.text$x:00004F73
.text$x:00004F73
.text$x:00004F73 __ehhandler$??0CHandler@NGz@NArchive@@QAE@XZ proc near
.text$x:00004F73                                         ; DATA XREF: NArchive::NGz::CHandler::CHandler(void)+5o
.text$x:00004F73
.text$x:00004F73 arg_4           = dword ptr  8
.text$x:00004F73
.text$x:00004F73                 mov     edx, [esp+arg_4]
.text$x:00004F77                 lea     eax, [edx+0Ch]
.text$x:00004F7A                 mov     ecx, [edx-14h]
.text$x:00004F7D                 xor     ecx, eax
.text$x:00004F7F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F84                 mov     eax, offset __ehfuncinfo$??0CHandler@NGz@NArchive@@QAE@XZ
.text$x:00004F89                 jmp     ___CxxFrameHandler3
.text$x:00004F89 __ehhandler$??0CHandler@NGz@NArchive@@QAE@XZ endp
.text$x:00004F89
.text$x:00004F89 ; ---------------------------------------------------------------------------
.text$x:00004F8E                 align 10h
.text$x:00004F8E _text$x         ends
.text$x:00004F8E
.rdata:00004F90 ; ===========================================================================
.rdata:00004F90
.rdata:00004F90 ; Segment type: Pure data
.rdata:00004F90 ; Segment permissions: Read
.rdata:00004F90 _rdata          segment dword public 'DATA' use32
.rdata:00004F90                 assume cs:_rdata
.rdata:00004F90                 ;org 4F90h
.rdata:00004F90 ; COMDAT (pick largest)
.rdata:00004F90                 dd offset ??_R4CHandler@NGz@NArchive@@6BISetProperties@@@ ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00004F94                 public ??_7CHandler@NGz@NArchive@@6BISetProperties@@@
.rdata:00004F94 ; const NArchive::NGz::CHandler::`vftable'{for `ISetProperties'}
.rdata:00004F94 ??_7CHandler@NGz@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@NGz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00004F94                                         ; DATA XREF: NArchive::NGz::CHandler::CHandler(void)+8Do
.rdata:00004F94                                         ; [thunk]:NArchive::NGz::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00004F98                 dd offset ?AddRef@CHandler@NGz@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NGz::CHandler::AddRef`adjustor{12}' (void)
.rdata:00004F9C                 dd offset ?Release@CHandler@NGz@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NGz::CHandler::Release`adjustor{12}' (void)
.rdata:00004FA0                 dd offset ?SetProperties@CHandler@NGz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NGz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00004FA0 _rdata          ends
.rdata:00004FA0
.rdata:00004FA4 ; ===========================================================================
.rdata:00004FA4
.rdata:00004FA4 ; Segment type: Pure data
.rdata:00004FA4 ; Segment permissions: Read
.rdata:00004FA4 _rdata          segment dword public 'DATA' use32
.rdata:00004FA4                 assume cs:_rdata
.rdata:00004FA4                 ;org 4FA4h
.rdata:00004FA4 ; COMDAT (pick largest)
.rdata:00004FA4                 dd offset ??_R4CHandler@NGz@NArchive@@6BIOutArchive@@@ ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:00004FA8                 public ??_7CHandler@NGz@NArchive@@6BIOutArchive@@@
.rdata:00004FA8 ; const NArchive::NGz::CHandler::`vftable'{for `IOutArchive'}
.rdata:00004FA8 ??_7CHandler@NGz@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@NGz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00004FA8                                         ; DATA XREF: NArchive::NGz::CHandler::CHandler(void)+83o
.rdata:00004FA8                                         ; [thunk]:NArchive::NGz::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00004FAC                 dd offset ?AddRef@CHandler@NGz@NArchive@@W7AGKXZ ; [thunk]:NArchive::NGz::CHandler::AddRef`adjustor{8}' (void)
.rdata:00004FB0                 dd offset ?Release@CHandler@NGz@NArchive@@W7AGKXZ ; [thunk]:NArchive::NGz::CHandler::Release`adjustor{8}' (void)
.rdata:00004FB4                 dd offset ?UpdateItems@CHandler@NGz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:00004FB8                 dd offset ?GetFileTimeType@CHandler@NGz@NArchive@@UAGJPAI@Z ; NArchive::NGz::CHandler::GetFileTimeType(uint *)
.rdata:00004FB8 _rdata          ends
.rdata:00004FB8
.rdata:00004FBC ; ===========================================================================
.rdata:00004FBC
.rdata:00004FBC ; Segment type: Pure data
.rdata:00004FBC ; Segment permissions: Read
.rdata:00004FBC _rdata          segment dword public 'DATA' use32
.rdata:00004FBC                 assume cs:_rdata
.rdata:00004FBC                 ;org 4FBCh
.rdata:00004FBC ; COMDAT (pick largest)
.rdata:00004FBC                 dd offset ??_R4CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata:00004FC0                 public ??_7CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@
.rdata:00004FC0 ; const NArchive::NGz::CHandler::`vftable'{for `IArchiveOpenSeq'}
.rdata:00004FC0 ??_7CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@ dd offset ?QueryInterface@CHandler@NGz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00004FC0                                         ; DATA XREF: NArchive::NGz::CHandler::CHandler(void)+79o
.rdata:00004FC0                                         ; [thunk]:NArchive::NGz::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00004FC4                 dd offset ?AddRef@CHandler@NGz@NArchive@@W3AGKXZ ; [thunk]:NArchive::NGz::CHandler::AddRef`adjustor{4}' (void)
.rdata:00004FC8                 dd offset ?Release@CHandler@NGz@NArchive@@W3AGKXZ ; [thunk]:NArchive::NGz::CHandler::Release`adjustor{4}' (void)
.rdata:00004FCC                 dd offset ?OpenSeq@CHandler@NGz@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NGz::CHandler::OpenSeq(ISequentialInStream *)
.rdata:00004FCC _rdata          ends
.rdata:00004FCC
.rdata:00004FD0 ; ===========================================================================
.rdata:00004FD0
.rdata:00004FD0 ; Segment type: Pure data
.rdata:00004FD0 ; Segment permissions: Read
.rdata:00004FD0 _rdata          segment dword public 'DATA' use32
.rdata:00004FD0                 assume cs:_rdata
.rdata:00004FD0                 ;org 4FD0h
.rdata:00004FD0 ; COMDAT (pick largest)
.rdata:00004FD0                 dd offset ??_R4CHandler@NGz@NArchive@@6BIInArchive@@@ ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:00004FD4                 public ??_7CHandler@NGz@NArchive@@6BIInArchive@@@
.rdata:00004FD4 ; const NArchive::NGz::CHandler::`vftable'{for `IInArchive'}
.rdata:00004FD4 ??_7CHandler@NGz@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004FD4                                         ; DATA XREF: NArchive::NGz::CHandler::CHandler(void)+70o
.rdata:00004FD4                                         ; NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:00004FD8                 dd offset ?AddRef@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::AddRef(void)
.rdata:00004FDC                 dd offset ?Release@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::Release(void)
.rdata:00004FE0                 dd offset ?Open@CHandler@NGz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00004FE4                 dd offset ?Close@CHandler@NGz@NArchive@@UAGJXZ ; NArchive::NGz::CHandler::Close(void)
.rdata:00004FE8                 dd offset ?GetNumberOfItems@CHandler@NGz@NArchive@@UAGJPAI@Z ; NArchive::NGz::CHandler::GetNumberOfItems(uint *)
.rdata:00004FEC                 dd offset ?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:00004FF0                 dd offset ?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00004FF4                 dd offset ?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:00004FF8                 dd offset ?GetNumberOfProperties@CHandler@NGz@NArchive@@UAGJPAI@Z ; NArchive::NGz::CHandler::GetNumberOfProperties(uint *)
.rdata:00004FFC                 dd offset ?GetPropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NGz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00005000                 dd offset ?GetNumberOfArchiveProperties@CHandler@NGz@NArchive@@UAGJPAI@Z ; NArchive::NGz::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00005004                 dd offset ?GetArchivePropertyInfo@CHandler@NGz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NGz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00005004 _rdata          ends
.rdata:00005004
.xdata$x:00005008 ; ===========================================================================
.xdata$x:00005008
.xdata$x:00005008 ; Segment type: Pure data
.xdata$x:00005008 ; Segment permissions: Read
.xdata$x:00005008 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005008                 assume cs:_xdata$x
.xdata$x:00005008                 ;org 5008h
.xdata$x:00005008 ; COMDAT (pick associative to section at 4DF0)
.xdata$x:00005008 __ehfuncinfo$??0CHandler@NGz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005008                                         ; DATA XREF: __ehhandler$??0CHandler@NGz@NArchive@@QAE@XZ+11o
.xdata$x:00005009                 db    5
.xdata$x:0000500A                 db  93h ; Ã´
.xdata$x:0000500B                 db  19h
.xdata$x:0000500C                 db    5
.xdata$x:0000500D                 db    0
.xdata$x:0000500E                 db    0
.xdata$x:0000500F                 db    0
.xdata$x:00005010                 dd offset __unwindtable$??0CHandler@NGz@NArchive@@QAE@XZ
.xdata$x:00005014                 db    0
.xdata$x:00005015                 db    0
.xdata$x:00005016                 db    0
.xdata$x:00005017                 db    0
.xdata$x:00005018                 db    0
.xdata$x:00005019                 db    0
.xdata$x:0000501A                 db    0
.xdata$x:0000501B                 db    0
.xdata$x:0000501C                 db    0
.xdata$x:0000501D                 db    0
.xdata$x:0000501E                 db    0
.xdata$x:0000501F                 db    0
.xdata$x:00005020                 db    0
.xdata$x:00005021                 db    0
.xdata$x:00005022                 db    0
.xdata$x:00005023                 db    0
.xdata$x:00005024                 db    0
.xdata$x:00005025                 db    0
.xdata$x:00005026                 db    0
.xdata$x:00005027                 db    0
.xdata$x:00005028                 db    1
.xdata$x:00005029                 db    0
.xdata$x:0000502A                 db    0
.xdata$x:0000502B                 db    0
.xdata$x:0000502C __unwindtable$??0CHandler@NGz@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000502C                                         ; DATA XREF: .xdata$x:00005010o
.xdata$x:0000502D                 db 0FFh
.xdata$x:0000502E                 db 0FFh
.xdata$x:0000502F                 db 0FFh
.xdata$x:00005030                 dd offset __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$0
.xdata$x:00005034                 align 8
.xdata$x:00005038                 dd offset __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$1
.xdata$x:0000503C                 db    1
.xdata$x:0000503D                 db    0
.xdata$x:0000503E                 db    0
.xdata$x:0000503F                 db    0
.xdata$x:00005040                 dd offset __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$2
.xdata$x:00005044                 db    2
.xdata$x:00005045                 db    0
.xdata$x:00005046                 db    0
.xdata$x:00005047                 db    0
.xdata$x:00005048                 dd offset __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$3
.xdata$x:0000504C                 db    3
.xdata$x:0000504D                 db    0
.xdata$x:0000504E                 db    0
.xdata$x:0000504F                 db    0
.xdata$x:00005050                 dd offset __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$4
.xdata$x:00005050 _xdata$x        ends
.xdata$x:00005050
.rdata$r:00005054 ; ===========================================================================
.rdata$r:00005054
.rdata$r:00005054 ; Segment type: Pure data
.rdata$r:00005054 ; Segment permissions: Read
.rdata$r:00005054 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005054                 assume cs:_rdata$r
.rdata$r:00005054                 ;org 5054h
.rdata$r:00005054 ; COMDAT (pick any)
.rdata$r:00005054                 public ??_R4CHandler@NGz@NArchive@@6BIInArchive@@@
.rdata$r:00005054 ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:00005054 ??_R4CHandler@NGz@NArchive@@6BIInArchive@@@ db    0
.rdata$r:00005054                                         ; DATA XREF: .rdata:00004FD0o
.rdata$r:00005055                 db    0
.rdata$r:00005056                 db    0
.rdata$r:00005057                 db    0
.rdata$r:00005058                 db    0
.rdata$r:00005059                 db    0
.rdata$r:0000505A                 db    0
.rdata$r:0000505B                 db    0
.rdata$r:0000505C                 db    0
.rdata$r:0000505D                 db    0
.rdata$r:0000505E                 db    0
.rdata$r:0000505F                 db    0
.rdata$r:00005060                 dd offset ??_R0?AVCHandler@NGz@NArchive@@@8 ; NArchive::NGz::CHandler `RTTI Type Descriptor'
.rdata$r:00005064                 dd offset ??_R3CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005064 _rdata$r        ends
.rdata$r:00005064
.data:00005068 ; ===========================================================================
.data:00005068
.data:00005068 ; Segment type: Pure data
.data:00005068 ; Segment permissions: Read/Write
.data:00005068 _data           segment dword public 'DATA' use32
.data:00005068                 assume cs:_data
.data:00005068                 ;org 5068h
.data:00005068 ; COMDAT (pick any)
.data:00005068                 public ??_R0?AVCHandler@NGz@NArchive@@@8
.data:00005068 ; class NArchive::NGz::CHandler `RTTI Type Descriptor'
.data:00005068 ??_R0?AVCHandler@NGz@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005068                                         ; DATA XREF: .rdata$r:00005060o
.data:00005068                                         ; .rdata$r:NArchive::NGz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005068                                         ; const type_info::`vftable'
.data:0000506C                 align 10h
.data:00005070 a_?avchandler@n db '.?AVCHandler@NGz@NArchive@@',0
.data:00005070 _data           ends
.data:00005070
.rdata$r:0000508C ; ===========================================================================
.rdata$r:0000508C
.rdata$r:0000508C ; Segment type: Pure data
.rdata$r:0000508C ; Segment permissions: Read
.rdata$r:0000508C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000508C                 assume cs:_rdata$r
.rdata$r:0000508C                 ;org 508Ch
.rdata$r:0000508C ; COMDAT (pick any)
.rdata$r:0000508C                 public ??_R3CHandler@NGz@NArchive@@8
.rdata$r:0000508C ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000508C ??_R3CHandler@NGz@NArchive@@8 db    0   ; DATA XREF: .rdata$r:00005064o
.rdata$r:0000508C                                         ; .rdata$r:000050E0o ...
.rdata$r:0000508D                 db    0
.rdata$r:0000508E                 db    0
.rdata$r:0000508F                 db    0
.rdata$r:00005090                 db    1
.rdata$r:00005091                 db    0
.rdata$r:00005092                 db    0
.rdata$r:00005093                 db    0
.rdata$r:00005094                 db  0Ah
.rdata$r:00005095                 db    0
.rdata$r:00005096                 db    0
.rdata$r:00005097                 db    0
.rdata$r:00005098                 dd offset ??_R2CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Base Class Array'
.rdata$r:00005098 _rdata$r        ends
.rdata$r:00005098
.rdata$r:0000509C ; ===========================================================================
.rdata$r:0000509C
.rdata$r:0000509C ; Segment type: Pure data
.rdata$r:0000509C ; Segment permissions: Read
.rdata$r:0000509C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000509C                 assume cs:_rdata$r
.rdata$r:0000509C                 ;org 509Ch
.rdata$r:0000509C ; COMDAT (pick any)
.rdata$r:0000509C                 public ??_R2CHandler@NGz@NArchive@@8
.rdata$r:0000509C ; NArchive::NGz::CHandler::`RTTI Base Class Array'
.rdata$r:0000509C ??_R2CHandler@NGz@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NGz@NArchive@@8
.rdata$r:0000509C                                         ; DATA XREF: .rdata$r:00005098o
.rdata$r:0000509C                                         ; NArchive::NGz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000050A0                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000050A4                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000050A8                 dd offset ??_R13?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000050AC                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000050B0                 dd offset ??_R17?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000050B4                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:000050B8                 dd offset ??_R1M@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:000050BC                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:000050C0                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:000050C4                 db    0
.rdata$r:000050C5                 align 4
.rdata$r:000050C5 _rdata$r        ends
.rdata$r:000050C5
.rdata$r:000050C8 ; ===========================================================================
.rdata$r:000050C8
.rdata$r:000050C8 ; Segment type: Pure data
.rdata$r:000050C8 ; Segment permissions: Read
.rdata$r:000050C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000050C8                 assume cs:_rdata$r
.rdata$r:000050C8                 ;org 50C8h
.rdata$r:000050C8 ; COMDAT (pick any)
.rdata$r:000050C8                 public ??_R1A@?0A@EA@CHandler@NGz@NArchive@@8
.rdata$r:000050C8 ; NArchive::NGz::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000050C8 ??_R1A@?0A@EA@CHandler@NGz@NArchive@@8 dd offset ??_R0?AVCHandler@NGz@NArchive@@@8
.rdata$r:000050C8                                         ; DATA XREF: .rdata$r:NArchive::NGz::CHandler::`RTTI Base Class Array'o
.rdata$r:000050C8                                         ; NArchive::NGz::CHandler `RTTI Type Descriptor'
.rdata$r:000050CC                 db    9
.rdata$r:000050CD                 db    0
.rdata$r:000050CE                 db    0
.rdata$r:000050CF                 db    0
.rdata$r:000050D0                 db    0
.rdata$r:000050D1                 db    0
.rdata$r:000050D2                 db    0
.rdata$r:000050D3                 db    0
.rdata$r:000050D4                 db 0FFh
.rdata$r:000050D5                 db 0FFh
.rdata$r:000050D6                 db 0FFh
.rdata$r:000050D7                 db 0FFh
.rdata$r:000050D8                 db    0
.rdata$r:000050D9                 db    0
.rdata$r:000050DA                 db    0
.rdata$r:000050DB                 db    0
.rdata$r:000050DC                 db  40h ; @
.rdata$r:000050DD                 db    0
.rdata$r:000050DE                 db    0
.rdata$r:000050DF                 db    0
.rdata$r:000050E0                 dd offset ??_R3CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000050E0 _rdata$r        ends
.rdata$r:000050E0
.rdata$r:000050E4 ; ===========================================================================
.rdata$r:000050E4
.rdata$r:000050E4 ; Segment type: Pure data
.rdata$r:000050E4 ; Segment permissions: Read
.rdata$r:000050E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000050E4                 assume cs:_rdata$r
.rdata$r:000050E4                 ;org 50E4h
.rdata$r:000050E4 ; COMDAT (pick any)
.rdata$r:000050E4                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000050E4 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000050E4 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:000050E4                                         ; DATA XREF: .rdata$r:000050A0o
.rdata$r:000050E4                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:000050E4                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:000050E8                 db    1
.rdata$r:000050E9                 db    0
.rdata$r:000050EA                 db    0
.rdata$r:000050EB                 db    0
.rdata$r:000050EC                 db    0
.rdata$r:000050ED                 db    0
.rdata$r:000050EE                 db    0
.rdata$r:000050EF                 db    0
.rdata$r:000050F0                 db 0FFh
.rdata$r:000050F1                 db 0FFh
.rdata$r:000050F2                 db 0FFh
.rdata$r:000050F3                 db 0FFh
.rdata$r:000050F4                 db    0
.rdata$r:000050F5                 db    0
.rdata$r:000050F6                 db    0
.rdata$r:000050F7                 db    0
.rdata$r:000050F8                 db  40h ; @
.rdata$r:000050F9                 db    0
.rdata$r:000050FA                 db    0
.rdata$r:000050FB                 db    0
.rdata$r:000050FC                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000050FC _rdata$r        ends
.rdata$r:000050FC
.data:00005100 ; ===========================================================================
.data:00005100
.data:00005100 ; Segment type: Pure data
.data:00005100 ; Segment permissions: Read/Write
.data:00005100 _data           segment dword public 'DATA' use32
.data:00005100                 assume cs:_data
.data:00005100                 ;org 5100h
.data:00005100 ; COMDAT (pick any)
.data:00005100                 public ??_R0?AUIInArchive@@@8
.data:00005100 ; struct IInArchive `RTTI Type Descriptor'
.data:00005100 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005100                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005100                                         ; .rdata$r:0000621Co
.data:00005100                                         ; const type_info::`vftable'
.data:00005104                 align 8
.data:00005108 a_?auiinarchive db '.?AUIInArchive@@',0
.data:00005119                 align 4
.data:00005119 _data           ends
.data:00005119
.rdata$r:0000511C ; ===========================================================================
.rdata$r:0000511C
.rdata$r:0000511C ; Segment type: Pure data
.rdata$r:0000511C ; Segment permissions: Read
.rdata$r:0000511C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000511C                 assume cs:_rdata$r
.rdata$r:0000511C                 ;org 511Ch
.rdata$r:0000511C ; COMDAT (pick any)
.rdata$r:0000511C                 public ??_R3IInArchive@@8
.rdata$r:0000511C ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000511C ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000050FCo
.rdata$r:0000511C                                         ; .rdata$r:00006220o
.rdata$r:0000511D                 db    0
.rdata$r:0000511E                 db    0
.rdata$r:0000511F                 db    0
.rdata$r:00005120                 db    0
.rdata$r:00005121                 db    0
.rdata$r:00005122                 db    0
.rdata$r:00005123                 db    0
.rdata$r:00005124                 db    2
.rdata$r:00005125                 db    0
.rdata$r:00005126                 db    0
.rdata$r:00005127                 db    0
.rdata$r:00005128                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00005128 _rdata$r        ends
.rdata$r:00005128
.rdata$r:0000512C ; ===========================================================================
.rdata$r:0000512C
.rdata$r:0000512C ; Segment type: Pure data
.rdata$r:0000512C ; Segment permissions: Read
.rdata$r:0000512C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000512C                 assume cs:_rdata$r
.rdata$r:0000512C                 ;org 512Ch
.rdata$r:0000512C ; COMDAT (pick any)
.rdata$r:0000512C                 public ??_R2IInArchive@@8
.rdata$r:0000512C ; IInArchive::`RTTI Base Class Array'
.rdata$r:0000512C ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:0000512C                                         ; DATA XREF: .rdata$r:00005128o
.rdata$r:0000512C                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005130                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005134                 db    0
.rdata$r:00005135                 align 4
.rdata$r:00005135 _rdata$r        ends
.rdata$r:00005135
.rdata$r:00005138 ; ===========================================================================
.rdata$r:00005138
.rdata$r:00005138 ; Segment type: Pure data
.rdata$r:00005138 ; Segment permissions: Read
.rdata$r:00005138 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005138                 assume cs:_rdata$r
.rdata$r:00005138                 ;org 5138h
.rdata$r:00005138 ; COMDAT (pick any)
.rdata$r:00005138                 public ??_R13?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00005138 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00005138 ??_R13?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00005138                                         ; DATA XREF: .rdata$r:000050A8o
.rdata$r:00005138                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:0000513C                 db    1
.rdata$r:0000513D                 db    0
.rdata$r:0000513E                 db    0
.rdata$r:0000513F                 db    0
.rdata$r:00005140                 db    4
.rdata$r:00005141                 db    0
.rdata$r:00005142                 db    0
.rdata$r:00005143                 db    0
.rdata$r:00005144                 db 0FFh
.rdata$r:00005145                 db 0FFh
.rdata$r:00005146                 db 0FFh
.rdata$r:00005147                 db 0FFh
.rdata$r:00005148                 db    0
.rdata$r:00005149                 db    0
.rdata$r:0000514A                 db    0
.rdata$r:0000514B                 db    0
.rdata$r:0000514C                 db  40h ; @
.rdata$r:0000514D                 db    0
.rdata$r:0000514E                 db    0
.rdata$r:0000514F                 db    0
.rdata$r:00005150                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005150 _rdata$r        ends
.rdata$r:00005150
.data:00005154 ; ===========================================================================
.data:00005154
.data:00005154 ; Segment type: Pure data
.data:00005154 ; Segment permissions: Read/Write
.data:00005154 _data           segment dword public 'DATA' use32
.data:00005154                 assume cs:_data
.data:00005154                 ;org 5154h
.data:00005154 ; COMDAT (pick any)
.data:00005154                 public ??_R0?AUIArchiveOpenSeq@@@8
.data:00005154 ; struct IArchiveOpenSeq `RTTI Type Descriptor'
.data:00005154 ??_R0?AUIArchiveOpenSeq@@@8 dd offset ??_7type_info@@6B@
.data:00005154                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005154                                         ; .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005154                                         ; const type_info::`vftable'
.data:00005158                 db    0
.data:00005159                 db    0
.data:0000515A                 db    0
.data:0000515B                 db    0
.data:0000515C                 db  2Eh ; .
.data:0000515D                 db  3Fh ; ?
.data:0000515E                 db  41h ; A
.data:0000515F                 db  55h ; U
.data:00005160                 db  49h ; I
.data:00005161                 db  41h ; A
.data:00005162                 db  72h ; r
.data:00005163                 db  63h ; c
.data:00005164                 db  68h ; h
.data:00005165                 db  69h ; i
.data:00005166                 db  76h ; v
.data:00005167                 db  65h ; e
.data:00005168                 db  4Fh ; O
.data:00005169                 db  70h ; p
.data:0000516A                 db  65h ; e
.data:0000516B                 db  6Eh ; n
.data:0000516C                 db  53h ; S
.data:0000516D                 db  65h ; e
.data:0000516E                 db  71h ; q
.data:0000516F                 db  40h ; @
.data:00005170                 db  40h ; @
.data:00005171                 db    0
.data:00005172                 align 4
.data:00005172 _data           ends
.data:00005172
.rdata$r:00005174 ; ===========================================================================
.rdata$r:00005174
.rdata$r:00005174 ; Segment type: Pure data
.rdata$r:00005174 ; Segment permissions: Read
.rdata$r:00005174 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005174                 assume cs:_rdata$r
.rdata$r:00005174                 ;org 5174h
.rdata$r:00005174 ; COMDAT (pick any)
.rdata$r:00005174                 public ??_R3IArchiveOpenSeq@@8
.rdata$r:00005174 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005174 ??_R3IArchiveOpenSeq@@8 db    0         ; DATA XREF: .rdata$r:00005150o
.rdata$r:00005174                                         ; .rdata$r:000051A8o ...
.rdata$r:00005175                 db    0
.rdata$r:00005176                 db    0
.rdata$r:00005177                 db    0
.rdata$r:00005178                 db    0
.rdata$r:00005179                 db    0
.rdata$r:0000517A                 db    0
.rdata$r:0000517B                 db    0
.rdata$r:0000517C                 db    2
.rdata$r:0000517D                 db    0
.rdata$r:0000517E                 db    0
.rdata$r:0000517F                 db    0
.rdata$r:00005180                 dd offset ??_R2IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00005180 _rdata$r        ends
.rdata$r:00005180
.rdata$r:00005184 ; ===========================================================================
.rdata$r:00005184
.rdata$r:00005184 ; Segment type: Pure data
.rdata$r:00005184 ; Segment permissions: Read
.rdata$r:00005184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005184                 assume cs:_rdata$r
.rdata$r:00005184                 ;org 5184h
.rdata$r:00005184 ; COMDAT (pick any)
.rdata$r:00005184                 public ??_R2IArchiveOpenSeq@@8
.rdata$r:00005184 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00005184 ??_R2IArchiveOpenSeq@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00005184                                         ; DATA XREF: .rdata$r:00005180o
.rdata$r:00005184                                         ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005188                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000518C                 db    0
.rdata$r:0000518D                 align 10h
.rdata$r:0000518D _rdata$r        ends
.rdata$r:0000518D
.rdata$r:00005190 ; ===========================================================================
.rdata$r:00005190
.rdata$r:00005190 ; Segment type: Pure data
.rdata$r:00005190 ; Segment permissions: Read
.rdata$r:00005190 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005190                 assume cs:_rdata$r
.rdata$r:00005190                 ;org 5190h
.rdata$r:00005190 ; COMDAT (pick any)
.rdata$r:00005190                 public ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00005190 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005190 ??_R1A@?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00005190                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Array'o
.rdata$r:00005190                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00005194                 db    1
.rdata$r:00005195                 db    0
.rdata$r:00005196                 db    0
.rdata$r:00005197                 db    0
.rdata$r:00005198                 db    0
.rdata$r:00005199                 db    0
.rdata$r:0000519A                 db    0
.rdata$r:0000519B                 db    0
.rdata$r:0000519C                 db 0FFh
.rdata$r:0000519D                 db 0FFh
.rdata$r:0000519E                 db 0FFh
.rdata$r:0000519F                 db 0FFh
.rdata$r:000051A0                 db    0
.rdata$r:000051A1                 db    0
.rdata$r:000051A2                 db    0
.rdata$r:000051A3                 db    0
.rdata$r:000051A4                 db  40h ; @
.rdata$r:000051A5                 db    0
.rdata$r:000051A6                 db    0
.rdata$r:000051A7                 db    0
.rdata$r:000051A8                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051A8 _rdata$r        ends
.rdata$r:000051A8
.rdata$r:000051AC ; ===========================================================================
.rdata$r:000051AC
.rdata$r:000051AC ; Segment type: Pure data
.rdata$r:000051AC ; Segment permissions: Read
.rdata$r:000051AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051AC                 assume cs:_rdata$r
.rdata$r:000051AC                 ;org 51ACh
.rdata$r:000051AC ; COMDAT (pick any)
.rdata$r:000051AC                 public ??_R17?0A@EA@IOutArchive@@8
.rdata$r:000051AC ; IOutArchive::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000051AC ??_R17?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:000051AC                                         ; DATA XREF: .rdata$r:000050B0o
.rdata$r:000051AC                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000051B0                 db    1
.rdata$r:000051B1                 db    0
.rdata$r:000051B2                 db    0
.rdata$r:000051B3                 db    0
.rdata$r:000051B4                 db    8
.rdata$r:000051B5                 db    0
.rdata$r:000051B6                 db    0
.rdata$r:000051B7                 db    0
.rdata$r:000051B8                 db 0FFh
.rdata$r:000051B9                 db 0FFh
.rdata$r:000051BA                 db 0FFh
.rdata$r:000051BB                 db 0FFh
.rdata$r:000051BC                 db    0
.rdata$r:000051BD                 db    0
.rdata$r:000051BE                 db    0
.rdata$r:000051BF                 db    0
.rdata$r:000051C0                 db  40h ; @
.rdata$r:000051C1                 db    0
.rdata$r:000051C2                 db    0
.rdata$r:000051C3                 db    0
.rdata$r:000051C4                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051C4 _rdata$r        ends
.rdata$r:000051C4
.data:000051C8 ; ===========================================================================
.data:000051C8
.data:000051C8 ; Segment type: Pure data
.data:000051C8 ; Segment permissions: Read/Write
.data:000051C8 _data           segment dword public 'DATA' use32
.data:000051C8                 assume cs:_data
.data:000051C8                 ;org 51C8h
.data:000051C8 ; COMDAT (pick any)
.data:000051C8                 public ??_R0?AUIOutArchive@@@8
.data:000051C8 ; struct IOutArchive `RTTI Type Descriptor'
.data:000051C8 ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:000051C8                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000051C8                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000051C8                                         ; const type_info::`vftable'
.data:000051CC                 align 10h
.data:000051D0 a_?auioutarchiv db '.?AUIOutArchive@@',0
.data:000051E2                 align 4
.data:000051E2 _data           ends
.data:000051E2
.rdata$r:000051E4 ; ===========================================================================
.rdata$r:000051E4
.rdata$r:000051E4 ; Segment type: Pure data
.rdata$r:000051E4 ; Segment permissions: Read
.rdata$r:000051E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051E4                 assume cs:_rdata$r
.rdata$r:000051E4                 ;org 51E4h
.rdata$r:000051E4 ; COMDAT (pick any)
.rdata$r:000051E4                 public ??_R3IOutArchive@@8
.rdata$r:000051E4 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051E4 ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:000051C4o
.rdata$r:000051E4                                         ; .rdata$r:00005218o ...
.rdata$r:000051E5                 db    0
.rdata$r:000051E6                 db    0
.rdata$r:000051E7                 db    0
.rdata$r:000051E8                 db    0
.rdata$r:000051E9                 db    0
.rdata$r:000051EA                 db    0
.rdata$r:000051EB                 db    0
.rdata$r:000051EC                 db    2
.rdata$r:000051ED                 db    0
.rdata$r:000051EE                 db    0
.rdata$r:000051EF                 db    0
.rdata$r:000051F0                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000051F0 _rdata$r        ends
.rdata$r:000051F0
.rdata$r:000051F4 ; ===========================================================================
.rdata$r:000051F4
.rdata$r:000051F4 ; Segment type: Pure data
.rdata$r:000051F4 ; Segment permissions: Read
.rdata$r:000051F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051F4                 assume cs:_rdata$r
.rdata$r:000051F4                 ;org 51F4h
.rdata$r:000051F4 ; COMDAT (pick any)
.rdata$r:000051F4                 public ??_R2IOutArchive@@8
.rdata$r:000051F4 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:000051F4 ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:000051F4                                         ; DATA XREF: .rdata$r:000051F0o
.rdata$r:000051F4                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051F8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051FC                 db    0
.rdata$r:000051FD                 align 10h
.rdata$r:000051FD _rdata$r        ends
.rdata$r:000051FD
.rdata$r:00005200 ; ===========================================================================
.rdata$r:00005200
.rdata$r:00005200 ; Segment type: Pure data
.rdata$r:00005200 ; Segment permissions: Read
.rdata$r:00005200 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005200                 assume cs:_rdata$r
.rdata$r:00005200                 ;org 5200h
.rdata$r:00005200 ; COMDAT (pick any)
.rdata$r:00005200                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00005200 ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005200 ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00005200                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:00005200                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00005204                 db    1
.rdata$r:00005205                 db    0
.rdata$r:00005206                 db    0
.rdata$r:00005207                 db    0
.rdata$r:00005208                 db    0
.rdata$r:00005209                 db    0
.rdata$r:0000520A                 db    0
.rdata$r:0000520B                 db    0
.rdata$r:0000520C                 db 0FFh
.rdata$r:0000520D                 db 0FFh
.rdata$r:0000520E                 db 0FFh
.rdata$r:0000520F                 db 0FFh
.rdata$r:00005210                 db    0
.rdata$r:00005211                 db    0
.rdata$r:00005212                 db    0
.rdata$r:00005213                 db    0
.rdata$r:00005214                 db  40h ; @
.rdata$r:00005215                 db    0
.rdata$r:00005216                 db    0
.rdata$r:00005217                 db    0
.rdata$r:00005218                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005218 _rdata$r        ends
.rdata$r:00005218
.rdata$r:0000521C ; ===========================================================================
.rdata$r:0000521C
.rdata$r:0000521C ; Segment type: Pure data
.rdata$r:0000521C ; Segment permissions: Read
.rdata$r:0000521C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000521C                 assume cs:_rdata$r
.rdata$r:0000521C                 ;org 521Ch
.rdata$r:0000521C ; COMDAT (pick any)
.rdata$r:0000521C                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:0000521C ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:0000521C ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000521C                                         ; DATA XREF: .rdata$r:000050B4o
.rdata$r:0000521C                                         ; .rdata$r:00005460o ...
.rdata$r:0000521C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00005220                 db    0
.rdata$r:00005221                 db    0
.rdata$r:00005222                 db    0
.rdata$r:00005223                 db    0
.rdata$r:00005224                 db    8
.rdata$r:00005225                 db    0
.rdata$r:00005226                 db    0
.rdata$r:00005227                 db    0
.rdata$r:00005228                 db 0FFh
.rdata$r:00005229                 db 0FFh
.rdata$r:0000522A                 db 0FFh
.rdata$r:0000522B                 db 0FFh
.rdata$r:0000522C                 db    0
.rdata$r:0000522D                 db    0
.rdata$r:0000522E                 db    0
.rdata$r:0000522F                 db    0
.rdata$r:00005230                 db  42h ; B
.rdata$r:00005231                 db    0
.rdata$r:00005232                 db    0
.rdata$r:00005233                 db    0
.rdata$r:00005234                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005234 _rdata$r        ends
.rdata$r:00005234
.rdata$r:00005238 ; ===========================================================================
.rdata$r:00005238
.rdata$r:00005238 ; Segment type: Pure data
.rdata$r:00005238 ; Segment permissions: Read
.rdata$r:00005238 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005238                 assume cs:_rdata$r
.rdata$r:00005238                 ;org 5238h
.rdata$r:00005238 ; COMDAT (pick any)
.rdata$r:00005238                 public ??_R1M@?0A@EA@ISetProperties@@8
.rdata$r:00005238 ; ISetProperties::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00005238 ??_R1M@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00005238                                         ; DATA XREF: .rdata$r:000050B8o
.rdata$r:00005238                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:0000523C                 db    1
.rdata$r:0000523D                 db    0
.rdata$r:0000523E                 db    0
.rdata$r:0000523F                 db    0
.rdata$r:00005240                 db  0Ch
.rdata$r:00005241                 db    0
.rdata$r:00005242                 db    0
.rdata$r:00005243                 db    0
.rdata$r:00005244                 db 0FFh
.rdata$r:00005245                 db 0FFh
.rdata$r:00005246                 db 0FFh
.rdata$r:00005247                 db 0FFh
.rdata$r:00005248                 db    0
.rdata$r:00005249                 db    0
.rdata$r:0000524A                 db    0
.rdata$r:0000524B                 db    0
.rdata$r:0000524C                 db  40h ; @
.rdata$r:0000524D                 db    0
.rdata$r:0000524E                 db    0
.rdata$r:0000524F                 db    0
.rdata$r:00005250                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005250 _rdata$r        ends
.rdata$r:00005250
.data:00005254 ; ===========================================================================
.data:00005254
.data:00005254 ; Segment type: Pure data
.data:00005254 ; Segment permissions: Read/Write
.data:00005254 _data           segment dword public 'DATA' use32
.data:00005254                 assume cs:_data
.data:00005254                 ;org 5254h
.data:00005254 ; COMDAT (pick any)
.data:00005254                 public ??_R0?AUISetProperties@@@8
.data:00005254 ; struct ISetProperties `RTTI Type Descriptor'
.data:00005254 ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:00005254                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00005254                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005254                                         ; const type_info::`vftable'
.data:00005258                 db    0
.data:00005259                 db    0
.data:0000525A                 db    0
.data:0000525B                 db    0
.data:0000525C                 db  2Eh ; .
.data:0000525D                 db  3Fh ; ?
.data:0000525E                 db  41h ; A
.data:0000525F                 db  55h ; U
.data:00005260                 db  49h ; I
.data:00005261                 db  53h ; S
.data:00005262                 db  65h ; e
.data:00005263                 db  74h ; t
.data:00005264                 db  50h ; P
.data:00005265                 db  72h ; r
.data:00005266                 db  6Fh ; o
.data:00005267                 db  70h ; p
.data:00005268                 db  65h ; e
.data:00005269                 db  72h ; r
.data:0000526A                 db  74h ; t
.data:0000526B                 db  69h ; i
.data:0000526C                 db  65h ; e
.data:0000526D                 db  73h ; s
.data:0000526E                 db  40h ; @
.data:0000526F                 db  40h ; @
.data:00005270                 db    0
.data:00005271                 align 4
.data:00005271 _data           ends
.data:00005271
.rdata$r:00005274 ; ===========================================================================
.rdata$r:00005274
.rdata$r:00005274 ; Segment type: Pure data
.rdata$r:00005274 ; Segment permissions: Read
.rdata$r:00005274 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005274                 assume cs:_rdata$r
.rdata$r:00005274                 ;org 5274h
.rdata$r:00005274 ; COMDAT (pick any)
.rdata$r:00005274                 public ??_R3ISetProperties@@8
.rdata$r:00005274 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005274 ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:00005250o
.rdata$r:00005274                                         ; .rdata$r:000052A8o ...
.rdata$r:00005275                 db    0
.rdata$r:00005276                 db    0
.rdata$r:00005277                 db    0
.rdata$r:00005278                 db    0
.rdata$r:00005279                 db    0
.rdata$r:0000527A                 db    0
.rdata$r:0000527B                 db    0
.rdata$r:0000527C                 db    2
.rdata$r:0000527D                 db    0
.rdata$r:0000527E                 db    0
.rdata$r:0000527F                 db    0
.rdata$r:00005280                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00005280 _rdata$r        ends
.rdata$r:00005280
.rdata$r:00005284 ; ===========================================================================
.rdata$r:00005284
.rdata$r:00005284 ; Segment type: Pure data
.rdata$r:00005284 ; Segment permissions: Read
.rdata$r:00005284 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005284                 assume cs:_rdata$r
.rdata$r:00005284                 ;org 5284h
.rdata$r:00005284 ; COMDAT (pick any)
.rdata$r:00005284                 public ??_R2ISetProperties@@8
.rdata$r:00005284 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00005284 ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00005284                                         ; DATA XREF: .rdata$r:00005280o
.rdata$r:00005284                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005288                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000528C                 db    0
.rdata$r:0000528D                 align 10h
.rdata$r:0000528D _rdata$r        ends
.rdata$r:0000528D
.rdata$r:00005290 ; ===========================================================================
.rdata$r:00005290
.rdata$r:00005290 ; Segment type: Pure data
.rdata$r:00005290 ; Segment permissions: Read
.rdata$r:00005290 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005290                 assume cs:_rdata$r
.rdata$r:00005290                 ;org 5290h
.rdata$r:00005290 ; COMDAT (pick any)
.rdata$r:00005290                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00005290 ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005290 ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00005290                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:00005290                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00005294                 db    1
.rdata$r:00005295                 db    0
.rdata$r:00005296                 db    0
.rdata$r:00005297                 db    0
.rdata$r:00005298                 db    0
.rdata$r:00005299                 db    0
.rdata$r:0000529A                 db    0
.rdata$r:0000529B                 db    0
.rdata$r:0000529C                 db 0FFh
.rdata$r:0000529D                 db 0FFh
.rdata$r:0000529E                 db 0FFh
.rdata$r:0000529F                 db 0FFh
.rdata$r:000052A0                 db    0
.rdata$r:000052A1                 db    0
.rdata$r:000052A2                 db    0
.rdata$r:000052A3                 db    0
.rdata$r:000052A4                 db  40h ; @
.rdata$r:000052A5                 db    0
.rdata$r:000052A6                 db    0
.rdata$r:000052A7                 db    0
.rdata$r:000052A8                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052A8 _rdata$r        ends
.rdata$r:000052A8
.rdata$r:000052AC ; ===========================================================================
.rdata$r:000052AC
.rdata$r:000052AC ; Segment type: Pure data
.rdata$r:000052AC ; Segment permissions: Read
.rdata$r:000052AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052AC                 assume cs:_rdata$r
.rdata$r:000052AC                 ;org 52ACh
.rdata$r:000052AC ; COMDAT (pick any)
.rdata$r:000052AC                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000052AC ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000052AC ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000052AC                                         ; DATA XREF: .rdata$r:000050BCo
.rdata$r:000052AC                                         ; .rdata$r:00005468o ...
.rdata$r:000052AC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000052B0                 db    0
.rdata$r:000052B1                 db    0
.rdata$r:000052B2                 db    0
.rdata$r:000052B3                 db    0
.rdata$r:000052B4                 db  0Ch
.rdata$r:000052B5                 db    0
.rdata$r:000052B6                 db    0
.rdata$r:000052B7                 db    0
.rdata$r:000052B8                 db 0FFh
.rdata$r:000052B9                 db 0FFh
.rdata$r:000052BA                 db 0FFh
.rdata$r:000052BB                 db 0FFh
.rdata$r:000052BC                 db    0
.rdata$r:000052BD                 db    0
.rdata$r:000052BE                 db    0
.rdata$r:000052BF                 db    0
.rdata$r:000052C0                 db  42h ; B
.rdata$r:000052C1                 db    0
.rdata$r:000052C2                 db    0
.rdata$r:000052C3                 db    0
.rdata$r:000052C4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052C4 _rdata$r        ends
.rdata$r:000052C4
.rdata$r:000052C8 ; ===========================================================================
.rdata$r:000052C8
.rdata$r:000052C8 ; Segment type: Pure data
.rdata$r:000052C8 ; Segment permissions: Read
.rdata$r:000052C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052C8                 assume cs:_rdata$r
.rdata$r:000052C8                 ;org 52C8h
.rdata$r:000052C8 ; COMDAT (pick any)
.rdata$r:000052C8                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000052C8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000052C8 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000052C8                                         ; DATA XREF: .rdata$r:000050C0o
.rdata$r:000052C8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000052CC                 align 10h
.rdata$r:000052D0                 db  10h
.rdata$r:000052D1                 db    0
.rdata$r:000052D2                 db    0
.rdata$r:000052D3                 db    0
.rdata$r:000052D4                 db 0FFh
.rdata$r:000052D5                 db 0FFh
.rdata$r:000052D6                 db 0FFh
.rdata$r:000052D7                 db 0FFh
.rdata$r:000052D8                 db    0
.rdata$r:000052D9                 db    0
.rdata$r:000052DA                 db    0
.rdata$r:000052DB                 db    0
.rdata$r:000052DC                 db  40h ; @
.rdata$r:000052DD                 db    0
.rdata$r:000052DE                 db    0
.rdata$r:000052DF                 db    0
.rdata$r:000052E0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052E0 _rdata$r        ends
.rdata$r:000052E0
.rdata$r:000052E4 ; ===========================================================================
.rdata$r:000052E4
.rdata$r:000052E4 ; Segment type: Pure data
.rdata$r:000052E4 ; Segment permissions: Read
.rdata$r:000052E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052E4                 assume cs:_rdata$r
.rdata$r:000052E4                 ;org 52E4h
.rdata$r:000052E4 ; COMDAT (pick any)
.rdata$r:000052E4                 public ??_R4CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@
.rdata$r:000052E4 ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata$r:000052E4 ??_R4CHandler@NGz@NArchive@@6BIArchiveOpenSeq@@@ db    0
.rdata$r:000052E4                                         ; DATA XREF: .rdata:00004FBCo
.rdata$r:000052E5                 db    0
.rdata$r:000052E6                 db    0
.rdata$r:000052E7                 db    0
.rdata$r:000052E8                 db    4
.rdata$r:000052E9                 db    0
.rdata$r:000052EA                 db    0
.rdata$r:000052EB                 db    0
.rdata$r:000052EC                 db    0
.rdata$r:000052ED                 db    0
.rdata$r:000052EE                 db    0
.rdata$r:000052EF                 db    0
.rdata$r:000052F0                 dd offset ??_R0?AVCHandler@NGz@NArchive@@@8 ; NArchive::NGz::CHandler `RTTI Type Descriptor'
.rdata$r:000052F4                 dd offset ??_R3CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000052F4 _rdata$r        ends
.rdata$r:000052F4
.rdata$r:000052F8 ; ===========================================================================
.rdata$r:000052F8
.rdata$r:000052F8 ; Segment type: Pure data
.rdata$r:000052F8 ; Segment permissions: Read
.rdata$r:000052F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000052F8                 assume cs:_rdata$r
.rdata$r:000052F8                 ;org 52F8h
.rdata$r:000052F8 ; COMDAT (pick any)
.rdata$r:000052F8                 public ??_R4CHandler@NGz@NArchive@@6BIOutArchive@@@
.rdata$r:000052F8 ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:000052F8 ??_R4CHandler@NGz@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:000052F8                                         ; DATA XREF: .rdata:00004FA4o
.rdata$r:000052F9                 db    0
.rdata$r:000052FA                 db    0
.rdata$r:000052FB                 db    0
.rdata$r:000052FC                 db    8
.rdata$r:000052FD                 db    0
.rdata$r:000052FE                 db    0
.rdata$r:000052FF                 db    0
.rdata$r:00005300                 db    0
.rdata$r:00005301                 db    0
.rdata$r:00005302                 db    0
.rdata$r:00005303                 db    0
.rdata$r:00005304                 dd offset ??_R0?AVCHandler@NGz@NArchive@@@8 ; NArchive::NGz::CHandler `RTTI Type Descriptor'
.rdata$r:00005308                 dd offset ??_R3CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005308 _rdata$r        ends
.rdata$r:00005308
.rdata$r:0000530C ; ===========================================================================
.rdata$r:0000530C
.rdata$r:0000530C ; Segment type: Pure data
.rdata$r:0000530C ; Segment permissions: Read
.rdata$r:0000530C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000530C                 assume cs:_rdata$r
.rdata$r:0000530C                 ;org 530Ch
.rdata$r:0000530C ; COMDAT (pick any)
.rdata$r:0000530C                 public ??_R4CHandler@NGz@NArchive@@6BISetProperties@@@
.rdata$r:0000530C ; const NArchive::NGz::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:0000530C ??_R4CHandler@NGz@NArchive@@6BISetProperties@@@ db    0
.rdata$r:0000530C                                         ; DATA XREF: .rdata:00004F90o
.rdata$r:0000530D                 db    0
.rdata$r:0000530E                 db    0
.rdata$r:0000530F                 db    0
.rdata$r:00005310                 db  0Ch
.rdata$r:00005311                 db    0
.rdata$r:00005312                 db    0
.rdata$r:00005313                 db    0
.rdata$r:00005314                 db    0
.rdata$r:00005315                 db    0
.rdata$r:00005316                 db    0
.rdata$r:00005317                 db    0
.rdata$r:00005318                 dd offset ??_R0?AVCHandler@NGz@NArchive@@@8 ; NArchive::NGz::CHandler `RTTI Type Descriptor'
.rdata$r:0000531C                 dd offset ??_R3CHandler@NGz@NArchive@@8 ; NArchive::NGz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000531C _rdata$r        ends
.rdata$r:0000531C
.text:00005320 ; ===========================================================================
.text:00005320
.text:00005320 ; Segment type: Pure code
.text:00005320 ; Segment permissions: Read/Execute
.text:00005320 _text           segment para public 'CODE' use32
.text:00005320                 assume cs:_text
.text:00005320                 ;org 5320h
.text:00005320 ; COMDAT (pick any)
.text:00005320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005320
.text:00005320 ; =============== S U B R O U T I N E =======================================
.text:00005320
.text:00005320 ; Attributes: bp-based frame
.text:00005320
.text:00005320 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:00005320                 public ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ
.text:00005320 ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ proc near
.text:00005320                                         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+F0p
.text:00005320
.text:00005320 var_4           = dword ptr -4
.text:00005320
.text:00005320                 push    ebp
.text:00005321                 mov     ebp, esp
.text:00005323                 push    ecx
.text:00005324                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000532B                 mov     [ebp+var_4], ecx
.text:0000532E                 push    0               ; bool
.text:00005330                 push    0               ; bool
.text:00005332                 mov     ecx, [ebp+var_4] ; this
.text:00005335                 call    ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z ; NCompress::NDeflate::NDecoder::CCoder::CCoder(bool,bool)
.text:0000533A                 mov     eax, [ebp+var_4]
.text:0000533D                 mov     dword ptr [eax], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.text:00005343                 mov     ecx, [ebp+var_4]
.text:00005346                 mov     dword ptr [ecx+4], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:0000534D                 mov     edx, [ebp+var_4]
.text:00005350                 mov     dword ptr [edx+8], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.text:00005357                 mov     eax, [ebp+var_4]
.text:0000535A                 mov     dword ptr [eax+0Ch], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00005361                 mov     ecx, [ebp+var_4]
.text:00005364                 mov     dword ptr [ecx+10h], offset ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.text:0000536B                 mov     eax, [ebp+var_4]
.text:0000536E                 add     esp, 4
.text:00005371                 cmp     ebp, esp
.text:00005373                 call    __RTC_CheckEsp
.text:00005378                 mov     esp, ebp
.text:0000537A                 pop     ebp
.text:0000537B                 retn
.text:0000537B ??0CCOMCoder@NDecoder@NDeflate@NCompress@@QAE@XZ endp
.text:0000537B
.text:0000537B _text           ends
.text:0000537B
.rdata:0000537C ; ===========================================================================
.rdata:0000537C
.rdata:0000537C ; Segment type: Pure data
.rdata:0000537C ; Segment permissions: Read
.rdata:0000537C _rdata          segment dword public 'DATA' use32
.rdata:0000537C                 assume cs:_rdata
.rdata:0000537C                 ;org 537Ch
.rdata:0000537C ; COMDAT (pick largest)
.rdata:0000537C                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00005380                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00005380 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}
.rdata:00005380 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00005380                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+44o
.rdata:00005380                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00005384                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00005388                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:0000538C                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:0000538C _rdata          ends
.rdata:0000538C
.rdata:00005390 ; ===========================================================================
.rdata:00005390
.rdata:00005390 ; Segment type: Pure data
.rdata:00005390 ; Segment permissions: Read
.rdata:00005390 _rdata          segment dword public 'DATA' use32
.rdata:00005390                 assume cs:_rdata
.rdata:00005390                 ;org 5390h
.rdata:00005390 ; COMDAT (pick largest)
.rdata:00005390                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00005394                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00005394 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00005394 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00005394                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+3Ao
.rdata:00005394                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00005398                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:0000539C                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:000053A0                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:000053A0 _rdata          ends
.rdata:000053A0
.rdata:000053A4 ; ===========================================================================
.rdata:000053A4
.rdata:000053A4 ; Segment type: Pure data
.rdata:000053A4 ; Segment permissions: Read
.rdata:000053A4 _rdata          segment dword public 'DATA' use32
.rdata:000053A4                 assume cs:_rdata
.rdata:000053A4                 ;org 53A4h
.rdata:000053A4 ; COMDAT (pick largest)
.rdata:000053A4                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:000053A8                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:000053A8 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}
.rdata:000053A8 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000053A8                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+30o
.rdata:000053A8                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000053AC                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:000053B0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:000053B4                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:000053B8                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:000053B8 _rdata          ends
.rdata:000053B8
.rdata:000053BC ; ===========================================================================
.rdata:000053BC
.rdata:000053BC ; Segment type: Pure data
.rdata:000053BC ; Segment permissions: Read
.rdata:000053BC _rdata          segment dword public 'DATA' use32
.rdata:000053BC                 assume cs:_rdata
.rdata:000053BC                 ;org 53BCh
.rdata:000053BC ; COMDAT (pick largest)
.rdata:000053BC                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:000053C0                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:000053C0 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:000053C0 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000053C0                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+26o
.rdata:000053C0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000053C4                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:000053C8                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:000053CC                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:000053CC _rdata          ends
.rdata:000053CC
.rdata:000053D0 ; ===========================================================================
.rdata:000053D0
.rdata:000053D0 ; Segment type: Pure data
.rdata:000053D0 ; Segment permissions: Read
.rdata:000053D0 _rdata          segment dword public 'DATA' use32
.rdata:000053D0                 assume cs:_rdata
.rdata:000053D0                 ;org 53D0h
.rdata:000053D0 ; COMDAT (pick largest)
.rdata:000053D0                 dd offset ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000053D4                 public ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:000053D4 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressCoder'}
.rdata:000053D4 ??_7CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000053D4                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+1Do
.rdata:000053D4                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:000053D8                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:000053DC                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:000053E0                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000053E4                 dd offset ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(uint)
.rdata:000053E8                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000053E8 _rdata          ends
.rdata:000053E8
.rdata$r:000053EC ; ===========================================================================
.rdata$r:000053EC
.rdata$r:000053EC ; Segment type: Pure data
.rdata$r:000053EC ; Segment permissions: Read
.rdata$r:000053EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000053EC                 assume cs:_rdata$r
.rdata$r:000053EC                 ;org 53ECh
.rdata$r:000053EC ; COMDAT (pick any)
.rdata$r:000053EC                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:000053EC ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000053EC ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000053EC                                         ; DATA XREF: .rdata:000053D0o
.rdata$r:000053ED                 db    0
.rdata$r:000053EE                 db    0
.rdata$r:000053EF                 db    0
.rdata$r:000053F0                 db    0
.rdata$r:000053F1                 db    0
.rdata$r:000053F2                 db    0
.rdata$r:000053F3                 db    0
.rdata$r:000053F4                 db    0
.rdata$r:000053F5                 db    0
.rdata$r:000053F6                 db    0
.rdata$r:000053F7                 db    0
.rdata$r:000053F8                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:000053FC                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000053FC _rdata$r        ends
.rdata$r:000053FC
.data:00005400 ; ===========================================================================
.data:00005400
.data:00005400 ; Segment type: Pure data
.data:00005400 ; Segment permissions: Read/Write
.data:00005400 _data           segment dword public 'DATA' use32
.data:00005400                 assume cs:_data
.data:00005400                 ;org 5400h
.data:00005400 ; COMDAT (pick any)
.data:00005400                 public ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.data:00005400 ; class NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.data:00005400 ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00005400                                         ; DATA XREF: .rdata$r:000053F8o
.data:00005400                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00005400                                         ; const type_info::`vftable'
.data:00005404                 align 8
.data:00005408 a_?avccomcode_0 db '.?AVCCOMCoder@NDecoder@NDeflate@NCompress@@',0
.data:00005408 _data           ends
.data:00005408
.rdata$r:00005434 ; ===========================================================================
.rdata$r:00005434
.rdata$r:00005434 ; Segment type: Pure data
.rdata$r:00005434 ; Segment permissions: Read
.rdata$r:00005434 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005434                 assume cs:_rdata$r
.rdata$r:00005434                 ;org 5434h
.rdata$r:00005434 ; COMDAT (pick any)
.rdata$r:00005434                 public ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00005434 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005434 ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:00005434                                         ; DATA XREF: .rdata$r:000053FCo
.rdata$r:00005434                                         ; .rdata$r:00005494o ...
.rdata$r:00005435                 db    0
.rdata$r:00005436                 db    0
.rdata$r:00005437                 db    0
.rdata$r:00005438                 db    1
.rdata$r:00005439                 db    0
.rdata$r:0000543A                 db    0
.rdata$r:0000543B                 db    0
.rdata$r:0000543C                 db  0Dh
.rdata$r:0000543D                 db    0
.rdata$r:0000543E                 db    0
.rdata$r:0000543F                 db    0
.rdata$r:00005440                 dd offset ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:00005440 _rdata$r        ends
.rdata$r:00005440
.rdata$r:00005444 ; ===========================================================================
.rdata$r:00005444
.rdata$r:00005444 ; Segment type: Pure data
.rdata$r:00005444 ; Segment permissions: Read
.rdata$r:00005444 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005444                 assume cs:_rdata$r
.rdata$r:00005444                 ;org 5444h
.rdata$r:00005444 ; COMDAT (pick any)
.rdata$r:00005444                 public ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00005444 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'
.rdata$r:00005444 ??_R2CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00005444                                         ; DATA XREF: .rdata$r:00005440o
.rdata$r:00005444                                         ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005448                 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000544C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005450                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00005454                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005458                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000545C                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00005460                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00005464                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00005468                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000546C                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00005470                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00005474                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00005478                 db    0
.rdata$r:00005479                 align 4
.rdata$r:00005479 _rdata$r        ends
.rdata$r:00005479
.rdata$r:0000547C ; ===========================================================================
.rdata$r:0000547C
.rdata$r:0000547C ; Segment type: Pure data
.rdata$r:0000547C ; Segment permissions: Read
.rdata$r:0000547C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000547C                 assume cs:_rdata$r
.rdata$r:0000547C                 ;org 547Ch
.rdata$r:0000547C ; COMDAT (pick any)
.rdata$r:0000547C                 public ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:0000547C ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000547C ??_R1A@?0A@EA@CCOMCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:0000547C                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Base Class Array'o
.rdata$r:0000547C                                         ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00005480                 db  0Ch
.rdata$r:00005481                 db    0
.rdata$r:00005482                 db    0
.rdata$r:00005483                 db    0
.rdata$r:00005484                 db    0
.rdata$r:00005485                 db    0
.rdata$r:00005486                 db    0
.rdata$r:00005487                 db    0
.rdata$r:00005488                 db 0FFh
.rdata$r:00005489                 db 0FFh
.rdata$r:0000548A                 db 0FFh
.rdata$r:0000548B                 db 0FFh
.rdata$r:0000548C                 db    0
.rdata$r:0000548D                 db    0
.rdata$r:0000548E                 db    0
.rdata$r:0000548F                 db    0
.rdata$r:00005490                 db  40h ; @
.rdata$r:00005491                 db    0
.rdata$r:00005492                 db    0
.rdata$r:00005493                 db    0
.rdata$r:00005494                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005494 _rdata$r        ends
.rdata$r:00005494
.rdata$r:00005498 ; ===========================================================================
.rdata$r:00005498
.rdata$r:00005498 ; Segment type: Pure data
.rdata$r:00005498 ; Segment permissions: Read
.rdata$r:00005498 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005498                 assume cs:_rdata$r
.rdata$r:00005498                 ;org 5498h
.rdata$r:00005498 ; COMDAT (pick any)
.rdata$r:00005498                 public ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:00005498 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005498 ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.rdata$r:00005498                                         ; DATA XREF: .rdata$r:00005448o
.rdata$r:00005498                                         ; .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:00005498                                         ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:0000549C                 db  0Bh
.rdata$r:0000549D                 db    0
.rdata$r:0000549E                 db    0
.rdata$r:0000549F                 db    0
.rdata$r:000054A0                 db    0
.rdata$r:000054A1                 db    0
.rdata$r:000054A2                 db    0
.rdata$r:000054A3                 db    0
.rdata$r:000054A4                 db 0FFh
.rdata$r:000054A5                 db 0FFh
.rdata$r:000054A6                 db 0FFh
.rdata$r:000054A7                 db 0FFh
.rdata$r:000054A8                 db    0
.rdata$r:000054A9                 db    0
.rdata$r:000054AA                 db    0
.rdata$r:000054AB                 db    0
.rdata$r:000054AC                 db  40h ; @
.rdata$r:000054AD                 db    0
.rdata$r:000054AE                 db    0
.rdata$r:000054AF                 db    0
.rdata$r:000054B0                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000054B0 _rdata$r        ends
.rdata$r:000054B0
.data:000054B4 ; ===========================================================================
.data:000054B4
.data:000054B4 ; Segment type: Pure data
.data:000054B4 ; Segment permissions: Read/Write
.data:000054B4 _data           segment dword public 'DATA' use32
.data:000054B4                 assume cs:_data
.data:000054B4                 ;org 54B4h
.data:000054B4 ; COMDAT (pick any)
.data:000054B4                 public ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8
.data:000054B4 ; class NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.data:000054B4 ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000054B4                                         ; DATA XREF: .rdata$r:NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000054B4                                         ; .rdata$r:00005B44o ...
.data:000054B4                                         ; const type_info::`vftable'
.data:000054B8                 db    0
.data:000054B9                 db    0
.data:000054BA                 db    0
.data:000054BB                 db    0
.data:000054BC                 db  2Eh ; .
.data:000054BD                 db  3Fh ; ?
.data:000054BE                 db  41h ; A
.data:000054BF                 db  56h ; V
.data:000054C0                 db  43h ; C
.data:000054C1                 db  43h ; C
.data:000054C2                 db  6Fh ; o
.data:000054C3                 db  64h ; d
.data:000054C4                 db  65h ; e
.data:000054C5                 db  72h ; r
.data:000054C6                 db  40h ; @
.data:000054C7                 db  4Eh ; N
.data:000054C8                 db  44h ; D
.data:000054C9                 db  65h ; e
.data:000054CA                 db  63h ; c
.data:000054CB                 db  6Fh ; o
.data:000054CC                 db  64h ; d
.data:000054CD                 db  65h ; e
.data:000054CE                 db  72h ; r
.data:000054CF                 db  40h ; @
.data:000054D0                 db  4Eh ; N
.data:000054D1                 db  44h ; D
.data:000054D2                 db  65h ; e
.data:000054D3                 db  66h ; f
.data:000054D4                 db  6Ch ; l
.data:000054D5                 db  61h ; a
.data:000054D6                 db  74h ; t
.data:000054D7                 db  65h ; e
.data:000054D8                 db  40h ; @
.data:000054D9                 db  4Eh ; N
.data:000054DA                 db  43h ; C
.data:000054DB                 db  6Fh ; o
.data:000054DC                 db  6Dh ; m
.data:000054DD                 db  70h ; p
.data:000054DE                 db  72h ; r
.data:000054DF                 db  65h ; e
.data:000054E0                 db  73h ; s
.data:000054E1                 db  73h ; s
.data:000054E2                 db  40h ; @
.data:000054E3                 db  40h ; @
.data:000054E4                 db    0
.data:000054E5                 align 4
.data:000054E5 _data           ends
.data:000054E5
.rdata$r:000054E8 ; ===========================================================================
.rdata$r:000054E8
.rdata$r:000054E8 ; Segment type: Pure data
.rdata$r:000054E8 ; Segment permissions: Read
.rdata$r:000054E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054E8                 assume cs:_rdata$r
.rdata$r:000054E8                 ;org 54E8h
.rdata$r:000054E8 ; COMDAT (pick any)
.rdata$r:000054E8                 public ??_R3CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000054E8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000054E8 ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 db    0
.rdata$r:000054E8                                         ; DATA XREF: .rdata$r:000054B0o
.rdata$r:000054E8                                         ; .rdata$r:00005B48o ...
.rdata$r:000054E9                 db    0
.rdata$r:000054EA                 db    0
.rdata$r:000054EB                 db    0
.rdata$r:000054EC                 db    5
.rdata$r:000054ED                 db    0
.rdata$r:000054EE                 db    0
.rdata$r:000054EF                 db    0
.rdata$r:000054F0                 db  0Ch
.rdata$r:000054F1                 db    0
.rdata$r:000054F2                 db    0
.rdata$r:000054F3                 db    0
.rdata$r:000054F4                 dd offset ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000054F4 _rdata$r        ends
.rdata$r:000054F4
.rdata$r:000054F8 ; ===========================================================================
.rdata$r:000054F8
.rdata$r:000054F8 ; Segment type: Pure data
.rdata$r:000054F8 ; Segment permissions: Read
.rdata$r:000054F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000054F8                 assume cs:_rdata$r
.rdata$r:000054F8                 ;org 54F8h
.rdata$r:000054F8 ; COMDAT (pick any)
.rdata$r:000054F8                 public ??_R2CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000054F8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000054F8 ??_R2CCoder@NDecoder@NDeflate@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NDeflate@NCompress@@8
.rdata$r:000054F8                                         ; DATA XREF: .rdata$r:000054F4o
.rdata$r:000054F8                                         ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000054FC                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005500                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00005504                 dd offset ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005508                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000550C                 dd offset ??_R17?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00005510                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00005514                 dd offset ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00005518                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000551C                 dd offset ??_R1BA@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00005520                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:00005524                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00005528                 db    0
.rdata$r:00005529                 align 4
.rdata$r:00005529 _rdata$r        ends
.rdata$r:00005529
.rdata$r:0000552C ; ===========================================================================
.rdata$r:0000552C
.rdata$r:0000552C ; Segment type: Pure data
.rdata$r:0000552C ; Segment permissions: Read
.rdata$r:0000552C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000552C                 assume cs:_rdata$r
.rdata$r:0000552C                 ;org 552Ch
.rdata$r:0000552C ; COMDAT (pick any)
.rdata$r:0000552C                 public ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:0000552C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000552C ??_R13?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:0000552C                                         ; DATA XREF: .rdata$r:00005454o
.rdata$r:0000552C                                         ; .rdata$r:00005504o
.rdata$r:0000552C                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00005530                 db    1
.rdata$r:00005531                 db    0
.rdata$r:00005532                 db    0
.rdata$r:00005533                 db    0
.rdata$r:00005534                 db    4
.rdata$r:00005535                 db    0
.rdata$r:00005536                 db    0
.rdata$r:00005537                 db    0
.rdata$r:00005538                 db 0FFh
.rdata$r:00005539                 db 0FFh
.rdata$r:0000553A                 db 0FFh
.rdata$r:0000553B                 db 0FFh
.rdata$r:0000553C                 db    0
.rdata$r:0000553D                 db    0
.rdata$r:0000553E                 db    0
.rdata$r:0000553F                 db    0
.rdata$r:00005540                 db  40h ; @
.rdata$r:00005541                 db    0
.rdata$r:00005542                 db    0
.rdata$r:00005543                 db    0
.rdata$r:00005544                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005544 _rdata$r        ends
.rdata$r:00005544
.data:00005548 ; ===========================================================================
.data:00005548
.data:00005548 ; Segment type: Pure data
.data:00005548 ; Segment permissions: Read/Write
.data:00005548 _data           segment dword public 'DATA' use32
.data:00005548                 assume cs:_data
.data:00005548                 ;org 5548h
.data:00005548 ; COMDAT (pick any)
.data:00005548                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00005548 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00005548 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00005548                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00005548                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005548                                         ; const type_info::`vftable'
.data:0000554C                 align 10h
.data:00005550 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:00005550 _data           ends
.data:00005550
.rdata$r:00005578 ; ===========================================================================
.rdata$r:00005578
.rdata$r:00005578 ; Segment type: Pure data
.rdata$r:00005578 ; Segment permissions: Read
.rdata$r:00005578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005578                 assume cs:_rdata$r
.rdata$r:00005578                 ;org 5578h
.rdata$r:00005578 ; COMDAT (pick any)
.rdata$r:00005578                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00005578 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005578 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00005578                                         ; DATA XREF: .rdata$r:00005544o
.rdata$r:00005578                                         ; .rdata$r:000055ACo
.rdata$r:00005579                 db    0
.rdata$r:0000557A                 db    0
.rdata$r:0000557B                 db    0
.rdata$r:0000557C                 db    0
.rdata$r:0000557D                 db    0
.rdata$r:0000557E                 db    0
.rdata$r:0000557F                 db    0
.rdata$r:00005580                 db    2
.rdata$r:00005581                 db    0
.rdata$r:00005582                 db    0
.rdata$r:00005583                 db    0
.rdata$r:00005584                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00005584 _rdata$r        ends
.rdata$r:00005584
.rdata$r:00005588 ; ===========================================================================
.rdata$r:00005588
.rdata$r:00005588 ; Segment type: Pure data
.rdata$r:00005588 ; Segment permissions: Read
.rdata$r:00005588 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005588                 assume cs:_rdata$r
.rdata$r:00005588                 ;org 5588h
.rdata$r:00005588 ; COMDAT (pick any)
.rdata$r:00005588                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00005588 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00005588 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00005588                                         ; DATA XREF: .rdata$r:00005584o
.rdata$r:00005588                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000558C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005590                 db    0
.rdata$r:00005591                 align 4
.rdata$r:00005591 _rdata$r        ends
.rdata$r:00005591
.rdata$r:00005594 ; ===========================================================================
.rdata$r:00005594
.rdata$r:00005594 ; Segment type: Pure data
.rdata$r:00005594 ; Segment permissions: Read
.rdata$r:00005594 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005594                 assume cs:_rdata$r
.rdata$r:00005594                 ;org 5594h
.rdata$r:00005594 ; COMDAT (pick any)
.rdata$r:00005594                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00005594 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005594 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00005594                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00005594                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00005598                 db    1
.rdata$r:00005599                 db    0
.rdata$r:0000559A                 db    0
.rdata$r:0000559B                 db    0
.rdata$r:0000559C                 db    0
.rdata$r:0000559D                 db    0
.rdata$r:0000559E                 db    0
.rdata$r:0000559F                 db    0
.rdata$r:000055A0                 db 0FFh
.rdata$r:000055A1                 db 0FFh
.rdata$r:000055A2                 db 0FFh
.rdata$r:000055A3                 db 0FFh
.rdata$r:000055A4                 db    0
.rdata$r:000055A5                 db    0
.rdata$r:000055A6                 db    0
.rdata$r:000055A7                 db    0
.rdata$r:000055A8                 db  40h ; @
.rdata$r:000055A9                 db    0
.rdata$r:000055AA                 db    0
.rdata$r:000055AB                 db    0
.rdata$r:000055AC                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000055AC _rdata$r        ends
.rdata$r:000055AC
.rdata$r:000055B0 ; ===========================================================================
.rdata$r:000055B0
.rdata$r:000055B0 ; Segment type: Pure data
.rdata$r:000055B0 ; Segment permissions: Read
.rdata$r:000055B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000055B0                 assume cs:_rdata$r
.rdata$r:000055B0                 ;org 55B0h
.rdata$r:000055B0 ; COMDAT (pick any)
.rdata$r:000055B0                 public ??_R17?0A@EA@ICompressSetInStream@@8
.rdata$r:000055B0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000055B0 ??_R17?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:000055B0                                         ; DATA XREF: .rdata$r:0000545Co
.rdata$r:000055B0                                         ; .rdata$r:0000550Co
.rdata$r:000055B0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:000055B4                 db    1
.rdata$r:000055B5                 db    0
.rdata$r:000055B6                 db    0
.rdata$r:000055B7                 db    0
.rdata$r:000055B8                 db    8
.rdata$r:000055B9                 db    0
.rdata$r:000055BA                 db    0
.rdata$r:000055BB                 db    0
.rdata$r:000055BC                 db 0FFh
.rdata$r:000055BD                 db 0FFh
.rdata$r:000055BE                 db 0FFh
.rdata$r:000055BF                 db 0FFh
.rdata$r:000055C0                 db    0
.rdata$r:000055C1                 db    0
.rdata$r:000055C2                 db    0
.rdata$r:000055C3                 db    0
.rdata$r:000055C4                 db  40h ; @
.rdata$r:000055C5                 db    0
.rdata$r:000055C6                 db    0
.rdata$r:000055C7                 db    0
.rdata$r:000055C8                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000055C8 _rdata$r        ends
.rdata$r:000055C8
.data:000055CC ; ===========================================================================
.data:000055CC
.data:000055CC ; Segment type: Pure data
.data:000055CC ; Segment permissions: Read/Write
.data:000055CC _data           segment dword public 'DATA' use32
.data:000055CC                 assume cs:_data
.data:000055CC                 ;org 55CCh
.data:000055CC ; COMDAT (pick any)
.data:000055CC                 public ??_R0?AUICompressSetInStream@@@8
.data:000055CC ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:000055CC ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:000055CC                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000055CC                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000055CC                                         ; const type_info::`vftable'
.data:000055D0                 db    0
.data:000055D1                 db    0
.data:000055D2                 db    0
.data:000055D3                 db    0
.data:000055D4                 db  2Eh ; .
.data:000055D5                 db  3Fh ; ?
.data:000055D6                 db  41h ; A
.data:000055D7                 db  55h ; U
.data:000055D8                 db  49h ; I
.data:000055D9                 db  43h ; C
.data:000055DA                 db  6Fh ; o
.data:000055DB                 db  6Dh ; m
.data:000055DC                 db  70h ; p
.data:000055DD                 db  72h ; r
.data:000055DE                 db  65h ; e
.data:000055DF                 db  73h ; s
.data:000055E0                 db  73h ; s
.data:000055E1                 db  53h ; S
.data:000055E2                 db  65h ; e
.data:000055E3                 db  74h ; t
.data:000055E4                 db  49h ; I
.data:000055E5                 db  6Eh ; n
.data:000055E6                 db  53h ; S
.data:000055E7                 db  74h ; t
.data:000055E8                 db  72h ; r
.data:000055E9                 db  65h ; e
.data:000055EA                 db  61h ; a
.data:000055EB                 db  6Dh ; m
.data:000055EC                 db  40h ; @
.data:000055ED                 db  40h ; @
.data:000055EE                 db    0
.data:000055EF                 align 10h
.data:000055EF _data           ends
.data:000055EF
.rdata$r:000055F0 ; ===========================================================================
.rdata$r:000055F0
.rdata$r:000055F0 ; Segment type: Pure data
.rdata$r:000055F0 ; Segment permissions: Read
.rdata$r:000055F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000055F0                 assume cs:_rdata$r
.rdata$r:000055F0                 ;org 55F0h
.rdata$r:000055F0 ; COMDAT (pick any)
.rdata$r:000055F0                 public ??_R3ICompressSetInStream@@8
.rdata$r:000055F0 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000055F0 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:000055C8o
.rdata$r:000055F0                                         ; .rdata$r:00005624o
.rdata$r:000055F1                 db    0
.rdata$r:000055F2                 db    0
.rdata$r:000055F3                 db    0
.rdata$r:000055F4                 db    0
.rdata$r:000055F5                 db    0
.rdata$r:000055F6                 db    0
.rdata$r:000055F7                 db    0
.rdata$r:000055F8                 db    2
.rdata$r:000055F9                 db    0
.rdata$r:000055FA                 db    0
.rdata$r:000055FB                 db    0
.rdata$r:000055FC                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:000055FC _rdata$r        ends
.rdata$r:000055FC
.rdata$r:00005600 ; ===========================================================================
.rdata$r:00005600
.rdata$r:00005600 ; Segment type: Pure data
.rdata$r:00005600 ; Segment permissions: Read
.rdata$r:00005600 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005600                 assume cs:_rdata$r
.rdata$r:00005600                 ;org 5600h
.rdata$r:00005600 ; COMDAT (pick any)
.rdata$r:00005600                 public ??_R2ICompressSetInStream@@8
.rdata$r:00005600 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00005600 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00005600                                         ; DATA XREF: .rdata$r:000055FCo
.rdata$r:00005600                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005604                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005608                 db    0
.rdata$r:00005609                 align 4
.rdata$r:00005609 _rdata$r        ends
.rdata$r:00005609
.rdata$r:0000560C ; ===========================================================================
.rdata$r:0000560C
.rdata$r:0000560C ; Segment type: Pure data
.rdata$r:0000560C ; Segment permissions: Read
.rdata$r:0000560C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000560C                 assume cs:_rdata$r
.rdata$r:0000560C                 ;org 560Ch
.rdata$r:0000560C ; COMDAT (pick any)
.rdata$r:0000560C                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000560C ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000560C ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000560C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:0000560C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00005610                 db    1
.rdata$r:00005611                 db    0
.rdata$r:00005612                 db    0
.rdata$r:00005613                 db    0
.rdata$r:00005614                 db    0
.rdata$r:00005615                 db    0
.rdata$r:00005616                 db    0
.rdata$r:00005617                 db    0
.rdata$r:00005618                 db 0FFh
.rdata$r:00005619                 db 0FFh
.rdata$r:0000561A                 db 0FFh
.rdata$r:0000561B                 db 0FFh
.rdata$r:0000561C                 db    0
.rdata$r:0000561D                 db    0
.rdata$r:0000561E                 db    0
.rdata$r:0000561F                 db    0
.rdata$r:00005620                 db  40h ; @
.rdata$r:00005621                 db    0
.rdata$r:00005622                 db    0
.rdata$r:00005623                 db    0
.rdata$r:00005624                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005624 _rdata$r        ends
.rdata$r:00005624
.rdata$r:00005628 ; ===========================================================================
.rdata$r:00005628
.rdata$r:00005628 ; Segment type: Pure data
.rdata$r:00005628 ; Segment permissions: Read
.rdata$r:00005628 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005628                 assume cs:_rdata$r
.rdata$r:00005628                 ;org 5628h
.rdata$r:00005628 ; COMDAT (pick any)
.rdata$r:00005628                 public ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00005628 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00005628 ??_R1M@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00005628                                         ; DATA XREF: .rdata$r:00005464o
.rdata$r:00005628                                         ; .rdata$r:00005514o
.rdata$r:00005628                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:0000562C                 db    1
.rdata$r:0000562D                 db    0
.rdata$r:0000562E                 db    0
.rdata$r:0000562F                 db    0
.rdata$r:00005630                 db  0Ch
.rdata$r:00005631                 db    0
.rdata$r:00005632                 db    0
.rdata$r:00005633                 db    0
.rdata$r:00005634                 db 0FFh
.rdata$r:00005635                 db 0FFh
.rdata$r:00005636                 db 0FFh
.rdata$r:00005637                 db 0FFh
.rdata$r:00005638                 db    0
.rdata$r:00005639                 db    0
.rdata$r:0000563A                 db    0
.rdata$r:0000563B                 db    0
.rdata$r:0000563C                 db  40h ; @
.rdata$r:0000563D                 db    0
.rdata$r:0000563E                 db    0
.rdata$r:0000563F                 db    0
.rdata$r:00005640                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005640 _rdata$r        ends
.rdata$r:00005640
.data:00005644 ; ===========================================================================
.data:00005644
.data:00005644 ; Segment type: Pure data
.data:00005644 ; Segment permissions: Read/Write
.data:00005644 _data           segment dword public 'DATA' use32
.data:00005644                 assume cs:_data
.data:00005644                 ;org 5644h
.data:00005644 ; COMDAT (pick any)
.data:00005644                 public ??_R0?AUICompressSetOutStreamSize@@@8
.data:00005644 ; struct ICompressSetOutStreamSize `RTTI Type Descriptor'
.data:00005644 ??_R0?AUICompressSetOutStreamSize@@@8 dd offset ??_7type_info@@6B@
.data:00005644                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00005644                                         ; .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005644                                         ; const type_info::`vftable'
.data:00005648                 db    0
.data:00005649                 db    0
.data:0000564A                 db    0
.data:0000564B                 db    0
.data:0000564C                 db  2Eh ; .
.data:0000564D                 db  3Fh ; ?
.data:0000564E                 db  41h ; A
.data:0000564F                 db  55h ; U
.data:00005650                 db  49h ; I
.data:00005651                 db  43h ; C
.data:00005652                 db  6Fh ; o
.data:00005653                 db  6Dh ; m
.data:00005654                 db  70h ; p
.data:00005655                 db  72h ; r
.data:00005656                 db  65h ; e
.data:00005657                 db  73h ; s
.data:00005658                 db  73h ; s
.data:00005659                 db  53h ; S
.data:0000565A                 db  65h ; e
.data:0000565B                 db  74h ; t
.data:0000565C                 db  4Fh ; O
.data:0000565D                 db  75h ; u
.data:0000565E                 db  74h ; t
.data:0000565F                 db  53h ; S
.data:00005660                 db  74h ; t
.data:00005661                 db  72h ; r
.data:00005662                 db  65h ; e
.data:00005663                 db  61h ; a
.data:00005664                 db  6Dh ; m
.data:00005665                 db  53h ; S
.data:00005666                 db  69h ; i
.data:00005667                 db  7Ah ; z
.data:00005668                 db  65h ; e
.data:00005669                 db  40h ; @
.data:0000566A                 db  40h ; @
.data:0000566B                 db    0
.data:0000566B _data           ends
.data:0000566B
.rdata$r:0000566C ; ===========================================================================
.rdata$r:0000566C
.rdata$r:0000566C ; Segment type: Pure data
.rdata$r:0000566C ; Segment permissions: Read
.rdata$r:0000566C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000566C                 assume cs:_rdata$r
.rdata$r:0000566C                 ;org 566Ch
.rdata$r:0000566C ; COMDAT (pick any)
.rdata$r:0000566C                 public ??_R3ICompressSetOutStreamSize@@8
.rdata$r:0000566C ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000566C ??_R3ICompressSetOutStreamSize@@8 db    0 ; DATA XREF: .rdata$r:00005640o
.rdata$r:0000566C                                         ; .rdata$r:000056A0o
.rdata$r:0000566D                 db    0
.rdata$r:0000566E                 db    0
.rdata$r:0000566F                 db    0
.rdata$r:00005670                 db    0
.rdata$r:00005671                 db    0
.rdata$r:00005672                 db    0
.rdata$r:00005673                 db    0
.rdata$r:00005674                 db    2
.rdata$r:00005675                 db    0
.rdata$r:00005676                 db    0
.rdata$r:00005677                 db    0
.rdata$r:00005678                 dd offset ??_R2ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:00005678 _rdata$r        ends
.rdata$r:00005678
.rdata$r:0000567C ; ===========================================================================
.rdata$r:0000567C
.rdata$r:0000567C ; Segment type: Pure data
.rdata$r:0000567C ; Segment permissions: Read
.rdata$r:0000567C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000567C                 assume cs:_rdata$r
.rdata$r:0000567C                 ;org 567Ch
.rdata$r:0000567C ; COMDAT (pick any)
.rdata$r:0000567C                 public ??_R2ICompressSetOutStreamSize@@8
.rdata$r:0000567C ; ICompressSetOutStreamSize::`RTTI Base Class Array'
.rdata$r:0000567C ??_R2ICompressSetOutStreamSize@@8 dd offset ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:0000567C                                         ; DATA XREF: .rdata$r:00005678o
.rdata$r:0000567C                                         ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005680                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005684                 db    0
.rdata$r:00005685                 align 4
.rdata$r:00005685 _rdata$r        ends
.rdata$r:00005685
.rdata$r:00005688 ; ===========================================================================
.rdata$r:00005688
.rdata$r:00005688 ; Segment type: Pure data
.rdata$r:00005688 ; Segment permissions: Read
.rdata$r:00005688 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005688                 assume cs:_rdata$r
.rdata$r:00005688                 ;org 5688h
.rdata$r:00005688 ; COMDAT (pick any)
.rdata$r:00005688                 public ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8
.rdata$r:00005688 ; ICompressSetOutStreamSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005688 ??_R1A@?0A@EA@ICompressSetOutStreamSize@@8 dd offset ??_R0?AUICompressSetOutStreamSize@@@8
.rdata$r:00005688                                         ; DATA XREF: .rdata$r:ICompressSetOutStreamSize::`RTTI Base Class Array'o
.rdata$r:00005688                                         ; ICompressSetOutStreamSize `RTTI Type Descriptor'
.rdata$r:0000568C                 db    1
.rdata$r:0000568D                 db    0
.rdata$r:0000568E                 db    0
.rdata$r:0000568F                 db    0
.rdata$r:00005690                 db    0
.rdata$r:00005691                 db    0
.rdata$r:00005692                 db    0
.rdata$r:00005693                 db    0
.rdata$r:00005694                 db 0FFh
.rdata$r:00005695                 db 0FFh
.rdata$r:00005696                 db 0FFh
.rdata$r:00005697                 db 0FFh
.rdata$r:00005698                 db    0
.rdata$r:00005699                 db    0
.rdata$r:0000569A                 db    0
.rdata$r:0000569B                 db    0
.rdata$r:0000569C                 db  40h ; @
.rdata$r:0000569D                 db    0
.rdata$r:0000569E                 db    0
.rdata$r:0000569F                 db    0
.rdata$r:000056A0                 dd offset ??_R3ICompressSetOutStreamSize@@8 ; ICompressSetOutStreamSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056A0 _rdata$r        ends
.rdata$r:000056A0
.rdata$r:000056A4 ; ===========================================================================
.rdata$r:000056A4
.rdata$r:000056A4 ; Segment type: Pure data
.rdata$r:000056A4 ; Segment permissions: Read
.rdata$r:000056A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056A4                 assume cs:_rdata$r
.rdata$r:000056A4                 ;org 56A4h
.rdata$r:000056A4 ; COMDAT (pick any)
.rdata$r:000056A4                 public ??_R1BA@?0A@EA@ISequentialInStream@@8
.rdata$r:000056A4 ; ISequentialInStream::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000056A4 ??_R1BA@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000056A4                                         ; DATA XREF: .rdata$r:0000546Co
.rdata$r:000056A4                                         ; .rdata$r:0000551Co
.rdata$r:000056A4                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000056A8                 db    1
.rdata$r:000056A9                 db    0
.rdata$r:000056AA                 db    0
.rdata$r:000056AB                 db    0
.rdata$r:000056AC                 db  10h
.rdata$r:000056AD                 db    0
.rdata$r:000056AE                 db    0
.rdata$r:000056AF                 db    0
.rdata$r:000056B0                 db 0FFh
.rdata$r:000056B1                 db 0FFh
.rdata$r:000056B2                 db 0FFh
.rdata$r:000056B3                 db 0FFh
.rdata$r:000056B4                 db    0
.rdata$r:000056B5                 db    0
.rdata$r:000056B6                 db    0
.rdata$r:000056B7                 db    0
.rdata$r:000056B8                 db  40h ; @
.rdata$r:000056B9                 db    0
.rdata$r:000056BA                 db    0
.rdata$r:000056BB                 db    0
.rdata$r:000056BC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056BC _rdata$r        ends
.rdata$r:000056BC
.rdata$r:000056C0 ; ===========================================================================
.rdata$r:000056C0
.rdata$r:000056C0 ; Segment type: Pure data
.rdata$r:000056C0 ; Segment permissions: Read
.rdata$r:000056C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056C0                 assume cs:_rdata$r
.rdata$r:000056C0                 ;org 56C0h
.rdata$r:000056C0 ; COMDAT (pick any)
.rdata$r:000056C0                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:000056C0 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:000056C0 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000056C0                                         ; DATA XREF: .rdata$r:00005470o
.rdata$r:000056C0                                         ; .rdata$r:00005520o
.rdata$r:000056C0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000056C4                 align 8
.rdata$r:000056C8                 db  10h
.rdata$r:000056C9                 db    0
.rdata$r:000056CA                 db    0
.rdata$r:000056CB                 db    0
.rdata$r:000056CC                 db 0FFh
.rdata$r:000056CD                 db 0FFh
.rdata$r:000056CE                 db 0FFh
.rdata$r:000056CF                 db 0FFh
.rdata$r:000056D0                 db    0
.rdata$r:000056D1                 db    0
.rdata$r:000056D2                 db    0
.rdata$r:000056D3                 db    0
.rdata$r:000056D4                 db  42h ; B
.rdata$r:000056D5                 db    0
.rdata$r:000056D6                 db    0
.rdata$r:000056D7                 db    0
.rdata$r:000056D8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056D8 _rdata$r        ends
.rdata$r:000056D8
.rdata$r:000056DC ; ===========================================================================
.rdata$r:000056DC
.rdata$r:000056DC ; Segment type: Pure data
.rdata$r:000056DC ; Segment permissions: Read
.rdata$r:000056DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056DC                 assume cs:_rdata$r
.rdata$r:000056DC                 ;org 56DCh
.rdata$r:000056DC ; COMDAT (pick any)
.rdata$r:000056DC                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:000056DC ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:000056DC ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000056DC                                         ; DATA XREF: .rdata$r:00005474o
.rdata$r:000056DC                                         ; .rdata$r:00005524o
.rdata$r:000056DC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000056E0                 db    0
.rdata$r:000056E1                 db    0
.rdata$r:000056E2                 db    0
.rdata$r:000056E3                 db    0
.rdata$r:000056E4                 db  14h
.rdata$r:000056E5                 db    0
.rdata$r:000056E6                 db    0
.rdata$r:000056E7                 db    0
.rdata$r:000056E8                 db 0FFh
.rdata$r:000056E9                 db 0FFh
.rdata$r:000056EA                 db 0FFh
.rdata$r:000056EB                 db 0FFh
.rdata$r:000056EC                 db    0
.rdata$r:000056ED                 db    0
.rdata$r:000056EE                 db    0
.rdata$r:000056EF                 db    0
.rdata$r:000056F0                 db  40h ; @
.rdata$r:000056F1                 db    0
.rdata$r:000056F2                 db    0
.rdata$r:000056F3                 db    0
.rdata$r:000056F4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000056F4 _rdata$r        ends
.rdata$r:000056F4
.rdata$r:000056F8 ; ===========================================================================
.rdata$r:000056F8
.rdata$r:000056F8 ; Segment type: Pure data
.rdata$r:000056F8 ; Segment permissions: Read
.rdata$r:000056F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000056F8                 assume cs:_rdata$r
.rdata$r:000056F8                 ;org 56F8h
.rdata$r:000056F8 ; COMDAT (pick any)
.rdata$r:000056F8                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:000056F8 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:000056F8 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:000056F8                                         ; DATA XREF: .rdata:000053BCo
.rdata$r:000056F9                 db    0
.rdata$r:000056FA                 db    0
.rdata$r:000056FB                 db    0
.rdata$r:000056FC                 db    4
.rdata$r:000056FD                 db    0
.rdata$r:000056FE                 db    0
.rdata$r:000056FF                 db    0
.rdata$r:00005700                 db    0
.rdata$r:00005701                 db    0
.rdata$r:00005702                 db    0
.rdata$r:00005703                 db    0
.rdata$r:00005704                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00005708                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005708 _rdata$r        ends
.rdata$r:00005708
.rdata$r:0000570C ; ===========================================================================
.rdata$r:0000570C
.rdata$r:0000570C ; Segment type: Pure data
.rdata$r:0000570C ; Segment permissions: Read
.rdata$r:0000570C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000570C                 assume cs:_rdata$r
.rdata$r:0000570C                 ;org 570Ch
.rdata$r:0000570C ; COMDAT (pick any)
.rdata$r:0000570C                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:0000570C ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:0000570C ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:0000570C                                         ; DATA XREF: .rdata:000053A4o
.rdata$r:0000570D                 db    0
.rdata$r:0000570E                 db    0
.rdata$r:0000570F                 db    0
.rdata$r:00005710                 db    8
.rdata$r:00005711                 db    0
.rdata$r:00005712                 db    0
.rdata$r:00005713                 db    0
.rdata$r:00005714                 db    0
.rdata$r:00005715                 db    0
.rdata$r:00005716                 db    0
.rdata$r:00005717                 db    0
.rdata$r:00005718                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:0000571C                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000571C _rdata$r        ends
.rdata$r:0000571C
.rdata$r:00005720 ; ===========================================================================
.rdata$r:00005720
.rdata$r:00005720 ; Segment type: Pure data
.rdata$r:00005720 ; Segment permissions: Read
.rdata$r:00005720 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005720                 assume cs:_rdata$r
.rdata$r:00005720                 ;org 5720h
.rdata$r:00005720 ; COMDAT (pick any)
.rdata$r:00005720                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00005720 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00005720 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00005720                                         ; DATA XREF: .rdata:00005390o
.rdata$r:00005721                 db    0
.rdata$r:00005722                 db    0
.rdata$r:00005723                 db    0
.rdata$r:00005724                 db  0Ch
.rdata$r:00005725                 db    0
.rdata$r:00005726                 db    0
.rdata$r:00005727                 db    0
.rdata$r:00005728                 db    0
.rdata$r:00005729                 db    0
.rdata$r:0000572A                 db    0
.rdata$r:0000572B                 db    0
.rdata$r:0000572C                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00005730                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005730 _rdata$r        ends
.rdata$r:00005730
.rdata$r:00005734 ; ===========================================================================
.rdata$r:00005734
.rdata$r:00005734 ; Segment type: Pure data
.rdata$r:00005734 ; Segment permissions: Read
.rdata$r:00005734 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005734                 assume cs:_rdata$r
.rdata$r:00005734                 ;org 5734h
.rdata$r:00005734 ; COMDAT (pick any)
.rdata$r:00005734                 public ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00005734 ; const NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00005734 ??_R4CCOMCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00005734                                         ; DATA XREF: .rdata:0000537Co
.rdata$r:00005735                 db    0
.rdata$r:00005736                 db    0
.rdata$r:00005737                 db    0
.rdata$r:00005738                 db  10h
.rdata$r:00005739                 db    0
.rdata$r:0000573A                 db    0
.rdata$r:0000573B                 db    0
.rdata$r:0000573C                 db    0
.rdata$r:0000573D                 db    0
.rdata$r:0000573E                 db    0
.rdata$r:0000573F                 db    0
.rdata$r:00005740                 dd offset ??_R0?AVCCOMCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder `RTTI Type Descriptor'
.rdata$r:00005744                 dd offset ??_R3CCOMCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCOMCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005744 _rdata$r        ends
.rdata$r:00005744
.text:00005748 ; ===========================================================================
.text:00005748
.text:00005748 ; Segment type: Pure code
.text:00005748 ; Segment permissions: Read/Execute
.text:00005748 _text           segment para public 'CODE' use32
.text:00005748                 assume cs:_text
.text:00005748                 ;org 5748h
.text:00005748 ; COMDAT (pick any)
.text:00005748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005748
.text:00005748 ; =============== S U B R O U T I N E =======================================
.text:00005748
.text:00005748 ; Attributes: bp-based frame
.text:00005748
.text:00005748 ; __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface(NCompress::NDeflate::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:00005748                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00005748 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005748                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00005748                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00005748
.text:00005748 var_14          = dword ptr -14h
.text:00005748 var_10          = dword ptr -10h
.text:00005748 var_C           = dword ptr -0Ch
.text:00005748 var_8           = dword ptr -8
.text:00005748 var_4           = dword ptr -4
.text:00005748 this            = dword ptr  8
.text:00005748 Buf1            = dword ptr  0Ch
.text:00005748 arg_8           = dword ptr  10h
.text:00005748
.text:00005748                 push    ebp
.text:00005749                 mov     ebp, esp
.text:0000574B                 sub     esp, 14h
.text:0000574E                 mov     eax, 0CCCCCCCCh
.text:00005753                 mov     [ebp+var_14], eax
.text:00005756                 mov     [ebp+var_10], eax
.text:00005759                 mov     [ebp+var_C], eax
.text:0000575C                 mov     [ebp+var_8], eax
.text:0000575F                 mov     [ebp+var_4], eax
.text:00005762                 mov     eax, [ebp+arg_8]
.text:00005765                 mov     dword ptr [eax], 0
.text:0000576B                 push    offset _IID_IUnknown ; Buf2
.text:00005770                 mov     ecx, [ebp+Buf1]
.text:00005773                 push    ecx             ; Buf1
.text:00005774                 call    ___@8           ; __(x,x)
.text:00005779                 test    eax, eax
.text:0000577B                 jz      short loc_57A2
.text:0000577D                 cmp     [ebp+this], 0
.text:00005781                 jz      short loc_578E
.text:00005783                 mov     edx, [ebp+this]
.text:00005786                 add     edx, 4
.text:00005789                 mov     [ebp+var_4], edx
.text:0000578C                 jmp     short loc_5795
.text:0000578E ; ---------------------------------------------------------------------------
.text:0000578E
.text:0000578E loc_578E:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+39j
.text:0000578E                 mov     [ebp+var_4], 0
.text:00005795
.text:00005795 loc_5795:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+44j
.text:00005795                 mov     eax, [ebp+arg_8]
.text:00005798                 mov     ecx, [ebp+var_4]
.text:0000579B                 mov     [eax], ecx
.text:0000579D                 jmp     loc_587C
.text:000057A2 ; ---------------------------------------------------------------------------
.text:000057A2
.text:000057A2 loc_57A2:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:000057A2                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:000057A7                 mov     edx, [ebp+Buf1]
.text:000057AA                 push    edx             ; Buf1
.text:000057AB                 call    ___@8           ; __(x,x)
.text:000057B0                 test    eax, eax
.text:000057B2                 jz      short loc_57D9
.text:000057B4                 cmp     [ebp+this], 0
.text:000057B8                 jz      short loc_57C5
.text:000057BA                 mov     eax, [ebp+this]
.text:000057BD                 add     eax, 4
.text:000057C0                 mov     [ebp+var_8], eax
.text:000057C3                 jmp     short loc_57CC
.text:000057C5 ; ---------------------------------------------------------------------------
.text:000057C5
.text:000057C5 loc_57C5:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+70j
.text:000057C5                 mov     [ebp+var_8], 0
.text:000057CC
.text:000057CC loc_57CC:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+7Bj
.text:000057CC                 mov     ecx, [ebp+arg_8]
.text:000057CF                 mov     edx, [ebp+var_8]
.text:000057D2                 mov     [ecx], edx
.text:000057D4                 jmp     loc_587C
.text:000057D9 ; ---------------------------------------------------------------------------
.text:000057D9
.text:000057D9 loc_57D9:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+6Aj
.text:000057D9                 push    offset _IID_ICompressSetInStream ; Buf2
.text:000057DE                 mov     eax, [ebp+Buf1]
.text:000057E1                 push    eax             ; Buf1
.text:000057E2                 call    ___@8           ; __(x,x)
.text:000057E7                 test    eax, eax
.text:000057E9                 jz      short loc_580D
.text:000057EB                 cmp     [ebp+this], 0
.text:000057EF                 jz      short loc_57FC
.text:000057F1                 mov     ecx, [ebp+this]
.text:000057F4                 add     ecx, 8
.text:000057F7                 mov     [ebp+var_C], ecx
.text:000057FA                 jmp     short loc_5803
.text:000057FC ; ---------------------------------------------------------------------------
.text:000057FC
.text:000057FC loc_57FC:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A7j
.text:000057FC                 mov     [ebp+var_C], 0
.text:00005803
.text:00005803 loc_5803:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+B2j
.text:00005803                 mov     edx, [ebp+arg_8]
.text:00005806                 mov     eax, [ebp+var_C]
.text:00005809                 mov     [edx], eax
.text:0000580B                 jmp     short loc_587C
.text:0000580D ; ---------------------------------------------------------------------------
.text:0000580D
.text:0000580D loc_580D:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+A1j
.text:0000580D                 push    offset _IID_ICompressSetOutStreamSize ; Buf2
.text:00005812                 mov     ecx, [ebp+Buf1]
.text:00005815                 push    ecx             ; Buf1
.text:00005816                 call    ___@8           ; __(x,x)
.text:0000581B                 test    eax, eax
.text:0000581D                 jz      short loc_5841
.text:0000581F                 cmp     [ebp+this], 0
.text:00005823                 jz      short loc_5830
.text:00005825                 mov     edx, [ebp+this]
.text:00005828                 add     edx, 0Ch
.text:0000582B                 mov     [ebp+var_10], edx
.text:0000582E                 jmp     short loc_5837
.text:00005830 ; ---------------------------------------------------------------------------
.text:00005830
.text:00005830 loc_5830:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+DBj
.text:00005830                 mov     [ebp+var_10], 0
.text:00005837
.text:00005837 loc_5837:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+E6j
.text:00005837                 mov     eax, [ebp+arg_8]
.text:0000583A                 mov     ecx, [ebp+var_10]
.text:0000583D                 mov     [eax], ecx
.text:0000583F                 jmp     short loc_587C
.text:00005841 ; ---------------------------------------------------------------------------
.text:00005841
.text:00005841 loc_5841:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+D5j
.text:00005841                 push    offset _IID_ISequentialInStream ; Buf2
.text:00005846                 mov     edx, [ebp+Buf1]
.text:00005849                 push    edx             ; Buf1
.text:0000584A                 call    ___@8           ; __(x,x)
.text:0000584F                 test    eax, eax
.text:00005851                 jz      short loc_5875
.text:00005853                 cmp     [ebp+this], 0
.text:00005857                 jz      short loc_5864
.text:00005859                 mov     eax, [ebp+this]
.text:0000585C                 add     eax, 10h
.text:0000585F                 mov     [ebp+var_14], eax
.text:00005862                 jmp     short loc_586B
.text:00005864 ; ---------------------------------------------------------------------------
.text:00005864
.text:00005864 loc_5864:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+10Fj
.text:00005864                 mov     [ebp+var_14], 0
.text:0000586B
.text:0000586B loc_586B:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+11Aj
.text:0000586B                 mov     ecx, [ebp+arg_8]
.text:0000586E                 mov     edx, [ebp+var_14]
.text:00005871                 mov     [ecx], edx
.text:00005873                 jmp     short loc_587C
.text:00005875 ; ---------------------------------------------------------------------------
.text:00005875
.text:00005875 loc_5875:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+109j
.text:00005875                 mov     eax, 80004002h
.text:0000587A                 jmp     short loc_588D
.text:0000587C ; ---------------------------------------------------------------------------
.text:0000587C
.text:0000587C loc_587C:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+55j
.text:0000587C                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Cj ...
.text:0000587C                 mov     eax, [ebp+this]
.text:0000587F                 mov     ecx, [eax+14h]
.text:00005882                 add     ecx, 1
.text:00005885                 mov     edx, [ebp+this]
.text:00005888                 mov     [edx+14h], ecx
.text:0000588B                 xor     eax, eax
.text:0000588D
.text:0000588D loc_588D:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+132j
.text:0000588D                 add     esp, 14h
.text:00005890                 cmp     ebp, esp
.text:00005892                 call    __RTC_CheckEsp
.text:00005897                 mov     esp, ebp
.text:00005899                 pop     ebp
.text:0000589A                 retn    0Ch
.text:0000589A ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000589A
.text:0000589A ; ---------------------------------------------------------------------------
.text:0000589D                 align 10h
.text:0000589D _text           ends
.text:0000589D
.text:000058A0 ; ===========================================================================
.text:000058A0
.text:000058A0 ; Segment type: Pure code
.text:000058A0 ; Segment permissions: Read/Execute
.text:000058A0 _text           segment para public 'CODE' use32
.text:000058A0                 assume cs:_text
.text:000058A0                 ;org 58A0h
.text:000058A0 ; COMDAT (pick any)
.text:000058A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058A0
.text:000058A0 ; =============== S U B R O U T I N E =======================================
.text:000058A0
.text:000058A0 ; Attributes: bp-based frame
.text:000058A0
.text:000058A0 ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000058A0                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:000058A0 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000058A0                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:000058A0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)+5j ...
.text:000058A0
.text:000058A0 var_4           = dword ptr -4
.text:000058A0 this            = dword ptr  8
.text:000058A0
.text:000058A0                 push    ebp
.text:000058A1                 mov     ebp, esp
.text:000058A3                 push    ecx
.text:000058A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058AB                 mov     eax, [ebp+this]
.text:000058AE                 mov     ecx, [eax+14h]
.text:000058B1                 add     ecx, 1
.text:000058B4                 mov     [ebp+var_4], ecx
.text:000058B7                 mov     edx, [ebp+this]
.text:000058BA                 mov     eax, [ebp+var_4]
.text:000058BD                 mov     [edx+14h], eax
.text:000058C0                 mov     eax, [ebp+var_4]
.text:000058C3                 mov     esp, ebp
.text:000058C5                 pop     ebp
.text:000058C6                 retn    4
.text:000058C6 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:000058C6
.text:000058C6 ; ---------------------------------------------------------------------------
.text:000058C9                 align 4
.text:000058C9 _text           ends
.text:000058C9
.text:000058CC ; ===========================================================================
.text:000058CC
.text:000058CC ; Segment type: Pure code
.text:000058CC ; Segment permissions: Read/Execute
.text:000058CC _text           segment para public 'CODE' use32
.text:000058CC                 assume cs:_text
.text:000058CC                 ;org 58CCh
.text:000058CC ; COMDAT (pick any)
.text:000058CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058CC
.text:000058CC ; =============== S U B R O U T I N E =======================================
.text:000058CC
.text:000058CC ; Attributes: bp-based frame
.text:000058CC
.text:000058CC ; unsigned __int32 __stdcall NCompress::NDeflate::NDecoder::CCoder::Release(NCompress::NDeflate::NDecoder::CCoder *this)
.text:000058CC                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ
.text:000058CC ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ proc near
.text:000058CC                                         ; CODE XREF: [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)+5j
.text:000058CC                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)+5j ...
.text:000058CC
.text:000058CC var_10          = dword ptr -10h
.text:000058CC var_C           = dword ptr -0Ch
.text:000058CC var_8           = dword ptr -8
.text:000058CC var_4           = dword ptr -4
.text:000058CC this            = dword ptr  8
.text:000058CC
.text:000058CC                 push    ebp
.text:000058CD                 mov     ebp, esp
.text:000058CF                 sub     esp, 10h
.text:000058D2                 push    esi
.text:000058D3                 mov     eax, 0CCCCCCCCh
.text:000058D8                 mov     [ebp+var_10], eax
.text:000058DB                 mov     [ebp+var_C], eax
.text:000058DE                 mov     [ebp+var_8], eax
.text:000058E1                 mov     [ebp+var_4], eax
.text:000058E4                 mov     eax, [ebp+this]
.text:000058E7                 mov     ecx, [eax+14h]
.text:000058EA                 sub     ecx, 1
.text:000058ED                 mov     [ebp+var_C], ecx
.text:000058F0                 mov     edx, [ebp+this]
.text:000058F3                 mov     eax, [ebp+var_C]
.text:000058F6                 mov     [edx+14h], eax
.text:000058F9                 cmp     [ebp+var_C], 0
.text:000058FD                 jz      short loc_5907
.text:000058FF                 mov     ecx, [ebp+this]
.text:00005902                 mov     eax, [ecx+14h]
.text:00005905                 jmp     short loc_593F
.text:00005907 ; ---------------------------------------------------------------------------
.text:00005907
.text:00005907 loc_5907:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+31j
.text:00005907                 mov     edx, [ebp+this]
.text:0000590A                 mov     [ebp+var_8], edx
.text:0000590D                 mov     eax, [ebp+var_8]
.text:00005910                 mov     [ebp+var_4], eax
.text:00005913                 cmp     [ebp+var_4], 0
.text:00005917                 jz      short loc_5936
.text:00005919                 mov     esi, esp
.text:0000591B                 push    1
.text:0000591D                 mov     ecx, [ebp+var_4]
.text:00005920                 mov     edx, [ecx]
.text:00005922                 mov     ecx, [ebp+var_4]
.text:00005925                 mov     eax, [edx+10h]
.text:00005928                 call    eax
.text:0000592A                 cmp     esi, esp
.text:0000592C                 call    __RTC_CheckEsp
.text:00005931                 mov     [ebp+var_10], eax
.text:00005934                 jmp     short loc_593D
.text:00005936 ; ---------------------------------------------------------------------------
.text:00005936
.text:00005936 loc_5936:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+4Bj
.text:00005936                 mov     [ebp+var_10], 0
.text:0000593D
.text:0000593D loc_593D:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+68j
.text:0000593D                 xor     eax, eax
.text:0000593F
.text:0000593F loc_593F:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::Release(void)+39j
.text:0000593F                 pop     esi
.text:00005940                 add     esp, 10h
.text:00005943                 cmp     ebp, esp
.text:00005945                 call    __RTC_CheckEsp
.text:0000594A                 mov     esp, ebp
.text:0000594C                 pop     ebp
.text:0000594D                 retn    4
.text:0000594D ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ endp
.text:0000594D
.text:0000594D _text           ends
.text:0000594D
.text:00005950 ; ===========================================================================
.text:00005950
.text:00005950 ; Segment type: Pure code
.text:00005950 ; Segment permissions: Read/Execute
.text:00005950 _text           segment para public 'CODE' use32
.text:00005950                 assume cs:_text
.text:00005950                 ;org 5950h
.text:00005950 ; COMDAT (pick any)
.text:00005950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005950
.text:00005950 ; =============== S U B R O U T I N E =======================================
.text:00005950
.text:00005950 ; Attributes: bp-based frame
.text:00005950
.text:00005950 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
.text:00005950                 public ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00005950 ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00005950
.text:00005950 var_4           = dword ptr -4
.text:00005950 arg_0           = dword ptr  8
.text:00005950
.text:00005950                 push    ebp
.text:00005951                 mov     ebp, esp
.text:00005953                 push    ecx
.text:00005954                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000595B                 mov     [ebp+var_4], ecx
.text:0000595E                 mov     ecx, [ebp+var_4] ; this
.text:00005961                 call    ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)
.text:00005966                 mov     eax, [ebp+arg_0]
.text:00005969                 and     eax, 1
.text:0000596C                 jz      short loc_597A
.text:0000596E                 mov     ecx, [ebp+var_4]
.text:00005971                 push    ecx             ; void *
.text:00005972                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005977                 add     esp, 4
.text:0000597A
.text:0000597A loc_597A:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+1Cj
.text:0000597A                 mov     eax, [ebp+var_4]
.text:0000597D                 add     esp, 4
.text:00005980                 cmp     ebp, esp
.text:00005982                 call    __RTC_CheckEsp
.text:00005987                 mov     esp, ebp
.text:00005989                 pop     ebp
.text:0000598A                 retn    4
.text:0000598A ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:0000598A
.text:0000598A ; ---------------------------------------------------------------------------
.text:0000598D                 align 10h
.text:0000598D _text           ends
.text:0000598D
.text:00005990 ; ===========================================================================
.text:00005990
.text:00005990 ; Segment type: Pure code
.text:00005990 ; Segment permissions: Read/Execute
.text:00005990 _text           segment para public 'CODE' use32
.text:00005990                 assume cs:_text
.text:00005990                 ;org 5990h
.text:00005990 ; COMDAT (pick any)
.text:00005990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005990
.text:00005990 ; =============== S U B R O U T I N E =======================================
.text:00005990
.text:00005990 ; Attributes: bp-based frame
.text:00005990
.text:00005990 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(NCompress::NDeflate::NDecoder::CCOMCoder *__hidden this)
.text:00005990                 public ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:00005990 ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:00005990                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(uint)+11p
.text:00005990
.text:00005990 var_4           = dword ptr -4
.text:00005990
.text:00005990                 push    ebp
.text:00005991                 mov     ebp, esp
.text:00005993                 push    ecx
.text:00005994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000599B                 mov     [ebp+var_4], ecx
.text:0000599E                 mov     ecx, [ebp+var_4] ; this
.text:000059A1                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:000059A6                 add     esp, 4
.text:000059A9                 cmp     ebp, esp
.text:000059AB                 call    __RTC_CheckEsp
.text:000059B0                 mov     esp, ebp
.text:000059B2                 pop     ebp
.text:000059B3                 retn
.text:000059B3 ??1CCOMCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:000059B3
.text:000059B3 _text           ends
.text:000059B3
.text:000059B4 ; ===========================================================================
.text:000059B4
.text:000059B4 ; Segment type: Pure code
.text:000059B4 ; Segment permissions: Read/Execute
.text:000059B4 _text           segment para public 'CODE' use32
.text:000059B4                 assume cs:_text
.text:000059B4                 ;org 59B4h
.text:000059B4 ; COMDAT (pick any)
.text:000059B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059B4
.text:000059B4 ; =============== S U B R O U T I N E =======================================
.text:000059B4
.text:000059B4 ; Attributes: bp-based frame
.text:000059B4
.text:000059B4 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::~CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
.text:000059B4                 public ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:000059B4 ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text:000059B4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::~CCOMCoder(void)+11p
.text:000059B4                                         ; NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:000059B4
.text:000059B4 var_10          = dword ptr -10h
.text:000059B4 var_C           = dword ptr -0Ch
.text:000059B4 var_4           = dword ptr -4
.text:000059B4
.text:000059B4                 push    ebp
.text:000059B5                 mov     ebp, esp
.text:000059B7                 push    0FFFFFFFFh
.text:000059B9                 push    offset __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text:000059BE                 mov     eax, large fs:0
.text:000059C4                 push    eax
.text:000059C5                 push    ecx
.text:000059C6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000059CD                 mov     eax, dword ptr ds:___security_cookie
.text:000059D2                 xor     eax, ebp
.text:000059D4                 push    eax
.text:000059D5                 lea     eax, [ebp+var_C]
.text:000059D8                 mov     large fs:0, eax
.text:000059DE                 mov     [ebp+var_10], ecx
.text:000059E1                 mov     eax, [ebp+var_10]
.text:000059E4                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:000059EA                 mov     ecx, [ebp+var_10]
.text:000059ED                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:000059F4                 mov     edx, [ebp+var_10]
.text:000059F7                 mov     dword ptr [edx+8], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.text:000059FE                 mov     eax, [ebp+var_10]
.text:00005A01                 mov     dword ptr [eax+0Ch], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.text:00005A08                 mov     ecx, [ebp+var_10]
.text:00005A0B                 mov     dword ptr [ecx+10h], offset ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.text:00005A12                 mov     [ebp+var_4], 1
.text:00005A19                 mov     ecx, [ebp+var_10]
.text:00005A1C                 add     ecx, 48h ; 'H'
.text:00005A1F                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00005A24                 mov     byte ptr [ebp+var_4], 0
.text:00005A28                 mov     ecx, [ebp+var_10]
.text:00005A2B                 add     ecx, 40h ; '@'
.text:00005A2E                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00005A33                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005A3A                 mov     ecx, [ebp+var_10]
.text:00005A3D                 add     ecx, 18h        ; this
.text:00005A40                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00005A45                 mov     ecx, [ebp+var_C]
.text:00005A48                 mov     large fs:0, ecx
.text:00005A4F                 pop     ecx
.text:00005A50                 add     esp, 10h
.text:00005A53                 cmp     ebp, esp
.text:00005A55                 call    __RTC_CheckEsp
.text:00005A5A                 mov     esp, ebp
.text:00005A5C                 pop     ebp
.text:00005A5D                 retn
.text:00005A5D ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text:00005A5D
.text:00005A5D ; ---------------------------------------------------------------------------
.text:00005A5E                 align 10h
.text:00005A5E _text           ends
.text:00005A5E
.text$x:00005A60 ; ===========================================================================
.text$x:00005A60
.text$x:00005A60 ; Segment type: Pure code
.text$x:00005A60 ; Segment permissions: Read/Execute
.text$x:00005A60 _text$x         segment para public 'CODE' use32
.text$x:00005A60                 assume cs:_text$x
.text$x:00005A60                 ;org 5A60h
.text$x:00005A60 ; COMDAT (pick associative to section at 59B4)
.text$x:00005A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A60
.text$x:00005A60 ; =============== S U B R O U T I N E =======================================
.text$x:00005A60
.text$x:00005A60
.text$x:00005A60 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 proc near
.text$x:00005A60                                         ; DATA XREF: .xdata$x:00005B08o
.text$x:00005A60                 mov     ecx, [ebp-10h]
.text$x:00005A63                 add     ecx, 18h        ; this
.text$x:00005A66                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00005A66 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0 endp
.text$x:00005A66
.text$x:00005A6B
.text$x:00005A6B ; =============== S U B R O U T I N E =======================================
.text$x:00005A6B
.text$x:00005A6B
.text$x:00005A6B __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 proc near
.text$x:00005A6B                                         ; DATA XREF: .xdata$x:00005B10o
.text$x:00005A6B                 mov     ecx, [ebp-10h]
.text$x:00005A6E                 add     ecx, 40h ; '@'
.text$x:00005A71                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00005A71 __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1 endp
.text$x:00005A71
.text$x:00005A76
.text$x:00005A76 ; =============== S U B R O U T I N E =======================================
.text$x:00005A76
.text$x:00005A76
.text$x:00005A76 __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ proc near
.text$x:00005A76                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+5o
.text$x:00005A76
.text$x:00005A76 arg_4           = dword ptr  8
.text$x:00005A76
.text$x:00005A76                 mov     edx, [esp+arg_4]
.text$x:00005A7A                 lea     eax, [edx+0Ch]
.text$x:00005A7D                 mov     ecx, [edx-8]
.text$x:00005A80                 xor     ecx, eax
.text$x:00005A82                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A87                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.text$x:00005A8C                 jmp     ___CxxFrameHandler3
.text$x:00005A8C __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ endp
.text$x:00005A8C
.text$x:00005A8C ; ---------------------------------------------------------------------------
.text$x:00005A91                 align 4
.text$x:00005A91 _text$x         ends
.text$x:00005A91
.rdata:00005A94 ; ===========================================================================
.rdata:00005A94
.rdata:00005A94 ; Segment type: Pure data
.rdata:00005A94 ; Segment permissions: Read
.rdata:00005A94 _rdata          segment dword public 'DATA' use32
.rdata:00005A94                 assume cs:_rdata
.rdata:00005A94                 ;org 5A94h
.rdata:00005A94 ; COMDAT (pick largest)
.rdata:00005A94                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00005A98                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata:00005A98 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}
.rdata:00005A98 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:00005A98                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+57o
.rdata:00005A98                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00005A9C                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.rdata:00005AA0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.rdata:00005AA4                 dd offset ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z ; NCompress::NDeflate::NDecoder::CCoder::Read(void *,uint,uint *)
.rdata:00005AA4 _rdata          ends
.rdata:00005AA4
.rdata:00005AA8 ; ===========================================================================
.rdata:00005AA8
.rdata:00005AA8 ; Segment type: Pure data
.rdata:00005AA8 ; Segment permissions: Read
.rdata:00005AA8 _rdata          segment dword public 'DATA' use32
.rdata:00005AA8                 assume cs:_rdata
.rdata:00005AA8                 ;org 5AA8h
.rdata:00005AA8 ; COMDAT (pick largest)
.rdata:00005AA8                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata:00005AAC                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata:00005AAC ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}
.rdata:00005AAC ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00005AAC                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+4Do
.rdata:00005AAC                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00005AB0                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.rdata:00005AB4                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.rdata:00005AB8                 dd offset ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z ; NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
.rdata:00005AB8 _rdata          ends
.rdata:00005AB8
.rdata:00005ABC ; ===========================================================================
.rdata:00005ABC
.rdata:00005ABC ; Segment type: Pure data
.rdata:00005ABC ; Segment permissions: Read
.rdata:00005ABC _rdata          segment dword public 'DATA' use32
.rdata:00005ABC                 assume cs:_rdata
.rdata:00005ABC                 ;org 5ABCh
.rdata:00005ABC ; COMDAT (pick largest)
.rdata:00005ABC                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00005AC0                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata:00005AC0 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00005AC0 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00005AC0                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+43o
.rdata:00005AC0                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00005AC4                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.rdata:00005AC8                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.rdata:00005ACC                 dd offset ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::NDeflate::NDecoder::CCoder::SetInStream(ISequentialInStream *)
.rdata:00005AD0                 dd offset ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ ; NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
.rdata:00005AD0 _rdata          ends
.rdata:00005AD0
.rdata:00005AD4 ; ===========================================================================
.rdata:00005AD4
.rdata:00005AD4 ; Segment type: Pure data
.rdata:00005AD4 ; Segment permissions: Read
.rdata:00005AD4 _rdata          segment dword public 'DATA' use32
.rdata:00005AD4                 assume cs:_rdata
.rdata:00005AD4                 ;org 5AD4h
.rdata:00005AD4 ; COMDAT (pick largest)
.rdata:00005AD4                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00005AD8                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00005AD8 ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00005AD8 ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00005AD8                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+39o
.rdata:00005AD8                                         ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00005ADC                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:00005AE0                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ ; [thunk]:NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:00005AE4                 dd offset ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z ; NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00005AE4 _rdata          ends
.rdata:00005AE4
.rdata:00005AE8 ; ===========================================================================
.rdata:00005AE8
.rdata:00005AE8 ; Segment type: Pure data
.rdata:00005AE8 ; Segment permissions: Read
.rdata:00005AE8 _rdata          segment dword public 'DATA' use32
.rdata:00005AE8                 assume cs:_rdata
.rdata:00005AE8                 ;org 5AE8h
.rdata:00005AE8 ; COMDAT (pick largest)
.rdata:00005AE8                 dd offset ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00005AEC                 public ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata:00005AEC ; const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:00005AEC ??_7CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00005AEC                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+30o
.rdata:00005AEC                                         ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:00005AF0                 dd offset ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.rdata:00005AF4                 dd offset ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.rdata:00005AF8                 dd offset ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00005AFC                 dd offset ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z ; NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(uint)
.rdata:00005B00                 dd offset ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NDeflate::NDecoder::CCoder::CodeResume(ISequentialOutStream *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00005B00 _rdata          ends
.rdata:00005B00
.xdata$x:00005B04 ; ===========================================================================
.xdata$x:00005B04
.xdata$x:00005B04 ; Segment type: Pure data
.xdata$x:00005B04 ; Segment permissions: Read
.xdata$x:00005B04 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005B04                 assume cs:_xdata$x
.xdata$x:00005B04                 ;org 5B04h
.xdata$x:00005B04 ; COMDAT (pick associative to section at 59B4)
.xdata$x:00005B04 __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db 0FFh
.xdata$x:00005B04                                         ; DATA XREF: .xdata$x:00005B1Co
.xdata$x:00005B05                 db 0FFh
.xdata$x:00005B06                 db 0FFh
.xdata$x:00005B07                 db 0FFh
.xdata$x:00005B08                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0
.xdata$x:00005B0C                 align 10h
.xdata$x:00005B10                 dd offset __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$1
.xdata$x:00005B14 __ehfuncinfo$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ db  22h ; "
.xdata$x:00005B14                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ+11o
.xdata$x:00005B15                 db    5
.xdata$x:00005B16                 db  93h ; Ã´
.xdata$x:00005B17                 db  19h
.xdata$x:00005B18                 db    2
.xdata$x:00005B19                 db    0
.xdata$x:00005B1A                 db    0
.xdata$x:00005B1B                 db    0
.xdata$x:00005B1C                 dd offset __unwindtable$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ
.xdata$x:00005B20                 db    0
.xdata$x:00005B21                 db    0
.xdata$x:00005B22                 db    0
.xdata$x:00005B23                 db    0
.xdata$x:00005B24                 db    0
.xdata$x:00005B25                 db    0
.xdata$x:00005B26                 db    0
.xdata$x:00005B27                 db    0
.xdata$x:00005B28                 db    0
.xdata$x:00005B29                 db    0
.xdata$x:00005B2A                 db    0
.xdata$x:00005B2B                 db    0
.xdata$x:00005B2C                 db    0
.xdata$x:00005B2D                 db    0
.xdata$x:00005B2E                 db    0
.xdata$x:00005B2F                 db    0
.xdata$x:00005B30                 db    0
.xdata$x:00005B31                 db    0
.xdata$x:00005B32                 db    0
.xdata$x:00005B33                 db    0
.xdata$x:00005B34                 db    1
.xdata$x:00005B35                 db    0
.xdata$x:00005B36                 db    0
.xdata$x:00005B37                 db    0
.xdata$x:00005B37 _xdata$x        ends
.xdata$x:00005B37
.rdata$r:00005B38 ; ===========================================================================
.rdata$r:00005B38
.rdata$r:00005B38 ; Segment type: Pure data
.rdata$r:00005B38 ; Segment permissions: Read
.rdata$r:00005B38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B38                 assume cs:_rdata$r
.rdata$r:00005B38                 ;org 5B38h
.rdata$r:00005B38 ; COMDAT (pick any)
.rdata$r:00005B38                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@
.rdata$r:00005B38 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00005B38 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00005B38                                         ; DATA XREF: .rdata:00005AE8o
.rdata$r:00005B39                 db    0
.rdata$r:00005B3A                 db    0
.rdata$r:00005B3B                 db    0
.rdata$r:00005B3C                 db    0
.rdata$r:00005B3D                 db    0
.rdata$r:00005B3E                 db    0
.rdata$r:00005B3F                 db    0
.rdata$r:00005B40                 db    0
.rdata$r:00005B41                 db    0
.rdata$r:00005B42                 db    0
.rdata$r:00005B43                 db    0
.rdata$r:00005B44                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00005B48                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B48 _rdata$r        ends
.rdata$r:00005B48
.rdata$r:00005B4C ; ===========================================================================
.rdata$r:00005B4C
.rdata$r:00005B4C ; Segment type: Pure data
.rdata$r:00005B4C ; Segment permissions: Read
.rdata$r:00005B4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B4C                 assume cs:_rdata$r
.rdata$r:00005B4C                 ;org 5B4Ch
.rdata$r:00005B4C ; COMDAT (pick any)
.rdata$r:00005B4C                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00005B4C ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00005B4C ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00005B4C                                         ; DATA XREF: .rdata:00005AD4o
.rdata$r:00005B4D                 db    0
.rdata$r:00005B4E                 db    0
.rdata$r:00005B4F                 db    0
.rdata$r:00005B50                 db    4
.rdata$r:00005B51                 db    0
.rdata$r:00005B52                 db    0
.rdata$r:00005B53                 db    0
.rdata$r:00005B54                 db    0
.rdata$r:00005B55                 db    0
.rdata$r:00005B56                 db    0
.rdata$r:00005B57                 db    0
.rdata$r:00005B58                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00005B5C                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B5C _rdata$r        ends
.rdata$r:00005B5C
.rdata$r:00005B60 ; ===========================================================================
.rdata$r:00005B60
.rdata$r:00005B60 ; Segment type: Pure data
.rdata$r:00005B60 ; Segment permissions: Read
.rdata$r:00005B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B60                 assume cs:_rdata$r
.rdata$r:00005B60                 ;org 5B60h
.rdata$r:00005B60 ; COMDAT (pick any)
.rdata$r:00005B60                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@
.rdata$r:00005B60 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00005B60 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00005B60                                         ; DATA XREF: .rdata:00005ABCo
.rdata$r:00005B61                 db    0
.rdata$r:00005B62                 db    0
.rdata$r:00005B63                 db    0
.rdata$r:00005B64                 db    8
.rdata$r:00005B65                 db    0
.rdata$r:00005B66                 db    0
.rdata$r:00005B67                 db    0
.rdata$r:00005B68                 db    0
.rdata$r:00005B69                 db    0
.rdata$r:00005B6A                 db    0
.rdata$r:00005B6B                 db    0
.rdata$r:00005B6C                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00005B70                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B70 _rdata$r        ends
.rdata$r:00005B70
.rdata$r:00005B74 ; ===========================================================================
.rdata$r:00005B74
.rdata$r:00005B74 ; Segment type: Pure data
.rdata$r:00005B74 ; Segment permissions: Read
.rdata$r:00005B74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B74                 assume cs:_rdata$r
.rdata$r:00005B74                 ;org 5B74h
.rdata$r:00005B74 ; COMDAT (pick any)
.rdata$r:00005B74                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@
.rdata$r:00005B74 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetOutStreamSize'}
.rdata$r:00005B74 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BICompressSetOutStreamSize@@@ db    0
.rdata$r:00005B74                                         ; DATA XREF: .rdata:00005AA8o
.rdata$r:00005B75                 db    0
.rdata$r:00005B76                 db    0
.rdata$r:00005B77                 db    0
.rdata$r:00005B78                 db  0Ch
.rdata$r:00005B79                 db    0
.rdata$r:00005B7A                 db    0
.rdata$r:00005B7B                 db    0
.rdata$r:00005B7C                 db    0
.rdata$r:00005B7D                 db    0
.rdata$r:00005B7E                 db    0
.rdata$r:00005B7F                 db    0
.rdata$r:00005B80                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00005B84                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B84 _rdata$r        ends
.rdata$r:00005B84
.rdata$r:00005B88 ; ===========================================================================
.rdata$r:00005B88
.rdata$r:00005B88 ; Segment type: Pure data
.rdata$r:00005B88 ; Segment permissions: Read
.rdata$r:00005B88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005B88                 assume cs:_rdata$r
.rdata$r:00005B88                 ;org 5B88h
.rdata$r:00005B88 ; COMDAT (pick any)
.rdata$r:00005B88                 public ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@
.rdata$r:00005B88 ; const NCompress::NDeflate::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00005B88 ??_R4CCoder@NDecoder@NDeflate@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00005B88                                         ; DATA XREF: .rdata:00005A94o
.rdata$r:00005B89                 db    0
.rdata$r:00005B8A                 db    0
.rdata$r:00005B8B                 db    0
.rdata$r:00005B8C                 db  10h
.rdata$r:00005B8D                 db    0
.rdata$r:00005B8E                 db    0
.rdata$r:00005B8F                 db    0
.rdata$r:00005B90                 db    0
.rdata$r:00005B91                 db    0
.rdata$r:00005B92                 db    0
.rdata$r:00005B93                 db    0
.rdata$r:00005B94                 dd offset ??_R0?AVCCoder@NDecoder@NDeflate@NCompress@@@8 ; NCompress::NDeflate::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00005B98                 dd offset ??_R3CCoder@NDecoder@NDeflate@NCompress@@8 ; NCompress::NDeflate::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005B98 _rdata$r        ends
.rdata$r:00005B98
.text:00005B9C ; ===========================================================================
.text:00005B9C
.text:00005B9C ; Segment type: Pure code
.text:00005B9C ; Segment permissions: Read/Execute
.text:00005B9C _text           segment para public 'CODE' use32
.text:00005B9C                 assume cs:_text
.text:00005B9C                 ;org 5B9Ch
.text:00005B9C ; COMDAT (pick any)
.text:00005B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B9C
.text:00005B9C ; =============== S U B R O U T I N E =======================================
.text:00005B9C
.text:00005B9C ; Attributes: bp-based frame
.text:00005B9C
.text:00005B9C ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00005B9C                 public ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z
.text:00005B9C ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z proc near
.text:00005B9C
.text:00005B9C var_4           = dword ptr -4
.text:00005B9C arg_0           = dword ptr  8
.text:00005B9C
.text:00005B9C                 push    ebp
.text:00005B9D                 mov     ebp, esp
.text:00005B9F                 push    ecx
.text:00005BA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BA7                 mov     [ebp+var_4], ecx
.text:00005BAA                 mov     ecx, [ebp+var_4] ; this
.text:00005BAD                 call    ??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ ; NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)
.text:00005BB2                 mov     eax, [ebp+arg_0]
.text:00005BB5                 and     eax, 1
.text:00005BB8                 jz      short loc_5BC6
.text:00005BBA                 mov     ecx, [ebp+var_4]
.text:00005BBD                 push    ecx             ; void *
.text:00005BBE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005BC3                 add     esp, 4
.text:00005BC6
.text:00005BC6 loc_5BC6:                               ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:00005BC6                 mov     eax, [ebp+var_4]
.text:00005BC9                 add     esp, 4
.text:00005BCC                 cmp     ebp, esp
.text:00005BCE                 call    __RTC_CheckEsp
.text:00005BD3                 mov     esp, ebp
.text:00005BD5                 pop     ebp
.text:00005BD6                 retn    4
.text:00005BD6 ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z endp
.text:00005BD6
.text:00005BD6 ; ---------------------------------------------------------------------------
.text:00005BD9                 align 4
.text:00005BD9 _text           ends
.text:00005BD9
.text:00005BDC ; ===========================================================================
.text:00005BDC
.text:00005BDC ; Segment type: Pure code
.text:00005BDC ; Segment permissions: Read/Execute
.text:00005BDC _text           segment para public 'CODE' use32
.text:00005BDC                 assume cs:_text
.text:00005BDC                 ;org 5BDCh
.text:00005BDC ; COMDAT (pick any)
.text:00005BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BDC
.text:00005BDC ; =============== S U B R O U T I N E =======================================
.text:00005BDC
.text:00005BDC ; Attributes: bp-based frame
.text:00005BDC
.text:00005BDC ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:00005BDC                 public ??1CLzOutWindow@@QAE@XZ
.text:00005BDC ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+8Cp
.text:00005BDC                                         ; __unwindfunclet$??1CCoder@NDecoder@NDeflate@NCompress@@UAE@XZ$0+6j
.text:00005BDC
.text:00005BDC var_4           = dword ptr -4
.text:00005BDC
.text:00005BDC                 push    ebp
.text:00005BDD                 mov     ebp, esp
.text:00005BDF                 push    ecx
.text:00005BE0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BE7                 mov     [ebp+var_4], ecx
.text:00005BEA                 mov     ecx, [ebp+var_4] ; this
.text:00005BED                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00005BF2                 add     esp, 4
.text:00005BF5                 cmp     ebp, esp
.text:00005BF7                 call    __RTC_CheckEsp
.text:00005BFC                 mov     esp, ebp
.text:00005BFE                 pop     ebp
.text:00005BFF                 retn
.text:00005BFF ??1CLzOutWindow@@QAE@XZ endp
.text:00005BFF
.text:00005BFF _text           ends
.text:00005BFF
.text:00005C00 ; ===========================================================================
.text:00005C00
.text:00005C00 ; Segment type: Pure code
.text:00005C00 ; Segment permissions: Read/Execute
.text:00005C00 _text           segment para public 'CODE' use32
.text:00005C00                 assume cs:_text
.text:00005C00                 ;org 5C00h
.text:00005C00 ; COMDAT (pick any)
.text:00005C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C00
.text:00005C00 ; =============== S U B R O U T I N E =======================================
.text:00005C00
.text:00005C00 ; Attributes: bp-based frame
.text:00005C00
.text:00005C00 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00005C00                 public ??1COutBuffer@@QAE@XZ
.text:00005C00 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:00005C00
.text:00005C00 var_4           = dword ptr -4
.text:00005C00
.text:00005C00                 push    ebp
.text:00005C01                 mov     ebp, esp
.text:00005C03                 push    ecx
.text:00005C04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C0B                 mov     [ebp+var_4], ecx
.text:00005C0E                 mov     ecx, [ebp+var_4] ; this
.text:00005C11                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00005C16                 add     esp, 4
.text:00005C19                 cmp     ebp, esp
.text:00005C1B                 call    __RTC_CheckEsp
.text:00005C20                 mov     esp, ebp
.text:00005C22                 pop     ebp
.text:00005C23                 retn
.text:00005C23 ??1COutBuffer@@QAE@XZ endp
.text:00005C23
.text:00005C23 _text           ends
.text:00005C23
.text:00005C24 ; ===========================================================================
.text:00005C24
.text:00005C24 ; Segment type: Pure code
.text:00005C24 ; Segment permissions: Read/Execute
.text:00005C24 _text           segment para public 'CODE' use32
.text:00005C24                 assume cs:_text
.text:00005C24                 ;org 5C24h
.text:00005C24 ; COMDAT (pick any)
.text:00005C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C24
.text:00005C24 ; =============== S U B R O U T I N E =======================================
.text:00005C24
.text:00005C24 ; Attributes: bp-based frame
.text:00005C24
.text:00005C24 ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00005C24                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00005C24 ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00005C24                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::~CCoder(void)+6Bp
.text:00005C24
.text:00005C24 var_4           = dword ptr -4
.text:00005C24
.text:00005C24                 push    ebp
.text:00005C25                 mov     ebp, esp
.text:00005C27                 push    ecx
.text:00005C28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C2F                 mov     [ebp+var_4], ecx
.text:00005C32                 mov     ecx, [ebp+var_4]
.text:00005C35                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00005C3A                 add     esp, 4
.text:00005C3D                 cmp     ebp, esp
.text:00005C3F                 call    __RTC_CheckEsp
.text:00005C44                 mov     esp, ebp
.text:00005C46                 pop     ebp
.text:00005C47                 retn
.text:00005C47 ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00005C47
.text:00005C47 _text           ends
.text:00005C47
.text:00005C48 ; ===========================================================================
.text:00005C48
.text:00005C48 ; Segment type: Pure code
.text:00005C48 ; Segment permissions: Read/Execute
.text:00005C48 _text           segment para public 'CODE' use32
.text:00005C48                 assume cs:_text
.text:00005C48                 ;org 5C48h
.text:00005C48 ; COMDAT (pick any)
.text:00005C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C48
.text:00005C48 ; =============== S U B R O U T I N E =======================================
.text:00005C48
.text:00005C48 ; Attributes: bp-based frame
.text:00005C48
.text:00005C48 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00005C48                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00005C48 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00005C48                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00005C48
.text:00005C48 var_4           = dword ptr -4
.text:00005C48
.text:00005C48                 push    ebp
.text:00005C49                 mov     ebp, esp
.text:00005C4B                 push    ecx
.text:00005C4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C53                 mov     [ebp+var_4], ecx
.text:00005C56                 mov     ecx, [ebp+var_4]
.text:00005C59                 add     ecx, 8          ; this
.text:00005C5C                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00005C61                 add     esp, 4
.text:00005C64                 cmp     ebp, esp
.text:00005C66                 call    __RTC_CheckEsp
.text:00005C6B                 mov     esp, ebp
.text:00005C6D                 pop     ebp
.text:00005C6E                 retn
.text:00005C6E ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00005C6E
.text:00005C6E ; ---------------------------------------------------------------------------
.text:00005C6F                 align 10h
.text:00005C6F _text           ends
.text:00005C6F
.text:00005C70 ; ===========================================================================
.text:00005C70
.text:00005C70 ; Segment type: Pure code
.text:00005C70 ; Segment permissions: Read/Execute
.text:00005C70 _text           segment para public 'CODE' use32
.text:00005C70                 assume cs:_text
.text:00005C70                 ;org 5C70h
.text:00005C70 ; COMDAT (pick any)
.text:00005C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C70
.text:00005C70 ; =============== S U B R O U T I N E =======================================
.text:00005C70
.text:00005C70 ; Attributes: bp-based frame
.text:00005C70
.text:00005C70 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00005C70                 public ??1CInBuffer@@QAE@XZ
.text:00005C70 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00005C70
.text:00005C70 var_4           = dword ptr -4
.text:00005C70
.text:00005C70                 push    ebp
.text:00005C71                 mov     ebp, esp
.text:00005C73                 push    ecx
.text:00005C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C7B                 mov     [ebp+var_4], ecx
.text:00005C7E                 mov     ecx, [ebp+var_4] ; this
.text:00005C81                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00005C86                 add     esp, 4
.text:00005C89                 cmp     ebp, esp
.text:00005C8B                 call    __RTC_CheckEsp
.text:00005C90                 mov     esp, ebp
.text:00005C92                 pop     ebp
.text:00005C93                 retn
.text:00005C93 ??1CInBuffer@@QAE@XZ endp
.text:00005C93
.text:00005C93 _text           ends
.text:00005C93
.text:00005C94 ; ===========================================================================
.text:00005C94
.text:00005C94 ; Segment type: Pure code
.text:00005C94 ; Segment permissions: Read/Execute
.text:00005C94 _text           segment para public 'CODE' use32
.text:00005C94                 assume cs:_text
.text:00005C94                 ;org 5C94h
.text:00005C94 ; COMDAT (pick any)
.text:00005C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C94
.text:00005C94 ; =============== S U B R O U T I N E =======================================
.text:00005C94
.text:00005C94 ; Attributes: bp-based frame
.text:00005C94
.text:00005C94 ; _DWORD __thiscall NArchive::CSingleMethodProps::CSingleMethodProps(NArchive::CSingleMethodProps *__hidden this)
.text:00005C94                 public ??0CSingleMethodProps@NArchive@@QAE@XZ
.text:00005C94 ??0CSingleMethodProps@NArchive@@QAE@XZ proc near
.text:00005C94                                         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+CAp
.text:00005C94
.text:00005C94 var_10          = dword ptr -10h
.text:00005C94 var_C           = dword ptr -0Ch
.text:00005C94 var_4           = dword ptr -4
.text:00005C94
.text:00005C94                 push    ebp
.text:00005C95                 mov     ebp, esp
.text:00005C97                 push    0FFFFFFFFh
.text:00005C99                 push    offset __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ
.text:00005C9E                 mov     eax, large fs:0
.text:00005CA4                 push    eax
.text:00005CA5                 push    ecx
.text:00005CA6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005CAD                 mov     eax, dword ptr ds:___security_cookie
.text:00005CB2                 xor     eax, ebp
.text:00005CB4                 push    eax
.text:00005CB5                 lea     eax, [ebp+var_C]
.text:00005CB8                 mov     large fs:0, eax
.text:00005CBE                 mov     [ebp+var_10], ecx
.text:00005CC1                 mov     ecx, [ebp+var_10] ; this
.text:00005CC4                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00005CC9                 mov     [ebp+var_4], 0
.text:00005CD0                 mov     ecx, [ebp+var_10] ; this
.text:00005CD3                 call    ?Init@CSingleMethodProps@NArchive@@QAEXXZ ; NArchive::CSingleMethodProps::Init(void)
.text:00005CD8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005CDF                 mov     eax, [ebp+var_10]
.text:00005CE2                 mov     ecx, [ebp+var_C]
.text:00005CE5                 mov     large fs:0, ecx
.text:00005CEC                 pop     ecx
.text:00005CED                 add     esp, 10h
.text:00005CF0                 cmp     ebp, esp
.text:00005CF2                 call    __RTC_CheckEsp
.text:00005CF7                 mov     esp, ebp
.text:00005CF9                 pop     ebp
.text:00005CFA                 retn
.text:00005CFA ??0CSingleMethodProps@NArchive@@QAE@XZ endp
.text:00005CFA
.text:00005CFA ; ---------------------------------------------------------------------------
.text:00005CFB                 align 4
.text:00005CFB _text           ends
.text:00005CFB
.text$x:00005CFC ; ===========================================================================
.text$x:00005CFC
.text$x:00005CFC ; Segment type: Pure code
.text$x:00005CFC ; Segment permissions: Read/Execute
.text$x:00005CFC _text$x         segment para public 'CODE' use32
.text$x:00005CFC                 assume cs:_text$x
.text$x:00005CFC                 ;org 5CFCh
.text$x:00005CFC ; COMDAT (pick associative to section at 5C94)
.text$x:00005CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005CFC
.text$x:00005CFC ; =============== S U B R O U T I N E =======================================
.text$x:00005CFC
.text$x:00005CFC
.text$x:00005CFC __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00005CFC                                         ; DATA XREF: .xdata$x:00005D24o
.text$x:00005CFC                 mov     ecx, [ebp-10h]  ; this
.text$x:00005CFF                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00005CFF __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:00005CFF
.text$x:00005D04
.text$x:00005D04 ; =============== S U B R O U T I N E =======================================
.text$x:00005D04
.text$x:00005D04
.text$x:00005D04 __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ proc near
.text$x:00005D04                                         ; DATA XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+5o
.text$x:00005D04
.text$x:00005D04 arg_4           = dword ptr  8
.text$x:00005D04
.text$x:00005D04                 mov     edx, [esp+arg_4]
.text$x:00005D08                 lea     eax, [edx+0Ch]
.text$x:00005D0B                 mov     ecx, [edx-8]
.text$x:00005D0E                 xor     ecx, eax
.text$x:00005D10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D15                 mov     eax, offset __ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ
.text$x:00005D1A                 jmp     ___CxxFrameHandler3
.text$x:00005D1A __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ endp
.text$x:00005D1A
.text$x:00005D1A ; ---------------------------------------------------------------------------
.text$x:00005D1F                 align 10h
.text$x:00005D1F _text$x         ends
.text$x:00005D1F
.xdata$x:00005D20 ; ===========================================================================
.xdata$x:00005D20
.xdata$x:00005D20 ; Segment type: Pure data
.xdata$x:00005D20 ; Segment permissions: Read
.xdata$x:00005D20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005D20                 assume cs:_xdata$x
.xdata$x:00005D20                 ;org 5D20h
.xdata$x:00005D20 ; COMDAT (pick associative to section at 5C94)
.xdata$x:00005D20 __unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005D20                                         ; DATA XREF: .xdata$x:00005D30o
.xdata$x:00005D21                 db 0FFh
.xdata$x:00005D22                 db 0FFh
.xdata$x:00005D23                 db 0FFh
.xdata$x:00005D24                 dd offset __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00005D28 __ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005D28                                         ; DATA XREF: __ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00005D29                 db    5
.xdata$x:00005D2A                 db  93h ; Ã´
.xdata$x:00005D2B                 db  19h
.xdata$x:00005D2C                 db    1
.xdata$x:00005D2D                 db    0
.xdata$x:00005D2E                 db    0
.xdata$x:00005D2F                 db    0
.xdata$x:00005D30                 dd offset __unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ
.xdata$x:00005D34                 db    0
.xdata$x:00005D35                 db    0
.xdata$x:00005D36                 db    0
.xdata$x:00005D37                 db    0
.xdata$x:00005D38                 db    0
.xdata$x:00005D39                 db    0
.xdata$x:00005D3A                 db    0
.xdata$x:00005D3B                 db    0
.xdata$x:00005D3C                 db    0
.xdata$x:00005D3D                 db    0
.xdata$x:00005D3E                 db    0
.xdata$x:00005D3F                 db    0
.xdata$x:00005D40                 db    0
.xdata$x:00005D41                 db    0
.xdata$x:00005D42                 db    0
.xdata$x:00005D43                 db    0
.xdata$x:00005D44                 db    0
.xdata$x:00005D45                 db    0
.xdata$x:00005D46                 db    0
.xdata$x:00005D47                 db    0
.xdata$x:00005D48                 db    1
.xdata$x:00005D49                 db    0
.xdata$x:00005D4A                 db    0
.xdata$x:00005D4B                 db    0
.xdata$x:00005D4B _xdata$x        ends
.xdata$x:00005D4B
.text:00005D4C ; ===========================================================================
.text:00005D4C
.text:00005D4C ; Segment type: Pure code
.text:00005D4C ; Segment permissions: Read/Execute
.text:00005D4C _text           segment para public 'CODE' use32
.text:00005D4C                 assume cs:_text
.text:00005D4C                 ;org 5D4Ch
.text:00005D4C ; COMDAT (pick any)
.text:00005D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D4C
.text:00005D4C ; =============== S U B R O U T I N E =======================================
.text:00005D4C
.text:00005D4C ; Attributes: bp-based frame
.text:00005D4C
.text:00005D4C ; _DWORD __thiscall COneMethodInfo::COneMethodInfo(COneMethodInfo *__hidden this)
.text:00005D4C                 public ??0COneMethodInfo@@QAE@XZ
.text:00005D4C ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+30p
.text:00005D4C
.text:00005D4C var_10          = dword ptr -10h
.text:00005D4C var_C           = dword ptr -0Ch
.text:00005D4C var_4           = dword ptr -4
.text:00005D4C
.text:00005D4C                 push    ebp
.text:00005D4D                 mov     ebp, esp
.text:00005D4F                 push    0FFFFFFFFh
.text:00005D51                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:00005D56                 mov     eax, large fs:0
.text:00005D5C                 push    eax
.text:00005D5D                 push    ecx
.text:00005D5E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005D65                 mov     eax, dword ptr ds:___security_cookie
.text:00005D6A                 xor     eax, ebp
.text:00005D6C                 push    eax
.text:00005D6D                 lea     eax, [ebp+var_C]
.text:00005D70                 mov     large fs:0, eax
.text:00005D76                 mov     [ebp+var_10], ecx
.text:00005D79                 mov     ecx, [ebp+var_10] ; this
.text:00005D7C                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00005D81                 mov     [ebp+var_4], 0
.text:00005D88                 mov     ecx, [ebp+var_10]
.text:00005D8B                 add     ecx, 0Ch
.text:00005D8E                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00005D93                 mov     byte ptr [ebp+var_4], 1
.text:00005D97                 mov     ecx, [ebp+var_10]
.text:00005D9A                 add     ecx, 18h
.text:00005D9D                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00005DA2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005DA9                 mov     eax, [ebp+var_10]
.text:00005DAC                 mov     ecx, [ebp+var_C]
.text:00005DAF                 mov     large fs:0, ecx
.text:00005DB6                 pop     ecx
.text:00005DB7                 add     esp, 10h
.text:00005DBA                 cmp     ebp, esp
.text:00005DBC                 call    __RTC_CheckEsp
.text:00005DC1                 mov     esp, ebp
.text:00005DC3                 pop     ebp
.text:00005DC4                 retn
.text:00005DC4 ??0COneMethodInfo@@QAE@XZ endp
.text:00005DC4
.text:00005DC4 ; ---------------------------------------------------------------------------
.text:00005DC5                 align 4
.text:00005DC5 _text           ends
.text:00005DC5
.text$x:00005DC8 ; ===========================================================================
.text$x:00005DC8
.text$x:00005DC8 ; Segment type: Pure code
.text$x:00005DC8 ; Segment permissions: Read/Execute
.text$x:00005DC8 _text$x         segment para public 'CODE' use32
.text$x:00005DC8                 assume cs:_text$x
.text$x:00005DC8                 ;org 5DC8h
.text$x:00005DC8 ; COMDAT (pick associative to section at 5D4C)
.text$x:00005DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DC8
.text$x:00005DC8 ; =============== S U B R O U T I N E =======================================
.text$x:00005DC8
.text$x:00005DC8
.text$x:00005DC8 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00005DC8                                         ; DATA XREF: .xdata$x:00005DFCo
.text$x:00005DC8                 mov     ecx, [ebp-10h]  ; this
.text$x:00005DCB                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00005DCB __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:00005DCB
.text$x:00005DD0
.text$x:00005DD0 ; =============== S U B R O U T I N E =======================================
.text$x:00005DD0
.text$x:00005DD0
.text$x:00005DD0 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00005DD0                                         ; DATA XREF: .xdata$x:00005E04o
.text$x:00005DD0                 mov     ecx, [ebp-10h]
.text$x:00005DD3                 add     ecx, 0Ch        ; this
.text$x:00005DD6                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005DD6 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:00005DD6
.text$x:00005DDB
.text$x:00005DDB ; =============== S U B R O U T I N E =======================================
.text$x:00005DDB
.text$x:00005DDB
.text$x:00005DDB __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:00005DDB                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:00005DDB
.text$x:00005DDB arg_4           = dword ptr  8
.text$x:00005DDB
.text$x:00005DDB                 mov     edx, [esp+arg_4]
.text$x:00005DDF                 lea     eax, [edx+0Ch]
.text$x:00005DE2                 mov     ecx, [edx-8]
.text$x:00005DE5                 xor     ecx, eax
.text$x:00005DE7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DEC                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:00005DF1                 jmp     ___CxxFrameHandler3
.text$x:00005DF1 __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:00005DF1
.text$x:00005DF1 ; ---------------------------------------------------------------------------
.text$x:00005DF6                 align 4
.text$x:00005DF6 _text$x         ends
.text$x:00005DF6
.xdata$x:00005DF8 ; ===========================================================================
.xdata$x:00005DF8
.xdata$x:00005DF8 ; Segment type: Pure data
.xdata$x:00005DF8 ; Segment permissions: Read
.xdata$x:00005DF8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005DF8                 assume cs:_xdata$x
.xdata$x:00005DF8                 ;org 5DF8h
.xdata$x:00005DF8 ; COMDAT (pick associative to section at 5D4C)
.xdata$x:00005DF8 __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00005DF8                                         ; DATA XREF: .xdata$x:00005E10o
.xdata$x:00005DF9                 db 0FFh
.xdata$x:00005DFA                 db 0FFh
.xdata$x:00005DFB                 db 0FFh
.xdata$x:00005DFC                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:00005E00                 db    0
.xdata$x:00005E01                 db    0
.xdata$x:00005E02                 db    0
.xdata$x:00005E03                 db    0
.xdata$x:00005E04                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:00005E08 __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00005E08                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:00005E09                 db    5
.xdata$x:00005E0A                 db  93h ; Ã´
.xdata$x:00005E0B                 db  19h
.xdata$x:00005E0C                 db    2
.xdata$x:00005E0D                 db    0
.xdata$x:00005E0E                 db    0
.xdata$x:00005E0F                 db    0
.xdata$x:00005E10                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00005E14                 db    0
.xdata$x:00005E15                 db    0
.xdata$x:00005E16                 db    0
.xdata$x:00005E17                 db    0
.xdata$x:00005E18                 db    0
.xdata$x:00005E19                 db    0
.xdata$x:00005E1A                 db    0
.xdata$x:00005E1B                 db    0
.xdata$x:00005E1C                 db    0
.xdata$x:00005E1D                 db    0
.xdata$x:00005E1E                 db    0
.xdata$x:00005E1F                 db    0
.xdata$x:00005E20                 db    0
.xdata$x:00005E21                 db    0
.xdata$x:00005E22                 db    0
.xdata$x:00005E23                 db    0
.xdata$x:00005E24                 db    0
.xdata$x:00005E25                 db    0
.xdata$x:00005E26                 db    0
.xdata$x:00005E27                 db    0
.xdata$x:00005E28                 db    1
.xdata$x:00005E29                 db    0
.xdata$x:00005E2A                 db    0
.xdata$x:00005E2B                 db    0
.xdata$x:00005E2B _xdata$x        ends
.xdata$x:00005E2B
.text:00005E2C ; ===========================================================================
.text:00005E2C
.text:00005E2C ; Segment type: Pure code
.text:00005E2C ; Segment permissions: Read/Execute
.text:00005E2C _text           segment para public 'CODE' use32
.text:00005E2C                 assume cs:_text
.text:00005E2C                 ;org 5E2Ch
.text:00005E2C ; COMDAT (pick any)
.text:00005E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E2C
.text:00005E2C ; =============== S U B R O U T I N E =======================================
.text:00005E2C
.text:00005E2C ; Attributes: bp-based frame
.text:00005E2C
.text:00005E2C ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:00005E2C                 public ??1COneMethodInfo@@QAE@XZ
.text:00005E2C ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0+3j
.text:00005E2C                                         ; NArchive::CSingleMethodProps::~CSingleMethodProps(void)+11p
.text:00005E2C
.text:00005E2C var_10          = dword ptr -10h
.text:00005E2C var_C           = dword ptr -0Ch
.text:00005E2C var_4           = dword ptr -4
.text:00005E2C
.text:00005E2C                 push    ebp
.text:00005E2D                 mov     ebp, esp
.text:00005E2F                 push    0FFFFFFFFh
.text:00005E31                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:00005E36                 mov     eax, large fs:0
.text:00005E3C                 push    eax
.text:00005E3D                 push    ecx
.text:00005E3E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00005E45                 mov     eax, dword ptr ds:___security_cookie
.text:00005E4A                 xor     eax, ebp
.text:00005E4C                 push    eax
.text:00005E4D                 lea     eax, [ebp+var_C]
.text:00005E50                 mov     large fs:0, eax
.text:00005E56                 mov     [ebp+var_10], ecx
.text:00005E59                 mov     [ebp+var_4], 1
.text:00005E60                 mov     ecx, [ebp+var_10]
.text:00005E63                 add     ecx, 18h        ; this
.text:00005E66                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00005E6B                 mov     byte ptr [ebp+var_4], 0
.text:00005E6F                 mov     ecx, [ebp+var_10]
.text:00005E72                 add     ecx, 0Ch        ; this
.text:00005E75                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00005E7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005E81                 mov     ecx, [ebp+var_10] ; this
.text:00005E84                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00005E89                 mov     ecx, [ebp+var_C]
.text:00005E8C                 mov     large fs:0, ecx
.text:00005E93                 pop     ecx
.text:00005E94                 add     esp, 10h
.text:00005E97                 cmp     ebp, esp
.text:00005E99                 call    __RTC_CheckEsp
.text:00005E9E                 mov     esp, ebp
.text:00005EA0                 pop     ebp
.text:00005EA1                 retn
.text:00005EA1 ??1COneMethodInfo@@QAE@XZ endp
.text:00005EA1
.text:00005EA1 ; ---------------------------------------------------------------------------
.text:00005EA2                 align 4
.text:00005EA2 _text           ends
.text:00005EA2
.text$x:00005EA4 ; ===========================================================================
.text$x:00005EA4
.text$x:00005EA4 ; Segment type: Pure code
.text$x:00005EA4 ; Segment permissions: Read/Execute
.text$x:00005EA4 _text$x         segment para public 'CODE' use32
.text$x:00005EA4                 assume cs:_text$x
.text$x:00005EA4                 ;org 5EA4h
.text$x:00005EA4 ; COMDAT (pick associative to section at 5E2C)
.text$x:00005EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EA4
.text$x:00005EA4 ; =============== S U B R O U T I N E =======================================
.text$x:00005EA4
.text$x:00005EA4
.text$x:00005EA4 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00005EA4                                         ; DATA XREF: .xdata$x:00005ED8o
.text$x:00005EA4                 mov     ecx, [ebp-10h]  ; this
.text$x:00005EA7                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00005EA7 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00005EA7
.text$x:00005EAC
.text$x:00005EAC ; =============== S U B R O U T I N E =======================================
.text$x:00005EAC
.text$x:00005EAC
.text$x:00005EAC __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00005EAC                                         ; DATA XREF: .xdata$x:00005EE0o
.text$x:00005EAC                 mov     ecx, [ebp-10h]
.text$x:00005EAF                 add     ecx, 0Ch        ; this
.text$x:00005EB2                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00005EB2 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:00005EB2
.text$x:00005EB7
.text$x:00005EB7 ; =============== S U B R O U T I N E =======================================
.text$x:00005EB7
.text$x:00005EB7
.text$x:00005EB7 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00005EB7                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00005EB7
.text$x:00005EB7 arg_4           = dword ptr  8
.text$x:00005EB7
.text$x:00005EB7                 mov     edx, [esp+arg_4]
.text$x:00005EBB                 lea     eax, [edx+0Ch]
.text$x:00005EBE                 mov     ecx, [edx-8]
.text$x:00005EC1                 xor     ecx, eax
.text$x:00005EC3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EC8                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:00005ECD                 jmp     ___CxxFrameHandler3
.text$x:00005ECD __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:00005ECD
.text$x:00005ECD ; ---------------------------------------------------------------------------
.text$x:00005ED2                 align 4
.text$x:00005ED2 _text$x         ends
.text$x:00005ED2
.xdata$x:00005ED4 ; ===========================================================================
.xdata$x:00005ED4
.xdata$x:00005ED4 ; Segment type: Pure data
.xdata$x:00005ED4 ; Segment permissions: Read
.xdata$x:00005ED4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005ED4                 assume cs:_xdata$x
.xdata$x:00005ED4                 ;org 5ED4h
.xdata$x:00005ED4 ; COMDAT (pick associative to section at 5E2C)
.xdata$x:00005ED4 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00005ED4                                         ; DATA XREF: .xdata$x:00005EECo
.xdata$x:00005ED5                 db 0FFh
.xdata$x:00005ED6                 db 0FFh
.xdata$x:00005ED7                 db 0FFh
.xdata$x:00005ED8                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:00005EDC                 align 10h
.xdata$x:00005EE0                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00005EE4 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00005EE4                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00005EE5                 db    5
.xdata$x:00005EE6                 db  93h ; Ã´
.xdata$x:00005EE7                 db  19h
.xdata$x:00005EE8                 db    2
.xdata$x:00005EE9                 db    0
.xdata$x:00005EEA                 db    0
.xdata$x:00005EEB                 db    0
.xdata$x:00005EEC                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:00005EF0                 db    0
.xdata$x:00005EF1                 db    0
.xdata$x:00005EF2                 db    0
.xdata$x:00005EF3                 db    0
.xdata$x:00005EF4                 db    0
.xdata$x:00005EF5                 db    0
.xdata$x:00005EF6                 db    0
.xdata$x:00005EF7                 db    0
.xdata$x:00005EF8                 db    0
.xdata$x:00005EF9                 db    0
.xdata$x:00005EFA                 db    0
.xdata$x:00005EFB                 db    0
.xdata$x:00005EFC                 db    0
.xdata$x:00005EFD                 db    0
.xdata$x:00005EFE                 db    0
.xdata$x:00005EFF                 db    0
.xdata$x:00005F00                 db    0
.xdata$x:00005F01                 db    0
.xdata$x:00005F02                 db    0
.xdata$x:00005F03                 db    0
.xdata$x:00005F04                 db    1
.xdata$x:00005F05                 db    0
.xdata$x:00005F06                 db    0
.xdata$x:00005F07                 db    0
.xdata$x:00005F07 _xdata$x        ends
.xdata$x:00005F07
.text:00005F08 ; ===========================================================================
.text:00005F08
.text:00005F08 ; Segment type: Pure code
.text:00005F08 ; Segment permissions: Read/Execute
.text:00005F08 _text           segment para public 'CODE' use32
.text:00005F08                 assume cs:_text
.text:00005F08                 ;org 5F08h
.text:00005F08 ; COMDAT (pick any)
.text:00005F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F08
.text:00005F08 ; =============== S U B R O U T I N E =======================================
.text:00005F08
.text:00005F08 ; Attributes: bp-based frame
.text:00005F08
.text:00005F08 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:00005F08                 public ??0CMethodProps@@QAE@XZ
.text:00005F08 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:00005F08
.text:00005F08 var_4           = dword ptr -4
.text:00005F08
.text:00005F08                 push    ebp
.text:00005F09                 mov     ebp, esp
.text:00005F0B                 push    ecx
.text:00005F0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F13                 mov     [ebp+var_4], ecx
.text:00005F16                 mov     ecx, [ebp+var_4]
.text:00005F19                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00005F1E                 mov     eax, [ebp+var_4]
.text:00005F21                 add     esp, 4
.text:00005F24                 cmp     ebp, esp
.text:00005F26                 call    __RTC_CheckEsp
.text:00005F2B                 mov     esp, ebp
.text:00005F2D                 pop     ebp
.text:00005F2E                 retn
.text:00005F2E ??0CMethodProps@@QAE@XZ endp
.text:00005F2E
.text:00005F2E ; ---------------------------------------------------------------------------
.text:00005F2F                 align 10h
.text:00005F2F _text           ends
.text:00005F2F
.text:00005F30 ; ===========================================================================
.text:00005F30
.text:00005F30 ; Segment type: Pure code
.text:00005F30 ; Segment permissions: Read/Execute
.text:00005F30 _text           segment para public 'CODE' use32
.text:00005F30                 assume cs:_text
.text:00005F30                 ;org 5F30h
.text:00005F30 ; COMDAT (pick any)
.text:00005F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F30
.text:00005F30 ; =============== S U B R O U T I N E =======================================
.text:00005F30
.text:00005F30 ; Attributes: bp-based frame
.text:00005F30
.text:00005F30 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00005F30                 public ??1CMethodProps@@QAE@XZ
.text:00005F30 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:00005F30                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:00005F30
.text:00005F30 var_4           = dword ptr -4
.text:00005F30
.text:00005F30                 push    ebp
.text:00005F31                 mov     ebp, esp
.text:00005F33                 push    ecx
.text:00005F34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F3B                 mov     [ebp+var_4], ecx
.text:00005F3E                 mov     ecx, [ebp+var_4] ; this
.text:00005F41                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00005F46                 add     esp, 4
.text:00005F49                 cmp     ebp, esp
.text:00005F4B                 call    __RTC_CheckEsp
.text:00005F50                 mov     esp, ebp
.text:00005F52                 pop     ebp
.text:00005F53                 retn
.text:00005F53 ??1CMethodProps@@QAE@XZ endp
.text:00005F53
.text:00005F53 _text           ends
.text:00005F53
.text:00005F54 ; ===========================================================================
.text:00005F54
.text:00005F54 ; Segment type: Pure code
.text:00005F54 ; Segment permissions: Read/Execute
.text:00005F54 _text           segment para public 'CODE' use32
.text:00005F54                 assume cs:_text
.text:00005F54                 ;org 5F54h
.text:00005F54 ; COMDAT (pick any)
.text:00005F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F54
.text:00005F54 ; =============== S U B R O U T I N E =======================================
.text:00005F54
.text:00005F54 ; Attributes: bp-based frame
.text:00005F54
.text:00005F54 ; public: __thiscall CProps::CProps(void)
.text:00005F54                 public ??0CProps@@QAE@XZ
.text:00005F54 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00005F54
.text:00005F54 var_4           = dword ptr -4
.text:00005F54
.text:00005F54                 push    ebp
.text:00005F55                 mov     ebp, esp
.text:00005F57                 push    ecx
.text:00005F58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F5F                 mov     [ebp+var_4], ecx
.text:00005F62                 mov     ecx, [ebp+var_4]
.text:00005F65                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00005F6A                 mov     eax, [ebp+var_4]
.text:00005F6D                 add     esp, 4
.text:00005F70                 cmp     ebp, esp
.text:00005F72                 call    __RTC_CheckEsp
.text:00005F77                 mov     esp, ebp
.text:00005F79                 pop     ebp
.text:00005F7A                 retn
.text:00005F7A ??0CProps@@QAE@XZ endp
.text:00005F7A
.text:00005F7A ; ---------------------------------------------------------------------------
.text:00005F7B                 align 4
.text:00005F7B _text           ends
.text:00005F7B
.text:00005F7C ; ===========================================================================
.text:00005F7C
.text:00005F7C ; Segment type: Pure code
.text:00005F7C ; Segment permissions: Read/Execute
.text:00005F7C _text           segment para public 'CODE' use32
.text:00005F7C                 assume cs:_text
.text:00005F7C                 ;org 5F7Ch
.text:00005F7C ; COMDAT (pick any)
.text:00005F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F7C
.text:00005F7C ; =============== S U B R O U T I N E =======================================
.text:00005F7C
.text:00005F7C ; Attributes: bp-based frame
.text:00005F7C
.text:00005F7C ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00005F7C                 public ??1CProps@@QAE@XZ
.text:00005F7C ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00005F7C
.text:00005F7C var_4           = dword ptr -4
.text:00005F7C
.text:00005F7C                 push    ebp
.text:00005F7D                 mov     ebp, esp
.text:00005F7F                 push    ecx
.text:00005F80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005F87                 mov     [ebp+var_4], ecx
.text:00005F8A                 mov     ecx, [ebp+var_4]
.text:00005F8D                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00005F92                 add     esp, 4
.text:00005F95                 cmp     ebp, esp
.text:00005F97                 call    __RTC_CheckEsp
.text:00005F9C                 mov     esp, ebp
.text:00005F9E                 pop     ebp
.text:00005F9F                 retn
.text:00005F9F ??1CProps@@QAE@XZ endp
.text:00005F9F
.text:00005F9F _text           ends
.text:00005F9F
.text:00005FA0 ; ===========================================================================
.text:00005FA0
.text:00005FA0 ; Segment type: Pure code
.text:00005FA0 ; Segment permissions: Read/Execute
.text:00005FA0 _text           segment para public 'CODE' use32
.text:00005FA0                 assume cs:_text
.text:00005FA0                 ;org 5FA0h
.text:00005FA0 ; COMDAT (pick any)
.text:00005FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FA0
.text:00005FA0 ; =============== S U B R O U T I N E =======================================
.text:00005FA0
.text:00005FA0 ; Attributes: bp-based frame
.text:00005FA0
.text:00005FA0 ; __int32 __stdcall NArchive::NGz::CHandler::QueryInterface(NArchive::NGz::CHandler *this, const struct _GUID *Buf1, void **)
.text:00005FA0                 public ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00005FA0 ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005FA0                                         ; CODE XREF: [thunk]:NArchive::NGz::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00005FA0                                         ; [thunk]:NArchive::NGz::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00005FA0
.text:00005FA0 var_C           = dword ptr -0Ch
.text:00005FA0 var_8           = dword ptr -8
.text:00005FA0 var_4           = dword ptr -4
.text:00005FA0 this            = dword ptr  8
.text:00005FA0 Buf1            = dword ptr  0Ch
.text:00005FA0 arg_8           = dword ptr  10h
.text:00005FA0
.text:00005FA0                 push    ebp
.text:00005FA1                 mov     ebp, esp
.text:00005FA3                 sub     esp, 0Ch
.text:00005FA6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00005FAD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005FB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FBB                 mov     eax, [ebp+arg_8]
.text:00005FBE                 mov     dword ptr [eax], 0
.text:00005FC4                 push    offset _IID_IUnknown ; Buf2
.text:00005FC9                 mov     ecx, [ebp+Buf1]
.text:00005FCC                 push    ecx             ; Buf1
.text:00005FCD                 call    ___@8           ; __(x,x)
.text:00005FD2                 test    eax, eax
.text:00005FD4                 jz      short loc_5FE3
.text:00005FD6                 mov     edx, [ebp+arg_8]
.text:00005FD9                 mov     eax, [ebp+this]
.text:00005FDC                 mov     [edx], eax
.text:00005FDE                 jmp     loc_60A5
.text:00005FE3 ; ---------------------------------------------------------------------------
.text:00005FE3
.text:00005FE3 loc_5FE3:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+34j
.text:00005FE3                 push    offset _IID_IInArchive ; Buf2
.text:00005FE8                 mov     ecx, [ebp+Buf1]
.text:00005FEB                 push    ecx             ; Buf1
.text:00005FEC                 call    ___@8           ; __(x,x)
.text:00005FF1                 test    eax, eax
.text:00005FF3                 jz      short loc_6002
.text:00005FF5                 mov     edx, [ebp+arg_8]
.text:00005FF8                 mov     eax, [ebp+this]
.text:00005FFB                 mov     [edx], eax
.text:00005FFD                 jmp     loc_60A5
.text:00006002 ; ---------------------------------------------------------------------------
.text:00006002
.text:00006002 loc_6002:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+53j
.text:00006002                 push    offset _IID_IArchiveOpenSeq ; Buf2
.text:00006007                 mov     ecx, [ebp+Buf1]
.text:0000600A                 push    ecx             ; Buf1
.text:0000600B                 call    ___@8           ; __(x,x)
.text:00006010                 test    eax, eax
.text:00006012                 jz      short loc_6036
.text:00006014                 cmp     [ebp+this], 0
.text:00006018                 jz      short loc_6025
.text:0000601A                 mov     edx, [ebp+this]
.text:0000601D                 add     edx, 4
.text:00006020                 mov     [ebp+var_4], edx
.text:00006023                 jmp     short loc_602C
.text:00006025 ; ---------------------------------------------------------------------------
.text:00006025
.text:00006025 loc_6025:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+78j
.text:00006025                 mov     [ebp+var_4], 0
.text:0000602C
.text:0000602C loc_602C:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+83j
.text:0000602C                 mov     eax, [ebp+arg_8]
.text:0000602F                 mov     ecx, [ebp+var_4]
.text:00006032                 mov     [eax], ecx
.text:00006034                 jmp     short loc_60A5
.text:00006036 ; ---------------------------------------------------------------------------
.text:00006036
.text:00006036 loc_6036:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+72j
.text:00006036                 push    offset _IID_IOutArchive ; Buf2
.text:0000603B                 mov     edx, [ebp+Buf1]
.text:0000603E                 push    edx             ; Buf1
.text:0000603F                 call    ___@8           ; __(x,x)
.text:00006044                 test    eax, eax
.text:00006046                 jz      short loc_606A
.text:00006048                 cmp     [ebp+this], 0
.text:0000604C                 jz      short loc_6059
.text:0000604E                 mov     eax, [ebp+this]
.text:00006051                 add     eax, 8
.text:00006054                 mov     [ebp+var_8], eax
.text:00006057                 jmp     short loc_6060
.text:00006059 ; ---------------------------------------------------------------------------
.text:00006059
.text:00006059 loc_6059:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+ACj
.text:00006059                 mov     [ebp+var_8], 0
.text:00006060
.text:00006060 loc_6060:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+B7j
.text:00006060                 mov     ecx, [ebp+arg_8]
.text:00006063                 mov     edx, [ebp+var_8]
.text:00006066                 mov     [ecx], edx
.text:00006068                 jmp     short loc_60A5
.text:0000606A ; ---------------------------------------------------------------------------
.text:0000606A
.text:0000606A loc_606A:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+A6j
.text:0000606A                 push    offset _IID_ISetProperties ; Buf2
.text:0000606F                 mov     eax, [ebp+Buf1]
.text:00006072                 push    eax             ; Buf1
.text:00006073                 call    ___@8           ; __(x,x)
.text:00006078                 test    eax, eax
.text:0000607A                 jz      short loc_609E
.text:0000607C                 cmp     [ebp+this], 0
.text:00006080                 jz      short loc_608D
.text:00006082                 mov     ecx, [ebp+this]
.text:00006085                 add     ecx, 0Ch
.text:00006088                 mov     [ebp+var_C], ecx
.text:0000608B                 jmp     short loc_6094
.text:0000608D ; ---------------------------------------------------------------------------
.text:0000608D
.text:0000608D loc_608D:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+E0j
.text:0000608D                 mov     [ebp+var_C], 0
.text:00006094
.text:00006094 loc_6094:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+EBj
.text:00006094                 mov     edx, [ebp+arg_8]
.text:00006097                 mov     eax, [ebp+var_C]
.text:0000609A                 mov     [edx], eax
.text:0000609C                 jmp     short loc_60A5
.text:0000609E ; ---------------------------------------------------------------------------
.text:0000609E
.text:0000609E loc_609E:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+DAj
.text:0000609E                 mov     eax, 80004002h
.text:000060A3                 jmp     short loc_60B6
.text:000060A5 ; ---------------------------------------------------------------------------
.text:000060A5
.text:000060A5 loc_60A5:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+3Ej
.text:000060A5                                         ; NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:000060A5                 mov     ecx, [ebp+this]
.text:000060A8                 mov     edx, [ecx+10h]
.text:000060AB                 add     edx, 1
.text:000060AE                 mov     eax, [ebp+this]
.text:000060B1                 mov     [eax+10h], edx
.text:000060B4                 xor     eax, eax
.text:000060B6
.text:000060B6 loc_60B6:                               ; CODE XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)+103j
.text:000060B6                 add     esp, 0Ch
.text:000060B9                 cmp     ebp, esp
.text:000060BB                 call    __RTC_CheckEsp
.text:000060C0                 mov     esp, ebp
.text:000060C2                 pop     ebp
.text:000060C3                 retn    0Ch
.text:000060C3 ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000060C3
.text:000060C3 ; ---------------------------------------------------------------------------
.text:000060C6                 align 4
.text:000060C6 _text           ends
.text:000060C6
.text:000060C8 ; ===========================================================================
.text:000060C8
.text:000060C8 ; Segment type: Pure code
.text:000060C8 ; Segment permissions: Read/Execute
.text:000060C8 _text           segment para public 'CODE' use32
.text:000060C8                 assume cs:_text
.text:000060C8                 ;org 60C8h
.text:000060C8 ; COMDAT (pick any)
.text:000060C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060C8
.text:000060C8 ; =============== S U B R O U T I N E =======================================
.text:000060C8
.text:000060C8 ; Attributes: bp-based frame
.text:000060C8
.text:000060C8 ; unsigned __int32 __stdcall NArchive::NGz::CHandler::AddRef(NArchive::NGz::CHandler *this)
.text:000060C8                 public ?AddRef@CHandler@NGz@NArchive@@UAGKXZ
.text:000060C8 ?AddRef@CHandler@NGz@NArchive@@UAGKXZ proc near
.text:000060C8                                         ; CODE XREF: [thunk]:NArchive::NGz::CHandler::AddRef`adjustor{12}' (void)+5j
.text:000060C8                                         ; [thunk]:NArchive::NGz::CHandler::AddRef`adjustor{4}' (void)+5j ...
.text:000060C8
.text:000060C8 var_4           = dword ptr -4
.text:000060C8 this            = dword ptr  8
.text:000060C8
.text:000060C8                 push    ebp
.text:000060C9                 mov     ebp, esp
.text:000060CB                 push    ecx
.text:000060CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060D3                 mov     eax, [ebp+this]
.text:000060D6                 mov     ecx, [eax+10h]
.text:000060D9                 add     ecx, 1
.text:000060DC                 mov     [ebp+var_4], ecx
.text:000060DF                 mov     edx, [ebp+this]
.text:000060E2                 mov     eax, [ebp+var_4]
.text:000060E5                 mov     [edx+10h], eax
.text:000060E8                 mov     eax, [ebp+var_4]
.text:000060EB                 mov     esp, ebp
.text:000060ED                 pop     ebp
.text:000060EE                 retn    4
.text:000060EE ?AddRef@CHandler@NGz@NArchive@@UAGKXZ endp
.text:000060EE
.text:000060EE ; ---------------------------------------------------------------------------
.text:000060F1                 align 4
.text:000060F1 _text           ends
.text:000060F1
.text:000060F4 ; ===========================================================================
.text:000060F4
.text:000060F4 ; Segment type: Pure code
.text:000060F4 ; Segment permissions: Read/Execute
.text:000060F4 _text           segment para public 'CODE' use32
.text:000060F4                 assume cs:_text
.text:000060F4                 ;org 60F4h
.text:000060F4 ; COMDAT (pick any)
.text:000060F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060F4
.text:000060F4 ; =============== S U B R O U T I N E =======================================
.text:000060F4
.text:000060F4 ; Attributes: bp-based frame
.text:000060F4
.text:000060F4 ; unsigned __int32 __stdcall NArchive::NGz::CHandler::Release(NArchive::NGz::CHandler *this)
.text:000060F4                 public ?Release@CHandler@NGz@NArchive@@UAGKXZ
.text:000060F4 ?Release@CHandler@NGz@NArchive@@UAGKXZ proc near
.text:000060F4                                         ; CODE XREF: [thunk]:NArchive::NGz::CHandler::Release`adjustor{4}' (void)+5j
.text:000060F4                                         ; [thunk]:NArchive::NGz::CHandler::Release`adjustor{8}' (void)+5j ...
.text:000060F4
.text:000060F4 var_10          = dword ptr -10h
.text:000060F4 var_C           = dword ptr -0Ch
.text:000060F4 var_8           = dword ptr -8
.text:000060F4 var_4           = dword ptr -4
.text:000060F4 this            = dword ptr  8
.text:000060F4
.text:000060F4                 push    ebp
.text:000060F5                 mov     ebp, esp
.text:000060F7                 sub     esp, 10h
.text:000060FA                 mov     eax, 0CCCCCCCCh
.text:000060FF                 mov     [ebp+var_10], eax
.text:00006102                 mov     [ebp+var_C], eax
.text:00006105                 mov     [ebp+var_8], eax
.text:00006108                 mov     [ebp+var_4], eax
.text:0000610B                 mov     eax, [ebp+this]
.text:0000610E                 mov     ecx, [eax+10h]
.text:00006111                 sub     ecx, 1
.text:00006114                 mov     [ebp+var_C], ecx
.text:00006117                 mov     edx, [ebp+this]
.text:0000611A                 mov     eax, [ebp+var_C]
.text:0000611D                 mov     [edx+10h], eax
.text:00006120                 cmp     [ebp+var_C], 0
.text:00006124                 jz      short loc_612E
.text:00006126                 mov     ecx, [ebp+this]
.text:00006129                 mov     eax, [ecx+10h]
.text:0000612C                 jmp     short loc_6158
.text:0000612E ; ---------------------------------------------------------------------------
.text:0000612E
.text:0000612E loc_612E:                               ; CODE XREF: NArchive::NGz::CHandler::Release(void)+30j
.text:0000612E                 mov     edx, [ebp+this]
.text:00006131                 mov     [ebp+var_8], edx
.text:00006134                 mov     eax, [ebp+var_8]
.text:00006137                 mov     [ebp+var_4], eax
.text:0000613A                 cmp     [ebp+var_4], 0
.text:0000613E                 jz      short loc_614F
.text:00006140                 push    1
.text:00006142                 mov     ecx, [ebp+var_4]
.text:00006145                 call    ??_GCHandler@NGz@NArchive@@QAEPAXI@Z ; NArchive::NGz::CHandler::`scalar deleting destructor'(uint)
.text:0000614A                 mov     [ebp+var_10], eax
.text:0000614D                 jmp     short loc_6156
.text:0000614F ; ---------------------------------------------------------------------------
.text:0000614F
.text:0000614F loc_614F:                               ; CODE XREF: NArchive::NGz::CHandler::Release(void)+4Aj
.text:0000614F                 mov     [ebp+var_10], 0
.text:00006156
.text:00006156 loc_6156:                               ; CODE XREF: NArchive::NGz::CHandler::Release(void)+59j
.text:00006156                 xor     eax, eax
.text:00006158
.text:00006158 loc_6158:                               ; CODE XREF: NArchive::NGz::CHandler::Release(void)+38j
.text:00006158                 add     esp, 10h
.text:0000615B                 cmp     ebp, esp
.text:0000615D                 call    __RTC_CheckEsp
.text:00006162                 mov     esp, ebp
.text:00006164                 pop     ebp
.text:00006165                 retn    4
.text:00006165 ?Release@CHandler@NGz@NArchive@@UAGKXZ endp
.text:00006165
.text:00006165 _text           ends
.text:00006165
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; public: void * __thiscall NArchive::NGz::CHandler::`scalar deleting destructor'(unsigned int)
.text:00006168                 public ??_GCHandler@NGz@NArchive@@QAEPAXI@Z
.text:00006168 ??_GCHandler@NGz@NArchive@@QAEPAXI@Z proc near
.text:00006168                                         ; CODE XREF: NArchive::NGz::CHandler::Release(void)+51p
.text:00006168
.text:00006168 var_4           = dword ptr -4
.text:00006168 arg_0           = dword ptr  8
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 push    ecx
.text:0000616C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006173                 mov     [ebp+var_4], ecx
.text:00006176                 mov     ecx, [ebp+var_4] ; this
.text:00006179                 call    ??1CHandler@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CHandler::~CHandler(void)
.text:0000617E                 mov     eax, [ebp+arg_0]
.text:00006181                 and     eax, 1
.text:00006184                 jz      short loc_6192
.text:00006186                 mov     ecx, [ebp+var_4]
.text:00006189                 push    ecx             ; void *
.text:0000618A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000618F                 add     esp, 4
.text:00006192
.text:00006192 loc_6192:                               ; CODE XREF: NArchive::NGz::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00006192                 mov     eax, [ebp+var_4]
.text:00006195                 add     esp, 4
.text:00006198                 cmp     ebp, esp
.text:0000619A                 call    __RTC_CheckEsp
.text:0000619F                 mov     esp, ebp
.text:000061A1                 pop     ebp
.text:000061A2                 retn    4
.text:000061A2 ??_GCHandler@NGz@NArchive@@QAEPAXI@Z endp
.text:000061A2
.text:000061A2 ; ---------------------------------------------------------------------------
.text:000061A5                 align 4
.text:000061A5 _text           ends
.text:000061A5
.text:000061A8 ; ===========================================================================
.text:000061A8
.text:000061A8 ; Segment type: Pure code
.text:000061A8 ; Segment permissions: Read/Execute
.text:000061A8 _text           segment para public 'CODE' use32
.text:000061A8                 assume cs:_text
.text:000061A8                 ;org 61A8h
.text:000061A8 ; COMDAT (pick any)
.text:000061A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000061A8
.text:000061A8 ; =============== S U B R O U T I N E =======================================
.text:000061A8
.text:000061A8 ; Attributes: bp-based frame
.text:000061A8
.text:000061A8 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:000061A8                 public ??0IInArchive@@QAE@XZ
.text:000061A8 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+3Cp
.text:000061A8
.text:000061A8 var_4           = dword ptr -4
.text:000061A8
.text:000061A8                 push    ebp
.text:000061A9                 mov     ebp, esp
.text:000061AB                 push    ecx
.text:000061AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000061B3                 mov     [ebp+var_4], ecx
.text:000061B6                 mov     ecx, [ebp+var_4]
.text:000061B9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000061BE                 mov     eax, [ebp+var_4]
.text:000061C1                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:000061C7                 mov     eax, [ebp+var_4]
.text:000061CA                 add     esp, 4
.text:000061CD                 cmp     ebp, esp
.text:000061CF                 call    __RTC_CheckEsp
.text:000061D4                 mov     esp, ebp
.text:000061D6                 pop     ebp
.text:000061D7                 retn
.text:000061D7 ??0IInArchive@@QAE@XZ endp
.text:000061D7
.text:000061D7 _text           ends
.text:000061D7
.rdata:000061D8 ; ===========================================================================
.rdata:000061D8
.rdata:000061D8 ; Segment type: Pure data
.rdata:000061D8 ; Segment permissions: Read
.rdata:000061D8 _rdata          segment dword public 'DATA' use32
.rdata:000061D8                 assume cs:_rdata
.rdata:000061D8                 ;org 61D8h
.rdata:000061D8 ; COMDAT (pick largest)
.rdata:000061D8                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:000061DC                 public ??_7IInArchive@@6B@
.rdata:000061DC ; const IInArchive::`vftable'
.rdata:000061DC ??_7IInArchive@@6B@ dd offset __purecall
.rdata:000061DC                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:000061E0                 dd offset __purecall
.rdata:000061E4                 dd offset __purecall
.rdata:000061E8                 dd offset __purecall
.rdata:000061EC                 dd offset __purecall
.rdata:000061F0                 dd offset __purecall
.rdata:000061F4                 dd offset __purecall
.rdata:000061F8                 dd offset __purecall
.rdata:000061FC                 dd offset __purecall
.rdata:00006200                 dd offset __purecall
.rdata:00006204                 dd offset __purecall
.rdata:00006208                 dd offset __purecall
.rdata:0000620C                 dd offset __purecall
.rdata:0000620C _rdata          ends
.rdata:0000620C
.rdata$r:00006210 ; ===========================================================================
.rdata$r:00006210
.rdata$r:00006210 ; Segment type: Pure data
.rdata$r:00006210 ; Segment permissions: Read
.rdata$r:00006210 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006210                 assume cs:_rdata$r
.rdata$r:00006210                 ;org 6210h
.rdata$r:00006210 ; COMDAT (pick any)
.rdata$r:00006210                 public ??_R4IInArchive@@6B@
.rdata$r:00006210 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:00006210 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:000061D8o
.rdata$r:00006211                 db    0
.rdata$r:00006212                 db    0
.rdata$r:00006213                 db    0
.rdata$r:00006214                 db    0
.rdata$r:00006215                 db    0
.rdata$r:00006216                 db    0
.rdata$r:00006217                 db    0
.rdata$r:00006218                 db    0
.rdata$r:00006219                 db    0
.rdata$r:0000621A                 db    0
.rdata$r:0000621B                 db    0
.rdata$r:0000621C                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:00006220                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006220 _rdata$r        ends
.rdata$r:00006220
.text:00006224 ; ===========================================================================
.text:00006224
.text:00006224 ; Segment type: Pure code
.text:00006224 ; Segment permissions: Read/Execute
.text:00006224 _text           segment para public 'CODE' use32
.text:00006224                 assume cs:_text
.text:00006224                 ;org 6224h
.text:00006224 ; COMDAT (pick any)
.text:00006224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006224
.text:00006224 ; =============== S U B R O U T I N E =======================================
.text:00006224
.text:00006224 ; Attributes: bp-based frame
.text:00006224
.text:00006224 ; _DWORD __thiscall IArchiveOpenSeq::IArchiveOpenSeq(IArchiveOpenSeq *__hidden this)
.text:00006224                 public ??0IArchiveOpenSeq@@QAE@XZ
.text:00006224 ??0IArchiveOpenSeq@@QAE@XZ proc near    ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+47p
.text:00006224
.text:00006224 var_4           = dword ptr -4
.text:00006224
.text:00006224                 push    ebp
.text:00006225                 mov     ebp, esp
.text:00006227                 push    ecx
.text:00006228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000622F                 mov     [ebp+var_4], ecx
.text:00006232                 mov     ecx, [ebp+var_4]
.text:00006235                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000623A                 mov     eax, [ebp+var_4]
.text:0000623D                 mov     dword ptr [eax], offset ??_7IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`vftable'
.text:00006243                 mov     eax, [ebp+var_4]
.text:00006246                 add     esp, 4
.text:00006249                 cmp     ebp, esp
.text:0000624B                 call    __RTC_CheckEsp
.text:00006250                 mov     esp, ebp
.text:00006252                 pop     ebp
.text:00006253                 retn
.text:00006253 ??0IArchiveOpenSeq@@QAE@XZ endp
.text:00006253
.text:00006253 _text           ends
.text:00006253
.rdata:00006254 ; ===========================================================================
.rdata:00006254
.rdata:00006254 ; Segment type: Pure data
.rdata:00006254 ; Segment permissions: Read
.rdata:00006254 _rdata          segment dword public 'DATA' use32
.rdata:00006254                 assume cs:_rdata
.rdata:00006254                 ;org 6254h
.rdata:00006254 ; COMDAT (pick largest)
.rdata:00006254                 dd offset ??_R4IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata:00006258                 public ??_7IArchiveOpenSeq@@6B@
.rdata:00006258 ; const IArchiveOpenSeq::`vftable'
.rdata:00006258 ??_7IArchiveOpenSeq@@6B@ dd offset __purecall
.rdata:00006258                                         ; DATA XREF: IArchiveOpenSeq::IArchiveOpenSeq(void)+19o
.rdata:0000625C                 dd offset __purecall
.rdata:00006260                 dd offset __purecall
.rdata:00006264                 dd offset __purecall
.rdata:00006264 _rdata          ends
.rdata:00006264
.rdata$r:00006268 ; ===========================================================================
.rdata$r:00006268
.rdata$r:00006268 ; Segment type: Pure data
.rdata$r:00006268 ; Segment permissions: Read
.rdata$r:00006268 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00006268                 assume cs:_rdata$r
.rdata$r:00006268                 ;org 6268h
.rdata$r:00006268 ; COMDAT (pick any)
.rdata$r:00006268                 public ??_R4IArchiveOpenSeq@@6B@
.rdata$r:00006268 ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata$r:00006268 ??_R4IArchiveOpenSeq@@6B@ db    0       ; DATA XREF: .rdata:00006254o
.rdata$r:00006269                 db    0
.rdata$r:0000626A                 db    0
.rdata$r:0000626B                 db    0
.rdata$r:0000626C                 db    0
.rdata$r:0000626D                 db    0
.rdata$r:0000626E                 db    0
.rdata$r:0000626F                 db    0
.rdata$r:00006270                 db    0
.rdata$r:00006271                 db    0
.rdata$r:00006272                 db    0
.rdata$r:00006273                 db    0
.rdata$r:00006274                 dd offset ??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00006278                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00006278 _rdata$r        ends
.rdata$r:00006278
.text:0000627C ; ===========================================================================
.text:0000627C
.text:0000627C ; Segment type: Pure code
.text:0000627C ; Segment permissions: Read/Execute
.text:0000627C _text           segment para public 'CODE' use32
.text:0000627C                 assume cs:_text
.text:0000627C                 ;org 627Ch
.text:0000627C ; COMDAT (pick any)
.text:0000627C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000627C
.text:0000627C ; =============== S U B R O U T I N E =======================================
.text:0000627C
.text:0000627C ; Attributes: bp-based frame
.text:0000627C
.text:0000627C ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:0000627C                 public ??0IOutArchive@@QAE@XZ
.text:0000627C ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+52p
.text:0000627C
.text:0000627C var_4           = dword ptr -4
.text:0000627C
.text:0000627C                 push    ebp
.text:0000627D                 mov     ebp, esp
.text:0000627F                 push    ecx
.text:00006280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006287                 mov     [ebp+var_4], ecx
.text:0000628A                 mov     ecx, [ebp+var_4]
.text:0000628D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00006292                 mov     eax, [ebp+var_4]
.text:00006295                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:0000629B                 mov     eax, [ebp+var_4]
.text:0000629E                 add     esp, 4
.text:000062A1                 cmp     ebp, esp
.text:000062A3                 call    __RTC_CheckEsp
.text:000062A8                 mov     esp, ebp
.text:000062AA                 pop     ebp
.text:000062AB                 retn
.text:000062AB ??0IOutArchive@@QAE@XZ endp
.text:000062AB
.text:000062AB _text           ends
.text:000062AB
.rdata:000062AC ; ===========================================================================
.rdata:000062AC
.rdata:000062AC ; Segment type: Pure data
.rdata:000062AC ; Segment permissions: Read
.rdata:000062AC _rdata          segment dword public 'DATA' use32
.rdata:000062AC                 assume cs:_rdata
.rdata:000062AC                 ;org 62ACh
.rdata:000062AC ; COMDAT (pick largest)
.rdata:000062AC                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:000062B0                 public ??_7IOutArchive@@6B@
.rdata:000062B0 ; const IOutArchive::`vftable'
.rdata:000062B0 ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:000062B0                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:000062B4                 dd offset __purecall
.rdata:000062B8                 dd offset __purecall
.rdata:000062BC                 dd offset __purecall
.rdata:000062C0                 dd offset __purecall
.rdata:000062C0 _rdata          ends
.rdata:000062C0
.rdata$r:000062C4 ; ===========================================================================
.rdata$r:000062C4
.rdata$r:000062C4 ; Segment type: Pure data
.rdata$r:000062C4 ; Segment permissions: Read
.rdata$r:000062C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000062C4                 assume cs:_rdata$r
.rdata$r:000062C4                 ;org 62C4h
.rdata$r:000062C4 ; COMDAT (pick any)
.rdata$r:000062C4                 public ??_R4IOutArchive@@6B@
.rdata$r:000062C4 ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:000062C4 ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:000062ACo
.rdata$r:000062C5                 db    0
.rdata$r:000062C6                 db    0
.rdata$r:000062C7                 db    0
.rdata$r:000062C8                 db    0
.rdata$r:000062C9                 db    0
.rdata$r:000062CA                 db    0
.rdata$r:000062CB                 db    0
.rdata$r:000062CC                 db    0
.rdata$r:000062CD                 db    0
.rdata$r:000062CE                 db    0
.rdata$r:000062CF                 db    0
.rdata$r:000062D0                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000062D4                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000062D4 _rdata$r        ends
.rdata$r:000062D4
.text:000062D8 ; ===========================================================================
.text:000062D8
.text:000062D8 ; Segment type: Pure code
.text:000062D8 ; Segment permissions: Read/Execute
.text:000062D8 _text           segment para public 'CODE' use32
.text:000062D8                 assume cs:_text
.text:000062D8                 ;org 62D8h
.text:000062D8 ; COMDAT (pick any)
.text:000062D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062D8
.text:000062D8 ; =============== S U B R O U T I N E =======================================
.text:000062D8
.text:000062D8 ; Attributes: bp-based frame
.text:000062D8
.text:000062D8 ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:000062D8                 public ??0ISetProperties@@QAE@XZ
.text:000062D8 ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+5Dp
.text:000062D8
.text:000062D8 var_4           = dword ptr -4
.text:000062D8
.text:000062D8                 push    ebp
.text:000062D9                 mov     ebp, esp
.text:000062DB                 push    ecx
.text:000062DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062E3                 mov     [ebp+var_4], ecx
.text:000062E6                 mov     ecx, [ebp+var_4]
.text:000062E9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000062EE                 mov     eax, [ebp+var_4]
.text:000062F1                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:000062F7                 mov     eax, [ebp+var_4]
.text:000062FA                 add     esp, 4
.text:000062FD                 cmp     ebp, esp
.text:000062FF                 call    __RTC_CheckEsp
.text:00006304                 mov     esp, ebp
.text:00006306                 pop     ebp
.text:00006307                 retn
.text:00006307 ??0ISetProperties@@QAE@XZ endp
.text:00006307
.text:00006307 _text           ends
.text:00006307
.rdata:00006308 ; ===========================================================================
.rdata:00006308
.rdata:00006308 ; Segment type: Pure data
.rdata:00006308 ; Segment permissions: Read
.rdata:00006308 _rdata          segment dword public 'DATA' use32
.rdata:00006308                 assume cs:_rdata
.rdata:00006308                 ;org 6308h
.rdata:00006308 ; COMDAT (pick largest)
.rdata:00006308                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:0000630C                 public ??_7ISetProperties@@6B@
.rdata:0000630C ; const ISetProperties::`vftable'
.rdata:0000630C ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:0000630C                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:00006310                 dd offset __purecall
.rdata:00006314                 dd offset __purecall
.rdata:00006318                 dd offset __purecall
.rdata:00006318 _rdata          ends
.rdata:00006318
.rdata$r:0000631C ; ===========================================================================
.rdata$r:0000631C
.rdata$r:0000631C ; Segment type: Pure data
.rdata$r:0000631C ; Segment permissions: Read
.rdata$r:0000631C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000631C                 assume cs:_rdata$r
.rdata$r:0000631C                 ;org 631Ch
.rdata$r:0000631C ; COMDAT (pick any)
.rdata$r:0000631C                 public ??_R4ISetProperties@@6B@
.rdata$r:0000631C ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:0000631C ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:00006308o
.rdata$r:0000631D                 db    0
.rdata$r:0000631E                 db    0
.rdata$r:0000631F                 db    0
.rdata$r:00006320                 db    0
.rdata$r:00006321                 db    0
.rdata$r:00006322                 db    0
.rdata$r:00006323                 db    0
.rdata$r:00006324                 db    0
.rdata$r:00006325                 db    0
.rdata$r:00006326                 db    0
.rdata$r:00006327                 db    0
.rdata$r:00006328                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:0000632C                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000632C _rdata$r        ends
.rdata$r:0000632C
.text:00006330 ; ===========================================================================
.text:00006330
.text:00006330 ; Segment type: Pure code
.text:00006330 ; Segment permissions: Read/Execute
.text:00006330 _text           segment para public 'CODE' use32
.text:00006330                 assume cs:_text
.text:00006330                 ;org 6330h
.text:00006330 ; COMDAT (pick any)
.text:00006330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006330
.text:00006330 ; =============== S U B R O U T I N E =======================================
.text:00006330
.text:00006330 ; Attributes: bp-based frame
.text:00006330
.text:00006330 ; _DWORD __thiscall NArchive::CSingleMethodProps::~CSingleMethodProps(NArchive::CSingleMethodProps *__hidden this)
.text:00006330                 public ??1CSingleMethodProps@NArchive@@QAE@XZ
.text:00006330 ??1CSingleMethodProps@NArchive@@QAE@XZ proc near
.text:00006330                                         ; CODE XREF: __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$3+6j
.text:00006330                                         ; NArchive::NGz::CHandler::~CHandler(void)+3Ap
.text:00006330
.text:00006330 var_4           = dword ptr -4
.text:00006330
.text:00006330                 push    ebp
.text:00006331                 mov     ebp, esp
.text:00006333                 push    ecx
.text:00006334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000633B                 mov     [ebp+var_4], ecx
.text:0000633E                 mov     ecx, [ebp+var_4] ; this
.text:00006341                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:00006346                 add     esp, 4
.text:00006349                 cmp     ebp, esp
.text:0000634B                 call    __RTC_CheckEsp
.text:00006350                 mov     esp, ebp
.text:00006352                 pop     ebp
.text:00006353                 retn
.text:00006353 ??1CSingleMethodProps@NArchive@@QAE@XZ endp
.text:00006353
.text:00006353 _text           ends
.text:00006353
.text:00006354 ; ===========================================================================
.text:00006354
.text:00006354 ; Segment type: Pure code
.text:00006354 ; Segment permissions: Read/Execute
.text:00006354 _text           segment para public 'CODE' use32
.text:00006354                 assume cs:_text
.text:00006354                 ;org 6354h
.text:00006354 ; COMDAT (pick any)
.text:00006354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006354
.text:00006354 ; =============== S U B R O U T I N E =======================================
.text:00006354
.text:00006354 ; Attributes: bp-based frame
.text:00006354
.text:00006354 ; _DWORD __thiscall NArchive::NGz::CHandler::~CHandler(NArchive::NGz::CHandler *__hidden this)
.text:00006354                 public ??1CHandler@NGz@NArchive@@QAE@XZ
.text:00006354 ??1CHandler@NGz@NArchive@@QAE@XZ proc near
.text:00006354                                         ; CODE XREF: NArchive::NGz::CHandler::`scalar deleting destructor'(uint)+11p
.text:00006354
.text:00006354 var_10          = dword ptr -10h
.text:00006354 var_C           = dword ptr -0Ch
.text:00006354 var_4           = dword ptr -4
.text:00006354
.text:00006354                 push    ebp
.text:00006355                 mov     ebp, esp
.text:00006357                 push    0FFFFFFFFh
.text:00006359                 push    offset __ehhandler$??1CHandler@NGz@NArchive@@QAE@XZ
.text:0000635E                 mov     eax, large fs:0
.text:00006364                 push    eax
.text:00006365                 push    ecx
.text:00006366                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000636D                 mov     eax, dword ptr ds:___security_cookie
.text:00006372                 xor     eax, ebp
.text:00006374                 push    eax
.text:00006375                 lea     eax, [ebp+var_C]
.text:00006378                 mov     large fs:0, eax
.text:0000637E                 mov     [ebp+var_10], ecx
.text:00006381                 mov     [ebp+var_4], 2
.text:00006388                 mov     ecx, [ebp+var_10]
.text:0000638B                 add     ecx, 74h ; 't'  ; this
.text:0000638E                 call    ??1CSingleMethodProps@NArchive@@QAE@XZ ; NArchive::CSingleMethodProps::~CSingleMethodProps(void)
.text:00006393                 mov     byte ptr [ebp+var_4], 1
.text:00006397                 mov     ecx, [ebp+var_10]
.text:0000639A                 add     ecx, 6Ch ; 'l'
.text:0000639D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000063A2                 mov     byte ptr [ebp+var_4], 0
.text:000063A6                 mov     ecx, [ebp+var_10]
.text:000063A9                 add     ecx, 68h ; 'h'
.text:000063AC                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000063B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000063B8                 mov     ecx, [ebp+var_10]
.text:000063BB                 add     ecx, 14h        ; this
.text:000063BE                 call    ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text:000063C3                 mov     ecx, [ebp+var_C]
.text:000063C6                 mov     large fs:0, ecx
.text:000063CD                 pop     ecx
.text:000063CE                 add     esp, 10h
.text:000063D1                 cmp     ebp, esp
.text:000063D3                 call    __RTC_CheckEsp
.text:000063D8                 mov     esp, ebp
.text:000063DA                 pop     ebp
.text:000063DB                 retn
.text:000063DB ??1CHandler@NGz@NArchive@@QAE@XZ endp
.text:000063DB
.text:000063DB _text           ends
.text:000063DB
.text$x:000063DC ; ===========================================================================
.text$x:000063DC
.text$x:000063DC ; Segment type: Pure code
.text$x:000063DC ; Segment permissions: Read/Execute
.text$x:000063DC _text$x         segment para public 'CODE' use32
.text$x:000063DC                 assume cs:_text$x
.text$x:000063DC                 ;org 63DCh
.text$x:000063DC ; COMDAT (pick associative to section at 6354)
.text$x:000063DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000063DC
.text$x:000063DC ; =============== S U B R O U T I N E =======================================
.text$x:000063DC
.text$x:000063DC
.text$x:000063DC __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$0 proc near
.text$x:000063DC                                         ; DATA XREF: .xdata$x:0000641Co
.text$x:000063DC                 mov     ecx, [ebp-10h]
.text$x:000063DF                 add     ecx, 14h        ; this
.text$x:000063E2                 jmp     ??1CItem@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CItem::~CItem(void)
.text$x:000063E2 __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$0 endp
.text$x:000063E2
.text$x:000063E7
.text$x:000063E7 ; =============== S U B R O U T I N E =======================================
.text$x:000063E7
.text$x:000063E7
.text$x:000063E7 __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$1 proc near
.text$x:000063E7                                         ; DATA XREF: .xdata$x:00006424o
.text$x:000063E7                 mov     ecx, [ebp-10h]
.text$x:000063EA                 add     ecx, 68h ; 'h'
.text$x:000063ED                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:000063ED __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$1 endp
.text$x:000063ED
.text$x:000063F2
.text$x:000063F2 ; =============== S U B R O U T I N E =======================================
.text$x:000063F2
.text$x:000063F2
.text$x:000063F2 __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$2 proc near
.text$x:000063F2                                         ; DATA XREF: .xdata$x:0000642Co
.text$x:000063F2                 mov     ecx, [ebp-10h]
.text$x:000063F5                 add     ecx, 6Ch ; 'l'
.text$x:000063F8                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:000063F8 __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$2 endp
.text$x:000063F8
.text$x:000063FD
.text$x:000063FD ; =============== S U B R O U T I N E =======================================
.text$x:000063FD
.text$x:000063FD
.text$x:000063FD __ehhandler$??1CHandler@NGz@NArchive@@QAE@XZ proc near
.text$x:000063FD                                         ; DATA XREF: NArchive::NGz::CHandler::~CHandler(void)+5o
.text$x:000063FD
.text$x:000063FD arg_4           = dword ptr  8
.text$x:000063FD
.text$x:000063FD                 mov     edx, [esp+arg_4]
.text$x:00006401                 lea     eax, [edx+0Ch]
.text$x:00006404                 mov     ecx, [edx-8]
.text$x:00006407                 xor     ecx, eax
.text$x:00006409                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000640E                 mov     eax, offset __ehfuncinfo$??1CHandler@NGz@NArchive@@QAE@XZ
.text$x:00006413                 jmp     ___CxxFrameHandler3
.text$x:00006413 __ehhandler$??1CHandler@NGz@NArchive@@QAE@XZ endp
.text$x:00006413
.text$x:00006413 _text$x         ends
.text$x:00006413
.xdata$x:00006418 ; ===========================================================================
.xdata$x:00006418
.xdata$x:00006418 ; Segment type: Pure data
.xdata$x:00006418 ; Segment permissions: Read
.xdata$x:00006418 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006418                 assume cs:_xdata$x
.xdata$x:00006418                 ;org 6418h
.xdata$x:00006418 ; COMDAT (pick associative to section at 6354)
.xdata$x:00006418 __unwindtable$??1CHandler@NGz@NArchive@@QAE@XZ db 0FFh
.xdata$x:00006418                                         ; DATA XREF: .xdata$x:00006438o
.xdata$x:00006419                 db 0FFh
.xdata$x:0000641A                 db 0FFh
.xdata$x:0000641B                 db 0FFh
.xdata$x:0000641C                 dd offset __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$0
.xdata$x:00006420                 db    0
.xdata$x:00006421                 db    0
.xdata$x:00006422                 db    0
.xdata$x:00006423                 db    0
.xdata$x:00006424                 dd offset __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$1
.xdata$x:00006428                 db    1
.xdata$x:00006429                 db    0
.xdata$x:0000642A                 db    0
.xdata$x:0000642B                 db    0
.xdata$x:0000642C                 dd offset __unwindfunclet$??1CHandler@NGz@NArchive@@QAE@XZ$2
.xdata$x:00006430 __ehfuncinfo$??1CHandler@NGz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00006430                                         ; DATA XREF: __ehhandler$??1CHandler@NGz@NArchive@@QAE@XZ+11o
.xdata$x:00006431                 db    5
.xdata$x:00006432                 db  93h ; Ã´
.xdata$x:00006433                 db  19h
.xdata$x:00006434                 db    3
.xdata$x:00006435                 db    0
.xdata$x:00006436                 db    0
.xdata$x:00006437                 db    0
.xdata$x:00006438                 dd offset __unwindtable$??1CHandler@NGz@NArchive@@QAE@XZ
.xdata$x:0000643C                 db    0
.xdata$x:0000643D                 db    0
.xdata$x:0000643E                 db    0
.xdata$x:0000643F                 db    0
.xdata$x:00006440                 db    0
.xdata$x:00006441                 db    0
.xdata$x:00006442                 db    0
.xdata$x:00006443                 db    0
.xdata$x:00006444                 db    0
.xdata$x:00006445                 db    0
.xdata$x:00006446                 db    0
.xdata$x:00006447                 db    0
.xdata$x:00006448                 db    0
.xdata$x:00006449                 db    0
.xdata$x:0000644A                 db    0
.xdata$x:0000644B                 db    0
.xdata$x:0000644C                 db    0
.xdata$x:0000644D                 db    0
.xdata$x:0000644E                 db    0
.xdata$x:0000644F                 db    0
.xdata$x:00006450                 db    1
.xdata$x:00006451                 db    0
.xdata$x:00006452                 db    0
.xdata$x:00006453                 db    0
.xdata$x:00006453 _xdata$x        ends
.xdata$x:00006453
.text:00006454 ; ===========================================================================
.text:00006454
.text:00006454 ; Segment type: Pure code
.text:00006454 ; Segment permissions: Read/Execute
.text:00006454 _text           segment para public 'CODE' use32
.text:00006454                 assume cs:_text
.text:00006454                 ;org 6454h
.text:00006454 ; COMDAT (pick any)
.text:00006454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006454
.text:00006454 ; =============== S U B R O U T I N E =======================================
.text:00006454
.text:00006454 ; Attributes: bp-based frame
.text:00006454
.text:00006454 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00006454                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00006454 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00006454                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+29Cp
.text:00006454                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+689p ...
.text:00006454
.text:00006454 var_4           = dword ptr -4
.text:00006454 arg_0           = dword ptr  8
.text:00006454
.text:00006454                 push    ebp
.text:00006455                 mov     ebp, esp
.text:00006457                 push    ecx
.text:00006458                 push    esi
.text:00006459                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006460                 mov     [ebp+var_4], ecx
.text:00006463                 mov     eax, [ebp+var_4]
.text:00006466                 mov     ecx, [ebp+arg_0]
.text:00006469                 mov     [eax], ecx
.text:0000646B                 cmp     [ebp+arg_0], 0
.text:0000646F                 jz      short loc_6488
.text:00006471                 mov     edx, [ebp+arg_0]
.text:00006474                 mov     eax, [edx]
.text:00006476                 mov     esi, esp
.text:00006478                 mov     ecx, [ebp+arg_0]
.text:0000647B                 push    ecx
.text:0000647C                 mov     edx, [eax+4]
.text:0000647F                 call    edx
.text:00006481                 cmp     esi, esp
.text:00006483                 call    __RTC_CheckEsp
.text:00006488
.text:00006488 loc_6488:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00006488                 mov     eax, [ebp+var_4]
.text:0000648B                 pop     esi
.text:0000648C                 add     esp, 4
.text:0000648F                 cmp     ebp, esp
.text:00006491                 call    __RTC_CheckEsp
.text:00006496                 mov     esp, ebp
.text:00006498                 pop     ebp
.text:00006499                 retn    4
.text:00006499 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00006499
.text:00006499 _text           ends
.text:00006499
.text:0000649C ; ===========================================================================
.text:0000649C
.text:0000649C ; Segment type: Pure code
.text:0000649C ; Segment permissions: Read/Execute
.text:0000649C _text           segment para public 'CODE' use32
.text:0000649C                 assume cs:_text
.text:0000649C                 ;org 649Ch
.text:0000649C ; COMDAT (pick any)
.text:0000649C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000649C
.text:0000649C ; =============== S U B R O U T I N E =======================================
.text:0000649C
.text:0000649C ; Attributes: bp-based frame
.text:0000649C
.text:0000649C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:0000649C                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:0000649C ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:0000649C                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2F8p
.text:0000649C                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+387p ...
.text:0000649C
.text:0000649C var_4           = dword ptr -4
.text:0000649C
.text:0000649C                 push    ebp
.text:0000649D                 mov     ebp, esp
.text:0000649F                 push    ecx
.text:000064A0                 push    esi
.text:000064A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064A8                 mov     [ebp+var_4], ecx
.text:000064AB                 mov     eax, [ebp+var_4]
.text:000064AE                 cmp     dword ptr [eax], 0
.text:000064B1                 jz      short loc_64CE
.text:000064B3                 mov     ecx, [ebp+var_4]
.text:000064B6                 mov     edx, [ecx]
.text:000064B8                 mov     eax, [ebp+var_4]
.text:000064BB                 mov     ecx, [eax]
.text:000064BD                 mov     edx, [edx]
.text:000064BF                 mov     esi, esp
.text:000064C1                 push    ecx
.text:000064C2                 mov     eax, [edx+8]
.text:000064C5                 call    eax
.text:000064C7                 cmp     esi, esp
.text:000064C9                 call    __RTC_CheckEsp
.text:000064CE
.text:000064CE loc_64CE:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:000064CE                 pop     esi
.text:000064CF                 add     esp, 4
.text:000064D2                 cmp     ebp, esp
.text:000064D4                 call    __RTC_CheckEsp
.text:000064D9                 mov     esp, ebp
.text:000064DB                 pop     ebp
.text:000064DC                 retn
.text:000064DC ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:000064DC
.text:000064DC ; ---------------------------------------------------------------------------
.text:000064DD                 align 10h
.text:000064DD _text           ends
.text:000064DD
.text:000064E0 ; ===========================================================================
.text:000064E0
.text:000064E0 ; Segment type: Pure code
.text:000064E0 ; Segment permissions: Read/Execute
.text:000064E0 _text           segment para public 'CODE' use32
.text:000064E0                 assume cs:_text
.text:000064E0                 ;org 64E0h
.text:000064E0 ; COMDAT (pick any)
.text:000064E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064E0
.text:000064E0 ; =============== S U B R O U T I N E =======================================
.text:000064E0
.text:000064E0 ; Attributes: bp-based frame
.text:000064E0
.text:000064E0 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:000064E0                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:000064E0 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:000064E0                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62Fp
.text:000064E0                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8BDp ...
.text:000064E0
.text:000064E0 var_4           = dword ptr -4
.text:000064E0
.text:000064E0                 push    ebp
.text:000064E1                 mov     ebp, esp
.text:000064E3                 push    ecx
.text:000064E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000064EB                 mov     [ebp+var_4], ecx
.text:000064EE                 mov     eax, [ebp+var_4]
.text:000064F1                 mov     eax, [eax]
.text:000064F3                 mov     esp, ebp
.text:000064F5                 pop     ebp
.text:000064F6                 retn
.text:000064F6 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:000064F6
.text:000064F6 ; ---------------------------------------------------------------------------
.text:000064F7                 align 4
.text:000064F7 _text           ends
.text:000064F7
.text:000064F8 ; ===========================================================================
.text:000064F8
.text:000064F8 ; Segment type: Pure code
.text:000064F8 ; Segment permissions: Read/Execute
.text:000064F8 _text           segment para public 'CODE' use32
.text:000064F8                 assume cs:_text
.text:000064F8                 ;org 64F8h
.text:000064F8 ; COMDAT (pick any)
.text:000064F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000064F8
.text:000064F8 ; =============== S U B R O U T I N E =======================================
.text:000064F8
.text:000064F8 ; Attributes: bp-based frame
.text:000064F8
.text:000064F8 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:000064F8                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:000064F8 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:000064F8                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+A9p
.text:000064F8                                         ; CSequentialInStreamWithCRC::CSequentialInStreamWithCRC(void)+30p
.text:000064F8
.text:000064F8 var_4           = dword ptr -4
.text:000064F8
.text:000064F8                 push    ebp
.text:000064F9                 mov     ebp, esp
.text:000064FB                 push    ecx
.text:000064FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006503                 mov     [ebp+var_4], ecx
.text:00006506                 mov     eax, [ebp+var_4]
.text:00006509                 mov     dword ptr [eax], 0
.text:0000650F                 mov     eax, [ebp+var_4]
.text:00006512                 mov     esp, ebp
.text:00006514                 pop     ebp
.text:00006515                 retn
.text:00006515 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00006515
.text:00006515 ; ---------------------------------------------------------------------------
.text:00006516                 align 4
.text:00006516 _text           ends
.text:00006516
.text:00006518 ; ===========================================================================
.text:00006518
.text:00006518 ; Segment type: Pure code
.text:00006518 ; Segment permissions: Read/Execute
.text:00006518 _text           segment para public 'CODE' use32
.text:00006518                 assume cs:_text
.text:00006518                 ;org 6518h
.text:00006518 ; COMDAT (pick any)
.text:00006518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006518
.text:00006518 ; =============== S U B R O U T I N E =======================================
.text:00006518
.text:00006518 ; Attributes: bp-based frame
.text:00006518
.text:00006518 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00006518                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00006518 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00006518                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+148p
.text:00006518
.text:00006518 var_4           = dword ptr -4
.text:00006518 arg_0           = dword ptr  8
.text:00006518
.text:00006518                 push    ebp
.text:00006519                 mov     ebp, esp
.text:0000651B                 push    ecx
.text:0000651C                 push    esi
.text:0000651D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006524                 mov     [ebp+var_4], ecx
.text:00006527                 mov     eax, [ebp+var_4]
.text:0000652A                 mov     ecx, [ebp+arg_0]
.text:0000652D                 mov     [eax], ecx
.text:0000652F                 cmp     [ebp+arg_0], 0
.text:00006533                 jz      short loc_654C
.text:00006535                 mov     edx, [ebp+arg_0]
.text:00006538                 mov     eax, [edx]
.text:0000653A                 mov     esi, esp
.text:0000653C                 mov     ecx, [ebp+arg_0]
.text:0000653F                 push    ecx
.text:00006540                 mov     edx, [eax+4]
.text:00006543                 call    edx
.text:00006545                 cmp     esi, esp
.text:00006547                 call    __RTC_CheckEsp
.text:0000654C
.text:0000654C loc_654C:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:0000654C                 mov     eax, [ebp+var_4]
.text:0000654F                 pop     esi
.text:00006550                 add     esp, 4
.text:00006553                 cmp     ebp, esp
.text:00006555                 call    __RTC_CheckEsp
.text:0000655A                 mov     esp, ebp
.text:0000655C                 pop     ebp
.text:0000655D                 retn    4
.text:0000655D ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:0000655D
.text:0000655D _text           ends
.text:0000655D
.text:00006560 ; ===========================================================================
.text:00006560
.text:00006560 ; Segment type: Pure code
.text:00006560 ; Segment permissions: Read/Execute
.text:00006560 _text           segment para public 'CODE' use32
.text:00006560                 assume cs:_text
.text:00006560                 ;org 6560h
.text:00006560 ; COMDAT (pick any)
.text:00006560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006560
.text:00006560 ; =============== S U B R O U T I N E =======================================
.text:00006560
.text:00006560 ; Attributes: bp-based frame
.text:00006560
.text:00006560 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00006560                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00006560 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00006560                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+F0p
.text:00006560                                         ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+22Bp ...
.text:00006560
.text:00006560 var_4           = dword ptr -4
.text:00006560
.text:00006560                 push    ebp
.text:00006561                 mov     ebp, esp
.text:00006563                 push    ecx
.text:00006564                 push    esi
.text:00006565                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000656C                 mov     [ebp+var_4], ecx
.text:0000656F                 mov     eax, [ebp+var_4]
.text:00006572                 cmp     dword ptr [eax], 0
.text:00006575                 jz      short loc_6592
.text:00006577                 mov     ecx, [ebp+var_4]
.text:0000657A                 mov     edx, [ecx]
.text:0000657C                 mov     eax, [ebp+var_4]
.text:0000657F                 mov     ecx, [eax]
.text:00006581                 mov     edx, [edx]
.text:00006583                 mov     esi, esp
.text:00006585                 push    ecx
.text:00006586                 mov     eax, [edx+8]
.text:00006589                 call    eax
.text:0000658B                 cmp     esi, esp
.text:0000658D                 call    __RTC_CheckEsp
.text:00006592
.text:00006592 loc_6592:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00006592                 pop     esi
.text:00006593                 add     esp, 4
.text:00006596                 cmp     ebp, esp
.text:00006598                 call    __RTC_CheckEsp
.text:0000659D                 mov     esp, ebp
.text:0000659F                 pop     ebp
.text:000065A0                 retn
.text:000065A0 ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000065A0
.text:000065A0 ; ---------------------------------------------------------------------------
.text:000065A1                 align 4
.text:000065A1 _text           ends
.text:000065A1
.text:000065A4 ; ===========================================================================
.text:000065A4
.text:000065A4 ; Segment type: Pure code
.text:000065A4 ; Segment permissions: Read/Execute
.text:000065A4 _text           segment para public 'CODE' use32
.text:000065A4                 assume cs:_text
.text:000065A4                 ;org 65A4h
.text:000065A4 ; COMDAT (pick any)
.text:000065A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065A4
.text:000065A4 ; =============== S U B R O U T I N E =======================================
.text:000065A4
.text:000065A4 ; Attributes: bp-based frame
.text:000065A4
.text:000065A4 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000065A4                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000065A4 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000065A4                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+154p
.text:000065A4                                         ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+353p
.text:000065A4
.text:000065A4 var_4           = dword ptr -4
.text:000065A4
.text:000065A4                 push    ebp
.text:000065A5                 mov     ebp, esp
.text:000065A7                 push    ecx
.text:000065A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065AF                 mov     [ebp+var_4], ecx
.text:000065B2                 mov     eax, [ebp+var_4]
.text:000065B5                 mov     eax, [eax]
.text:000065B7                 mov     esp, ebp
.text:000065B9                 pop     ebp
.text:000065BA                 retn
.text:000065BA ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000065BA
.text:000065BA ; ---------------------------------------------------------------------------
.text:000065BB                 align 4
.text:000065BB _text           ends
.text:000065BB
.text:000065BC ; ===========================================================================
.text:000065BC
.text:000065BC ; Segment type: Pure code
.text:000065BC ; Segment permissions: Read/Execute
.text:000065BC _text           segment para public 'CODE' use32
.text:000065BC                 assume cs:_text
.text:000065BC                 ;org 65BCh
.text:000065BC ; COMDAT (pick any)
.text:000065BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065BC
.text:000065BC ; =============== S U B R O U T I N E =======================================
.text:000065BC
.text:000065BC ; Attributes: bp-based frame
.text:000065BC
.text:000065BC ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:000065BC                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:000065BC ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:000065BC                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+B8p
.text:000065BC
.text:000065BC var_4           = dword ptr -4
.text:000065BC
.text:000065BC                 push    ebp
.text:000065BD                 mov     ebp, esp
.text:000065BF                 push    ecx
.text:000065C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065C7                 mov     [ebp+var_4], ecx
.text:000065CA                 mov     eax, [ebp+var_4]
.text:000065CD                 mov     esp, ebp
.text:000065CF                 pop     ebp
.text:000065D0                 retn
.text:000065D0 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:000065D0
.text:000065D0 ; ---------------------------------------------------------------------------
.text:000065D1                 align 4
.text:000065D1 _text           ends
.text:000065D1
.text:000065D4 ; ===========================================================================
.text:000065D4
.text:000065D4 ; Segment type: Pure code
.text:000065D4 ; Segment permissions: Read/Execute
.text:000065D4 _text           segment para public 'CODE' use32
.text:000065D4                 assume cs:_text
.text:000065D4                 ;org 65D4h
.text:000065D4 ; COMDAT (pick any)
.text:000065D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065D4
.text:000065D4 ; =============== S U B R O U T I N E =======================================
.text:000065D4
.text:000065D4 ; Attributes: bp-based frame
.text:000065D4
.text:000065D4 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000065D4                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000065D4 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000065D4                                         ; CODE XREF: CSequentialInStreamWithCRC::SetStream(ISequentialInStream *)+18p
.text:000065D4
.text:000065D4 var_4           = dword ptr -4
.text:000065D4 arg_0           = dword ptr  8
.text:000065D4
.text:000065D4                 push    ebp
.text:000065D5                 mov     ebp, esp
.text:000065D7                 push    ecx
.text:000065D8                 push    esi
.text:000065D9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065E0                 mov     [ebp+var_4], ecx
.text:000065E3                 cmp     [ebp+arg_0], 0
.text:000065E7                 jz      short loc_6600
.text:000065E9                 mov     eax, [ebp+arg_0]
.text:000065EC                 mov     ecx, [eax]
.text:000065EE                 mov     esi, esp
.text:000065F0                 mov     edx, [ebp+arg_0]
.text:000065F3                 push    edx
.text:000065F4                 mov     eax, [ecx+4]
.text:000065F7                 call    eax
.text:000065F9                 cmp     esi, esp
.text:000065FB                 call    __RTC_CheckEsp
.text:00006600
.text:00006600 loc_6600:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00006600                 mov     ecx, [ebp+var_4]
.text:00006603                 cmp     dword ptr [ecx], 0
.text:00006606                 jz      short loc_6623
.text:00006608                 mov     edx, [ebp+var_4]
.text:0000660B                 mov     eax, [edx]
.text:0000660D                 mov     ecx, [ebp+var_4]
.text:00006610                 mov     edx, [ecx]
.text:00006612                 mov     eax, [eax]
.text:00006614                 mov     esi, esp
.text:00006616                 push    edx
.text:00006617                 mov     ecx, [eax+8]
.text:0000661A                 call    ecx
.text:0000661C                 cmp     esi, esp
.text:0000661E                 call    __RTC_CheckEsp
.text:00006623
.text:00006623 loc_6623:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00006623                 mov     edx, [ebp+var_4]
.text:00006626                 mov     eax, [ebp+arg_0]
.text:00006629                 mov     [edx], eax
.text:0000662B                 mov     eax, [ebp+arg_0]
.text:0000662E                 pop     esi
.text:0000662F                 add     esp, 4
.text:00006632                 cmp     ebp, esp
.text:00006634                 call    __RTC_CheckEsp
.text:00006639                 mov     esp, ebp
.text:0000663B                 pop     ebp
.text:0000663C                 retn    4
.text:0000663C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:0000663C
.text:0000663C ; ---------------------------------------------------------------------------
.text:0000663F                 align 10h
.text:0000663F _text           ends
.text:0000663F
.text:00006640 ; ===========================================================================
.text:00006640
.text:00006640 ; Segment type: Pure code
.text:00006640 ; Segment permissions: Read/Execute
.text:00006640 _text           segment para public 'CODE' use32
.text:00006640                 assume cs:_text
.text:00006640                 ;org 6640h
.text:00006640 ; COMDAT (pick any)
.text:00006640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006640
.text:00006640 ; =============== S U B R O U T I N E =======================================
.text:00006640
.text:00006640 ; Attributes: bp-based frame
.text:00006640
.text:00006640 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Init(void)
.text:00006640                 public ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00006640 ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00006640                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+3Ap
.text:00006640
.text:00006640 var_4           = dword ptr -4
.text:00006640
.text:00006640                 push    ebp
.text:00006641                 mov     ebp, esp
.text:00006643                 push    ecx
.text:00006644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000664B                 mov     [ebp+var_4], ecx
.text:0000664E                 mov     ecx, [ebp+var_4]
.text:00006651                 call    ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Init(void)
.text:00006656                 mov     eax, [ebp+var_4]
.text:00006659                 mov     dword ptr [eax+30h], 0
.text:00006660                 add     esp, 4
.text:00006663                 cmp     ebp, esp
.text:00006665                 call    __RTC_CheckEsp
.text:0000666A                 mov     esp, ebp
.text:0000666C                 pop     ebp
.text:0000666D                 retn
.text:0000666D ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:0000666D
.text:0000666D ; ---------------------------------------------------------------------------
.text:0000666E                 align 10h
.text:0000666E _text           ends
.text:0000666E
.text:00006670 ; ===========================================================================
.text:00006670
.text:00006670 ; Segment type: Pure code
.text:00006670 ; Segment permissions: Read/Execute
.text:00006670 _text           segment para public 'CODE' use32
.text:00006670                 assume cs:_text
.text:00006670                 ;org 6670h
.text:00006670 ; COMDAT (pick any)
.text:00006670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006670
.text:00006670 ; =============== S U B R O U T I N E =======================================
.text:00006670
.text:00006670 ; Attributes: bp-based frame
.text:00006670
.text:00006670 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::AlignToByte(void)
.text:00006670                 public ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00006670 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00006670                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::AlignToByte(void)+14p
.text:00006670
.text:00006670 var_4           = dword ptr -4
.text:00006670
.text:00006670                 push    ebp
.text:00006671                 mov     ebp, esp
.text:00006673                 push    ecx
.text:00006674                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000667B                 mov     [ebp+var_4], ecx
.text:0000667E                 mov     eax, [ebp+var_4]
.text:00006681                 mov     ecx, 20h ; ' '
.text:00006686                 sub     ecx, [eax]
.text:00006688                 and     ecx, 7
.text:0000668B                 push    ecx
.text:0000668C                 mov     ecx, [ebp+var_4]
.text:0000668F                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:00006694                 add     esp, 4
.text:00006697                 cmp     ebp, esp
.text:00006699                 call    __RTC_CheckEsp
.text:0000669E                 mov     esp, ebp
.text:000066A0                 pop     ebp
.text:000066A1                 retn
.text:000066A1 ?AlignToByte@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:000066A1
.text:000066A1 ; ---------------------------------------------------------------------------
.text:000066A2                 align 4
.text:000066A2 _text           ends
.text:000066A2
.text:000066A4 ; ===========================================================================
.text:000066A4
.text:000066A4 ; Segment type: Pure code
.text:000066A4 ; Segment permissions: Read/Execute
.text:000066A4 _text           segment para public 'CODE' use32
.text:000066A4                 assume cs:_text
.text:000066A4                 ;org 66A4h
.text:000066A4 ; COMDAT (pick any)
.text:000066A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066A4
.text:000066A4 ; =============== S U B R O U T I N E =======================================
.text:000066A4
.text:000066A4 ; Attributes: bp-based frame
.text:000066A4
.text:000066A4 ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::Create(unsigned int)
.text:000066A4                 public ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z
.text:000066A4 ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z proc near
.text:000066A4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InitInStream(bool)+19p
.text:000066A4
.text:000066A4 var_4           = dword ptr -4
.text:000066A4 arg_0           = dword ptr  8
.text:000066A4
.text:000066A4                 push    ebp
.text:000066A5                 mov     ebp, esp
.text:000066A7                 push    ecx
.text:000066A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066AF                 mov     [ebp+var_4], ecx
.text:000066B2                 mov     eax, [ebp+arg_0]
.text:000066B5                 push    eax             ; unsigned int
.text:000066B6                 mov     ecx, [ebp+var_4]
.text:000066B9                 add     ecx, 8          ; this
.text:000066BC                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:000066C1                 add     esp, 4
.text:000066C4                 cmp     ebp, esp
.text:000066C6                 call    __RTC_CheckEsp
.text:000066CB                 mov     esp, ebp
.text:000066CD                 pop     ebp
.text:000066CE                 retn    4
.text:000066CE ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z endp
.text:000066CE
.text:000066CE ; ---------------------------------------------------------------------------
.text:000066D1                 align 4
.text:000066D1 _text           ends
.text:000066D1
.text:000066D4 ; ===========================================================================
.text:000066D4
.text:000066D4 ; Segment type: Pure code
.text:000066D4 ; Segment permissions: Read/Execute
.text:000066D4 _text           segment para public 'CODE' use32
.text:000066D4                 assume cs:_text
.text:000066D4                 ;org 66D4h
.text:000066D4 ; COMDAT (pick any)
.text:000066D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066D4
.text:000066D4 ; =============== S U B R O U T I N E =======================================
.text:000066D4
.text:000066D4 ; Attributes: bp-based frame
.text:000066D4
.text:000066D4 ; public: unsigned __int64 __thiscall NBitl::CBaseDecoder<class CInBuffer>::GetStreamSize(void)const
.text:000066D4                 public ?GetStreamSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
.text:000066D4 ?GetStreamSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ proc near
.text:000066D4                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::GetStreamSize(void)+14p
.text:000066D4
.text:000066D4 var_4           = dword ptr -4
.text:000066D4
.text:000066D4                 push    ebp
.text:000066D5                 mov     ebp, esp
.text:000066D7                 push    ecx
.text:000066D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000066DF                 mov     [ebp+var_4], ecx
.text:000066E2                 mov     ecx, [ebp+var_4]
.text:000066E5                 add     ecx, 8          ; this
.text:000066E8                 call    ?GetStreamSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetStreamSize(void)
.text:000066ED                 add     esp, 4
.text:000066F0                 cmp     ebp, esp
.text:000066F2                 call    __RTC_CheckEsp
.text:000066F7                 mov     esp, ebp
.text:000066F9                 pop     ebp
.text:000066FA                 retn
.text:000066FA ?GetStreamSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ endp
.text:000066FA
.text:000066FA ; ---------------------------------------------------------------------------
.text:000066FB                 align 4
.text:000066FB _text           ends
.text:000066FB
.text:000066FC ; ===========================================================================
.text:000066FC
.text:000066FC ; Segment type: Pure code
.text:000066FC ; Segment permissions: Read/Execute
.text:000066FC _text           segment para public 'CODE' use32
.text:000066FC                 assume cs:_text
.text:000066FC                 ;org 66FCh
.text:000066FC ; COMDAT (pick any)
.text:000066FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000066FC
.text:000066FC ; =============== S U B R O U T I N E =======================================
.text:000066FC
.text:000066FC ; Attributes: bp-based frame
.text:000066FC
.text:000066FC ; unsigned __int64 __thiscall CInBufferBase::GetStreamSize(CInBufferBase *__hidden this)
.text:000066FC                 public ?GetStreamSize@CInBufferBase@@QBE_KXZ
.text:000066FC ?GetStreamSize@CInBufferBase@@QBE_KXZ proc near
.text:000066FC                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::GetStreamSize(void)+14p
.text:000066FC
.text:000066FC var_4           = dword ptr -4
.text:000066FC
.text:000066FC                 push    ebp
.text:000066FD                 mov     ebp, esp
.text:000066FF                 push    ecx
.text:00006700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006707                 mov     [ebp+var_4], ecx
.text:0000670A                 mov     eax, [ebp+var_4]
.text:0000670D                 mov     ecx, [ebp+var_4]
.text:00006710                 mov     eax, [eax]
.text:00006712                 sub     eax, [ecx+8]
.text:00006715                 cdq
.text:00006716                 mov     ecx, [ebp+var_4]
.text:00006719                 add     eax, [ecx+10h]
.text:0000671C                 adc     edx, [ecx+14h]
.text:0000671F                 mov     esp, ebp
.text:00006721                 pop     ebp
.text:00006722                 retn
.text:00006722 ?GetStreamSize@CInBufferBase@@QBE_KXZ endp
.text:00006722
.text:00006722 ; ---------------------------------------------------------------------------
.text:00006723                 align 4
.text:00006723 _text           ends
.text:00006723
.text:00006724 ; ===========================================================================
.text:00006724
.text:00006724 ; Segment type: Pure code
.text:00006724 ; Segment permissions: Read/Execute
.text:00006724 _text           segment para public 'CODE' use32
.text:00006724                 assume cs:_text
.text:00006724                 ;org 6724h
.text:00006724 ; COMDAT (pick any)
.text:00006724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006724
.text:00006724 ; =============== S U B R O U T I N E =======================================
.text:00006724
.text:00006724 ; Attributes: bp-based frame
.text:00006724
.text:00006724 ; public: unsigned __int64 __thiscall NBitl::CBaseDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:00006724                 public ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
.text:00006724 ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ proc near
.text:00006724                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::GetInputProcessedSize(void)+14p
.text:00006724
.text:00006724 var_4           = dword ptr -4
.text:00006724
.text:00006724                 push    ebp
.text:00006725                 mov     ebp, esp
.text:00006727                 push    ecx
.text:00006728                 push    esi
.text:00006729                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006730                 mov     [ebp+var_4], ecx
.text:00006733                 mov     ecx, [ebp+var_4]
.text:00006736                 add     ecx, 8          ; this
.text:00006739                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:0000673E                 mov     ecx, [ebp+var_4]
.text:00006741                 mov     esi, 20h ; ' '
.text:00006746                 sub     esi, [ecx]
.text:00006748                 shr     esi, 3
.text:0000674B                 xor     ecx, ecx
.text:0000674D                 sub     eax, esi
.text:0000674F                 sbb     edx, ecx
.text:00006751                 pop     esi
.text:00006752                 add     esp, 4
.text:00006755                 cmp     ebp, esp
.text:00006757                 call    __RTC_CheckEsp
.text:0000675C                 mov     esp, ebp
.text:0000675E                 pop     ebp
.text:0000675F                 retn
.text:0000675F ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ endp
.text:0000675F
.text:0000675F _text           ends
.text:0000675F
.text:00006760 ; ===========================================================================
.text:00006760
.text:00006760 ; Segment type: Pure code
.text:00006760 ; Segment permissions: Read/Execute
.text:00006760 _text           segment para public 'CODE' use32
.text:00006760                 assume cs:_text
.text:00006760                 ;org 6760h
.text:00006760 ; COMDAT (pick any)
.text:00006760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006760
.text:00006760 ; =============== S U B R O U T I N E =======================================
.text:00006760
.text:00006760 ; Attributes: bp-based frame
.text:00006760
.text:00006760 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00006760                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00006760 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00006760                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:00006760
.text:00006760 var_4           = dword ptr -4
.text:00006760
.text:00006760                 push    ebp
.text:00006761                 mov     ebp, esp
.text:00006763                 push    ecx
.text:00006764                 push    esi
.text:00006765                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000676C                 mov     [ebp+var_4], ecx
.text:0000676F                 mov     eax, [ebp+var_4]
.text:00006772                 mov     ecx, [eax+20h]
.text:00006775                 xor     esi, esi
.text:00006777                 mov     edx, [ebp+var_4]
.text:0000677A                 add     ecx, [edx+10h]
.text:0000677D                 adc     esi, [edx+14h]
.text:00006780                 mov     eax, [ebp+var_4]
.text:00006783                 mov     edx, [ebp+var_4]
.text:00006786                 mov     eax, [eax]
.text:00006788                 sub     eax, [edx+8]
.text:0000678B                 cdq
.text:0000678C                 add     ecx, eax
.text:0000678E                 adc     esi, edx
.text:00006790                 mov     eax, ecx
.text:00006792                 mov     edx, esi
.text:00006794                 pop     esi
.text:00006795                 mov     esp, ebp
.text:00006797                 pop     ebp
.text:00006798                 retn
.text:00006798 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00006798
.text:00006798 ; ---------------------------------------------------------------------------
.text:00006799                 align 4
.text:00006799 _text           ends
.text:00006799
.text:0000679C ; ===========================================================================
.text:0000679C
.text:0000679C ; Segment type: Pure code
.text:0000679C ; Segment permissions: Read/Execute
.text:0000679C _text           segment para public 'CODE' use32
.text:0000679C                 assume cs:_text
.text:0000679C                 ;org 679Ch
.text:0000679C ; COMDAT (pick any)
.text:0000679C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000679C
.text:0000679C ; =============== S U B R O U T I N E =======================================
.text:0000679C
.text:0000679C ; Attributes: bp-based frame
.text:0000679C
.text:0000679C ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::ExtraBitsWereRead(void)const
.text:0000679C                 public ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
.text:0000679C ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ proc near
.text:0000679C                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCoder::InputEofError(void)+14p
.text:0000679C
.text:0000679C var_8           = dword ptr -8
.text:0000679C var_4           = dword ptr -4
.text:0000679C
.text:0000679C                 push    ebp
.text:0000679D                 mov     ebp, esp
.text:0000679F                 sub     esp, 8
.text:000067A2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000067A9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067B0                 mov     [ebp+var_4], ecx
.text:000067B3                 mov     eax, [ebp+var_4]
.text:000067B6                 cmp     dword ptr [eax+28h], 4
.text:000067BA                 ja      short loc_67DC
.text:000067BC                 mov     ecx, [ebp+var_4]
.text:000067BF                 mov     edx, 20h ; ' '
.text:000067C4                 sub     edx, [ecx]
.text:000067C6                 mov     eax, [ebp+var_4]
.text:000067C9                 mov     ecx, [eax+28h]
.text:000067CC                 shl     ecx, 3
.text:000067CF                 cmp     edx, ecx
.text:000067D1                 jb      short loc_67DC
.text:000067D3                 mov     [ebp+var_8], 0
.text:000067DA                 jmp     short loc_67E3
.text:000067DC ; ---------------------------------------------------------------------------
.text:000067DC
.text:000067DC loc_67DC:                               ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+1Ej
.text:000067DC                                         ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+35j
.text:000067DC                 mov     [ebp+var_8], 1
.text:000067E3
.text:000067E3 loc_67E3:                               ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead(void)+3Ej
.text:000067E3                 mov     al, byte ptr [ebp+var_8]
.text:000067E6                 mov     esp, ebp
.text:000067E8                 pop     ebp
.text:000067E9                 retn
.text:000067E9 ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ endp
.text:000067E9
.text:000067E9 ; ---------------------------------------------------------------------------
.text:000067EA                 align 4
.text:000067EA _text           ends
.text:000067EA
.text:000067EC ; ===========================================================================
.text:000067EC
.text:000067EC ; Segment type: Pure code
.text:000067EC ; Segment permissions: Read/Execute
.text:000067EC _text           segment para public 'CODE' use32
.text:000067EC                 assume cs:_text
.text:000067EC                 ;org 67ECh
.text:000067EC ; COMDAT (pick any)
.text:000067EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067EC
.text:000067EC ; =============== S U B R O U T I N E =======================================
.text:000067EC
.text:000067EC ; Attributes: bp-based frame
.text:000067EC
.text:000067EC ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:000067EC                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:000067EC ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:000067EC                                         ; CODE XREF: CProps::CProps(void)+11p
.text:000067EC
.text:000067EC var_4           = dword ptr -4
.text:000067EC
.text:000067EC                 push    ebp
.text:000067ED                 mov     ebp, esp
.text:000067EF                 push    ecx
.text:000067F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000067F7                 mov     [ebp+var_4], ecx
.text:000067FA                 mov     ecx, [ebp+var_4]
.text:000067FD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006802                 mov     eax, [ebp+var_4]
.text:00006805                 add     esp, 4
.text:00006808                 cmp     ebp, esp
.text:0000680A                 call    __RTC_CheckEsp
.text:0000680F                 mov     esp, ebp
.text:00006811                 pop     ebp
.text:00006812                 retn
.text:00006812 ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00006812
.text:00006812 ; ---------------------------------------------------------------------------
.text:00006813                 align 4
.text:00006813 _text           ends
.text:00006813
.text:00006814 ; ===========================================================================
.text:00006814
.text:00006814 ; Segment type: Pure code
.text:00006814 ; Segment permissions: Read/Execute
.text:00006814 _text           segment para public 'CODE' use32
.text:00006814                 assume cs:_text
.text:00006814                 ;org 6814h
.text:00006814 ; COMDAT (pick any)
.text:00006814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006814
.text:00006814 ; =============== S U B R O U T I N E =======================================
.text:00006814
.text:00006814 ; Attributes: bp-based frame
.text:00006814
.text:00006814 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00006814                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00006814 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00006814                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00006814
.text:00006814 var_20          = dword ptr -20h
.text:00006814 var_1C          = dword ptr -1Ch
.text:00006814 var_18          = dword ptr -18h
.text:00006814 var_14          = dword ptr -14h
.text:00006814 var_10          = dword ptr -10h
.text:00006814 var_C           = dword ptr -0Ch
.text:00006814 var_4           = dword ptr -4
.text:00006814
.text:00006814                 push    ebp
.text:00006815                 mov     ebp, esp
.text:00006817                 push    0FFFFFFFFh
.text:00006819                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:0000681E                 mov     eax, large fs:0
.text:00006824                 push    eax
.text:00006825                 sub     esp, 14h
.text:00006828                 mov     eax, 0CCCCCCCCh
.text:0000682D                 mov     [ebp+var_20], eax
.text:00006830                 mov     [ebp+var_1C], eax
.text:00006833                 mov     [ebp+var_18], eax
.text:00006836                 mov     [ebp+var_14], eax
.text:00006839                 mov     [ebp+var_10], eax
.text:0000683C                 mov     eax, dword ptr ds:___security_cookie
.text:00006841                 xor     eax, ebp
.text:00006843                 push    eax
.text:00006844                 lea     eax, [ebp+var_C]
.text:00006847                 mov     large fs:0, eax
.text:0000684D                 mov     [ebp+var_10], ecx
.text:00006850                 mov     [ebp+var_4], 0
.text:00006857                 mov     ecx, [ebp+var_10]
.text:0000685A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000685F                 mov     [ebp+var_14], eax
.text:00006862
.text:00006862 loc_6862:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_68A4j
.text:00006862                 cmp     [ebp+var_14], 0
.text:00006866                 jz      short loc_68A6
.text:00006868                 mov     eax, [ebp+var_14]
.text:0000686B                 sub     eax, 1
.text:0000686E                 mov     [ebp+var_14], eax
.text:00006871                 mov     ecx, [ebp+var_14]
.text:00006874                 push    ecx
.text:00006875                 mov     ecx, [ebp+var_10]
.text:00006878                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000687D                 mov     edx, [eax]
.text:0000687F                 mov     [ebp+var_1C], edx
.text:00006882                 mov     eax, [ebp+var_1C]
.text:00006885                 mov     [ebp+var_18], eax
.text:00006888                 cmp     [ebp+var_18], 0
.text:0000688C                 jz      short loc_689D
.text:0000688E                 push    1
.text:00006890                 mov     ecx, [ebp+var_18]
.text:00006893                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00006898                 mov     [ebp+var_20], eax
.text:0000689B                 jmp     short loc_68A4
.text:0000689D ; ---------------------------------------------------------------------------
.text:0000689D
.text:0000689D loc_689D:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:0000689D                 mov     [ebp+var_20], 0
.text:000068A4
.text:000068A4 loc_68A4:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:000068A4                 jmp     short loc_6862
.text:000068A6 ; ---------------------------------------------------------------------------
.text:000068A6
.text:000068A6 loc_68A6:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:000068A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000068AD                 mov     ecx, [ebp+var_10]
.text:000068B0                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000068B5                 mov     ecx, [ebp+var_C]
.text:000068B8                 mov     large fs:0, ecx
.text:000068BF                 pop     ecx
.text:000068C0                 add     esp, 20h
.text:000068C3                 cmp     ebp, esp
.text:000068C5                 call    __RTC_CheckEsp
.text:000068CA                 mov     esp, ebp
.text:000068CC                 pop     ebp
.text:000068CD                 retn
.text:000068CD ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000068CD
.text:000068CD ; ---------------------------------------------------------------------------
.text:000068CE                 align 10h
.text:000068CE _text           ends
.text:000068CE
.text$x:000068D0 ; ===========================================================================
.text$x:000068D0
.text$x:000068D0 ; Segment type: Pure code
.text$x:000068D0 ; Segment permissions: Read/Execute
.text$x:000068D0 _text$x         segment para public 'CODE' use32
.text$x:000068D0                 assume cs:_text$x
.text$x:000068D0                 ;org 68D0h
.text$x:000068D0 ; COMDAT (pick associative to section at 6814)
.text$x:000068D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000068D0
.text$x:000068D0 ; =============== S U B R O U T I N E =======================================
.text$x:000068D0
.text$x:000068D0
.text$x:000068D0 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:000068D0                                         ; DATA XREF: .xdata$x:000068F8o
.text$x:000068D0                 mov     ecx, [ebp-10h]
.text$x:000068D3                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000068D3 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:000068D3
.text$x:000068D8
.text$x:000068D8 ; =============== S U B R O U T I N E =======================================
.text$x:000068D8
.text$x:000068D8
.text$x:000068D8 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:000068D8                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:000068D8
.text$x:000068D8 arg_4           = dword ptr  8
.text$x:000068D8
.text$x:000068D8                 mov     edx, [esp+arg_4]
.text$x:000068DC                 lea     eax, [edx+0Ch]
.text$x:000068DF                 mov     ecx, [edx-18h]
.text$x:000068E2                 xor     ecx, eax
.text$x:000068E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068E9                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:000068EE                 jmp     ___CxxFrameHandler3
.text$x:000068EE __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:000068EE
.text$x:000068EE ; ---------------------------------------------------------------------------
.text$x:000068F3                 align 4
.text$x:000068F3 _text$x         ends
.text$x:000068F3
.xdata$x:000068F4 ; ===========================================================================
.xdata$x:000068F4
.xdata$x:000068F4 ; Segment type: Pure data
.xdata$x:000068F4 ; Segment permissions: Read
.xdata$x:000068F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000068F4                 assume cs:_xdata$x
.xdata$x:000068F4                 ;org 68F4h
.xdata$x:000068F4 ; COMDAT (pick associative to section at 6814)
.xdata$x:000068F4 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:000068F4                                         ; DATA XREF: .xdata$x:00006904o
.xdata$x:000068F5                 db 0FFh
.xdata$x:000068F6                 db 0FFh
.xdata$x:000068F7                 db 0FFh
.xdata$x:000068F8                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:000068FC __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:000068FC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:000068FD                 db    5
.xdata$x:000068FE                 db  93h ; Ã´
.xdata$x:000068FF                 db  19h
.xdata$x:00006900                 db    1
.xdata$x:00006901                 db    0
.xdata$x:00006902                 db    0
.xdata$x:00006903                 db    0
.xdata$x:00006904                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00006908                 db    0
.xdata$x:00006909                 db    0
.xdata$x:0000690A                 db    0
.xdata$x:0000690B                 db    0
.xdata$x:0000690C                 db    0
.xdata$x:0000690D                 db    0
.xdata$x:0000690E                 db    0
.xdata$x:0000690F                 db    0
.xdata$x:00006910                 db    0
.xdata$x:00006911                 db    0
.xdata$x:00006912                 db    0
.xdata$x:00006913                 db    0
.xdata$x:00006914                 db    0
.xdata$x:00006915                 db    0
.xdata$x:00006916                 db    0
.xdata$x:00006917                 db    0
.xdata$x:00006918                 db    0
.xdata$x:00006919                 db    0
.xdata$x:0000691A                 db    0
.xdata$x:0000691B                 db    0
.xdata$x:0000691C                 db    1
.xdata$x:0000691D                 db    0
.xdata$x:0000691E                 db    0
.xdata$x:0000691F                 db    0
.xdata$x:0000691F _xdata$x        ends
.xdata$x:0000691F
.text:00006920 ; ===========================================================================
.text:00006920
.text:00006920 ; Segment type: Pure code
.text:00006920 ; Segment permissions: Read/Execute
.text:00006920 _text           segment para public 'CODE' use32
.text:00006920                 assume cs:_text
.text:00006920                 ;org 6920h
.text:00006920 ; COMDAT (pick any)
.text:00006920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006920
.text:00006920 ; =============== S U B R O U T I N E =======================================
.text:00006920
.text:00006920 ; Attributes: bp-based frame
.text:00006920
.text:00006920 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00006920                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00006920 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00006920                                         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+ACp
.text:00006920
.text:00006920 var_4           = dword ptr -4
.text:00006920
.text:00006920                 push    ebp
.text:00006921                 mov     ebp, esp
.text:00006923                 push    ecx
.text:00006924                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000692B                 mov     [ebp+var_4], ecx
.text:0000692E                 mov     eax, [ebp+var_4]
.text:00006931                 mov     dword ptr [eax], 0
.text:00006937                 mov     eax, [ebp+var_4]
.text:0000693A                 mov     esp, ebp
.text:0000693C                 pop     ebp
.text:0000693D                 retn
.text:0000693D ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:0000693D
.text:0000693D ; ---------------------------------------------------------------------------
.text:0000693E                 align 10h
.text:0000693E _text           ends
.text:0000693E
.text:00006940 ; ===========================================================================
.text:00006940
.text:00006940 ; Segment type: Pure code
.text:00006940 ; Segment permissions: Read/Execute
.text:00006940 _text           segment para public 'CODE' use32
.text:00006940                 assume cs:_text
.text:00006940                 ;org 6940h
.text:00006940 ; COMDAT (pick any)
.text:00006940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006940
.text:00006940 ; =============== S U B R O U T I N E =======================================
.text:00006940
.text:00006940 ; Attributes: bp-based frame
.text:00006940
.text:00006940 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00006940                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00006940 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00006940                                         ; CODE XREF: __unwindfunclet$??0CHandler@NGz@NArchive@@QAE@XZ$1+6j
.text:00006940                                         ; NArchive::NGz::CHandler::~CHandler(void)+58p ...
.text:00006940
.text:00006940 var_4           = dword ptr -4
.text:00006940
.text:00006940                 push    ebp
.text:00006941                 mov     ebp, esp
.text:00006943                 push    ecx
.text:00006944                 push    esi
.text:00006945                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000694C                 mov     [ebp+var_4], ecx
.text:0000694F                 mov     eax, [ebp+var_4]
.text:00006952                 cmp     dword ptr [eax], 0
.text:00006955                 jz      short loc_6972
.text:00006957                 mov     ecx, [ebp+var_4]
.text:0000695A                 mov     edx, [ecx]
.text:0000695C                 mov     eax, [ebp+var_4]
.text:0000695F                 mov     ecx, [eax]
.text:00006961                 mov     edx, [edx]
.text:00006963                 mov     esi, esp
.text:00006965                 push    ecx
.text:00006966                 mov     eax, [edx+8]
.text:00006969                 call    eax
.text:0000696B                 cmp     esi, esp
.text:0000696D                 call    __RTC_CheckEsp
.text:00006972
.text:00006972 loc_6972:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00006972                 pop     esi
.text:00006973                 add     esp, 4
.text:00006976                 cmp     ebp, esp
.text:00006978                 call    __RTC_CheckEsp
.text:0000697D                 mov     esp, ebp
.text:0000697F                 pop     ebp
.text:00006980                 retn
.text:00006980 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00006980
.text:00006980 ; ---------------------------------------------------------------------------
.text:00006981                 align 4
.text:00006981 _text           ends
.text:00006981
.text:00006984 ; ===========================================================================
.text:00006984
.text:00006984 ; Segment type: Pure code
.text:00006984 ; Segment permissions: Read/Execute
.text:00006984 _text           segment para public 'CODE' use32
.text:00006984                 assume cs:_text
.text:00006984                 ;org 6984h
.text:00006984 ; COMDAT (pick any)
.text:00006984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006984
.text:00006984 ; =============== S U B R O U T I N E =======================================
.text:00006984
.text:00006984 ; Attributes: bp-based frame
.text:00006984
.text:00006984 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00006984                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00006984 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00006984                                         ; CODE XREF: NArchive::NGz::CHandler::Close(void)+5Dp
.text:00006984
.text:00006984 var_4           = dword ptr -4
.text:00006984
.text:00006984                 push    ebp
.text:00006985                 mov     ebp, esp
.text:00006987                 push    ecx
.text:00006988                 push    esi
.text:00006989                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006990                 mov     [ebp+var_4], ecx
.text:00006993                 mov     eax, [ebp+var_4]
.text:00006996                 cmp     dword ptr [eax], 0
.text:00006999                 jz      short loc_69BF
.text:0000699B                 mov     ecx, [ebp+var_4]
.text:0000699E                 mov     edx, [ecx]
.text:000069A0                 mov     eax, [ebp+var_4]
.text:000069A3                 mov     ecx, [eax]
.text:000069A5                 mov     edx, [edx]
.text:000069A7                 mov     esi, esp
.text:000069A9                 push    ecx
.text:000069AA                 mov     eax, [edx+8]
.text:000069AD                 call    eax
.text:000069AF                 cmp     esi, esp
.text:000069B1                 call    __RTC_CheckEsp
.text:000069B6                 mov     ecx, [ebp+var_4]
.text:000069B9                 mov     dword ptr [ecx], 0
.text:000069BF
.text:000069BF loc_69BF:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:000069BF                 pop     esi
.text:000069C0                 add     esp, 4
.text:000069C3                 cmp     ebp, esp
.text:000069C5                 call    __RTC_CheckEsp
.text:000069CA                 mov     esp, ebp
.text:000069CC                 pop     ebp
.text:000069CD                 retn
.text:000069CD ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:000069CD
.text:000069CD ; ---------------------------------------------------------------------------
.text:000069CE                 align 10h
.text:000069CE _text           ends
.text:000069CE
.text:000069D0 ; ===========================================================================
.text:000069D0
.text:000069D0 ; Segment type: Pure code
.text:000069D0 ; Segment permissions: Read/Execute
.text:000069D0 _text           segment para public 'CODE' use32
.text:000069D0                 assume cs:_text
.text:000069D0                 ;org 69D0h
.text:000069D0 ; COMDAT (pick any)
.text:000069D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069D0
.text:000069D0 ; =============== S U B R O U T I N E =======================================
.text:000069D0
.text:000069D0 ; Attributes: bp-based frame
.text:000069D0
.text:000069D0 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000069D0                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000069D0 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000069D0                                         ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+11Dp
.text:000069D0                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+153p ...
.text:000069D0
.text:000069D0 var_4           = dword ptr -4
.text:000069D0
.text:000069D0                 push    ebp
.text:000069D1                 mov     ebp, esp
.text:000069D3                 push    ecx
.text:000069D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069DB                 mov     [ebp+var_4], ecx
.text:000069DE                 mov     eax, [ebp+var_4]
.text:000069E1                 mov     eax, [eax]
.text:000069E3                 mov     esp, ebp
.text:000069E5                 pop     ebp
.text:000069E6                 retn
.text:000069E6 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000069E6
.text:000069E6 ; ---------------------------------------------------------------------------
.text:000069E7                 align 4
.text:000069E7 _text           ends
.text:000069E7
.text:000069E8 ; ===========================================================================
.text:000069E8
.text:000069E8 ; Segment type: Pure code
.text:000069E8 ; Segment permissions: Read/Execute
.text:000069E8 _text           segment para public 'CODE' use32
.text:000069E8                 assume cs:_text
.text:000069E8                 ;org 69E8h
.text:000069E8 ; COMDAT (pick any)
.text:000069E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000069E8
.text:000069E8 ; =============== S U B R O U T I N E =======================================
.text:000069E8
.text:000069E8 ; Attributes: bp-based frame
.text:000069E8
.text:000069E8 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000069E8                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000069E8 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000069E8                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+326p
.text:000069E8                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+815p
.text:000069E8
.text:000069E8 var_4           = dword ptr -4
.text:000069E8
.text:000069E8                 push    ebp
.text:000069E9                 mov     ebp, esp
.text:000069EB                 push    ecx
.text:000069EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000069F3                 mov     [ebp+var_4], ecx
.text:000069F6                 mov     eax, [ebp+var_4]
.text:000069F9                 mov     eax, [eax]
.text:000069FB                 mov     esp, ebp
.text:000069FD                 pop     ebp
.text:000069FE                 retn
.text:000069FE ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000069FE
.text:000069FE ; ---------------------------------------------------------------------------
.text:000069FF                 align 10h
.text:000069FF _text           ends
.text:000069FF
.text:00006A00 ; ===========================================================================
.text:00006A00
.text:00006A00 ; Segment type: Pure code
.text:00006A00 ; Segment permissions: Read/Execute
.text:00006A00 _text           segment para public 'CODE' use32
.text:00006A00                 assume cs:_text
.text:00006A00                 ;org 6A00h
.text:00006A00 ; COMDAT (pick any)
.text:00006A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A00
.text:00006A00 ; =============== S U B R O U T I N E =======================================
.text:00006A00
.text:00006A00 ; Attributes: bp-based frame
.text:00006A00
.text:00006A00 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00006A00                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00006A00 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00006A00                                         ; CODE XREF: NArchive::NGz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+F6p
.text:00006A00
.text:00006A00 var_4           = dword ptr -4
.text:00006A00 arg_0           = dword ptr  8
.text:00006A00
.text:00006A00                 push    ebp
.text:00006A01                 mov     ebp, esp
.text:00006A03                 push    ecx
.text:00006A04                 push    esi
.text:00006A05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A0C                 mov     [ebp+var_4], ecx
.text:00006A0F                 cmp     [ebp+arg_0], 0
.text:00006A13                 jz      short loc_6A2C
.text:00006A15                 mov     eax, [ebp+arg_0]
.text:00006A18                 mov     ecx, [eax]
.text:00006A1A                 mov     esi, esp
.text:00006A1C                 mov     edx, [ebp+arg_0]
.text:00006A1F                 push    edx
.text:00006A20                 mov     eax, [ecx+4]
.text:00006A23                 call    eax
.text:00006A25                 cmp     esi, esp
.text:00006A27                 call    __RTC_CheckEsp
.text:00006A2C
.text:00006A2C loc_6A2C:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00006A2C                 mov     ecx, [ebp+var_4]
.text:00006A2F                 cmp     dword ptr [ecx], 0
.text:00006A32                 jz      short loc_6A4F
.text:00006A34                 mov     edx, [ebp+var_4]
.text:00006A37                 mov     eax, [edx]
.text:00006A39                 mov     ecx, [ebp+var_4]
.text:00006A3C                 mov     edx, [ecx]
.text:00006A3E                 mov     eax, [eax]
.text:00006A40                 mov     esi, esp
.text:00006A42                 push    edx
.text:00006A43                 mov     ecx, [eax+8]
.text:00006A46                 call    ecx
.text:00006A48                 cmp     esi, esp
.text:00006A4A                 call    __RTC_CheckEsp
.text:00006A4F
.text:00006A4F loc_6A4F:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:00006A4F                 mov     edx, [ebp+var_4]
.text:00006A52                 mov     eax, [ebp+arg_0]
.text:00006A55                 mov     [edx], eax
.text:00006A57                 mov     eax, [ebp+arg_0]
.text:00006A5A                 pop     esi
.text:00006A5B                 add     esp, 4
.text:00006A5E                 cmp     ebp, esp
.text:00006A60                 call    __RTC_CheckEsp
.text:00006A65                 mov     esp, ebp
.text:00006A67                 pop     ebp
.text:00006A68                 retn    4
.text:00006A68 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00006A68
.text:00006A68 ; ---------------------------------------------------------------------------
.text:00006A6B                 align 4
.text:00006A6B _text           ends
.text:00006A6B
.text:00006A6C ; ===========================================================================
.text:00006A6C
.text:00006A6C ; Segment type: Pure code
.text:00006A6C ; Segment permissions: Read/Execute
.text:00006A6C _text           segment para public 'CODE' use32
.text:00006A6C                 assume cs:_text
.text:00006A6C                 ;org 6A6Ch
.text:00006A6C ; COMDAT (pick any)
.text:00006A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A6C
.text:00006A6C ; =============== S U B R O U T I N E =======================================
.text:00006A6C
.text:00006A6C ; Attributes: bp-based frame
.text:00006A6C
.text:00006A6C ; public: bool __thiscall CMyComPtr<struct IInStream>::operator!(void)const
.text:00006A6C                 public ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
.text:00006A6C ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ proc near
.text:00006A6C                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2D1p
.text:00006A6C                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5D7p
.text:00006A6C
.text:00006A6C var_4           = dword ptr -4
.text:00006A6C
.text:00006A6C                 push    ebp
.text:00006A6D                 mov     ebp, esp
.text:00006A6F                 push    ecx
.text:00006A70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A77                 mov     [ebp+var_4], ecx
.text:00006A7A                 mov     eax, [ebp+var_4]
.text:00006A7D                 xor     ecx, ecx
.text:00006A7F                 cmp     dword ptr [eax], 0
.text:00006A82                 setz    cl
.text:00006A85                 mov     al, cl
.text:00006A87                 mov     esp, ebp
.text:00006A89                 pop     ebp
.text:00006A8A                 retn
.text:00006A8A ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ endp
.text:00006A8A
.text:00006A8A ; ---------------------------------------------------------------------------
.text:00006A8B                 align 4
.text:00006A8B _text           ends
.text:00006A8B
.text:00006A8C ; ===========================================================================
.text:00006A8C
.text:00006A8C ; Segment type: Pure code
.text:00006A8C ; Segment permissions: Read/Execute
.text:00006A8C _text           segment para public 'CODE' use32
.text:00006A8C                 assume cs:_text
.text:00006A8C                 ;org 6A8Ch
.text:00006A8C ; COMDAT (pick any)
.text:00006A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006A8C
.text:00006A8C ; =============== S U B R O U T I N E =======================================
.text:00006A8C
.text:00006A8C ; Attributes: bp-based frame
.text:00006A8C
.text:00006A8C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:00006A8C                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00006A8C ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00006A8C                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A3p
.text:00006A8C                                         ; COutStreamWithCRC::COutStreamWithCRC(void)+30p
.text:00006A8C
.text:00006A8C var_4           = dword ptr -4
.text:00006A8C
.text:00006A8C                 push    ebp
.text:00006A8D                 mov     ebp, esp
.text:00006A8F                 push    ecx
.text:00006A90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006A97                 mov     [ebp+var_4], ecx
.text:00006A9A                 mov     eax, [ebp+var_4]
.text:00006A9D                 mov     dword ptr [eax], 0
.text:00006AA3                 mov     eax, [ebp+var_4]
.text:00006AA6                 mov     esp, ebp
.text:00006AA8                 pop     ebp
.text:00006AA9                 retn
.text:00006AA9 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00006AA9
.text:00006AA9 ; ---------------------------------------------------------------------------
.text:00006AAA                 align 4
.text:00006AAA _text           ends
.text:00006AAA
.text:00006AAC ; ===========================================================================
.text:00006AAC
.text:00006AAC ; Segment type: Pure code
.text:00006AAC ; Segment permissions: Read/Execute
.text:00006AAC _text           segment para public 'CODE' use32
.text:00006AAC                 assume cs:_text
.text:00006AAC                 ;org 6AACh
.text:00006AAC ; COMDAT (pick any)
.text:00006AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AAC
.text:00006AAC ; =============== S U B R O U T I N E =======================================
.text:00006AAC
.text:00006AAC ; Attributes: bp-based frame
.text:00006AAC
.text:00006AAC ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:00006AAC                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:00006AAC ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:00006AAC                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F2p
.text:00006AAC
.text:00006AAC var_4           = dword ptr -4
.text:00006AAC arg_0           = dword ptr  8
.text:00006AAC
.text:00006AAC                 push    ebp
.text:00006AAD                 mov     ebp, esp
.text:00006AAF                 push    ecx
.text:00006AB0                 push    esi
.text:00006AB1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006AB8                 mov     [ebp+var_4], ecx
.text:00006ABB                 mov     eax, [ebp+var_4]
.text:00006ABE                 mov     ecx, [ebp+arg_0]
.text:00006AC1                 mov     [eax], ecx
.text:00006AC3                 cmp     [ebp+arg_0], 0
.text:00006AC7                 jz      short loc_6AE0
.text:00006AC9                 mov     edx, [ebp+arg_0]
.text:00006ACC                 mov     eax, [edx]
.text:00006ACE                 mov     esi, esp
.text:00006AD0                 mov     ecx, [ebp+arg_0]
.text:00006AD3                 push    ecx
.text:00006AD4                 mov     edx, [eax+4]
.text:00006AD7                 call    edx
.text:00006AD9                 cmp     esi, esp
.text:00006ADB                 call    __RTC_CheckEsp
.text:00006AE0
.text:00006AE0 loc_6AE0:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:00006AE0                 mov     eax, [ebp+var_4]
.text:00006AE3                 pop     esi
.text:00006AE4                 add     esp, 4
.text:00006AE7                 cmp     ebp, esp
.text:00006AE9                 call    __RTC_CheckEsp
.text:00006AEE                 mov     esp, ebp
.text:00006AF0                 pop     ebp
.text:00006AF1                 retn    4
.text:00006AF1 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00006AF1
.text:00006AF1 _text           ends
.text:00006AF1
.text:00006AF4 ; ===========================================================================
.text:00006AF4
.text:00006AF4 ; Segment type: Pure code
.text:00006AF4 ; Segment permissions: Read/Execute
.text:00006AF4 _text           segment para public 'CODE' use32
.text:00006AF4                 assume cs:_text
.text:00006AF4                 ;org 6AF4h
.text:00006AF4 ; COMDAT (pick any)
.text:00006AF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006AF4
.text:00006AF4 ; =============== S U B R O U T I N E =======================================
.text:00006AF4
.text:00006AF4 ; Attributes: bp-based frame
.text:00006AF4
.text:00006AF4 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00006AF4                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00006AF4 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00006AF4                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+115p
.text:00006AF4                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+155p ...
.text:00006AF4
.text:00006AF4 var_4           = dword ptr -4
.text:00006AF4
.text:00006AF4                 push    ebp
.text:00006AF5                 mov     ebp, esp
.text:00006AF7                 push    ecx
.text:00006AF8                 push    esi
.text:00006AF9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B00                 mov     [ebp+var_4], ecx
.text:00006B03                 mov     eax, [ebp+var_4]
.text:00006B06                 cmp     dword ptr [eax], 0
.text:00006B09                 jz      short loc_6B26
.text:00006B0B                 mov     ecx, [ebp+var_4]
.text:00006B0E                 mov     edx, [ecx]
.text:00006B10                 mov     eax, [ebp+var_4]
.text:00006B13                 mov     ecx, [eax]
.text:00006B15                 mov     edx, [edx]
.text:00006B17                 mov     esi, esp
.text:00006B19                 push    ecx
.text:00006B1A                 mov     eax, [edx+8]
.text:00006B1D                 call    eax
.text:00006B1F                 cmp     esi, esp
.text:00006B21                 call    __RTC_CheckEsp
.text:00006B26
.text:00006B26 loc_6B26:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00006B26                 pop     esi
.text:00006B27                 add     esp, 4
.text:00006B2A                 cmp     ebp, esp
.text:00006B2C                 call    __RTC_CheckEsp
.text:00006B31                 mov     esp, ebp
.text:00006B33                 pop     ebp
.text:00006B34                 retn
.text:00006B34 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00006B34
.text:00006B34 ; ---------------------------------------------------------------------------
.text:00006B35                 align 4
.text:00006B35 _text           ends
.text:00006B35
.text:00006B38 ; ===========================================================================
.text:00006B38
.text:00006B38 ; Segment type: Pure code
.text:00006B38 ; Segment permissions: Read/Execute
.text:00006B38 _text           segment para public 'CODE' use32
.text:00006B38                 assume cs:_text
.text:00006B38                 ;org 6B38h
.text:00006B38 ; COMDAT (pick any)
.text:00006B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B38
.text:00006B38 ; =============== S U B R O U T I N E =======================================
.text:00006B38
.text:00006B38 ; Attributes: bp-based frame
.text:00006B38
.text:00006B38 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00006B38                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00006B38 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00006B38                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+225p
.text:00006B38                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+98Ap
.text:00006B38
.text:00006B38 var_4           = dword ptr -4
.text:00006B38
.text:00006B38                 push    ebp
.text:00006B39                 mov     ebp, esp
.text:00006B3B                 push    ecx
.text:00006B3C                 push    esi
.text:00006B3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B44                 mov     [ebp+var_4], ecx
.text:00006B47                 mov     eax, [ebp+var_4]
.text:00006B4A                 cmp     dword ptr [eax], 0
.text:00006B4D                 jz      short loc_6B73
.text:00006B4F                 mov     ecx, [ebp+var_4]
.text:00006B52                 mov     edx, [ecx]
.text:00006B54                 mov     eax, [ebp+var_4]
.text:00006B57                 mov     ecx, [eax]
.text:00006B59                 mov     edx, [edx]
.text:00006B5B                 mov     esi, esp
.text:00006B5D                 push    ecx
.text:00006B5E                 mov     eax, [edx+8]
.text:00006B61                 call    eax
.text:00006B63                 cmp     esi, esp
.text:00006B65                 call    __RTC_CheckEsp
.text:00006B6A                 mov     ecx, [ebp+var_4]
.text:00006B6D                 mov     dword ptr [ecx], 0
.text:00006B73
.text:00006B73 loc_6B73:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:00006B73                 pop     esi
.text:00006B74                 add     esp, 4
.text:00006B77                 cmp     ebp, esp
.text:00006B79                 call    __RTC_CheckEsp
.text:00006B7E                 mov     esp, ebp
.text:00006B80                 pop     ebp
.text:00006B81                 retn
.text:00006B81 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00006B81
.text:00006B81 ; ---------------------------------------------------------------------------
.text:00006B82                 align 4
.text:00006B82 _text           ends
.text:00006B82
.text:00006B84 ; ===========================================================================
.text:00006B84
.text:00006B84 ; Segment type: Pure code
.text:00006B84 ; Segment permissions: Read/Execute
.text:00006B84 _text           segment para public 'CODE' use32
.text:00006B84                 assume cs:_text
.text:00006B84                 ;org 6B84h
.text:00006B84 ; COMDAT (pick any)
.text:00006B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B84
.text:00006B84 ; =============== S U B R O U T I N E =======================================
.text:00006B84
.text:00006B84 ; Attributes: bp-based frame
.text:00006B84
.text:00006B84 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:00006B84                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:00006B84 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:00006B84                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1FEp
.text:00006B84                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+63Dp
.text:00006B84
.text:00006B84 var_4           = dword ptr -4
.text:00006B84
.text:00006B84                 push    ebp
.text:00006B85                 mov     ebp, esp
.text:00006B87                 push    ecx
.text:00006B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006B8F                 mov     [ebp+var_4], ecx
.text:00006B92                 mov     eax, [ebp+var_4]
.text:00006B95                 mov     eax, [eax]
.text:00006B97                 mov     esp, ebp
.text:00006B99                 pop     ebp
.text:00006B9A                 retn
.text:00006B9A ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00006B9A
.text:00006B9A ; ---------------------------------------------------------------------------
.text:00006B9B                 align 4
.text:00006B9B _text           ends
.text:00006B9B
.text:00006B9C ; ===========================================================================
.text:00006B9C
.text:00006B9C ; Segment type: Pure code
.text:00006B9C ; Segment permissions: Read/Execute
.text:00006B9C _text           segment para public 'CODE' use32
.text:00006B9C                 assume cs:_text
.text:00006B9C                 ;org 6B9Ch
.text:00006B9C ; COMDAT (pick any)
.text:00006B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006B9C
.text:00006B9C ; =============== S U B R O U T I N E =======================================
.text:00006B9C
.text:00006B9C ; Attributes: bp-based frame
.text:00006B9C
.text:00006B9C ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00006B9C                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00006B9C ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00006B9C                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C1p
.text:00006B9C
.text:00006B9C var_4           = dword ptr -4
.text:00006B9C
.text:00006B9C                 push    ebp
.text:00006B9D                 mov     ebp, esp
.text:00006B9F                 push    ecx
.text:00006BA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BA7                 mov     [ebp+var_4], ecx
.text:00006BAA                 mov     eax, [ebp+var_4]
.text:00006BAD                 mov     esp, ebp
.text:00006BAF                 pop     ebp
.text:00006BB0                 retn
.text:00006BB0 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:00006BB0
.text:00006BB0 ; ---------------------------------------------------------------------------
.text:00006BB1                 align 4
.text:00006BB1 _text           ends
.text:00006BB1
.text:00006BB4 ; ===========================================================================
.text:00006BB4
.text:00006BB4 ; Segment type: Pure code
.text:00006BB4 ; Segment permissions: Read/Execute
.text:00006BB4 _text           segment para public 'CODE' use32
.text:00006BB4                 assume cs:_text
.text:00006BB4                 ;org 6BB4h
.text:00006BB4 ; COMDAT (pick any)
.text:00006BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006BB4
.text:00006BB4 ; =============== S U B R O U T I N E =======================================
.text:00006BB4
.text:00006BB4 ; Attributes: bp-based frame
.text:00006BB4
.text:00006BB4 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:00006BB4                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:00006BB4 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:00006BB4                                         ; CODE XREF: COutStreamWithCRC::SetStream(ISequentialOutStream *)+18p
.text:00006BB4
.text:00006BB4 var_4           = dword ptr -4
.text:00006BB4 arg_0           = dword ptr  8
.text:00006BB4
.text:00006BB4                 push    ebp
.text:00006BB5                 mov     ebp, esp
.text:00006BB7                 push    ecx
.text:00006BB8                 push    esi
.text:00006BB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006BC0                 mov     [ebp+var_4], ecx
.text:00006BC3                 cmp     [ebp+arg_0], 0
.text:00006BC7                 jz      short loc_6BE0
.text:00006BC9                 mov     eax, [ebp+arg_0]
.text:00006BCC                 mov     ecx, [eax]
.text:00006BCE                 mov     esi, esp
.text:00006BD0                 mov     edx, [ebp+arg_0]
.text:00006BD3                 push    edx
.text:00006BD4                 mov     eax, [ecx+4]
.text:00006BD7                 call    eax
.text:00006BD9                 cmp     esi, esp
.text:00006BDB                 call    __RTC_CheckEsp
.text:00006BE0
.text:00006BE0 loc_6BE0:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:00006BE0                 mov     ecx, [ebp+var_4]
.text:00006BE3                 cmp     dword ptr [ecx], 0
.text:00006BE6                 jz      short loc_6C03
.text:00006BE8                 mov     edx, [ebp+var_4]
.text:00006BEB                 mov     eax, [edx]
.text:00006BED                 mov     ecx, [ebp+var_4]
.text:00006BF0                 mov     edx, [ecx]
.text:00006BF2                 mov     eax, [eax]
.text:00006BF4                 mov     esi, esp
.text:00006BF6                 push    edx
.text:00006BF7                 mov     ecx, [eax+8]
.text:00006BFA                 call    ecx
.text:00006BFC                 cmp     esi, esp
.text:00006BFE                 call    __RTC_CheckEsp
.text:00006C03
.text:00006C03 loc_6C03:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00006C03                 mov     edx, [ebp+var_4]
.text:00006C06                 mov     eax, [ebp+arg_0]
.text:00006C09                 mov     [edx], eax
.text:00006C0B                 mov     eax, [ebp+arg_0]
.text:00006C0E                 pop     esi
.text:00006C0F                 add     esp, 4
.text:00006C12                 cmp     ebp, esp
.text:00006C14                 call    __RTC_CheckEsp
.text:00006C19                 mov     esp, ebp
.text:00006C1B                 pop     ebp
.text:00006C1C                 retn    4
.text:00006C1C ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00006C1C
.text:00006C1C ; ---------------------------------------------------------------------------
.text:00006C1F                 align 10h
.text:00006C1F _text           ends
.text:00006C1F
.text:00006C20 ; ===========================================================================
.text:00006C20
.text:00006C20 ; Segment type: Pure code
.text:00006C20 ; Segment permissions: Read/Execute
.text:00006C20 _text           segment para public 'CODE' use32
.text:00006C20                 assume cs:_text
.text:00006C20                 ;org 6C20h
.text:00006C20 ; COMDAT (pick any)
.text:00006C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C20
.text:00006C20 ; =============== S U B R O U T I N E =======================================
.text:00006C20
.text:00006C20 ; Attributes: bp-based frame
.text:00006C20
.text:00006C20 ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00006C20                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00006C20 ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00006C20                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+12Ep
.text:00006C20
.text:00006C20 var_4           = dword ptr -4
.text:00006C20
.text:00006C20                 push    ebp
.text:00006C21                 mov     ebp, esp
.text:00006C23                 push    ecx
.text:00006C24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C2B                 mov     [ebp+var_4], ecx
.text:00006C2E                 mov     eax, [ebp+var_4]
.text:00006C31                 xor     ecx, ecx
.text:00006C33                 cmp     dword ptr [eax], 0
.text:00006C36                 setz    cl
.text:00006C39                 mov     al, cl
.text:00006C3B                 mov     esp, ebp
.text:00006C3D                 pop     ebp
.text:00006C3E                 retn
.text:00006C3E ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00006C3E
.text:00006C3E ; ---------------------------------------------------------------------------
.text:00006C3F                 align 10h
.text:00006C3F _text           ends
.text:00006C3F
.text:00006C40 ; ===========================================================================
.text:00006C40
.text:00006C40 ; Segment type: Pure code
.text:00006C40 ; Segment permissions: Read/Execute
.text:00006C40 _text           segment para public 'CODE' use32
.text:00006C40                 assume cs:_text
.text:00006C40                 ;org 6C40h
.text:00006C40 ; COMDAT (pick any)
.text:00006C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C40
.text:00006C40 ; =============== S U B R O U T I N E =======================================
.text:00006C40
.text:00006C40 ; Attributes: bp-based frame
.text:00006C40
.text:00006C40 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00006C40                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00006C40 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00006C40                                         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+BBp
.text:00006C40
.text:00006C40 var_4           = dword ptr -4
.text:00006C40
.text:00006C40                 push    ebp
.text:00006C41                 mov     ebp, esp
.text:00006C43                 push    ecx
.text:00006C44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C4B                 mov     [ebp+var_4], ecx
.text:00006C4E                 mov     eax, [ebp+var_4]
.text:00006C51                 mov     dword ptr [eax], 0
.text:00006C57                 mov     eax, [ebp+var_4]
.text:00006C5A                 mov     esp, ebp
.text:00006C5C                 pop     ebp
.text:00006C5D                 retn
.text:00006C5D ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00006C5D
.text:00006C5D ; ---------------------------------------------------------------------------
.text:00006C5E                 align 10h
.text:00006C5E _text           ends
.text:00006C5E
.text:00006C60 ; ===========================================================================
.text:00006C60
.text:00006C60 ; Segment type: Pure code
.text:00006C60 ; Segment permissions: Read/Execute
.text:00006C60 _text           segment para public 'CODE' use32
.text:00006C60                 assume cs:_text
.text:00006C60                 ;org 6C60h
.text:00006C60 ; COMDAT (pick any)
.text:00006C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006C60
.text:00006C60 ; =============== S U B R O U T I N E =======================================
.text:00006C60
.text:00006C60 ; Attributes: bp-based frame
.text:00006C60
.text:00006C60 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:00006C60                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:00006C60 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:00006C60                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2A7p
.text:00006C60
.text:00006C60 var_4           = dword ptr -4
.text:00006C60 arg_0           = dword ptr  8
.text:00006C60
.text:00006C60                 push    ebp
.text:00006C61                 mov     ebp, esp
.text:00006C63                 push    ecx
.text:00006C64                 push    esi
.text:00006C65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006C6C                 mov     [ebp+var_4], ecx
.text:00006C6F                 mov     eax, [ebp+var_4]
.text:00006C72                 mov     ecx, [ebp+arg_0]
.text:00006C75                 mov     [eax], ecx
.text:00006C77                 cmp     [ebp+arg_0], 0
.text:00006C7B                 jz      short loc_6C94
.text:00006C7D                 mov     edx, [ebp+arg_0]
.text:00006C80                 mov     eax, [edx]
.text:00006C82                 mov     esi, esp
.text:00006C84                 mov     ecx, [ebp+arg_0]
.text:00006C87                 push    ecx
.text:00006C88                 mov     edx, [eax+4]
.text:00006C8B                 call    edx
.text:00006C8D                 cmp     esi, esp
.text:00006C8F                 call    __RTC_CheckEsp
.text:00006C94
.text:00006C94 loc_6C94:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:00006C94                 mov     eax, [ebp+var_4]
.text:00006C97                 pop     esi
.text:00006C98                 add     esp, 4
.text:00006C9B                 cmp     ebp, esp
.text:00006C9D                 call    __RTC_CheckEsp
.text:00006CA2                 mov     esp, ebp
.text:00006CA4                 pop     ebp
.text:00006CA5                 retn    4
.text:00006CA5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:00006CA5
.text:00006CA5 _text           ends
.text:00006CA5
.text:00006CA8 ; ===========================================================================
.text:00006CA8
.text:00006CA8 ; Segment type: Pure code
.text:00006CA8 ; Segment permissions: Read/Execute
.text:00006CA8 _text           segment para public 'CODE' use32
.text:00006CA8                 assume cs:_text
.text:00006CA8                 ;org 6CA8h
.text:00006CA8 ; COMDAT (pick any)
.text:00006CA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006CA8
.text:00006CA8 ; =============== S U B R O U T I N E =======================================
.text:00006CA8
.text:00006CA8 ; Attributes: bp-based frame
.text:00006CA8
.text:00006CA8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00006CA8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00006CA8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00006CA8                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2F8p
.text:00006CA8                                         ; NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+38Dp ...
.text:00006CA8
.text:00006CA8 var_4           = dword ptr -4
.text:00006CA8
.text:00006CA8                 push    ebp
.text:00006CA9                 mov     ebp, esp
.text:00006CAB                 push    ecx
.text:00006CAC                 push    esi
.text:00006CAD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CB4                 mov     [ebp+var_4], ecx
.text:00006CB7                 mov     eax, [ebp+var_4]
.text:00006CBA                 cmp     dword ptr [eax], 0
.text:00006CBD                 jz      short loc_6CDA
.text:00006CBF                 mov     ecx, [ebp+var_4]
.text:00006CC2                 mov     edx, [ecx]
.text:00006CC4                 mov     eax, [ebp+var_4]
.text:00006CC7                 mov     ecx, [eax]
.text:00006CC9                 mov     edx, [edx]
.text:00006CCB                 mov     esi, esp
.text:00006CCD                 push    ecx
.text:00006CCE                 mov     eax, [edx+8]
.text:00006CD1                 call    eax
.text:00006CD3                 cmp     esi, esp
.text:00006CD5                 call    __RTC_CheckEsp
.text:00006CDA
.text:00006CDA loc_6CDA:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00006CDA                 pop     esi
.text:00006CDB                 add     esp, 4
.text:00006CDE                 cmp     ebp, esp
.text:00006CE0                 call    __RTC_CheckEsp
.text:00006CE5                 mov     esp, ebp
.text:00006CE7                 pop     ebp
.text:00006CE8                 retn
.text:00006CE8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00006CE8
.text:00006CE8 ; ---------------------------------------------------------------------------
.text:00006CE9                 align 4
.text:00006CE9 _text           ends
.text:00006CE9
.text:00006CEC ; ===========================================================================
.text:00006CEC
.text:00006CEC ; Segment type: Pure code
.text:00006CEC ; Segment permissions: Read/Execute
.text:00006CEC _text           segment para public 'CODE' use32
.text:00006CEC                 assume cs:_text
.text:00006CEC                 ;org 6CECh
.text:00006CEC ; COMDAT (pick any)
.text:00006CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006CEC
.text:00006CEC ; =============== S U B R O U T I N E =======================================
.text:00006CEC
.text:00006CEC ; Attributes: bp-based frame
.text:00006CEC
.text:00006CEC ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00006CEC                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00006CEC ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00006CEC                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+332p
.text:00006CEC
.text:00006CEC var_4           = dword ptr -4
.text:00006CEC
.text:00006CEC                 push    ebp
.text:00006CED                 mov     ebp, esp
.text:00006CEF                 push    ecx
.text:00006CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006CF7                 mov     [ebp+var_4], ecx
.text:00006CFA                 mov     eax, [ebp+var_4]
.text:00006CFD                 mov     eax, [eax]
.text:00006CFF                 mov     esp, ebp
.text:00006D01                 pop     ebp
.text:00006D02                 retn
.text:00006D02 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00006D02
.text:00006D02 ; ---------------------------------------------------------------------------
.text:00006D03                 align 4
.text:00006D03 _text           ends
.text:00006D03
.text:00006D04 ; ===========================================================================
.text:00006D04
.text:00006D04 ; Segment type: Pure code
.text:00006D04 ; Segment permissions: Read/Execute
.text:00006D04 _text           segment para public 'CODE' use32
.text:00006D04                 assume cs:_text
.text:00006D04                 ;org 6D04h
.text:00006D04 ; COMDAT (pick any)
.text:00006D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D04
.text:00006D04 ; =============== S U B R O U T I N E =======================================
.text:00006D04
.text:00006D04 ; Attributes: bp-based frame
.text:00006D04
.text:00006D04 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:00006D04                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:00006D04 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:00006D04                                         ; CODE XREF: NArchive::NGz::CHandler::CHandler(void)+121p
.text:00006D04
.text:00006D04 var_4           = dword ptr -4
.text:00006D04 arg_0           = dword ptr  8
.text:00006D04
.text:00006D04                 push    ebp
.text:00006D05                 mov     ebp, esp
.text:00006D07                 push    ecx
.text:00006D08                 push    esi
.text:00006D09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D10                 mov     [ebp+var_4], ecx
.text:00006D13                 cmp     [ebp+arg_0], 0
.text:00006D17                 jz      short loc_6D30
.text:00006D19                 mov     eax, [ebp+arg_0]
.text:00006D1C                 mov     ecx, [eax]
.text:00006D1E                 mov     esi, esp
.text:00006D20                 mov     edx, [ebp+arg_0]
.text:00006D23                 push    edx
.text:00006D24                 mov     eax, [ecx+4]
.text:00006D27                 call    eax
.text:00006D29                 cmp     esi, esp
.text:00006D2B                 call    __RTC_CheckEsp
.text:00006D30
.text:00006D30 loc_6D30:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:00006D30                 mov     ecx, [ebp+var_4]
.text:00006D33                 cmp     dword ptr [ecx], 0
.text:00006D36                 jz      short loc_6D53
.text:00006D38                 mov     edx, [ebp+var_4]
.text:00006D3B                 mov     eax, [edx]
.text:00006D3D                 mov     ecx, [ebp+var_4]
.text:00006D40                 mov     edx, [ecx]
.text:00006D42                 mov     eax, [eax]
.text:00006D44                 mov     esi, esp
.text:00006D46                 push    edx
.text:00006D47                 mov     ecx, [eax+8]
.text:00006D4A                 call    ecx
.text:00006D4C                 cmp     esi, esp
.text:00006D4E                 call    __RTC_CheckEsp
.text:00006D53
.text:00006D53 loc_6D53:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:00006D53                 mov     edx, [ebp+var_4]
.text:00006D56                 mov     eax, [ebp+arg_0]
.text:00006D59                 mov     [edx], eax
.text:00006D5B                 mov     eax, [ebp+arg_0]
.text:00006D5E                 pop     esi
.text:00006D5F                 add     esp, 4
.text:00006D62                 cmp     ebp, esp
.text:00006D64                 call    __RTC_CheckEsp
.text:00006D69                 mov     esp, ebp
.text:00006D6B                 pop     ebp
.text:00006D6C                 retn    4
.text:00006D6C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:00006D6C
.text:00006D6C ; ---------------------------------------------------------------------------
.text:00006D6F                 align 10h
.text:00006D6F _text           ends
.text:00006D6F
.text:00006D70 ; ===========================================================================
.text:00006D70
.text:00006D70 ; Segment type: Pure code
.text:00006D70 ; Segment permissions: Read/Execute
.text:00006D70 _text           segment para public 'CODE' use32
.text:00006D70                 assume cs:_text
.text:00006D70                 ;org 6D70h
.text:00006D70 ; COMDAT (pick any)
.text:00006D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D70
.text:00006D70 ; =============== S U B R O U T I N E =======================================
.text:00006D70
.text:00006D70 ; Attributes: bp-based frame
.text:00006D70
.text:00006D70 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator struct IArchiveOpenCallback *(void)const
.text:00006D70                 public ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00006D70 ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00006D70                                         ; CODE XREF: NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+2Dp
.text:00006D70
.text:00006D70 var_4           = dword ptr -4
.text:00006D70
.text:00006D70                 push    ebp
.text:00006D71                 mov     ebp, esp
.text:00006D73                 push    ecx
.text:00006D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D7B                 mov     [ebp+var_4], ecx
.text:00006D7E                 mov     eax, [ebp+var_4]
.text:00006D81                 mov     eax, [eax]
.text:00006D83                 mov     esp, ebp
.text:00006D85                 pop     ebp
.text:00006D86                 retn
.text:00006D86 ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00006D86
.text:00006D86 ; ---------------------------------------------------------------------------
.text:00006D87                 align 4
.text:00006D87 _text           ends
.text:00006D87
.text:00006D88 ; ===========================================================================
.text:00006D88
.text:00006D88 ; Segment type: Pure code
.text:00006D88 ; Segment permissions: Read/Execute
.text:00006D88 _text           segment para public 'CODE' use32
.text:00006D88                 assume cs:_text
.text:00006D88                 ;org 6D88h
.text:00006D88 ; COMDAT (pick any)
.text:00006D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006D88
.text:00006D88 ; =============== S U B R O U T I N E =======================================
.text:00006D88
.text:00006D88 ; Attributes: bp-based frame
.text:00006D88
.text:00006D88 ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator->(void)const
.text:00006D88                 public ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:00006D88 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:00006D88                                         ; CODE XREF: NArchive::NGz::CCompressProgressInfoImp::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+61p
.text:00006D88
.text:00006D88 var_4           = dword ptr -4
.text:00006D88
.text:00006D88                 push    ebp
.text:00006D89                 mov     ebp, esp
.text:00006D8B                 push    ecx
.text:00006D8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006D93                 mov     [ebp+var_4], ecx
.text:00006D96                 mov     eax, [ebp+var_4]
.text:00006D99                 mov     eax, [eax]
.text:00006D9B                 mov     esp, ebp
.text:00006D9D                 pop     ebp
.text:00006D9E                 retn
.text:00006D9E ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:00006D9E
.text:00006D9E ; ---------------------------------------------------------------------------
.text:00006D9F                 align 10h
.text:00006D9F _text           ends
.text:00006D9F
.text:00006DA0 ; ===========================================================================
.text:00006DA0
.text:00006DA0 ; Segment type: Pure code
.text:00006DA0 ; Segment permissions: Read/Execute
.text:00006DA0 _text           segment para public 'CODE' use32
.text:00006DA0                 assume cs:_text
.text:00006DA0                 ;org 6DA0h
.text:00006DA0 ; COMDAT (pick any)
.text:00006DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DA0
.text:00006DA0 ; =============== S U B R O U T I N E =======================================
.text:00006DA0
.text:00006DA0 ; Attributes: bp-based frame
.text:00006DA0
.text:00006DA0 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:00006DA0                 public ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:00006DA0 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:00006DA0                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6A9p
.text:00006DA0
.text:00006DA0 var_4           = dword ptr -4
.text:00006DA0
.text:00006DA0                 push    ebp
.text:00006DA1                 mov     ebp, esp
.text:00006DA3                 push    ecx
.text:00006DA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DAB                 mov     [ebp+var_4], ecx
.text:00006DAE                 mov     eax, [ebp+var_4]
.text:00006DB1                 mov     dword ptr [eax], 0
.text:00006DB7                 mov     eax, [ebp+var_4]
.text:00006DBA                 mov     esp, ebp
.text:00006DBC                 pop     ebp
.text:00006DBD                 retn
.text:00006DBD ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:00006DBD
.text:00006DBD ; ---------------------------------------------------------------------------
.text:00006DBE                 align 10h
.text:00006DBE _text           ends
.text:00006DBE
.text:00006DC0 ; ===========================================================================
.text:00006DC0
.text:00006DC0 ; Segment type: Pure code
.text:00006DC0 ; Segment permissions: Read/Execute
.text:00006DC0 _text           segment para public 'CODE' use32
.text:00006DC0                 assume cs:_text
.text:00006DC0                 ;org 6DC0h
.text:00006DC0 ; COMDAT (pick any)
.text:00006DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006DC0
.text:00006DC0 ; =============== S U B R O U T I N E =======================================
.text:00006DC0
.text:00006DC0 ; Attributes: bp-based frame
.text:00006DC0
.text:00006DC0 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::~CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:00006DC0                 public ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:00006DC0 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:00006DC0                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+77Ap
.text:00006DC0                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+88Cp ...
.text:00006DC0
.text:00006DC0 var_4           = dword ptr -4
.text:00006DC0
.text:00006DC0                 push    ebp
.text:00006DC1                 mov     ebp, esp
.text:00006DC3                 push    ecx
.text:00006DC4                 push    esi
.text:00006DC5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006DCC                 mov     [ebp+var_4], ecx
.text:00006DCF                 mov     eax, [ebp+var_4]
.text:00006DD2                 cmp     dword ptr [eax], 0
.text:00006DD5                 jz      short loc_6DF2
.text:00006DD7                 mov     ecx, [ebp+var_4]
.text:00006DDA                 mov     edx, [ecx]
.text:00006DDC                 mov     eax, [ebp+var_4]
.text:00006DDF                 mov     ecx, [eax]
.text:00006DE1                 mov     edx, [edx]
.text:00006DE3                 mov     esi, esp
.text:00006DE5                 push    ecx
.text:00006DE6                 mov     eax, [edx+8]
.text:00006DE9                 call    eax
.text:00006DEB                 cmp     esi, esp
.text:00006DED                 call    __RTC_CheckEsp
.text:00006DF2
.text:00006DF2 loc_6DF2:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)+15j
.text:00006DF2                 pop     esi
.text:00006DF3                 add     esp, 4
.text:00006DF6                 cmp     ebp, esp
.text:00006DF8                 call    __RTC_CheckEsp
.text:00006DFD                 mov     esp, ebp
.text:00006DFF                 pop     ebp
.text:00006E00                 retn
.text:00006E00 ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:00006E00
.text:00006E00 ; ---------------------------------------------------------------------------
.text:00006E01                 align 4
.text:00006E01 _text           ends
.text:00006E01
.text:00006E04 ; ===========================================================================
.text:00006E04
.text:00006E04 ; Segment type: Pure code
.text:00006E04 ; Segment permissions: Read/Execute
.text:00006E04 _text           segment para public 'CODE' use32
.text:00006E04                 assume cs:_text
.text:00006E04                 ;org 6E04h
.text:00006E04 ; COMDAT (pick any)
.text:00006E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E04
.text:00006E04 ; =============== S U B R O U T I N E =======================================
.text:00006E04
.text:00006E04 ; Attributes: bp-based frame
.text:00006E04
.text:00006E04 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator struct IArchiveUpdateCallbackFile *(void)const
.text:00006E04                 public ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:00006E04 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00006E04                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6F1p
.text:00006E04
.text:00006E04 var_4           = dword ptr -4
.text:00006E04
.text:00006E04                 push    ebp
.text:00006E05                 mov     ebp, esp
.text:00006E07                 push    ecx
.text:00006E08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E0F                 mov     [ebp+var_4], ecx
.text:00006E12                 mov     eax, [ebp+var_4]
.text:00006E15                 mov     eax, [eax]
.text:00006E17                 mov     esp, ebp
.text:00006E19                 pop     ebp
.text:00006E1A                 retn
.text:00006E1A ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00006E1A
.text:00006E1A ; ---------------------------------------------------------------------------
.text:00006E1B                 align 4
.text:00006E1B _text           ends
.text:00006E1B
.text:00006E1C ; ===========================================================================
.text:00006E1C
.text:00006E1C ; Segment type: Pure code
.text:00006E1C ; Segment permissions: Read/Execute
.text:00006E1C _text           segment para public 'CODE' use32
.text:00006E1C                 assume cs:_text
.text:00006E1C                 ;org 6E1Ch
.text:00006E1C ; COMDAT (pick any)
.text:00006E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E1C
.text:00006E1C ; =============== S U B R O U T I N E =======================================
.text:00006E1C
.text:00006E1C ; Attributes: bp-based frame
.text:00006E1C
.text:00006E1C ; public: struct IArchiveUpdateCallbackFile * * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator&(void)
.text:00006E1C                 public ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
.text:00006E1C ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00006E1C                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6BEp
.text:00006E1C
.text:00006E1C var_4           = dword ptr -4
.text:00006E1C
.text:00006E1C                 push    ebp
.text:00006E1D                 mov     ebp, esp
.text:00006E1F                 push    ecx
.text:00006E20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E27                 mov     [ebp+var_4], ecx
.text:00006E2A                 mov     eax, [ebp+var_4]
.text:00006E2D                 mov     esp, ebp
.text:00006E2F                 pop     ebp
.text:00006E30                 retn
.text:00006E30 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00006E30
.text:00006E30 ; ---------------------------------------------------------------------------
.text:00006E31                 align 4
.text:00006E31 _text           ends
.text:00006E31
.text:00006E34 ; ===========================================================================
.text:00006E34
.text:00006E34 ; Segment type: Pure code
.text:00006E34 ; Segment permissions: Read/Execute
.text:00006E34 _text           segment para public 'CODE' use32
.text:00006E34                 assume cs:_text
.text:00006E34                 ;org 6E34h
.text:00006E34 ; COMDAT (pick any)
.text:00006E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E34
.text:00006E34 ; =============== S U B R O U T I N E =======================================
.text:00006E34
.text:00006E34 ; Attributes: bp-based frame
.text:00006E34
.text:00006E34 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator->(void)const
.text:00006E34                 public ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:00006E34 ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00006E34                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+70Fp
.text:00006E34
.text:00006E34 var_4           = dword ptr -4
.text:00006E34
.text:00006E34                 push    ebp
.text:00006E35                 mov     ebp, esp
.text:00006E37                 push    ecx
.text:00006E38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E3F                 mov     [ebp+var_4], ecx
.text:00006E42                 mov     eax, [ebp+var_4]
.text:00006E45                 mov     eax, [eax]
.text:00006E47                 mov     esp, ebp
.text:00006E49                 pop     ebp
.text:00006E4A                 retn
.text:00006E4A ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00006E4A
.text:00006E4A ; ---------------------------------------------------------------------------
.text:00006E4B                 align 4
.text:00006E4B _text           ends
.text:00006E4B
.text:00006E4C ; ===========================================================================
.text:00006E4C
.text:00006E4C ; Segment type: Pure code
.text:00006E4C ; Segment permissions: Read/Execute
.text:00006E4C _text           segment para public 'CODE' use32
.text:00006E4C                 assume cs:_text
.text:00006E4C                 ;org 6E4Ch
.text:00006E4C ; COMDAT (pick any)
.text:00006E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E4C
.text:00006E4C ; =============== S U B R O U T I N E =======================================
.text:00006E4C
.text:00006E4C ; Attributes: bp-based frame
.text:00006E4C
.text:00006E4C ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00006E4C                 public ??_GCProp@@QAEPAXI@Z
.text:00006E4C ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00006E4C
.text:00006E4C var_4           = dword ptr -4
.text:00006E4C arg_0           = dword ptr  8
.text:00006E4C
.text:00006E4C                 push    ebp
.text:00006E4D                 mov     ebp, esp
.text:00006E4F                 push    ecx
.text:00006E50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E57                 mov     [ebp+var_4], ecx
.text:00006E5A                 mov     ecx, [ebp+var_4] ; this
.text:00006E5D                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00006E62                 mov     eax, [ebp+arg_0]
.text:00006E65                 and     eax, 1
.text:00006E68                 jz      short loc_6E76
.text:00006E6A                 mov     ecx, [ebp+var_4]
.text:00006E6D                 push    ecx             ; void *
.text:00006E6E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006E73                 add     esp, 4
.text:00006E76
.text:00006E76 loc_6E76:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00006E76                 mov     eax, [ebp+var_4]
.text:00006E79                 add     esp, 4
.text:00006E7C                 cmp     ebp, esp
.text:00006E7E                 call    __RTC_CheckEsp
.text:00006E83                 mov     esp, ebp
.text:00006E85                 pop     ebp
.text:00006E86                 retn    4
.text:00006E86 ??_GCProp@@QAEPAXI@Z endp
.text:00006E86
.text:00006E86 ; ---------------------------------------------------------------------------
.text:00006E89                 align 4
.text:00006E89 _text           ends
.text:00006E89
.text:00006E8C ; ===========================================================================
.text:00006E8C
.text:00006E8C ; Segment type: Pure code
.text:00006E8C ; Segment permissions: Read/Execute
.text:00006E8C _text           segment para public 'CODE' use32
.text:00006E8C                 assume cs:_text
.text:00006E8C                 ;org 6E8Ch
.text:00006E8C ; COMDAT (pick any)
.text:00006E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006E8C
.text:00006E8C ; =============== S U B R O U T I N E =======================================
.text:00006E8C
.text:00006E8C ; Attributes: bp-based frame
.text:00006E8C
.text:00006E8C ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00006E8C                 public ??1CProp@@QAE@XZ
.text:00006E8C ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:00006E8C
.text:00006E8C var_4           = dword ptr -4
.text:00006E8C
.text:00006E8C                 push    ebp
.text:00006E8D                 mov     ebp, esp
.text:00006E8F                 push    ecx
.text:00006E90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006E97                 mov     [ebp+var_4], ecx
.text:00006E9A                 mov     ecx, [ebp+var_4]
.text:00006E9D                 add     ecx, 8          ; this
.text:00006EA0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00006EA5                 add     esp, 4
.text:00006EA8                 cmp     ebp, esp
.text:00006EAA                 call    __RTC_CheckEsp
.text:00006EAF                 mov     esp, ebp
.text:00006EB1                 pop     ebp
.text:00006EB2                 retn
.text:00006EB2 ??1CProp@@QAE@XZ endp
.text:00006EB2
.text:00006EB2 ; ---------------------------------------------------------------------------
.text:00006EB3                 align 4
.text:00006EB3 _text           ends
.text:00006EB3
.text:00006EB4 ; ===========================================================================
.text:00006EB4
.text:00006EB4 ; Segment type: Pure code
.text:00006EB4 ; Segment permissions: Read/Execute
.text:00006EB4 _text           segment para public 'CODE' use32
.text:00006EB4                 assume cs:_text
.text:00006EB4                 ;org 6EB4h
.text:00006EB4 ; COMDAT (pick any)
.text:00006EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EB4
.text:00006EB4 ; =============== S U B R O U T I N E =======================================
.text:00006EB4
.text:00006EB4 ; Attributes: bp-based frame
.text:00006EB4
.text:00006EB4 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006EB4                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00006EB4 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006EB4                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:00006EB4
.text:00006EB4 var_4           = dword ptr -4
.text:00006EB4
.text:00006EB4                 push    ebp
.text:00006EB5                 mov     ebp, esp
.text:00006EB7                 push    ecx
.text:00006EB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006EBF                 mov     [ebp+var_4], ecx
.text:00006EC2                 mov     eax, [ebp+var_4]
.text:00006EC5                 mov     dword ptr [eax], 0
.text:00006ECB                 mov     ecx, [ebp+var_4]
.text:00006ECE                 mov     dword ptr [ecx+4], 0
.text:00006ED5                 mov     edx, [ebp+var_4]
.text:00006ED8                 mov     dword ptr [edx+8], 0
.text:00006EDF                 mov     eax, [ebp+var_4]
.text:00006EE2                 mov     esp, ebp
.text:00006EE4                 pop     ebp
.text:00006EE5                 retn
.text:00006EE5 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00006EE5
.text:00006EE5 ; ---------------------------------------------------------------------------
.text:00006EE6                 align 4
.text:00006EE6 _text           ends
.text:00006EE6
.text:00006EE8 ; ===========================================================================
.text:00006EE8
.text:00006EE8 ; Segment type: Pure code
.text:00006EE8 ; Segment permissions: Read/Execute
.text:00006EE8 _text           segment para public 'CODE' use32
.text:00006EE8                 assume cs:_text
.text:00006EE8                 ;org 6EE8h
.text:00006EE8 ; COMDAT (pick any)
.text:00006EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006EE8
.text:00006EE8 ; =============== S U B R O U T I N E =======================================
.text:00006EE8
.text:00006EE8 ; Attributes: bp-based frame
.text:00006EE8
.text:00006EE8 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00006EE8                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00006EE8 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00006EE8                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:00006EE8
.text:00006EE8 var_4           = dword ptr -4
.text:00006EE8
.text:00006EE8                 push    ebp
.text:00006EE9                 mov     ebp, esp
.text:00006EEB                 push    ecx
.text:00006EEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006EF3                 mov     [ebp+var_4], ecx
.text:00006EF6                 mov     eax, [ebp+var_4]
.text:00006EF9                 mov     eax, [eax+4]
.text:00006EFC                 mov     esp, ebp
.text:00006EFE                 pop     ebp
.text:00006EFF                 retn
.text:00006EFF ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00006EFF
.text:00006EFF _text           ends
.text:00006EFF
.text:00006F00 ; ===========================================================================
.text:00006F00
.text:00006F00 ; Segment type: Pure code
.text:00006F00 ; Segment permissions: Read/Execute
.text:00006F00 _text           segment para public 'CODE' use32
.text:00006F00                 assume cs:_text
.text:00006F00                 ;org 6F00h
.text:00006F00 ; COMDAT (pick any)
.text:00006F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F00
.text:00006F00 ; =============== S U B R O U T I N E =======================================
.text:00006F00
.text:00006F00 ; Attributes: bp-based frame
.text:00006F00
.text:00006F00 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006F00                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006F00 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006F00                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:00006F00                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j
.text:00006F00
.text:00006F00 var_8           = dword ptr -8
.text:00006F00 var_4           = dword ptr -4
.text:00006F00
.text:00006F00                 push    ebp
.text:00006F01                 mov     ebp, esp
.text:00006F03                 sub     esp, 8
.text:00006F06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006F0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F14                 mov     [ebp+var_4], ecx
.text:00006F17                 mov     eax, [ebp+var_4]
.text:00006F1A                 mov     ecx, [eax]
.text:00006F1C                 mov     [ebp+var_8], ecx
.text:00006F1F                 mov     edx, [ebp+var_8]
.text:00006F22                 push    edx             ; void *
.text:00006F23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006F28                 add     esp, 4
.text:00006F2B                 add     esp, 8
.text:00006F2E                 cmp     ebp, esp
.text:00006F30                 call    __RTC_CheckEsp
.text:00006F35                 mov     esp, ebp
.text:00006F37                 pop     ebp
.text:00006F38                 retn
.text:00006F38 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00006F38
.text:00006F38 ; ---------------------------------------------------------------------------
.text:00006F39                 align 4
.text:00006F39 _text           ends
.text:00006F39
.text:00006F3C ; ===========================================================================
.text:00006F3C
.text:00006F3C ; Segment type: Pure code
.text:00006F3C ; Segment permissions: Read/Execute
.text:00006F3C _text           segment para public 'CODE' use32
.text:00006F3C                 assume cs:_text
.text:00006F3C                 ;org 6F3Ch
.text:00006F3C ; COMDAT (pick any)
.text:00006F3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F3C
.text:00006F3C ; =============== S U B R O U T I N E =======================================
.text:00006F3C
.text:00006F3C ; Attributes: bp-based frame
.text:00006F3C
.text:00006F3C ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006F3C                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006F3C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006F3C                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:00006F3C
.text:00006F3C var_4           = dword ptr -4
.text:00006F3C arg_0           = dword ptr  8
.text:00006F3C
.text:00006F3C                 push    ebp
.text:00006F3D                 mov     ebp, esp
.text:00006F3F                 push    ecx
.text:00006F40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F47                 mov     [ebp+var_4], ecx
.text:00006F4A                 mov     eax, [ebp+var_4]
.text:00006F4D                 mov     ecx, [eax]
.text:00006F4F                 mov     edx, [ebp+arg_0]
.text:00006F52                 lea     eax, [ecx+edx*4]
.text:00006F55                 mov     esp, ebp
.text:00006F57                 pop     ebp
.text:00006F58                 retn    4
.text:00006F58 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00006F58
.text:00006F58 ; ---------------------------------------------------------------------------
.text:00006F5B                 align 4
.text:00006F5B _text           ends
.text:00006F5B
.text:00006F5C ; ===========================================================================
.text:00006F5C
.text:00006F5C ; Segment type: Pure code
.text:00006F5C ; Segment permissions: Read/Execute
.text:00006F5C _text           segment para public 'CODE' use32
.text:00006F5C                 assume cs:_text
.text:00006F5C                 ;org 6F5Ch
.text:00006F5C ; COMDAT (pick any)
.text:00006F5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F5C
.text:00006F5C ; =============== S U B R O U T I N E =======================================
.text:00006F5C
.text:00006F5C ; Attributes: bp-based frame
.text:00006F5C
.text:00006F5C ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::MovePos(unsigned int)
.text:00006F5C                 public ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z
.text:00006F5C ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z proc near
.text:00006F5C                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::AlignToByte(void)+1Fp
.text:00006F5C
.text:00006F5C var_4           = dword ptr -4
.text:00006F5C arg_0           = dword ptr  8
.text:00006F5C
.text:00006F5C                 push    ebp
.text:00006F5D                 mov     ebp, esp
.text:00006F5F                 push    ecx
.text:00006F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F67                 mov     [ebp+var_4], ecx
.text:00006F6A                 mov     eax, [ebp+var_4]
.text:00006F6D                 mov     ecx, [eax]
.text:00006F6F                 add     ecx, [ebp+arg_0]
.text:00006F72                 mov     edx, [ebp+var_4]
.text:00006F75                 mov     [edx], ecx
.text:00006F77                 mov     eax, [ebp+var_4]
.text:00006F7A                 mov     edx, [eax+30h]
.text:00006F7D                 mov     ecx, [ebp+arg_0]
.text:00006F80                 shr     edx, cl
.text:00006F82                 mov     eax, [ebp+var_4]
.text:00006F85                 mov     [eax+30h], edx
.text:00006F88                 mov     esp, ebp
.text:00006F8A                 pop     ebp
.text:00006F8B                 retn    4
.text:00006F8B ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z endp
.text:00006F8B
.text:00006F8B ; ---------------------------------------------------------------------------
.text:00006F8E                 align 10h
.text:00006F8E _text           ends
.text:00006F8E
.text:00006F90 ; ===========================================================================
.text:00006F90
.text:00006F90 ; Segment type: Pure code
.text:00006F90 ; Segment permissions: Read/Execute
.text:00006F90 _text           segment para public 'CODE' use32
.text:00006F90                 assume cs:_text
.text:00006F90                 ;org 6F90h
.text:00006F90 ; COMDAT (pick any)
.text:00006F90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006F90
.text:00006F90 ; =============== S U B R O U T I N E =======================================
.text:00006F90
.text:00006F90 ; Attributes: bp-based frame
.text:00006F90
.text:00006F90 ; public: void __thiscall NBitl::CBaseDecoder<class CInBuffer>::Init(void)
.text:00006F90                 public ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00006F90 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00006F90                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::Init(void)+11p
.text:00006F90
.text:00006F90 var_4           = dword ptr -4
.text:00006F90
.text:00006F90                 push    ebp
.text:00006F91                 mov     ebp, esp
.text:00006F93                 push    ecx
.text:00006F94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006F9B                 mov     [ebp+var_4], ecx
.text:00006F9E                 mov     ecx, [ebp+var_4]
.text:00006FA1                 add     ecx, 8          ; this
.text:00006FA4                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00006FA9                 mov     eax, [ebp+var_4]
.text:00006FAC                 mov     dword ptr [eax], 20h ; ' '
.text:00006FB2                 mov     ecx, [ebp+var_4]
.text:00006FB5                 mov     dword ptr [ecx+4], 0
.text:00006FBC                 add     esp, 4
.text:00006FBF                 cmp     ebp, esp
.text:00006FC1                 call    __RTC_CheckEsp
.text:00006FC6                 mov     esp, ebp
.text:00006FC8                 pop     ebp
.text:00006FC9                 retn
.text:00006FC9 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00006FC9
.text:00006FC9 ; ---------------------------------------------------------------------------
.text:00006FCA                 align 4
.text:00006FCA _text           ends
.text:00006FCA
.text:00006FCC ; ===========================================================================
.text:00006FCC
.text:00006FCC ; Segment type: Pure code
.text:00006FCC ; Segment permissions: Read/Execute
.text:00006FCC _text           segment para public 'CODE' use32
.text:00006FCC                 assume cs:_text
.text:00006FCC                 ;org 6FCCh
.text:00006FCC ; COMDAT (pick any)
.text:00006FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FCC
.text:00006FCC ; =============== S U B R O U T I N E =======================================
.text:00006FCC
.text:00006FCC
.text:00006FCC ; [thunk]:public: virtual long __stdcall NArchive::NGz::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00006FCC                 public ?QueryInterface@CHandler@NGz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:00006FCC ?QueryInterface@CHandler@NGz@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00006FCC                                         ; DATA XREF: .rdata:const NArchive::NGz::CHandler::`vftable'{for `IArchiveOpenSeq'}o
.text:00006FCC
.text:00006FCC arg_0           = dword ptr  4
.text:00006FCC
.text:00006FCC                 sub     [esp+arg_0], 4
.text:00006FD1                 jmp     ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)
.text:00006FD1 ?QueryInterface@CHandler@NGz@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00006FD1
.text:00006FD1 ; ---------------------------------------------------------------------------
.text:00006FD6                 align 4
.text:00006FD6 _text           ends
.text:00006FD6
.text:00006FD8 ; ===========================================================================
.text:00006FD8
.text:00006FD8 ; Segment type: Pure code
.text:00006FD8 ; Segment permissions: Read/Execute
.text:00006FD8 _text           segment para public 'CODE' use32
.text:00006FD8                 assume cs:_text
.text:00006FD8                 ;org 6FD8h
.text:00006FD8 ; COMDAT (pick any)
.text:00006FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FD8
.text:00006FD8 ; =============== S U B R O U T I N E =======================================
.text:00006FD8
.text:00006FD8
.text:00006FD8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{12}' (void)
.text:00006FD8                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:00006FD8 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:00006FD8                                         ; DATA XREF: .rdata:0000539Co
.text:00006FD8                                         ; .rdata:00005AB4o
.text:00006FD8
.text:00006FD8 arg_0           = dword ptr  4
.text:00006FD8
.text:00006FD8                 sub     [esp+arg_0], 0Ch
.text:00006FDD                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00006FDD ?Release@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:00006FDD
.text:00006FDD ; ---------------------------------------------------------------------------
.text:00006FE2                 align 4
.text:00006FE2 _text           ends
.text:00006FE2
.text:00006FE4 ; ===========================================================================
.text:00006FE4
.text:00006FE4 ; Segment type: Pure code
.text:00006FE4 ; Segment permissions: Read/Execute
.text:00006FE4 _text           segment para public 'CODE' use32
.text:00006FE4                 assume cs:_text
.text:00006FE4                 ;org 6FE4h
.text:00006FE4 ; COMDAT (pick any)
.text:00006FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FE4
.text:00006FE4 ; =============== S U B R O U T I N E =======================================
.text:00006FE4
.text:00006FE4
.text:00006FE4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:00006FE4                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:00006FE4 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:00006FE4                                         ; DATA XREF: .rdata:000053C4o
.text:00006FE4                                         ; .rdata:00005ADCo
.text:00006FE4
.text:00006FE4 arg_0           = dword ptr  4
.text:00006FE4
.text:00006FE4                 sub     [esp+arg_0], 4
.text:00006FE9                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:00006FE9 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00006FE9
.text:00006FE9 ; ---------------------------------------------------------------------------
.text:00006FEE                 align 10h
.text:00006FEE _text           ends
.text:00006FEE
.text:00006FF0 ; ===========================================================================
.text:00006FF0
.text:00006FF0 ; Segment type: Pure code
.text:00006FF0 ; Segment permissions: Read/Execute
.text:00006FF0 _text           segment para public 'CODE' use32
.text:00006FF0                 assume cs:_text
.text:00006FF0                 ;org 6FF0h
.text:00006FF0 ; COMDAT (pick any)
.text:00006FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FF0
.text:00006FF0 ; =============== S U B R O U T I N E =======================================
.text:00006FF0
.text:00006FF0
.text:00006FF0 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::AddRef`adjustor{12}' (void)
.text:00006FF0                 public ?AddRef@CHandler@NGz@NArchive@@WM@AGKXZ
.text:00006FF0 ?AddRef@CHandler@NGz@NArchive@@WM@AGKXZ proc near
.text:00006FF0                                         ; DATA XREF: .rdata:00004F98o
.text:00006FF0
.text:00006FF0 arg_0           = dword ptr  4
.text:00006FF0
.text:00006FF0                 sub     [esp+arg_0], 0Ch
.text:00006FF5                 jmp     ?AddRef@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::AddRef(void)
.text:00006FF5 ?AddRef@CHandler@NGz@NArchive@@WM@AGKXZ endp
.text:00006FF5
.text:00006FF5 ; ---------------------------------------------------------------------------
.text:00006FFA                 align 4
.text:00006FFA _text           ends
.text:00006FFA
.text:00006FFC ; ===========================================================================
.text:00006FFC
.text:00006FFC ; Segment type: Pure code
.text:00006FFC ; Segment permissions: Read/Execute
.text:00006FFC _text           segment para public 'CODE' use32
.text:00006FFC                 assume cs:_text
.text:00006FFC                 ;org 6FFCh
.text:00006FFC ; COMDAT (pick any)
.text:00006FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006FFC
.text:00006FFC ; =============== S U B R O U T I N E =======================================
.text:00006FFC
.text:00006FFC
.text:00006FFC ; [thunk]:public: virtual long __stdcall NArchive::NGz::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00006FFC                 public ?QueryInterface@CHandler@NGz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:00006FFC ?QueryInterface@CHandler@NGz@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00006FFC                                         ; DATA XREF: .rdata:const NArchive::NGz::CHandler::`vftable'{for `IOutArchive'}o
.text:00006FFC
.text:00006FFC arg_0           = dword ptr  4
.text:00006FFC
.text:00006FFC                 sub     [esp+arg_0], 8
.text:00007001                 jmp     ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)
.text:00007001 ?QueryInterface@CHandler@NGz@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00007001
.text:00007001 ; ---------------------------------------------------------------------------
.text:00007006                 align 4
.text:00007006 _text           ends
.text:00007006
.text:00007008 ; ===========================================================================
.text:00007008
.text:00007008 ; Segment type: Pure code
.text:00007008 ; Segment permissions: Read/Execute
.text:00007008 _text           segment para public 'CODE' use32
.text:00007008                 assume cs:_text
.text:00007008                 ;org 7008h
.text:00007008 ; COMDAT (pick any)
.text:00007008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007008
.text:00007008 ; =============== S U B R O U T I N E =======================================
.text:00007008
.text:00007008
.text:00007008 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00007008                 public ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00007008 ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00007008                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NEncoder::CCOMCoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00007008
.text:00007008 arg_0           = dword ptr  4
.text:00007008
.text:00007008                 sub     [esp+arg_0], 4
.text:0000700D                 jmp     ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)
.text:0000700D ?QueryInterface@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000700D
.text:0000700D ; ---------------------------------------------------------------------------
.text:00007012                 align 4
.text:00007012 _text           ends
.text:00007012
.text:00007014 ; ===========================================================================
.text:00007014
.text:00007014 ; Segment type: Pure code
.text:00007014 ; Segment permissions: Read/Execute
.text:00007014 _text           segment para public 'CODE' use32
.text:00007014                 assume cs:_text
.text:00007014                 ;org 7014h
.text:00007014 ; COMDAT (pick any)
.text:00007014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007014
.text:00007014 ; =============== S U B R O U T I N E =======================================
.text:00007014
.text:00007014
.text:00007014 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{16}' (void)
.text:00007014                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00007014 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00007014                                         ; DATA XREF: .rdata:00005388o
.text:00007014                                         ; .rdata:00005AA0o
.text:00007014
.text:00007014 arg_0           = dword ptr  4
.text:00007014
.text:00007014                 sub     [esp+arg_0], 10h
.text:00007019                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:00007019 ?Release@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:00007019
.text:00007019 ; ---------------------------------------------------------------------------
.text:0000701E                 align 10h
.text:0000701E _text           ends
.text:0000701E
.text:00007020 ; ===========================================================================
.text:00007020
.text:00007020 ; Segment type: Pure code
.text:00007020 ; Segment permissions: Read/Execute
.text:00007020 _text           segment para public 'CODE' use32
.text:00007020                 assume cs:_text
.text:00007020                 ;org 7020h
.text:00007020 ; COMDAT (pick any)
.text:00007020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007020
.text:00007020 ; =============== S U B R O U T I N E =======================================
.text:00007020
.text:00007020
.text:00007020 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{8}' (void)
.text:00007020                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:00007020 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:00007020                                         ; DATA XREF: .rdata:000053ACo
.text:00007020                                         ; .rdata:00005AC4o
.text:00007020
.text:00007020 arg_0           = dword ptr  4
.text:00007020
.text:00007020                 sub     [esp+arg_0], 8
.text:00007025                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:00007025 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:00007025
.text:00007025 ; ---------------------------------------------------------------------------
.text:0000702A                 align 4
.text:0000702A _text           ends
.text:0000702A
.text:0000702C ; ===========================================================================
.text:0000702C
.text:0000702C ; Segment type: Pure code
.text:0000702C ; Segment permissions: Read/Execute
.text:0000702C _text           segment para public 'CODE' use32
.text:0000702C                 assume cs:_text
.text:0000702C                 ;org 702Ch
.text:0000702C ; COMDAT (pick any)
.text:0000702C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000702C
.text:0000702C ; =============== S U B R O U T I N E =======================================
.text:0000702C
.text:0000702C
.text:0000702C ; [thunk]:public: virtual long __stdcall NArchive::NGz::CHandler::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:0000702C                 public ?QueryInterface@CHandler@NGz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.text:0000702C ?QueryInterface@CHandler@NGz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:0000702C                                         ; DATA XREF: .rdata:const NArchive::NGz::CHandler::`vftable'{for `ISetProperties'}o
.text:0000702C
.text:0000702C arg_0           = dword ptr  4
.text:0000702C
.text:0000702C                 sub     [esp+arg_0], 0Ch
.text:00007031                 jmp     ?QueryInterface@CHandler@NGz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *)
.text:00007031 ?QueryInterface@CHandler@NGz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00007031
.text:00007031 ; ---------------------------------------------------------------------------
.text:00007036                 align 4
.text:00007036 _text           ends
.text:00007036
.text:00007038 ; ===========================================================================
.text:00007038
.text:00007038 ; Segment type: Pure code
.text:00007038 ; Segment permissions: Read/Execute
.text:00007038 _text           segment para public 'CODE' use32
.text:00007038                 assume cs:_text
.text:00007038                 ;org 7038h
.text:00007038 ; COMDAT (pick any)
.text:00007038                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007038
.text:00007038 ; =============== S U B R O U T I N E =======================================
.text:00007038
.text:00007038
.text:00007038 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{12}' (void)
.text:00007038                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ
.text:00007038 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ proc near
.text:00007038                                         ; DATA XREF: .rdata:00005398o
.text:00007038                                         ; .rdata:00005AB0o
.text:00007038
.text:00007038 arg_0           = dword ptr  4
.text:00007038
.text:00007038                 sub     [esp+arg_0], 0Ch
.text:0000703D                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:0000703D ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WM@AGKXZ endp
.text:0000703D
.text:0000703D ; ---------------------------------------------------------------------------
.text:00007042                 align 4
.text:00007042 _text           ends
.text:00007042
.text:00007044 ; ===========================================================================
.text:00007044
.text:00007044 ; Segment type: Pure code
.text:00007044 ; Segment permissions: Read/Execute
.text:00007044 _text           segment para public 'CODE' use32
.text:00007044                 assume cs:_text
.text:00007044                 ;org 7044h
.text:00007044 ; COMDAT (pick any)
.text:00007044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007044
.text:00007044 ; =============== S U B R O U T I N E =======================================
.text:00007044
.text:00007044
.text:00007044 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00007044                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00007044 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00007044                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00007044                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00007044
.text:00007044 arg_0           = dword ptr  4
.text:00007044
.text:00007044                 sub     [esp+arg_0], 4
.text:00007049                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00007049 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00007049
.text:00007049 ; ---------------------------------------------------------------------------
.text:0000704E                 align 10h
.text:0000704E _text           ends
.text:0000704E
.text:00007050 ; ===========================================================================
.text:00007050
.text:00007050 ; Segment type: Pure code
.text:00007050 ; Segment permissions: Read/Execute
.text:00007050 _text           segment para public 'CODE' use32
.text:00007050                 assume cs:_text
.text:00007050                 ;org 7050h
.text:00007050 ; COMDAT (pick any)
.text:00007050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007050
.text:00007050 ; =============== S U B R O U T I N E =======================================
.text:00007050
.text:00007050
.text:00007050 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::AddRef`adjustor{16}' (void)
.text:00007050                 public ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ
.text:00007050 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ proc near
.text:00007050                                         ; DATA XREF: .rdata:00005384o
.text:00007050                                         ; .rdata:00005A9Co
.text:00007050
.text:00007050 arg_0           = dword ptr  4
.text:00007050
.text:00007050                 sub     [esp+arg_0], 10h
.text:00007055                 jmp     ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::AddRef(void)
.text:00007055 ?AddRef@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGKXZ endp
.text:00007055
.text:00007055 ; ---------------------------------------------------------------------------
.text:0000705A                 align 4
.text:0000705A _text           ends
.text:0000705A
.text:0000705C ; ===========================================================================
.text:0000705C
.text:0000705C ; Segment type: Pure code
.text:0000705C ; Segment permissions: Read/Execute
.text:0000705C _text           segment para public 'CODE' use32
.text:0000705C                 assume cs:_text
.text:0000705C                 ;org 705Ch
.text:0000705C ; COMDAT (pick any)
.text:0000705C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000705C
.text:0000705C ; =============== S U B R O U T I N E =======================================
.text:0000705C
.text:0000705C
.text:0000705C ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000705C                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000705C ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000705C                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetInStream'}o
.text:0000705C                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetInStream'}o
.text:0000705C
.text:0000705C arg_0           = dword ptr  4
.text:0000705C
.text:0000705C                 sub     [esp+arg_0], 8
.text:00007061                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00007061 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00007061
.text:00007061 ; ---------------------------------------------------------------------------
.text:00007066                 align 4
.text:00007066 _text           ends
.text:00007066
.text:00007068 ; ===========================================================================
.text:00007068
.text:00007068 ; Segment type: Pure code
.text:00007068 ; Segment permissions: Read/Execute
.text:00007068 _text           segment para public 'CODE' use32
.text:00007068                 assume cs:_text
.text:00007068                 ;org 7068h
.text:00007068 ; COMDAT (pick any)
.text:00007068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007068
.text:00007068 ; =============== S U B R O U T I N E =======================================
.text:00007068
.text:00007068
.text:00007068 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::Release`adjustor{4}' (void)
.text:00007068                 public ?Release@CHandler@NGz@NArchive@@W3AGKXZ
.text:00007068 ?Release@CHandler@NGz@NArchive@@W3AGKXZ proc near
.text:00007068                                         ; DATA XREF: .rdata:00004FC8o
.text:00007068
.text:00007068 arg_0           = dword ptr  4
.text:00007068
.text:00007068                 sub     [esp+arg_0], 4
.text:0000706D                 jmp     ?Release@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::Release(void)
.text:0000706D ?Release@CHandler@NGz@NArchive@@W3AGKXZ endp
.text:0000706D
.text:0000706D ; ---------------------------------------------------------------------------
.text:00007072                 align 4
.text:00007072 _text           ends
.text:00007072
.text:00007074 ; ===========================================================================
.text:00007074
.text:00007074 ; Segment type: Pure code
.text:00007074 ; Segment permissions: Read/Execute
.text:00007074 _text           segment para public 'CODE' use32
.text:00007074                 assume cs:_text
.text:00007074                 ;org 7074h
.text:00007074 ; COMDAT (pick any)
.text:00007074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007074
.text:00007074 ; =============== S U B R O U T I N E =======================================
.text:00007074
.text:00007074
.text:00007074 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00007074                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00007074 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00007074                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00007074                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ICompressSetOutStreamSize'}o
.text:00007074
.text:00007074 arg_0           = dword ptr  4
.text:00007074
.text:00007074                 sub     [esp+arg_0], 0Ch
.text:00007079                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:00007079 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00007079
.text:00007079 ; ---------------------------------------------------------------------------
.text:0000707E                 align 10h
.text:0000707E _text           ends
.text:0000707E
.text:00007080 ; ===========================================================================
.text:00007080
.text:00007080 ; Segment type: Pure code
.text:00007080 ; Segment permissions: Read/Execute
.text:00007080 _text           segment para public 'CODE' use32
.text:00007080                 assume cs:_text
.text:00007080                 ;org 7080h
.text:00007080 ; COMDAT (pick any)
.text:00007080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007080
.text:00007080 ; =============== S U B R O U T I N E =======================================
.text:00007080
.text:00007080
.text:00007080 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::Release`adjustor{8}' (void)
.text:00007080                 public ?Release@CHandler@NGz@NArchive@@W7AGKXZ
.text:00007080 ?Release@CHandler@NGz@NArchive@@W7AGKXZ proc near
.text:00007080                                         ; DATA XREF: .rdata:00004FB0o
.text:00007080
.text:00007080 arg_0           = dword ptr  4
.text:00007080
.text:00007080                 sub     [esp+arg_0], 8
.text:00007085                 jmp     ?Release@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::Release(void)
.text:00007085 ?Release@CHandler@NGz@NArchive@@W7AGKXZ endp
.text:00007085
.text:00007085 ; ---------------------------------------------------------------------------
.text:0000708A                 align 4
.text:0000708A _text           ends
.text:0000708A
.text:0000708C ; ===========================================================================
.text:0000708C
.text:0000708C ; Segment type: Pure code
.text:0000708C ; Segment permissions: Read/Execute
.text:0000708C _text           segment para public 'CODE' use32
.text:0000708C                 assume cs:_text
.text:0000708C                 ;org 708Ch
.text:0000708C ; COMDAT (pick any)
.text:0000708C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000708C
.text:0000708C ; =============== S U B R O U T I N E =======================================
.text:0000708C
.text:0000708C
.text:0000708C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Release`adjustor{4}' (void)
.text:0000708C                 public ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:0000708C ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:0000708C                                         ; DATA XREF: .rdata:00004558o
.text:0000708C
.text:0000708C arg_0           = dword ptr  4
.text:0000708C
.text:0000708C                 sub     [esp+arg_0], 4
.text:00007091                 jmp     ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::Release(void)
.text:00007091 ?Release@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:00007091
.text:00007091 ; ---------------------------------------------------------------------------
.text:00007096                 align 4
.text:00007096 _text           ends
.text:00007096
.text:00007098 ; ===========================================================================
.text:00007098
.text:00007098 ; Segment type: Pure code
.text:00007098 ; Segment permissions: Read/Execute
.text:00007098 _text           segment para public 'CODE' use32
.text:00007098                 assume cs:_text
.text:00007098                 ;org 7098h
.text:00007098 ; COMDAT (pick any)
.text:00007098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007098
.text:00007098 ; =============== S U B R O U T I N E =======================================
.text:00007098
.text:00007098
.text:00007098 ; [thunk]:public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:00007098                 public ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z
.text:00007098 ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:00007098                                         ; DATA XREF: .rdata:const NCompress::NDeflate::NDecoder::CCOMCoder::`vftable'{for `ISequentialInStream'}o
.text:00007098                                         ; .rdata:const NCompress::NDeflate::NDecoder::CCoder::`vftable'{for `ISequentialInStream'}o
.text:00007098
.text:00007098 arg_0           = dword ptr  4
.text:00007098
.text:00007098                 sub     [esp+arg_0], 10h
.text:0000709D                 jmp     ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:0000709D ?QueryInterface@CCoder@NDecoder@NDeflate@NCompress@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:0000709D
.text:0000709D ; ---------------------------------------------------------------------------
.text:000070A2                 align 4
.text:000070A2 _text           ends
.text:000070A2
.text:000070A4 ; ===========================================================================
.text:000070A4
.text:000070A4 ; Segment type: Pure code
.text:000070A4 ; Segment permissions: Read/Execute
.text:000070A4 _text           segment para public 'CODE' use32
.text:000070A4                 assume cs:_text
.text:000070A4                 ;org 70A4h
.text:000070A4 ; COMDAT (pick any)
.text:000070A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070A4
.text:000070A4 ; =============== S U B R O U T I N E =======================================
.text:000070A4
.text:000070A4
.text:000070A4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:000070A4                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ
.text:000070A4 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:000070A4                                         ; DATA XREF: .rdata:000053C8o
.text:000070A4                                         ; .rdata:00005AE0o
.text:000070A4
.text:000070A4 arg_0           = dword ptr  4
.text:000070A4
.text:000070A4                 sub     [esp+arg_0], 4
.text:000070A9                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000070A9 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W3AGKXZ endp
.text:000070A9
.text:000070A9 ; ---------------------------------------------------------------------------
.text:000070AE                 align 10h
.text:000070AE _text           ends
.text:000070AE
.text:000070B0 ; ===========================================================================
.text:000070B0
.text:000070B0 ; Segment type: Pure code
.text:000070B0 ; Segment permissions: Read/Execute
.text:000070B0 _text           segment para public 'CODE' use32
.text:000070B0                 assume cs:_text
.text:000070B0                 ;org 70B0h
.text:000070B0 ; COMDAT (pick any)
.text:000070B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070B0
.text:000070B0 ; =============== S U B R O U T I N E =======================================
.text:000070B0
.text:000070B0
.text:000070B0 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::Release`adjustor{12}' (void)
.text:000070B0                 public ?Release@CHandler@NGz@NArchive@@WM@AGKXZ
.text:000070B0 ?Release@CHandler@NGz@NArchive@@WM@AGKXZ proc near
.text:000070B0                                         ; DATA XREF: .rdata:00004F9Co
.text:000070B0
.text:000070B0 arg_0           = dword ptr  4
.text:000070B0
.text:000070B0                 sub     [esp+arg_0], 0Ch
.text:000070B5                 jmp     ?Release@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::Release(void)
.text:000070B5 ?Release@CHandler@NGz@NArchive@@WM@AGKXZ endp
.text:000070B5
.text:000070B5 ; ---------------------------------------------------------------------------
.text:000070BA                 align 4
.text:000070BA _text           ends
.text:000070BA
.text:000070BC ; ===========================================================================
.text:000070BC
.text:000070BC ; Segment type: Pure code
.text:000070BC ; Segment permissions: Read/Execute
.text:000070BC _text           segment para public 'CODE' use32
.text:000070BC                 assume cs:_text
.text:000070BC                 ;org 70BCh
.text:000070BC ; COMDAT (pick any)
.text:000070BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070BC
.text:000070BC ; =============== S U B R O U T I N E =======================================
.text:000070BC
.text:000070BC
.text:000070BC ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::AddRef`adjustor{4}' (void)
.text:000070BC                 public ?AddRef@CHandler@NGz@NArchive@@W3AGKXZ
.text:000070BC ?AddRef@CHandler@NGz@NArchive@@W3AGKXZ proc near
.text:000070BC                                         ; DATA XREF: .rdata:00004FC4o
.text:000070BC
.text:000070BC arg_0           = dword ptr  4
.text:000070BC
.text:000070BC                 sub     [esp+arg_0], 4
.text:000070C1                 jmp     ?AddRef@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::AddRef(void)
.text:000070C1 ?AddRef@CHandler@NGz@NArchive@@W3AGKXZ endp
.text:000070C1
.text:000070C1 ; ---------------------------------------------------------------------------
.text:000070C6                 align 4
.text:000070C6 _text           ends
.text:000070C6
.text:000070C8 ; ===========================================================================
.text:000070C8
.text:000070C8 ; Segment type: Pure code
.text:000070C8 ; Segment permissions: Read/Execute
.text:000070C8 _text           segment para public 'CODE' use32
.text:000070C8                 assume cs:_text
.text:000070C8                 ;org 70C8h
.text:000070C8 ; COMDAT (pick any)
.text:000070C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070C8
.text:000070C8 ; =============== S U B R O U T I N E =======================================
.text:000070C8
.text:000070C8
.text:000070C8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NDecoder::CCoder::Release`adjustor{8}' (void)
.text:000070C8                 public ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ
.text:000070C8 ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ proc near
.text:000070C8                                         ; DATA XREF: .rdata:000053B0o
.text:000070C8                                         ; .rdata:00005AC8o
.text:000070C8
.text:000070C8 arg_0           = dword ptr  4
.text:000070C8
.text:000070C8                 sub     [esp+arg_0], 8
.text:000070CD                 jmp     ?Release@CCoder@NDecoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NDecoder::CCoder::Release(void)
.text:000070CD ?Release@CCoder@NDecoder@NDeflate@NCompress@@W7AGKXZ endp
.text:000070CD
.text:000070CD ; ---------------------------------------------------------------------------
.text:000070D2                 align 4
.text:000070D2 _text           ends
.text:000070D2
.text:000070D4 ; ===========================================================================
.text:000070D4
.text:000070D4 ; Segment type: Pure code
.text:000070D4 ; Segment permissions: Read/Execute
.text:000070D4 _text           segment para public 'CODE' use32
.text:000070D4                 assume cs:_text
.text:000070D4                 ;org 70D4h
.text:000070D4 ; COMDAT (pick any)
.text:000070D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070D4
.text:000070D4 ; =============== S U B R O U T I N E =======================================
.text:000070D4
.text:000070D4
.text:000070D4 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NGz::CHandler::AddRef`adjustor{8}' (void)
.text:000070D4                 public ?AddRef@CHandler@NGz@NArchive@@W7AGKXZ
.text:000070D4 ?AddRef@CHandler@NGz@NArchive@@W7AGKXZ proc near
.text:000070D4                                         ; DATA XREF: .rdata:00004FACo
.text:000070D4
.text:000070D4 arg_0           = dword ptr  4
.text:000070D4
.text:000070D4                 sub     [esp+arg_0], 8
.text:000070D9                 jmp     ?AddRef@CHandler@NGz@NArchive@@UAGKXZ ; NArchive::NGz::CHandler::AddRef(void)
.text:000070D9 ?AddRef@CHandler@NGz@NArchive@@W7AGKXZ endp
.text:000070D9
.text:000070D9 ; ---------------------------------------------------------------------------
.text:000070DE                 align 10h
.text:000070DE _text           ends
.text:000070DE
.text:000070E0 ; ===========================================================================
.text:000070E0
.text:000070E0 ; Segment type: Pure code
.text:000070E0 ; Segment permissions: Read/Execute
.text:000070E0 _text           segment para public 'CODE' use32
.text:000070E0                 assume cs:_text
.text:000070E0                 ;org 70E0h
.text:000070E0 ; COMDAT (pick any)
.text:000070E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000070E0
.text:000070E0 ; =============== S U B R O U T I N E =======================================
.text:000070E0
.text:000070E0
.text:000070E0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::AddRef`adjustor{4}' (void)
.text:000070E0                 public ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ
.text:000070E0 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ proc near
.text:000070E0                                         ; DATA XREF: .rdata:00004554o
.text:000070E0
.text:000070E0 arg_0           = dword ptr  4
.text:000070E0
.text:000070E0                 sub     [esp+arg_0], 4
.text:000070E5                 jmp     ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGKXZ ; NCompress::NDeflate::NEncoder::CCOMCoder::AddRef(void)
.text:000070E5 ?AddRef@CCOMCoder@NEncoder@NDeflate@NCompress@@W3AGKXZ endp
.text:000070E5
.text:000070E5 ; ---------------------------------------------------------------------------
.text:000070EA                 align 4
.text:000070EA _text           ends
.text:000070EA
.text$yc:000070EC ; ===========================================================================
.text$yc:000070EC
.text$yc:000070EC ; Segment type: Pure code
.text$yc:000070EC ; Segment permissions: Read/Execute
.text$yc:000070EC _text$yc        segment para public 'CODE' use32
.text$yc:000070EC                 assume cs:_text$yc
.text$yc:000070EC                 ;org 70ECh
.text$yc:000070EC ; COMDAT (pick any)
.text$yc:000070EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000070EC
.text$yc:000070EC ; =============== S U B R O U T I N E =======================================
.text$yc:000070EC
.text$yc:000070EC ; Attributes: bp-based frame
.text$yc:000070EC
.text$yc:000070EC ; void __cdecl NArchive::NGz::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:000070EC ??__Eg_RegisterArc@NGz@NArchive@@YAXXZ proc near
.text$yc:000070EC                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:000070EC                 push    ebp
.text$yc:000070ED                 mov     ebp, esp
.text$yc:000070EF                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:000070F4                 call    ??0CRegisterArc@NGz@NArchive@@QAE@XZ ; NArchive::NGz::CRegisterArc::CRegisterArc(void)
.text$yc:000070F9                 cmp     ebp, esp
.text$yc:000070FB                 call    __RTC_CheckEsp
.text$yc:00007100                 pop     ebp
.text$yc:00007101                 retn
.text$yc:00007101 ??__Eg_RegisterArc@NGz@NArchive@@YAXXZ endp
.text$yc:00007101
.text$yc:00007101 ; ---------------------------------------------------------------------------
.text$yc:00007102                 align 4
.text$yc:00007102 _text$yc        ends
.text$yc:00007102
.text:00007104 ; ===========================================================================
.text:00007104
.text:00007104 ; Segment type: Pure code
.text:00007104 ; Segment permissions: Read/Execute
.text:00007104 _text           segment para public 'CODE' use32
.text:00007104                 assume cs:_text
.text:00007104                 ;org 7104h
.text:00007104 ; COMDAT (pick any)
.text:00007104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00007104
.text:00007104 ; =============== S U B R O U T I N E =======================================
.text:00007104
.text:00007104 ; Attributes: bp-based frame
.text:00007104
.text:00007104 ; _DWORD __thiscall NArchive::NGz::CRegisterArc::CRegisterArc(NArchive::NGz::CRegisterArc *__hidden this)
.text:00007104                 public ??0CRegisterArc@NGz@NArchive@@QAE@XZ
.text:00007104 ??0CRegisterArc@NGz@NArchive@@QAE@XZ proc near
.text:00007104                                         ; CODE XREF: NArchive::NGz::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00007104
.text:00007104 var_4           = dword ptr -4
.text:00007104
.text:00007104                 push    ebp
.text:00007105                 mov     ebp, esp
.text:00007107                 push    ecx
.text:00007108                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000710F                 mov     [ebp+var_4], ecx
.text:00007112                 push    offset _g_ArcInfo ; struct CArcInfo *
.text:00007117                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:0000711C                 mov     eax, [ebp+var_4]
.text:0000711F                 add     esp, 4
.text:00007122                 cmp     ebp, esp
.text:00007124                 call    __RTC_CheckEsp
.text:00007129                 mov     esp, ebp
.text:0000712B                 pop     ebp
.text:0000712C                 retn
.text:0000712C ??0CRegisterArc@NGz@NArchive@@QAE@XZ endp
.text:0000712C
.text:0000712C ; ---------------------------------------------------------------------------
.text:0000712D                 align 10h
.text:0000712D _text           ends
.text:0000712D
.bss:00007130 ; ===========================================================================
.bss:00007130
.bss:00007130 ; Segment type: Uninitialized
.bss:00007130 ; Segment permissions: Read/Write
.bss:00007130 _bss            segment byte public 'BSS' use32
.bss:00007130                 assume cs:_bss
.bss:00007130                 ;org 7130h
.bss:00007130                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00007130 ; NArchive::NGz::CRegisterArc g_RegisterArc
.bss:00007130 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NGz::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00007131                 align 4
.bss:00007131 _bss            ends
.bss:00007131
.CRT$XCU:00007134 ; ===========================================================================
.CRT$XCU:00007134
.CRT$XCU:00007134 ; Segment type: Pure data
.CRT$XCU:00007134 ; Segment permissions: Read
.CRT$XCU:00007134 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00007134                 assume cs:_CRT$XCU
.CRT$XCU:00007134                 ;org 7134h
.CRT$XCU:00007134 _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NGz@NArchive@@YAXXZ ; NArchive::NGz::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00007134 _CRT$XCU        ends
.CRT$XCU:00007134
UNDEF:00007140 ; ===========================================================================
UNDEF:00007140
UNDEF:00007140 ; Segment type: Externs
UNDEF:00007140 ; UNDEF
UNDEF:00007140                 extrn __RTC_CheckEsp:near ; CODE XREF: IsArc_Gz(x,x)+2B6p
UNDEF:00007140                                         ; NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+1BEp ...
UNDEF:00007144                 extrn __RTC_Shutdown:near
UNDEF:00007144                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00007148                 extrn __RTC_InitBase:near
UNDEF:00007148                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000714C                 extrn ___security_cookie:near
UNDEF:0000714C                                         ; DATA XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+18r
UNDEF:0000714C                                         ; NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+20r ...
UNDEF:00007150 ; __fastcall __security_check_cookie(x)
UNDEF:00007150                 extrn @__security_check_cookie@4:near
UNDEF:00007150                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+1B4p
UNDEF:00007150                                         ; NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+83p ...
UNDEF:00007154 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00007154                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00007154                                         ; CODE XREF: NArchive::NGz::CItem::ReadHeader(NCompress::NDeflate::NDecoder::CCOMCoder *)+1A7p
UNDEF:00007154                                         ; NArchive::NGz::CItem::ReadFooter1(NCompress::NDeflate::NDecoder::CCOMCoder *)+77p ...
UNDEF:00007158 ; unsigned __int8 __thiscall NCompress::NDeflate::NDecoder::CCoder::ReadAlignedByte(NCompress::NDeflate::NDecoder::CCoder *__hidden this)
UNDEF:00007158                 extrn ?ReadAlignedByte@CCoder@NDecoder@NDeflate@NCompress@@QAEEXZ:near
UNDEF:00007158                                         ; CODE XREF: NArchive::NGz::ReadBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uchar *,uint)+28p
UNDEF:00007158                                         ; NArchive::NGz::SkipBytes(NCompress::NDeflate::NDecoder::CCOMCoder *,uint)+28p ...
UNDEF:0000715C ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:0000715C                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:0000715C                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:00007160 ; __int32 __stdcall ReadStream_FALSE(struct ISequentialInStream *, void *, unsigned int)
UNDEF:00007160                 extrn ?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:near
UNDEF:00007160                                         ; CODE XREF: NArchive::NGz::CItem::ReadFooter2(ISequentialInStream *)+37p
UNDEF:00007164 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00007164                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00007164                                         ; CODE XREF: NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+70p
UNDEF:00007164                                         ; NArchive::NGz::CItem::WriteHeader(ISequentialOutStream *)+B1p ...
UNDEF:00007168 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00007168                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00007168                                         ; DATA XREF: NArchive::NGz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00007168                                         ; NArchive::NGz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000716C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:0000716C                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:0000716C                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1BCp
UNDEF:0000716C                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1D6p
UNDEF:00007170 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00007170                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00007170                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1A4p
UNDEF:00007170                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+B7p
UNDEF:00007174 ; void __thiscall UString::AddAscii(UString *__hidden this, const char *)
UNDEF:00007174                 extrn ?AddAscii@UString@@QAEXPBD@Z:near
UNDEF:00007174                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+198p
UNDEF:00007178 ; struct UString __stdcall __high MultiByteToUnicodeString(const struct AString *, unsigned int)
UNDEF:00007178                 extrn ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:near
UNDEF:00007178                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+184p
UNDEF:00007178                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+9Ep
UNDEF:0000717C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:0000717C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:0000717C                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+15Ap
UNDEF:0000717C                                         ; NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1CAp
UNDEF:00007180 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00007180                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00007180                                         ; CODE XREF: NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+94p
UNDEF:00007180                                         ; NArchive::NGz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+B7p ...
UNDEF:00007184                 extrn ___CxxFrameHandler3:near
UNDEF:00007184                                         ; CODE XREF: __ehhandler$?GetArchiveProperty@CHandler@NGz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+16j
UNDEF:00007184                                         ; __ehhandler$?GetProperty@CHandler@NGz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+16j ...
UNDEF:00007188 ; void __cdecl operator delete(void *)
UNDEF:00007188                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5+7p
UNDEF:00007188                                         ; __unwindfunclet$?Extract@CHandler@NGz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7+7p ...
UNDEF:0000718C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000718C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000718C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00007190 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:00007190                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:00007190                                         ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1A5p
UNDEF:00007194 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:00007194                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:00007194                                         ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+EDp
UNDEF:00007198 ; void NWindows::NTime::UnixTimeToFileTime(NWindows::NTime *__hidden this, unsigned int, struct _FILETIME *)
UNDEF:00007198                 extrn ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z:near
UNDEF:00007198                                         ; CODE XREF: NArchive::NGz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E1p
UNDEF:0000719C ; const type_info::`vftable'
UNDEF:0000719C                 extrn ??_7type_info@@6B@:near
UNDEF:0000719C                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:0000719C                                         ; .data:COutStreamWithCRC `RTTI Type Descriptor'o ...
UNDEF:000071A0 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:000071A0                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:000071A0                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+43Ep
UNDEF:000071A4 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:000071A4                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:000071A4                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2AEp
UNDEF:000071A4                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+69Ep ...
UNDEF:000071A8 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:000071A8                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:000071A8                                         ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+259p
UNDEF:000071A8                                         ; NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+63Dp ...
UNDEF:000071AC ; void *__cdecl operator new(unsigned int)
UNDEF:000071AC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+182p
UNDEF:000071AC                                         ; NArchive::NGz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+22Cp ...
UNDEF:000071B0 ; public: __thiscall AString::AString(void)
UNDEF:000071B0                 extrn ??0AString@@QAE@XZ:near
UNDEF:000071B0                                         ; CODE XREF: NArchive::NGz::CItem::CItem(void)+65p
UNDEF:000071B0                                         ; NArchive::NGz::CItem::CItem(void)+77p ...
UNDEF:000071B4 ; public: virtual long __stdcall COutStreamWithCRC::Write(void const *, unsigned int, unsigned int *)
UNDEF:000071B4                 extrn ?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z:near
UNDEF:000071B4                                         ; DATA XREF: .rdata:0000406Co
UNDEF:000071B8 ; const IID IID_IUnknown
UNDEF:000071B8                 extrn _IID_IUnknown:near
UNDEF:000071B8                                         ; DATA XREF: COutStreamWithCRC::QueryInterface(_GUID const &,void * *)+Co
UNDEF:000071B8                                         ; NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *)+1Do ...
UNDEF:000071BC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000071BC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000071C0                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialOutStream::`vftable'o
UNDEF:000071C0                                         ; .rdata:000043E8o ...
UNDEF:000071C4 ; __int32 NCompress::CopyStream(NCompress *__hidden this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
UNDEF:000071C4                 extrn ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:000071C4                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8EBp
UNDEF:000071C8                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:000071C8                                         ; DATA XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6D2o
UNDEF:000071CC ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:000071CC                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:000071CC                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2DFp
UNDEF:000071CC                                         ; NArchive::NGz::CItem::CopyMetaPropsFrom(NArchive::NGz::CItem const &)+3Dp ...
UNDEF:000071D0 ; struct AString __stdcall __high UnicodeStringToMultiByte(const struct UString *, unsigned int)
UNDEF:000071D0                 extrn ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:near
UNDEF:000071D0                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2BAp
UNDEF:000071D4 ; void __thiscall UString::DeleteFrontal(UString *__hidden this, unsigned int)
UNDEF:000071D4                 extrn ?DeleteFrontal@UString@@QAEXI@Z:near
UNDEF:000071D4                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2A5p
UNDEF:000071D8 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:000071D8                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:000071D8                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+281p
UNDEF:000071DC ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000071DC                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000071DC                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+26Cp
UNDEF:000071E0 ; bool NWindows::NTime::FileTimeToUnixTime(NWindows::NTime *__hidden this, const struct _FILETIME *, unsigned int *)
UNDEF:000071E0                 extrn ?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z:near
UNDEF:000071E0                                         ; CODE XREF: NArchive::NGz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+17Ap
UNDEF:000071E4 ; __int32 __thiscall CProps::SetCoderProps(CProps *__hidden this, struct ICompressSetCoderProperties *, const unsigned __int64 *)
UNDEF:000071E4                 extrn ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:near
UNDEF:000071E4                                         ; CODE XREF: NArchive::NGz::UpdateArchive(ISequentialOutStream *,unsigned __int64,NArchive::NGz::CItem &,NArchive::CSingleMethodProps const &,IArchiveUpdateCallback *)+2DAp
UNDEF:000071E8 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this, bool)
UNDEF:000071E8                 extrn ??0CCoder@NEncoder@NDeflate@NCompress@@QAE@_N@Z:near
UNDEF:000071E8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::CCOMCoder(void)+34p
UNDEF:000071EC ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:000071EC                 extrn ?Code@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:000071EC                                         ; DATA XREF: .rdata:00004570o
UNDEF:000071F0 ; public: virtual long __stdcall NCompress::NDeflate::NEncoder::CCOMCoder::SetCoderProperties(unsigned long const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:000071F0                 extrn ?SetCoderProperties@CCOMCoder@NEncoder@NDeflate@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z:near
UNDEF:000071F0                                         ; DATA XREF: .rdata:0000455Co
UNDEF:000071F4                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:000071F4                                         ; DATA XREF: NCompress::NDeflate::NEncoder::CCOMCoder::QueryInterface(_GUID const &,void * *):loc_4875o
UNDEF:000071F8 ; _DWORD __thiscall NCompress::NDeflate::NEncoder::CCoder::~CCoder(NCompress::NDeflate::NEncoder::CCoder *__hidden this)
UNDEF:000071F8                 extrn ??1CCoder@NEncoder@NDeflate@NCompress@@QAE@XZ:near
UNDEF:000071F8                                         ; CODE XREF: NCompress::NDeflate::NEncoder::CCOMCoder::~CCOMCoder(void)+14p
UNDEF:000071FC ; public: virtual long __stdcall CSequentialInStreamWithCRC::Read(void *, unsigned int, unsigned int *)
UNDEF:000071FC                 extrn ?Read@CSequentialInStreamWithCRC@@UAGJPAXIPAI@Z:near
UNDEF:000071FC                                         ; DATA XREF: .rdata:00004B64o
UNDEF:00007200 ; __int32 __thiscall NArchive::CSingleMethodProps::SetProperties(NArchive::CSingleMethodProps *__hidden this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
UNDEF:00007200                 extrn ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z:near
UNDEF:00007200                                         ; CODE XREF: NArchive::NGz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+15p
UNDEF:00007204 ; _DWORD __thiscall NCompress::NDeflate::NDecoder::CCoder::CCoder(NCompress::NDeflate::NDecoder::CCoder *__hidden this, bool, bool)
UNDEF:00007204                 extrn ??0CCoder@NDecoder@NDeflate@NCompress@@QAE@_N0@Z:near
UNDEF:00007204                                         ; CODE XREF: NCompress::NDeflate::NDecoder::CCOMCoder::CCOMCoder(void)+15p
UNDEF:00007208 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00007208                 extrn ?Code@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00007208                                         ; DATA XREF: .rdata:000053E0o
UNDEF:00007208                                         ; .rdata:00005AF8o
UNDEF:0000720C ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`scalar deleting destructor'(unsigned int)
UNDEF:0000720C                 extrn ??_GCCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00007210 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCOMCoder::`vector deleting destructor'(unsigned int)
UNDEF:00007210                 extrn ??_ECCOMCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00007210                                         ; DATA XREF: .rdata:000053E4o
UNDEF:00007214 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::CodeResume(struct ISequentialOutStream *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00007214                 extrn ?CodeResume@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:near
UNDEF:00007214                                         ; DATA XREF: .rdata:000053E8o
UNDEF:00007214                                         ; .rdata:00005B00o
UNDEF:00007218 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00007218                 extrn ?GetInStreamProcessedSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPA_K@Z:near
UNDEF:00007218                                         ; DATA XREF: .rdata:000053CCo
UNDEF:00007218                                         ; .rdata:00005AE4o
UNDEF:0000721C ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetInStream(struct ISequentialInStream *)
UNDEF:0000721C                 extrn ?SetInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:0000721C                                         ; DATA XREF: .rdata:000053B4o
UNDEF:0000721C                                         ; .rdata:00005ACCo
UNDEF:00007220 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::ReleaseInStream(void)
UNDEF:00007220                 extrn ?ReleaseInStream@CCoder@NDecoder@NDeflate@NCompress@@UAGJXZ:near
UNDEF:00007220                                         ; DATA XREF: .rdata:000053B8o
UNDEF:00007220                                         ; .rdata:00005AD0o
UNDEF:00007224 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::SetOutStreamSize(unsigned __int64 const *)
UNDEF:00007224                 extrn ?SetOutStreamSize@CCoder@NDecoder@NDeflate@NCompress@@UAGJPB_K@Z:near
UNDEF:00007224                                         ; DATA XREF: .rdata:000053A0o
UNDEF:00007224                                         ; .rdata:00005AB8o
UNDEF:00007228 ; public: virtual long __stdcall NCompress::NDeflate::NDecoder::CCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:00007228                 extrn ?Read@CCoder@NDecoder@NDeflate@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:00007228                                         ; DATA XREF: .rdata:0000538Co
UNDEF:00007228                                         ; .rdata:00005AA4o
UNDEF:0000722C                 extrn _IID_ISequentialInStream:near
UNDEF:0000722C                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_5841o
UNDEF:00007230                 extrn _IID_ICompressSetOutStreamSize:near
UNDEF:00007230                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_580Do
UNDEF:00007234                 extrn _IID_ICompressSetInStream:near
UNDEF:00007234                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_57D9o
UNDEF:00007238                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00007238                                         ; DATA XREF: NCompress::NDeflate::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_57A2o
UNDEF:0000723C ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
UNDEF:0000723C                 extrn ??_GCCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z_0:near
UNDEF:00007240 ; public: virtual void * __thiscall NCompress::NDeflate::NDecoder::CCoder::`vector deleting destructor'(unsigned int)
UNDEF:00007240                 extrn ??_ECCoder@NDecoder@NDeflate@NCompress@@UAEPAXI@Z:near ; weak
UNDEF:00007240                                         ; DATA XREF: .rdata:00005AFCo
UNDEF:00007244 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00007244                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00007244                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00007248 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:00007248                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:00007248                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:0000724C ; void __thiscall NArchive::CSingleMethodProps::Init(NArchive::CSingleMethodProps *__hidden this)
UNDEF:0000724C                 extrn ?Init@CSingleMethodProps@NArchive@@QAEXXZ:near
UNDEF:0000724C                                         ; CODE XREF: NArchive::CSingleMethodProps::CSingleMethodProps(void)+3Fp
UNDEF:00007250 ; public: __thiscall UString::UString(void)
UNDEF:00007250                 extrn ??0UString@@QAE@XZ:near
UNDEF:00007250                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+51p
UNDEF:00007254                 extrn _IID_ISetProperties:near
UNDEF:00007254                                         ; DATA XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *):loc_606Ao
UNDEF:00007258                 extrn _IID_IOutArchive:near
UNDEF:00007258                                         ; DATA XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *):loc_6036o
UNDEF:0000725C                 extrn _IID_IArchiveOpenSeq:near
UNDEF:0000725C                                         ; DATA XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *):loc_6002o
UNDEF:00007260                 extrn _IID_IInArchive:near
UNDEF:00007260                                         ; DATA XREF: NArchive::NGz::CHandler::QueryInterface(_GUID const &,void * *):loc_5FE3o
UNDEF:00007264 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00007264                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00007264                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Create(uint)+18p
UNDEF:00007268 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:00007268                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:00007268                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Init(void)+14p
UNDEF:0000726C ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:0000726C                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:0000726C                                         ; CODE XREF: NArchive::NGz::CRegisterArc::CRegisterArc(void)+13p
UNDEF:0000726C
UNDEF:0000726C
UNDEF:0000726C                 end