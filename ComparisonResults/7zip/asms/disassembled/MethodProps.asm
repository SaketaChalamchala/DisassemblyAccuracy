.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : AFEF71FFA8AD30F11A5C926FF684EB6C
.rdata:00000000 ; Input CRC32 : 565277C2
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MethodProps.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG67999[3]
.rdata:00000000 $SG67999        db 'ON',0               ; DATA XREF: StringToBool(UString const &,bool &):loc_112o
.rdata:00000003 $SG68220        db    0                 ; DATA XREF: .rdata:off_5Co
.rdata:00000004 ; char _SG68003[4]
.rdata:00000004 $SG68003        db 'OFF',0              ; DATA XREF: StringToBool(UString const &,bool &):loc_156o
.rdata:00000008 $SG68221        dd offset off_64        ; DATA XREF: .rdata:off_64o
.rdata:0000000C $SG68222        db  6Dh ; m             ; DATA XREF: .rdata:off_6Co
.rdata:0000000D                 db  65h ; e
.rdata:0000000E                 db  6Dh ; m
.rdata:0000000F                 db    0
.rdata:00000010 $SG68223        dd offset off_6C+3      ; DATA XREF: .rdata:00000074o
.rdata:00000014 $SG68224        dd offset unk_63        ; DATA XREF: .rdata:0000007Co
.rdata:00000018 $SG68225        db  70h ; p             ; DATA XREF: .rdata:00000084o
.rdata:00000019                 db  62h ; b
.rdata:0000001A                 db    0
.rdata:0000001B                 db    0
.rdata:0000001C $SG68226        db  6Ch ; l             ; DATA XREF: .rdata:0000008Co
.rdata:0000001D                 db  63h ; c
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020 $SG68227        db  6Ch ; l             ; DATA XREF: .rdata:00000094o
.rdata:00000021                 db  70h ; p
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024 $SG68228        db  66h ; f             ; DATA XREF: .rdata:0000009Co
.rdata:00000025                 db  62h ; b
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028 $SG68229        db  6Dh ; m             ; DATA XREF: .rdata:000000A4o
.rdata:00000029                 db  66h ; f
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C $SG68230        db  6Dh ; m             ; DATA XREF: .rdata:000000ACo
.rdata:0000002D                 db  63h ; c
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030 $SG68231        db 'pass',0             ; DATA XREF: .rdata:000000B4o
.rdata:00000035                 align 4
.rdata:00000038 $SG68232        dd offset unk_61        ; DATA XREF: .rdata:000000BCo
.rdata:0000003C $SG68233        db  6Dh ; m             ; DATA XREF: .rdata:000000C4o
.rdata:0000003D                 db  74h ; t
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040 $SG68234        db  65h ; e             ; DATA XREF: .rdata:000000CCo
.rdata:00000041                 db  6Fh ; o
.rdata:00000042                 db  73h ; s
.rdata:00000043                 db    0
.rdata:00000044 $SG68235        dd offset unk_78        ; DATA XREF: .rdata:000000D4o
.rdata:00000048 $SG68236        db 'reduceSize',0       ; DATA XREF: .rdata:000000DCo
.rdata:00000053                 align 4
.rdata:00000054 ; char _SG68453[]
.rdata:00000054 $SG68453        dd offset off_6C+1      ; DATA XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+4Bo
.rdata:00000058 _g_NameToPropID db  13h                 ; DATA XREF: CMethodProps::SetParam(UString const &,UString const &)+5Do
.rdata:00000058                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+DBo
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C ; char *off_5C
.rdata:0000005C off_5C          dd offset $SG68220      ; DATA XREF: FindPropIdExact(UString const &)+26r
.rdata:00000060                 db  13h
.rdata:00000061 unk_61          db    0                 ; DATA XREF: .rdata:$SG68232o
.rdata:00000062                 db    0
.rdata:00000063 unk_63          db    0                 ; DATA XREF: .rdata:$SG68224o
.rdata:00000064 off_64          dd offset $SG68221      ; DATA XREF: .rdata:$SG68221o
.rdata:00000068                 db  13h
.rdata:00000069                 db    0
.rdata:0000006A                 db    0
.rdata:0000006B                 db    0
.rdata:0000006C off_6C          dd offset $SG68222      ; DATA XREF: .rdata:$SG68453o
.rdata:0000006C                                         ; .rdata:$SG68223o
.rdata:00000070                 db  13h
.rdata:00000071                 db    0
.rdata:00000072                 db    0
.rdata:00000073                 db    0
.rdata:00000074                 dd offset $SG68223
.rdata:00000078 unk_78          db  13h                 ; DATA XREF: .rdata:$SG68235o
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 dd offset $SG68224
.rdata:00000080                 db  13h
.rdata:00000081                 db    0
.rdata:00000082                 db    0
.rdata:00000083                 db    0
.rdata:00000084                 dd offset $SG68225
.rdata:00000088                 db  13h
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 dd offset $SG68226
.rdata:00000090                 db  13h
.rdata:00000091                 db    0
.rdata:00000092                 db    0
.rdata:00000093                 db    0
.rdata:00000094                 dd offset $SG68227
.rdata:00000098                 db  13h
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 dd offset $SG68228
.rdata:000000A0                 db    8
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 dd offset $SG68229
.rdata:000000A8                 db  13h
.rdata:000000A9                 db    0
.rdata:000000AA                 db    0
.rdata:000000AB                 db    0
.rdata:000000AC                 dd offset $SG68230
.rdata:000000B0                 db  13h
.rdata:000000B1                 db    0
.rdata:000000B2                 db    0
.rdata:000000B3                 db    0
.rdata:000000B4                 dd offset $SG68231      ; "pass"
.rdata:000000B8                 db  13h
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 dd offset $SG68232
.rdata:000000C0                 db  13h
.rdata:000000C1                 db    0
.rdata:000000C2                 db    0
.rdata:000000C3                 db    0
.rdata:000000C4                 dd offset $SG68233
.rdata:000000C8                 db  0Bh
.rdata:000000C9                 db    0
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 dd offset $SG68234
.rdata:000000D0                 db  13h
.rdata:000000D1                 db    0
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 dd offset $SG68235
.rdata:000000D8                 db  13h
.rdata:000000D9                 db    0
.rdata:000000DA                 db    0
.rdata:000000DB                 db    0
.rdata:000000DC                 dd offset $SG68236      ; "reduceSize"
.rdata:000000DC _rdata          ends
.rdata:000000DC
.text:000000E0 ; ===========================================================================
.text:000000E0
.text:000000E0 ; Segment type: Pure code
.text:000000E0 ; Segment permissions: Read/Execute
.text:000000E0 _text           segment para public 'CODE' use32
.text:000000E0                 assume cs:_text
.text:000000E0                 ;org 0E0h
.text:000000E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; bool __stdcall StringToBool(const struct UString *, bool *)
.text:000000E0                 public ?StringToBool@@YG_NABVUString@@AA_N@Z
.text:000000E0 ?StringToBool@@YG_NABVUString@@AA_N@Z proc near
.text:000000E0                                         ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+94p
.text:000000E0                                         ; CMethodProps::SetParam(UString const &,UString const &)+10Bp
.text:000000E0
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0 arg_4           = dword ptr  0Ch
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 mov     ecx, [ebp+arg_0] ; this
.text:000000E6                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000000EB                 movzx   eax, al
.text:000000EE                 test    eax, eax
.text:000000F0                 jnz     short loc_12C
.text:000000F2                 mov     ecx, [ebp+arg_0]
.text:000000F5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000000FA                 movzx   ecx, word ptr [eax]
.text:000000FD                 cmp     ecx, 2Bh ; '+'
.text:00000100                 jnz     short loc_112
.text:00000102                 mov     ecx, [ebp+arg_0]
.text:00000105                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000010A                 movzx   edx, word ptr [eax+2]
.text:0000010E                 test    edx, edx
.text:00000110                 jz      short loc_12C
.text:00000112
.text:00000112 loc_112:                                ; CODE XREF: StringToBool(UString const &,bool &)+20j
.text:00000112                 push    offset $SG67999 ; "ON"
.text:00000117                 mov     ecx, [ebp+arg_0]
.text:0000011A                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000011F                 push    eax             ; wchar_t *
.text:00000120                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00000125                 movzx   eax, al
.text:00000128                 test    eax, eax
.text:0000012A                 jz      short loc_136
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: StringToBool(UString const &,bool &)+10j
.text:0000012C                                         ; StringToBool(UString const &,bool &)+30j
.text:0000012C                 mov     ecx, [ebp+arg_4]
.text:0000012F                 mov     byte ptr [ecx], 1
.text:00000132                 mov     al, 1
.text:00000134                 jmp     short loc_17C
.text:00000136 ; ---------------------------------------------------------------------------
.text:00000136
.text:00000136 loc_136:                                ; CODE XREF: StringToBool(UString const &,bool &)+4Aj
.text:00000136                 mov     ecx, [ebp+arg_0]
.text:00000139                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000013E                 movzx   edx, word ptr [eax]
.text:00000141                 cmp     edx, 2Dh ; '-'
.text:00000144                 jnz     short loc_156
.text:00000146                 mov     ecx, [ebp+arg_0]
.text:00000149                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000014E                 movzx   eax, word ptr [eax+2]
.text:00000152                 test    eax, eax
.text:00000154                 jz      short loc_170
.text:00000156
.text:00000156 loc_156:                                ; CODE XREF: StringToBool(UString const &,bool &)+64j
.text:00000156                 push    offset $SG68003 ; "OFF"
.text:0000015B                 mov     ecx, [ebp+arg_0]
.text:0000015E                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000163                 push    eax             ; wchar_t *
.text:00000164                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00000169                 movzx   ecx, al
.text:0000016C                 test    ecx, ecx
.text:0000016E                 jz      short loc_17A
.text:00000170
.text:00000170 loc_170:                                ; CODE XREF: StringToBool(UString const &,bool &)+74j
.text:00000170                 mov     edx, [ebp+arg_4]
.text:00000173                 mov     byte ptr [edx], 0
.text:00000176                 mov     al, 1
.text:00000178                 jmp     short loc_17C
.text:0000017A ; ---------------------------------------------------------------------------
.text:0000017A
.text:0000017A loc_17A:                                ; CODE XREF: StringToBool(UString const &,bool &)+8Ej
.text:0000017A                 xor     al, al
.text:0000017C
.text:0000017C loc_17C:                                ; CODE XREF: StringToBool(UString const &,bool &)+54j
.text:0000017C                                         ; StringToBool(UString const &,bool &)+98j
.text:0000017C                 cmp     ebp, esp
.text:0000017E                 call    __RTC_CheckEsp
.text:00000183                 pop     ebp
.text:00000184                 retn    8
.text:00000184 ?StringToBool@@YG_NABVUString@@AA_N@Z endp
.text:00000184
.text:00000184 ; ---------------------------------------------------------------------------
.text:00000187                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; __int32 __stdcall PROPVARIANT_to_bool(const struct tagPROPVARIANT *, bool *)
.text:00000190                 public ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z
.text:00000190 ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z proc near
.text:00000190                                         ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+52p
.text:00000190                                         ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+4Ap
.text:00000190
.text:00000190 var_20          = dword ptr -20h
.text:00000190 var_1C          = dword ptr -1Ch
.text:00000190 var_18          = dword ptr -18h
.text:00000190 var_14          = dword ptr -14h
.text:00000190 var_10          = dword ptr -10h
.text:00000190 var_C           = dword ptr -0Ch
.text:00000190 var_4           = dword ptr -4
.text:00000190 arg_0           = dword ptr  8
.text:00000190 arg_4           = dword ptr  0Ch
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 push    0FFFFFFFFh
.text:00000195                 push    offset __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z
.text:0000019A                 mov     eax, large fs:0
.text:000001A0                 push    eax
.text:000001A1                 sub     esp, 14h
.text:000001A4                 mov     eax, 0CCCCCCCCh
.text:000001A9                 mov     [ebp+var_20], eax
.text:000001AC                 mov     [ebp+var_1C], eax
.text:000001AF                 mov     [ebp+var_18], eax
.text:000001B2                 mov     [ebp+var_14], eax
.text:000001B5                 mov     [ebp+var_10], eax
.text:000001B8                 mov     eax, dword ptr ds:___security_cookie
.text:000001BD                 xor     eax, ebp
.text:000001BF                 push    eax
.text:000001C0                 lea     eax, [ebp+var_C]
.text:000001C3                 mov     large fs:0, eax
.text:000001C9                 mov     eax, [ebp+arg_0]
.text:000001CC                 movzx   ecx, word ptr [eax]
.text:000001CF                 mov     [ebp+var_20], ecx
.text:000001D2                 cmp     [ebp+var_20], 0
.text:000001D6                 jz      short loc_1E6
.text:000001D8                 cmp     [ebp+var_20], 8
.text:000001DC                 jz      short loc_206
.text:000001DE                 cmp     [ebp+var_20], 0Bh
.text:000001E2                 jz      short loc_1F0
.text:000001E4                 jmp     short loc_253
.text:000001E6 ; ---------------------------------------------------------------------------
.text:000001E6
.text:000001E6 loc_1E6:                                ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+46j
.text:000001E6                 mov     edx, [ebp+arg_4]
.text:000001E9                 mov     byte ptr [edx], 1
.text:000001EC                 xor     eax, eax
.text:000001EE                 jmp     short loc_258
.text:000001F0 ; ---------------------------------------------------------------------------
.text:000001F0
.text:000001F0 loc_1F0:                                ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+52j
.text:000001F0                 mov     eax, [ebp+arg_0]
.text:000001F3                 movsx   ecx, word ptr [eax+8]
.text:000001F7                 neg     ecx
.text:000001F9                 sbb     ecx, ecx
.text:000001FB                 neg     ecx
.text:000001FD                 mov     edx, [ebp+arg_4]
.text:00000200                 mov     [edx], cl
.text:00000202                 xor     eax, eax
.text:00000204                 jmp     short loc_258
.text:00000206 ; ---------------------------------------------------------------------------
.text:00000206
.text:00000206 loc_206:                                ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+4Cj
.text:00000206                 mov     eax, [ebp+arg_0]
.text:00000209                 mov     ecx, [eax+8]
.text:0000020C                 push    ecx
.text:0000020D                 lea     ecx, [ebp+var_1C]
.text:00000210                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000215                 mov     [ebp+var_4], 0
.text:0000021C                 mov     edx, [ebp+arg_4]
.text:0000021F                 push    edx             ; bool *
.text:00000220                 lea     eax, [ebp+var_1C]
.text:00000223                 push    eax             ; struct UString *
.text:00000224                 call    ?StringToBool@@YG_NABVUString@@AA_N@Z ; StringToBool(UString const &,bool &)
.text:00000229                 movzx   ecx, al
.text:0000022C                 neg     ecx
.text:0000022E                 sbb     ecx, ecx
.text:00000230                 and     ecx, 7FF8FFA9h
.text:00000236                 add     ecx, 80070057h
.text:0000023C                 mov     [ebp+var_10], ecx
.text:0000023F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000246                 lea     ecx, [ebp+var_1C] ; this
.text:00000249                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000024E                 mov     eax, [ebp+var_10]
.text:00000251                 jmp     short loc_258
.text:00000253 ; ---------------------------------------------------------------------------
.text:00000253
.text:00000253 loc_253:                                ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+54j
.text:00000253                 mov     eax, 80070057h
.text:00000258
.text:00000258 loc_258:                                ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+5Ej
.text:00000258                                         ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+74j ...
.text:00000258                 mov     ecx, [ebp+var_C]
.text:0000025B                 mov     large fs:0, ecx
.text:00000262                 pop     ecx
.text:00000263                 add     esp, 20h
.text:00000266                 cmp     ebp, esp
.text:00000268                 call    __RTC_CheckEsp
.text:0000026D                 mov     esp, ebp
.text:0000026F                 pop     ebp
.text:00000270                 retn    8
.text:00000270 ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z endp
.text:00000270
.text:00000270 ; ---------------------------------------------------------------------------
.text:00000273                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; unsigned int __stdcall ParseStringToUInt32(const struct UString *, unsigned int *)
.text:00000280                 public ?ParseStringToUInt32@@YGIABVUString@@AAI@Z
.text:00000280 ?ParseStringToUInt32@@YGIABVUString@@AAI@Z proc near
.text:00000280                                         ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+78p
.text:00000280                                         ; CMethodProps::SetParam(UString const &,UString const &)+167p
.text:00000280
.text:00000280 var_10          = dword ptr -10h
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_8           = dword ptr -8
.text:00000280 var_4           = dword ptr -4
.text:00000280 arg_0           = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 10h
.text:00000286                 mov     eax, 0CCCCCCCCh
.text:0000028B                 mov     [ebp+var_10], eax
.text:0000028E                 mov     [ebp+var_C], eax
.text:00000291                 mov     [ebp+var_8], eax
.text:00000294                 mov     [ebp+var_4], eax
.text:00000297                 mov     ecx, [ebp+arg_0]
.text:0000029A                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000029F                 mov     [ebp+var_4], eax
.text:000002A2                 lea     eax, [ebp+var_C]
.text:000002A5                 push    eax             ; wchar_t **
.text:000002A6                 mov     ecx, [ebp+var_4]
.text:000002A9                 push    ecx             ; wchar_t *
.text:000002AA                 call    ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z ; ConvertStringToUInt32(wchar_t const *,wchar_t const * *)
.text:000002AF                 mov     edx, [ebp+arg_4]
.text:000002B2                 mov     [edx], eax
.text:000002B4                 mov     eax, [ebp+var_C]
.text:000002B7                 sub     eax, [ebp+var_4]
.text:000002BA                 sar     eax, 1
.text:000002BC                 push    edx
.text:000002BD                 mov     ecx, ebp
.text:000002BF                 push    eax
.text:000002C0                 lea     edx, $LN5
.text:000002C6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002CB                 pop     eax
.text:000002CC                 pop     edx
.text:000002CD                 add     esp, 10h
.text:000002D0                 cmp     ebp, esp
.text:000002D2                 call    __RTC_CheckEsp
.text:000002D7                 mov     esp, ebp
.text:000002D9                 pop     ebp
.text:000002DA                 retn    8
.text:000002DA ?ParseStringToUInt32@@YGIABVUString@@AAI@Z endp
.text:000002DA
.text:000002DA ; ---------------------------------------------------------------------------
.text:000002DD                 align 10h
.text:000002E0 $LN5            dd 1                    ; DATA XREF: ParseStringToUInt32(UString const &,uint &)+40o
.text:000002E4                 dd offset $LN4
.text:000002E8 $LN4            dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000002E4o
.text:000002F0                 dd offset $LN3
.text:000002F4 $LN3            dd 646E65h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000002F0o
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __int32 __stdcall ParsePropToUInt32(const struct UString *, const struct tagPROPVARIANT *, unsigned int *)
.text:00000300                 public ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z
.text:00000300 ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z proc near
.text:00000300                                         ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+A5p
.text:00000300
.text:00000300 var_C           = dword ptr -0Ch
.text:00000300 var_8           = dword ptr -8
.text:00000300 var_4           = dword ptr -4
.text:00000300 arg_0           = dword ptr  8
.text:00000300 arg_4           = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 sub     esp, 0Ch
.text:00000306                 push    esi
.text:00000307                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000030E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000315                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000031C                 mov     eax, [ebp+arg_4]
.text:0000031F                 movzx   ecx, word ptr [eax]
.text:00000322                 cmp     ecx, 13h
.text:00000325                 jnz     short loc_34C
.text:00000327                 mov     ecx, [ebp+arg_0] ; this
.text:0000032A                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000032F                 movzx   edx, al
.text:00000332                 test    edx, edx
.text:00000334                 jnz     short loc_33D
.text:00000336                 mov     eax, 80070057h
.text:0000033B                 jmp     short loc_39C
.text:0000033D ; ---------------------------------------------------------------------------
.text:0000033D
.text:0000033D loc_33D:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+34j
.text:0000033D                 mov     eax, [ebp+arg_8]
.text:00000340                 mov     ecx, [ebp+arg_4]
.text:00000343                 mov     edx, [ecx+8]
.text:00000346                 mov     [eax], edx
.text:00000348                 xor     eax, eax
.text:0000034A                 jmp     short loc_39C
.text:0000034C ; ---------------------------------------------------------------------------
.text:0000034C
.text:0000034C loc_34C:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+25j
.text:0000034C                 mov     eax, [ebp+arg_4]
.text:0000034F                 movzx   ecx, word ptr [eax]
.text:00000352                 test    ecx, ecx
.text:00000354                 jz      short loc_35D
.text:00000356                 mov     eax, 80070057h
.text:0000035B                 jmp     short loc_39C
.text:0000035D ; ---------------------------------------------------------------------------
.text:0000035D
.text:0000035D loc_35D:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+54j
.text:0000035D                 mov     ecx, [ebp+arg_0] ; this
.text:00000360                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000365                 movzx   edx, al
.text:00000368                 test    edx, edx
.text:0000036A                 jz      short loc_370
.text:0000036C                 xor     eax, eax
.text:0000036E                 jmp     short loc_39C
.text:00000370 ; ---------------------------------------------------------------------------
.text:00000370
.text:00000370 loc_370:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+6Aj
.text:00000370                 lea     eax, [ebp+var_8]
.text:00000373                 push    eax             ; unsigned int *
.text:00000374                 mov     ecx, [ebp+arg_0]
.text:00000377                 push    ecx             ; struct UString *
.text:00000378                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:0000037D                 mov     esi, eax
.text:0000037F                 mov     ecx, [ebp+arg_0] ; this
.text:00000382                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000387                 cmp     esi, eax
.text:00000389                 jz      short loc_392
.text:0000038B                 mov     eax, 80070057h
.text:00000390                 jmp     short loc_39C
.text:00000392 ; ---------------------------------------------------------------------------
.text:00000392
.text:00000392 loc_392:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+89j
.text:00000392                 mov     edx, [ebp+arg_8]
.text:00000395                 mov     eax, [ebp+var_8]
.text:00000398                 mov     [edx], eax
.text:0000039A                 xor     eax, eax
.text:0000039C
.text:0000039C loc_39C:                                ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+3Bj
.text:0000039C                                         ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+4Aj ...
.text:0000039C                 push    edx
.text:0000039D                 mov     ecx, ebp
.text:0000039F                 push    eax
.text:000003A0                 lea     edx, $LN10
.text:000003A6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003AB                 pop     eax
.text:000003AC                 pop     edx
.text:000003AD                 pop     esi
.text:000003AE                 add     esp, 0Ch
.text:000003B1                 cmp     ebp, esp
.text:000003B3                 call    __RTC_CheckEsp
.text:000003B8                 mov     esp, ebp
.text:000003BA                 pop     ebp
.text:000003BB                 retn    0Ch
.text:000003BB ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z endp
.text:000003BB
.text:000003BB ; ---------------------------------------------------------------------------
.text:000003BE                 align 10h
.text:000003C0 $LN10           dd 1                    ; DATA XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+A0o
.text:000003C4                 dd offset $LN9
.text:000003C8 $LN9            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:000003C4o
.text:000003D0                 dd offset $LN8
.text:000003D4 $LN8            dd 0CCCC0076h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000003D0o
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; __int32 __stdcall ParseMtProp(const struct UString *, const struct tagPROPVARIANT *, unsigned int, unsigned int *)
.text:000003E0                 public ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z
.text:000003E0 ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z proc near
.text:000003E0
.text:000003E0 var_18          = dword ptr -18h
.text:000003E0 var_14          = dword ptr -14h
.text:000003E0 var_10          = dword ptr -10h
.text:000003E0 var_C           = dword ptr -0Ch
.text:000003E0 var_8           = byte ptr -8
.text:000003E0 var_4           = dword ptr -4
.text:000003E0 arg_0           = dword ptr  8
.text:000003E0 arg_4           = dword ptr  0Ch
.text:000003E0 arg_8           = dword ptr  10h
.text:000003E0 arg_C           = dword ptr  14h
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 sub     esp, 18h
.text:000003E6                 mov     eax, 0CCCCCCCCh
.text:000003EB                 mov     [ebp+var_18], eax
.text:000003EE                 mov     [ebp+var_14], eax
.text:000003F1                 mov     [ebp+var_10], eax
.text:000003F4                 mov     [ebp+var_C], eax
.text:000003F7                 mov     dword ptr [ebp+var_8], eax
.text:000003FA                 mov     [ebp+var_4], eax
.text:000003FD                 mov     ecx, [ebp+arg_0] ; this
.text:00000400                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000405                 movzx   eax, al
.text:00000408                 test    eax, eax
.text:0000040A                 jz      short loc_468
.text:0000040C                 mov     ecx, [ebp+arg_4]
.text:0000040F                 movzx   edx, word ptr [ecx]
.text:00000412                 mov     [ebp+var_14], edx
.text:00000415                 cmp     [ebp+var_14], 13h
.text:00000419                 jz      short loc_41D
.text:0000041B                 jmp     short loc_42A
.text:0000041D ; ---------------------------------------------------------------------------
.text:0000041D
.text:0000041D loc_41D:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+39j
.text:0000041D                 mov     eax, [ebp+arg_C]
.text:00000420                 mov     ecx, [ebp+arg_4]
.text:00000423                 mov     edx, [ecx+8]
.text:00000426                 mov     [eax], edx
.text:00000428                 jmp     short loc_464
.text:0000042A ; ---------------------------------------------------------------------------
.text:0000042A
.text:0000042A loc_42A:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+3Bj
.text:0000042A                 lea     eax, [ebp+var_8+3]
.text:0000042D                 push    eax             ; bool *
.text:0000042E                 mov     ecx, [ebp+arg_4]
.text:00000431                 push    ecx             ; struct tagPROPVARIANT *
.text:00000432                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00000437                 mov     [ebp+var_10], eax
.text:0000043A                 cmp     [ebp+var_10], 0
.text:0000043E                 jz      short loc_445
.text:00000440                 mov     eax, [ebp+var_10]
.text:00000443                 jmp     short loc_48A
.text:00000445 ; ---------------------------------------------------------------------------
.text:00000445
.text:00000445 loc_445:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+5Ej
.text:00000445                 movzx   edx, [ebp+var_8+3]
.text:00000449                 test    edx, edx
.text:0000044B                 jz      short loc_455
.text:0000044D                 mov     eax, [ebp+arg_8]
.text:00000450                 mov     [ebp+var_18], eax
.text:00000453                 jmp     short loc_45C
.text:00000455 ; ---------------------------------------------------------------------------
.text:00000455
.text:00000455 loc_455:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+6Bj
.text:00000455                 mov     [ebp+var_18], 1
.text:0000045C
.text:0000045C loc_45C:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+73j
.text:0000045C                 mov     ecx, [ebp+arg_C]
.text:0000045F                 mov     edx, [ebp+var_18]
.text:00000462                 mov     [ecx], edx
.text:00000464
.text:00000464 loc_464:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+48j
.text:00000464                 xor     eax, eax
.text:00000466                 jmp     short loc_48A
.text:00000468 ; ---------------------------------------------------------------------------
.text:00000468
.text:00000468 loc_468:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+2Aj
.text:00000468                 mov     eax, [ebp+arg_4]
.text:0000046B                 movzx   ecx, word ptr [eax]
.text:0000046E                 test    ecx, ecx
.text:00000470                 jz      short loc_479
.text:00000472                 mov     eax, 80070057h
.text:00000477                 jmp     short loc_48A
.text:00000479 ; ---------------------------------------------------------------------------
.text:00000479
.text:00000479 loc_479:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+90j
.text:00000479                 mov     edx, [ebp+arg_C]
.text:0000047C                 push    edx             ; unsigned int *
.text:0000047D                 mov     eax, [ebp+arg_4]
.text:00000480                 push    eax             ; struct tagPROPVARIANT *
.text:00000481                 mov     ecx, [ebp+arg_0]
.text:00000484                 push    ecx             ; struct UString *
.text:00000485                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:0000048A
.text:0000048A loc_48A:                                ; CODE XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+63j
.text:0000048A                                         ; ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+86j ...
.text:0000048A                 push    edx
.text:0000048B                 mov     ecx, ebp
.text:0000048D                 push    eax
.text:0000048E                 lea     edx, $LN14
.text:00000494                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000499                 pop     eax
.text:0000049A                 pop     edx
.text:0000049B                 add     esp, 18h
.text:0000049E                 cmp     ebp, esp
.text:000004A0                 call    __RTC_CheckEsp
.text:000004A5                 mov     esp, ebp
.text:000004A7                 pop     ebp
.text:000004A8                 retn    10h
.text:000004A8 ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z endp
.text:000004A8
.text:000004A8 ; ---------------------------------------------------------------------------
.text:000004AB                 align 4
.text:000004AC $LN14           dd 1                    ; DATA XREF: ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)+AEo
.text:000004B0                 dd offset $LN13
.text:000004B4 $LN13           dd 0FFFFFFFBh, 1        ; DATA XREF: .text:000004B0o
.text:000004BC                 dd offset $LN12
.text:000004C0 $LN12           dd 6C6176h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000004BCo
.text:000004D0
.text:000004D0 ; =============== S U B R O U T I N E =======================================
.text:000004D0
.text:000004D0 ; Attributes: bp-based frame
.text:000004D0
.text:000004D0 ; void __thiscall CProps::AddProp32(CProps *this, unsigned __int32, unsigned int)
.text:000004D0                 public ?AddProp32@CProps@@QAEXKI@Z
.text:000004D0 ?AddProp32@CProps@@QAEXKI@Z proc near
.text:000004D0
.text:000004D0 var_8           = dword ptr -8
.text:000004D0 var_4           = dword ptr -4
.text:000004D0 arg_0           = dword ptr  8
.text:000004D0 arg_4           = dword ptr  0Ch
.text:000004D0
.text:000004D0                 push    ebp
.text:000004D1                 mov     ebp, esp
.text:000004D3                 sub     esp, 8
.text:000004D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004E4                 mov     [ebp+var_4], ecx
.text:000004E7                 mov     ecx, [ebp+var_4]
.text:000004EA                 call    ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ ; CObjectVector<CProp>::AddNew(void)
.text:000004EF                 mov     [ebp+var_8], eax
.text:000004F2                 mov     eax, [ebp+var_8]
.text:000004F5                 mov     byte ptr [eax+4], 1
.text:000004F9                 mov     ecx, [ebp+var_8]
.text:000004FC                 mov     edx, [ebp+arg_0]
.text:000004FF                 mov     [ecx], edx
.text:00000501                 mov     eax, [ebp+arg_4]
.text:00000504                 push    eax
.text:00000505                 mov     ecx, [ebp+var_8]
.text:00000508                 add     ecx, 8
.text:0000050B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000510                 add     esp, 8
.text:00000513                 cmp     ebp, esp
.text:00000515                 call    __RTC_CheckEsp
.text:0000051A                 mov     esp, ebp
.text:0000051C                 pop     ebp
.text:0000051D                 retn    8
.text:0000051D ?AddProp32@CProps@@QAEXKI@Z endp
.text:0000051D
.text:00000520
.text:00000520 ; =============== S U B R O U T I N E =======================================
.text:00000520
.text:00000520 ; Attributes: bp-based frame
.text:00000520
.text:00000520 ; void __thiscall CCoderProps::AddProp(CCoderProps *this, const struct CProp *)
.text:00000520                 public ?AddProp@CCoderProps@@QAEXABUCProp@@@Z
.text:00000520 ?AddProp@CCoderProps@@QAEXABUCProp@@@Z proc near
.text:00000520                                         ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+8Cp
.text:00000520                                         ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+C5p
.text:00000520
.text:00000520 var_8           = dword ptr -8
.text:00000520 var_4           = dword ptr -4
.text:00000520 arg_0           = dword ptr  8
.text:00000520
.text:00000520                 push    ebp
.text:00000521                 mov     ebp, esp
.text:00000523                 sub     esp, 8
.text:00000526                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000052D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000534                 mov     [ebp+var_4], ecx
.text:00000537                 mov     eax, [ebp+var_4]
.text:0000053A                 mov     ecx, [ebp+var_4]
.text:0000053D                 mov     edx, [eax+8]
.text:00000540                 cmp     edx, [ecx+0Ch]
.text:00000543                 jb      short loc_55A
.text:00000545                 mov     [ebp+var_8], 1
.text:0000054C                 push    offset __TI1H
.text:00000551                 lea     eax, [ebp+var_8]
.text:00000554                 push    eax
.text:00000555                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000055A ; ---------------------------------------------------------------------------
.text:0000055A
.text:0000055A loc_55A:                                ; CODE XREF: CCoderProps::AddProp(CProp const &)+23j
.text:0000055A                 mov     ecx, [ebp+var_4]
.text:0000055D                 mov     edx, [ecx+8]
.text:00000560                 mov     eax, [ebp+var_4]
.text:00000563                 mov     ecx, [eax]
.text:00000565                 mov     eax, [ebp+arg_0]
.text:00000568                 mov     eax, [eax]
.text:0000056A                 mov     [ecx+edx*4], eax
.text:0000056D                 mov     ecx, [ebp+arg_0]
.text:00000570                 add     ecx, 8
.text:00000573                 push    ecx
.text:00000574                 mov     edx, [ebp+var_4]
.text:00000577                 mov     ecx, [edx+8]
.text:0000057A                 shl     ecx, 4
.text:0000057D                 mov     eax, [ebp+var_4]
.text:00000580                 add     ecx, [eax+4]
.text:00000583                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z ; NWindows::NCOM::CPropVariant::operator=(NWindows::NCOM::CPropVariant const &)
.text:00000588                 mov     ecx, [ebp+var_4]
.text:0000058B                 mov     edx, [ecx+8]
.text:0000058E                 add     edx, 1
.text:00000591                 mov     eax, [ebp+var_4]
.text:00000594                 mov     [eax+8], edx
.text:00000597                 add     esp, 8
.text:0000059A                 cmp     ebp, esp
.text:0000059C                 call    __RTC_CheckEsp
.text:000005A1                 mov     esp, ebp
.text:000005A3                 pop     ebp
.text:000005A4                 retn    4
.text:000005A4 ?AddProp@CCoderProps@@QAEXABUCProp@@@Z endp
.text:000005A4
.text:000005A4 ; ---------------------------------------------------------------------------
.text:000005A7                 align 10h
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; __int32 __thiscall CProps::SetCoderProps(CProps *this, struct ICompressSetCoderProperties *, const unsigned __int64 *)
.text:000005B0                 public ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z
.text:000005B0 ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z proc near
.text:000005B0
.text:000005B0 var_50          = dword ptr -50h
.text:000005B0 var_48          = dword ptr -48h
.text:000005B0 var_40          = byte ptr -40h
.text:000005B0 var_2C          = dword ptr -2Ch
.text:000005B0 var_24          = byte ptr -24h
.text:000005B0 var_10          = dword ptr -10h
.text:000005B0 var_C           = dword ptr -0Ch
.text:000005B0 var_4           = dword ptr -4
.text:000005B0 arg_0           = dword ptr  8
.text:000005B0 arg_4           = dword ptr  0Ch
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 push    0FFFFFFFFh
.text:000005B5                 push    offset __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z
.text:000005BA                 mov     eax, large fs:0
.text:000005C0                 push    eax
.text:000005C1                 sub     esp, 44h
.text:000005C4                 push    edi
.text:000005C5                 push    ecx
.text:000005C6                 lea     edi, [ebp+var_50]
.text:000005C9                 mov     ecx, 11h
.text:000005CE                 mov     eax, 0CCCCCCCCh
.text:000005D3                 rep stosd
.text:000005D5                 pop     ecx
.text:000005D6                 mov     eax, dword ptr ds:___security_cookie
.text:000005DB                 xor     eax, ebp
.text:000005DD                 push    eax
.text:000005DE                 lea     eax, [ebp+var_C]
.text:000005E1                 mov     large fs:0, eax
.text:000005E7                 mov     [ebp+var_10], ecx
.text:000005EA                 mov     ecx, [ebp+var_10]
.text:000005ED                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:000005F2                 xor     ecx, ecx
.text:000005F4                 cmp     [ebp+arg_4], 0
.text:000005F8                 setnz   cl
.text:000005FB                 add     eax, ecx
.text:000005FD                 push    eax
.text:000005FE                 lea     ecx, [ebp+var_24]
.text:00000601                 call    ??0CCoderProps@@QAE@I@Z ; CCoderProps::CCoderProps(uint)
.text:00000606                 mov     [ebp+var_4], 0
.text:0000060D                 mov     [ebp+var_2C], 0
.text:00000614                 jmp     short loc_61F
.text:00000616 ; ---------------------------------------------------------------------------
.text:00000616
.text:00000616 loc_616:                                ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+91j
.text:00000616                 mov     edx, [ebp+var_2C]
.text:00000619                 add     edx, 1
.text:0000061C                 mov     [ebp+var_2C], edx
.text:0000061F
.text:0000061F loc_61F:                                ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+64j
.text:0000061F                 mov     ecx, [ebp+var_10]
.text:00000622                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:00000627                 cmp     [ebp+var_2C], eax
.text:0000062A                 jnb     short loc_643
.text:0000062C                 mov     eax, [ebp+var_2C]
.text:0000062F                 push    eax
.text:00000630                 mov     ecx, [ebp+var_10]
.text:00000633                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00000638                 push    eax             ; struct CProp *
.text:00000639                 lea     ecx, [ebp+var_24] ; this
.text:0000063C                 call    ?AddProp@CCoderProps@@QAEXABUCProp@@@Z ; CCoderProps::AddProp(CProp const &)
.text:00000641                 jmp     short loc_616
.text:00000643 ; ---------------------------------------------------------------------------
.text:00000643
.text:00000643 loc_643:                                ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+7Aj
.text:00000643                 cmp     [ebp+arg_4], 0
.text:00000647                 jz      short loc_686
.text:00000649                 lea     ecx, [ebp+var_48] ; this
.text:0000064C                 call    ??0CProp@@QAE@XZ ; CProp::CProp(void)
.text:00000651                 mov     byte ptr [ebp+var_4], 1
.text:00000655                 mov     [ebp+var_48], 10h
.text:0000065C                 mov     ecx, [ebp+arg_4]
.text:0000065F                 mov     edx, [ecx+4]
.text:00000662                 push    edx
.text:00000663                 mov     eax, [ecx]
.text:00000665                 push    eax
.text:00000666                 lea     ecx, [ebp+var_40]
.text:00000669                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:0000066E                 lea     ecx, [ebp+var_48]
.text:00000671                 push    ecx             ; struct CProp *
.text:00000672                 lea     ecx, [ebp+var_24] ; this
.text:00000675                 call    ?AddProp@CCoderProps@@QAEXABUCProp@@@Z ; CCoderProps::AddProp(CProp const &)
.text:0000067A                 mov     byte ptr [ebp+var_4], 0
.text:0000067E                 lea     ecx, [ebp+var_48] ; this
.text:00000681                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00000686
.text:00000686 loc_686:                                ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+97j
.text:00000686                 mov     edx, [ebp+arg_0]
.text:00000689                 push    edx             ; struct ICompressSetCoderProperties *
.text:0000068A                 lea     ecx, [ebp+var_24] ; this
.text:0000068D                 call    ?SetProps@CCoderProps@@QAEJPAUICompressSetCoderProperties@@@Z ; CCoderProps::SetProps(ICompressSetCoderProperties *)
.text:00000692                 mov     [ebp+var_50], eax
.text:00000695                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000069C                 lea     ecx, [ebp+var_24] ; this
.text:0000069F                 call    ??1CCoderProps@@QAE@XZ ; CCoderProps::~CCoderProps(void)
.text:000006A4                 mov     eax, [ebp+var_50]
.text:000006A7                 push    edx
.text:000006A8                 mov     ecx, ebp
.text:000006AA                 push    eax
.text:000006AB                 lea     edx, $LN13_0
.text:000006B1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000006B6                 pop     eax
.text:000006B7                 pop     edx
.text:000006B8                 mov     ecx, [ebp+var_C]
.text:000006BB                 mov     large fs:0, ecx
.text:000006C2                 pop     ecx
.text:000006C3                 pop     edi
.text:000006C4                 add     esp, 50h
.text:000006C7                 cmp     ebp, esp
.text:000006C9                 call    __RTC_CheckEsp
.text:000006CE                 mov     esp, ebp
.text:000006D0                 pop     ebp
.text:000006D1                 retn    8
.text:000006D1 ?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z endp
.text:000006D1
.text:000006D1 ; ---------------------------------------------------------------------------
.text:000006D4 $LN13_0         dd 2                    ; DATA XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+FBo
.text:000006D8                 dd offset $LN12_0
.text:000006DC $LN12_0         dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:000006D8o
.text:000006E4                 dd offset $LN9_0        ; "coderProps"
.text:000006E8                 dd 0FFFFFFB8h, 18h
.text:000006F0                 dd offset $LN10_0       ; "prop"
.text:000006F4 $LN10_0         db 'prop',0             ; DATA XREF: .text:000006F0o
.text:000006F9 $LN9_0          db 'coderProps',0       ; DATA XREF: .text:000006E4o
.text:00000704                 align 10h
.text:00000710
.text:00000710 ; =============== S U B R O U T I N E =======================================
.text:00000710
.text:00000710 ; Attributes: bp-based frame
.text:00000710
.text:00000710 ; int __thiscall CMethodProps::FindProp(CMethodProps *this, unsigned __int32)
.text:00000710                 public ?FindProp@CMethodProps@@QBEHK@Z
.text:00000710 ?FindProp@CMethodProps@@QBEHK@Z proc near
.text:00000710                                         ; CODE XREF: CMethodProps::GetLevel(void)+1Fp
.text:00000710
.text:00000710 var_8           = dword ptr -8
.text:00000710 var_4           = dword ptr -4
.text:00000710 arg_0           = dword ptr  8
.text:00000710
.text:00000710                 push    ebp
.text:00000711                 mov     ebp, esp
.text:00000713                 sub     esp, 8
.text:00000716                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000071D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000724                 mov     [ebp+var_4], ecx
.text:00000727                 mov     ecx, [ebp+var_4]
.text:0000072A                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:0000072F                 sub     eax, 1
.text:00000732                 mov     [ebp+var_8], eax
.text:00000735                 jmp     short loc_740
.text:00000737 ; ---------------------------------------------------------------------------
.text:00000737
.text:00000737 loc_737:                                ; CODE XREF: CMethodProps::FindProp(ulong):loc_75Ej
.text:00000737                 mov     eax, [ebp+var_8]
.text:0000073A                 sub     eax, 1
.text:0000073D                 mov     [ebp+var_8], eax
.text:00000740
.text:00000740 loc_740:                                ; CODE XREF: CMethodProps::FindProp(ulong)+25j
.text:00000740                 cmp     [ebp+var_8], 0
.text:00000744                 jl      short loc_760
.text:00000746                 mov     ecx, [ebp+var_8]
.text:00000749                 push    ecx
.text:0000074A                 mov     ecx, [ebp+var_4]
.text:0000074D                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00000752                 mov     edx, [eax]
.text:00000754                 cmp     edx, [ebp+arg_0]
.text:00000757                 jnz     short loc_75E
.text:00000759                 mov     eax, [ebp+var_8]
.text:0000075C                 jmp     short loc_763
.text:0000075E ; ---------------------------------------------------------------------------
.text:0000075E
.text:0000075E loc_75E:                                ; CODE XREF: CMethodProps::FindProp(ulong)+47j
.text:0000075E                 jmp     short loc_737
.text:00000760 ; ---------------------------------------------------------------------------
.text:00000760
.text:00000760 loc_760:                                ; CODE XREF: CMethodProps::FindProp(ulong)+34j
.text:00000760                 or      eax, 0FFFFFFFFh
.text:00000763
.text:00000763 loc_763:                                ; CODE XREF: CMethodProps::FindProp(ulong)+4Cj
.text:00000763                 add     esp, 8
.text:00000766                 cmp     ebp, esp
.text:00000768                 call    __RTC_CheckEsp
.text:0000076D                 mov     esp, ebp
.text:0000076F                 pop     ebp
.text:00000770                 retn    4
.text:00000770 ?FindProp@CMethodProps@@QBEHK@Z endp
.text:00000770
.text:00000770 ; ---------------------------------------------------------------------------
.text:00000773                 align 10h
.text:00000780
.text:00000780 ; =============== S U B R O U T I N E =======================================
.text:00000780
.text:00000780 ; Attributes: bp-based frame
.text:00000780
.text:00000780 ; int __thiscall CMethodProps::GetLevel(CMethodProps *__hidden this)
.text:00000780                 public ?GetLevel@CMethodProps@@QBEHXZ
.text:00000780 ?GetLevel@CMethodProps@@QBEHXZ proc near
.text:00000780
.text:00000780 var_10          = dword ptr -10h
.text:00000780 var_C           = dword ptr -0Ch
.text:00000780 var_8           = dword ptr -8
.text:00000780 var_4           = dword ptr -4
.text:00000780
.text:00000780                 push    ebp
.text:00000781                 mov     ebp, esp
.text:00000783                 sub     esp, 10h
.text:00000786                 mov     eax, 0CCCCCCCCh
.text:0000078B                 mov     [ebp+var_10], eax
.text:0000078E                 mov     [ebp+var_C], eax
.text:00000791                 mov     [ebp+var_8], eax
.text:00000794                 mov     [ebp+var_4], eax
.text:00000797                 mov     [ebp+var_4], ecx
.text:0000079A                 push    0Fh             ; unsigned __int32
.text:0000079C                 mov     ecx, [ebp+var_4] ; this
.text:0000079F                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:000007A4                 mov     [ebp+var_8], eax
.text:000007A7                 cmp     [ebp+var_8], 0
.text:000007AB                 jge     short loc_7B4
.text:000007AD                 mov     eax, 5
.text:000007B2                 jmp     short loc_7FA
.text:000007B4 ; ---------------------------------------------------------------------------
.text:000007B4
.text:000007B4 loc_7B4:                                ; CODE XREF: CMethodProps::GetLevel(void)+2Bj
.text:000007B4                 mov     eax, [ebp+var_8]
.text:000007B7                 push    eax
.text:000007B8                 mov     ecx, [ebp+var_4]
.text:000007BB                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000007C0                 movzx   ecx, word ptr [eax+8]
.text:000007C4                 cmp     ecx, 13h
.text:000007C7                 jz      short loc_7D0
.text:000007C9                 mov     eax, 9
.text:000007CE                 jmp     short loc_7FA
.text:000007D0 ; ---------------------------------------------------------------------------
.text:000007D0
.text:000007D0 loc_7D0:                                ; CODE XREF: CMethodProps::GetLevel(void)+47j
.text:000007D0                 mov     edx, [ebp+var_8]
.text:000007D3                 push    edx
.text:000007D4                 mov     ecx, [ebp+var_4]
.text:000007D7                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:000007DC                 mov     eax, [eax+10h]
.text:000007DF                 mov     [ebp+var_C], eax
.text:000007E2                 cmp     [ebp+var_C], 9
.text:000007E6                 jbe     short loc_7F1
.text:000007E8                 mov     [ebp+var_10], 9
.text:000007EF                 jmp     short loc_7F7
.text:000007F1 ; ---------------------------------------------------------------------------
.text:000007F1
.text:000007F1 loc_7F1:                                ; CODE XREF: CMethodProps::GetLevel(void)+66j
.text:000007F1                 mov     ecx, [ebp+var_C]
.text:000007F4                 mov     [ebp+var_10], ecx
.text:000007F7
.text:000007F7 loc_7F7:                                ; CODE XREF: CMethodProps::GetLevel(void)+6Fj
.text:000007F7                 mov     eax, [ebp+var_10]
.text:000007FA
.text:000007FA loc_7FA:                                ; CODE XREF: CMethodProps::GetLevel(void)+32j
.text:000007FA                                         ; CMethodProps::GetLevel(void)+4Ej
.text:000007FA                 add     esp, 10h
.text:000007FD                 cmp     ebp, esp
.text:000007FF                 call    __RTC_CheckEsp
.text:00000804                 mov     esp, ebp
.text:00000806                 pop     ebp
.text:00000807                 retn
.text:00000807 ?GetLevel@CMethodProps@@QBEHXZ endp
.text:00000807
.text:00000807 ; ---------------------------------------------------------------------------
.text:00000808                 align 10h
.text:00000810
.text:00000810 ; =============== S U B R O U T I N E =======================================
.text:00000810
.text:00000810 ; Attributes: bp-based frame
.text:00000810
.text:00000810 ; __int32 __thiscall CMethodProps::SetParam(CMethodProps *this, const struct UString *, const struct UString *)
.text:00000810                 public ?SetParam@CMethodProps@@AAEJABVUString@@0@Z
.text:00000810 ?SetParam@CMethodProps@@AAEJABVUString@@0@Z proc near
.text:00000810                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+BCp
.text:00000810                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+91p
.text:00000810
.text:00000810 var_88          = dword ptr -88h
.text:00000810 var_84          = dword ptr -84h
.text:00000810 var_80          = dword ptr -80h
.text:00000810 var_7C          = dword ptr -7Ch
.text:00000810 var_74          = dword ptr -74h
.text:00000810 var_65          = byte ptr -65h
.text:00000810 var_5C          = tagPROPVARIANT ptr -5Ch
.text:00000810 var_48          = dword ptr -48h
.text:00000810 var_40          = dword ptr -40h
.text:00000810 var_34          = dword ptr -34h
.text:00000810 var_2C          = dword ptr -2Ch
.text:00000810 var_18          = dword ptr -18h
.text:00000810 var_14          = dword ptr -14h
.text:00000810 var_10          = dword ptr -10h
.text:00000810 var_C           = dword ptr -0Ch
.text:00000810 var_4           = dword ptr -4
.text:00000810 arg_0           = dword ptr  8
.text:00000810 arg_4           = dword ptr  0Ch
.text:00000810
.text:00000810                 push    ebp
.text:00000811                 mov     ebp, esp
.text:00000813                 push    0FFFFFFFFh
.text:00000815                 push    offset __ehhandler$?SetParam@CMethodProps@@AAEJABVUString@@0@Z
.text:0000081A                 mov     eax, large fs:0
.text:00000820                 push    eax
.text:00000821                 sub     esp, 7Ch
.text:00000824                 push    esi
.text:00000825                 push    edi
.text:00000826                 push    ecx
.text:00000827                 lea     edi, [ebp+var_88]
.text:0000082D                 mov     ecx, 1Fh
.text:00000832                 mov     eax, 0CCCCCCCCh
.text:00000837                 rep stosd
.text:00000839                 pop     ecx
.text:0000083A                 mov     eax, dword ptr ds:___security_cookie
.text:0000083F                 xor     eax, ebp
.text:00000841                 push    eax
.text:00000842                 lea     eax, [ebp+var_C]
.text:00000845                 mov     large fs:0, eax
.text:0000084B                 mov     [ebp+var_10], ecx
.text:0000084E                 mov     eax, [ebp+arg_0]
.text:00000851                 push    eax
.text:00000852                 call    ?FindPropIdExact@@YGHABVUString@@@Z ; FindPropIdExact(UString const &)
.text:00000857                 mov     [ebp+var_14], eax
.text:0000085A                 cmp     [ebp+var_14], 0
.text:0000085E                 jge     short loc_86A
.text:00000860                 mov     eax, 80070057h
.text:00000865                 jmp     loc_A23
.text:0000086A ; ---------------------------------------------------------------------------
.text:0000086A
.text:0000086A loc_86A:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+4Ej
.text:0000086A                 mov     ecx, [ebp+var_14]
.text:0000086D                 lea     edx, _g_NameToPropID[ecx*8]
.text:00000874                 mov     [ebp+var_18], edx
.text:00000877                 lea     ecx, [ebp+var_34] ; this
.text:0000087A                 call    ??0CProp@@QAE@XZ ; CProp::CProp(void)
.text:0000087F                 mov     [ebp+var_4], 0
.text:00000886                 mov     eax, [ebp+var_14]
.text:00000889                 mov     [ebp+var_34], eax
.text:0000088C                 mov     ecx, [ebp+var_34]
.text:0000088F                 push    ecx
.text:00000890                 call    ?IsLogSizeProp@@YG_NK@Z ; IsLogSizeProp(ulong)
.text:00000895                 movzx   edx, al
.text:00000898                 test    edx, edx
.text:0000089A                 jz      short loc_8E0
.text:0000089C                 lea     eax, [ebp+var_40]
.text:0000089F                 push    eax             ; int
.text:000008A0                 mov     ecx, [ebp+arg_4]
.text:000008A3                 push    ecx             ; UString *
.text:000008A4                 call    ?StringToDictSize@@YGJABVUString@@AAI@Z ; StringToDictSize(UString const &,uint &)
.text:000008A9                 mov     [ebp+var_48], eax
.text:000008AC                 cmp     [ebp+var_48], 0
.text:000008B0                 jz      short loc_8CF
.text:000008B2                 mov     edx, [ebp+var_48]
.text:000008B5                 mov     [ebp+var_7C], edx
.text:000008B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008BF                 lea     ecx, [ebp+var_34] ; this
.text:000008C2                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:000008C7                 mov     eax, [ebp+var_7C]
.text:000008CA                 jmp     loc_A23
.text:000008CF ; ---------------------------------------------------------------------------
.text:000008CF
.text:000008CF loc_8CF:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+A0j
.text:000008CF                 mov     eax, [ebp+var_40]
.text:000008D2                 push    eax
.text:000008D3                 lea     ecx, [ebp+var_2C]
.text:000008D6                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000008DB                 jmp     loc_9F8
.text:000008E0 ; ---------------------------------------------------------------------------
.text:000008E0
.text:000008E0 loc_8E0:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+8Aj
.text:000008E0                 lea     ecx, [ebp+var_5C] ; this
.text:000008E3                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000008E8                 mov     byte ptr [ebp+var_4], 1
.text:000008EC                 mov     ecx, [ebp+var_18]
.text:000008EF                 movzx   edx, word ptr [ecx]
.text:000008F2                 cmp     edx, 8
.text:000008F5                 jnz     short loc_908
.text:000008F7                 mov     eax, [ebp+arg_4]
.text:000008FA                 push    eax
.text:000008FB                 lea     ecx, [ebp+var_5C]
.text:000008FE                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000903                 jmp     loc_9A4
.text:00000908 ; ---------------------------------------------------------------------------
.text:00000908
.text:00000908 loc_908:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+E5j
.text:00000908                 mov     ecx, [ebp+var_18]
.text:0000090B                 movzx   edx, word ptr [ecx]
.text:0000090E                 cmp     edx, 0Bh
.text:00000911                 jnz     short loc_960
.text:00000913                 lea     eax, [ebp+var_65]
.text:00000916                 push    eax             ; bool *
.text:00000917                 mov     ecx, [ebp+arg_4]
.text:0000091A                 push    ecx             ; struct UString *
.text:0000091B                 call    ?StringToBool@@YG_NABVUString@@AA_N@Z ; StringToBool(UString const &,bool &)
.text:00000920                 movzx   edx, al
.text:00000923                 test    edx, edx
.text:00000925                 jnz     short loc_951
.text:00000927                 mov     [ebp+var_80], 80070057h
.text:0000092E                 mov     byte ptr [ebp+var_4], 0
.text:00000932                 lea     ecx, [ebp+var_5C] ; this
.text:00000935                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000093A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000941                 lea     ecx, [ebp+var_34] ; this
.text:00000944                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00000949                 mov     eax, [ebp+var_80]
.text:0000094C                 jmp     loc_A23
.text:00000951 ; ---------------------------------------------------------------------------
.text:00000951
.text:00000951 loc_951:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+115j
.text:00000951                 movzx   eax, [ebp+var_65]
.text:00000955                 push    eax
.text:00000956                 lea     ecx, [ebp+var_5C]
.text:00000959                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:0000095E                 jmp     short loc_9A4
.text:00000960 ; ---------------------------------------------------------------------------
.text:00000960
.text:00000960 loc_960:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+101j
.text:00000960                 mov     ecx, [ebp+arg_4] ; this
.text:00000963                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000968                 movzx   ecx, al
.text:0000096B                 test    ecx, ecx
.text:0000096D                 jnz     short loc_9A4
.text:0000096F                 lea     edx, [ebp+var_74]
.text:00000972                 push    edx             ; unsigned int *
.text:00000973                 mov     eax, [ebp+arg_4]
.text:00000976                 push    eax             ; struct UString *
.text:00000977                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:0000097C                 mov     esi, eax
.text:0000097E                 mov     ecx, [ebp+arg_4] ; this
.text:00000981                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000986                 cmp     esi, eax
.text:00000988                 jnz     short loc_998
.text:0000098A                 mov     ecx, [ebp+var_74]
.text:0000098D                 push    ecx
.text:0000098E                 lea     ecx, [ebp+var_5C]
.text:00000991                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000996                 jmp     short loc_9A4
.text:00000998 ; ---------------------------------------------------------------------------
.text:00000998
.text:00000998 loc_998:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+178j
.text:00000998                 mov     edx, [ebp+arg_4]
.text:0000099B                 push    edx
.text:0000099C                 lea     ecx, [ebp+var_5C]
.text:0000099F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000009A4
.text:000009A4 loc_9A4:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+F3j
.text:000009A4                                         ; CMethodProps::SetParam(UString const &,UString const &)+14Ej ...
.text:000009A4                 lea     eax, [ebp+var_2C]
.text:000009A7                 push    eax             ; int
.text:000009A8                 mov     ecx, [ebp+var_18]
.text:000009AB                 movzx   edx, word ptr [ecx]
.text:000009AE                 push    edx             ; __int16
.text:000009AF                 lea     eax, [ebp+var_5C]
.text:000009B2                 push    eax             ; struct tagPROPVARIANT *
.text:000009B3                 call    ?ConvertProperty@@YG_NABUtagPROPVARIANT@@GAAVCPropVariant@NCOM@NWindows@@@Z ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)
.text:000009B8                 movzx   ecx, al
.text:000009BB                 test    ecx, ecx
.text:000009BD                 jnz     short loc_9EC
.text:000009BF                 mov     [ebp+var_84], 80070057h
.text:000009C9                 mov     byte ptr [ebp+var_4], 0
.text:000009CD                 lea     ecx, [ebp+var_5C] ; this
.text:000009D0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000009D5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000009DC                 lea     ecx, [ebp+var_34] ; this
.text:000009DF                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:000009E4                 mov     eax, [ebp+var_84]
.text:000009EA                 jmp     short loc_A23
.text:000009EC ; ---------------------------------------------------------------------------
.text:000009EC
.text:000009EC loc_9EC:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+1ADj
.text:000009EC                 mov     byte ptr [ebp+var_4], 0
.text:000009F0                 lea     ecx, [ebp+var_5C] ; this
.text:000009F3                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000009F8
.text:000009F8 loc_9F8:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+CBj
.text:000009F8                 lea     edx, [ebp+var_34]
.text:000009FB                 push    edx
.text:000009FC                 mov     ecx, [ebp+var_10]
.text:000009FF                 call    ?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z ; CObjectVector<CProp>::Add(CProp const &)
.text:00000A04                 mov     [ebp+var_88], 0
.text:00000A0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A15                 lea     ecx, [ebp+var_34] ; this
.text:00000A18                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00000A1D                 mov     eax, [ebp+var_88]
.text:00000A23
.text:00000A23 loc_A23:                                ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+55j
.text:00000A23                                         ; CMethodProps::SetParam(UString const &,UString const &)+BAj ...
.text:00000A23                 push    edx
.text:00000A24                 mov     ecx, ebp
.text:00000A26                 push    eax
.text:00000A27                 lea     edx, $LN25
.text:00000A2D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A32                 pop     eax
.text:00000A33                 pop     edx
.text:00000A34                 mov     ecx, [ebp+var_C]
.text:00000A37                 mov     large fs:0, ecx
.text:00000A3E                 pop     ecx
.text:00000A3F                 pop     edi
.text:00000A40                 pop     esi
.text:00000A41                 add     esp, 88h
.text:00000A47                 cmp     ebp, esp
.text:00000A49                 call    __RTC_CheckEsp
.text:00000A4E                 mov     esp, ebp
.text:00000A50                 pop     ebp
.text:00000A51                 retn    8
.text:00000A51 ?SetParam@CMethodProps@@AAEJABVUString@@0@Z endp
.text:00000A51
.text:00000A51 ; ---------------------------------------------------------------------------
.text:00000A54 $LN25           dd 5                    ; DATA XREF: CMethodProps::SetParam(UString const &,UString const &)+217o
.text:00000A58                 dd offset $LN24
.text:00000A5C $LN24           db 0CCh                 ; DATA XREF: .text:00000A58o
.text:00000A5D                 db 3 dup(0FFh)
.text:00000A60                 dd 18h
.text:00000A64                 dd offset $LN18         ; "prop"
.text:00000A68                 dd 0FFFFFFC0h, 4
.text:00000A70                 dd offset $LN19         ; "dicSize"
.text:00000A74                 dd 0FFFFFFA4h, 10h
.text:00000A7C                 dd offset $LN20         ; "propValue"
.text:00000A80                 dd 0FFFFFF9Bh, 1
.text:00000A88                 dd offset $LN21         ; "res"
.text:00000A8C                 dd 0FFFFFF8Ch, 4
.text:00000A94                 dd offset $LN22         ; "number"
.text:00000A98 $LN22           db 'number',0           ; DATA XREF: .text:00000A94o
.text:00000A9F $LN21           db 'res',0              ; DATA XREF: .text:00000A88o
.text:00000AA3 $LN20           db 'propValue',0        ; DATA XREF: .text:00000A7Co
.text:00000AAD $LN19           db 'dicSize',0          ; DATA XREF: .text:00000A70o
.text:00000AB5 $LN18           db 'prop',0             ; DATA XREF: .text:00000A64o
.text:00000ABA                 align 10h
.text:00000AC0
.text:00000AC0 ; =============== S U B R O U T I N E =======================================
.text:00000AC0
.text:00000AC0 ; Attributes: bp-based frame
.text:00000AC0
.text:00000AC0 ; int __stdcall StringToDictSize(UString *, int)
.text:00000AC0 ?StringToDictSize@@YGJABVUString@@AAI@Z proc near
.text:00000AC0                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+94p
.text:00000AC0                                         ; PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+96p
.text:00000AC0
.text:00000AC0 var_20          = dword ptr -20h
.text:00000AC0 var_1C          = dword ptr -1Ch
.text:00000AC0 var_18          = dword ptr -18h
.text:00000AC0 var_14          = dword ptr -14h
.text:00000AC0 var_10          = dword ptr -10h
.text:00000AC0 var_C           = dword ptr -0Ch
.text:00000AC0 var_8           = dword ptr -8
.text:00000AC0 var_4           = dword ptr -4
.text:00000AC0 arg_0           = dword ptr  8
.text:00000AC0 arg_4           = dword ptr  0Ch
.text:00000AC0
.text:00000AC0                 push    ebp
.text:00000AC1                 mov     ebp, esp
.text:00000AC3                 sub     esp, 20h
.text:00000AC6                 mov     eax, 0CCCCCCCCh
.text:00000ACB                 mov     [ebp+var_20], eax
.text:00000ACE                 mov     [ebp+var_1C], eax
.text:00000AD1                 mov     [ebp+var_18], eax
.text:00000AD4                 mov     [ebp+var_14], eax
.text:00000AD7                 mov     [ebp+var_10], eax
.text:00000ADA                 mov     [ebp+var_C], eax
.text:00000ADD                 mov     [ebp+var_8], eax
.text:00000AE0                 mov     [ebp+var_4], eax
.text:00000AE3                 lea     eax, [ebp+var_8]
.text:00000AE6                 push    eax             ; wchar_t **
.text:00000AE7                 mov     ecx, [ebp+arg_0]
.text:00000AEA                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000AEF                 push    eax             ; wchar_t *
.text:00000AF0                 call    ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z ; ConvertStringToUInt32(wchar_t const *,wchar_t const * *)
.text:00000AF5                 mov     [ebp+var_10], eax
.text:00000AF8                 mov     ecx, [ebp+arg_0]
.text:00000AFB                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000B00                 mov     ecx, [ebp+var_8]
.text:00000B03                 sub     ecx, eax
.text:00000B05                 sar     ecx, 1
.text:00000B07                 mov     [ebp+var_14], ecx
.text:00000B0A                 jz      short loc_B1E
.text:00000B0C                 mov     ecx, [ebp+arg_0] ; this
.text:00000B0F                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000B14                 mov     edx, [ebp+var_14]
.text:00000B17                 add     edx, 1
.text:00000B1A                 cmp     eax, edx
.text:00000B1C                 jbe     short loc_B28
.text:00000B1E
.text:00000B1E loc_B1E:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+4Aj
.text:00000B1E                 mov     eax, 80070057h
.text:00000B23                 jmp     loc_BF5
.text:00000B28 ; ---------------------------------------------------------------------------
.text:00000B28
.text:00000B28 loc_B28:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+5Cj
.text:00000B28                 mov     [ebp+var_18], 20h ; ' '
.text:00000B2F                 mov     ecx, [ebp+arg_0] ; this
.text:00000B32                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000B37                 cmp     eax, [ebp+var_14]
.text:00000B3A                 jnz     short loc_B62
.text:00000B3C                 cmp     [ebp+var_10], 20h ; ' '
.text:00000B40                 jb      short loc_B4C
.text:00000B42                 mov     eax, 80070057h
.text:00000B47                 jmp     loc_BF5
.text:00000B4C ; ---------------------------------------------------------------------------
.text:00000B4C
.text:00000B4C loc_B4C:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+80j
.text:00000B4C                 mov     eax, 1
.text:00000B51                 mov     ecx, [ebp+var_10]
.text:00000B54                 shl     eax, cl
.text:00000B56                 mov     ecx, [ebp+arg_4]
.text:00000B59                 mov     [ecx], eax
.text:00000B5B                 xor     eax, eax
.text:00000B5D                 jmp     loc_BF5
.text:00000B62 ; ---------------------------------------------------------------------------
.text:00000B62
.text:00000B62 loc_B62:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+7Aj
.text:00000B62                 mov     ecx, [ebp+arg_0]
.text:00000B65                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000B6A                 mov     edx, [ebp+var_14]
.text:00000B6D                 movzx   eax, word ptr [eax+edx*2]
.text:00000B71                 push    eax             ; wchar_t
.text:00000B72                 call    ?MyCharLower_Ascii@@YG_W_W@Z ; MyCharLower_Ascii(wchar_t)
.text:00000B77                 movzx   ecx, ax
.text:00000B7A                 mov     [ebp+var_20], ecx
.text:00000B7D                 mov     edx, [ebp+var_20]
.text:00000B80                 sub     edx, 62h ; 'b'
.text:00000B83                 mov     [ebp+var_20], edx
.text:00000B86                 cmp     [ebp+var_20], 0Bh ; switch 12 cases
.text:00000B8A                 ja      short $LN2      ; jumptable 00000B96 default case
.text:00000B8C                 mov     eax, [ebp+var_20]
.text:00000B8F                 movzx   ecx, ds:$LN15[eax]
.text:00000B96                 jmp     ds:$LN19_0[ecx*4] ; switch jump
.text:00000B9D ; ---------------------------------------------------------------------------
.text:00000B9D
.text:00000B9D $LN6:                                   ; CODE XREF: StringToDictSize(UString const &,uint &)+D6j
.text:00000B9D                                         ; DATA XREF: .text:$LN19_0o
.text:00000B9D                 mov     edx, [ebp+arg_4] ; jumptable 00000B96 case 0
.text:00000BA0                 mov     eax, [ebp+var_10]
.text:00000BA3                 mov     [edx], eax
.text:00000BA5                 xor     eax, eax
.text:00000BA7                 jmp     short loc_BF5
.text:00000BA9 ; ---------------------------------------------------------------------------
.text:00000BA9
.text:00000BA9 $LN5_0:                                 ; CODE XREF: StringToDictSize(UString const &,uint &)+D6j
.text:00000BA9                                         ; DATA XREF: .text:$LN19_0o
.text:00000BA9                 mov     [ebp+var_1C], 0Ah ; jumptable 00000B96 case 9
.text:00000BB0                 jmp     short loc_BCB
.text:00000BB2 ; ---------------------------------------------------------------------------
.text:00000BB2
.text:00000BB2 $LN4_0:                                 ; CODE XREF: StringToDictSize(UString const &,uint &)+D6j
.text:00000BB2                                         ; DATA XREF: .text:$LN19_0o
.text:00000BB2                 mov     [ebp+var_1C], 14h ; jumptable 00000B96 case 11
.text:00000BB9                 jmp     short loc_BCB
.text:00000BBB ; ---------------------------------------------------------------------------
.text:00000BBB
.text:00000BBB $LN3_0:                                 ; CODE XREF: StringToDictSize(UString const &,uint &)+D6j
.text:00000BBB                                         ; DATA XREF: .text:$LN19_0o
.text:00000BBB                 mov     [ebp+var_1C], 1Eh ; jumptable 00000B96 case 5
.text:00000BC2                 jmp     short loc_BCB
.text:00000BC4 ; ---------------------------------------------------------------------------
.text:00000BC4
.text:00000BC4 $LN2:                                   ; CODE XREF: StringToDictSize(UString const &,uint &)+CAj
.text:00000BC4                                         ; StringToDictSize(UString const &,uint &)+D6j
.text:00000BC4                                         ; DATA XREF: ...
.text:00000BC4                 mov     eax, 80070057h  ; jumptable 00000B96 default case
.text:00000BC9                 jmp     short loc_BF5
.text:00000BCB ; ---------------------------------------------------------------------------
.text:00000BCB
.text:00000BCB loc_BCB:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+F0j
.text:00000BCB                                         ; StringToDictSize(UString const &,uint &)+F9j ...
.text:00000BCB                 mov     ecx, 20h ; ' '
.text:00000BD0                 sub     ecx, [ebp+var_1C]
.text:00000BD3                 mov     edx, 1
.text:00000BD8                 shl     edx, cl
.text:00000BDA                 cmp     [ebp+var_10], edx
.text:00000BDD                 jb      short loc_BE6
.text:00000BDF                 mov     eax, 80070057h
.text:00000BE4                 jmp     short loc_BF5
.text:00000BE6 ; ---------------------------------------------------------------------------
.text:00000BE6
.text:00000BE6 loc_BE6:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+11Dj
.text:00000BE6                 mov     eax, [ebp+var_10]
.text:00000BE9                 mov     ecx, [ebp+var_1C]
.text:00000BEC                 shl     eax, cl
.text:00000BEE                 mov     ecx, [ebp+arg_4]
.text:00000BF1                 mov     [ecx], eax
.text:00000BF3                 xor     eax, eax
.text:00000BF5
.text:00000BF5 loc_BF5:                                ; CODE XREF: StringToDictSize(UString const &,uint &)+63j
.text:00000BF5                                         ; StringToDictSize(UString const &,uint &)+87j ...
.text:00000BF5                 push    edx
.text:00000BF6                 mov     ecx, ebp
.text:00000BF8                 push    eax
.text:00000BF9                 lea     edx, $LN18_0
.text:00000BFF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C04                 pop     eax
.text:00000C05                 pop     edx
.text:00000C06                 add     esp, 20h
.text:00000C09                 cmp     ebp, esp
.text:00000C0B                 call    __RTC_CheckEsp
.text:00000C10                 mov     esp, ebp
.text:00000C12                 pop     ebp
.text:00000C13                 retn    8
.text:00000C13 ?StringToDictSize@@YGJABVUString@@AAI@Z endp
.text:00000C13
.text:00000C13 ; ---------------------------------------------------------------------------
.text:00000C16                 align 4
.text:00000C18 $LN18_0         dd 1                    ; DATA XREF: StringToDictSize(UString const &,uint &)+139o
.text:00000C1C                 dd offset $LN17
.text:00000C20 $LN17           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000C1Co
.text:00000C28                 dd offset $LN16
.text:00000C2C $LN16           dd 646E65h              ; DATA XREF: .text:00000C28o
.text:00000C30 $LN19_0         dd offset $LN6          ; DATA XREF: StringToDictSize(UString const &,uint &)+D6r
.text:00000C30                 dd offset $LN3_0        ; jump table for switch statement
.text:00000C30                 dd offset $LN5_0
.text:00000C30                 dd offset $LN4_0
.text:00000C30                 dd offset $LN2
.text:00000C44 $LN15           db      0,     4,     4,     4
.text:00000C44                                         ; DATA XREF: StringToDictSize(UString const &,uint &)+CFr
.text:00000C44                 db      4,     1,     4,     4 ; indirect table for switch statement
.text:00000C44                 db      4,     2,     4,     3
.text:00000C50
.text:00000C50 ; =============== S U B R O U T I N E =======================================
.text:00000C50
.text:00000C50 ; Attributes: bp-based frame
.text:00000C50
.text:00000C50 ; int __stdcall FindPropIdExact(class UString const &)
.text:00000C50 ?FindPropIdExact@@YGHABVUString@@@Z proc near
.text:00000C50                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+42p
.text:00000C50                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+C0p
.text:00000C50
.text:00000C50 var_4           = dword ptr -4
.text:00000C50 arg_0           = dword ptr  8
.text:00000C50
.text:00000C50                 push    ebp
.text:00000C51                 mov     ebp, esp
.text:00000C53                 push    ecx
.text:00000C54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C5B                 mov     [ebp+var_4], 0
.text:00000C62                 jmp     short loc_C6D
.text:00000C64 ; ---------------------------------------------------------------------------
.text:00000C64
.text:00000C64 loc_C64:                                ; CODE XREF: FindPropIdExact(UString const &):loc_C98j
.text:00000C64                 mov     eax, [ebp+var_4]
.text:00000C67                 add     eax, 1
.text:00000C6A                 mov     [ebp+var_4], eax
.text:00000C6D
.text:00000C6D loc_C6D:                                ; CODE XREF: FindPropIdExact(UString const &)+12j
.text:00000C6D                 cmp     [ebp+var_4], 11h
.text:00000C71                 jnb     short loc_C9A
.text:00000C73                 mov     ecx, [ebp+var_4]
.text:00000C76                 mov     edx, off_5C[ecx*8]
.text:00000C7D                 push    edx             ; char *
.text:00000C7E                 mov     ecx, [ebp+arg_0]
.text:00000C81                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000C86                 push    eax             ; wchar_t *
.text:00000C87                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:00000C8C                 movzx   eax, al
.text:00000C8F                 test    eax, eax
.text:00000C91                 jz      short loc_C98
.text:00000C93                 mov     eax, [ebp+var_4]
.text:00000C96                 jmp     short loc_C9D
.text:00000C98 ; ---------------------------------------------------------------------------
.text:00000C98
.text:00000C98 loc_C98:                                ; CODE XREF: FindPropIdExact(UString const &)+41j
.text:00000C98                 jmp     short loc_C64
.text:00000C9A ; ---------------------------------------------------------------------------
.text:00000C9A
.text:00000C9A loc_C9A:                                ; CODE XREF: FindPropIdExact(UString const &)+21j
.text:00000C9A                 or      eax, 0FFFFFFFFh
.text:00000C9D
.text:00000C9D loc_C9D:                                ; CODE XREF: FindPropIdExact(UString const &)+46j
.text:00000C9D                 add     esp, 4
.text:00000CA0                 cmp     ebp, esp
.text:00000CA2                 call    __RTC_CheckEsp
.text:00000CA7                 mov     esp, ebp
.text:00000CA9                 pop     ebp
.text:00000CAA                 retn    4
.text:00000CAA ?FindPropIdExact@@YGHABVUString@@@Z endp
.text:00000CAA
.text:00000CAA ; ---------------------------------------------------------------------------
.text:00000CAD                 align 10h
.text:00000CB0
.text:00000CB0 ; =============== S U B R O U T I N E =======================================
.text:00000CB0
.text:00000CB0 ; Attributes: bp-based frame
.text:00000CB0
.text:00000CB0 ; int __stdcall ConvertProperty(struct tagPROPVARIANT *, __int16, int)
.text:00000CB0 ?ConvertProperty@@YG_NABUtagPROPVARIANT@@GAAVCPropVariant@NCOM@NWindows@@@Z proc near
.text:00000CB0                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+1A3p
.text:00000CB0                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+157p
.text:00000CB0
.text:00000CB0 var_C           = dword ptr -0Ch
.text:00000CB0 var_8           = byte ptr -8
.text:00000CB0 var_4           = dword ptr -4
.text:00000CB0 arg_0           = dword ptr  8
.text:00000CB0 arg_4           = word ptr  0Ch
.text:00000CB0 arg_8           = dword ptr  10h
.text:00000CB0
.text:00000CB0                 push    ebp
.text:00000CB1                 mov     ebp, esp
.text:00000CB3                 sub     esp, 0Ch
.text:00000CB6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000CBD                 mov     dword ptr [ebp+var_8], 0CCCCCCCCh
.text:00000CC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CCB                 movzx   eax, [ebp+arg_4]
.text:00000CCF                 mov     ecx, [ebp+arg_0]
.text:00000CD2                 movzx   edx, word ptr [ecx]
.text:00000CD5                 cmp     eax, edx
.text:00000CD7                 jnz     short loc_CE9
.text:00000CD9                 mov     eax, [ebp+arg_0]
.text:00000CDC                 push    eax
.text:00000CDD                 mov     ecx, [ebp+arg_8]
.text:00000CE0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::operator=(tagPROPVARIANT const &)
.text:00000CE5                 mov     al, 1
.text:00000CE7                 jmp     short loc_D34
.text:00000CE9 ; ---------------------------------------------------------------------------
.text:00000CE9
.text:00000CE9 loc_CE9:                                ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+27j
.text:00000CE9                 movzx   ecx, [ebp+arg_4]
.text:00000CED                 cmp     ecx, 0Bh
.text:00000CF0                 jnz     short loc_D18
.text:00000CF2                 lea     edx, [ebp+var_8+3]
.text:00000CF5                 push    edx             ; bool *
.text:00000CF6                 mov     eax, [ebp+arg_0]
.text:00000CF9                 push    eax             ; struct tagPROPVARIANT *
.text:00000CFA                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:00000CFF                 test    eax, eax
.text:00000D01                 jz      short loc_D07
.text:00000D03                 xor     al, al
.text:00000D05                 jmp     short loc_D34
.text:00000D07 ; ---------------------------------------------------------------------------
.text:00000D07
.text:00000D07 loc_D07:                                ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+51j
.text:00000D07                 movzx   ecx, [ebp+var_8+3]
.text:00000D0B                 push    ecx
.text:00000D0C                 mov     ecx, [ebp+arg_8]
.text:00000D0F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000D14                 mov     al, 1
.text:00000D16                 jmp     short loc_D34
.text:00000D18 ; ---------------------------------------------------------------------------
.text:00000D18
.text:00000D18 loc_D18:                                ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+40j
.text:00000D18                 mov     edx, [ebp+arg_0]
.text:00000D1B                 movzx   eax, word ptr [edx]
.text:00000D1E                 test    eax, eax
.text:00000D20                 jnz     short loc_D32
.text:00000D22                 mov     ecx, [ebp+arg_0]
.text:00000D25                 push    ecx
.text:00000D26                 mov     ecx, [ebp+arg_8]
.text:00000D29                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::operator=(tagPROPVARIANT const &)
.text:00000D2E                 mov     al, 1
.text:00000D30                 jmp     short loc_D34
.text:00000D32 ; ---------------------------------------------------------------------------
.text:00000D32
.text:00000D32 loc_D32:                                ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+70j
.text:00000D32                 xor     al, al
.text:00000D34
.text:00000D34 loc_D34:                                ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+37j
.text:00000D34                                         ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+55j ...
.text:00000D34                 push    edx
.text:00000D35                 mov     ecx, ebp
.text:00000D37                 push    eax
.text:00000D38                 lea     edx, $LN9_1
.text:00000D3E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D43                 pop     eax
.text:00000D44                 pop     edx
.text:00000D45                 add     esp, 0Ch
.text:00000D48                 cmp     ebp, esp
.text:00000D4A                 call    __RTC_CheckEsp
.text:00000D4F                 mov     esp, ebp
.text:00000D51                 pop     ebp
.text:00000D52                 retn    0Ch
.text:00000D52 ?ConvertProperty@@YG_NABUtagPROPVARIANT@@GAAVCPropVariant@NCOM@NWindows@@@Z endp
.text:00000D52
.text:00000D52 ; ---------------------------------------------------------------------------
.text:00000D55                 align 4
.text:00000D58 $LN9_1          dd 1                    ; DATA XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+88o
.text:00000D5C                 dd offset $LN8_0
.text:00000D60 $LN8_0          dd 0FFFFFFFBh, 1        ; DATA XREF: .text:00000D5Co
.text:00000D68                 dd offset $LN7
.text:00000D6C ; ---------------------------------------------------------------------------
.text:00000D6C
.text:00000D6C $LN7:                                   ; DATA XREF: .text:00000D68o
.text:00000D6C                 jb      short loc_DD3
.text:00000D6E                 jnb     short $+2       ; IsLogSizeProp(ulong)
.text:00000D70
.text:00000D70 ; =============== S U B R O U T I N E =======================================
.text:00000D70
.text:00000D70 ; Attributes: bp-based frame
.text:00000D70
.text:00000D70 ; bool __stdcall IsLogSizeProp(unsigned long)
.text:00000D70 ?IsLogSizeProp@@YG_NK@Z proc near       ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+80p
.text:00000D70                                         ; .text:00000D6Ej ...
.text:00000D70
.text:00000D70 var_4           = dword ptr -4
.text:00000D70 arg_0           = dword ptr  8
.text:00000D70
.text:00000D70                 push    ebp
.text:00000D71                 mov     ebp, esp
.text:00000D73                 push    ecx
.text:00000D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D7B                 mov     eax, [ebp+arg_0]
.text:00000D7E                 mov     [ebp+var_4], eax
.text:00000D81                 mov     ecx, [ebp+var_4]
.text:00000D84                 sub     ecx, 1
.text:00000D87                 mov     [ebp+var_4], ecx
.text:00000D8A                 cmp     [ebp+var_4], 0Fh ; switch 16 cases
.text:00000D8E                 ja      short $LN2_0    ; jumptable 00000D9A default case
.text:00000D90                 mov     edx, [ebp+var_4]
.text:00000D93                 movzx   eax, ds:$LN6_0[edx]
.text:00000D9A                 jmp     ds:$LN7_0[eax*4] ; switch jump
.text:00000DA1 ; ---------------------------------------------------------------------------
.text:00000DA1
.text:00000DA1 $LN1:                                   ; CODE XREF: IsLogSizeProp(ulong)+2Aj
.text:00000DA1                                         ; DATA XREF: .text:$LN7_0o
.text:00000DA1                 mov     al, 1           ; jumptable 00000D9A cases 0,1,3,15
.text:00000DA3                 jmp     short loc_DA7
.text:00000DA5 ; ---------------------------------------------------------------------------
.text:00000DA5
.text:00000DA5 $LN2_0:                                 ; CODE XREF: IsLogSizeProp(ulong)+1Ej
.text:00000DA5                                         ; IsLogSizeProp(ulong)+2Aj
.text:00000DA5                                         ; DATA XREF: ...
.text:00000DA5                 xor     al, al          ; jumptable 00000D9A default case
.text:00000DA7
.text:00000DA7 loc_DA7:                                ; CODE XREF: IsLogSizeProp(ulong)+33j
.text:00000DA7                 mov     esp, ebp
.text:00000DA9                 pop     ebp
.text:00000DAA                 retn    4
.text:00000DAA ?IsLogSizeProp@@YG_NK@Z endp
.text:00000DAA
.text:00000DAA ; ---------------------------------------------------------------------------
.text:00000DAD                 align 10h
.text:00000DB0 $LN7_0          dd offset $LN1          ; DATA XREF: IsLogSizeProp(ulong)+2Ar
.text:00000DB0                 dd offset $LN2_0        ; jump table for switch statement
.text:00000DB8 $LN6_0          db      0,     0,     1,     0
.text:00000DB8                                         ; DATA XREF: IsLogSizeProp(ulong)+23r
.text:00000DB8                 db      1,     1,     1,     1 ; indirect table for switch statement
.text:00000DB8                 db      1,     1,     1,     1
.text:00000DB8                 db      1,     1,     1,     0
.text:00000DC8                 align 10h
.text:00000DD0
.text:00000DD0 ; =============== S U B R O U T I N E =======================================
.text:00000DD0
.text:00000DD0 ; Attributes: bp-based frame
.text:00000DD0
.text:00000DD0 ; __int32 __thiscall CMethodProps::ParseParamsFromString(CMethodProps *this, const struct UString *)
.text:00000DD0                 public ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z
.text:00000DD0 ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z proc near
.text:00000DD0                                         ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+FEp
.text:00000DD0
.text:00000DD0 var_60          = dword ptr -60h
.text:00000DD0 var_5C          = dword ptr -5Ch
.text:00000DD0 var_58          = dword ptr -58h
.text:00000DD0 var_50          = dword ptr -50h
.text:00000DD0 var_3C          = byte ptr -3Ch
.text:00000DD0 var_2C          = dword ptr -2Ch
.text:00000DD0 var_28          = dword ptr -28h
.text:00000DD0 var_20          = dword ptr -20h
.text:00000DD0 var_10          = dword ptr -10h
.text:00000DD0 var_C           = dword ptr -0Ch
.text:00000DD0 var_4           = dword ptr -4
.text:00000DD0 arg_0           = dword ptr  8
.text:00000DD0
.text:00000DD0                 push    ebp
.text:00000DD1                 mov     ebp, esp
.text:00000DD3
.text:00000DD3 loc_DD3:                                ; CODE XREF: .text:$LN7j
.text:00000DD3                 push    0FFFFFFFFh
.text:00000DD5                 push    offset __ehhandler$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z
.text:00000DDA                 mov     eax, large fs:0
.text:00000DE0                 push    eax
.text:00000DE1                 sub     esp, 54h
.text:00000DE4                 push    edi
.text:00000DE5                 push    ecx
.text:00000DE6                 lea     edi, [ebp+var_60]
.text:00000DE9                 mov     ecx, 15h
.text:00000DEE                 mov     eax, 0CCCCCCCCh
.text:00000DF3                 rep stosd
.text:00000DF5                 pop     ecx
.text:00000DF6                 mov     eax, dword ptr ds:___security_cookie
.text:00000DFB                 xor     eax, ebp
.text:00000DFD                 push    eax
.text:00000DFE                 lea     eax, [ebp+var_C]
.text:00000E01                 mov     large fs:0, eax
.text:00000E07                 mov     [ebp+var_10], ecx
.text:00000E0A                 lea     ecx, [ebp+var_20]
.text:00000E0D                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:00000E12                 mov     [ebp+var_4], 0
.text:00000E19                 lea     eax, [ebp+var_20]
.text:00000E1C                 push    eax             ; int
.text:00000E1D                 mov     ecx, [ebp+arg_0]
.text:00000E20                 push    ecx             ; UString *
.text:00000E21                 call    ?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitParams(UString const &,CObjectVector<UString> &)
.text:00000E26                 mov     [ebp+var_28], 0
.text:00000E2D                 jmp     short loc_E38
.text:00000E2F ; ---------------------------------------------------------------------------
.text:00000E2F
.text:00000E2F loc_E2F:                                ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+114j
.text:00000E2F                 mov     edx, [ebp+var_28]
.text:00000E32                 add     edx, 1
.text:00000E35                 mov     [ebp+var_28], edx
.text:00000E38
.text:00000E38 loc_E38:                                ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+5Dj
.text:00000E38                 lea     ecx, [ebp+var_20]
.text:00000E3B                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:00000E40                 cmp     [ebp+var_28], eax
.text:00000E43                 jnb     loc_EE9
.text:00000E49                 mov     eax, [ebp+var_28]
.text:00000E4C                 push    eax
.text:00000E4D                 lea     ecx, [ebp+var_20]
.text:00000E50                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:00000E55                 mov     [ebp+var_2C], eax
.text:00000E58                 lea     ecx, [ebp+var_3C]
.text:00000E5B                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000E60                 mov     byte ptr [ebp+var_4], 1
.text:00000E64                 lea     ecx, [ebp+var_50]
.text:00000E67                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000E6C                 mov     byte ptr [ebp+var_4], 2
.text:00000E70                 lea     ecx, [ebp+var_50]
.text:00000E73                 push    ecx             ; int
.text:00000E74                 lea     edx, [ebp+var_3C]
.text:00000E77                 push    edx             ; UString *
.text:00000E78                 mov     eax, [ebp+var_2C]
.text:00000E7B                 push    eax             ; UString *
.text:00000E7C                 call    ?SplitParam@@YGXABVUString@@AAV1@1@Z ; SplitParam(UString const &,UString &,UString &)
.text:00000E81                 lea     ecx, [ebp+var_50]
.text:00000E84                 push    ecx             ; struct UString *
.text:00000E85                 lea     edx, [ebp+var_3C]
.text:00000E88                 push    edx             ; struct UString *
.text:00000E89                 mov     ecx, [ebp+var_10] ; this
.text:00000E8C                 call    ?SetParam@CMethodProps@@AAEJABVUString@@0@Z ; CMethodProps::SetParam(UString const &,UString const &)
.text:00000E91                 mov     [ebp+var_58], eax
.text:00000E94                 cmp     [ebp+var_58], 0
.text:00000E98                 jz      short loc_ECC
.text:00000E9A                 mov     eax, [ebp+var_58]
.text:00000E9D                 mov     [ebp+var_5C], eax
.text:00000EA0                 mov     byte ptr [ebp+var_4], 1
.text:00000EA4                 lea     ecx, [ebp+var_50] ; this
.text:00000EA7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EAC                 mov     byte ptr [ebp+var_4], 0
.text:00000EB0                 lea     ecx, [ebp+var_3C] ; this
.text:00000EB3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EB8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EBF                 lea     ecx, [ebp+var_20]
.text:00000EC2                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00000EC7                 mov     eax, [ebp+var_5C]
.text:00000ECA                 jmp     short loc_F02
.text:00000ECC ; ---------------------------------------------------------------------------
.text:00000ECC
.text:00000ECC loc_ECC:                                ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+C8j
.text:00000ECC                 mov     byte ptr [ebp+var_4], 1
.text:00000ED0                 lea     ecx, [ebp+var_50] ; this
.text:00000ED3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000ED8                 mov     byte ptr [ebp+var_4], 0
.text:00000EDC                 lea     ecx, [ebp+var_3C] ; this
.text:00000EDF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000EE4                 jmp     loc_E2F
.text:00000EE9 ; ---------------------------------------------------------------------------
.text:00000EE9
.text:00000EE9 loc_EE9:                                ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+73j
.text:00000EE9                 mov     [ebp+var_60], 0
.text:00000EF0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000EF7                 lea     ecx, [ebp+var_20]
.text:00000EFA                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:00000EFF                 mov     eax, [ebp+var_60]
.text:00000F02
.text:00000F02 loc_F02:                                ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+FAj
.text:00000F02                 push    edx
.text:00000F03                 mov     ecx, ebp
.text:00000F05                 push    eax
.text:00000F06                 lea     edx, $LN15_0
.text:00000F0C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000F11                 pop     eax
.text:00000F12                 pop     edx
.text:00000F13                 mov     ecx, [ebp+var_C]
.text:00000F16                 mov     large fs:0, ecx
.text:00000F1D                 pop     ecx
.text:00000F1E                 pop     edi
.text:00000F1F                 add     esp, 60h
.text:00000F22                 cmp     ebp, esp
.text:00000F24                 call    __RTC_CheckEsp
.text:00000F29                 mov     esp, ebp
.text:00000F2B                 pop     ebp
.text:00000F2C                 retn    4
.text:00000F2C ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z endp
.text:00000F2C
.text:00000F2C ; ---------------------------------------------------------------------------
.text:00000F2F                 align 10h
.text:00000F30 $LN15_0         dd 3                    ; DATA XREF: CMethodProps::ParseParamsFromString(UString const &)+136o
.text:00000F34                 dd offset $LN14_0
.text:00000F38 $LN14_0         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000F34o
.text:00000F40                 dd offset $LN10_1       ; "params"
.text:00000F44                 dd 0FFFFFFC4h, 0Ch
.text:00000F4C                 dd offset $LN11         ; "name"
.text:00000F50                 dd 0FFFFFFB0h, 0Ch
.text:00000F58                 dd offset $LN12_1       ; "value"
.text:00000F5C $LN12_1         db 'value',0            ; DATA XREF: .text:00000F58o
.text:00000F62 $LN11           db 'name',0             ; DATA XREF: .text:00000F4Co
.text:00000F67 $LN10_1         db 'params',0           ; DATA XREF: .text:00000F40o
.text:00000F6E                 align 10h
.text:00000F70
.text:00000F70 ; =============== S U B R O U T I N E =======================================
.text:00000F70
.text:00000F70 ; Attributes: bp-based frame
.text:00000F70
.text:00000F70 ; int __stdcall SplitParams(UString *, int)
.text:00000F70 ?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z proc near
.text:00000F70                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+51p
.text:00000F70
.text:00000F70 var_2C          = dword ptr -2Ch
.text:00000F70 var_28          = dword ptr -28h
.text:00000F70 var_24          = dword ptr -24h
.text:00000F70 var_20          = dword ptr -20h
.text:00000F70 var_1C          = dword ptr -1Ch
.text:00000F70 var_18          = dword ptr -18h
.text:00000F70 var_14          = dword ptr -14h
.text:00000F70 var_10          = dword ptr -10h
.text:00000F70 var_C           = dword ptr -0Ch
.text:00000F70 var_4           = dword ptr -4
.text:00000F70 arg_0           = dword ptr  8
.text:00000F70 arg_4           = dword ptr  0Ch
.text:00000F70
.text:00000F70                 push    ebp
.text:00000F71                 mov     ebp, esp
.text:00000F73                 push    0FFFFFFFFh
.text:00000F75                 push    offset __ehhandler$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
.text:00000F7A                 mov     eax, large fs:0
.text:00000F80                 push    eax
.text:00000F81                 sub     esp, 20h
.text:00000F84                 mov     eax, 0CCCCCCCCh
.text:00000F89                 mov     [ebp+var_2C], eax
.text:00000F8C                 mov     [ebp+var_28], eax
.text:00000F8F                 mov     [ebp+var_24], eax
.text:00000F92                 mov     [ebp+var_20], eax
.text:00000F95                 mov     [ebp+var_1C], eax
.text:00000F98                 mov     [ebp+var_18], eax
.text:00000F9B                 mov     [ebp+var_14], eax
.text:00000F9E                 mov     [ebp+var_10], eax
.text:00000FA1                 mov     eax, dword ptr ds:___security_cookie
.text:00000FA6                 xor     eax, ebp
.text:00000FA8                 push    eax
.text:00000FA9                 lea     eax, [ebp+var_C]
.text:00000FAC                 mov     large fs:0, eax
.text:00000FB2                 mov     ecx, [ebp+arg_4]
.text:00000FB5                 call    ?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear(void)
.text:00000FBA                 lea     ecx, [ebp+var_1C]
.text:00000FBD                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000FC2                 mov     [ebp+var_4], 0
.text:00000FC9                 mov     ecx, [ebp+arg_0] ; this
.text:00000FCC                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00000FD1                 mov     [ebp+var_24], eax
.text:00000FD4                 cmp     [ebp+var_24], 0
.text:00000FD8                 jnz     short loc_FEB
.text:00000FDA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FE1                 lea     ecx, [ebp+var_1C] ; this
.text:00000FE4                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FE9                 jmp     short loc_1061
.text:00000FEB ; ---------------------------------------------------------------------------
.text:00000FEB
.text:00000FEB loc_FEB:                                ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+68j
.text:00000FEB                 mov     [ebp+var_28], 0
.text:00000FF2                 jmp     short loc_FFD
.text:00000FF4 ; ---------------------------------------------------------------------------
.text:00000FF4
.text:00000FF4 loc_FF4:                                ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &):loc_1044j
.text:00000FF4                 mov     eax, [ebp+var_28]
.text:00000FF7                 add     eax, 1
.text:00000FFA                 mov     [ebp+var_28], eax
.text:00000FFD
.text:00000FFD loc_FFD:                                ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+82j
.text:00000FFD                 mov     ecx, [ebp+var_28]
.text:00001000                 cmp     ecx, [ebp+var_24]
.text:00001003                 jge     short loc_1046
.text:00001005                 mov     ecx, [ebp+arg_0]
.text:00001008                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000100D                 mov     edx, [ebp+var_28]
.text:00001010                 mov     ax, [eax+edx*2]
.text:00001014                 mov     word ptr [ebp+var_2C], ax
.text:00001018                 movzx   ecx, word ptr [ebp+var_2C]
.text:0000101C                 cmp     ecx, 3Ah ; ':'
.text:0000101F                 jnz     short loc_1037
.text:00001021                 lea     edx, [ebp+var_1C]
.text:00001024                 push    edx
.text:00001025                 mov     ecx, [ebp+arg_4]
.text:00001028                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:0000102D                 lea     ecx, [ebp+var_1C] ; this
.text:00001030                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001035                 jmp     short loc_1044
.text:00001037 ; ---------------------------------------------------------------------------
.text:00001037
.text:00001037 loc_1037:                               ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+AFj
.text:00001037                 movzx   eax, word ptr [ebp+var_2C]
.text:0000103B                 push    eax
.text:0000103C                 lea     ecx, [ebp+var_1C]
.text:0000103F                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00001044
.text:00001044 loc_1044:                               ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+C5j
.text:00001044                 jmp     short loc_FF4
.text:00001046 ; ---------------------------------------------------------------------------
.text:00001046
.text:00001046 loc_1046:                               ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+93j
.text:00001046                 lea     ecx, [ebp+var_1C]
.text:00001049                 push    ecx
.text:0000104A                 mov     ecx, [ebp+arg_4]
.text:0000104D                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00001052                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001059                 lea     ecx, [ebp+var_1C] ; this
.text:0000105C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001061
.text:00001061 loc_1061:                               ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+79j
.text:00001061                 push    edx
.text:00001062                 mov     ecx, ebp
.text:00001064                 push    eax
.text:00001065                 lea     edx, $LN13_1
.text:0000106B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001070                 pop     eax
.text:00001071                 pop     edx
.text:00001072                 mov     ecx, [ebp+var_C]
.text:00001075                 mov     large fs:0, ecx
.text:0000107C                 pop     ecx
.text:0000107D                 add     esp, 2Ch
.text:00001080                 cmp     ebp, esp
.text:00001082                 call    __RTC_CheckEsp
.text:00001087                 mov     esp, ebp
.text:00001089                 pop     ebp
.text:0000108A                 retn    8
.text:0000108A ?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z endp
.text:0000108A
.text:0000108A ; ---------------------------------------------------------------------------
.text:0000108D                 align 10h
.text:00001090 $LN13_1         dd 1                    ; DATA XREF: SplitParams(UString const &,CObjectVector<UString> &)+F5o
.text:00001094                 dd offset $LN12_2
.text:00001098 $LN12_2         dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00001094o
.text:000010A0                 dd offset $LN10_2
.text:000010A4 $LN10_2         dd 0CCCC0073h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000010A0o
.text:000010B0
.text:000010B0 ; =============== S U B R O U T I N E =======================================
.text:000010B0
.text:000010B0 ; Attributes: bp-based frame
.text:000010B0
.text:000010B0 ; int __stdcall SplitParam(UString *, UString *, int)
.text:000010B0 ?SplitParam@@YGXABVUString@@AAV1@1@Z proc near
.text:000010B0                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+ACp
.text:000010B0                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+81p
.text:000010B0
.text:000010B0 var_C           = dword ptr -0Ch
.text:000010B0 var_8           = dword ptr -8
.text:000010B0 var_4           = dword ptr -4
.text:000010B0 arg_0           = dword ptr  8
.text:000010B0 arg_4           = dword ptr  0Ch
.text:000010B0 arg_8           = dword ptr  10h
.text:000010B0
.text:000010B0                 push    ebp
.text:000010B1                 mov     ebp, esp
.text:000010B3                 sub     esp, 0Ch
.text:000010B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000010BD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000010C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010CB                 push    3Dh ; '='       ; wchar_t
.text:000010CD                 mov     ecx, [ebp+arg_0] ; this
.text:000010D0                 call    ?Find@UString@@QBEH_W@Z ; UString::Find(wchar_t)
.text:000010D5                 mov     [ebp+var_4], eax
.text:000010D8                 cmp     [ebp+var_4], 0
.text:000010DC                 jl      short loc_110D
.text:000010DE                 mov     eax, [ebp+var_4]
.text:000010E1                 push    eax             ; unsigned int
.text:000010E2                 mov     ecx, [ebp+arg_0]
.text:000010E5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000010EA                 push    eax             ; wchar_t *
.text:000010EB                 mov     ecx, [ebp+arg_4] ; this
.text:000010EE                 call    ?SetFrom@UString@@QAEXPB_WI@Z ; UString::SetFrom(wchar_t const *,uint)
.text:000010F3                 mov     ecx, [ebp+var_4]
.text:000010F6                 add     ecx, 1
.text:000010F9                 push    ecx             ; unsigned int
.text:000010FA                 mov     ecx, [ebp+arg_0] ; this
.text:000010FD                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00001102                 push    eax
.text:00001103                 mov     ecx, [ebp+arg_8]
.text:00001106                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000110B                 jmp     short loc_117F
.text:0000110D ; ---------------------------------------------------------------------------
.text:0000110D
.text:0000110D loc_110D:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &)+2Cj
.text:0000110D                 mov     [ebp+var_8], 0
.text:00001114                 jmp     short loc_111F
.text:00001116 ; ---------------------------------------------------------------------------
.text:00001116
.text:00001116 loc_1116:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &):loc_1153j
.text:00001116                 mov     edx, [ebp+var_8]
.text:00001119                 add     edx, 1
.text:0000111C                 mov     [ebp+var_8], edx
.text:0000111F
.text:0000111F loc_111F:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &)+64j
.text:0000111F                 mov     ecx, [ebp+arg_0] ; this
.text:00001122                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001127                 cmp     [ebp+var_8], eax
.text:0000112A                 jnb     short loc_1155
.text:0000112C                 mov     ecx, [ebp+arg_0]
.text:0000112F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001134                 mov     ecx, [ebp+var_8]
.text:00001137                 mov     dx, [eax+ecx*2]
.text:0000113B                 mov     word ptr [ebp+var_C], dx
.text:0000113F                 movzx   eax, word ptr [ebp+var_C]
.text:00001143                 cmp     eax, 30h ; '0'
.text:00001146                 jl      short loc_1153
.text:00001148                 movzx   ecx, word ptr [ebp+var_C]
.text:0000114C                 cmp     ecx, 39h ; '9'
.text:0000114F                 jg      short loc_1153
.text:00001151                 jmp     short loc_1155
.text:00001153 ; ---------------------------------------------------------------------------
.text:00001153
.text:00001153 loc_1153:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &)+96j
.text:00001153                                         ; SplitParam(UString const &,UString &,UString &)+9Fj
.text:00001153                 jmp     short loc_1116
.text:00001155 ; ---------------------------------------------------------------------------
.text:00001155
.text:00001155 loc_1155:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &)+7Aj
.text:00001155                                         ; SplitParam(UString const &,UString &,UString &)+A1j
.text:00001155                 mov     edx, [ebp+var_8]
.text:00001158                 push    edx             ; unsigned int
.text:00001159                 mov     ecx, [ebp+arg_0]
.text:0000115C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001161                 push    eax             ; wchar_t *
.text:00001162                 mov     ecx, [ebp+arg_4] ; this
.text:00001165                 call    ?SetFrom@UString@@QAEXPB_WI@Z ; UString::SetFrom(wchar_t const *,uint)
.text:0000116A                 mov     eax, [ebp+var_8]
.text:0000116D                 push    eax             ; unsigned int
.text:0000116E                 mov     ecx, [ebp+arg_0] ; this
.text:00001171                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00001176                 push    eax
.text:00001177                 mov     ecx, [ebp+arg_8]
.text:0000117A                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:0000117F
.text:0000117F loc_117F:                               ; CODE XREF: SplitParam(UString const &,UString &,UString &)+5Bj
.text:0000117F                 add     esp, 0Ch
.text:00001182                 cmp     ebp, esp
.text:00001184                 call    __RTC_CheckEsp
.text:00001189                 mov     esp, ebp
.text:0000118B                 pop     ebp
.text:0000118C                 retn    0Ch
.text:0000118C ?SplitParam@@YGXABVUString@@AAV1@1@Z endp
.text:0000118C
.text:0000118C ; ---------------------------------------------------------------------------
.text:0000118F                 align 10h
.text:00001190
.text:00001190 ; =============== S U B R O U T I N E =======================================
.text:00001190
.text:00001190 ; Attributes: bp-based frame
.text:00001190
.text:00001190 ; __int32 __thiscall CMethodProps::ParseParamsFromPROPVARIANT(CMethodProps *this, const struct UString *, const struct tagPROPVARIANT *)
.text:00001190                 public ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text:00001190 ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z proc near
.text:00001190                                         ; CODE XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+70p
.text:00001190
.text:00001190 var_80          = dword ptr -80h
.text:00001190 var_7C          = dword ptr -7Ch
.text:00001190 var_78          = dword ptr -78h
.text:00001190 var_74          = dword ptr -74h
.text:00001190 var_70          = dword ptr -70h
.text:00001190 var_68          = dword ptr -68h
.text:00001190 var_5C          = dword ptr -5Ch
.text:00001190 var_54          = dword ptr -54h
.text:00001190 var_40          = dword ptr -40h
.text:00001190 var_3C          = dword ptr -3Ch
.text:00001190 var_34          = dword ptr -34h
.text:00001190 var_20          = byte ptr -20h
.text:00001190 var_10          = dword ptr -10h
.text:00001190 var_C           = dword ptr -0Ch
.text:00001190 var_4           = dword ptr -4
.text:00001190 arg_0           = dword ptr  8
.text:00001190 arg_4           = dword ptr  0Ch
.text:00001190
.text:00001190                 push    ebp
.text:00001191                 mov     ebp, esp
.text:00001193                 push    0FFFFFFFFh
.text:00001195                 push    offset __ehhandler$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text:0000119A                 mov     eax, large fs:0
.text:000011A0                 push    eax
.text:000011A1                 sub     esp, 74h
.text:000011A4                 push    edi
.text:000011A5                 push    ecx
.text:000011A6                 lea     edi, [ebp+var_80]
.text:000011A9                 mov     ecx, 1Dh
.text:000011AE                 mov     eax, 0CCCCCCCCh
.text:000011B3                 rep stosd
.text:000011B5                 pop     ecx
.text:000011B6                 mov     eax, dword ptr ds:___security_cookie
.text:000011BB                 xor     eax, ebp
.text:000011BD                 push    eax
.text:000011BE                 lea     eax, [ebp+var_C]
.text:000011C1                 mov     large fs:0, eax
.text:000011C7                 mov     [ebp+var_10], ecx
.text:000011CA                 mov     ecx, [ebp+arg_0] ; this
.text:000011CD                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000011D2                 test    eax, eax
.text:000011D4                 jnz     short loc_11E0
.text:000011D6                 mov     eax, 80070057h
.text:000011DB                 jmp     loc_1333
.text:000011E0 ; ---------------------------------------------------------------------------
.text:000011E0
.text:000011E0 loc_11E0:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+44j
.text:000011E0                 mov     eax, [ebp+arg_4]
.text:000011E3                 movzx   ecx, word ptr [eax]
.text:000011E6                 test    ecx, ecx
.text:000011E8                 jnz     short loc_124C
.text:000011EA                 lea     ecx, [ebp+var_20]
.text:000011ED                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000011F2                 mov     [ebp+var_4], 0
.text:000011F9                 lea     ecx, [ebp+var_34]
.text:000011FC                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00001201                 mov     byte ptr [ebp+var_4], 1
.text:00001205                 lea     edx, [ebp+var_34]
.text:00001208                 push    edx             ; int
.text:00001209                 lea     eax, [ebp+var_20]
.text:0000120C                 push    eax             ; UString *
.text:0000120D                 mov     ecx, [ebp+arg_0]
.text:00001210                 push    ecx             ; UString *
.text:00001211                 call    ?SplitParam@@YGXABVUString@@AAV1@1@Z ; SplitParam(UString const &,UString &,UString &)
.text:00001216                 lea     edx, [ebp+var_34]
.text:00001219                 push    edx             ; struct UString *
.text:0000121A                 lea     eax, [ebp+var_20]
.text:0000121D                 push    eax             ; struct UString *
.text:0000121E                 mov     ecx, [ebp+var_10] ; this
.text:00001221                 call    ?SetParam@CMethodProps@@AAEJABVUString@@0@Z ; CMethodProps::SetParam(UString const &,UString const &)
.text:00001226                 mov     [ebp+var_74], eax
.text:00001229                 mov     byte ptr [ebp+var_4], 0
.text:0000122D                 lea     ecx, [ebp+var_34] ; this
.text:00001230                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001235                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000123C                 lea     ecx, [ebp+var_20] ; this
.text:0000123F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001244                 mov     eax, [ebp+var_74]
.text:00001247                 jmp     loc_1333
.text:0000124C ; ---------------------------------------------------------------------------
.text:0000124C
.text:0000124C loc_124C:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+58j
.text:0000124C                 mov     ecx, [ebp+arg_0]
.text:0000124F                 push    ecx
.text:00001250                 call    ?FindPropIdExact@@YGHABVUString@@@Z ; FindPropIdExact(UString const &)
.text:00001255                 mov     [ebp+var_3C], eax
.text:00001258                 cmp     [ebp+var_3C], 0
.text:0000125C                 jge     short loc_1268
.text:0000125E                 mov     eax, 80070057h
.text:00001263                 jmp     loc_1333
.text:00001268 ; ---------------------------------------------------------------------------
.text:00001268
.text:00001268 loc_1268:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+CCj
.text:00001268                 mov     edx, [ebp+var_3C]
.text:0000126B                 lea     eax, _g_NameToPropID[edx*8]
.text:00001272                 mov     [ebp+var_40], eax
.text:00001275                 lea     ecx, [ebp+var_5C] ; this
.text:00001278                 call    ??0CProp@@QAE@XZ ; CProp::CProp(void)
.text:0000127D                 mov     [ebp+var_4], 2
.text:00001284                 mov     ecx, [ebp+var_3C]
.text:00001287                 mov     [ebp+var_5C], ecx
.text:0000128A                 mov     edx, [ebp+var_5C]
.text:0000128D                 push    edx
.text:0000128E                 call    ?IsLogSizeProp@@YG_NK@Z ; IsLogSizeProp(ulong)
.text:00001293                 movzx   eax, al
.text:00001296                 test    eax, eax
.text:00001298                 jz      short loc_12D8
.text:0000129A                 lea     ecx, [ebp+var_68]
.text:0000129D                 push    ecx
.text:0000129E                 mov     edx, [ebp+arg_4]
.text:000012A1                 push    edx
.text:000012A2                 call    ?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z ; PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)
.text:000012A7                 mov     [ebp+var_70], eax
.text:000012AA                 cmp     [ebp+var_70], 0
.text:000012AE                 jz      short loc_12CA
.text:000012B0                 mov     eax, [ebp+var_70]
.text:000012B3                 mov     [ebp+var_78], eax
.text:000012B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000012BD                 lea     ecx, [ebp+var_5C] ; this
.text:000012C0                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:000012C5                 mov     eax, [ebp+var_78]
.text:000012C8                 jmp     short loc_1333
.text:000012CA ; ---------------------------------------------------------------------------
.text:000012CA
.text:000012CA loc_12CA:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+11Ej
.text:000012CA                 mov     ecx, [ebp+var_68]
.text:000012CD                 push    ecx
.text:000012CE                 lea     ecx, [ebp+var_54]
.text:000012D1                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000012D6                 jmp     short loc_130E
.text:000012D8 ; ---------------------------------------------------------------------------
.text:000012D8
.text:000012D8 loc_12D8:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+108j
.text:000012D8                 lea     edx, [ebp+var_54]
.text:000012DB                 push    edx             ; int
.text:000012DC                 mov     eax, [ebp+var_40]
.text:000012DF                 movzx   ecx, word ptr [eax]
.text:000012E2                 push    ecx             ; __int16
.text:000012E3                 mov     edx, [ebp+arg_4]
.text:000012E6                 push    edx             ; struct tagPROPVARIANT *
.text:000012E7                 call    ?ConvertProperty@@YG_NABUtagPROPVARIANT@@GAAVCPropVariant@NCOM@NWindows@@@Z ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)
.text:000012EC                 movzx   eax, al
.text:000012EF                 test    eax, eax
.text:000012F1                 jnz     short loc_130E
.text:000012F3                 mov     [ebp+var_7C], 80070057h
.text:000012FA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001301                 lea     ecx, [ebp+var_5C] ; this
.text:00001304                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00001309                 mov     eax, [ebp+var_7C]
.text:0000130C                 jmp     short loc_1333
.text:0000130E ; ---------------------------------------------------------------------------
.text:0000130E
.text:0000130E loc_130E:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+146j
.text:0000130E                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+161j
.text:0000130E                 lea     ecx, [ebp+var_5C]
.text:00001311                 push    ecx
.text:00001312                 mov     ecx, [ebp+var_10]
.text:00001315                 call    ?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z ; CObjectVector<CProp>::Add(CProp const &)
.text:0000131A                 mov     [ebp+var_80], 0
.text:00001321                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001328                 lea     ecx, [ebp+var_5C] ; this
.text:0000132B                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:00001330                 mov     eax, [ebp+var_80]
.text:00001333
.text:00001333 loc_1333:                               ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+4Bj
.text:00001333                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+B7j ...
.text:00001333                 push    edx
.text:00001334                 mov     ecx, ebp
.text:00001336                 push    eax
.text:00001337                 lea     edx, $LN19_1
.text:0000133D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001342                 pop     eax
.text:00001343                 pop     edx
.text:00001344                 mov     ecx, [ebp+var_C]
.text:00001347                 mov     large fs:0, ecx
.text:0000134E                 pop     ecx
.text:0000134F                 pop     edi
.text:00001350                 add     esp, 80h
.text:00001356                 cmp     ebp, esp
.text:00001358                 call    __RTC_CheckEsp
.text:0000135D                 mov     esp, ebp
.text:0000135F                 pop     ebp
.text:00001360                 retn    8
.text:00001360 ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z endp
.text:00001360
.text:00001360 ; ---------------------------------------------------------------------------
.text:00001363                 align 4
.text:00001364 $LN19_1         dd 4                    ; DATA XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+1A7o
.text:00001368                 dd offset $LN18_1
.text:0000136C $LN18_1         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001368o
.text:00001374                 dd offset $LN13_2       ; "name"
.text:00001378                 db 0CCh
.text:00001379                 db 3 dup(0FFh)
.text:0000137C                 dd 0Ch
.text:00001380                 dd offset $LN14_1       ; "value"
.text:00001384                 dd 0FFFFFFA4h, 18h
.text:0000138C                 dd offset $LN15_1       ; "prop"
.text:00001390                 dd 0FFFFFF98h, 4
.text:00001398                 dd offset $LN16_0       ; "dicSize"
.text:0000139C $LN16_0         db 'dicSize',0          ; DATA XREF: .text:00001398o
.text:000013A4 $LN15_1         db 'prop',0             ; DATA XREF: .text:0000138Co
.text:000013A9 $LN14_1         db 'value',0            ; DATA XREF: .text:00001380o
.text:000013AF $LN13_2         db 'name',0             ; DATA XREF: .text:00001374o
.text:000013B4                 align 10h
.text:000013C0
.text:000013C0 ; =============== S U B R O U T I N E =======================================
.text:000013C0
.text:000013C0 ; Attributes: bp-based frame
.text:000013C0
.text:000013C0 ; long __stdcall PROPVARIANT_to_DictSize(struct tagPROPVARIANT const &, unsigned int &)
.text:000013C0 ?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z proc near
.text:000013C0                                         ; CODE XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+112p
.text:000013C0
.text:000013C0 var_20          = dword ptr -20h
.text:000013C0 var_1C          = dword ptr -1Ch
.text:000013C0 var_18          = dword ptr -18h
.text:000013C0 var_14          = dword ptr -14h
.text:000013C0 var_10          = dword ptr -10h
.text:000013C0 var_C           = dword ptr -0Ch
.text:000013C0 var_4           = dword ptr -4
.text:000013C0 arg_0           = dword ptr  8
.text:000013C0 arg_4           = dword ptr  0Ch
.text:000013C0
.text:000013C0                 push    ebp
.text:000013C1                 mov     ebp, esp
.text:000013C3                 push    0FFFFFFFFh
.text:000013C5                 push    offset __ehhandler$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z
.text:000013CA                 mov     eax, large fs:0
.text:000013D0                 push    eax
.text:000013D1                 sub     esp, 14h
.text:000013D4                 mov     eax, 0CCCCCCCCh
.text:000013D9                 mov     [ebp+var_20], eax
.text:000013DC                 mov     [ebp+var_1C], eax
.text:000013DF                 mov     [ebp+var_18], eax
.text:000013E2                 mov     [ebp+var_14], eax
.text:000013E5                 mov     [ebp+var_10], eax
.text:000013E8                 mov     eax, dword ptr ds:___security_cookie
.text:000013ED                 xor     eax, ebp
.text:000013EF                 push    eax
.text:000013F0                 lea     eax, [ebp+var_C]
.text:000013F3                 mov     large fs:0, eax
.text:000013F9                 mov     eax, [ebp+arg_0]
.text:000013FC                 movzx   ecx, word ptr [eax]
.text:000013FF                 cmp     ecx, 13h
.text:00001402                 jnz     short loc_142D
.text:00001404                 mov     edx, [ebp+arg_0]
.text:00001407                 mov     eax, [edx+8]
.text:0000140A                 mov     [ebp+var_10], eax
.text:0000140D                 cmp     [ebp+var_10], 20h ; ' '
.text:00001411                 jb      short loc_141A
.text:00001413                 mov     eax, 80070057h
.text:00001418                 jmp     short loc_1477
.text:0000141A ; ---------------------------------------------------------------------------
.text:0000141A
.text:0000141A loc_141A:                               ; CODE XREF: PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+51j
.text:0000141A                 mov     edx, 1
.text:0000141F                 mov     ecx, [ebp+var_10]
.text:00001422                 shl     edx, cl
.text:00001424                 mov     eax, [ebp+arg_4]
.text:00001427                 mov     [eax], edx
.text:00001429                 xor     eax, eax
.text:0000142B                 jmp     short loc_1477
.text:0000142D ; ---------------------------------------------------------------------------
.text:0000142D
.text:0000142D loc_142D:                               ; CODE XREF: PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+42j
.text:0000142D                 mov     ecx, [ebp+arg_0]
.text:00001430                 movzx   edx, word ptr [ecx]
.text:00001433                 cmp     edx, 8
.text:00001436                 jnz     short loc_1472
.text:00001438                 mov     eax, [ebp+arg_0]
.text:0000143B                 mov     ecx, [eax+8]
.text:0000143E                 push    ecx
.text:0000143F                 lea     ecx, [ebp+var_20]
.text:00001442                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001447                 mov     [ebp+var_4], 0
.text:0000144E                 mov     edx, [ebp+arg_4]
.text:00001451                 push    edx             ; int
.text:00001452                 lea     eax, [ebp+var_20]
.text:00001455                 push    eax             ; UString *
.text:00001456                 call    ?StringToDictSize@@YGJABVUString@@AAI@Z ; StringToDictSize(UString const &,uint &)
.text:0000145B                 mov     [ebp+var_14], eax
.text:0000145E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001465                 lea     ecx, [ebp+var_20] ; this
.text:00001468                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000146D                 mov     eax, [ebp+var_14]
.text:00001470                 jmp     short loc_1477
.text:00001472 ; ---------------------------------------------------------------------------
.text:00001472
.text:00001472 loc_1472:                               ; CODE XREF: PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+76j
.text:00001472                 mov     eax, 80070057h
.text:00001477
.text:00001477 loc_1477:                               ; CODE XREF: PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+58j
.text:00001477                                         ; PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+6Bj ...
.text:00001477                 mov     ecx, [ebp+var_C]
.text:0000147A                 mov     large fs:0, ecx
.text:00001481                 pop     ecx
.text:00001482                 add     esp, 20h
.text:00001485                 cmp     ebp, esp
.text:00001487                 call    __RTC_CheckEsp
.text:0000148C                 mov     esp, ebp
.text:0000148E                 pop     ebp
.text:0000148F                 retn    8
.text:0000148F ?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z endp
.text:0000148F
.text:0000148F ; ---------------------------------------------------------------------------
.text:00001492                 align 10h
.text:000014A0
.text:000014A0 ; =============== S U B R O U T I N E =======================================
.text:000014A0
.text:000014A0 ; Attributes: bp-based frame
.text:000014A0
.text:000014A0 ; __int32 __thiscall COneMethodInfo::ParseMethodFromString(COneMethodInfo *this, const struct UString *)
.text:000014A0                 public ?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z
.text:000014A0 ?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z proc near
.text:000014A0                                         ; CODE XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+A6p
.text:000014A0
.text:000014A0 var_2C          = dword ptr -2Ch
.text:000014A0 var_28          = dword ptr -28h
.text:000014A0 var_24          = dword ptr -24h
.text:000014A0 var_20          = dword ptr -20h
.text:000014A0 var_1C          = dword ptr -1Ch
.text:000014A0 var_18          = dword ptr -18h
.text:000014A0 var_14          = dword ptr -14h
.text:000014A0 var_10          = dword ptr -10h
.text:000014A0 var_C           = dword ptr -0Ch
.text:000014A0 var_4           = dword ptr -4
.text:000014A0 arg_0           = dword ptr  8
.text:000014A0
.text:000014A0                 push    ebp
.text:000014A1                 mov     ebp, esp
.text:000014A3                 push    0FFFFFFFFh
.text:000014A5                 push    offset __ehhandler$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z
.text:000014AA                 mov     eax, large fs:0
.text:000014B0                 push    eax
.text:000014B1                 sub     esp, 20h
.text:000014B4                 mov     eax, 0CCCCCCCCh
.text:000014B9                 mov     [ebp+var_2C], eax
.text:000014BC                 mov     [ebp+var_28], eax
.text:000014BF                 mov     [ebp+var_24], eax
.text:000014C2                 mov     [ebp+var_20], eax
.text:000014C5                 mov     [ebp+var_1C], eax
.text:000014C8                 mov     [ebp+var_18], eax
.text:000014CB                 mov     [ebp+var_14], eax
.text:000014CE                 mov     [ebp+var_10], eax
.text:000014D1                 mov     eax, dword ptr ds:___security_cookie
.text:000014D6                 xor     eax, ebp
.text:000014D8                 push    eax
.text:000014D9                 lea     eax, [ebp+var_C]
.text:000014DC                 mov     large fs:0, eax
.text:000014E2                 mov     [ebp+var_10], ecx
.text:000014E5                 mov     ecx, [ebp+var_10]
.text:000014E8                 add     ecx, 0Ch        ; this
.text:000014EB                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:000014F0                 push    3Ah ; ':'       ; wchar_t
.text:000014F2                 mov     ecx, [ebp+arg_0] ; this
.text:000014F5                 call    ?Find@UString@@QBEH_W@Z ; UString::Find(wchar_t)
.text:000014FA                 mov     [ebp+var_14], eax
.text:000014FD                 mov     eax, [ebp+arg_0]
.text:00001500                 push    eax
.text:00001501                 lea     ecx, [ebp+var_24]
.text:00001504                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00001509                 mov     [ebp+var_4], 0
.text:00001510                 cmp     [ebp+var_14], 0
.text:00001514                 jl      short loc_1522
.text:00001516                 mov     ecx, [ebp+var_14]
.text:00001519                 push    ecx             ; unsigned int
.text:0000151A                 lea     ecx, [ebp+var_24] ; this
.text:0000151D                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00001522
.text:00001522 loc_1522:                               ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+74j
.text:00001522                 lea     ecx, [ebp+var_24] ; this
.text:00001525                 call    ?IsAscii@UString@@QBE_NXZ ; UString::IsAscii(void)
.text:0000152A                 movzx   edx, al
.text:0000152D                 test    edx, edx
.text:0000152F                 jnz     short loc_154C
.text:00001531                 mov     [ebp+var_2C], 80070057h
.text:00001538                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000153F                 lea     ecx, [ebp+var_24] ; this
.text:00001542                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001547                 mov     eax, [ebp+var_2C]
.text:0000154A                 jmp     short loc_15A3
.text:0000154C ; ---------------------------------------------------------------------------
.text:0000154C
.text:0000154C loc_154C:                               ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+8Fj
.text:0000154C                 lea     ecx, [ebp+var_24]
.text:0000154F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001554                 push    eax             ; wchar_t *
.text:00001555                 mov     ecx, [ebp+var_10]
.text:00001558                 add     ecx, 0Ch        ; this
.text:0000155B                 call    ?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z ; AString::SetFromWStr_if_Ascii(wchar_t const *)
.text:00001560                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001567                 lea     ecx, [ebp+var_24] ; this
.text:0000156A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000156F                 cmp     [ebp+var_14], 0
.text:00001573                 jge     short loc_1579
.text:00001575                 xor     eax, eax
.text:00001577                 jmp     short loc_15A3
.text:00001579 ; ---------------------------------------------------------------------------
.text:00001579
.text:00001579 loc_1579:                               ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+D3j
.text:00001579                 mov     eax, [ebp+var_14]
.text:0000157C                 add     eax, 1
.text:0000157F                 push    eax             ; unsigned int
.text:00001580                 mov     ecx, [ebp+arg_0] ; this
.text:00001583                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00001588                 push    eax
.text:00001589                 mov     ecx, [ebp+var_10]
.text:0000158C                 add     ecx, 18h
.text:0000158F                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001594                 mov     ecx, [ebp+var_10]
.text:00001597                 add     ecx, 18h
.text:0000159A                 push    ecx             ; struct UString *
.text:0000159B                 mov     ecx, [ebp+var_10] ; this
.text:0000159E                 call    ?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z ; CMethodProps::ParseParamsFromString(UString const &)
.text:000015A3
.text:000015A3 loc_15A3:                               ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+AAj
.text:000015A3                                         ; COneMethodInfo::ParseMethodFromString(UString const &)+D7j
.text:000015A3                 push    edx
.text:000015A4                 mov     ecx, ebp
.text:000015A6                 push    eax
.text:000015A7                 lea     edx, $LN10_3
.text:000015AD                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000015B2                 pop     eax
.text:000015B3                 pop     edx
.text:000015B4                 mov     ecx, [ebp+var_C]
.text:000015B7                 mov     large fs:0, ecx
.text:000015BE                 pop     ecx
.text:000015BF                 add     esp, 2Ch
.text:000015C2                 cmp     ebp, esp
.text:000015C4                 call    __RTC_CheckEsp
.text:000015C9                 mov     esp, ebp
.text:000015CB                 pop     ebp
.text:000015CC                 retn    4
.text:000015CC ?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z endp
.text:000015CC
.text:000015CC ; ---------------------------------------------------------------------------
.text:000015CF                 align 10h
.text:000015D0 $LN10_3         dd 1                    ; DATA XREF: COneMethodInfo::ParseMethodFromString(UString const &)+107o
.text:000015D4                 dd offset $LN9_2
.text:000015D8 $LN9_2          dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:000015D4o
.text:000015E0                 dd offset $LN7_1        ; "temp"
.text:000015E4 $LN7_1          db 'temp',0             ; DATA XREF: .text:000015E0o
.text:000015E9                 align 10h
.text:000015F0
.text:000015F0 ; =============== S U B R O U T I N E =======================================
.text:000015F0
.text:000015F0 ; Attributes: bp-based frame
.text:000015F0
.text:000015F0 ; __int32 __thiscall COneMethodInfo::ParseMethodFromPROPVARIANT(COneMethodInfo *this, const struct UString *, const struct tagPROPVARIANT *)
.text:000015F0                 public ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text:000015F0 ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z proc near
.text:000015F0
.text:000015F0 var_20          = dword ptr -20h
.text:000015F0 var_1C          = dword ptr -1Ch
.text:000015F0 var_18          = dword ptr -18h
.text:000015F0 var_14          = dword ptr -14h
.text:000015F0 var_10          = dword ptr -10h
.text:000015F0 var_C           = dword ptr -0Ch
.text:000015F0 var_4           = dword ptr -4
.text:000015F0 arg_0           = dword ptr  8
.text:000015F0 arg_4           = dword ptr  0Ch
.text:000015F0
.text:000015F0                 push    ebp
.text:000015F1                 mov     ebp, esp
.text:000015F3                 push    0FFFFFFFFh
.text:000015F5                 push    offset __ehhandler$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text:000015FA                 mov     eax, large fs:0
.text:00001600                 push    eax
.text:00001601                 sub     esp, 14h
.text:00001604                 mov     eax, 0CCCCCCCCh
.text:00001609                 mov     [ebp+var_20], eax
.text:0000160C                 mov     [ebp+var_1C], eax
.text:0000160F                 mov     [ebp+var_18], eax
.text:00001612                 mov     [ebp+var_14], eax
.text:00001615                 mov     [ebp+var_10], eax
.text:00001618                 mov     eax, dword ptr ds:___security_cookie
.text:0000161D                 xor     eax, ebp
.text:0000161F                 push    eax
.text:00001620                 lea     eax, [ebp+var_C]
.text:00001623                 mov     large fs:0, eax
.text:00001629                 mov     [ebp+var_10], ecx
.text:0000162C                 mov     ecx, [ebp+arg_0] ; this
.text:0000162F                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00001634                 movzx   eax, al
.text:00001637                 test    eax, eax
.text:00001639                 jnz     short loc_1667
.text:0000163B                 push    offset $SG68453 ; char *
.text:00001640                 mov     ecx, [ebp+arg_0]
.text:00001643                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001648                 push    eax             ; wchar_t *
.text:00001649                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii(wchar_t const *,char const *)
.text:0000164E                 movzx   ecx, al
.text:00001651                 test    ecx, ecx
.text:00001653                 jnz     short loc_1667
.text:00001655                 mov     edx, [ebp+arg_4]
.text:00001658                 push    edx             ; struct tagPROPVARIANT *
.text:00001659                 mov     eax, [ebp+arg_0]
.text:0000165C                 push    eax             ; struct UString *
.text:0000165D                 mov     ecx, [ebp+var_10] ; this
.text:00001660                 call    ?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)
.text:00001665                 jmp     short loc_16B0
.text:00001667 ; ---------------------------------------------------------------------------
.text:00001667
.text:00001667 loc_1667:                               ; CODE XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+49j
.text:00001667                                         ; COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+63j
.text:00001667                 mov     ecx, [ebp+arg_4]
.text:0000166A                 movzx   edx, word ptr [ecx]
.text:0000166D                 cmp     edx, 8
.text:00001670                 jz      short loc_1679
.text:00001672                 mov     eax, 80070057h
.text:00001677                 jmp     short loc_16B0
.text:00001679 ; ---------------------------------------------------------------------------
.text:00001679
.text:00001679 loc_1679:                               ; CODE XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+80j
.text:00001679                 mov     eax, [ebp+arg_4]
.text:0000167C                 mov     ecx, [eax+8]
.text:0000167F                 push    ecx
.text:00001680                 lea     ecx, [ebp+var_20]
.text:00001683                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00001688                 mov     [ebp+var_4], 0
.text:0000168F                 lea     edx, [ebp+var_20]
.text:00001692                 push    edx             ; struct UString *
.text:00001693                 mov     ecx, [ebp+var_10] ; this
.text:00001696                 call    ?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z ; COneMethodInfo::ParseMethodFromString(UString const &)
.text:0000169B                 mov     [ebp+var_14], eax
.text:0000169E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000016A5                 lea     ecx, [ebp+var_20] ; this
.text:000016A8                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000016AD                 mov     eax, [ebp+var_14]
.text:000016B0
.text:000016B0 loc_16B0:                               ; CODE XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+75j
.text:000016B0                                         ; COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+87j
.text:000016B0                 mov     ecx, [ebp+var_C]
.text:000016B3                 mov     large fs:0, ecx
.text:000016BA                 pop     ecx
.text:000016BB                 add     esp, 20h
.text:000016BE                 cmp     ebp, esp
.text:000016C0                 call    __RTC_CheckEsp
.text:000016C5                 mov     esp, ebp
.text:000016C7                 pop     ebp
.text:000016C8                 retn    8
.text:000016C8 ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z endp
.text:000016C8
.text:000016C8 ; ---------------------------------------------------------------------------
.text:000016CB                 align 4
.text:000016CB _text           ends
.text:000016CB
.rtc$TMZ:000016CC ; ===========================================================================
.rtc$TMZ:000016CC
.rtc$TMZ:000016CC ; Segment type: Pure data
.rtc$TMZ:000016CC ; Segment permissions: Read
.rtc$TMZ:000016CC _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000016CC                 assume cs:_rtc$TMZ
.rtc$TMZ:000016CC                 ;org 16CCh
.rtc$TMZ:000016CC ; COMDAT (pick any)
.rtc$TMZ:000016CC __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000016CC _rtc$TMZ        ends
.rtc$TMZ:000016CC
.rtc$IMZ:000016D0 ; ===========================================================================
.rtc$IMZ:000016D0
.rtc$IMZ:000016D0 ; Segment type: Pure data
.rtc$IMZ:000016D0 ; Segment permissions: Read
.rtc$IMZ:000016D0 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000016D0                 assume cs:_rtc$IMZ
.rtc$IMZ:000016D0                 ;org 16D0h
.rtc$IMZ:000016D0 ; COMDAT (pick any)
.rtc$IMZ:000016D0 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000016D0 _rtc$IMZ        ends
.rtc$IMZ:000016D0
.text:000016D4 ; ===========================================================================
.text:000016D4
.text:000016D4 ; Segment type: Pure code
.text:000016D4 ; Segment permissions: Read/Execute
.text:000016D4 _text           segment para public 'CODE' use32
.text:000016D4                 assume cs:_text
.text:000016D4                 ;org 16D4h
.text:000016D4 ; COMDAT (pick any)
.text:000016D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016D4
.text:000016D4 ; =============== S U B R O U T I N E =======================================
.text:000016D4
.text:000016D4 ; Attributes: bp-based frame
.text:000016D4
.text:000016D4 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:000016D4                 public ?IsEmpty@UString@@QBE_NXZ
.text:000016D4 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: StringToBool(UString const &,bool &)+6p
.text:000016D4                                         ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+2Ap ...
.text:000016D4
.text:000016D4 var_4           = dword ptr -4
.text:000016D4
.text:000016D4                 push    ebp
.text:000016D5                 mov     ebp, esp
.text:000016D7                 push    ecx
.text:000016D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016DF                 mov     [ebp+var_4], ecx
.text:000016E2                 mov     eax, [ebp+var_4]
.text:000016E5                 xor     ecx, ecx
.text:000016E7                 cmp     dword ptr [eax+4], 0
.text:000016EB                 setz    cl
.text:000016EE                 mov     al, cl
.text:000016F0                 mov     esp, ebp
.text:000016F2                 pop     ebp
.text:000016F3                 retn
.text:000016F3 ?IsEmpty@UString@@QBE_NXZ endp
.text:000016F3
.text:000016F3 _text           ends
.text:000016F3
.text:000016F4 ; ===========================================================================
.text:000016F4
.text:000016F4 ; Segment type: Pure code
.text:000016F4 ; Segment permissions: Read/Execute
.text:000016F4 _text           segment para public 'CODE' use32
.text:000016F4                 assume cs:_text
.text:000016F4                 ;org 16F4h
.text:000016F4 ; COMDAT (pick any)
.text:000016F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016F4
.text:000016F4 ; =============== S U B R O U T I N E =======================================
.text:000016F4
.text:000016F4 ; Attributes: bp-based frame
.text:000016F4
.text:000016F4 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:000016F4                 public ??BUString@@QBEPB_WXZ
.text:000016F4 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: StringToBool(UString const &,bool &)+15p
.text:000016F4                                         ; StringToBool(UString const &,bool &)+25p ...
.text:000016F4
.text:000016F4 var_4           = dword ptr -4
.text:000016F4
.text:000016F4                 push    ebp
.text:000016F5                 mov     ebp, esp
.text:000016F7                 push    ecx
.text:000016F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016FF                 mov     [ebp+var_4], ecx
.text:00001702                 mov     eax, [ebp+var_4]
.text:00001705                 mov     eax, [eax]
.text:00001707                 mov     esp, ebp
.text:00001709                 pop     ebp
.text:0000170A                 retn
.text:0000170A ??BUString@@QBEPB_WXZ endp
.text:0000170A
.text:0000170A ; ---------------------------------------------------------------------------
.text:0000170B                 align 4
.text:0000170B _text           ends
.text:0000170B
.text$x:0000170C ; ===========================================================================
.text$x:0000170C
.text$x:0000170C ; Segment type: Pure code
.text$x:0000170C ; Segment permissions: Read/Execute
.text$x:0000170C _text$x         segment para public 'CODE' use32
.text$x:0000170C                 assume cs:_text$x
.text$x:0000170C                 ;org 170Ch
.text$x:0000170C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000170C
.text$x:0000170C ; =============== S U B R O U T I N E =======================================
.text$x:0000170C
.text$x:0000170C
.text$x:0000170C __unwindfunclet$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z$0 proc near
.text$x:0000170C                                         ; DATA XREF: .xdata$x:00001880o
.text$x:0000170C                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000170F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000170F __unwindfunclet$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z$0 endp
.text$x:0000170F
.text$x:00001714
.text$x:00001714 ; =============== S U B R O U T I N E =======================================
.text$x:00001714
.text$x:00001714
.text$x:00001714 __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z proc near
.text$x:00001714                                         ; DATA XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+5o
.text$x:00001714
.text$x:00001714 arg_4           = dword ptr  8
.text$x:00001714
.text$x:00001714                 mov     edx, [esp+arg_4]
.text$x:00001718                 lea     eax, [edx+0Ch]
.text$x:0000171B                 mov     ecx, [edx-18h]
.text$x:0000171E                 xor     ecx, eax
.text$x:00001720                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001725                 mov     eax, offset __ehfuncinfo$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z
.text$x:0000172A                 jmp     ___CxxFrameHandler3
.text$x:0000172A __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z endp
.text$x:0000172A
.text$x:0000172F
.text$x:0000172F ; =============== S U B R O U T I N E =======================================
.text$x:0000172F
.text$x:0000172F
.text$x:0000172F __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$0 proc near
.text$x:0000172F                                         ; DATA XREF: .xdata$x:000018ACo
.text$x:0000172F                 lea     ecx, [ebp-24h]  ; this
.text$x:00001732                 jmp     ??1CCoderProps@@QAE@XZ ; CCoderProps::~CCoderProps(void)
.text$x:00001732 __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$0 endp
.text$x:00001732
.text$x:00001737
.text$x:00001737 ; =============== S U B R O U T I N E =======================================
.text$x:00001737
.text$x:00001737
.text$x:00001737 __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$1 proc near
.text$x:00001737                                         ; DATA XREF: .xdata$x:000018B4o
.text$x:00001737                 lea     ecx, [ebp-48h]  ; this
.text$x:0000173A                 jmp     ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text$x:0000173A __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$1 endp
.text$x:0000173A
.text$x:0000173F
.text$x:0000173F ; =============== S U B R O U T I N E =======================================
.text$x:0000173F
.text$x:0000173F
.text$x:0000173F __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z proc near
.text$x:0000173F                                         ; DATA XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+5o
.text$x:0000173F
.text$x:0000173F arg_4           = dword ptr  8
.text$x:0000173F
.text$x:0000173F                 mov     edx, [esp+arg_4]
.text$x:00001743                 lea     eax, [edx+0Ch]
.text$x:00001746                 mov     ecx, [edx-4Ch]
.text$x:00001749                 xor     ecx, eax
.text$x:0000174B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001750                 mov     eax, offset __ehfuncinfo$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z
.text$x:00001755                 jmp     ___CxxFrameHandler3
.text$x:00001755 __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z endp
.text$x:00001755
.text$x:0000175A
.text$x:0000175A ; =============== S U B R O U T I N E =======================================
.text$x:0000175A
.text$x:0000175A
.text$x:0000175A __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$0 proc near
.text$x:0000175A                                         ; DATA XREF: .xdata$x:000018E0o
.text$x:0000175A                 lea     ecx, [ebp-34h]  ; this
.text$x:0000175D                 jmp     ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text$x:0000175D __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$0 endp
.text$x:0000175D
.text$x:00001762
.text$x:00001762 ; =============== S U B R O U T I N E =======================================
.text$x:00001762
.text$x:00001762
.text$x:00001762 __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$1 proc near
.text$x:00001762                                         ; DATA XREF: .xdata$x:000018E8o
.text$x:00001762                 lea     ecx, [ebp-5Ch]  ; this
.text$x:00001765                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001765 __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$1 endp
.text$x:00001765
.text$x:0000176A
.text$x:0000176A ; =============== S U B R O U T I N E =======================================
.text$x:0000176A
.text$x:0000176A
.text$x:0000176A __ehhandler$?SetParam@CMethodProps@@AAEJABVUString@@0@Z proc near
.text$x:0000176A                                         ; DATA XREF: CMethodProps::SetParam(UString const &,UString const &)+5o
.text$x:0000176A
.text$x:0000176A arg_4           = dword ptr  8
.text$x:0000176A
.text$x:0000176A                 mov     edx, [esp+arg_4]
.text$x:0000176E                 lea     eax, [edx+0Ch]
.text$x:00001771                 mov     ecx, [edx-88h]
.text$x:00001777                 xor     ecx, eax
.text$x:00001779                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000177E                 mov     eax, offset __ehfuncinfo$?SetParam@CMethodProps@@AAEJABVUString@@0@Z
.text$x:00001783                 jmp     ___CxxFrameHandler3
.text$x:00001783 __ehhandler$?SetParam@CMethodProps@@AAEJABVUString@@0@Z endp
.text$x:00001783
.text$x:00001788
.text$x:00001788 ; =============== S U B R O U T I N E =======================================
.text$x:00001788
.text$x:00001788
.text$x:00001788 __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$0 proc near
.text$x:00001788                                         ; DATA XREF: .xdata$x:00001914o
.text$x:00001788                 lea     ecx, [ebp-20h]
.text$x:0000178B                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000178B __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$0 endp
.text$x:0000178B
.text$x:00001790
.text$x:00001790 ; =============== S U B R O U T I N E =======================================
.text$x:00001790
.text$x:00001790
.text$x:00001790 __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$1 proc near
.text$x:00001790                                         ; DATA XREF: .xdata$x:0000191Co
.text$x:00001790                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00001793                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001793 __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$1 endp
.text$x:00001793
.text$x:00001798
.text$x:00001798 ; =============== S U B R O U T I N E =======================================
.text$x:00001798
.text$x:00001798
.text$x:00001798 __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$2 proc near
.text$x:00001798                                         ; DATA XREF: .xdata$x:00001924o
.text$x:00001798                 lea     ecx, [ebp-50h]  ; this
.text$x:0000179B                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000179B __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$2 endp
.text$x:0000179B
.text$x:000017A0
.text$x:000017A0 ; =============== S U B R O U T I N E =======================================
.text$x:000017A0
.text$x:000017A0
.text$x:000017A0 __ehhandler$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z proc near
.text$x:000017A0                                         ; DATA XREF: CMethodProps::ParseParamsFromString(UString const &)+5o
.text$x:000017A0
.text$x:000017A0 arg_4           = dword ptr  8
.text$x:000017A0
.text$x:000017A0                 mov     edx, [esp+arg_4]
.text$x:000017A4                 lea     eax, [edx+0Ch]
.text$x:000017A7                 mov     ecx, [edx-5Ch]
.text$x:000017AA                 xor     ecx, eax
.text$x:000017AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017B1                 mov     eax, offset __ehfuncinfo$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z
.text$x:000017B6                 jmp     ___CxxFrameHandler3
.text$x:000017B6 __ehhandler$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z endp
.text$x:000017B6
.text$x:000017BB
.text$x:000017BB ; =============== S U B R O U T I N E =======================================
.text$x:000017BB
.text$x:000017BB
.text$x:000017BB __unwindfunclet$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0 proc near
.text$x:000017BB                                         ; DATA XREF: .xdata$x:00001950o
.text$x:000017BB                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000017BE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000017BE __unwindfunclet$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0 endp
.text$x:000017BE
.text$x:000017C3
.text$x:000017C3 ; =============== S U B R O U T I N E =======================================
.text$x:000017C3
.text$x:000017C3
.text$x:000017C3 __ehhandler$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z proc near
.text$x:000017C3                                         ; DATA XREF: SplitParams(UString const &,CObjectVector<UString> &)+5o
.text$x:000017C3
.text$x:000017C3 arg_4           = dword ptr  8
.text$x:000017C3
.text$x:000017C3                 mov     edx, [esp+arg_4]
.text$x:000017C7                 lea     eax, [edx+0Ch]
.text$x:000017CA                 mov     ecx, [edx-24h]
.text$x:000017CD                 xor     ecx, eax
.text$x:000017CF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000017D4                 mov     eax, offset __ehfuncinfo$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
.text$x:000017D9                 jmp     ___CxxFrameHandler3
.text$x:000017D9 __ehhandler$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z endp
.text$x:000017D9
.text$x:000017DE
.text$x:000017DE ; =============== S U B R O U T I N E =======================================
.text$x:000017DE
.text$x:000017DE
.text$x:000017DE __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0 proc near
.text$x:000017DE                                         ; DATA XREF: .xdata$x:0000197Co
.text$x:000017DE                 lea     ecx, [ebp-20h]  ; this
.text$x:000017E1                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000017E1 __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0 endp
.text$x:000017E1
.text$x:000017E6
.text$x:000017E6 ; =============== S U B R O U T I N E =======================================
.text$x:000017E6
.text$x:000017E6
.text$x:000017E6 __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$1 proc near
.text$x:000017E6                                         ; DATA XREF: .xdata$x:00001984o
.text$x:000017E6                 lea     ecx, [ebp-34h]  ; this
.text$x:000017E9                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000017E9 __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$1 endp
.text$x:000017E9
.text$x:000017EE
.text$x:000017EE ; =============== S U B R O U T I N E =======================================
.text$x:000017EE
.text$x:000017EE
.text$x:000017EE __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$2 proc near
.text$x:000017EE                                         ; DATA XREF: .xdata$x:0000198Co
.text$x:000017EE                 lea     ecx, [ebp-5Ch]  ; this
.text$x:000017F1                 jmp     ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text$x:000017F1 __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$2 endp
.text$x:000017F1
.text$x:000017F6
.text$x:000017F6 ; =============== S U B R O U T I N E =======================================
.text$x:000017F6
.text$x:000017F6
.text$x:000017F6 __ehhandler$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z proc near
.text$x:000017F6                                         ; DATA XREF: CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+5o
.text$x:000017F6
.text$x:000017F6 arg_4           = dword ptr  8
.text$x:000017F6
.text$x:000017F6                 mov     edx, [esp+arg_4]
.text$x:000017FA                 lea     eax, [edx+0Ch]
.text$x:000017FD                 mov     ecx, [edx-7Ch]
.text$x:00001800                 xor     ecx, eax
.text$x:00001802                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001807                 mov     eax, offset __ehfuncinfo$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text$x:0000180C                 jmp     ___CxxFrameHandler3
.text$x:0000180C __ehhandler$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z endp
.text$x:0000180C
.text$x:00001811
.text$x:00001811 ; =============== S U B R O U T I N E =======================================
.text$x:00001811
.text$x:00001811
.text$x:00001811 __unwindfunclet$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z$0 proc near
.text$x:00001811                                         ; DATA XREF: .xdata$x:000019B8o
.text$x:00001811                 lea     ecx, [ebp-20h]  ; this
.text$x:00001814                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001814 __unwindfunclet$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z$0 endp
.text$x:00001814
.text$x:00001819
.text$x:00001819 ; =============== S U B R O U T I N E =======================================
.text$x:00001819
.text$x:00001819
.text$x:00001819 __ehhandler$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z proc near
.text$x:00001819                                         ; DATA XREF: PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+5o
.text$x:00001819
.text$x:00001819 arg_4           = dword ptr  8
.text$x:00001819
.text$x:00001819                 mov     edx, [esp+arg_4]
.text$x:0000181D                 lea     eax, [edx+0Ch]
.text$x:00001820                 mov     ecx, [edx-18h]
.text$x:00001823                 xor     ecx, eax
.text$x:00001825                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000182A                 mov     eax, offset __ehfuncinfo$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z
.text$x:0000182F                 jmp     ___CxxFrameHandler3
.text$x:0000182F __ehhandler$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z endp
.text$x:0000182F
.text$x:00001834
.text$x:00001834 ; =============== S U B R O U T I N E =======================================
.text$x:00001834
.text$x:00001834
.text$x:00001834 __unwindfunclet$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z$0 proc near
.text$x:00001834                                         ; DATA XREF: .xdata$x:000019E4o
.text$x:00001834                 lea     ecx, [ebp-24h]  ; this
.text$x:00001837                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001837 __unwindfunclet$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z$0 endp
.text$x:00001837
.text$x:0000183C
.text$x:0000183C ; =============== S U B R O U T I N E =======================================
.text$x:0000183C
.text$x:0000183C
.text$x:0000183C __ehhandler$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z proc near
.text$x:0000183C                                         ; DATA XREF: COneMethodInfo::ParseMethodFromString(UString const &)+5o
.text$x:0000183C
.text$x:0000183C arg_4           = dword ptr  8
.text$x:0000183C
.text$x:0000183C                 mov     edx, [esp+arg_4]
.text$x:00001840                 lea     eax, [edx+0Ch]
.text$x:00001843                 mov     ecx, [edx-24h]
.text$x:00001846                 xor     ecx, eax
.text$x:00001848                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000184D                 mov     eax, offset __ehfuncinfo$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z
.text$x:00001852                 jmp     ___CxxFrameHandler3
.text$x:00001852 __ehhandler$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z endp
.text$x:00001852
.text$x:00001857
.text$x:00001857 ; =============== S U B R O U T I N E =======================================
.text$x:00001857
.text$x:00001857
.text$x:00001857 __unwindfunclet$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0 proc near
.text$x:00001857                                         ; DATA XREF: .xdata$x:00001A10o
.text$x:00001857                 lea     ecx, [ebp-20h]  ; this
.text$x:0000185A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000185A __unwindfunclet$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0 endp
.text$x:0000185A
.text$x:0000185F
.text$x:0000185F ; =============== S U B R O U T I N E =======================================
.text$x:0000185F
.text$x:0000185F
.text$x:0000185F __ehhandler$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z proc near
.text$x:0000185F                                         ; DATA XREF: COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+5o
.text$x:0000185F
.text$x:0000185F arg_4           = dword ptr  8
.text$x:0000185F
.text$x:0000185F                 mov     edx, [esp+arg_4]
.text$x:00001863                 lea     eax, [edx+0Ch]
.text$x:00001866                 mov     ecx, [edx-18h]
.text$x:00001869                 xor     ecx, eax
.text$x:0000186B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001870                 mov     eax, offset __ehfuncinfo$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.text$x:00001875                 jmp     ___CxxFrameHandler3
.text$x:00001875 __ehhandler$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z endp
.text$x:00001875
.text$x:00001875 ; ---------------------------------------------------------------------------
.text$x:0000187A                 align 4
.text$x:0000187A _text$x         ends
.text$x:0000187A
.xdata$x:0000187C ; ===========================================================================
.xdata$x:0000187C
.xdata$x:0000187C ; Segment type: Pure data
.xdata$x:0000187C ; Segment permissions: Read
.xdata$x:0000187C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000187C                 assume cs:_xdata$x
.xdata$x:0000187C                 ;org 187Ch
.xdata$x:0000187C __unwindtable$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z db 0FFh
.xdata$x:0000187C                                         ; DATA XREF: .xdata$x:0000188Co
.xdata$x:0000187D                 db 0FFh
.xdata$x:0000187E                 db 0FFh
.xdata$x:0000187F                 db 0FFh
.xdata$x:00001880                 dd offset __unwindfunclet$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z$0
.xdata$x:00001884 __ehfuncinfo$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z db  22h ; "
.xdata$x:00001884                                         ; DATA XREF: __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z+11o
.xdata$x:00001885                 db    5
.xdata$x:00001886                 db  93h ; ô
.xdata$x:00001887                 db  19h
.xdata$x:00001888                 db    1
.xdata$x:00001889                 db    0
.xdata$x:0000188A                 db    0
.xdata$x:0000188B                 db    0
.xdata$x:0000188C                 dd offset __unwindtable$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z
.xdata$x:00001890                 db    0
.xdata$x:00001891                 db    0
.xdata$x:00001892                 db    0
.xdata$x:00001893                 db    0
.xdata$x:00001894                 db    0
.xdata$x:00001895                 db    0
.xdata$x:00001896                 db    0
.xdata$x:00001897                 db    0
.xdata$x:00001898                 db    0
.xdata$x:00001899                 db    0
.xdata$x:0000189A                 db    0
.xdata$x:0000189B                 db    0
.xdata$x:0000189C                 db    0
.xdata$x:0000189D                 db    0
.xdata$x:0000189E                 db    0
.xdata$x:0000189F                 db    0
.xdata$x:000018A0                 db    0
.xdata$x:000018A1                 db    0
.xdata$x:000018A2                 db    0
.xdata$x:000018A3                 db    0
.xdata$x:000018A4                 db    1
.xdata$x:000018A5                 db    0
.xdata$x:000018A6                 db    0
.xdata$x:000018A7                 db    0
.xdata$x:000018A8 __unwindtable$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z db 0FFh
.xdata$x:000018A8                                         ; DATA XREF: .xdata$x:000018C0o
.xdata$x:000018A9                 db 0FFh
.xdata$x:000018AA                 db 0FFh
.xdata$x:000018AB                 db 0FFh
.xdata$x:000018AC                 dd offset __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$0
.xdata$x:000018B0                 db    0
.xdata$x:000018B1                 db    0
.xdata$x:000018B2                 db    0
.xdata$x:000018B3                 db    0
.xdata$x:000018B4                 dd offset __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$1
.xdata$x:000018B8 __ehfuncinfo$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z db  22h ; "
.xdata$x:000018B8                                         ; DATA XREF: __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z+11o
.xdata$x:000018B9                 db    5
.xdata$x:000018BA                 db  93h ; ô
.xdata$x:000018BB                 db  19h
.xdata$x:000018BC                 db    2
.xdata$x:000018BD                 db    0
.xdata$x:000018BE                 db    0
.xdata$x:000018BF                 db    0
.xdata$x:000018C0                 dd offset __unwindtable$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z
.xdata$x:000018C4                 db    0
.xdata$x:000018C5                 db    0
.xdata$x:000018C6                 db    0
.xdata$x:000018C7                 db    0
.xdata$x:000018C8                 db    0
.xdata$x:000018C9                 db    0
.xdata$x:000018CA                 db    0
.xdata$x:000018CB                 db    0
.xdata$x:000018CC                 db    0
.xdata$x:000018CD                 db    0
.xdata$x:000018CE                 db    0
.xdata$x:000018CF                 db    0
.xdata$x:000018D0                 db    0
.xdata$x:000018D1                 db    0
.xdata$x:000018D2                 db    0
.xdata$x:000018D3                 db    0
.xdata$x:000018D4                 db    0
.xdata$x:000018D5                 db    0
.xdata$x:000018D6                 db    0
.xdata$x:000018D7                 db    0
.xdata$x:000018D8                 db    1
.xdata$x:000018D9                 db    0
.xdata$x:000018DA                 db    0
.xdata$x:000018DB                 db    0
.xdata$x:000018DC __unwindtable$?SetParam@CMethodProps@@AAEJABVUString@@0@Z db 0FFh
.xdata$x:000018DC                                         ; DATA XREF: .xdata$x:000018F4o
.xdata$x:000018DD                 db 0FFh
.xdata$x:000018DE                 db 0FFh
.xdata$x:000018DF                 db 0FFh
.xdata$x:000018E0                 dd offset __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$0
.xdata$x:000018E4                 align 8
.xdata$x:000018E8                 dd offset __unwindfunclet$?SetParam@CMethodProps@@AAEJABVUString@@0@Z$1
.xdata$x:000018EC __ehfuncinfo$?SetParam@CMethodProps@@AAEJABVUString@@0@Z db  22h ; "
.xdata$x:000018EC                                         ; DATA XREF: __ehhandler$?SetParam@CMethodProps@@AAEJABVUString@@0@Z+14o
.xdata$x:000018ED                 db    5
.xdata$x:000018EE                 db  93h ; ô
.xdata$x:000018EF                 db  19h
.xdata$x:000018F0                 db    2
.xdata$x:000018F1                 db    0
.xdata$x:000018F2                 db    0
.xdata$x:000018F3                 db    0
.xdata$x:000018F4                 dd offset __unwindtable$?SetParam@CMethodProps@@AAEJABVUString@@0@Z
.xdata$x:000018F8                 db    0
.xdata$x:000018F9                 db    0
.xdata$x:000018FA                 db    0
.xdata$x:000018FB                 db    0
.xdata$x:000018FC                 db    0
.xdata$x:000018FD                 db    0
.xdata$x:000018FE                 db    0
.xdata$x:000018FF                 db    0
.xdata$x:00001900                 db    0
.xdata$x:00001901                 db    0
.xdata$x:00001902                 db    0
.xdata$x:00001903                 db    0
.xdata$x:00001904                 db    0
.xdata$x:00001905                 db    0
.xdata$x:00001906                 db    0
.xdata$x:00001907                 db    0
.xdata$x:00001908                 db    0
.xdata$x:00001909                 db    0
.xdata$x:0000190A                 db    0
.xdata$x:0000190B                 db    0
.xdata$x:0000190C                 db    1
.xdata$x:0000190D                 db    0
.xdata$x:0000190E                 db    0
.xdata$x:0000190F                 db    0
.xdata$x:00001910 __unwindtable$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z db 0FFh
.xdata$x:00001910                                         ; DATA XREF: .xdata$x:00001930o
.xdata$x:00001911                 db 0FFh
.xdata$x:00001912                 db 0FFh
.xdata$x:00001913                 db 0FFh
.xdata$x:00001914                 dd offset __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$0
.xdata$x:00001918                 db    0
.xdata$x:00001919                 db    0
.xdata$x:0000191A                 db    0
.xdata$x:0000191B                 db    0
.xdata$x:0000191C                 dd offset __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$1
.xdata$x:00001920                 db    1
.xdata$x:00001921                 db    0
.xdata$x:00001922                 db    0
.xdata$x:00001923                 db    0
.xdata$x:00001924                 dd offset __unwindfunclet$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z$2
.xdata$x:00001928 __ehfuncinfo$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z db  22h ; "
.xdata$x:00001928                                         ; DATA XREF: __ehhandler$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z+11o
.xdata$x:00001929                 db    5
.xdata$x:0000192A                 db  93h ; ô
.xdata$x:0000192B                 db  19h
.xdata$x:0000192C                 db    3
.xdata$x:0000192D                 db    0
.xdata$x:0000192E                 db    0
.xdata$x:0000192F                 db    0
.xdata$x:00001930                 dd offset __unwindtable$?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z
.xdata$x:00001934                 db    0
.xdata$x:00001935                 db    0
.xdata$x:00001936                 db    0
.xdata$x:00001937                 db    0
.xdata$x:00001938                 db    0
.xdata$x:00001939                 db    0
.xdata$x:0000193A                 db    0
.xdata$x:0000193B                 db    0
.xdata$x:0000193C                 db    0
.xdata$x:0000193D                 db    0
.xdata$x:0000193E                 db    0
.xdata$x:0000193F                 db    0
.xdata$x:00001940                 db    0
.xdata$x:00001941                 db    0
.xdata$x:00001942                 db    0
.xdata$x:00001943                 db    0
.xdata$x:00001944                 db    0
.xdata$x:00001945                 db    0
.xdata$x:00001946                 db    0
.xdata$x:00001947                 db    0
.xdata$x:00001948                 db    1
.xdata$x:00001949                 db    0
.xdata$x:0000194A                 db    0
.xdata$x:0000194B                 db    0
.xdata$x:0000194C __unwindtable$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z db 0FFh
.xdata$x:0000194C                                         ; DATA XREF: .xdata$x:0000195Co
.xdata$x:0000194D                 db 0FFh
.xdata$x:0000194E                 db 0FFh
.xdata$x:0000194F                 db 0FFh
.xdata$x:00001950                 dd offset __unwindfunclet$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0
.xdata$x:00001954 __ehfuncinfo$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z db  22h ; "
.xdata$x:00001954                                         ; DATA XREF: __ehhandler$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z+11o
.xdata$x:00001955                 db    5
.xdata$x:00001956                 db  93h ; ô
.xdata$x:00001957                 db  19h
.xdata$x:00001958                 db    1
.xdata$x:00001959                 db    0
.xdata$x:0000195A                 db    0
.xdata$x:0000195B                 db    0
.xdata$x:0000195C                 dd offset __unwindtable$?SplitParams@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
.xdata$x:00001960                 db    0
.xdata$x:00001961                 db    0
.xdata$x:00001962                 db    0
.xdata$x:00001963                 db    0
.xdata$x:00001964                 db    0
.xdata$x:00001965                 db    0
.xdata$x:00001966                 db    0
.xdata$x:00001967                 db    0
.xdata$x:00001968                 db    0
.xdata$x:00001969                 db    0
.xdata$x:0000196A                 db    0
.xdata$x:0000196B                 db    0
.xdata$x:0000196C                 db    0
.xdata$x:0000196D                 db    0
.xdata$x:0000196E                 db    0
.xdata$x:0000196F                 db    0
.xdata$x:00001970                 db    0
.xdata$x:00001971                 db    0
.xdata$x:00001972                 db    0
.xdata$x:00001973                 db    0
.xdata$x:00001974                 db    1
.xdata$x:00001975                 db    0
.xdata$x:00001976                 db    0
.xdata$x:00001977                 db    0
.xdata$x:00001978 __unwindtable$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00001978                                         ; DATA XREF: .xdata$x:00001998o
.xdata$x:00001979                 db 0FFh
.xdata$x:0000197A                 db 0FFh
.xdata$x:0000197B                 db 0FFh
.xdata$x:0000197C                 dd offset __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0
.xdata$x:00001980                 db    0
.xdata$x:00001981                 db    0
.xdata$x:00001982                 db    0
.xdata$x:00001983                 db    0
.xdata$x:00001984                 dd offset __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$1
.xdata$x:00001988                 db 0FFh
.xdata$x:00001989                 db 0FFh
.xdata$x:0000198A                 db 0FFh
.xdata$x:0000198B                 db 0FFh
.xdata$x:0000198C                 dd offset __unwindfunclet$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$2
.xdata$x:00001990 __ehfuncinfo$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00001990                                         ; DATA XREF: __ehhandler$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z+11o
.xdata$x:00001991                 db    5
.xdata$x:00001992                 db  93h ; ô
.xdata$x:00001993                 db  19h
.xdata$x:00001994                 db    3
.xdata$x:00001995                 db    0
.xdata$x:00001996                 db    0
.xdata$x:00001997                 db    0
.xdata$x:00001998                 dd offset __unwindtable$?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.xdata$x:0000199C                 db    0
.xdata$x:0000199D                 db    0
.xdata$x:0000199E                 db    0
.xdata$x:0000199F                 db    0
.xdata$x:000019A0                 db    0
.xdata$x:000019A1                 db    0
.xdata$x:000019A2                 db    0
.xdata$x:000019A3                 db    0
.xdata$x:000019A4                 db    0
.xdata$x:000019A5                 db    0
.xdata$x:000019A6                 db    0
.xdata$x:000019A7                 db    0
.xdata$x:000019A8                 db    0
.xdata$x:000019A9                 db    0
.xdata$x:000019AA                 db    0
.xdata$x:000019AB                 db    0
.xdata$x:000019AC                 db    0
.xdata$x:000019AD                 db    0
.xdata$x:000019AE                 db    0
.xdata$x:000019AF                 db    0
.xdata$x:000019B0                 db    1
.xdata$x:000019B1                 db    0
.xdata$x:000019B2                 db    0
.xdata$x:000019B3                 db    0
.xdata$x:000019B4 __unwindtable$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z db 0FFh
.xdata$x:000019B4                                         ; DATA XREF: .xdata$x:000019C4o
.xdata$x:000019B5                 db 0FFh
.xdata$x:000019B6                 db 0FFh
.xdata$x:000019B7                 db 0FFh
.xdata$x:000019B8                 dd offset __unwindfunclet$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z$0
.xdata$x:000019BC __ehfuncinfo$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z db  22h ; "
.xdata$x:000019BC                                         ; DATA XREF: __ehhandler$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z+11o
.xdata$x:000019BD                 db    5
.xdata$x:000019BE                 db  93h ; ô
.xdata$x:000019BF                 db  19h
.xdata$x:000019C0                 db    1
.xdata$x:000019C1                 db    0
.xdata$x:000019C2                 db    0
.xdata$x:000019C3                 db    0
.xdata$x:000019C4                 dd offset __unwindtable$?PROPVARIANT_to_DictSize@@YGJABUtagPROPVARIANT@@AAI@Z
.xdata$x:000019C8                 db    0
.xdata$x:000019C9                 db    0
.xdata$x:000019CA                 db    0
.xdata$x:000019CB                 db    0
.xdata$x:000019CC                 db    0
.xdata$x:000019CD                 db    0
.xdata$x:000019CE                 db    0
.xdata$x:000019CF                 db    0
.xdata$x:000019D0                 db    0
.xdata$x:000019D1                 db    0
.xdata$x:000019D2                 db    0
.xdata$x:000019D3                 db    0
.xdata$x:000019D4                 db    0
.xdata$x:000019D5                 db    0
.xdata$x:000019D6                 db    0
.xdata$x:000019D7                 db    0
.xdata$x:000019D8                 db    0
.xdata$x:000019D9                 db    0
.xdata$x:000019DA                 db    0
.xdata$x:000019DB                 db    0
.xdata$x:000019DC                 db    1
.xdata$x:000019DD                 db    0
.xdata$x:000019DE                 db    0
.xdata$x:000019DF                 db    0
.xdata$x:000019E0 __unwindtable$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z db 0FFh
.xdata$x:000019E0                                         ; DATA XREF: .xdata$x:000019F0o
.xdata$x:000019E1                 db 0FFh
.xdata$x:000019E2                 db 0FFh
.xdata$x:000019E3                 db 0FFh
.xdata$x:000019E4                 dd offset __unwindfunclet$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z$0
.xdata$x:000019E8 __ehfuncinfo$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z db  22h ; "
.xdata$x:000019E8                                         ; DATA XREF: __ehhandler$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z+11o
.xdata$x:000019E9                 db    5
.xdata$x:000019EA                 db  93h ; ô
.xdata$x:000019EB                 db  19h
.xdata$x:000019EC                 db    1
.xdata$x:000019ED                 db    0
.xdata$x:000019EE                 db    0
.xdata$x:000019EF                 db    0
.xdata$x:000019F0                 dd offset __unwindtable$?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z
.xdata$x:000019F4                 db    0
.xdata$x:000019F5                 db    0
.xdata$x:000019F6                 db    0
.xdata$x:000019F7                 db    0
.xdata$x:000019F8                 db    0
.xdata$x:000019F9                 db    0
.xdata$x:000019FA                 db    0
.xdata$x:000019FB                 db    0
.xdata$x:000019FC                 db    0
.xdata$x:000019FD                 db    0
.xdata$x:000019FE                 db    0
.xdata$x:000019FF                 db    0
.xdata$x:00001A00                 db    0
.xdata$x:00001A01                 db    0
.xdata$x:00001A02                 db    0
.xdata$x:00001A03                 db    0
.xdata$x:00001A04                 db    0
.xdata$x:00001A05                 db    0
.xdata$x:00001A06                 db    0
.xdata$x:00001A07                 db    0
.xdata$x:00001A08                 db    1
.xdata$x:00001A09                 db    0
.xdata$x:00001A0A                 db    0
.xdata$x:00001A0B                 db    0
.xdata$x:00001A0C __unwindtable$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00001A0C                                         ; DATA XREF: .xdata$x:00001A1Co
.xdata$x:00001A0D                 db 0FFh
.xdata$x:00001A0E                 db 0FFh
.xdata$x:00001A0F                 db 0FFh
.xdata$x:00001A10                 dd offset __unwindfunclet$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z$0
.xdata$x:00001A14 __ehfuncinfo$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00001A14                                         ; DATA XREF: __ehhandler$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z+11o
.xdata$x:00001A15                 db    5
.xdata$x:00001A16                 db  93h ; ô
.xdata$x:00001A17                 db  19h
.xdata$x:00001A18                 db    1
.xdata$x:00001A19                 db    0
.xdata$x:00001A1A                 db    0
.xdata$x:00001A1B                 db    0
.xdata$x:00001A1C                 dd offset __unwindtable$?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z
.xdata$x:00001A20                 db    0
.xdata$x:00001A21                 db    0
.xdata$x:00001A22                 db    0
.xdata$x:00001A23                 db    0
.xdata$x:00001A24                 db    0
.xdata$x:00001A25                 db    0
.xdata$x:00001A26                 db    0
.xdata$x:00001A27                 db    0
.xdata$x:00001A28                 db    0
.xdata$x:00001A29                 db    0
.xdata$x:00001A2A                 db    0
.xdata$x:00001A2B                 db    0
.xdata$x:00001A2C                 db    0
.xdata$x:00001A2D                 db    0
.xdata$x:00001A2E                 db    0
.xdata$x:00001A2F                 db    0
.xdata$x:00001A30                 db    0
.xdata$x:00001A31                 db    0
.xdata$x:00001A32                 db    0
.xdata$x:00001A33                 db    0
.xdata$x:00001A34                 db    1
.xdata$x:00001A35                 db    0
.xdata$x:00001A36                 db    0
.xdata$x:00001A37                 db    0
.xdata$x:00001A37 _xdata$x        ends
.xdata$x:00001A37
.text:00001A38 ; ===========================================================================
.text:00001A38
.text:00001A38 ; Segment type: Pure code
.text:00001A38 ; Segment permissions: Read/Execute
.text:00001A38 _text           segment para public 'CODE' use32
.text:00001A38                 assume cs:_text
.text:00001A38                 ;org 1A38h
.text:00001A38 ; COMDAT (pick any)
.text:00001A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A38
.text:00001A38 ; =============== S U B R O U T I N E =======================================
.text:00001A38
.text:00001A38 ; Attributes: bp-based frame
.text:00001A38
.text:00001A38 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00001A38                 public ??1UString@@QAE@XZ
.text:00001A38 ??1UString@@QAE@XZ proc near            ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+B9p
.text:00001A38                                         ; CMethodProps::ParseParamsFromString(UString const &)+D7p ...
.text:00001A38
.text:00001A38 var_8           = dword ptr -8
.text:00001A38 var_4           = dword ptr -4
.text:00001A38
.text:00001A38                 push    ebp
.text:00001A39                 mov     ebp, esp
.text:00001A3B                 sub     esp, 8
.text:00001A3E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001A45                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A4C                 mov     [ebp+var_4], ecx
.text:00001A4F                 mov     eax, [ebp+var_4]
.text:00001A52                 mov     ecx, [eax]
.text:00001A54                 mov     [ebp+var_8], ecx
.text:00001A57                 mov     edx, [ebp+var_8]
.text:00001A5A                 push    edx             ; void *
.text:00001A5B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001A60                 add     esp, 4
.text:00001A63                 add     esp, 8
.text:00001A66                 cmp     ebp, esp
.text:00001A68                 call    __RTC_CheckEsp
.text:00001A6D                 mov     esp, ebp
.text:00001A6F                 pop     ebp
.text:00001A70                 retn
.text:00001A70 ??1UString@@QAE@XZ endp
.text:00001A70
.text:00001A70 ; ---------------------------------------------------------------------------
.text:00001A71                 align 4
.text:00001A71 _text           ends
.text:00001A71
.text:00001A74 ; ===========================================================================
.text:00001A74
.text:00001A74 ; Segment type: Pure code
.text:00001A74 ; Segment permissions: Read/Execute
.text:00001A74 _text           segment para public 'CODE' use32
.text:00001A74                 assume cs:_text
.text:00001A74                 ;org 1A74h
.text:00001A74 ; COMDAT (pick any)
.text:00001A74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A74
.text:00001A74 ; =============== S U B R O U T I N E =======================================
.text:00001A74
.text:00001A74 ; Attributes: bp-based frame
.text:00001A74
.text:00001A74 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00001A74                 public ?Len@UString@@QBEIXZ
.text:00001A74 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+82p
.text:00001A74                                         ; CMethodProps::SetParam(UString const &,UString const &)+171p ...
.text:00001A74
.text:00001A74 var_4           = dword ptr -4
.text:00001A74
.text:00001A74                 push    ebp
.text:00001A75                 mov     ebp, esp
.text:00001A77                 push    ecx
.text:00001A78                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A7F                 mov     [ebp+var_4], ecx
.text:00001A82                 mov     eax, [ebp+var_4]
.text:00001A85                 mov     eax, [eax+4]
.text:00001A88                 mov     esp, ebp
.text:00001A8A                 pop     ebp
.text:00001A8B                 retn
.text:00001A8B ?Len@UString@@QBEIXZ endp
.text:00001A8B
.text:00001A8B _text           ends
.text:00001A8B
.text:00001A8C ; ===========================================================================
.text:00001A8C
.text:00001A8C ; Segment type: Pure code
.text:00001A8C ; Segment permissions: Read/Execute
.text:00001A8C _text           segment para public 'CODE' use32
.text:00001A8C                 assume cs:_text
.text:00001A8C                 ;org 1A8Ch
.text:00001A8C ; COMDAT (pick any)
.text:00001A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001A8C
.text:00001A8C ; =============== S U B R O U T I N E =======================================
.text:00001A8C
.text:00001A8C ; Attributes: bp-based frame
.text:00001A8C
.text:00001A8C ; public: void * __thiscall NWindows::NCOM::CPropVariant::`vector deleting destructor'(unsigned int)
.text:00001A8C                 public ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z
.text:00001A8C ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z proc near
.text:00001A8C                                         ; CODE XREF: CCoderProps::~CCoderProps(void)+4Bp
.text:00001A8C
.text:00001A8C var_4           = dword ptr -4
.text:00001A8C arg_0           = dword ptr  8
.text:00001A8C
.text:00001A8C                 push    ebp
.text:00001A8D                 mov     ebp, esp
.text:00001A8F                 push    ecx
.text:00001A90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A97                 mov     [ebp+var_4], ecx
.text:00001A9A                 mov     eax, [ebp+arg_0]
.text:00001A9D                 and     eax, 2
.text:00001AA0                 jz      short loc_1AD8
.text:00001AA2                 push    offset ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001AA7                 mov     ecx, [ebp+var_4]
.text:00001AAA                 mov     edx, [ecx-4]
.text:00001AAD                 push    edx
.text:00001AAE                 push    10h
.text:00001AB0                 mov     eax, [ebp+var_4]
.text:00001AB3                 push    eax
.text:00001AB4                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00001AB9                 mov     ecx, [ebp+arg_0]
.text:00001ABC                 and     ecx, 1
.text:00001ABF                 jz      short loc_1AD0
.text:00001AC1                 mov     edx, [ebp+var_4]
.text:00001AC4                 sub     edx, 4
.text:00001AC7                 push    edx             ; void *
.text:00001AC8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001ACD                 add     esp, 4
.text:00001AD0
.text:00001AD0 loc_1AD0:                               ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+33j
.text:00001AD0                 mov     eax, [ebp+var_4]
.text:00001AD3                 sub     eax, 4
.text:00001AD6                 jmp     short loc_1AF7
.text:00001AD8 ; ---------------------------------------------------------------------------
.text:00001AD8
.text:00001AD8 loc_1AD8:                               ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+14j
.text:00001AD8                 mov     ecx, [ebp+var_4] ; this
.text:00001ADB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001AE0                 mov     eax, [ebp+arg_0]
.text:00001AE3                 and     eax, 1
.text:00001AE6                 jz      short loc_1AF4
.text:00001AE8                 mov     ecx, [ebp+var_4]
.text:00001AEB                 push    ecx             ; void *
.text:00001AEC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001AF1                 add     esp, 4
.text:00001AF4
.text:00001AF4 loc_1AF4:                               ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+5Aj
.text:00001AF4                 mov     eax, [ebp+var_4]
.text:00001AF7
.text:00001AF7 loc_1AF7:                               ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+4Aj
.text:00001AF7                 add     esp, 4
.text:00001AFA                 cmp     ebp, esp
.text:00001AFC                 call    __RTC_CheckEsp
.text:00001B01                 mov     esp, ebp
.text:00001B03                 pop     ebp
.text:00001B04                 retn    4
.text:00001B04 ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z endp
.text:00001B04
.text:00001B04 ; ---------------------------------------------------------------------------
.text:00001B07                 align 4
.text:00001B07 _text           ends
.text:00001B07
.text:00001B08 ; ===========================================================================
.text:00001B08
.text:00001B08 ; Segment type: Pure code
.text:00001B08 ; Segment permissions: Read/Execute
.text:00001B08 _text           segment para public 'CODE' use32
.text:00001B08                 assume cs:_text
.text:00001B08                 ;org 1B08h
.text:00001B08 ; COMDAT (pick any)
.text:00001B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B08
.text:00001B08 ; =============== S U B R O U T I N E =======================================
.text:00001B08
.text:00001B08 ; Attributes: bp-based frame
.text:00001B08
.text:00001B08 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00001B08                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00001B08 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00001B08                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+125p
.text:00001B08                                         ; CMethodProps::SetParam(UString const &,UString const &)+1C0p ...
.text:00001B08
.text:00001B08 var_4           = dword ptr -4
.text:00001B08
.text:00001B08                 push    ebp
.text:00001B09                 mov     ebp, esp
.text:00001B0B                 push    ecx
.text:00001B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B13                 mov     [ebp+var_4], ecx
.text:00001B16                 mov     ecx, [ebp+var_4] ; this
.text:00001B19                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00001B1E                 add     esp, 4
.text:00001B21                 cmp     ebp, esp
.text:00001B23                 call    __RTC_CheckEsp
.text:00001B28                 mov     esp, ebp
.text:00001B2A                 pop     ebp
.text:00001B2B                 retn
.text:00001B2B ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00001B2B
.text:00001B2B _text           ends
.text:00001B2B
.xdata$x:00001B2C ; ===========================================================================
.xdata$x:00001B2C
.xdata$x:00001B2C ; Segment type: Pure data
.xdata$x:00001B2C ; Segment permissions: Read
.xdata$x:00001B2C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001B2C                 assume cs:_xdata$x
.xdata$x:00001B2C                 ;org 1B2Ch
.xdata$x:00001B2C ; COMDAT (pick any)
.xdata$x:00001B2C                 public __TI1H
.xdata$x:00001B2C __TI1H          db    0                 ; DATA XREF: CCoderProps::AddProp(CProp const &)+2Co
.xdata$x:00001B2D                 db    0
.xdata$x:00001B2E                 db    0
.xdata$x:00001B2F                 db    0
.xdata$x:00001B30                 db    0
.xdata$x:00001B31                 db    0
.xdata$x:00001B32                 db    0
.xdata$x:00001B33                 db    0
.xdata$x:00001B34                 db    0
.xdata$x:00001B35                 db    0
.xdata$x:00001B36                 db    0
.xdata$x:00001B37                 db    0
.xdata$x:00001B38                 dd offset __CTA1H
.xdata$x:00001B38 _xdata$x        ends
.xdata$x:00001B38
.xdata$x:00001B3C ; ===========================================================================
.xdata$x:00001B3C
.xdata$x:00001B3C ; Segment type: Pure data
.xdata$x:00001B3C ; Segment permissions: Read
.xdata$x:00001B3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001B3C                 assume cs:_xdata$x
.xdata$x:00001B3C                 ;org 1B3Ch
.xdata$x:00001B3C ; COMDAT (pick any)
.xdata$x:00001B3C                 public __CTA1H
.xdata$x:00001B3C __CTA1H         db    1                 ; DATA XREF: .xdata$x:00001B38o
.xdata$x:00001B3D                 db    0
.xdata$x:00001B3E                 db    0
.xdata$x:00001B3F                 db    0
.xdata$x:00001B40                 dd offset __CT??_R0H@84
.xdata$x:00001B40 _xdata$x        ends
.xdata$x:00001B40
.xdata$x:00001B44 ; ===========================================================================
.xdata$x:00001B44
.xdata$x:00001B44 ; Segment type: Pure data
.xdata$x:00001B44 ; Segment permissions: Read
.xdata$x:00001B44 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001B44                 assume cs:_xdata$x
.xdata$x:00001B44                 ;org 1B44h
.xdata$x:00001B44 ; COMDAT (pick any)
.xdata$x:00001B44                 public __CT??_R0H@84
.xdata$x:00001B44 __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00001B40o
.xdata$x:00001B45                 db    0
.xdata$x:00001B46                 db    0
.xdata$x:00001B47                 db    0
.xdata$x:00001B48                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00001B4C                 align 10h
.xdata$x:00001B50                 db 0FFh
.xdata$x:00001B51                 db 0FFh
.xdata$x:00001B52                 db 0FFh
.xdata$x:00001B53                 db 0FFh
.xdata$x:00001B54                 db    0
.xdata$x:00001B55                 db    0
.xdata$x:00001B56                 db    0
.xdata$x:00001B57                 db    0
.xdata$x:00001B58                 db    4
.xdata$x:00001B59                 db    0
.xdata$x:00001B5A                 db    0
.xdata$x:00001B5B                 db    0
.xdata$x:00001B5C                 db    0
.xdata$x:00001B5D                 db    0
.xdata$x:00001B5E                 db    0
.xdata$x:00001B5F                 db    0
.xdata$x:00001B5F _xdata$x        ends
.xdata$x:00001B5F
.data:00001B60 ; ===========================================================================
.data:00001B60
.data:00001B60 ; Segment type: Pure data
.data:00001B60 ; Segment permissions: Read/Write
.data:00001B60 _data           segment dword public 'DATA' use32
.data:00001B60                 assume cs:_data
.data:00001B60                 ;org 1B60h
.data:00001B60 ; COMDAT (pick any)
.data:00001B60                 public ??_R0H@8
.data:00001B60 ; int `RTTI Type Descriptor'
.data:00001B60 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00001B48o
.data:00001B60                                         ; const type_info::`vftable'
.data:00001B64                 align 8
.data:00001B68                 db  2Eh ; .
.data:00001B69                 db  48h ; H
.data:00001B6A                 db    0
.data:00001B6B                 align 4
.data:00001B6B _data           ends
.data:00001B6B
.text:00001B6C ; ===========================================================================
.text:00001B6C
.text:00001B6C ; Segment type: Pure code
.text:00001B6C ; Segment permissions: Read/Execute
.text:00001B6C _text           segment para public 'CODE' use32
.text:00001B6C                 assume cs:_text
.text:00001B6C                 ;org 1B6Ch
.text:00001B6C ; COMDAT (pick any)
.text:00001B6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001B6C
.text:00001B6C ; =============== S U B R O U T I N E =======================================
.text:00001B6C
.text:00001B6C ; Attributes: bp-based frame
.text:00001B6C
.text:00001B6C ; _DWORD __thiscall CProp::CProp(CProp *__hidden this)
.text:00001B6C                 public ??0CProp@@QAE@XZ
.text:00001B6C ??0CProp@@QAE@XZ proc near              ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+9Cp
.text:00001B6C                                         ; CMethodProps::SetParam(UString const &,UString const &)+6Ap ...
.text:00001B6C
.text:00001B6C var_4           = dword ptr -4
.text:00001B6C
.text:00001B6C                 push    ebp
.text:00001B6D                 mov     ebp, esp
.text:00001B6F                 push    ecx
.text:00001B70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B77                 mov     [ebp+var_4], ecx
.text:00001B7A                 mov     eax, [ebp+var_4]
.text:00001B7D                 mov     byte ptr [eax+4], 0
.text:00001B81                 mov     ecx, [ebp+var_4]
.text:00001B84                 add     ecx, 8          ; this
.text:00001B87                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001B8C                 mov     eax, [ebp+var_4]
.text:00001B8F                 add     esp, 4
.text:00001B92                 cmp     ebp, esp
.text:00001B94                 call    __RTC_CheckEsp
.text:00001B99                 mov     esp, ebp
.text:00001B9B                 pop     ebp
.text:00001B9C                 retn
.text:00001B9C ??0CProp@@QAE@XZ endp
.text:00001B9C
.text:00001B9C ; ---------------------------------------------------------------------------
.text:00001B9D                 align 10h
.text:00001B9D _text           ends
.text:00001B9D
.text:00001BA0 ; ===========================================================================
.text:00001BA0
.text:00001BA0 ; Segment type: Pure code
.text:00001BA0 ; Segment permissions: Read/Execute
.text:00001BA0 _text           segment para public 'CODE' use32
.text:00001BA0                 assume cs:_text
.text:00001BA0                 ;org 1BA0h
.text:00001BA0 ; COMDAT (pick any)
.text:00001BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BA0
.text:00001BA0 ; =============== S U B R O U T I N E =======================================
.text:00001BA0
.text:00001BA0 ; Attributes: bp-based frame
.text:00001BA0
.text:00001BA0 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00001BA0                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00001BA0 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00001BA0                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+D3p
.text:00001BA0                                         ; CProp::CProp(void)+1Bp
.text:00001BA0                                         ; DATA XREF: ...
.text:00001BA0
.text:00001BA0 var_4           = dword ptr -4
.text:00001BA0
.text:00001BA0                 push    ebp
.text:00001BA1                 mov     ebp, esp
.text:00001BA3                 push    ecx
.text:00001BA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001BAB                 mov     [ebp+var_4], ecx
.text:00001BAE                 xor     eax, eax
.text:00001BB0                 mov     ecx, [ebp+var_4]
.text:00001BB3                 mov     [ecx], ax
.text:00001BB6                 xor     edx, edx
.text:00001BB8                 mov     eax, [ebp+var_4]
.text:00001BBB                 mov     [eax+2], dx
.text:00001BBF                 mov     ecx, [ebp+var_4]
.text:00001BC2                 mov     dword ptr [ecx+8], 0
.text:00001BC9                 mov     eax, [ebp+var_4]
.text:00001BCC                 mov     esp, ebp
.text:00001BCE                 pop     ebp
.text:00001BCF                 retn
.text:00001BCF ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00001BCF
.text:00001BCF _text           ends
.text:00001BCF
.text:00001BD0 ; ===========================================================================
.text:00001BD0
.text:00001BD0 ; Segment type: Pure code
.text:00001BD0 ; Segment permissions: Read/Execute
.text:00001BD0 _text           segment para public 'CODE' use32
.text:00001BD0                 assume cs:_text
.text:00001BD0                 ;org 1BD0h
.text:00001BD0 ; COMDAT (pick any)
.text:00001BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001BD0
.text:00001BD0 ; =============== S U B R O U T I N E =======================================
.text:00001BD0
.text:00001BD0 ; Attributes: bp-based frame
.text:00001BD0
.text:00001BD0 ; public: __thiscall CCoderProps::CCoderProps(unsigned int)
.text:00001BD0                 public ??0CCoderProps@@QAE@I@Z
.text:00001BD0 ??0CCoderProps@@QAE@I@Z proc near       ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+51p
.text:00001BD0
.text:00001BD0 var_24          = dword ptr -24h
.text:00001BD0 var_20          = dword ptr -20h
.text:00001BD0 var_1C          = dword ptr -1Ch
.text:00001BD0 var_18          = dword ptr -18h
.text:00001BD0 var_14          = dword ptr -14h
.text:00001BD0 var_10          = dword ptr -10h
.text:00001BD0 var_C           = dword ptr -0Ch
.text:00001BD0 var_4           = dword ptr -4
.text:00001BD0 arg_0           = dword ptr  8
.text:00001BD0
.text:00001BD0                 push    ebp
.text:00001BD1                 mov     ebp, esp
.text:00001BD3                 push    0FFFFFFFFh
.text:00001BD5                 push    offset __ehhandler$??0CCoderProps@@QAE@I@Z
.text:00001BDA                 mov     eax, large fs:0
.text:00001BE0                 push    eax
.text:00001BE1                 sub     esp, 18h
.text:00001BE4                 mov     eax, 0CCCCCCCCh
.text:00001BE9                 mov     [ebp+var_24], eax
.text:00001BEC                 mov     [ebp+var_20], eax
.text:00001BEF                 mov     [ebp+var_1C], eax
.text:00001BF2                 mov     [ebp+var_18], eax
.text:00001BF5                 mov     [ebp+var_14], eax
.text:00001BF8                 mov     [ebp+var_10], eax
.text:00001BFB                 mov     eax, dword ptr ds:___security_cookie
.text:00001C00                 xor     eax, ebp
.text:00001C02                 push    eax
.text:00001C03                 lea     eax, [ebp+var_C]
.text:00001C06                 mov     large fs:0, eax
.text:00001C0C                 mov     [ebp+var_10], ecx
.text:00001C0F                 mov     eax, [ebp+var_10]
.text:00001C12                 mov     ecx, [ebp+arg_0]
.text:00001C15                 mov     [eax+0Ch], ecx
.text:00001C18                 mov     edx, [ebp+var_10]
.text:00001C1B                 mov     dword ptr [edx+8], 0
.text:00001C22                 xor     ecx, ecx
.text:00001C24                 mov     eax, [ebp+arg_0]
.text:00001C27                 mov     edx, 4
.text:00001C2C                 mul     edx
.text:00001C2E                 seto    cl
.text:00001C31                 neg     ecx
.text:00001C33                 or      ecx, eax
.text:00001C35                 push    ecx             ; unsigned int
.text:00001C36                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C3B                 add     esp, 4
.text:00001C3E                 mov     [ebp+var_14], eax
.text:00001C41                 mov     eax, [ebp+var_10]
.text:00001C44                 mov     ecx, [ebp+var_14]
.text:00001C47                 mov     [eax], ecx
.text:00001C49                 mov     edx, [ebp+arg_0]
.text:00001C4C                 mov     [ebp+var_18], edx
.text:00001C4F                 xor     ecx, ecx
.text:00001C51                 mov     eax, [ebp+var_18]
.text:00001C54                 mov     edx, 10h
.text:00001C59                 mul     edx
.text:00001C5B                 seto    cl
.text:00001C5E                 neg     ecx
.text:00001C60                 or      ecx, eax
.text:00001C62                 xor     eax, eax
.text:00001C64                 add     ecx, 4
.text:00001C67                 setb    al
.text:00001C6A                 neg     eax
.text:00001C6C                 or      eax, ecx
.text:00001C6E                 push    eax             ; unsigned int
.text:00001C6F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C74                 add     esp, 4
.text:00001C77                 mov     [ebp+var_20], eax
.text:00001C7A                 mov     [ebp+var_4], 0
.text:00001C81                 cmp     [ebp+var_20], 0
.text:00001C85                 jz      short loc_1CB6
.text:00001C87                 mov     ecx, [ebp+var_20]
.text:00001C8A                 mov     edx, [ebp+var_18]
.text:00001C8D                 mov     [ecx], edx
.text:00001C8F                 push    offset ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001C94                 push    offset ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00001C99                 mov     eax, [ebp+var_18]
.text:00001C9C                 push    eax
.text:00001C9D                 push    10h
.text:00001C9F                 mov     ecx, [ebp+var_20]
.text:00001CA2                 add     ecx, 4
.text:00001CA5                 push    ecx
.text:00001CA6                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:00001CAB                 mov     edx, [ebp+var_20]
.text:00001CAE                 add     edx, 4
.text:00001CB1                 mov     [ebp+var_24], edx
.text:00001CB4                 jmp     short loc_1CBD
.text:00001CB6 ; ---------------------------------------------------------------------------
.text:00001CB6
.text:00001CB6 loc_1CB6:                               ; CODE XREF: CCoderProps::CCoderProps(uint)+B5j
.text:00001CB6                 mov     [ebp+var_24], 0
.text:00001CBD
.text:00001CBD loc_1CBD:                               ; CODE XREF: CCoderProps::CCoderProps(uint)+E4j
.text:00001CBD                 mov     eax, [ebp+var_24]
.text:00001CC0                 mov     [ebp+var_1C], eax
.text:00001CC3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001CCA                 mov     ecx, [ebp+var_10]
.text:00001CCD                 mov     edx, [ebp+var_1C]
.text:00001CD0                 mov     [ecx+4], edx
.text:00001CD3                 mov     eax, [ebp+var_10]
.text:00001CD6                 mov     ecx, [ebp+var_C]
.text:00001CD9                 mov     large fs:0, ecx
.text:00001CE0                 pop     ecx
.text:00001CE1                 add     esp, 24h
.text:00001CE4                 cmp     ebp, esp
.text:00001CE6                 call    __RTC_CheckEsp
.text:00001CEB                 mov     esp, ebp
.text:00001CED                 pop     ebp
.text:00001CEE                 retn    4
.text:00001CEE ??0CCoderProps@@QAE@I@Z endp
.text:00001CEE
.text:00001CEE ; ---------------------------------------------------------------------------
.text:00001CF1                 align 4
.text:00001CF1 _text           ends
.text:00001CF1
.text$x:00001CF4 ; ===========================================================================
.text$x:00001CF4
.text$x:00001CF4 ; Segment type: Pure code
.text$x:00001CF4 ; Segment permissions: Read/Execute
.text$x:00001CF4 _text$x         segment para public 'CODE' use32
.text$x:00001CF4                 assume cs:_text$x
.text$x:00001CF4                 ;org 1CF4h
.text$x:00001CF4 ; COMDAT (pick associative to section at 1BD0)
.text$x:00001CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001CF4
.text$x:00001CF4 ; =============== S U B R O U T I N E =======================================
.text$x:00001CF4
.text$x:00001CF4
.text$x:00001CF4 __unwindfunclet$??0CCoderProps@@QAE@I@Z$0 proc near
.text$x:00001CF4                                         ; DATA XREF: .xdata$x:00001D20o
.text$x:00001CF4                 mov     eax, [ebp-20h]
.text$x:00001CF7                 push    eax             ; void *
.text$x:00001CF8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001CFD                 pop     ecx
.text$x:00001CFE                 retn
.text$x:00001CFE __unwindfunclet$??0CCoderProps@@QAE@I@Z$0 endp
.text$x:00001CFE
.text$x:00001CFF
.text$x:00001CFF ; =============== S U B R O U T I N E =======================================
.text$x:00001CFF
.text$x:00001CFF
.text$x:00001CFF __ehhandler$??0CCoderProps@@QAE@I@Z proc near
.text$x:00001CFF                                         ; DATA XREF: CCoderProps::CCoderProps(uint)+5o
.text$x:00001CFF
.text$x:00001CFF arg_4           = dword ptr  8
.text$x:00001CFF
.text$x:00001CFF                 mov     edx, [esp+arg_4]
.text$x:00001D03                 lea     eax, [edx+0Ch]
.text$x:00001D06                 mov     ecx, [edx-1Ch]
.text$x:00001D09                 xor     ecx, eax
.text$x:00001D0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001D10                 mov     eax, offset __ehfuncinfo$??0CCoderProps@@QAE@I@Z
.text$x:00001D15                 jmp     ___CxxFrameHandler3
.text$x:00001D15 __ehhandler$??0CCoderProps@@QAE@I@Z endp
.text$x:00001D15
.text$x:00001D15 ; ---------------------------------------------------------------------------
.text$x:00001D1A                 align 4
.text$x:00001D1A _text$x         ends
.text$x:00001D1A
.xdata$x:00001D1C ; ===========================================================================
.xdata$x:00001D1C
.xdata$x:00001D1C ; Segment type: Pure data
.xdata$x:00001D1C ; Segment permissions: Read
.xdata$x:00001D1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001D1C                 assume cs:_xdata$x
.xdata$x:00001D1C                 ;org 1D1Ch
.xdata$x:00001D1C ; COMDAT (pick associative to section at 1BD0)
.xdata$x:00001D1C __unwindtable$??0CCoderProps@@QAE@I@Z db 0FFh
.xdata$x:00001D1C                                         ; DATA XREF: .xdata$x:00001D2Co
.xdata$x:00001D1D                 db 0FFh
.xdata$x:00001D1E                 db 0FFh
.xdata$x:00001D1F                 db 0FFh
.xdata$x:00001D20                 dd offset __unwindfunclet$??0CCoderProps@@QAE@I@Z$0
.xdata$x:00001D24 __ehfuncinfo$??0CCoderProps@@QAE@I@Z db  22h ; "
.xdata$x:00001D24                                         ; DATA XREF: __ehhandler$??0CCoderProps@@QAE@I@Z+11o
.xdata$x:00001D25                 db    5
.xdata$x:00001D26                 db  93h ; ô
.xdata$x:00001D27                 db  19h
.xdata$x:00001D28                 db    1
.xdata$x:00001D29                 db    0
.xdata$x:00001D2A                 db    0
.xdata$x:00001D2B                 db    0
.xdata$x:00001D2C                 dd offset __unwindtable$??0CCoderProps@@QAE@I@Z
.xdata$x:00001D30                 db    0
.xdata$x:00001D31                 db    0
.xdata$x:00001D32                 db    0
.xdata$x:00001D33                 db    0
.xdata$x:00001D34                 db    0
.xdata$x:00001D35                 db    0
.xdata$x:00001D36                 db    0
.xdata$x:00001D37                 db    0
.xdata$x:00001D38                 db    0
.xdata$x:00001D39                 db    0
.xdata$x:00001D3A                 db    0
.xdata$x:00001D3B                 db    0
.xdata$x:00001D3C                 db    0
.xdata$x:00001D3D                 db    0
.xdata$x:00001D3E                 db    0
.xdata$x:00001D3F                 db    0
.xdata$x:00001D40                 db    0
.xdata$x:00001D41                 db    0
.xdata$x:00001D42                 db    0
.xdata$x:00001D43                 db    0
.xdata$x:00001D44                 db    1
.xdata$x:00001D45                 db    0
.xdata$x:00001D46                 db    0
.xdata$x:00001D47                 db    0
.xdata$x:00001D47 _xdata$x        ends
.xdata$x:00001D47
.text:00001D48 ; ===========================================================================
.text:00001D48
.text:00001D48 ; Segment type: Pure code
.text:00001D48 ; Segment permissions: Read/Execute
.text:00001D48 _text           segment para public 'CODE' use32
.text:00001D48                 assume cs:_text
.text:00001D48                 ;org 1D48h
.text:00001D48 ; COMDAT (pick any)
.text:00001D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001D48
.text:00001D48 ; =============== S U B R O U T I N E =======================================
.text:00001D48
.text:00001D48 ; Attributes: bp-based frame
.text:00001D48
.text:00001D48 ; _DWORD __thiscall CCoderProps::~CCoderProps(CCoderProps *__hidden this)
.text:00001D48                 public ??1CCoderProps@@QAE@XZ
.text:00001D48 ??1CCoderProps@@QAE@XZ proc near        ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+EFp
.text:00001D48                                         ; __unwindfunclet$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z$0+3j
.text:00001D48
.text:00001D48 var_14          = dword ptr -14h
.text:00001D48 var_10          = dword ptr -10h
.text:00001D48 var_C           = dword ptr -0Ch
.text:00001D48 var_8           = dword ptr -8
.text:00001D48 var_4           = dword ptr -4
.text:00001D48
.text:00001D48                 push    ebp
.text:00001D49                 mov     ebp, esp
.text:00001D4B                 sub     esp, 14h
.text:00001D4E                 mov     eax, 0CCCCCCCCh
.text:00001D53                 mov     [ebp+var_14], eax
.text:00001D56                 mov     [ebp+var_10], eax
.text:00001D59                 mov     [ebp+var_C], eax
.text:00001D5C                 mov     [ebp+var_8], eax
.text:00001D5F                 mov     [ebp+var_4], eax
.text:00001D62                 mov     [ebp+var_4], ecx
.text:00001D65                 mov     eax, [ebp+var_4]
.text:00001D68                 mov     ecx, [eax]
.text:00001D6A                 mov     [ebp+var_8], ecx
.text:00001D6D                 mov     edx, [ebp+var_8]
.text:00001D70                 push    edx             ; void *
.text:00001D71                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001D76                 add     esp, 4
.text:00001D79                 mov     eax, [ebp+var_4]
.text:00001D7C                 mov     ecx, [eax+4]
.text:00001D7F                 mov     [ebp+var_10], ecx
.text:00001D82                 mov     edx, [ebp+var_10]
.text:00001D85                 mov     [ebp+var_C], edx
.text:00001D88                 cmp     [ebp+var_C], 0
.text:00001D8C                 jz      short loc_1D9D
.text:00001D8E                 push    3
.text:00001D90                 mov     ecx, [ebp+var_C]
.text:00001D93                 call    ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z ; NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)
.text:00001D98                 mov     [ebp+var_14], eax
.text:00001D9B                 jmp     short loc_1DA4
.text:00001D9D ; ---------------------------------------------------------------------------
.text:00001D9D
.text:00001D9D loc_1D9D:                               ; CODE XREF: CCoderProps::~CCoderProps(void)+44j
.text:00001D9D                 mov     [ebp+var_14], 0
.text:00001DA4
.text:00001DA4 loc_1DA4:                               ; CODE XREF: CCoderProps::~CCoderProps(void)+53j
.text:00001DA4                 add     esp, 14h
.text:00001DA7                 cmp     ebp, esp
.text:00001DA9                 call    __RTC_CheckEsp
.text:00001DAE                 mov     esp, ebp
.text:00001DB0                 pop     ebp
.text:00001DB1                 retn
.text:00001DB1 ??1CCoderProps@@QAE@XZ endp
.text:00001DB1
.text:00001DB1 ; ---------------------------------------------------------------------------
.text:00001DB2                 align 4
.text:00001DB2 _text           ends
.text:00001DB2
.text:00001DB4 ; ===========================================================================
.text:00001DB4
.text:00001DB4 ; Segment type: Pure code
.text:00001DB4 ; Segment permissions: Read/Execute
.text:00001DB4 _text           segment para public 'CODE' use32
.text:00001DB4                 assume cs:_text
.text:00001DB4                 ;org 1DB4h
.text:00001DB4 ; COMDAT (pick any)
.text:00001DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001DB4
.text:00001DB4 ; =============== S U B R O U T I N E =======================================
.text:00001DB4
.text:00001DB4 ; Attributes: bp-based frame
.text:00001DB4
.text:00001DB4 ; __int32 __thiscall CCoderProps::SetProps(CCoderProps *this, struct ICompressSetCoderProperties *)
.text:00001DB4                 public ?SetProps@CCoderProps@@QAEJPAUICompressSetCoderProperties@@@Z
.text:00001DB4 ?SetProps@CCoderProps@@QAEJPAUICompressSetCoderProperties@@@Z proc near
.text:00001DB4                                         ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+DDp
.text:00001DB4
.text:00001DB4 var_4           = dword ptr -4
.text:00001DB4 arg_0           = dword ptr  8
.text:00001DB4
.text:00001DB4                 push    ebp
.text:00001DB5                 mov     ebp, esp
.text:00001DB7                 push    ecx
.text:00001DB8                 push    esi
.text:00001DB9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DC0                 mov     [ebp+var_4], ecx
.text:00001DC3                 mov     esi, esp
.text:00001DC5                 mov     eax, [ebp+var_4]
.text:00001DC8                 mov     ecx, [eax+8]
.text:00001DCB                 push    ecx
.text:00001DCC                 mov     edx, [ebp+var_4]
.text:00001DCF                 mov     eax, [edx+4]
.text:00001DD2                 push    eax
.text:00001DD3                 mov     ecx, [ebp+var_4]
.text:00001DD6                 mov     edx, [ecx]
.text:00001DD8                 push    edx
.text:00001DD9                 mov     eax, [ebp+arg_0]
.text:00001DDC                 mov     ecx, [eax]
.text:00001DDE                 mov     edx, [ebp+arg_0]
.text:00001DE1                 push    edx
.text:00001DE2                 mov     eax, [ecx+0Ch]
.text:00001DE5                 call    eax
.text:00001DE7                 cmp     esi, esp
.text:00001DE9                 call    __RTC_CheckEsp
.text:00001DEE                 pop     esi
.text:00001DEF                 add     esp, 4
.text:00001DF2                 cmp     ebp, esp
.text:00001DF4                 call    __RTC_CheckEsp
.text:00001DF9                 mov     esp, ebp
.text:00001DFB                 pop     ebp
.text:00001DFC                 retn    4
.text:00001DFC ?SetProps@CCoderProps@@QAEJPAUICompressSetCoderProperties@@@Z endp
.text:00001DFC
.text:00001DFC ; ---------------------------------------------------------------------------
.text:00001DFF                 align 10h
.text:00001DFF _text           ends
.text:00001DFF
.text:00001E00 ; ===========================================================================
.text:00001E00
.text:00001E00 ; Segment type: Pure code
.text:00001E00 ; Segment permissions: Read/Execute
.text:00001E00 _text           segment para public 'CODE' use32
.text:00001E00                 assume cs:_text
.text:00001E00                 ;org 1E00h
.text:00001E00 ; COMDAT (pick any)
.text:00001E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E00
.text:00001E00 ; =============== S U B R O U T I N E =======================================
.text:00001E00
.text:00001E00 ; Attributes: bp-based frame
.text:00001E00
.text:00001E00 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:00001E00                 public ??1CProp@@QAE@XZ
.text:00001E00 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+D1p
.text:00001E00                                         ; CMethodProps::SetParam(UString const &,UString const &)+B2p ...
.text:00001E00
.text:00001E00 var_4           = dword ptr -4
.text:00001E00
.text:00001E00                 push    ebp
.text:00001E01                 mov     ebp, esp
.text:00001E03                 push    ecx
.text:00001E04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E0B                 mov     [ebp+var_4], ecx
.text:00001E0E                 mov     ecx, [ebp+var_4]
.text:00001E11                 add     ecx, 8          ; this
.text:00001E14                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001E19                 add     esp, 4
.text:00001E1C                 cmp     ebp, esp
.text:00001E1E                 call    __RTC_CheckEsp
.text:00001E23                 mov     esp, ebp
.text:00001E25                 pop     ebp
.text:00001E26                 retn
.text:00001E26 ??1CProp@@QAE@XZ endp
.text:00001E26
.text:00001E26 ; ---------------------------------------------------------------------------
.text:00001E27                 align 4
.text:00001E27 _text           ends
.text:00001E27
.text:00001E28 ; ===========================================================================
.text:00001E28
.text:00001E28 ; Segment type: Pure code
.text:00001E28 ; Segment permissions: Read/Execute
.text:00001E28 _text           segment para public 'CODE' use32
.text:00001E28                 assume cs:_text
.text:00001E28                 ;org 1E28h
.text:00001E28 ; COMDAT (pick any)
.text:00001E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E28
.text:00001E28 ; =============== S U B R O U T I N E =======================================
.text:00001E28
.text:00001E28 ; Attributes: bp-based frame
.text:00001E28
.text:00001E28 ; wchar_t __stdcall MyCharLower_Ascii(wchar_t)
.text:00001E28                 public ?MyCharLower_Ascii@@YG_W_W@Z
.text:00001E28 ?MyCharLower_Ascii@@YG_W_W@Z proc near  ; CODE XREF: StringToDictSize(UString const &,uint &)+B2p
.text:00001E28
.text:00001E28 arg_0           = word ptr  8
.text:00001E28
.text:00001E28                 push    ebp
.text:00001E29                 mov     ebp, esp
.text:00001E2B                 movzx   eax, [ebp+arg_0]
.text:00001E2F                 cmp     eax, 41h ; 'A'
.text:00001E32                 jl      short loc_1E46
.text:00001E34                 movzx   ecx, [ebp+arg_0]
.text:00001E38                 cmp     ecx, 5Ah ; 'Z'
.text:00001E3B                 jg      short loc_1E46
.text:00001E3D                 movzx   eax, [ebp+arg_0]
.text:00001E41                 add     eax, 20h ; ' '
.text:00001E44                 jmp     short loc_1E4A
.text:00001E46 ; ---------------------------------------------------------------------------
.text:00001E46
.text:00001E46 loc_1E46:                               ; CODE XREF: MyCharLower_Ascii(wchar_t)+Aj
.text:00001E46                                         ; MyCharLower_Ascii(wchar_t)+13j
.text:00001E46                 mov     ax, [ebp+arg_0]
.text:00001E4A
.text:00001E4A loc_1E4A:                               ; CODE XREF: MyCharLower_Ascii(wchar_t)+1Cj
.text:00001E4A                 pop     ebp
.text:00001E4B                 retn    4
.text:00001E4B ?MyCharLower_Ascii@@YG_W_W@Z endp
.text:00001E4B
.text:00001E4B ; ---------------------------------------------------------------------------
.text:00001E4E                 align 10h
.text:00001E4E _text           ends
.text:00001E4E
.text:00001E50 ; ===========================================================================
.text:00001E50
.text:00001E50 ; Segment type: Pure code
.text:00001E50 ; Segment permissions: Read/Execute
.text:00001E50 _text           segment para public 'CODE' use32
.text:00001E50                 assume cs:_text
.text:00001E50                 ;org 1E50h
.text:00001E50 ; COMDAT (pick any)
.text:00001E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E50
.text:00001E50 ; =============== S U B R O U T I N E =======================================
.text:00001E50
.text:00001E50 ; Attributes: bp-based frame
.text:00001E50
.text:00001E50 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00001E50                 public ?Empty@UString@@QAEXXZ
.text:00001E50 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+C0p
.text:00001E50
.text:00001E50 var_4           = dword ptr -4
.text:00001E50
.text:00001E50                 push    ebp
.text:00001E51                 mov     ebp, esp
.text:00001E53                 push    ecx
.text:00001E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E5B                 mov     [ebp+var_4], ecx
.text:00001E5E                 mov     eax, [ebp+var_4]
.text:00001E61                 mov     dword ptr [eax+4], 0
.text:00001E68                 mov     ecx, [ebp+var_4]
.text:00001E6B                 mov     edx, [ecx]
.text:00001E6D                 xor     eax, eax
.text:00001E6F                 mov     [edx], ax
.text:00001E72                 mov     esp, ebp
.text:00001E74                 pop     ebp
.text:00001E75                 retn
.text:00001E75 ?Empty@UString@@QAEXXZ endp
.text:00001E75
.text:00001E75 ; ---------------------------------------------------------------------------
.text:00001E76                 align 4
.text:00001E76 _text           ends
.text:00001E76
.text:00001E78 ; ===========================================================================
.text:00001E78
.text:00001E78 ; Segment type: Pure code
.text:00001E78 ; Segment permissions: Read/Execute
.text:00001E78 _text           segment para public 'CODE' use32
.text:00001E78                 assume cs:_text
.text:00001E78                 ;org 1E78h
.text:00001E78 ; COMDAT (pick any)
.text:00001E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001E78
.text:00001E78 ; =============== S U B R O U T I N E =======================================
.text:00001E78
.text:00001E78 ; Attributes: bp-based frame
.text:00001E78
.text:00001E78 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00001E78                 public ??YUString@@QAEAAV0@_W@Z
.text:00001E78 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+CFp
.text:00001E78
.text:00001E78 var_C           = dword ptr -0Ch
.text:00001E78 var_8           = dword ptr -8
.text:00001E78 var_4           = dword ptr -4
.text:00001E78 arg_0           = word ptr  8
.text:00001E78
.text:00001E78                 push    ebp
.text:00001E79                 mov     ebp, esp
.text:00001E7B                 sub     esp, 0Ch
.text:00001E7E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001E85                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001E8C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E93                 mov     [ebp+var_4], ecx
.text:00001E96                 mov     eax, [ebp+var_4]
.text:00001E99                 mov     ecx, [ebp+var_4]
.text:00001E9C                 mov     edx, [eax+8]
.text:00001E9F                 cmp     edx, [ecx+4]
.text:00001EA2                 jnz     short loc_1EAC
.text:00001EA4                 mov     ecx, [ebp+var_4] ; this
.text:00001EA7                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:00001EAC
.text:00001EAC loc_1EAC:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:00001EAC                 mov     eax, [ebp+var_4]
.text:00001EAF                 mov     ecx, [eax+4]
.text:00001EB2                 mov     [ebp+var_8], ecx
.text:00001EB5                 mov     edx, [ebp+var_4]
.text:00001EB8                 mov     eax, [edx]
.text:00001EBA                 mov     [ebp+var_C], eax
.text:00001EBD                 mov     ecx, [ebp+var_8]
.text:00001EC0                 mov     edx, [ebp+var_C]
.text:00001EC3                 mov     ax, [ebp+arg_0]
.text:00001EC7                 mov     [edx+ecx*2], ax
.text:00001ECB                 mov     ecx, [ebp+var_8]
.text:00001ECE                 add     ecx, 1
.text:00001ED1                 mov     [ebp+var_8], ecx
.text:00001ED4                 xor     edx, edx
.text:00001ED6                 mov     eax, [ebp+var_8]
.text:00001ED9                 mov     ecx, [ebp+var_C]
.text:00001EDC                 mov     [ecx+eax*2], dx
.text:00001EE0                 mov     edx, [ebp+var_4]
.text:00001EE3                 mov     eax, [ebp+var_8]
.text:00001EE6                 mov     [edx+4], eax
.text:00001EE9                 mov     eax, [ebp+var_4]
.text:00001EEC                 add     esp, 0Ch
.text:00001EEF                 cmp     ebp, esp
.text:00001EF1                 call    __RTC_CheckEsp
.text:00001EF6                 mov     esp, ebp
.text:00001EF8                 pop     ebp
.text:00001EF9                 retn    4
.text:00001EF9 ??YUString@@QAEAAV0@_W@Z endp
.text:00001EF9
.text:00001EF9 _text           ends
.text:00001EF9
.text:00001EFC ; ===========================================================================
.text:00001EFC
.text:00001EFC ; Segment type: Pure code
.text:00001EFC ; Segment permissions: Read/Execute
.text:00001EFC _text           segment para public 'CODE' use32
.text:00001EFC                 assume cs:_text
.text:00001EFC                 ;org 1EFCh
.text:00001EFC ; COMDAT (pick any)
.text:00001EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001EFC
.text:00001EFC ; =============== S U B R O U T I N E =======================================
.text:00001EFC
.text:00001EFC ; Attributes: bp-based frame
.text:00001EFC
.text:00001EFC ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00001EFC                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00001EFC ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: SplitParam(UString const &,UString &,UString &)+4Dp
.text:00001EFC                                         ; SplitParam(UString const &,UString &,UString &)+C1p ...
.text:00001EFC
.text:00001EFC var_4           = dword ptr -4
.text:00001EFC arg_0           = dword ptr  8
.text:00001EFC
.text:00001EFC                 push    ebp
.text:00001EFD                 mov     ebp, esp
.text:00001EFF                 push    ecx
.text:00001F00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F07                 mov     [ebp+var_4], ecx
.text:00001F0A                 mov     eax, [ebp+var_4]
.text:00001F0D                 mov     ecx, [eax]
.text:00001F0F                 mov     edx, [ebp+arg_0]
.text:00001F12                 lea     eax, [ecx+edx*2]
.text:00001F15                 mov     esp, ebp
.text:00001F17                 pop     ebp
.text:00001F18                 retn    4
.text:00001F18 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00001F18
.text:00001F18 ; ---------------------------------------------------------------------------
.text:00001F1B                 align 4
.text:00001F1B _text           ends
.text:00001F1B
.text:00001F1C ; ===========================================================================
.text:00001F1C
.text:00001F1C ; Segment type: Pure code
.text:00001F1C ; Segment permissions: Read/Execute
.text:00001F1C _text           segment para public 'CODE' use32
.text:00001F1C                 assume cs:_text
.text:00001F1C                 ;org 1F1Ch
.text:00001F1C ; COMDAT (pick any)
.text:00001F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F1C
.text:00001F1C ; =============== S U B R O U T I N E =======================================
.text:00001F1C
.text:00001F1C ; Attributes: bp-based frame
.text:00001F1C
.text:00001F1C ; int __thiscall UString::Find(UString *this, wchar_t)
.text:00001F1C                 public ?Find@UString@@QBEH_W@Z
.text:00001F1C ?Find@UString@@QBEH_W@Z proc near       ; CODE XREF: SplitParam(UString const &,UString &,UString &)+20p
.text:00001F1C                                         ; COneMethodInfo::ParseMethodFromString(UString const &)+55p
.text:00001F1C
.text:00001F1C var_4           = dword ptr -4
.text:00001F1C arg_0           = word ptr  8
.text:00001F1C
.text:00001F1C                 push    ebp
.text:00001F1D                 mov     ebp, esp
.text:00001F1F                 push    ecx
.text:00001F20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F27                 mov     [ebp+var_4], ecx
.text:00001F2A                 movzx   eax, [ebp+arg_0]
.text:00001F2E                 push    eax             ; wchar_t
.text:00001F2F                 mov     ecx, [ebp+var_4]
.text:00001F32                 mov     edx, [ecx]
.text:00001F34                 push    edx             ; wchar_t *
.text:00001F35                 call    ?FindCharPosInString@@YGHPB_W_W@Z ; FindCharPosInString(wchar_t const *,wchar_t)
.text:00001F3A                 add     esp, 4
.text:00001F3D                 cmp     ebp, esp
.text:00001F3F                 call    __RTC_CheckEsp
.text:00001F44                 mov     esp, ebp
.text:00001F46                 pop     ebp
.text:00001F47                 retn    4
.text:00001F47 ?Find@UString@@QBEH_W@Z endp
.text:00001F47
.text:00001F47 ; ---------------------------------------------------------------------------
.text:00001F4A                 align 4
.text:00001F4A _text           ends
.text:00001F4A
.text:00001F4C ; ===========================================================================
.text:00001F4C
.text:00001F4C ; Segment type: Pure code
.text:00001F4C ; Segment permissions: Read/Execute
.text:00001F4C _text           segment para public 'CODE' use32
.text:00001F4C                 assume cs:_text
.text:00001F4C                 ;org 1F4Ch
.text:00001F4C ; COMDAT (pick any)
.text:00001F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F4C
.text:00001F4C ; =============== S U B R O U T I N E =======================================
.text:00001F4C
.text:00001F4C ; Attributes: bp-based frame
.text:00001F4C
.text:00001F4C ; void __thiscall AString::Empty(AString *__hidden this)
.text:00001F4C                 public ?Empty@AString@@QAEXXZ
.text:00001F4C ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+4Bp
.text:00001F4C
.text:00001F4C var_4           = dword ptr -4
.text:00001F4C
.text:00001F4C                 push    ebp
.text:00001F4D                 mov     ebp, esp
.text:00001F4F                 push    ecx
.text:00001F50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001F57                 mov     [ebp+var_4], ecx
.text:00001F5A                 mov     eax, [ebp+var_4]
.text:00001F5D                 mov     dword ptr [eax+4], 0
.text:00001F64                 mov     ecx, [ebp+var_4]
.text:00001F67                 mov     edx, [ecx]
.text:00001F69                 mov     byte ptr [edx], 0
.text:00001F6C                 mov     esp, ebp
.text:00001F6E                 pop     ebp
.text:00001F6F                 retn
.text:00001F6F ?Empty@AString@@QAEXXZ endp
.text:00001F6F
.text:00001F6F _text           ends
.text:00001F6F
.text:00001F70 ; ===========================================================================
.text:00001F70
.text:00001F70 ; Segment type: Pure code
.text:00001F70 ; Segment permissions: Read/Execute
.text:00001F70 _text           segment para public 'CODE' use32
.text:00001F70                 assume cs:_text
.text:00001F70                 ;org 1F70h
.text:00001F70 ; COMDAT (pick any)
.text:00001F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001F70
.text:00001F70 ; =============== S U B R O U T I N E =======================================
.text:00001F70
.text:00001F70 ; Attributes: bp-based frame
.text:00001F70
.text:00001F70 ; bool __thiscall UString::IsAscii(UString *__hidden this)
.text:00001F70                 public ?IsAscii@UString@@QBE_NXZ
.text:00001F70 ?IsAscii@UString@@QBE_NXZ proc near     ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+85p
.text:00001F70
.text:00001F70 var_10          = dword ptr -10h
.text:00001F70 var_C           = dword ptr -0Ch
.text:00001F70 var_8           = dword ptr -8
.text:00001F70 var_4           = dword ptr -4
.text:00001F70
.text:00001F70                 push    ebp
.text:00001F71                 mov     ebp, esp
.text:00001F73                 sub     esp, 10h
.text:00001F76                 mov     eax, 0CCCCCCCCh
.text:00001F7B                 mov     [ebp+var_10], eax
.text:00001F7E                 mov     [ebp+var_C], eax
.text:00001F81                 mov     [ebp+var_8], eax
.text:00001F84                 mov     [ebp+var_4], eax
.text:00001F87                 mov     [ebp+var_4], ecx
.text:00001F8A                 mov     ecx, [ebp+var_4] ; this
.text:00001F8D                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:00001F92                 mov     [ebp+var_8], eax
.text:00001F95                 mov     eax, [ebp+var_4]
.text:00001F98                 mov     ecx, [eax]
.text:00001F9A                 mov     [ebp+var_C], ecx
.text:00001F9D                 mov     [ebp+var_10], 0
.text:00001FA4                 jmp     short loc_1FAF
.text:00001FA6 ; ---------------------------------------------------------------------------
.text:00001FA6
.text:00001FA6 loc_1FA6:                               ; CODE XREF: UString::IsAscii(void):loc_1FCCj
.text:00001FA6                 mov     edx, [ebp+var_10]
.text:00001FA9                 add     edx, 1
.text:00001FAC                 mov     [ebp+var_10], edx
.text:00001FAF
.text:00001FAF loc_1FAF:                               ; CODE XREF: UString::IsAscii(void)+34j
.text:00001FAF                 mov     eax, [ebp+var_10]
.text:00001FB2                 cmp     eax, [ebp+var_8]
.text:00001FB5                 jnb     short loc_1FCE
.text:00001FB7                 mov     ecx, [ebp+var_10]
.text:00001FBA                 mov     edx, [ebp+var_C]
.text:00001FBD                 movzx   eax, word ptr [edx+ecx*2]
.text:00001FC1                 cmp     eax, 80h ; 'Ç'
.text:00001FC6                 jl      short loc_1FCC
.text:00001FC8                 xor     al, al
.text:00001FCA                 jmp     short loc_1FD0
.text:00001FCC ; ---------------------------------------------------------------------------
.text:00001FCC
.text:00001FCC loc_1FCC:                               ; CODE XREF: UString::IsAscii(void)+56j
.text:00001FCC                 jmp     short loc_1FA6
.text:00001FCE ; ---------------------------------------------------------------------------
.text:00001FCE
.text:00001FCE loc_1FCE:                               ; CODE XREF: UString::IsAscii(void)+45j
.text:00001FCE                 mov     al, 1
.text:00001FD0
.text:00001FD0 loc_1FD0:                               ; CODE XREF: UString::IsAscii(void)+5Aj
.text:00001FD0                 add     esp, 10h
.text:00001FD3                 cmp     ebp, esp
.text:00001FD5                 call    __RTC_CheckEsp
.text:00001FDA                 mov     esp, ebp
.text:00001FDC                 pop     ebp
.text:00001FDD                 retn
.text:00001FDD ?IsAscii@UString@@QBE_NXZ endp
.text:00001FDD
.text:00001FDD ; ---------------------------------------------------------------------------
.text:00001FDE                 align 10h
.text:00001FDE _text           ends
.text:00001FDE
.text:00001FE0 ; ===========================================================================
.text:00001FE0
.text:00001FE0 ; Segment type: Pure code
.text:00001FE0 ; Segment permissions: Read/Execute
.text:00001FE0 _text           segment para public 'CODE' use32
.text:00001FE0                 assume cs:_text
.text:00001FE0                 ;org 1FE0h
.text:00001FE0 ; COMDAT (pick any)
.text:00001FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001FE0
.text:00001FE0 ; =============== S U B R O U T I N E =======================================
.text:00001FE0
.text:00001FE0 ; Attributes: bp-based frame
.text:00001FE0
.text:00001FE0 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:00001FE0                 public ?DeleteFrom@UString@@QAEXI@Z
.text:00001FE0 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+7Dp
.text:00001FE0
.text:00001FE0 var_4           = dword ptr -4
.text:00001FE0 arg_0           = dword ptr  8
.text:00001FE0
.text:00001FE0                 push    ebp
.text:00001FE1                 mov     ebp, esp
.text:00001FE3                 push    ecx
.text:00001FE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001FEB                 mov     [ebp+var_4], ecx
.text:00001FEE                 mov     eax, [ebp+var_4]
.text:00001FF1                 mov     ecx, [ebp+arg_0]
.text:00001FF4                 cmp     ecx, [eax+4]
.text:00001FF7                 jnb     short loc_2010
.text:00001FF9                 mov     edx, [ebp+var_4]
.text:00001FFC                 mov     eax, [ebp+arg_0]
.text:00001FFF                 mov     [edx+4], eax
.text:00002002                 mov     ecx, [ebp+var_4]
.text:00002005                 mov     edx, [ecx]
.text:00002007                 xor     eax, eax
.text:00002009                 mov     ecx, [ebp+arg_0]
.text:0000200C                 mov     [edx+ecx*2], ax
.text:00002010
.text:00002010 loc_2010:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:00002010                 mov     esp, ebp
.text:00002012                 pop     ebp
.text:00002013                 retn    4
.text:00002013 ?DeleteFrom@UString@@QAEXI@Z endp
.text:00002013
.text:00002013 ; ---------------------------------------------------------------------------
.text:00002016                 align 4
.text:00002016 _text           ends
.text:00002016
.text:00002018 ; ===========================================================================
.text:00002018
.text:00002018 ; Segment type: Pure code
.text:00002018 ; Segment permissions: Read/Execute
.text:00002018 _text           segment para public 'CODE' use32
.text:00002018                 assume cs:_text
.text:00002018                 ;org 2018h
.text:00002018 ; COMDAT (pick any)
.text:00002018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002018
.text:00002018 ; =============== S U B R O U T I N E =======================================
.text:00002018
.text:00002018 ; Attributes: bp-based frame
.text:00002018
.text:00002018 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00002018                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00002018 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00002018                                         ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+3Dp
.text:00002018                                         ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+72p ...
.text:00002018
.text:00002018 var_4           = dword ptr -4
.text:00002018
.text:00002018                 push    ebp
.text:00002019                 mov     ebp, esp
.text:0000201B                 push    ecx
.text:0000201C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002023                 mov     [ebp+var_4], ecx
.text:00002026                 mov     ecx, [ebp+var_4]
.text:00002029                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000202E                 add     esp, 4
.text:00002031                 cmp     ebp, esp
.text:00002033                 call    __RTC_CheckEsp
.text:00002038                 mov     esp, ebp
.text:0000203A                 pop     ebp
.text:0000203B                 retn
.text:0000203B ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:0000203B
.text:0000203B _text           ends
.text:0000203B
.text:0000203C ; ===========================================================================
.text:0000203C
.text:0000203C ; Segment type: Pure code
.text:0000203C ; Segment permissions: Read/Execute
.text:0000203C _text           segment para public 'CODE' use32
.text:0000203C                 assume cs:_text
.text:0000203C                 ;org 203Ch
.text:0000203C ; COMDAT (pick any)
.text:0000203C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000203C
.text:0000203C ; =============== S U B R O U T I N E =======================================
.text:0000203C
.text:0000203C ; Attributes: bp-based frame
.text:0000203C
.text:0000203C ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:0000203C                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:0000203C ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:0000203C                                         ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+83p
.text:0000203C                                         ; CMethodProps::FindProp(ulong)+3Dp ...
.text:0000203C
.text:0000203C var_4           = dword ptr -4
.text:0000203C arg_0           = dword ptr  8
.text:0000203C
.text:0000203C                 push    ebp
.text:0000203D                 mov     ebp, esp
.text:0000203F                 push    ecx
.text:00002040                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002047                 mov     [ebp+var_4], ecx
.text:0000204A                 mov     eax, [ebp+arg_0]
.text:0000204D                 push    eax
.text:0000204E                 mov     ecx, [ebp+var_4]
.text:00002051                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002056                 mov     eax, [eax]
.text:00002058                 add     esp, 4
.text:0000205B                 cmp     ebp, esp
.text:0000205D                 call    __RTC_CheckEsp
.text:00002062                 mov     esp, ebp
.text:00002064                 pop     ebp
.text:00002065                 retn    4
.text:00002065 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:00002065
.text:00002065 _text           ends
.text:00002065
.text:00002068 ; ===========================================================================
.text:00002068
.text:00002068 ; Segment type: Pure code
.text:00002068 ; Segment permissions: Read/Execute
.text:00002068 _text           segment para public 'CODE' use32
.text:00002068                 assume cs:_text
.text:00002068                 ;org 2068h
.text:00002068 ; COMDAT (pick any)
.text:00002068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002068
.text:00002068 ; =============== S U B R O U T I N E =======================================
.text:00002068
.text:00002068 ; Attributes: bp-based frame
.text:00002068
.text:00002068 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Add(struct CProp const &)
.text:00002068                 public ?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z
.text:00002068 ?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z proc near
.text:00002068                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+1EFp
.text:00002068                                         ; CMethodProps::ParseParamsFromPROPVARIANT(UString const &,tagPROPVARIANT const &)+185p
.text:00002068
.text:00002068 var_1C          = dword ptr -1Ch
.text:00002068 var_18          = dword ptr -18h
.text:00002068 var_14          = dword ptr -14h
.text:00002068 var_10          = dword ptr -10h
.text:00002068 var_C           = dword ptr -0Ch
.text:00002068 var_4           = dword ptr -4
.text:00002068 arg_0           = dword ptr  8
.text:00002068
.text:00002068                 push    ebp
.text:00002069                 mov     ebp, esp
.text:0000206B                 push    0FFFFFFFFh
.text:0000206D                 push    offset __ehhandler$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z
.text:00002072                 mov     eax, large fs:0
.text:00002078                 push    eax
.text:00002079                 sub     esp, 10h
.text:0000207C                 mov     eax, 0CCCCCCCCh
.text:00002081                 mov     [ebp+var_1C], eax
.text:00002084                 mov     [ebp+var_18], eax
.text:00002087                 mov     [ebp+var_14], eax
.text:0000208A                 mov     [ebp+var_10], eax
.text:0000208D                 mov     eax, dword ptr ds:___security_cookie
.text:00002092                 xor     eax, ebp
.text:00002094                 push    eax
.text:00002095                 lea     eax, [ebp+var_C]
.text:00002098                 mov     large fs:0, eax
.text:0000209E                 mov     [ebp+var_10], ecx
.text:000020A1                 push    18h             ; unsigned int
.text:000020A3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000020A8                 add     esp, 4
.text:000020AB                 mov     [ebp+var_18], eax
.text:000020AE                 mov     [ebp+var_4], 0
.text:000020B5                 cmp     [ebp+var_18], 0
.text:000020B9                 jz      short loc_20CC
.text:000020BB                 mov     eax, [ebp+arg_0]
.text:000020BE                 push    eax
.text:000020BF                 mov     ecx, [ebp+var_18]
.text:000020C2                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:000020C7                 mov     [ebp+var_1C], eax
.text:000020CA                 jmp     short loc_20D3
.text:000020CC ; ---------------------------------------------------------------------------
.text:000020CC
.text:000020CC loc_20CC:                               ; CODE XREF: CObjectVector<CProp>::Add(CProp const &)+51j
.text:000020CC                 mov     [ebp+var_1C], 0
.text:000020D3
.text:000020D3 loc_20D3:                               ; CODE XREF: CObjectVector<CProp>::Add(CProp const &)+62j
.text:000020D3                 mov     ecx, [ebp+var_1C]
.text:000020D6                 mov     [ebp+var_14], ecx
.text:000020D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000020E0                 mov     edx, [ebp+var_14]
.text:000020E3                 push    edx
.text:000020E4                 mov     ecx, [ebp+var_10]
.text:000020E7                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000020EC                 mov     ecx, [ebp+var_C]
.text:000020EF                 mov     large fs:0, ecx
.text:000020F6                 pop     ecx
.text:000020F7                 add     esp, 1Ch
.text:000020FA                 cmp     ebp, esp
.text:000020FC                 call    __RTC_CheckEsp
.text:00002101                 mov     esp, ebp
.text:00002103                 pop     ebp
.text:00002104                 retn    4
.text:00002104 ?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z endp
.text:00002104
.text:00002104 ; ---------------------------------------------------------------------------
.text:00002107                 align 4
.text:00002107 _text           ends
.text:00002107
.text$x:00002108 ; ===========================================================================
.text$x:00002108
.text$x:00002108 ; Segment type: Pure code
.text$x:00002108 ; Segment permissions: Read/Execute
.text$x:00002108 _text$x         segment para public 'CODE' use32
.text$x:00002108                 assume cs:_text$x
.text$x:00002108                 ;org 2108h
.text$x:00002108 ; COMDAT (pick associative to section at 2068)
.text$x:00002108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002108
.text$x:00002108 ; =============== S U B R O U T I N E =======================================
.text$x:00002108
.text$x:00002108
.text$x:00002108 __unwindfunclet$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z$0 proc near
.text$x:00002108                                         ; DATA XREF: .xdata$x:00002134o
.text$x:00002108                 mov     eax, [ebp-18h]
.text$x:0000210B                 push    eax             ; void *
.text$x:0000210C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002111                 pop     ecx
.text$x:00002112                 retn
.text$x:00002112 __unwindfunclet$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z$0 endp
.text$x:00002112
.text$x:00002113
.text$x:00002113 ; =============== S U B R O U T I N E =======================================
.text$x:00002113
.text$x:00002113
.text$x:00002113 __ehhandler$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z proc near
.text$x:00002113                                         ; DATA XREF: CObjectVector<CProp>::Add(CProp const &)+5o
.text$x:00002113
.text$x:00002113 arg_4           = dword ptr  8
.text$x:00002113
.text$x:00002113                 mov     edx, [esp+arg_4]
.text$x:00002117                 lea     eax, [edx+0Ch]
.text$x:0000211A                 mov     ecx, [edx-14h]
.text$x:0000211D                 xor     ecx, eax
.text$x:0000211F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002124                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z
.text$x:00002129                 jmp     ___CxxFrameHandler3
.text$x:00002129 __ehhandler$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z endp
.text$x:00002129
.text$x:00002129 ; ---------------------------------------------------------------------------
.text$x:0000212E                 align 10h
.text$x:0000212E _text$x         ends
.text$x:0000212E
.xdata$x:00002130 ; ===========================================================================
.xdata$x:00002130
.xdata$x:00002130 ; Segment type: Pure data
.xdata$x:00002130 ; Segment permissions: Read
.xdata$x:00002130 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002130                 assume cs:_xdata$x
.xdata$x:00002130                 ;org 2130h
.xdata$x:00002130 ; COMDAT (pick associative to section at 2068)
.xdata$x:00002130 __unwindtable$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z db 0FFh
.xdata$x:00002130                                         ; DATA XREF: .xdata$x:00002140o
.xdata$x:00002131                 db 0FFh
.xdata$x:00002132                 db 0FFh
.xdata$x:00002133                 db 0FFh
.xdata$x:00002134                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z$0
.xdata$x:00002138 __ehfuncinfo$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z db  22h ; "
.xdata$x:00002138                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z+11o
.xdata$x:00002139                 db    5
.xdata$x:0000213A                 db  93h ; ô
.xdata$x:0000213B                 db  19h
.xdata$x:0000213C                 db    1
.xdata$x:0000213D                 db    0
.xdata$x:0000213E                 db    0
.xdata$x:0000213F                 db    0
.xdata$x:00002140                 dd offset __unwindtable$?Add@?$CObjectVector@UCProp@@@@QAEIABUCProp@@@Z
.xdata$x:00002144                 db    0
.xdata$x:00002145                 db    0
.xdata$x:00002146                 db    0
.xdata$x:00002147                 db    0
.xdata$x:00002148                 db    0
.xdata$x:00002149                 db    0
.xdata$x:0000214A                 db    0
.xdata$x:0000214B                 db    0
.xdata$x:0000214C                 db    0
.xdata$x:0000214D                 db    0
.xdata$x:0000214E                 db    0
.xdata$x:0000214F                 db    0
.xdata$x:00002150                 db    0
.xdata$x:00002151                 db    0
.xdata$x:00002152                 db    0
.xdata$x:00002153                 db    0
.xdata$x:00002154                 db    0
.xdata$x:00002155                 db    0
.xdata$x:00002156                 db    0
.xdata$x:00002157                 db    0
.xdata$x:00002158                 db    1
.xdata$x:00002159                 db    0
.xdata$x:0000215A                 db    0
.xdata$x:0000215B                 db    0
.xdata$x:0000215B _xdata$x        ends
.xdata$x:0000215B
.text:0000215C ; ===========================================================================
.text:0000215C
.text:0000215C ; Segment type: Pure code
.text:0000215C ; Segment permissions: Read/Execute
.text:0000215C _text           segment para public 'CODE' use32
.text:0000215C                 assume cs:_text
.text:0000215C                 ;org 215Ch
.text:0000215C ; COMDAT (pick any)
.text:0000215C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000215C
.text:0000215C ; =============== S U B R O U T I N E =======================================
.text:0000215C
.text:0000215C ; Attributes: bp-based frame
.text:0000215C
.text:0000215C ; public: struct CProp & __thiscall CObjectVector<struct CProp>::AddNew(void)
.text:0000215C                 public ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text:0000215C ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ proc near
.text:0000215C                                         ; CODE XREF: CProps::AddProp32(ulong,uint)+1Ap
.text:0000215C
.text:0000215C var_20          = dword ptr -20h
.text:0000215C var_1C          = dword ptr -1Ch
.text:0000215C var_18          = dword ptr -18h
.text:0000215C var_14          = dword ptr -14h
.text:0000215C var_10          = dword ptr -10h
.text:0000215C var_C           = dword ptr -0Ch
.text:0000215C var_4           = dword ptr -4
.text:0000215C
.text:0000215C                 push    ebp
.text:0000215D                 mov     ebp, esp
.text:0000215F                 push    0FFFFFFFFh
.text:00002161                 push    offset __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text:00002166                 mov     eax, large fs:0
.text:0000216C                 push    eax
.text:0000216D                 sub     esp, 14h
.text:00002170                 mov     eax, 0CCCCCCCCh
.text:00002175                 mov     [ebp+var_20], eax
.text:00002178                 mov     [ebp+var_1C], eax
.text:0000217B                 mov     [ebp+var_18], eax
.text:0000217E                 mov     [ebp+var_14], eax
.text:00002181                 mov     [ebp+var_10], eax
.text:00002184                 mov     eax, dword ptr ds:___security_cookie
.text:00002189                 xor     eax, ebp
.text:0000218B                 push    eax
.text:0000218C                 lea     eax, [ebp+var_C]
.text:0000218F                 mov     large fs:0, eax
.text:00002195                 mov     [ebp+var_10], ecx
.text:00002198                 push    18h             ; unsigned int
.text:0000219A                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000219F                 add     esp, 4
.text:000021A2                 mov     [ebp+var_1C], eax
.text:000021A5                 mov     [ebp+var_4], 0
.text:000021AC                 cmp     [ebp+var_1C], 0
.text:000021B0                 jz      short loc_21BF
.text:000021B2                 mov     ecx, [ebp+var_1C] ; this
.text:000021B5                 call    ??0CProp@@QAE@XZ ; CProp::CProp(void)
.text:000021BA                 mov     [ebp+var_20], eax
.text:000021BD                 jmp     short loc_21C6
.text:000021BF ; ---------------------------------------------------------------------------
.text:000021BF
.text:000021BF loc_21BF:                               ; CODE XREF: CObjectVector<CProp>::AddNew(void)+54j
.text:000021BF                 mov     [ebp+var_20], 0
.text:000021C6
.text:000021C6 loc_21C6:                               ; CODE XREF: CObjectVector<CProp>::AddNew(void)+61j
.text:000021C6                 mov     eax, [ebp+var_20]
.text:000021C9                 mov     [ebp+var_18], eax
.text:000021CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000021D3                 mov     ecx, [ebp+var_18]
.text:000021D6                 mov     [ebp+var_14], ecx
.text:000021D9                 mov     edx, [ebp+var_14]
.text:000021DC                 push    edx
.text:000021DD                 mov     ecx, [ebp+var_10]
.text:000021E0                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:000021E5                 mov     eax, [ebp+var_14]
.text:000021E8                 mov     ecx, [ebp+var_C]
.text:000021EB                 mov     large fs:0, ecx
.text:000021F2                 pop     ecx
.text:000021F3                 add     esp, 20h
.text:000021F6                 cmp     ebp, esp
.text:000021F8                 call    __RTC_CheckEsp
.text:000021FD                 mov     esp, ebp
.text:000021FF                 pop     ebp
.text:00002200                 retn
.text:00002200 ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ endp
.text:00002200
.text:00002200 ; ---------------------------------------------------------------------------
.text:00002201                 align 4
.text:00002201 _text           ends
.text:00002201
.text$x:00002204 ; ===========================================================================
.text$x:00002204
.text$x:00002204 ; Segment type: Pure code
.text$x:00002204 ; Segment permissions: Read/Execute
.text$x:00002204 _text$x         segment para public 'CODE' use32
.text$x:00002204                 assume cs:_text$x
.text$x:00002204                 ;org 2204h
.text$x:00002204 ; COMDAT (pick associative to section at 215C)
.text$x:00002204                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002204
.text$x:00002204 ; =============== S U B R O U T I N E =======================================
.text$x:00002204
.text$x:00002204
.text$x:00002204 __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0 proc near
.text$x:00002204                                         ; DATA XREF: .xdata$x:00002230o
.text$x:00002204                 mov     eax, [ebp-1Ch]
.text$x:00002207                 push    eax             ; void *
.text$x:00002208                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000220D                 pop     ecx
.text$x:0000220E                 retn
.text$x:0000220E __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0 endp
.text$x:0000220E
.text$x:0000220F
.text$x:0000220F ; =============== S U B R O U T I N E =======================================
.text$x:0000220F
.text$x:0000220F
.text$x:0000220F __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ proc near
.text$x:0000220F                                         ; DATA XREF: CObjectVector<CProp>::AddNew(void)+5o
.text$x:0000220F
.text$x:0000220F arg_4           = dword ptr  8
.text$x:0000220F
.text$x:0000220F                 mov     edx, [esp+arg_4]
.text$x:00002213                 lea     eax, [edx+0Ch]
.text$x:00002216                 mov     ecx, [edx-18h]
.text$x:00002219                 xor     ecx, eax
.text$x:0000221B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002220                 mov     eax, offset __ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.text$x:00002225                 jmp     ___CxxFrameHandler3
.text$x:00002225 __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ endp
.text$x:00002225
.text$x:00002225 ; ---------------------------------------------------------------------------
.text$x:0000222A                 align 4
.text$x:0000222A _text$x         ends
.text$x:0000222A
.xdata$x:0000222C ; ===========================================================================
.xdata$x:0000222C
.xdata$x:0000222C ; Segment type: Pure data
.xdata$x:0000222C ; Segment permissions: Read
.xdata$x:0000222C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000222C                 assume cs:_xdata$x
.xdata$x:0000222C                 ;org 222Ch
.xdata$x:0000222C ; COMDAT (pick associative to section at 215C)
.xdata$x:0000222C __unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ db 0FFh
.xdata$x:0000222C                                         ; DATA XREF: .xdata$x:0000223Co
.xdata$x:0000222D                 db 0FFh
.xdata$x:0000222E                 db 0FFh
.xdata$x:0000222F                 db 0FFh
.xdata$x:00002230                 dd offset __unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0
.xdata$x:00002234 __ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ db  22h ; "
.xdata$x:00002234                                         ; DATA XREF: __ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ+11o
.xdata$x:00002235                 db    5
.xdata$x:00002236                 db  93h ; ô
.xdata$x:00002237                 db  19h
.xdata$x:00002238                 db    1
.xdata$x:00002239                 db    0
.xdata$x:0000223A                 db    0
.xdata$x:0000223B                 db    0
.xdata$x:0000223C                 dd offset __unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
.xdata$x:00002240                 db    0
.xdata$x:00002241                 db    0
.xdata$x:00002242                 db    0
.xdata$x:00002243                 db    0
.xdata$x:00002244                 db    0
.xdata$x:00002245                 db    0
.xdata$x:00002246                 db    0
.xdata$x:00002247                 db    0
.xdata$x:00002248                 db    0
.xdata$x:00002249                 db    0
.xdata$x:0000224A                 db    0
.xdata$x:0000224B                 db    0
.xdata$x:0000224C                 db    0
.xdata$x:0000224D                 db    0
.xdata$x:0000224E                 db    0
.xdata$x:0000224F                 db    0
.xdata$x:00002250                 db    0
.xdata$x:00002251                 db    0
.xdata$x:00002252                 db    0
.xdata$x:00002253                 db    0
.xdata$x:00002254                 db    1
.xdata$x:00002255                 db    0
.xdata$x:00002256                 db    0
.xdata$x:00002257                 db    0
.xdata$x:00002257 _xdata$x        ends
.xdata$x:00002257
.text:00002258 ; ===========================================================================
.text:00002258
.text:00002258 ; Segment type: Pure code
.text:00002258 ; Segment permissions: Read/Execute
.text:00002258 _text           segment para public 'CODE' use32
.text:00002258                 assume cs:_text
.text:00002258                 ;org 2258h
.text:00002258 ; COMDAT (pick any)
.text:00002258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002258
.text:00002258 ; =============== S U B R O U T I N E =======================================
.text:00002258
.text:00002258 ; Attributes: bp-based frame
.text:00002258
.text:00002258 ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:00002258                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:00002258 ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:00002258                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+6Bp
.text:00002258
.text:00002258 var_4           = dword ptr -4
.text:00002258
.text:00002258                 push    ebp
.text:00002259                 mov     ebp, esp
.text:0000225B                 push    ecx
.text:0000225C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002263                 mov     [ebp+var_4], ecx
.text:00002266                 mov     ecx, [ebp+var_4]
.text:00002269                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000226E                 add     esp, 4
.text:00002271                 cmp     ebp, esp
.text:00002273                 call    __RTC_CheckEsp
.text:00002278                 mov     esp, ebp
.text:0000227A                 pop     ebp
.text:0000227B                 retn
.text:0000227B ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:0000227B
.text:0000227B _text           ends
.text:0000227B
.text:0000227C ; ===========================================================================
.text:0000227C
.text:0000227C ; Segment type: Pure code
.text:0000227C ; Segment permissions: Read/Execute
.text:0000227C _text           segment para public 'CODE' use32
.text:0000227C                 assume cs:_text
.text:0000227C                 ;org 227Ch
.text:0000227C ; COMDAT (pick any)
.text:0000227C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000227C
.text:0000227C ; =============== S U B R O U T I N E =======================================
.text:0000227C
.text:0000227C ; Attributes: bp-based frame
.text:0000227C
.text:0000227C ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:0000227C                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:0000227C ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:0000227C                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+3Dp
.text:0000227C
.text:0000227C var_4           = dword ptr -4
.text:0000227C
.text:0000227C                 push    ebp
.text:0000227D                 mov     ebp, esp
.text:0000227F                 push    ecx
.text:00002280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002287                 mov     [ebp+var_4], ecx
.text:0000228A                 mov     ecx, [ebp+var_4]
.text:0000228D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00002292                 mov     eax, [ebp+var_4]
.text:00002295                 add     esp, 4
.text:00002298                 cmp     ebp, esp
.text:0000229A                 call    __RTC_CheckEsp
.text:0000229F                 mov     esp, ebp
.text:000022A1                 pop     ebp
.text:000022A2                 retn
.text:000022A2 ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:000022A2
.text:000022A2 ; ---------------------------------------------------------------------------
.text:000022A3                 align 4
.text:000022A3 _text           ends
.text:000022A3
.text:000022A4 ; ===========================================================================
.text:000022A4
.text:000022A4 ; Segment type: Pure code
.text:000022A4 ; Segment permissions: Read/Execute
.text:000022A4 _text           segment para public 'CODE' use32
.text:000022A4                 assume cs:_text
.text:000022A4                 ;org 22A4h
.text:000022A4 ; COMDAT (pick any)
.text:000022A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022A4
.text:000022A4 ; =============== S U B R O U T I N E =======================================
.text:000022A4
.text:000022A4 ; Attributes: bp-based frame
.text:000022A4
.text:000022A4 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:000022A4                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:000022A4 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:000022A4                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+80p
.text:000022A4
.text:000022A4 var_4           = dword ptr -4
.text:000022A4 arg_0           = dword ptr  8
.text:000022A4
.text:000022A4                 push    ebp
.text:000022A5                 mov     ebp, esp
.text:000022A7                 push    ecx
.text:000022A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000022AF                 mov     [ebp+var_4], ecx
.text:000022B2                 mov     eax, [ebp+arg_0]
.text:000022B5                 push    eax
.text:000022B6                 mov     ecx, [ebp+var_4]
.text:000022B9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000022BE                 mov     eax, [eax]
.text:000022C0                 add     esp, 4
.text:000022C3                 cmp     ebp, esp
.text:000022C5                 call    __RTC_CheckEsp
.text:000022CA                 mov     esp, ebp
.text:000022CC                 pop     ebp
.text:000022CD                 retn    4
.text:000022CD ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:000022CD
.text:000022CD _text           ends
.text:000022CD
.text:000022D0 ; ===========================================================================
.text:000022D0
.text:000022D0 ; Segment type: Pure code
.text:000022D0 ; Segment permissions: Read/Execute
.text:000022D0 _text           segment para public 'CODE' use32
.text:000022D0                 assume cs:_text
.text:000022D0                 ;org 22D0h
.text:000022D0 ; COMDAT (pick any)
.text:000022D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000022D0
.text:000022D0 ; =============== S U B R O U T I N E =======================================
.text:000022D0
.text:000022D0 ; Attributes: bp-based frame
.text:000022D0
.text:000022D0 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:000022D0                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:000022D0 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:000022D0                                         ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+B8p
.text:000022D0                                         ; SplitParams(UString const &,CObjectVector<UString> &)+DDp
.text:000022D0
.text:000022D0 var_1C          = dword ptr -1Ch
.text:000022D0 var_18          = dword ptr -18h
.text:000022D0 var_14          = dword ptr -14h
.text:000022D0 var_10          = dword ptr -10h
.text:000022D0 var_C           = dword ptr -0Ch
.text:000022D0 var_4           = dword ptr -4
.text:000022D0 arg_0           = dword ptr  8
.text:000022D0
.text:000022D0                 push    ebp
.text:000022D1                 mov     ebp, esp
.text:000022D3                 push    0FFFFFFFFh
.text:000022D5                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:000022DA                 mov     eax, large fs:0
.text:000022E0                 push    eax
.text:000022E1                 sub     esp, 10h
.text:000022E4                 mov     eax, 0CCCCCCCCh
.text:000022E9                 mov     [ebp+var_1C], eax
.text:000022EC                 mov     [ebp+var_18], eax
.text:000022EF                 mov     [ebp+var_14], eax
.text:000022F2                 mov     [ebp+var_10], eax
.text:000022F5                 mov     eax, dword ptr ds:___security_cookie
.text:000022FA                 xor     eax, ebp
.text:000022FC                 push    eax
.text:000022FD                 lea     eax, [ebp+var_C]
.text:00002300                 mov     large fs:0, eax
.text:00002306                 mov     [ebp+var_10], ecx
.text:00002309                 push    0Ch             ; unsigned int
.text:0000230B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002310                 add     esp, 4
.text:00002313                 mov     [ebp+var_18], eax
.text:00002316                 mov     [ebp+var_4], 0
.text:0000231D                 cmp     [ebp+var_18], 0
.text:00002321                 jz      short loc_2334
.text:00002323                 mov     eax, [ebp+arg_0]
.text:00002326                 push    eax
.text:00002327                 mov     ecx, [ebp+var_18]
.text:0000232A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000232F                 mov     [ebp+var_1C], eax
.text:00002332                 jmp     short loc_233B
.text:00002334 ; ---------------------------------------------------------------------------
.text:00002334
.text:00002334 loc_2334:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00002334                 mov     [ebp+var_1C], 0
.text:0000233B
.text:0000233B loc_233B:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:0000233B                 mov     ecx, [ebp+var_1C]
.text:0000233E                 mov     [ebp+var_14], ecx
.text:00002341                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002348                 mov     edx, [ebp+var_14]
.text:0000234B                 push    edx
.text:0000234C                 mov     ecx, [ebp+var_10]
.text:0000234F                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00002354                 mov     ecx, [ebp+var_C]
.text:00002357                 mov     large fs:0, ecx
.text:0000235E                 pop     ecx
.text:0000235F                 add     esp, 1Ch
.text:00002362                 cmp     ebp, esp
.text:00002364                 call    __RTC_CheckEsp
.text:00002369                 mov     esp, ebp
.text:0000236B                 pop     ebp
.text:0000236C                 retn    4
.text:0000236C ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:0000236C
.text:0000236C ; ---------------------------------------------------------------------------
.text:0000236F                 align 10h
.text:0000236F _text           ends
.text:0000236F
.text$x:00002370 ; ===========================================================================
.text$x:00002370
.text$x:00002370 ; Segment type: Pure code
.text$x:00002370 ; Segment permissions: Read/Execute
.text$x:00002370 _text$x         segment para public 'CODE' use32
.text$x:00002370                 assume cs:_text$x
.text$x:00002370                 ;org 2370h
.text$x:00002370 ; COMDAT (pick associative to section at 22D0)
.text$x:00002370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002370
.text$x:00002370 ; =============== S U B R O U T I N E =======================================
.text$x:00002370
.text$x:00002370
.text$x:00002370 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00002370                                         ; DATA XREF: .xdata$x:0000239Co
.text$x:00002370                 mov     eax, [ebp-18h]
.text$x:00002373                 push    eax             ; void *
.text$x:00002374                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002379                 pop     ecx
.text$x:0000237A                 retn
.text$x:0000237A __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:0000237A
.text$x:0000237B
.text$x:0000237B ; =============== S U B R O U T I N E =======================================
.text$x:0000237B
.text$x:0000237B
.text$x:0000237B __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:0000237B                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:0000237B
.text$x:0000237B arg_4           = dword ptr  8
.text$x:0000237B
.text$x:0000237B                 mov     edx, [esp+arg_4]
.text$x:0000237F                 lea     eax, [edx+0Ch]
.text$x:00002382                 mov     ecx, [edx-14h]
.text$x:00002385                 xor     ecx, eax
.text$x:00002387                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000238C                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00002391                 jmp     ___CxxFrameHandler3
.text$x:00002391 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00002391
.text$x:00002391 ; ---------------------------------------------------------------------------
.text$x:00002396                 align 4
.text$x:00002396 _text$x         ends
.text$x:00002396
.xdata$x:00002398 ; ===========================================================================
.xdata$x:00002398
.xdata$x:00002398 ; Segment type: Pure data
.xdata$x:00002398 ; Segment permissions: Read
.xdata$x:00002398 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002398                 assume cs:_xdata$x
.xdata$x:00002398                 ;org 2398h
.xdata$x:00002398 ; COMDAT (pick associative to section at 22D0)
.xdata$x:00002398 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00002398                                         ; DATA XREF: .xdata$x:000023A8o
.xdata$x:00002399                 db 0FFh
.xdata$x:0000239A                 db 0FFh
.xdata$x:0000239B                 db 0FFh
.xdata$x:0000239C                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:000023A0 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:000023A0                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:000023A1                 db    5
.xdata$x:000023A2                 db  93h ; ô
.xdata$x:000023A3                 db  19h
.xdata$x:000023A4                 db    1
.xdata$x:000023A5                 db    0
.xdata$x:000023A6                 db    0
.xdata$x:000023A7                 db    0
.xdata$x:000023A8                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:000023AC                 align 20h
.xdata$x:000023C0                 db    1
.xdata$x:000023C1                 db    0
.xdata$x:000023C2                 db    0
.xdata$x:000023C3                 db    0
.xdata$x:000023C3 _xdata$x        ends
.xdata$x:000023C3
.text:000023C4 ; ===========================================================================
.text:000023C4
.text:000023C4 ; Segment type: Pure code
.text:000023C4 ; Segment permissions: Read/Execute
.text:000023C4 _text           segment para public 'CODE' use32
.text:000023C4                 assume cs:_text
.text:000023C4                 ;org 23C4h
.text:000023C4 ; COMDAT (pick any)
.text:000023C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000023C4
.text:000023C4 ; =============== S U B R O U T I N E =======================================
.text:000023C4
.text:000023C4 ; Attributes: bp-based frame
.text:000023C4
.text:000023C4 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:000023C4                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:000023C4 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:000023C4                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+F2p
.text:000023C4                                         ; CMethodProps::ParseParamsFromString(UString const &)+12Ap ...
.text:000023C4
.text:000023C4 var_20          = dword ptr -20h
.text:000023C4 var_1C          = dword ptr -1Ch
.text:000023C4 var_18          = dword ptr -18h
.text:000023C4 var_14          = dword ptr -14h
.text:000023C4 var_10          = dword ptr -10h
.text:000023C4 var_C           = dword ptr -0Ch
.text:000023C4 var_4           = dword ptr -4
.text:000023C4
.text:000023C4                 push    ebp
.text:000023C5                 mov     ebp, esp
.text:000023C7                 push    0FFFFFFFFh
.text:000023C9                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:000023CE                 mov     eax, large fs:0
.text:000023D4                 push    eax
.text:000023D5                 sub     esp, 14h
.text:000023D8                 mov     eax, 0CCCCCCCCh
.text:000023DD                 mov     [ebp+var_20], eax
.text:000023E0                 mov     [ebp+var_1C], eax
.text:000023E3                 mov     [ebp+var_18], eax
.text:000023E6                 mov     [ebp+var_14], eax
.text:000023E9                 mov     [ebp+var_10], eax
.text:000023EC                 mov     eax, dword ptr ds:___security_cookie
.text:000023F1                 xor     eax, ebp
.text:000023F3                 push    eax
.text:000023F4                 lea     eax, [ebp+var_C]
.text:000023F7                 mov     large fs:0, eax
.text:000023FD                 mov     [ebp+var_10], ecx
.text:00002400                 mov     [ebp+var_4], 0
.text:00002407                 mov     ecx, [ebp+var_10]
.text:0000240A                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000240F                 mov     [ebp+var_14], eax
.text:00002412
.text:00002412 loc_2412:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_2454j
.text:00002412                 cmp     [ebp+var_14], 0
.text:00002416                 jz      short loc_2456
.text:00002418                 mov     eax, [ebp+var_14]
.text:0000241B                 sub     eax, 1
.text:0000241E                 mov     [ebp+var_14], eax
.text:00002421                 mov     ecx, [ebp+var_14]
.text:00002424                 push    ecx
.text:00002425                 mov     ecx, [ebp+var_10]
.text:00002428                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000242D                 mov     edx, [eax]
.text:0000242F                 mov     [ebp+var_1C], edx
.text:00002432                 mov     eax, [ebp+var_1C]
.text:00002435                 mov     [ebp+var_18], eax
.text:00002438                 cmp     [ebp+var_18], 0
.text:0000243C                 jz      short loc_244D
.text:0000243E                 push    1
.text:00002440                 mov     ecx, [ebp+var_18]
.text:00002443                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00002448                 mov     [ebp+var_20], eax
.text:0000244B                 jmp     short loc_2454
.text:0000244D ; ---------------------------------------------------------------------------
.text:0000244D
.text:0000244D loc_244D:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:0000244D                 mov     [ebp+var_20], 0
.text:00002454
.text:00002454 loc_2454:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00002454                 jmp     short loc_2412
.text:00002456 ; ---------------------------------------------------------------------------
.text:00002456
.text:00002456 loc_2456:                               ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00002456                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000245D                 mov     ecx, [ebp+var_10]
.text:00002460                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00002465                 mov     ecx, [ebp+var_C]
.text:00002468                 mov     large fs:0, ecx
.text:0000246F                 pop     ecx
.text:00002470                 add     esp, 20h
.text:00002473                 cmp     ebp, esp
.text:00002475                 call    __RTC_CheckEsp
.text:0000247A                 mov     esp, ebp
.text:0000247C                 pop     ebp
.text:0000247D                 retn
.text:0000247D ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:0000247D
.text:0000247D ; ---------------------------------------------------------------------------
.text:0000247E                 align 10h
.text:0000247E _text           ends
.text:0000247E
.text$x:00002480 ; ===========================================================================
.text$x:00002480
.text$x:00002480 ; Segment type: Pure code
.text$x:00002480 ; Segment permissions: Read/Execute
.text$x:00002480 _text$x         segment para public 'CODE' use32
.text$x:00002480                 assume cs:_text$x
.text$x:00002480                 ;org 2480h
.text$x:00002480 ; COMDAT (pick associative to section at 23C4)
.text$x:00002480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002480
.text$x:00002480 ; =============== S U B R O U T I N E =======================================
.text$x:00002480
.text$x:00002480
.text$x:00002480 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00002480                                         ; DATA XREF: .xdata$x:000024A8o
.text$x:00002480                 mov     ecx, [ebp-10h]
.text$x:00002483                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00002483 __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00002483
.text$x:00002488
.text$x:00002488 ; =============== S U B R O U T I N E =======================================
.text$x:00002488
.text$x:00002488
.text$x:00002488 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:00002488                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:00002488
.text$x:00002488 arg_4           = dword ptr  8
.text$x:00002488
.text$x:00002488                 mov     edx, [esp+arg_4]
.text$x:0000248C                 lea     eax, [edx+0Ch]
.text$x:0000248F                 mov     ecx, [edx-18h]
.text$x:00002492                 xor     ecx, eax
.text$x:00002494                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002499                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:0000249E                 jmp     ___CxxFrameHandler3
.text$x:0000249E __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:0000249E
.text$x:0000249E ; ---------------------------------------------------------------------------
.text$x:000024A3                 align 4
.text$x:000024A3 _text$x         ends
.text$x:000024A3
.xdata$x:000024A4 ; ===========================================================================
.xdata$x:000024A4
.xdata$x:000024A4 ; Segment type: Pure data
.xdata$x:000024A4 ; Segment permissions: Read
.xdata$x:000024A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000024A4                 assume cs:_xdata$x
.xdata$x:000024A4                 ;org 24A4h
.xdata$x:000024A4 ; COMDAT (pick associative to section at 23C4)
.xdata$x:000024A4 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:000024A4                                         ; DATA XREF: .xdata$x:000024B4o
.xdata$x:000024A5                 db 0FFh
.xdata$x:000024A6                 db 0FFh
.xdata$x:000024A7                 db 0FFh
.xdata$x:000024A8                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:000024AC __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:000024AC                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:000024AD                 db    5
.xdata$x:000024AE                 db  93h ; ô
.xdata$x:000024AF                 db  19h
.xdata$x:000024B0                 db    1
.xdata$x:000024B1                 db    0
.xdata$x:000024B2                 db    0
.xdata$x:000024B3                 db    0
.xdata$x:000024B4                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:000024B8                 db    0
.xdata$x:000024B9                 db    0
.xdata$x:000024BA                 db    0
.xdata$x:000024BB                 db    0
.xdata$x:000024BC                 db    0
.xdata$x:000024BD                 db    0
.xdata$x:000024BE                 db    0
.xdata$x:000024BF                 db    0
.xdata$x:000024C0                 db    0
.xdata$x:000024C1                 db    0
.xdata$x:000024C2                 db    0
.xdata$x:000024C3                 db    0
.xdata$x:000024C4                 db    0
.xdata$x:000024C5                 db    0
.xdata$x:000024C6                 db    0
.xdata$x:000024C7                 db    0
.xdata$x:000024C8                 db    0
.xdata$x:000024C9                 db    0
.xdata$x:000024CA                 db    0
.xdata$x:000024CB                 db    0
.xdata$x:000024CC                 db    1
.xdata$x:000024CD                 db    0
.xdata$x:000024CE                 db    0
.xdata$x:000024CF                 db    0
.xdata$x:000024CF _xdata$x        ends
.xdata$x:000024CF
.text:000024D0 ; ===========================================================================
.text:000024D0
.text:000024D0 ; Segment type: Pure code
.text:000024D0 ; Segment permissions: Read/Execute
.text:000024D0 _text           segment para public 'CODE' use32
.text:000024D0                 assume cs:_text
.text:000024D0                 ;org 24D0h
.text:000024D0 ; COMDAT (pick any)
.text:000024D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000024D0
.text:000024D0 ; =============== S U B R O U T I N E =======================================
.text:000024D0
.text:000024D0 ; Attributes: bp-based frame
.text:000024D0
.text:000024D0 ; public: void __thiscall CObjectVector<class UString>::Clear(void)
.text:000024D0                 public ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
.text:000024D0 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:000024D0                                         ; CODE XREF: SplitParams(UString const &,CObjectVector<UString> &)+45p
.text:000024D0
.text:000024D0 var_14          = dword ptr -14h
.text:000024D0 var_10          = dword ptr -10h
.text:000024D0 var_C           = dword ptr -0Ch
.text:000024D0 var_8           = dword ptr -8
.text:000024D0 var_4           = dword ptr -4
.text:000024D0
.text:000024D0                 push    ebp
.text:000024D1                 mov     ebp, esp
.text:000024D3                 sub     esp, 14h
.text:000024D6                 mov     eax, 0CCCCCCCCh
.text:000024DB                 mov     [ebp+var_14], eax
.text:000024DE                 mov     [ebp+var_10], eax
.text:000024E1                 mov     [ebp+var_C], eax
.text:000024E4                 mov     [ebp+var_8], eax
.text:000024E7                 mov     [ebp+var_4], eax
.text:000024EA                 mov     [ebp+var_4], ecx
.text:000024ED                 mov     ecx, [ebp+var_4]
.text:000024F0                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000024F5                 mov     [ebp+var_8], eax
.text:000024F8
.text:000024F8 loc_24F8:                               ; CODE XREF: CObjectVector<UString>::Clear(void):loc_253Aj
.text:000024F8                 cmp     [ebp+var_8], 0
.text:000024FC                 jz      short loc_253C
.text:000024FE                 mov     eax, [ebp+var_8]
.text:00002501                 sub     eax, 1
.text:00002504                 mov     [ebp+var_8], eax
.text:00002507                 mov     ecx, [ebp+var_8]
.text:0000250A                 push    ecx
.text:0000250B                 mov     ecx, [ebp+var_4]
.text:0000250E                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00002513                 mov     edx, [eax]
.text:00002515                 mov     [ebp+var_10], edx
.text:00002518                 mov     eax, [ebp+var_10]
.text:0000251B                 mov     [ebp+var_C], eax
.text:0000251E                 cmp     [ebp+var_C], 0
.text:00002522                 jz      short loc_2533
.text:00002524                 push    1
.text:00002526                 mov     ecx, [ebp+var_C]
.text:00002529                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:0000252E                 mov     [ebp+var_14], eax
.text:00002531                 jmp     short loc_253A
.text:00002533 ; ---------------------------------------------------------------------------
.text:00002533
.text:00002533 loc_2533:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+52j
.text:00002533                 mov     [ebp+var_14], 0
.text:0000253A
.text:0000253A loc_253A:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+61j
.text:0000253A                 jmp     short loc_24F8
.text:0000253C ; ---------------------------------------------------------------------------
.text:0000253C
.text:0000253C loc_253C:                               ; CODE XREF: CObjectVector<UString>::Clear(void)+2Cj
.text:0000253C                 mov     ecx, [ebp+var_4]
.text:0000253F                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00002544                 add     esp, 14h
.text:00002547                 cmp     ebp, esp
.text:00002549                 call    __RTC_CheckEsp
.text:0000254E                 mov     esp, ebp
.text:00002550                 pop     ebp
.text:00002551                 retn
.text:00002551 ?Clear@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:00002551
.text:00002551 ; ---------------------------------------------------------------------------
.text:00002552                 align 4
.text:00002552 _text           ends
.text:00002552
.text:00002554 ; ===========================================================================
.text:00002554
.text:00002554 ; Segment type: Pure code
.text:00002554 ; Segment permissions: Read/Execute
.text:00002554 _text           segment para public 'CODE' use32
.text:00002554                 assume cs:_text
.text:00002554                 ;org 2554h
.text:00002554 ; COMDAT (pick any)
.text:00002554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002554
.text:00002554 ; =============== S U B R O U T I N E =======================================
.text:00002554
.text:00002554 ; Attributes: bp-based frame
.text:00002554
.text:00002554 ; public: __thiscall CProp::CProp(struct CProp const &)
.text:00002554                 public ??0CProp@@QAE@ABU0@@Z
.text:00002554 ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::Add(CProp const &)+5Ap
.text:00002554
.text:00002554 var_4           = dword ptr -4
.text:00002554 arg_0           = dword ptr  8
.text:00002554
.text:00002554                 push    ebp
.text:00002555                 mov     ebp, esp
.text:00002557                 push    ecx
.text:00002558                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000255F                 mov     [ebp+var_4], ecx
.text:00002562                 mov     eax, [ebp+var_4]
.text:00002565                 mov     ecx, [ebp+arg_0]
.text:00002568                 mov     edx, [ecx]
.text:0000256A                 mov     [eax], edx
.text:0000256C                 mov     eax, [ebp+var_4]
.text:0000256F                 mov     ecx, [ebp+arg_0]
.text:00002572                 mov     dl, [ecx+4]
.text:00002575                 mov     [eax+4], dl
.text:00002578                 mov     eax, [ebp+arg_0]
.text:0000257B                 add     eax, 8
.text:0000257E                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000257F                 mov     ecx, [ebp+var_4]
.text:00002582                 add     ecx, 8          ; this
.text:00002585                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:0000258A                 mov     eax, [ebp+var_4]
.text:0000258D                 add     esp, 4
.text:00002590                 cmp     ebp, esp
.text:00002592                 call    __RTC_CheckEsp
.text:00002597                 mov     esp, ebp
.text:00002599                 pop     ebp
.text:0000259A                 retn    4
.text:0000259A ??0CProp@@QAE@ABU0@@Z endp
.text:0000259A
.text:0000259A ; ---------------------------------------------------------------------------
.text:0000259D                 align 10h
.text:0000259D _text           ends
.text:0000259D
.text:000025A0 ; ===========================================================================
.text:000025A0
.text:000025A0 ; Segment type: Pure code
.text:000025A0 ; Segment permissions: Read/Execute
.text:000025A0 _text           segment para public 'CODE' use32
.text:000025A0                 assume cs:_text
.text:000025A0                 ;org 25A0h
.text:000025A0 ; COMDAT (pick any)
.text:000025A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025A0
.text:000025A0 ; =============== S U B R O U T I N E =======================================
.text:000025A0
.text:000025A0 ; Attributes: bp-based frame
.text:000025A0
.text:000025A0 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:000025A0                 public ??_GUString@@QAEPAXI@Z
.text:000025A0 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:000025A0                                         ; CObjectVector<UString>::Clear(void)+59p
.text:000025A0
.text:000025A0 var_4           = dword ptr -4
.text:000025A0 arg_0           = dword ptr  8
.text:000025A0
.text:000025A0                 push    ebp
.text:000025A1                 mov     ebp, esp
.text:000025A3                 push    ecx
.text:000025A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025AB                 mov     [ebp+var_4], ecx
.text:000025AE                 mov     ecx, [ebp+var_4] ; this
.text:000025B1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000025B6                 mov     eax, [ebp+arg_0]
.text:000025B9                 and     eax, 1
.text:000025BC                 jz      short loc_25CA
.text:000025BE                 mov     ecx, [ebp+var_4]
.text:000025C1                 push    ecx             ; void *
.text:000025C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000025C7                 add     esp, 4
.text:000025CA
.text:000025CA loc_25CA:                               ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:000025CA                 mov     eax, [ebp+var_4]
.text:000025CD                 add     esp, 4
.text:000025D0                 cmp     ebp, esp
.text:000025D2                 call    __RTC_CheckEsp
.text:000025D7                 mov     esp, ebp
.text:000025D9                 pop     ebp
.text:000025DA                 retn    4
.text:000025DA ??_GUString@@QAEPAXI@Z endp
.text:000025DA
.text:000025DA ; ---------------------------------------------------------------------------
.text:000025DD                 align 10h
.text:000025DD _text           ends
.text:000025DD
.text:000025E0 ; ===========================================================================
.text:000025E0
.text:000025E0 ; Segment type: Pure code
.text:000025E0 ; Segment permissions: Read/Execute
.text:000025E0 _text           segment para public 'CODE' use32
.text:000025E0                 assume cs:_text
.text:000025E0                 ;org 25E0h
.text:000025E0 ; COMDAT (pick any)
.text:000025E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000025E0
.text:000025E0 ; =============== S U B R O U T I N E =======================================
.text:000025E0
.text:000025E0 ; Attributes: bp-based frame
.text:000025E0
.text:000025E0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000025E0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000025E0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000025E0                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:000025E0
.text:000025E0 var_4           = dword ptr -4
.text:000025E0
.text:000025E0                 push    ebp
.text:000025E1                 mov     ebp, esp
.text:000025E3                 push    ecx
.text:000025E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000025EB                 mov     [ebp+var_4], ecx
.text:000025EE                 mov     eax, [ebp+var_4]
.text:000025F1                 mov     dword ptr [eax], 0
.text:000025F7                 mov     ecx, [ebp+var_4]
.text:000025FA                 mov     dword ptr [ecx+4], 0
.text:00002601                 mov     edx, [ebp+var_4]
.text:00002604                 mov     dword ptr [edx+8], 0
.text:0000260B                 mov     eax, [ebp+var_4]
.text:0000260E                 mov     esp, ebp
.text:00002610                 pop     ebp
.text:00002611                 retn
.text:00002611 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00002611
.text:00002611 ; ---------------------------------------------------------------------------
.text:00002612                 align 4
.text:00002612 _text           ends
.text:00002612
.text:00002614 ; ===========================================================================
.text:00002614
.text:00002614 ; Segment type: Pure code
.text:00002614 ; Segment permissions: Read/Execute
.text:00002614 _text           segment para public 'CODE' use32
.text:00002614                 assume cs:_text
.text:00002614                 ;org 2614h
.text:00002614 ; COMDAT (pick any)
.text:00002614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002614
.text:00002614 ; =============== S U B R O U T I N E =======================================
.text:00002614
.text:00002614 ; Attributes: bp-based frame
.text:00002614
.text:00002614 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00002614                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00002614 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00002614                                         ; CODE XREF: CObjectVector<CProp>::Size(void)+11p
.text:00002614                                         ; CObjectVector<UString>::Size(void)+11p ...
.text:00002614
.text:00002614 var_4           = dword ptr -4
.text:00002614
.text:00002614                 push    ebp
.text:00002615                 mov     ebp, esp
.text:00002617                 push    ecx
.text:00002618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000261F                 mov     [ebp+var_4], ecx
.text:00002622                 mov     eax, [ebp+var_4]
.text:00002625                 mov     eax, [eax+4]
.text:00002628                 mov     esp, ebp
.text:0000262A                 pop     ebp
.text:0000262B                 retn
.text:0000262B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000262B
.text:0000262B _text           ends
.text:0000262B
.text:0000262C ; ===========================================================================
.text:0000262C
.text:0000262C ; Segment type: Pure code
.text:0000262C ; Segment permissions: Read/Execute
.text:0000262C _text           segment para public 'CODE' use32
.text:0000262C                 assume cs:_text
.text:0000262C                 ;org 262Ch
.text:0000262C ; COMDAT (pick any)
.text:0000262C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000262C
.text:0000262C ; =============== S U B R O U T I N E =======================================
.text:0000262C
.text:0000262C ; Attributes: bp-based frame
.text:0000262C
.text:0000262C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000262C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000262C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000262C                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:0000262C                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j
.text:0000262C
.text:0000262C var_8           = dword ptr -8
.text:0000262C var_4           = dword ptr -4
.text:0000262C
.text:0000262C                 push    ebp
.text:0000262D                 mov     ebp, esp
.text:0000262F                 sub     esp, 8
.text:00002632                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002639                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002640                 mov     [ebp+var_4], ecx
.text:00002643                 mov     eax, [ebp+var_4]
.text:00002646                 mov     ecx, [eax]
.text:00002648                 mov     [ebp+var_8], ecx
.text:0000264B                 mov     edx, [ebp+var_8]
.text:0000264E                 push    edx             ; void *
.text:0000264F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002654                 add     esp, 4
.text:00002657                 add     esp, 8
.text:0000265A                 cmp     ebp, esp
.text:0000265C                 call    __RTC_CheckEsp
.text:00002661                 mov     esp, ebp
.text:00002663                 pop     ebp
.text:00002664                 retn
.text:00002664 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00002664
.text:00002664 ; ---------------------------------------------------------------------------
.text:00002665                 align 4
.text:00002665 _text           ends
.text:00002665
.text:00002668 ; ===========================================================================
.text:00002668
.text:00002668 ; Segment type: Pure code
.text:00002668 ; Segment permissions: Read/Execute
.text:00002668 _text           segment para public 'CODE' use32
.text:00002668                 assume cs:_text
.text:00002668                 ;org 2668h
.text:00002668 ; COMDAT (pick any)
.text:00002668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002668
.text:00002668 ; =============== S U B R O U T I N E =======================================
.text:00002668
.text:00002668 ; Attributes: bp-based frame
.text:00002668
.text:00002668 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00002668                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00002668 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00002668                                         ; CODE XREF: CObjectVector<UString>::Clear(void)+6Fp
.text:00002668
.text:00002668 var_4           = dword ptr -4
.text:00002668
.text:00002668                 push    ebp
.text:00002669                 mov     ebp, esp
.text:0000266B                 push    ecx
.text:0000266C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002673                 mov     [ebp+var_4], ecx
.text:00002676                 mov     eax, [ebp+var_4]
.text:00002679                 mov     dword ptr [eax+4], 0
.text:00002680                 mov     esp, ebp
.text:00002682                 pop     ebp
.text:00002683                 retn
.text:00002683 ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:00002683
.text:00002683 _text           ends
.text:00002683
.text:00002684 ; ===========================================================================
.text:00002684
.text:00002684 ; Segment type: Pure code
.text:00002684 ; Segment permissions: Read/Execute
.text:00002684 _text           segment para public 'CODE' use32
.text:00002684                 assume cs:_text
.text:00002684                 ;org 2684h
.text:00002684 ; COMDAT (pick any)
.text:00002684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002684
.text:00002684 ; =============== S U B R O U T I N E =======================================
.text:00002684
.text:00002684 ; Attributes: bp-based frame
.text:00002684
.text:00002684 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00002684                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00002684 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00002684                                         ; CODE XREF: CObjectVector<CProp>::Add(CProp const &)+7Fp
.text:00002684                                         ; CObjectVector<CProp>::AddNew(void)+84p ...
.text:00002684
.text:00002684 var_8           = dword ptr -8
.text:00002684 var_4           = dword ptr -4
.text:00002684 arg_0           = dword ptr  8
.text:00002684
.text:00002684                 push    ebp
.text:00002685                 mov     ebp, esp
.text:00002687                 sub     esp, 8
.text:0000268A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002691                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002698                 mov     [ebp+var_4], ecx
.text:0000269B                 mov     ecx, [ebp+var_4]
.text:0000269E                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:000026A3                 mov     eax, [ebp+var_4]
.text:000026A6                 mov     ecx, [eax+4]
.text:000026A9                 mov     edx, [ebp+var_4]
.text:000026AC                 mov     eax, [edx]
.text:000026AE                 mov     edx, [ebp+arg_0]
.text:000026B1                 mov     [eax+ecx*4], edx
.text:000026B4                 mov     eax, [ebp+var_4]
.text:000026B7                 mov     ecx, [eax+4]
.text:000026BA                 mov     [ebp+var_8], ecx
.text:000026BD                 mov     edx, [ebp+var_4]
.text:000026C0                 mov     eax, [edx+4]
.text:000026C3                 add     eax, 1
.text:000026C6                 mov     ecx, [ebp+var_4]
.text:000026C9                 mov     [ecx+4], eax
.text:000026CC                 mov     eax, [ebp+var_8]
.text:000026CF                 add     esp, 8
.text:000026D2                 cmp     ebp, esp
.text:000026D4                 call    __RTC_CheckEsp
.text:000026D9                 mov     esp, ebp
.text:000026DB                 pop     ebp
.text:000026DC                 retn    4
.text:000026DC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:000026DC
.text:000026DC ; ---------------------------------------------------------------------------
.text:000026DF                 align 10h
.text:000026DF _text           ends
.text:000026DF
.text:000026E0 ; ===========================================================================
.text:000026E0
.text:000026E0 ; Segment type: Pure code
.text:000026E0 ; Segment permissions: Read/Execute
.text:000026E0 _text           segment para public 'CODE' use32
.text:000026E0                 assume cs:_text
.text:000026E0                 ;org 26E0h
.text:000026E0 ; COMDAT (pick any)
.text:000026E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000026E0
.text:000026E0 ; =============== S U B R O U T I N E =======================================
.text:000026E0
.text:000026E0 ; Attributes: bp-based frame
.text:000026E0
.text:000026E0 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000026E0                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000026E0 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000026E0                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:000026E0
.text:000026E0 var_4           = dword ptr -4
.text:000026E0 arg_0           = dword ptr  8
.text:000026E0
.text:000026E0                 push    ebp
.text:000026E1                 mov     ebp, esp
.text:000026E3                 push    ecx
.text:000026E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000026EB                 mov     [ebp+var_4], ecx
.text:000026EE                 mov     eax, [ebp+var_4]
.text:000026F1                 mov     ecx, [eax]
.text:000026F3                 mov     edx, [ebp+arg_0]
.text:000026F6                 lea     eax, [ecx+edx*4]
.text:000026F9                 mov     esp, ebp
.text:000026FB                 pop     ebp
.text:000026FC                 retn    4
.text:000026FC ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000026FC
.text:000026FC ; ---------------------------------------------------------------------------
.text:000026FF                 align 10h
.text:000026FF _text           ends
.text:000026FF
.text:00002700 ; ===========================================================================
.text:00002700
.text:00002700 ; Segment type: Pure code
.text:00002700 ; Segment permissions: Read/Execute
.text:00002700 _text           segment para public 'CODE' use32
.text:00002700                 assume cs:_text
.text:00002700                 ;org 2700h
.text:00002700 ; COMDAT (pick any)
.text:00002700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002700
.text:00002700 ; =============== S U B R O U T I N E =======================================
.text:00002700
.text:00002700 ; Attributes: bp-based frame
.text:00002700
.text:00002700 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00002700                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00002700 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00002700                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00002700                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p ...
.text:00002700
.text:00002700 var_4           = dword ptr -4
.text:00002700 arg_0           = dword ptr  8
.text:00002700
.text:00002700                 push    ebp
.text:00002701                 mov     ebp, esp
.text:00002703                 push    ecx
.text:00002704                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000270B                 mov     [ebp+var_4], ecx
.text:0000270E                 mov     eax, [ebp+var_4]
.text:00002711                 mov     ecx, [eax]
.text:00002713                 mov     edx, [ebp+arg_0]
.text:00002716                 lea     eax, [ecx+edx*4]
.text:00002719                 mov     esp, ebp
.text:0000271B                 pop     ebp
.text:0000271C                 retn    4
.text:0000271C ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:0000271C
.text:0000271C ; ---------------------------------------------------------------------------
.text:0000271F                 align 10h
.text:0000271F _text           ends
.text:0000271F
.text:00002720 ; ===========================================================================
.text:00002720
.text:00002720 ; Segment type: Pure code
.text:00002720 ; Segment permissions: Read/Execute
.text:00002720 _text           segment para public 'CODE' use32
.text:00002720                 assume cs:_text
.text:00002720                 ;org 2720h
.text:00002720 ; COMDAT (pick any)
.text:00002720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002720
.text:00002720 ; =============== S U B R O U T I N E =======================================
.text:00002720
.text:00002720 ; Attributes: bp-based frame
.text:00002720
.text:00002720 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00002720                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00002720 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00002720                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00002720
.text:00002720 var_14          = dword ptr -14h
.text:00002720 var_10          = dword ptr -10h
.text:00002720 Dst             = dword ptr -0Ch
.text:00002720 var_8           = dword ptr -8
.text:00002720 var_4           = dword ptr -4
.text:00002720
.text:00002720                 push    ebp
.text:00002721                 mov     ebp, esp
.text:00002723                 sub     esp, 14h
.text:00002726                 mov     eax, 0CCCCCCCCh
.text:0000272B                 mov     [ebp+var_14], eax
.text:0000272E                 mov     [ebp+var_10], eax
.text:00002731                 mov     [ebp+Dst], eax
.text:00002734                 mov     [ebp+var_8], eax
.text:00002737                 mov     [ebp+var_4], eax
.text:0000273A                 mov     [ebp+var_4], ecx
.text:0000273D                 mov     eax, [ebp+var_4]
.text:00002740                 mov     ecx, [ebp+var_4]
.text:00002743                 mov     edx, [eax+4]
.text:00002746                 cmp     edx, [ecx+8]
.text:00002749                 jnz     loc_27D4
.text:0000274F                 mov     eax, [ebp+var_4]
.text:00002752                 mov     ecx, [eax+8]
.text:00002755                 shr     ecx, 2
.text:00002758                 mov     edx, [ebp+var_4]
.text:0000275B                 mov     eax, [edx+8]
.text:0000275E                 lea     ecx, [eax+ecx+1]
.text:00002762                 mov     [ebp+var_8], ecx
.text:00002765                 xor     ecx, ecx
.text:00002767                 mov     eax, [ebp+var_8]
.text:0000276A                 mov     edx, 4
.text:0000276F                 mul     edx
.text:00002771                 seto    cl
.text:00002774                 neg     ecx
.text:00002776                 or      ecx, eax
.text:00002778                 push    ecx             ; unsigned int
.text:00002779                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000277E                 add     esp, 4
.text:00002781                 mov     [ebp+var_10], eax
.text:00002784                 mov     eax, [ebp+var_10]
.text:00002787                 mov     [ebp+Dst], eax
.text:0000278A                 mov     ecx, [ebp+var_4]
.text:0000278D                 cmp     dword ptr [ecx+4], 0
.text:00002791                 jz      short loc_27AF
.text:00002793                 mov     edx, [ebp+var_4]
.text:00002796                 mov     eax, [edx+4]
.text:00002799                 shl     eax, 2
.text:0000279C                 push    eax             ; Size
.text:0000279D                 mov     ecx, [ebp+var_4]
.text:000027A0                 mov     edx, [ecx]
.text:000027A2                 push    edx             ; Src
.text:000027A3                 mov     eax, [ebp+Dst]
.text:000027A6                 push    eax             ; Dst
.text:000027A7                 call    _memcpy
.text:000027AC                 add     esp, 0Ch
.text:000027AF
.text:000027AF loc_27AF:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:000027AF                 mov     ecx, [ebp+var_4]
.text:000027B2                 mov     edx, [ecx]
.text:000027B4                 mov     [ebp+var_14], edx
.text:000027B7                 mov     eax, [ebp+var_14]
.text:000027BA                 push    eax             ; void *
.text:000027BB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000027C0                 add     esp, 4
.text:000027C3                 mov     ecx, [ebp+var_4]
.text:000027C6                 mov     edx, [ebp+Dst]
.text:000027C9                 mov     [ecx], edx
.text:000027CB                 mov     eax, [ebp+var_4]
.text:000027CE                 mov     ecx, [ebp+var_8]
.text:000027D1                 mov     [eax+8], ecx
.text:000027D4
.text:000027D4 loc_27D4:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:000027D4                 add     esp, 14h
.text:000027D7                 cmp     ebp, esp
.text:000027D9                 call    __RTC_CheckEsp
.text:000027DE                 mov     esp, ebp
.text:000027E0                 pop     ebp
.text:000027E1                 retn
.text:000027E1 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:000027E1
.text:000027E1 _text           ends
.text:000027E1
UNDEF:000027F0 ; ===========================================================================
UNDEF:000027F0
UNDEF:000027F0 ; Segment type: Externs
UNDEF:000027F0 ; UNDEF
UNDEF:000027F0 ; bool __stdcall StringsAreEqualNoCase_Ascii(const wchar_t *, const char *)
UNDEF:000027F0                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:000027F0                                         ; CODE XREF: StringToBool(UString const &,bool &)+40p
UNDEF:000027F0                                         ; StringToBool(UString const &,bool &)+84p ...
UNDEF:000027F4                 extrn __RTC_CheckEsp:near
UNDEF:000027F4                                         ; CODE XREF: StringToBool(UString const &,bool &)+9Ep
UNDEF:000027F4                                         ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+D8p ...
UNDEF:000027F8                 extrn __RTC_Shutdown:near
UNDEF:000027F8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000027FC                 extrn __RTC_InitBase:near
UNDEF:000027FC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00002800 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00002800                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00002800                                         ; CODE XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+80p
UNDEF:00002800                                         ; PROPVARIANT_to_DictSize(tagPROPVARIANT const &,uint &)+82p ...
UNDEF:00002804                 extrn ___security_cookie:near
UNDEF:00002804                                         ; DATA XREF: PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)+28r
UNDEF:00002804                                         ; CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+26r ...
UNDEF:00002808                 extrn ___CxxFrameHandler3:near
UNDEF:00002808                                         ; CODE XREF: __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z+16j
UNDEF:00002808                                         ; __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z+16j ...
UNDEF:0000280C ; __fastcall __security_check_cookie(x)
UNDEF:0000280C                 extrn @__security_check_cookie@4:near
UNDEF:0000280C                                         ; CODE XREF: __ehhandler$?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z+Cp
UNDEF:0000280C                                         ; __ehhandler$?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z+Cp ...
UNDEF:00002810 ; void __cdecl operator delete(void *)
UNDEF:00002810                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00002810                                         ; NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+3Cp ...
UNDEF:00002814 ; unsigned int __stdcall ConvertStringToUInt32(const wchar_t *, const wchar_t **)
UNDEF:00002814                 extrn ?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z:near
UNDEF:00002814                                         ; CODE XREF: ParseStringToUInt32(UString const &,uint &)+2Ap
UNDEF:00002814                                         ; StringToDictSize(UString const &,uint &)+30p
UNDEF:00002818 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00002818                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00002818                                         ; CODE XREF: ParseStringToUInt32(UString const &,uint &)+46p
UNDEF:00002818                                         ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)+A6p ...
UNDEF:0000281C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:0000281C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:0000281C                                         ; CODE XREF: CProps::AddProp32(ulong,uint)+3Bp
UNDEF:0000281C                                         ; CMethodProps::SetParam(UString const &,UString const &)+C6p ...
UNDEF:00002820 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00002820                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00002820                                         ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+28p
UNDEF:00002824 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00002824                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00002824                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00002828 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class NWindows::NCOM::CPropVariant const &)
UNDEF:00002828                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z:near
UNDEF:00002828                                         ; CODE XREF: CCoderProps::AddProp(CProp const &)+63p
UNDEF:0000282C ; __stdcall _CxxThrowException(x, x)
UNDEF:0000282C                 extrn __CxxThrowException@8:near
UNDEF:0000282C                                         ; CODE XREF: CCoderProps::AddProp(CProp const &)+35p
UNDEF:00002830 ; const type_info::`vftable'
UNDEF:00002830                 extrn ??_7type_info@@6B@:near
UNDEF:00002830                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:00002834 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00002834                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00002834                                         ; CODE XREF: CProps::SetCoderProps(ICompressSetCoderProperties *,unsigned __int64 const *)+B9p
UNDEF:00002838 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:00002838                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:00002838                                         ; CODE XREF: CCoderProps::CCoderProps(uint)+D6p
UNDEF:0000283C ; void *__cdecl operator new(unsigned int)
UNDEF:0000283C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CCoderProps::CCoderProps(uint)+66p
UNDEF:0000283C                                         ; CCoderProps::CCoderProps(uint)+9Fp ...
UNDEF:00002840 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00002840                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00002840                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+149p
UNDEF:00002840                                         ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+5Fp
UNDEF:00002844 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00002844                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00002844                                         ; CODE XREF: CMethodProps::SetParam(UString const &,UString const &)+EEp
UNDEF:00002844                                         ; CMethodProps::SetParam(UString const &,UString const &)+18Fp
UNDEF:00002848 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct tagPROPVARIANT const &)
UNDEF:00002848                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABUtagPROPVARIANT@@@Z:near
UNDEF:00002848                                         ; CODE XREF: ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+30p
UNDEF:00002848                                         ; ConvertProperty(tagPROPVARIANT const &,ushort,NWindows::NCOM::CPropVariant &)+79p
UNDEF:0000284C ; public: __thiscall UString::UString(void)
UNDEF:0000284C                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000284C                                         ; CODE XREF: CMethodProps::ParseParamsFromString(UString const &)+8Bp
UNDEF:0000284C                                         ; CMethodProps::ParseParamsFromString(UString const &)+97p ...
UNDEF:00002850 ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:00002850                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:00002850                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00002854 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00002854                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00002854                                         ; CODE XREF: SplitParam(UString const &,UString &,UString &)+56p
UNDEF:00002854                                         ; SplitParam(UString const &,UString &,UString &)+CAp ...
UNDEF:00002858 ; void __thiscall UString::SetFrom(UString *__hidden this, const wchar_t *, unsigned int)
UNDEF:00002858                 extrn ?SetFrom@UString@@QAEXPB_WI@Z:near
UNDEF:00002858                                         ; CODE XREF: SplitParam(UString const &,UString &,UString &)+3Ep
UNDEF:00002858                                         ; SplitParam(UString const &,UString &,UString &)+B5p
UNDEF:0000285C ; int __stdcall FindCharPosInString(const wchar_t *, wchar_t)
UNDEF:0000285C                 extrn ?FindCharPosInString@@YGHPB_W_W@Z:near
UNDEF:0000285C                                         ; CODE XREF: UString::Find(wchar_t)+19p
UNDEF:00002860 ; void __thiscall AString::SetFromWStr_if_Ascii(AString *__hidden this, const wchar_t *)
UNDEF:00002860                 extrn ?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z:near
UNDEF:00002860                                         ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+BBp
UNDEF:00002864 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00002864                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00002864                                         ; CODE XREF: COneMethodInfo::ParseMethodFromString(UString const &)+64p
UNDEF:00002864                                         ; CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00002868 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:00002868                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:00002868                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:0000286C ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000286C                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:0000286C
UNDEF:0000286C
UNDEF:0000286C                 end