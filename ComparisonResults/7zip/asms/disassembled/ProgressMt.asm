.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : DE49CB3D0BAADAF54264AAF9E8DB2F94
.text:00000000 ; Input CRC32 : 56C7A214
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ProgressMt.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall CMtCompressProgressMixer::Init(CMtCompressProgressMixer *this, int, struct ICompressProgressInfo *)
.text:00000000                 public ?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
.text:00000000 ?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z proc near
.text:00000000
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 sub     esp, 14h
.text:00000014                 mov     eax, 0CCCCCCCCh
.text:00000019                 mov     [ebp+var_20], eax
.text:0000001C                 mov     [ebp+var_1C], eax
.text:0000001F                 mov     [ebp+var_18], eax
.text:00000022                 mov     [ebp+var_14], eax
.text:00000025                 mov     [ebp+var_10], eax
.text:00000028                 mov     eax, dword ptr ds:___security_cookie
.text:0000002D                 xor     eax, ebp
.text:0000002F                 push    eax
.text:00000030                 lea     eax, [ebp+var_C]
.text:00000033                 mov     large fs:0, eax
.text:00000039                 mov     [ebp+var_10], ecx
.text:0000003C                 mov     eax, [ebp+var_10]
.text:0000003F                 add     eax, 30h ; '0'
.text:00000042                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000043                 lea     ecx, [ebp+var_18] ; this
.text:00000046                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:0000004B                 mov     [ebp+var_4], 0
.text:00000052                 mov     ecx, [ebp+var_10]
.text:00000055                 add     ecx, 4
.text:00000058                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:0000005D                 mov     ecx, [ebp+var_10]
.text:00000060                 add     ecx, 10h
.text:00000063                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00000068                 mov     [ebp+var_20], 0
.text:0000006F                 jmp     short loc_7A
.text:00000071 ; ---------------------------------------------------------------------------
.text:00000071
.text:00000071 loc_71:                                 ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+A0j
.text:00000071                 mov     ecx, [ebp+var_20]
.text:00000074                 add     ecx, 1
.text:00000077                 mov     [ebp+var_20], ecx
.text:0000007A
.text:0000007A loc_7A:                                 ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+6Fj
.text:0000007A                 mov     edx, [ebp+var_20]
.text:0000007D                 cmp     edx, [ebp+arg_0]
.text:00000080                 jge     short loc_A2
.text:00000082                 push    0
.text:00000084                 push    0
.text:00000086                 mov     ecx, [ebp+var_10]
.text:00000089                 add     ecx, 4
.text:0000008C                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00000091                 push    0
.text:00000093                 push    0
.text:00000095                 mov     ecx, [ebp+var_10]
.text:00000098                 add     ecx, 10h
.text:0000009B                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:000000A0                 jmp     short loc_71
.text:000000A2 ; ---------------------------------------------------------------------------
.text:000000A2
.text:000000A2 loc_A2:                                 ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+80j
.text:000000A2                 mov     eax, [ebp+var_10]
.text:000000A5                 mov     dword ptr [eax+20h], 0
.text:000000AC                 mov     dword ptr [eax+24h], 0
.text:000000B3                 mov     ecx, [ebp+var_10]
.text:000000B6                 mov     dword ptr [ecx+28h], 0
.text:000000BD                 mov     dword ptr [ecx+2Ch], 0
.text:000000C4                 mov     edx, [ebp+arg_4]
.text:000000C7                 push    edx
.text:000000C8                 mov     ecx, [ebp+var_10]
.text:000000CB                 call    ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)
.text:000000D0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000D7                 lea     ecx, [ebp+var_18] ; this
.text:000000DA                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000000DF                 push    edx
.text:000000E0                 mov     ecx, ebp
.text:000000E2                 push    eax
.text:000000E3                 lea     edx, $LN10
.text:000000E9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000EE                 pop     eax
.text:000000EF                 pop     edx
.text:000000F0                 mov     ecx, [ebp+var_C]
.text:000000F3                 mov     large fs:0, ecx
.text:000000FA                 pop     ecx
.text:000000FB                 add     esp, 20h
.text:000000FE                 cmp     ebp, esp
.text:00000100                 call    __RTC_CheckEsp
.text:00000105                 mov     esp, ebp
.text:00000107                 pop     ebp
.text:00000108                 retn    8
.text:00000108 ?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z endp
.text:00000108
.text:00000108 ; ---------------------------------------------------------------------------
.text:0000010B                 align 4
.text:0000010C $LN10           dd 1                    ; DATA XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+E3o
.text:00000110                 dd offset $LN9
.text:00000114 $LN9            dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000110o
.text:0000011C                 dd offset $LN7          ; "lock"
.text:00000120 $LN7            db 'lock',0             ; DATA XREF: .text:0000011Co
.text:00000125                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; void __thiscall CMtCompressProgressMixer::Reinit(CMtCompressProgressMixer *this, int)
.text:00000130                 public ?Reinit@CMtCompressProgressMixer@@QAEXH@Z
.text:00000130 ?Reinit@CMtCompressProgressMixer@@QAEXH@Z proc near
.text:00000130
.text:00000130 var_1C          = dword ptr -1Ch
.text:00000130 var_18          = dword ptr -18h
.text:00000130 var_14          = dword ptr -14h
.text:00000130 var_10          = dword ptr -10h
.text:00000130 var_C           = dword ptr -0Ch
.text:00000130 var_4           = dword ptr -4
.text:00000130 arg_0           = dword ptr  8
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 push    0FFFFFFFFh
.text:00000135                 push    offset __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
.text:0000013A                 mov     eax, large fs:0
.text:00000140                 push    eax
.text:00000141                 sub     esp, 10h
.text:00000144                 mov     eax, 0CCCCCCCCh
.text:00000149                 mov     [ebp+var_1C], eax
.text:0000014C                 mov     [ebp+var_18], eax
.text:0000014F                 mov     [ebp+var_14], eax
.text:00000152                 mov     [ebp+var_10], eax
.text:00000155                 mov     eax, dword ptr ds:___security_cookie
.text:0000015A                 xor     eax, ebp
.text:0000015C                 push    eax
.text:0000015D                 lea     eax, [ebp+var_C]
.text:00000160                 mov     large fs:0, eax
.text:00000166                 mov     [ebp+var_10], ecx
.text:00000169                 mov     eax, [ebp+var_10]
.text:0000016C                 add     eax, 30h ; '0'
.text:0000016F                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000170                 lea     ecx, [ebp+var_18] ; this
.text:00000173                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:00000178                 mov     [ebp+var_4], 0
.text:0000017F                 mov     ecx, [ebp+arg_0]
.text:00000182                 push    ecx
.text:00000183                 mov     ecx, [ebp+var_10]
.text:00000186                 add     ecx, 4
.text:00000189                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000018E                 mov     dword ptr [eax], 0
.text:00000194                 mov     dword ptr [eax+4], 0
.text:0000019B                 mov     edx, [ebp+arg_0]
.text:0000019E                 push    edx
.text:0000019F                 mov     ecx, [ebp+var_10]
.text:000001A2                 add     ecx, 10h
.text:000001A5                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000001AA                 mov     dword ptr [eax], 0
.text:000001B0                 mov     dword ptr [eax+4], 0
.text:000001B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001BE                 lea     ecx, [ebp+var_18] ; this
.text:000001C1                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:000001C6                 push    edx
.text:000001C7                 mov     ecx, ebp
.text:000001C9                 push    eax
.text:000001CA                 lea     edx, $LN7_0
.text:000001D0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001D5                 pop     eax
.text:000001D6                 pop     edx
.text:000001D7                 mov     ecx, [ebp+var_C]
.text:000001DA                 mov     large fs:0, ecx
.text:000001E1                 pop     ecx
.text:000001E2                 add     esp, 1Ch
.text:000001E5                 cmp     ebp, esp
.text:000001E7                 call    __RTC_CheckEsp
.text:000001EC                 mov     esp, ebp
.text:000001EE                 pop     ebp
.text:000001EF                 retn    4
.text:000001EF ?Reinit@CMtCompressProgressMixer@@QAEXH@Z endp
.text:000001EF
.text:000001EF ; ---------------------------------------------------------------------------
.text:000001F2                 align 4
.text:000001F4 $LN7_0          dd 1                    ; DATA XREF: CMtCompressProgressMixer::Reinit(int)+9Ao
.text:000001F8                 dd offset $LN6
.text:000001FC $LN6            dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000001F8o
.text:00000204                 dd offset $LN4          ; "lock"
.text:00000208 $LN4            db 'lock',0             ; DATA XREF: .text:00000204o
.text:0000020D                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; __int32 __thiscall CMtCompressProgressMixer::SetRatioInfo(CMtCompressProgressMixer *this, int, const unsigned __int64 *, const unsigned __int64 *)
.text:00000210                 public ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
.text:00000210 ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z proc near
.text:00000210                                         ; CODE XREF: CMtCompressProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+18p
.text:00000210
.text:00000210 var_38          = dword ptr -38h
.text:00000210 var_34          = dword ptr -34h
.text:00000210 var_30          = dword ptr -30h
.text:00000210 var_2C          = dword ptr -2Ch
.text:00000210 var_28          = dword ptr -28h
.text:00000210 var_24          = dword ptr -24h
.text:00000210 var_20          = dword ptr -20h
.text:00000210 var_18          = byte ptr -18h
.text:00000210 var_10          = dword ptr -10h
.text:00000210 var_C           = dword ptr -0Ch
.text:00000210 var_4           = dword ptr -4
.text:00000210 arg_0           = dword ptr  8
.text:00000210 arg_4           = dword ptr  0Ch
.text:00000210 arg_8           = dword ptr  10h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 push    0FFFFFFFFh
.text:00000215                 push    offset __ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
.text:0000021A                 mov     eax, large fs:0
.text:00000220                 push    eax
.text:00000221                 sub     esp, 2Ch
.text:00000224                 push    esi
.text:00000225                 push    edi
.text:00000226                 push    ecx
.text:00000227                 lea     edi, [ebp+var_38]
.text:0000022A                 mov     ecx, 0Bh
.text:0000022F                 mov     eax, 0CCCCCCCCh
.text:00000234                 rep stosd
.text:00000236                 pop     ecx
.text:00000237                 mov     eax, dword ptr ds:___security_cookie
.text:0000023C                 xor     eax, ebp
.text:0000023E                 push    eax
.text:0000023F                 lea     eax, [ebp+var_C]
.text:00000242                 mov     large fs:0, eax
.text:00000248                 mov     [ebp+var_10], ecx
.text:0000024B                 mov     eax, [ebp+var_10]
.text:0000024E                 add     eax, 30h ; '0'
.text:00000251                 push    eax             ; struct NWindows::NSynchronization::CCriticalSection *
.text:00000252                 lea     ecx, [ebp+var_18] ; this
.text:00000255                 call    ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)
.text:0000025A                 mov     [ebp+var_4], 0
.text:00000261                 cmp     [ebp+arg_4], 0
.text:00000265                 jz      short loc_2BD
.text:00000267                 mov     ecx, [ebp+arg_0]
.text:0000026A                 push    ecx
.text:0000026B                 mov     ecx, [ebp+var_10]
.text:0000026E                 add     ecx, 4
.text:00000271                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000276                 mov     edx, [ebp+arg_4]
.text:00000279                 mov     ecx, [edx]
.text:0000027B                 sub     ecx, [eax]
.text:0000027D                 mov     edx, [edx+4]
.text:00000280                 sbb     edx, [eax+4]
.text:00000283                 mov     [ebp+var_24], ecx
.text:00000286                 mov     [ebp+var_20], edx
.text:00000289                 mov     eax, [ebp+arg_0]
.text:0000028C                 push    eax
.text:0000028D                 mov     ecx, [ebp+var_10]
.text:00000290                 add     ecx, 4
.text:00000293                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000298                 mov     ecx, [ebp+arg_4]
.text:0000029B                 mov     edx, [ecx]
.text:0000029D                 mov     [eax], edx
.text:0000029F                 mov     ecx, [ecx+4]
.text:000002A2                 mov     [eax+4], ecx
.text:000002A5                 mov     edx, [ebp+var_10]
.text:000002A8                 mov     eax, [edx+20h]
.text:000002AB                 add     eax, [ebp+var_24]
.text:000002AE                 mov     ecx, [edx+24h]
.text:000002B1                 adc     ecx, [ebp+var_20]
.text:000002B4                 mov     edx, [ebp+var_10]
.text:000002B7                 mov     [edx+20h], eax
.text:000002BA                 mov     [edx+24h], ecx
.text:000002BD
.text:000002BD loc_2BD:                                ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+55j
.text:000002BD                 cmp     [ebp+arg_8], 0
.text:000002C1                 jz      short loc_319
.text:000002C3                 mov     eax, [ebp+arg_0]
.text:000002C6                 push    eax
.text:000002C7                 mov     ecx, [ebp+var_10]
.text:000002CA                 add     ecx, 10h
.text:000002CD                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000002D2                 mov     ecx, [ebp+arg_8]
.text:000002D5                 mov     edx, [ecx]
.text:000002D7                 sub     edx, [eax]
.text:000002D9                 mov     ecx, [ecx+4]
.text:000002DC                 sbb     ecx, [eax+4]
.text:000002DF                 mov     [ebp+var_2C], edx
.text:000002E2                 mov     [ebp+var_28], ecx
.text:000002E5                 mov     edx, [ebp+arg_0]
.text:000002E8                 push    edx
.text:000002E9                 mov     ecx, [ebp+var_10]
.text:000002EC                 add     ecx, 10h
.text:000002EF                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000002F4                 mov     ecx, [ebp+arg_8]
.text:000002F7                 mov     edx, [ecx]
.text:000002F9                 mov     [eax], edx
.text:000002FB                 mov     ecx, [ecx+4]
.text:000002FE                 mov     [eax+4], ecx
.text:00000301                 mov     edx, [ebp+var_10]
.text:00000304                 mov     eax, [edx+28h]
.text:00000307                 add     eax, [ebp+var_2C]
.text:0000030A                 mov     ecx, [edx+2Ch]
.text:0000030D                 adc     ecx, [ebp+var_28]
.text:00000310                 mov     edx, [ebp+var_10]
.text:00000313                 mov     [edx+28h], eax
.text:00000316                 mov     [edx+2Ch], ecx
.text:00000319
.text:00000319 loc_319:                                ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+B1j
.text:00000319                 mov     ecx, [ebp+var_10]
.text:0000031C                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00000321                 test    eax, eax
.text:00000323                 jz      short loc_36C
.text:00000325                 mov     ecx, [ebp+var_10]
.text:00000328                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:0000032D                 mov     [ebp+var_38], eax
.text:00000330                 mov     eax, [ebp+var_10]
.text:00000333                 add     eax, 28h ; '('
.text:00000336                 mov     esi, esp
.text:00000338                 push    eax
.text:00000339                 mov     ecx, [ebp+var_10]
.text:0000033C                 add     ecx, 20h ; ' '
.text:0000033F                 push    ecx
.text:00000340                 mov     edx, [ebp+var_38]
.text:00000343                 push    edx
.text:00000344                 mov     eax, [ebp+var_38]
.text:00000347                 mov     ecx, [eax]
.text:00000349                 mov     edx, [ecx+0Ch]
.text:0000034C                 call    edx
.text:0000034E                 cmp     esi, esp
.text:00000350                 call    __RTC_CheckEsp
.text:00000355                 mov     [ebp+var_30], eax
.text:00000358                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000035F                 lea     ecx, [ebp+var_18] ; this
.text:00000362                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000367                 mov     eax, [ebp+var_30]
.text:0000036A                 jmp     short loc_385
.text:0000036C ; ---------------------------------------------------------------------------
.text:0000036C
.text:0000036C loc_36C:                                ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+113j
.text:0000036C                 mov     [ebp+var_34], 0
.text:00000373                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000037A                 lea     ecx, [ebp+var_18] ; this
.text:0000037D                 call    ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text:00000382                 mov     eax, [ebp+var_34]
.text:00000385
.text:00000385 loc_385:                                ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+15Aj
.text:00000385                 push    edx
.text:00000386                 mov     ecx, ebp
.text:00000388                 push    eax
.text:00000389                 lea     edx, $LN10_0
.text:0000038F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000394                 pop     eax
.text:00000395                 pop     edx
.text:00000396                 mov     ecx, [ebp+var_C]
.text:00000399                 mov     large fs:0, ecx
.text:000003A0                 pop     ecx
.text:000003A1                 pop     edi
.text:000003A2                 pop     esi
.text:000003A3                 add     esp, 38h
.text:000003A6                 cmp     ebp, esp
.text:000003A8                 call    __RTC_CheckEsp
.text:000003AD                 mov     esp, ebp
.text:000003AF                 pop     ebp
.text:000003B0                 retn    0Ch
.text:000003B0 ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z endp
.text:000003B0
.text:000003B0 ; ---------------------------------------------------------------------------
.text:000003B3                 align 4
.text:000003B4 $LN10_0         dd 1                    ; DATA XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+179o
.text:000003B8                 dd offset $LN9_0
.text:000003BC $LN9_0          dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000003B8o
.text:000003C4                 dd offset $LN7_1        ; "lock"
.text:000003C8 $LN7_1          db 'lock',0             ; DATA XREF: .text:000003C4o
.text:000003CD                 align 10h
.text:000003D0
.text:000003D0 ; =============== S U B R O U T I N E =======================================
.text:000003D0
.text:000003D0 ; Attributes: bp-based frame
.text:000003D0
.text:000003D0 ; __int32 __stdcall CMtCompressProgress::SetRatioInfo(CMtCompressProgress *this, const unsigned __int64 *, const unsigned __int64 *)
.text:000003D0                 public ?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z
.text:000003D0 ?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z proc near
.text:000003D0
.text:000003D0 this            = dword ptr  8
.text:000003D0 arg_4           = dword ptr  0Ch
.text:000003D0 arg_8           = dword ptr  10h
.text:000003D0
.text:000003D0                 push    ebp
.text:000003D1                 mov     ebp, esp
.text:000003D3                 mov     eax, [ebp+arg_8]
.text:000003D6                 push    eax             ; unsigned __int64 *
.text:000003D7                 mov     ecx, [ebp+arg_4]
.text:000003DA                 push    ecx             ; unsigned __int64 *
.text:000003DB                 mov     edx, [ebp+this]
.text:000003DE                 mov     eax, [edx+0Ch]
.text:000003E1                 push    eax             ; int
.text:000003E2                 mov     ecx, [ebp+this]
.text:000003E5                 mov     ecx, [ecx+8]    ; this
.text:000003E8                 call    ?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ; CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)
.text:000003ED                 cmp     ebp, esp
.text:000003EF                 call    __RTC_CheckEsp
.text:000003F4                 pop     ebp
.text:000003F5                 retn    0Ch
.text:000003F5 ?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z endp
.text:000003F5
.text:000003F5 _text           ends
.text:000003F5
.text$x:000003F8 ; ===========================================================================
.text$x:000003F8
.text$x:000003F8 ; Segment type: Pure code
.text$x:000003F8 ; Segment permissions: Read/Execute
.text$x:000003F8 _text$x         segment para public 'CODE' use32
.text$x:000003F8                 assume cs:_text$x
.text$x:000003F8                 ;org 3F8h
.text$x:000003F8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:000003F8
.text$x:000003F8 ; =============== S U B R O U T I N E =======================================
.text$x:000003F8
.text$x:000003F8
.text$x:000003F8 __unwindfunclet$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z$0 proc near
.text$x:000003F8                                         ; DATA XREF: .xdata$x:00000468o
.text$x:000003F8                 lea     ecx, [ebp-18h]  ; this
.text$x:000003FB                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:000003FB __unwindfunclet$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z$0 endp
.text$x:000003FB
.text$x:00000400
.text$x:00000400 ; =============== S U B R O U T I N E =======================================
.text$x:00000400
.text$x:00000400
.text$x:00000400 __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z proc near
.text$x:00000400                                         ; DATA XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+5o
.text$x:00000400
.text$x:00000400 arg_4           = dword ptr  8
.text$x:00000400
.text$x:00000400                 mov     edx, [esp+arg_4]
.text$x:00000404                 lea     eax, [edx+0Ch]
.text$x:00000407                 mov     ecx, [edx-18h]
.text$x:0000040A                 xor     ecx, eax
.text$x:0000040C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000411                 mov     eax, offset __ehfuncinfo$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
.text$x:00000416                 jmp     ___CxxFrameHandler3
.text$x:00000416 __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z endp
.text$x:00000416
.text$x:0000041B
.text$x:0000041B ; =============== S U B R O U T I N E =======================================
.text$x:0000041B
.text$x:0000041B
.text$x:0000041B __unwindfunclet$?Reinit@CMtCompressProgressMixer@@QAEXH@Z$0 proc near
.text$x:0000041B                                         ; DATA XREF: .xdata$x:00000494o
.text$x:0000041B                 lea     ecx, [ebp-18h]  ; this
.text$x:0000041E                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:0000041E __unwindfunclet$?Reinit@CMtCompressProgressMixer@@QAEXH@Z$0 endp
.text$x:0000041E
.text$x:00000423
.text$x:00000423 ; =============== S U B R O U T I N E =======================================
.text$x:00000423
.text$x:00000423
.text$x:00000423 __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z proc near
.text$x:00000423                                         ; DATA XREF: CMtCompressProgressMixer::Reinit(int)+5o
.text$x:00000423
.text$x:00000423 arg_4           = dword ptr  8
.text$x:00000423
.text$x:00000423                 mov     edx, [esp+arg_4]
.text$x:00000427                 lea     eax, [edx+0Ch]
.text$x:0000042A                 mov     ecx, [edx-14h]
.text$x:0000042D                 xor     ecx, eax
.text$x:0000042F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000434                 mov     eax, offset __ehfuncinfo$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
.text$x:00000439                 jmp     ___CxxFrameHandler3
.text$x:00000439 __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z endp
.text$x:00000439
.text$x:0000043E
.text$x:0000043E ; =============== S U B R O U T I N E =======================================
.text$x:0000043E
.text$x:0000043E
.text$x:0000043E __unwindfunclet$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z$0 proc near
.text$x:0000043E                                         ; DATA XREF: .xdata$x:000004C0o
.text$x:0000043E                 lea     ecx, [ebp-18h]  ; this
.text$x:00000441                 jmp     ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)
.text$x:00000441 __unwindfunclet$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z$0 endp
.text$x:00000441
.text$x:00000446
.text$x:00000446 ; =============== S U B R O U T I N E =======================================
.text$x:00000446
.text$x:00000446
.text$x:00000446 __ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z proc near
.text$x:00000446                                         ; DATA XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+5o
.text$x:00000446
.text$x:00000446 arg_4           = dword ptr  8
.text$x:00000446
.text$x:00000446                 mov     edx, [esp+arg_4]
.text$x:0000044A                 lea     eax, [edx+0Ch]
.text$x:0000044D                 mov     ecx, [edx-38h]
.text$x:00000450                 xor     ecx, eax
.text$x:00000452                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000457                 mov     eax, offset __ehfuncinfo$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
.text$x:0000045C                 jmp     ___CxxFrameHandler3
.text$x:0000045C __ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z endp
.text$x:0000045C
.text$x:0000045C ; ---------------------------------------------------------------------------
.text$x:00000461                 align 4
.text$x:00000461 _text$x         ends
.text$x:00000461
.xdata$x:00000464 ; ===========================================================================
.xdata$x:00000464
.xdata$x:00000464 ; Segment type: Pure data
.xdata$x:00000464 ; Segment permissions: Read
.xdata$x:00000464 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000464                 assume cs:_xdata$x
.xdata$x:00000464                 ;org 464h
.xdata$x:00000464 __unwindtable$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000464                                         ; DATA XREF: .xdata$x:00000474o
.xdata$x:00000465                 db 0FFh
.xdata$x:00000466                 db 0FFh
.xdata$x:00000467                 db 0FFh
.xdata$x:00000468                 dd offset __unwindfunclet$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z$0
.xdata$x:0000046C __ehfuncinfo$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:0000046C                                         ; DATA XREF: __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z+11o
.xdata$x:0000046D                 db    5
.xdata$x:0000046E                 db  93h ; ô
.xdata$x:0000046F                 db  19h
.xdata$x:00000470                 db    1
.xdata$x:00000471                 db    0
.xdata$x:00000472                 db    0
.xdata$x:00000473                 db    0
.xdata$x:00000474                 dd offset __unwindtable$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
.xdata$x:00000478                 db    0
.xdata$x:00000479                 db    0
.xdata$x:0000047A                 db    0
.xdata$x:0000047B                 db    0
.xdata$x:0000047C                 db    0
.xdata$x:0000047D                 db    0
.xdata$x:0000047E                 db    0
.xdata$x:0000047F                 db    0
.xdata$x:00000480                 db    0
.xdata$x:00000481                 db    0
.xdata$x:00000482                 db    0
.xdata$x:00000483                 db    0
.xdata$x:00000484                 db    0
.xdata$x:00000485                 db    0
.xdata$x:00000486                 db    0
.xdata$x:00000487                 db    0
.xdata$x:00000488                 db    0
.xdata$x:00000489                 db    0
.xdata$x:0000048A                 db    0
.xdata$x:0000048B                 db    0
.xdata$x:0000048C                 db    1
.xdata$x:0000048D                 db    0
.xdata$x:0000048E                 db    0
.xdata$x:0000048F                 db    0
.xdata$x:00000490 __unwindtable$?Reinit@CMtCompressProgressMixer@@QAEXH@Z db 0FFh
.xdata$x:00000490                                         ; DATA XREF: .xdata$x:000004A0o
.xdata$x:00000491                 db 0FFh
.xdata$x:00000492                 db 0FFh
.xdata$x:00000493                 db 0FFh
.xdata$x:00000494                 dd offset __unwindfunclet$?Reinit@CMtCompressProgressMixer@@QAEXH@Z$0
.xdata$x:00000498 __ehfuncinfo$?Reinit@CMtCompressProgressMixer@@QAEXH@Z db  22h ; "
.xdata$x:00000498                                         ; DATA XREF: __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z+11o
.xdata$x:00000499                 db    5
.xdata$x:0000049A                 db  93h ; ô
.xdata$x:0000049B                 db  19h
.xdata$x:0000049C                 db    1
.xdata$x:0000049D                 db    0
.xdata$x:0000049E                 db    0
.xdata$x:0000049F                 db    0
.xdata$x:000004A0                 dd offset __unwindtable$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
.xdata$x:000004A4                 db    0
.xdata$x:000004A5                 db    0
.xdata$x:000004A6                 db    0
.xdata$x:000004A7                 db    0
.xdata$x:000004A8                 db    0
.xdata$x:000004A9                 db    0
.xdata$x:000004AA                 db    0
.xdata$x:000004AB                 db    0
.xdata$x:000004AC                 db    0
.xdata$x:000004AD                 db    0
.xdata$x:000004AE                 db    0
.xdata$x:000004AF                 db    0
.xdata$x:000004B0                 db    0
.xdata$x:000004B1                 db    0
.xdata$x:000004B2                 db    0
.xdata$x:000004B3                 db    0
.xdata$x:000004B4                 db    0
.xdata$x:000004B5                 db    0
.xdata$x:000004B6                 db    0
.xdata$x:000004B7                 db    0
.xdata$x:000004B8                 db    1
.xdata$x:000004B9                 db    0
.xdata$x:000004BA                 db    0
.xdata$x:000004BB                 db    0
.xdata$x:000004BC __unwindtable$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z db 0FFh
.xdata$x:000004BC                                         ; DATA XREF: .xdata$x:000004CCo
.xdata$x:000004BD                 db 0FFh
.xdata$x:000004BE                 db 0FFh
.xdata$x:000004BF                 db 0FFh
.xdata$x:000004C0                 dd offset __unwindfunclet$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z$0
.xdata$x:000004C4 __ehfuncinfo$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z db  22h ; "
.xdata$x:000004C4                                         ; DATA XREF: __ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z+11o
.xdata$x:000004C5                 db    5
.xdata$x:000004C6                 db  93h ; ô
.xdata$x:000004C7                 db  19h
.xdata$x:000004C8                 db    1
.xdata$x:000004C9                 db    0
.xdata$x:000004CA                 db    0
.xdata$x:000004CB                 db    0
.xdata$x:000004CC                 dd offset __unwindtable$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
.xdata$x:000004D0                 db    0
.xdata$x:000004D1                 db    0
.xdata$x:000004D2                 db    0
.xdata$x:000004D3                 db    0
.xdata$x:000004D4                 db    0
.xdata$x:000004D5                 db    0
.xdata$x:000004D6                 db    0
.xdata$x:000004D7                 db    0
.xdata$x:000004D8                 db    0
.xdata$x:000004D9                 db    0
.xdata$x:000004DA                 db    0
.xdata$x:000004DB                 db    0
.xdata$x:000004DC                 db    0
.xdata$x:000004DD                 db    0
.xdata$x:000004DE                 db    0
.xdata$x:000004DF                 db    0
.xdata$x:000004E0                 db    0
.xdata$x:000004E1                 db    0
.xdata$x:000004E2                 db    0
.xdata$x:000004E3                 db    0
.xdata$x:000004E4                 db    1
.xdata$x:000004E5                 db    0
.xdata$x:000004E6                 db    0
.xdata$x:000004E7                 db    0
.xdata$x:000004E7 _xdata$x        ends
.xdata$x:000004E7
.rtc$TMZ:000004E8 ; ===========================================================================
.rtc$TMZ:000004E8
.rtc$TMZ:000004E8 ; Segment type: Pure data
.rtc$TMZ:000004E8 ; Segment permissions: Read
.rtc$TMZ:000004E8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000004E8                 assume cs:_rtc$TMZ
.rtc$TMZ:000004E8                 ;org 4E8h
.rtc$TMZ:000004E8 ; COMDAT (pick any)
.rtc$TMZ:000004E8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000004E8 _rtc$TMZ        ends
.rtc$TMZ:000004E8
.rtc$IMZ:000004EC ; ===========================================================================
.rtc$IMZ:000004EC
.rtc$IMZ:000004EC ; Segment type: Pure data
.rtc$IMZ:000004EC ; Segment permissions: Read
.rtc$IMZ:000004EC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000004EC                 assume cs:_rtc$IMZ
.rtc$IMZ:000004EC                 ;org 4ECh
.rtc$IMZ:000004EC ; COMDAT (pick any)
.rtc$IMZ:000004EC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000004EC _rtc$IMZ        ends
.rtc$IMZ:000004EC
.text:000004F0 ; ===========================================================================
.text:000004F0
.text:000004F0 ; Segment type: Pure code
.text:000004F0 ; Segment permissions: Read/Execute
.text:000004F0 _text           segment para public 'CODE' use32
.text:000004F0                 assume cs:_text
.text:000004F0                 ;org 4F0h
.text:000004F0 ; COMDAT (pick any)
.text:000004F0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000004F0
.text:000004F0 ; =============== S U B R O U T I N E =======================================
.text:000004F0
.text:000004F0 ; Attributes: bp-based frame
.text:000004F0
.text:000004F0 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *this, struct NWindows::NSynchronization::CCriticalSection *)
.text:000004F0                 public ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
.text:000004F0 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
.text:000004F0                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+46p
.text:000004F0                                         ; CMtCompressProgressMixer::Reinit(int)+43p ...
.text:000004F0
.text:000004F0 var_4           = dword ptr -4
.text:000004F0 arg_0           = dword ptr  8
.text:000004F0
.text:000004F0                 push    ebp
.text:000004F1                 mov     ebp, esp
.text:000004F3                 push    ecx
.text:000004F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004FB                 mov     [ebp+var_4], ecx
.text:000004FE                 mov     eax, [ebp+var_4]
.text:00000501                 mov     ecx, [ebp+arg_0]
.text:00000504                 mov     [eax], ecx
.text:00000506                 mov     edx, [ebp+var_4]
.text:00000509                 mov     ecx, [edx]      ; this
.text:0000050B                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00000510                 mov     eax, [ebp+var_4]
.text:00000513                 add     esp, 4
.text:00000516                 cmp     ebp, esp
.text:00000518                 call    __RTC_CheckEsp
.text:0000051D                 mov     esp, ebp
.text:0000051F                 pop     ebp
.text:00000520                 retn    4
.text:00000520 ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z endp
.text:00000520
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000523                 align 4
.text:00000523 _text           ends
.text:00000523
.text:00000524 ; ===========================================================================
.text:00000524
.text:00000524 ; Segment type: Pure code
.text:00000524 ; Segment permissions: Read/Execute
.text:00000524 _text           segment para public 'CODE' use32
.text:00000524                 assume cs:_text
.text:00000524                 ;org 524h
.text:00000524 ; COMDAT (pick any)
.text:00000524                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000524
.text:00000524 ; =============== S U B R O U T I N E =======================================
.text:00000524
.text:00000524 ; Attributes: bp-based frame
.text:00000524
.text:00000524 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00000524                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00000524 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00000524                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock(NWindows::NSynchronization::CCriticalSection &)+1Bp
.text:00000524
.text:00000524 lpCriticalSection= dword ptr -4
.text:00000524
.text:00000524                 push    ebp
.text:00000525                 mov     ebp, esp
.text:00000527                 push    ecx
.text:00000528                 push    esi
.text:00000529                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00000530                 mov     [ebp+lpCriticalSection], ecx
.text:00000533                 mov     esi, esp
.text:00000535                 mov     eax, [ebp+lpCriticalSection]
.text:00000538                 push    eax             ; lpCriticalSection
.text:00000539                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:0000053F                 cmp     esi, esp
.text:00000541                 call    __RTC_CheckEsp
.text:00000546                 pop     esi
.text:00000547                 add     esp, 4
.text:0000054A                 cmp     ebp, esp
.text:0000054C                 call    __RTC_CheckEsp
.text:00000551                 mov     esp, ebp
.text:00000553                 pop     ebp
.text:00000554                 retn
.text:00000554 ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00000554
.text:00000554 ; ---------------------------------------------------------------------------
.text:00000555                 align 4
.text:00000555 _text           ends
.text:00000555
.text:00000558 ; ===========================================================================
.text:00000558
.text:00000558 ; Segment type: Pure code
.text:00000558 ; Segment permissions: Read/Execute
.text:00000558 _text           segment para public 'CODE' use32
.text:00000558                 assume cs:_text
.text:00000558                 ;org 558h
.text:00000558 ; COMDAT (pick any)
.text:00000558                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000558
.text:00000558 ; =============== S U B R O U T I N E =======================================
.text:00000558
.text:00000558 ; Attributes: bp-based frame
.text:00000558
.text:00000558 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:00000558                 public ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
.text:00000558 ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
.text:00000558                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+DAp
.text:00000558                                         ; CMtCompressProgressMixer::Reinit(int)+91p ...
.text:00000558
.text:00000558 var_4           = dword ptr -4
.text:00000558
.text:00000558                 push    ebp
.text:00000559                 mov     ebp, esp
.text:0000055B                 push    ecx
.text:0000055C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000563                 mov     [ebp+var_4], ecx
.text:00000566                 mov     ecx, [ebp+var_4] ; this
.text:00000569                 call    ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)
.text:0000056E                 add     esp, 4
.text:00000571                 cmp     ebp, esp
.text:00000573                 call    __RTC_CheckEsp
.text:00000578                 mov     esp, ebp
.text:0000057A                 pop     ebp
.text:0000057B                 retn
.text:0000057B ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ endp
.text:0000057B
.text:0000057B _text           ends
.text:0000057B
.text:0000057C ; ===========================================================================
.text:0000057C
.text:0000057C ; Segment type: Pure code
.text:0000057C ; Segment permissions: Read/Execute
.text:0000057C _text           segment para public 'CODE' use32
.text:0000057C                 assume cs:_text
.text:0000057C                 ;org 57Ch
.text:0000057C ; COMDAT (pick any)
.text:0000057C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000057C
.text:0000057C ; =============== S U B R O U T I N E =======================================
.text:0000057C
.text:0000057C ; Attributes: bp-based frame
.text:0000057C
.text:0000057C ; void __thiscall NWindows::NSynchronization::CCriticalSectionLock::Unlock(NWindows::NSynchronization::CCriticalSectionLock *__hidden this)
.text:0000057C                 public ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
.text:0000057C ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
.text:0000057C                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock(void)+11p
.text:0000057C
.text:0000057C var_4           = dword ptr -4
.text:0000057C
.text:0000057C                 push    ebp
.text:0000057D                 mov     ebp, esp
.text:0000057F                 push    ecx
.text:00000580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000587                 mov     [ebp+var_4], ecx
.text:0000058A                 mov     eax, [ebp+var_4]
.text:0000058D                 mov     ecx, [eax]      ; this
.text:0000058F                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:00000594                 add     esp, 4
.text:00000597                 cmp     ebp, esp
.text:00000599                 call    __RTC_CheckEsp
.text:0000059E                 mov     esp, ebp
.text:000005A0                 pop     ebp
.text:000005A1                 retn
.text:000005A1 ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ endp
.text:000005A1
.text:000005A1 ; ---------------------------------------------------------------------------
.text:000005A2                 align 4
.text:000005A2 _text           ends
.text:000005A2
.text:000005A4 ; ===========================================================================
.text:000005A4
.text:000005A4 ; Segment type: Pure code
.text:000005A4 ; Segment permissions: Read/Execute
.text:000005A4 _text           segment para public 'CODE' use32
.text:000005A4                 assume cs:_text
.text:000005A4                 ;org 5A4h
.text:000005A4 ; COMDAT (pick any)
.text:000005A4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000005A4
.text:000005A4 ; =============== S U B R O U T I N E =======================================
.text:000005A4
.text:000005A4 ; Attributes: bp-based frame
.text:000005A4
.text:000005A4 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:000005A4                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:000005A4 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:000005A4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSectionLock::Unlock(void)+13p
.text:000005A4
.text:000005A4 lpCriticalSection= dword ptr -4
.text:000005A4
.text:000005A4                 push    ebp
.text:000005A5                 mov     ebp, esp
.text:000005A7                 push    ecx
.text:000005A8                 push    esi
.text:000005A9                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:000005B0                 mov     [ebp+lpCriticalSection], ecx
.text:000005B3                 mov     esi, esp
.text:000005B5                 mov     eax, [ebp+lpCriticalSection]
.text:000005B8                 push    eax             ; lpCriticalSection
.text:000005B9                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:000005BF                 cmp     esi, esp
.text:000005C1                 call    __RTC_CheckEsp
.text:000005C6                 pop     esi
.text:000005C7                 add     esp, 4
.text:000005CA                 cmp     ebp, esp
.text:000005CC                 call    __RTC_CheckEsp
.text:000005D1                 mov     esp, ebp
.text:000005D3                 pop     ebp
.text:000005D4                 retn
.text:000005D4 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:000005D4
.text:000005D4 ; ---------------------------------------------------------------------------
.text:000005D5                 align 4
.text:000005D5 _text           ends
.text:000005D5
.text:000005D8 ; ===========================================================================
.text:000005D8
.text:000005D8 ; Segment type: Pure code
.text:000005D8 ; Segment permissions: Read/Execute
.text:000005D8 _text           segment para public 'CODE' use32
.text:000005D8                 assume cs:_text
.text:000005D8                 ;org 5D8h
.text:000005D8 ; COMDAT (pick any)
.text:000005D8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000005D8
.text:000005D8 ; =============== S U B R O U T I N E =======================================
.text:000005D8
.text:000005D8 ; Attributes: bp-based frame
.text:000005D8
.text:000005D8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:000005D8                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:000005D8 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:000005D8                                         ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+10Cp
.text:000005D8
.text:000005D8 var_4           = dword ptr -4
.text:000005D8
.text:000005D8                 push    ebp
.text:000005D9                 mov     ebp, esp
.text:000005DB                 push    ecx
.text:000005DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005E3                 mov     [ebp+var_4], ecx
.text:000005E6                 mov     eax, [ebp+var_4]
.text:000005E9                 mov     eax, [eax]
.text:000005EB                 mov     esp, ebp
.text:000005ED                 pop     ebp
.text:000005EE                 retn
.text:000005EE ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:000005EE
.text:000005EE ; ---------------------------------------------------------------------------
.text:000005EF                 align 10h
.text:000005EF _text           ends
.text:000005EF
.text:000005F0 ; ===========================================================================
.text:000005F0
.text:000005F0 ; Segment type: Pure code
.text:000005F0 ; Segment permissions: Read/Execute
.text:000005F0 _text           segment para public 'CODE' use32
.text:000005F0                 assume cs:_text
.text:000005F0                 ;org 5F0h
.text:000005F0 ; COMDAT (pick any)
.text:000005F0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000005F0
.text:000005F0 ; =============== S U B R O U T I N E =======================================
.text:000005F0
.text:000005F0 ; Attributes: bp-based frame
.text:000005F0
.text:000005F0 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator->(void)const
.text:000005F0                 public ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:000005F0 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:000005F0                                         ; CODE XREF: CMtCompressProgressMixer::SetRatioInfo(int,unsigned __int64 const *,unsigned __int64 const *)+118p
.text:000005F0
.text:000005F0 var_4           = dword ptr -4
.text:000005F0
.text:000005F0                 push    ebp
.text:000005F1                 mov     ebp, esp
.text:000005F3                 push    ecx
.text:000005F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005FB                 mov     [ebp+var_4], ecx
.text:000005FE                 mov     eax, [ebp+var_4]
.text:00000601                 mov     eax, [eax]
.text:00000603                 mov     esp, ebp
.text:00000605                 pop     ebp
.text:00000606                 retn
.text:00000606 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00000606
.text:00000606 ; ---------------------------------------------------------------------------
.text:00000607                 align 4
.text:00000607 _text           ends
.text:00000607
.text:00000608 ; ===========================================================================
.text:00000608
.text:00000608 ; Segment type: Pure code
.text:00000608 ; Segment permissions: Read/Execute
.text:00000608 _text           segment para public 'CODE' use32
.text:00000608                 assume cs:_text
.text:00000608                 ;org 608h
.text:00000608 ; COMDAT (pick any)
.text:00000608                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000608
.text:00000608 ; =============== S U B R O U T I N E =======================================
.text:00000608
.text:00000608 ; Attributes: bp-based frame
.text:00000608
.text:00000608 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator=(struct ICompressProgressInfo *)
.text:00000608                 public ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
.text:00000608 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z proc near
.text:00000608                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+CBp
.text:00000608
.text:00000608 var_4           = dword ptr -4
.text:00000608 arg_0           = dword ptr  8
.text:00000608
.text:00000608                 push    ebp
.text:00000609                 mov     ebp, esp
.text:0000060B                 push    ecx
.text:0000060C                 push    esi
.text:0000060D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000614                 mov     [ebp+var_4], ecx
.text:00000617                 cmp     [ebp+arg_0], 0
.text:0000061B                 jz      short loc_634
.text:0000061D                 mov     eax, [ebp+arg_0]
.text:00000620                 mov     ecx, [eax]
.text:00000622                 mov     esi, esp
.text:00000624                 mov     edx, [ebp+arg_0]
.text:00000627                 push    edx
.text:00000628                 mov     eax, [ecx+4]
.text:0000062B                 call    eax
.text:0000062D                 cmp     esi, esp
.text:0000062F                 call    __RTC_CheckEsp
.text:00000634
.text:00000634 loc_634:                                ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+13j
.text:00000634                 mov     ecx, [ebp+var_4]
.text:00000637                 cmp     dword ptr [ecx], 0
.text:0000063A                 jz      short loc_657
.text:0000063C                 mov     edx, [ebp+var_4]
.text:0000063F                 mov     eax, [edx]
.text:00000641                 mov     ecx, [ebp+var_4]
.text:00000644                 mov     edx, [ecx]
.text:00000646                 mov     eax, [eax]
.text:00000648                 mov     esi, esp
.text:0000064A                 push    edx
.text:0000064B                 mov     ecx, [eax+8]
.text:0000064E                 call    ecx
.text:00000650                 cmp     esi, esp
.text:00000652                 call    __RTC_CheckEsp
.text:00000657
.text:00000657 loc_657:                                ; CODE XREF: CMyComPtr<ICompressProgressInfo>::operator=(ICompressProgressInfo *)+32j
.text:00000657                 mov     edx, [ebp+var_4]
.text:0000065A                 mov     eax, [ebp+arg_0]
.text:0000065D                 mov     [edx], eax
.text:0000065F                 mov     eax, [ebp+arg_0]
.text:00000662                 pop     esi
.text:00000663                 add     esp, 4
.text:00000666                 cmp     ebp, esp
.text:00000668                 call    __RTC_CheckEsp
.text:0000066D                 mov     esp, ebp
.text:0000066F                 pop     ebp
.text:00000670                 retn    4
.text:00000670 ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z endp
.text:00000670
.text:00000670 ; ---------------------------------------------------------------------------
.text:00000673                 align 4
.text:00000673 _text           ends
.text:00000673
.text:00000674 ; ===========================================================================
.text:00000674
.text:00000674 ; Segment type: Pure code
.text:00000674 ; Segment permissions: Read/Execute
.text:00000674 _text           segment para public 'CODE' use32
.text:00000674                 assume cs:_text
.text:00000674                 ;org 674h
.text:00000674 ; COMDAT (pick any)
.text:00000674                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000674
.text:00000674 ; =============== S U B R O U T I N E =======================================
.text:00000674
.text:00000674 ; Attributes: bp-based frame
.text:00000674
.text:00000674 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00000674                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00000674 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00000674                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+58p
.text:00000674                                         ; CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+63p
.text:00000674
.text:00000674 var_4           = dword ptr -4
.text:00000674
.text:00000674                 push    ebp
.text:00000675                 mov     ebp, esp
.text:00000677                 push    ecx
.text:00000678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000067F                 mov     [ebp+var_4], ecx
.text:00000682                 mov     eax, [ebp+var_4]
.text:00000685                 mov     dword ptr [eax+4], 0
.text:0000068C                 mov     esp, ebp
.text:0000068E                 pop     ebp
.text:0000068F                 retn
.text:0000068F ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:0000068F
.text:0000068F _text           ends
.text:0000068F
.text:00000690 ; ===========================================================================
.text:00000690
.text:00000690 ; Segment type: Pure code
.text:00000690 ; Segment permissions: Read/Execute
.text:00000690 _text           segment para public 'CODE' use32
.text:00000690                 assume cs:_text
.text:00000690                 ;org 690h
.text:00000690 ; COMDAT (pick any)
.text:00000690                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000690
.text:00000690 ; =============== S U B R O U T I N E =======================================
.text:00000690
.text:00000690 ; Attributes: bp-based frame
.text:00000690
.text:00000690 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00000690                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:00000690 ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:00000690                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+8Cp
.text:00000690                                         ; CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+9Bp
.text:00000690
.text:00000690 var_8           = dword ptr -8
.text:00000690 var_4           = dword ptr -4
.text:00000690 arg_0           = dword ptr  8
.text:00000690 arg_4           = dword ptr  0Ch
.text:00000690
.text:00000690                 push    ebp
.text:00000691                 mov     ebp, esp
.text:00000693                 sub     esp, 8
.text:00000696                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000069D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006A4                 mov     [ebp+var_4], ecx
.text:000006A7                 mov     ecx, [ebp+var_4]
.text:000006AA                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:000006AF                 mov     eax, [ebp+var_4]
.text:000006B2                 mov     ecx, [eax+4]
.text:000006B5                 mov     edx, [ebp+var_4]
.text:000006B8                 mov     eax, [edx]
.text:000006BA                 mov     edx, [ebp+arg_0]
.text:000006BD                 mov     [eax+ecx*8], edx
.text:000006C0                 mov     edx, [ebp+arg_4]
.text:000006C3                 mov     [eax+ecx*8+4], edx
.text:000006C7                 mov     eax, [ebp+var_4]
.text:000006CA                 mov     ecx, [eax+4]
.text:000006CD                 mov     [ebp+var_8], ecx
.text:000006D0                 mov     edx, [ebp+var_4]
.text:000006D3                 mov     eax, [edx+4]
.text:000006D6                 add     eax, 1
.text:000006D9                 mov     ecx, [ebp+var_4]
.text:000006DC                 mov     [ecx+4], eax
.text:000006DF                 mov     eax, [ebp+var_8]
.text:000006E2                 add     esp, 8
.text:000006E5                 cmp     ebp, esp
.text:000006E7                 call    __RTC_CheckEsp
.text:000006EC                 mov     esp, ebp
.text:000006EE                 pop     ebp
.text:000006EF                 retn    8
.text:000006EF ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:000006EF
.text:000006EF ; ---------------------------------------------------------------------------
.text:000006F2                 align 4
.text:000006F2 _text           ends
.text:000006F2
.text:000006F4 ; ===========================================================================
.text:000006F4
.text:000006F4 ; Segment type: Pure code
.text:000006F4 ; Segment permissions: Read/Execute
.text:000006F4 _text           segment para public 'CODE' use32
.text:000006F4                 assume cs:_text
.text:000006F4                 ;org 6F4h
.text:000006F4 ; COMDAT (pick any)
.text:000006F4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000006F4
.text:000006F4 ; =============== S U B R O U T I N E =======================================
.text:000006F4
.text:000006F4 ; Attributes: bp-based frame
.text:000006F4
.text:000006F4 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:000006F4                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:000006F4 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:000006F4                                         ; CODE XREF: CMtCompressProgressMixer::Reinit(int)+59p
.text:000006F4                                         ; CMtCompressProgressMixer::Reinit(int)+75p ...
.text:000006F4
.text:000006F4 var_4           = dword ptr -4
.text:000006F4 arg_0           = dword ptr  8
.text:000006F4
.text:000006F4                 push    ebp
.text:000006F5                 mov     ebp, esp
.text:000006F7                 push    ecx
.text:000006F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006FF                 mov     [ebp+var_4], ecx
.text:00000702                 mov     eax, [ebp+var_4]
.text:00000705                 mov     ecx, [eax]
.text:00000707                 mov     edx, [ebp+arg_0]
.text:0000070A                 lea     eax, [ecx+edx*8]
.text:0000070D                 mov     esp, ebp
.text:0000070F                 pop     ebp
.text:00000710                 retn    4
.text:00000710 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00000710
.text:00000710 ; ---------------------------------------------------------------------------
.text:00000713                 align 4
.text:00000713 _text           ends
.text:00000713
.text:00000714 ; ===========================================================================
.text:00000714
.text:00000714 ; Segment type: Pure code
.text:00000714 ; Segment permissions: Read/Execute
.text:00000714 _text           segment para public 'CODE' use32
.text:00000714                 assume cs:_text
.text:00000714                 ;org 714h
.text:00000714 ; COMDAT (pick any)
.text:00000714                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000714
.text:00000714 ; =============== S U B R O U T I N E =======================================
.text:00000714
.text:00000714 ; Attributes: bp-based frame
.text:00000714
.text:00000714 ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00000714                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:00000714 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:00000714                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:00000714
.text:00000714 var_14          = dword ptr -14h
.text:00000714 var_10          = dword ptr -10h
.text:00000714 Dst             = dword ptr -0Ch
.text:00000714 var_8           = dword ptr -8
.text:00000714 var_4           = dword ptr -4
.text:00000714
.text:00000714                 push    ebp
.text:00000715                 mov     ebp, esp
.text:00000717                 sub     esp, 14h
.text:0000071A                 mov     eax, 0CCCCCCCCh
.text:0000071F                 mov     [ebp+var_14], eax
.text:00000722                 mov     [ebp+var_10], eax
.text:00000725                 mov     [ebp+Dst], eax
.text:00000728                 mov     [ebp+var_8], eax
.text:0000072B                 mov     [ebp+var_4], eax
.text:0000072E                 mov     [ebp+var_4], ecx
.text:00000731                 mov     eax, [ebp+var_4]
.text:00000734                 mov     ecx, [ebp+var_4]
.text:00000737                 mov     edx, [eax+4]
.text:0000073A                 cmp     edx, [ecx+8]
.text:0000073D                 jnz     loc_7C8
.text:00000743                 mov     eax, [ebp+var_4]
.text:00000746                 mov     ecx, [eax+8]
.text:00000749                 shr     ecx, 2
.text:0000074C                 mov     edx, [ebp+var_4]
.text:0000074F                 mov     eax, [edx+8]
.text:00000752                 lea     ecx, [eax+ecx+1]
.text:00000756                 mov     [ebp+var_8], ecx
.text:00000759                 xor     ecx, ecx
.text:0000075B                 mov     eax, [ebp+var_8]
.text:0000075E                 mov     edx, 8
.text:00000763                 mul     edx
.text:00000765                 seto    cl
.text:00000768                 neg     ecx
.text:0000076A                 or      ecx, eax
.text:0000076C                 push    ecx             ; unsigned int
.text:0000076D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000772                 add     esp, 4
.text:00000775                 mov     [ebp+var_10], eax
.text:00000778                 mov     eax, [ebp+var_10]
.text:0000077B                 mov     [ebp+Dst], eax
.text:0000077E                 mov     ecx, [ebp+var_4]
.text:00000781                 cmp     dword ptr [ecx+4], 0
.text:00000785                 jz      short loc_7A3
.text:00000787                 mov     edx, [ebp+var_4]
.text:0000078A                 mov     eax, [edx+4]
.text:0000078D                 shl     eax, 3
.text:00000790                 push    eax             ; Size
.text:00000791                 mov     ecx, [ebp+var_4]
.text:00000794                 mov     edx, [ecx]
.text:00000796                 push    edx             ; Src
.text:00000797                 mov     eax, [ebp+Dst]
.text:0000079A                 push    eax             ; Dst
.text:0000079B                 call    _memcpy
.text:000007A0                 add     esp, 0Ch
.text:000007A3
.text:000007A3 loc_7A3:                                ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:000007A3                 mov     ecx, [ebp+var_4]
.text:000007A6                 mov     edx, [ecx]
.text:000007A8                 mov     [ebp+var_14], edx
.text:000007AB                 mov     eax, [ebp+var_14]
.text:000007AE                 push    eax             ; void *
.text:000007AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000007B4                 add     esp, 4
.text:000007B7                 mov     ecx, [ebp+var_4]
.text:000007BA                 mov     edx, [ebp+Dst]
.text:000007BD                 mov     [ecx], edx
.text:000007BF                 mov     eax, [ebp+var_4]
.text:000007C2                 mov     ecx, [ebp+var_8]
.text:000007C5                 mov     [eax+8], ecx
.text:000007C8
.text:000007C8 loc_7C8:                                ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:000007C8                 add     esp, 14h
.text:000007CB                 cmp     ebp, esp
.text:000007CD                 call    __RTC_CheckEsp
.text:000007D2                 mov     esp, ebp
.text:000007D4                 pop     ebp
.text:000007D5                 retn
.text:000007D5 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:000007D5
.text:000007D5 _text           ends
.text:000007D5
UNDEF:000007E0 ; ===========================================================================
UNDEF:000007E0
UNDEF:000007E0 ; Segment type: Externs
UNDEF:000007E0 ; UNDEF
UNDEF:000007E0                 extrn ___security_cookie:near
UNDEF:000007E0                                         ; DATA XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+28r
UNDEF:000007E0                                         ; CMtCompressProgressMixer::Reinit(int)+25r ...
UNDEF:000007E4                 extrn ___CxxFrameHandler3:near
UNDEF:000007E4                                         ; CODE XREF: __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z+16j
UNDEF:000007E4                                         ; __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z+16j ...
UNDEF:000007E8 ; __fastcall __security_check_cookie(x)
UNDEF:000007E8                 extrn @__security_check_cookie@4:near
UNDEF:000007E8                                         ; CODE XREF: __ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z+Cp
UNDEF:000007E8                                         ; __ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z+Cp ...
UNDEF:000007EC                 extrn __RTC_CheckEsp:near
UNDEF:000007EC                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+100p
UNDEF:000007EC                                         ; CMtCompressProgressMixer::Reinit(int)+B7p ...
UNDEF:000007F0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000007F0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000007F0                                         ; CODE XREF: CMtCompressProgressMixer::Init(int,ICompressProgressInfo *)+E9p
UNDEF:000007F0                                         ; CMtCompressProgressMixer::Reinit(int)+A0p ...
UNDEF:000007F4                 extrn __RTC_Shutdown:near
UNDEF:000007F4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000007F8                 extrn __RTC_InitBase:near
UNDEF:000007F8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000007FC ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000007FC                 extrn __imp__EnterCriticalSection@4:near
UNDEF:000007FC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:000007FC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:00000800 ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:00000800                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:00000800                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:00000800                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:00000804 ; void __cdecl operator delete(void *)
UNDEF:00000804                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+9Bp
UNDEF:00000808 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000808                 extrn _memcpy:near      ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+87p
UNDEF:0000080C ; void *__cdecl operator new(unsigned int)
UNDEF:0000080C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+59p
UNDEF:0000080C
UNDEF:0000080C