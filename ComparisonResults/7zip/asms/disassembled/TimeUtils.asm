.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 6AEB0445EAB899E4EB400EA7AC610F39
.text:00000000 ; Input CRC32 : 364DAE9B
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\TimeUtils.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __stdcall NWindows::NTime::DosTimeToFileTime(NWindows::NTime *this, LPFILETIME lpFileTime, struct _FILETIME *)
.text:00000000                 public ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z
.text:00000000 ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z proc near
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000 lpFileTime      = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    esi
.text:00000004                 mov     esi, esp
.text:00000006                 mov     eax, [ebp+lpFileTime]
.text:00000009                 push    eax             ; lpFileTime
.text:0000000A                 mov     ecx, [ebp+this]
.text:0000000D                 and     ecx, 0FFFFh
.text:00000013                 push    ecx             ; wFatTime
.text:00000014                 mov     edx, [ebp+this]
.text:00000017                 shr     edx, 10h
.text:0000001A                 push    edx             ; wFatDate
.text:0000001B                 call    dword ptr ds:__imp__DosDateTimeToFileTime@12 ; DosDateTimeToFileTime(x,x,x)
.text:00000021                 cmp     esi, esp
.text:00000023                 call    __RTC_CheckEsp
.text:00000028                 push    eax             ; int
.text:00000029                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000002E                 pop     esi
.text:0000002F                 cmp     ebp, esp
.text:00000031                 call    __RTC_CheckEsp
.text:00000036                 pop     ebp
.text:00000037                 retn    8
.text:00000037 ?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z endp
.text:00000037
.text:00000037 ; ---------------------------------------------------------------------------
.text:0000003A                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; bool __stdcall NWindows::NTime::FileTimeToDosTime(FILETIME *lpFileTime, const struct _FILETIME *, unsigned int *)
.text:00000040                 public ?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z
.text:00000040 ?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z proc near
.text:00000040
.text:00000040 var_18          = dword ptr -18h
.text:00000040 FatTime         = word ptr -14h
.text:00000040 var_10          = dword ptr -10h
.text:00000040 var_C           = dword ptr -0Ch
.text:00000040 FatDate         = word ptr -8
.text:00000040 var_4           = dword ptr -4
.text:00000040 lpFileTime      = dword ptr  8
.text:00000040 arg_4           = dword ptr  0Ch
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 sub     esp, 18h
.text:00000046                 push    esi
.text:00000047                 mov     eax, 0CCCCCCCCh
.text:0000004C                 mov     [ebp+var_18], eax
.text:0000004F                 mov     dword ptr [ebp+FatTime], eax
.text:00000052                 mov     [ebp+var_10], eax
.text:00000055                 mov     [ebp+var_C], eax
.text:00000058                 mov     dword ptr [ebp+FatDate], eax
.text:0000005B                 mov     [ebp+var_4], eax
.text:0000005E                 mov     esi, esp
.text:00000060                 lea     eax, [ebp+FatTime]
.text:00000063                 push    eax             ; lpFatTime
.text:00000064                 lea     ecx, [ebp+FatDate]
.text:00000067                 push    ecx             ; lpFatDate
.text:00000068                 mov     edx, [ebp+lpFileTime]
.text:0000006B                 push    edx             ; lpFileTime
.text:0000006C                 call    dword ptr ds:__imp__FileTimeToDosDateTime@12 ; FileTimeToDosDateTime(x,x,x)
.text:00000072                 cmp     esi, esp
.text:00000074                 call    __RTC_CheckEsp
.text:00000079                 test    eax, eax
.text:0000007B                 jnz     short loc_9E
.text:0000007D                 mov     eax, [ebp+lpFileTime]
.text:00000080                 cmp     dword ptr [eax+4], 1C00000h
.text:00000087                 sbb     ecx, ecx
.text:00000089                 and     ecx, 814083h
.text:0000008F                 add     ecx, 0FF9FBF7Dh
.text:00000095                 mov     edx, [ebp+arg_4]
.text:00000098                 mov     [edx], ecx
.text:0000009A                 xor     al, al
.text:0000009C                 jmp     short loc_B2
.text:0000009E ; ---------------------------------------------------------------------------
.text:0000009E
.text:0000009E loc_9E:                                 ; CODE XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+3Bj
.text:0000009E                 movzx   eax, [ebp+FatDate]
.text:000000A2                 shl     eax, 10h
.text:000000A5                 movzx   ecx, [ebp+FatTime]
.text:000000A9                 add     eax, ecx
.text:000000AB                 mov     edx, [ebp+arg_4]
.text:000000AE                 mov     [edx], eax
.text:000000B0                 mov     al, 1
.text:000000B2
.text:000000B2 loc_B2:                                 ; CODE XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+5Cj
.text:000000B2                 push    edx
.text:000000B3                 mov     ecx, ebp
.text:000000B5                 push    eax
.text:000000B6                 lea     edx, $LN7
.text:000000BC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000C1                 pop     eax
.text:000000C2                 pop     edx
.text:000000C3                 pop     esi
.text:000000C4                 add     esp, 18h
.text:000000C7                 cmp     ebp, esp
.text:000000C9                 call    __RTC_CheckEsp
.text:000000CE                 mov     esp, ebp
.text:000000D0                 pop     ebp
.text:000000D1                 retn    8
.text:000000D1 ?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z endp
.text:000000D1
.text:000000D1 ; ---------------------------------------------------------------------------
.text:000000D4 $LN7            dd 2                    ; DATA XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+76o
.text:000000D8                 dd offset $LN6
.text:000000DC $LN6            dd 0FFFFFFF8h, 2        ; DATA XREF: .text:000000D8o
.text:000000E4                 dd offset $LN4          ; "datePart"
.text:000000E8                 dd 0FFFFFFECh, 2
.text:000000F0                 dd offset $LN5          ; "timePart"
.text:000000F4 $LN5            db 'timePart',0         ; DATA XREF: .text:000000F0o
.text:000000FD $LN4            db 'datePart',0         ; DATA XREF: .text:000000E4o
.text:00000106                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; void __stdcall NWindows::NTime::UnixTimeToFileTime(NWindows::NTime *this, unsigned int, struct _FILETIME *)
.text:00000110                 public ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z
.text:00000110 ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z proc near
.text:00000110
.text:00000110 var_8           = dword ptr -8
.text:00000110 var_4           = dword ptr -4
.text:00000110 this            = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 8
.text:00000116                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000011D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000124                 mov     eax, [ebp+this]
.text:00000127                 xor     ecx, ecx
.text:00000129                 add     eax, 0B6109100h
.text:0000012E                 adc     ecx, 2
.text:00000131                 push    0
.text:00000133                 push    989680h
.text:00000138                 push    ecx
.text:00000139                 push    eax
.text:0000013A                 call    __allmul
.text:0000013F                 mov     [ebp+var_8], eax
.text:00000142                 mov     [ebp+var_4], edx
.text:00000145                 mov     edx, [ebp+var_8]
.text:00000148                 mov     eax, [ebp+arg_4]
.text:0000014B                 mov     [eax], edx
.text:0000014D                 mov     eax, [ebp+var_8]
.text:00000150                 mov     edx, [ebp+var_4]
.text:00000153                 mov     cl, 20h ; ' '
.text:00000155                 call    __aullshr
.text:0000015A                 mov     ecx, [ebp+arg_4]
.text:0000015D                 mov     [ecx+4], eax
.text:00000160                 add     esp, 8
.text:00000163                 cmp     ebp, esp
.text:00000165                 call    __RTC_CheckEsp
.text:0000016A                 mov     esp, ebp
.text:0000016C                 pop     ebp
.text:0000016D                 retn    8
.text:0000016D ?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z endp
.text:0000016D
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; bool __stdcall NWindows::NTime::UnixTime64ToFileTime(NWindows::NTime *this, __int64, struct _FILETIME *)
.text:00000170                 public ?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z
.text:00000170 ?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z proc near
.text:00000170
.text:00000170 var_10          = dword ptr -10h
.text:00000170 var_C           = dword ptr -0Ch
.text:00000170 var_8           = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170 this            = dword ptr  8
.text:00000170 arg_4           = qword ptr  0Ch
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 10h
.text:00000176                 mov     eax, 0CCCCCCCCh
.text:0000017B                 mov     [ebp+var_10], eax
.text:0000017E                 mov     [ebp+var_C], eax
.text:00000181                 mov     [ebp+var_8], eax
.text:00000184                 mov     [ebp+var_4], eax
.text:00000187                 cmp     dword ptr [ebp+arg_4], 1AAh
.text:0000018E                 jb      short loc_1B2
.text:00000190                 ja      short loc_19B
.text:00000192                 cmp     [ebp+this], 0C9191ACAh
.text:00000199                 jbe     short loc_1B2
.text:0000019B
.text:0000019B loc_19B:                                ; CODE XREF: NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+20j
.text:0000019B                 mov     eax, dword ptr [ebp+arg_4+4]
.text:0000019E                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:000001A5                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000001A8                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:000001AE                 xor     al, al
.text:000001B0                 jmp     short loc_223
.text:000001B2 ; ---------------------------------------------------------------------------
.text:000001B2
.text:000001B2 loc_1B2:                                ; CODE XREF: NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+1Ej
.text:000001B2                                         ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+29j
.text:000001B2                 mov     edx, [ebp+this]
.text:000001B5                 add     edx, 0B6109100h
.text:000001BB                 mov     eax, dword ptr [ebp+arg_4]
.text:000001BE                 adc     eax, 2
.text:000001C1                 mov     [ebp+var_8], edx
.text:000001C4                 mov     [ebp+var_4], eax
.text:000001C7                 cmp     [ebp+var_4], 0
.text:000001CB                 jg      short loc_1EC
.text:000001CD                 jl      short loc_1D5
.text:000001CF                 cmp     [ebp+var_8], 0
.text:000001D3                 jnb     short loc_1EC
.text:000001D5
.text:000001D5 loc_1D5:                                ; CODE XREF: NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+5Dj
.text:000001D5                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:000001D8                 mov     dword ptr [ecx+4], 0
.text:000001DF                 mov     edx, dword ptr [ebp+arg_4+4]
.text:000001E2                 mov     dword ptr [edx], 0
.text:000001E8                 xor     al, al
.text:000001EA                 jmp     short loc_223
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+5Bj
.text:000001EC                                         ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+63j
.text:000001EC                 push    0
.text:000001EE                 push    989680h
.text:000001F3                 mov     eax, [ebp+var_4]
.text:000001F6                 push    eax
.text:000001F7                 mov     ecx, [ebp+var_8]
.text:000001FA                 push    ecx
.text:000001FB                 call    __allmul
.text:00000200                 mov     [ebp+var_10], eax
.text:00000203                 mov     [ebp+var_C], edx
.text:00000206                 mov     edx, [ebp+var_10]
.text:00000209                 mov     eax, dword ptr [ebp+arg_4+4]
.text:0000020C                 mov     [eax], edx
.text:0000020E                 mov     eax, [ebp+var_10]
.text:00000211                 mov     edx, [ebp+var_C]
.text:00000214                 mov     cl, 20h ; ' '
.text:00000216                 call    __aullshr
.text:0000021B                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:0000021E                 mov     [ecx+4], eax
.text:00000221                 mov     al, 1
.text:00000223
.text:00000223 loc_223:                                ; CODE XREF: NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+40j
.text:00000223                                         ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+7Aj
.text:00000223                 add     esp, 10h
.text:00000226                 cmp     ebp, esp
.text:00000228                 call    __RTC_CheckEsp
.text:0000022D                 mov     esp, ebp
.text:0000022F                 pop     ebp
.text:00000230                 retn    0Ch
.text:00000230 ?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z endp
.text:00000230
.text:00000230 ; ---------------------------------------------------------------------------
.text:00000233                 align 10h
.text:00000240
.text:00000240 ; =============== S U B R O U T I N E =======================================
.text:00000240
.text:00000240 ; Attributes: bp-based frame
.text:00000240
.text:00000240 ; __int64 __stdcall NWindows::NTime::FileTimeToUnixTime64(NWindows::NTime *this, const struct _FILETIME *)
.text:00000240                 public ?FileTimeToUnixTime64@NTime@NWindows@@YG_JABU_FILETIME@@@Z
.text:00000240 ?FileTimeToUnixTime64@NTime@NWindows@@YG_JABU_FILETIME@@@Z proc near
.text:00000240
.text:00000240 var_8           = dword ptr -8
.text:00000240 var_4           = dword ptr -4
.text:00000240 this            = dword ptr  8
.text:00000240
.text:00000240                 push    ebp
.text:00000241                 mov     ebp, esp
.text:00000243                 sub     esp, 8
.text:00000246                 push    esi
.text:00000247                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000024E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000255                 mov     eax, [ebp+this]
.text:00000258                 mov     eax, [eax+4]
.text:0000025B                 xor     edx, edx
.text:0000025D                 mov     cl, 20h ; ' '
.text:0000025F                 call    __allshl
.text:00000264                 mov     ecx, [ebp+this]
.text:00000267                 mov     ecx, [ecx]
.text:00000269                 xor     esi, esi
.text:0000026B                 add     eax, ecx
.text:0000026D                 adc     edx, esi
.text:0000026F                 mov     [ebp+var_8], eax
.text:00000272                 mov     [ebp+var_4], edx
.text:00000275                 push    0
.text:00000277                 push    989680h
.text:0000027C                 mov     edx, [ebp+var_4]
.text:0000027F                 push    edx
.text:00000280                 mov     eax, [ebp+var_8]
.text:00000283                 push    eax
.text:00000284                 call    __aulldiv
.text:00000289                 sub     eax, 0B6109100h
.text:0000028E                 sbb     edx, 2
.text:00000291                 pop     esi
.text:00000292                 add     esp, 8
.text:00000295                 cmp     ebp, esp
.text:00000297                 call    __RTC_CheckEsp
.text:0000029C                 mov     esp, ebp
.text:0000029E                 pop     ebp
.text:0000029F                 retn    4
.text:0000029F ?FileTimeToUnixTime64@NTime@NWindows@@YG_JABU_FILETIME@@@Z endp
.text:0000029F
.text:0000029F ; ---------------------------------------------------------------------------
.text:000002A2                 align 10h
.text:000002B0
.text:000002B0 ; =============== S U B R O U T I N E =======================================
.text:000002B0
.text:000002B0 ; Attributes: bp-based frame
.text:000002B0
.text:000002B0 ; bool __stdcall NWindows::NTime::FileTimeToUnixTime(NWindows::NTime *this, const struct _FILETIME *, unsigned int *)
.text:000002B0                 public ?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z
.text:000002B0 ?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z proc near
.text:000002B0
.text:000002B0 var_8           = dword ptr -8
.text:000002B0 var_4           = dword ptr -4
.text:000002B0 this            = dword ptr  8
.text:000002B0 arg_4           = dword ptr  0Ch
.text:000002B0
.text:000002B0                 push    ebp
.text:000002B1                 mov     ebp, esp
.text:000002B3                 sub     esp, 8
.text:000002B6                 push    esi
.text:000002B7                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002BE                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002C5                 mov     eax, [ebp+this]
.text:000002C8                 mov     eax, [eax+4]
.text:000002CB                 xor     edx, edx
.text:000002CD                 mov     cl, 20h ; ' '
.text:000002CF                 call    __allshl
.text:000002D4                 mov     ecx, [ebp+this]
.text:000002D7                 mov     ecx, [ecx]
.text:000002D9                 xor     esi, esi
.text:000002DB                 add     eax, ecx
.text:000002DD                 adc     edx, esi
.text:000002DF                 mov     [ebp+var_8], eax
.text:000002E2                 mov     [ebp+var_4], edx
.text:000002E5                 push    0
.text:000002E7                 push    989680h
.text:000002EC                 mov     edx, [ebp+var_4]
.text:000002EF                 push    edx
.text:000002F0                 mov     eax, [ebp+var_8]
.text:000002F3                 push    eax
.text:000002F4                 call    __aulldiv
.text:000002F9                 mov     [ebp+var_8], eax
.text:000002FC                 mov     [ebp+var_4], edx
.text:000002FF                 cmp     [ebp+var_4], 2
.text:00000303                 ja      short loc_31D
.text:00000305                 jb      short loc_310
.text:00000307                 cmp     [ebp+var_8], 0B6109100h
.text:0000030E                 jnb     short loc_31D
.text:00000310
.text:00000310 loc_310:                                ; CODE XREF: NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+55j
.text:00000310                 mov     ecx, [ebp+arg_4]
.text:00000313                 mov     dword ptr [ecx], 0
.text:00000319                 xor     al, al
.text:0000031B                 jmp     short loc_355
.text:0000031D ; ---------------------------------------------------------------------------
.text:0000031D
.text:0000031D loc_31D:                                ; CODE XREF: NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+53j
.text:0000031D                                         ; NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+5Ej
.text:0000031D                 mov     edx, [ebp+var_8]
.text:00000320                 sub     edx, 0B6109100h
.text:00000326                 mov     eax, [ebp+var_4]
.text:00000329                 sbb     eax, 2
.text:0000032C                 mov     [ebp+var_8], edx
.text:0000032F                 mov     [ebp+var_4], eax
.text:00000332                 cmp     [ebp+var_4], 0
.text:00000336                 ja      short loc_33E
.text:00000338                 cmp     [ebp+var_8], 0FFFFFFFFh
.text:0000033C                 jbe     short loc_34B
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+86j
.text:0000033E                 mov     ecx, [ebp+arg_4]
.text:00000341                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00000347                 xor     al, al
.text:00000349                 jmp     short loc_355
.text:0000034B ; ---------------------------------------------------------------------------
.text:0000034B
.text:0000034B loc_34B:                                ; CODE XREF: NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+8Cj
.text:0000034B                 mov     edx, [ebp+var_8]
.text:0000034E                 mov     eax, [ebp+arg_4]
.text:00000351                 mov     [eax], edx
.text:00000353                 mov     al, 1
.text:00000355
.text:00000355 loc_355:                                ; CODE XREF: NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+6Bj
.text:00000355                                         ; NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+99j
.text:00000355                 pop     esi
.text:00000356                 add     esp, 8
.text:00000359                 cmp     ebp, esp
.text:0000035B                 call    __RTC_CheckEsp
.text:00000360                 mov     esp, ebp
.text:00000362                 pop     ebp
.text:00000363                 retn    8
.text:00000363 ?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z endp
.text:00000363
.text:00000363 ; ---------------------------------------------------------------------------
.text:00000366                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; bool __stdcall NWindows::NTime::GetSecondsSince1601(NWindows::NTime *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned __int64 *)
.text:00000370                 public ?GetSecondsSince1601@NTime@NWindows@@YG_NIIIIIIAA_K@Z
.text:00000370 ?GetSecondsSince1601@NTime@NWindows@@YG_NIIIIIIAA_K@Z proc near
.text:00000370
.text:00000370 var_24          = dword ptr -24h
.text:00000370 var_20          = dword ptr -20h
.text:00000370 var_1C          = dword ptr -1Ch
.text:00000370 var_18          = dword ptr -18h
.text:00000370 var_14          = dword ptr -14h
.text:00000370 var_10          = dword ptr -10h
.text:00000370 var_C           = dword ptr -0Ch
.text:00000370 var_8           = dword ptr -8
.text:00000370 var_4           = dword ptr -4
.text:00000370 this            = dword ptr  8
.text:00000370 arg_4           = dword ptr  0Ch
.text:00000370 arg_8           = dword ptr  10h
.text:00000370 arg_C           = dword ptr  14h
.text:00000370 arg_10          = dword ptr  18h
.text:00000370 arg_14          = dword ptr  1Ch
.text:00000370 arg_18          = dword ptr  20h
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 sub     esp, 24h
.text:00000376                 push    esi
.text:00000377                 mov     eax, 0CCCCCCCCh
.text:0000037C                 mov     [ebp+var_24], eax
.text:0000037F                 mov     [ebp+var_20], eax
.text:00000382                 mov     [ebp+var_1C], eax
.text:00000385                 mov     [ebp+var_18], eax
.text:00000388                 mov     [ebp+var_14], eax
.text:0000038B                 mov     [ebp+var_10], eax
.text:0000038E                 mov     [ebp+var_C], eax
.text:00000391                 mov     [ebp+var_8], eax
.text:00000394                 mov     [ebp+var_4], eax
.text:00000397                 mov     eax, dword ptr ds:___security_cookie
.text:0000039C                 xor     eax, ebp
.text:0000039E                 mov     [ebp+var_4], eax
.text:000003A1                 mov     eax, [ebp+arg_18]
.text:000003A4                 mov     dword ptr [eax], 0
.text:000003AA                 mov     dword ptr [eax+4], 0
.text:000003B1                 cmp     [ebp+this], 641h
.text:000003B8                 jb      short loc_3ED
.text:000003BA                 cmp     [ebp+this], 2710h
.text:000003C1                 jnb     short loc_3ED
.text:000003C3                 cmp     [ebp+arg_4], 1
.text:000003C7                 jb      short loc_3ED
.text:000003C9                 cmp     [ebp+arg_4], 0Ch
.text:000003CD                 ja      short loc_3ED
.text:000003CF                 cmp     [ebp+arg_8], 1
.text:000003D3                 jb      short loc_3ED
.text:000003D5                 cmp     [ebp+arg_8], 1Fh
.text:000003D9                 ja      short loc_3ED
.text:000003DB                 cmp     [ebp+arg_C], 17h
.text:000003DF                 ja      short loc_3ED
.text:000003E1                 cmp     [ebp+arg_10], 3Bh ; ';'
.text:000003E5                 ja      short loc_3ED
.text:000003E7                 cmp     [ebp+arg_14], 3Bh ; ';'
.text:000003EB                 jbe     short loc_3F4
.text:000003ED
.text:000003ED loc_3ED:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+48j
.text:000003ED                                         ; NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+51j ...
.text:000003ED                 xor     al, al
.text:000003EF                 jmp     loc_50B
.text:000003F4 ; ---------------------------------------------------------------------------
.text:000003F4
.text:000003F4 loc_3F4:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+7Bj
.text:000003F4                 mov     ecx, [ebp+this]
.text:000003F7                 sub     ecx, 641h
.text:000003FD                 mov     [ebp+var_8], ecx
.text:00000400                 mov     ecx, [ebp+var_8]
.text:00000403                 imul    ecx, 16Dh
.text:00000409                 mov     edx, [ebp+var_8]
.text:0000040C                 shr     edx, 2
.text:0000040F                 add     ecx, edx
.text:00000411                 mov     eax, [ebp+var_8]
.text:00000414                 xor     edx, edx
.text:00000416                 mov     esi, 64h ; 'd'
.text:0000041B                 div     esi
.text:0000041D                 sub     ecx, eax
.text:0000041F                 mov     eax, [ebp+var_8]
.text:00000422                 xor     edx, edx
.text:00000424                 mov     esi, 190h
.text:00000429                 div     esi
.text:0000042B                 add     ecx, eax
.text:0000042D                 mov     [ebp+var_C], ecx
.text:00000430                 mov     byte ptr [ebp+var_1C], 1Fh
.text:00000434                 mov     byte ptr [ebp+var_1C+1], 1Ch
.text:00000438                 mov     byte ptr [ebp+var_1C+2], 1Fh
.text:0000043C                 mov     byte ptr [ebp+var_1C+3], 1Eh
.text:00000440                 mov     byte ptr [ebp+var_18], 1Fh
.text:00000444                 mov     byte ptr [ebp+var_18+1], 1Eh
.text:00000448                 mov     byte ptr [ebp+var_18+2], 1Fh
.text:0000044C                 mov     byte ptr [ebp+var_18+3], 1Fh
.text:00000450                 mov     byte ptr [ebp+var_14], 1Eh
.text:00000454                 mov     byte ptr [ebp+var_14+1], 1Fh
.text:00000458                 mov     byte ptr [ebp+var_14+2], 1Eh
.text:0000045C                 mov     byte ptr [ebp+var_14+3], 1Fh
.text:00000460                 mov     eax, [ebp+this]
.text:00000463                 xor     edx, edx
.text:00000465                 mov     ecx, 4
.text:0000046A                 div     ecx
.text:0000046C                 test    edx, edx
.text:0000046E                 jnz     short loc_494
.text:00000470                 mov     eax, [ebp+this]
.text:00000473                 xor     edx, edx
.text:00000475                 mov     ecx, 64h ; 'd'
.text:0000047A                 div     ecx
.text:0000047C                 test    edx, edx
.text:0000047E                 jnz     short loc_490
.text:00000480                 mov     eax, [ebp+this]
.text:00000483                 xor     edx, edx
.text:00000485                 mov     ecx, 190h
.text:0000048A                 div     ecx
.text:0000048C                 test    edx, edx
.text:0000048E                 jnz     short loc_494
.text:00000490
.text:00000490 loc_490:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+10Ej
.text:00000490                 mov     byte ptr [ebp+var_1C+1], 1Dh
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+FEj
.text:00000494                                         ; NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+11Ej
.text:00000494                 mov     edx, [ebp+arg_4]
.text:00000497                 sub     edx, 1
.text:0000049A                 mov     [ebp+arg_4], edx
.text:0000049D                 mov     [ebp+var_24], 0
.text:000004A4                 jmp     short loc_4AF
.text:000004A6 ; ---------------------------------------------------------------------------
.text:000004A6
.text:000004A6 loc_4A6:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+155j
.text:000004A6                 mov     eax, [ebp+var_24]
.text:000004A9                 add     eax, 1
.text:000004AC                 mov     [ebp+var_24], eax
.text:000004AF
.text:000004AF loc_4AF:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+134j
.text:000004AF                 mov     ecx, [ebp+var_24]
.text:000004B2                 cmp     ecx, [ebp+arg_4]
.text:000004B5                 jnb     short loc_4C7
.text:000004B7                 mov     edx, [ebp+var_24]
.text:000004BA                 movzx   eax, byte ptr [ebp+edx+var_1C]
.text:000004BF                 add     eax, [ebp+var_C]
.text:000004C2                 mov     [ebp+var_C], eax
.text:000004C5                 jmp     short loc_4A6
.text:000004C7 ; ---------------------------------------------------------------------------
.text:000004C7
.text:000004C7 loc_4C7:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+145j
.text:000004C7                 mov     ecx, [ebp+arg_8]
.text:000004CA                 mov     edx, [ebp+var_C]
.text:000004CD                 lea     eax, [edx+ecx-1]
.text:000004D1                 mov     [ebp+var_C], eax
.text:000004D4                 mov     eax, [ebp+var_C]
.text:000004D7                 imul    eax, 18h
.text:000004DA                 add     eax, [ebp+arg_C]
.text:000004DD                 mov     ecx, 3Ch ; '<'
.text:000004E2                 mul     ecx
.text:000004E4                 mov     ecx, [ebp+arg_10]
.text:000004E7                 xor     esi, esi
.text:000004E9                 add     eax, ecx
.text:000004EB                 adc     edx, esi
.text:000004ED                 push    0
.text:000004EF                 push    3Ch ; '<'
.text:000004F1                 push    edx
.text:000004F2                 push    eax
.text:000004F3                 call    __allmul
.text:000004F8                 mov     ecx, [ebp+arg_14]
.text:000004FB                 xor     esi, esi
.text:000004FD                 add     eax, ecx
.text:000004FF                 adc     edx, esi
.text:00000501                 mov     ecx, [ebp+arg_18]
.text:00000504                 mov     [ecx], eax
.text:00000506                 mov     [ecx+4], edx
.text:00000509                 mov     al, 1
.text:0000050B
.text:0000050B loc_50B:                                ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+7Fj
.text:0000050B                 push    edx
.text:0000050C                 mov     ecx, ebp
.text:0000050E                 push    eax
.text:0000050F                 lea     edx, $LN12
.text:00000515                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000051A                 pop     eax
.text:0000051B                 pop     edx
.text:0000051C                 pop     esi
.text:0000051D                 mov     ecx, [ebp+var_4]
.text:00000520                 xor     ecx, ebp
.text:00000522                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000527                 add     esp, 24h
.text:0000052A                 cmp     ebp, esp
.text:0000052C                 call    __RTC_CheckEsp
.text:00000531                 mov     esp, ebp
.text:00000533                 pop     ebp
.text:00000534                 retn    1Ch
.text:00000534 ?GetSecondsSince1601@NTime@NWindows@@YG_NIIIIIIAA_K@Z endp
.text:00000534
.text:00000534 ; ---------------------------------------------------------------------------
.text:00000537                 align 4
.text:00000538 $LN12           dd 1                    ; DATA XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+19Fo
.text:0000053C                 dd offset $LN11
.text:00000540 $LN11           dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:0000053Co
.text:00000548                 dd offset $LN10
.text:0000054C $LN10           dd 0CC00736Dh           ; DATA XREF: .text:00000548o
.text:00000550
.text:00000550 ; =============== S U B R O U T I N E =======================================
.text:00000550
.text:00000550 ; Attributes: bp-based frame
.text:00000550
.text:00000550 ; void __stdcall NWindows::NTime::GetCurUtcFileTime(LPFILETIME lpSystemTimeAsFileTime, struct _FILETIME *)
.text:00000550                 public ?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z
.text:00000550 ?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z proc near
.text:00000550
.text:00000550 lpSystemTimeAsFileTime= dword ptr  8
.text:00000550
.text:00000550                 push    ebp
.text:00000551                 mov     ebp, esp
.text:00000553                 push    esi
.text:00000554                 mov     esi, esp
.text:00000556                 mov     eax, [ebp+lpSystemTimeAsFileTime]
.text:00000559                 push    eax             ; lpSystemTimeAsFileTime
.text:0000055A                 call    dword ptr ds:__imp__GetSystemTimeAsFileTime@4 ; GetSystemTimeAsFileTime(x)
.text:00000560                 cmp     esi, esp
.text:00000562                 call    __RTC_CheckEsp
.text:00000567                 pop     esi
.text:00000568                 cmp     ebp, esp
.text:0000056A                 call    __RTC_CheckEsp
.text:0000056F                 pop     ebp
.text:00000570                 retn    4
.text:00000570 ?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z endp
.text:00000570
.text:00000570 ; ---------------------------------------------------------------------------
.text:00000573                 align 4
.text:00000573 _text           ends
.text:00000573
.rtc$TMZ:00000574 ; ===========================================================================
.rtc$TMZ:00000574
.rtc$TMZ:00000574 ; Segment type: Pure data
.rtc$TMZ:00000574 ; Segment permissions: Read
.rtc$TMZ:00000574 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000574                 assume cs:_rtc$TMZ
.rtc$TMZ:00000574                 ;org 574h
.rtc$TMZ:00000574 ; COMDAT (pick any)
.rtc$TMZ:00000574 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000574 _rtc$TMZ        ends
.rtc$TMZ:00000574
.rtc$IMZ:00000578 ; ===========================================================================
.rtc$IMZ:00000578
.rtc$IMZ:00000578 ; Segment type: Pure data
.rtc$IMZ:00000578 ; Segment permissions: Read
.rtc$IMZ:00000578 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000578                 assume cs:_rtc$IMZ
.rtc$IMZ:00000578                 ;org 578h
.rtc$IMZ:00000578 ; COMDAT (pick any)
.rtc$IMZ:00000578 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000578 _rtc$IMZ        ends
.rtc$IMZ:00000578
.text:0000057C ; ===========================================================================
.text:0000057C
.text:0000057C ; Segment type: Pure code
.text:0000057C ; Segment permissions: Read/Execute
.text:0000057C _text           segment para public 'CODE' use32
.text:0000057C                 assume cs:_text
.text:0000057C                 ;org 57Ch
.text:0000057C ; COMDAT (pick any)
.text:0000057C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000057C
.text:0000057C ; =============== S U B R O U T I N E =======================================
.text:0000057C
.text:0000057C ; Attributes: bp-based frame
.text:0000057C
.text:0000057C ; bool __stdcall BOOLToBool(int)
.text:0000057C                 public ?BOOLToBool@@YG_NH@Z
.text:0000057C ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)+29p
.text:0000057C
.text:0000057C arg_0           = dword ptr  8
.text:0000057C
.text:0000057C                 push    ebp
.text:0000057D                 mov     ebp, esp
.text:0000057F                 xor     eax, eax
.text:00000581                 cmp     [ebp+arg_0], 0
.text:00000585                 setnz   al
.text:00000588                 pop     ebp
.text:00000589                 retn    4
.text:00000589 ?BOOLToBool@@YG_NH@Z endp
.text:00000589
.text:00000589 _text           ends
.text:00000589
UNDEF:00000590 ; ===========================================================================
UNDEF:00000590
UNDEF:00000590 ; Segment type: Externs
UNDEF:00000590 ; UNDEF
UNDEF:00000590 ; BOOL __stdcall DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime)
UNDEF:00000590                 extrn __imp__DosDateTimeToFileTime@12:near
UNDEF:00000590                                         ; CODE XREF: NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)+1Bp
UNDEF:00000590                                         ; DATA XREF: NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)+1Br
UNDEF:00000594                 extrn __RTC_CheckEsp:near
UNDEF:00000594                                         ; CODE XREF: NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)+23p
UNDEF:00000594                                         ; NWindows::NTime::DosTimeToFileTime(uint,_FILETIME &)+31p ...
UNDEF:00000598                 extrn __RTC_Shutdown:near
UNDEF:00000598                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000059C                 extrn __RTC_InitBase:near
UNDEF:0000059C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000005A0 ; BOOL __stdcall FileTimeToDosDateTime(const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime)
UNDEF:000005A0                 extrn __imp__FileTimeToDosDateTime@12:near
UNDEF:000005A0                                         ; CODE XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+2Cp
UNDEF:000005A0                                         ; DATA XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+2Cr
UNDEF:000005A4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000005A4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000005A4                                         ; CODE XREF: NWindows::NTime::FileTimeToDosTime(_FILETIME const &,uint &)+7Cp
UNDEF:000005A4                                         ; NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+1A5p
UNDEF:000005A8                 extrn __aullshr:near    ; CODE XREF: NWindows::NTime::UnixTimeToFileTime(uint,_FILETIME &)+45p
UNDEF:000005A8                                         ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+A6p
UNDEF:000005AC                 extrn __allmul:near     ; CODE XREF: NWindows::NTime::UnixTimeToFileTime(uint,_FILETIME &)+2Ap
UNDEF:000005AC                                         ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)+8Bp ...
UNDEF:000005B0                 extrn __aulldiv:near    ; CODE XREF: NWindows::NTime::FileTimeToUnixTime64(_FILETIME const &)+44p
UNDEF:000005B0                                         ; NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+44p
UNDEF:000005B4                 extrn __allshl:near     ; CODE XREF: NWindows::NTime::FileTimeToUnixTime64(_FILETIME const &)+1Fp
UNDEF:000005B4                                         ; NWindows::NTime::FileTimeToUnixTime(_FILETIME const &,uint &)+1Fp
UNDEF:000005B8                 extrn ___security_cookie:near
UNDEF:000005B8                                         ; DATA XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+27r
UNDEF:000005BC ; __fastcall __security_check_cookie(x)
UNDEF:000005BC                 extrn @__security_check_cookie@4:near
UNDEF:000005BC                                         ; CODE XREF: NWindows::NTime::GetSecondsSince1601(uint,uint,uint,uint,uint,uint,unsigned __int64 &)+1B2p
UNDEF:000005C0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
UNDEF:000005C0                 extrn __imp__GetSystemTimeAsFileTime@4:near
UNDEF:000005C0                                         ; CODE XREF: NWindows::NTime::GetCurUtcFileTime(_FILETIME &)+Ap
UNDEF:000005C0                                         ; DATA XREF: NWindows::NTime::GetCurUtcFileTime(_FILETIME &)+Ar
UNDEF:000005C0
UNDEF:000005C0
UNDEF:000005C0                 end