.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 22CFC12B3677FA1845DA0F2DDCDBA3CE
.rdata:00000000 ; Input CRC32 : 302A6426
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileName.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67131:                               ; DATA XREF: .data:wchar_t const * const NWindows::NFile::NName::kSuperPathPrefixo
.rdata:00000000                 unicode 0, <\\?\>,0
.rdata:0000000A                 align 4
.rdata:0000000C $SG67133:                               ; DATA XREF: .data:_kSuperUncPrefixo
.rdata:0000000C                 unicode 0, <\\?\UNC\>,0
.rdata:0000001E                 align 10h
.rdata:00000020 $SG67146:                               ; DATA XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+9Do
.rdata:00000020                 unicode 0, <PhysicalDrive>,0
.rdata:00000020 _rdata          ends
.rdata:00000020
.data:0000003C ; ===========================================================================
.data:0000003C
.data:0000003C ; Segment type: Pure data
.data:0000003C ; Segment permissions: Read/Write
.data:0000003C _data           segment dword public 'DATA' use32
.data:0000003C                 assume cs:_data
.data:0000003C                 ;org 3Ch
.data:0000003C                 public ?kSuperPathPrefix@NName@NFile@NWindows@@3PB_WB
.data:0000003C ; wchar_t const * const NWindows::NFile::NName::kSuperPathPrefix
.data:0000003C ?kSuperPathPrefix@NName@NFile@NWindows@@3PB_WB dd offset $SG67131 ; "\\\\?\\"
.data:00000040 _kSuperUncPrefix dd offset $SG67133     ; "\\\\?\\UNC\\"
.data:00000040 _data           ends
.data:00000040
.text:00000044 ; ===========================================================================
.text:00000044
.text:00000044 ; Segment type: Pure code
.text:00000044 ; Segment permissions: Read/Execute
.text:00000044 _text           segment para public 'CODE' use32
.text:00000044                 assume cs:_text
.text:00000044                 ;org 44h
.text:00000044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000044
.text:00000044 ; =============== S U B R O U T I N E =======================================
.text:00000044
.text:00000044 ; Attributes: bp-based frame
.text:00000044
.text:00000044 ; int __stdcall NWindows::NFile::NName::FindSepar(NWindows::NFile::NName *this, const wchar_t *)
.text:00000044                 public ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z
.text:00000044 ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z proc near
.text:00000044                                         ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+98p
.text:00000044                                         ; NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+3Ap ...
.text:00000044
.text:00000044 var_8           = dword ptr -8
.text:00000044 var_4           = dword ptr -4
.text:00000044 this            = dword ptr  8
.text:00000044
.text:00000044                 push    ebp
.text:00000045                 mov     ebp, esp
.text:00000047                 sub     esp, 8
.text:0000004A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000051                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000058                 mov     eax, [ebp+this]
.text:0000005B                 mov     [ebp+var_4], eax
.text:0000005E                 jmp     short loc_69
.text:00000060 ; ---------------------------------------------------------------------------
.text:00000060
.text:00000060 loc_60:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *):loc_9Ej
.text:00000060                 mov     ecx, [ebp+var_4]
.text:00000063                 add     ecx, 2
.text:00000066                 mov     [ebp+var_4], ecx
.text:00000069
.text:00000069 loc_69:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *)+1Aj
.text:00000069                 mov     edx, [ebp+var_4]
.text:0000006C                 mov     ax, [edx]
.text:0000006F                 mov     word ptr [ebp+var_8], ax
.text:00000073                 movzx   ecx, word ptr [ebp+var_8]
.text:00000077                 test    ecx, ecx
.text:00000079                 jnz     short loc_82
.text:0000007B                 mov     eax, 0FFFFFFFFh
.text:00000080                 jmp     short loc_A0
.text:00000082 ; ---------------------------------------------------------------------------
.text:00000082
.text:00000082 loc_82:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *)+35j
.text:00000082                 movzx   edx, word ptr [ebp+var_8]
.text:00000086                 cmp     edx, 5Ch ; '\'
.text:00000089                 jz      short loc_94
.text:0000008B                 movzx   eax, word ptr [ebp+var_8]
.text:0000008F                 cmp     eax, 2Fh ; '/'
.text:00000092                 jnz     short loc_9E
.text:00000094
.text:00000094 loc_94:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *)+45j
.text:00000094                 mov     eax, [ebp+var_4]
.text:00000097                 sub     eax, [ebp+this]
.text:0000009A                 sar     eax, 1
.text:0000009C                 jmp     short loc_A0
.text:0000009E ; ---------------------------------------------------------------------------
.text:0000009E
.text:0000009E loc_9E:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *)+4Ej
.text:0000009E                 jmp     short loc_60
.text:000000A0 ; ---------------------------------------------------------------------------
.text:000000A0
.text:000000A0 loc_A0:                                 ; CODE XREF: NWindows::NFile::NName::FindSepar(wchar_t const *)+3Cj
.text:000000A0                                         ; NWindows::NFile::NName::FindSepar(wchar_t const *)+58j
.text:000000A0                 mov     esp, ebp
.text:000000A2                 pop     ebp
.text:000000A3                 retn    4
.text:000000A3 ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z endp
.text:000000A3
.text:000000A3 ; ---------------------------------------------------------------------------
.text:000000A6                 db 0Eh dup(0CCh)
.text:000000B4
.text:000000B4 ; =============== S U B R O U T I N E =======================================
.text:000000B4
.text:000000B4 ; Attributes: bp-based frame
.text:000000B4
.text:000000B4 ; void __stdcall NWindows::NFile::NName::NormalizeDirPathPrefix(NWindows::NFile::NName *this, struct UString *)
.text:000000B4                 public ?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z
.text:000000B4 ?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z proc near
.text:000000B4                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+13Dp
.text:000000B4
.text:000000B4 this            = dword ptr  8
.text:000000B4
.text:000000B4                 push    ebp
.text:000000B5                 mov     ebp, esp
.text:000000B7                 mov     ecx, [ebp+this] ; this
.text:000000BA                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000000BF                 movzx   eax, al
.text:000000C2                 test    eax, eax
.text:000000C4                 jz      short loc_C8
.text:000000C6                 jmp     short loc_E8
.text:000000C8 ; ---------------------------------------------------------------------------
.text:000000C8
.text:000000C8 loc_C8:                                 ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+10j
.text:000000C8                 mov     ecx, [ebp+this] ; this
.text:000000CB                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:000000D0                 movzx   ecx, ax
.text:000000D3                 push    ecx             ; wchar_t
.text:000000D4                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:000000D9                 movzx   edx, al
.text:000000DC                 test    edx, edx
.text:000000DE                 jnz     short loc_E8
.text:000000E0                 mov     ecx, [ebp+this] ; this
.text:000000E3                 call    ?Add_PathSepar@UString@@QAEXXZ ; UString::Add_PathSepar(void)
.text:000000E8
.text:000000E8 loc_E8:                                 ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+12j
.text:000000E8                                         ; NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+2Aj
.text:000000E8                 cmp     ebp, esp
.text:000000EA                 call    __RTC_CheckEsp
.text:000000EF                 pop     ebp
.text:000000F0                 retn    4
.text:000000F0 ?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z endp
.text:000000F0
.text:000000F0 ; ---------------------------------------------------------------------------
.text:000000F3                 align 4
.text:000000F4
.text:000000F4 ; =============== S U B R O U T I N E =======================================
.text:000000F4
.text:000000F4 ; Attributes: bp-based frame
.text:000000F4
.text:000000F4 ; bool __stdcall NWindows::NFile::NName::IsDrivePath(NWindows::NFile::NName *this, const wchar_t *)
.text:000000F4                 public ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:000000F4 ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000000F4                                         ; CODE XREF: NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+28p
.text:000000F4                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+18p ...
.text:000000F4
.text:000000F4 var_4           = dword ptr -4
.text:000000F4 this            = dword ptr  8
.text:000000F4
.text:000000F4                 push    ebp
.text:000000F5                 mov     ebp, esp
.text:000000F7                 push    ecx
.text:000000F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000FF                 mov     eax, [ebp+this]
.text:00000102                 movzx   ecx, word ptr [eax]
.text:00000105                 cmp     ecx, 61h ; 'a'
.text:00000108                 jl      short loc_115
.text:0000010A                 mov     edx, [ebp+this]
.text:0000010D                 movzx   eax, word ptr [edx]
.text:00000110                 cmp     eax, 7Ah ; 'z'
.text:00000113                 jle     short loc_12B
.text:00000115
.text:00000115 loc_115:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath(wchar_t const *)+14j
.text:00000115                 mov     ecx, [ebp+this]
.text:00000118                 movzx   edx, word ptr [ecx]
.text:0000011B                 cmp     edx, 41h ; 'A'
.text:0000011E                 jl      short loc_158
.text:00000120                 mov     eax, [ebp+this]
.text:00000123                 movzx   ecx, word ptr [eax]
.text:00000126                 cmp     ecx, 5Ah ; 'Z'
.text:00000129                 jg      short loc_158
.text:0000012B
.text:0000012B loc_12B:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath(wchar_t const *)+1Fj
.text:0000012B                 mov     edx, [ebp+this]
.text:0000012E                 movzx   eax, word ptr [edx+2]
.text:00000132                 cmp     eax, 3Ah ; ':'
.text:00000135                 jnz     short loc_158
.text:00000137                 mov     ecx, [ebp+this]
.text:0000013A                 movzx   edx, word ptr [ecx+4]
.text:0000013E                 cmp     edx, 5Ch ; '\'
.text:00000141                 jz      short loc_14F
.text:00000143                 mov     eax, [ebp+this]
.text:00000146                 movzx   ecx, word ptr [eax+4]
.text:0000014A                 cmp     ecx, 2Fh ; '/'
.text:0000014D                 jnz     short loc_158
.text:0000014F
.text:0000014F loc_14F:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath(wchar_t const *)+4Dj
.text:0000014F                 mov     [ebp+var_4], 1
.text:00000156                 jmp     short loc_15F
.text:00000158 ; ---------------------------------------------------------------------------
.text:00000158
.text:00000158 loc_158:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath(wchar_t const *)+2Aj
.text:00000158                                         ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)+35j ...
.text:00000158                 mov     [ebp+var_4], 0
.text:0000015F
.text:0000015F loc_15F:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath(wchar_t const *)+62j
.text:0000015F                 mov     al, byte ptr [ebp+var_4]
.text:00000162                 mov     esp, ebp
.text:00000164                 pop     ebp
.text:00000165                 retn    4
.text:00000165 ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:00000165
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000168                 db 0Ch dup(0CCh)
.text:00000174
.text:00000174 ; =============== S U B R O U T I N E =======================================
.text:00000174
.text:00000174 ; Attributes: bp-based frame
.text:00000174
.text:00000174 ; bool __stdcall NWindows::NFile::NName::IsAltPathPrefix(wchar_t *this, const wchar_t *)
.text:00000174                 public ?IsAltPathPrefix@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000174 ?IsAltPathPrefix@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000174
.text:00000174 var_4           = dword ptr -4
.text:00000174 this            = dword ptr  8
.text:00000174
.text:00000174                 push    ebp
.text:00000175                 mov     ebp, esp
.text:00000177                 push    ecx             ; wchar_t *
.text:00000178                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000017F                 mov     eax, [ebp+this]
.text:00000182                 push    eax             ; wchar_t *
.text:00000183                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:00000188                 mov     [ebp+var_4], eax
.text:0000018B                 cmp     [ebp+var_4], 0
.text:0000018F                 jnz     short loc_195
.text:00000191                 xor     al, al
.text:00000193                 jmp     short loc_1FB
.text:00000195 ; ---------------------------------------------------------------------------
.text:00000195
.text:00000195 loc_195:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+1Bj
.text:00000195                 mov     ecx, [ebp+var_4]
.text:00000198                 mov     edx, [ebp+this]
.text:0000019B                 movzx   eax, word ptr [edx+ecx*2-2]
.text:000001A0                 cmp     eax, 3Ah ; ':'
.text:000001A3                 jz      short loc_1A9
.text:000001A5                 xor     al, al
.text:000001A7                 jmp     short loc_1FB
.text:000001A9 ; ---------------------------------------------------------------------------
.text:000001A9
.text:000001A9 loc_1A9:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+2Fj
.text:000001A9                 mov     ecx, [ebp+this]
.text:000001AC                 push    ecx             ; this
.text:000001AD                 call    ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)
.text:000001B2                 movzx   edx, al
.text:000001B5                 test    edx, edx
.text:000001B7                 jz      short loc_1BD
.text:000001B9                 xor     al, al
.text:000001BB                 jmp     short loc_1FB
.text:000001BD ; ---------------------------------------------------------------------------
.text:000001BD
.text:000001BD loc_1BD:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+43j
.text:000001BD                 mov     eax, [ebp+this]
.text:000001C0                 push    eax             ; this
.text:000001C1                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:000001C6                 movzx   ecx, al
.text:000001C9                 test    ecx, ecx
.text:000001CB                 jz      short loc_1DF
.text:000001CD                 mov     edx, [ebp+this]
.text:000001D0                 add     edx, 8
.text:000001D3                 mov     [ebp+this], edx
.text:000001D6                 mov     eax, [ebp+var_4]
.text:000001D9                 sub     eax, 4
.text:000001DC                 mov     [ebp+var_4], eax
.text:000001DF
.text:000001DF loc_1DF:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+57j
.text:000001DF                 cmp     [ebp+var_4], 2
.text:000001E3                 jnz     short loc_1F9
.text:000001E5                 mov     ecx, [ebp+this]
.text:000001E8                 push    ecx             ; this
.text:000001E9                 call    ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)
.text:000001EE                 movzx   edx, al
.text:000001F1                 test    edx, edx
.text:000001F3                 jz      short loc_1F9
.text:000001F5                 xor     al, al
.text:000001F7                 jmp     short loc_1FB
.text:000001F9 ; ---------------------------------------------------------------------------
.text:000001F9
.text:000001F9 loc_1F9:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+6Fj
.text:000001F9                                         ; NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+7Fj
.text:000001F9                 mov     al, 1
.text:000001FB
.text:000001FB loc_1FB:                                ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+1Fj
.text:000001FB                                         ; NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+33j ...
.text:000001FB                 add     esp, 4
.text:000001FE                 cmp     ebp, esp
.text:00000200                 call    __RTC_CheckEsp
.text:00000205                 mov     esp, ebp
.text:00000207                 pop     ebp
.text:00000208                 retn    4
.text:00000208 ?IsAltPathPrefix@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:00000208
.text:00000208 ; ---------------------------------------------------------------------------
.text:0000020B byte_20B        db 9 dup(0CCh)          ; DATA XREF: .text:00001098o
.text:00000214
.text:00000214 ; =============== S U B R O U T I N E =======================================
.text:00000214
.text:00000214 ; Attributes: bp-based frame
.text:00000214
.text:00000214 ; bool __stdcall NWindows::NFile::NName::IsDevicePath(wchar_t *this, const wchar_t *)
.text:00000214                 public ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000214 ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000214                                         ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+39p
.text:00000214
.text:00000214 var_8           = dword ptr -8
.text:00000214 var_4           = dword ptr -4
.text:00000214 this            = dword ptr  8
.text:00000214
.text:00000214                 push    ebp
.text:00000215                 mov     ebp, esp
.text:00000217                 sub     esp, 8
.text:0000021A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000221                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000228                 mov     eax, [ebp+this]
.text:0000022B                 movzx   ecx, word ptr [eax]
.text:0000022E                 cmp     ecx, 5Ch ; '\'
.text:00000231                 jz      short loc_23E
.text:00000233                 mov     edx, [ebp+this]
.text:00000236                 movzx   eax, word ptr [edx]
.text:00000239                 cmp     eax, 2Fh ; '/'
.text:0000023C                 jnz     short loc_27A
.text:0000023E
.text:0000023E loc_23E:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+1Dj
.text:0000023E                 mov     ecx, [ebp+this]
.text:00000241                 movzx   edx, word ptr [ecx+2]
.text:00000245                 cmp     edx, 5Ch ; '\'
.text:00000248                 jz      short loc_256
.text:0000024A                 mov     eax, [ebp+this]
.text:0000024D                 movzx   ecx, word ptr [eax+2]
.text:00000251                 cmp     ecx, 2Fh ; '/'
.text:00000254                 jnz     short loc_27A
.text:00000256
.text:00000256 loc_256:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+34j
.text:00000256                 mov     edx, [ebp+this]
.text:00000259                 movzx   eax, word ptr [edx+4]
.text:0000025D                 cmp     eax, 2Eh ; '.'
.text:00000260                 jnz     short loc_27A
.text:00000262                 mov     ecx, [ebp+this]
.text:00000265                 movzx   edx, word ptr [ecx+6]
.text:00000269                 cmp     edx, 5Ch ; '\'
.text:0000026C                 jz      short loc_281
.text:0000026E                 mov     eax, [ebp+this]
.text:00000271                 movzx   ecx, word ptr [eax+6]
.text:00000275                 cmp     ecx, 2Fh ; '/'
.text:00000278                 jz      short loc_281
.text:0000027A
.text:0000027A loc_27A:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+28j
.text:0000027A                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+40j ...
.text:0000027A                 xor     al, al
.text:0000027C                 jmp     loc_30D
.text:00000281 ; ---------------------------------------------------------------------------
.text:00000281
.text:00000281 loc_281:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+58j
.text:00000281                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+64j
.text:00000281                 mov     edx, [ebp+this]
.text:00000284                 push    edx             ; wchar_t *
.text:00000285                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:0000028A                 mov     [ebp+var_4], eax
.text:0000028D                 cmp     [ebp+var_4], 6
.text:00000291                 jnz     short loc_2A3
.text:00000293                 mov     eax, [ebp+this]
.text:00000296                 movzx   ecx, word ptr [eax+0Ah]
.text:0000029A                 cmp     ecx, 3Ah ; ':'
.text:0000029D                 jnz     short loc_2A3
.text:0000029F                 mov     al, 1
.text:000002A1                 jmp     short loc_30D
.text:000002A3 ; ---------------------------------------------------------------------------
.text:000002A3
.text:000002A3 loc_2A3:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+7Dj
.text:000002A3                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+89j
.text:000002A3                 cmp     [ebp+var_4], 12h
.text:000002A7                 jb      short loc_2C9
.text:000002A9                 cmp     [ebp+var_4], 16h
.text:000002AD                 ja      short loc_2C9
.text:000002AF                 push    1Ah             ; Size
.text:000002B1                 push    offset $SG67146 ; "PhysicalDrive"
.text:000002B6                 mov     edx, [ebp+this]
.text:000002B9                 add     edx, 8
.text:000002BC                 push    edx             ; Buf1
.text:000002BD                 call    _memcmp
.text:000002C2                 add     esp, 0Ch
.text:000002C5                 test    eax, eax
.text:000002C7                 jz      short loc_2CD
.text:000002C9
.text:000002C9 loc_2C9:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+93j
.text:000002C9                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+99j
.text:000002C9                 xor     al, al
.text:000002CB                 jmp     short loc_30D
.text:000002CD ; ---------------------------------------------------------------------------
.text:000002CD
.text:000002CD loc_2CD:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+B3j
.text:000002CD                 mov     [ebp+var_8], 11h
.text:000002D4                 jmp     short loc_2DF
.text:000002D6 ; ---------------------------------------------------------------------------
.text:000002D6
.text:000002D6 loc_2D6:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *):loc_309j
.text:000002D6                 mov     eax, [ebp+var_8]
.text:000002D9                 add     eax, 1
.text:000002DC                 mov     [ebp+var_8], eax
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+C0j
.text:000002DF                 mov     ecx, [ebp+var_8]
.text:000002E2                 cmp     ecx, [ebp+var_4]
.text:000002E5                 jnb     short loc_30B
.text:000002E7                 mov     edx, [ebp+var_8]
.text:000002EA                 mov     eax, [ebp+this]
.text:000002ED                 movzx   ecx, word ptr [eax+edx*2]
.text:000002F1                 cmp     ecx, 30h ; '0'
.text:000002F4                 jl      short loc_305
.text:000002F6                 mov     edx, [ebp+var_8]
.text:000002F9                 mov     eax, [ebp+this]
.text:000002FC                 movzx   ecx, word ptr [eax+edx*2]
.text:00000300                 cmp     ecx, 39h ; '9'
.text:00000303                 jle     short loc_309
.text:00000305
.text:00000305 loc_305:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+E0j
.text:00000305                 xor     al, al
.text:00000307                 jmp     short loc_30D
.text:00000309 ; ---------------------------------------------------------------------------
.text:00000309
.text:00000309 loc_309:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+EFj
.text:00000309                 jmp     short loc_2D6
.text:0000030B ; ---------------------------------------------------------------------------
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+D1j
.text:0000030B                 mov     al, 1
.text:0000030D
.text:0000030D loc_30D:                                ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+68j
.text:0000030D                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+8Dj ...
.text:0000030D                 add     esp, 8
.text:00000310                 cmp     ebp, esp
.text:00000312                 call    __RTC_CheckEsp
.text:00000317                 mov     esp, ebp
.text:00000319                 pop     ebp
.text:0000031A                 retn    4
.text:0000031A ?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:0000031A
.text:0000031A ; ---------------------------------------------------------------------------
.text:0000031D                 db 7 dup(0CCh)
.text:00000324
.text:00000324 ; =============== S U B R O U T I N E =======================================
.text:00000324
.text:00000324 ; Attributes: bp-based frame
.text:00000324
.text:00000324 ; bool __stdcall NWindows::NFile::NName::IsSuperUncPath(NWindows::NFile::NName *this, const wchar_t *)
.text:00000324                 public ?IsSuperUncPath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000324 ?IsSuperUncPath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000324                                         ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+4Ap
.text:00000324                                         ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+58p
.text:00000324
.text:00000324 var_4           = dword ptr -4
.text:00000324 this            = dword ptr  8
.text:00000324
.text:00000324                 push    ebp
.text:00000325                 mov     ebp, esp
.text:00000327                 push    ecx
.text:00000328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000032F                 mov     eax, [ebp+this]
.text:00000332                 movzx   ecx, word ptr [eax]
.text:00000335                 cmp     ecx, 5Ch ; '\'
.text:00000338                 jz      short loc_349
.text:0000033A                 mov     edx, [ebp+this]
.text:0000033D                 movzx   eax, word ptr [edx]
.text:00000340                 cmp     eax, 2Fh ; '/'
.text:00000343                 jnz     loc_3F6
.text:00000349
.text:00000349 loc_349:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+14j
.text:00000349                 mov     ecx, [ebp+this]
.text:0000034C                 movzx   edx, word ptr [ecx+2]
.text:00000350                 cmp     edx, 5Ch ; '\'
.text:00000353                 jz      short loc_365
.text:00000355                 mov     eax, [ebp+this]
.text:00000358                 movzx   ecx, word ptr [eax+2]
.text:0000035C                 cmp     ecx, 2Fh ; '/'
.text:0000035F                 jnz     loc_3F6
.text:00000365
.text:00000365 loc_365:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+2Fj
.text:00000365                 mov     edx, [ebp+this]
.text:00000368                 movzx   eax, word ptr [edx+4]
.text:0000036C                 cmp     eax, 3Fh ; '?'
.text:0000036F                 jnz     loc_3F6
.text:00000375                 mov     ecx, [ebp+this]
.text:00000378                 movzx   edx, word ptr [ecx+6]
.text:0000037C                 cmp     edx, 5Ch ; '\'
.text:0000037F                 jz      short loc_38D
.text:00000381                 mov     eax, [ebp+this]
.text:00000384                 movzx   ecx, word ptr [eax+6]
.text:00000388                 cmp     ecx, 2Fh ; '/'
.text:0000038B                 jnz     short loc_3F6
.text:0000038D
.text:0000038D loc_38D:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+5Bj
.text:0000038D                 mov     edx, [ebp+this]
.text:00000390                 movzx   eax, word ptr [edx+8]
.text:00000394                 cmp     eax, 55h ; 'U'
.text:00000397                 jz      short loc_3A5
.text:00000399                 mov     ecx, [ebp+this]
.text:0000039C                 movzx   edx, word ptr [ecx+8]
.text:000003A0                 cmp     edx, 75h ; 'u'
.text:000003A3                 jnz     short loc_3F6
.text:000003A5
.text:000003A5 loc_3A5:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+73j
.text:000003A5                 mov     eax, [ebp+this]
.text:000003A8                 movzx   ecx, word ptr [eax+0Ah]
.text:000003AC                 cmp     ecx, 4Eh ; 'N'
.text:000003AF                 jz      short loc_3BD
.text:000003B1                 mov     edx, [ebp+this]
.text:000003B4                 movzx   eax, word ptr [edx+0Ah]
.text:000003B8                 cmp     eax, 6Eh ; 'n'
.text:000003BB                 jnz     short loc_3F6
.text:000003BD
.text:000003BD loc_3BD:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+8Bj
.text:000003BD                 mov     ecx, [ebp+this]
.text:000003C0                 movzx   edx, word ptr [ecx+0Ch]
.text:000003C4                 cmp     edx, 43h ; 'C'
.text:000003C7                 jz      short loc_3D5
.text:000003C9                 mov     eax, [ebp+this]
.text:000003CC                 movzx   ecx, word ptr [eax+0Ch]
.text:000003D0                 cmp     ecx, 63h ; 'c'
.text:000003D3                 jnz     short loc_3F6
.text:000003D5
.text:000003D5 loc_3D5:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+A3j
.text:000003D5                 mov     edx, [ebp+this]
.text:000003D8                 movzx   eax, word ptr [edx+0Eh]
.text:000003DC                 cmp     eax, 5Ch ; '\'
.text:000003DF                 jz      short loc_3ED
.text:000003E1                 mov     ecx, [ebp+this]
.text:000003E4                 movzx   edx, word ptr [ecx+0Eh]
.text:000003E8                 cmp     edx, 2Fh ; '/'
.text:000003EB                 jnz     short loc_3F6
.text:000003ED
.text:000003ED loc_3ED:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+BBj
.text:000003ED                 mov     [ebp+var_4], 1
.text:000003F4                 jmp     short loc_3FD
.text:000003F6 ; ---------------------------------------------------------------------------
.text:000003F6
.text:000003F6 loc_3F6:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+1Fj
.text:000003F6                                         ; NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+3Bj ...
.text:000003F6                 mov     [ebp+var_4], 0
.text:000003FD
.text:000003FD loc_3FD:                                ; CODE XREF: NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)+D0j
.text:000003FD                 mov     al, byte ptr [ebp+var_4]
.text:00000400                 mov     esp, ebp
.text:00000402                 pop     ebp
.text:00000403                 retn    4
.text:00000403 ?IsSuperUncPath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:00000403
.text:00000403 ; ---------------------------------------------------------------------------
.text:00000406                 db 0Eh dup(0CCh)
.text:00000414
.text:00000414 ; =============== S U B R O U T I N E =======================================
.text:00000414
.text:00000414 ; Attributes: bp-based frame
.text:00000414
.text:00000414 ; bool __stdcall NWindows::NFile::NName::IsNetworkPath(NWindows::NFile::NName *this, const wchar_t *)
.text:00000414                 public ?IsNetworkPath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000414 ?IsNetworkPath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000414
.text:00000414 var_8           = dword ptr -8
.text:00000414 var_4           = dword ptr -4
.text:00000414 this            = dword ptr  8
.text:00000414
.text:00000414                 push    ebp
.text:00000415                 mov     ebp, esp
.text:00000417                 sub     esp, 8
.text:0000041A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000421                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000428                 mov     eax, [ebp+this]
.text:0000042B                 movzx   ecx, word ptr [eax]
.text:0000042E                 cmp     ecx, 5Ch ; '\'
.text:00000431                 jz      short loc_43E
.text:00000433                 mov     edx, [ebp+this]
.text:00000436                 movzx   eax, word ptr [edx]
.text:00000439                 cmp     eax, 2Fh ; '/'
.text:0000043C                 jnz     short loc_456
.text:0000043E
.text:0000043E loc_43E:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+1Dj
.text:0000043E                 mov     ecx, [ebp+this]
.text:00000441                 movzx   edx, word ptr [ecx+2]
.text:00000445                 cmp     edx, 5Ch ; '\'
.text:00000448                 jz      short loc_45A
.text:0000044A                 mov     eax, [ebp+this]
.text:0000044D                 movzx   ecx, word ptr [eax+2]
.text:00000451                 cmp     ecx, 2Fh ; '/'
.text:00000454                 jz      short loc_45A
.text:00000456
.text:00000456 loc_456:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+28j
.text:00000456                 xor     al, al
.text:00000458                 jmp     short loc_49E
.text:0000045A ; ---------------------------------------------------------------------------
.text:0000045A
.text:0000045A loc_45A:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+34j
.text:0000045A                                         ; NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+40j
.text:0000045A                 mov     edx, [ebp+this]
.text:0000045D                 push    edx             ; this
.text:0000045E                 call    ?IsSuperUncPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)
.text:00000463                 movzx   eax, al
.text:00000466                 test    eax, eax
.text:00000468                 jz      short loc_46E
.text:0000046A                 mov     al, 1
.text:0000046C                 jmp     short loc_49E
.text:0000046E ; ---------------------------------------------------------------------------
.text:0000046E
.text:0000046E loc_46E:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+54j
.text:0000046E                 mov     ecx, [ebp+this]
.text:00000471                 mov     dx, [ecx+4]
.text:00000475                 mov     word ptr [ebp+var_4], dx
.text:00000479                 movzx   eax, word ptr [ebp+var_4]
.text:0000047D                 cmp     eax, 2Eh ; '.'
.text:00000480                 jz      short loc_494
.text:00000482                 movzx   ecx, word ptr [ebp+var_4]
.text:00000486                 cmp     ecx, 3Fh ; '?'
.text:00000489                 jz      short loc_494
.text:0000048B                 mov     [ebp+var_8], 1
.text:00000492                 jmp     short loc_49B
.text:00000494 ; ---------------------------------------------------------------------------
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+6Cj
.text:00000494                                         ; NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+75j
.text:00000494                 mov     [ebp+var_8], 0
.text:0000049B
.text:0000049B loc_49B:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+7Ej
.text:0000049B                 mov     al, byte ptr [ebp+var_8]
.text:0000049E
.text:0000049E loc_49E:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+44j
.text:0000049E                                         ; NWindows::NFile::NName::IsNetworkPath(wchar_t const *)+58j
.text:0000049E                 add     esp, 8
.text:000004A1                 cmp     ebp, esp
.text:000004A3                 call    __RTC_CheckEsp
.text:000004A8                 mov     esp, ebp
.text:000004AA                 pop     ebp
.text:000004AB                 retn    4
.text:000004AB ?IsNetworkPath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:000004AB
.text:000004AB ; ---------------------------------------------------------------------------
.text:000004AE                 db 6 dup(0CCh)
.text:000004B4
.text:000004B4 ; =============== S U B R O U T I N E =======================================
.text:000004B4
.text:000004B4 ; Attributes: bp-based frame
.text:000004B4
.text:000004B4 ; unsigned int __stdcall NWindows::NFile::NName::GetNetworkServerPrefixSize(NWindows::NFile::NName *this, const wchar_t *)
.text:000004B4                 public ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z
.text:000004B4 ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z proc near
.text:000004B4                                         ; CODE XREF: NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+18p
.text:000004B4
.text:000004B4 var_C           = dword ptr -0Ch
.text:000004B4 var_8           = dword ptr -8
.text:000004B4 var_4           = dword ptr -4
.text:000004B4 this            = dword ptr  8
.text:000004B4
.text:000004B4                 push    ebp
.text:000004B5                 mov     ebp, esp
.text:000004B7                 sub     esp, 0Ch
.text:000004BA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000004C1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000004C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004CF                 mov     eax, [ebp+this]
.text:000004D2                 movzx   ecx, word ptr [eax]
.text:000004D5                 cmp     ecx, 5Ch ; '\'
.text:000004D8                 jz      short loc_4E5
.text:000004DA                 mov     edx, [ebp+this]
.text:000004DD                 movzx   eax, word ptr [edx]
.text:000004E0                 cmp     eax, 2Fh ; '/'
.text:000004E3                 jnz     short loc_4FD
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+24j
.text:000004E5                 mov     ecx, [ebp+this]
.text:000004E8                 movzx   edx, word ptr [ecx+2]
.text:000004EC                 cmp     edx, 5Ch ; '\'
.text:000004EF                 jz      short loc_501
.text:000004F1                 mov     eax, [ebp+this]
.text:000004F4                 movzx   ecx, word ptr [eax+2]
.text:000004F8                 cmp     ecx, 2Fh ; '/'
.text:000004FB                 jz      short loc_501
.text:000004FD
.text:000004FD loc_4FD:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+2Fj
.text:000004FD                 xor     eax, eax
.text:000004FF                 jmp     short loc_568
.text:00000501 ; ---------------------------------------------------------------------------
.text:00000501
.text:00000501 loc_501:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+3Bj
.text:00000501                                         ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+47j
.text:00000501                 mov     [ebp+var_4], 2
.text:00000508                 mov     edx, [ebp+this]
.text:0000050B                 push    edx             ; this
.text:0000050C                 call    ?IsSuperUncPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperUncPath(wchar_t const *)
.text:00000511                 movzx   eax, al
.text:00000514                 test    eax, eax
.text:00000516                 jz      short loc_521
.text:00000518                 mov     [ebp+var_4], 8
.text:0000051F                 jmp     short loc_542
.text:00000521 ; ---------------------------------------------------------------------------
.text:00000521
.text:00000521 loc_521:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+62j
.text:00000521                 mov     ecx, [ebp+this]
.text:00000524                 mov     dx, [ecx+4]
.text:00000528                 mov     word ptr [ebp+var_8], dx
.text:0000052C                 movzx   eax, word ptr [ebp+var_8]
.text:00000530                 cmp     eax, 2Eh ; '.'
.text:00000533                 jz      short loc_53E
.text:00000535                 movzx   ecx, word ptr [ebp+var_8]
.text:00000539                 cmp     ecx, 3Fh ; '?'
.text:0000053C                 jnz     short loc_542
.text:0000053E
.text:0000053E loc_53E:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+7Fj
.text:0000053E                 xor     eax, eax
.text:00000540                 jmp     short loc_568
.text:00000542 ; ---------------------------------------------------------------------------
.text:00000542
.text:00000542 loc_542:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+6Bj
.text:00000542                                         ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+88j
.text:00000542                 mov     edx, [ebp+var_4]
.text:00000545                 mov     eax, [ebp+this]
.text:00000548                 lea     ecx, [eax+edx*2]
.text:0000054B                 push    ecx             ; this
.text:0000054C                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:00000551                 mov     [ebp+var_C], eax
.text:00000554                 cmp     [ebp+var_C], 0
.text:00000558                 jge     short loc_55E
.text:0000055A                 xor     eax, eax
.text:0000055C                 jmp     short loc_568
.text:0000055E ; ---------------------------------------------------------------------------
.text:0000055E
.text:0000055E loc_55E:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+A4j
.text:0000055E                 mov     edx, [ebp+var_C]
.text:00000561                 mov     eax, [ebp+var_4]
.text:00000564                 lea     eax, [eax+edx+1]
.text:00000568
.text:00000568 loc_568:                                ; CODE XREF: NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+4Bj
.text:00000568                                         ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)+8Cj ...
.text:00000568                 add     esp, 0Ch
.text:0000056B                 cmp     ebp, esp
.text:0000056D                 call    __RTC_CheckEsp
.text:00000572                 mov     esp, ebp
.text:00000574                 pop     ebp
.text:00000575                 retn    4
.text:00000575 ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z endp
.text:00000575
.text:00000575 ; ---------------------------------------------------------------------------
.text:00000578                 db 0Ch dup(0CCh)
.text:00000584
.text:00000584 ; =============== S U B R O U T I N E =======================================
.text:00000584
.text:00000584 ; Attributes: bp-based frame
.text:00000584
.text:00000584 ; bool __stdcall NWindows::NFile::NName::IsNetworkShareRootPath(NWindows::NFile::NName *this, const wchar_t *)
.text:00000584                 public ?IsNetworkShareRootPath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000584 ?IsNetworkShareRootPath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000584
.text:00000584 var_8           = dword ptr -8
.text:00000584 var_4           = dword ptr -4
.text:00000584 this            = dword ptr  8
.text:00000584
.text:00000584                 push    ebp
.text:00000585                 mov     ebp, esp
.text:00000587                 sub     esp, 8
.text:0000058A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000591                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000598                 mov     eax, [ebp+this]
.text:0000059B                 push    eax             ; this
.text:0000059C                 call    ?GetNetworkServerPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetNetworkServerPrefixSize(wchar_t const *)
.text:000005A1                 mov     [ebp+var_4], eax
.text:000005A4                 cmp     [ebp+var_4], 0
.text:000005A8                 jnz     short loc_5AE
.text:000005AA                 xor     al, al
.text:000005AC                 jmp     short loc_5E2
.text:000005AE ; ---------------------------------------------------------------------------
.text:000005AE
.text:000005AE loc_5AE:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+24j
.text:000005AE                 mov     ecx, [ebp+var_4]
.text:000005B1                 mov     edx, [ebp+this]
.text:000005B4                 lea     eax, [edx+ecx*2]
.text:000005B7                 mov     [ebp+this], eax
.text:000005BA                 mov     ecx, [ebp+this]
.text:000005BD                 push    ecx             ; this
.text:000005BE                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:000005C3                 mov     [ebp+var_8], eax
.text:000005C6                 cmp     [ebp+var_8], 0
.text:000005CA                 jge     short loc_5D0
.text:000005CC                 mov     al, 1
.text:000005CE                 jmp     short loc_5E2
.text:000005D0 ; ---------------------------------------------------------------------------
.text:000005D0
.text:000005D0 loc_5D0:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+46j
.text:000005D0                 mov     edx, [ebp+var_8]
.text:000005D3                 mov     eax, [ebp+this]
.text:000005D6                 movzx   eax, word ptr [eax+edx*2+2]
.text:000005DB                 neg     eax
.text:000005DD                 sbb     eax, eax
.text:000005DF                 add     eax, 1
.text:000005E2
.text:000005E2 loc_5E2:                                ; CODE XREF: NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+28j
.text:000005E2                                         ; NWindows::NFile::NName::IsNetworkShareRootPath(wchar_t const *)+4Aj
.text:000005E2                 add     esp, 8
.text:000005E5                 cmp     ebp, esp
.text:000005E7                 call    __RTC_CheckEsp
.text:000005EC                 mov     esp, ebp
.text:000005EE                 pop     ebp
.text:000005EF                 retn    4
.text:000005EF ?IsNetworkShareRootPath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:000005EF
.text:000005EF ; ---------------------------------------------------------------------------
.text:000005F2                 align 4
.text:000005F4
.text:000005F4 ; =============== S U B R O U T I N E =======================================
.text:000005F4
.text:000005F4 ; Attributes: bp-based frame
.text:000005F4
.text:000005F4 ; bool __stdcall NWindows::NFile::NName::IsDrivePath2(NWindows::NFile::NName *this, const wchar_t *)
.text:000005F4                 public ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z
.text:000005F4 ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000005F4                                         ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+75p
.text:000005F4                                         ; NWindows::NFile::NName::IsAbsolutePath(wchar_t const *)+25p ...
.text:000005F4
.text:000005F4 var_4           = dword ptr -4
.text:000005F4 this            = dword ptr  8
.text:000005F4
.text:000005F4                 push    ebp
.text:000005F5                 mov     ebp, esp
.text:000005F7                 push    ecx
.text:000005F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005FF                 mov     eax, [ebp+this]
.text:00000602                 movzx   ecx, word ptr [eax]
.text:00000605                 cmp     ecx, 61h ; 'a'
.text:00000608                 jl      short loc_615
.text:0000060A                 mov     edx, [ebp+this]
.text:0000060D                 movzx   eax, word ptr [edx]
.text:00000610                 cmp     eax, 7Ah ; 'z'
.text:00000613                 jle     short loc_62B
.text:00000615
.text:00000615 loc_615:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath2(wchar_t const *)+14j
.text:00000615                 mov     ecx, [ebp+this]
.text:00000618                 movzx   edx, word ptr [ecx]
.text:0000061B                 cmp     edx, 41h ; 'A'
.text:0000061E                 jl      short loc_640
.text:00000620                 mov     eax, [ebp+this]
.text:00000623                 movzx   ecx, word ptr [eax]
.text:00000626                 cmp     ecx, 5Ah ; 'Z'
.text:00000629                 jg      short loc_640
.text:0000062B
.text:0000062B loc_62B:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath2(wchar_t const *)+1Fj
.text:0000062B                 mov     edx, [ebp+this]
.text:0000062E                 movzx   eax, word ptr [edx+2]
.text:00000632                 cmp     eax, 3Ah ; ':'
.text:00000635                 jnz     short loc_640
.text:00000637                 mov     [ebp+var_4], 1
.text:0000063E                 jmp     short loc_647
.text:00000640 ; ---------------------------------------------------------------------------
.text:00000640
.text:00000640 loc_640:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath2(wchar_t const *)+2Aj
.text:00000640                                         ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)+35j ...
.text:00000640                 mov     [ebp+var_4], 0
.text:00000647
.text:00000647 loc_647:                                ; CODE XREF: NWindows::NFile::NName::IsDrivePath2(wchar_t const *)+4Aj
.text:00000647                 mov     al, byte ptr [ebp+var_4]
.text:0000064A                 mov     esp, ebp
.text:0000064C                 pop     ebp
.text:0000064D                 retn    4
.text:0000064D ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:0000064D
.text:0000064D ; ---------------------------------------------------------------------------
.text:00000650                 db 4 dup(0CCh)
.text:00000654
.text:00000654 ; =============== S U B R O U T I N E =======================================
.text:00000654
.text:00000654 ; Attributes: bp-based frame
.text:00000654
.text:00000654 ; bool __stdcall NWindows::NFile::NName::IsSuperPath(NWindows::NFile::NName *this, const wchar_t *)
.text:00000654                 public ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000654 ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000654                                         ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+4Dp
.text:00000654                                         ; NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+Fp ...
.text:00000654
.text:00000654 var_4           = dword ptr -4
.text:00000654 this            = dword ptr  8
.text:00000654
.text:00000654                 push    ebp
.text:00000655                 mov     ebp, esp
.text:00000657                 push    ecx
.text:00000658                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000065F                 mov     eax, [ebp+this]
.text:00000662                 movzx   ecx, word ptr [eax]
.text:00000665                 cmp     ecx, 5Ch ; '\'
.text:00000668                 jz      short loc_675
.text:0000066A                 mov     edx, [ebp+this]
.text:0000066D                 movzx   eax, word ptr [edx]
.text:00000670                 cmp     eax, 2Fh ; '/'
.text:00000673                 jnz     short loc_6BA
.text:00000675
.text:00000675 loc_675:                                ; CODE XREF: NWindows::NFile::NName::IsSuperPath(wchar_t const *)+14j
.text:00000675                 mov     ecx, [ebp+this]
.text:00000678                 movzx   edx, word ptr [ecx+2]
.text:0000067C                 cmp     edx, 5Ch ; '\'
.text:0000067F                 jz      short loc_68D
.text:00000681                 mov     eax, [ebp+this]
.text:00000684                 movzx   ecx, word ptr [eax+2]
.text:00000688                 cmp     ecx, 2Fh ; '/'
.text:0000068B                 jnz     short loc_6BA
.text:0000068D
.text:0000068D loc_68D:                                ; CODE XREF: NWindows::NFile::NName::IsSuperPath(wchar_t const *)+2Bj
.text:0000068D                 mov     edx, [ebp+this]
.text:00000690                 movzx   eax, word ptr [edx+4]
.text:00000694                 cmp     eax, 3Fh ; '?'
.text:00000697                 jnz     short loc_6BA
.text:00000699                 mov     ecx, [ebp+this]
.text:0000069C                 movzx   edx, word ptr [ecx+6]
.text:000006A0                 cmp     edx, 5Ch ; '\'
.text:000006A3                 jz      short loc_6B1
.text:000006A5                 mov     eax, [ebp+this]
.text:000006A8                 movzx   ecx, word ptr [eax+6]
.text:000006AC                 cmp     ecx, 2Fh ; '/'
.text:000006AF                 jnz     short loc_6BA
.text:000006B1
.text:000006B1 loc_6B1:                                ; CODE XREF: NWindows::NFile::NName::IsSuperPath(wchar_t const *)+4Fj
.text:000006B1                 mov     [ebp+var_4], 1
.text:000006B8                 jmp     short loc_6C1
.text:000006BA ; ---------------------------------------------------------------------------
.text:000006BA
.text:000006BA loc_6BA:                                ; CODE XREF: NWindows::NFile::NName::IsSuperPath(wchar_t const *)+1Fj
.text:000006BA                                         ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)+37j ...
.text:000006BA                 mov     [ebp+var_4], 0
.text:000006C1
.text:000006C1 loc_6C1:                                ; CODE XREF: NWindows::NFile::NName::IsSuperPath(wchar_t const *)+64j
.text:000006C1                 mov     al, byte ptr [ebp+var_4]
.text:000006C4                 mov     esp, ebp
.text:000006C6                 pop     ebp
.text:000006C7                 retn    4
.text:000006C7 ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:000006C7
.text:000006C7 ; ---------------------------------------------------------------------------
.text:000006CA                 db 0Ah dup(0CCh)
.text:000006D4
.text:000006D4 ; =============== S U B R O U T I N E =======================================
.text:000006D4
.text:000006D4 ; Attributes: bp-based frame
.text:000006D4
.text:000006D4 ; bool __stdcall NWindows::NFile::NName::IsSuperOrDevicePath(NWindows::NFile::NName *this, const wchar_t *)
.text:000006D4                 public ?IsSuperOrDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:000006D4 ?IsSuperOrDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000006D4
.text:000006D4 var_4           = dword ptr -4
.text:000006D4 this            = dword ptr  8
.text:000006D4
.text:000006D4                 push    ebp
.text:000006D5                 mov     ebp, esp
.text:000006D7                 push    ecx
.text:000006D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006DF                 mov     eax, [ebp+this]
.text:000006E2                 movzx   ecx, word ptr [eax]
.text:000006E5                 cmp     ecx, 5Ch ; '\'
.text:000006E8                 jz      short loc_6F5
.text:000006EA                 mov     edx, [ebp+this]
.text:000006ED                 movzx   eax, word ptr [edx]
.text:000006F0                 cmp     eax, 2Fh ; '/'
.text:000006F3                 jnz     short loc_746
.text:000006F5
.text:000006F5 loc_6F5:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+14j
.text:000006F5                 mov     ecx, [ebp+this]
.text:000006F8                 movzx   edx, word ptr [ecx+2]
.text:000006FC                 cmp     edx, 5Ch ; '\'
.text:000006FF                 jz      short loc_70D
.text:00000701                 mov     eax, [ebp+this]
.text:00000704                 movzx   ecx, word ptr [eax+2]
.text:00000708                 cmp     ecx, 2Fh ; '/'
.text:0000070B                 jnz     short loc_746
.text:0000070D
.text:0000070D loc_70D:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+2Bj
.text:0000070D                 mov     edx, [ebp+this]
.text:00000710                 movzx   eax, word ptr [edx+4]
.text:00000714                 cmp     eax, 3Fh ; '?'
.text:00000717                 jz      short loc_725
.text:00000719                 mov     ecx, [ebp+this]
.text:0000071C                 movzx   edx, word ptr [ecx+4]
.text:00000720                 cmp     edx, 2Eh ; '.'
.text:00000723                 jnz     short loc_746
.text:00000725
.text:00000725 loc_725:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+43j
.text:00000725                 mov     eax, [ebp+this]
.text:00000728                 movzx   ecx, word ptr [eax+6]
.text:0000072C                 cmp     ecx, 5Ch ; '\'
.text:0000072F                 jz      short loc_73D
.text:00000731                 mov     edx, [ebp+this]
.text:00000734                 movzx   eax, word ptr [edx+6]
.text:00000738                 cmp     eax, 2Fh ; '/'
.text:0000073B                 jnz     short loc_746
.text:0000073D
.text:0000073D loc_73D:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+5Bj
.text:0000073D                 mov     [ebp+var_4], 1
.text:00000744                 jmp     short loc_74D
.text:00000746 ; ---------------------------------------------------------------------------
.text:00000746
.text:00000746 loc_746:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+1Fj
.text:00000746                                         ; NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+37j ...
.text:00000746                 mov     [ebp+var_4], 0
.text:0000074D
.text:0000074D loc_74D:                                ; CODE XREF: NWindows::NFile::NName::IsSuperOrDevicePath(wchar_t const *)+70j
.text:0000074D                 mov     al, byte ptr [ebp+var_4]
.text:00000750                 mov     esp, ebp
.text:00000752                 pop     ebp
.text:00000753                 retn    4
.text:00000753 ?IsSuperOrDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:00000753
.text:00000753 ; ---------------------------------------------------------------------------
.text:00000756                 db 0Eh dup(0CCh)
.text:00000764
.text:00000764 ; =============== S U B R O U T I N E =======================================
.text:00000764
.text:00000764 ; Attributes: bp-based frame
.text:00000764
.text:00000764 ; bool __stdcall NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(NWindows::NFile::NName *this, const wchar_t *)
.text:00000764                 public ?IsDriveRootPath_SuperAllowed@NName@NFile@NWindows@@YG_NPB_W@Z
.text:00000764 ?IsDriveRootPath_SuperAllowed@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000764
.text:00000764 var_4           = dword ptr -4
.text:00000764 this            = dword ptr  8
.text:00000764
.text:00000764                 push    ebp
.text:00000765                 mov     ebp, esp
.text:00000767                 push    ecx             ; wchar_t *
.text:00000768                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000076F                 mov     eax, [ebp+this]
.text:00000772                 push    eax             ; this
.text:00000773                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:00000778                 movzx   ecx, al
.text:0000077B                 test    ecx, ecx
.text:0000077D                 jz      short loc_788
.text:0000077F                 mov     edx, [ebp+this]
.text:00000782                 add     edx, 8
.text:00000785                 mov     [ebp+this], edx
.text:00000788
.text:00000788 loc_788:                                ; CODE XREF: NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+19j
.text:00000788                 mov     eax, [ebp+this]
.text:0000078B                 push    eax             ; this
.text:0000078C                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:00000791                 movzx   ecx, al
.text:00000794                 test    ecx, ecx
.text:00000796                 jz      short loc_7AC
.text:00000798                 mov     edx, [ebp+this]
.text:0000079B                 movzx   eax, word ptr [edx+6]
.text:0000079F                 test    eax, eax
.text:000007A1                 jnz     short loc_7AC
.text:000007A3                 mov     [ebp+var_4], 1
.text:000007AA                 jmp     short loc_7B3
.text:000007AC ; ---------------------------------------------------------------------------
.text:000007AC
.text:000007AC loc_7AC:                                ; CODE XREF: NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+32j
.text:000007AC                                         ; NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+3Dj
.text:000007AC                 mov     [ebp+var_4], 0
.text:000007B3
.text:000007B3 loc_7B3:                                ; CODE XREF: NWindows::NFile::NName::IsDriveRootPath_SuperAllowed(wchar_t const *)+46j
.text:000007B3                 mov     al, byte ptr [ebp+var_4]
.text:000007B6                 add     esp, 4
.text:000007B9                 cmp     ebp, esp
.text:000007BB                 call    __RTC_CheckEsp
.text:000007C0                 mov     esp, ebp
.text:000007C2                 pop     ebp
.text:000007C3                 retn    4
.text:000007C3 ?IsDriveRootPath_SuperAllowed@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:000007C3
.text:000007C3 ; ---------------------------------------------------------------------------
.text:000007C6                 db 0Eh dup(0CCh)
.text:000007D4
.text:000007D4 ; =============== S U B R O U T I N E =======================================
.text:000007D4
.text:000007D4 ; Attributes: bp-based frame
.text:000007D4
.text:000007D4 ; bool __stdcall NWindows::NFile::NName::IsAbsolutePath(NWindows::NFile::NName *this, const wchar_t *)
.text:000007D4                 public ?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z
.text:000007D4 ?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000007D4
.text:000007D4 var_4           = dword ptr -4
.text:000007D4 this            = dword ptr  8
.text:000007D4
.text:000007D4                 push    ebp
.text:000007D5                 mov     ebp, esp
.text:000007D7                 push    ecx             ; wchar_t *
.text:000007D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007DF                 mov     eax, [ebp+this]
.text:000007E2                 movzx   ecx, word ptr [eax]
.text:000007E5                 cmp     ecx, 5Ch ; '\'
.text:000007E8                 jz      short loc_80E
.text:000007EA                 mov     edx, [ebp+this]
.text:000007ED                 movzx   eax, word ptr [edx]
.text:000007F0                 cmp     eax, 2Fh ; '/'
.text:000007F3                 jz      short loc_80E
.text:000007F5                 mov     ecx, [ebp+this]
.text:000007F8                 push    ecx             ; this
.text:000007F9                 call    ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)
.text:000007FE                 movzx   edx, al
.text:00000801                 test    edx, edx
.text:00000803                 jnz     short loc_80E
.text:00000805                 mov     [ebp+var_4], 0
.text:0000080C                 jmp     short loc_815
.text:0000080E ; ---------------------------------------------------------------------------
.text:0000080E
.text:0000080E loc_80E:                                ; CODE XREF: NWindows::NFile::NName::IsAbsolutePath(wchar_t const *)+14j
.text:0000080E                                         ; NWindows::NFile::NName::IsAbsolutePath(wchar_t const *)+1Fj ...
.text:0000080E                 mov     [ebp+var_4], 1
.text:00000815
.text:00000815 loc_815:                                ; CODE XREF: NWindows::NFile::NName::IsAbsolutePath(wchar_t const *)+38j
.text:00000815                 mov     al, byte ptr [ebp+var_4]
.text:00000818                 add     esp, 4
.text:0000081B                 cmp     ebp, esp
.text:0000081D                 call    __RTC_CheckEsp
.text:00000822                 mov     esp, ebp
.text:00000824                 pop     ebp
.text:00000825                 retn    4
.text:00000825 ?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:00000825
.text:00000825 ; ---------------------------------------------------------------------------
.text:00000828                 db 0Ch dup(0CCh)
.text:00000834
.text:00000834 ; =============== S U B R O U T I N E =======================================
.text:00000834
.text:00000834 ; Attributes: bp-based frame
.text:00000834
.text:00000834 ; int __stdcall NWindows::NFile::NName::FindAltStreamColon(NWindows::NFile::NName *this, const wchar_t *)
.text:00000834                 public ?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z
.text:00000834 ?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z proc near
.text:00000834
.text:00000834 var_C           = dword ptr -0Ch
.text:00000834 var_8           = dword ptr -8
.text:00000834 var_4           = dword ptr -4
.text:00000834 this            = dword ptr  8
.text:00000834
.text:00000834                 push    ebp
.text:00000835                 mov     ebp, esp
.text:00000837                 sub     esp, 0Ch
.text:0000083A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000841                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000084F                 mov     [ebp+var_4], 0
.text:00000856                 mov     eax, [ebp+this]
.text:00000859                 push    eax             ; this
.text:0000085A                 call    ?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2(wchar_t const *)
.text:0000085F                 movzx   ecx, al
.text:00000862                 test    ecx, ecx
.text:00000864                 jz      short loc_86D
.text:00000866                 mov     [ebp+var_4], 2
.text:0000086D
.text:0000086D loc_86D:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+30j
.text:0000086D                 mov     [ebp+var_8], 0FFFFFFFFh
.text:00000874                 jmp     short loc_87F
.text:00000876 ; ---------------------------------------------------------------------------
.text:00000876
.text:00000876 loc_876:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *):loc_8AFj
.text:00000876                                         ; NWindows::NFile::NName::FindAltStreamColon(wchar_t const *):loc_8CAj
.text:00000876                 mov     edx, [ebp+var_4]
.text:00000879                 add     edx, 1
.text:0000087C                 mov     [ebp+var_4], edx
.text:0000087F
.text:0000087F loc_87F:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+40j
.text:0000087F                 mov     eax, [ebp+var_4]
.text:00000882                 mov     ecx, [ebp+this]
.text:00000885                 mov     dx, [ecx+eax*2]
.text:00000889                 mov     word ptr [ebp+var_C], dx
.text:0000088D                 movzx   eax, word ptr [ebp+var_C]
.text:00000891                 test    eax, eax
.text:00000893                 jnz     short loc_89A
.text:00000895                 mov     eax, [ebp+var_8]
.text:00000898                 jmp     short loc_8CC
.text:0000089A ; ---------------------------------------------------------------------------
.text:0000089A
.text:0000089A loc_89A:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+5Fj
.text:0000089A                 movzx   ecx, word ptr [ebp+var_C]
.text:0000089E                 cmp     ecx, 3Ah ; ':'
.text:000008A1                 jnz     short loc_8B1
.text:000008A3                 cmp     [ebp+var_8], 0
.text:000008A7                 jge     short loc_8AF
.text:000008A9                 mov     edx, [ebp+var_4]
.text:000008AC                 mov     [ebp+var_8], edx
.text:000008AF
.text:000008AF loc_8AF:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+73j
.text:000008AF                 jmp     short loc_876
.text:000008B1 ; ---------------------------------------------------------------------------
.text:000008B1
.text:000008B1 loc_8B1:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+6Dj
.text:000008B1                 movzx   eax, word ptr [ebp+var_C]
.text:000008B5                 cmp     eax, 5Ch ; '\'
.text:000008B8                 jz      short loc_8C3
.text:000008BA                 movzx   ecx, word ptr [ebp+var_C]
.text:000008BE                 cmp     ecx, 2Fh ; '/'
.text:000008C1                 jnz     short loc_8CA
.text:000008C3
.text:000008C3 loc_8C3:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+84j
.text:000008C3                 mov     [ebp+var_8], 0FFFFFFFFh
.text:000008CA
.text:000008CA loc_8CA:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+8Dj
.text:000008CA                 jmp     short loc_876
.text:000008CC ; ---------------------------------------------------------------------------
.text:000008CC
.text:000008CC loc_8CC:                                ; CODE XREF: NWindows::NFile::NName::FindAltStreamColon(wchar_t const *)+64j
.text:000008CC                 add     esp, 0Ch
.text:000008CF                 cmp     ebp, esp
.text:000008D1                 call    __RTC_CheckEsp
.text:000008D6                 mov     esp, ebp
.text:000008D8                 pop     ebp
.text:000008D9                 retn    4
.text:000008D9 ?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z endp
.text:000008D9
.text:000008D9 ; ---------------------------------------------------------------------------
.text:000008DC                 db 8 dup(0CCh)
.text:000008E4
.text:000008E4 ; =============== S U B R O U T I N E =======================================
.text:000008E4
.text:000008E4 ; Attributes: bp-based frame
.text:000008E4
.text:000008E4 ; unsigned int NWindows::NFile::NName::GetRootPrefixSize(NWindows::NFile::NName *__hidden this, const wchar_t *)
.text:000008E4                 public ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z
.text:000008E4 ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z proc near
.text:000008E4                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+45p
.text:000008E4
.text:000008E4 this            = dword ptr  8
.text:000008E4
.text:000008E4                 push    ebp             ; wchar_t *
.text:000008E5                 mov     ebp, esp
.text:000008E7                 mov     eax, [ebp+this]
.text:000008EA                 movzx   ecx, word ptr [eax]
.text:000008ED                 cmp     ecx, 5Ch ; '\'
.text:000008F0                 jz      short loc_8FD
.text:000008F2                 mov     edx, [ebp+this]
.text:000008F5                 movzx   eax, word ptr [edx]
.text:000008F8                 cmp     eax, 2Fh ; '/'
.text:000008FB                 jnz     short loc_940
.text:000008FD
.text:000008FD loc_8FD:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+Cj
.text:000008FD                 mov     ecx, [ebp+this]
.text:00000900                 movzx   edx, word ptr [ecx+2]
.text:00000904                 cmp     edx, 5Ch ; '\'
.text:00000907                 jz      short loc_915
.text:00000909                 mov     eax, [ebp+this]
.text:0000090C                 movzx   ecx, word ptr [eax+2]
.text:00000910                 cmp     ecx, 2Fh ; '/'
.text:00000913                 jnz     short loc_940
.text:00000915
.text:00000915 loc_915:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+23j
.text:00000915                 mov     edx, [ebp+this]
.text:00000918                 movzx   eax, word ptr [edx+4]
.text:0000091C                 cmp     eax, 2Eh ; '.'
.text:0000091F                 jnz     short loc_940
.text:00000921                 mov     ecx, [ebp+this]
.text:00000924                 movzx   edx, word ptr [ecx+6]
.text:00000928                 cmp     edx, 5Ch ; '\'
.text:0000092B                 jz      short loc_939
.text:0000092D                 mov     eax, [ebp+this]
.text:00000930                 movzx   ecx, word ptr [eax+6]
.text:00000934                 cmp     ecx, 2Fh ; '/'
.text:00000937                 jnz     short loc_940
.text:00000939
.text:00000939 loc_939:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+47j
.text:00000939                 mov     eax, 4
.text:0000093E                 jmp     short loc_964
.text:00000940 ; ---------------------------------------------------------------------------
.text:00000940
.text:00000940 loc_940:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+17j
.text:00000940                                         ; NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+2Fj ...
.text:00000940                 mov     edx, [ebp+this]
.text:00000943                 push    edx             ; this
.text:00000944                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:00000949                 movzx   eax, al
.text:0000094C                 test    eax, eax
.text:0000094E                 jz      short loc_95B
.text:00000950                 mov     ecx, [ebp+this]
.text:00000953                 push    ecx
.text:00000954                 call    ?GetRootPrefixSize_Of_SuperPath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)
.text:00000959                 jmp     short loc_964
.text:0000095B ; ---------------------------------------------------------------------------
.text:0000095B
.text:0000095B loc_95B:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+6Aj
.text:0000095B                 mov     edx, [ebp+this]
.text:0000095E                 push    edx             ; NWindows::NFile::NName *
.text:0000095F                 call    ?GetRootPrefixSize_Of_SimplePath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)
.text:00000964
.text:00000964 loc_964:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+5Aj
.text:00000964                                         ; NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+75j
.text:00000964                 cmp     ebp, esp
.text:00000966                 call    __RTC_CheckEsp
.text:0000096B                 pop     ebp
.text:0000096C                 retn    4
.text:0000096C ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z endp
.text:0000096C
.text:0000096C ; ---------------------------------------------------------------------------
.text:0000096F                 db 5 dup(0CCh)
.text:00000974
.text:00000974 ; =============== S U B R O U T I N E =======================================
.text:00000974
.text:00000974 ; Attributes: bp-based frame
.text:00000974
.text:00000974 ; int __stdcall NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(NWindows::NFile::NName *)
.text:00000974 ?GetRootPrefixSize_Of_SimplePath@NName@NFile@NWindows@@YGIPB_W@Z proc near
.text:00000974                                         ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+7Bp
.text:00000974
.text:00000974 var_8           = dword ptr -8
.text:00000974 var_4           = dword ptr -4
.text:00000974 arg_0           = dword ptr  8
.text:00000974
.text:00000974                 push    ebp
.text:00000975                 mov     ebp, esp
.text:00000977                 sub     esp, 8
.text:0000097A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000981                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000988                 mov     eax, [ebp+arg_0]
.text:0000098B                 push    eax             ; this
.text:0000098C                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:00000991                 movzx   ecx, al
.text:00000994                 test    ecx, ecx
.text:00000996                 jz      short loc_99F
.text:00000998                 mov     eax, 3
.text:0000099D                 jmp     short loc_A0D
.text:0000099F ; ---------------------------------------------------------------------------
.text:0000099F
.text:0000099F loc_99F:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+22j
.text:0000099F                 mov     edx, [ebp+arg_0]
.text:000009A2                 movzx   eax, word ptr [edx]
.text:000009A5                 cmp     eax, 5Ch ; '\'
.text:000009A8                 jz      short loc_9B9
.text:000009AA                 mov     ecx, [ebp+arg_0]
.text:000009AD                 movzx   edx, word ptr [ecx]
.text:000009B0                 cmp     edx, 2Fh ; '/'
.text:000009B3                 jz      short loc_9B9
.text:000009B5                 xor     eax, eax
.text:000009B7                 jmp     short loc_A0D
.text:000009B9 ; ---------------------------------------------------------------------------
.text:000009B9
.text:000009B9 loc_9B9:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+34j
.text:000009B9                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+3Fj
.text:000009B9                 mov     eax, [ebp+arg_0]
.text:000009BC                 movzx   ecx, word ptr [eax+2]
.text:000009C0                 test    ecx, ecx
.text:000009C2                 jz      short loc_9DC
.text:000009C4                 mov     edx, [ebp+arg_0]
.text:000009C7                 movzx   eax, word ptr [edx+2]
.text:000009CB                 cmp     eax, 5Ch ; '\'
.text:000009CE                 jz      short loc_9E3
.text:000009D0                 mov     ecx, [ebp+arg_0]
.text:000009D3                 movzx   edx, word ptr [ecx+2]
.text:000009D7                 cmp     edx, 2Fh ; '/'
.text:000009DA                 jz      short loc_9E3
.text:000009DC
.text:000009DC loc_9DC:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+4Ej
.text:000009DC                 mov     eax, 1
.text:000009E1                 jmp     short loc_A0D
.text:000009E3 ; ---------------------------------------------------------------------------
.text:000009E3
.text:000009E3 loc_9E3:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+5Aj
.text:000009E3                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+66j
.text:000009E3                 mov     eax, [ebp+arg_0]
.text:000009E6                 add     eax, 4
.text:000009E9                 push    eax             ; NWindows::NFile::NName *
.text:000009EA                 call    ?GetRootPrefixSize_Of_NetworkPath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)
.text:000009EF                 mov     [ebp+var_4], eax
.text:000009F2                 cmp     [ebp+var_4], 0
.text:000009F6                 jnz     short loc_A01
.text:000009F8                 mov     [ebp+var_8], 0
.text:000009FF                 jmp     short loc_A0A
.text:00000A01 ; ---------------------------------------------------------------------------
.text:00000A01
.text:00000A01 loc_A01:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+82j
.text:00000A01                 mov     ecx, [ebp+var_4]
.text:00000A04                 add     ecx, 2
.text:00000A07                 mov     [ebp+var_8], ecx
.text:00000A0A
.text:00000A0A loc_A0A:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+8Bj
.text:00000A0A                 mov     eax, [ebp+var_8]
.text:00000A0D
.text:00000A0D loc_A0D:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+29j
.text:00000A0D                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+43j ...
.text:00000A0D                 add     esp, 8
.text:00000A10                 cmp     ebp, esp
.text:00000A12                 call    __RTC_CheckEsp
.text:00000A17                 mov     esp, ebp
.text:00000A19                 pop     ebp
.text:00000A1A                 retn    4
.text:00000A1A ?GetRootPrefixSize_Of_SimplePath@NName@NFile@NWindows@@YGIPB_W@Z endp
.text:00000A1A
.text:00000A1A ; ---------------------------------------------------------------------------
.text:00000A1D                 db 7 dup(0CCh)
.text:00000A24
.text:00000A24 ; =============== S U B R O U T I N E =======================================
.text:00000A24
.text:00000A24 ; Attributes: bp-based frame
.text:00000A24
.text:00000A24 ; int __stdcall NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(NWindows::NFile::NName *)
.text:00000A24 ?GetRootPrefixSize_Of_NetworkPath@NName@NFile@NWindows@@YGIPB_W@Z proc near
.text:00000A24                                         ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SimplePath(wchar_t const *)+76p
.text:00000A24                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+82p ...
.text:00000A24
.text:00000A24 var_8           = dword ptr -8
.text:00000A24 var_4           = dword ptr -4
.text:00000A24 arg_0           = dword ptr  8
.text:00000A24
.text:00000A24                 push    ebp
.text:00000A25                 mov     ebp, esp
.text:00000A27                 sub     esp, 8
.text:00000A2A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000A31                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A38                 mov     eax, [ebp+arg_0]
.text:00000A3B                 push    eax             ; this
.text:00000A3C                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:00000A41                 mov     [ebp+var_4], eax
.text:00000A44                 cmp     [ebp+var_4], 0
.text:00000A48                 jge     short loc_A4E
.text:00000A4A                 xor     eax, eax
.text:00000A4C                 jmp     short loc_A75
.text:00000A4E ; ---------------------------------------------------------------------------
.text:00000A4E
.text:00000A4E loc_A4E:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)+24j
.text:00000A4E                 mov     ecx, [ebp+var_4]
.text:00000A51                 mov     edx, [ebp+arg_0]
.text:00000A54                 lea     eax, [edx+ecx*2+2]
.text:00000A58                 push    eax             ; this
.text:00000A59                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:00000A5E                 mov     [ebp+var_8], eax
.text:00000A61                 cmp     [ebp+var_8], 0
.text:00000A65                 jge     short loc_A6B
.text:00000A67                 xor     eax, eax
.text:00000A69                 jmp     short loc_A75
.text:00000A6B ; ---------------------------------------------------------------------------
.text:00000A6B
.text:00000A6B loc_A6B:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)+41j
.text:00000A6B                 mov     ecx, [ebp+var_8]
.text:00000A6E                 mov     edx, [ebp+var_4]
.text:00000A71                 lea     eax, [edx+ecx+2]
.text:00000A75
.text:00000A75 loc_A75:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)+28j
.text:00000A75                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)+45j
.text:00000A75                 add     esp, 8
.text:00000A78                 cmp     ebp, esp
.text:00000A7A                 call    __RTC_CheckEsp
.text:00000A7F                 mov     esp, ebp
.text:00000A81                 pop     ebp
.text:00000A82                 retn    4
.text:00000A82 ?GetRootPrefixSize_Of_NetworkPath@NName@NFile@NWindows@@YGIPB_W@Z endp
.text:00000A82
.text:00000A82 ; ---------------------------------------------------------------------------
.text:00000A85                 db 0Fh dup(0CCh)
.text:00000A94
.text:00000A94 ; =============== S U B R O U T I N E =======================================
.text:00000A94
.text:00000A94 ; Attributes: bp-based frame
.text:00000A94
.text:00000A94 ; unsigned int __stdcall NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)
.text:00000A94 ?GetRootPrefixSize_Of_SuperPath@NName@NFile@NWindows@@YGIPB_W@Z proc near
.text:00000A94                                         ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)+70p
.text:00000A94                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+167p
.text:00000A94
.text:00000A94 var_C           = dword ptr -0Ch
.text:00000A94 var_8           = dword ptr -8
.text:00000A94 var_4           = dword ptr -4
.text:00000A94 arg_0           = dword ptr  8
.text:00000A94
.text:00000A94                 push    ebp
.text:00000A95                 mov     ebp, esp
.text:00000A97                 sub     esp, 0Ch
.text:00000A9A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000AA1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AAF                 mov     eax, [ebp+arg_0]
.text:00000AB2                 movzx   ecx, word ptr [eax+8]
.text:00000AB6                 cmp     ecx, 55h ; 'U'
.text:00000AB9                 jz      short loc_AC7
.text:00000ABB                 mov     edx, [ebp+arg_0]
.text:00000ABE                 movzx   eax, word ptr [edx+8]
.text:00000AC2                 cmp     eax, 75h ; 'u'
.text:00000AC5                 jnz     short loc_B3B
.text:00000AC7
.text:00000AC7 loc_AC7:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+25j
.text:00000AC7                 mov     ecx, [ebp+arg_0]
.text:00000ACA                 movzx   edx, word ptr [ecx+0Ah]
.text:00000ACE                 cmp     edx, 4Eh ; 'N'
.text:00000AD1                 jz      short loc_ADF
.text:00000AD3                 mov     eax, [ebp+arg_0]
.text:00000AD6                 movzx   ecx, word ptr [eax+0Ah]
.text:00000ADA                 cmp     ecx, 6Eh ; 'n'
.text:00000ADD                 jnz     short loc_B3B
.text:00000ADF
.text:00000ADF loc_ADF:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+3Dj
.text:00000ADF                 mov     edx, [ebp+arg_0]
.text:00000AE2                 movzx   eax, word ptr [edx+0Ch]
.text:00000AE6                 cmp     eax, 43h ; 'C'
.text:00000AE9                 jz      short loc_AF7
.text:00000AEB                 mov     ecx, [ebp+arg_0]
.text:00000AEE                 movzx   edx, word ptr [ecx+0Ch]
.text:00000AF2                 cmp     edx, 63h ; 'c'
.text:00000AF5                 jnz     short loc_B3B
.text:00000AF7
.text:00000AF7 loc_AF7:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+55j
.text:00000AF7                 mov     eax, [ebp+arg_0]
.text:00000AFA                 movzx   ecx, word ptr [eax+0Eh]
.text:00000AFE                 cmp     ecx, 5Ch ; '\'
.text:00000B01                 jz      short loc_B0F
.text:00000B03                 mov     edx, [ebp+arg_0]
.text:00000B06                 movzx   eax, word ptr [edx+0Eh]
.text:00000B0A                 cmp     eax, 2Fh ; '/'
.text:00000B0D                 jnz     short loc_B3B
.text:00000B0F
.text:00000B0F loc_B0F:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+6Dj
.text:00000B0F                 mov     ecx, [ebp+arg_0]
.text:00000B12                 add     ecx, 10h
.text:00000B15                 push    ecx             ; NWindows::NFile::NName *
.text:00000B16                 call    ?GetRootPrefixSize_Of_NetworkPath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)
.text:00000B1B                 mov     [ebp+var_4], eax
.text:00000B1E                 cmp     [ebp+var_4], 0
.text:00000B22                 jnz     short loc_B2D
.text:00000B24                 mov     [ebp+var_C], 0
.text:00000B2B                 jmp     short loc_B36
.text:00000B2D ; ---------------------------------------------------------------------------
.text:00000B2D
.text:00000B2D loc_B2D:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+8Ej
.text:00000B2D                 mov     edx, [ebp+var_4]
.text:00000B30                 add     edx, 8
.text:00000B33                 mov     [ebp+var_C], edx
.text:00000B36
.text:00000B36 loc_B36:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+97j
.text:00000B36                 mov     eax, [ebp+var_C]
.text:00000B39                 jmp     short loc_B5A
.text:00000B3B ; ---------------------------------------------------------------------------
.text:00000B3B
.text:00000B3B loc_B3B:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+31j
.text:00000B3B                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+49j ...
.text:00000B3B                 mov     eax, [ebp+arg_0]
.text:00000B3E                 add     eax, 8
.text:00000B41                 push    eax             ; this
.text:00000B42                 call    ?FindSepar@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindSepar(wchar_t const *)
.text:00000B47                 mov     [ebp+var_8], eax
.text:00000B4A                 cmp     [ebp+var_8], 0
.text:00000B4E                 jge     short loc_B54
.text:00000B50                 xor     eax, eax
.text:00000B52                 jmp     short loc_B5A
.text:00000B54 ; ---------------------------------------------------------------------------
.text:00000B54
.text:00000B54 loc_B54:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+BAj
.text:00000B54                 mov     eax, [ebp+var_8]
.text:00000B57                 add     eax, 5
.text:00000B5A
.text:00000B5A loc_B5A:                                ; CODE XREF: NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+A5j
.text:00000B5A                                         ; NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)+BEj
.text:00000B5A                 add     esp, 0Ch
.text:00000B5D                 cmp     ebp, esp
.text:00000B5F                 call    __RTC_CheckEsp
.text:00000B64                 mov     esp, ebp
.text:00000B66                 pop     ebp
.text:00000B67                 retn    4
.text:00000B67 ?GetRootPrefixSize_Of_SuperPath@NName@NFile@NWindows@@YGIPB_W@Z endp
.text:00000B67
.text:00000B67 ; ---------------------------------------------------------------------------
.text:00000B6A                 db 0Ah dup(0CCh)
.text:00000B74
.text:00000B74 ; =============== S U B R O U T I N E =======================================
.text:00000B74
.text:00000B74 ; Attributes: bp-based frame
.text:00000B74
.text:00000B74 ; bool __stdcall NWindows::NFile::NName::GetFullPath(NWindows::NFile::NName *this, const wchar_t *, const wchar_t *, struct UString *)
.text:00000B74                 public ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z
.text:00000B74 ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z proc near
.text:00000B74                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,UString &)+Dp
.text:00000B74
.text:00000B74 var_58          = byte ptr -58h
.text:00000B74 var_57          = byte ptr -57h
.text:00000B74 var_56          = byte ptr -56h
.text:00000B74 var_55          = byte ptr -55h
.text:00000B74 var_54          = byte ptr -54h
.text:00000B74 var_53          = byte ptr -53h
.text:00000B74 var_52          = byte ptr -52h
.text:00000B74 var_51          = byte ptr -51h
.text:00000B74 var_4C          = byte ptr -4Ch
.text:00000B74 var_3C          = dword ptr -3Ch
.text:00000B74 var_34          = byte ptr -34h
.text:00000B74 var_20          = byte ptr -20h
.text:00000B74 var_10          = dword ptr -10h
.text:00000B74 var_C           = dword ptr -0Ch
.text:00000B74 var_4           = dword ptr -4
.text:00000B74 this            = dword ptr  8
.text:00000B74 arg_4           = dword ptr  0Ch
.text:00000B74 arg_8           = dword ptr  10h
.text:00000B74
.text:00000B74                 push    ebp
.text:00000B75                 mov     ebp, esp
.text:00000B77                 push    0FFFFFFFFh
.text:00000B79                 push    offset __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z
.text:00000B7E                 mov     eax, large fs:0
.text:00000B84                 push    eax
.text:00000B85                 sub     esp, 4Ch
.text:00000B88                 push    edi
.text:00000B89                 lea     edi, [ebp+var_58]
.text:00000B8C                 mov     ecx, 13h
.text:00000B91                 mov     eax, 0CCCCCCCCh
.text:00000B96                 rep stosd
.text:00000B98                 mov     eax, dword ptr ds:___security_cookie
.text:00000B9D                 xor     eax, ebp
.text:00000B9F                 push    eax             ; wchar_t *
.text:00000BA0                 lea     eax, [ebp+var_C]
.text:00000BA3                 mov     large fs:0, eax
.text:00000BA9                 mov     eax, [ebp+arg_4]
.text:00000BAC                 push    eax
.text:00000BAD                 mov     ecx, [ebp+arg_8]
.text:00000BB0                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000BB5                 mov     ecx, [ebp+arg_4]
.text:00000BB8                 push    ecx             ; this
.text:00000BB9                 call    ?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize(wchar_t const *)
.text:00000BBE                 mov     [ebp+var_10], eax
.text:00000BC1                 cmp     [ebp+var_10], 0
.text:00000BC5                 jz      loc_C5F
.text:00000BCB                 mov     edx, [ebp+var_10]
.text:00000BCE                 mov     eax, [ebp+arg_4]
.text:00000BD1                 lea     ecx, [eax+edx*2]
.text:00000BD4                 push    ecx
.text:00000BD5                 call    ?AreThereDotsFolders@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)
.text:00000BDA                 movzx   edx, al
.text:00000BDD                 test    edx, edx
.text:00000BDF                 jnz     short loc_BE8
.text:00000BE1                 mov     al, 1
.text:00000BE3                 jmp     loc_E81
.text:00000BE8 ; ---------------------------------------------------------------------------
.text:00000BE8
.text:00000BE8 loc_BE8:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+6Bj
.text:00000BE8                 mov     eax, [ebp+var_10]
.text:00000BEB                 mov     ecx, [ebp+arg_4]
.text:00000BEE                 lea     edx, [ecx+eax*2]
.text:00000BF1                 push    edx
.text:00000BF2                 lea     ecx, [ebp+var_20]
.text:00000BF5                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000BFA                 mov     [ebp+var_4], 0
.text:00000C01                 lea     eax, [ebp+var_20]
.text:00000C04                 push    eax             ; UString *
.text:00000C05                 call    ?ResolveDotsFolders@NName@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NName::ResolveDotsFolders(UString &)
.text:00000C0A                 movzx   ecx, al
.text:00000C0D                 test    ecx, ecx
.text:00000C0F                 jnz     short loc_C2C
.text:00000C11                 mov     [ebp+var_51], 1
.text:00000C15                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C1C                 lea     ecx, [ebp+var_20] ; this
.text:00000C1F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000C24                 mov     al, [ebp+var_51]
.text:00000C27                 jmp     loc_E81
.text:00000C2C ; ---------------------------------------------------------------------------
.text:00000C2C
.text:00000C2C loc_C2C:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+9Bj
.text:00000C2C                 mov     edx, [ebp+var_10]
.text:00000C2F                 push    edx             ; unsigned int
.text:00000C30                 mov     ecx, [ebp+arg_8] ; this
.text:00000C33                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000C38                 lea     eax, [ebp+var_20]
.text:00000C3B                 push    eax
.text:00000C3C                 mov     ecx, [ebp+arg_8]
.text:00000C3F                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00000C44                 mov     [ebp+var_52], 1
.text:00000C48                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C4F                 lea     ecx, [ebp+var_20] ; this
.text:00000C52                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000C57                 mov     al, [ebp+var_52]
.text:00000C5A                 jmp     loc_E81
.text:00000C5F ; ---------------------------------------------------------------------------
.text:00000C5F
.text:00000C5F loc_C5F:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+51j
.text:00000C5F                 lea     ecx, [ebp+var_34]
.text:00000C62                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000C67                 mov     [ebp+var_4], 1
.text:00000C6E                 cmp     [ebp+this], 0
.text:00000C72                 jz      short loc_C82
.text:00000C74                 mov     ecx, [ebp+this]
.text:00000C77                 push    ecx
.text:00000C78                 lea     ecx, [ebp+var_34]
.text:00000C7B                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000C80                 jmp     short loc_CAD
.text:00000C82 ; ---------------------------------------------------------------------------
.text:00000C82
.text:00000C82 loc_C82:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+FEj
.text:00000C82                 lea     edx, [ebp+var_34]
.text:00000C85                 push    edx             ; UString *
.text:00000C86                 call    ?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NName::GetCurDir(UString &)
.text:00000C8B                 movzx   eax, al
.text:00000C8E                 test    eax, eax
.text:00000C90                 jnz     short loc_CAD
.text:00000C92                 mov     [ebp+var_53], 0
.text:00000C96                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C9D                 lea     ecx, [ebp+var_34] ; this
.text:00000CA0                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CA5                 mov     al, [ebp+var_53]
.text:00000CA8                 jmp     loc_E81
.text:00000CAD ; ---------------------------------------------------------------------------
.text:00000CAD
.text:00000CAD loc_CAD:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+10Cj
.text:00000CAD                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+11Cj
.text:00000CAD                 lea     ecx, [ebp+var_34]
.text:00000CB0                 push    ecx             ; this
.text:00000CB1                 call    ?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)
.text:00000CB6                 mov     [ebp+var_3C], 0
.text:00000CBD                 lea     ecx, [ebp+var_34]
.text:00000CC0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000CC5                 push    eax             ; this
.text:00000CC6                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:00000CCB                 movzx   edx, al
.text:00000CCE                 test    edx, edx
.text:00000CD0                 jz      short loc_D09
.text:00000CD2                 lea     ecx, [ebp+var_34]
.text:00000CD5                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000CDA                 push    eax
.text:00000CDB                 call    ?GetRootPrefixSize_Of_SuperPath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_SuperPath(wchar_t const *)
.text:00000CE0                 mov     [ebp+var_3C], eax
.text:00000CE3                 cmp     [ebp+var_3C], 0
.text:00000CE7                 jnz     short loc_D04
.text:00000CE9                 mov     [ebp+var_54], 0
.text:00000CED                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CF4                 lea     ecx, [ebp+var_34] ; this
.text:00000CF7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000CFC                 mov     al, [ebp+var_54]
.text:00000CFF                 jmp     loc_E81
.text:00000D04 ; ---------------------------------------------------------------------------
.text:00000D04
.text:00000D04 loc_D04:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+173j
.text:00000D04                 jmp     loc_DB3
.text:00000D09 ; ---------------------------------------------------------------------------
.text:00000D09
.text:00000D09 loc_D09:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+15Cj
.text:00000D09                 lea     ecx, [ebp+var_34]
.text:00000D0C                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D11                 push    eax             ; this
.text:00000D12                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:00000D17                 movzx   eax, al
.text:00000D1A                 test    eax, eax
.text:00000D1C                 jz      short loc_D2A
.text:00000D1E                 mov     [ebp+var_3C], 3
.text:00000D25                 jmp     loc_DB3
.text:00000D2A ; ---------------------------------------------------------------------------
.text:00000D2A
.text:00000D2A loc_D2A:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+1A8j
.text:00000D2A                 lea     ecx, [ebp+var_34]
.text:00000D2D                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D32                 movzx   ecx, word ptr [eax]
.text:00000D35                 push    ecx             ; wchar_t
.text:00000D36                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:00000D3B                 movzx   edx, al
.text:00000D3E                 test    edx, edx
.text:00000D40                 jz      short loc_D5B
.text:00000D42                 lea     ecx, [ebp+var_34]
.text:00000D45                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D4A                 movzx   eax, word ptr [eax+2]
.text:00000D4E                 push    eax             ; wchar_t
.text:00000D4F                 call    ?IsPathSepar@@YG_N_W@Z ; IsPathSepar(wchar_t)
.text:00000D54                 movzx   ecx, al
.text:00000D57                 test    ecx, ecx
.text:00000D59                 jnz     short loc_D76
.text:00000D5B
.text:00000D5B loc_D5B:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+1CCj
.text:00000D5B                 mov     [ebp+var_55], 0
.text:00000D5F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D66                 lea     ecx, [ebp+var_34] ; this
.text:00000D69                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D6E                 mov     al, [ebp+var_55]
.text:00000D71                 jmp     loc_E81
.text:00000D76 ; ---------------------------------------------------------------------------
.text:00000D76
.text:00000D76 loc_D76:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+1E5j
.text:00000D76                 push    2               ; unsigned int
.text:00000D78                 lea     ecx, [ebp+var_34] ; this
.text:00000D7B                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000D80                 push    eax             ; NWindows::NFile::NName *
.text:00000D81                 call    ?GetRootPrefixSize_Of_NetworkPath@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize_Of_NetworkPath(wchar_t const *)
.text:00000D86                 mov     [ebp+var_3C], eax
.text:00000D89                 cmp     [ebp+var_3C], 0
.text:00000D8D                 jnz     short loc_DAA
.text:00000D8F                 mov     [ebp+var_56], 0
.text:00000D93                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D9A                 lea     ecx, [ebp+var_34] ; this
.text:00000D9D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000DA2                 mov     al, [ebp+var_56]
.text:00000DA5                 jmp     loc_E81
.text:00000DAA ; ---------------------------------------------------------------------------
.text:00000DAA
.text:00000DAA loc_DAA:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+219j
.text:00000DAA                 mov     edx, [ebp+var_3C]
.text:00000DAD                 add     edx, 2
.text:00000DB0                 mov     [ebp+var_3C], edx
.text:00000DB3
.text:00000DB3 loc_DB3:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &):loc_D04j
.text:00000DB3                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+1B1j
.text:00000DB3                 lea     ecx, [ebp+var_4C]
.text:00000DB6                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000DBB                 mov     byte ptr [ebp+var_4], 2
.text:00000DBF                 mov     eax, [ebp+arg_4]
.text:00000DC2                 movzx   ecx, word ptr [eax]
.text:00000DC5                 cmp     ecx, 5Ch ; '\'
.text:00000DC8                 jz      short loc_DD5
.text:00000DCA                 mov     edx, [ebp+arg_4]
.text:00000DCD                 movzx   eax, word ptr [edx]
.text:00000DD0                 cmp     eax, 2Fh ; '/'
.text:00000DD3                 jnz     short loc_DE6
.text:00000DD5
.text:00000DD5 loc_DD5:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+254j
.text:00000DD5                 mov     ecx, [ebp+arg_4]
.text:00000DD8                 add     ecx, 2
.text:00000DDB                 push    ecx
.text:00000DDC                 lea     ecx, [ebp+var_4C]
.text:00000DDF                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00000DE4                 jmp     short loc_E07
.text:00000DE6 ; ---------------------------------------------------------------------------
.text:00000DE6
.text:00000DE6 loc_DE6:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+25Fj
.text:00000DE6                 mov     edx, [ebp+var_3C]
.text:00000DE9                 push    edx             ; unsigned int
.text:00000DEA                 lea     ecx, [ebp+var_34] ; this
.text:00000DED                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000DF2                 push    eax
.text:00000DF3                 lea     ecx, [ebp+var_4C]
.text:00000DF6                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00000DFB                 mov     eax, [ebp+arg_4]
.text:00000DFE                 push    eax
.text:00000DFF                 lea     ecx, [ebp+var_4C]
.text:00000E02                 call    ??YUString@@QAEAAV0@PB_W@Z ; UString::operator+=(wchar_t const *)
.text:00000E07
.text:00000E07 loc_E07:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+270j
.text:00000E07                 lea     ecx, [ebp+var_4C]
.text:00000E0A                 push    ecx             ; UString *
.text:00000E0B                 call    ?ResolveDotsFolders@NName@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NName::ResolveDotsFolders(UString &)
.text:00000E10                 movzx   edx, al
.text:00000E13                 test    edx, edx
.text:00000E15                 jnz     short loc_E3B
.text:00000E17                 mov     [ebp+var_57], 0
.text:00000E1B                 mov     byte ptr [ebp+var_4], 1
.text:00000E1F                 lea     ecx, [ebp+var_4C] ; this
.text:00000E22                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E27                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E2E                 lea     ecx, [ebp+var_34] ; this
.text:00000E31                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E36                 mov     al, [ebp+var_57]
.text:00000E39                 jmp     short loc_E81
.text:00000E3B ; ---------------------------------------------------------------------------
.text:00000E3B
.text:00000E3B loc_E3B:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+2A1j
.text:00000E3B                 mov     eax, [ebp+var_3C]
.text:00000E3E                 push    eax             ; unsigned int
.text:00000E3F                 lea     ecx, [ebp+var_34] ; this
.text:00000E42                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000E47                 lea     ecx, [ebp+var_34]
.text:00000E4A                 push    ecx
.text:00000E4B                 mov     ecx, [ebp+arg_8]
.text:00000E4E                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000E53                 lea     edx, [ebp+var_4C]
.text:00000E56                 push    edx
.text:00000E57                 mov     ecx, [ebp+arg_8]
.text:00000E5A                 call    ??YUString@@QAEAAV0@ABV0@@Z ; UString::operator+=(UString const &)
.text:00000E5F                 mov     [ebp+var_58], 1
.text:00000E63                 mov     byte ptr [ebp+var_4], 1
.text:00000E67                 lea     ecx, [ebp+var_4C] ; this
.text:00000E6A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E6F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E76                 lea     ecx, [ebp+var_34] ; this
.text:00000E79                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000E7E                 mov     al, [ebp+var_58]
.text:00000E81
.text:00000E81 loc_E81:                                ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+6Fj
.text:00000E81                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+B3j ...
.text:00000E81                 push    edx
.text:00000E82                 mov     ecx, ebp
.text:00000E84                 push    eax
.text:00000E85                 lea     edx, $LN29
.text:00000E8B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000E90                 pop     eax
.text:00000E91                 pop     edx
.text:00000E92                 mov     ecx, [ebp+var_C]
.text:00000E95                 mov     large fs:0, ecx
.text:00000E9C                 pop     ecx
.text:00000E9D                 pop     edi
.text:00000E9E                 add     esp, 58h
.text:00000EA1                 cmp     ebp, esp
.text:00000EA3                 call    __RTC_CheckEsp
.text:00000EA8                 mov     esp, ebp
.text:00000EAA                 pop     ebp
.text:00000EAB                 retn    0Ch
.text:00000EAB ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z endp
.text:00000EAB
.text:00000EAB ; ---------------------------------------------------------------------------
.text:00000EAE                 align 10h
.text:00000EB0 $LN29           dd 3                    ; DATA XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+311o
.text:00000EB4                 dd offset $LN28
.text:00000EB8 $LN28           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000EB4o
.text:00000EC0                 dd offset $LN24         ; "rem"
.text:00000EC4                 db 0CCh
.text:00000EC5                 db 3 dup(0FFh)
.text:00000EC8                 dd 0Ch
.text:00000ECC                 dd offset $LN25         ; "curDir"
.text:00000ED0                 dd 0FFFFFFB4h, 0Ch
.text:00000ED8                 dd offset $LN26         ; "temp"
.text:00000EDC $LN26           db 'temp',0             ; DATA XREF: .text:00000ED8o
.text:00000EE1 $LN25           db 'curDir',0           ; DATA XREF: .text:00000ECCo
.text:00000EE8 $LN24           db 'rem',0              ; DATA XREF: .text:00000EC0o
.text:00000EEC                 db 8 dup(0CCh)
.text:00000EF4
.text:00000EF4 ; =============== S U B R O U T I N E =======================================
.text:00000EF4
.text:00000EF4 ; Attributes: bp-based frame
.text:00000EF4
.text:00000EF4 ; int __stdcall NWindows::NFile::NName::GetCurDir(UString *)
.text:00000EF4 ?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z proc near
.text:00000EF4                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+112p
.text:00000EF4
.text:00000EF4 var_35C         = dword ptr -35Ch
.text:00000EF4 var_358         = dword ptr -358h
.text:00000EF4 var_354         = dword ptr -354h
.text:00000EF4 var_350         = byte ptr -350h
.text:00000EF4 var_344         = byte ptr -344h
.text:00000EF4 var_334         = word ptr -334h
.text:00000EF4 Buffer          = byte ptr -120h
.text:00000EF4 var_14          = dword ptr -14h
.text:00000EF4 var_10          = dword ptr -10h
.text:00000EF4 var_C           = dword ptr -0Ch
.text:00000EF4 var_4           = dword ptr -4
.text:00000EF4 arg_0           = dword ptr  8
.text:00000EF4
.text:00000EF4                 push    ebp
.text:00000EF5                 mov     ebp, esp
.text:00000EF7                 push    0FFFFFFFFh
.text:00000EF9                 push    offset __ehhandler$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z
.text:00000EFE                 mov     eax, large fs:0
.text:00000F04                 push    eax
.text:00000F05                 sub     esp, 350h
.text:00000F0B                 push    esi
.text:00000F0C                 push    edi
.text:00000F0D                 lea     edi, [ebp+var_35C]
.text:00000F13                 mov     ecx, 0D4h ; '+'
.text:00000F18                 mov     eax, 0CCCCCCCCh
.text:00000F1D                 rep stosd
.text:00000F1F                 mov     eax, dword ptr ds:___security_cookie
.text:00000F24                 xor     eax, ebp
.text:00000F26                 mov     [ebp+var_10], eax
.text:00000F29                 push    eax
.text:00000F2A                 lea     eax, [ebp+var_C]
.text:00000F2D                 mov     large fs:0, eax
.text:00000F33                 mov     ecx, [ebp+arg_0] ; this
.text:00000F36                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000F3B                 movzx   eax, byte ptr ds:?g_IsNT@@3_NA ; bool g_IsNT
.text:00000F42                 test    eax, eax
.text:00000F44                 jnz     loc_FE3
.text:00000F4A                 mov     [ebp+Buffer], 0
.text:00000F51                 mov     esi, esp
.text:00000F53                 lea     ecx, [ebp+Buffer]
.text:00000F59                 push    ecx             ; lpBuffer
.text:00000F5A                 push    105h            ; nBufferLength
.text:00000F5F                 call    dword ptr ds:__imp__GetCurrentDirectoryA@8 ; GetCurrentDirectoryA(x,x)
.text:00000F65                 cmp     esi, esp
.text:00000F67                 call    __RTC_CheckEsp
.text:00000F6C                 mov     [ebp+var_14], eax
.text:00000F6F                 lea     edx, [ebp+Buffer]
.text:00000F75                 push    edx             ; char *
.text:00000F76                 lea     ecx, [ebp+var_344] ; this
.text:00000F7C                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000F81                 mov     [ebp+var_4], 0
.text:00000F88                 lea     eax, [ebp+var_344]
.text:00000F8E                 push    eax
.text:00000F8F                 lea     ecx, [ebp+var_350]
.text:00000F95                 push    ecx
.text:00000F96                 call    ?fas2fs@@YG?AVUString@@ABVAString@@@Z ; fas2fs(AString const &)
.text:00000F9B                 mov     [ebp+var_354], eax
.text:00000FA1                 mov     edx, [ebp+var_354]
.text:00000FA7                 mov     [ebp+var_358], edx
.text:00000FAD                 mov     byte ptr [ebp+var_4], 1
.text:00000FB1                 mov     eax, [ebp+var_358]
.text:00000FB7                 push    eax
.text:00000FB8                 mov     ecx, [ebp+arg_0]
.text:00000FBB                 call    ??4UString@@QAEAAV0@ABV0@@Z ; UString::operator=(UString const &)
.text:00000FC0                 mov     byte ptr [ebp+var_4], 0
.text:00000FC4                 lea     ecx, [ebp+var_350] ; this
.text:00000FCA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000FCF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FD6                 lea     ecx, [ebp+var_344] ; this
.text:00000FDC                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000FE1                 jmp     short loc_1019
.text:00000FE3 ; ---------------------------------------------------------------------------
.text:00000FE3
.text:00000FE3 loc_FE3:                                ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+50j
.text:00000FE3                 xor     ecx, ecx
.text:00000FE5                 mov     [ebp+var_334], cx
.text:00000FEC                 mov     esi, esp
.text:00000FEE                 lea     edx, [ebp+var_334]
.text:00000FF4                 push    edx             ; lpBuffer
.text:00000FF5                 push    105h            ; nBufferLength
.text:00000FFA                 call    dword ptr ds:__imp__GetCurrentDirectoryW@8 ; GetCurrentDirectoryW(x,x)
.text:00001000                 cmp     esi, esp
.text:00001002                 call    __RTC_CheckEsp
.text:00001007                 mov     [ebp+var_14], eax
.text:0000100A                 lea     eax, [ebp+var_334]
.text:00001010                 push    eax
.text:00001011                 mov     ecx, [ebp+arg_0]
.text:00001014                 call    ??4UString@@QAEAAV0@PB_W@Z ; UString::operator=(wchar_t const *)
.text:00001019
.text:00001019 loc_1019:                               ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+EDj
.text:00001019                 cmp     [ebp+var_14], 0
.text:0000101D                 jbe     short loc_1034
.text:0000101F                 cmp     [ebp+var_14], 104h
.text:00001026                 ja      short loc_1034
.text:00001028                 mov     [ebp+var_35C], 1
.text:00001032                 jmp     short loc_103E
.text:00001034 ; ---------------------------------------------------------------------------
.text:00001034
.text:00001034 loc_1034:                               ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+129j
.text:00001034                                         ; NWindows::NFile::NName::GetCurDir(UString &)+132j
.text:00001034                 mov     [ebp+var_35C], 0
.text:0000103E
.text:0000103E loc_103E:                               ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+13Ej
.text:0000103E                 mov     al, byte ptr [ebp+var_35C]
.text:00001044                 push    edx
.text:00001045                 mov     ecx, ebp
.text:00001047                 push    eax
.text:00001048                 lea     edx, $LN13
.text:0000104E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001053                 pop     eax
.text:00001054                 pop     edx
.text:00001055                 mov     ecx, [ebp+var_C]
.text:00001058                 mov     large fs:0, ecx
.text:0000105F                 pop     ecx
.text:00001060                 pop     edi
.text:00001061                 pop     esi
.text:00001062                 mov     ecx, [ebp+var_10]
.text:00001065                 xor     ecx, ebp
.text:00001067                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000106C                 add     esp, 35Ch
.text:00001072                 cmp     ebp, esp
.text:00001074                 call    __RTC_CheckEsp
.text:00001079                 mov     esp, ebp
.text:0000107B                 pop     ebp
.text:0000107C                 retn    4
.text:0000107C ?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z endp
.text:0000107C
.text:0000107C ; ---------------------------------------------------------------------------
.text:0000107F                 align 10h
.text:00001080 $LN13           dd 2                    ; DATA XREF: NWindows::NFile::NName::GetCurDir(UString &)+154o
.text:00001084                 dd offset $LN12
.text:00001088 $LN12           dd 0FFFFFEE0h, 106h     ; DATA XREF: .text:00001084o
.text:00001090                 dd offset $LN9
.text:00001094                 db 0CCh
.text:00001095                 db 0FCh, 2 dup(0FFh)
.text:00001098                 dd offset byte_20B+1
.text:0000109C                 dd offset $LN10
.text:000010A0 ; ---------------------------------------------------------------------------
.text:000010A0
.text:000010A0 $LN10:                                  ; DATA XREF: .text:0000109Co
.text:000010A0                 jnb     short $+2
.text:000010A2
.text:000010A2 $LN9:                                   ; CODE XREF: .text:$LN10j
.text:000010A2                                         ; DATA XREF: .text:00001090o
.text:000010A2                 jnb     short $+2       ; NWindows::NFile::NName::ResolveDotsFolders(UString &)
.text:000010A4
.text:000010A4 ; =============== S U B R O U T I N E =======================================
.text:000010A4
.text:000010A4 ; Attributes: bp-based frame
.text:000010A4
.text:000010A4 ; int __stdcall NWindows::NFile::NName::ResolveDotsFolders(UString *)
.text:000010A4 ?ResolveDotsFolders@NName@NFile@NWindows@@YG_NAAVUString@@@Z proc near
.text:000010A4                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+91p
.text:000010A4                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+297p ...
.text:000010A4
.text:000010A4 var_20          = dword ptr -20h
.text:000010A4 var_1C          = dword ptr -1Ch
.text:000010A4 var_18          = dword ptr -18h
.text:000010A4 var_14          = dword ptr -14h
.text:000010A4 var_10          = dword ptr -10h
.text:000010A4 var_C           = dword ptr -0Ch
.text:000010A4 var_8           = dword ptr -8
.text:000010A4 var_4           = dword ptr -4
.text:000010A4 arg_0           = dword ptr  8
.text:000010A4
.text:000010A4                 push    ebp
.text:000010A5                 mov     ebp, esp
.text:000010A7                 sub     esp, 20h
.text:000010AA                 mov     eax, 0CCCCCCCCh
.text:000010AF                 mov     [ebp+var_20], eax
.text:000010B2                 mov     [ebp+var_1C], eax
.text:000010B5                 mov     [ebp+var_18], eax
.text:000010B8                 mov     [ebp+var_14], eax
.text:000010BB                 mov     [ebp+var_10], eax
.text:000010BE                 mov     [ebp+var_C], eax
.text:000010C1                 mov     [ebp+var_8], eax
.text:000010C4                 mov     [ebp+var_4], eax
.text:000010C7                 mov     [ebp+var_4], 0
.text:000010CE
.text:000010CE loc_10CE:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+186j
.text:000010CE                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+1DEj ...
.text:000010CE                 mov     ecx, [ebp+arg_0]
.text:000010D1                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000010D6                 mov     ecx, [ebp+var_4]
.text:000010D9                 mov     dx, [eax+ecx*2]
.text:000010DD                 mov     word ptr [ebp+var_8], dx
.text:000010E1                 movzx   eax, word ptr [ebp+var_8]
.text:000010E5                 test    eax, eax
.text:000010E7                 jnz     short loc_10F0
.text:000010E9                 mov     al, 1
.text:000010EB                 jmp     loc_1295
.text:000010F0 ; ---------------------------------------------------------------------------
.text:000010F0
.text:000010F0 loc_10F0:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+43j
.text:000010F0                 movzx   ecx, word ptr [ebp+var_8]
.text:000010F4                 cmp     ecx, 2Eh ; '.'
.text:000010F7                 jnz     loc_1287
.text:000010FD                 cmp     [ebp+var_4], 0
.text:00001101                 jz      short loc_1131
.text:00001103                 mov     ecx, [ebp+arg_0]
.text:00001106                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000110B                 mov     edx, [ebp+var_4]
.text:0000110E                 movzx   eax, word ptr [eax+edx*2-2]
.text:00001113                 cmp     eax, 5Ch ; '\'
.text:00001116                 jz      short loc_1131
.text:00001118                 mov     ecx, [ebp+arg_0]
.text:0000111B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001120                 mov     ecx, [ebp+var_4]
.text:00001123                 movzx   edx, word ptr [eax+ecx*2-2]
.text:00001128                 cmp     edx, 2Fh ; '/'
.text:0000112B                 jnz     loc_1287
.text:00001131
.text:00001131 loc_1131:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+5Dj
.text:00001131                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+72j
.text:00001131                 mov     ecx, [ebp+arg_0]
.text:00001134                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00001139                 mov     ecx, [ebp+var_4]
.text:0000113C                 mov     dx, [eax+ecx*2+2]
.text:00001141                 mov     word ptr [ebp+var_C], dx
.text:00001145                 movzx   eax, word ptr [ebp+var_C]
.text:00001149                 cmp     eax, 2Eh ; '.'
.text:0000114C                 jnz     loc_1231
.text:00001152                 mov     ecx, [ebp+arg_0]
.text:00001155                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000115A                 mov     ecx, [ebp+var_4]
.text:0000115D                 mov     dx, [eax+ecx*2+4]
.text:00001162                 mov     word ptr [ebp+var_10], dx
.text:00001166                 movzx   eax, word ptr [ebp+var_10]
.text:0000116A                 cmp     eax, 5Ch ; '\'
.text:0000116D                 jz      short loc_1184
.text:0000116F                 movzx   ecx, word ptr [ebp+var_10]
.text:00001173                 cmp     ecx, 2Fh ; '/'
.text:00001176                 jz      short loc_1184
.text:00001178                 movzx   edx, word ptr [ebp+var_10]
.text:0000117C                 test    edx, edx
.text:0000117E                 jnz     loc_122F
.text:00001184
.text:00001184 loc_1184:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+C9j
.text:00001184                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+D2j
.text:00001184                 cmp     [ebp+var_4], 0
.text:00001188                 jnz     short loc_1191
.text:0000118A                 xor     al, al
.text:0000118C                 jmp     loc_1295
.text:00001191 ; ---------------------------------------------------------------------------
.text:00001191
.text:00001191 loc_1191:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+E4j
.text:00001191                 mov     eax, [ebp+var_4]
.text:00001194                 sub     eax, 2
.text:00001197                 mov     [ebp+var_14], eax
.text:0000119A                 jmp     short loc_11A5
.text:0000119C ; ---------------------------------------------------------------------------
.text:0000119C
.text:0000119C loc_119C:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &):loc_11D5j
.text:0000119C                 mov     ecx, [ebp+var_14]
.text:0000119F                 sub     ecx, 1
.text:000011A2                 mov     [ebp+var_14], ecx
.text:000011A5
.text:000011A5 loc_11A5:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+F6j
.text:000011A5                 cmp     [ebp+var_14], 0
.text:000011A9                 jl      short loc_11D7
.text:000011AB                 mov     ecx, [ebp+arg_0]
.text:000011AE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000011B3                 mov     edx, [ebp+var_14]
.text:000011B6                 movzx   eax, word ptr [eax+edx*2]
.text:000011BA                 cmp     eax, 5Ch ; '\'
.text:000011BD                 jz      short loc_11D3
.text:000011BF                 mov     ecx, [ebp+arg_0]
.text:000011C2                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000011C7                 mov     ecx, [ebp+var_14]
.text:000011CA                 movzx   edx, word ptr [eax+ecx*2]
.text:000011CE                 cmp     edx, 2Fh ; '/'
.text:000011D1                 jnz     short loc_11D5
.text:000011D3
.text:000011D3 loc_11D3:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+119j
.text:000011D3                 jmp     short loc_11D7
.text:000011D5 ; ---------------------------------------------------------------------------
.text:000011D5
.text:000011D5 loc_11D5:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+12Dj
.text:000011D5                 jmp     short loc_119C
.text:000011D7 ; ---------------------------------------------------------------------------
.text:000011D7
.text:000011D7 loc_11D7:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+105j
.text:000011D7                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &):loc_11D3j
.text:000011D7                 cmp     [ebp+var_14], 0
.text:000011DB                 jl      short loc_11F1
.text:000011DD                 mov     eax, [ebp+var_4]
.text:000011E0                 add     eax, 2
.text:000011E3                 sub     eax, [ebp+var_14]
.text:000011E6                 mov     [ebp+var_18], eax
.text:000011E9                 mov     ecx, [ebp+var_14]
.text:000011EC                 mov     [ebp+var_4], ecx
.text:000011EF                 jmp     short loc_121A
.text:000011F1 ; ---------------------------------------------------------------------------
.text:000011F1
.text:000011F1 loc_11F1:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+137j
.text:000011F1                 movzx   edx, word ptr [ebp+var_10]
.text:000011F5                 test    edx, edx
.text:000011F7                 jnz     short loc_1204
.text:000011F9                 mov     eax, [ebp+var_4]
.text:000011FC                 add     eax, 2
.text:000011FF                 mov     [ebp+var_20], eax
.text:00001202                 jmp     short loc_120D
.text:00001204 ; ---------------------------------------------------------------------------
.text:00001204
.text:00001204 loc_1204:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+153j
.text:00001204                 mov     ecx, [ebp+var_4]
.text:00001207                 add     ecx, 3
.text:0000120A                 mov     [ebp+var_20], ecx
.text:0000120D
.text:0000120D loc_120D:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+15Ej
.text:0000120D                 mov     edx, [ebp+var_20]
.text:00001210                 mov     [ebp+var_18], edx
.text:00001213                 mov     [ebp+var_4], 0
.text:0000121A
.text:0000121A loc_121A:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+14Bj
.text:0000121A                 mov     eax, [ebp+var_18]
.text:0000121D                 push    eax             ; unsigned int
.text:0000121E                 mov     ecx, [ebp+var_4]
.text:00001221                 push    ecx             ; unsigned int
.text:00001222                 mov     ecx, [ebp+arg_0] ; this
.text:00001225                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:0000122A                 jmp     loc_10CE
.text:0000122F ; ---------------------------------------------------------------------------
.text:0000122F
.text:0000122F loc_122F:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+DAj
.text:0000122F                 jmp     short loc_1287
.text:00001231 ; ---------------------------------------------------------------------------
.text:00001231
.text:00001231 loc_1231:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+A8j
.text:00001231                 movzx   edx, word ptr [ebp+var_C]
.text:00001235                 cmp     edx, 5Ch ; '\'
.text:00001238                 jz      short loc_124B
.text:0000123A                 movzx   eax, word ptr [ebp+var_C]
.text:0000123E                 cmp     eax, 2Fh ; '/'
.text:00001241                 jz      short loc_124B
.text:00001243                 movzx   ecx, word ptr [ebp+var_C]
.text:00001247                 test    ecx, ecx
.text:00001249                 jnz     short loc_1287
.text:0000124B
.text:0000124B loc_124B:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+194j
.text:0000124B                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+19Dj
.text:0000124B                 mov     [ebp+var_1C], 2
.text:00001252                 cmp     [ebp+var_4], 0
.text:00001256                 jz      short loc_1263
.text:00001258                 mov     edx, [ebp+var_4]
.text:0000125B                 sub     edx, 1
.text:0000125E                 mov     [ebp+var_4], edx
.text:00001261                 jmp     short loc_1272
.text:00001263 ; ---------------------------------------------------------------------------
.text:00001263
.text:00001263 loc_1263:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+1B2j
.text:00001263                 movzx   eax, word ptr [ebp+var_C]
.text:00001267                 test    eax, eax
.text:00001269                 jnz     short loc_1272
.text:0000126B                 mov     [ebp+var_1C], 1
.text:00001272
.text:00001272 loc_1272:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+1BDj
.text:00001272                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+1C5j
.text:00001272                 mov     ecx, [ebp+var_1C]
.text:00001275                 push    ecx             ; unsigned int
.text:00001276                 mov     edx, [ebp+var_4]
.text:00001279                 push    edx             ; unsigned int
.text:0000127A                 mov     ecx, [ebp+arg_0] ; this
.text:0000127D                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:00001282                 jmp     loc_10CE
.text:00001287 ; ---------------------------------------------------------------------------
.text:00001287
.text:00001287 loc_1287:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+53j
.text:00001287                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+87j ...
.text:00001287                 mov     eax, [ebp+var_4]
.text:0000128A                 add     eax, 1
.text:0000128D                 mov     [ebp+var_4], eax
.text:00001290                 jmp     loc_10CE
.text:00001295 ; ---------------------------------------------------------------------------
.text:00001295
.text:00001295 loc_1295:                               ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+47j
.text:00001295                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+E8j
.text:00001295                 add     esp, 20h
.text:00001298                 cmp     ebp, esp
.text:0000129A                 call    __RTC_CheckEsp
.text:0000129F                 mov     esp, ebp
.text:000012A1                 pop     ebp
.text:000012A2                 retn    4
.text:000012A2 ?ResolveDotsFolders@NName@NFile@NWindows@@YG_NAAVUString@@@Z endp
.text:000012A2
.text:000012A2 ; ---------------------------------------------------------------------------
.text:000012A5                 db 0Fh dup(0CCh)
.text:000012B4
.text:000012B4 ; =============== S U B R O U T I N E =======================================
.text:000012B4
.text:000012B4 ; Attributes: bp-based frame
.text:000012B4
.text:000012B4 ; bool __stdcall NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)
.text:000012B4 ?AreThereDotsFolders@NName@NFile@NWindows@@YG_NPB_W@Z proc near
.text:000012B4                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+61p
.text:000012B4
.text:000012B4 var_C           = dword ptr -0Ch
.text:000012B4 var_8           = dword ptr -8
.text:000012B4 var_4           = dword ptr -4
.text:000012B4 arg_0           = dword ptr  8
.text:000012B4
.text:000012B4                 push    ebp
.text:000012B5                 mov     ebp, esp
.text:000012B7                 sub     esp, 0Ch
.text:000012BA                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000012C1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000012C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012CF                 mov     [ebp+var_4], 0
.text:000012D6                 jmp     short loc_12E1
.text:000012D8 ; ---------------------------------------------------------------------------
.text:000012D8
.text:000012D8 loc_12D8:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *):loc_1396j
.text:000012D8                 mov     eax, [ebp+var_4]
.text:000012DB                 add     eax, 1
.text:000012DE                 mov     [ebp+var_4], eax
.text:000012E1
.text:000012E1 loc_12E1:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+22j
.text:000012E1                 mov     ecx, [ebp+var_4]
.text:000012E4                 mov     edx, [ebp+arg_0]
.text:000012E7                 mov     ax, [edx+ecx*2]
.text:000012EB                 mov     word ptr [ebp+var_8], ax
.text:000012EF                 movzx   ecx, word ptr [ebp+var_8]
.text:000012F3                 test    ecx, ecx
.text:000012F5                 jnz     short loc_12FE
.text:000012F7                 xor     al, al
.text:000012F9                 jmp     loc_139B
.text:000012FE ; ---------------------------------------------------------------------------
.text:000012FE
.text:000012FE loc_12FE:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+41j
.text:000012FE                 movzx   edx, word ptr [ebp+var_8]
.text:00001302                 cmp     edx, 2Eh ; '.'
.text:00001305                 jnz     loc_1396
.text:0000130B                 cmp     [ebp+var_4], 0
.text:0000130F                 jz      short loc_1331
.text:00001311                 mov     eax, [ebp+var_4]
.text:00001314                 mov     ecx, [ebp+arg_0]
.text:00001317                 movzx   edx, word ptr [ecx+eax*2-2]
.text:0000131C                 cmp     edx, 5Ch ; '\'
.text:0000131F                 jz      short loc_1331
.text:00001321                 mov     eax, [ebp+var_4]
.text:00001324                 mov     ecx, [ebp+arg_0]
.text:00001327                 movzx   edx, word ptr [ecx+eax*2-2]
.text:0000132C                 cmp     edx, 2Fh ; '/'
.text:0000132F                 jnz     short loc_1396
.text:00001331
.text:00001331 loc_1331:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+5Bj
.text:00001331                                         ; NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+6Bj
.text:00001331                 mov     eax, [ebp+var_4]
.text:00001334                 mov     ecx, [ebp+arg_0]
.text:00001337                 mov     dx, [ecx+eax*2+2]
.text:0000133C                 mov     word ptr [ebp+var_C], dx
.text:00001340                 movzx   eax, word ptr [ebp+var_C]
.text:00001344                 test    eax, eax
.text:00001346                 jz      short loc_1392
.text:00001348                 movzx   ecx, word ptr [ebp+var_C]
.text:0000134C                 cmp     ecx, 5Ch ; '\'
.text:0000134F                 jz      short loc_1392
.text:00001351                 movzx   edx, word ptr [ebp+var_C]
.text:00001355                 cmp     edx, 2Fh ; '/'
.text:00001358                 jz      short loc_1392
.text:0000135A                 movzx   eax, word ptr [ebp+var_C]
.text:0000135E                 cmp     eax, 2Eh ; '.'
.text:00001361                 jnz     short loc_1396
.text:00001363                 mov     ecx, [ebp+var_4]
.text:00001366                 mov     edx, [ebp+arg_0]
.text:00001369                 movzx   eax, word ptr [edx+ecx*2+4]
.text:0000136E                 test    eax, eax
.text:00001370                 jz      short loc_1392
.text:00001372                 mov     ecx, [ebp+var_4]
.text:00001375                 mov     edx, [ebp+arg_0]
.text:00001378                 movzx   eax, word ptr [edx+ecx*2+4]
.text:0000137D                 cmp     eax, 5Ch ; '\'
.text:00001380                 jz      short loc_1392
.text:00001382                 mov     ecx, [ebp+var_4]
.text:00001385                 mov     edx, [ebp+arg_0]
.text:00001388                 movzx   eax, word ptr [edx+ecx*2+4]
.text:0000138D                 cmp     eax, 2Fh ; '/'
.text:00001390                 jnz     short loc_1396
.text:00001392
.text:00001392 loc_1392:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+92j
.text:00001392                                         ; NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+9Bj ...
.text:00001392                 mov     al, 1
.text:00001394                 jmp     short loc_139B
.text:00001396 ; ---------------------------------------------------------------------------
.text:00001396
.text:00001396 loc_1396:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+51j
.text:00001396                                         ; NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+7Bj ...
.text:00001396                 jmp     loc_12D8
.text:0000139B ; ---------------------------------------------------------------------------
.text:0000139B
.text:0000139B loc_139B:                               ; CODE XREF: NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+45j
.text:0000139B                                         ; NWindows::NFile::NName::AreThereDotsFolders(wchar_t const *)+E0j
.text:0000139B                 mov     esp, ebp
.text:0000139D                 pop     ebp
.text:0000139E                 retn    4
.text:0000139E ?AreThereDotsFolders@NName@NFile@NWindows@@YG_NPB_W@Z endp
.text:0000139E
.text:0000139E ; ---------------------------------------------------------------------------
.text:000013A1                 align 4
.text:000013A4
.text:000013A4 ; =============== S U B R O U T I N E =======================================
.text:000013A4
.text:000013A4 ; Attributes: bp-based frame
.text:000013A4
.text:000013A4 ; bool NWindows::NFile::NName::GetFullPath(NWindows::NFile::NName *__hidden this, const wchar_t *, struct UString *)
.text:000013A4                 public ?GetFullPath@NName@NFile@NWindows@@YG_NPB_WAAVUString@@@Z
.text:000013A4 ?GetFullPath@NName@NFile@NWindows@@YG_NPB_WAAVUString@@@Z proc near
.text:000013A4
.text:000013A4 arg_0           = dword ptr  8
.text:000013A4 arg_4           = dword ptr  0Ch
.text:000013A4
.text:000013A4                 push    ebp             ; struct UString *
.text:000013A5                 mov     ebp, esp
.text:000013A7                 mov     eax, [ebp+arg_4]
.text:000013AA                 push    eax             ; wchar_t *
.text:000013AB                 mov     ecx, [ebp+arg_0]
.text:000013AE                 push    ecx             ; wchar_t *
.text:000013AF                 push    0               ; this
.text:000013B1                 call    ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)
.text:000013B6                 cmp     ebp, esp
.text:000013B8                 call    __RTC_CheckEsp
.text:000013BD                 pop     ebp
.text:000013BE                 retn    8
.text:000013BE ?GetFullPath@NName@NFile@NWindows@@YG_NPB_WAAVUString@@@Z endp
.text:000013BE
.text:000013BE ; ---------------------------------------------------------------------------
.text:000013C1                 align 4
.text:000013C1 _text           ends
.text:000013C1
.rtc$TMZ:000013C4 ; ===========================================================================
.rtc$TMZ:000013C4
.rtc$TMZ:000013C4 ; Segment type: Pure data
.rtc$TMZ:000013C4 ; Segment permissions: Read
.rtc$TMZ:000013C4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000013C4                 assume cs:_rtc$TMZ
.rtc$TMZ:000013C4                 ;org 13C4h
.rtc$TMZ:000013C4 ; COMDAT (pick any)
.rtc$TMZ:000013C4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000013C4 _rtc$TMZ        ends
.rtc$TMZ:000013C4
.rtc$IMZ:000013C8 ; ===========================================================================
.rtc$IMZ:000013C8
.rtc$IMZ:000013C8 ; Segment type: Pure data
.rtc$IMZ:000013C8 ; Segment permissions: Read
.rtc$IMZ:000013C8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000013C8                 assume cs:_rtc$IMZ
.rtc$IMZ:000013C8                 ;org 13C8h
.rtc$IMZ:000013C8 ; COMDAT (pick any)
.rtc$IMZ:000013C8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000013C8 _rtc$IMZ        ends
.rtc$IMZ:000013C8
.text:000013CC ; ===========================================================================
.text:000013CC
.text:000013CC ; Segment type: Pure code
.text:000013CC ; Segment permissions: Read/Execute
.text:000013CC _text           segment para public 'CODE' use32
.text:000013CC                 assume cs:_text
.text:000013CC                 ;org 13CCh
.text:000013CC ; COMDAT (pick any)
.text:000013CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013CC
.text:000013CC ; =============== S U B R O U T I N E =======================================
.text:000013CC
.text:000013CC ; Attributes: bp-based frame
.text:000013CC
.text:000013CC ; bool __stdcall IsPathSepar(wchar_t)
.text:000013CC                 public ?IsPathSepar@@YG_N_W@Z
.text:000013CC ?IsPathSepar@@YG_N_W@Z proc near        ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+20p
.text:000013CC                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+1C2p ...
.text:000013CC
.text:000013CC var_4           = dword ptr -4
.text:000013CC arg_0           = word ptr  8
.text:000013CC
.text:000013CC                 push    ebp
.text:000013CD                 mov     ebp, esp
.text:000013CF                 push    ecx
.text:000013D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013D7                 movzx   eax, [ebp+arg_0]
.text:000013DB                 cmp     eax, 5Ch ; '\'
.text:000013DE                 jz      short loc_13F2
.text:000013E0                 movzx   ecx, [ebp+arg_0]
.text:000013E4                 cmp     ecx, 2Fh ; '/'
.text:000013E7                 jz      short loc_13F2
.text:000013E9                 mov     [ebp+var_4], 0
.text:000013F0                 jmp     short loc_13F9
.text:000013F2 ; ---------------------------------------------------------------------------
.text:000013F2
.text:000013F2 loc_13F2:                               ; CODE XREF: IsPathSepar(wchar_t)+12j
.text:000013F2                                         ; IsPathSepar(wchar_t)+1Bj
.text:000013F2                 mov     [ebp+var_4], 1
.text:000013F9
.text:000013F9 loc_13F9:                               ; CODE XREF: IsPathSepar(wchar_t)+24j
.text:000013F9                 mov     al, byte ptr [ebp+var_4]
.text:000013FC                 mov     esp, ebp
.text:000013FE                 pop     ebp
.text:000013FF                 retn    4
.text:000013FF ?IsPathSepar@@YG_N_W@Z endp
.text:000013FF
.text:000013FF ; ---------------------------------------------------------------------------
.text:00001402                 align 4
.text:00001402 _text           ends
.text:00001402
.text:00001404 ; ===========================================================================
.text:00001404
.text:00001404 ; Segment type: Pure code
.text:00001404 ; Segment permissions: Read/Execute
.text:00001404 _text           segment para public 'CODE' use32
.text:00001404                 assume cs:_text
.text:00001404                 ;org 1404h
.text:00001404 ; COMDAT (pick any)
.text:00001404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001404
.text:00001404 ; =============== S U B R O U T I N E =======================================
.text:00001404
.text:00001404 ; Attributes: bp-based frame
.text:00001404
.text:00001404 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00001404                 public ?IsEmpty@UString@@QBE_NXZ
.text:00001404 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+6p
.text:00001404
.text:00001404 var_4           = dword ptr -4
.text:00001404
.text:00001404                 push    ebp
.text:00001405                 mov     ebp, esp
.text:00001407                 push    ecx
.text:00001408                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000140F                 mov     [ebp+var_4], ecx
.text:00001412                 mov     eax, [ebp+var_4]
.text:00001415                 xor     ecx, ecx
.text:00001417                 cmp     dword ptr [eax+4], 0
.text:0000141B                 setz    cl
.text:0000141E                 mov     al, cl
.text:00001420                 mov     esp, ebp
.text:00001422                 pop     ebp
.text:00001423                 retn
.text:00001423 ?IsEmpty@UString@@QBE_NXZ endp
.text:00001423
.text:00001423 _text           ends
.text:00001423
.text:00001424 ; ===========================================================================
.text:00001424
.text:00001424 ; Segment type: Pure code
.text:00001424 ; Segment permissions: Read/Execute
.text:00001424 _text           segment para public 'CODE' use32
.text:00001424                 assume cs:_text
.text:00001424                 ;org 1424h
.text:00001424 ; COMDAT (pick any)
.text:00001424                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00001424                 public ?Back@UString@@QBE_WXZ
.text:00001424 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+17p
.text:00001424
.text:00001424 var_4           = dword ptr -4
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    ecx
.text:00001428                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142F                 mov     [ebp+var_4], ecx
.text:00001432                 mov     eax, [ebp+var_4]
.text:00001435                 mov     ecx, [eax+4]
.text:00001438                 mov     edx, [ebp+var_4]
.text:0000143B                 mov     eax, [edx]
.text:0000143D                 mov     ax, [eax+ecx*2-2]
.text:00001442                 mov     esp, ebp
.text:00001444                 pop     ebp
.text:00001445                 retn
.text:00001445 ?Back@UString@@QBE_WXZ endp
.text:00001445
.text:00001445 ; ---------------------------------------------------------------------------
.text:00001446                 align 4
.text:00001446 _text           ends
.text:00001446
.text:00001448 ; ===========================================================================
.text:00001448
.text:00001448 ; Segment type: Pure code
.text:00001448 ; Segment permissions: Read/Execute
.text:00001448 _text           segment para public 'CODE' use32
.text:00001448                 assume cs:_text
.text:00001448                 ;org 1448h
.text:00001448 ; COMDAT (pick any)
.text:00001448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001448
.text:00001448 ; =============== S U B R O U T I N E =======================================
.text:00001448
.text:00001448 ; Attributes: bp-based frame
.text:00001448
.text:00001448 ; void __thiscall UString::Add_PathSepar(UString *__hidden this)
.text:00001448                 public ?Add_PathSepar@UString@@QAEXXZ
.text:00001448 ?Add_PathSepar@UString@@QAEXXZ proc near
.text:00001448                                         ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+2Fp
.text:00001448
.text:00001448 var_4           = dword ptr -4
.text:00001448
.text:00001448                 push    ebp
.text:00001449                 mov     ebp, esp
.text:0000144B                 push    ecx
.text:0000144C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001453                 mov     [ebp+var_4], ecx
.text:00001456                 push    5Ch ; '\'
.text:00001458                 mov     ecx, [ebp+var_4]
.text:0000145B                 call    ??YUString@@QAEAAV0@_W@Z ; UString::operator+=(wchar_t)
.text:00001460                 add     esp, 4
.text:00001463                 cmp     ebp, esp
.text:00001465                 call    __RTC_CheckEsp
.text:0000146A                 mov     esp, ebp
.text:0000146C                 pop     ebp
.text:0000146D                 retn
.text:0000146D ?Add_PathSepar@UString@@QAEXXZ endp
.text:0000146D
.text:0000146D ; ---------------------------------------------------------------------------
.text:0000146E                 align 10h
.text:0000146E _text           ends
.text:0000146E
.text:00001470 ; ===========================================================================
.text:00001470
.text:00001470 ; Segment type: Pure code
.text:00001470 ; Segment permissions: Read/Execute
.text:00001470 _text           segment para public 'CODE' use32
.text:00001470                 assume cs:_text
.text:00001470                 ;org 1470h
.text:00001470 ; COMDAT (pick any)
.text:00001470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001470
.text:00001470 ; =============== S U B R O U T I N E =======================================
.text:00001470
.text:00001470 ; Attributes: bp-based frame
.text:00001470
.text:00001470 ; public: class UString & __thiscall UString::operator+=(wchar_t)
.text:00001470                 public ??YUString@@QAEAAV0@_W@Z
.text:00001470 ??YUString@@QAEAAV0@_W@Z proc near      ; CODE XREF: UString::Add_PathSepar(void)+13p
.text:00001470
.text:00001470 var_C           = dword ptr -0Ch
.text:00001470 var_8           = dword ptr -8
.text:00001470 var_4           = dword ptr -4
.text:00001470 arg_0           = word ptr  8
.text:00001470
.text:00001470                 push    ebp
.text:00001471                 mov     ebp, esp
.text:00001473                 sub     esp, 0Ch
.text:00001476                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000147D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000148B                 mov     [ebp+var_4], ecx
.text:0000148E                 mov     eax, [ebp+var_4]
.text:00001491                 mov     ecx, [ebp+var_4]
.text:00001494                 mov     edx, [eax+8]
.text:00001497                 cmp     edx, [ecx+4]
.text:0000149A                 jnz     short loc_14A4
.text:0000149C                 mov     ecx, [ebp+var_4] ; this
.text:0000149F                 call    ?Grow_1@UString@@AAEXXZ ; UString::Grow_1(void)
.text:000014A4
.text:000014A4 loc_14A4:                               ; CODE XREF: UString::operator+=(wchar_t)+2Aj
.text:000014A4                 mov     eax, [ebp+var_4]
.text:000014A7                 mov     ecx, [eax+4]
.text:000014AA                 mov     [ebp+var_8], ecx
.text:000014AD                 mov     edx, [ebp+var_4]
.text:000014B0                 mov     eax, [edx]
.text:000014B2                 mov     [ebp+var_C], eax
.text:000014B5                 mov     ecx, [ebp+var_8]
.text:000014B8                 mov     edx, [ebp+var_C]
.text:000014BB                 mov     ax, [ebp+arg_0]
.text:000014BF                 mov     [edx+ecx*2], ax
.text:000014C3                 mov     ecx, [ebp+var_8]
.text:000014C6                 add     ecx, 1
.text:000014C9                 mov     [ebp+var_8], ecx
.text:000014CC                 xor     edx, edx
.text:000014CE                 mov     eax, [ebp+var_8]
.text:000014D1                 mov     ecx, [ebp+var_C]
.text:000014D4                 mov     [ecx+eax*2], dx
.text:000014D8                 mov     edx, [ebp+var_4]
.text:000014DB                 mov     eax, [ebp+var_8]
.text:000014DE                 mov     [edx+4], eax
.text:000014E1                 mov     eax, [ebp+var_4]
.text:000014E4                 add     esp, 0Ch
.text:000014E7                 cmp     ebp, esp
.text:000014E9                 call    __RTC_CheckEsp
.text:000014EE                 mov     esp, ebp
.text:000014F0                 pop     ebp
.text:000014F1                 retn    4
.text:000014F1 ??YUString@@QAEAAV0@_W@Z endp
.text:000014F1
.text:000014F1 _text           ends
.text:000014F1
.text:000014F4 ; ===========================================================================
.text:000014F4
.text:000014F4 ; Segment type: Pure code
.text:000014F4 ; Segment permissions: Read/Execute
.text:000014F4 _text           segment para public 'CODE' use32
.text:000014F4                 assume cs:_text
.text:000014F4                 ;org 14F4h
.text:000014F4 ; COMDAT (pick any)
.text:000014F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014F4
.text:000014F4 ; =============== S U B R O U T I N E =======================================
.text:000014F4
.text:000014F4 ; Attributes: bp-based frame
.text:000014F4
.text:000014F4 ; unsigned int __stdcall MyStringLen(const wchar_t *)
.text:000014F4                 public ?MyStringLen@@YGIPB_W@Z
.text:000014F4 ?MyStringLen@@YGIPB_W@Z proc near       ; CODE XREF: NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+Fp
.text:000014F4                                         ; NWindows::NFile::NName::IsDevicePath(wchar_t const *)+71p
.text:000014F4
.text:000014F4 var_4           = dword ptr -4
.text:000014F4 arg_0           = dword ptr  8
.text:000014F4
.text:000014F4                 push    ebp
.text:000014F5                 mov     ebp, esp
.text:000014F7                 push    ecx
.text:000014F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014FF                 mov     [ebp+var_4], 0
.text:00001506                 jmp     short loc_1511
.text:00001508 ; ---------------------------------------------------------------------------
.text:00001508
.text:00001508 loc_1508:                               ; CODE XREF: MyStringLen(wchar_t const *)+2Bj
.text:00001508                 mov     eax, [ebp+var_4]
.text:0000150B                 add     eax, 1
.text:0000150E                 mov     [ebp+var_4], eax
.text:00001511
.text:00001511 loc_1511:                               ; CODE XREF: MyStringLen(wchar_t const *)+12j
.text:00001511                 mov     ecx, [ebp+var_4]
.text:00001514                 mov     edx, [ebp+arg_0]
.text:00001517                 movzx   eax, word ptr [edx+ecx*2]
.text:0000151B                 test    eax, eax
.text:0000151D                 jz      short loc_1521
.text:0000151F                 jmp     short loc_1508
.text:00001521 ; ---------------------------------------------------------------------------
.text:00001521
.text:00001521 loc_1521:                               ; CODE XREF: MyStringLen(wchar_t const *)+29j
.text:00001521                 mov     eax, [ebp+var_4]
.text:00001524                 mov     esp, ebp
.text:00001526                 pop     ebp
.text:00001527                 retn    4
.text:00001527 ?MyStringLen@@YGIPB_W@Z endp
.text:00001527
.text:00001527 ; ---------------------------------------------------------------------------
.text:0000152A                 align 4
.text:0000152A _text           ends
.text:0000152A
.text$x:0000152C ; ===========================================================================
.text$x:0000152C
.text$x:0000152C ; Segment type: Pure code
.text$x:0000152C ; Segment permissions: Read/Execute
.text$x:0000152C _text$x         segment para public 'CODE' use32
.text$x:0000152C                 assume cs:_text$x
.text$x:0000152C                 ;org 152Ch
.text$x:0000152C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000152C
.text$x:0000152C ; =============== S U B R O U T I N E =======================================
.text$x:0000152C
.text$x:0000152C
.text$x:0000152C __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$0 proc near
.text$x:0000152C                                         ; DATA XREF: .xdata$x:000015A4o
.text$x:0000152C                 lea     ecx, [ebp-20h]  ; this
.text$x:0000152F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000152F __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$0 endp
.text$x:0000152F
.text$x:00001534
.text$x:00001534 ; =============== S U B R O U T I N E =======================================
.text$x:00001534
.text$x:00001534
.text$x:00001534 __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$1 proc near
.text$x:00001534                                         ; DATA XREF: .xdata$x:000015ACo
.text$x:00001534                 lea     ecx, [ebp-34h]  ; this
.text$x:00001537                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001537 __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$1 endp
.text$x:00001537
.text$x:0000153C
.text$x:0000153C ; =============== S U B R O U T I N E =======================================
.text$x:0000153C
.text$x:0000153C
.text$x:0000153C __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$2 proc near
.text$x:0000153C                                         ; DATA XREF: .xdata$x:000015B4o
.text$x:0000153C                 lea     ecx, [ebp-4Ch]  ; this
.text$x:0000153F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:0000153F __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$2 endp
.text$x:0000153F
.text$x:00001544
.text$x:00001544 ; =============== S U B R O U T I N E =======================================
.text$x:00001544
.text$x:00001544
.text$x:00001544 __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z proc near
.text$x:00001544                                         ; DATA XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+5o
.text$x:00001544
.text$x:00001544 arg_4           = dword ptr  8
.text$x:00001544
.text$x:00001544                 mov     edx, [esp+arg_4]
.text$x:00001548                 lea     eax, [edx+0Ch]
.text$x:0000154B                 mov     ecx, [edx-54h]
.text$x:0000154E                 xor     ecx, eax
.text$x:00001550                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001555                 mov     eax, offset __ehfuncinfo$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z
.text$x:0000155A                 jmp     ___CxxFrameHandler3
.text$x:0000155A __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z endp
.text$x:0000155A
.text$x:0000155F
.text$x:0000155F ; =============== S U B R O U T I N E =======================================
.text$x:0000155F
.text$x:0000155F
.text$x:0000155F __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$0 proc near
.text$x:0000155F                                         ; DATA XREF: .xdata$x:000015E0o
.text$x:0000155F                 lea     ecx, [ebp-344h] ; this
.text$x:00001565                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001565 __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$0 endp
.text$x:00001565
.text$x:0000156A
.text$x:0000156A ; =============== S U B R O U T I N E =======================================
.text$x:0000156A
.text$x:0000156A
.text$x:0000156A __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$1 proc near
.text$x:0000156A                                         ; DATA XREF: .xdata$x:000015E8o
.text$x:0000156A                 lea     ecx, [ebp-350h] ; this
.text$x:00001570                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001570 __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$1 endp
.text$x:00001570
.text$x:00001575
.text$x:00001575 ; =============== S U B R O U T I N E =======================================
.text$x:00001575
.text$x:00001575
.text$x:00001575 __ehhandler$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z proc near
.text$x:00001575                                         ; DATA XREF: NWindows::NFile::NName::GetCurDir(UString &)+5o
.text$x:00001575
.text$x:00001575 arg_4           = dword ptr  8
.text$x:00001575
.text$x:00001575                 mov     edx, [esp+arg_4]
.text$x:00001579                 lea     eax, [edx+0Ch]
.text$x:0000157C                 mov     ecx, [edx-35Ch]
.text$x:00001582                 xor     ecx, eax
.text$x:00001584                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001589                 mov     ecx, [edx-4]
.text$x:0000158C                 xor     ecx, eax
.text$x:0000158E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001593                 mov     eax, offset __ehfuncinfo$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z
.text$x:00001598                 jmp     ___CxxFrameHandler3
.text$x:00001598 __ehhandler$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z endp
.text$x:00001598
.text$x:00001598 ; ---------------------------------------------------------------------------
.text$x:0000159D                 align 10h
.text$x:0000159D _text$x         ends
.text$x:0000159D
.xdata$x:000015A0 ; ===========================================================================
.xdata$x:000015A0
.xdata$x:000015A0 ; Segment type: Pure data
.xdata$x:000015A0 ; Segment permissions: Read
.xdata$x:000015A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000015A0                 assume cs:_xdata$x
.xdata$x:000015A0                 ;org 15A0h
.xdata$x:000015A0 __unwindtable$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z db 0FFh
.xdata$x:000015A0                                         ; DATA XREF: .xdata$x:000015C0o
.xdata$x:000015A1                 db 0FFh
.xdata$x:000015A2                 db 0FFh
.xdata$x:000015A3                 db 0FFh
.xdata$x:000015A4                 dd offset __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$0
.xdata$x:000015A8                 db 0FFh
.xdata$x:000015A9                 db 0FFh
.xdata$x:000015AA                 db 0FFh
.xdata$x:000015AB                 db 0FFh
.xdata$x:000015AC                 dd offset __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$1
.xdata$x:000015B0                 db    1
.xdata$x:000015B1                 db    0
.xdata$x:000015B2                 db    0
.xdata$x:000015B3                 db    0
.xdata$x:000015B4                 dd offset __unwindfunclet$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z$2
.xdata$x:000015B8 __ehfuncinfo$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z db  22h ; "
.xdata$x:000015B8                                         ; DATA XREF: __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z+11o
.xdata$x:000015B9                 db    5
.xdata$x:000015BA                 db  93h ; ô
.xdata$x:000015BB                 db  19h
.xdata$x:000015BC                 db    3
.xdata$x:000015BD                 db    0
.xdata$x:000015BE                 db    0
.xdata$x:000015BF                 db    0
.xdata$x:000015C0                 dd offset __unwindtable$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z
.xdata$x:000015C4                 db    0
.xdata$x:000015C5                 db    0
.xdata$x:000015C6                 db    0
.xdata$x:000015C7                 db    0
.xdata$x:000015C8                 db    0
.xdata$x:000015C9                 db    0
.xdata$x:000015CA                 db    0
.xdata$x:000015CB                 db    0
.xdata$x:000015CC                 db    0
.xdata$x:000015CD                 db    0
.xdata$x:000015CE                 db    0
.xdata$x:000015CF                 db    0
.xdata$x:000015D0                 db    0
.xdata$x:000015D1                 db    0
.xdata$x:000015D2                 db    0
.xdata$x:000015D3                 db    0
.xdata$x:000015D4                 db    0
.xdata$x:000015D5                 db    0
.xdata$x:000015D6                 db    0
.xdata$x:000015D7                 db    0
.xdata$x:000015D8                 db    1
.xdata$x:000015D9                 db    0
.xdata$x:000015DA                 db    0
.xdata$x:000015DB                 db    0
.xdata$x:000015DC __unwindtable$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z db 0FFh
.xdata$x:000015DC                                         ; DATA XREF: .xdata$x:000015F4o
.xdata$x:000015DD                 db 0FFh
.xdata$x:000015DE                 db 0FFh
.xdata$x:000015DF                 db 0FFh
.xdata$x:000015E0                 dd offset __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$0
.xdata$x:000015E4                 align 8
.xdata$x:000015E8                 dd offset __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$1
.xdata$x:000015EC __ehfuncinfo$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z db  22h ; "
.xdata$x:000015EC                                         ; DATA XREF: __ehhandler$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z+1Eo
.xdata$x:000015ED                 db    5
.xdata$x:000015EE                 db  93h ; ô
.xdata$x:000015EF                 db  19h
.xdata$x:000015F0                 db    2
.xdata$x:000015F1                 db    0
.xdata$x:000015F2                 db    0
.xdata$x:000015F3                 db    0
.xdata$x:000015F4                 dd offset __unwindtable$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z
.xdata$x:000015F8                 db    0
.xdata$x:000015F9                 db    0
.xdata$x:000015FA                 db    0
.xdata$x:000015FB                 db    0
.xdata$x:000015FC                 db    0
.xdata$x:000015FD                 db    0
.xdata$x:000015FE                 db    0
.xdata$x:000015FF                 db    0
.xdata$x:00001600                 db    0
.xdata$x:00001601                 db    0
.xdata$x:00001602                 db    0
.xdata$x:00001603                 db    0
.xdata$x:00001604                 db    0
.xdata$x:00001605                 db    0
.xdata$x:00001606                 db    0
.xdata$x:00001607                 db    0
.xdata$x:00001608                 db    0
.xdata$x:00001609                 db    0
.xdata$x:0000160A                 db    0
.xdata$x:0000160B                 db    0
.xdata$x:0000160C                 db    1
.xdata$x:0000160D                 db    0
.xdata$x:0000160E                 db    0
.xdata$x:0000160F                 db    0
.xdata$x:0000160F _xdata$x        ends
.xdata$x:0000160F
.text:00001610 ; ===========================================================================
.text:00001610
.text:00001610 ; Segment type: Pure code
.text:00001610 ; Segment permissions: Read/Execute
.text:00001610 _text           segment para public 'CODE' use32
.text:00001610                 assume cs:_text
.text:00001610                 ;org 1610h
.text:00001610 ; COMDAT (pick any)
.text:00001610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001610
.text:00001610 ; =============== S U B R O U T I N E =======================================
.text:00001610
.text:00001610 ; Attributes: bp-based frame
.text:00001610
.text:00001610 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00001610                 public ??1UString@@QAE@XZ
.text:00001610 ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+ABp
.text:00001610                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+DEp ...
.text:00001610
.text:00001610 var_8           = dword ptr -8
.text:00001610 var_4           = dword ptr -4
.text:00001610
.text:00001610                 push    ebp
.text:00001611                 mov     ebp, esp
.text:00001613                 sub     esp, 8
.text:00001616                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000161D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001624                 mov     [ebp+var_4], ecx
.text:00001627                 mov     eax, [ebp+var_4]
.text:0000162A                 mov     ecx, [eax]
.text:0000162C                 mov     [ebp+var_8], ecx
.text:0000162F                 mov     edx, [ebp+var_8]
.text:00001632                 push    edx             ; void *
.text:00001633                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001638                 add     esp, 4
.text:0000163B                 add     esp, 8
.text:0000163E                 cmp     ebp, esp
.text:00001640                 call    __RTC_CheckEsp
.text:00001645                 mov     esp, ebp
.text:00001647                 pop     ebp
.text:00001648                 retn
.text:00001648 ??1UString@@QAE@XZ endp
.text:00001648
.text:00001648 ; ---------------------------------------------------------------------------
.text:00001649                 align 4
.text:00001649 _text           ends
.text:00001649
.text:0000164C ; ===========================================================================
.text:0000164C
.text:0000164C ; Segment type: Pure code
.text:0000164C ; Segment permissions: Read/Execute
.text:0000164C _text           segment para public 'CODE' use32
.text:0000164C                 assume cs:_text
.text:0000164C                 ;org 164Ch
.text:0000164C ; COMDAT (pick any)
.text:0000164C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000164C
.text:0000164C ; =============== S U B R O U T I N E =======================================
.text:0000164C
.text:0000164C ; Attributes: bp-based frame
.text:0000164C
.text:0000164C ; public: __thiscall UString::operator wchar_t const *(void)const
.text:0000164C                 public ??BUString@@QBEPB_WXZ
.text:0000164C ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+14Cp
.text:0000164C                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+161p ...
.text:0000164C
.text:0000164C var_4           = dword ptr -4
.text:0000164C
.text:0000164C                 push    ebp
.text:0000164D                 mov     ebp, esp
.text:0000164F                 push    ecx
.text:00001650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001657                 mov     [ebp+var_4], ecx
.text:0000165A                 mov     eax, [ebp+var_4]
.text:0000165D                 mov     eax, [eax]
.text:0000165F                 mov     esp, ebp
.text:00001661                 pop     ebp
.text:00001662                 retn
.text:00001662 ??BUString@@QBEPB_WXZ endp
.text:00001662
.text:00001662 ; ---------------------------------------------------------------------------
.text:00001663                 align 4
.text:00001663 _text           ends
.text:00001663
.text:00001664 ; ===========================================================================
.text:00001664
.text:00001664 ; Segment type: Pure code
.text:00001664 ; Segment permissions: Read/Execute
.text:00001664 _text           segment para public 'CODE' use32
.text:00001664                 assume cs:_text
.text:00001664                 ;org 1664h
.text:00001664 ; COMDAT (pick any)
.text:00001664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001664
.text:00001664 ; =============== S U B R O U T I N E =======================================
.text:00001664
.text:00001664 ; Attributes: bp-based frame
.text:00001664
.text:00001664 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00001664                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00001664 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+207p
.text:00001664                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+279p
.text:00001664
.text:00001664 var_4           = dword ptr -4
.text:00001664 arg_0           = dword ptr  8
.text:00001664
.text:00001664                 push    ebp
.text:00001665                 mov     ebp, esp
.text:00001667                 push    ecx
.text:00001668                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000166F                 mov     [ebp+var_4], ecx
.text:00001672                 mov     eax, [ebp+var_4]
.text:00001675                 mov     ecx, [eax]
.text:00001677                 mov     edx, [ebp+arg_0]
.text:0000167A                 lea     eax, [ecx+edx*2]
.text:0000167D                 mov     esp, ebp
.text:0000167F                 pop     ebp
.text:00001680                 retn    4
.text:00001680 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00001680
.text:00001680 ; ---------------------------------------------------------------------------
.text:00001683                 align 4
.text:00001683 _text           ends
.text:00001683
.text:00001684 ; ===========================================================================
.text:00001684
.text:00001684 ; Segment type: Pure code
.text:00001684 ; Segment permissions: Read/Execute
.text:00001684 _text           segment para public 'CODE' use32
.text:00001684                 assume cs:_text
.text:00001684                 ;org 1684h
.text:00001684 ; COMDAT (pick any)
.text:00001684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001684
.text:00001684 ; =============== S U B R O U T I N E =======================================
.text:00001684
.text:00001684 ; Attributes: bp-based frame
.text:00001684
.text:00001684 ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:00001684                 public ?DeleteFrom@UString@@QAEXI@Z
.text:00001684 ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+BFp
.text:00001684                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+2CEp
.text:00001684
.text:00001684 var_4           = dword ptr -4
.text:00001684 arg_0           = dword ptr  8
.text:00001684
.text:00001684                 push    ebp
.text:00001685                 mov     ebp, esp
.text:00001687                 push    ecx
.text:00001688                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000168F                 mov     [ebp+var_4], ecx
.text:00001692                 mov     eax, [ebp+var_4]
.text:00001695                 mov     ecx, [ebp+arg_0]
.text:00001698                 cmp     ecx, [eax+4]
.text:0000169B                 jnb     short loc_16B4
.text:0000169D                 mov     edx, [ebp+var_4]
.text:000016A0                 mov     eax, [ebp+arg_0]
.text:000016A3                 mov     [edx+4], eax
.text:000016A6                 mov     ecx, [ebp+var_4]
.text:000016A9                 mov     edx, [ecx]
.text:000016AB                 xor     eax, eax
.text:000016AD                 mov     ecx, [ebp+arg_0]
.text:000016B0                 mov     [edx+ecx*2], ax
.text:000016B4
.text:000016B4 loc_16B4:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:000016B4                 mov     esp, ebp
.text:000016B6                 pop     ebp
.text:000016B7                 retn    4
.text:000016B7 ?DeleteFrom@UString@@QAEXI@Z endp
.text:000016B7
.text:000016B7 ; ---------------------------------------------------------------------------
.text:000016BA                 align 4
.text:000016BA _text           ends
.text:000016BA
.text:000016BC ; ===========================================================================
.text:000016BC
.text:000016BC ; Segment type: Pure code
.text:000016BC ; Segment permissions: Read/Execute
.text:000016BC _text           segment para public 'CODE' use32
.text:000016BC                 assume cs:_text
.text:000016BC                 ;org 16BCh
.text:000016BC ; COMDAT (pick any)
.text:000016BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016BC
.text:000016BC ; =============== S U B R O U T I N E =======================================
.text:000016BC
.text:000016BC ; Attributes: bp-based frame
.text:000016BC
.text:000016BC ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000016BC                 public ??1AString@@QAE@XZ
.text:000016BC ??1AString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+E8p
.text:000016BC                                         ; __unwindfunclet$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z$0+6j
.text:000016BC
.text:000016BC var_8           = dword ptr -8
.text:000016BC var_4           = dword ptr -4
.text:000016BC
.text:000016BC                 push    ebp
.text:000016BD                 mov     ebp, esp
.text:000016BF                 sub     esp, 8
.text:000016C2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000016C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016D0                 mov     [ebp+var_4], ecx
.text:000016D3                 mov     eax, [ebp+var_4]
.text:000016D6                 mov     ecx, [eax]
.text:000016D8                 mov     [ebp+var_8], ecx
.text:000016DB                 mov     edx, [ebp+var_8]
.text:000016DE                 push    edx             ; void *
.text:000016DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000016E4                 add     esp, 4
.text:000016E7                 add     esp, 8
.text:000016EA                 cmp     ebp, esp
.text:000016EC                 call    __RTC_CheckEsp
.text:000016F1                 mov     esp, ebp
.text:000016F3                 pop     ebp
.text:000016F4                 retn
.text:000016F4 ??1AString@@QAE@XZ endp
.text:000016F4
.text:000016F4 ; ---------------------------------------------------------------------------
.text:000016F5                 align 4
.text:000016F5 _text           ends
.text:000016F5
.text:000016F8 ; ===========================================================================
.text:000016F8
.text:000016F8 ; Segment type: Pure code
.text:000016F8 ; Segment permissions: Read/Execute
.text:000016F8 _text           segment para public 'CODE' use32
.text:000016F8                 assume cs:_text
.text:000016F8                 ;org 16F8h
.text:000016F8 ; COMDAT (pick any)
.text:000016F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016F8
.text:000016F8 ; =============== S U B R O U T I N E =======================================
.text:000016F8
.text:000016F8 ; Attributes: bp-based frame
.text:000016F8
.text:000016F8 ; void __thiscall UString::Empty(UString *__hidden this)
.text:000016F8                 public ?Empty@UString@@QAEXXZ
.text:000016F8 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+42p
.text:000016F8
.text:000016F8 var_4           = dword ptr -4
.text:000016F8
.text:000016F8                 push    ebp
.text:000016F9                 mov     ebp, esp
.text:000016FB                 push    ecx
.text:000016FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001703                 mov     [ebp+var_4], ecx
.text:00001706                 mov     eax, [ebp+var_4]
.text:00001709                 mov     dword ptr [eax+4], 0
.text:00001710                 mov     ecx, [ebp+var_4]
.text:00001713                 mov     edx, [ecx]
.text:00001715                 xor     eax, eax
.text:00001717                 mov     [edx], ax
.text:0000171A                 mov     esp, ebp
.text:0000171C                 pop     ebp
.text:0000171D                 retn
.text:0000171D ?Empty@UString@@QAEXXZ endp
.text:0000171D
.text:0000171D _text           ends
.text:0000171D
UNDEF:00001720 ; ===========================================================================
UNDEF:00001720
UNDEF:00001720 ; Segment type: Externs
UNDEF:00001720 ; UNDEF
UNDEF:00001720                 extrn __RTC_Shutdown:near
UNDEF:00001720                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001724                 extrn __RTC_InitBase:near
UNDEF:00001724                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001728                 extrn __RTC_CheckEsp:near
UNDEF:00001728                                         ; CODE XREF: NWindows::NFile::NName::NormalizeDirPathPrefix(UString &)+36p
UNDEF:00001728                                         ; NWindows::NFile::NName::IsAltPathPrefix(wchar_t const *)+8Cp ...
UNDEF:0000172C ; void __thiscall UString::Grow_1(UString *__hidden this)
UNDEF:0000172C                 extrn ?Grow_1@UString@@AAEXXZ:near
UNDEF:0000172C                                         ; CODE XREF: UString::operator+=(wchar_t)+2Fp
UNDEF:00001730 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001730                 extrn _memcmp:near      ; CODE XREF: NWindows::NFile::NName::IsDevicePath(wchar_t const *)+A9p
UNDEF:00001734 ; public: class UString & __thiscall UString::operator=(class UString const &)
UNDEF:00001734                 extrn ??4UString@@QAEAAV0@ABV0@@Z:near
UNDEF:00001734                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+2DAp
UNDEF:00001734                                         ; NWindows::NFile::NName::GetCurDir(UString &)+C7p
UNDEF:00001738 ; public: class UString & __thiscall UString::operator+=(wchar_t const *)
UNDEF:00001738                 extrn ??YUString@@QAEAAV0@PB_W@Z:near
UNDEF:00001738                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+282p
UNDEF:00001738                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+28Ep
UNDEF:0000173C ; public: __thiscall UString::UString(void)
UNDEF:0000173C                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000173C                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+EEp
UNDEF:0000173C                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+242p
UNDEF:00001740 ; public: class UString & __thiscall UString::operator+=(class UString const &)
UNDEF:00001740                 extrn ??YUString@@QAEAAV0@ABV0@@Z:near
UNDEF:00001740                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+CBp
UNDEF:00001740                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+2E6p
UNDEF:00001744 ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:00001744                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00001744                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+81p
UNDEF:00001748 ; public: class UString & __thiscall UString::operator=(wchar_t const *)
UNDEF:00001748                 extrn ??4UString@@QAEAAV0@PB_W@Z:near
UNDEF:00001748                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+3Cp
UNDEF:00001748                                         ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+107p ...
UNDEF:0000174C                 extrn ___security_cookie:near
UNDEF:0000174C                                         ; DATA XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+24r
UNDEF:0000174C                                         ; NWindows::NFile::NName::GetCurDir(UString &)+2Br
UNDEF:00001750                 extrn ___CxxFrameHandler3:near
UNDEF:00001750                                         ; CODE XREF: __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z+16j
UNDEF:00001750                                         ; __ehhandler$?GetCurDir@NName@NFile@NWindows@@YG_NAAVUString@@@Z+23j
UNDEF:00001754 ; __fastcall __security_check_cookie(x)
UNDEF:00001754                 extrn @__security_check_cookie@4:near
UNDEF:00001754                                         ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+173p
UNDEF:00001754                                         ; __ehhandler$?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z+Cp ...
UNDEF:00001758 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001758                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001758                                         ; CODE XREF: NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)+317p
UNDEF:00001758                                         ; NWindows::NFile::NName::GetCurDir(UString &)+15Ap
UNDEF:0000175C ; void __cdecl operator delete(void *)
UNDEF:0000175C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:0000175C                                         ; AString::~AString(void)+23p
UNDEF:00001760 ; DWORD __stdcall GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
UNDEF:00001760                 extrn __imp__GetCurrentDirectoryW@8:near
UNDEF:00001760                                         ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+106p
UNDEF:00001760                                         ; DATA XREF: NWindows::NFile::NName::GetCurDir(UString &)+106r
UNDEF:00001764 ; struct UString __stdcall __high fas2fs(const struct AString *)
UNDEF:00001764                 extrn ?fas2fs@@YG?AVUString@@ABVAString@@@Z:near
UNDEF:00001764                                         ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+A2p
UNDEF:00001768 ; _DWORD __thiscall AString::AString(AString *__hidden this, const char *)
UNDEF:00001768                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:00001768                                         ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+88p
UNDEF:0000176C ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
UNDEF:0000176C                 extrn __imp__GetCurrentDirectoryA@8:near
UNDEF:0000176C                                         ; CODE XREF: NWindows::NFile::NName::GetCurDir(UString &)+6Bp
UNDEF:0000176C                                         ; DATA XREF: NWindows::NFile::NName::GetCurDir(UString &)+6Br
UNDEF:00001770 ; bool g_IsNT
UNDEF:00001770                 extrn ?g_IsNT@@3_NA:near
UNDEF:00001770                                         ; DATA XREF: NWindows::NFile::NName::GetCurDir(UString &)+47r
UNDEF:00001774 ; void __thiscall UString::Delete(UString *__hidden this, unsigned int, unsigned int)
UNDEF:00001774                 extrn ?Delete@UString@@QAEXII@Z:near
UNDEF:00001774                                         ; CODE XREF: NWindows::NFile::NName::ResolveDotsFolders(UString &)+181p
UNDEF:00001774                                         ; NWindows::NFile::NName::ResolveDotsFolders(UString &)+1D9p
UNDEF:00001774
UNDEF:00001774