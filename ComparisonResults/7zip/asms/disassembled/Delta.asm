.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 97EBACF27BE552CD3D90E58D8132E4DA
.text:00000000 ; Input CRC32 : D2266D76
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\Delta.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall Delta_Init(x)
.text:00000000                 public _Delta_Init@4
.text:00000000 _Delta_Init@4   proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], 0
.text:00000012                 jmp     short loc_1D
.text:00000014 ; ---------------------------------------------------------------------------
.text:00000014
.text:00000014 loc_14:                                 ; CODE XREF: Delta_Init(x)+2Fj
.text:00000014                 mov     eax, [ebp+var_4]
.text:00000017                 add     eax, 1
.text:0000001A                 mov     [ebp+var_4], eax
.text:0000001D
.text:0000001D loc_1D:                                 ; CODE XREF: Delta_Init(x)+12j
.text:0000001D                 cmp     [ebp+var_4], 100h
.text:00000024                 jnb     short loc_31
.text:00000026                 mov     ecx, [ebp+arg_0]
.text:00000029                 add     ecx, [ebp+var_4]
.text:0000002C                 mov     byte ptr [ecx], 0
.text:0000002F                 jmp     short loc_14
.text:00000031 ; ---------------------------------------------------------------------------
.text:00000031
.text:00000031 loc_31:                                 ; CODE XREF: Delta_Init(x)+24j
.text:00000031                 mov     esp, ebp
.text:00000033                 pop     ebp
.text:00000034                 retn    4
.text:00000034 _Delta_Init@4   endp
.text:00000034
.text:00000034 ; ---------------------------------------------------------------------------
.text:00000037                 align 10h
.text:00000040
.text:00000040 ; =============== S U B R O U T I N E =======================================
.text:00000040
.text:00000040 ; Attributes: bp-based frame
.text:00000040
.text:00000040 ; __stdcall Delta_Encode(x, x, x, x)
.text:00000040                 public _Delta_Encode@16
.text:00000040 _Delta_Encode@16 proc near
.text:00000040
.text:00000040 var_118         = byte ptr -118h
.text:00000040 var_115         = byte ptr -115h
.text:00000040 var_114         = dword ptr -114h
.text:00000040 var_110         = dword ptr -110h
.text:00000040 var_108         = byte ptr -108h
.text:00000040 var_4           = dword ptr -4
.text:00000040 arg_0           = dword ptr  8
.text:00000040 arg_4           = dword ptr  0Ch
.text:00000040 arg_8           = dword ptr  10h
.text:00000040 arg_C           = dword ptr  14h
.text:00000040
.text:00000040                 push    ebp
.text:00000041                 mov     ebp, esp
.text:00000043                 sub     esp, 118h
.text:00000049                 push    edi
.text:0000004A                 lea     edi, [ebp+var_118]
.text:00000050                 mov     ecx, 46h ; 'F'
.text:00000055                 mov     eax, 0CCCCCCCCh
.text:0000005A                 rep stosd
.text:0000005C                 mov     eax, dword ptr ds:___security_cookie
.text:00000061                 xor     eax, ebp
.text:00000063                 mov     [ebp+var_4], eax
.text:00000066                 mov     [ebp+var_110], 0
.text:00000070                 mov     eax, [ebp+arg_4]
.text:00000073                 push    eax
.text:00000074                 mov     ecx, [ebp+arg_0]
.text:00000077                 push    ecx
.text:00000078                 lea     edx, [ebp+var_108]
.text:0000007E                 push    edx
.text:0000007F                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000084                 mov     [ebp+var_114], 0
.text:0000008E
.text:0000008E loc_8E:                                 ; CODE XREF: Delta_Encode(x,x,x,x):loc_125j
.text:0000008E                 mov     eax, [ebp+var_114]
.text:00000094                 cmp     eax, [ebp+arg_C]
.text:00000097                 jnb     loc_12A
.text:0000009D                 mov     [ebp+var_110], 0
.text:000000A7                 jmp     short loc_C7
.text:000000A9 ; ---------------------------------------------------------------------------
.text:000000A9
.text:000000A9 loc_A9:                                 ; CODE XREF: Delta_Encode(x,x,x,x)+E3j
.text:000000A9                 mov     ecx, [ebp+var_114]
.text:000000AF                 add     ecx, 1
.text:000000B2                 mov     [ebp+var_114], ecx
.text:000000B8                 mov     edx, [ebp+var_110]
.text:000000BE                 add     edx, 1
.text:000000C1                 mov     [ebp+var_110], edx
.text:000000C7
.text:000000C7 loc_C7:                                 ; CODE XREF: Delta_Encode(x,x,x,x)+67j
.text:000000C7                 mov     eax, [ebp+var_110]
.text:000000CD                 cmp     eax, [ebp+arg_4]
.text:000000D0                 jnb     short loc_125
.text:000000D2                 mov     ecx, [ebp+var_114]
.text:000000D8                 cmp     ecx, [ebp+arg_C]
.text:000000DB                 jnb     short loc_125
.text:000000DD                 mov     edx, [ebp+arg_8]
.text:000000E0                 add     edx, [ebp+var_114]
.text:000000E6                 mov     al, [edx]
.text:000000E8                 mov     [ebp+var_115], al
.text:000000EE                 movzx   ecx, [ebp+var_115]
.text:000000F5                 mov     edx, [ebp+var_110]
.text:000000FB                 movzx   eax, [ebp+edx+var_108]
.text:00000103                 sub     ecx, eax
.text:00000105                 mov     edx, [ebp+arg_8]
.text:00000108                 add     edx, [ebp+var_114]
.text:0000010E                 mov     [edx], cl
.text:00000110                 mov     eax, [ebp+var_110]
.text:00000116                 mov     cl, [ebp+var_115]
.text:0000011C                 mov     [ebp+eax+var_108], cl
.text:00000123                 jmp     short loc_A9
.text:00000125 ; ---------------------------------------------------------------------------
.text:00000125
.text:00000125 loc_125:                                ; CODE XREF: Delta_Encode(x,x,x,x)+90j
.text:00000125                                         ; Delta_Encode(x,x,x,x)+9Bj
.text:00000125                 jmp     loc_8E
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: Delta_Encode(x,x,x,x)+57j
.text:0000012A                 mov     edx, [ebp+var_110]
.text:00000130                 cmp     edx, [ebp+arg_4]
.text:00000133                 jnz     short loc_13F
.text:00000135                 mov     [ebp+var_110], 0
.text:0000013F
.text:0000013F loc_13F:                                ; CODE XREF: Delta_Encode(x,x,x,x)+F3j
.text:0000013F                 mov     eax, [ebp+arg_4]
.text:00000142                 sub     eax, [ebp+var_110]
.text:00000148                 push    eax
.text:00000149                 mov     ecx, [ebp+var_110]
.text:0000014F                 lea     edx, [ebp+ecx+var_108]
.text:00000156                 push    edx
.text:00000157                 mov     eax, [ebp+arg_0]
.text:0000015A                 push    eax
.text:0000015B                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000160                 mov     ecx, [ebp+var_110]
.text:00000166                 push    ecx
.text:00000167                 lea     edx, [ebp+var_108]
.text:0000016D                 push    edx
.text:0000016E                 mov     eax, [ebp+arg_0]
.text:00000171                 add     eax, [ebp+arg_4]
.text:00000174                 sub     eax, [ebp+var_110]
.text:0000017A                 push    eax
.text:0000017B                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000180                 push    edx
.text:00000181                 mov     ecx, ebp
.text:00000183                 push    eax
.text:00000184                 lea     edx, $LN11
.text:0000018A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000018F                 pop     eax
.text:00000190                 pop     edx
.text:00000191                 pop     edi
.text:00000192                 mov     ecx, [ebp+var_4]
.text:00000195                 xor     ecx, ebp
.text:00000197                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000019C                 add     esp, 118h
.text:000001A2                 cmp     ebp, esp
.text:000001A4                 call    __RTC_CheckEsp
.text:000001A9                 mov     esp, ebp
.text:000001AB                 pop     ebp
.text:000001AC                 retn    10h
.text:000001AC _Delta_Encode@16 endp
.text:000001AC
.text:000001AC ; ---------------------------------------------------------------------------
.text:000001AF                 align 10h
.text:000001B0 $LN11           dd 1                    ; DATA XREF: Delta_Encode(x,x,x,x)+144o
.text:000001B4                 dd offset $LN10
.text:000001B8 $LN10           dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:000001B4o
.text:000001C0                 dd offset $LN9
.text:000001C4 $LN9            dd 667562h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000001C0o
.text:000001D0
.text:000001D0 ; =============== S U B R O U T I N E =======================================
.text:000001D0
.text:000001D0 ; Attributes: bp-based frame
.text:000001D0
.text:000001D0 ; __stdcall MyMemCpy(x, x, x)
.text:000001D0 _MyMemCpy@12    proc near               ; CODE XREF: Delta_Encode(x,x,x,x)+3Fp
.text:000001D0                                         ; Delta_Encode(x,x,x,x)+11Bp ...
.text:000001D0
.text:000001D0 var_4           = dword ptr -4
.text:000001D0 arg_0           = dword ptr  8
.text:000001D0 arg_4           = dword ptr  0Ch
.text:000001D0 arg_8           = dword ptr  10h
.text:000001D0
.text:000001D0                 push    ebp
.text:000001D1                 mov     ebp, esp
.text:000001D3                 push    ecx
.text:000001D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001DB                 mov     [ebp+var_4], 0
.text:000001E2                 jmp     short loc_1ED
.text:000001E4 ; ---------------------------------------------------------------------------
.text:000001E4
.text:000001E4 loc_1E4:                                ; CODE XREF: MyMemCpy(x,x,x)+35j
.text:000001E4                 mov     eax, [ebp+var_4]
.text:000001E7                 add     eax, 1
.text:000001EA                 mov     [ebp+var_4], eax
.text:000001ED
.text:000001ED loc_1ED:                                ; CODE XREF: MyMemCpy(x,x,x)+12j
.text:000001ED                 mov     ecx, [ebp+var_4]
.text:000001F0                 cmp     ecx, [ebp+arg_8]
.text:000001F3                 jnb     short loc_207
.text:000001F5                 mov     edx, [ebp+arg_0]
.text:000001F8                 add     edx, [ebp+var_4]
.text:000001FB                 mov     eax, [ebp+arg_4]
.text:000001FE                 add     eax, [ebp+var_4]
.text:00000201                 mov     cl, [eax]
.text:00000203                 mov     [edx], cl
.text:00000205                 jmp     short loc_1E4
.text:00000207 ; ---------------------------------------------------------------------------
.text:00000207
.text:00000207 loc_207:                                ; CODE XREF: MyMemCpy(x,x,x)+23j
.text:00000207                 mov     esp, ebp
.text:00000209                 pop     ebp
.text:0000020A                 retn    0Ch
.text:0000020A _MyMemCpy@12    endp
.text:0000020A
.text:0000020A ; ---------------------------------------------------------------------------
.text:0000020D                 align 10h
.text:00000210
.text:00000210 ; =============== S U B R O U T I N E =======================================
.text:00000210
.text:00000210 ; Attributes: bp-based frame
.text:00000210
.text:00000210 ; __stdcall Delta_Decode(x, x, x, x)
.text:00000210                 public _Delta_Decode@16
.text:00000210 _Delta_Decode@16 proc near
.text:00000210
.text:00000210 var_118         = dword ptr -118h
.text:00000210 var_114         = dword ptr -114h
.text:00000210 var_110         = dword ptr -110h
.text:00000210 var_108         = byte ptr -108h
.text:00000210 var_4           = dword ptr -4
.text:00000210 arg_0           = dword ptr  8
.text:00000210 arg_4           = dword ptr  0Ch
.text:00000210 arg_8           = dword ptr  10h
.text:00000210 arg_C           = dword ptr  14h
.text:00000210
.text:00000210                 push    ebp
.text:00000211                 mov     ebp, esp
.text:00000213                 sub     esp, 118h
.text:00000219                 push    edi
.text:0000021A                 lea     edi, [ebp+var_118]
.text:00000220                 mov     ecx, 46h ; 'F'
.text:00000225                 mov     eax, 0CCCCCCCCh
.text:0000022A                 rep stosd
.text:0000022C                 mov     eax, dword ptr ds:___security_cookie
.text:00000231                 xor     eax, ebp
.text:00000233                 mov     [ebp+var_4], eax
.text:00000236                 mov     [ebp+var_110], 0
.text:00000240                 mov     eax, [ebp+arg_4]
.text:00000243                 push    eax
.text:00000244                 mov     ecx, [ebp+arg_0]
.text:00000247                 push    ecx
.text:00000248                 lea     edx, [ebp+var_108]
.text:0000024E                 push    edx
.text:0000024F                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000254                 mov     [ebp+var_114], 0
.text:0000025E
.text:0000025E loc_25E:                                ; CODE XREF: Delta_Decode(x,x,x,x):loc_2F5j
.text:0000025E                 mov     eax, [ebp+var_114]
.text:00000264                 cmp     eax, [ebp+arg_C]
.text:00000267                 jnb     loc_2FA
.text:0000026D                 mov     [ebp+var_110], 0
.text:00000277                 jmp     short loc_297
.text:00000279 ; ---------------------------------------------------------------------------
.text:00000279
.text:00000279 loc_279:                                ; CODE XREF: Delta_Decode(x,x,x,x)+E3j
.text:00000279                 mov     ecx, [ebp+var_114]
.text:0000027F                 add     ecx, 1
.text:00000282                 mov     [ebp+var_114], ecx
.text:00000288                 mov     edx, [ebp+var_110]
.text:0000028E                 add     edx, 1
.text:00000291                 mov     [ebp+var_110], edx
.text:00000297
.text:00000297 loc_297:                                ; CODE XREF: Delta_Decode(x,x,x,x)+67j
.text:00000297                 mov     eax, [ebp+var_110]
.text:0000029D                 cmp     eax, [ebp+arg_4]
.text:000002A0                 jnb     short loc_2F5
.text:000002A2                 mov     ecx, [ebp+var_114]
.text:000002A8                 cmp     ecx, [ebp+arg_C]
.text:000002AB                 jnb     short loc_2F5
.text:000002AD                 mov     edx, [ebp+var_110]
.text:000002B3                 movzx   eax, [ebp+edx+var_108]
.text:000002BB                 mov     ecx, [ebp+arg_8]
.text:000002BE                 add     ecx, [ebp+var_114]
.text:000002C4                 movzx   edx, byte ptr [ecx]
.text:000002C7                 add     eax, edx
.text:000002C9                 mov     [ebp+var_118], eax
.text:000002CF                 mov     eax, [ebp+arg_8]
.text:000002D2                 add     eax, [ebp+var_114]
.text:000002D8                 mov     cl, byte ptr [ebp+var_118]
.text:000002DE                 mov     [eax], cl
.text:000002E0                 mov     edx, [ebp+var_110]
.text:000002E6                 mov     al, byte ptr [ebp+var_118]
.text:000002EC                 mov     [ebp+edx+var_108], al
.text:000002F3                 jmp     short loc_279
.text:000002F5 ; ---------------------------------------------------------------------------
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: Delta_Decode(x,x,x,x)+90j
.text:000002F5                                         ; Delta_Decode(x,x,x,x)+9Bj
.text:000002F5                 jmp     loc_25E
.text:000002FA ; ---------------------------------------------------------------------------
.text:000002FA
.text:000002FA loc_2FA:                                ; CODE XREF: Delta_Decode(x,x,x,x)+57j
.text:000002FA                 mov     ecx, [ebp+var_110]
.text:00000300                 cmp     ecx, [ebp+arg_4]
.text:00000303                 jnz     short loc_30F
.text:00000305                 mov     [ebp+var_110], 0
.text:0000030F
.text:0000030F loc_30F:                                ; CODE XREF: Delta_Decode(x,x,x,x)+F3j
.text:0000030F                 mov     edx, [ebp+arg_4]
.text:00000312                 sub     edx, [ebp+var_110]
.text:00000318                 push    edx
.text:00000319                 mov     eax, [ebp+var_110]
.text:0000031F                 lea     ecx, [ebp+eax+var_108]
.text:00000326                 push    ecx
.text:00000327                 mov     edx, [ebp+arg_0]
.text:0000032A                 push    edx
.text:0000032B                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000330                 mov     eax, [ebp+var_110]
.text:00000336                 push    eax
.text:00000337                 lea     ecx, [ebp+var_108]
.text:0000033D                 push    ecx
.text:0000033E                 mov     edx, [ebp+arg_0]
.text:00000341                 add     edx, [ebp+arg_4]
.text:00000344                 sub     edx, [ebp+var_110]
.text:0000034A                 push    edx
.text:0000034B                 call    _MyMemCpy@12    ; MyMemCpy(x,x,x)
.text:00000350                 push    edx
.text:00000351                 mov     ecx, ebp
.text:00000353                 push    eax
.text:00000354                 lea     edx, $LN11_0
.text:0000035A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000035F                 pop     eax
.text:00000360                 pop     edx
.text:00000361                 pop     edi
.text:00000362                 mov     ecx, [ebp+var_4]
.text:00000365                 xor     ecx, ebp
.text:00000367                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000036C                 add     esp, 118h
.text:00000372                 cmp     ebp, esp
.text:00000374                 call    __RTC_CheckEsp
.text:00000379                 mov     esp, ebp
.text:0000037B                 pop     ebp
.text:0000037C                 retn    10h
.text:0000037C _Delta_Decode@16 endp
.text:0000037C
.text:0000037C ; ---------------------------------------------------------------------------
.text:0000037F                 align 10h
.text:00000380 $LN11_0         dd 1                    ; DATA XREF: Delta_Decode(x,x,x,x)+144o
.text:00000384                 dd offset $LN10_0
.text:00000388 $LN10_0         dd 0FFFFFEF8h, 100h     ; DATA XREF: .text:00000384o
.text:00000390                 dd offset $LN9_0
.text:00000394 $LN9_0          dd 667562h              ; DATA XREF: .text:00000390o
.text:00000394 _text           ends
.text:00000394
.rtc$TMZ:00000398 ; ===========================================================================
.rtc$TMZ:00000398
.rtc$TMZ:00000398 ; Segment type: Pure data
.rtc$TMZ:00000398 ; Segment permissions: Read
.rtc$TMZ:00000398 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000398                 assume cs:_rtc$TMZ
.rtc$TMZ:00000398                 ;org 398h
.rtc$TMZ:00000398 ; COMDAT (pick any)
.rtc$TMZ:00000398 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000398 _rtc$TMZ        ends
.rtc$TMZ:00000398
.rtc$IMZ:0000039C ; ===========================================================================
.rtc$IMZ:0000039C
.rtc$IMZ:0000039C ; Segment type: Pure data
.rtc$IMZ:0000039C ; Segment permissions: Read
.rtc$IMZ:0000039C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000039C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000039C                 ;org 39Ch
.rtc$IMZ:0000039C ; COMDAT (pick any)
.rtc$IMZ:0000039C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000039C _rtc$IMZ        ends
.rtc$IMZ:0000039C
UNDEF:000003A0 ; ===========================================================================
UNDEF:000003A0
UNDEF:000003A0 ; Segment type: Externs
UNDEF:000003A0 ; UNDEF
UNDEF:000003A0                 extrn __RTC_Shutdown:near
UNDEF:000003A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000003A4                 extrn __RTC_InitBase:near
UNDEF:000003A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000003A8                 extrn ___security_cookie:near
UNDEF:000003A8                                         ; DATA XREF: Delta_Encode(x,x,x,x)+1Cr
UNDEF:000003A8                                         ; Delta_Decode(x,x,x,x)+1Cr
UNDEF:000003AC                 extrn __RTC_CheckEsp:near
UNDEF:000003AC                                         ; CODE XREF: Delta_Encode(x,x,x,x)+164p
UNDEF:000003AC                                         ; Delta_Decode(x,x,x,x)+164p
UNDEF:000003B0 ; __fastcall __security_check_cookie(x)
UNDEF:000003B0                 extrn @__security_check_cookie@4:near
UNDEF:000003B0                                         ; CODE XREF: Delta_Encode(x,x,x,x)+157p
UNDEF:000003B0                                         ; Delta_Decode(x,x,x,x)+157p
UNDEF:000003B4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000003B4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000003B4                                         ; CODE XREF: Delta_Encode(x,x,x,x)+14Ap
UNDEF:000003B4                                         ; Delta_Decode(x,x,x,x)+14Ap
UNDEF:000003B4
UNDEF:000003B4
UNDEF:000003B4                 end