.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A2AE48C3878BD72B33B8465A4B9FDC59
.text:00000000 ; Input CRC32 : 00256CCF
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\SetProperties.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; long __stdcall SetProperties(struct IUnknown *, class CObjectVector<struct CProperty> const &)
.text:00000000                 public ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.text:00000000 ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z proc near
.text:00000000
.text:00000000 var_F0          = dword ptr -0F0h
.text:00000000 var_E8          = dword ptr -0E8h
.text:00000000 var_E4          = dword ptr -0E4h
.text:00000000 var_E0          = dword ptr -0E0h
.text:00000000 var_DC          = dword ptr -0DCh
.text:00000000 var_D8          = dword ptr -0D8h
.text:00000000 var_D4          = dword ptr -0D4h
.text:00000000 var_D0          = dword ptr -0D0h
.text:00000000 var_CC          = dword ptr -0CCh
.text:00000000 var_C8          = dword ptr -0C8h
.text:00000000 var_C4          = word ptr -0C4h
.text:00000000 var_C2          = byte ptr -0C2h
.text:00000000 var_C1          = byte ptr -0C1h
.text:00000000 var_C0          = dword ptr -0C0h
.text:00000000 var_BC          = dword ptr -0BCh
.text:00000000 var_B8          = dword ptr -0B8h
.text:00000000 var_B4          = dword ptr -0B4h
.text:00000000 var_B0          = dword ptr -0B0h
.text:00000000 var_AC          = dword ptr -0ACh
.text:00000000 var_A8          = dword ptr -0A8h
.text:00000000 var_A4          = dword ptr -0A4h
.text:00000000 var_98          = dword ptr -98h
.text:00000000 var_94          = dword ptr -94h
.text:00000000 var_90          = dword ptr -90h
.text:00000000 var_8C          = dword ptr -8Ch
.text:00000000 var_88          = dword ptr -88h
.text:00000000 var_84          = dword ptr -84h
.text:00000000 var_7C          = byte ptr -7Ch
.text:00000000 var_6C          = word ptr -6Ch
.text:00000000 var_64          = byte ptr -64h
.text:00000000 var_50          = dword ptr -50h
.text:00000000 var_3C          = dword ptr -3Ch
.text:00000000 var_38          = dword ptr -38h
.text:00000000 var_34          = dword ptr -34h
.text:00000000 var_2C          = byte ptr -2Ch
.text:00000000 var_18          = byte ptr -18h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000 ; FUNCTION CHUNK AT .text:00000453 SIZE 000000A1 BYTES
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 sub     esp, 0E0h
.text:00000018                 push    ebx
.text:00000019                 push    esi
.text:0000001A                 push    edi
.text:0000001B                 lea     edi, [ebp+var_F0]
.text:00000021                 mov     ecx, 38h ; '8'
.text:00000026                 mov     eax, 0CCCCCCCCh
.text:0000002B                 rep stosd
.text:0000002D                 mov     eax, dword ptr ds:___security_cookie
.text:00000032                 xor     eax, ebp
.text:00000034                 push    eax
.text:00000035                 lea     eax, [ebp+var_C]
.text:00000038                 mov     large fs:0, eax
.text:0000003E
.text:0000003E loc_3E:                                 ; DATA XREF: .xdata$x:__catchsym$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$8o
.text:0000003E                 mov     [ebp+var_10], esp
.text:00000041                 mov     ecx, [ebp+arg_4]
.text:00000044                 call    ?IsEmpty@?$CObjectVector@UCProperty@@@@QBE_NXZ ; CObjectVector<CProperty>::IsEmpty(void)
.text:00000049                 movzx   eax, al
.text:0000004C                 test    eax, eax
.text:0000004E                 jz      short loc_57
.text:00000050                 xor     eax, eax
.text:00000052                 jmp     loc_4C2
.text:00000057 ; ---------------------------------------------------------------------------
.text:00000057
.text:00000057 loc_57:                                 ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+4Ej
.text:00000057                 lea     ecx, [ebp+var_18]
.text:0000005A                 call    ??0?$CMyComPtr@UISetProperties@@@@QAE@XZ ; CMyComPtr<ISetProperties>::CMyComPtr<ISetProperties>(void)
.text:0000005F                 mov     [ebp+var_4], 0
.text:00000066                 lea     ecx, [ebp+var_18]
.text:00000069                 call    ??I?$CMyComPtr@UISetProperties@@@@QAEPAPAUISetProperties@@XZ ; CMyComPtr<ISetProperties>::operator&(void)
.text:0000006E                 mov     esi, esp
.text:00000070                 push    eax
.text:00000071                 push    offset _IID_ISetProperties
.text:00000076                 mov     ecx, [ebp+arg_0]
.text:00000079                 push    ecx
.text:0000007A                 mov     edx, [ebp+arg_0]
.text:0000007D                 mov     eax, [edx]
.text:0000007F                 mov     ecx, [eax]
.text:00000081                 call    ecx
.text:00000083                 cmp     esi, esp
.text:00000085                 call    __RTC_CheckEsp
.text:0000008A                 lea     ecx, [ebp+var_18]
.text:0000008D                 call    ??7?$CMyComPtr@UISetProperties@@@@QBE_NXZ ; CMyComPtr<ISetProperties>::operator!(void)
.text:00000092                 movzx   edx, al
.text:00000095                 test    edx, edx
.text:00000097                 jz      short loc_BD
.text:00000099                 mov     [ebp+var_88], 0
.text:000000A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000AA                 lea     ecx, [ebp+var_18]
.text:000000AD                 call    ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ ; CMyComPtr<ISetProperties>::~CMyComPtr<ISetProperties>(void)
.text:000000B2                 mov     eax, [ebp+var_88]
.text:000000B8                 jmp     loc_4C2
.text:000000BD ; ---------------------------------------------------------------------------
.text:000000BD
.text:000000BD loc_BD:                                 ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+97j
.text:000000BD                 lea     ecx, [ebp+var_2C]
.text:000000C0                 call    ??0?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::CObjectVector<UString>(void)
.text:000000C5                 mov     byte ptr [ebp+var_4], 1
.text:000000C9                 mov     ecx, [ebp+arg_4]
.text:000000CC                 call    ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size(void)
.text:000000D1                 mov     [ebp+var_8C], eax
.text:000000D7                 xor     ecx, ecx
.text:000000D9                 mov     eax, [ebp+var_8C]
.text:000000DF                 mov     edx, 10h
.text:000000E4                 mul     edx
.text:000000E6                 seto    cl
.text:000000E9                 neg     ecx
.text:000000EB                 or      ecx, eax
.text:000000ED                 xor     eax, eax
.text:000000EF                 add     ecx, 4
.text:000000F2                 setb    al
.text:000000F5                 neg     eax
.text:000000F7                 or      eax, ecx
.text:000000F9                 push    eax             ; unsigned int
.text:000000FA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000000FF                 add     esp, 4
.text:00000102                 mov     [ebp+var_94], eax
.text:00000108                 mov     byte ptr [ebp+var_4], 2
.text:0000010C                 cmp     [ebp+var_94], 0
.text:00000113                 jz      short loc_156
.text:00000115                 mov     ecx, [ebp+var_94]
.text:0000011B                 mov     edx, [ebp+var_8C]
.text:00000121                 mov     [ecx], edx
.text:00000123                 push    offset ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000128                 push    offset ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000012D                 mov     eax, [ebp+var_8C]
.text:00000133                 push    eax
.text:00000134                 push    10h
.text:00000136                 mov     ecx, [ebp+var_94]
.text:0000013C                 add     ecx, 4
.text:0000013F                 push    ecx
.text:00000140                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:00000145                 mov     edx, [ebp+var_94]
.text:0000014B                 add     edx, 4
.text:0000014E                 mov     [ebp+var_B0], edx
.text:00000154                 jmp     short loc_160
.text:00000156 ; ---------------------------------------------------------------------------
.text:00000156
.text:00000156 loc_156:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+113j
.text:00000156                 mov     [ebp+var_B0], 0
.text:00000160
.text:00000160 loc_160:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+154j
.text:00000160                 mov     eax, [ebp+var_B0]
.text:00000166                 mov     [ebp+var_90], eax
.text:0000016C                 mov     byte ptr [ebp+var_4], 1
.text:00000170                 mov     ecx, [ebp+var_90]
.text:00000176                 mov     [ebp+var_34], ecx
.text:00000179                 mov     byte ptr [ebp+var_4], 3
.text:0000017D                 mov     [ebp+var_38], 0
.text:00000184                 jmp     short loc_18F
.text:00000186 ; ---------------------------------------------------------------------------
.text:00000186
.text:00000186 loc_186:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2BEj
.text:00000186                 mov     edx, [ebp+var_38]
.text:00000189                 add     edx, 1
.text:0000018C                 mov     [ebp+var_38], edx
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+184j
.text:0000018F                 mov     ecx, [ebp+arg_4]
.text:00000192                 call    ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size(void)
.text:00000197                 mov     [ebp+var_B4], eax
.text:0000019D                 mov     eax, [ebp+var_38]
.text:000001A0                 cmp     eax, [ebp+var_B4]
.text:000001A6                 jnb     loc_2C3
.text:000001AC                 mov     ecx, [ebp+var_38]
.text:000001AF                 push    ecx
.text:000001B0                 mov     ecx, [ebp+arg_4]
.text:000001B3                 call    ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[](uint)
.text:000001B8                 mov     [ebp+var_B8], eax
.text:000001BE                 mov     edx, [ebp+var_B8]
.text:000001C4                 mov     [ebp+var_3C], edx
.text:000001C7                 lea     ecx, [ebp+var_50] ; this
.text:000001CA                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000001CF                 mov     [ebp+var_BC], eax
.text:000001D5                 mov     byte ptr [ebp+var_4], 4
.text:000001D9                 mov     eax, [ebp+var_3C]
.text:000001DC                 push    eax
.text:000001DD                 lea     ecx, [ebp+var_64]
.text:000001E0                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000001E5                 mov     [ebp+var_C0], eax
.text:000001EB                 mov     byte ptr [ebp+var_4], 5
.text:000001EF                 mov     ecx, [ebp+var_3C]
.text:000001F2                 add     ecx, 0Ch        ; this
.text:000001F5                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000001FA                 mov     [ebp+var_C1], al
.text:00000200                 movzx   ecx, [ebp+var_C1]
.text:00000207                 test    ecx, ecx
.text:00000209                 jz      short loc_278
.text:0000020B                 lea     ecx, [ebp+var_64] ; this
.text:0000020E                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000213                 mov     [ebp+var_C2], al
.text:00000219                 movzx   edx, [ebp+var_C2]
.text:00000220                 test    edx, edx
.text:00000222                 jnz     short loc_276
.text:00000224                 lea     ecx, [ebp+var_64] ; this
.text:00000227                 call    ?Back@UString@@QBE_WXZ ; UString::Back(void)
.text:0000022C                 mov     [ebp+var_C4], ax
.text:00000233                 mov     ax, [ebp+var_C4]
.text:0000023A                 mov     [ebp+var_6C], ax
.text:0000023E                 movzx   ecx, [ebp+var_6C]
.text:00000242                 cmp     ecx, 2Dh ; '-'
.text:00000245                 jnz     short loc_253
.text:00000247                 push    0
.text:00000249                 lea     ecx, [ebp+var_50]
.text:0000024C                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000251                 jmp     short loc_266
.text:00000253 ; ---------------------------------------------------------------------------
.text:00000253
.text:00000253 loc_253:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+245j
.text:00000253                 movzx   edx, [ebp+var_6C]
.text:00000257                 cmp     edx, 2Bh ; '+'
.text:0000025A                 jnz     short loc_266
.text:0000025C                 push    1
.text:0000025E                 lea     ecx, [ebp+var_50]
.text:00000261                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000266
.text:00000266 loc_266:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+251j
.text:00000266                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+25Aj
.text:00000266                 movzx   eax, word ptr [ebp+var_50]
.text:0000026A                 test    eax, eax
.text:0000026C                 jz      short loc_276
.text:0000026E                 lea     ecx, [ebp+var_64] ; this
.text:00000271                 call    ?DeleteBack@UString@@QAEXXZ ; UString::DeleteBack(void)
.text:00000276
.text:00000276 loc_276:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+222j
.text:00000276                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+26Cj
.text:00000276                 jmp     short loc_288
.text:00000278 ; ---------------------------------------------------------------------------
.text:00000278
.text:00000278 loc_278:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+209j
.text:00000278                 lea     ecx, [ebp+var_50]
.text:0000027B                 push    ecx             ; int
.text:0000027C                 mov     edx, [ebp+var_3C]
.text:0000027F                 add     edx, 0Ch
.text:00000282                 push    edx             ; UString *
.text:00000283                 call    ?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z ; ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)
.text:00000288
.text:00000288 loc_288:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &):loc_276j
.text:00000288                 lea     eax, [ebp+var_64]
.text:0000028B                 push    eax
.text:0000028C                 lea     ecx, [ebp+var_2C]
.text:0000028F                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:00000294                 lea     ecx, [ebp+var_50]
.text:00000297                 push    ecx
.text:00000298                 mov     ecx, [ebp+var_38]
.text:0000029B                 shl     ecx, 4
.text:0000029E                 add     ecx, [ebp+var_34]
.text:000002A1                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z ; NWindows::NCOM::CPropVariant::operator=(NWindows::NCOM::CPropVariant const &)
.text:000002A6                 mov     byte ptr [ebp+var_4], 4
.text:000002AA                 lea     ecx, [ebp+var_64] ; this
.text:000002AD                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002B2                 mov     byte ptr [ebp+var_4], 3
.text:000002B6                 lea     ecx, [ebp+var_50] ; this
.text:000002B9                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000002BE                 jmp     loc_186
.text:000002C3 ; ---------------------------------------------------------------------------
.text:000002C3
.text:000002C3 loc_2C3:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+1A6j
.text:000002C3                 lea     ecx, [ebp+var_7C]
.text:000002C6                 call    ??0?$CRecordVector@PB_W@@QAE@XZ ; CRecordVector<wchar_t const *>::CRecordVector<wchar_t const *>(void)
.text:000002CB                 mov     [ebp+var_C8], eax
.text:000002D1                 mov     byte ptr [ebp+var_4], 6
.text:000002D5                 mov     [ebp+var_38], 0
.text:000002DC                 jmp     short loc_2E7
.text:000002DE ; ---------------------------------------------------------------------------
.text:000002DE
.text:000002DE loc_2DE:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+332j
.text:000002DE                 mov     edx, [ebp+var_38]
.text:000002E1                 add     edx, 1
.text:000002E4                 mov     [ebp+var_38], edx
.text:000002E7
.text:000002E7 loc_2E7:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2DCj
.text:000002E7                 lea     ecx, [ebp+var_2C]
.text:000002EA                 call    ?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size(void)
.text:000002EF                 mov     [ebp+var_CC], eax
.text:000002F5                 mov     eax, [ebp+var_38]
.text:000002F8                 cmp     eax, [ebp+var_CC]
.text:000002FE                 jnb     short loc_334
.text:00000300                 mov     ecx, [ebp+var_38]
.text:00000303                 push    ecx
.text:00000304                 lea     ecx, [ebp+var_2C]
.text:00000307                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:0000030C                 mov     [ebp+var_D0], eax
.text:00000312                 mov     ecx, [ebp+var_D0]
.text:00000318                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000031D                 mov     [ebp+var_D4], eax
.text:00000323                 mov     edx, [ebp+var_D4]
.text:00000329                 push    edx
.text:0000032A                 lea     ecx, [ebp+var_7C]
.text:0000032D                 call    ?Add@?$CRecordVector@PB_W@@QAEIQB_W@Z ; CRecordVector<wchar_t const *>::Add(wchar_t const * const)
.text:00000332                 jmp     short loc_2DE
.text:00000334 ; ---------------------------------------------------------------------------
.text:00000334
.text:00000334 loc_334:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2FEj
.text:00000334                 lea     ecx, [ebp+var_18]
.text:00000337                 call    ??C?$CMyComPtr@UISetProperties@@@@QBEPAUISetProperties@@XZ ; CMyComPtr<ISetProperties>::operator->(void)
.text:0000033C                 mov     [ebp+var_D8], eax
.text:00000342                 mov     eax, [ebp+var_D8]
.text:00000348                 mov     [ebp+var_DC], eax
.text:0000034E                 lea     ecx, [ebp+var_7C]
.text:00000351                 call    ?Size@?$CRecordVector@PB_W@@QBEIXZ ; CRecordVector<wchar_t const *>::Size(void)
.text:00000356                 mov     [ebp+var_E0], eax
.text:0000035C                 lea     ecx, [ebp+var_7C]
.text:0000035F                 call    ?Front@?$CRecordVector@PB_W@@QAEAAPB_WXZ ; CRecordVector<wchar_t const *>::Front(void)
.text:00000364                 mov     [ebp+var_E4], eax
.text:0000036A                 mov     esi, esp
.text:0000036C                 mov     ecx, [ebp+var_E0]
.text:00000372                 push    ecx
.text:00000373                 mov     edx, [ebp+var_34]
.text:00000376                 push    edx
.text:00000377                 mov     eax, [ebp+var_E4]
.text:0000037D                 push    eax
.text:0000037E                 mov     ecx, [ebp+var_DC]
.text:00000384                 push    ecx
.text:00000385                 mov     edx, [ebp+var_DC]
.text:0000038B                 mov     eax, [edx]
.text:0000038D                 mov     ecx, [eax+0Ch]
.text:00000390                 call    ecx
.text:00000392                 cmp     esi, esp
.text:00000394                 call    __RTC_CheckEsp
.text:00000399                 mov     [ebp+var_E8], eax
.text:0000039F                 mov     edx, [ebp+var_E8]
.text:000003A5                 mov     [ebp+var_84], edx
.text:000003AB                 cmp     [ebp+var_84], 0
.text:000003B2                 jz      short loc_3F2
.text:000003B4                 mov     eax, [ebp+var_84]
.text:000003BA                 mov     [ebp+var_98], eax
.text:000003C0                 mov     byte ptr [ebp+var_4], 3
.text:000003C4                 lea     ecx, [ebp+var_7C]
.text:000003C7                 call    ??1?$CRecordVector@PB_W@@QAE@XZ ; CRecordVector<wchar_t const *>::~CRecordVector<wchar_t const *>(void)
.text:000003CC                 mov     byte ptr [ebp+var_4], 0
.text:000003D0                 lea     ecx, [ebp+var_2C]
.text:000003D3                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000003D8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003DF                 lea     ecx, [ebp+var_18]
.text:000003E2                 call    ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ ; CMyComPtr<ISetProperties>::~CMyComPtr<ISetProperties>(void)
.text:000003E7                 mov     eax, [ebp+var_98]
.text:000003ED                 jmp     loc_4C2
.text:000003F2 ; ---------------------------------------------------------------------------
.text:000003F2
.text:000003F2 loc_3F2:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3B2j
.text:000003F2                 mov     byte ptr [ebp+var_4], 3
.text:000003F6                 lea     ecx, [ebp+var_7C]
.text:000003F9                 call    ??1?$CRecordVector@PB_W@@QAE@XZ ; CRecordVector<wchar_t const *>::~CRecordVector<wchar_t const *>(void)
.text:000003FE                 jmp     short loc_453
.text:000003FE ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z endp
.text:000003FE
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: noreturn
.text:00000400
.text:00000400 __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0 proc near
.text:00000400                                         ; DATA XREF: .xdata$x:00000690o
.text:00000400                 mov     ecx, [ebp-34h]
.text:00000403                 mov     [ebp-0A0h], ecx
.text:00000409                 mov     edx, [ebp-0A0h]
.text:0000040F                 mov     [ebp-9Ch], edx
.text:00000415                 cmp     dword ptr [ebp-9Ch], 0
.text:0000041C                 jz      short loc_433
.text:0000041E                 push    3
.text:00000420                 mov     ecx, [ebp-9Ch]
.text:00000426                 call    ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z ; NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)
.text:0000042B                 mov     [ebp-0ECh], eax
.text:00000431                 jmp     short loc_43D
.text:00000433 ; ---------------------------------------------------------------------------
.text:00000433
.text:00000433 loc_433:                                ; CODE XREF: __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0+1Cj
.text:00000433                 mov     dword ptr [ebp-0ECh], 0
.text:0000043D
.text:0000043D loc_43D:                                ; CODE XREF: __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0+31j
.text:0000043D                 push    0
.text:0000043F                 push    0
.text:00000441                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000441 __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0 endp
.text:00000441
.text:00000446 ; ---------------------------------------------------------------------------
.text:00000446                 mov     dword ptr [ebp-4], 1
.text:0000044D                 mov     eax, offset __tryend$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$1
.text:00000452                 retn
.text:00000453 ; ---------------------------------------------------------------------------
.text:00000453 ; START OF FUNCTION CHUNK FOR ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.text:00000453
.text:00000453 loc_453:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3FEj
.text:00000453                 mov     [ebp+var_4], 1
.text:0000045A
.text:0000045A __tryend$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$1:
.text:0000045A                                         ; DATA XREF: .text:0000044Do
.text:0000045A                 mov     eax, [ebp+var_34]
.text:0000045D                 mov     [ebp+var_A8], eax
.text:00000463                 mov     ecx, [ebp+var_A8]
.text:00000469                 mov     [ebp+var_A4], ecx
.text:0000046F                 cmp     [ebp+var_A4], 0
.text:00000476                 jz      short loc_48D
.text:00000478                 push    3
.text:0000047A                 mov     ecx, [ebp+var_A4]
.text:00000480                 call    ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z ; NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)
.text:00000485                 mov     [ebp+var_F0], eax
.text:0000048B                 jmp     short loc_497
.text:0000048D ; ---------------------------------------------------------------------------
.text:0000048D
.text:0000048D loc_48D:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+476j
.text:0000048D                 mov     [ebp+var_F0], 0
.text:00000497
.text:00000497 loc_497:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+48Bj
.text:00000497                 mov     [ebp+var_AC], 0
.text:000004A1                 mov     byte ptr [ebp+var_4], 0
.text:000004A5                 lea     ecx, [ebp+var_2C]
.text:000004A8                 call    ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text:000004AD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004B4                 lea     ecx, [ebp+var_18]
.text:000004B7                 call    ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ ; CMyComPtr<ISetProperties>::~CMyComPtr<ISetProperties>(void)
.text:000004BC                 mov     eax, [ebp+var_AC]
.text:000004C2
.text:000004C2 loc_4C2:                                ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+52j
.text:000004C2                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+B8j ...
.text:000004C2                 push    edx
.text:000004C3                 mov     ecx, ebp
.text:000004C5                 push    eax
.text:000004C6                 lea     edx, $LN46
.text:000004CC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004D1                 pop     eax
.text:000004D2                 pop     edx
.text:000004D3                 mov     ecx, [ebp+var_C]
.text:000004D6                 mov     large fs:0, ecx
.text:000004DD                 pop     ecx
.text:000004DE                 pop     edi
.text:000004DF                 pop     esi
.text:000004E0                 pop     ebx
.text:000004E1                 add     esp, 0F0h
.text:000004E7                 cmp     ebp, esp
.text:000004E9                 call    __RTC_CheckEsp
.text:000004EE                 mov     esp, ebp
.text:000004F0                 pop     ebp
.text:000004F1                 retn    8
.text:000004F1 ; END OF FUNCTION CHUNK FOR ?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.text:000004F1 ; ---------------------------------------------------------------------------
.text:000004F4 $LN46           dd 5                    ; DATA XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+4C6o
.text:000004F8                 dd offset $LN45
.text:000004FC $LN45           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:000004F8o
.text:00000504                 dd offset $LN39         ; "setProperties"
.text:00000508                 dd 0FFFFFFD4h, 0Ch
.text:00000510                 dd offset $LN40         ; "realNames"
.text:00000514                 dd 0FFFFFFB0h, 10h
.text:0000051C                 dd offset $LN41         ; "propVariant"
.text:00000520                 dd 0FFFFFF9Ch, 0Ch
.text:00000528                 dd offset $LN42         ; "name"
.text:0000052C                 dd 0FFFFFF84h, 0Ch
.text:00000534                 dd offset $LN43         ; "names"
.text:00000538 $LN43           db 'names',0            ; DATA XREF: .text:00000534o
.text:0000053E $LN42           db 'name',0             ; DATA XREF: .text:00000528o
.text:00000543 $LN41           db 'propVariant',0      ; DATA XREF: .text:0000051Co
.text:0000054F $LN40           db 'realNames',0        ; DATA XREF: .text:00000510o
.text:00000559 $LN39           db 'setProperties',0    ; DATA XREF: .text:00000504o
.text:00000567                 align 10h
.text:00000570
.text:00000570 ; =============== S U B R O U T I N E =======================================
.text:00000570
.text:00000570 ; Attributes: bp-based frame
.text:00000570
.text:00000570 ; int __stdcall ParseNumberString(UString *, int)
.text:00000570 ?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z proc near
.text:00000570                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+283p
.text:00000570
.text:00000570 var_14          = dword ptr -14h
.text:00000570 var_10          = dword ptr -10h
.text:00000570 var_C           = dword ptr -0Ch
.text:00000570 var_8           = dword ptr -8
.text:00000570 var_4           = dword ptr -4
.text:00000570 arg_0           = dword ptr  8
.text:00000570 arg_4           = dword ptr  0Ch
.text:00000570
.text:00000570                 push    ebp
.text:00000571                 mov     ebp, esp
.text:00000573                 sub     esp, 14h
.text:00000576                 mov     eax, 0CCCCCCCCh
.text:0000057B                 mov     [ebp+var_14], eax
.text:0000057E                 mov     [ebp+var_10], eax
.text:00000581                 mov     [ebp+var_C], eax
.text:00000584                 mov     [ebp+var_8], eax
.text:00000587                 mov     [ebp+var_4], eax
.text:0000058A                 lea     eax, [ebp+var_8]
.text:0000058D                 push    eax             ; wchar_t **
.text:0000058E                 mov     ecx, [ebp+arg_0]
.text:00000591                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000596                 push    eax             ; wchar_t *
.text:00000597                 call    ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64(wchar_t const *,wchar_t const * *)
.text:0000059C                 mov     [ebp+var_14], eax
.text:0000059F                 mov     [ebp+var_10], edx
.text:000005A2                 mov     ecx, [ebp+var_8]
.text:000005A5                 movzx   edx, word ptr [ecx]
.text:000005A8                 test    edx, edx
.text:000005AA                 jnz     short loc_5BB
.text:000005AC                 mov     ecx, [ebp+arg_0] ; this
.text:000005AF                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000005B4                 movzx   eax, al
.text:000005B7                 test    eax, eax
.text:000005B9                 jz      short loc_5C9
.text:000005BB
.text:000005BB loc_5BB:                                ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+3Aj
.text:000005BB                 mov     ecx, [ebp+arg_0]
.text:000005BE                 push    ecx
.text:000005BF                 mov     ecx, [ebp+arg_4]
.text:000005C2                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000005C7                 jmp     short loc_5F5
.text:000005C9 ; ---------------------------------------------------------------------------
.text:000005C9
.text:000005C9 loc_5C9:                                ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+49j
.text:000005C9                 cmp     [ebp+var_10], 0
.text:000005CD                 ja      short loc_5E5
.text:000005CF                 jb      short loc_5D7
.text:000005D1                 cmp     [ebp+var_14], 0FFFFFFFFh
.text:000005D5                 ja      short loc_5E5
.text:000005D7
.text:000005D7 loc_5D7:                                ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+5Fj
.text:000005D7                 mov     edx, [ebp+var_14]
.text:000005DA                 push    edx
.text:000005DB                 mov     ecx, [ebp+arg_4]
.text:000005DE                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000005E3                 jmp     short loc_5F5
.text:000005E5 ; ---------------------------------------------------------------------------
.text:000005E5
.text:000005E5 loc_5E5:                                ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+5Dj
.text:000005E5                                         ; ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+65j
.text:000005E5                 mov     eax, [ebp+var_10]
.text:000005E8                 push    eax
.text:000005E9                 mov     ecx, [ebp+var_14]
.text:000005EC                 push    ecx
.text:000005ED                 mov     ecx, [ebp+arg_4]
.text:000005F0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000005F5
.text:000005F5 loc_5F5:                                ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+57j
.text:000005F5                                         ; ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+73j
.text:000005F5                 push    edx
.text:000005F6                 mov     ecx, ebp
.text:000005F8                 push    eax
.text:000005F9                 lea     edx, $LN11
.text:000005FF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000604                 pop     eax
.text:00000605                 pop     edx
.text:00000606                 add     esp, 14h
.text:00000609                 cmp     ebp, esp
.text:0000060B                 call    __RTC_CheckEsp
.text:00000610                 mov     esp, ebp
.text:00000612                 pop     ebp
.text:00000613                 retn    8
.text:00000613 ?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z endp
.text:00000613
.text:00000613 ; ---------------------------------------------------------------------------
.text:00000616                 align 4
.text:00000618 $LN11           dd 1                    ; DATA XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+89o
.text:0000061C                 dd offset $LN10
.text:00000620 $LN10           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:0000061Co
.text:00000628                 dd offset $LN9
.text:0000062C $LN9            dd 646E65h              ; DATA XREF: .text:00000628o
.text:0000062C _text           ends
.text:0000062C
.text$x:00000630 ; ===========================================================================
.text$x:00000630
.text$x:00000630 ; Segment type: Pure code
.text$x:00000630 ; Segment permissions: Read/Execute
.text$x:00000630 _text$x         segment para public 'CODE' use32
.text$x:00000630                 assume cs:_text$x
.text$x:00000630                 ;org 630h
.text$x:00000630                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000630
.text$x:00000630 ; =============== S U B R O U T I N E =======================================
.text$x:00000630
.text$x:00000630
.text$x:00000630 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$2 proc near
.text$x:00000630                                         ; DATA XREF: .xdata$x:000006D0o
.text$x:00000630                 lea     ecx, [ebp-18h]
.text$x:00000633                 jmp     ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ ; CMyComPtr<ISetProperties>::~CMyComPtr<ISetProperties>(void)
.text$x:00000633 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$2 endp
.text$x:00000633
.text$x:00000638
.text$x:00000638 ; =============== S U B R O U T I N E =======================================
.text$x:00000638
.text$x:00000638
.text$x:00000638 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$3 proc near
.text$x:00000638                                         ; DATA XREF: .xdata$x:000006D8o
.text$x:00000638                 lea     ecx, [ebp-2Ch]
.text$x:0000063B                 jmp     ??1?$CObjectVector@VUString@@@@QAE@XZ ; CObjectVector<UString>::~CObjectVector<UString>(void)
.text$x:0000063B __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$3 endp
.text$x:0000063B
.text$x:00000640
.text$x:00000640 ; =============== S U B R O U T I N E =======================================
.text$x:00000640
.text$x:00000640
.text$x:00000640 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$4 proc near
.text$x:00000640                                         ; DATA XREF: .xdata$x:000006E0o
.text$x:00000640                 mov     eax, [ebp-94h]
.text$x:00000646                 push    eax             ; void *
.text$x:00000647                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000064C                 pop     ecx
.text$x:0000064D                 retn
.text$x:0000064D __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$4 endp
.text$x:0000064D
.text$x:0000064E
.text$x:0000064E ; =============== S U B R O U T I N E =======================================
.text$x:0000064E
.text$x:0000064E
.text$x:0000064E __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$5 proc near
.text$x:0000064E                                         ; DATA XREF: .xdata$x:000006F0o
.text$x:0000064E                 lea     ecx, [ebp-50h]  ; this
.text$x:00000651                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00000651 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$5 endp
.text$x:00000651
.text$x:00000656
.text$x:00000656 ; =============== S U B R O U T I N E =======================================
.text$x:00000656
.text$x:00000656
.text$x:00000656 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$6 proc near
.text$x:00000656                                         ; DATA XREF: .xdata$x:000006F8o
.text$x:00000656                 lea     ecx, [ebp-64h]  ; this
.text$x:00000659                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000659 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$6 endp
.text$x:00000659
.text$x:0000065E
.text$x:0000065E ; =============== S U B R O U T I N E =======================================
.text$x:0000065E
.text$x:0000065E
.text$x:0000065E __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$7 proc near
.text$x:0000065E                                         ; DATA XREF: .xdata$x:00000700o
.text$x:0000065E                 lea     ecx, [ebp-7Ch]
.text$x:00000661                 jmp     ??1?$CRecordVector@PB_W@@QAE@XZ ; CRecordVector<wchar_t const *>::~CRecordVector<wchar_t const *>(void)
.text$x:00000661 __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$7 endp
.text$x:00000661
.text$x:00000666
.text$x:00000666 ; =============== S U B R O U T I N E =======================================
.text$x:00000666
.text$x:00000666
.text$x:00000666 __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z proc near
.text$x:00000666                                         ; DATA XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+5o
.text$x:00000666
.text$x:00000666 arg_4           = dword ptr  8
.text$x:00000666
.text$x:00000666                 mov     edx, [esp+arg_4]
.text$x:0000066A                 lea     eax, [edx+0Ch]
.text$x:0000066D                 mov     ecx, [edx-0F4h]
.text$x:00000673                 xor     ecx, eax
.text$x:00000675                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000067A                 mov     eax, offset __ehfuncinfo$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.text$x:0000067F                 jmp     ___CxxFrameHandler3
.text$x:0000067F __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z endp
.text$x:0000067F
.text$x:0000067F _text$x         ends
.text$x:0000067F
.xdata$x:00000684 ; ===========================================================================
.xdata$x:00000684
.xdata$x:00000684 ; Segment type: Pure data
.xdata$x:00000684 ; Segment permissions: Read
.xdata$x:00000684 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000684                 assume cs:_xdata$x
.xdata$x:00000684                 ;org 684h
.xdata$x:00000684 __catchsym$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$8 dd offset loc_3E+2
.xdata$x:00000684                                         ; DATA XREF: .xdata$x:000006A4o
.xdata$x:00000688                 db    0
.xdata$x:00000689                 db    0
.xdata$x:0000068A                 db    0
.xdata$x:0000068B                 db    0
.xdata$x:0000068C                 db    0
.xdata$x:0000068D                 db    0
.xdata$x:0000068E                 db    0
.xdata$x:0000068F                 db    0
.xdata$x:00000690                 dd offset __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0
.xdata$x:00000694 __tryblocktable$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z db    3
.xdata$x:00000694                                         ; DATA XREF: .xdata$x:000006B8o
.xdata$x:00000695                 db    0
.xdata$x:00000696                 db    0
.xdata$x:00000697                 db    0
.xdata$x:00000698                 db    6
.xdata$x:00000699                 db    0
.xdata$x:0000069A                 db    0
.xdata$x:0000069B                 db    0
.xdata$x:0000069C                 db    7
.xdata$x:0000069D                 db    0
.xdata$x:0000069E                 db    0
.xdata$x:0000069F                 db    0
.xdata$x:000006A0                 db    1
.xdata$x:000006A1                 db    0
.xdata$x:000006A2                 db    0
.xdata$x:000006A3                 db    0
.xdata$x:000006A4                 dd offset __catchsym$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$8
.xdata$x:000006A8 __ehfuncinfo$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z db  22h ; "
.xdata$x:000006A8                                         ; DATA XREF: __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z+14o
.xdata$x:000006A9                 db    5
.xdata$x:000006AA                 db  93h ; ô
.xdata$x:000006AB                 db  19h
.xdata$x:000006AC                 db    8
.xdata$x:000006AD                 db    0
.xdata$x:000006AE                 db    0
.xdata$x:000006AF                 db    0
.xdata$x:000006B0                 dd offset __unwindtable$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.xdata$x:000006B4                 db    1
.xdata$x:000006B5                 db    0
.xdata$x:000006B6                 db    0
.xdata$x:000006B7                 db    0
.xdata$x:000006B8                 dd offset __tryblocktable$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z
.xdata$x:000006BC                 db    0
.xdata$x:000006BD                 db    0
.xdata$x:000006BE                 db    0
.xdata$x:000006BF                 db    0
.xdata$x:000006C0                 db    0
.xdata$x:000006C1                 db    0
.xdata$x:000006C2                 db    0
.xdata$x:000006C3                 db    0
.xdata$x:000006C4                 db    0
.xdata$x:000006C5                 db    0
.xdata$x:000006C6                 db    0
.xdata$x:000006C7                 db    0
.xdata$x:000006C8                 db    1
.xdata$x:000006C9                 db    0
.xdata$x:000006CA                 db    0
.xdata$x:000006CB                 db    0
.xdata$x:000006CC __unwindtable$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z db 0FFh
.xdata$x:000006CC                                         ; DATA XREF: .xdata$x:000006B0o
.xdata$x:000006CD                 db 0FFh
.xdata$x:000006CE                 db 0FFh
.xdata$x:000006CF                 db 0FFh
.xdata$x:000006D0                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$2
.xdata$x:000006D4                 align 8
.xdata$x:000006D8                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$3
.xdata$x:000006DC                 db    1
.xdata$x:000006DD                 db    0
.xdata$x:000006DE                 db    0
.xdata$x:000006DF                 db    0
.xdata$x:000006E0                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$4
.xdata$x:000006E4                 db    1
.xdata$x:000006E5                 db    0
.xdata$x:000006E6                 db    0
.xdata$x:000006E7                 db    0
.xdata$x:000006E8                 db    0
.xdata$x:000006E9                 db    0
.xdata$x:000006EA                 db    0
.xdata$x:000006EB                 db    0
.xdata$x:000006EC                 db    3
.xdata$x:000006ED                 db    0
.xdata$x:000006EE                 db    0
.xdata$x:000006EF                 db    0
.xdata$x:000006F0                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$5
.xdata$x:000006F4                 db    4
.xdata$x:000006F5                 db    0
.xdata$x:000006F6                 db    0
.xdata$x:000006F7                 db    0
.xdata$x:000006F8                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$6
.xdata$x:000006FC                 db    3
.xdata$x:000006FD                 db    0
.xdata$x:000006FE                 db    0
.xdata$x:000006FF                 db    0
.xdata$x:00000700                 dd offset __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$7
.xdata$x:00000704                 db    1
.xdata$x:00000705                 db    0
.xdata$x:00000706                 db    0
.xdata$x:00000707                 db    0
.xdata$x:00000708                 db    0
.xdata$x:00000709                 db    0
.xdata$x:0000070A                 db    0
.xdata$x:0000070B                 db    0
.xdata$x:0000070B _xdata$x        ends
.xdata$x:0000070B
.rtc$TMZ:0000070C ; ===========================================================================
.rtc$TMZ:0000070C
.rtc$TMZ:0000070C ; Segment type: Pure data
.rtc$TMZ:0000070C ; Segment permissions: Read
.rtc$TMZ:0000070C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000070C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000070C                 ;org 70Ch
.rtc$TMZ:0000070C ; COMDAT (pick any)
.rtc$TMZ:0000070C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000070C _rtc$TMZ        ends
.rtc$TMZ:0000070C
.rtc$IMZ:00000710 ; ===========================================================================
.rtc$IMZ:00000710
.rtc$IMZ:00000710 ; Segment type: Pure data
.rtc$IMZ:00000710 ; Segment permissions: Read
.rtc$IMZ:00000710 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000710                 assume cs:_rtc$IMZ
.rtc$IMZ:00000710                 ;org 710h
.rtc$IMZ:00000710 ; COMDAT (pick any)
.rtc$IMZ:00000710 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000710 _rtc$IMZ        ends
.rtc$IMZ:00000710
.text:00000714 ; ===========================================================================
.text:00000714
.text:00000714 ; Segment type: Pure code
.text:00000714 ; Segment permissions: Read/Execute
.text:00000714 _text           segment para public 'CODE' use32
.text:00000714                 assume cs:_text
.text:00000714                 ;org 714h
.text:00000714 ; COMDAT (pick any)
.text:00000714                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000714
.text:00000714 ; =============== S U B R O U T I N E =======================================
.text:00000714
.text:00000714 ; Attributes: bp-based frame
.text:00000714
.text:00000714 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000714                 public ??1UString@@QAE@XZ
.text:00000714 ??1UString@@QAE@XZ proc near            ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2ADp
.text:00000714                                         ; __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$6+3j ...
.text:00000714
.text:00000714 var_8           = dword ptr -8
.text:00000714 var_4           = dword ptr -4
.text:00000714
.text:00000714                 push    ebp
.text:00000715                 mov     ebp, esp
.text:00000717                 sub     esp, 8
.text:0000071A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000721                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000728                 mov     [ebp+var_4], ecx
.text:0000072B                 mov     eax, [ebp+var_4]
.text:0000072E                 mov     ecx, [eax]
.text:00000730                 mov     [ebp+var_8], ecx
.text:00000733                 mov     edx, [ebp+var_8]
.text:00000736                 push    edx             ; void *
.text:00000737                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000073C                 add     esp, 4
.text:0000073F                 add     esp, 8
.text:00000742                 cmp     ebp, esp
.text:00000744                 call    __RTC_CheckEsp
.text:00000749                 mov     esp, ebp
.text:0000074B                 pop     ebp
.text:0000074C                 retn
.text:0000074C ??1UString@@QAE@XZ endp
.text:0000074C
.text:0000074C ; ---------------------------------------------------------------------------
.text:0000074D                 align 10h
.text:0000074D _text           ends
.text:0000074D
.text:00000750 ; ===========================================================================
.text:00000750
.text:00000750 ; Segment type: Pure code
.text:00000750 ; Segment permissions: Read/Execute
.text:00000750 _text           segment para public 'CODE' use32
.text:00000750                 assume cs:_text
.text:00000750                 ;org 750h
.text:00000750 ; COMDAT (pick any)
.text:00000750                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000750
.text:00000750 ; =============== S U B R O U T I N E =======================================
.text:00000750
.text:00000750 ; Attributes: bp-based frame
.text:00000750
.text:00000750 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000750                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000750 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+1F5p
.text:00000750                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+20Ep ...
.text:00000750
.text:00000750 var_4           = dword ptr -4
.text:00000750
.text:00000750                 push    ebp
.text:00000751                 mov     ebp, esp
.text:00000753                 push    ecx
.text:00000754                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000075B                 mov     [ebp+var_4], ecx
.text:0000075E                 mov     eax, [ebp+var_4]
.text:00000761                 xor     ecx, ecx
.text:00000763                 cmp     dword ptr [eax+4], 0
.text:00000767                 setz    cl
.text:0000076A                 mov     al, cl
.text:0000076C                 mov     esp, ebp
.text:0000076E                 pop     ebp
.text:0000076F                 retn
.text:0000076F ?IsEmpty@UString@@QBE_NXZ endp
.text:0000076F
.text:0000076F _text           ends
.text:0000076F
.text:00000770 ; ===========================================================================
.text:00000770
.text:00000770 ; Segment type: Pure code
.text:00000770 ; Segment permissions: Read/Execute
.text:00000770 _text           segment para public 'CODE' use32
.text:00000770                 assume cs:_text
.text:00000770                 ;org 770h
.text:00000770 ; COMDAT (pick any)
.text:00000770                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000770
.text:00000770 ; =============== S U B R O U T I N E =======================================
.text:00000770
.text:00000770 ; Attributes: bp-based frame
.text:00000770
.text:00000770 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000770                 public ??BUString@@QBEPB_WXZ
.text:00000770 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+318p
.text:00000770                                         ; ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+21p
.text:00000770
.text:00000770 var_4           = dword ptr -4
.text:00000770
.text:00000770                 push    ebp
.text:00000771                 mov     ebp, esp
.text:00000773                 push    ecx
.text:00000774                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000077B                 mov     [ebp+var_4], ecx
.text:0000077E                 mov     eax, [ebp+var_4]
.text:00000781                 mov     eax, [eax]
.text:00000783                 mov     esp, ebp
.text:00000785                 pop     ebp
.text:00000786                 retn
.text:00000786 ??BUString@@QBEPB_WXZ endp
.text:00000786
.text:00000786 ; ---------------------------------------------------------------------------
.text:00000787                 align 4
.text:00000787 _text           ends
.text:00000787
.text:00000788 ; ===========================================================================
.text:00000788
.text:00000788 ; Segment type: Pure code
.text:00000788 ; Segment permissions: Read/Execute
.text:00000788 _text           segment para public 'CODE' use32
.text:00000788                 assume cs:_text
.text:00000788                 ;org 788h
.text:00000788 ; COMDAT (pick any)
.text:00000788                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000788
.text:00000788 ; =============== S U B R O U T I N E =======================================
.text:00000788
.text:00000788 ; Attributes: bp-based frame
.text:00000788
.text:00000788 ; wchar_t __thiscall UString::Back(UString *__hidden this)
.text:00000788                 public ?Back@UString@@QBE_WXZ
.text:00000788 ?Back@UString@@QBE_WXZ proc near        ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+227p
.text:00000788
.text:00000788 var_4           = dword ptr -4
.text:00000788
.text:00000788                 push    ebp
.text:00000789                 mov     ebp, esp
.text:0000078B                 push    ecx
.text:0000078C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000793                 mov     [ebp+var_4], ecx
.text:00000796                 mov     eax, [ebp+var_4]
.text:00000799                 mov     ecx, [eax+4]
.text:0000079C                 mov     edx, [ebp+var_4]
.text:0000079F                 mov     eax, [edx]
.text:000007A1                 mov     ax, [eax+ecx*2-2]
.text:000007A6                 mov     esp, ebp
.text:000007A8                 pop     ebp
.text:000007A9                 retn
.text:000007A9 ?Back@UString@@QBE_WXZ endp
.text:000007A9
.text:000007A9 ; ---------------------------------------------------------------------------
.text:000007AA                 align 4
.text:000007AA _text           ends
.text:000007AA
.text:000007AC ; ===========================================================================
.text:000007AC
.text:000007AC ; Segment type: Pure code
.text:000007AC ; Segment permissions: Read/Execute
.text:000007AC _text           segment para public 'CODE' use32
.text:000007AC                 assume cs:_text
.text:000007AC                 ;org 7ACh
.text:000007AC ; COMDAT (pick any)
.text:000007AC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000007AC
.text:000007AC ; =============== S U B R O U T I N E =======================================
.text:000007AC
.text:000007AC ; Attributes: bp-based frame
.text:000007AC
.text:000007AC ; void __thiscall UString::DeleteBack(UString *__hidden this)
.text:000007AC                 public ?DeleteBack@UString@@QAEXXZ
.text:000007AC ?DeleteBack@UString@@QAEXXZ proc near   ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+271p
.text:000007AC
.text:000007AC var_8           = dword ptr -8
.text:000007AC var_4           = dword ptr -4
.text:000007AC
.text:000007AC                 push    ebp
.text:000007AD                 mov     ebp, esp
.text:000007AF                 sub     esp, 8
.text:000007B2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007C0                 mov     [ebp+var_4], ecx
.text:000007C3                 mov     eax, [ebp+var_4]
.text:000007C6                 mov     ecx, [eax+4]
.text:000007C9                 sub     ecx, 1
.text:000007CC                 mov     [ebp+var_8], ecx
.text:000007CF                 mov     edx, [ebp+var_4]
.text:000007D2                 mov     eax, [ebp+var_8]
.text:000007D5                 mov     [edx+4], eax
.text:000007D8                 mov     ecx, [ebp+var_4]
.text:000007DB                 mov     edx, [ecx]
.text:000007DD                 xor     eax, eax
.text:000007DF                 mov     ecx, [ebp+var_8]
.text:000007E2                 mov     [edx+ecx*2], ax
.text:000007E6                 mov     esp, ebp
.text:000007E8                 pop     ebp
.text:000007E9                 retn
.text:000007E9 ?DeleteBack@UString@@QAEXXZ endp
.text:000007E9
.text:000007E9 ; ---------------------------------------------------------------------------
.text:000007EA                 align 4
.text:000007EA _text           ends
.text:000007EA
.text:000007EC ; ===========================================================================
.text:000007EC
.text:000007EC ; Segment type: Pure code
.text:000007EC ; Segment permissions: Read/Execute
.text:000007EC _text           segment para public 'CODE' use32
.text:000007EC                 assume cs:_text
.text:000007EC                 ;org 7ECh
.text:000007EC ; COMDAT (pick any)
.text:000007EC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000007EC
.text:000007EC ; =============== S U B R O U T I N E =======================================
.text:000007EC
.text:000007EC ; Attributes: bp-based frame
.text:000007EC
.text:000007EC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000007EC                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000007EC ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000007EC                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+1CAp
.text:000007EC                                         ; DATA XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+128o
.text:000007EC
.text:000007EC var_4           = dword ptr -4
.text:000007EC
.text:000007EC                 push    ebp
.text:000007ED                 mov     ebp, esp
.text:000007EF                 push    ecx
.text:000007F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007F7                 mov     [ebp+var_4], ecx
.text:000007FA                 xor     eax, eax
.text:000007FC                 mov     ecx, [ebp+var_4]
.text:000007FF                 mov     [ecx], ax
.text:00000802                 xor     edx, edx
.text:00000804                 mov     eax, [ebp+var_4]
.text:00000807                 mov     [eax+2], dx
.text:0000080B                 mov     ecx, [ebp+var_4]
.text:0000080E                 mov     dword ptr [ecx+8], 0
.text:00000815                 mov     eax, [ebp+var_4]
.text:00000818                 mov     esp, ebp
.text:0000081A                 pop     ebp
.text:0000081B                 retn
.text:0000081B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000081B
.text:0000081B _text           ends
.text:0000081B
.text:0000081C ; ===========================================================================
.text:0000081C
.text:0000081C ; Segment type: Pure code
.text:0000081C ; Segment permissions: Read/Execute
.text:0000081C _text           segment para public 'CODE' use32
.text:0000081C                 assume cs:_text
.text:0000081C                 ;org 81Ch
.text:0000081C ; COMDAT (pick any)
.text:0000081C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000081C
.text:0000081C ; =============== S U B R O U T I N E =======================================
.text:0000081C
.text:0000081C ; Attributes: bp-based frame
.text:0000081C
.text:0000081C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000081C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000081C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000081C                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2B9p
.text:0000081C                                         ; __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$5+3j ...
.text:0000081C
.text:0000081C var_4           = dword ptr -4
.text:0000081C
.text:0000081C                 push    ebp
.text:0000081D                 mov     ebp, esp
.text:0000081F                 push    ecx
.text:00000820                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000827                 mov     [ebp+var_4], ecx
.text:0000082A                 mov     ecx, [ebp+var_4] ; this
.text:0000082D                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00000832                 add     esp, 4
.text:00000835                 cmp     ebp, esp
.text:00000837                 call    __RTC_CheckEsp
.text:0000083C                 mov     esp, ebp
.text:0000083E                 pop     ebp
.text:0000083F                 retn
.text:0000083F ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:0000083F
.text:0000083F _text           ends
.text:0000083F
.text:00000840 ; ===========================================================================
.text:00000840
.text:00000840 ; Segment type: Pure code
.text:00000840 ; Segment permissions: Read/Execute
.text:00000840 _text           segment para public 'CODE' use32
.text:00000840                 assume cs:_text
.text:00000840                 ;org 840h
.text:00000840 ; COMDAT (pick any)
.text:00000840                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000840
.text:00000840 ; =============== S U B R O U T I N E =======================================
.text:00000840
.text:00000840 ; Attributes: bp-based frame
.text:00000840
.text:00000840 ; public: void * __thiscall NWindows::NCOM::CPropVariant::`vector deleting destructor'(unsigned int)
.text:00000840                 public ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z
.text:00000840 ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z proc near
.text:00000840                                         ; CODE XREF: __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0+26p
.text:00000840                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+480p
.text:00000840
.text:00000840 var_4           = dword ptr -4
.text:00000840 arg_0           = dword ptr  8
.text:00000840
.text:00000840                 push    ebp
.text:00000841                 mov     ebp, esp
.text:00000843                 push    ecx
.text:00000844                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000084B                 mov     [ebp+var_4], ecx
.text:0000084E                 mov     eax, [ebp+arg_0]
.text:00000851                 and     eax, 2
.text:00000854                 jz      short loc_88C
.text:00000856                 push    offset ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000085B                 mov     ecx, [ebp+var_4]
.text:0000085E                 mov     edx, [ecx-4]
.text:00000861                 push    edx
.text:00000862                 push    10h
.text:00000864                 mov     eax, [ebp+var_4]
.text:00000867                 push    eax
.text:00000868                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:0000086D                 mov     ecx, [ebp+arg_0]
.text:00000870                 and     ecx, 1
.text:00000873                 jz      short loc_884
.text:00000875                 mov     edx, [ebp+var_4]
.text:00000878                 sub     edx, 4
.text:0000087B                 push    edx             ; void *
.text:0000087C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000881                 add     esp, 4
.text:00000884
.text:00000884 loc_884:                                ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+33j
.text:00000884                 mov     eax, [ebp+var_4]
.text:00000887                 sub     eax, 4
.text:0000088A                 jmp     short loc_8AB
.text:0000088C ; ---------------------------------------------------------------------------
.text:0000088C
.text:0000088C loc_88C:                                ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+14j
.text:0000088C                 mov     ecx, [ebp+var_4] ; this
.text:0000088F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000894                 mov     eax, [ebp+arg_0]
.text:00000897                 and     eax, 1
.text:0000089A                 jz      short loc_8A8
.text:0000089C                 mov     ecx, [ebp+var_4]
.text:0000089F                 push    ecx             ; void *
.text:000008A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000008A5                 add     esp, 4
.text:000008A8
.text:000008A8 loc_8A8:                                ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+5Aj
.text:000008A8                 mov     eax, [ebp+var_4]
.text:000008AB
.text:000008AB loc_8AB:                                ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+4Aj
.text:000008AB                 add     esp, 4
.text:000008AE                 cmp     ebp, esp
.text:000008B0                 call    __RTC_CheckEsp
.text:000008B5                 mov     esp, ebp
.text:000008B7                 pop     ebp
.text:000008B8                 retn    4
.text:000008B8 ??_ECPropVariant@NCOM@NWindows@@QAEPAXI@Z endp
.text:000008B8
.text:000008B8 ; ---------------------------------------------------------------------------
.text:000008BB                 align 4
.text:000008BB _text           ends
.text:000008BB
.text:000008BC ; ===========================================================================
.text:000008BC
.text:000008BC ; Segment type: Pure code
.text:000008BC ; Segment permissions: Read/Execute
.text:000008BC _text           segment para public 'CODE' use32
.text:000008BC                 assume cs:_text
.text:000008BC                 ;org 8BCh
.text:000008BC ; COMDAT (pick any)
.text:000008BC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008BC
.text:000008BC ; =============== S U B R O U T I N E =======================================
.text:000008BC
.text:000008BC ; Attributes: bp-based frame
.text:000008BC
.text:000008BC ; public: unsigned int __thiscall CObjectVector<struct CProperty>::Size(void)const
.text:000008BC                 public ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ
.text:000008BC ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ proc near
.text:000008BC                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+CCp
.text:000008BC                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+192p
.text:000008BC
.text:000008BC var_4           = dword ptr -4
.text:000008BC
.text:000008BC                 push    ebp
.text:000008BD                 mov     ebp, esp
.text:000008BF                 push    ecx
.text:000008C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008C7                 mov     [ebp+var_4], ecx
.text:000008CA                 mov     ecx, [ebp+var_4]
.text:000008CD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000008D2                 add     esp, 4
.text:000008D5                 cmp     ebp, esp
.text:000008D7                 call    __RTC_CheckEsp
.text:000008DC                 mov     esp, ebp
.text:000008DE                 pop     ebp
.text:000008DF                 retn
.text:000008DF ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ endp
.text:000008DF
.text:000008DF _text           ends
.text:000008DF
.text:000008E0 ; ===========================================================================
.text:000008E0
.text:000008E0 ; Segment type: Pure code
.text:000008E0 ; Segment permissions: Read/Execute
.text:000008E0 _text           segment para public 'CODE' use32
.text:000008E0                 assume cs:_text
.text:000008E0                 ;org 8E0h
.text:000008E0 ; COMDAT (pick any)
.text:000008E0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008E0
.text:000008E0 ; =============== S U B R O U T I N E =======================================
.text:000008E0
.text:000008E0 ; Attributes: bp-based frame
.text:000008E0
.text:000008E0 ; public: bool __thiscall CObjectVector<struct CProperty>::IsEmpty(void)const
.text:000008E0                 public ?IsEmpty@?$CObjectVector@UCProperty@@@@QBE_NXZ
.text:000008E0 ?IsEmpty@?$CObjectVector@UCProperty@@@@QBE_NXZ proc near
.text:000008E0                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+44p
.text:000008E0
.text:000008E0 var_4           = dword ptr -4
.text:000008E0
.text:000008E0                 push    ebp
.text:000008E1                 mov     ebp, esp
.text:000008E3                 push    ecx
.text:000008E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008EB                 mov     [ebp+var_4], ecx
.text:000008EE                 mov     ecx, [ebp+var_4]
.text:000008F1                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:000008F6                 add     esp, 4
.text:000008F9                 cmp     ebp, esp
.text:000008FB                 call    __RTC_CheckEsp
.text:00000900                 mov     esp, ebp
.text:00000902                 pop     ebp
.text:00000903                 retn
.text:00000903 ?IsEmpty@?$CObjectVector@UCProperty@@@@QBE_NXZ endp
.text:00000903
.text:00000903 _text           ends
.text:00000903
.text:00000904 ; ===========================================================================
.text:00000904
.text:00000904 ; Segment type: Pure code
.text:00000904 ; Segment permissions: Read/Execute
.text:00000904 _text           segment para public 'CODE' use32
.text:00000904                 assume cs:_text
.text:00000904                 ;org 904h
.text:00000904 ; COMDAT (pick any)
.text:00000904                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000904
.text:00000904 ; =============== S U B R O U T I N E =======================================
.text:00000904
.text:00000904 ; Attributes: bp-based frame
.text:00000904
.text:00000904 ; public: struct CProperty const & __thiscall CObjectVector<struct CProperty>::operator[](unsigned int)const
.text:00000904                 public ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z
.text:00000904 ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z proc near
.text:00000904                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+1B3p
.text:00000904
.text:00000904 var_4           = dword ptr -4
.text:00000904 arg_0           = dword ptr  8
.text:00000904
.text:00000904                 push    ebp
.text:00000905                 mov     ebp, esp
.text:00000907                 push    ecx
.text:00000908                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000090F                 mov     [ebp+var_4], ecx
.text:00000912                 mov     eax, [ebp+arg_0]
.text:00000915                 push    eax
.text:00000916                 mov     ecx, [ebp+var_4]
.text:00000919                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000091E                 mov     eax, [eax]
.text:00000920                 add     esp, 4
.text:00000923                 cmp     ebp, esp
.text:00000925                 call    __RTC_CheckEsp
.text:0000092A                 mov     esp, ebp
.text:0000092C                 pop     ebp
.text:0000092D                 retn    4
.text:0000092D ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z endp
.text:0000092D
.text:0000092D _text           ends
.text:0000092D
.text:00000930 ; ===========================================================================
.text:00000930
.text:00000930 ; Segment type: Pure code
.text:00000930 ; Segment permissions: Read/Execute
.text:00000930 _text           segment para public 'CODE' use32
.text:00000930                 assume cs:_text
.text:00000930                 ;org 930h
.text:00000930 ; COMDAT (pick any)
.text:00000930                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000930
.text:00000930 ; =============== S U B R O U T I N E =======================================
.text:00000930
.text:00000930 ; Attributes: bp-based frame
.text:00000930
.text:00000930 ; public: __thiscall CMyComPtr<struct ISetProperties>::CMyComPtr<struct ISetProperties>(void)
.text:00000930                 public ??0?$CMyComPtr@UISetProperties@@@@QAE@XZ
.text:00000930 ??0?$CMyComPtr@UISetProperties@@@@QAE@XZ proc near
.text:00000930                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+5Ap
.text:00000930
.text:00000930 var_4           = dword ptr -4
.text:00000930
.text:00000930                 push    ebp
.text:00000931                 mov     ebp, esp
.text:00000933                 push    ecx
.text:00000934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000093B                 mov     [ebp+var_4], ecx
.text:0000093E                 mov     eax, [ebp+var_4]
.text:00000941                 mov     dword ptr [eax], 0
.text:00000947                 mov     eax, [ebp+var_4]
.text:0000094A                 mov     esp, ebp
.text:0000094C                 pop     ebp
.text:0000094D                 retn
.text:0000094D ??0?$CMyComPtr@UISetProperties@@@@QAE@XZ endp
.text:0000094D
.text:0000094D ; ---------------------------------------------------------------------------
.text:0000094E                 align 10h
.text:0000094E _text           ends
.text:0000094E
.text:00000950 ; ===========================================================================
.text:00000950
.text:00000950 ; Segment type: Pure code
.text:00000950 ; Segment permissions: Read/Execute
.text:00000950 _text           segment para public 'CODE' use32
.text:00000950                 assume cs:_text
.text:00000950                 ;org 950h
.text:00000950 ; COMDAT (pick any)
.text:00000950                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000950
.text:00000950 ; =============== S U B R O U T I N E =======================================
.text:00000950
.text:00000950 ; Attributes: bp-based frame
.text:00000950
.text:00000950 ; public: __thiscall CMyComPtr<struct ISetProperties>::~CMyComPtr<struct ISetProperties>(void)
.text:00000950                 public ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ
.text:00000950 ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ proc near
.text:00000950                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+ADp
.text:00000950                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3E2p ...
.text:00000950
.text:00000950 var_4           = dword ptr -4
.text:00000950
.text:00000950                 push    ebp
.text:00000951                 mov     ebp, esp
.text:00000953                 push    ecx
.text:00000954                 push    esi
.text:00000955                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000095C                 mov     [ebp+var_4], ecx
.text:0000095F                 mov     eax, [ebp+var_4]
.text:00000962                 cmp     dword ptr [eax], 0
.text:00000965                 jz      short loc_982
.text:00000967                 mov     ecx, [ebp+var_4]
.text:0000096A                 mov     edx, [ecx]
.text:0000096C                 mov     eax, [ebp+var_4]
.text:0000096F                 mov     ecx, [eax]
.text:00000971                 mov     edx, [edx]
.text:00000973                 mov     esi, esp
.text:00000975                 push    ecx
.text:00000976                 mov     eax, [edx+8]
.text:00000979                 call    eax
.text:0000097B                 cmp     esi, esp
.text:0000097D                 call    __RTC_CheckEsp
.text:00000982
.text:00000982 loc_982:                                ; CODE XREF: CMyComPtr<ISetProperties>::~CMyComPtr<ISetProperties>(void)+15j
.text:00000982                 pop     esi
.text:00000983                 add     esp, 4
.text:00000986                 cmp     ebp, esp
.text:00000988                 call    __RTC_CheckEsp
.text:0000098D                 mov     esp, ebp
.text:0000098F                 pop     ebp
.text:00000990                 retn
.text:00000990 ??1?$CMyComPtr@UISetProperties@@@@QAE@XZ endp
.text:00000990
.text:00000990 ; ---------------------------------------------------------------------------
.text:00000991                 align 4
.text:00000991 _text           ends
.text:00000991
.text:00000994 ; ===========================================================================
.text:00000994
.text:00000994 ; Segment type: Pure code
.text:00000994 ; Segment permissions: Read/Execute
.text:00000994 _text           segment para public 'CODE' use32
.text:00000994                 assume cs:_text
.text:00000994                 ;org 994h
.text:00000994 ; COMDAT (pick any)
.text:00000994                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000994
.text:00000994 ; =============== S U B R O U T I N E =======================================
.text:00000994
.text:00000994 ; Attributes: bp-based frame
.text:00000994
.text:00000994 ; public: struct ISetProperties * * __thiscall CMyComPtr<struct ISetProperties>::operator&(void)
.text:00000994                 public ??I?$CMyComPtr@UISetProperties@@@@QAEPAPAUISetProperties@@XZ
.text:00000994 ??I?$CMyComPtr@UISetProperties@@@@QAEPAPAUISetProperties@@XZ proc near
.text:00000994                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+69p
.text:00000994
.text:00000994 var_4           = dword ptr -4
.text:00000994
.text:00000994                 push    ebp
.text:00000995                 mov     ebp, esp
.text:00000997                 push    ecx
.text:00000998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000099F                 mov     [ebp+var_4], ecx
.text:000009A2                 mov     eax, [ebp+var_4]
.text:000009A5                 mov     esp, ebp
.text:000009A7                 pop     ebp
.text:000009A8                 retn
.text:000009A8 ??I?$CMyComPtr@UISetProperties@@@@QAEPAPAUISetProperties@@XZ endp
.text:000009A8
.text:000009A8 ; ---------------------------------------------------------------------------
.text:000009A9                 align 4
.text:000009A9 _text           ends
.text:000009A9
.text:000009AC ; ===========================================================================
.text:000009AC
.text:000009AC ; Segment type: Pure code
.text:000009AC ; Segment permissions: Read/Execute
.text:000009AC _text           segment para public 'CODE' use32
.text:000009AC                 assume cs:_text
.text:000009AC                 ;org 9ACh
.text:000009AC ; COMDAT (pick any)
.text:000009AC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009AC
.text:000009AC ; =============== S U B R O U T I N E =======================================
.text:000009AC
.text:000009AC ; Attributes: bp-based frame
.text:000009AC
.text:000009AC ; public: struct ISetProperties * __thiscall CMyComPtr<struct ISetProperties>::operator->(void)const
.text:000009AC                 public ??C?$CMyComPtr@UISetProperties@@@@QBEPAUISetProperties@@XZ
.text:000009AC ??C?$CMyComPtr@UISetProperties@@@@QBEPAUISetProperties@@XZ proc near
.text:000009AC                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+337p
.text:000009AC
.text:000009AC var_4           = dword ptr -4
.text:000009AC
.text:000009AC                 push    ebp
.text:000009AD                 mov     ebp, esp
.text:000009AF                 push    ecx
.text:000009B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009B7                 mov     [ebp+var_4], ecx
.text:000009BA                 mov     eax, [ebp+var_4]
.text:000009BD                 mov     eax, [eax]
.text:000009BF                 mov     esp, ebp
.text:000009C1                 pop     ebp
.text:000009C2                 retn
.text:000009C2 ??C?$CMyComPtr@UISetProperties@@@@QBEPAUISetProperties@@XZ endp
.text:000009C2
.text:000009C2 ; ---------------------------------------------------------------------------
.text:000009C3                 align 4
.text:000009C3 _text           ends
.text:000009C3
.text:000009C4 ; ===========================================================================
.text:000009C4
.text:000009C4 ; Segment type: Pure code
.text:000009C4 ; Segment permissions: Read/Execute
.text:000009C4 _text           segment para public 'CODE' use32
.text:000009C4                 assume cs:_text
.text:000009C4                 ;org 9C4h
.text:000009C4 ; COMDAT (pick any)
.text:000009C4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4 ; public: bool __thiscall CMyComPtr<struct ISetProperties>::operator!(void)const
.text:000009C4                 public ??7?$CMyComPtr@UISetProperties@@@@QBE_NXZ
.text:000009C4 ??7?$CMyComPtr@UISetProperties@@@@QBE_NXZ proc near
.text:000009C4                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+8Dp
.text:000009C4
.text:000009C4 var_4           = dword ptr -4
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 push    ecx
.text:000009C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CF                 mov     [ebp+var_4], ecx
.text:000009D2                 mov     eax, [ebp+var_4]
.text:000009D5                 xor     ecx, ecx
.text:000009D7                 cmp     dword ptr [eax], 0
.text:000009DA                 setz    cl
.text:000009DD                 mov     al, cl
.text:000009DF                 mov     esp, ebp
.text:000009E1                 pop     ebp
.text:000009E2                 retn
.text:000009E2 ??7?$CMyComPtr@UISetProperties@@@@QBE_NXZ endp
.text:000009E2
.text:000009E2 ; ---------------------------------------------------------------------------
.text:000009E3                 align 4
.text:000009E3 _text           ends
.text:000009E3
.text:000009E4 ; ===========================================================================
.text:000009E4
.text:000009E4 ; Segment type: Pure code
.text:000009E4 ; Segment permissions: Read/Execute
.text:000009E4 _text           segment para public 'CODE' use32
.text:000009E4                 assume cs:_text
.text:000009E4                 ;org 9E4h
.text:000009E4 ; COMDAT (pick any)
.text:000009E4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000009E4
.text:000009E4 ; =============== S U B R O U T I N E =======================================
.text:000009E4
.text:000009E4 ; Attributes: bp-based frame
.text:000009E4
.text:000009E4 ; public: unsigned int __thiscall CObjectVector<class UString>::Size(void)const
.text:000009E4                 public ?Size@?$CObjectVector@VUString@@@@QBEIXZ
.text:000009E4 ?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
.text:000009E4                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2EAp
.text:000009E4
.text:000009E4 var_4           = dword ptr -4
.text:000009E4
.text:000009E4                 push    ebp
.text:000009E5                 mov     ebp, esp
.text:000009E7                 push    ecx
.text:000009E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009EF                 mov     [ebp+var_4], ecx
.text:000009F2                 mov     ecx, [ebp+var_4]
.text:000009F5                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000009FA                 add     esp, 4
.text:000009FD                 cmp     ebp, esp
.text:000009FF                 call    __RTC_CheckEsp
.text:00000A04                 mov     esp, ebp
.text:00000A06                 pop     ebp
.text:00000A07                 retn
.text:00000A07 ?Size@?$CObjectVector@VUString@@@@QBEIXZ endp
.text:00000A07
.text:00000A07 _text           ends
.text:00000A07
.text:00000A08 ; ===========================================================================
.text:00000A08
.text:00000A08 ; Segment type: Pure code
.text:00000A08 ; Segment permissions: Read/Execute
.text:00000A08 _text           segment para public 'CODE' use32
.text:00000A08                 assume cs:_text
.text:00000A08                 ;org 0A08h
.text:00000A08 ; COMDAT (pick any)
.text:00000A08                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A08
.text:00000A08 ; =============== S U B R O U T I N E =======================================
.text:00000A08
.text:00000A08 ; Attributes: bp-based frame
.text:00000A08
.text:00000A08 ; public: __thiscall CObjectVector<class UString>::CObjectVector<class UString>(void)
.text:00000A08                 public ??0?$CObjectVector@VUString@@@@QAE@XZ
.text:00000A08 ??0?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00000A08                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+C0p
.text:00000A08
.text:00000A08 var_4           = dword ptr -4
.text:00000A08
.text:00000A08                 push    ebp
.text:00000A09                 mov     ebp, esp
.text:00000A0B                 push    ecx
.text:00000A0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A13                 mov     [ebp+var_4], ecx
.text:00000A16                 mov     ecx, [ebp+var_4]
.text:00000A19                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00000A1E                 mov     eax, [ebp+var_4]
.text:00000A21                 add     esp, 4
.text:00000A24                 cmp     ebp, esp
.text:00000A26                 call    __RTC_CheckEsp
.text:00000A2B                 mov     esp, ebp
.text:00000A2D                 pop     ebp
.text:00000A2E                 retn
.text:00000A2E ??0?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00000A2E
.text:00000A2E ; ---------------------------------------------------------------------------
.text:00000A2F                 align 10h
.text:00000A2F _text           ends
.text:00000A2F
.text:00000A30 ; ===========================================================================
.text:00000A30
.text:00000A30 ; Segment type: Pure code
.text:00000A30 ; Segment permissions: Read/Execute
.text:00000A30 _text           segment para public 'CODE' use32
.text:00000A30                 assume cs:_text
.text:00000A30                 ;org 0A30h
.text:00000A30 ; COMDAT (pick any)
.text:00000A30                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A30
.text:00000A30 ; =============== S U B R O U T I N E =======================================
.text:00000A30
.text:00000A30 ; Attributes: bp-based frame
.text:00000A30
.text:00000A30 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:00000A30                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:00000A30 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:00000A30                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+307p
.text:00000A30
.text:00000A30 var_4           = dword ptr -4
.text:00000A30 arg_0           = dword ptr  8
.text:00000A30
.text:00000A30                 push    ebp
.text:00000A31                 mov     ebp, esp
.text:00000A33                 push    ecx
.text:00000A34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A3B                 mov     [ebp+var_4], ecx
.text:00000A3E                 mov     eax, [ebp+arg_0]
.text:00000A41                 push    eax
.text:00000A42                 mov     ecx, [ebp+var_4]
.text:00000A45                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00000A4A                 mov     eax, [eax]
.text:00000A4C                 add     esp, 4
.text:00000A4F                 cmp     ebp, esp
.text:00000A51                 call    __RTC_CheckEsp
.text:00000A56                 mov     esp, ebp
.text:00000A58                 pop     ebp
.text:00000A59                 retn    4
.text:00000A59 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:00000A59
.text:00000A59 _text           ends
.text:00000A59
.text:00000A5C ; ===========================================================================
.text:00000A5C
.text:00000A5C ; Segment type: Pure code
.text:00000A5C ; Segment permissions: Read/Execute
.text:00000A5C _text           segment para public 'CODE' use32
.text:00000A5C                 assume cs:_text
.text:00000A5C                 ;org 0A5Ch
.text:00000A5C ; COMDAT (pick any)
.text:00000A5C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00000A5C                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00000A5C ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00000A5C                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+28Fp
.text:00000A5C
.text:00000A5C var_1C          = dword ptr -1Ch
.text:00000A5C var_18          = dword ptr -18h
.text:00000A5C var_14          = dword ptr -14h
.text:00000A5C var_10          = dword ptr -10h
.text:00000A5C var_C           = dword ptr -0Ch
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C arg_0           = dword ptr  8
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 push    0FFFFFFFFh
.text:00000A61                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00000A66                 mov     eax, large fs:0
.text:00000A6C                 push    eax
.text:00000A6D                 sub     esp, 10h
.text:00000A70                 mov     eax, 0CCCCCCCCh
.text:00000A75                 mov     [ebp+var_1C], eax
.text:00000A78                 mov     [ebp+var_18], eax
.text:00000A7B                 mov     [ebp+var_14], eax
.text:00000A7E                 mov     [ebp+var_10], eax
.text:00000A81                 mov     eax, dword ptr ds:___security_cookie
.text:00000A86                 xor     eax, ebp
.text:00000A88                 push    eax
.text:00000A89                 lea     eax, [ebp+var_C]
.text:00000A8C                 mov     large fs:0, eax
.text:00000A92                 mov     [ebp+var_10], ecx
.text:00000A95                 push    0Ch             ; unsigned int
.text:00000A97                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000A9C                 add     esp, 4
.text:00000A9F                 mov     [ebp+var_18], eax
.text:00000AA2                 mov     [ebp+var_4], 0
.text:00000AA9                 cmp     [ebp+var_18], 0
.text:00000AAD                 jz      short loc_AC0
.text:00000AAF                 mov     eax, [ebp+arg_0]
.text:00000AB2                 push    eax
.text:00000AB3                 mov     ecx, [ebp+var_18]
.text:00000AB6                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00000ABB                 mov     [ebp+var_1C], eax
.text:00000ABE                 jmp     short loc_AC7
.text:00000AC0 ; ---------------------------------------------------------------------------
.text:00000AC0
.text:00000AC0 loc_AC0:                                ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:00000AC0                 mov     [ebp+var_1C], 0
.text:00000AC7
.text:00000AC7 loc_AC7:                                ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:00000AC7                 mov     ecx, [ebp+var_1C]
.text:00000ACA                 mov     [ebp+var_14], ecx
.text:00000ACD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AD4                 mov     edx, [ebp+var_14]
.text:00000AD7                 push    edx
.text:00000AD8                 mov     ecx, [ebp+var_10]
.text:00000ADB                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00000AE0                 mov     ecx, [ebp+var_C]
.text:00000AE3                 mov     large fs:0, ecx
.text:00000AEA                 pop     ecx
.text:00000AEB                 add     esp, 1Ch
.text:00000AEE                 cmp     ebp, esp
.text:00000AF0                 call    __RTC_CheckEsp
.text:00000AF5                 mov     esp, ebp
.text:00000AF7                 pop     ebp
.text:00000AF8                 retn    4
.text:00000AF8 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:00000AF8
.text:00000AF8 ; ---------------------------------------------------------------------------
.text:00000AFB                 align 4
.text:00000AFB _text           ends
.text:00000AFB
.text$x:00000AFC ; ===========================================================================
.text$x:00000AFC
.text$x:00000AFC ; Segment type: Pure code
.text$x:00000AFC ; Segment permissions: Read/Execute
.text$x:00000AFC _text$x         segment para public 'CODE' use32
.text$x:00000AFC                 assume cs:_text$x
.text$x:00000AFC                 ;org 0AFCh
.text$x:00000AFC ; COMDAT (pick associative to section at A5C)
.text$x:00000AFC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000AFC
.text$x:00000AFC ; =============== S U B R O U T I N E =======================================
.text$x:00000AFC
.text$x:00000AFC
.text$x:00000AFC __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00000AFC                                         ; DATA XREF: .xdata$x:00000B28o
.text$x:00000AFC                 mov     eax, [ebp-18h]
.text$x:00000AFF                 push    eax             ; void *
.text$x:00000B00                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000B05                 pop     ecx
.text$x:00000B06                 retn
.text$x:00000B06 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:00000B06
.text$x:00000B07
.text$x:00000B07 ; =============== S U B R O U T I N E =======================================
.text$x:00000B07
.text$x:00000B07
.text$x:00000B07 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:00000B07                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:00000B07
.text$x:00000B07 arg_4           = dword ptr  8
.text$x:00000B07
.text$x:00000B07                 mov     edx, [esp+arg_4]
.text$x:00000B0B                 lea     eax, [edx+0Ch]
.text$x:00000B0E                 mov     ecx, [edx-14h]
.text$x:00000B11                 xor     ecx, eax
.text$x:00000B13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000B18                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00000B1D                 jmp     ___CxxFrameHandler3
.text$x:00000B1D __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00000B1D
.text$x:00000B1D ; ---------------------------------------------------------------------------
.text$x:00000B22                 align 4
.text$x:00000B22 _text$x         ends
.text$x:00000B22
.xdata$x:00000B24 ; ===========================================================================
.xdata$x:00000B24
.xdata$x:00000B24 ; Segment type: Pure data
.xdata$x:00000B24 ; Segment permissions: Read
.xdata$x:00000B24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000B24                 assume cs:_xdata$x
.xdata$x:00000B24                 ;org 0B24h
.xdata$x:00000B24 ; COMDAT (pick associative to section at A5C)
.xdata$x:00000B24 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00000B24                                         ; DATA XREF: .xdata$x:00000B34o
.xdata$x:00000B25                 db 0FFh
.xdata$x:00000B26                 db 0FFh
.xdata$x:00000B27                 db 0FFh
.xdata$x:00000B28                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00000B2C __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00000B2C                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00000B2D                 db    5
.xdata$x:00000B2E                 db  93h ; ô
.xdata$x:00000B2F                 db  19h
.xdata$x:00000B30                 db    1
.xdata$x:00000B31                 db    0
.xdata$x:00000B32                 db    0
.xdata$x:00000B33                 db    0
.xdata$x:00000B34                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:00000B38                 db    0
.xdata$x:00000B39                 db    0
.xdata$x:00000B3A                 db    0
.xdata$x:00000B3B                 db    0
.xdata$x:00000B3C                 db    0
.xdata$x:00000B3D                 db    0
.xdata$x:00000B3E                 db    0
.xdata$x:00000B3F                 db    0
.xdata$x:00000B40                 db    0
.xdata$x:00000B41                 db    0
.xdata$x:00000B42                 db    0
.xdata$x:00000B43                 db    0
.xdata$x:00000B44                 db    0
.xdata$x:00000B45                 db    0
.xdata$x:00000B46                 db    0
.xdata$x:00000B47                 db    0
.xdata$x:00000B48                 db    0
.xdata$x:00000B49                 db    0
.xdata$x:00000B4A                 db    0
.xdata$x:00000B4B                 db    0
.xdata$x:00000B4C                 db    1
.xdata$x:00000B4D                 db    0
.xdata$x:00000B4E                 db    0
.xdata$x:00000B4F                 db    0
.xdata$x:00000B4F _xdata$x        ends
.xdata$x:00000B4F
.text:00000B50 ; ===========================================================================
.text:00000B50
.text:00000B50 ; Segment type: Pure code
.text:00000B50 ; Segment permissions: Read/Execute
.text:00000B50 _text           segment para public 'CODE' use32
.text:00000B50                 assume cs:_text
.text:00000B50                 ;org 0B50h
.text:00000B50 ; COMDAT (pick any)
.text:00000B50                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000B50
.text:00000B50 ; =============== S U B R O U T I N E =======================================
.text:00000B50
.text:00000B50 ; Attributes: bp-based frame
.text:00000B50
.text:00000B50 ; public: __thiscall CObjectVector<class UString>::~CObjectVector<class UString>(void)
.text:00000B50                 public ??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00000B50 ??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text:00000B50                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3D3p
.text:00000B50                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+4A8p ...
.text:00000B50
.text:00000B50 var_20          = dword ptr -20h
.text:00000B50 var_1C          = dword ptr -1Ch
.text:00000B50 var_18          = dword ptr -18h
.text:00000B50 var_14          = dword ptr -14h
.text:00000B50 var_10          = dword ptr -10h
.text:00000B50 var_C           = dword ptr -0Ch
.text:00000B50 var_4           = dword ptr -4
.text:00000B50
.text:00000B50                 push    ebp
.text:00000B51                 mov     ebp, esp
.text:00000B53                 push    0FFFFFFFFh
.text:00000B55                 push    offset __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
.text:00000B5A                 mov     eax, large fs:0
.text:00000B60                 push    eax
.text:00000B61                 sub     esp, 14h
.text:00000B64                 mov     eax, 0CCCCCCCCh
.text:00000B69                 mov     [ebp+var_20], eax
.text:00000B6C                 mov     [ebp+var_1C], eax
.text:00000B6F                 mov     [ebp+var_18], eax
.text:00000B72                 mov     [ebp+var_14], eax
.text:00000B75                 mov     [ebp+var_10], eax
.text:00000B78                 mov     eax, dword ptr ds:___security_cookie
.text:00000B7D                 xor     eax, ebp
.text:00000B7F                 push    eax
.text:00000B80                 lea     eax, [ebp+var_C]
.text:00000B83                 mov     large fs:0, eax
.text:00000B89                 mov     [ebp+var_10], ecx
.text:00000B8C                 mov     [ebp+var_4], 0
.text:00000B93                 mov     ecx, [ebp+var_10]
.text:00000B96                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00000B9B                 mov     [ebp+var_14], eax
.text:00000B9E
.text:00000B9E loc_B9E:                                ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void):loc_BE0j
.text:00000B9E                 cmp     [ebp+var_14], 0
.text:00000BA2                 jz      short loc_BE2
.text:00000BA4                 mov     eax, [ebp+var_14]
.text:00000BA7                 sub     eax, 1
.text:00000BAA                 mov     [ebp+var_14], eax
.text:00000BAD                 mov     ecx, [ebp+var_14]
.text:00000BB0                 push    ecx
.text:00000BB1                 mov     ecx, [ebp+var_10]
.text:00000BB4                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00000BB9                 mov     edx, [eax]
.text:00000BBB                 mov     [ebp+var_1C], edx
.text:00000BBE                 mov     eax, [ebp+var_1C]
.text:00000BC1                 mov     [ebp+var_18], eax
.text:00000BC4                 cmp     [ebp+var_18], 0
.text:00000BC8                 jz      short loc_BD9
.text:00000BCA                 push    1
.text:00000BCC                 mov     ecx, [ebp+var_18]
.text:00000BCF                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00000BD4                 mov     [ebp+var_20], eax
.text:00000BD7                 jmp     short loc_BE0
.text:00000BD9 ; ---------------------------------------------------------------------------
.text:00000BD9
.text:00000BD9 loc_BD9:                                ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+78j
.text:00000BD9                 mov     [ebp+var_20], 0
.text:00000BE0
.text:00000BE0 loc_BE0:                                ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+87j
.text:00000BE0                 jmp     short loc_B9E
.text:00000BE2 ; ---------------------------------------------------------------------------
.text:00000BE2
.text:00000BE2 loc_BE2:                                ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+52j
.text:00000BE2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BE9                 mov     ecx, [ebp+var_10]
.text:00000BEC                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00000BF1                 mov     ecx, [ebp+var_C]
.text:00000BF4                 mov     large fs:0, ecx
.text:00000BFB                 pop     ecx
.text:00000BFC                 add     esp, 20h
.text:00000BFF                 cmp     ebp, esp
.text:00000C01                 call    __RTC_CheckEsp
.text:00000C06                 mov     esp, ebp
.text:00000C08                 pop     ebp
.text:00000C09                 retn
.text:00000C09 ??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text:00000C09
.text:00000C09 ; ---------------------------------------------------------------------------
.text:00000C0A                 align 4
.text:00000C0A _text           ends
.text:00000C0A
.text$x:00000C0C ; ===========================================================================
.text$x:00000C0C
.text$x:00000C0C ; Segment type: Pure code
.text$x:00000C0C ; Segment permissions: Read/Execute
.text$x:00000C0C _text$x         segment para public 'CODE' use32
.text$x:00000C0C                 assume cs:_text$x
.text$x:00000C0C                 ;org 0C0Ch
.text$x:00000C0C ; COMDAT (pick associative to section at B50)
.text$x:00000C0C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000C0C
.text$x:00000C0C ; =============== S U B R O U T I N E =======================================
.text$x:00000C0C
.text$x:00000C0C
.text$x:00000C0C __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
.text$x:00000C0C                                         ; DATA XREF: .xdata$x:00000C34o
.text$x:00000C0C                 mov     ecx, [ebp-10h]
.text$x:00000C0F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00000C0F __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 endp
.text$x:00000C0F
.text$x:00000C14
.text$x:00000C14 ; =============== S U B R O U T I N E =======================================
.text$x:00000C14
.text$x:00000C14
.text$x:00000C14 __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
.text$x:00000C14                                         ; DATA XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+5o
.text$x:00000C14
.text$x:00000C14 arg_4           = dword ptr  8
.text$x:00000C14
.text$x:00000C14                 mov     edx, [esp+arg_4]
.text$x:00000C18                 lea     eax, [edx+0Ch]
.text$x:00000C1B                 mov     ecx, [edx-18h]
.text$x:00000C1E                 xor     ecx, eax
.text$x:00000C20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C25                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
.text$x:00000C2A                 jmp     ___CxxFrameHandler3
.text$x:00000C2A __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ endp
.text$x:00000C2A
.text$x:00000C2A ; ---------------------------------------------------------------------------
.text$x:00000C2F                 align 10h
.text$x:00000C2F _text$x         ends
.text$x:00000C2F
.xdata$x:00000C30 ; ===========================================================================
.xdata$x:00000C30
.xdata$x:00000C30 ; Segment type: Pure data
.xdata$x:00000C30 ; Segment permissions: Read
.xdata$x:00000C30 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000C30                 assume cs:_xdata$x
.xdata$x:00000C30                 ;org 0C30h
.xdata$x:00000C30 ; COMDAT (pick associative to section at B50)
.xdata$x:00000C30 __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ db 0FFh
.xdata$x:00000C30                                         ; DATA XREF: .xdata$x:00000C40o
.xdata$x:00000C31                 db 0FFh
.xdata$x:00000C32                 db 0FFh
.xdata$x:00000C33                 db 0FFh
.xdata$x:00000C34                 dd offset __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
.xdata$x:00000C38 __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ db  22h ; "
.xdata$x:00000C38                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ+11o
.xdata$x:00000C39                 db    5
.xdata$x:00000C3A                 db  93h ; ô
.xdata$x:00000C3B                 db  19h
.xdata$x:00000C3C                 db    1
.xdata$x:00000C3D                 db    0
.xdata$x:00000C3E                 db    0
.xdata$x:00000C3F                 db    0
.xdata$x:00000C40                 dd offset __unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
.xdata$x:00000C44                 db    0
.xdata$x:00000C45                 db    0
.xdata$x:00000C46                 db    0
.xdata$x:00000C47                 db    0
.xdata$x:00000C48                 db    0
.xdata$x:00000C49                 db    0
.xdata$x:00000C4A                 db    0
.xdata$x:00000C4B                 db    0
.xdata$x:00000C4C                 db    0
.xdata$x:00000C4D                 db    0
.xdata$x:00000C4E                 db    0
.xdata$x:00000C4F                 db    0
.xdata$x:00000C50                 db    0
.xdata$x:00000C51                 db    0
.xdata$x:00000C52                 db    0
.xdata$x:00000C53                 db    0
.xdata$x:00000C54                 db    0
.xdata$x:00000C55                 db    0
.xdata$x:00000C56                 db    0
.xdata$x:00000C57                 db    0
.xdata$x:00000C58                 db    1
.xdata$x:00000C59                 db    0
.xdata$x:00000C5A                 db    0
.xdata$x:00000C5B                 db    0
.xdata$x:00000C5B _xdata$x        ends
.xdata$x:00000C5B
.text:00000C5C ; ===========================================================================
.text:00000C5C
.text:00000C5C ; Segment type: Pure code
.text:00000C5C ; Segment permissions: Read/Execute
.text:00000C5C _text           segment para public 'CODE' use32
.text:00000C5C                 assume cs:_text
.text:00000C5C                 ;org 0C5Ch
.text:00000C5C ; COMDAT (pick any)
.text:00000C5C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C5C
.text:00000C5C ; =============== S U B R O U T I N E =======================================
.text:00000C5C
.text:00000C5C ; Attributes: bp-based frame
.text:00000C5C
.text:00000C5C ; public: __thiscall CRecordVector<wchar_t const *>::CRecordVector<wchar_t const *>(void)
.text:00000C5C                 public ??0?$CRecordVector@PB_W@@QAE@XZ
.text:00000C5C ??0?$CRecordVector@PB_W@@QAE@XZ proc near
.text:00000C5C                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2C6p
.text:00000C5C
.text:00000C5C var_4           = dword ptr -4
.text:00000C5C
.text:00000C5C                 push    ebp
.text:00000C5D                 mov     ebp, esp
.text:00000C5F                 push    ecx
.text:00000C60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C67                 mov     [ebp+var_4], ecx
.text:00000C6A                 mov     eax, [ebp+var_4]
.text:00000C6D                 mov     dword ptr [eax], 0
.text:00000C73                 mov     ecx, [ebp+var_4]
.text:00000C76                 mov     dword ptr [ecx+4], 0
.text:00000C7D                 mov     edx, [ebp+var_4]
.text:00000C80                 mov     dword ptr [edx+8], 0
.text:00000C87                 mov     eax, [ebp+var_4]
.text:00000C8A                 mov     esp, ebp
.text:00000C8C                 pop     ebp
.text:00000C8D                 retn
.text:00000C8D ??0?$CRecordVector@PB_W@@QAE@XZ endp
.text:00000C8D
.text:00000C8D ; ---------------------------------------------------------------------------
.text:00000C8E                 align 10h
.text:00000C8E _text           ends
.text:00000C8E
.text:00000C90 ; ===========================================================================
.text:00000C90
.text:00000C90 ; Segment type: Pure code
.text:00000C90 ; Segment permissions: Read/Execute
.text:00000C90 _text           segment para public 'CODE' use32
.text:00000C90                 assume cs:_text
.text:00000C90                 ;org 0C90h
.text:00000C90 ; COMDAT (pick any)
.text:00000C90                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C90
.text:00000C90 ; =============== S U B R O U T I N E =======================================
.text:00000C90
.text:00000C90 ; Attributes: bp-based frame
.text:00000C90
.text:00000C90 ; public: unsigned int __thiscall CRecordVector<wchar_t const *>::Size(void)const
.text:00000C90                 public ?Size@?$CRecordVector@PB_W@@QBEIXZ
.text:00000C90 ?Size@?$CRecordVector@PB_W@@QBEIXZ proc near
.text:00000C90                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+351p
.text:00000C90
.text:00000C90 var_4           = dword ptr -4
.text:00000C90
.text:00000C90                 push    ebp
.text:00000C91                 mov     ebp, esp
.text:00000C93                 push    ecx
.text:00000C94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9B                 mov     [ebp+var_4], ecx
.text:00000C9E                 mov     eax, [ebp+var_4]
.text:00000CA1                 mov     eax, [eax+4]
.text:00000CA4                 mov     esp, ebp
.text:00000CA6                 pop     ebp
.text:00000CA7                 retn
.text:00000CA7 ?Size@?$CRecordVector@PB_W@@QBEIXZ endp
.text:00000CA7
.text:00000CA7 _text           ends
.text:00000CA7
.text:00000CA8 ; ===========================================================================
.text:00000CA8
.text:00000CA8 ; Segment type: Pure code
.text:00000CA8 ; Segment permissions: Read/Execute
.text:00000CA8 _text           segment para public 'CODE' use32
.text:00000CA8                 assume cs:_text
.text:00000CA8                 ;org 0CA8h
.text:00000CA8 ; COMDAT (pick any)
.text:00000CA8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CA8
.text:00000CA8 ; =============== S U B R O U T I N E =======================================
.text:00000CA8
.text:00000CA8 ; Attributes: bp-based frame
.text:00000CA8
.text:00000CA8 ; public: __thiscall CRecordVector<wchar_t const *>::~CRecordVector<wchar_t const *>(void)
.text:00000CA8                 public ??1?$CRecordVector@PB_W@@QAE@XZ
.text:00000CA8 ??1?$CRecordVector@PB_W@@QAE@XZ proc near
.text:00000CA8                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3C7p
.text:00000CA8                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+3F9p ...
.text:00000CA8
.text:00000CA8 var_8           = dword ptr -8
.text:00000CA8 var_4           = dword ptr -4
.text:00000CA8
.text:00000CA8                 push    ebp
.text:00000CA9                 mov     ebp, esp
.text:00000CAB                 sub     esp, 8
.text:00000CAE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CB5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CBC                 mov     [ebp+var_4], ecx
.text:00000CBF                 mov     eax, [ebp+var_4]
.text:00000CC2                 mov     ecx, [eax]
.text:00000CC4                 mov     [ebp+var_8], ecx
.text:00000CC7                 mov     edx, [ebp+var_8]
.text:00000CCA                 push    edx             ; void *
.text:00000CCB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000CD0                 add     esp, 4
.text:00000CD3                 add     esp, 8
.text:00000CD6                 cmp     ebp, esp
.text:00000CD8                 call    __RTC_CheckEsp
.text:00000CDD                 mov     esp, ebp
.text:00000CDF                 pop     ebp
.text:00000CE0                 retn
.text:00000CE0 ??1?$CRecordVector@PB_W@@QAE@XZ endp
.text:00000CE0
.text:00000CE0 ; ---------------------------------------------------------------------------
.text:00000CE1                 align 4
.text:00000CE1 _text           ends
.text:00000CE1
.text:00000CE4 ; ===========================================================================
.text:00000CE4
.text:00000CE4 ; Segment type: Pure code
.text:00000CE4 ; Segment permissions: Read/Execute
.text:00000CE4 _text           segment para public 'CODE' use32
.text:00000CE4                 assume cs:_text
.text:00000CE4                 ;org 0CE4h
.text:00000CE4 ; COMDAT (pick any)
.text:00000CE4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CE4
.text:00000CE4 ; =============== S U B R O U T I N E =======================================
.text:00000CE4
.text:00000CE4 ; Attributes: bp-based frame
.text:00000CE4
.text:00000CE4 ; public: unsigned int __thiscall CRecordVector<wchar_t const *>::Add(wchar_t const * const)
.text:00000CE4                 public ?Add@?$CRecordVector@PB_W@@QAEIQB_W@Z
.text:00000CE4 ?Add@?$CRecordVector@PB_W@@QAEIQB_W@Z proc near
.text:00000CE4                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+32Dp
.text:00000CE4
.text:00000CE4 var_8           = dword ptr -8
.text:00000CE4 var_4           = dword ptr -4
.text:00000CE4 arg_0           = dword ptr  8
.text:00000CE4
.text:00000CE4                 push    ebp
.text:00000CE5                 mov     ebp, esp
.text:00000CE7                 sub     esp, 8
.text:00000CEA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CF8                 mov     [ebp+var_4], ecx
.text:00000CFB                 mov     ecx, [ebp+var_4]
.text:00000CFE                 call    ?ReserveOnePosition@?$CRecordVector@PB_W@@AAEXXZ ; CRecordVector<wchar_t const *>::ReserveOnePosition(void)
.text:00000D03                 mov     eax, [ebp+var_4]
.text:00000D06                 mov     ecx, [eax+4]
.text:00000D09                 mov     edx, [ebp+var_4]
.text:00000D0C                 mov     eax, [edx]
.text:00000D0E                 mov     edx, [ebp+arg_0]
.text:00000D11                 mov     [eax+ecx*4], edx
.text:00000D14                 mov     eax, [ebp+var_4]
.text:00000D17                 mov     ecx, [eax+4]
.text:00000D1A                 mov     [ebp+var_8], ecx
.text:00000D1D                 mov     edx, [ebp+var_4]
.text:00000D20                 mov     eax, [edx+4]
.text:00000D23                 add     eax, 1
.text:00000D26                 mov     ecx, [ebp+var_4]
.text:00000D29                 mov     [ecx+4], eax
.text:00000D2C                 mov     eax, [ebp+var_8]
.text:00000D2F                 add     esp, 8
.text:00000D32                 cmp     ebp, esp
.text:00000D34                 call    __RTC_CheckEsp
.text:00000D39                 mov     esp, ebp
.text:00000D3B                 pop     ebp
.text:00000D3C                 retn    4
.text:00000D3C ?Add@?$CRecordVector@PB_W@@QAEIQB_W@Z endp
.text:00000D3C
.text:00000D3C ; ---------------------------------------------------------------------------
.text:00000D3F                 align 10h
.text:00000D3F _text           ends
.text:00000D3F
.text:00000D40 ; ===========================================================================
.text:00000D40
.text:00000D40 ; Segment type: Pure code
.text:00000D40 ; Segment permissions: Read/Execute
.text:00000D40 _text           segment para public 'CODE' use32
.text:00000D40                 assume cs:_text
.text:00000D40                 ;org 0D40h
.text:00000D40 ; COMDAT (pick any)
.text:00000D40                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; public: wchar_t const * & __thiscall CRecordVector<wchar_t const *>::Front(void)
.text:00000D40                 public ?Front@?$CRecordVector@PB_W@@QAEAAPB_WXZ
.text:00000D40 ?Front@?$CRecordVector@PB_W@@QAEAAPB_WXZ proc near
.text:00000D40                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+35Fp
.text:00000D40
.text:00000D40 var_4           = dword ptr -4
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 push    ecx
.text:00000D44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D4B                 mov     [ebp+var_4], ecx
.text:00000D4E                 mov     eax, [ebp+var_4]
.text:00000D51                 mov     eax, [eax]
.text:00000D53                 mov     esp, ebp
.text:00000D55                 pop     ebp
.text:00000D56                 retn
.text:00000D56 ?Front@?$CRecordVector@PB_W@@QAEAAPB_WXZ endp
.text:00000D56
.text:00000D56 ; ---------------------------------------------------------------------------
.text:00000D57                 align 4
.text:00000D57 _text           ends
.text:00000D57
.text:00000D58 ; ===========================================================================
.text:00000D58
.text:00000D58 ; Segment type: Pure code
.text:00000D58 ; Segment permissions: Read/Execute
.text:00000D58 _text           segment para public 'CODE' use32
.text:00000D58                 assume cs:_text
.text:00000D58                 ;org 0D58h
.text:00000D58 ; COMDAT (pick any)
.text:00000D58                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D58
.text:00000D58 ; =============== S U B R O U T I N E =======================================
.text:00000D58
.text:00000D58 ; Attributes: bp-based frame
.text:00000D58
.text:00000D58 ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:00000D58                 public ??_GUString@@QAEPAXI@Z
.text:00000D58 ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+7Fp
.text:00000D58
.text:00000D58 var_4           = dword ptr -4
.text:00000D58 arg_0           = dword ptr  8
.text:00000D58
.text:00000D58                 push    ebp
.text:00000D59                 mov     ebp, esp
.text:00000D5B                 push    ecx
.text:00000D5C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D63                 mov     [ebp+var_4], ecx
.text:00000D66                 mov     ecx, [ebp+var_4] ; this
.text:00000D69                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D6E                 mov     eax, [ebp+arg_0]
.text:00000D71                 and     eax, 1
.text:00000D74                 jz      short loc_D82
.text:00000D76                 mov     ecx, [ebp+var_4]
.text:00000D79                 push    ecx             ; void *
.text:00000D7A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D7F                 add     esp, 4
.text:00000D82
.text:00000D82 loc_D82:                                ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:00000D82                 mov     eax, [ebp+var_4]
.text:00000D85                 add     esp, 4
.text:00000D88                 cmp     ebp, esp
.text:00000D8A                 call    __RTC_CheckEsp
.text:00000D8F                 mov     esp, ebp
.text:00000D91                 pop     ebp
.text:00000D92                 retn    4
.text:00000D92 ??_GUString@@QAEPAXI@Z endp
.text:00000D92
.text:00000D92 ; ---------------------------------------------------------------------------
.text:00000D95                 align 4
.text:00000D95 _text           ends
.text:00000D95
.text:00000D98 ; ===========================================================================
.text:00000D98
.text:00000D98 ; Segment type: Pure code
.text:00000D98 ; Segment permissions: Read/Execute
.text:00000D98 _text           segment para public 'CODE' use32
.text:00000D98                 assume cs:_text
.text:00000D98                 ;org 0D98h
.text:00000D98 ; COMDAT (pick any)
.text:00000D98                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D98
.text:00000D98 ; =============== S U B R O U T I N E =======================================
.text:00000D98
.text:00000D98 ; Attributes: bp-based frame
.text:00000D98
.text:00000D98 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00000D98                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00000D98 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00000D98                                         ; CODE XREF: CObjectVector<UString>::CObjectVector<UString>(void)+11p
.text:00000D98
.text:00000D98 var_4           = dword ptr -4
.text:00000D98
.text:00000D98                 push    ebp
.text:00000D99                 mov     ebp, esp
.text:00000D9B                 push    ecx
.text:00000D9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DA3                 mov     [ebp+var_4], ecx
.text:00000DA6                 mov     eax, [ebp+var_4]
.text:00000DA9                 mov     dword ptr [eax], 0
.text:00000DAF                 mov     ecx, [ebp+var_4]
.text:00000DB2                 mov     dword ptr [ecx+4], 0
.text:00000DB9                 mov     edx, [ebp+var_4]
.text:00000DBC                 mov     dword ptr [edx+8], 0
.text:00000DC3                 mov     eax, [ebp+var_4]
.text:00000DC6                 mov     esp, ebp
.text:00000DC8                 pop     ebp
.text:00000DC9                 retn
.text:00000DC9 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00000DC9
.text:00000DC9 ; ---------------------------------------------------------------------------
.text:00000DCA                 align 4
.text:00000DCA _text           ends
.text:00000DCA
.text:00000DCC ; ===========================================================================
.text:00000DCC
.text:00000DCC ; Segment type: Pure code
.text:00000DCC ; Segment permissions: Read/Execute
.text:00000DCC _text           segment para public 'CODE' use32
.text:00000DCC                 assume cs:_text
.text:00000DCC                 ;org 0DCCh
.text:00000DCC ; COMDAT (pick any)
.text:00000DCC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000DCC
.text:00000DCC ; =============== S U B R O U T I N E =======================================
.text:00000DCC
.text:00000DCC ; Attributes: bp-based frame
.text:00000DCC
.text:00000DCC ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00000DCC                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00000DCC ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00000DCC                                         ; CODE XREF: CObjectVector<CProperty>::Size(void)+11p
.text:00000DCC                                         ; CObjectVector<UString>::Size(void)+11p ...
.text:00000DCC
.text:00000DCC var_4           = dword ptr -4
.text:00000DCC
.text:00000DCC                 push    ebp
.text:00000DCD                 mov     ebp, esp
.text:00000DCF                 push    ecx
.text:00000DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DD7                 mov     [ebp+var_4], ecx
.text:00000DDA                 mov     eax, [ebp+var_4]
.text:00000DDD                 mov     eax, [eax+4]
.text:00000DE0                 mov     esp, ebp
.text:00000DE2                 pop     ebp
.text:00000DE3                 retn
.text:00000DE3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00000DE3
.text:00000DE3 _text           ends
.text:00000DE3
.text:00000DE4 ; ===========================================================================
.text:00000DE4
.text:00000DE4 ; Segment type: Pure code
.text:00000DE4 ; Segment permissions: Read/Execute
.text:00000DE4 _text           segment para public 'CODE' use32
.text:00000DE4                 assume cs:_text
.text:00000DE4                 ;org 0DE4h
.text:00000DE4 ; COMDAT (pick any)
.text:00000DE4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000DE4
.text:00000DE4 ; =============== S U B R O U T I N E =======================================
.text:00000DE4
.text:00000DE4 ; Attributes: bp-based frame
.text:00000DE4
.text:00000DE4 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:00000DE4                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:00000DE4 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:00000DE4                                         ; CODE XREF: CObjectVector<CProperty>::IsEmpty(void)+11p
.text:00000DE4
.text:00000DE4 var_4           = dword ptr -4
.text:00000DE4
.text:00000DE4                 push    ebp
.text:00000DE5                 mov     ebp, esp
.text:00000DE7                 push    ecx
.text:00000DE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEF                 mov     [ebp+var_4], ecx
.text:00000DF2                 mov     eax, [ebp+var_4]
.text:00000DF5                 xor     ecx, ecx
.text:00000DF7                 cmp     dword ptr [eax+4], 0
.text:00000DFB                 setz    cl
.text:00000DFE                 mov     al, cl
.text:00000E00                 mov     esp, ebp
.text:00000E02                 pop     ebp
.text:00000E03                 retn
.text:00000E03 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:00000E03
.text:00000E03 _text           ends
.text:00000E03
.text:00000E04 ; ===========================================================================
.text:00000E04
.text:00000E04 ; Segment type: Pure code
.text:00000E04 ; Segment permissions: Read/Execute
.text:00000E04 _text           segment para public 'CODE' use32
.text:00000E04                 assume cs:_text
.text:00000E04                 ;org 0E04h
.text:00000E04 ; COMDAT (pick any)
.text:00000E04                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E04
.text:00000E04 ; =============== S U B R O U T I N E =======================================
.text:00000E04
.text:00000E04 ; Attributes: bp-based frame
.text:00000E04
.text:00000E04 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00000E04                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00000E04 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00000E04                                         ; CODE XREF: CObjectVector<UString>::~CObjectVector<UString>(void)+9Cp
.text:00000E04                                         ; __unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0+3j
.text:00000E04
.text:00000E04 var_8           = dword ptr -8
.text:00000E04 var_4           = dword ptr -4
.text:00000E04
.text:00000E04                 push    ebp
.text:00000E05                 mov     ebp, esp
.text:00000E07                 sub     esp, 8
.text:00000E0A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E18                 mov     [ebp+var_4], ecx
.text:00000E1B                 mov     eax, [ebp+var_4]
.text:00000E1E                 mov     ecx, [eax]
.text:00000E20                 mov     [ebp+var_8], ecx
.text:00000E23                 mov     edx, [ebp+var_8]
.text:00000E26                 push    edx             ; void *
.text:00000E27                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000E2C                 add     esp, 4
.text:00000E2F                 add     esp, 8
.text:00000E32                 cmp     ebp, esp
.text:00000E34                 call    __RTC_CheckEsp
.text:00000E39                 mov     esp, ebp
.text:00000E3B                 pop     ebp
.text:00000E3C                 retn
.text:00000E3C ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00000E3C
.text:00000E3C ; ---------------------------------------------------------------------------
.text:00000E3D                 align 10h
.text:00000E3D _text           ends
.text:00000E3D
.text:00000E40 ; ===========================================================================
.text:00000E40
.text:00000E40 ; Segment type: Pure code
.text:00000E40 ; Segment permissions: Read/Execute
.text:00000E40 _text           segment para public 'CODE' use32
.text:00000E40                 assume cs:_text
.text:00000E40                 ;org 0E40h
.text:00000E40 ; COMDAT (pick any)
.text:00000E40                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E40
.text:00000E40 ; =============== S U B R O U T I N E =======================================
.text:00000E40
.text:00000E40 ; Attributes: bp-based frame
.text:00000E40
.text:00000E40 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00000E40                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00000E40 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00000E40                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00000E40
.text:00000E40 var_8           = dword ptr -8
.text:00000E40 var_4           = dword ptr -4
.text:00000E40 arg_0           = dword ptr  8
.text:00000E40
.text:00000E40                 push    ebp
.text:00000E41                 mov     ebp, esp
.text:00000E43                 sub     esp, 8
.text:00000E46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E54                 mov     [ebp+var_4], ecx
.text:00000E57                 mov     ecx, [ebp+var_4]
.text:00000E5A                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00000E5F                 mov     eax, [ebp+var_4]
.text:00000E62                 mov     ecx, [eax+4]
.text:00000E65                 mov     edx, [ebp+var_4]
.text:00000E68                 mov     eax, [edx]
.text:00000E6A                 mov     edx, [ebp+arg_0]
.text:00000E6D                 mov     [eax+ecx*4], edx
.text:00000E70                 mov     eax, [ebp+var_4]
.text:00000E73                 mov     ecx, [eax+4]
.text:00000E76                 mov     [ebp+var_8], ecx
.text:00000E79                 mov     edx, [ebp+var_4]
.text:00000E7C                 mov     eax, [edx+4]
.text:00000E7F                 add     eax, 1
.text:00000E82                 mov     ecx, [ebp+var_4]
.text:00000E85                 mov     [ecx+4], eax
.text:00000E88                 mov     eax, [ebp+var_8]
.text:00000E8B                 add     esp, 8
.text:00000E8E                 cmp     ebp, esp
.text:00000E90                 call    __RTC_CheckEsp
.text:00000E95                 mov     esp, ebp
.text:00000E97                 pop     ebp
.text:00000E98                 retn    4
.text:00000E98 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00000E98
.text:00000E98 ; ---------------------------------------------------------------------------
.text:00000E9B                 align 4
.text:00000E9B _text           ends
.text:00000E9B
.text:00000E9C ; ===========================================================================
.text:00000E9C
.text:00000E9C ; Segment type: Pure code
.text:00000E9C ; Segment permissions: Read/Execute
.text:00000E9C _text           segment para public 'CODE' use32
.text:00000E9C                 assume cs:_text
.text:00000E9C                 ;org 0E9Ch
.text:00000E9C ; COMDAT (pick any)
.text:00000E9C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000E9C
.text:00000E9C ; =============== S U B R O U T I N E =======================================
.text:00000E9C
.text:00000E9C ; Attributes: bp-based frame
.text:00000E9C
.text:00000E9C ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00000E9C                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00000E9C ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00000E9C                                         ; CODE XREF: CObjectVector<CProperty>::operator[](uint)+15p
.text:00000E9C
.text:00000E9C var_4           = dword ptr -4
.text:00000E9C arg_0           = dword ptr  8
.text:00000E9C
.text:00000E9C                 push    ebp
.text:00000E9D                 mov     ebp, esp
.text:00000E9F                 push    ecx
.text:00000EA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EA7                 mov     [ebp+var_4], ecx
.text:00000EAA                 mov     eax, [ebp+var_4]
.text:00000EAD                 mov     ecx, [eax]
.text:00000EAF                 mov     edx, [ebp+arg_0]
.text:00000EB2                 lea     eax, [ecx+edx*4]
.text:00000EB5                 mov     esp, ebp
.text:00000EB7                 pop     ebp
.text:00000EB8                 retn    4
.text:00000EB8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:00000EB8
.text:00000EB8 ; ---------------------------------------------------------------------------
.text:00000EBB                 align 4
.text:00000EBB _text           ends
.text:00000EBB
.text:00000EBC ; ===========================================================================
.text:00000EBC
.text:00000EBC ; Segment type: Pure code
.text:00000EBC ; Segment permissions: Read/Execute
.text:00000EBC _text           segment para public 'CODE' use32
.text:00000EBC                 assume cs:_text
.text:00000EBC                 ;org 0EBCh
.text:00000EBC ; COMDAT (pick any)
.text:00000EBC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000EBC
.text:00000EBC ; =============== S U B R O U T I N E =======================================
.text:00000EBC
.text:00000EBC ; Attributes: bp-based frame
.text:00000EBC
.text:00000EBC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00000EBC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00000EBC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00000EBC                                         ; CODE XREF: CObjectVector<UString>::operator[](uint)+15p
.text:00000EBC                                         ; CObjectVector<UString>::~CObjectVector<UString>(void)+64p
.text:00000EBC
.text:00000EBC var_4           = dword ptr -4
.text:00000EBC arg_0           = dword ptr  8
.text:00000EBC
.text:00000EBC                 push    ebp
.text:00000EBD                 mov     ebp, esp
.text:00000EBF                 push    ecx
.text:00000EC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EC7                 mov     [ebp+var_4], ecx
.text:00000ECA                 mov     eax, [ebp+var_4]
.text:00000ECD                 mov     ecx, [eax]
.text:00000ECF                 mov     edx, [ebp+arg_0]
.text:00000ED2                 lea     eax, [ecx+edx*4]
.text:00000ED5                 mov     esp, ebp
.text:00000ED7                 pop     ebp
.text:00000ED8                 retn    4
.text:00000ED8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00000ED8
.text:00000ED8 ; ---------------------------------------------------------------------------
.text:00000EDB                 align 4
.text:00000EDB _text           ends
.text:00000EDB
.text:00000EDC ; ===========================================================================
.text:00000EDC
.text:00000EDC ; Segment type: Pure code
.text:00000EDC ; Segment permissions: Read/Execute
.text:00000EDC _text           segment para public 'CODE' use32
.text:00000EDC                 assume cs:_text
.text:00000EDC                 ;org 0EDCh
.text:00000EDC ; COMDAT (pick any)
.text:00000EDC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000EDC
.text:00000EDC ; =============== S U B R O U T I N E =======================================
.text:00000EDC
.text:00000EDC ; Attributes: bp-based frame
.text:00000EDC
.text:00000EDC ; private: void __thiscall CRecordVector<wchar_t const *>::ReserveOnePosition(void)
.text:00000EDC                 public ?ReserveOnePosition@?$CRecordVector@PB_W@@AAEXXZ
.text:00000EDC ?ReserveOnePosition@?$CRecordVector@PB_W@@AAEXXZ proc near
.text:00000EDC                                         ; CODE XREF: CRecordVector<wchar_t const *>::Add(wchar_t const * const)+1Ap
.text:00000EDC
.text:00000EDC var_14          = dword ptr -14h
.text:00000EDC var_10          = dword ptr -10h
.text:00000EDC Dst             = dword ptr -0Ch
.text:00000EDC var_8           = dword ptr -8
.text:00000EDC var_4           = dword ptr -4
.text:00000EDC
.text:00000EDC                 push    ebp
.text:00000EDD                 mov     ebp, esp
.text:00000EDF                 sub     esp, 14h
.text:00000EE2                 mov     eax, 0CCCCCCCCh
.text:00000EE7                 mov     [ebp+var_14], eax
.text:00000EEA                 mov     [ebp+var_10], eax
.text:00000EED                 mov     [ebp+Dst], eax
.text:00000EF0                 mov     [ebp+var_8], eax
.text:00000EF3                 mov     [ebp+var_4], eax
.text:00000EF6                 mov     [ebp+var_4], ecx
.text:00000EF9                 mov     eax, [ebp+var_4]
.text:00000EFC                 mov     ecx, [ebp+var_4]
.text:00000EFF                 mov     edx, [eax+4]
.text:00000F02                 cmp     edx, [ecx+8]
.text:00000F05                 jnz     loc_F90
.text:00000F0B                 mov     eax, [ebp+var_4]
.text:00000F0E                 mov     ecx, [eax+8]
.text:00000F11                 shr     ecx, 2
.text:00000F14                 mov     edx, [ebp+var_4]
.text:00000F17                 mov     eax, [edx+8]
.text:00000F1A                 lea     ecx, [eax+ecx+1]
.text:00000F1E                 mov     [ebp+var_8], ecx
.text:00000F21                 xor     ecx, ecx
.text:00000F23                 mov     eax, [ebp+var_8]
.text:00000F26                 mov     edx, 4
.text:00000F2B                 mul     edx
.text:00000F2D                 seto    cl
.text:00000F30                 neg     ecx
.text:00000F32                 or      ecx, eax
.text:00000F34                 push    ecx             ; unsigned int
.text:00000F35                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000F3A                 add     esp, 4
.text:00000F3D                 mov     [ebp+var_10], eax
.text:00000F40                 mov     eax, [ebp+var_10]
.text:00000F43                 mov     [ebp+Dst], eax
.text:00000F46                 mov     ecx, [ebp+var_4]
.text:00000F49                 cmp     dword ptr [ecx+4], 0
.text:00000F4D                 jz      short loc_F6B
.text:00000F4F                 mov     edx, [ebp+var_4]
.text:00000F52                 mov     eax, [edx+4]
.text:00000F55                 shl     eax, 2
.text:00000F58                 push    eax             ; Size
.text:00000F59                 mov     ecx, [ebp+var_4]
.text:00000F5C                 mov     edx, [ecx]
.text:00000F5E                 push    edx             ; Src
.text:00000F5F                 mov     eax, [ebp+Dst]
.text:00000F62                 push    eax             ; Dst
.text:00000F63                 call    _memcpy
.text:00000F68                 add     esp, 0Ch
.text:00000F6B
.text:00000F6B loc_F6B:                                ; CODE XREF: CRecordVector<wchar_t const *>::ReserveOnePosition(void)+71j
.text:00000F6B                 mov     ecx, [ebp+var_4]
.text:00000F6E                 mov     edx, [ecx]
.text:00000F70                 mov     [ebp+var_14], edx
.text:00000F73                 mov     eax, [ebp+var_14]
.text:00000F76                 push    eax             ; void *
.text:00000F77                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000F7C                 add     esp, 4
.text:00000F7F                 mov     ecx, [ebp+var_4]
.text:00000F82                 mov     edx, [ebp+Dst]
.text:00000F85                 mov     [ecx], edx
.text:00000F87                 mov     eax, [ebp+var_4]
.text:00000F8A                 mov     ecx, [ebp+var_8]
.text:00000F8D                 mov     [eax+8], ecx
.text:00000F90
.text:00000F90 loc_F90:                                ; CODE XREF: CRecordVector<wchar_t const *>::ReserveOnePosition(void)+29j
.text:00000F90                 add     esp, 14h
.text:00000F93                 cmp     ebp, esp
.text:00000F95                 call    __RTC_CheckEsp
.text:00000F9A                 mov     esp, ebp
.text:00000F9C                 pop     ebp
.text:00000F9D                 retn
.text:00000F9D ?ReserveOnePosition@?$CRecordVector@PB_W@@AAEXXZ endp
.text:00000F9D
.text:00000F9D ; ---------------------------------------------------------------------------
.text:00000F9E                 align 10h
.text:00000F9E _text           ends
.text:00000F9E
.text:00000FA0 ; ===========================================================================
.text:00000FA0
.text:00000FA0 ; Segment type: Pure code
.text:00000FA0 ; Segment permissions: Read/Execute
.text:00000FA0 _text           segment para public 'CODE' use32
.text:00000FA0                 assume cs:_text
.text:00000FA0                 ;org 0FA0h
.text:00000FA0 ; COMDAT (pick any)
.text:00000FA0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000FA0
.text:00000FA0 ; =============== S U B R O U T I N E =======================================
.text:00000FA0
.text:00000FA0 ; Attributes: bp-based frame
.text:00000FA0
.text:00000FA0 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00000FA0                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00000FA0 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00000FA0                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00000FA0
.text:00000FA0 var_14          = dword ptr -14h
.text:00000FA0 var_10          = dword ptr -10h
.text:00000FA0 Dst             = dword ptr -0Ch
.text:00000FA0 var_8           = dword ptr -8
.text:00000FA0 var_4           = dword ptr -4
.text:00000FA0
.text:00000FA0                 push    ebp
.text:00000FA1                 mov     ebp, esp
.text:00000FA3                 sub     esp, 14h
.text:00000FA6                 mov     eax, 0CCCCCCCCh
.text:00000FAB                 mov     [ebp+var_14], eax
.text:00000FAE                 mov     [ebp+var_10], eax
.text:00000FB1                 mov     [ebp+Dst], eax
.text:00000FB4                 mov     [ebp+var_8], eax
.text:00000FB7                 mov     [ebp+var_4], eax
.text:00000FBA                 mov     [ebp+var_4], ecx
.text:00000FBD                 mov     eax, [ebp+var_4]
.text:00000FC0                 mov     ecx, [ebp+var_4]
.text:00000FC3                 mov     edx, [eax+4]
.text:00000FC6                 cmp     edx, [ecx+8]
.text:00000FC9                 jnz     loc_1054
.text:00000FCF                 mov     eax, [ebp+var_4]
.text:00000FD2                 mov     ecx, [eax+8]
.text:00000FD5                 shr     ecx, 2
.text:00000FD8                 mov     edx, [ebp+var_4]
.text:00000FDB                 mov     eax, [edx+8]
.text:00000FDE                 lea     ecx, [eax+ecx+1]
.text:00000FE2                 mov     [ebp+var_8], ecx
.text:00000FE5                 xor     ecx, ecx
.text:00000FE7                 mov     eax, [ebp+var_8]
.text:00000FEA                 mov     edx, 4
.text:00000FEF                 mul     edx
.text:00000FF1                 seto    cl
.text:00000FF4                 neg     ecx
.text:00000FF6                 or      ecx, eax
.text:00000FF8                 push    ecx             ; unsigned int
.text:00000FF9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000FFE                 add     esp, 4
.text:00001001                 mov     [ebp+var_10], eax
.text:00001004                 mov     eax, [ebp+var_10]
.text:00001007                 mov     [ebp+Dst], eax
.text:0000100A                 mov     ecx, [ebp+var_4]
.text:0000100D                 cmp     dword ptr [ecx+4], 0
.text:00001011                 jz      short loc_102F
.text:00001013                 mov     edx, [ebp+var_4]
.text:00001016                 mov     eax, [edx+4]
.text:00001019                 shl     eax, 2
.text:0000101C                 push    eax             ; Size
.text:0000101D                 mov     ecx, [ebp+var_4]
.text:00001020                 mov     edx, [ecx]
.text:00001022                 push    edx             ; Src
.text:00001023                 mov     eax, [ebp+Dst]
.text:00001026                 push    eax             ; Dst
.text:00001027                 call    _memcpy
.text:0000102C                 add     esp, 0Ch
.text:0000102F
.text:0000102F loc_102F:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000102F                 mov     ecx, [ebp+var_4]
.text:00001032                 mov     edx, [ecx]
.text:00001034                 mov     [ebp+var_14], edx
.text:00001037                 mov     eax, [ebp+var_14]
.text:0000103A                 push    eax             ; void *
.text:0000103B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001040                 add     esp, 4
.text:00001043                 mov     ecx, [ebp+var_4]
.text:00001046                 mov     edx, [ebp+Dst]
.text:00001049                 mov     [ecx], edx
.text:0000104B                 mov     eax, [ebp+var_4]
.text:0000104E                 mov     ecx, [ebp+var_8]
.text:00001051                 mov     [eax+8], ecx
.text:00001054
.text:00001054 loc_1054:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00001054                 add     esp, 14h
.text:00001057                 cmp     ebp, esp
.text:00001059                 call    __RTC_CheckEsp
.text:0000105E                 mov     esp, ebp
.text:00001060                 pop     ebp
.text:00001061                 retn
.text:00001061 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00001061
.text:00001061 _text           ends
.text:00001061
UNDEF:00001070 ; ===========================================================================
UNDEF:00001070
UNDEF:00001070 ; Segment type: Externs
UNDEF:00001070 ; UNDEF
UNDEF:00001070 ; void __cdecl operator delete(void *)
UNDEF:00001070                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$4+7p
UNDEF:00001070                                         ; UString::~UString(void)+23p ...
UNDEF:00001074 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class NWindows::NCOM::CPropVariant const &)
UNDEF:00001074                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABV012@@Z:near
UNDEF:00001074                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2A1p
UNDEF:00001078 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00001078                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00001078                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+24Cp
UNDEF:00001078                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+261p
UNDEF:0000107C ; public: __thiscall UString::UString(class UString const &)
UNDEF:0000107C                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:0000107C                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+1E0p
UNDEF:0000107C                                         ; CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00001080 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:00001080                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:00001080                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+140p
UNDEF:00001084 ; void *__cdecl operator new(unsigned int)
UNDEF:00001084                 extrn ??2@YAPAXI@Z:near ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+FAp
UNDEF:00001084                                         ; CObjectVector<UString>::Add(UString const &)+3Bp ...
UNDEF:00001088                 extrn _IID_ISetProperties:near
UNDEF:00001088                                         ; DATA XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+71o
UNDEF:0000108C                 extrn ___security_cookie:near
UNDEF:0000108C                                         ; DATA XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+2Dr
UNDEF:0000108C                                         ; CObjectVector<UString>::Add(UString const &)+25r ...
UNDEF:00001090                 extrn ___CxxFrameHandler3:near
UNDEF:00001090                                         ; CODE XREF: __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z+19j
UNDEF:00001090                                         ; __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+16j ...
UNDEF:00001094 ; __fastcall __security_check_cookie(x)
UNDEF:00001094                 extrn @__security_check_cookie@4:near
UNDEF:00001094                                         ; CODE XREF: __ehhandler$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z+Fp
UNDEF:00001094                                         ; __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+Cp ...
UNDEF:00001098 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001098                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001098                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+4CCp
UNDEF:00001098                                         ; ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+8Fp
UNDEF:0000109C                 extrn __RTC_CheckEsp:near
UNDEF:0000109C                                         ; CODE XREF: SetProperties(IUnknown *,CObjectVector<CProperty> const &)+85p
UNDEF:0000109C                                         ; SetProperties(IUnknown *,CObjectVector<CProperty> const &)+394p ...
UNDEF:000010A0                 extrn __RTC_Shutdown:near
UNDEF:000010A0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000010A4                 extrn __RTC_InitBase:near
UNDEF:000010A4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000010A8 ; __stdcall _CxxThrowException(x, x)
UNDEF:000010A8                 extrn __CxxThrowException@8:near
UNDEF:000010A8                                         ; CODE XREF: __catch$?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z$0+41p
UNDEF:000010AC ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:000010AC                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:000010AC                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:000010B0 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:000010B0                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:000010B0                                         ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+80p
UNDEF:000010B4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:000010B4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:000010B4                                         ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+6Ep
UNDEF:000010B8 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:000010B8                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:000010B8                                         ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+52p
UNDEF:000010BC ; unsigned __int64 __stdcall ConvertStringToUInt64(const wchar_t *, const wchar_t **)
UNDEF:000010BC                 extrn ?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:near
UNDEF:000010BC                                         ; CODE XREF: ParseNumberString(UString const &,NWindows::NCOM::CPropVariant &)+27p
UNDEF:000010C0 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:000010C0                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:000010C0                                         ; CODE XREF: NWindows::NCOM::CPropVariant::`vector deleting destructor'(uint)+28p
UNDEF:000010C4 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000010C4                 extrn _memcpy:near      ; CODE XREF: CRecordVector<wchar_t const *>::ReserveOnePosition(void)+87p
UNDEF:000010C4                                         ; CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:000010C4
UNDEF:000010C4
UNDEF:000010C4                 end