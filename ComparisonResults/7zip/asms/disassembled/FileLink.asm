.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 09BD36595FD1932C9D34AFD7903406BD
.rdata:00000000 ; Input CRC32 : 0E8A70CA
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\FileLink.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG67908:                               ; DATA XREF: .data:_k_LinkPrefixo
.rdata:00000000                 unicode 0, <\??\>,0
.rdata:0000000A                 align 4
.rdata:0000000A _rdata          ends
.rdata:0000000A
.data:0000000C ; ===========================================================================
.data:0000000C
.data:0000000C ; Segment type: Pure data
.data:0000000C ; Segment permissions: Read/Write
.data:0000000C _data           segment dword public 'DATA' use32
.data:0000000C                 assume cs:_data
.data:0000000C                 ;org 0Ch
.data:0000000C ; wchar_t *k_LinkPrefix
.data:0000000C _k_LinkPrefix   dd offset $SG67908      ; DATA XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1C7r
.data:0000000C                                         ; NWindows::NFile::IsLinkPrefix(wchar_t const *)+3r
.data:0000000C _data           ends                    ; "\\??\\"
.data:0000000C
.text:00000010 ; ===========================================================================
.text:00000010
.text:00000010 ; Segment type: Pure code
.text:00000010 ; Segment permissions: Read/Execute
.text:00000010 _text           segment para public 'CODE' use32
.text:00000010                 assume cs:_text
.text:00000010                 ;org 10h
.text:00000010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000010
.text:00000010 ; =============== S U B R O U T I N E =======================================
.text:00000010
.text:00000010 ; Attributes: bp-based frame
.text:00000010
.text:00000010 ; void __stdcall NWindows::NFile::WriteString(NWindows::NFile *this, unsigned __int8 *, const wchar_t *)
.text:00000010                 public ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z
.text:00000010 ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z proc near
.text:00000010                                         ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1D4p
.text:00000010                                         ; NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1EAp ...
.text:00000010
.text:00000010 var_4           = dword ptr -4
.text:00000010 this            = dword ptr  8
.text:00000010 arg_4           = dword ptr  0Ch
.text:00000010
.text:00000010                 push    ebp
.text:00000011                 mov     ebp, esp
.text:00000013                 push    ecx
.text:00000014                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000001B
.text:0000001B loc_1B:                                 ; CODE XREF: NWindows::NFile::WriteString(uchar *,wchar_t const *)+3Bj
.text:0000001B                 mov     eax, [ebp+arg_4]
.text:0000001E                 mov     cx, [eax]
.text:00000021                 mov     word ptr [ebp+var_4], cx
.text:00000025                 mov     edx, [ebp+arg_4]
.text:00000028                 add     edx, 2
.text:0000002B                 mov     [ebp+arg_4], edx
.text:0000002E                 movzx   eax, word ptr [ebp+var_4]
.text:00000032                 test    eax, eax
.text:00000034                 jnz     short loc_38
.text:00000036                 jmp     short loc_4D
.text:00000038 ; ---------------------------------------------------------------------------
.text:00000038
.text:00000038 loc_38:                                 ; CODE XREF: NWindows::NFile::WriteString(uchar *,wchar_t const *)+24j
.text:00000038                 mov     ecx, [ebp+this]
.text:0000003B                 mov     dx, word ptr [ebp+var_4]
.text:0000003F                 mov     [ecx], dx
.text:00000042                 mov     eax, [ebp+this]
.text:00000045                 add     eax, 2
.text:00000048                 mov     [ebp+this], eax
.text:0000004B                 jmp     short loc_1B
.text:0000004D ; ---------------------------------------------------------------------------
.text:0000004D
.text:0000004D loc_4D:                                 ; CODE XREF: NWindows::NFile::WriteString(uchar *,wchar_t const *)+26j
.text:0000004D                 mov     esp, ebp
.text:0000004F                 pop     ebp
.text:00000050                 retn    8
.text:00000050 ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z endp
.text:00000050
.text:00000050 ; ---------------------------------------------------------------------------
.text:00000053                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; bool __stdcall NWindows::NFile::FillLinkData(class CBuffer<unsigned char> &, wchar_t const *, bool)
.text:00000060                 public ?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z
.text:00000060 ?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z proc near
.text:00000060
.text:00000060 var_30          = dword ptr -30h
.text:00000060 var_2C          = dword ptr -2Ch
.text:00000060 var_28          = dword ptr -28h
.text:00000060 var_24          = dword ptr -24h
.text:00000060 var_20          = dword ptr -20h
.text:00000060 Size            = dword ptr -1Ch
.text:00000060 var_15          = byte ptr -15h
.text:00000060 var_14          = dword ptr -14h
.text:00000060 var_10          = dword ptr -10h
.text:00000060 var_C           = dword ptr -0Ch
.text:00000060 var_8           = dword ptr -8
.text:00000060 var_2           = byte ptr -2
.text:00000060 var_1           = byte ptr -1
.text:00000060 arg_0           = dword ptr  8
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = byte ptr  10h
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 30h
.text:00000066                 push    edi             ; wchar_t *
.text:00000067                 lea     edi, [ebp+var_30]
.text:0000006A                 mov     ecx, 0Ch
.text:0000006F                 mov     eax, 0CCCCCCCCh
.text:00000074                 rep stosd
.text:00000076                 mov     eax, [ebp+arg_4]
.text:00000079                 push    eax             ; wchar_t *
.text:0000007A                 call    ?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsAbsolutePath(wchar_t const *)
.text:0000007F                 mov     [ebp+var_1], al
.text:00000082                 movzx   ecx, [ebp+var_1]
.text:00000086                 test    ecx, ecx
.text:00000088                 jnz     short loc_99
.text:0000008A                 movzx   edx, [ebp+arg_8]
.text:0000008E                 test    edx, edx
.text:00000090                 jnz     short loc_99
.text:00000092                 xor     al, al
.text:00000094                 jmp     loc_269
.text:00000099 ; ---------------------------------------------------------------------------
.text:00000099
.text:00000099 loc_99:                                 ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+28j
.text:00000099                                         ; NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+30j
.text:00000099                 mov     [ebp+var_2], 1
.text:0000009D                 mov     eax, [ebp+arg_4]
.text:000000A0                 push    eax             ; wchar_t *
.text:000000A1                 call    ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsSuperPath(wchar_t const *)
.text:000000A6                 movzx   ecx, al
.text:000000A9                 test    ecx, ecx
.text:000000AB                 jz      short loc_CA
.text:000000AD                 mov     edx, [ebp+arg_4]
.text:000000B0                 add     edx, 8
.text:000000B3                 mov     [ebp+arg_4], edx
.text:000000B6                 mov     eax, [ebp+arg_4]
.text:000000B9                 push    eax             ; wchar_t *
.text:000000BA                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:000000BF                 movzx   ecx, al
.text:000000C2                 test    ecx, ecx
.text:000000C4                 jnz     short loc_CA
.text:000000C6                 mov     [ebp+var_2], 0
.text:000000CA
.text:000000CA loc_CA:                                 ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+4Bj
.text:000000CA                                         ; NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+64j
.text:000000CA                 movzx   edx, [ebp+var_1]
.text:000000CE                 neg     edx
.text:000000D0                 sbb     edx, edx
.text:000000D2                 and     edx, 4
.text:000000D5                 mov     [ebp+var_8], edx
.text:000000D8                 mov     eax, [ebp+arg_4]
.text:000000DB                 push    eax             ; wchar_t *
.text:000000DC                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:000000E1                 shl     eax, 1
.text:000000E3                 mov     [ebp+var_C], eax
.text:000000E6                 mov     ecx, [ebp+var_8]
.text:000000E9                 mov     edx, [ebp+var_C]
.text:000000EC                 lea     eax, [edx+ecx*2]
.text:000000EF                 mov     [ebp+var_10], eax
.text:000000F2                 movzx   ecx, [ebp+var_2]
.text:000000F6                 test    ecx, ecx
.text:000000F8                 jnz     short loc_101
.text:000000FA                 mov     [ebp+var_C], 0
.text:00000101
.text:00000101 loc_101:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+98j
.text:00000101                 mov     edx, [ebp+var_10]
.text:00000104                 add     edx, [ebp+var_C]
.text:00000107                 mov     [ebp+var_14], edx
.text:0000010A                 mov     al, [ebp+arg_8]
.text:0000010D                 mov     [ebp+var_15], al
.text:00000110                 movzx   ecx, [ebp+var_15]
.text:00000114                 test    ecx, ecx
.text:00000116                 jnz     short loc_121
.text:00000118                 mov     edx, [ebp+var_14]
.text:0000011B                 add     edx, 4
.text:0000011E                 mov     [ebp+var_14], edx
.text:00000121
.text:00000121 loc_121:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+B6j
.text:00000121                 movzx   eax, [ebp+arg_8]
.text:00000125                 neg     eax
.text:00000127                 sbb     eax, eax
.text:00000129                 and     eax, 4
.text:0000012C                 mov     ecx, [ebp+var_14]
.text:0000012F                 lea     edx, [eax+ecx+10h]
.text:00000133                 mov     [ebp+Size], edx
.text:00000136                 mov     eax, [ebp+Size]
.text:00000139                 push    eax
.text:0000013A                 mov     ecx, [ebp+arg_0]
.text:0000013D                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:00000142                 mov     ecx, [ebp+Size]
.text:00000145                 push    ecx             ; Size
.text:00000146                 push    0               ; Val
.text:00000148                 mov     ecx, [ebp+arg_0]
.text:0000014B                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000150                 push    eax             ; Dst
.text:00000151                 call    _memset
.text:00000156                 add     esp, 0Ch
.text:00000159                 movzx   edx, [ebp+arg_8]
.text:0000015D                 neg     edx
.text:0000015F                 sbb     edx, edx
.text:00000161                 and     edx, 9
.text:00000164                 add     edx, 0A0000003h
.text:0000016A                 mov     [ebp+var_20], edx
.text:0000016D                 mov     ecx, [ebp+arg_0]
.text:00000170                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000175                 mov     [ebp+var_24], eax
.text:00000178                 mov     eax, [ebp+var_24]
.text:0000017B                 mov     ecx, [ebp+var_20]
.text:0000017E                 mov     [eax], ecx
.text:00000180                 mov     edx, [ebp+Size]
.text:00000183                 sub     edx, 8
.text:00000186                 mov     eax, [ebp+var_24]
.text:00000189                 mov     [eax+4], dx
.text:0000018D                 xor     ecx, ecx
.text:0000018F                 mov     edx, [ebp+var_24]
.text:00000192                 mov     [edx+6], cx
.text:00000196                 mov     eax, [ebp+var_24]
.text:00000199                 add     eax, 8
.text:0000019C                 mov     [ebp+var_24], eax
.text:0000019F                 mov     [ebp+var_28], 0
.text:000001A6                 mov     [ebp+var_2C], 0
.text:000001AD                 movzx   ecx, [ebp+var_15]
.text:000001B1                 test    ecx, ecx
.text:000001B3                 jz      short loc_1BD
.text:000001B5                 mov     edx, [ebp+var_C]
.text:000001B8                 mov     [ebp+var_28], edx
.text:000001BB                 jmp     short loc_1C6
.text:000001BD ; ---------------------------------------------------------------------------
.text:000001BD
.text:000001BD loc_1BD:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+153j
.text:000001BD                 mov     eax, [ebp+var_10]
.text:000001C0                 add     eax, 2
.text:000001C3                 mov     [ebp+var_2C], eax
.text:000001C6
.text:000001C6 loc_1C6:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+15Bj
.text:000001C6                 mov     ecx, [ebp+var_24]
.text:000001C9                 mov     dx, word ptr [ebp+var_28]
.text:000001CD                 mov     [ecx], dx
.text:000001D0                 mov     eax, [ebp+var_24]
.text:000001D3                 mov     cx, word ptr [ebp+var_10]
.text:000001D7                 mov     [eax+2], cx
.text:000001DB                 mov     edx, [ebp+var_24]
.text:000001DE                 mov     ax, word ptr [ebp+var_2C]
.text:000001E2                 mov     [edx+4], ax
.text:000001E6                 mov     ecx, [ebp+var_24]
.text:000001E9                 mov     dx, word ptr [ebp+var_C]
.text:000001ED                 mov     [ecx+6], dx
.text:000001F1                 mov     eax, [ebp+var_24]
.text:000001F4                 add     eax, 8
.text:000001F7                 mov     [ebp+var_24], eax
.text:000001FA                 movzx   ecx, [ebp+arg_8]
.text:000001FE                 test    ecx, ecx
.text:00000200                 jz      short loc_221
.text:00000202                 movzx   edx, [ebp+var_1]
.text:00000206                 neg     edx
.text:00000208                 sbb     edx, edx
.text:0000020A                 add     edx, 1
.text:0000020D                 mov     [ebp+var_30], edx
.text:00000210                 mov     eax, [ebp+var_24]
.text:00000213                 mov     ecx, [ebp+var_30]
.text:00000216                 mov     [eax], ecx
.text:00000218                 mov     edx, [ebp+var_24]
.text:0000021B                 add     edx, 4
.text:0000021E                 mov     [ebp+var_24], edx
.text:00000221
.text:00000221 loc_221:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1A0j
.text:00000221                 cmp     [ebp+var_8], 0
.text:00000225                 jz      short loc_239
.text:00000227                 mov     eax, ds:_k_LinkPrefix
.text:0000022C                 push    eax             ; unsigned __int8 *
.text:0000022D                 mov     ecx, [ebp+var_24]
.text:00000230                 add     ecx, [ebp+var_28]
.text:00000233                 push    ecx             ; this
.text:00000234                 call    ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z ; NWindows::NFile::WriteString(uchar *,wchar_t const *)
.text:00000239
.text:00000239 loc_239:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1C5j
.text:00000239                 mov     edx, [ebp+arg_4]
.text:0000023C                 push    edx             ; unsigned __int8 *
.text:0000023D                 mov     eax, [ebp+var_24]
.text:00000240                 add     eax, [ebp+var_28]
.text:00000243                 mov     ecx, [ebp+var_8]
.text:00000246                 lea     edx, [eax+ecx*2]
.text:00000249                 push    edx             ; this
.text:0000024A                 call    ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z ; NWindows::NFile::WriteString(uchar *,wchar_t const *)
.text:0000024F                 movzx   eax, [ebp+var_2]
.text:00000253                 test    eax, eax
.text:00000255                 jz      short loc_267
.text:00000257                 mov     ecx, [ebp+arg_4]
.text:0000025A                 push    ecx             ; unsigned __int8 *
.text:0000025B                 mov     edx, [ebp+var_24]
.text:0000025E                 add     edx, [ebp+var_2C]
.text:00000261                 push    edx             ; this
.text:00000262                 call    ?WriteString@NFile@NWindows@@YGXPAEPB_W@Z ; NWindows::NFile::WriteString(uchar *,wchar_t const *)
.text:00000267
.text:00000267 loc_267:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1F5j
.text:00000267                 mov     al, 1
.text:00000269
.text:00000269 loc_269:                                ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+34j
.text:00000269                 pop     edi
.text:0000026A                 add     esp, 30h
.text:0000026D                 cmp     ebp, esp
.text:0000026F                 call    __RTC_CheckEsp
.text:00000274                 mov     esp, ebp
.text:00000276                 pop     ebp
.text:00000277                 retn    0Ch
.text:00000277 ?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z endp ; sp-analysis failed
.text:00000277
.text:00000277 ; ---------------------------------------------------------------------------
.text:0000027A                 align 10h
.text:00000280
.text:00000280 ; =============== S U B R O U T I N E =======================================
.text:00000280
.text:00000280 ; Attributes: bp-based frame
.text:00000280
.text:00000280 ; bool __thiscall NWindows::NFile::CReparseAttr::Parse(NWindows::NFile::CReparseAttr *this, const unsigned __int8 *, unsigned int)
.text:00000280                 public ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z
.text:00000280 ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z proc near
.text:00000280
.text:00000280 var_18          = dword ptr -18h
.text:00000280 var_14          = dword ptr -14h
.text:00000280 var_10          = dword ptr -10h
.text:00000280 var_C           = dword ptr -0Ch
.text:00000280 var_8           = dword ptr -8
.text:00000280 var_4           = dword ptr -4
.text:00000280 arg_0           = dword ptr  8
.text:00000280 arg_4           = dword ptr  0Ch
.text:00000280
.text:00000280                 push    ebp
.text:00000281                 mov     ebp, esp
.text:00000283                 sub     esp, 18h
.text:00000286                 mov     eax, 0CCCCCCCCh
.text:0000028B                 mov     [ebp+var_18], eax
.text:0000028E                 mov     [ebp+var_14], eax
.text:00000291                 mov     [ebp+var_10], eax
.text:00000294                 mov     [ebp+var_C], eax
.text:00000297                 mov     [ebp+var_8], eax
.text:0000029A                 mov     [ebp+var_4], eax
.text:0000029D                 mov     [ebp+var_4], ecx
.text:000002A0                 cmp     [ebp+arg_4], 8
.text:000002A4                 jnb     short loc_2AD
.text:000002A6                 xor     al, al
.text:000002A8                 jmp     loc_41A
.text:000002AD ; ---------------------------------------------------------------------------
.text:000002AD
.text:000002AD loc_2AD:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+24j
.text:000002AD                 mov     eax, [ebp+var_4]
.text:000002B0                 mov     ecx, [ebp+arg_0]
.text:000002B3                 mov     edx, [ecx]
.text:000002B5                 mov     [eax], edx
.text:000002B7                 mov     eax, [ebp+arg_0]
.text:000002BA                 movzx   ecx, word ptr [eax+4]
.text:000002BE                 mov     [ebp+var_8], ecx
.text:000002C1                 mov     edx, [ebp+var_8]
.text:000002C4                 add     edx, 8
.text:000002C7                 cmp     edx, [ebp+arg_4]
.text:000002CA                 jbe     short loc_2D3
.text:000002CC                 xor     al, al
.text:000002CE                 jmp     loc_41A
.text:000002D3 ; ---------------------------------------------------------------------------
.text:000002D3
.text:000002D3 loc_2D3:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+4Aj
.text:000002D3                 mov     eax, [ebp+var_4]
.text:000002D6                 cmp     dword ptr [eax], 0A0000003h
.text:000002DC                 jz      short loc_2F0
.text:000002DE                 mov     ecx, [ebp+var_4]
.text:000002E1                 cmp     dword ptr [ecx], 0A000000Ch
.text:000002E7                 jz      short loc_2F0
.text:000002E9                 xor     al, al
.text:000002EB                 jmp     loc_41A
.text:000002F0 ; ---------------------------------------------------------------------------
.text:000002F0
.text:000002F0 loc_2F0:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+5Cj
.text:000002F0                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+67j
.text:000002F0                 mov     edx, [ebp+arg_0]
.text:000002F3                 movzx   eax, word ptr [edx+6]
.text:000002F7                 test    eax, eax
.text:000002F9                 jz      short loc_302
.text:000002FB                 xor     al, al
.text:000002FD                 jmp     loc_41A
.text:00000302 ; ---------------------------------------------------------------------------
.text:00000302
.text:00000302 loc_302:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+79j
.text:00000302                 mov     ecx, [ebp+arg_0]
.text:00000305                 add     ecx, 8
.text:00000308                 mov     [ebp+arg_0], ecx
.text:0000030B                 mov     edx, [ebp+arg_4]
.text:0000030E                 sub     edx, 8
.text:00000311                 mov     [ebp+arg_4], edx
.text:00000314                 mov     eax, [ebp+var_8]
.text:00000317                 cmp     eax, [ebp+arg_4]
.text:0000031A                 jz      short loc_323
.text:0000031C                 xor     al, al
.text:0000031E                 jmp     loc_41A
.text:00000323 ; ---------------------------------------------------------------------------
.text:00000323
.text:00000323 loc_323:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+9Aj
.text:00000323                 cmp     [ebp+var_8], 8
.text:00000327                 jnb     short loc_330
.text:00000329                 xor     al, al
.text:0000032B                 jmp     loc_41A
.text:00000330 ; ---------------------------------------------------------------------------
.text:00000330
.text:00000330 loc_330:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+A7j
.text:00000330                 mov     ecx, [ebp+arg_0]
.text:00000333                 movzx   edx, word ptr [ecx]
.text:00000336                 mov     [ebp+var_C], edx
.text:00000339                 mov     eax, [ebp+arg_0]
.text:0000033C                 movzx   ecx, word ptr [eax+2]
.text:00000340                 mov     [ebp+var_10], ecx
.text:00000343                 mov     edx, [ebp+arg_0]
.text:00000346                 movzx   eax, word ptr [edx+4]
.text:0000034A                 mov     [ebp+var_14], eax
.text:0000034D                 mov     ecx, [ebp+arg_0]
.text:00000350                 movzx   edx, word ptr [ecx+6]
.text:00000354                 mov     [ebp+var_18], edx
.text:00000357                 mov     eax, [ebp+var_8]
.text:0000035A                 sub     eax, 8
.text:0000035D                 mov     [ebp+var_8], eax
.text:00000360                 mov     ecx, [ebp+arg_0]
.text:00000363                 add     ecx, 8
.text:00000366                 mov     [ebp+arg_0], ecx
.text:00000369                 mov     edx, [ebp+var_4]
.text:0000036C                 mov     dword ptr [edx+4], 0
.text:00000373                 mov     eax, [ebp+var_4]
.text:00000376                 cmp     dword ptr [eax], 0A000000Ch
.text:0000037C                 jnz     short loc_3A8
.text:0000037E                 cmp     [ebp+var_8], 4
.text:00000382                 jnb     short loc_38B
.text:00000384                 xor     al, al
.text:00000386                 jmp     loc_41A
.text:0000038B ; ---------------------------------------------------------------------------
.text:0000038B
.text:0000038B loc_38B:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+102j
.text:0000038B                 mov     ecx, [ebp+var_4]
.text:0000038E                 mov     edx, [ebp+arg_0]
.text:00000391                 mov     eax, [edx]
.text:00000393                 mov     [ecx+4], eax
.text:00000396                 mov     ecx, [ebp+var_8]
.text:00000399                 sub     ecx, 4
.text:0000039C                 mov     [ebp+var_8], ecx
.text:0000039F                 mov     edx, [ebp+arg_0]
.text:000003A2                 add     edx, 4
.text:000003A5                 mov     [ebp+arg_0], edx
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+FCj
.text:000003A8                 mov     eax, [ebp+var_C]
.text:000003AB                 and     eax, 1
.text:000003AE                 jnz     short loc_3C3
.text:000003B0                 mov     ecx, [ebp+var_C]
.text:000003B3                 cmp     ecx, [ebp+var_8]
.text:000003B6                 ja      short loc_3C3
.text:000003B8                 mov     edx, [ebp+var_8]
.text:000003BB                 sub     edx, [ebp+var_C]
.text:000003BE                 cmp     edx, [ebp+var_10]
.text:000003C1                 jnb     short loc_3C7
.text:000003C3
.text:000003C3 loc_3C3:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+12Ej
.text:000003C3                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+136j
.text:000003C3                 xor     al, al
.text:000003C5                 jmp     short loc_41A
.text:000003C7 ; ---------------------------------------------------------------------------
.text:000003C7
.text:000003C7 loc_3C7:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+141j
.text:000003C7                 mov     eax, [ebp+var_14]
.text:000003CA                 and     eax, 1
.text:000003CD                 jnz     short loc_3E2
.text:000003CF                 mov     ecx, [ebp+var_14]
.text:000003D2                 cmp     ecx, [ebp+var_8]
.text:000003D5                 ja      short loc_3E2
.text:000003D7                 mov     edx, [ebp+var_8]
.text:000003DA                 sub     edx, [ebp+var_14]
.text:000003DD                 cmp     edx, [ebp+var_18]
.text:000003E0                 jnb     short loc_3E6
.text:000003E2
.text:000003E2 loc_3E2:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+14Dj
.text:000003E2                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+155j
.text:000003E2                 xor     al, al
.text:000003E4                 jmp     short loc_41A
.text:000003E6 ; ---------------------------------------------------------------------------
.text:000003E6
.text:000003E6 loc_3E6:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+160j
.text:000003E6                 mov     eax, [ebp+var_4]
.text:000003E9                 add     eax, 8
.text:000003EC                 push    eax             ; UString *
.text:000003ED                 mov     ecx, [ebp+var_10]
.text:000003F0                 shr     ecx, 1
.text:000003F2                 push    ecx             ; unsigned int
.text:000003F3                 mov     edx, [ebp+arg_0]
.text:000003F6                 add     edx, [ebp+var_C]
.text:000003F9                 push    edx             ; int
.text:000003FA                 call    ?GetString@NFile@NWindows@@YGXPBEIAAVUString@@@Z ; NWindows::NFile::GetString(uchar const *,uint,UString &)
.text:000003FF                 mov     eax, [ebp+var_4]
.text:00000402                 add     eax, 14h
.text:00000405                 push    eax             ; UString *
.text:00000406                 mov     ecx, [ebp+var_18]
.text:00000409                 shr     ecx, 1
.text:0000040B                 push    ecx             ; unsigned int
.text:0000040C                 mov     edx, [ebp+arg_0]
.text:0000040F                 add     edx, [ebp+var_14]
.text:00000412                 push    edx             ; int
.text:00000413                 call    ?GetString@NFile@NWindows@@YGXPBEIAAVUString@@@Z ; NWindows::NFile::GetString(uchar const *,uint,UString &)
.text:00000418                 mov     al, 1
.text:0000041A
.text:0000041A loc_41A:                                ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+28j
.text:0000041A                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+4Ej ...
.text:0000041A                 add     esp, 18h
.text:0000041D                 cmp     ebp, esp
.text:0000041F                 call    __RTC_CheckEsp
.text:00000424                 mov     esp, ebp
.text:00000426                 pop     ebp
.text:00000427                 retn    8
.text:00000427 ?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z endp
.text:00000427
.text:00000427 ; ---------------------------------------------------------------------------
.text:0000042A                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; int __stdcall NWindows::NFile::GetString(int, unsigned int, UString *)
.text:00000430 ?GetString@NFile@NWindows@@YGXPBEIAAVUString@@@Z proc near
.text:00000430                                         ; CODE XREF: NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+17Ap
.text:00000430                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+193p
.text:00000430
.text:00000430 var_C           = dword ptr -0Ch
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430 arg_8           = dword ptr  10h
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 0Ch
.text:00000436                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000043D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000444                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000044B                 mov     eax, [ebp+arg_4]
.text:0000044E                 push    eax             ; unsigned int
.text:0000044F                 mov     ecx, [ebp+arg_8] ; this
.text:00000452                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:00000457                 mov     [ebp+var_4], eax
.text:0000045A                 mov     [ebp+var_8], 0
.text:00000461                 jmp     short loc_46C
.text:00000463 ; ---------------------------------------------------------------------------
.text:00000463
.text:00000463 loc_463:                                ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+6Aj
.text:00000463                 mov     ecx, [ebp+var_8]
.text:00000466                 add     ecx, 1
.text:00000469                 mov     [ebp+var_8], ecx
.text:0000046C
.text:0000046C loc_46C:                                ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+31j
.text:0000046C                 mov     edx, [ebp+var_8]
.text:0000046F                 cmp     edx, [ebp+arg_4]
.text:00000472                 jnb     short loc_49C
.text:00000474                 mov     eax, [ebp+var_8]
.text:00000477                 mov     ecx, [ebp+arg_0]
.text:0000047A                 mov     dx, [ecx+eax*2]
.text:0000047E                 mov     word ptr [ebp+var_C], dx
.text:00000482                 movzx   eax, word ptr [ebp+var_C]
.text:00000486                 test    eax, eax
.text:00000488                 jnz     short loc_48C
.text:0000048A                 jmp     short loc_49C
.text:0000048C ; ---------------------------------------------------------------------------
.text:0000048C
.text:0000048C loc_48C:                                ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+58j
.text:0000048C                 mov     ecx, [ebp+var_8]
.text:0000048F                 mov     edx, [ebp+var_4]
.text:00000492                 mov     ax, word ptr [ebp+var_C]
.text:00000496                 mov     [edx+ecx*2], ax
.text:0000049A                 jmp     short loc_463
.text:0000049C ; ---------------------------------------------------------------------------
.text:0000049C
.text:0000049C loc_49C:                                ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+42j
.text:0000049C                                         ; NWindows::NFile::GetString(uchar const *,uint,UString &)+5Aj
.text:0000049C                 xor     ecx, ecx
.text:0000049E                 mov     edx, [ebp+var_8]
.text:000004A1                 mov     eax, [ebp+var_4]
.text:000004A4                 mov     [eax+edx*2], cx
.text:000004A8                 mov     ecx, [ebp+var_8]
.text:000004AB                 push    ecx             ; unsigned int
.text:000004AC                 mov     ecx, [ebp+arg_8] ; this
.text:000004AF                 call    ?ReleaseBuf_SetLen@UString@@QAEXI@Z ; UString::ReleaseBuf_SetLen(uint)
.text:000004B4                 add     esp, 0Ch
.text:000004B7                 cmp     ebp, esp
.text:000004B9                 call    __RTC_CheckEsp
.text:000004BE                 mov     esp, ebp
.text:000004C0                 pop     ebp
.text:000004C1                 retn    0Ch
.text:000004C1 ?GetString@NFile@NWindows@@YGXPBEIAAVUString@@@Z endp
.text:000004C1
.text:000004C1 ; ---------------------------------------------------------------------------
.text:000004C4                 align 10h
.text:000004D0
.text:000004D0 ; =============== S U B R O U T I N E =======================================
.text:000004D0
.text:000004D0 ; Attributes: bp-based frame
.text:000004D0
.text:000004D0 ; bool __thiscall NWindows::NFile::CReparseShortInfo::Parse(NWindows::NFile::CReparseShortInfo *this, const unsigned __int8 *, unsigned int)
.text:000004D0                 public ?Parse@CReparseShortInfo@NFile@NWindows@@QAE_NPBEI@Z
.text:000004D0 ?Parse@CReparseShortInfo@NFile@NWindows@@QAE_NPBEI@Z proc near
.text:000004D0
.text:000004D0 var_20          = dword ptr -20h
.text:000004D0 var_1C          = dword ptr -1Ch
.text:000004D0 var_18          = dword ptr -18h
.text:000004D0 var_14          = dword ptr -14h
.text:000004D0 var_10          = dword ptr -10h
.text:000004D0 var_C           = dword ptr -0Ch
.text:000004D0 var_8           = dword ptr -8
.text:000004D0 var_4           = dword ptr -4
.text:000004D0 arg_0           = dword ptr  8
.text:000004D0 arg_4           = dword ptr  0Ch
.text:000004D0
.text:000004D0                 push    ebp
.text:000004D1                 mov     ebp, esp
.text:000004D3                 sub     esp, 20h
.text:000004D6                 mov     eax, 0CCCCCCCCh
.text:000004DB                 mov     [ebp+var_20], eax
.text:000004DE                 mov     [ebp+var_1C], eax
.text:000004E1                 mov     [ebp+var_18], eax
.text:000004E4                 mov     [ebp+var_14], eax
.text:000004E7                 mov     [ebp+var_10], eax
.text:000004EA                 mov     [ebp+var_C], eax
.text:000004ED                 mov     [ebp+var_8], eax
.text:000004F0                 mov     [ebp+var_4], eax
.text:000004F3                 mov     [ebp+var_4], ecx
.text:000004F6                 mov     eax, [ebp+arg_0]
.text:000004F9                 mov     [ebp+var_8], eax
.text:000004FC                 mov     ecx, [ebp+var_4]
.text:000004FF                 mov     dword ptr [ecx], 0
.text:00000505                 mov     edx, [ebp+var_4]
.text:00000508                 mov     dword ptr [edx+4], 0
.text:0000050F                 cmp     [ebp+arg_4], 8
.text:00000513                 jnb     short loc_51C
.text:00000515                 xor     al, al
.text:00000517                 jmp     loc_64E
.text:0000051C ; ---------------------------------------------------------------------------
.text:0000051C
.text:0000051C loc_51C:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+43j
.text:0000051C                 mov     eax, [ebp+arg_0]
.text:0000051F                 mov     ecx, [eax]
.text:00000521                 mov     [ebp+var_C], ecx
.text:00000524                 mov     edx, [ebp+arg_0]
.text:00000527                 movzx   eax, word ptr [edx+4]
.text:0000052B                 mov     [ebp+var_10], eax
.text:0000052E                 mov     ecx, [ebp+var_10]
.text:00000531                 add     ecx, 8
.text:00000534                 cmp     ecx, [ebp+arg_4]
.text:00000537                 jbe     short loc_540
.text:00000539                 xor     al, al
.text:0000053B                 jmp     loc_64E
.text:00000540 ; ---------------------------------------------------------------------------
.text:00000540
.text:00000540 loc_540:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+67j
.text:00000540                 cmp     [ebp+var_C], 0A0000003h
.text:00000547                 jz      short loc_559
.text:00000549                 cmp     [ebp+var_C], 0A000000Ch
.text:00000550                 jz      short loc_559
.text:00000552                 xor     al, al
.text:00000554                 jmp     loc_64E
.text:00000559 ; ---------------------------------------------------------------------------
.text:00000559
.text:00000559 loc_559:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+77j
.text:00000559                                         ; NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+80j
.text:00000559                 mov     edx, [ebp+arg_0]
.text:0000055C                 movzx   eax, word ptr [edx+6]
.text:00000560                 test    eax, eax
.text:00000562                 jz      short loc_56B
.text:00000564                 xor     al, al
.text:00000566                 jmp     loc_64E
.text:0000056B ; ---------------------------------------------------------------------------
.text:0000056B
.text:0000056B loc_56B:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+92j
.text:0000056B                 mov     ecx, [ebp+arg_0]
.text:0000056E                 add     ecx, 8
.text:00000571                 mov     [ebp+arg_0], ecx
.text:00000574                 mov     edx, [ebp+arg_4]
.text:00000577                 sub     edx, 8
.text:0000057A                 mov     [ebp+arg_4], edx
.text:0000057D                 mov     eax, [ebp+var_10]
.text:00000580                 cmp     eax, [ebp+arg_4]
.text:00000583                 jz      short loc_58C
.text:00000585                 xor     al, al
.text:00000587                 jmp     loc_64E
.text:0000058C ; ---------------------------------------------------------------------------
.text:0000058C
.text:0000058C loc_58C:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+B3j
.text:0000058C                 cmp     [ebp+var_10], 8
.text:00000590                 jnb     short loc_599
.text:00000592                 xor     al, al
.text:00000594                 jmp     loc_64E
.text:00000599 ; ---------------------------------------------------------------------------
.text:00000599
.text:00000599 loc_599:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+C0j
.text:00000599                 mov     ecx, [ebp+arg_0]
.text:0000059C                 movzx   edx, word ptr [ecx]
.text:0000059F                 mov     [ebp+var_14], edx
.text:000005A2                 mov     eax, [ebp+arg_0]
.text:000005A5                 movzx   ecx, word ptr [eax+2]
.text:000005A9                 mov     [ebp+var_18], ecx
.text:000005AC                 mov     edx, [ebp+arg_0]
.text:000005AF                 movzx   eax, word ptr [edx+4]
.text:000005B3                 mov     [ebp+var_1C], eax
.text:000005B6                 mov     ecx, [ebp+arg_0]
.text:000005B9                 movzx   edx, word ptr [ecx+6]
.text:000005BD                 mov     [ebp+var_20], edx
.text:000005C0                 mov     eax, [ebp+var_10]
.text:000005C3                 sub     eax, 8
.text:000005C6                 mov     [ebp+var_10], eax
.text:000005C9                 mov     ecx, [ebp+arg_0]
.text:000005CC                 add     ecx, 8
.text:000005CF                 mov     [ebp+arg_0], ecx
.text:000005D2                 cmp     [ebp+var_C], 0A000000Ch
.text:000005D9                 jnz     short loc_5F7
.text:000005DB                 cmp     [ebp+var_10], 4
.text:000005DF                 jnb     short loc_5E5
.text:000005E1                 xor     al, al
.text:000005E3                 jmp     short loc_64E
.text:000005E5 ; ---------------------------------------------------------------------------
.text:000005E5
.text:000005E5 loc_5E5:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+10Fj
.text:000005E5                 mov     edx, [ebp+var_10]
.text:000005E8                 sub     edx, 4
.text:000005EB                 mov     [ebp+var_10], edx
.text:000005EE                 mov     eax, [ebp+arg_0]
.text:000005F1                 add     eax, 4
.text:000005F4                 mov     [ebp+arg_0], eax
.text:000005F7
.text:000005F7 loc_5F7:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+109j
.text:000005F7                 mov     ecx, [ebp+var_14]
.text:000005FA                 and     ecx, 1
.text:000005FD                 jnz     short loc_612
.text:000005FF                 mov     edx, [ebp+var_14]
.text:00000602                 cmp     edx, [ebp+var_10]
.text:00000605                 ja      short loc_612
.text:00000607                 mov     eax, [ebp+var_10]
.text:0000060A                 sub     eax, [ebp+var_14]
.text:0000060D                 cmp     eax, [ebp+var_18]
.text:00000610                 jnb     short loc_616
.text:00000612
.text:00000612 loc_612:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+12Dj
.text:00000612                                         ; NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+135j
.text:00000612                 xor     al, al
.text:00000614                 jmp     short loc_64E
.text:00000616 ; ---------------------------------------------------------------------------
.text:00000616
.text:00000616 loc_616:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+140j
.text:00000616                 mov     ecx, [ebp+var_1C]
.text:00000619                 and     ecx, 1
.text:0000061C                 jnz     short loc_631
.text:0000061E                 mov     edx, [ebp+var_1C]
.text:00000621                 cmp     edx, [ebp+var_10]
.text:00000624                 ja      short loc_631
.text:00000626                 mov     eax, [ebp+var_10]
.text:00000629                 sub     eax, [ebp+var_1C]
.text:0000062C                 cmp     eax, [ebp+var_20]
.text:0000062F                 jnb     short loc_635
.text:00000631
.text:00000631 loc_631:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+14Cj
.text:00000631                                         ; NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+154j
.text:00000631                 xor     al, al
.text:00000633                 jmp     short loc_64E
.text:00000635 ; ---------------------------------------------------------------------------
.text:00000635
.text:00000635 loc_635:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+15Fj
.text:00000635                 mov     ecx, [ebp+arg_0]
.text:00000638                 sub     ecx, [ebp+var_8]
.text:0000063B                 add     ecx, [ebp+var_14]
.text:0000063E                 mov     edx, [ebp+var_4]
.text:00000641                 mov     [edx], ecx
.text:00000643                 mov     eax, [ebp+var_4]
.text:00000646                 mov     ecx, [ebp+var_18]
.text:00000649                 mov     [eax+4], ecx
.text:0000064C                 mov     al, 1
.text:0000064E
.text:0000064E loc_64E:                                ; CODE XREF: NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+47j
.text:0000064E                                         ; NWindows::NFile::CReparseShortInfo::Parse(uchar const *,uint)+6Bj ...
.text:0000064E                 mov     esp, ebp
.text:00000650                 pop     ebp
.text:00000651                 retn    8
.text:00000651 ?Parse@CReparseShortInfo@NFile@NWindows@@QAE_NPBEI@Z endp
.text:00000651
.text:00000651 ; ---------------------------------------------------------------------------
.text:00000654                 align 10h
.text:00000660
.text:00000660 ; =============== S U B R O U T I N E =======================================
.text:00000660
.text:00000660 ; Attributes: bp-based frame
.text:00000660
.text:00000660 ; bool __thiscall NWindows::NFile::CReparseAttr::IsOkNamePair(NWindows::NFile::CReparseAttr *__hidden this)
.text:00000660                 public ?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ
.text:00000660 ?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ proc near
.text:00000660
.text:00000660 var_4           = dword ptr -4
.text:00000660
.text:00000660                 push    ebp
.text:00000661                 mov     ebp, esp
.text:00000663                 push    ecx
.text:00000664                 push    esi             ; wchar_t *
.text:00000665                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000066C                 mov     [ebp+var_4], ecx
.text:0000066F                 mov     ecx, [ebp+var_4]
.text:00000672                 add     ecx, 8
.text:00000675                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000067A                 push    eax             ; wchar_t *
.text:0000067B                 call    ?IsLinkPrefix@NFile@NWindows@@YG?B_NPB_W@Z ; NWindows::NFile::IsLinkPrefix(wchar_t const *)
.text:00000680                 movzx   eax, al
.text:00000683                 test    eax, eax
.text:00000685                 jz      short loc_6E2
.text:00000687                 push    4               ; unsigned int
.text:00000689                 mov     ecx, [ebp+var_4]
.text:0000068C                 add     ecx, 8          ; this
.text:0000068F                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000694                 push    eax             ; this
.text:00000695                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:0000069A                 movzx   ecx, al
.text:0000069D                 test    ecx, ecx
.text:0000069F                 jnz     short loc_6AE
.text:000006A1                 mov     ecx, [ebp+var_4]
.text:000006A4                 add     ecx, 14h        ; this
.text:000006A7                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:000006AC                 jmp     short loc_713
.text:000006AE ; ---------------------------------------------------------------------------
.text:000006AE
.text:000006AE loc_6AE:                                ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+3Fj
.text:000006AE                 mov     ecx, [ebp+var_4]
.text:000006B1                 add     ecx, 14h
.text:000006B4                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000006B9                 mov     esi, esp
.text:000006BB                 push    eax             ; Str2
.text:000006BC                 push    4               ; unsigned int
.text:000006BE                 mov     ecx, [ebp+var_4]
.text:000006C1                 add     ecx, 8          ; this
.text:000006C4                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:000006C9                 push    eax             ; Str1
.text:000006CA                 call    dword ptr ds:__imp__wcscmp
.text:000006D0                 add     esp, 8
.text:000006D3                 cmp     esi, esp
.text:000006D5                 call    __RTC_CheckEsp
.text:000006DA                 test    eax, eax
.text:000006DC                 jnz     short loc_6E2
.text:000006DE                 mov     al, 1
.text:000006E0                 jmp     short loc_713
.text:000006E2 ; ---------------------------------------------------------------------------
.text:000006E2
.text:000006E2 loc_6E2:                                ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+25j
.text:000006E2                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+7Cj
.text:000006E2                 mov     ecx, [ebp+var_4]
.text:000006E5                 add     ecx, 14h
.text:000006E8                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000006ED                 mov     esi, esp
.text:000006EF                 push    eax             ; Str2
.text:000006F0                 mov     ecx, [ebp+var_4]
.text:000006F3                 add     ecx, 8
.text:000006F6                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000006FB                 push    eax             ; Str1
.text:000006FC                 call    dword ptr ds:__imp__wcscmp
.text:00000702                 add     esp, 8
.text:00000705                 cmp     esi, esp
.text:00000707                 call    __RTC_CheckEsp
.text:0000070C                 neg     eax
.text:0000070E                 sbb     eax, eax
.text:00000710                 add     eax, 1
.text:00000713
.text:00000713 loc_713:                                ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+4Cj
.text:00000713                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+80j
.text:00000713                 pop     esi
.text:00000714                 add     esp, 4
.text:00000717                 cmp     ebp, esp
.text:00000719                 call    __RTC_CheckEsp
.text:0000071E                 mov     esp, ebp
.text:00000720                 pop     ebp
.text:00000721                 retn
.text:00000721 ?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ endp ; sp-analysis failed
.text:00000721
.text:00000721 ; ---------------------------------------------------------------------------
.text:00000722                 align 10h
.text:00000730
.text:00000730 ; =============== S U B R O U T I N E =======================================
.text:00000730
.text:00000730 ; Attributes: bp-based frame
.text:00000730
.text:00000730 ; int __stdcall NWindows::NFile::IsLinkPrefix(wchar_t *)
.text:00000730 ?IsLinkPrefix@NFile@NWindows@@YG?B_NPB_W@Z proc near
.text:00000730                                         ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+1Bp
.text:00000730                                         ; NWindows::NFile::CReparseAttr::GetPath(void)+68p
.text:00000730
.text:00000730 arg_0           = dword ptr  8
.text:00000730
.text:00000730                 push    ebp
.text:00000731                 mov     ebp, esp
.text:00000733                 mov     eax, ds:_k_LinkPrefix
.text:00000738                 push    eax             ; wchar_t *
.text:00000739                 mov     ecx, [ebp+arg_0]
.text:0000073C                 push    ecx             ; wchar_t *
.text:0000073D                 call    ?IsString1PrefixedByString2@@YG_NPB_W0@Z ; IsString1PrefixedByString2(wchar_t const *,wchar_t const *)
.text:00000742                 cmp     ebp, esp
.text:00000744                 call    __RTC_CheckEsp
.text:00000749                 pop     ebp
.text:0000074A                 retn    4
.text:0000074A ?IsLinkPrefix@NFile@NWindows@@YG?B_NPB_W@Z endp
.text:0000074A
.text:0000074A ; ---------------------------------------------------------------------------
.text:0000074D                 align 10h
.text:00000750
.text:00000750 ; =============== S U B R O U T I N E =======================================
.text:00000750
.text:00000750 ; Attributes: bp-based frame
.text:00000750
.text:00000750 ; public: class UString __thiscall NWindows::NFile::CReparseAttr::GetPath(void)const
.text:00000750                 public ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ
.text:00000750 ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ proc near
.text:00000750
.text:00000750 var_28          = dword ptr -28h
.text:00000750 var_24          = dword ptr -24h
.text:00000750 var_20          = dword ptr -20h
.text:00000750 var_1C          = dword ptr -1Ch
.text:00000750 var_18          = dword ptr -18h
.text:00000750 var_14          = dword ptr -14h
.text:00000750 var_10          = dword ptr -10h
.text:00000750 var_C           = dword ptr -0Ch
.text:00000750 var_4           = dword ptr -4
.text:00000750 arg_0           = dword ptr  8
.text:00000750
.text:00000750                 push    ebp
.text:00000751                 mov     ebp, esp
.text:00000753                 push    0FFFFFFFFh
.text:00000755                 push    offset __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ
.text:0000075A                 mov     eax, large fs:0
.text:00000760                 push    eax
.text:00000761                 sub     esp, 1Ch
.text:00000764                 mov     eax, 0CCCCCCCCh
.text:00000769                 mov     [ebp+var_28], eax
.text:0000076C                 mov     [ebp+var_24], eax
.text:0000076F                 mov     [ebp+var_20], eax
.text:00000772                 mov     [ebp+var_1C], eax
.text:00000775                 mov     [ebp+var_18], eax
.text:00000778                 mov     [ebp+var_14], eax
.text:0000077B                 mov     [ebp+var_10], eax
.text:0000077E                 mov     eax, dword ptr ds:___security_cookie
.text:00000783                 xor     eax, ebp
.text:00000785                 push    eax             ; wchar_t *
.text:00000786                 lea     eax, [ebp+var_C]
.text:00000789                 mov     large fs:0, eax
.text:0000078F                 mov     [ebp+var_10], ecx
.text:00000792                 mov     [ebp+var_28], 0
.text:00000799                 mov     eax, [ebp+var_10]
.text:0000079C                 add     eax, 8
.text:0000079F                 push    eax
.text:000007A0                 lea     ecx, [ebp+var_20]
.text:000007A3                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000007A8                 mov     [ebp+var_4], 1
.text:000007AF                 lea     ecx, [ebp+var_20]
.text:000007B2                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000007B7                 push    eax             ; wchar_t *
.text:000007B8                 call    ?IsLinkPrefix@NFile@NWindows@@YG?B_NPB_W@Z ; NWindows::NFile::IsLinkPrefix(wchar_t const *)
.text:000007BD                 movzx   ecx, al
.text:000007C0                 test    ecx, ecx
.text:000007C2                 jz      short loc_7F1
.text:000007C4                 push    5Ch ; '\'       ; wchar_t
.text:000007C6                 push    1               ; unsigned int
.text:000007C8                 lea     ecx, [ebp+var_20] ; this
.text:000007CB                 call    ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z ; UString::ReplaceOneCharAtPos(uint,wchar_t)
.text:000007D0                 push    4               ; unsigned int
.text:000007D2                 lea     ecx, [ebp+var_20] ; this
.text:000007D5                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:000007DA                 push    eax             ; this
.text:000007DB                 call    ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath(wchar_t const *)
.text:000007E0                 movzx   edx, al
.text:000007E3                 test    edx, edx
.text:000007E5                 jz      short loc_7F1
.text:000007E7                 push    4               ; unsigned int
.text:000007E9                 lea     ecx, [ebp+var_20] ; this
.text:000007EC                 call    ?DeleteFrontal@UString@@QAEXI@Z ; UString::DeleteFrontal(uint)
.text:000007F1
.text:000007F1 loc_7F1:                                ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+72j
.text:000007F1                                         ; NWindows::NFile::CReparseAttr::GetPath(void)+95j
.text:000007F1                 lea     eax, [ebp+var_20]
.text:000007F4                 push    eax
.text:000007F5                 mov     ecx, [ebp+arg_0]
.text:000007F8                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000007FD                 mov     ecx, [ebp+var_28]
.text:00000800                 or      ecx, 1
.text:00000803                 mov     [ebp+var_28], ecx
.text:00000806                 mov     byte ptr [ebp+var_4], 0
.text:0000080A                 lea     ecx, [ebp+var_20] ; this
.text:0000080D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000812                 mov     eax, [ebp+arg_0]
.text:00000815                 push    edx
.text:00000816                 mov     ecx, ebp
.text:00000818                 push    eax
.text:00000819                 lea     edx, $LN11
.text:0000081F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000824                 pop     eax
.text:00000825                 pop     edx
.text:00000826                 mov     ecx, [ebp+var_C]
.text:00000829                 mov     large fs:0, ecx
.text:00000830                 pop     ecx
.text:00000831                 add     esp, 28h
.text:00000834                 cmp     ebp, esp
.text:00000836                 call    __RTC_CheckEsp
.text:0000083B                 mov     esp, ebp
.text:0000083D                 pop     ebp
.text:0000083E                 retn    4
.text:0000083E ?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ endp ; sp-analysis failed
.text:0000083E
.text:0000083E ; ---------------------------------------------------------------------------
.text:00000841                 align 4
.text:00000844 $LN11           dd 1                    ; DATA XREF: NWindows::NFile::CReparseAttr::GetPath(void)+C9o
.text:00000848                 dd offset $LN10
.text:0000084C $LN10           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000848o
.text:00000854                 dd offset $LN8
.text:00000858 $LN8            dd 0CCCC0073h, 0CCCCCCCCh ; DATA XREF: .text:00000854o
.text:00000860
.text:00000860 ; =============== S U B R O U T I N E =======================================
.text:00000860
.text:00000860 ; Attributes: bp-based frame
.text:00000860
.text:00000860 ; int __stdcall NWindows::NFile::NIO::GetReparseData(wchar_t *, int, struct _BY_HANDLE_FILE_INFORMATION *)
.text:00000860                 public ?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z
.text:00000860 ?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z proc near
.text:00000860
.text:00000860 var_44          = byte ptr -44h
.text:00000860 var_43          = byte ptr -43h
.text:00000860 var_42          = byte ptr -42h
.text:00000860 var_41          = byte ptr -41h
.text:00000860 Size            = dword ptr -3Ch
.text:00000860 var_30          = byte ptr -30h
.text:00000860 var_28          = dword ptr -28h
.text:00000860 var_20          = byte ptr -20h
.text:00000860 var_C           = dword ptr -0Ch
.text:00000860 var_4           = dword ptr -4
.text:00000860 arg_0           = dword ptr  8
.text:00000860 arg_4           = dword ptr  0Ch
.text:00000860 arg_8           = dword ptr  10h
.text:00000860
.text:00000860                 push    ebp
.text:00000861                 mov     ebp, esp
.text:00000863                 push    0FFFFFFFFh
.text:00000865                 push    offset __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z
.text:0000086A                 mov     eax, large fs:0
.text:00000870                 push    eax
.text:00000871                 sub     esp, 38h
.text:00000874                 push    edi
.text:00000875                 lea     edi, [ebp+var_44]
.text:00000878                 mov     ecx, 0Eh
.text:0000087D                 mov     eax, 0CCCCCCCCh
.text:00000882                 rep stosd
.text:00000884                 mov     eax, dword ptr ds:___security_cookie
.text:00000889                 xor     eax, ebp
.text:0000088B                 push    eax
.text:0000088C                 lea     eax, [ebp+var_C]
.text:0000088F                 mov     large fs:0, eax
.text:00000895                 mov     ecx, [ebp+arg_4]
.text:00000898                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0000089D                 lea     ecx, [ebp+var_20] ; this
.text:000008A0                 call    ??0CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::CInFile(void)
.text:000008A5                 mov     [ebp+var_4], 0
.text:000008AC                 mov     eax, [ebp+arg_0]
.text:000008AF                 push    eax             ; wchar_t *
.text:000008B0                 lea     ecx, [ebp+var_20] ; this
.text:000008B3                 call    ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::OpenReparse(wchar_t const *)
.text:000008B8                 movzx   ecx, al
.text:000008BB                 test    ecx, ecx
.text:000008BD                 jnz     short loc_8DA
.text:000008BF                 mov     [ebp+var_41], 0
.text:000008C3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008CA                 lea     ecx, [ebp+var_20] ; this
.text:000008CD                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:000008D2                 mov     al, [ebp+var_41]
.text:000008D5                 jmp     loc_985
.text:000008DA ; ---------------------------------------------------------------------------
.text:000008DA
.text:000008DA loc_8DA:                                ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+5Dj
.text:000008DA                 cmp     [ebp+arg_8], 0
.text:000008DE                 jz      short loc_8EC
.text:000008E0                 mov     edx, [ebp+arg_8]
.text:000008E3                 push    edx             ; struct _BY_HANDLE_FILE_INFORMATION *
.text:000008E4                 lea     ecx, [ebp+var_20] ; this
.text:000008E7                 call    ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z ; NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)
.text:000008EC
.text:000008EC loc_8EC:                                ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+7Ej
.text:000008EC                 mov     [ebp+var_28], 4000h
.text:000008F3                 push    4000h
.text:000008F8                 lea     ecx, [ebp+var_30]
.text:000008FB                 call    ??0?$CObjArray@E@@QAE@I@Z ; CObjArray<uchar>::CObjArray<uchar>(uint)
.text:00000900                 mov     byte ptr [ebp+var_4], 1
.text:00000904                 lea     eax, [ebp+Size]
.text:00000907                 push    eax             ; unsigned __int32 *
.text:00000908                 push    4000h           ; nOutBufferSize
.text:0000090D                 lea     ecx, [ebp+var_30]
.text:00000910                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:00000915                 push    eax             ; lpOutBuffer
.text:00000916                 push    900A8h          ; dwIoControlCode
.text:0000091B                 lea     ecx, [ebp+var_20] ; this
.text:0000091E                 call    ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong,ulong *)
.text:00000923                 movzx   ecx, al
.text:00000926                 test    ecx, ecx
.text:00000928                 jnz     short loc_94E
.text:0000092A                 mov     [ebp+var_42], 0
.text:0000092E                 mov     byte ptr [ebp+var_4], 0
.text:00000932                 lea     ecx, [ebp+var_30]
.text:00000935                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:0000093A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000941                 lea     ecx, [ebp+var_20] ; this
.text:00000944                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000949                 mov     al, [ebp+var_42]
.text:0000094C                 jmp     short loc_985
.text:0000094E ; ---------------------------------------------------------------------------
.text:0000094E
.text:0000094E loc_94E:                                ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+C8j
.text:0000094E                 mov     edx, [ebp+Size]
.text:00000951                 push    edx             ; Size
.text:00000952                 lea     ecx, [ebp+var_30]
.text:00000955                 call    ??B?$CObjArray@E@@QAEPAEXZ ; CObjArray<uchar>::operator uchar *(void)
.text:0000095A                 push    eax             ; Src
.text:0000095B                 mov     ecx, [ebp+arg_4]
.text:0000095E                 call    ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ; CBuffer<uchar>::CopyFrom(uchar const *,uint)
.text:00000963                 mov     [ebp+var_43], 1
.text:00000967                 mov     byte ptr [ebp+var_4], 0
.text:0000096B                 lea     ecx, [ebp+var_30]
.text:0000096E                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00000973                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000097A                 lea     ecx, [ebp+var_20] ; this
.text:0000097D                 call    ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text:00000982                 mov     al, [ebp+var_43]
.text:00000985
.text:00000985 loc_985:                                ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+75j
.text:00000985                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+ECj
.text:00000985                 push    edx
.text:00000986                 mov     ecx, ebp
.text:00000988                 push    eax
.text:00000989                 lea     edx, $LN13
.text:0000098F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000994                 pop     eax
.text:00000995                 pop     edx
.text:00000996                 mov     ecx, [ebp+var_C]
.text:00000999                 mov     large fs:0, ecx
.text:000009A0                 pop     ecx
.text:000009A1                 pop     edi
.text:000009A2                 add     esp, 44h
.text:000009A5                 cmp     ebp, esp
.text:000009A7                 call    __RTC_CheckEsp
.text:000009AC                 mov     esp, ebp
.text:000009AE                 pop     ebp
.text:000009AF                 retn    0Ch
.text:000009AF ?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z endp
.text:000009AF
.text:000009AF ; ---------------------------------------------------------------------------
.text:000009B2                 align 4
.text:000009B4 $LN13           dd 3                    ; DATA XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+129o
.text:000009B8                 dd offset $LN12
.text:000009BC $LN12           dd 0FFFFFFE0h, 10h      ; DATA XREF: .text:000009B8o
.text:000009C4                 dd offset $LN8_0        ; "file"
.text:000009C8                 dd 0FFFFFFD0h, 4
.text:000009D0                 dd offset $LN9          ; "buf"
.text:000009D4                 dd 0FFFFFFC4h, 4
.text:000009DC                 dd offset $LN10_0       ; "returnedSize"
.text:000009E0 $LN10_0         db 'returnedSize',0     ; DATA XREF: .text:000009DCo
.text:000009ED $LN9            db 'buf',0              ; DATA XREF: .text:000009D0o
.text:000009F1 $LN8_0          db 'file',0             ; DATA XREF: .text:000009C4o
.text:000009F6                 align 10h
.text:00000A00
.text:00000A00 ; =============== S U B R O U T I N E =======================================
.text:00000A00
.text:00000A00 ; Attributes: bp-based frame
.text:00000A00
.text:00000A00 ; bool __stdcall NWindows::NFile::NIO::SetReparseData(wchar_t *this, const wchar_t *, void *lpInBuffer, DWORD nInBufferSize, unsigned __int32)
.text:00000A00                 public ?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z
.text:00000A00 ?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z proc near
.text:00000A00
.text:00000A00 var_90          = byte ptr -90h
.text:00000A00 var_8E          = byte ptr -8Eh
.text:00000A00 var_8D          = byte ptr -8Dh
.text:00000A00 var_8C          = byte ptr -8Ch
.text:00000A00 var_8B          = byte ptr -8Bh
.text:00000A00 var_8A          = byte ptr -8Ah
.text:00000A00 var_89          = byte ptr -89h
.text:00000A00 BytesReturned   = dword ptr -84h
.text:00000A00 var_78          = byte ptr -78h
.text:00000A00 var_60          = byte ptr -60h
.text:00000A00 var_48          = byte ptr -48h
.text:00000A00 var_C           = dword ptr -0Ch
.text:00000A00 var_4           = dword ptr -4
.text:00000A00 this            = dword ptr  8
.text:00000A00 arg_4           = dword ptr  0Ch
.text:00000A00 lpInBuffer      = dword ptr  10h
.text:00000A00 nInBufferSize   = dword ptr  14h
.text:00000A00
.text:00000A00                 push    ebp
.text:00000A01                 mov     ebp, esp
.text:00000A03                 push    0FFFFFFFFh
.text:00000A05                 push    offset __ehhandler$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z
.text:00000A0A                 mov     eax, large fs:0
.text:00000A10                 push    eax
.text:00000A11                 sub     esp, 84h
.text:00000A17                 push    esi
.text:00000A18                 push    edi
.text:00000A19                 lea     edi, [ebp+var_90]
.text:00000A1F                 mov     ecx, 21h ; '!'
.text:00000A24                 mov     eax, 0CCCCCCCCh
.text:00000A29                 rep stosd
.text:00000A2B                 mov     eax, dword ptr ds:___security_cookie
.text:00000A30                 xor     eax, ebp
.text:00000A32                 push    eax             ; wchar_t *
.text:00000A33                 lea     eax, [ebp+var_C]
.text:00000A36                 mov     large fs:0, eax
.text:00000A3C                 lea     ecx, [ebp+var_48] ; this
.text:00000A3F                 call    ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::CFileInfo(void)
.text:00000A44                 mov     [ebp+var_4], 0
.text:00000A4B                 mov     eax, [ebp+this]
.text:00000A4E                 push    eax             ; wchar_t *
.text:00000A4F                 lea     ecx, [ebp+var_48] ; this
.text:00000A52                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00000A57                 movzx   ecx, al
.text:00000A5A                 test    ecx, ecx
.text:00000A5C                 jz      short loc_AAB
.text:00000A5E                 lea     ecx, [ebp+var_48] ; this
.text:00000A61                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00000A66                 movzx   edx, al
.text:00000A69                 movzx   eax, byte ptr [ebp+arg_4]
.text:00000A6D                 cmp     edx, eax
.text:00000A6F                 jz      short loc_AA6
.text:00000A71                 mov     esi, esp
.text:00000A73                 push    10Bh            ; dwErrCode
.text:00000A78                 call    dword ptr ds:__imp__SetLastError@4 ; SetLastError(x)
.text:00000A7E                 cmp     esi, esp
.text:00000A80                 call    __RTC_CheckEsp
.text:00000A85                 mov     [ebp+var_89], 0
.text:00000A8C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A93                 lea     ecx, [ebp+var_48] ; this
.text:00000A96                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000A9B                 mov     al, [ebp+var_89]
.text:00000AA1                 jmp     loc_C16
.text:00000AA6 ; ---------------------------------------------------------------------------
.text:00000AA6
.text:00000AA6 loc_AA6:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+6Fj
.text:00000AA6                 jmp     loc_B49
.text:00000AAB ; ---------------------------------------------------------------------------
.text:00000AAB
.text:00000AAB loc_AAB:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+5Cj
.text:00000AAB                 movzx   ecx, byte ptr [ebp+arg_4]
.text:00000AAF                 test    ecx, ecx
.text:00000AB1                 jz      short loc_AE6
.text:00000AB3                 mov     edx, [ebp+this]
.text:00000AB6                 push    edx             ; this
.text:00000AB7                 call    ?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::CreateComplexDir(wchar_t const *)
.text:00000ABC                 movzx   eax, al
.text:00000ABF                 test    eax, eax
.text:00000AC1                 jnz     short loc_AE4
.text:00000AC3                 mov     [ebp+var_8A], 0
.text:00000ACA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000AD1                 lea     ecx, [ebp+var_48] ; this
.text:00000AD4                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000AD9                 mov     al, [ebp+var_8A]
.text:00000ADF                 jmp     loc_C16
.text:00000AE4 ; ---------------------------------------------------------------------------
.text:00000AE4
.text:00000AE4 loc_AE4:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+C1j
.text:00000AE4                 jmp     short loc_B49
.text:00000AE6 ; ---------------------------------------------------------------------------
.text:00000AE6
.text:00000AE6 loc_AE6:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+B1j
.text:00000AE6                 mov     ecx, [ebp+this]
.text:00000AE9                 push    ecx
.text:00000AEA                 call    ?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)
.text:00000AEF                 lea     ecx, [ebp+var_60] ; this
.text:00000AF2                 call    ??0COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::COutFile(void)
.text:00000AF7                 mov     byte ptr [ebp+var_4], 1
.text:00000AFB                 push    1               ; bool
.text:00000AFD                 mov     edx, [ebp+this]
.text:00000B00                 push    edx             ; wchar_t *
.text:00000B01                 lea     ecx, [ebp+var_60] ; this
.text:00000B04                 call    ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::COutFile::Create(wchar_t const *,bool)
.text:00000B09                 movzx   eax, al
.text:00000B0C                 test    eax, eax
.text:00000B0E                 jnz     short loc_B3D
.text:00000B10                 mov     [ebp+var_8B], 0
.text:00000B17                 mov     byte ptr [ebp+var_4], 0
.text:00000B1B                 lea     ecx, [ebp+var_60] ; this
.text:00000B1E                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000B23                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B2A                 lea     ecx, [ebp+var_48] ; this
.text:00000B2D                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000B32                 mov     al, [ebp+var_8B]
.text:00000B38                 jmp     loc_C16
.text:00000B3D ; ---------------------------------------------------------------------------
.text:00000B3D
.text:00000B3D loc_B3D:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+10Ej
.text:00000B3D                 mov     byte ptr [ebp+var_4], 0
.text:00000B41                 lea     ecx, [ebp+var_60] ; this
.text:00000B44                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000B49
.text:00000B49 loc_B49:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong):loc_AA6j
.text:00000B49                                         ; NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong):loc_AE4j
.text:00000B49                 lea     ecx, [ebp+var_78] ; this
.text:00000B4C                 call    ??0COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::COutFile(void)
.text:00000B51                 mov     byte ptr [ebp+var_4], 2
.text:00000B55                 push    2200000h        ; unsigned __int32
.text:00000B5A                 push    3               ; unsigned __int32
.text:00000B5C                 push    2               ; unsigned __int32
.text:00000B5E                 mov     ecx, [ebp+this]
.text:00000B61                 push    ecx             ; wchar_t *
.text:00000B62                 lea     ecx, [ebp+var_78] ; this
.text:00000B65                 call    ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::COutFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:00000B6A                 movzx   edx, al
.text:00000B6D                 test    edx, edx
.text:00000B6F                 jnz     short loc_B9B
.text:00000B71                 mov     [ebp+var_8C], 0
.text:00000B78                 mov     byte ptr [ebp+var_4], 0
.text:00000B7C                 lea     ecx, [ebp+var_78] ; this
.text:00000B7F                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000B84                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000B8B                 lea     ecx, [ebp+var_48] ; this
.text:00000B8E                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000B93                 mov     al, [ebp+var_8C]
.text:00000B99                 jmp     short loc_C16
.text:00000B9B ; ---------------------------------------------------------------------------
.text:00000B9B
.text:00000B9B loc_B9B:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+16Fj
.text:00000B9B                 push    0               ; struct _OVERLAPPED *
.text:00000B9D                 lea     eax, [ebp+BytesReturned]
.text:00000BA3                 push    eax             ; lpBytesReturned
.text:00000BA4                 push    0               ; nOutBufferSize
.text:00000BA6                 push    0               ; lpOutBuffer
.text:00000BA8                 mov     ecx, [ebp+nInBufferSize]
.text:00000BAB                 push    ecx             ; nInBufferSize
.text:00000BAC                 mov     edx, [ebp+lpInBuffer]
.text:00000BAF                 push    edx             ; lpInBuffer
.text:00000BB0                 push    900A4h          ; dwIoControlCode
.text:00000BB5                 lea     ecx, [ebp+var_78] ; this
.text:00000BB8                 call    ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)
.text:00000BBD                 movzx   eax, al
.text:00000BC0                 test    eax, eax
.text:00000BC2                 jnz     short loc_BEE
.text:00000BC4                 mov     [ebp+var_8D], 0
.text:00000BCB                 mov     byte ptr [ebp+var_4], 0
.text:00000BCF                 lea     ecx, [ebp+var_78] ; this
.text:00000BD2                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000BD7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BDE                 lea     ecx, [ebp+var_48] ; this
.text:00000BE1                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000BE6                 mov     al, [ebp+var_8D]
.text:00000BEC                 jmp     short loc_C16
.text:00000BEE ; ---------------------------------------------------------------------------
.text:00000BEE
.text:00000BEE loc_BEE:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+1C2j
.text:00000BEE                 mov     [ebp+var_8E], 1
.text:00000BF5                 mov     byte ptr [ebp+var_4], 0
.text:00000BF9                 lea     ecx, [ebp+var_78] ; this
.text:00000BFC                 call    ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text:00000C01                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C08                 lea     ecx, [ebp+var_48] ; this
.text:00000C0B                 call    ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text:00000C10                 mov     al, [ebp+var_8E]
.text:00000C16
.text:00000C16 loc_C16:                                ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+A1j
.text:00000C16                                         ; NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+DFj ...
.text:00000C16                 push    edx
.text:00000C17                 mov     ecx, ebp
.text:00000C19                 push    eax
.text:00000C1A                 lea     edx, $LN21
.text:00000C20                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C25                 pop     eax
.text:00000C26                 pop     edx
.text:00000C27                 mov     ecx, [ebp+var_C]
.text:00000C2A                 mov     large fs:0, ecx
.text:00000C31                 pop     ecx
.text:00000C32                 pop     edi
.text:00000C33                 pop     esi
.text:00000C34                 add     esp, 90h
.text:00000C3A                 cmp     ebp, esp
.text:00000C3C                 call    __RTC_CheckEsp
.text:00000C41                 mov     esp, ebp
.text:00000C43                 pop     ebp
.text:00000C44                 retn    10h
.text:00000C44 ?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z endp ; sp-analysis failed
.text:00000C44
.text:00000C44 ; ---------------------------------------------------------------------------
.text:00000C47                 align 4
.text:00000C48 $LN21           dd 4                    ; DATA XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+21Ao
.text:00000C4C                 dd offset $LN20
.text:00000C50 $LN20           dd 0FFFFFFB8h, 38h      ; DATA XREF: .text:00000C4Co
.text:00000C58                 dd offset $LN15         ; "fi"
.text:00000C5C                 dd 0FFFFFFA0h, 10h
.text:00000C64                 dd offset $LN16         ; "file"
.text:00000C68                 db 88h, 0FFh
.text:00000C6A                 dw 0FFFFh
.text:00000C6C                 dd 10h
.text:00000C70                 dd offset $LN17         ; "file"
.text:00000C74                 dd 0FFFFFF7Ch, 4
.text:00000C7C                 dd offset $LN18         ; "returnedSize"
.text:00000C80 $LN18           db 'returnedSize',0     ; DATA XREF: .text:00000C7Co
.text:00000C8D $LN17           db 'file',0             ; DATA XREF: .text:00000C70o
.text:00000C92 $LN16           db 'file',0             ; DATA XREF: .text:00000C64o
.text:00000C97 $LN15           db 'fi',0               ; DATA XREF: .text:00000C58o
.text:00000C9A                 align 10h
.text:00000CA0
.text:00000CA0 ; =============== S U B R O U T I N E =======================================
.text:00000CA0
.text:00000CA0 ; Attributes: bp-based frame
.text:00000CA0
.text:00000CA0 ; bool __stdcall NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)
.text:00000CA0 ?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z proc near
.text:00000CA0                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+EAp
.text:00000CA0
.text:00000CA0 var_28          = dword ptr -28h
.text:00000CA0 var_24          = dword ptr -24h
.text:00000CA0 var_20          = dword ptr -20h
.text:00000CA0 var_1C          = dword ptr -1Ch
.text:00000CA0 var_18          = dword ptr -18h
.text:00000CA0 var_14          = dword ptr -14h
.text:00000CA0 var_10          = dword ptr -10h
.text:00000CA0 var_C           = dword ptr -0Ch
.text:00000CA0 var_4           = dword ptr -4
.text:00000CA0 arg_0           = dword ptr  8
.text:00000CA0
.text:00000CA0                 push    ebp
.text:00000CA1                 mov     ebp, esp
.text:00000CA3                 push    0FFFFFFFFh
.text:00000CA5                 push    offset __ehhandler$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z
.text:00000CAA                 mov     eax, large fs:0
.text:00000CB0                 push    eax
.text:00000CB1                 sub     esp, 1Ch
.text:00000CB4                 mov     eax, 0CCCCCCCCh
.text:00000CB9                 mov     [ebp+var_28], eax
.text:00000CBC                 mov     [ebp+var_24], eax
.text:00000CBF                 mov     [ebp+var_20], eax
.text:00000CC2                 mov     [ebp+var_1C], eax
.text:00000CC5                 mov     [ebp+var_18], eax
.text:00000CC8                 mov     [ebp+var_14], eax
.text:00000CCB                 mov     [ebp+var_10], eax
.text:00000CCE                 mov     eax, dword ptr ds:___security_cookie
.text:00000CD3                 xor     eax, ebp
.text:00000CD5                 push    eax             ; wchar_t *
.text:00000CD6                 lea     eax, [ebp+var_C]
.text:00000CD9                 mov     large fs:0, eax
.text:00000CDF                 mov     eax, [ebp+arg_0]
.text:00000CE2                 push    eax
.text:00000CE3                 lea     ecx, [ebp+var_1C]
.text:00000CE6                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000CEB                 mov     [ebp+var_4], 0
.text:00000CF2                 lea     ecx, [ebp+var_1C] ; this
.text:00000CF5                 call    ?ReverseFind_PathSepar@UString@@QBEHXZ ; UString::ReverseFind_PathSepar(void)
.text:00000CFA                 mov     [ebp+var_24], eax
.text:00000CFD                 cmp     [ebp+var_24], 0
.text:00000D01                 jge     short loc_D1B
.text:00000D03                 mov     byte ptr [ebp+var_28+3], 1
.text:00000D07                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D0E                 lea     ecx, [ebp+var_1C] ; this
.text:00000D11                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D16                 mov     al, byte ptr [ebp+var_28+3]
.text:00000D19                 jmp     short loc_D79
.text:00000D1B ; ---------------------------------------------------------------------------
.text:00000D1B
.text:00000D1B loc_D1B:                                ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+61j
.text:00000D1B                 cmp     [ebp+var_24], 2
.text:00000D1F                 jnz     short loc_D4A
.text:00000D21                 lea     ecx, [ebp+var_1C]
.text:00000D24                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D29                 movzx   ecx, word ptr [eax+2]
.text:00000D2D                 cmp     ecx, 3Ah ; ':'
.text:00000D30                 jnz     short loc_D4A
.text:00000D32                 mov     byte ptr [ebp+var_28+2], 1
.text:00000D36                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D3D                 lea     ecx, [ebp+var_1C] ; this
.text:00000D40                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D45                 mov     al, byte ptr [ebp+var_28+2]
.text:00000D48                 jmp     short loc_D79
.text:00000D4A ; ---------------------------------------------------------------------------
.text:00000D4A
.text:00000D4A loc_D4A:                                ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+7Fj
.text:00000D4A                                         ; NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+90j
.text:00000D4A                 mov     edx, [ebp+var_24]
.text:00000D4D                 push    edx             ; unsigned int
.text:00000D4E                 lea     ecx, [ebp+var_1C] ; this
.text:00000D51                 call    ?DeleteFrom@UString@@QAEXI@Z ; UString::DeleteFrom(uint)
.text:00000D56                 lea     ecx, [ebp+var_1C]
.text:00000D59                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000D5E                 push    eax             ; this
.text:00000D5F                 call    ?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::CreateComplexDir(wchar_t const *)
.text:00000D64                 mov     byte ptr [ebp+var_28+1], al
.text:00000D67                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D6E                 lea     ecx, [ebp+var_1C] ; this
.text:00000D71                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D76                 mov     al, byte ptr [ebp+var_28+1]
.text:00000D79
.text:00000D79 loc_D79:                                ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+79j
.text:00000D79                                         ; NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+A8j
.text:00000D79                 push    edx
.text:00000D7A                 mov     ecx, ebp
.text:00000D7C                 push    eax
.text:00000D7D                 lea     edx, $LN9_0
.text:00000D83                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D88                 pop     eax
.text:00000D89                 pop     edx
.text:00000D8A                 mov     ecx, [ebp+var_C]
.text:00000D8D                 mov     large fs:0, ecx
.text:00000D94                 pop     ecx
.text:00000D95                 add     esp, 28h
.text:00000D98                 cmp     ebp, esp
.text:00000D9A                 call    __RTC_CheckEsp
.text:00000D9F                 mov     esp, ebp
.text:00000DA1                 pop     ebp
.text:00000DA2                 retn    4
.text:00000DA2 ?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z endp ; sp-analysis failed
.text:00000DA2
.text:00000DA2 ; ---------------------------------------------------------------------------
.text:00000DA5                 align 4
.text:00000DA8 $LN9_0          dd 1                    ; DATA XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+DDo
.text:00000DAC                 dd offset $LN8_1
.text:00000DB0 $LN8_1          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:00000DACo
.text:00000DB8                 dd offset $LN6          ; "path2"
.text:00000DBC $LN6            db 'path2',0            ; DATA XREF: .text:00000DB8o
.text:00000DC2                 align 4
.text:00000DC2 _text           ends
.text:00000DC2
.rtc$TMZ:00000DC4 ; ===========================================================================
.rtc$TMZ:00000DC4
.rtc$TMZ:00000DC4 ; Segment type: Pure data
.rtc$TMZ:00000DC4 ; Segment permissions: Read
.rtc$TMZ:00000DC4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000DC4                 assume cs:_rtc$TMZ
.rtc$TMZ:00000DC4                 ;org 0DC4h
.rtc$TMZ:00000DC4 ; COMDAT (pick any)
.rtc$TMZ:00000DC4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000DC4 _rtc$TMZ        ends
.rtc$TMZ:00000DC4
.rtc$IMZ:00000DC8 ; ===========================================================================
.rtc$IMZ:00000DC8
.rtc$IMZ:00000DC8 ; Segment type: Pure data
.rtc$IMZ:00000DC8 ; Segment permissions: Read
.rtc$IMZ:00000DC8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000DC8                 assume cs:_rtc$IMZ
.rtc$IMZ:00000DC8                 ;org 0DC8h
.rtc$IMZ:00000DC8 ; COMDAT (pick any)
.rtc$IMZ:00000DC8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000DC8 _rtc$IMZ        ends
.rtc$IMZ:00000DC8
.text:00000DCC ; ===========================================================================
.text:00000DCC
.text:00000DCC ; Segment type: Pure code
.text:00000DCC ; Segment permissions: Read/Execute
.text:00000DCC _text           segment para public 'CODE' use32
.text:00000DCC                 assume cs:_text
.text:00000DCC                 ;org 0DCCh
.text:00000DCC ; COMDAT (pick any)
.text:00000DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DCC
.text:00000DCC ; =============== S U B R O U T I N E =======================================
.text:00000DCC
.text:00000DCC ; Attributes: bp-based frame
.text:00000DCC
.text:00000DCC ; unsigned int __stdcall MyStringLen(const wchar_t *)
.text:00000DCC                 public ?MyStringLen@@YGIPB_W@Z
.text:00000DCC ?MyStringLen@@YGIPB_W@Z proc near       ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+7Cp
.text:00000DCC
.text:00000DCC var_4           = dword ptr -4
.text:00000DCC arg_0           = dword ptr  8
.text:00000DCC
.text:00000DCC                 push    ebp
.text:00000DCD                 mov     ebp, esp
.text:00000DCF                 push    ecx
.text:00000DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DD7                 mov     [ebp+var_4], 0
.text:00000DDE                 jmp     short loc_DE9
.text:00000DE0 ; ---------------------------------------------------------------------------
.text:00000DE0
.text:00000DE0 loc_DE0:                                ; CODE XREF: MyStringLen(wchar_t const *)+2Bj
.text:00000DE0                 mov     eax, [ebp+var_4]
.text:00000DE3                 add     eax, 1
.text:00000DE6                 mov     [ebp+var_4], eax
.text:00000DE9
.text:00000DE9 loc_DE9:                                ; CODE XREF: MyStringLen(wchar_t const *)+12j
.text:00000DE9                 mov     ecx, [ebp+var_4]
.text:00000DEC                 mov     edx, [ebp+arg_0]
.text:00000DEF                 movzx   eax, word ptr [edx+ecx*2]
.text:00000DF3                 test    eax, eax
.text:00000DF5                 jz      short loc_DF9
.text:00000DF7                 jmp     short loc_DE0
.text:00000DF9 ; ---------------------------------------------------------------------------
.text:00000DF9
.text:00000DF9 loc_DF9:                                ; CODE XREF: MyStringLen(wchar_t const *)+29j
.text:00000DF9                 mov     eax, [ebp+var_4]
.text:00000DFC                 mov     esp, ebp
.text:00000DFE                 pop     ebp
.text:00000DFF                 retn    4
.text:00000DFF ?MyStringLen@@YGIPB_W@Z endp
.text:00000DFF
.text:00000DFF ; ---------------------------------------------------------------------------
.text:00000E02                 align 4
.text:00000E02 _text           ends
.text:00000E02
.text:00000E04 ; ===========================================================================
.text:00000E04
.text:00000E04 ; Segment type: Pure code
.text:00000E04 ; Segment permissions: Read/Execute
.text:00000E04 _text           segment para public 'CODE' use32
.text:00000E04                 assume cs:_text
.text:00000E04                 ;org 0E04h
.text:00000E04 ; COMDAT (pick any)
.text:00000E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E04
.text:00000E04 ; =============== S U B R O U T I N E =======================================
.text:00000E04
.text:00000E04 ; Attributes: bp-based frame
.text:00000E04
.text:00000E04 ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:00000E04                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:00000E04 ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+22p
.text:00000E04
.text:00000E04 var_4           = dword ptr -4
.text:00000E04 arg_0           = dword ptr  8
.text:00000E04
.text:00000E04                 push    ebp
.text:00000E05                 mov     ebp, esp
.text:00000E07                 push    ecx
.text:00000E08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E0F                 mov     [ebp+var_4], ecx
.text:00000E12                 mov     eax, [ebp+var_4]
.text:00000E15                 mov     ecx, [ebp+arg_0]
.text:00000E18                 cmp     ecx, [eax+8]
.text:00000E1B                 jbe     short loc_E29
.text:00000E1D                 mov     edx, [ebp+arg_0]
.text:00000E20                 push    edx             ; unsigned int
.text:00000E21                 mov     ecx, [ebp+var_4] ; this
.text:00000E24                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:00000E29
.text:00000E29 loc_E29:                                ; CODE XREF: UString::GetBuf(uint)+17j
.text:00000E29                 mov     eax, [ebp+var_4]
.text:00000E2C                 mov     eax, [eax]
.text:00000E2E                 add     esp, 4
.text:00000E31                 cmp     ebp, esp
.text:00000E33                 call    __RTC_CheckEsp
.text:00000E38                 mov     esp, ebp
.text:00000E3A                 pop     ebp
.text:00000E3B                 retn    4
.text:00000E3B ?GetBuf@UString@@QAEPA_WI@Z endp
.text:00000E3B
.text:00000E3B ; ---------------------------------------------------------------------------
.text:00000E3E                 align 10h
.text:00000E3E _text           ends
.text:00000E3E
.text:00000E40 ; ===========================================================================
.text:00000E40
.text:00000E40 ; Segment type: Pure code
.text:00000E40 ; Segment permissions: Read/Execute
.text:00000E40 _text           segment para public 'CODE' use32
.text:00000E40                 assume cs:_text
.text:00000E40                 ;org 0E40h
.text:00000E40 ; COMDAT (pick any)
.text:00000E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E40
.text:00000E40 ; =============== S U B R O U T I N E =======================================
.text:00000E40
.text:00000E40 ; Attributes: bp-based frame
.text:00000E40
.text:00000E40 ; void __thiscall UString::ReleaseBuf_SetLen(UString *this, unsigned int)
.text:00000E40                 public ?ReleaseBuf_SetLen@UString@@QAEXI@Z
.text:00000E40 ?ReleaseBuf_SetLen@UString@@QAEXI@Z proc near
.text:00000E40                                         ; CODE XREF: NWindows::NFile::GetString(uchar const *,uint,UString &)+7Fp
.text:00000E40
.text:00000E40 var_4           = dword ptr -4
.text:00000E40 arg_0           = dword ptr  8
.text:00000E40
.text:00000E40                 push    ebp
.text:00000E41                 mov     ebp, esp
.text:00000E43                 push    ecx
.text:00000E44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E4B                 mov     [ebp+var_4], ecx
.text:00000E4E                 mov     eax, [ebp+var_4]
.text:00000E51                 mov     ecx, [ebp+arg_0]
.text:00000E54                 mov     [eax+4], ecx
.text:00000E57                 mov     esp, ebp
.text:00000E59                 pop     ebp
.text:00000E5A                 retn    4
.text:00000E5A ?ReleaseBuf_SetLen@UString@@QAEXI@Z endp
.text:00000E5A
.text:00000E5A ; ---------------------------------------------------------------------------
.text:00000E5D                 align 10h
.text:00000E5D _text           ends
.text:00000E5D
.text:00000E60 ; ===========================================================================
.text:00000E60
.text:00000E60 ; Segment type: Pure code
.text:00000E60 ; Segment permissions: Read/Execute
.text:00000E60 _text           segment para public 'CODE' use32
.text:00000E60                 assume cs:_text
.text:00000E60                 ;org 0E60h
.text:00000E60 ; COMDAT (pick any)
.text:00000E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E60
.text:00000E60 ; =============== S U B R O U T I N E =======================================
.text:00000E60
.text:00000E60 ; Attributes: bp-based frame
.text:00000E60
.text:00000E60 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000E60                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000E60 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+47p
.text:00000E60
.text:00000E60 var_4           = dword ptr -4
.text:00000E60
.text:00000E60                 push    ebp
.text:00000E61                 mov     ebp, esp
.text:00000E63                 push    ecx
.text:00000E64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E6B                 mov     [ebp+var_4], ecx
.text:00000E6E                 mov     eax, [ebp+var_4]
.text:00000E71                 xor     ecx, ecx
.text:00000E73                 cmp     dword ptr [eax+4], 0
.text:00000E77                 setz    cl
.text:00000E7A                 mov     al, cl
.text:00000E7C                 mov     esp, ebp
.text:00000E7E                 pop     ebp
.text:00000E7F                 retn
.text:00000E7F ?IsEmpty@UString@@QBE_NXZ endp
.text:00000E7F
.text:00000E7F _text           ends
.text:00000E7F
.text:00000E80 ; ===========================================================================
.text:00000E80
.text:00000E80 ; Segment type: Pure code
.text:00000E80 ; Segment permissions: Read/Execute
.text:00000E80 _text           segment para public 'CODE' use32
.text:00000E80                 assume cs:_text
.text:00000E80                 ;org 0E80h
.text:00000E80 ; COMDAT (pick any)
.text:00000E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000E80                 public ??BUString@@QBEPB_WXZ
.text:00000E80 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+15p
.text:00000E80                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+54p ...
.text:00000E80
.text:00000E80 var_4           = dword ptr -4
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 push    ecx
.text:00000E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E8B                 mov     [ebp+var_4], ecx
.text:00000E8E                 mov     eax, [ebp+var_4]
.text:00000E91                 mov     eax, [eax]
.text:00000E93                 mov     esp, ebp
.text:00000E95                 pop     ebp
.text:00000E96                 retn
.text:00000E96 ??BUString@@QBEPB_WXZ endp
.text:00000E96
.text:00000E96 ; ---------------------------------------------------------------------------
.text:00000E97                 align 4
.text:00000E97 _text           ends
.text:00000E97
.text:00000E98 ; ===========================================================================
.text:00000E98
.text:00000E98 ; Segment type: Pure code
.text:00000E98 ; Segment permissions: Read/Execute
.text:00000E98 _text           segment para public 'CODE' use32
.text:00000E98                 assume cs:_text
.text:00000E98                 ;org 0E98h
.text:00000E98 ; COMDAT (pick any)
.text:00000E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E98
.text:00000E98 ; =============== S U B R O U T I N E =======================================
.text:00000E98
.text:00000E98 ; Attributes: bp-based frame
.text:00000E98
.text:00000E98 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00000E98                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00000E98 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+2Fp
.text:00000E98                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+64p ...
.text:00000E98
.text:00000E98 var_4           = dword ptr -4
.text:00000E98 arg_0           = dword ptr  8
.text:00000E98
.text:00000E98                 push    ebp
.text:00000E99                 mov     ebp, esp
.text:00000E9B                 push    ecx
.text:00000E9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EA3                 mov     [ebp+var_4], ecx
.text:00000EA6                 mov     eax, [ebp+var_4]
.text:00000EA9                 mov     ecx, [eax]
.text:00000EAB                 mov     edx, [ebp+arg_0]
.text:00000EAE                 lea     eax, [ecx+edx*2]
.text:00000EB1                 mov     esp, ebp
.text:00000EB3                 pop     ebp
.text:00000EB4                 retn    4
.text:00000EB4 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00000EB4
.text:00000EB4 ; ---------------------------------------------------------------------------
.text:00000EB7                 align 4
.text:00000EB7 _text           ends
.text:00000EB7
.text$x:00000EB8 ; ===========================================================================
.text$x:00000EB8
.text$x:00000EB8 ; Segment type: Pure code
.text$x:00000EB8 ; Segment permissions: Read/Execute
.text$x:00000EB8 _text$x         segment para public 'CODE' use32
.text$x:00000EB8                 assume cs:_text$x
.text$x:00000EB8                 ;org 0EB8h
.text$x:00000EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000EB8
.text$x:00000EB8 ; =============== S U B R O U T I N E =======================================
.text$x:00000EB8
.text$x:00000EB8
.text$x:00000EB8 __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$0 proc near
.text$x:00000EB8                                         ; DATA XREF: .xdata$x:00000F84o
.text$x:00000EB8                 lea     ecx, [ebp-20h]  ; this
.text$x:00000EBB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000EBB __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$0 endp
.text$x:00000EBB
.text$x:00000EC0
.text$x:00000EC0 ; =============== S U B R O U T I N E =======================================
.text$x:00000EC0
.text$x:00000EC0
.text$x:00000EC0 __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$1 proc near
.text$x:00000EC0                                         ; DATA XREF: .xdata$x:00000F7Co
.text$x:00000EC0                 mov     eax, [ebp-28h]
.text$x:00000EC3                 and     eax, 1
.text$x:00000EC6                 jz      locret_ED8
.text$x:00000ECC                 and     dword ptr [ebp-28h], 0FFFFFFFEh
.text$x:00000ED0                 mov     ecx, [ebp+8]    ; this
.text$x:00000ED3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000ED8 ; ---------------------------------------------------------------------------
.text$x:00000ED8
.text$x:00000ED8 locret_ED8:                             ; CODE XREF: __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$1+6j
.text$x:00000ED8                 retn
.text$x:00000ED8 __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$1 endp
.text$x:00000ED8
.text$x:00000ED9
.text$x:00000ED9 ; =============== S U B R O U T I N E =======================================
.text$x:00000ED9
.text$x:00000ED9
.text$x:00000ED9 __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ proc near
.text$x:00000ED9                                         ; DATA XREF: NWindows::NFile::CReparseAttr::GetPath(void)+5o
.text$x:00000ED9
.text$x:00000ED9 arg_4           = dword ptr  8
.text$x:00000ED9
.text$x:00000ED9                 mov     edx, [esp+arg_4]
.text$x:00000EDD                 lea     eax, [edx+0Ch]
.text$x:00000EE0                 mov     ecx, [edx-20h]
.text$x:00000EE3                 xor     ecx, eax
.text$x:00000EE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000EEA                 mov     eax, offset __ehfuncinfo$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ
.text$x:00000EEF                 jmp     ___CxxFrameHandler3
.text$x:00000EEF __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ endp
.text$x:00000EEF
.text$x:00000EF4
.text$x:00000EF4 ; =============== S U B R O U T I N E =======================================
.text$x:00000EF4
.text$x:00000EF4
.text$x:00000EF4 __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$0 proc near
.text$x:00000EF4                                         ; DATA XREF: .xdata$x:00000FB0o
.text$x:00000EF4                 lea     ecx, [ebp-20h]  ; this
.text$x:00000EF7                 jmp     ??1CInFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CInFile::~CInFile(void)
.text$x:00000EF7 __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$0 endp
.text$x:00000EF7
.text$x:00000EFC
.text$x:00000EFC ; =============== S U B R O U T I N E =======================================
.text$x:00000EFC
.text$x:00000EFC
.text$x:00000EFC __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$1 proc near
.text$x:00000EFC                                         ; DATA XREF: .xdata$x:00000FB8o
.text$x:00000EFC                 lea     ecx, [ebp-30h]
.text$x:00000EFF                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:00000EFF __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$1 endp
.text$x:00000EFF
.text$x:00000F04
.text$x:00000F04 ; =============== S U B R O U T I N E =======================================
.text$x:00000F04
.text$x:00000F04
.text$x:00000F04 __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z proc near
.text$x:00000F04                                         ; DATA XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+5o
.text$x:00000F04
.text$x:00000F04 arg_4           = dword ptr  8
.text$x:00000F04
.text$x:00000F04                 mov     edx, [esp+arg_4]
.text$x:00000F08                 lea     eax, [edx+0Ch]
.text$x:00000F0B                 mov     ecx, [edx-40h]
.text$x:00000F0E                 xor     ecx, eax
.text$x:00000F10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000F15                 mov     eax, offset __ehfuncinfo$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z
.text$x:00000F1A                 jmp     ___CxxFrameHandler3
.text$x:00000F1A __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z endp
.text$x:00000F1A
.text$x:00000F1F
.text$x:00000F1F ; =============== S U B R O U T I N E =======================================
.text$x:00000F1F
.text$x:00000F1F
.text$x:00000F1F __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$0 proc near
.text$x:00000F1F                                         ; DATA XREF: .xdata$x:00000FE4o
.text$x:00000F1F                 lea     ecx, [ebp-48h]  ; this
.text$x:00000F22                 jmp     ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfo::~CFileInfo(void)
.text$x:00000F22 __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$0 endp
.text$x:00000F22
.text$x:00000F27
.text$x:00000F27 ; =============== S U B R O U T I N E =======================================
.text$x:00000F27
.text$x:00000F27
.text$x:00000F27 __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$1 proc near
.text$x:00000F27                                         ; DATA XREF: .xdata$x:00000FECo
.text$x:00000F27                 lea     ecx, [ebp-60h]  ; this
.text$x:00000F2A                 jmp     ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text$x:00000F2A __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$1 endp
.text$x:00000F2A
.text$x:00000F2F
.text$x:00000F2F ; =============== S U B R O U T I N E =======================================
.text$x:00000F2F
.text$x:00000F2F
.text$x:00000F2F __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$2 proc near
.text$x:00000F2F                                         ; DATA XREF: .xdata$x:00000FF4o
.text$x:00000F2F                 lea     ecx, [ebp-78h]  ; this
.text$x:00000F32                 jmp     ??1COutFile@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::COutFile::~COutFile(void)
.text$x:00000F32 __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$2 endp
.text$x:00000F32
.text$x:00000F37
.text$x:00000F37 ; =============== S U B R O U T I N E =======================================
.text$x:00000F37
.text$x:00000F37
.text$x:00000F37 __ehhandler$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z proc near
.text$x:00000F37                                         ; DATA XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+5o
.text$x:00000F37
.text$x:00000F37 arg_4           = dword ptr  8
.text$x:00000F37
.text$x:00000F37                 mov     edx, [esp+arg_4]
.text$x:00000F3B                 lea     eax, [edx+0Ch]
.text$x:00000F3E                 mov     ecx, [edx-90h]
.text$x:00000F44                 xor     ecx, eax
.text$x:00000F46                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000F4B                 mov     eax, offset __ehfuncinfo$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z
.text$x:00000F50                 jmp     ___CxxFrameHandler3
.text$x:00000F50 __ehhandler$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z endp
.text$x:00000F50
.text$x:00000F55
.text$x:00000F55 ; =============== S U B R O U T I N E =======================================
.text$x:00000F55
.text$x:00000F55
.text$x:00000F55 __unwindfunclet$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z$0 proc near
.text$x:00000F55                                         ; DATA XREF: .xdata$x:00001020o
.text$x:00000F55                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000F58                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000F58 __unwindfunclet$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z$0 endp
.text$x:00000F58
.text$x:00000F5D
.text$x:00000F5D ; =============== S U B R O U T I N E =======================================
.text$x:00000F5D
.text$x:00000F5D
.text$x:00000F5D __ehhandler$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z proc near
.text$x:00000F5D                                         ; DATA XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+5o
.text$x:00000F5D
.text$x:00000F5D arg_4           = dword ptr  8
.text$x:00000F5D
.text$x:00000F5D                 mov     edx, [esp+arg_4]
.text$x:00000F61                 lea     eax, [edx+0Ch]
.text$x:00000F64                 mov     ecx, [edx-20h]
.text$x:00000F67                 xor     ecx, eax
.text$x:00000F69                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000F6E                 mov     eax, offset __ehfuncinfo$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z
.text$x:00000F73                 jmp     ___CxxFrameHandler3
.text$x:00000F73 __ehhandler$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z endp
.text$x:00000F73
.text$x:00000F73 _text$x         ends
.text$x:00000F73
.xdata$x:00000F78 ; ===========================================================================
.xdata$x:00000F78
.xdata$x:00000F78 ; Segment type: Pure data
.xdata$x:00000F78 ; Segment permissions: Read
.xdata$x:00000F78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000F78                 assume cs:_xdata$x
.xdata$x:00000F78                 ;org 0F78h
.xdata$x:00000F78 __unwindtable$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ db 0FFh
.xdata$x:00000F78                                         ; DATA XREF: .xdata$x:00000F90o
.xdata$x:00000F79                 db 0FFh
.xdata$x:00000F7A                 db 0FFh
.xdata$x:00000F7B                 db 0FFh
.xdata$x:00000F7C                 dd offset __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$1
.xdata$x:00000F80                 db    0
.xdata$x:00000F81                 db    0
.xdata$x:00000F82                 db    0
.xdata$x:00000F83                 db    0
.xdata$x:00000F84                 dd offset __unwindfunclet$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ$0
.xdata$x:00000F88 __ehfuncinfo$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ db  22h ; "
.xdata$x:00000F88                                         ; DATA XREF: __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ+11o
.xdata$x:00000F89                 db    5
.xdata$x:00000F8A                 db  93h ; ô
.xdata$x:00000F8B                 db  19h
.xdata$x:00000F8C                 db    2
.xdata$x:00000F8D                 db    0
.xdata$x:00000F8E                 db    0
.xdata$x:00000F8F                 db    0
.xdata$x:00000F90                 dd offset __unwindtable$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ
.xdata$x:00000F94                 db    0
.xdata$x:00000F95                 db    0
.xdata$x:00000F96                 db    0
.xdata$x:00000F97                 db    0
.xdata$x:00000F98                 db    0
.xdata$x:00000F99                 db    0
.xdata$x:00000F9A                 db    0
.xdata$x:00000F9B                 db    0
.xdata$x:00000F9C                 db    0
.xdata$x:00000F9D                 db    0
.xdata$x:00000F9E                 db    0
.xdata$x:00000F9F                 db    0
.xdata$x:00000FA0                 db    0
.xdata$x:00000FA1                 db    0
.xdata$x:00000FA2                 db    0
.xdata$x:00000FA3                 db    0
.xdata$x:00000FA4                 db    0
.xdata$x:00000FA5                 db    0
.xdata$x:00000FA6                 db    0
.xdata$x:00000FA7                 db    0
.xdata$x:00000FA8                 db    1
.xdata$x:00000FA9                 db    0
.xdata$x:00000FAA                 db    0
.xdata$x:00000FAB                 db    0
.xdata$x:00000FAC __unwindtable$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z db 0FFh
.xdata$x:00000FAC                                         ; DATA XREF: .xdata$x:00000FC4o
.xdata$x:00000FAD                 db 0FFh
.xdata$x:00000FAE                 db 0FFh
.xdata$x:00000FAF                 db 0FFh
.xdata$x:00000FB0                 dd offset __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$0
.xdata$x:00000FB4                 align 8
.xdata$x:00000FB8                 dd offset __unwindfunclet$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z$1
.xdata$x:00000FBC __ehfuncinfo$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z db  22h ; "
.xdata$x:00000FBC                                         ; DATA XREF: __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z+11o
.xdata$x:00000FBD                 db    5
.xdata$x:00000FBE                 db  93h ; ô
.xdata$x:00000FBF                 db  19h
.xdata$x:00000FC0                 db    2
.xdata$x:00000FC1                 db    0
.xdata$x:00000FC2                 db    0
.xdata$x:00000FC3                 db    0
.xdata$x:00000FC4                 dd offset __unwindtable$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z
.xdata$x:00000FC8                 db    0
.xdata$x:00000FC9                 db    0
.xdata$x:00000FCA                 db    0
.xdata$x:00000FCB                 db    0
.xdata$x:00000FCC                 db    0
.xdata$x:00000FCD                 db    0
.xdata$x:00000FCE                 db    0
.xdata$x:00000FCF                 db    0
.xdata$x:00000FD0                 db    0
.xdata$x:00000FD1                 db    0
.xdata$x:00000FD2                 db    0
.xdata$x:00000FD3                 db    0
.xdata$x:00000FD4                 db    0
.xdata$x:00000FD5                 db    0
.xdata$x:00000FD6                 db    0
.xdata$x:00000FD7                 db    0
.xdata$x:00000FD8                 db    0
.xdata$x:00000FD9                 db    0
.xdata$x:00000FDA                 db    0
.xdata$x:00000FDB                 db    0
.xdata$x:00000FDC                 db    1
.xdata$x:00000FDD                 db    0
.xdata$x:00000FDE                 db    0
.xdata$x:00000FDF                 db    0
.xdata$x:00000FE0 __unwindtable$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z db 0FFh
.xdata$x:00000FE0                                         ; DATA XREF: .xdata$x:00001000o
.xdata$x:00000FE1                 db 0FFh
.xdata$x:00000FE2                 db 0FFh
.xdata$x:00000FE3                 db 0FFh
.xdata$x:00000FE4                 dd offset __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$0
.xdata$x:00000FE8                 db    0
.xdata$x:00000FE9                 db    0
.xdata$x:00000FEA                 db    0
.xdata$x:00000FEB                 db    0
.xdata$x:00000FEC                 dd offset __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$1
.xdata$x:00000FF0                 db    0
.xdata$x:00000FF1                 db    0
.xdata$x:00000FF2                 db    0
.xdata$x:00000FF3                 db    0
.xdata$x:00000FF4                 dd offset __unwindfunclet$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z$2
.xdata$x:00000FF8 __ehfuncinfo$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z db  22h ; "
.xdata$x:00000FF8                                         ; DATA XREF: __ehhandler$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z+14o
.xdata$x:00000FF9                 db    5
.xdata$x:00000FFA                 db  93h ; ô
.xdata$x:00000FFB                 db  19h
.xdata$x:00000FFC                 db    3
.xdata$x:00000FFD                 db    0
.xdata$x:00000FFE                 db    0
.xdata$x:00000FFF                 db    0
.xdata$x:00001000                 dd offset __unwindtable$?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z
.xdata$x:00001004                 db    0
.xdata$x:00001005                 db    0
.xdata$x:00001006                 db    0
.xdata$x:00001007                 db    0
.xdata$x:00001008                 db    0
.xdata$x:00001009                 db    0
.xdata$x:0000100A                 db    0
.xdata$x:0000100B                 db    0
.xdata$x:0000100C                 db    0
.xdata$x:0000100D                 db    0
.xdata$x:0000100E                 db    0
.xdata$x:0000100F                 db    0
.xdata$x:00001010                 db    0
.xdata$x:00001011                 db    0
.xdata$x:00001012                 db    0
.xdata$x:00001013                 db    0
.xdata$x:00001014                 db    0
.xdata$x:00001015                 db    0
.xdata$x:00001016                 db    0
.xdata$x:00001017                 db    0
.xdata$x:00001018                 db    1
.xdata$x:00001019                 db    0
.xdata$x:0000101A                 db    0
.xdata$x:0000101B                 db    0
.xdata$x:0000101C __unwindtable$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z db 0FFh
.xdata$x:0000101C                                         ; DATA XREF: .xdata$x:0000102Co
.xdata$x:0000101D                 db 0FFh
.xdata$x:0000101E                 db 0FFh
.xdata$x:0000101F                 db 0FFh
.xdata$x:00001020                 dd offset __unwindfunclet$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z$0
.xdata$x:00001024 __ehfuncinfo$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z db  22h ; "
.xdata$x:00001024                                         ; DATA XREF: __ehhandler$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z+11o
.xdata$x:00001025                 db    5
.xdata$x:00001026                 db  93h ; ô
.xdata$x:00001027                 db  19h
.xdata$x:00001028                 db    1
.xdata$x:00001029                 db    0
.xdata$x:0000102A                 db    0
.xdata$x:0000102B                 db    0
.xdata$x:0000102C                 dd offset __unwindtable$?CreatePrefixDirOfFile@NIO@NFile@NWindows@@YG_NPB_W@Z
.xdata$x:00001030                 db    0
.xdata$x:00001031                 db    0
.xdata$x:00001032                 db    0
.xdata$x:00001033                 db    0
.xdata$x:00001034                 db    0
.xdata$x:00001035                 db    0
.xdata$x:00001036                 db    0
.xdata$x:00001037                 db    0
.xdata$x:00001038                 db    0
.xdata$x:00001039                 db    0
.xdata$x:0000103A                 db    0
.xdata$x:0000103B                 db    0
.xdata$x:0000103C                 db    0
.xdata$x:0000103D                 db    0
.xdata$x:0000103E                 db    0
.xdata$x:0000103F                 db    0
.xdata$x:00001040                 db    0
.xdata$x:00001041                 db    0
.xdata$x:00001042                 db    0
.xdata$x:00001043                 db    0
.xdata$x:00001044                 db    1
.xdata$x:00001045                 db    0
.xdata$x:00001046                 db    0
.xdata$x:00001047                 db    0
.xdata$x:00001047 _xdata$x        ends
.xdata$x:00001047
.text:00001048 ; ===========================================================================
.text:00001048
.text:00001048 ; Segment type: Pure code
.text:00001048 ; Segment permissions: Read/Execute
.text:00001048 _text           segment para public 'CODE' use32
.text:00001048                 assume cs:_text
.text:00001048                 ;org 1048h
.text:00001048 ; COMDAT (pick any)
.text:00001048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001048
.text:00001048 ; =============== S U B R O U T I N E =======================================
.text:00001048
.text:00001048 ; Attributes: bp-based frame
.text:00001048
.text:00001048 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00001048                 public ??1UString@@QAE@XZ
.text:00001048 ??1UString@@QAE@XZ proc near            ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+BDp
.text:00001048                                         ; NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+71p ...
.text:00001048
.text:00001048 var_8           = dword ptr -8
.text:00001048 var_4           = dword ptr -4
.text:00001048
.text:00001048                 push    ebp
.text:00001049                 mov     ebp, esp
.text:0000104B                 sub     esp, 8
.text:0000104E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001055                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000105C                 mov     [ebp+var_4], ecx
.text:0000105F                 mov     eax, [ebp+var_4]
.text:00001062                 mov     ecx, [eax]
.text:00001064                 mov     [ebp+var_8], ecx
.text:00001067                 mov     edx, [ebp+var_8]
.text:0000106A                 push    edx             ; void *
.text:0000106B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001070                 add     esp, 4
.text:00001073                 add     esp, 8
.text:00001076                 cmp     ebp, esp
.text:00001078                 call    __RTC_CheckEsp
.text:0000107D                 mov     esp, ebp
.text:0000107F                 pop     ebp
.text:00001080                 retn
.text:00001080 ??1UString@@QAE@XZ endp
.text:00001080
.text:00001080 ; ---------------------------------------------------------------------------
.text:00001081                 align 4
.text:00001081 _text           ends
.text:00001081
.text:00001084 ; ===========================================================================
.text:00001084
.text:00001084 ; Segment type: Pure code
.text:00001084 ; Segment permissions: Read/Execute
.text:00001084 _text           segment para public 'CODE' use32
.text:00001084                 assume cs:_text
.text:00001084                 ;org 1084h
.text:00001084 ; COMDAT (pick any)
.text:00001084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001084
.text:00001084 ; =============== S U B R O U T I N E =======================================
.text:00001084
.text:00001084 ; Attributes: bp-based frame
.text:00001084
.text:00001084 ; void __thiscall UString::ReplaceOneCharAtPos(UString *this, unsigned int, wchar_t)
.text:00001084                 public ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z
.text:00001084 ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z proc near
.text:00001084                                         ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+7Bp
.text:00001084
.text:00001084 var_4           = dword ptr -4
.text:00001084 arg_0           = dword ptr  8
.text:00001084 arg_4           = word ptr  0Ch
.text:00001084
.text:00001084                 push    ebp
.text:00001085                 mov     ebp, esp
.text:00001087                 push    ecx
.text:00001088                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000108F                 mov     [ebp+var_4], ecx
.text:00001092                 mov     eax, [ebp+var_4]
.text:00001095                 mov     ecx, [eax]
.text:00001097                 mov     edx, [ebp+arg_0]
.text:0000109A                 mov     ax, [ebp+arg_4]
.text:0000109E                 mov     [ecx+edx*2], ax
.text:000010A2                 mov     esp, ebp
.text:000010A4                 pop     ebp
.text:000010A5                 retn    8
.text:000010A5 ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z endp
.text:000010A5
.text:000010A5 _text           ends
.text:000010A5
.text:000010A8 ; ===========================================================================
.text:000010A8
.text:000010A8 ; Segment type: Pure code
.text:000010A8 ; Segment permissions: Read/Execute
.text:000010A8 _text           segment para public 'CODE' use32
.text:000010A8                 assume cs:_text
.text:000010A8                 ;org 10A8h
.text:000010A8 ; COMDAT (pick any)
.text:000010A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010A8
.text:000010A8 ; =============== S U B R O U T I N E =======================================
.text:000010A8
.text:000010A8 ; Attributes: bp-based frame
.text:000010A8
.text:000010A8 ; bool __thiscall NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(NWindows::NFile::NIO::CFileBase *this, DWORD dwIoControlCode, void *lpOutBuffer, DWORD nOutBufferSize, unsigned __int32 *)
.text:000010A8                 public ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z
.text:000010A8 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z proc near
.text:000010A8                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+BEp
.text:000010A8
.text:000010A8 var_4           = dword ptr -4
.text:000010A8 dwIoControlCode = dword ptr  8
.text:000010A8 lpOutBuffer     = dword ptr  0Ch
.text:000010A8 nOutBufferSize  = dword ptr  10h
.text:000010A8 lpBytesReturned = dword ptr  14h
.text:000010A8
.text:000010A8                 push    ebp
.text:000010A9                 mov     ebp, esp
.text:000010AB                 push    ecx
.text:000010AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010B3                 mov     [ebp+var_4], ecx
.text:000010B6                 push    0               ; struct _OVERLAPPED *
.text:000010B8                 mov     eax, [ebp+lpBytesReturned]
.text:000010BB                 push    eax             ; lpBytesReturned
.text:000010BC                 mov     ecx, [ebp+nOutBufferSize]
.text:000010BF                 push    ecx             ; nOutBufferSize
.text:000010C0                 mov     edx, [ebp+lpOutBuffer]
.text:000010C3                 push    edx             ; lpOutBuffer
.text:000010C4                 push    0               ; nInBufferSize
.text:000010C6                 push    0               ; lpInBuffer
.text:000010C8                 mov     eax, [ebp+dwIoControlCode]
.text:000010CB                 push    eax             ; dwIoControlCode
.text:000010CC                 mov     ecx, [ebp+var_4] ; this
.text:000010CF                 call    ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z ; NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)
.text:000010D4                 add     esp, 4
.text:000010D7                 cmp     ebp, esp
.text:000010D9                 call    __RTC_CheckEsp
.text:000010DE                 mov     esp, ebp
.text:000010E0                 pop     ebp
.text:000010E1                 retn    10h
.text:000010E1 ?DeviceIoControlOut@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXKPAK@Z endp
.text:000010E1
.text:000010E1 _text           ends
.text:000010E1
.text:000010E4 ; ===========================================================================
.text:000010E4
.text:000010E4 ; Segment type: Pure code
.text:000010E4 ; Segment permissions: Read/Execute
.text:000010E4 _text           segment para public 'CODE' use32
.text:000010E4                 assume cs:_text
.text:000010E4                 ;org 10E4h
.text:000010E4 ; COMDAT (pick any)
.text:000010E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010E4
.text:000010E4 ; =============== S U B R O U T I N E =======================================
.text:000010E4
.text:000010E4 ; Attributes: bp-based frame
.text:000010E4
.text:000010E4 ; bool __thiscall NWindows::NFile::NIO::CFileBase::DeviceIoControl(NWindows::NFile::NIO::CFileBase *this, DWORD dwIoControlCode, void *lpInBuffer, DWORD nInBufferSize, void *lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, struct _OVERLAPPED *)
.text:000010E4                 public ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z
.text:000010E4 ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z proc near
.text:000010E4                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+1B8p
.text:000010E4                                         ; NWindows::NFile::NIO::CFileBase::DeviceIoControlOut(ulong,void *,ulong,ulong *)+27p
.text:000010E4
.text:000010E4 var_4           = dword ptr -4
.text:000010E4 dwIoControlCode = dword ptr  8
.text:000010E4 lpInBuffer      = dword ptr  0Ch
.text:000010E4 nInBufferSize   = dword ptr  10h
.text:000010E4 lpOutBuffer     = dword ptr  14h
.text:000010E4 nOutBufferSize  = dword ptr  18h
.text:000010E4 lpBytesReturned = dword ptr  1Ch
.text:000010E4 lpOverlapped    = dword ptr  20h
.text:000010E4
.text:000010E4                 push    ebp
.text:000010E5                 mov     ebp, esp
.text:000010E7                 push    ecx
.text:000010E8                 push    esi
.text:000010E9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010F0                 mov     [ebp+var_4], ecx
.text:000010F3                 mov     esi, esp
.text:000010F5                 mov     eax, [ebp+lpOverlapped]
.text:000010F8                 push    eax             ; lpOverlapped
.text:000010F9                 mov     ecx, [ebp+lpBytesReturned]
.text:000010FC                 push    ecx             ; lpBytesReturned
.text:000010FD                 mov     edx, [ebp+nOutBufferSize]
.text:00001100                 push    edx             ; nOutBufferSize
.text:00001101                 mov     eax, [ebp+lpOutBuffer]
.text:00001104                 push    eax             ; lpOutBuffer
.text:00001105                 mov     ecx, [ebp+nInBufferSize]
.text:00001108                 push    ecx             ; nInBufferSize
.text:00001109                 mov     edx, [ebp+lpInBuffer]
.text:0000110C                 push    edx             ; lpInBuffer
.text:0000110D                 mov     eax, [ebp+dwIoControlCode]
.text:00001110                 push    eax             ; dwIoControlCode
.text:00001111                 mov     ecx, [ebp+var_4]
.text:00001114                 mov     edx, [ecx]
.text:00001116                 push    edx             ; hDevice
.text:00001117                 call    dword ptr ds:__imp__DeviceIoControl@32 ; DeviceIoControl(x,x,x,x,x,x,x,x)
.text:0000111D                 cmp     esi, esp
.text:0000111F                 call    __RTC_CheckEsp
.text:00001124                 push    eax             ; int
.text:00001125                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000112A                 pop     esi
.text:0000112B                 add     esp, 4
.text:0000112E                 cmp     ebp, esp
.text:00001130                 call    __RTC_CheckEsp
.text:00001135                 mov     esp, ebp
.text:00001137                 pop     ebp
.text:00001138                 retn    1Ch
.text:00001138 ?DeviceIoControl@CFileBase@NIO@NFile@NWindows@@QBE_NKPAXK0KPAKPAU_OVERLAPPED@@@Z endp
.text:00001138
.text:00001138 ; ---------------------------------------------------------------------------
.text:0000113B                 align 4
.text:0000113B _text           ends
.text:0000113B
.text:0000113C ; ===========================================================================
.text:0000113C
.text:0000113C ; Segment type: Pure code
.text:0000113C ; Segment permissions: Read/Execute
.text:0000113C _text           segment para public 'CODE' use32
.text:0000113C                 assume cs:_text
.text:0000113C                 ;org 113Ch
.text:0000113C ; COMDAT (pick any)
.text:0000113C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000113C
.text:0000113C ; =============== S U B R O U T I N E =======================================
.text:0000113C
.text:0000113C ; Attributes: bp-based frame
.text:0000113C
.text:0000113C ; bool __stdcall BOOLToBool(int)
.text:0000113C                 public ?BOOLToBool@@YG_NH@Z
.text:0000113C ?BOOLToBool@@YG_NH@Z proc near          ; CODE XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)+41p
.text:0000113C                                         ; NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+29p
.text:0000113C
.text:0000113C arg_0           = dword ptr  8
.text:0000113C
.text:0000113C                 push    ebp
.text:0000113D                 mov     ebp, esp
.text:0000113F                 xor     eax, eax
.text:00001141                 cmp     [ebp+arg_0], 0
.text:00001145                 setnz   al
.text:00001148                 pop     ebp
.text:00001149                 retn    4
.text:00001149 ?BOOLToBool@@YG_NH@Z endp
.text:00001149
.text:00001149 _text           ends
.text:00001149
.text:0000114C ; ===========================================================================
.text:0000114C
.text:0000114C ; Segment type: Pure code
.text:0000114C ; Segment permissions: Read/Execute
.text:0000114C _text           segment para public 'CODE' use32
.text:0000114C                 assume cs:_text
.text:0000114C                 ;org 114Ch
.text:0000114C ; COMDAT (pick any)
.text:0000114C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000114C
.text:0000114C ; =============== S U B R O U T I N E =======================================
.text:0000114C
.text:0000114C ; Attributes: bp-based frame
.text:0000114C
.text:0000114C ; bool __thiscall NWindows::NFile::NIO::CFileBase::GetFileInformation(NWindows::NFile::NIO::CFileBase *this, struct _BY_HANDLE_FILE_INFORMATION *)
.text:0000114C                 public ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z
.text:0000114C ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z proc near
.text:0000114C                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+87p
.text:0000114C
.text:0000114C var_4           = dword ptr -4
.text:0000114C lpFileInformation= dword ptr  8
.text:0000114C
.text:0000114C                 push    ebp
.text:0000114D                 mov     ebp, esp
.text:0000114F                 push    ecx
.text:00001150                 push    esi
.text:00001151                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001158                 mov     [ebp+var_4], ecx
.text:0000115B                 mov     esi, esp
.text:0000115D                 mov     eax, [ebp+lpFileInformation]
.text:00001160                 push    eax             ; lpFileInformation
.text:00001161                 mov     ecx, [ebp+var_4]
.text:00001164                 mov     edx, [ecx]
.text:00001166                 push    edx             ; hFile
.text:00001167                 call    dword ptr ds:__imp__GetFileInformationByHandle@8 ; GetFileInformationByHandle(x,x)
.text:0000116D                 cmp     esi, esp
.text:0000116F                 call    __RTC_CheckEsp
.text:00001174                 push    eax             ; int
.text:00001175                 call    ?BOOLToBool@@YG_NH@Z ; BOOLToBool(int)
.text:0000117A                 pop     esi
.text:0000117B                 add     esp, 4
.text:0000117E                 cmp     ebp, esp
.text:00001180                 call    __RTC_CheckEsp
.text:00001185                 mov     esp, ebp
.text:00001187                 pop     ebp
.text:00001188                 retn    4
.text:00001188 ?GetFileInformation@CFileBase@NIO@NFile@NWindows@@QBE_NPAU_BY_HANDLE_FILE_INFORMATION@@@Z endp
.text:00001188
.text:00001188 ; ---------------------------------------------------------------------------
.text:0000118B                 align 4
.text:0000118B _text           ends
.text:0000118B
.text:0000118C ; ===========================================================================
.text:0000118C
.text:0000118C ; Segment type: Pure code
.text:0000118C ; Segment permissions: Read/Execute
.text:0000118C _text           segment para public 'CODE' use32
.text:0000118C                 assume cs:_text
.text:0000118C                 ;org 118Ch
.text:0000118C ; COMDAT (pick any)
.text:0000118C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000118C
.text:0000118C ; =============== S U B R O U T I N E =======================================
.text:0000118C
.text:0000118C ; Attributes: bp-based frame
.text:0000118C
.text:0000118C ; bool __thiscall NWindows::NFile::NIO::CInFile::OpenReparse(NWindows::NFile::NIO::CInFile *this, const wchar_t *)
.text:0000118C                 public ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z
.text:0000118C ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z proc near
.text:0000118C                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+53p
.text:0000118C
.text:0000118C var_4           = dword ptr -4
.text:0000118C arg_0           = dword ptr  8
.text:0000118C
.text:0000118C                 push    ebp
.text:0000118D                 mov     ebp, esp
.text:0000118F                 push    ecx
.text:00001190                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001197                 mov     [ebp+var_4], ecx
.text:0000119A                 push    2200000h        ; unsigned __int32
.text:0000119F                 push    3               ; unsigned __int32
.text:000011A1                 push    1               ; unsigned __int32
.text:000011A3                 mov     eax, [ebp+arg_0]
.text:000011A6                 push    eax             ; wchar_t *
.text:000011A7                 mov     ecx, [ebp+var_4] ; this
.text:000011AA                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *,ulong,ulong,ulong)
.text:000011AF                 add     esp, 4
.text:000011B2                 cmp     ebp, esp
.text:000011B4                 call    __RTC_CheckEsp
.text:000011B9                 mov     esp, ebp
.text:000011BB                 pop     ebp
.text:000011BC                 retn    4
.text:000011BC ?OpenReparse@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z endp
.text:000011BC
.text:000011BC ; ---------------------------------------------------------------------------
.text:000011BF                 align 10h
.text:000011BF _text           ends
.text:000011BF
.text:000011C0 ; ===========================================================================
.text:000011C0
.text:000011C0 ; Segment type: Pure code
.text:000011C0 ; Segment permissions: Read/Execute
.text:000011C0 _text           segment para public 'CODE' use32
.text:000011C0                 assume cs:_text
.text:000011C0                 ;org 11C0h
.text:000011C0 ; COMDAT (pick any)
.text:000011C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011C0
.text:000011C0 ; =============== S U B R O U T I N E =======================================
.text:000011C0
.text:000011C0 ; Attributes: bp-based frame
.text:000011C0
.text:000011C0 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:000011C0                 public ??0CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:000011C0 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000011C0                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+40p
.text:000011C0
.text:000011C0 var_4           = dword ptr -4
.text:000011C0
.text:000011C0                 push    ebp
.text:000011C1                 mov     ebp, esp
.text:000011C3                 push    ecx
.text:000011C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011CB                 mov     [ebp+var_4], ecx
.text:000011CE                 mov     ecx, [ebp+var_4] ; this
.text:000011D1                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:000011D6                 mov     eax, [ebp+var_4]
.text:000011D9                 add     esp, 4
.text:000011DC                 cmp     ebp, esp
.text:000011DE                 call    __RTC_CheckEsp
.text:000011E3                 mov     esp, ebp
.text:000011E5                 pop     ebp
.text:000011E6                 retn
.text:000011E6 ??0CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:000011E6
.text:000011E6 ; ---------------------------------------------------------------------------
.text:000011E7                 align 4
.text:000011E7 _text           ends
.text:000011E7
.text:000011E8 ; ===========================================================================
.text:000011E8
.text:000011E8 ; Segment type: Pure code
.text:000011E8 ; Segment permissions: Read/Execute
.text:000011E8 _text           segment para public 'CODE' use32
.text:000011E8                 assume cs:_text
.text:000011E8                 ;org 11E8h
.text:000011E8 ; COMDAT (pick any)
.text:000011E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011E8
.text:000011E8 ; =============== S U B R O U T I N E =======================================
.text:000011E8
.text:000011E8 ; Attributes: bp-based frame
.text:000011E8
.text:000011E8 ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:000011E8                 public ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:000011E8 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:000011E8                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::CInFile(void)+11p
.text:000011E8                                         ; NWindows::NFile::NIO::COutFile::COutFile(void)+11p
.text:000011E8
.text:000011E8 var_4           = dword ptr -4
.text:000011E8
.text:000011E8                 push    ebp
.text:000011E9                 mov     ebp, esp
.text:000011EB                 push    ecx
.text:000011EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011F3                 mov     [ebp+var_4], ecx
.text:000011F6                 mov     eax, [ebp+var_4]
.text:000011F9                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000011FF                 mov     eax, [ebp+var_4]
.text:00001202                 mov     esp, ebp
.text:00001204                 pop     ebp
.text:00001205                 retn
.text:00001205 ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:00001205
.text:00001205 ; ---------------------------------------------------------------------------
.text:00001206                 align 4
.text:00001206 _text           ends
.text:00001206
.text:00001208 ; ===========================================================================
.text:00001208
.text:00001208 ; Segment type: Pure code
.text:00001208 ; Segment permissions: Read/Execute
.text:00001208 _text           segment para public 'CODE' use32
.text:00001208                 assume cs:_text
.text:00001208                 ;org 1208h
.text:00001208 ; COMDAT (pick any)
.text:00001208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001208
.text:00001208 ; =============== S U B R O U T I N E =======================================
.text:00001208
.text:00001208 ; Attributes: bp-based frame
.text:00001208
.text:00001208 ; _DWORD __thiscall NWindows::NFile::NIO::CInFile::~CInFile(NWindows::NFile::NIO::CInFile *__hidden this)
.text:00001208                 public ??1CInFile@NIO@NFile@NWindows@@QAE@XZ
.text:00001208 ??1CInFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001208                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+6Dp
.text:00001208                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+E4p ...
.text:00001208
.text:00001208 var_4           = dword ptr -4
.text:00001208
.text:00001208                 push    ebp
.text:00001209                 mov     ebp, esp
.text:0000120B                 push    ecx
.text:0000120C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001213                 mov     [ebp+var_4], ecx
.text:00001216                 mov     ecx, [ebp+var_4] ; this
.text:00001219                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:0000121E                 add     esp, 4
.text:00001221                 cmp     ebp, esp
.text:00001223                 call    __RTC_CheckEsp
.text:00001228                 mov     esp, ebp
.text:0000122A                 pop     ebp
.text:0000122B                 retn
.text:0000122B ??1CInFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000122B
.text:0000122B _text           ends
.text:0000122B
.text:0000122C ; ===========================================================================
.text:0000122C
.text:0000122C ; Segment type: Pure code
.text:0000122C ; Segment permissions: Read/Execute
.text:0000122C _text           segment para public 'CODE' use32
.text:0000122C                 assume cs:_text
.text:0000122C                 ;org 122Ch
.text:0000122C ; COMDAT (pick any)
.text:0000122C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000122C
.text:0000122C ; =============== S U B R O U T I N E =======================================
.text:0000122C
.text:0000122C ; Attributes: bp-based frame
.text:0000122C
.text:0000122C ; _DWORD __thiscall NWindows::NFile::NIO::CFileBase::~CFileBase(NWindows::NFile::NIO::CFileBase *__hidden this)
.text:0000122C                 public ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
.text:0000122C ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ proc near
.text:0000122C                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::~CInFile(void)+11p
.text:0000122C                                         ; NWindows::NFile::NIO::COutFile::~COutFile(void)+11p
.text:0000122C
.text:0000122C var_4           = dword ptr -4
.text:0000122C
.text:0000122C                 push    ebp
.text:0000122D                 mov     ebp, esp
.text:0000122F                 push    ecx
.text:00001230                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001237                 mov     [ebp+var_4], ecx
.text:0000123A                 mov     ecx, [ebp+var_4] ; this
.text:0000123D                 call    ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close(void)
.text:00001242                 add     esp, 4
.text:00001245                 cmp     ebp, esp
.text:00001247                 call    __RTC_CheckEsp
.text:0000124C                 mov     esp, ebp
.text:0000124E                 pop     ebp
.text:0000124F                 retn
.text:0000124F ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000124F
.text:0000124F _text           ends
.text:0000124F
.text:00001250 ; ===========================================================================
.text:00001250
.text:00001250 ; Segment type: Pure code
.text:00001250 ; Segment permissions: Read/Execute
.text:00001250 _text           segment para public 'CODE' use32
.text:00001250                 assume cs:_text
.text:00001250                 ;org 1250h
.text:00001250 ; COMDAT (pick any)
.text:00001250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001250
.text:00001250 ; =============== S U B R O U T I N E =======================================
.text:00001250
.text:00001250 ; Attributes: bp-based frame
.text:00001250
.text:00001250 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::IsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00001250                 public ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00001250 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00001250                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+61p
.text:00001250
.text:00001250 var_4           = dword ptr -4
.text:00001250
.text:00001250                 push    ebp
.text:00001251                 mov     ebp, esp
.text:00001253                 push    ecx
.text:00001254                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000125B                 mov     [ebp+var_4], ecx
.text:0000125E                 push    10h             ; unsigned int
.text:00001260                 mov     ecx, [ebp+var_4] ; this
.text:00001263                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00001268                 add     esp, 4
.text:0000126B                 cmp     ebp, esp
.text:0000126D                 call    __RTC_CheckEsp
.text:00001272                 mov     esp, ebp
.text:00001274                 pop     ebp
.text:00001275                 retn
.text:00001275 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:00001275
.text:00001275 ; ---------------------------------------------------------------------------
.text:00001276                 align 4
.text:00001276 _text           ends
.text:00001276
.text:00001278 ; ===========================================================================
.text:00001278
.text:00001278 ; Segment type: Pure code
.text:00001278 ; Segment permissions: Read/Execute
.text:00001278 _text           segment para public 'CODE' use32
.text:00001278                 assume cs:_text
.text:00001278                 ;org 1278h
.text:00001278 ; COMDAT (pick any)
.text:00001278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001278
.text:00001278 ; =============== S U B R O U T I N E =======================================
.text:00001278
.text:00001278 ; Attributes: bp-based frame
.text:00001278
.text:00001278 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::MatchesMask(NWindows::NFile::NFind::CFileInfoBase *this, unsigned int)
.text:00001278                 public ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
.text:00001278 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z proc near
.text:00001278                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::IsDir(void)+13p
.text:00001278
.text:00001278 var_4           = dword ptr -4
.text:00001278 arg_0           = dword ptr  8
.text:00001278
.text:00001278                 push    ebp
.text:00001279                 mov     ebp, esp
.text:0000127B                 push    ecx
.text:0000127C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001283                 mov     [ebp+var_4], ecx
.text:00001286                 mov     eax, [ebp+var_4]
.text:00001289                 mov     eax, [eax+20h]
.text:0000128C                 and     eax, [ebp+arg_0]
.text:0000128F                 neg     eax
.text:00001291                 sbb     eax, eax
.text:00001293                 neg     eax
.text:00001295                 mov     esp, ebp
.text:00001297                 pop     ebp
.text:00001298                 retn    4
.text:00001298 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z endp
.text:00001298
.text:00001298 ; ---------------------------------------------------------------------------
.text:0000129B                 align 4
.text:0000129B _text           ends
.text:0000129B
.text:0000129C ; ===========================================================================
.text:0000129C
.text:0000129C ; Segment type: Pure code
.text:0000129C ; Segment permissions: Read/Execute
.text:0000129C _text           segment para public 'CODE' use32
.text:0000129C                 assume cs:_text
.text:0000129C                 ;org 129Ch
.text:0000129C ; COMDAT (pick any)
.text:0000129C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000129C
.text:0000129C ; =============== S U B R O U T I N E =======================================
.text:0000129C
.text:0000129C ; Attributes: bp-based frame
.text:0000129C
.text:0000129C ; void __thiscall UString::DeleteFrom(UString *this, unsigned int)
.text:0000129C                 public ?DeleteFrom@UString@@QAEXI@Z
.text:0000129C ?DeleteFrom@UString@@QAEXI@Z proc near  ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+B1p
.text:0000129C
.text:0000129C var_4           = dword ptr -4
.text:0000129C arg_0           = dword ptr  8
.text:0000129C
.text:0000129C                 push    ebp
.text:0000129D                 mov     ebp, esp
.text:0000129F                 push    ecx
.text:000012A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012A7                 mov     [ebp+var_4], ecx
.text:000012AA                 mov     eax, [ebp+var_4]
.text:000012AD                 mov     ecx, [ebp+arg_0]
.text:000012B0                 cmp     ecx, [eax+4]
.text:000012B3                 jnb     short loc_12CC
.text:000012B5                 mov     edx, [ebp+var_4]
.text:000012B8                 mov     eax, [ebp+arg_0]
.text:000012BB                 mov     [edx+4], eax
.text:000012BE                 mov     ecx, [ebp+var_4]
.text:000012C1                 mov     edx, [ecx]
.text:000012C3                 xor     eax, eax
.text:000012C5                 mov     ecx, [ebp+arg_0]
.text:000012C8                 mov     [edx+ecx*2], ax
.text:000012CC
.text:000012CC loc_12CC:                               ; CODE XREF: UString::DeleteFrom(uint)+17j
.text:000012CC                 mov     esp, ebp
.text:000012CE                 pop     ebp
.text:000012CF                 retn    4
.text:000012CF ?DeleteFrom@UString@@QAEXI@Z endp
.text:000012CF
.text:000012CF ; ---------------------------------------------------------------------------
.text:000012D2                 align 4
.text:000012D2 _text           ends
.text:000012D2
.text:000012D4 ; ===========================================================================
.text:000012D4
.text:000012D4 ; Segment type: Pure code
.text:000012D4 ; Segment permissions: Read/Execute
.text:000012D4 _text           segment para public 'CODE' use32
.text:000012D4                 assume cs:_text
.text:000012D4                 ;org 12D4h
.text:000012D4 ; COMDAT (pick any)
.text:000012D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000012D4
.text:000012D4 ; =============== S U B R O U T I N E =======================================
.text:000012D4
.text:000012D4 ; Attributes: bp-based frame
.text:000012D4
.text:000012D4 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:000012D4                 public ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:000012D4 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:000012D4                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+3Fp
.text:000012D4
.text:000012D4 var_4           = dword ptr -4
.text:000012D4
.text:000012D4                 push    ebp
.text:000012D5                 mov     ebp, esp
.text:000012D7                 push    ecx
.text:000012D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012DF                 mov     [ebp+var_4], ecx
.text:000012E2                 mov     ecx, [ebp+var_4] ; this
.text:000012E5                 call    ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)
.text:000012EA                 mov     ecx, [ebp+var_4]
.text:000012ED                 add     ecx, 28h ; '('
.text:000012F0                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000012F5                 mov     eax, [ebp+var_4]
.text:000012F8                 add     esp, 4
.text:000012FB                 cmp     ebp, esp
.text:000012FD                 call    __RTC_CheckEsp
.text:00001302                 mov     esp, ebp
.text:00001304                 pop     ebp
.text:00001305                 retn
.text:00001305 ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00001305
.text:00001305 ; ---------------------------------------------------------------------------
.text:00001306                 align 4
.text:00001306 _text           ends
.text:00001306
.text:00001308 ; ===========================================================================
.text:00001308
.text:00001308 ; Segment type: Pure code
.text:00001308 ; Segment permissions: Read/Execute
.text:00001308 _text           segment para public 'CODE' use32
.text:00001308                 assume cs:_text
.text:00001308                 ;org 1308h
.text:00001308 ; COMDAT (pick any)
.text:00001308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001308
.text:00001308 ; =============== S U B R O U T I N E =======================================
.text:00001308
.text:00001308 ; Attributes: bp-based frame
.text:00001308
.text:00001308 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00001308                 public ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
.text:00001308 ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00001308                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+11p
.text:00001308
.text:00001308 var_4           = dword ptr -4
.text:00001308
.text:00001308                 push    ebp
.text:00001309                 mov     ebp, esp
.text:0000130B                 push    ecx
.text:0000130C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001313                 mov     [ebp+var_4], ecx
.text:00001316                 mov     ecx, [ebp+var_4] ; this
.text:00001319                 call    ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase(void)
.text:0000131E                 mov     eax, [ebp+var_4]
.text:00001321                 add     esp, 4
.text:00001324                 cmp     ebp, esp
.text:00001326                 call    __RTC_CheckEsp
.text:0000132B                 mov     esp, ebp
.text:0000132D                 pop     ebp
.text:0000132E                 retn
.text:0000132E ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ endp
.text:0000132E
.text:0000132E ; ---------------------------------------------------------------------------
.text:0000132F                 align 10h
.text:0000132F _text           ends
.text:0000132F
.text:00001330 ; ===========================================================================
.text:00001330
.text:00001330 ; Segment type: Pure code
.text:00001330 ; Segment permissions: Read/Execute
.text:00001330 _text           segment para public 'CODE' use32
.text:00001330                 assume cs:_text
.text:00001330                 ;org 1330h
.text:00001330 ; COMDAT (pick any)
.text:00001330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001330
.text:00001330 ; =============== S U B R O U T I N E =======================================
.text:00001330
.text:00001330 ; Attributes: bp-based frame
.text:00001330
.text:00001330 ; _DWORD __thiscall NWindows::NFile::NFind::CFileInfo::~CFileInfo(NWindows::NFile::NFind::CFileInfo *__hidden this)
.text:00001330                 public ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
.text:00001330 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ proc near
.text:00001330                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+96p
.text:00001330                                         ; NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+D4p ...
.text:00001330
.text:00001330 var_4           = dword ptr -4
.text:00001330
.text:00001330                 push    ebp
.text:00001331                 mov     ebp, esp
.text:00001333                 push    ecx
.text:00001334                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000133B                 mov     [ebp+var_4], ecx
.text:0000133E                 mov     ecx, [ebp+var_4]
.text:00001341                 add     ecx, 28h ; '('  ; this
.text:00001344                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00001349                 add     esp, 4
.text:0000134C                 cmp     ebp, esp
.text:0000134E                 call    __RTC_CheckEsp
.text:00001353                 mov     esp, ebp
.text:00001355                 pop     ebp
.text:00001356                 retn
.text:00001356 ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ endp
.text:00001356
.text:00001356 ; ---------------------------------------------------------------------------
.text:00001357                 align 4
.text:00001357 _text           ends
.text:00001357
.text:00001358 ; ===========================================================================
.text:00001358
.text:00001358 ; Segment type: Pure code
.text:00001358 ; Segment permissions: Read/Execute
.text:00001358 _text           segment para public 'CODE' use32
.text:00001358                 assume cs:_text
.text:00001358                 ;org 1358h
.text:00001358 ; COMDAT (pick any)
.text:00001358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001358
.text:00001358 ; =============== S U B R O U T I N E =======================================
.text:00001358
.text:00001358 ; Attributes: bp-based frame
.text:00001358
.text:00001358 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00001358                 public ??0COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00001358 ??0COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001358                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+F2p
.text:00001358                                         ; NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+14Cp
.text:00001358
.text:00001358 var_4           = dword ptr -4
.text:00001358
.text:00001358                 push    ebp
.text:00001359                 mov     ebp, esp
.text:0000135B                 push    ecx
.text:0000135C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001363                 mov     [ebp+var_4], ecx
.text:00001366                 mov     ecx, [ebp+var_4] ; this
.text:00001369                 call    ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::CFileBase(void)
.text:0000136E                 mov     eax, [ebp+var_4]
.text:00001371                 add     esp, 4
.text:00001374                 cmp     ebp, esp
.text:00001376                 call    __RTC_CheckEsp
.text:0000137B                 mov     esp, ebp
.text:0000137D                 pop     ebp
.text:0000137E                 retn
.text:0000137E ??0COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:0000137E
.text:0000137E ; ---------------------------------------------------------------------------
.text:0000137F                 align 10h
.text:0000137F _text           ends
.text:0000137F
.text:00001380 ; ===========================================================================
.text:00001380
.text:00001380 ; Segment type: Pure code
.text:00001380 ; Segment permissions: Read/Execute
.text:00001380 _text           segment para public 'CODE' use32
.text:00001380                 assume cs:_text
.text:00001380                 ;org 1380h
.text:00001380 ; COMDAT (pick any)
.text:00001380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001380
.text:00001380 ; =============== S U B R O U T I N E =======================================
.text:00001380
.text:00001380 ; Attributes: bp-based frame
.text:00001380
.text:00001380 ; _DWORD __thiscall NWindows::NFile::NIO::COutFile::~COutFile(NWindows::NFile::NIO::COutFile *__hidden this)
.text:00001380                 public ??1COutFile@NIO@NFile@NWindows@@QAE@XZ
.text:00001380 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ proc near
.text:00001380                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+11Ep
.text:00001380                                         ; NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+144p ...
.text:00001380
.text:00001380 var_4           = dword ptr -4
.text:00001380
.text:00001380                 push    ebp
.text:00001381                 mov     ebp, esp
.text:00001383                 push    ecx
.text:00001384                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000138B                 mov     [ebp+var_4], ecx
.text:0000138E                 mov     ecx, [ebp+var_4] ; this
.text:00001391                 call    ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NIO::CFileBase::~CFileBase(void)
.text:00001396                 add     esp, 4
.text:00001399                 cmp     ebp, esp
.text:0000139B                 call    __RTC_CheckEsp
.text:000013A0                 mov     esp, ebp
.text:000013A2                 pop     ebp
.text:000013A3                 retn
.text:000013A3 ??1COutFile@NIO@NFile@NWindows@@QAE@XZ endp
.text:000013A3
.text:000013A3 _text           ends
.text:000013A3
.text:000013A4 ; ===========================================================================
.text:000013A4
.text:000013A4 ; Segment type: Pure code
.text:000013A4 ; Segment permissions: Read/Execute
.text:000013A4 _text           segment para public 'CODE' use32
.text:000013A4                 assume cs:_text
.text:000013A4                 ;org 13A4h
.text:000013A4 ; COMDAT (pick any)
.text:000013A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013A4
.text:000013A4 ; =============== S U B R O U T I N E =======================================
.text:000013A4
.text:000013A4 ; Attributes: bp-based frame
.text:000013A4
.text:000013A4 ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:000013A4                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:000013A4 ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+38p
.text:000013A4                                         ; CBuffer<uchar>::Alloc(uint)+25p
.text:000013A4
.text:000013A4 var_8           = dword ptr -8
.text:000013A4 var_4           = dword ptr -4
.text:000013A4
.text:000013A4                 push    ebp
.text:000013A5                 mov     ebp, esp
.text:000013A7                 sub     esp, 8
.text:000013AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000013B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013B8                 mov     [ebp+var_4], ecx
.text:000013BB                 mov     eax, [ebp+var_4]
.text:000013BE                 cmp     dword ptr [eax], 0
.text:000013C1                 jz      short loc_13E0
.text:000013C3                 mov     ecx, [ebp+var_4]
.text:000013C6                 mov     edx, [ecx]
.text:000013C8                 mov     [ebp+var_8], edx
.text:000013CB                 mov     eax, [ebp+var_8]
.text:000013CE                 push    eax             ; void *
.text:000013CF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000013D4                 add     esp, 4
.text:000013D7                 mov     ecx, [ebp+var_4]
.text:000013DA                 mov     dword ptr [ecx], 0
.text:000013E0
.text:000013E0 loc_13E0:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000013E0                 mov     edx, [ebp+var_4]
.text:000013E3                 mov     dword ptr [edx+4], 0
.text:000013EA                 add     esp, 8
.text:000013ED                 cmp     ebp, esp
.text:000013EF                 call    __RTC_CheckEsp
.text:000013F4                 mov     esp, ebp
.text:000013F6                 pop     ebp
.text:000013F7                 retn
.text:000013F7 ?Free@?$CBuffer@E@@QAEXXZ endp
.text:000013F7
.text:000013F7 _text           ends
.text:000013F7
.text:000013F8 ; ===========================================================================
.text:000013F8
.text:000013F8 ; Segment type: Pure code
.text:000013F8 ; Segment permissions: Read/Execute
.text:000013F8 _text           segment para public 'CODE' use32
.text:000013F8                 assume cs:_text
.text:000013F8                 ;org 13F8h
.text:000013F8 ; COMDAT (pick any)
.text:000013F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013F8
.text:000013F8 ; =============== S U B R O U T I N E =======================================
.text:000013F8
.text:000013F8 ; Attributes: bp-based frame
.text:000013F8
.text:000013F8 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:000013F8                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:000013F8 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+EBp
.text:000013F8                                         ; NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+110p
.text:000013F8
.text:000013F8 var_4           = dword ptr -4
.text:000013F8
.text:000013F8                 push    ebp
.text:000013F9                 mov     ebp, esp
.text:000013FB                 push    ecx
.text:000013FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001403                 mov     [ebp+var_4], ecx
.text:00001406                 mov     eax, [ebp+var_4]
.text:00001409                 mov     eax, [eax]
.text:0000140B                 mov     esp, ebp
.text:0000140D                 pop     ebp
.text:0000140E                 retn
.text:0000140E ??B?$CBuffer@E@@QAEPAEXZ endp
.text:0000140E
.text:0000140E ; ---------------------------------------------------------------------------
.text:0000140F                 align 10h
.text:0000140F _text           ends
.text:0000140F
.text:00001410 ; ===========================================================================
.text:00001410
.text:00001410 ; Segment type: Pure code
.text:00001410 ; Segment permissions: Read/Execute
.text:00001410 _text           segment para public 'CODE' use32
.text:00001410                 assume cs:_text
.text:00001410                 ;org 1410h
.text:00001410 ; COMDAT (pick any)
.text:00001410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001410
.text:00001410 ; =============== S U B R O U T I N E =======================================
.text:00001410
.text:00001410 ; Attributes: bp-based frame
.text:00001410
.text:00001410 ; public: void __thiscall CBuffer<unsigned char>::Alloc(unsigned int)
.text:00001410                 public ?Alloc@?$CBuffer@E@@QAEXI@Z
.text:00001410 ?Alloc@?$CBuffer@E@@QAEXI@Z proc near   ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+DDp
.text:00001410                                         ; CBuffer<uchar>::CopyFrom(uchar const *,uint)+15p
.text:00001410
.text:00001410 var_8           = dword ptr -8
.text:00001410 var_4           = dword ptr -4
.text:00001410 arg_0           = dword ptr  8
.text:00001410
.text:00001410                 push    ebp
.text:00001411                 mov     ebp, esp
.text:00001413                 sub     esp, 8
.text:00001416                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000141D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001424                 mov     [ebp+var_4], ecx
.text:00001427                 mov     eax, [ebp+var_4]
.text:0000142A                 mov     ecx, [ebp+arg_0]
.text:0000142D                 cmp     ecx, [eax+4]
.text:00001430                 jz      short loc_1460
.text:00001432                 mov     ecx, [ebp+var_4]
.text:00001435                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:0000143A                 cmp     [ebp+arg_0], 0
.text:0000143E                 jz      short loc_1460
.text:00001440                 mov     edx, [ebp+arg_0]
.text:00001443                 push    edx             ; unsigned int
.text:00001444                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001449                 add     esp, 4
.text:0000144C                 mov     [ebp+var_8], eax
.text:0000144F                 mov     eax, [ebp+var_4]
.text:00001452                 mov     ecx, [ebp+var_8]
.text:00001455                 mov     [eax], ecx
.text:00001457                 mov     edx, [ebp+var_4]
.text:0000145A                 mov     eax, [ebp+arg_0]
.text:0000145D                 mov     [edx+4], eax
.text:00001460
.text:00001460 loc_1460:                               ; CODE XREF: CBuffer<uchar>::Alloc(uint)+20j
.text:00001460                                         ; CBuffer<uchar>::Alloc(uint)+2Ej
.text:00001460                 add     esp, 8
.text:00001463                 cmp     ebp, esp
.text:00001465                 call    __RTC_CheckEsp
.text:0000146A                 mov     esp, ebp
.text:0000146C                 pop     ebp
.text:0000146D                 retn    4
.text:0000146D ?Alloc@?$CBuffer@E@@QAEXI@Z endp
.text:0000146D
.text:0000146D _text           ends
.text:0000146D
.text:00001470 ; ===========================================================================
.text:00001470
.text:00001470 ; Segment type: Pure code
.text:00001470 ; Segment permissions: Read/Execute
.text:00001470 _text           segment para public 'CODE' use32
.text:00001470                 assume cs:_text
.text:00001470                 ;org 1470h
.text:00001470 ; COMDAT (pick any)
.text:00001470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001470
.text:00001470 ; =============== S U B R O U T I N E =======================================
.text:00001470
.text:00001470 ; Attributes: bp-based frame
.text:00001470
.text:00001470 ; int __stdcall CBuffer<unsigned char>::CopyFrom(void *Src, size_t Size)
.text:00001470                 public ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
.text:00001470 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
.text:00001470                                         ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+FEp
.text:00001470
.text:00001470 var_4           = dword ptr -4
.text:00001470 Src             = dword ptr  8
.text:00001470 Size            = dword ptr  0Ch
.text:00001470
.text:00001470                 push    ebp
.text:00001471                 mov     ebp, esp
.text:00001473                 push    ecx
.text:00001474                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000147B                 mov     [ebp+var_4], ecx
.text:0000147E                 mov     eax, [ebp+Size]
.text:00001481                 push    eax
.text:00001482                 mov     ecx, [ebp+var_4]
.text:00001485                 call    ?Alloc@?$CBuffer@E@@QAEXI@Z ; CBuffer<uchar>::Alloc(uint)
.text:0000148A                 cmp     [ebp+Size], 0
.text:0000148E                 jz      short loc_14A6
.text:00001490                 mov     ecx, [ebp+Size]
.text:00001493                 push    ecx             ; Size
.text:00001494                 mov     edx, [ebp+Src]
.text:00001497                 push    edx             ; Src
.text:00001498                 mov     eax, [ebp+var_4]
.text:0000149B                 mov     ecx, [eax]
.text:0000149D                 push    ecx             ; Dst
.text:0000149E                 call    _memcpy
.text:000014A3                 add     esp, 0Ch
.text:000014A6
.text:000014A6 loc_14A6:                               ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+1Ej
.text:000014A6                 add     esp, 4
.text:000014A9                 cmp     ebp, esp
.text:000014AB                 call    __RTC_CheckEsp
.text:000014B0                 mov     esp, ebp
.text:000014B2                 pop     ebp
.text:000014B3                 retn    8
.text:000014B3 ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z endp
.text:000014B3
.text:000014B3 ; ---------------------------------------------------------------------------
.text:000014B6                 align 4
.text:000014B6 _text           ends
.text:000014B6
.text:000014B8 ; ===========================================================================
.text:000014B8
.text:000014B8 ; Segment type: Pure code
.text:000014B8 ; Segment permissions: Read/Execute
.text:000014B8 _text           segment para public 'CODE' use32
.text:000014B8                 assume cs:_text
.text:000014B8                 ;org 14B8h
.text:000014B8 ; COMDAT (pick any)
.text:000014B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014B8
.text:000014B8 ; =============== S U B R O U T I N E =======================================
.text:000014B8
.text:000014B8 ; Attributes: bp-based frame
.text:000014B8
.text:000014B8 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(unsigned int)
.text:000014B8                 public ??0?$CObjArray@E@@QAE@I@Z
.text:000014B8 ??0?$CObjArray@E@@QAE@I@Z proc near     ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+9Bp
.text:000014B8
.text:000014B8 var_8           = dword ptr -8
.text:000014B8 var_4           = dword ptr -4
.text:000014B8 arg_0           = dword ptr  8
.text:000014B8
.text:000014B8                 push    ebp
.text:000014B9                 mov     ebp, esp
.text:000014BB                 sub     esp, 8
.text:000014BE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014CC                 mov     [ebp+var_4], ecx
.text:000014CF                 mov     eax, [ebp+var_4]
.text:000014D2                 mov     dword ptr [eax], 0
.text:000014D8                 cmp     [ebp+arg_0], 0
.text:000014DC                 jz      short loc_14F5
.text:000014DE                 mov     ecx, [ebp+arg_0]
.text:000014E1                 push    ecx             ; unsigned int
.text:000014E2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000014E7                 add     esp, 4
.text:000014EA                 mov     [ebp+var_8], eax
.text:000014ED                 mov     edx, [ebp+var_4]
.text:000014F0                 mov     eax, [ebp+var_8]
.text:000014F3                 mov     [edx], eax
.text:000014F5
.text:000014F5 loc_14F5:                               ; CODE XREF: CObjArray<uchar>::CObjArray<uchar>(uint)+24j
.text:000014F5                 mov     eax, [ebp+var_4]
.text:000014F8                 add     esp, 8
.text:000014FB                 cmp     ebp, esp
.text:000014FD                 call    __RTC_CheckEsp
.text:00001502                 mov     esp, ebp
.text:00001504                 pop     ebp
.text:00001505                 retn    4
.text:00001505 ??0?$CObjArray@E@@QAE@I@Z endp
.text:00001505
.text:00001505 _text           ends
.text:00001505
.text:00001508 ; ===========================================================================
.text:00001508
.text:00001508 ; Segment type: Pure code
.text:00001508 ; Segment permissions: Read/Execute
.text:00001508 _text           segment para public 'CODE' use32
.text:00001508                 assume cs:_text
.text:00001508                 ;org 1508h
.text:00001508 ; COMDAT (pick any)
.text:00001508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001508
.text:00001508 ; =============== S U B R O U T I N E =======================================
.text:00001508
.text:00001508 ; Attributes: bp-based frame
.text:00001508
.text:00001508 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00001508                 public ??1?$CObjArray@E@@QAE@XZ
.text:00001508 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+D5p
.text:00001508                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+10Ep ...
.text:00001508
.text:00001508 var_8           = dword ptr -8
.text:00001508 var_4           = dword ptr -4
.text:00001508
.text:00001508                 push    ebp
.text:00001509                 mov     ebp, esp
.text:0000150B                 sub     esp, 8
.text:0000150E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001515                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000151C                 mov     [ebp+var_4], ecx
.text:0000151F                 mov     eax, [ebp+var_4]
.text:00001522                 mov     ecx, [eax]
.text:00001524                 mov     [ebp+var_8], ecx
.text:00001527                 mov     edx, [ebp+var_8]
.text:0000152A                 push    edx             ; void *
.text:0000152B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001530                 add     esp, 4
.text:00001533                 add     esp, 8
.text:00001536                 cmp     ebp, esp
.text:00001538                 call    __RTC_CheckEsp
.text:0000153D                 mov     esp, ebp
.text:0000153F                 pop     ebp
.text:00001540                 retn
.text:00001540 ??1?$CObjArray@E@@QAE@XZ endp
.text:00001540
.text:00001540 ; ---------------------------------------------------------------------------
.text:00001541                 align 4
.text:00001541 _text           ends
.text:00001541
.text:00001544 ; ===========================================================================
.text:00001544
.text:00001544 ; Segment type: Pure code
.text:00001544 ; Segment permissions: Read/Execute
.text:00001544 _text           segment para public 'CODE' use32
.text:00001544                 assume cs:_text
.text:00001544                 ;org 1544h
.text:00001544 ; COMDAT (pick any)
.text:00001544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001544
.text:00001544 ; =============== S U B R O U T I N E =======================================
.text:00001544
.text:00001544 ; Attributes: bp-based frame
.text:00001544
.text:00001544 ; public: __thiscall CObjArray<unsigned char>::operator unsigned char *(void)
.text:00001544                 public ??B?$CObjArray@E@@QAEPAEXZ
.text:00001544 ??B?$CObjArray@E@@QAEPAEXZ proc near    ; CODE XREF: NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+B0p
.text:00001544                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+F5p
.text:00001544
.text:00001544 var_4           = dword ptr -4
.text:00001544
.text:00001544                 push    ebp
.text:00001545                 mov     ebp, esp
.text:00001547                 push    ecx
.text:00001548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000154F                 mov     [ebp+var_4], ecx
.text:00001552                 mov     eax, [ebp+var_4]
.text:00001555                 mov     eax, [eax]
.text:00001557                 mov     esp, ebp
.text:00001559                 pop     ebp
.text:0000155A                 retn
.text:0000155A ??B?$CObjArray@E@@QAEPAEXZ endp
.text:0000155A
.text:0000155A _text           ends
.text:0000155A
UNDEF:00001560 ; ===========================================================================
UNDEF:00001560
UNDEF:00001560 ; Segment type: Externs
UNDEF:00001560 ; UNDEF
UNDEF:00001560                 extrn __RTC_Shutdown:near
UNDEF:00001560                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001564                 extrn __RTC_InitBase:near
UNDEF:00001564                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001568 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00001568                 extrn _memset:near      ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+F1p
UNDEF:0000156C ; bool NWindows::NFile::NName::IsDrivePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:0000156C                 extrn ?IsDrivePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:0000156C                                         ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+5Ap
UNDEF:0000156C                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+35p ...
UNDEF:00001570 ; bool NWindows::NFile::NName::IsSuperPath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00001570                 extrn ?IsSuperPath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00001570                                         ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+41p
UNDEF:00001574 ; bool NWindows::NFile::NName::IsAbsolutePath(NWindows::NFile::NName *__hidden this, const wchar_t *)
UNDEF:00001574                 extrn ?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00001574                                         ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+1Ap
UNDEF:00001578                 extrn __RTC_CheckEsp:near
UNDEF:00001578                                         ; CODE XREF: NWindows::NFile::FillLinkData(CBuffer<uchar> &,wchar_t const *,bool)+20Fp
UNDEF:00001578                                         ; NWindows::NFile::CReparseAttr::Parse(uchar const *,uint)+19Fp ...
UNDEF:0000157C ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:0000157C                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:0000157C                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:00001580 ; int __cdecl _wcscmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:00001580                 extrn __imp__wcscmp:near
UNDEF:00001580                                         ; CODE XREF: NWindows::NFile::CReparseAttr::IsOkNamePair(void)+6Ap
UNDEF:00001580                                         ; NWindows::NFile::CReparseAttr::IsOkNamePair(void)+9Cp
UNDEF:00001580                                         ; DATA XREF: ...
UNDEF:00001584 ; bool __stdcall IsString1PrefixedByString2(const wchar_t *, const wchar_t *)
UNDEF:00001584                 extrn ?IsString1PrefixedByString2@@YG_NPB_W0@Z:near
UNDEF:00001584                                         ; CODE XREF: NWindows::NFile::IsLinkPrefix(wchar_t const *)+Dp
UNDEF:00001588 ; void __thiscall UString::DeleteFrontal(UString *__hidden this, unsigned int)
UNDEF:00001588                 extrn ?DeleteFrontal@UString@@QAEXI@Z:near
UNDEF:00001588                                         ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+9Cp
UNDEF:0000158C ; public: __thiscall UString::UString(class UString const &)
UNDEF:0000158C                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:0000158C                                         ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+53p
UNDEF:0000158C                                         ; NWindows::NFile::CReparseAttr::GetPath(void)+A8p
UNDEF:00001590                 extrn ___security_cookie:near
UNDEF:00001590                                         ; DATA XREF: NWindows::NFile::CReparseAttr::GetPath(void)+2Er
UNDEF:00001590                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+24r ...
UNDEF:00001594                 extrn ___CxxFrameHandler3:near
UNDEF:00001594                                         ; CODE XREF: __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ+16j
UNDEF:00001594                                         ; __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z+16j ...
UNDEF:00001598 ; __fastcall __security_check_cookie(x)
UNDEF:00001598                 extrn @__security_check_cookie@4:near
UNDEF:00001598                                         ; CODE XREF: __ehhandler$?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ+Cp
UNDEF:00001598                                         ; __ehhandler$?GetReparseData@NIO@NFile@NWindows@@YG_NPB_WAAV?$CBuffer@E@@PAU_BY_HANDLE_FILE_INFORMATION@@@Z+Cp ...
UNDEF:0000159C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000159C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000159C                                         ; CODE XREF: NWindows::NFile::CReparseAttr::GetPath(void)+CFp
UNDEF:0000159C                                         ; NWindows::NFile::NIO::GetReparseData(wchar_t const *,CBuffer<uchar> &,_BY_HANDLE_FILE_INFORMATION *)+12Fp ...
UNDEF:000015A0 ; void __cdecl operator delete(void *)
UNDEF:000015A0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:000015A0                                         ; CBuffer<uchar>::Free(void)+2Bp ...
UNDEF:000015A4 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
UNDEF:000015A4                 extrn __imp__DeviceIoControl@32:near
UNDEF:000015A4                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)+33p
UNDEF:000015A4                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::DeviceIoControl(ulong,void *,ulong,void *,ulong,ulong *,_OVERLAPPED *)+33r
UNDEF:000015A8 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
UNDEF:000015A8                 extrn __imp__GetFileInformationByHandle@8:near
UNDEF:000015A8                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+1Bp
UNDEF:000015A8                                         ; DATA XREF: NWindows::NFile::NIO::CFileBase::GetFileInformation(_BY_HANDLE_FILE_INFORMATION *)+1Br
UNDEF:000015AC ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *, unsigned __int32, unsigned __int32, unsigned __int32)
UNDEF:000015AC                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z:near
UNDEF:000015AC                                         ; CODE XREF: NWindows::NFile::NIO::CInFile::OpenReparse(wchar_t const *)+1Ep
UNDEF:000015B0 ; bool __thiscall NWindows::NFile::NIO::CFileBase::Close(NWindows::NFile::NIO::CFileBase *__hidden this)
UNDEF:000015B0                 extrn ?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:near
UNDEF:000015B0                                         ; CODE XREF: NWindows::NFile::NIO::CFileBase::~CFileBase(void)+11p
UNDEF:000015B4 ; bool __thiscall NWindows::NFile::NIO::COutFile::Open(NWindows::NFile::NIO::COutFile *__hidden this, const wchar_t *, unsigned __int32, unsigned __int32, unsigned __int32)
UNDEF:000015B4                 extrn ?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WKKK@Z:near
UNDEF:000015B4                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+165p
UNDEF:000015B8 ; bool __thiscall NWindows::NFile::NIO::COutFile::Create(NWindows::NFile::NIO::COutFile *__hidden this, const wchar_t *, bool)
UNDEF:000015B8                 extrn ?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z:near
UNDEF:000015B8                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+104p
UNDEF:000015BC ; bool NWindows::NFile::NDir::CreateComplexDir(NWindows::NFile::NDir *__hidden this, const wchar_t *)
UNDEF:000015BC                 extrn ?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:000015BC                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+B7p
UNDEF:000015BC                                         ; NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+BFp
UNDEF:000015C0 ; void __stdcall SetLastError(DWORD dwErrCode)
UNDEF:000015C0                 extrn __imp__SetLastError@4:near
UNDEF:000015C0                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+78p
UNDEF:000015C0                                         ; DATA XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+78r
UNDEF:000015C4 ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *__hidden this, const wchar_t *)
UNDEF:000015C4                 extrn ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:000015C4                                         ; CODE XREF: NWindows::NFile::NIO::SetReparseData(wchar_t const *,bool,void const *,ulong)+52p
UNDEF:000015C8 ; int __thiscall UString::ReverseFind_PathSepar(UString *__hidden this)
UNDEF:000015C8                 extrn ?ReverseFind_PathSepar@UString@@QBEHXZ:near
UNDEF:000015C8                                         ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+55p
UNDEF:000015CC ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000015CC                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000015CC                                         ; CODE XREF: NWindows::NFile::NIO::CreatePrefixDirOfFile(wchar_t const *)+46p
UNDEF:000015D0 ; public: __thiscall UString::UString(void)
UNDEF:000015D0                 extrn ??0UString@@QAE@XZ:near
UNDEF:000015D0                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfo::CFileInfo(void)+1Cp
UNDEF:000015D4 ; void __thiscall NWindows::NFile::NFind::CFileInfoBase::ClearBase(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
UNDEF:000015D4                 extrn ?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:near
UNDEF:000015D4                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase(void)+11p
UNDEF:000015D8 ; void *__cdecl operator new(unsigned int)
UNDEF:000015D8                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CBuffer<uchar>::Alloc(uint)+34p
UNDEF:000015D8                                         ; CObjArray<uchar>::CObjArray<uchar>(uint)+2Ap
UNDEF:000015DC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000015DC                 extrn _memcpy:near      ; CODE XREF: CBuffer<uchar>::CopyFrom(uchar const *,uint)+2Ep
UNDEF:000015DC
UNDEF:000015DC