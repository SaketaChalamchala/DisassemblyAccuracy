.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : BD5CAE6D42083E8E020F1832C90020A6
.text:00000000 ; Input CRC32 : D7D84FC5
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\TempFiles.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __thiscall CTempFiles::Clear(wchar_t *this)
.text:00000000                 public ?Clear@CTempFiles@@AAEXXZ
.text:00000000 ?Clear@CTempFiles@@AAEXXZ proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx             ; wchar_t *
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E
.text:0000000E loc_E:                                  ; CODE XREF: CTempFiles::Clear(void)+3Aj
.text:0000000E                 mov     ecx, [ebp+var_4]
.text:00000011                 call    ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty(void)
.text:00000016                 movzx   eax, al
.text:00000019                 test    eax, eax
.text:0000001B                 jnz     short loc_3C
.text:0000001D                 mov     ecx, [ebp+var_4]
.text:00000020                 call    ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back(void)
.text:00000025                 mov     ecx, eax
.text:00000027                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000002C                 push    eax             ; this
.text:0000002D                 call    ?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::DeleteFileAlways(wchar_t const *)
.text:00000032                 mov     ecx, [ebp+var_4]
.text:00000035                 call    ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack(void)
.text:0000003A                 jmp     short loc_E
.text:0000003C ; ---------------------------------------------------------------------------
.text:0000003C
.text:0000003C loc_3C:                                 ; CODE XREF: CTempFiles::Clear(void)+1Bj
.text:0000003C                 add     esp, 4
.text:0000003F                 cmp     ebp, esp
.text:00000041                 call    __RTC_CheckEsp
.text:00000046                 mov     esp, ebp
.text:00000048                 pop     ebp
.text:00000049                 retn
.text:00000049 ?Clear@CTempFiles@@AAEXXZ endp ; sp-analysis failed
.text:00000049
.text:00000049 ; ---------------------------------------------------------------------------
.text:0000004A                 align 4
.text:0000004A _text           ends
.text:0000004A
.rtc$TMZ:0000004C ; ===========================================================================
.rtc$TMZ:0000004C
.rtc$TMZ:0000004C ; Segment type: Pure data
.rtc$TMZ:0000004C ; Segment permissions: Read
.rtc$TMZ:0000004C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000004C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000004C                 ;org 4Ch
.rtc$TMZ:0000004C ; COMDAT (pick any)
.rtc$TMZ:0000004C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000004C _rtc$TMZ        ends
.rtc$TMZ:0000004C
.rtc$IMZ:00000050 ; ===========================================================================
.rtc$IMZ:00000050
.rtc$IMZ:00000050 ; Segment type: Pure data
.rtc$IMZ:00000050 ; Segment permissions: Read
.rtc$IMZ:00000050 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000050                 assume cs:_rtc$IMZ
.rtc$IMZ:00000050                 ;org 50h
.rtc$IMZ:00000050 ; COMDAT (pick any)
.rtc$IMZ:00000050 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000050 _rtc$IMZ        ends
.rtc$IMZ:00000050
.text:00000054 ; ===========================================================================
.text:00000054
.text:00000054 ; Segment type: Pure code
.text:00000054 ; Segment permissions: Read/Execute
.text:00000054 _text           segment para public 'CODE' use32
.text:00000054                 assume cs:_text
.text:00000054                 ;org 54h
.text:00000054 ; COMDAT (pick any)
.text:00000054                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000054
.text:00000054 ; =============== S U B R O U T I N E =======================================
.text:00000054
.text:00000054 ; Attributes: bp-based frame
.text:00000054
.text:00000054 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000054                 public ??BUString@@QBEPB_WXZ
.text:00000054 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: CTempFiles::Clear(void)+27p
.text:00000054
.text:00000054 var_4           = dword ptr -4
.text:00000054
.text:00000054                 push    ebp
.text:00000055                 mov     ebp, esp
.text:00000057                 push    ecx
.text:00000058                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000005F                 mov     [ebp+var_4], ecx
.text:00000062                 mov     eax, [ebp+var_4]
.text:00000065                 mov     eax, [eax]
.text:00000067                 mov     esp, ebp
.text:00000069                 pop     ebp
.text:0000006A                 retn
.text:0000006A ??BUString@@QBEPB_WXZ endp
.text:0000006A
.text:0000006A ; ---------------------------------------------------------------------------
.text:0000006B                 align 4
.text:0000006B _text           ends
.text:0000006B
.text:0000006C ; ===========================================================================
.text:0000006C
.text:0000006C ; Segment type: Pure code
.text:0000006C ; Segment permissions: Read/Execute
.text:0000006C _text           segment para public 'CODE' use32
.text:0000006C                 assume cs:_text
.text:0000006C                 ;org 6Ch
.text:0000006C ; COMDAT (pick any)
.text:0000006C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000006C
.text:0000006C ; =============== S U B R O U T I N E =======================================
.text:0000006C
.text:0000006C ; Attributes: bp-based frame
.text:0000006C
.text:0000006C ; public: bool __thiscall CObjectVector<class UString>::IsEmpty(void)const
.text:0000006C                 public ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
.text:0000006C ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ proc near
.text:0000006C                                         ; CODE XREF: CTempFiles::Clear(void)+11p
.text:0000006C
.text:0000006C var_4           = dword ptr -4
.text:0000006C
.text:0000006C                 push    ebp
.text:0000006D                 mov     ebp, esp
.text:0000006F                 push    ecx
.text:00000070                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000077                 mov     [ebp+var_4], ecx
.text:0000007A                 mov     ecx, [ebp+var_4]
.text:0000007D                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00000082                 add     esp, 4
.text:00000085                 cmp     ebp, esp
.text:00000087                 call    __RTC_CheckEsp
.text:0000008C                 mov     esp, ebp
.text:0000008E                 pop     ebp
.text:0000008F                 retn
.text:0000008F ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ endp
.text:0000008F
.text:0000008F _text           ends
.text:0000008F
.text:00000090 ; ===========================================================================
.text:00000090
.text:00000090 ; Segment type: Pure code
.text:00000090 ; Segment permissions: Read/Execute
.text:00000090 _text           segment para public 'CODE' use32
.text:00000090                 assume cs:_text
.text:00000090                 ;org 90h
.text:00000090 ; COMDAT (pick any)
.text:00000090                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; public: class UString & __thiscall CObjectVector<class UString>::Back(void)
.text:00000090                 public ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
.text:00000090 ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ proc near
.text:00000090                                         ; CODE XREF: CTempFiles::Clear(void)+20p
.text:00000090
.text:00000090 var_4           = dword ptr -4
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 push    ecx
.text:00000094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000009B                 mov     [ebp+var_4], ecx
.text:0000009E                 mov     ecx, [ebp+var_4]
.text:000000A1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000000A6                 sub     eax, 1
.text:000000A9                 push    eax
.text:000000AA                 mov     ecx, [ebp+var_4]
.text:000000AD                 call    ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[](uint)
.text:000000B2                 add     esp, 4
.text:000000B5                 cmp     ebp, esp
.text:000000B7                 call    __RTC_CheckEsp
.text:000000BC                 mov     esp, ebp
.text:000000BE                 pop     ebp
.text:000000BF                 retn
.text:000000BF ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ endp
.text:000000BF
.text:000000BF _text           ends
.text:000000BF
.text:000000C0 ; ===========================================================================
.text:000000C0
.text:000000C0 ; Segment type: Pure code
.text:000000C0 ; Segment permissions: Read/Execute
.text:000000C0 _text           segment para public 'CODE' use32
.text:000000C0                 assume cs:_text
.text:000000C0                 ;org 0C0h
.text:000000C0 ; COMDAT (pick any)
.text:000000C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; public: void __thiscall CObjectVector<class UString>::DeleteBack(void)
.text:000000C0                 public ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
.text:000000C0 ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ proc near
.text:000000C0                                         ; CODE XREF: CTempFiles::Clear(void)+35p
.text:000000C0
.text:000000C0 var_10          = dword ptr -10h
.text:000000C0 var_C           = dword ptr -0Ch
.text:000000C0 var_8           = dword ptr -8
.text:000000C0 var_4           = dword ptr -4
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 sub     esp, 10h
.text:000000C6                 mov     eax, 0CCCCCCCCh
.text:000000CB                 mov     [ebp+var_10], eax
.text:000000CE                 mov     [ebp+var_C], eax
.text:000000D1                 mov     [ebp+var_8], eax
.text:000000D4                 mov     [ebp+var_4], eax
.text:000000D7                 mov     [ebp+var_4], ecx
.text:000000DA                 mov     ecx, [ebp+var_4]
.text:000000DD                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000000E2                 sub     eax, 1
.text:000000E5                 push    eax
.text:000000E6                 mov     ecx, [ebp+var_4]
.text:000000E9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000000EE                 mov     eax, [eax]
.text:000000F0                 mov     [ebp+var_C], eax
.text:000000F3                 mov     ecx, [ebp+var_C]
.text:000000F6                 mov     [ebp+var_8], ecx
.text:000000F9                 cmp     [ebp+var_8], 0
.text:000000FD                 jz      short loc_10E
.text:000000FF                 push    1
.text:00000101                 mov     ecx, [ebp+var_8]
.text:00000104                 call    ??_GUString@@QAEPAXI@Z ; UString::`scalar deleting destructor'(uint)
.text:00000109                 mov     [ebp+var_10], eax
.text:0000010C                 jmp     short loc_115
.text:0000010E ; ---------------------------------------------------------------------------
.text:0000010E
.text:0000010E loc_10E:                                ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+3Dj
.text:0000010E                 mov     [ebp+var_10], 0
.text:00000115
.text:00000115 loc_115:                                ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+4Cj
.text:00000115                 mov     ecx, [ebp+var_4]
.text:00000118                 call    ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::DeleteBack(void)
.text:0000011D                 add     esp, 10h
.text:00000120                 cmp     ebp, esp
.text:00000122                 call    __RTC_CheckEsp
.text:00000127                 mov     esp, ebp
.text:00000129                 pop     ebp
.text:0000012A                 retn
.text:0000012A ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ endp
.text:0000012A
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012B                 align 4
.text:0000012B _text           ends
.text:0000012B
.text:0000012C ; ===========================================================================
.text:0000012C
.text:0000012C ; Segment type: Pure code
.text:0000012C ; Segment permissions: Read/Execute
.text:0000012C _text           segment para public 'CODE' use32
.text:0000012C                 assume cs:_text
.text:0000012C                 ;org 12Ch
.text:0000012C ; COMDAT (pick any)
.text:0000012C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000012C
.text:0000012C ; =============== S U B R O U T I N E =======================================
.text:0000012C
.text:0000012C ; Attributes: bp-based frame
.text:0000012C
.text:0000012C ; public: void * __thiscall UString::`scalar deleting destructor'(unsigned int)
.text:0000012C                 public ??_GUString@@QAEPAXI@Z
.text:0000012C ??_GUString@@QAEPAXI@Z proc near        ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+44p
.text:0000012C
.text:0000012C var_4           = dword ptr -4
.text:0000012C arg_0           = dword ptr  8
.text:0000012C
.text:0000012C                 push    ebp
.text:0000012D                 mov     ebp, esp
.text:0000012F                 push    ecx
.text:00000130                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000137                 mov     [ebp+var_4], ecx
.text:0000013A                 mov     ecx, [ebp+var_4] ; this
.text:0000013D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000142                 mov     eax, [ebp+arg_0]
.text:00000145                 and     eax, 1
.text:00000148                 jz      short loc_156
.text:0000014A                 mov     ecx, [ebp+var_4]
.text:0000014D                 push    ecx             ; void *
.text:0000014E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000153                 add     esp, 4
.text:00000156
.text:00000156 loc_156:                                ; CODE XREF: UString::`scalar deleting destructor'(uint)+1Cj
.text:00000156                 mov     eax, [ebp+var_4]
.text:00000159                 add     esp, 4
.text:0000015C                 cmp     ebp, esp
.text:0000015E                 call    __RTC_CheckEsp
.text:00000163                 mov     esp, ebp
.text:00000165                 pop     ebp
.text:00000166                 retn    4
.text:00000166 ??_GUString@@QAEPAXI@Z endp
.text:00000166
.text:00000166 ; ---------------------------------------------------------------------------
.text:00000169                 align 4
.text:00000169 _text           ends
.text:00000169
.text:0000016C ; ===========================================================================
.text:0000016C
.text:0000016C ; Segment type: Pure code
.text:0000016C ; Segment permissions: Read/Execute
.text:0000016C _text           segment para public 'CODE' use32
.text:0000016C                 assume cs:_text
.text:0000016C                 ;org 16Ch
.text:0000016C ; COMDAT (pick any)
.text:0000016C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000016C
.text:0000016C ; =============== S U B R O U T I N E =======================================
.text:0000016C
.text:0000016C ; Attributes: bp-based frame
.text:0000016C
.text:0000016C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000016C                 public ??1UString@@QAE@XZ
.text:0000016C ??1UString@@QAE@XZ proc near            ; CODE XREF: UString::`scalar deleting destructor'(uint)+11p
.text:0000016C
.text:0000016C var_8           = dword ptr -8
.text:0000016C var_4           = dword ptr -4
.text:0000016C
.text:0000016C                 push    ebp
.text:0000016D                 mov     ebp, esp
.text:0000016F                 sub     esp, 8
.text:00000172                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000179                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000180                 mov     [ebp+var_4], ecx
.text:00000183                 mov     eax, [ebp+var_4]
.text:00000186                 mov     ecx, [eax]
.text:00000188                 mov     [ebp+var_8], ecx
.text:0000018B                 mov     edx, [ebp+var_8]
.text:0000018E                 push    edx             ; void *
.text:0000018F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000194                 add     esp, 4
.text:00000197                 add     esp, 8
.text:0000019A                 cmp     ebp, esp
.text:0000019C                 call    __RTC_CheckEsp
.text:000001A1                 mov     esp, ebp
.text:000001A3                 pop     ebp
.text:000001A4                 retn
.text:000001A4 ??1UString@@QAE@XZ endp
.text:000001A4
.text:000001A4 ; ---------------------------------------------------------------------------
.text:000001A5                 align 4
.text:000001A5 _text           ends
.text:000001A5
.text:000001A8 ; ===========================================================================
.text:000001A8
.text:000001A8 ; Segment type: Pure code
.text:000001A8 ; Segment permissions: Read/Execute
.text:000001A8 _text           segment para public 'CODE' use32
.text:000001A8                 assume cs:_text
.text:000001A8                 ;org 1A8h
.text:000001A8 ; COMDAT (pick any)
.text:000001A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000001A8
.text:000001A8 ; =============== S U B R O U T I N E =======================================
.text:000001A8
.text:000001A8 ; Attributes: bp-based frame
.text:000001A8
.text:000001A8 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000001A8                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000001A8 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000001A8                                         ; CODE XREF: CObjectVector<UString>::Back(void)+11p
.text:000001A8                                         ; CObjectVector<UString>::DeleteBack(void)+1Dp
.text:000001A8
.text:000001A8 var_4           = dword ptr -4
.text:000001A8
.text:000001A8                 push    ebp
.text:000001A9                 mov     ebp, esp
.text:000001AB                 push    ecx
.text:000001AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001B3                 mov     [ebp+var_4], ecx
.text:000001B6                 mov     eax, [ebp+var_4]
.text:000001B9                 mov     eax, [eax+4]
.text:000001BC                 mov     esp, ebp
.text:000001BE                 pop     ebp
.text:000001BF                 retn
.text:000001BF ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000001BF
.text:000001BF _text           ends
.text:000001BF
.text:000001C0 ; ===========================================================================
.text:000001C0
.text:000001C0 ; Segment type: Pure code
.text:000001C0 ; Segment permissions: Read/Execute
.text:000001C0 _text           segment para public 'CODE' use32
.text:000001C0                 assume cs:_text
.text:000001C0                 ;org 1C0h
.text:000001C0 ; COMDAT (pick any)
.text:000001C0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000001C0
.text:000001C0 ; =============== S U B R O U T I N E =======================================
.text:000001C0
.text:000001C0 ; Attributes: bp-based frame
.text:000001C0
.text:000001C0 ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:000001C0                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:000001C0 ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:000001C0                                         ; CODE XREF: CObjectVector<UString>::IsEmpty(void)+11p
.text:000001C0
.text:000001C0 var_4           = dword ptr -4
.text:000001C0
.text:000001C0                 push    ebp
.text:000001C1                 mov     ebp, esp
.text:000001C3                 push    ecx
.text:000001C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001CB                 mov     [ebp+var_4], ecx
.text:000001CE                 mov     eax, [ebp+var_4]
.text:000001D1                 xor     ecx, ecx
.text:000001D3                 cmp     dword ptr [eax+4], 0
.text:000001D7                 setz    cl
.text:000001DA                 mov     al, cl
.text:000001DC                 mov     esp, ebp
.text:000001DE                 pop     ebp
.text:000001DF                 retn
.text:000001DF ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:000001DF
.text:000001DF _text           ends
.text:000001DF
.text:000001E0 ; ===========================================================================
.text:000001E0
.text:000001E0 ; Segment type: Pure code
.text:000001E0 ; Segment permissions: Read/Execute
.text:000001E0 _text           segment para public 'CODE' use32
.text:000001E0                 assume cs:_text
.text:000001E0                 ;org 1E0h
.text:000001E0 ; COMDAT (pick any)
.text:000001E0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; public: void __thiscall CRecordVector<void *>::DeleteBack(void)
.text:000001E0                 public ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
.text:000001E0 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ proc near
.text:000001E0                                         ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+58p
.text:000001E0
.text:000001E0 var_4           = dword ptr -4
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 push    ecx
.text:000001E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001EB                 mov     [ebp+var_4], ecx
.text:000001EE                 mov     eax, [ebp+var_4]
.text:000001F1                 mov     ecx, [eax+4]
.text:000001F4                 sub     ecx, 1
.text:000001F7                 mov     edx, [ebp+var_4]
.text:000001FA                 mov     [edx+4], ecx
.text:000001FD                 mov     esp, ebp
.text:000001FF                 pop     ebp
.text:00000200                 retn
.text:00000200 ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ endp
.text:00000200
.text:00000200 ; ---------------------------------------------------------------------------
.text:00000201                 align 4
.text:00000201 _text           ends
.text:00000201
.text:00000204 ; ===========================================================================
.text:00000204
.text:00000204 ; Segment type: Pure code
.text:00000204 ; Segment permissions: Read/Execute
.text:00000204 _text           segment para public 'CODE' use32
.text:00000204                 assume cs:_text
.text:00000204                 ;org 204h
.text:00000204 ; COMDAT (pick any)
.text:00000204                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000204
.text:00000204 ; =============== S U B R O U T I N E =======================================
.text:00000204
.text:00000204 ; Attributes: bp-based frame
.text:00000204
.text:00000204 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00000204                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00000204 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00000204                                         ; CODE XREF: CObjectVector<UString>::DeleteBack(void)+29p
.text:00000204                                         ; CObjectVector<UString>::operator[](uint)+15p
.text:00000204
.text:00000204 var_4           = dword ptr -4
.text:00000204 arg_0           = dword ptr  8
.text:00000204
.text:00000204                 push    ebp
.text:00000205                 mov     ebp, esp
.text:00000207                 push    ecx
.text:00000208                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000020F                 mov     [ebp+var_4], ecx
.text:00000212                 mov     eax, [ebp+var_4]
.text:00000215                 mov     ecx, [eax]
.text:00000217                 mov     edx, [ebp+arg_0]
.text:0000021A                 lea     eax, [ecx+edx*4]
.text:0000021D                 mov     esp, ebp
.text:0000021F                 pop     ebp
.text:00000220                 retn    4
.text:00000220 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00000220
.text:00000220 ; ---------------------------------------------------------------------------
.text:00000223                 align 4
.text:00000223 _text           ends
.text:00000223
.text:00000224 ; ===========================================================================
.text:00000224
.text:00000224 ; Segment type: Pure code
.text:00000224 ; Segment permissions: Read/Execute
.text:00000224 _text           segment para public 'CODE' use32
.text:00000224                 assume cs:_text
.text:00000224                 ;org 224h
.text:00000224 ; COMDAT (pick any)
.text:00000224                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000224
.text:00000224 ; =============== S U B R O U T I N E =======================================
.text:00000224
.text:00000224 ; Attributes: bp-based frame
.text:00000224
.text:00000224 ; public: class UString & __thiscall CObjectVector<class UString>::operator[](unsigned int)
.text:00000224                 public ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
.text:00000224 ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z proc near
.text:00000224                                         ; CODE XREF: CObjectVector<UString>::Back(void)+1Dp
.text:00000224
.text:00000224 var_4           = dword ptr -4
.text:00000224 arg_0           = dword ptr  8
.text:00000224
.text:00000224                 push    ebp
.text:00000225                 mov     ebp, esp
.text:00000227                 push    ecx
.text:00000228                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000022F                 mov     [ebp+var_4], ecx
.text:00000232                 mov     eax, [ebp+arg_0]
.text:00000235                 push    eax
.text:00000236                 mov     ecx, [ebp+var_4]
.text:00000239                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000023E                 mov     eax, [eax]
.text:00000240                 add     esp, 4
.text:00000243                 cmp     ebp, esp
.text:00000245                 call    __RTC_CheckEsp
.text:0000024A                 mov     esp, ebp
.text:0000024C                 pop     ebp
.text:0000024D                 retn    4
.text:0000024D ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z endp
.text:0000024D
.text:0000024D _text           ends
.text:0000024D
UNDEF:00000250 ; ===========================================================================
UNDEF:00000250
UNDEF:00000250 ; Segment type: Externs
UNDEF:00000250 ; UNDEF
UNDEF:00000250 ; bool NWindows::NFile::NDir::DeleteFileAlways(NWindows::NFile::NDir *__hidden this, const wchar_t *)
UNDEF:00000250                 extrn ?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z:near
UNDEF:00000250                                         ; CODE XREF: CTempFiles::Clear(void)+2Dp
UNDEF:00000254                 extrn __RTC_CheckEsp:near
UNDEF:00000254                                         ; CODE XREF: CTempFiles::Clear(void)+41p
UNDEF:00000254                                         ; CObjectVector<UString>::IsEmpty(void)+1Bp ...
UNDEF:00000258                 extrn __RTC_Shutdown:near
UNDEF:00000258                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000025C                 extrn __RTC_InitBase:near
UNDEF:0000025C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000260 ; void __cdecl operator delete(void *)
UNDEF:00000260                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::`scalar deleting destructor'(uint)+22p
UNDEF:00000260                                         ; UString::~UString(void)+23p
UNDEF:00000260
UNDEF:00000260
UNDEF:00000260                 end