.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 68A507E2CB58677E799DD8E3B08381F5
.text:00000000 ; Input CRC32 : D9342947
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ProgressUtils.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; public: __thiscall CLocalProgress::CLocalProgress(void)
.text:00000000                 public ??0CLocalProgress@@QAE@XZ
.text:00000000 ??0CLocalProgress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$??0CLocalProgress@@QAE@XZ
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000019                 mov     eax, dword ptr ds:___security_cookie
.text:0000001E                 xor     eax, ebp
.text:00000020                 push    eax
.text:00000021                 lea     eax, [ebp+var_C]
.text:00000024                 mov     large fs:0, eax
.text:0000002A                 mov     [ebp+var_10], ecx
.text:0000002D                 mov     ecx, [ebp+var_10] ; this
.text:00000030                 call    ??0ICompressProgressInfo@@QAE@XZ ; ICompressProgressInfo::ICompressProgressInfo(void)
.text:00000035                 mov     ecx, [ebp+var_10]
.text:00000038                 add     ecx, 4          ; this
.text:0000003B                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000040                 mov     eax, [ebp+var_10]
.text:00000043                 mov     dword ptr [eax], offset ??_7CLocalProgress@@6B@ ; const CLocalProgress::`vftable'
.text:00000049                 mov     ecx, [ebp+var_10]
.text:0000004C                 add     ecx, 8
.text:0000004F                 call    ??0?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::CMyComPtr<IProgress>(void)
.text:00000054                 mov     [ebp+var_4], 0
.text:0000005B                 mov     ecx, [ebp+var_10]
.text:0000005E                 add     ecx, 0Ch
.text:00000061                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(void)
.text:00000066                 mov     ecx, [ebp+var_10]
.text:00000069                 mov     dword ptr [ecx+18h], 0
.text:00000070                 mov     dword ptr [ecx+1Ch], 0
.text:00000077                 mov     edx, [ebp+var_10]
.text:0000007A                 mov     dword ptr [edx+20h], 0
.text:00000081                 mov     dword ptr [edx+24h], 0
.text:00000088                 mov     eax, [ebp+var_10]
.text:0000008B                 mov     dword ptr [eax+28h], 0
.text:00000092                 mov     dword ptr [eax+2Ch], 0
.text:00000099                 mov     ecx, [ebp+var_10]
.text:0000009C                 mov     byte ptr [ecx+30h], 1
.text:000000A0                 mov     edx, [ebp+var_10]
.text:000000A3                 mov     byte ptr [edx+31h], 1
.text:000000A7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000AE                 mov     eax, [ebp+var_10]
.text:000000B1                 mov     ecx, [ebp+var_C]
.text:000000B4                 mov     large fs:0, ecx
.text:000000BB                 pop     ecx
.text:000000BC                 add     esp, 10h
.text:000000BF                 cmp     ebp, esp
.text:000000C1                 call    __RTC_CheckEsp
.text:000000C6                 mov     esp, ebp
.text:000000C8                 pop     ebp
.text:000000C9                 retn
.text:000000C9 ??0CLocalProgress@@QAE@XZ endp
.text:000000C9
.text:000000C9 ; ---------------------------------------------------------------------------
.text:000000CA                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; void __thiscall CLocalProgress::Init(CLocalProgress *this, struct IProgress *, bool)
.text:000000D0                 public ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z
.text:000000D0 ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z proc near
.text:000000D0
.text:000000D0 var_4           = dword ptr -4
.text:000000D0 arg_0           = dword ptr  8
.text:000000D0 arg_4           = byte ptr  0Ch
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    ecx
.text:000000D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000DB                 mov     [ebp+var_4], ecx
.text:000000DE                 mov     ecx, [ebp+var_4]
.text:000000E1                 add     ecx, 0Ch
.text:000000E4                 call    ?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ ; CMyComPtr<ICompressProgressInfo>::Release(void)
.text:000000E9                 mov     eax, [ebp+arg_0]
.text:000000EC                 push    eax
.text:000000ED                 mov     ecx, [ebp+var_4]
.text:000000F0                 add     ecx, 8
.text:000000F3                 call    ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z ; CMyComPtr<IProgress>::operator=(IProgress *)
.text:000000F8                 mov     ecx, [ebp+var_4]
.text:000000FB                 add     ecx, 0Ch
.text:000000FE                 call    ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&(void)
.text:00000103                 push    eax
.text:00000104                 push    offset _IID_ICompressProgressInfo
.text:00000109                 mov     ecx, [ebp+var_4]
.text:0000010C                 add     ecx, 8
.text:0000010F                 call    ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IProgress>::QueryInterface<ICompressProgressInfo>(_GUID const &,ICompressProgressInfo * *)
.text:00000114                 mov     ecx, [ebp+var_4]
.text:00000117                 mov     dl, [ebp+arg_4]
.text:0000011A                 mov     [ecx+10h], dl
.text:0000011D                 add     esp, 4
.text:00000120                 cmp     ebp, esp
.text:00000122                 call    __RTC_CheckEsp
.text:00000127                 mov     esp, ebp
.text:00000129                 pop     ebp
.text:0000012A                 retn    8
.text:0000012A ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z endp
.text:0000012A
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012D                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; __int32 __stdcall CLocalProgress::SetRatioInfo(CLocalProgress *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00000130                 public ?SetRatioInfo@CLocalProgress@@UAGJPB_K0@Z
.text:00000130 ?SetRatioInfo@CLocalProgress@@UAGJPB_K0@Z proc near
.text:00000130                                         ; DATA XREF: .rdata:00000334o
.text:00000130
.text:00000130 var_30          = dword ptr -30h
.text:00000130 var_2C          = dword ptr -2Ch
.text:00000130 var_28          = dword ptr -28h
.text:00000130 var_24          = dword ptr -24h
.text:00000130 var_1C          = dword ptr -1Ch
.text:00000130 var_18          = dword ptr -18h
.text:00000130 var_C           = dword ptr -0Ch
.text:00000130 var_8           = dword ptr -8
.text:00000130 this            = dword ptr  8
.text:00000130 arg_4           = dword ptr  0Ch
.text:00000130 arg_8           = dword ptr  10h
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 sub     esp, 30h
.text:00000136                 push    esi
.text:00000137                 push    edi
.text:00000138                 lea     edi, [ebp+var_30]
.text:0000013B                 mov     ecx, 0Ch
.text:00000140                 mov     eax, 0CCCCCCCCh
.text:00000145                 rep stosd
.text:00000147                 mov     eax, [ebp+this]
.text:0000014A                 mov     ecx, [eax+20h]
.text:0000014D                 mov     [ebp+var_C], ecx
.text:00000150                 mov     edx, [eax+24h]
.text:00000153                 mov     [ebp+var_8], edx
.text:00000156                 mov     eax, [ebp+this]
.text:00000159                 mov     ecx, [eax+28h]
.text:0000015C                 mov     [ebp+var_1C], ecx
.text:0000015F                 mov     edx, [eax+2Ch]
.text:00000162                 mov     [ebp+var_18], edx
.text:00000165                 cmp     [ebp+arg_4], 0
.text:00000169                 jz      short loc_17F
.text:0000016B                 mov     eax, [ebp+arg_4]
.text:0000016E                 mov     ecx, [ebp+var_C]
.text:00000171                 add     ecx, [eax]
.text:00000173                 mov     edx, [ebp+var_8]
.text:00000176                 adc     edx, [eax+4]
.text:00000179                 mov     [ebp+var_C], ecx
.text:0000017C                 mov     [ebp+var_8], edx
.text:0000017F
.text:0000017F loc_17F:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+39j
.text:0000017F                 cmp     [ebp+arg_8], 0
.text:00000183                 jz      short loc_199
.text:00000185                 mov     eax, [ebp+arg_8]
.text:00000188                 mov     ecx, [ebp+var_1C]
.text:0000018B                 add     ecx, [eax]
.text:0000018D                 mov     edx, [ebp+var_18]
.text:00000190                 adc     edx, [eax+4]
.text:00000193                 mov     [ebp+var_1C], ecx
.text:00000196                 mov     [ebp+var_18], edx
.text:00000199
.text:00000199 loc_199:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+53j
.text:00000199                 mov     eax, [ebp+this]
.text:0000019C                 movzx   ecx, byte ptr [eax+30h]
.text:000001A0                 test    ecx, ecx
.text:000001A2                 jz      short loc_1EE
.text:000001A4                 mov     ecx, [ebp+this]
.text:000001A7                 add     ecx, 0Ch
.text:000001AA                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000001AF                 test    eax, eax
.text:000001B1                 jz      short loc_1EE
.text:000001B3                 mov     ecx, [ebp+this]
.text:000001B6                 add     ecx, 0Ch
.text:000001B9                 call    ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->(void)
.text:000001BE                 mov     [ebp+var_28], eax
.text:000001C1                 mov     esi, esp
.text:000001C3                 lea     edx, [ebp+var_1C]
.text:000001C6                 push    edx
.text:000001C7                 lea     eax, [ebp+var_C]
.text:000001CA                 push    eax
.text:000001CB                 mov     ecx, [ebp+var_28]
.text:000001CE                 push    ecx
.text:000001CF                 mov     edx, [ebp+var_28]
.text:000001D2                 mov     eax, [edx]
.text:000001D4                 mov     ecx, [eax+0Ch]
.text:000001D7                 call    ecx
.text:000001D9                 cmp     esi, esp
.text:000001DB                 call    __RTC_CheckEsp
.text:000001E0                 mov     [ebp+var_24], eax
.text:000001E3                 cmp     [ebp+var_24], 0
.text:000001E7                 jz      short loc_1EE
.text:000001E9                 mov     eax, [ebp+var_24]
.text:000001EC                 jmp     short loc_269
.text:000001EE ; ---------------------------------------------------------------------------
.text:000001EE
.text:000001EE loc_1EE:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+72j
.text:000001EE                                         ; CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+81j ...
.text:000001EE                 mov     edx, [ebp+this]
.text:000001F1                 movzx   eax, byte ptr [edx+31h]
.text:000001F5                 test    eax, eax
.text:000001F7                 jz      short loc_267
.text:000001F9                 mov     ecx, [ebp+this]
.text:000001FC                 mov     edx, [ebp+var_C]
.text:000001FF                 add     edx, [ecx+18h]
.text:00000202                 mov     eax, [ebp+var_8]
.text:00000205                 adc     eax, [ecx+1Ch]
.text:00000208                 mov     [ebp+var_C], edx
.text:0000020B                 mov     [ebp+var_8], eax
.text:0000020E                 mov     ecx, [ebp+this]
.text:00000211                 mov     edx, [ebp+var_1C]
.text:00000214                 add     edx, [ecx+18h]
.text:00000217                 mov     eax, [ebp+var_18]
.text:0000021A                 adc     eax, [ecx+1Ch]
.text:0000021D                 mov     [ebp+var_1C], edx
.text:00000220                 mov     [ebp+var_18], eax
.text:00000223                 mov     ecx, [ebp+this]
.text:00000226                 movzx   edx, byte ptr [ecx+10h]
.text:0000022A                 test    edx, edx
.text:0000022C                 jz      short loc_236
.text:0000022E                 lea     eax, [ebp+var_C]
.text:00000231                 mov     [ebp+var_2C], eax
.text:00000234                 jmp     short loc_23C
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000236
.text:00000236 loc_236:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+FCj
.text:00000236                 lea     ecx, [ebp+var_1C]
.text:00000239                 mov     [ebp+var_2C], ecx
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+104j
.text:0000023C                 mov     ecx, [ebp+this]
.text:0000023F                 add     ecx, 8
.text:00000242                 call    ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ ; CMyComPtr<IProgress>::operator->(void)
.text:00000247                 mov     [ebp+var_30], eax
.text:0000024A                 mov     esi, esp
.text:0000024C                 mov     edx, [ebp+var_2C]
.text:0000024F                 push    edx
.text:00000250                 mov     eax, [ebp+var_30]
.text:00000253                 push    eax
.text:00000254                 mov     ecx, [ebp+var_30]
.text:00000257                 mov     edx, [ecx]
.text:00000259                 mov     eax, [edx+10h]
.text:0000025C                 call    eax
.text:0000025E                 cmp     esi, esp
.text:00000260                 call    __RTC_CheckEsp
.text:00000265                 jmp     short loc_269
.text:00000267 ; ---------------------------------------------------------------------------
.text:00000267
.text:00000267 loc_267:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+C7j
.text:00000267                 xor     eax, eax
.text:00000269
.text:00000269 loc_269:                                ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+BCj
.text:00000269                                         ; CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+135j
.text:00000269                 push    edx
.text:0000026A                 mov     ecx, ebp
.text:0000026C                 push    eax
.text:0000026D                 lea     edx, $LN13
.text:00000273                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000278                 pop     eax
.text:00000279                 pop     edx
.text:0000027A                 pop     edi
.text:0000027B                 pop     esi
.text:0000027C                 add     esp, 30h
.text:0000027F                 cmp     ebp, esp
.text:00000281                 call    __RTC_CheckEsp
.text:00000286                 mov     esp, ebp
.text:00000288                 pop     ebp
.text:00000289                 retn    0Ch
.text:00000289 ?SetRatioInfo@CLocalProgress@@UAGJPB_K0@Z endp
.text:00000289
.text:00000289 ; ---------------------------------------------------------------------------
.text:0000028C $LN13           dd 2                    ; DATA XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+13Do
.text:00000290                 dd offset $LN12
.text:00000294 $LN12           dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00000290o
.text:0000029C                 dd offset $LN10         ; "inSize2"
.text:000002A0                 dd 0FFFFFFE4h, 8
.text:000002A8                 dd offset $LN11         ; "outSize2"
.text:000002AC $LN11           db 'outSize2',0         ; DATA XREF: .text:000002A8o
.text:000002B5 $LN10           db 'inSize2',0          ; DATA XREF: .text:0000029Co
.text:000002BD                 align 10h
.text:000002C0
.text:000002C0 ; =============== S U B R O U T I N E =======================================
.text:000002C0
.text:000002C0 ; Attributes: bp-based frame
.text:000002C0
.text:000002C0 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
.text:000002C0                 public ?SetCur@CLocalProgress@@QAEJXZ
.text:000002C0 ?SetCur@CLocalProgress@@QAEJXZ proc near
.text:000002C0
.text:000002C0 var_4           = dword ptr -4
.text:000002C0
.text:000002C0                 push    ebp
.text:000002C1                 mov     ebp, esp
.text:000002C3                 push    ecx
.text:000002C4                 push    esi
.text:000002C5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000002CC                 mov     [ebp+var_4], ecx
.text:000002CF                 mov     esi, esp
.text:000002D1                 push    0
.text:000002D3                 push    0
.text:000002D5                 mov     eax, [ebp+var_4]
.text:000002D8                 mov     ecx, [eax]
.text:000002DA                 mov     edx, [ebp+var_4]
.text:000002DD                 push    edx
.text:000002DE                 mov     eax, [ecx+0Ch]
.text:000002E1                 call    eax
.text:000002E3                 cmp     esi, esp
.text:000002E5                 call    __RTC_CheckEsp
.text:000002EA                 pop     esi
.text:000002EB                 add     esp, 4
.text:000002EE                 cmp     ebp, esp
.text:000002F0                 call    __RTC_CheckEsp
.text:000002F5                 mov     esp, ebp
.text:000002F7                 pop     ebp
.text:000002F8                 retn
.text:000002F8 ?SetCur@CLocalProgress@@QAEJXZ endp
.text:000002F8
.text:000002F8 ; ---------------------------------------------------------------------------
.text:000002F9                 align 4
.text:000002F9 _text           ends
.text:000002F9
.text$x:000002FC ; ===========================================================================
.text$x:000002FC
.text$x:000002FC ; Segment type: Pure code
.text$x:000002FC ; Segment permissions: Read/Execute
.text$x:000002FC _text$x         segment para public 'CODE' use32
.text$x:000002FC                 assume cs:_text$x
.text$x:000002FC                 ;org 2FCh
.text$x:000002FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000002FC
.text$x:000002FC ; =============== S U B R O U T I N E =======================================
.text$x:000002FC
.text$x:000002FC
.text$x:000002FC __unwindfunclet$??0CLocalProgress@@QAE@XZ$0 proc near
.text$x:000002FC                                         ; DATA XREF: .xdata$x:0000033Co
.text$x:000002FC                 mov     ecx, [ebp-10h]
.text$x:000002FF                 add     ecx, 8
.text$x:00000302                 jmp     ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text$x:00000302 __unwindfunclet$??0CLocalProgress@@QAE@XZ$0 endp
.text$x:00000302
.text$x:00000307
.text$x:00000307 ; =============== S U B R O U T I N E =======================================
.text$x:00000307
.text$x:00000307
.text$x:00000307 __ehhandler$??0CLocalProgress@@QAE@XZ proc near
.text$x:00000307                                         ; DATA XREF: CLocalProgress::CLocalProgress(void)+5o
.text$x:00000307
.text$x:00000307 arg_4           = dword ptr  8
.text$x:00000307
.text$x:00000307                 mov     edx, [esp+arg_4]
.text$x:0000030B                 lea     eax, [edx+0Ch]
.text$x:0000030E                 mov     ecx, [edx-8]
.text$x:00000311                 xor     ecx, eax
.text$x:00000313                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000318                 mov     eax, offset __ehfuncinfo$??0CLocalProgress@@QAE@XZ
.text$x:0000031D                 jmp     ___CxxFrameHandler3
.text$x:0000031D __ehhandler$??0CLocalProgress@@QAE@XZ endp
.text$x:0000031D
.text$x:0000031D ; ---------------------------------------------------------------------------
.text$x:00000322                 align 4
.text$x:00000322 _text$x         ends
.text$x:00000322
.rdata:00000324 ; ===========================================================================
.rdata:00000324
.rdata:00000324 ; Segment type: Pure data
.rdata:00000324 ; Segment permissions: Read
.rdata:00000324 _rdata          segment dword public 'DATA' use32
.rdata:00000324                 assume cs:_rdata
.rdata:00000324                 ;org 324h
.rdata:00000324 ; COMDAT (pick largest)
.rdata:00000324                 dd offset ??_R4CLocalProgress@@6B@ ; const CLocalProgress::`RTTI Complete Object Locator'
.rdata:00000328                 public ??_7CLocalProgress@@6B@
.rdata:00000328 ; const CLocalProgress::`vftable'
.rdata:00000328 ??_7CLocalProgress@@6B@ dd offset ?QueryInterface@CLocalProgress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000328                                         ; DATA XREF: CLocalProgress::CLocalProgress(void)+43o
.rdata:00000328                                         ; CLocalProgress::QueryInterface(_GUID const &,void * *)
.rdata:0000032C                 dd offset ?AddRef@CLocalProgress@@UAGKXZ ; CLocalProgress::AddRef(void)
.rdata:00000330                 dd offset ?Release@CLocalProgress@@UAGKXZ ; CLocalProgress::Release(void)
.rdata:00000334                 dd offset ?SetRatioInfo@CLocalProgress@@UAGJPB_K0@Z ; CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)
.rdata:00000334 _rdata          ends
.rdata:00000334
.xdata$x:00000338 ; ===========================================================================
.xdata$x:00000338
.xdata$x:00000338 ; Segment type: Pure data
.xdata$x:00000338 ; Segment permissions: Read
.xdata$x:00000338 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000338                 assume cs:_xdata$x
.xdata$x:00000338                 ;org 338h
.xdata$x:00000338 __unwindtable$??0CLocalProgress@@QAE@XZ db 0FFh
.xdata$x:00000338                                         ; DATA XREF: .xdata$x:00000348o
.xdata$x:00000339                 db 0FFh
.xdata$x:0000033A                 db 0FFh
.xdata$x:0000033B                 db 0FFh
.xdata$x:0000033C                 dd offset __unwindfunclet$??0CLocalProgress@@QAE@XZ$0
.xdata$x:00000340 __ehfuncinfo$??0CLocalProgress@@QAE@XZ db  22h ; "
.xdata$x:00000340                                         ; DATA XREF: __ehhandler$??0CLocalProgress@@QAE@XZ+11o
.xdata$x:00000341                 db    5
.xdata$x:00000342                 db  93h ; ô
.xdata$x:00000343                 db  19h
.xdata$x:00000344                 db    1
.xdata$x:00000345                 db    0
.xdata$x:00000346                 db    0
.xdata$x:00000347                 db    0
.xdata$x:00000348                 dd offset __unwindtable$??0CLocalProgress@@QAE@XZ
.xdata$x:0000034C                 align 20h
.xdata$x:00000360                 db    1
.xdata$x:00000361                 db    0
.xdata$x:00000362                 db    0
.xdata$x:00000363                 db    0
.xdata$x:00000363 _xdata$x        ends
.xdata$x:00000363
.rtc$TMZ:00000364 ; ===========================================================================
.rtc$TMZ:00000364
.rtc$TMZ:00000364 ; Segment type: Pure data
.rtc$TMZ:00000364 ; Segment permissions: Read
.rtc$TMZ:00000364 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000364                 assume cs:_rtc$TMZ
.rtc$TMZ:00000364                 ;org 364h
.rtc$TMZ:00000364 ; COMDAT (pick any)
.rtc$TMZ:00000364 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000364 _rtc$TMZ        ends
.rtc$TMZ:00000364
.rtc$IMZ:00000368 ; ===========================================================================
.rtc$IMZ:00000368
.rtc$IMZ:00000368 ; Segment type: Pure data
.rtc$IMZ:00000368 ; Segment permissions: Read
.rtc$IMZ:00000368 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000368                 assume cs:_rtc$IMZ
.rtc$IMZ:00000368                 ;org 368h
.rtc$IMZ:00000368 ; COMDAT (pick any)
.rtc$IMZ:00000368 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000368 _rtc$IMZ        ends
.rtc$IMZ:00000368
.rdata$r:0000036C ; ===========================================================================
.rdata$r:0000036C
.rdata$r:0000036C ; Segment type: Pure data
.rdata$r:0000036C ; Segment permissions: Read
.rdata$r:0000036C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000036C                 assume cs:_rdata$r
.rdata$r:0000036C                 ;org 36Ch
.rdata$r:0000036C ; COMDAT (pick any)
.rdata$r:0000036C                 public ??_R4CLocalProgress@@6B@
.rdata$r:0000036C ; const CLocalProgress::`RTTI Complete Object Locator'
.rdata$r:0000036C ??_R4CLocalProgress@@6B@ db    0        ; DATA XREF: .rdata:00000324o
.rdata$r:0000036D                 db    0
.rdata$r:0000036E                 db    0
.rdata$r:0000036F                 db    0
.rdata$r:00000370                 db    0
.rdata$r:00000371                 db    0
.rdata$r:00000372                 db    0
.rdata$r:00000373                 db    0
.rdata$r:00000374                 db    0
.rdata$r:00000375                 db    0
.rdata$r:00000376                 db    0
.rdata$r:00000377                 db    0
.rdata$r:00000378                 dd offset ??_R0?AVCLocalProgress@@@8 ; CLocalProgress `RTTI Type Descriptor'
.rdata$r:0000037C                 dd offset ??_R3CLocalProgress@@8 ; CLocalProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000037C _rdata$r        ends
.rdata$r:0000037C
.data:00000380 ; ===========================================================================
.data:00000380
.data:00000380 ; Segment type: Pure data
.data:00000380 ; Segment permissions: Read/Write
.data:00000380 _data           segment dword public 'DATA' use32
.data:00000380                 assume cs:_data
.data:00000380                 ;org 380h
.data:00000380 ; COMDAT (pick any)
.data:00000380                 public ??_R0?AVCLocalProgress@@@8
.data:00000380 ; class CLocalProgress `RTTI Type Descriptor'
.data:00000380 ??_R0?AVCLocalProgress@@@8 dd offset ??_7type_info@@6B@
.data:00000380                                         ; DATA XREF: .rdata$r:00000378o
.data:00000380                                         ; .rdata$r:CLocalProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000380                                         ; const type_info::`vftable'
.data:00000384                 align 8
.data:00000388 a_?avclocalprog db '.?AVCLocalProgress@@',0
.data:0000039D                 align 10h
.data:0000039D _data           ends
.data:0000039D
.rdata$r:000003A0 ; ===========================================================================
.rdata$r:000003A0
.rdata$r:000003A0 ; Segment type: Pure data
.rdata$r:000003A0 ; Segment permissions: Read
.rdata$r:000003A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003A0                 assume cs:_rdata$r
.rdata$r:000003A0                 ;org 3A0h
.rdata$r:000003A0 ; COMDAT (pick any)
.rdata$r:000003A0                 public ??_R3CLocalProgress@@8
.rdata$r:000003A0 ; CLocalProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003A0 ??_R3CLocalProgress@@8 db    0          ; DATA XREF: .rdata$r:0000037Co
.rdata$r:000003A0                                         ; .rdata$r:000003DCo
.rdata$r:000003A1                 db    0
.rdata$r:000003A2                 db    0
.rdata$r:000003A3                 db    0
.rdata$r:000003A4                 db    1
.rdata$r:000003A5                 db    0
.rdata$r:000003A6                 db    0
.rdata$r:000003A7                 db    0
.rdata$r:000003A8                 db    4
.rdata$r:000003A9                 db    0
.rdata$r:000003AA                 db    0
.rdata$r:000003AB                 db    0
.rdata$r:000003AC                 dd offset ??_R2CLocalProgress@@8 ; CLocalProgress::`RTTI Base Class Array'
.rdata$r:000003AC _rdata$r        ends
.rdata$r:000003AC
.rdata$r:000003B0 ; ===========================================================================
.rdata$r:000003B0
.rdata$r:000003B0 ; Segment type: Pure data
.rdata$r:000003B0 ; Segment permissions: Read
.rdata$r:000003B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003B0                 assume cs:_rdata$r
.rdata$r:000003B0                 ;org 3B0h
.rdata$r:000003B0 ; COMDAT (pick any)
.rdata$r:000003B0                 public ??_R2CLocalProgress@@8
.rdata$r:000003B0 ; CLocalProgress::`RTTI Base Class Array'
.rdata$r:000003B0 ??_R2CLocalProgress@@8 dd offset ??_R1A@?0A@EA@CLocalProgress@@8
.rdata$r:000003B0                                         ; DATA XREF: .rdata$r:000003ACo
.rdata$r:000003B0                                         ; CLocalProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003B4                 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000003BC                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000003C0                 db    0
.rdata$r:000003C1                 align 4
.rdata$r:000003C1 _rdata$r        ends
.rdata$r:000003C1
.rdata$r:000003C4 ; ===========================================================================
.rdata$r:000003C4
.rdata$r:000003C4 ; Segment type: Pure data
.rdata$r:000003C4 ; Segment permissions: Read
.rdata$r:000003C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003C4                 assume cs:_rdata$r
.rdata$r:000003C4                 ;org 3C4h
.rdata$r:000003C4 ; COMDAT (pick any)
.rdata$r:000003C4                 public ??_R1A@?0A@EA@CLocalProgress@@8
.rdata$r:000003C4 ; CLocalProgress::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003C4 ??_R1A@?0A@EA@CLocalProgress@@8 dd offset ??_R0?AVCLocalProgress@@@8
.rdata$r:000003C4                                         ; DATA XREF: .rdata$r:CLocalProgress::`RTTI Base Class Array'o
.rdata$r:000003C4                                         ; CLocalProgress `RTTI Type Descriptor'
.rdata$r:000003C8                 db    3
.rdata$r:000003C9                 db    0
.rdata$r:000003CA                 db    0
.rdata$r:000003CB                 db    0
.rdata$r:000003CC                 db    0
.rdata$r:000003CD                 db    0
.rdata$r:000003CE                 db    0
.rdata$r:000003CF                 db    0
.rdata$r:000003D0                 db 0FFh
.rdata$r:000003D1                 db 0FFh
.rdata$r:000003D2                 db 0FFh
.rdata$r:000003D3                 db 0FFh
.rdata$r:000003D4                 db    0
.rdata$r:000003D5                 db    0
.rdata$r:000003D6                 db    0
.rdata$r:000003D7                 db    0
.rdata$r:000003D8                 db  40h ; @
.rdata$r:000003D9                 db    0
.rdata$r:000003DA                 db    0
.rdata$r:000003DB                 db    0
.rdata$r:000003DC                 dd offset ??_R3CLocalProgress@@8 ; CLocalProgress::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003DC _rdata$r        ends
.rdata$r:000003DC
.rdata$r:000003E0 ; ===========================================================================
.rdata$r:000003E0
.rdata$r:000003E0 ; Segment type: Pure data
.rdata$r:000003E0 ; Segment permissions: Read
.rdata$r:000003E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003E0                 assume cs:_rdata$r
.rdata$r:000003E0                 ;org 3E0h
.rdata$r:000003E0 ; COMDAT (pick any)
.rdata$r:000003E0                 public ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:000003E0 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000003E0 ??_R1A@?0A@EA@ICompressProgressInfo@@8 dd offset ??_R0?AUICompressProgressInfo@@@8
.rdata$r:000003E0                                         ; DATA XREF: .rdata$r:000003B4o
.rdata$r:000003E0                                         ; .rdata$r:ICompressProgressInfo::`RTTI Base Class Array'o
.rdata$r:000003E0                                         ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:000003E4                 db    1
.rdata$r:000003E5                 db    0
.rdata$r:000003E6                 db    0
.rdata$r:000003E7                 db    0
.rdata$r:000003E8                 db    0
.rdata$r:000003E9                 db    0
.rdata$r:000003EA                 db    0
.rdata$r:000003EB                 db    0
.rdata$r:000003EC                 db 0FFh
.rdata$r:000003ED                 db 0FFh
.rdata$r:000003EE                 db 0FFh
.rdata$r:000003EF                 db 0FFh
.rdata$r:000003F0                 db    0
.rdata$r:000003F1                 db    0
.rdata$r:000003F2                 db    0
.rdata$r:000003F3                 db    0
.rdata$r:000003F4                 db  40h ; @
.rdata$r:000003F5                 db    0
.rdata$r:000003F6                 db    0
.rdata$r:000003F7                 db    0
.rdata$r:000003F8                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003F8 _rdata$r        ends
.rdata$r:000003F8
.data:000003FC ; ===========================================================================
.data:000003FC
.data:000003FC ; Segment type: Pure data
.data:000003FC ; Segment permissions: Read/Write
.data:000003FC _data           segment dword public 'DATA' use32
.data:000003FC                 assume cs:_data
.data:000003FC                 ;org 3FCh
.data:000003FC ; COMDAT (pick any)
.data:000003FC                 public ??_R0?AUICompressProgressInfo@@@8
.data:000003FC ; struct ICompressProgressInfo `RTTI Type Descriptor'
.data:000003FC ??_R0?AUICompressProgressInfo@@@8 dd offset ??_7type_info@@6B@
.data:000003FC                                         ; DATA XREF: .rdata$r:ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000003FC                                         ; .rdata$r:0000076Co
.data:000003FC                                         ; const type_info::`vftable'
.data:00000400                 db    0
.data:00000401                 db    0
.data:00000402                 db    0
.data:00000403                 db    0
.data:00000404                 db  2Eh ; .
.data:00000405                 db  3Fh ; ?
.data:00000406                 db  41h ; A
.data:00000407                 db  55h ; U
.data:00000408                 db  49h ; I
.data:00000409                 db  43h ; C
.data:0000040A                 db  6Fh ; o
.data:0000040B                 db  6Dh ; m
.data:0000040C                 db  70h ; p
.data:0000040D                 db  72h ; r
.data:0000040E                 db  65h ; e
.data:0000040F                 db  73h ; s
.data:00000410                 db  73h ; s
.data:00000411                 db  50h ; P
.data:00000412                 db  72h ; r
.data:00000413                 db  6Fh ; o
.data:00000414                 db  67h ; g
.data:00000415                 db  72h ; r
.data:00000416                 db  65h ; e
.data:00000417                 db  73h ; s
.data:00000418                 db  73h ; s
.data:00000419                 db  49h ; I
.data:0000041A                 db  6Eh ; n
.data:0000041B                 db  66h ; f
.data:0000041C                 db  6Fh ; o
.data:0000041D                 db  40h ; @
.data:0000041E                 db  40h ; @
.data:0000041F                 db    0
.data:0000041F _data           ends
.data:0000041F
.rdata$r:00000420 ; ===========================================================================
.rdata$r:00000420
.rdata$r:00000420 ; Segment type: Pure data
.rdata$r:00000420 ; Segment permissions: Read
.rdata$r:00000420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000420                 assume cs:_rdata$r
.rdata$r:00000420                 ;org 420h
.rdata$r:00000420 ; COMDAT (pick any)
.rdata$r:00000420                 public ??_R3ICompressProgressInfo@@8
.rdata$r:00000420 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000420 ??_R3ICompressProgressInfo@@8 db    0   ; DATA XREF: .rdata$r:000003F8o
.rdata$r:00000420                                         ; .rdata$r:00000770o
.rdata$r:00000421                 db    0
.rdata$r:00000422                 db    0
.rdata$r:00000423                 db    0
.rdata$r:00000424                 db    0
.rdata$r:00000425                 db    0
.rdata$r:00000426                 db    0
.rdata$r:00000427                 db    0
.rdata$r:00000428                 db    2
.rdata$r:00000429                 db    0
.rdata$r:0000042A                 db    0
.rdata$r:0000042B                 db    0
.rdata$r:0000042C                 dd offset ??_R2ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:0000042C _rdata$r        ends
.rdata$r:0000042C
.rdata$r:00000430 ; ===========================================================================
.rdata$r:00000430
.rdata$r:00000430 ; Segment type: Pure data
.rdata$r:00000430 ; Segment permissions: Read
.rdata$r:00000430 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000430                 assume cs:_rdata$r
.rdata$r:00000430                 ;org 430h
.rdata$r:00000430 ; COMDAT (pick any)
.rdata$r:00000430                 public ??_R2ICompressProgressInfo@@8
.rdata$r:00000430 ; ICompressProgressInfo::`RTTI Base Class Array'
.rdata$r:00000430 ??_R2ICompressProgressInfo@@8 dd offset ??_R1A@?0A@EA@ICompressProgressInfo@@8
.rdata$r:00000430                                         ; DATA XREF: .rdata$r:0000042Co
.rdata$r:00000430                                         ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000434                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000438                 db    0
.rdata$r:00000439                 align 4
.rdata$r:00000439 _rdata$r        ends
.rdata$r:00000439
.rdata$r:0000043C ; ===========================================================================
.rdata$r:0000043C
.rdata$r:0000043C ; Segment type: Pure data
.rdata$r:0000043C ; Segment permissions: Read
.rdata$r:0000043C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000043C                 assume cs:_rdata$r
.rdata$r:0000043C                 ;org 43Ch
.rdata$r:0000043C ; COMDAT (pick any)
.rdata$r:0000043C                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000043C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000043C ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000043C                                         ; DATA XREF: .rdata$r:000003B8o
.rdata$r:0000043C                                         ; .rdata$r:00000434o ...
.rdata$r:0000043C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000440                 db    0
.rdata$r:00000441                 db    0
.rdata$r:00000442                 db    0
.rdata$r:00000443                 db    0
.rdata$r:00000444                 db    0
.rdata$r:00000445                 db    0
.rdata$r:00000446                 db    0
.rdata$r:00000447                 db    0
.rdata$r:00000448                 db 0FFh
.rdata$r:00000449                 db 0FFh
.rdata$r:0000044A                 db 0FFh
.rdata$r:0000044B                 db 0FFh
.rdata$r:0000044C                 db    0
.rdata$r:0000044D                 db    0
.rdata$r:0000044E                 db    0
.rdata$r:0000044F                 db    0
.rdata$r:00000450                 db  40h ; @
.rdata$r:00000451                 db    0
.rdata$r:00000452                 db    0
.rdata$r:00000453                 db    0
.rdata$r:00000454                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000454 _rdata$r        ends
.rdata$r:00000454
.data:00000458 ; ===========================================================================
.data:00000458
.data:00000458 ; Segment type: Pure data
.data:00000458 ; Segment permissions: Read/Write
.data:00000458 _data           segment dword public 'DATA' use32
.data:00000458                 assume cs:_data
.data:00000458                 ;org 458h
.data:00000458 ; COMDAT (pick any)
.data:00000458                 public ??_R0?AUIUnknown@@@8
.data:00000458 ; struct IUnknown `RTTI Type Descriptor'
.data:00000458 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000458                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000458                                         ; const type_info::`vftable'
.data:0000045C                 align 10h
.data:00000460 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000046F                 align 10h
.data:0000046F _data           ends
.data:0000046F
.rdata$r:00000470 ; ===========================================================================
.rdata$r:00000470
.rdata$r:00000470 ; Segment type: Pure data
.rdata$r:00000470 ; Segment permissions: Read
.rdata$r:00000470 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000470                 assume cs:_rdata$r
.rdata$r:00000470                 ;org 470h
.rdata$r:00000470 ; COMDAT (pick any)
.rdata$r:00000470                 public ??_R3IUnknown@@8
.rdata$r:00000470 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000470 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000454o
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db    0
.rdata$r:00000475                 db    0
.rdata$r:00000476                 db    0
.rdata$r:00000477                 db    0
.rdata$r:00000478                 db    1
.rdata$r:00000479                 db    0
.rdata$r:0000047A                 db    0
.rdata$r:0000047B                 db    0
.rdata$r:0000047C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000047C _rdata$r        ends
.rdata$r:0000047C
.rdata$r:00000480 ; ===========================================================================
.rdata$r:00000480
.rdata$r:00000480 ; Segment type: Pure data
.rdata$r:00000480 ; Segment permissions: Read
.rdata$r:00000480 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000480                 assume cs:_rdata$r
.rdata$r:00000480                 ;org 480h
.rdata$r:00000480 ; COMDAT (pick any)
.rdata$r:00000480                 public ??_R2IUnknown@@8
.rdata$r:00000480 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000480 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000480                                         ; DATA XREF: .rdata$r:0000047Co
.rdata$r:00000480                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000484                 db    0
.rdata$r:00000485                 align 4
.rdata$r:00000485 _rdata$r        ends
.rdata$r:00000485
.rdata$r:00000488 ; ===========================================================================
.rdata$r:00000488
.rdata$r:00000488 ; Segment type: Pure data
.rdata$r:00000488 ; Segment permissions: Read
.rdata$r:00000488 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000488                 assume cs:_rdata$r
.rdata$r:00000488                 ;org 488h
.rdata$r:00000488 ; COMDAT (pick any)
.rdata$r:00000488                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00000488 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000488 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000488                                         ; DATA XREF: .rdata$r:000003BCo
.rdata$r:00000488                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:0000048C                 align 10h
.rdata$r:00000490                 db    4
.rdata$r:00000491                 db    0
.rdata$r:00000492                 db    0
.rdata$r:00000493                 db    0
.rdata$r:00000494                 db 0FFh
.rdata$r:00000495                 db 0FFh
.rdata$r:00000496                 db 0FFh
.rdata$r:00000497                 db 0FFh
.rdata$r:00000498                 db    0
.rdata$r:00000499                 db    0
.rdata$r:0000049A                 db    0
.rdata$r:0000049B                 db    0
.rdata$r:0000049C                 db  40h ; @
.rdata$r:0000049D                 db    0
.rdata$r:0000049E                 db    0
.rdata$r:0000049F                 db    0
.rdata$r:000004A0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004A0 _rdata$r        ends
.rdata$r:000004A0
.data:000004A4 ; ===========================================================================
.data:000004A4
.data:000004A4 ; Segment type: Pure data
.data:000004A4 ; Segment permissions: Read/Write
.data:000004A4 _data           segment dword public 'DATA' use32
.data:000004A4                 assume cs:_data
.data:000004A4                 ;org 4A4h
.data:000004A4 ; COMDAT (pick any)
.data:000004A4                 public ??_R0?AVCMyUnknownImp@@@8
.data:000004A4 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000004A4 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000004A4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000004A4                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004A4                                         ; const type_info::`vftable'
.data:000004A8                 db    0
.data:000004A9                 db    0
.data:000004AA                 db    0
.data:000004AB                 db    0
.data:000004AC                 db  2Eh ; .
.data:000004AD                 db  3Fh ; ?
.data:000004AE                 db  41h ; A
.data:000004AF                 db  56h ; V
.data:000004B0                 db  43h ; C
.data:000004B1                 db  4Dh ; M
.data:000004B2                 db  79h ; y
.data:000004B3                 db  55h ; U
.data:000004B4                 db  6Eh ; n
.data:000004B5                 db  6Bh ; k
.data:000004B6                 db  6Eh ; n
.data:000004B7                 db  6Fh ; o
.data:000004B8                 db  77h ; w
.data:000004B9                 db  6Eh ; n
.data:000004BA                 db  49h ; I
.data:000004BB                 db  6Dh ; m
.data:000004BC                 db  70h ; p
.data:000004BD                 db  40h ; @
.data:000004BE                 db  40h ; @
.data:000004BF                 db    0
.data:000004BF _data           ends
.data:000004BF
.rdata$r:000004C0 ; ===========================================================================
.rdata$r:000004C0
.rdata$r:000004C0 ; Segment type: Pure data
.rdata$r:000004C0 ; Segment permissions: Read
.rdata$r:000004C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004C0                 assume cs:_rdata$r
.rdata$r:000004C0                 ;org 4C0h
.rdata$r:000004C0 ; COMDAT (pick any)
.rdata$r:000004C0                 public ??_R3CMyUnknownImp@@8
.rdata$r:000004C0 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004C0 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000004A0o
.rdata$r:000004C0                                         ; .rdata$r:000004F0o
.rdata$r:000004C1                 db    0
.rdata$r:000004C2                 db    0
.rdata$r:000004C3                 db    0
.rdata$r:000004C4                 db    0
.rdata$r:000004C5                 db    0
.rdata$r:000004C6                 db    0
.rdata$r:000004C7                 db    0
.rdata$r:000004C8                 db    1
.rdata$r:000004C9                 db    0
.rdata$r:000004CA                 db    0
.rdata$r:000004CB                 db    0
.rdata$r:000004CC                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000004CC _rdata$r        ends
.rdata$r:000004CC
.rdata$r:000004D0 ; ===========================================================================
.rdata$r:000004D0
.rdata$r:000004D0 ; Segment type: Pure data
.rdata$r:000004D0 ; Segment permissions: Read
.rdata$r:000004D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D0                 assume cs:_rdata$r
.rdata$r:000004D0                 ;org 4D0h
.rdata$r:000004D0 ; COMDAT (pick any)
.rdata$r:000004D0                 public ??_R2CMyUnknownImp@@8
.rdata$r:000004D0 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000004D0 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000004D0                                         ; DATA XREF: .rdata$r:000004CCo
.rdata$r:000004D0                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004D4                 db    0
.rdata$r:000004D5                 align 4
.rdata$r:000004D5 _rdata$r        ends
.rdata$r:000004D5
.rdata$r:000004D8 ; ===========================================================================
.rdata$r:000004D8
.rdata$r:000004D8 ; Segment type: Pure data
.rdata$r:000004D8 ; Segment permissions: Read
.rdata$r:000004D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004D8                 assume cs:_rdata$r
.rdata$r:000004D8                 ;org 4D8h
.rdata$r:000004D8 ; COMDAT (pick any)
.rdata$r:000004D8                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000004D8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004D8 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000004D8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000004D8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000004DC                 db    0
.rdata$r:000004DD                 db    0
.rdata$r:000004DE                 db    0
.rdata$r:000004DF                 db    0
.rdata$r:000004E0                 db    0
.rdata$r:000004E1                 db    0
.rdata$r:000004E2                 db    0
.rdata$r:000004E3                 db    0
.rdata$r:000004E4                 db 0FFh
.rdata$r:000004E5                 db 0FFh
.rdata$r:000004E6                 db 0FFh
.rdata$r:000004E7                 db 0FFh
.rdata$r:000004E8                 db    0
.rdata$r:000004E9                 db    0
.rdata$r:000004EA                 db    0
.rdata$r:000004EB                 db    0
.rdata$r:000004EC                 db  40h ; @
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004F0 _rdata$r        ends
.rdata$r:000004F0
.text:000004F4 ; ===========================================================================
.text:000004F4
.text:000004F4 ; Segment type: Pure code
.text:000004F4 ; Segment permissions: Read/Execute
.text:000004F4 _text           segment para public 'CODE' use32
.text:000004F4                 assume cs:_text
.text:000004F4                 ;org 4F4h
.text:000004F4 ; COMDAT (pick any)
.text:000004F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000004F4
.text:000004F4 ; =============== S U B R O U T I N E =======================================
.text:000004F4
.text:000004F4 ; Attributes: bp-based frame
.text:000004F4
.text:000004F4 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000004F4                 public ??0CMyUnknownImp@@QAE@XZ
.text:000004F4 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CLocalProgress::CLocalProgress(void)+3Bp
.text:000004F4
.text:000004F4 var_4           = dword ptr -4
.text:000004F4
.text:000004F4                 push    ebp
.text:000004F5                 mov     ebp, esp
.text:000004F7                 push    ecx
.text:000004F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000004FF                 mov     [ebp+var_4], ecx
.text:00000502                 mov     eax, [ebp+var_4]
.text:00000505                 mov     dword ptr [eax], 0
.text:0000050B                 mov     eax, [ebp+var_4]
.text:0000050E                 mov     esp, ebp
.text:00000510                 pop     ebp
.text:00000511                 retn
.text:00000511 ??0CMyUnknownImp@@QAE@XZ endp
.text:00000511
.text:00000511 ; ---------------------------------------------------------------------------
.text:00000512                 align 4
.text:00000512 _text           ends
.text:00000512
.text:00000514 ; ===========================================================================
.text:00000514
.text:00000514 ; Segment type: Pure code
.text:00000514 ; Segment permissions: Read/Execute
.text:00000514 _text           segment para public 'CODE' use32
.text:00000514                 assume cs:_text
.text:00000514                 ;org 514h
.text:00000514 ; COMDAT (pick any)
.text:00000514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000514
.text:00000514 ; =============== S U B R O U T I N E =======================================
.text:00000514
.text:00000514 ; Attributes: bp-based frame
.text:00000514
.text:00000514 ; __int32 __stdcall CLocalProgress::QueryInterface(CLocalProgress *this, const struct _GUID *Buf1, void **)
.text:00000514                 public ?QueryInterface@CLocalProgress@@UAGJABU_GUID@@PAPAX@Z
.text:00000514 ?QueryInterface@CLocalProgress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000514                                         ; DATA XREF: .rdata:const CLocalProgress::`vftable'o
.text:00000514
.text:00000514 this            = dword ptr  8
.text:00000514 Buf1            = dword ptr  0Ch
.text:00000514 arg_8           = dword ptr  10h
.text:00000514
.text:00000514                 push    ebp
.text:00000515                 mov     ebp, esp
.text:00000517                 mov     eax, [ebp+arg_8]
.text:0000051A                 mov     dword ptr [eax], 0
.text:00000520                 push    offset _IID_IUnknown ; Buf2
.text:00000525                 mov     ecx, [ebp+Buf1]
.text:00000528                 push    ecx             ; Buf1
.text:00000529                 call    ___@8           ; __(x,x)
.text:0000052E                 test    eax, eax
.text:00000530                 jz      short loc_53C
.text:00000532                 mov     edx, [ebp+arg_8]
.text:00000535                 mov     eax, [ebp+this]
.text:00000538                 mov     [edx], eax
.text:0000053A                 jmp     short loc_55F
.text:0000053C ; ---------------------------------------------------------------------------
.text:0000053C
.text:0000053C loc_53C:                                ; CODE XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+1Cj
.text:0000053C                 push    offset _IID_ICompressProgressInfo ; Buf2
.text:00000541                 mov     ecx, [ebp+Buf1]
.text:00000544                 push    ecx             ; Buf1
.text:00000545                 call    ___@8           ; __(x,x)
.text:0000054A                 test    eax, eax
.text:0000054C                 jz      short loc_558
.text:0000054E                 mov     edx, [ebp+arg_8]
.text:00000551                 mov     eax, [ebp+this]
.text:00000554                 mov     [edx], eax
.text:00000556                 jmp     short loc_55F
.text:00000558 ; ---------------------------------------------------------------------------
.text:00000558
.text:00000558 loc_558:                                ; CODE XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+38j
.text:00000558                 mov     eax, 80004002h
.text:0000055D                 jmp     short loc_570
.text:0000055F ; ---------------------------------------------------------------------------
.text:0000055F
.text:0000055F loc_55F:                                ; CODE XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+26j
.text:0000055F                                         ; CLocalProgress::QueryInterface(_GUID const &,void * *)+42j
.text:0000055F                 mov     ecx, [ebp+this]
.text:00000562                 mov     edx, [ecx+4]
.text:00000565                 add     edx, 1
.text:00000568                 mov     eax, [ebp+this]
.text:0000056B                 mov     [eax+4], edx
.text:0000056E                 xor     eax, eax
.text:00000570
.text:00000570 loc_570:                                ; CODE XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+49j
.text:00000570                 cmp     ebp, esp
.text:00000572                 call    __RTC_CheckEsp
.text:00000577                 pop     ebp
.text:00000578                 retn    0Ch
.text:00000578 ?QueryInterface@CLocalProgress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000578
.text:00000578 ; ---------------------------------------------------------------------------
.text:0000057B                 align 4
.text:0000057B _text           ends
.text:0000057B
.text:0000057C ; ===========================================================================
.text:0000057C
.text:0000057C ; Segment type: Pure code
.text:0000057C ; Segment permissions: Read/Execute
.text:0000057C _text           segment para public 'CODE' use32
.text:0000057C                 assume cs:_text
.text:0000057C                 ;org 57Ch
.text:0000057C ; COMDAT (pick any)
.text:0000057C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000057C
.text:0000057C ; =============== S U B R O U T I N E =======================================
.text:0000057C
.text:0000057C ; Attributes: bp-based frame
.text:0000057C
.text:0000057C ; unsigned __int32 __stdcall CLocalProgress::AddRef(CLocalProgress *this)
.text:0000057C                 public ?AddRef@CLocalProgress@@UAGKXZ
.text:0000057C ?AddRef@CLocalProgress@@UAGKXZ proc near ; DATA XREF: .rdata:0000032Co
.text:0000057C
.text:0000057C var_4           = dword ptr -4
.text:0000057C this            = dword ptr  8
.text:0000057C
.text:0000057C                 push    ebp
.text:0000057D                 mov     ebp, esp
.text:0000057F                 push    ecx
.text:00000580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000587                 mov     eax, [ebp+this]
.text:0000058A                 mov     ecx, [eax+4]
.text:0000058D                 add     ecx, 1
.text:00000590                 mov     [ebp+var_4], ecx
.text:00000593                 mov     edx, [ebp+this]
.text:00000596                 mov     eax, [ebp+var_4]
.text:00000599                 mov     [edx+4], eax
.text:0000059C                 mov     eax, [ebp+var_4]
.text:0000059F                 mov     esp, ebp
.text:000005A1                 pop     ebp
.text:000005A2                 retn    4
.text:000005A2 ?AddRef@CLocalProgress@@UAGKXZ endp
.text:000005A2
.text:000005A2 ; ---------------------------------------------------------------------------
.text:000005A5                 align 4
.text:000005A5 _text           ends
.text:000005A5
.text:000005A8 ; ===========================================================================
.text:000005A8
.text:000005A8 ; Segment type: Pure code
.text:000005A8 ; Segment permissions: Read/Execute
.text:000005A8 _text           segment para public 'CODE' use32
.text:000005A8                 assume cs:_text
.text:000005A8                 ;org 5A8h
.text:000005A8 ; COMDAT (pick any)
.text:000005A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000005A8
.text:000005A8 ; =============== S U B R O U T I N E =======================================
.text:000005A8
.text:000005A8 ; Attributes: bp-based frame
.text:000005A8
.text:000005A8 ; unsigned __int32 __stdcall CLocalProgress::Release(CLocalProgress *this)
.text:000005A8                 public ?Release@CLocalProgress@@UAGKXZ
.text:000005A8 ?Release@CLocalProgress@@UAGKXZ proc near ; DATA XREF: .rdata:00000330o
.text:000005A8
.text:000005A8 var_10          = dword ptr -10h
.text:000005A8 var_C           = dword ptr -0Ch
.text:000005A8 var_8           = dword ptr -8
.text:000005A8 var_4           = dword ptr -4
.text:000005A8 this            = dword ptr  8
.text:000005A8
.text:000005A8                 push    ebp
.text:000005A9                 mov     ebp, esp
.text:000005AB                 sub     esp, 10h
.text:000005AE                 mov     eax, 0CCCCCCCCh
.text:000005B3                 mov     [ebp+var_10], eax
.text:000005B6                 mov     [ebp+var_C], eax
.text:000005B9                 mov     [ebp+var_8], eax
.text:000005BC                 mov     [ebp+var_4], eax
.text:000005BF                 mov     eax, [ebp+this]
.text:000005C2                 mov     ecx, [eax+4]
.text:000005C5                 sub     ecx, 1
.text:000005C8                 mov     [ebp+var_C], ecx
.text:000005CB                 mov     edx, [ebp+this]
.text:000005CE                 mov     eax, [ebp+var_C]
.text:000005D1                 mov     [edx+4], eax
.text:000005D4                 cmp     [ebp+var_C], 0
.text:000005D8                 jz      short loc_5E2
.text:000005DA                 mov     ecx, [ebp+this]
.text:000005DD                 mov     eax, [ecx+4]
.text:000005E0                 jmp     short loc_60C
.text:000005E2 ; ---------------------------------------------------------------------------
.text:000005E2
.text:000005E2 loc_5E2:                                ; CODE XREF: CLocalProgress::Release(void)+30j
.text:000005E2                 mov     edx, [ebp+this]
.text:000005E5                 mov     [ebp+var_8], edx
.text:000005E8                 mov     eax, [ebp+var_8]
.text:000005EB                 mov     [ebp+var_4], eax
.text:000005EE                 cmp     [ebp+var_4], 0
.text:000005F2                 jz      short loc_603
.text:000005F4                 push    1
.text:000005F6                 mov     ecx, [ebp+var_4]
.text:000005F9                 call    ??_GCLocalProgress@@QAEPAXI@Z ; CLocalProgress::`scalar deleting destructor'(uint)
.text:000005FE                 mov     [ebp+var_10], eax
.text:00000601                 jmp     short loc_60A
.text:00000603 ; ---------------------------------------------------------------------------
.text:00000603
.text:00000603 loc_603:                                ; CODE XREF: CLocalProgress::Release(void)+4Aj
.text:00000603                 mov     [ebp+var_10], 0
.text:0000060A
.text:0000060A loc_60A:                                ; CODE XREF: CLocalProgress::Release(void)+59j
.text:0000060A                 xor     eax, eax
.text:0000060C
.text:0000060C loc_60C:                                ; CODE XREF: CLocalProgress::Release(void)+38j
.text:0000060C                 add     esp, 10h
.text:0000060F                 cmp     ebp, esp
.text:00000611                 call    __RTC_CheckEsp
.text:00000616                 mov     esp, ebp
.text:00000618                 pop     ebp
.text:00000619                 retn    4
.text:00000619 ?Release@CLocalProgress@@UAGKXZ endp
.text:00000619
.text:00000619 _text           ends
.text:00000619
.text:0000061C ; ===========================================================================
.text:0000061C
.text:0000061C ; Segment type: Pure code
.text:0000061C ; Segment permissions: Read/Execute
.text:0000061C _text           segment para public 'CODE' use32
.text:0000061C                 assume cs:_text
.text:0000061C                 ;org 61Ch
.text:0000061C ; COMDAT (pick any)
.text:0000061C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000061C
.text:0000061C ; =============== S U B R O U T I N E =======================================
.text:0000061C
.text:0000061C ; Attributes: bp-based frame
.text:0000061C
.text:0000061C ; public: void * __thiscall CLocalProgress::`scalar deleting destructor'(unsigned int)
.text:0000061C                 public ??_GCLocalProgress@@QAEPAXI@Z
.text:0000061C ??_GCLocalProgress@@QAEPAXI@Z proc near ; CODE XREF: CLocalProgress::Release(void)+51p
.text:0000061C
.text:0000061C var_4           = dword ptr -4
.text:0000061C arg_0           = dword ptr  8
.text:0000061C
.text:0000061C                 push    ebp
.text:0000061D                 mov     ebp, esp
.text:0000061F                 push    ecx
.text:00000620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000627                 mov     [ebp+var_4], ecx
.text:0000062A                 mov     ecx, [ebp+var_4] ; this
.text:0000062D                 call    ??1CLocalProgress@@QAE@XZ ; CLocalProgress::~CLocalProgress(void)
.text:00000632                 mov     eax, [ebp+arg_0]
.text:00000635                 and     eax, 1
.text:00000638                 jz      short loc_646
.text:0000063A                 mov     ecx, [ebp+var_4]
.text:0000063D                 push    ecx             ; void *
.text:0000063E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000643                 add     esp, 4
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: CLocalProgress::`scalar deleting destructor'(uint)+1Cj
.text:00000646                 mov     eax, [ebp+var_4]
.text:00000649                 add     esp, 4
.text:0000064C                 cmp     ebp, esp
.text:0000064E                 call    __RTC_CheckEsp
.text:00000653                 mov     esp, ebp
.text:00000655                 pop     ebp
.text:00000656                 retn    4
.text:00000656 ??_GCLocalProgress@@QAEPAXI@Z endp
.text:00000656
.text:00000656 ; ---------------------------------------------------------------------------
.text:00000659                 align 4
.text:00000659 _text           ends
.text:00000659
.text:0000065C ; ===========================================================================
.text:0000065C
.text:0000065C ; Segment type: Pure code
.text:0000065C ; Segment permissions: Read/Execute
.text:0000065C _text           segment para public 'CODE' use32
.text:0000065C                 assume cs:_text
.text:0000065C                 ;org 65Ch
.text:0000065C ; COMDAT (pick any)
.text:0000065C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000065C
.text:0000065C ; =============== S U B R O U T I N E =======================================
.text:0000065C
.text:0000065C ; Attributes: bp-based frame
.text:0000065C
.text:0000065C ; _DWORD __thiscall CLocalProgress::~CLocalProgress(CLocalProgress *__hidden this)
.text:0000065C                 public ??1CLocalProgress@@QAE@XZ
.text:0000065C ??1CLocalProgress@@QAE@XZ proc near     ; CODE XREF: CLocalProgress::`scalar deleting destructor'(uint)+11p
.text:0000065C
.text:0000065C var_10          = dword ptr -10h
.text:0000065C var_C           = dword ptr -0Ch
.text:0000065C var_4           = dword ptr -4
.text:0000065C
.text:0000065C                 push    ebp
.text:0000065D                 mov     ebp, esp
.text:0000065F                 push    0FFFFFFFFh
.text:00000661                 push    offset __ehhandler$??1CLocalProgress@@QAE@XZ
.text:00000666                 mov     eax, large fs:0
.text:0000066C                 push    eax
.text:0000066D                 push    ecx
.text:0000066E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000675                 mov     eax, dword ptr ds:___security_cookie
.text:0000067A                 xor     eax, ebp
.text:0000067C                 push    eax
.text:0000067D                 lea     eax, [ebp+var_C]
.text:00000680                 mov     large fs:0, eax
.text:00000686                 mov     [ebp+var_10], ecx
.text:00000689                 mov     [ebp+var_4], 0
.text:00000690                 mov     ecx, [ebp+var_10]
.text:00000693                 add     ecx, 0Ch
.text:00000696                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000069B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006A2                 mov     ecx, [ebp+var_10]
.text:000006A5                 add     ecx, 8
.text:000006A8                 call    ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text:000006AD                 mov     ecx, [ebp+var_C]
.text:000006B0                 mov     large fs:0, ecx
.text:000006B7                 pop     ecx
.text:000006B8                 add     esp, 10h
.text:000006BB                 cmp     ebp, esp
.text:000006BD                 call    __RTC_CheckEsp
.text:000006C2                 mov     esp, ebp
.text:000006C4                 pop     ebp
.text:000006C5                 retn
.text:000006C5 ??1CLocalProgress@@QAE@XZ endp
.text:000006C5
.text:000006C5 ; ---------------------------------------------------------------------------
.text:000006C6                 align 4
.text:000006C6 _text           ends
.text:000006C6
.text$x:000006C8 ; ===========================================================================
.text$x:000006C8
.text$x:000006C8 ; Segment type: Pure code
.text$x:000006C8 ; Segment permissions: Read/Execute
.text$x:000006C8 _text$x         segment para public 'CODE' use32
.text$x:000006C8                 assume cs:_text$x
.text$x:000006C8                 ;org 6C8h
.text$x:000006C8 ; COMDAT (pick associative to section at 65C)
.text$x:000006C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000006C8
.text$x:000006C8 ; =============== S U B R O U T I N E =======================================
.text$x:000006C8
.text$x:000006C8
.text$x:000006C8 __unwindfunclet$??1CLocalProgress@@QAE@XZ$0 proc near
.text$x:000006C8                                         ; DATA XREF: .xdata$x:000006F4o
.text$x:000006C8                 mov     ecx, [ebp-10h]
.text$x:000006CB                 add     ecx, 8
.text$x:000006CE                 jmp     ??1?$CMyComPtr@UIProgress@@@@QAE@XZ ; CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)
.text$x:000006CE __unwindfunclet$??1CLocalProgress@@QAE@XZ$0 endp
.text$x:000006CE
.text$x:000006D3
.text$x:000006D3 ; =============== S U B R O U T I N E =======================================
.text$x:000006D3
.text$x:000006D3
.text$x:000006D3 __ehhandler$??1CLocalProgress@@QAE@XZ proc near
.text$x:000006D3                                         ; DATA XREF: CLocalProgress::~CLocalProgress(void)+5o
.text$x:000006D3
.text$x:000006D3 arg_4           = dword ptr  8
.text$x:000006D3
.text$x:000006D3                 mov     edx, [esp+arg_4]
.text$x:000006D7                 lea     eax, [edx+0Ch]
.text$x:000006DA                 mov     ecx, [edx-8]
.text$x:000006DD                 xor     ecx, eax
.text$x:000006DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000006E4                 mov     eax, offset __ehfuncinfo$??1CLocalProgress@@QAE@XZ
.text$x:000006E9                 jmp     ___CxxFrameHandler3
.text$x:000006E9 __ehhandler$??1CLocalProgress@@QAE@XZ endp
.text$x:000006E9
.text$x:000006E9 ; ---------------------------------------------------------------------------
.text$x:000006EE                 align 10h
.text$x:000006EE _text$x         ends
.text$x:000006EE
.xdata$x:000006F0 ; ===========================================================================
.xdata$x:000006F0
.xdata$x:000006F0 ; Segment type: Pure data
.xdata$x:000006F0 ; Segment permissions: Read
.xdata$x:000006F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000006F0                 assume cs:_xdata$x
.xdata$x:000006F0                 ;org 6F0h
.xdata$x:000006F0 ; COMDAT (pick associative to section at 65C)
.xdata$x:000006F0 __unwindtable$??1CLocalProgress@@QAE@XZ db 0FFh
.xdata$x:000006F0                                         ; DATA XREF: .xdata$x:00000700o
.xdata$x:000006F1                 db 0FFh
.xdata$x:000006F2                 db 0FFh
.xdata$x:000006F3                 db 0FFh
.xdata$x:000006F4                 dd offset __unwindfunclet$??1CLocalProgress@@QAE@XZ$0
.xdata$x:000006F8 __ehfuncinfo$??1CLocalProgress@@QAE@XZ db  22h ; "
.xdata$x:000006F8                                         ; DATA XREF: __ehhandler$??1CLocalProgress@@QAE@XZ+11o
.xdata$x:000006F9                 db    5
.xdata$x:000006FA                 db  93h ; ô
.xdata$x:000006FB                 db  19h
.xdata$x:000006FC                 db    1
.xdata$x:000006FD                 db    0
.xdata$x:000006FE                 db    0
.xdata$x:000006FF                 db    0
.xdata$x:00000700                 dd offset __unwindtable$??1CLocalProgress@@QAE@XZ
.xdata$x:00000704                 db    0
.xdata$x:00000705                 db    0
.xdata$x:00000706                 db    0
.xdata$x:00000707                 db    0
.xdata$x:00000708                 db    0
.xdata$x:00000709                 db    0
.xdata$x:0000070A                 db    0
.xdata$x:0000070B                 db    0
.xdata$x:0000070C                 db    0
.xdata$x:0000070D                 db    0
.xdata$x:0000070E                 db    0
.xdata$x:0000070F                 db    0
.xdata$x:00000710                 db    0
.xdata$x:00000711                 db    0
.xdata$x:00000712                 db    0
.xdata$x:00000713                 db    0
.xdata$x:00000714                 db    0
.xdata$x:00000715                 db    0
.xdata$x:00000716                 db    0
.xdata$x:00000717                 db    0
.xdata$x:00000718                 db    1
.xdata$x:00000719                 db    0
.xdata$x:0000071A                 db    0
.xdata$x:0000071B                 db    0
.xdata$x:0000071B _xdata$x        ends
.xdata$x:0000071B
.text:0000071C ; ===========================================================================
.text:0000071C
.text:0000071C ; Segment type: Pure code
.text:0000071C ; Segment permissions: Read/Execute
.text:0000071C _text           segment para public 'CODE' use32
.text:0000071C                 assume cs:_text
.text:0000071C                 ;org 71Ch
.text:0000071C ; COMDAT (pick any)
.text:0000071C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000071C
.text:0000071C ; =============== S U B R O U T I N E =======================================
.text:0000071C
.text:0000071C ; Attributes: bp-based frame
.text:0000071C
.text:0000071C ; _DWORD __thiscall ICompressProgressInfo::ICompressProgressInfo(ICompressProgressInfo *__hidden this)
.text:0000071C                 public ??0ICompressProgressInfo@@QAE@XZ
.text:0000071C ??0ICompressProgressInfo@@QAE@XZ proc near
.text:0000071C                                         ; CODE XREF: CLocalProgress::CLocalProgress(void)+30p
.text:0000071C
.text:0000071C var_4           = dword ptr -4
.text:0000071C
.text:0000071C                 push    ebp
.text:0000071D                 mov     ebp, esp
.text:0000071F                 push    ecx
.text:00000720                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000727                 mov     [ebp+var_4], ecx
.text:0000072A                 mov     ecx, [ebp+var_4]
.text:0000072D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000732                 mov     eax, [ebp+var_4]
.text:00000735                 mov     dword ptr [eax], offset ??_7ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`vftable'
.text:0000073B                 mov     eax, [ebp+var_4]
.text:0000073E                 add     esp, 4
.text:00000741                 cmp     ebp, esp
.text:00000743                 call    __RTC_CheckEsp
.text:00000748                 mov     esp, ebp
.text:0000074A                 pop     ebp
.text:0000074B                 retn
.text:0000074B ??0ICompressProgressInfo@@QAE@XZ endp
.text:0000074B
.text:0000074B _text           ends
.text:0000074B
.rdata:0000074C ; ===========================================================================
.rdata:0000074C
.rdata:0000074C ; Segment type: Pure data
.rdata:0000074C ; Segment permissions: Read
.rdata:0000074C _rdata          segment dword public 'DATA' use32
.rdata:0000074C                 assume cs:_rdata
.rdata:0000074C                 ;org 74Ch
.rdata:0000074C ; COMDAT (pick largest)
.rdata:0000074C                 dd offset ??_R4ICompressProgressInfo@@6B@ ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata:00000750                 public ??_7ICompressProgressInfo@@6B@
.rdata:00000750 ; const ICompressProgressInfo::`vftable'
.rdata:00000750 ??_7ICompressProgressInfo@@6B@ dd offset __purecall
.rdata:00000750                                         ; DATA XREF: ICompressProgressInfo::ICompressProgressInfo(void)+19o
.rdata:00000754                 dd offset __purecall
.rdata:00000758                 dd offset __purecall
.rdata:0000075C                 dd offset __purecall
.rdata:0000075C _rdata          ends
.rdata:0000075C
.rdata$r:00000760 ; ===========================================================================
.rdata$r:00000760
.rdata$r:00000760 ; Segment type: Pure data
.rdata$r:00000760 ; Segment permissions: Read
.rdata$r:00000760 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000760                 assume cs:_rdata$r
.rdata$r:00000760                 ;org 760h
.rdata$r:00000760 ; COMDAT (pick any)
.rdata$r:00000760                 public ??_R4ICompressProgressInfo@@6B@
.rdata$r:00000760 ; const ICompressProgressInfo::`RTTI Complete Object Locator'
.rdata$r:00000760 ??_R4ICompressProgressInfo@@6B@ db    0 ; DATA XREF: .rdata:0000074Co
.rdata$r:00000761                 db    0
.rdata$r:00000762                 db    0
.rdata$r:00000763                 db    0
.rdata$r:00000764                 db    0
.rdata$r:00000765                 db    0
.rdata$r:00000766                 db    0
.rdata$r:00000767                 db    0
.rdata$r:00000768                 db    0
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 dd offset ??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo `RTTI Type Descriptor'
.rdata$r:00000770                 dd offset ??_R3ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000770 _rdata$r        ends
.rdata$r:00000770
.text:00000774 ; ===========================================================================
.text:00000774
.text:00000774 ; Segment type: Pure code
.text:00000774 ; Segment permissions: Read/Execute
.text:00000774 _text           segment para public 'CODE' use32
.text:00000774                 assume cs:_text
.text:00000774                 ;org 774h
.text:00000774 ; COMDAT (pick any)
.text:00000774                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000774
.text:00000774 ; =============== S U B R O U T I N E =======================================
.text:00000774
.text:00000774 ; Attributes: bp-based frame
.text:00000774
.text:00000774 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000774                 public ??0IUnknown@@QAE@XZ
.text:00000774 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressProgressInfo::ICompressProgressInfo(void)+11p
.text:00000774
.text:00000774 var_4           = dword ptr -4
.text:00000774
.text:00000774                 push    ebp
.text:00000775                 mov     ebp, esp
.text:00000777                 push    ecx
.text:00000778                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000077F                 mov     [ebp+var_4], ecx
.text:00000782                 mov     eax, [ebp+var_4]
.text:00000785                 mov     esp, ebp
.text:00000787                 pop     ebp
.text:00000788                 retn
.text:00000788 ??0IUnknown@@QAE@XZ endp
.text:00000788
.text:00000788 ; ---------------------------------------------------------------------------
.text:00000789                 align 4
.text:00000789 _text           ends
.text:00000789
.text:0000078C ; ===========================================================================
.text:0000078C
.text:0000078C ; Segment type: Pure code
.text:0000078C ; Segment permissions: Read/Execute
.text:0000078C _text           segment para public 'CODE' use32
.text:0000078C                 assume cs:_text
.text:0000078C                 ;org 78Ch
.text:0000078C ; COMDAT (pick any)
.text:0000078C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000078C
.text:0000078C ; =============== S U B R O U T I N E =======================================
.text:0000078C
.text:0000078C ; Attributes: bp-based frame
.text:0000078C
.text:0000078C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000078C                 public ___@8
.text:0000078C ___@8           proc near               ; CODE XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+15p
.text:0000078C                                         ; CLocalProgress::QueryInterface(_GUID const &,void * *)+31p
.text:0000078C
.text:0000078C Buf1            = dword ptr  8
.text:0000078C Buf2            = dword ptr  0Ch
.text:0000078C
.text:0000078C                 push    ebp
.text:0000078D                 mov     ebp, esp
.text:0000078F                 mov     eax, [ebp+Buf2]
.text:00000792                 push    eax             ; Buf2
.text:00000793                 mov     ecx, [ebp+Buf1]
.text:00000796                 push    ecx             ; Buf1
.text:00000797                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000079C                 cmp     ebp, esp
.text:0000079E                 call    __RTC_CheckEsp
.text:000007A3                 pop     ebp
.text:000007A4                 retn    8
.text:000007A4 ___@8           endp
.text:000007A4
.text:000007A4 ; ---------------------------------------------------------------------------
.text:000007A7                 align 4
.text:000007A7 _text           ends
.text:000007A7
.text:000007A8 ; ===========================================================================
.text:000007A8
.text:000007A8 ; Segment type: Pure code
.text:000007A8 ; Segment permissions: Read/Execute
.text:000007A8 _text           segment para public 'CODE' use32
.text:000007A8                 assume cs:_text
.text:000007A8                 ;org 7A8h
.text:000007A8 ; COMDAT (pick any)
.text:000007A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007A8
.text:000007A8 ; =============== S U B R O U T I N E =======================================
.text:000007A8
.text:000007A8 ; Attributes: bp-based frame
.text:000007A8
.text:000007A8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000007A8                 public _IsEqualGUID@8
.text:000007A8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000007A8
.text:000007A8 Buf1            = dword ptr  8
.text:000007A8 Buf2            = dword ptr  0Ch
.text:000007A8
.text:000007A8                 push    ebp
.text:000007A9                 mov     ebp, esp
.text:000007AB                 push    10h             ; Size
.text:000007AD                 mov     eax, [ebp+Buf2]
.text:000007B0                 push    eax             ; Buf2
.text:000007B1                 mov     ecx, [ebp+Buf1]
.text:000007B4                 push    ecx             ; Buf1
.text:000007B5                 call    _memcmp
.text:000007BA                 add     esp, 0Ch
.text:000007BD                 neg     eax
.text:000007BF                 sbb     eax, eax
.text:000007C1                 add     eax, 1
.text:000007C4                 cmp     ebp, esp
.text:000007C6                 call    __RTC_CheckEsp
.text:000007CB                 pop     ebp
.text:000007CC                 retn    8
.text:000007CC _IsEqualGUID@8  endp
.text:000007CC
.text:000007CC ; ---------------------------------------------------------------------------
.text:000007CF                 align 10h
.text:000007CF _text           ends
.text:000007CF
.text:000007D0 ; ===========================================================================
.text:000007D0
.text:000007D0 ; Segment type: Pure code
.text:000007D0 ; Segment permissions: Read/Execute
.text:000007D0 _text           segment para public 'CODE' use32
.text:000007D0                 assume cs:_text
.text:000007D0                 ;org 7D0h
.text:000007D0 ; COMDAT (pick any)
.text:000007D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007D0
.text:000007D0 ; =============== S U B R O U T I N E =======================================
.text:000007D0
.text:000007D0 ; Attributes: bp-based frame
.text:000007D0
.text:000007D0 ; public: __thiscall CMyComPtr<struct IProgress>::CMyComPtr<struct IProgress>(void)
.text:000007D0                 public ??0?$CMyComPtr@UIProgress@@@@QAE@XZ
.text:000007D0 ??0?$CMyComPtr@UIProgress@@@@QAE@XZ proc near
.text:000007D0                                         ; CODE XREF: CLocalProgress::CLocalProgress(void)+4Fp
.text:000007D0
.text:000007D0 var_4           = dword ptr -4
.text:000007D0
.text:000007D0                 push    ebp
.text:000007D1                 mov     ebp, esp
.text:000007D3                 push    ecx
.text:000007D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007DB                 mov     [ebp+var_4], ecx
.text:000007DE                 mov     eax, [ebp+var_4]
.text:000007E1                 mov     dword ptr [eax], 0
.text:000007E7                 mov     eax, [ebp+var_4]
.text:000007EA                 mov     esp, ebp
.text:000007EC                 pop     ebp
.text:000007ED                 retn
.text:000007ED ??0?$CMyComPtr@UIProgress@@@@QAE@XZ endp
.text:000007ED
.text:000007ED ; ---------------------------------------------------------------------------
.text:000007EE                 align 10h
.text:000007EE _text           ends
.text:000007EE
.text:000007F0 ; ===========================================================================
.text:000007F0
.text:000007F0 ; Segment type: Pure code
.text:000007F0 ; Segment permissions: Read/Execute
.text:000007F0 _text           segment para public 'CODE' use32
.text:000007F0                 assume cs:_text
.text:000007F0                 ;org 7F0h
.text:000007F0 ; COMDAT (pick any)
.text:000007F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007F0
.text:000007F0 ; =============== S U B R O U T I N E =======================================
.text:000007F0
.text:000007F0 ; Attributes: bp-based frame
.text:000007F0
.text:000007F0 ; public: __thiscall CMyComPtr<struct IProgress>::~CMyComPtr<struct IProgress>(void)
.text:000007F0                 public ??1?$CMyComPtr@UIProgress@@@@QAE@XZ
.text:000007F0 ??1?$CMyComPtr@UIProgress@@@@QAE@XZ proc near
.text:000007F0                                         ; CODE XREF: __unwindfunclet$??0CLocalProgress@@QAE@XZ$0+6j
.text:000007F0                                         ; CLocalProgress::~CLocalProgress(void)+4Cp ...
.text:000007F0
.text:000007F0 var_4           = dword ptr -4
.text:000007F0
.text:000007F0                 push    ebp
.text:000007F1                 mov     ebp, esp
.text:000007F3                 push    ecx
.text:000007F4                 push    esi
.text:000007F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007FC                 mov     [ebp+var_4], ecx
.text:000007FF                 mov     eax, [ebp+var_4]
.text:00000802                 cmp     dword ptr [eax], 0
.text:00000805                 jz      short loc_822
.text:00000807                 mov     ecx, [ebp+var_4]
.text:0000080A                 mov     edx, [ecx]
.text:0000080C                 mov     eax, [ebp+var_4]
.text:0000080F                 mov     ecx, [eax]
.text:00000811                 mov     edx, [edx]
.text:00000813                 mov     esi, esp
.text:00000815                 push    ecx
.text:00000816                 mov     eax, [edx+8]
.text:00000819                 call    eax
.text:0000081B                 cmp     esi, esp
.text:0000081D                 call    __RTC_CheckEsp
.text:00000822
.text:00000822 loc_822:                                ; CODE XREF: CMyComPtr<IProgress>::~CMyComPtr<IProgress>(void)+15j
.text:00000822                 pop     esi
.text:00000823                 add     esp, 4
.text:00000826                 cmp     ebp, esp
.text:00000828                 call    __RTC_CheckEsp
.text:0000082D                 mov     esp, ebp
.text:0000082F                 pop     ebp
.text:00000830                 retn
.text:00000830 ??1?$CMyComPtr@UIProgress@@@@QAE@XZ endp
.text:00000830
.text:00000830 ; ---------------------------------------------------------------------------
.text:00000831                 align 4
.text:00000831 _text           ends
.text:00000831
.text:00000834 ; ===========================================================================
.text:00000834
.text:00000834 ; Segment type: Pure code
.text:00000834 ; Segment permissions: Read/Execute
.text:00000834 _text           segment para public 'CODE' use32
.text:00000834                 assume cs:_text
.text:00000834                 ;org 834h
.text:00000834 ; COMDAT (pick any)
.text:00000834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000834
.text:00000834 ; =============== S U B R O U T I N E =======================================
.text:00000834
.text:00000834 ; Attributes: bp-based frame
.text:00000834
.text:00000834 ; public: struct IProgress * __thiscall CMyComPtr<struct IProgress>::operator->(void)const
.text:00000834                 public ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ
.text:00000834 ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ proc near
.text:00000834                                         ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+112p
.text:00000834
.text:00000834 var_4           = dword ptr -4
.text:00000834
.text:00000834                 push    ebp
.text:00000835                 mov     ebp, esp
.text:00000837                 push    ecx
.text:00000838                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000083F                 mov     [ebp+var_4], ecx
.text:00000842                 mov     eax, [ebp+var_4]
.text:00000845                 mov     eax, [eax]
.text:00000847                 mov     esp, ebp
.text:00000849                 pop     ebp
.text:0000084A                 retn
.text:0000084A ??C?$CMyComPtr@UIProgress@@@@QBEPAUIProgress@@XZ endp
.text:0000084A
.text:0000084A ; ---------------------------------------------------------------------------
.text:0000084B                 align 4
.text:0000084B _text           ends
.text:0000084B
.text:0000084C ; ===========================================================================
.text:0000084C
.text:0000084C ; Segment type: Pure code
.text:0000084C ; Segment permissions: Read/Execute
.text:0000084C _text           segment para public 'CODE' use32
.text:0000084C                 assume cs:_text
.text:0000084C                 ;org 84Ch
.text:0000084C ; COMDAT (pick any)
.text:0000084C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000084C
.text:0000084C ; =============== S U B R O U T I N E =======================================
.text:0000084C
.text:0000084C ; Attributes: bp-based frame
.text:0000084C
.text:0000084C ; public: struct IProgress * __thiscall CMyComPtr<struct IProgress>::operator=(struct IProgress *)
.text:0000084C                 public ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z
.text:0000084C ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z proc near
.text:0000084C                                         ; CODE XREF: CLocalProgress::Init(IProgress *,bool)+23p
.text:0000084C
.text:0000084C var_4           = dword ptr -4
.text:0000084C arg_0           = dword ptr  8
.text:0000084C
.text:0000084C                 push    ebp
.text:0000084D                 mov     ebp, esp
.text:0000084F                 push    ecx
.text:00000850                 push    esi
.text:00000851                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000858                 mov     [ebp+var_4], ecx
.text:0000085B                 cmp     [ebp+arg_0], 0
.text:0000085F                 jz      short loc_878
.text:00000861                 mov     eax, [ebp+arg_0]
.text:00000864                 mov     ecx, [eax]
.text:00000866                 mov     esi, esp
.text:00000868                 mov     edx, [ebp+arg_0]
.text:0000086B                 push    edx
.text:0000086C                 mov     eax, [ecx+4]
.text:0000086F                 call    eax
.text:00000871                 cmp     esi, esp
.text:00000873                 call    __RTC_CheckEsp
.text:00000878
.text:00000878 loc_878:                                ; CODE XREF: CMyComPtr<IProgress>::operator=(IProgress *)+13j
.text:00000878                 mov     ecx, [ebp+var_4]
.text:0000087B                 cmp     dword ptr [ecx], 0
.text:0000087E                 jz      short loc_89B
.text:00000880                 mov     edx, [ebp+var_4]
.text:00000883                 mov     eax, [edx]
.text:00000885                 mov     ecx, [ebp+var_4]
.text:00000888                 mov     edx, [ecx]
.text:0000088A                 mov     eax, [eax]
.text:0000088C                 mov     esi, esp
.text:0000088E                 push    edx
.text:0000088F                 mov     ecx, [eax+8]
.text:00000892                 call    ecx
.text:00000894                 cmp     esi, esp
.text:00000896                 call    __RTC_CheckEsp
.text:0000089B
.text:0000089B loc_89B:                                ; CODE XREF: CMyComPtr<IProgress>::operator=(IProgress *)+32j
.text:0000089B                 mov     edx, [ebp+var_4]
.text:0000089E                 mov     eax, [ebp+arg_0]
.text:000008A1                 mov     [edx], eax
.text:000008A3                 mov     eax, [ebp+arg_0]
.text:000008A6                 pop     esi
.text:000008A7                 add     esp, 4
.text:000008AA                 cmp     ebp, esp
.text:000008AC                 call    __RTC_CheckEsp
.text:000008B1                 mov     esp, ebp
.text:000008B3                 pop     ebp
.text:000008B4                 retn    4
.text:000008B4 ??4?$CMyComPtr@UIProgress@@@@QAEPAUIProgress@@PAU1@@Z endp
.text:000008B4
.text:000008B4 ; ---------------------------------------------------------------------------
.text:000008B7                 align 4
.text:000008B7 _text           ends
.text:000008B7
.text:000008B8 ; ===========================================================================
.text:000008B8
.text:000008B8 ; Segment type: Pure code
.text:000008B8 ; Segment permissions: Read/Execute
.text:000008B8 _text           segment para public 'CODE' use32
.text:000008B8                 assume cs:_text
.text:000008B8                 ;org 8B8h
.text:000008B8 ; COMDAT (pick any)
.text:000008B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008B8
.text:000008B8 ; =============== S U B R O U T I N E =======================================
.text:000008B8
.text:000008B8 ; Attributes: bp-based frame
.text:000008B8
.text:000008B8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(void)
.text:000008B8                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:000008B8 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:000008B8                                         ; CODE XREF: CLocalProgress::CLocalProgress(void)+61p
.text:000008B8
.text:000008B8 var_4           = dword ptr -4
.text:000008B8
.text:000008B8                 push    ebp
.text:000008B9                 mov     ebp, esp
.text:000008BB                 push    ecx
.text:000008BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008C3                 mov     [ebp+var_4], ecx
.text:000008C6                 mov     eax, [ebp+var_4]
.text:000008C9                 mov     dword ptr [eax], 0
.text:000008CF                 mov     eax, [ebp+var_4]
.text:000008D2                 mov     esp, ebp
.text:000008D4                 pop     ebp
.text:000008D5                 retn
.text:000008D5 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:000008D5
.text:000008D5 ; ---------------------------------------------------------------------------
.text:000008D6                 align 4
.text:000008D6 _text           ends
.text:000008D6
.text:000008D8 ; ===========================================================================
.text:000008D8
.text:000008D8 ; Segment type: Pure code
.text:000008D8 ; Segment permissions: Read/Execute
.text:000008D8 _text           segment para public 'CODE' use32
.text:000008D8                 assume cs:_text
.text:000008D8                 ;org 8D8h
.text:000008D8 ; COMDAT (pick any)
.text:000008D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008D8
.text:000008D8 ; =============== S U B R O U T I N E =======================================
.text:000008D8
.text:000008D8 ; Attributes: bp-based frame
.text:000008D8
.text:000008D8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:000008D8                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:000008D8 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:000008D8                                         ; CODE XREF: CLocalProgress::~CLocalProgress(void)+3Ap
.text:000008D8
.text:000008D8 var_4           = dword ptr -4
.text:000008D8
.text:000008D8                 push    ebp
.text:000008D9                 mov     ebp, esp
.text:000008DB                 push    ecx
.text:000008DC                 push    esi
.text:000008DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008E4                 mov     [ebp+var_4], ecx
.text:000008E7                 mov     eax, [ebp+var_4]
.text:000008EA                 cmp     dword ptr [eax], 0
.text:000008ED                 jz      short loc_90A
.text:000008EF                 mov     ecx, [ebp+var_4]
.text:000008F2                 mov     edx, [ecx]
.text:000008F4                 mov     eax, [ebp+var_4]
.text:000008F7                 mov     ecx, [eax]
.text:000008F9                 mov     edx, [edx]
.text:000008FB                 mov     esi, esp
.text:000008FD                 push    ecx
.text:000008FE                 mov     eax, [edx+8]
.text:00000901                 call    eax
.text:00000903                 cmp     esi, esp
.text:00000905                 call    __RTC_CheckEsp
.text:0000090A
.text:0000090A loc_90A:                                ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:0000090A                 pop     esi
.text:0000090B                 add     esp, 4
.text:0000090E                 cmp     ebp, esp
.text:00000910                 call    __RTC_CheckEsp
.text:00000915                 mov     esp, ebp
.text:00000917                 pop     ebp
.text:00000918                 retn
.text:00000918 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00000918
.text:00000918 ; ---------------------------------------------------------------------------
.text:00000919                 align 4
.text:00000919 _text           ends
.text:00000919
.text:0000091C ; ===========================================================================
.text:0000091C
.text:0000091C ; Segment type: Pure code
.text:0000091C ; Segment permissions: Read/Execute
.text:0000091C _text           segment para public 'CODE' use32
.text:0000091C                 assume cs:_text
.text:0000091C                 ;org 91Ch
.text:0000091C ; COMDAT (pick any)
.text:0000091C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000091C
.text:0000091C ; =============== S U B R O U T I N E =======================================
.text:0000091C
.text:0000091C ; Attributes: bp-based frame
.text:0000091C
.text:0000091C ; public: void __thiscall CMyComPtr<struct ICompressProgressInfo>::Release(void)
.text:0000091C                 public ?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ
.text:0000091C ?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ proc near
.text:0000091C                                         ; CODE XREF: CLocalProgress::Init(IProgress *,bool)+14p
.text:0000091C
.text:0000091C var_4           = dword ptr -4
.text:0000091C
.text:0000091C                 push    ebp
.text:0000091D                 mov     ebp, esp
.text:0000091F                 push    ecx
.text:00000920                 push    esi
.text:00000921                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000928                 mov     [ebp+var_4], ecx
.text:0000092B                 mov     eax, [ebp+var_4]
.text:0000092E                 cmp     dword ptr [eax], 0
.text:00000931                 jz      short loc_957
.text:00000933                 mov     ecx, [ebp+var_4]
.text:00000936                 mov     edx, [ecx]
.text:00000938                 mov     eax, [ebp+var_4]
.text:0000093B                 mov     ecx, [eax]
.text:0000093D                 mov     edx, [edx]
.text:0000093F                 mov     esi, esp
.text:00000941                 push    ecx
.text:00000942                 mov     eax, [edx+8]
.text:00000945                 call    eax
.text:00000947                 cmp     esi, esp
.text:00000949                 call    __RTC_CheckEsp
.text:0000094E                 mov     ecx, [ebp+var_4]
.text:00000951                 mov     dword ptr [ecx], 0
.text:00000957
.text:00000957 loc_957:                                ; CODE XREF: CMyComPtr<ICompressProgressInfo>::Release(void)+15j
.text:00000957                 pop     esi
.text:00000958                 add     esp, 4
.text:0000095B                 cmp     ebp, esp
.text:0000095D                 call    __RTC_CheckEsp
.text:00000962                 mov     esp, ebp
.text:00000964                 pop     ebp
.text:00000965                 retn
.text:00000965 ?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ endp
.text:00000965
.text:00000965 ; ---------------------------------------------------------------------------
.text:00000966                 align 4
.text:00000966 _text           ends
.text:00000966
.text:00000968 ; ===========================================================================
.text:00000968
.text:00000968 ; Segment type: Pure code
.text:00000968 ; Segment permissions: Read/Execute
.text:00000968 _text           segment para public 'CODE' use32
.text:00000968                 assume cs:_text
.text:00000968                 ;org 968h
.text:00000968 ; COMDAT (pick any)
.text:00000968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000968
.text:00000968 ; =============== S U B R O U T I N E =======================================
.text:00000968
.text:00000968 ; Attributes: bp-based frame
.text:00000968
.text:00000968 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00000968                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00000968 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00000968                                         ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+7Ap
.text:00000968
.text:00000968 var_4           = dword ptr -4
.text:00000968
.text:00000968                 push    ebp
.text:00000969                 mov     ebp, esp
.text:0000096B                 push    ecx
.text:0000096C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000973                 mov     [ebp+var_4], ecx
.text:00000976                 mov     eax, [ebp+var_4]
.text:00000979                 mov     eax, [eax]
.text:0000097B                 mov     esp, ebp
.text:0000097D                 pop     ebp
.text:0000097E                 retn
.text:0000097E ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:0000097E
.text:0000097E ; ---------------------------------------------------------------------------
.text:0000097F                 align 10h
.text:0000097F _text           ends
.text:0000097F
.text:00000980 ; ===========================================================================
.text:00000980
.text:00000980 ; Segment type: Pure code
.text:00000980 ; Segment permissions: Read/Execute
.text:00000980 _text           segment para public 'CODE' use32
.text:00000980                 assume cs:_text
.text:00000980                 ;org 980h
.text:00000980 ; COMDAT (pick any)
.text:00000980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000980
.text:00000980 ; =============== S U B R O U T I N E =======================================
.text:00000980
.text:00000980 ; Attributes: bp-based frame
.text:00000980
.text:00000980 ; public: struct ICompressProgressInfo * * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator&(void)
.text:00000980                 public ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ
.text:00000980 ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ proc near
.text:00000980                                         ; CODE XREF: CLocalProgress::Init(IProgress *,bool)+2Ep
.text:00000980
.text:00000980 var_4           = dword ptr -4
.text:00000980
.text:00000980                 push    ebp
.text:00000981                 mov     ebp, esp
.text:00000983                 push    ecx
.text:00000984                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000098B                 mov     [ebp+var_4], ecx
.text:0000098E                 mov     eax, [ebp+var_4]
.text:00000991                 mov     esp, ebp
.text:00000993                 pop     ebp
.text:00000994                 retn
.text:00000994 ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ endp
.text:00000994
.text:00000994 ; ---------------------------------------------------------------------------
.text:00000995                 align 4
.text:00000995 _text           ends
.text:00000995
.text:00000998 ; ===========================================================================
.text:00000998
.text:00000998 ; Segment type: Pure code
.text:00000998 ; Segment permissions: Read/Execute
.text:00000998 _text           segment para public 'CODE' use32
.text:00000998                 assume cs:_text
.text:00000998                 ;org 998h
.text:00000998 ; COMDAT (pick any)
.text:00000998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000998
.text:00000998 ; =============== S U B R O U T I N E =======================================
.text:00000998
.text:00000998 ; Attributes: bp-based frame
.text:00000998
.text:00000998 ; public: struct ICompressProgressInfo * __thiscall CMyComPtr<struct ICompressProgressInfo>::operator->(void)const
.text:00000998                 public ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00000998 ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00000998                                         ; CODE XREF: CLocalProgress::SetRatioInfo(unsigned __int64 const *,unsigned __int64 const *)+89p
.text:00000998
.text:00000998 var_4           = dword ptr -4
.text:00000998
.text:00000998                 push    ebp
.text:00000999                 mov     ebp, esp
.text:0000099B                 push    ecx
.text:0000099C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A3                 mov     [ebp+var_4], ecx
.text:000009A6                 mov     eax, [ebp+var_4]
.text:000009A9                 mov     eax, [eax]
.text:000009AB                 mov     esp, ebp
.text:000009AD                 pop     ebp
.text:000009AE                 retn
.text:000009AE ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:000009AE
.text:000009AE ; ---------------------------------------------------------------------------
.text:000009AF                 align 10h
.text:000009AF _text           ends
.text:000009AF
.text:000009B0 ; ===========================================================================
.text:000009B0
.text:000009B0 ; Segment type: Pure code
.text:000009B0 ; Segment permissions: Read/Execute
.text:000009B0 _text           segment para public 'CODE' use32
.text:000009B0                 assume cs:_text
.text:000009B0                 ;org 9B0h
.text:000009B0 ; COMDAT (pick any)
.text:000009B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009B0
.text:000009B0 ; =============== S U B R O U T I N E =======================================
.text:000009B0
.text:000009B0 ; Attributes: bp-based frame
.text:000009B0
.text:000009B0 ; public: long __thiscall CMyComPtr<struct IProgress>::QueryInterface<struct ICompressProgressInfo>(struct _GUID const &, struct ICompressProgressInfo * *)const
.text:000009B0                 public ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z
.text:000009B0 ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z proc near
.text:000009B0                                         ; CODE XREF: CLocalProgress::Init(IProgress *,bool)+3Fp
.text:000009B0
.text:000009B0 var_4           = dword ptr -4
.text:000009B0 arg_0           = dword ptr  8
.text:000009B0 arg_4           = dword ptr  0Ch
.text:000009B0
.text:000009B0                 push    ebp
.text:000009B1                 mov     ebp, esp
.text:000009B3                 push    ecx
.text:000009B4                 push    esi
.text:000009B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009BC                 mov     [ebp+var_4], ecx
.text:000009BF                 mov     esi, esp
.text:000009C1                 mov     eax, [ebp+arg_4]
.text:000009C4                 push    eax
.text:000009C5                 mov     ecx, [ebp+arg_0]
.text:000009C8                 push    ecx
.text:000009C9                 mov     edx, [ebp+var_4]
.text:000009CC                 mov     eax, [edx]
.text:000009CE                 mov     ecx, [ebp+var_4]
.text:000009D1                 mov     edx, [ecx]
.text:000009D3                 mov     eax, [eax]
.text:000009D5                 push    edx
.text:000009D6                 mov     ecx, [eax]
.text:000009D8                 call    ecx
.text:000009DA                 cmp     esi, esp
.text:000009DC                 call    __RTC_CheckEsp
.text:000009E1                 pop     esi
.text:000009E2                 add     esp, 4
.text:000009E5                 cmp     ebp, esp
.text:000009E7                 call    __RTC_CheckEsp
.text:000009EC                 mov     esp, ebp
.text:000009EE                 pop     ebp
.text:000009EF                 retn    8
.text:000009EF ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIProgress@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z endp
.text:000009EF
.text:000009EF _text           ends
.text:000009EF
UNDEF:00000A00 ; ===========================================================================
UNDEF:00000A00
UNDEF:00000A00 ; Segment type: Externs
UNDEF:00000A00 ; UNDEF
UNDEF:00000A00                 extrn ___security_cookie:near
UNDEF:00000A00                                         ; DATA XREF: CLocalProgress::CLocalProgress(void)+19r
UNDEF:00000A00                                         ; CLocalProgress::~CLocalProgress(void)+19r
UNDEF:00000A04                 extrn ___CxxFrameHandler3:near
UNDEF:00000A04                                         ; CODE XREF: __ehhandler$??0CLocalProgress@@QAE@XZ+16j
UNDEF:00000A04                                         ; __ehhandler$??1CLocalProgress@@QAE@XZ+16j
UNDEF:00000A08 ; __fastcall __security_check_cookie(x)
UNDEF:00000A08                 extrn @__security_check_cookie@4:near
UNDEF:00000A08                                         ; CODE XREF: __ehhandler$??0CLocalProgress@@QAE@XZ+Cp
UNDEF:00000A08                                         ; __ehhandler$??1CLocalProgress@@QAE@XZ+Cp
UNDEF:00000A0C                 extrn __RTC_CheckEsp:near
UNDEF:00000A0C                                         ; CODE XREF: CLocalProgress::CLocalProgress(void)+C1p
UNDEF:00000A0C                                         ; CLocalProgress::Init(IProgress *,bool)+52p ...
UNDEF:00000A10                 extrn __RTC_Shutdown:near
UNDEF:00000A10                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A14                 extrn __RTC_InitBase:near
UNDEF:00000A14                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A18 ; const type_info::`vftable'
UNDEF:00000A18                 extrn ??_7type_info@@6B@:near
UNDEF:00000A18                                         ; DATA XREF: .data:CLocalProgress `RTTI Type Descriptor'o
UNDEF:00000A18                                         ; .data:ICompressProgressInfo `RTTI Type Descriptor'o ...
UNDEF:00000A1C                 extrn _IID_ICompressProgressInfo:near
UNDEF:00000A1C                                         ; DATA XREF: CLocalProgress::Init(IProgress *,bool)+34o
UNDEF:00000A1C                                         ; CLocalProgress::QueryInterface(_GUID const &,void * *):loc_53Co
UNDEF:00000A20 ; const IID IID_IUnknown
UNDEF:00000A20                 extrn _IID_IUnknown:near
UNDEF:00000A20                                         ; DATA XREF: CLocalProgress::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000A24 ; void __cdecl operator delete(void *)
UNDEF:00000A24                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CLocalProgress::`scalar deleting destructor'(uint)+22p
UNDEF:00000A28                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressProgressInfo::`vftable'o
UNDEF:00000A28                                         ; .rdata:00000754o ...
UNDEF:00000A2C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000A2C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000A30 ; __fastcall _RTC_CheckStackVars(x, x)