.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A7CB0E8CFE1B3424860E1D8ED10F38AA
.text:00000000 ; Input CRC32 : 483950FD
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BcjCoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CBcjCoder::Init(CBcjCoder *this)
.text:00000000                 public ?Init@CBcjCoder@@UAGJXZ
.text:00000000 ?Init@CBcjCoder@@UAGJXZ proc near
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+this]
.text:00000006                 mov     dword ptr [eax+8], 0
.text:0000000D                 mov     ecx, [ebp+this]
.text:00000010                 mov     dword ptr [ecx+0Ch], 0
.text:00000017                 xor     eax, eax
.text:00000019                 pop     ebp
.text:0000001A                 retn    4
.text:0000001A ?Init@CBcjCoder@@UAGJXZ endp
.text:0000001A
.text:0000001A ; ---------------------------------------------------------------------------
.text:0000001D                 align 10h
.text:00000020
.text:00000020 ; =============== S U B R O U T I N E =======================================
.text:00000020
.text:00000020 ; Attributes: bp-based frame
.text:00000020
.text:00000020 ; public: virtual unsigned int __stdcall CBcjCoder::Filter(unsigned char *, unsigned int)
.text:00000020                 public ?Filter@CBcjCoder@@UAGIPAEI@Z
.text:00000020 ?Filter@CBcjCoder@@UAGIPAEI@Z proc near
.text:00000020
.text:00000020 var_4           = dword ptr -4
.text:00000020 arg_0           = dword ptr  8
.text:00000020 arg_4           = dword ptr  0Ch
.text:00000020 arg_8           = dword ptr  10h
.text:00000020
.text:00000020                 push    ebp
.text:00000021                 mov     ebp, esp
.text:00000023                 push    ecx
.text:00000024                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000002B                 mov     eax, [ebp+arg_0]
.text:0000002E                 mov     ecx, [eax+10h]
.text:00000031                 push    ecx
.text:00000032                 mov     edx, [ebp+arg_0]
.text:00000035                 add     edx, 0Ch
.text:00000038                 push    edx
.text:00000039                 mov     eax, [ebp+arg_0]
.text:0000003C                 mov     ecx, [eax+8]
.text:0000003F                 push    ecx
.text:00000040                 mov     edx, [ebp+arg_8]
.text:00000043                 push    edx
.text:00000044                 mov     eax, [ebp+arg_4]
.text:00000047                 push    eax
.text:00000048                 call    _x86_Convert@20 ; x86_Convert(x,x,x,x,x)
.text:0000004D                 mov     [ebp+var_4], eax
.text:00000050                 mov     ecx, [ebp+arg_0]
.text:00000053                 mov     edx, [ecx+8]
.text:00000056                 add     edx, [ebp+var_4]
.text:00000059                 mov     eax, [ebp+arg_0]
.text:0000005C                 mov     [eax+8], edx
.text:0000005F                 mov     eax, [ebp+var_4]
.text:00000062                 add     esp, 4
.text:00000065                 cmp     ebp, esp
.text:00000067                 call    __RTC_CheckEsp
.text:0000006C                 mov     esp, ebp
.text:0000006E                 pop     ebp
.text:0000006F                 retn    0Ch
.text:0000006F ?Filter@CBcjCoder@@UAGIPAEI@Z endp
.text:0000006F
.text:0000006F ; ---------------------------------------------------------------------------
.text:00000072                 align 4
.text:00000072 _text           ends
.text:00000072
.rtc$TMZ:00000074 ; ===========================================================================
.rtc$TMZ:00000074
.rtc$TMZ:00000074 ; Segment type: Pure data
.rtc$TMZ:00000074 ; Segment permissions: Read
.rtc$TMZ:00000074 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000074                 assume cs:_rtc$TMZ
.rtc$TMZ:00000074                 ;org 74h
.rtc$TMZ:00000074 ; COMDAT (pick any)
.rtc$TMZ:00000074 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000074 _rtc$TMZ        ends
.rtc$TMZ:00000074
.rtc$IMZ:00000078 ; ===========================================================================
.rtc$IMZ:00000078
.rtc$IMZ:00000078 ; Segment type: Pure data
.rtc$IMZ:00000078 ; Segment permissions: Read
.rtc$IMZ:00000078 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000078                 assume cs:_rtc$IMZ
.rtc$IMZ:00000078                 ;org 78h
.rtc$IMZ:00000078 ; COMDAT (pick any)
.rtc$IMZ:00000078 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000078 _rtc$IMZ        ends
.rtc$IMZ:00000078
UNDEF:00000080 ; ===========================================================================
UNDEF:00000080
UNDEF:00000080 ; Segment type: Externs
UNDEF:00000080 ; UNDEF
UNDEF:00000080                 extrn __RTC_Shutdown:near
UNDEF:00000080                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000084                 extrn __RTC_InitBase:near
UNDEF:00000084                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000088 ; __stdcall x86_Convert(x, x, x, x, x)
UNDEF:00000088                 extrn _x86_Convert@20:near
UNDEF:00000088                                         ; CODE XREF: CBcjCoder::Filter(uchar *,uint)+28p
UNDEF:0000008C                 extrn __RTC_CheckEsp:near
UNDEF:0000008C                                         ; CODE XREF: CBcjCoder::Filter(uchar *,uint)+47p
UNDEF:0000008C
UNDEF:0000008C
UNDEF:0000008C                 end