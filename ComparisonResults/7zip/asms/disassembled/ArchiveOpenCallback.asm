.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 79A0D19C66079963E08211DDED518537
.text:00000000 ; Input CRC32 : B58A1D18
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ArchiveOpenCallback.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __cdecl COpenCallbackImp::SetTotal(COpenCallbackImp *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00000000                 public ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000000 ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z proc near
.text:00000000
.text:00000000 var_28          = dword ptr -28h
.text:00000000 var_24          = dword ptr -24h
.text:00000000 var_20          = dword ptr -20h
.text:00000000 var_1C          = dword ptr -1Ch
.text:00000000 var_18          = dword ptr -18h
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 this            = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 arg_8           = dword ptr  10h
.text:00000000
.text:00000000 ; FUNCTION CHUNK AT .text:00000107 SIZE 0000001E BYTES
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 sub     esp, 18h
.text:00000015                 push    ebx
.text:00000016                 push    esi
.text:00000017                 push    edi
.text:00000018                 mov     eax, 0CCCCCCCCh
.text:0000001D                 mov     [ebp+var_28], eax
.text:00000020                 mov     [ebp+var_24], eax
.text:00000023                 mov     [ebp+var_20], eax
.text:00000026                 mov     [ebp+var_1C], eax
.text:00000029                 mov     [ebp+var_18], eax
.text:0000002C                 mov     [ebp+var_14], eax
.text:0000002F                 mov     eax, dword ptr ds:___security_cookie
.text:00000034                 xor     eax, ebp
.text:00000036                 push    eax
.text:00000037                 lea     eax, [ebp+var_C]
.text:0000003A                 mov     large fs:0, eax
.text:00000040
.text:00000040 loc_40:                                 ; DATA XREF: .xdata$x:__catchsym$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$2o
.text:00000040                                         ; .xdata$x:__catchsym$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$2o ...
.text:00000040                 mov     [ebp+var_10], esp
.text:00000043                 mov     [ebp+var_4], 0
.text:0000004A                 mov     ecx, [ebp+this]
.text:0000004D                 add     ecx, 94h ; 'รถ'
.text:00000053                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:00000058                 mov     [ebp+var_18], eax
.text:0000005B                 cmp     [ebp+var_18], 0
.text:0000005F                 jz      short loc_9F
.text:00000061                 mov     ecx, [ebp+this]
.text:00000064                 add     ecx, 94h ; 'รถ'
.text:0000006A                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:0000006F                 mov     [ebp+var_1C], eax
.text:00000072                 mov     eax, [ebp+var_1C]
.text:00000075                 mov     [ebp+var_20], eax
.text:00000078                 mov     esi, esp
.text:0000007A                 mov     ecx, [ebp+arg_8]
.text:0000007D                 push    ecx
.text:0000007E                 mov     edx, [ebp+arg_4]
.text:00000081                 push    edx
.text:00000082                 mov     eax, [ebp+var_20]
.text:00000085                 push    eax
.text:00000086                 mov     ecx, [ebp+var_20]
.text:00000089                 mov     edx, [ecx]
.text:0000008B                 mov     eax, [edx+0Ch]
.text:0000008E                 call    eax
.text:00000090                 cmp     esi, esp
.text:00000092                 call    __RTC_CheckEsp
.text:00000097                 mov     [ebp+var_24], eax
.text:0000009A                 mov     eax, [ebp+var_24]
.text:0000009D                 jmp     short loc_107
.text:0000009F ; ---------------------------------------------------------------------------
.text:0000009F
.text:0000009F loc_9F:                                 ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+5Fj
.text:0000009F                 mov     ecx, [ebp+this]
.text:000000A2                 cmp     dword ptr [ecx+90h], 0
.text:000000A9                 jnz     short loc_AF
.text:000000AB                 xor     eax, eax
.text:000000AD                 jmp     short loc_107
.text:000000AF ; ---------------------------------------------------------------------------
.text:000000AF
.text:000000AF loc_AF:                                 ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+A9j
.text:000000AF                 mov     esi, esp
.text:000000B1                 mov     edx, [ebp+arg_8]
.text:000000B4                 push    edx
.text:000000B5                 mov     eax, [ebp+arg_4]
.text:000000B8                 push    eax
.text:000000B9                 mov     ecx, [ebp+this]
.text:000000BC                 mov     ecx, [ecx+90h]
.text:000000C2                 mov     edx, [ebp+this]
.text:000000C5                 mov     eax, [edx+90h]
.text:000000CB                 mov     edx, [eax]
.text:000000CD                 mov     eax, [edx+4]
.text:000000D0                 call    eax
.text:000000D2                 cmp     esi, esp
.text:000000D4                 call    __RTC_CheckEsp
.text:000000D9                 mov     [ebp+var_28], eax
.text:000000DC                 mov     eax, [ebp+var_28]
.text:000000DF                 jmp     short loc_107
.text:000000DF ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z endp
.text:000000DF
.text:000000E1
.text:000000E1 ; =============== S U B R O U T I N E =======================================
.text:000000E1
.text:000000E1
.text:000000E1 __catch$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$0 proc near
.text:000000E1                                         ; DATA XREF: .xdata$x:00000A54o
.text:000000E1                 mov     dword ptr [ebp-14h], 8007000Eh
.text:000000E8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000000EF                 mov     eax, offset $LN9
.text:000000F4                 retn
.text:000000F4 __catch$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$0 endp
.text:000000F4
.text:000000F5 ; ---------------------------------------------------------------------------
.text:000000F5                 mov     eax, offset __tryend$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$1
.text:000000FA                 retn
.text:000000FB ; ---------------------------------------------------------------------------
.text:000000FB
.text:000000FB __tryend$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$1:
.text:000000FB                                         ; DATA XREF: .text:000000F5o
.text:000000FB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000102                 jmp     short loc_107
.text:00000104 ; ---------------------------------------------------------------------------
.text:00000104
.text:00000104 $LN9:                                   ; DATA XREF: __catch$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$0+Eo
.text:00000104                 mov     eax, [ebp-14h]
.text:00000107 ; START OF FUNCTION CHUNK FOR ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000107
.text:00000107 loc_107:                                ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+9Dj
.text:00000107                                         ; COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+ADj ...
.text:00000107                 mov     ecx, [ebp+var_C]
.text:0000010A                 mov     large fs:0, ecx
.text:00000111                 pop     ecx
.text:00000112                 pop     edi
.text:00000113                 pop     esi
.text:00000114                 pop     ebx
.text:00000115                 add     esp, 28h
.text:00000118                 cmp     ebp, esp
.text:0000011A                 call    __RTC_CheckEsp
.text:0000011F                 mov     esp, ebp
.text:00000121                 pop     ebp
.text:00000122                 retn    0Ch
.text:00000122 ; END OF FUNCTION CHUNK FOR ?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000122 ; ---------------------------------------------------------------------------
.text:00000125                 align 10h
.text:00000130
.text:00000130 ; =============== S U B R O U T I N E =======================================
.text:00000130
.text:00000130 ; Attributes: bp-based frame
.text:00000130
.text:00000130 ; __int32 __cdecl COpenCallbackImp::SetCompleted(COpenCallbackImp *this, const unsigned __int64 *, const unsigned __int64 *)
.text:00000130                 public ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000130 ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z proc near
.text:00000130
.text:00000130 var_28          = dword ptr -28h
.text:00000130 var_24          = dword ptr -24h
.text:00000130 var_20          = dword ptr -20h
.text:00000130 var_1C          = dword ptr -1Ch
.text:00000130 var_18          = dword ptr -18h
.text:00000130 var_14          = dword ptr -14h
.text:00000130 var_10          = dword ptr -10h
.text:00000130 var_C           = dword ptr -0Ch
.text:00000130 var_4           = dword ptr -4
.text:00000130 this            = dword ptr  8
.text:00000130 arg_4           = dword ptr  0Ch
.text:00000130 arg_8           = dword ptr  10h
.text:00000130
.text:00000130 ; FUNCTION CHUNK AT .text:00000237 SIZE 0000001E BYTES
.text:00000130
.text:00000130                 push    ebp
.text:00000131                 mov     ebp, esp
.text:00000133                 push    0FFFFFFFFh
.text:00000135                 push    offset __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.text:0000013A                 mov     eax, large fs:0
.text:00000140                 push    eax
.text:00000141                 push    ecx
.text:00000142                 sub     esp, 18h
.text:00000145                 push    ebx
.text:00000146                 push    esi
.text:00000147                 push    edi
.text:00000148                 mov     eax, 0CCCCCCCCh
.text:0000014D                 mov     [ebp+var_28], eax
.text:00000150                 mov     [ebp+var_24], eax
.text:00000153                 mov     [ebp+var_20], eax
.text:00000156                 mov     [ebp+var_1C], eax
.text:00000159                 mov     [ebp+var_18], eax
.text:0000015C                 mov     [ebp+var_14], eax
.text:0000015F                 mov     eax, dword ptr ds:___security_cookie
.text:00000164                 xor     eax, ebp
.text:00000166                 push    eax
.text:00000167                 lea     eax, [ebp+var_C]
.text:0000016A                 mov     large fs:0, eax
.text:00000170                 mov     [ebp+var_10], esp
.text:00000173                 mov     [ebp+var_4], 0
.text:0000017A                 mov     ecx, [ebp+this]
.text:0000017D                 add     ecx, 94h ; 'รถ'
.text:00000183                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:00000188                 mov     [ebp+var_18], eax
.text:0000018B                 cmp     [ebp+var_18], 0
.text:0000018F                 jz      short loc_1CF
.text:00000191                 mov     ecx, [ebp+this]
.text:00000194                 add     ecx, 94h ; 'รถ'
.text:0000019A                 call    ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->(void)
.text:0000019F                 mov     [ebp+var_1C], eax
.text:000001A2                 mov     eax, [ebp+var_1C]
.text:000001A5                 mov     [ebp+var_20], eax
.text:000001A8                 mov     esi, esp
.text:000001AA                 mov     ecx, [ebp+arg_8]
.text:000001AD                 push    ecx
.text:000001AE                 mov     edx, [ebp+arg_4]
.text:000001B1                 push    edx
.text:000001B2                 mov     eax, [ebp+var_20]
.text:000001B5                 push    eax
.text:000001B6                 mov     ecx, [ebp+var_20]
.text:000001B9                 mov     edx, [ecx]
.text:000001BB                 mov     eax, [edx+10h]
.text:000001BE                 call    eax
.text:000001C0                 cmp     esi, esp
.text:000001C2                 call    __RTC_CheckEsp
.text:000001C7                 mov     [ebp+var_24], eax
.text:000001CA                 mov     eax, [ebp+var_24]
.text:000001CD                 jmp     short loc_237
.text:000001CF ; ---------------------------------------------------------------------------
.text:000001CF
.text:000001CF loc_1CF:                                ; CODE XREF: COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+5Fj
.text:000001CF                 mov     ecx, [ebp+this]
.text:000001D2                 cmp     dword ptr [ecx+90h], 0
.text:000001D9                 jnz     short loc_1DF
.text:000001DB                 xor     eax, eax
.text:000001DD                 jmp     short loc_237
.text:000001DF ; ---------------------------------------------------------------------------
.text:000001DF
.text:000001DF loc_1DF:                                ; CODE XREF: COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+A9j
.text:000001DF                 mov     esi, esp
.text:000001E1                 mov     edx, [ebp+arg_8]
.text:000001E4                 push    edx
.text:000001E5                 mov     eax, [ebp+arg_4]
.text:000001E8                 push    eax
.text:000001E9                 mov     ecx, [ebp+this]
.text:000001EC                 mov     ecx, [ecx+90h]
.text:000001F2                 mov     edx, [ebp+this]
.text:000001F5                 mov     eax, [edx+90h]
.text:000001FB                 mov     edx, [eax]
.text:000001FD                 mov     eax, [edx+8]
.text:00000200                 call    eax
.text:00000202                 cmp     esi, esp
.text:00000204                 call    __RTC_CheckEsp
.text:00000209                 mov     [ebp+var_28], eax
.text:0000020C                 mov     eax, [ebp+var_28]
.text:0000020F                 jmp     short loc_237
.text:0000020F ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z endp
.text:0000020F
.text:00000211
.text:00000211 ; =============== S U B R O U T I N E =======================================
.text:00000211
.text:00000211
.text:00000211 __catch$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$0 proc near
.text:00000211                                         ; DATA XREF: .xdata$x:00000AACo
.text:00000211                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00000218                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000021F                 mov     eax, offset $LN9_0
.text:00000224                 retn
.text:00000224 __catch$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$0 endp
.text:00000224
.text:00000225 ; ---------------------------------------------------------------------------
.text:00000225                 mov     eax, offset __tryend$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$1
.text:0000022A                 retn
.text:0000022B ; ---------------------------------------------------------------------------
.text:0000022B
.text:0000022B __tryend$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$1:
.text:0000022B                                         ; DATA XREF: .text:00000225o
.text:0000022B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000232                 jmp     short loc_237
.text:00000234 ; ---------------------------------------------------------------------------
.text:00000234
.text:00000234 $LN9_0:                                 ; DATA XREF: __catch$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$0+Eo
.text:00000234                 mov     eax, [ebp-14h]
.text:00000237 ; START OF FUNCTION CHUNK FOR ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000237
.text:00000237 loc_237:                                ; CODE XREF: COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+9Dj
.text:00000237                                         ; COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+ADj ...
.text:00000237                 mov     ecx, [ebp+var_C]
.text:0000023A                 mov     large fs:0, ecx
.text:00000241                 pop     ecx
.text:00000242                 pop     edi
.text:00000243                 pop     esi
.text:00000244                 pop     ebx
.text:00000245                 add     esp, 28h
.text:00000248                 cmp     ebp, esp
.text:0000024A                 call    __RTC_CheckEsp
.text:0000024F                 mov     esp, ebp
.text:00000251                 pop     ebp
.text:00000252                 retn    0Ch
.text:00000252 ; END OF FUNCTION CHUNK FOR ?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.text:00000252 ; ---------------------------------------------------------------------------
.text:00000255                 align 10h
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 ; __int32 __cdecl COpenCallbackImp::GetProperty(COpenCallbackImp *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000260                 public ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000260 ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000260
.text:00000260 var_40          = byte ptr -40h
.text:00000260 var_3D          = byte ptr -3Dh
.text:00000260 var_3C          = dword ptr -3Ch
.text:00000260 var_38          = dword ptr -38h
.text:00000260 var_34          = dword ptr -34h
.text:00000260 var_2C          = dword ptr -2Ch
.text:00000260 var_24          = byte ptr -24h
.text:00000260 var_10          = dword ptr -10h
.text:00000260 var_C           = dword ptr -0Ch
.text:00000260 var_4           = dword ptr -4
.text:00000260 this            = dword ptr  8
.text:00000260 arg_4           = dword ptr  0Ch
.text:00000260 arg_8           = dword ptr  10h
.text:00000260
.text:00000260 ; FUNCTION CHUNK AT .text:000003D0 SIZE 0000002F BYTES
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 push    0FFFFFFFFh
.text:00000265                 push    offset __ehhandler$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000026A                 mov     eax, large fs:0
.text:00000270                 push    eax
.text:00000271                 push    ecx
.text:00000272                 sub     esp, 30h
.text:00000275                 push    ebx
.text:00000276                 push    esi
.text:00000277                 push    edi
.text:00000278                 lea     edi, [ebp+var_40]
.text:0000027B                 mov     ecx, 0Ch
.text:00000280                 mov     eax, 0CCCCCCCCh
.text:00000285                 rep stosd
.text:00000287                 mov     eax, dword ptr ds:___security_cookie
.text:0000028C                 xor     eax, ebp
.text:0000028E                 push    eax
.text:0000028F                 lea     eax, [ebp+var_C]
.text:00000292                 mov     large fs:0, eax
.text:00000298                 mov     [ebp+var_10], esp
.text:0000029B                 mov     [ebp+var_4], 0
.text:000002A2                 lea     ecx, [ebp+var_24] ; this
.text:000002A5                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000002AA                 mov     [ebp+var_34], eax
.text:000002AD                 mov     byte ptr [ebp+var_4], 1
.text:000002B1                 mov     eax, [ebp+this]
.text:000002B4                 movzx   ecx, byte ptr [eax+54h]
.text:000002B8                 test    ecx, ecx
.text:000002BA                 jz      short loc_2DE
.text:000002BC                 mov     edx, [ebp+arg_4]
.text:000002BF                 mov     [ebp+var_38], edx
.text:000002C2                 cmp     [ebp+var_38], 4
.text:000002C6                 jz      short loc_2CA
.text:000002C8                 jmp     short loc_2D9
.text:000002CA ; ---------------------------------------------------------------------------
.text:000002CA
.text:000002CA loc_2CA:                                ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+66j
.text:000002CA                 mov     eax, [ebp+this]
.text:000002CD                 add     eax, 58h ; 'X'
.text:000002D0                 push    eax
.text:000002D1                 lea     ecx, [ebp+var_24]
.text:000002D4                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:000002D9
.text:000002D9 loc_2D9:                                ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+68j
.text:000002D9                 jmp     $LN10           ; jumptable 000002FA default case
.text:000002DE ; ---------------------------------------------------------------------------
.text:000002DE
.text:000002DE loc_2DE:                                ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+5Aj
.text:000002DE                 mov     ecx, [ebp+arg_4]
.text:000002E1                 mov     [ebp+var_3C], ecx
.text:000002E4                 mov     edx, [ebp+var_3C]
.text:000002E7                 sub     edx, 4
.text:000002EA                 mov     [ebp+var_3C], edx
.text:000002ED                 cmp     [ebp+var_3C], 8 ; switch 9 cases
.text:000002F1                 ja      $LN10           ; jumptable 000002FA default case
.text:000002F7                 mov     eax, [ebp+var_3C]
.text:000002FA                 jmp     ds:$LN28[eax*4] ; switch jump
.text:00000301 ; ---------------------------------------------------------------------------
.text:00000301
.text:00000301 $LN7:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000301                                         ; DATA XREF: .text:$LN28o
.text:00000301                 mov     ecx, [ebp+this] ; jumptable 000002FA case 0
.text:00000304                 add     ecx, 44h ; 'D'
.text:00000307                 push    ecx
.text:00000308                 lea     ecx, [ebp+var_24]
.text:0000030B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00000310                 jmp     short $LN10     ; jumptable 000002FA default case
.text:00000312 ; ---------------------------------------------------------------------------
.text:00000312
.text:00000312 $LN6:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000312                                         ; DATA XREF: .text:$LN28o
.text:00000312                 mov     ecx, [ebp+this] ; jumptable 000002FA case 2
.text:00000315                 add     ecx, 1Ch        ; this
.text:00000318                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:0000031D                 mov     [ebp+var_3D], al
.text:00000320                 movzx   edx, [ebp+var_3D]
.text:00000324                 push    edx
.text:00000325                 lea     ecx, [ebp+var_24]
.text:00000328                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:0000032D                 jmp     short $LN10     ; jumptable 000002FA default case
.text:0000032F ; ---------------------------------------------------------------------------
.text:0000032F
.text:0000032F $LN5:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:0000032F                                         ; DATA XREF: .text:$LN28o
.text:0000032F                 mov     eax, [ebp+this] ; jumptable 000002FA case 3
.text:00000332                 mov     ecx, [eax+20h]
.text:00000335                 push    ecx
.text:00000336                 mov     edx, [eax+1Ch]
.text:00000339                 push    edx
.text:0000033A                 lea     ecx, [ebp+var_24]
.text:0000033D                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000342                 jmp     short $LN10     ; jumptable 000002FA default case
.text:00000344 ; ---------------------------------------------------------------------------
.text:00000344
.text:00000344 $LN4:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000344                                         ; DATA XREF: .text:$LN28o
.text:00000344                 mov     eax, [ebp+this] ; jumptable 000002FA case 5
.text:00000347                 mov     ecx, [eax+3Ch]
.text:0000034A                 push    ecx
.text:0000034B                 lea     ecx, [ebp+var_24]
.text:0000034E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000353                 jmp     short $LN10     ; jumptable 000002FA default case
.text:00000355 ; ---------------------------------------------------------------------------
.text:00000355
.text:00000355 $LN3:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000355                                         ; DATA XREF: .text:$LN28o
.text:00000355                 mov     edx, [ebp+this] ; jumptable 000002FA case 6
.text:00000358                 add     edx, 24h ; '$'
.text:0000035B                 push    edx
.text:0000035C                 lea     ecx, [ebp+var_24]
.text:0000035F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000364                 jmp     short $LN10     ; jumptable 000002FA default case
.text:00000366 ; ---------------------------------------------------------------------------
.text:00000366
.text:00000366 $LN2:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000366                                         ; DATA XREF: .text:$LN28o
.text:00000366                 mov     eax, [ebp+this] ; jumptable 000002FA case 7
.text:00000369                 add     eax, 2Ch ; ','
.text:0000036C                 push    eax
.text:0000036D                 lea     ecx, [ebp+var_24]
.text:00000370                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000375                 jmp     short $LN10     ; jumptable 000002FA default case
.text:00000377 ; ---------------------------------------------------------------------------
.text:00000377
.text:00000377 $LN1:                                   ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Aj
.text:00000377                                         ; DATA XREF: .text:$LN28o
.text:00000377                 mov     ecx, [ebp+this] ; jumptable 000002FA case 8
.text:0000037A                 add     ecx, 34h ; '4'
.text:0000037D                 push    ecx
.text:0000037E                 lea     ecx, [ebp+var_24]
.text:00000381                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00000386
.text:00000386 $LN10:                                  ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *):loc_2D9j
.text:00000386                                         ; COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+91j ...
.text:00000386                 mov     edx, [ebp+arg_8] ; jumptable 000002FA default case
.text:00000389                 push    edx             ; struct tagPROPVARIANT *
.text:0000038A                 lea     ecx, [ebp+var_24] ; this
.text:0000038D                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000392                 mov     [ebp+var_2C], 0
.text:00000399                 mov     byte ptr [ebp+var_4], 0
.text:0000039D                 lea     ecx, [ebp+var_24] ; this
.text:000003A0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000003A5                 mov     eax, [ebp+var_2C]
.text:000003A8                 jmp     short loc_3D0
.text:000003A8 ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:000003A8
.text:000003AA
.text:000003AA ; =============== S U B R O U T I N E =======================================
.text:000003AA
.text:000003AA
.text:000003AA __catch$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:000003AA                                         ; DATA XREF: .xdata$x:00000B04o
.text:000003AA                 mov     dword ptr [ebp-30h], 8007000Eh
.text:000003B1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000003B8                 mov     eax, offset $LN22
.text:000003BD                 retn
.text:000003BD __catch$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:000003BD
.text:000003BE ; ---------------------------------------------------------------------------
.text:000003BE                 mov     eax, offset __tryend$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$1
.text:000003C3                 retn
.text:000003C4 ; ---------------------------------------------------------------------------
.text:000003C4
.text:000003C4 __tryend$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$1:
.text:000003C4                                         ; DATA XREF: .text:000003BEo
.text:000003C4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000003CB                 jmp     short loc_3D0
.text:000003CD ; ---------------------------------------------------------------------------
.text:000003CD
.text:000003CD $LN22:                                  ; DATA XREF: __catch$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$0+Eo
.text:000003CD                 mov     eax, [ebp-30h]
.text:000003D0 ; START OF FUNCTION CHUNK FOR ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000003D0
.text:000003D0 loc_3D0:                                ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+148j
.text:000003D0                                         ; .text:000003CBj
.text:000003D0                 push    edx
.text:000003D1                 mov     ecx, ebp
.text:000003D3                 push    eax
.text:000003D4                 lea     edx, $LN27
.text:000003DA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003DF                 pop     eax
.text:000003E0                 pop     edx
.text:000003E1                 mov     ecx, [ebp+var_C]
.text:000003E4                 mov     large fs:0, ecx
.text:000003EB                 pop     ecx
.text:000003EC                 pop     edi
.text:000003ED                 pop     esi
.text:000003EE                 pop     ebx
.text:000003EF                 add     esp, 40h
.text:000003F2                 cmp     ebp, esp
.text:000003F4                 call    __RTC_CheckEsp
.text:000003F9                 mov     esp, ebp
.text:000003FB                 pop     ebp
.text:000003FC                 retn    0Ch
.text:000003FC ; END OF FUNCTION CHUNK FOR ?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000003FC ; ---------------------------------------------------------------------------
.text:000003FF                 align 10h
.text:00000400 $LN27           dd 1                    ; DATA XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+174o
.text:00000404                 dd offset $LN26
.text:00000408 $LN26           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00000404o
.text:00000410                 dd offset $LN24         ; "prop"
.text:00000414 $LN24           db 'prop',0             ; DATA XREF: .text:00000410o
.text:00000419                 align 4
.text:0000041C $LN28           dd offset $LN7          ; DATA XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+9Ar
.text:0000041C                 dd offset $LN10         ; jump table for switch statement
.text:0000041C                 dd offset $LN6
.text:0000041C                 dd offset $LN5
.text:0000041C                 dd offset $LN10
.text:0000041C                 dd offset $LN4
.text:0000041C                 dd offset $LN3
.text:0000041C                 dd offset $LN2
.text:0000041C                 dd offset $LN1
.text:00000440
.text:00000440 ; =============== S U B R O U T I N E =======================================
.text:00000440
.text:00000440 ; Attributes: bp-based frame
.text:00000440
.text:00000440 ; __int32 __cdecl COpenCallbackImp::GetStream(COpenCallbackImp *this, const wchar_t *, struct IInStream **)
.text:00000440                 public ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.text:00000440 ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z proc near
.text:00000440
.text:00000440 var_9C          = dword ptr -9Ch
.text:00000440 var_98          = dword ptr -98h
.text:00000440 var_94          = dword ptr -94h
.text:00000440 var_8D          = byte ptr -8Dh
.text:00000440 var_8C          = dword ptr -8Ch
.text:00000440 var_88          = dword ptr -88h
.text:00000440 var_84          = dword ptr -84h
.text:00000440 var_80          = dword ptr -80h
.text:00000440 var_7A          = byte ptr -7Ah
.text:00000440 var_79          = byte ptr -79h
.text:00000440 var_78          = dword ptr -78h
.text:00000440 var_71          = byte ptr -71h
.text:00000440 var_70          = dword ptr -70h
.text:00000440 var_6C          = dword ptr -6Ch
.text:00000440 var_68          = dword ptr -68h
.text:00000440 var_60          = dword ptr -60h
.text:00000440 var_5C          = byte ptr -5Ch
.text:00000440 var_50          = dword ptr -50h
.text:00000440 var_4C          = dword ptr -4Ch
.text:00000440 var_48          = dword ptr -48h
.text:00000440 var_44          = dword ptr -44h
.text:00000440 var_40          = dword ptr -40h
.text:00000440 var_3C          = dword ptr -3Ch
.text:00000440 var_34          = byte ptr -34h
.text:00000440 var_2C          = dword ptr -2Ch
.text:00000440 var_24          = word ptr -24h
.text:00000440 var_14          = dword ptr -14h
.text:00000440 var_10          = dword ptr -10h
.text:00000440 var_C           = dword ptr -0Ch
.text:00000440 var_4           = dword ptr -4
.text:00000440 this            = dword ptr  8
.text:00000440 arg_4           = dword ptr  0Ch
.text:00000440 arg_8           = dword ptr  10h
.text:00000440
.text:00000440 ; FUNCTION CHUNK AT .text:0000075C SIZE 00000032 BYTES
.text:00000440
.text:00000440                 push    ebp
.text:00000441                 mov     ebp, esp
.text:00000443                 push    0FFFFFFFFh
.text:00000445                 push    offset __ehhandler$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.text:0000044A                 mov     eax, large fs:0
.text:00000450                 push    eax
.text:00000451                 push    ecx
.text:00000452                 sub     esp, 8Ch
.text:00000458                 push    ebx             ; struct UString *
.text:00000459                 push    esi
.text:0000045A                 push    edi
.text:0000045B                 lea     edi, [ebp+var_9C]
.text:00000461                 mov     ecx, 23h ; '#'
.text:00000466                 mov     eax, 0CCCCCCCCh
.text:0000046B                 rep stosd
.text:0000046D                 mov     eax, dword ptr ds:___security_cookie
.text:00000472                 xor     eax, ebp
.text:00000474                 push    eax             ; struct UString *
.text:00000475                 lea     eax, [ebp+var_C]
.text:00000478                 mov     large fs:0, eax
.text:0000047E                 mov     [ebp+var_10], esp
.text:00000481                 mov     [ebp+var_4], 0
.text:00000488                 mov     eax, [ebp+arg_8]
.text:0000048B                 mov     dword ptr [eax], 0
.text:00000491                 mov     ecx, [ebp+this]
.text:00000494                 movzx   edx, byte ptr [ecx+54h]
.text:00000498                 test    edx, edx
.text:0000049A                 jz      short loc_4A6
.text:0000049C                 mov     eax, 1
.text:000004A1                 jmp     loc_75C
.text:000004A6 ; ---------------------------------------------------------------------------
.text:000004A6
.text:000004A6 loc_4A6:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+5Aj
.text:000004A6                 mov     eax, [ebp+this]
.text:000004A9                 cmp     dword ptr [eax+8Ch], 0
.text:000004B0                 jz      short loc_4EA
.text:000004B2                 mov     ecx, [ebp+this]
.text:000004B5                 mov     ecx, [ecx+8Ch]
.text:000004BB                 mov     esi, esp
.text:000004BD                 mov     edx, [ebp+this]
.text:000004C0                 mov     eax, [edx+8Ch]
.text:000004C6                 mov     edx, [eax]
.text:000004C8                 mov     eax, [edx]
.text:000004CA                 call    eax
.text:000004CC                 cmp     esi, esp
.text:000004CE                 call    __RTC_CheckEsp
.text:000004D3                 mov     [ebp+var_68], eax
.text:000004D6                 mov     ecx, [ebp+var_68]
.text:000004D9                 mov     [ebp+var_14], ecx
.text:000004DC                 cmp     [ebp+var_14], 0
.text:000004E0                 jz      short loc_4EA
.text:000004E2                 mov     eax, [ebp+var_14]
.text:000004E5                 jmp     loc_75C
.text:000004EA ; ---------------------------------------------------------------------------
.text:000004EA
.text:000004EA loc_4EA:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+70j
.text:000004EA                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+A0j
.text:000004EA                 lea     ecx, [ebp+var_24]
.text:000004ED                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000004F2                 mov     [ebp+var_6C], eax
.text:000004F5                 mov     byte ptr [ebp+var_4], 1
.text:000004F9                 mov     ecx, [ebp+this]
.text:000004FC                 add     ecx, 10h
.text:000004FF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000504                 mov     [ebp+var_70], eax
.text:00000507                 lea     edx, [ebp+var_24]
.text:0000050A                 push    edx             ; wchar_t *
.text:0000050B                 mov     eax, [ebp+arg_4]
.text:0000050E                 push    eax             ; wchar_t *
.text:0000050F                 mov     ecx, [ebp+var_70]
.text:00000512                 push    ecx             ; this
.text:00000513                 call    ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z ; NWindows::NFile::NName::GetFullPath(wchar_t const *,wchar_t const *,UString &)
.text:00000518                 mov     [ebp+var_71], al
.text:0000051B                 movzx   edx, [ebp+var_71]
.text:0000051F                 test    edx, edx
.text:00000521                 jnz     short loc_53E
.text:00000523                 mov     [ebp+var_3C], 1
.text:0000052A                 mov     byte ptr [ebp+var_4], 0
.text:0000052E                 lea     ecx, [ebp+var_24] ; this
.text:00000531                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000536                 mov     eax, [ebp+var_3C]
.text:00000539                 jmp     loc_75C
.text:0000053E ; ---------------------------------------------------------------------------
.text:0000053E
.text:0000053E loc_53E:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+E1j
.text:0000053E                 lea     ecx, [ebp+var_24]
.text:00000541                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000546                 mov     [ebp+var_78], eax
.text:00000549                 mov     eax, [ebp+var_78]
.text:0000054C                 push    eax             ; wchar_t *
.text:0000054D                 mov     ecx, [ebp+this]
.text:00000550                 add     ecx, 1Ch        ; this
.text:00000553                 call    ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find(wchar_t const *)
.text:00000558                 mov     [ebp+var_79], al
.text:0000055B                 movzx   ecx, [ebp+var_79]
.text:0000055F                 test    ecx, ecx
.text:00000561                 jnz     short loc_57E
.text:00000563                 mov     [ebp+var_40], 1
.text:0000056A                 mov     byte ptr [ebp+var_4], 0
.text:0000056E                 lea     ecx, [ebp+var_24] ; this
.text:00000571                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000576                 mov     eax, [ebp+var_40]
.text:00000579                 jmp     loc_75C
.text:0000057E ; ---------------------------------------------------------------------------
.text:0000057E
.text:0000057E loc_57E:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+121j
.text:0000057E                 mov     ecx, [ebp+this]
.text:00000581                 add     ecx, 1Ch        ; this
.text:00000584                 call    ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir(void)
.text:00000589                 mov     [ebp+var_7A], al
.text:0000058C                 movzx   edx, [ebp+var_7A]
.text:00000590                 test    edx, edx
.text:00000592                 jz      short loc_5AF
.text:00000594                 mov     [ebp+var_44], 1
.text:0000059B                 mov     byte ptr [ebp+var_4], 0
.text:0000059F                 lea     ecx, [ebp+var_24] ; this
.text:000005A2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000005A7                 mov     eax, [ebp+var_44]
.text:000005AA                 jmp     loc_75C
.text:000005AF ; ---------------------------------------------------------------------------
.text:000005AF
.text:000005AF loc_5AF:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+152j
.text:000005AF                 push    68h ; 'h'       ; unsigned int
.text:000005B1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000005B6                 add     esp, 4
.text:000005B9                 mov     [ebp+var_80], eax
.text:000005BC                 mov     eax, [ebp+var_80]
.text:000005BF                 mov     [ebp+var_4C], eax
.text:000005C2                 mov     byte ptr [ebp+var_4], 2
.text:000005C6                 cmp     [ebp+var_4C], 0
.text:000005CA                 jz      short loc_5E8
.text:000005CC                 mov     ecx, [ebp+var_4C] ; this
.text:000005CF                 call    ??0CInFileStreamVol@@QAE@XZ ; CInFileStreamVol::CInFileStreamVol(void)
.text:000005D4                 mov     [ebp+var_84], eax
.text:000005DA                 mov     ecx, [ebp+var_84]
.text:000005E0                 mov     [ebp+var_88], ecx
.text:000005E6                 jmp     short loc_5F2
.text:000005E8 ; ---------------------------------------------------------------------------
.text:000005E8
.text:000005E8 loc_5E8:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+18Aj
.text:000005E8                 mov     [ebp+var_88], 0
.text:000005F2
.text:000005F2 loc_5F2:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+1A6j
.text:000005F2                 mov     edx, [ebp+var_88]
.text:000005F8                 mov     [ebp+var_48], edx
.text:000005FB                 mov     byte ptr [ebp+var_4], 1
.text:000005FF                 mov     eax, [ebp+var_48]
.text:00000602                 mov     [ebp+var_2C], eax
.text:00000605                 mov     ecx, [ebp+var_2C]
.text:00000608                 push    ecx
.text:00000609                 lea     ecx, [ebp+var_34]
.text:0000060C                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)
.text:00000611                 mov     byte ptr [ebp+var_4], 3
.text:00000615                 lea     ecx, [ebp+var_24]
.text:00000618                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000061D                 mov     [ebp+var_8C], eax
.text:00000623                 mov     edx, [ebp+var_8C]
.text:00000629                 push    edx             ; wchar_t *
.text:0000062A                 mov     ecx, [ebp+var_2C] ; this
.text:0000062D                 call    ?Open@CInFileStream@@QAE_NPB_W@Z ; CInFileStream::Open(wchar_t const *)
.text:00000632                 mov     [ebp+var_8D], al
.text:00000638                 movzx   eax, [ebp+var_8D]
.text:0000063F                 test    eax, eax
.text:00000641                 jnz     short loc_675
.text:00000643                 mov     esi, esp
.text:00000645                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:0000064B                 cmp     esi, esp
.text:0000064D                 call    __RTC_CheckEsp
.text:00000652                 mov     [ebp+var_50], eax
.text:00000655                 mov     byte ptr [ebp+var_4], 1
.text:00000659                 lea     ecx, [ebp+var_34]
.text:0000065C                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00000661                 mov     byte ptr [ebp+var_4], 0
.text:00000665                 lea     ecx, [ebp+var_24] ; this
.text:00000668                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000066D                 mov     eax, [ebp+var_50]
.text:00000670                 jmp     loc_75C
.text:00000675 ; ---------------------------------------------------------------------------
.text:00000675
.text:00000675 loc_675:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+201j
.text:00000675                 mov     ecx, [ebp+this]
.text:00000678                 mov     edx, [ecx+20h]
.text:0000067B                 push    edx
.text:0000067C                 mov     eax, [ecx+1Ch]
.text:0000067F                 push    eax
.text:00000680                 mov     ecx, [ebp+this]
.text:00000683                 add     ecx, 7Ch ; '|'
.text:00000686                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000068B                 mov     ecx, [ebp+arg_4]
.text:0000068E                 push    ecx             ; wchar_t *
.text:0000068F                 lea     ecx, [ebp+var_5C] ; this
.text:00000692                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000697                 mov     [ebp+var_94], eax
.text:0000069D                 mov     byte ptr [ebp+var_4], 4
.text:000006A1                 lea     edx, [ebp+var_5C]
.text:000006A4                 push    edx
.text:000006A5                 mov     ecx, [ebp+this]
.text:000006A8                 add     ecx, 64h ; 'd'
.text:000006AB                 call    ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add(UString const &)
.text:000006B0                 mov     byte ptr [ebp+var_4], 3
.text:000006B4                 lea     ecx, [ebp+var_5C] ; this
.text:000006B7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000006BC                 push    1
.text:000006BE                 mov     ecx, [ebp+this]
.text:000006C1                 add     ecx, 70h ; 'p'
.text:000006C4                 call    ?Add@?$CRecordVector@_N@@QAEI_N@Z ; CRecordVector<bool>::Add(bool)
.text:000006C9                 mov     [ebp+var_98], eax
.text:000006CF                 mov     eax, [ebp+var_2C]
.text:000006D2                 mov     ecx, [ebp+var_98]
.text:000006D8                 mov     [eax+58h], ecx
.text:000006DB                 mov     edx, [ebp+this]
.text:000006DE                 sub     edx, 4
.text:000006E1                 mov     eax, [ebp+var_2C]
.text:000006E4                 mov     [eax+5Ch], edx
.text:000006E7                 mov     ecx, [ebp+this]
.text:000006EA                 sub     ecx, 4
.text:000006ED                 push    ecx
.text:000006EE                 mov     ecx, [ebp+var_2C]
.text:000006F1                 add     ecx, 60h ; '`'
.text:000006F4                 call    ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)
.text:000006F9                 lea     ecx, [ebp+var_34]
.text:000006FC                 call    ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ ; CMyComPtr<IInStream>::Detach(void)
.text:00000701                 mov     [ebp+var_9C], eax
.text:00000707                 mov     edx, [ebp+arg_8]
.text:0000070A                 mov     eax, [ebp+var_9C]
.text:00000710                 mov     [edx], eax
.text:00000712                 mov     [ebp+var_60], 0
.text:00000719                 mov     byte ptr [ebp+var_4], 1
.text:0000071D                 lea     ecx, [ebp+var_34]
.text:00000720                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00000725                 mov     byte ptr [ebp+var_4], 0
.text:00000729                 lea     ecx, [ebp+var_24] ; this
.text:0000072C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000731                 mov     eax, [ebp+var_60]
.text:00000734                 jmp     short loc_75C
.text:00000734 ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z endp
.text:00000734
.text:00000736
.text:00000736 ; =============== S U B R O U T I N E =======================================
.text:00000736
.text:00000736
.text:00000736 __catch$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$0 proc near
.text:00000736                                         ; DATA XREF: .xdata$x:00000B64o
.text:00000736                 mov     dword ptr [ebp-64h], 8007000Eh
.text:0000073D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000744                 mov     eax, offset $LN20
.text:00000749                 retn
.text:00000749 __catch$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$0 endp
.text:00000749
.text:0000074A ; ---------------------------------------------------------------------------
.text:0000074A                 mov     eax, offset __tryend$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$1
.text:0000074F                 retn
.text:00000750 ; ---------------------------------------------------------------------------
.text:00000750
.text:00000750 __tryend$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$1:
.text:00000750                                         ; DATA XREF: .text:0000074Ao
.text:00000750                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000757                 jmp     short loc_75C
.text:00000759 ; ---------------------------------------------------------------------------
.text:00000759
.text:00000759 $LN20:                                  ; DATA XREF: __catch$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$0+Eo
.text:00000759                 mov     eax, [ebp-64h]
.text:0000075C ; START OF FUNCTION CHUNK FOR ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.text:0000075C
.text:0000075C loc_75C:                                ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+61j
.text:0000075C                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+A5j ...
.text:0000075C                 push    edx
.text:0000075D                 mov     ecx, ebp
.text:0000075F                 push    eax
.text:00000760                 lea     edx, $LN26_0
.text:00000766                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000076B                 pop     eax
.text:0000076C                 pop     edx
.text:0000076D                 mov     ecx, [ebp+var_C]
.text:00000770                 mov     large fs:0, ecx
.text:00000777                 pop     ecx
.text:00000778                 pop     edi
.text:00000779                 pop     esi
.text:0000077A                 pop     ebx
.text:0000077B                 add     esp, 9Ch
.text:00000781                 cmp     ebp, esp
.text:00000783                 call    __RTC_CheckEsp
.text:00000788                 mov     esp, ebp
.text:0000078A                 pop     ebp
.text:0000078B                 retn    0Ch
.text:0000078B ; END OF FUNCTION CHUNK FOR ?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.text:0000078B ; ---------------------------------------------------------------------------
.text:0000078E                 align 10h
.text:00000790 $LN26_0         dd 2                    ; DATA XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+320o
.text:00000794                 dd offset $LN25
.text:00000798 $LN25           dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:00000794o
.text:000007A0                 dd offset $LN22_0       ; "fullPath"
.text:000007A4                 db 0CCh
.text:000007A5                 db 3 dup(0FFh)
.text:000007A8                 dd 4
.text:000007AC                 dd offset $LN23         ; "inStreamTemp"
.text:000007B0 $LN23           db 'inStreamTemp',0     ; DATA XREF: .text:000007ACo
.text:000007BD $LN22_0         db 'fullPath',0         ; DATA XREF: .text:000007A0o
.text:000007C6                 align 10h
.text:000007D0
.text:000007D0 ; =============== S U B R O U T I N E =======================================
.text:000007D0
.text:000007D0 ; Attributes: bp-based frame
.text:000007D0
.text:000007D0 ; __int32 __cdecl COpenCallbackImp::CryptoGetTextPassword(COpenCallbackImp *this, wchar_t **)
.text:000007D0                 public ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.text:000007D0 ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z proc near
.text:000007D0
.text:000007D0 var_44          = dword ptr -44h
.text:000007D0 var_40          = dword ptr -40h
.text:000007D0 var_3C          = dword ptr -3Ch
.text:000007D0 var_38          = dword ptr -38h
.text:000007D0 var_34          = dword ptr -34h
.text:000007D0 var_30          = dword ptr -30h
.text:000007D0 var_2C          = dword ptr -2Ch
.text:000007D0 var_28          = dword ptr -28h
.text:000007D0 var_20          = dword ptr -20h
.text:000007D0 var_18          = byte ptr -18h
.text:000007D0 var_10          = dword ptr -10h
.text:000007D0 var_C           = dword ptr -0Ch
.text:000007D0 var_4           = dword ptr -4
.text:000007D0 this            = dword ptr  8
.text:000007D0 arg_4           = dword ptr  0Ch
.text:000007D0
.text:000007D0 ; FUNCTION CHUNK AT .text:00000932 SIZE 0000002F BYTES
.text:000007D0
.text:000007D0                 push    ebp
.text:000007D1                 mov     ebp, esp
.text:000007D3                 push    0FFFFFFFFh
.text:000007D5                 push    offset __ehhandler$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.text:000007DA                 mov     eax, large fs:0
.text:000007E0                 push    eax
.text:000007E1                 push    ecx
.text:000007E2                 sub     esp, 34h
.text:000007E5                 push    ebx
.text:000007E6                 push    esi
.text:000007E7                 push    edi
.text:000007E8                 lea     edi, [ebp+var_44]
.text:000007EB                 mov     ecx, 0Dh
.text:000007F0                 mov     eax, 0CCCCCCCCh
.text:000007F5                 rep stosd
.text:000007F7                 mov     eax, dword ptr ds:___security_cookie
.text:000007FC                 xor     eax, ebp
.text:000007FE                 push    eax
.text:000007FF                 lea     eax, [ebp+var_C]
.text:00000802                 mov     large fs:0, eax
.text:00000808                 mov     [ebp+var_10], esp
.text:0000080B                 mov     [ebp+var_4], 0
.text:00000812                 mov     ecx, [ebp+this]
.text:00000815                 add     ecx, 88h ; 'รช'
.text:0000081B                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:00000820                 mov     [ebp+var_28], eax
.text:00000823                 cmp     [ebp+var_28], 0
.text:00000827                 jz      loc_8C1
.text:0000082D                 lea     ecx, [ebp+var_18]
.text:00000830                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:00000835                 mov     [ebp+var_2C], eax
.text:00000838                 mov     byte ptr [ebp+var_4], 1
.text:0000083C                 lea     ecx, [ebp+var_18]
.text:0000083F                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:00000844                 mov     [ebp+var_30], eax
.text:00000847                 mov     eax, [ebp+var_30]
.text:0000084A                 push    eax
.text:0000084B                 push    offset _IID_ICryptoGetTextPassword
.text:00000850                 mov     ecx, [ebp+this]
.text:00000853                 add     ecx, 88h ; 'รช'
.text:00000859                 call    ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>(_GUID const &,ICryptoGetTextPassword * *)
.text:0000085E                 lea     ecx, [ebp+var_18]
.text:00000861                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:00000866                 mov     [ebp+var_34], eax
.text:00000869                 cmp     [ebp+var_34], 0
.text:0000086D                 jz      short loc_8B5
.text:0000086F                 lea     ecx, [ebp+var_18]
.text:00000872                 call    ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->(void)
.text:00000877                 mov     [ebp+var_38], eax
.text:0000087A                 mov     ecx, [ebp+var_38]
.text:0000087D                 mov     [ebp+var_3C], ecx
.text:00000880                 mov     esi, esp
.text:00000882                 mov     edx, [ebp+arg_4]
.text:00000885                 push    edx
.text:00000886                 mov     eax, [ebp+var_3C]
.text:00000889                 push    eax
.text:0000088A                 mov     ecx, [ebp+var_3C]
.text:0000088D                 mov     edx, [ecx]
.text:0000088F                 mov     eax, [edx+0Ch]
.text:00000892                 call    eax
.text:00000894                 cmp     esi, esp
.text:00000896                 call    __RTC_CheckEsp
.text:0000089B                 mov     [ebp+var_40], eax
.text:0000089E                 mov     ecx, [ebp+var_40]
.text:000008A1                 mov     [ebp+var_20], ecx
.text:000008A4                 mov     byte ptr [ebp+var_4], 0
.text:000008A8                 lea     ecx, [ebp+var_18]
.text:000008AB                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000008B0                 mov     eax, [ebp+var_20]
.text:000008B3                 jmp     short loc_932
.text:000008B5 ; ---------------------------------------------------------------------------
.text:000008B5
.text:000008B5 loc_8B5:                                ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+9Dj
.text:000008B5                 mov     byte ptr [ebp+var_4], 0
.text:000008B9                 lea     ecx, [ebp+var_18]
.text:000008BC                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:000008C1
.text:000008C1 loc_8C1:                                ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+57j
.text:000008C1                 mov     edx, [ebp+this]
.text:000008C4                 cmp     dword ptr [edx+84h], 0
.text:000008CB                 jnz     short loc_8D4
.text:000008CD                 mov     eax, 80004001h
.text:000008D2                 jmp     short loc_932
.text:000008D4 ; ---------------------------------------------------------------------------
.text:000008D4
.text:000008D4 loc_8D4:                                ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+FBj
.text:000008D4                 mov     eax, [ebp+this]
.text:000008D7                 mov     byte ptr [eax+80h], 1
.text:000008DE                 mov     esi, esp
.text:000008E0                 mov     ecx, [ebp+arg_4]
.text:000008E3                 push    ecx
.text:000008E4                 mov     edx, [ebp+this]
.text:000008E7                 mov     ecx, [edx+84h]
.text:000008ED                 mov     eax, [ebp+this]
.text:000008F0                 mov     edx, [eax+84h]
.text:000008F6                 mov     eax, [edx]
.text:000008F8                 mov     edx, [eax+10h]
.text:000008FB                 call    edx
.text:000008FD                 cmp     esi, esp
.text:000008FF                 call    __RTC_CheckEsp
.text:00000904                 mov     [ebp+var_44], eax
.text:00000907                 mov     eax, [ebp+var_44]
.text:0000090A                 jmp     short loc_932
.text:0000090A ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z endp
.text:0000090A
.text:0000090C
.text:0000090C ; =============== S U B R O U T I N E =======================================
.text:0000090C
.text:0000090C
.text:0000090C __catch$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$0 proc near
.text:0000090C                                         ; DATA XREF: .xdata$x:00000BDCo
.text:0000090C                 mov     dword ptr [ebp-24h], 8007000Eh
.text:00000913                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000091A                 mov     eax, offset $LN11
.text:0000091F                 retn
.text:0000091F __catch$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$0 endp
.text:0000091F
.text:00000920 ; ---------------------------------------------------------------------------
.text:00000920                 mov     eax, offset __tryend$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$1
.text:00000925                 retn
.text:00000926 ; ---------------------------------------------------------------------------
.text:00000926
.text:00000926 __tryend$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$1:
.text:00000926                                         ; DATA XREF: .text:00000920o
.text:00000926                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000092D                 jmp     short loc_932
.text:0000092F ; ---------------------------------------------------------------------------
.text:0000092F
.text:0000092F $LN11:                                  ; DATA XREF: __catch$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$0+Eo
.text:0000092F                 mov     eax, [ebp-24h]
.text:00000932 ; START OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.text:00000932
.text:00000932 loc_932:                                ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+E3j
.text:00000932                                         ; COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+102j ...
.text:00000932                 push    edx
.text:00000933                 mov     ecx, ebp
.text:00000935                 push    eax
.text:00000936                 lea     edx, $LN16
.text:0000093C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000941                 pop     eax
.text:00000942                 pop     edx
.text:00000943                 mov     ecx, [ebp+var_C]
.text:00000946                 mov     large fs:0, ecx
.text:0000094D                 pop     ecx
.text:0000094E                 pop     edi
.text:0000094F                 pop     esi
.text:00000950                 pop     ebx
.text:00000951                 add     esp, 44h
.text:00000954                 cmp     ebp, esp
.text:00000956                 call    __RTC_CheckEsp
.text:0000095B                 mov     esp, ebp
.text:0000095D                 pop     ebp
.text:0000095E                 retn    8
.text:0000095E ; END OF FUNCTION CHUNK FOR ?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.text:0000095E ; ---------------------------------------------------------------------------
.text:00000961                 align 4
.text:00000964 $LN16           dd 1                    ; DATA XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+166o
.text:00000968                 dd offset $LN15
.text:0000096C $LN15           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000968o
.text:00000974                 dd offset $LN13         ; "getTextPassword"
.text:00000978 $LN13           db 'getTextPassword',0  ; DATA XREF: .text:00000974o
.text:00000978 _text           ends
.text:00000978
.text$x:00000988 ; ===========================================================================
.text$x:00000988
.text$x:00000988 ; Segment type: Pure code
.text$x:00000988 ; Segment permissions: Read/Execute
.text$x:00000988 _text$x         segment para public 'CODE' use32
.text$x:00000988                 assume cs:_text$x
.text$x:00000988                 ;org 988h
.text$x:00000988                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000988
.text$x:00000988 ; =============== S U B R O U T I N E =======================================
.text$x:00000988
.text$x:00000988
.text$x:00000988 __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z proc near
.text$x:00000988                                         ; DATA XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+5o
.text$x:00000988
.text$x:00000988 arg_4           = dword ptr  8
.text$x:00000988
.text$x:00000988                 mov     edx, [esp+arg_4]
.text$x:0000098C                 lea     eax, [edx+0Ch]
.text$x:0000098F                 mov     ecx, [edx-2Ch]
.text$x:00000992                 xor     ecx, eax
.text$x:00000994                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000999                 mov     eax, offset __ehfuncinfo$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.text$x:0000099E                 jmp     ___CxxFrameHandler3
.text$x:0000099E __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z endp
.text$x:0000099E
.text$x:000009A3
.text$x:000009A3 ; =============== S U B R O U T I N E =======================================
.text$x:000009A3
.text$x:000009A3
.text$x:000009A3 __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z proc near
.text$x:000009A3                                         ; DATA XREF: COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+5o
.text$x:000009A3
.text$x:000009A3 arg_4           = dword ptr  8
.text$x:000009A3
.text$x:000009A3                 mov     edx, [esp+arg_4]
.text$x:000009A7                 lea     eax, [edx+0Ch]
.text$x:000009AA                 mov     ecx, [edx-2Ch]
.text$x:000009AD                 xor     ecx, eax
.text$x:000009AF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009B4                 mov     eax, offset __ehfuncinfo$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.text$x:000009B9                 jmp     ___CxxFrameHandler3
.text$x:000009B9 __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z endp
.text$x:000009B9
.text$x:000009BE
.text$x:000009BE ; =============== S U B R O U T I N E =======================================
.text$x:000009BE
.text$x:000009BE
.text$x:000009BE __unwindfunclet$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:000009BE                                         ; DATA XREF: .xdata$x:00000B28o
.text$x:000009BE                 lea     ecx, [ebp-24h]  ; this
.text$x:000009C1                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000009C1 __unwindfunclet$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:000009C1
.text$x:000009C6
.text$x:000009C6 ; =============== S U B R O U T I N E =======================================
.text$x:000009C6
.text$x:000009C6
.text$x:000009C6 __ehhandler$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:000009C6                                         ; DATA XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+5o
.text$x:000009C6
.text$x:000009C6 arg_4           = dword ptr  8
.text$x:000009C6
.text$x:000009C6                 mov     edx, [esp+arg_4]
.text$x:000009CA                 lea     eax, [edx+0Ch]
.text$x:000009CD                 mov     ecx, [edx-44h]
.text$x:000009D0                 xor     ecx, eax
.text$x:000009D2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009D7                 mov     eax, offset __ehfuncinfo$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:000009DC                 jmp     ___CxxFrameHandler3
.text$x:000009DC __ehhandler$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:000009DC
.text$x:000009E1
.text$x:000009E1 ; =============== S U B R O U T I N E =======================================
.text$x:000009E1
.text$x:000009E1
.text$x:000009E1 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$2 proc near
.text$x:000009E1                                         ; DATA XREF: .xdata$x:00000BACo
.text$x:000009E1                 lea     ecx, [ebp-24h]  ; this
.text$x:000009E4                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000009E4 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$2 endp
.text$x:000009E4
.text$x:000009E9
.text$x:000009E9 ; =============== S U B R O U T I N E =======================================
.text$x:000009E9
.text$x:000009E9
.text$x:000009E9 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$3 proc near
.text$x:000009E9                                         ; DATA XREF: .xdata$x:00000BB4o
.text$x:000009E9                 mov     eax, [ebp-4Ch]
.text$x:000009EC                 push    eax             ; void *
.text$x:000009ED                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009F2                 pop     ecx
.text$x:000009F3                 retn
.text$x:000009F3 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$3 endp
.text$x:000009F3
.text$x:000009F4
.text$x:000009F4 ; =============== S U B R O U T I N E =======================================
.text$x:000009F4
.text$x:000009F4
.text$x:000009F4 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$4 proc near
.text$x:000009F4                                         ; DATA XREF: .xdata$x:00000BBCo
.text$x:000009F4                 lea     ecx, [ebp-34h]
.text$x:000009F7                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:000009F7 __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$4 endp
.text$x:000009F7
.text$x:000009FC
.text$x:000009FC ; =============== S U B R O U T I N E =======================================
.text$x:000009FC
.text$x:000009FC
.text$x:000009FC __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$5 proc near
.text$x:000009FC                                         ; DATA XREF: .xdata$x:00000BC4o
.text$x:000009FC                 lea     ecx, [ebp-5Ch]  ; this
.text$x:000009FF                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000009FF __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$5 endp
.text$x:000009FF
.text$x:00000A04
.text$x:00000A04 ; =============== S U B R O U T I N E =======================================
.text$x:00000A04
.text$x:00000A04
.text$x:00000A04 __ehhandler$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z proc near
.text$x:00000A04                                         ; DATA XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+5o
.text$x:00000A04
.text$x:00000A04 arg_4           = dword ptr  8
.text$x:00000A04
.text$x:00000A04                 mov     edx, [esp+arg_4]
.text$x:00000A08                 lea     eax, [edx+0Ch]
.text$x:00000A0B                 mov     ecx, [edx-0A0h]
.text$x:00000A11                 xor     ecx, eax
.text$x:00000A13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A18                 mov     eax, offset __ehfuncinfo$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.text$x:00000A1D                 jmp     ___CxxFrameHandler3
.text$x:00000A1D __ehhandler$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z endp
.text$x:00000A1D
.text$x:00000A22
.text$x:00000A22 ; =============== S U B R O U T I N E =======================================
.text$x:00000A22
.text$x:00000A22
.text$x:00000A22 __unwindfunclet$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$2 proc near
.text$x:00000A22                                         ; DATA XREF: .xdata$x:00000C00o
.text$x:00000A22                 lea     ecx, [ebp-18h]
.text$x:00000A25                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00000A25 __unwindfunclet$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$2 endp
.text$x:00000A25
.text$x:00000A2A
.text$x:00000A2A ; =============== S U B R O U T I N E =======================================
.text$x:00000A2A
.text$x:00000A2A
.text$x:00000A2A __ehhandler$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z proc near
.text$x:00000A2A                                         ; DATA XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+5o
.text$x:00000A2A
.text$x:00000A2A arg_4           = dword ptr  8
.text$x:00000A2A
.text$x:00000A2A                 mov     edx, [esp+arg_4]
.text$x:00000A2E                 lea     eax, [edx+0Ch]
.text$x:00000A31                 mov     ecx, [edx-48h]
.text$x:00000A34                 xor     ecx, eax
.text$x:00000A36                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A3B                 mov     eax, offset __ehfuncinfo$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.text$x:00000A40                 jmp     ___CxxFrameHandler3
.text$x:00000A40 __ehhandler$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z endp
.text$x:00000A40
.text$x:00000A40 ; ---------------------------------------------------------------------------
.text$x:00000A45                 align 4
.text$x:00000A45 _text$x         ends
.text$x:00000A45
.xdata$x:00000A48 ; ===========================================================================
.xdata$x:00000A48
.xdata$x:00000A48 ; Segment type: Pure data
.xdata$x:00000A48 ; Segment permissions: Read
.xdata$x:00000A48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000A48                 assume cs:_xdata$x
.xdata$x:00000A48                 ;org 0A48h
.xdata$x:00000A48 __catchsym$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$2 dd offset loc_40
.xdata$x:00000A48                                         ; DATA XREF: .xdata$x:00000A78o
.xdata$x:00000A4C                 db    0
.xdata$x:00000A4D                 db    0
.xdata$x:00000A4E                 db    0
.xdata$x:00000A4F                 db    0
.xdata$x:00000A50                 db    0
.xdata$x:00000A51                 db    0
.xdata$x:00000A52                 db    0
.xdata$x:00000A53                 db    0
.xdata$x:00000A54                 dd offset __catch$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$0
.xdata$x:00000A58 __unwindtable$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z db 0FFh
.xdata$x:00000A58                                         ; DATA XREF: .xdata$x:00000A84o
.xdata$x:00000A59                 db 0FFh
.xdata$x:00000A5A                 db 0FFh
.xdata$x:00000A5B                 db 0FFh
.xdata$x:00000A5C                 db    0
.xdata$x:00000A5D                 db    0
.xdata$x:00000A5E                 db    0
.xdata$x:00000A5F                 db    0
.xdata$x:00000A60                 db 0FFh
.xdata$x:00000A61                 db 0FFh
.xdata$x:00000A62                 db 0FFh
.xdata$x:00000A63                 db 0FFh
.xdata$x:00000A64                 db    0
.xdata$x:00000A65                 db    0
.xdata$x:00000A66                 db    0
.xdata$x:00000A67                 db    0
.xdata$x:00000A68 __tryblocktable$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z db    0
.xdata$x:00000A68                                         ; DATA XREF: .xdata$x:00000A8Co
.xdata$x:00000A69                 db    0
.xdata$x:00000A6A                 db    0
.xdata$x:00000A6B                 db    0
.xdata$x:00000A6C                 db    0
.xdata$x:00000A6D                 db    0
.xdata$x:00000A6E                 db    0
.xdata$x:00000A6F                 db    0
.xdata$x:00000A70                 db    1
.xdata$x:00000A71                 db    0
.xdata$x:00000A72                 db    0
.xdata$x:00000A73                 db    0
.xdata$x:00000A74                 db    1
.xdata$x:00000A75                 db    0
.xdata$x:00000A76                 db    0
.xdata$x:00000A77                 db    0
.xdata$x:00000A78                 dd offset __catchsym$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z$2
.xdata$x:00000A7C __ehfuncinfo$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z db  22h ; "
.xdata$x:00000A7C                                         ; DATA XREF: __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z+11o
.xdata$x:00000A7D                 db    5
.xdata$x:00000A7E                 db  93h ; รด
.xdata$x:00000A7F                 db  19h
.xdata$x:00000A80                 db    2
.xdata$x:00000A81                 db    0
.xdata$x:00000A82                 db    0
.xdata$x:00000A83                 db    0
.xdata$x:00000A84                 dd offset __unwindtable$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.xdata$x:00000A88                 db    1
.xdata$x:00000A89                 db    0
.xdata$x:00000A8A                 db    0
.xdata$x:00000A8B                 db    0
.xdata$x:00000A8C                 dd offset __tryblocktable$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
.xdata$x:00000A90                 db    0
.xdata$x:00000A91                 db    0
.xdata$x:00000A92                 db    0
.xdata$x:00000A93                 db    0
.xdata$x:00000A94                 db    0
.xdata$x:00000A95                 db    0
.xdata$x:00000A96                 db    0
.xdata$x:00000A97                 db    0
.xdata$x:00000A98                 db    0
.xdata$x:00000A99                 db    0
.xdata$x:00000A9A                 db    0
.xdata$x:00000A9B                 db    0
.xdata$x:00000A9C                 db    1
.xdata$x:00000A9D                 db    0
.xdata$x:00000A9E                 db    0
.xdata$x:00000A9F                 db    0
.xdata$x:00000AA0 __catchsym$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$2 dd offset loc_40
.xdata$x:00000AA0                                         ; DATA XREF: .xdata$x:00000AD0o
.xdata$x:00000AA4                 db    0
.xdata$x:00000AA5                 db    0
.xdata$x:00000AA6                 db    0
.xdata$x:00000AA7                 db    0
.xdata$x:00000AA8                 db    0
.xdata$x:00000AA9                 db    0
.xdata$x:00000AAA                 db    0
.xdata$x:00000AAB                 db    0
.xdata$x:00000AAC                 dd offset __catch$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$0
.xdata$x:00000AB0 __unwindtable$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z db 0FFh
.xdata$x:00000AB0                                         ; DATA XREF: .xdata$x:00000ADCo
.xdata$x:00000AB1                 db 0FFh
.xdata$x:00000AB2                 db 0FFh
.xdata$x:00000AB3                 db 0FFh
.xdata$x:00000AB4                 db    0
.xdata$x:00000AB5                 db    0
.xdata$x:00000AB6                 db    0
.xdata$x:00000AB7                 db    0
.xdata$x:00000AB8                 db 0FFh
.xdata$x:00000AB9                 db 0FFh
.xdata$x:00000ABA                 db 0FFh
.xdata$x:00000ABB                 db 0FFh
.xdata$x:00000ABC                 db    0
.xdata$x:00000ABD                 db    0
.xdata$x:00000ABE                 db    0
.xdata$x:00000ABF                 db    0
.xdata$x:00000AC0 __tryblocktable$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z db    0
.xdata$x:00000AC0                                         ; DATA XREF: .xdata$x:00000AE4o
.xdata$x:00000AC1                 db    0
.xdata$x:00000AC2                 db    0
.xdata$x:00000AC3                 db    0
.xdata$x:00000AC4                 db    0
.xdata$x:00000AC5                 db    0
.xdata$x:00000AC6                 db    0
.xdata$x:00000AC7                 db    0
.xdata$x:00000AC8                 db    1
.xdata$x:00000AC9                 db    0
.xdata$x:00000ACA                 db    0
.xdata$x:00000ACB                 db    0
.xdata$x:00000ACC                 db    1
.xdata$x:00000ACD                 db    0
.xdata$x:00000ACE                 db    0
.xdata$x:00000ACF                 db    0
.xdata$x:00000AD0                 dd offset __catchsym$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z$2
.xdata$x:00000AD4 __ehfuncinfo$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z db  22h ; "
.xdata$x:00000AD4                                         ; DATA XREF: __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z+11o
.xdata$x:00000AD5                 db    5
.xdata$x:00000AD6                 db  93h ; รด
.xdata$x:00000AD7                 db  19h
.xdata$x:00000AD8                 db    2
.xdata$x:00000AD9                 db    0
.xdata$x:00000ADA                 db    0
.xdata$x:00000ADB                 db    0
.xdata$x:00000ADC                 dd offset __unwindtable$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.xdata$x:00000AE0                 db    1
.xdata$x:00000AE1                 db    0
.xdata$x:00000AE2                 db    0
.xdata$x:00000AE3                 db    0
.xdata$x:00000AE4                 dd offset __tryblocktable$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
.xdata$x:00000AE8                 db    0
.xdata$x:00000AE9                 db    0
.xdata$x:00000AEA                 db    0
.xdata$x:00000AEB                 db    0
.xdata$x:00000AEC                 db    0
.xdata$x:00000AED                 db    0
.xdata$x:00000AEE                 db    0
.xdata$x:00000AEF                 db    0
.xdata$x:00000AF0                 db    0
.xdata$x:00000AF1                 db    0
.xdata$x:00000AF2                 db    0
.xdata$x:00000AF3                 db    0
.xdata$x:00000AF4                 db    1
.xdata$x:00000AF5                 db    0
.xdata$x:00000AF6                 db    0
.xdata$x:00000AF7                 db    0
.xdata$x:00000AF8 __catchsym$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$3 dd offset loc_40
.xdata$x:00000AF8                                         ; DATA XREF: .xdata$x:00000B18o
.xdata$x:00000AFC                 db    0
.xdata$x:00000AFD                 db    0
.xdata$x:00000AFE                 db    0
.xdata$x:00000AFF                 db    0
.xdata$x:00000B00                 db    0
.xdata$x:00000B01                 db    0
.xdata$x:00000B02                 db    0
.xdata$x:00000B03                 db    0
.xdata$x:00000B04                 dd offset __catch$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00000B08 __tryblocktable$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00000B08                                         ; DATA XREF: .xdata$x:00000B44o
.xdata$x:00000B09                 db    0
.xdata$x:00000B0A                 db    0
.xdata$x:00000B0B                 db    0
.xdata$x:00000B0C                 db    1
.xdata$x:00000B0D                 db    0
.xdata$x:00000B0E                 db    0
.xdata$x:00000B0F                 db    0
.xdata$x:00000B10                 db    2
.xdata$x:00000B11                 db    0
.xdata$x:00000B12                 db    0
.xdata$x:00000B13                 db    0
.xdata$x:00000B14                 db    1
.xdata$x:00000B15                 db    0
.xdata$x:00000B16                 db    0
.xdata$x:00000B17                 db    0
.xdata$x:00000B18                 dd offset __catchsym$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00000B1C __unwindtable$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00000B1C                                         ; DATA XREF: .xdata$x:00000B3Co
.xdata$x:00000B1D                 db 0FFh
.xdata$x:00000B1E                 db 0FFh
.xdata$x:00000B1F                 db 0FFh
.xdata$x:00000B20                 db    0
.xdata$x:00000B21                 db    0
.xdata$x:00000B22                 db    0
.xdata$x:00000B23                 db    0
.xdata$x:00000B24                 db    0
.xdata$x:00000B25                 db    0
.xdata$x:00000B26                 db    0
.xdata$x:00000B27                 db    0
.xdata$x:00000B28                 dd offset __unwindfunclet$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00000B2C                 db 0FFh
.xdata$x:00000B2D                 db 0FFh
.xdata$x:00000B2E                 db 0FFh
.xdata$x:00000B2F                 db 0FFh
.xdata$x:00000B30                 db    0
.xdata$x:00000B31                 db    0
.xdata$x:00000B32                 db    0
.xdata$x:00000B33                 db    0
.xdata$x:00000B34 __ehfuncinfo$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00000B34                                         ; DATA XREF: __ehhandler$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z+11o
.xdata$x:00000B35                 db    5
.xdata$x:00000B36                 db  93h ; รด
.xdata$x:00000B37                 db  19h
.xdata$x:00000B38                 db    3
.xdata$x:00000B39                 db    0
.xdata$x:00000B3A                 db    0
.xdata$x:00000B3B                 db    0
.xdata$x:00000B3C                 dd offset __unwindtable$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00000B40                 db    1
.xdata$x:00000B41                 db    0
.xdata$x:00000B42                 db    0
.xdata$x:00000B43                 db    0
.xdata$x:00000B44                 dd offset __tryblocktable$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00000B48                 db    0
.xdata$x:00000B49                 db    0
.xdata$x:00000B4A                 db    0
.xdata$x:00000B4B                 db    0
.xdata$x:00000B4C                 db    0
.xdata$x:00000B4D                 db    0
.xdata$x:00000B4E                 db    0
.xdata$x:00000B4F                 db    0
.xdata$x:00000B50                 db    0
.xdata$x:00000B51                 db    0
.xdata$x:00000B52                 db    0
.xdata$x:00000B53                 db    0
.xdata$x:00000B54                 db    1
.xdata$x:00000B55                 db    0
.xdata$x:00000B56                 db    0
.xdata$x:00000B57                 db    0
.xdata$x:00000B58 __catchsym$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$6 dd offset loc_40
.xdata$x:00000B58                                         ; DATA XREF: .xdata$x:00000B78o
.xdata$x:00000B5C                 db    0
.xdata$x:00000B5D                 db    0
.xdata$x:00000B5E                 db    0
.xdata$x:00000B5F                 db    0
.xdata$x:00000B60                 db    0
.xdata$x:00000B61                 db    0
.xdata$x:00000B62                 db    0
.xdata$x:00000B63                 db    0
.xdata$x:00000B64                 dd offset __catch$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$0
.xdata$x:00000B68 __tryblocktable$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z db    0
.xdata$x:00000B68                                         ; DATA XREF: .xdata$x:00000B8Co
.xdata$x:00000B69                 db    0
.xdata$x:00000B6A                 db    0
.xdata$x:00000B6B                 db    0
.xdata$x:00000B6C                 db    4
.xdata$x:00000B6D                 db    0
.xdata$x:00000B6E                 db    0
.xdata$x:00000B6F                 db    0
.xdata$x:00000B70                 db    5
.xdata$x:00000B71                 db    0
.xdata$x:00000B72                 db    0
.xdata$x:00000B73                 db    0
.xdata$x:00000B74                 db    1
.xdata$x:00000B75                 db    0
.xdata$x:00000B76                 db    0
.xdata$x:00000B77                 db    0
.xdata$x:00000B78                 dd offset __catchsym$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$6
.xdata$x:00000B7C __ehfuncinfo$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z db  22h ; "
.xdata$x:00000B7C                                         ; DATA XREF: __ehhandler$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z+14o
.xdata$x:00000B7D                 db    5
.xdata$x:00000B7E                 db  93h ; รด
.xdata$x:00000B7F                 db  19h
.xdata$x:00000B80                 db    6
.xdata$x:00000B81                 db    0
.xdata$x:00000B82                 db    0
.xdata$x:00000B83                 db    0
.xdata$x:00000B84                 dd offset __unwindtable$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.xdata$x:00000B88                 db    1
.xdata$x:00000B89                 db    0
.xdata$x:00000B8A                 db    0
.xdata$x:00000B8B                 db    0
.xdata$x:00000B8C                 dd offset __tryblocktable$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
.xdata$x:00000B90                 db    0
.xdata$x:00000B91                 db    0
.xdata$x:00000B92                 db    0
.xdata$x:00000B93                 db    0
.xdata$x:00000B94                 db    0
.xdata$x:00000B95                 db    0
.xdata$x:00000B96                 db    0
.xdata$x:00000B97                 db    0
.xdata$x:00000B98                 db    0
.xdata$x:00000B99                 db    0
.xdata$x:00000B9A                 db    0
.xdata$x:00000B9B                 db    0
.xdata$x:00000B9C                 db    1
.xdata$x:00000B9D                 db    0
.xdata$x:00000B9E                 db    0
.xdata$x:00000B9F                 db    0
.xdata$x:00000BA0 __unwindtable$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z db 0FFh
.xdata$x:00000BA0                                         ; DATA XREF: .xdata$x:00000B84o
.xdata$x:00000BA1                 db 0FFh
.xdata$x:00000BA2                 db 0FFh
.xdata$x:00000BA3                 db 0FFh
.xdata$x:00000BA4                 db    0
.xdata$x:00000BA5                 db    0
.xdata$x:00000BA6                 db    0
.xdata$x:00000BA7                 db    0
.xdata$x:00000BA8                 db    0
.xdata$x:00000BA9                 db    0
.xdata$x:00000BAA                 db    0
.xdata$x:00000BAB                 db    0
.xdata$x:00000BAC                 dd offset __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$2
.xdata$x:00000BB0                 db    1
.xdata$x:00000BB1                 db    0
.xdata$x:00000BB2                 db    0
.xdata$x:00000BB3                 db    0
.xdata$x:00000BB4                 dd offset __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$3
.xdata$x:00000BB8                 db    1
.xdata$x:00000BB9                 db    0
.xdata$x:00000BBA                 db    0
.xdata$x:00000BBB                 db    0
.xdata$x:00000BBC                 dd offset __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$4
.xdata$x:00000BC0                 db    3
.xdata$x:00000BC1                 db    0
.xdata$x:00000BC2                 db    0
.xdata$x:00000BC3                 db    0
.xdata$x:00000BC4                 dd offset __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$5
.xdata$x:00000BC8                 db 0FFh
.xdata$x:00000BC9                 db 0FFh
.xdata$x:00000BCA                 db 0FFh
.xdata$x:00000BCB                 db 0FFh
.xdata$x:00000BCC                 db    0
.xdata$x:00000BCD                 db    0
.xdata$x:00000BCE                 db    0
.xdata$x:00000BCF                 db    0
.xdata$x:00000BD0 __catchsym$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$3 dd offset loc_40
.xdata$x:00000BD0                                         ; DATA XREF: .xdata$x:00000BF0o
.xdata$x:00000BD4                 db    0
.xdata$x:00000BD5                 db    0
.xdata$x:00000BD6                 db    0
.xdata$x:00000BD7                 db    0
.xdata$x:00000BD8                 db    0
.xdata$x:00000BD9                 db    0
.xdata$x:00000BDA                 db    0
.xdata$x:00000BDB                 db    0
.xdata$x:00000BDC                 dd offset __catch$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$0
.xdata$x:00000BE0 __tryblocktable$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z db    0
.xdata$x:00000BE0                                         ; DATA XREF: .xdata$x:00000C1Co
.xdata$x:00000BE1                 db    0
.xdata$x:00000BE2                 db    0
.xdata$x:00000BE3                 db    0
.xdata$x:00000BE4                 db    1
.xdata$x:00000BE5                 db    0
.xdata$x:00000BE6                 db    0
.xdata$x:00000BE7                 db    0
.xdata$x:00000BE8                 db    2
.xdata$x:00000BE9                 db    0
.xdata$x:00000BEA                 db    0
.xdata$x:00000BEB                 db    0
.xdata$x:00000BEC                 db    1
.xdata$x:00000BED                 db    0
.xdata$x:00000BEE                 db    0
.xdata$x:00000BEF                 db    0
.xdata$x:00000BF0                 dd offset __catchsym$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$3
.xdata$x:00000BF4 __unwindtable$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z db 0FFh
.xdata$x:00000BF4                                         ; DATA XREF: .xdata$x:00000C14o
.xdata$x:00000BF5                 db 0FFh
.xdata$x:00000BF6                 db 0FFh
.xdata$x:00000BF7                 db 0FFh
.xdata$x:00000BF8                 db    0
.xdata$x:00000BF9                 db    0
.xdata$x:00000BFA                 db    0
.xdata$x:00000BFB                 db    0
.xdata$x:00000BFC                 db    0
.xdata$x:00000BFD                 db    0
.xdata$x:00000BFE                 db    0
.xdata$x:00000BFF                 db    0
.xdata$x:00000C00                 dd offset __unwindfunclet$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z$2
.xdata$x:00000C04                 db 0FFh
.xdata$x:00000C05                 db 0FFh
.xdata$x:00000C06                 db 0FFh
.xdata$x:00000C07                 db 0FFh
.xdata$x:00000C08                 db    0
.xdata$x:00000C09                 db    0
.xdata$x:00000C0A                 db    0
.xdata$x:00000C0B                 db    0
.xdata$x:00000C0C __ehfuncinfo$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z db  22h ; "
.xdata$x:00000C0C                                         ; DATA XREF: __ehhandler$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z+11o
.xdata$x:00000C0D                 db    5
.xdata$x:00000C0E                 db  93h ; รด
.xdata$x:00000C0F                 db  19h
.xdata$x:00000C10                 db    3
.xdata$x:00000C11                 db    0
.xdata$x:00000C12                 db    0
.xdata$x:00000C13                 db    0
.xdata$x:00000C14                 dd offset __unwindtable$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.xdata$x:00000C18                 db    1
.xdata$x:00000C19                 db    0
.xdata$x:00000C1A                 db    0
.xdata$x:00000C1B                 db    0
.xdata$x:00000C1C                 dd offset __tryblocktable$?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
.xdata$x:00000C20                 db    0
.xdata$x:00000C21                 db    0
.xdata$x:00000C22                 db    0
.xdata$x:00000C23                 db    0
.xdata$x:00000C24                 db    0
.xdata$x:00000C25                 db    0
.xdata$x:00000C26                 db    0
.xdata$x:00000C27                 db    0
.xdata$x:00000C28                 db    0
.xdata$x:00000C29                 db    0
.xdata$x:00000C2A                 db    0
.xdata$x:00000C2B                 db    0
.xdata$x:00000C2C                 db    1
.xdata$x:00000C2D                 db    0
.xdata$x:00000C2E                 db    0
.xdata$x:00000C2F                 db    0
.xdata$x:00000C2F _xdata$x        ends
.xdata$x:00000C2F
.rtc$TMZ:00000C30 ; ===========================================================================
.rtc$TMZ:00000C30
.rtc$TMZ:00000C30 ; Segment type: Pure data
.rtc$TMZ:00000C30 ; Segment permissions: Read
.rtc$TMZ:00000C30 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000C30                 assume cs:_rtc$TMZ
.rtc$TMZ:00000C30                 ;org 0C30h
.rtc$TMZ:00000C30 ; COMDAT (pick any)
.rtc$TMZ:00000C30 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000C30 _rtc$TMZ        ends
.rtc$TMZ:00000C30
.rtc$IMZ:00000C34 ; ===========================================================================
.rtc$IMZ:00000C34
.rtc$IMZ:00000C34 ; Segment type: Pure data
.rtc$IMZ:00000C34 ; Segment permissions: Read
.rtc$IMZ:00000C34 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000C34                 assume cs:_rtc$IMZ
.rtc$IMZ:00000C34                 ;org 0C34h
.rtc$IMZ:00000C34 ; COMDAT (pick any)
.rtc$IMZ:00000C34 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000C34 _rtc$IMZ        ends
.rtc$IMZ:00000C34
.text:00000C38 ; ===========================================================================
.text:00000C38
.text:00000C38 ; Segment type: Pure code
.text:00000C38 ; Segment permissions: Read/Execute
.text:00000C38 _text           segment para public 'CODE' use32
.text:00000C38                 assume cs:_text
.text:00000C38                 ;org 0C38h
.text:00000C38 ; COMDAT (pick any)
.text:00000C38                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C38
.text:00000C38 ; =============== S U B R O U T I N E =======================================
.text:00000C38
.text:00000C38 ; Attributes: bp-based frame
.text:00000C38
.text:00000C38 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00000C38                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00000C38 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00000C38                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+45p
.text:00000C38
.text:00000C38 var_4           = dword ptr -4
.text:00000C38
.text:00000C38                 push    ebp
.text:00000C39                 mov     ebp, esp
.text:00000C3B                 push    ecx
.text:00000C3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C43                 mov     [ebp+var_4], ecx
.text:00000C46                 xor     eax, eax
.text:00000C48                 mov     ecx, [ebp+var_4]
.text:00000C4B                 mov     [ecx], ax
.text:00000C4E                 xor     edx, edx
.text:00000C50                 mov     eax, [ebp+var_4]
.text:00000C53                 mov     [eax+2], dx
.text:00000C57                 mov     ecx, [ebp+var_4]
.text:00000C5A                 mov     dword ptr [ecx+8], 0
.text:00000C61                 mov     eax, [ebp+var_4]
.text:00000C64                 mov     esp, ebp
.text:00000C66                 pop     ebp
.text:00000C67                 retn
.text:00000C67 ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00000C67
.text:00000C67 _text           ends
.text:00000C67
.text:00000C68 ; ===========================================================================
.text:00000C68
.text:00000C68 ; Segment type: Pure code
.text:00000C68 ; Segment permissions: Read/Execute
.text:00000C68 _text           segment para public 'CODE' use32
.text:00000C68                 assume cs:_text
.text:00000C68                 ;org 0C68h
.text:00000C68 ; COMDAT (pick any)
.text:00000C68                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C68
.text:00000C68 ; =============== S U B R O U T I N E =======================================
.text:00000C68
.text:00000C68 ; Attributes: bp-based frame
.text:00000C68
.text:00000C68 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00000C68                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00000C68 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00000C68                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+140p
.text:00000C68                                         ; __unwindfunclet$?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z$2+3j
.text:00000C68
.text:00000C68 var_4           = dword ptr -4
.text:00000C68
.text:00000C68                 push    ebp
.text:00000C69                 mov     ebp, esp
.text:00000C6B                 push    ecx
.text:00000C6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C73                 mov     [ebp+var_4], ecx
.text:00000C76                 mov     ecx, [ebp+var_4] ; this
.text:00000C79                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00000C7E                 add     esp, 4
.text:00000C81                 cmp     ebp, esp
.text:00000C83                 call    __RTC_CheckEsp
.text:00000C88                 mov     esp, ebp
.text:00000C8A                 pop     ebp
.text:00000C8B                 retn
.text:00000C8B ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00000C8B
.text:00000C8B _text           ends
.text:00000C8B
.text:00000C8C ; ===========================================================================
.text:00000C8C
.text:00000C8C ; Segment type: Pure code
.text:00000C8C ; Segment permissions: Read/Execute
.text:00000C8C _text           segment para public 'CODE' use32
.text:00000C8C                 assume cs:_text
.text:00000C8C                 ;org 0C8Ch
.text:00000C8C ; COMDAT (pick any)
.text:00000C8C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000C8C
.text:00000C8C ; =============== S U B R O U T I N E =======================================
.text:00000C8C
.text:00000C8C ; Attributes: bp-based frame
.text:00000C8C
.text:00000C8C ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::IsDir(NWindows::NFile::NFind::CFileInfoBase *__hidden this)
.text:00000C8C                 public ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
.text:00000C8C ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ proc near
.text:00000C8C                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+B8p
.text:00000C8C                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+144p
.text:00000C8C
.text:00000C8C var_4           = dword ptr -4
.text:00000C8C
.text:00000C8C                 push    ebp
.text:00000C8D                 mov     ebp, esp
.text:00000C8F                 push    ecx
.text:00000C90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C97                 mov     [ebp+var_4], ecx
.text:00000C9A                 push    10h             ; unsigned int
.text:00000C9C                 mov     ecx, [ebp+var_4] ; this
.text:00000C9F                 call    ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask(uint)
.text:00000CA4                 add     esp, 4
.text:00000CA7                 cmp     ebp, esp
.text:00000CA9                 call    __RTC_CheckEsp
.text:00000CAE                 mov     esp, ebp
.text:00000CB0                 pop     ebp
.text:00000CB1                 retn
.text:00000CB1 ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ endp
.text:00000CB1
.text:00000CB1 ; ---------------------------------------------------------------------------
.text:00000CB2                 align 4
.text:00000CB2 _text           ends
.text:00000CB2
.text:00000CB4 ; ===========================================================================
.text:00000CB4
.text:00000CB4 ; Segment type: Pure code
.text:00000CB4 ; Segment permissions: Read/Execute
.text:00000CB4 _text           segment para public 'CODE' use32
.text:00000CB4                 assume cs:_text
.text:00000CB4                 ;org 0CB4h
.text:00000CB4 ; COMDAT (pick any)
.text:00000CB4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CB4
.text:00000CB4 ; =============== S U B R O U T I N E =======================================
.text:00000CB4
.text:00000CB4 ; Attributes: bp-based frame
.text:00000CB4
.text:00000CB4 ; bool __thiscall NWindows::NFile::NFind::CFileInfoBase::MatchesMask(NWindows::NFile::NFind::CFileInfoBase *this, unsigned int)
.text:00000CB4                 public ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
.text:00000CB4 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z proc near
.text:00000CB4                                         ; CODE XREF: NWindows::NFile::NFind::CFileInfoBase::IsDir(void)+13p
.text:00000CB4
.text:00000CB4 var_4           = dword ptr -4
.text:00000CB4 arg_0           = dword ptr  8
.text:00000CB4
.text:00000CB4                 push    ebp
.text:00000CB5                 mov     ebp, esp
.text:00000CB7                 push    ecx
.text:00000CB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CBF                 mov     [ebp+var_4], ecx
.text:00000CC2                 mov     eax, [ebp+var_4]
.text:00000CC5                 mov     eax, [eax+20h]
.text:00000CC8                 and     eax, [ebp+arg_0]
.text:00000CCB                 neg     eax
.text:00000CCD                 sbb     eax, eax
.text:00000CCF                 neg     eax
.text:00000CD1                 mov     esp, ebp
.text:00000CD3                 pop     ebp
.text:00000CD4                 retn    4
.text:00000CD4 ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z endp
.text:00000CD4
.text:00000CD4 ; ---------------------------------------------------------------------------
.text:00000CD7                 align 4
.text:00000CD7 _text           ends
.text:00000CD7
.text:00000CD8 ; ===========================================================================
.text:00000CD8
.text:00000CD8 ; Segment type: Pure code
.text:00000CD8 ; Segment permissions: Read/Execute
.text:00000CD8 _text           segment para public 'CODE' use32
.text:00000CD8                 assume cs:_text
.text:00000CD8                 ;org 0CD8h
.text:00000CD8 ; COMDAT (pick any)
.text:00000CD8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000CD8
.text:00000CD8 ; =============== S U B R O U T I N E =======================================
.text:00000CD8
.text:00000CD8 ; Attributes: bp-based frame
.text:00000CD8
.text:00000CD8 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000CD8                 public ??1UString@@QAE@XZ
.text:00000CD8 ??1UString@@QAE@XZ proc near            ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+F1p
.text:00000CD8                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+131p ...
.text:00000CD8
.text:00000CD8 var_8           = dword ptr -8
.text:00000CD8 var_4           = dword ptr -4
.text:00000CD8
.text:00000CD8                 push    ebp
.text:00000CD9                 mov     ebp, esp
.text:00000CDB                 sub     esp, 8
.text:00000CDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CEC                 mov     [ebp+var_4], ecx
.text:00000CEF                 mov     eax, [ebp+var_4]
.text:00000CF2                 mov     ecx, [eax]
.text:00000CF4                 mov     [ebp+var_8], ecx
.text:00000CF7                 mov     edx, [ebp+var_8]
.text:00000CFA                 push    edx             ; void *
.text:00000CFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D00                 add     esp, 4
.text:00000D03                 add     esp, 8
.text:00000D06                 cmp     ebp, esp
.text:00000D08                 call    __RTC_CheckEsp
.text:00000D0D                 mov     esp, ebp
.text:00000D0F                 pop     ebp
.text:00000D10                 retn
.text:00000D10 ??1UString@@QAE@XZ endp
.text:00000D10
.text:00000D10 ; ---------------------------------------------------------------------------
.text:00000D11                 align 4
.text:00000D11 _text           ends
.text:00000D11
.text:00000D14 ; ===========================================================================
.text:00000D14
.text:00000D14 ; Segment type: Pure code
.text:00000D14 ; Segment permissions: Read/Execute
.text:00000D14 _text           segment para public 'CODE' use32
.text:00000D14                 assume cs:_text
.text:00000D14                 ;org 0D14h
.text:00000D14 ; COMDAT (pick any)
.text:00000D14                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D14
.text:00000D14 ; =============== S U B R O U T I N E =======================================
.text:00000D14
.text:00000D14 ; Attributes: bp-based frame
.text:00000D14
.text:00000D14 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000D14                 public ??BUString@@QBEPB_WXZ
.text:00000D14 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+BFp
.text:00000D14                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+101p ...
.text:00000D14
.text:00000D14 var_4           = dword ptr -4
.text:00000D14
.text:00000D14                 push    ebp
.text:00000D15                 mov     ebp, esp
.text:00000D17                 push    ecx
.text:00000D18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D1F                 mov     [ebp+var_4], ecx
.text:00000D22                 mov     eax, [ebp+var_4]
.text:00000D25                 mov     eax, [eax]
.text:00000D27                 mov     esp, ebp
.text:00000D29                 pop     ebp
.text:00000D2A                 retn
.text:00000D2A ??BUString@@QBEPB_WXZ endp
.text:00000D2A
.text:00000D2A ; ---------------------------------------------------------------------------
.text:00000D2B                 align 4
.text:00000D2B _text           ends
.text:00000D2B
.text:00000D2C ; ===========================================================================
.text:00000D2C
.text:00000D2C ; Segment type: Pure code
.text:00000D2C ; Segment permissions: Read/Execute
.text:00000D2C _text           segment para public 'CODE' use32
.text:00000D2C                 assume cs:_text
.text:00000D2C                 ;org 0D2Ch
.text:00000D2C ; COMDAT (pick any)
.text:00000D2C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D2C
.text:00000D2C ; =============== S U B R O U T I N E =======================================
.text:00000D2C
.text:00000D2C ; Attributes: bp-based frame
.text:00000D2C
.text:00000D2C ; bool __thiscall CInFileStream::Open(CInFileStream *this, const wchar_t *)
.text:00000D2C                 public ?Open@CInFileStream@@QAE_NPB_W@Z
.text:00000D2C ?Open@CInFileStream@@QAE_NPB_W@Z proc near
.text:00000D2C                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+1EDp
.text:00000D2C
.text:00000D2C var_4           = dword ptr -4
.text:00000D2C arg_0           = dword ptr  8
.text:00000D2C
.text:00000D2C                 push    ebp
.text:00000D2D                 mov     ebp, esp
.text:00000D2F                 push    ecx
.text:00000D30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D37                 mov     [ebp+var_4], ecx
.text:00000D3A                 mov     eax, [ebp+arg_0]
.text:00000D3D                 push    eax             ; wchar_t *
.text:00000D3E                 mov     ecx, [ebp+var_4]
.text:00000D41                 add     ecx, 18h        ; this
.text:00000D44                 call    ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open(wchar_t const *)
.text:00000D49                 add     esp, 4
.text:00000D4C                 cmp     ebp, esp
.text:00000D4E                 call    __RTC_CheckEsp
.text:00000D53                 mov     esp, ebp
.text:00000D55                 pop     ebp
.text:00000D56                 retn    4
.text:00000D56 ?Open@CInFileStream@@QAE_NPB_W@Z endp
.text:00000D56
.text:00000D56 ; ---------------------------------------------------------------------------
.text:00000D59                 align 4
.text:00000D59 _text           ends
.text:00000D59
.text:00000D5C ; ===========================================================================
.text:00000D5C
.text:00000D5C ; Segment type: Pure code
.text:00000D5C ; Segment permissions: Read/Execute
.text:00000D5C _text           segment para public 'CODE' use32
.text:00000D5C                 assume cs:_text
.text:00000D5C                 ;org 0D5Ch
.text:00000D5C ; COMDAT (pick any)
.text:00000D5C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000D5C
.text:00000D5C ; =============== S U B R O U T I N E =======================================
.text:00000D5C
.text:00000D5C ; Attributes: bp-based frame
.text:00000D5C
.text:00000D5C ; _DWORD __thiscall CInFileStreamVol::CInFileStreamVol(CInFileStreamVol *__hidden this)
.text:00000D5C                 public ??0CInFileStreamVol@@QAE@XZ
.text:00000D5C ??0CInFileStreamVol@@QAE@XZ proc near   ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+18Fp
.text:00000D5C
.text:00000D5C var_10          = dword ptr -10h
.text:00000D5C var_C           = dword ptr -0Ch
.text:00000D5C var_4           = dword ptr -4
.text:00000D5C
.text:00000D5C                 push    ebp
.text:00000D5D                 mov     ebp, esp
.text:00000D5F                 push    0FFFFFFFFh
.text:00000D61                 push    offset __ehhandler$??0CInFileStreamVol@@QAE@XZ
.text:00000D66                 mov     eax, large fs:0
.text:00000D6C                 push    eax
.text:00000D6D                 push    ecx
.text:00000D6E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000D75                 mov     eax, dword ptr ds:___security_cookie
.text:00000D7A                 xor     eax, ebp
.text:00000D7C                 push    eax
.text:00000D7D                 lea     eax, [ebp+var_C]
.text:00000D80                 mov     large fs:0, eax
.text:00000D86                 mov     [ebp+var_10], ecx
.text:00000D89                 mov     ecx, [ebp+var_10]
.text:00000D8C                 call    ??0CInFileStream@@QAE@XZ ; CInFileStream::CInFileStream(void)
.text:00000D91                 mov     [ebp+var_4], 0
.text:00000D98                 mov     eax, [ebp+var_10]
.text:00000D9B                 mov     dword ptr [eax], offset ??_7CInFileStreamVol@@6BIInStream@@@ ; const CInFileStreamVol::`vftable'{for `IInStream'}
.text:00000DA1                 mov     ecx, [ebp+var_10]
.text:00000DA4                 mov     dword ptr [ecx+4], offset ??_7CInFileStreamVol@@6BIStreamGetSize@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetSize'}
.text:00000DAB                 mov     edx, [ebp+var_10]
.text:00000DAE                 mov     dword ptr [edx+8], offset ??_7CInFileStreamVol@@6BIStreamGetProps@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetProps'}
.text:00000DB5                 mov     eax, [ebp+var_10]
.text:00000DB8                 mov     dword ptr [eax+0Ch], offset ??_7CInFileStreamVol@@6BIStreamGetProps2@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetProps2'}
.text:00000DBF                 mov     ecx, [ebp+var_10]
.text:00000DC2                 add     ecx, 60h ; '`'
.text:00000DC5                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(void)
.text:00000DCA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000DD1                 mov     eax, [ebp+var_10]
.text:00000DD4                 mov     ecx, [ebp+var_C]
.text:00000DD7                 mov     large fs:0, ecx
.text:00000DDE                 pop     ecx
.text:00000DDF                 add     esp, 10h
.text:00000DE2                 cmp     ebp, esp
.text:00000DE4                 call    __RTC_CheckEsp
.text:00000DE9                 mov     esp, ebp
.text:00000DEB                 pop     ebp
.text:00000DEC                 retn
.text:00000DEC ??0CInFileStreamVol@@QAE@XZ endp
.text:00000DEC
.text:00000DEC ; ---------------------------------------------------------------------------
.text:00000DED                 align 10h
.text:00000DED _text           ends
.text:00000DED
.text$x:00000DF0 ; ===========================================================================
.text$x:00000DF0
.text$x:00000DF0 ; Segment type: Pure code
.text$x:00000DF0 ; Segment permissions: Read/Execute
.text$x:00000DF0 _text$x         segment para public 'CODE' use32
.text$x:00000DF0                 assume cs:_text$x
.text$x:00000DF0                 ;org 0DF0h
.text$x:00000DF0 ; COMDAT (pick associative to section at D5C)
.text$x:00000DF0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000DF0
.text$x:00000DF0 ; =============== S U B R O U T I N E =======================================
.text$x:00000DF0
.text$x:00000DF0
.text$x:00000DF0 __unwindfunclet$??0CInFileStreamVol@@QAE@XZ$0 proc near
.text$x:00000DF0                                         ; DATA XREF: .xdata$x:00000E70o
.text$x:00000DF0                 mov     ecx, [ebp-10h]  ; this
.text$x:00000DF3                 jmp     ??1CInFileStream@@UAE@XZ ; CInFileStream::~CInFileStream(void)
.text$x:00000DF3 __unwindfunclet$??0CInFileStreamVol@@QAE@XZ$0 endp
.text$x:00000DF3
.text$x:00000DF8
.text$x:00000DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00000DF8
.text$x:00000DF8
.text$x:00000DF8 __ehhandler$??0CInFileStreamVol@@QAE@XZ proc near
.text$x:00000DF8                                         ; DATA XREF: CInFileStreamVol::CInFileStreamVol(void)+5o
.text$x:00000DF8
.text$x:00000DF8 arg_4           = dword ptr  8
.text$x:00000DF8
.text$x:00000DF8                 mov     edx, [esp+arg_4]
.text$x:00000DFC                 lea     eax, [edx+0Ch]
.text$x:00000DFF                 mov     ecx, [edx-8]
.text$x:00000E02                 xor     ecx, eax
.text$x:00000E04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000E09                 mov     eax, offset __ehfuncinfo$??0CInFileStreamVol@@QAE@XZ
.text$x:00000E0E                 jmp     ___CxxFrameHandler3
.text$x:00000E0E __ehhandler$??0CInFileStreamVol@@QAE@XZ endp
.text$x:00000E0E
.text$x:00000E0E ; ---------------------------------------------------------------------------
.text$x:00000E13                 align 4
.text$x:00000E13 _text$x         ends
.text$x:00000E13
.rdata:00000E14 ; ===========================================================================
.rdata:00000E14
.rdata:00000E14 ; Segment type: Pure data
.rdata:00000E14 ; Segment permissions: Read
.rdata:00000E14 _rdata          segment dword public 'DATA' use32
.rdata:00000E14                 assume cs:_rdata
.rdata:00000E14                 ;org 0E14h
.rdata:00000E14 ; COMDAT (pick largest)
.rdata:00000E14                 dd offset ??_R4CInFileStreamVol@@6BIStreamGetProps2@@@ ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetProps2'}
.rdata:00000E18                 public ??_7CInFileStreamVol@@6BIStreamGetProps2@@@
.rdata:00000E18 ; const CInFileStreamVol::`vftable'{for `IStreamGetProps2'}
.rdata:00000E18 ??_7CInFileStreamVol@@6BIStreamGetProps2@@@ dd offset ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000E18                                         ; DATA XREF: CInFileStreamVol::CInFileStreamVol(void)+5Co
.rdata:00000E18                                         ; CInFileStreamVol::~CInFileStreamVol(void)+4Do
.rdata:00000E18                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00000E1C                 dd offset ?AddRef@CInFileStream@@WM@AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{12}' (void)
.rdata:00000E20                 dd offset ?Release@CInFileStream@@WM@AGKXZ ; [thunk]:CInFileStream::Release`adjustor{12}' (void)
.rdata:00000E24                 dd offset ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z ; CInFileStream::GetProps2(CStreamFileProps *)
.rdata:00000E24 _rdata          ends
.rdata:00000E24
.rdata:00000E28 ; ===========================================================================
.rdata:00000E28
.rdata:00000E28 ; Segment type: Pure data
.rdata:00000E28 ; Segment permissions: Read
.rdata:00000E28 _rdata          segment dword public 'DATA' use32
.rdata:00000E28                 assume cs:_rdata
.rdata:00000E28                 ;org 0E28h
.rdata:00000E28 ; COMDAT (pick largest)
.rdata:00000E28                 dd offset ??_R4CInFileStreamVol@@6BIStreamGetProps@@@ ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetProps'}
.rdata:00000E2C                 public ??_7CInFileStreamVol@@6BIStreamGetProps@@@
.rdata:00000E2C ; const CInFileStreamVol::`vftable'{for `IStreamGetProps'}
.rdata:00000E2C ??_7CInFileStreamVol@@6BIStreamGetProps@@@ dd offset ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000E2C                                         ; DATA XREF: CInFileStreamVol::CInFileStreamVol(void)+52o
.rdata:00000E2C                                         ; CInFileStreamVol::~CInFileStreamVol(void)+43o
.rdata:00000E2C                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000E30                 dd offset ?AddRef@CInFileStream@@W7AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{8}' (void)
.rdata:00000E34                 dd offset ?Release@CInFileStream@@W7AGKXZ ; [thunk]:CInFileStream::Release`adjustor{8}' (void)
.rdata:00000E38                 dd offset ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z ; CInFileStream::GetProps(unsigned __int64 *,_FILETIME *,_FILETIME *,_FILETIME *,uint *)
.rdata:00000E38 _rdata          ends
.rdata:00000E38
.rdata:00000E3C ; ===========================================================================
.rdata:00000E3C
.rdata:00000E3C ; Segment type: Pure data
.rdata:00000E3C ; Segment permissions: Read
.rdata:00000E3C _rdata          segment dword public 'DATA' use32
.rdata:00000E3C                 assume cs:_rdata
.rdata:00000E3C                 ;org 0E3Ch
.rdata:00000E3C ; COMDAT (pick largest)
.rdata:00000E3C                 dd offset ??_R4CInFileStreamVol@@6BIStreamGetSize@@@ ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetSize'}
.rdata:00000E40                 public ??_7CInFileStreamVol@@6BIStreamGetSize@@@
.rdata:00000E40 ; const CInFileStreamVol::`vftable'{for `IStreamGetSize'}
.rdata:00000E40 ??_7CInFileStreamVol@@6BIStreamGetSize@@@ dd offset ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000E40                                         ; DATA XREF: CInFileStreamVol::CInFileStreamVol(void)+48o
.rdata:00000E40                                         ; CInFileStreamVol::~CInFileStreamVol(void)+39o
.rdata:00000E40                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00000E44                 dd offset ?AddRef@CInFileStream@@W3AGKXZ ; [thunk]:CInFileStream::AddRef`adjustor{4}' (void)
.rdata:00000E48                 dd offset ?Release@CInFileStream@@W3AGKXZ ; [thunk]:CInFileStream::Release`adjustor{4}' (void)
.rdata:00000E4C                 dd offset ?GetSize@CInFileStream@@UAGJPA_K@Z ; CInFileStream::GetSize(unsigned __int64 *)
.rdata:00000E4C _rdata          ends
.rdata:00000E4C
.rdata:00000E50 ; ===========================================================================
.rdata:00000E50
.rdata:00000E50 ; Segment type: Pure data
.rdata:00000E50 ; Segment permissions: Read
.rdata:00000E50 _rdata          segment dword public 'DATA' use32
.rdata:00000E50                 assume cs:_rdata
.rdata:00000E50                 ;org 0E50h
.rdata:00000E50 ; COMDAT (pick largest)
.rdata:00000E50                 dd offset ??_R4CInFileStreamVol@@6BIInStream@@@ ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IInStream'}
.rdata:00000E54                 public ??_7CInFileStreamVol@@6BIInStream@@@
.rdata:00000E54 ; const CInFileStreamVol::`vftable'{for `IInStream'}
.rdata:00000E54 ??_7CInFileStreamVol@@6BIInStream@@@ dd offset ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000E54                                         ; DATA XREF: CInFileStreamVol::CInFileStreamVol(void)+3Fo
.rdata:00000E54                                         ; CInFileStreamVol::~CInFileStreamVol(void)+30o
.rdata:00000E54                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)
.rdata:00000E58                 dd offset ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.rdata:00000E5C                 dd offset ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.rdata:00000E60                 dd offset ?Read@CInFileStream@@UAGJPAXIPAI@Z ; CInFileStream::Read(void *,uint,uint *)
.rdata:00000E64                 dd offset ?Seek@CInFileStream@@UAGJ_JIPA_K@Z ; CInFileStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:00000E68                 dd offset ??_ECInFileStreamVol@@UAEPAXI@Z ; CInFileStreamVol::`vector deleting destructor'(uint)
.rdata:00000E68 _rdata          ends
.rdata:00000E68
.xdata$x:00000E6C ; ===========================================================================
.xdata$x:00000E6C
.xdata$x:00000E6C ; Segment type: Pure data
.xdata$x:00000E6C ; Segment permissions: Read
.xdata$x:00000E6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000E6C                 assume cs:_xdata$x
.xdata$x:00000E6C                 ;org 0E6Ch
.xdata$x:00000E6C ; COMDAT (pick associative to section at D5C)
.xdata$x:00000E6C __unwindtable$??0CInFileStreamVol@@QAE@XZ db 0FFh
.xdata$x:00000E6C                                         ; DATA XREF: .xdata$x:00000E7Co
.xdata$x:00000E6D                 db 0FFh
.xdata$x:00000E6E                 db 0FFh
.xdata$x:00000E6F                 db 0FFh
.xdata$x:00000E70                 dd offset __unwindfunclet$??0CInFileStreamVol@@QAE@XZ$0
.xdata$x:00000E74 __ehfuncinfo$??0CInFileStreamVol@@QAE@XZ db  22h ; "
.xdata$x:00000E74                                         ; DATA XREF: __ehhandler$??0CInFileStreamVol@@QAE@XZ+11o
.xdata$x:00000E75                 db    5
.xdata$x:00000E76                 db  93h ; รด
.xdata$x:00000E77                 db  19h
.xdata$x:00000E78                 db    1
.xdata$x:00000E79                 db    0
.xdata$x:00000E7A                 db    0
.xdata$x:00000E7B                 db    0
.xdata$x:00000E7C                 dd offset __unwindtable$??0CInFileStreamVol@@QAE@XZ
.xdata$x:00000E80                 db    0
.xdata$x:00000E81                 db    0
.xdata$x:00000E82                 db    0
.xdata$x:00000E83                 db    0
.xdata$x:00000E84                 db    0
.xdata$x:00000E85                 db    0
.xdata$x:00000E86                 db    0
.xdata$x:00000E87                 db    0
.xdata$x:00000E88                 db    0
.xdata$x:00000E89                 db    0
.xdata$x:00000E8A                 db    0
.xdata$x:00000E8B                 db    0
.xdata$x:00000E8C                 db    0
.xdata$x:00000E8D                 db    0
.xdata$x:00000E8E                 db    0
.xdata$x:00000E8F                 db    0
.xdata$x:00000E90                 db    0
.xdata$x:00000E91                 db    0
.xdata$x:00000E92                 db    0
.xdata$x:00000E93                 db    0
.xdata$x:00000E94                 db    1
.xdata$x:00000E95                 db    0
.xdata$x:00000E96                 db    0
.xdata$x:00000E97                 db    0
.xdata$x:00000E97 _xdata$x        ends
.xdata$x:00000E97
.rdata$r:00000E98 ; ===========================================================================
.rdata$r:00000E98
.rdata$r:00000E98 ; Segment type: Pure data
.rdata$r:00000E98 ; Segment permissions: Read
.rdata$r:00000E98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000E98                 assume cs:_rdata$r
.rdata$r:00000E98                 ;org 0E98h
.rdata$r:00000E98 ; COMDAT (pick any)
.rdata$r:00000E98                 public ??_R4CInFileStreamVol@@6BIInStream@@@
.rdata$r:00000E98 ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IInStream'}
.rdata$r:00000E98 ??_R4CInFileStreamVol@@6BIInStream@@@ db    0
.rdata$r:00000E98                                         ; DATA XREF: .rdata:00000E50o
.rdata$r:00000E99                 db    0
.rdata$r:00000E9A                 db    0
.rdata$r:00000E9B                 db    0
.rdata$r:00000E9C                 db    0
.rdata$r:00000E9D                 db    0
.rdata$r:00000E9E                 db    0
.rdata$r:00000E9F                 db    0
.rdata$r:00000EA0                 db    0
.rdata$r:00000EA1                 db    0
.rdata$r:00000EA2                 db    0
.rdata$r:00000EA3                 db    0
.rdata$r:00000EA4                 dd offset ??_R0?AUCInFileStreamVol@@@8 ; CInFileStreamVol `RTTI Type Descriptor'
.rdata$r:00000EA8                 dd offset ??_R3CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EA8 _rdata$r        ends
.rdata$r:00000EA8
.data:00000EAC ; ===========================================================================
.data:00000EAC
.data:00000EAC ; Segment type: Pure data
.data:00000EAC ; Segment permissions: Read/Write
.data:00000EAC _data           segment dword public 'DATA' use32
.data:00000EAC                 assume cs:_data
.data:00000EAC                 ;org 0EACh
.data:00000EAC ; COMDAT (pick any)
.data:00000EAC                 public ??_R0?AUCInFileStreamVol@@@8
.data:00000EAC ; struct CInFileStreamVol `RTTI Type Descriptor'
.data:00000EAC ??_R0?AUCInFileStreamVol@@@8 dd offset ??_7type_info@@6B@
.data:00000EAC                                         ; DATA XREF: .rdata$r:00000EA4o
.data:00000EAC                                         ; .rdata$r:CInFileStreamVol::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000EAC                                         ; const type_info::`vftable'
.data:00000EB0                 db    0
.data:00000EB1                 db    0
.data:00000EB2                 db    0
.data:00000EB3                 db    0
.data:00000EB4                 db  2Eh ; .
.data:00000EB5                 db  3Fh ; ?
.data:00000EB6                 db  41h ; A
.data:00000EB7                 db  55h ; U
.data:00000EB8                 db  43h ; C
.data:00000EB9                 db  49h ; I
.data:00000EBA                 db  6Eh ; n
.data:00000EBB                 db  46h ; F
.data:00000EBC                 db  69h ; i
.data:00000EBD                 db  6Ch ; l
.data:00000EBE                 db  65h ; e
.data:00000EBF                 db  53h ; S
.data:00000EC0                 db  74h ; t
.data:00000EC1                 db  72h ; r
.data:00000EC2                 db  65h ; e
.data:00000EC3                 db  61h ; a
.data:00000EC4                 db  6Dh ; m
.data:00000EC5                 db  56h ; V
.data:00000EC6                 db  6Fh ; o
.data:00000EC7                 db  6Ch ; l
.data:00000EC8                 db  40h ; @
.data:00000EC9                 db  40h ; @
.data:00000ECA                 db    0
.data:00000ECB                 align 4
.data:00000ECB _data           ends
.data:00000ECB
.rdata$r:00000ECC ; ===========================================================================
.rdata$r:00000ECC
.rdata$r:00000ECC ; Segment type: Pure data
.rdata$r:00000ECC ; Segment permissions: Read
.rdata$r:00000ECC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000ECC                 assume cs:_rdata$r
.rdata$r:00000ECC                 ;org 0ECCh
.rdata$r:00000ECC ; COMDAT (pick any)
.rdata$r:00000ECC                 public ??_R3CInFileStreamVol@@8
.rdata$r:00000ECC ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ECC ??_R3CInFileStreamVol@@8 db    0        ; DATA XREF: .rdata$r:00000EA8o
.rdata$r:00000ECC                                         ; .rdata$r:00000F28o ...
.rdata$r:00000ECD                 db    0
.rdata$r:00000ECE                 db    0
.rdata$r:00000ECF                 db    0
.rdata$r:00000ED0                 db    1
.rdata$r:00000ED1                 db    0
.rdata$r:00000ED2                 db    0
.rdata$r:00000ED3                 db    0
.rdata$r:00000ED4                 db  0Ch
.rdata$r:00000ED5                 db    0
.rdata$r:00000ED6                 db    0
.rdata$r:00000ED7                 db    0
.rdata$r:00000ED8                 dd offset ??_R2CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Base Class Array'
.rdata$r:00000ED8 _rdata$r        ends
.rdata$r:00000ED8
.rdata$r:00000EDC ; ===========================================================================
.rdata$r:00000EDC
.rdata$r:00000EDC ; Segment type: Pure data
.rdata$r:00000EDC ; Segment permissions: Read
.rdata$r:00000EDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EDC                 assume cs:_rdata$r
.rdata$r:00000EDC                 ;org 0EDCh
.rdata$r:00000EDC ; COMDAT (pick any)
.rdata$r:00000EDC                 public ??_R2CInFileStreamVol@@8
.rdata$r:00000EDC ; CInFileStreamVol::`RTTI Base Class Array'
.rdata$r:00000EDC ??_R2CInFileStreamVol@@8 dd offset ??_R1A@?0A@EA@CInFileStreamVol@@8
.rdata$r:00000EDC                                         ; DATA XREF: .rdata$r:00000ED8o
.rdata$r:00000EDC                                         ; CInFileStreamVol::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EE0                 dd offset ??_R1A@?0A@EA@CInFileStream@@8 ; CInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EE4                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EE8                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000EEC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000EF0                 dd offset ??_R13?0A@EA@IStreamGetSize@@8 ; IStreamGetSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000EF4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000EF8                 dd offset ??_R17?0A@EA@IStreamGetProps@@8 ; IStreamGetProps::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000EFC                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000F00                 dd offset ??_R1M@?0A@EA@IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000F04                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000F08                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000F0C                 db    0
.rdata$r:00000F0D                 align 10h
.rdata$r:00000F0D _rdata$r        ends
.rdata$r:00000F0D
.rdata$r:00000F10 ; ===========================================================================
.rdata$r:00000F10
.rdata$r:00000F10 ; Segment type: Pure data
.rdata$r:00000F10 ; Segment permissions: Read
.rdata$r:00000F10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F10                 assume cs:_rdata$r
.rdata$r:00000F10                 ;org 0F10h
.rdata$r:00000F10 ; COMDAT (pick any)
.rdata$r:00000F10                 public ??_R1A@?0A@EA@CInFileStreamVol@@8
.rdata$r:00000F10 ; CInFileStreamVol::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F10 ??_R1A@?0A@EA@CInFileStreamVol@@8 dd offset ??_R0?AUCInFileStreamVol@@@8
.rdata$r:00000F10                                         ; DATA XREF: .rdata$r:CInFileStreamVol::`RTTI Base Class Array'o
.rdata$r:00000F10                                         ; CInFileStreamVol `RTTI Type Descriptor'
.rdata$r:00000F14                 db  0Bh
.rdata$r:00000F15                 db    0
.rdata$r:00000F16                 db    0
.rdata$r:00000F17                 db    0
.rdata$r:00000F18                 db    0
.rdata$r:00000F19                 db    0
.rdata$r:00000F1A                 db    0
.rdata$r:00000F1B                 db    0
.rdata$r:00000F1C                 db 0FFh
.rdata$r:00000F1D                 db 0FFh
.rdata$r:00000F1E                 db 0FFh
.rdata$r:00000F1F                 db 0FFh
.rdata$r:00000F20                 db    0
.rdata$r:00000F21                 db    0
.rdata$r:00000F22                 db    0
.rdata$r:00000F23                 db    0
.rdata$r:00000F24                 db  40h ; @
.rdata$r:00000F25                 db    0
.rdata$r:00000F26                 db    0
.rdata$r:00000F27                 db    0
.rdata$r:00000F28                 dd offset ??_R3CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F28 _rdata$r        ends
.rdata$r:00000F28
.rdata$r:00000F2C ; ===========================================================================
.rdata$r:00000F2C
.rdata$r:00000F2C ; Segment type: Pure data
.rdata$r:00000F2C ; Segment permissions: Read
.rdata$r:00000F2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F2C                 assume cs:_rdata$r
.rdata$r:00000F2C                 ;org 0F2Ch
.rdata$r:00000F2C ; COMDAT (pick any)
.rdata$r:00000F2C                 public ??_R1A@?0A@EA@CInFileStream@@8
.rdata$r:00000F2C ; CInFileStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000F2C ??_R1A@?0A@EA@CInFileStream@@8 dd offset ??_R0?AVCInFileStream@@@8
.rdata$r:00000F2C                                         ; DATA XREF: .rdata$r:00000EE0o
.rdata$r:00000F2C                                         ; .rdata$r:CInFileStream::`RTTI Base Class Array'o
.rdata$r:00000F2C                                         ; CInFileStream `RTTI Type Descriptor'
.rdata$r:00000F30                 db  0Ah
.rdata$r:00000F31                 db    0
.rdata$r:00000F32                 db    0
.rdata$r:00000F33                 db    0
.rdata$r:00000F34                 db    0
.rdata$r:00000F35                 db    0
.rdata$r:00000F36                 db    0
.rdata$r:00000F37                 db    0
.rdata$r:00000F38                 db 0FFh
.rdata$r:00000F39                 db 0FFh
.rdata$r:00000F3A                 db 0FFh
.rdata$r:00000F3B                 db 0FFh
.rdata$r:00000F3C                 db    0
.rdata$r:00000F3D                 db    0
.rdata$r:00000F3E                 db    0
.rdata$r:00000F3F                 db    0
.rdata$r:00000F40                 db  40h ; @
.rdata$r:00000F41                 db    0
.rdata$r:00000F42                 db    0
.rdata$r:00000F43                 db    0
.rdata$r:00000F44                 dd offset ??_R3CInFileStream@@8 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F44 _rdata$r        ends
.rdata$r:00000F44
.data:00000F48 ; ===========================================================================
.data:00000F48
.data:00000F48 ; Segment type: Pure data
.data:00000F48 ; Segment permissions: Read/Write
.data:00000F48 _data           segment dword public 'DATA' use32
.data:00000F48                 assume cs:_data
.data:00000F48                 ;org 0F48h
.data:00000F48 ; COMDAT (pick any)
.data:00000F48                 public ??_R0?AVCInFileStream@@@8
.data:00000F48 ; class CInFileStream `RTTI Type Descriptor'
.data:00000F48 ??_R0?AVCInFileStream@@@8 dd offset ??_7type_info@@6B@
.data:00000F48                                         ; DATA XREF: .rdata$r:CInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000F48                                         ; const type_info::`vftable'
.data:00000F4C                 align 10h
.data:00000F50 a_?avcinfilestr db '.?AVCInFileStream@@',0
.data:00000F50 _data           ends
.data:00000F50
.rdata$r:00000F64 ; ===========================================================================
.rdata$r:00000F64
.rdata$r:00000F64 ; Segment type: Pure data
.rdata$r:00000F64 ; Segment permissions: Read
.rdata$r:00000F64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F64                 assume cs:_rdata$r
.rdata$r:00000F64                 ;org 0F64h
.rdata$r:00000F64 ; COMDAT (pick any)
.rdata$r:00000F64                 public ??_R3CInFileStream@@8
.rdata$r:00000F64 ; CInFileStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F64 ??_R3CInFileStream@@8 db    0           ; DATA XREF: .rdata$r:00000F44o
.rdata$r:00000F65                 db    0
.rdata$r:00000F66                 db    0
.rdata$r:00000F67                 db    0
.rdata$r:00000F68                 db    1
.rdata$r:00000F69                 db    0
.rdata$r:00000F6A                 db    0
.rdata$r:00000F6B                 db    0
.rdata$r:00000F6C                 db  0Bh
.rdata$r:00000F6D                 db    0
.rdata$r:00000F6E                 db    0
.rdata$r:00000F6F                 db    0
.rdata$r:00000F70                 dd offset ??_R2CInFileStream@@8 ; CInFileStream::`RTTI Base Class Array'
.rdata$r:00000F70 _rdata$r        ends
.rdata$r:00000F70
.rdata$r:00000F74 ; ===========================================================================
.rdata$r:00000F74
.rdata$r:00000F74 ; Segment type: Pure data
.rdata$r:00000F74 ; Segment permissions: Read
.rdata$r:00000F74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F74                 assume cs:_rdata$r
.rdata$r:00000F74                 ;org 0F74h
.rdata$r:00000F74 ; COMDAT (pick any)
.rdata$r:00000F74                 public ??_R2CInFileStream@@8
.rdata$r:00000F74 ; CInFileStream::`RTTI Base Class Array'
.rdata$r:00000F74 ??_R2CInFileStream@@8 dd offset ??_R1A@?0A@EA@CInFileStream@@8
.rdata$r:00000F74                                         ; DATA XREF: .rdata$r:00000F70o
.rdata$r:00000F74                                         ; CInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F78                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F7C                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000F80                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000F84                 dd offset ??_R13?0A@EA@IStreamGetSize@@8 ; IStreamGetSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000F88                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000F8C                 dd offset ??_R17?0A@EA@IStreamGetProps@@8 ; IStreamGetProps::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000F90                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000F94                 dd offset ??_R1M@?0A@EA@IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000F98                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00000F9C                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000FA0                 db    0
.rdata$r:00000FA1                 align 4
.rdata$r:00000FA1 _rdata$r        ends
.rdata$r:00000FA1
.rdata$r:00000FA4 ; ===========================================================================
.rdata$r:00000FA4
.rdata$r:00000FA4 ; Segment type: Pure data
.rdata$r:00000FA4 ; Segment permissions: Read
.rdata$r:00000FA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FA4                 assume cs:_rdata$r
.rdata$r:00000FA4                 ;org 0FA4h
.rdata$r:00000FA4 ; COMDAT (pick any)
.rdata$r:00000FA4                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:00000FA4 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000FA4 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:00000FA4                                         ; DATA XREF: .rdata$r:00000EE4o
.rdata$r:00000FA4                                         ; .rdata$r:00000F78o ...
.rdata$r:00000FA4                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:00000FA8                 db    2
.rdata$r:00000FA9                 db    0
.rdata$r:00000FAA                 db    0
.rdata$r:00000FAB                 db    0
.rdata$r:00000FAC                 db    0
.rdata$r:00000FAD                 db    0
.rdata$r:00000FAE                 db    0
.rdata$r:00000FAF                 db    0
.rdata$r:00000FB0                 db 0FFh
.rdata$r:00000FB1                 db 0FFh
.rdata$r:00000FB2                 db 0FFh
.rdata$r:00000FB3                 db 0FFh
.rdata$r:00000FB4                 db    0
.rdata$r:00000FB5                 db    0
.rdata$r:00000FB6                 db    0
.rdata$r:00000FB7                 db    0
.rdata$r:00000FB8                 db  40h ; @
.rdata$r:00000FB9                 db    0
.rdata$r:00000FBA                 db    0
.rdata$r:00000FBB                 db    0
.rdata$r:00000FBC                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FBC _rdata$r        ends
.rdata$r:00000FBC
.data:00000FC0 ; ===========================================================================
.data:00000FC0
.data:00000FC0 ; Segment type: Pure data
.data:00000FC0 ; Segment permissions: Read/Write
.data:00000FC0 _data           segment dword public 'DATA' use32
.data:00000FC0                 assume cs:_data
.data:00000FC0                 ;org 0FC0h
.data:00000FC0 ; COMDAT (pick any)
.data:00000FC0                 public ??_R0?AUIInStream@@@8
.data:00000FC0 ; struct IInStream `RTTI Type Descriptor'
.data:00000FC0 ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000FC0                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000FC0                                         ; const type_info::`vftable'
.data:00000FC4                 align 8
.data:00000FC8 a_?auiinstream@ db '.?AUIInStream@@',0
.data:00000FC8 _data           ends
.data:00000FC8
.rdata$r:00000FD8 ; ===========================================================================
.rdata$r:00000FD8
.rdata$r:00000FD8 ; Segment type: Pure data
.rdata$r:00000FD8 ; Segment permissions: Read
.rdata$r:00000FD8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FD8                 assume cs:_rdata$r
.rdata$r:00000FD8                 ;org 0FD8h
.rdata$r:00000FD8 ; COMDAT (pick any)
.rdata$r:00000FD8                 public ??_R3IInStream@@8
.rdata$r:00000FD8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FD8 ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:00000FBCo
.rdata$r:00000FD9                 db    0
.rdata$r:00000FDA                 db    0
.rdata$r:00000FDB                 db    0
.rdata$r:00000FDC                 db    0
.rdata$r:00000FDD                 db    0
.rdata$r:00000FDE                 db    0
.rdata$r:00000FDF                 db    0
.rdata$r:00000FE0                 db    3
.rdata$r:00000FE1                 db    0
.rdata$r:00000FE2                 db    0
.rdata$r:00000FE3                 db    0
.rdata$r:00000FE4                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00000FE4 _rdata$r        ends
.rdata$r:00000FE4
.rdata$r:00000FE8 ; ===========================================================================
.rdata$r:00000FE8
.rdata$r:00000FE8 ; Segment type: Pure data
.rdata$r:00000FE8 ; Segment permissions: Read
.rdata$r:00000FE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FE8                 assume cs:_rdata$r
.rdata$r:00000FE8                 ;org 0FE8h
.rdata$r:00000FE8 ; COMDAT (pick any)
.rdata$r:00000FE8                 public ??_R2IInStream@@8
.rdata$r:00000FE8 ; IInStream::`RTTI Base Class Array'
.rdata$r:00000FE8 ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:00000FE8                                         ; DATA XREF: .rdata$r:00000FE4o
.rdata$r:00000FE8                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FEC                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FF0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000FF4                 db    0
.rdata$r:00000FF5                 align 4
.rdata$r:00000FF5 _rdata$r        ends
.rdata$r:00000FF5
.rdata$r:00000FF8 ; ===========================================================================
.rdata$r:00000FF8
.rdata$r:00000FF8 ; Segment type: Pure data
.rdata$r:00000FF8 ; Segment permissions: Read
.rdata$r:00000FF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FF8                 assume cs:_rdata$r
.rdata$r:00000FF8                 ;org 0FF8h
.rdata$r:00000FF8 ; COMDAT (pick any)
.rdata$r:00000FF8                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000FF8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000FF8 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000FF8                                         ; DATA XREF: .rdata$r:00000EE8o
.rdata$r:00000FF8                                         ; .rdata$r:00000F7Co ...
.rdata$r:00000FF8                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000FFC                 db    1
.rdata$r:00000FFD                 db    0
.rdata$r:00000FFE                 db    0
.rdata$r:00000FFF                 db    0
.rdata$r:00001000                 db    0
.rdata$r:00001001                 db    0
.rdata$r:00001002                 db    0
.rdata$r:00001003                 db    0
.rdata$r:00001004                 db 0FFh
.rdata$r:00001005                 db 0FFh
.rdata$r:00001006                 db 0FFh
.rdata$r:00001007                 db 0FFh
.rdata$r:00001008                 db    0
.rdata$r:00001009                 db    0
.rdata$r:0000100A                 db    0
.rdata$r:0000100B                 db    0
.rdata$r:0000100C                 db  40h ; @
.rdata$r:0000100D                 db    0
.rdata$r:0000100E                 db    0
.rdata$r:0000100F                 db    0
.rdata$r:00001010                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001010 _rdata$r        ends
.rdata$r:00001010
.data:00001014 ; ===========================================================================
.data:00001014
.data:00001014 ; Segment type: Pure data
.data:00001014 ; Segment permissions: Read/Write
.data:00001014 _data           segment dword public 'DATA' use32
.data:00001014                 assume cs:_data
.data:00001014                 ;org 1014h
.data:00001014 ; COMDAT (pick any)
.data:00001014                 public ??_R0?AUISequentialInStream@@@8
.data:00001014 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00001014 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00001014                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001014                                         ; const type_info::`vftable'
.data:00001018                 db    0
.data:00001019                 db    0
.data:0000101A                 db    0
.data:0000101B                 db    0
.data:0000101C                 db  2Eh ; .
.data:0000101D                 db  3Fh ; ?
.data:0000101E                 db  41h ; A
.data:0000101F                 db  55h ; U
.data:00001020                 db  49h ; I
.data:00001021                 db  53h ; S
.data:00001022                 db  65h ; e
.data:00001023                 db  71h ; q
.data:00001024                 db  75h ; u
.data:00001025                 db  65h ; e
.data:00001026                 db  6Eh ; n
.data:00001027                 db  74h ; t
.data:00001028                 db  69h ; i
.data:00001029                 db  61h ; a
.data:0000102A                 db  6Ch ; l
.data:0000102B                 db  49h ; I
.data:0000102C                 db  6Eh ; n
.data:0000102D                 db  53h ; S
.data:0000102E                 db  74h ; t
.data:0000102F                 db  72h ; r
.data:00001030                 db  65h ; e
.data:00001031                 db  61h ; a
.data:00001032                 db  6Dh ; m
.data:00001033                 db  40h ; @
.data:00001034                 db  40h ; @
.data:00001035                 db    0
.data:00001036                 align 4
.data:00001036 _data           ends
.data:00001036
.rdata$r:00001038 ; ===========================================================================
.rdata$r:00001038
.rdata$r:00001038 ; Segment type: Pure data
.rdata$r:00001038 ; Segment permissions: Read
.rdata$r:00001038 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001038                 assume cs:_rdata$r
.rdata$r:00001038                 ;org 1038h
.rdata$r:00001038 ; COMDAT (pick any)
.rdata$r:00001038                 public ??_R3ISequentialInStream@@8
.rdata$r:00001038 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001038 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00001010o
.rdata$r:00001039                 db    0
.rdata$r:0000103A                 db    0
.rdata$r:0000103B                 db    0
.rdata$r:0000103C                 db    0
.rdata$r:0000103D                 db    0
.rdata$r:0000103E                 db    0
.rdata$r:0000103F                 db    0
.rdata$r:00001040                 db    2
.rdata$r:00001041                 db    0
.rdata$r:00001042                 db    0
.rdata$r:00001043                 db    0
.rdata$r:00001044                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001044 _rdata$r        ends
.rdata$r:00001044
.rdata$r:00001048 ; ===========================================================================
.rdata$r:00001048
.rdata$r:00001048 ; Segment type: Pure data
.rdata$r:00001048 ; Segment permissions: Read
.rdata$r:00001048 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001048                 assume cs:_rdata$r
.rdata$r:00001048                 ;org 1048h
.rdata$r:00001048 ; COMDAT (pick any)
.rdata$r:00001048                 public ??_R2ISequentialInStream@@8
.rdata$r:00001048 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00001048 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00001048                                         ; DATA XREF: .rdata$r:00001044o
.rdata$r:00001048                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000104C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001050                 db    0
.rdata$r:00001051                 align 4
.rdata$r:00001051 _rdata$r        ends
.rdata$r:00001051
.rdata$r:00001054 ; ===========================================================================
.rdata$r:00001054
.rdata$r:00001054 ; Segment type: Pure data
.rdata$r:00001054 ; Segment permissions: Read
.rdata$r:00001054 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001054                 assume cs:_rdata$r
.rdata$r:00001054                 ;org 1054h
.rdata$r:00001054 ; COMDAT (pick any)
.rdata$r:00001054                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001054 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001054 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001054                                         ; DATA XREF: .rdata$r:00000FF0o
.rdata$r:00001054                                         ; .rdata$r:0000104Co ...
.rdata$r:00001054                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001058                 align 10h
.rdata$r:00001060                 db 0FFh
.rdata$r:00001061                 db 0FFh
.rdata$r:00001062                 db 0FFh
.rdata$r:00001063                 db 0FFh
.rdata$r:00001064                 db    0
.rdata$r:00001065                 db    0
.rdata$r:00001066                 db    0
.rdata$r:00001067                 db    0
.rdata$r:00001068                 db  40h ; @
.rdata$r:00001069                 db    0
.rdata$r:0000106A                 db    0
.rdata$r:0000106B                 db    0
.rdata$r:0000106C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000106C _rdata$r        ends
.rdata$r:0000106C
.data:00001070 ; ===========================================================================
.data:00001070
.data:00001070 ; Segment type: Pure data
.data:00001070 ; Segment permissions: Read/Write
.data:00001070 _data           segment dword public 'DATA' use32
.data:00001070                 assume cs:_data
.data:00001070                 ;org 1070h
.data:00001070 ; COMDAT (pick any)
.data:00001070                 public ??_R0?AUIUnknown@@@8
.data:00001070 ; struct IUnknown `RTTI Type Descriptor'
.data:00001070 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00001070                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001070                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00001070                                         ; const type_info::`vftable'
.data:00001074                 align 8
.data:00001078 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00001087                 align 4
.data:00001087 _data           ends
.data:00001087
.rdata$r:00001088 ; ===========================================================================
.rdata$r:00001088
.rdata$r:00001088 ; Segment type: Pure data
.rdata$r:00001088 ; Segment permissions: Read
.rdata$r:00001088 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001088                 assume cs:_rdata$r
.rdata$r:00001088                 ;org 1088h
.rdata$r:00001088 ; COMDAT (pick any)
.rdata$r:00001088                 public ??_R3IUnknown@@8
.rdata$r:00001088 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001088 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:0000106Co
.rdata$r:00001088                                         ; .rdata$r:000010B8o ...
.rdata$r:00001089                 db    0
.rdata$r:0000108A                 db    0
.rdata$r:0000108B                 db    0
.rdata$r:0000108C                 db    0
.rdata$r:0000108D                 db    0
.rdata$r:0000108E                 db    0
.rdata$r:0000108F                 db    0
.rdata$r:00001090                 db    1
.rdata$r:00001091                 db    0
.rdata$r:00001092                 db    0
.rdata$r:00001093                 db    0
.rdata$r:00001094                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001094 _rdata$r        ends
.rdata$r:00001094
.rdata$r:00001098 ; ===========================================================================
.rdata$r:00001098
.rdata$r:00001098 ; Segment type: Pure data
.rdata$r:00001098 ; Segment permissions: Read
.rdata$r:00001098 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001098                 assume cs:_rdata$r
.rdata$r:00001098                 ;org 1098h
.rdata$r:00001098 ; COMDAT (pick any)
.rdata$r:00001098                 public ??_R2IUnknown@@8
.rdata$r:00001098 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00001098 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00001098                                         ; DATA XREF: .rdata$r:00001094o
.rdata$r:00001098                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000109C                 db    0
.rdata$r:0000109D                 align 10h
.rdata$r:0000109D _rdata$r        ends
.rdata$r:0000109D
.rdata$r:000010A0 ; ===========================================================================
.rdata$r:000010A0
.rdata$r:000010A0 ; Segment type: Pure data
.rdata$r:000010A0 ; Segment permissions: Read
.rdata$r:000010A0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010A0                 assume cs:_rdata$r
.rdata$r:000010A0                 ;org 10A0h
.rdata$r:000010A0 ; COMDAT (pick any)
.rdata$r:000010A0                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000010A0 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000010A0 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000010A0                                         ; DATA XREF: .rdata$r:00000EECo
.rdata$r:000010A0                                         ; .rdata$r:00000F80o
.rdata$r:000010A0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000010A4                 db    0
.rdata$r:000010A5                 db    0
.rdata$r:000010A6                 db    0
.rdata$r:000010A7                 db    0
.rdata$r:000010A8                 db    0
.rdata$r:000010A9                 db    0
.rdata$r:000010AA                 db    0
.rdata$r:000010AB                 db    0
.rdata$r:000010AC                 db 0FFh
.rdata$r:000010AD                 db 0FFh
.rdata$r:000010AE                 db 0FFh
.rdata$r:000010AF                 db 0FFh
.rdata$r:000010B0                 db    0
.rdata$r:000010B1                 db    0
.rdata$r:000010B2                 db    0
.rdata$r:000010B3                 db    0
.rdata$r:000010B4                 db  42h ; B
.rdata$r:000010B5                 db    0
.rdata$r:000010B6                 db    0
.rdata$r:000010B7                 db    0
.rdata$r:000010B8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010B8 _rdata$r        ends
.rdata$r:000010B8
.rdata$r:000010BC ; ===========================================================================
.rdata$r:000010BC
.rdata$r:000010BC ; Segment type: Pure data
.rdata$r:000010BC ; Segment permissions: Read
.rdata$r:000010BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010BC                 assume cs:_rdata$r
.rdata$r:000010BC                 ;org 10BCh
.rdata$r:000010BC ; COMDAT (pick any)
.rdata$r:000010BC                 public ??_R13?0A@EA@IStreamGetSize@@8
.rdata$r:000010BC ; IStreamGetSize::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000010BC ??_R13?0A@EA@IStreamGetSize@@8 dd offset ??_R0?AUIStreamGetSize@@@8
.rdata$r:000010BC                                         ; DATA XREF: .rdata$r:00000EF0o
.rdata$r:000010BC                                         ; .rdata$r:00000F84o
.rdata$r:000010BC                                         ; IStreamGetSize `RTTI Type Descriptor'
.rdata$r:000010C0                 db    1
.rdata$r:000010C1                 db    0
.rdata$r:000010C2                 db    0
.rdata$r:000010C3                 db    0
.rdata$r:000010C4                 db    4
.rdata$r:000010C5                 db    0
.rdata$r:000010C6                 db    0
.rdata$r:000010C7                 db    0
.rdata$r:000010C8                 db 0FFh
.rdata$r:000010C9                 db 0FFh
.rdata$r:000010CA                 db 0FFh
.rdata$r:000010CB                 db 0FFh
.rdata$r:000010CC                 db    0
.rdata$r:000010CD                 db    0
.rdata$r:000010CE                 db    0
.rdata$r:000010CF                 db    0
.rdata$r:000010D0                 db  40h ; @
.rdata$r:000010D1                 db    0
.rdata$r:000010D2                 db    0
.rdata$r:000010D3                 db    0
.rdata$r:000010D4                 dd offset ??_R3IStreamGetSize@@8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010D4 _rdata$r        ends
.rdata$r:000010D4
.data:000010D8 ; ===========================================================================
.data:000010D8
.data:000010D8 ; Segment type: Pure data
.data:000010D8 ; Segment permissions: Read/Write
.data:000010D8 _data           segment dword public 'DATA' use32
.data:000010D8                 assume cs:_data
.data:000010D8                 ;org 10D8h
.data:000010D8 ; COMDAT (pick any)
.data:000010D8                 public ??_R0?AUIStreamGetSize@@@8
.data:000010D8 ; struct IStreamGetSize `RTTI Type Descriptor'
.data:000010D8 ??_R0?AUIStreamGetSize@@@8 dd offset ??_7type_info@@6B@
.data:000010D8                                         ; DATA XREF: .rdata$r:IStreamGetSize::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000010D8                                         ; .rdata$r:IStreamGetSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000010D8                                         ; const type_info::`vftable'
.data:000010DC                 align 10h
.data:000010E0 a_?auistreamget db '.?AUIStreamGetSize@@',0
.data:000010F5                 align 4
.data:000010F5 _data           ends
.data:000010F5
.rdata$r:000010F8 ; ===========================================================================
.rdata$r:000010F8
.rdata$r:000010F8 ; Segment type: Pure data
.rdata$r:000010F8 ; Segment permissions: Read
.rdata$r:000010F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000010F8                 assume cs:_rdata$r
.rdata$r:000010F8                 ;org 10F8h
.rdata$r:000010F8 ; COMDAT (pick any)
.rdata$r:000010F8                 public ??_R3IStreamGetSize@@8
.rdata$r:000010F8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000010F8 ??_R3IStreamGetSize@@8 db    0          ; DATA XREF: .rdata$r:000010D4o
.rdata$r:000010F8                                         ; .rdata$r:0000112Co
.rdata$r:000010F9                 db    0
.rdata$r:000010FA                 db    0
.rdata$r:000010FB                 db    0
.rdata$r:000010FC                 db    0
.rdata$r:000010FD                 db    0
.rdata$r:000010FE                 db    0
.rdata$r:000010FF                 db    0
.rdata$r:00001100                 db    2
.rdata$r:00001101                 db    0
.rdata$r:00001102                 db    0
.rdata$r:00001103                 db    0
.rdata$r:00001104                 dd offset ??_R2IStreamGetSize@@8 ; IStreamGetSize::`RTTI Base Class Array'
.rdata$r:00001104 _rdata$r        ends
.rdata$r:00001104
.rdata$r:00001108 ; ===========================================================================
.rdata$r:00001108
.rdata$r:00001108 ; Segment type: Pure data
.rdata$r:00001108 ; Segment permissions: Read
.rdata$r:00001108 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001108                 assume cs:_rdata$r
.rdata$r:00001108                 ;org 1108h
.rdata$r:00001108 ; COMDAT (pick any)
.rdata$r:00001108                 public ??_R2IStreamGetSize@@8
.rdata$r:00001108 ; IStreamGetSize::`RTTI Base Class Array'
.rdata$r:00001108 ??_R2IStreamGetSize@@8 dd offset ??_R1A@?0A@EA@IStreamGetSize@@8
.rdata$r:00001108                                         ; DATA XREF: .rdata$r:00001104o
.rdata$r:00001108                                         ; IStreamGetSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000110C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001110                 db    0
.rdata$r:00001111                 align 4
.rdata$r:00001111 _rdata$r        ends
.rdata$r:00001111
.rdata$r:00001114 ; ===========================================================================
.rdata$r:00001114
.rdata$r:00001114 ; Segment type: Pure data
.rdata$r:00001114 ; Segment permissions: Read
.rdata$r:00001114 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001114                 assume cs:_rdata$r
.rdata$r:00001114                 ;org 1114h
.rdata$r:00001114 ; COMDAT (pick any)
.rdata$r:00001114                 public ??_R1A@?0A@EA@IStreamGetSize@@8
.rdata$r:00001114 ; IStreamGetSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001114 ??_R1A@?0A@EA@IStreamGetSize@@8 dd offset ??_R0?AUIStreamGetSize@@@8
.rdata$r:00001114                                         ; DATA XREF: .rdata$r:IStreamGetSize::`RTTI Base Class Array'o
.rdata$r:00001114                                         ; IStreamGetSize `RTTI Type Descriptor'
.rdata$r:00001118                 db    1
.rdata$r:00001119                 db    0
.rdata$r:0000111A                 db    0
.rdata$r:0000111B                 db    0
.rdata$r:0000111C                 db    0
.rdata$r:0000111D                 db    0
.rdata$r:0000111E                 db    0
.rdata$r:0000111F                 db    0
.rdata$r:00001120                 db 0FFh
.rdata$r:00001121                 db 0FFh
.rdata$r:00001122                 db 0FFh
.rdata$r:00001123                 db 0FFh
.rdata$r:00001124                 db    0
.rdata$r:00001125                 db    0
.rdata$r:00001126                 db    0
.rdata$r:00001127                 db    0
.rdata$r:00001128                 db  40h ; @
.rdata$r:00001129                 db    0
.rdata$r:0000112A                 db    0
.rdata$r:0000112B                 db    0
.rdata$r:0000112C                 dd offset ??_R3IStreamGetSize@@8 ; IStreamGetSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000112C _rdata$r        ends
.rdata$r:0000112C
.rdata$r:00001130 ; ===========================================================================
.rdata$r:00001130
.rdata$r:00001130 ; Segment type: Pure data
.rdata$r:00001130 ; Segment permissions: Read
.rdata$r:00001130 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001130                 assume cs:_rdata$r
.rdata$r:00001130                 ;org 1130h
.rdata$r:00001130 ; COMDAT (pick any)
.rdata$r:00001130                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00001130 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00001130 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001130                                         ; DATA XREF: .rdata$r:00000EF4o
.rdata$r:00001130                                         ; .rdata$r:00000F88o
.rdata$r:00001130                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001134                 align 8
.rdata$r:00001138                 db    4
.rdata$r:00001139                 db    0
.rdata$r:0000113A                 db    0
.rdata$r:0000113B                 db    0
.rdata$r:0000113C                 db 0FFh
.rdata$r:0000113D                 db 0FFh
.rdata$r:0000113E                 db 0FFh
.rdata$r:0000113F                 db 0FFh
.rdata$r:00001140                 db    0
.rdata$r:00001141                 db    0
.rdata$r:00001142                 db    0
.rdata$r:00001143                 db    0
.rdata$r:00001144                 db  42h ; B
.rdata$r:00001145                 db    0
.rdata$r:00001146                 db    0
.rdata$r:00001147                 db    0
.rdata$r:00001148                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001148 _rdata$r        ends
.rdata$r:00001148
.rdata$r:0000114C ; ===========================================================================
.rdata$r:0000114C
.rdata$r:0000114C ; Segment type: Pure data
.rdata$r:0000114C ; Segment permissions: Read
.rdata$r:0000114C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000114C                 assume cs:_rdata$r
.rdata$r:0000114C                 ;org 114Ch
.rdata$r:0000114C ; COMDAT (pick any)
.rdata$r:0000114C                 public ??_R17?0A@EA@IStreamGetProps@@8
.rdata$r:0000114C ; IStreamGetProps::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:0000114C ??_R17?0A@EA@IStreamGetProps@@8 dd offset ??_R0?AUIStreamGetProps@@@8
.rdata$r:0000114C                                         ; DATA XREF: .rdata$r:00000EF8o
.rdata$r:0000114C                                         ; .rdata$r:00000F8Co
.rdata$r:0000114C                                         ; IStreamGetProps `RTTI Type Descriptor'
.rdata$r:00001150                 db    1
.rdata$r:00001151                 db    0
.rdata$r:00001152                 db    0
.rdata$r:00001153                 db    0
.rdata$r:00001154                 db    8
.rdata$r:00001155                 db    0
.rdata$r:00001156                 db    0
.rdata$r:00001157                 db    0
.rdata$r:00001158                 db 0FFh
.rdata$r:00001159                 db 0FFh
.rdata$r:0000115A                 db 0FFh
.rdata$r:0000115B                 db 0FFh
.rdata$r:0000115C                 db    0
.rdata$r:0000115D                 db    0
.rdata$r:0000115E                 db    0
.rdata$r:0000115F                 db    0
.rdata$r:00001160                 db  40h ; @
.rdata$r:00001161                 db    0
.rdata$r:00001162                 db    0
.rdata$r:00001163                 db    0
.rdata$r:00001164                 dd offset ??_R3IStreamGetProps@@8 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001164 _rdata$r        ends
.rdata$r:00001164
.data:00001168 ; ===========================================================================
.data:00001168
.data:00001168 ; Segment type: Pure data
.data:00001168 ; Segment permissions: Read/Write
.data:00001168 _data           segment dword public 'DATA' use32
.data:00001168                 assume cs:_data
.data:00001168                 ;org 1168h
.data:00001168 ; COMDAT (pick any)
.data:00001168                 public ??_R0?AUIStreamGetProps@@@8
.data:00001168 ; struct IStreamGetProps `RTTI Type Descriptor'
.data:00001168 ??_R0?AUIStreamGetProps@@@8 dd offset ??_7type_info@@6B@
.data:00001168                                         ; DATA XREF: .rdata$r:IStreamGetProps::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00001168                                         ; .rdata$r:IStreamGetProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001168                                         ; const type_info::`vftable'
.data:0000116C                 align 10h
.data:00001170 a_?auistreamg_0 db '.?AUIStreamGetProps@@',0
.data:00001186                 align 4
.data:00001186 _data           ends
.data:00001186
.rdata$r:00001188 ; ===========================================================================
.rdata$r:00001188
.rdata$r:00001188 ; Segment type: Pure data
.rdata$r:00001188 ; Segment permissions: Read
.rdata$r:00001188 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001188                 assume cs:_rdata$r
.rdata$r:00001188                 ;org 1188h
.rdata$r:00001188 ; COMDAT (pick any)
.rdata$r:00001188                 public ??_R3IStreamGetProps@@8
.rdata$r:00001188 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001188 ??_R3IStreamGetProps@@8 db    0         ; DATA XREF: .rdata$r:00001164o
.rdata$r:00001188                                         ; .rdata$r:000011BCo
.rdata$r:00001189                 db    0
.rdata$r:0000118A                 db    0
.rdata$r:0000118B                 db    0
.rdata$r:0000118C                 db    0
.rdata$r:0000118D                 db    0
.rdata$r:0000118E                 db    0
.rdata$r:0000118F                 db    0
.rdata$r:00001190                 db    2
.rdata$r:00001191                 db    0
.rdata$r:00001192                 db    0
.rdata$r:00001193                 db    0
.rdata$r:00001194                 dd offset ??_R2IStreamGetProps@@8 ; IStreamGetProps::`RTTI Base Class Array'
.rdata$r:00001194 _rdata$r        ends
.rdata$r:00001194
.rdata$r:00001198 ; ===========================================================================
.rdata$r:00001198
.rdata$r:00001198 ; Segment type: Pure data
.rdata$r:00001198 ; Segment permissions: Read
.rdata$r:00001198 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001198                 assume cs:_rdata$r
.rdata$r:00001198                 ;org 1198h
.rdata$r:00001198 ; COMDAT (pick any)
.rdata$r:00001198                 public ??_R2IStreamGetProps@@8
.rdata$r:00001198 ; IStreamGetProps::`RTTI Base Class Array'
.rdata$r:00001198 ??_R2IStreamGetProps@@8 dd offset ??_R1A@?0A@EA@IStreamGetProps@@8
.rdata$r:00001198                                         ; DATA XREF: .rdata$r:00001194o
.rdata$r:00001198                                         ; IStreamGetProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000119C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000011A0                 db    0
.rdata$r:000011A1                 align 4
.rdata$r:000011A1 _rdata$r        ends
.rdata$r:000011A1
.rdata$r:000011A4 ; ===========================================================================
.rdata$r:000011A4
.rdata$r:000011A4 ; Segment type: Pure data
.rdata$r:000011A4 ; Segment permissions: Read
.rdata$r:000011A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011A4                 assume cs:_rdata$r
.rdata$r:000011A4                 ;org 11A4h
.rdata$r:000011A4 ; COMDAT (pick any)
.rdata$r:000011A4                 public ??_R1A@?0A@EA@IStreamGetProps@@8
.rdata$r:000011A4 ; IStreamGetProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000011A4 ??_R1A@?0A@EA@IStreamGetProps@@8 dd offset ??_R0?AUIStreamGetProps@@@8
.rdata$r:000011A4                                         ; DATA XREF: .rdata$r:IStreamGetProps::`RTTI Base Class Array'o
.rdata$r:000011A4                                         ; IStreamGetProps `RTTI Type Descriptor'
.rdata$r:000011A8                 db    1
.rdata$r:000011A9                 db    0
.rdata$r:000011AA                 db    0
.rdata$r:000011AB                 db    0
.rdata$r:000011AC                 db    0
.rdata$r:000011AD                 db    0
.rdata$r:000011AE                 db    0
.rdata$r:000011AF                 db    0
.rdata$r:000011B0                 db 0FFh
.rdata$r:000011B1                 db 0FFh
.rdata$r:000011B2                 db 0FFh
.rdata$r:000011B3                 db 0FFh
.rdata$r:000011B4                 db    0
.rdata$r:000011B5                 db    0
.rdata$r:000011B6                 db    0
.rdata$r:000011B7                 db    0
.rdata$r:000011B8                 db  40h ; @
.rdata$r:000011B9                 db    0
.rdata$r:000011BA                 db    0
.rdata$r:000011BB                 db    0
.rdata$r:000011BC                 dd offset ??_R3IStreamGetProps@@8 ; IStreamGetProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011BC _rdata$r        ends
.rdata$r:000011BC
.rdata$r:000011C0 ; ===========================================================================
.rdata$r:000011C0
.rdata$r:000011C0 ; Segment type: Pure data
.rdata$r:000011C0 ; Segment permissions: Read
.rdata$r:000011C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011C0                 assume cs:_rdata$r
.rdata$r:000011C0                 ;org 11C0h
.rdata$r:000011C0 ; COMDAT (pick any)
.rdata$r:000011C0                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:000011C0 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:000011C0 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000011C0                                         ; DATA XREF: .rdata$r:00000EFCo
.rdata$r:000011C0                                         ; .rdata$r:00000F90o
.rdata$r:000011C0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000011C4                 align 8
.rdata$r:000011C8                 db    8
.rdata$r:000011C9                 db    0
.rdata$r:000011CA                 db    0
.rdata$r:000011CB                 db    0
.rdata$r:000011CC                 db 0FFh
.rdata$r:000011CD                 db 0FFh
.rdata$r:000011CE                 db 0FFh
.rdata$r:000011CF                 db 0FFh
.rdata$r:000011D0                 db    0
.rdata$r:000011D1                 db    0
.rdata$r:000011D2                 db    0
.rdata$r:000011D3                 db    0
.rdata$r:000011D4                 db  42h ; B
.rdata$r:000011D5                 db    0
.rdata$r:000011D6                 db    0
.rdata$r:000011D7                 db    0
.rdata$r:000011D8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011D8 _rdata$r        ends
.rdata$r:000011D8
.rdata$r:000011DC ; ===========================================================================
.rdata$r:000011DC
.rdata$r:000011DC ; Segment type: Pure data
.rdata$r:000011DC ; Segment permissions: Read
.rdata$r:000011DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000011DC                 assume cs:_rdata$r
.rdata$r:000011DC                 ;org 11DCh
.rdata$r:000011DC ; COMDAT (pick any)
.rdata$r:000011DC                 public ??_R1M@?0A@EA@IStreamGetProps2@@8
.rdata$r:000011DC ; IStreamGetProps2::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:000011DC ??_R1M@?0A@EA@IStreamGetProps2@@8 dd offset ??_R0?AUIStreamGetProps2@@@8
.rdata$r:000011DC                                         ; DATA XREF: .rdata$r:00000F00o
.rdata$r:000011DC                                         ; .rdata$r:00000F94o
.rdata$r:000011DC                                         ; IStreamGetProps2 `RTTI Type Descriptor'
.rdata$r:000011E0                 db    1
.rdata$r:000011E1                 db    0
.rdata$r:000011E2                 db    0
.rdata$r:000011E3                 db    0
.rdata$r:000011E4                 db  0Ch
.rdata$r:000011E5                 db    0
.rdata$r:000011E6                 db    0
.rdata$r:000011E7                 db    0
.rdata$r:000011E8                 db 0FFh
.rdata$r:000011E9                 db 0FFh
.rdata$r:000011EA                 db 0FFh
.rdata$r:000011EB                 db 0FFh
.rdata$r:000011EC                 db    0
.rdata$r:000011ED                 db    0
.rdata$r:000011EE                 db    0
.rdata$r:000011EF                 db    0
.rdata$r:000011F0                 db  40h ; @
.rdata$r:000011F1                 db    0
.rdata$r:000011F2                 db    0
.rdata$r:000011F3                 db    0
.rdata$r:000011F4                 dd offset ??_R3IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:000011F4 _rdata$r        ends
.rdata$r:000011F4
.data:000011F8 ; ===========================================================================
.data:000011F8
.data:000011F8 ; Segment type: Pure data
.data:000011F8 ; Segment permissions: Read/Write
.data:000011F8 _data           segment dword public 'DATA' use32
.data:000011F8                 assume cs:_data
.data:000011F8                 ;org 11F8h
.data:000011F8 ; COMDAT (pick any)
.data:000011F8                 public ??_R0?AUIStreamGetProps2@@@8
.data:000011F8 ; struct IStreamGetProps2 `RTTI Type Descriptor'
.data:000011F8 ??_R0?AUIStreamGetProps2@@@8 dd offset ??_7type_info@@6B@
.data:000011F8                                         ; DATA XREF: .rdata$r:IStreamGetProps2::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000011F8                                         ; .rdata$r:IStreamGetProps2::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000011F8                                         ; const type_info::`vftable'
.data:000011FC                 align 10h
.data:00001200 a_?auistreamg_1 db '.?AUIStreamGetProps2@@',0
.data:00001217                 align 4
.data:00001217 _data           ends
.data:00001217
.rdata$r:00001218 ; ===========================================================================
.rdata$r:00001218
.rdata$r:00001218 ; Segment type: Pure data
.rdata$r:00001218 ; Segment permissions: Read
.rdata$r:00001218 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001218                 assume cs:_rdata$r
.rdata$r:00001218                 ;org 1218h
.rdata$r:00001218 ; COMDAT (pick any)
.rdata$r:00001218                 public ??_R3IStreamGetProps2@@8
.rdata$r:00001218 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001218 ??_R3IStreamGetProps2@@8 db    0        ; DATA XREF: .rdata$r:000011F4o
.rdata$r:00001218                                         ; .rdata$r:0000124Co
.rdata$r:00001219                 db    0
.rdata$r:0000121A                 db    0
.rdata$r:0000121B                 db    0
.rdata$r:0000121C                 db    0
.rdata$r:0000121D                 db    0
.rdata$r:0000121E                 db    0
.rdata$r:0000121F                 db    0
.rdata$r:00001220                 db    2
.rdata$r:00001221                 db    0
.rdata$r:00001222                 db    0
.rdata$r:00001223                 db    0
.rdata$r:00001224                 dd offset ??_R2IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Base Class Array'
.rdata$r:00001224 _rdata$r        ends
.rdata$r:00001224
.rdata$r:00001228 ; ===========================================================================
.rdata$r:00001228
.rdata$r:00001228 ; Segment type: Pure data
.rdata$r:00001228 ; Segment permissions: Read
.rdata$r:00001228 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001228                 assume cs:_rdata$r
.rdata$r:00001228                 ;org 1228h
.rdata$r:00001228 ; COMDAT (pick any)
.rdata$r:00001228                 public ??_R2IStreamGetProps2@@8
.rdata$r:00001228 ; IStreamGetProps2::`RTTI Base Class Array'
.rdata$r:00001228 ??_R2IStreamGetProps2@@8 dd offset ??_R1A@?0A@EA@IStreamGetProps2@@8
.rdata$r:00001228                                         ; DATA XREF: .rdata$r:00001224o
.rdata$r:00001228                                         ; IStreamGetProps2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000122C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00001230                 db    0
.rdata$r:00001231                 align 4
.rdata$r:00001231 _rdata$r        ends
.rdata$r:00001231
.rdata$r:00001234 ; ===========================================================================
.rdata$r:00001234
.rdata$r:00001234 ; Segment type: Pure data
.rdata$r:00001234 ; Segment permissions: Read
.rdata$r:00001234 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001234                 assume cs:_rdata$r
.rdata$r:00001234                 ;org 1234h
.rdata$r:00001234 ; COMDAT (pick any)
.rdata$r:00001234                 public ??_R1A@?0A@EA@IStreamGetProps2@@8
.rdata$r:00001234 ; IStreamGetProps2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00001234 ??_R1A@?0A@EA@IStreamGetProps2@@8 dd offset ??_R0?AUIStreamGetProps2@@@8
.rdata$r:00001234                                         ; DATA XREF: .rdata$r:IStreamGetProps2::`RTTI Base Class Array'o
.rdata$r:00001234                                         ; IStreamGetProps2 `RTTI Type Descriptor'
.rdata$r:00001238                 db    1
.rdata$r:00001239                 db    0
.rdata$r:0000123A                 db    0
.rdata$r:0000123B                 db    0
.rdata$r:0000123C                 db    0
.rdata$r:0000123D                 db    0
.rdata$r:0000123E                 db    0
.rdata$r:0000123F                 db    0
.rdata$r:00001240                 db 0FFh
.rdata$r:00001241                 db 0FFh
.rdata$r:00001242                 db 0FFh
.rdata$r:00001243                 db 0FFh
.rdata$r:00001244                 db    0
.rdata$r:00001245                 db    0
.rdata$r:00001246                 db    0
.rdata$r:00001247                 db    0
.rdata$r:00001248                 db  40h ; @
.rdata$r:00001249                 db    0
.rdata$r:0000124A                 db    0
.rdata$r:0000124B                 db    0
.rdata$r:0000124C                 dd offset ??_R3IStreamGetProps2@@8 ; IStreamGetProps2::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000124C _rdata$r        ends
.rdata$r:0000124C
.rdata$r:00001250 ; ===========================================================================
.rdata$r:00001250
.rdata$r:00001250 ; Segment type: Pure data
.rdata$r:00001250 ; Segment permissions: Read
.rdata$r:00001250 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001250                 assume cs:_rdata$r
.rdata$r:00001250                 ;org 1250h
.rdata$r:00001250 ; COMDAT (pick any)
.rdata$r:00001250                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00001250 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00001250 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00001250                                         ; DATA XREF: .rdata$r:00000F04o
.rdata$r:00001250                                         ; .rdata$r:00000F98o
.rdata$r:00001250                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00001254                 align 8
.rdata$r:00001258                 db  0Ch
.rdata$r:00001259                 db    0
.rdata$r:0000125A                 db    0
.rdata$r:0000125B                 db    0
.rdata$r:0000125C                 db 0FFh
.rdata$r:0000125D                 db 0FFh
.rdata$r:0000125E                 db 0FFh
.rdata$r:0000125F                 db 0FFh
.rdata$r:00001260                 db    0
.rdata$r:00001261                 db    0
.rdata$r:00001262                 db    0
.rdata$r:00001263                 db    0
.rdata$r:00001264                 db  42h ; B
.rdata$r:00001265                 db    0
.rdata$r:00001266                 db    0
.rdata$r:00001267                 db    0
.rdata$r:00001268                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001268 _rdata$r        ends
.rdata$r:00001268
.rdata$r:0000126C ; ===========================================================================
.rdata$r:0000126C
.rdata$r:0000126C ; Segment type: Pure data
.rdata$r:0000126C ; Segment permissions: Read
.rdata$r:0000126C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000126C                 assume cs:_rdata$r
.rdata$r:0000126C                 ;org 126Ch
.rdata$r:0000126C ; COMDAT (pick any)
.rdata$r:0000126C                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000126C ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:0000126C ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000126C                                         ; DATA XREF: .rdata$r:00000F08o
.rdata$r:0000126C                                         ; .rdata$r:00000F9Co
.rdata$r:0000126C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00001270                 db    0
.rdata$r:00001271                 db    0
.rdata$r:00001272                 db    0
.rdata$r:00001273                 db    0
.rdata$r:00001274                 db  10h
.rdata$r:00001275                 db    0
.rdata$r:00001276                 db    0
.rdata$r:00001277                 db    0
.rdata$r:00001278                 db 0FFh
.rdata$r:00001279                 db 0FFh
.rdata$r:0000127A                 db 0FFh
.rdata$r:0000127B                 db 0FFh
.rdata$r:0000127C                 db    0
.rdata$r:0000127D                 db    0
.rdata$r:0000127E                 db    0
.rdata$r:0000127F                 db    0
.rdata$r:00001280                 db  40h ; @
.rdata$r:00001281                 db    0
.rdata$r:00001282                 db    0
.rdata$r:00001283                 db    0
.rdata$r:00001284                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001284 _rdata$r        ends
.rdata$r:00001284
.data:00001288 ; ===========================================================================
.data:00001288
.data:00001288 ; Segment type: Pure data
.data:00001288 ; Segment permissions: Read/Write
.data:00001288 _data           segment dword public 'DATA' use32
.data:00001288                 assume cs:_data
.data:00001288                 ;org 1288h
.data:00001288 ; COMDAT (pick any)
.data:00001288                 public ??_R0?AVCMyUnknownImp@@@8
.data:00001288 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00001288 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00001288                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00001288                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00001288                                         ; const type_info::`vftable'
.data:0000128C                 align 10h
.data:00001290 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00001290 _data           ends
.data:00001290
.rdata$r:000012A4 ; ===========================================================================
.rdata$r:000012A4
.rdata$r:000012A4 ; Segment type: Pure data
.rdata$r:000012A4 ; Segment permissions: Read
.rdata$r:000012A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012A4                 assume cs:_rdata$r
.rdata$r:000012A4                 ;org 12A4h
.rdata$r:000012A4 ; COMDAT (pick any)
.rdata$r:000012A4                 public ??_R3CMyUnknownImp@@8
.rdata$r:000012A4 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012A4 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00001284o
.rdata$r:000012A4                                         ; .rdata$r:000012D4o
.rdata$r:000012A5                 db    0
.rdata$r:000012A6                 db    0
.rdata$r:000012A7                 db    0
.rdata$r:000012A8                 db    0
.rdata$r:000012A9                 db    0
.rdata$r:000012AA                 db    0
.rdata$r:000012AB                 db    0
.rdata$r:000012AC                 db    1
.rdata$r:000012AD                 db    0
.rdata$r:000012AE                 db    0
.rdata$r:000012AF                 db    0
.rdata$r:000012B0                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000012B0 _rdata$r        ends
.rdata$r:000012B0
.rdata$r:000012B4 ; ===========================================================================
.rdata$r:000012B4
.rdata$r:000012B4 ; Segment type: Pure data
.rdata$r:000012B4 ; Segment permissions: Read
.rdata$r:000012B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012B4                 assume cs:_rdata$r
.rdata$r:000012B4                 ;org 12B4h
.rdata$r:000012B4 ; COMDAT (pick any)
.rdata$r:000012B4                 public ??_R2CMyUnknownImp@@8
.rdata$r:000012B4 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000012B4 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000012B4                                         ; DATA XREF: .rdata$r:000012B0o
.rdata$r:000012B4                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000012B8                 db    0
.rdata$r:000012B9                 align 4
.rdata$r:000012B9 _rdata$r        ends
.rdata$r:000012B9
.rdata$r:000012BC ; ===========================================================================
.rdata$r:000012BC
.rdata$r:000012BC ; Segment type: Pure data
.rdata$r:000012BC ; Segment permissions: Read
.rdata$r:000012BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012BC                 assume cs:_rdata$r
.rdata$r:000012BC                 ;org 12BCh
.rdata$r:000012BC ; COMDAT (pick any)
.rdata$r:000012BC                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000012BC ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000012BC ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000012BC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000012BC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000012C0                 db    0
.rdata$r:000012C1                 db    0
.rdata$r:000012C2                 db    0
.rdata$r:000012C3                 db    0
.rdata$r:000012C4                 db    0
.rdata$r:000012C5                 db    0
.rdata$r:000012C6                 db    0
.rdata$r:000012C7                 db    0
.rdata$r:000012C8                 db 0FFh
.rdata$r:000012C9                 db 0FFh
.rdata$r:000012CA                 db 0FFh
.rdata$r:000012CB                 db 0FFh
.rdata$r:000012CC                 db    0
.rdata$r:000012CD                 db    0
.rdata$r:000012CE                 db    0
.rdata$r:000012CF                 db    0
.rdata$r:000012D0                 db  40h ; @
.rdata$r:000012D1                 db    0
.rdata$r:000012D2                 db    0
.rdata$r:000012D3                 db    0
.rdata$r:000012D4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012D4 _rdata$r        ends
.rdata$r:000012D4
.rdata$r:000012D8 ; ===========================================================================
.rdata$r:000012D8
.rdata$r:000012D8 ; Segment type: Pure data
.rdata$r:000012D8 ; Segment permissions: Read
.rdata$r:000012D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012D8                 assume cs:_rdata$r
.rdata$r:000012D8                 ;org 12D8h
.rdata$r:000012D8 ; COMDAT (pick any)
.rdata$r:000012D8                 public ??_R4CInFileStreamVol@@6BIStreamGetSize@@@
.rdata$r:000012D8 ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetSize'}
.rdata$r:000012D8 ??_R4CInFileStreamVol@@6BIStreamGetSize@@@ db    0
.rdata$r:000012D8                                         ; DATA XREF: .rdata:00000E3Co
.rdata$r:000012D9                 db    0
.rdata$r:000012DA                 db    0
.rdata$r:000012DB                 db    0
.rdata$r:000012DC                 db    4
.rdata$r:000012DD                 db    0
.rdata$r:000012DE                 db    0
.rdata$r:000012DF                 db    0
.rdata$r:000012E0                 db    0
.rdata$r:000012E1                 db    0
.rdata$r:000012E2                 db    0
.rdata$r:000012E3                 db    0
.rdata$r:000012E4                 dd offset ??_R0?AUCInFileStreamVol@@@8 ; CInFileStreamVol `RTTI Type Descriptor'
.rdata$r:000012E8                 dd offset ??_R3CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012E8 _rdata$r        ends
.rdata$r:000012E8
.rdata$r:000012EC ; ===========================================================================
.rdata$r:000012EC
.rdata$r:000012EC ; Segment type: Pure data
.rdata$r:000012EC ; Segment permissions: Read
.rdata$r:000012EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000012EC                 assume cs:_rdata$r
.rdata$r:000012EC                 ;org 12ECh
.rdata$r:000012EC ; COMDAT (pick any)
.rdata$r:000012EC                 public ??_R4CInFileStreamVol@@6BIStreamGetProps@@@
.rdata$r:000012EC ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetProps'}
.rdata$r:000012EC ??_R4CInFileStreamVol@@6BIStreamGetProps@@@ db    0
.rdata$r:000012EC                                         ; DATA XREF: .rdata:00000E28o
.rdata$r:000012ED                 db    0
.rdata$r:000012EE                 db    0
.rdata$r:000012EF                 db    0
.rdata$r:000012F0                 db    8
.rdata$r:000012F1                 db    0
.rdata$r:000012F2                 db    0
.rdata$r:000012F3                 db    0
.rdata$r:000012F4                 db    0
.rdata$r:000012F5                 db    0
.rdata$r:000012F6                 db    0
.rdata$r:000012F7                 db    0
.rdata$r:000012F8                 dd offset ??_R0?AUCInFileStreamVol@@@8 ; CInFileStreamVol `RTTI Type Descriptor'
.rdata$r:000012FC                 dd offset ??_R3CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:000012FC _rdata$r        ends
.rdata$r:000012FC
.rdata$r:00001300 ; ===========================================================================
.rdata$r:00001300
.rdata$r:00001300 ; Segment type: Pure data
.rdata$r:00001300 ; Segment permissions: Read
.rdata$r:00001300 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001300                 assume cs:_rdata$r
.rdata$r:00001300                 ;org 1300h
.rdata$r:00001300 ; COMDAT (pick any)
.rdata$r:00001300                 public ??_R4CInFileStreamVol@@6BIStreamGetProps2@@@
.rdata$r:00001300 ; const CInFileStreamVol::`RTTI Complete Object Locator'{for `IStreamGetProps2'}
.rdata$r:00001300 ??_R4CInFileStreamVol@@6BIStreamGetProps2@@@ db    0
.rdata$r:00001300                                         ; DATA XREF: .rdata:00000E14o
.rdata$r:00001301                 db    0
.rdata$r:00001302                 db    0
.rdata$r:00001303                 db    0
.rdata$r:00001304                 db  0Ch
.rdata$r:00001305                 db    0
.rdata$r:00001306                 db    0
.rdata$r:00001307                 db    0
.rdata$r:00001308                 db    0
.rdata$r:00001309                 db    0
.rdata$r:0000130A                 db    0
.rdata$r:0000130B                 db    0
.rdata$r:0000130C                 dd offset ??_R0?AUCInFileStreamVol@@@8 ; CInFileStreamVol `RTTI Type Descriptor'
.rdata$r:00001310                 dd offset ??_R3CInFileStreamVol@@8 ; CInFileStreamVol::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001310 _rdata$r        ends
.rdata$r:00001310
.text:00001314 ; ===========================================================================
.text:00001314
.text:00001314 ; Segment type: Pure code
.text:00001314 ; Segment permissions: Read/Execute
.text:00001314 _text           segment para public 'CODE' use32
.text:00001314                 assume cs:_text
.text:00001314                 ;org 1314h
.text:00001314 ; COMDAT (pick any)
.text:00001314                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001314
.text:00001314 ; =============== S U B R O U T I N E =======================================
.text:00001314
.text:00001314 ; Attributes: bp-based frame
.text:00001314
.text:00001314 ; __int32 __stdcall CInFileStream::QueryInterface(CInFileStream *this, const struct _GUID *Buf1, void **)
.text:00001314                 public ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z
.text:00001314 ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00001314                                         ; CODE XREF: [thunk]:CInFileStream::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00001314                                         ; [thunk]:CInFileStream::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00001314
.text:00001314 var_C           = dword ptr -0Ch
.text:00001314 var_8           = dword ptr -8
.text:00001314 var_4           = dword ptr -4
.text:00001314 this            = dword ptr  8
.text:00001314 Buf1            = dword ptr  0Ch
.text:00001314 arg_8           = dword ptr  10h
.text:00001314
.text:00001314                 push    ebp
.text:00001315                 mov     ebp, esp
.text:00001317                 sub     esp, 0Ch
.text:0000131A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00001321                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001328                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000132F                 mov     eax, [ebp+arg_8]
.text:00001332                 mov     dword ptr [eax], 0
.text:00001338                 push    offset _IID_IUnknown ; Buf2
.text:0000133D                 mov     ecx, [ebp+Buf1]
.text:00001340                 push    ecx             ; Buf1
.text:00001341                 call    ___@8           ; __(x,x)
.text:00001346                 test    eax, eax
.text:00001348                 jz      short loc_1357
.text:0000134A                 mov     edx, [ebp+arg_8]
.text:0000134D                 mov     eax, [ebp+this]
.text:00001350                 mov     [edx], eax
.text:00001352                 jmp     loc_1419
.text:00001357 ; ---------------------------------------------------------------------------
.text:00001357
.text:00001357 loc_1357:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+34j
.text:00001357                 push    offset _IID_IInStream ; Buf2
.text:0000135C                 mov     ecx, [ebp+Buf1]
.text:0000135F                 push    ecx             ; Buf1
.text:00001360                 call    ___@8           ; __(x,x)
.text:00001365                 test    eax, eax
.text:00001367                 jz      short loc_1376
.text:00001369                 mov     edx, [ebp+arg_8]
.text:0000136C                 mov     eax, [ebp+this]
.text:0000136F                 mov     [edx], eax
.text:00001371                 jmp     loc_1419
.text:00001376 ; ---------------------------------------------------------------------------
.text:00001376
.text:00001376 loc_1376:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+53j
.text:00001376                 push    offset _IID_IStreamGetSize ; Buf2
.text:0000137B                 mov     ecx, [ebp+Buf1]
.text:0000137E                 push    ecx             ; Buf1
.text:0000137F                 call    ___@8           ; __(x,x)
.text:00001384                 test    eax, eax
.text:00001386                 jz      short loc_13AA
.text:00001388                 cmp     [ebp+this], 0
.text:0000138C                 jz      short loc_1399
.text:0000138E                 mov     edx, [ebp+this]
.text:00001391                 add     edx, 4
.text:00001394                 mov     [ebp+var_4], edx
.text:00001397                 jmp     short loc_13A0
.text:00001399 ; ---------------------------------------------------------------------------
.text:00001399
.text:00001399 loc_1399:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+78j
.text:00001399                 mov     [ebp+var_4], 0
.text:000013A0
.text:000013A0 loc_13A0:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+83j
.text:000013A0                 mov     eax, [ebp+arg_8]
.text:000013A3                 mov     ecx, [ebp+var_4]
.text:000013A6                 mov     [eax], ecx
.text:000013A8                 jmp     short loc_1419
.text:000013AA ; ---------------------------------------------------------------------------
.text:000013AA
.text:000013AA loc_13AA:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+72j
.text:000013AA                 push    offset _IID_IStreamGetProps ; Buf2
.text:000013AF                 mov     edx, [ebp+Buf1]
.text:000013B2                 push    edx             ; Buf1
.text:000013B3                 call    ___@8           ; __(x,x)
.text:000013B8                 test    eax, eax
.text:000013BA                 jz      short loc_13DE
.text:000013BC                 cmp     [ebp+this], 0
.text:000013C0                 jz      short loc_13CD
.text:000013C2                 mov     eax, [ebp+this]
.text:000013C5                 add     eax, 8
.text:000013C8                 mov     [ebp+var_8], eax
.text:000013CB                 jmp     short loc_13D4
.text:000013CD ; ---------------------------------------------------------------------------
.text:000013CD
.text:000013CD loc_13CD:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+ACj
.text:000013CD                 mov     [ebp+var_8], 0
.text:000013D4
.text:000013D4 loc_13D4:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+B7j
.text:000013D4                 mov     ecx, [ebp+arg_8]
.text:000013D7                 mov     edx, [ebp+var_8]
.text:000013DA                 mov     [ecx], edx
.text:000013DC                 jmp     short loc_1419
.text:000013DE ; ---------------------------------------------------------------------------
.text:000013DE
.text:000013DE loc_13DE:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+A6j
.text:000013DE                 push    offset _IID_IStreamGetProps2 ; Buf2
.text:000013E3                 mov     eax, [ebp+Buf1]
.text:000013E6                 push    eax             ; Buf1
.text:000013E7                 call    ___@8           ; __(x,x)
.text:000013EC                 test    eax, eax
.text:000013EE                 jz      short loc_1412
.text:000013F0                 cmp     [ebp+this], 0
.text:000013F4                 jz      short loc_1401
.text:000013F6                 mov     ecx, [ebp+this]
.text:000013F9                 add     ecx, 0Ch
.text:000013FC                 mov     [ebp+var_C], ecx
.text:000013FF                 jmp     short loc_1408
.text:00001401 ; ---------------------------------------------------------------------------
.text:00001401
.text:00001401 loc_1401:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+E0j
.text:00001401                 mov     [ebp+var_C], 0
.text:00001408
.text:00001408 loc_1408:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+EBj
.text:00001408                 mov     edx, [ebp+arg_8]
.text:0000140B                 mov     eax, [ebp+var_C]
.text:0000140E                 mov     [edx], eax
.text:00001410                 jmp     short loc_1419
.text:00001412 ; ---------------------------------------------------------------------------
.text:00001412
.text:00001412 loc_1412:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+DAj
.text:00001412                 mov     eax, 80004002h
.text:00001417                 jmp     short loc_142A
.text:00001419 ; ---------------------------------------------------------------------------
.text:00001419
.text:00001419 loc_1419:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+3Ej
.text:00001419                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00001419                 mov     ecx, [ebp+this]
.text:0000141C                 mov     edx, [ecx+10h]
.text:0000141F                 add     edx, 1
.text:00001422                 mov     eax, [ebp+this]
.text:00001425                 mov     [eax+10h], edx
.text:00001428                 xor     eax, eax
.text:0000142A
.text:0000142A loc_142A:                               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+103j
.text:0000142A                 add     esp, 0Ch
.text:0000142D                 cmp     ebp, esp
.text:0000142F                 call    __RTC_CheckEsp
.text:00001434                 mov     esp, ebp
.text:00001436                 pop     ebp
.text:00001437                 retn    0Ch
.text:00001437 ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00001437
.text:00001437 ; ---------------------------------------------------------------------------
.text:0000143A                 align 4
.text:0000143A _text           ends
.text:0000143A
.text:0000143C ; ===========================================================================
.text:0000143C
.text:0000143C ; Segment type: Pure code
.text:0000143C ; Segment permissions: Read/Execute
.text:0000143C _text           segment para public 'CODE' use32
.text:0000143C                 assume cs:_text
.text:0000143C                 ;org 143Ch
.text:0000143C ; COMDAT (pick any)
.text:0000143C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000143C
.text:0000143C ; =============== S U B R O U T I N E =======================================
.text:0000143C
.text:0000143C ; Attributes: bp-based frame
.text:0000143C
.text:0000143C ; int __stdcall __(void *Buf1, void *Buf2)
.text:0000143C                 public ___@8
.text:0000143C ___@8           proc near               ; CODE XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+2Dp
.text:0000143C                                         ; CInFileStream::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:0000143C
.text:0000143C Buf1            = dword ptr  8
.text:0000143C Buf2            = dword ptr  0Ch
.text:0000143C
.text:0000143C                 push    ebp
.text:0000143D                 mov     ebp, esp
.text:0000143F                 mov     eax, [ebp+Buf2]
.text:00001442                 push    eax             ; Buf2
.text:00001443                 mov     ecx, [ebp+Buf1]
.text:00001446                 push    ecx             ; Buf1
.text:00001447                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:0000144C                 cmp     ebp, esp
.text:0000144E                 call    __RTC_CheckEsp
.text:00001453                 pop     ebp
.text:00001454                 retn    8
.text:00001454 ___@8           endp
.text:00001454
.text:00001454 ; ---------------------------------------------------------------------------
.text:00001457                 align 4
.text:00001457 _text           ends
.text:00001457
.text:00001458 ; ===========================================================================
.text:00001458
.text:00001458 ; Segment type: Pure code
.text:00001458 ; Segment permissions: Read/Execute
.text:00001458 _text           segment para public 'CODE' use32
.text:00001458                 assume cs:_text
.text:00001458                 ;org 1458h
.text:00001458 ; COMDAT (pick any)
.text:00001458                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001458
.text:00001458 ; =============== S U B R O U T I N E =======================================
.text:00001458
.text:00001458 ; Attributes: bp-based frame
.text:00001458
.text:00001458 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00001458                 public _IsEqualGUID@8
.text:00001458 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00001458
.text:00001458 Buf1            = dword ptr  8
.text:00001458 Buf2            = dword ptr  0Ch
.text:00001458
.text:00001458                 push    ebp
.text:00001459                 mov     ebp, esp
.text:0000145B                 push    10h             ; Size
.text:0000145D                 mov     eax, [ebp+Buf2]
.text:00001460                 push    eax             ; Buf2
.text:00001461                 mov     ecx, [ebp+Buf1]
.text:00001464                 push    ecx             ; Buf1
.text:00001465                 call    _memcmp
.text:0000146A                 add     esp, 0Ch
.text:0000146D                 neg     eax
.text:0000146F                 sbb     eax, eax
.text:00001471                 add     eax, 1
.text:00001474                 cmp     ebp, esp
.text:00001476                 call    __RTC_CheckEsp
.text:0000147B                 pop     ebp
.text:0000147C                 retn    8
.text:0000147C _IsEqualGUID@8  endp
.text:0000147C
.text:0000147C ; ---------------------------------------------------------------------------
.text:0000147F                 align 10h
.text:0000147F _text           ends
.text:0000147F
.text:00001480 ; ===========================================================================
.text:00001480
.text:00001480 ; Segment type: Pure code
.text:00001480 ; Segment permissions: Read/Execute
.text:00001480 _text           segment para public 'CODE' use32
.text:00001480                 assume cs:_text
.text:00001480                 ;org 1480h
.text:00001480 ; COMDAT (pick any)
.text:00001480                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001480
.text:00001480 ; =============== S U B R O U T I N E =======================================
.text:00001480
.text:00001480 ; Attributes: bp-based frame
.text:00001480
.text:00001480 ; unsigned __int32 __stdcall CInFileStream::AddRef(CInFileStream *this)
.text:00001480                 public ?AddRef@CInFileStream@@UAGKXZ
.text:00001480 ?AddRef@CInFileStream@@UAGKXZ proc near ; CODE XREF: [thunk]:CInFileStream::AddRef`adjustor{12}' (void)+5j
.text:00001480                                         ; [thunk]:CInFileStream::AddRef`adjustor{4}' (void)+5j ...
.text:00001480
.text:00001480 var_4           = dword ptr -4
.text:00001480 this            = dword ptr  8
.text:00001480
.text:00001480                 push    ebp
.text:00001481                 mov     ebp, esp
.text:00001483                 push    ecx
.text:00001484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000148B                 mov     eax, [ebp+this]
.text:0000148E                 mov     ecx, [eax+10h]
.text:00001491                 add     ecx, 1
.text:00001494                 mov     [ebp+var_4], ecx
.text:00001497                 mov     edx, [ebp+this]
.text:0000149A                 mov     eax, [ebp+var_4]
.text:0000149D                 mov     [edx+10h], eax
.text:000014A0                 mov     eax, [ebp+var_4]
.text:000014A3                 mov     esp, ebp
.text:000014A5                 pop     ebp
.text:000014A6                 retn    4
.text:000014A6 ?AddRef@CInFileStream@@UAGKXZ endp
.text:000014A6
.text:000014A6 ; ---------------------------------------------------------------------------
.text:000014A9                 align 4
.text:000014A9 _text           ends
.text:000014A9
.text:000014AC ; ===========================================================================
.text:000014AC
.text:000014AC ; Segment type: Pure code
.text:000014AC ; Segment permissions: Read/Execute
.text:000014AC _text           segment para public 'CODE' use32
.text:000014AC                 assume cs:_text
.text:000014AC                 ;org 14ACh
.text:000014AC ; COMDAT (pick any)
.text:000014AC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000014AC
.text:000014AC ; =============== S U B R O U T I N E =======================================
.text:000014AC
.text:000014AC ; Attributes: bp-based frame
.text:000014AC
.text:000014AC ; unsigned __int32 __stdcall CInFileStream::Release(CInFileStream *this)
.text:000014AC                 public ?Release@CInFileStream@@UAGKXZ
.text:000014AC ?Release@CInFileStream@@UAGKXZ proc near
.text:000014AC                                         ; CODE XREF: [thunk]:CInFileStream::Release`adjustor{4}' (void)+5j
.text:000014AC                                         ; [thunk]:CInFileStream::Release`adjustor{8}' (void)+5j ...
.text:000014AC
.text:000014AC var_10          = dword ptr -10h
.text:000014AC var_C           = dword ptr -0Ch
.text:000014AC var_8           = dword ptr -8
.text:000014AC var_4           = dword ptr -4
.text:000014AC this            = dword ptr  8
.text:000014AC
.text:000014AC                 push    ebp
.text:000014AD                 mov     ebp, esp
.text:000014AF                 sub     esp, 10h
.text:000014B2                 push    esi
.text:000014B3                 mov     eax, 0CCCCCCCCh
.text:000014B8                 mov     [ebp+var_10], eax
.text:000014BB                 mov     [ebp+var_C], eax
.text:000014BE                 mov     [ebp+var_8], eax
.text:000014C1                 mov     [ebp+var_4], eax
.text:000014C4                 mov     eax, [ebp+this]
.text:000014C7                 mov     ecx, [eax+10h]
.text:000014CA                 sub     ecx, 1
.text:000014CD                 mov     [ebp+var_C], ecx
.text:000014D0                 mov     edx, [ebp+this]
.text:000014D3                 mov     eax, [ebp+var_C]
.text:000014D6                 mov     [edx+10h], eax
.text:000014D9                 cmp     [ebp+var_C], 0
.text:000014DD                 jz      short loc_14E7
.text:000014DF                 mov     ecx, [ebp+this]
.text:000014E2                 mov     eax, [ecx+10h]
.text:000014E5                 jmp     short loc_151F
.text:000014E7 ; ---------------------------------------------------------------------------
.text:000014E7
.text:000014E7 loc_14E7:                               ; CODE XREF: CInFileStream::Release(void)+31j
.text:000014E7                 mov     edx, [ebp+this]
.text:000014EA                 mov     [ebp+var_8], edx
.text:000014ED                 mov     eax, [ebp+var_8]
.text:000014F0                 mov     [ebp+var_4], eax
.text:000014F3                 cmp     [ebp+var_4], 0
.text:000014F7                 jz      short loc_1516
.text:000014F9                 mov     esi, esp
.text:000014FB                 push    1
.text:000014FD                 mov     ecx, [ebp+var_4]
.text:00001500                 mov     edx, [ecx]
.text:00001502                 mov     ecx, [ebp+var_4]
.text:00001505                 mov     eax, [edx+14h]
.text:00001508                 call    eax
.text:0000150A                 cmp     esi, esp
.text:0000150C                 call    __RTC_CheckEsp
.text:00001511                 mov     [ebp+var_10], eax
.text:00001514                 jmp     short loc_151D
.text:00001516 ; ---------------------------------------------------------------------------
.text:00001516
.text:00001516 loc_1516:                               ; CODE XREF: CInFileStream::Release(void)+4Bj
.text:00001516                 mov     [ebp+var_10], 0
.text:0000151D
.text:0000151D loc_151D:                               ; CODE XREF: CInFileStream::Release(void)+68j
.text:0000151D                 xor     eax, eax
.text:0000151F
.text:0000151F loc_151F:                               ; CODE XREF: CInFileStream::Release(void)+39j
.text:0000151F                 pop     esi
.text:00001520                 add     esp, 10h
.text:00001523                 cmp     ebp, esp
.text:00001525                 call    __RTC_CheckEsp
.text:0000152A                 mov     esp, ebp
.text:0000152C                 pop     ebp
.text:0000152D                 retn    4
.text:0000152D ?Release@CInFileStream@@UAGKXZ endp
.text:0000152D
.text:0000152D _text           ends
.text:0000152D
.text:00001530 ; ===========================================================================
.text:00001530
.text:00001530 ; Segment type: Pure code
.text:00001530 ; Segment permissions: Read/Execute
.text:00001530 _text           segment para public 'CODE' use32
.text:00001530                 assume cs:_text
.text:00001530                 ;org 1530h
.text:00001530 ; COMDAT (pick any)
.text:00001530                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001530
.text:00001530 ; =============== S U B R O U T I N E =======================================
.text:00001530
.text:00001530 ; Attributes: bp-based frame
.text:00001530
.text:00001530 ; public: virtual void * __thiscall CInFileStreamVol::`scalar deleting destructor'(unsigned int)
.text:00001530                 public ??_GCInFileStreamVol@@UAEPAXI@Z
.text:00001530 ??_GCInFileStreamVol@@UAEPAXI@Z proc near
.text:00001530
.text:00001530 var_4           = dword ptr -4
.text:00001530 arg_0           = dword ptr  8
.text:00001530
.text:00001530                 push    ebp
.text:00001531                 mov     ebp, esp
.text:00001533                 push    ecx
.text:00001534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000153B                 mov     [ebp+var_4], ecx
.text:0000153E                 mov     ecx, [ebp+var_4] ; this
.text:00001541                 call    ??1CInFileStreamVol@@UAE@XZ ; CInFileStreamVol::~CInFileStreamVol(void)
.text:00001546                 mov     eax, [ebp+arg_0]
.text:00001549                 and     eax, 1
.text:0000154C                 jz      short loc_155A
.text:0000154E                 mov     ecx, [ebp+var_4]
.text:00001551                 push    ecx             ; void *
.text:00001552                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001557                 add     esp, 4
.text:0000155A
.text:0000155A loc_155A:                               ; CODE XREF: CInFileStreamVol::`scalar deleting destructor'(uint)+1Cj
.text:0000155A                 mov     eax, [ebp+var_4]
.text:0000155D                 add     esp, 4
.text:00001560                 cmp     ebp, esp
.text:00001562                 call    __RTC_CheckEsp
.text:00001567                 mov     esp, ebp
.text:00001569                 pop     ebp
.text:0000156A                 retn    4
.text:0000156A ??_GCInFileStreamVol@@UAEPAXI@Z endp
.text:0000156A
.text:0000156A ; ---------------------------------------------------------------------------
.text:0000156D                 align 10h
.text:0000156D _text           ends
.text:0000156D
.text:00001570 ; ===========================================================================
.text:00001570
.text:00001570 ; Segment type: Pure code
.text:00001570 ; Segment permissions: Read/Execute
.text:00001570 _text           segment para public 'CODE' use32
.text:00001570                 assume cs:_text
.text:00001570                 ;org 1570h
.text:00001570 ; COMDAT (pick any)
.text:00001570                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001570
.text:00001570 ; =============== S U B R O U T I N E =======================================
.text:00001570
.text:00001570 ; Attributes: bp-based frame
.text:00001570
.text:00001570 ; _DWORD __thiscall CInFileStreamVol::~CInFileStreamVol(CInFileStreamVol *__hidden this)
.text:00001570                 public ??1CInFileStreamVol@@UAE@XZ
.text:00001570 ??1CInFileStreamVol@@UAE@XZ proc near   ; CODE XREF: CInFileStreamVol::`scalar deleting destructor'(uint)+11p
.text:00001570
.text:00001570 var_10          = dword ptr -10h
.text:00001570 var_C           = dword ptr -0Ch
.text:00001570 var_4           = dword ptr -4
.text:00001570
.text:00001570                 push    ebp
.text:00001571                 mov     ebp, esp
.text:00001573                 push    0FFFFFFFFh
.text:00001575                 push    offset __ehhandler$??1CInFileStreamVol@@UAE@XZ
.text:0000157A                 mov     eax, large fs:0
.text:00001580                 push    eax
.text:00001581                 push    ecx
.text:00001582                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00001589                 mov     eax, dword ptr ds:___security_cookie
.text:0000158E                 xor     eax, ebp
.text:00001590                 push    eax
.text:00001591                 lea     eax, [ebp+var_C]
.text:00001594                 mov     large fs:0, eax
.text:0000159A                 mov     [ebp+var_10], ecx
.text:0000159D                 mov     eax, [ebp+var_10]
.text:000015A0                 mov     dword ptr [eax], offset ??_7CInFileStreamVol@@6BIInStream@@@ ; const CInFileStreamVol::`vftable'{for `IInStream'}
.text:000015A6                 mov     ecx, [ebp+var_10]
.text:000015A9                 mov     dword ptr [ecx+4], offset ??_7CInFileStreamVol@@6BIStreamGetSize@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetSize'}
.text:000015B0                 mov     edx, [ebp+var_10]
.text:000015B3                 mov     dword ptr [edx+8], offset ??_7CInFileStreamVol@@6BIStreamGetProps@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetProps'}
.text:000015BA                 mov     eax, [ebp+var_10]
.text:000015BD                 mov     dword ptr [eax+0Ch], offset ??_7CInFileStreamVol@@6BIStreamGetProps2@@@ ; const CInFileStreamVol::`vftable'{for `IStreamGetProps2'}
.text:000015C4                 mov     [ebp+var_4], 1
.text:000015CB                 mov     ecx, [ebp+var_10]
.text:000015CE                 add     ecx, 60h ; '`'
.text:000015D1                 call    ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *(void)
.text:000015D6                 test    eax, eax
.text:000015D8                 jz      short loc_15F2
.text:000015DA                 mov     ecx, [ebp+var_10]
.text:000015DD                 mov     edx, [ecx+58h]
.text:000015E0                 push    edx
.text:000015E1                 mov     eax, [ebp+var_10]
.text:000015E4                 mov     ecx, [eax+5Ch]
.text:000015E7                 add     ecx, 74h ; 't'
.text:000015EA                 call    ??A?$CRecordVector@_N@@QAEAA_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:000015EF                 mov     byte ptr [eax], 0
.text:000015F2
.text:000015F2 loc_15F2:                               ; CODE XREF: CInFileStreamVol::~CInFileStreamVol(void)+68j
.text:000015F2                 mov     byte ptr [ebp+var_4], 0
.text:000015F6                 mov     ecx, [ebp+var_10]
.text:000015F9                 add     ecx, 60h ; '`'
.text:000015FC                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00001601                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001608                 mov     ecx, [ebp+var_10] ; this
.text:0000160B                 call    ??1CInFileStream@@UAE@XZ ; CInFileStream::~CInFileStream(void)
.text:00001610                 mov     ecx, [ebp+var_C]
.text:00001613                 mov     large fs:0, ecx
.text:0000161A                 pop     ecx
.text:0000161B                 add     esp, 10h
.text:0000161E                 cmp     ebp, esp
.text:00001620                 call    __RTC_CheckEsp
.text:00001625                 mov     esp, ebp
.text:00001627                 pop     ebp
.text:00001628                 retn
.text:00001628 ??1CInFileStreamVol@@UAE@XZ endp
.text:00001628
.text:00001628 ; ---------------------------------------------------------------------------
.text:00001629                 align 4
.text:00001629 _text           ends
.text:00001629
.text$x:0000162C ; ===========================================================================
.text$x:0000162C
.text$x:0000162C ; Segment type: Pure code
.text$x:0000162C ; Segment permissions: Read/Execute
.text$x:0000162C _text$x         segment para public 'CODE' use32
.text$x:0000162C                 assume cs:_text$x
.text$x:0000162C                 ;org 162Ch
.text$x:0000162C ; COMDAT (pick associative to section at 1570)
.text$x:0000162C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:0000162C
.text$x:0000162C ; =============== S U B R O U T I N E =======================================
.text$x:0000162C
.text$x:0000162C
.text$x:0000162C __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$0 proc near
.text$x:0000162C                                         ; DATA XREF: .xdata$x:00001660o
.text$x:0000162C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000162F                 jmp     ??1CInFileStream@@UAE@XZ ; CInFileStream::~CInFileStream(void)
.text$x:0000162F __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$0 endp
.text$x:0000162F
.text$x:00001634
.text$x:00001634 ; =============== S U B R O U T I N E =======================================
.text$x:00001634
.text$x:00001634
.text$x:00001634 __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$1 proc near
.text$x:00001634                                         ; DATA XREF: .xdata$x:00001668o
.text$x:00001634                 mov     ecx, [ebp-10h]
.text$x:00001637                 add     ecx, 60h ; '`'
.text$x:0000163A                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:0000163A __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$1 endp
.text$x:0000163A
.text$x:0000163F
.text$x:0000163F ; =============== S U B R O U T I N E =======================================
.text$x:0000163F
.text$x:0000163F
.text$x:0000163F __ehhandler$??1CInFileStreamVol@@UAE@XZ proc near
.text$x:0000163F                                         ; DATA XREF: CInFileStreamVol::~CInFileStreamVol(void)+5o
.text$x:0000163F
.text$x:0000163F arg_4           = dword ptr  8
.text$x:0000163F
.text$x:0000163F                 mov     edx, [esp+arg_4]
.text$x:00001643                 lea     eax, [edx+0Ch]
.text$x:00001646                 mov     ecx, [edx-8]
.text$x:00001649                 xor     ecx, eax
.text$x:0000164B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001650                 mov     eax, offset __ehfuncinfo$??1CInFileStreamVol@@UAE@XZ
.text$x:00001655                 jmp     ___CxxFrameHandler3
.text$x:00001655 __ehhandler$??1CInFileStreamVol@@UAE@XZ endp
.text$x:00001655
.text$x:00001655 ; ---------------------------------------------------------------------------
.text$x:0000165A                 align 4
.text$x:0000165A _text$x         ends
.text$x:0000165A
.xdata$x:0000165C ; ===========================================================================
.xdata$x:0000165C
.xdata$x:0000165C ; Segment type: Pure data
.xdata$x:0000165C ; Segment permissions: Read
.xdata$x:0000165C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000165C                 assume cs:_xdata$x
.xdata$x:0000165C                 ;org 165Ch
.xdata$x:0000165C ; COMDAT (pick associative to section at 1570)
.xdata$x:0000165C __unwindtable$??1CInFileStreamVol@@UAE@XZ db 0FFh
.xdata$x:0000165C                                         ; DATA XREF: .xdata$x:00001674o
.xdata$x:0000165D                 db 0FFh
.xdata$x:0000165E                 db 0FFh
.xdata$x:0000165F                 db 0FFh
.xdata$x:00001660                 dd offset __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$0
.xdata$x:00001664                 align 8
.xdata$x:00001668                 dd offset __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$1
.xdata$x:0000166C __ehfuncinfo$??1CInFileStreamVol@@UAE@XZ db  22h ; "
.xdata$x:0000166C                                         ; DATA XREF: __ehhandler$??1CInFileStreamVol@@UAE@XZ+11o
.xdata$x:0000166D                 db    5
.xdata$x:0000166E                 db  93h ; รด
.xdata$x:0000166F                 db  19h
.xdata$x:00001670                 db    2
.xdata$x:00001671                 db    0
.xdata$x:00001672                 db    0
.xdata$x:00001673                 db    0
.xdata$x:00001674                 dd offset __unwindtable$??1CInFileStreamVol@@UAE@XZ
.xdata$x:00001678                 db    0
.xdata$x:00001679                 db    0
.xdata$x:0000167A                 db    0
.xdata$x:0000167B                 db    0
.xdata$x:0000167C                 db    0
.xdata$x:0000167D                 db    0
.xdata$x:0000167E                 db    0
.xdata$x:0000167F                 db    0
.xdata$x:00001680                 db    0
.xdata$x:00001681                 db    0
.xdata$x:00001682                 db    0
.xdata$x:00001683                 db    0
.xdata$x:00001684                 db    0
.xdata$x:00001685                 db    0
.xdata$x:00001686                 db    0
.xdata$x:00001687                 db    0
.xdata$x:00001688                 db    0
.xdata$x:00001689                 db    0
.xdata$x:0000168A                 db    0
.xdata$x:0000168B                 db    0
.xdata$x:0000168C                 db    1
.xdata$x:0000168D                 db    0
.xdata$x:0000168E                 db    0
.xdata$x:0000168F                 db    0
.xdata$x:0000168F _xdata$x        ends
.xdata$x:0000168F
.text:00001690 ; ===========================================================================
.text:00001690
.text:00001690 ; Segment type: Pure code
.text:00001690 ; Segment permissions: Read/Execute
.text:00001690 _text           segment para public 'CODE' use32
.text:00001690                 assume cs:_text
.text:00001690                 ;org 1690h
.text:00001690 ; COMDAT (pick any)
.text:00001690                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001690
.text:00001690 ; =============== S U B R O U T I N E =======================================
.text:00001690
.text:00001690 ; Attributes: bp-based frame
.text:00001690
.text:00001690 ; public: unsigned int __thiscall CObjectVector<class UString>::Add(class UString const &)
.text:00001690                 public ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:00001690 ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text:00001690                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+26Bp
.text:00001690
.text:00001690 var_1C          = dword ptr -1Ch
.text:00001690 var_18          = dword ptr -18h
.text:00001690 var_14          = dword ptr -14h
.text:00001690 var_10          = dword ptr -10h
.text:00001690 var_C           = dword ptr -0Ch
.text:00001690 var_4           = dword ptr -4
.text:00001690 arg_0           = dword ptr  8
.text:00001690
.text:00001690                 push    ebp
.text:00001691                 mov     ebp, esp
.text:00001693                 push    0FFFFFFFFh
.text:00001695                 push    offset __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text:0000169A                 mov     eax, large fs:0
.text:000016A0                 push    eax
.text:000016A1                 sub     esp, 10h
.text:000016A4                 mov     eax, 0CCCCCCCCh
.text:000016A9                 mov     [ebp+var_1C], eax
.text:000016AC                 mov     [ebp+var_18], eax
.text:000016AF                 mov     [ebp+var_14], eax
.text:000016B2                 mov     [ebp+var_10], eax
.text:000016B5                 mov     eax, dword ptr ds:___security_cookie
.text:000016BA                 xor     eax, ebp
.text:000016BC                 push    eax
.text:000016BD                 lea     eax, [ebp+var_C]
.text:000016C0                 mov     large fs:0, eax
.text:000016C6                 mov     [ebp+var_10], ecx
.text:000016C9                 push    0Ch             ; unsigned int
.text:000016CB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000016D0                 add     esp, 4
.text:000016D3                 mov     [ebp+var_18], eax
.text:000016D6                 mov     [ebp+var_4], 0
.text:000016DD                 cmp     [ebp+var_18], 0
.text:000016E1                 jz      short loc_16F4
.text:000016E3                 mov     eax, [ebp+arg_0]
.text:000016E6                 push    eax
.text:000016E7                 mov     ecx, [ebp+var_18]
.text:000016EA                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:000016EF                 mov     [ebp+var_1C], eax
.text:000016F2                 jmp     short loc_16FB
.text:000016F4 ; ---------------------------------------------------------------------------
.text:000016F4
.text:000016F4 loc_16F4:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+51j
.text:000016F4                 mov     [ebp+var_1C], 0
.text:000016FB
.text:000016FB loc_16FB:                               ; CODE XREF: CObjectVector<UString>::Add(UString const &)+62j
.text:000016FB                 mov     ecx, [ebp+var_1C]
.text:000016FE                 mov     [ebp+var_14], ecx
.text:00001701                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001708                 mov     edx, [ebp+var_14]
.text:0000170B                 push    edx
.text:0000170C                 mov     ecx, [ebp+var_10]
.text:0000170F                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00001714                 mov     ecx, [ebp+var_C]
.text:00001717                 mov     large fs:0, ecx
.text:0000171E                 pop     ecx
.text:0000171F                 add     esp, 1Ch
.text:00001722                 cmp     ebp, esp
.text:00001724                 call    __RTC_CheckEsp
.text:00001729                 mov     esp, ebp
.text:0000172B                 pop     ebp
.text:0000172C                 retn    4
.text:0000172C ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text:0000172C
.text:0000172C ; ---------------------------------------------------------------------------
.text:0000172F                 align 10h
.text:0000172F _text           ends
.text:0000172F
.text$x:00001730 ; ===========================================================================
.text$x:00001730
.text$x:00001730 ; Segment type: Pure code
.text$x:00001730 ; Segment permissions: Read/Execute
.text$x:00001730 _text$x         segment para public 'CODE' use32
.text$x:00001730                 assume cs:_text$x
.text$x:00001730                 ;org 1730h
.text$x:00001730 ; COMDAT (pick associative to section at 1690)
.text$x:00001730                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00001730
.text$x:00001730 ; =============== S U B R O U T I N E =======================================
.text$x:00001730
.text$x:00001730
.text$x:00001730 __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
.text$x:00001730                                         ; DATA XREF: .xdata$x:0000175Co
.text$x:00001730                 mov     eax, [ebp-18h]
.text$x:00001733                 push    eax             ; void *
.text$x:00001734                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001739                 pop     ecx
.text$x:0000173A                 retn
.text$x:0000173A __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 endp
.text$x:0000173A
.text$x:0000173B
.text$x:0000173B ; =============== S U B R O U T I N E =======================================
.text$x:0000173B
.text$x:0000173B
.text$x:0000173B __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
.text$x:0000173B                                         ; DATA XREF: CObjectVector<UString>::Add(UString const &)+5o
.text$x:0000173B
.text$x:0000173B arg_4           = dword ptr  8
.text$x:0000173B
.text$x:0000173B                 mov     edx, [esp+arg_4]
.text$x:0000173F                 lea     eax, [edx+0Ch]
.text$x:00001742                 mov     ecx, [edx-14h]
.text$x:00001745                 xor     ecx, eax
.text$x:00001747                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000174C                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.text$x:00001751                 jmp     ___CxxFrameHandler3
.text$x:00001751 __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z endp
.text$x:00001751
.text$x:00001751 ; ---------------------------------------------------------------------------
.text$x:00001756                 align 4
.text$x:00001756 _text$x         ends
.text$x:00001756
.xdata$x:00001758 ; ===========================================================================
.xdata$x:00001758
.xdata$x:00001758 ; Segment type: Pure data
.xdata$x:00001758 ; Segment permissions: Read
.xdata$x:00001758 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001758                 assume cs:_xdata$x
.xdata$x:00001758                 ;org 1758h
.xdata$x:00001758 ; COMDAT (pick associative to section at 1690)
.xdata$x:00001758 __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db 0FFh
.xdata$x:00001758                                         ; DATA XREF: .xdata$x:00001768o
.xdata$x:00001759                 db 0FFh
.xdata$x:0000175A                 db 0FFh
.xdata$x:0000175B                 db 0FFh
.xdata$x:0000175C                 dd offset __unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
.xdata$x:00001760 __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z db  22h ; "
.xdata$x:00001760                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z+11o
.xdata$x:00001761                 db    5
.xdata$x:00001762                 db  93h ; รด
.xdata$x:00001763                 db  19h
.xdata$x:00001764                 db    1
.xdata$x:00001765                 db    0
.xdata$x:00001766                 db    0
.xdata$x:00001767                 db    0
.xdata$x:00001768                 dd offset __unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
.xdata$x:0000176C                 align 20h
.xdata$x:00001780                 db    1
.xdata$x:00001781                 db    0
.xdata$x:00001782                 db    0
.xdata$x:00001783                 db    0
.xdata$x:00001783 _xdata$x        ends
.xdata$x:00001783
.text:00001784 ; ===========================================================================
.text:00001784
.text:00001784 ; Segment type: Pure code
.text:00001784 ; Segment permissions: Read/Execute
.text:00001784 _text           segment para public 'CODE' use32
.text:00001784                 assume cs:_text
.text:00001784                 ;org 1784h
.text:00001784 ; COMDAT (pick any)
.text:00001784                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001784
.text:00001784 ; =============== S U B R O U T I N E =======================================
.text:00001784
.text:00001784 ; Attributes: bp-based frame
.text:00001784
.text:00001784 ; public: unsigned int __thiscall CRecordVector<bool>::Add(bool)
.text:00001784                 public ?Add@?$CRecordVector@_N@@QAEI_N@Z
.text:00001784 ?Add@?$CRecordVector@_N@@QAEI_N@Z proc near
.text:00001784                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+284p
.text:00001784
.text:00001784 var_8           = dword ptr -8
.text:00001784 var_4           = dword ptr -4
.text:00001784 arg_0           = byte ptr  8
.text:00001784
.text:00001784                 push    ebp
.text:00001785                 mov     ebp, esp
.text:00001787                 sub     esp, 8
.text:0000178A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001791                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001798                 mov     [ebp+var_4], ecx
.text:0000179B                 mov     ecx, [ebp+var_4]
.text:0000179E                 call    ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition(void)
.text:000017A3                 mov     eax, [ebp+var_4]
.text:000017A6                 mov     ecx, [eax]
.text:000017A8                 mov     edx, [ebp+var_4]
.text:000017AB                 mov     eax, [edx+4]
.text:000017AE                 mov     dl, [ebp+arg_0]
.text:000017B1                 mov     [ecx+eax], dl
.text:000017B4                 mov     eax, [ebp+var_4]
.text:000017B7                 mov     ecx, [eax+4]
.text:000017BA                 mov     [ebp+var_8], ecx
.text:000017BD                 mov     edx, [ebp+var_4]
.text:000017C0                 mov     eax, [edx+4]
.text:000017C3                 add     eax, 1
.text:000017C6                 mov     ecx, [ebp+var_4]
.text:000017C9                 mov     [ecx+4], eax
.text:000017CC                 mov     eax, [ebp+var_8]
.text:000017CF                 add     esp, 8
.text:000017D2                 cmp     ebp, esp
.text:000017D4                 call    __RTC_CheckEsp
.text:000017D9                 mov     esp, ebp
.text:000017DB                 pop     ebp
.text:000017DC                 retn    4
.text:000017DC ?Add@?$CRecordVector@_N@@QAEI_N@Z endp
.text:000017DC
.text:000017DC ; ---------------------------------------------------------------------------
.text:000017DF                 align 10h
.text:000017DF _text           ends
.text:000017DF
.text:000017E0 ; ===========================================================================
.text:000017E0
.text:000017E0 ; Segment type: Pure code
.text:000017E0 ; Segment permissions: Read/Execute
.text:000017E0 _text           segment para public 'CODE' use32
.text:000017E0                 assume cs:_text
.text:000017E0                 ;org 17E0h
.text:000017E0 ; COMDAT (pick any)
.text:000017E0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000017E0
.text:000017E0 ; =============== S U B R O U T I N E =======================================
.text:000017E0
.text:000017E0 ; Attributes: bp-based frame
.text:000017E0
.text:000017E0 ; public: bool & __thiscall CRecordVector<bool>::operator[](unsigned int)
.text:000017E0                 public ??A?$CRecordVector@_N@@QAEAA_NI@Z
.text:000017E0 ??A?$CRecordVector@_N@@QAEAA_NI@Z proc near
.text:000017E0                                         ; CODE XREF: CInFileStreamVol::~CInFileStreamVol(void)+7Ap
.text:000017E0
.text:000017E0 var_4           = dword ptr -4
.text:000017E0 arg_0           = dword ptr  8
.text:000017E0
.text:000017E0                 push    ebp
.text:000017E1                 mov     ebp, esp
.text:000017E3                 push    ecx
.text:000017E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000017EB                 mov     [ebp+var_4], ecx
.text:000017EE                 mov     eax, [ebp+var_4]
.text:000017F1                 mov     eax, [eax]
.text:000017F3                 add     eax, [ebp+arg_0]
.text:000017F6                 mov     esp, ebp
.text:000017F8                 pop     ebp
.text:000017F9                 retn    4
.text:000017F9 ??A?$CRecordVector@_N@@QAEAA_NI@Z endp
.text:000017F9
.text:000017F9 _text           ends
.text:000017F9
.text:000017FC ; ===========================================================================
.text:000017FC
.text:000017FC ; Segment type: Pure code
.text:000017FC ; Segment permissions: Read/Execute
.text:000017FC _text           segment para public 'CODE' use32
.text:000017FC                 assume cs:_text
.text:000017FC                 ;org 17FCh
.text:000017FC ; COMDAT (pick any)
.text:000017FC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000017FC
.text:000017FC ; =============== S U B R O U T I N E =======================================
.text:000017FC
.text:000017FC ; Attributes: bp-based frame
.text:000017FC
.text:000017FC ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:000017FC                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:000017FC ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:000017FC                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+246p
.text:000017FC
.text:000017FC var_8           = dword ptr -8
.text:000017FC var_4           = dword ptr -4
.text:000017FC arg_0           = dword ptr  8
.text:000017FC arg_4           = dword ptr  0Ch
.text:000017FC
.text:000017FC                 push    ebp
.text:000017FD                 mov     ebp, esp
.text:000017FF                 sub     esp, 8
.text:00001802                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001809                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001810                 mov     [ebp+var_4], ecx
.text:00001813                 mov     ecx, [ebp+var_4]
.text:00001816                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000181B                 mov     eax, [ebp+var_4]
.text:0000181E                 mov     ecx, [eax+4]
.text:00001821                 mov     edx, [ebp+var_4]
.text:00001824                 mov     eax, [edx]
.text:00001826                 mov     edx, [ebp+arg_0]
.text:00001829                 mov     [eax+ecx*8], edx
.text:0000182C                 mov     edx, [ebp+arg_4]
.text:0000182F                 mov     [eax+ecx*8+4], edx
.text:00001833                 mov     eax, [ebp+var_4]
.text:00001836                 mov     ecx, [eax+4]
.text:00001839                 mov     [ebp+var_8], ecx
.text:0000183C                 mov     edx, [ebp+var_4]
.text:0000183F                 mov     eax, [edx+4]
.text:00001842                 add     eax, 1
.text:00001845                 mov     ecx, [ebp+var_4]
.text:00001848                 mov     [ecx+4], eax
.text:0000184B                 mov     eax, [ebp+var_8]
.text:0000184E                 add     esp, 8
.text:00001851                 cmp     ebp, esp
.text:00001853                 call    __RTC_CheckEsp
.text:00001858                 mov     esp, ebp
.text:0000185A                 pop     ebp
.text:0000185B                 retn    8
.text:0000185B ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:0000185B
.text:0000185B ; ---------------------------------------------------------------------------
.text:0000185E                 align 10h
.text:0000185E _text           ends
.text:0000185E
.text:00001860 ; ===========================================================================
.text:00001860
.text:00001860 ; Segment type: Pure code
.text:00001860 ; Segment permissions: Read/Execute
.text:00001860 _text           segment para public 'CODE' use32
.text:00001860                 assume cs:_text
.text:00001860                 ;org 1860h
.text:00001860 ; COMDAT (pick any)
.text:00001860                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001860
.text:00001860 ; =============== S U B R O U T I N E =======================================
.text:00001860
.text:00001860 ; Attributes: bp-based frame
.text:00001860
.text:00001860 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::CMyComPtr<struct IArchiveOpenCallback>(void)
.text:00001860                 public ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:00001860 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:00001860                                         ; CODE XREF: CInFileStreamVol::CInFileStreamVol(void)+69p
.text:00001860
.text:00001860 var_4           = dword ptr -4
.text:00001860
.text:00001860                 push    ebp
.text:00001861                 mov     ebp, esp
.text:00001863                 push    ecx
.text:00001864                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000186B                 mov     [ebp+var_4], ecx
.text:0000186E                 mov     eax, [ebp+var_4]
.text:00001871                 mov     dword ptr [eax], 0
.text:00001877                 mov     eax, [ebp+var_4]
.text:0000187A                 mov     esp, ebp
.text:0000187C                 pop     ebp
.text:0000187D                 retn
.text:0000187D ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:0000187D
.text:0000187D ; ---------------------------------------------------------------------------
.text:0000187E                 align 10h
.text:0000187E _text           ends
.text:0000187E
.text:00001880 ; ===========================================================================
.text:00001880
.text:00001880 ; Segment type: Pure code
.text:00001880 ; Segment permissions: Read/Execute
.text:00001880 _text           segment para public 'CODE' use32
.text:00001880                 assume cs:_text
.text:00001880                 ;org 1880h
.text:00001880 ; COMDAT (pick any)
.text:00001880                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001880
.text:00001880 ; =============== S U B R O U T I N E =======================================
.text:00001880
.text:00001880 ; Attributes: bp-based frame
.text:00001880
.text:00001880 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::~CMyComPtr<struct IArchiveOpenCallback>(void)
.text:00001880                 public ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:00001880 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:00001880                                         ; CODE XREF: CInFileStreamVol::~CInFileStreamVol(void)+8Cp
.text:00001880                                         ; __unwindfunclet$??1CInFileStreamVol@@UAE@XZ$1+6j
.text:00001880
.text:00001880 var_4           = dword ptr -4
.text:00001880
.text:00001880                 push    ebp
.text:00001881                 mov     ebp, esp
.text:00001883                 push    ecx
.text:00001884                 push    esi
.text:00001885                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000188C                 mov     [ebp+var_4], ecx
.text:0000188F                 mov     eax, [ebp+var_4]
.text:00001892                 cmp     dword ptr [eax], 0
.text:00001895                 jz      short loc_18B2
.text:00001897                 mov     ecx, [ebp+var_4]
.text:0000189A                 mov     edx, [ecx]
.text:0000189C                 mov     eax, [ebp+var_4]
.text:0000189F                 mov     ecx, [eax]
.text:000018A1                 mov     edx, [edx]
.text:000018A3                 mov     esi, esp
.text:000018A5                 push    ecx
.text:000018A6                 mov     eax, [edx+8]
.text:000018A9                 call    eax
.text:000018AB                 cmp     esi, esp
.text:000018AD                 call    __RTC_CheckEsp
.text:000018B2
.text:000018B2 loc_18B2:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)+15j
.text:000018B2                 pop     esi
.text:000018B3                 add     esp, 4
.text:000018B6                 cmp     ebp, esp
.text:000018B8                 call    __RTC_CheckEsp
.text:000018BD                 mov     esp, ebp
.text:000018BF                 pop     ebp
.text:000018C0                 retn
.text:000018C0 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:000018C0
.text:000018C0 ; ---------------------------------------------------------------------------
.text:000018C1                 align 4
.text:000018C1 _text           ends
.text:000018C1
.text:000018C4 ; ===========================================================================
.text:000018C4
.text:000018C4 ; Segment type: Pure code
.text:000018C4 ; Segment permissions: Read/Execute
.text:000018C4 _text           segment para public 'CODE' use32
.text:000018C4                 assume cs:_text
.text:000018C4                 ;org 18C4h
.text:000018C4 ; COMDAT (pick any)
.text:000018C4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000018C4
.text:000018C4 ; =============== S U B R O U T I N E =======================================
.text:000018C4
.text:000018C4 ; Attributes: bp-based frame
.text:000018C4
.text:000018C4 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator struct IArchiveOpenCallback *(void)const
.text:000018C4                 public ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:000018C4 ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:000018C4                                         ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+53p
.text:000018C4                                         ; COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+53p ...
.text:000018C4
.text:000018C4 var_4           = dword ptr -4
.text:000018C4
.text:000018C4                 push    ebp
.text:000018C5                 mov     ebp, esp
.text:000018C7                 push    ecx
.text:000018C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018CF                 mov     [ebp+var_4], ecx
.text:000018D2                 mov     eax, [ebp+var_4]
.text:000018D5                 mov     eax, [eax]
.text:000018D7                 mov     esp, ebp
.text:000018D9                 pop     ebp
.text:000018DA                 retn
.text:000018DA ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:000018DA
.text:000018DA ; ---------------------------------------------------------------------------
.text:000018DB                 align 4
.text:000018DB _text           ends
.text:000018DB
.text:000018DC ; ===========================================================================
.text:000018DC
.text:000018DC ; Segment type: Pure code
.text:000018DC ; Segment permissions: Read/Execute
.text:000018DC _text           segment para public 'CODE' use32
.text:000018DC                 assume cs:_text
.text:000018DC                 ;org 18DCh
.text:000018DC ; COMDAT (pick any)
.text:000018DC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000018DC
.text:000018DC ; =============== S U B R O U T I N E =======================================
.text:000018DC
.text:000018DC ; Attributes: bp-based frame
.text:000018DC
.text:000018DC ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator->(void)const
.text:000018DC                 public ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
.text:000018DC ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ proc near
.text:000018DC                                         ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+6Ap
.text:000018DC                                         ; COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+6Ap
.text:000018DC
.text:000018DC var_4           = dword ptr -4
.text:000018DC
.text:000018DC                 push    ebp
.text:000018DD                 mov     ebp, esp
.text:000018DF                 push    ecx
.text:000018E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018E7                 mov     [ebp+var_4], ecx
.text:000018EA                 mov     eax, [ebp+var_4]
.text:000018ED                 mov     eax, [eax]
.text:000018EF                 mov     esp, ebp
.text:000018F1                 pop     ebp
.text:000018F2                 retn
.text:000018F2 ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ endp
.text:000018F2
.text:000018F2 ; ---------------------------------------------------------------------------
.text:000018F3                 align 4
.text:000018F3 _text           ends
.text:000018F3
.text:000018F4 ; ===========================================================================
.text:000018F4
.text:000018F4 ; Segment type: Pure code
.text:000018F4 ; Segment permissions: Read/Execute
.text:000018F4 _text           segment para public 'CODE' use32
.text:000018F4                 assume cs:_text
.text:000018F4                 ;org 18F4h
.text:000018F4 ; COMDAT (pick any)
.text:000018F4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000018F4
.text:000018F4 ; =============== S U B R O U T I N E =======================================
.text:000018F4
.text:000018F4 ; Attributes: bp-based frame
.text:000018F4
.text:000018F4 ; public: struct IArchiveOpenCallback * __thiscall CMyComPtr<struct IArchiveOpenCallback>::operator=(struct IArchiveOpenCallback *)
.text:000018F4                 public ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z
.text:000018F4 ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z proc near
.text:000018F4                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+2B4p
.text:000018F4
.text:000018F4 var_4           = dword ptr -4
.text:000018F4 arg_0           = dword ptr  8
.text:000018F4
.text:000018F4                 push    ebp
.text:000018F5                 mov     ebp, esp
.text:000018F7                 push    ecx
.text:000018F8                 push    esi
.text:000018F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001900                 mov     [ebp+var_4], ecx
.text:00001903                 cmp     [ebp+arg_0], 0
.text:00001907                 jz      short loc_1920
.text:00001909                 mov     eax, [ebp+arg_0]
.text:0000190C                 mov     ecx, [eax]
.text:0000190E                 mov     esi, esp
.text:00001910                 mov     edx, [ebp+arg_0]
.text:00001913                 push    edx
.text:00001914                 mov     eax, [ecx+4]
.text:00001917                 call    eax
.text:00001919                 cmp     esi, esp
.text:0000191B                 call    __RTC_CheckEsp
.text:00001920
.text:00001920 loc_1920:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)+13j
.text:00001920                 mov     ecx, [ebp+var_4]
.text:00001923                 cmp     dword ptr [ecx], 0
.text:00001926                 jz      short loc_1943
.text:00001928                 mov     edx, [ebp+var_4]
.text:0000192B                 mov     eax, [edx]
.text:0000192D                 mov     ecx, [ebp+var_4]
.text:00001930                 mov     edx, [ecx]
.text:00001932                 mov     eax, [eax]
.text:00001934                 mov     esi, esp
.text:00001936                 push    edx
.text:00001937                 mov     ecx, [eax+8]
.text:0000193A                 call    ecx
.text:0000193C                 cmp     esi, esp
.text:0000193E                 call    __RTC_CheckEsp
.text:00001943
.text:00001943 loc_1943:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::operator=(IArchiveOpenCallback *)+32j
.text:00001943                 mov     edx, [ebp+var_4]
.text:00001946                 mov     eax, [ebp+arg_0]
.text:00001949                 mov     [edx], eax
.text:0000194B                 mov     eax, [ebp+arg_0]
.text:0000194E                 pop     esi
.text:0000194F                 add     esp, 4
.text:00001952                 cmp     ebp, esp
.text:00001954                 call    __RTC_CheckEsp
.text:00001959                 mov     esp, ebp
.text:0000195B                 pop     ebp
.text:0000195C                 retn    4
.text:0000195C ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z endp
.text:0000195C
.text:0000195C ; ---------------------------------------------------------------------------
.text:0000195F                 align 10h
.text:0000195F _text           ends
.text:0000195F
.text:00001960 ; ===========================================================================
.text:00001960
.text:00001960 ; Segment type: Pure code
.text:00001960 ; Segment permissions: Read/Execute
.text:00001960 _text           segment para public 'CODE' use32
.text:00001960                 assume cs:_text
.text:00001960                 ;org 1960h
.text:00001960 ; COMDAT (pick any)
.text:00001960                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001960
.text:00001960 ; =============== S U B R O U T I N E =======================================
.text:00001960
.text:00001960 ; Attributes: bp-based frame
.text:00001960
.text:00001960 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(struct IInStream *)
.text:00001960                 public ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
.text:00001960 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z proc near
.text:00001960                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+1CCp
.text:00001960
.text:00001960 var_4           = dword ptr -4
.text:00001960 arg_0           = dword ptr  8
.text:00001960
.text:00001960                 push    ebp
.text:00001961                 mov     ebp, esp
.text:00001963                 push    ecx
.text:00001964                 push    esi
.text:00001965                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000196C                 mov     [ebp+var_4], ecx
.text:0000196F                 mov     eax, [ebp+var_4]
.text:00001972                 mov     ecx, [ebp+arg_0]
.text:00001975                 mov     [eax], ecx
.text:00001977                 cmp     [ebp+arg_0], 0
.text:0000197B                 jz      short loc_1994
.text:0000197D                 mov     edx, [ebp+arg_0]
.text:00001980                 mov     eax, [edx]
.text:00001982                 mov     esi, esp
.text:00001984                 mov     ecx, [ebp+arg_0]
.text:00001987                 push    ecx
.text:00001988                 mov     edx, [eax+4]
.text:0000198B                 call    edx
.text:0000198D                 cmp     esi, esp
.text:0000198F                 call    __RTC_CheckEsp
.text:00001994
.text:00001994 loc_1994:                               ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)+1Bj
.text:00001994                 mov     eax, [ebp+var_4]
.text:00001997                 pop     esi
.text:00001998                 add     esp, 4
.text:0000199B                 cmp     ebp, esp
.text:0000199D                 call    __RTC_CheckEsp
.text:000019A2                 mov     esp, ebp
.text:000019A4                 pop     ebp
.text:000019A5                 retn    4
.text:000019A5 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z endp
.text:000019A5
.text:000019A5 _text           ends
.text:000019A5
.text:000019A8 ; ===========================================================================
.text:000019A8
.text:000019A8 ; Segment type: Pure code
.text:000019A8 ; Segment permissions: Read/Execute
.text:000019A8 _text           segment para public 'CODE' use32
.text:000019A8                 assume cs:_text
.text:000019A8                 ;org 19A8h
.text:000019A8 ; COMDAT (pick any)
.text:000019A8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000019A8
.text:000019A8 ; =============== S U B R O U T I N E =======================================
.text:000019A8
.text:000019A8 ; Attributes: bp-based frame
.text:000019A8
.text:000019A8 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:000019A8                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:000019A8 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:000019A8                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+21Cp
.text:000019A8                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+2E0p ...
.text:000019A8
.text:000019A8 var_4           = dword ptr -4
.text:000019A8
.text:000019A8                 push    ebp
.text:000019A9                 mov     ebp, esp
.text:000019AB                 push    ecx
.text:000019AC                 push    esi
.text:000019AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019B4                 mov     [ebp+var_4], ecx
.text:000019B7                 mov     eax, [ebp+var_4]
.text:000019BA                 cmp     dword ptr [eax], 0
.text:000019BD                 jz      short loc_19DA
.text:000019BF                 mov     ecx, [ebp+var_4]
.text:000019C2                 mov     edx, [ecx]
.text:000019C4                 mov     eax, [ebp+var_4]
.text:000019C7                 mov     ecx, [eax]
.text:000019C9                 mov     edx, [edx]
.text:000019CB                 mov     esi, esp
.text:000019CD                 push    ecx
.text:000019CE                 mov     eax, [edx+8]
.text:000019D1                 call    eax
.text:000019D3                 cmp     esi, esp
.text:000019D5                 call    __RTC_CheckEsp
.text:000019DA
.text:000019DA loc_19DA:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:000019DA                 pop     esi
.text:000019DB                 add     esp, 4
.text:000019DE                 cmp     ebp, esp
.text:000019E0                 call    __RTC_CheckEsp
.text:000019E5                 mov     esp, ebp
.text:000019E7                 pop     ebp
.text:000019E8                 retn
.text:000019E8 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:000019E8
.text:000019E8 ; ---------------------------------------------------------------------------
.text:000019E9                 align 4
.text:000019E9 _text           ends
.text:000019E9
.text:000019EC ; ===========================================================================
.text:000019EC
.text:000019EC ; Segment type: Pure code
.text:000019EC ; Segment permissions: Read/Execute
.text:000019EC _text           segment para public 'CODE' use32
.text:000019EC                 assume cs:_text
.text:000019EC                 ;org 19ECh
.text:000019EC ; COMDAT (pick any)
.text:000019EC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000019EC
.text:000019EC ; =============== S U B R O U T I N E =======================================
.text:000019EC
.text:000019EC ; Attributes: bp-based frame
.text:000019EC
.text:000019EC ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::Detach(void)
.text:000019EC                 public ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ
.text:000019EC ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ proc near
.text:000019EC                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+2BCp
.text:000019EC
.text:000019EC var_8           = dword ptr -8
.text:000019EC var_4           = dword ptr -4
.text:000019EC
.text:000019EC                 push    ebp
.text:000019ED                 mov     ebp, esp
.text:000019EF                 sub     esp, 8
.text:000019F2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000019F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A00                 mov     [ebp+var_4], ecx
.text:00001A03                 mov     eax, [ebp+var_4]
.text:00001A06                 mov     ecx, [eax]
.text:00001A08                 mov     [ebp+var_8], ecx
.text:00001A0B                 mov     edx, [ebp+var_4]
.text:00001A0E                 mov     dword ptr [edx], 0
.text:00001A14                 mov     eax, [ebp+var_8]
.text:00001A17                 mov     esp, ebp
.text:00001A19                 pop     ebp
.text:00001A1A                 retn
.text:00001A1A ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ endp
.text:00001A1A
.text:00001A1A ; ---------------------------------------------------------------------------
.text:00001A1B                 align 4
.text:00001A1B _text           ends
.text:00001A1B
.text:00001A1C ; ===========================================================================
.text:00001A1C
.text:00001A1C ; Segment type: Pure code
.text:00001A1C ; Segment permissions: Read/Execute
.text:00001A1C _text           segment para public 'CODE' use32
.text:00001A1C                 assume cs:_text
.text:00001A1C                 ;org 1A1Ch
.text:00001A1C ; COMDAT (pick any)
.text:00001A1C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001A1C
.text:00001A1C ; =============== S U B R O U T I N E =======================================
.text:00001A1C
.text:00001A1C ; Attributes: bp-based frame
.text:00001A1C
.text:00001A1C ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00001A1C                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00001A1C ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00001A1C                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+60p
.text:00001A1C
.text:00001A1C var_4           = dword ptr -4
.text:00001A1C
.text:00001A1C                 push    ebp
.text:00001A1D                 mov     ebp, esp
.text:00001A1F                 push    ecx
.text:00001A20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A27                 mov     [ebp+var_4], ecx
.text:00001A2A                 mov     eax, [ebp+var_4]
.text:00001A2D                 mov     dword ptr [eax], 0
.text:00001A33                 mov     eax, [ebp+var_4]
.text:00001A36                 mov     esp, ebp
.text:00001A38                 pop     ebp
.text:00001A39                 retn
.text:00001A39 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00001A39
.text:00001A39 ; ---------------------------------------------------------------------------
.text:00001A3A                 align 4
.text:00001A3A _text           ends
.text:00001A3A
.text:00001A3C ; ===========================================================================
.text:00001A3C
.text:00001A3C ; Segment type: Pure code
.text:00001A3C ; Segment permissions: Read/Execute
.text:00001A3C _text           segment para public 'CODE' use32
.text:00001A3C                 assume cs:_text
.text:00001A3C                 ;org 1A3Ch
.text:00001A3C ; COMDAT (pick any)
.text:00001A3C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001A3C
.text:00001A3C ; =============== S U B R O U T I N E =======================================
.text:00001A3C
.text:00001A3C ; Attributes: bp-based frame
.text:00001A3C
.text:00001A3C ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00001A3C                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00001A3C ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00001A3C                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+DBp
.text:00001A3C                                         ; COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+ECp ...
.text:00001A3C
.text:00001A3C var_4           = dword ptr -4
.text:00001A3C
.text:00001A3C                 push    ebp
.text:00001A3D                 mov     ebp, esp
.text:00001A3F                 push    ecx
.text:00001A40                 push    esi
.text:00001A41                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A48                 mov     [ebp+var_4], ecx
.text:00001A4B                 mov     eax, [ebp+var_4]
.text:00001A4E                 cmp     dword ptr [eax], 0
.text:00001A51                 jz      short loc_1A6E
.text:00001A53                 mov     ecx, [ebp+var_4]
.text:00001A56                 mov     edx, [ecx]
.text:00001A58                 mov     eax, [ebp+var_4]
.text:00001A5B                 mov     ecx, [eax]
.text:00001A5D                 mov     edx, [edx]
.text:00001A5F                 mov     esi, esp
.text:00001A61                 push    ecx
.text:00001A62                 mov     eax, [edx+8]
.text:00001A65                 call    eax
.text:00001A67                 cmp     esi, esp
.text:00001A69                 call    __RTC_CheckEsp
.text:00001A6E
.text:00001A6E loc_1A6E:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:00001A6E                 pop     esi
.text:00001A6F                 add     esp, 4
.text:00001A72                 cmp     ebp, esp
.text:00001A74                 call    __RTC_CheckEsp
.text:00001A79                 mov     esp, ebp
.text:00001A7B                 pop     ebp
.text:00001A7C                 retn
.text:00001A7C ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00001A7C
.text:00001A7C ; ---------------------------------------------------------------------------
.text:00001A7D                 align 10h
.text:00001A7D _text           ends
.text:00001A7D
.text:00001A80 ; ===========================================================================
.text:00001A80
.text:00001A80 ; Segment type: Pure code
.text:00001A80 ; Segment permissions: Read/Execute
.text:00001A80 _text           segment para public 'CODE' use32
.text:00001A80                 assume cs:_text
.text:00001A80                 ;org 1A80h
.text:00001A80 ; COMDAT (pick any)
.text:00001A80                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001A80
.text:00001A80 ; =============== S U B R O U T I N E =======================================
.text:00001A80
.text:00001A80 ; Attributes: bp-based frame
.text:00001A80
.text:00001A80 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:00001A80                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00001A80 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00001A80                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+91p
.text:00001A80
.text:00001A80 var_4           = dword ptr -4
.text:00001A80
.text:00001A80                 push    ebp
.text:00001A81                 mov     ebp, esp
.text:00001A83                 push    ecx
.text:00001A84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A8B                 mov     [ebp+var_4], ecx
.text:00001A8E                 mov     eax, [ebp+var_4]
.text:00001A91                 mov     eax, [eax]
.text:00001A93                 mov     esp, ebp
.text:00001A95                 pop     ebp
.text:00001A96                 retn
.text:00001A96 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00001A96
.text:00001A96 ; ---------------------------------------------------------------------------
.text:00001A97                 align 4
.text:00001A97 _text           ends
.text:00001A97
.text:00001A98 ; ===========================================================================
.text:00001A98
.text:00001A98 ; Segment type: Pure code
.text:00001A98 ; Segment permissions: Read/Execute
.text:00001A98 _text           segment para public 'CODE' use32
.text:00001A98                 assume cs:_text
.text:00001A98                 ;org 1A98h
.text:00001A98 ; COMDAT (pick any)
.text:00001A98                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001A98
.text:00001A98 ; =============== S U B R O U T I N E =======================================
.text:00001A98
.text:00001A98 ; Attributes: bp-based frame
.text:00001A98
.text:00001A98 ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:00001A98                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:00001A98 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:00001A98                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+6Fp
.text:00001A98
.text:00001A98 var_4           = dword ptr -4
.text:00001A98
.text:00001A98                 push    ebp
.text:00001A99                 mov     ebp, esp
.text:00001A9B                 push    ecx
.text:00001A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AA3                 mov     [ebp+var_4], ecx
.text:00001AA6                 mov     eax, [ebp+var_4]
.text:00001AA9                 mov     esp, ebp
.text:00001AAB                 pop     ebp
.text:00001AAC                 retn
.text:00001AAC ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:00001AAC
.text:00001AAC ; ---------------------------------------------------------------------------
.text:00001AAD                 align 10h
.text:00001AAD _text           ends
.text:00001AAD
.text:00001AB0 ; ===========================================================================
.text:00001AB0
.text:00001AB0 ; Segment type: Pure code
.text:00001AB0 ; Segment permissions: Read/Execute
.text:00001AB0 _text           segment para public 'CODE' use32
.text:00001AB0                 assume cs:_text
.text:00001AB0                 ;org 1AB0h
.text:00001AB0 ; COMDAT (pick any)
.text:00001AB0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001AB0
.text:00001AB0 ; =============== S U B R O U T I N E =======================================
.text:00001AB0
.text:00001AB0 ; Attributes: bp-based frame
.text:00001AB0
.text:00001AB0 ; public: struct ICryptoGetTextPassword * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator->(void)const
.text:00001AB0                 public ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:00001AB0 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:00001AB0                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+A2p
.text:00001AB0
.text:00001AB0 var_4           = dword ptr -4
.text:00001AB0
.text:00001AB0                 push    ebp
.text:00001AB1                 mov     ebp, esp
.text:00001AB3                 push    ecx
.text:00001AB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ABB                 mov     [ebp+var_4], ecx
.text:00001ABE                 mov     eax, [ebp+var_4]
.text:00001AC1                 mov     eax, [eax]
.text:00001AC3                 mov     esp, ebp
.text:00001AC5                 pop     ebp
.text:00001AC6                 retn
.text:00001AC6 ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00001AC6
.text:00001AC6 ; ---------------------------------------------------------------------------
.text:00001AC7                 align 4
.text:00001AC7 _text           ends
.text:00001AC7
.text:00001AC8 ; ===========================================================================
.text:00001AC8
.text:00001AC8 ; Segment type: Pure code
.text:00001AC8 ; Segment permissions: Read/Execute
.text:00001AC8 _text           segment para public 'CODE' use32
.text:00001AC8                 assume cs:_text
.text:00001AC8                 ;org 1AC8h
.text:00001AC8 ; COMDAT (pick any)
.text:00001AC8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001AC8
.text:00001AC8 ; =============== S U B R O U T I N E =======================================
.text:00001AC8
.text:00001AC8 ; Attributes: bp-based frame
.text:00001AC8
.text:00001AC8 ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:00001AC8                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:00001AC8 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:00001AC8                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+7Fp
.text:00001AC8
.text:00001AC8 var_8           = dword ptr -8
.text:00001AC8 var_4           = dword ptr -4
.text:00001AC8 arg_0           = dword ptr  8
.text:00001AC8
.text:00001AC8                 push    ebp
.text:00001AC9                 mov     ebp, esp
.text:00001ACB                 sub     esp, 8
.text:00001ACE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001AD5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001ADC                 mov     [ebp+var_4], ecx
.text:00001ADF                 mov     ecx, [ebp+var_4]
.text:00001AE2                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:00001AE7                 mov     eax, [ebp+var_4]
.text:00001AEA                 mov     ecx, [eax+4]
.text:00001AED                 mov     edx, [ebp+var_4]
.text:00001AF0                 mov     eax, [edx]
.text:00001AF2                 mov     edx, [ebp+arg_0]
.text:00001AF5                 mov     [eax+ecx*4], edx
.text:00001AF8                 mov     eax, [ebp+var_4]
.text:00001AFB                 mov     ecx, [eax+4]
.text:00001AFE                 mov     [ebp+var_8], ecx
.text:00001B01                 mov     edx, [ebp+var_4]
.text:00001B04                 mov     eax, [edx+4]
.text:00001B07                 add     eax, 1
.text:00001B0A                 mov     ecx, [ebp+var_4]
.text:00001B0D                 mov     [ecx+4], eax
.text:00001B10                 mov     eax, [ebp+var_8]
.text:00001B13                 add     esp, 8
.text:00001B16                 cmp     ebp, esp
.text:00001B18                 call    __RTC_CheckEsp
.text:00001B1D                 mov     esp, ebp
.text:00001B1F                 pop     ebp
.text:00001B20                 retn    4
.text:00001B20 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00001B20
.text:00001B20 ; ---------------------------------------------------------------------------
.text:00001B23                 align 4
.text:00001B23 _text           ends
.text:00001B23
.text:00001B24 ; ===========================================================================
.text:00001B24
.text:00001B24 ; Segment type: Pure code
.text:00001B24 ; Segment permissions: Read/Execute
.text:00001B24 _text           segment para public 'CODE' use32
.text:00001B24                 assume cs:_text
.text:00001B24                 ;org 1B24h
.text:00001B24 ; COMDAT (pick any)
.text:00001B24                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001B24
.text:00001B24 ; =============== S U B R O U T I N E =======================================
.text:00001B24
.text:00001B24 ; Attributes: bp-based frame
.text:00001B24
.text:00001B24 ; private: void __thiscall CRecordVector<bool>::ReserveOnePosition(void)
.text:00001B24                 public ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
.text:00001B24 ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ proc near
.text:00001B24                                         ; CODE XREF: CRecordVector<bool>::Add(bool)+1Ap
.text:00001B24
.text:00001B24 var_14          = dword ptr -14h
.text:00001B24 var_10          = dword ptr -10h
.text:00001B24 Dst             = dword ptr -0Ch
.text:00001B24 var_8           = dword ptr -8
.text:00001B24 var_4           = dword ptr -4
.text:00001B24
.text:00001B24                 push    ebp
.text:00001B25                 mov     ebp, esp
.text:00001B27                 sub     esp, 14h
.text:00001B2A                 mov     eax, 0CCCCCCCCh
.text:00001B2F                 mov     [ebp+var_14], eax
.text:00001B32                 mov     [ebp+var_10], eax
.text:00001B35                 mov     [ebp+Dst], eax
.text:00001B38                 mov     [ebp+var_8], eax
.text:00001B3B                 mov     [ebp+var_4], eax
.text:00001B3E                 mov     [ebp+var_4], ecx
.text:00001B41                 mov     eax, [ebp+var_4]
.text:00001B44                 mov     ecx, [ebp+var_4]
.text:00001B47                 mov     edx, [eax+4]
.text:00001B4A                 cmp     edx, [ecx+8]
.text:00001B4D                 jnz     short loc_1BC1
.text:00001B4F                 mov     eax, [ebp+var_4]
.text:00001B52                 mov     ecx, [eax+8]
.text:00001B55                 shr     ecx, 2
.text:00001B58                 mov     edx, [ebp+var_4]
.text:00001B5B                 mov     eax, [edx+8]
.text:00001B5E                 lea     ecx, [eax+ecx+1]
.text:00001B62                 mov     [ebp+var_8], ecx
.text:00001B65                 mov     edx, [ebp+var_8]
.text:00001B68                 push    edx             ; unsigned int
.text:00001B69                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001B6E                 add     esp, 4
.text:00001B71                 mov     [ebp+var_10], eax
.text:00001B74                 mov     eax, [ebp+var_10]
.text:00001B77                 mov     [ebp+Dst], eax
.text:00001B7A                 mov     ecx, [ebp+var_4]
.text:00001B7D                 cmp     dword ptr [ecx+4], 0
.text:00001B81                 jz      short loc_1B9C
.text:00001B83                 mov     edx, [ebp+var_4]
.text:00001B86                 mov     eax, [edx+4]
.text:00001B89                 push    eax             ; Size
.text:00001B8A                 mov     ecx, [ebp+var_4]
.text:00001B8D                 mov     edx, [ecx]
.text:00001B8F                 push    edx             ; Src
.text:00001B90                 mov     eax, [ebp+Dst]
.text:00001B93                 push    eax             ; Dst
.text:00001B94                 call    _memcpy
.text:00001B99                 add     esp, 0Ch
.text:00001B9C
.text:00001B9C loc_1B9C:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+5Dj
.text:00001B9C                 mov     ecx, [ebp+var_4]
.text:00001B9F                 mov     edx, [ecx]
.text:00001BA1                 mov     [ebp+var_14], edx
.text:00001BA4                 mov     eax, [ebp+var_14]
.text:00001BA7                 push    eax             ; void *
.text:00001BA8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001BAD                 add     esp, 4
.text:00001BB0                 mov     ecx, [ebp+var_4]
.text:00001BB3                 mov     edx, [ebp+Dst]
.text:00001BB6                 mov     [ecx], edx
.text:00001BB8                 mov     eax, [ebp+var_4]
.text:00001BBB                 mov     ecx, [ebp+var_8]
.text:00001BBE                 mov     [eax+8], ecx
.text:00001BC1
.text:00001BC1 loc_1BC1:                               ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+29j
.text:00001BC1                 add     esp, 14h
.text:00001BC4                 cmp     ebp, esp
.text:00001BC6                 call    __RTC_CheckEsp
.text:00001BCB                 mov     esp, ebp
.text:00001BCD                 pop     ebp
.text:00001BCE                 retn
.text:00001BCE ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ endp
.text:00001BCE
.text:00001BCE ; ---------------------------------------------------------------------------
.text:00001BCF                 align 10h
.text:00001BCF _text           ends
.text:00001BCF
.text:00001BD0 ; ===========================================================================
.text:00001BD0
.text:00001BD0 ; Segment type: Pure code
.text:00001BD0 ; Segment permissions: Read/Execute
.text:00001BD0 _text           segment para public 'CODE' use32
.text:00001BD0                 assume cs:_text
.text:00001BD0                 ;org 1BD0h
.text:00001BD0 ; COMDAT (pick any)
.text:00001BD0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001BD0
.text:00001BD0 ; =============== S U B R O U T I N E =======================================
.text:00001BD0
.text:00001BD0 ; Attributes: bp-based frame
.text:00001BD0
.text:00001BD0 ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:00001BD0                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:00001BD0 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:00001BD0                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:00001BD0
.text:00001BD0 var_14          = dword ptr -14h
.text:00001BD0 var_10          = dword ptr -10h
.text:00001BD0 Dst             = dword ptr -0Ch
.text:00001BD0 var_8           = dword ptr -8
.text:00001BD0 var_4           = dword ptr -4
.text:00001BD0
.text:00001BD0                 push    ebp
.text:00001BD1                 mov     ebp, esp
.text:00001BD3                 sub     esp, 14h
.text:00001BD6                 mov     eax, 0CCCCCCCCh
.text:00001BDB                 mov     [ebp+var_14], eax
.text:00001BDE                 mov     [ebp+var_10], eax
.text:00001BE1                 mov     [ebp+Dst], eax
.text:00001BE4                 mov     [ebp+var_8], eax
.text:00001BE7                 mov     [ebp+var_4], eax
.text:00001BEA                 mov     [ebp+var_4], ecx
.text:00001BED                 mov     eax, [ebp+var_4]
.text:00001BF0                 mov     ecx, [ebp+var_4]
.text:00001BF3                 mov     edx, [eax+4]
.text:00001BF6                 cmp     edx, [ecx+8]
.text:00001BF9                 jnz     loc_1C84
.text:00001BFF                 mov     eax, [ebp+var_4]
.text:00001C02                 mov     ecx, [eax+8]
.text:00001C05                 shr     ecx, 2
.text:00001C08                 mov     edx, [ebp+var_4]
.text:00001C0B                 mov     eax, [edx+8]
.text:00001C0E                 lea     ecx, [eax+ecx+1]
.text:00001C12                 mov     [ebp+var_8], ecx
.text:00001C15                 xor     ecx, ecx
.text:00001C17                 mov     eax, [ebp+var_8]
.text:00001C1A                 mov     edx, 8
.text:00001C1F                 mul     edx
.text:00001C21                 seto    cl
.text:00001C24                 neg     ecx
.text:00001C26                 or      ecx, eax
.text:00001C28                 push    ecx             ; unsigned int
.text:00001C29                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C2E                 add     esp, 4
.text:00001C31                 mov     [ebp+var_10], eax
.text:00001C34                 mov     eax, [ebp+var_10]
.text:00001C37                 mov     [ebp+Dst], eax
.text:00001C3A                 mov     ecx, [ebp+var_4]
.text:00001C3D                 cmp     dword ptr [ecx+4], 0
.text:00001C41                 jz      short loc_1C5F
.text:00001C43                 mov     edx, [ebp+var_4]
.text:00001C46                 mov     eax, [edx+4]
.text:00001C49                 shl     eax, 3
.text:00001C4C                 push    eax             ; Size
.text:00001C4D                 mov     ecx, [ebp+var_4]
.text:00001C50                 mov     edx, [ecx]
.text:00001C52                 push    edx             ; Src
.text:00001C53                 mov     eax, [ebp+Dst]
.text:00001C56                 push    eax             ; Dst
.text:00001C57                 call    _memcpy
.text:00001C5C                 add     esp, 0Ch
.text:00001C5F
.text:00001C5F loc_1C5F:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:00001C5F                 mov     ecx, [ebp+var_4]
.text:00001C62                 mov     edx, [ecx]
.text:00001C64                 mov     [ebp+var_14], edx
.text:00001C67                 mov     eax, [ebp+var_14]
.text:00001C6A                 push    eax             ; void *
.text:00001C6B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001C70                 add     esp, 4
.text:00001C73                 mov     ecx, [ebp+var_4]
.text:00001C76                 mov     edx, [ebp+Dst]
.text:00001C79                 mov     [ecx], edx
.text:00001C7B                 mov     eax, [ebp+var_4]
.text:00001C7E                 mov     ecx, [ebp+var_8]
.text:00001C81                 mov     [eax+8], ecx
.text:00001C84
.text:00001C84 loc_1C84:                               ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:00001C84                 add     esp, 14h
.text:00001C87                 cmp     ebp, esp
.text:00001C89                 call    __RTC_CheckEsp
.text:00001C8E                 mov     esp, ebp
.text:00001C90                 pop     ebp
.text:00001C91                 retn
.text:00001C91 ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:00001C91
.text:00001C91 ; ---------------------------------------------------------------------------
.text:00001C92                 align 4
.text:00001C92 _text           ends
.text:00001C92
.text:00001C94 ; ===========================================================================
.text:00001C94
.text:00001C94 ; Segment type: Pure code
.text:00001C94 ; Segment permissions: Read/Execute
.text:00001C94 _text           segment para public 'CODE' use32
.text:00001C94                 assume cs:_text
.text:00001C94                 ;org 1C94h
.text:00001C94 ; COMDAT (pick any)
.text:00001C94                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001C94
.text:00001C94 ; =============== S U B R O U T I N E =======================================
.text:00001C94
.text:00001C94 ; Attributes: bp-based frame
.text:00001C94
.text:00001C94 ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:00001C94                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:00001C94 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:00001C94                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:00001C94
.text:00001C94 var_14          = dword ptr -14h
.text:00001C94 var_10          = dword ptr -10h
.text:00001C94 Dst             = dword ptr -0Ch
.text:00001C94 var_8           = dword ptr -8
.text:00001C94 var_4           = dword ptr -4
.text:00001C94
.text:00001C94                 push    ebp
.text:00001C95                 mov     ebp, esp
.text:00001C97                 sub     esp, 14h
.text:00001C9A                 mov     eax, 0CCCCCCCCh
.text:00001C9F                 mov     [ebp+var_14], eax
.text:00001CA2                 mov     [ebp+var_10], eax
.text:00001CA5                 mov     [ebp+Dst], eax
.text:00001CA8                 mov     [ebp+var_8], eax
.text:00001CAB                 mov     [ebp+var_4], eax
.text:00001CAE                 mov     [ebp+var_4], ecx
.text:00001CB1                 mov     eax, [ebp+var_4]
.text:00001CB4                 mov     ecx, [ebp+var_4]
.text:00001CB7                 mov     edx, [eax+4]
.text:00001CBA                 cmp     edx, [ecx+8]
.text:00001CBD                 jnz     loc_1D48
.text:00001CC3                 mov     eax, [ebp+var_4]
.text:00001CC6                 mov     ecx, [eax+8]
.text:00001CC9                 shr     ecx, 2
.text:00001CCC                 mov     edx, [ebp+var_4]
.text:00001CCF                 mov     eax, [edx+8]
.text:00001CD2                 lea     ecx, [eax+ecx+1]
.text:00001CD6                 mov     [ebp+var_8], ecx
.text:00001CD9                 xor     ecx, ecx
.text:00001CDB                 mov     eax, [ebp+var_8]
.text:00001CDE                 mov     edx, 4
.text:00001CE3                 mul     edx
.text:00001CE5                 seto    cl
.text:00001CE8                 neg     ecx
.text:00001CEA                 or      ecx, eax
.text:00001CEC                 push    ecx             ; unsigned int
.text:00001CED                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001CF2                 add     esp, 4
.text:00001CF5                 mov     [ebp+var_10], eax
.text:00001CF8                 mov     eax, [ebp+var_10]
.text:00001CFB                 mov     [ebp+Dst], eax
.text:00001CFE                 mov     ecx, [ebp+var_4]
.text:00001D01                 cmp     dword ptr [ecx+4], 0
.text:00001D05                 jz      short loc_1D23
.text:00001D07                 mov     edx, [ebp+var_4]
.text:00001D0A                 mov     eax, [edx+4]
.text:00001D0D                 shl     eax, 2
.text:00001D10                 push    eax             ; Size
.text:00001D11                 mov     ecx, [ebp+var_4]
.text:00001D14                 mov     edx, [ecx]
.text:00001D16                 push    edx             ; Src
.text:00001D17                 mov     eax, [ebp+Dst]
.text:00001D1A                 push    eax             ; Dst
.text:00001D1B                 call    _memcpy
.text:00001D20                 add     esp, 0Ch
.text:00001D23
.text:00001D23 loc_1D23:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:00001D23                 mov     ecx, [ebp+var_4]
.text:00001D26                 mov     edx, [ecx]
.text:00001D28                 mov     [ebp+var_14], edx
.text:00001D2B                 mov     eax, [ebp+var_14]
.text:00001D2E                 push    eax             ; void *
.text:00001D2F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001D34                 add     esp, 4
.text:00001D37                 mov     ecx, [ebp+var_4]
.text:00001D3A                 mov     edx, [ebp+Dst]
.text:00001D3D                 mov     [ecx], edx
.text:00001D3F                 mov     eax, [ebp+var_4]
.text:00001D42                 mov     ecx, [ebp+var_8]
.text:00001D45                 mov     [eax+8], ecx
.text:00001D48
.text:00001D48 loc_1D48:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00001D48                 add     esp, 14h
.text:00001D4B                 cmp     ebp, esp
.text:00001D4D                 call    __RTC_CheckEsp
.text:00001D52                 mov     esp, ebp
.text:00001D54                 pop     ebp
.text:00001D55                 retn
.text:00001D55 ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:00001D55
.text:00001D55 ; ---------------------------------------------------------------------------
.text:00001D56                 align 4
.text:00001D56 _text           ends
.text:00001D56
.text:00001D58 ; ===========================================================================
.text:00001D58
.text:00001D58 ; Segment type: Pure code
.text:00001D58 ; Segment permissions: Read/Execute
.text:00001D58 _text           segment para public 'CODE' use32
.text:00001D58                 assume cs:_text
.text:00001D58                 ;org 1D58h
.text:00001D58 ; COMDAT (pick any)
.text:00001D58                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001D58
.text:00001D58 ; =============== S U B R O U T I N E =======================================
.text:00001D58
.text:00001D58 ; Attributes: bp-based frame
.text:00001D58
.text:00001D58 ; public: long __thiscall CMyComPtr<struct IArchiveOpenCallback>::QueryInterface<struct ICryptoGetTextPassword>(struct _GUID const &, struct ICryptoGetTextPassword * *)const
.text:00001D58                 public ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
.text:00001D58 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z proc near
.text:00001D58                                         ; CODE XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+89p
.text:00001D58
.text:00001D58 var_4           = dword ptr -4
.text:00001D58 arg_0           = dword ptr  8
.text:00001D58 arg_4           = dword ptr  0Ch
.text:00001D58
.text:00001D58                 push    ebp
.text:00001D59                 mov     ebp, esp
.text:00001D5B                 push    ecx
.text:00001D5C                 push    esi
.text:00001D5D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D64                 mov     [ebp+var_4], ecx
.text:00001D67                 mov     esi, esp
.text:00001D69                 mov     eax, [ebp+arg_4]
.text:00001D6C                 push    eax
.text:00001D6D                 mov     ecx, [ebp+arg_0]
.text:00001D70                 push    ecx
.text:00001D71                 mov     edx, [ebp+var_4]
.text:00001D74                 mov     eax, [edx]
.text:00001D76                 mov     ecx, [ebp+var_4]
.text:00001D79                 mov     edx, [ecx]
.text:00001D7B                 mov     eax, [eax]
.text:00001D7D                 push    edx
.text:00001D7E                 mov     ecx, [eax]
.text:00001D80                 call    ecx
.text:00001D82                 cmp     esi, esp
.text:00001D84                 call    __RTC_CheckEsp
.text:00001D89                 pop     esi
.text:00001D8A                 add     esp, 4
.text:00001D8D                 cmp     ebp, esp
.text:00001D8F                 call    __RTC_CheckEsp
.text:00001D94                 mov     esp, ebp
.text:00001D96                 pop     ebp
.text:00001D97                 retn    8
.text:00001D97 ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z endp
.text:00001D97
.text:00001D97 ; ---------------------------------------------------------------------------
.text:00001D9A                 align 4
.text:00001D9A _text           ends
.text:00001D9A
.text:00001D9C ; ===========================================================================
.text:00001D9C
.text:00001D9C ; Segment type: Pure code
.text:00001D9C ; Segment permissions: Read/Execute
.text:00001D9C _text           segment para public 'CODE' use32
.text:00001D9C                 assume cs:_text
.text:00001D9C                 ;org 1D9Ch
.text:00001D9C ; COMDAT (pick any)
.text:00001D9C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001D9C
.text:00001D9C ; =============== S U B R O U T I N E =======================================
.text:00001D9C
.text:00001D9C
.text:00001D9C ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{12}' (void)
.text:00001D9C                 public ?AddRef@CInFileStream@@WM@AGKXZ
.text:00001D9C ?AddRef@CInFileStream@@WM@AGKXZ proc near ; DATA XREF: .rdata:00000E1Co
.text:00001D9C
.text:00001D9C arg_0           = dword ptr  4
.text:00001D9C
.text:00001D9C                 sub     [esp+arg_0], 0Ch
.text:00001DA1                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001DA1 ?AddRef@CInFileStream@@WM@AGKXZ endp
.text:00001DA1
.text:00001DA1 ; ---------------------------------------------------------------------------
.text:00001DA6                 align 4
.text:00001DA6 _text           ends
.text:00001DA6
.text:00001DA8 ; ===========================================================================
.text:00001DA8
.text:00001DA8 ; Segment type: Pure code
.text:00001DA8 ; Segment permissions: Read/Execute
.text:00001DA8 _text           segment para public 'CODE' use32
.text:00001DA8                 assume cs:_text
.text:00001DA8                 ;org 1DA8h
.text:00001DA8 ; COMDAT (pick any)
.text:00001DA8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DA8
.text:00001DA8 ; =============== S U B R O U T I N E =======================================
.text:00001DA8
.text:00001DA8
.text:00001DA8 ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001DA8                 public ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z
.text:00001DA8 ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001DA8                                         ; DATA XREF: .rdata:const CInFileStreamVol::`vftable'{for `IStreamGetSize'}o
.text:00001DA8
.text:00001DA8 arg_0           = dword ptr  4
.text:00001DA8
.text:00001DA8                 sub     [esp+arg_0], 4
.text:00001DAD                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001DAD ?QueryInterface@CInFileStream@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001DAD
.text:00001DAD ; ---------------------------------------------------------------------------
.text:00001DB2                 align 4
.text:00001DB2 _text           ends
.text:00001DB2
.text:00001DB4 ; ===========================================================================
.text:00001DB4
.text:00001DB4 ; Segment type: Pure code
.text:00001DB4 ; Segment permissions: Read/Execute
.text:00001DB4 _text           segment para public 'CODE' use32
.text:00001DB4                 assume cs:_text
.text:00001DB4                 ;org 1DB4h
.text:00001DB4 ; COMDAT (pick any)
.text:00001DB4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DB4
.text:00001DB4 ; =============== S U B R O U T I N E =======================================
.text:00001DB4
.text:00001DB4
.text:00001DB4 ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001DB4                 public ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z
.text:00001DB4 ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001DB4                                         ; DATA XREF: .rdata:const CInFileStreamVol::`vftable'{for `IStreamGetProps'}o
.text:00001DB4
.text:00001DB4 arg_0           = dword ptr  4
.text:00001DB4
.text:00001DB4                 sub     [esp+arg_0], 8
.text:00001DB9                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001DB9 ?QueryInterface@CInFileStream@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00001DB9
.text:00001DB9 ; ---------------------------------------------------------------------------
.text:00001DBE                 align 10h
.text:00001DBE _text           ends
.text:00001DBE
.text:00001DC0 ; ===========================================================================
.text:00001DC0
.text:00001DC0 ; Segment type: Pure code
.text:00001DC0 ; Segment permissions: Read/Execute
.text:00001DC0 _text           segment para public 'CODE' use32
.text:00001DC0                 assume cs:_text
.text:00001DC0                 ;org 1DC0h
.text:00001DC0 ; COMDAT (pick any)
.text:00001DC0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DC0
.text:00001DC0 ; =============== S U B R O U T I N E =======================================
.text:00001DC0
.text:00001DC0
.text:00001DC0 ; [thunk]:public: virtual long __stdcall CInFileStream::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001DC0                 public ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001DC0 ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001DC0                                         ; DATA XREF: .rdata:const CInFileStreamVol::`vftable'{for `IStreamGetProps2'}o
.text:00001DC0
.text:00001DC0 arg_0           = dword ptr  4
.text:00001DC0
.text:00001DC0                 sub     [esp+arg_0], 0Ch
.text:00001DC5                 jmp     ?QueryInterface@CInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CInFileStream::QueryInterface(_GUID const &,void * *)
.text:00001DC5 ?QueryInterface@CInFileStream@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001DC5
.text:00001DC5 ; ---------------------------------------------------------------------------
.text:00001DCA                 align 4
.text:00001DCA _text           ends
.text:00001DCA
.text:00001DCC ; ===========================================================================
.text:00001DCC
.text:00001DCC ; Segment type: Pure code
.text:00001DCC ; Segment permissions: Read/Execute
.text:00001DCC _text           segment para public 'CODE' use32
.text:00001DCC                 assume cs:_text
.text:00001DCC                 ;org 1DCCh
.text:00001DCC ; COMDAT (pick any)
.text:00001DCC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DCC
.text:00001DCC ; =============== S U B R O U T I N E =======================================
.text:00001DCC
.text:00001DCC
.text:00001DCC ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{4}' (void)
.text:00001DCC                 public ?Release@CInFileStream@@W3AGKXZ
.text:00001DCC ?Release@CInFileStream@@W3AGKXZ proc near ; DATA XREF: .rdata:00000E48o
.text:00001DCC
.text:00001DCC arg_0           = dword ptr  4
.text:00001DCC
.text:00001DCC                 sub     [esp+arg_0], 4
.text:00001DD1                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001DD1 ?Release@CInFileStream@@W3AGKXZ endp
.text:00001DD1
.text:00001DD1 ; ---------------------------------------------------------------------------
.text:00001DD6                 align 4
.text:00001DD6 _text           ends
.text:00001DD6
.text:00001DD8 ; ===========================================================================
.text:00001DD8
.text:00001DD8 ; Segment type: Pure code
.text:00001DD8 ; Segment permissions: Read/Execute
.text:00001DD8 _text           segment para public 'CODE' use32
.text:00001DD8                 assume cs:_text
.text:00001DD8                 ;org 1DD8h
.text:00001DD8 ; COMDAT (pick any)
.text:00001DD8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DD8
.text:00001DD8 ; =============== S U B R O U T I N E =======================================
.text:00001DD8
.text:00001DD8
.text:00001DD8 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{8}' (void)
.text:00001DD8                 public ?Release@CInFileStream@@W7AGKXZ
.text:00001DD8 ?Release@CInFileStream@@W7AGKXZ proc near ; DATA XREF: .rdata:00000E34o
.text:00001DD8
.text:00001DD8 arg_0           = dword ptr  4
.text:00001DD8
.text:00001DD8                 sub     [esp+arg_0], 8
.text:00001DDD                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001DDD ?Release@CInFileStream@@W7AGKXZ endp
.text:00001DDD
.text:00001DDD ; ---------------------------------------------------------------------------
.text:00001DE2                 align 4
.text:00001DE2 _text           ends
.text:00001DE2
.text:00001DE4 ; ===========================================================================
.text:00001DE4
.text:00001DE4 ; Segment type: Pure code
.text:00001DE4 ; Segment permissions: Read/Execute
.text:00001DE4 _text           segment para public 'CODE' use32
.text:00001DE4                 assume cs:_text
.text:00001DE4                 ;org 1DE4h
.text:00001DE4 ; COMDAT (pick any)
.text:00001DE4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DE4
.text:00001DE4 ; =============== S U B R O U T I N E =======================================
.text:00001DE4
.text:00001DE4
.text:00001DE4 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{4}' (void)
.text:00001DE4                 public ?AddRef@CInFileStream@@W3AGKXZ
.text:00001DE4 ?AddRef@CInFileStream@@W3AGKXZ proc near ; DATA XREF: .rdata:00000E44o
.text:00001DE4
.text:00001DE4 arg_0           = dword ptr  4
.text:00001DE4
.text:00001DE4                 sub     [esp+arg_0], 4
.text:00001DE9                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001DE9 ?AddRef@CInFileStream@@W3AGKXZ endp
.text:00001DE9
.text:00001DE9 ; ---------------------------------------------------------------------------
.text:00001DEE                 align 10h
.text:00001DEE _text           ends
.text:00001DEE
.text:00001DF0 ; ===========================================================================
.text:00001DF0
.text:00001DF0 ; Segment type: Pure code
.text:00001DF0 ; Segment permissions: Read/Execute
.text:00001DF0 _text           segment para public 'CODE' use32
.text:00001DF0                 assume cs:_text
.text:00001DF0                 ;org 1DF0h
.text:00001DF0 ; COMDAT (pick any)
.text:00001DF0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DF0
.text:00001DF0 ; =============== S U B R O U T I N E =======================================
.text:00001DF0
.text:00001DF0
.text:00001DF0 ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::Release`adjustor{12}' (void)
.text:00001DF0                 public ?Release@CInFileStream@@WM@AGKXZ
.text:00001DF0 ?Release@CInFileStream@@WM@AGKXZ proc near ; DATA XREF: .rdata:00000E20o
.text:00001DF0
.text:00001DF0 arg_0           = dword ptr  4
.text:00001DF0
.text:00001DF0                 sub     [esp+arg_0], 0Ch
.text:00001DF5                 jmp     ?Release@CInFileStream@@UAGKXZ ; CInFileStream::Release(void)
.text:00001DF5 ?Release@CInFileStream@@WM@AGKXZ endp
.text:00001DF5
.text:00001DF5 ; ---------------------------------------------------------------------------
.text:00001DFA                 align 4
.text:00001DFA _text           ends
.text:00001DFA
.text:00001DFC ; ===========================================================================
.text:00001DFC
.text:00001DFC ; Segment type: Pure code
.text:00001DFC ; Segment permissions: Read/Execute
.text:00001DFC _text           segment para public 'CODE' use32
.text:00001DFC                 assume cs:_text
.text:00001DFC                 ;org 1DFCh
.text:00001DFC ; COMDAT (pick any)
.text:00001DFC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00001DFC
.text:00001DFC ; =============== S U B R O U T I N E =======================================
.text:00001DFC
.text:00001DFC
.text:00001DFC ; [thunk]:public: virtual unsigned long __stdcall CInFileStream::AddRef`adjustor{8}' (void)
.text:00001DFC                 public ?AddRef@CInFileStream@@W7AGKXZ
.text:00001DFC ?AddRef@CInFileStream@@W7AGKXZ proc near ; DATA XREF: .rdata:00000E30o
.text:00001DFC
.text:00001DFC arg_0           = dword ptr  4
.text:00001DFC
.text:00001DFC                 sub     [esp+arg_0], 8
.text:00001E01                 jmp     ?AddRef@CInFileStream@@UAGKXZ ; CInFileStream::AddRef(void)
.text:00001E01 ?AddRef@CInFileStream@@W7AGKXZ endp
.text:00001E01
.text:00001E01 _text           ends
.text:00001E01
UNDEF:00001E10 ; ===========================================================================
UNDEF:00001E10
UNDEF:00001E10 ; Segment type: Externs
UNDEF:00001E10 ; UNDEF
UNDEF:00001E10                 extrn ___security_cookie:near
UNDEF:00001E10                                         ; DATA XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+2Fr
UNDEF:00001E10                                         ; COpenCallbackImp::SetCompleted(unsigned __int64 const *,unsigned __int64 const *)+2Fr ...
UNDEF:00001E14                 extrn ___CxxFrameHandler3:near
UNDEF:00001E14                                         ; CODE XREF: __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z+16j
UNDEF:00001E14                                         ; __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z+16j ...
UNDEF:00001E18 ; __fastcall __security_check_cookie(x)
UNDEF:00001E18                 extrn @__security_check_cookie@4:near
UNDEF:00001E18                                         ; CODE XREF: __ehhandler$?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z+Cp
UNDEF:00001E18                                         ; __ehhandler$?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z+Cp ...
UNDEF:00001E1C                 extrn __RTC_CheckEsp:near
UNDEF:00001E1C                                         ; CODE XREF: COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+92p
UNDEF:00001E1C                                         ; COpenCallbackImp::SetTotal(unsigned __int64 const *,unsigned __int64 const *)+D4p ...
UNDEF:00001E20                 extrn __RTC_Shutdown:near
UNDEF:00001E20                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001E24                 extrn __RTC_InitBase:near
UNDEF:00001E24                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001E28 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:00001E28                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:00001E28                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+12Dp
UNDEF:00001E2C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:00001E2C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:00001E2C                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+FFp
UNDEF:00001E2C                                         ; COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+110p ...
UNDEF:00001E30 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:00001E30                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:00001E30                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+EEp
UNDEF:00001E34 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00001E34                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00001E34                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+DDp
UNDEF:00001E38 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00001E38                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00001E38                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+C8p
UNDEF:00001E3C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00001E3C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00001E3C                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+74p
UNDEF:00001E3C                                         ; COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+ABp
UNDEF:00001E40 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001E40                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001E40                                         ; CODE XREF: COpenCallbackImp::GetProperty(ulong,tagPROPVARIANT *)+17Ap
UNDEF:00001E40                                         ; COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+326p ...
UNDEF:00001E44 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00001E44                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00001E44                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00001E48 ; void __cdecl operator delete(void *)
UNDEF:00001E48                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z$3+4p
UNDEF:00001E48                                         ; UString::~UString(void)+23p ...
UNDEF:00001E4C ; _DWORD __thiscall UString::UString(UString *__hidden this, const wchar_t *)
UNDEF:00001E4C                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:00001E4C                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+252p
UNDEF:00001E50 ; DWORD __stdcall GetLastError()
UNDEF:00001E50                 extrn __imp__GetLastError@0:near
UNDEF:00001E50                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+205p
UNDEF:00001E50                                         ; DATA XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+205r
UNDEF:00001E54 ; void *__cdecl operator new(unsigned int)
UNDEF:00001E54                 extrn ??2@YAPAXI@Z:near ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+171p
UNDEF:00001E54                                         ; CObjectVector<UString>::Add(UString const &)+3Bp ...
UNDEF:00001E58 ; bool __thiscall NWindows::NFile::NFind::CFileInfo::Find(NWindows::NFile::NFind::CFileInfo *__hidden this, const wchar_t *)
UNDEF:00001E58                 extrn ?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00001E58                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+113p
UNDEF:00001E5C ; bool NWindows::NFile::NName::GetFullPath(NWindows::NFile::NName *__hidden this, const wchar_t *, const wchar_t *, struct UString *)
UNDEF:00001E5C                 extrn ?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z:near
UNDEF:00001E5C                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+D3p
UNDEF:00001E60 ; public: __thiscall UString::UString(void)
UNDEF:00001E60                 extrn ??0UString@@QAE@XZ:near
UNDEF:00001E60                                         ; CODE XREF: COpenCallbackImp::GetStream(wchar_t const *,IInStream * *)+ADp
UNDEF:00001E64 ; bool __thiscall NWindows::NFile::NIO::CInFile::Open(NWindows::NFile::NIO::CInFile *__hidden this, const wchar_t *)
UNDEF:00001E64                 extrn ?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:near
UNDEF:00001E64                                         ; CODE XREF: CInFileStream::Open(wchar_t const *)+18p
UNDEF:00001E68 ; _DWORD __thiscall CInFileStream::~CInFileStream(CInFileStream *__hidden this)
UNDEF:00001E68                 extrn ??1CInFileStream@@UAE@XZ:near
UNDEF:00001E68                                         ; CODE XREF: __unwindfunclet$??0CInFileStreamVol@@QAE@XZ$0+3j
UNDEF:00001E68                                         ; CInFileStreamVol::~CInFileStreamVol(void)+9Bp ...
UNDEF:00001E6C ; public: __thiscall CInFileStream::CInFileStream(void)
UNDEF:00001E6C                 extrn ??0CInFileStream@@QAE@XZ:near
UNDEF:00001E6C                                         ; CODE XREF: CInFileStreamVol::CInFileStreamVol(void)+30p
UNDEF:00001E70 ; const type_info::`vftable'
UNDEF:00001E70                 extrn ??_7type_info@@6B@:near
UNDEF:00001E70                                         ; DATA XREF: .data:CInFileStreamVol `RTTI Type Descriptor'o
UNDEF:00001E70                                         ; .data:CInFileStream `RTTI Type Descriptor'o ...
UNDEF:00001E74 ; public: virtual long __stdcall CInFileStream::Read(void *, unsigned int, unsigned int *)
UNDEF:00001E74                 extrn ?Read@CInFileStream@@UAGJPAXIPAI@Z:near
UNDEF:00001E74                                         ; DATA XREF: .rdata:00000E60o
UNDEF:00001E78 ; public: virtual long __stdcall CInFileStream::Seek(__int64, unsigned int, unsigned __int64 *)
UNDEF:00001E78                 extrn ?Seek@CInFileStream@@UAGJ_JIPA_K@Z:near
UNDEF:00001E78                                         ; DATA XREF: .rdata:00000E64o
UNDEF:00001E7C ; public: virtual void * __thiscall CInFileStreamVol::`scalar deleting destructor'(unsigned int)
UNDEF:00001E7C                 extrn ??_GCInFileStreamVol@@UAEPAXI@Z_0:near
UNDEF:00001E80 ; public: virtual void * __thiscall CInFileStreamVol::`vector deleting destructor'(unsigned int)
UNDEF:00001E80                 extrn ??_ECInFileStreamVol@@UAEPAXI@Z:near ; weak
UNDEF:00001E80                                         ; DATA XREF: .rdata:00000E68o
UNDEF:00001E84 ; public: virtual long __stdcall CInFileStream::GetSize(unsigned __int64 *)
UNDEF:00001E84                 extrn ?GetSize@CInFileStream@@UAGJPA_K@Z:near
UNDEF:00001E84                                         ; DATA XREF: .rdata:00000E4Co
UNDEF:00001E88 ; public: virtual long __stdcall CInFileStream::GetProps(unsigned __int64 *, struct _FILETIME *, struct _FILETIME *, struct _FILETIME *, unsigned int *)
UNDEF:00001E88                 extrn ?GetProps@CInFileStream@@UAGJPA_KPAU_FILETIME@@11PAI@Z:near
UNDEF:00001E88                                         ; DATA XREF: .rdata:00000E38o
UNDEF:00001E8C ; public: virtual long __stdcall CInFileStream::GetProps2(struct CStreamFileProps *)
UNDEF:00001E8C                 extrn ?GetProps2@CInFileStream@@UAGJPAUCStreamFileProps@@@Z:near
UNDEF:00001E8C                                         ; DATA XREF: .rdata:00000E24o
UNDEF:00001E90                 extrn _IID_IStreamGetProps2:near
UNDEF:00001E90                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_13DEo
UNDEF:00001E94                 extrn _IID_IStreamGetProps:near
UNDEF:00001E94                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_13AAo
UNDEF:00001E98                 extrn _IID_IStreamGetSize:near
UNDEF:00001E98                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_1376o
UNDEF:00001E9C                 extrn _IID_IInStream:near
UNDEF:00001E9C                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *):loc_1357o
UNDEF:00001EA0 ; const IID IID_IUnknown
UNDEF:00001EA0                 extrn _IID_IUnknown:near
UNDEF:00001EA0                                         ; DATA XREF: CInFileStream::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00001EA4 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001EA4                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00001EA8                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:00001EA8                                         ; DATA XREF: COpenCallbackImp::CryptoGetTextPassword(wchar_t * *)+7Bo
UNDEF:00001EAC ; public: __thiscall UString::UString(class UString const &)
UNDEF:00001EAC                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00001EAC                                         ; CODE XREF: CObjectVector<UString>::Add(UString const &)+5Ap
UNDEF:00001EB0 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001EB0                 extrn _memcpy:near      ; CODE XREF: CRecordVector<bool>::ReserveOnePosition(void)+70p
UNDEF:00001EB0                                         ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)+87p ...
UNDEF:00001EB0
UNDEF:00001EB0