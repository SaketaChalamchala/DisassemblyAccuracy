.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 2E01FD7429472A1E51A27179F6733124
.rdata:00000000 ; Input CRC32 : 57C960CD
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kArcProps      db 2Dh                  ; DATA XREF: NArchive::N7z::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001                 db  16h
.rdata:00000002                 db  0Dh
.rdata:00000003                 db  26h ; &
.rdata:00000004 $SG70958        db 'LZMA2:',0           ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+10Eo
.rdata:0000000B                 align 4
.rdata:0000000C $SG70963        db 'LZMA:',0            ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+176o
.rdata:00000012                 align 4
.rdata:00000014 $SG71095        db 'LZMA',0             ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+2C0o
.rdata:00000019                 align 4
.rdata:0000001C ; char _SG71108[]
.rdata:0000001C $SG71108        db 'lc',0               ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+386o
.rdata:0000001F                 align 10h
.rdata:00000020 ; char _SG71110[]
.rdata:00000020 $SG71110        db 'lp',0               ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3ADo
.rdata:00000023                 align 4
.rdata:00000024 ; char _SG71112[]
.rdata:00000024 $SG71112        db 'pb',0               ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3D4o
.rdata:00000027                 align 4
.rdata:00000028 $SG71115        db 'LZMA2',0            ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3F9o
.rdata:0000002E                 align 10h
.rdata:00000030 $SG71123        db 'PPMD',0             ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+476o
.rdata:00000035                 align 4
.rdata:00000038 ; char _SG71127[]
.rdata:00000038 $SG71127        db ':mem',0             ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+4EBo
.rdata:0000003D                 align 10h
.rdata:00000040 $SG71132        db 'Delta',0            ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+526o
.rdata:00000040                                         ; .xdata$x:__catchsym$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4o ...
.rdata:00000046                 align 4
.rdata:00000048 $SG71137        db 'BCJ2',0             ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+563o
.rdata:0000004D                 align 10h
.rdata:00000050 $SG71140        db 'BCJ',0              ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+57Bo
.rdata:00000054 $SG71143        db '7zAES',0            ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+593o
.rdata:0000005A                 align 4
.rdata:0000005A _rdata          ends
.rdata:0000005A
.text:0000005C ; ===========================================================================
.text:0000005C
.text:0000005C ; Segment type: Pure code
.text:0000005C ; Segment permissions: Read/Execute
.text:0000005C _text           segment para public 'CODE' use32
.text:0000005C                 assume cs:_text
.text:0000005C                 ;org 5Ch
.text:0000005C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000005C
.text:0000005C ; =============== S U B R O U T I N E =======================================
.text:0000005C
.text:0000005C ; Attributes: bp-based frame
.text:0000005C
.text:0000005C ; _DWORD __thiscall NArchive::N7z::CHandler::CHandler(NArchive::N7z::CHandler *__hidden this)
.text:0000005C                 public ??0CHandler@N7z@NArchive@@QAE@XZ
.text:0000005C ??0CHandler@N7z@NArchive@@QAE@XZ proc near
.text:0000005C
.text:0000005C var_10          = dword ptr -10h
.text:0000005C var_C           = dword ptr -0Ch
.text:0000005C var_4           = dword ptr -4
.text:0000005C
.text:0000005C                 push    ebp
.text:0000005D                 mov     ebp, esp
.text:0000005F                 push    0FFFFFFFFh
.text:00000061                 push    offset __ehhandler$??0CHandler@N7z@NArchive@@QAE@XZ
.text:00000066                 mov     eax, large fs:0
.text:0000006C                 push    eax
.text:0000006D                 push    ecx
.text:0000006E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000075                 mov     eax, dword ptr ds:___security_cookie
.text:0000007A                 xor     eax, ebp
.text:0000007C                 push    eax
.text:0000007D                 lea     eax, [ebp+var_C]
.text:00000080                 mov     large fs:0, eax
.text:00000086                 mov     [ebp+var_10], ecx
.text:00000089                 mov     ecx, [ebp+var_10] ; this
.text:0000008C                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00000091                 mov     ecx, [ebp+var_10]
.text:00000094                 add     ecx, 4          ; this
.text:00000097                 call    ??0IArchiveGetRawProps@@QAE@XZ ; IArchiveGetRawProps::IArchiveGetRawProps(void)
.text:0000009C                 mov     ecx, [ebp+var_10]
.text:0000009F                 add     ecx, 8          ; this
.text:000000A2                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:000000A7                 mov     ecx, [ebp+var_10]
.text:000000AA                 add     ecx, 0Ch        ; this
.text:000000AD                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:000000B2                 mov     ecx, [ebp+var_10]
.text:000000B5                 add     ecx, 10h        ; this
.text:000000B8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:000000BD                 mov     ecx, [ebp+var_10]
.text:000000C0                 add     ecx, 18h        ; this
.text:000000C3                 call    ??0COutHandler@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutHandler::COutHandler(void)
.text:000000C8                 mov     [ebp+var_4], 0
.text:000000CF                 mov     eax, [ebp+var_10]
.text:000000D2                 mov     dword ptr [eax], offset ??_7CHandler@N7z@NArchive@@6BIInArchive@@@ ; const NArchive::N7z::CHandler::`vftable'{for `IInArchive'}
.text:000000D8                 mov     ecx, [ebp+var_10]
.text:000000DB                 mov     dword ptr [ecx+4], offset ??_7CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@ ; const NArchive::N7z::CHandler::`vftable'{for `IArchiveGetRawProps'}
.text:000000E2                 mov     edx, [ebp+var_10]
.text:000000E5                 mov     dword ptr [edx+8], offset ??_7CHandler@N7z@NArchive@@6BISetProperties@@@ ; const NArchive::N7z::CHandler::`vftable'{for `ISetProperties'}
.text:000000EC                 mov     eax, [ebp+var_10]
.text:000000EF                 mov     dword ptr [eax+0Ch], offset ??_7CHandler@N7z@NArchive@@6BIOutArchive@@@ ; const NArchive::N7z::CHandler::`vftable'{for `IOutArchive'}
.text:000000F6                 mov     ecx, [ebp+var_10]
.text:000000F9                 add     ecx, 88h ; 'ê'
.text:000000FF                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00000104                 mov     byte ptr [ebp+var_4], 1
.text:00000108                 mov     ecx, [ebp+var_10]
.text:0000010B                 add     ecx, 90h ; 'É'  ; this
.text:00000111                 call    ??0CDbEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDbEx::CDbEx(void)
.text:00000116                 mov     byte ptr [ebp+var_4], 2
.text:0000011A                 mov     ecx, [ebp+var_10]
.text:0000011D                 add     ecx, 1CCh
.text:00000123                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000128                 mov     byte ptr [ebp+var_4], 3
.text:0000012C                 mov     ecx, [ebp+var_10]
.text:0000012F                 add     ecx, 1D8h
.text:00000135                 call    ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>(void)
.text:0000013A                 mov     byte ptr [ebp+var_4], 4
.text:0000013E                 mov     ecx, [ebp+var_10]
.text:00000141                 add     ecx, 1E4h
.text:00000147                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000014C                 mov     ecx, [ebp+var_10]
.text:0000014F                 mov     byte ptr [ecx+1C8h], 0
.text:00000156                 mov     edx, [ebp+var_10]
.text:00000159                 mov     byte ptr [edx+1C9h], 0
.text:00000160                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000167                 mov     eax, [ebp+var_10]
.text:0000016A                 mov     ecx, [ebp+var_C]
.text:0000016D                 mov     large fs:0, ecx
.text:00000174                 pop     ecx
.text:00000175                 add     esp, 10h
.text:00000178                 cmp     ebp, esp
.text:0000017A                 call    __RTC_CheckEsp
.text:0000017F                 mov     esp, ebp
.text:00000181                 pop     ebp
.text:00000182                 retn
.text:00000182 ??0CHandler@N7z@NArchive@@QAE@XZ endp
.text:00000182
.text:00000182 ; ---------------------------------------------------------------------------
.text:00000183                 db 9 dup(0CCh)
.text:0000018C
.text:0000018C ; =============== S U B R O U T I N E =======================================
.text:0000018C
.text:0000018C ; Attributes: bp-based frame
.text:0000018C
.text:0000018C ; __int32 __stdcall NArchive::N7z::CHandler::GetNumberOfItems(NArchive::N7z::CHandler *this, unsigned int *)
.text:0000018C                 public ?GetNumberOfItems@CHandler@N7z@NArchive@@UAGJPAI@Z
.text:0000018C ?GetNumberOfItems@CHandler@N7z@NArchive@@UAGJPAI@Z proc near
.text:0000018C                                         ; DATA XREF: .rdata:0000207Co
.text:0000018C
.text:0000018C this            = dword ptr  8
.text:0000018C arg_4           = dword ptr  0Ch
.text:0000018C
.text:0000018C                 push    ebp
.text:0000018D                 mov     ebp, esp
.text:0000018F                 mov     ecx, [ebp+this]
.text:00000192                 add     ecx, 0E8h ; 'F'
.text:00000198                 call    ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size(void)
.text:0000019D                 mov     ecx, [ebp+arg_4]
.text:000001A0                 mov     [ecx], eax
.text:000001A2                 xor     eax, eax
.text:000001A4                 cmp     ebp, esp
.text:000001A6                 call    __RTC_CheckEsp
.text:000001AB                 pop     ebp
.text:000001AC                 retn    8
.text:000001AC ?GetNumberOfItems@CHandler@N7z@NArchive@@UAGJPAI@Z endp
.text:000001AC
.text:000001AC ; ---------------------------------------------------------------------------
.text:000001AF                 db 0Dh dup(0CCh)
.text:000001BC
.text:000001BC ; =============== S U B R O U T I N E =======================================
.text:000001BC
.text:000001BC ; Attributes: bp-based frame
.text:000001BC
.text:000001BC ; __int32 __stdcall NArchive::N7z::CHandler::GetNumberOfArchiveProperties(NArchive::N7z::CHandler *this, unsigned int *)
.text:000001BC                 public ?GetNumberOfArchiveProperties@CHandler@N7z@NArchive@@UAGJPAI@Z
.text:000001BC ?GetNumberOfArchiveProperties@CHandler@N7z@NArchive@@UAGJPAI@Z proc near
.text:000001BC                                         ; DATA XREF: .rdata:00002094o
.text:000001BC
.text:000001BC this            = dword ptr  8
.text:000001BC arg_4           = dword ptr  0Ch
.text:000001BC
.text:000001BC                 push    ebp
.text:000001BD                 mov     ebp, esp
.text:000001BF                 mov     eax, [ebp+arg_4]
.text:000001C2                 mov     dword ptr [eax], 4
.text:000001C8                 xor     eax, eax
.text:000001CA                 pop     ebp
.text:000001CB                 retn    8
.text:000001CB ?GetNumberOfArchiveProperties@CHandler@N7z@NArchive@@UAGJPAI@Z endp
.text:000001CB
.text:000001CB ; ---------------------------------------------------------------------------
.text:000001CE                 db 0Eh dup(0CCh)
.text:000001DC
.text:000001DC ; =============== S U B R O U T I N E =======================================
.text:000001DC
.text:000001DC ; Attributes: bp-based frame
.text:000001DC
.text:000001DC ; __int32 __stdcall NArchive::N7z::CHandler::GetArchivePropertyInfo(NArchive::N7z::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000001DC                 public ?GetArchivePropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000001DC ?GetArchivePropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000001DC                                         ; DATA XREF: .rdata:00002098o
.text:000001DC
.text:000001DC this            = dword ptr  8
.text:000001DC arg_4           = dword ptr  0Ch
.text:000001DC arg_8           = dword ptr  10h
.text:000001DC arg_C           = dword ptr  14h
.text:000001DC arg_10          = dword ptr  18h
.text:000001DC
.text:000001DC                 push    ebp
.text:000001DD                 mov     ebp, esp
.text:000001DF                 cmp     [ebp+arg_4], 4
.text:000001E3                 jb      short loc_1EC
.text:000001E5                 mov     eax, 80070057h
.text:000001EA                 jmp     short loc_219
.text:000001EC ; ---------------------------------------------------------------------------
.text:000001EC
.text:000001EC loc_1EC:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000001EC                 mov     eax, [ebp+arg_4]
.text:000001EF                 movzx   ecx, _kArcProps[eax]
.text:000001F6                 mov     edx, [ebp+arg_C]
.text:000001F9                 mov     [edx], ecx
.text:000001FB                 mov     eax, [ebp+arg_C]
.text:000001FE                 mov     ecx, [eax]
.text:00000200                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000208                 mov     eax, [ebp+arg_10]
.text:0000020B                 mov     [eax], dx
.text:0000020E                 mov     ecx, [ebp+arg_8]
.text:00000211                 mov     dword ptr [ecx], 0
.text:00000217                 xor     eax, eax
.text:00000219
.text:00000219 loc_219:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000219                 pop     ebp
.text:0000021A                 retn    14h
.text:0000021A ?GetArchivePropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000021A
.text:0000021A ; ---------------------------------------------------------------------------
.text:0000021D                 db 0Fh dup(0CCh)
.text:0000022C
.text:0000022C ; =============== S U B R O U T I N E =======================================
.text:0000022C
.text:0000022C ; Attributes: bp-based frame
.text:0000022C
.text:0000022C ; void __thiscall NArchive::N7z::CHandler::AddMethodName(NArchive::N7z::CHandler *this, struct AString *, unsigned __int64)
.text:0000022C                 public ?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z
.text:0000022C ?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z proc near
.text:0000022C                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1B0p
.text:0000022C
.text:0000022C var_24          = dword ptr -24h
.text:0000022C var_20          = dword ptr -20h
.text:0000022C var_1C          = dword ptr -1Ch
.text:0000022C var_18          = dword ptr -18h
.text:0000022C var_14          = dword ptr -14h
.text:0000022C var_10          = dword ptr -10h
.text:0000022C var_C           = dword ptr -0Ch
.text:0000022C var_4           = dword ptr -4
.text:0000022C arg_0           = dword ptr  8
.text:0000022C arg_4           = qword ptr  0Ch
.text:0000022C
.text:0000022C                 push    ebp
.text:0000022D                 mov     ebp, esp
.text:0000022F                 push    0FFFFFFFFh
.text:00000231                 push    offset __ehhandler$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z
.text:00000236                 mov     eax, large fs:0
.text:0000023C                 push    eax
.text:0000023D                 sub     esp, 18h
.text:00000240                 mov     eax, 0CCCCCCCCh
.text:00000245                 mov     [ebp+var_24], eax
.text:00000248                 mov     [ebp+var_20], eax
.text:0000024B                 mov     [ebp+var_1C], eax
.text:0000024E                 mov     [ebp+var_18], eax
.text:00000251                 mov     [ebp+var_14], eax
.text:00000254                 mov     [ebp+var_10], eax
.text:00000257                 mov     eax, dword ptr ds:___security_cookie
.text:0000025C                 xor     eax, ebp
.text:0000025E                 push    eax
.text:0000025F                 lea     eax, [ebp+var_C]
.text:00000262                 mov     large fs:0, eax
.text:00000268                 mov     [ebp+var_10], ecx
.text:0000026B                 lea     ecx, [ebp+var_20]
.text:0000026E                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000273                 mov     [ebp+var_4], 0
.text:0000027A                 lea     eax, [ebp+var_20]
.text:0000027D                 push    eax             ; struct AString *
.text:0000027E                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:00000281                 push    ecx
.text:00000282                 mov     edx, dword ptr [ebp+arg_4]
.text:00000285                 push    edx             ; unsigned __int64
.text:00000286                 call    ?FindMethod@@YG_N_KAAVAString@@@Z ; FindMethod(unsigned __int64,AString &)
.text:0000028B                 lea     ecx, [ebp+var_20] ; this
.text:0000028E                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000293                 movzx   eax, al
.text:00000296                 test    eax, eax
.text:00000298                 jz      short loc_2AD
.text:0000029A                 mov     ecx, dword ptr [ebp+arg_4+4]
.text:0000029D                 push    ecx
.text:0000029E                 mov     edx, dword ptr [ebp+arg_4]
.text:000002A1                 push    edx
.text:000002A2                 mov     eax, [ebp+arg_0]
.text:000002A5                 push    eax
.text:000002A6                 call    ?ConvertMethodIdToString@N7z@NArchive@@YGXAAVAString@@_K@Z ; NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)
.text:000002AB                 jmp     short loc_2B9
.text:000002AD ; ---------------------------------------------------------------------------
.text:000002AD
.text:000002AD loc_2AD:                                ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+6Cj
.text:000002AD                 lea     ecx, [ebp+var_20]
.text:000002B0                 push    ecx
.text:000002B1                 mov     ecx, [ebp+arg_0]
.text:000002B4                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:000002B9
.text:000002B9 loc_2B9:                                ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+7Fj
.text:000002B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002C0                 lea     ecx, [ebp+var_20] ; this
.text:000002C3                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000002C8                 push    edx
.text:000002C9                 mov     ecx, ebp
.text:000002CB                 push    eax
.text:000002CC                 lea     edx, $LN9
.text:000002D2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002D7                 pop     eax
.text:000002D8                 pop     edx
.text:000002D9                 mov     ecx, [ebp+var_C]
.text:000002DC                 mov     large fs:0, ecx
.text:000002E3                 pop     ecx
.text:000002E4                 add     esp, 24h
.text:000002E7                 cmp     ebp, esp
.text:000002E9                 call    __RTC_CheckEsp
.text:000002EE                 mov     esp, ebp
.text:000002F0                 pop     ebp
.text:000002F1                 retn    0Ch
.text:000002F1 ?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z endp
.text:000002F1
.text:000002F1 ; ---------------------------------------------------------------------------
.text:000002F4 $LN9            dd 1                    ; DATA XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+A0o
.text:000002F8                 dd offset $LN8
.text:000002FC $LN8            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000002F8o
.text:00000304                 dd offset $LN6          ; "name"
.text:00000308 $LN6            db 'name',0             ; DATA XREF: .text:00000304o
.text:0000030D                 db 0Fh dup(0CCh)
.text:0000031C
.text:0000031C ; =============== S U B R O U T I N E =======================================
.text:0000031C
.text:0000031C ; Attributes: bp-based frame
.text:0000031C
.text:0000031C ; void __stdcall NArchive::N7z::ConvertMethodIdToString(class AString &, unsigned __int64)
.text:0000031C ?ConvertMethodIdToString@N7z@NArchive@@YGXAAVAString@@_K@Z proc near
.text:0000031C                                         ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+7Ap
.text:0000031C
.text:0000031C var_34          = dword ptr -34h
.text:0000031C var_2C          = byte ptr -2Ch
.text:0000031C var_8           = dword ptr -8
.text:0000031C var_4           = dword ptr -4
.text:0000031C arg_0           = dword ptr  8
.text:0000031C arg_4           = dword ptr  0Ch
.text:0000031C arg_8           = dword ptr  10h
.text:0000031C
.text:0000031C                 push    ebp
.text:0000031D                 mov     ebp, esp
.text:0000031F                 sub     esp, 34h
.text:00000322                 push    esi
.text:00000323                 push    edi
.text:00000324                 lea     edi, [ebp+var_34]
.text:00000327                 mov     ecx, 0Dh
.text:0000032C                 mov     eax, 0CCCCCCCCh
.text:00000331                 rep stosd
.text:00000333                 mov     eax, dword ptr ds:___security_cookie
.text:00000338                 xor     eax, ebp
.text:0000033A                 mov     [ebp+var_4], eax
.text:0000033D                 mov     [ebp+var_8], 20h ; ' '
.text:00000344                 mov     [ebp+var_34], 1Fh
.text:0000034B                 mov     eax, [ebp+var_34]
.text:0000034E                 mov     [ebp+eax+var_2C], 0
.text:00000353                 mov     ecx, [ebp+var_34]
.text:00000356                 lea     esi, [ebp+ecx+var_2C]
.text:0000035A                 mov     edx, [ebp+arg_8]
.text:0000035D                 push    edx
.text:0000035E                 mov     eax, [ebp+arg_4]
.text:00000361                 push    eax
.text:00000362                 mov     ecx, [ebp+var_34]
.text:00000365                 lea     edx, [ebp+ecx+var_2C]
.text:00000369                 push    edx
.text:0000036A                 call    ?ConvertMethodIdToString_Back@N7z@NArchive@@YGIPAD_K@Z ; NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)
.text:0000036F                 sub     esi, eax
.text:00000371                 push    esi
.text:00000372                 mov     ecx, [ebp+arg_0]
.text:00000375                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000037A                 push    edx
.text:0000037B                 mov     ecx, ebp
.text:0000037D                 push    eax
.text:0000037E                 lea     edx, $LN5
.text:00000384                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000389                 pop     eax
.text:0000038A                 pop     edx
.text:0000038B                 pop     edi
.text:0000038C                 pop     esi
.text:0000038D                 mov     ecx, [ebp+var_4]
.text:00000390                 xor     ecx, ebp
.text:00000392                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000397                 add     esp, 34h
.text:0000039A                 cmp     ebp, esp
.text:0000039C                 call    __RTC_CheckEsp
.text:000003A1                 mov     esp, ebp
.text:000003A3                 pop     ebp
.text:000003A4                 retn    0Ch
.text:000003A4 ?ConvertMethodIdToString@N7z@NArchive@@YGXAAVAString@@_K@Z endp
.text:000003A4
.text:000003A4 ; ---------------------------------------------------------------------------
.text:000003A7                 align 4
.text:000003A8 $LN5            dd 1                    ; DATA XREF: NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)+62o
.text:000003AC                 dd offset $LN4
.text:000003B0 $LN4            dd 0FFFFFFD4h, 20h      ; DATA XREF: .text:000003ACo
.text:000003B8                 dd offset $LN3
.text:000003BC $LN3            dd 0CCCC0073h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:000003B8o
.text:000003CC
.text:000003CC ; =============== S U B R O U T I N E =======================================
.text:000003CC
.text:000003CC ; Attributes: bp-based frame
.text:000003CC
.text:000003CC ; unsigned int __stdcall NArchive::N7z::ConvertMethodIdToString_Back(char *, unsigned __int64)
.text:000003CC ?ConvertMethodIdToString_Back@N7z@NArchive@@YGIPAD_K@Z proc near
.text:000003CC                                         ; CODE XREF: NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)+4Ep
.text:000003CC                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+781p
.text:000003CC
.text:000003CC var_4           = dword ptr -4
.text:000003CC arg_0           = dword ptr  8
.text:000003CC arg_4           = dword ptr  0Ch
.text:000003CC arg_8           = dword ptr  10h
.text:000003CC
.text:000003CC                 push    ebp
.text:000003CD                 mov     ebp, esp
.text:000003CF                 push    ecx
.text:000003D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000003D7                 mov     [ebp+var_4], 0
.text:000003DE
.text:000003DE loc_3DE:                                ; CODE XREF: NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)+78j
.text:000003DE                 mov     eax, [ebp+var_4]
.text:000003E1                 sub     eax, 1
.text:000003E4                 mov     [ebp+var_4], eax
.text:000003E7                 mov     ecx, [ebp+arg_4]
.text:000003EA                 and     ecx, 0Fh
.text:000003ED                 push    ecx
.text:000003EE                 call    ?GetHex@N7z@NArchive@@YGDI@Z ; NArchive::N7z::GetHex(uint)
.text:000003F3                 mov     edx, [ebp+arg_0]
.text:000003F6                 add     edx, [ebp+var_4]
.text:000003F9                 mov     [edx], al
.text:000003FB                 mov     eax, [ebp+arg_4]
.text:000003FE                 mov     edx, [ebp+arg_8]
.text:00000401                 mov     cl, 4
.text:00000403                 call    __aullshr
.text:00000408                 mov     [ebp+arg_4], eax
.text:0000040B                 mov     [ebp+arg_8], edx
.text:0000040E                 mov     eax, [ebp+var_4]
.text:00000411                 sub     eax, 1
.text:00000414                 mov     [ebp+var_4], eax
.text:00000417                 mov     ecx, [ebp+arg_4]
.text:0000041A                 and     ecx, 0Fh
.text:0000041D                 push    ecx
.text:0000041E                 call    ?GetHex@N7z@NArchive@@YGDI@Z ; NArchive::N7z::GetHex(uint)
.text:00000423                 mov     edx, [ebp+arg_0]
.text:00000426                 add     edx, [ebp+var_4]
.text:00000429                 mov     [edx], al
.text:0000042B                 mov     eax, [ebp+arg_4]
.text:0000042E                 mov     edx, [ebp+arg_8]
.text:00000431                 mov     cl, 4
.text:00000433                 call    __aullshr
.text:00000438                 mov     [ebp+arg_4], eax
.text:0000043B                 mov     [ebp+arg_8], edx
.text:0000043E                 mov     eax, [ebp+arg_4]
.text:00000441                 or      eax, [ebp+arg_8]
.text:00000444                 jnz     short loc_3DE
.text:00000446                 mov     eax, [ebp+var_4]
.text:00000449                 neg     eax
.text:0000044B                 add     esp, 4
.text:0000044E                 cmp     ebp, esp
.text:00000450                 call    __RTC_CheckEsp
.text:00000455                 mov     esp, ebp
.text:00000457                 pop     ebp
.text:00000458                 retn    0Ch
.text:00000458 ?ConvertMethodIdToString_Back@N7z@NArchive@@YGIPAD_K@Z endp
.text:00000458
.text:00000458 ; ---------------------------------------------------------------------------
.text:0000045B                 align 4
.text:0000045C
.text:0000045C ; =============== S U B R O U T I N E =======================================
.text:0000045C
.text:0000045C ; Attributes: bp-based frame
.text:0000045C
.text:0000045C ; char __stdcall NArchive::N7z::GetHex(unsigned int)
.text:0000045C ?GetHex@N7z@NArchive@@YGDI@Z proc near  ; CODE XREF: NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)+22p
.text:0000045C                                         ; NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)+52p
.text:0000045C
.text:0000045C var_4           = dword ptr -4
.text:0000045C arg_0           = dword ptr  8
.text:0000045C
.text:0000045C                 push    ebp
.text:0000045D                 mov     ebp, esp
.text:0000045F                 push    ecx
.text:00000460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000467                 cmp     [ebp+arg_0], 0Ah
.text:0000046B                 jnb     short loc_478
.text:0000046D                 mov     eax, [ebp+arg_0]
.text:00000470                 add     eax, 30h ; '0'
.text:00000473                 mov     [ebp+var_4], eax
.text:00000476                 jmp     short loc_481
.text:00000478 ; ---------------------------------------------------------------------------
.text:00000478
.text:00000478 loc_478:                                ; CODE XREF: NArchive::N7z::GetHex(uint)+Fj
.text:00000478                 mov     ecx, [ebp+arg_0]
.text:0000047B                 add     ecx, 37h ; '7'
.text:0000047E                 mov     [ebp+var_4], ecx
.text:00000481
.text:00000481 loc_481:                                ; CODE XREF: NArchive::N7z::GetHex(uint)+1Aj
.text:00000481                 mov     al, byte ptr [ebp+var_4]
.text:00000484                 mov     esp, ebp
.text:00000486                 pop     ebp
.text:00000487                 retn    4
.text:00000487 ?GetHex@N7z@NArchive@@YGDI@Z endp
.text:00000487
.text:00000487 ; ---------------------------------------------------------------------------
.text:0000048A                 align 4
.text:0000048C
.text:0000048C ; =============== S U B R O U T I N E =======================================
.text:0000048C
.text:0000048C ; Attributes: bp-based frame
.text:0000048C
.text:0000048C ; __int32 __cdecl NArchive::N7z::CHandler::GetArchiveProperty(NArchive::N7z::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:0000048C                 public ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000048C ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:0000048C                                         ; DATA XREF: .rdata:00002088o
.text:0000048C
.text:0000048C var_98          = dword ptr -98h
.text:0000048C var_91          = byte ptr -91h
.text:0000048C var_90          = dword ptr -90h
.text:0000048C var_8C          = dword ptr -8Ch
.text:0000048C var_88          = dword ptr -88h
.text:0000048C var_84          = dword ptr -84h
.text:0000048C var_80          = dword ptr -80h
.text:0000048C var_7C          = dword ptr -7Ch
.text:0000048C var_74          = dword ptr -74h
.text:0000048C var_70          = dword ptr -70h
.text:0000048C var_6C          = dword ptr -6Ch
.text:0000048C var_64          = byte ptr -64h
.text:0000048C var_50          = qword ptr -50h
.text:0000048C var_48          = dword ptr -48h
.text:0000048C var_44          = dword ptr -44h
.text:0000048C var_3C          = byte ptr -3Ch
.text:0000048C var_28          = byte ptr -28h
.text:0000048C var_14          = dword ptr -14h
.text:0000048C var_10          = dword ptr -10h
.text:0000048C var_C           = dword ptr -0Ch
.text:0000048C var_4           = dword ptr -4
.text:0000048C this            = dword ptr  8
.text:0000048C arg_4           = dword ptr  0Ch
.text:0000048C arg_8           = dword ptr  10h
.text:0000048C
.text:0000048C ; FUNCTION CHUNK AT .text:00000839 SIZE 0000003C BYTES
.text:0000048C
.text:0000048C                 push    ebp
.text:0000048D                 mov     ebp, esp
.text:0000048F                 push    0FFFFFFFFh
.text:00000491                 push    offset __ehhandler$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000496                 mov     eax, large fs:0
.text:0000049C                 push    eax
.text:0000049D                 push    ecx
.text:0000049E                 sub     esp, 88h
.text:000004A4                 push    ebx
.text:000004A5                 push    esi
.text:000004A6                 push    edi
.text:000004A7                 lea     edi, [ebp+var_98]
.text:000004AD                 mov     ecx, 22h ; '"'
.text:000004B2                 mov     eax, 0CCCCCCCCh
.text:000004B7                 rep stosd
.text:000004B9                 mov     eax, dword ptr ds:___security_cookie
.text:000004BE                 xor     eax, ebp
.text:000004C0                 mov     [ebp+var_14], eax
.text:000004C3                 push    eax
.text:000004C4                 lea     eax, [ebp+var_C]
.text:000004C7                 mov     large fs:0, eax
.text:000004CD                 mov     [ebp+var_10], esp
.text:000004D0                 mov     [ebp+var_4], 0
.text:000004D7                 lea     ecx, [ebp+var_28] ; this
.text:000004DA                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000004DF                 mov     [ebp+var_7C], eax
.text:000004E2                 mov     byte ptr [ebp+var_4], 1
.text:000004E6                 mov     eax, [ebp+arg_4]
.text:000004E9                 mov     [ebp+var_80], eax
.text:000004EC                 mov     ecx, [ebp+var_80]
.text:000004EF                 sub     ecx, 0Dh
.text:000004F2                 mov     [ebp+var_80], ecx
.text:000004F5                 cmp     [ebp+var_80], 3Bh ; ';' ; switch 60 cases
.text:000004F9                 ja      $LN26           ; jumptable 00000509 default case
.text:000004FF                 mov     edx, [ebp+var_80]
.text:00000502                 movzx   eax, ds:$LN38[edx]
.text:00000509                 jmp     ds:$LN45[eax*4] ; switch jump
.text:00000510 ; ---------------------------------------------------------------------------
.text:00000510
.text:00000510 $LN25:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:00000510                                         ; DATA XREF: .text:$LN45o
.text:00000510                 lea     ecx, [ebp+var_3C] ; jumptable 00000509 case 9
.text:00000513                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000518                 mov     [ebp+var_84], eax
.text:0000051E                 mov     byte ptr [ebp+var_4], 2
.text:00000522                 mov     ecx, [ebp+this]
.text:00000525                 add     ecx, 0D4h ; '+'
.text:0000052B                 mov     [ebp+var_44], ecx
.text:0000052E                 mov     [ebp+var_48], 0
.text:00000535                 jmp     short loc_540
.text:00000537 ; ---------------------------------------------------------------------------
.text:00000537
.text:00000537 loc_537:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *):loc_641j
.text:00000537                 mov     edx, [ebp+var_48]
.text:0000053A                 add     edx, 1
.text:0000053D                 mov     [ebp+var_48], edx
.text:00000540
.text:00000540 loc_540:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+A9j
.text:00000540                 mov     ecx, [ebp+var_44]
.text:00000543                 add     ecx, 8
.text:00000546                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000054B                 mov     [ebp+var_88], eax
.text:00000551                 mov     eax, [ebp+var_48]
.text:00000554                 cmp     eax, [ebp+var_88]
.text:0000055A                 jnb     loc_646
.text:00000560                 mov     ecx, [ebp+var_48]
.text:00000563                 push    ecx
.text:00000564                 mov     ecx, [ebp+var_44]
.text:00000567                 add     ecx, 8
.text:0000056A                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000056F                 mov     [ebp+var_8C], eax
.text:00000575                 mov     edx, [ebp+var_8C]
.text:0000057B                 mov     eax, [edx]
.text:0000057D                 mov     dword ptr [ebp+var_50], eax
.text:00000580                 mov     ecx, [edx+4]
.text:00000583                 mov     dword ptr [ebp+var_50+4], ecx
.text:00000586                 lea     ecx, [ebp+var_3C] ; this
.text:00000589                 call    ?Add_Space_if_NotEmpty@AString@@QAEXXZ ; AString::Add_Space_if_NotEmpty(void)
.text:0000058E                 cmp     dword ptr [ebp+var_50], 21h ; '!'
.text:00000592                 jnz     short loc_5F3
.text:00000594                 cmp     dword ptr [ebp+var_50+4], 0
.text:00000598                 jnz     short loc_5F3
.text:0000059A                 push    offset $SG70958 ; "LZMA2:"
.text:0000059F                 lea     ecx, [ebp+var_3C]
.text:000005A2                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000005A7                 mov     edx, [ebp+var_44]
.text:000005AA                 movzx   eax, byte ptr [edx]
.text:000005AD                 and     eax, 1
.text:000005B0                 jnz     short loc_5C9
.text:000005B2                 lea     ecx, [ebp+var_64]
.text:000005B5                 push    ecx             ; char *
.text:000005B6                 mov     edx, [ebp+var_44]
.text:000005B9                 movzx   eax, byte ptr [edx]
.text:000005BC                 sar     eax, 1
.text:000005BE                 add     eax, 0Ch
.text:000005C1                 push    eax             ; unsigned int
.text:000005C2                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000005C7                 jmp     short loc_5E5
.text:000005C9 ; ---------------------------------------------------------------------------
.text:000005C9
.text:000005C9 loc_5C9:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+124j
.text:000005C9                 mov     ecx, [ebp+var_44]
.text:000005CC                 movzx   ecx, byte ptr [ecx]
.text:000005CF                 sar     ecx, 1
.text:000005D1                 add     ecx, 0Bh
.text:000005D4                 mov     edx, 3
.text:000005D9                 shl     edx, cl
.text:000005DB                 push    edx             ; unsigned int
.text:000005DC                 lea     eax, [ebp+var_64]
.text:000005DF                 push    eax             ; char *
.text:000005E0                 call    ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z ; NArchive::N7z::GetStringForSizeValue(char *,uint)
.text:000005E5
.text:000005E5 loc_5E5:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+13Bj
.text:000005E5                 lea     ecx, [ebp+var_64]
.text:000005E8                 push    ecx
.text:000005E9                 lea     ecx, [ebp+var_3C]
.text:000005EC                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:000005F1                 jmp     short loc_641
.text:000005F3 ; ---------------------------------------------------------------------------
.text:000005F3
.text:000005F3 loc_5F3:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+106j
.text:000005F3                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+10Cj
.text:000005F3                 cmp     dword ptr [ebp+var_50], 30101h
.text:000005FA                 jnz     short loc_62D
.text:000005FC                 cmp     dword ptr [ebp+var_50+4], 0
.text:00000600                 jnz     short loc_62D
.text:00000602                 push    offset $SG70963 ; "LZMA:"
.text:00000607                 lea     ecx, [ebp+var_3C]
.text:0000060A                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000060F                 mov     edx, [ebp+var_44]
.text:00000612                 mov     eax, [edx+4]
.text:00000615                 push    eax             ; unsigned int
.text:00000616                 lea     ecx, [ebp+var_64]
.text:00000619                 push    ecx             ; char *
.text:0000061A                 call    ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z ; NArchive::N7z::GetStringForSizeValue(char *,uint)
.text:0000061F                 lea     edx, [ebp+var_64]
.text:00000622                 push    edx
.text:00000623                 lea     ecx, [ebp+var_3C]
.text:00000626                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:0000062B                 jmp     short loc_641
.text:0000062D ; ---------------------------------------------------------------------------
.text:0000062D
.text:0000062D loc_62D:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+16Ej
.text:0000062D                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+174j
.text:0000062D                 mov     eax, dword ptr [ebp+var_50+4]
.text:00000630                 push    eax
.text:00000631                 mov     ecx, dword ptr [ebp+var_50]
.text:00000634                 push    ecx             ; unsigned __int64
.text:00000635                 lea     edx, [ebp+var_3C]
.text:00000638                 push    edx             ; struct AString *
.text:00000639                 mov     ecx, [ebp+this] ; this
.text:0000063C                 call    ?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z ; NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)
.text:00000641
.text:00000641 loc_641:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+165j
.text:00000641                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+19Fj
.text:00000641                 jmp     loc_537
.text:00000646 ; ---------------------------------------------------------------------------
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+CEj
.text:00000646                 lea     ecx, [ebp+var_3C]
.text:00000649                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000064E                 mov     [ebp+var_90], eax
.text:00000654                 mov     eax, [ebp+var_90]
.text:0000065A                 push    eax
.text:0000065B                 lea     ecx, [ebp+var_28]
.text:0000065E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000663                 mov     byte ptr [ebp+var_4], 1
.text:00000667                 lea     ecx, [ebp+var_3C] ; this
.text:0000066A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000066F                 jmp     $LN26           ; jumptable 00000509 default case
.text:00000674 ; ---------------------------------------------------------------------------
.text:00000674
.text:00000674 $LN15:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:00000674                                         ; DATA XREF: .text:$LN45o
.text:00000674                 mov     ecx, [ebp+this] ; jumptable 00000509 case 0
.text:00000677                 add     ecx, 90h ; 'É'  ; this
.text:0000067D                 call    ?IsSolid@CDatabase@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CDatabase::IsSolid(void)
.text:00000682                 mov     [ebp+var_91], al
.text:00000688                 movzx   ecx, [ebp+var_91]
.text:0000068F                 push    ecx
.text:00000690                 lea     ecx, [ebp+var_28]
.text:00000693                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:00000698                 jmp     $LN26           ; jumptable 00000509 default case
.text:0000069D ; ---------------------------------------------------------------------------
.text:0000069D
.text:0000069D $LN14:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:0000069D                                         ; DATA XREF: .text:$LN45o
.text:0000069D                 mov     edx, [ebp+this] ; jumptable 00000509 case 25
.text:000006A0                 mov     eax, [edx+94h]
.text:000006A6                 push    eax
.text:000006A7                 lea     ecx, [ebp+var_28]
.text:000006AA                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000006AF                 jmp     $LN26           ; jumptable 00000509 default case
.text:000006B4 ; ---------------------------------------------------------------------------
.text:000006B4
.text:000006B4 $LN13:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:000006B4                                         ; DATA XREF: .text:$LN45o
.text:000006B4                 mov     ecx, [ebp+this] ; jumptable 00000509 case 32
.text:000006B7                 mov     edx, [ecx+1B4h]
.text:000006BD                 push    edx
.text:000006BE                 mov     eax, [ecx+1B0h]
.text:000006C4                 push    eax
.text:000006C5                 lea     ecx, [ebp+var_28]
.text:000006C8                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000006CD                 jmp     $LN26           ; jumptable 00000509 default case
.text:000006D2 ; ---------------------------------------------------------------------------
.text:000006D2
.text:000006D2 $LN12:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:000006D2                                         ; DATA XREF: .text:$LN45o
.text:000006D2                 mov     ecx, [ebp+this] ; jumptable 00000509 case 31
.text:000006D5                 mov     edx, [ecx+1BCh]
.text:000006DB                 push    edx
.text:000006DC                 mov     eax, [ecx+1B8h]
.text:000006E2                 push    eax
.text:000006E3                 lea     ecx, [ebp+var_28]
.text:000006E6                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000006EB                 jmp     $LN26           ; jumptable 00000509 default case
.text:000006F0 ; ---------------------------------------------------------------------------
.text:000006F0
.text:000006F0 $LN11:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:000006F0                                         ; DATA XREF: .text:$LN45o
.text:000006F0                 mov     ecx, [ebp+this] ; jumptable 00000509 case 23
.text:000006F3                 mov     [ebp+var_98], ecx
.text:000006F9                 mov     edx, [ebp+var_98]
.text:000006FF                 mov     eax, [ebp+var_98]
.text:00000705                 mov     ecx, [edx+178h]
.text:0000070B                 or      ecx, [eax+17Ch]
.text:00000711                 jz      short loc_72C
.text:00000713                 mov     edx, [ebp+this]
.text:00000716                 mov     eax, [edx+17Ch]
.text:0000071C                 push    eax
.text:0000071D                 mov     ecx, [edx+178h]
.text:00000723                 push    ecx
.text:00000724                 lea     ecx, [ebp+var_28]
.text:00000727                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:0000072C
.text:0000072C loc_72C:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+285j
.text:0000072C                 jmp     $LN26           ; jumptable 00000509 default case
.text:00000731 ; ---------------------------------------------------------------------------
.text:00000731
.text:00000731 $LN9_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:00000731                                         ; DATA XREF: .text:$LN45o
.text:00000731                 mov     [ebp+var_6C], 0 ; jumptable 00000509 case 59
.text:00000738                 mov     edx, [ebp+this]
.text:0000073B                 movzx   eax, byte ptr [edx+1C4h]
.text:00000742                 test    eax, eax
.text:00000744                 jz      short loc_74F
.text:00000746                 mov     ecx, [ebp+var_6C]
.text:00000749                 or      ecx, 2
.text:0000074C                 mov     [ebp+var_6C], ecx
.text:0000074F
.text:0000074F loc_74F:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2B8j
.text:0000074F                 mov     edx, [ebp+this]
.text:00000752                 movzx   eax, byte ptr [edx+1C5h]
.text:00000759                 test    eax, eax
.text:0000075B                 jz      short loc_769
.text:0000075D                 mov     ecx, [ebp+var_6C]
.text:00000760                 or      ecx, 100h
.text:00000766                 mov     [ebp+var_6C], ecx
.text:00000769
.text:00000769 loc_769:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2CFj
.text:00000769                 cmp     [ebp+var_6C], 0
.text:0000076D                 jz      short loc_77B
.text:0000076F                 mov     edx, [ebp+var_6C]
.text:00000772                 push    edx
.text:00000773                 lea     ecx, [ebp+var_28]
.text:00000776                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:0000077B
.text:0000077B loc_77B:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2E1j
.text:0000077B                 jmp     short $LN26     ; jumptable 00000509 default case
.text:0000077D ; ---------------------------------------------------------------------------
.text:0000077D
.text:0000077D $LN5_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj
.text:0000077D                                         ; DATA XREF: .text:$LN45o
.text:0000077D                 mov     [ebp+var_70], 0 ; jumptable 00000509 case 58
.text:00000784                 mov     eax, [ebp+this]
.text:00000787                 movzx   ecx, byte ptr [eax+1C0h]
.text:0000078E                 test    ecx, ecx
.text:00000790                 jnz     short loc_79B
.text:00000792                 mov     edx, [ebp+var_70]
.text:00000795                 or      edx, 1
.text:00000798                 mov     [ebp+var_70], edx
.text:0000079B
.text:0000079B loc_79B:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+304j
.text:0000079B                 mov     eax, [ebp+this]
.text:0000079E                 movzx   ecx, byte ptr [eax+1C2h]
.text:000007A5                 test    ecx, ecx
.text:000007A7                 jz      short loc_7B2
.text:000007A9                 mov     edx, [ebp+var_70]
.text:000007AC                 or      edx, 2
.text:000007AF                 mov     [ebp+var_70], edx
.text:000007B2
.text:000007B2 loc_7B2:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+31Bj
.text:000007B2                 mov     eax, [ebp+this]
.text:000007B5                 movzx   ecx, byte ptr [eax+1C3h]
.text:000007BC                 test    ecx, ecx
.text:000007BE                 jz      short loc_7C9
.text:000007C0                 mov     edx, [ebp+var_70]
.text:000007C3                 or      edx, 20h
.text:000007C6                 mov     [ebp+var_70], edx
.text:000007C9
.text:000007C9 loc_7C9:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+332j
.text:000007C9                 mov     eax, [ebp+this]
.text:000007CC                 movzx   ecx, byte ptr [eax+1C6h]
.text:000007D3                 test    ecx, ecx
.text:000007D5                 jz      short loc_7E3
.text:000007D7                 mov     edx, [ebp+var_70]
.text:000007DA                 or      edx, 100h
.text:000007E0                 mov     [ebp+var_70], edx
.text:000007E3
.text:000007E3 loc_7E3:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+349j
.text:000007E3                 mov     eax, [ebp+var_70]
.text:000007E6                 push    eax
.text:000007E7                 lea     ecx, [ebp+var_28]
.text:000007EA                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000007EF
.text:000007EF $LN26:                                  ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6Dj
.text:000007EF                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dj ...
.text:000007EF                 mov     ecx, [ebp+arg_8] ; jumptable 00000509 default case
.text:000007F2                 push    ecx             ; struct tagPROPVARIANT *
.text:000007F3                 lea     ecx, [ebp+var_28] ; this
.text:000007F6                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000007FB                 mov     [ebp+var_74], 0
.text:00000802                 mov     byte ptr [ebp+var_4], 0
.text:00000806                 lea     ecx, [ebp+var_28] ; this
.text:00000809                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000080E                 mov     eax, [ebp+var_74]
.text:00000811                 jmp     short loc_839
.text:00000811 ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000811
.text:00000813
.text:00000813 ; =============== S U B R O U T I N E =======================================
.text:00000813
.text:00000813
.text:00000813 __catch$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000813                                         ; DATA XREF: .xdata$x:00002120o
.text:00000813                 mov     dword ptr [ebp-78h], 8007000Eh
.text:0000081A                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000821                 mov     eax, offset $LN36
.text:00000826                 retn
.text:00000826 __catch$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000826
.text:00000827 ; ---------------------------------------------------------------------------
.text:00000827                 mov     eax, offset __tryend$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1
.text:0000082C                 retn
.text:0000082D ; ---------------------------------------------------------------------------
.text:0000082D
.text:0000082D __tryend$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1:
.text:0000082D                                         ; DATA XREF: .text:00000827o
.text:0000082D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000834                 jmp     short loc_839
.text:00000836 ; ---------------------------------------------------------------------------
.text:00000836
.text:00000836 $LN36:                                  ; DATA XREF: __catch$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0+Eo
.text:00000836                 mov     eax, [ebp-78h]
.text:00000839 ; START OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000839
.text:00000839 loc_839:                                ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+385j
.text:00000839                                         ; .text:00000834j
.text:00000839                 push    edx
.text:0000083A                 mov     ecx, ebp
.text:0000083C                 push    eax
.text:0000083D                 lea     edx, $LN44
.text:00000843                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000848                 pop     eax
.text:00000849                 pop     edx
.text:0000084A                 mov     ecx, [ebp+var_C]
.text:0000084D                 mov     large fs:0, ecx
.text:00000854                 pop     ecx
.text:00000855                 pop     edi
.text:00000856                 pop     esi
.text:00000857                 pop     ebx
.text:00000858                 mov     ecx, [ebp+var_14]
.text:0000085B                 xor     ecx, ebp
.text:0000085D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000862                 add     esp, 98h
.text:00000868                 cmp     ebp, esp
.text:0000086A                 call    __RTC_CheckEsp
.text:0000086F                 mov     esp, ebp
.text:00000871                 pop     ebp
.text:00000872                 retn    0Ch
.text:00000872 ; END OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000872 ; ---------------------------------------------------------------------------
.text:00000875                 align 4
.text:00000878 $LN44           dd 3                    ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3B1o
.text:0000087C                 dd offset $LN43
.text:00000880 $LN43           dd 0FFFFFFD8h, 10h      ; DATA XREF: .text:0000087Co
.text:00000888                 dd offset $LN39         ; "prop"
.text:0000088C                 dd 0FFFFFFC4h, 0Ch
.text:00000894                 dd offset $LN40         ; "s"
.text:00000898                 dd 0FFFFFF9Ch, 10h
.text:000008A0                 dd offset $LN41         ; "temp"
.text:000008A4 $LN41           db 'temp',0             ; DATA XREF: .text:000008A0o
.text:000008A9 $LN40           db 's',0                ; DATA XREF: .text:00000894o
.text:000008AB $LN39           db 'prop',0             ; DATA XREF: .text:00000888o
.text:000008B0 $LN45           dd offset $LN15, offset $LN25, offset $LN11, offset $LN14
.text:000008B0                                         ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+7Dr
.text:000008B0                 dd offset $LN12, offset $LN13, offset $LN5_0, offset $LN9_0 ; jump table for switch statement
.text:000008B0                 dd offset $LN26
.text:000008D4 $LN38           db      0,     8,     8,     8
.text:000008D4                                         ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+76r
.text:000008D4                 db      8,     8,     8,     8 ; indirect table for switch statement
.text:000008D4                 db      8,     1,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     2
.text:000008D4                 db      8,     3,     8,     8
.text:000008D4                 db      8,     8,     8,     4
.text:000008D4                 db      5,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     8,     8
.text:000008D4                 db      8,     8,     6,     7
.text:00000910                 db 0Ch dup(0CCh)
.text:0000091C
.text:0000091C ; =============== S U B R O U T I N E =======================================
.text:0000091C
.text:0000091C ; Attributes: bp-based frame
.text:0000091C
.text:0000091C ; int __stdcall NArchive::N7z::GetStringForSizeValue(char *, unsigned int)
.text:0000091C ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z proc near
.text:0000091C                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+154p
.text:0000091C                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+18Ep ...
.text:0000091C
.text:0000091C var_C           = dword ptr -0Ch
.text:0000091C var_8           = dword ptr -8
.text:0000091C var_4           = dword ptr -4
.text:0000091C arg_0           = dword ptr  8
.text:0000091C arg_4           = dword ptr  0Ch
.text:0000091C
.text:0000091C                 push    ebp
.text:0000091D                 mov     ebp, esp
.text:0000091F                 sub     esp, 0Ch
.text:00000922                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000929                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000930                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000937                 mov     [ebp+var_4], 0
.text:0000093E                 jmp     short loc_949
.text:00000940 ; ---------------------------------------------------------------------------
.text:00000940
.text:00000940 loc_940:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint):loc_9D8j
.text:00000940                 mov     eax, [ebp+var_4]
.text:00000943                 add     eax, 1
.text:00000946                 mov     [ebp+var_4], eax
.text:00000949
.text:00000949 loc_949:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+22j
.text:00000949                 cmp     [ebp+var_4], 1Fh
.text:0000094D                 ja      loc_9DD
.text:00000953                 mov     edx, 1
.text:00000958                 mov     ecx, [ebp+var_4]
.text:0000095B                 shl     edx, cl
.text:0000095D                 cmp     edx, [ebp+arg_4]
.text:00000960                 jnz     short loc_9D8
.text:00000962                 cmp     [ebp+var_4], 0Ah
.text:00000966                 jnb     short loc_984
.text:00000968                 mov     eax, [ebp+var_4]
.text:0000096B                 add     eax, 30h ; '0'
.text:0000096E                 mov     ecx, [ebp+arg_0]
.text:00000971                 mov     [ecx], al
.text:00000973                 mov     edx, [ebp+arg_0]
.text:00000976                 mov     byte ptr [edx+1], 0
.text:0000097A                 mov     eax, 1
.text:0000097F                 jmp     loc_A4B
.text:00000984 ; ---------------------------------------------------------------------------
.text:00000984
.text:00000984 loc_984:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+4Aj
.text:00000984                 cmp     [ebp+var_4], 14h
.text:00000988                 jnb     short loc_99E
.text:0000098A                 mov     eax, [ebp+arg_0]
.text:0000098D                 mov     byte ptr [eax], 31h ; '1'
.text:00000990                 mov     ecx, [ebp+var_4]
.text:00000993                 add     ecx, 26h ; '&'
.text:00000996                 mov     edx, [ebp+arg_0]
.text:00000999                 mov     [edx+1], cl
.text:0000099C                 jmp     short loc_9CA
.text:0000099E ; ---------------------------------------------------------------------------
.text:0000099E
.text:0000099E loc_99E:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+6Cj
.text:0000099E                 cmp     [ebp+var_4], 1Eh
.text:000009A2                 jnb     short loc_9B8
.text:000009A4                 mov     eax, [ebp+arg_0]
.text:000009A7                 mov     byte ptr [eax], 32h ; '2'
.text:000009AA                 mov     ecx, [ebp+var_4]
.text:000009AD                 add     ecx, 1Ch
.text:000009B0                 mov     edx, [ebp+arg_0]
.text:000009B3                 mov     [edx+1], cl
.text:000009B6                 jmp     short loc_9CA
.text:000009B8 ; ---------------------------------------------------------------------------
.text:000009B8
.text:000009B8 loc_9B8:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+86j
.text:000009B8                 mov     eax, [ebp+arg_0]
.text:000009BB                 mov     byte ptr [eax], 33h ; '3'
.text:000009BE                 mov     ecx, [ebp+var_4]
.text:000009C1                 add     ecx, 12h
.text:000009C4                 mov     edx, [ebp+arg_0]
.text:000009C7                 mov     [edx+1], cl
.text:000009CA
.text:000009CA loc_9CA:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+80j
.text:000009CA                                         ; NArchive::N7z::GetStringForSizeValue(char *,uint)+9Aj
.text:000009CA                 mov     eax, [ebp+arg_0]
.text:000009CD                 mov     byte ptr [eax+2], 0
.text:000009D1                 mov     eax, 2
.text:000009D6                 jmp     short loc_A4B
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009D8
.text:000009D8 loc_9D8:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+44j
.text:000009D8                 jmp     loc_940
.text:000009DD ; ---------------------------------------------------------------------------
.text:000009DD
.text:000009DD loc_9DD:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+31j
.text:000009DD                 mov     byte ptr [ebp+var_8+3], 62h ; 'b'
.text:000009E1                 mov     ecx, [ebp+arg_4]
.text:000009E4                 and     ecx, 0FFFFFh
.text:000009EA                 jnz     short loc_9FB
.text:000009EC                 mov     edx, [ebp+arg_4]
.text:000009EF                 shr     edx, 14h
.text:000009F2                 mov     [ebp+arg_4], edx
.text:000009F5                 mov     byte ptr [ebp+var_8+3], 6Dh ; 'm'
.text:000009F9                 jmp     short loc_A12
.text:000009FB ; ---------------------------------------------------------------------------
.text:000009FB
.text:000009FB loc_9FB:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+CEj
.text:000009FB                 mov     eax, [ebp+arg_4]
.text:000009FE                 and     eax, 3FFh
.text:00000A03                 jnz     short loc_A12
.text:00000A05                 mov     ecx, [ebp+arg_4]
.text:00000A08                 shr     ecx, 0Ah
.text:00000A0B                 mov     [ebp+arg_4], ecx
.text:00000A0E                 mov     byte ptr [ebp+var_8+3], 6Bh ; 'k'
.text:00000A12
.text:00000A12 loc_A12:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+DDj
.text:00000A12                                         ; NArchive::N7z::GetStringForSizeValue(char *,uint)+E7j
.text:00000A12                 mov     edx, [ebp+arg_0]
.text:00000A15                 push    edx             ; char *
.text:00000A16                 mov     eax, [ebp+arg_4]
.text:00000A19                 push    eax             ; unsigned int
.text:00000A1A                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00000A1F                 mov     ecx, [ebp+arg_0]
.text:00000A22                 push    ecx             ; char *
.text:00000A23                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00000A28                 mov     [ebp+var_C], eax
.text:00000A2B                 mov     edx, [ebp+arg_0]
.text:00000A2E                 add     edx, [ebp+var_C]
.text:00000A31                 mov     al, byte ptr [ebp+var_8+3]
.text:00000A34                 mov     [edx], al
.text:00000A36                 mov     ecx, [ebp+var_C]
.text:00000A39                 add     ecx, 1
.text:00000A3C                 mov     [ebp+var_C], ecx
.text:00000A3F                 mov     edx, [ebp+arg_0]
.text:00000A42                 add     edx, [ebp+var_C]
.text:00000A45                 mov     byte ptr [edx], 0
.text:00000A48                 mov     eax, [ebp+var_C]
.text:00000A4B
.text:00000A4B loc_A4B:                                ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+63j
.text:00000A4B                                         ; NArchive::N7z::GetStringForSizeValue(char *,uint)+BAj
.text:00000A4B                 add     esp, 0Ch
.text:00000A4E                 cmp     ebp, esp
.text:00000A50                 call    __RTC_CheckEsp
.text:00000A55                 mov     esp, ebp
.text:00000A57                 pop     ebp
.text:00000A58                 retn    8
.text:00000A58 ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z endp
.text:00000A58
.text:00000A58 ; ---------------------------------------------------------------------------
.text:00000A5B                 align 4
.text:00000A5C
.text:00000A5C ; =============== S U B R O U T I N E =======================================
.text:00000A5C
.text:00000A5C ; Attributes: bp-based frame
.text:00000A5C
.text:00000A5C ; bool __thiscall NArchive::N7z::CHandler::IsFolderEncrypted(NArchive::N7z::CHandler *this, unsigned int)
.text:00000A5C                 public ?IsFolderEncrypted@CHandler@N7z@NArchive@@ABE_NI@Z
.text:00000A5C ?IsFolderEncrypted@CHandler@N7z@NArchive@@ABE_NI@Z proc near
.text:00000A5C                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1E8p
.text:00000A5C
.text:00000A5C var_40          = dword ptr -40h
.text:00000A5C var_3C          = dword ptr -3Ch
.text:00000A5C var_38          = dword ptr -38h
.text:00000A5C var_34          = dword ptr -34h
.text:00000A5C var_30          = qword ptr -30h
.text:00000A5C var_28          = dword ptr -28h
.text:00000A5C var_20          = byte ptr -20h
.text:00000A5C var_10          = dword ptr -10h
.text:00000A5C var_C           = dword ptr -0Ch
.text:00000A5C var_8           = dword ptr -8
.text:00000A5C var_4           = dword ptr -4
.text:00000A5C arg_0           = dword ptr  8
.text:00000A5C
.text:00000A5C                 push    ebp
.text:00000A5D                 mov     ebp, esp
.text:00000A5F                 sub     esp, 40h
.text:00000A62                 push    esi
.text:00000A63                 push    edi
.text:00000A64                 push    ecx
.text:00000A65                 lea     edi, [ebp+var_40]
.text:00000A68                 mov     ecx, 10h
.text:00000A6D                 mov     eax, 0CCCCCCCCh
.text:00000A72                 rep stosd
.text:00000A74                 pop     ecx
.text:00000A75                 mov     [ebp+var_4], ecx
.text:00000A78                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text:00000A7C                 jnz     short loc_A85
.text:00000A7E                 xor     al, al
.text:00000A80                 jmp     loc_BB0
.text:00000A85 ; ---------------------------------------------------------------------------
.text:00000A85
.text:00000A85 loc_A85:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+20j
.text:00000A85                 mov     ecx, [ebp+var_4]
.text:00000A88                 add     ecx, 0C8h ; '+'
.text:00000A8E                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00000A93                 mov     ecx, [ebp+arg_0]
.text:00000A96                 mov     edx, [eax+ecx*4]
.text:00000A99                 mov     [ebp+var_8], edx
.text:00000A9C                 mov     ecx, [ebp+var_4]
.text:00000A9F                 add     ecx, 0CCh ; '¦'
.text:00000AA5                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000AAA                 add     eax, [ebp+var_8]
.text:00000AAD                 mov     [ebp+var_C], eax
.text:00000AB0                 mov     ecx, [ebp+var_4]
.text:00000AB3                 add     ecx, 0C8h ; '+'
.text:00000AB9                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00000ABE                 mov     ecx, [ebp+arg_0]
.text:00000AC1                 mov     edx, [eax+ecx*4+4]
.text:00000AC5                 sub     edx, [ebp+var_8]
.text:00000AC8                 mov     [ebp+var_10], edx
.text:00000ACB                 mov     eax, [ebp+var_10]
.text:00000ACE                 push    eax             ; unsigned int
.text:00000ACF                 mov     ecx, [ebp+var_C]
.text:00000AD2                 push    ecx             ; unsigned __int8 *
.text:00000AD3                 lea     ecx, [ebp+var_20] ; this
.text:00000AD6                 call    ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z ; NArchive::N7z::CInByte2::Init(uchar const *,uint)
.text:00000ADB                 lea     ecx, [ebp+var_20] ; this
.text:00000ADE                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000AE3                 mov     [ebp+var_28], eax
.text:00000AE6                 jmp     short loc_AF1
.text:00000AE8 ; ---------------------------------------------------------------------------
.text:00000AE8
.text:00000AE8 loc_AE8:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint):loc_BA9j
.text:00000AE8                 mov     edx, [ebp+var_28]
.text:00000AEB                 sub     edx, 1
.text:00000AEE                 mov     [ebp+var_28], edx
.text:00000AF1
.text:00000AF1 loc_AF1:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+8Aj
.text:00000AF1                 cmp     [ebp+var_28], 0
.text:00000AF5                 jz      loc_BAE
.text:00000AFB                 lea     ecx, [ebp+var_20] ; this
.text:00000AFE                 call    ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ; NArchive::N7z::CInByte2::ReadByte(void)
.text:00000B03                 mov     byte ptr [ebp+var_30+7], al
.text:00000B06                 movzx   eax, byte ptr [ebp+var_30+7]
.text:00000B0A                 and     eax, 0Fh
.text:00000B0D                 mov     dword ptr [ebp+var_30], eax
.text:00000B10                 lea     ecx, [ebp+var_20] ; this
.text:00000B13                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00000B18                 mov     [ebp+var_34], eax
.text:00000B1B                 mov     [ebp+var_3C], 0
.text:00000B22                 mov     [ebp+var_38], 0
.text:00000B29                 mov     [ebp+var_40], 0
.text:00000B30                 jmp     short loc_B3B
.text:00000B32 ; ---------------------------------------------------------------------------
.text:00000B32
.text:00000B32 loc_B32:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+10Cj
.text:00000B32                 mov     ecx, [ebp+var_40]
.text:00000B35                 add     ecx, 1
.text:00000B38                 mov     [ebp+var_40], ecx
.text:00000B3B
.text:00000B3B loc_B3B:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+D4j
.text:00000B3B                 mov     edx, [ebp+var_40]
.text:00000B3E                 cmp     edx, dword ptr [ebp+var_30]
.text:00000B41                 jnb     short loc_B6A
.text:00000B43                 mov     eax, [ebp+var_3C]
.text:00000B46                 mov     edx, [ebp+var_38]
.text:00000B49                 mov     cl, 8
.text:00000B4B                 call    __allshl
.text:00000B50                 mov     ecx, eax
.text:00000B52                 mov     esi, edx
.text:00000B54                 mov     edx, [ebp+var_34]
.text:00000B57                 add     edx, [ebp+var_40]
.text:00000B5A                 movzx   eax, byte ptr [edx]
.text:00000B5D                 cdq
.text:00000B5E                 or      ecx, eax
.text:00000B60                 or      esi, edx
.text:00000B62                 mov     [ebp+var_3C], ecx
.text:00000B65                 mov     [ebp+var_38], esi
.text:00000B68                 jmp     short loc_B32
.text:00000B6A ; ---------------------------------------------------------------------------
.text:00000B6A
.text:00000B6A loc_B6A:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+E5j
.text:00000B6A                 mov     eax, dword ptr [ebp+var_30]
.text:00000B6D                 xor     ecx, ecx
.text:00000B6F                 push    ecx
.text:00000B70                 push    eax             ; unsigned __int64
.text:00000B71                 lea     ecx, [ebp+var_20] ; this
.text:00000B74                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00000B79                 cmp     [ebp+var_3C], 6F10701h
.text:00000B80                 jnz     short loc_B8C
.text:00000B82                 cmp     [ebp+var_38], 0
.text:00000B86                 jnz     short loc_B8C
.text:00000B88                 mov     al, 1
.text:00000B8A                 jmp     short loc_BB0
.text:00000B8C ; ---------------------------------------------------------------------------
.text:00000B8C
.text:00000B8C loc_B8C:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+124j
.text:00000B8C                                         ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)+12Aj
.text:00000B8C                 movzx   edx, byte ptr [ebp+var_30+7]
.text:00000B90                 and     edx, 20h
.text:00000B93                 jz      short loc_BA9
.text:00000B95                 lea     ecx, [ebp+var_20] ; this
.text:00000B98                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000B9D                 xor     ecx, ecx
.text:00000B9F                 push    ecx
.text:00000BA0                 push    eax             ; unsigned __int64
.text:00000BA1                 lea     ecx, [ebp+var_20] ; this
.text:00000BA4                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00000BA9
.text:00000BA9 loc_BA9:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+137j
.text:00000BA9                 jmp     loc_AE8
.text:00000BAE ; ---------------------------------------------------------------------------
.text:00000BAE
.text:00000BAE loc_BAE:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+99j
.text:00000BAE                 xor     al, al
.text:00000BB0
.text:00000BB0 loc_BB0:                                ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+24j
.text:00000BB0                                         ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)+12Ej
.text:00000BB0                 push    edx
.text:00000BB1                 mov     ecx, ebp
.text:00000BB3                 push    eax
.text:00000BB4                 lea     edx, $LN14_0
.text:00000BBA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000BBF                 pop     eax
.text:00000BC0                 pop     edx
.text:00000BC1                 pop     edi
.text:00000BC2                 pop     esi
.text:00000BC3                 add     esp, 40h
.text:00000BC6                 cmp     ebp, esp
.text:00000BC8                 call    __RTC_CheckEsp
.text:00000BCD                 mov     esp, ebp
.text:00000BCF                 pop     ebp
.text:00000BD0                 retn    4
.text:00000BD0 ?IsFolderEncrypted@CHandler@N7z@NArchive@@ABE_NI@Z endp
.text:00000BD0
.text:00000BD0 ; ---------------------------------------------------------------------------
.text:00000BD3                 align 4
.text:00000BD4 $LN14_0         dd 1                    ; DATA XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+158o
.text:00000BD8                 dd offset $LN13_0
.text:00000BDC $LN13_0         dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00000BD8o
.text:00000BE4                 dd offset $LN12_0       ; "inByte"
.text:00000BE8 $LN12_0         db 'inByte',0           ; DATA XREF: .text:00000BE4o
.text:00000BEF                 db 0Dh dup(0CCh)
.text:00000BFC
.text:00000BFC ; =============== S U B R O U T I N E =======================================
.text:00000BFC
.text:00000BFC ; Attributes: bp-based frame
.text:00000BFC
.text:00000BFC ; __int32 __stdcall NArchive::N7z::CHandler::GetNumRawProps(NArchive::N7z::CHandler *this, unsigned int *)
.text:00000BFC                 public ?GetNumRawProps@CHandler@N7z@NArchive@@UAGJPAI@Z
.text:00000BFC ?GetNumRawProps@CHandler@N7z@NArchive@@UAGJPAI@Z proc near
.text:00000BFC                                         ; DATA XREF: .rdata:0000205Co
.text:00000BFC
.text:00000BFC this            = dword ptr  8
.text:00000BFC arg_4           = dword ptr  0Ch
.text:00000BFC
.text:00000BFC                 push    ebp
.text:00000BFD                 mov     ebp, esp
.text:00000BFF                 mov     eax, [ebp+arg_4]
.text:00000C02                 mov     dword ptr [eax], 0
.text:00000C08                 xor     eax, eax
.text:00000C0A                 pop     ebp
.text:00000C0B                 retn    8
.text:00000C0B ?GetNumRawProps@CHandler@N7z@NArchive@@UAGJPAI@Z endp
.text:00000C0B
.text:00000C0B ; ---------------------------------------------------------------------------
.text:00000C0E                 db 0Eh dup(0CCh)
.text:00000C1C
.text:00000C1C ; =============== S U B R O U T I N E =======================================
.text:00000C1C
.text:00000C1C ; Attributes: bp-based frame
.text:00000C1C
.text:00000C1C ; __int32 __stdcall NArchive::N7z::CHandler::GetRawPropInfo(NArchive::N7z::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *)
.text:00000C1C                 public ?GetRawPropInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAK@Z
.text:00000C1C ?GetRawPropInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAK@Z proc near
.text:00000C1C                                         ; DATA XREF: .rdata:00002060o
.text:00000C1C
.text:00000C1C this            = dword ptr  8
.text:00000C1C arg_8           = dword ptr  10h
.text:00000C1C arg_C           = dword ptr  14h
.text:00000C1C
.text:00000C1C                 push    ebp
.text:00000C1D                 mov     ebp, esp
.text:00000C1F                 mov     eax, [ebp+arg_8]
.text:00000C22                 mov     dword ptr [eax], 0
.text:00000C28                 mov     ecx, [ebp+arg_C]
.text:00000C2B                 mov     dword ptr [ecx], 3Eh ; '>'
.text:00000C31                 xor     eax, eax
.text:00000C33                 pop     ebp
.text:00000C34                 retn    10h
.text:00000C34 ?GetRawPropInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAK@Z endp
.text:00000C34
.text:00000C34 ; ---------------------------------------------------------------------------
.text:00000C37                 db 5 dup(0CCh)
.text:00000C3C
.text:00000C3C ; =============== S U B R O U T I N E =======================================
.text:00000C3C
.text:00000C3C ; Attributes: bp-based frame
.text:00000C3C
.text:00000C3C ; __int32 __stdcall NArchive::N7z::CHandler::GetParent(NArchive::N7z::CHandler *this, unsigned int, unsigned int *, unsigned int *)
.text:00000C3C                 public ?GetParent@CHandler@N7z@NArchive@@UAGJIPAI0@Z
.text:00000C3C ?GetParent@CHandler@N7z@NArchive@@UAGJIPAI0@Z proc near
.text:00000C3C                                         ; DATA XREF: .rdata:00002054o
.text:00000C3C
.text:00000C3C this            = dword ptr  8
.text:00000C3C arg_8           = dword ptr  10h
.text:00000C3C arg_C           = dword ptr  14h
.text:00000C3C
.text:00000C3C                 push    ebp
.text:00000C3D                 mov     ebp, esp
.text:00000C3F                 mov     eax, [ebp+arg_C]
.text:00000C42                 mov     dword ptr [eax], 0
.text:00000C48                 mov     ecx, [ebp+arg_8]
.text:00000C4B                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00000C51                 xor     eax, eax
.text:00000C53                 pop     ebp
.text:00000C54                 retn    10h
.text:00000C54 ?GetParent@CHandler@N7z@NArchive@@UAGJIPAI0@Z endp
.text:00000C54
.text:00000C54 ; ---------------------------------------------------------------------------
.text:00000C57                 db 5 dup(0CCh)
.text:00000C5C
.text:00000C5C ; =============== S U B R O U T I N E =======================================
.text:00000C5C
.text:00000C5C ; Attributes: bp-based frame
.text:00000C5C
.text:00000C5C ; __int32 __stdcall NArchive::N7z::CHandler::GetRawProp(NArchive::N7z::CHandler *this, unsigned int, unsigned __int32, const void **, unsigned int *, unsigned int *)
.text:00000C5C                 public ?GetRawProp@CHandler@N7z@NArchive@@UAGJIKPAPBXPAI1@Z
.text:00000C5C ?GetRawProp@CHandler@N7z@NArchive@@UAGJIKPAPBXPAI1@Z proc near
.text:00000C5C                                         ; DATA XREF: .rdata:00002058o
.text:00000C5C
.text:00000C5C var_8           = dword ptr -8
.text:00000C5C var_4           = dword ptr -4
.text:00000C5C this            = dword ptr  8
.text:00000C5C arg_4           = dword ptr  0Ch
.text:00000C5C arg_8           = dword ptr  10h
.text:00000C5C arg_C           = dword ptr  14h
.text:00000C5C arg_10          = dword ptr  18h
.text:00000C5C arg_14          = dword ptr  1Ch
.text:00000C5C
.text:00000C5C                 push    ebp
.text:00000C5D                 mov     ebp, esp
.text:00000C5F                 sub     esp, 8
.text:00000C62                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C70                 mov     eax, [ebp+arg_C]
.text:00000C73                 mov     dword ptr [eax], 0
.text:00000C79                 mov     ecx, [ebp+arg_10]
.text:00000C7C                 mov     dword ptr [ecx], 0
.text:00000C82                 mov     edx, [ebp+arg_14]
.text:00000C85                 mov     dword ptr [edx], 0
.text:00000C8B                 cmp     [ebp+arg_8], 3
.text:00000C8F                 jnz     loc_D24
.text:00000C95                 mov     ecx, [ebp+this]
.text:00000C98                 add     ecx, 164h
.text:00000C9E                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000CA3                 test    eax, eax
.text:00000CA5                 jz      short loc_D20
.text:00000CA7                 mov     ecx, [ebp+this]
.text:00000CAA                 add     ecx, 15Ch
.text:00000CB0                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000CB5                 test    eax, eax
.text:00000CB7                 jz      short loc_D20
.text:00000CB9                 mov     ecx, [ebp+this]
.text:00000CBC                 add     ecx, 164h
.text:00000CC2                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000CC7                 mov     ecx, [ebp+arg_4]
.text:00000CCA                 mov     edx, [eax+ecx*4]
.text:00000CCD                 mov     [ebp+var_4], edx
.text:00000CD0                 mov     ecx, [ebp+this]
.text:00000CD3                 add     ecx, 164h
.text:00000CD9                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00000CDE                 mov     ecx, [ebp+arg_4]
.text:00000CE1                 mov     edx, [eax+ecx*4+4]
.text:00000CE5                 sub     edx, [ebp+var_4]
.text:00000CE8                 shl     edx, 1
.text:00000CEA                 mov     [ebp+var_8], edx
.text:00000CED                 cmp     [ebp+var_8], 80000000h
.text:00000CF4                 jnb     short loc_D20
.text:00000CF6                 mov     ecx, [ebp+this]
.text:00000CF9                 add     ecx, 15Ch
.text:00000CFF                 call    ??B?$CBuffer@E@@QAEPAEXZ ; CBuffer<uchar>::operator uchar *(void)
.text:00000D04                 mov     ecx, [ebp+var_4]
.text:00000D07                 lea     edx, [eax+ecx*2]
.text:00000D0A                 mov     eax, [ebp+arg_C]
.text:00000D0D                 mov     [eax], edx
.text:00000D0F                 mov     ecx, [ebp+arg_10]
.text:00000D12                 mov     edx, [ebp+var_8]
.text:00000D15                 mov     [ecx], edx
.text:00000D17                 mov     eax, [ebp+arg_14]
.text:00000D1A                 mov     dword ptr [eax], 51h ; 'Q'
.text:00000D20
.text:00000D20 loc_D20:                                ; CODE XREF: NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+49j
.text:00000D20                                         ; NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+5Bj ...
.text:00000D20                 xor     eax, eax
.text:00000D22                 jmp     short loc_D26
.text:00000D24 ; ---------------------------------------------------------------------------
.text:00000D24
.text:00000D24 loc_D24:                                ; CODE XREF: NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+33j
.text:00000D24                 xor     eax, eax
.text:00000D26
.text:00000D26 loc_D26:                                ; CODE XREF: NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+C6j
.text:00000D26                 add     esp, 8
.text:00000D29                 cmp     ebp, esp
.text:00000D2B                 call    __RTC_CheckEsp
.text:00000D30                 mov     esp, ebp
.text:00000D32                 pop     ebp
.text:00000D33                 retn    18h
.text:00000D33 ?GetRawProp@CHandler@N7z@NArchive@@UAGJIKPAPBXPAI1@Z endp
.text:00000D33
.text:00000D33 ; ---------------------------------------------------------------------------
.text:00000D36                 db 6 dup(0CCh)
.text:00000D3C
.text:00000D3C ; =============== S U B R O U T I N E =======================================
.text:00000D3C
.text:00000D3C ; Attributes: bp-based frame
.text:00000D3C
.text:00000D3C ; __int32 __thiscall NArchive::N7z::CHandler::SetMethodToProp(NArchive::N7z::CHandler *this, unsigned int, struct tagPROPVARIANT *)
.text:00000D3C                 public ?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z
.text:00000D3C ?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z proc near
.text:00000D3C                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+254p
.text:00000D3C
.text:00000D3C var_1EC         = dword ptr -1ECh
.text:00000D3C var_1E8         = dword ptr -1E8h
.text:00000D3C var_1E0         = byte ptr -1E0h
.text:00000D3C var_1D0         = dword ptr -1D0h
.text:00000D3C var_1CC         = dword ptr -1CCh
.text:00000D3C var_1C8         = dword ptr -1C8h
.text:00000D3C var_1C4         = dword ptr -1C4h
.text:00000D3C var_1C0         = dword ptr -1C0h
.text:00000D3C var_1B9         = byte ptr -1B9h
.text:00000D3C var_1B8         = dword ptr -1B8h
.text:00000D3C var_1B2         = byte ptr -1B2h
.text:00000D3C var_1B1         = byte ptr -1B1h
.text:00000D3C var_1B0         = dword ptr -1B0h
.text:00000D3C var_1AC         = dword ptr -1ACh
.text:00000D3C var_1A8         = dword ptr -1A8h
.text:00000D3C var_1A4         = dword ptr -1A4h
.text:00000D3C var_1A0         = dword ptr -1A0h
.text:00000D3C var_19C         = dword ptr -19Ch
.text:00000D3C var_198         = dword ptr -198h
.text:00000D3C var_190         = byte ptr -190h
.text:00000D3C var_16C         = dword ptr -16Ch
.text:00000D3C var_168         = dword ptr -168h
.text:00000D3C var_164         = qword ptr -164h
.text:00000D3C var_15C         = qword ptr -15Ch
.text:00000D3C var_154         = dword ptr -154h
.text:00000D3C var_150         = qword ptr -150h
.text:00000D3C var_148         = dword ptr -148h
.text:00000D3C var_140         = byte ptr -140h
.text:00000D3C var_130         = dword ptr -130h
.text:00000D3C var_12C         = dword ptr -12Ch
.text:00000D3C var_128         = dword ptr -128h
.text:00000D3C var_124         = dword ptr -124h
.text:00000D3C var_11D         = byte ptr -11Dh
.text:00000D3C var_11C         = tagPROPVARIANT ptr -11Ch
.text:00000D3C var_18          = dword ptr -18h
.text:00000D3C var_14          = dword ptr -14h
.text:00000D3C var_10          = dword ptr -10h
.text:00000D3C var_C           = dword ptr -0Ch
.text:00000D3C var_4           = dword ptr -4
.text:00000D3C arg_0           = dword ptr  8
.text:00000D3C arg_4           = dword ptr  0Ch
.text:00000D3C
.text:00000D3C                 push    ebp
.text:00000D3D                 mov     ebp, esp
.text:00000D3F                 push    0FFFFFFFFh
.text:00000D41                 push    offset __ehhandler$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z
.text:00000D46                 mov     eax, large fs:0
.text:00000D4C                 push    eax
.text:00000D4D                 sub     esp, 1E0h
.text:00000D53                 push    esi
.text:00000D54                 push    edi
.text:00000D55                 push    ecx
.text:00000D56                 lea     edi, [ebp+var_1EC]
.text:00000D5C                 mov     ecx, 78h ; 'x'
.text:00000D61                 mov     eax, 0CCCCCCCCh
.text:00000D66                 rep stosd
.text:00000D68                 pop     ecx
.text:00000D69                 mov     eax, dword ptr ds:___security_cookie
.text:00000D6E                 xor     eax, ebp
.text:00000D70                 mov     [ebp+var_10], eax
.text:00000D73                 push    eax             ; struct tagPROPVARIANT *
.text:00000D74                 lea     eax, [ebp+var_C]
.text:00000D77                 mov     large fs:0, eax
.text:00000D7D                 mov     [ebp+var_14], ecx
.text:00000D80                 mov     eax, [ebp+arg_4]
.text:00000D83                 push    eax             ; char *
.text:00000D84                 call    ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)
.text:00000D89                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text:00000D8D                 jnz     short loc_D96
.text:00000D8F                 xor     eax, eax
.text:00000D91                 jmp     loc_1623
.text:00000D96 ; ---------------------------------------------------------------------------
.text:00000D96
.text:00000D96 loc_D96:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+51j
.text:00000D96                 mov     [ebp+var_18], 100h
.text:00000D9D                 mov     [ebp+var_124], 100h
.text:00000DA7                 mov     ecx, [ebp+var_124]
.text:00000DAD                 sub     ecx, 1
.text:00000DB0                 mov     [ebp+var_124], ecx
.text:00000DB6                 mov     edx, [ebp+var_124]
.text:00000DBC                 mov     byte ptr [ebp+edx+var_11C.anonymous_0], 0
.text:00000DC4                 mov     ecx, [ebp+var_14]
.text:00000DC7                 add     ecx, 0C8h ; '+'
.text:00000DCD                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00000DD2                 mov     ecx, [ebp+arg_0]
.text:00000DD5                 mov     edx, [eax+ecx*4]
.text:00000DD8                 mov     [ebp+var_128], edx
.text:00000DDE                 mov     ecx, [ebp+var_14]
.text:00000DE1                 add     ecx, 0CCh ; '¦'
.text:00000DE7                 call    ??B?$CBuffer@E@@QBEPBEXZ ; CBuffer<uchar>::operator uchar const *(void)
.text:00000DEC                 add     eax, [ebp+var_128]
.text:00000DF2                 mov     [ebp+var_12C], eax
.text:00000DF8                 mov     ecx, [ebp+var_14]
.text:00000DFB                 add     ecx, 0C8h ; '+'
.text:00000E01                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00000E06                 mov     ecx, [ebp+arg_0]
.text:00000E09                 mov     edx, [eax+ecx*4+4]
.text:00000E0D                 sub     edx, [ebp+var_128]
.text:00000E13                 mov     [ebp+var_130], edx
.text:00000E19                 mov     eax, [ebp+var_130]
.text:00000E1F                 push    eax             ; unsigned int
.text:00000E20                 mov     ecx, [ebp+var_12C]
.text:00000E26                 push    ecx             ; unsigned __int8 *
.text:00000E27                 lea     ecx, [ebp+var_140] ; this
.text:00000E2D                 call    ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z ; NArchive::N7z::CInByte2::Init(uchar const *,uint)
.text:00000E32                 lea     ecx, [ebp+var_140] ; this
.text:00000E38                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000E3D                 mov     [ebp+var_148], eax
.text:00000E43                 mov     byte ptr [ebp+var_150+7], 0
.text:00000E4A                 jmp     short loc_E62
.text:00000E4C ; ---------------------------------------------------------------------------
.text:00000E4C
.text:00000E4C loc_E4C:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *):loc_1581j
.text:00000E4C                 mov     edx, [ebp+var_148]
.text:00000E52                 sub     edx, 1
.text:00000E55                 mov     [ebp+var_148], edx
.text:00000E5B                 mov     byte ptr [ebp+var_150+7], 1
.text:00000E62
.text:00000E62 loc_E62:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+10Ej
.text:00000E62                 cmp     [ebp+var_148], 0
.text:00000E69                 jz      loc_1586
.text:00000E6F                 cmp     [ebp+var_124], 20h ; ' '
.text:00000E76                 jnb     short loc_E7D
.text:00000E78                 jmp     loc_1586
.text:00000E7D ; ---------------------------------------------------------------------------
.text:00000E7D
.text:00000E7D loc_E7D:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+13Aj
.text:00000E7D                 lea     ecx, [ebp+var_140] ; this
.text:00000E83                 call    ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ; NArchive::N7z::CInByte2::ReadByte(void)
.text:00000E88                 mov     byte ptr [ebp+var_150+6], al
.text:00000E8E                 movzx   eax, byte ptr [ebp+var_150+6]
.text:00000E95                 and     eax, 0Fh
.text:00000E98                 mov     dword ptr [ebp+var_150], eax
.text:00000E9E                 lea     ecx, [ebp+var_140] ; this
.text:00000EA4                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00000EA9                 mov     [ebp+var_154], eax
.text:00000EAF                 mov     dword ptr [ebp+var_15C], 0
.text:00000EB9                 mov     dword ptr [ebp+var_15C+4], 0
.text:00000EC3                 mov     dword ptr [ebp+var_164+4], 0
.text:00000ECD                 jmp     short loc_EDE
.text:00000ECF ; ---------------------------------------------------------------------------
.text:00000ECF
.text:00000ECF loc_ECF:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+1E7j
.text:00000ECF                 mov     ecx, dword ptr [ebp+var_164+4]
.text:00000ED5                 add     ecx, 1
.text:00000ED8                 mov     dword ptr [ebp+var_164+4], ecx
.text:00000EDE
.text:00000EDE loc_EDE:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+191j
.text:00000EDE                 mov     edx, dword ptr [ebp+var_164+4]
.text:00000EE4                 cmp     edx, dword ptr [ebp+var_150]
.text:00000EEA                 jnb     short loc_F25
.text:00000EEC                 mov     eax, dword ptr [ebp+var_15C]
.text:00000EF2                 mov     edx, dword ptr [ebp+var_15C+4]
.text:00000EF8                 mov     cl, 8
.text:00000EFA                 call    __allshl
.text:00000EFF                 mov     ecx, eax
.text:00000F01                 mov     esi, edx
.text:00000F03                 mov     edx, [ebp+var_154]
.text:00000F09                 add     edx, dword ptr [ebp+var_164+4]
.text:00000F0F                 movzx   eax, byte ptr [edx]
.text:00000F12                 cdq
.text:00000F13                 or      ecx, eax
.text:00000F15                 or      esi, edx
.text:00000F17                 mov     dword ptr [ebp+var_15C], ecx
.text:00000F1D                 mov     dword ptr [ebp+var_15C+4], esi
.text:00000F23                 jmp     short loc_ECF
.text:00000F25 ; ---------------------------------------------------------------------------
.text:00000F25
.text:00000F25 loc_F25:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+1AEj
.text:00000F25                 mov     eax, dword ptr [ebp+var_150]
.text:00000F2B                 xor     ecx, ecx
.text:00000F2D                 push    ecx
.text:00000F2E                 push    eax             ; unsigned __int64
.text:00000F2F                 lea     ecx, [ebp+var_140] ; this
.text:00000F35                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00000F3A                 movzx   edx, byte ptr [ebp+var_150+6]
.text:00000F41                 and     edx, 10h
.text:00000F44                 jz      short loc_F5C
.text:00000F46                 lea     ecx, [ebp+var_140] ; this
.text:00000F4C                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F51                 lea     ecx, [ebp+var_140] ; this
.text:00000F57                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F5C
.text:00000F5C loc_F5C:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+208j
.text:00000F5C                 mov     dword ptr [ebp+var_164], 0
.text:00000F66                 mov     [ebp+var_168], 0
.text:00000F70                 movzx   eax, byte ptr [ebp+var_150+6]
.text:00000F77                 and     eax, 20h
.text:00000F7A                 jz      short loc_FB3
.text:00000F7C                 lea     ecx, [ebp+var_140] ; this
.text:00000F82                 call    ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadNum(void)
.text:00000F87                 mov     dword ptr [ebp+var_164], eax
.text:00000F8D                 lea     ecx, [ebp+var_140] ; this
.text:00000F93                 call    ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ; NArchive::N7z::CInByte2::GetPtr(void)
.text:00000F98                 mov     [ebp+var_168], eax
.text:00000F9E                 mov     ecx, dword ptr [ebp+var_164]
.text:00000FA4                 xor     edx, edx
.text:00000FA6                 push    edx
.text:00000FA7                 push    ecx             ; unsigned __int64
.text:00000FA8                 lea     ecx, [ebp+var_140] ; this
.text:00000FAE                 call    ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck(unsigned __int64)
.text:00000FB3
.text:00000FB3 loc_FB3:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+23Ej
.text:00000FB3                 mov     [ebp+var_16C], 0
.text:00000FBD                 mov     [ebp+var_190], 0
.text:00000FC4                 cmp     dword ptr [ebp+var_15C+4], 0
.text:00000FCB                 ja      loc_1313
.text:00000FD1                 jb      short loc_FE0
.text:00000FD3                 cmp     dword ptr [ebp+var_15C], 0FFFFFFFFh
.text:00000FDA                 ja      loc_1313
.text:00000FE0
.text:00000FE0 loc_FE0:                                ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+295j
.text:00000FE0                 mov     eax, dword ptr [ebp+var_15C]
.text:00000FE6                 mov     [ebp+var_198], eax
.text:00000FEC                 cmp     [ebp+var_198], 30101h
.text:00000FF6                 jnz     loc_112C
.text:00000FFC                 mov     [ebp+var_16C], offset $SG71095 ; "LZMA"
.text:00001006                 cmp     dword ptr [ebp+var_164], 5
.text:0000100D                 jnz     loc_1127
.text:00001013                 mov     ecx, [ebp+var_168]
.text:00001019                 mov     edx, [ecx+1]
.text:0000101C                 mov     [ebp+var_19C], edx
.text:00001022                 mov     eax, [ebp+var_19C]
.text:00001028                 push    eax             ; unsigned int
.text:00001029                 lea     ecx, [ebp+var_190]
.text:0000102F                 push    ecx             ; char *
.text:00001030                 call    ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z ; NArchive::N7z::GetStringForSizeValue(char *,uint)
.text:00001035                 lea     edx, [ebp+eax+var_190]
.text:0000103C                 mov     [ebp+var_1A0], edx
.text:00001042                 mov     eax, [ebp+var_168]
.text:00001048                 movzx   ecx, byte ptr [eax]
.text:0000104B                 mov     [ebp+var_1A4], ecx
.text:00001051                 cmp     [ebp+var_1A4], 5Dh ; ']'
.text:00001058                 jz      loc_1127
.text:0000105E                 mov     eax, [ebp+var_1A4]
.text:00001064                 xor     edx, edx
.text:00001066                 mov     ecx, 9
.text:0000106B                 div     ecx
.text:0000106D                 mov     [ebp+var_1A8], edx
.text:00001073                 mov     eax, [ebp+var_1A4]
.text:00001079                 xor     edx, edx
.text:0000107B                 mov     ecx, 9
.text:00001080                 div     ecx
.text:00001082                 mov     [ebp+var_1A4], eax
.text:00001088                 mov     eax, [ebp+var_1A4]
.text:0000108E                 xor     edx, edx
.text:00001090                 mov     ecx, 5
.text:00001095                 div     ecx
.text:00001097                 mov     [ebp+var_1AC], eax
.text:0000109D                 mov     eax, [ebp+var_1A4]
.text:000010A3                 xor     edx, edx
.text:000010A5                 mov     ecx, 5
.text:000010AA                 div     ecx
.text:000010AC                 mov     [ebp+var_1B0], edx
.text:000010B2                 cmp     [ebp+var_1A8], 3
.text:000010B9                 jz      short loc_10D9
.text:000010BB                 mov     edx, [ebp+var_1A8]
.text:000010C1                 push    edx             ; unsigned int
.text:000010C2                 push    offset $SG71108 ; "lc"
.text:000010C7                 mov     eax, [ebp+var_1A0]
.text:000010CD                 push    eax             ; char *
.text:000010CE                 call    ?AddProp32@N7z@NArchive@@YGPADPADPBDI@Z ; NArchive::N7z::AddProp32(char *,char const *,uint)
.text:000010D3                 mov     [ebp+var_1A0], eax
.text:000010D9
.text:000010D9 loc_10D9:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+37Dj
.text:000010D9                 cmp     [ebp+var_1B0], 0
.text:000010E0                 jz      short loc_1100
.text:000010E2                 mov     ecx, [ebp+var_1B0]
.text:000010E8                 push    ecx             ; unsigned int
.text:000010E9                 push    offset $SG71110 ; "lp"
.text:000010EE                 mov     edx, [ebp+var_1A0]
.text:000010F4                 push    edx             ; char *
.text:000010F5                 call    ?AddProp32@N7z@NArchive@@YGPADPADPBDI@Z ; NArchive::N7z::AddProp32(char *,char const *,uint)
.text:000010FA                 mov     [ebp+var_1A0], eax
.text:00001100
.text:00001100 loc_1100:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3A4j
.text:00001100                 cmp     [ebp+var_1AC], 2
.text:00001107                 jz      short loc_1127
.text:00001109                 mov     eax, [ebp+var_1AC]
.text:0000110F                 push    eax             ; unsigned int
.text:00001110                 push    offset $SG71112 ; "pb"
.text:00001115                 mov     ecx, [ebp+var_1A0]
.text:0000111B                 push    ecx             ; char *
.text:0000111C                 call    ?AddProp32@N7z@NArchive@@YGPADPADPBDI@Z ; NArchive::N7z::AddProp32(char *,char const *,uint)
.text:00001121                 mov     [ebp+var_1A0], eax
.text:00001127
.text:00001127 loc_1127:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+2D1j
.text:00001127                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+31Cj ...
.text:00001127                 jmp     loc_1313
.text:0000112C ; ---------------------------------------------------------------------------
.text:0000112C
.text:0000112C loc_112C:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+2BAj
.text:0000112C                 cmp     [ebp+var_198], 21h ; '!'
.text:00001133                 jnz     short loc_11A2
.text:00001135                 mov     [ebp+var_16C], offset $SG71115 ; "LZMA2"
.text:0000113F                 cmp     dword ptr [ebp+var_164], 1
.text:00001146                 jnz     short loc_119D
.text:00001148                 mov     edx, [ebp+var_168]
.text:0000114E                 mov     al, [edx]
.text:00001150                 mov     [ebp+var_1B1], al
.text:00001156                 movzx   ecx, [ebp+var_1B1]
.text:0000115D                 and     ecx, 1
.text:00001160                 jnz     short loc_117D
.text:00001162                 lea     edx, [ebp+var_190]
.text:00001168                 push    edx             ; char *
.text:00001169                 movzx   eax, [ebp+var_1B1]
.text:00001170                 sar     eax, 1
.text:00001172                 add     eax, 0Ch
.text:00001175                 push    eax             ; unsigned int
.text:00001176                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000117B                 jmp     short loc_119D
.text:0000117D ; ---------------------------------------------------------------------------
.text:0000117D
.text:0000117D loc_117D:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+424j
.text:0000117D                 movzx   ecx, [ebp+var_1B1]
.text:00001184                 sar     ecx, 1
.text:00001186                 add     ecx, 0Bh
.text:00001189                 mov     edx, 3
.text:0000118E                 shl     edx, cl
.text:00001190                 push    edx             ; unsigned int
.text:00001191                 lea     eax, [ebp+var_190]
.text:00001197                 push    eax             ; char *
.text:00001198                 call    ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z ; NArchive::N7z::GetStringForSizeValue(char *,uint)
.text:0000119D
.text:0000119D loc_119D:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+40Aj
.text:0000119D                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+43Fj
.text:0000119D                 jmp     loc_1313
.text:000011A2 ; ---------------------------------------------------------------------------
.text:000011A2
.text:000011A2 loc_11A2:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3F7j
.text:000011A2                 cmp     [ebp+var_198], 30401h
.text:000011AC                 jnz     loc_1259
.text:000011B2                 mov     [ebp+var_16C], offset $SG71123 ; "PPMD"
.text:000011BC                 cmp     dword ptr [ebp+var_164], 5
.text:000011C3                 jnz     loc_1254
.text:000011C9                 mov     ecx, [ebp+var_168]
.text:000011CF                 mov     dl, [ecx]
.text:000011D1                 mov     [ebp+var_1B2], dl
.text:000011D7                 lea     eax, [ebp+var_190]
.text:000011DD                 mov     [ebp+var_1B8], eax
.text:000011E3                 mov     ecx, [ebp+var_1B8]
.text:000011E9                 mov     byte ptr [ecx], 6Fh ; 'o'
.text:000011EC                 mov     edx, [ebp+var_1B8]
.text:000011F2                 add     edx, 1
.text:000011F5                 mov     [ebp+var_1B8], edx
.text:000011FB                 mov     eax, [ebp+var_1B8]
.text:00001201                 push    eax             ; char *
.text:00001202                 movzx   ecx, [ebp+var_1B2]
.text:00001209                 push    ecx             ; unsigned int
.text:0000120A                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000120F                 mov     edx, [ebp+var_1B8]
.text:00001215                 push    edx             ; char *
.text:00001216                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:0000121B                 add     eax, [ebp+var_1B8]
.text:00001221                 mov     [ebp+var_1B8], eax
.text:00001227                 push    offset $SG71127 ; ":mem"
.text:0000122C                 mov     eax, [ebp+var_1B8]
.text:00001232                 push    eax             ; char *
.text:00001233                 call    ?MyStpCpy@@YGPADPADPBD@Z ; MyStpCpy(char *,char const *)
.text:00001238                 mov     [ebp+var_1B8], eax
.text:0000123E                 mov     ecx, [ebp+var_168]
.text:00001244                 mov     edx, [ecx+1]
.text:00001247                 push    edx             ; unsigned int
.text:00001248                 mov     eax, [ebp+var_1B8]
.text:0000124E                 push    eax             ; char *
.text:0000124F                 call    ?GetStringForSizeValue@N7z@NArchive@@YGIPADI@Z ; NArchive::N7z::GetStringForSizeValue(char *,uint)
.text:00001254
.text:00001254 loc_1254:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+487j
.text:00001254                 jmp     loc_1313
.text:00001259 ; ---------------------------------------------------------------------------
.text:00001259
.text:00001259 loc_1259:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+470j
.text:00001259                 cmp     [ebp+var_198], 3
.text:00001260                 jnz     short loc_1293
.text:00001262                 mov     [ebp+var_16C], offset $SG71132 ; "Delta"
.text:0000126C                 cmp     dword ptr [ebp+var_164], 1
.text:00001273                 jnz     short loc_128E
.text:00001275                 lea     ecx, [ebp+var_190]
.text:0000127B                 push    ecx             ; char *
.text:0000127C                 mov     edx, [ebp+var_168]
.text:00001282                 movzx   eax, byte ptr [edx]
.text:00001285                 add     eax, 1
.text:00001288                 push    eax             ; unsigned int
.text:00001289                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000128E
.text:0000128E loc_128E:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+537j
.text:0000128E                 jmp     loc_1313
.text:00001293 ; ---------------------------------------------------------------------------
.text:00001293
.text:00001293 loc_1293:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+524j
.text:00001293                 cmp     [ebp+var_198], 303011Bh
.text:0000129D                 jnz     short loc_12AB
.text:0000129F                 mov     [ebp+var_16C], offset $SG71137 ; "BCJ2"
.text:000012A9                 jmp     short loc_1313
.text:000012AB ; ---------------------------------------------------------------------------
.text:000012AB
.text:000012AB loc_12AB:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+561j
.text:000012AB                 cmp     [ebp+var_198], 3030103h
.text:000012B5                 jnz     short loc_12C3
.text:000012B7                 mov     [ebp+var_16C], offset $SG71140 ; "BCJ"
.text:000012C1                 jmp     short loc_1313
.text:000012C3 ; ---------------------------------------------------------------------------
.text:000012C3
.text:000012C3 loc_12C3:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+579j
.text:000012C3                 cmp     [ebp+var_198], 6F10701h
.text:000012CD                 jnz     short loc_1313
.text:000012CF                 mov     [ebp+var_16C], offset $SG71143 ; "7zAES"
.text:000012D9                 cmp     dword ptr [ebp+var_164], 1
.text:000012E0                 jb      short loc_1313
.text:000012E2                 mov     ecx, [ebp+var_168]
.text:000012E8                 mov     dl, [ecx]
.text:000012EA                 mov     [ebp+var_1B9], dl
.text:000012F0                 movzx   eax, [ebp+var_1B9]
.text:000012F7                 and     eax, 3Fh
.text:000012FA                 mov     [ebp+var_1C0], eax
.text:00001300                 lea     ecx, [ebp+var_190]
.text:00001306                 push    ecx             ; char *
.text:00001307                 mov     edx, [ebp+var_1C0]
.text:0000130D                 push    edx             ; unsigned int
.text:0000130E                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:00001313
.text:00001313 loc_1313:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+28Fj
.text:00001313                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+29Ej ...
.text:00001313                 cmp     [ebp+var_16C], 0
.text:0000131A                 jz      loc_143B
.text:00001320                 mov     eax, [ebp+var_16C]
.text:00001326                 push    eax             ; char *
.text:00001327                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:0000132C                 mov     [ebp+var_1C4], eax
.text:00001332                 lea     ecx, [ebp+var_190]
.text:00001338                 push    ecx             ; char *
.text:00001339                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:0000133E                 mov     [ebp+var_1C8], eax
.text:00001344                 mov     edx, [ebp+var_1C4]
.text:0000134A                 add     edx, [ebp+var_1C8]
.text:00001350                 mov     [ebp+var_1CC], edx
.text:00001356                 cmp     [ebp+var_1C8], 0
.text:0000135D                 jz      short loc_136E
.text:0000135F                 mov     eax, [ebp+var_1CC]
.text:00001365                 add     eax, 1
.text:00001368                 mov     [ebp+var_1CC], eax
.text:0000136E
.text:0000136E loc_136E:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+621j
.text:0000136E                 movzx   ecx, byte ptr [ebp+var_150+7]
.text:00001375                 test    ecx, ecx
.text:00001377                 jz      short loc_1388
.text:00001379                 mov     edx, [ebp+var_1CC]
.text:0000137F                 add     edx, 1
.text:00001382                 mov     [ebp+var_1CC], edx
.text:00001388
.text:00001388 loc_1388:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+63Bj
.text:00001388                 mov     eax, [ebp+var_1CC]
.text:0000138E                 add     eax, 5
.text:00001391                 cmp     eax, [ebp+var_124]
.text:00001397                 jb      short loc_139E
.text:00001399                 jmp     loc_1586
.text:0000139E ; ---------------------------------------------------------------------------
.text:0000139E
.text:0000139E loc_139E:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+65Bj
.text:0000139E                 mov     ecx, [ebp+var_124]
.text:000013A4                 sub     ecx, [ebp+var_1CC]
.text:000013AA                 mov     [ebp+var_124], ecx
.text:000013B0                 mov     edx, [ebp+var_16C]
.text:000013B6                 push    edx             ; char *
.text:000013B7                 mov     eax, [ebp+var_124]
.text:000013BD                 lea     ecx, [ebp+eax+var_11C]
.text:000013C4                 push    ecx             ; char *
.text:000013C5                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:000013CA                 cmp     [ebp+var_1C8], 0
.text:000013D1                 jz      short loc_1417
.text:000013D3                 mov     edx, [ebp+var_124]
.text:000013D9                 lea     eax, [ebp+edx+var_11C]
.text:000013E0                 add     eax, [ebp+var_1C4]
.text:000013E6                 mov     [ebp+var_1D0], eax
.text:000013EC                 mov     ecx, [ebp+var_1D0]
.text:000013F2                 mov     byte ptr [ecx], 3Ah ; ':'
.text:000013F5                 mov     edx, [ebp+var_1D0]
.text:000013FB                 add     edx, 1
.text:000013FE                 mov     [ebp+var_1D0], edx
.text:00001404                 lea     eax, [ebp+var_190]
.text:0000140A                 push    eax             ; char *
.text:0000140B                 mov     ecx, [ebp+var_1D0]
.text:00001411                 push    ecx             ; char *
.text:00001412                 call    ?MyStringCopy@@YGXPADPBD@Z ; MyStringCopy(char *,char const *)
.text:00001417
.text:00001417 loc_1417:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+695j
.text:00001417                 movzx   edx, byte ptr [ebp+var_150+7]
.text:0000141E                 test    edx, edx
.text:00001420                 jz      short loc_1436
.text:00001422                 mov     eax, [ebp+var_124]
.text:00001428                 add     eax, [ebp+var_1CC]
.text:0000142E                 mov     [ebp+eax+var_11D], 20h ; ' '
.text:00001436
.text:00001436 loc_1436:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+6E4j
.text:00001436                 jmp     loc_1581
.text:0000143B ; ---------------------------------------------------------------------------
.text:0000143B
.text:0000143B loc_143B:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+5DEj
.text:0000143B                 lea     ecx, [ebp+var_1E0]
.text:00001441                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00001446                 mov     [ebp+var_4], 0
.text:0000144D                 lea     ecx, [ebp+var_1E0]
.text:00001453                 push    ecx             ; struct AString *
.text:00001454                 mov     edx, dword ptr [ebp+var_15C+4]
.text:0000145A                 push    edx
.text:0000145B                 mov     eax, dword ptr [ebp+var_15C]
.text:00001461                 push    eax             ; unsigned __int64
.text:00001462                 call    ?FindMethod@@YG_N_KAAVAString@@@Z ; FindMethod(unsigned __int64,AString &)
.text:00001467                 movzx   ecx, byte ptr [ebp+var_150+7]
.text:0000146E                 test    ecx, ecx
.text:00001470                 jz      short loc_148F
.text:00001472                 mov     edx, [ebp+var_124]
.text:00001478                 sub     edx, 1
.text:0000147B                 mov     [ebp+var_124], edx
.text:00001481                 mov     eax, [ebp+var_124]
.text:00001487                 mov     byte ptr [ebp+eax+var_11C.anonymous_0], 20h ; ' '
.text:0000148F
.text:0000148F loc_148F:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+734j
.text:0000148F                 lea     ecx, [ebp+var_1E0] ; this
.text:00001495                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:0000149A                 movzx   ecx, al
.text:0000149D                 test    ecx, ecx
.text:0000149F                 jz      short loc_14D5
.text:000014A1                 mov     edx, dword ptr [ebp+var_15C+4]
.text:000014A7                 push    edx
.text:000014A8                 mov     eax, dword ptr [ebp+var_15C]
.text:000014AE                 push    eax
.text:000014AF                 mov     ecx, [ebp+var_124]
.text:000014B5                 lea     edx, [ebp+ecx+var_11C]
.text:000014BC                 push    edx
.text:000014BD                 call    ?ConvertMethodIdToString_Back@N7z@NArchive@@YGIPAD_K@Z ; NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)
.text:000014C2                 mov     ecx, [ebp+var_124]
.text:000014C8                 sub     ecx, eax
.text:000014CA                 mov     [ebp+var_124], ecx
.text:000014D0                 jmp     loc_156F
.text:000014D5 ; ---------------------------------------------------------------------------
.text:000014D5
.text:000014D5 loc_14D5:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+763j
.text:000014D5                 lea     ecx, [ebp+var_1E0] ; this
.text:000014DB                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000014E0                 mov     [ebp+var_1E8], eax
.text:000014E6                 mov     edx, [ebp+var_1E8]
.text:000014EC                 add     edx, 5
.text:000014EF                 cmp     edx, [ebp+var_124]
.text:000014F5                 jbe     short loc_150B
.text:000014F7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000014FE                 lea     ecx, [ebp+var_1E0] ; this
.text:00001504                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001509                 jmp     short loc_1586
.text:0000150B ; ---------------------------------------------------------------------------
.text:0000150B
.text:0000150B loc_150B:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+7B9j
.text:0000150B                 mov     eax, [ebp+var_124]
.text:00001511                 sub     eax, [ebp+var_1E8]
.text:00001517                 mov     [ebp+var_124], eax
.text:0000151D                 mov     [ebp+var_1EC], 0
.text:00001527                 jmp     short loc_1538
.text:00001529 ; ---------------------------------------------------------------------------
.text:00001529
.text:00001529 loc_1529:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+831j
.text:00001529                 mov     ecx, [ebp+var_1EC]
.text:0000152F                 add     ecx, 1
.text:00001532                 mov     [ebp+var_1EC], ecx
.text:00001538
.text:00001538 loc_1538:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+7EBj
.text:00001538                 mov     edx, [ebp+var_1EC]
.text:0000153E                 cmp     edx, [ebp+var_1E8]
.text:00001544                 jnb     short loc_156F
.text:00001546                 lea     ecx, [ebp+var_1E0]
.text:0000154C                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001551                 mov     ecx, [ebp+var_124]
.text:00001557                 add     ecx, [ebp+var_1EC]
.text:0000155D                 mov     edx, [ebp+var_1EC]
.text:00001563                 mov     al, [eax+edx]
.text:00001566                 mov     byte ptr [ebp+ecx+var_11C.anonymous_0], al
.text:0000156D                 jmp     short loc_1529
.text:0000156F ; ---------------------------------------------------------------------------
.text:0000156F
.text:0000156F loc_156F:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+794j
.text:0000156F                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+808j
.text:0000156F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001576                 lea     ecx, [ebp+var_1E0] ; this
.text:0000157C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00001581
.text:00001581 loc_1581:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *):loc_1436j
.text:00001581                 jmp     loc_E4C
.text:00001586 ; ---------------------------------------------------------------------------
.text:00001586
.text:00001586 loc_1586:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+12Dj
.text:00001586                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+13Cj ...
.text:00001586                 cmp     [ebp+var_148], 0
.text:0000158D                 jz      short loc_160C
.text:0000158F                 cmp     [ebp+var_124], 4
.text:00001596                 jb      short loc_160C
.text:00001598                 mov     ecx, [ebp+var_124]
.text:0000159E                 sub     ecx, 1
.text:000015A1                 mov     [ebp+var_124], ecx
.text:000015A7                 mov     edx, [ebp+var_124]
.text:000015AD                 mov     byte ptr [ebp+edx+var_11C.anonymous_0], 20h ; ' '
.text:000015B5                 mov     eax, [ebp+var_124]
.text:000015BB                 sub     eax, 1
.text:000015BE                 mov     [ebp+var_124], eax
.text:000015C4                 mov     ecx, [ebp+var_124]
.text:000015CA                 mov     byte ptr [ebp+ecx+var_11C.anonymous_0], 2Eh ; '.'
.text:000015D2                 mov     edx, [ebp+var_124]
.text:000015D8                 sub     edx, 1
.text:000015DB                 mov     [ebp+var_124], edx
.text:000015E1                 mov     eax, [ebp+var_124]
.text:000015E7                 mov     byte ptr [ebp+eax+var_11C.anonymous_0], 2Eh ; '.'
.text:000015EF                 mov     ecx, [ebp+var_124]
.text:000015F5                 sub     ecx, 1
.text:000015F8                 mov     [ebp+var_124], ecx
.text:000015FE                 mov     edx, [ebp+var_124]
.text:00001604                 mov     byte ptr [ebp+edx+var_11C.anonymous_0], 2Eh ; '.'
.text:0000160C
.text:0000160C loc_160C:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+851j
.text:0000160C                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+85Aj
.text:0000160C                 mov     eax, [ebp+var_124]
.text:00001612                 lea     ecx, [ebp+eax+var_11C]
.text:00001619                 push    ecx             ; struct tagPROPVARIANT *
.text:0000161A                 mov     edx, [ebp+arg_4]
.text:0000161D                 push    edx             ; this
.text:0000161E                 call    ?PropVarEm_Set_Str@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@PBD@Z ; NWindows::NCOM::PropVarEm_Set_Str(tagPROPVARIANT *,char const *)
.text:00001623
.text:00001623 loc_1623:                               ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+55j
.text:00001623                 push    edx
.text:00001624                 mov     ecx, ebp
.text:00001626                 push    eax
.text:00001627                 lea     edx, $LN61
.text:0000162D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001632                 pop     eax
.text:00001633                 pop     edx
.text:00001634                 mov     ecx, [ebp+var_C]
.text:00001637                 mov     large fs:0, ecx
.text:0000163E                 pop     ecx
.text:0000163F                 pop     edi
.text:00001640                 pop     esi
.text:00001641                 mov     ecx, [ebp+var_10]
.text:00001644                 xor     ecx, ebp
.text:00001646                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0000164B                 add     esp, 1ECh
.text:00001651                 cmp     ebp, esp
.text:00001653                 call    __RTC_CheckEsp
.text:00001658                 mov     esp, ebp
.text:0000165A                 pop     ebp
.text:0000165B                 retn    8
.text:0000165B ?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z endp ; sp-analysis failed
.text:0000165B
.text:0000165B ; ---------------------------------------------------------------------------
.text:0000165E                 align 10h
.text:00001660 $LN61           dd 4                    ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+8EBo
.text:00001664                 dd offset $LN60
.text:00001668 $LN60           dd 0FFFFFEE4h, 100h     ; DATA XREF: .text:00001664o
.text:00001670                 dd offset $LN55         ; "temp"
.text:00001674                 dd 0FFFFFEC0h, 0Ch
.text:0000167C                 dd offset $LN56         ; "inByte"
.text:00001680                 dd 0FFFFFE70h, 20h
.text:00001688                 dd offset $LN57         ; "s"
.text:0000168C                 dd 0FFFFFE20h, 0Ch
.text:00001694                 dd offset $LN58         ; "methodName"
.text:00001698 $LN58           db 'methodName',0       ; DATA XREF: .text:00001694o
.text:000016A3 $LN57           db 's',0                ; DATA XREF: .text:00001688o
.text:000016A5 $LN56           db 'inByte',0           ; DATA XREF: .text:0000167Co
.text:000016AC $LN55           db 'temp',0             ; DATA XREF: .text:00001670o
.text:000016B1                 db 0Bh dup(0CCh)
.text:000016BC
.text:000016BC ; =============== S U B R O U T I N E =======================================
.text:000016BC
.text:000016BC ; Attributes: bp-based frame
.text:000016BC
.text:000016BC ; int __stdcall NArchive::N7z::AddProp32(char *, char *, unsigned int)
.text:000016BC ?AddProp32@N7z@NArchive@@YGPADPADPBDI@Z proc near
.text:000016BC                                         ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+392p
.text:000016BC                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+3B9p ...
.text:000016BC
.text:000016BC arg_0           = dword ptr  8
.text:000016BC arg_4           = dword ptr  0Ch
.text:000016BC arg_8           = dword ptr  10h
.text:000016BC
.text:000016BC                 push    ebp
.text:000016BD                 mov     ebp, esp
.text:000016BF                 mov     eax, [ebp+arg_0]
.text:000016C2                 mov     byte ptr [eax], 3Ah ; ':'
.text:000016C5                 mov     ecx, [ebp+arg_0]
.text:000016C8                 add     ecx, 1
.text:000016CB                 mov     [ebp+arg_0], ecx
.text:000016CE                 mov     edx, [ebp+arg_4]
.text:000016D1                 push    edx             ; char *
.text:000016D2                 mov     eax, [ebp+arg_0]
.text:000016D5                 push    eax             ; char *
.text:000016D6                 call    ?MyStpCpy@@YGPADPADPBD@Z ; MyStpCpy(char *,char const *)
.text:000016DB                 mov     [ebp+arg_0], eax
.text:000016DE                 mov     ecx, [ebp+arg_0]
.text:000016E1                 push    ecx             ; char *
.text:000016E2                 mov     edx, [ebp+arg_8]
.text:000016E5                 push    edx             ; unsigned int
.text:000016E6                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:000016EB                 mov     eax, [ebp+arg_0]
.text:000016EE                 push    eax             ; char *
.text:000016EF                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:000016F4                 add     eax, [ebp+arg_0]
.text:000016F7                 cmp     ebp, esp
.text:000016F9                 call    __RTC_CheckEsp
.text:000016FE                 pop     ebp
.text:000016FF                 retn    0Ch
.text:000016FF ?AddProp32@N7z@NArchive@@YGPADPADPBDI@Z endp
.text:000016FF
.text:000016FF ; ---------------------------------------------------------------------------
.text:00001702                 db 0Ah dup(0CCh)
.text:0000170C
.text:0000170C ; =============== S U B R O U T I N E =======================================
.text:0000170C
.text:0000170C ; Attributes: bp-based frame
.text:0000170C
.text:0000170C ; __int32 __stdcall NArchive::N7z::CHandler::GetProperty(NArchive::N7z::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:0000170C                 public ?GetProperty@CHandler@N7z@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:0000170C ?GetProperty@CHandler@N7z@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:0000170C                                         ; DATA XREF: .rdata:00002080o
.text:0000170C
.text:0000170C var_24          = dword ptr -24h
.text:0000170C var_20          = dword ptr -20h
.text:0000170C var_1C          = dword ptr -1Ch
.text:0000170C var_18          = dword ptr -18h
.text:0000170C var_14          = qword ptr -14h
.text:0000170C var_C           = dword ptr -0Ch
.text:0000170C var_8           = dword ptr -8
.text:0000170C var_4           = dword ptr -4
.text:0000170C this            = dword ptr  8
.text:0000170C arg_4           = dword ptr  0Ch
.text:0000170C arg_8           = dword ptr  10h
.text:0000170C arg_C           = dword ptr  14h
.text:0000170C
.text:0000170C                 push    ebp
.text:0000170D                 mov     ebp, esp
.text:0000170F                 sub     esp, 24h
.text:00001712                 mov     eax, 0CCCCCCCCh
.text:00001717                 mov     [ebp+var_24], eax
.text:0000171A                 mov     [ebp+var_20], eax
.text:0000171D                 mov     [ebp+var_1C], eax
.text:00001720                 mov     [ebp+var_18], eax
.text:00001723                 mov     dword ptr [ebp+var_14], eax
.text:00001726                 mov     dword ptr [ebp+var_14+4], eax
.text:00001729                 mov     [ebp+var_C], eax
.text:0000172C                 mov     [ebp+var_8], eax
.text:0000172F                 mov     [ebp+var_4], eax
.text:00001732                 mov     eax, [ebp+arg_C]
.text:00001735                 push    eax             ; unsigned int
.text:00001736                 call    ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear(tagPROPVARIANT *)
.text:0000173B                 mov     ecx, [ebp+arg_4]
.text:0000173E                 push    ecx
.text:0000173F                 mov     ecx, [ebp+this]
.text:00001742                 add     ecx, 0E8h ; 'F'
.text:00001748                 call    ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[](uint)
.text:0000174D                 mov     [ebp+var_4], eax
.text:00001750                 mov     edx, [ebp+arg_4]
.text:00001753                 mov     [ebp+var_8], edx
.text:00001756                 mov     eax, [ebp+arg_8]
.text:00001759                 mov     [ebp+var_24], eax
.text:0000175C                 mov     ecx, [ebp+var_24]
.text:0000175F                 sub     ecx, 3
.text:00001762                 mov     [ebp+var_24], ecx
.text:00001765                 cmp     [ebp+var_24], 1Ah ; switch 27 cases
.text:00001769                 ja      $LN22           ; jumptable 00001779 default case
.text:0000176F                 mov     edx, [ebp+var_24]
.text:00001772                 movzx   eax, ds:$LN26_0[edx]
.text:00001779                 jmp     ds:$LN30[eax*4] ; switch jump
.text:00001780 ; ---------------------------------------------------------------------------
.text:00001780
.text:00001780 $LN21:                                  ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001780                                         ; DATA XREF: .text:$LN30o
.text:00001780                 mov     ecx, [ebp+var_4] ; jumptable 00001779 case 3
.text:00001783                 movzx   edx, byte ptr [ecx+11h]
.text:00001787                 push    edx             ; struct tagPROPVARIANT *
.text:00001788                 mov     eax, [ebp+arg_C]
.text:0000178B                 push    eax             ; this
.text:0000178C                 call    ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z ; NWindows::NCOM::PropVarEm_Set_Bool(tagPROPVARIANT *,bool)
.text:00001791                 jmp     $LN22           ; jumptable 00001779 default case
.text:00001796 ; ---------------------------------------------------------------------------
.text:00001796
.text:00001796 $LN20:                                  ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001796                                         ; DATA XREF: .text:$LN30o
.text:00001796                 mov     ecx, [ebp+var_4] ; jumptable 00001779 case 4
.text:00001799                 mov     edx, [ecx+4]
.text:0000179C                 push    edx             ; unsigned __int64
.text:0000179D                 mov     eax, [ecx]
.text:0000179F                 push    eax             ; struct tagPROPVARIANT *
.text:000017A0                 mov     ecx, [ebp+arg_C]
.text:000017A3                 push    ecx             ; this
.text:000017A4                 call    ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z ; NWindows::NCOM::PropVarEm_Set_UInt64(tagPROPVARIANT *,unsigned __int64)
.text:000017A9                 jmp     $LN22           ; jumptable 00001779 default case
.text:000017AE ; ---------------------------------------------------------------------------
.text:000017AE
.text:000017AE $LN19:                                  ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:000017AE                                         ; DATA XREF: .text:$LN30o
.text:000017AE                 mov     ecx, [ebp+this] ; jumptable 00001779 case 5
.text:000017B1                 add     ecx, 1ACh
.text:000017B7                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000017BC                 mov     edx, [ebp+var_8]
.text:000017BF                 mov     eax, [eax+edx*4]
.text:000017C2                 mov     [ebp+var_C], eax
.text:000017C5                 cmp     [ebp+var_C], 0FFFFFFFFh
.text:000017C9                 jz      short loc_1803
.text:000017CB                 mov     ecx, [ebp+this]
.text:000017CE                 add     ecx, 1A8h
.text:000017D4                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000017D9                 mov     ecx, [ebp+var_C]
.text:000017DC                 mov     edx, [eax+ecx*4]
.text:000017DF                 cmp     edx, [ebp+var_8]
.text:000017E2                 jnz     short loc_1801
.text:000017E4                 mov     eax, [ebp+var_C]
.text:000017E7                 push    eax             ; unsigned int
.text:000017E8                 mov     ecx, [ebp+this]
.text:000017EB                 add     ecx, 90h ; 'É'  ; this
.text:000017F1                 call    ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)
.text:000017F6                 push    edx             ; unsigned __int64
.text:000017F7                 push    eax             ; struct tagPROPVARIANT *
.text:000017F8                 mov     ecx, [ebp+arg_C]
.text:000017FB                 push    ecx             ; this
.text:000017FC                 call    ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z ; NWindows::NCOM::PropVarEm_Set_UInt64(tagPROPVARIANT *,unsigned __int64)
.text:00001801
.text:00001801 loc_1801:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+D6j
.text:00001801                 jmp     short loc_1810
.text:00001803 ; ---------------------------------------------------------------------------
.text:00001803
.text:00001803 loc_1803:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+BDj
.text:00001803                 push    0               ; unsigned __int64
.text:00001805                 push    0               ; struct tagPROPVARIANT *
.text:00001807                 mov     edx, [ebp+arg_C]
.text:0000180A                 push    edx             ; this
.text:0000180B                 call    ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z ; NWindows::NCOM::PropVarEm_Set_UInt64(tagPROPVARIANT *,unsigned __int64)
.text:00001810
.text:00001810 loc_1810:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_1801j
.text:00001810                 jmp     $LN22           ; jumptable 00001779 default case
.text:00001815 ; ---------------------------------------------------------------------------
.text:00001815
.text:00001815 $LN15_0:                                ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001815                                         ; DATA XREF: .text:$LN30o
.text:00001815                 lea     eax, [ebp+var_18] ; jumptable 00001779 case 26
.text:00001818                 push    eax             ; unsigned __int64 *
.text:00001819                 mov     ecx, [ebp+var_8]
.text:0000181C                 push    ecx             ; unsigned int
.text:0000181D                 mov     ecx, [ebp+this]
.text:00001820                 add     ecx, 13Ch       ; this
.text:00001826                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:0000182B                 movzx   edx, al
.text:0000182E                 test    edx, edx
.text:00001830                 jz      short loc_1843
.text:00001832                 mov     eax, dword ptr [ebp+var_14]
.text:00001835                 push    eax             ; unsigned __int64
.text:00001836                 mov     ecx, [ebp+var_18]
.text:00001839                 push    ecx             ; struct tagPROPVARIANT *
.text:0000183A                 mov     edx, [ebp+arg_C]
.text:0000183D                 push    edx             ; this
.text:0000183E                 call    ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z ; NWindows::NCOM::PropVarEm_Set_UInt64(tagPROPVARIANT *,unsigned __int64)
.text:00001843
.text:00001843 loc_1843:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+124j
.text:00001843                 jmp     $LN22           ; jumptable 00001779 default case
.text:00001848 ; ---------------------------------------------------------------------------
.text:00001848
.text:00001848 $LN13_1:                                ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001848                                         ; DATA XREF: .text:$LN30o
.text:00001848                 mov     eax, [ebp+var_8] ; jumptable 00001779 case 7
.text:0000184B                 push    eax             ; unsigned int
.text:0000184C                 mov     ecx, [ebp+this]
.text:0000184F                 add     ecx, 0F4h ; '('
.text:00001855                 push    ecx             ; NArchive::N7z::CUInt64DefVector *
.text:00001856                 mov     edx, [ebp+arg_C]
.text:00001859                 push    edx             ; NWindows::NCOM *
.text:0000185A                 call    ?SetFileTimeProp_From_UInt64Def@N7z@NArchive@@YGXPAUtagPROPVARIANT@@ABUCUInt64DefVector@12@H@Z ; NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)
.text:0000185F                 jmp     $LN22           ; jumptable 00001779 default case
.text:00001864 ; ---------------------------------------------------------------------------
.text:00001864
.text:00001864 $LN12_1:                                ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001864                                         ; DATA XREF: .text:$LN30o
.text:00001864                 mov     eax, [ebp+var_8] ; jumptable 00001779 case 8
.text:00001867                 push    eax             ; unsigned int
.text:00001868                 mov     ecx, [ebp+this]
.text:0000186B                 add     ecx, 10Ch
.text:00001871                 push    ecx             ; NArchive::N7z::CUInt64DefVector *
.text:00001872                 mov     edx, [ebp+arg_C]
.text:00001875                 push    edx             ; NWindows::NCOM *
.text:00001876                 call    ?SetFileTimeProp_From_UInt64Def@N7z@NArchive@@YGXPAUtagPROPVARIANT@@ABUCUInt64DefVector@12@H@Z ; NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)
.text:0000187B                 jmp     $LN22           ; jumptable 00001779 default case
.text:00001880 ; ---------------------------------------------------------------------------
.text:00001880
.text:00001880 $LN11_0:                                ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001880                                         ; DATA XREF: .text:$LN30o
.text:00001880                 mov     eax, [ebp+var_8] ; jumptable 00001779 case 9
.text:00001883                 push    eax             ; unsigned int
.text:00001884                 mov     ecx, [ebp+this]
.text:00001887                 add     ecx, 124h
.text:0000188D                 push    ecx             ; NArchive::N7z::CUInt64DefVector *
.text:0000188E                 mov     edx, [ebp+arg_C]
.text:00001891                 push    edx             ; NWindows::NCOM *
.text:00001892                 call    ?SetFileTimeProp_From_UInt64Def@N7z@NArchive@@YGXPAUtagPROPVARIANT@@ABUCUInt64DefVector@12@H@Z ; NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)
.text:00001897                 jmp     $LN22           ; jumptable 00001779 default case
.text:0000189C ; ---------------------------------------------------------------------------
.text:0000189C
.text:0000189C $LN10:                                  ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:0000189C                                         ; DATA XREF: .text:$LN30o
.text:0000189C                 mov     eax, [ebp+var_4] ; jumptable 00001779 case 6
.text:0000189F                 movzx   ecx, byte ptr [eax+13h]
.text:000018A3                 test    ecx, ecx
.text:000018A5                 jz      short loc_18B7
.text:000018A7                 mov     edx, [ebp+var_4]
.text:000018AA                 mov     eax, [edx+8]
.text:000018AD                 push    eax             ; struct tagPROPVARIANT *
.text:000018AE                 mov     ecx, [ebp+arg_C]
.text:000018B1                 push    ecx             ; this
.text:000018B2                 call    ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z ; NWindows::NCOM::PropVarEm_Set_UInt32(tagPROPVARIANT *,uint)
.text:000018B7
.text:000018B7 loc_18B7:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+199j
.text:000018B7                 jmp     $LN22           ; jumptable 00001779 default case
.text:000018BC ; ---------------------------------------------------------------------------
.text:000018BC
.text:000018BC $LN8_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:000018BC                                         ; DATA XREF: .text:$LN30o
.text:000018BC                 mov     edx, [ebp+var_4] ; jumptable 00001779 case 16
.text:000018BF                 movzx   eax, byte ptr [edx+12h]
.text:000018C3                 test    eax, eax
.text:000018C5                 jz      short loc_18D7
.text:000018C7                 mov     ecx, [ebp+var_4]
.text:000018CA                 mov     edx, [ecx+0Ch]
.text:000018CD                 push    edx             ; struct tagPROPVARIANT *
.text:000018CE                 mov     eax, [ebp+arg_C]
.text:000018D1                 push    eax             ; this
.text:000018D2                 call    ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z ; NWindows::NCOM::PropVarEm_Set_UInt32(tagPROPVARIANT *,uint)
.text:000018D7
.text:000018D7 loc_18D7:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1B9j
.text:000018D7                 jmp     $LN22           ; jumptable 00001779 default case
.text:000018DC ; ---------------------------------------------------------------------------
.text:000018DC
.text:000018DC $LN6_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:000018DC                                         ; DATA XREF: .text:$LN30o
.text:000018DC                 mov     ecx, [ebp+this] ; jumptable 00001779 case 12
.text:000018DF                 add     ecx, 1ACh
.text:000018E5                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:000018EA                 mov     ecx, [ebp+var_8]
.text:000018ED                 mov     edx, [eax+ecx*4]
.text:000018F0                 push    edx             ; unsigned int
.text:000018F1                 mov     ecx, [ebp+this] ; this
.text:000018F4                 call    ?IsFolderEncrypted@CHandler@N7z@NArchive@@ABE_NI@Z ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)
.text:000018F9                 movzx   eax, al
.text:000018FC                 push    eax             ; struct tagPROPVARIANT *
.text:000018FD                 mov     ecx, [ebp+arg_C]
.text:00001900                 push    ecx             ; this
.text:00001901                 call    ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z ; NWindows::NCOM::PropVarEm_Set_Bool(tagPROPVARIANT *,bool)
.text:00001906                 jmp     $LN22           ; jumptable 00001779 default case
.text:0000190B ; ---------------------------------------------------------------------------
.text:0000190B
.text:0000190B $LN5_1:                                 ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:0000190B                                         ; DATA XREF: .text:$LN30o
.text:0000190B                 mov     edx, [ebp+var_8] ; jumptable 00001779 case 18
.text:0000190E                 push    edx             ; unsigned int
.text:0000190F                 mov     ecx, [ebp+this]
.text:00001912                 add     ecx, 90h ; 'É'  ; this
.text:00001918                 call    ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti(uint)
.text:0000191D                 movzx   eax, al
.text:00001920                 push    eax             ; struct tagPROPVARIANT *
.text:00001921                 mov     ecx, [ebp+arg_C]
.text:00001924                 push    ecx             ; this
.text:00001925                 call    ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z ; NWindows::NCOM::PropVarEm_Set_Bool(tagPROPVARIANT *,bool)
.text:0000192A                 jmp     short $LN22     ; jumptable 00001779 default case
.text:0000192C ; ---------------------------------------------------------------------------
.text:0000192C
.text:0000192C $LN4_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:0000192C                                         ; DATA XREF: .text:$LN30o
.text:0000192C                 mov     edx, [ebp+arg_C] ; jumptable 00001779 case 0
.text:0000192F                 push    edx             ; struct tagPROPVARIANT *
.text:00001930                 mov     eax, [ebp+arg_4]
.text:00001933                 push    eax             ; unsigned int
.text:00001934                 mov     ecx, [ebp+this]
.text:00001937                 add     ecx, 90h ; 'É'  ; this
.text:0000193D                 call    ?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z ; NArchive::N7z::CDatabase::GetPath_Prop(uint,tagPROPVARIANT *)
.text:00001942                 jmp     short loc_1993
.text:00001944 ; ---------------------------------------------------------------------------
.text:00001944
.text:00001944 $LN3_0:                                 ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001944                                         ; DATA XREF: .text:$LN30o
.text:00001944                 mov     ecx, [ebp+arg_C] ; jumptable 00001779 case 19
.text:00001947                 push    ecx             ; struct tagPROPVARIANT *
.text:00001948                 mov     ecx, [ebp+this]
.text:0000194B                 add     ecx, 1ACh
.text:00001951                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001956                 mov     edx, [ebp+var_8]
.text:00001959                 mov     eax, [eax+edx*4]
.text:0000195C                 push    eax             ; unsigned int
.text:0000195D                 mov     ecx, [ebp+this] ; this
.text:00001960                 call    ?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)
.text:00001965                 jmp     short loc_1993
.text:00001967 ; ---------------------------------------------------------------------------
.text:00001967
.text:00001967 $LN2:                                   ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj
.text:00001967                                         ; DATA XREF: .text:$LN30o
.text:00001967                 mov     ecx, [ebp+this] ; jumptable 00001779 case 24
.text:0000196A                 add     ecx, 1ACh
.text:00001970                 call    ??B?$CObjArray@I@@QAEPAIXZ ; CObjArray<uint>::operator uint *(void)
.text:00001975                 mov     ecx, [ebp+var_8]
.text:00001978                 mov     edx, [eax+ecx*4]
.text:0000197B                 mov     [ebp+var_20], edx
.text:0000197E                 cmp     [ebp+var_20], 0FFFFFFFFh
.text:00001982                 jz      short $LN22     ; jumptable 00001779 default case
.text:00001984                 mov     eax, [ebp+var_20]
.text:00001987                 push    eax             ; struct tagPROPVARIANT *
.text:00001988                 mov     ecx, [ebp+arg_C]
.text:0000198B                 push    ecx             ; this
.text:0000198C                 call    ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z ; NWindows::NCOM::PropVarEm_Set_UInt32(tagPROPVARIANT *,uint)
.text:00001991
.text:00001991 $LN22:                                  ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5Dj
.text:00001991                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dj ...
.text:00001991                 xor     eax, eax        ; jumptable 00001779 default case
.text:00001993
.text:00001993 loc_1993:                               ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+236j
.text:00001993                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+259j
.text:00001993                 push    edx
.text:00001994                 mov     ecx, ebp
.text:00001996                 push    eax
.text:00001997                 lea     edx, $LN29
.text:0000199D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000019A2                 pop     eax
.text:000019A3                 pop     edx
.text:000019A4                 add     esp, 24h
.text:000019A7                 cmp     ebp, esp
.text:000019A9                 call    __RTC_CheckEsp
.text:000019AE                 mov     esp, ebp
.text:000019B0                 pop     ebp
.text:000019B1                 retn    10h
.text:000019B1 ?GetProperty@CHandler@N7z@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:000019B1
.text:000019B1 ; ---------------------------------------------------------------------------
.text:000019B4 $LN29           dd 1                    ; DATA XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+28Bo
.text:000019B8                 dd offset $LN28
.text:000019BC $LN28           dd 0FFFFFFE8h, 8        ; DATA XREF: .text:000019B8o
.text:000019C4                 dd offset $LN27
.text:000019C8 $LN27           dd 0FF8B0076h           ; DATA XREF: .text:000019C4o
.text:000019CC $LN30           dd offset $LN4_0        ; DATA XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Dr
.text:000019CC                 dd offset $LN21         ; jump table for switch statement
.text:000019CC                 dd offset $LN20
.text:000019CC                 dd offset $LN19
.text:000019CC                 dd offset $LN10
.text:000019CC                 dd offset $LN13_1
.text:000019CC                 dd offset $LN12_1
.text:000019CC                 dd offset $LN11_0
.text:000019CC                 dd offset $LN6_0
.text:000019CC                 dd offset $LN8_0
.text:000019CC                 dd offset $LN5_1
.text:000019CC                 dd offset $LN3_0
.text:000019CC                 dd offset $LN2
.text:000019CC                 dd offset $LN15_0
.text:000019CC                 dd offset $LN22
.text:00001A08 $LN26_0         db      0,   0Eh,   0Eh,     1
.text:00001A08                                         ; DATA XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+66r
.text:00001A08                 db      2,     3,     4,     5 ; indirect table for switch statement
.text:00001A08                 db      6,     7,   0Eh,   0Eh
.text:00001A08                 db      8,   0Eh,   0Eh,   0Eh
.text:00001A08                 db      9,   0Eh,   0Ah,   0Bh
.text:00001A08                 db    0Eh,   0Eh,   0Eh,   0Eh
.text:00001A08                 db    0Ch,   0Eh,   0Dh
.text:00001A23                 db 9 dup(0CCh)
.text:00001A2C
.text:00001A2C ; =============== S U B R O U T I N E =======================================
.text:00001A2C
.text:00001A2C ; Attributes: bp-based frame
.text:00001A2C
.text:00001A2C ; int __stdcall NArchive::N7z::SetFileTimeProp_From_UInt64Def(NWindows::NCOM *, NArchive::N7z::CUInt64DefVector *, unsigned int)
.text:00001A2C ?SetFileTimeProp_From_UInt64Def@N7z@NArchive@@YGXPAUtagPROPVARIANT@@ABUCUInt64DefVector@12@H@Z proc near
.text:00001A2C                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+14Ep
.text:00001A2C                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+16Ap ...
.text:00001A2C
.text:00001A2C var_10          = dword ptr -10h
.text:00001A2C var_C           = dword ptr -0Ch
.text:00001A2C var_4           = dword ptr -4
.text:00001A2C arg_0           = dword ptr  8
.text:00001A2C arg_4           = dword ptr  0Ch
.text:00001A2C arg_8           = dword ptr  10h
.text:00001A2C
.text:00001A2C                 push    ebp
.text:00001A2D                 mov     ebp, esp
.text:00001A2F                 sub     esp, 10h
.text:00001A32                 mov     eax, 0CCCCCCCCh
.text:00001A37                 mov     [ebp+var_10], eax
.text:00001A3A                 mov     [ebp+var_C], eax
.text:00001A3D                 mov     [ebp+var_C+4], eax
.text:00001A40                 mov     [ebp+var_4], eax
.text:00001A43                 lea     eax, [ebp+var_C]
.text:00001A46                 push    eax             ; unsigned __int64 *
.text:00001A47                 mov     ecx, [ebp+arg_8]
.text:00001A4A                 push    ecx             ; unsigned int
.text:00001A4B                 mov     ecx, [ebp+arg_4] ; this
.text:00001A4E                 call    ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)
.text:00001A53                 movzx   edx, al
.text:00001A56                 test    edx, edx
.text:00001A58                 jz      short loc_1A6B
.text:00001A5A                 mov     eax, [ebp+var_C+4]
.text:00001A5D                 push    eax             ; unsigned __int64
.text:00001A5E                 mov     ecx, [ebp+var_C]
.text:00001A61                 push    ecx             ; struct tagPROPVARIANT *
.text:00001A62                 mov     edx, [ebp+arg_0]
.text:00001A65                 push    edx             ; this
.text:00001A66                 call    ?PropVarEm_Set_FileTime64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z ; NWindows::NCOM::PropVarEm_Set_FileTime64(tagPROPVARIANT *,unsigned __int64)
.text:00001A6B
.text:00001A6B loc_1A6B:                               ; CODE XREF: NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)+2Cj
.text:00001A6B                 push    edx
.text:00001A6C                 mov     ecx, ebp
.text:00001A6E                 push    eax
.text:00001A6F                 lea     edx, $LN6_1
.text:00001A75                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A7A                 pop     eax
.text:00001A7B                 pop     edx
.text:00001A7C                 add     esp, 10h
.text:00001A7F                 cmp     ebp, esp
.text:00001A81                 call    __RTC_CheckEsp
.text:00001A86                 mov     esp, ebp
.text:00001A88                 pop     ebp
.text:00001A89                 retn    0Ch
.text:00001A89 ?SetFileTimeProp_From_UInt64Def@N7z@NArchive@@YGXPAUtagPROPVARIANT@@ABUCUInt64DefVector@12@H@Z endp
.text:00001A89
.text:00001A89 ; ---------------------------------------------------------------------------
.text:00001A8C $LN6_1          dd 1                    ; DATA XREF: NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)+43o
.text:00001A90                 dd offset $LN5_2
.text:00001A94 $LN5_2          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:00001A90o
.text:00001A9C                 dd offset $LN4_1        ; "value"
.text:00001AA0 $LN4_1          db 'value',0            ; DATA XREF: .text:00001A9Co
.text:00001AA6                 db 6 dup(0CCh)
.text:00001AAC
.text:00001AAC ; =============== S U B R O U T I N E =======================================
.text:00001AAC
.text:00001AAC ; Attributes: bp-based frame
.text:00001AAC
.text:00001AAC ; __int32 __cdecl NArchive::N7z::CHandler::Open(NArchive::N7z::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00001AAC                 public ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001AAC ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00001AAC                                         ; DATA XREF: .rdata:00002074o
.text:00001AAC
.text:00001AAC var_E8          = dword ptr -0E8h
.text:00001AAC var_E4          = dword ptr -0E4h
.text:00001AAC var_E0          = dword ptr -0E0h
.text:00001AAC var_DC          = dword ptr -0DCh
.text:00001AAC var_D8          = dword ptr -0D8h
.text:00001AAC var_D4          = dword ptr -0D4h
.text:00001AAC var_C8          = dword ptr -0C8h
.text:00001AAC var_C4          = dword ptr -0C4h
.text:00001AAC var_C0          = dword ptr -0C0h
.text:00001AAC var_BC          = dword ptr -0BCh
.text:00001AAC var_B8          = dword ptr -0B8h
.text:00001AAC var_B0          = byte ptr -0B0h
.text:00001AAC var_28          = byte ptr -28h
.text:00001AAC var_1C          = byte ptr -1Ch
.text:00001AAC var_14          = dword ptr -14h
.text:00001AAC var_10          = dword ptr -10h
.text:00001AAC var_C           = dword ptr -0Ch
.text:00001AAC var_4           = dword ptr -4
.text:00001AAC this            = dword ptr  8
.text:00001AAC arg_4           = dword ptr  0Ch
.text:00001AAC arg_8           = dword ptr  10h
.text:00001AAC arg_C           = dword ptr  14h
.text:00001AAC
.text:00001AAC ; FUNCTION CHUNK AT .text:00001D24 SIZE 00000009 BYTES
.text:00001AAC ; FUNCTION CHUNK AT .text:00001D35 SIZE 0000000C BYTES
.text:00001AAC ; FUNCTION CHUNK AT .text:00001D6D SIZE 0000003C BYTES
.text:00001AAC
.text:00001AAC                 push    ebp
.text:00001AAD                 mov     ebp, esp
.text:00001AAF                 push    0FFFFFFFFh
.text:00001AB1                 push    offset __ehhandler$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001AB6                 mov     eax, large fs:0
.text:00001ABC                 push    eax
.text:00001ABD                 push    ecx
.text:00001ABE                 sub     esp, 0D8h
.text:00001AC4                 push    ebx
.text:00001AC5                 push    esi
.text:00001AC6                 push    edi
.text:00001AC7                 lea     edi, [ebp+var_E8]
.text:00001ACD                 mov     ecx, 36h ; '6'
.text:00001AD2                 mov     eax, 0CCCCCCCCh
.text:00001AD7                 rep stosd
.text:00001AD9                 mov     eax, dword ptr ds:___security_cookie
.text:00001ADE                 xor     eax, ebp
.text:00001AE0                 mov     [ebp+var_14], eax
.text:00001AE3                 push    eax
.text:00001AE4                 lea     eax, [ebp+var_C]
.text:00001AE7                 mov     large fs:0, eax
.text:00001AED                 mov     [ebp+var_10], esp
.text:00001AF0                 mov     [ebp+var_4], 0
.text:00001AF7                 mov     esi, esp
.text:00001AF9                 mov     eax, [ebp+this]
.text:00001AFC                 push    eax
.text:00001AFD                 mov     ecx, [ebp+this]
.text:00001B00                 mov     edx, [ecx]
.text:00001B02                 mov     eax, [edx+10h]
.text:00001B05                 call    eax
.text:00001B07                 cmp     esi, esp
.text:00001B09                 call    __RTC_CheckEsp
.text:00001B0E                 mov     ecx, [ebp+this]
.text:00001B11                 add     ecx, 1E4h
.text:00001B17                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00001B1C                 mov     byte ptr [ebp+var_4], 1
.text:00001B20                 mov     ecx, [ebp+arg_C]
.text:00001B23                 push    ecx
.text:00001B24                 lea     ecx, [ebp+var_1C]
.text:00001B27                 call    ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)
.text:00001B2C                 mov     byte ptr [ebp+var_4], 2
.text:00001B30                 lea     ecx, [ebp+var_28]
.text:00001B33                 call    ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001B38                 mov     [ebp+var_D4], eax
.text:00001B3E                 mov     byte ptr [ebp+var_4], 3
.text:00001B42                 cmp     [ebp+arg_C], 0
.text:00001B46                 jz      short loc_1B6A
.text:00001B48                 lea     ecx, [ebp+var_28]
.text:00001B4B                 call    ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&(void)
.text:00001B50                 mov     [ebp+var_D8], eax
.text:00001B56                 mov     edx, [ebp+var_D8]
.text:00001B5C                 push    edx
.text:00001B5D                 push    offset _IID_ICryptoGetTextPassword
.text:00001B62                 lea     ecx, [ebp+var_1C]
.text:00001B65                 call    ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>(_GUID const &,ICryptoGetTextPassword * *)
.text:00001B6A
.text:00001B6A loc_1B6A:                               ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+9Aj
.text:00001B6A                 mov     eax, [ebp+this]
.text:00001B6D                 movzx   ecx, byte ptr [eax+83h]
.text:00001B74                 push    ecx             ; bool
.text:00001B75                 lea     ecx, [ebp+var_B0] ; this
.text:00001B7B                 call    ??0CInArchive@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CInArchive::CInArchive(bool)
.text:00001B80                 mov     [ebp+var_DC], eax
.text:00001B86                 mov     byte ptr [ebp+var_4], 4
.text:00001B8A                 mov     edx, [ebp+this]
.text:00001B8D                 mov     byte ptr [edx+1C0h], 0
.text:00001B94                 mov     eax, [ebp+arg_8]
.text:00001B97                 push    eax             ; unsigned __int64 *
.text:00001B98                 mov     ecx, [ebp+arg_4]
.text:00001B9B                 push    ecx             ; struct IInStream *
.text:00001B9C                 lea     ecx, [ebp+var_B0] ; this
.text:00001BA2                 call    ?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z ; NArchive::N7z::CInArchive::Open(IInStream *,unsigned __int64 const *)
.text:00001BA7                 mov     [ebp+var_E0], eax
.text:00001BAD                 mov     edx, [ebp+var_E0]
.text:00001BB3                 mov     [ebp+var_B8], edx
.text:00001BB9                 cmp     [ebp+var_B8], 0
.text:00001BC0                 jz      short loc_1C00
.text:00001BC2                 mov     eax, [ebp+var_B8]
.text:00001BC8                 mov     [ebp+var_C4], eax
.text:00001BCE                 mov     byte ptr [ebp+var_4], 3
.text:00001BD2                 lea     ecx, [ebp+var_B0] ; this
.text:00001BD8                 call    ??1CInArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchive::~CInArchive(void)
.text:00001BDD                 mov     byte ptr [ebp+var_4], 2
.text:00001BE1                 lea     ecx, [ebp+var_28]
.text:00001BE4                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001BE9                 mov     byte ptr [ebp+var_4], 1
.text:00001BED                 lea     ecx, [ebp+var_1C]
.text:00001BF0                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00001BF5                 mov     eax, [ebp+var_C4]
.text:00001BFB                 jmp     loc_1D6D
.text:00001C00 ; ---------------------------------------------------------------------------
.text:00001C00
.text:00001C00 loc_1C00:                               ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+114j
.text:00001C00                 mov     ecx, [ebp+this]
.text:00001C03                 mov     byte ptr [ecx+1C0h], 1
.text:00001C0A                 lea     ecx, [ebp+var_28]
.text:00001C0D                 call    ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *(void)
.text:00001C12                 mov     [ebp+var_E4], eax
.text:00001C18                 mov     edx, [ebp+this]
.text:00001C1B                 add     edx, 1CCh
.text:00001C21                 push    edx             ; struct UString *
.text:00001C22                 mov     eax, [ebp+this]
.text:00001C25                 add     eax, 1C9h
.text:00001C2A                 push    eax             ; bool *
.text:00001C2B                 mov     ecx, [ebp+this]
.text:00001C2E                 add     ecx, 1C8h
.text:00001C34                 push    ecx             ; bool *
.text:00001C35                 mov     edx, [ebp+var_E4]
.text:00001C3B                 push    edx             ; struct ICryptoGetTextPassword *
.text:00001C3C                 mov     eax, [ebp+this]
.text:00001C3F                 add     eax, 90h ; 'É'
.text:00001C44                 push    eax             ; struct NArchive::N7z::CDbEx *
.text:00001C45                 lea     ecx, [ebp+var_B0] ; this
.text:00001C4B                 call    ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CDbEx &,ICryptoGetTextPassword *,bool &,bool &,UString &)
.text:00001C50                 mov     [ebp+var_E8], eax
.text:00001C56                 mov     ecx, [ebp+var_E8]
.text:00001C5C                 mov     [ebp+var_BC], ecx
.text:00001C62                 mov     edx, [ebp+var_BC]
.text:00001C68                 mov     [ebp+var_C0], edx
.text:00001C6E                 cmp     [ebp+var_C0], 0
.text:00001C75                 jz      short loc_1CB5
.text:00001C77                 mov     eax, [ebp+var_C0]
.text:00001C7D                 mov     [ebp+var_C8], eax
.text:00001C83                 mov     byte ptr [ebp+var_4], 3
.text:00001C87                 lea     ecx, [ebp+var_B0] ; this
.text:00001C8D                 call    ??1CInArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchive::~CInArchive(void)
.text:00001C92                 mov     byte ptr [ebp+var_4], 2
.text:00001C96                 lea     ecx, [ebp+var_28]
.text:00001C99                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001C9E                 mov     byte ptr [ebp+var_4], 1
.text:00001CA2                 lea     ecx, [ebp+var_1C]
.text:00001CA5                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00001CAA                 mov     eax, [ebp+var_C8]
.text:00001CB0                 jmp     loc_1D6D
.text:00001CB5 ; ---------------------------------------------------------------------------
.text:00001CB5
.text:00001CB5 loc_1CB5:                               ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1C9j
.text:00001CB5                 mov     ecx, [ebp+arg_4]
.text:00001CB8                 push    ecx
.text:00001CB9                 mov     ecx, [ebp+this]
.text:00001CBC                 add     ecx, 88h ; 'ê'
.text:00001CC2                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00001CC7                 mov     byte ptr [ebp+var_4], 3
.text:00001CCB                 lea     ecx, [ebp+var_B0] ; this
.text:00001CD1                 call    ??1CInArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchive::~CInArchive(void)
.text:00001CD6                 mov     byte ptr [ebp+var_4], 2
.text:00001CDA                 lea     ecx, [ebp+var_28]
.text:00001CDD                 call    ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text:00001CE2                 mov     byte ptr [ebp+var_4], 1
.text:00001CE6                 lea     ecx, [ebp+var_1C]
.text:00001CE9                 call    ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text:00001CEE                 jmp     short $LN9_1
.text:00001CEE ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00001CEE
.text:00001CF0
.text:00001CF0 ; =============== S U B R O U T I N E =======================================
.text:00001CF0
.text:00001CF0
.text:00001CF0 __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00001CF0                                         ; DATA XREF: .xdata$x:000021C4o
.text:00001CF0                 mov     esi, esp
.text:00001CF2                 mov     edx, [ebp+8]
.text:00001CF5                 push    edx
.text:00001CF6                 mov     eax, [ebp+8]
.text:00001CF9                 mov     ecx, [eax]
.text:00001CFB                 mov     edx, [ecx+10h]
.text:00001CFE                 call    edx
.text:00001D00                 cmp     esi, esp
.text:00001D02                 call    __RTC_CheckEsp
.text:00001D07                 mov     dword ptr [ebp-0CCh], 8007000Eh
.text:00001D11                 mov     dword ptr [ebp-4], 0
.text:00001D18                 mov     eax, offset $LN16
.text:00001D1D                 retn
.text:00001D1D __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:00001D1D
.text:00001D1E ; ---------------------------------------------------------------------------
.text:00001D1E                 mov     eax, offset $LN9_1
.text:00001D23                 retn
.text:00001D24 ; ---------------------------------------------------------------------------
.text:00001D24 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001D24
.text:00001D24 $LN9_1:                                 ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+242j
.text:00001D24                                         ; DATA XREF: .text:00001D1Eo
.text:00001D24                 mov     [ebp+var_4], 0
.text:00001D2B                 jmp     short loc_1D35
.text:00001D2B ; END OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001D2D
.text:00001D2D ; =============== S U B R O U T I N E =======================================
.text:00001D2D
.text:00001D2D
.text:00001D2D $LN16           proc near               ; DATA XREF: __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+28o
.text:00001D2D                 mov     eax, [ebp-0CCh]
.text:00001D33                 jmp     short loc_1D6D
.text:00001D33 $LN16           endp
.text:00001D33
.text:00001D35 ; ---------------------------------------------------------------------------
.text:00001D35 ; START OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001D35
.text:00001D35 loc_1D35:                               ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+27Fj
.text:00001D35                 mov     ecx, [ebp+this] ; this
.text:00001D38                 call    ?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CHandler::FillPopIDs(void)
.text:00001D3D                 xor     eax, eax
.text:00001D3F                 jmp     short loc_1D6D
.text:00001D3F ; END OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001D41
.text:00001D41 ; =============== S U B R O U T I N E =======================================
.text:00001D41
.text:00001D41
.text:00001D41 __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 proc near
.text:00001D41                                         ; DATA XREF: .xdata$x:000021B4o
.text:00001D41                 mov     dword ptr [ebp-0D0h], 8007000Eh
.text:00001D4B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001D52                 mov     eax, offset $LN18
.text:00001D57                 retn
.text:00001D57 __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 endp
.text:00001D57
.text:00001D58 ; ---------------------------------------------------------------------------
.text:00001D58                 mov     eax, offset __tryend$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$3
.text:00001D5D                 retn
.text:00001D5E ; ---------------------------------------------------------------------------
.text:00001D5E
.text:00001D5E __tryend$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$3:
.text:00001D5E                                         ; DATA XREF: .text:00001D58o
.text:00001D5E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001D65                 jmp     short loc_1D6D
.text:00001D67 ; ---------------------------------------------------------------------------
.text:00001D67
.text:00001D67 $LN18:                                  ; DATA XREF: __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2+11o
.text:00001D67                 mov     eax, [ebp-0D0h]
.text:00001D6D ; START OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001D6D
.text:00001D6D loc_1D6D:                               ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+14Fj
.text:00001D6D                                         ; NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+204j ...
.text:00001D6D                 push    edx
.text:00001D6E                 mov     ecx, ebp
.text:00001D70                 push    eax
.text:00001D71                 lea     edx, $LN26_1
.text:00001D77                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001D7C                 pop     eax
.text:00001D7D                 pop     edx
.text:00001D7E                 mov     ecx, [ebp+var_C]
.text:00001D81                 mov     large fs:0, ecx
.text:00001D88                 pop     ecx
.text:00001D89                 pop     edi
.text:00001D8A                 pop     esi
.text:00001D8B                 pop     ebx
.text:00001D8C                 mov     ecx, [ebp+var_14]
.text:00001D8F                 xor     ecx, ebp
.text:00001D91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001D96                 add     esp, 0E8h
.text:00001D9C                 cmp     ebp, esp
.text:00001D9E                 call    __RTC_CheckEsp
.text:00001DA3                 mov     esp, ebp
.text:00001DA5                 pop     ebp
.text:00001DA6                 retn    10h
.text:00001DA6 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001DA6 ; ---------------------------------------------------------------------------
.text:00001DA9                 align 4
.text:00001DAC $LN26_1         dd 3                    ; DATA XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+2C5o
.text:00001DB0                 dd offset $LN25_0
.text:00001DB4 $LN25_0         dd 0FFFFFFE4h, 4        ; DATA XREF: .text:00001DB0o
.text:00001DBC                 dd offset $LN21_0       ; "openArchiveCallbackTemp"
.text:00001DC0                 dd 0FFFFFFD8h, 4
.text:00001DC8                 dd offset $LN22_0       ; "getTextPassword"
.text:00001DCC                 dd 0FFFFFF50h, 80h
.text:00001DD4                 dd offset $LN23         ; "archive"
.text:00001DD8 $LN23           db 'archive',0          ; DATA XREF: .text:00001DD4o
.text:00001DE0 $LN22_0         db 'getTextPassword',0  ; DATA XREF: .text:00001DC8o
.text:00001DF0 $LN21_0         db 'openArchiveCallbackTemp',0 ; DATA XREF: .text:00001DBCo
.text:00001E08                 db 4 dup(0CCh)
.text:00001E0C
.text:00001E0C ; =============== S U B R O U T I N E =======================================
.text:00001E0C
.text:00001E0C ; Attributes: bp-based frame
.text:00001E0C
.text:00001E0C ; __int32 __cdecl NArchive::N7z::CHandler::Close(NArchive::N7z::CHandler *this)
.text:00001E0C                 public ?Close@CHandler@N7z@NArchive@@UAGJXZ
.text:00001E0C ?Close@CHandler@N7z@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:00002078o
.text:00001E0C
.text:00001E0C var_14          = dword ptr -14h
.text:00001E0C var_10          = dword ptr -10h
.text:00001E0C var_C           = dword ptr -0Ch
.text:00001E0C var_4           = dword ptr -4
.text:00001E0C this            = dword ptr  8
.text:00001E0C
.text:00001E0C ; FUNCTION CHUNK AT .text:00001EAC SIZE 0000001E BYTES
.text:00001E0C
.text:00001E0C                 push    ebp
.text:00001E0D                 mov     ebp, esp
.text:00001E0F                 push    0FFFFFFFFh
.text:00001E11                 push    offset __ehhandler$?Close@CHandler@N7z@NArchive@@UAGJXZ
.text:00001E16                 mov     eax, large fs:0
.text:00001E1C                 push    eax
.text:00001E1D                 push    ecx
.text:00001E1E                 push    ecx
.text:00001E1F                 push    ebx
.text:00001E20                 push    esi
.text:00001E21                 push    edi
.text:00001E22                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00001E29                 mov     eax, dword ptr ds:___security_cookie
.text:00001E2E                 xor     eax, ebp
.text:00001E30                 push    eax
.text:00001E31                 lea     eax, [ebp+var_C]
.text:00001E34                 mov     large fs:0, eax
.text:00001E3A                 mov     [ebp+var_10], esp
.text:00001E3D                 mov     [ebp+var_4], 0
.text:00001E44                 mov     ecx, [ebp+this]
.text:00001E47                 add     ecx, 88h ; 'ê'
.text:00001E4D                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:00001E52                 mov     ecx, [ebp+this]
.text:00001E55                 add     ecx, 90h ; 'É'  ; this
.text:00001E5B                 call    ?Clear@CDbEx@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CDbEx::Clear(void)
.text:00001E60                 mov     eax, [ebp+this]
.text:00001E63                 mov     byte ptr [eax+1C8h], 0
.text:00001E6A                 mov     ecx, [ebp+this]
.text:00001E6D                 mov     byte ptr [ecx+1C9h], 0
.text:00001E74                 mov     ecx, [ebp+this]
.text:00001E77                 add     ecx, 1CCh       ; this
.text:00001E7D                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00001E82                 xor     eax, eax
.text:00001E84                 jmp     short loc_1EAC
.text:00001E84 ?Close@CHandler@N7z@NArchive@@UAGJXZ endp
.text:00001E84
.text:00001E86
.text:00001E86 ; =============== S U B R O U T I N E =======================================
.text:00001E86
.text:00001E86
.text:00001E86 __catch$?Close@CHandler@N7z@NArchive@@UAGJXZ$0 proc near
.text:00001E86                                         ; DATA XREF: .xdata$x:00002258o
.text:00001E86                 mov     dword ptr [ebp-14h], 8007000Eh
.text:00001E8D                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001E94                 mov     eax, offset $LN7
.text:00001E99                 retn
.text:00001E99 __catch$?Close@CHandler@N7z@NArchive@@UAGJXZ$0 endp
.text:00001E99
.text:00001E9A ; ---------------------------------------------------------------------------
.text:00001E9A                 mov     eax, offset __tryend$?Close@CHandler@N7z@NArchive@@UAGJXZ$1
.text:00001E9F                 retn
.text:00001EA0 ; ---------------------------------------------------------------------------
.text:00001EA0
.text:00001EA0 __tryend$?Close@CHandler@N7z@NArchive@@UAGJXZ$1: ; DATA XREF: .text:00001E9Ao
.text:00001EA0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001EA7                 jmp     short loc_1EAC
.text:00001EA9 ; ---------------------------------------------------------------------------
.text:00001EA9
.text:00001EA9 $LN7:                                   ; DATA XREF: __catch$?Close@CHandler@N7z@NArchive@@UAGJXZ$0+Eo
.text:00001EA9                 mov     eax, [ebp-14h]
.text:00001EAC ; START OF FUNCTION CHUNK FOR ?Close@CHandler@N7z@NArchive@@UAGJXZ
.text:00001EAC
.text:00001EAC loc_1EAC:                               ; CODE XREF: NArchive::N7z::CHandler::Close(void)+78j
.text:00001EAC                                         ; .text:00001EA7j
.text:00001EAC                 mov     ecx, [ebp+var_C]
.text:00001EAF                 mov     large fs:0, ecx
.text:00001EB6                 pop     ecx
.text:00001EB7                 pop     edi
.text:00001EB8                 pop     esi
.text:00001EB9                 pop     ebx
.text:00001EBA                 add     esp, 14h
.text:00001EBD                 cmp     ebp, esp
.text:00001EBF                 call    __RTC_CheckEsp
.text:00001EC4                 mov     esp, ebp
.text:00001EC6                 pop     ebp
.text:00001EC7                 retn    4
.text:00001EC7 ; END OF FUNCTION CHUNK FOR ?Close@CHandler@N7z@NArchive@@UAGJXZ
.text:00001EC7 ; ---------------------------------------------------------------------------
.text:00001ECA                 align 4
.text:00001ECA _text           ends
.text:00001ECA
.text$x:00001ECC ; ===========================================================================
.text$x:00001ECC
.text$x:00001ECC ; Segment type: Pure code
.text$x:00001ECC ; Segment permissions: Read/Execute
.text$x:00001ECC _text$x         segment para public 'CODE' use32
.text$x:00001ECC                 assume cs:_text$x
.text$x:00001ECC                 ;org 1ECCh
.text$x:00001ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001ECC
.text$x:00001ECC ; =============== S U B R O U T I N E =======================================
.text$x:00001ECC
.text$x:00001ECC
.text$x:00001ECC __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00001ECC                                         ; DATA XREF: .xdata$x:000020C4o
.text$x:00001ECC                 mov     ecx, [ebp-10h]
.text$x:00001ECF                 add     ecx, 18h        ; this
.text$x:00001ED2                 jmp     ??1COutHandler@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutHandler::~COutHandler(void)
.text$x:00001ED2 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00001ED2
.text$x:00001ED7
.text$x:00001ED7 ; =============== S U B R O U T I N E =======================================
.text$x:00001ED7
.text$x:00001ED7
.text$x:00001ED7 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00001ED7                                         ; DATA XREF: .xdata$x:000020CCo
.text$x:00001ED7                 mov     ecx, [ebp-10h]
.text$x:00001EDA                 add     ecx, 88h ; 'ê'
.text$x:00001EE0                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00001EE0 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00001EE0
.text$x:00001EE5
.text$x:00001EE5 ; =============== S U B R O U T I N E =======================================
.text$x:00001EE5
.text$x:00001EE5
.text$x:00001EE5 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00001EE5                                         ; DATA XREF: .xdata$x:000020D4o
.text$x:00001EE5                 mov     ecx, [ebp-10h]
.text$x:00001EE8                 add     ecx, 90h ; 'É'  ; this
.text$x:00001EEE                 jmp     ??1CDbEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDbEx::~CDbEx(void)
.text$x:00001EEE __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00001EEE
.text$x:00001EF3
.text$x:00001EF3 ; =============== S U B R O U T I N E =======================================
.text$x:00001EF3
.text$x:00001EF3
.text$x:00001EF3 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00001EF3                                         ; DATA XREF: .xdata$x:000020DCo
.text$x:00001EF3                 mov     ecx, [ebp-10h]
.text$x:00001EF6                 add     ecx, 1CCh       ; this
.text$x:00001EFC                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00001EFC __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00001EFC
.text$x:00001F01
.text$x:00001F01 ; =============== S U B R O U T I N E =======================================
.text$x:00001F01
.text$x:00001F01
.text$x:00001F01 __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00001F01                                         ; DATA XREF: .xdata$x:000020E4o
.text$x:00001F01                 mov     ecx, [ebp-10h]
.text$x:00001F04                 add     ecx, 1D8h
.text$x:00001F0A                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:00001F0A __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00001F0A
.text$x:00001F0F
.text$x:00001F0F ; =============== S U B R O U T I N E =======================================
.text$x:00001F0F
.text$x:00001F0F
.text$x:00001F0F __ehhandler$??0CHandler@N7z@NArchive@@QAE@XZ proc near
.text$x:00001F0F                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+5o
.text$x:00001F0F
.text$x:00001F0F arg_4           = dword ptr  8
.text$x:00001F0F
.text$x:00001F0F                 mov     edx, [esp+arg_4]
.text$x:00001F13                 lea     eax, [edx+0Ch]
.text$x:00001F16                 mov     ecx, [edx-8]
.text$x:00001F19                 xor     ecx, eax
.text$x:00001F1B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F20                 mov     eax, offset __ehfuncinfo$??0CHandler@N7z@NArchive@@QAE@XZ
.text$x:00001F25                 jmp     ___CxxFrameHandler3
.text$x:00001F25 __ehhandler$??0CHandler@N7z@NArchive@@QAE@XZ endp
.text$x:00001F25
.text$x:00001F2A
.text$x:00001F2A ; =============== S U B R O U T I N E =======================================
.text$x:00001F2A
.text$x:00001F2A
.text$x:00001F2A __unwindfunclet$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z$0 proc near
.text$x:00001F2A                                         ; DATA XREF: .xdata$x:000020ECo
.text$x:00001F2A                 lea     ecx, [ebp-20h]  ; this
.text$x:00001F2D                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F2D __unwindfunclet$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z$0 endp
.text$x:00001F2D
.text$x:00001F32
.text$x:00001F32 ; =============== S U B R O U T I N E =======================================
.text$x:00001F32
.text$x:00001F32
.text$x:00001F32 __ehhandler$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z proc near
.text$x:00001F32                                         ; DATA XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+5o
.text$x:00001F32
.text$x:00001F32 arg_4           = dword ptr  8
.text$x:00001F32
.text$x:00001F32                 mov     edx, [esp+arg_4]
.text$x:00001F36                 lea     eax, [edx+0Ch]
.text$x:00001F39                 mov     ecx, [edx-1Ch]
.text$x:00001F3C                 xor     ecx, eax
.text$x:00001F3E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F43                 mov     eax, offset __ehfuncinfo$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z
.text$x:00001F48                 jmp     ___CxxFrameHandler3
.text$x:00001F48 __ehhandler$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z endp
.text$x:00001F48
.text$x:00001F4D
.text$x:00001F4D ; =============== S U B R O U T I N E =======================================
.text$x:00001F4D
.text$x:00001F4D
.text$x:00001F4D __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:00001F4D                                         ; DATA XREF: .xdata$x:00002144o
.text$x:00001F4D                 lea     ecx, [ebp-28h]  ; this
.text$x:00001F50                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00001F50 __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:00001F50
.text$x:00001F55
.text$x:00001F55 ; =============== S U B R O U T I N E =======================================
.text$x:00001F55
.text$x:00001F55
.text$x:00001F55 __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 proc near
.text$x:00001F55                                         ; DATA XREF: .xdata$x:0000214Co
.text$x:00001F55                 lea     ecx, [ebp-3Ch]  ; this
.text$x:00001F58                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F58 __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 endp
.text$x:00001F58
.text$x:00001F5D
.text$x:00001F5D ; =============== S U B R O U T I N E =======================================
.text$x:00001F5D
.text$x:00001F5D
.text$x:00001F5D __ehhandler$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:00001F5D                                         ; DATA XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5o
.text$x:00001F5D
.text$x:00001F5D arg_4           = dword ptr  8
.text$x:00001F5D
.text$x:00001F5D                 mov     edx, [esp+arg_4]
.text$x:00001F61                 lea     eax, [edx+0Ch]
.text$x:00001F64                 mov     ecx, [edx-9Ch]
.text$x:00001F6A                 xor     ecx, eax
.text$x:00001F6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F71                 mov     ecx, [edx-8]
.text$x:00001F74                 xor     ecx, eax
.text$x:00001F76                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001F7B                 mov     eax, offset __ehfuncinfo$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:00001F80                 jmp     ___CxxFrameHandler3
.text$x:00001F80 __ehhandler$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:00001F80
.text$x:00001F85
.text$x:00001F85 ; =============== S U B R O U T I N E =======================================
.text$x:00001F85
.text$x:00001F85
.text$x:00001F85 __unwindfunclet$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z$0 proc near
.text$x:00001F85                                         ; DATA XREF: .xdata$x:00002180o
.text$x:00001F85                 lea     ecx, [ebp-1E0h] ; this
.text$x:00001F8B                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001F8B __unwindfunclet$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z$0 endp
.text$x:00001F8B
.text$x:00001F90
.text$x:00001F90 ; =============== S U B R O U T I N E =======================================
.text$x:00001F90
.text$x:00001F90
.text$x:00001F90 __ehhandler$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z proc near
.text$x:00001F90                                         ; DATA XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+5o
.text$x:00001F90
.text$x:00001F90 arg_4           = dword ptr  8
.text$x:00001F90
.text$x:00001F90                 mov     edx, [esp+arg_4]
.text$x:00001F94                 lea     eax, [edx+0Ch]
.text$x:00001F97                 mov     ecx, [edx-1ECh]
.text$x:00001F9D                 xor     ecx, eax
.text$x:00001F9F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FA4                 mov     ecx, [edx-4]
.text$x:00001FA7                 xor     ecx, eax
.text$x:00001FA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FAE                 mov     eax, offset __ehfuncinfo$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z
.text$x:00001FB3                 jmp     ___CxxFrameHandler3
.text$x:00001FB3 __ehhandler$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z endp
.text$x:00001FB3
.text$x:00001FB8
.text$x:00001FB8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FB8
.text$x:00001FB8
.text$x:00001FB8 __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 proc near
.text$x:00001FB8                                         ; DATA XREF: .xdata$x:00002228o
.text$x:00001FB8                 lea     ecx, [ebp-1Ch]
.text$x:00001FBB                 jmp     ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)
.text$x:00001FBB __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4 endp
.text$x:00001FBB
.text$x:00001FC0
.text$x:00001FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00001FC0
.text$x:00001FC0
.text$x:00001FC0 __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 proc near
.text$x:00001FC0                                         ; DATA XREF: .xdata$x:00002230o
.text$x:00001FC0                 lea     ecx, [ebp-28h]
.text$x:00001FC3                 jmp     ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)
.text$x:00001FC3 __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 endp
.text$x:00001FC3
.text$x:00001FC8
.text$x:00001FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FC8
.text$x:00001FC8
.text$x:00001FC8 __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 proc near
.text$x:00001FC8                                         ; DATA XREF: .xdata$x:00002238o
.text$x:00001FC8                 lea     ecx, [ebp-0B0h] ; this
.text$x:00001FCE                 jmp     ??1CInArchive@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchive::~CInArchive(void)
.text$x:00001FCE __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 endp
.text$x:00001FCE
.text$x:00001FD3
.text$x:00001FD3 ; =============== S U B R O U T I N E =======================================
.text$x:00001FD3
.text$x:00001FD3
.text$x:00001FD3 __ehhandler$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00001FD3                                         ; DATA XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00001FD3
.text$x:00001FD3 arg_4           = dword ptr  8
.text$x:00001FD3
.text$x:00001FD3                 mov     edx, [esp+arg_4]
.text$x:00001FD7                 lea     eax, [edx+0Ch]
.text$x:00001FDA                 mov     ecx, [edx-0ECh]
.text$x:00001FE0                 xor     ecx, eax
.text$x:00001FE2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FE7                 mov     ecx, [edx-8]
.text$x:00001FEA                 xor     ecx, eax
.text$x:00001FEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FF1                 mov     eax, offset __ehfuncinfo$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:00001FF6                 jmp     ___CxxFrameHandler3
.text$x:00001FF6 __ehhandler$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:00001FF6
.text$x:00001FFB
.text$x:00001FFB ; =============== S U B R O U T I N E =======================================
.text$x:00001FFB
.text$x:00001FFB
.text$x:00001FFB __ehhandler$?Close@CHandler@N7z@NArchive@@UAGJXZ proc near
.text$x:00001FFB                                         ; DATA XREF: NArchive::N7z::CHandler::Close(void)+5o
.text$x:00001FFB
.text$x:00001FFB arg_4           = dword ptr  8
.text$x:00001FFB
.text$x:00001FFB                 mov     edx, [esp+arg_4]
.text$x:00001FFF                 lea     eax, [edx+0Ch]
.text$x:00002002                 mov     ecx, [edx-18h]
.text$x:00002005                 xor     ecx, eax
.text$x:00002007                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000200C                 mov     eax, offset __ehfuncinfo$?Close@CHandler@N7z@NArchive@@UAGJXZ
.text$x:00002011                 jmp     ___CxxFrameHandler3
.text$x:00002011 __ehhandler$?Close@CHandler@N7z@NArchive@@UAGJXZ endp
.text$x:00002011
.text$x:00002011 ; ---------------------------------------------------------------------------
.text$x:00002016                 align 4
.text$x:00002016 _text$x         ends
.text$x:00002016
.rdata:00002018 ; ===========================================================================
.rdata:00002018
.rdata:00002018 ; Segment type: Pure data
.rdata:00002018 ; Segment permissions: Read
.rdata:00002018 _rdata          segment dword public 'DATA' use32
.rdata:00002018                 assume cs:_rdata
.rdata:00002018                 ;org 2018h
.rdata:00002018 ; COMDAT (pick largest)
.rdata:00002018                 dd offset ??_R4CHandler@N7z@NArchive@@6BIOutArchive@@@ ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:0000201C                 public ??_7CHandler@N7z@NArchive@@6BIOutArchive@@@
.rdata:0000201C ; const NArchive::N7z::CHandler::`vftable'{for `IOutArchive'}
.rdata:0000201C ??_7CHandler@N7z@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@N7z@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:0000201C                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+93o
.rdata:0000201C                                         ; [thunk]:NArchive::N7z::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00002020                 dd offset ?AddRef@CHandler@N7z@NArchive@@WM@AGKXZ ; [thunk]:NArchive::N7z::CHandler::AddRef`adjustor{12}' (void)
.rdata:00002024                 dd offset ?Release@CHandler@N7z@NArchive@@WM@AGKXZ ; [thunk]:NArchive::N7z::CHandler::Release`adjustor{12}' (void)
.rdata:00002028                 dd offset ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::N7z::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:0000202C                 dd offset ?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetFileTimeType(uint *)
.rdata:0000202C _rdata          ends
.rdata:0000202C
.rdata:00002030 ; ===========================================================================
.rdata:00002030
.rdata:00002030 ; Segment type: Pure data
.rdata:00002030 ; Segment permissions: Read
.rdata:00002030 _rdata          segment dword public 'DATA' use32
.rdata:00002030                 assume cs:_rdata
.rdata:00002030                 ;org 2030h
.rdata:00002030 ; COMDAT (pick largest)
.rdata:00002030                 dd offset ??_R4CHandler@N7z@NArchive@@6BISetProperties@@@ ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00002034                 public ??_7CHandler@N7z@NArchive@@6BISetProperties@@@
.rdata:00002034 ; const NArchive::N7z::CHandler::`vftable'{for `ISetProperties'}
.rdata:00002034 ??_7CHandler@N7z@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@N7z@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00002034                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+89o
.rdata:00002034                                         ; [thunk]:NArchive::N7z::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00002038                 dd offset ?AddRef@CHandler@N7z@NArchive@@W7AGKXZ ; [thunk]:NArchive::N7z::CHandler::AddRef`adjustor{8}' (void)
.rdata:0000203C                 dd offset ?Release@CHandler@N7z@NArchive@@W7AGKXZ ; [thunk]:NArchive::N7z::CHandler::Release`adjustor{8}' (void)
.rdata:00002040                 dd offset ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::N7z::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00002040 _rdata          ends
.rdata:00002040
.rdata:00002044 ; ===========================================================================
.rdata:00002044
.rdata:00002044 ; Segment type: Pure data
.rdata:00002044 ; Segment permissions: Read
.rdata:00002044 _rdata          segment dword public 'DATA' use32
.rdata:00002044                 assume cs:_rdata
.rdata:00002044                 ;org 2044h
.rdata:00002044 ; COMDAT (pick largest)
.rdata:00002044                 dd offset ??_R4CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@ ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IArchiveGetRawProps'}
.rdata:00002048                 public ??_7CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@
.rdata:00002048 ; const NArchive::N7z::CHandler::`vftable'{for `IArchiveGetRawProps'}
.rdata:00002048 ??_7CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@ dd offset ?QueryInterface@CHandler@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00002048                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+7Fo
.rdata:00002048                                         ; [thunk]:NArchive::N7z::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000204C                 dd offset ?AddRef@CHandler@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CHandler::AddRef`adjustor{4}' (void)
.rdata:00002050                 dd offset ?Release@CHandler@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CHandler::Release`adjustor{4}' (void)
.rdata:00002054                 dd offset ?GetParent@CHandler@N7z@NArchive@@UAGJIPAI0@Z ; NArchive::N7z::CHandler::GetParent(uint,uint *,uint *)
.rdata:00002058                 dd offset ?GetRawProp@CHandler@N7z@NArchive@@UAGJIKPAPBXPAI1@Z ; NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)
.rdata:0000205C                 dd offset ?GetNumRawProps@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetNumRawProps(uint *)
.rdata:00002060                 dd offset ?GetRawPropInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAK@Z ; NArchive::N7z::CHandler::GetRawPropInfo(uint,wchar_t * *,ulong *)
.rdata:00002060 _rdata          ends
.rdata:00002060
.rdata:00002064 ; ===========================================================================
.rdata:00002064
.rdata:00002064 ; Segment type: Pure data
.rdata:00002064 ; Segment permissions: Read
.rdata:00002064 _rdata          segment dword public 'DATA' use32
.rdata:00002064                 assume cs:_rdata
.rdata:00002064                 ;org 2064h
.rdata:00002064 ; COMDAT (pick largest)
.rdata:00002064                 dd offset ??_R4CHandler@N7z@NArchive@@6BIInArchive@@@ ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:00002068                 public ??_7CHandler@N7z@NArchive@@6BIInArchive@@@
.rdata:00002068 ; const NArchive::N7z::CHandler::`vftable'{for `IInArchive'}
.rdata:00002068 ??_7CHandler@N7z@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00002068                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+76o
.rdata:00002068                                         ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:0000206C                 dd offset ?AddRef@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::AddRef(void)
.rdata:00002070                 dd offset ?Release@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::Release(void)
.rdata:00002074                 dd offset ?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00002078                 dd offset ?Close@CHandler@N7z@NArchive@@UAGJXZ ; NArchive::N7z::CHandler::Close(void)
.rdata:0000207C                 dd offset ?GetNumberOfItems@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetNumberOfItems(uint *)
.rdata:00002080                 dd offset ?GetProperty@CHandler@N7z@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:00002084                 dd offset ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::N7z::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00002088                 dd offset ?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:0000208C                 dd offset ?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetNumberOfProperties(uint *)
.rdata:00002090                 dd offset ?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00002094                 dd offset ?GetNumberOfArchiveProperties@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00002098                 dd offset ?GetArchivePropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::N7z::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00002098 _rdata          ends
.rdata:00002098
.xdata$x:0000209C ; ===========================================================================
.xdata$x:0000209C
.xdata$x:0000209C ; Segment type: Pure data
.xdata$x:0000209C ; Segment permissions: Read
.xdata$x:0000209C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000209C                 assume cs:_xdata$x
.xdata$x:0000209C                 ;org 209Ch
.xdata$x:0000209C __ehfuncinfo$??0CHandler@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000209C                                         ; DATA XREF: __ehhandler$??0CHandler@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000209D                 db    5
.xdata$x:0000209E                 db  93h ; ô
.xdata$x:0000209F                 db  19h
.xdata$x:000020A0                 db    5
.xdata$x:000020A1                 db    0
.xdata$x:000020A2                 db    0
.xdata$x:000020A3                 db    0
.xdata$x:000020A4                 dd offset __unwindtable$??0CHandler@N7z@NArchive@@QAE@XZ
.xdata$x:000020A8                 db    0
.xdata$x:000020A9                 db    0
.xdata$x:000020AA                 db    0
.xdata$x:000020AB                 db    0
.xdata$x:000020AC                 db    0
.xdata$x:000020AD                 db    0
.xdata$x:000020AE                 db    0
.xdata$x:000020AF                 db    0
.xdata$x:000020B0                 db    0
.xdata$x:000020B1                 db    0
.xdata$x:000020B2                 db    0
.xdata$x:000020B3                 db    0
.xdata$x:000020B4                 db    0
.xdata$x:000020B5                 db    0
.xdata$x:000020B6                 db    0
.xdata$x:000020B7                 db    0
.xdata$x:000020B8                 db    0
.xdata$x:000020B9                 db    0
.xdata$x:000020BA                 db    0
.xdata$x:000020BB                 db    0
.xdata$x:000020BC                 db    1
.xdata$x:000020BD                 db    0
.xdata$x:000020BE                 db    0
.xdata$x:000020BF                 db    0
.xdata$x:000020C0 __unwindtable$??0CHandler@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000020C0                                         ; DATA XREF: .xdata$x:000020A4o
.xdata$x:000020C1                 db 0FFh
.xdata$x:000020C2                 db 0FFh
.xdata$x:000020C3                 db 0FFh
.xdata$x:000020C4                 dd offset __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$0
.xdata$x:000020C8                 db    0
.xdata$x:000020C9                 db    0
.xdata$x:000020CA                 db    0
.xdata$x:000020CB                 db    0
.xdata$x:000020CC                 dd offset __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$1
.xdata$x:000020D0                 db    1
.xdata$x:000020D1                 db    0
.xdata$x:000020D2                 db    0
.xdata$x:000020D3                 db    0
.xdata$x:000020D4                 dd offset __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$2
.xdata$x:000020D8                 db    2
.xdata$x:000020D9                 db    0
.xdata$x:000020DA                 db    0
.xdata$x:000020DB                 db    0
.xdata$x:000020DC                 dd offset __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$3
.xdata$x:000020E0                 db    3
.xdata$x:000020E1                 db    0
.xdata$x:000020E2                 db    0
.xdata$x:000020E3                 db    0
.xdata$x:000020E4                 dd offset __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$4
.xdata$x:000020E8 __unwindtable$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z db 0FFh
.xdata$x:000020E8                                         ; DATA XREF: .xdata$x:000020F8o
.xdata$x:000020E9                 db 0FFh
.xdata$x:000020EA                 db 0FFh
.xdata$x:000020EB                 db 0FFh
.xdata$x:000020EC                 dd offset __unwindfunclet$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z$0
.xdata$x:000020F0 __ehfuncinfo$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z db  22h ; "
.xdata$x:000020F0                                         ; DATA XREF: __ehhandler$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z+11o
.xdata$x:000020F1                 db    5
.xdata$x:000020F2                 db  93h ; ô
.xdata$x:000020F3                 db  19h
.xdata$x:000020F4                 db    1
.xdata$x:000020F5                 db    0
.xdata$x:000020F6                 db    0
.xdata$x:000020F7                 db    0
.xdata$x:000020F8                 dd offset __unwindtable$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z
.xdata$x:000020FC                 db    0
.xdata$x:000020FD                 db    0
.xdata$x:000020FE                 db    0
.xdata$x:000020FF                 db    0
.xdata$x:00002100                 db    0
.xdata$x:00002101                 db    0
.xdata$x:00002102                 db    0
.xdata$x:00002103                 db    0
.xdata$x:00002104                 db    0
.xdata$x:00002105                 db    0
.xdata$x:00002106                 db    0
.xdata$x:00002107                 db    0
.xdata$x:00002108                 db    0
.xdata$x:00002109                 db    0
.xdata$x:0000210A                 db    0
.xdata$x:0000210B                 db    0
.xdata$x:0000210C                 db    0
.xdata$x:0000210D                 db    0
.xdata$x:0000210E                 db    0
.xdata$x:0000210F                 db    0
.xdata$x:00002110                 db    1
.xdata$x:00002111                 db    0
.xdata$x:00002112                 db    0
.xdata$x:00002113                 db    0
.xdata$x:00002114 __catchsym$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4 dd offset $SG71132
.xdata$x:00002114                                         ; DATA XREF: .xdata$x:00002134o
.xdata$x:00002114                                         ; "Delta"
.xdata$x:00002118                 align 10h
.xdata$x:00002120                 dd offset __catch$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:00002124 __tryblocktable$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:00002124                                         ; DATA XREF: .xdata$x:00002168o
.xdata$x:00002125                 db    0
.xdata$x:00002126                 db    0
.xdata$x:00002127                 db    0
.xdata$x:00002128                 db    2
.xdata$x:00002129                 db    0
.xdata$x:0000212A                 db    0
.xdata$x:0000212B                 db    0
.xdata$x:0000212C                 db    3
.xdata$x:0000212D                 db    0
.xdata$x:0000212E                 db    0
.xdata$x:0000212F                 db    0
.xdata$x:00002130                 db    1
.xdata$x:00002131                 db    0
.xdata$x:00002132                 db    0
.xdata$x:00002133                 db    0
.xdata$x:00002134                 dd offset __catchsym$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4
.xdata$x:00002138 __unwindtable$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00002138                                         ; DATA XREF: .xdata$x:00002160o
.xdata$x:00002139                 db 0FFh
.xdata$x:0000213A                 db 0FFh
.xdata$x:0000213B                 db 0FFh
.xdata$x:0000213C                 db    0
.xdata$x:0000213D                 db    0
.xdata$x:0000213E                 db    0
.xdata$x:0000213F                 db    0
.xdata$x:00002140                 db    0
.xdata$x:00002141                 db    0
.xdata$x:00002142                 db    0
.xdata$x:00002143                 db    0
.xdata$x:00002144                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00002148                 db    1
.xdata$x:00002149                 db    0
.xdata$x:0000214A                 db    0
.xdata$x:0000214B                 db    0
.xdata$x:0000214C                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00002150                 db 0FFh
.xdata$x:00002151                 db 0FFh
.xdata$x:00002152                 db 0FFh
.xdata$x:00002153                 db 0FFh
.xdata$x:00002154                 db    0
.xdata$x:00002155                 db    0
.xdata$x:00002156                 db    0
.xdata$x:00002157                 db    0
.xdata$x:00002158 __ehfuncinfo$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00002158                                         ; DATA XREF: __ehhandler$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:00002159                 db    5
.xdata$x:0000215A                 db  93h ; ô
.xdata$x:0000215B                 db  19h
.xdata$x:0000215C                 db    4
.xdata$x:0000215D                 db    0
.xdata$x:0000215E                 db    0
.xdata$x:0000215F                 db    0
.xdata$x:00002160                 dd offset __unwindtable$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00002164                 db    1
.xdata$x:00002165                 db    0
.xdata$x:00002166                 db    0
.xdata$x:00002167                 db    0
.xdata$x:00002168                 dd offset __tryblocktable$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:0000216C                 db    0
.xdata$x:0000216D                 db    0
.xdata$x:0000216E                 db    0
.xdata$x:0000216F                 db    0
.xdata$x:00002170                 db    0
.xdata$x:00002171                 db    0
.xdata$x:00002172                 db    0
.xdata$x:00002173                 db    0
.xdata$x:00002174                 db    0
.xdata$x:00002175                 db    0
.xdata$x:00002176                 db    0
.xdata$x:00002177                 db    0
.xdata$x:00002178                 db    1
.xdata$x:00002179                 db    0
.xdata$x:0000217A                 db    0
.xdata$x:0000217B                 db    0
.xdata$x:0000217C __unwindtable$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:0000217C                                         ; DATA XREF: .xdata$x:0000218Co
.xdata$x:0000217D                 db 0FFh
.xdata$x:0000217E                 db 0FFh
.xdata$x:0000217F                 db 0FFh
.xdata$x:00002180                 dd offset __unwindfunclet$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z$0
.xdata$x:00002184 __ehfuncinfo$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00002184                                         ; DATA XREF: __ehhandler$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z+1Eo
.xdata$x:00002185                 db    5
.xdata$x:00002186                 db  93h ; ô
.xdata$x:00002187                 db  19h
.xdata$x:00002188                 db    1
.xdata$x:00002189                 db    0
.xdata$x:0000218A                 db    0
.xdata$x:0000218B                 db    0
.xdata$x:0000218C                 dd offset __unwindtable$?SetMethodToProp@CHandler@N7z@NArchive@@ABEJIPAUtagPROPVARIANT@@@Z
.xdata$x:00002190                 db    0
.xdata$x:00002191                 db    0
.xdata$x:00002192                 db    0
.xdata$x:00002193                 db    0
.xdata$x:00002194                 db    0
.xdata$x:00002195                 db    0
.xdata$x:00002196                 db    0
.xdata$x:00002197                 db    0
.xdata$x:00002198                 db    0
.xdata$x:00002199                 db    0
.xdata$x:0000219A                 db    0
.xdata$x:0000219B                 db    0
.xdata$x:0000219C                 db    0
.xdata$x:0000219D                 db    0
.xdata$x:0000219E                 db    0
.xdata$x:0000219F                 db    0
.xdata$x:000021A0                 db    0
.xdata$x:000021A1                 db    0
.xdata$x:000021A2                 db    0
.xdata$x:000021A3                 db    0
.xdata$x:000021A4                 db    1
.xdata$x:000021A5                 db    0
.xdata$x:000021A6                 db    0
.xdata$x:000021A7                 db    0
.xdata$x:000021A8 __catchsym$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$8 dd offset $SG71132
.xdata$x:000021A8                                         ; DATA XREF: .xdata$x:00002210o
.xdata$x:000021A8                                         ; "Delta"
.xdata$x:000021AC                 db    0
.xdata$x:000021AD                 db    0
.xdata$x:000021AE                 db    0
.xdata$x:000021AF                 db    0
.xdata$x:000021B0                 db    0
.xdata$x:000021B1                 db    0
.xdata$x:000021B2                 db    0
.xdata$x:000021B3                 db    0
.xdata$x:000021B4                 dd offset __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:000021B8 __catchsym$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$7 dd offset $SG71132
.xdata$x:000021B8                                         ; DATA XREF: .xdata$x:000021FCo
.xdata$x:000021B8                                         ; "Delta"
.xdata$x:000021BC                 db    0
.xdata$x:000021BD                 db    0
.xdata$x:000021BE                 db    0
.xdata$x:000021BF                 db    0
.xdata$x:000021C0                 db    0
.xdata$x:000021C1                 db    0
.xdata$x:000021C2                 db    0
.xdata$x:000021C3                 db    0
.xdata$x:000021C4                 dd offset __catch$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:000021C8 __ehfuncinfo$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:000021C8                                         ; DATA XREF: __ehhandler$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+1Eo
.xdata$x:000021C9                 db    5
.xdata$x:000021CA                 db  93h ; ô
.xdata$x:000021CB                 db  19h
.xdata$x:000021CC                 db    7
.xdata$x:000021CD                 db    0
.xdata$x:000021CE                 db    0
.xdata$x:000021CF                 db    0
.xdata$x:000021D0                 dd offset __unwindtable$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:000021D4                 db    2
.xdata$x:000021D5                 db    0
.xdata$x:000021D6                 db    0
.xdata$x:000021D7                 db    0
.xdata$x:000021D8                 dd offset __tryblocktable$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:000021DC                 db    0
.xdata$x:000021DD                 db    0
.xdata$x:000021DE                 db    0
.xdata$x:000021DF                 db    0
.xdata$x:000021E0                 db    0
.xdata$x:000021E1                 db    0
.xdata$x:000021E2                 db    0
.xdata$x:000021E3                 db    0
.xdata$x:000021E4                 db    0
.xdata$x:000021E5                 db    0
.xdata$x:000021E6                 db    0
.xdata$x:000021E7                 db    0
.xdata$x:000021E8                 db    1
.xdata$x:000021E9                 db    0
.xdata$x:000021EA                 db    0
.xdata$x:000021EB                 db    0
.xdata$x:000021EC __tryblocktable$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    1
.xdata$x:000021EC                                         ; DATA XREF: .xdata$x:000021D8o
.xdata$x:000021ED                 db    0
.xdata$x:000021EE                 db    0
.xdata$x:000021EF                 db    0
.xdata$x:000021F0                 db    4
.xdata$x:000021F1                 db    0
.xdata$x:000021F2                 db    0
.xdata$x:000021F3                 db    0
.xdata$x:000021F4                 db    5
.xdata$x:000021F5                 db    0
.xdata$x:000021F6                 db    0
.xdata$x:000021F7                 db    0
.xdata$x:000021F8                 db    1
.xdata$x:000021F9                 db    0
.xdata$x:000021FA                 db    0
.xdata$x:000021FB                 db    0
.xdata$x:000021FC                 dd offset __catchsym$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$7
.xdata$x:00002200                 db    0
.xdata$x:00002201                 db    0
.xdata$x:00002202                 db    0
.xdata$x:00002203                 db    0
.xdata$x:00002204                 db    5
.xdata$x:00002205                 db    0
.xdata$x:00002206                 db    0
.xdata$x:00002207                 db    0
.xdata$x:00002208                 db    6
.xdata$x:00002209                 db    0
.xdata$x:0000220A                 db    0
.xdata$x:0000220B                 db    0
.xdata$x:0000220C                 db    1
.xdata$x:0000220D                 db    0
.xdata$x:0000220E                 db    0
.xdata$x:0000220F                 db    0
.xdata$x:00002210                 dd offset __catchsym$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$8
.xdata$x:00002214 __unwindtable$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00002214                                         ; DATA XREF: .xdata$x:000021D0o
.xdata$x:00002215                 db 0FFh
.xdata$x:00002216                 db 0FFh
.xdata$x:00002217                 db 0FFh
.xdata$x:00002218                 db    0
.xdata$x:00002219                 db    0
.xdata$x:0000221A                 db    0
.xdata$x:0000221B                 db    0
.xdata$x:0000221C                 db    0
.xdata$x:0000221D                 db    0
.xdata$x:0000221E                 db    0
.xdata$x:0000221F                 db    0
.xdata$x:00002220                 db    0
.xdata$x:00002221                 db    0
.xdata$x:00002222                 db    0
.xdata$x:00002223                 db    0
.xdata$x:00002224                 db    1
.xdata$x:00002225                 db    0
.xdata$x:00002226                 db    0
.xdata$x:00002227                 db    0
.xdata$x:00002228                 dd offset __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4
.xdata$x:0000222C                 db    2
.xdata$x:0000222D                 db    0
.xdata$x:0000222E                 db    0
.xdata$x:0000222F                 db    0
.xdata$x:00002230                 dd offset __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5
.xdata$x:00002234                 db    3
.xdata$x:00002235                 db    0
.xdata$x:00002236                 db    0
.xdata$x:00002237                 db    0
.xdata$x:00002238                 dd offset __unwindfunclet$?Open@CHandler@N7z@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6
.xdata$x:0000223C                 db    0
.xdata$x:0000223D                 db    0
.xdata$x:0000223E                 db    0
.xdata$x:0000223F                 db    0
.xdata$x:00002240                 db    0
.xdata$x:00002241                 db    0
.xdata$x:00002242                 db    0
.xdata$x:00002243                 db    0
.xdata$x:00002244                 db 0FFh
.xdata$x:00002245                 db 0FFh
.xdata$x:00002246                 db 0FFh
.xdata$x:00002247                 db 0FFh
.xdata$x:00002248                 db    0
.xdata$x:00002249                 db    0
.xdata$x:0000224A                 db    0
.xdata$x:0000224B                 db    0
.xdata$x:0000224C __catchsym$?Close@CHandler@N7z@NArchive@@UAGJXZ$2 dd offset $SG71132
.xdata$x:0000224C                                         ; DATA XREF: .xdata$x:0000227Co
.xdata$x:0000224C                                         ; "Delta"
.xdata$x:00002250                 db    0
.xdata$x:00002251                 db    0
.xdata$x:00002252                 db    0
.xdata$x:00002253                 db    0
.xdata$x:00002254                 db    0
.xdata$x:00002255                 db    0
.xdata$x:00002256                 db    0
.xdata$x:00002257                 db    0
.xdata$x:00002258                 dd offset __catch$?Close@CHandler@N7z@NArchive@@UAGJXZ$0
.xdata$x:0000225C __unwindtable$?Close@CHandler@N7z@NArchive@@UAGJXZ db 0FFh
.xdata$x:0000225C                                         ; DATA XREF: .xdata$x:00002288o
.xdata$x:0000225D                 db 0FFh
.xdata$x:0000225E                 db 0FFh
.xdata$x:0000225F                 db 0FFh
.xdata$x:00002260                 db    0
.xdata$x:00002261                 db    0
.xdata$x:00002262                 db    0
.xdata$x:00002263                 db    0
.xdata$x:00002264                 db 0FFh
.xdata$x:00002265                 db 0FFh
.xdata$x:00002266                 db 0FFh
.xdata$x:00002267                 db 0FFh
.xdata$x:00002268                 db    0
.xdata$x:00002269                 db    0
.xdata$x:0000226A                 db    0
.xdata$x:0000226B                 db    0
.xdata$x:0000226C __tryblocktable$?Close@CHandler@N7z@NArchive@@UAGJXZ db    0
.xdata$x:0000226C                                         ; DATA XREF: .xdata$x:00002290o
.xdata$x:0000226D                 db    0
.xdata$x:0000226E                 db    0
.xdata$x:0000226F                 db    0
.xdata$x:00002270                 db    0
.xdata$x:00002271                 db    0
.xdata$x:00002272                 db    0
.xdata$x:00002273                 db    0
.xdata$x:00002274                 db    1
.xdata$x:00002275                 db    0
.xdata$x:00002276                 db    0
.xdata$x:00002277                 db    0
.xdata$x:00002278                 db    1
.xdata$x:00002279                 db    0
.xdata$x:0000227A                 db    0
.xdata$x:0000227B                 db    0
.xdata$x:0000227C                 dd offset __catchsym$?Close@CHandler@N7z@NArchive@@UAGJXZ$2
.xdata$x:00002280 __ehfuncinfo$?Close@CHandler@N7z@NArchive@@UAGJXZ db  22h ; "
.xdata$x:00002280                                         ; DATA XREF: __ehhandler$?Close@CHandler@N7z@NArchive@@UAGJXZ+11o
.xdata$x:00002281                 db    5
.xdata$x:00002282                 db  93h ; ô
.xdata$x:00002283                 db  19h
.xdata$x:00002284                 db    2
.xdata$x:00002285                 db    0
.xdata$x:00002286                 db    0
.xdata$x:00002287                 db    0
.xdata$x:00002288                 dd offset __unwindtable$?Close@CHandler@N7z@NArchive@@UAGJXZ
.xdata$x:0000228C                 db    1
.xdata$x:0000228D                 db    0
.xdata$x:0000228E                 db    0
.xdata$x:0000228F                 db    0
.xdata$x:00002290                 dd offset __tryblocktable$?Close@CHandler@N7z@NArchive@@UAGJXZ
.xdata$x:00002294                 align 10h
.xdata$x:000022A0                 db    1
.xdata$x:000022A1                 db    0
.xdata$x:000022A2                 db    0
.xdata$x:000022A3                 db    0
.xdata$x:000022A3 _xdata$x        ends
.xdata$x:000022A3
.rtc$TMZ:000022A4 ; ===========================================================================
.rtc$TMZ:000022A4
.rtc$TMZ:000022A4 ; Segment type: Pure data
.rtc$TMZ:000022A4 ; Segment permissions: Read
.rtc$TMZ:000022A4 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000022A4                 assume cs:_rtc$TMZ
.rtc$TMZ:000022A4                 ;org 22A4h
.rtc$TMZ:000022A4 ; COMDAT (pick any)
.rtc$TMZ:000022A4 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000022A4 _rtc$TMZ        ends
.rtc$TMZ:000022A4
.rtc$IMZ:000022A8 ; ===========================================================================
.rtc$IMZ:000022A8
.rtc$IMZ:000022A8 ; Segment type: Pure data
.rtc$IMZ:000022A8 ; Segment permissions: Read
.rtc$IMZ:000022A8 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000022A8                 assume cs:_rtc$IMZ
.rtc$IMZ:000022A8                 ;org 22A8h
.rtc$IMZ:000022A8 ; COMDAT (pick any)
.rtc$IMZ:000022A8 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000022A8 _rtc$IMZ        ends
.rtc$IMZ:000022A8
.rdata$r:000022AC ; ===========================================================================
.rdata$r:000022AC
.rdata$r:000022AC ; Segment type: Pure data
.rdata$r:000022AC ; Segment permissions: Read
.rdata$r:000022AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022AC                 assume cs:_rdata$r
.rdata$r:000022AC                 ;org 22ACh
.rdata$r:000022AC ; COMDAT (pick any)
.rdata$r:000022AC                 public ??_R4CHandler@N7z@NArchive@@6BIInArchive@@@
.rdata$r:000022AC ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:000022AC ??_R4CHandler@N7z@NArchive@@6BIInArchive@@@ db    0
.rdata$r:000022AC                                         ; DATA XREF: .rdata:00002064o
.rdata$r:000022AD                 db    0
.rdata$r:000022AE                 db    0
.rdata$r:000022AF                 db    0
.rdata$r:000022B0                 db    0
.rdata$r:000022B1                 db    0
.rdata$r:000022B2                 db    0
.rdata$r:000022B3                 db    0
.rdata$r:000022B4                 db    0
.rdata$r:000022B5                 db    0
.rdata$r:000022B6                 db    0
.rdata$r:000022B7                 db    0
.rdata$r:000022B8                 dd offset ??_R0?AVCHandler@N7z@NArchive@@@8 ; NArchive::N7z::CHandler `RTTI Type Descriptor'
.rdata$r:000022BC                 dd offset ??_R3CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022BC _rdata$r        ends
.rdata$r:000022BC
.data:000022C0 ; ===========================================================================
.data:000022C0
.data:000022C0 ; Segment type: Pure data
.data:000022C0 ; Segment permissions: Read/Write
.data:000022C0 _data           segment dword public 'DATA' use32
.data:000022C0                 assume cs:_data
.data:000022C0                 ;org 22C0h
.data:000022C0 ; COMDAT (pick any)
.data:000022C0                 public ??_R0?AVCHandler@N7z@NArchive@@@8
.data:000022C0 ; class NArchive::N7z::CHandler `RTTI Type Descriptor'
.data:000022C0 ??_R0?AVCHandler@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000022C0                                         ; DATA XREF: .rdata$r:000022B8o
.data:000022C0                                         ; .rdata$r:NArchive::N7z::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000022C0                                         ; const type_info::`vftable'
.data:000022C4                 align 8
.data:000022C8 a_?avchandler@n db '.?AVCHandler@N7z@NArchive@@',0
.data:000022C8 _data           ends
.data:000022C8
.rdata$r:000022E4 ; ===========================================================================
.rdata$r:000022E4
.rdata$r:000022E4 ; Segment type: Pure data
.rdata$r:000022E4 ; Segment permissions: Read
.rdata$r:000022E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022E4                 assume cs:_rdata$r
.rdata$r:000022E4                 ;org 22E4h
.rdata$r:000022E4 ; COMDAT (pick any)
.rdata$r:000022E4                 public ??_R3CHandler@N7z@NArchive@@8
.rdata$r:000022E4 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:000022E4 ??_R3CHandler@N7z@NArchive@@8 db    0   ; DATA XREF: .rdata$r:000022BCo
.rdata$r:000022E4                                         ; .rdata$r:00002340o ...
.rdata$r:000022E5                 db    0
.rdata$r:000022E6                 db    0
.rdata$r:000022E7                 db    0
.rdata$r:000022E8                 db    5
.rdata$r:000022E9                 db    0
.rdata$r:000022EA                 db    0
.rdata$r:000022EB                 db    0
.rdata$r:000022EC                 db  0Ch
.rdata$r:000022ED                 db    0
.rdata$r:000022EE                 db    0
.rdata$r:000022EF                 db    0
.rdata$r:000022F0                 dd offset ??_R2CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Base Class Array'
.rdata$r:000022F0 _rdata$r        ends
.rdata$r:000022F0
.rdata$r:000022F4 ; ===========================================================================
.rdata$r:000022F4
.rdata$r:000022F4 ; Segment type: Pure data
.rdata$r:000022F4 ; Segment permissions: Read
.rdata$r:000022F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000022F4                 assume cs:_rdata$r
.rdata$r:000022F4                 ;org 22F4h
.rdata$r:000022F4 ; COMDAT (pick any)
.rdata$r:000022F4                 public ??_R2CHandler@N7z@NArchive@@8
.rdata$r:000022F4 ; NArchive::N7z::CHandler::`RTTI Base Class Array'
.rdata$r:000022F4 ??_R2CHandler@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@N7z@NArchive@@8
.rdata$r:000022F4                                         ; DATA XREF: .rdata$r:000022F0o
.rdata$r:000022F4                                         ; NArchive::N7z::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000022F8                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000022FC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00002300                 dd offset ??_R13?0A@EA@IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00002304                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00002308                 dd offset ??_R17?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000230C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00002310                 dd offset ??_R1M@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00002314                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00002318                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:0000231C                 dd offset ??_R1BI@?0A@EA@COutHandler@N7z@NArchive@@8 ; NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00002320                 dd offset ??_R1BI@?0A@EA@CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (24,-1,0,64)'
.rdata$r:00002324                 db    0
.rdata$r:00002325                 align 4
.rdata$r:00002325 _rdata$r        ends
.rdata$r:00002325
.rdata$r:00002328 ; ===========================================================================
.rdata$r:00002328
.rdata$r:00002328 ; Segment type: Pure data
.rdata$r:00002328 ; Segment permissions: Read
.rdata$r:00002328 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002328                 assume cs:_rdata$r
.rdata$r:00002328                 ;org 2328h
.rdata$r:00002328 ; COMDAT (pick any)
.rdata$r:00002328                 public ??_R1A@?0A@EA@CHandler@N7z@NArchive@@8
.rdata$r:00002328 ; NArchive::N7z::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002328 ??_R1A@?0A@EA@CHandler@N7z@NArchive@@8 dd offset ??_R0?AVCHandler@N7z@NArchive@@@8
.rdata$r:00002328                                         ; DATA XREF: .rdata$r:NArchive::N7z::CHandler::`RTTI Base Class Array'o
.rdata$r:00002328                                         ; NArchive::N7z::CHandler `RTTI Type Descriptor'
.rdata$r:0000232C                 db  0Bh
.rdata$r:0000232D                 db    0
.rdata$r:0000232E                 db    0
.rdata$r:0000232F                 db    0
.rdata$r:00002330                 db    0
.rdata$r:00002331                 db    0
.rdata$r:00002332                 db    0
.rdata$r:00002333                 db    0
.rdata$r:00002334                 db 0FFh
.rdata$r:00002335                 db 0FFh
.rdata$r:00002336                 db 0FFh
.rdata$r:00002337                 db 0FFh
.rdata$r:00002338                 db    0
.rdata$r:00002339                 db    0
.rdata$r:0000233A                 db    0
.rdata$r:0000233B                 db    0
.rdata$r:0000233C                 db  40h ; @
.rdata$r:0000233D                 db    0
.rdata$r:0000233E                 db    0
.rdata$r:0000233F                 db    0
.rdata$r:00002340                 dd offset ??_R3CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002340 _rdata$r        ends
.rdata$r:00002340
.rdata$r:00002344 ; ===========================================================================
.rdata$r:00002344
.rdata$r:00002344 ; Segment type: Pure data
.rdata$r:00002344 ; Segment permissions: Read
.rdata$r:00002344 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002344                 assume cs:_rdata$r
.rdata$r:00002344                 ;org 2344h
.rdata$r:00002344 ; COMDAT (pick any)
.rdata$r:00002344                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00002344 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002344 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:00002344                                         ; DATA XREF: .rdata$r:000022F8o
.rdata$r:00002344                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:00002344                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:00002348                 db    1
.rdata$r:00002349                 db    0
.rdata$r:0000234A                 db    0
.rdata$r:0000234B                 db    0
.rdata$r:0000234C                 db    0
.rdata$r:0000234D                 db    0
.rdata$r:0000234E                 db    0
.rdata$r:0000234F                 db    0
.rdata$r:00002350                 db 0FFh
.rdata$r:00002351                 db 0FFh
.rdata$r:00002352                 db 0FFh
.rdata$r:00002353                 db 0FFh
.rdata$r:00002354                 db    0
.rdata$r:00002355                 db    0
.rdata$r:00002356                 db    0
.rdata$r:00002357                 db    0
.rdata$r:00002358                 db  40h ; @
.rdata$r:00002359                 db    0
.rdata$r:0000235A                 db    0
.rdata$r:0000235B                 db    0
.rdata$r:0000235C                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000235C _rdata$r        ends
.rdata$r:0000235C
.data:00002360 ; ===========================================================================
.data:00002360
.data:00002360 ; Segment type: Pure data
.data:00002360 ; Segment permissions: Read/Write
.data:00002360 _data           segment dword public 'DATA' use32
.data:00002360                 assume cs:_data
.data:00002360                 ;org 2360h
.data:00002360 ; COMDAT (pick any)
.data:00002360                 public ??_R0?AUIInArchive@@@8
.data:00002360 ; struct IInArchive `RTTI Type Descriptor'
.data:00002360 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002360                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002360                                         ; .rdata$r:00003780o
.data:00002360                                         ; const type_info::`vftable'
.data:00002364                 align 8
.data:00002368 a_?auiinarchive db '.?AUIInArchive@@',0
.data:00002379                 align 4
.data:00002379 _data           ends
.data:00002379
.rdata$r:0000237C ; ===========================================================================
.rdata$r:0000237C
.rdata$r:0000237C ; Segment type: Pure data
.rdata$r:0000237C ; Segment permissions: Read
.rdata$r:0000237C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000237C                 assume cs:_rdata$r
.rdata$r:0000237C                 ;org 237Ch
.rdata$r:0000237C ; COMDAT (pick any)
.rdata$r:0000237C                 public ??_R3IInArchive@@8
.rdata$r:0000237C ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000237C ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:0000235Co
.rdata$r:0000237C                                         ; .rdata$r:00003784o
.rdata$r:0000237D                 db    0
.rdata$r:0000237E                 db    0
.rdata$r:0000237F                 db    0
.rdata$r:00002380                 db    0
.rdata$r:00002381                 db    0
.rdata$r:00002382                 db    0
.rdata$r:00002383                 db    0
.rdata$r:00002384                 db    2
.rdata$r:00002385                 db    0
.rdata$r:00002386                 db    0
.rdata$r:00002387                 db    0
.rdata$r:00002388                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00002388 _rdata$r        ends
.rdata$r:00002388
.rdata$r:0000238C ; ===========================================================================
.rdata$r:0000238C
.rdata$r:0000238C ; Segment type: Pure data
.rdata$r:0000238C ; Segment permissions: Read
.rdata$r:0000238C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000238C                 assume cs:_rdata$r
.rdata$r:0000238C                 ;org 238Ch
.rdata$r:0000238C ; COMDAT (pick any)
.rdata$r:0000238C                 public ??_R2IInArchive@@8
.rdata$r:0000238C ; IInArchive::`RTTI Base Class Array'
.rdata$r:0000238C ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:0000238C                                         ; DATA XREF: .rdata$r:00002388o
.rdata$r:0000238C                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002390                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002394                 db    0
.rdata$r:00002395                 align 4
.rdata$r:00002395 _rdata$r        ends
.rdata$r:00002395
.rdata$r:00002398 ; ===========================================================================
.rdata$r:00002398
.rdata$r:00002398 ; Segment type: Pure data
.rdata$r:00002398 ; Segment permissions: Read
.rdata$r:00002398 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002398                 assume cs:_rdata$r
.rdata$r:00002398                 ;org 2398h
.rdata$r:00002398 ; COMDAT (pick any)
.rdata$r:00002398                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00002398 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002398 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002398                                         ; DATA XREF: .rdata$r:00002390o
.rdata$r:00002398                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00002398                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000239C                 db    0
.rdata$r:0000239D                 db    0
.rdata$r:0000239E                 db    0
.rdata$r:0000239F                 db    0
.rdata$r:000023A0                 db    0
.rdata$r:000023A1                 db    0
.rdata$r:000023A2                 db    0
.rdata$r:000023A3                 db    0
.rdata$r:000023A4                 db 0FFh
.rdata$r:000023A5                 db 0FFh
.rdata$r:000023A6                 db 0FFh
.rdata$r:000023A7                 db 0FFh
.rdata$r:000023A8                 db    0
.rdata$r:000023A9                 db    0
.rdata$r:000023AA                 db    0
.rdata$r:000023AB                 db    0
.rdata$r:000023AC                 db  40h ; @
.rdata$r:000023AD                 db    0
.rdata$r:000023AE                 db    0
.rdata$r:000023AF                 db    0
.rdata$r:000023B0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023B0 _rdata$r        ends
.rdata$r:000023B0
.data:000023B4 ; ===========================================================================
.data:000023B4
.data:000023B4 ; Segment type: Pure data
.data:000023B4 ; Segment permissions: Read/Write
.data:000023B4 _data           segment dword public 'DATA' use32
.data:000023B4                 assume cs:_data
.data:000023B4                 ;org 23B4h
.data:000023B4 ; COMDAT (pick any)
.data:000023B4                 public ??_R0?AUIUnknown@@@8
.data:000023B4 ; struct IUnknown `RTTI Type Descriptor'
.data:000023B4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000023B4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000023B4                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000023B4                                         ; const type_info::`vftable'
.data:000023B8                 db    0
.data:000023B9                 db    0
.data:000023BA                 db    0
.data:000023BB                 db    0
.data:000023BC                 db  2Eh ; .
.data:000023BD                 db  3Fh ; ?
.data:000023BE                 db  41h ; A
.data:000023BF                 db  55h ; U
.data:000023C0                 db  49h ; I
.data:000023C1                 db  55h ; U
.data:000023C2                 db  6Eh ; n
.data:000023C3                 db  6Bh ; k
.data:000023C4                 db  6Eh ; n
.data:000023C5                 db  6Fh ; o
.data:000023C6                 db  77h ; w
.data:000023C7                 db  6Eh ; n
.data:000023C8                 db  40h ; @
.data:000023C9                 db  40h ; @
.data:000023CA                 db    0
.data:000023CB                 align 4
.data:000023CB _data           ends
.data:000023CB
.rdata$r:000023CC ; ===========================================================================
.rdata$r:000023CC
.rdata$r:000023CC ; Segment type: Pure data
.rdata$r:000023CC ; Segment permissions: Read
.rdata$r:000023CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023CC                 assume cs:_rdata$r
.rdata$r:000023CC                 ;org 23CCh
.rdata$r:000023CC ; COMDAT (pick any)
.rdata$r:000023CC                 public ??_R3IUnknown@@8
.rdata$r:000023CC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023CC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000023B0o
.rdata$r:000023CC                                         ; .rdata$r:000023FCo ...
.rdata$r:000023CD                 db    0
.rdata$r:000023CE                 db    0
.rdata$r:000023CF                 db    0
.rdata$r:000023D0                 db    0
.rdata$r:000023D1                 db    0
.rdata$r:000023D2                 db    0
.rdata$r:000023D3                 db    0
.rdata$r:000023D4                 db    1
.rdata$r:000023D5                 db    0
.rdata$r:000023D6                 db    0
.rdata$r:000023D7                 db    0
.rdata$r:000023D8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000023D8 _rdata$r        ends
.rdata$r:000023D8
.rdata$r:000023DC ; ===========================================================================
.rdata$r:000023DC
.rdata$r:000023DC ; Segment type: Pure data
.rdata$r:000023DC ; Segment permissions: Read
.rdata$r:000023DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023DC                 assume cs:_rdata$r
.rdata$r:000023DC                 ;org 23DCh
.rdata$r:000023DC ; COMDAT (pick any)
.rdata$r:000023DC                 public ??_R2IUnknown@@8
.rdata$r:000023DC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000023DC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000023DC                                         ; DATA XREF: .rdata$r:000023D8o
.rdata$r:000023DC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000023E0                 db    0
.rdata$r:000023E1                 align 4
.rdata$r:000023E1 _rdata$r        ends
.rdata$r:000023E1
.rdata$r:000023E4 ; ===========================================================================
.rdata$r:000023E4
.rdata$r:000023E4 ; Segment type: Pure data
.rdata$r:000023E4 ; Segment permissions: Read
.rdata$r:000023E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000023E4                 assume cs:_rdata$r
.rdata$r:000023E4                 ;org 23E4h
.rdata$r:000023E4 ; COMDAT (pick any)
.rdata$r:000023E4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:000023E4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:000023E4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000023E4                                         ; DATA XREF: .rdata$r:000022FCo
.rdata$r:000023E4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000023E8                 align 10h
.rdata$r:000023F0                 db 0FFh
.rdata$r:000023F1                 db 0FFh
.rdata$r:000023F2                 db 0FFh
.rdata$r:000023F3                 db 0FFh
.rdata$r:000023F4                 db    0
.rdata$r:000023F5                 db    0
.rdata$r:000023F6                 db    0
.rdata$r:000023F7                 db    0
.rdata$r:000023F8                 db  42h ; B
.rdata$r:000023F9                 db    0
.rdata$r:000023FA                 db    0
.rdata$r:000023FB                 db    0
.rdata$r:000023FC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000023FC _rdata$r        ends
.rdata$r:000023FC
.rdata$r:00002400 ; ===========================================================================
.rdata$r:00002400
.rdata$r:00002400 ; Segment type: Pure data
.rdata$r:00002400 ; Segment permissions: Read
.rdata$r:00002400 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002400                 assume cs:_rdata$r
.rdata$r:00002400                 ;org 2400h
.rdata$r:00002400 ; COMDAT (pick any)
.rdata$r:00002400                 public ??_R13?0A@EA@IArchiveGetRawProps@@8
.rdata$r:00002400 ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00002400 ??_R13?0A@EA@IArchiveGetRawProps@@8 dd offset ??_R0?AUIArchiveGetRawProps@@@8
.rdata$r:00002400                                         ; DATA XREF: .rdata$r:00002300o
.rdata$r:00002400                                         ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:00002404                 db    1
.rdata$r:00002405                 db    0
.rdata$r:00002406                 db    0
.rdata$r:00002407                 db    0
.rdata$r:00002408                 db    4
.rdata$r:00002409                 db    0
.rdata$r:0000240A                 db    0
.rdata$r:0000240B                 db    0
.rdata$r:0000240C                 db 0FFh
.rdata$r:0000240D                 db 0FFh
.rdata$r:0000240E                 db 0FFh
.rdata$r:0000240F                 db 0FFh
.rdata$r:00002410                 db    0
.rdata$r:00002411                 db    0
.rdata$r:00002412                 db    0
.rdata$r:00002413                 db    0
.rdata$r:00002414                 db  40h ; @
.rdata$r:00002415                 db    0
.rdata$r:00002416                 db    0
.rdata$r:00002417                 db    0
.rdata$r:00002418                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002418 _rdata$r        ends
.rdata$r:00002418
.data:0000241C ; ===========================================================================
.data:0000241C
.data:0000241C ; Segment type: Pure data
.data:0000241C ; Segment permissions: Read/Write
.data:0000241C _data           segment dword public 'DATA' use32
.data:0000241C                 assume cs:_data
.data:0000241C                 ;org 241Ch
.data:0000241C ; COMDAT (pick any)
.data:0000241C                 public ??_R0?AUIArchiveGetRawProps@@@8
.data:0000241C ; struct IArchiveGetRawProps `RTTI Type Descriptor'
.data:0000241C ??_R0?AUIArchiveGetRawProps@@@8 dd offset ??_7type_info@@6B@
.data:0000241C                                         ; DATA XREF: .rdata$r:IArchiveGetRawProps::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000241C                                         ; .rdata$r:IArchiveGetRawProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000241C                                         ; const type_info::`vftable'
.data:00002420                 db    0
.data:00002421                 db    0
.data:00002422                 db    0
.data:00002423                 db    0
.data:00002424                 db  2Eh ; .
.data:00002425                 db  3Fh ; ?
.data:00002426                 db  41h ; A
.data:00002427                 db  55h ; U
.data:00002428                 db  49h ; I
.data:00002429                 db  41h ; A
.data:0000242A                 db  72h ; r
.data:0000242B                 db  63h ; c
.data:0000242C                 db  68h ; h
.data:0000242D                 db  69h ; i
.data:0000242E                 db  76h ; v
.data:0000242F                 db  65h ; e
.data:00002430                 db  47h ; G
.data:00002431                 db  65h ; e
.data:00002432                 db  74h ; t
.data:00002433                 db  52h ; R
.data:00002434                 db  61h ; a
.data:00002435                 db  77h ; w
.data:00002436                 db  50h ; P
.data:00002437                 db  72h ; r
.data:00002438                 db  6Fh ; o
.data:00002439                 db  70h ; p
.data:0000243A                 db  73h ; s
.data:0000243B                 db  40h ; @
.data:0000243C                 db  40h ; @
.data:0000243D                 db    0
.data:0000243E                 align 10h
.data:0000243E _data           ends
.data:0000243E
.rdata$r:00002440 ; ===========================================================================
.rdata$r:00002440
.rdata$r:00002440 ; Segment type: Pure data
.rdata$r:00002440 ; Segment permissions: Read
.rdata$r:00002440 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002440                 assume cs:_rdata$r
.rdata$r:00002440                 ;org 2440h
.rdata$r:00002440 ; COMDAT (pick any)
.rdata$r:00002440                 public ??_R3IArchiveGetRawProps@@8
.rdata$r:00002440 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002440 ??_R3IArchiveGetRawProps@@8 db    0     ; DATA XREF: .rdata$r:00002418o
.rdata$r:00002440                                         ; .rdata$r:00002474o ...
.rdata$r:00002441                 db    0
.rdata$r:00002442                 db    0
.rdata$r:00002443                 db    0
.rdata$r:00002444                 db    0
.rdata$r:00002445                 db    0
.rdata$r:00002446                 db    0
.rdata$r:00002447                 db    0
.rdata$r:00002448                 db    2
.rdata$r:00002449                 db    0
.rdata$r:0000244A                 db    0
.rdata$r:0000244B                 db    0
.rdata$r:0000244C                 dd offset ??_R2IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Base Class Array'
.rdata$r:0000244C _rdata$r        ends
.rdata$r:0000244C
.rdata$r:00002450 ; ===========================================================================
.rdata$r:00002450
.rdata$r:00002450 ; Segment type: Pure data
.rdata$r:00002450 ; Segment permissions: Read
.rdata$r:00002450 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002450                 assume cs:_rdata$r
.rdata$r:00002450                 ;org 2450h
.rdata$r:00002450 ; COMDAT (pick any)
.rdata$r:00002450                 public ??_R2IArchiveGetRawProps@@8
.rdata$r:00002450 ; IArchiveGetRawProps::`RTTI Base Class Array'
.rdata$r:00002450 ??_R2IArchiveGetRawProps@@8 dd offset ??_R1A@?0A@EA@IArchiveGetRawProps@@8
.rdata$r:00002450                                         ; DATA XREF: .rdata$r:0000244Co
.rdata$r:00002450                                         ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002454                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002458                 db    0
.rdata$r:00002459                 align 4
.rdata$r:00002459 _rdata$r        ends
.rdata$r:00002459
.rdata$r:0000245C ; ===========================================================================
.rdata$r:0000245C
.rdata$r:0000245C ; Segment type: Pure data
.rdata$r:0000245C ; Segment permissions: Read
.rdata$r:0000245C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000245C                 assume cs:_rdata$r
.rdata$r:0000245C                 ;org 245Ch
.rdata$r:0000245C ; COMDAT (pick any)
.rdata$r:0000245C                 public ??_R1A@?0A@EA@IArchiveGetRawProps@@8
.rdata$r:0000245C ; IArchiveGetRawProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000245C ??_R1A@?0A@EA@IArchiveGetRawProps@@8 dd offset ??_R0?AUIArchiveGetRawProps@@@8
.rdata$r:0000245C                                         ; DATA XREF: .rdata$r:IArchiveGetRawProps::`RTTI Base Class Array'o
.rdata$r:0000245C                                         ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:00002460                 db    1
.rdata$r:00002461                 db    0
.rdata$r:00002462                 db    0
.rdata$r:00002463                 db    0
.rdata$r:00002464                 db    0
.rdata$r:00002465                 db    0
.rdata$r:00002466                 db    0
.rdata$r:00002467                 db    0
.rdata$r:00002468                 db 0FFh
.rdata$r:00002469                 db 0FFh
.rdata$r:0000246A                 db 0FFh
.rdata$r:0000246B                 db 0FFh
.rdata$r:0000246C                 db    0
.rdata$r:0000246D                 db    0
.rdata$r:0000246E                 db    0
.rdata$r:0000246F                 db    0
.rdata$r:00002470                 db  40h ; @
.rdata$r:00002471                 db    0
.rdata$r:00002472                 db    0
.rdata$r:00002473                 db    0
.rdata$r:00002474                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002474 _rdata$r        ends
.rdata$r:00002474
.rdata$r:00002478 ; ===========================================================================
.rdata$r:00002478
.rdata$r:00002478 ; Segment type: Pure data
.rdata$r:00002478 ; Segment permissions: Read
.rdata$r:00002478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002478                 assume cs:_rdata$r
.rdata$r:00002478                 ;org 2478h
.rdata$r:00002478 ; COMDAT (pick any)
.rdata$r:00002478                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00002478 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00002478 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002478                                         ; DATA XREF: .rdata$r:00002304o
.rdata$r:00002478                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000247C                 align 10h
.rdata$r:00002480                 db    4
.rdata$r:00002481                 db    0
.rdata$r:00002482                 db    0
.rdata$r:00002483                 db    0
.rdata$r:00002484                 db 0FFh
.rdata$r:00002485                 db 0FFh
.rdata$r:00002486                 db 0FFh
.rdata$r:00002487                 db 0FFh
.rdata$r:00002488                 db    0
.rdata$r:00002489                 db    0
.rdata$r:0000248A                 db    0
.rdata$r:0000248B                 db    0
.rdata$r:0000248C                 db  42h ; B
.rdata$r:0000248D                 db    0
.rdata$r:0000248E                 db    0
.rdata$r:0000248F                 db    0
.rdata$r:00002490                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002490 _rdata$r        ends
.rdata$r:00002490
.rdata$r:00002494 ; ===========================================================================
.rdata$r:00002494
.rdata$r:00002494 ; Segment type: Pure data
.rdata$r:00002494 ; Segment permissions: Read
.rdata$r:00002494 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002494                 assume cs:_rdata$r
.rdata$r:00002494                 ;org 2494h
.rdata$r:00002494 ; COMDAT (pick any)
.rdata$r:00002494                 public ??_R17?0A@EA@ISetProperties@@8
.rdata$r:00002494 ; ISetProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00002494 ??_R17?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00002494                                         ; DATA XREF: .rdata$r:00002308o
.rdata$r:00002494                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00002498                 db    1
.rdata$r:00002499                 db    0
.rdata$r:0000249A                 db    0
.rdata$r:0000249B                 db    0
.rdata$r:0000249C                 db    8
.rdata$r:0000249D                 db    0
.rdata$r:0000249E                 db    0
.rdata$r:0000249F                 db    0
.rdata$r:000024A0                 db 0FFh
.rdata$r:000024A1                 db 0FFh
.rdata$r:000024A2                 db 0FFh
.rdata$r:000024A3                 db 0FFh
.rdata$r:000024A4                 db    0
.rdata$r:000024A5                 db    0
.rdata$r:000024A6                 db    0
.rdata$r:000024A7                 db    0
.rdata$r:000024A8                 db  40h ; @
.rdata$r:000024A9                 db    0
.rdata$r:000024AA                 db    0
.rdata$r:000024AB                 db    0
.rdata$r:000024AC                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000024AC _rdata$r        ends
.rdata$r:000024AC
.data:000024B0 ; ===========================================================================
.data:000024B0
.data:000024B0 ; Segment type: Pure data
.data:000024B0 ; Segment permissions: Read/Write
.data:000024B0 _data           segment dword public 'DATA' use32
.data:000024B0                 assume cs:_data
.data:000024B0                 ;org 24B0h
.data:000024B0 ; COMDAT (pick any)
.data:000024B0                 public ??_R0?AUISetProperties@@@8
.data:000024B0 ; struct ISetProperties `RTTI Type Descriptor'
.data:000024B0 ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:000024B0                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000024B0                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000024B0                                         ; const type_info::`vftable'
.data:000024B4                 align 8
.data:000024B8 a_?auisetproper db '.?AUISetProperties@@',0
.data:000024CD                 align 10h
.data:000024CD _data           ends
.data:000024CD
.rdata$r:000024D0 ; ===========================================================================
.rdata$r:000024D0
.rdata$r:000024D0 ; Segment type: Pure data
.rdata$r:000024D0 ; Segment permissions: Read
.rdata$r:000024D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000024D0                 assume cs:_rdata$r
.rdata$r:000024D0                 ;org 24D0h
.rdata$r:000024D0 ; COMDAT (pick any)
.rdata$r:000024D0                 public ??_R3ISetProperties@@8
.rdata$r:000024D0 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000024D0 ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:000024ACo
.rdata$r:000024D0                                         ; .rdata$r:00002504o ...
.rdata$r:000024D1                 db    0
.rdata$r:000024D2                 db    0
.rdata$r:000024D3                 db    0
.rdata$r:000024D4                 db    0
.rdata$r:000024D5                 db    0
.rdata$r:000024D6                 db    0
.rdata$r:000024D7                 db    0
.rdata$r:000024D8                 db    2
.rdata$r:000024D9                 db    0
.rdata$r:000024DA                 db    0
.rdata$r:000024DB                 db    0
.rdata$r:000024DC                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:000024DC _rdata$r        ends
.rdata$r:000024DC
.rdata$r:000024E0 ; ===========================================================================
.rdata$r:000024E0
.rdata$r:000024E0 ; Segment type: Pure data
.rdata$r:000024E0 ; Segment permissions: Read
.rdata$r:000024E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000024E0                 assume cs:_rdata$r
.rdata$r:000024E0                 ;org 24E0h
.rdata$r:000024E0 ; COMDAT (pick any)
.rdata$r:000024E0                 public ??_R2ISetProperties@@8
.rdata$r:000024E0 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:000024E0 ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:000024E0                                         ; DATA XREF: .rdata$r:000024DCo
.rdata$r:000024E0                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000024E4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000024E8                 db    0
.rdata$r:000024E9                 align 4
.rdata$r:000024E9 _rdata$r        ends
.rdata$r:000024E9
.rdata$r:000024EC ; ===========================================================================
.rdata$r:000024EC
.rdata$r:000024EC ; Segment type: Pure data
.rdata$r:000024EC ; Segment permissions: Read
.rdata$r:000024EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000024EC                 assume cs:_rdata$r
.rdata$r:000024EC                 ;org 24ECh
.rdata$r:000024EC ; COMDAT (pick any)
.rdata$r:000024EC                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:000024EC ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000024EC ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:000024EC                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:000024EC                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:000024F0                 db    1
.rdata$r:000024F1                 db    0
.rdata$r:000024F2                 db    0
.rdata$r:000024F3                 db    0
.rdata$r:000024F4                 db    0
.rdata$r:000024F5                 db    0
.rdata$r:000024F6                 db    0
.rdata$r:000024F7                 db    0
.rdata$r:000024F8                 db 0FFh
.rdata$r:000024F9                 db 0FFh
.rdata$r:000024FA                 db 0FFh
.rdata$r:000024FB                 db 0FFh
.rdata$r:000024FC                 db    0
.rdata$r:000024FD                 db    0
.rdata$r:000024FE                 db    0
.rdata$r:000024FF                 db    0
.rdata$r:00002500                 db  40h ; @
.rdata$r:00002501                 db    0
.rdata$r:00002502                 db    0
.rdata$r:00002503                 db    0
.rdata$r:00002504                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002504 _rdata$r        ends
.rdata$r:00002504
.rdata$r:00002508 ; ===========================================================================
.rdata$r:00002508
.rdata$r:00002508 ; Segment type: Pure data
.rdata$r:00002508 ; Segment permissions: Read
.rdata$r:00002508 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002508                 assume cs:_rdata$r
.rdata$r:00002508                 ;org 2508h
.rdata$r:00002508 ; COMDAT (pick any)
.rdata$r:00002508                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00002508 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00002508 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002508                                         ; DATA XREF: .rdata$r:0000230Co
.rdata$r:00002508                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000250C                 align 10h
.rdata$r:00002510                 db    8
.rdata$r:00002511                 db    0
.rdata$r:00002512                 db    0
.rdata$r:00002513                 db    0
.rdata$r:00002514                 db 0FFh
.rdata$r:00002515                 db 0FFh
.rdata$r:00002516                 db 0FFh
.rdata$r:00002517                 db 0FFh
.rdata$r:00002518                 db    0
.rdata$r:00002519                 db    0
.rdata$r:0000251A                 db    0
.rdata$r:0000251B                 db    0
.rdata$r:0000251C                 db  42h ; B
.rdata$r:0000251D                 db    0
.rdata$r:0000251E                 db    0
.rdata$r:0000251F                 db    0
.rdata$r:00002520                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002520 _rdata$r        ends
.rdata$r:00002520
.rdata$r:00002524 ; ===========================================================================
.rdata$r:00002524
.rdata$r:00002524 ; Segment type: Pure data
.rdata$r:00002524 ; Segment permissions: Read
.rdata$r:00002524 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002524                 assume cs:_rdata$r
.rdata$r:00002524                 ;org 2524h
.rdata$r:00002524 ; COMDAT (pick any)
.rdata$r:00002524                 public ??_R1M@?0A@EA@IOutArchive@@8
.rdata$r:00002524 ; IOutArchive::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00002524 ??_R1M@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00002524                                         ; DATA XREF: .rdata$r:00002310o
.rdata$r:00002524                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00002528                 db    1
.rdata$r:00002529                 db    0
.rdata$r:0000252A                 db    0
.rdata$r:0000252B                 db    0
.rdata$r:0000252C                 db  0Ch
.rdata$r:0000252D                 db    0
.rdata$r:0000252E                 db    0
.rdata$r:0000252F                 db    0
.rdata$r:00002530                 db 0FFh
.rdata$r:00002531                 db 0FFh
.rdata$r:00002532                 db 0FFh
.rdata$r:00002533                 db 0FFh
.rdata$r:00002534                 db    0
.rdata$r:00002535                 db    0
.rdata$r:00002536                 db    0
.rdata$r:00002537                 db    0
.rdata$r:00002538                 db  40h ; @
.rdata$r:00002539                 db    0
.rdata$r:0000253A                 db    0
.rdata$r:0000253B                 db    0
.rdata$r:0000253C                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000253C _rdata$r        ends
.rdata$r:0000253C
.data:00002540 ; ===========================================================================
.data:00002540
.data:00002540 ; Segment type: Pure data
.data:00002540 ; Segment permissions: Read/Write
.data:00002540 _data           segment dword public 'DATA' use32
.data:00002540                 assume cs:_data
.data:00002540                 ;org 2540h
.data:00002540 ; COMDAT (pick any)
.data:00002540                 public ??_R0?AUIOutArchive@@@8
.data:00002540 ; struct IOutArchive `RTTI Type Descriptor'
.data:00002540 ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002540                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00002540                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00002540                                         ; const type_info::`vftable'
.data:00002544                 align 8
.data:00002548 a_?auioutarchiv db '.?AUIOutArchive@@',0
.data:0000255A                 align 4
.data:0000255A _data           ends
.data:0000255A
.rdata$r:0000255C ; ===========================================================================
.rdata$r:0000255C
.rdata$r:0000255C ; Segment type: Pure data
.rdata$r:0000255C ; Segment permissions: Read
.rdata$r:0000255C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000255C                 assume cs:_rdata$r
.rdata$r:0000255C                 ;org 255Ch
.rdata$r:0000255C ; COMDAT (pick any)
.rdata$r:0000255C                 public ??_R3IOutArchive@@8
.rdata$r:0000255C ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000255C ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:0000253Co
.rdata$r:0000255C                                         ; .rdata$r:00002590o ...
.rdata$r:0000255D                 db    0
.rdata$r:0000255E                 db    0
.rdata$r:0000255F                 db    0
.rdata$r:00002560                 db    0
.rdata$r:00002561                 db    0
.rdata$r:00002562                 db    0
.rdata$r:00002563                 db    0
.rdata$r:00002564                 db    2
.rdata$r:00002565                 db    0
.rdata$r:00002566                 db    0
.rdata$r:00002567                 db    0
.rdata$r:00002568                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:00002568 _rdata$r        ends
.rdata$r:00002568
.rdata$r:0000256C ; ===========================================================================
.rdata$r:0000256C
.rdata$r:0000256C ; Segment type: Pure data
.rdata$r:0000256C ; Segment permissions: Read
.rdata$r:0000256C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000256C                 assume cs:_rdata$r
.rdata$r:0000256C                 ;org 256Ch
.rdata$r:0000256C ; COMDAT (pick any)
.rdata$r:0000256C                 public ??_R2IOutArchive@@8
.rdata$r:0000256C ; IOutArchive::`RTTI Base Class Array'
.rdata$r:0000256C ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:0000256C                                         ; DATA XREF: .rdata$r:00002568o
.rdata$r:0000256C                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002570                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002574                 db    0
.rdata$r:00002575                 align 4
.rdata$r:00002575 _rdata$r        ends
.rdata$r:00002575
.rdata$r:00002578 ; ===========================================================================
.rdata$r:00002578
.rdata$r:00002578 ; Segment type: Pure data
.rdata$r:00002578 ; Segment permissions: Read
.rdata$r:00002578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002578                 assume cs:_rdata$r
.rdata$r:00002578                 ;org 2578h
.rdata$r:00002578 ; COMDAT (pick any)
.rdata$r:00002578                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00002578 ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002578 ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00002578                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:00002578                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:0000257C                 db    1
.rdata$r:0000257D                 db    0
.rdata$r:0000257E                 db    0
.rdata$r:0000257F                 db    0
.rdata$r:00002580                 db    0
.rdata$r:00002581                 db    0
.rdata$r:00002582                 db    0
.rdata$r:00002583                 db    0
.rdata$r:00002584                 db 0FFh
.rdata$r:00002585                 db 0FFh
.rdata$r:00002586                 db 0FFh
.rdata$r:00002587                 db 0FFh
.rdata$r:00002588                 db    0
.rdata$r:00002589                 db    0
.rdata$r:0000258A                 db    0
.rdata$r:0000258B                 db    0
.rdata$r:0000258C                 db  40h ; @
.rdata$r:0000258D                 db    0
.rdata$r:0000258E                 db    0
.rdata$r:0000258F                 db    0
.rdata$r:00002590                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002590 _rdata$r        ends
.rdata$r:00002590
.rdata$r:00002594 ; ===========================================================================
.rdata$r:00002594
.rdata$r:00002594 ; Segment type: Pure data
.rdata$r:00002594 ; Segment permissions: Read
.rdata$r:00002594 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002594                 assume cs:_rdata$r
.rdata$r:00002594                 ;org 2594h
.rdata$r:00002594 ; COMDAT (pick any)
.rdata$r:00002594                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00002594 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00002594 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00002594                                         ; DATA XREF: .rdata$r:00002314o
.rdata$r:00002594                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00002598                 db    0
.rdata$r:00002599                 db    0
.rdata$r:0000259A                 db    0
.rdata$r:0000259B                 db    0
.rdata$r:0000259C                 db  0Ch
.rdata$r:0000259D                 db    0
.rdata$r:0000259E                 db    0
.rdata$r:0000259F                 db    0
.rdata$r:000025A0                 db 0FFh
.rdata$r:000025A1                 db 0FFh
.rdata$r:000025A2                 db 0FFh
.rdata$r:000025A3                 db 0FFh
.rdata$r:000025A4                 db    0
.rdata$r:000025A5                 db    0
.rdata$r:000025A6                 db    0
.rdata$r:000025A7                 db    0
.rdata$r:000025A8                 db  42h ; B
.rdata$r:000025A9                 db    0
.rdata$r:000025AA                 db    0
.rdata$r:000025AB                 db    0
.rdata$r:000025AC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000025AC _rdata$r        ends
.rdata$r:000025AC
.rdata$r:000025B0 ; ===========================================================================
.rdata$r:000025B0
.rdata$r:000025B0 ; Segment type: Pure data
.rdata$r:000025B0 ; Segment permissions: Read
.rdata$r:000025B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000025B0                 assume cs:_rdata$r
.rdata$r:000025B0                 ;org 25B0h
.rdata$r:000025B0 ; COMDAT (pick any)
.rdata$r:000025B0                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000025B0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000025B0 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000025B0                                         ; DATA XREF: .rdata$r:00002318o
.rdata$r:000025B0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000025B4                 align 8
.rdata$r:000025B8                 db  10h
.rdata$r:000025B9                 db    0
.rdata$r:000025BA                 db    0
.rdata$r:000025BB                 db    0
.rdata$r:000025BC                 db 0FFh
.rdata$r:000025BD                 db 0FFh
.rdata$r:000025BE                 db 0FFh
.rdata$r:000025BF                 db 0FFh
.rdata$r:000025C0                 db    0
.rdata$r:000025C1                 db    0
.rdata$r:000025C2                 db    0
.rdata$r:000025C3                 db    0
.rdata$r:000025C4                 db  40h ; @
.rdata$r:000025C5                 db    0
.rdata$r:000025C6                 db    0
.rdata$r:000025C7                 db    0
.rdata$r:000025C8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000025C8 _rdata$r        ends
.rdata$r:000025C8
.data:000025CC ; ===========================================================================
.data:000025CC
.data:000025CC ; Segment type: Pure data
.data:000025CC ; Segment permissions: Read/Write
.data:000025CC _data           segment dword public 'DATA' use32
.data:000025CC                 assume cs:_data
.data:000025CC                 ;org 25CCh
.data:000025CC ; COMDAT (pick any)
.data:000025CC                 public ??_R0?AVCMyUnknownImp@@@8
.data:000025CC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000025CC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000025CC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:000025CC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000025CC                                         ; const type_info::`vftable'
.data:000025D0                 db    0
.data:000025D1                 db    0
.data:000025D2                 db    0
.data:000025D3                 db    0
.data:000025D4                 db  2Eh ; .
.data:000025D5                 db  3Fh ; ?
.data:000025D6                 db  41h ; A
.data:000025D7                 db  56h ; V
.data:000025D8                 db  43h ; C
.data:000025D9                 db  4Dh ; M
.data:000025DA                 db  79h ; y
.data:000025DB                 db  55h ; U
.data:000025DC                 db  6Eh ; n
.data:000025DD                 db  6Bh ; k
.data:000025DE                 db  6Eh ; n
.data:000025DF                 db  6Fh ; o
.data:000025E0                 db  77h ; w
.data:000025E1                 db  6Eh ; n
.data:000025E2                 db  49h ; I
.data:000025E3                 db  6Dh ; m
.data:000025E4                 db  70h ; p
.data:000025E5                 db  40h ; @
.data:000025E6                 db  40h ; @
.data:000025E7                 db    0
.data:000025E7 _data           ends
.data:000025E7
.rdata$r:000025E8 ; ===========================================================================
.rdata$r:000025E8
.rdata$r:000025E8 ; Segment type: Pure data
.rdata$r:000025E8 ; Segment permissions: Read
.rdata$r:000025E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000025E8                 assume cs:_rdata$r
.rdata$r:000025E8                 ;org 25E8h
.rdata$r:000025E8 ; COMDAT (pick any)
.rdata$r:000025E8                 public ??_R3CMyUnknownImp@@8
.rdata$r:000025E8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000025E8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000025C8o
.rdata$r:000025E8                                         ; .rdata$r:00002618o
.rdata$r:000025E9                 db    0
.rdata$r:000025EA                 db    0
.rdata$r:000025EB                 db    0
.rdata$r:000025EC                 db    0
.rdata$r:000025ED                 db    0
.rdata$r:000025EE                 db    0
.rdata$r:000025EF                 db    0
.rdata$r:000025F0                 db    1
.rdata$r:000025F1                 db    0
.rdata$r:000025F2                 db    0
.rdata$r:000025F3                 db    0
.rdata$r:000025F4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000025F4 _rdata$r        ends
.rdata$r:000025F4
.rdata$r:000025F8 ; ===========================================================================
.rdata$r:000025F8
.rdata$r:000025F8 ; Segment type: Pure data
.rdata$r:000025F8 ; Segment permissions: Read
.rdata$r:000025F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000025F8                 assume cs:_rdata$r
.rdata$r:000025F8                 ;org 25F8h
.rdata$r:000025F8 ; COMDAT (pick any)
.rdata$r:000025F8                 public ??_R2CMyUnknownImp@@8
.rdata$r:000025F8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000025F8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000025F8                                         ; DATA XREF: .rdata$r:000025F4o
.rdata$r:000025F8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000025FC                 db    0
.rdata$r:000025FD                 align 10h
.rdata$r:000025FD _rdata$r        ends
.rdata$r:000025FD
.rdata$r:00002600 ; ===========================================================================
.rdata$r:00002600
.rdata$r:00002600 ; Segment type: Pure data
.rdata$r:00002600 ; Segment permissions: Read
.rdata$r:00002600 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002600                 assume cs:_rdata$r
.rdata$r:00002600                 ;org 2600h
.rdata$r:00002600 ; COMDAT (pick any)
.rdata$r:00002600                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00002600 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002600 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00002600                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00002600                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00002604                 db    0
.rdata$r:00002605                 db    0
.rdata$r:00002606                 db    0
.rdata$r:00002607                 db    0
.rdata$r:00002608                 db    0
.rdata$r:00002609                 db    0
.rdata$r:0000260A                 db    0
.rdata$r:0000260B                 db    0
.rdata$r:0000260C                 db 0FFh
.rdata$r:0000260D                 db 0FFh
.rdata$r:0000260E                 db 0FFh
.rdata$r:0000260F                 db 0FFh
.rdata$r:00002610                 db    0
.rdata$r:00002611                 db    0
.rdata$r:00002612                 db    0
.rdata$r:00002613                 db    0
.rdata$r:00002614                 db  40h ; @
.rdata$r:00002615                 db    0
.rdata$r:00002616                 db    0
.rdata$r:00002617                 db    0
.rdata$r:00002618                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002618 _rdata$r        ends
.rdata$r:00002618
.rdata$r:0000261C ; ===========================================================================
.rdata$r:0000261C
.rdata$r:0000261C ; Segment type: Pure data
.rdata$r:0000261C ; Segment permissions: Read
.rdata$r:0000261C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000261C                 assume cs:_rdata$r
.rdata$r:0000261C                 ;org 261Ch
.rdata$r:0000261C ; COMDAT (pick any)
.rdata$r:0000261C                 public ??_R1BI@?0A@EA@COutHandler@N7z@NArchive@@8
.rdata$r:0000261C ; NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:0000261C ??_R1BI@?0A@EA@COutHandler@N7z@NArchive@@8 dd offset ??_R0?AVCOutHandler@N7z@NArchive@@@8
.rdata$r:0000261C                                         ; DATA XREF: .rdata$r:0000231Co
.rdata$r:0000261C                                         ; NArchive::N7z::COutHandler `RTTI Type Descriptor'
.rdata$r:00002620                 db    1
.rdata$r:00002621                 db    0
.rdata$r:00002622                 db    0
.rdata$r:00002623                 db    0
.rdata$r:00002624                 db  18h
.rdata$r:00002625                 db    0
.rdata$r:00002626                 db    0
.rdata$r:00002627                 db    0
.rdata$r:00002628                 db 0FFh
.rdata$r:00002629                 db 0FFh
.rdata$r:0000262A                 db 0FFh
.rdata$r:0000262B                 db 0FFh
.rdata$r:0000262C                 db    0
.rdata$r:0000262D                 db    0
.rdata$r:0000262E                 db    0
.rdata$r:0000262F                 db    0
.rdata$r:00002630                 db  40h ; @
.rdata$r:00002631                 db    0
.rdata$r:00002632                 db    0
.rdata$r:00002633                 db    0
.rdata$r:00002634                 dd offset ??_R3COutHandler@N7z@NArchive@@8 ; NArchive::N7z::COutHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002634 _rdata$r        ends
.rdata$r:00002634
.data:00002638 ; ===========================================================================
.data:00002638
.data:00002638 ; Segment type: Pure data
.data:00002638 ; Segment permissions: Read/Write
.data:00002638 _data           segment dword public 'DATA' use32
.data:00002638                 assume cs:_data
.data:00002638                 ;org 2638h
.data:00002638 ; COMDAT (pick any)
.data:00002638                 public ??_R0?AVCOutHandler@N7z@NArchive@@@8
.data:00002638 ; class NArchive::N7z::COutHandler `RTTI Type Descriptor'
.data:00002638 ??_R0?AVCOutHandler@N7z@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00002638                                         ; DATA XREF: .rdata$r:NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:00002638                                         ; .rdata$r:NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00002638                                         ; const type_info::`vftable'
.data:0000263C                 align 10h
.data:00002640 a_?avcouthandle db '.?AVCOutHandler@N7z@NArchive@@',0
.data:0000265F                 align 10h
.data:0000265F _data           ends
.data:0000265F
.rdata$r:00002660 ; ===========================================================================
.rdata$r:00002660
.rdata$r:00002660 ; Segment type: Pure data
.rdata$r:00002660 ; Segment permissions: Read
.rdata$r:00002660 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002660                 assume cs:_rdata$r
.rdata$r:00002660                 ;org 2660h
.rdata$r:00002660 ; COMDAT (pick any)
.rdata$r:00002660                 public ??_R3COutHandler@N7z@NArchive@@8
.rdata$r:00002660 ; NArchive::N7z::COutHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002660 ??_R3COutHandler@N7z@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00002634o
.rdata$r:00002660                                         ; .rdata$r:00002694o
.rdata$r:00002661                 db    0
.rdata$r:00002662                 db    0
.rdata$r:00002663                 db    0
.rdata$r:00002664                 db    0
.rdata$r:00002665                 db    0
.rdata$r:00002666                 db    0
.rdata$r:00002667                 db    0
.rdata$r:00002668                 db    2
.rdata$r:00002669                 db    0
.rdata$r:0000266A                 db    0
.rdata$r:0000266B                 db    0
.rdata$r:0000266C                 dd offset ??_R2COutHandler@N7z@NArchive@@8 ; NArchive::N7z::COutHandler::`RTTI Base Class Array'
.rdata$r:0000266C _rdata$r        ends
.rdata$r:0000266C
.rdata$r:00002670 ; ===========================================================================
.rdata$r:00002670
.rdata$r:00002670 ; Segment type: Pure data
.rdata$r:00002670 ; Segment permissions: Read
.rdata$r:00002670 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002670                 assume cs:_rdata$r
.rdata$r:00002670                 ;org 2670h
.rdata$r:00002670 ; COMDAT (pick any)
.rdata$r:00002670                 public ??_R2COutHandler@N7z@NArchive@@8
.rdata$r:00002670 ; NArchive::N7z::COutHandler::`RTTI Base Class Array'
.rdata$r:00002670 ??_R2COutHandler@N7z@NArchive@@8 dd offset ??_R1A@?0A@EA@COutHandler@N7z@NArchive@@8
.rdata$r:00002670                                         ; DATA XREF: .rdata$r:0000266Co
.rdata$r:00002670                                         ; NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002674                 dd offset ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002678                 db    0
.rdata$r:00002679                 align 4
.rdata$r:00002679 _rdata$r        ends
.rdata$r:00002679
.rdata$r:0000267C ; ===========================================================================
.rdata$r:0000267C
.rdata$r:0000267C ; Segment type: Pure data
.rdata$r:0000267C ; Segment permissions: Read
.rdata$r:0000267C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000267C                 assume cs:_rdata$r
.rdata$r:0000267C                 ;org 267Ch
.rdata$r:0000267C ; COMDAT (pick any)
.rdata$r:0000267C                 public ??_R1A@?0A@EA@COutHandler@N7z@NArchive@@8
.rdata$r:0000267C ; NArchive::N7z::COutHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000267C ??_R1A@?0A@EA@COutHandler@N7z@NArchive@@8 dd offset ??_R0?AVCOutHandler@N7z@NArchive@@@8
.rdata$r:0000267C                                         ; DATA XREF: .rdata$r:NArchive::N7z::COutHandler::`RTTI Base Class Array'o
.rdata$r:0000267C                                         ; NArchive::N7z::COutHandler `RTTI Type Descriptor'
.rdata$r:00002680                 db    1
.rdata$r:00002681                 db    0
.rdata$r:00002682                 db    0
.rdata$r:00002683                 db    0
.rdata$r:00002684                 db    0
.rdata$r:00002685                 db    0
.rdata$r:00002686                 db    0
.rdata$r:00002687                 db    0
.rdata$r:00002688                 db 0FFh
.rdata$r:00002689                 db 0FFh
.rdata$r:0000268A                 db 0FFh
.rdata$r:0000268B                 db 0FFh
.rdata$r:0000268C                 db    0
.rdata$r:0000268D                 db    0
.rdata$r:0000268E                 db    0
.rdata$r:0000268F                 db    0
.rdata$r:00002690                 db  40h ; @
.rdata$r:00002691                 db    0
.rdata$r:00002692                 db    0
.rdata$r:00002693                 db    0
.rdata$r:00002694                 dd offset ??_R3COutHandler@N7z@NArchive@@8 ; NArchive::N7z::COutHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002694 _rdata$r        ends
.rdata$r:00002694
.rdata$r:00002698 ; ===========================================================================
.rdata$r:00002698
.rdata$r:00002698 ; Segment type: Pure data
.rdata$r:00002698 ; Segment permissions: Read
.rdata$r:00002698 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002698                 assume cs:_rdata$r
.rdata$r:00002698                 ;org 2698h
.rdata$r:00002698 ; COMDAT (pick any)
.rdata$r:00002698                 public ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:00002698 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002698 ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8 dd offset ??_R0?AVCMultiMethodProps@NArchive@@@8
.rdata$r:00002698                                         ; DATA XREF: .rdata$r:00002674o
.rdata$r:00002698                                         ; .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Array'o
.rdata$r:00002698                                         ; NArchive::CMultiMethodProps `RTTI Type Descriptor'
.rdata$r:0000269C                 db    0
.rdata$r:0000269D                 db    0
.rdata$r:0000269E                 db    0
.rdata$r:0000269F                 db    0
.rdata$r:000026A0                 db    0
.rdata$r:000026A1                 db    0
.rdata$r:000026A2                 db    0
.rdata$r:000026A3                 db    0
.rdata$r:000026A4                 db 0FFh
.rdata$r:000026A5                 db 0FFh
.rdata$r:000026A6                 db 0FFh
.rdata$r:000026A7                 db 0FFh
.rdata$r:000026A8                 db    0
.rdata$r:000026A9                 db    0
.rdata$r:000026AA                 db    0
.rdata$r:000026AB                 db    0
.rdata$r:000026AC                 db  40h ; @
.rdata$r:000026AD                 db    0
.rdata$r:000026AE                 db    0
.rdata$r:000026AF                 db    0
.rdata$r:000026B0                 dd offset ??_R3CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026B0 _rdata$r        ends
.rdata$r:000026B0
.data:000026B4 ; ===========================================================================
.data:000026B4
.data:000026B4 ; Segment type: Pure data
.data:000026B4 ; Segment permissions: Read/Write
.data:000026B4 _data           segment dword public 'DATA' use32
.data:000026B4                 assume cs:_data
.data:000026B4                 ;org 26B4h
.data:000026B4 ; COMDAT (pick any)
.data:000026B4                 public ??_R0?AVCMultiMethodProps@NArchive@@@8
.data:000026B4 ; class NArchive::CMultiMethodProps `RTTI Type Descriptor'
.data:000026B4 ??_R0?AVCMultiMethodProps@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:000026B4                                         ; DATA XREF: .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000026B4                                         ; .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (24,-1,0,64)'o
.data:000026B4                                         ; const type_info::`vftable'
.data:000026B8                 db    0
.data:000026B9                 db    0
.data:000026BA                 db    0
.data:000026BB                 db    0
.data:000026BC                 db  2Eh ; .
.data:000026BD                 db  3Fh ; ?
.data:000026BE                 db  41h ; A
.data:000026BF                 db  56h ; V
.data:000026C0                 db  43h ; C
.data:000026C1                 db  4Dh ; M
.data:000026C2                 db  75h ; u
.data:000026C3                 db  6Ch ; l
.data:000026C4                 db  74h ; t
.data:000026C5                 db  69h ; i
.data:000026C6                 db  4Dh ; M
.data:000026C7                 db  65h ; e
.data:000026C8                 db  74h ; t
.data:000026C9                 db  68h ; h
.data:000026CA                 db  6Fh ; o
.data:000026CB                 db  64h ; d
.data:000026CC                 db  50h ; P
.data:000026CD                 db  72h ; r
.data:000026CE                 db  6Fh ; o
.data:000026CF                 db  70h ; p
.data:000026D0                 db  73h ; s
.data:000026D1                 db  40h ; @
.data:000026D2                 db  4Eh ; N
.data:000026D3                 db  41h ; A
.data:000026D4                 db  72h ; r
.data:000026D5                 db  63h ; c
.data:000026D6                 db  68h ; h
.data:000026D7                 db  69h ; i
.data:000026D8                 db  76h ; v
.data:000026D9                 db  65h ; e
.data:000026DA                 db  40h ; @
.data:000026DB                 db  40h ; @
.data:000026DC                 db    0
.data:000026DD                 align 10h
.data:000026DD _data           ends
.data:000026DD
.rdata$r:000026E0 ; ===========================================================================
.rdata$r:000026E0
.rdata$r:000026E0 ; Segment type: Pure data
.rdata$r:000026E0 ; Segment permissions: Read
.rdata$r:000026E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026E0                 assume cs:_rdata$r
.rdata$r:000026E0                 ;org 26E0h
.rdata$r:000026E0 ; COMDAT (pick any)
.rdata$r:000026E0                 public ??_R3CMultiMethodProps@NArchive@@8
.rdata$r:000026E0 ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000026E0 ??_R3CMultiMethodProps@NArchive@@8 db    0 ; DATA XREF: .rdata$r:000026B0o
.rdata$r:000026E0                                         ; .rdata$r:00002710o
.rdata$r:000026E1                 db    0
.rdata$r:000026E2                 db    0
.rdata$r:000026E3                 db    0
.rdata$r:000026E4                 db    0
.rdata$r:000026E5                 db    0
.rdata$r:000026E6                 db    0
.rdata$r:000026E7                 db    0
.rdata$r:000026E8                 db    1
.rdata$r:000026E9                 db    0
.rdata$r:000026EA                 db    0
.rdata$r:000026EB                 db    0
.rdata$r:000026EC                 dd offset ??_R2CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Array'
.rdata$r:000026EC _rdata$r        ends
.rdata$r:000026EC
.rdata$r:000026F0 ; ===========================================================================
.rdata$r:000026F0
.rdata$r:000026F0 ; Segment type: Pure data
.rdata$r:000026F0 ; Segment permissions: Read
.rdata$r:000026F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026F0                 assume cs:_rdata$r
.rdata$r:000026F0                 ;org 26F0h
.rdata$r:000026F0 ; COMDAT (pick any)
.rdata$r:000026F0                 public ??_R2CMultiMethodProps@NArchive@@8
.rdata$r:000026F0 ; NArchive::CMultiMethodProps::`RTTI Base Class Array'
.rdata$r:000026F0 ??_R2CMultiMethodProps@NArchive@@8 dd offset ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:000026F0                                         ; DATA XREF: .rdata$r:000026ECo
.rdata$r:000026F0                                         ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000026F4                 db    0
.rdata$r:000026F5                 align 4
.rdata$r:000026F5 _rdata$r        ends
.rdata$r:000026F5
.rdata$r:000026F8 ; ===========================================================================
.rdata$r:000026F8
.rdata$r:000026F8 ; Segment type: Pure data
.rdata$r:000026F8 ; Segment permissions: Read
.rdata$r:000026F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000026F8                 assume cs:_rdata$r
.rdata$r:000026F8                 ;org 26F8h
.rdata$r:000026F8 ; COMDAT (pick any)
.rdata$r:000026F8                 public ??_R1BI@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:000026F8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (24, -1, 0, 64)'
.rdata$r:000026F8 ??_R1BI@?0A@EA@CMultiMethodProps@NArchive@@8 dd offset ??_R0?AVCMultiMethodProps@NArchive@@@8
.rdata$r:000026F8                                         ; DATA XREF: .rdata$r:00002320o
.rdata$r:000026F8                                         ; NArchive::CMultiMethodProps `RTTI Type Descriptor'
.rdata$r:000026FC                 align 10h
.rdata$r:00002700                 db  18h
.rdata$r:00002701                 db    0
.rdata$r:00002702                 db    0
.rdata$r:00002703                 db    0
.rdata$r:00002704                 db 0FFh
.rdata$r:00002705                 db 0FFh
.rdata$r:00002706                 db 0FFh
.rdata$r:00002707                 db 0FFh
.rdata$r:00002708                 db    0
.rdata$r:00002709                 db    0
.rdata$r:0000270A                 db    0
.rdata$r:0000270B                 db    0
.rdata$r:0000270C                 db  40h ; @
.rdata$r:0000270D                 db    0
.rdata$r:0000270E                 db    0
.rdata$r:0000270F                 db    0
.rdata$r:00002710                 dd offset ??_R3CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002710 _rdata$r        ends
.rdata$r:00002710
.rdata$r:00002714 ; ===========================================================================
.rdata$r:00002714
.rdata$r:00002714 ; Segment type: Pure data
.rdata$r:00002714 ; Segment permissions: Read
.rdata$r:00002714 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002714                 assume cs:_rdata$r
.rdata$r:00002714                 ;org 2714h
.rdata$r:00002714 ; COMDAT (pick any)
.rdata$r:00002714                 public ??_R4CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@
.rdata$r:00002714 ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IArchiveGetRawProps'}
.rdata$r:00002714 ??_R4CHandler@N7z@NArchive@@6BIArchiveGetRawProps@@@ db    0
.rdata$r:00002714                                         ; DATA XREF: .rdata:00002044o
.rdata$r:00002715                 db    0
.rdata$r:00002716                 db    0
.rdata$r:00002717                 db    0
.rdata$r:00002718                 db    4
.rdata$r:00002719                 db    0
.rdata$r:0000271A                 db    0
.rdata$r:0000271B                 db    0
.rdata$r:0000271C                 db    0
.rdata$r:0000271D                 db    0
.rdata$r:0000271E                 db    0
.rdata$r:0000271F                 db    0
.rdata$r:00002720                 dd offset ??_R0?AVCHandler@N7z@NArchive@@@8 ; NArchive::N7z::CHandler `RTTI Type Descriptor'
.rdata$r:00002724                 dd offset ??_R3CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002724 _rdata$r        ends
.rdata$r:00002724
.rdata$r:00002728 ; ===========================================================================
.rdata$r:00002728
.rdata$r:00002728 ; Segment type: Pure data
.rdata$r:00002728 ; Segment permissions: Read
.rdata$r:00002728 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002728                 assume cs:_rdata$r
.rdata$r:00002728                 ;org 2728h
.rdata$r:00002728 ; COMDAT (pick any)
.rdata$r:00002728                 public ??_R4CHandler@N7z@NArchive@@6BISetProperties@@@
.rdata$r:00002728 ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:00002728 ??_R4CHandler@N7z@NArchive@@6BISetProperties@@@ db    0
.rdata$r:00002728                                         ; DATA XREF: .rdata:00002030o
.rdata$r:00002729                 db    0
.rdata$r:0000272A                 db    0
.rdata$r:0000272B                 db    0
.rdata$r:0000272C                 db    8
.rdata$r:0000272D                 db    0
.rdata$r:0000272E                 db    0
.rdata$r:0000272F                 db    0
.rdata$r:00002730                 db    0
.rdata$r:00002731                 db    0
.rdata$r:00002732                 db    0
.rdata$r:00002733                 db    0
.rdata$r:00002734                 dd offset ??_R0?AVCHandler@N7z@NArchive@@@8 ; NArchive::N7z::CHandler `RTTI Type Descriptor'
.rdata$r:00002738                 dd offset ??_R3CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002738 _rdata$r        ends
.rdata$r:00002738
.rdata$r:0000273C ; ===========================================================================
.rdata$r:0000273C
.rdata$r:0000273C ; Segment type: Pure data
.rdata$r:0000273C ; Segment permissions: Read
.rdata$r:0000273C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000273C                 assume cs:_rdata$r
.rdata$r:0000273C                 ;org 273Ch
.rdata$r:0000273C ; COMDAT (pick any)
.rdata$r:0000273C                 public ??_R4CHandler@N7z@NArchive@@6BIOutArchive@@@
.rdata$r:0000273C ; const NArchive::N7z::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:0000273C ??_R4CHandler@N7z@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:0000273C                                         ; DATA XREF: .rdata:00002018o
.rdata$r:0000273D                 db    0
.rdata$r:0000273E                 db    0
.rdata$r:0000273F                 db    0
.rdata$r:00002740                 db  0Ch
.rdata$r:00002741                 db    0
.rdata$r:00002742                 db    0
.rdata$r:00002743                 db    0
.rdata$r:00002744                 db    0
.rdata$r:00002745                 db    0
.rdata$r:00002746                 db    0
.rdata$r:00002747                 db    0
.rdata$r:00002748                 dd offset ??_R0?AVCHandler@N7z@NArchive@@@8 ; NArchive::N7z::CHandler `RTTI Type Descriptor'
.rdata$r:0000274C                 dd offset ??_R3CHandler@N7z@NArchive@@8 ; NArchive::N7z::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000274C _rdata$r        ends
.rdata$r:0000274C
.text:00002750 ; ===========================================================================
.text:00002750
.text:00002750 ; Segment type: Pure code
.text:00002750 ; Segment permissions: Read/Execute
.text:00002750 _text           segment para public 'CODE' use32
.text:00002750                 assume cs:_text
.text:00002750                 ;org 2750h
.text:00002750 ; COMDAT (pick any)
.text:00002750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002750
.text:00002750 ; =============== S U B R O U T I N E =======================================
.text:00002750
.text:00002750 ; Attributes: bp-based frame
.text:00002750
.text:00002750 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00002750                 public ??1UString@@QAE@XZ
.text:00002750 ??1UString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$3+9j
.text:00002750                                         ; COneMethodInfo::~COneMethodInfo(void)+3Ap ...
.text:00002750
.text:00002750 var_8           = dword ptr -8
.text:00002750 var_4           = dword ptr -4
.text:00002750
.text:00002750                 push    ebp
.text:00002751                 mov     ebp, esp
.text:00002753                 sub     esp, 8
.text:00002756                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000275D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002764                 mov     [ebp+var_4], ecx
.text:00002767                 mov     eax, [ebp+var_4]
.text:0000276A                 mov     ecx, [eax]
.text:0000276C                 mov     [ebp+var_8], ecx
.text:0000276F                 mov     edx, [ebp+var_8]
.text:00002772                 push    edx             ; void *
.text:00002773                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002778                 add     esp, 4
.text:0000277B                 add     esp, 8
.text:0000277E                 cmp     ebp, esp
.text:00002780                 call    __RTC_CheckEsp
.text:00002785                 mov     esp, ebp
.text:00002787                 pop     ebp
.text:00002788                 retn
.text:00002788 ??1UString@@QAE@XZ endp
.text:00002788
.text:00002788 ; ---------------------------------------------------------------------------
.text:00002789                 align 4
.text:00002789 _text           ends
.text:00002789
.text:0000278C ; ===========================================================================
.text:0000278C
.text:0000278C ; Segment type: Pure code
.text:0000278C ; Segment permissions: Read/Execute
.text:0000278C _text           segment para public 'CODE' use32
.text:0000278C                 assume cs:_text
.text:0000278C                 ;org 278Ch
.text:0000278C ; COMDAT (pick any)
.text:0000278C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000278C
.text:0000278C ; =============== S U B R O U T I N E =======================================
.text:0000278C
.text:0000278C ; Attributes: bp-based frame
.text:0000278C
.text:0000278C ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:0000278C                 public ??0CMyUnknownImp@@QAE@XZ
.text:0000278C ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+5Cp
.text:0000278C
.text:0000278C var_4           = dword ptr -4
.text:0000278C
.text:0000278C                 push    ebp
.text:0000278D                 mov     ebp, esp
.text:0000278F                 push    ecx
.text:00002790                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002797                 mov     [ebp+var_4], ecx
.text:0000279A                 mov     eax, [ebp+var_4]
.text:0000279D                 mov     dword ptr [eax], 0
.text:000027A3                 mov     eax, [ebp+var_4]
.text:000027A6                 mov     esp, ebp
.text:000027A8                 pop     ebp
.text:000027A9                 retn
.text:000027A9 ??0CMyUnknownImp@@QAE@XZ endp
.text:000027A9
.text:000027A9 ; ---------------------------------------------------------------------------
.text:000027AA                 align 4
.text:000027AA _text           ends
.text:000027AA
.text:000027AC ; ===========================================================================
.text:000027AC
.text:000027AC ; Segment type: Pure code
.text:000027AC ; Segment permissions: Read/Execute
.text:000027AC _text           segment para public 'CODE' use32
.text:000027AC                 assume cs:_text
.text:000027AC                 ;org 27ACh
.text:000027AC ; COMDAT (pick any)
.text:000027AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000027AC
.text:000027AC ; =============== S U B R O U T I N E =======================================
.text:000027AC
.text:000027AC ; Attributes: bp-based frame
.text:000027AC
.text:000027AC ; _DWORD __thiscall NArchive::N7z::COutHandler::COutHandler(NArchive::N7z::COutHandler *__hidden this)
.text:000027AC                 public ??0COutHandler@N7z@NArchive@@QAE@XZ
.text:000027AC ??0COutHandler@N7z@NArchive@@QAE@XZ proc near
.text:000027AC                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+67p
.text:000027AC
.text:000027AC var_10          = dword ptr -10h
.text:000027AC var_C           = dword ptr -0Ch
.text:000027AC var_4           = dword ptr -4
.text:000027AC
.text:000027AC                 push    ebp
.text:000027AD                 mov     ebp, esp
.text:000027AF                 push    0FFFFFFFFh
.text:000027B1                 push    offset __ehhandler$??0COutHandler@N7z@NArchive@@QAE@XZ
.text:000027B6                 mov     eax, large fs:0
.text:000027BC                 push    eax
.text:000027BD                 push    ecx
.text:000027BE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000027C5                 mov     eax, dword ptr ds:___security_cookie
.text:000027CA                 xor     eax, ebp
.text:000027CC                 push    eax
.text:000027CD                 lea     eax, [ebp+var_C]
.text:000027D0                 mov     large fs:0, eax
.text:000027D6                 mov     [ebp+var_10], ecx
.text:000027D9                 mov     ecx, [ebp+var_10] ; this
.text:000027DC                 call    ??0CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::CMultiMethodProps(void)
.text:000027E1                 mov     [ebp+var_4], 0
.text:000027E8                 mov     ecx, [ebp+var_10]
.text:000027EB                 add     ecx, 65h ; 'e'  ; this
.text:000027EE                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000027F3                 mov     ecx, [ebp+var_10]
.text:000027F6                 add     ecx, 67h ; 'g'  ; this
.text:000027F9                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:000027FE                 mov     ecx, [ebp+var_10]
.text:00002801                 add     ecx, 69h ; 'i'  ; this
.text:00002804                 call    ??0CBoolPair@@QAE@XZ ; CBoolPair::CBoolPair(void)
.text:00002809                 mov     ecx, [ebp+var_10] ; this
.text:0000280C                 call    ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitProps(void)
.text:00002811                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002818                 mov     eax, [ebp+var_10]
.text:0000281B                 mov     ecx, [ebp+var_C]
.text:0000281E                 mov     large fs:0, ecx
.text:00002825                 pop     ecx
.text:00002826                 add     esp, 10h
.text:00002829                 cmp     ebp, esp
.text:0000282B                 call    __RTC_CheckEsp
.text:00002830                 mov     esp, ebp
.text:00002832                 pop     ebp
.text:00002833                 retn
.text:00002833 ??0COutHandler@N7z@NArchive@@QAE@XZ endp
.text:00002833
.text:00002833 _text           ends
.text:00002833
.text$x:00002834 ; ===========================================================================
.text$x:00002834
.text$x:00002834 ; Segment type: Pure code
.text$x:00002834 ; Segment permissions: Read/Execute
.text$x:00002834 _text$x         segment para public 'CODE' use32
.text$x:00002834                 assume cs:_text$x
.text$x:00002834                 ;org 2834h
.text$x:00002834 ; COMDAT (pick associative to section at 27AC)
.text$x:00002834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002834
.text$x:00002834 ; =============== S U B R O U T I N E =======================================
.text$x:00002834
.text$x:00002834
.text$x:00002834 __unwindfunclet$??0COutHandler@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00002834                                         ; DATA XREF: .xdata$x:0000285Co
.text$x:00002834                 mov     ecx, [ebp-10h]  ; this
.text$x:00002837                 jmp     ??1CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)
.text$x:00002837 __unwindfunclet$??0COutHandler@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00002837
.text$x:0000283C
.text$x:0000283C ; =============== S U B R O U T I N E =======================================
.text$x:0000283C
.text$x:0000283C
.text$x:0000283C __ehhandler$??0COutHandler@N7z@NArchive@@QAE@XZ proc near
.text$x:0000283C                                         ; DATA XREF: NArchive::N7z::COutHandler::COutHandler(void)+5o
.text$x:0000283C
.text$x:0000283C arg_4           = dword ptr  8
.text$x:0000283C
.text$x:0000283C                 mov     edx, [esp+arg_4]
.text$x:00002840                 lea     eax, [edx+0Ch]
.text$x:00002843                 mov     ecx, [edx-8]
.text$x:00002846                 xor     ecx, eax
.text$x:00002848                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000284D                 mov     eax, offset __ehfuncinfo$??0COutHandler@N7z@NArchive@@QAE@XZ
.text$x:00002852                 jmp     ___CxxFrameHandler3
.text$x:00002852 __ehhandler$??0COutHandler@N7z@NArchive@@QAE@XZ endp
.text$x:00002852
.text$x:00002852 ; ---------------------------------------------------------------------------
.text$x:00002857                 align 4
.text$x:00002857 _text$x         ends
.text$x:00002857
.xdata$x:00002858 ; ===========================================================================
.xdata$x:00002858
.xdata$x:00002858 ; Segment type: Pure data
.xdata$x:00002858 ; Segment permissions: Read
.xdata$x:00002858 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002858                 assume cs:_xdata$x
.xdata$x:00002858                 ;org 2858h
.xdata$x:00002858 ; COMDAT (pick associative to section at 27AC)
.xdata$x:00002858 __unwindtable$??0COutHandler@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002858                                         ; DATA XREF: .xdata$x:00002868o
.xdata$x:00002859                 db 0FFh
.xdata$x:0000285A                 db 0FFh
.xdata$x:0000285B                 db 0FFh
.xdata$x:0000285C                 dd offset __unwindfunclet$??0COutHandler@N7z@NArchive@@QAE@XZ$0
.xdata$x:00002860 __ehfuncinfo$??0COutHandler@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002860                                         ; DATA XREF: __ehhandler$??0COutHandler@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00002861                 db    5
.xdata$x:00002862                 db  93h ; ô
.xdata$x:00002863                 db  19h
.xdata$x:00002864                 db    1
.xdata$x:00002865                 db    0
.xdata$x:00002866                 db    0
.xdata$x:00002867                 db    0
.xdata$x:00002868                 dd offset __unwindtable$??0COutHandler@N7z@NArchive@@QAE@XZ
.xdata$x:0000286C                 align 20h
.xdata$x:00002880                 db    1
.xdata$x:00002881                 db    0
.xdata$x:00002882                 db    0
.xdata$x:00002883                 db    0
.xdata$x:00002883 _xdata$x        ends
.xdata$x:00002883
.text:00002884 ; ===========================================================================
.text:00002884
.text:00002884 ; Segment type: Pure code
.text:00002884 ; Segment permissions: Read/Execute
.text:00002884 _text           segment para public 'CODE' use32
.text:00002884                 assume cs:_text
.text:00002884                 ;org 2884h
.text:00002884 ; COMDAT (pick any)
.text:00002884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002884
.text:00002884 ; =============== S U B R O U T I N E =======================================
.text:00002884
.text:00002884 ; Attributes: bp-based frame
.text:00002884
.text:00002884 ; _DWORD __thiscall CBoolPair::CBoolPair(CBoolPair *__hidden this)
.text:00002884                 public ??0CBoolPair@@QAE@XZ
.text:00002884 ??0CBoolPair@@QAE@XZ proc near          ; CODE XREF: NArchive::N7z::COutHandler::COutHandler(void)+42p
.text:00002884                                         ; NArchive::N7z::COutHandler::COutHandler(void)+4Dp ...
.text:00002884
.text:00002884 var_4           = dword ptr -4
.text:00002884
.text:00002884                 push    ebp
.text:00002885                 mov     ebp, esp
.text:00002887                 push    ecx
.text:00002888                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000288F                 mov     [ebp+var_4], ecx
.text:00002892                 mov     eax, [ebp+var_4]
.text:00002895                 mov     byte ptr [eax], 0
.text:00002898                 mov     ecx, [ebp+var_4]
.text:0000289B                 mov     byte ptr [ecx+1], 0
.text:0000289F                 mov     eax, [ebp+var_4]
.text:000028A2                 mov     esp, ebp
.text:000028A4                 pop     ebp
.text:000028A5                 retn
.text:000028A5 ??0CBoolPair@@QAE@XZ endp
.text:000028A5
.text:000028A5 ; ---------------------------------------------------------------------------
.text:000028A6                 align 4
.text:000028A6 _text           ends
.text:000028A6
.text:000028A8 ; ===========================================================================
.text:000028A8
.text:000028A8 ; Segment type: Pure code
.text:000028A8 ; Segment permissions: Read/Execute
.text:000028A8 _text           segment para public 'CODE' use32
.text:000028A8                 assume cs:_text
.text:000028A8                 ;org 28A8h
.text:000028A8 ; COMDAT (pick any)
.text:000028A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000028A8
.text:000028A8 ; =============== S U B R O U T I N E =======================================
.text:000028A8
.text:000028A8 ; Attributes: bp-based frame
.text:000028A8
.text:000028A8 ; _DWORD __thiscall NArchive::CMultiMethodProps::CMultiMethodProps(NArchive::CMultiMethodProps *__hidden this)
.text:000028A8                 public ??0CMultiMethodProps@NArchive@@QAE@XZ
.text:000028A8 ??0CMultiMethodProps@NArchive@@QAE@XZ proc near
.text:000028A8                                         ; CODE XREF: NArchive::N7z::COutHandler::COutHandler(void)+30p
.text:000028A8
.text:000028A8 var_10          = dword ptr -10h
.text:000028A8 var_C           = dword ptr -0Ch
.text:000028A8 var_4           = dword ptr -4
.text:000028A8
.text:000028A8                 push    ebp
.text:000028A9                 mov     ebp, esp
.text:000028AB                 push    0FFFFFFFFh
.text:000028AD                 push    offset __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ
.text:000028B2                 mov     eax, large fs:0
.text:000028B8                 push    eax
.text:000028B9                 push    ecx
.text:000028BA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000028C1                 mov     eax, dword ptr ds:___security_cookie
.text:000028C6                 xor     eax, ebp
.text:000028C8                 push    eax
.text:000028C9                 lea     eax, [ebp+var_C]
.text:000028CC                 mov     large fs:0, eax
.text:000028D2                 mov     [ebp+var_10], ecx
.text:000028D5                 mov     ecx, [ebp+var_10]
.text:000028D8                 add     ecx, 14h
.text:000028DB                 call    ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(void)
.text:000028E0                 mov     [ebp+var_4], 0
.text:000028E7                 mov     ecx, [ebp+var_10]
.text:000028EA                 add     ecx, 20h ; ' '  ; this
.text:000028ED                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:000028F2                 mov     byte ptr [ebp+var_4], 1
.text:000028F6                 mov     ecx, [ebp+var_10] ; this
.text:000028F9                 call    ?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init(void)
.text:000028FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002905                 mov     eax, [ebp+var_10]
.text:00002908                 mov     ecx, [ebp+var_C]
.text:0000290B                 mov     large fs:0, ecx
.text:00002912                 pop     ecx
.text:00002913                 add     esp, 10h
.text:00002916                 cmp     ebp, esp
.text:00002918                 call    __RTC_CheckEsp
.text:0000291D                 mov     esp, ebp
.text:0000291F                 pop     ebp
.text:00002920                 retn
.text:00002920 ??0CMultiMethodProps@NArchive@@QAE@XZ endp
.text:00002920
.text:00002920 ; ---------------------------------------------------------------------------
.text:00002921                 align 4
.text:00002921 _text           ends
.text:00002921
.text$x:00002924 ; ===========================================================================
.text$x:00002924
.text$x:00002924 ; Segment type: Pure code
.text$x:00002924 ; Segment permissions: Read/Execute
.text$x:00002924 _text$x         segment para public 'CODE' use32
.text$x:00002924                 assume cs:_text$x
.text$x:00002924                 ;org 2924h
.text$x:00002924 ; COMDAT (pick associative to section at 28A8)
.text$x:00002924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002924
.text$x:00002924 ; =============== S U B R O U T I N E =======================================
.text$x:00002924
.text$x:00002924
.text$x:00002924 __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00002924                                         ; DATA XREF: .xdata$x:0000295Co
.text$x:00002924                 mov     ecx, [ebp-10h]
.text$x:00002927                 add     ecx, 14h
.text$x:0000292A                 jmp     ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text$x:0000292A __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:0000292A
.text$x:0000292F
.text$x:0000292F ; =============== S U B R O U T I N E =======================================
.text$x:0000292F
.text$x:0000292F
.text$x:0000292F __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1 proc near
.text$x:0000292F                                         ; DATA XREF: .xdata$x:00002964o
.text$x:0000292F                 mov     ecx, [ebp-10h]
.text$x:00002932                 add     ecx, 20h ; ' '  ; this
.text$x:00002935                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00002935 __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1 endp
.text$x:00002935
.text$x:0000293A
.text$x:0000293A ; =============== S U B R O U T I N E =======================================
.text$x:0000293A
.text$x:0000293A
.text$x:0000293A __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ proc near
.text$x:0000293A                                         ; DATA XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+5o
.text$x:0000293A
.text$x:0000293A arg_4           = dword ptr  8
.text$x:0000293A
.text$x:0000293A                 mov     edx, [esp+arg_4]
.text$x:0000293E                 lea     eax, [edx+0Ch]
.text$x:00002941                 mov     ecx, [edx-8]
.text$x:00002944                 xor     ecx, eax
.text$x:00002946                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000294B                 mov     eax, offset __ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ
.text$x:00002950                 jmp     ___CxxFrameHandler3
.text$x:00002950 __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ endp
.text$x:00002950
.text$x:00002950 ; ---------------------------------------------------------------------------
.text$x:00002955                 align 4
.text$x:00002955 _text$x         ends
.text$x:00002955
.xdata$x:00002958 ; ===========================================================================
.xdata$x:00002958
.xdata$x:00002958 ; Segment type: Pure data
.xdata$x:00002958 ; Segment permissions: Read
.xdata$x:00002958 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002958                 assume cs:_xdata$x
.xdata$x:00002958                 ;org 2958h
.xdata$x:00002958 ; COMDAT (pick associative to section at 28A8)
.xdata$x:00002958 __unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002958                                         ; DATA XREF: .xdata$x:00002970o
.xdata$x:00002959                 db 0FFh
.xdata$x:0000295A                 db 0FFh
.xdata$x:0000295B                 db 0FFh
.xdata$x:0000295C                 dd offset __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00002960                 db    0
.xdata$x:00002961                 db    0
.xdata$x:00002962                 db    0
.xdata$x:00002963                 db    0
.xdata$x:00002964                 dd offset __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1
.xdata$x:00002968 __ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002968                                         ; DATA XREF: __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00002969                 db    5
.xdata$x:0000296A                 db  93h ; ô
.xdata$x:0000296B                 db  19h
.xdata$x:0000296C                 db    2
.xdata$x:0000296D                 db    0
.xdata$x:0000296E                 db    0
.xdata$x:0000296F                 db    0
.xdata$x:00002970                 dd offset __unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ
.xdata$x:00002974                 db    0
.xdata$x:00002975                 db    0
.xdata$x:00002976                 db    0
.xdata$x:00002977                 db    0
.xdata$x:00002978                 db    0
.xdata$x:00002979                 db    0
.xdata$x:0000297A                 db    0
.xdata$x:0000297B                 db    0
.xdata$x:0000297C                 db    0
.xdata$x:0000297D                 db    0
.xdata$x:0000297E                 db    0
.xdata$x:0000297F                 db    0
.xdata$x:00002980                 db    0
.xdata$x:00002981                 db    0
.xdata$x:00002982                 db    0
.xdata$x:00002983                 db    0
.xdata$x:00002984                 db    0
.xdata$x:00002985                 db    0
.xdata$x:00002986                 db    0
.xdata$x:00002987                 db    0
.xdata$x:00002988                 db    1
.xdata$x:00002989                 db    0
.xdata$x:0000298A                 db    0
.xdata$x:0000298B                 db    0
.xdata$x:0000298B _xdata$x        ends
.xdata$x:0000298B
.text:0000298C ; ===========================================================================
.text:0000298C
.text:0000298C ; Segment type: Pure code
.text:0000298C ; Segment permissions: Read/Execute
.text:0000298C _text           segment para public 'CODE' use32
.text:0000298C                 assume cs:_text
.text:0000298C                 ;org 298Ch
.text:0000298C ; COMDAT (pick any)
.text:0000298C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000298C
.text:0000298C ; =============== S U B R O U T I N E =======================================
.text:0000298C
.text:0000298C ; Attributes: bp-based frame
.text:0000298C
.text:0000298C ; _DWORD __thiscall COneMethodInfo::COneMethodInfo(COneMethodInfo *__hidden this)
.text:0000298C                 public ??0COneMethodInfo@@QAE@XZ
.text:0000298C ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+45p
.text:0000298C
.text:0000298C var_10          = dword ptr -10h
.text:0000298C var_C           = dword ptr -0Ch
.text:0000298C var_4           = dword ptr -4
.text:0000298C
.text:0000298C                 push    ebp
.text:0000298D                 mov     ebp, esp
.text:0000298F                 push    0FFFFFFFFh
.text:00002991                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:00002996                 mov     eax, large fs:0
.text:0000299C                 push    eax
.text:0000299D                 push    ecx
.text:0000299E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000029A5                 mov     eax, dword ptr ds:___security_cookie
.text:000029AA                 xor     eax, ebp
.text:000029AC                 push    eax
.text:000029AD                 lea     eax, [ebp+var_C]
.text:000029B0                 mov     large fs:0, eax
.text:000029B6                 mov     [ebp+var_10], ecx
.text:000029B9                 mov     ecx, [ebp+var_10] ; this
.text:000029BC                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:000029C1                 mov     [ebp+var_4], 0
.text:000029C8                 mov     ecx, [ebp+var_10]
.text:000029CB                 add     ecx, 0Ch
.text:000029CE                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000029D3                 mov     byte ptr [ebp+var_4], 1
.text:000029D7                 mov     ecx, [ebp+var_10]
.text:000029DA                 add     ecx, 18h
.text:000029DD                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000029E2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000029E9                 mov     eax, [ebp+var_10]
.text:000029EC                 mov     ecx, [ebp+var_C]
.text:000029EF                 mov     large fs:0, ecx
.text:000029F6                 pop     ecx
.text:000029F7                 add     esp, 10h
.text:000029FA                 cmp     ebp, esp
.text:000029FC                 call    __RTC_CheckEsp
.text:00002A01                 mov     esp, ebp
.text:00002A03                 pop     ebp
.text:00002A04                 retn
.text:00002A04 ??0COneMethodInfo@@QAE@XZ endp
.text:00002A04
.text:00002A04 ; ---------------------------------------------------------------------------
.text:00002A05                 align 4
.text:00002A05 _text           ends
.text:00002A05
.text$x:00002A08 ; ===========================================================================
.text$x:00002A08
.text$x:00002A08 ; Segment type: Pure code
.text$x:00002A08 ; Segment permissions: Read/Execute
.text$x:00002A08 _text$x         segment para public 'CODE' use32
.text$x:00002A08                 assume cs:_text$x
.text$x:00002A08                 ;org 2A08h
.text$x:00002A08 ; COMDAT (pick associative to section at 298C)
.text$x:00002A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A08
.text$x:00002A08 ; =============== S U B R O U T I N E =======================================
.text$x:00002A08
.text$x:00002A08
.text$x:00002A08 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00002A08                                         ; DATA XREF: .xdata$x:00002A3Co
.text$x:00002A08                 mov     ecx, [ebp-10h]  ; this
.text$x:00002A0B                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00002A0B __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:00002A0B
.text$x:00002A10
.text$x:00002A10 ; =============== S U B R O U T I N E =======================================
.text$x:00002A10
.text$x:00002A10
.text$x:00002A10 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00002A10                                         ; DATA XREF: .xdata$x:00002A44o
.text$x:00002A10                 mov     ecx, [ebp-10h]
.text$x:00002A13                 add     ecx, 0Ch        ; this
.text$x:00002A16                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002A16 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:00002A16
.text$x:00002A1B
.text$x:00002A1B ; =============== S U B R O U T I N E =======================================
.text$x:00002A1B
.text$x:00002A1B
.text$x:00002A1B __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:00002A1B                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:00002A1B
.text$x:00002A1B arg_4           = dword ptr  8
.text$x:00002A1B
.text$x:00002A1B                 mov     edx, [esp+arg_4]
.text$x:00002A1F                 lea     eax, [edx+0Ch]
.text$x:00002A22                 mov     ecx, [edx-8]
.text$x:00002A25                 xor     ecx, eax
.text$x:00002A27                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002A2C                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:00002A31                 jmp     ___CxxFrameHandler3
.text$x:00002A31 __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:00002A31
.text$x:00002A31 ; ---------------------------------------------------------------------------
.text$x:00002A36                 align 4
.text$x:00002A36 _text$x         ends
.text$x:00002A36
.xdata$x:00002A38 ; ===========================================================================
.xdata$x:00002A38
.xdata$x:00002A38 ; Segment type: Pure data
.xdata$x:00002A38 ; Segment permissions: Read
.xdata$x:00002A38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002A38                 assume cs:_xdata$x
.xdata$x:00002A38                 ;org 2A38h
.xdata$x:00002A38 ; COMDAT (pick associative to section at 298C)
.xdata$x:00002A38 __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00002A38                                         ; DATA XREF: .xdata$x:00002A50o
.xdata$x:00002A39                 db 0FFh
.xdata$x:00002A3A                 db 0FFh
.xdata$x:00002A3B                 db 0FFh
.xdata$x:00002A3C                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:00002A40                 db    0
.xdata$x:00002A41                 db    0
.xdata$x:00002A42                 db    0
.xdata$x:00002A43                 db    0
.xdata$x:00002A44                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:00002A48 __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00002A48                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:00002A49                 db    5
.xdata$x:00002A4A                 db  93h ; ô
.xdata$x:00002A4B                 db  19h
.xdata$x:00002A4C                 db    2
.xdata$x:00002A4D                 db    0
.xdata$x:00002A4E                 db    0
.xdata$x:00002A4F                 db    0
.xdata$x:00002A50                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00002A54                 db    0
.xdata$x:00002A55                 db    0
.xdata$x:00002A56                 db    0
.xdata$x:00002A57                 db    0
.xdata$x:00002A58                 db    0
.xdata$x:00002A59                 db    0
.xdata$x:00002A5A                 db    0
.xdata$x:00002A5B                 db    0
.xdata$x:00002A5C                 db    0
.xdata$x:00002A5D                 db    0
.xdata$x:00002A5E                 db    0
.xdata$x:00002A5F                 db    0
.xdata$x:00002A60                 db    0
.xdata$x:00002A61                 db    0
.xdata$x:00002A62                 db    0
.xdata$x:00002A63                 db    0
.xdata$x:00002A64                 db    0
.xdata$x:00002A65                 db    0
.xdata$x:00002A66                 db    0
.xdata$x:00002A67                 db    0
.xdata$x:00002A68                 db    1
.xdata$x:00002A69                 db    0
.xdata$x:00002A6A                 db    0
.xdata$x:00002A6B                 db    0
.xdata$x:00002A6B _xdata$x        ends
.xdata$x:00002A6B
.text:00002A6C ; ===========================================================================
.text:00002A6C
.text:00002A6C ; Segment type: Pure code
.text:00002A6C ; Segment permissions: Read/Execute
.text:00002A6C _text           segment para public 'CODE' use32
.text:00002A6C                 assume cs:_text
.text:00002A6C                 ;org 2A6Ch
.text:00002A6C ; COMDAT (pick any)
.text:00002A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002A6C
.text:00002A6C ; =============== S U B R O U T I N E =======================================
.text:00002A6C
.text:00002A6C ; Attributes: bp-based frame
.text:00002A6C
.text:00002A6C ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00002A6C                 public ??1AString@@QAE@XZ
.text:00002A6C ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+97p
.text:00002A6C                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1DEp ...
.text:00002A6C
.text:00002A6C var_8           = dword ptr -8
.text:00002A6C var_4           = dword ptr -4
.text:00002A6C
.text:00002A6C                 push    ebp
.text:00002A6D                 mov     ebp, esp
.text:00002A6F                 sub     esp, 8
.text:00002A72                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A79                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A80                 mov     [ebp+var_4], ecx
.text:00002A83                 mov     eax, [ebp+var_4]
.text:00002A86                 mov     ecx, [eax]
.text:00002A88                 mov     [ebp+var_8], ecx
.text:00002A8B                 mov     edx, [ebp+var_8]
.text:00002A8E                 push    edx             ; void *
.text:00002A8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002A94                 add     esp, 4
.text:00002A97                 add     esp, 8
.text:00002A9A                 cmp     ebp, esp
.text:00002A9C                 call    __RTC_CheckEsp
.text:00002AA1                 mov     esp, ebp
.text:00002AA3                 pop     ebp
.text:00002AA4                 retn
.text:00002AA4 ??1AString@@QAE@XZ endp
.text:00002AA4
.text:00002AA4 ; ---------------------------------------------------------------------------
.text:00002AA5                 align 4
.text:00002AA5 _text           ends
.text:00002AA5
.text:00002AA8 ; ===========================================================================
.text:00002AA8
.text:00002AA8 ; Segment type: Pure code
.text:00002AA8 ; Segment permissions: Read/Execute
.text:00002AA8 _text           segment para public 'CODE' use32
.text:00002AA8                 assume cs:_text
.text:00002AA8                 ;org 2AA8h
.text:00002AA8 ; COMDAT (pick any)
.text:00002AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002AA8
.text:00002AA8 ; =============== S U B R O U T I N E =======================================
.text:00002AA8
.text:00002AA8 ; Attributes: bp-based frame
.text:00002AA8
.text:00002AA8 ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:00002AA8                 public ??1COneMethodInfo@@QAE@XZ
.text:00002AA8 ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1+6j
.text:00002AA8                                         ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)+3Ap ...
.text:00002AA8
.text:00002AA8 var_10          = dword ptr -10h
.text:00002AA8 var_C           = dword ptr -0Ch
.text:00002AA8 var_4           = dword ptr -4
.text:00002AA8
.text:00002AA8                 push    ebp
.text:00002AA9                 mov     ebp, esp
.text:00002AAB                 push    0FFFFFFFFh
.text:00002AAD                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:00002AB2                 mov     eax, large fs:0
.text:00002AB8                 push    eax
.text:00002AB9                 push    ecx
.text:00002ABA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002AC1                 mov     eax, dword ptr ds:___security_cookie
.text:00002AC6                 xor     eax, ebp
.text:00002AC8                 push    eax
.text:00002AC9                 lea     eax, [ebp+var_C]
.text:00002ACC                 mov     large fs:0, eax
.text:00002AD2                 mov     [ebp+var_10], ecx
.text:00002AD5                 mov     [ebp+var_4], 1
.text:00002ADC                 mov     ecx, [ebp+var_10]
.text:00002ADF                 add     ecx, 18h        ; this
.text:00002AE2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002AE7                 mov     byte ptr [ebp+var_4], 0
.text:00002AEB                 mov     ecx, [ebp+var_10]
.text:00002AEE                 add     ecx, 0Ch        ; this
.text:00002AF1                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00002AF6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002AFD                 mov     ecx, [ebp+var_10] ; this
.text:00002B00                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00002B05                 mov     ecx, [ebp+var_C]
.text:00002B08                 mov     large fs:0, ecx
.text:00002B0F                 pop     ecx
.text:00002B10                 add     esp, 10h
.text:00002B13                 cmp     ebp, esp
.text:00002B15                 call    __RTC_CheckEsp
.text:00002B1A                 mov     esp, ebp
.text:00002B1C                 pop     ebp
.text:00002B1D                 retn
.text:00002B1D ??1COneMethodInfo@@QAE@XZ endp
.text:00002B1D
.text:00002B1D ; ---------------------------------------------------------------------------
.text:00002B1E                 align 10h
.text:00002B1E _text           ends
.text:00002B1E
.text$x:00002B20 ; ===========================================================================
.text$x:00002B20
.text$x:00002B20 ; Segment type: Pure code
.text$x:00002B20 ; Segment permissions: Read/Execute
.text$x:00002B20 _text$x         segment para public 'CODE' use32
.text$x:00002B20                 assume cs:_text$x
.text$x:00002B20                 ;org 2B20h
.text$x:00002B20 ; COMDAT (pick associative to section at 2AA8)
.text$x:00002B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B20
.text$x:00002B20 ; =============== S U B R O U T I N E =======================================
.text$x:00002B20
.text$x:00002B20
.text$x:00002B20 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00002B20                                         ; DATA XREF: .xdata$x:00002B54o
.text$x:00002B20                 mov     ecx, [ebp-10h]  ; this
.text$x:00002B23                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00002B23 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00002B23
.text$x:00002B28
.text$x:00002B28 ; =============== S U B R O U T I N E =======================================
.text$x:00002B28
.text$x:00002B28
.text$x:00002B28 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00002B28                                         ; DATA XREF: .xdata$x:00002B5Co
.text$x:00002B28                 mov     ecx, [ebp-10h]
.text$x:00002B2B                 add     ecx, 0Ch        ; this
.text$x:00002B2E                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00002B2E __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:00002B2E
.text$x:00002B33
.text$x:00002B33 ; =============== S U B R O U T I N E =======================================
.text$x:00002B33
.text$x:00002B33
.text$x:00002B33 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00002B33                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00002B33
.text$x:00002B33 arg_4           = dword ptr  8
.text$x:00002B33
.text$x:00002B33                 mov     edx, [esp+arg_4]
.text$x:00002B37                 lea     eax, [edx+0Ch]
.text$x:00002B3A                 mov     ecx, [edx-8]
.text$x:00002B3D                 xor     ecx, eax
.text$x:00002B3F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B44                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:00002B49                 jmp     ___CxxFrameHandler3
.text$x:00002B49 __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:00002B49
.text$x:00002B49 ; ---------------------------------------------------------------------------
.text$x:00002B4E                 align 10h
.text$x:00002B4E _text$x         ends
.text$x:00002B4E
.xdata$x:00002B50 ; ===========================================================================
.xdata$x:00002B50
.xdata$x:00002B50 ; Segment type: Pure data
.xdata$x:00002B50 ; Segment permissions: Read
.xdata$x:00002B50 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002B50                 assume cs:_xdata$x
.xdata$x:00002B50                 ;org 2B50h
.xdata$x:00002B50 ; COMDAT (pick associative to section at 2AA8)
.xdata$x:00002B50 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00002B50                                         ; DATA XREF: .xdata$x:00002B68o
.xdata$x:00002B51                 db 0FFh
.xdata$x:00002B52                 db 0FFh
.xdata$x:00002B53                 db 0FFh
.xdata$x:00002B54                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:00002B58                 db    0
.xdata$x:00002B59                 db    0
.xdata$x:00002B5A                 db    0
.xdata$x:00002B5B                 db    0
.xdata$x:00002B5C                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00002B60 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00002B60                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00002B61                 db    5
.xdata$x:00002B62                 db  93h ; ô
.xdata$x:00002B63                 db  19h
.xdata$x:00002B64                 db    2
.xdata$x:00002B65                 db    0
.xdata$x:00002B66                 db    0
.xdata$x:00002B67                 db    0
.xdata$x:00002B68                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:00002B6C                 align 20h
.xdata$x:00002B80                 db    1
.xdata$x:00002B81                 db    0
.xdata$x:00002B82                 db    0
.xdata$x:00002B83                 db    0
.xdata$x:00002B83 _xdata$x        ends
.xdata$x:00002B83
.text:00002B84 ; ===========================================================================
.text:00002B84
.text:00002B84 ; Segment type: Pure code
.text:00002B84 ; Segment permissions: Read/Execute
.text:00002B84 _text           segment para public 'CODE' use32
.text:00002B84                 assume cs:_text
.text:00002B84                 ;org 2B84h
.text:00002B84 ; COMDAT (pick any)
.text:00002B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002B84
.text:00002B84 ; =============== S U B R O U T I N E =======================================
.text:00002B84
.text:00002B84 ; Attributes: bp-based frame
.text:00002B84
.text:00002B84 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:00002B84                 public ??0CMethodProps@@QAE@XZ
.text:00002B84 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:00002B84
.text:00002B84 var_4           = dword ptr -4
.text:00002B84
.text:00002B84                 push    ebp
.text:00002B85                 mov     ebp, esp
.text:00002B87                 push    ecx
.text:00002B88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B8F                 mov     [ebp+var_4], ecx
.text:00002B92                 mov     ecx, [ebp+var_4] ; this
.text:00002B95                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00002B9A                 mov     eax, [ebp+var_4]
.text:00002B9D                 add     esp, 4
.text:00002BA0                 cmp     ebp, esp
.text:00002BA2                 call    __RTC_CheckEsp
.text:00002BA7                 mov     esp, ebp
.text:00002BA9                 pop     ebp
.text:00002BAA                 retn
.text:00002BAA ??0CMethodProps@@QAE@XZ endp
.text:00002BAA
.text:00002BAA ; ---------------------------------------------------------------------------
.text:00002BAB                 align 4
.text:00002BAB _text           ends
.text:00002BAB
.text:00002BAC ; ===========================================================================
.text:00002BAC
.text:00002BAC ; Segment type: Pure code
.text:00002BAC ; Segment permissions: Read/Execute
.text:00002BAC _text           segment para public 'CODE' use32
.text:00002BAC                 assume cs:_text
.text:00002BAC                 ;org 2BACh
.text:00002BAC ; COMDAT (pick any)
.text:00002BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BAC
.text:00002BAC ; =============== S U B R O U T I N E =======================================
.text:00002BAC
.text:00002BAC ; Attributes: bp-based frame
.text:00002BAC
.text:00002BAC ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00002BAC                 public ??1CMethodProps@@QAE@XZ
.text:00002BAC ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:00002BAC                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:00002BAC
.text:00002BAC var_4           = dword ptr -4
.text:00002BAC
.text:00002BAC                 push    ebp
.text:00002BAD                 mov     ebp, esp
.text:00002BAF                 push    ecx
.text:00002BB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BB7                 mov     [ebp+var_4], ecx
.text:00002BBA                 mov     ecx, [ebp+var_4] ; this
.text:00002BBD                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00002BC2                 add     esp, 4
.text:00002BC5                 cmp     ebp, esp
.text:00002BC7                 call    __RTC_CheckEsp
.text:00002BCC                 mov     esp, ebp
.text:00002BCE                 pop     ebp
.text:00002BCF                 retn
.text:00002BCF ??1CMethodProps@@QAE@XZ endp
.text:00002BCF
.text:00002BCF _text           ends
.text:00002BCF
.text:00002BD0 ; ===========================================================================
.text:00002BD0
.text:00002BD0 ; Segment type: Pure code
.text:00002BD0 ; Segment permissions: Read/Execute
.text:00002BD0 _text           segment para public 'CODE' use32
.text:00002BD0                 assume cs:_text
.text:00002BD0                 ;org 2BD0h
.text:00002BD0 ; COMDAT (pick any)
.text:00002BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BD0
.text:00002BD0 ; =============== S U B R O U T I N E =======================================
.text:00002BD0
.text:00002BD0 ; Attributes: bp-based frame
.text:00002BD0
.text:00002BD0 ; _DWORD __thiscall CProps::CProps(CProps *__hidden this)
.text:00002BD0                 public ??0CProps@@QAE@XZ
.text:00002BD0 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00002BD0
.text:00002BD0 var_4           = dword ptr -4
.text:00002BD0
.text:00002BD0                 push    ebp
.text:00002BD1                 mov     ebp, esp
.text:00002BD3                 push    ecx
.text:00002BD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BDB                 mov     [ebp+var_4], ecx
.text:00002BDE                 mov     ecx, [ebp+var_4]
.text:00002BE1                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00002BE6                 mov     eax, [ebp+var_4]
.text:00002BE9                 add     esp, 4
.text:00002BEC                 cmp     ebp, esp
.text:00002BEE                 call    __RTC_CheckEsp
.text:00002BF3                 mov     esp, ebp
.text:00002BF5                 pop     ebp
.text:00002BF6                 retn
.text:00002BF6 ??0CProps@@QAE@XZ endp
.text:00002BF6
.text:00002BF6 ; ---------------------------------------------------------------------------
.text:00002BF7                 align 4
.text:00002BF7 _text           ends
.text:00002BF7
.text:00002BF8 ; ===========================================================================
.text:00002BF8
.text:00002BF8 ; Segment type: Pure code
.text:00002BF8 ; Segment permissions: Read/Execute
.text:00002BF8 _text           segment para public 'CODE' use32
.text:00002BF8                 assume cs:_text
.text:00002BF8                 ;org 2BF8h
.text:00002BF8 ; COMDAT (pick any)
.text:00002BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002BF8
.text:00002BF8 ; =============== S U B R O U T I N E =======================================
.text:00002BF8
.text:00002BF8 ; Attributes: bp-based frame
.text:00002BF8
.text:00002BF8 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00002BF8                 public ??1CProps@@QAE@XZ
.text:00002BF8 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00002BF8
.text:00002BF8 var_4           = dword ptr -4
.text:00002BF8
.text:00002BF8                 push    ebp
.text:00002BF9                 mov     ebp, esp
.text:00002BFB                 push    ecx
.text:00002BFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C03                 mov     [ebp+var_4], ecx
.text:00002C06                 mov     ecx, [ebp+var_4]
.text:00002C09                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00002C0E                 add     esp, 4
.text:00002C11                 cmp     ebp, esp
.text:00002C13                 call    __RTC_CheckEsp
.text:00002C18                 mov     esp, ebp
.text:00002C1A                 pop     ebp
.text:00002C1B                 retn
.text:00002C1B ??1CProps@@QAE@XZ endp
.text:00002C1B
.text:00002C1B _text           ends
.text:00002C1B
.text:00002C1C ; ===========================================================================
.text:00002C1C
.text:00002C1C ; Segment type: Pure code
.text:00002C1C ; Segment permissions: Read/Execute
.text:00002C1C _text           segment para public 'CODE' use32
.text:00002C1C                 assume cs:_text
.text:00002C1C                 ;org 2C1Ch
.text:00002C1C ; COMDAT (pick any)
.text:00002C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002C1C
.text:00002C1C ; =============== S U B R O U T I N E =======================================
.text:00002C1C
.text:00002C1C ; Attributes: bp-based frame
.text:00002C1C
.text:00002C1C ; _DWORD __thiscall NArchive::CMultiMethodProps::~CMultiMethodProps(NArchive::CMultiMethodProps *__hidden this)
.text:00002C1C                 public ??1CMultiMethodProps@NArchive@@QAE@XZ
.text:00002C1C ??1CMultiMethodProps@NArchive@@QAE@XZ proc near
.text:00002C1C                                         ; CODE XREF: __unwindfunclet$??0COutHandler@N7z@NArchive@@QAE@XZ$0+3j
.text:00002C1C                                         ; NArchive::N7z::COutHandler::~COutHandler(void)+11p
.text:00002C1C
.text:00002C1C var_10          = dword ptr -10h
.text:00002C1C var_C           = dword ptr -0Ch
.text:00002C1C var_4           = dword ptr -4
.text:00002C1C
.text:00002C1C                 push    ebp
.text:00002C1D                 mov     ebp, esp
.text:00002C1F                 push    0FFFFFFFFh
.text:00002C21                 push    offset __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ
.text:00002C26                 mov     eax, large fs:0
.text:00002C2C                 push    eax
.text:00002C2D                 push    ecx
.text:00002C2E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002C35                 mov     eax, dword ptr ds:___security_cookie
.text:00002C3A                 xor     eax, ebp
.text:00002C3C                 push    eax
.text:00002C3D                 lea     eax, [ebp+var_C]
.text:00002C40                 mov     large fs:0, eax
.text:00002C46                 mov     [ebp+var_10], ecx
.text:00002C49                 mov     [ebp+var_4], 0
.text:00002C50                 mov     ecx, [ebp+var_10]
.text:00002C53                 add     ecx, 20h ; ' '  ; this
.text:00002C56                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:00002C5B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002C62                 mov     ecx, [ebp+var_10]
.text:00002C65                 add     ecx, 14h
.text:00002C68                 call    ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text:00002C6D                 mov     ecx, [ebp+var_C]
.text:00002C70                 mov     large fs:0, ecx
.text:00002C77                 pop     ecx
.text:00002C78                 add     esp, 10h
.text:00002C7B                 cmp     ebp, esp
.text:00002C7D                 call    __RTC_CheckEsp
.text:00002C82                 mov     esp, ebp
.text:00002C84                 pop     ebp
.text:00002C85                 retn
.text:00002C85 ??1CMultiMethodProps@NArchive@@QAE@XZ endp
.text:00002C85
.text:00002C85 ; ---------------------------------------------------------------------------
.text:00002C86                 align 4
.text:00002C86 _text           ends
.text:00002C86
.text$x:00002C88 ; ===========================================================================
.text$x:00002C88
.text$x:00002C88 ; Segment type: Pure code
.text$x:00002C88 ; Segment permissions: Read/Execute
.text$x:00002C88 _text$x         segment para public 'CODE' use32
.text$x:00002C88                 assume cs:_text$x
.text$x:00002C88                 ;org 2C88h
.text$x:00002C88 ; COMDAT (pick associative to section at 2C1C)
.text$x:00002C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002C88
.text$x:00002C88 ; =============== S U B R O U T I N E =======================================
.text$x:00002C88
.text$x:00002C88
.text$x:00002C88 __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00002C88                                         ; DATA XREF: .xdata$x:00002CB4o
.text$x:00002C88                 mov     ecx, [ebp-10h]
.text$x:00002C8B                 add     ecx, 14h
.text$x:00002C8E                 jmp     ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text$x:00002C8E __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:00002C8E
.text$x:00002C93
.text$x:00002C93 ; =============== S U B R O U T I N E =======================================
.text$x:00002C93
.text$x:00002C93
.text$x:00002C93 __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ proc near
.text$x:00002C93                                         ; DATA XREF: NArchive::CMultiMethodProps::~CMultiMethodProps(void)+5o
.text$x:00002C93
.text$x:00002C93 arg_4           = dword ptr  8
.text$x:00002C93
.text$x:00002C93                 mov     edx, [esp+arg_4]
.text$x:00002C97                 lea     eax, [edx+0Ch]
.text$x:00002C9A                 mov     ecx, [edx-8]
.text$x:00002C9D                 xor     ecx, eax
.text$x:00002C9F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002CA4                 mov     eax, offset __ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ
.text$x:00002CA9                 jmp     ___CxxFrameHandler3
.text$x:00002CA9 __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ endp
.text$x:00002CA9
.text$x:00002CA9 ; ---------------------------------------------------------------------------
.text$x:00002CAE                 align 10h
.text$x:00002CAE _text$x         ends
.text$x:00002CAE
.xdata$x:00002CB0 ; ===========================================================================
.xdata$x:00002CB0
.xdata$x:00002CB0 ; Segment type: Pure data
.xdata$x:00002CB0 ; Segment permissions: Read
.xdata$x:00002CB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002CB0                 assume cs:_xdata$x
.xdata$x:00002CB0                 ;org 2CB0h
.xdata$x:00002CB0 ; COMDAT (pick associative to section at 2C1C)
.xdata$x:00002CB0 __unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00002CB0                                         ; DATA XREF: .xdata$x:00002CC0o
.xdata$x:00002CB1                 db 0FFh
.xdata$x:00002CB2                 db 0FFh
.xdata$x:00002CB3                 db 0FFh
.xdata$x:00002CB4                 dd offset __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00002CB8 __ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00002CB8                                         ; DATA XREF: __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00002CB9                 db    5
.xdata$x:00002CBA                 db  93h ; ô
.xdata$x:00002CBB                 db  19h
.xdata$x:00002CBC                 db    1
.xdata$x:00002CBD                 db    0
.xdata$x:00002CBE                 db    0
.xdata$x:00002CBF                 db    0
.xdata$x:00002CC0                 dd offset __unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ
.xdata$x:00002CC4                 db    0
.xdata$x:00002CC5                 db    0
.xdata$x:00002CC6                 db    0
.xdata$x:00002CC7                 db    0
.xdata$x:00002CC8                 db    0
.xdata$x:00002CC9                 db    0
.xdata$x:00002CCA                 db    0
.xdata$x:00002CCB                 db    0
.xdata$x:00002CCC                 db    0
.xdata$x:00002CCD                 db    0
.xdata$x:00002CCE                 db    0
.xdata$x:00002CCF                 db    0
.xdata$x:00002CD0                 db    0
.xdata$x:00002CD1                 db    0
.xdata$x:00002CD2                 db    0
.xdata$x:00002CD3                 db    0
.xdata$x:00002CD4                 db    0
.xdata$x:00002CD5                 db    0
.xdata$x:00002CD6                 db    0
.xdata$x:00002CD7                 db    0
.xdata$x:00002CD8                 db    1
.xdata$x:00002CD9                 db    0
.xdata$x:00002CDA                 db    0
.xdata$x:00002CDB                 db    0
.xdata$x:00002CDB _xdata$x        ends
.xdata$x:00002CDB
.text:00002CDC ; ===========================================================================
.text:00002CDC
.text:00002CDC ; Segment type: Pure code
.text:00002CDC ; Segment permissions: Read/Execute
.text:00002CDC _text           segment para public 'CODE' use32
.text:00002CDC                 assume cs:_text
.text:00002CDC                 ;org 2CDCh
.text:00002CDC ; COMDAT (pick any)
.text:00002CDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002CDC
.text:00002CDC ; =============== S U B R O U T I N E =======================================
.text:00002CDC
.text:00002CDC ; Attributes: bp-based frame
.text:00002CDC
.text:00002CDC ; __int32 __stdcall NArchive::N7z::CHandler::QueryInterface(NArchive::N7z::CHandler *this, const struct _GUID *Buf1, void **)
.text:00002CDC                 public ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00002CDC ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00002CDC                                         ; CODE XREF: [thunk]:NArchive::N7z::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00002CDC                                         ; [thunk]:NArchive::N7z::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00002CDC
.text:00002CDC var_C           = dword ptr -0Ch
.text:00002CDC var_8           = dword ptr -8
.text:00002CDC var_4           = dword ptr -4
.text:00002CDC this            = dword ptr  8
.text:00002CDC Buf1            = dword ptr  0Ch
.text:00002CDC arg_8           = dword ptr  10h
.text:00002CDC
.text:00002CDC                 push    ebp
.text:00002CDD                 mov     ebp, esp
.text:00002CDF                 sub     esp, 0Ch
.text:00002CE2                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002CE9                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002CF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CF7                 mov     eax, [ebp+arg_8]
.text:00002CFA                 mov     dword ptr [eax], 0
.text:00002D00                 push    offset _IID_IUnknown ; Buf2
.text:00002D05                 mov     ecx, [ebp+Buf1]
.text:00002D08                 push    ecx             ; Buf1
.text:00002D09                 call    ___@8           ; __(x,x)
.text:00002D0E                 test    eax, eax
.text:00002D10                 jz      short loc_2D1F
.text:00002D12                 mov     edx, [ebp+arg_8]
.text:00002D15                 mov     eax, [ebp+this]
.text:00002D18                 mov     [edx], eax
.text:00002D1A                 jmp     loc_2DE1
.text:00002D1F ; ---------------------------------------------------------------------------
.text:00002D1F
.text:00002D1F loc_2D1F:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+34j
.text:00002D1F                 push    offset _IID_IInArchive ; Buf2
.text:00002D24                 mov     ecx, [ebp+Buf1]
.text:00002D27                 push    ecx             ; Buf1
.text:00002D28                 call    ___@8           ; __(x,x)
.text:00002D2D                 test    eax, eax
.text:00002D2F                 jz      short loc_2D3E
.text:00002D31                 mov     edx, [ebp+arg_8]
.text:00002D34                 mov     eax, [ebp+this]
.text:00002D37                 mov     [edx], eax
.text:00002D39                 jmp     loc_2DE1
.text:00002D3E ; ---------------------------------------------------------------------------
.text:00002D3E
.text:00002D3E loc_2D3E:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+53j
.text:00002D3E                 push    offset _IID_IArchiveGetRawProps ; Buf2
.text:00002D43                 mov     ecx, [ebp+Buf1]
.text:00002D46                 push    ecx             ; Buf1
.text:00002D47                 call    ___@8           ; __(x,x)
.text:00002D4C                 test    eax, eax
.text:00002D4E                 jz      short loc_2D72
.text:00002D50                 cmp     [ebp+this], 0
.text:00002D54                 jz      short loc_2D61
.text:00002D56                 mov     edx, [ebp+this]
.text:00002D59                 add     edx, 4
.text:00002D5C                 mov     [ebp+var_4], edx
.text:00002D5F                 jmp     short loc_2D68
.text:00002D61 ; ---------------------------------------------------------------------------
.text:00002D61
.text:00002D61 loc_2D61:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+78j
.text:00002D61                 mov     [ebp+var_4], 0
.text:00002D68
.text:00002D68 loc_2D68:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+83j
.text:00002D68                 mov     eax, [ebp+arg_8]
.text:00002D6B                 mov     ecx, [ebp+var_4]
.text:00002D6E                 mov     [eax], ecx
.text:00002D70                 jmp     short loc_2DE1
.text:00002D72 ; ---------------------------------------------------------------------------
.text:00002D72
.text:00002D72 loc_2D72:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+72j
.text:00002D72                 push    offset _IID_ISetProperties ; Buf2
.text:00002D77                 mov     edx, [ebp+Buf1]
.text:00002D7A                 push    edx             ; Buf1
.text:00002D7B                 call    ___@8           ; __(x,x)
.text:00002D80                 test    eax, eax
.text:00002D82                 jz      short loc_2DA6
.text:00002D84                 cmp     [ebp+this], 0
.text:00002D88                 jz      short loc_2D95
.text:00002D8A                 mov     eax, [ebp+this]
.text:00002D8D                 add     eax, 8
.text:00002D90                 mov     [ebp+var_8], eax
.text:00002D93                 jmp     short loc_2D9C
.text:00002D95 ; ---------------------------------------------------------------------------
.text:00002D95
.text:00002D95 loc_2D95:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+ACj
.text:00002D95                 mov     [ebp+var_8], 0
.text:00002D9C
.text:00002D9C loc_2D9C:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+B7j
.text:00002D9C                 mov     ecx, [ebp+arg_8]
.text:00002D9F                 mov     edx, [ebp+var_8]
.text:00002DA2                 mov     [ecx], edx
.text:00002DA4                 jmp     short loc_2DE1
.text:00002DA6 ; ---------------------------------------------------------------------------
.text:00002DA6
.text:00002DA6 loc_2DA6:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+A6j
.text:00002DA6                 push    offset _IID_IOutArchive ; Buf2
.text:00002DAB                 mov     eax, [ebp+Buf1]
.text:00002DAE                 push    eax             ; Buf1
.text:00002DAF                 call    ___@8           ; __(x,x)
.text:00002DB4                 test    eax, eax
.text:00002DB6                 jz      short loc_2DDA
.text:00002DB8                 cmp     [ebp+this], 0
.text:00002DBC                 jz      short loc_2DC9
.text:00002DBE                 mov     ecx, [ebp+this]
.text:00002DC1                 add     ecx, 0Ch
.text:00002DC4                 mov     [ebp+var_C], ecx
.text:00002DC7                 jmp     short loc_2DD0
.text:00002DC9 ; ---------------------------------------------------------------------------
.text:00002DC9
.text:00002DC9 loc_2DC9:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+E0j
.text:00002DC9                 mov     [ebp+var_C], 0
.text:00002DD0
.text:00002DD0 loc_2DD0:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+EBj
.text:00002DD0                 mov     edx, [ebp+arg_8]
.text:00002DD3                 mov     eax, [ebp+var_C]
.text:00002DD6                 mov     [edx], eax
.text:00002DD8                 jmp     short loc_2DE1
.text:00002DDA ; ---------------------------------------------------------------------------
.text:00002DDA
.text:00002DDA loc_2DDA:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+DAj
.text:00002DDA                 mov     eax, 80004002h
.text:00002DDF                 jmp     short loc_2DF2
.text:00002DE1 ; ---------------------------------------------------------------------------
.text:00002DE1
.text:00002DE1 loc_2DE1:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+3Ej
.text:00002DE1                                         ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00002DE1                 mov     ecx, [ebp+this]
.text:00002DE4                 mov     edx, [ecx+10h]
.text:00002DE7                 add     edx, 1
.text:00002DEA                 mov     eax, [ebp+this]
.text:00002DED                 mov     [eax+10h], edx
.text:00002DF0                 xor     eax, eax
.text:00002DF2
.text:00002DF2 loc_2DF2:                               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+103j
.text:00002DF2                 add     esp, 0Ch
.text:00002DF5                 cmp     ebp, esp
.text:00002DF7                 call    __RTC_CheckEsp
.text:00002DFC                 mov     esp, ebp
.text:00002DFE                 pop     ebp
.text:00002DFF                 retn    0Ch
.text:00002DFF ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:00002DFF
.text:00002DFF ; ---------------------------------------------------------------------------
.text:00002E02                 align 4
.text:00002E02 _text           ends
.text:00002E02
.text:00002E04 ; ===========================================================================
.text:00002E04
.text:00002E04 ; Segment type: Pure code
.text:00002E04 ; Segment permissions: Read/Execute
.text:00002E04 _text           segment para public 'CODE' use32
.text:00002E04                 assume cs:_text
.text:00002E04                 ;org 2E04h
.text:00002E04 ; COMDAT (pick any)
.text:00002E04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E04
.text:00002E04 ; =============== S U B R O U T I N E =======================================
.text:00002E04
.text:00002E04 ; Attributes: bp-based frame
.text:00002E04
.text:00002E04 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00002E04                 public ___@8
.text:00002E04 ___@8           proc near               ; CODE XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+2Dp
.text:00002E04                                         ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00002E04
.text:00002E04 Buf1            = dword ptr  8
.text:00002E04 Buf2            = dword ptr  0Ch
.text:00002E04
.text:00002E04                 push    ebp
.text:00002E05                 mov     ebp, esp
.text:00002E07                 mov     eax, [ebp+Buf2]
.text:00002E0A                 push    eax             ; Buf2
.text:00002E0B                 mov     ecx, [ebp+Buf1]
.text:00002E0E                 push    ecx             ; Buf1
.text:00002E0F                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00002E14                 cmp     ebp, esp
.text:00002E16                 call    __RTC_CheckEsp
.text:00002E1B                 pop     ebp
.text:00002E1C                 retn    8
.text:00002E1C ___@8           endp
.text:00002E1C
.text:00002E1C ; ---------------------------------------------------------------------------
.text:00002E1F                 align 10h
.text:00002E1F _text           ends
.text:00002E1F
.text:00002E20 ; ===========================================================================
.text:00002E20
.text:00002E20 ; Segment type: Pure code
.text:00002E20 ; Segment permissions: Read/Execute
.text:00002E20 _text           segment para public 'CODE' use32
.text:00002E20                 assume cs:_text
.text:00002E20                 ;org 2E20h
.text:00002E20 ; COMDAT (pick any)
.text:00002E20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E20
.text:00002E20 ; =============== S U B R O U T I N E =======================================
.text:00002E20
.text:00002E20 ; Attributes: bp-based frame
.text:00002E20
.text:00002E20 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00002E20                 public _IsEqualGUID@8
.text:00002E20 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00002E20
.text:00002E20 Buf1            = dword ptr  8
.text:00002E20 Buf2            = dword ptr  0Ch
.text:00002E20
.text:00002E20                 push    ebp
.text:00002E21                 mov     ebp, esp
.text:00002E23                 push    10h             ; Size
.text:00002E25                 mov     eax, [ebp+Buf2]
.text:00002E28                 push    eax             ; Buf2
.text:00002E29                 mov     ecx, [ebp+Buf1]
.text:00002E2C                 push    ecx             ; Buf1
.text:00002E2D                 call    _memcmp
.text:00002E32                 add     esp, 0Ch
.text:00002E35                 neg     eax
.text:00002E37                 sbb     eax, eax
.text:00002E39                 add     eax, 1
.text:00002E3C                 cmp     ebp, esp
.text:00002E3E                 call    __RTC_CheckEsp
.text:00002E43                 pop     ebp
.text:00002E44                 retn    8
.text:00002E44 _IsEqualGUID@8  endp
.text:00002E44
.text:00002E44 ; ---------------------------------------------------------------------------
.text:00002E47                 align 4
.text:00002E47 _text           ends
.text:00002E47
.text:00002E48 ; ===========================================================================
.text:00002E48
.text:00002E48 ; Segment type: Pure code
.text:00002E48 ; Segment permissions: Read/Execute
.text:00002E48 _text           segment para public 'CODE' use32
.text:00002E48                 assume cs:_text
.text:00002E48                 ;org 2E48h
.text:00002E48 ; COMDAT (pick any)
.text:00002E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E48
.text:00002E48 ; =============== S U B R O U T I N E =======================================
.text:00002E48
.text:00002E48 ; Attributes: bp-based frame
.text:00002E48
.text:00002E48 ; unsigned __int32 __stdcall NArchive::N7z::CHandler::AddRef(NArchive::N7z::CHandler *this)
.text:00002E48                 public ?AddRef@CHandler@N7z@NArchive@@UAGKXZ
.text:00002E48 ?AddRef@CHandler@N7z@NArchive@@UAGKXZ proc near
.text:00002E48                                         ; CODE XREF: [thunk]:NArchive::N7z::CHandler::AddRef`adjustor{4}' (void)+5j
.text:00002E48                                         ; [thunk]:NArchive::N7z::CHandler::AddRef`adjustor{8}' (void)+5j ...
.text:00002E48
.text:00002E48 var_4           = dword ptr -4
.text:00002E48 this            = dword ptr  8
.text:00002E48
.text:00002E48                 push    ebp
.text:00002E49                 mov     ebp, esp
.text:00002E4B                 push    ecx
.text:00002E4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002E53                 mov     eax, [ebp+this]
.text:00002E56                 mov     ecx, [eax+10h]
.text:00002E59                 add     ecx, 1
.text:00002E5C                 mov     [ebp+var_4], ecx
.text:00002E5F                 mov     edx, [ebp+this]
.text:00002E62                 mov     eax, [ebp+var_4]
.text:00002E65                 mov     [edx+10h], eax
.text:00002E68                 mov     eax, [ebp+var_4]
.text:00002E6B                 mov     esp, ebp
.text:00002E6D                 pop     ebp
.text:00002E6E                 retn    4
.text:00002E6E ?AddRef@CHandler@N7z@NArchive@@UAGKXZ endp
.text:00002E6E
.text:00002E6E ; ---------------------------------------------------------------------------
.text:00002E71                 align 4
.text:00002E71 _text           ends
.text:00002E71
.text:00002E74 ; ===========================================================================
.text:00002E74
.text:00002E74 ; Segment type: Pure code
.text:00002E74 ; Segment permissions: Read/Execute
.text:00002E74 _text           segment para public 'CODE' use32
.text:00002E74                 assume cs:_text
.text:00002E74                 ;org 2E74h
.text:00002E74 ; COMDAT (pick any)
.text:00002E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002E74
.text:00002E74 ; =============== S U B R O U T I N E =======================================
.text:00002E74
.text:00002E74 ; Attributes: bp-based frame
.text:00002E74
.text:00002E74 ; unsigned __int32 __stdcall NArchive::N7z::CHandler::Release(NArchive::N7z::CHandler *this)
.text:00002E74                 public ?Release@CHandler@N7z@NArchive@@UAGKXZ
.text:00002E74 ?Release@CHandler@N7z@NArchive@@UAGKXZ proc near
.text:00002E74                                         ; CODE XREF: [thunk]:NArchive::N7z::CHandler::Release`adjustor{4}' (void)+5j
.text:00002E74                                         ; [thunk]:NArchive::N7z::CHandler::Release`adjustor{8}' (void)+5j ...
.text:00002E74
.text:00002E74 var_10          = dword ptr -10h
.text:00002E74 var_C           = dword ptr -0Ch
.text:00002E74 var_8           = dword ptr -8
.text:00002E74 var_4           = dword ptr -4
.text:00002E74 this            = dword ptr  8
.text:00002E74
.text:00002E74                 push    ebp
.text:00002E75                 mov     ebp, esp
.text:00002E77                 sub     esp, 10h
.text:00002E7A                 mov     eax, 0CCCCCCCCh
.text:00002E7F                 mov     [ebp+var_10], eax
.text:00002E82                 mov     [ebp+var_C], eax
.text:00002E85                 mov     [ebp+var_8], eax
.text:00002E88                 mov     [ebp+var_4], eax
.text:00002E8B                 mov     eax, [ebp+this]
.text:00002E8E                 mov     ecx, [eax+10h]
.text:00002E91                 sub     ecx, 1
.text:00002E94                 mov     [ebp+var_C], ecx
.text:00002E97                 mov     edx, [ebp+this]
.text:00002E9A                 mov     eax, [ebp+var_C]
.text:00002E9D                 mov     [edx+10h], eax
.text:00002EA0                 cmp     [ebp+var_C], 0
.text:00002EA4                 jz      short loc_2EAE
.text:00002EA6                 mov     ecx, [ebp+this]
.text:00002EA9                 mov     eax, [ecx+10h]
.text:00002EAC                 jmp     short loc_2ED8
.text:00002EAE ; ---------------------------------------------------------------------------
.text:00002EAE
.text:00002EAE loc_2EAE:                               ; CODE XREF: NArchive::N7z::CHandler::Release(void)+30j
.text:00002EAE                 mov     edx, [ebp+this]
.text:00002EB1                 mov     [ebp+var_8], edx
.text:00002EB4                 mov     eax, [ebp+var_8]
.text:00002EB7                 mov     [ebp+var_4], eax
.text:00002EBA                 cmp     [ebp+var_4], 0
.text:00002EBE                 jz      short loc_2ECF
.text:00002EC0                 push    1
.text:00002EC2                 mov     ecx, [ebp+var_4]
.text:00002EC5                 call    ??_GCHandler@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CHandler::`scalar deleting destructor'(uint)
.text:00002ECA                 mov     [ebp+var_10], eax
.text:00002ECD                 jmp     short loc_2ED6
.text:00002ECF ; ---------------------------------------------------------------------------
.text:00002ECF
.text:00002ECF loc_2ECF:                               ; CODE XREF: NArchive::N7z::CHandler::Release(void)+4Aj
.text:00002ECF                 mov     [ebp+var_10], 0
.text:00002ED6
.text:00002ED6 loc_2ED6:                               ; CODE XREF: NArchive::N7z::CHandler::Release(void)+59j
.text:00002ED6                 xor     eax, eax
.text:00002ED8
.text:00002ED8 loc_2ED8:                               ; CODE XREF: NArchive::N7z::CHandler::Release(void)+38j
.text:00002ED8                 add     esp, 10h
.text:00002EDB                 cmp     ebp, esp
.text:00002EDD                 call    __RTC_CheckEsp
.text:00002EE2                 mov     esp, ebp
.text:00002EE4                 pop     ebp
.text:00002EE5                 retn    4
.text:00002EE5 ?Release@CHandler@N7z@NArchive@@UAGKXZ endp
.text:00002EE5
.text:00002EE5 _text           ends
.text:00002EE5
.text:00002EE8 ; ===========================================================================
.text:00002EE8
.text:00002EE8 ; Segment type: Pure code
.text:00002EE8 ; Segment permissions: Read/Execute
.text:00002EE8 _text           segment para public 'CODE' use32
.text:00002EE8                 assume cs:_text
.text:00002EE8                 ;org 2EE8h
.text:00002EE8 ; COMDAT (pick any)
.text:00002EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002EE8
.text:00002EE8 ; =============== S U B R O U T I N E =======================================
.text:00002EE8
.text:00002EE8 ; Attributes: bp-based frame
.text:00002EE8
.text:00002EE8 ; public: void * __thiscall NArchive::N7z::CHandler::`scalar deleting destructor'(unsigned int)
.text:00002EE8                 public ??_GCHandler@N7z@NArchive@@QAEPAXI@Z
.text:00002EE8 ??_GCHandler@N7z@NArchive@@QAEPAXI@Z proc near
.text:00002EE8                                         ; CODE XREF: NArchive::N7z::CHandler::Release(void)+51p
.text:00002EE8
.text:00002EE8 var_4           = dword ptr -4
.text:00002EE8 arg_0           = dword ptr  8
.text:00002EE8
.text:00002EE8                 push    ebp
.text:00002EE9                 mov     ebp, esp
.text:00002EEB                 push    ecx
.text:00002EEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002EF3                 mov     [ebp+var_4], ecx
.text:00002EF6                 mov     ecx, [ebp+var_4] ; this
.text:00002EF9                 call    ??1CHandler@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CHandler::~CHandler(void)
.text:00002EFE                 mov     eax, [ebp+arg_0]
.text:00002F01                 and     eax, 1
.text:00002F04                 jz      short loc_2F12
.text:00002F06                 mov     ecx, [ebp+var_4]
.text:00002F09                 push    ecx             ; void *
.text:00002F0A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00002F0F                 add     esp, 4
.text:00002F12
.text:00002F12 loc_2F12:                               ; CODE XREF: NArchive::N7z::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:00002F12                 mov     eax, [ebp+var_4]
.text:00002F15                 add     esp, 4
.text:00002F18                 cmp     ebp, esp
.text:00002F1A                 call    __RTC_CheckEsp
.text:00002F1F                 mov     esp, ebp
.text:00002F21                 pop     ebp
.text:00002F22                 retn    4
.text:00002F22 ??_GCHandler@N7z@NArchive@@QAEPAXI@Z endp
.text:00002F22
.text:00002F22 ; ---------------------------------------------------------------------------
.text:00002F25                 align 4
.text:00002F25 _text           ends
.text:00002F25
.text:00002F28 ; ===========================================================================
.text:00002F28
.text:00002F28 ; Segment type: Pure code
.text:00002F28 ; Segment permissions: Read/Execute
.text:00002F28 _text           segment para public 'CODE' use32
.text:00002F28                 assume cs:_text
.text:00002F28                 ;org 2F28h
.text:00002F28 ; COMDAT (pick any)
.text:00002F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002F28
.text:00002F28 ; =============== S U B R O U T I N E =======================================
.text:00002F28
.text:00002F28 ; Attributes: bp-based frame
.text:00002F28
.text:00002F28 ; _DWORD __thiscall NArchive::N7z::CHandler::~CHandler(NArchive::N7z::CHandler *__hidden this)
.text:00002F28                 public ??1CHandler@N7z@NArchive@@QAE@XZ
.text:00002F28 ??1CHandler@N7z@NArchive@@QAE@XZ proc near
.text:00002F28                                         ; CODE XREF: NArchive::N7z::CHandler::`scalar deleting destructor'(uint)+11p
.text:00002F28
.text:00002F28 var_10          = dword ptr -10h
.text:00002F28 var_C           = dword ptr -0Ch
.text:00002F28 var_4           = dword ptr -4
.text:00002F28
.text:00002F28                 push    ebp
.text:00002F29                 mov     ebp, esp
.text:00002F2B                 push    0FFFFFFFFh
.text:00002F2D                 push    offset __ehhandler$??1CHandler@N7z@NArchive@@QAE@XZ
.text:00002F32                 mov     eax, large fs:0
.text:00002F38                 push    eax
.text:00002F39                 push    ecx
.text:00002F3A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00002F41                 mov     eax, dword ptr ds:___security_cookie
.text:00002F46                 xor     eax, ebp
.text:00002F48                 push    eax
.text:00002F49                 lea     eax, [ebp+var_C]
.text:00002F4C                 mov     large fs:0, eax
.text:00002F52                 mov     [ebp+var_10], ecx
.text:00002F55                 mov     [ebp+var_4], 4
.text:00002F5C                 mov     ecx, [ebp+var_10]
.text:00002F5F                 add     ecx, 1E4h
.text:00002F65                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00002F6A                 mov     byte ptr [ebp+var_4], 3
.text:00002F6E                 mov     ecx, [ebp+var_10]
.text:00002F71                 add     ecx, 1D8h
.text:00002F77                 call    ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text:00002F7C                 mov     byte ptr [ebp+var_4], 2
.text:00002F80                 mov     ecx, [ebp+var_10]
.text:00002F83                 add     ecx, 1CCh       ; this
.text:00002F89                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002F8E                 mov     byte ptr [ebp+var_4], 1
.text:00002F92                 mov     ecx, [ebp+var_10]
.text:00002F95                 add     ecx, 90h ; 'É'  ; this
.text:00002F9B                 call    ??1CDbEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDbEx::~CDbEx(void)
.text:00002FA0                 mov     byte ptr [ebp+var_4], 0
.text:00002FA4                 mov     ecx, [ebp+var_10]
.text:00002FA7                 add     ecx, 88h ; 'ê'
.text:00002FAD                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00002FB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002FB9                 mov     ecx, [ebp+var_10]
.text:00002FBC                 add     ecx, 18h        ; this
.text:00002FBF                 call    ??1COutHandler@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutHandler::~COutHandler(void)
.text:00002FC4                 mov     ecx, [ebp+var_C]
.text:00002FC7                 mov     large fs:0, ecx
.text:00002FCE                 pop     ecx
.text:00002FCF                 add     esp, 10h
.text:00002FD2                 cmp     ebp, esp
.text:00002FD4                 call    __RTC_CheckEsp
.text:00002FD9                 mov     esp, ebp
.text:00002FDB                 pop     ebp
.text:00002FDC                 retn
.text:00002FDC ??1CHandler@N7z@NArchive@@QAE@XZ endp
.text:00002FDC
.text:00002FDC ; ---------------------------------------------------------------------------
.text:00002FDD                 align 10h
.text:00002FDD _text           ends
.text:00002FDD
.text$x:00002FE0 ; ===========================================================================
.text$x:00002FE0
.text$x:00002FE0 ; Segment type: Pure code
.text$x:00002FE0 ; Segment permissions: Read/Execute
.text$x:00002FE0 _text$x         segment para public 'CODE' use32
.text$x:00002FE0                 assume cs:_text$x
.text$x:00002FE0                 ;org 2FE0h
.text$x:00002FE0 ; COMDAT (pick associative to section at 2F28)
.text$x:00002FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002FE0
.text$x:00002FE0 ; =============== S U B R O U T I N E =======================================
.text$x:00002FE0
.text$x:00002FE0
.text$x:00002FE0 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00002FE0                                         ; DATA XREF: .xdata$x:00003068o
.text$x:00002FE0                 mov     ecx, [ebp-10h]
.text$x:00002FE3                 add     ecx, 18h        ; this
.text$x:00002FE6                 jmp     ??1COutHandler@N7z@NArchive@@QAE@XZ ; NArchive::N7z::COutHandler::~COutHandler(void)
.text$x:00002FE6 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00002FE6
.text$x:00002FEB
.text$x:00002FEB ; =============== S U B R O U T I N E =======================================
.text$x:00002FEB
.text$x:00002FEB
.text$x:00002FEB __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00002FEB                                         ; DATA XREF: .xdata$x:00003070o
.text$x:00002FEB                 mov     ecx, [ebp-10h]
.text$x:00002FEE                 add     ecx, 88h ; 'ê'
.text$x:00002FF4                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002FF4 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00002FF4
.text$x:00002FF9
.text$x:00002FF9 ; =============== S U B R O U T I N E =======================================
.text$x:00002FF9
.text$x:00002FF9
.text$x:00002FF9 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00002FF9                                         ; DATA XREF: .xdata$x:00003078o
.text$x:00002FF9                 mov     ecx, [ebp-10h]
.text$x:00002FFC                 add     ecx, 90h ; 'É'  ; this
.text$x:00003002                 jmp     ??1CDbEx@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDbEx::~CDbEx(void)
.text$x:00003002 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00003002
.text$x:00003007
.text$x:00003007 ; =============== S U B R O U T I N E =======================================
.text$x:00003007
.text$x:00003007
.text$x:00003007 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00003007                                         ; DATA XREF: .xdata$x:00003080o
.text$x:00003007                 mov     ecx, [ebp-10h]
.text$x:0000300A                 add     ecx, 1CCh       ; this
.text$x:00003010                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00003010 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00003010
.text$x:00003015
.text$x:00003015 ; =============== S U B R O U T I N E =======================================
.text$x:00003015
.text$x:00003015
.text$x:00003015 __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00003015                                         ; DATA XREF: .xdata$x:00003088o
.text$x:00003015                 mov     ecx, [ebp-10h]
.text$x:00003018                 add     ecx, 1D8h
.text$x:0000301E                 jmp     ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>(void)
.text$x:0000301E __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$4 endp
.text$x:0000301E
.text$x:00003023
.text$x:00003023 ; =============== S U B R O U T I N E =======================================
.text$x:00003023
.text$x:00003023
.text$x:00003023 __ehhandler$??1CHandler@N7z@NArchive@@QAE@XZ proc near
.text$x:00003023                                         ; DATA XREF: NArchive::N7z::CHandler::~CHandler(void)+5o
.text$x:00003023
.text$x:00003023 arg_4           = dword ptr  8
.text$x:00003023
.text$x:00003023                 mov     edx, [esp+arg_4]
.text$x:00003027                 lea     eax, [edx+0Ch]
.text$x:0000302A                 mov     ecx, [edx-8]
.text$x:0000302D                 xor     ecx, eax
.text$x:0000302F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003034                 mov     eax, offset __ehfuncinfo$??1CHandler@N7z@NArchive@@QAE@XZ
.text$x:00003039                 jmp     ___CxxFrameHandler3
.text$x:00003039 __ehhandler$??1CHandler@N7z@NArchive@@QAE@XZ endp
.text$x:00003039
.text$x:00003039 ; ---------------------------------------------------------------------------
.text$x:0000303E                 align 10h
.text$x:0000303E _text$x         ends
.text$x:0000303E
.xdata$x:00003040 ; ===========================================================================
.xdata$x:00003040
.xdata$x:00003040 ; Segment type: Pure data
.xdata$x:00003040 ; Segment permissions: Read
.xdata$x:00003040 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003040                 assume cs:_xdata$x
.xdata$x:00003040                 ;org 3040h
.xdata$x:00003040 ; COMDAT (pick associative to section at 2F28)
.xdata$x:00003040 __ehfuncinfo$??1CHandler@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003040                                         ; DATA XREF: __ehhandler$??1CHandler@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003041                 db    5
.xdata$x:00003042                 db  93h ; ô
.xdata$x:00003043                 db  19h
.xdata$x:00003044                 db    5
.xdata$x:00003045                 db    0
.xdata$x:00003046                 db    0
.xdata$x:00003047                 db    0
.xdata$x:00003048                 dd offset __unwindtable$??1CHandler@N7z@NArchive@@QAE@XZ
.xdata$x:0000304C                 align 20h
.xdata$x:00003060                 db    1
.xdata$x:00003061                 db    0
.xdata$x:00003062                 db    0
.xdata$x:00003063                 db    0
.xdata$x:00003064 __unwindtable$??1CHandler@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003064                                         ; DATA XREF: .xdata$x:00003048o
.xdata$x:00003065                 db 0FFh
.xdata$x:00003066                 db 0FFh
.xdata$x:00003067                 db 0FFh
.xdata$x:00003068                 dd offset __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000306C                 align 10h
.xdata$x:00003070                 dd offset __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003074                 db    1
.xdata$x:00003075                 db    0
.xdata$x:00003076                 db    0
.xdata$x:00003077                 db    0
.xdata$x:00003078                 dd offset __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$2
.xdata$x:0000307C                 db    2
.xdata$x:0000307D                 db    0
.xdata$x:0000307E                 db    0
.xdata$x:0000307F                 db    0
.xdata$x:00003080                 dd offset __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$3
.xdata$x:00003084                 db    3
.xdata$x:00003085                 db    0
.xdata$x:00003086                 db    0
.xdata$x:00003087                 db    0
.xdata$x:00003088                 dd offset __unwindfunclet$??1CHandler@N7z@NArchive@@QAE@XZ$4
.xdata$x:00003088 _xdata$x        ends
.xdata$x:00003088
.text:0000308C ; ===========================================================================
.text:0000308C
.text:0000308C ; Segment type: Pure code
.text:0000308C ; Segment permissions: Read/Execute
.text:0000308C _text           segment para public 'CODE' use32
.text:0000308C                 assume cs:_text
.text:0000308C                 ;org 308Ch
.text:0000308C ; COMDAT (pick any)
.text:0000308C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000308C
.text:0000308C ; =============== S U B R O U T I N E =======================================
.text:0000308C
.text:0000308C ; Attributes: bp-based frame
.text:0000308C
.text:0000308C ; _DWORD __thiscall NArchive::N7z::COutHandler::~COutHandler(NArchive::N7z::COutHandler *__hidden this)
.text:0000308C                 public ??1COutHandler@N7z@NArchive@@QAE@XZ
.text:0000308C ??1COutHandler@N7z@NArchive@@QAE@XZ proc near
.text:0000308C                                         ; CODE XREF: __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$0+6j
.text:0000308C                                         ; NArchive::N7z::CHandler::~CHandler(void)+97p ...
.text:0000308C
.text:0000308C var_4           = dword ptr -4
.text:0000308C
.text:0000308C                 push    ebp
.text:0000308D                 mov     ebp, esp
.text:0000308F                 push    ecx
.text:00003090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003097                 mov     [ebp+var_4], ecx
.text:0000309A                 mov     ecx, [ebp+var_4] ; this
.text:0000309D                 call    ??1CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)
.text:000030A2                 add     esp, 4
.text:000030A5                 cmp     ebp, esp
.text:000030A7                 call    __RTC_CheckEsp
.text:000030AC                 mov     esp, ebp
.text:000030AE                 pop     ebp
.text:000030AF                 retn
.text:000030AF ??1COutHandler@N7z@NArchive@@QAE@XZ endp
.text:000030AF
.text:000030AF _text           ends
.text:000030AF
.text:000030B0 ; ===========================================================================
.text:000030B0
.text:000030B0 ; Segment type: Pure code
.text:000030B0 ; Segment permissions: Read/Execute
.text:000030B0 _text           segment para public 'CODE' use32
.text:000030B0                 assume cs:_text
.text:000030B0                 ;org 30B0h
.text:000030B0 ; COMDAT (pick any)
.text:000030B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000030B0
.text:000030B0 ; =============== S U B R O U T I N E =======================================
.text:000030B0
.text:000030B0 ; Attributes: bp-based frame
.text:000030B0
.text:000030B0 ; _DWORD __thiscall NArchive::N7z::CDbEx::~CDbEx(NArchive::N7z::CDbEx *__hidden this)
.text:000030B0                 public ??1CDbEx@N7z@NArchive@@QAE@XZ
.text:000030B0 ??1CDbEx@N7z@NArchive@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$2+9j
.text:000030B0                                         ; NArchive::N7z::CHandler::~CHandler(void)+73p ...
.text:000030B0
.text:000030B0 var_10          = dword ptr -10h
.text:000030B0 var_C           = dword ptr -0Ch
.text:000030B0 var_4           = dword ptr -4
.text:000030B0
.text:000030B0                 push    ebp
.text:000030B1                 mov     ebp, esp
.text:000030B3                 push    0FFFFFFFFh
.text:000030B5                 push    offset __ehhandler$??1CDbEx@N7z@NArchive@@QAE@XZ
.text:000030BA                 mov     eax, large fs:0
.text:000030C0                 push    eax
.text:000030C1                 push    ecx
.text:000030C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000030C9                 mov     eax, dword ptr ds:___security_cookie
.text:000030CE                 xor     eax, ebp
.text:000030D0                 push    eax
.text:000030D1                 lea     eax, [ebp+var_C]
.text:000030D4                 mov     large fs:0, eax
.text:000030DA                 mov     [ebp+var_10], ecx
.text:000030DD                 mov     [ebp+var_4], 2
.text:000030E4                 mov     ecx, [ebp+var_10]
.text:000030E7                 add     ecx, 11Ch
.text:000030ED                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:000030F2                 mov     byte ptr [ebp+var_4], 1
.text:000030F6                 mov     ecx, [ebp+var_10]
.text:000030F9                 add     ecx, 118h
.text:000030FF                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00003104                 mov     byte ptr [ebp+var_4], 0
.text:00003108                 mov     ecx, [ebp+var_10]
.text:0000310B                 add     ecx, 0E0h ; 'a' ; this
.text:00003111                 call    ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchiveInfo::~CInArchiveInfo(void)
.text:00003116                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000311D                 mov     ecx, [ebp+var_10] ; this
.text:00003120                 call    ??1CDatabase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDatabase::~CDatabase(void)
.text:00003125                 mov     ecx, [ebp+var_C]
.text:00003128                 mov     large fs:0, ecx
.text:0000312F                 pop     ecx
.text:00003130                 add     esp, 10h
.text:00003133                 cmp     ebp, esp
.text:00003135                 call    __RTC_CheckEsp
.text:0000313A                 mov     esp, ebp
.text:0000313C                 pop     ebp
.text:0000313D                 retn
.text:0000313D ??1CDbEx@N7z@NArchive@@QAE@XZ endp
.text:0000313D
.text:0000313D ; ---------------------------------------------------------------------------
.text:0000313E                 align 10h
.text:0000313E _text           ends
.text:0000313E
.text$x:00003140 ; ===========================================================================
.text$x:00003140
.text$x:00003140 ; Segment type: Pure code
.text$x:00003140 ; Segment permissions: Read/Execute
.text$x:00003140 _text$x         segment para public 'CODE' use32
.text$x:00003140                 assume cs:_text$x
.text$x:00003140                 ;org 3140h
.text$x:00003140 ; COMDAT (pick associative to section at 30B0)
.text$x:00003140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003140
.text$x:00003140 ; =============== S U B R O U T I N E =======================================
.text$x:00003140
.text$x:00003140
.text$x:00003140 __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003140                                         ; DATA XREF: .xdata$x:00003184o
.text$x:00003140                 mov     ecx, [ebp-10h]  ; this
.text$x:00003143                 jmp     ??1CDatabase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDatabase::~CDatabase(void)
.text$x:00003143 __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003143
.text$x:00003148
.text$x:00003148 ; =============== S U B R O U T I N E =======================================
.text$x:00003148
.text$x:00003148
.text$x:00003148 __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003148                                         ; DATA XREF: .xdata$x:0000318Co
.text$x:00003148                 mov     ecx, [ebp-10h]
.text$x:0000314B                 add     ecx, 0E0h ; 'a' ; this
.text$x:00003151                 jmp     ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchiveInfo::~CInArchiveInfo(void)
.text$x:00003151 __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003151
.text$x:00003156
.text$x:00003156 ; =============== S U B R O U T I N E =======================================
.text$x:00003156
.text$x:00003156
.text$x:00003156 __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00003156                                         ; DATA XREF: .xdata$x:00003194o
.text$x:00003156                 mov     ecx, [ebp-10h]
.text$x:00003159                 add     ecx, 118h
.text$x:0000315F                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:0000315F __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$2 endp
.text$x:0000315F
.text$x:00003164
.text$x:00003164 ; =============== S U B R O U T I N E =======================================
.text$x:00003164
.text$x:00003164
.text$x:00003164 __ehhandler$??1CDbEx@N7z@NArchive@@QAE@XZ proc near
.text$x:00003164                                         ; DATA XREF: NArchive::N7z::CDbEx::~CDbEx(void)+5o
.text$x:00003164
.text$x:00003164 arg_4           = dword ptr  8
.text$x:00003164
.text$x:00003164                 mov     edx, [esp+arg_4]
.text$x:00003168                 lea     eax, [edx+0Ch]
.text$x:0000316B                 mov     ecx, [edx-8]
.text$x:0000316E                 xor     ecx, eax
.text$x:00003170                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003175                 mov     eax, offset __ehfuncinfo$??1CDbEx@N7z@NArchive@@QAE@XZ
.text$x:0000317A                 jmp     ___CxxFrameHandler3
.text$x:0000317A __ehhandler$??1CDbEx@N7z@NArchive@@QAE@XZ endp
.text$x:0000317A
.text$x:0000317A ; ---------------------------------------------------------------------------
.text$x:0000317F                 align 10h
.text$x:0000317F _text$x         ends
.text$x:0000317F
.xdata$x:00003180 ; ===========================================================================
.xdata$x:00003180
.xdata$x:00003180 ; Segment type: Pure data
.xdata$x:00003180 ; Segment permissions: Read
.xdata$x:00003180 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003180                 assume cs:_xdata$x
.xdata$x:00003180                 ;org 3180h
.xdata$x:00003180 ; COMDAT (pick associative to section at 30B0)
.xdata$x:00003180 __unwindtable$??1CDbEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003180                                         ; DATA XREF: .xdata$x:000031A0o
.xdata$x:00003181                 db 0FFh
.xdata$x:00003182                 db 0FFh
.xdata$x:00003183                 db 0FFh
.xdata$x:00003184                 dd offset __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003188                 db    0
.xdata$x:00003189                 db    0
.xdata$x:0000318A                 db    0
.xdata$x:0000318B                 db    0
.xdata$x:0000318C                 dd offset __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003190                 db    1
.xdata$x:00003191                 db    0
.xdata$x:00003192                 db    0
.xdata$x:00003193                 db    0
.xdata$x:00003194                 dd offset __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$2
.xdata$x:00003198 __ehfuncinfo$??1CDbEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003198                                         ; DATA XREF: __ehhandler$??1CDbEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003199                 db    5
.xdata$x:0000319A                 db  93h ; ô
.xdata$x:0000319B                 db  19h
.xdata$x:0000319C                 db    3
.xdata$x:0000319D                 db    0
.xdata$x:0000319E                 db    0
.xdata$x:0000319F                 db    0
.xdata$x:000031A0                 dd offset __unwindtable$??1CDbEx@N7z@NArchive@@QAE@XZ
.xdata$x:000031A4                 db    0
.xdata$x:000031A5                 db    0
.xdata$x:000031A6                 db    0
.xdata$x:000031A7                 db    0
.xdata$x:000031A8                 db    0
.xdata$x:000031A9                 db    0
.xdata$x:000031AA                 db    0
.xdata$x:000031AB                 db    0
.xdata$x:000031AC                 db    0
.xdata$x:000031AD                 db    0
.xdata$x:000031AE                 db    0
.xdata$x:000031AF                 db    0
.xdata$x:000031B0                 db    0
.xdata$x:000031B1                 db    0
.xdata$x:000031B2                 db    0
.xdata$x:000031B3                 db    0
.xdata$x:000031B4                 db    0
.xdata$x:000031B5                 db    0
.xdata$x:000031B6                 db    0
.xdata$x:000031B7                 db    0
.xdata$x:000031B8                 db    1
.xdata$x:000031B9                 db    0
.xdata$x:000031BA                 db    0
.xdata$x:000031BB                 db    0
.xdata$x:000031BB _xdata$x        ends
.xdata$x:000031BB
.text:000031BC ; ===========================================================================
.text:000031BC
.text:000031BC ; Segment type: Pure code
.text:000031BC ; Segment permissions: Read/Execute
.text:000031BC _text           segment para public 'CODE' use32
.text:000031BC                 assume cs:_text
.text:000031BC                 ;org 31BCh
.text:000031BC ; COMDAT (pick any)
.text:000031BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000031BC
.text:000031BC ; =============== S U B R O U T I N E =======================================
.text:000031BC
.text:000031BC ; Attributes: bp-based frame
.text:000031BC
.text:000031BC ; _DWORD __thiscall NArchive::N7z::CDatabase::~CDatabase(NArchive::N7z::CDatabase *__hidden this)
.text:000031BC                 public ??1CDatabase@N7z@NArchive@@QAE@XZ
.text:000031BC ??1CDatabase@N7z@NArchive@@QAE@XZ proc near
.text:000031BC                                         ; CODE XREF: NArchive::N7z::CDbEx::~CDbEx(void)+70p
.text:000031BC                                         ; __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$0+3j ...
.text:000031BC
.text:000031BC var_10          = dword ptr -10h
.text:000031BC var_C           = dword ptr -0Ch
.text:000031BC var_4           = dword ptr -4
.text:000031BC
.text:000031BC                 push    ebp
.text:000031BD                 mov     ebp, esp
.text:000031BF                 push    0FFFFFFFFh
.text:000031C1                 push    offset __ehhandler$??1CDatabase@N7z@NArchive@@QAE@XZ
.text:000031C6                 mov     eax, large fs:0
.text:000031CC                 push    eax
.text:000031CD                 push    ecx
.text:000031CE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000031D5                 mov     eax, dword ptr ds:___security_cookie
.text:000031DA                 xor     eax, ebp
.text:000031DC                 push    eax
.text:000031DD                 lea     eax, [ebp+var_C]
.text:000031E0                 mov     large fs:0, eax
.text:000031E6                 mov     [ebp+var_10], ecx
.text:000031E9                 mov     [ebp+var_4], 7
.text:000031F0                 mov     ecx, [ebp+var_10]
.text:000031F3                 add     ecx, 0D8h ; '+'
.text:000031F9                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:000031FE                 mov     byte ptr [ebp+var_4], 6
.text:00003202                 mov     ecx, [ebp+var_10]
.text:00003205                 add     ecx, 0D0h ; '-'
.text:0000320B                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:00003210                 mov     byte ptr [ebp+var_4], 5
.text:00003214                 mov     ecx, [ebp+var_10]
.text:00003217                 add     ecx, 0C4h ; '-'
.text:0000321D                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00003222                 mov     byte ptr [ebp+var_4], 4
.text:00003226                 mov     ecx, [ebp+var_10]
.text:00003229                 add     ecx, 0ACh ; '¼' ; this
.text:0000322F                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:00003234                 mov     byte ptr [ebp+var_4], 3
.text:00003238                 mov     ecx, [ebp+var_10]
.text:0000323B                 add     ecx, 94h ; 'ö'  ; this
.text:00003241                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:00003246                 mov     byte ptr [ebp+var_4], 2
.text:0000324A                 mov     ecx, [ebp+var_10]
.text:0000324D                 add     ecx, 7Ch ; '|'  ; this
.text:00003250                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:00003255                 mov     byte ptr [ebp+var_4], 1
.text:00003259                 mov     ecx, [ebp+var_10]
.text:0000325C                 add     ecx, 64h ; 'd'  ; this
.text:0000325F                 call    ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text:00003264                 mov     byte ptr [ebp+var_4], 0
.text:00003268                 mov     ecx, [ebp+var_10]
.text:0000326B                 add     ecx, 58h ; 'X'
.text:0000326E                 call    ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text:00003273                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000327A                 mov     ecx, [ebp+var_10] ; this
.text:0000327D                 call    ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text:00003282                 mov     ecx, [ebp+var_C]
.text:00003285                 mov     large fs:0, ecx
.text:0000328C                 pop     ecx
.text:0000328D                 add     esp, 10h
.text:00003290                 cmp     ebp, esp
.text:00003292                 call    __RTC_CheckEsp
.text:00003297                 mov     esp, ebp
.text:00003299                 pop     ebp
.text:0000329A                 retn
.text:0000329A ??1CDatabase@N7z@NArchive@@QAE@XZ endp
.text:0000329A
.text:0000329A ; ---------------------------------------------------------------------------
.text:0000329B                 align 4
.text:0000329B _text           ends
.text:0000329B
.text$x:0000329C ; ===========================================================================
.text$x:0000329C
.text$x:0000329C ; Segment type: Pure code
.text$x:0000329C ; Segment permissions: Read/Execute
.text$x:0000329C _text$x         segment para public 'CODE' use32
.text$x:0000329C                 assume cs:_text$x
.text$x:0000329C                 ;org 329Ch
.text$x:0000329C ; COMDAT (pick associative to section at 31BC)
.text$x:0000329C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000329C
.text$x:0000329C ; =============== S U B R O U T I N E =======================================
.text$x:0000329C
.text$x:0000329C
.text$x:0000329C __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:0000329C                                         ; DATA XREF: .xdata$x:00003340o
.text$x:0000329C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000329F                 jmp     ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text$x:0000329F __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000329F
.text$x:000032A4
.text$x:000032A4 ; =============== S U B R O U T I N E =======================================
.text$x:000032A4
.text$x:000032A4
.text$x:000032A4 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:000032A4                                         ; DATA XREF: .xdata$x:00003348o
.text$x:000032A4                 mov     ecx, [ebp-10h]
.text$x:000032A7                 add     ecx, 58h ; 'X'
.text$x:000032AA                 jmp     ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text$x:000032AA __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$1 endp
.text$x:000032AA
.text$x:000032AF
.text$x:000032AF ; =============== S U B R O U T I N E =======================================
.text$x:000032AF
.text$x:000032AF
.text$x:000032AF __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:000032AF                                         ; DATA XREF: .xdata$x:00003350o
.text$x:000032AF                 mov     ecx, [ebp-10h]
.text$x:000032B2                 add     ecx, 64h ; 'd'  ; this
.text$x:000032B5                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000032B5 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$2 endp
.text$x:000032B5
.text$x:000032BA
.text$x:000032BA ; =============== S U B R O U T I N E =======================================
.text$x:000032BA
.text$x:000032BA
.text$x:000032BA __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:000032BA                                         ; DATA XREF: .xdata$x:00003358o
.text$x:000032BA                 mov     ecx, [ebp-10h]
.text$x:000032BD                 add     ecx, 7Ch ; '|'  ; this
.text$x:000032C0                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000032C0 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$3 endp
.text$x:000032C0
.text$x:000032C5
.text$x:000032C5 ; =============== S U B R O U T I N E =======================================
.text$x:000032C5
.text$x:000032C5
.text$x:000032C5 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:000032C5                                         ; DATA XREF: .xdata$x:00003360o
.text$x:000032C5                 mov     ecx, [ebp-10h]
.text$x:000032C8                 add     ecx, 94h ; 'ö'  ; this
.text$x:000032CE                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000032CE __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$4 endp
.text$x:000032CE
.text$x:000032D3
.text$x:000032D3 ; =============== S U B R O U T I N E =======================================
.text$x:000032D3
.text$x:000032D3
.text$x:000032D3 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:000032D3                                         ; DATA XREF: .xdata$x:00003368o
.text$x:000032D3                 mov     ecx, [ebp-10h]
.text$x:000032D6                 add     ecx, 0ACh ; '¼' ; this
.text$x:000032DC                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:000032DC __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$5 endp
.text$x:000032DC
.text$x:000032E1
.text$x:000032E1 ; =============== S U B R O U T I N E =======================================
.text$x:000032E1
.text$x:000032E1
.text$x:000032E1 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:000032E1                                         ; DATA XREF: .xdata$x:00003370o
.text$x:000032E1                 mov     ecx, [ebp-10h]
.text$x:000032E4                 add     ecx, 0C4h ; '-'
.text$x:000032EA                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000032EA __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$6 endp
.text$x:000032EA
.text$x:000032EF
.text$x:000032EF ; =============== S U B R O U T I N E =======================================
.text$x:000032EF
.text$x:000032EF
.text$x:000032EF __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:000032EF                                         ; DATA XREF: .xdata$x:00003378o
.text$x:000032EF                 mov     ecx, [ebp-10h]
.text$x:000032F2                 add     ecx, 0D0h ; '-'
.text$x:000032F8                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000032F8 __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$7 endp
.text$x:000032F8
.text$x:000032FD
.text$x:000032FD ; =============== S U B R O U T I N E =======================================
.text$x:000032FD
.text$x:000032FD
.text$x:000032FD __ehhandler$??1CDatabase@N7z@NArchive@@QAE@XZ proc near
.text$x:000032FD                                         ; DATA XREF: NArchive::N7z::CDatabase::~CDatabase(void)+5o
.text$x:000032FD
.text$x:000032FD arg_4           = dword ptr  8
.text$x:000032FD
.text$x:000032FD                 mov     edx, [esp+arg_4]
.text$x:00003301                 lea     eax, [edx+0Ch]
.text$x:00003304                 mov     ecx, [edx-8]
.text$x:00003307                 xor     ecx, eax
.text$x:00003309                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000330E                 mov     eax, offset __ehfuncinfo$??1CDatabase@N7z@NArchive@@QAE@XZ
.text$x:00003313                 jmp     ___CxxFrameHandler3
.text$x:00003313 __ehhandler$??1CDatabase@N7z@NArchive@@QAE@XZ endp
.text$x:00003313
.text$x:00003313 _text$x         ends
.text$x:00003313
.xdata$x:00003318 ; ===========================================================================
.xdata$x:00003318
.xdata$x:00003318 ; Segment type: Pure data
.xdata$x:00003318 ; Segment permissions: Read
.xdata$x:00003318 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003318                 assume cs:_xdata$x
.xdata$x:00003318                 ;org 3318h
.xdata$x:00003318 ; COMDAT (pick associative to section at 31BC)
.xdata$x:00003318 __ehfuncinfo$??1CDatabase@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003318                                         ; DATA XREF: __ehhandler$??1CDatabase@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003319                 db    5
.xdata$x:0000331A                 db  93h ; ô
.xdata$x:0000331B                 db  19h
.xdata$x:0000331C                 db    8
.xdata$x:0000331D                 db    0
.xdata$x:0000331E                 db    0
.xdata$x:0000331F                 db    0
.xdata$x:00003320                 dd offset __unwindtable$??1CDatabase@N7z@NArchive@@QAE@XZ
.xdata$x:00003324                 db    0
.xdata$x:00003325                 db    0
.xdata$x:00003326                 db    0
.xdata$x:00003327                 db    0
.xdata$x:00003328                 db    0
.xdata$x:00003329                 db    0
.xdata$x:0000332A                 db    0
.xdata$x:0000332B                 db    0
.xdata$x:0000332C                 db    0
.xdata$x:0000332D                 db    0
.xdata$x:0000332E                 db    0
.xdata$x:0000332F                 db    0
.xdata$x:00003330                 db    0
.xdata$x:00003331                 db    0
.xdata$x:00003332                 db    0
.xdata$x:00003333                 db    0
.xdata$x:00003334                 db    0
.xdata$x:00003335                 db    0
.xdata$x:00003336                 db    0
.xdata$x:00003337                 db    0
.xdata$x:00003338                 db    1
.xdata$x:00003339                 db    0
.xdata$x:0000333A                 db    0
.xdata$x:0000333B                 db    0
.xdata$x:0000333C __unwindtable$??1CDatabase@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000333C                                         ; DATA XREF: .xdata$x:00003320o
.xdata$x:0000333D                 db 0FFh
.xdata$x:0000333E                 db 0FFh
.xdata$x:0000333F                 db 0FFh
.xdata$x:00003340                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003344                 align 8
.xdata$x:00003348                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000334C                 db    1
.xdata$x:0000334D                 db    0
.xdata$x:0000334E                 db    0
.xdata$x:0000334F                 db    0
.xdata$x:00003350                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$2
.xdata$x:00003354                 db    2
.xdata$x:00003355                 db    0
.xdata$x:00003356                 db    0
.xdata$x:00003357                 db    0
.xdata$x:00003358                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$3
.xdata$x:0000335C                 db    3
.xdata$x:0000335D                 db    0
.xdata$x:0000335E                 db    0
.xdata$x:0000335F                 db    0
.xdata$x:00003360                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$4
.xdata$x:00003364                 db    4
.xdata$x:00003365                 db    0
.xdata$x:00003366                 db    0
.xdata$x:00003367                 db    0
.xdata$x:00003368                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$5
.xdata$x:0000336C                 db    5
.xdata$x:0000336D                 db    0
.xdata$x:0000336E                 db    0
.xdata$x:0000336F                 db    0
.xdata$x:00003370                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$6
.xdata$x:00003374                 db    6
.xdata$x:00003375                 db    0
.xdata$x:00003376                 db    0
.xdata$x:00003377                 db    0
.xdata$x:00003378                 dd offset __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$7
.xdata$x:00003378 _xdata$x        ends
.xdata$x:00003378
.text:0000337C ; ===========================================================================
.text:0000337C
.text:0000337C ; Segment type: Pure code
.text:0000337C ; Segment permissions: Read/Execute
.text:0000337C _text           segment para public 'CODE' use32
.text:0000337C                 assume cs:_text
.text:0000337C                 ;org 337Ch
.text:0000337C ; COMDAT (pick any)
.text:0000337C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000337C
.text:0000337C ; =============== S U B R O U T I N E =======================================
.text:0000337C
.text:0000337C ; Attributes: bp-based frame
.text:0000337C
.text:0000337C ; _DWORD __thiscall NArchive::N7z::CInArchiveInfo::~CInArchiveInfo(NArchive::N7z::CInArchiveInfo *__hidden this)
.text:0000337C                 public ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ
.text:0000337C ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ proc near
.text:0000337C                                         ; CODE XREF: NArchive::N7z::CDbEx::~CDbEx(void)+61p
.text:0000337C                                         ; __unwindfunclet$??1CDbEx@N7z@NArchive@@QAE@XZ$1+9j ...
.text:0000337C
.text:0000337C var_4           = dword ptr -4
.text:0000337C
.text:0000337C                 push    ebp
.text:0000337D                 mov     ebp, esp
.text:0000337F                 push    ecx
.text:00003380                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003387                 mov     [ebp+var_4], ecx
.text:0000338A                 mov     ecx, [ebp+var_4]
.text:0000338D                 add     ecx, 28h ; '('
.text:00003390                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00003395                 add     esp, 4
.text:00003398                 cmp     ebp, esp
.text:0000339A                 call    __RTC_CheckEsp
.text:0000339F                 mov     esp, ebp
.text:000033A1                 pop     ebp
.text:000033A2                 retn
.text:000033A2 ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ endp
.text:000033A2
.text:000033A2 ; ---------------------------------------------------------------------------
.text:000033A3                 align 4
.text:000033A3 _text           ends
.text:000033A3
.text:000033A4 ; ===========================================================================
.text:000033A4
.text:000033A4 ; Segment type: Pure code
.text:000033A4 ; Segment permissions: Read/Execute
.text:000033A4 _text           segment para public 'CODE' use32
.text:000033A4                 assume cs:_text
.text:000033A4                 ;org 33A4h
.text:000033A4 ; COMDAT (pick any)
.text:000033A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033A4
.text:000033A4 ; =============== S U B R O U T I N E =======================================
.text:000033A4
.text:000033A4 ; Attributes: bp-based frame
.text:000033A4
.text:000033A4 ; _DWORD __thiscall NArchive::N7z::CFolders::~CFolders(NArchive::N7z::CFolders *__hidden this)
.text:000033A4                 public ??1CFolders@N7z@NArchive@@QAE@XZ
.text:000033A4 ??1CFolders@N7z@NArchive@@QAE@XZ proc near
.text:000033A4                                         ; CODE XREF: NArchive::N7z::CDatabase::~CDatabase(void)+C1p
.text:000033A4                                         ; __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$0+3j ...
.text:000033A4
.text:000033A4 var_10          = dword ptr -10h
.text:000033A4 var_C           = dword ptr -0Ch
.text:000033A4 var_4           = dword ptr -4
.text:000033A4
.text:000033A4                 push    ebp
.text:000033A5                 mov     ebp, esp
.text:000033A7                 push    0FFFFFFFFh
.text:000033A9                 push    offset __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ
.text:000033AE                 mov     eax, large fs:0
.text:000033B4                 push    eax
.text:000033B5                 push    ecx
.text:000033B6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000033BD                 mov     eax, dword ptr ds:___security_cookie
.text:000033C2                 xor     eax, ebp
.text:000033C4                 push    eax
.text:000033C5                 lea     eax, [ebp+var_C]
.text:000033C8                 mov     large fs:0, eax
.text:000033CE                 mov     [ebp+var_10], ecx
.text:000033D1                 mov     [ebp+var_4], 8
.text:000033D8                 mov     ecx, [ebp+var_10]
.text:000033DB                 add     ecx, 44h ; 'D'  ; this
.text:000033DE                 call    ??1CParsedMethods@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CParsedMethods::~CParsedMethods(void)
.text:000033E3                 mov     byte ptr [ebp+var_4], 7
.text:000033E7                 mov     ecx, [ebp+var_10]
.text:000033EA                 add     ecx, 3Ch ; '<'
.text:000033ED                 call    ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text:000033F2                 mov     byte ptr [ebp+var_4], 6
.text:000033F6                 mov     ecx, [ebp+var_10]
.text:000033F9                 add     ecx, 38h ; '8'
.text:000033FC                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:00003401                 mov     byte ptr [ebp+var_4], 5
.text:00003405                 mov     ecx, [ebp+var_10]
.text:00003408                 add     ecx, 34h ; '4'
.text:0000340B                 call    ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text:00003410                 mov     byte ptr [ebp+var_4], 4
.text:00003414                 mov     ecx, [ebp+var_10]
.text:00003417                 add     ecx, 30h ; '0'
.text:0000341A                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:0000341F                 mov     byte ptr [ebp+var_4], 3
.text:00003423                 mov     ecx, [ebp+var_10]
.text:00003426                 add     ecx, 2Ch ; ','
.text:00003429                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:0000342E                 mov     byte ptr [ebp+var_4], 2
.text:00003432                 mov     ecx, [ebp+var_10]
.text:00003435                 add     ecx, 28h ; '('
.text:00003438                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:0000343D                 mov     byte ptr [ebp+var_4], 1
.text:00003441                 mov     ecx, [ebp+var_10]
.text:00003444                 add     ecx, 24h ; '$'
.text:00003447                 call    ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text:0000344C                 mov     byte ptr [ebp+var_4], 0
.text:00003450                 mov     ecx, [ebp+var_10]
.text:00003453                 add     ecx, 0Ch        ; this
.text:00003456                 call    ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text:0000345B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003462                 mov     ecx, [ebp+var_10]
.text:00003465                 add     ecx, 8
.text:00003468                 call    ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:0000346D                 mov     ecx, [ebp+var_C]
.text:00003470                 mov     large fs:0, ecx
.text:00003477                 pop     ecx
.text:00003478                 add     esp, 10h
.text:0000347B                 cmp     ebp, esp
.text:0000347D                 call    __RTC_CheckEsp
.text:00003482                 mov     esp, ebp
.text:00003484                 pop     ebp
.text:00003485                 retn
.text:00003485 ??1CFolders@N7z@NArchive@@QAE@XZ endp
.text:00003485
.text:00003485 ; ---------------------------------------------------------------------------
.text:00003486                 align 4
.text:00003486 _text           ends
.text:00003486
.text$x:00003488 ; ===========================================================================
.text$x:00003488
.text$x:00003488 ; Segment type: Pure code
.text$x:00003488 ; Segment permissions: Read/Execute
.text$x:00003488 _text$x         segment para public 'CODE' use32
.text$x:00003488                 assume cs:_text$x
.text$x:00003488                 ;org 3488h
.text$x:00003488 ; COMDAT (pick associative to section at 33A4)
.text$x:00003488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003488
.text$x:00003488 ; =============== S U B R O U T I N E =======================================
.text$x:00003488
.text$x:00003488
.text$x:00003488 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003488                                         ; DATA XREF: .xdata$x:00003530o
.text$x:00003488                 mov     ecx, [ebp-10h]
.text$x:0000348B                 add     ecx, 8
.text$x:0000348E                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:0000348E __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:0000348E
.text$x:00003493
.text$x:00003493 ; =============== S U B R O U T I N E =======================================
.text$x:00003493
.text$x:00003493
.text$x:00003493 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003493                                         ; DATA XREF: .xdata$x:00003538o
.text$x:00003493                 mov     ecx, [ebp-10h]
.text$x:00003496                 add     ecx, 0Ch        ; this
.text$x:00003499                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00003499 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003499
.text$x:0000349E
.text$x:0000349E ; =============== S U B R O U T I N E =======================================
.text$x:0000349E
.text$x:0000349E
.text$x:0000349E __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:0000349E                                         ; DATA XREF: .xdata$x:00003540o
.text$x:0000349E                 mov     ecx, [ebp-10h]
.text$x:000034A1                 add     ecx, 24h ; '$'
.text$x:000034A4                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:000034A4 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2 endp
.text$x:000034A4
.text$x:000034A9
.text$x:000034A9 ; =============== S U B R O U T I N E =======================================
.text$x:000034A9
.text$x:000034A9
.text$x:000034A9 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:000034A9                                         ; DATA XREF: .xdata$x:00003548o
.text$x:000034A9                 mov     ecx, [ebp-10h]
.text$x:000034AC                 add     ecx, 28h ; '('
.text$x:000034AF                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:000034AF __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3 endp
.text$x:000034AF
.text$x:000034B4
.text$x:000034B4 ; =============== S U B R O U T I N E =======================================
.text$x:000034B4
.text$x:000034B4
.text$x:000034B4 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:000034B4                                         ; DATA XREF: .xdata$x:00003550o
.text$x:000034B4                 mov     ecx, [ebp-10h]
.text$x:000034B7                 add     ecx, 2Ch ; ','
.text$x:000034BA                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:000034BA __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4 endp
.text$x:000034BA
.text$x:000034BF
.text$x:000034BF ; =============== S U B R O U T I N E =======================================
.text$x:000034BF
.text$x:000034BF
.text$x:000034BF __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:000034BF                                         ; DATA XREF: .xdata$x:00003558o
.text$x:000034BF                 mov     ecx, [ebp-10h]
.text$x:000034C2                 add     ecx, 30h ; '0'
.text$x:000034C5                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:000034C5 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5 endp
.text$x:000034C5
.text$x:000034CA
.text$x:000034CA ; =============== S U B R O U T I N E =======================================
.text$x:000034CA
.text$x:000034CA
.text$x:000034CA __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:000034CA                                         ; DATA XREF: .xdata$x:00003560o
.text$x:000034CA                 mov     ecx, [ebp-10h]
.text$x:000034CD                 add     ecx, 34h ; '4'
.text$x:000034D0                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:000034D0 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6 endp
.text$x:000034D0
.text$x:000034D5
.text$x:000034D5 ; =============== S U B R O U T I N E =======================================
.text$x:000034D5
.text$x:000034D5
.text$x:000034D5 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:000034D5                                         ; DATA XREF: .xdata$x:00003568o
.text$x:000034D5                 mov     ecx, [ebp-10h]
.text$x:000034D8                 add     ecx, 38h ; '8'
.text$x:000034DB                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:000034DB __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7 endp
.text$x:000034DB
.text$x:000034E0
.text$x:000034E0 ; =============== S U B R O U T I N E =======================================
.text$x:000034E0
.text$x:000034E0
.text$x:000034E0 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:000034E0                                         ; DATA XREF: .xdata$x:00003570o
.text$x:000034E0                 mov     ecx, [ebp-10h]
.text$x:000034E3                 add     ecx, 3Ch ; '<'
.text$x:000034E6                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:000034E6 __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8 endp
.text$x:000034E6
.text$x:000034EB
.text$x:000034EB ; =============== S U B R O U T I N E =======================================
.text$x:000034EB
.text$x:000034EB
.text$x:000034EB __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:000034EB                                         ; DATA XREF: NArchive::N7z::CFolders::~CFolders(void)+5o
.text$x:000034EB
.text$x:000034EB arg_4           = dword ptr  8
.text$x:000034EB
.text$x:000034EB                 mov     edx, [esp+arg_4]
.text$x:000034EF                 lea     eax, [edx+0Ch]
.text$x:000034F2                 mov     ecx, [edx-8]
.text$x:000034F5                 xor     ecx, eax
.text$x:000034F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000034FC                 mov     eax, offset __ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ
.text$x:00003501                 jmp     ___CxxFrameHandler3
.text$x:00003501 __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ endp
.text$x:00003501
.text$x:00003501 ; ---------------------------------------------------------------------------
.text$x:00003506                 align 4
.text$x:00003506 _text$x         ends
.text$x:00003506
.xdata$x:00003508 ; ===========================================================================
.xdata$x:00003508
.xdata$x:00003508 ; Segment type: Pure data
.xdata$x:00003508 ; Segment permissions: Read
.xdata$x:00003508 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003508                 assume cs:_xdata$x
.xdata$x:00003508                 ;org 3508h
.xdata$x:00003508 ; COMDAT (pick associative to section at 33A4)
.xdata$x:00003508 __ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003508                                         ; DATA XREF: __ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003509                 db    5
.xdata$x:0000350A                 db  93h ; ô
.xdata$x:0000350B                 db  19h
.xdata$x:0000350C                 db    9
.xdata$x:0000350D                 db    0
.xdata$x:0000350E                 db    0
.xdata$x:0000350F                 db    0
.xdata$x:00003510                 dd offset __unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00003514                 db    0
.xdata$x:00003515                 db    0
.xdata$x:00003516                 db    0
.xdata$x:00003517                 db    0
.xdata$x:00003518                 db    0
.xdata$x:00003519                 db    0
.xdata$x:0000351A                 db    0
.xdata$x:0000351B                 db    0
.xdata$x:0000351C                 db    0
.xdata$x:0000351D                 db    0
.xdata$x:0000351E                 db    0
.xdata$x:0000351F                 db    0
.xdata$x:00003520                 db    0
.xdata$x:00003521                 db    0
.xdata$x:00003522                 db    0
.xdata$x:00003523                 db    0
.xdata$x:00003524                 db    0
.xdata$x:00003525                 db    0
.xdata$x:00003526                 db    0
.xdata$x:00003527                 db    0
.xdata$x:00003528                 db    1
.xdata$x:00003529                 db    0
.xdata$x:0000352A                 db    0
.xdata$x:0000352B                 db    0
.xdata$x:0000352C __unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000352C                                         ; DATA XREF: .xdata$x:00003510o
.xdata$x:0000352D                 db 0FFh
.xdata$x:0000352E                 db 0FFh
.xdata$x:0000352F                 db 0FFh
.xdata$x:00003530                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003534                 align 8
.xdata$x:00003538                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:0000353C                 db    1
.xdata$x:0000353D                 db    0
.xdata$x:0000353E                 db    0
.xdata$x:0000353F                 db    0
.xdata$x:00003540                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2
.xdata$x:00003544                 db    2
.xdata$x:00003545                 db    0
.xdata$x:00003546                 db    0
.xdata$x:00003547                 db    0
.xdata$x:00003548                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3
.xdata$x:0000354C                 db    3
.xdata$x:0000354D                 db    0
.xdata$x:0000354E                 db    0
.xdata$x:0000354F                 db    0
.xdata$x:00003550                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4
.xdata$x:00003554                 db    4
.xdata$x:00003555                 db    0
.xdata$x:00003556                 db    0
.xdata$x:00003557                 db    0
.xdata$x:00003558                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5
.xdata$x:0000355C                 db    5
.xdata$x:0000355D                 db    0
.xdata$x:0000355E                 db    0
.xdata$x:0000355F                 db    0
.xdata$x:00003560                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6
.xdata$x:00003564                 db    6
.xdata$x:00003565                 db    0
.xdata$x:00003566                 db    0
.xdata$x:00003567                 db    0
.xdata$x:00003568                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7
.xdata$x:0000356C                 db    7
.xdata$x:0000356D                 db    0
.xdata$x:0000356E                 db    0
.xdata$x:0000356F                 db    0
.xdata$x:00003570                 dd offset __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8
.xdata$x:00003570 _xdata$x        ends
.xdata$x:00003570
.text:00003574 ; ===========================================================================
.text:00003574
.text:00003574 ; Segment type: Pure code
.text:00003574 ; Segment permissions: Read/Execute
.text:00003574 _text           segment para public 'CODE' use32
.text:00003574                 assume cs:_text
.text:00003574                 ;org 3574h
.text:00003574 ; COMDAT (pick any)
.text:00003574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003574
.text:00003574 ; =============== S U B R O U T I N E =======================================
.text:00003574
.text:00003574 ; Attributes: bp-based frame
.text:00003574
.text:00003574 ; _DWORD __thiscall NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00003574                 public ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00003574 ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00003574                                         ; CODE XREF: NArchive::N7z::CDatabase::~CDatabase(void)+73p
.text:00003574                                         ; NArchive::N7z::CDatabase::~CDatabase(void)+85p ...
.text:00003574
.text:00003574 var_10          = dword ptr -10h
.text:00003574 var_C           = dword ptr -0Ch
.text:00003574 var_4           = dword ptr -4
.text:00003574
.text:00003574                 push    ebp
.text:00003575                 mov     ebp, esp
.text:00003577                 push    0FFFFFFFFh
.text:00003579                 push    offset __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:0000357E                 mov     eax, large fs:0
.text:00003584                 push    eax
.text:00003585                 push    ecx
.text:00003586                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000358D                 mov     eax, dword ptr ds:___security_cookie
.text:00003592                 xor     eax, ebp
.text:00003594                 push    eax
.text:00003595                 lea     eax, [ebp+var_C]
.text:00003598                 mov     large fs:0, eax
.text:0000359E                 mov     [ebp+var_10], ecx
.text:000035A1                 mov     [ebp+var_4], 0
.text:000035A8                 mov     ecx, [ebp+var_10]
.text:000035AB                 add     ecx, 0Ch
.text:000035AE                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000035B3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000035BA                 mov     ecx, [ebp+var_10]
.text:000035BD                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:000035C2                 mov     ecx, [ebp+var_C]
.text:000035C5                 mov     large fs:0, ecx
.text:000035CC                 pop     ecx
.text:000035CD                 add     esp, 10h
.text:000035D0                 cmp     ebp, esp
.text:000035D2                 call    __RTC_CheckEsp
.text:000035D7                 mov     esp, ebp
.text:000035D9                 pop     ebp
.text:000035DA                 retn
.text:000035DA ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text:000035DA
.text:000035DA ; ---------------------------------------------------------------------------
.text:000035DB                 align 4
.text:000035DB _text           ends
.text:000035DB
.text$x:000035DC ; ===========================================================================
.text$x:000035DC
.text$x:000035DC ; Segment type: Pure code
.text$x:000035DC ; Segment permissions: Read/Execute
.text$x:000035DC _text$x         segment para public 'CODE' use32
.text$x:000035DC                 assume cs:_text$x
.text$x:000035DC                 ;org 35DCh
.text$x:000035DC ; COMDAT (pick associative to section at 3574)
.text$x:000035DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000035DC
.text$x:000035DC ; =============== S U B R O U T I N E =======================================
.text$x:000035DC
.text$x:000035DC
.text$x:000035DC __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:000035DC                                         ; DATA XREF: .xdata$x:00003604o
.text$x:000035DC                 mov     ecx, [ebp-10h]
.text$x:000035DF                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:000035DF __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:000035DF
.text$x:000035E4
.text$x:000035E4 ; =============== S U B R O U T I N E =======================================
.text$x:000035E4
.text$x:000035E4
.text$x:000035E4 __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:000035E4                                         ; DATA XREF: NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)+5o
.text$x:000035E4
.text$x:000035E4 arg_4           = dword ptr  8
.text$x:000035E4
.text$x:000035E4                 mov     edx, [esp+arg_4]
.text$x:000035E8                 lea     eax, [edx+0Ch]
.text$x:000035EB                 mov     ecx, [edx-8]
.text$x:000035EE                 xor     ecx, eax
.text$x:000035F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035F5                 mov     eax, offset __ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text$x:000035FA                 jmp     ___CxxFrameHandler3
.text$x:000035FA __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:000035FA
.text$x:000035FA ; ---------------------------------------------------------------------------
.text$x:000035FF                 align 10h
.text$x:000035FF _text$x         ends
.text$x:000035FF
.xdata$x:00003600 ; ===========================================================================
.xdata$x:00003600
.xdata$x:00003600 ; Segment type: Pure data
.xdata$x:00003600 ; Segment permissions: Read
.xdata$x:00003600 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003600                 assume cs:_xdata$x
.xdata$x:00003600                 ;org 3600h
.xdata$x:00003600 ; COMDAT (pick associative to section at 3574)
.xdata$x:00003600 __unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003600                                         ; DATA XREF: .xdata$x:00003610o
.xdata$x:00003601                 db 0FFh
.xdata$x:00003602                 db 0FFh
.xdata$x:00003603                 db 0FFh
.xdata$x:00003604                 dd offset __unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003608 __ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003608                                         ; DATA XREF: __ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003609                 db    5
.xdata$x:0000360A                 db  93h ; ô
.xdata$x:0000360B                 db  19h
.xdata$x:0000360C                 db    1
.xdata$x:0000360D                 db    0
.xdata$x:0000360E                 db    0
.xdata$x:0000360F                 db    0
.xdata$x:00003610                 dd offset __unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00003614                 db    0
.xdata$x:00003615                 db    0
.xdata$x:00003616                 db    0
.xdata$x:00003617                 db    0
.xdata$x:00003618                 db    0
.xdata$x:00003619                 db    0
.xdata$x:0000361A                 db    0
.xdata$x:0000361B                 db    0
.xdata$x:0000361C                 db    0
.xdata$x:0000361D                 db    0
.xdata$x:0000361E                 db    0
.xdata$x:0000361F                 db    0
.xdata$x:00003620                 db    0
.xdata$x:00003621                 db    0
.xdata$x:00003622                 db    0
.xdata$x:00003623                 db    0
.xdata$x:00003624                 db    0
.xdata$x:00003625                 db    0
.xdata$x:00003626                 db    0
.xdata$x:00003627                 db    0
.xdata$x:00003628                 db    1
.xdata$x:00003629                 db    0
.xdata$x:0000362A                 db    0
.xdata$x:0000362B                 db    0
.xdata$x:0000362B _xdata$x        ends
.xdata$x:0000362B
.text:0000362C ; ===========================================================================
.text:0000362C
.text:0000362C ; Segment type: Pure code
.text:0000362C ; Segment permissions: Read/Execute
.text:0000362C _text           segment para public 'CODE' use32
.text:0000362C                 assume cs:_text
.text:0000362C                 ;org 362Ch
.text:0000362C ; COMDAT (pick any)
.text:0000362C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000362C
.text:0000362C ; =============== S U B R O U T I N E =======================================
.text:0000362C
.text:0000362C ; Attributes: bp-based frame
.text:0000362C
.text:0000362C ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:0000362C                 public ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:0000362C ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:0000362C                                         ; CODE XREF: NArchive::N7z::CFolders::~CFolders(void)+B2p
.text:0000362C                                         ; __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1+6j ...
.text:0000362C
.text:0000362C var_10          = dword ptr -10h
.text:0000362C var_C           = dword ptr -0Ch
.text:0000362C var_4           = dword ptr -4
.text:0000362C
.text:0000362C                 push    ebp
.text:0000362D                 mov     ebp, esp
.text:0000362F                 push    0FFFFFFFFh
.text:00003631                 push    offset __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00003636                 mov     eax, large fs:0
.text:0000363C                 push    eax
.text:0000363D                 push    ecx
.text:0000363E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003645                 mov     eax, dword ptr ds:___security_cookie
.text:0000364A                 xor     eax, ebp
.text:0000364C                 push    eax
.text:0000364D                 lea     eax, [ebp+var_C]
.text:00003650                 mov     large fs:0, eax
.text:00003656                 mov     [ebp+var_10], ecx
.text:00003659                 mov     [ebp+var_4], 0
.text:00003660                 mov     ecx, [ebp+var_10]
.text:00003663                 add     ecx, 0Ch
.text:00003666                 call    ??1?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::~CRecordVector<uint>(void)
.text:0000366B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003672                 mov     ecx, [ebp+var_10]
.text:00003675                 call    ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text:0000367A                 mov     ecx, [ebp+var_C]
.text:0000367D                 mov     large fs:0, ecx
.text:00003684                 pop     ecx
.text:00003685                 add     esp, 10h
.text:00003688                 cmp     ebp, esp
.text:0000368A                 call    __RTC_CheckEsp
.text:0000368F                 mov     esp, ebp
.text:00003691                 pop     ebp
.text:00003692                 retn
.text:00003692 ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00003692
.text:00003692 ; ---------------------------------------------------------------------------
.text:00003693                 align 4
.text:00003693 _text           ends
.text:00003693
.text$x:00003694 ; ===========================================================================
.text$x:00003694
.text$x:00003694 ; Segment type: Pure code
.text$x:00003694 ; Segment permissions: Read/Execute
.text$x:00003694 _text$x         segment para public 'CODE' use32
.text$x:00003694                 assume cs:_text$x
.text$x:00003694                 ;org 3694h
.text$x:00003694 ; COMDAT (pick associative to section at 362C)
.text$x:00003694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003694
.text$x:00003694 ; =============== S U B R O U T I N E =======================================
.text$x:00003694
.text$x:00003694
.text$x:00003694 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003694                                         ; DATA XREF: .xdata$x:000036BCo
.text$x:00003694                 mov     ecx, [ebp-10h]
.text$x:00003697                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003697 __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003697
.text$x:0000369C
.text$x:0000369C ; =============== S U B R O U T I N E =======================================
.text$x:0000369C
.text$x:0000369C
.text$x:0000369C __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:0000369C                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+5o
.text$x:0000369C
.text$x:0000369C arg_4           = dword ptr  8
.text$x:0000369C
.text$x:0000369C                 mov     edx, [esp+arg_4]
.text$x:000036A0                 lea     eax, [edx+0Ch]
.text$x:000036A3                 mov     ecx, [edx-8]
.text$x:000036A6                 xor     ecx, eax
.text$x:000036A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000036AD                 mov     eax, offset __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:000036B2                 jmp     ___CxxFrameHandler3
.text$x:000036B2 __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:000036B2
.text$x:000036B2 ; ---------------------------------------------------------------------------
.text$x:000036B7                 align 4
.text$x:000036B7 _text$x         ends
.text$x:000036B7
.xdata$x:000036B8 ; ===========================================================================
.xdata$x:000036B8
.xdata$x:000036B8 ; Segment type: Pure data
.xdata$x:000036B8 ; Segment permissions: Read
.xdata$x:000036B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000036B8                 assume cs:_xdata$x
.xdata$x:000036B8                 ;org 36B8h
.xdata$x:000036B8 ; COMDAT (pick associative to section at 362C)
.xdata$x:000036B8 __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:000036B8                                         ; DATA XREF: .xdata$x:000036C8o
.xdata$x:000036B9                 db 0FFh
.xdata$x:000036BA                 db 0FFh
.xdata$x:000036BB                 db 0FFh
.xdata$x:000036BC                 dd offset __unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:000036C0 __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000036C0                                         ; DATA XREF: __ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:000036C1                 db    5
.xdata$x:000036C2                 db  93h ; ô
.xdata$x:000036C3                 db  19h
.xdata$x:000036C4                 db    1
.xdata$x:000036C5                 db    0
.xdata$x:000036C6                 db    0
.xdata$x:000036C7                 db    0
.xdata$x:000036C8                 dd offset __unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:000036CC                 align 20h
.xdata$x:000036E0                 db    1
.xdata$x:000036E1                 db    0
.xdata$x:000036E2                 db    0
.xdata$x:000036E3                 db    0
.xdata$x:000036E3 _xdata$x        ends
.xdata$x:000036E3
.text:000036E4 ; ===========================================================================
.text:000036E4
.text:000036E4 ; Segment type: Pure code
.text:000036E4 ; Segment permissions: Read/Execute
.text:000036E4 _text           segment para public 'CODE' use32
.text:000036E4                 assume cs:_text
.text:000036E4                 ;org 36E4h
.text:000036E4 ; COMDAT (pick any)
.text:000036E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000036E4
.text:000036E4 ; =============== S U B R O U T I N E =======================================
.text:000036E4
.text:000036E4 ; Attributes: bp-based frame
.text:000036E4
.text:000036E4 ; _DWORD __thiscall NArchive::N7z::CParsedMethods::~CParsedMethods(NArchive::N7z::CParsedMethods *__hidden this)
.text:000036E4                 public ??1CParsedMethods@N7z@NArchive@@QAE@XZ
.text:000036E4 ??1CParsedMethods@N7z@NArchive@@QAE@XZ proc near
.text:000036E4                                         ; CODE XREF: NArchive::N7z::CFolders::~CFolders(void)+3Ap
.text:000036E4
.text:000036E4 var_4           = dword ptr -4
.text:000036E4
.text:000036E4                 push    ebp
.text:000036E5                 mov     ebp, esp
.text:000036E7                 push    ecx
.text:000036E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000036EF                 mov     [ebp+var_4], ecx
.text:000036F2                 mov     ecx, [ebp+var_4]
.text:000036F5                 add     ecx, 8
.text:000036F8                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000036FD                 add     esp, 4
.text:00003700                 cmp     ebp, esp
.text:00003702                 call    __RTC_CheckEsp
.text:00003707                 mov     esp, ebp
.text:00003709                 pop     ebp
.text:0000370A                 retn
.text:0000370A ??1CParsedMethods@N7z@NArchive@@QAE@XZ endp
.text:0000370A
.text:0000370A ; ---------------------------------------------------------------------------
.text:0000370B                 align 4
.text:0000370B _text           ends
.text:0000370B
.text:0000370C ; ===========================================================================
.text:0000370C
.text:0000370C ; Segment type: Pure code
.text:0000370C ; Segment permissions: Read/Execute
.text:0000370C _text           segment para public 'CODE' use32
.text:0000370C                 assume cs:_text
.text:0000370C                 ;org 370Ch
.text:0000370C ; COMDAT (pick any)
.text:0000370C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000370C
.text:0000370C ; =============== S U B R O U T I N E =======================================
.text:0000370C
.text:0000370C ; Attributes: bp-based frame
.text:0000370C
.text:0000370C ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:0000370C                 public ??0IInArchive@@QAE@XZ
.text:0000370C ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+30p
.text:0000370C
.text:0000370C var_4           = dword ptr -4
.text:0000370C
.text:0000370C                 push    ebp
.text:0000370D                 mov     ebp, esp
.text:0000370F                 push    ecx
.text:00003710                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003717                 mov     [ebp+var_4], ecx
.text:0000371A                 mov     ecx, [ebp+var_4]
.text:0000371D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003722                 mov     eax, [ebp+var_4]
.text:00003725                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:0000372B                 mov     eax, [ebp+var_4]
.text:0000372E                 add     esp, 4
.text:00003731                 cmp     ebp, esp
.text:00003733                 call    __RTC_CheckEsp
.text:00003738                 mov     esp, ebp
.text:0000373A                 pop     ebp
.text:0000373B                 retn
.text:0000373B ??0IInArchive@@QAE@XZ endp
.text:0000373B
.text:0000373B _text           ends
.text:0000373B
.rdata:0000373C ; ===========================================================================
.rdata:0000373C
.rdata:0000373C ; Segment type: Pure data
.rdata:0000373C ; Segment permissions: Read
.rdata:0000373C _rdata          segment dword public 'DATA' use32
.rdata:0000373C                 assume cs:_rdata
.rdata:0000373C                 ;org 373Ch
.rdata:0000373C ; COMDAT (pick largest)
.rdata:0000373C                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00003740                 public ??_7IInArchive@@6B@
.rdata:00003740 ; const IInArchive::`vftable'
.rdata:00003740 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00003740                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00003744                 dd offset __purecall
.rdata:00003748                 dd offset __purecall
.rdata:0000374C                 dd offset __purecall
.rdata:00003750                 dd offset __purecall
.rdata:00003754                 dd offset __purecall
.rdata:00003758                 dd offset __purecall
.rdata:0000375C                 dd offset __purecall
.rdata:00003760                 dd offset __purecall
.rdata:00003764                 dd offset __purecall
.rdata:00003768                 dd offset __purecall
.rdata:0000376C                 dd offset __purecall
.rdata:00003770                 dd offset __purecall
.rdata:00003770 _rdata          ends
.rdata:00003770
.rdata$r:00003774 ; ===========================================================================
.rdata$r:00003774
.rdata$r:00003774 ; Segment type: Pure data
.rdata$r:00003774 ; Segment permissions: Read
.rdata$r:00003774 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003774                 assume cs:_rdata$r
.rdata$r:00003774                 ;org 3774h
.rdata$r:00003774 ; COMDAT (pick any)
.rdata$r:00003774                 public ??_R4IInArchive@@6B@
.rdata$r:00003774 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:00003774 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:0000373Co
.rdata$r:00003775                 db    0
.rdata$r:00003776                 db    0
.rdata$r:00003777                 db    0
.rdata$r:00003778                 db    0
.rdata$r:00003779                 db    0
.rdata$r:0000377A                 db    0
.rdata$r:0000377B                 db    0
.rdata$r:0000377C                 db    0
.rdata$r:0000377D                 db    0
.rdata$r:0000377E                 db    0
.rdata$r:0000377F                 db    0
.rdata$r:00003780                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:00003784                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003784 _rdata$r        ends
.rdata$r:00003784
.text:00003788 ; ===========================================================================
.text:00003788
.text:00003788 ; Segment type: Pure code
.text:00003788 ; Segment permissions: Read/Execute
.text:00003788 _text           segment para public 'CODE' use32
.text:00003788                 assume cs:_text
.text:00003788                 ;org 3788h
.text:00003788 ; COMDAT (pick any)
.text:00003788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003788
.text:00003788 ; =============== S U B R O U T I N E =======================================
.text:00003788
.text:00003788 ; Attributes: bp-based frame
.text:00003788
.text:00003788 ; _DWORD __thiscall IArchiveGetRawProps::IArchiveGetRawProps(IArchiveGetRawProps *__hidden this)
.text:00003788                 public ??0IArchiveGetRawProps@@QAE@XZ
.text:00003788 ??0IArchiveGetRawProps@@QAE@XZ proc near
.text:00003788                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+3Bp
.text:00003788
.text:00003788 var_4           = dword ptr -4
.text:00003788
.text:00003788                 push    ebp
.text:00003789                 mov     ebp, esp
.text:0000378B                 push    ecx
.text:0000378C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003793                 mov     [ebp+var_4], ecx
.text:00003796                 mov     ecx, [ebp+var_4]
.text:00003799                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000379E                 mov     eax, [ebp+var_4]
.text:000037A1                 mov     dword ptr [eax], offset ??_7IArchiveGetRawProps@@6B@ ; const IArchiveGetRawProps::`vftable'
.text:000037A7                 mov     eax, [ebp+var_4]
.text:000037AA                 add     esp, 4
.text:000037AD                 cmp     ebp, esp
.text:000037AF                 call    __RTC_CheckEsp
.text:000037B4                 mov     esp, ebp
.text:000037B6                 pop     ebp
.text:000037B7                 retn
.text:000037B7 ??0IArchiveGetRawProps@@QAE@XZ endp
.text:000037B7
.text:000037B7 _text           ends
.text:000037B7
.rdata:000037B8 ; ===========================================================================
.rdata:000037B8
.rdata:000037B8 ; Segment type: Pure data
.rdata:000037B8 ; Segment permissions: Read
.rdata:000037B8 _rdata          segment dword public 'DATA' use32
.rdata:000037B8                 assume cs:_rdata
.rdata:000037B8                 ;org 37B8h
.rdata:000037B8 ; COMDAT (pick largest)
.rdata:000037B8                 dd offset ??_R4IArchiveGetRawProps@@6B@ ; const IArchiveGetRawProps::`RTTI Complete Object Locator'
.rdata:000037BC                 public ??_7IArchiveGetRawProps@@6B@
.rdata:000037BC ; const IArchiveGetRawProps::`vftable'
.rdata:000037BC ??_7IArchiveGetRawProps@@6B@ dd offset __purecall
.rdata:000037BC                                         ; DATA XREF: IArchiveGetRawProps::IArchiveGetRawProps(void)+19o
.rdata:000037C0                 dd offset __purecall
.rdata:000037C4                 dd offset __purecall
.rdata:000037C8                 dd offset __purecall
.rdata:000037CC                 dd offset __purecall
.rdata:000037D0                 dd offset __purecall
.rdata:000037D4                 dd offset __purecall
.rdata:000037D4 _rdata          ends
.rdata:000037D4
.rdata$r:000037D8 ; ===========================================================================
.rdata$r:000037D8
.rdata$r:000037D8 ; Segment type: Pure data
.rdata$r:000037D8 ; Segment permissions: Read
.rdata$r:000037D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037D8                 assume cs:_rdata$r
.rdata$r:000037D8                 ;org 37D8h
.rdata$r:000037D8 ; COMDAT (pick any)
.rdata$r:000037D8                 public ??_R4IArchiveGetRawProps@@6B@
.rdata$r:000037D8 ; const IArchiveGetRawProps::`RTTI Complete Object Locator'
.rdata$r:000037D8 ??_R4IArchiveGetRawProps@@6B@ db    0   ; DATA XREF: .rdata:000037B8o
.rdata$r:000037D9                 db    0
.rdata$r:000037DA                 db    0
.rdata$r:000037DB                 db    0
.rdata$r:000037DC                 db    0
.rdata$r:000037DD                 db    0
.rdata$r:000037DE                 db    0
.rdata$r:000037DF                 db    0
.rdata$r:000037E0                 db    0
.rdata$r:000037E1                 db    0
.rdata$r:000037E2                 db    0
.rdata$r:000037E3                 db    0
.rdata$r:000037E4                 dd offset ??_R0?AUIArchiveGetRawProps@@@8 ; IArchiveGetRawProps `RTTI Type Descriptor'
.rdata$r:000037E8                 dd offset ??_R3IArchiveGetRawProps@@8 ; IArchiveGetRawProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037E8 _rdata$r        ends
.rdata$r:000037E8
.text:000037EC ; ===========================================================================
.text:000037EC
.text:000037EC ; Segment type: Pure code
.text:000037EC ; Segment permissions: Read/Execute
.text:000037EC _text           segment para public 'CODE' use32
.text:000037EC                 assume cs:_text
.text:000037EC                 ;org 37ECh
.text:000037EC ; COMDAT (pick any)
.text:000037EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000037EC
.text:000037EC ; =============== S U B R O U T I N E =======================================
.text:000037EC
.text:000037EC ; Attributes: bp-based frame
.text:000037EC
.text:000037EC ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:000037EC                 public ??0ISetProperties@@QAE@XZ
.text:000037EC ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+46p
.text:000037EC
.text:000037EC var_4           = dword ptr -4
.text:000037EC
.text:000037EC                 push    ebp
.text:000037ED                 mov     ebp, esp
.text:000037EF                 push    ecx
.text:000037F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037F7                 mov     [ebp+var_4], ecx
.text:000037FA                 mov     ecx, [ebp+var_4]
.text:000037FD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003802                 mov     eax, [ebp+var_4]
.text:00003805                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:0000380B                 mov     eax, [ebp+var_4]
.text:0000380E                 add     esp, 4
.text:00003811                 cmp     ebp, esp
.text:00003813                 call    __RTC_CheckEsp
.text:00003818                 mov     esp, ebp
.text:0000381A                 pop     ebp
.text:0000381B                 retn
.text:0000381B ??0ISetProperties@@QAE@XZ endp
.text:0000381B
.text:0000381B _text           ends
.text:0000381B
.rdata:0000381C ; ===========================================================================
.rdata:0000381C
.rdata:0000381C ; Segment type: Pure data
.rdata:0000381C ; Segment permissions: Read
.rdata:0000381C _rdata          segment dword public 'DATA' use32
.rdata:0000381C                 assume cs:_rdata
.rdata:0000381C                 ;org 381Ch
.rdata:0000381C ; COMDAT (pick largest)
.rdata:0000381C                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:00003820                 public ??_7ISetProperties@@6B@
.rdata:00003820 ; const ISetProperties::`vftable'
.rdata:00003820 ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:00003820                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:00003824                 dd offset __purecall
.rdata:00003828                 dd offset __purecall
.rdata:0000382C                 dd offset __purecall
.rdata:0000382C _rdata          ends
.rdata:0000382C
.rdata$r:00003830 ; ===========================================================================
.rdata$r:00003830
.rdata$r:00003830 ; Segment type: Pure data
.rdata$r:00003830 ; Segment permissions: Read
.rdata$r:00003830 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003830                 assume cs:_rdata$r
.rdata$r:00003830                 ;org 3830h
.rdata$r:00003830 ; COMDAT (pick any)
.rdata$r:00003830                 public ??_R4ISetProperties@@6B@
.rdata$r:00003830 ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:00003830 ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:0000381Co
.rdata$r:00003831                 db    0
.rdata$r:00003832                 db    0
.rdata$r:00003833                 db    0
.rdata$r:00003834                 db    0
.rdata$r:00003835                 db    0
.rdata$r:00003836                 db    0
.rdata$r:00003837                 db    0
.rdata$r:00003838                 db    0
.rdata$r:00003839                 db    0
.rdata$r:0000383A                 db    0
.rdata$r:0000383B                 db    0
.rdata$r:0000383C                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00003840                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003840 _rdata$r        ends
.rdata$r:00003840
.text:00003844 ; ===========================================================================
.text:00003844
.text:00003844 ; Segment type: Pure code
.text:00003844 ; Segment permissions: Read/Execute
.text:00003844 _text           segment para public 'CODE' use32
.text:00003844                 assume cs:_text
.text:00003844                 ;org 3844h
.text:00003844 ; COMDAT (pick any)
.text:00003844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003844
.text:00003844 ; =============== S U B R O U T I N E =======================================
.text:00003844
.text:00003844 ; Attributes: bp-based frame
.text:00003844
.text:00003844 ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:00003844                 public ??0IOutArchive@@QAE@XZ
.text:00003844 ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+51p
.text:00003844
.text:00003844 var_4           = dword ptr -4
.text:00003844
.text:00003844                 push    ebp
.text:00003845                 mov     ebp, esp
.text:00003847                 push    ecx
.text:00003848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000384F                 mov     [ebp+var_4], ecx
.text:00003852                 mov     ecx, [ebp+var_4]
.text:00003855                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000385A                 mov     eax, [ebp+var_4]
.text:0000385D                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:00003863                 mov     eax, [ebp+var_4]
.text:00003866                 add     esp, 4
.text:00003869                 cmp     ebp, esp
.text:0000386B                 call    __RTC_CheckEsp
.text:00003870                 mov     esp, ebp
.text:00003872                 pop     ebp
.text:00003873                 retn
.text:00003873 ??0IOutArchive@@QAE@XZ endp
.text:00003873
.text:00003873 _text           ends
.text:00003873
.rdata:00003874 ; ===========================================================================
.rdata:00003874
.rdata:00003874 ; Segment type: Pure data
.rdata:00003874 ; Segment permissions: Read
.rdata:00003874 _rdata          segment dword public 'DATA' use32
.rdata:00003874                 assume cs:_rdata
.rdata:00003874                 ;org 3874h
.rdata:00003874 ; COMDAT (pick largest)
.rdata:00003874                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:00003878                 public ??_7IOutArchive@@6B@
.rdata:00003878 ; const IOutArchive::`vftable'
.rdata:00003878 ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:00003878                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:0000387C                 dd offset __purecall
.rdata:00003880                 dd offset __purecall
.rdata:00003884                 dd offset __purecall
.rdata:00003888                 dd offset __purecall
.rdata:00003888 _rdata          ends
.rdata:00003888
.rdata$r:0000388C ; ===========================================================================
.rdata$r:0000388C
.rdata$r:0000388C ; Segment type: Pure data
.rdata$r:0000388C ; Segment permissions: Read
.rdata$r:0000388C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000388C                 assume cs:_rdata$r
.rdata$r:0000388C                 ;org 388Ch
.rdata$r:0000388C ; COMDAT (pick any)
.rdata$r:0000388C                 public ??_R4IOutArchive@@6B@
.rdata$r:0000388C ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:0000388C ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:00003874o
.rdata$r:0000388D                 db    0
.rdata$r:0000388E                 db    0
.rdata$r:0000388F                 db    0
.rdata$r:00003890                 db    0
.rdata$r:00003891                 db    0
.rdata$r:00003892                 db    0
.rdata$r:00003893                 db    0
.rdata$r:00003894                 db    0
.rdata$r:00003895                 db    0
.rdata$r:00003896                 db    0
.rdata$r:00003897                 db    0
.rdata$r:00003898                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:0000389C                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000389C _rdata$r        ends
.rdata$r:0000389C
.text:000038A0 ; ===========================================================================
.text:000038A0
.text:000038A0 ; Segment type: Pure code
.text:000038A0 ; Segment permissions: Read/Execute
.text:000038A0 _text           segment para public 'CODE' use32
.text:000038A0                 assume cs:_text
.text:000038A0                 ;org 38A0h
.text:000038A0 ; COMDAT (pick any)
.text:000038A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000038A0
.text:000038A0 ; =============== S U B R O U T I N E =======================================
.text:000038A0
.text:000038A0 ; Attributes: bp-based frame
.text:000038A0
.text:000038A0 ; _DWORD __thiscall NArchive::N7z::CDbEx::CDbEx(NArchive::N7z::CDbEx *__hidden this)
.text:000038A0                 public ??0CDbEx@N7z@NArchive@@QAE@XZ
.text:000038A0 ??0CDbEx@N7z@NArchive@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+B5p
.text:000038A0
.text:000038A0 var_10          = dword ptr -10h
.text:000038A0 var_C           = dword ptr -0Ch
.text:000038A0 var_4           = dword ptr -4
.text:000038A0
.text:000038A0                 push    ebp
.text:000038A1                 mov     ebp, esp
.text:000038A3                 push    0FFFFFFFFh
.text:000038A5                 push    offset __ehhandler$??0CDbEx@N7z@NArchive@@QAE@XZ
.text:000038AA                 mov     eax, large fs:0
.text:000038B0                 push    eax
.text:000038B1                 push    ecx
.text:000038B2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000038B9                 mov     eax, dword ptr ds:___security_cookie
.text:000038BE                 xor     eax, ebp
.text:000038C0                 push    eax
.text:000038C1                 lea     eax, [ebp+var_C]
.text:000038C4                 mov     large fs:0, eax
.text:000038CA                 mov     [ebp+var_10], ecx
.text:000038CD                 mov     ecx, [ebp+var_10] ; this
.text:000038D0                 call    ??0CDatabase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDatabase::CDatabase(void)
.text:000038D5                 mov     [ebp+var_4], 0
.text:000038DC                 mov     ecx, [ebp+var_10]
.text:000038DF                 add     ecx, 0E0h ; 'a' ; this
.text:000038E5                 call    ??0CInArchiveInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchiveInfo::CInArchiveInfo(void)
.text:000038EA                 mov     byte ptr [ebp+var_4], 1
.text:000038EE                 mov     ecx, [ebp+var_10]
.text:000038F1                 add     ecx, 118h
.text:000038F7                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:000038FC                 mov     byte ptr [ebp+var_4], 2
.text:00003900                 mov     ecx, [ebp+var_10]
.text:00003903                 add     ecx, 11Ch
.text:00003909                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:0000390E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003915                 mov     eax, [ebp+var_10]
.text:00003918                 mov     ecx, [ebp+var_C]
.text:0000391B                 mov     large fs:0, ecx
.text:00003922                 pop     ecx
.text:00003923                 add     esp, 10h
.text:00003926                 cmp     ebp, esp
.text:00003928                 call    __RTC_CheckEsp
.text:0000392D                 mov     esp, ebp
.text:0000392F                 pop     ebp
.text:00003930                 retn
.text:00003930 ??0CDbEx@N7z@NArchive@@QAE@XZ endp
.text:00003930
.text:00003930 ; ---------------------------------------------------------------------------
.text:00003931                 align 4
.text:00003931 _text           ends
.text:00003931
.text$x:00003934 ; ===========================================================================
.text$x:00003934
.text$x:00003934 ; Segment type: Pure code
.text$x:00003934 ; Segment permissions: Read/Execute
.text$x:00003934 _text$x         segment para public 'CODE' use32
.text$x:00003934                 assume cs:_text$x
.text$x:00003934                 ;org 3934h
.text$x:00003934 ; COMDAT (pick associative to section at 38A0)
.text$x:00003934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003934
.text$x:00003934 ; =============== S U B R O U T I N E =======================================
.text$x:00003934
.text$x:00003934
.text$x:00003934 __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003934                                         ; DATA XREF: .xdata$x:00003978o
.text$x:00003934                 mov     ecx, [ebp-10h]  ; this
.text$x:00003937                 jmp     ??1CDatabase@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CDatabase::~CDatabase(void)
.text$x:00003937 __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003937
.text$x:0000393C
.text$x:0000393C ; =============== S U B R O U T I N E =======================================
.text$x:0000393C
.text$x:0000393C
.text$x:0000393C __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:0000393C                                         ; DATA XREF: .xdata$x:00003980o
.text$x:0000393C                 mov     ecx, [ebp-10h]
.text$x:0000393F                 add     ecx, 0E0h ; 'a' ; this
.text$x:00003945                 jmp     ??1CInArchiveInfo@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CInArchiveInfo::~CInArchiveInfo(void)
.text$x:00003945 __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003945
.text$x:0000394A
.text$x:0000394A ; =============== S U B R O U T I N E =======================================
.text$x:0000394A
.text$x:0000394A
.text$x:0000394A __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:0000394A                                         ; DATA XREF: .xdata$x:00003988o
.text$x:0000394A                 mov     ecx, [ebp-10h]
.text$x:0000394D                 add     ecx, 118h
.text$x:00003953                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00003953 __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00003953
.text$x:00003958
.text$x:00003958 ; =============== S U B R O U T I N E =======================================
.text$x:00003958
.text$x:00003958
.text$x:00003958 __ehhandler$??0CDbEx@N7z@NArchive@@QAE@XZ proc near
.text$x:00003958                                         ; DATA XREF: NArchive::N7z::CDbEx::CDbEx(void)+5o
.text$x:00003958
.text$x:00003958 arg_4           = dword ptr  8
.text$x:00003958
.text$x:00003958                 mov     edx, [esp+arg_4]
.text$x:0000395C                 lea     eax, [edx+0Ch]
.text$x:0000395F                 mov     ecx, [edx-8]
.text$x:00003962                 xor     ecx, eax
.text$x:00003964                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003969                 mov     eax, offset __ehfuncinfo$??0CDbEx@N7z@NArchive@@QAE@XZ
.text$x:0000396E                 jmp     ___CxxFrameHandler3
.text$x:0000396E __ehhandler$??0CDbEx@N7z@NArchive@@QAE@XZ endp
.text$x:0000396E
.text$x:0000396E ; ---------------------------------------------------------------------------
.text$x:00003973                 align 4
.text$x:00003973 _text$x         ends
.text$x:00003973
.xdata$x:00003974 ; ===========================================================================
.xdata$x:00003974
.xdata$x:00003974 ; Segment type: Pure data
.xdata$x:00003974 ; Segment permissions: Read
.xdata$x:00003974 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003974                 assume cs:_xdata$x
.xdata$x:00003974                 ;org 3974h
.xdata$x:00003974 ; COMDAT (pick associative to section at 38A0)
.xdata$x:00003974 __unwindtable$??0CDbEx@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003974                                         ; DATA XREF: .xdata$x:00003994o
.xdata$x:00003975                 db 0FFh
.xdata$x:00003976                 db 0FFh
.xdata$x:00003977                 db 0FFh
.xdata$x:00003978                 dd offset __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$0
.xdata$x:0000397C                 align 10h
.xdata$x:00003980                 dd offset __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003984                 db    1
.xdata$x:00003985                 db    0
.xdata$x:00003986                 db    0
.xdata$x:00003987                 db    0
.xdata$x:00003988                 dd offset __unwindfunclet$??0CDbEx@N7z@NArchive@@QAE@XZ$2
.xdata$x:0000398C __ehfuncinfo$??0CDbEx@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:0000398C                                         ; DATA XREF: __ehhandler$??0CDbEx@N7z@NArchive@@QAE@XZ+11o
.xdata$x:0000398D                 db    5
.xdata$x:0000398E                 db  93h ; ô
.xdata$x:0000398F                 db  19h
.xdata$x:00003990                 db    3
.xdata$x:00003991                 db    0
.xdata$x:00003992                 db    0
.xdata$x:00003993                 db    0
.xdata$x:00003994                 dd offset __unwindtable$??0CDbEx@N7z@NArchive@@QAE@XZ
.xdata$x:00003998                 db    0
.xdata$x:00003999                 db    0
.xdata$x:0000399A                 db    0
.xdata$x:0000399B                 db    0
.xdata$x:0000399C                 db    0
.xdata$x:0000399D                 db    0
.xdata$x:0000399E                 db    0
.xdata$x:0000399F                 db    0
.xdata$x:000039A0                 db    0
.xdata$x:000039A1                 db    0
.xdata$x:000039A2                 db    0
.xdata$x:000039A3                 db    0
.xdata$x:000039A4                 db    0
.xdata$x:000039A5                 db    0
.xdata$x:000039A6                 db    0
.xdata$x:000039A7                 db    0
.xdata$x:000039A8                 db    0
.xdata$x:000039A9                 db    0
.xdata$x:000039AA                 db    0
.xdata$x:000039AB                 db    0
.xdata$x:000039AC                 db    1
.xdata$x:000039AD                 db    0
.xdata$x:000039AE                 db    0
.xdata$x:000039AF                 db    0
.xdata$x:000039AF _xdata$x        ends
.xdata$x:000039AF
.text:000039B0 ; ===========================================================================
.text:000039B0
.text:000039B0 ; Segment type: Pure code
.text:000039B0 ; Segment permissions: Read/Execute
.text:000039B0 _text           segment para public 'CODE' use32
.text:000039B0                 assume cs:_text
.text:000039B0                 ;org 39B0h
.text:000039B0 ; COMDAT (pick any)
.text:000039B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039B0
.text:000039B0 ; =============== S U B R O U T I N E =======================================
.text:000039B0
.text:000039B0 ; Attributes: bp-based frame
.text:000039B0
.text:000039B0 ; public: __thiscall IUnknown::IUnknown(void)
.text:000039B0                 public ??0IUnknown@@QAE@XZ
.text:000039B0 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IInArchive::IInArchive(void)+11p
.text:000039B0                                         ; IArchiveGetRawProps::IArchiveGetRawProps(void)+11p ...
.text:000039B0
.text:000039B0 var_4           = dword ptr -4
.text:000039B0
.text:000039B0                 push    ebp
.text:000039B1                 mov     ebp, esp
.text:000039B3                 push    ecx
.text:000039B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039BB                 mov     [ebp+var_4], ecx
.text:000039BE                 mov     eax, [ebp+var_4]
.text:000039C1                 mov     esp, ebp
.text:000039C3                 pop     ebp
.text:000039C4                 retn
.text:000039C4 ??0IUnknown@@QAE@XZ endp
.text:000039C4
.text:000039C4 ; ---------------------------------------------------------------------------
.text:000039C5                 align 4
.text:000039C5 _text           ends
.text:000039C5
.text:000039C8 ; ===========================================================================
.text:000039C8
.text:000039C8 ; Segment type: Pure code
.text:000039C8 ; Segment permissions: Read/Execute
.text:000039C8 _text           segment para public 'CODE' use32
.text:000039C8                 assume cs:_text
.text:000039C8                 ;org 39C8h
.text:000039C8 ; COMDAT (pick any)
.text:000039C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000039C8
.text:000039C8 ; =============== S U B R O U T I N E =======================================
.text:000039C8
.text:000039C8 ; Attributes: bp-based frame
.text:000039C8
.text:000039C8 ; _DWORD __thiscall NArchive::N7z::CDatabase::CDatabase(NArchive::N7z::CDatabase *__hidden this)
.text:000039C8                 public ??0CDatabase@N7z@NArchive@@QAE@XZ
.text:000039C8 ??0CDatabase@N7z@NArchive@@QAE@XZ proc near
.text:000039C8                                         ; CODE XREF: NArchive::N7z::CDbEx::CDbEx(void)+30p
.text:000039C8
.text:000039C8 var_10          = dword ptr -10h
.text:000039C8 var_C           = dword ptr -0Ch
.text:000039C8 var_4           = dword ptr -4
.text:000039C8
.text:000039C8                 push    ebp
.text:000039C9                 mov     ebp, esp
.text:000039CB                 push    0FFFFFFFFh
.text:000039CD                 push    offset __ehhandler$??0CDatabase@N7z@NArchive@@QAE@XZ
.text:000039D2                 mov     eax, large fs:0
.text:000039D8                 push    eax
.text:000039D9                 push    ecx
.text:000039DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000039E1                 mov     eax, dword ptr ds:___security_cookie
.text:000039E6                 xor     eax, ebp
.text:000039E8                 push    eax
.text:000039E9                 lea     eax, [ebp+var_C]
.text:000039EC                 mov     large fs:0, eax
.text:000039F2                 mov     [ebp+var_10], ecx
.text:000039F5                 mov     ecx, [ebp+var_10] ; this
.text:000039F8                 call    ??0CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::CFolders(void)
.text:000039FD                 mov     [ebp+var_4], 0
.text:00003A04                 mov     ecx, [ebp+var_10]
.text:00003A07                 add     ecx, 58h ; 'X'
.text:00003A0A                 call    ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>(void)
.text:00003A0F                 mov     byte ptr [ebp+var_4], 1
.text:00003A13                 mov     ecx, [ebp+var_10]
.text:00003A16                 add     ecx, 64h ; 'd'  ; this
.text:00003A19                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:00003A1E                 mov     byte ptr [ebp+var_4], 2
.text:00003A22                 mov     ecx, [ebp+var_10]
.text:00003A25                 add     ecx, 7Ch ; '|'  ; this
.text:00003A28                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:00003A2D                 mov     byte ptr [ebp+var_4], 3
.text:00003A31                 mov     ecx, [ebp+var_10]
.text:00003A34                 add     ecx, 94h ; 'ö'  ; this
.text:00003A3A                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:00003A3F                 mov     byte ptr [ebp+var_4], 4
.text:00003A43                 mov     ecx, [ebp+var_10]
.text:00003A46                 add     ecx, 0ACh ; '¼' ; this
.text:00003A4C                 call    ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)
.text:00003A51                 mov     byte ptr [ebp+var_4], 5
.text:00003A55                 mov     ecx, [ebp+var_10]
.text:00003A58                 add     ecx, 0C4h ; '-'
.text:00003A5E                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00003A63                 mov     byte ptr [ebp+var_4], 6
.text:00003A67                 mov     ecx, [ebp+var_10]
.text:00003A6A                 add     ecx, 0D0h ; '-'
.text:00003A70                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00003A75                 mov     byte ptr [ebp+var_4], 7
.text:00003A79                 mov     ecx, [ebp+var_10]
.text:00003A7C                 add     ecx, 0D8h ; '+'
.text:00003A82                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00003A87                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003A8E                 mov     eax, [ebp+var_10]
.text:00003A91                 mov     ecx, [ebp+var_C]
.text:00003A94                 mov     large fs:0, ecx
.text:00003A9B                 pop     ecx
.text:00003A9C                 add     esp, 10h
.text:00003A9F                 cmp     ebp, esp
.text:00003AA1                 call    __RTC_CheckEsp
.text:00003AA6                 mov     esp, ebp
.text:00003AA8                 pop     ebp
.text:00003AA9                 retn
.text:00003AA9 ??0CDatabase@N7z@NArchive@@QAE@XZ endp
.text:00003AA9
.text:00003AA9 ; ---------------------------------------------------------------------------
.text:00003AAA                 align 4
.text:00003AAA _text           ends
.text:00003AAA
.text$x:00003AAC ; ===========================================================================
.text$x:00003AAC
.text$x:00003AAC ; Segment type: Pure code
.text$x:00003AAC ; Segment permissions: Read/Execute
.text$x:00003AAC _text$x         segment para public 'CODE' use32
.text$x:00003AAC                 assume cs:_text$x
.text$x:00003AAC                 ;org 3AACh
.text$x:00003AAC ; COMDAT (pick associative to section at 39C8)
.text$x:00003AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003AAC
.text$x:00003AAC ; =============== S U B R O U T I N E =======================================
.text$x:00003AAC
.text$x:00003AAC
.text$x:00003AAC __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003AAC                                         ; DATA XREF: .xdata$x:00003B50o
.text$x:00003AAC                 mov     ecx, [ebp-10h]  ; this
.text$x:00003AAF                 jmp     ??1CFolders@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolders::~CFolders(void)
.text$x:00003AAF __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003AAF
.text$x:00003AB4
.text$x:00003AB4 ; =============== S U B R O U T I N E =======================================
.text$x:00003AB4
.text$x:00003AB4
.text$x:00003AB4 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003AB4                                         ; DATA XREF: .xdata$x:00003B58o
.text$x:00003AB4                 mov     ecx, [ebp-10h]
.text$x:00003AB7                 add     ecx, 58h ; 'X'
.text$x:00003ABA                 jmp     ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>(void)
.text$x:00003ABA __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003ABA
.text$x:00003ABF
.text$x:00003ABF ; =============== S U B R O U T I N E =======================================
.text$x:00003ABF
.text$x:00003ABF
.text$x:00003ABF __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00003ABF                                         ; DATA XREF: .xdata$x:00003B60o
.text$x:00003ABF                 mov     ecx, [ebp-10h]
.text$x:00003AC2                 add     ecx, 64h ; 'd'  ; this
.text$x:00003AC5                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00003AC5 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00003AC5
.text$x:00003ACA
.text$x:00003ACA ; =============== S U B R O U T I N E =======================================
.text$x:00003ACA
.text$x:00003ACA
.text$x:00003ACA __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00003ACA                                         ; DATA XREF: .xdata$x:00003B68o
.text$x:00003ACA                 mov     ecx, [ebp-10h]
.text$x:00003ACD                 add     ecx, 7Ch ; '|'  ; this
.text$x:00003AD0                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00003AD0 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00003AD0
.text$x:00003AD5
.text$x:00003AD5 ; =============== S U B R O U T I N E =======================================
.text$x:00003AD5
.text$x:00003AD5
.text$x:00003AD5 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00003AD5                                         ; DATA XREF: .xdata$x:00003B70o
.text$x:00003AD5                 mov     ecx, [ebp-10h]
.text$x:00003AD8                 add     ecx, 94h ; 'ö'  ; this
.text$x:00003ADE                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00003ADE __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00003ADE
.text$x:00003AE3
.text$x:00003AE3 ; =============== S U B R O U T I N E =======================================
.text$x:00003AE3
.text$x:00003AE3
.text$x:00003AE3 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:00003AE3                                         ; DATA XREF: .xdata$x:00003B78o
.text$x:00003AE3                 mov     ecx, [ebp-10h]
.text$x:00003AE6                 add     ecx, 0ACh ; '¼' ; this
.text$x:00003AEC                 jmp     ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector(void)
.text$x:00003AEC __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$5 endp
.text$x:00003AEC
.text$x:00003AF1
.text$x:00003AF1 ; =============== S U B R O U T I N E =======================================
.text$x:00003AF1
.text$x:00003AF1
.text$x:00003AF1 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00003AF1                                         ; DATA XREF: .xdata$x:00003B80o
.text$x:00003AF1                 mov     ecx, [ebp-10h]
.text$x:00003AF4                 add     ecx, 0C4h ; '-'
.text$x:00003AFA                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003AFA __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$6 endp
.text$x:00003AFA
.text$x:00003AFF
.text$x:00003AFF ; =============== S U B R O U T I N E =======================================
.text$x:00003AFF
.text$x:00003AFF
.text$x:00003AFF __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:00003AFF                                         ; DATA XREF: .xdata$x:00003B88o
.text$x:00003AFF                 mov     ecx, [ebp-10h]
.text$x:00003B02                 add     ecx, 0D0h ; '-'
.text$x:00003B08                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00003B08 __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$7 endp
.text$x:00003B08
.text$x:00003B0D
.text$x:00003B0D ; =============== S U B R O U T I N E =======================================
.text$x:00003B0D
.text$x:00003B0D
.text$x:00003B0D __ehhandler$??0CDatabase@N7z@NArchive@@QAE@XZ proc near
.text$x:00003B0D                                         ; DATA XREF: NArchive::N7z::CDatabase::CDatabase(void)+5o
.text$x:00003B0D
.text$x:00003B0D arg_4           = dword ptr  8
.text$x:00003B0D
.text$x:00003B0D                 mov     edx, [esp+arg_4]
.text$x:00003B11                 lea     eax, [edx+0Ch]
.text$x:00003B14                 mov     ecx, [edx-8]
.text$x:00003B17                 xor     ecx, eax
.text$x:00003B19                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B1E                 mov     eax, offset __ehfuncinfo$??0CDatabase@N7z@NArchive@@QAE@XZ
.text$x:00003B23                 jmp     ___CxxFrameHandler3
.text$x:00003B23 __ehhandler$??0CDatabase@N7z@NArchive@@QAE@XZ endp
.text$x:00003B23
.text$x:00003B23 _text$x         ends
.text$x:00003B23
.xdata$x:00003B28 ; ===========================================================================
.xdata$x:00003B28
.xdata$x:00003B28 ; Segment type: Pure data
.xdata$x:00003B28 ; Segment permissions: Read
.xdata$x:00003B28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003B28                 assume cs:_xdata$x
.xdata$x:00003B28                 ;org 3B28h
.xdata$x:00003B28 ; COMDAT (pick associative to section at 39C8)
.xdata$x:00003B28 __ehfuncinfo$??0CDatabase@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003B28                                         ; DATA XREF: __ehhandler$??0CDatabase@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003B29                 db    5
.xdata$x:00003B2A                 db  93h ; ô
.xdata$x:00003B2B                 db  19h
.xdata$x:00003B2C                 db    8
.xdata$x:00003B2D                 db    0
.xdata$x:00003B2E                 db    0
.xdata$x:00003B2F                 db    0
.xdata$x:00003B30                 dd offset __unwindtable$??0CDatabase@N7z@NArchive@@QAE@XZ
.xdata$x:00003B34                 db    0
.xdata$x:00003B35                 db    0
.xdata$x:00003B36                 db    0
.xdata$x:00003B37                 db    0
.xdata$x:00003B38                 db    0
.xdata$x:00003B39                 db    0
.xdata$x:00003B3A                 db    0
.xdata$x:00003B3B                 db    0
.xdata$x:00003B3C                 db    0
.xdata$x:00003B3D                 db    0
.xdata$x:00003B3E                 db    0
.xdata$x:00003B3F                 db    0
.xdata$x:00003B40                 db    0
.xdata$x:00003B41                 db    0
.xdata$x:00003B42                 db    0
.xdata$x:00003B43                 db    0
.xdata$x:00003B44                 db    0
.xdata$x:00003B45                 db    0
.xdata$x:00003B46                 db    0
.xdata$x:00003B47                 db    0
.xdata$x:00003B48                 db    1
.xdata$x:00003B49                 db    0
.xdata$x:00003B4A                 db    0
.xdata$x:00003B4B                 db    0
.xdata$x:00003B4C __unwindtable$??0CDatabase@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003B4C                                         ; DATA XREF: .xdata$x:00003B30o
.xdata$x:00003B4D                 db 0FFh
.xdata$x:00003B4E                 db 0FFh
.xdata$x:00003B4F                 db 0FFh
.xdata$x:00003B50                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003B54                 align 8
.xdata$x:00003B58                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003B5C                 db    1
.xdata$x:00003B5D                 db    0
.xdata$x:00003B5E                 db    0
.xdata$x:00003B5F                 db    0
.xdata$x:00003B60                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$2
.xdata$x:00003B64                 db    2
.xdata$x:00003B65                 db    0
.xdata$x:00003B66                 db    0
.xdata$x:00003B67                 db    0
.xdata$x:00003B68                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$3
.xdata$x:00003B6C                 db    3
.xdata$x:00003B6D                 db    0
.xdata$x:00003B6E                 db    0
.xdata$x:00003B6F                 db    0
.xdata$x:00003B70                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$4
.xdata$x:00003B74                 db    4
.xdata$x:00003B75                 db    0
.xdata$x:00003B76                 db    0
.xdata$x:00003B77                 db    0
.xdata$x:00003B78                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$5
.xdata$x:00003B7C                 db    5
.xdata$x:00003B7D                 db    0
.xdata$x:00003B7E                 db    0
.xdata$x:00003B7F                 db    0
.xdata$x:00003B80                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$6
.xdata$x:00003B84                 db    6
.xdata$x:00003B85                 db    0
.xdata$x:00003B86                 db    0
.xdata$x:00003B87                 db    0
.xdata$x:00003B88                 dd offset __unwindfunclet$??0CDatabase@N7z@NArchive@@QAE@XZ$7
.xdata$x:00003B88 _xdata$x        ends
.xdata$x:00003B88
.text:00003B8C ; ===========================================================================
.text:00003B8C
.text:00003B8C ; Segment type: Pure code
.text:00003B8C ; Segment permissions: Read/Execute
.text:00003B8C _text           segment para public 'CODE' use32
.text:00003B8C                 assume cs:_text
.text:00003B8C                 ;org 3B8Ch
.text:00003B8C ; COMDAT (pick any)
.text:00003B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003B8C
.text:00003B8C ; =============== S U B R O U T I N E =======================================
.text:00003B8C
.text:00003B8C ; Attributes: bp-based frame
.text:00003B8C
.text:00003B8C ; _DWORD __thiscall NArchive::N7z::CInArchiveInfo::CInArchiveInfo(NArchive::N7z::CInArchiveInfo *__hidden this)
.text:00003B8C                 public ??0CInArchiveInfo@N7z@NArchive@@QAE@XZ
.text:00003B8C ??0CInArchiveInfo@N7z@NArchive@@QAE@XZ proc near
.text:00003B8C                                         ; CODE XREF: NArchive::N7z::CDbEx::CDbEx(void)+45p
.text:00003B8C
.text:00003B8C var_4           = dword ptr -4
.text:00003B8C
.text:00003B8C                 push    ebp
.text:00003B8D                 mov     ebp, esp
.text:00003B8F                 push    ecx
.text:00003B90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B97                 mov     [ebp+var_4], ecx
.text:00003B9A                 mov     ecx, [ebp+var_4]
.text:00003B9D                 add     ecx, 28h ; '('
.text:00003BA0                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00003BA5                 mov     eax, [ebp+var_4]
.text:00003BA8                 add     esp, 4
.text:00003BAB                 cmp     ebp, esp
.text:00003BAD                 call    __RTC_CheckEsp
.text:00003BB2                 mov     esp, ebp
.text:00003BB4                 pop     ebp
.text:00003BB5                 retn
.text:00003BB5 ??0CInArchiveInfo@N7z@NArchive@@QAE@XZ endp
.text:00003BB5
.text:00003BB5 ; ---------------------------------------------------------------------------
.text:00003BB6                 align 4
.text:00003BB6 _text           ends
.text:00003BB6
.text:00003BB8 ; ===========================================================================
.text:00003BB8
.text:00003BB8 ; Segment type: Pure code
.text:00003BB8 ; Segment permissions: Read/Execute
.text:00003BB8 _text           segment para public 'CODE' use32
.text:00003BB8                 assume cs:_text
.text:00003BB8                 ;org 3BB8h
.text:00003BB8 ; COMDAT (pick any)
.text:00003BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003BB8
.text:00003BB8 ; =============== S U B R O U T I N E =======================================
.text:00003BB8
.text:00003BB8 ; Attributes: bp-based frame
.text:00003BB8
.text:00003BB8 ; _DWORD __thiscall NArchive::N7z::CFolders::CFolders(NArchive::N7z::CFolders *__hidden this)
.text:00003BB8                 public ??0CFolders@N7z@NArchive@@QAE@XZ
.text:00003BB8 ??0CFolders@N7z@NArchive@@QAE@XZ proc near
.text:00003BB8                                         ; CODE XREF: NArchive::N7z::CDatabase::CDatabase(void)+30p
.text:00003BB8
.text:00003BB8 var_10          = dword ptr -10h
.text:00003BB8 var_C           = dword ptr -0Ch
.text:00003BB8 var_4           = dword ptr -4
.text:00003BB8
.text:00003BB8                 push    ebp
.text:00003BB9                 mov     ebp, esp
.text:00003BBB                 push    0FFFFFFFFh
.text:00003BBD                 push    offset __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ
.text:00003BC2                 mov     eax, large fs:0
.text:00003BC8                 push    eax
.text:00003BC9                 push    ecx
.text:00003BCA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003BD1                 mov     eax, dword ptr ds:___security_cookie
.text:00003BD6                 xor     eax, ebp
.text:00003BD8                 push    eax
.text:00003BD9                 lea     eax, [ebp+var_C]
.text:00003BDC                 mov     large fs:0, eax
.text:00003BE2                 mov     [ebp+var_10], ecx
.text:00003BE5                 mov     ecx, [ebp+var_10]
.text:00003BE8                 add     ecx, 8
.text:00003BEB                 call    ??0?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:00003BF0                 mov     [ebp+var_4], 0
.text:00003BF7                 mov     ecx, [ebp+var_10]
.text:00003BFA                 add     ecx, 0Ch        ; this
.text:00003BFD                 call    ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)
.text:00003C02                 mov     byte ptr [ebp+var_4], 1
.text:00003C06                 mov     ecx, [ebp+var_10]
.text:00003C09                 add     ecx, 24h ; '$'
.text:00003C0C                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00003C11                 mov     byte ptr [ebp+var_4], 2
.text:00003C15                 mov     ecx, [ebp+var_10]
.text:00003C18                 add     ecx, 28h ; '('
.text:00003C1B                 call    ??0?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:00003C20                 mov     byte ptr [ebp+var_4], 3
.text:00003C24                 mov     ecx, [ebp+var_10]
.text:00003C27                 add     ecx, 2Ch ; ','
.text:00003C2A                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00003C2F                 mov     byte ptr [ebp+var_4], 4
.text:00003C33                 mov     ecx, [ebp+var_10]
.text:00003C36                 add     ecx, 30h ; '0'
.text:00003C39                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00003C3E                 mov     byte ptr [ebp+var_4], 5
.text:00003C42                 mov     ecx, [ebp+var_10]
.text:00003C45                 add     ecx, 34h ; '4'
.text:00003C48                 call    ??0?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::CObjArray<uchar>(void)
.text:00003C4D                 mov     byte ptr [ebp+var_4], 6
.text:00003C51                 mov     ecx, [ebp+var_10]
.text:00003C54                 add     ecx, 38h ; '8'
.text:00003C57                 call    ??0?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::CObjArray<uint>(void)
.text:00003C5C                 mov     byte ptr [ebp+var_4], 7
.text:00003C60                 mov     ecx, [ebp+var_10]
.text:00003C63                 add     ecx, 3Ch ; '<'
.text:00003C66                 call    ??0?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::CBuffer<uchar>(void)
.text:00003C6B                 mov     byte ptr [ebp+var_4], 8
.text:00003C6F                 mov     ecx, [ebp+var_10]
.text:00003C72                 add     ecx, 44h ; 'D'  ; this
.text:00003C75                 call    ??0CParsedMethods@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CParsedMethods::CParsedMethods(void)
.text:00003C7A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003C81                 mov     eax, [ebp+var_10]
.text:00003C84                 mov     ecx, [ebp+var_C]
.text:00003C87                 mov     large fs:0, ecx
.text:00003C8E                 pop     ecx
.text:00003C8F                 add     esp, 10h
.text:00003C92                 cmp     ebp, esp
.text:00003C94                 call    __RTC_CheckEsp
.text:00003C99                 mov     esp, ebp
.text:00003C9B                 pop     ebp
.text:00003C9C                 retn
.text:00003C9C ??0CFolders@N7z@NArchive@@QAE@XZ endp
.text:00003C9C
.text:00003C9C ; ---------------------------------------------------------------------------
.text:00003C9D                 align 10h
.text:00003C9D _text           ends
.text:00003C9D
.text$x:00003CA0 ; ===========================================================================
.text$x:00003CA0
.text$x:00003CA0 ; Segment type: Pure code
.text$x:00003CA0 ; Segment permissions: Read/Execute
.text$x:00003CA0 _text$x         segment para public 'CODE' use32
.text$x:00003CA0                 assume cs:_text$x
.text$x:00003CA0                 ;org 3CA0h
.text$x:00003CA0 ; COMDAT (pick associative to section at 3BB8)
.text$x:00003CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003CA0
.text$x:00003CA0 ; =============== S U B R O U T I N E =======================================
.text$x:00003CA0
.text$x:00003CA0
.text$x:00003CA0 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003CA0                                         ; DATA XREF: .xdata$x:00003D48o
.text$x:00003CA0                 mov     ecx, [ebp-10h]
.text$x:00003CA3                 add     ecx, 8
.text$x:00003CA6                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:00003CA6 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003CA6
.text$x:00003CAB
.text$x:00003CAB ; =============== S U B R O U T I N E =======================================
.text$x:00003CAB
.text$x:00003CAB
.text$x:00003CAB __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1 proc near
.text$x:00003CAB                                         ; DATA XREF: .xdata$x:00003D50o
.text$x:00003CAB                 mov     ecx, [ebp-10h]
.text$x:00003CAE                 add     ecx, 0Ch        ; this
.text$x:00003CB1                 jmp     ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)
.text$x:00003CB1 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1 endp
.text$x:00003CB1
.text$x:00003CB6
.text$x:00003CB6 ; =============== S U B R O U T I N E =======================================
.text$x:00003CB6
.text$x:00003CB6
.text$x:00003CB6 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2 proc near
.text$x:00003CB6                                         ; DATA XREF: .xdata$x:00003D58o
.text$x:00003CB6                 mov     ecx, [ebp-10h]
.text$x:00003CB9                 add     ecx, 24h ; '$'
.text$x:00003CBC                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00003CBC __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2 endp
.text$x:00003CBC
.text$x:00003CC1
.text$x:00003CC1 ; =============== S U B R O U T I N E =======================================
.text$x:00003CC1
.text$x:00003CC1
.text$x:00003CC1 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3 proc near
.text$x:00003CC1                                         ; DATA XREF: .xdata$x:00003D60o
.text$x:00003CC1                 mov     ecx, [ebp-10h]
.text$x:00003CC4                 add     ecx, 28h ; '('
.text$x:00003CC7                 jmp     ??1?$CObjArray@_K@@QAE@XZ ; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text$x:00003CC7 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3 endp
.text$x:00003CC7
.text$x:00003CCC
.text$x:00003CCC ; =============== S U B R O U T I N E =======================================
.text$x:00003CCC
.text$x:00003CCC
.text$x:00003CCC __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4 proc near
.text$x:00003CCC                                         ; DATA XREF: .xdata$x:00003D68o
.text$x:00003CCC                 mov     ecx, [ebp-10h]
.text$x:00003CCF                 add     ecx, 2Ch ; ','
.text$x:00003CD2                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00003CD2 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4 endp
.text$x:00003CD2
.text$x:00003CD7
.text$x:00003CD7 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD7
.text$x:00003CD7
.text$x:00003CD7 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5 proc near
.text$x:00003CD7                                         ; DATA XREF: .xdata$x:00003D70o
.text$x:00003CD7                 mov     ecx, [ebp-10h]
.text$x:00003CDA                 add     ecx, 30h ; '0'
.text$x:00003CDD                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00003CDD __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5 endp
.text$x:00003CDD
.text$x:00003CE2
.text$x:00003CE2 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE2
.text$x:00003CE2
.text$x:00003CE2 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6 proc near
.text$x:00003CE2                                         ; DATA XREF: .xdata$x:00003D78o
.text$x:00003CE2                 mov     ecx, [ebp-10h]
.text$x:00003CE5                 add     ecx, 34h ; '4'
.text$x:00003CE8                 jmp     ??1?$CObjArray@E@@QAE@XZ ; CObjArray<uchar>::~CObjArray<uchar>(void)
.text$x:00003CE8 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6 endp
.text$x:00003CE8
.text$x:00003CED
.text$x:00003CED ; =============== S U B R O U T I N E =======================================
.text$x:00003CED
.text$x:00003CED
.text$x:00003CED __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7 proc near
.text$x:00003CED                                         ; DATA XREF: .xdata$x:00003D80o
.text$x:00003CED                 mov     ecx, [ebp-10h]
.text$x:00003CF0                 add     ecx, 38h ; '8'
.text$x:00003CF3                 jmp     ??1?$CObjArray@I@@QAE@XZ ; CObjArray<uint>::~CObjArray<uint>(void)
.text$x:00003CF3 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7 endp
.text$x:00003CF3
.text$x:00003CF8
.text$x:00003CF8 ; =============== S U B R O U T I N E =======================================
.text$x:00003CF8
.text$x:00003CF8
.text$x:00003CF8 __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8 proc near
.text$x:00003CF8                                         ; DATA XREF: .xdata$x:00003D88o
.text$x:00003CF8                 mov     ecx, [ebp-10h]
.text$x:00003CFB                 add     ecx, 3Ch ; '<'
.text$x:00003CFE                 jmp     ??1?$CBuffer@E@@QAE@XZ ; CBuffer<uchar>::~CBuffer<uchar>(void)
.text$x:00003CFE __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8 endp
.text$x:00003CFE
.text$x:00003D03
.text$x:00003D03 ; =============== S U B R O U T I N E =======================================
.text$x:00003D03
.text$x:00003D03
.text$x:00003D03 __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ proc near
.text$x:00003D03                                         ; DATA XREF: NArchive::N7z::CFolders::CFolders(void)+5o
.text$x:00003D03
.text$x:00003D03 arg_4           = dword ptr  8
.text$x:00003D03
.text$x:00003D03                 mov     edx, [esp+arg_4]
.text$x:00003D07                 lea     eax, [edx+0Ch]
.text$x:00003D0A                 mov     ecx, [edx-8]
.text$x:00003D0D                 xor     ecx, eax
.text$x:00003D0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D14                 mov     eax, offset __ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ
.text$x:00003D19                 jmp     ___CxxFrameHandler3
.text$x:00003D19 __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ endp
.text$x:00003D19
.text$x:00003D19 ; ---------------------------------------------------------------------------
.text$x:00003D1E                 align 10h
.text$x:00003D1E _text$x         ends
.text$x:00003D1E
.xdata$x:00003D20 ; ===========================================================================
.xdata$x:00003D20
.xdata$x:00003D20 ; Segment type: Pure data
.xdata$x:00003D20 ; Segment permissions: Read
.xdata$x:00003D20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003D20                 assume cs:_xdata$x
.xdata$x:00003D20                 ;org 3D20h
.xdata$x:00003D20 ; COMDAT (pick associative to section at 3BB8)
.xdata$x:00003D20 __ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003D20                                         ; DATA XREF: __ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003D21                 db    5
.xdata$x:00003D22                 db  93h ; ô
.xdata$x:00003D23                 db  19h
.xdata$x:00003D24                 db    9
.xdata$x:00003D25                 db    0
.xdata$x:00003D26                 db    0
.xdata$x:00003D27                 db    0
.xdata$x:00003D28                 dd offset __unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ
.xdata$x:00003D2C                 align 20h
.xdata$x:00003D40                 db    1
.xdata$x:00003D41                 db    0
.xdata$x:00003D42                 db    0
.xdata$x:00003D43                 db    0
.xdata$x:00003D44 __unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003D44                                         ; DATA XREF: .xdata$x:00003D28o
.xdata$x:00003D45                 db 0FFh
.xdata$x:00003D46                 db 0FFh
.xdata$x:00003D47                 db 0FFh
.xdata$x:00003D48                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003D4C                 align 10h
.xdata$x:00003D50                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1
.xdata$x:00003D54                 db    1
.xdata$x:00003D55                 db    0
.xdata$x:00003D56                 db    0
.xdata$x:00003D57                 db    0
.xdata$x:00003D58                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2
.xdata$x:00003D5C                 db    2
.xdata$x:00003D5D                 db    0
.xdata$x:00003D5E                 db    0
.xdata$x:00003D5F                 db    0
.xdata$x:00003D60                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3
.xdata$x:00003D64                 db    3
.xdata$x:00003D65                 db    0
.xdata$x:00003D66                 db    0
.xdata$x:00003D67                 db    0
.xdata$x:00003D68                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4
.xdata$x:00003D6C                 db    4
.xdata$x:00003D6D                 db    0
.xdata$x:00003D6E                 db    0
.xdata$x:00003D6F                 db    0
.xdata$x:00003D70                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5
.xdata$x:00003D74                 db    5
.xdata$x:00003D75                 db    0
.xdata$x:00003D76                 db    0
.xdata$x:00003D77                 db    0
.xdata$x:00003D78                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6
.xdata$x:00003D7C                 db    6
.xdata$x:00003D7D                 db    0
.xdata$x:00003D7E                 db    0
.xdata$x:00003D7F                 db    0
.xdata$x:00003D80                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7
.xdata$x:00003D84                 db    7
.xdata$x:00003D85                 db    0
.xdata$x:00003D86                 db    0
.xdata$x:00003D87                 db    0
.xdata$x:00003D88                 dd offset __unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8
.xdata$x:00003D88 _xdata$x        ends
.xdata$x:00003D88
.text:00003D8C ; ===========================================================================
.text:00003D8C
.text:00003D8C ; Segment type: Pure code
.text:00003D8C ; Segment permissions: Read/Execute
.text:00003D8C _text           segment para public 'CODE' use32
.text:00003D8C                 assume cs:_text
.text:00003D8C                 ;org 3D8Ch
.text:00003D8C ; COMDAT (pick any)
.text:00003D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003D8C
.text:00003D8C ; =============== S U B R O U T I N E =======================================
.text:00003D8C
.text:00003D8C ; Attributes: bp-based frame
.text:00003D8C
.text:00003D8C ; _DWORD __thiscall NArchive::N7z::CParsedMethods::CParsedMethods(NArchive::N7z::CParsedMethods *__hidden this)
.text:00003D8C                 public ??0CParsedMethods@N7z@NArchive@@QAE@XZ
.text:00003D8C ??0CParsedMethods@N7z@NArchive@@QAE@XZ proc near
.text:00003D8C                                         ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+BDp
.text:00003D8C
.text:00003D8C var_4           = dword ptr -4
.text:00003D8C
.text:00003D8C                 push    ebp
.text:00003D8D                 mov     ebp, esp
.text:00003D8F                 push    ecx
.text:00003D90                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003D97                 mov     [ebp+var_4], ecx
.text:00003D9A                 mov     eax, [ebp+var_4]
.text:00003D9D                 mov     byte ptr [eax], 0
.text:00003DA0                 mov     ecx, [ebp+var_4]
.text:00003DA3                 mov     dword ptr [ecx+4], 0
.text:00003DAA                 mov     ecx, [ebp+var_4]
.text:00003DAD                 add     ecx, 8
.text:00003DB0                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00003DB5                 mov     eax, [ebp+var_4]
.text:00003DB8                 add     esp, 4
.text:00003DBB                 cmp     ebp, esp
.text:00003DBD                 call    __RTC_CheckEsp
.text:00003DC2                 mov     esp, ebp
.text:00003DC4                 pop     ebp
.text:00003DC5                 retn
.text:00003DC5 ??0CParsedMethods@N7z@NArchive@@QAE@XZ endp
.text:00003DC5
.text:00003DC5 ; ---------------------------------------------------------------------------
.text:00003DC6                 align 4
.text:00003DC6 _text           ends
.text:00003DC6
.text:00003DC8 ; ===========================================================================
.text:00003DC8
.text:00003DC8 ; Segment type: Pure code
.text:00003DC8 ; Segment permissions: Read/Execute
.text:00003DC8 _text           segment para public 'CODE' use32
.text:00003DC8                 assume cs:_text
.text:00003DC8                 ;org 3DC8h
.text:00003DC8 ; COMDAT (pick any)
.text:00003DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003DC8
.text:00003DC8 ; =============== S U B R O U T I N E =======================================
.text:00003DC8
.text:00003DC8 ; Attributes: bp-based frame
.text:00003DC8
.text:00003DC8 ; _DWORD __thiscall NArchive::N7z::CUInt64DefVector::CUInt64DefVector(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00003DC8                 public ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00003DC8 ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00003DC8                                         ; CODE XREF: NArchive::N7z::CDatabase::CDatabase(void)+51p
.text:00003DC8                                         ; NArchive::N7z::CDatabase::CDatabase(void)+60p ...
.text:00003DC8
.text:00003DC8 var_10          = dword ptr -10h
.text:00003DC8 var_C           = dword ptr -0Ch
.text:00003DC8 var_4           = dword ptr -4
.text:00003DC8
.text:00003DC8                 push    ebp
.text:00003DC9                 mov     ebp, esp
.text:00003DCB                 push    0FFFFFFFFh
.text:00003DCD                 push    offset __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text:00003DD2                 mov     eax, large fs:0
.text:00003DD8                 push    eax
.text:00003DD9                 push    ecx
.text:00003DDA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003DE1                 mov     eax, dword ptr ds:___security_cookie
.text:00003DE6                 xor     eax, ebp
.text:00003DE8                 push    eax
.text:00003DE9                 lea     eax, [ebp+var_C]
.text:00003DEC                 mov     large fs:0, eax
.text:00003DF2                 mov     [ebp+var_10], ecx
.text:00003DF5                 mov     ecx, [ebp+var_10]
.text:00003DF8                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00003DFD                 mov     [ebp+var_4], 0
.text:00003E04                 mov     ecx, [ebp+var_10]
.text:00003E07                 add     ecx, 0Ch
.text:00003E0A                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00003E0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003E16                 mov     eax, [ebp+var_10]
.text:00003E19                 mov     ecx, [ebp+var_C]
.text:00003E1C                 mov     large fs:0, ecx
.text:00003E23                 pop     ecx
.text:00003E24                 add     esp, 10h
.text:00003E27                 cmp     ebp, esp
.text:00003E29                 call    __RTC_CheckEsp
.text:00003E2E                 mov     esp, ebp
.text:00003E30                 pop     ebp
.text:00003E31                 retn
.text:00003E31 ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text:00003E31
.text:00003E31 ; ---------------------------------------------------------------------------
.text:00003E32                 align 4
.text:00003E32 _text           ends
.text:00003E32
.text$x:00003E34 ; ===========================================================================
.text$x:00003E34
.text$x:00003E34 ; Segment type: Pure code
.text$x:00003E34 ; Segment permissions: Read/Execute
.text$x:00003E34 _text$x         segment para public 'CODE' use32
.text$x:00003E34                 assume cs:_text$x
.text$x:00003E34                 ;org 3E34h
.text$x:00003E34 ; COMDAT (pick associative to section at 3DC8)
.text$x:00003E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003E34
.text$x:00003E34 ; =============== S U B R O U T I N E =======================================
.text$x:00003E34
.text$x:00003E34
.text$x:00003E34 __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003E34                                         ; DATA XREF: .xdata$x:00003E5Co
.text$x:00003E34                 mov     ecx, [ebp-10h]
.text$x:00003E37                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003E37 __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003E37
.text$x:00003E3C
.text$x:00003E3C ; =============== S U B R O U T I N E =======================================
.text$x:00003E3C
.text$x:00003E3C
.text$x:00003E3C __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00003E3C                                         ; DATA XREF: NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)+5o
.text$x:00003E3C
.text$x:00003E3C arg_4           = dword ptr  8
.text$x:00003E3C
.text$x:00003E3C                 mov     edx, [esp+arg_4]
.text$x:00003E40                 lea     eax, [edx+0Ch]
.text$x:00003E43                 mov     ecx, [edx-8]
.text$x:00003E46                 xor     ecx, eax
.text$x:00003E48                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E4D                 mov     eax, offset __ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.text$x:00003E52                 jmp     ___CxxFrameHandler3
.text$x:00003E52 __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00003E52
.text$x:00003E52 ; ---------------------------------------------------------------------------
.text$x:00003E57                 align 4
.text$x:00003E57 _text$x         ends
.text$x:00003E57
.xdata$x:00003E58 ; ===========================================================================
.xdata$x:00003E58
.xdata$x:00003E58 ; Segment type: Pure data
.xdata$x:00003E58 ; Segment permissions: Read
.xdata$x:00003E58 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003E58                 assume cs:_xdata$x
.xdata$x:00003E58                 ;org 3E58h
.xdata$x:00003E58 ; COMDAT (pick associative to section at 3DC8)
.xdata$x:00003E58 __unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003E58                                         ; DATA XREF: .xdata$x:00003E68o
.xdata$x:00003E59                 db 0FFh
.xdata$x:00003E5A                 db 0FFh
.xdata$x:00003E5B                 db 0FFh
.xdata$x:00003E5C                 dd offset __unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003E60 __ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003E60                                         ; DATA XREF: __ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003E61                 db    5
.xdata$x:00003E62                 db  93h ; ô
.xdata$x:00003E63                 db  19h
.xdata$x:00003E64                 db    1
.xdata$x:00003E65                 db    0
.xdata$x:00003E66                 db    0
.xdata$x:00003E67                 db    0
.xdata$x:00003E68                 dd offset __unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00003E6C                 align 20h
.xdata$x:00003E80                 db    1
.xdata$x:00003E81                 db    0
.xdata$x:00003E82                 db    0
.xdata$x:00003E83                 db    0
.xdata$x:00003E83 _xdata$x        ends
.xdata$x:00003E83
.text:00003E84 ; ===========================================================================
.text:00003E84
.text:00003E84 ; Segment type: Pure code
.text:00003E84 ; Segment permissions: Read/Execute
.text:00003E84 _text           segment para public 'CODE' use32
.text:00003E84                 assume cs:_text
.text:00003E84                 ;org 3E84h
.text:00003E84 ; COMDAT (pick any)
.text:00003E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E84
.text:00003E84 ; =============== S U B R O U T I N E =======================================
.text:00003E84
.text:00003E84 ; Attributes: bp-based frame
.text:00003E84
.text:00003E84 ; _DWORD __thiscall NArchive::N7z::CUInt32DefVector::CUInt32DefVector(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00003E84                 public ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00003E84 ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text:00003E84                                         ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+45p
.text:00003E84
.text:00003E84 var_10          = dword ptr -10h
.text:00003E84 var_C           = dword ptr -0Ch
.text:00003E84 var_4           = dword ptr -4
.text:00003E84
.text:00003E84                 push    ebp
.text:00003E85                 mov     ebp, esp
.text:00003E87                 push    0FFFFFFFFh
.text:00003E89                 push    offset __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text:00003E8E                 mov     eax, large fs:0
.text:00003E94                 push    eax
.text:00003E95                 push    ecx
.text:00003E96                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003E9D                 mov     eax, dword ptr ds:___security_cookie
.text:00003EA2                 xor     eax, ebp
.text:00003EA4                 push    eax
.text:00003EA5                 lea     eax, [ebp+var_C]
.text:00003EA8                 mov     large fs:0, eax
.text:00003EAE                 mov     [ebp+var_10], ecx
.text:00003EB1                 mov     ecx, [ebp+var_10]
.text:00003EB4                 call    ??0?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::CRecordVector<bool>(void)
.text:00003EB9                 mov     [ebp+var_4], 0
.text:00003EC0                 mov     ecx, [ebp+var_10]
.text:00003EC3                 add     ecx, 0Ch
.text:00003EC6                 call    ??0?$CRecordVector@I@@QAE@XZ ; CRecordVector<uint>::CRecordVector<uint>(void)
.text:00003ECB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003ED2                 mov     eax, [ebp+var_10]
.text:00003ED5                 mov     ecx, [ebp+var_C]
.text:00003ED8                 mov     large fs:0, ecx
.text:00003EDF                 pop     ecx
.text:00003EE0                 add     esp, 10h
.text:00003EE3                 cmp     ebp, esp
.text:00003EE5                 call    __RTC_CheckEsp
.text:00003EEA                 mov     esp, ebp
.text:00003EEC                 pop     ebp
.text:00003EED                 retn
.text:00003EED ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text:00003EED
.text:00003EED ; ---------------------------------------------------------------------------
.text:00003EEE                 align 10h
.text:00003EEE _text           ends
.text:00003EEE
.text$x:00003EF0 ; ===========================================================================
.text$x:00003EF0
.text$x:00003EF0 ; Segment type: Pure code
.text$x:00003EF0 ; Segment permissions: Read/Execute
.text$x:00003EF0 _text$x         segment para public 'CODE' use32
.text$x:00003EF0                 assume cs:_text$x
.text$x:00003EF0                 ;org 3EF0h
.text$x:00003EF0 ; COMDAT (pick associative to section at 3E84)
.text$x:00003EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003EF0
.text$x:00003EF0 ; =============== S U B R O U T I N E =======================================
.text$x:00003EF0
.text$x:00003EF0
.text$x:00003EF0 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 proc near
.text$x:00003EF0                                         ; DATA XREF: .xdata$x:00003F18o
.text$x:00003EF0                 mov     ecx, [ebp-10h]
.text$x:00003EF3                 jmp     ??1?$CRecordVector@_N@@QAE@XZ ; CRecordVector<bool>::~CRecordVector<bool>(void)
.text$x:00003EF3 __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0 endp
.text$x:00003EF3
.text$x:00003EF8
.text$x:00003EF8 ; =============== S U B R O U T I N E =======================================
.text$x:00003EF8
.text$x:00003EF8
.text$x:00003EF8 __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ proc near
.text$x:00003EF8                                         ; DATA XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+5o
.text$x:00003EF8
.text$x:00003EF8 arg_4           = dword ptr  8
.text$x:00003EF8
.text$x:00003EF8                 mov     edx, [esp+arg_4]
.text$x:00003EFC                 lea     eax, [edx+0Ch]
.text$x:00003EFF                 mov     ecx, [edx-8]
.text$x:00003F02                 xor     ecx, eax
.text$x:00003F04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F09                 mov     eax, offset __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.text$x:00003F0E                 jmp     ___CxxFrameHandler3
.text$x:00003F0E __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ endp
.text$x:00003F0E
.text$x:00003F0E ; ---------------------------------------------------------------------------
.text$x:00003F13                 align 4
.text$x:00003F13 _text$x         ends
.text$x:00003F13
.xdata$x:00003F14 ; ===========================================================================
.xdata$x:00003F14
.xdata$x:00003F14 ; Segment type: Pure data
.xdata$x:00003F14 ; Segment permissions: Read
.xdata$x:00003F14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F14                 assume cs:_xdata$x
.xdata$x:00003F14                 ;org 3F14h
.xdata$x:00003F14 ; COMDAT (pick associative to section at 3E84)
.xdata$x:00003F14 __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003F14                                         ; DATA XREF: .xdata$x:00003F24o
.xdata$x:00003F15                 db 0FFh
.xdata$x:00003F16                 db 0FFh
.xdata$x:00003F17                 db 0FFh
.xdata$x:00003F18                 dd offset __unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
.xdata$x:00003F1C __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003F1C                                         ; DATA XREF: __ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ+11o
.xdata$x:00003F1D                 db    5
.xdata$x:00003F1E                 db  93h ; ô
.xdata$x:00003F1F                 db  19h
.xdata$x:00003F20                 db    1
.xdata$x:00003F21                 db    0
.xdata$x:00003F22                 db    0
.xdata$x:00003F23                 db    0
.xdata$x:00003F24                 dd offset __unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
.xdata$x:00003F28                 db    0
.xdata$x:00003F29                 db    0
.xdata$x:00003F2A                 db    0
.xdata$x:00003F2B                 db    0
.xdata$x:00003F2C                 db    0
.xdata$x:00003F2D                 db    0
.xdata$x:00003F2E                 db    0
.xdata$x:00003F2F                 db    0
.xdata$x:00003F30                 db    0
.xdata$x:00003F31                 db    0
.xdata$x:00003F32                 db    0
.xdata$x:00003F33                 db    0
.xdata$x:00003F34                 db    0
.xdata$x:00003F35                 db    0
.xdata$x:00003F36                 db    0
.xdata$x:00003F37                 db    0
.xdata$x:00003F38                 db    0
.xdata$x:00003F39                 db    0
.xdata$x:00003F3A                 db    0
.xdata$x:00003F3B                 db    0
.xdata$x:00003F3C                 db    1
.xdata$x:00003F3D                 db    0
.xdata$x:00003F3E                 db    0
.xdata$x:00003F3F                 db    0
.xdata$x:00003F3F _xdata$x        ends
.xdata$x:00003F3F
.text:00003F40 ; ===========================================================================
.text:00003F40
.text:00003F40 ; Segment type: Pure code
.text:00003F40 ; Segment permissions: Read/Execute
.text:00003F40 _text           segment para public 'CODE' use32
.text:00003F40                 assume cs:_text
.text:00003F40                 ;org 3F40h
.text:00003F40 ; COMDAT (pick any)
.text:00003F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F40
.text:00003F40 ; =============== S U B R O U T I N E =======================================
.text:00003F40
.text:00003F40 ; Attributes: bp-based frame
.text:00003F40
.text:00003F40 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00003F40                 public ?IsEmpty@AString@@QBE_NXZ
.text:00003F40 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+62p
.text:00003F40                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+759p
.text:00003F40
.text:00003F40 var_4           = dword ptr -4
.text:00003F40
.text:00003F40                 push    ebp
.text:00003F41                 mov     ebp, esp
.text:00003F43                 push    ecx
.text:00003F44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F4B                 mov     [ebp+var_4], ecx
.text:00003F4E                 mov     eax, [ebp+var_4]
.text:00003F51                 xor     ecx, ecx
.text:00003F53                 cmp     dword ptr [eax+4], 0
.text:00003F57                 setz    cl
.text:00003F5A                 mov     al, cl
.text:00003F5C                 mov     esp, ebp
.text:00003F5E                 pop     ebp
.text:00003F5F                 retn
.text:00003F5F ?IsEmpty@AString@@QBE_NXZ endp
.text:00003F5F
.text:00003F5F _text           ends
.text:00003F5F
.text:00003F60 ; ===========================================================================
.text:00003F60
.text:00003F60 ; Segment type: Pure code
.text:00003F60 ; Segment permissions: Read/Execute
.text:00003F60 _text           segment para public 'CODE' use32
.text:00003F60                 assume cs:_text
.text:00003F60                 ;org 3F60h
.text:00003F60 ; COMDAT (pick any)
.text:00003F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F60
.text:00003F60 ; =============== S U B R O U T I N E =======================================
.text:00003F60
.text:00003F60 ; Attributes: bp-based frame
.text:00003F60
.text:00003F60 ; public: __thiscall AString::operator char const *(void)const
.text:00003F60                 public ??BAString@@QBEPBDXZ
.text:00003F60 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1BDp
.text:00003F60                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+810p
.text:00003F60
.text:00003F60 var_4           = dword ptr -4
.text:00003F60
.text:00003F60                 push    ebp
.text:00003F61                 mov     ebp, esp
.text:00003F63                 push    ecx
.text:00003F64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F6B                 mov     [ebp+var_4], ecx
.text:00003F6E                 mov     eax, [ebp+var_4]
.text:00003F71                 mov     eax, [eax]
.text:00003F73                 mov     esp, ebp
.text:00003F75                 pop     ebp
.text:00003F76                 retn
.text:00003F76 ??BAString@@QBEPBDXZ endp
.text:00003F76
.text:00003F76 ; ---------------------------------------------------------------------------
.text:00003F77                 align 4
.text:00003F77 _text           ends
.text:00003F77
.text:00003F78 ; ===========================================================================
.text:00003F78
.text:00003F78 ; Segment type: Pure code
.text:00003F78 ; Segment permissions: Read/Execute
.text:00003F78 _text           segment para public 'CODE' use32
.text:00003F78                 assume cs:_text
.text:00003F78                 ;org 3F78h
.text:00003F78 ; COMDAT (pick any)
.text:00003F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003F78
.text:00003F78 ; =============== S U B R O U T I N E =======================================
.text:00003F78
.text:00003F78 ; Attributes: bp-based frame
.text:00003F78
.text:00003F78 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003F78                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003F78 ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003F78                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Ep
.text:00003F78
.text:00003F78 var_4           = dword ptr -4
.text:00003F78
.text:00003F78                 push    ebp
.text:00003F79                 mov     ebp, esp
.text:00003F7B                 push    ecx
.text:00003F7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F83                 mov     [ebp+var_4], ecx
.text:00003F86                 xor     eax, eax
.text:00003F88                 mov     ecx, [ebp+var_4]
.text:00003F8B                 mov     [ecx], ax
.text:00003F8E                 xor     edx, edx
.text:00003F90                 mov     eax, [ebp+var_4]
.text:00003F93                 mov     [eax+2], dx
.text:00003F97                 mov     ecx, [ebp+var_4]
.text:00003F9A                 mov     dword ptr [ecx+8], 0
.text:00003FA1                 mov     eax, [ebp+var_4]
.text:00003FA4                 mov     esp, ebp
.text:00003FA6                 pop     ebp
.text:00003FA7                 retn
.text:00003FA7 ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00003FA7
.text:00003FA7 _text           ends
.text:00003FA7
.text:00003FA8 ; ===========================================================================
.text:00003FA8
.text:00003FA8 ; Segment type: Pure code
.text:00003FA8 ; Segment permissions: Read/Execute
.text:00003FA8 _text           segment para public 'CODE' use32
.text:00003FA8                 assume cs:_text
.text:00003FA8                 ;org 3FA8h
.text:00003FA8 ; COMDAT (pick any)
.text:00003FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FA8
.text:00003FA8 ; =============== S U B R O U T I N E =======================================
.text:00003FA8
.text:00003FA8 ; Attributes: bp-based frame
.text:00003FA8
.text:00003FA8 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00003FA8                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00003FA8 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00003FA8                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+37Dp
.text:00003FA8                                         ; __unwindfunclet$?GetArchiveProperty@CHandler@N7z@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2+3j ...
.text:00003FA8
.text:00003FA8 var_4           = dword ptr -4
.text:00003FA8
.text:00003FA8                 push    ebp
.text:00003FA9                 mov     ebp, esp
.text:00003FAB                 push    ecx
.text:00003FAC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FB3                 mov     [ebp+var_4], ecx
.text:00003FB6                 mov     ecx, [ebp+var_4] ; this
.text:00003FB9                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00003FBE                 add     esp, 4
.text:00003FC1                 cmp     ebp, esp
.text:00003FC3                 call    __RTC_CheckEsp
.text:00003FC8                 mov     esp, ebp
.text:00003FCA                 pop     ebp
.text:00003FCB                 retn
.text:00003FCB ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00003FCB
.text:00003FCB _text           ends
.text:00003FCB
.text:00003FCC ; ===========================================================================
.text:00003FCC
.text:00003FCC ; Segment type: Pure code
.text:00003FCC ; Segment permissions: Read/Execute
.text:00003FCC _text           segment para public 'CODE' use32
.text:00003FCC                 assume cs:_text
.text:00003FCC                 ;org 3FCCh
.text:00003FCC ; COMDAT (pick any)
.text:00003FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FCC
.text:00003FCC ; =============== S U B R O U T I N E =======================================
.text:00003FCC
.text:00003FCC ; Attributes: bp-based frame
.text:00003FCC
.text:00003FCC ; bool __thiscall NArchive::N7z::CDatabase::IsSolid(NArchive::N7z::CDatabase *__hidden this)
.text:00003FCC                 public ?IsSolid@CDatabase@N7z@NArchive@@QBE_NXZ
.text:00003FCC ?IsSolid@CDatabase@N7z@NArchive@@QBE_NXZ proc near
.text:00003FCC                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1F1p
.text:00003FCC
.text:00003FCC var_8           = dword ptr -8
.text:00003FCC var_4           = dword ptr -4
.text:00003FCC
.text:00003FCC                 push    ebp
.text:00003FCD                 mov     ebp, esp
.text:00003FCF                 sub     esp, 8
.text:00003FD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003FD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FE0                 mov     [ebp+var_4], ecx
.text:00003FE3                 mov     [ebp+var_8], 0
.text:00003FEA                 jmp     short loc_3FF5
.text:00003FEC ; ---------------------------------------------------------------------------
.text:00003FEC
.text:00003FEC loc_3FEC:                               ; CODE XREF: NArchive::N7z::CDatabase::IsSolid(void):loc_4018j
.text:00003FEC                 mov     eax, [ebp+var_8]
.text:00003FEF                 add     eax, 1
.text:00003FF2                 mov     [ebp+var_8], eax
.text:00003FF5
.text:00003FF5 loc_3FF5:                               ; CODE XREF: NArchive::N7z::CDatabase::IsSolid(void)+1Ej
.text:00003FF5                 mov     ecx, [ebp+var_4]
.text:00003FF8                 mov     edx, [ebp+var_8]
.text:00003FFB                 cmp     edx, [ecx+4]
.text:00003FFE                 jnb     short loc_401A
.text:00004000                 mov     ecx, [ebp+var_4]
.text:00004003                 add     ecx, 24h ; '$'
.text:00004006                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:0000400B                 mov     ecx, [ebp+var_8]
.text:0000400E                 cmp     dword ptr [eax+ecx*4], 1
.text:00004012                 jbe     short loc_4018
.text:00004014                 mov     al, 1
.text:00004016                 jmp     short loc_401C
.text:00004018 ; ---------------------------------------------------------------------------
.text:00004018
.text:00004018 loc_4018:                               ; CODE XREF: NArchive::N7z::CDatabase::IsSolid(void)+46j
.text:00004018                 jmp     short loc_3FEC
.text:0000401A ; ---------------------------------------------------------------------------
.text:0000401A
.text:0000401A loc_401A:                               ; CODE XREF: NArchive::N7z::CDatabase::IsSolid(void)+32j
.text:0000401A                 xor     al, al
.text:0000401C
.text:0000401C loc_401C:                               ; CODE XREF: NArchive::N7z::CDatabase::IsSolid(void)+4Aj
.text:0000401C                 add     esp, 8
.text:0000401F                 cmp     ebp, esp
.text:00004021                 call    __RTC_CheckEsp
.text:00004026                 mov     esp, ebp
.text:00004028                 pop     ebp
.text:00004029                 retn
.text:00004029 ?IsSolid@CDatabase@N7z@NArchive@@QBE_NXZ endp
.text:00004029
.text:00004029 ; ---------------------------------------------------------------------------
.text:0000402A                 align 4
.text:0000402A _text           ends
.text:0000402A
.text:0000402C ; ===========================================================================
.text:0000402C
.text:0000402C ; Segment type: Pure code
.text:0000402C ; Segment permissions: Read/Execute
.text:0000402C _text           segment para public 'CODE' use32
.text:0000402C                 assume cs:_text
.text:0000402C                 ;org 402Ch
.text:0000402C ; COMDAT (pick any)
.text:0000402C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000402C
.text:0000402C ; =============== S U B R O U T I N E =======================================
.text:0000402C
.text:0000402C ; Attributes: bp-based frame
.text:0000402C
.text:0000402C ; unsigned int __stdcall MyStringLen(const char *)
.text:0000402C                 public ?MyStringLen@@YGIPBD@Z
.text:0000402C ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: NArchive::N7z::GetStringForSizeValue(char *,uint)+107p
.text:0000402C                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+4DAp ...
.text:0000402C
.text:0000402C var_4           = dword ptr -4
.text:0000402C arg_0           = dword ptr  8
.text:0000402C
.text:0000402C                 push    ebp
.text:0000402D                 mov     ebp, esp
.text:0000402F                 push    ecx
.text:00004030                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004037                 mov     [ebp+var_4], 0
.text:0000403E                 jmp     short loc_4049
.text:00004040 ; ---------------------------------------------------------------------------
.text:00004040
.text:00004040 loc_4040:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:00004040                 mov     eax, [ebp+var_4]
.text:00004043                 add     eax, 1
.text:00004046                 mov     [ebp+var_4], eax
.text:00004049
.text:00004049 loc_4049:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:00004049                 mov     ecx, [ebp+arg_0]
.text:0000404C                 add     ecx, [ebp+var_4]
.text:0000404F                 movsx   edx, byte ptr [ecx]
.text:00004052                 test    edx, edx
.text:00004054                 jz      short loc_4058
.text:00004056                 jmp     short loc_4040
.text:00004058 ; ---------------------------------------------------------------------------
.text:00004058
.text:00004058 loc_4058:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:00004058                 mov     eax, [ebp+var_4]
.text:0000405B                 mov     esp, ebp
.text:0000405D                 pop     ebp
.text:0000405E                 retn    4
.text:0000405E ?MyStringLen@@YGIPBD@Z endp
.text:0000405E
.text:0000405E ; ---------------------------------------------------------------------------
.text:00004061                 align 4
.text:00004061 _text           ends
.text:00004061
.text:00004064 ; ===========================================================================
.text:00004064
.text:00004064 ; Segment type: Pure code
.text:00004064 ; Segment permissions: Read/Execute
.text:00004064 _text           segment para public 'CODE' use32
.text:00004064                 assume cs:_text
.text:00004064                 ;org 4064h
.text:00004064 ; COMDAT (pick any)
.text:00004064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004064
.text:00004064 ; =============== S U B R O U T I N E =======================================
.text:00004064
.text:00004064 ; Attributes: bp-based frame
.text:00004064
.text:00004064 ; const unsigned __int8 *__thiscall NArchive::N7z::CInByte2::GetPtr(NArchive::N7z::CInByte2 *__hidden this)
.text:00004064                 public ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ
.text:00004064 ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ proc near
.text:00004064                                         ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+B7p
.text:00004064                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+168p ...
.text:00004064
.text:00004064 var_4           = dword ptr -4
.text:00004064
.text:00004064                 push    ebp
.text:00004065                 mov     ebp, esp
.text:00004067                 push    ecx
.text:00004068                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000406F                 mov     [ebp+var_4], ecx
.text:00004072                 mov     eax, [ebp+var_4]
.text:00004075                 mov     eax, [eax]
.text:00004077                 mov     ecx, [ebp+var_4]
.text:0000407A                 add     eax, [ecx+8]
.text:0000407D                 mov     esp, ebp
.text:0000407F                 pop     ebp
.text:00004080                 retn
.text:00004080 ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ endp
.text:00004080
.text:00004080 ; ---------------------------------------------------------------------------
.text:00004081                 align 4
.text:00004081 _text           ends
.text:00004081
.text:00004084 ; ===========================================================================
.text:00004084
.text:00004084 ; Segment type: Pure code
.text:00004084 ; Segment permissions: Read/Execute
.text:00004084 _text           segment para public 'CODE' use32
.text:00004084                 assume cs:_text
.text:00004084                 ;org 4084h
.text:00004084 ; COMDAT (pick any)
.text:00004084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004084
.text:00004084 ; =============== S U B R O U T I N E =======================================
.text:00004084
.text:00004084 ; Attributes: bp-based frame
.text:00004084
.text:00004084 ; void __thiscall NArchive::N7z::CInByte2::Init(NArchive::N7z::CInByte2 *this, const unsigned __int8 *, unsigned int)
.text:00004084                 public ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z
.text:00004084 ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z proc near
.text:00004084                                         ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+7Ap
.text:00004084                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+F1p
.text:00004084
.text:00004084 var_4           = dword ptr -4
.text:00004084 arg_0           = dword ptr  8
.text:00004084 arg_4           = dword ptr  0Ch
.text:00004084
.text:00004084                 push    ebp
.text:00004085                 mov     ebp, esp
.text:00004087                 push    ecx
.text:00004088                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000408F                 mov     [ebp+var_4], ecx
.text:00004092                 mov     eax, [ebp+var_4]
.text:00004095                 mov     ecx, [ebp+arg_0]
.text:00004098                 mov     [eax], ecx
.text:0000409A                 mov     edx, [ebp+var_4]
.text:0000409D                 mov     eax, [ebp+arg_4]
.text:000040A0                 mov     [edx+4], eax
.text:000040A3                 mov     ecx, [ebp+var_4]
.text:000040A6                 mov     dword ptr [ecx+8], 0
.text:000040AD                 mov     esp, ebp
.text:000040AF                 pop     ebp
.text:000040B0                 retn    8
.text:000040B0 ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z endp
.text:000040B0
.text:000040B0 ; ---------------------------------------------------------------------------
.text:000040B3                 align 4
.text:000040B3 _text           ends
.text:000040B3
.text:000040B4 ; ===========================================================================
.text:000040B4
.text:000040B4 ; Segment type: Pure code
.text:000040B4 ; Segment permissions: Read/Execute
.text:000040B4 _text           segment para public 'CODE' use32
.text:000040B4                 assume cs:_text
.text:000040B4                 ;org 40B4h
.text:000040B4 ; COMDAT (pick any)
.text:000040B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000040B4
.text:000040B4 ; =============== S U B R O U T I N E =======================================
.text:000040B4
.text:000040B4 ; Attributes: bp-based frame
.text:000040B4
.text:000040B4 ; void __thiscall NArchive::N7z::CInByte2::SkipDataNoCheck(NArchive::N7z::CInByte2 *this, unsigned __int64)
.text:000040B4                 public ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z
.text:000040B4 ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z proc near
.text:000040B4                                         ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+118p
.text:000040B4                                         ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)+148p ...
.text:000040B4
.text:000040B4 var_4           = dword ptr -4
.text:000040B4 arg_0           = qword ptr  8
.text:000040B4
.text:000040B4                 push    ebp
.text:000040B5                 mov     ebp, esp
.text:000040B7                 push    ecx
.text:000040B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040BF                 mov     [ebp+var_4], ecx
.text:000040C2                 mov     eax, dword ptr [ebp+arg_0]
.text:000040C5                 mov     ecx, [ebp+var_4]
.text:000040C8                 add     eax, [ecx+8]
.text:000040CB                 mov     edx, [ebp+var_4]
.text:000040CE                 mov     [edx+8], eax
.text:000040D1                 mov     esp, ebp
.text:000040D3                 pop     ebp
.text:000040D4                 retn    8
.text:000040D4 ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z endp
.text:000040D4
.text:000040D4 ; ---------------------------------------------------------------------------
.text:000040D7                 align 4
.text:000040D7 _text           ends
.text:000040D7
.text:000040D8 ; ===========================================================================
.text:000040D8
.text:000040D8 ; Segment type: Pure code
.text:000040D8 ; Segment permissions: Read/Execute
.text:000040D8 _text           segment para public 'CODE' use32
.text:000040D8                 assume cs:_text
.text:000040D8                 ;org 40D8h
.text:000040D8 ; COMDAT (pick any)
.text:000040D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000040D8
.text:000040D8 ; =============== S U B R O U T I N E =======================================
.text:000040D8
.text:000040D8 ; Attributes: bp-based frame
.text:000040D8
.text:000040D8 ; void __stdcall MyStringCopy(char *, const char *)
.text:000040D8                 public ?MyStringCopy@@YGXPADPBD@Z
.text:000040D8 ?MyStringCopy@@YGXPADPBD@Z proc near    ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+689p
.text:000040D8                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+6D6p
.text:000040D8
.text:000040D8 var_4           = dword ptr -4
.text:000040D8 arg_0           = dword ptr  8
.text:000040D8 arg_4           = dword ptr  0Ch
.text:000040D8
.text:000040D8                 push    ebp
.text:000040D9                 mov     ebp, esp
.text:000040DB                 push    ecx
.text:000040DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040E3
.text:000040E3 loc_40E3:                               ; CODE XREF: MyStringCopy(char *,char const *)+47j
.text:000040E3                 mov     eax, [ebp+arg_0]
.text:000040E6                 mov     ecx, [ebp+arg_4]
.text:000040E9                 mov     dl, [ecx]
.text:000040EB                 mov     [eax], dl
.text:000040ED                 mov     eax, [ebp+arg_0]
.text:000040F0                 movsx   ecx, byte ptr [eax]
.text:000040F3                 mov     edx, [ebp+arg_0]
.text:000040F6                 add     edx, 1
.text:000040F9                 mov     [ebp+arg_0], edx
.text:000040FC                 mov     eax, [ebp+arg_4]
.text:000040FF                 add     eax, 1
.text:00004102                 mov     [ebp+arg_4], eax
.text:00004105                 test    ecx, ecx
.text:00004107                 jz      short loc_4112
.text:00004109                 mov     [ebp+var_4], 1
.text:00004110                 jmp     short loc_4119
.text:00004112 ; ---------------------------------------------------------------------------
.text:00004112
.text:00004112 loc_4112:                               ; CODE XREF: MyStringCopy(char *,char const *)+2Fj
.text:00004112                 mov     [ebp+var_4], 0
.text:00004119
.text:00004119 loc_4119:                               ; CODE XREF: MyStringCopy(char *,char const *)+38j
.text:00004119                 cmp     [ebp+var_4], 0
.text:0000411D                 jz      short loc_4121
.text:0000411F                 jmp     short loc_40E3
.text:00004121 ; ---------------------------------------------------------------------------
.text:00004121
.text:00004121 loc_4121:                               ; CODE XREF: MyStringCopy(char *,char const *)+45j
.text:00004121                 mov     esp, ebp
.text:00004123                 pop     ebp
.text:00004124                 retn    8
.text:00004124 ?MyStringCopy@@YGXPADPBD@Z endp
.text:00004124
.text:00004124 ; ---------------------------------------------------------------------------
.text:00004127                 align 4
.text:00004127 _text           ends
.text:00004127
.text:00004128 ; ===========================================================================
.text:00004128
.text:00004128 ; Segment type: Pure code
.text:00004128 ; Segment permissions: Read/Execute
.text:00004128 _text           segment para public 'CODE' use32
.text:00004128                 assume cs:_text
.text:00004128                 ;org 4128h
.text:00004128 ; COMDAT (pick any)
.text:00004128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004128
.text:00004128 ; =============== S U B R O U T I N E =======================================
.text:00004128
.text:00004128 ; Attributes: bp-based frame
.text:00004128
.text:00004128 ; char *__stdcall MyStpCpy(char *, const char *)
.text:00004128                 public ?MyStpCpy@@YGPADPADPBD@Z
.text:00004128 ?MyStpCpy@@YGPADPADPBD@Z proc near      ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+4F7p
.text:00004128                                         ; NArchive::N7z::AddProp32(char *,char const *,uint)+1Ap
.text:00004128
.text:00004128 var_4           = dword ptr -4
.text:00004128 arg_0           = dword ptr  8
.text:00004128 arg_4           = dword ptr  0Ch
.text:00004128
.text:00004128                 push    ebp
.text:00004129                 mov     ebp, esp
.text:0000412B                 push    ecx
.text:0000412C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004133
.text:00004133 loc_4133:                               ; CODE XREF: MyStpCpy(char *,char const *)+3Aj
.text:00004133                 mov     eax, [ebp+arg_4]
.text:00004136                 mov     cl, [eax]
.text:00004138                 mov     byte ptr [ebp+var_4+3], cl
.text:0000413B                 mov     edx, [ebp+arg_0]
.text:0000413E                 mov     al, byte ptr [ebp+var_4+3]
.text:00004141                 mov     [edx], al
.text:00004143                 movsx   ecx, byte ptr [ebp+var_4+3]
.text:00004147                 test    ecx, ecx
.text:00004149                 jnz     short loc_4150
.text:0000414B                 mov     eax, [ebp+arg_0]
.text:0000414E                 jmp     short loc_4164
.text:00004150 ; ---------------------------------------------------------------------------
.text:00004150
.text:00004150 loc_4150:                               ; CODE XREF: MyStpCpy(char *,char const *)+21j
.text:00004150                 mov     edx, [ebp+arg_4]
.text:00004153                 add     edx, 1
.text:00004156                 mov     [ebp+arg_4], edx
.text:00004159                 mov     eax, [ebp+arg_0]
.text:0000415C                 add     eax, 1
.text:0000415F                 mov     [ebp+arg_0], eax
.text:00004162                 jmp     short loc_4133
.text:00004164 ; ---------------------------------------------------------------------------
.text:00004164
.text:00004164 loc_4164:                               ; CODE XREF: MyStpCpy(char *,char const *)+26j
.text:00004164                 mov     esp, ebp
.text:00004166                 pop     ebp
.text:00004167                 retn    8
.text:00004167 ?MyStpCpy@@YGPADPADPBD@Z endp
.text:00004167
.text:00004167 ; ---------------------------------------------------------------------------
.text:0000416A                 align 4
.text:0000416A _text           ends
.text:0000416A
.text:0000416C ; ===========================================================================
.text:0000416C
.text:0000416C ; Segment type: Pure code
.text:0000416C ; Segment permissions: Read/Execute
.text:0000416C _text           segment para public 'CODE' use32
.text:0000416C                 assume cs:_text
.text:0000416C                 ;org 416Ch
.text:0000416C ; COMDAT (pick any)
.text:0000416C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000416C
.text:0000416C ; =============== S U B R O U T I N E =======================================
.text:0000416C
.text:0000416C ; Attributes: bp-based frame
.text:0000416C
.text:0000416C ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:0000416C                 public ?Len@AString@@QBEIXZ
.text:0000416C ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+79Fp
.text:0000416C
.text:0000416C var_4           = dword ptr -4
.text:0000416C
.text:0000416C                 push    ebp
.text:0000416D                 mov     ebp, esp
.text:0000416F                 push    ecx
.text:00004170                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004177                 mov     [ebp+var_4], ecx
.text:0000417A                 mov     eax, [ebp+var_4]
.text:0000417D                 mov     eax, [eax+4]
.text:00004180                 mov     esp, ebp
.text:00004182                 pop     ebp
.text:00004183                 retn
.text:00004183 ?Len@AString@@QBEIXZ endp
.text:00004183
.text:00004183 _text           ends
.text:00004183
.text:00004184 ; ===========================================================================
.text:00004184
.text:00004184 ; Segment type: Pure code
.text:00004184 ; Segment permissions: Read/Execute
.text:00004184 _text           segment para public 'CODE' use32
.text:00004184                 assume cs:_text
.text:00004184                 ;org 4184h
.text:00004184 ; COMDAT (pick any)
.text:00004184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004184
.text:00004184 ; =============== S U B R O U T I N E =======================================
.text:00004184
.text:00004184 ; Attributes: bp-based frame
.text:00004184
.text:00004184 ; void __stdcall NWindows::NCOM::PropVarEm_Set_UInt32(NWindows::NCOM *this, struct tagPROPVARIANT *, unsigned int)
.text:00004184                 public ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z
.text:00004184 ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z proc near
.text:00004184                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1A6p
.text:00004184                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1C6p ...
.text:00004184
.text:00004184 this            = dword ptr  8
.text:00004184 arg_4           = dword ptr  0Ch
.text:00004184
.text:00004184                 push    ebp
.text:00004185                 mov     ebp, esp
.text:00004187                 mov     eax, 13h
.text:0000418C                 mov     ecx, [ebp+this]
.text:0000418F                 mov     [ecx], ax
.text:00004192                 mov     edx, [ebp+this]
.text:00004195                 mov     eax, [ebp+arg_4]
.text:00004198                 mov     [edx+8], eax
.text:0000419B                 pop     ebp
.text:0000419C                 retn    8
.text:0000419C ?PropVarEm_Set_UInt32@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@I@Z endp
.text:0000419C
.text:0000419C ; ---------------------------------------------------------------------------
.text:0000419F                 align 10h
.text:0000419F _text           ends
.text:0000419F
.text:000041A0 ; ===========================================================================
.text:000041A0
.text:000041A0 ; Segment type: Pure code
.text:000041A0 ; Segment permissions: Read/Execute
.text:000041A0 _text           segment para public 'CODE' use32
.text:000041A0                 assume cs:_text
.text:000041A0                 ;org 41A0h
.text:000041A0 ; COMDAT (pick any)
.text:000041A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041A0
.text:000041A0 ; =============== S U B R O U T I N E =======================================
.text:000041A0
.text:000041A0 ; Attributes: bp-based frame
.text:000041A0
.text:000041A0 ; void __stdcall NWindows::NCOM::PropVarEm_Set_UInt64(NWindows::NCOM *this, struct tagPROPVARIANT *, unsigned __int64)
.text:000041A0                 public ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z
.text:000041A0 ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z proc near
.text:000041A0                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+98p
.text:000041A0                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F0p ...
.text:000041A0
.text:000041A0 this            = dword ptr  8
.text:000041A0 arg_4           = dword ptr  0Ch
.text:000041A0 arg_8           = qword ptr  10h
.text:000041A0
.text:000041A0                 push    ebp
.text:000041A1                 mov     ebp, esp
.text:000041A3                 mov     eax, 15h
.text:000041A8                 mov     ecx, [ebp+this]
.text:000041AB                 mov     [ecx], ax
.text:000041AE                 mov     edx, [ebp+this]
.text:000041B1                 mov     eax, [ebp+arg_4]
.text:000041B4                 mov     [edx+8], eax
.text:000041B7                 mov     ecx, dword ptr [ebp+arg_8]
.text:000041BA                 mov     [edx+0Ch], ecx
.text:000041BD                 pop     ebp
.text:000041BE                 retn    0Ch
.text:000041BE ?PropVarEm_Set_UInt64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z endp
.text:000041BE
.text:000041BE ; ---------------------------------------------------------------------------
.text:000041C1                 align 4
.text:000041C1 _text           ends
.text:000041C1
.text:000041C4 ; ===========================================================================
.text:000041C4
.text:000041C4 ; Segment type: Pure code
.text:000041C4 ; Segment permissions: Read/Execute
.text:000041C4 _text           segment para public 'CODE' use32
.text:000041C4                 assume cs:_text
.text:000041C4                 ;org 41C4h
.text:000041C4 ; COMDAT (pick any)
.text:000041C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041C4
.text:000041C4 ; =============== S U B R O U T I N E =======================================
.text:000041C4
.text:000041C4 ; Attributes: bp-based frame
.text:000041C4
.text:000041C4 ; void __stdcall NWindows::NCOM::PropVarEm_Set_Bool(NWindows::NCOM *this, struct tagPROPVARIANT *, bool)
.text:000041C4                 public ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z
.text:000041C4 ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z proc near
.text:000041C4                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+80p
.text:000041C4                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1F5p ...
.text:000041C4
.text:000041C4 this            = dword ptr  8
.text:000041C4 arg_4           = dword ptr  0Ch
.text:000041C4
.text:000041C4                 push    ebp
.text:000041C5                 mov     ebp, esp
.text:000041C7                 mov     eax, 0Bh
.text:000041CC                 mov     ecx, [ebp+this]
.text:000041CF                 mov     [ecx], ax
.text:000041D2                 movzx   edx, byte ptr [ebp+arg_4]
.text:000041D6                 neg     edx
.text:000041D8                 sbb     edx, edx
.text:000041DA                 mov     eax, [ebp+this]
.text:000041DD                 mov     [eax+8], dx
.text:000041E1                 pop     ebp
.text:000041E2                 retn    8
.text:000041E2 ?PropVarEm_Set_Bool@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_N@Z endp
.text:000041E2
.text:000041E2 ; ---------------------------------------------------------------------------
.text:000041E5                 align 4
.text:000041E5 _text           ends
.text:000041E5
.text:000041E8 ; ===========================================================================
.text:000041E8
.text:000041E8 ; Segment type: Pure code
.text:000041E8 ; Segment permissions: Read/Execute
.text:000041E8 _text           segment para public 'CODE' use32
.text:000041E8                 assume cs:_text
.text:000041E8                 ;org 41E8h
.text:000041E8 ; COMDAT (pick any)
.text:000041E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041E8
.text:000041E8 ; =============== S U B R O U T I N E =======================================
.text:000041E8
.text:000041E8 ; Attributes: bp-based frame
.text:000041E8
.text:000041E8 ; bool __thiscall NArchive::N7z::CUInt64DefVector::GetItem(NArchive::N7z::CUInt64DefVector *this, unsigned int, unsigned __int64 *)
.text:000041E8                 public ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z
.text:000041E8 ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z proc near
.text:000041E8                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+11Ap
.text:000041E8                                         ; NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)+22p
.text:000041E8
.text:000041E8 var_4           = dword ptr -4
.text:000041E8 arg_0           = dword ptr  8
.text:000041E8 arg_4           = dword ptr  0Ch
.text:000041E8
.text:000041E8                 push    ebp
.text:000041E9                 mov     ebp, esp
.text:000041EB                 push    ecx
.text:000041EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041F3                 mov     [ebp+var_4], ecx
.text:000041F6                 mov     ecx, [ebp+var_4]
.text:000041F9                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:000041FE                 cmp     [ebp+arg_0], eax
.text:00004201                 jnb     short loc_4236
.text:00004203                 mov     eax, [ebp+arg_0]
.text:00004206                 push    eax
.text:00004207                 mov     ecx, [ebp+var_4]
.text:0000420A                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:0000420F                 movzx   ecx, byte ptr [eax]
.text:00004212                 test    ecx, ecx
.text:00004214                 jz      short loc_4236
.text:00004216                 mov     edx, [ebp+arg_0]
.text:00004219                 push    edx
.text:0000421A                 mov     ecx, [ebp+var_4]
.text:0000421D                 add     ecx, 0Ch
.text:00004220                 call    ??A?$CRecordVector@_K@@QBEAB_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00004225                 mov     ecx, [ebp+arg_4]
.text:00004228                 mov     edx, [eax]
.text:0000422A                 mov     [ecx], edx
.text:0000422C                 mov     eax, [eax+4]
.text:0000422F                 mov     [ecx+4], eax
.text:00004232                 mov     al, 1
.text:00004234                 jmp     short loc_4248
.text:00004236 ; ---------------------------------------------------------------------------
.text:00004236
.text:00004236 loc_4236:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+19j
.text:00004236                                         ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+2Cj
.text:00004236                 mov     ecx, [ebp+arg_4]
.text:00004239                 mov     dword ptr [ecx], 0
.text:0000423F                 mov     dword ptr [ecx+4], 0
.text:00004246                 xor     al, al
.text:00004248
.text:00004248 loc_4248:                               ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+4Cj
.text:00004248                 add     esp, 4
.text:0000424B                 cmp     ebp, esp
.text:0000424D                 call    __RTC_CheckEsp
.text:00004252                 mov     esp, ebp
.text:00004254                 pop     ebp
.text:00004255                 retn    8
.text:00004255 ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z endp
.text:00004255
.text:00004255 _text           ends
.text:00004255
.text:00004258 ; ===========================================================================
.text:00004258
.text:00004258 ; Segment type: Pure code
.text:00004258 ; Segment permissions: Read/Execute
.text:00004258 _text           segment para public 'CODE' use32
.text:00004258                 assume cs:_text
.text:00004258                 ;org 4258h
.text:00004258 ; COMDAT (pick any)
.text:00004258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004258
.text:00004258 ; =============== S U B R O U T I N E =======================================
.text:00004258
.text:00004258 ; Attributes: bp-based frame
.text:00004258
.text:00004258 ; bool __thiscall NArchive::N7z::CDatabase::IsItemAnti(NArchive::N7z::CDatabase *this, unsigned int)
.text:00004258                 public ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
.text:00004258 ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z proc near
.text:00004258                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+20Cp
.text:00004258
.text:00004258 var_8           = dword ptr -8
.text:00004258 var_4           = dword ptr -4
.text:00004258 arg_0           = dword ptr  8
.text:00004258
.text:00004258                 push    ebp
.text:00004259                 mov     ebp, esp
.text:0000425B                 sub     esp, 8
.text:0000425E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004265                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000426C                 mov     [ebp+var_4], ecx
.text:0000426F                 mov     ecx, [ebp+var_4]
.text:00004272                 add     ecx, 0C4h ; '-'
.text:00004278                 call    ?Size@?$CRecordVector@_N@@QBEIXZ ; CRecordVector<bool>::Size(void)
.text:0000427D                 cmp     [ebp+arg_0], eax
.text:00004280                 jnb     short loc_42A4
.text:00004282                 mov     eax, [ebp+arg_0]
.text:00004285                 push    eax
.text:00004286                 mov     ecx, [ebp+var_4]
.text:00004289                 add     ecx, 0C4h ; '-'
.text:0000428F                 call    ??A?$CRecordVector@_N@@QBEAB_NI@Z ; CRecordVector<bool>::operator[](uint)
.text:00004294                 movzx   ecx, byte ptr [eax]
.text:00004297                 test    ecx, ecx
.text:00004299                 jz      short loc_42A4
.text:0000429B                 mov     [ebp+var_8], 1
.text:000042A2                 jmp     short loc_42AB
.text:000042A4 ; ---------------------------------------------------------------------------
.text:000042A4
.text:000042A4 loc_42A4:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+28j
.text:000042A4                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+41j
.text:000042A4                 mov     [ebp+var_8], 0
.text:000042AB
.text:000042AB loc_42AB:                               ; CODE XREF: NArchive::N7z::CDatabase::IsItemAnti(uint)+4Aj
.text:000042AB                 mov     al, byte ptr [ebp+var_8]
.text:000042AE                 add     esp, 8
.text:000042B1                 cmp     ebp, esp
.text:000042B3                 call    __RTC_CheckEsp
.text:000042B8                 mov     esp, ebp
.text:000042BA                 pop     ebp
.text:000042BB                 retn    4
.text:000042BB ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z endp
.text:000042BB
.text:000042BB ; ---------------------------------------------------------------------------
.text:000042BE                 align 10h
.text:000042BE _text           ends
.text:000042BE
.text:000042C0 ; ===========================================================================
.text:000042C0
.text:000042C0 ; Segment type: Pure code
.text:000042C0 ; Segment permissions: Read/Execute
.text:000042C0 _text           segment para public 'CODE' use32
.text:000042C0                 assume cs:_text
.text:000042C0                 ;org 42C0h
.text:000042C0 ; COMDAT (pick any)
.text:000042C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000042C0
.text:000042C0 ; =============== S U B R O U T I N E =======================================
.text:000042C0
.text:000042C0 ; Attributes: bp-based frame
.text:000042C0
.text:000042C0 ; unsigned __int64 __thiscall NArchive::N7z::CDbEx::GetFolderFullPackSize(NArchive::N7z::CDbEx *this, unsigned int)
.text:000042C0                 public ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z
.text:000042C0 ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z proc near
.text:000042C0                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E5p
.text:000042C0
.text:000042C0 var_4           = dword ptr -4
.text:000042C0 arg_0           = dword ptr  8
.text:000042C0
.text:000042C0                 push    ebp
.text:000042C1                 mov     ebp, esp
.text:000042C3                 push    ecx
.text:000042C4                 push    ebx
.text:000042C5                 push    esi
.text:000042C6                 push    edi
.text:000042C7                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042CE                 mov     [ebp+var_4], ecx
.text:000042D1                 mov     ecx, [ebp+var_4]
.text:000042D4                 add     ecx, 8
.text:000042D7                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000042DC                 mov     esi, eax
.text:000042DE                 mov     ecx, [ebp+var_4]
.text:000042E1                 add     ecx, 30h ; '0'
.text:000042E4                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:000042E9                 mov     ecx, [ebp+arg_0]
.text:000042EC                 mov     edi, [eax+ecx*4+4]
.text:000042F0                 mov     ecx, [ebp+var_4]
.text:000042F3                 add     ecx, 8
.text:000042F6                 call    ??B?$CObjArray@_K@@QBEPB_KXZ ; CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)
.text:000042FB                 mov     ebx, eax
.text:000042FD                 mov     ecx, [ebp+var_4]
.text:00004300                 add     ecx, 30h ; '0'
.text:00004303                 call    ??B?$CObjArray@I@@QBEPBIXZ ; CObjArray<uint>::operator uint const *(void)
.text:00004308                 mov     edx, [ebp+arg_0]
.text:0000430B                 mov     eax, [eax+edx*4]
.text:0000430E                 mov     ecx, [esi+edi*8]
.text:00004311                 sub     ecx, [ebx+eax*8]
.text:00004314                 mov     edx, [esi+edi*8+4]
.text:00004318                 sbb     edx, [ebx+eax*8+4]
.text:0000431C                 mov     eax, ecx
.text:0000431E                 pop     edi
.text:0000431F                 pop     esi
.text:00004320                 pop     ebx
.text:00004321                 add     esp, 4
.text:00004324                 cmp     ebp, esp
.text:00004326                 call    __RTC_CheckEsp
.text:0000432B                 mov     esp, ebp
.text:0000432D                 pop     ebp
.text:0000432E                 retn    4
.text:0000432E ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z endp
.text:0000432E
.text:0000432E ; ---------------------------------------------------------------------------
.text:00004331                 align 4
.text:00004331 _text           ends
.text:00004331
.text:00004334 ; ===========================================================================
.text:00004334
.text:00004334 ; Segment type: Pure code
.text:00004334 ; Segment permissions: Read/Execute
.text:00004334 _text           segment para public 'CODE' use32
.text:00004334                 assume cs:_text
.text:00004334                 ;org 4334h
.text:00004334 ; COMDAT (pick any)
.text:00004334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004334
.text:00004334 ; =============== S U B R O U T I N E =======================================
.text:00004334
.text:00004334 ; Attributes: bp-based frame
.text:00004334
.text:00004334 ; void __stdcall NWindows::NCOM::PropVarEm_Set_FileTime64(NWindows::NCOM *this, struct tagPROPVARIANT *, unsigned __int64)
.text:00004334                 public ?PropVarEm_Set_FileTime64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z
.text:00004334 ?PropVarEm_Set_FileTime64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z proc near
.text:00004334                                         ; CODE XREF: NArchive::N7z::SetFileTimeProp_From_UInt64Def(tagPROPVARIANT *,NArchive::N7z::CUInt64DefVector const &,int)+3Ap
.text:00004334
.text:00004334 this            = dword ptr  8
.text:00004334 arg_4           = dword ptr  0Ch
.text:00004334 arg_8           = qword ptr  10h
.text:00004334
.text:00004334                 push    ebp
.text:00004335                 mov     ebp, esp
.text:00004337                 mov     eax, 40h ; '@'
.text:0000433C                 mov     ecx, [ebp+this]
.text:0000433F                 mov     [ecx], ax
.text:00004342                 mov     edx, [ebp+arg_4]
.text:00004345                 mov     eax, [ebp+this]
.text:00004348                 mov     [eax+8], edx
.text:0000434B                 mov     eax, [ebp+arg_4]
.text:0000434E                 mov     edx, dword ptr [ebp+arg_8]
.text:00004351                 mov     cl, 20h ; ' '
.text:00004353                 call    __aullshr
.text:00004358                 mov     ecx, [ebp+this]
.text:0000435B                 mov     [ecx+0Ch], eax
.text:0000435E                 cmp     ebp, esp
.text:00004360                 call    __RTC_CheckEsp
.text:00004365                 pop     ebp
.text:00004366                 retn    0Ch
.text:00004366 ?PropVarEm_Set_FileTime64@NCOM@NWindows@@YGXPAUtagPROPVARIANT@@_K@Z endp
.text:00004366
.text:00004366 ; ---------------------------------------------------------------------------
.text:00004369                 align 4
.text:00004369 _text           ends
.text:00004369
.text:0000436C ; ===========================================================================
.text:0000436C
.text:0000436C ; Segment type: Pure code
.text:0000436C ; Segment permissions: Read/Execute
.text:0000436C _text           segment para public 'CODE' use32
.text:0000436C                 assume cs:_text
.text:0000436C                 ;org 436Ch
.text:0000436C ; COMDAT (pick any)
.text:0000436C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000436C
.text:0000436C ; =============== S U B R O U T I N E =======================================
.text:0000436C
.text:0000436C ; Attributes: bp-based frame
.text:0000436C
.text:0000436C ; _DWORD __thiscall NArchive::N7z::CInArchive::CInArchive(NArchive::N7z::CInArchive *this, bool)
.text:0000436C                 public ??0CInArchive@N7z@NArchive@@QAE@_N@Z
.text:0000436C ??0CInArchive@N7z@NArchive@@QAE@_N@Z proc near
.text:0000436C                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+CFp
.text:0000436C
.text:0000436C var_4           = dword ptr -4
.text:0000436C arg_0           = byte ptr  8
.text:0000436C
.text:0000436C                 push    ebp
.text:0000436D                 mov     ebp, esp
.text:0000436F                 push    ecx
.text:00004370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004377                 mov     [ebp+var_4], ecx
.text:0000437A                 mov     ecx, [ebp+var_4]
.text:0000437D                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00004382                 mov     eax, [ebp+var_4]
.text:00004385                 mov     dword ptr [eax+4], 0
.text:0000438C                 mov     ecx, [ebp+var_4]
.text:0000438F                 mov     dl, [ebp+arg_0]
.text:00004392                 mov     [ecx+78h], dl
.text:00004395                 mov     eax, [ebp+var_4]
.text:00004398                 add     esp, 4
.text:0000439B                 cmp     ebp, esp
.text:0000439D                 call    __RTC_CheckEsp
.text:000043A2                 mov     esp, ebp
.text:000043A4                 pop     ebp
.text:000043A5                 retn    4
.text:000043A5 ??0CInArchive@N7z@NArchive@@QAE@_N@Z endp
.text:000043A5
.text:000043A5 _text           ends
.text:000043A5
.text:000043A8 ; ===========================================================================
.text:000043A8
.text:000043A8 ; Segment type: Pure code
.text:000043A8 ; Segment permissions: Read/Execute
.text:000043A8 _text           segment para public 'CODE' use32
.text:000043A8                 assume cs:_text
.text:000043A8                 ;org 43A8h
.text:000043A8 ; COMDAT (pick any)
.text:000043A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043A8
.text:000043A8 ; =============== S U B R O U T I N E =======================================
.text:000043A8
.text:000043A8 ; Attributes: bp-based frame
.text:000043A8
.text:000043A8 ; _DWORD __thiscall NArchive::N7z::CInArchive::~CInArchive(NArchive::N7z::CInArchive *__hidden this)
.text:000043A8                 public ??1CInArchive@N7z@NArchive@@QAE@XZ
.text:000043A8 ??1CInArchive@N7z@NArchive@@QAE@XZ proc near
.text:000043A8                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+12Cp
.text:000043A8                                         ; NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1E1p ...
.text:000043A8
.text:000043A8 var_4           = dword ptr -4
.text:000043A8
.text:000043A8                 push    ebp
.text:000043A9                 mov     ebp, esp
.text:000043AB                 push    ecx
.text:000043AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043B3                 mov     [ebp+var_4], ecx
.text:000043B6                 mov     ecx, [ebp+var_4]
.text:000043B9                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:000043BE                 add     esp, 4
.text:000043C1                 cmp     ebp, esp
.text:000043C3                 call    __RTC_CheckEsp
.text:000043C8                 mov     esp, ebp
.text:000043CA                 pop     ebp
.text:000043CB                 retn
.text:000043CB ??1CInArchive@N7z@NArchive@@QAE@XZ endp
.text:000043CB
.text:000043CB _text           ends
.text:000043CB
.text:000043CC ; ===========================================================================
.text:000043CC
.text:000043CC ; Segment type: Pure code
.text:000043CC ; Segment permissions: Read/Execute
.text:000043CC _text           segment para public 'CODE' use32
.text:000043CC                 assume cs:_text
.text:000043CC                 ;org 43CCh
.text:000043CC ; COMDAT (pick any)
.text:000043CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043CC
.text:000043CC ; =============== S U B R O U T I N E =======================================
.text:000043CC
.text:000043CC ; Attributes: bp-based frame
.text:000043CC
.text:000043CC ; void __thiscall UString::Empty(UString *__hidden this)
.text:000043CC                 public ?Empty@UString@@QAEXXZ
.text:000043CC ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: NArchive::N7z::CHandler::Close(void)+71p
.text:000043CC
.text:000043CC var_4           = dword ptr -4
.text:000043CC
.text:000043CC                 push    ebp
.text:000043CD                 mov     ebp, esp
.text:000043CF                 push    ecx
.text:000043D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043D7                 mov     [ebp+var_4], ecx
.text:000043DA                 mov     eax, [ebp+var_4]
.text:000043DD                 mov     dword ptr [eax+4], 0
.text:000043E4                 mov     ecx, [ebp+var_4]
.text:000043E7                 mov     edx, [ecx]
.text:000043E9                 xor     eax, eax
.text:000043EB                 mov     [edx], ax
.text:000043EE                 mov     esp, ebp
.text:000043F0                 pop     ebp
.text:000043F1                 retn
.text:000043F1 ?Empty@UString@@QAEXXZ endp
.text:000043F1
.text:000043F1 ; ---------------------------------------------------------------------------
.text:000043F2                 align 4
.text:000043F2 _text           ends
.text:000043F2
.text:000043F4 ; ===========================================================================
.text:000043F4
.text:000043F4 ; Segment type: Pure code
.text:000043F4 ; Segment permissions: Read/Execute
.text:000043F4 _text           segment para public 'CODE' use32
.text:000043F4                 assume cs:_text
.text:000043F4                 ;org 43F4h
.text:000043F4 ; COMDAT (pick any)
.text:000043F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043F4
.text:000043F4 ; =============== S U B R O U T I N E =======================================
.text:000043F4
.text:000043F4 ; Attributes: bp-based frame
.text:000043F4
.text:000043F4 ; void __thiscall NArchive::N7z::CDbEx::Clear(NArchive::N7z::CDbEx *__hidden this)
.text:000043F4                 public ?Clear@CDbEx@N7z@NArchive@@QAEXXZ
.text:000043F4 ?Clear@CDbEx@N7z@NArchive@@QAEXXZ proc near
.text:000043F4                                         ; CODE XREF: NArchive::N7z::CHandler::Close(void)+4Fp
.text:000043F4
.text:000043F4 var_4           = dword ptr -4
.text:000043F4
.text:000043F4                 push    ebp
.text:000043F5                 mov     ebp, esp
.text:000043F7                 push    ecx
.text:000043F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043FF                 mov     [ebp+var_4], ecx
.text:00004402                 mov     eax, [ebp+var_4]
.text:00004405                 mov     byte ptr [eax+130h], 0
.text:0000440C                 mov     ecx, [ebp+var_4]
.text:0000440F                 mov     byte ptr [ecx+131h], 0
.text:00004416                 mov     edx, [ebp+var_4]
.text:00004419                 mov     byte ptr [edx+132h], 0
.text:00004420                 mov     eax, [ebp+var_4]
.text:00004423                 mov     byte ptr [eax+133h], 0
.text:0000442A                 mov     ecx, [ebp+var_4]
.text:0000442D                 mov     byte ptr [ecx+134h], 0
.text:00004434                 mov     edx, [ebp+var_4]
.text:00004437                 mov     byte ptr [edx+136h], 0
.text:0000443E                 mov     eax, [ebp+var_4]
.text:00004441                 mov     byte ptr [eax+135h], 0
.text:00004448                 mov     ecx, [ebp+var_4] ; this
.text:0000444B                 call    ?Clear@CDatabase@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CDatabase::Clear(void)
.text:00004450                 mov     ecx, [ebp+var_4]
.text:00004453                 add     ecx, 0E0h ; 'a' ; this
.text:00004459                 call    ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInArchiveInfo::Clear(void)
.text:0000445E                 mov     ecx, [ebp+var_4]
.text:00004461                 add     ecx, 118h
.text:00004467                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:0000446C                 mov     ecx, [ebp+var_4]
.text:0000446F                 add     ecx, 11Ch
.text:00004475                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:0000447A                 mov     ecx, [ebp+var_4]
.text:0000447D                 mov     dword ptr [ecx+120h], 0
.text:00004487                 mov     dword ptr [ecx+124h], 0
.text:00004491                 mov     edx, [ebp+var_4]
.text:00004494                 mov     dword ptr [edx+128h], 0
.text:0000449E                 mov     dword ptr [edx+12Ch], 0
.text:000044A8                 add     esp, 4
.text:000044AB                 cmp     ebp, esp
.text:000044AD                 call    __RTC_CheckEsp
.text:000044B2                 mov     esp, ebp
.text:000044B4                 pop     ebp
.text:000044B5                 retn
.text:000044B5 ?Clear@CDbEx@N7z@NArchive@@QAEXXZ endp
.text:000044B5
.text:000044B5 ; ---------------------------------------------------------------------------
.text:000044B6                 align 4
.text:000044B6 _text           ends
.text:000044B6
.text:000044B8 ; ===========================================================================
.text:000044B8
.text:000044B8 ; Segment type: Pure code
.text:000044B8 ; Segment permissions: Read/Execute
.text:000044B8 _text           segment para public 'CODE' use32
.text:000044B8                 assume cs:_text
.text:000044B8                 ;org 44B8h
.text:000044B8 ; COMDAT (pick any)
.text:000044B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044B8
.text:000044B8 ; =============== S U B R O U T I N E =======================================
.text:000044B8
.text:000044B8 ; Attributes: bp-based frame
.text:000044B8
.text:000044B8 ; void __thiscall NArchive::N7z::CDatabase::Clear(NArchive::N7z::CDatabase *__hidden this)
.text:000044B8                 public ?Clear@CDatabase@N7z@NArchive@@QAEXXZ
.text:000044B8 ?Clear@CDatabase@N7z@NArchive@@QAEXXZ proc near
.text:000044B8                                         ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+57p
.text:000044B8
.text:000044B8 var_4           = dword ptr -4
.text:000044B8
.text:000044B8                 push    ebp
.text:000044B9                 mov     ebp, esp
.text:000044BB                 push    ecx
.text:000044BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044C3                 mov     [ebp+var_4], ecx
.text:000044C6                 mov     ecx, [ebp+var_4] ; this
.text:000044C9                 call    ?Clear@CFolders@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFolders::Clear(void)
.text:000044CE                 mov     ecx, [ebp+var_4]
.text:000044D1                 add     ecx, 0D0h ; '-'
.text:000044D7                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:000044DC                 mov     ecx, [ebp+var_4]
.text:000044DF                 add     ecx, 0D8h ; '+'
.text:000044E5                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:000044EA                 mov     ecx, [ebp+var_4]
.text:000044ED                 add     ecx, 58h ; 'X'
.text:000044F0                 call    ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear(void)
.text:000044F5                 mov     ecx, [ebp+var_4]
.text:000044F8                 add     ecx, 64h ; 'd'  ; this
.text:000044FB                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00004500                 mov     ecx, [ebp+var_4]
.text:00004503                 add     ecx, 7Ch ; '|'  ; this
.text:00004506                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:0000450B                 mov     ecx, [ebp+var_4]
.text:0000450E                 add     ecx, 94h ; 'ö'  ; this
.text:00004514                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00004519                 mov     ecx, [ebp+var_4]
.text:0000451C                 add     ecx, 0ACh ; '¼' ; this
.text:00004522                 call    ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear(void)
.text:00004527                 mov     ecx, [ebp+var_4]
.text:0000452A                 add     ecx, 0C4h ; '-'
.text:00004530                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:00004535                 add     esp, 4
.text:00004538                 cmp     ebp, esp
.text:0000453A                 call    __RTC_CheckEsp
.text:0000453F                 mov     esp, ebp
.text:00004541                 pop     ebp
.text:00004542                 retn
.text:00004542 ?Clear@CDatabase@N7z@NArchive@@QAEXXZ endp
.text:00004542
.text:00004542 ; ---------------------------------------------------------------------------
.text:00004543                 align 4
.text:00004543 _text           ends
.text:00004543
.text:00004544 ; ===========================================================================
.text:00004544
.text:00004544 ; Segment type: Pure code
.text:00004544 ; Segment permissions: Read/Execute
.text:00004544 _text           segment para public 'CODE' use32
.text:00004544                 assume cs:_text
.text:00004544                 ;org 4544h
.text:00004544 ; COMDAT (pick any)
.text:00004544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004544
.text:00004544 ; =============== S U B R O U T I N E =======================================
.text:00004544
.text:00004544 ; Attributes: bp-based frame
.text:00004544
.text:00004544 ; void __thiscall NArchive::N7z::CUInt64DefVector::Clear(NArchive::N7z::CUInt64DefVector *__hidden this)
.text:00004544                 public ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ
.text:00004544 ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ proc near
.text:00004544                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+43p
.text:00004544                                         ; NArchive::N7z::CDatabase::Clear(void)+4Ep ...
.text:00004544
.text:00004544 var_4           = dword ptr -4
.text:00004544
.text:00004544                 push    ebp
.text:00004545                 mov     ebp, esp
.text:00004547                 push    ecx
.text:00004548                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000454F                 mov     [ebp+var_4], ecx
.text:00004552                 mov     ecx, [ebp+var_4]
.text:00004555                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:0000455A                 mov     ecx, [ebp+var_4]
.text:0000455D                 add     ecx, 0Ch
.text:00004560                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00004565                 add     esp, 4
.text:00004568                 cmp     ebp, esp
.text:0000456A                 call    __RTC_CheckEsp
.text:0000456F                 mov     esp, ebp
.text:00004571                 pop     ebp
.text:00004572                 retn
.text:00004572 ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ endp
.text:00004572
.text:00004572 ; ---------------------------------------------------------------------------
.text:00004573                 align 4
.text:00004573 _text           ends
.text:00004573
.text:00004574 ; ===========================================================================
.text:00004574
.text:00004574 ; Segment type: Pure code
.text:00004574 ; Segment permissions: Read/Execute
.text:00004574 _text           segment para public 'CODE' use32
.text:00004574                 assume cs:_text
.text:00004574                 ;org 4574h
.text:00004574 ; COMDAT (pick any)
.text:00004574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004574
.text:00004574 ; =============== S U B R O U T I N E =======================================
.text:00004574
.text:00004574 ; Attributes: bp-based frame
.text:00004574
.text:00004574 ; void __thiscall NArchive::N7z::CFolders::Clear(NArchive::N7z::CFolders *__hidden this)
.text:00004574                 public ?Clear@CFolders@N7z@NArchive@@QAEXXZ
.text:00004574 ?Clear@CFolders@N7z@NArchive@@QAEXXZ proc near
.text:00004574                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+11p
.text:00004574
.text:00004574 var_4           = dword ptr -4
.text:00004574
.text:00004574                 push    ebp
.text:00004575                 mov     ebp, esp
.text:00004577                 push    ecx
.text:00004578                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000457F                 mov     [ebp+var_4], ecx
.text:00004582                 mov     eax, [ebp+var_4]
.text:00004585                 mov     dword ptr [eax], 0
.text:0000458B                 mov     ecx, [ebp+var_4]
.text:0000458E                 add     ecx, 8
.text:00004591                 call    ?Free@?$CObjArray@_K@@QAEXXZ ; CObjArray<unsigned __int64>::Free(void)
.text:00004596                 mov     ecx, [ebp+var_4]
.text:00004599                 mov     dword ptr [ecx+4], 0
.text:000045A0                 mov     ecx, [ebp+var_4]
.text:000045A3                 add     ecx, 0Ch        ; this
.text:000045A6                 call    ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::Clear(void)
.text:000045AB                 mov     ecx, [ebp+var_4]
.text:000045AE                 add     ecx, 24h ; '$'
.text:000045B1                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:000045B6                 mov     ecx, [ebp+var_4]
.text:000045B9                 add     ecx, 28h ; '('
.text:000045BC                 call    ?Free@?$CObjArray@_K@@QAEXXZ ; CObjArray<unsigned __int64>::Free(void)
.text:000045C1                 mov     ecx, [ebp+var_4]
.text:000045C4                 add     ecx, 2Ch ; ','
.text:000045C7                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:000045CC                 mov     ecx, [ebp+var_4]
.text:000045CF                 add     ecx, 30h ; '0'
.text:000045D2                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:000045D7                 mov     ecx, [ebp+var_4]
.text:000045DA                 add     ecx, 34h ; '4'
.text:000045DD                 call    ?Free@?$CObjArray@E@@QAEXXZ ; CObjArray<uchar>::Free(void)
.text:000045E2                 mov     ecx, [ebp+var_4]
.text:000045E5                 add     ecx, 38h ; '8'
.text:000045E8                 call    ?Free@?$CObjArray@I@@QAEXXZ ; CObjArray<uint>::Free(void)
.text:000045ED                 mov     ecx, [ebp+var_4]
.text:000045F0                 add     ecx, 3Ch ; '<'
.text:000045F3                 call    ?Free@?$CBuffer@E@@QAEXXZ ; CBuffer<uchar>::Free(void)
.text:000045F8                 add     esp, 4
.text:000045FB                 cmp     ebp, esp
.text:000045FD                 call    __RTC_CheckEsp
.text:00004602                 mov     esp, ebp
.text:00004604                 pop     ebp
.text:00004605                 retn
.text:00004605 ?Clear@CFolders@N7z@NArchive@@QAEXXZ endp
.text:00004605
.text:00004605 ; ---------------------------------------------------------------------------
.text:00004606                 align 4
.text:00004606 _text           ends
.text:00004606
.text:00004608 ; ===========================================================================
.text:00004608
.text:00004608 ; Segment type: Pure code
.text:00004608 ; Segment permissions: Read/Execute
.text:00004608 _text           segment para public 'CODE' use32
.text:00004608                 assume cs:_text
.text:00004608                 ;org 4608h
.text:00004608 ; COMDAT (pick any)
.text:00004608                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004608
.text:00004608 ; =============== S U B R O U T I N E =======================================
.text:00004608
.text:00004608 ; Attributes: bp-based frame
.text:00004608
.text:00004608 ; void __thiscall NArchive::N7z::CUInt32DefVector::Clear(NArchive::N7z::CUInt32DefVector *__hidden this)
.text:00004608                 public ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ
.text:00004608 ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ proc near
.text:00004608                                         ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+32p
.text:00004608
.text:00004608 var_4           = dword ptr -4
.text:00004608
.text:00004608                 push    ebp
.text:00004609                 mov     ebp, esp
.text:0000460B                 push    ecx
.text:0000460C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004613                 mov     [ebp+var_4], ecx
.text:00004616                 mov     ecx, [ebp+var_4]
.text:00004619                 call    ?Clear@?$CRecordVector@_N@@QAEXXZ ; CRecordVector<bool>::Clear(void)
.text:0000461E                 mov     ecx, [ebp+var_4]
.text:00004621                 add     ecx, 0Ch
.text:00004624                 call    ?Clear@?$CRecordVector@I@@QAEXXZ ; CRecordVector<uint>::Clear(void)
.text:00004629                 add     esp, 4
.text:0000462C                 cmp     ebp, esp
.text:0000462E                 call    __RTC_CheckEsp
.text:00004633                 mov     esp, ebp
.text:00004635                 pop     ebp
.text:00004636                 retn
.text:00004636 ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ endp
.text:00004636
.text:00004636 ; ---------------------------------------------------------------------------
.text:00004637                 align 4
.text:00004637 _text           ends
.text:00004637
.text:00004638 ; ===========================================================================
.text:00004638
.text:00004638 ; Segment type: Pure code
.text:00004638 ; Segment permissions: Read/Execute
.text:00004638 _text           segment para public 'CODE' use32
.text:00004638                 assume cs:_text
.text:00004638                 ;org 4638h
.text:00004638 ; COMDAT (pick any)
.text:00004638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004638
.text:00004638 ; =============== S U B R O U T I N E =======================================
.text:00004638
.text:00004638 ; Attributes: bp-based frame
.text:00004638
.text:00004638 ; void __thiscall NArchive::N7z::CInArchiveInfo::Clear(NArchive::N7z::CInArchiveInfo *__hidden this)
.text:00004638                 public ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ
.text:00004638 ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ proc near
.text:00004638                                         ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+65p
.text:00004638
.text:00004638 var_4           = dword ptr -4
.text:00004638
.text:00004638                 push    ebp
.text:00004639                 mov     ebp, esp
.text:0000463B                 push    ecx
.text:0000463C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004643                 mov     [ebp+var_4], ecx
.text:00004646                 mov     eax, [ebp+var_4]
.text:00004649                 mov     dword ptr [eax+8], 0
.text:00004650                 mov     dword ptr [eax+0Ch], 0
.text:00004657                 mov     ecx, [ebp+var_4]
.text:0000465A                 mov     dword ptr [ecx+10h], 0
.text:00004661                 mov     dword ptr [ecx+14h], 0
.text:00004668                 mov     edx, [ebp+var_4]
.text:0000466B                 mov     dword ptr [edx+18h], 0
.text:00004672                 mov     dword ptr [edx+1Ch], 0
.text:00004679                 mov     eax, [ebp+var_4]
.text:0000467C                 mov     dword ptr [eax+20h], 0
.text:00004683                 mov     dword ptr [eax+24h], 0
.text:0000468A                 mov     ecx, [ebp+var_4]
.text:0000468D                 add     ecx, 28h ; '('
.text:00004690                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:00004695                 add     esp, 4
.text:00004698                 cmp     ebp, esp
.text:0000469A                 call    __RTC_CheckEsp
.text:0000469F                 mov     esp, ebp
.text:000046A1                 pop     ebp
.text:000046A2                 retn
.text:000046A2 ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ endp
.text:000046A2
.text:000046A2 ; ---------------------------------------------------------------------------
.text:000046A3                 align 4
.text:000046A3 _text           ends
.text:000046A3
.text:000046A4 ; ===========================================================================
.text:000046A4
.text:000046A4 ; Segment type: Pure code
.text:000046A4 ; Segment permissions: Read/Execute
.text:000046A4 _text           segment para public 'CODE' use32
.text:000046A4                 assume cs:_text
.text:000046A4                 ;org 46A4h
.text:000046A4 ; COMDAT (pick any)
.text:000046A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046A4
.text:000046A4 ; =============== S U B R O U T I N E =======================================
.text:000046A4
.text:000046A4 ; Attributes: bp-based frame
.text:000046A4
.text:000046A4 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:000046A4                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:000046A4 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:000046A4                                         ; CODE XREF: CProps::CProps(void)+11p
.text:000046A4
.text:000046A4 var_4           = dword ptr -4
.text:000046A4
.text:000046A4                 push    ebp
.text:000046A5                 mov     ebp, esp
.text:000046A7                 push    ecx
.text:000046A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046AF                 mov     [ebp+var_4], ecx
.text:000046B2                 mov     ecx, [ebp+var_4]
.text:000046B5                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000046BA                 mov     eax, [ebp+var_4]
.text:000046BD                 add     esp, 4
.text:000046C0                 cmp     ebp, esp
.text:000046C2                 call    __RTC_CheckEsp
.text:000046C7                 mov     esp, ebp
.text:000046C9                 pop     ebp
.text:000046CA                 retn
.text:000046CA ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:000046CA
.text:000046CA ; ---------------------------------------------------------------------------
.text:000046CB                 align 4
.text:000046CB _text           ends
.text:000046CB
.text:000046CC ; ===========================================================================
.text:000046CC
.text:000046CC ; Segment type: Pure code
.text:000046CC ; Segment permissions: Read/Execute
.text:000046CC _text           segment para public 'CODE' use32
.text:000046CC                 assume cs:_text
.text:000046CC                 ;org 46CCh
.text:000046CC ; COMDAT (pick any)
.text:000046CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046CC
.text:000046CC ; =============== S U B R O U T I N E =======================================
.text:000046CC
.text:000046CC ; Attributes: bp-based frame
.text:000046CC
.text:000046CC ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:000046CC                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:000046CC ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:000046CC                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:000046CC
.text:000046CC var_20          = dword ptr -20h
.text:000046CC var_1C          = dword ptr -1Ch
.text:000046CC var_18          = dword ptr -18h
.text:000046CC var_14          = dword ptr -14h
.text:000046CC var_10          = dword ptr -10h
.text:000046CC var_C           = dword ptr -0Ch
.text:000046CC var_4           = dword ptr -4
.text:000046CC
.text:000046CC                 push    ebp
.text:000046CD                 mov     ebp, esp
.text:000046CF                 push    0FFFFFFFFh
.text:000046D1                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:000046D6                 mov     eax, large fs:0
.text:000046DC                 push    eax
.text:000046DD                 sub     esp, 14h
.text:000046E0                 mov     eax, 0CCCCCCCCh
.text:000046E5                 mov     [ebp+var_20], eax
.text:000046E8                 mov     [ebp+var_1C], eax
.text:000046EB                 mov     [ebp+var_18], eax
.text:000046EE                 mov     [ebp+var_14], eax
.text:000046F1                 mov     [ebp+var_10], eax
.text:000046F4                 mov     eax, dword ptr ds:___security_cookie
.text:000046F9                 xor     eax, ebp
.text:000046FB                 push    eax
.text:000046FC                 lea     eax, [ebp+var_C]
.text:000046FF                 mov     large fs:0, eax
.text:00004705                 mov     [ebp+var_10], ecx
.text:00004708                 mov     [ebp+var_4], 0
.text:0000470F                 mov     ecx, [ebp+var_10]
.text:00004712                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004717                 mov     [ebp+var_14], eax
.text:0000471A
.text:0000471A loc_471A:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_475Cj
.text:0000471A                 cmp     [ebp+var_14], 0
.text:0000471E                 jz      short loc_475E
.text:00004720                 mov     eax, [ebp+var_14]
.text:00004723                 sub     eax, 1
.text:00004726                 mov     [ebp+var_14], eax
.text:00004729                 mov     ecx, [ebp+var_14]
.text:0000472C                 push    ecx
.text:0000472D                 mov     ecx, [ebp+var_10]
.text:00004730                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004735                 mov     edx, [eax]
.text:00004737                 mov     [ebp+var_1C], edx
.text:0000473A                 mov     eax, [ebp+var_1C]
.text:0000473D                 mov     [ebp+var_18], eax
.text:00004740                 cmp     [ebp+var_18], 0
.text:00004744                 jz      short loc_4755
.text:00004746                 push    1
.text:00004748                 mov     ecx, [ebp+var_18]
.text:0000474B                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00004750                 mov     [ebp+var_20], eax
.text:00004753                 jmp     short loc_475C
.text:00004755 ; ---------------------------------------------------------------------------
.text:00004755
.text:00004755 loc_4755:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00004755                 mov     [ebp+var_20], 0
.text:0000475C
.text:0000475C loc_475C:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:0000475C                 jmp     short loc_471A
.text:0000475E ; ---------------------------------------------------------------------------
.text:0000475E
.text:0000475E loc_475E:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:0000475E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004765                 mov     ecx, [ebp+var_10]
.text:00004768                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000476D                 mov     ecx, [ebp+var_C]
.text:00004770                 mov     large fs:0, ecx
.text:00004777                 pop     ecx
.text:00004778                 add     esp, 20h
.text:0000477B                 cmp     ebp, esp
.text:0000477D                 call    __RTC_CheckEsp
.text:00004782                 mov     esp, ebp
.text:00004784                 pop     ebp
.text:00004785                 retn
.text:00004785 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004785
.text:00004785 ; ---------------------------------------------------------------------------
.text:00004786                 align 4
.text:00004786 _text           ends
.text:00004786
.text$x:00004788 ; ===========================================================================
.text$x:00004788
.text$x:00004788 ; Segment type: Pure code
.text$x:00004788 ; Segment permissions: Read/Execute
.text$x:00004788 _text$x         segment para public 'CODE' use32
.text$x:00004788                 assume cs:_text$x
.text$x:00004788                 ;org 4788h
.text$x:00004788 ; COMDAT (pick associative to section at 46CC)
.text$x:00004788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004788
.text$x:00004788 ; =============== S U B R O U T I N E =======================================
.text$x:00004788
.text$x:00004788
.text$x:00004788 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00004788                                         ; DATA XREF: .xdata$x:000047B0o
.text$x:00004788                 mov     ecx, [ebp-10h]
.text$x:0000478B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000478B __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:0000478B
.text$x:00004790
.text$x:00004790 ; =============== S U B R O U T I N E =======================================
.text$x:00004790
.text$x:00004790
.text$x:00004790 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00004790                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00004790
.text$x:00004790 arg_4           = dword ptr  8
.text$x:00004790
.text$x:00004790                 mov     edx, [esp+arg_4]
.text$x:00004794                 lea     eax, [edx+0Ch]
.text$x:00004797                 mov     ecx, [edx-18h]
.text$x:0000479A                 xor     ecx, eax
.text$x:0000479C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047A1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:000047A6                 jmp     ___CxxFrameHandler3
.text$x:000047A6 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:000047A6
.text$x:000047A6 ; ---------------------------------------------------------------------------
.text$x:000047AB                 align 4
.text$x:000047AB _text$x         ends
.text$x:000047AB
.xdata$x:000047AC ; ===========================================================================
.xdata$x:000047AC
.xdata$x:000047AC ; Segment type: Pure data
.xdata$x:000047AC ; Segment permissions: Read
.xdata$x:000047AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000047AC                 assume cs:_xdata$x
.xdata$x:000047AC                 ;org 47ACh
.xdata$x:000047AC ; COMDAT (pick associative to section at 46CC)
.xdata$x:000047AC __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:000047AC                                         ; DATA XREF: .xdata$x:000047BCo
.xdata$x:000047AD                 db 0FFh
.xdata$x:000047AE                 db 0FFh
.xdata$x:000047AF                 db 0FFh
.xdata$x:000047B0                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:000047B4 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:000047B4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:000047B5                 db    5
.xdata$x:000047B6                 db  93h ; ô
.xdata$x:000047B7                 db  19h
.xdata$x:000047B8                 db    1
.xdata$x:000047B9                 db    0
.xdata$x:000047BA                 db    0
.xdata$x:000047BB                 db    0
.xdata$x:000047BC                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:000047C0                 db    0
.xdata$x:000047C1                 db    0
.xdata$x:000047C2                 db    0
.xdata$x:000047C3                 db    0
.xdata$x:000047C4                 db    0
.xdata$x:000047C5                 db    0
.xdata$x:000047C6                 db    0
.xdata$x:000047C7                 db    0
.xdata$x:000047C8                 db    0
.xdata$x:000047C9                 db    0
.xdata$x:000047CA                 db    0
.xdata$x:000047CB                 db    0
.xdata$x:000047CC                 db    0
.xdata$x:000047CD                 db    0
.xdata$x:000047CE                 db    0
.xdata$x:000047CF                 db    0
.xdata$x:000047D0                 db    0
.xdata$x:000047D1                 db    0
.xdata$x:000047D2                 db    0
.xdata$x:000047D3                 db    0
.xdata$x:000047D4                 db    1
.xdata$x:000047D5                 db    0
.xdata$x:000047D6                 db    0
.xdata$x:000047D7                 db    0
.xdata$x:000047D7 _xdata$x        ends
.xdata$x:000047D7
.text:000047D8 ; ===========================================================================
.text:000047D8
.text:000047D8 ; Segment type: Pure code
.text:000047D8 ; Segment permissions: Read/Execute
.text:000047D8 _text           segment para public 'CODE' use32
.text:000047D8                 assume cs:_text
.text:000047D8                 ;org 47D8h
.text:000047D8 ; COMDAT (pick any)
.text:000047D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047D8
.text:000047D8 ; =============== S U B R O U T I N E =======================================
.text:000047D8
.text:000047D8 ; Attributes: bp-based frame
.text:000047D8
.text:000047D8 ; public: __thiscall CObjectVector<class COneMethodInfo>::CObjectVector<class COneMethodInfo>(void)
.text:000047D8                 public ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:000047D8 ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text:000047D8                                         ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+33p
.text:000047D8
.text:000047D8 var_4           = dword ptr -4
.text:000047D8
.text:000047D8                 push    ebp
.text:000047D9                 mov     ebp, esp
.text:000047DB                 push    ecx
.text:000047DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047E3                 mov     [ebp+var_4], ecx
.text:000047E6                 mov     ecx, [ebp+var_4]
.text:000047E9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000047EE                 mov     eax, [ebp+var_4]
.text:000047F1                 add     esp, 4
.text:000047F4                 cmp     ebp, esp
.text:000047F6                 call    __RTC_CheckEsp
.text:000047FB                 mov     esp, ebp
.text:000047FD                 pop     ebp
.text:000047FE                 retn
.text:000047FE ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text:000047FE
.text:000047FE ; ---------------------------------------------------------------------------
.text:000047FF                 align 10h
.text:000047FF _text           ends
.text:000047FF
.text:00004800 ; ===========================================================================
.text:00004800
.text:00004800 ; Segment type: Pure code
.text:00004800 ; Segment permissions: Read/Execute
.text:00004800 _text           segment para public 'CODE' use32
.text:00004800                 assume cs:_text
.text:00004800                 ;org 4800h
.text:00004800 ; COMDAT (pick any)
.text:00004800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004800
.text:00004800 ; =============== S U B R O U T I N E =======================================
.text:00004800
.text:00004800 ; Attributes: bp-based frame
.text:00004800
.text:00004800 ; public: __thiscall CObjectVector<class COneMethodInfo>::~CObjectVector<class COneMethodInfo>(void)
.text:00004800                 public ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:00004800 ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text:00004800                                         ; CODE XREF: __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0+6j
.text:00004800                                         ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)+4Cp ...
.text:00004800
.text:00004800 var_20          = dword ptr -20h
.text:00004800 var_1C          = dword ptr -1Ch
.text:00004800 var_18          = dword ptr -18h
.text:00004800 var_14          = dword ptr -14h
.text:00004800 var_10          = dword ptr -10h
.text:00004800 var_C           = dword ptr -0Ch
.text:00004800 var_4           = dword ptr -4
.text:00004800
.text:00004800                 push    ebp
.text:00004801                 mov     ebp, esp
.text:00004803                 push    0FFFFFFFFh
.text:00004805                 push    offset __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:0000480A                 mov     eax, large fs:0
.text:00004810                 push    eax
.text:00004811                 sub     esp, 14h
.text:00004814                 mov     eax, 0CCCCCCCCh
.text:00004819                 mov     [ebp+var_20], eax
.text:0000481C                 mov     [ebp+var_1C], eax
.text:0000481F                 mov     [ebp+var_18], eax
.text:00004822                 mov     [ebp+var_14], eax
.text:00004825                 mov     [ebp+var_10], eax
.text:00004828                 mov     eax, dword ptr ds:___security_cookie
.text:0000482D                 xor     eax, ebp
.text:0000482F                 push    eax
.text:00004830                 lea     eax, [ebp+var_C]
.text:00004833                 mov     large fs:0, eax
.text:00004839                 mov     [ebp+var_10], ecx
.text:0000483C                 mov     [ebp+var_4], 0
.text:00004843                 mov     ecx, [ebp+var_10]
.text:00004846                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:0000484B                 mov     [ebp+var_14], eax
.text:0000484E
.text:0000484E loc_484E:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void):loc_4890j
.text:0000484E                 cmp     [ebp+var_14], 0
.text:00004852                 jz      short loc_4892
.text:00004854                 mov     eax, [ebp+var_14]
.text:00004857                 sub     eax, 1
.text:0000485A                 mov     [ebp+var_14], eax
.text:0000485D                 mov     ecx, [ebp+var_14]
.text:00004860                 push    ecx
.text:00004861                 mov     ecx, [ebp+var_10]
.text:00004864                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004869                 mov     edx, [eax]
.text:0000486B                 mov     [ebp+var_1C], edx
.text:0000486E                 mov     eax, [ebp+var_1C]
.text:00004871                 mov     [ebp+var_18], eax
.text:00004874                 cmp     [ebp+var_18], 0
.text:00004878                 jz      short loc_4889
.text:0000487A                 push    1
.text:0000487C                 mov     ecx, [ebp+var_18]
.text:0000487F                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:00004884                 mov     [ebp+var_20], eax
.text:00004887                 jmp     short loc_4890
.text:00004889 ; ---------------------------------------------------------------------------
.text:00004889
.text:00004889 loc_4889:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+78j
.text:00004889                 mov     [ebp+var_20], 0
.text:00004890
.text:00004890 loc_4890:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+87j
.text:00004890                 jmp     short loc_484E
.text:00004892 ; ---------------------------------------------------------------------------
.text:00004892
.text:00004892 loc_4892:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+52j
.text:00004892                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004899                 mov     ecx, [ebp+var_10]
.text:0000489C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000048A1                 mov     ecx, [ebp+var_C]
.text:000048A4                 mov     large fs:0, ecx
.text:000048AB                 pop     ecx
.text:000048AC                 add     esp, 20h
.text:000048AF                 cmp     ebp, esp
.text:000048B1                 call    __RTC_CheckEsp
.text:000048B6                 mov     esp, ebp
.text:000048B8                 pop     ebp
.text:000048B9                 retn
.text:000048B9 ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text:000048B9
.text:000048B9 ; ---------------------------------------------------------------------------
.text:000048BA                 align 4
.text:000048BA _text           ends
.text:000048BA
.text$x:000048BC ; ===========================================================================
.text$x:000048BC
.text$x:000048BC ; Segment type: Pure code
.text$x:000048BC ; Segment permissions: Read/Execute
.text$x:000048BC _text$x         segment para public 'CODE' use32
.text$x:000048BC                 assume cs:_text$x
.text$x:000048BC                 ;org 48BCh
.text$x:000048BC ; COMDAT (pick associative to section at 4800)
.text$x:000048BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048BC
.text$x:000048BC ; =============== S U B R O U T I N E =======================================
.text$x:000048BC
.text$x:000048BC
.text$x:000048BC __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 proc near
.text$x:000048BC                                         ; DATA XREF: .xdata$x:000048E4o
.text$x:000048BC                 mov     ecx, [ebp-10h]
.text$x:000048BF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:000048BF __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 endp
.text$x:000048BF
.text$x:000048C4
.text$x:000048C4 ; =============== S U B R O U T I N E =======================================
.text$x:000048C4
.text$x:000048C4
.text$x:000048C4 __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text$x:000048C4                                         ; DATA XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+5o
.text$x:000048C4
.text$x:000048C4 arg_4           = dword ptr  8
.text$x:000048C4
.text$x:000048C4                 mov     edx, [esp+arg_4]
.text$x:000048C8                 lea     eax, [edx+0Ch]
.text$x:000048CB                 mov     ecx, [edx-18h]
.text$x:000048CE                 xor     ecx, eax
.text$x:000048D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048D5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text$x:000048DA                 jmp     ___CxxFrameHandler3
.text$x:000048DA __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text$x:000048DA
.text$x:000048DA ; ---------------------------------------------------------------------------
.text$x:000048DF                 align 10h
.text$x:000048DF _text$x         ends
.text$x:000048DF
.xdata$x:000048E0 ; ===========================================================================
.xdata$x:000048E0
.xdata$x:000048E0 ; Segment type: Pure data
.xdata$x:000048E0 ; Segment permissions: Read
.xdata$x:000048E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000048E0                 assume cs:_xdata$x
.xdata$x:000048E0                 ;org 48E0h
.xdata$x:000048E0 ; COMDAT (pick associative to section at 4800)
.xdata$x:000048E0 __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db 0FFh
.xdata$x:000048E0                                         ; DATA XREF: .xdata$x:000048F0o
.xdata$x:000048E1                 db 0FFh
.xdata$x:000048E2                 db 0FFh
.xdata$x:000048E3                 db 0FFh
.xdata$x:000048E4                 dd offset __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
.xdata$x:000048E8 __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db  22h ; "
.xdata$x:000048E8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ+11o
.xdata$x:000048E9                 db    5
.xdata$x:000048EA                 db  93h ; ô
.xdata$x:000048EB                 db  19h
.xdata$x:000048EC                 db    1
.xdata$x:000048ED                 db    0
.xdata$x:000048EE                 db    0
.xdata$x:000048EF                 db    0
.xdata$x:000048F0                 dd offset __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.xdata$x:000048F4                 db    0
.xdata$x:000048F5                 db    0
.xdata$x:000048F6                 db    0
.xdata$x:000048F7                 db    0
.xdata$x:000048F8                 db    0
.xdata$x:000048F9                 db    0
.xdata$x:000048FA                 db    0
.xdata$x:000048FB                 db    0
.xdata$x:000048FC                 db    0
.xdata$x:000048FD                 db    0
.xdata$x:000048FE                 db    0
.xdata$x:000048FF                 db    0
.xdata$x:00004900                 db    0
.xdata$x:00004901                 db    0
.xdata$x:00004902                 db    0
.xdata$x:00004903                 db    0
.xdata$x:00004904                 db    0
.xdata$x:00004905                 db    0
.xdata$x:00004906                 db    0
.xdata$x:00004907                 db    0
.xdata$x:00004908                 db    1
.xdata$x:00004909                 db    0
.xdata$x:0000490A                 db    0
.xdata$x:0000490B                 db    0
.xdata$x:0000490B _xdata$x        ends
.xdata$x:0000490B
.text:0000490C ; ===========================================================================
.text:0000490C
.text:0000490C ; Segment type: Pure code
.text:0000490C ; Segment permissions: Read/Execute
.text:0000490C _text           segment para public 'CODE' use32
.text:0000490C                 assume cs:_text
.text:0000490C                 ;org 490Ch
.text:0000490C ; COMDAT (pick any)
.text:0000490C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000490C
.text:0000490C ; =============== S U B R O U T I N E =======================================
.text:0000490C
.text:0000490C ; Attributes: bp-based frame
.text:0000490C
.text:0000490C ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:0000490C                 public ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:0000490C ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:0000490C                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+D9p
.text:0000490C
.text:0000490C var_4           = dword ptr -4
.text:0000490C
.text:0000490C                 push    ebp
.text:0000490D                 mov     ebp, esp
.text:0000490F                 push    ecx
.text:00004910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004917                 mov     [ebp+var_4], ecx
.text:0000491A                 mov     eax, [ebp+var_4]
.text:0000491D                 mov     dword ptr [eax], 0
.text:00004923                 mov     ecx, [ebp+var_4]
.text:00004926                 mov     dword ptr [ecx+4], 0
.text:0000492D                 mov     edx, [ebp+var_4]
.text:00004930                 mov     dword ptr [edx+8], 0
.text:00004937                 mov     eax, [ebp+var_4]
.text:0000493A                 mov     esp, ebp
.text:0000493C                 pop     ebp
.text:0000493D                 retn
.text:0000493D ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:0000493D
.text:0000493D ; ---------------------------------------------------------------------------
.text:0000493E                 align 10h
.text:0000493E _text           ends
.text:0000493E
.text:00004940 ; ===========================================================================
.text:00004940
.text:00004940 ; Segment type: Pure code
.text:00004940 ; Segment permissions: Read/Execute
.text:00004940 _text           segment para public 'CODE' use32
.text:00004940                 assume cs:_text
.text:00004940                 ;org 4940h
.text:00004940 ; COMDAT (pick any)
.text:00004940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004940
.text:00004940 ; =============== S U B R O U T I N E =======================================
.text:00004940
.text:00004940 ; Attributes: bp-based frame
.text:00004940
.text:00004940 ; public: __thiscall CRecordVector<struct NArchive::N7z::CBond2>::~CRecordVector<struct NArchive::N7z::CBond2>(void)
.text:00004940                 public ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
.text:00004940 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ proc near
.text:00004940                                         ; CODE XREF: __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$4+9j
.text:00004940                                         ; NArchive::N7z::CHandler::~CHandler(void)+4Fp ...
.text:00004940
.text:00004940 var_8           = dword ptr -8
.text:00004940 var_4           = dword ptr -4
.text:00004940
.text:00004940                 push    ebp
.text:00004941                 mov     ebp, esp
.text:00004943                 sub     esp, 8
.text:00004946                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000494D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004954                 mov     [ebp+var_4], ecx
.text:00004957                 mov     eax, [ebp+var_4]
.text:0000495A                 mov     ecx, [eax]
.text:0000495C                 mov     [ebp+var_8], ecx
.text:0000495F                 mov     edx, [ebp+var_8]
.text:00004962                 push    edx             ; void *
.text:00004963                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004968                 add     esp, 4
.text:0000496B                 add     esp, 8
.text:0000496E                 cmp     ebp, esp
.text:00004970                 call    __RTC_CheckEsp
.text:00004975                 mov     esp, ebp
.text:00004977                 pop     ebp
.text:00004978                 retn
.text:00004978 ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ endp
.text:00004978
.text:00004978 ; ---------------------------------------------------------------------------
.text:00004979                 align 4
.text:00004979 _text           ends
.text:00004979
.text:0000497C ; ===========================================================================
.text:0000497C
.text:0000497C ; Segment type: Pure code
.text:0000497C ; Segment permissions: Read/Execute
.text:0000497C _text           segment para public 'CODE' use32
.text:0000497C                 assume cs:_text
.text:0000497C                 ;org 497Ch
.text:0000497C ; COMDAT (pick any)
.text:0000497C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000497C
.text:0000497C ; =============== S U B R O U T I N E =======================================
.text:0000497C
.text:0000497C ; Attributes: bp-based frame
.text:0000497C
.text:0000497C ; public: void __thiscall CBuffer<unsigned char>::Free(void)
.text:0000497C                 public ?Free@?$CBuffer@E@@QAEXXZ
.text:0000497C ?Free@?$CBuffer@E@@QAEXXZ proc near     ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+1Fp
.text:0000497C                                         ; NArchive::N7z::CFolders::Clear(void)+7Fp
.text:0000497C
.text:0000497C var_8           = dword ptr -8
.text:0000497C var_4           = dword ptr -4
.text:0000497C
.text:0000497C                 push    ebp
.text:0000497D                 mov     ebp, esp
.text:0000497F                 sub     esp, 8
.text:00004982                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004989                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004990                 mov     [ebp+var_4], ecx
.text:00004993                 mov     eax, [ebp+var_4]
.text:00004996                 cmp     dword ptr [eax], 0
.text:00004999                 jz      short loc_49B8
.text:0000499B                 mov     ecx, [ebp+var_4]
.text:0000499E                 mov     edx, [ecx]
.text:000049A0                 mov     [ebp+var_8], edx
.text:000049A3                 mov     eax, [ebp+var_8]
.text:000049A6                 push    eax             ; void *
.text:000049A7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000049AC                 add     esp, 4
.text:000049AF                 mov     ecx, [ebp+var_4]
.text:000049B2                 mov     dword ptr [ecx], 0
.text:000049B8
.text:000049B8 loc_49B8:                               ; CODE XREF: CBuffer<uchar>::Free(void)+1Dj
.text:000049B8                 mov     edx, [ebp+var_4]
.text:000049BB                 mov     dword ptr [edx+4], 0
.text:000049C2                 add     esp, 8
.text:000049C5                 cmp     ebp, esp
.text:000049C7                 call    __RTC_CheckEsp
.text:000049CC                 mov     esp, ebp
.text:000049CE                 pop     ebp
.text:000049CF                 retn
.text:000049CF ?Free@?$CBuffer@E@@QAEXXZ endp
.text:000049CF
.text:000049CF _text           ends
.text:000049CF
.text:000049D0 ; ===========================================================================
.text:000049D0
.text:000049D0 ; Segment type: Pure code
.text:000049D0 ; Segment permissions: Read/Execute
.text:000049D0 _text           segment para public 'CODE' use32
.text:000049D0                 assume cs:_text
.text:000049D0                 ;org 49D0h
.text:000049D0 ; COMDAT (pick any)
.text:000049D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049D0
.text:000049D0 ; =============== S U B R O U T I N E =======================================
.text:000049D0
.text:000049D0 ; Attributes: bp-based frame
.text:000049D0
.text:000049D0 ; public: __thiscall CBuffer<unsigned char>::CBuffer<unsigned char>(void)
.text:000049D0                 public ??0?$CBuffer@E@@QAE@XZ
.text:000049D0 ??0?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CDatabase::CDatabase(void)+A8p
.text:000049D0                                         ; NArchive::N7z::CFolders::CFolders(void)+AEp
.text:000049D0
.text:000049D0 var_4           = dword ptr -4
.text:000049D0
.text:000049D0                 push    ebp
.text:000049D1                 mov     ebp, esp
.text:000049D3                 push    ecx
.text:000049D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049DB                 mov     [ebp+var_4], ecx
.text:000049DE                 mov     eax, [ebp+var_4]
.text:000049E1                 mov     dword ptr [eax], 0
.text:000049E7                 mov     ecx, [ebp+var_4]
.text:000049EA                 mov     dword ptr [ecx+4], 0
.text:000049F1                 mov     eax, [ebp+var_4]
.text:000049F4                 mov     esp, ebp
.text:000049F6                 pop     ebp
.text:000049F7                 retn
.text:000049F7 ??0?$CBuffer@E@@QAE@XZ endp
.text:000049F7
.text:000049F7 _text           ends
.text:000049F7
.text:000049F8 ; ===========================================================================
.text:000049F8
.text:000049F8 ; Segment type: Pure code
.text:000049F8 ; Segment permissions: Read/Execute
.text:000049F8 _text           segment para public 'CODE' use32
.text:000049F8                 assume cs:_text
.text:000049F8                 ;org 49F8h
.text:000049F8 ; COMDAT (pick any)
.text:000049F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049F8
.text:000049F8 ; =============== S U B R O U T I N E =======================================
.text:000049F8
.text:000049F8 ; Attributes: bp-based frame
.text:000049F8
.text:000049F8 ; public: __thiscall CBuffer<unsigned char>::~CBuffer<unsigned char>(void)
.text:000049F8                 public ??1?$CBuffer@E@@QAE@XZ
.text:000049F8 ??1?$CBuffer@E@@QAE@XZ proc near        ; CODE XREF: NArchive::N7z::CDatabase::~CDatabase(void)+4Fp
.text:000049F8                                         ; __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$7+9j ...
.text:000049F8
.text:000049F8 var_8           = dword ptr -8
.text:000049F8 var_4           = dword ptr -4
.text:000049F8
.text:000049F8                 push    ebp
.text:000049F9                 mov     ebp, esp
.text:000049FB                 sub     esp, 8
.text:000049FE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A0C                 mov     [ebp+var_4], ecx
.text:00004A0F                 mov     eax, [ebp+var_4]
.text:00004A12                 mov     ecx, [eax]
.text:00004A14                 mov     [ebp+var_8], ecx
.text:00004A17                 mov     edx, [ebp+var_8]
.text:00004A1A                 push    edx             ; void *
.text:00004A1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004A20                 add     esp, 4
.text:00004A23                 add     esp, 8
.text:00004A26                 cmp     ebp, esp
.text:00004A28                 call    __RTC_CheckEsp
.text:00004A2D                 mov     esp, ebp
.text:00004A2F                 pop     ebp
.text:00004A30                 retn
.text:00004A30 ??1?$CBuffer@E@@QAE@XZ endp
.text:00004A30
.text:00004A30 ; ---------------------------------------------------------------------------
.text:00004A31                 align 4
.text:00004A31 _text           ends
.text:00004A31
.text:00004A34 ; ===========================================================================
.text:00004A34
.text:00004A34 ; Segment type: Pure code
.text:00004A34 ; Segment permissions: Read/Execute
.text:00004A34 _text           segment para public 'CODE' use32
.text:00004A34                 assume cs:_text
.text:00004A34                 ;org 4A34h
.text:00004A34 ; COMDAT (pick any)
.text:00004A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A34
.text:00004A34 ; =============== S U B R O U T I N E =======================================
.text:00004A34
.text:00004A34 ; Attributes: bp-based frame
.text:00004A34
.text:00004A34 ; public: __thiscall CBuffer<unsigned char>::operator unsigned char *(void)
.text:00004A34                 public ??B?$CBuffer@E@@QAEPAEXZ
.text:00004A34 ??B?$CBuffer@E@@QAEPAEXZ proc near      ; CODE XREF: NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+54p
.text:00004A34                                         ; NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+A3p
.text:00004A34
.text:00004A34 var_4           = dword ptr -4
.text:00004A34
.text:00004A34                 push    ebp
.text:00004A35                 mov     ebp, esp
.text:00004A37                 push    ecx
.text:00004A38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A3F                 mov     [ebp+var_4], ecx
.text:00004A42                 mov     eax, [ebp+var_4]
.text:00004A45                 mov     eax, [eax]
.text:00004A47                 mov     esp, ebp
.text:00004A49                 pop     ebp
.text:00004A4A                 retn
.text:00004A4A ??B?$CBuffer@E@@QAEPAEXZ endp
.text:00004A4A
.text:00004A4A ; ---------------------------------------------------------------------------
.text:00004A4B                 align 4
.text:00004A4B _text           ends
.text:00004A4B
.text:00004A4C ; ===========================================================================
.text:00004A4C
.text:00004A4C ; Segment type: Pure code
.text:00004A4C ; Segment permissions: Read/Execute
.text:00004A4C _text           segment para public 'CODE' use32
.text:00004A4C                 assume cs:_text
.text:00004A4C                 ;org 4A4Ch
.text:00004A4C ; COMDAT (pick any)
.text:00004A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A4C
.text:00004A4C ; =============== S U B R O U T I N E =======================================
.text:00004A4C
.text:00004A4C ; Attributes: bp-based frame
.text:00004A4C
.text:00004A4C ; public: __thiscall CBuffer<unsigned char>::operator unsigned char const *(void)const
.text:00004A4C                 public ??B?$CBuffer@E@@QBEPBEXZ
.text:00004A4C ??B?$CBuffer@E@@QBEPBEXZ proc near      ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+49p
.text:00004A4C                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+ABp
.text:00004A4C
.text:00004A4C var_4           = dword ptr -4
.text:00004A4C
.text:00004A4C                 push    ebp
.text:00004A4D                 mov     ebp, esp
.text:00004A4F                 push    ecx
.text:00004A50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A57                 mov     [ebp+var_4], ecx
.text:00004A5A                 mov     eax, [ebp+var_4]
.text:00004A5D                 mov     eax, [eax]
.text:00004A5F                 mov     esp, ebp
.text:00004A61                 pop     ebp
.text:00004A62                 retn
.text:00004A62 ??B?$CBuffer@E@@QBEPBEXZ endp
.text:00004A62
.text:00004A62 ; ---------------------------------------------------------------------------
.text:00004A63                 align 4
.text:00004A63 _text           ends
.text:00004A63
.text:00004A64 ; ===========================================================================
.text:00004A64
.text:00004A64 ; Segment type: Pure code
.text:00004A64 ; Segment permissions: Read/Execute
.text:00004A64 _text           segment para public 'CODE' use32
.text:00004A64                 assume cs:_text
.text:00004A64                 ;org 4A64h
.text:00004A64 ; COMDAT (pick any)
.text:00004A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A64
.text:00004A64 ; =============== S U B R O U T I N E =======================================
.text:00004A64
.text:00004A64 ; Attributes: bp-based frame
.text:00004A64
.text:00004A64 ; public: __thiscall CRecordVector<bool>::CRecordVector<bool>(void)
.text:00004A64                 public ??0?$CRecordVector@_N@@QAE@XZ
.text:00004A64 ??0?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CDatabase::CDatabase(void)+96p
.text:00004A64                                         ; NArchive::N7z::CUInt64DefVector::CUInt64DefVector(void)+30p ...
.text:00004A64
.text:00004A64 var_4           = dword ptr -4
.text:00004A64
.text:00004A64                 push    ebp
.text:00004A65                 mov     ebp, esp
.text:00004A67                 push    ecx
.text:00004A68                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A6F                 mov     [ebp+var_4], ecx
.text:00004A72                 mov     eax, [ebp+var_4]
.text:00004A75                 mov     dword ptr [eax], 0
.text:00004A7B                 mov     ecx, [ebp+var_4]
.text:00004A7E                 mov     dword ptr [ecx+4], 0
.text:00004A85                 mov     edx, [ebp+var_4]
.text:00004A88                 mov     dword ptr [edx+8], 0
.text:00004A8F                 mov     eax, [ebp+var_4]
.text:00004A92                 mov     esp, ebp
.text:00004A94                 pop     ebp
.text:00004A95                 retn
.text:00004A95 ??0?$CRecordVector@_N@@QAE@XZ endp
.text:00004A95
.text:00004A95 ; ---------------------------------------------------------------------------
.text:00004A96                 align 4
.text:00004A96 _text           ends
.text:00004A96
.text:00004A98 ; ===========================================================================
.text:00004A98
.text:00004A98 ; Segment type: Pure code
.text:00004A98 ; Segment permissions: Read/Execute
.text:00004A98 _text           segment para public 'CODE' use32
.text:00004A98                 assume cs:_text
.text:00004A98                 ;org 4A98h
.text:00004A98 ; COMDAT (pick any)
.text:00004A98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A98
.text:00004A98 ; =============== S U B R O U T I N E =======================================
.text:00004A98
.text:00004A98 ; Attributes: bp-based frame
.text:00004A98
.text:00004A98 ; public: unsigned int __thiscall CRecordVector<bool>::Size(void)const
.text:00004A98                 public ?Size@?$CRecordVector@_N@@QBEIXZ
.text:00004A98 ?Size@?$CRecordVector@_N@@QBEIXZ proc near
.text:00004A98                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+11p
.text:00004A98                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+20p
.text:00004A98
.text:00004A98 var_4           = dword ptr -4
.text:00004A98
.text:00004A98                 push    ebp
.text:00004A99                 mov     ebp, esp
.text:00004A9B                 push    ecx
.text:00004A9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AA3                 mov     [ebp+var_4], ecx
.text:00004AA6                 mov     eax, [ebp+var_4]
.text:00004AA9                 mov     eax, [eax+4]
.text:00004AAC                 mov     esp, ebp
.text:00004AAE                 pop     ebp
.text:00004AAF                 retn
.text:00004AAF ?Size@?$CRecordVector@_N@@QBEIXZ endp
.text:00004AAF
.text:00004AAF _text           ends
.text:00004AAF
.text:00004AB0 ; ===========================================================================
.text:00004AB0
.text:00004AB0 ; Segment type: Pure code
.text:00004AB0 ; Segment permissions: Read/Execute
.text:00004AB0 _text           segment para public 'CODE' use32
.text:00004AB0                 assume cs:_text
.text:00004AB0                 ;org 4AB0h
.text:00004AB0 ; COMDAT (pick any)
.text:00004AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AB0
.text:00004AB0 ; =============== S U B R O U T I N E =======================================
.text:00004AB0
.text:00004AB0 ; Attributes: bp-based frame
.text:00004AB0
.text:00004AB0 ; public: __thiscall CRecordVector<bool>::~CRecordVector<bool>(void)
.text:00004AB0                 public ??1?$CRecordVector@_N@@QAE@XZ
.text:00004AB0 ??1?$CRecordVector@_N@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CDatabase::~CDatabase(void)+61p
.text:00004AB0                                         ; __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$6+9j ...
.text:00004AB0
.text:00004AB0 var_8           = dword ptr -8
.text:00004AB0 var_4           = dword ptr -4
.text:00004AB0
.text:00004AB0                 push    ebp
.text:00004AB1                 mov     ebp, esp
.text:00004AB3                 sub     esp, 8
.text:00004AB6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004ABD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AC4                 mov     [ebp+var_4], ecx
.text:00004AC7                 mov     eax, [ebp+var_4]
.text:00004ACA                 mov     ecx, [eax]
.text:00004ACC                 mov     [ebp+var_8], ecx
.text:00004ACF                 mov     edx, [ebp+var_8]
.text:00004AD2                 push    edx             ; void *
.text:00004AD3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004AD8                 add     esp, 4
.text:00004ADB                 add     esp, 8
.text:00004ADE                 cmp     ebp, esp
.text:00004AE0                 call    __RTC_CheckEsp
.text:00004AE5                 mov     esp, ebp
.text:00004AE7                 pop     ebp
.text:00004AE8                 retn
.text:00004AE8 ??1?$CRecordVector@_N@@QAE@XZ endp
.text:00004AE8
.text:00004AE8 ; ---------------------------------------------------------------------------
.text:00004AE9                 align 4
.text:00004AE9 _text           ends
.text:00004AE9
.text:00004AEC ; ===========================================================================
.text:00004AEC
.text:00004AEC ; Segment type: Pure code
.text:00004AEC ; Segment permissions: Read/Execute
.text:00004AEC _text           segment para public 'CODE' use32
.text:00004AEC                 assume cs:_text
.text:00004AEC                 ;org 4AECh
.text:00004AEC ; COMDAT (pick any)
.text:00004AEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AEC
.text:00004AEC ; =============== S U B R O U T I N E =======================================
.text:00004AEC
.text:00004AEC ; Attributes: bp-based frame
.text:00004AEC
.text:00004AEC ; public: void __thiscall CRecordVector<bool>::Clear(void)
.text:00004AEC                 public ?Clear@?$CRecordVector@_N@@QAEXXZ
.text:00004AEC ?Clear@?$CRecordVector@_N@@QAEXXZ proc near
.text:00004AEC                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+78p
.text:00004AEC                                         ; NArchive::N7z::CUInt64DefVector::Clear(void)+11p ...
.text:00004AEC
.text:00004AEC var_4           = dword ptr -4
.text:00004AEC
.text:00004AEC                 push    ebp
.text:00004AED                 mov     ebp, esp
.text:00004AEF                 push    ecx
.text:00004AF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AF7                 mov     [ebp+var_4], ecx
.text:00004AFA                 mov     eax, [ebp+var_4]
.text:00004AFD                 mov     dword ptr [eax+4], 0
.text:00004B04                 mov     esp, ebp
.text:00004B06                 pop     ebp
.text:00004B07                 retn
.text:00004B07 ?Clear@?$CRecordVector@_N@@QAEXXZ endp
.text:00004B07
.text:00004B07 _text           ends
.text:00004B07
.text:00004B08 ; ===========================================================================
.text:00004B08
.text:00004B08 ; Segment type: Pure code
.text:00004B08 ; Segment permissions: Read/Execute
.text:00004B08 _text           segment para public 'CODE' use32
.text:00004B08                 assume cs:_text
.text:00004B08                 ;org 4B08h
.text:00004B08 ; COMDAT (pick any)
.text:00004B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B08
.text:00004B08 ; =============== S U B R O U T I N E =======================================
.text:00004B08
.text:00004B08 ; Attributes: bp-based frame
.text:00004B08
.text:00004B08 ; public: bool const & __thiscall CRecordVector<bool>::operator[](unsigned int)const
.text:00004B08                 public ??A?$CRecordVector@_N@@QBEAB_NI@Z
.text:00004B08 ??A?$CRecordVector@_N@@QBEAB_NI@Z proc near
.text:00004B08                                         ; CODE XREF: NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+22p
.text:00004B08                                         ; NArchive::N7z::CDatabase::IsItemAnti(uint)+37p
.text:00004B08
.text:00004B08 var_4           = dword ptr -4
.text:00004B08 arg_0           = dword ptr  8
.text:00004B08
.text:00004B08                 push    ebp
.text:00004B09                 mov     ebp, esp
.text:00004B0B                 push    ecx
.text:00004B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B13                 mov     [ebp+var_4], ecx
.text:00004B16                 mov     eax, [ebp+var_4]
.text:00004B19                 mov     eax, [eax]
.text:00004B1B                 add     eax, [ebp+arg_0]
.text:00004B1E                 mov     esp, ebp
.text:00004B20                 pop     ebp
.text:00004B21                 retn    4
.text:00004B21 ??A?$CRecordVector@_N@@QBEAB_NI@Z endp
.text:00004B21
.text:00004B21 _text           ends
.text:00004B21
.text:00004B24 ; ===========================================================================
.text:00004B24
.text:00004B24 ; Segment type: Pure code
.text:00004B24 ; Segment permissions: Read/Execute
.text:00004B24 _text           segment para public 'CODE' use32
.text:00004B24                 assume cs:_text
.text:00004B24                 ;org 4B24h
.text:00004B24 ; COMDAT (pick any)
.text:00004B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B24
.text:00004B24 ; =============== S U B R O U T I N E =======================================
.text:00004B24
.text:00004B24 ; Attributes: bp-based frame
.text:00004B24
.text:00004B24 ; public: __thiscall CRecordVector<unsigned int>::CRecordVector<unsigned int>(void)
.text:00004B24                 public ??0?$CRecordVector@I@@QAE@XZ
.text:00004B24 ??0?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::CUInt32DefVector(void)+42p
.text:00004B24
.text:00004B24 var_4           = dword ptr -4
.text:00004B24
.text:00004B24                 push    ebp
.text:00004B25                 mov     ebp, esp
.text:00004B27                 push    ecx
.text:00004B28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B2F                 mov     [ebp+var_4], ecx
.text:00004B32                 mov     eax, [ebp+var_4]
.text:00004B35                 mov     dword ptr [eax], 0
.text:00004B3B                 mov     ecx, [ebp+var_4]
.text:00004B3E                 mov     dword ptr [ecx+4], 0
.text:00004B45                 mov     edx, [ebp+var_4]
.text:00004B48                 mov     dword ptr [edx+8], 0
.text:00004B4F                 mov     eax, [ebp+var_4]
.text:00004B52                 mov     esp, ebp
.text:00004B54                 pop     ebp
.text:00004B55                 retn
.text:00004B55 ??0?$CRecordVector@I@@QAE@XZ endp
.text:00004B55
.text:00004B55 ; ---------------------------------------------------------------------------
.text:00004B56                 align 4
.text:00004B56 _text           ends
.text:00004B56
.text:00004B58 ; ===========================================================================
.text:00004B58
.text:00004B58 ; Segment type: Pure code
.text:00004B58 ; Segment permissions: Read/Execute
.text:00004B58 _text           segment para public 'CODE' use32
.text:00004B58                 assume cs:_text
.text:00004B58                 ;org 4B58h
.text:00004B58 ; COMDAT (pick any)
.text:00004B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B58
.text:00004B58 ; =============== S U B R O U T I N E =======================================
.text:00004B58
.text:00004B58 ; Attributes: bp-based frame
.text:00004B58
.text:00004B58 ; public: __thiscall CRecordVector<unsigned int>::~CRecordVector<unsigned int>(void)
.text:00004B58                 public ??1?$CRecordVector@I@@QAE@XZ
.text:00004B58 ??1?$CRecordVector@I@@QAE@XZ proc near  ; CODE XREF: NArchive::N7z::CUInt32DefVector::~CUInt32DefVector(void)+3Ap
.text:00004B58
.text:00004B58 var_8           = dword ptr -8
.text:00004B58 var_4           = dword ptr -4
.text:00004B58
.text:00004B58                 push    ebp
.text:00004B59                 mov     ebp, esp
.text:00004B5B                 sub     esp, 8
.text:00004B5E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B65                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B6C                 mov     [ebp+var_4], ecx
.text:00004B6F                 mov     eax, [ebp+var_4]
.text:00004B72                 mov     ecx, [eax]
.text:00004B74                 mov     [ebp+var_8], ecx
.text:00004B77                 mov     edx, [ebp+var_8]
.text:00004B7A                 push    edx             ; void *
.text:00004B7B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004B80                 add     esp, 4
.text:00004B83                 add     esp, 8
.text:00004B86                 cmp     ebp, esp
.text:00004B88                 call    __RTC_CheckEsp
.text:00004B8D                 mov     esp, ebp
.text:00004B8F                 pop     ebp
.text:00004B90                 retn
.text:00004B90 ??1?$CRecordVector@I@@QAE@XZ endp
.text:00004B90
.text:00004B90 ; ---------------------------------------------------------------------------
.text:00004B91                 align 4
.text:00004B91 _text           ends
.text:00004B91
.text:00004B94 ; ===========================================================================
.text:00004B94
.text:00004B94 ; Segment type: Pure code
.text:00004B94 ; Segment permissions: Read/Execute
.text:00004B94 _text           segment para public 'CODE' use32
.text:00004B94                 assume cs:_text
.text:00004B94                 ;org 4B94h
.text:00004B94 ; COMDAT (pick any)
.text:00004B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B94
.text:00004B94 ; =============== S U B R O U T I N E =======================================
.text:00004B94
.text:00004B94 ; Attributes: bp-based frame
.text:00004B94
.text:00004B94 ; public: void __thiscall CRecordVector<unsigned int>::Clear(void)
.text:00004B94                 public ?Clear@?$CRecordVector@I@@QAEXXZ
.text:00004B94 ?Clear@?$CRecordVector@I@@QAEXXZ proc near
.text:00004B94                                         ; CODE XREF: NArchive::N7z::CUInt32DefVector::Clear(void)+1Cp
.text:00004B94
.text:00004B94 var_4           = dword ptr -4
.text:00004B94
.text:00004B94                 push    ebp
.text:00004B95                 mov     ebp, esp
.text:00004B97                 push    ecx
.text:00004B98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B9F                 mov     [ebp+var_4], ecx
.text:00004BA2                 mov     eax, [ebp+var_4]
.text:00004BA5                 mov     dword ptr [eax+4], 0
.text:00004BAC                 mov     esp, ebp
.text:00004BAE                 pop     ebp
.text:00004BAF                 retn
.text:00004BAF ?Clear@?$CRecordVector@I@@QAEXXZ endp
.text:00004BAF
.text:00004BAF _text           ends
.text:00004BAF
.text:00004BB0 ; ===========================================================================
.text:00004BB0
.text:00004BB0 ; Segment type: Pure code
.text:00004BB0 ; Segment permissions: Read/Execute
.text:00004BB0 _text           segment para public 'CODE' use32
.text:00004BB0                 assume cs:_text
.text:00004BB0                 ;org 4BB0h
.text:00004BB0 ; COMDAT (pick any)
.text:00004BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BB0
.text:00004BB0 ; =============== S U B R O U T I N E =======================================
.text:00004BB0
.text:00004BB0 ; Attributes: bp-based frame
.text:00004BB0
.text:00004BB0 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00004BB0                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00004BB0 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+EBp
.text:00004BB0                                         ; NArchive::N7z::CInArchiveInfo::CInArchiveInfo(void)+14p ...
.text:00004BB0
.text:00004BB0 var_4           = dword ptr -4
.text:00004BB0
.text:00004BB0                 push    ebp
.text:00004BB1                 mov     ebp, esp
.text:00004BB3                 push    ecx
.text:00004BB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BBB                 mov     [ebp+var_4], ecx
.text:00004BBE                 mov     eax, [ebp+var_4]
.text:00004BC1                 mov     dword ptr [eax], 0
.text:00004BC7                 mov     ecx, [ebp+var_4]
.text:00004BCA                 mov     dword ptr [ecx+4], 0
.text:00004BD1                 mov     edx, [ebp+var_4]
.text:00004BD4                 mov     dword ptr [edx+8], 0
.text:00004BDB                 mov     eax, [ebp+var_4]
.text:00004BDE                 mov     esp, ebp
.text:00004BE0                 pop     ebp
.text:00004BE1                 retn
.text:00004BE1 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00004BE1
.text:00004BE1 ; ---------------------------------------------------------------------------
.text:00004BE2                 align 4
.text:00004BE2 _text           ends
.text:00004BE2
.text:00004BE4 ; ===========================================================================
.text:00004BE4
.text:00004BE4 ; Segment type: Pure code
.text:00004BE4 ; Segment permissions: Read/Execute
.text:00004BE4 _text           segment para public 'CODE' use32
.text:00004BE4                 assume cs:_text
.text:00004BE4                 ;org 4BE4h
.text:00004BE4 ; COMDAT (pick any)
.text:00004BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BE4
.text:00004BE4 ; =============== S U B R O U T I N E =======================================
.text:00004BE4
.text:00004BE4 ; Attributes: bp-based frame
.text:00004BE4
.text:00004BE4 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:00004BE4                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:00004BE4 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:00004BE4                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+BAp
.text:00004BE4
.text:00004BE4 var_4           = dword ptr -4
.text:00004BE4
.text:00004BE4                 push    ebp
.text:00004BE5                 mov     ebp, esp
.text:00004BE7                 push    ecx
.text:00004BE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BEF                 mov     [ebp+var_4], ecx
.text:00004BF2                 mov     eax, [ebp+var_4]
.text:00004BF5                 mov     eax, [eax+4]
.text:00004BF8                 mov     esp, ebp
.text:00004BFA                 pop     ebp
.text:00004BFB                 retn
.text:00004BFB ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:00004BFB
.text:00004BFB _text           ends
.text:00004BFB
.text:00004BFC ; ===========================================================================
.text:00004BFC
.text:00004BFC ; Segment type: Pure code
.text:00004BFC ; Segment permissions: Read/Execute
.text:00004BFC _text           segment para public 'CODE' use32
.text:00004BFC                 assume cs:_text
.text:00004BFC                 ;org 4BFCh
.text:00004BFC ; COMDAT (pick any)
.text:00004BFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BFC
.text:00004BFC ; =============== S U B R O U T I N E =======================================
.text:00004BFC
.text:00004BFC ; Attributes: bp-based frame
.text:00004BFC
.text:00004BFC ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00004BFC                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00004BFC ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CHandler::~CHandler(void)+3Dp
.text:00004BFC                                         ; NArchive::N7z::CInArchiveInfo::~CInArchiveInfo(void)+14p ...
.text:00004BFC
.text:00004BFC var_8           = dword ptr -8
.text:00004BFC var_4           = dword ptr -4
.text:00004BFC
.text:00004BFC                 push    ebp
.text:00004BFD                 mov     ebp, esp
.text:00004BFF                 sub     esp, 8
.text:00004C02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C10                 mov     [ebp+var_4], ecx
.text:00004C13                 mov     eax, [ebp+var_4]
.text:00004C16                 mov     ecx, [eax]
.text:00004C18                 mov     [ebp+var_8], ecx
.text:00004C1B                 mov     edx, [ebp+var_8]
.text:00004C1E                 push    edx             ; void *
.text:00004C1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004C24                 add     esp, 4
.text:00004C27                 add     esp, 8
.text:00004C2A                 cmp     ebp, esp
.text:00004C2C                 call    __RTC_CheckEsp
.text:00004C31                 mov     esp, ebp
.text:00004C33                 pop     ebp
.text:00004C34                 retn
.text:00004C34 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00004C34
.text:00004C34 ; ---------------------------------------------------------------------------
.text:00004C35                 align 4
.text:00004C35 _text           ends
.text:00004C35
.text:00004C38 ; ===========================================================================
.text:00004C38
.text:00004C38 ; Segment type: Pure code
.text:00004C38 ; Segment permissions: Read/Execute
.text:00004C38 _text           segment para public 'CODE' use32
.text:00004C38                 assume cs:_text
.text:00004C38                 ;org 4C38h
.text:00004C38 ; COMDAT (pick any)
.text:00004C38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C38
.text:00004C38 ; =============== S U B R O U T I N E =======================================
.text:00004C38
.text:00004C38 ; Attributes: bp-based frame
.text:00004C38
.text:00004C38 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00004C38                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00004C38 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00004C38                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Bp
.text:00004C38                                         ; NArchive::N7z::CUInt64DefVector::Clear(void)+1Cp ...
.text:00004C38
.text:00004C38 var_4           = dword ptr -4
.text:00004C38
.text:00004C38                 push    ebp
.text:00004C39                 mov     ebp, esp
.text:00004C3B                 push    ecx
.text:00004C3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C43                 mov     [ebp+var_4], ecx
.text:00004C46                 mov     eax, [ebp+var_4]
.text:00004C49                 mov     dword ptr [eax+4], 0
.text:00004C50                 mov     esp, ebp
.text:00004C52                 pop     ebp
.text:00004C53                 retn
.text:00004C53 ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:00004C53
.text:00004C53 _text           ends
.text:00004C53
.text:00004C54 ; ===========================================================================
.text:00004C54
.text:00004C54 ; Segment type: Pure code
.text:00004C54 ; Segment permissions: Read/Execute
.text:00004C54 _text           segment para public 'CODE' use32
.text:00004C54                 assume cs:_text
.text:00004C54                 ;org 4C54h
.text:00004C54 ; COMDAT (pick any)
.text:00004C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C54
.text:00004C54 ; =============== S U B R O U T I N E =======================================
.text:00004C54
.text:00004C54 ; Attributes: bp-based frame
.text:00004C54
.text:00004C54 ; public: unsigned __int64 const & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)const
.text:00004C54                 public ??A?$CRecordVector@_K@@QBEAB_KI@Z
.text:00004C54 ??A?$CRecordVector@_K@@QBEAB_KI@Z proc near
.text:00004C54                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+DEp
.text:00004C54                                         ; NArchive::N7z::CUInt64DefVector::GetItem(uint,unsigned __int64 &)+38p
.text:00004C54
.text:00004C54 var_4           = dword ptr -4
.text:00004C54 arg_0           = dword ptr  8
.text:00004C54
.text:00004C54                 push    ebp
.text:00004C55                 mov     ebp, esp
.text:00004C57                 push    ecx
.text:00004C58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C5F                 mov     [ebp+var_4], ecx
.text:00004C62                 mov     eax, [ebp+var_4]
.text:00004C65                 mov     ecx, [eax]
.text:00004C67                 mov     edx, [ebp+arg_0]
.text:00004C6A                 lea     eax, [ecx+edx*8]
.text:00004C6D                 mov     esp, ebp
.text:00004C6F                 pop     ebp
.text:00004C70                 retn    4
.text:00004C70 ??A?$CRecordVector@_K@@QBEAB_KI@Z endp
.text:00004C70
.text:00004C70 ; ---------------------------------------------------------------------------
.text:00004C73                 align 4
.text:00004C73 _text           ends
.text:00004C73
.text:00004C74 ; ===========================================================================
.text:00004C74
.text:00004C74 ; Segment type: Pure code
.text:00004C74 ; Segment permissions: Read/Execute
.text:00004C74 _text           segment para public 'CODE' use32
.text:00004C74                 assume cs:_text
.text:00004C74                 ;org 4C74h
.text:00004C74 ; COMDAT (pick any)
.text:00004C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C74
.text:00004C74 ; =============== S U B R O U T I N E =======================================
.text:00004C74
.text:00004C74 ; Attributes: bp-based frame
.text:00004C74
.text:00004C74 ; public: void __thiscall CObjArray<unsigned __int64>::Free(void)
.text:00004C74                 public ?Free@?$CObjArray@_K@@QAEXXZ
.text:00004C74 ?Free@?$CObjArray@_K@@QAEXXZ proc near  ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+1Dp
.text:00004C74                                         ; NArchive::N7z::CFolders::Clear(void)+48p
.text:00004C74
.text:00004C74 var_8           = dword ptr -8
.text:00004C74 var_4           = dword ptr -4
.text:00004C74
.text:00004C74                 push    ebp
.text:00004C75                 mov     ebp, esp
.text:00004C77                 sub     esp, 8
.text:00004C7A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004C81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C88                 mov     [ebp+var_4], ecx
.text:00004C8B                 mov     eax, [ebp+var_4]
.text:00004C8E                 mov     ecx, [eax]
.text:00004C90                 mov     [ebp+var_8], ecx
.text:00004C93                 mov     edx, [ebp+var_8]
.text:00004C96                 push    edx             ; void *
.text:00004C97                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004C9C                 add     esp, 4
.text:00004C9F                 mov     eax, [ebp+var_4]
.text:00004CA2                 mov     dword ptr [eax], 0
.text:00004CA8                 add     esp, 8
.text:00004CAB                 cmp     ebp, esp
.text:00004CAD                 call    __RTC_CheckEsp
.text:00004CB2                 mov     esp, ebp
.text:00004CB4                 pop     ebp
.text:00004CB5                 retn
.text:00004CB5 ?Free@?$CObjArray@_K@@QAEXXZ endp
.text:00004CB5
.text:00004CB5 ; ---------------------------------------------------------------------------
.text:00004CB6                 align 4
.text:00004CB6 _text           ends
.text:00004CB6
.text:00004CB8 ; ===========================================================================
.text:00004CB8
.text:00004CB8 ; Segment type: Pure code
.text:00004CB8 ; Segment permissions: Read/Execute
.text:00004CB8 _text           segment para public 'CODE' use32
.text:00004CB8                 assume cs:_text
.text:00004CB8                 ;org 4CB8h
.text:00004CB8 ; COMDAT (pick any)
.text:00004CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CB8
.text:00004CB8 ; =============== S U B R O U T I N E =======================================
.text:00004CB8
.text:00004CB8 ; Attributes: bp-based frame
.text:00004CB8
.text:00004CB8 ; public: __thiscall CObjArray<unsigned __int64>::CObjArray<unsigned __int64>(void)
.text:00004CB8                 public ??0?$CObjArray@_K@@QAE@XZ
.text:00004CB8 ??0?$CObjArray@_K@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+33p
.text:00004CB8                                         ; NArchive::N7z::CFolders::CFolders(void)+63p
.text:00004CB8
.text:00004CB8 var_4           = dword ptr -4
.text:00004CB8
.text:00004CB8                 push    ebp
.text:00004CB9                 mov     ebp, esp
.text:00004CBB                 push    ecx
.text:00004CBC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CC3                 mov     [ebp+var_4], ecx
.text:00004CC6                 mov     eax, [ebp+var_4]
.text:00004CC9                 mov     dword ptr [eax], 0
.text:00004CCF                 mov     eax, [ebp+var_4]
.text:00004CD2                 mov     esp, ebp
.text:00004CD4                 pop     ebp
.text:00004CD5                 retn
.text:00004CD5 ??0?$CObjArray@_K@@QAE@XZ endp
.text:00004CD5
.text:00004CD5 ; ---------------------------------------------------------------------------
.text:00004CD6                 align 4
.text:00004CD6 _text           ends
.text:00004CD6
.text:00004CD8 ; ===========================================================================
.text:00004CD8
.text:00004CD8 ; Segment type: Pure code
.text:00004CD8 ; Segment permissions: Read/Execute
.text:00004CD8 _text           segment para public 'CODE' use32
.text:00004CD8                 assume cs:_text
.text:00004CD8                 ;org 4CD8h
.text:00004CD8 ; COMDAT (pick any)
.text:00004CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CD8
.text:00004CD8 ; =============== S U B R O U T I N E =======================================
.text:00004CD8
.text:00004CD8 ; Attributes: bp-based frame
.text:00004CD8
.text:00004CD8 ; public: __thiscall CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>(void)
.text:00004CD8                 public ??1?$CObjArray@_K@@QAE@XZ
.text:00004CD8 ??1?$CObjArray@_K@@QAE@XZ proc near     ; CODE XREF: NArchive::N7z::CFolders::~CFolders(void)+94p
.text:00004CD8                                         ; NArchive::N7z::CFolders::~CFolders(void)+C4p ...
.text:00004CD8
.text:00004CD8 var_8           = dword ptr -8
.text:00004CD8 var_4           = dword ptr -4
.text:00004CD8
.text:00004CD8                 push    ebp
.text:00004CD9                 mov     ebp, esp
.text:00004CDB                 sub     esp, 8
.text:00004CDE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CE5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CEC                 mov     [ebp+var_4], ecx
.text:00004CEF                 mov     eax, [ebp+var_4]
.text:00004CF2                 mov     ecx, [eax]
.text:00004CF4                 mov     [ebp+var_8], ecx
.text:00004CF7                 mov     edx, [ebp+var_8]
.text:00004CFA                 push    edx             ; void *
.text:00004CFB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004D00                 add     esp, 4
.text:00004D03                 add     esp, 8
.text:00004D06                 cmp     ebp, esp
.text:00004D08                 call    __RTC_CheckEsp
.text:00004D0D                 mov     esp, ebp
.text:00004D0F                 pop     ebp
.text:00004D10                 retn
.text:00004D10 ??1?$CObjArray@_K@@QAE@XZ endp
.text:00004D10
.text:00004D10 ; ---------------------------------------------------------------------------
.text:00004D11                 align 4
.text:00004D11 _text           ends
.text:00004D11
.text:00004D14 ; ===========================================================================
.text:00004D14
.text:00004D14 ; Segment type: Pure code
.text:00004D14 ; Segment permissions: Read/Execute
.text:00004D14 _text           segment para public 'CODE' use32
.text:00004D14                 assume cs:_text
.text:00004D14                 ;org 4D14h
.text:00004D14 ; COMDAT (pick any)
.text:00004D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D14
.text:00004D14 ; =============== S U B R O U T I N E =======================================
.text:00004D14
.text:00004D14 ; Attributes: bp-based frame
.text:00004D14
.text:00004D14 ; public: __thiscall CObjArray<unsigned __int64>::operator unsigned __int64 const *(void)const
.text:00004D14                 public ??B?$CObjArray@_K@@QBEPB_KXZ
.text:00004D14 ??B?$CObjArray@_K@@QBEPB_KXZ proc near  ; CODE XREF: NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+17p
.text:00004D14                                         ; NArchive::N7z::CDbEx::GetFolderFullPackSize(uint)+36p
.text:00004D14
.text:00004D14 var_4           = dword ptr -4
.text:00004D14
.text:00004D14                 push    ebp
.text:00004D15                 mov     ebp, esp
.text:00004D17                 push    ecx
.text:00004D18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D1F                 mov     [ebp+var_4], ecx
.text:00004D22                 mov     eax, [ebp+var_4]
.text:00004D25                 mov     eax, [eax]
.text:00004D27                 mov     esp, ebp
.text:00004D29                 pop     ebp
.text:00004D2A                 retn
.text:00004D2A ??B?$CObjArray@_K@@QBEPB_KXZ endp
.text:00004D2A
.text:00004D2A ; ---------------------------------------------------------------------------
.text:00004D2B                 align 4
.text:00004D2B _text           ends
.text:00004D2B
.text:00004D2C ; ===========================================================================
.text:00004D2C
.text:00004D2C ; Segment type: Pure code
.text:00004D2C ; Segment permissions: Read/Execute
.text:00004D2C _text           segment para public 'CODE' use32
.text:00004D2C                 assume cs:_text
.text:00004D2C                 ;org 4D2Ch
.text:00004D2C ; COMDAT (pick any)
.text:00004D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D2C
.text:00004D2C ; =============== S U B R O U T I N E =======================================
.text:00004D2C
.text:00004D2C ; Attributes: bp-based frame
.text:00004D2C
.text:00004D2C ; public: void __thiscall CObjArray<unsigned int>::Free(void)
.text:00004D2C                 public ?Free@?$CObjArray@I@@QAEXXZ
.text:00004D2C ?Free@?$CObjArray@I@@QAEXXZ proc near   ; CODE XREF: NArchive::N7z::CDbEx::Clear(void)+73p
.text:00004D2C                                         ; NArchive::N7z::CDbEx::Clear(void)+81p ...
.text:00004D2C
.text:00004D2C var_8           = dword ptr -8
.text:00004D2C var_4           = dword ptr -4
.text:00004D2C
.text:00004D2C                 push    ebp
.text:00004D2D                 mov     ebp, esp
.text:00004D2F                 sub     esp, 8
.text:00004D32                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D40                 mov     [ebp+var_4], ecx
.text:00004D43                 mov     eax, [ebp+var_4]
.text:00004D46                 mov     ecx, [eax]
.text:00004D48                 mov     [ebp+var_8], ecx
.text:00004D4B                 mov     edx, [ebp+var_8]
.text:00004D4E                 push    edx             ; void *
.text:00004D4F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004D54                 add     esp, 4
.text:00004D57                 mov     eax, [ebp+var_4]
.text:00004D5A                 mov     dword ptr [eax], 0
.text:00004D60                 add     esp, 8
.text:00004D63                 cmp     ebp, esp
.text:00004D65                 call    __RTC_CheckEsp
.text:00004D6A                 mov     esp, ebp
.text:00004D6C                 pop     ebp
.text:00004D6D                 retn
.text:00004D6D ?Free@?$CObjArray@I@@QAEXXZ endp
.text:00004D6D
.text:00004D6D ; ---------------------------------------------------------------------------
.text:00004D6E                 align 10h
.text:00004D6E _text           ends
.text:00004D6E
.text:00004D70 ; ===========================================================================
.text:00004D70
.text:00004D70 ; Segment type: Pure code
.text:00004D70 ; Segment permissions: Read/Execute
.text:00004D70 _text           segment para public 'CODE' use32
.text:00004D70                 assume cs:_text
.text:00004D70                 ;org 4D70h
.text:00004D70 ; COMDAT (pick any)
.text:00004D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D70
.text:00004D70 ; =============== S U B R O U T I N E =======================================
.text:00004D70
.text:00004D70 ; Attributes: bp-based frame
.text:00004D70
.text:00004D70 ; public: __thiscall CObjArray<unsigned int>::CObjArray<unsigned int>(void)
.text:00004D70                 public ??0?$CObjArray@I@@QAE@XZ
.text:00004D70 ??0?$CObjArray@I@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CDbEx::CDbEx(void)+57p
.text:00004D70                                         ; NArchive::N7z::CDbEx::CDbEx(void)+69p ...
.text:00004D70
.text:00004D70 var_4           = dword ptr -4
.text:00004D70
.text:00004D70                 push    ebp
.text:00004D71                 mov     ebp, esp
.text:00004D73                 push    ecx
.text:00004D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D7B                 mov     [ebp+var_4], ecx
.text:00004D7E                 mov     eax, [ebp+var_4]
.text:00004D81                 mov     dword ptr [eax], 0
.text:00004D87                 mov     eax, [ebp+var_4]
.text:00004D8A                 mov     esp, ebp
.text:00004D8C                 pop     ebp
.text:00004D8D                 retn
.text:00004D8D ??0?$CObjArray@I@@QAE@XZ endp
.text:00004D8D
.text:00004D8D ; ---------------------------------------------------------------------------
.text:00004D8E                 align 10h
.text:00004D8E _text           ends
.text:00004D8E
.text:00004D90 ; ===========================================================================
.text:00004D90
.text:00004D90 ; Segment type: Pure code
.text:00004D90 ; Segment permissions: Read/Execute
.text:00004D90 _text           segment para public 'CODE' use32
.text:00004D90                 assume cs:_text
.text:00004D90                 ;org 4D90h
.text:00004D90 ; COMDAT (pick any)
.text:00004D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D90
.text:00004D90 ; =============== S U B R O U T I N E =======================================
.text:00004D90
.text:00004D90 ; Attributes: bp-based frame
.text:00004D90
.text:00004D90 ; public: __thiscall CObjArray<unsigned int>::~CObjArray<unsigned int>(void)
.text:00004D90                 public ??1?$CObjArray@I@@QAE@XZ
.text:00004D90 ??1?$CObjArray@I@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CDbEx::~CDbEx(void)+3Dp
.text:00004D90                                         ; NArchive::N7z::CDbEx::~CDbEx(void)+4Fp ...
.text:00004D90
.text:00004D90 var_8           = dword ptr -8
.text:00004D90 var_4           = dword ptr -4
.text:00004D90
.text:00004D90                 push    ebp
.text:00004D91                 mov     ebp, esp
.text:00004D93                 sub     esp, 8
.text:00004D96                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004D9D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DA4                 mov     [ebp+var_4], ecx
.text:00004DA7                 mov     eax, [ebp+var_4]
.text:00004DAA                 mov     ecx, [eax]
.text:00004DAC                 mov     [ebp+var_8], ecx
.text:00004DAF                 mov     edx, [ebp+var_8]
.text:00004DB2                 push    edx             ; void *
.text:00004DB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004DB8                 add     esp, 4
.text:00004DBB                 add     esp, 8
.text:00004DBE                 cmp     ebp, esp
.text:00004DC0                 call    __RTC_CheckEsp
.text:00004DC5                 mov     esp, ebp
.text:00004DC7                 pop     ebp
.text:00004DC8                 retn
.text:00004DC8 ??1?$CObjArray@I@@QAE@XZ endp
.text:00004DC8
.text:00004DC8 ; ---------------------------------------------------------------------------
.text:00004DC9                 align 4
.text:00004DC9 _text           ends
.text:00004DC9
.text:00004DCC ; ===========================================================================
.text:00004DCC
.text:00004DCC ; Segment type: Pure code
.text:00004DCC ; Segment permissions: Read/Execute
.text:00004DCC _text           segment para public 'CODE' use32
.text:00004DCC                 assume cs:_text
.text:00004DCC                 ;org 4DCCh
.text:00004DCC ; COMDAT (pick any)
.text:00004DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DCC
.text:00004DCC ; =============== S U B R O U T I N E =======================================
.text:00004DCC
.text:00004DCC ; Attributes: bp-based frame
.text:00004DCC
.text:00004DCC ; public: __thiscall CObjArray<unsigned int>::operator unsigned int *(void)
.text:00004DCC                 public ??B?$CObjArray@I@@QAEPAIXZ
.text:00004DCC ??B?$CObjArray@I@@QAEPAIXZ proc near    ; CODE XREF: NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+42p
.text:00004DCC                                         ; NArchive::N7z::CHandler::GetRawProp(uint,ulong,void const * *,uint *,uint *)+66p ...
.text:00004DCC
.text:00004DCC var_4           = dword ptr -4
.text:00004DCC
.text:00004DCC                 push    ebp
.text:00004DCD                 mov     ebp, esp
.text:00004DCF                 push    ecx
.text:00004DD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DD7                 mov     [ebp+var_4], ecx
.text:00004DDA                 mov     eax, [ebp+var_4]
.text:00004DDD                 mov     eax, [eax]
.text:00004DDF                 mov     esp, ebp
.text:00004DE1                 pop     ebp
.text:00004DE2                 retn
.text:00004DE2 ??B?$CObjArray@I@@QAEPAIXZ endp
.text:00004DE2
.text:00004DE2 ; ---------------------------------------------------------------------------
.text:00004DE3                 align 4
.text:00004DE3 _text           ends
.text:00004DE3
.text:00004DE4 ; ===========================================================================
.text:00004DE4
.text:00004DE4 ; Segment type: Pure code
.text:00004DE4 ; Segment permissions: Read/Execute
.text:00004DE4 _text           segment para public 'CODE' use32
.text:00004DE4                 assume cs:_text
.text:00004DE4                 ;org 4DE4h
.text:00004DE4 ; COMDAT (pick any)
.text:00004DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DE4
.text:00004DE4 ; =============== S U B R O U T I N E =======================================
.text:00004DE4
.text:00004DE4 ; Attributes: bp-based frame
.text:00004DE4
.text:00004DE4 ; public: __thiscall CObjArray<unsigned int>::operator unsigned int const *(void)const
.text:00004DE4                 public ??B?$CObjArray@I@@QBEPBIXZ
.text:00004DE4 ??B?$CObjArray@I@@QBEPBIXZ proc near    ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+32p
.text:00004DE4                                         ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)+5Dp ...
.text:00004DE4
.text:00004DE4 var_4           = dword ptr -4
.text:00004DE4
.text:00004DE4                 push    ebp
.text:00004DE5                 mov     ebp, esp
.text:00004DE7                 push    ecx
.text:00004DE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DEF                 mov     [ebp+var_4], ecx
.text:00004DF2                 mov     eax, [ebp+var_4]
.text:00004DF5                 mov     eax, [eax]
.text:00004DF7                 mov     esp, ebp
.text:00004DF9                 pop     ebp
.text:00004DFA                 retn
.text:00004DFA ??B?$CObjArray@I@@QBEPBIXZ endp
.text:00004DFA
.text:00004DFA ; ---------------------------------------------------------------------------
.text:00004DFB                 align 4
.text:00004DFB _text           ends
.text:00004DFB
.text:00004DFC ; ===========================================================================
.text:00004DFC
.text:00004DFC ; Segment type: Pure code
.text:00004DFC ; Segment permissions: Read/Execute
.text:00004DFC _text           segment para public 'CODE' use32
.text:00004DFC                 assume cs:_text
.text:00004DFC                 ;org 4DFCh
.text:00004DFC ; COMDAT (pick any)
.text:00004DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DFC
.text:00004DFC ; =============== S U B R O U T I N E =======================================
.text:00004DFC
.text:00004DFC ; Attributes: bp-based frame
.text:00004DFC
.text:00004DFC ; public: void __thiscall CObjArray<unsigned char>::Free(void)
.text:00004DFC                 public ?Free@?$CObjArray@E@@QAEXXZ
.text:00004DFC ?Free@?$CObjArray@E@@QAEXXZ proc near   ; CODE XREF: NArchive::N7z::CFolders::Clear(void)+69p
.text:00004DFC
.text:00004DFC var_8           = dword ptr -8
.text:00004DFC var_4           = dword ptr -4
.text:00004DFC
.text:00004DFC                 push    ebp
.text:00004DFD                 mov     ebp, esp
.text:00004DFF                 sub     esp, 8
.text:00004E02                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004E09                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E10                 mov     [ebp+var_4], ecx
.text:00004E13                 mov     eax, [ebp+var_4]
.text:00004E16                 mov     ecx, [eax]
.text:00004E18                 mov     [ebp+var_8], ecx
.text:00004E1B                 mov     edx, [ebp+var_8]
.text:00004E1E                 push    edx             ; void *
.text:00004E1F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E24                 add     esp, 4
.text:00004E27                 mov     eax, [ebp+var_4]
.text:00004E2A                 mov     dword ptr [eax], 0
.text:00004E30                 add     esp, 8
.text:00004E33                 cmp     ebp, esp
.text:00004E35                 call    __RTC_CheckEsp
.text:00004E3A                 mov     esp, ebp
.text:00004E3C                 pop     ebp
.text:00004E3D                 retn
.text:00004E3D ?Free@?$CObjArray@E@@QAEXXZ endp
.text:00004E3D
.text:00004E3D ; ---------------------------------------------------------------------------
.text:00004E3E                 align 10h
.text:00004E3E _text           ends
.text:00004E3E
.text:00004E40 ; ===========================================================================
.text:00004E40
.text:00004E40 ; Segment type: Pure code
.text:00004E40 ; Segment permissions: Read/Execute
.text:00004E40 _text           segment para public 'CODE' use32
.text:00004E40                 assume cs:_text
.text:00004E40                 ;org 4E40h
.text:00004E40 ; COMDAT (pick any)
.text:00004E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E40
.text:00004E40 ; =============== S U B R O U T I N E =======================================
.text:00004E40
.text:00004E40 ; Attributes: bp-based frame
.text:00004E40
.text:00004E40 ; public: __thiscall CObjArray<unsigned char>::CObjArray<unsigned char>(void)
.text:00004E40                 public ??0?$CObjArray@E@@QAE@XZ
.text:00004E40 ??0?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CFolders::CFolders(void)+90p
.text:00004E40
.text:00004E40 var_4           = dword ptr -4
.text:00004E40
.text:00004E40                 push    ebp
.text:00004E41                 mov     ebp, esp
.text:00004E43                 push    ecx
.text:00004E44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E4B                 mov     [ebp+var_4], ecx
.text:00004E4E                 mov     eax, [ebp+var_4]
.text:00004E51                 mov     dword ptr [eax], 0
.text:00004E57                 mov     eax, [ebp+var_4]
.text:00004E5A                 mov     esp, ebp
.text:00004E5C                 pop     ebp
.text:00004E5D                 retn
.text:00004E5D ??0?$CObjArray@E@@QAE@XZ endp
.text:00004E5D
.text:00004E5D ; ---------------------------------------------------------------------------
.text:00004E5E                 align 10h
.text:00004E5E _text           ends
.text:00004E5E
.text:00004E60 ; ===========================================================================
.text:00004E60
.text:00004E60 ; Segment type: Pure code
.text:00004E60 ; Segment permissions: Read/Execute
.text:00004E60 _text           segment para public 'CODE' use32
.text:00004E60                 assume cs:_text
.text:00004E60                 ;org 4E60h
.text:00004E60 ; COMDAT (pick any)
.text:00004E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E60
.text:00004E60 ; =============== S U B R O U T I N E =======================================
.text:00004E60
.text:00004E60 ; Attributes: bp-based frame
.text:00004E60
.text:00004E60 ; public: __thiscall CObjArray<unsigned char>::~CObjArray<unsigned char>(void)
.text:00004E60                 public ??1?$CObjArray@E@@QAE@XZ
.text:00004E60 ??1?$CObjArray@E@@QAE@XZ proc near      ; CODE XREF: NArchive::N7z::CFolders::~CFolders(void)+67p
.text:00004E60                                         ; __unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6+6j ...
.text:00004E60
.text:00004E60 var_8           = dword ptr -8
.text:00004E60 var_4           = dword ptr -4
.text:00004E60
.text:00004E60                 push    ebp
.text:00004E61                 mov     ebp, esp
.text:00004E63                 sub     esp, 8
.text:00004E66                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004E6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E74                 mov     [ebp+var_4], ecx
.text:00004E77                 mov     eax, [ebp+var_4]
.text:00004E7A                 mov     ecx, [eax]
.text:00004E7C                 mov     [ebp+var_8], ecx
.text:00004E7F                 mov     edx, [ebp+var_8]
.text:00004E82                 push    edx             ; void *
.text:00004E83                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004E88                 add     esp, 4
.text:00004E8B                 add     esp, 8
.text:00004E8E                 cmp     ebp, esp
.text:00004E90                 call    __RTC_CheckEsp
.text:00004E95                 mov     esp, ebp
.text:00004E97                 pop     ebp
.text:00004E98                 retn
.text:00004E98 ??1?$CObjArray@E@@QAE@XZ endp
.text:00004E98
.text:00004E98 ; ---------------------------------------------------------------------------
.text:00004E99                 align 4
.text:00004E99 _text           ends
.text:00004E99
.text:00004E9C ; ===========================================================================
.text:00004E9C
.text:00004E9C ; Segment type: Pure code
.text:00004E9C ; Segment permissions: Read/Execute
.text:00004E9C _text           segment para public 'CODE' use32
.text:00004E9C                 assume cs:_text
.text:00004E9C                 ;org 4E9Ch
.text:00004E9C ; COMDAT (pick any)
.text:00004E9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E9C
.text:00004E9C ; =============== S U B R O U T I N E =======================================
.text:00004E9C
.text:00004E9C ; Attributes: bp-based frame
.text:00004E9C
.text:00004E9C ; public: __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::CRecordVector<struct NArchive::N7z::CFileItem>(void)
.text:00004E9C                 public ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
.text:00004E9C ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00004E9C                                         ; CODE XREF: NArchive::N7z::CDatabase::CDatabase(void)+42p
.text:00004E9C
.text:00004E9C var_4           = dword ptr -4
.text:00004E9C
.text:00004E9C                 push    ebp
.text:00004E9D                 mov     ebp, esp
.text:00004E9F                 push    ecx
.text:00004EA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EA7                 mov     [ebp+var_4], ecx
.text:00004EAA                 mov     eax, [ebp+var_4]
.text:00004EAD                 mov     dword ptr [eax], 0
.text:00004EB3                 mov     ecx, [ebp+var_4]
.text:00004EB6                 mov     dword ptr [ecx+4], 0
.text:00004EBD                 mov     edx, [ebp+var_4]
.text:00004EC0                 mov     dword ptr [edx+8], 0
.text:00004EC7                 mov     eax, [ebp+var_4]
.text:00004ECA                 mov     esp, ebp
.text:00004ECC                 pop     ebp
.text:00004ECD                 retn
.text:00004ECD ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ endp
.text:00004ECD
.text:00004ECD ; ---------------------------------------------------------------------------
.text:00004ECE                 align 10h
.text:00004ECE _text           ends
.text:00004ECE
.text:00004ED0 ; ===========================================================================
.text:00004ED0
.text:00004ED0 ; Segment type: Pure code
.text:00004ED0 ; Segment permissions: Read/Execute
.text:00004ED0 _text           segment para public 'CODE' use32
.text:00004ED0                 assume cs:_text
.text:00004ED0                 ;org 4ED0h
.text:00004ED0 ; COMDAT (pick any)
.text:00004ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004ED0
.text:00004ED0 ; =============== S U B R O U T I N E =======================================
.text:00004ED0
.text:00004ED0 ; Attributes: bp-based frame
.text:00004ED0
.text:00004ED0 ; public: unsigned int __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Size(void)const
.text:00004ED0                 public ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
.text:00004ED0 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ proc near
.text:00004ED0                                         ; CODE XREF: NArchive::N7z::CHandler::GetNumberOfItems(uint *)+Cp
.text:00004ED0
.text:00004ED0 var_4           = dword ptr -4
.text:00004ED0
.text:00004ED0                 push    ebp
.text:00004ED1                 mov     ebp, esp
.text:00004ED3                 push    ecx
.text:00004ED4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EDB                 mov     [ebp+var_4], ecx
.text:00004EDE                 mov     eax, [ebp+var_4]
.text:00004EE1                 mov     eax, [eax+4]
.text:00004EE4                 mov     esp, ebp
.text:00004EE6                 pop     ebp
.text:00004EE7                 retn
.text:00004EE7 ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ endp
.text:00004EE7
.text:00004EE7 _text           ends
.text:00004EE7
.text:00004EE8 ; ===========================================================================
.text:00004EE8
.text:00004EE8 ; Segment type: Pure code
.text:00004EE8 ; Segment permissions: Read/Execute
.text:00004EE8 _text           segment para public 'CODE' use32
.text:00004EE8                 assume cs:_text
.text:00004EE8                 ;org 4EE8h
.text:00004EE8 ; COMDAT (pick any)
.text:00004EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EE8
.text:00004EE8 ; =============== S U B R O U T I N E =======================================
.text:00004EE8
.text:00004EE8 ; Attributes: bp-based frame
.text:00004EE8
.text:00004EE8 ; public: __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::~CRecordVector<struct NArchive::N7z::CFileItem>(void)
.text:00004EE8                 public ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
.text:00004EE8 ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ proc near
.text:00004EE8                                         ; CODE XREF: NArchive::N7z::CDatabase::~CDatabase(void)+B2p
.text:00004EE8                                         ; __unwindfunclet$??1CDatabase@N7z@NArchive@@QAE@XZ$1+6j ...
.text:00004EE8
.text:00004EE8 var_8           = dword ptr -8
.text:00004EE8 var_4           = dword ptr -4
.text:00004EE8
.text:00004EE8                 push    ebp
.text:00004EE9                 mov     ebp, esp
.text:00004EEB                 sub     esp, 8
.text:00004EEE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004EF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EFC                 mov     [ebp+var_4], ecx
.text:00004EFF                 mov     eax, [ebp+var_4]
.text:00004F02                 mov     ecx, [eax]
.text:00004F04                 mov     [ebp+var_8], ecx
.text:00004F07                 mov     edx, [ebp+var_8]
.text:00004F0A                 push    edx             ; void *
.text:00004F0B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F10                 add     esp, 4
.text:00004F13                 add     esp, 8
.text:00004F16                 cmp     ebp, esp
.text:00004F18                 call    __RTC_CheckEsp
.text:00004F1D                 mov     esp, ebp
.text:00004F1F                 pop     ebp
.text:00004F20                 retn
.text:00004F20 ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ endp
.text:00004F20
.text:00004F20 ; ---------------------------------------------------------------------------
.text:00004F21                 align 4
.text:00004F21 _text           ends
.text:00004F21
.text:00004F24 ; ===========================================================================
.text:00004F24
.text:00004F24 ; Segment type: Pure code
.text:00004F24 ; Segment permissions: Read/Execute
.text:00004F24 _text           segment para public 'CODE' use32
.text:00004F24                 assume cs:_text
.text:00004F24                 ;org 4F24h
.text:00004F24 ; COMDAT (pick any)
.text:00004F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F24
.text:00004F24 ; =============== S U B R O U T I N E =======================================
.text:00004F24
.text:00004F24 ; Attributes: bp-based frame
.text:00004F24
.text:00004F24 ; public: void __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::Clear(void)
.text:00004F24                 public ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
.text:00004F24 ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ proc near
.text:00004F24                                         ; CODE XREF: NArchive::N7z::CDatabase::Clear(void)+38p
.text:00004F24
.text:00004F24 var_4           = dword ptr -4
.text:00004F24
.text:00004F24                 push    ebp
.text:00004F25                 mov     ebp, esp
.text:00004F27                 push    ecx
.text:00004F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F2F                 mov     [ebp+var_4], ecx
.text:00004F32                 mov     eax, [ebp+var_4]
.text:00004F35                 mov     dword ptr [eax+4], 0
.text:00004F3C                 mov     esp, ebp
.text:00004F3E                 pop     ebp
.text:00004F3F                 retn
.text:00004F3F ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ endp
.text:00004F3F
.text:00004F3F _text           ends
.text:00004F3F
.text:00004F40 ; ===========================================================================
.text:00004F40
.text:00004F40 ; Segment type: Pure code
.text:00004F40 ; Segment permissions: Read/Execute
.text:00004F40 _text           segment para public 'CODE' use32
.text:00004F40                 assume cs:_text
.text:00004F40                 ;org 4F40h
.text:00004F40 ; COMDAT (pick any)
.text:00004F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F40
.text:00004F40 ; =============== S U B R O U T I N E =======================================
.text:00004F40
.text:00004F40 ; Attributes: bp-based frame
.text:00004F40
.text:00004F40 ; public: struct NArchive::N7z::CFileItem & __thiscall CRecordVector<struct NArchive::N7z::CFileItem>::operator[](unsigned int)
.text:00004F40                 public ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z
.text:00004F40 ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z proc near
.text:00004F40                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+3Cp
.text:00004F40
.text:00004F40 var_4           = dword ptr -4
.text:00004F40 arg_0           = dword ptr  8
.text:00004F40
.text:00004F40                 push    ebp
.text:00004F41                 mov     ebp, esp
.text:00004F43                 push    ecx
.text:00004F44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F4B                 mov     [ebp+var_4], ecx
.text:00004F4E                 mov     eax, [ebp+arg_0]
.text:00004F51                 imul    eax, 18h
.text:00004F54                 mov     ecx, [ebp+var_4]
.text:00004F57                 add     eax, [ecx]
.text:00004F59                 mov     esp, ebp
.text:00004F5B                 pop     ebp
.text:00004F5C                 retn    4
.text:00004F5C ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z endp
.text:00004F5C
.text:00004F5C ; ---------------------------------------------------------------------------
.text:00004F5F                 align 10h
.text:00004F5F _text           ends
.text:00004F5F
.text:00004F60 ; ===========================================================================
.text:00004F60
.text:00004F60 ; Segment type: Pure code
.text:00004F60 ; Segment permissions: Read/Execute
.text:00004F60 _text           segment para public 'CODE' use32
.text:00004F60                 assume cs:_text
.text:00004F60                 ;org 4F60h
.text:00004F60 ; COMDAT (pick any)
.text:00004F60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F60
.text:00004F60 ; =============== S U B R O U T I N E =======================================
.text:00004F60
.text:00004F60 ; Attributes: bp-based frame
.text:00004F60
.text:00004F60 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00004F60                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00004F60 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00004F60                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+A3p
.text:00004F60                                         ; NArchive::N7z::CInArchive::CInArchive(bool)+11p
.text:00004F60
.text:00004F60 var_4           = dword ptr -4
.text:00004F60
.text:00004F60                 push    ebp
.text:00004F61                 mov     ebp, esp
.text:00004F63                 push    ecx
.text:00004F64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F6B                 mov     [ebp+var_4], ecx
.text:00004F6E                 mov     eax, [ebp+var_4]
.text:00004F71                 mov     dword ptr [eax], 0
.text:00004F77                 mov     eax, [ebp+var_4]
.text:00004F7A                 mov     esp, ebp
.text:00004F7C                 pop     ebp
.text:00004F7D                 retn
.text:00004F7D ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00004F7D
.text:00004F7D ; ---------------------------------------------------------------------------
.text:00004F7E                 align 10h
.text:00004F7E _text           ends
.text:00004F7E
.text:00004F80 ; ===========================================================================
.text:00004F80
.text:00004F80 ; Segment type: Pure code
.text:00004F80 ; Segment permissions: Read/Execute
.text:00004F80 _text           segment para public 'CODE' use32
.text:00004F80                 assume cs:_text
.text:00004F80                 ;org 4F80h
.text:00004F80 ; COMDAT (pick any)
.text:00004F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F80
.text:00004F80 ; =============== S U B R O U T I N E =======================================
.text:00004F80
.text:00004F80 ; Attributes: bp-based frame
.text:00004F80
.text:00004F80 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00004F80                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00004F80 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00004F80                                         ; CODE XREF: __unwindfunclet$??0CHandler@N7z@NArchive@@QAE@XZ$1+9j
.text:00004F80                                         ; NArchive::N7z::CHandler::~CHandler(void)+85p ...
.text:00004F80
.text:00004F80 var_4           = dword ptr -4
.text:00004F80
.text:00004F80                 push    ebp
.text:00004F81                 mov     ebp, esp
.text:00004F83                 push    ecx
.text:00004F84                 push    esi
.text:00004F85                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F8C                 mov     [ebp+var_4], ecx
.text:00004F8F                 mov     eax, [ebp+var_4]
.text:00004F92                 cmp     dword ptr [eax], 0
.text:00004F95                 jz      short loc_4FB2
.text:00004F97                 mov     ecx, [ebp+var_4]
.text:00004F9A                 mov     edx, [ecx]
.text:00004F9C                 mov     eax, [ebp+var_4]
.text:00004F9F                 mov     ecx, [eax]
.text:00004FA1                 mov     edx, [edx]
.text:00004FA3                 mov     esi, esp
.text:00004FA5                 push    ecx
.text:00004FA6                 mov     eax, [edx+8]
.text:00004FA9                 call    eax
.text:00004FAB                 cmp     esi, esp
.text:00004FAD                 call    __RTC_CheckEsp
.text:00004FB2
.text:00004FB2 loc_4FB2:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00004FB2                 pop     esi
.text:00004FB3                 add     esp, 4
.text:00004FB6                 cmp     ebp, esp
.text:00004FB8                 call    __RTC_CheckEsp
.text:00004FBD                 mov     esp, ebp
.text:00004FBF                 pop     ebp
.text:00004FC0                 retn
.text:00004FC0 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00004FC0
.text:00004FC0 ; ---------------------------------------------------------------------------
.text:00004FC1                 align 4
.text:00004FC1 _text           ends
.text:00004FC1
.text:00004FC4 ; ===========================================================================
.text:00004FC4
.text:00004FC4 ; Segment type: Pure code
.text:00004FC4 ; Segment permissions: Read/Execute
.text:00004FC4 _text           segment para public 'CODE' use32
.text:00004FC4                 assume cs:_text
.text:00004FC4                 ;org 4FC4h
.text:00004FC4 ; COMDAT (pick any)
.text:00004FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FC4
.text:00004FC4 ; =============== S U B R O U T I N E =======================================
.text:00004FC4
.text:00004FC4 ; Attributes: bp-based frame
.text:00004FC4
.text:00004FC4 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00004FC4                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00004FC4 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00004FC4                                         ; CODE XREF: NArchive::N7z::CHandler::Close(void)+41p
.text:00004FC4
.text:00004FC4 var_4           = dword ptr -4
.text:00004FC4
.text:00004FC4                 push    ebp
.text:00004FC5                 mov     ebp, esp
.text:00004FC7                 push    ecx
.text:00004FC8                 push    esi
.text:00004FC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FD0                 mov     [ebp+var_4], ecx
.text:00004FD3                 mov     eax, [ebp+var_4]
.text:00004FD6                 cmp     dword ptr [eax], 0
.text:00004FD9                 jz      short loc_4FFF
.text:00004FDB                 mov     ecx, [ebp+var_4]
.text:00004FDE                 mov     edx, [ecx]
.text:00004FE0                 mov     eax, [ebp+var_4]
.text:00004FE3                 mov     ecx, [eax]
.text:00004FE5                 mov     edx, [edx]
.text:00004FE7                 mov     esi, esp
.text:00004FE9                 push    ecx
.text:00004FEA                 mov     eax, [edx+8]
.text:00004FED                 call    eax
.text:00004FEF                 cmp     esi, esp
.text:00004FF1                 call    __RTC_CheckEsp
.text:00004FF6                 mov     ecx, [ebp+var_4]
.text:00004FF9                 mov     dword ptr [ecx], 0
.text:00004FFF
.text:00004FFF loc_4FFF:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:00004FFF                 pop     esi
.text:00005000                 add     esp, 4
.text:00005003                 cmp     ebp, esp
.text:00005005                 call    __RTC_CheckEsp
.text:0000500A                 mov     esp, ebp
.text:0000500C                 pop     ebp
.text:0000500D                 retn
.text:0000500D ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:0000500D
.text:0000500D ; ---------------------------------------------------------------------------
.text:0000500E                 align 10h
.text:0000500E _text           ends
.text:0000500E
.text:00005010 ; ===========================================================================
.text:00005010
.text:00005010 ; Segment type: Pure code
.text:00005010 ; Segment permissions: Read/Execute
.text:00005010 _text           segment para public 'CODE' use32
.text:00005010                 assume cs:_text
.text:00005010                 ;org 5010h
.text:00005010 ; COMDAT (pick any)
.text:00005010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005010
.text:00005010 ; =============== S U B R O U T I N E =======================================
.text:00005010
.text:00005010 ; Attributes: bp-based frame
.text:00005010
.text:00005010 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:00005010                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:00005010 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:00005010                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+216p
.text:00005010
.text:00005010 var_4           = dword ptr -4
.text:00005010 arg_0           = dword ptr  8
.text:00005010
.text:00005010                 push    ebp
.text:00005011                 mov     ebp, esp
.text:00005013                 push    ecx
.text:00005014                 push    esi
.text:00005015                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000501C                 mov     [ebp+var_4], ecx
.text:0000501F                 cmp     [ebp+arg_0], 0
.text:00005023                 jz      short loc_503C
.text:00005025                 mov     eax, [ebp+arg_0]
.text:00005028                 mov     ecx, [eax]
.text:0000502A                 mov     esi, esp
.text:0000502C                 mov     edx, [ebp+arg_0]
.text:0000502F                 push    edx
.text:00005030                 mov     eax, [ecx+4]
.text:00005033                 call    eax
.text:00005035                 cmp     esi, esp
.text:00005037                 call    __RTC_CheckEsp
.text:0000503C
.text:0000503C loc_503C:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:0000503C                 mov     ecx, [ebp+var_4]
.text:0000503F                 cmp     dword ptr [ecx], 0
.text:00005042                 jz      short loc_505F
.text:00005044                 mov     edx, [ebp+var_4]
.text:00005047                 mov     eax, [edx]
.text:00005049                 mov     ecx, [ebp+var_4]
.text:0000504C                 mov     edx, [ecx]
.text:0000504E                 mov     eax, [eax]
.text:00005050                 mov     esi, esp
.text:00005052                 push    edx
.text:00005053                 mov     ecx, [eax+8]
.text:00005056                 call    ecx
.text:00005058                 cmp     esi, esp
.text:0000505A                 call    __RTC_CheckEsp
.text:0000505F
.text:0000505F loc_505F:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:0000505F                 mov     edx, [ebp+var_4]
.text:00005062                 mov     eax, [ebp+arg_0]
.text:00005065                 mov     [edx], eax
.text:00005067                 mov     eax, [ebp+arg_0]
.text:0000506A                 pop     esi
.text:0000506B                 add     esp, 4
.text:0000506E                 cmp     ebp, esp
.text:00005070                 call    __RTC_CheckEsp
.text:00005075                 mov     esp, ebp
.text:00005077                 pop     ebp
.text:00005078                 retn    4
.text:00005078 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00005078
.text:00005078 ; ---------------------------------------------------------------------------
.text:0000507B                 align 4
.text:0000507B _text           ends
.text:0000507B
.text:0000507C ; ===========================================================================
.text:0000507C
.text:0000507C ; Segment type: Pure code
.text:0000507C ; Segment permissions: Read/Execute
.text:0000507C _text           segment para public 'CODE' use32
.text:0000507C                 assume cs:_text
.text:0000507C                 ;org 507Ch
.text:0000507C ; COMDAT (pick any)
.text:0000507C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000507C
.text:0000507C ; =============== S U B R O U T I N E =======================================
.text:0000507C
.text:0000507C ; Attributes: bp-based frame
.text:0000507C
.text:0000507C ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::CMyComPtr<struct IArchiveOpenCallback>(struct IArchiveOpenCallback *)
.text:0000507C                 public ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z
.text:0000507C ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z proc near
.text:0000507C                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7Bp
.text:0000507C
.text:0000507C var_4           = dword ptr -4
.text:0000507C arg_0           = dword ptr  8
.text:0000507C
.text:0000507C                 push    ebp
.text:0000507D                 mov     ebp, esp
.text:0000507F                 push    ecx
.text:00005080                 push    esi
.text:00005081                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005088                 mov     [ebp+var_4], ecx
.text:0000508B                 mov     eax, [ebp+var_4]
.text:0000508E                 mov     ecx, [ebp+arg_0]
.text:00005091                 mov     [eax], ecx
.text:00005093                 cmp     [ebp+arg_0], 0
.text:00005097                 jz      short loc_50B0
.text:00005099                 mov     edx, [ebp+arg_0]
.text:0000509C                 mov     eax, [edx]
.text:0000509E                 mov     esi, esp
.text:000050A0                 mov     ecx, [ebp+arg_0]
.text:000050A3                 push    ecx
.text:000050A4                 mov     edx, [eax+4]
.text:000050A7                 call    edx
.text:000050A9                 cmp     esi, esp
.text:000050AB                 call    __RTC_CheckEsp
.text:000050B0
.text:000050B0 loc_50B0:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>(IArchiveOpenCallback *)+1Bj
.text:000050B0                 mov     eax, [ebp+var_4]
.text:000050B3                 pop     esi
.text:000050B4                 add     esp, 4
.text:000050B7                 cmp     ebp, esp
.text:000050B9                 call    __RTC_CheckEsp
.text:000050BE                 mov     esp, ebp
.text:000050C0                 pop     ebp
.text:000050C1                 retn    4
.text:000050C1 ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z endp
.text:000050C1
.text:000050C1 _text           ends
.text:000050C1
.text:000050C4 ; ===========================================================================
.text:000050C4
.text:000050C4 ; Segment type: Pure code
.text:000050C4 ; Segment permissions: Read/Execute
.text:000050C4 _text           segment para public 'CODE' use32
.text:000050C4                 assume cs:_text
.text:000050C4                 ;org 50C4h
.text:000050C4 ; COMDAT (pick any)
.text:000050C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000050C4
.text:000050C4 ; =============== S U B R O U T I N E =======================================
.text:000050C4
.text:000050C4 ; Attributes: bp-based frame
.text:000050C4
.text:000050C4 ; public: __thiscall CMyComPtr<struct IArchiveOpenCallback>::~CMyComPtr<struct IArchiveOpenCallback>(void)
.text:000050C4                 public ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
.text:000050C4 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ proc near
.text:000050C4                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+144p
.text:000050C4                                         ; NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1F9p ...
.text:000050C4
.text:000050C4 var_4           = dword ptr -4
.text:000050C4
.text:000050C4                 push    ebp
.text:000050C5                 mov     ebp, esp
.text:000050C7                 push    ecx
.text:000050C8                 push    esi
.text:000050C9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000050D0                 mov     [ebp+var_4], ecx
.text:000050D3                 mov     eax, [ebp+var_4]
.text:000050D6                 cmp     dword ptr [eax], 0
.text:000050D9                 jz      short loc_50F6
.text:000050DB                 mov     ecx, [ebp+var_4]
.text:000050DE                 mov     edx, [ecx]
.text:000050E0                 mov     eax, [ebp+var_4]
.text:000050E3                 mov     ecx, [eax]
.text:000050E5                 mov     edx, [edx]
.text:000050E7                 mov     esi, esp
.text:000050E9                 push    ecx
.text:000050EA                 mov     eax, [edx+8]
.text:000050ED                 call    eax
.text:000050EF                 cmp     esi, esp
.text:000050F1                 call    __RTC_CheckEsp
.text:000050F6
.text:000050F6 loc_50F6:                               ; CODE XREF: CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>(void)+15j
.text:000050F6                 pop     esi
.text:000050F7                 add     esp, 4
.text:000050FA                 cmp     ebp, esp
.text:000050FC                 call    __RTC_CheckEsp
.text:00005101                 mov     esp, ebp
.text:00005103                 pop     ebp
.text:00005104                 retn
.text:00005104 ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ endp
.text:00005104
.text:00005104 ; ---------------------------------------------------------------------------
.text:00005105                 align 4
.text:00005105 _text           ends
.text:00005105
.text:00005108 ; ===========================================================================
.text:00005108
.text:00005108 ; Segment type: Pure code
.text:00005108 ; Segment permissions: Read/Execute
.text:00005108 _text           segment para public 'CODE' use32
.text:00005108                 assume cs:_text
.text:00005108                 ;org 5108h
.text:00005108 ; COMDAT (pick any)
.text:00005108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005108
.text:00005108 ; =============== S U B R O U T I N E =======================================
.text:00005108
.text:00005108 ; Attributes: bp-based frame
.text:00005108
.text:00005108 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00005108                 public ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00005108 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00005108                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+87p
.text:00005108
.text:00005108 var_4           = dword ptr -4
.text:00005108
.text:00005108                 push    ebp
.text:00005109                 mov     ebp, esp
.text:0000510B                 push    ecx
.text:0000510C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005113                 mov     [ebp+var_4], ecx
.text:00005116                 mov     eax, [ebp+var_4]
.text:00005119                 mov     dword ptr [eax], 0
.text:0000511F                 mov     eax, [ebp+var_4]
.text:00005122                 mov     esp, ebp
.text:00005124                 pop     ebp
.text:00005125                 retn
.text:00005125 ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00005125
.text:00005125 ; ---------------------------------------------------------------------------
.text:00005126                 align 4
.text:00005126 _text           ends
.text:00005126
.text:00005128 ; ===========================================================================
.text:00005128
.text:00005128 ; Segment type: Pure code
.text:00005128 ; Segment permissions: Read/Execute
.text:00005128 _text           segment para public 'CODE' use32
.text:00005128                 assume cs:_text
.text:00005128                 ;org 5128h
.text:00005128 ; COMDAT (pick any)
.text:00005128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005128
.text:00005128 ; =============== S U B R O U T I N E =======================================
.text:00005128
.text:00005128 ; Attributes: bp-based frame
.text:00005128
.text:00005128 ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::~CMyComPtr<struct ICryptoGetTextPassword>(void)
.text:00005128                 public ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
.text:00005128 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ proc near
.text:00005128                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+138p
.text:00005128                                         ; NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+1EDp ...
.text:00005128
.text:00005128 var_4           = dword ptr -4
.text:00005128
.text:00005128                 push    ebp
.text:00005129                 mov     ebp, esp
.text:0000512B                 push    ecx
.text:0000512C                 push    esi
.text:0000512D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005134                 mov     [ebp+var_4], ecx
.text:00005137                 mov     eax, [ebp+var_4]
.text:0000513A                 cmp     dword ptr [eax], 0
.text:0000513D                 jz      short loc_515A
.text:0000513F                 mov     ecx, [ebp+var_4]
.text:00005142                 mov     edx, [ecx]
.text:00005144                 mov     eax, [ebp+var_4]
.text:00005147                 mov     ecx, [eax]
.text:00005149                 mov     edx, [edx]
.text:0000514B                 mov     esi, esp
.text:0000514D                 push    ecx
.text:0000514E                 mov     eax, [edx+8]
.text:00005151                 call    eax
.text:00005153                 cmp     esi, esp
.text:00005155                 call    __RTC_CheckEsp
.text:0000515A
.text:0000515A loc_515A:                               ; CODE XREF: CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>(void)+15j
.text:0000515A                 pop     esi
.text:0000515B                 add     esp, 4
.text:0000515E                 cmp     ebp, esp
.text:00005160                 call    __RTC_CheckEsp
.text:00005165                 mov     esp, ebp
.text:00005167                 pop     ebp
.text:00005168                 retn
.text:00005168 ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ endp
.text:00005168
.text:00005168 ; ---------------------------------------------------------------------------
.text:00005169                 align 4
.text:00005169 _text           ends
.text:00005169
.text:0000516C ; ===========================================================================
.text:0000516C
.text:0000516C ; Segment type: Pure code
.text:0000516C ; Segment permissions: Read/Execute
.text:0000516C _text           segment para public 'CODE' use32
.text:0000516C                 assume cs:_text
.text:0000516C                 ;org 516Ch
.text:0000516C ; COMDAT (pick any)
.text:0000516C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000516C
.text:0000516C ; =============== S U B R O U T I N E =======================================
.text:0000516C
.text:0000516C ; Attributes: bp-based frame
.text:0000516C
.text:0000516C ; public: __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator struct ICryptoGetTextPassword *(void)const
.text:0000516C                 public ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
.text:0000516C ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ proc near
.text:0000516C                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+161p
.text:0000516C
.text:0000516C var_4           = dword ptr -4
.text:0000516C
.text:0000516C                 push    ebp
.text:0000516D                 mov     ebp, esp
.text:0000516F                 push    ecx
.text:00005170                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005177                 mov     [ebp+var_4], ecx
.text:0000517A                 mov     eax, [ebp+var_4]
.text:0000517D                 mov     eax, [eax]
.text:0000517F                 mov     esp, ebp
.text:00005181                 pop     ebp
.text:00005182                 retn
.text:00005182 ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ endp
.text:00005182
.text:00005182 ; ---------------------------------------------------------------------------
.text:00005183                 align 4
.text:00005183 _text           ends
.text:00005183
.text:00005184 ; ===========================================================================
.text:00005184
.text:00005184 ; Segment type: Pure code
.text:00005184 ; Segment permissions: Read/Execute
.text:00005184 _text           segment para public 'CODE' use32
.text:00005184                 assume cs:_text
.text:00005184                 ;org 5184h
.text:00005184 ; COMDAT (pick any)
.text:00005184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005184
.text:00005184 ; =============== S U B R O U T I N E =======================================
.text:00005184
.text:00005184 ; Attributes: bp-based frame
.text:00005184
.text:00005184 ; public: struct ICryptoGetTextPassword * * __thiscall CMyComPtr<struct ICryptoGetTextPassword>::operator&(void)
.text:00005184                 public ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
.text:00005184 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ proc near
.text:00005184                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+9Fp
.text:00005184
.text:00005184 var_4           = dword ptr -4
.text:00005184
.text:00005184                 push    ebp
.text:00005185                 mov     ebp, esp
.text:00005187                 push    ecx
.text:00005188                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000518F                 mov     [ebp+var_4], ecx
.text:00005192                 mov     eax, [ebp+var_4]
.text:00005195                 mov     esp, ebp
.text:00005197                 pop     ebp
.text:00005198                 retn
.text:00005198 ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ endp
.text:00005198
.text:00005198 ; ---------------------------------------------------------------------------
.text:00005199                 align 4
.text:00005199 _text           ends
.text:00005199
.text:0000519C ; ===========================================================================
.text:0000519C
.text:0000519C ; Segment type: Pure code
.text:0000519C ; Segment permissions: Read/Execute
.text:0000519C _text           segment para public 'CODE' use32
.text:0000519C                 assume cs:_text
.text:0000519C                 ;org 519Ch
.text:0000519C ; COMDAT (pick any)
.text:0000519C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000519C
.text:0000519C ; =============== S U B R O U T I N E =======================================
.text:0000519C
.text:0000519C ; Attributes: bp-based frame
.text:0000519C
.text:0000519C ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:0000519C                 public ??_GCProp@@QAEPAXI@Z
.text:0000519C ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:0000519C
.text:0000519C var_4           = dword ptr -4
.text:0000519C arg_0           = dword ptr  8
.text:0000519C
.text:0000519C                 push    ebp
.text:0000519D                 mov     ebp, esp
.text:0000519F                 push    ecx
.text:000051A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051A7                 mov     [ebp+var_4], ecx
.text:000051AA                 mov     ecx, [ebp+var_4] ; this
.text:000051AD                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:000051B2                 mov     eax, [ebp+arg_0]
.text:000051B5                 and     eax, 1
.text:000051B8                 jz      short loc_51C6
.text:000051BA                 mov     ecx, [ebp+var_4]
.text:000051BD                 push    ecx             ; void *
.text:000051BE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000051C3                 add     esp, 4
.text:000051C6
.text:000051C6 loc_51C6:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:000051C6                 mov     eax, [ebp+var_4]
.text:000051C9                 add     esp, 4
.text:000051CC                 cmp     ebp, esp
.text:000051CE                 call    __RTC_CheckEsp
.text:000051D3                 mov     esp, ebp
.text:000051D5                 pop     ebp
.text:000051D6                 retn    4
.text:000051D6 ??_GCProp@@QAEPAXI@Z endp
.text:000051D6
.text:000051D6 ; ---------------------------------------------------------------------------
.text:000051D9                 align 4
.text:000051D9 _text           ends
.text:000051D9
.text:000051DC ; ===========================================================================
.text:000051DC
.text:000051DC ; Segment type: Pure code
.text:000051DC ; Segment permissions: Read/Execute
.text:000051DC _text           segment para public 'CODE' use32
.text:000051DC                 assume cs:_text
.text:000051DC                 ;org 51DCh
.text:000051DC ; COMDAT (pick any)
.text:000051DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000051DC
.text:000051DC ; =============== S U B R O U T I N E =======================================
.text:000051DC
.text:000051DC ; Attributes: bp-based frame
.text:000051DC
.text:000051DC ; public: void * __thiscall COneMethodInfo::`scalar deleting destructor'(unsigned int)
.text:000051DC                 public ??_GCOneMethodInfo@@QAEPAXI@Z
.text:000051DC ??_GCOneMethodInfo@@QAEPAXI@Z proc near ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+7Fp
.text:000051DC
.text:000051DC var_4           = dword ptr -4
.text:000051DC arg_0           = dword ptr  8
.text:000051DC
.text:000051DC                 push    ebp
.text:000051DD                 mov     ebp, esp
.text:000051DF                 push    ecx
.text:000051E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051E7                 mov     [ebp+var_4], ecx
.text:000051EA                 mov     ecx, [ebp+var_4] ; this
.text:000051ED                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:000051F2                 mov     eax, [ebp+arg_0]
.text:000051F5                 and     eax, 1
.text:000051F8                 jz      short loc_5206
.text:000051FA                 mov     ecx, [ebp+var_4]
.text:000051FD                 push    ecx             ; void *
.text:000051FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005203                 add     esp, 4
.text:00005206
.text:00005206 loc_5206:                               ; CODE XREF: COneMethodInfo::`scalar deleting destructor'(uint)+1Cj
.text:00005206                 mov     eax, [ebp+var_4]
.text:00005209                 add     esp, 4
.text:0000520C                 cmp     ebp, esp
.text:0000520E                 call    __RTC_CheckEsp
.text:00005213                 mov     esp, ebp
.text:00005215                 pop     ebp
.text:00005216                 retn    4
.text:00005216 ??_GCOneMethodInfo@@QAEPAXI@Z endp
.text:00005216
.text:00005216 ; ---------------------------------------------------------------------------
.text:00005219                 align 4
.text:00005219 _text           ends
.text:00005219
.text:0000521C ; ===========================================================================
.text:0000521C
.text:0000521C ; Segment type: Pure code
.text:0000521C ; Segment permissions: Read/Execute
.text:0000521C _text           segment para public 'CODE' use32
.text:0000521C                 assume cs:_text
.text:0000521C                 ;org 521Ch
.text:0000521C ; COMDAT (pick any)
.text:0000521C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000521C
.text:0000521C ; =============== S U B R O U T I N E =======================================
.text:0000521C
.text:0000521C ; Attributes: bp-based frame
.text:0000521C
.text:0000521C ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:0000521C                 public ??1CProp@@QAE@XZ
.text:0000521C ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:0000521C
.text:0000521C var_4           = dword ptr -4
.text:0000521C
.text:0000521C                 push    ebp
.text:0000521D                 mov     ebp, esp
.text:0000521F                 push    ecx
.text:00005220                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005227                 mov     [ebp+var_4], ecx
.text:0000522A                 mov     ecx, [ebp+var_4]
.text:0000522D                 add     ecx, 8          ; this
.text:00005230                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00005235                 add     esp, 4
.text:00005238                 cmp     ebp, esp
.text:0000523A                 call    __RTC_CheckEsp
.text:0000523F                 mov     esp, ebp
.text:00005241                 pop     ebp
.text:00005242                 retn
.text:00005242 ??1CProp@@QAE@XZ endp
.text:00005242
.text:00005242 ; ---------------------------------------------------------------------------
.text:00005243                 align 4
.text:00005243 _text           ends
.text:00005243
.text:00005244 ; ===========================================================================
.text:00005244
.text:00005244 ; Segment type: Pure code
.text:00005244 ; Segment permissions: Read/Execute
.text:00005244 _text           segment para public 'CODE' use32
.text:00005244                 assume cs:_text
.text:00005244                 ;org 5244h
.text:00005244 ; COMDAT (pick any)
.text:00005244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005244
.text:00005244 ; =============== S U B R O U T I N E =======================================
.text:00005244
.text:00005244 ; Attributes: bp-based frame
.text:00005244
.text:00005244 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005244                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00005244 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00005244                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:00005244                                         ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(void)+11p
.text:00005244
.text:00005244 var_4           = dword ptr -4
.text:00005244
.text:00005244                 push    ebp
.text:00005245                 mov     ebp, esp
.text:00005247                 push    ecx
.text:00005248                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000524F                 mov     [ebp+var_4], ecx
.text:00005252                 mov     eax, [ebp+var_4]
.text:00005255                 mov     dword ptr [eax], 0
.text:0000525B                 mov     ecx, [ebp+var_4]
.text:0000525E                 mov     dword ptr [ecx+4], 0
.text:00005265                 mov     edx, [ebp+var_4]
.text:00005268                 mov     dword ptr [edx+8], 0
.text:0000526F                 mov     eax, [ebp+var_4]
.text:00005272                 mov     esp, ebp
.text:00005274                 pop     ebp
.text:00005275                 retn
.text:00005275 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00005275
.text:00005275 ; ---------------------------------------------------------------------------
.text:00005276                 align 4
.text:00005276 _text           ends
.text:00005276
.text:00005278 ; ===========================================================================
.text:00005278
.text:00005278 ; Segment type: Pure code
.text:00005278 ; Segment permissions: Read/Execute
.text:00005278 _text           segment para public 'CODE' use32
.text:00005278                 assume cs:_text
.text:00005278                 ;org 5278h
.text:00005278 ; COMDAT (pick any)
.text:00005278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005278
.text:00005278 ; =============== S U B R O U T I N E =======================================
.text:00005278
.text:00005278 ; Attributes: bp-based frame
.text:00005278
.text:00005278 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00005278                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00005278 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00005278                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:00005278                                         ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+46p
.text:00005278
.text:00005278 var_4           = dword ptr -4
.text:00005278
.text:00005278                 push    ebp
.text:00005279                 mov     ebp, esp
.text:0000527B                 push    ecx
.text:0000527C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005283                 mov     [ebp+var_4], ecx
.text:00005286                 mov     eax, [ebp+var_4]
.text:00005289                 mov     eax, [eax+4]
.text:0000528C                 mov     esp, ebp
.text:0000528E                 pop     ebp
.text:0000528F                 retn
.text:0000528F ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000528F
.text:0000528F _text           ends
.text:0000528F
.text:00005290 ; ===========================================================================
.text:00005290
.text:00005290 ; Segment type: Pure code
.text:00005290 ; Segment permissions: Read/Execute
.text:00005290 _text           segment para public 'CODE' use32
.text:00005290                 assume cs:_text
.text:00005290                 ;org 5290h
.text:00005290 ; COMDAT (pick any)
.text:00005290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005290
.text:00005290 ; =============== S U B R O U T I N E =======================================
.text:00005290
.text:00005290 ; Attributes: bp-based frame
.text:00005290
.text:00005290 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005290                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00005290 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00005290                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:00005290                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:00005290
.text:00005290 var_8           = dword ptr -8
.text:00005290 var_4           = dword ptr -4
.text:00005290
.text:00005290                 push    ebp
.text:00005291                 mov     ebp, esp
.text:00005293                 sub     esp, 8
.text:00005296                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000529D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052A4                 mov     [ebp+var_4], ecx
.text:000052A7                 mov     eax, [ebp+var_4]
.text:000052AA                 mov     ecx, [eax]
.text:000052AC                 mov     [ebp+var_8], ecx
.text:000052AF                 mov     edx, [ebp+var_8]
.text:000052B2                 push    edx             ; void *
.text:000052B3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000052B8                 add     esp, 4
.text:000052BB                 add     esp, 8
.text:000052BE                 cmp     ebp, esp
.text:000052C0                 call    __RTC_CheckEsp
.text:000052C5                 mov     esp, ebp
.text:000052C7                 pop     ebp
.text:000052C8                 retn
.text:000052C8 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000052C8
.text:000052C8 ; ---------------------------------------------------------------------------
.text:000052C9                 align 4
.text:000052C9 _text           ends
.text:000052C9
.text:000052CC ; ===========================================================================
.text:000052CC
.text:000052CC ; Segment type: Pure code
.text:000052CC ; Segment permissions: Read/Execute
.text:000052CC _text           segment para public 'CODE' use32
.text:000052CC                 assume cs:_text
.text:000052CC                 ;org 52CCh
.text:000052CC ; COMDAT (pick any)
.text:000052CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052CC
.text:000052CC ; =============== S U B R O U T I N E =======================================
.text:000052CC
.text:000052CC ; Attributes: bp-based frame
.text:000052CC
.text:000052CC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:000052CC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:000052CC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:000052CC                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:000052CC                                         ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+64p
.text:000052CC
.text:000052CC var_4           = dword ptr -4
.text:000052CC arg_0           = dword ptr  8
.text:000052CC
.text:000052CC                 push    ebp
.text:000052CD                 mov     ebp, esp
.text:000052CF                 push    ecx
.text:000052D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052D7                 mov     [ebp+var_4], ecx
.text:000052DA                 mov     eax, [ebp+var_4]
.text:000052DD                 mov     ecx, [eax]
.text:000052DF                 mov     edx, [ebp+arg_0]
.text:000052E2                 lea     eax, [ecx+edx*4]
.text:000052E5                 mov     esp, ebp
.text:000052E7                 pop     ebp
.text:000052E8                 retn    4
.text:000052E8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000052E8
.text:000052E8 ; ---------------------------------------------------------------------------
.text:000052EB                 align 4
.text:000052EB _text           ends
.text:000052EB
.text:000052EC ; ===========================================================================
.text:000052EC
.text:000052EC ; Segment type: Pure code
.text:000052EC ; Segment permissions: Read/Execute
.text:000052EC _text           segment para public 'CODE' use32
.text:000052EC                 assume cs:_text
.text:000052EC                 ;org 52ECh
.text:000052EC ; COMDAT (pick any)
.text:000052EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052EC
.text:000052EC ; =============== S U B R O U T I N E =======================================
.text:000052EC
.text:000052EC ; Attributes: bp-based frame
.text:000052EC
.text:000052EC ; public: long __thiscall CMyComPtr<struct IArchiveOpenCallback>::QueryInterface<struct ICryptoGetTextPassword>(struct _GUID const &, struct ICryptoGetTextPassword * *)const
.text:000052EC                 public ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
.text:000052EC ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z proc near
.text:000052EC                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+B9p
.text:000052EC
.text:000052EC var_4           = dword ptr -4
.text:000052EC arg_0           = dword ptr  8
.text:000052EC arg_4           = dword ptr  0Ch
.text:000052EC
.text:000052EC                 push    ebp
.text:000052ED                 mov     ebp, esp
.text:000052EF                 push    ecx
.text:000052F0                 push    esi
.text:000052F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052F8                 mov     [ebp+var_4], ecx
.text:000052FB                 mov     esi, esp
.text:000052FD                 mov     eax, [ebp+arg_4]
.text:00005300                 push    eax
.text:00005301                 mov     ecx, [ebp+arg_0]
.text:00005304                 push    ecx
.text:00005305                 mov     edx, [ebp+var_4]
.text:00005308                 mov     eax, [edx]
.text:0000530A                 mov     ecx, [ebp+var_4]
.text:0000530D                 mov     edx, [ecx]
.text:0000530F                 mov     eax, [eax]
.text:00005311                 push    edx
.text:00005312                 mov     ecx, [eax]
.text:00005314                 call    ecx
.text:00005316                 cmp     esi, esp
.text:00005318                 call    __RTC_CheckEsp
.text:0000531D                 pop     esi
.text:0000531E                 add     esp, 4
.text:00005321                 cmp     ebp, esp
.text:00005323                 call    __RTC_CheckEsp
.text:00005328                 mov     esp, ebp
.text:0000532A                 pop     ebp
.text:0000532B                 retn    8
.text:0000532B ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z endp
.text:0000532B
.text:0000532B ; ---------------------------------------------------------------------------
.text:0000532E                 align 10h
.text:0000532E _text           ends
.text:0000532E
.text:00005330 ; ===========================================================================
.text:00005330
.text:00005330 ; Segment type: Pure code
.text:00005330 ; Segment permissions: Read/Execute
.text:00005330 _text           segment para public 'CODE' use32
.text:00005330                 assume cs:_text
.text:00005330                 ;org 5330h
.text:00005330 ; COMDAT (pick any)
.text:00005330                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005330
.text:00005330 ; =============== S U B R O U T I N E =======================================
.text:00005330
.text:00005330
.text:00005330 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::Release`adjustor{4}' (void)
.text:00005330                 public ?Release@CHandler@N7z@NArchive@@W3AGKXZ
.text:00005330 ?Release@CHandler@N7z@NArchive@@W3AGKXZ proc near
.text:00005330                                         ; DATA XREF: .rdata:00002050o
.text:00005330
.text:00005330 arg_0           = dword ptr  4
.text:00005330
.text:00005330                 sub     [esp+arg_0], 4
.text:00005335                 jmp     ?Release@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::Release(void)
.text:00005335 ?Release@CHandler@N7z@NArchive@@W3AGKXZ endp
.text:00005335
.text:00005335 ; ---------------------------------------------------------------------------
.text:0000533A                 align 4
.text:0000533A _text           ends
.text:0000533A
.text:0000533C ; ===========================================================================
.text:0000533C
.text:0000533C ; Segment type: Pure code
.text:0000533C ; Segment permissions: Read/Execute
.text:0000533C _text           segment para public 'CODE' use32
.text:0000533C                 assume cs:_text
.text:0000533C                 ;org 533Ch
.text:0000533C ; COMDAT (pick any)
.text:0000533C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000533C
.text:0000533C ; =============== S U B R O U T I N E =======================================
.text:0000533C
.text:0000533C
.text:0000533C ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::Release`adjustor{8}' (void)
.text:0000533C                 public ?Release@CHandler@N7z@NArchive@@W7AGKXZ
.text:0000533C ?Release@CHandler@N7z@NArchive@@W7AGKXZ proc near
.text:0000533C                                         ; DATA XREF: .rdata:0000203Co
.text:0000533C
.text:0000533C arg_0           = dword ptr  4
.text:0000533C
.text:0000533C                 sub     [esp+arg_0], 8
.text:00005341                 jmp     ?Release@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::Release(void)
.text:00005341 ?Release@CHandler@N7z@NArchive@@W7AGKXZ endp
.text:00005341
.text:00005341 ; ---------------------------------------------------------------------------
.text:00005346                 align 4
.text:00005346 _text           ends
.text:00005346
.text:00005348 ; ===========================================================================
.text:00005348
.text:00005348 ; Segment type: Pure code
.text:00005348 ; Segment permissions: Read/Execute
.text:00005348 _text           segment para public 'CODE' use32
.text:00005348                 assume cs:_text
.text:00005348                 ;org 5348h
.text:00005348 ; COMDAT (pick any)
.text:00005348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005348
.text:00005348 ; =============== S U B R O U T I N E =======================================
.text:00005348
.text:00005348
.text:00005348 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::Release`adjustor{12}' (void)
.text:00005348                 public ?Release@CHandler@N7z@NArchive@@WM@AGKXZ
.text:00005348 ?Release@CHandler@N7z@NArchive@@WM@AGKXZ proc near
.text:00005348                                         ; DATA XREF: .rdata:00002024o
.text:00005348
.text:00005348 arg_0           = dword ptr  4
.text:00005348
.text:00005348                 sub     [esp+arg_0], 0Ch
.text:0000534D                 jmp     ?Release@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::Release(void)
.text:0000534D ?Release@CHandler@N7z@NArchive@@WM@AGKXZ endp
.text:0000534D
.text:0000534D ; ---------------------------------------------------------------------------
.text:00005352                 align 4
.text:00005352 _text           ends
.text:00005352
.text:00005354 ; ===========================================================================
.text:00005354
.text:00005354 ; Segment type: Pure code
.text:00005354 ; Segment permissions: Read/Execute
.text:00005354 _text           segment para public 'CODE' use32
.text:00005354                 assume cs:_text
.text:00005354                 ;org 5354h
.text:00005354 ; COMDAT (pick any)
.text:00005354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005354
.text:00005354 ; =============== S U B R O U T I N E =======================================
.text:00005354
.text:00005354
.text:00005354 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::AddRef`adjustor{4}' (void)
.text:00005354                 public ?AddRef@CHandler@N7z@NArchive@@W3AGKXZ
.text:00005354 ?AddRef@CHandler@N7z@NArchive@@W3AGKXZ proc near
.text:00005354                                         ; DATA XREF: .rdata:0000204Co
.text:00005354
.text:00005354 arg_0           = dword ptr  4
.text:00005354
.text:00005354                 sub     [esp+arg_0], 4
.text:00005359                 jmp     ?AddRef@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::AddRef(void)
.text:00005359 ?AddRef@CHandler@N7z@NArchive@@W3AGKXZ endp
.text:00005359
.text:00005359 ; ---------------------------------------------------------------------------
.text:0000535E                 align 10h
.text:0000535E _text           ends
.text:0000535E
.text:00005360 ; ===========================================================================
.text:00005360
.text:00005360 ; Segment type: Pure code
.text:00005360 ; Segment permissions: Read/Execute
.text:00005360 _text           segment para public 'CODE' use32
.text:00005360                 assume cs:_text
.text:00005360                 ;org 5360h
.text:00005360 ; COMDAT (pick any)
.text:00005360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005360
.text:00005360 ; =============== S U B R O U T I N E =======================================
.text:00005360
.text:00005360
.text:00005360 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::AddRef`adjustor{8}' (void)
.text:00005360                 public ?AddRef@CHandler@N7z@NArchive@@W7AGKXZ
.text:00005360 ?AddRef@CHandler@N7z@NArchive@@W7AGKXZ proc near
.text:00005360                                         ; DATA XREF: .rdata:00002038o
.text:00005360
.text:00005360 arg_0           = dword ptr  4
.text:00005360
.text:00005360                 sub     [esp+arg_0], 8
.text:00005365                 jmp     ?AddRef@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::AddRef(void)
.text:00005365 ?AddRef@CHandler@N7z@NArchive@@W7AGKXZ endp
.text:00005365
.text:00005365 ; ---------------------------------------------------------------------------
.text:0000536A                 align 4
.text:0000536A _text           ends
.text:0000536A
.text:0000536C ; ===========================================================================
.text:0000536C
.text:0000536C ; Segment type: Pure code
.text:0000536C ; Segment permissions: Read/Execute
.text:0000536C _text           segment para public 'CODE' use32
.text:0000536C                 assume cs:_text
.text:0000536C                 ;org 536Ch
.text:0000536C ; COMDAT (pick any)
.text:0000536C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000536C
.text:0000536C ; =============== S U B R O U T I N E =======================================
.text:0000536C
.text:0000536C
.text:0000536C ; [thunk]:public: virtual long __stdcall NArchive::N7z::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:0000536C                 public ?QueryInterface@CHandler@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:0000536C ?QueryInterface@CHandler@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:0000536C                                         ; DATA XREF: .rdata:const NArchive::N7z::CHandler::`vftable'{for `IArchiveGetRawProps'}o
.text:0000536C
.text:0000536C arg_0           = dword ptr  4
.text:0000536C
.text:0000536C                 sub     [esp+arg_0], 4
.text:00005371                 jmp     ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)
.text:00005371 ?QueryInterface@CHandler@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00005371
.text:00005371 ; ---------------------------------------------------------------------------
.text:00005376                 align 4
.text:00005376 _text           ends
.text:00005376
.text:00005378 ; ===========================================================================
.text:00005378
.text:00005378 ; Segment type: Pure code
.text:00005378 ; Segment permissions: Read/Execute
.text:00005378 _text           segment para public 'CODE' use32
.text:00005378                 assume cs:_text
.text:00005378                 ;org 5378h
.text:00005378 ; COMDAT (pick any)
.text:00005378                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005378
.text:00005378 ; =============== S U B R O U T I N E =======================================
.text:00005378
.text:00005378
.text:00005378 ; [thunk]:public: virtual unsigned long __stdcall NArchive::N7z::CHandler::AddRef`adjustor{12}' (void)
.text:00005378                 public ?AddRef@CHandler@N7z@NArchive@@WM@AGKXZ
.text:00005378 ?AddRef@CHandler@N7z@NArchive@@WM@AGKXZ proc near
.text:00005378                                         ; DATA XREF: .rdata:00002020o
.text:00005378
.text:00005378 arg_0           = dword ptr  4
.text:00005378
.text:00005378                 sub     [esp+arg_0], 0Ch
.text:0000537D                 jmp     ?AddRef@CHandler@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CHandler::AddRef(void)
.text:0000537D ?AddRef@CHandler@N7z@NArchive@@WM@AGKXZ endp
.text:0000537D
.text:0000537D ; ---------------------------------------------------------------------------
.text:00005382                 align 4
.text:00005382 _text           ends
.text:00005382
.text:00005384 ; ===========================================================================
.text:00005384
.text:00005384 ; Segment type: Pure code
.text:00005384 ; Segment permissions: Read/Execute
.text:00005384 _text           segment para public 'CODE' use32
.text:00005384                 assume cs:_text
.text:00005384                 ;org 5384h
.text:00005384 ; COMDAT (pick any)
.text:00005384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005384
.text:00005384 ; =============== S U B R O U T I N E =======================================
.text:00005384
.text:00005384
.text:00005384 ; [thunk]:public: virtual long __stdcall NArchive::N7z::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00005384                 public ?QueryInterface@CHandler@N7z@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:00005384 ?QueryInterface@CHandler@N7z@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00005384                                         ; DATA XREF: .rdata:const NArchive::N7z::CHandler::`vftable'{for `ISetProperties'}o
.text:00005384
.text:00005384 arg_0           = dword ptr  4
.text:00005384
.text:00005384                 sub     [esp+arg_0], 8
.text:00005389                 jmp     ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)
.text:00005389 ?QueryInterface@CHandler@N7z@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00005389
.text:00005389 ; ---------------------------------------------------------------------------
.text:0000538E                 align 10h
.text:0000538E _text           ends
.text:0000538E
.text:00005390 ; ===========================================================================
.text:00005390
.text:00005390 ; Segment type: Pure code
.text:00005390 ; Segment permissions: Read/Execute
.text:00005390 _text           segment para public 'CODE' use32
.text:00005390                 assume cs:_text
.text:00005390                 ;org 5390h
.text:00005390 ; COMDAT (pick any)
.text:00005390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005390
.text:00005390 ; =============== S U B R O U T I N E =======================================
.text:00005390
.text:00005390
.text:00005390 ; [thunk]:public: virtual long __stdcall NArchive::N7z::CHandler::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00005390                 public ?QueryInterface@CHandler@N7z@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.text:00005390 ?QueryInterface@CHandler@N7z@NArchive@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00005390                                         ; DATA XREF: .rdata:const NArchive::N7z::CHandler::`vftable'{for `IOutArchive'}o
.text:00005390
.text:00005390 arg_0           = dword ptr  4
.text:00005390
.text:00005390                 sub     [esp+arg_0], 0Ch
.text:00005395                 jmp     ?QueryInterface@CHandler@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)
.text:00005395 ?QueryInterface@CHandler@N7z@NArchive@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00005395
.text:00005395 _text           ends
.text:00005395
UNDEF:000053A0 ; ===========================================================================
UNDEF:000053A0
UNDEF:000053A0 ; Segment type: Externs
UNDEF:000053A0 ; UNDEF
UNDEF:000053A0 ; public: __thiscall UString::UString(void)
UNDEF:000053A0                 extrn ??0UString@@QAE@XZ:near
UNDEF:000053A0                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+C7p
UNDEF:000053A0                                         ; COneMethodInfo::COneMethodInfo(void)+51p
UNDEF:000053A4                 extrn ___security_cookie:near
UNDEF:000053A4                                         ; DATA XREF: NArchive::N7z::CHandler::CHandler(void)+19r
UNDEF:000053A4                                         ; NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+2Br ...
UNDEF:000053A8                 extrn ___CxxFrameHandler3:near
UNDEF:000053A8                                         ; CODE XREF: __ehhandler$??0CHandler@N7z@NArchive@@QAE@XZ+16j
UNDEF:000053A8                                         ; __ehhandler$?AddMethodName@CHandler@N7z@NArchive@@AAEXAAVAString@@_K@Z+16j ...
UNDEF:000053AC ; __fastcall __security_check_cookie(x)
UNDEF:000053AC                 extrn @__security_check_cookie@4:near
UNDEF:000053AC                                         ; CODE XREF: NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)+76p
UNDEF:000053AC                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3D1p ...
UNDEF:000053B0                 extrn __RTC_CheckEsp:near
UNDEF:000053B0                                         ; CODE XREF: NArchive::N7z::CHandler::CHandler(void)+11Ep
UNDEF:000053B0                                         ; NArchive::N7z::CHandler::GetNumberOfItems(uint *)+1Ap ...
UNDEF:000053B4                 extrn __RTC_Shutdown:near
UNDEF:000053B4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000053B8                 extrn __RTC_InitBase:near
UNDEF:000053B8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000053BC ; const type_info::`vftable'
UNDEF:000053BC                 extrn ??_7type_info@@6B@:near
UNDEF:000053BC                                         ; DATA XREF: .data:NArchive::N7z::CHandler `RTTI Type Descriptor'o
UNDEF:000053BC                                         ; .data:IInArchive `RTTI Type Descriptor'o ...
UNDEF:000053C0 ; public: virtual long __stdcall NArchive::N7z::CHandler::Extract(unsigned int const *, unsigned int, int, struct IArchiveExtractCallback *)
UNDEF:000053C0                 extrn ?Extract@CHandler@N7z@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:near
UNDEF:000053C0                                         ; DATA XREF: .rdata:00002084o
UNDEF:000053C4 ; public: virtual long __stdcall NArchive::N7z::CHandler::GetNumberOfProperties(unsigned int *)
UNDEF:000053C4                 extrn ?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z:near
UNDEF:000053C4                                         ; DATA XREF: .rdata:0000208Co
UNDEF:000053C8 ; public: virtual long __stdcall NArchive::N7z::CHandler::GetPropertyInfo(unsigned int, wchar_t * *, unsigned long *, unsigned short *)
UNDEF:000053C8                 extrn ?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z:near
UNDEF:000053C8                                         ; DATA XREF: .rdata:00002090o
UNDEF:000053CC ; public: virtual long __stdcall NArchive::N7z::CHandler::SetProperties(wchar_t const * const *, struct tagPROPVARIANT const *, unsigned int)
UNDEF:000053CC                 extrn ?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z:near
UNDEF:000053CC                                         ; DATA XREF: .rdata:00002040o
UNDEF:000053D0 ; public: virtual long __stdcall NArchive::N7z::CHandler::UpdateItems(struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
UNDEF:000053D0                 extrn ?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:near
UNDEF:000053D0                                         ; DATA XREF: .rdata:00002028o
UNDEF:000053D4 ; public: virtual long __stdcall NArchive::N7z::CHandler::GetFileTimeType(unsigned int *)
UNDEF:000053D4                 extrn ?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z:near
UNDEF:000053D4                                         ; DATA XREF: .rdata:0000202Co
UNDEF:000053D8 ; void __cdecl operator delete(void *)
UNDEF:000053D8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:000053D8                                         ; AString::~AString(void)+23p ...
UNDEF:000053DC ; void __thiscall NArchive::N7z::COutHandler::InitProps(NArchive::N7z::COutHandler *__hidden this)
UNDEF:000053DC                 extrn ?InitProps@COutHandler@N7z@NArchive@@QAEXXZ:near
UNDEF:000053DC                                         ; CODE XREF: NArchive::N7z::COutHandler::COutHandler(void)+60p
UNDEF:000053E0 ; void __thiscall NArchive::CMultiMethodProps::Init(NArchive::CMultiMethodProps *__hidden this)
UNDEF:000053E0                 extrn ?Init@CMultiMethodProps@NArchive@@QAEXXZ:near
UNDEF:000053E0                                         ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+51p
UNDEF:000053E4 ; public: __thiscall AString::AString(void)
UNDEF:000053E4                 extrn ??0AString@@QAE@XZ:near
UNDEF:000053E4                                         ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+42p
UNDEF:000053E4                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+87p ...
UNDEF:000053E8                 extrn _IID_IOutArchive:near
UNDEF:000053E8                                         ; DATA XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *):loc_2DA6o
UNDEF:000053EC                 extrn _IID_ISetProperties:near
UNDEF:000053EC                                         ; DATA XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *):loc_2D72o
UNDEF:000053F0                 extrn _IID_IArchiveGetRawProps:near
UNDEF:000053F0                                         ; DATA XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *):loc_2D3Eo
UNDEF:000053F4                 extrn _IID_IInArchive:near
UNDEF:000053F4                                         ; DATA XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *):loc_2D1Fo
UNDEF:000053F8 ; const IID IID_IUnknown
UNDEF:000053F8                 extrn _IID_IUnknown:near
UNDEF:000053F8                                         ; DATA XREF: NArchive::N7z::CHandler::QueryInterface(_GUID const &,void * *)+24o
UNDEF:000053FC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000053FC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00005400                 extrn __purecall:near   ; DATA XREF: .rdata:const IInArchive::`vftable'o
UNDEF:00005400                                         ; .rdata:00003744o ...
UNDEF:00005404 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:00005404                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:00005404                                         ; DATA XREF: NArchive::N7z::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:00005408 ; public: class AString & __thiscall AString::operator+=(class AString const &)
UNDEF:00005408                 extrn ??YAString@@QAEAAV0@ABV0@@Z:near
UNDEF:00005408                                         ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+88p
UNDEF:0000540C ; bool __stdcall FindMethod(unsigned __int64, struct AString *)
UNDEF:0000540C                 extrn ?FindMethod@@YG_N_KAAVAString@@@Z:near
UNDEF:0000540C                                         ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+5Ap
UNDEF:0000540C                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+726p
UNDEF:00005410 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00005410                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00005410                                         ; CODE XREF: NArchive::N7z::CHandler::AddMethodName(AString &,unsigned __int64)+A6p
UNDEF:00005410                                         ; NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)+68p ...
UNDEF:00005414 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:00005414                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:00005414                                         ; CODE XREF: NArchive::N7z::ConvertMethodIdToString(AString &,unsigned __int64)+59p
UNDEF:00005414                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+116p ...
UNDEF:00005418                 extrn __aullshr:near    ; CODE XREF: NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)+37p
UNDEF:00005418                                         ; NArchive::N7z::ConvertMethodIdToString_Back(char *,unsigned __int64)+67p ...
UNDEF:0000541C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:0000541C                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:0000541C                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+36Ap
UNDEF:00005420 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:00005420                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:00005420                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+23Cp
UNDEF:00005420                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+25Ap ...
UNDEF:00005424 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:00005424                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:00005424                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+21Ep
UNDEF:00005424                                         ; NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+2EAp ...
UNDEF:00005428 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:00005428                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:00005428                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+207p
UNDEF:0000542C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:0000542C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:0000542C                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1D2p
UNDEF:00005430 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:00005430                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:00005430                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+136p
UNDEF:00005430                                         ; NArchive::N7z::GetStringForSizeValue(char *,uint)+FEp ...
UNDEF:00005434 ; void __thiscall AString::Add_Space_if_NotEmpty(AString *__hidden this)
UNDEF:00005434                 extrn ?Add_Space_if_NotEmpty@AString@@QAEXXZ:near
UNDEF:00005434                                         ; CODE XREF: NArchive::N7z::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+FDp
UNDEF:00005438 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00005438                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00005438                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:0000543C ; unsigned __int8 __thiscall NArchive::N7z::CInByte2::ReadByte(NArchive::N7z::CInByte2 *__hidden this)
UNDEF:0000543C                 extrn ?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ:near
UNDEF:0000543C                                         ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+A2p
UNDEF:0000543C                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+147p
UNDEF:00005440 ; unsigned int __thiscall NArchive::N7z::CInByte2::ReadNum(NArchive::N7z::CInByte2 *__hidden this)
UNDEF:00005440                 extrn ?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ:near
UNDEF:00005440                                         ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+82p
UNDEF:00005440                                         ; NArchive::N7z::CHandler::IsFolderEncrypted(uint)+13Cp ...
UNDEF:00005444                 extrn __allshl:near     ; CODE XREF: NArchive::N7z::CHandler::IsFolderEncrypted(uint)+EFp
UNDEF:00005444                                         ; NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+1BEp
UNDEF:00005448 ; __int32 NWindows::NCOM::PropVarEm_Set_Str(NWindows::NCOM *__hidden this, struct tagPROPVARIANT *, const char *)
UNDEF:00005448                 extrn ?PropVarEm_Set_Str@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@PBD@Z:near
UNDEF:00005448                                         ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+8E2p
UNDEF:0000544C ; __int32 NWindows::NCOM::PropVariant_Clear(NWindows::NCOM *__hidden this, struct tagPROPVARIANT *)
UNDEF:0000544C                 extrn ?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z:near
UNDEF:0000544C                                         ; CODE XREF: NArchive::N7z::CHandler::SetMethodToProp(uint,tagPROPVARIANT *)+48p
UNDEF:0000544C                                         ; NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2Ap
UNDEF:00005450 ; __int32 __thiscall NArchive::N7z::CDatabase::GetPath_Prop(NArchive::N7z::CDatabase *__hidden this, unsigned int, struct tagPROPVARIANT *)
UNDEF:00005450                 extrn ?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z:near
UNDEF:00005450                                         ; CODE XREF: NArchive::N7z::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+231p
UNDEF:00005454 ; void __thiscall NArchive::N7z::CHandler::FillPopIDs(NArchive::N7z::CHandler *__hidden this)
UNDEF:00005454                 extrn ?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ:near
UNDEF:00005454                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+28Cp
UNDEF:00005458 ; __int32 __thiscall NArchive::N7z::CInArchive::ReadDatabase(NArchive::N7z::CInArchive *__hidden this, struct NArchive::N7z::CDbEx *, struct ICryptoGetTextPassword *, bool *, bool *, struct UString *)
UNDEF:00005458                 extrn ?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z:near
UNDEF:00005458                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+19Fp
UNDEF:0000545C ; __int32 __thiscall NArchive::N7z::CInArchive::Open(NArchive::N7z::CInArchive *__hidden this, struct IInStream *, const unsigned __int64 *)
UNDEF:0000545C                 extrn ?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z:near
UNDEF:0000545C                                         ; CODE XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+F6p
UNDEF:00005460                 extrn _IID_ICryptoGetTextPassword:near
UNDEF:00005460                                         ; DATA XREF: NArchive::N7z::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+B1o
UNDEF:00005460
UNDEF:00005460
UNDEF:00005460                 end