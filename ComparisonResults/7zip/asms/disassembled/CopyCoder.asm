.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 910CF3FA7B3956E3481463F981A45B1D
.text:00000000 ; Input CRC32 : D7A34884
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\CopyCoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00000000                 public ??1CCopyCoder@NCompress@@QAE@XZ
.text:00000000 ??1CCopyCoder@NCompress@@QAE@XZ proc near
.text:00000000                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00000017                 mov     ecx, [ebp+var_4]
.text:0000001A                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00000021                 mov     edx, [ebp+var_4]
.text:00000024                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:0000002B                 mov     eax, [ebp+var_4]
.text:0000002E                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000035                 mov     ecx, [ebp+var_4]
.text:00000038                 mov     edx, [ecx+14h]
.text:0000003B                 push    edx
.text:0000003C                 call    _MidFree@4      ; MidFree(x)
.text:00000041                 mov     ecx, [ebp+var_4]
.text:00000044                 add     ecx, 18h
.text:00000047                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000004C                 add     esp, 4
.text:0000004F                 cmp     ebp, esp
.text:00000051                 call    __RTC_CheckEsp
.text:00000056                 mov     esp, ebp
.text:00000058                 pop     ebp
.text:00000059                 retn
.text:00000059 ??1CCopyCoder@NCompress@@QAE@XZ endp
.text:00000059
.text:00000059 ; ---------------------------------------------------------------------------
.text:0000005A                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; __int32 __stdcall NCompress::CCopyCoder::Code(NCompress::CCopyCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000060                 public ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000060 ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000060                                         ; DATA XREF: .rdata:000006D4o
.text:00000060
.text:00000060 var_40          = dword ptr -40h
.text:00000060 var_3C          = dword ptr -3Ch
.text:00000060 var_38          = dword ptr -38h
.text:00000060 var_34          = dword ptr -34h
.text:00000060 var_30          = dword ptr -30h
.text:00000060 var_2C          = dword ptr -2Ch
.text:00000060 var_28          = dword ptr -28h
.text:00000060 var_24          = dword ptr -24h
.text:00000060 var_1C          = dword ptr -1Ch
.text:00000060 var_14          = dword ptr -14h
.text:00000060 var_10          = dword ptr -10h
.text:00000060 var_8           = dword ptr -8
.text:00000060 this            = dword ptr  8
.text:00000060 arg_4           = dword ptr  0Ch
.text:00000060 arg_8           = dword ptr  10h
.text:00000060 arg_10          = dword ptr  18h
.text:00000060 arg_14          = dword ptr  1Ch
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 40h
.text:00000066                 push    esi
.text:00000067                 push    edi
.text:00000068                 lea     edi, [ebp+var_40]
.text:0000006B                 mov     ecx, 10h
.text:00000070                 mov     eax, 0CCCCCCCCh
.text:00000075                 rep stosd
.text:00000077                 mov     eax, [ebp+this]
.text:0000007A                 cmp     dword ptr [eax+14h], 0
.text:0000007E                 jnz     short loc_A3
.text:00000080                 push    20000h
.text:00000085                 call    _MidAlloc@4     ; MidAlloc(x)
.text:0000008A                 mov     ecx, [ebp+this]
.text:0000008D                 mov     [ecx+14h], eax
.text:00000090                 mov     edx, [ebp+this]
.text:00000093                 cmp     dword ptr [edx+14h], 0
.text:00000097                 jnz     short loc_A3
.text:00000099                 mov     eax, 8007000Eh
.text:0000009E                 jmp     loc_241
.text:000000A3 ; ---------------------------------------------------------------------------
.text:000000A3
.text:000000A3 loc_A3:                                 ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1Ej
.text:000000A3                                         ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37j
.text:000000A3                 mov     eax, [ebp+this]
.text:000000A6                 mov     dword ptr [eax+20h], 0
.text:000000AD                 mov     dword ptr [eax+24h], 0
.text:000000B4
.text:000000B4 loc_B4:                                 ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_23Cj
.text:000000B4                 mov     [ebp+var_8], 20000h
.text:000000BB                 cmp     [ebp+arg_10], 0
.text:000000BF                 jz      short loc_109
.text:000000C1                 mov     ecx, [ebp+var_8]
.text:000000C4                 xor     edx, edx
.text:000000C6                 mov     eax, [ebp+arg_10]
.text:000000C9                 mov     esi, [ebp+this]
.text:000000CC                 mov     edi, [eax]
.text:000000CE                 sub     edi, [esi+20h]
.text:000000D1                 mov     eax, [eax+4]
.text:000000D4                 sbb     eax, [esi+24h]
.text:000000D7                 mov     [ebp+var_38], ecx
.text:000000DA                 mov     [ebp+var_34], edx
.text:000000DD                 mov     [ebp+var_40], edi
.text:000000E0                 mov     [ebp+var_3C], eax
.text:000000E3                 mov     ecx, [ebp+var_34]
.text:000000E6                 cmp     ecx, [ebp+var_3C]
.text:000000E9                 jb      short loc_109
.text:000000EB                 ja      short loc_F5
.text:000000ED                 mov     edx, [ebp+var_38]
.text:000000F0                 cmp     edx, [ebp+var_40]
.text:000000F3                 jbe     short loc_109
.text:000000F5
.text:000000F5 loc_F5:                                 ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+8Bj
.text:000000F5                 mov     eax, [ebp+arg_10]
.text:000000F8                 mov     ecx, [ebp+this]
.text:000000FB                 mov     edx, [eax]
.text:000000FD                 sub     edx, [ecx+20h]
.text:00000100                 mov     eax, [eax+4]
.text:00000103                 sbb     eax, [ecx+24h]
.text:00000106                 mov     [ebp+var_8], edx
.text:00000109
.text:00000109 loc_109:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Fj
.text:00000109                                         ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+89j ...
.text:00000109                 cmp     [ebp+var_8], 0
.text:0000010D                 jnz     short loc_116
.text:0000010F                 xor     eax, eax
.text:00000111                 jmp     loc_241
.text:00000116 ; ---------------------------------------------------------------------------
.text:00000116
.text:00000116 loc_116:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+ADj
.text:00000116                 mov     esi, esp
.text:00000118                 lea     ecx, [ebp+var_8]
.text:0000011B                 push    ecx
.text:0000011C                 mov     edx, [ebp+var_8]
.text:0000011F                 push    edx
.text:00000120                 mov     eax, [ebp+this]
.text:00000123                 mov     ecx, [eax+14h]
.text:00000126                 push    ecx
.text:00000127                 mov     edx, [ebp+arg_4]
.text:0000012A                 mov     eax, [edx]
.text:0000012C                 mov     ecx, [ebp+arg_4]
.text:0000012F                 push    ecx
.text:00000130                 mov     edx, [eax+0Ch]
.text:00000133                 call    edx
.text:00000135                 cmp     esi, esp
.text:00000137                 call    __RTC_CheckEsp
.text:0000013C                 mov     [ebp+var_10], eax
.text:0000013F                 cmp     [ebp+var_8], 0
.text:00000143                 jnz     short loc_14D
.text:00000145                 mov     eax, [ebp+var_10]
.text:00000148                 jmp     loc_241
.text:0000014D ; ---------------------------------------------------------------------------
.text:0000014D
.text:0000014D loc_14D:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E3j
.text:0000014D                 cmp     [ebp+arg_8], 0
.text:00000151                 jz      loc_1DB
.text:00000157                 mov     [ebp+var_14], 0
.text:0000015E
.text:0000015E loc_15E:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+177j
.text:0000015E                 mov     eax, [ebp+var_8]
.text:00000161                 sub     eax, [ebp+var_14]
.text:00000164                 mov     [ebp+var_1C], eax
.text:00000167                 mov     esi, esp
.text:00000169                 lea     ecx, [ebp+var_1C]
.text:0000016C                 push    ecx
.text:0000016D                 mov     edx, [ebp+var_1C]
.text:00000170                 push    edx
.text:00000171                 mov     eax, [ebp+this]
.text:00000174                 mov     ecx, [eax+14h]
.text:00000177                 add     ecx, [ebp+var_14]
.text:0000017A                 push    ecx
.text:0000017B                 mov     edx, [ebp+arg_8]
.text:0000017E                 mov     eax, [edx]
.text:00000180                 mov     ecx, [ebp+arg_8]
.text:00000183                 push    ecx
.text:00000184                 mov     edx, [eax+0Ch]
.text:00000187                 call    edx
.text:00000189                 cmp     esi, esp
.text:0000018B                 call    __RTC_CheckEsp
.text:00000190                 mov     [ebp+var_24], eax
.text:00000193                 mov     eax, [ebp+var_14]
.text:00000196                 add     eax, [ebp+var_1C]
.text:00000199                 mov     [ebp+var_14], eax
.text:0000019C                 mov     ecx, [ebp+var_1C]
.text:0000019F                 xor     edx, edx
.text:000001A1                 mov     eax, [ebp+this]
.text:000001A4                 add     ecx, [eax+20h]
.text:000001A7                 adc     edx, [eax+24h]
.text:000001AA                 mov     eax, [ebp+this]
.text:000001AD                 mov     [eax+20h], ecx
.text:000001B0                 mov     [eax+24h], edx
.text:000001B3                 mov     ecx, [ebp+var_24]
.text:000001B6                 mov     [ebp+var_28], ecx
.text:000001B9                 cmp     [ebp+var_28], 0
.text:000001BD                 jz      short loc_1C4
.text:000001BF                 mov     eax, [ebp+var_28]
.text:000001C2                 jmp     short loc_241
.text:000001C4 ; ---------------------------------------------------------------------------
.text:000001C4
.text:000001C4 loc_1C4:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+15Dj
.text:000001C4                 cmp     [ebp+var_1C], 0
.text:000001C8                 jnz     short loc_1D1
.text:000001CA                 mov     eax, 80004005h
.text:000001CF                 jmp     short loc_241
.text:000001D1 ; ---------------------------------------------------------------------------
.text:000001D1
.text:000001D1 loc_1D1:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+168j
.text:000001D1                 mov     edx, [ebp+var_14]
.text:000001D4                 cmp     edx, [ebp+var_8]
.text:000001D7                 jb      short loc_15E
.text:000001D9                 jmp     short loc_1F2
.text:000001DB ; ---------------------------------------------------------------------------
.text:000001DB
.text:000001DB loc_1DB:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F1j
.text:000001DB                 mov     eax, [ebp+var_8]
.text:000001DE                 xor     ecx, ecx
.text:000001E0                 mov     edx, [ebp+this]
.text:000001E3                 add     eax, [edx+20h]
.text:000001E6                 adc     ecx, [edx+24h]
.text:000001E9                 mov     edx, [ebp+this]
.text:000001EC                 mov     [edx+20h], eax
.text:000001EF                 mov     [edx+24h], ecx
.text:000001F2
.text:000001F2 loc_1F2:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+179j
.text:000001F2                 mov     eax, [ebp+var_10]
.text:000001F5                 mov     [ebp+var_2C], eax
.text:000001F8                 cmp     [ebp+var_2C], 0
.text:000001FC                 jz      short loc_203
.text:000001FE                 mov     eax, [ebp+var_2C]
.text:00000201                 jmp     short loc_241
.text:00000203 ; ---------------------------------------------------------------------------
.text:00000203
.text:00000203 loc_203:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+19Cj
.text:00000203                 cmp     [ebp+arg_14], 0
.text:00000207                 jz      short loc_23C
.text:00000209                 mov     ecx, [ebp+this]
.text:0000020C                 add     ecx, 20h ; ' '
.text:0000020F                 mov     esi, esp
.text:00000211                 push    ecx
.text:00000212                 mov     edx, [ebp+this]
.text:00000215                 add     edx, 20h ; ' '
.text:00000218                 push    edx
.text:00000219                 mov     eax, [ebp+arg_14]
.text:0000021C                 mov     ecx, [eax]
.text:0000021E                 mov     edx, [ebp+arg_14]
.text:00000221                 push    edx
.text:00000222                 mov     eax, [ecx+0Ch]
.text:00000225                 call    eax
.text:00000227                 cmp     esi, esp
.text:00000229                 call    __RTC_CheckEsp
.text:0000022E                 mov     [ebp+var_30], eax
.text:00000231                 cmp     [ebp+var_30], 0
.text:00000235                 jz      short loc_23C
.text:00000237                 mov     eax, [ebp+var_30]
.text:0000023A                 jmp     short loc_241
.text:0000023C ; ---------------------------------------------------------------------------
.text:0000023C
.text:0000023C loc_23C:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A7j
.text:0000023C                                         ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1D5j
.text:0000023C                 jmp     loc_B4
.text:00000241 ; ---------------------------------------------------------------------------
.text:00000241
.text:00000241 loc_241:                                ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Ej
.text:00000241                                         ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B1j ...
.text:00000241                 push    edx
.text:00000242                 mov     ecx, ebp
.text:00000244                 push    eax
.text:00000245                 lea     edx, $LN24
.text:0000024B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000250                 pop     eax
.text:00000251                 pop     edx
.text:00000252                 pop     edi
.text:00000253                 pop     esi
.text:00000254                 add     esp, 40h
.text:00000257                 cmp     ebp, esp
.text:00000259                 call    __RTC_CheckEsp
.text:0000025E                 mov     esp, ebp
.text:00000260                 pop     ebp
.text:00000261                 retn    18h
.text:00000261 ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000261
.text:00000261 ; ---------------------------------------------------------------------------
.text:00000264 $LN24           dd 2                    ; DATA XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1E5o
.text:00000268                 dd offset $LN23
.text:0000026C $LN23           dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000268o
.text:00000274                 dd offset $LN21         ; "size"
.text:00000278                 dd 0FFFFFFE4h, 4
.text:00000280                 dd offset $LN22         ; "curSize"
.text:00000284 $LN22           db 'curSize',0          ; DATA XREF: .text:00000280o
.text:0000028C $LN21           db 'size',0             ; DATA XREF: .text:00000274o
.text:00000291                 align 10h
.text:000002A0
.text:000002A0 ; =============== S U B R O U T I N E =======================================
.text:000002A0
.text:000002A0 ; Attributes: bp-based frame
.text:000002A0
.text:000002A0 ; __int32 __stdcall NCompress::CCopyCoder::SetInStream(NCompress::CCopyCoder *this, struct ISequentialInStream *)
.text:000002A0                 public ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
.text:000002A0 ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z proc near
.text:000002A0                                         ; DATA XREF: .rdata:000006BCo
.text:000002A0
.text:000002A0 this            = dword ptr  8
.text:000002A0 arg_4           = dword ptr  0Ch
.text:000002A0
.text:000002A0                 push    ebp
.text:000002A1                 mov     ebp, esp
.text:000002A3                 mov     eax, [ebp+arg_4]
.text:000002A6                 push    eax
.text:000002A7                 mov     ecx, [ebp+this]
.text:000002AA                 add     ecx, 14h
.text:000002AD                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000002B2                 mov     ecx, [ebp+this]
.text:000002B5                 mov     dword ptr [ecx+1Ch], 0
.text:000002BC                 mov     dword ptr [ecx+20h], 0
.text:000002C3                 xor     eax, eax
.text:000002C5                 cmp     ebp, esp
.text:000002C7                 call    __RTC_CheckEsp
.text:000002CC                 pop     ebp
.text:000002CD                 retn    8
.text:000002CD ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z endp
.text:000002CD
.text:000002D0
.text:000002D0 ; =============== S U B R O U T I N E =======================================
.text:000002D0
.text:000002D0 ; Attributes: bp-based frame
.text:000002D0
.text:000002D0 ; __int32 __stdcall NCompress::CCopyCoder::ReleaseInStream(NCompress::CCopyCoder *this)
.text:000002D0                 public ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
.text:000002D0 ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ proc near
.text:000002D0                                         ; DATA XREF: .rdata:000006C0o
.text:000002D0
.text:000002D0 this            = dword ptr  8
.text:000002D0
.text:000002D0                 push    ebp
.text:000002D1                 mov     ebp, esp
.text:000002D3                 mov     ecx, [ebp+this]
.text:000002D6                 add     ecx, 14h
.text:000002D9                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:000002DE                 xor     eax, eax
.text:000002E0                 cmp     ebp, esp
.text:000002E2                 call    __RTC_CheckEsp
.text:000002E7                 pop     ebp
.text:000002E8                 retn    4
.text:000002E8 ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ endp
.text:000002E8
.text:000002E8 ; ---------------------------------------------------------------------------
.text:000002EB                 align 10h
.text:000002F0
.text:000002F0 ; =============== S U B R O U T I N E =======================================
.text:000002F0
.text:000002F0 ; Attributes: bp-based frame
.text:000002F0
.text:000002F0 ; __int32 __stdcall NCompress::CCopyCoder::Read(NCompress::CCopyCoder *this, void *, unsigned int, unsigned int *)
.text:000002F0                 public ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
.text:000002F0 ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z proc near
.text:000002F0                                         ; DATA XREF: .rdata:000006A8o
.text:000002F0
.text:000002F0 var_14          = dword ptr -14h
.text:000002F0 var_10          = dword ptr -10h
.text:000002F0 var_C           = dword ptr -0Ch
.text:000002F0 var_8           = dword ptr -8
.text:000002F0 var_4           = dword ptr -4
.text:000002F0 this            = dword ptr  8
.text:000002F0 arg_4           = dword ptr  0Ch
.text:000002F0 arg_8           = dword ptr  10h
.text:000002F0 arg_C           = dword ptr  14h
.text:000002F0
.text:000002F0                 push    ebp
.text:000002F1                 mov     ebp, esp
.text:000002F3                 sub     esp, 14h
.text:000002F6                 push    esi
.text:000002F7                 mov     eax, 0CCCCCCCCh
.text:000002FC                 mov     [ebp+var_14], eax
.text:000002FF                 mov     [ebp+var_10], eax
.text:00000302                 mov     [ebp+var_C], eax
.text:00000305                 mov     [ebp+var_8], eax
.text:00000308                 mov     [ebp+var_4], eax
.text:0000030B                 mov     [ebp+var_8], 0
.text:00000312                 mov     ecx, [ebp+this]
.text:00000315                 add     ecx, 10h
.text:00000318                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:0000031D                 mov     [ebp+var_14], eax
.text:00000320                 mov     esi, esp
.text:00000322                 lea     eax, [ebp+var_8]
.text:00000325                 push    eax
.text:00000326                 mov     ecx, [ebp+arg_8]
.text:00000329                 push    ecx
.text:0000032A                 mov     edx, [ebp+arg_4]
.text:0000032D                 push    edx
.text:0000032E                 mov     eax, [ebp+var_14]
.text:00000331                 push    eax
.text:00000332                 mov     ecx, [ebp+var_14]
.text:00000335                 mov     edx, [ecx]
.text:00000337                 mov     eax, [edx+0Ch]
.text:0000033A                 call    eax
.text:0000033C                 cmp     esi, esp
.text:0000033E                 call    __RTC_CheckEsp
.text:00000343                 mov     [ebp+var_10], eax
.text:00000346                 mov     ecx, [ebp+var_8]
.text:00000349                 xor     edx, edx
.text:0000034B                 mov     eax, [ebp+this]
.text:0000034E                 add     ecx, [eax+18h]
.text:00000351                 adc     edx, [eax+1Ch]
.text:00000354                 mov     eax, [ebp+this]
.text:00000357                 mov     [eax+18h], ecx
.text:0000035A                 mov     [eax+1Ch], edx
.text:0000035D                 cmp     [ebp+arg_C], 0
.text:00000361                 jz      short loc_36B
.text:00000363                 mov     ecx, [ebp+arg_C]
.text:00000366                 mov     edx, [ebp+var_8]
.text:00000369                 mov     [ecx], edx
.text:0000036B
.text:0000036B loc_36B:                                ; CODE XREF: NCompress::CCopyCoder::Read(void *,uint,uint *)+71j
.text:0000036B                 mov     eax, [ebp+var_10]
.text:0000036E                 push    edx
.text:0000036F                 mov     ecx, ebp
.text:00000371                 push    eax
.text:00000372                 lea     edx, $LN6
.text:00000378                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000037D                 pop     eax
.text:0000037E                 pop     edx
.text:0000037F                 pop     esi
.text:00000380                 add     esp, 14h
.text:00000383                 cmp     ebp, esp
.text:00000385                 call    __RTC_CheckEsp
.text:0000038A                 mov     esp, ebp
.text:0000038C                 pop     ebp
.text:0000038D                 retn    10h
.text:0000038D ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z endp
.text:0000038D
.text:0000038D ; ---------------------------------------------------------------------------
.text:00000390 $LN6            dd 1                    ; DATA XREF: NCompress::CCopyCoder::Read(void *,uint,uint *)+82o
.text:00000394                 dd offset $LN5
.text:00000398 $LN5            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000394o
.text:000003A0                 dd offset $LN4          ; "realProcessedSize"
.text:000003A4 $LN4            db 'realProcessedSize',0 ; DATA XREF: .text:000003A0o
.text:000003B6                 align 10h
.text:000003C0
.text:000003C0 ; =============== S U B R O U T I N E =======================================
.text:000003C0
.text:000003C0 ; Attributes: bp-based frame
.text:000003C0
.text:000003C0 ; __int32 __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(NCompress::CCopyCoder *this, unsigned __int64 *)
.text:000003C0                 public ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
.text:000003C0 ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z proc near
.text:000003C0                                         ; DATA XREF: .rdata:00000694o
.text:000003C0
.text:000003C0 this            = dword ptr  8
.text:000003C0 arg_4           = dword ptr  0Ch
.text:000003C0
.text:000003C0                 push    ebp
.text:000003C1                 mov     ebp, esp
.text:000003C3                 mov     eax, [ebp+arg_4]
.text:000003C6                 mov     ecx, [ebp+this]
.text:000003C9                 mov     edx, [ecx+14h]
.text:000003CC                 mov     [eax], edx
.text:000003CE                 mov     ecx, [ecx+18h]
.text:000003D1                 mov     [eax+4], ecx
.text:000003D4                 xor     eax, eax
.text:000003D6                 pop     ebp
.text:000003D7                 retn    8
.text:000003D7 ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z endp
.text:000003D7
.text:000003D7 ; ---------------------------------------------------------------------------
.text:000003DA                 align 10h
.text:000003E0
.text:000003E0 ; =============== S U B R O U T I N E =======================================
.text:000003E0
.text:000003E0 ; Attributes: bp-based frame
.text:000003E0
.text:000003E0 ; __int32 __stdcall NCompress::CopyStream(NCompress *this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:000003E0                 public ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:000003E0 ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:000003E0
.text:000003E0 var_2C          = dword ptr -2Ch
.text:000003E0 var_28          = dword ptr -28h
.text:000003E0 var_24          = dword ptr -24h
.text:000003E0 var_20          = dword ptr -20h
.text:000003E0 var_1C          = dword ptr -1Ch
.text:000003E0 var_18          = dword ptr -18h
.text:000003E0 var_14          = dword ptr -14h
.text:000003E0 var_10          = dword ptr -10h
.text:000003E0 var_C           = dword ptr -0Ch
.text:000003E0 var_4           = dword ptr -4
.text:000003E0 this            = dword ptr  8
.text:000003E0 arg_4           = dword ptr  0Ch
.text:000003E0 arg_8           = dword ptr  10h
.text:000003E0
.text:000003E0                 push    ebp
.text:000003E1                 mov     ebp, esp
.text:000003E3                 push    0FFFFFFFFh
.text:000003E5                 push    offset __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:000003EA                 mov     eax, large fs:0
.text:000003F0                 push    eax
.text:000003F1                 sub     esp, 20h
.text:000003F4                 push    esi
.text:000003F5                 mov     eax, 0CCCCCCCCh
.text:000003FA                 mov     [ebp+var_2C], eax
.text:000003FD                 mov     [ebp+var_28], eax
.text:00000400                 mov     [ebp+var_24], eax
.text:00000403                 mov     [ebp+var_20], eax
.text:00000406                 mov     [ebp+var_1C], eax
.text:00000409                 mov     [ebp+var_18], eax
.text:0000040C                 mov     [ebp+var_14], eax
.text:0000040F                 mov     [ebp+var_10], eax
.text:00000412                 mov     eax, dword ptr ds:___security_cookie
.text:00000417                 xor     eax, ebp
.text:00000419                 push    eax
.text:0000041A                 lea     eax, [ebp+var_C]
.text:0000041D                 mov     large fs:0, eax
.text:00000423                 push    28h ; '('       ; unsigned int
.text:00000425                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000042A                 add     esp, 4
.text:0000042D                 mov     [ebp+var_20], eax
.text:00000430                 mov     [ebp+var_4], 0
.text:00000437                 cmp     [ebp+var_20], 0
.text:0000043B                 jz      short loc_44A
.text:0000043D                 mov     ecx, [ebp+var_20] ; this
.text:00000440                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000445                 mov     [ebp+var_28], eax
.text:00000448                 jmp     short loc_451
.text:0000044A ; ---------------------------------------------------------------------------
.text:0000044A
.text:0000044A loc_44A:                                ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+5Bj
.text:0000044A                 mov     [ebp+var_28], 0
.text:00000451
.text:00000451 loc_451:                                ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+68j
.text:00000451                 mov     eax, [ebp+var_28]
.text:00000454                 mov     [ebp+var_1C], eax
.text:00000457                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000045E                 mov     ecx, [ebp+var_1C]
.text:00000461                 push    ecx
.text:00000462                 lea     ecx, [ebp+var_14]
.text:00000465                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:0000046A                 mov     [ebp+var_4], 1
.text:00000471                 lea     ecx, [ebp+var_14]
.text:00000474                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00000479                 mov     [ebp+var_2C], eax
.text:0000047C                 mov     esi, esp
.text:0000047E                 mov     edx, [ebp+arg_8]
.text:00000481                 push    edx
.text:00000482                 push    0
.text:00000484                 push    0
.text:00000486                 mov     eax, [ebp+arg_4]
.text:00000489                 push    eax
.text:0000048A                 mov     ecx, [ebp+this]
.text:0000048D                 push    ecx
.text:0000048E                 mov     edx, [ebp+var_2C]
.text:00000491                 push    edx
.text:00000492                 mov     eax, [ebp+var_2C]
.text:00000495                 mov     ecx, [eax]
.text:00000497                 mov     edx, [ecx+0Ch]
.text:0000049A                 call    edx
.text:0000049C                 cmp     esi, esp
.text:0000049E                 call    __RTC_CheckEsp
.text:000004A3                 mov     [ebp+var_24], eax
.text:000004A6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004AD                 lea     ecx, [ebp+var_14]
.text:000004B0                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000004B5                 mov     eax, [ebp+var_24]
.text:000004B8                 push    edx
.text:000004B9                 mov     ecx, ebp
.text:000004BB                 push    eax
.text:000004BC                 lea     edx, $LN10
.text:000004C2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004C7                 pop     eax
.text:000004C8                 pop     edx
.text:000004C9                 mov     ecx, [ebp+var_C]
.text:000004CC                 mov     large fs:0, ecx
.text:000004D3                 pop     ecx
.text:000004D4                 pop     esi
.text:000004D5                 add     esp, 2Ch
.text:000004D8                 cmp     ebp, esp
.text:000004DA                 call    __RTC_CheckEsp
.text:000004DF                 mov     esp, ebp
.text:000004E1                 pop     ebp
.text:000004E2                 retn    0Ch
.text:000004E2 ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:000004E2
.text:000004E2 ; ---------------------------------------------------------------------------
.text:000004E5                 align 4
.text:000004E8 $LN10           dd 1                    ; DATA XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+DCo
.text:000004EC                 dd offset $LN9
.text:000004F0 $LN9            dd 0FFFFFFECh, 4        ; DATA XREF: .text:000004ECo
.text:000004F8                 dd offset $LN7          ; "copyCoder"
.text:000004FC $LN7            db 'copyCoder',0        ; DATA XREF: .text:000004F8o
.text:00000506                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; __int32 __stdcall NCompress::CopyStream_ExactSize(NCompress *this, struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64, struct ICompressProgressInfo *)
.text:00000510                 public ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z
.text:00000510 ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z proc near
.text:00000510
.text:00000510 var_40          = dword ptr -40h
.text:00000510 var_3C          = dword ptr -3Ch
.text:00000510 var_38          = dword ptr -38h
.text:00000510 var_34          = dword ptr -34h
.text:00000510 var_30          = dword ptr -30h
.text:00000510 var_2C          = dword ptr -2Ch
.text:00000510 var_28          = dword ptr -28h
.text:00000510 var_24          = dword ptr -24h
.text:00000510 var_20          = dword ptr -20h
.text:00000510 var_18          = byte ptr -18h
.text:00000510 var_10          = dword ptr -10h
.text:00000510 var_C           = dword ptr -0Ch
.text:00000510 var_4           = dword ptr -4
.text:00000510 this            = dword ptr  8
.text:00000510 arg_4           = dword ptr  0Ch
.text:00000510 arg_8           = dword ptr  10h
.text:00000510 arg_C           = qword ptr  14h
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    0FFFFFFFFh
.text:00000515                 push    offset __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z
.text:0000051A                 mov     eax, large fs:0
.text:00000520                 push    eax
.text:00000521                 sub     esp, 34h
.text:00000524                 push    esi
.text:00000525                 push    edi
.text:00000526                 lea     edi, [ebp+var_40]
.text:00000529                 mov     ecx, 0Dh
.text:0000052E                 mov     eax, 0CCCCCCCCh
.text:00000533                 rep stosd
.text:00000535                 mov     eax, dword ptr ds:___security_cookie
.text:0000053A                 xor     eax, ebp
.text:0000053C                 push    eax
.text:0000053D                 lea     eax, [ebp+var_C]
.text:00000540                 mov     large fs:0, eax
.text:00000546                 push    28h ; '('       ; unsigned int
.text:00000548                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000054D                 add     esp, 4
.text:00000550                 mov     [ebp+var_28], eax
.text:00000553                 mov     [ebp+var_4], 0
.text:0000055A                 cmp     [ebp+var_28], 0
.text:0000055E                 jz      short loc_56D
.text:00000560                 mov     ecx, [ebp+var_28] ; this
.text:00000563                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000568                 mov     [ebp+var_34], eax
.text:0000056B                 jmp     short loc_574
.text:0000056D ; ---------------------------------------------------------------------------
.text:0000056D
.text:0000056D loc_56D:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+4Ej
.text:0000056D                 mov     [ebp+var_34], 0
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+5Bj
.text:00000574                 mov     eax, [ebp+var_34]
.text:00000577                 mov     [ebp+var_24], eax
.text:0000057A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000581                 mov     ecx, [ebp+var_24]
.text:00000584                 mov     [ebp+var_10], ecx
.text:00000587                 mov     edx, [ebp+var_10]
.text:0000058A                 push    edx
.text:0000058B                 lea     ecx, [ebp+var_18]
.text:0000058E                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)
.text:00000593                 mov     [ebp+var_4], 1
.text:0000059A                 lea     ecx, [ebp+var_18]
.text:0000059D                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:000005A2                 mov     [ebp+var_38], eax
.text:000005A5                 mov     esi, esp
.text:000005A7                 mov     eax, dword ptr [ebp+arg_C+4]
.text:000005AA                 push    eax
.text:000005AB                 lea     ecx, [ebp+arg_8]
.text:000005AE                 push    ecx
.text:000005AF                 push    0
.text:000005B1                 mov     edx, [ebp+arg_4]
.text:000005B4                 push    edx
.text:000005B5                 mov     eax, [ebp+this]
.text:000005B8                 push    eax
.text:000005B9                 mov     ecx, [ebp+var_38]
.text:000005BC                 push    ecx
.text:000005BD                 mov     edx, [ebp+var_38]
.text:000005C0                 mov     eax, [edx]
.text:000005C2                 mov     ecx, [eax+0Ch]
.text:000005C5                 call    ecx
.text:000005C7                 cmp     esi, esp
.text:000005C9                 call    __RTC_CheckEsp
.text:000005CE                 mov     [ebp+var_20], eax
.text:000005D1                 cmp     [ebp+var_20], 0
.text:000005D5                 jz      short loc_5F1
.text:000005D7                 mov     edx, [ebp+var_20]
.text:000005DA                 mov     [ebp+var_2C], edx
.text:000005DD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005E4                 lea     ecx, [ebp+var_18]
.text:000005E7                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:000005EC                 mov     eax, [ebp+var_2C]
.text:000005EF                 jmp     short loc_635
.text:000005F1 ; ---------------------------------------------------------------------------
.text:000005F1
.text:000005F1 loc_5F1:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+C5j
.text:000005F1                 mov     eax, [ebp+var_10]
.text:000005F4                 mov     [ebp+var_3C], eax
.text:000005F7                 mov     ecx, [ebp+var_3C]
.text:000005FA                 mov     edx, [ecx+20h]
.text:000005FD                 cmp     edx, [ebp+arg_8]
.text:00000600                 jnz     short loc_616
.text:00000602                 mov     eax, [ebp+var_3C]
.text:00000605                 mov     ecx, [eax+24h]
.text:00000608                 cmp     ecx, dword ptr [ebp+arg_C]
.text:0000060B                 jnz     short loc_616
.text:0000060D                 mov     [ebp+var_40], 0
.text:00000614                 jmp     short loc_61D
.text:00000616 ; ---------------------------------------------------------------------------
.text:00000616
.text:00000616 loc_616:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+F0j
.text:00000616                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+FBj
.text:00000616                 mov     [ebp+var_40], 80004005h
.text:0000061D
.text:0000061D loc_61D:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+104j
.text:0000061D                 mov     edx, [ebp+var_40]
.text:00000620                 mov     [ebp+var_30], edx
.text:00000623                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000062A                 lea     ecx, [ebp+var_18]
.text:0000062D                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00000632                 mov     eax, [ebp+var_30]
.text:00000635
.text:00000635 loc_635:                                ; CODE XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+DFj
.text:00000635                 push    edx
.text:00000636                 mov     ecx, ebp
.text:00000638                 push    eax
.text:00000639                 lea     edx, $LN13
.text:0000063F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000644                 pop     eax
.text:00000645                 pop     edx
.text:00000646                 mov     ecx, [ebp+var_C]
.text:00000649                 mov     large fs:0, ecx
.text:00000650                 pop     ecx
.text:00000651                 pop     edi
.text:00000652                 pop     esi
.text:00000653                 add     esp, 40h
.text:00000656                 cmp     ebp, esp
.text:00000658                 call    __RTC_CheckEsp
.text:0000065D                 mov     esp, ebp
.text:0000065F                 pop     ebp
.text:00000660                 retn    14h
.text:00000660 ?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z endp
.text:00000660
.text:00000660 ; ---------------------------------------------------------------------------
.text:00000663                 align 4
.text:00000664 $LN13           dd 1                    ; DATA XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+129o
.text:00000668                 dd offset $LN12
.text:0000066C $LN12           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00000668o
.text:00000674                 dd offset $LN10_0       ; "copyCoder"
.text:00000678 $LN10_0         db 'copyCoder',0        ; DATA XREF: .text:00000674o
.text:00000682                 align 4
.text:00000682 _text           ends
.text:00000682
.rdata:00000684 ; ===========================================================================
.rdata:00000684
.rdata:00000684 ; Segment type: Pure data
.rdata:00000684 ; Segment permissions: Read
.rdata:00000684 _rdata          segment dword public 'DATA' use32
.rdata:00000684                 assume cs:_rdata
.rdata:00000684                 ;org 684h
.rdata:00000684 ; COMDAT (pick largest)
.rdata:00000684                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000688                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00000688 ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00000688 ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00000688                                         ; DATA XREF: NCompress::CCopyCoder::~CCopyCoder(void)+2Eo
.rdata:00000688                                         ; NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:00000688                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:0000068C                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:00000690                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:00000694                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00000694 _rdata          ends
.rdata:00000694
.rdata:00000698 ; ===========================================================================
.rdata:00000698
.rdata:00000698 ; Segment type: Pure data
.rdata:00000698 ; Segment permissions: Read
.rdata:00000698 _rdata          segment dword public 'DATA' use32
.rdata:00000698                 assume cs:_rdata
.rdata:00000698                 ;org 698h
.rdata:00000698 ; COMDAT (pick largest)
.rdata:00000698                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:0000069C                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:0000069C ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:0000069C ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:0000069C                                         ; DATA XREF: NCompress::CCopyCoder::~CCopyCoder(void)+24o
.rdata:0000069C                                         ; NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:0000069C                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000006A0                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:000006A4                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:000006A8                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:000006A8 _rdata          ends
.rdata:000006A8
.rdata:000006AC ; ===========================================================================
.rdata:000006AC
.rdata:000006AC ; Segment type: Pure data
.rdata:000006AC ; Segment permissions: Read
.rdata:000006AC _rdata          segment dword public 'DATA' use32
.rdata:000006AC                 assume cs:_rdata
.rdata:000006AC                 ;org 6ACh
.rdata:000006AC ; COMDAT (pick largest)
.rdata:000006AC                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:000006B0                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:000006B0 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:000006B0 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000006B0                                         ; DATA XREF: NCompress::CCopyCoder::~CCopyCoder(void)+1Ao
.rdata:000006B0                                         ; NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:000006B0                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000006B4                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:000006B8                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:000006BC                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:000006C0                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:000006C0 _rdata          ends
.rdata:000006C0
.rdata:000006C4 ; ===========================================================================
.rdata:000006C4
.rdata:000006C4 ; Segment type: Pure data
.rdata:000006C4 ; Segment permissions: Read
.rdata:000006C4 _rdata          segment dword public 'DATA' use32
.rdata:000006C4                 assume cs:_rdata
.rdata:000006C4                 ;org 6C4h
.rdata:000006C4 ; COMDAT (pick largest)
.rdata:000006C4                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000006C8                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:000006C8 ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:000006C8 ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000006C8                                         ; DATA XREF: NCompress::CCopyCoder::~CCopyCoder(void)+11o
.rdata:000006C8                                         ; NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:000006C8                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:000006CC                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:000006D0                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:000006D4                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000006D4 _rdata          ends
.rdata:000006D4
.rtc$TMZ:000006D8 ; ===========================================================================
.rtc$TMZ:000006D8
.rtc$TMZ:000006D8 ; Segment type: Pure data
.rtc$TMZ:000006D8 ; Segment permissions: Read
.rtc$TMZ:000006D8 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000006D8                 assume cs:_rtc$TMZ
.rtc$TMZ:000006D8                 ;org 6D8h
.rtc$TMZ:000006D8 ; COMDAT (pick any)
.rtc$TMZ:000006D8 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000006D8 _rtc$TMZ        ends
.rtc$TMZ:000006D8
.rtc$IMZ:000006DC ; ===========================================================================
.rtc$IMZ:000006DC
.rtc$IMZ:000006DC ; Segment type: Pure data
.rtc$IMZ:000006DC ; Segment permissions: Read
.rtc$IMZ:000006DC _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000006DC                 assume cs:_rtc$IMZ
.rtc$IMZ:000006DC                 ;org 6DCh
.rtc$IMZ:000006DC ; COMDAT (pick any)
.rtc$IMZ:000006DC __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000006DC _rtc$IMZ        ends
.rtc$IMZ:000006DC
.rdata$r:000006E0 ; ===========================================================================
.rdata$r:000006E0
.rdata$r:000006E0 ; Segment type: Pure data
.rdata$r:000006E0 ; Segment permissions: Read
.rdata$r:000006E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006E0                 assume cs:_rdata$r
.rdata$r:000006E0                 ;org 6E0h
.rdata$r:000006E0 ; COMDAT (pick any)
.rdata$r:000006E0                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:000006E0 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:000006E0 ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:000006E0                                         ; DATA XREF: .rdata:000006C4o
.rdata$r:000006E1                 db    0
.rdata$r:000006E2                 db    0
.rdata$r:000006E3                 db    0
.rdata$r:000006E4                 db    0
.rdata$r:000006E5                 db    0
.rdata$r:000006E6                 db    0
.rdata$r:000006E7                 db    0
.rdata$r:000006E8                 db    0
.rdata$r:000006E9                 db    0
.rdata$r:000006EA                 db    0
.rdata$r:000006EB                 db    0
.rdata$r:000006EC                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:000006F0                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006F0 _rdata$r        ends
.rdata$r:000006F0
.data:000006F4 ; ===========================================================================
.data:000006F4
.data:000006F4 ; Segment type: Pure data
.data:000006F4 ; Segment permissions: Read/Write
.data:000006F4 _data           segment dword public 'DATA' use32
.data:000006F4                 assume cs:_data
.data:000006F4                 ;org 6F4h
.data:000006F4 ; COMDAT (pick any)
.data:000006F4                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:000006F4 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:000006F4 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:000006F4                                         ; DATA XREF: .rdata$r:000006ECo
.data:000006F4                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000006F4                                         ; const type_info::`vftable'
.data:000006F8                 db    0
.data:000006F9                 db    0
.data:000006FA                 db    0
.data:000006FB                 db    0
.data:000006FC                 db  2Eh ; .
.data:000006FD                 db  3Fh ; ?
.data:000006FE                 db  41h ; A
.data:000006FF                 db  56h ; V
.data:00000700                 db  43h ; C
.data:00000701                 db  43h ; C
.data:00000702                 db  6Fh ; o
.data:00000703                 db  70h ; p
.data:00000704                 db  79h ; y
.data:00000705                 db  43h ; C
.data:00000706                 db  6Fh ; o
.data:00000707                 db  64h ; d
.data:00000708                 db  65h ; e
.data:00000709                 db  72h ; r
.data:0000070A                 db  40h ; @
.data:0000070B                 db  4Eh ; N
.data:0000070C                 db  43h ; C
.data:0000070D                 db  6Fh ; o
.data:0000070E                 db  6Dh ; m
.data:0000070F                 db  70h ; p
.data:00000710                 db  72h ; r
.data:00000711                 db  65h ; e
.data:00000712                 db  73h ; s
.data:00000713                 db  73h ; s
.data:00000714                 db  40h ; @
.data:00000715                 db  40h ; @
.data:00000716                 db    0
.data:00000717                 align 4
.data:00000717 _data           ends
.data:00000717
.rdata$r:00000718 ; ===========================================================================
.rdata$r:00000718
.rdata$r:00000718 ; Segment type: Pure data
.rdata$r:00000718 ; Segment permissions: Read
.rdata$r:00000718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000718                 assume cs:_rdata$r
.rdata$r:00000718                 ;org 718h
.rdata$r:00000718 ; COMDAT (pick any)
.rdata$r:00000718                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:00000718 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000718 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:000006F0o
.rdata$r:00000718                                         ; .rdata$r:0000076Co ...
.rdata$r:00000719                 db    0
.rdata$r:0000071A                 db    0
.rdata$r:0000071B                 db    0
.rdata$r:0000071C                 db    5
.rdata$r:0000071D                 db    0
.rdata$r:0000071E                 db    0
.rdata$r:0000071F                 db    0
.rdata$r:00000720                 db  0Ah
.rdata$r:00000721                 db    0
.rdata$r:00000722                 db    0
.rdata$r:00000723                 db    0
.rdata$r:00000724                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00000724 _rdata$r        ends
.rdata$r:00000724
.rdata$r:00000728 ; ===========================================================================
.rdata$r:00000728
.rdata$r:00000728 ; Segment type: Pure data
.rdata$r:00000728 ; Segment permissions: Read
.rdata$r:00000728 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000728                 assume cs:_rdata$r
.rdata$r:00000728                 ;org 728h
.rdata$r:00000728 ; COMDAT (pick any)
.rdata$r:00000728                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:00000728 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00000728 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00000728                                         ; DATA XREF: .rdata$r:00000724o
.rdata$r:00000728                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000072C                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000730                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00000734                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000738                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:0000073C                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000740                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00000744                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000748                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:0000074C                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00000750                 db    0
.rdata$r:00000751                 align 4
.rdata$r:00000751 _rdata$r        ends
.rdata$r:00000751
.rdata$r:00000754 ; ===========================================================================
.rdata$r:00000754
.rdata$r:00000754 ; Segment type: Pure data
.rdata$r:00000754 ; Segment permissions: Read
.rdata$r:00000754 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000754                 assume cs:_rdata$r
.rdata$r:00000754                 ;org 754h
.rdata$r:00000754 ; COMDAT (pick any)
.rdata$r:00000754                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00000754 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000754 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00000754                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00000754                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00000758                 db    9
.rdata$r:00000759                 db    0
.rdata$r:0000075A                 db    0
.rdata$r:0000075B                 db    0
.rdata$r:0000075C                 db    0
.rdata$r:0000075D                 db    0
.rdata$r:0000075E                 db    0
.rdata$r:0000075F                 db    0
.rdata$r:00000760                 db 0FFh
.rdata$r:00000761                 db 0FFh
.rdata$r:00000762                 db 0FFh
.rdata$r:00000763                 db 0FFh
.rdata$r:00000764                 db    0
.rdata$r:00000765                 db    0
.rdata$r:00000766                 db    0
.rdata$r:00000767                 db    0
.rdata$r:00000768                 db  40h ; @
.rdata$r:00000769                 db    0
.rdata$r:0000076A                 db    0
.rdata$r:0000076B                 db    0
.rdata$r:0000076C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000076C _rdata$r        ends
.rdata$r:0000076C
.rdata$r:00000770 ; ===========================================================================
.rdata$r:00000770
.rdata$r:00000770 ; Segment type: Pure data
.rdata$r:00000770 ; Segment permissions: Read
.rdata$r:00000770 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000770                 assume cs:_rdata$r
.rdata$r:00000770                 ;org 770h
.rdata$r:00000770 ; COMDAT (pick any)
.rdata$r:00000770                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000770 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000770 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000770                                         ; DATA XREF: .rdata$r:0000072Co
.rdata$r:00000770                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000770                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000774                 db    1
.rdata$r:00000775                 db    0
.rdata$r:00000776                 db    0
.rdata$r:00000777                 db    0
.rdata$r:00000778                 db    0
.rdata$r:00000779                 db    0
.rdata$r:0000077A                 db    0
.rdata$r:0000077B                 db    0
.rdata$r:0000077C                 db 0FFh
.rdata$r:0000077D                 db 0FFh
.rdata$r:0000077E                 db 0FFh
.rdata$r:0000077F                 db 0FFh
.rdata$r:00000780                 db    0
.rdata$r:00000781                 db    0
.rdata$r:00000782                 db    0
.rdata$r:00000783                 db    0
.rdata$r:00000784                 db  40h ; @
.rdata$r:00000785                 db    0
.rdata$r:00000786                 db    0
.rdata$r:00000787                 db    0
.rdata$r:00000788                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000788 _rdata$r        ends
.rdata$r:00000788
.data:0000078C ; ===========================================================================
.data:0000078C
.data:0000078C ; Segment type: Pure data
.data:0000078C ; Segment permissions: Read/Write
.data:0000078C _data           segment dword public 'DATA' use32
.data:0000078C                 assume cs:_data
.data:0000078C                 ;org 78Ch
.data:0000078C ; COMDAT (pick any)
.data:0000078C                 public ??_R0?AUICompressCoder@@@8
.data:0000078C ; struct ICompressCoder `RTTI Type Descriptor'
.data:0000078C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:0000078C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000078C                                         ; .rdata$r:00000EC0o
.data:0000078C                                         ; const type_info::`vftable'
.data:00000790                 db    0
.data:00000791                 db    0
.data:00000792                 db    0
.data:00000793                 db    0
.data:00000794                 db  2Eh ; .
.data:00000795                 db  3Fh ; ?
.data:00000796                 db  41h ; A
.data:00000797                 db  55h ; U
.data:00000798                 db  49h ; I
.data:00000799                 db  43h ; C
.data:0000079A                 db  6Fh ; o
.data:0000079B                 db  6Dh ; m
.data:0000079C                 db  70h ; p
.data:0000079D                 db  72h ; r
.data:0000079E                 db  65h ; e
.data:0000079F                 db  73h ; s
.data:000007A0                 db  73h ; s
.data:000007A1                 db  43h ; C
.data:000007A2                 db  6Fh ; o
.data:000007A3                 db  64h ; d
.data:000007A4                 db  65h ; e
.data:000007A5                 db  72h ; r
.data:000007A6                 db  40h ; @
.data:000007A7                 db  40h ; @
.data:000007A8                 db    0
.data:000007A9                 align 4
.data:000007A9 _data           ends
.data:000007A9
.rdata$r:000007AC ; ===========================================================================
.rdata$r:000007AC
.rdata$r:000007AC ; Segment type: Pure data
.rdata$r:000007AC ; Segment permissions: Read
.rdata$r:000007AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007AC                 assume cs:_rdata$r
.rdata$r:000007AC                 ;org 7ACh
.rdata$r:000007AC ; COMDAT (pick any)
.rdata$r:000007AC                 public ??_R3ICompressCoder@@8
.rdata$r:000007AC ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007AC ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000788o
.rdata$r:000007AC                                         ; .rdata$r:00000EC4o
.rdata$r:000007AD                 db    0
.rdata$r:000007AE                 db    0
.rdata$r:000007AF                 db    0
.rdata$r:000007B0                 db    0
.rdata$r:000007B1                 db    0
.rdata$r:000007B2                 db    0
.rdata$r:000007B3                 db    0
.rdata$r:000007B4                 db    2
.rdata$r:000007B5                 db    0
.rdata$r:000007B6                 db    0
.rdata$r:000007B7                 db    0
.rdata$r:000007B8                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000007B8 _rdata$r        ends
.rdata$r:000007B8
.rdata$r:000007BC ; ===========================================================================
.rdata$r:000007BC
.rdata$r:000007BC ; Segment type: Pure data
.rdata$r:000007BC ; Segment permissions: Read
.rdata$r:000007BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007BC                 assume cs:_rdata$r
.rdata$r:000007BC                 ;org 7BCh
.rdata$r:000007BC ; COMDAT (pick any)
.rdata$r:000007BC                 public ??_R2ICompressCoder@@8
.rdata$r:000007BC ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000007BC ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000007BC                                         ; DATA XREF: .rdata$r:000007B8o
.rdata$r:000007BC                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007C0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007C4                 db    0
.rdata$r:000007C5                 align 4
.rdata$r:000007C5 _rdata$r        ends
.rdata$r:000007C5
.rdata$r:000007C8 ; ===========================================================================
.rdata$r:000007C8
.rdata$r:000007C8 ; Segment type: Pure data
.rdata$r:000007C8 ; Segment permissions: Read
.rdata$r:000007C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007C8                 assume cs:_rdata$r
.rdata$r:000007C8                 ;org 7C8h
.rdata$r:000007C8 ; COMDAT (pick any)
.rdata$r:000007C8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000007C8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000007C8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000007C8                                         ; DATA XREF: .rdata$r:000007C0o
.rdata$r:000007C8                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000007C8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000007CC                 db    0
.rdata$r:000007CD                 db    0
.rdata$r:000007CE                 db    0
.rdata$r:000007CF                 db    0
.rdata$r:000007D0                 db    0
.rdata$r:000007D1                 db    0
.rdata$r:000007D2                 db    0
.rdata$r:000007D3                 db    0
.rdata$r:000007D4                 db 0FFh
.rdata$r:000007D5                 db 0FFh
.rdata$r:000007D6                 db 0FFh
.rdata$r:000007D7                 db 0FFh
.rdata$r:000007D8                 db    0
.rdata$r:000007D9                 db    0
.rdata$r:000007DA                 db    0
.rdata$r:000007DB                 db    0
.rdata$r:000007DC                 db  40h ; @
.rdata$r:000007DD                 db    0
.rdata$r:000007DE                 db    0
.rdata$r:000007DF                 db    0
.rdata$r:000007E0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007E0 _rdata$r        ends
.rdata$r:000007E0
.data:000007E4 ; ===========================================================================
.data:000007E4
.data:000007E4 ; Segment type: Pure data
.data:000007E4 ; Segment permissions: Read/Write
.data:000007E4 _data           segment dword public 'DATA' use32
.data:000007E4                 assume cs:_data
.data:000007E4                 ;org 7E4h
.data:000007E4 ; COMDAT (pick any)
.data:000007E4                 public ??_R0?AUIUnknown@@@8
.data:000007E4 ; struct IUnknown `RTTI Type Descriptor'
.data:000007E4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000007E4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000007E4                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000007E4                                         ; const type_info::`vftable'
.data:000007E8                 db    0
.data:000007E9                 db    0
.data:000007EA                 db    0
.data:000007EB                 db    0
.data:000007EC                 db  2Eh ; .
.data:000007ED                 db  3Fh ; ?
.data:000007EE                 db  41h ; A
.data:000007EF                 db  55h ; U
.data:000007F0                 db  49h ; I
.data:000007F1                 db  55h ; U
.data:000007F2                 db  6Eh ; n
.data:000007F3                 db  6Bh ; k
.data:000007F4                 db  6Eh ; n
.data:000007F5                 db  6Fh ; o
.data:000007F6                 db  77h ; w
.data:000007F7                 db  6Eh ; n
.data:000007F8                 db  40h ; @
.data:000007F9                 db  40h ; @
.data:000007FA                 db    0
.data:000007FB                 align 4
.data:000007FB _data           ends
.data:000007FB
.rdata$r:000007FC ; ===========================================================================
.rdata$r:000007FC
.rdata$r:000007FC ; Segment type: Pure data
.rdata$r:000007FC ; Segment permissions: Read
.rdata$r:000007FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007FC                 assume cs:_rdata$r
.rdata$r:000007FC                 ;org 7FCh
.rdata$r:000007FC ; COMDAT (pick any)
.rdata$r:000007FC                 public ??_R3IUnknown@@8
.rdata$r:000007FC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007FC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000007E0o
.rdata$r:000007FC                                         ; .rdata$r:0000082Co ...
.rdata$r:000007FD                 db    0
.rdata$r:000007FE                 db    0
.rdata$r:000007FF                 db    0
.rdata$r:00000800                 db    0
.rdata$r:00000801                 db    0
.rdata$r:00000802                 db    0
.rdata$r:00000803                 db    0
.rdata$r:00000804                 db    1
.rdata$r:00000805                 db    0
.rdata$r:00000806                 db    0
.rdata$r:00000807                 db    0
.rdata$r:00000808                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000808 _rdata$r        ends
.rdata$r:00000808
.rdata$r:0000080C ; ===========================================================================
.rdata$r:0000080C
.rdata$r:0000080C ; Segment type: Pure data
.rdata$r:0000080C ; Segment permissions: Read
.rdata$r:0000080C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000080C                 assume cs:_rdata$r
.rdata$r:0000080C                 ;org 80Ch
.rdata$r:0000080C ; COMDAT (pick any)
.rdata$r:0000080C                 public ??_R2IUnknown@@8
.rdata$r:0000080C ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000080C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:0000080C                                         ; DATA XREF: .rdata$r:00000808o
.rdata$r:0000080C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000810                 db    0
.rdata$r:00000811                 align 4
.rdata$r:00000811 _rdata$r        ends
.rdata$r:00000811
.rdata$r:00000814 ; ===========================================================================
.rdata$r:00000814
.rdata$r:00000814 ; Segment type: Pure data
.rdata$r:00000814 ; Segment permissions: Read
.rdata$r:00000814 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000814                 assume cs:_rdata$r
.rdata$r:00000814                 ;org 814h
.rdata$r:00000814 ; COMDAT (pick any)
.rdata$r:00000814                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000814 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000814 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000814                                         ; DATA XREF: .rdata$r:00000730o
.rdata$r:00000814                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000818                 align 10h
.rdata$r:00000820                 db 0FFh
.rdata$r:00000821                 db 0FFh
.rdata$r:00000822                 db 0FFh
.rdata$r:00000823                 db 0FFh
.rdata$r:00000824                 db    0
.rdata$r:00000825                 db    0
.rdata$r:00000826                 db    0
.rdata$r:00000827                 db    0
.rdata$r:00000828                 db  42h ; B
.rdata$r:00000829                 db    0
.rdata$r:0000082A                 db    0
.rdata$r:0000082B                 db    0
.rdata$r:0000082C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000082C _rdata$r        ends
.rdata$r:0000082C
.rdata$r:00000830 ; ===========================================================================
.rdata$r:00000830
.rdata$r:00000830 ; Segment type: Pure data
.rdata$r:00000830 ; Segment permissions: Read
.rdata$r:00000830 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000830                 assume cs:_rdata$r
.rdata$r:00000830                 ;org 830h
.rdata$r:00000830 ; COMDAT (pick any)
.rdata$r:00000830                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:00000830 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000830 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00000830                                         ; DATA XREF: .rdata$r:00000734o
.rdata$r:00000830                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000834                 db    1
.rdata$r:00000835                 db    0
.rdata$r:00000836                 db    0
.rdata$r:00000837                 db    0
.rdata$r:00000838                 db    4
.rdata$r:00000839                 db    0
.rdata$r:0000083A                 db    0
.rdata$r:0000083B                 db    0
.rdata$r:0000083C                 db 0FFh
.rdata$r:0000083D                 db 0FFh
.rdata$r:0000083E                 db 0FFh
.rdata$r:0000083F                 db 0FFh
.rdata$r:00000840                 db    0
.rdata$r:00000841                 db    0
.rdata$r:00000842                 db    0
.rdata$r:00000843                 db    0
.rdata$r:00000844                 db  40h ; @
.rdata$r:00000845                 db    0
.rdata$r:00000846                 db    0
.rdata$r:00000847                 db    0
.rdata$r:00000848                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000848 _rdata$r        ends
.rdata$r:00000848
.data:0000084C ; ===========================================================================
.data:0000084C
.data:0000084C ; Segment type: Pure data
.data:0000084C ; Segment permissions: Read/Write
.data:0000084C _data           segment dword public 'DATA' use32
.data:0000084C                 assume cs:_data
.data:0000084C                 ;org 84Ch
.data:0000084C ; COMDAT (pick any)
.data:0000084C                 public ??_R0?AUICompressSetInStream@@@8
.data:0000084C ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:0000084C ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000084C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000084C                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000084C                                         ; const type_info::`vftable'
.data:00000850                 db    0
.data:00000851                 db    0
.data:00000852                 db    0
.data:00000853                 db    0
.data:00000854                 db  2Eh ; .
.data:00000855                 db  3Fh ; ?
.data:00000856                 db  41h ; A
.data:00000857                 db  55h ; U
.data:00000858                 db  49h ; I
.data:00000859                 db  43h ; C
.data:0000085A                 db  6Fh ; o
.data:0000085B                 db  6Dh ; m
.data:0000085C                 db  70h ; p
.data:0000085D                 db  72h ; r
.data:0000085E                 db  65h ; e
.data:0000085F                 db  73h ; s
.data:00000860                 db  73h ; s
.data:00000861                 db  53h ; S
.data:00000862                 db  65h ; e
.data:00000863                 db  74h ; t
.data:00000864                 db  49h ; I
.data:00000865                 db  6Eh ; n
.data:00000866                 db  53h ; S
.data:00000867                 db  74h ; t
.data:00000868                 db  72h ; r
.data:00000869                 db  65h ; e
.data:0000086A                 db  61h ; a
.data:0000086B                 db  6Dh ; m
.data:0000086C                 db  40h ; @
.data:0000086D                 db  40h ; @
.data:0000086E                 db    0
.data:0000086F                 align 10h
.data:0000086F _data           ends
.data:0000086F
.rdata$r:00000870 ; ===========================================================================
.rdata$r:00000870
.rdata$r:00000870 ; Segment type: Pure data
.rdata$r:00000870 ; Segment permissions: Read
.rdata$r:00000870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000870                 assume cs:_rdata$r
.rdata$r:00000870                 ;org 870h
.rdata$r:00000870 ; COMDAT (pick any)
.rdata$r:00000870                 public ??_R3ICompressSetInStream@@8
.rdata$r:00000870 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000870 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00000848o
.rdata$r:00000870                                         ; .rdata$r:000008A4o ...
.rdata$r:00000871                 db    0
.rdata$r:00000872                 db    0
.rdata$r:00000873                 db    0
.rdata$r:00000874                 db    0
.rdata$r:00000875                 db    0
.rdata$r:00000876                 db    0
.rdata$r:00000877                 db    0
.rdata$r:00000878                 db    2
.rdata$r:00000879                 db    0
.rdata$r:0000087A                 db    0
.rdata$r:0000087B                 db    0
.rdata$r:0000087C                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:0000087C _rdata$r        ends
.rdata$r:0000087C
.rdata$r:00000880 ; ===========================================================================
.rdata$r:00000880
.rdata$r:00000880 ; Segment type: Pure data
.rdata$r:00000880 ; Segment permissions: Read
.rdata$r:00000880 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000880                 assume cs:_rdata$r
.rdata$r:00000880                 ;org 880h
.rdata$r:00000880 ; COMDAT (pick any)
.rdata$r:00000880                 public ??_R2ICompressSetInStream@@8
.rdata$r:00000880 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00000880 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00000880                                         ; DATA XREF: .rdata$r:0000087Co
.rdata$r:00000880                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000884                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000888                 db    0
.rdata$r:00000889                 align 4
.rdata$r:00000889 _rdata$r        ends
.rdata$r:00000889
.rdata$r:0000088C ; ===========================================================================
.rdata$r:0000088C
.rdata$r:0000088C ; Segment type: Pure data
.rdata$r:0000088C ; Segment permissions: Read
.rdata$r:0000088C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000088C                 assume cs:_rdata$r
.rdata$r:0000088C                 ;org 88Ch
.rdata$r:0000088C ; COMDAT (pick any)
.rdata$r:0000088C                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:0000088C ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000088C ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:0000088C                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:0000088C                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000890                 db    1
.rdata$r:00000891                 db    0
.rdata$r:00000892                 db    0
.rdata$r:00000893                 db    0
.rdata$r:00000894                 db    0
.rdata$r:00000895                 db    0
.rdata$r:00000896                 db    0
.rdata$r:00000897                 db    0
.rdata$r:00000898                 db 0FFh
.rdata$r:00000899                 db 0FFh
.rdata$r:0000089A                 db 0FFh
.rdata$r:0000089B                 db 0FFh
.rdata$r:0000089C                 db    0
.rdata$r:0000089D                 db    0
.rdata$r:0000089E                 db    0
.rdata$r:0000089F                 db    0
.rdata$r:000008A0                 db  40h ; @
.rdata$r:000008A1                 db    0
.rdata$r:000008A2                 db    0
.rdata$r:000008A3                 db    0
.rdata$r:000008A4                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008A4 _rdata$r        ends
.rdata$r:000008A4
.rdata$r:000008A8 ; ===========================================================================
.rdata$r:000008A8
.rdata$r:000008A8 ; Segment type: Pure data
.rdata$r:000008A8 ; Segment permissions: Read
.rdata$r:000008A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008A8                 assume cs:_rdata$r
.rdata$r:000008A8                 ;org 8A8h
.rdata$r:000008A8 ; COMDAT (pick any)
.rdata$r:000008A8                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000008A8 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000008A8 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000008A8                                         ; DATA XREF: .rdata$r:00000738o
.rdata$r:000008A8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000008AC                 align 10h
.rdata$r:000008B0                 db    4
.rdata$r:000008B1                 db    0
.rdata$r:000008B2                 db    0
.rdata$r:000008B3                 db    0
.rdata$r:000008B4                 db 0FFh
.rdata$r:000008B5                 db 0FFh
.rdata$r:000008B6                 db 0FFh
.rdata$r:000008B7                 db 0FFh
.rdata$r:000008B8                 db    0
.rdata$r:000008B9                 db    0
.rdata$r:000008BA                 db    0
.rdata$r:000008BB                 db    0
.rdata$r:000008BC                 db  42h ; B
.rdata$r:000008BD                 db    0
.rdata$r:000008BE                 db    0
.rdata$r:000008BF                 db    0
.rdata$r:000008C0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008C0 _rdata$r        ends
.rdata$r:000008C0
.rdata$r:000008C4 ; ===========================================================================
.rdata$r:000008C4
.rdata$r:000008C4 ; Segment type: Pure data
.rdata$r:000008C4 ; Segment permissions: Read
.rdata$r:000008C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008C4                 assume cs:_rdata$r
.rdata$r:000008C4                 ;org 8C4h
.rdata$r:000008C4 ; COMDAT (pick any)
.rdata$r:000008C4                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:000008C4 ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000008C4 ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:000008C4                                         ; DATA XREF: .rdata$r:0000073Co
.rdata$r:000008C4                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:000008C8                 db    1
.rdata$r:000008C9                 db    0
.rdata$r:000008CA                 db    0
.rdata$r:000008CB                 db    0
.rdata$r:000008CC                 db    8
.rdata$r:000008CD                 db    0
.rdata$r:000008CE                 db    0
.rdata$r:000008CF                 db    0
.rdata$r:000008D0                 db 0FFh
.rdata$r:000008D1                 db 0FFh
.rdata$r:000008D2                 db 0FFh
.rdata$r:000008D3                 db 0FFh
.rdata$r:000008D4                 db    0
.rdata$r:000008D5                 db    0
.rdata$r:000008D6                 db    0
.rdata$r:000008D7                 db    0
.rdata$r:000008D8                 db  40h ; @
.rdata$r:000008D9                 db    0
.rdata$r:000008DA                 db    0
.rdata$r:000008DB                 db    0
.rdata$r:000008DC                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000008DC _rdata$r        ends
.rdata$r:000008DC
.data:000008E0 ; ===========================================================================
.data:000008E0
.data:000008E0 ; Segment type: Pure data
.data:000008E0 ; Segment permissions: Read/Write
.data:000008E0 _data           segment dword public 'DATA' use32
.data:000008E0                 assume cs:_data
.data:000008E0                 ;org 8E0h
.data:000008E0 ; COMDAT (pick any)
.data:000008E0                 public ??_R0?AUISequentialInStream@@@8
.data:000008E0 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:000008E0 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:000008E0                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000008E0                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000008E0                                         ; const type_info::`vftable'
.data:000008E4                 align 8
.data:000008E8 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00000902                 align 4
.data:00000902 _data           ends
.data:00000902
.rdata$r:00000904 ; ===========================================================================
.rdata$r:00000904
.rdata$r:00000904 ; Segment type: Pure data
.rdata$r:00000904 ; Segment permissions: Read
.rdata$r:00000904 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000904                 assume cs:_rdata$r
.rdata$r:00000904                 ;org 904h
.rdata$r:00000904 ; COMDAT (pick any)
.rdata$r:00000904                 public ??_R3ISequentialInStream@@8
.rdata$r:00000904 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000904 ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:000008DCo
.rdata$r:00000904                                         ; .rdata$r:00000938o ...
.rdata$r:00000905                 db    0
.rdata$r:00000906                 db    0
.rdata$r:00000907                 db    0
.rdata$r:00000908                 db    0
.rdata$r:00000909                 db    0
.rdata$r:0000090A                 db    0
.rdata$r:0000090B                 db    0
.rdata$r:0000090C                 db    2
.rdata$r:0000090D                 db    0
.rdata$r:0000090E                 db    0
.rdata$r:0000090F                 db    0
.rdata$r:00000910                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000910 _rdata$r        ends
.rdata$r:00000910
.rdata$r:00000914 ; ===========================================================================
.rdata$r:00000914
.rdata$r:00000914 ; Segment type: Pure data
.rdata$r:00000914 ; Segment permissions: Read
.rdata$r:00000914 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000914                 assume cs:_rdata$r
.rdata$r:00000914                 ;org 914h
.rdata$r:00000914 ; COMDAT (pick any)
.rdata$r:00000914                 public ??_R2ISequentialInStream@@8
.rdata$r:00000914 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000914 ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000914                                         ; DATA XREF: .rdata$r:00000910o
.rdata$r:00000914                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000918                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000091C                 db    0
.rdata$r:0000091D                 align 10h
.rdata$r:0000091D _rdata$r        ends
.rdata$r:0000091D
.rdata$r:00000920 ; ===========================================================================
.rdata$r:00000920
.rdata$r:00000920 ; Segment type: Pure data
.rdata$r:00000920 ; Segment permissions: Read
.rdata$r:00000920 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000920                 assume cs:_rdata$r
.rdata$r:00000920                 ;org 920h
.rdata$r:00000920 ; COMDAT (pick any)
.rdata$r:00000920                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00000920 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000920 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00000920                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00000920                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000924                 db    1
.rdata$r:00000925                 db    0
.rdata$r:00000926                 db    0
.rdata$r:00000927                 db    0
.rdata$r:00000928                 db    0
.rdata$r:00000929                 db    0
.rdata$r:0000092A                 db    0
.rdata$r:0000092B                 db    0
.rdata$r:0000092C                 db 0FFh
.rdata$r:0000092D                 db 0FFh
.rdata$r:0000092E                 db 0FFh
.rdata$r:0000092F                 db 0FFh
.rdata$r:00000930                 db    0
.rdata$r:00000931                 db    0
.rdata$r:00000932                 db    0
.rdata$r:00000933                 db    0
.rdata$r:00000934                 db  40h ; @
.rdata$r:00000935                 db    0
.rdata$r:00000936                 db    0
.rdata$r:00000937                 db    0
.rdata$r:00000938                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000938 _rdata$r        ends
.rdata$r:00000938
.rdata$r:0000093C ; ===========================================================================
.rdata$r:0000093C
.rdata$r:0000093C ; Segment type: Pure data
.rdata$r:0000093C ; Segment permissions: Read
.rdata$r:0000093C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000093C                 assume cs:_rdata$r
.rdata$r:0000093C                 ;org 93Ch
.rdata$r:0000093C ; COMDAT (pick any)
.rdata$r:0000093C                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:0000093C ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:0000093C ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:0000093C                                         ; DATA XREF: .rdata$r:00000740o
.rdata$r:0000093C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000940                 db    0
.rdata$r:00000941                 db    0
.rdata$r:00000942                 db    0
.rdata$r:00000943                 db    0
.rdata$r:00000944                 db    8
.rdata$r:00000945                 db    0
.rdata$r:00000946                 db    0
.rdata$r:00000947                 db    0
.rdata$r:00000948                 db 0FFh
.rdata$r:00000949                 db 0FFh
.rdata$r:0000094A                 db 0FFh
.rdata$r:0000094B                 db 0FFh
.rdata$r:0000094C                 db    0
.rdata$r:0000094D                 db    0
.rdata$r:0000094E                 db    0
.rdata$r:0000094F                 db    0
.rdata$r:00000950                 db  42h ; B
.rdata$r:00000951                 db    0
.rdata$r:00000952                 db    0
.rdata$r:00000953                 db    0
.rdata$r:00000954                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000954 _rdata$r        ends
.rdata$r:00000954
.rdata$r:00000958 ; ===========================================================================
.rdata$r:00000958
.rdata$r:00000958 ; Segment type: Pure data
.rdata$r:00000958 ; Segment permissions: Read
.rdata$r:00000958 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000958                 assume cs:_rdata$r
.rdata$r:00000958                 ;org 958h
.rdata$r:00000958 ; COMDAT (pick any)
.rdata$r:00000958                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00000958 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00000958 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00000958                                         ; DATA XREF: .rdata$r:00000744o
.rdata$r:00000958                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:0000095C                 db    1
.rdata$r:0000095D                 db    0
.rdata$r:0000095E                 db    0
.rdata$r:0000095F                 db    0
.rdata$r:00000960                 db  0Ch
.rdata$r:00000961                 db    0
.rdata$r:00000962                 db    0
.rdata$r:00000963                 db    0
.rdata$r:00000964                 db 0FFh
.rdata$r:00000965                 db 0FFh
.rdata$r:00000966                 db 0FFh
.rdata$r:00000967                 db 0FFh
.rdata$r:00000968                 db    0
.rdata$r:00000969                 db    0
.rdata$r:0000096A                 db    0
.rdata$r:0000096B                 db    0
.rdata$r:0000096C                 db  40h ; @
.rdata$r:0000096D                 db    0
.rdata$r:0000096E                 db    0
.rdata$r:0000096F                 db    0
.rdata$r:00000970                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000970 _rdata$r        ends
.rdata$r:00000970
.data:00000974 ; ===========================================================================
.data:00000974
.data:00000974 ; Segment type: Pure data
.data:00000974 ; Segment permissions: Read/Write
.data:00000974 _data           segment dword public 'DATA' use32
.data:00000974                 assume cs:_data
.data:00000974                 ;org 974h
.data:00000974 ; COMDAT (pick any)
.data:00000974                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00000974 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00000974 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00000974                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000974                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000974                                         ; const type_info::`vftable'
.data:00000978                 db    0
.data:00000979                 db    0
.data:0000097A                 db    0
.data:0000097B                 db    0
.data:0000097C                 db  2Eh ; .
.data:0000097D                 db  3Fh ; ?
.data:0000097E                 db  41h ; A
.data:0000097F                 db  55h ; U
.data:00000980                 db  49h ; I
.data:00000981                 db  43h ; C
.data:00000982                 db  6Fh ; o
.data:00000983                 db  6Dh ; m
.data:00000984                 db  70h ; p
.data:00000985                 db  72h ; r
.data:00000986                 db  65h ; e
.data:00000987                 db  73h ; s
.data:00000988                 db  73h ; s
.data:00000989                 db  47h ; G
.data:0000098A                 db  65h ; e
.data:0000098B                 db  74h ; t
.data:0000098C                 db  49h ; I
.data:0000098D                 db  6Eh ; n
.data:0000098E                 db  53h ; S
.data:0000098F                 db  74h ; t
.data:00000990                 db  72h ; r
.data:00000991                 db  65h ; e
.data:00000992                 db  61h ; a
.data:00000993                 db  6Dh ; m
.data:00000994                 db  50h ; P
.data:00000995                 db  72h ; r
.data:00000996                 db  6Fh ; o
.data:00000997                 db  63h ; c
.data:00000998                 db  65h ; e
.data:00000999                 db  73h ; s
.data:0000099A                 db  73h ; s
.data:0000099B                 db  65h ; e
.data:0000099C                 db  64h ; d
.data:0000099D                 db  53h ; S
.data:0000099E                 db  69h ; i
.data:0000099F                 db  7Ah ; z
.data:000009A0                 db  65h ; e
.data:000009A1                 db  40h ; @
.data:000009A2                 db  40h ; @
.data:000009A3                 db    0
.data:000009A3 _data           ends
.data:000009A3
.rdata$r:000009A4 ; ===========================================================================
.rdata$r:000009A4
.rdata$r:000009A4 ; Segment type: Pure data
.rdata$r:000009A4 ; Segment permissions: Read
.rdata$r:000009A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009A4                 assume cs:_rdata$r
.rdata$r:000009A4                 ;org 9A4h
.rdata$r:000009A4 ; COMDAT (pick any)
.rdata$r:000009A4                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:000009A4 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009A4 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:000009A4                                         ; DATA XREF: .rdata$r:00000970o
.rdata$r:000009A4                                         ; .rdata$r:000009D8o ...
.rdata$r:000009A5                 db    0
.rdata$r:000009A6                 db    0
.rdata$r:000009A7                 db    0
.rdata$r:000009A8                 db    0
.rdata$r:000009A9                 db    0
.rdata$r:000009AA                 db    0
.rdata$r:000009AB                 db    0
.rdata$r:000009AC                 db    2
.rdata$r:000009AD                 db    0
.rdata$r:000009AE                 db    0
.rdata$r:000009AF                 db    0
.rdata$r:000009B0                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:000009B0 _rdata$r        ends
.rdata$r:000009B0
.rdata$r:000009B4 ; ===========================================================================
.rdata$r:000009B4
.rdata$r:000009B4 ; Segment type: Pure data
.rdata$r:000009B4 ; Segment permissions: Read
.rdata$r:000009B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009B4                 assume cs:_rdata$r
.rdata$r:000009B4                 ;org 9B4h
.rdata$r:000009B4 ; COMDAT (pick any)
.rdata$r:000009B4                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:000009B4 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:000009B4 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000009B4                                         ; DATA XREF: .rdata$r:000009B0o
.rdata$r:000009B4                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009B8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009BC                 db    0
.rdata$r:000009BD                 align 10h
.rdata$r:000009BD _rdata$r        ends
.rdata$r:000009BD
.rdata$r:000009C0 ; ===========================================================================
.rdata$r:000009C0
.rdata$r:000009C0 ; Segment type: Pure data
.rdata$r:000009C0 ; Segment permissions: Read
.rdata$r:000009C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C0                 assume cs:_rdata$r
.rdata$r:000009C0                 ;org 9C0h
.rdata$r:000009C0 ; COMDAT (pick any)
.rdata$r:000009C0                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:000009C0 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000009C0 ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:000009C0                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:000009C0                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:000009C4                 db    1
.rdata$r:000009C5                 db    0
.rdata$r:000009C6                 db    0
.rdata$r:000009C7                 db    0
.rdata$r:000009C8                 db    0
.rdata$r:000009C9                 db    0
.rdata$r:000009CA                 db    0
.rdata$r:000009CB                 db    0
.rdata$r:000009CC                 db 0FFh
.rdata$r:000009CD                 db 0FFh
.rdata$r:000009CE                 db 0FFh
.rdata$r:000009CF                 db 0FFh
.rdata$r:000009D0                 db    0
.rdata$r:000009D1                 db    0
.rdata$r:000009D2                 db    0
.rdata$r:000009D3                 db    0
.rdata$r:000009D4                 db  40h ; @
.rdata$r:000009D5                 db    0
.rdata$r:000009D6                 db    0
.rdata$r:000009D7                 db    0
.rdata$r:000009D8                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009D8 _rdata$r        ends
.rdata$r:000009D8
.rdata$r:000009DC ; ===========================================================================
.rdata$r:000009DC
.rdata$r:000009DC ; Segment type: Pure data
.rdata$r:000009DC ; Segment permissions: Read
.rdata$r:000009DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009DC                 assume cs:_rdata$r
.rdata$r:000009DC                 ;org 9DCh
.rdata$r:000009DC ; COMDAT (pick any)
.rdata$r:000009DC                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000009DC ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000009DC ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000009DC                                         ; DATA XREF: .rdata$r:00000748o
.rdata$r:000009DC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000009E0                 db    0
.rdata$r:000009E1                 db    0
.rdata$r:000009E2                 db    0
.rdata$r:000009E3                 db    0
.rdata$r:000009E4                 db  0Ch
.rdata$r:000009E5                 db    0
.rdata$r:000009E6                 db    0
.rdata$r:000009E7                 db    0
.rdata$r:000009E8                 db 0FFh
.rdata$r:000009E9                 db 0FFh
.rdata$r:000009EA                 db 0FFh
.rdata$r:000009EB                 db 0FFh
.rdata$r:000009EC                 db    0
.rdata$r:000009ED                 db    0
.rdata$r:000009EE                 db    0
.rdata$r:000009EF                 db    0
.rdata$r:000009F0                 db  42h ; B
.rdata$r:000009F1                 db    0
.rdata$r:000009F2                 db    0
.rdata$r:000009F3                 db    0
.rdata$r:000009F4                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009F4 _rdata$r        ends
.rdata$r:000009F4
.rdata$r:000009F8 ; ===========================================================================
.rdata$r:000009F8
.rdata$r:000009F8 ; Segment type: Pure data
.rdata$r:000009F8 ; Segment permissions: Read
.rdata$r:000009F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009F8                 assume cs:_rdata$r
.rdata$r:000009F8                 ;org 9F8h
.rdata$r:000009F8 ; COMDAT (pick any)
.rdata$r:000009F8                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:000009F8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:000009F8 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000009F8                                         ; DATA XREF: .rdata$r:0000074Co
.rdata$r:000009F8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000009FC                 align 10h
.rdata$r:00000A00                 db  10h
.rdata$r:00000A01                 db    0
.rdata$r:00000A02                 db    0
.rdata$r:00000A03                 db    0
.rdata$r:00000A04                 db 0FFh
.rdata$r:00000A05                 db 0FFh
.rdata$r:00000A06                 db 0FFh
.rdata$r:00000A07                 db 0FFh
.rdata$r:00000A08                 db    0
.rdata$r:00000A09                 db    0
.rdata$r:00000A0A                 db    0
.rdata$r:00000A0B                 db    0
.rdata$r:00000A0C                 db  40h ; @
.rdata$r:00000A0D                 db    0
.rdata$r:00000A0E                 db    0
.rdata$r:00000A0F                 db    0
.rdata$r:00000A10                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A10 _rdata$r        ends
.rdata$r:00000A10
.data:00000A14 ; ===========================================================================
.data:00000A14
.data:00000A14 ; Segment type: Pure data
.data:00000A14 ; Segment permissions: Read/Write
.data:00000A14 _data           segment dword public 'DATA' use32
.data:00000A14                 assume cs:_data
.data:00000A14                 ;org 0A14h
.data:00000A14 ; COMDAT (pick any)
.data:00000A14                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000A14 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000A14 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000A14                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00000A14                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A14                                         ; const type_info::`vftable'
.data:00000A18                 db    0
.data:00000A19                 db    0
.data:00000A1A                 db    0
.data:00000A1B                 db    0
.data:00000A1C                 db  2Eh ; .
.data:00000A1D                 db  3Fh ; ?
.data:00000A1E                 db  41h ; A
.data:00000A1F                 db  56h ; V
.data:00000A20                 db  43h ; C
.data:00000A21                 db  4Dh ; M
.data:00000A22                 db  79h ; y
.data:00000A23                 db  55h ; U
.data:00000A24                 db  6Eh ; n
.data:00000A25                 db  6Bh ; k
.data:00000A26                 db  6Eh ; n
.data:00000A27                 db  6Fh ; o
.data:00000A28                 db  77h ; w
.data:00000A29                 db  6Eh ; n
.data:00000A2A                 db  49h ; I
.data:00000A2B                 db  6Dh ; m
.data:00000A2C                 db  70h ; p
.data:00000A2D                 db  40h ; @
.data:00000A2E                 db  40h ; @
.data:00000A2F                 db    0
.data:00000A2F _data           ends
.data:00000A2F
.rdata$r:00000A30 ; ===========================================================================
.rdata$r:00000A30
.rdata$r:00000A30 ; Segment type: Pure data
.rdata$r:00000A30 ; Segment permissions: Read
.rdata$r:00000A30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A30                 assume cs:_rdata$r
.rdata$r:00000A30                 ;org 0A30h
.rdata$r:00000A30 ; COMDAT (pick any)
.rdata$r:00000A30                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000A30 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A30 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000A10o
.rdata$r:00000A30                                         ; .rdata$r:00000A60o
.rdata$r:00000A31                 db    0
.rdata$r:00000A32                 db    0
.rdata$r:00000A33                 db    0
.rdata$r:00000A34                 db    0
.rdata$r:00000A35                 db    0
.rdata$r:00000A36                 db    0
.rdata$r:00000A37                 db    0
.rdata$r:00000A38                 db    1
.rdata$r:00000A39                 db    0
.rdata$r:00000A3A                 db    0
.rdata$r:00000A3B                 db    0
.rdata$r:00000A3C                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A3C _rdata$r        ends
.rdata$r:00000A3C
.rdata$r:00000A40 ; ===========================================================================
.rdata$r:00000A40
.rdata$r:00000A40 ; Segment type: Pure data
.rdata$r:00000A40 ; Segment permissions: Read
.rdata$r:00000A40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A40                 assume cs:_rdata$r
.rdata$r:00000A40                 ;org 0A40h
.rdata$r:00000A40 ; COMDAT (pick any)
.rdata$r:00000A40                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000A40 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000A40 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A40                                         ; DATA XREF: .rdata$r:00000A3Co
.rdata$r:00000A40                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A44                 db    0
.rdata$r:00000A45                 align 4
.rdata$r:00000A45 _rdata$r        ends
.rdata$r:00000A45
.rdata$r:00000A48 ; ===========================================================================
.rdata$r:00000A48
.rdata$r:00000A48 ; Segment type: Pure data
.rdata$r:00000A48 ; Segment permissions: Read
.rdata$r:00000A48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A48                 assume cs:_rdata$r
.rdata$r:00000A48                 ;org 0A48h
.rdata$r:00000A48 ; COMDAT (pick any)
.rdata$r:00000A48                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000A48 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A48 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000A48                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000A48                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000A4C                 db    0
.rdata$r:00000A4D                 db    0
.rdata$r:00000A4E                 db    0
.rdata$r:00000A4F                 db    0
.rdata$r:00000A50                 db    0
.rdata$r:00000A51                 db    0
.rdata$r:00000A52                 db    0
.rdata$r:00000A53                 db    0
.rdata$r:00000A54                 db 0FFh
.rdata$r:00000A55                 db 0FFh
.rdata$r:00000A56                 db 0FFh
.rdata$r:00000A57                 db 0FFh
.rdata$r:00000A58                 db    0
.rdata$r:00000A59                 db    0
.rdata$r:00000A5A                 db    0
.rdata$r:00000A5B                 db    0
.rdata$r:00000A5C                 db  40h ; @
.rdata$r:00000A5D                 db    0
.rdata$r:00000A5E                 db    0
.rdata$r:00000A5F                 db    0
.rdata$r:00000A60                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A60 _rdata$r        ends
.rdata$r:00000A60
.rdata$r:00000A64 ; ===========================================================================
.rdata$r:00000A64
.rdata$r:00000A64 ; Segment type: Pure data
.rdata$r:00000A64 ; Segment permissions: Read
.rdata$r:00000A64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A64                 assume cs:_rdata$r
.rdata$r:00000A64                 ;org 0A64h
.rdata$r:00000A64 ; COMDAT (pick any)
.rdata$r:00000A64                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00000A64 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00000A64 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00000A64                                         ; DATA XREF: .rdata:000006ACo
.rdata$r:00000A65                 db    0
.rdata$r:00000A66                 db    0
.rdata$r:00000A67                 db    0
.rdata$r:00000A68                 db    4
.rdata$r:00000A69                 db    0
.rdata$r:00000A6A                 db    0
.rdata$r:00000A6B                 db    0
.rdata$r:00000A6C                 db    0
.rdata$r:00000A6D                 db    0
.rdata$r:00000A6E                 db    0
.rdata$r:00000A6F                 db    0
.rdata$r:00000A70                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00000A74                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A74 _rdata$r        ends
.rdata$r:00000A74
.rdata$r:00000A78 ; ===========================================================================
.rdata$r:00000A78
.rdata$r:00000A78 ; Segment type: Pure data
.rdata$r:00000A78 ; Segment permissions: Read
.rdata$r:00000A78 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A78                 assume cs:_rdata$r
.rdata$r:00000A78                 ;org 0A78h
.rdata$r:00000A78 ; COMDAT (pick any)
.rdata$r:00000A78                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:00000A78 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00000A78 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00000A78                                         ; DATA XREF: .rdata:00000698o
.rdata$r:00000A79                 db    0
.rdata$r:00000A7A                 db    0
.rdata$r:00000A7B                 db    0
.rdata$r:00000A7C                 db    8
.rdata$r:00000A7D                 db    0
.rdata$r:00000A7E                 db    0
.rdata$r:00000A7F                 db    0
.rdata$r:00000A80                 db    0
.rdata$r:00000A81                 db    0
.rdata$r:00000A82                 db    0
.rdata$r:00000A83                 db    0
.rdata$r:00000A84                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00000A88                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A88 _rdata$r        ends
.rdata$r:00000A88
.rdata$r:00000A8C ; ===========================================================================
.rdata$r:00000A8C
.rdata$r:00000A8C ; Segment type: Pure data
.rdata$r:00000A8C ; Segment permissions: Read
.rdata$r:00000A8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A8C                 assume cs:_rdata$r
.rdata$r:00000A8C                 ;org 0A8Ch
.rdata$r:00000A8C ; COMDAT (pick any)
.rdata$r:00000A8C                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00000A8C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00000A8C ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00000A8C                                         ; DATA XREF: .rdata:00000684o
.rdata$r:00000A8D                 db    0
.rdata$r:00000A8E                 db    0
.rdata$r:00000A8F                 db    0
.rdata$r:00000A90                 db  0Ch
.rdata$r:00000A91                 db    0
.rdata$r:00000A92                 db    0
.rdata$r:00000A93                 db    0
.rdata$r:00000A94                 db    0
.rdata$r:00000A95                 db    0
.rdata$r:00000A96                 db    0
.rdata$r:00000A97                 db    0
.rdata$r:00000A98                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00000A9C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A9C _rdata$r        ends
.rdata$r:00000A9C
.text:00000AA0 ; ===========================================================================
.text:00000AA0
.text:00000AA0 ; Segment type: Pure code
.text:00000AA0 ; Segment permissions: Read/Execute
.text:00000AA0 _text           segment para public 'CODE' use32
.text:00000AA0                 assume cs:_text
.text:00000AA0                 ;org 0AA0h
.text:00000AA0 ; COMDAT (pick any)
.text:00000AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AA0
.text:00000AA0 ; =============== S U B R O U T I N E =======================================
.text:00000AA0
.text:00000AA0 ; Attributes: bp-based frame
.text:00000AA0
.text:00000AA0 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:00000AA0                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000AA0 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000AA0                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000AA0                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00000AA0
.text:00000AA0 var_C           = dword ptr -0Ch
.text:00000AA0 var_8           = dword ptr -8
.text:00000AA0 var_4           = dword ptr -4
.text:00000AA0 this            = dword ptr  8
.text:00000AA0 Buf1            = dword ptr  0Ch
.text:00000AA0 arg_8           = dword ptr  10h
.text:00000AA0
.text:00000AA0                 push    ebp
.text:00000AA1                 mov     ebp, esp
.text:00000AA3                 sub     esp, 0Ch
.text:00000AA6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000AAD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ABB                 mov     eax, [ebp+arg_8]
.text:00000ABE                 mov     dword ptr [eax], 0
.text:00000AC4                 push    offset _IID_IUnknown ; Buf2
.text:00000AC9                 mov     ecx, [ebp+Buf1]
.text:00000ACC                 push    ecx             ; Buf1
.text:00000ACD                 call    ___@8           ; __(x,x)
.text:00000AD2                 test    eax, eax
.text:00000AD4                 jz      short loc_AE3
.text:00000AD6                 mov     edx, [ebp+arg_8]
.text:00000AD9                 mov     eax, [ebp+this]
.text:00000ADC                 mov     [edx], eax
.text:00000ADE                 jmp     loc_BA5
.text:00000AE3 ; ---------------------------------------------------------------------------
.text:00000AE3
.text:00000AE3 loc_AE3:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000AE3                 push    offset _IID_ICompressCoder ; Buf2
.text:00000AE8                 mov     ecx, [ebp+Buf1]
.text:00000AEB                 push    ecx             ; Buf1
.text:00000AEC                 call    ___@8           ; __(x,x)
.text:00000AF1                 test    eax, eax
.text:00000AF3                 jz      short loc_B02
.text:00000AF5                 mov     edx, [ebp+arg_8]
.text:00000AF8                 mov     eax, [ebp+this]
.text:00000AFB                 mov     [edx], eax
.text:00000AFD                 jmp     loc_BA5
.text:00000B02 ; ---------------------------------------------------------------------------
.text:00000B02
.text:00000B02 loc_B02:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:00000B02                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00000B07                 mov     ecx, [ebp+Buf1]
.text:00000B0A                 push    ecx             ; Buf1
.text:00000B0B                 call    ___@8           ; __(x,x)
.text:00000B10                 test    eax, eax
.text:00000B12                 jz      short loc_B36
.text:00000B14                 cmp     [ebp+this], 0
.text:00000B18                 jz      short loc_B25
.text:00000B1A                 mov     edx, [ebp+this]
.text:00000B1D                 add     edx, 4
.text:00000B20                 mov     [ebp+var_4], edx
.text:00000B23                 jmp     short loc_B2C
.text:00000B25 ; ---------------------------------------------------------------------------
.text:00000B25
.text:00000B25 loc_B25:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:00000B25                 mov     [ebp+var_4], 0
.text:00000B2C
.text:00000B2C loc_B2C:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00000B2C                 mov     eax, [ebp+arg_8]
.text:00000B2F                 mov     ecx, [ebp+var_4]
.text:00000B32                 mov     [eax], ecx
.text:00000B34                 jmp     short loc_BA5
.text:00000B36 ; ---------------------------------------------------------------------------
.text:00000B36
.text:00000B36 loc_B36:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00000B36                 push    offset _IID_ISequentialInStream ; Buf2
.text:00000B3B                 mov     edx, [ebp+Buf1]
.text:00000B3E                 push    edx             ; Buf1
.text:00000B3F                 call    ___@8           ; __(x,x)
.text:00000B44                 test    eax, eax
.text:00000B46                 jz      short loc_B6A
.text:00000B48                 cmp     [ebp+this], 0
.text:00000B4C                 jz      short loc_B59
.text:00000B4E                 mov     eax, [ebp+this]
.text:00000B51                 add     eax, 8
.text:00000B54                 mov     [ebp+var_8], eax
.text:00000B57                 jmp     short loc_B60
.text:00000B59 ; ---------------------------------------------------------------------------
.text:00000B59
.text:00000B59 loc_B59:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:00000B59                 mov     [ebp+var_8], 0
.text:00000B60
.text:00000B60 loc_B60:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:00000B60                 mov     ecx, [ebp+arg_8]
.text:00000B63                 mov     edx, [ebp+var_8]
.text:00000B66                 mov     [ecx], edx
.text:00000B68                 jmp     short loc_BA5
.text:00000B6A ; ---------------------------------------------------------------------------
.text:00000B6A
.text:00000B6A loc_B6A:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:00000B6A                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:00000B6F                 mov     eax, [ebp+Buf1]
.text:00000B72                 push    eax             ; Buf1
.text:00000B73                 call    ___@8           ; __(x,x)
.text:00000B78                 test    eax, eax
.text:00000B7A                 jz      short loc_B9E
.text:00000B7C                 cmp     [ebp+this], 0
.text:00000B80                 jz      short loc_B8D
.text:00000B82                 mov     ecx, [ebp+this]
.text:00000B85                 add     ecx, 0Ch
.text:00000B88                 mov     [ebp+var_C], ecx
.text:00000B8B                 jmp     short loc_B94
.text:00000B8D ; ---------------------------------------------------------------------------
.text:00000B8D
.text:00000B8D loc_B8D:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00000B8D                 mov     [ebp+var_C], 0
.text:00000B94
.text:00000B94 loc_B94:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:00000B94                 mov     edx, [ebp+arg_8]
.text:00000B97                 mov     eax, [ebp+var_C]
.text:00000B9A                 mov     [edx], eax
.text:00000B9C                 jmp     short loc_BA5
.text:00000B9E ; ---------------------------------------------------------------------------
.text:00000B9E
.text:00000B9E loc_B9E:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:00000B9E                 mov     eax, 80004002h
.text:00000BA3                 jmp     short loc_BB6
.text:00000BA5 ; ---------------------------------------------------------------------------
.text:00000BA5
.text:00000BA5 loc_BA5:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00000BA5                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00000BA5                 mov     ecx, [ebp+this]
.text:00000BA8                 mov     edx, [ecx+10h]
.text:00000BAB                 add     edx, 1
.text:00000BAE                 mov     eax, [ebp+this]
.text:00000BB1                 mov     [eax+10h], edx
.text:00000BB4                 xor     eax, eax
.text:00000BB6
.text:00000BB6 loc_BB6:                                ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00000BB6                 add     esp, 0Ch
.text:00000BB9                 cmp     ebp, esp
.text:00000BBB                 call    __RTC_CheckEsp
.text:00000BC0                 mov     esp, ebp
.text:00000BC2                 pop     ebp
.text:00000BC3                 retn    0Ch
.text:00000BC3 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000BC3
.text:00000BC3 ; ---------------------------------------------------------------------------
.text:00000BC6                 align 4
.text:00000BC6 _text           ends
.text:00000BC6
.text:00000BC8 ; ===========================================================================
.text:00000BC8
.text:00000BC8 ; Segment type: Pure code
.text:00000BC8 ; Segment permissions: Read/Execute
.text:00000BC8 _text           segment para public 'CODE' use32
.text:00000BC8                 assume cs:_text
.text:00000BC8                 ;org 0BC8h
.text:00000BC8 ; COMDAT (pick any)
.text:00000BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BC8
.text:00000BC8 ; =============== S U B R O U T I N E =======================================
.text:00000BC8
.text:00000BC8 ; Attributes: bp-based frame
.text:00000BC8
.text:00000BC8 ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00000BC8                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00000BC8 ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00000BC8                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00000BC8                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00000BC8
.text:00000BC8 var_4           = dword ptr -4
.text:00000BC8 this            = dword ptr  8
.text:00000BC8
.text:00000BC8                 push    ebp
.text:00000BC9                 mov     ebp, esp
.text:00000BCB                 push    ecx
.text:00000BCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BD3                 mov     eax, [ebp+this]
.text:00000BD6                 mov     ecx, [eax+10h]
.text:00000BD9                 add     ecx, 1
.text:00000BDC                 mov     [ebp+var_4], ecx
.text:00000BDF                 mov     edx, [ebp+this]
.text:00000BE2                 mov     eax, [ebp+var_4]
.text:00000BE5                 mov     [edx+10h], eax
.text:00000BE8                 mov     eax, [ebp+var_4]
.text:00000BEB                 mov     esp, ebp
.text:00000BED                 pop     ebp
.text:00000BEE                 retn    4
.text:00000BEE ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:00000BEE
.text:00000BEE ; ---------------------------------------------------------------------------
.text:00000BF1                 align 4
.text:00000BF1 _text           ends
.text:00000BF1
.text:00000BF4 ; ===========================================================================
.text:00000BF4
.text:00000BF4 ; Segment type: Pure code
.text:00000BF4 ; Segment permissions: Read/Execute
.text:00000BF4 _text           segment para public 'CODE' use32
.text:00000BF4                 assume cs:_text
.text:00000BF4                 ;org 0BF4h
.text:00000BF4 ; COMDAT (pick any)
.text:00000BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BF4
.text:00000BF4 ; =============== S U B R O U T I N E =======================================
.text:00000BF4
.text:00000BF4 ; Attributes: bp-based frame
.text:00000BF4
.text:00000BF4 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:00000BF4                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:00000BF4 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00000BF4                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:00000BF4                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:00000BF4
.text:00000BF4 var_10          = dword ptr -10h
.text:00000BF4 var_C           = dword ptr -0Ch
.text:00000BF4 var_8           = dword ptr -8
.text:00000BF4 var_4           = dword ptr -4
.text:00000BF4 this            = dword ptr  8
.text:00000BF4
.text:00000BF4                 push    ebp
.text:00000BF5                 mov     ebp, esp
.text:00000BF7                 sub     esp, 10h
.text:00000BFA                 mov     eax, 0CCCCCCCCh
.text:00000BFF                 mov     [ebp+var_10], eax
.text:00000C02                 mov     [ebp+var_C], eax
.text:00000C05                 mov     [ebp+var_8], eax
.text:00000C08                 mov     [ebp+var_4], eax
.text:00000C0B                 mov     eax, [ebp+this]
.text:00000C0E                 mov     ecx, [eax+10h]
.text:00000C11                 sub     ecx, 1
.text:00000C14                 mov     [ebp+var_C], ecx
.text:00000C17                 mov     edx, [ebp+this]
.text:00000C1A                 mov     eax, [ebp+var_C]
.text:00000C1D                 mov     [edx+10h], eax
.text:00000C20                 cmp     [ebp+var_C], 0
.text:00000C24                 jz      short loc_C2E
.text:00000C26                 mov     ecx, [ebp+this]
.text:00000C29                 mov     eax, [ecx+10h]
.text:00000C2C                 jmp     short loc_C58
.text:00000C2E ; ---------------------------------------------------------------------------
.text:00000C2E
.text:00000C2E loc_C2E:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:00000C2E                 mov     edx, [ebp+this]
.text:00000C31                 mov     [ebp+var_8], edx
.text:00000C34                 mov     eax, [ebp+var_8]
.text:00000C37                 mov     [ebp+var_4], eax
.text:00000C3A                 cmp     [ebp+var_4], 0
.text:00000C3E                 jz      short loc_C4F
.text:00000C40                 push    1
.text:00000C42                 mov     ecx, [ebp+var_4]
.text:00000C45                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:00000C4A                 mov     [ebp+var_10], eax
.text:00000C4D                 jmp     short loc_C56
.text:00000C4F ; ---------------------------------------------------------------------------
.text:00000C4F
.text:00000C4F loc_C4F:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:00000C4F                 mov     [ebp+var_10], 0
.text:00000C56
.text:00000C56 loc_C56:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:00000C56                 xor     eax, eax
.text:00000C58
.text:00000C58 loc_C58:                                ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:00000C58                 add     esp, 10h
.text:00000C5B                 cmp     ebp, esp
.text:00000C5D                 call    __RTC_CheckEsp
.text:00000C62                 mov     esp, ebp
.text:00000C64                 pop     ebp
.text:00000C65                 retn    4
.text:00000C65 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:00000C65
.text:00000C65 _text           ends
.text:00000C65
.text:00000C68 ; ===========================================================================
.text:00000C68
.text:00000C68 ; Segment type: Pure code
.text:00000C68 ; Segment permissions: Read/Execute
.text:00000C68 _text           segment para public 'CODE' use32
.text:00000C68                 assume cs:_text
.text:00000C68                 ;org 0C68h
.text:00000C68 ; COMDAT (pick any)
.text:00000C68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C68
.text:00000C68 ; =============== S U B R O U T I N E =======================================
.text:00000C68
.text:00000C68 ; Attributes: bp-based frame
.text:00000C68
.text:00000C68 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000C68                 public ___@8
.text:00000C68 ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00000C68                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00000C68
.text:00000C68 Buf1            = dword ptr  8
.text:00000C68 Buf2            = dword ptr  0Ch
.text:00000C68
.text:00000C68                 push    ebp
.text:00000C69                 mov     ebp, esp
.text:00000C6B                 mov     eax, [ebp+Buf2]
.text:00000C6E                 push    eax             ; Buf2
.text:00000C6F                 mov     ecx, [ebp+Buf1]
.text:00000C72                 push    ecx             ; Buf1
.text:00000C73                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000C78                 cmp     ebp, esp
.text:00000C7A                 call    __RTC_CheckEsp
.text:00000C7F                 pop     ebp
.text:00000C80                 retn    8
.text:00000C80 ___@8           endp
.text:00000C80
.text:00000C80 ; ---------------------------------------------------------------------------
.text:00000C83                 align 4
.text:00000C83 _text           ends
.text:00000C83
.text:00000C84 ; ===========================================================================
.text:00000C84
.text:00000C84 ; Segment type: Pure code
.text:00000C84 ; Segment permissions: Read/Execute
.text:00000C84 _text           segment para public 'CODE' use32
.text:00000C84                 assume cs:_text
.text:00000C84                 ;org 0C84h
.text:00000C84 ; COMDAT (pick any)
.text:00000C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C84
.text:00000C84 ; =============== S U B R O U T I N E =======================================
.text:00000C84
.text:00000C84 ; Attributes: bp-based frame
.text:00000C84
.text:00000C84 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000C84                 public _IsEqualGUID@8
.text:00000C84 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000C84
.text:00000C84 Buf1            = dword ptr  8
.text:00000C84 Buf2            = dword ptr  0Ch
.text:00000C84
.text:00000C84                 push    ebp
.text:00000C85                 mov     ebp, esp
.text:00000C87                 push    10h             ; Size
.text:00000C89                 mov     eax, [ebp+Buf2]
.text:00000C8C                 push    eax             ; Buf2
.text:00000C8D                 mov     ecx, [ebp+Buf1]
.text:00000C90                 push    ecx             ; Buf1
.text:00000C91                 call    _memcmp
.text:00000C96                 add     esp, 0Ch
.text:00000C99                 neg     eax
.text:00000C9B                 sbb     eax, eax
.text:00000C9D                 add     eax, 1
.text:00000CA0                 cmp     ebp, esp
.text:00000CA2                 call    __RTC_CheckEsp
.text:00000CA7                 pop     ebp
.text:00000CA8                 retn    8
.text:00000CA8 _IsEqualGUID@8  endp
.text:00000CA8
.text:00000CA8 ; ---------------------------------------------------------------------------
.text:00000CAB                 align 4
.text:00000CAB _text           ends
.text:00000CAB
.text:00000CAC ; ===========================================================================
.text:00000CAC
.text:00000CAC ; Segment type: Pure code
.text:00000CAC ; Segment permissions: Read/Execute
.text:00000CAC _text           segment para public 'CODE' use32
.text:00000CAC                 assume cs:_text
.text:00000CAC                 ;org 0CACh
.text:00000CAC ; COMDAT (pick any)
.text:00000CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CAC
.text:00000CAC ; =============== S U B R O U T I N E =======================================
.text:00000CAC
.text:00000CAC ; Attributes: bp-based frame
.text:00000CAC
.text:00000CAC ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:00000CAC                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:00000CAC ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:00000CAC                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:00000CAC
.text:00000CAC var_4           = dword ptr -4
.text:00000CAC arg_0           = dword ptr  8
.text:00000CAC
.text:00000CAC                 push    ebp
.text:00000CAD                 mov     ebp, esp
.text:00000CAF                 push    ecx
.text:00000CB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CB7                 mov     [ebp+var_4], ecx
.text:00000CBA                 mov     ecx, [ebp+var_4] ; this
.text:00000CBD                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:00000CC2                 mov     eax, [ebp+arg_0]
.text:00000CC5                 and     eax, 1
.text:00000CC8                 jz      short loc_CD6
.text:00000CCA                 mov     ecx, [ebp+var_4]
.text:00000CCD                 push    ecx             ; void *
.text:00000CCE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000CD3                 add     esp, 4
.text:00000CD6
.text:00000CD6 loc_CD6:                                ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000CD6                 mov     eax, [ebp+var_4]
.text:00000CD9                 add     esp, 4
.text:00000CDC                 cmp     ebp, esp
.text:00000CDE                 call    __RTC_CheckEsp
.text:00000CE3                 mov     esp, ebp
.text:00000CE5                 pop     ebp
.text:00000CE6                 retn    4
.text:00000CE6 ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:00000CE6
.text:00000CE6 ; ---------------------------------------------------------------------------
.text:00000CE9                 align 4
.text:00000CE9 _text           ends
.text:00000CE9
.text$x:00000CEC ; ===========================================================================
.text$x:00000CEC
.text$x:00000CEC ; Segment type: Pure code
.text$x:00000CEC ; Segment permissions: Read/Execute
.text$x:00000CEC _text$x         segment para public 'CODE' use32
.text$x:00000CEC                 assume cs:_text$x
.text$x:00000CEC                 ;org 0CECh
.text$x:00000CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000CEC
.text$x:00000CEC ; =============== S U B R O U T I N E =======================================
.text$x:00000CEC
.text$x:00000CEC
.text$x:00000CEC __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 proc near
.text$x:00000CEC                                         ; DATA XREF: .xdata$x:00000D4Co
.text$x:00000CEC                 mov     eax, [ebp-20h]
.text$x:00000CEF                 push    eax             ; void *
.text$x:00000CF0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000CF5                 pop     ecx
.text$x:00000CF6                 retn
.text$x:00000CF6 __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0 endp
.text$x:00000CF6
.text$x:00000CF7
.text$x:00000CF7 ; =============== S U B R O U T I N E =======================================
.text$x:00000CF7
.text$x:00000CF7
.text$x:00000CF7 __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 proc near
.text$x:00000CF7                                         ; DATA XREF: .xdata$x:00000D54o
.text$x:00000CF7                 lea     ecx, [ebp-14h]
.text$x:00000CFA                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00000CFA __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1 endp
.text$x:00000CFA
.text$x:00000CFF
.text$x:00000CFF ; =============== S U B R O U T I N E =======================================
.text$x:00000CFF
.text$x:00000CFF
.text$x:00000CFF __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text$x:00000CFF                                         ; DATA XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+5o
.text$x:00000CFF
.text$x:00000CFF arg_4           = dword ptr  8
.text$x:00000CFF
.text$x:00000CFF                 mov     edx, [esp+arg_4]
.text$x:00000D03                 lea     eax, [edx+0Ch]
.text$x:00000D06                 mov     ecx, [edx-28h]
.text$x:00000D09                 xor     ecx, eax
.text$x:00000D0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000D10                 mov     eax, offset __ehfuncinfo$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text$x:00000D15                 jmp     ___CxxFrameHandler3
.text$x:00000D15 __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text$x:00000D15
.text$x:00000D1A
.text$x:00000D1A ; =============== S U B R O U T I N E =======================================
.text$x:00000D1A
.text$x:00000D1A
.text$x:00000D1A __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$0 proc near
.text$x:00000D1A                                         ; DATA XREF: .xdata$x:00000D80o
.text$x:00000D1A                 mov     eax, [ebp-28h]
.text$x:00000D1D                 push    eax             ; void *
.text$x:00000D1E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00000D23                 pop     ecx
.text$x:00000D24                 retn
.text$x:00000D24 __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$0 endp
.text$x:00000D24
.text$x:00000D25
.text$x:00000D25 ; =============== S U B R O U T I N E =======================================
.text$x:00000D25
.text$x:00000D25
.text$x:00000D25 __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$1 proc near
.text$x:00000D25                                         ; DATA XREF: .xdata$x:00000D88o
.text$x:00000D25                 lea     ecx, [ebp-18h]
.text$x:00000D28                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00000D28 __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$1 endp
.text$x:00000D28
.text$x:00000D2D
.text$x:00000D2D ; =============== S U B R O U T I N E =======================================
.text$x:00000D2D
.text$x:00000D2D
.text$x:00000D2D __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z proc near
.text$x:00000D2D                                         ; DATA XREF: NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+5o
.text$x:00000D2D
.text$x:00000D2D arg_4           = dword ptr  8
.text$x:00000D2D
.text$x:00000D2D                 mov     edx, [esp+arg_4]
.text$x:00000D31                 lea     eax, [edx+0Ch]
.text$x:00000D34                 mov     ecx, [edx-40h]
.text$x:00000D37                 xor     ecx, eax
.text$x:00000D39                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000D3E                 mov     eax, offset __ehfuncinfo$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z
.text$x:00000D43                 jmp     ___CxxFrameHandler3
.text$x:00000D43 __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z endp
.text$x:00000D43
.text$x:00000D43 _text$x         ends
.text$x:00000D43
.xdata$x:00000D48 ; ===========================================================================
.xdata$x:00000D48
.xdata$x:00000D48 ; Segment type: Pure data
.xdata$x:00000D48 ; Segment permissions: Read
.xdata$x:00000D48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000D48                 assume cs:_xdata$x
.xdata$x:00000D48                 ;org 0D48h
.xdata$x:00000D48 __unwindtable$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000D48                                         ; DATA XREF: .xdata$x:00000D60o
.xdata$x:00000D49                 db 0FFh
.xdata$x:00000D4A                 db 0FFh
.xdata$x:00000D4B                 db 0FFh
.xdata$x:00000D4C                 dd offset __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
.xdata$x:00000D50                 db 0FFh
.xdata$x:00000D51                 db 0FFh
.xdata$x:00000D52                 db 0FFh
.xdata$x:00000D53                 db 0FFh
.xdata$x:00000D54                 dd offset __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$1
.xdata$x:00000D58 __ehfuncinfo$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00000D58                                         ; DATA XREF: __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+11o
.xdata$x:00000D59                 db    5
.xdata$x:00000D5A                 db  93h ; ô
.xdata$x:00000D5B                 db  19h
.xdata$x:00000D5C                 db    2
.xdata$x:00000D5D                 db    0
.xdata$x:00000D5E                 db    0
.xdata$x:00000D5F                 db    0
.xdata$x:00000D60                 dd offset __unwindtable$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.xdata$x:00000D64                 db    0
.xdata$x:00000D65                 db    0
.xdata$x:00000D66                 db    0
.xdata$x:00000D67                 db    0
.xdata$x:00000D68                 db    0
.xdata$x:00000D69                 db    0
.xdata$x:00000D6A                 db    0
.xdata$x:00000D6B                 db    0
.xdata$x:00000D6C                 db    0
.xdata$x:00000D6D                 db    0
.xdata$x:00000D6E                 db    0
.xdata$x:00000D6F                 db    0
.xdata$x:00000D70                 db    0
.xdata$x:00000D71                 db    0
.xdata$x:00000D72                 db    0
.xdata$x:00000D73                 db    0
.xdata$x:00000D74                 db    0
.xdata$x:00000D75                 db    0
.xdata$x:00000D76                 db    0
.xdata$x:00000D77                 db    0
.xdata$x:00000D78                 db    1
.xdata$x:00000D79                 db    0
.xdata$x:00000D7A                 db    0
.xdata$x:00000D7B                 db    0
.xdata$x:00000D7C __unwindtable$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000D7C                                         ; DATA XREF: .xdata$x:00000D94o
.xdata$x:00000D7D                 db 0FFh
.xdata$x:00000D7E                 db 0FFh
.xdata$x:00000D7F                 db 0FFh
.xdata$x:00000D80                 dd offset __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$0
.xdata$x:00000D84                 db 0FFh
.xdata$x:00000D85                 db 0FFh
.xdata$x:00000D86                 db 0FFh
.xdata$x:00000D87                 db 0FFh
.xdata$x:00000D88                 dd offset __unwindfunclet$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z$1
.xdata$x:00000D8C __ehfuncinfo$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00000D8C                                         ; DATA XREF: __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z+11o
.xdata$x:00000D8D                 db    5
.xdata$x:00000D8E                 db  93h ; ô
.xdata$x:00000D8F                 db  19h
.xdata$x:00000D90                 db    2
.xdata$x:00000D91                 db    0
.xdata$x:00000D92                 db    0
.xdata$x:00000D93                 db    0
.xdata$x:00000D94                 dd offset __unwindtable$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z
.xdata$x:00000D98                 db    0
.xdata$x:00000D99                 db    0
.xdata$x:00000D9A                 db    0
.xdata$x:00000D9B                 db    0
.xdata$x:00000D9C                 db    0
.xdata$x:00000D9D                 db    0
.xdata$x:00000D9E                 db    0
.xdata$x:00000D9F                 db    0
.xdata$x:00000DA0                 db    0
.xdata$x:00000DA1                 db    0
.xdata$x:00000DA2                 db    0
.xdata$x:00000DA3                 db    0
.xdata$x:00000DA4                 db    0
.xdata$x:00000DA5                 db    0
.xdata$x:00000DA6                 db    0
.xdata$x:00000DA7                 db    0
.xdata$x:00000DA8                 db    0
.xdata$x:00000DA9                 db    0
.xdata$x:00000DAA                 db    0
.xdata$x:00000DAB                 db    0
.xdata$x:00000DAC                 db    1
.xdata$x:00000DAD                 db    0
.xdata$x:00000DAE                 db    0
.xdata$x:00000DAF                 db    0
.xdata$x:00000DAF _xdata$x        ends
.xdata$x:00000DAF
.text:00000DB0 ; ===========================================================================
.text:00000DB0
.text:00000DB0 ; Segment type: Pure code
.text:00000DB0 ; Segment permissions: Read/Execute
.text:00000DB0 _text           segment para public 'CODE' use32
.text:00000DB0                 assume cs:_text
.text:00000DB0                 ;org 0DB0h
.text:00000DB0 ; COMDAT (pick any)
.text:00000DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DB0
.text:00000DB0 ; =============== S U B R O U T I N E =======================================
.text:00000DB0
.text:00000DB0 ; Attributes: bp-based frame
.text:00000DB0
.text:00000DB0 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00000DB0                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00000DB0 ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:00000DB0                                         ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+60p
.text:00000DB0                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+53p
.text:00000DB0
.text:00000DB0 var_4           = dword ptr -4
.text:00000DB0
.text:00000DB0                 push    ebp
.text:00000DB1                 mov     ebp, esp
.text:00000DB3                 push    ecx
.text:00000DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DBB                 mov     [ebp+var_4], ecx
.text:00000DBE                 mov     ecx, [ebp+var_4] ; this
.text:00000DC1                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000DC6                 mov     ecx, [ebp+var_4]
.text:00000DC9                 add     ecx, 4          ; this
.text:00000DCC                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00000DD1                 mov     ecx, [ebp+var_4]
.text:00000DD4                 add     ecx, 8          ; this
.text:00000DD7                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000DDC                 mov     ecx, [ebp+var_4]
.text:00000DDF                 add     ecx, 0Ch        ; this
.text:00000DE2                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00000DE7                 mov     ecx, [ebp+var_4]
.text:00000DEA                 add     ecx, 10h        ; this
.text:00000DED                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000DF2                 mov     eax, [ebp+var_4]
.text:00000DF5                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00000DFB                 mov     ecx, [ebp+var_4]
.text:00000DFE                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00000E05                 mov     edx, [ebp+var_4]
.text:00000E08                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:00000E0F                 mov     eax, [ebp+var_4]
.text:00000E12                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00000E19                 mov     ecx, [ebp+var_4]
.text:00000E1C                 mov     dword ptr [ecx+14h], 0
.text:00000E23                 mov     ecx, [ebp+var_4]
.text:00000E26                 add     ecx, 18h
.text:00000E29                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000E2E                 mov     edx, [ebp+var_4]
.text:00000E31                 mov     dword ptr [edx+20h], 0
.text:00000E38                 mov     dword ptr [edx+24h], 0
.text:00000E3F                 mov     eax, [ebp+var_4]
.text:00000E42                 add     esp, 4
.text:00000E45                 cmp     ebp, esp
.text:00000E47                 call    __RTC_CheckEsp
.text:00000E4C                 mov     esp, ebp
.text:00000E4E                 pop     ebp
.text:00000E4F                 retn
.text:00000E4F ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:00000E4F
.text:00000E4F _text           ends
.text:00000E4F
.text:00000E50 ; ===========================================================================
.text:00000E50
.text:00000E50 ; Segment type: Pure code
.text:00000E50 ; Segment permissions: Read/Execute
.text:00000E50 _text           segment para public 'CODE' use32
.text:00000E50                 assume cs:_text
.text:00000E50                 ;org 0E50h
.text:00000E50 ; COMDAT (pick any)
.text:00000E50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E50
.text:00000E50 ; =============== S U B R O U T I N E =======================================
.text:00000E50
.text:00000E50 ; Attributes: bp-based frame
.text:00000E50
.text:00000E50 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000E50                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000E50 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+3Dp
.text:00000E50
.text:00000E50 var_4           = dword ptr -4
.text:00000E50
.text:00000E50                 push    ebp
.text:00000E51                 mov     ebp, esp
.text:00000E53                 push    ecx
.text:00000E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E5B                 mov     [ebp+var_4], ecx
.text:00000E5E                 mov     eax, [ebp+var_4]
.text:00000E61                 mov     dword ptr [eax], 0
.text:00000E67                 mov     eax, [ebp+var_4]
.text:00000E6A                 mov     esp, ebp
.text:00000E6C                 pop     ebp
.text:00000E6D                 retn
.text:00000E6D ??0CMyUnknownImp@@QAE@XZ endp
.text:00000E6D
.text:00000E6D ; ---------------------------------------------------------------------------
.text:00000E6E                 align 10h
.text:00000E6E _text           ends
.text:00000E6E
.text:00000E70 ; ===========================================================================
.text:00000E70
.text:00000E70 ; Segment type: Pure code
.text:00000E70 ; Segment permissions: Read/Execute
.text:00000E70 _text           segment para public 'CODE' use32
.text:00000E70                 assume cs:_text
.text:00000E70                 ;org 0E70h
.text:00000E70 ; COMDAT (pick any)
.text:00000E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E70
.text:00000E70 ; =============== S U B R O U T I N E =======================================
.text:00000E70
.text:00000E70 ; Attributes: bp-based frame
.text:00000E70
.text:00000E70 ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00000E70                 public ??0ICompressCoder@@QAE@XZ
.text:00000E70 ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:00000E70
.text:00000E70 var_4           = dword ptr -4
.text:00000E70
.text:00000E70                 push    ebp
.text:00000E71                 mov     ebp, esp
.text:00000E73                 push    ecx
.text:00000E74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E7B                 mov     [ebp+var_4], ecx
.text:00000E7E                 mov     ecx, [ebp+var_4]
.text:00000E81                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000E86                 mov     eax, [ebp+var_4]
.text:00000E89                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00000E8F                 mov     eax, [ebp+var_4]
.text:00000E92                 add     esp, 4
.text:00000E95                 cmp     ebp, esp
.text:00000E97                 call    __RTC_CheckEsp
.text:00000E9C                 mov     esp, ebp
.text:00000E9E                 pop     ebp
.text:00000E9F                 retn
.text:00000E9F ??0ICompressCoder@@QAE@XZ endp
.text:00000E9F
.text:00000E9F _text           ends
.text:00000E9F
.rdata:00000EA0 ; ===========================================================================
.rdata:00000EA0
.rdata:00000EA0 ; Segment type: Pure data
.rdata:00000EA0 ; Segment permissions: Read
.rdata:00000EA0 _rdata          segment dword public 'DATA' use32
.rdata:00000EA0                 assume cs:_rdata
.rdata:00000EA0                 ;org 0EA0h
.rdata:00000EA0 ; COMDAT (pick largest)
.rdata:00000EA0                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000EA4                 public ??_7ICompressCoder@@6B@
.rdata:00000EA4 ; const ICompressCoder::`vftable'
.rdata:00000EA4 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000EA4                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000EA8                 dd offset __purecall
.rdata:00000EAC                 dd offset __purecall
.rdata:00000EB0                 dd offset __purecall
.rdata:00000EB0 _rdata          ends
.rdata:00000EB0
.rdata$r:00000EB4 ; ===========================================================================
.rdata$r:00000EB4
.rdata$r:00000EB4 ; Segment type: Pure data
.rdata$r:00000EB4 ; Segment permissions: Read
.rdata$r:00000EB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000EB4                 assume cs:_rdata$r
.rdata$r:00000EB4                 ;org 0EB4h
.rdata$r:00000EB4 ; COMDAT (pick any)
.rdata$r:00000EB4                 public ??_R4ICompressCoder@@6B@
.rdata$r:00000EB4 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00000EB4 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000EA0o
.rdata$r:00000EB5                 db    0
.rdata$r:00000EB6                 db    0
.rdata$r:00000EB7                 db    0
.rdata$r:00000EB8                 db    0
.rdata$r:00000EB9                 db    0
.rdata$r:00000EBA                 db    0
.rdata$r:00000EBB                 db    0
.rdata$r:00000EBC                 db    0
.rdata$r:00000EBD                 db    0
.rdata$r:00000EBE                 db    0
.rdata$r:00000EBF                 db    0
.rdata$r:00000EC0                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000EC4                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000EC4 _rdata$r        ends
.rdata$r:00000EC4
.text:00000EC8 ; ===========================================================================
.text:00000EC8
.text:00000EC8 ; Segment type: Pure code
.text:00000EC8 ; Segment permissions: Read/Execute
.text:00000EC8 _text           segment para public 'CODE' use32
.text:00000EC8                 assume cs:_text
.text:00000EC8                 ;org 0EC8h
.text:00000EC8 ; COMDAT (pick any)
.text:00000EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EC8
.text:00000EC8 ; =============== S U B R O U T I N E =======================================
.text:00000EC8
.text:00000EC8 ; Attributes: bp-based frame
.text:00000EC8
.text:00000EC8 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:00000EC8                 public ??0ICompressSetInStream@@QAE@XZ
.text:00000EC8 ??0ICompressSetInStream@@QAE@XZ proc near
.text:00000EC8                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:00000EC8
.text:00000EC8 var_4           = dword ptr -4
.text:00000EC8
.text:00000EC8                 push    ebp
.text:00000EC9                 mov     ebp, esp
.text:00000ECB                 push    ecx
.text:00000ECC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ED3                 mov     [ebp+var_4], ecx
.text:00000ED6                 mov     ecx, [ebp+var_4]
.text:00000ED9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000EDE                 mov     eax, [ebp+var_4]
.text:00000EE1                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00000EE7                 mov     eax, [ebp+var_4]
.text:00000EEA                 add     esp, 4
.text:00000EED                 cmp     ebp, esp
.text:00000EEF                 call    __RTC_CheckEsp
.text:00000EF4                 mov     esp, ebp
.text:00000EF6                 pop     ebp
.text:00000EF7                 retn
.text:00000EF7 ??0ICompressSetInStream@@QAE@XZ endp
.text:00000EF7
.text:00000EF7 _text           ends
.text:00000EF7
.rdata:00000EF8 ; ===========================================================================
.rdata:00000EF8
.rdata:00000EF8 ; Segment type: Pure data
.rdata:00000EF8 ; Segment permissions: Read
.rdata:00000EF8 _rdata          segment dword public 'DATA' use32
.rdata:00000EF8                 assume cs:_rdata
.rdata:00000EF8                 ;org 0EF8h
.rdata:00000EF8 ; COMDAT (pick largest)
.rdata:00000EF8                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00000EFC                 public ??_7ICompressSetInStream@@6B@
.rdata:00000EFC ; const ICompressSetInStream::`vftable'
.rdata:00000EFC ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00000EFC                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:00000F00                 dd offset __purecall
.rdata:00000F04                 dd offset __purecall
.rdata:00000F08                 dd offset __purecall
.rdata:00000F0C                 dd offset __purecall
.rdata:00000F0C _rdata          ends
.rdata:00000F0C
.rdata$r:00000F10 ; ===========================================================================
.rdata$r:00000F10
.rdata$r:00000F10 ; Segment type: Pure data
.rdata$r:00000F10 ; Segment permissions: Read
.rdata$r:00000F10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F10                 assume cs:_rdata$r
.rdata$r:00000F10                 ;org 0F10h
.rdata$r:00000F10 ; COMDAT (pick any)
.rdata$r:00000F10                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:00000F10 ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:00000F10 ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00000EF8o
.rdata$r:00000F11                 db    0
.rdata$r:00000F12                 db    0
.rdata$r:00000F13                 db    0
.rdata$r:00000F14                 db    0
.rdata$r:00000F15                 db    0
.rdata$r:00000F16                 db    0
.rdata$r:00000F17                 db    0
.rdata$r:00000F18                 db    0
.rdata$r:00000F19                 db    0
.rdata$r:00000F1A                 db    0
.rdata$r:00000F1B                 db    0
.rdata$r:00000F1C                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00000F20                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F20 _rdata$r        ends
.rdata$r:00000F20
.text:00000F24 ; ===========================================================================
.text:00000F24
.text:00000F24 ; Segment type: Pure code
.text:00000F24 ; Segment permissions: Read/Execute
.text:00000F24 _text           segment para public 'CODE' use32
.text:00000F24                 assume cs:_text
.text:00000F24                 ;org 0F24h
.text:00000F24 ; COMDAT (pick any)
.text:00000F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F24
.text:00000F24 ; =============== S U B R O U T I N E =======================================
.text:00000F24
.text:00000F24 ; Attributes: bp-based frame
.text:00000F24
.text:00000F24 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00000F24                 public ??0ISequentialInStream@@QAE@XZ
.text:00000F24 ??0ISequentialInStream@@QAE@XZ proc near
.text:00000F24                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:00000F24
.text:00000F24 var_4           = dword ptr -4
.text:00000F24
.text:00000F24                 push    ebp
.text:00000F25                 mov     ebp, esp
.text:00000F27                 push    ecx
.text:00000F28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F2F                 mov     [ebp+var_4], ecx
.text:00000F32                 mov     ecx, [ebp+var_4]
.text:00000F35                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000F3A                 mov     eax, [ebp+var_4]
.text:00000F3D                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00000F43                 mov     eax, [ebp+var_4]
.text:00000F46                 add     esp, 4
.text:00000F49                 cmp     ebp, esp
.text:00000F4B                 call    __RTC_CheckEsp
.text:00000F50                 mov     esp, ebp
.text:00000F52                 pop     ebp
.text:00000F53                 retn
.text:00000F53 ??0ISequentialInStream@@QAE@XZ endp
.text:00000F53
.text:00000F53 _text           ends
.text:00000F53
.rdata:00000F54 ; ===========================================================================
.rdata:00000F54
.rdata:00000F54 ; Segment type: Pure data
.rdata:00000F54 ; Segment permissions: Read
.rdata:00000F54 _rdata          segment dword public 'DATA' use32
.rdata:00000F54                 assume cs:_rdata
.rdata:00000F54                 ;org 0F54h
.rdata:00000F54 ; COMDAT (pick largest)
.rdata:00000F54                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00000F58                 public ??_7ISequentialInStream@@6B@
.rdata:00000F58 ; const ISequentialInStream::`vftable'
.rdata:00000F58 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00000F58                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00000F5C                 dd offset __purecall
.rdata:00000F60                 dd offset __purecall
.rdata:00000F64                 dd offset __purecall
.rdata:00000F64 _rdata          ends
.rdata:00000F64
.rdata$r:00000F68 ; ===========================================================================
.rdata$r:00000F68
.rdata$r:00000F68 ; Segment type: Pure data
.rdata$r:00000F68 ; Segment permissions: Read
.rdata$r:00000F68 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000F68                 assume cs:_rdata$r
.rdata$r:00000F68                 ;org 0F68h
.rdata$r:00000F68 ; COMDAT (pick any)
.rdata$r:00000F68                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00000F68 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00000F68 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00000F54o
.rdata$r:00000F69                 db    0
.rdata$r:00000F6A                 db    0
.rdata$r:00000F6B                 db    0
.rdata$r:00000F6C                 db    0
.rdata$r:00000F6D                 db    0
.rdata$r:00000F6E                 db    0
.rdata$r:00000F6F                 db    0
.rdata$r:00000F70                 db    0
.rdata$r:00000F71                 db    0
.rdata$r:00000F72                 db    0
.rdata$r:00000F73                 db    0
.rdata$r:00000F74                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000F78                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000F78 _rdata$r        ends
.rdata$r:00000F78
.text:00000F7C ; ===========================================================================
.text:00000F7C
.text:00000F7C ; Segment type: Pure code
.text:00000F7C ; Segment permissions: Read/Execute
.text:00000F7C _text           segment para public 'CODE' use32
.text:00000F7C                 assume cs:_text
.text:00000F7C                 ;org 0F7Ch
.text:00000F7C ; COMDAT (pick any)
.text:00000F7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F7C
.text:00000F7C ; =============== S U B R O U T I N E =======================================
.text:00000F7C
.text:00000F7C ; Attributes: bp-based frame
.text:00000F7C
.text:00000F7C ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00000F7C                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00000F7C ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00000F7C                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:00000F7C
.text:00000F7C var_4           = dword ptr -4
.text:00000F7C
.text:00000F7C                 push    ebp
.text:00000F7D                 mov     ebp, esp
.text:00000F7F                 push    ecx
.text:00000F80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F87                 mov     [ebp+var_4], ecx
.text:00000F8A                 mov     ecx, [ebp+var_4]
.text:00000F8D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000F92                 mov     eax, [ebp+var_4]
.text:00000F95                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:00000F9B                 mov     eax, [ebp+var_4]
.text:00000F9E                 add     esp, 4
.text:00000FA1                 cmp     ebp, esp
.text:00000FA3                 call    __RTC_CheckEsp
.text:00000FA8                 mov     esp, ebp
.text:00000FAA                 pop     ebp
.text:00000FAB                 retn
.text:00000FAB ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:00000FAB
.text:00000FAB _text           ends
.text:00000FAB
.rdata:00000FAC ; ===========================================================================
.rdata:00000FAC
.rdata:00000FAC ; Segment type: Pure data
.rdata:00000FAC ; Segment permissions: Read
.rdata:00000FAC _rdata          segment dword public 'DATA' use32
.rdata:00000FAC                 assume cs:_rdata
.rdata:00000FAC                 ;org 0FACh
.rdata:00000FAC ; COMDAT (pick largest)
.rdata:00000FAC                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00000FB0                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00000FB0 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00000FB0 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00000FB0                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00000FB4                 dd offset __purecall
.rdata:00000FB8                 dd offset __purecall
.rdata:00000FBC                 dd offset __purecall
.rdata:00000FBC _rdata          ends
.rdata:00000FBC
.rdata$r:00000FC0 ; ===========================================================================
.rdata$r:00000FC0
.rdata$r:00000FC0 ; Segment type: Pure data
.rdata$r:00000FC0 ; Segment permissions: Read
.rdata$r:00000FC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000FC0                 assume cs:_rdata$r
.rdata$r:00000FC0                 ;org 0FC0h
.rdata$r:00000FC0 ; COMDAT (pick any)
.rdata$r:00000FC0                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00000FC0 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00000FC0 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00000FC0                                         ; DATA XREF: .rdata:00000FACo
.rdata$r:00000FC1                 db    0
.rdata$r:00000FC2                 db    0
.rdata$r:00000FC3                 db    0
.rdata$r:00000FC4                 db    0
.rdata$r:00000FC5                 db    0
.rdata$r:00000FC6                 db    0
.rdata$r:00000FC7                 db    0
.rdata$r:00000FC8                 db    0
.rdata$r:00000FC9                 db    0
.rdata$r:00000FCA                 db    0
.rdata$r:00000FCB                 db    0
.rdata$r:00000FCC                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00000FD0                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000FD0 _rdata$r        ends
.rdata$r:00000FD0
.text:00000FD4 ; ===========================================================================
.text:00000FD4
.text:00000FD4 ; Segment type: Pure code
.text:00000FD4 ; Segment permissions: Read/Execute
.text:00000FD4 _text           segment para public 'CODE' use32
.text:00000FD4                 assume cs:_text
.text:00000FD4                 ;org 0FD4h
.text:00000FD4 ; COMDAT (pick any)
.text:00000FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FD4
.text:00000FD4 ; =============== S U B R O U T I N E =======================================
.text:00000FD4
.text:00000FD4 ; Attributes: bp-based frame
.text:00000FD4
.text:00000FD4 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000FD4                 public ??0IUnknown@@QAE@XZ
.text:00000FD4 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00000FD4                                         ; ICompressSetInStream::ICompressSetInStream(void)+11p ...
.text:00000FD4
.text:00000FD4 var_4           = dword ptr -4
.text:00000FD4
.text:00000FD4                 push    ebp
.text:00000FD5                 mov     ebp, esp
.text:00000FD7                 push    ecx
.text:00000FD8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FDF                 mov     [ebp+var_4], ecx
.text:00000FE2                 mov     eax, [ebp+var_4]
.text:00000FE5                 mov     esp, ebp
.text:00000FE7                 pop     ebp
.text:00000FE8                 retn
.text:00000FE8 ??0IUnknown@@QAE@XZ endp
.text:00000FE8
.text:00000FE8 ; ---------------------------------------------------------------------------
.text:00000FE9                 align 4
.text:00000FE9 _text           ends
.text:00000FE9
.text:00000FEC ; ===========================================================================
.text:00000FEC
.text:00000FEC ; Segment type: Pure code
.text:00000FEC ; Segment permissions: Read/Execute
.text:00000FEC _text           segment para public 'CODE' use32
.text:00000FEC                 assume cs:_text
.text:00000FEC                 ;org 0FECh
.text:00000FEC ; COMDAT (pick any)
.text:00000FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FEC
.text:00000FEC ; =============== S U B R O U T I N E =======================================
.text:00000FEC
.text:00000FEC ; Attributes: bp-based frame
.text:00000FEC
.text:00000FEC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00000FEC                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00000FEC ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00000FEC                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+79p
.text:00000FEC
.text:00000FEC var_4           = dword ptr -4
.text:00000FEC
.text:00000FEC                 push    ebp
.text:00000FED                 mov     ebp, esp
.text:00000FEF                 push    ecx
.text:00000FF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FF7                 mov     [ebp+var_4], ecx
.text:00000FFA                 mov     eax, [ebp+var_4]
.text:00000FFD                 mov     dword ptr [eax], 0
.text:00001003                 mov     eax, [ebp+var_4]
.text:00001006                 mov     esp, ebp
.text:00001008                 pop     ebp
.text:00001009                 retn
.text:00001009 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00001009
.text:00001009 ; ---------------------------------------------------------------------------
.text:0000100A                 align 4
.text:0000100A _text           ends
.text:0000100A
.text:0000100C ; ===========================================================================
.text:0000100C
.text:0000100C ; Segment type: Pure code
.text:0000100C ; Segment permissions: Read/Execute
.text:0000100C _text           segment para public 'CODE' use32
.text:0000100C                 assume cs:_text
.text:0000100C                 ;org 100Ch
.text:0000100C ; COMDAT (pick any)
.text:0000100C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000100C
.text:0000100C ; =============== S U B R O U T I N E =======================================
.text:0000100C
.text:0000100C ; Attributes: bp-based frame
.text:0000100C
.text:0000100C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:0000100C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000100C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000100C                                         ; CODE XREF: NCompress::CCopyCoder::~CCopyCoder(void)+47p
.text:0000100C
.text:0000100C var_4           = dword ptr -4
.text:0000100C
.text:0000100C                 push    ebp
.text:0000100D                 mov     ebp, esp
.text:0000100F                 push    ecx
.text:00001010                 push    esi
.text:00001011                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001018                 mov     [ebp+var_4], ecx
.text:0000101B                 mov     eax, [ebp+var_4]
.text:0000101E                 cmp     dword ptr [eax], 0
.text:00001021                 jz      short loc_103E
.text:00001023                 mov     ecx, [ebp+var_4]
.text:00001026                 mov     edx, [ecx]
.text:00001028                 mov     eax, [ebp+var_4]
.text:0000102B                 mov     ecx, [eax]
.text:0000102D                 mov     edx, [edx]
.text:0000102F                 mov     esi, esp
.text:00001031                 push    ecx
.text:00001032                 mov     eax, [edx+8]
.text:00001035                 call    eax
.text:00001037                 cmp     esi, esp
.text:00001039                 call    __RTC_CheckEsp
.text:0000103E
.text:0000103E loc_103E:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000103E                 pop     esi
.text:0000103F                 add     esp, 4
.text:00001042                 cmp     ebp, esp
.text:00001044                 call    __RTC_CheckEsp
.text:00001049                 mov     esp, ebp
.text:0000104B                 pop     ebp
.text:0000104C                 retn
.text:0000104C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:0000104C
.text:0000104C ; ---------------------------------------------------------------------------
.text:0000104D                 align 10h
.text:0000104D _text           ends
.text:0000104D
.text:00001050 ; ===========================================================================
.text:00001050
.text:00001050 ; Segment type: Pure code
.text:00001050 ; Segment permissions: Read/Execute
.text:00001050 _text           segment para public 'CODE' use32
.text:00001050                 assume cs:_text
.text:00001050                 ;org 1050h
.text:00001050 ; COMDAT (pick any)
.text:00001050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001050
.text:00001050 ; =============== S U B R O U T I N E =======================================
.text:00001050
.text:00001050 ; Attributes: bp-based frame
.text:00001050
.text:00001050 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00001050                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00001050 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00001050                                         ; CODE XREF: NCompress::CCopyCoder::ReleaseInStream(void)+9p
.text:00001050
.text:00001050 var_4           = dword ptr -4
.text:00001050
.text:00001050                 push    ebp
.text:00001051                 mov     ebp, esp
.text:00001053                 push    ecx
.text:00001054                 push    esi
.text:00001055                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000105C                 mov     [ebp+var_4], ecx
.text:0000105F                 mov     eax, [ebp+var_4]
.text:00001062                 cmp     dword ptr [eax], 0
.text:00001065                 jz      short loc_108B
.text:00001067                 mov     ecx, [ebp+var_4]
.text:0000106A                 mov     edx, [ecx]
.text:0000106C                 mov     eax, [ebp+var_4]
.text:0000106F                 mov     ecx, [eax]
.text:00001071                 mov     edx, [edx]
.text:00001073                 mov     esi, esp
.text:00001075                 push    ecx
.text:00001076                 mov     eax, [edx+8]
.text:00001079                 call    eax
.text:0000107B                 cmp     esi, esp
.text:0000107D                 call    __RTC_CheckEsp
.text:00001082                 mov     ecx, [ebp+var_4]
.text:00001085                 mov     dword ptr [ecx], 0
.text:0000108B
.text:0000108B loc_108B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:0000108B                 pop     esi
.text:0000108C                 add     esp, 4
.text:0000108F                 cmp     ebp, esp
.text:00001091                 call    __RTC_CheckEsp
.text:00001096                 mov     esp, ebp
.text:00001098                 pop     ebp
.text:00001099                 retn
.text:00001099 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00001099
.text:00001099 ; ---------------------------------------------------------------------------
.text:0000109A                 align 4
.text:0000109A _text           ends
.text:0000109A
.text:0000109C ; ===========================================================================
.text:0000109C
.text:0000109C ; Segment type: Pure code
.text:0000109C ; Segment permissions: Read/Execute
.text:0000109C _text           segment para public 'CODE' use32
.text:0000109C                 assume cs:_text
.text:0000109C                 ;org 109Ch
.text:0000109C ; COMDAT (pick any)
.text:0000109C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000109C
.text:0000109C ; =============== S U B R O U T I N E =======================================
.text:0000109C
.text:0000109C ; Attributes: bp-based frame
.text:0000109C
.text:0000109C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:0000109C                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:0000109C ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:0000109C                                         ; CODE XREF: NCompress::CCopyCoder::Read(void *,uint,uint *)+28p
.text:0000109C
.text:0000109C var_4           = dword ptr -4
.text:0000109C
.text:0000109C                 push    ebp
.text:0000109D                 mov     ebp, esp
.text:0000109F                 push    ecx
.text:000010A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010A7                 mov     [ebp+var_4], ecx
.text:000010AA                 mov     eax, [ebp+var_4]
.text:000010AD                 mov     eax, [eax]
.text:000010AF                 mov     esp, ebp
.text:000010B1                 pop     ebp
.text:000010B2                 retn
.text:000010B2 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:000010B2
.text:000010B2 ; ---------------------------------------------------------------------------
.text:000010B3                 align 4
.text:000010B3 _text           ends
.text:000010B3
.text:000010B4 ; ===========================================================================
.text:000010B4
.text:000010B4 ; Segment type: Pure code
.text:000010B4 ; Segment permissions: Read/Execute
.text:000010B4 _text           segment para public 'CODE' use32
.text:000010B4                 assume cs:_text
.text:000010B4                 ;org 10B4h
.text:000010B4 ; COMDAT (pick any)
.text:000010B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010B4
.text:000010B4 ; =============== S U B R O U T I N E =======================================
.text:000010B4
.text:000010B4 ; Attributes: bp-based frame
.text:000010B4
.text:000010B4 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:000010B4                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:000010B4 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:000010B4                                         ; CODE XREF: NCompress::CCopyCoder::SetInStream(ISequentialInStream *)+Dp
.text:000010B4
.text:000010B4 var_4           = dword ptr -4
.text:000010B4 arg_0           = dword ptr  8
.text:000010B4
.text:000010B4                 push    ebp
.text:000010B5                 mov     ebp, esp
.text:000010B7                 push    ecx
.text:000010B8                 push    esi
.text:000010B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010C0                 mov     [ebp+var_4], ecx
.text:000010C3                 cmp     [ebp+arg_0], 0
.text:000010C7                 jz      short loc_10E0
.text:000010C9                 mov     eax, [ebp+arg_0]
.text:000010CC                 mov     ecx, [eax]
.text:000010CE                 mov     esi, esp
.text:000010D0                 mov     edx, [ebp+arg_0]
.text:000010D3                 push    edx
.text:000010D4                 mov     eax, [ecx+4]
.text:000010D7                 call    eax
.text:000010D9                 cmp     esi, esp
.text:000010DB                 call    __RTC_CheckEsp
.text:000010E0
.text:000010E0 loc_10E0:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:000010E0                 mov     ecx, [ebp+var_4]
.text:000010E3                 cmp     dword ptr [ecx], 0
.text:000010E6                 jz      short loc_1103
.text:000010E8                 mov     edx, [ebp+var_4]
.text:000010EB                 mov     eax, [edx]
.text:000010ED                 mov     ecx, [ebp+var_4]
.text:000010F0                 mov     edx, [ecx]
.text:000010F2                 mov     eax, [eax]
.text:000010F4                 mov     esi, esp
.text:000010F6                 push    edx
.text:000010F7                 mov     ecx, [eax+8]
.text:000010FA                 call    ecx
.text:000010FC                 cmp     esi, esp
.text:000010FE                 call    __RTC_CheckEsp
.text:00001103
.text:00001103 loc_1103:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00001103                 mov     edx, [ebp+var_4]
.text:00001106                 mov     eax, [ebp+arg_0]
.text:00001109                 mov     [edx], eax
.text:0000110B                 mov     eax, [ebp+arg_0]
.text:0000110E                 pop     esi
.text:0000110F                 add     esp, 4
.text:00001112                 cmp     ebp, esp
.text:00001114                 call    __RTC_CheckEsp
.text:00001119                 mov     esp, ebp
.text:0000111B                 pop     ebp
.text:0000111C                 retn    4
.text:0000111C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:0000111C
.text:0000111C ; ---------------------------------------------------------------------------
.text:0000111F                 align 10h
.text:0000111F _text           ends
.text:0000111F
.text:00001120 ; ===========================================================================
.text:00001120
.text:00001120 ; Segment type: Pure code
.text:00001120 ; Segment permissions: Read/Execute
.text:00001120 _text           segment para public 'CODE' use32
.text:00001120                 assume cs:_text
.text:00001120                 ;org 1120h
.text:00001120 ; COMDAT (pick any)
.text:00001120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001120
.text:00001120 ; =============== S U B R O U T I N E =======================================
.text:00001120
.text:00001120 ; Attributes: bp-based frame
.text:00001120
.text:00001120 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(struct ICompressCoder *)
.text:00001120                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
.text:00001120 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z proc near
.text:00001120                                         ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+85p
.text:00001120                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+7Ep
.text:00001120
.text:00001120 var_4           = dword ptr -4
.text:00001120 arg_0           = dword ptr  8
.text:00001120
.text:00001120                 push    ebp
.text:00001121                 mov     ebp, esp
.text:00001123                 push    ecx
.text:00001124                 push    esi
.text:00001125                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000112C                 mov     [ebp+var_4], ecx
.text:0000112F                 mov     eax, [ebp+var_4]
.text:00001132                 mov     ecx, [ebp+arg_0]
.text:00001135                 mov     [eax], ecx
.text:00001137                 cmp     [ebp+arg_0], 0
.text:0000113B                 jz      short loc_1154
.text:0000113D                 mov     edx, [ebp+arg_0]
.text:00001140                 mov     eax, [edx]
.text:00001142                 mov     esi, esp
.text:00001144                 mov     ecx, [ebp+arg_0]
.text:00001147                 push    ecx
.text:00001148                 mov     edx, [eax+4]
.text:0000114B                 call    edx
.text:0000114D                 cmp     esi, esp
.text:0000114F                 call    __RTC_CheckEsp
.text:00001154
.text:00001154 loc_1154:                               ; CODE XREF: CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(ICompressCoder *)+1Bj
.text:00001154                 mov     eax, [ebp+var_4]
.text:00001157                 pop     esi
.text:00001158                 add     esp, 4
.text:0000115B                 cmp     ebp, esp
.text:0000115D                 call    __RTC_CheckEsp
.text:00001162                 mov     esp, ebp
.text:00001164                 pop     ebp
.text:00001165                 retn    4
.text:00001165 ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z endp
.text:00001165
.text:00001165 _text           ends
.text:00001165
.text:00001168 ; ===========================================================================
.text:00001168
.text:00001168 ; Segment type: Pure code
.text:00001168 ; Segment permissions: Read/Execute
.text:00001168 _text           segment para public 'CODE' use32
.text:00001168                 assume cs:_text
.text:00001168                 ;org 1168h
.text:00001168 ; COMDAT (pick any)
.text:00001168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001168
.text:00001168 ; =============== S U B R O U T I N E =======================================
.text:00001168
.text:00001168 ; Attributes: bp-based frame
.text:00001168
.text:00001168 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00001168                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00001168 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00001168                                         ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+D0p
.text:00001168                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+D7p ...
.text:00001168
.text:00001168 var_4           = dword ptr -4
.text:00001168
.text:00001168                 push    ebp
.text:00001169                 mov     ebp, esp
.text:0000116B                 push    ecx
.text:0000116C                 push    esi
.text:0000116D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001174                 mov     [ebp+var_4], ecx
.text:00001177                 mov     eax, [ebp+var_4]
.text:0000117A                 cmp     dword ptr [eax], 0
.text:0000117D                 jz      short loc_119A
.text:0000117F                 mov     ecx, [ebp+var_4]
.text:00001182                 mov     edx, [ecx]
.text:00001184                 mov     eax, [ebp+var_4]
.text:00001187                 mov     ecx, [eax]
.text:00001189                 mov     edx, [edx]
.text:0000118B                 mov     esi, esp
.text:0000118D                 push    ecx
.text:0000118E                 mov     eax, [edx+8]
.text:00001191                 call    eax
.text:00001193                 cmp     esi, esp
.text:00001195                 call    __RTC_CheckEsp
.text:0000119A
.text:0000119A loc_119A:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:0000119A                 pop     esi
.text:0000119B                 add     esp, 4
.text:0000119E                 cmp     ebp, esp
.text:000011A0                 call    __RTC_CheckEsp
.text:000011A5                 mov     esp, ebp
.text:000011A7                 pop     ebp
.text:000011A8                 retn
.text:000011A8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:000011A8
.text:000011A8 ; ---------------------------------------------------------------------------
.text:000011A9                 align 4
.text:000011A9 _text           ends
.text:000011A9
.text:000011AC ; ===========================================================================
.text:000011AC
.text:000011AC ; Segment type: Pure code
.text:000011AC ; Segment permissions: Read/Execute
.text:000011AC _text           segment para public 'CODE' use32
.text:000011AC                 assume cs:_text
.text:000011AC                 ;org 11ACh
.text:000011AC ; COMDAT (pick any)
.text:000011AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011AC
.text:000011AC ; =============== S U B R O U T I N E =======================================
.text:000011AC
.text:000011AC ; Attributes: bp-based frame
.text:000011AC
.text:000011AC ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:000011AC                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:000011AC ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:000011AC                                         ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+94p
.text:000011AC                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+8Dp
.text:000011AC
.text:000011AC var_4           = dword ptr -4
.text:000011AC
.text:000011AC                 push    ebp
.text:000011AD                 mov     ebp, esp
.text:000011AF                 push    ecx
.text:000011B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011B7                 mov     [ebp+var_4], ecx
.text:000011BA                 mov     eax, [ebp+var_4]
.text:000011BD                 mov     eax, [eax]
.text:000011BF                 mov     esp, ebp
.text:000011C1                 pop     ebp
.text:000011C2                 retn
.text:000011C2 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:000011C2
.text:000011C2 ; ---------------------------------------------------------------------------
.text:000011C3                 align 4
.text:000011C3 _text           ends
.text:000011C3
.text:000011C4 ; ===========================================================================
.text:000011C4
.text:000011C4 ; Segment type: Pure code
.text:000011C4 ; Segment permissions: Read/Execute
.text:000011C4 _text           segment para public 'CODE' use32
.text:000011C4                 assume cs:_text
.text:000011C4                 ;org 11C4h
.text:000011C4 ; COMDAT (pick any)
.text:000011C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011C4
.text:000011C4 ; =============== S U B R O U T I N E =======================================
.text:000011C4
.text:000011C4
.text:000011C4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:000011C4                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:000011C4 ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:000011C4                                         ; DATA XREF: .rdata:000006B8o
.text:000011C4
.text:000011C4 arg_0           = dword ptr  4
.text:000011C4
.text:000011C4                 sub     [esp+arg_0], 4
.text:000011C9                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000011C9 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000011C9
.text:000011C9 ; ---------------------------------------------------------------------------
.text:000011CE                 align 10h
.text:000011CE _text           ends
.text:000011CE
.text:000011D0 ; ===========================================================================
.text:000011D0
.text:000011D0 ; Segment type: Pure code
.text:000011D0 ; Segment permissions: Read/Execute
.text:000011D0 _text           segment para public 'CODE' use32
.text:000011D0                 assume cs:_text
.text:000011D0                 ;org 11D0h
.text:000011D0 ; COMDAT (pick any)
.text:000011D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011D0
.text:000011D0 ; =============== S U B R O U T I N E =======================================
.text:000011D0
.text:000011D0
.text:000011D0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:000011D0                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:000011D0 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:000011D0                                         ; DATA XREF: .rdata:000006A4o
.text:000011D0
.text:000011D0 arg_0           = dword ptr  4
.text:000011D0
.text:000011D0                 sub     [esp+arg_0], 8
.text:000011D5                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000011D5 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000011D5
.text:000011D5 ; ---------------------------------------------------------------------------
.text:000011DA                 align 4
.text:000011DA _text           ends
.text:000011DA
.text:000011DC ; ===========================================================================
.text:000011DC
.text:000011DC ; Segment type: Pure code
.text:000011DC ; Segment permissions: Read/Execute
.text:000011DC _text           segment para public 'CODE' use32
.text:000011DC                 assume cs:_text
.text:000011DC                 ;org 11DCh
.text:000011DC ; COMDAT (pick any)
.text:000011DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011DC
.text:000011DC ; =============== S U B R O U T I N E =======================================
.text:000011DC
.text:000011DC
.text:000011DC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:000011DC                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:000011DC ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:000011DC                                         ; DATA XREF: .rdata:00000690o
.text:000011DC
.text:000011DC arg_0           = dword ptr  4
.text:000011DC
.text:000011DC                 sub     [esp+arg_0], 0Ch
.text:000011E1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000011E1 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:000011E1
.text:000011E1 ; ---------------------------------------------------------------------------
.text:000011E6                 align 4
.text:000011E6 _text           ends
.text:000011E6
.text:000011E8 ; ===========================================================================
.text:000011E8
.text:000011E8 ; Segment type: Pure code
.text:000011E8 ; Segment permissions: Read/Execute
.text:000011E8 _text           segment para public 'CODE' use32
.text:000011E8                 assume cs:_text
.text:000011E8                 ;org 11E8h
.text:000011E8 ; COMDAT (pick any)
.text:000011E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011E8
.text:000011E8 ; =============== S U B R O U T I N E =======================================
.text:000011E8
.text:000011E8
.text:000011E8 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:000011E8                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:000011E8 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:000006B4o
.text:000011E8
.text:000011E8 arg_0           = dword ptr  4
.text:000011E8
.text:000011E8                 sub     [esp+arg_0], 4
.text:000011ED                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000011ED ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000011ED
.text:000011ED ; ---------------------------------------------------------------------------
.text:000011F2                 align 4
.text:000011F2 _text           ends
.text:000011F2
.text:000011F4 ; ===========================================================================
.text:000011F4
.text:000011F4 ; Segment type: Pure code
.text:000011F4 ; Segment permissions: Read/Execute
.text:000011F4 _text           segment para public 'CODE' use32
.text:000011F4                 assume cs:_text
.text:000011F4                 ;org 11F4h
.text:000011F4 ; COMDAT (pick any)
.text:000011F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011F4
.text:000011F4 ; =============== S U B R O U T I N E =======================================
.text:000011F4
.text:000011F4
.text:000011F4 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:000011F4                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:000011F4 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:000006A0o
.text:000011F4
.text:000011F4 arg_0           = dword ptr  4
.text:000011F4
.text:000011F4                 sub     [esp+arg_0], 8
.text:000011F9                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:000011F9 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:000011F9
.text:000011F9 ; ---------------------------------------------------------------------------
.text:000011FE                 align 10h
.text:000011FE _text           ends
.text:000011FE
.text:00001200 ; ===========================================================================
.text:00001200
.text:00001200 ; Segment type: Pure code
.text:00001200 ; Segment permissions: Read/Execute
.text:00001200 _text           segment para public 'CODE' use32
.text:00001200                 assume cs:_text
.text:00001200                 ;org 1200h
.text:00001200 ; COMDAT (pick any)
.text:00001200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001200
.text:00001200 ; =============== S U B R O U T I N E =======================================
.text:00001200
.text:00001200
.text:00001200 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00001200                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00001200 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00001200                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:00001200
.text:00001200 arg_0           = dword ptr  4
.text:00001200
.text:00001200                 sub     [esp+arg_0], 4
.text:00001205                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00001205 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00001205
.text:00001205 ; ---------------------------------------------------------------------------
.text:0000120A                 align 4
.text:0000120A _text           ends
.text:0000120A
.text:0000120C ; ===========================================================================
.text:0000120C
.text:0000120C ; Segment type: Pure code
.text:0000120C ; Segment permissions: Read/Execute
.text:0000120C _text           segment para public 'CODE' use32
.text:0000120C                 assume cs:_text
.text:0000120C                 ;org 120Ch
.text:0000120C ; COMDAT (pick any)
.text:0000120C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000120C
.text:0000120C ; =============== S U B R O U T I N E =======================================
.text:0000120C
.text:0000120C
.text:0000120C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:0000120C                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000120C ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000120C                                         ; DATA XREF: .rdata:0000068Co
.text:0000120C
.text:0000120C arg_0           = dword ptr  4
.text:0000120C
.text:0000120C                 sub     [esp+arg_0], 0Ch
.text:00001211                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00001211 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:00001211
.text:00001211 ; ---------------------------------------------------------------------------
.text:00001216                 align 4
.text:00001216 _text           ends
.text:00001216
.text:00001218 ; ===========================================================================
.text:00001218
.text:00001218 ; Segment type: Pure code
.text:00001218 ; Segment permissions: Read/Execute
.text:00001218 _text           segment para public 'CODE' use32
.text:00001218                 assume cs:_text
.text:00001218                 ;org 1218h
.text:00001218 ; COMDAT (pick any)
.text:00001218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001218
.text:00001218 ; =============== S U B R O U T I N E =======================================
.text:00001218
.text:00001218
.text:00001218 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00001218                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00001218 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00001218                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:00001218
.text:00001218 arg_0           = dword ptr  4
.text:00001218
.text:00001218                 sub     [esp+arg_0], 8
.text:0000121D                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000121D ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:0000121D
.text:0000121D ; ---------------------------------------------------------------------------
.text:00001222                 align 4
.text:00001222 _text           ends
.text:00001222
.text:00001224 ; ===========================================================================
.text:00001224
.text:00001224 ; Segment type: Pure code
.text:00001224 ; Segment permissions: Read/Execute
.text:00001224 _text           segment para public 'CODE' use32
.text:00001224                 assume cs:_text
.text:00001224                 ;org 1224h
.text:00001224 ; COMDAT (pick any)
.text:00001224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001224
.text:00001224 ; =============== S U B R O U T I N E =======================================
.text:00001224
.text:00001224
.text:00001224 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:00001224                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:00001224 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:00001224                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:00001224
.text:00001224 arg_0           = dword ptr  4
.text:00001224
.text:00001224                 sub     [esp+arg_0], 0Ch
.text:00001229                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00001229 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:00001229
.text:00001229 _text           ends
.text:00001229
UNDEF:00001230 ; ===========================================================================
UNDEF:00001230
UNDEF:00001230 ; Segment type: Externs
UNDEF:00001230 ; UNDEF
UNDEF:00001230 ; __stdcall MidFree(x)
UNDEF:00001230                 extrn _MidFree@4:near   ; CODE XREF: NCompress::CCopyCoder::~CCopyCoder(void)+3Cp
UNDEF:00001234                 extrn __RTC_CheckEsp:near
UNDEF:00001234                                         ; CODE XREF: NCompress::CCopyCoder::~CCopyCoder(void)+51p
UNDEF:00001234                                         ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D7p ...
UNDEF:00001238                 extrn __RTC_Shutdown:near
UNDEF:00001238                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000123C                 extrn __RTC_InitBase:near
UNDEF:0000123C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001240 ; const type_info::`vftable'
UNDEF:00001240                 extrn ??_7type_info@@6B@:near
UNDEF:00001240                                         ; DATA XREF: .data:NCompress::CCopyCoder `RTTI Type Descriptor'o
UNDEF:00001240                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:00001244                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00001244                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_B6Ao
UNDEF:00001248                 extrn _IID_ISequentialInStream:near
UNDEF:00001248                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_B36o
UNDEF:0000124C                 extrn _IID_ICompressSetInStream:near
UNDEF:0000124C                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_B02o
UNDEF:00001250                 extrn _IID_ICompressCoder:near
UNDEF:00001250                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_AE3o
UNDEF:00001254 ; const IID IID_IUnknown
UNDEF:00001254                 extrn _IID_IUnknown:near
UNDEF:00001254                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00001258 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00001258                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:0000125C ; void __cdecl operator delete(void *)
UNDEF:0000125C                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+22p
UNDEF:0000125C                                         ; __unwindfunclet$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0+4p ...
UNDEF:00001260 ; __stdcall MidAlloc(x)
UNDEF:00001260                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+25p
UNDEF:00001264 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001264                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001264                                         ; CODE XREF: NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1EBp
UNDEF:00001264                                         ; NCompress::CCopyCoder::Read(void *,uint,uint *)+88p ...
UNDEF:00001268 ; void *__cdecl operator new(unsigned int)
UNDEF:00001268                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+45p
UNDEF:00001268                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+38p
UNDEF:0000126C                 extrn ___security_cookie:near
UNDEF:0000126C                                         ; DATA XREF: NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+32r
UNDEF:0000126C                                         ; NCompress::CopyStream_ExactSize(ISequentialInStream *,ISequentialOutStream *,unsigned __int64,ICompressProgressInfo *)+25r
UNDEF:00001270                 extrn ___CxxFrameHandler3:near
UNDEF:00001270                                         ; CODE XREF: __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+16j
UNDEF:00001270                                         ; __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z+16j
UNDEF:00001274 ; __fastcall __security_check_cookie(x)
UNDEF:00001274                 extrn @__security_check_cookie@4:near
UNDEF:00001274                                         ; CODE XREF: __ehhandler$?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z+Cp
UNDEF:00001274                                         ; __ehhandler$?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z+Cp
UNDEF:00001278                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00001278                                         ; .rdata:00000EA8o ...
UNDEF:00001278
UNDEF:00001278