.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 5CBA53226F48A2C0DDE53D21031E0ED9
.text:00000000 ; Input CRC32 : B4F424B0
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\StringConvert.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; void __stdcall MultiByteToUnicodeString2(struct UString *, const struct AString *, UINT CodePage)
.text:00000000                 public ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z
.text:00000000 ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z proc near
.text:00000000                                         ; CODE XREF: MultiByteToUnicodeString(AString const &,uint)+5Ep
.text:00000000
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 cchWideChar     = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000 CodePage        = dword ptr  10h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 0Ch
.text:00000006                 push    esi
.text:00000007                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000000E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000015                 mov     [ebp+cchWideChar], 0CCCCCCCCh
.text:0000001C                 mov     ecx, [ebp+arg_0] ; this
.text:0000001F                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000024                 mov     ecx, [ebp+arg_4] ; this
.text:00000027                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:0000002C                 movzx   eax, al
.text:0000002F                 test    eax, eax
.text:00000031                 jz      short loc_38
.text:00000033                 jmp     loc_F8
.text:00000038 ; ---------------------------------------------------------------------------
.text:00000038
.text:00000038 loc_38:                                 ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+31j
.text:00000038                 mov     esi, esp
.text:0000003A                 push    0               ; cchWideChar
.text:0000003C                 push    0               ; lpWideCharStr
.text:0000003E                 mov     ecx, [ebp+arg_4] ; this
.text:00000041                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000046                 push    eax             ; cbMultiByte
.text:00000047                 mov     ecx, [ebp+arg_4]
.text:0000004A                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:0000004F                 push    eax             ; lpMultiByteStr
.text:00000050                 push    0               ; dwFlags
.text:00000052                 mov     ecx, [ebp+CodePage]
.text:00000055                 push    ecx             ; CodePage
.text:00000056                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:0000005C                 cmp     esi, esp
.text:0000005E                 call    __RTC_CheckEsp
.text:00000063                 mov     [ebp+cchWideChar], eax
.text:00000066                 cmp     [ebp+cchWideChar], 0
.text:0000006A                 jnz     short loc_96
.text:0000006C                 mov     esi, esp
.text:0000006E                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:00000074                 cmp     esi, esp
.text:00000076                 call    __RTC_CheckEsp
.text:0000007B                 test    eax, eax
.text:0000007D                 jz      short loc_94
.text:0000007F                 mov     [ebp+var_8], 44E74h
.text:00000086                 push    offset __TI1H
.text:0000008B                 lea     edx, [ebp+var_8]
.text:0000008E                 push    edx
.text:0000008F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000094 ; ---------------------------------------------------------------------------
.text:00000094
.text:00000094 loc_94:                                 ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+7Dj
.text:00000094                 jmp     short loc_F8
.text:00000096 ; ---------------------------------------------------------------------------
.text:00000096
.text:00000096 loc_96:                                 ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+6Aj
.text:00000096                 mov     esi, esp
.text:00000098                 mov     eax, [ebp+cchWideChar]
.text:0000009B                 push    eax             ; cchWideChar
.text:0000009C                 mov     ecx, [ebp+cchWideChar]
.text:0000009F                 push    ecx             ; unsigned int
.text:000000A0                 mov     ecx, [ebp+arg_0] ; this
.text:000000A3                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:000000A8                 push    eax             ; lpWideCharStr
.text:000000A9                 mov     ecx, [ebp+arg_4] ; this
.text:000000AC                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000000B1                 push    eax             ; cbMultiByte
.text:000000B2                 mov     ecx, [ebp+arg_4]
.text:000000B5                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000000BA                 push    eax             ; lpMultiByteStr
.text:000000BB                 push    0               ; dwFlags
.text:000000BD                 mov     edx, [ebp+CodePage]
.text:000000C0                 push    edx             ; CodePage
.text:000000C1                 call    dword ptr ds:__imp__MultiByteToWideChar@24 ; MultiByteToWideChar(x,x,x,x,x,x)
.text:000000C7                 cmp     esi, esp
.text:000000C9                 call    __RTC_CheckEsp
.text:000000CE                 mov     [ebp+cchWideChar], eax
.text:000000D1                 cmp     [ebp+cchWideChar], 0
.text:000000D5                 jnz     short loc_EC
.text:000000D7                 mov     [ebp+var_C], 44E74h
.text:000000DE                 push    offset __TI1H
.text:000000E3                 lea     eax, [ebp+var_C]
.text:000000E6                 push    eax
.text:000000E7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000000EC ; ---------------------------------------------------------------------------
.text:000000EC
.text:000000EC loc_EC:                                 ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+D5j
.text:000000EC                 mov     ecx, [ebp+cchWideChar]
.text:000000EF                 push    ecx             ; unsigned int
.text:000000F0                 mov     ecx, [ebp+arg_0] ; this
.text:000000F3                 call    ?ReleaseBuf_SetEnd@UString@@QAEXI@Z ; UString::ReleaseBuf_SetEnd(uint)
.text:000000F8
.text:000000F8 loc_F8:                                 ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+33j
.text:000000F8                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint):loc_94j
.text:000000F8                 pop     esi
.text:000000F9                 add     esp, 0Ch
.text:000000FC                 cmp     ebp, esp
.text:000000FE                 call    __RTC_CheckEsp
.text:00000103                 mov     esp, ebp
.text:00000105                 pop     ebp
.text:00000106                 retn    0Ch
.text:00000106 ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z endp
.text:00000106
.text:00000106 ; ---------------------------------------------------------------------------
.text:00000109                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; class UString __stdcall MultiByteToUnicodeString(class AString const &, unsigned int)
.text:00000110                 public ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z
.text:00000110 ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z proc near
.text:00000110
.text:00000110 var_24          = dword ptr -24h
.text:00000110 var_20          = dword ptr -20h
.text:00000110 var_1C          = dword ptr -1Ch
.text:00000110 var_18          = dword ptr -18h
.text:00000110 var_14          = dword ptr -14h
.text:00000110 var_10          = dword ptr -10h
.text:00000110 var_C           = dword ptr -0Ch
.text:00000110 var_4           = dword ptr -4
.text:00000110 arg_0           = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110 CodePage        = dword ptr  10h
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 push    0FFFFFFFFh
.text:00000115                 push    offset __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z
.text:0000011A                 mov     eax, large fs:0
.text:00000120                 push    eax
.text:00000121                 sub     esp, 18h
.text:00000124                 mov     eax, 0CCCCCCCCh
.text:00000129                 mov     [ebp+var_24], eax
.text:0000012C                 mov     [ebp+var_20], eax
.text:0000012F                 mov     [ebp+var_1C], eax
.text:00000132                 mov     [ebp+var_18], eax
.text:00000135                 mov     [ebp+var_14], eax
.text:00000138                 mov     [ebp+var_10], eax
.text:0000013B                 mov     eax, dword ptr ds:___security_cookie
.text:00000140                 xor     eax, ebp
.text:00000142                 push    eax
.text:00000143                 lea     eax, [ebp+var_C]
.text:00000146                 mov     large fs:0, eax
.text:0000014C                 mov     [ebp+var_24], 0
.text:00000153                 lea     ecx, [ebp+var_1C]
.text:00000156                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000015B                 mov     [ebp+var_4], 1
.text:00000162                 mov     eax, [ebp+CodePage]
.text:00000165                 push    eax             ; CodePage
.text:00000166                 mov     ecx, [ebp+arg_4]
.text:00000169                 push    ecx             ; struct AString *
.text:0000016A                 lea     edx, [ebp+var_1C]
.text:0000016D                 push    edx             ; struct UString *
.text:0000016E                 call    ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2(UString &,AString const &,uint)
.text:00000173                 lea     eax, [ebp+var_1C]
.text:00000176                 push    eax
.text:00000177                 mov     ecx, [ebp+arg_0]
.text:0000017A                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:0000017F                 mov     ecx, [ebp+var_24]
.text:00000182                 or      ecx, 1
.text:00000185                 mov     [ebp+var_24], ecx
.text:00000188                 mov     byte ptr [ebp+var_4], 0
.text:0000018C                 lea     ecx, [ebp+var_1C] ; this
.text:0000018F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000194                 mov     eax, [ebp+arg_0]
.text:00000197                 push    edx
.text:00000198                 mov     ecx, ebp
.text:0000019A                 push    eax
.text:0000019B                 lea     edx, $LN9
.text:000001A1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001A6                 pop     eax
.text:000001A7                 pop     edx
.text:000001A8                 mov     ecx, [ebp+var_C]
.text:000001AB                 mov     large fs:0, ecx
.text:000001B2                 pop     ecx
.text:000001B3                 add     esp, 24h
.text:000001B6                 cmp     ebp, esp
.text:000001B8                 call    __RTC_CheckEsp
.text:000001BD                 mov     esp, ebp
.text:000001BF                 pop     ebp
.text:000001C0                 retn    0Ch
.text:000001C0 ?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z endp
.text:000001C0
.text:000001C0 ; ---------------------------------------------------------------------------
.text:000001C3                 align 4
.text:000001C4 $LN9            dd 1                    ; DATA XREF: MultiByteToUnicodeString(AString const &,uint)+8Bo
.text:000001C8                 dd offset $LN8
.text:000001CC $LN8            dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000001C8o
.text:000001D4                 dd offset $LN6          ; "dest"
.text:000001D8 $LN6            db 'dest',0             ; DATA XREF: .text:000001D4o
.text:000001DD                 align 10h
.text:000001E0
.text:000001E0 ; =============== S U B R O U T I N E =======================================
.text:000001E0
.text:000001E0 ; Attributes: bp-based frame
.text:000001E0
.text:000001E0 ; void __stdcall UnicodeStringToMultiByte2(struct AString *, const struct UString *, UINT CodePage)
.text:000001E0                 public ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@I@Z
.text:000001E0 ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@I@Z proc near
.text:000001E0
.text:000001E0 var_C           = dword ptr -0Ch
.text:000001E0 var_8           = dword ptr -8
.text:000001E0 var_4           = dword ptr -4
.text:000001E0 arg_0           = dword ptr  8
.text:000001E0 arg_4           = dword ptr  0Ch
.text:000001E0 CodePage        = dword ptr  10h
.text:000001E0
.text:000001E0                 push    ebp
.text:000001E1                 mov     ebp, esp
.text:000001E3                 sub     esp, 0Ch
.text:000001E6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000001ED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000001F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001FB                 lea     eax, [ebp+var_8+3]
.text:000001FE                 push    eax             ; int
.text:000001FF                 push    5Fh ; '_'       ; char
.text:00000201                 mov     ecx, [ebp+CodePage]
.text:00000204                 push    ecx             ; CodePage
.text:00000205                 mov     edx, [ebp+arg_4]
.text:00000208                 push    edx             ; UString *
.text:00000209                 mov     eax, [ebp+arg_0]
.text:0000020C                 push    eax             ; AString *
.text:0000020D                 call    ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)
.text:00000212                 push    edx
.text:00000213                 mov     ecx, ebp
.text:00000215                 push    eax
.text:00000216                 lea     edx, $LN5
.text:0000021C                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000221                 pop     eax
.text:00000222                 pop     edx
.text:00000223                 add     esp, 0Ch
.text:00000226                 cmp     ebp, esp
.text:00000228                 call    __RTC_CheckEsp
.text:0000022D                 mov     esp, ebp
.text:0000022F                 pop     ebp
.text:00000230                 retn    0Ch
.text:00000230 ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@I@Z endp
.text:00000230
.text:00000230 ; ---------------------------------------------------------------------------
.text:00000233                 align 4
.text:00000234 $LN5            dd 1                    ; DATA XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint)+36o
.text:00000238                 dd offset $LN4
.text:0000023C $LN4            dd 0FFFFFFFBh, 1        ; DATA XREF: .text:00000238o
.text:00000244                 dd offset $LN3          ; "defaultCharWasUsed"
.text:00000248 $LN3            db 'defaultCharWasUsed',0 ; DATA XREF: .text:00000244o
.text:0000025B                 align 10h
.text:00000260
.text:00000260 ; =============== S U B R O U T I N E =======================================
.text:00000260
.text:00000260 ; Attributes: bp-based frame
.text:00000260
.text:00000260 ; int __stdcall UnicodeStringToMultiByte2(AString *, UString *, UINT CodePage, char, int)
.text:00000260 ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z proc near
.text:00000260                                         ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint)+2Dp
.text:00000260                                         ; UnicodeStringToMultiByte(UString const &,uint,char,bool &)+67p ...
.text:00000260
.text:00000260 var_20          = dword ptr -20h
.text:00000260 var_1C          = dword ptr -1Ch
.text:00000260 var_18          = dword ptr -18h
.text:00000260 var_14          = dword ptr -14h
.text:00000260 var_10          = dword ptr -10h
.text:00000260 var_C           = dword ptr -0Ch
.text:00000260 var_8           = dword ptr -8
.text:00000260 cbMultiByte     = dword ptr -4
.text:00000260 arg_0           = dword ptr  8
.text:00000260 arg_4           = dword ptr  0Ch
.text:00000260 CodePage        = dword ptr  10h
.text:00000260 arg_C           = byte ptr  14h
.text:00000260 arg_10          = dword ptr  18h
.text:00000260
.text:00000260                 push    ebp
.text:00000261                 mov     ebp, esp
.text:00000263                 sub     esp, 20h
.text:00000266                 push    esi
.text:00000267                 mov     eax, 0CCCCCCCCh
.text:0000026C                 mov     [ebp+var_20], eax
.text:0000026F                 mov     [ebp+var_1C], eax
.text:00000272                 mov     [ebp+var_18], eax
.text:00000275                 mov     [ebp+var_14], eax
.text:00000278                 mov     [ebp+var_10], eax
.text:0000027B                 mov     [ebp+var_C], eax
.text:0000027E                 mov     [ebp+var_8], eax
.text:00000281                 mov     [ebp+cbMultiByte], eax
.text:00000284                 mov     ecx, [ebp+arg_0] ; this
.text:00000287                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000028C                 mov     eax, [ebp+arg_10]
.text:0000028F                 mov     byte ptr [eax], 0
.text:00000292                 mov     ecx, [ebp+arg_4] ; this
.text:00000295                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000029A                 movzx   ecx, al
.text:0000029D                 test    ecx, ecx
.text:0000029F                 jz      short loc_2A6
.text:000002A1                 jmp     loc_3D8
.text:000002A6 ; ---------------------------------------------------------------------------
.text:000002A6
.text:000002A6 loc_2A6:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+3Fj
.text:000002A6                 mov     esi, esp
.text:000002A8                 push    0               ; lpUsedDefaultChar
.text:000002AA                 push    0               ; lpDefaultChar
.text:000002AC                 push    0               ; cbMultiByte
.text:000002AE                 push    0               ; lpMultiByteStr
.text:000002B0                 mov     ecx, [ebp+arg_4] ; this
.text:000002B3                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:000002B8                 push    eax             ; cchWideChar
.text:000002B9                 mov     ecx, [ebp+arg_4]
.text:000002BC                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000002C1                 push    eax             ; lpWideCharStr
.text:000002C2                 push    0               ; dwFlags
.text:000002C4                 mov     edx, [ebp+CodePage]
.text:000002C7                 push    edx             ; CodePage
.text:000002C8                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:000002CE                 cmp     esi, esp
.text:000002D0                 call    __RTC_CheckEsp
.text:000002D5                 mov     [ebp+cbMultiByte], eax
.text:000002D8                 cmp     [ebp+cbMultiByte], 0
.text:000002DC                 jnz     short loc_30B
.text:000002DE                 mov     esi, esp
.text:000002E0                 call    dword ptr ds:__imp__GetLastError@0 ; GetLastError()
.text:000002E6                 cmp     esi, esp
.text:000002E8                 call    __RTC_CheckEsp
.text:000002ED                 test    eax, eax
.text:000002EF                 jz      short loc_306
.text:000002F1                 mov     [ebp+var_18], 44E74h
.text:000002F8                 push    offset __TI1H
.text:000002FD                 lea     eax, [ebp+var_18]
.text:00000300                 push    eax
.text:00000301                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:00000306 ; ---------------------------------------------------------------------------
.text:00000306
.text:00000306 loc_306:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+8Fj
.text:00000306                 jmp     loc_3D8
.text:0000030B ; ---------------------------------------------------------------------------
.text:0000030B
.text:0000030B loc_30B:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+7Cj
.text:0000030B                 mov     [ebp+var_C], 0
.text:00000312                 cmp     [ebp+CodePage], 0FDE9h
.text:00000319                 jz      short loc_32D
.text:0000031B                 cmp     [ebp+CodePage], 0FDE8h
.text:00000322                 jz      short loc_32D
.text:00000324                 mov     [ebp+var_20], 0
.text:0000032B                 jmp     short loc_334
.text:0000032D ; ---------------------------------------------------------------------------
.text:0000032D
.text:0000032D loc_32D:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+B9j
.text:0000032D                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+C2j
.text:0000032D                 mov     [ebp+var_20], 1
.text:00000334
.text:00000334 loc_334:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+CBj
.text:00000334                 mov     cl, byte ptr [ebp+var_20]
.text:00000337                 mov     byte ptr [ebp+var_14+3], cl
.text:0000033A                 mov     dl, [ebp+arg_C]
.text:0000033D                 mov     [ebp+arg_C], dl
.text:00000340                 movzx   eax, byte ptr [ebp+var_14+3]
.text:00000344                 neg     eax
.text:00000346                 sbb     eax, eax
.text:00000348                 not     eax
.text:0000034A                 lea     ecx, [ebp+var_C]
.text:0000034D                 and     eax, ecx
.text:0000034F                 mov     esi, esp
.text:00000351                 push    eax             ; lpUsedDefaultChar
.text:00000352                 movzx   edx, byte ptr [ebp+var_14+3]
.text:00000356                 neg     edx
.text:00000358                 sbb     edx, edx
.text:0000035A                 not     edx
.text:0000035C                 lea     eax, [ebp+arg_C]
.text:0000035F                 and     edx, eax
.text:00000361                 push    edx             ; lpDefaultChar
.text:00000362                 mov     ecx, [ebp+cbMultiByte]
.text:00000365                 push    ecx             ; cbMultiByte
.text:00000366                 mov     edx, [ebp+cbMultiByte]
.text:00000369                 push    edx             ; unsigned int
.text:0000036A                 mov     ecx, [ebp+arg_0] ; this
.text:0000036D                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:00000372                 push    eax             ; lpMultiByteStr
.text:00000373                 mov     ecx, [ebp+arg_4] ; this
.text:00000376                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000037B                 push    eax             ; cchWideChar
.text:0000037C                 mov     ecx, [ebp+arg_4]
.text:0000037F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000384                 push    eax             ; lpWideCharStr
.text:00000385                 push    0               ; dwFlags
.text:00000387                 mov     eax, [ebp+CodePage]
.text:0000038A                 push    eax             ; CodePage
.text:0000038B                 call    dword ptr ds:__imp__WideCharToMultiByte@32 ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
.text:00000391                 cmp     esi, esp
.text:00000393                 call    __RTC_CheckEsp
.text:00000398                 mov     [ebp+cbMultiByte], eax
.text:0000039B                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:0000039F                 test    ecx, ecx
.text:000003A1                 jnz     short loc_3B1
.text:000003A3                 xor     edx, edx
.text:000003A5                 cmp     [ebp+var_C], 0
.text:000003A9                 setnz   dl
.text:000003AC                 mov     eax, [ebp+arg_10]
.text:000003AF                 mov     [eax], dl
.text:000003B1
.text:000003B1 loc_3B1:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+141j
.text:000003B1                 cmp     [ebp+cbMultiByte], 0
.text:000003B5                 jnz     short loc_3CC
.text:000003B7                 mov     [ebp+var_1C], 44E74h
.text:000003BE                 push    offset __TI1H
.text:000003C3                 lea     ecx, [ebp+var_1C]
.text:000003C6                 push    ecx
.text:000003C7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:000003CC ; ---------------------------------------------------------------------------
.text:000003CC
.text:000003CC loc_3CC:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+155j
.text:000003CC                 mov     edx, [ebp+cbMultiByte]
.text:000003CF                 push    edx             ; unsigned int
.text:000003D0                 mov     ecx, [ebp+arg_0] ; this
.text:000003D3                 call    ?ReleaseBuf_SetEnd@AString@@QAEXI@Z ; AString::ReleaseBuf_SetEnd(uint)
.text:000003D8
.text:000003D8 loc_3D8:                                ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+41j
.text:000003D8                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &):loc_306j
.text:000003D8                 push    edx
.text:000003D9                 mov     ecx, ebp
.text:000003DB                 push    eax
.text:000003DC                 lea     edx, $LN13
.text:000003E2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003E7                 pop     eax
.text:000003E8                 pop     edx
.text:000003E9                 pop     esi
.text:000003EA                 add     esp, 20h
.text:000003ED                 cmp     ebp, esp
.text:000003EF                 call    __RTC_CheckEsp
.text:000003F4                 mov     esp, ebp
.text:000003F6                 pop     ebp
.text:000003F7                 retn    14h
.text:000003F7 ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z endp
.text:000003F7
.text:000003F7 ; ---------------------------------------------------------------------------
.text:000003FA                 align 4
.text:000003FC $LN13           dd 1                    ; DATA XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+17Co
.text:00000400                 dd offset $LN12
.text:00000404 $LN12           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00000400o
.text:0000040C                 dd offset $LN11         ; "defUsed"
.text:00000410 $LN11           db 'defUsed',0          ; DATA XREF: .text:0000040Co
.text:00000418                 align 10h
.text:00000420
.text:00000420 ; =============== S U B R O U T I N E =======================================
.text:00000420
.text:00000420 ; Attributes: bp-based frame
.text:00000420
.text:00000420 ; class AString __stdcall UnicodeStringToMultiByte(class UString const &, unsigned int, char, bool &)
.text:00000420                 public ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z
.text:00000420 ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z proc near
.text:00000420
.text:00000420 var_24          = dword ptr -24h
.text:00000420 var_20          = dword ptr -20h
.text:00000420 var_1C          = dword ptr -1Ch
.text:00000420 var_18          = dword ptr -18h
.text:00000420 var_14          = dword ptr -14h
.text:00000420 var_10          = dword ptr -10h
.text:00000420 var_C           = dword ptr -0Ch
.text:00000420 var_4           = dword ptr -4
.text:00000420 arg_0           = dword ptr  8
.text:00000420 arg_4           = dword ptr  0Ch
.text:00000420 CodePage        = dword ptr  10h
.text:00000420 arg_C           = byte ptr  14h
.text:00000420 arg_10          = dword ptr  18h
.text:00000420
.text:00000420                 push    ebp
.text:00000421                 mov     ebp, esp
.text:00000423                 push    0FFFFFFFFh
.text:00000425                 push    offset __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z
.text:0000042A                 mov     eax, large fs:0
.text:00000430                 push    eax
.text:00000431                 sub     esp, 18h
.text:00000434                 mov     eax, 0CCCCCCCCh
.text:00000439                 mov     [ebp+var_24], eax
.text:0000043C                 mov     [ebp+var_20], eax
.text:0000043F                 mov     [ebp+var_1C], eax
.text:00000442                 mov     [ebp+var_18], eax
.text:00000445                 mov     [ebp+var_14], eax
.text:00000448                 mov     [ebp+var_10], eax
.text:0000044B                 mov     eax, dword ptr ds:___security_cookie
.text:00000450                 xor     eax, ebp
.text:00000452                 push    eax
.text:00000453                 lea     eax, [ebp+var_C]
.text:00000456                 mov     large fs:0, eax
.text:0000045C                 mov     [ebp+var_24], 0
.text:00000463                 lea     ecx, [ebp+var_1C]
.text:00000466                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000046B                 mov     [ebp+var_4], 1
.text:00000472                 mov     eax, [ebp+arg_10]
.text:00000475                 push    eax             ; int
.text:00000476                 movzx   ecx, [ebp+arg_C]
.text:0000047A                 push    ecx             ; char
.text:0000047B                 mov     edx, [ebp+CodePage]
.text:0000047E                 push    edx             ; CodePage
.text:0000047F                 mov     eax, [ebp+arg_4]
.text:00000482                 push    eax             ; UString *
.text:00000483                 lea     ecx, [ebp+var_1C]
.text:00000486                 push    ecx             ; AString *
.text:00000487                 call    ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)
.text:0000048C                 lea     edx, [ebp+var_1C]
.text:0000048F                 push    edx
.text:00000490                 mov     ecx, [ebp+arg_0]
.text:00000493                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000498                 mov     eax, [ebp+var_24]
.text:0000049B                 or      eax, 1
.text:0000049E                 mov     [ebp+var_24], eax
.text:000004A1                 mov     byte ptr [ebp+var_4], 0
.text:000004A5                 lea     ecx, [ebp+var_1C] ; this
.text:000004A8                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000004AD                 mov     eax, [ebp+arg_0]
.text:000004B0                 push    edx
.text:000004B1                 mov     ecx, ebp
.text:000004B3                 push    eax
.text:000004B4                 lea     edx, $LN9_0
.text:000004BA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004BF                 pop     eax
.text:000004C0                 pop     edx
.text:000004C1                 mov     ecx, [ebp+var_C]
.text:000004C4                 mov     large fs:0, ecx
.text:000004CB                 pop     ecx
.text:000004CC                 add     esp, 24h
.text:000004CF                 cmp     ebp, esp
.text:000004D1                 call    __RTC_CheckEsp
.text:000004D6                 mov     esp, ebp
.text:000004D8                 pop     ebp
.text:000004D9                 retn    14h
.text:000004D9 ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z endp
.text:000004D9
.text:000004D9 ; ---------------------------------------------------------------------------
.text:000004DC $LN9_0          dd 1                    ; DATA XREF: UnicodeStringToMultiByte(UString const &,uint,char,bool &)+94o
.text:000004E0                 dd offset $LN8_0
.text:000004E4 $LN8_0          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000004E0o
.text:000004EC                 dd offset $LN6_0        ; "dest"
.text:000004F0 $LN6_0          db 'dest',0             ; DATA XREF: .text:000004ECo
.text:000004F5                 align 10h
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500 ; class AString __stdcall UnicodeStringToMultiByte(class UString const &, unsigned int)
.text:00000500                 public ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z
.text:00000500 ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z proc near
.text:00000500
.text:00000500 var_30          = dword ptr -30h
.text:00000500 var_2C          = dword ptr -2Ch
.text:00000500 var_28          = dword ptr -28h
.text:00000500 var_24          = dword ptr -24h
.text:00000500 var_20          = dword ptr -20h
.text:00000500 var_1C          = dword ptr -1Ch
.text:00000500 var_18          = dword ptr -18h
.text:00000500 var_14          = dword ptr -14h
.text:00000500 var_10          = dword ptr -10h
.text:00000500 var_C           = dword ptr -0Ch
.text:00000500 var_4           = dword ptr -4
.text:00000500 arg_0           = dword ptr  8
.text:00000500 arg_4           = dword ptr  0Ch
.text:00000500 CodePage        = dword ptr  10h
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503                 push    0FFFFFFFFh
.text:00000505                 push    offset __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z
.text:0000050A                 mov     eax, large fs:0
.text:00000510                 push    eax
.text:00000511                 sub     esp, 24h
.text:00000514                 mov     eax, 0CCCCCCCCh
.text:00000519                 mov     [ebp+var_30], eax
.text:0000051C                 mov     [ebp+var_2C], eax
.text:0000051F                 mov     [ebp+var_28], eax
.text:00000522                 mov     [ebp+var_24], eax
.text:00000525                 mov     [ebp+var_20], eax
.text:00000528                 mov     [ebp+var_1C], eax
.text:0000052B                 mov     [ebp+var_18], eax
.text:0000052E                 mov     [ebp+var_14], eax
.text:00000531                 mov     [ebp+var_10], eax
.text:00000534                 mov     eax, dword ptr ds:___security_cookie
.text:00000539                 xor     eax, ebp
.text:0000053B                 push    eax
.text:0000053C                 lea     eax, [ebp+var_C]
.text:0000053F                 mov     large fs:0, eax
.text:00000545                 mov     [ebp+var_30], 0
.text:0000054C                 lea     ecx, [ebp+var_1C]
.text:0000054F                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000554                 mov     [ebp+var_4], 1
.text:0000055B                 lea     eax, [ebp+var_28+3]
.text:0000055E                 push    eax             ; int
.text:0000055F                 push    5Fh ; '_'       ; char
.text:00000561                 mov     ecx, [ebp+CodePage]
.text:00000564                 push    ecx             ; CodePage
.text:00000565                 mov     edx, [ebp+arg_4]
.text:00000568                 push    edx             ; UString *
.text:00000569                 lea     eax, [ebp+var_1C]
.text:0000056C                 push    eax             ; AString *
.text:0000056D                 call    ?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)
.text:00000572                 lea     ecx, [ebp+var_1C]
.text:00000575                 push    ecx
.text:00000576                 mov     ecx, [ebp+arg_0]
.text:00000579                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000057E                 mov     edx, [ebp+var_30]
.text:00000581                 or      edx, 1
.text:00000584                 mov     [ebp+var_30], edx
.text:00000587                 mov     byte ptr [ebp+var_4], 0
.text:0000058B                 lea     ecx, [ebp+var_1C] ; this
.text:0000058E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000593                 mov     eax, [ebp+arg_0]
.text:00000596                 push    edx
.text:00000597                 mov     ecx, ebp
.text:00000599                 push    eax
.text:0000059A                 lea     edx, $LN10
.text:000005A0                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005A5                 pop     eax
.text:000005A6                 pop     edx
.text:000005A7                 mov     ecx, [ebp+var_C]
.text:000005AA                 mov     large fs:0, ecx
.text:000005B1                 pop     ecx
.text:000005B2                 add     esp, 30h
.text:000005B5                 cmp     ebp, esp
.text:000005B7                 call    __RTC_CheckEsp
.text:000005BC                 mov     esp, ebp
.text:000005BE                 pop     ebp
.text:000005BF                 retn    0Ch
.text:000005BF ?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z endp
.text:000005BF
.text:000005BF ; ---------------------------------------------------------------------------
.text:000005C2                 align 4
.text:000005C4 $LN10           dd 2                    ; DATA XREF: UnicodeStringToMultiByte(UString const &,uint)+9Ao
.text:000005C8                 dd offset $LN9_1
.text:000005CC $LN9_1          dd 0FFFFFFE4h, 0Ch      ; DATA XREF: .text:000005C8o
.text:000005D4                 dd offset $LN6_1        ; "dest"
.text:000005D8                 dd 0FFFFFFDBh, 1
.text:000005E0                 dd offset $LN7          ; "defaultCharWasUsed"
.text:000005E4 $LN7            db 'defaultCharWasUsed',0 ; DATA XREF: .text:000005E0o
.text:000005F7 $LN6_1          db 'dest',0             ; DATA XREF: .text:000005D4o
.text:000005F7 _text           ends
.text:000005F7
.xdata$x:000005FC ; ===========================================================================
.xdata$x:000005FC
.xdata$x:000005FC ; Segment type: Pure data
.xdata$x:000005FC ; Segment permissions: Read
.xdata$x:000005FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000005FC                 assume cs:_xdata$x
.xdata$x:000005FC                 ;org 5FCh
.xdata$x:000005FC ; COMDAT (pick any)
.xdata$x:000005FC                 public __TI1H
.xdata$x:000005FC __TI1H          db    0                 ; DATA XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+86o
.xdata$x:000005FC                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+DEo ...
.xdata$x:000005FD                 db    0
.xdata$x:000005FE                 db    0
.xdata$x:000005FF                 db    0
.xdata$x:00000600                 db    0
.xdata$x:00000601                 db    0
.xdata$x:00000602                 db    0
.xdata$x:00000603                 db    0
.xdata$x:00000604                 db    0
.xdata$x:00000605                 db    0
.xdata$x:00000606                 db    0
.xdata$x:00000607                 db    0
.xdata$x:00000608                 dd offset __CTA1H
.xdata$x:00000608 _xdata$x        ends
.xdata$x:00000608
.rtc$TMZ:0000060C ; ===========================================================================
.rtc$TMZ:0000060C
.rtc$TMZ:0000060C ; Segment type: Pure data
.rtc$TMZ:0000060C ; Segment permissions: Read
.rtc$TMZ:0000060C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000060C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000060C                 ;org 60Ch
.rtc$TMZ:0000060C ; COMDAT (pick any)
.rtc$TMZ:0000060C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000060C _rtc$TMZ        ends
.rtc$TMZ:0000060C
.rtc$IMZ:00000610 ; ===========================================================================
.rtc$IMZ:00000610
.rtc$IMZ:00000610 ; Segment type: Pure data
.rtc$IMZ:00000610 ; Segment permissions: Read
.rtc$IMZ:00000610 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000610                 assume cs:_rtc$IMZ
.rtc$IMZ:00000610                 ;org 610h
.rtc$IMZ:00000610 ; COMDAT (pick any)
.rtc$IMZ:00000610 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000610 _rtc$IMZ        ends
.rtc$IMZ:00000610
.xdata$x:00000614 ; ===========================================================================
.xdata$x:00000614
.xdata$x:00000614 ; Segment type: Pure data
.xdata$x:00000614 ; Segment permissions: Read
.xdata$x:00000614 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000614                 assume cs:_xdata$x
.xdata$x:00000614                 ;org 614h
.xdata$x:00000614 ; COMDAT (pick any)
.xdata$x:00000614                 public __CTA1H
.xdata$x:00000614 __CTA1H         db    1                 ; DATA XREF: .xdata$x:00000608o
.xdata$x:00000615                 db    0
.xdata$x:00000616                 db    0
.xdata$x:00000617                 db    0
.xdata$x:00000618                 dd offset __CT??_R0H@84
.xdata$x:00000618 _xdata$x        ends
.xdata$x:00000618
.xdata$x:0000061C ; ===========================================================================
.xdata$x:0000061C
.xdata$x:0000061C ; Segment type: Pure data
.xdata$x:0000061C ; Segment permissions: Read
.xdata$x:0000061C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000061C                 assume cs:_xdata$x
.xdata$x:0000061C                 ;org 61Ch
.xdata$x:0000061C ; COMDAT (pick any)
.xdata$x:0000061C                 public __CT??_R0H@84
.xdata$x:0000061C __CT??_R0H@84   db    1                 ; DATA XREF: .xdata$x:00000618o
.xdata$x:0000061D                 db    0
.xdata$x:0000061E                 db    0
.xdata$x:0000061F                 db    0
.xdata$x:00000620                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00000624                 align 8
.xdata$x:00000628                 db 0FFh
.xdata$x:00000629                 db 0FFh
.xdata$x:0000062A                 db 0FFh
.xdata$x:0000062B                 db 0FFh
.xdata$x:0000062C                 db    0
.xdata$x:0000062D                 db    0
.xdata$x:0000062E                 db    0
.xdata$x:0000062F                 db    0
.xdata$x:00000630                 db    4
.xdata$x:00000631                 db    0
.xdata$x:00000632                 db    0
.xdata$x:00000633                 db    0
.xdata$x:00000634                 db    0
.xdata$x:00000635                 db    0
.xdata$x:00000636                 db    0
.xdata$x:00000637                 db    0
.xdata$x:00000637 _xdata$x        ends
.xdata$x:00000637
.data:00000638 ; ===========================================================================
.data:00000638
.data:00000638 ; Segment type: Pure data
.data:00000638 ; Segment permissions: Read/Write
.data:00000638 _data           segment dword public 'DATA' use32
.data:00000638                 assume cs:_data
.data:00000638                 ;org 638h
.data:00000638 ; COMDAT (pick any)
.data:00000638                 public ??_R0H@8
.data:00000638 ; int `RTTI Type Descriptor'
.data:00000638 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000620o
.data:00000638                                         ; const type_info::`vftable'
.data:0000063C                 align 10h
.data:00000640                 db  2Eh ; .
.data:00000641                 db  48h ; H
.data:00000642                 db    0
.data:00000643                 align 4
.data:00000643 _data           ends
.data:00000643
.text:00000644 ; ===========================================================================
.text:00000644
.text:00000644 ; Segment type: Pure code
.text:00000644 ; Segment permissions: Read/Execute
.text:00000644 _text           segment para public 'CODE' use32
.text:00000644                 assume cs:_text
.text:00000644                 ;org 644h
.text:00000644 ; COMDAT (pick any)
.text:00000644                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000644
.text:00000644 ; =============== S U B R O U T I N E =======================================
.text:00000644
.text:00000644 ; Attributes: bp-based frame
.text:00000644
.text:00000644 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00000644                 public ?Len@AString@@QBEIXZ
.text:00000644 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+41p
.text:00000644                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+ACp
.text:00000644
.text:00000644 var_4           = dword ptr -4
.text:00000644
.text:00000644                 push    ebp
.text:00000645                 mov     ebp, esp
.text:00000647                 push    ecx
.text:00000648                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000064F                 mov     [ebp+var_4], ecx
.text:00000652                 mov     eax, [ebp+var_4]
.text:00000655                 mov     eax, [eax+4]
.text:00000658                 mov     esp, ebp
.text:0000065A                 pop     ebp
.text:0000065B                 retn
.text:0000065B ?Len@AString@@QBEIXZ endp
.text:0000065B
.text:0000065B _text           ends
.text:0000065B
.text:0000065C ; ===========================================================================
.text:0000065C
.text:0000065C ; Segment type: Pure code
.text:0000065C ; Segment permissions: Read/Execute
.text:0000065C _text           segment para public 'CODE' use32
.text:0000065C                 assume cs:_text
.text:0000065C                 ;org 65Ch
.text:0000065C ; COMDAT (pick any)
.text:0000065C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000065C
.text:0000065C ; =============== S U B R O U T I N E =======================================
.text:0000065C
.text:0000065C ; Attributes: bp-based frame
.text:0000065C
.text:0000065C ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:0000065C                 public ?IsEmpty@AString@@QBE_NXZ
.text:0000065C ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+27p
.text:0000065C
.text:0000065C var_4           = dword ptr -4
.text:0000065C
.text:0000065C                 push    ebp
.text:0000065D                 mov     ebp, esp
.text:0000065F                 push    ecx
.text:00000660                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000667                 mov     [ebp+var_4], ecx
.text:0000066A                 mov     eax, [ebp+var_4]
.text:0000066D                 xor     ecx, ecx
.text:0000066F                 cmp     dword ptr [eax+4], 0
.text:00000673                 setz    cl
.text:00000676                 mov     al, cl
.text:00000678                 mov     esp, ebp
.text:0000067A                 pop     ebp
.text:0000067B                 retn
.text:0000067B ?IsEmpty@AString@@QBE_NXZ endp
.text:0000067B
.text:0000067B _text           ends
.text:0000067B
.text:0000067C ; ===========================================================================
.text:0000067C
.text:0000067C ; Segment type: Pure code
.text:0000067C ; Segment permissions: Read/Execute
.text:0000067C _text           segment para public 'CODE' use32
.text:0000067C                 assume cs:_text
.text:0000067C                 ;org 67Ch
.text:0000067C ; COMDAT (pick any)
.text:0000067C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000067C
.text:0000067C ; =============== S U B R O U T I N E =======================================
.text:0000067C
.text:0000067C ; Attributes: bp-based frame
.text:0000067C
.text:0000067C ; public: __thiscall AString::operator char const *(void)const
.text:0000067C                 public ??BAString@@QBEPBDXZ
.text:0000067C ??BAString@@QBEPBDXZ proc near          ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+4Ap
.text:0000067C                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+B5p
.text:0000067C
.text:0000067C var_4           = dword ptr -4
.text:0000067C
.text:0000067C                 push    ebp
.text:0000067D                 mov     ebp, esp
.text:0000067F                 push    ecx
.text:00000680                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000687                 mov     [ebp+var_4], ecx
.text:0000068A                 mov     eax, [ebp+var_4]
.text:0000068D                 mov     eax, [eax]
.text:0000068F                 mov     esp, ebp
.text:00000691                 pop     ebp
.text:00000692                 retn
.text:00000692 ??BAString@@QBEPBDXZ endp
.text:00000692
.text:00000692 ; ---------------------------------------------------------------------------
.text:00000693                 align 4
.text:00000693 _text           ends
.text:00000693
.text:00000694 ; ===========================================================================
.text:00000694
.text:00000694 ; Segment type: Pure code
.text:00000694 ; Segment permissions: Read/Execute
.text:00000694 _text           segment para public 'CODE' use32
.text:00000694                 assume cs:_text
.text:00000694                 ;org 694h
.text:00000694 ; COMDAT (pick any)
.text:00000694                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000694
.text:00000694 ; =============== S U B R O U T I N E =======================================
.text:00000694
.text:00000694 ; Attributes: bp-based frame
.text:00000694
.text:00000694 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00000694                 public ?Empty@UString@@QAEXXZ
.text:00000694 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+1Fp
.text:00000694
.text:00000694 var_4           = dword ptr -4
.text:00000694
.text:00000694                 push    ebp
.text:00000695                 mov     ebp, esp
.text:00000697                 push    ecx
.text:00000698                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000069F                 mov     [ebp+var_4], ecx
.text:000006A2                 mov     eax, [ebp+var_4]
.text:000006A5                 mov     dword ptr [eax+4], 0
.text:000006AC                 mov     ecx, [ebp+var_4]
.text:000006AF                 mov     edx, [ecx]
.text:000006B1                 xor     eax, eax
.text:000006B3                 mov     [edx], ax
.text:000006B6                 mov     esp, ebp
.text:000006B8                 pop     ebp
.text:000006B9                 retn
.text:000006B9 ?Empty@UString@@QAEXXZ endp
.text:000006B9
.text:000006B9 ; ---------------------------------------------------------------------------
.text:000006BA                 align 4
.text:000006BA _text           ends
.text:000006BA
.text:000006BC ; ===========================================================================
.text:000006BC
.text:000006BC ; Segment type: Pure code
.text:000006BC ; Segment permissions: Read/Execute
.text:000006BC _text           segment para public 'CODE' use32
.text:000006BC                 assume cs:_text
.text:000006BC                 ;org 6BCh
.text:000006BC ; COMDAT (pick any)
.text:000006BC                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000006BC
.text:000006BC ; =============== S U B R O U T I N E =======================================
.text:000006BC
.text:000006BC ; Attributes: bp-based frame
.text:000006BC
.text:000006BC ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:000006BC                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:000006BC ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+A3p
.text:000006BC
.text:000006BC var_4           = dword ptr -4
.text:000006BC arg_0           = dword ptr  8
.text:000006BC
.text:000006BC                 push    ebp
.text:000006BD                 mov     ebp, esp
.text:000006BF                 push    ecx
.text:000006C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006C7                 mov     [ebp+var_4], ecx
.text:000006CA                 mov     eax, [ebp+var_4]
.text:000006CD                 mov     ecx, [ebp+arg_0]
.text:000006D0                 cmp     ecx, [eax+8]
.text:000006D3                 jbe     short loc_6E1
.text:000006D5                 mov     edx, [ebp+arg_0]
.text:000006D8                 push    edx             ; unsigned int
.text:000006D9                 mov     ecx, [ebp+var_4] ; this
.text:000006DC                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:000006E1
.text:000006E1 loc_6E1:                                ; CODE XREF: UString::GetBuf(uint)+17j
.text:000006E1                 mov     eax, [ebp+var_4]
.text:000006E4                 mov     eax, [eax]
.text:000006E6                 add     esp, 4
.text:000006E9                 cmp     ebp, esp
.text:000006EB                 call    __RTC_CheckEsp
.text:000006F0                 mov     esp, ebp
.text:000006F2                 pop     ebp
.text:000006F3                 retn    4
.text:000006F3 ?GetBuf@UString@@QAEPA_WI@Z endp
.text:000006F3
.text:000006F3 ; ---------------------------------------------------------------------------
.text:000006F6                 align 4
.text:000006F6 _text           ends
.text:000006F6
.text:000006F8 ; ===========================================================================
.text:000006F8
.text:000006F8 ; Segment type: Pure code
.text:000006F8 ; Segment permissions: Read/Execute
.text:000006F8 _text           segment para public 'CODE' use32
.text:000006F8                 assume cs:_text
.text:000006F8                 ;org 6F8h
.text:000006F8 ; COMDAT (pick any)
.text:000006F8                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000006F8
.text:000006F8 ; =============== S U B R O U T I N E =======================================
.text:000006F8
.text:000006F8 ; Attributes: bp-based frame
.text:000006F8
.text:000006F8 ; void __thiscall UString::ReleaseBuf_SetEnd(UString *this, unsigned int)
.text:000006F8                 public ?ReleaseBuf_SetEnd@UString@@QAEXI@Z
.text:000006F8 ?ReleaseBuf_SetEnd@UString@@QAEXI@Z proc near
.text:000006F8                                         ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+F3p
.text:000006F8
.text:000006F8 var_4           = dword ptr -4
.text:000006F8 arg_0           = dword ptr  8
.text:000006F8
.text:000006F8                 push    ebp
.text:000006F9                 mov     ebp, esp
.text:000006FB                 push    ecx
.text:000006FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000703                 mov     [ebp+var_4], ecx
.text:00000706                 mov     eax, [ebp+var_4]
.text:00000709                 mov     ecx, [ebp+arg_0]
.text:0000070C                 mov     [eax+4], ecx
.text:0000070F                 mov     edx, [ebp+var_4]
.text:00000712                 mov     eax, [edx]
.text:00000714                 xor     ecx, ecx
.text:00000716                 mov     edx, [ebp+arg_0]
.text:00000719                 mov     [eax+edx*2], cx
.text:0000071D                 mov     esp, ebp
.text:0000071F                 pop     ebp
.text:00000720                 retn    4
.text:00000720 ?ReleaseBuf_SetEnd@UString@@QAEXI@Z endp
.text:00000720
.text:00000720 ; ---------------------------------------------------------------------------
.text:00000723                 align 4
.text:00000723 _text           ends
.text:00000723
.text$x:00000724 ; ===========================================================================
.text$x:00000724
.text$x:00000724 ; Segment type: Pure code
.text$x:00000724 ; Segment permissions: Read/Execute
.text$x:00000724 _text$x         segment para public 'CODE' use32
.text$x:00000724                 assume cs:_text$x
.text$x:00000724                 ;org 724h
.text$x:00000724                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text$x:00000724
.text$x:00000724 ; =============== S U B R O U T I N E =======================================
.text$x:00000724
.text$x:00000724
.text$x:00000724 __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$0 proc near
.text$x:00000724                                         ; DATA XREF: .xdata$x:000007E4o
.text$x:00000724                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000727                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000727 __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$0 endp
.text$x:00000727
.text$x:0000072C
.text$x:0000072C ; =============== S U B R O U T I N E =======================================
.text$x:0000072C
.text$x:0000072C
.text$x:0000072C __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$1 proc near
.text$x:0000072C                                         ; DATA XREF: .xdata$x:000007DCo
.text$x:0000072C                 mov     eax, [ebp-24h]
.text$x:0000072F                 and     eax, 1
.text$x:00000732                 jz      locret_744
.text$x:00000738                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:0000073C                 mov     ecx, [ebp+8]    ; this
.text$x:0000073F                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000744 ; ---------------------------------------------------------------------------
.text$x:00000744
.text$x:00000744 locret_744:                             ; CODE XREF: __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$1+6j
.text$x:00000744                 retn
.text$x:00000744 __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$1 endp
.text$x:00000744
.text$x:00000745
.text$x:00000745 ; =============== S U B R O U T I N E =======================================
.text$x:00000745
.text$x:00000745
.text$x:00000745 __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z proc near
.text$x:00000745                                         ; DATA XREF: MultiByteToUnicodeString(AString const &,uint)+5o
.text$x:00000745
.text$x:00000745 arg_4           = dword ptr  8
.text$x:00000745
.text$x:00000745                 mov     edx, [esp+arg_4]
.text$x:00000749                 lea     eax, [edx+0Ch]
.text$x:0000074C                 mov     ecx, [edx-1Ch]
.text$x:0000074F                 xor     ecx, eax
.text$x:00000751                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000756                 mov     eax, offset __ehfuncinfo$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z
.text$x:0000075B                 jmp     ___CxxFrameHandler3
.text$x:0000075B __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z endp
.text$x:0000075B
.text$x:00000760
.text$x:00000760 ; =============== S U B R O U T I N E =======================================
.text$x:00000760
.text$x:00000760
.text$x:00000760 __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$0 proc near
.text$x:00000760                                         ; DATA XREF: .xdata$x:00000818o
.text$x:00000760                 lea     ecx, [ebp-1Ch]  ; this
.text$x:00000763                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000763 __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$0 endp
.text$x:00000763
.text$x:00000768
.text$x:00000768 ; =============== S U B R O U T I N E =======================================
.text$x:00000768
.text$x:00000768
.text$x:00000768 __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$1 proc near
.text$x:00000768                                         ; DATA XREF: .xdata$x:00000810o
.text$x:00000768                 mov     eax, [ebp-24h]
.text$x:0000076B                 and     eax, 1
.text$x:0000076E                 jz      locret_780
.text$x:00000774                 and     dword ptr [ebp-24h], 0FFFFFFFEh
.text$x:00000778                 mov     ecx, [ebp+8]    ; this
.text$x:0000077B                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000780 ; ---------------------------------------------------------------------------
.text$x:00000780
.text$x:00000780 locret_780:                             ; CODE XREF: __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$1+6j
.text$x:00000780                 retn
.text$x:00000780 __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$1 endp
.text$x:00000780
.text$x:00000781
.text$x:00000781 ; =============== S U B R O U T I N E =======================================
.text$x:00000781
.text$x:00000781
.text$x:00000781 __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z proc near
.text$x:00000781                                         ; DATA XREF: UnicodeStringToMultiByte(UString const &,uint,char,bool &)+5o
.text$x:00000781
.text$x:00000781 arg_4           = dword ptr  8
.text$x:00000781
.text$x:00000781                 mov     edx, [esp+arg_4]
.text$x:00000785                 lea     eax, [edx+0Ch]
.text$x:00000788                 mov     ecx, [edx-1Ch]
.text$x:0000078B                 xor     ecx, eax
.text$x:0000078D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000792                 mov     eax, offset __ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z
.text$x:00000797                 jmp     ___CxxFrameHandler3
.text$x:00000797 __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z endp
.text$x:00000797
.text$x:0000079C
.text$x:0000079C ; =============== S U B R O U T I N E =======================================
.text$x:0000079C
.text$x:0000079C
.text$x:0000079C __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$0 proc near
.text$x:0000079C                                         ; DATA XREF: .xdata$x:0000084Co
.text$x:0000079C                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000079F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000079F __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$0 endp
.text$x:0000079F
.text$x:000007A4
.text$x:000007A4 ; =============== S U B R O U T I N E =======================================
.text$x:000007A4
.text$x:000007A4
.text$x:000007A4 __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$1 proc near
.text$x:000007A4                                         ; DATA XREF: .xdata$x:00000844o
.text$x:000007A4                 mov     eax, [ebp-30h]
.text$x:000007A7                 and     eax, 1
.text$x:000007AA                 jz      locret_7BC
.text$x:000007B0                 and     dword ptr [ebp-30h], 0FFFFFFFEh
.text$x:000007B4                 mov     ecx, [ebp+8]    ; this
.text$x:000007B7                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000007BC ; ---------------------------------------------------------------------------
.text$x:000007BC
.text$x:000007BC locret_7BC:                             ; CODE XREF: __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$1+6j
.text$x:000007BC                 retn
.text$x:000007BC __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$1 endp
.text$x:000007BC
.text$x:000007BD
.text$x:000007BD ; =============== S U B R O U T I N E =======================================
.text$x:000007BD
.text$x:000007BD
.text$x:000007BD __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z proc near
.text$x:000007BD                                         ; DATA XREF: UnicodeStringToMultiByte(UString const &,uint)+5o
.text$x:000007BD
.text$x:000007BD arg_4           = dword ptr  8
.text$x:000007BD
.text$x:000007BD                 mov     edx, [esp+arg_4]
.text$x:000007C1                 lea     eax, [edx+0Ch]
.text$x:000007C4                 mov     ecx, [edx-28h]
.text$x:000007C7                 xor     ecx, eax
.text$x:000007C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000007CE                 mov     eax, offset __ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z
.text$x:000007D3                 jmp     ___CxxFrameHandler3
.text$x:000007D3 __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z endp
.text$x:000007D3
.text$x:000007D3 _text$x         ends
.text$x:000007D3
.xdata$x:000007D8 ; ===========================================================================
.xdata$x:000007D8
.xdata$x:000007D8 ; Segment type: Pure data
.xdata$x:000007D8 ; Segment permissions: Read
.xdata$x:000007D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000007D8                 assume cs:_xdata$x
.xdata$x:000007D8                 ;org 7D8h
.xdata$x:000007D8 __unwindtable$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z db 0FFh
.xdata$x:000007D8                                         ; DATA XREF: .xdata$x:000007F0o
.xdata$x:000007D9                 db 0FFh
.xdata$x:000007DA                 db 0FFh
.xdata$x:000007DB                 db 0FFh
.xdata$x:000007DC                 dd offset __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$1
.xdata$x:000007E0                 db    0
.xdata$x:000007E1                 db    0
.xdata$x:000007E2                 db    0
.xdata$x:000007E3                 db    0
.xdata$x:000007E4                 dd offset __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$0
.xdata$x:000007E8 __ehfuncinfo$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z db  22h ; "
.xdata$x:000007E8                                         ; DATA XREF: __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z+11o
.xdata$x:000007E9                 db    5
.xdata$x:000007EA                 db  93h ; ô
.xdata$x:000007EB                 db  19h
.xdata$x:000007EC                 db    2
.xdata$x:000007ED                 db    0
.xdata$x:000007EE                 db    0
.xdata$x:000007EF                 db    0
.xdata$x:000007F0                 dd offset __unwindtable$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z
.xdata$x:000007F4                 db    0
.xdata$x:000007F5                 db    0
.xdata$x:000007F6                 db    0
.xdata$x:000007F7                 db    0
.xdata$x:000007F8                 db    0
.xdata$x:000007F9                 db    0
.xdata$x:000007FA                 db    0
.xdata$x:000007FB                 db    0
.xdata$x:000007FC                 db    0
.xdata$x:000007FD                 db    0
.xdata$x:000007FE                 db    0
.xdata$x:000007FF                 db    0
.xdata$x:00000800                 db    0
.xdata$x:00000801                 db    0
.xdata$x:00000802                 db    0
.xdata$x:00000803                 db    0
.xdata$x:00000804                 db    0
.xdata$x:00000805                 db    0
.xdata$x:00000806                 db    0
.xdata$x:00000807                 db    0
.xdata$x:00000808                 db    1
.xdata$x:00000809                 db    0
.xdata$x:0000080A                 db    0
.xdata$x:0000080B                 db    0
.xdata$x:0000080C __unwindtable$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z db 0FFh
.xdata$x:0000080C                                         ; DATA XREF: .xdata$x:00000824o
.xdata$x:0000080D                 db 0FFh
.xdata$x:0000080E                 db 0FFh
.xdata$x:0000080F                 db 0FFh
.xdata$x:00000810                 dd offset __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$1
.xdata$x:00000814                 align 8
.xdata$x:00000818                 dd offset __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$0
.xdata$x:0000081C __ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z db  22h ; "
.xdata$x:0000081C                                         ; DATA XREF: __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z+11o
.xdata$x:0000081D                 db    5
.xdata$x:0000081E                 db  93h ; ô
.xdata$x:0000081F                 db  19h
.xdata$x:00000820                 db    2
.xdata$x:00000821                 db    0
.xdata$x:00000822                 db    0
.xdata$x:00000823                 db    0
.xdata$x:00000824                 dd offset __unwindtable$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z
.xdata$x:00000828                 db    0
.xdata$x:00000829                 db    0
.xdata$x:0000082A                 db    0
.xdata$x:0000082B                 db    0
.xdata$x:0000082C                 db    0
.xdata$x:0000082D                 db    0
.xdata$x:0000082E                 db    0
.xdata$x:0000082F                 db    0
.xdata$x:00000830                 db    0
.xdata$x:00000831                 db    0
.xdata$x:00000832                 db    0
.xdata$x:00000833                 db    0
.xdata$x:00000834                 db    0
.xdata$x:00000835                 db    0
.xdata$x:00000836                 db    0
.xdata$x:00000837                 db    0
.xdata$x:00000838                 db    0
.xdata$x:00000839                 db    0
.xdata$x:0000083A                 db    0
.xdata$x:0000083B                 db    0
.xdata$x:0000083C                 db    1
.xdata$x:0000083D                 db    0
.xdata$x:0000083E                 db    0
.xdata$x:0000083F                 db    0
.xdata$x:00000840 __unwindtable$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z db 0FFh
.xdata$x:00000840                                         ; DATA XREF: .xdata$x:00000858o
.xdata$x:00000841                 db 0FFh
.xdata$x:00000842                 db 0FFh
.xdata$x:00000843                 db 0FFh
.xdata$x:00000844                 dd offset __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$1
.xdata$x:00000848                 db    0
.xdata$x:00000849                 db    0
.xdata$x:0000084A                 db    0
.xdata$x:0000084B                 db    0
.xdata$x:0000084C                 dd offset __unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$0
.xdata$x:00000850 __ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z db  22h ; "
.xdata$x:00000850                                         ; DATA XREF: __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z+11o
.xdata$x:00000851                 db    5
.xdata$x:00000852                 db  93h ; ô
.xdata$x:00000853                 db  19h
.xdata$x:00000854                 db    2
.xdata$x:00000855                 db    0
.xdata$x:00000856                 db    0
.xdata$x:00000857                 db    0
.xdata$x:00000858                 dd offset __unwindtable$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z
.xdata$x:0000085C                 db    0
.xdata$x:0000085D                 db    0
.xdata$x:0000085E                 db    0
.xdata$x:0000085F                 db    0
.xdata$x:00000860                 db    0
.xdata$x:00000861                 db    0
.xdata$x:00000862                 db    0
.xdata$x:00000863                 db    0
.xdata$x:00000864                 db    0
.xdata$x:00000865                 db    0
.xdata$x:00000866                 db    0
.xdata$x:00000867                 db    0
.xdata$x:00000868                 db    0
.xdata$x:00000869                 db    0
.xdata$x:0000086A                 db    0
.xdata$x:0000086B                 db    0
.xdata$x:0000086C                 db    0
.xdata$x:0000086D                 db    0
.xdata$x:0000086E                 db    0
.xdata$x:0000086F                 db    0
.xdata$x:00000870                 db    1
.xdata$x:00000871                 db    0
.xdata$x:00000872                 db    0
.xdata$x:00000873                 db    0
.xdata$x:00000873 _xdata$x        ends
.xdata$x:00000873
.text:00000874 ; ===========================================================================
.text:00000874
.text:00000874 ; Segment type: Pure code
.text:00000874 ; Segment permissions: Read/Execute
.text:00000874 _text           segment para public 'CODE' use32
.text:00000874                 assume cs:_text
.text:00000874                 ;org 874h
.text:00000874 ; COMDAT (pick any)
.text:00000874                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000874
.text:00000874 ; =============== S U B R O U T I N E =======================================
.text:00000874
.text:00000874 ; Attributes: bp-based frame
.text:00000874
.text:00000874 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000874                 public ??1UString@@QAE@XZ
.text:00000874 ??1UString@@QAE@XZ proc near            ; CODE XREF: MultiByteToUnicodeString(AString const &,uint)+7Fp
.text:00000874                                         ; __unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$0+3j ...
.text:00000874
.text:00000874 var_8           = dword ptr -8
.text:00000874 var_4           = dword ptr -4
.text:00000874
.text:00000874                 push    ebp
.text:00000875                 mov     ebp, esp
.text:00000877                 sub     esp, 8
.text:0000087A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000881                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000888                 mov     [ebp+var_4], ecx
.text:0000088B                 mov     eax, [ebp+var_4]
.text:0000088E                 mov     ecx, [eax]
.text:00000890                 mov     [ebp+var_8], ecx
.text:00000893                 mov     edx, [ebp+var_8]
.text:00000896                 push    edx             ; void *
.text:00000897                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000089C                 add     esp, 4
.text:0000089F                 add     esp, 8
.text:000008A2                 cmp     ebp, esp
.text:000008A4                 call    __RTC_CheckEsp
.text:000008A9                 mov     esp, ebp
.text:000008AB                 pop     ebp
.text:000008AC                 retn
.text:000008AC ??1UString@@QAE@XZ endp
.text:000008AC
.text:000008AC ; ---------------------------------------------------------------------------
.text:000008AD                 align 10h
.text:000008AD _text           ends
.text:000008AD
.text:000008B0 ; ===========================================================================
.text:000008B0
.text:000008B0 ; Segment type: Pure code
.text:000008B0 ; Segment permissions: Read/Execute
.text:000008B0 _text           segment para public 'CODE' use32
.text:000008B0                 assume cs:_text
.text:000008B0                 ;org 8B0h
.text:000008B0 ; COMDAT (pick any)
.text:000008B0                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008B0
.text:000008B0 ; =============== S U B R O U T I N E =======================================
.text:000008B0
.text:000008B0 ; Attributes: bp-based frame
.text:000008B0
.text:000008B0 ; void __thiscall AString::Empty(AString *__hidden this)
.text:000008B0                 public ?Empty@AString@@QAEXXZ
.text:000008B0 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+27p
.text:000008B0
.text:000008B0 var_4           = dword ptr -4
.text:000008B0
.text:000008B0                 push    ebp
.text:000008B1                 mov     ebp, esp
.text:000008B3                 push    ecx
.text:000008B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008BB                 mov     [ebp+var_4], ecx
.text:000008BE                 mov     eax, [ebp+var_4]
.text:000008C1                 mov     dword ptr [eax+4], 0
.text:000008C8                 mov     ecx, [ebp+var_4]
.text:000008CB                 mov     edx, [ecx]
.text:000008CD                 mov     byte ptr [edx], 0
.text:000008D0                 mov     esp, ebp
.text:000008D2                 pop     ebp
.text:000008D3                 retn
.text:000008D3 ?Empty@AString@@QAEXXZ endp
.text:000008D3
.text:000008D3 _text           ends
.text:000008D3
.text:000008D4 ; ===========================================================================
.text:000008D4
.text:000008D4 ; Segment type: Pure code
.text:000008D4 ; Segment permissions: Read/Execute
.text:000008D4 _text           segment para public 'CODE' use32
.text:000008D4                 assume cs:_text
.text:000008D4                 ;org 8D4h
.text:000008D4 ; COMDAT (pick any)
.text:000008D4                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:000008D4
.text:000008D4 ; =============== S U B R O U T I N E =======================================
.text:000008D4
.text:000008D4 ; Attributes: bp-based frame
.text:000008D4
.text:000008D4 ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:000008D4                 public ?GetBuf@AString@@QAEPADI@Z
.text:000008D4 ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+10Dp
.text:000008D4
.text:000008D4 var_4           = dword ptr -4
.text:000008D4 arg_0           = dword ptr  8
.text:000008D4
.text:000008D4                 push    ebp
.text:000008D5                 mov     ebp, esp
.text:000008D7                 push    ecx
.text:000008D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008DF                 mov     [ebp+var_4], ecx
.text:000008E2                 mov     eax, [ebp+var_4]
.text:000008E5                 mov     ecx, [ebp+arg_0]
.text:000008E8                 cmp     ecx, [eax+8]
.text:000008EB                 jbe     short loc_8F9
.text:000008ED                 mov     edx, [ebp+arg_0]
.text:000008F0                 push    edx             ; unsigned int
.text:000008F1                 mov     ecx, [ebp+var_4] ; this
.text:000008F4                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:000008F9
.text:000008F9 loc_8F9:                                ; CODE XREF: AString::GetBuf(uint)+17j
.text:000008F9                 mov     eax, [ebp+var_4]
.text:000008FC                 mov     eax, [eax]
.text:000008FE                 add     esp, 4
.text:00000901                 cmp     ebp, esp
.text:00000903                 call    __RTC_CheckEsp
.text:00000908                 mov     esp, ebp
.text:0000090A                 pop     ebp
.text:0000090B                 retn    4
.text:0000090B ?GetBuf@AString@@QAEPADI@Z endp
.text:0000090B
.text:0000090B ; ---------------------------------------------------------------------------
.text:0000090E                 align 10h
.text:0000090E _text           ends
.text:0000090E
.text:00000910 ; ===========================================================================
.text:00000910
.text:00000910 ; Segment type: Pure code
.text:00000910 ; Segment permissions: Read/Execute
.text:00000910 _text           segment para public 'CODE' use32
.text:00000910                 assume cs:_text
.text:00000910                 ;org 910h
.text:00000910 ; COMDAT (pick any)
.text:00000910                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000910
.text:00000910 ; =============== S U B R O U T I N E =======================================
.text:00000910
.text:00000910 ; Attributes: bp-based frame
.text:00000910
.text:00000910 ; void __thiscall AString::ReleaseBuf_SetEnd(AString *this, unsigned int)
.text:00000910                 public ?ReleaseBuf_SetEnd@AString@@QAEXI@Z
.text:00000910 ?ReleaseBuf_SetEnd@AString@@QAEXI@Z proc near
.text:00000910                                         ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+173p
.text:00000910
.text:00000910 var_4           = dword ptr -4
.text:00000910 arg_0           = dword ptr  8
.text:00000910
.text:00000910                 push    ebp
.text:00000911                 mov     ebp, esp
.text:00000913                 push    ecx
.text:00000914                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000091B                 mov     [ebp+var_4], ecx
.text:0000091E                 mov     eax, [ebp+var_4]
.text:00000921                 mov     ecx, [ebp+arg_0]
.text:00000924                 mov     [eax+4], ecx
.text:00000927                 mov     edx, [ebp+var_4]
.text:0000092A                 mov     eax, [edx]
.text:0000092C                 mov     ecx, [ebp+arg_0]
.text:0000092F                 mov     byte ptr [eax+ecx], 0
.text:00000933                 mov     esp, ebp
.text:00000935                 pop     ebp
.text:00000936                 retn    4
.text:00000936 ?ReleaseBuf_SetEnd@AString@@QAEXI@Z endp
.text:00000936
.text:00000936 ; ---------------------------------------------------------------------------
.text:00000939                 align 4
.text:00000939 _text           ends
.text:00000939
.text:0000093C ; ===========================================================================
.text:0000093C
.text:0000093C ; Segment type: Pure code
.text:0000093C ; Segment permissions: Read/Execute
.text:0000093C _text           segment para public 'CODE' use32
.text:0000093C                 assume cs:_text
.text:0000093C                 ;org 93Ch
.text:0000093C ; COMDAT (pick any)
.text:0000093C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000093C
.text:0000093C ; =============== S U B R O U T I N E =======================================
.text:0000093C
.text:0000093C ; Attributes: bp-based frame
.text:0000093C
.text:0000093C ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:0000093C                 public ?Len@UString@@QBEIXZ
.text:0000093C ?Len@UString@@QBEIXZ proc near          ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+53p
.text:0000093C                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+116p
.text:0000093C
.text:0000093C var_4           = dword ptr -4
.text:0000093C
.text:0000093C                 push    ebp
.text:0000093D                 mov     ebp, esp
.text:0000093F                 push    ecx
.text:00000940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000947                 mov     [ebp+var_4], ecx
.text:0000094A                 mov     eax, [ebp+var_4]
.text:0000094D                 mov     eax, [eax+4]
.text:00000950                 mov     esp, ebp
.text:00000952                 pop     ebp
.text:00000953                 retn
.text:00000953 ?Len@UString@@QBEIXZ endp
.text:00000953
.text:00000953 _text           ends
.text:00000953
.text:00000954 ; ===========================================================================
.text:00000954
.text:00000954 ; Segment type: Pure code
.text:00000954 ; Segment permissions: Read/Execute
.text:00000954 _text           segment para public 'CODE' use32
.text:00000954                 assume cs:_text
.text:00000954                 ;org 954h
.text:00000954 ; COMDAT (pick any)
.text:00000954                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000954
.text:00000954 ; =============== S U B R O U T I N E =======================================
.text:00000954
.text:00000954 ; Attributes: bp-based frame
.text:00000954
.text:00000954 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000954                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000954 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+35p
.text:00000954
.text:00000954 var_4           = dword ptr -4
.text:00000954
.text:00000954                 push    ebp
.text:00000955                 mov     ebp, esp
.text:00000957                 push    ecx
.text:00000958                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000095F                 mov     [ebp+var_4], ecx
.text:00000962                 mov     eax, [ebp+var_4]
.text:00000965                 xor     ecx, ecx
.text:00000967                 cmp     dword ptr [eax+4], 0
.text:0000096B                 setz    cl
.text:0000096E                 mov     al, cl
.text:00000970                 mov     esp, ebp
.text:00000972                 pop     ebp
.text:00000973                 retn
.text:00000973 ?IsEmpty@UString@@QBE_NXZ endp
.text:00000973
.text:00000973 _text           ends
.text:00000973
.text:00000974 ; ===========================================================================
.text:00000974
.text:00000974 ; Segment type: Pure code
.text:00000974 ; Segment permissions: Read/Execute
.text:00000974 _text           segment para public 'CODE' use32
.text:00000974                 assume cs:_text
.text:00000974                 ;org 974h
.text:00000974 ; COMDAT (pick any)
.text:00000974                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:00000974
.text:00000974 ; =============== S U B R O U T I N E =======================================
.text:00000974
.text:00000974 ; Attributes: bp-based frame
.text:00000974
.text:00000974 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000974                 public ??BUString@@QBEPB_WXZ
.text:00000974 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+5Cp
.text:00000974                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+11Fp
.text:00000974
.text:00000974 var_4           = dword ptr -4
.text:00000974
.text:00000974                 push    ebp
.text:00000975                 mov     ebp, esp
.text:00000977                 push    ecx
.text:00000978                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000097F                 mov     [ebp+var_4], ecx
.text:00000982                 mov     eax, [ebp+var_4]
.text:00000985                 mov     eax, [eax]
.text:00000987                 mov     esp, ebp
.text:00000989                 pop     ebp
.text:0000098A                 retn
.text:0000098A ??BUString@@QBEPB_WXZ endp
.text:0000098A
.text:0000098A ; ---------------------------------------------------------------------------
.text:0000098B                 align 4
.text:0000098B _text           ends
.text:0000098B
.text:0000098C ; ===========================================================================
.text:0000098C
.text:0000098C ; Segment type: Pure code
.text:0000098C ; Segment permissions: Read/Execute
.text:0000098C _text           segment para public 'CODE' use32
.text:0000098C                 assume cs:_text
.text:0000098C                 ;org 98Ch
.text:0000098C ; COMDAT (pick any)
.text:0000098C                 assume es:nothing, ss:nothing, ds:_xdata$x, fs:nothing, gs:nothing
.text:0000098C
.text:0000098C ; =============== S U B R O U T I N E =======================================
.text:0000098C
.text:0000098C ; Attributes: bp-based frame
.text:0000098C
.text:0000098C ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:0000098C                 public ??1AString@@QAE@XZ
.text:0000098C ??1AString@@QAE@XZ proc near            ; CODE XREF: UnicodeStringToMultiByte(UString const &,uint,char,bool &)+88p
.text:0000098C                                         ; UnicodeStringToMultiByte(UString const &,uint)+8Ep ...
.text:0000098C
.text:0000098C var_8           = dword ptr -8
.text:0000098C var_4           = dword ptr -4
.text:0000098C
.text:0000098C                 push    ebp
.text:0000098D                 mov     ebp, esp
.text:0000098F                 sub     esp, 8
.text:00000992                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000999                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A0                 mov     [ebp+var_4], ecx
.text:000009A3                 mov     eax, [ebp+var_4]
.text:000009A6                 mov     ecx, [eax]
.text:000009A8                 mov     [ebp+var_8], ecx
.text:000009AB                 mov     edx, [ebp+var_8]
.text:000009AE                 push    edx             ; void *
.text:000009AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009B4                 add     esp, 4
.text:000009B7                 add     esp, 8
.text:000009BA                 cmp     ebp, esp
.text:000009BC                 call    __RTC_CheckEsp
.text:000009C1                 mov     esp, ebp
.text:000009C3                 pop     ebp
.text:000009C4                 retn
.text:000009C4 ??1AString@@QAE@XZ endp
.text:000009C4
.text:000009C4 _text           ends
.text:000009C4
UNDEF:000009D0 ; ===========================================================================
UNDEF:000009D0
UNDEF:000009D0 ; Segment type: Externs
UNDEF:000009D0 ; UNDEF
UNDEF:000009D0 ; DWORD __stdcall GetLastError()
UNDEF:000009D0                 extrn __imp__GetLastError@0:near
UNDEF:000009D0                                         ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+6Ep
UNDEF:000009D0                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+80p
UNDEF:000009D0                                         ; DATA XREF: ...
UNDEF:000009D4 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
UNDEF:000009D4                 extrn __imp__MultiByteToWideChar@24:near
UNDEF:000009D4                                         ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+56p
UNDEF:000009D4                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+C1p
UNDEF:000009D4                                         ; DATA XREF: ...
UNDEF:000009D8                 extrn __RTC_CheckEsp:near
UNDEF:000009D8                                         ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+5Ep
UNDEF:000009D8                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+76p ...
UNDEF:000009DC                 extrn __RTC_Shutdown:near
UNDEF:000009DC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000009E0                 extrn __RTC_InitBase:near
UNDEF:000009E0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000009E4 ; __stdcall _CxxThrowException(x, x)
UNDEF:000009E4                 extrn __CxxThrowException@8:near
UNDEF:000009E4                                         ; CODE XREF: MultiByteToUnicodeString2(UString &,AString const &,uint)+8Fp
UNDEF:000009E4                                         ; MultiByteToUnicodeString2(UString &,AString const &,uint)+E7p ...
UNDEF:000009E8 ; const type_info::`vftable'
UNDEF:000009E8                 extrn ??_7type_info@@6B@:near
UNDEF:000009E8                                         ; DATA XREF: .data:int `RTTI Type Descriptor'o
UNDEF:000009EC ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:000009EC                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:000009EC                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:000009F0 ; public: __thiscall UString::UString(class UString const &)
UNDEF:000009F0                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:000009F0                                         ; CODE XREF: MultiByteToUnicodeString(AString const &,uint)+6Ap
UNDEF:000009F4 ; public: __thiscall UString::UString(void)
UNDEF:000009F4                 extrn ??0UString@@QAE@XZ:near
UNDEF:000009F4                                         ; CODE XREF: MultiByteToUnicodeString(AString const &,uint)+46p
UNDEF:000009F8                 extrn ___security_cookie:near
UNDEF:000009F8                                         ; DATA XREF: MultiByteToUnicodeString(AString const &,uint)+2Br
UNDEF:000009F8                                         ; UnicodeStringToMultiByte(UString const &,uint,char,bool &)+2Br ...
UNDEF:000009FC                 extrn ___CxxFrameHandler3:near
UNDEF:000009FC                                         ; CODE XREF: __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z+16j
UNDEF:000009FC                                         ; __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z+16j ...
UNDEF:00000A00 ; __fastcall __security_check_cookie(x)
UNDEF:00000A00                 extrn @__security_check_cookie@4:near
UNDEF:00000A00                                         ; CODE XREF: __ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z+Cp
UNDEF:00000A00                                         ; __ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z+Cp ...
UNDEF:00000A04 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000A04                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000A04                                         ; CODE XREF: MultiByteToUnicodeString(AString const &,uint)+91p
UNDEF:00000A04                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint)+3Cp ...
UNDEF:00000A08 ; void __cdecl operator delete(void *)
UNDEF:00000A08                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000A08                                         ; AString::~AString(void)+23p
UNDEF:00000A0C ; int __stdcall WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar)
UNDEF:00000A0C                 extrn __imp__WideCharToMultiByte@32:near
UNDEF:00000A0C                                         ; CODE XREF: UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+68p
UNDEF:00000A0C                                         ; UnicodeStringToMultiByte2(AString &,UString const &,uint,char,bool &)+12Bp
UNDEF:00000A0C                                         ; DATA XREF: ...
UNDEF:00000A10 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00000A10                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00000A10                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00000A14 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00000A14                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00000A14                                         ; CODE XREF: UnicodeStringToMultiByte(UString const &,uint,char,bool &)+73p
UNDEF:00000A14                                         ; UnicodeStringToMultiByte(UString const &,uint)+79p
UNDEF:00000A18 ; public: __thiscall AString::AString(void)
UNDEF:00000A18                 extrn ??0AString@@QAE@XZ:near
UNDEF:00000A18                                         ; CODE XREF: UnicodeStringToMultiByte(UString const &,uint,char,bool &)+46p
UNDEF:00000A18                                         ; UnicodeStringToMultiByte(UString const &,uint)+4Fp
UNDEF:00000A18
UNDEF:00000A18
UNDEF:00000A18                 end