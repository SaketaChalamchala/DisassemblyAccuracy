.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 7BC9B4DA5BD19C905531C5FC267D1B89
.text:00000000 ; Input CRC32 : 98C35045
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\UTFConvert.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __stdcall CheckUTF8(const char *, bool)
.text:00000000                 public ?CheckUTF8@@YG_NPBD_N@Z
.text:00000000 ?CheckUTF8@@YG_NPBD_N@Z proc near
.text:00000000
.text:00000000 var_14          = dword ptr -14h
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_8           = dword ptr -8
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = byte ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 14h
.text:00000006                 mov     eax, 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_14], eax
.text:0000000E                 mov     [ebp+var_10], eax
.text:00000011                 mov     [ebp+var_C], eax
.text:00000014                 mov     [ebp+var_8], eax
.text:00000017                 mov     [ebp+var_4], eax
.text:0000001A
.text:0000001A loc_1A:                                 ; CODE XREF: CheckUTF8(char const *,bool)+46j
.text:0000001A                                         ; CheckUTF8(char const *,bool):loc_190j
.text:0000001A                 mov     eax, [ebp+arg_0]
.text:0000001D                 mov     cl, [eax]
.text:0000001F                 mov     byte ptr [ebp+var_4+3], cl
.text:00000022                 mov     edx, [ebp+arg_0]
.text:00000025                 add     edx, 1
.text:00000028                 mov     [ebp+arg_0], edx
.text:0000002B                 movzx   eax, byte ptr [ebp+var_4+3]
.text:0000002F                 test    eax, eax
.text:00000031                 jnz     short loc_3A
.text:00000033                 mov     al, 1
.text:00000035                 jmp     loc_195
.text:0000003A ; ---------------------------------------------------------------------------
.text:0000003A
.text:0000003A loc_3A:                                 ; CODE XREF: CheckUTF8(char const *,bool)+31j
.text:0000003A                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:0000003E                 cmp     ecx, 80h ; 'Ç'
.text:00000044                 jge     short loc_48
.text:00000046                 jmp     short loc_1A
.text:00000048 ; ---------------------------------------------------------------------------
.text:00000048
.text:00000048 loc_48:                                 ; CODE XREF: CheckUTF8(char const *,bool)+44j
.text:00000048                 movzx   edx, byte ptr [ebp+var_4+3]
.text:0000004C                 cmp     edx, 0C0h ; '+'
.text:00000052                 jge     short loc_5B
.text:00000054                 xor     al, al
.text:00000056                 jmp     loc_195
.text:0000005B ; ---------------------------------------------------------------------------
.text:0000005B
.text:0000005B loc_5B:                                 ; CODE XREF: CheckUTF8(char const *,bool)+52j
.text:0000005B                 movzx   eax, byte ptr [ebp+var_4+3]
.text:0000005F                 cmp     eax, 0E0h ; 'a'
.text:00000064                 jge     short loc_7F
.text:00000066                 mov     [ebp+var_8], 1
.text:0000006D                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:00000071                 sub     ecx, 0C0h ; '+'
.text:00000077                 mov     byte ptr [ebp+var_4+3], cl
.text:0000007A                 jmp     loc_10B
.text:0000007F ; ---------------------------------------------------------------------------
.text:0000007F
.text:0000007F loc_7F:                                 ; CODE XREF: CheckUTF8(char const *,bool)+64j
.text:0000007F                 movzx   edx, byte ptr [ebp+var_4+3]
.text:00000083                 cmp     edx, 0F0h ; '='
.text:00000089                 jge     short loc_A0
.text:0000008B                 mov     [ebp+var_8], 2
.text:00000092                 movzx   eax, byte ptr [ebp+var_4+3]
.text:00000096                 sub     eax, 0E0h ; 'a'
.text:0000009B                 mov     byte ptr [ebp+var_4+3], al
.text:0000009E                 jmp     short loc_10B
.text:000000A0 ; ---------------------------------------------------------------------------
.text:000000A0
.text:000000A0 loc_A0:                                 ; CODE XREF: CheckUTF8(char const *,bool)+89j
.text:000000A0                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:000000A4                 cmp     ecx, 0F8h ; '°'
.text:000000AA                 jge     short loc_C2
.text:000000AC                 mov     [ebp+var_8], 3
.text:000000B3                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000000B7                 sub     edx, 0F0h ; '='
.text:000000BD                 mov     byte ptr [ebp+var_4+3], dl
.text:000000C0                 jmp     short loc_10B
.text:000000C2 ; ---------------------------------------------------------------------------
.text:000000C2
.text:000000C2 loc_C2:                                 ; CODE XREF: CheckUTF8(char const *,bool)+AAj
.text:000000C2                 movzx   eax, byte ptr [ebp+var_4+3]
.text:000000C6                 cmp     eax, 0FCh ; 'n'
.text:000000CB                 jge     short loc_E3
.text:000000CD                 mov     [ebp+var_8], 4
.text:000000D4                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:000000D8                 sub     ecx, 0F8h ; '°'
.text:000000DE                 mov     byte ptr [ebp+var_4+3], cl
.text:000000E1                 jmp     short loc_10B
.text:000000E3 ; ---------------------------------------------------------------------------
.text:000000E3
.text:000000E3 loc_E3:                                 ; CODE XREF: CheckUTF8(char const *,bool)+CBj
.text:000000E3                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000000E7                 cmp     edx, 0FEh ; '¦'
.text:000000ED                 jge     short loc_104
.text:000000EF                 mov     [ebp+var_8], 5
.text:000000F6                 movzx   eax, byte ptr [ebp+var_4+3]
.text:000000FA                 sub     eax, 0FCh ; 'n'
.text:000000FF                 mov     byte ptr [ebp+var_4+3], al
.text:00000102                 jmp     short loc_10B
.text:00000104 ; ---------------------------------------------------------------------------
.text:00000104
.text:00000104 loc_104:                                ; CODE XREF: CheckUTF8(char const *,bool)+EDj
.text:00000104                 xor     al, al
.text:00000106                 jmp     loc_195
.text:0000010B ; ---------------------------------------------------------------------------
.text:0000010B
.text:0000010B loc_10B:                                ; CODE XREF: CheckUTF8(char const *,bool)+7Aj
.text:0000010B                                         ; CheckUTF8(char const *,bool)+9Ej ...
.text:0000010B                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:0000010F                 mov     [ebp+var_C], ecx
.text:00000112
.text:00000112 loc_112:                                ; CODE XREF: CheckUTF8(char const *,bool)+181j
.text:00000112                 mov     edx, [ebp+arg_0]
.text:00000115                 mov     al, [edx]
.text:00000117                 mov     byte ptr [ebp+var_10+3], al
.text:0000011A                 mov     ecx, [ebp+arg_0]
.text:0000011D                 add     ecx, 1
.text:00000120                 mov     [ebp+arg_0], ecx
.text:00000123                 movzx   edx, byte ptr [ebp+var_10+3]
.text:00000127                 cmp     edx, 80h ; 'Ç'
.text:0000012D                 jl      short loc_13A
.text:0000012F                 movzx   eax, byte ptr [ebp+var_10+3]
.text:00000133                 cmp     eax, 0C0h ; '+'
.text:00000138                 jl      short loc_15F
.text:0000013A
.text:0000013A loc_13A:                                ; CODE XREF: CheckUTF8(char const *,bool)+12Dj
.text:0000013A                 movzx   ecx, [ebp+arg_4]
.text:0000013E                 test    ecx, ecx
.text:00000140                 jz      short loc_153
.text:00000142                 movzx   edx, byte ptr [ebp+var_10+3]
.text:00000146                 test    edx, edx
.text:00000148                 jnz     short loc_153
.text:0000014A                 mov     [ebp+var_14], 1
.text:00000151                 jmp     short loc_15A
.text:00000153 ; ---------------------------------------------------------------------------
.text:00000153
.text:00000153 loc_153:                                ; CODE XREF: CheckUTF8(char const *,bool)+140j
.text:00000153                                         ; CheckUTF8(char const *,bool)+148j
.text:00000153                 mov     [ebp+var_14], 0
.text:0000015A
.text:0000015A loc_15A:                                ; CODE XREF: CheckUTF8(char const *,bool)+151j
.text:0000015A                 mov     al, byte ptr [ebp+var_14]
.text:0000015D                 jmp     short loc_195
.text:0000015F ; ---------------------------------------------------------------------------
.text:0000015F
.text:0000015F loc_15F:                                ; CODE XREF: CheckUTF8(char const *,bool)+138j
.text:0000015F                 mov     eax, [ebp+var_C]
.text:00000162                 shl     eax, 6
.text:00000165                 mov     [ebp+var_C], eax
.text:00000168                 movzx   ecx, byte ptr [ebp+var_10+3]
.text:0000016C                 sub     ecx, 80h ; 'Ç'
.text:00000172                 or      ecx, [ebp+var_C]
.text:00000175                 mov     [ebp+var_C], ecx
.text:00000178                 mov     edx, [ebp+var_8]
.text:0000017B                 sub     edx, 1
.text:0000017E                 mov     [ebp+var_8], edx
.text:00000181                 jnz     short loc_112
.text:00000183                 cmp     [ebp+var_C], 110000h
.text:0000018A                 jb      short loc_190
.text:0000018C                 xor     al, al
.text:0000018E                 jmp     short loc_195
.text:00000190 ; ---------------------------------------------------------------------------
.text:00000190
.text:00000190 loc_190:                                ; CODE XREF: CheckUTF8(char const *,bool)+18Aj
.text:00000190                 jmp     loc_1A
.text:00000195 ; ---------------------------------------------------------------------------
.text:00000195
.text:00000195 loc_195:                                ; CODE XREF: CheckUTF8(char const *,bool)+35j
.text:00000195                                         ; CheckUTF8(char const *,bool)+56j ...
.text:00000195                 mov     esp, ebp
.text:00000197                 pop     ebp
.text:00000198                 retn    8
.text:00000198 ?CheckUTF8@@YG_NPBD_N@Z endp
.text:00000198
.text:00000198 ; ---------------------------------------------------------------------------
.text:0000019B                 align 10h
.text:000001A0
.text:000001A0 ; =============== S U B R O U T I N E =======================================
.text:000001A0
.text:000001A0 ; Attributes: bp-based frame
.text:000001A0
.text:000001A0 ; bool __stdcall ConvertUTF8ToUnicode(const struct AString *, struct UString *)
.text:000001A0                 public ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z
.text:000001A0 ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z proc near
.text:000001A0
.text:000001A0 var_10          = dword ptr -10h
.text:000001A0 var_C           = dword ptr -0Ch
.text:000001A0 var_8           = dword ptr -8
.text:000001A0 var_4           = dword ptr -4
.text:000001A0 arg_0           = dword ptr  8
.text:000001A0 arg_4           = dword ptr  0Ch
.text:000001A0
.text:000001A0                 push    ebp
.text:000001A1                 mov     ebp, esp
.text:000001A3                 sub     esp, 10h
.text:000001A6                 mov     eax, 0CCCCCCCCh
.text:000001AB                 mov     [ebp+var_10], eax
.text:000001AE                 mov     [ebp+var_C], eax
.text:000001B1                 mov     [ebp+var_8], eax
.text:000001B4                 mov     [ebp+var_4], eax
.text:000001B7                 mov     ecx, [ebp+arg_4] ; this
.text:000001BA                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:000001BF                 mov     [ebp+var_8], 0
.text:000001C6                 mov     ecx, [ebp+arg_0] ; this
.text:000001C9                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000001CE                 push    eax             ; unsigned int
.text:000001CF                 mov     ecx, [ebp+arg_0] ; this
.text:000001D2                 call    ?Ptr@AString@@QBEPBDI@Z ; AString::Ptr(uint)
.text:000001D7                 push    eax
.text:000001D8                 mov     ecx, [ebp+arg_0]
.text:000001DB                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000001E0                 push    eax
.text:000001E1                 lea     eax, [ebp+var_8]
.text:000001E4                 push    eax
.text:000001E5                 push    0
.text:000001E7                 call    ?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z ; Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)
.text:000001EC                 mov     ecx, [ebp+arg_0] ; this
.text:000001EF                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000001F4                 push    eax             ; unsigned int
.text:000001F5                 mov     ecx, [ebp+arg_0] ; this
.text:000001F8                 call    ?Ptr@AString@@QBEPBDI@Z ; AString::Ptr(uint)
.text:000001FD                 push    eax
.text:000001FE                 mov     ecx, [ebp+arg_0]
.text:00000201                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000206                 push    eax
.text:00000207                 lea     ecx, [ebp+var_8]
.text:0000020A                 push    ecx
.text:0000020B                 mov     edx, [ebp+var_8]
.text:0000020E                 push    edx             ; unsigned int
.text:0000020F                 mov     ecx, [ebp+arg_4] ; this
.text:00000212                 call    ?GetBuf@UString@@QAEPA_WI@Z ; UString::GetBuf(uint)
.text:00000217                 push    eax
.text:00000218                 call    ?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z ; Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)
.text:0000021D                 mov     byte ptr [ebp+var_10+3], al
.text:00000220                 mov     eax, [ebp+var_8]
.text:00000223                 push    eax             ; unsigned int
.text:00000224                 mov     ecx, [ebp+arg_4] ; this
.text:00000227                 call    ?ReleaseBuf_SetEnd@UString@@QAEXI@Z ; UString::ReleaseBuf_SetEnd(uint)
.text:0000022C                 mov     al, byte ptr [ebp+var_10+3]
.text:0000022F                 push    edx
.text:00000230                 mov     ecx, ebp
.text:00000232                 push    eax
.text:00000233                 lea     edx, $LN5
.text:00000239                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000023E                 pop     eax
.text:0000023F                 pop     edx
.text:00000240                 add     esp, 10h
.text:00000243                 cmp     ebp, esp
.text:00000245                 call    __RTC_CheckEsp
.text:0000024A                 mov     esp, ebp
.text:0000024C                 pop     ebp
.text:0000024D                 retn    8
.text:0000024D ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z endp
.text:0000024D
.text:0000024D ; ---------------------------------------------------------------------------
.text:00000250 $LN5            dd 1                    ; DATA XREF: ConvertUTF8ToUnicode(AString const &,UString &)+93o
.text:00000254                 dd offset $LN4
.text:00000258 $LN4            dd 0FFFFFFF8h, 4        ; DATA XREF: .text:00000254o
.text:00000260                 dd offset $LN3          ; "destLen"
.text:00000264 $LN3            db 'destLen',0          ; DATA XREF: .text:00000260o
.text:0000026C                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; bool __stdcall Utf8_To_Utf16(wchar_t *, unsigned int *, char const *, char const *)
.text:00000270 ?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z proc near
.text:00000270                                         ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+47p
.text:00000270                                         ; ConvertUTF8ToUnicode(AString const &,UString &)+78p
.text:00000270
.text:00000270 var_14          = dword ptr -14h
.text:00000270 var_10          = dword ptr -10h
.text:00000270 var_C           = dword ptr -0Ch
.text:00000270 var_8           = dword ptr -8
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270 arg_4           = dword ptr  0Ch
.text:00000270 arg_8           = dword ptr  10h
.text:00000270 arg_C           = dword ptr  14h
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 14h
.text:00000276                 mov     eax, 0CCCCCCCCh
.text:0000027B                 mov     [ebp+var_14], eax
.text:0000027E                 mov     [ebp+var_10], eax
.text:00000281                 mov     [ebp+var_C], eax
.text:00000284                 mov     [ebp+var_8], eax
.text:00000287                 mov     [ebp+var_4], eax
.text:0000028A                 mov     [ebp+var_4], 0
.text:00000291                 mov     byte ptr [ebp+var_8+3], 1
.text:00000295
.text:00000295 loc_295:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+77j
.text:00000295                                         ; Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+A7j ...
.text:00000295                 mov     eax, [ebp+arg_8]
.text:00000298                 cmp     eax, [ebp+arg_C]
.text:0000029B                 jnz     short loc_2AD
.text:0000029D                 mov     ecx, [ebp+arg_4]
.text:000002A0                 mov     edx, [ebp+var_4]
.text:000002A3                 mov     [ecx], edx
.text:000002A5                 mov     al, byte ptr [ebp+var_8+3]
.text:000002A8                 jmp     loc_524
.text:000002AD ; ---------------------------------------------------------------------------
.text:000002AD
.text:000002AD loc_2AD:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+2Bj
.text:000002AD                 mov     eax, [ebp+arg_8]
.text:000002B0                 mov     cl, [eax]
.text:000002B2                 mov     byte ptr [ebp+var_8+2], cl
.text:000002B5                 mov     edx, [ebp+arg_8]
.text:000002B8                 add     edx, 1
.text:000002BB                 mov     [ebp+arg_8], edx
.text:000002BE                 movzx   eax, byte ptr [ebp+var_8+2]
.text:000002C2                 cmp     eax, 80h ; 'Ç'
.text:000002C7                 jge     short loc_2E9
.text:000002C9                 cmp     [ebp+arg_0], 0
.text:000002CD                 jz      short loc_2DE
.text:000002CF                 movzx   cx, byte ptr [ebp+var_8+2]
.text:000002D4                 mov     edx, [ebp+var_4]
.text:000002D7                 mov     eax, [ebp+arg_0]
.text:000002DA                 mov     [eax+edx*2], cx
.text:000002DE
.text:000002DE loc_2DE:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+5Dj
.text:000002DE                 mov     ecx, [ebp+var_4]
.text:000002E1                 add     ecx, 1
.text:000002E4                 mov     [ebp+var_4], ecx
.text:000002E7                 jmp     short loc_295
.text:000002E9 ; ---------------------------------------------------------------------------
.text:000002E9
.text:000002E9 loc_2E9:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+57j
.text:000002E9                 movzx   edx, byte ptr [ebp+var_8+2]
.text:000002ED                 cmp     edx, 0C0h ; '+'
.text:000002F3                 jge     short loc_31C
.text:000002F5                 cmp     [ebp+arg_0], 0
.text:000002F9                 jz      short loc_30A
.text:000002FB                 mov     eax, 0FFFDh
.text:00000300                 mov     ecx, [ebp+var_4]
.text:00000303                 mov     edx, [ebp+arg_0]
.text:00000306                 mov     [edx+ecx*2], ax
.text:0000030A
.text:0000030A loc_30A:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+89j
.text:0000030A                 mov     eax, [ebp+var_4]
.text:0000030D                 add     eax, 1
.text:00000310                 mov     [ebp+var_4], eax
.text:00000313                 mov     byte ptr [ebp+var_8+3], 0
.text:00000317                 jmp     loc_295
.text:0000031C ; ---------------------------------------------------------------------------
.text:0000031C
.text:0000031C loc_31C:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+83j
.text:0000031C                 movzx   ecx, byte ptr [ebp+var_8+2]
.text:00000320                 cmp     ecx, 0E0h ; 'a'
.text:00000326                 jge     short loc_341
.text:00000328                 mov     [ebp+var_C], 1
.text:0000032F                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00000333                 sub     edx, 0C0h ; '+'
.text:00000339                 mov     byte ptr [ebp+var_8+2], dl
.text:0000033C                 jmp     loc_3F0
.text:00000341 ; ---------------------------------------------------------------------------
.text:00000341
.text:00000341 loc_341:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+B6j
.text:00000341                 movzx   eax, byte ptr [ebp+var_8+2]
.text:00000345                 cmp     eax, 0F0h ; '='
.text:0000034A                 jge     short loc_365
.text:0000034C                 mov     [ebp+var_C], 2
.text:00000353                 movzx   ecx, byte ptr [ebp+var_8+2]
.text:00000357                 sub     ecx, 0E0h ; 'a'
.text:0000035D                 mov     byte ptr [ebp+var_8+2], cl
.text:00000360                 jmp     loc_3F0
.text:00000365 ; ---------------------------------------------------------------------------
.text:00000365
.text:00000365 loc_365:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+DAj
.text:00000365                 movzx   edx, byte ptr [ebp+var_8+2]
.text:00000369                 cmp     edx, 0F8h ; '°'
.text:0000036F                 jge     short loc_386
.text:00000371                 mov     [ebp+var_C], 3
.text:00000378                 movzx   eax, byte ptr [ebp+var_8+2]
.text:0000037C                 sub     eax, 0F0h ; '='
.text:00000381                 mov     byte ptr [ebp+var_8+2], al
.text:00000384                 jmp     short loc_3F0
.text:00000386 ; ---------------------------------------------------------------------------
.text:00000386
.text:00000386 loc_386:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+FFj
.text:00000386                 movzx   ecx, byte ptr [ebp+var_8+2]
.text:0000038A                 cmp     ecx, 0FCh ; 'n'
.text:00000390                 jge     short loc_3A8
.text:00000392                 mov     [ebp+var_C], 4
.text:00000399                 movzx   edx, byte ptr [ebp+var_8+2]
.text:0000039D                 sub     edx, 0F8h ; '°'
.text:000003A3                 mov     byte ptr [ebp+var_8+2], dl
.text:000003A6                 jmp     short loc_3F0
.text:000003A8 ; ---------------------------------------------------------------------------
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+120j
.text:000003A8                 movzx   eax, byte ptr [ebp+var_8+2]
.text:000003AC                 cmp     eax, 0FEh ; '¦'
.text:000003B1                 jge     short loc_3C9
.text:000003B3                 mov     [ebp+var_C], 5
.text:000003BA                 movzx   ecx, byte ptr [ebp+var_8+2]
.text:000003BE                 sub     ecx, 0FCh ; 'n'
.text:000003C4                 mov     byte ptr [ebp+var_8+2], cl
.text:000003C7                 jmp     short loc_3F0
.text:000003C9 ; ---------------------------------------------------------------------------
.text:000003C9
.text:000003C9 loc_3C9:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+141j
.text:000003C9                 cmp     [ebp+arg_0], 0
.text:000003CD                 jz      short loc_3DE
.text:000003CF                 mov     edx, 0FFFDh
.text:000003D4                 mov     eax, [ebp+var_4]
.text:000003D7                 mov     ecx, [ebp+arg_0]
.text:000003DA                 mov     [ecx+eax*2], dx
.text:000003DE
.text:000003DE loc_3DE:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+15Dj
.text:000003DE                 mov     edx, [ebp+var_4]
.text:000003E1                 add     edx, 1
.text:000003E4                 mov     [ebp+var_4], edx
.text:000003E7                 mov     byte ptr [ebp+var_8+3], 0
.text:000003EB                 jmp     loc_295
.text:000003F0 ; ---------------------------------------------------------------------------
.text:000003F0
.text:000003F0 loc_3F0:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+CCj
.text:000003F0                                         ; Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+F0j ...
.text:000003F0                 movzx   eax, byte ptr [ebp+var_8+2]
.text:000003F4                 mov     [ebp+var_10], eax
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+1DEj
.text:000003F7                 mov     ecx, [ebp+arg_8]
.text:000003FA                 cmp     ecx, [ebp+arg_C]
.text:000003FD                 jnz     short loc_401
.text:000003FF                 jmp     short loc_450
.text:00000401 ; ---------------------------------------------------------------------------
.text:00000401
.text:00000401 loc_401:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+18Dj
.text:00000401                 mov     edx, [ebp+arg_8]
.text:00000404                 mov     al, [edx]
.text:00000406                 mov     byte ptr [ebp+var_14+3], al
.text:00000409                 movzx   ecx, byte ptr [ebp+var_14+3]
.text:0000040D                 cmp     ecx, 80h ; 'Ç'
.text:00000413                 jl      short loc_421
.text:00000415                 movzx   edx, byte ptr [ebp+var_14+3]
.text:00000419                 cmp     edx, 0C0h ; '+'
.text:0000041F                 jl      short loc_423
.text:00000421
.text:00000421 loc_421:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+1A3j
.text:00000421                 jmp     short loc_450
.text:00000423 ; ---------------------------------------------------------------------------
.text:00000423
.text:00000423 loc_423:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+1AFj
.text:00000423                 mov     eax, [ebp+arg_8]
.text:00000426                 add     eax, 1
.text:00000429                 mov     [ebp+arg_8], eax
.text:0000042C                 mov     ecx, [ebp+var_10]
.text:0000042F                 shl     ecx, 6
.text:00000432                 mov     [ebp+var_10], ecx
.text:00000435                 movzx   edx, byte ptr [ebp+var_14+3]
.text:00000439                 sub     edx, 80h ; 'Ç'
.text:0000043F                 or      edx, [ebp+var_10]
.text:00000442                 mov     [ebp+var_10], edx
.text:00000445                 mov     eax, [ebp+var_C]
.text:00000448                 sub     eax, 1
.text:0000044B                 mov     [ebp+var_C], eax
.text:0000044E                 jnz     short loc_3F7
.text:00000450
.text:00000450 loc_450:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+18Fj
.text:00000450                                         ; Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *):loc_421j
.text:00000450                 cmp     [ebp+var_C], 0
.text:00000454                 jz      short loc_47D
.text:00000456                 cmp     [ebp+arg_0], 0
.text:0000045A                 jz      short loc_46B
.text:0000045C                 mov     ecx, 0FFFDh
.text:00000461                 mov     edx, [ebp+var_4]
.text:00000464                 mov     eax, [ebp+arg_0]
.text:00000467                 mov     [eax+edx*2], cx
.text:0000046B
.text:0000046B loc_46B:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+1EAj
.text:0000046B                 mov     ecx, [ebp+var_4]
.text:0000046E                 add     ecx, 1
.text:00000471                 mov     [ebp+var_4], ecx
.text:00000474                 mov     byte ptr [ebp+var_8+3], 0
.text:00000478                 jmp     loc_295
.text:0000047D ; ---------------------------------------------------------------------------
.text:0000047D
.text:0000047D loc_47D:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+1E4j
.text:0000047D                 cmp     [ebp+var_10], 10000h
.text:00000484                 jnb     short loc_4A5
.text:00000486                 cmp     [ebp+arg_0], 0
.text:0000048A                 jz      short loc_49A
.text:0000048C                 mov     edx, [ebp+var_4]
.text:0000048F                 mov     eax, [ebp+arg_0]
.text:00000492                 mov     cx, word ptr [ebp+var_10]
.text:00000496                 mov     [eax+edx*2], cx
.text:0000049A
.text:0000049A loc_49A:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+21Aj
.text:0000049A                 mov     edx, [ebp+var_4]
.text:0000049D                 add     edx, 1
.text:000004A0                 mov     [ebp+var_4], edx
.text:000004A3                 jmp     short loc_51F
.text:000004A5 ; ---------------------------------------------------------------------------
.text:000004A5
.text:000004A5 loc_4A5:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+214j
.text:000004A5                 mov     eax, [ebp+var_10]
.text:000004A8                 sub     eax, 10000h
.text:000004AD                 mov     [ebp+var_10], eax
.text:000004B0                 cmp     [ebp+var_10], 100000h
.text:000004B7                 jb      short loc_4E0
.text:000004B9                 cmp     [ebp+arg_0], 0
.text:000004BD                 jz      short loc_4CE
.text:000004BF                 mov     ecx, 0FFFDh
.text:000004C4                 mov     edx, [ebp+var_4]
.text:000004C7                 mov     eax, [ebp+arg_0]
.text:000004CA                 mov     [eax+edx*2], cx
.text:000004CE
.text:000004CE loc_4CE:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+24Dj
.text:000004CE                 mov     ecx, [ebp+var_4]
.text:000004D1                 add     ecx, 1
.text:000004D4                 mov     [ebp+var_4], ecx
.text:000004D7                 mov     byte ptr [ebp+var_8+3], 0
.text:000004DB                 jmp     loc_295
.text:000004E0 ; ---------------------------------------------------------------------------
.text:000004E0
.text:000004E0 loc_4E0:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+247j
.text:000004E0                 cmp     [ebp+arg_0], 0
.text:000004E4                 jz      short loc_516
.text:000004E6                 mov     edx, [ebp+var_10]
.text:000004E9                 shr     edx, 0Ah
.text:000004EC                 add     edx, 0D800h
.text:000004F2                 mov     eax, [ebp+var_4]
.text:000004F5                 mov     ecx, [ebp+arg_0]
.text:000004F8                 mov     [ecx+eax*2], dx
.text:000004FC                 mov     edx, [ebp+var_10]
.text:000004FF                 and     edx, 3FFh
.text:00000505                 add     edx, 0DC00h
.text:0000050B                 mov     eax, [ebp+var_4]
.text:0000050E                 mov     ecx, [ebp+arg_0]
.text:00000511                 mov     [ecx+eax*2+2], dx
.text:00000516
.text:00000516 loc_516:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+274j
.text:00000516                 mov     edx, [ebp+var_4]
.text:00000519                 add     edx, 2
.text:0000051C                 mov     [ebp+var_4], edx
.text:0000051F
.text:0000051F loc_51F:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+233j
.text:0000051F                 jmp     loc_295
.text:00000524 ; ---------------------------------------------------------------------------
.text:00000524
.text:00000524 loc_524:                                ; CODE XREF: Utf8_To_Utf16(wchar_t *,uint *,char const *,char const *)+38j
.text:00000524                 mov     esp, ebp
.text:00000526                 pop     ebp
.text:00000527                 retn    10h
.text:00000527 ?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z endp
.text:00000527
.text:00000527 ; ---------------------------------------------------------------------------
.text:0000052A                 align 10h
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; void __stdcall ConvertUnicodeToUTF8(const struct UString *, struct AString *)
.text:00000530                 public ?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z
.text:00000530 ?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z proc near
.text:00000530
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = dword ptr  8
.text:00000530 arg_4           = dword ptr  0Ch
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 push    ecx
.text:00000534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000053B                 mov     ecx, [ebp+arg_4] ; this
.text:0000053E                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:00000543                 mov     ecx, [ebp+arg_0] ; this
.text:00000546                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000054B                 push    eax             ; unsigned int
.text:0000054C                 mov     ecx, [ebp+arg_0] ; this
.text:0000054F                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000554                 push    eax
.text:00000555                 mov     ecx, [ebp+arg_0]
.text:00000558                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000055D                 push    eax
.text:0000055E                 call    ?Utf16_To_Utf8_Calc@@YGIPB_W0@Z ; Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)
.text:00000563                 mov     [ebp+var_4], eax
.text:00000566                 mov     ecx, [ebp+arg_0] ; this
.text:00000569                 call    ?Len@UString@@QBEIXZ ; UString::Len(void)
.text:0000056E                 push    eax             ; unsigned int
.text:0000056F                 mov     ecx, [ebp+arg_0] ; this
.text:00000572                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000577                 push    eax
.text:00000578                 mov     ecx, [ebp+arg_0]
.text:0000057B                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000580                 push    eax
.text:00000581                 mov     eax, [ebp+var_4]
.text:00000584                 push    eax             ; unsigned int
.text:00000585                 mov     ecx, [ebp+arg_4] ; this
.text:00000588                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:0000058D                 push    eax
.text:0000058E                 call    ?Utf16_To_Utf8@@YGPADPADPB_W1@Z ; Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)
.text:00000593                 mov     ecx, [ebp+var_4]
.text:00000596                 push    ecx             ; unsigned int
.text:00000597                 mov     ecx, [ebp+arg_4] ; this
.text:0000059A                 call    ?ReleaseBuf_SetEnd@AString@@QAEXI@Z ; AString::ReleaseBuf_SetEnd(uint)
.text:0000059F                 add     esp, 4
.text:000005A2                 cmp     ebp, esp
.text:000005A4                 call    __RTC_CheckEsp
.text:000005A9                 mov     esp, ebp
.text:000005AB                 pop     ebp
.text:000005AC                 retn    8
.text:000005AC ?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z endp
.text:000005AC
.text:000005AC ; ---------------------------------------------------------------------------
.text:000005AF                 align 10h
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; unsigned int __stdcall Utf16_To_Utf8_Calc(wchar_t const *, wchar_t const *)
.text:000005B0 ?Utf16_To_Utf8_Calc@@YGIPB_W0@Z proc near
.text:000005B0                                         ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+2Ep
.text:000005B0
.text:000005B0 var_C           = dword ptr -0Ch
.text:000005B0 var_8           = dword ptr -8
.text:000005B0 var_4           = dword ptr -4
.text:000005B0 arg_0           = dword ptr  8
.text:000005B0 arg_4           = dword ptr  0Ch
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 sub     esp, 0Ch
.text:000005B6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000005BD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000005C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000005CB                 mov     eax, [ebp+arg_4]
.text:000005CE                 sub     eax, [ebp+arg_0]
.text:000005D1                 sar     eax, 1
.text:000005D3                 mov     [ebp+var_4], eax
.text:000005D6
.text:000005D6 loc_5D6:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+51j
.text:000005D6                                         ; Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+65j ...
.text:000005D6                 mov     ecx, [ebp+arg_0]
.text:000005D9                 cmp     ecx, [ebp+arg_4]
.text:000005DC                 jnz     short loc_5E6
.text:000005DE                 mov     eax, [ebp+var_4]
.text:000005E1                 jmp     loc_671
.text:000005E6 ; ---------------------------------------------------------------------------
.text:000005E6
.text:000005E6 loc_5E6:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+2Cj
.text:000005E6                 mov     edx, [ebp+arg_0]
.text:000005E9                 movzx   eax, word ptr [edx]
.text:000005EC                 mov     [ebp+var_8], eax
.text:000005EF                 mov     ecx, [ebp+arg_0]
.text:000005F2                 add     ecx, 2
.text:000005F5                 mov     [ebp+arg_0], ecx
.text:000005F8                 cmp     [ebp+var_8], 80h ; 'Ç'
.text:000005FF                 jnb     short loc_603
.text:00000601                 jmp     short loc_5D6
.text:00000603 ; ---------------------------------------------------------------------------
.text:00000603
.text:00000603 loc_603:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+4Fj
.text:00000603                 cmp     [ebp+var_8], 800h
.text:0000060A                 jnb     short loc_617
.text:0000060C                 mov     edx, [ebp+var_4]
.text:0000060F                 add     edx, 1
.text:00000612                 mov     [ebp+var_4], edx
.text:00000615                 jmp     short loc_5D6
.text:00000617 ; ---------------------------------------------------------------------------
.text:00000617
.text:00000617 loc_617:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+5Aj
.text:00000617                 cmp     [ebp+var_8], 0D800h
.text:0000061E                 jb      short loc_663
.text:00000620                 cmp     [ebp+var_8], 0DC00h
.text:00000627                 jnb     short loc_663
.text:00000629                 mov     eax, [ebp+arg_0]
.text:0000062C                 cmp     eax, [ebp+arg_4]
.text:0000062F                 jz      short loc_663
.text:00000631                 mov     ecx, [ebp+arg_0]
.text:00000634                 movzx   edx, word ptr [ecx]
.text:00000637                 mov     [ebp+var_C], edx
.text:0000063A                 cmp     [ebp+var_C], 0DC00h
.text:00000641                 jb      short loc_663
.text:00000643                 cmp     [ebp+var_C], 0E000h
.text:0000064A                 jnb     short loc_663
.text:0000064C                 mov     eax, [ebp+arg_0]
.text:0000064F                 add     eax, 2
.text:00000652                 mov     [ebp+arg_0], eax
.text:00000655                 mov     ecx, [ebp+var_4]
.text:00000658                 add     ecx, 2
.text:0000065B                 mov     [ebp+var_4], ecx
.text:0000065E                 jmp     loc_5D6
.text:00000663 ; ---------------------------------------------------------------------------
.text:00000663
.text:00000663 loc_663:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+6Ej
.text:00000663                                         ; Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+77j ...
.text:00000663                 mov     edx, [ebp+var_4]
.text:00000666                 add     edx, 2
.text:00000669                 mov     [ebp+var_4], edx
.text:0000066C                 jmp     loc_5D6
.text:00000671 ; ---------------------------------------------------------------------------
.text:00000671
.text:00000671 loc_671:                                ; CODE XREF: Utf16_To_Utf8_Calc(wchar_t const *,wchar_t const *)+31j
.text:00000671                 mov     esp, ebp
.text:00000673                 pop     ebp
.text:00000674                 retn    8
.text:00000674 ?Utf16_To_Utf8_Calc@@YGIPB_W0@Z endp
.text:00000674
.text:00000674 ; ---------------------------------------------------------------------------
.text:00000677                 align 10h
.text:00000680
.text:00000680 ; =============== S U B R O U T I N E =======================================
.text:00000680
.text:00000680 ; Attributes: bp-based frame
.text:00000680
.text:00000680 ; char * __stdcall Utf16_To_Utf8(char *, wchar_t const *, wchar_t const *)
.text:00000680 ?Utf16_To_Utf8@@YGPADPADPB_W1@Z proc near
.text:00000680                                         ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+5Ep
.text:00000680
.text:00000680 var_8           = dword ptr -8
.text:00000680 var_4           = dword ptr -4
.text:00000680 arg_0           = dword ptr  8
.text:00000680 arg_4           = dword ptr  0Ch
.text:00000680 arg_8           = dword ptr  10h
.text:00000680
.text:00000680                 push    ebp
.text:00000681                 mov     ebp, esp
.text:00000683                 sub     esp, 8
.text:00000686                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000068D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000694
.text:00000694 loc_694:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+50j
.text:00000694                                         ; Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+86j ...
.text:00000694                 mov     eax, [ebp+arg_4]
.text:00000697                 cmp     eax, [ebp+arg_8]
.text:0000069A                 jnz     short loc_6A4
.text:0000069C                 mov     eax, [ebp+arg_0]
.text:0000069F                 jmp     loc_81D
.text:000006A4 ; ---------------------------------------------------------------------------
.text:000006A4
.text:000006A4 loc_6A4:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+1Aj
.text:000006A4                 mov     ecx, [ebp+arg_4]
.text:000006A7                 movzx   edx, word ptr [ecx]
.text:000006AA                 mov     [ebp+var_4], edx
.text:000006AD                 mov     eax, [ebp+arg_4]
.text:000006B0                 add     eax, 2
.text:000006B3                 mov     [ebp+arg_4], eax
.text:000006B6                 cmp     [ebp+var_4], 80h ; 'Ç'
.text:000006BD                 jnb     short loc_6D2
.text:000006BF                 mov     ecx, [ebp+arg_0]
.text:000006C2                 mov     dl, byte ptr [ebp+var_4]
.text:000006C5                 mov     [ecx], dl
.text:000006C7                 mov     eax, [ebp+arg_0]
.text:000006CA                 add     eax, 1
.text:000006CD                 mov     [ebp+arg_0], eax
.text:000006D0                 jmp     short loc_694
.text:000006D2 ; ---------------------------------------------------------------------------
.text:000006D2
.text:000006D2 loc_6D2:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+3Dj
.text:000006D2                 cmp     [ebp+var_4], 800h
.text:000006D9                 jnb     short loc_708
.text:000006DB                 mov     ecx, [ebp+var_4]
.text:000006DE                 shr     ecx, 6
.text:000006E1                 add     ecx, 0C0h ; '+'
.text:000006E7                 mov     edx, [ebp+arg_0]
.text:000006EA                 mov     [edx], cl
.text:000006EC                 mov     eax, [ebp+var_4]
.text:000006EF                 and     eax, 3Fh
.text:000006F2                 add     eax, 80h ; 'Ç'
.text:000006F7                 mov     ecx, [ebp+arg_0]
.text:000006FA                 mov     [ecx+1], al
.text:000006FD                 mov     edx, [ebp+arg_0]
.text:00000700                 add     edx, 2
.text:00000703                 mov     [ebp+arg_0], edx
.text:00000706                 jmp     short loc_694
.text:00000708 ; ---------------------------------------------------------------------------
.text:00000708
.text:00000708 loc_708:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+59j
.text:00000708                 cmp     [ebp+var_4], 0D800h
.text:0000070F                 jb      loc_7D3
.text:00000715                 cmp     [ebp+var_4], 0DC00h
.text:0000071C                 jnb     loc_7D3
.text:00000722                 mov     eax, [ebp+arg_4]
.text:00000725                 cmp     eax, [ebp+arg_8]
.text:00000728                 jz      loc_7D3
.text:0000072E                 mov     ecx, [ebp+arg_4]
.text:00000731                 movzx   edx, word ptr [ecx]
.text:00000734                 mov     [ebp+var_8], edx
.text:00000737                 cmp     [ebp+var_8], 0DC00h
.text:0000073E                 jb      loc_7D3
.text:00000744                 cmp     [ebp+var_8], 0E000h
.text:0000074B                 jnb     loc_7D3
.text:00000751                 mov     eax, [ebp+arg_4]
.text:00000754                 add     eax, 2
.text:00000757                 mov     [ebp+arg_4], eax
.text:0000075A                 mov     ecx, [ebp+var_4]
.text:0000075D                 sub     ecx, 0D800h
.text:00000763                 shl     ecx, 0Ah
.text:00000766                 mov     edx, [ebp+var_8]
.text:00000769                 sub     edx, 0DC00h
.text:0000076F                 or      ecx, edx
.text:00000771                 add     ecx, 10000h
.text:00000777                 mov     [ebp+var_4], ecx
.text:0000077A                 mov     eax, [ebp+var_4]
.text:0000077D                 shr     eax, 12h
.text:00000780                 add     eax, 0F0h ; '='
.text:00000785                 mov     ecx, [ebp+arg_0]
.text:00000788                 mov     [ecx], al
.text:0000078A                 mov     edx, [ebp+var_4]
.text:0000078D                 shr     edx, 0Ch
.text:00000790                 and     edx, 3Fh
.text:00000793                 add     edx, 80h ; 'Ç'
.text:00000799                 mov     eax, [ebp+arg_0]
.text:0000079C                 mov     [eax+1], dl
.text:0000079F                 mov     ecx, [ebp+var_4]
.text:000007A2                 shr     ecx, 6
.text:000007A5                 and     ecx, 3Fh
.text:000007A8                 add     ecx, 80h ; 'Ç'
.text:000007AE                 mov     edx, [ebp+arg_0]
.text:000007B1                 mov     [edx+2], cl
.text:000007B4                 mov     eax, [ebp+var_4]
.text:000007B7                 and     eax, 3Fh
.text:000007BA                 add     eax, 80h ; 'Ç'
.text:000007BF                 mov     ecx, [ebp+arg_0]
.text:000007C2                 mov     [ecx+3], al
.text:000007C5                 mov     edx, [ebp+arg_0]
.text:000007C8                 add     edx, 4
.text:000007CB                 mov     [ebp+arg_0], edx
.text:000007CE                 jmp     loc_694
.text:000007D3 ; ---------------------------------------------------------------------------
.text:000007D3
.text:000007D3 loc_7D3:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+8Fj
.text:000007D3                                         ; Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+9Cj ...
.text:000007D3                 mov     eax, [ebp+var_4]
.text:000007D6                 shr     eax, 0Ch
.text:000007D9                 add     eax, 0E0h ; 'a'
.text:000007DE                 mov     ecx, [ebp+arg_0]
.text:000007E1                 mov     [ecx], al
.text:000007E3                 mov     edx, [ebp+var_4]
.text:000007E6                 shr     edx, 6
.text:000007E9                 and     edx, 3Fh
.text:000007EC                 add     edx, 80h ; 'Ç'
.text:000007F2                 mov     eax, [ebp+arg_0]
.text:000007F5                 mov     [eax+1], dl
.text:000007F8                 mov     ecx, [ebp+var_4]
.text:000007FB                 and     ecx, 3Fh
.text:000007FE                 add     ecx, 80h ; 'Ç'
.text:00000804                 mov     edx, [ebp+arg_0]
.text:00000807                 mov     [edx+2], cl
.text:0000080A                 mov     eax, [ebp+arg_0]
.text:0000080D                 add     eax, 3
.text:00000810                 mov     [ebp+arg_0], eax
.text:00000813                 jmp     loc_694
.text:00000818 ; ---------------------------------------------------------------------------
.text:00000818                 jmp     loc_694
.text:0000081D ; ---------------------------------------------------------------------------
.text:0000081D
.text:0000081D loc_81D:                                ; CODE XREF: Utf16_To_Utf8(char *,wchar_t const *,wchar_t const *)+1Fj
.text:0000081D                 mov     esp, ebp
.text:0000081F                 pop     ebp
.text:00000820                 retn    0Ch
.text:00000820 ?Utf16_To_Utf8@@YGPADPADPB_W1@Z endp
.text:00000820
.text:00000820 ; ---------------------------------------------------------------------------
.text:00000823                 align 4
.text:00000823 _text           ends
.text:00000823
.rtc$TMZ:00000824 ; ===========================================================================
.rtc$TMZ:00000824
.rtc$TMZ:00000824 ; Segment type: Pure data
.rtc$TMZ:00000824 ; Segment permissions: Read
.rtc$TMZ:00000824 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000824                 assume cs:_rtc$TMZ
.rtc$TMZ:00000824                 ;org 824h
.rtc$TMZ:00000824 ; COMDAT (pick any)
.rtc$TMZ:00000824 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000824 _rtc$TMZ        ends
.rtc$TMZ:00000824
.rtc$IMZ:00000828 ; ===========================================================================
.rtc$IMZ:00000828
.rtc$IMZ:00000828 ; Segment type: Pure data
.rtc$IMZ:00000828 ; Segment permissions: Read
.rtc$IMZ:00000828 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000828                 assume cs:_rtc$IMZ
.rtc$IMZ:00000828                 ;org 828h
.rtc$IMZ:00000828 ; COMDAT (pick any)
.rtc$IMZ:00000828 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000828 _rtc$IMZ        ends
.rtc$IMZ:00000828
.text:0000082C ; ===========================================================================
.text:0000082C
.text:0000082C ; Segment type: Pure code
.text:0000082C ; Segment permissions: Read/Execute
.text:0000082C _text           segment para public 'CODE' use32
.text:0000082C                 assume cs:_text
.text:0000082C                 ;org 82Ch
.text:0000082C ; COMDAT (pick any)
.text:0000082C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000082C
.text:0000082C ; =============== S U B R O U T I N E =======================================
.text:0000082C
.text:0000082C ; Attributes: bp-based frame
.text:0000082C
.text:0000082C ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:0000082C                 public ?Len@AString@@QBEIXZ
.text:0000082C ?Len@AString@@QBEIXZ proc near          ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+29p
.text:0000082C                                         ; ConvertUTF8ToUnicode(AString const &,UString &)+4Fp
.text:0000082C
.text:0000082C var_4           = dword ptr -4
.text:0000082C
.text:0000082C                 push    ebp
.text:0000082D                 mov     ebp, esp
.text:0000082F                 push    ecx
.text:00000830                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000837                 mov     [ebp+var_4], ecx
.text:0000083A                 mov     eax, [ebp+var_4]
.text:0000083D                 mov     eax, [eax+4]
.text:00000840                 mov     esp, ebp
.text:00000842                 pop     ebp
.text:00000843                 retn
.text:00000843 ?Len@AString@@QBEIXZ endp
.text:00000843
.text:00000843 _text           ends
.text:00000843
.text:00000844 ; ===========================================================================
.text:00000844
.text:00000844 ; Segment type: Pure code
.text:00000844 ; Segment permissions: Read/Execute
.text:00000844 _text           segment para public 'CODE' use32
.text:00000844                 assume cs:_text
.text:00000844                 ;org 844h
.text:00000844 ; COMDAT (pick any)
.text:00000844                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000844
.text:00000844 ; =============== S U B R O U T I N E =======================================
.text:00000844
.text:00000844 ; Attributes: bp-based frame
.text:00000844
.text:00000844 ; public: __thiscall AString::operator char const *(void)const
.text:00000844                 public ??BAString@@QBEPBDXZ
.text:00000844 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+3Bp
.text:00000844                                         ; ConvertUTF8ToUnicode(AString const &,UString &)+61p
.text:00000844
.text:00000844 var_4           = dword ptr -4
.text:00000844
.text:00000844                 push    ebp
.text:00000845                 mov     ebp, esp
.text:00000847                 push    ecx
.text:00000848                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000084F                 mov     [ebp+var_4], ecx
.text:00000852                 mov     eax, [ebp+var_4]
.text:00000855                 mov     eax, [eax]
.text:00000857                 mov     esp, ebp
.text:00000859                 pop     ebp
.text:0000085A                 retn
.text:0000085A ??BAString@@QBEPBDXZ endp
.text:0000085A
.text:0000085A ; ---------------------------------------------------------------------------
.text:0000085B                 align 4
.text:0000085B _text           ends
.text:0000085B
.text:0000085C ; ===========================================================================
.text:0000085C
.text:0000085C ; Segment type: Pure code
.text:0000085C ; Segment permissions: Read/Execute
.text:0000085C _text           segment para public 'CODE' use32
.text:0000085C                 assume cs:_text
.text:0000085C                 ;org 85Ch
.text:0000085C ; COMDAT (pick any)
.text:0000085C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000085C
.text:0000085C ; =============== S U B R O U T I N E =======================================
.text:0000085C
.text:0000085C ; Attributes: bp-based frame
.text:0000085C
.text:0000085C ; const char *__thiscall AString::Ptr(AString *this, unsigned int)
.text:0000085C                 public ?Ptr@AString@@QBEPBDI@Z
.text:0000085C ?Ptr@AString@@QBEPBDI@Z proc near       ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+32p
.text:0000085C                                         ; ConvertUTF8ToUnicode(AString const &,UString &)+58p
.text:0000085C
.text:0000085C var_4           = dword ptr -4
.text:0000085C arg_0           = dword ptr  8
.text:0000085C
.text:0000085C                 push    ebp
.text:0000085D                 mov     ebp, esp
.text:0000085F                 push    ecx
.text:00000860                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000867                 mov     [ebp+var_4], ecx
.text:0000086A                 mov     eax, [ebp+var_4]
.text:0000086D                 mov     eax, [eax]
.text:0000086F                 add     eax, [ebp+arg_0]
.text:00000872                 mov     esp, ebp
.text:00000874                 pop     ebp
.text:00000875                 retn    4
.text:00000875 ?Ptr@AString@@QBEPBDI@Z endp
.text:00000875
.text:00000875 _text           ends
.text:00000875
.text:00000878 ; ===========================================================================
.text:00000878
.text:00000878 ; Segment type: Pure code
.text:00000878 ; Segment permissions: Read/Execute
.text:00000878 _text           segment para public 'CODE' use32
.text:00000878                 assume cs:_text
.text:00000878                 ;org 878h
.text:00000878 ; COMDAT (pick any)
.text:00000878                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000878
.text:00000878 ; =============== S U B R O U T I N E =======================================
.text:00000878
.text:00000878 ; Attributes: bp-based frame
.text:00000878
.text:00000878 ; void __thiscall UString::Empty(UString *__hidden this)
.text:00000878                 public ?Empty@UString@@QAEXXZ
.text:00000878 ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+1Ap
.text:00000878
.text:00000878 var_4           = dword ptr -4
.text:00000878
.text:00000878                 push    ebp
.text:00000879                 mov     ebp, esp
.text:0000087B                 push    ecx
.text:0000087C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000883                 mov     [ebp+var_4], ecx
.text:00000886                 mov     eax, [ebp+var_4]
.text:00000889                 mov     dword ptr [eax+4], 0
.text:00000890                 mov     ecx, [ebp+var_4]
.text:00000893                 mov     edx, [ecx]
.text:00000895                 xor     eax, eax
.text:00000897                 mov     [edx], ax
.text:0000089A                 mov     esp, ebp
.text:0000089C                 pop     ebp
.text:0000089D                 retn
.text:0000089D ?Empty@UString@@QAEXXZ endp
.text:0000089D
.text:0000089D ; ---------------------------------------------------------------------------
.text:0000089E                 align 10h
.text:0000089E _text           ends
.text:0000089E
.text:000008A0 ; ===========================================================================
.text:000008A0
.text:000008A0 ; Segment type: Pure code
.text:000008A0 ; Segment permissions: Read/Execute
.text:000008A0 _text           segment para public 'CODE' use32
.text:000008A0                 assume cs:_text
.text:000008A0                 ;org 8A0h
.text:000008A0 ; COMDAT (pick any)
.text:000008A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008A0
.text:000008A0 ; =============== S U B R O U T I N E =======================================
.text:000008A0
.text:000008A0 ; Attributes: bp-based frame
.text:000008A0
.text:000008A0 ; wchar_t *__thiscall UString::GetBuf(UString *this, unsigned int)
.text:000008A0                 public ?GetBuf@UString@@QAEPA_WI@Z
.text:000008A0 ?GetBuf@UString@@QAEPA_WI@Z proc near   ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+72p
.text:000008A0
.text:000008A0 var_4           = dword ptr -4
.text:000008A0 arg_0           = dword ptr  8
.text:000008A0
.text:000008A0                 push    ebp
.text:000008A1                 mov     ebp, esp
.text:000008A3                 push    ecx
.text:000008A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008AB                 mov     [ebp+var_4], ecx
.text:000008AE                 mov     eax, [ebp+var_4]
.text:000008B1                 mov     ecx, [ebp+arg_0]
.text:000008B4                 cmp     ecx, [eax+8]
.text:000008B7                 jbe     short loc_8C5
.text:000008B9                 mov     edx, [ebp+arg_0]
.text:000008BC                 push    edx             ; unsigned int
.text:000008BD                 mov     ecx, [ebp+var_4] ; this
.text:000008C0                 call    ?ReAlloc2@UString@@AAEXI@Z ; UString::ReAlloc2(uint)
.text:000008C5
.text:000008C5 loc_8C5:                                ; CODE XREF: UString::GetBuf(uint)+17j
.text:000008C5                 mov     eax, [ebp+var_4]
.text:000008C8                 mov     eax, [eax]
.text:000008CA                 add     esp, 4
.text:000008CD                 cmp     ebp, esp
.text:000008CF                 call    __RTC_CheckEsp
.text:000008D4                 mov     esp, ebp
.text:000008D6                 pop     ebp
.text:000008D7                 retn    4
.text:000008D7 ?GetBuf@UString@@QAEPA_WI@Z endp
.text:000008D7
.text:000008D7 ; ---------------------------------------------------------------------------
.text:000008DA                 align 4
.text:000008DA _text           ends
.text:000008DA
.text:000008DC ; ===========================================================================
.text:000008DC
.text:000008DC ; Segment type: Pure code
.text:000008DC ; Segment permissions: Read/Execute
.text:000008DC _text           segment para public 'CODE' use32
.text:000008DC                 assume cs:_text
.text:000008DC                 ;org 8DCh
.text:000008DC ; COMDAT (pick any)
.text:000008DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008DC
.text:000008DC ; =============== S U B R O U T I N E =======================================
.text:000008DC
.text:000008DC ; Attributes: bp-based frame
.text:000008DC
.text:000008DC ; void __thiscall UString::ReleaseBuf_SetEnd(UString *this, unsigned int)
.text:000008DC                 public ?ReleaseBuf_SetEnd@UString@@QAEXI@Z
.text:000008DC ?ReleaseBuf_SetEnd@UString@@QAEXI@Z proc near
.text:000008DC                                         ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+87p
.text:000008DC
.text:000008DC var_4           = dword ptr -4
.text:000008DC arg_0           = dword ptr  8
.text:000008DC
.text:000008DC                 push    ebp
.text:000008DD                 mov     ebp, esp
.text:000008DF                 push    ecx
.text:000008E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008E7                 mov     [ebp+var_4], ecx
.text:000008EA                 mov     eax, [ebp+var_4]
.text:000008ED                 mov     ecx, [ebp+arg_0]
.text:000008F0                 mov     [eax+4], ecx
.text:000008F3                 mov     edx, [ebp+var_4]
.text:000008F6                 mov     eax, [edx]
.text:000008F8                 xor     ecx, ecx
.text:000008FA                 mov     edx, [ebp+arg_0]
.text:000008FD                 mov     [eax+edx*2], cx
.text:00000901                 mov     esp, ebp
.text:00000903                 pop     ebp
.text:00000904                 retn    4
.text:00000904 ?ReleaseBuf_SetEnd@UString@@QAEXI@Z endp
.text:00000904
.text:00000904 ; ---------------------------------------------------------------------------
.text:00000907                 align 4
.text:00000907 _text           ends
.text:00000907
.text:00000908 ; ===========================================================================
.text:00000908
.text:00000908 ; Segment type: Pure code
.text:00000908 ; Segment permissions: Read/Execute
.text:00000908 _text           segment para public 'CODE' use32
.text:00000908                 assume cs:_text
.text:00000908                 ;org 908h
.text:00000908 ; COMDAT (pick any)
.text:00000908                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000908
.text:00000908 ; =============== S U B R O U T I N E =======================================
.text:00000908
.text:00000908 ; Attributes: bp-based frame
.text:00000908
.text:00000908 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00000908                 public ?Empty@AString@@QAEXXZ
.text:00000908 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+Ep
.text:00000908
.text:00000908 var_4           = dword ptr -4
.text:00000908
.text:00000908                 push    ebp
.text:00000909                 mov     ebp, esp
.text:0000090B                 push    ecx
.text:0000090C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000913                 mov     [ebp+var_4], ecx
.text:00000916                 mov     eax, [ebp+var_4]
.text:00000919                 mov     dword ptr [eax+4], 0
.text:00000920                 mov     ecx, [ebp+var_4]
.text:00000923                 mov     edx, [ecx]
.text:00000925                 mov     byte ptr [edx], 0
.text:00000928                 mov     esp, ebp
.text:0000092A                 pop     ebp
.text:0000092B                 retn
.text:0000092B ?Empty@AString@@QAEXXZ endp
.text:0000092B
.text:0000092B _text           ends
.text:0000092B
.text:0000092C ; ===========================================================================
.text:0000092C
.text:0000092C ; Segment type: Pure code
.text:0000092C ; Segment permissions: Read/Execute
.text:0000092C _text           segment para public 'CODE' use32
.text:0000092C                 assume cs:_text
.text:0000092C                 ;org 92Ch
.text:0000092C ; COMDAT (pick any)
.text:0000092C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000092C
.text:0000092C ; =============== S U B R O U T I N E =======================================
.text:0000092C
.text:0000092C ; Attributes: bp-based frame
.text:0000092C
.text:0000092C ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:0000092C                 public ?GetBuf@AString@@QAEPADI@Z
.text:0000092C ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+58p
.text:0000092C
.text:0000092C var_4           = dword ptr -4
.text:0000092C arg_0           = dword ptr  8
.text:0000092C
.text:0000092C                 push    ebp
.text:0000092D                 mov     ebp, esp
.text:0000092F                 push    ecx
.text:00000930                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000937                 mov     [ebp+var_4], ecx
.text:0000093A                 mov     eax, [ebp+var_4]
.text:0000093D                 mov     ecx, [ebp+arg_0]
.text:00000940                 cmp     ecx, [eax+8]
.text:00000943                 jbe     short loc_951
.text:00000945                 mov     edx, [ebp+arg_0]
.text:00000948                 push    edx             ; unsigned int
.text:00000949                 mov     ecx, [ebp+var_4] ; this
.text:0000094C                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:00000951
.text:00000951 loc_951:                                ; CODE XREF: AString::GetBuf(uint)+17j
.text:00000951                 mov     eax, [ebp+var_4]
.text:00000954                 mov     eax, [eax]
.text:00000956                 add     esp, 4
.text:00000959                 cmp     ebp, esp
.text:0000095B                 call    __RTC_CheckEsp
.text:00000960                 mov     esp, ebp
.text:00000962                 pop     ebp
.text:00000963                 retn    4
.text:00000963 ?GetBuf@AString@@QAEPADI@Z endp
.text:00000963
.text:00000963 ; ---------------------------------------------------------------------------
.text:00000966                 align 4
.text:00000966 _text           ends
.text:00000966
.text:00000968 ; ===========================================================================
.text:00000968
.text:00000968 ; Segment type: Pure code
.text:00000968 ; Segment permissions: Read/Execute
.text:00000968 _text           segment para public 'CODE' use32
.text:00000968                 assume cs:_text
.text:00000968                 ;org 968h
.text:00000968 ; COMDAT (pick any)
.text:00000968                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000968
.text:00000968 ; =============== S U B R O U T I N E =======================================
.text:00000968
.text:00000968 ; Attributes: bp-based frame
.text:00000968
.text:00000968 ; void __thiscall AString::ReleaseBuf_SetEnd(AString *this, unsigned int)
.text:00000968                 public ?ReleaseBuf_SetEnd@AString@@QAEXI@Z
.text:00000968 ?ReleaseBuf_SetEnd@AString@@QAEXI@Z proc near
.text:00000968                                         ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+6Ap
.text:00000968
.text:00000968 var_4           = dword ptr -4
.text:00000968 arg_0           = dword ptr  8
.text:00000968
.text:00000968                 push    ebp
.text:00000969                 mov     ebp, esp
.text:0000096B                 push    ecx
.text:0000096C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000973                 mov     [ebp+var_4], ecx
.text:00000976                 mov     eax, [ebp+var_4]
.text:00000979                 mov     ecx, [ebp+arg_0]
.text:0000097C                 mov     [eax+4], ecx
.text:0000097F                 mov     edx, [ebp+var_4]
.text:00000982                 mov     eax, [edx]
.text:00000984                 mov     ecx, [ebp+arg_0]
.text:00000987                 mov     byte ptr [eax+ecx], 0
.text:0000098B                 mov     esp, ebp
.text:0000098D                 pop     ebp
.text:0000098E                 retn    4
.text:0000098E ?ReleaseBuf_SetEnd@AString@@QAEXI@Z endp
.text:0000098E
.text:0000098E ; ---------------------------------------------------------------------------
.text:00000991                 align 4
.text:00000991 _text           ends
.text:00000991
.text:00000994 ; ===========================================================================
.text:00000994
.text:00000994 ; Segment type: Pure code
.text:00000994 ; Segment permissions: Read/Execute
.text:00000994 _text           segment para public 'CODE' use32
.text:00000994                 assume cs:_text
.text:00000994                 ;org 994h
.text:00000994 ; COMDAT (pick any)
.text:00000994                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000994
.text:00000994 ; =============== S U B R O U T I N E =======================================
.text:00000994
.text:00000994 ; Attributes: bp-based frame
.text:00000994
.text:00000994 ; unsigned int __thiscall UString::Len(UString *__hidden this)
.text:00000994                 public ?Len@UString@@QBEIXZ
.text:00000994 ?Len@UString@@QBEIXZ proc near          ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+16p
.text:00000994                                         ; ConvertUnicodeToUTF8(UString const &,AString &)+39p
.text:00000994
.text:00000994 var_4           = dword ptr -4
.text:00000994
.text:00000994                 push    ebp
.text:00000995                 mov     ebp, esp
.text:00000997                 push    ecx
.text:00000998                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000099F                 mov     [ebp+var_4], ecx
.text:000009A2                 mov     eax, [ebp+var_4]
.text:000009A5                 mov     eax, [eax+4]
.text:000009A8                 mov     esp, ebp
.text:000009AA                 pop     ebp
.text:000009AB                 retn
.text:000009AB ?Len@UString@@QBEIXZ endp
.text:000009AB
.text:000009AB _text           ends
.text:000009AB
.text:000009AC ; ===========================================================================
.text:000009AC
.text:000009AC ; Segment type: Pure code
.text:000009AC ; Segment permissions: Read/Execute
.text:000009AC _text           segment para public 'CODE' use32
.text:000009AC                 assume cs:_text
.text:000009AC                 ;org 9ACh
.text:000009AC ; COMDAT (pick any)
.text:000009AC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009AC
.text:000009AC ; =============== S U B R O U T I N E =======================================
.text:000009AC
.text:000009AC ; Attributes: bp-based frame
.text:000009AC
.text:000009AC ; public: __thiscall UString::operator wchar_t const *(void)const
.text:000009AC                 public ??BUString@@QBEPB_WXZ
.text:000009AC ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+28p
.text:000009AC                                         ; ConvertUnicodeToUTF8(UString const &,AString &)+4Bp
.text:000009AC
.text:000009AC var_4           = dword ptr -4
.text:000009AC
.text:000009AC                 push    ebp
.text:000009AD                 mov     ebp, esp
.text:000009AF                 push    ecx
.text:000009B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009B7                 mov     [ebp+var_4], ecx
.text:000009BA                 mov     eax, [ebp+var_4]
.text:000009BD                 mov     eax, [eax]
.text:000009BF                 mov     esp, ebp
.text:000009C1                 pop     ebp
.text:000009C2                 retn
.text:000009C2 ??BUString@@QBEPB_WXZ endp
.text:000009C2
.text:000009C2 ; ---------------------------------------------------------------------------
.text:000009C3                 align 4
.text:000009C3 _text           ends
.text:000009C3
.text:000009C4 ; ===========================================================================
.text:000009C4
.text:000009C4 ; Segment type: Pure code
.text:000009C4 ; Segment permissions: Read/Execute
.text:000009C4 _text           segment para public 'CODE' use32
.text:000009C4                 assume cs:_text
.text:000009C4                 ;org 9C4h
.text:000009C4 ; COMDAT (pick any)
.text:000009C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:000009C4                 public ?Ptr@UString@@QBEPB_WI@Z
.text:000009C4 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: ConvertUnicodeToUTF8(UString const &,AString &)+1Fp
.text:000009C4                                         ; ConvertUnicodeToUTF8(UString const &,AString &)+42p
.text:000009C4
.text:000009C4 var_4           = dword ptr -4
.text:000009C4 arg_0           = dword ptr  8
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 push    ecx
.text:000009C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CF                 mov     [ebp+var_4], ecx
.text:000009D2                 mov     eax, [ebp+var_4]
.text:000009D5                 mov     ecx, [eax]
.text:000009D7                 mov     edx, [ebp+arg_0]
.text:000009DA                 lea     eax, [ecx+edx*2]
.text:000009DD                 mov     esp, ebp
.text:000009DF                 pop     ebp
.text:000009E0                 retn    4
.text:000009E0 ?Ptr@UString@@QBEPB_WI@Z endp
.text:000009E0
.text:000009E0 _text           ends
.text:000009E0
UNDEF:000009F0 ; ===========================================================================
UNDEF:000009F0
UNDEF:000009F0 ; Segment type: Externs
UNDEF:000009F0 ; UNDEF
UNDEF:000009F0                 extrn __RTC_Shutdown:near
UNDEF:000009F0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000009F4                 extrn __RTC_InitBase:near
UNDEF:000009F4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000009F8                 extrn __RTC_CheckEsp:near
UNDEF:000009F8                                         ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+A5p
UNDEF:000009F8                                         ; ConvertUnicodeToUTF8(UString const &,AString &)+74p ...
UNDEF:000009FC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000009FC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000009FC                                         ; CODE XREF: ConvertUTF8ToUnicode(AString const &,UString &)+99p
UNDEF:00000A00 ; void __thiscall UString::ReAlloc2(UString *__hidden this, unsigned int)
UNDEF:00000A00                 extrn ?ReAlloc2@UString@@AAEXI@Z:near
UNDEF:00000A00                                         ; CODE XREF: UString::GetBuf(uint)+20p
UNDEF:00000A04 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00000A04                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00000A04                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00000A04
UNDEF:00000A04
UNDEF:00000A04                 end