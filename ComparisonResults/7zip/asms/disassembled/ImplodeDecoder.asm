.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : FB353B036A713EB1C58BDDEAAB0A4A71
.text:00000000 ; Input CRC32 : 46F39FAB
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\ImplodeDecoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCompress::NImplode::NDecoder::CCoder::CCoder(NCompress::NImplode::NDecoder::CCoder *__hidden this)
.text:00000000                 public ??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text:00000000 ??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ proc near
.text:00000000
.text:00000000 var_10          = dword ptr -10h
.text:00000000 var_C           = dword ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    0FFFFFFFFh
.text:00000005                 push    offset __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text:0000000A                 mov     eax, large fs:0
.text:00000010                 push    eax
.text:00000011                 push    ecx
.text:00000012                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000019                 mov     eax, dword ptr ds:___security_cookie
.text:0000001E                 xor     eax, ebp
.text:00000020                 push    eax
.text:00000021                 lea     eax, [ebp+var_C]
.text:00000024                 mov     large fs:0, eax
.text:0000002A                 mov     [ebp+var_10], ecx
.text:0000002D                 mov     ecx, [ebp+var_10] ; this
.text:00000030                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00000035                 mov     ecx, [ebp+var_10]
.text:00000038                 add     ecx, 4          ; this
.text:0000003B                 call    ??0ICompressSetDecoderProperties2@@QAE@XZ ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)
.text:00000040
.text:00000040 loc_40:                                 ; DATA XREF: .xdata$x:00000934o
.text:00000040                 mov     ecx, [ebp+var_10]
.text:00000043                 add     ecx, 8          ; this
.text:00000046                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000004B                 mov     eax, [ebp+var_10]
.text:0000004E                 mov     dword ptr [eax], offset ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@ ; const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.text:00000054                 mov     ecx, [ebp+var_10]
.text:00000057                 mov     dword ptr [ecx+4], offset ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressSetDecoderProperties2'}
.text:0000005E                 mov     ecx, [ebp+var_10]
.text:00000061                 add     ecx, 10h
.text:00000064                 call    ??0CLzOutWindow@@QAE@XZ ; CLzOutWindow::CLzOutWindow(void)
.text:00000069                 mov     [ebp+var_4], 0
.text:00000070                 mov     ecx, [ebp+var_10]
.text:00000073                 add     ecx, 38h ; '8'
.text:00000076                 call    ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)
.text:0000007B                 mov     byte ptr [ebp+var_4], 1
.text:0000007F                 push    100h            ; unsigned int
.text:00000084                 mov     ecx, [ebp+var_10]
.text:00000087                 add     ecx, 70h ; 'p'  ; this
.text:0000008A                 call    ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z ; NCompress::NImplode::NHuffman::CDecoder::CDecoder(uint)
.text:0000008F                 mov     byte ptr [ebp+var_4], 2
.text:00000093                 push    40h ; '@'       ; unsigned int
.text:00000095                 mov     ecx, [ebp+var_10]
.text:00000098                 add     ecx, 108h       ; this
.text:0000009E                 call    ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z ; NCompress::NImplode::NHuffman::CDecoder::CDecoder(uint)
.text:000000A3                 mov     byte ptr [ebp+var_4], 3
.text:000000A7                 push    40h ; '@'       ; unsigned int
.text:000000A9                 mov     ecx, [ebp+var_10]
.text:000000AC                 add     ecx, 1A0h       ; this
.text:000000B2                 call    ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z ; NCompress::NImplode::NHuffman::CDecoder::CDecoder(uint)
.text:000000B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000000BE                 mov     eax, [ebp+var_10]
.text:000000C1                 mov     ecx, [ebp+var_C]
.text:000000C4                 mov     large fs:0, ecx
.text:000000CB                 pop     ecx
.text:000000CC                 add     esp, 10h
.text:000000CF                 cmp     ebp, esp
.text:000000D1                 call    __RTC_CheckEsp
.text:000000D6                 mov     esp, ebp
.text:000000D8                 pop     ebp
.text:000000D9                 retn
.text:000000D9 ??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ endp
.text:000000D9
.text:000000D9 ; ---------------------------------------------------------------------------
.text:000000DA                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; bool __thiscall NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NDecoder::CCoder *this, struct NCompress::NImplode::NHuffman::CDecoder *, unsigned __int8 *, int)
.text:000000E0                 public ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z
.text:000000E0 ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z proc near
.text:000000E0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+4Fp
.text:000000E0                                         ; NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+74p ...
.text:000000E0
.text:000000E0 var_24          = dword ptr -24h
.text:000000E0 var_20          = dword ptr -20h
.text:000000E0 var_1C          = dword ptr -1Ch
.text:000000E0 var_18          = dword ptr -18h
.text:000000E0 var_14          = dword ptr -14h
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_8           = dword ptr -8
.text:000000E0 var_4           = dword ptr -4
.text:000000E0 arg_0           = dword ptr  8
.text:000000E0 arg_4           = dword ptr  0Ch
.text:000000E0 arg_8           = dword ptr  10h
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 sub     esp, 24h
.text:000000E6                 mov     eax, 0CCCCCCCCh
.text:000000EB                 mov     [ebp+var_24], eax
.text:000000EE                 mov     [ebp+var_20], eax
.text:000000F1                 mov     [ebp+var_1C], eax
.text:000000F4                 mov     [ebp+var_18], eax
.text:000000F7                 mov     [ebp+var_14], eax
.text:000000FA                 mov     [ebp+var_10], eax
.text:000000FD                 mov     [ebp+var_C], eax
.text:00000100                 mov     [ebp+var_8], eax
.text:00000103                 mov     [ebp+var_4], eax
.text:00000106                 mov     [ebp+var_4], ecx
.text:00000109                 push    8
.text:0000010B                 mov     ecx, [ebp+var_4]
.text:0000010E                 add     ecx, 38h ; '8'
.text:00000111                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000116                 add     eax, 1
.text:00000119                 mov     [ebp+var_8], eax
.text:0000011C                 mov     [ebp+var_C], 0
.text:00000123                 mov     [ebp+var_10], 0
.text:0000012A                 jmp     short loc_135
.text:0000012C ; ---------------------------------------------------------------------------
.text:0000012C
.text:0000012C loc_12C:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int):loc_1BFj
.text:0000012C                 mov     eax, [ebp+var_10]
.text:0000012F                 add     eax, 1
.text:00000132                 mov     [ebp+var_10], eax
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+4Aj
.text:00000135                 mov     ecx, [ebp+var_10]
.text:00000138                 cmp     ecx, [ebp+var_8]
.text:0000013B                 jge     loc_1C4
.text:00000141                 push    4
.text:00000143                 mov     ecx, [ebp+var_4]
.text:00000146                 add     ecx, 38h ; '8'
.text:00000149                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:0000014E                 add     eax, 1
.text:00000151                 mov     [ebp+var_14], eax
.text:00000154                 push    4
.text:00000156                 mov     ecx, [ebp+var_4]
.text:00000159                 add     ecx, 38h ; '8'
.text:0000015C                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000161                 add     eax, 1
.text:00000164                 mov     [ebp+var_18], eax
.text:00000167                 mov     edx, [ebp+var_C]
.text:0000016A                 add     edx, [ebp+var_18]
.text:0000016D                 cmp     edx, [ebp+arg_8]
.text:00000170                 jle     short loc_18F
.text:00000172                 push    0
.text:00000174                 lea     ecx, [ebp+var_24]
.text:00000177                 call    ??0CException@NDecoder@NImplode@NCompress@@QAE@W4ECauseType@0123@@Z ; NCompress::NImplode::NDecoder::CException::CException(NCompress::NImplode::NDecoder::CException::ECauseType)
.text:0000017C                 mov     eax, [eax]
.text:0000017E                 mov     [ebp+var_20], eax
.text:00000181                 push    offset __TI1?AVCException@NDecoder@NImplode@NCompress@@
.text:00000186                 lea     ecx, [ebp+var_20]
.text:00000189                 push    ecx
.text:0000018A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text:0000018F ; ---------------------------------------------------------------------------
.text:0000018F
.text:0000018F loc_18F:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+90j
.text:0000018F                 mov     [ebp+var_1C], 0
.text:00000196                 jmp     short loc_1A1
.text:00000198 ; ---------------------------------------------------------------------------
.text:00000198
.text:00000198 loc_198:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+DDj
.text:00000198                 mov     edx, [ebp+var_1C]
.text:0000019B                 add     edx, 1
.text:0000019E                 mov     [ebp+var_1C], edx
.text:000001A1
.text:000001A1 loc_1A1:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+B6j
.text:000001A1                 mov     eax, [ebp+var_1C]
.text:000001A4                 cmp     eax, [ebp+var_18]
.text:000001A7                 jge     short loc_1BF
.text:000001A9                 mov     ecx, [ebp+arg_4]
.text:000001AC                 add     ecx, [ebp+var_C]
.text:000001AF                 mov     dl, byte ptr [ebp+var_14]
.text:000001B2                 mov     [ecx], dl
.text:000001B4                 mov     eax, [ebp+var_C]
.text:000001B7                 add     eax, 1
.text:000001BA                 mov     [ebp+var_C], eax
.text:000001BD                 jmp     short loc_198
.text:000001BF ; ---------------------------------------------------------------------------
.text:000001BF
.text:000001BF loc_1BF:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+C7j
.text:000001BF                 jmp     loc_12C
.text:000001C4 ; ---------------------------------------------------------------------------
.text:000001C4
.text:000001C4 loc_1C4:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+5Bj
.text:000001C4                 mov     ecx, [ebp+var_C]
.text:000001C7                 cmp     ecx, [ebp+arg_8]
.text:000001CA                 jz      short loc_1D0
.text:000001CC                 xor     al, al
.text:000001CE                 jmp     short loc_1DC
.text:000001D0 ; ---------------------------------------------------------------------------
.text:000001D0
.text:000001D0 loc_1D0:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+EAj
.text:000001D0                 mov     edx, [ebp+arg_4]
.text:000001D3                 push    edx             ; unsigned __int8 *
.text:000001D4                 mov     ecx, [ebp+arg_0] ; this
.text:000001D7                 call    ?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z ; NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(uchar const *)
.text:000001DC
.text:000001DC loc_1DC:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+EEj
.text:000001DC                 add     esp, 24h
.text:000001DF                 cmp     ebp, esp
.text:000001E1                 call    __RTC_CheckEsp
.text:000001E6                 mov     esp, ebp
.text:000001E8                 pop     ebp
.text:000001E9                 retn    0Ch
.text:000001E9 ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z endp
.text:000001E9
.text:000001E9 ; ---------------------------------------------------------------------------
.text:000001EC                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; bool __thiscall NCompress::NImplode::NDecoder::CCoder::ReadTables(NCompress::NImplode::NDecoder::CCoder *__hidden this)
.text:000001F0                 public ?ReadTables@CCoder@NDecoder@NImplode@NCompress@@AAE_NXZ
.text:000001F0 ?ReadTables@CCoder@NDecoder@NImplode@NCompress@@AAE_NXZ proc near
.text:000001F0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+C5p
.text:000001F0
.text:000001F0 var_1A0         = byte ptr -1A0h
.text:000001F0 var_19C         = byte ptr -19Ch
.text:000001F0 var_154         = byte ptr -154h
.text:000001F0 var_10C         = byte ptr -10Ch
.text:000001F0 var_8           = dword ptr -8
.text:000001F0 var_4           = dword ptr -4
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 1A0h
.text:000001F9                 push    edi
.text:000001FA                 push    ecx
.text:000001FB                 lea     edi, [ebp+var_1A0]
.text:00000201                 mov     ecx, 68h ; 'h'
.text:00000206                 mov     eax, 0CCCCCCCCh
.text:0000020B                 rep stosd
.text:0000020D                 pop     ecx
.text:0000020E                 mov     eax, dword ptr ds:___security_cookie
.text:00000213                 xor     eax, ebp
.text:00000215                 mov     [ebp+var_4], eax
.text:00000218                 mov     [ebp+var_8], ecx
.text:0000021B                 mov     eax, [ebp+var_8]
.text:0000021E                 movzx   ecx, byte ptr [eax+239h]
.text:00000225                 test    ecx, ecx
.text:00000227                 jz      short loc_24F
.text:00000229                 push    100h            ; int
.text:0000022E                 lea     edx, [ebp+var_10C]
.text:00000234                 push    edx             ; unsigned __int8 *
.text:00000235                 mov     eax, [ebp+var_8]
.text:00000238                 add     eax, 70h ; 'p'
.text:0000023B                 push    eax             ; struct NCompress::NImplode::NHuffman::CDecoder *
.text:0000023C                 mov     ecx, [ebp+var_8] ; this
.text:0000023F                 call    ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z ; NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)
.text:00000244                 movzx   ecx, al
.text:00000247                 test    ecx, ecx
.text:00000249                 jnz     short loc_24F
.text:0000024B                 xor     al, al
.text:0000024D                 jmp     short loc_28E
.text:0000024F ; ---------------------------------------------------------------------------
.text:0000024F
.text:0000024F loc_24F:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+37j
.text:0000024F                                         ; NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+59j
.text:0000024F                 push    40h ; '@'       ; int
.text:00000251                 lea     edx, [ebp+var_154]
.text:00000257                 push    edx             ; unsigned __int8 *
.text:00000258                 mov     eax, [ebp+var_8]
.text:0000025B                 add     eax, 108h
.text:00000260                 push    eax             ; struct NCompress::NImplode::NHuffman::CDecoder *
.text:00000261                 mov     ecx, [ebp+var_8] ; this
.text:00000264                 call    ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z ; NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)
.text:00000269                 movzx   ecx, al
.text:0000026C                 test    ecx, ecx
.text:0000026E                 jnz     short loc_274
.text:00000270                 xor     al, al
.text:00000272                 jmp     short loc_28E
.text:00000274 ; ---------------------------------------------------------------------------
.text:00000274
.text:00000274 loc_274:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+7Ej
.text:00000274                 push    40h ; '@'       ; int
.text:00000276                 lea     edx, [ebp+var_19C]
.text:0000027C                 push    edx             ; unsigned __int8 *
.text:0000027D                 mov     eax, [ebp+var_8]
.text:00000280                 add     eax, 1A0h
.text:00000285                 push    eax             ; struct NCompress::NImplode::NHuffman::CDecoder *
.text:00000286                 mov     ecx, [ebp+var_8] ; this
.text:00000289                 call    ?ReadLevelItems@CCoder@NDecoder@NImplode@NCompress@@AAE_NAAVCDecoder@NHuffman@34@PAEH@Z ; NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)
.text:0000028E
.text:0000028E loc_28E:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+5Dj
.text:0000028E                                         ; NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+82j
.text:0000028E                 push    edx
.text:0000028F                 mov     ecx, ebp
.text:00000291                 push    eax
.text:00000292                 lea     edx, $LN10
.text:00000298                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000029D                 pop     eax
.text:0000029E                 pop     edx
.text:0000029F                 pop     edi
.text:000002A0                 mov     ecx, [ebp+var_4]
.text:000002A3                 xor     ecx, ebp
.text:000002A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002AA                 add     esp, 1A0h
.text:000002B0                 cmp     ebp, esp
.text:000002B2                 call    __RTC_CheckEsp
.text:000002B7                 mov     esp, ebp
.text:000002B9                 pop     ebp
.text:000002BA                 retn
.text:000002BA ?ReadTables@CCoder@NDecoder@NImplode@NCompress@@AAE_NXZ endp
.text:000002BA
.text:000002BA ; ---------------------------------------------------------------------------
.text:000002BB                 align 4
.text:000002BC $LN10           dd 3                    ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+A2o
.text:000002C0                 dd offset $LN9
.text:000002C4 $LN9            dd 0FFFFFEF4h, 100h     ; DATA XREF: .text:000002C0o
.text:000002CC                 dd offset $LN6          ; "literalLevels"
.text:000002D0                 dd 0FFFFFEACh, 40h
.text:000002D8                 dd offset $LN7          ; "lengthLevels"
.text:000002DC                 dd 0FFFFFE64h, 40h
.text:000002E4                 dd offset $LN8          ; "distanceLevels"
.text:000002E8 $LN8            db 'distanceLevels',0   ; DATA XREF: .text:000002E4o
.text:000002F7 $LN7            db 'lengthLevels',0     ; DATA XREF: .text:000002D8o
.text:00000304 $LN6            db 'literalLevels',0    ; DATA XREF: .text:000002CCo
.text:00000312                 align 10h
.text:00000320
.text:00000320 ; =============== S U B R O U T I N E =======================================
.text:00000320
.text:00000320 ; Attributes: bp-based frame
.text:00000320
.text:00000320 ; __int32 __thiscall NCompress::NImplode::NDecoder::CCoder::CodeReal(NCompress::NImplode::NDecoder::CCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00000320                 public ?CodeReal@CCoder@NDecoder@NImplode@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000320 ?CodeReal@CCoder@NDecoder@NImplode@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00000320                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+61p
.text:00000320
.text:00000320 var_58          = dword ptr -58h
.text:00000320 var_54          = dword ptr -54h
.text:00000320 var_50          = dword ptr -50h
.text:00000320 var_4C          = dword ptr -4Ch
.text:00000320 var_48          = dword ptr -48h
.text:00000320 var_41          = byte ptr -41h
.text:00000320 var_40          = dword ptr -40h
.text:00000320 var_3C          = dword ptr -3Ch
.text:00000320 var_38          = dword ptr -38h
.text:00000320 var_34          = dword ptr -34h
.text:00000320 var_30          = dword ptr -30h
.text:00000320 var_28          = dword ptr -28h
.text:00000320 var_24          = dword ptr -24h
.text:00000320 var_1C          = dword ptr -1Ch
.text:00000320 var_18          = dword ptr -18h
.text:00000320 var_10          = dword ptr -10h
.text:00000320 var_C           = dword ptr -0Ch
.text:00000320 var_4           = dword ptr -4
.text:00000320 arg_0           = dword ptr  8
.text:00000320 arg_4           = dword ptr  0Ch
.text:00000320 arg_C           = dword ptr  14h
.text:00000320 arg_10          = dword ptr  18h
.text:00000320
.text:00000320                 push    ebp
.text:00000321                 mov     ebp, esp
.text:00000323                 sub     esp, 58h
.text:00000326                 push    esi
.text:00000327                 push    edi
.text:00000328                 push    ecx
.text:00000329                 lea     edi, [ebp+var_58]
.text:0000032C                 mov     ecx, 16h
.text:00000331                 mov     eax, 0CCCCCCCCh
.text:00000336                 rep stosd
.text:00000338                 pop     ecx
.text:00000339                 mov     [ebp+var_4], ecx
.text:0000033C                 push    100000h
.text:00000341                 mov     ecx, [ebp+var_4]
.text:00000344                 add     ecx, 38h ; '8'
.text:00000347                 call    ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create(uint)
.text:0000034C                 movzx   eax, al
.text:0000034F                 test    eax, eax
.text:00000351                 jnz     short loc_35D
.text:00000353                 mov     eax, 8007000Eh
.text:00000358                 jmp     loc_646
.text:0000035D ; ---------------------------------------------------------------------------
.text:0000035D
.text:0000035D loc_35D:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+31j
.text:0000035D                 mov     ecx, ds:_kHistorySize
.text:00000363                 push    ecx             ; unsigned int
.text:00000364                 mov     ecx, [ebp+var_4]
.text:00000367                 add     ecx, 10h        ; this
.text:0000036A                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:0000036F                 movzx   edx, al
.text:00000372                 test    edx, edx
.text:00000374                 jnz     short loc_380
.text:00000376                 mov     eax, 8007000Eh
.text:0000037B                 jmp     loc_646
.text:00000380 ; ---------------------------------------------------------------------------
.text:00000380
.text:00000380 loc_380:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+54j
.text:00000380                 cmp     [ebp+arg_C], 0
.text:00000384                 jnz     short loc_390
.text:00000386                 mov     eax, 80070057h
.text:0000038B                 jmp     loc_646
.text:00000390 ; ---------------------------------------------------------------------------
.text:00000390
.text:00000390 loc_390:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:00000390                 mov     [ebp+var_10], 0
.text:00000397                 mov     [ebp+var_C], 0
.text:0000039E                 mov     eax, [ebp+arg_C]
.text:000003A1                 mov     ecx, [eax]
.text:000003A3                 mov     [ebp+var_1C], ecx
.text:000003A6                 mov     edx, [eax+4]
.text:000003A9                 mov     [ebp+var_18], edx
.text:000003AC                 mov     eax, [ebp+arg_4]
.text:000003AF                 push    eax             ; struct ISequentialOutStream *
.text:000003B0                 mov     ecx, [ebp+var_4]
.text:000003B3                 add     ecx, 10h        ; this
.text:000003B6                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:000003BB                 push    0               ; bool
.text:000003BD                 mov     ecx, [ebp+var_4]
.text:000003C0                 add     ecx, 10h        ; this
.text:000003C3                 call    ?Init@CLzOutWindow@@QAEX_N@Z ; CLzOutWindow::Init(bool)
.text:000003C8                 mov     ecx, [ebp+arg_0]
.text:000003CB                 push    ecx             ; struct ISequentialInStream *
.text:000003CC                 mov     ecx, [ebp+var_4]
.text:000003CF                 add     ecx, 38h ; '8'
.text:000003D2                 call    ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ; NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)
.text:000003D7                 mov     ecx, [ebp+var_4]
.text:000003DA                 add     ecx, 38h ; '8'
.text:000003DD                 call    ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Init(void)
.text:000003E2                 mov     ecx, [ebp+var_4] ; this
.text:000003E5                 call    ?ReadTables@CCoder@NDecoder@NImplode@NCompress@@AAE_NXZ ; NCompress::NImplode::NDecoder::CCoder::ReadTables(void)
.text:000003EA                 movzx   edx, al
.text:000003ED                 test    edx, edx
.text:000003EF                 jnz     short loc_3FB
.text:000003F1                 mov     eax, 1
.text:000003F6                 jmp     loc_646
.text:000003FB ; ---------------------------------------------------------------------------
.text:000003FB
.text:000003FB loc_3FB:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+CFj
.text:000003FB                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_61Dj
.text:000003FB                 mov     eax, [ebp+var_C]
.text:000003FE                 cmp     eax, [ebp+var_18]
.text:00000401                 ja      loc_622
.text:00000407                 jb      short loc_415
.text:00000409                 mov     ecx, [ebp+var_10]
.text:0000040C                 cmp     ecx, [ebp+var_1C]
.text:0000040F                 jnb     loc_622
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E7j
.text:00000415                 cmp     [ebp+arg_10], 0
.text:00000419                 jz      short loc_47E
.text:0000041B                 push    0
.text:0000041D                 push    10000h
.text:00000422                 mov     edx, [ebp+var_C]
.text:00000425                 push    edx
.text:00000426                 mov     eax, [ebp+var_10]
.text:00000429                 push    eax
.text:0000042A                 call    __aullrem
.text:0000042F                 mov     [ebp+var_50], eax
.text:00000432                 mov     [ebp+var_4C], edx
.text:00000435                 mov     ecx, [ebp+var_50]
.text:00000438                 or      ecx, [ebp+var_4C]
.text:0000043B                 jnz     short loc_47E
.text:0000043D                 mov     ecx, [ebp+var_4]
.text:00000440                 add     ecx, 38h ; '8'
.text:00000443                 call    ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)
.text:00000448                 mov     [ebp+var_28], eax
.text:0000044B                 mov     [ebp+var_24], edx
.text:0000044E                 mov     esi, esp
.text:00000450                 lea     edx, [ebp+var_10]
.text:00000453                 push    edx
.text:00000454                 lea     eax, [ebp+var_28]
.text:00000457                 push    eax
.text:00000458                 mov     ecx, [ebp+arg_10]
.text:0000045B                 mov     edx, [ecx]
.text:0000045D                 mov     eax, [ebp+arg_10]
.text:00000460                 push    eax
.text:00000461                 mov     ecx, [edx+0Ch]
.text:00000464                 call    ecx
.text:00000466                 cmp     esi, esp
.text:00000468                 call    __RTC_CheckEsp
.text:0000046D                 mov     [ebp+var_30], eax
.text:00000470                 cmp     [ebp+var_30], 0
.text:00000474                 jz      short loc_47E
.text:00000476                 mov     eax, [ebp+var_30]
.text:00000479                 jmp     loc_646
.text:0000047E ; ---------------------------------------------------------------------------
.text:0000047E
.text:0000047E loc_47E:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+F9j
.text:0000047E                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+11Bj ...
.text:0000047E                 push    1
.text:00000480                 mov     ecx, [ebp+var_4]
.text:00000483                 add     ecx, 38h ; '8'
.text:00000486                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:0000048B                 test    eax, eax
.text:0000048D                 jnz     loc_5B0
.text:00000493                 mov     edx, [ebp+var_4]
.text:00000496                 mov     eax, [edx+23Ch]
.text:0000049C                 push    eax
.text:0000049D                 mov     ecx, [ebp+var_4]
.text:000004A0                 add     ecx, 38h ; '8'
.text:000004A3                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:000004A8                 mov     [ebp+var_34], eax
.text:000004AB                 mov     ecx, [ebp+var_4]
.text:000004AE                 add     ecx, 38h ; '8'
.text:000004B1                 push    ecx
.text:000004B2                 mov     ecx, [ebp+var_4]
.text:000004B5                 add     ecx, 1A0h
.text:000004BB                 call    ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)
.text:000004C0                 mov     [ebp+var_38], eax
.text:000004C3                 cmp     [ebp+var_38], 40h ; '@'
.text:000004C7                 jb      short loc_4D3
.text:000004C9                 mov     eax, 1
.text:000004CE                 jmp     loc_646
.text:000004D3 ; ---------------------------------------------------------------------------
.text:000004D3
.text:000004D3 loc_4D3:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A7j
.text:000004D3                 mov     edx, [ebp+var_4]
.text:000004D6                 mov     eax, [ebp+var_38]
.text:000004D9                 mov     ecx, [edx+23Ch]
.text:000004DF                 shl     eax, cl
.text:000004E1                 add     eax, [ebp+var_34]
.text:000004E4                 mov     [ebp+var_38], eax
.text:000004E7                 mov     ecx, [ebp+var_4]
.text:000004EA                 add     ecx, 38h ; '8'
.text:000004ED                 push    ecx
.text:000004EE                 mov     ecx, [ebp+var_4]
.text:000004F1                 add     ecx, 108h
.text:000004F7                 call    ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)
.text:000004FC                 mov     [ebp+var_3C], eax
.text:000004FF                 cmp     [ebp+var_3C], 40h ; '@'
.text:00000503                 jb      short loc_50F
.text:00000505                 mov     eax, 1
.text:0000050A                 jmp     loc_646
.text:0000050F ; ---------------------------------------------------------------------------
.text:0000050F
.text:0000050F loc_50F:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1E3j
.text:0000050F                 mov     edx, [ebp+var_4]
.text:00000512                 mov     eax, [ebp+var_3C]
.text:00000515                 add     eax, [edx+240h]
.text:0000051B                 mov     [ebp+var_40], eax
.text:0000051E                 cmp     [ebp+var_3C], 3Fh ; '?'
.text:00000522                 jnz     short loc_537
.text:00000524                 push    8
.text:00000526                 mov     ecx, [ebp+var_4]
.text:00000529                 add     ecx, 38h ; '8'
.text:0000052C                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:00000531                 add     eax, [ebp+var_40]
.text:00000534                 mov     [ebp+var_40], eax
.text:00000537
.text:00000537 loc_537:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+202j
.text:00000537                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+262j
.text:00000537                 mov     ecx, [ebp+var_38]
.text:0000053A                 xor     edx, edx
.text:0000053C                 mov     [ebp+var_58], ecx
.text:0000053F                 mov     [ebp+var_54], edx
.text:00000542                 mov     eax, [ebp+var_54]
.text:00000545                 cmp     eax, [ebp+var_C]
.text:00000548                 jb      short loc_584
.text:0000054A                 ja      short loc_554
.text:0000054C                 mov     ecx, [ebp+var_58]
.text:0000054F                 cmp     ecx, [ebp+var_10]
.text:00000552                 jb      short loc_584
.text:00000554
.text:00000554 loc_554:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+22Aj
.text:00000554                 cmp     [ebp+var_40], 0
.text:00000558                 jbe     short loc_584
.text:0000055A                 push    0               ; unsigned __int8
.text:0000055C                 mov     ecx, [ebp+var_4]
.text:0000055F                 add     ecx, 10h        ; this
.text:00000562                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:00000567                 mov     edx, [ebp+var_10]
.text:0000056A                 add     edx, 1
.text:0000056D                 mov     eax, [ebp+var_C]
.text:00000570                 adc     eax, 0
.text:00000573                 mov     [ebp+var_10], edx
.text:00000576                 mov     [ebp+var_C], eax
.text:00000579                 mov     ecx, [ebp+var_40]
.text:0000057C                 sub     ecx, 1
.text:0000057F                 mov     [ebp+var_40], ecx
.text:00000582                 jmp     short loc_537
.text:00000584 ; ---------------------------------------------------------------------------
.text:00000584
.text:00000584 loc_584:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+228j
.text:00000584                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+232j ...
.text:00000584                 cmp     [ebp+var_40], 0
.text:00000588                 jbe     short loc_59D
.text:0000058A                 mov     edx, [ebp+var_40]
.text:0000058D                 push    edx             ; unsigned int
.text:0000058E                 mov     eax, [ebp+var_38]
.text:00000591                 push    eax             ; unsigned int
.text:00000592                 mov     ecx, [ebp+var_4]
.text:00000595                 add     ecx, 10h        ; this
.text:00000598                 call    ?CopyBlock@CLzOutWindow@@QAE_NII@Z ; CLzOutWindow::CopyBlock(uint,uint)
.text:0000059D
.text:0000059D loc_59D:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+268j
.text:0000059D                 mov     ecx, [ebp+var_40]
.text:000005A0                 xor     edx, edx
.text:000005A2                 add     ecx, [ebp+var_10]
.text:000005A5                 adc     edx, [ebp+var_C]
.text:000005A8                 mov     [ebp+var_10], ecx
.text:000005AB                 mov     [ebp+var_C], edx
.text:000005AE                 jmp     short loc_61D
.text:000005B0 ; ---------------------------------------------------------------------------
.text:000005B0
.text:000005B0 loc_5B0:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+16Dj
.text:000005B0                 mov     eax, [ebp+var_4]
.text:000005B3                 movzx   ecx, byte ptr [eax+239h]
.text:000005BA                 test    ecx, ecx
.text:000005BC                 jz      short loc_5EB
.text:000005BE                 mov     edx, [ebp+var_4]
.text:000005C1                 add     edx, 38h ; '8'
.text:000005C4                 push    edx
.text:000005C5                 mov     ecx, [ebp+var_4]
.text:000005C8                 add     ecx, 70h ; 'p'
.text:000005CB                 call    ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(NBitl::CDecoder<CInBuffer> *)
.text:000005D0                 mov     [ebp+var_48], eax
.text:000005D3                 cmp     [ebp+var_48], 100h
.text:000005DA                 jb      short loc_5E3
.text:000005DC                 mov     eax, 1
.text:000005E1                 jmp     short loc_646
.text:000005E3 ; ---------------------------------------------------------------------------
.text:000005E3
.text:000005E3 loc_5E3:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2BAj
.text:000005E3                 mov     al, byte ptr [ebp+var_48]
.text:000005E6                 mov     [ebp+var_41], al
.text:000005E9                 jmp     short loc_5FB
.text:000005EB ; ---------------------------------------------------------------------------
.text:000005EB
.text:000005EB loc_5EB:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+29Cj
.text:000005EB                 push    8
.text:000005ED                 mov     ecx, [ebp+var_4]
.text:000005F0                 add     ecx, 38h ; '8'
.text:000005F3                 call    ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::ReadBits(uint)
.text:000005F8                 mov     [ebp+var_41], al
.text:000005FB
.text:000005FB loc_5FB:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2C9j
.text:000005FB                 movzx   ecx, [ebp+var_41]
.text:000005FF                 push    ecx             ; unsigned __int8
.text:00000600                 mov     ecx, [ebp+var_4]
.text:00000603                 add     ecx, 10h        ; this
.text:00000606                 call    ?PutByte@CLzOutWindow@@QAEXE@Z ; CLzOutWindow::PutByte(uchar)
.text:0000060B                 mov     edx, [ebp+var_10]
.text:0000060E                 add     edx, 1
.text:00000611                 mov     eax, [ebp+var_C]
.text:00000614                 adc     eax, 0
.text:00000617                 mov     [ebp+var_10], edx
.text:0000061A                 mov     [ebp+var_C], eax
.text:0000061D
.text:0000061D loc_61D:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+28Ej
.text:0000061D                 jmp     loc_3FB
.text:00000622 ; ---------------------------------------------------------------------------
.text:00000622
.text:00000622 loc_622:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+E1j
.text:00000622                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+EFj
.text:00000622                 mov     ecx, [ebp+var_C]
.text:00000625                 cmp     ecx, [ebp+var_18]
.text:00000628                 jb      short loc_63B
.text:0000062A                 ja      short loc_634
.text:0000062C                 mov     edx, [ebp+var_10]
.text:0000062F                 cmp     edx, [ebp+var_1C]
.text:00000632                 jbe     short loc_63B
.text:00000634
.text:00000634 loc_634:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+30Aj
.text:00000634                 mov     eax, 1
.text:00000639                 jmp     short loc_646
.text:0000063B ; ---------------------------------------------------------------------------
.text:0000063B
.text:0000063B loc_63B:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+308j
.text:0000063B                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+312j
.text:0000063B                 mov     ecx, [ebp+var_4]
.text:0000063E                 add     ecx, 10h        ; this
.text:00000641                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00000646
.text:00000646 loc_646:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+38j
.text:00000646                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Bj ...
.text:00000646                 push    edx
.text:00000647                 mov     ecx, ebp
.text:00000649                 push    eax
.text:0000064A                 lea     edx, $LN29
.text:00000650                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000655                 pop     eax
.text:00000656                 pop     edx
.text:00000657                 pop     edi
.text:00000658                 pop     esi
.text:00000659                 add     esp, 58h
.text:0000065C                 cmp     ebp, esp
.text:0000065E                 call    __RTC_CheckEsp
.text:00000663                 mov     esp, ebp
.text:00000665                 pop     ebp
.text:00000666                 retn    14h
.text:00000666 ?CodeReal@CCoder@NDecoder@NImplode@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00000666
.text:00000666 ; ---------------------------------------------------------------------------
.text:00000669                 align 4
.text:0000066C $LN29           dd 2                    ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+32Ao
.text:00000670                 dd offset $LN28
.text:00000674 $LN28           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00000670o
.text:0000067C                 dd offset $LN26         ; "pos"
.text:00000680                 dd 0FFFFFFD8h, 8
.text:00000688                 dd offset $LN27         ; "packSize"
.text:0000068C $LN27           db 'packSize',0         ; DATA XREF: .text:00000688o
.text:00000695 $LN26           db 'pos',0              ; DATA XREF: .text:0000067Co
.text:00000699                 align 10h
.text:000006A0
.text:000006A0 ; =============== S U B R O U T I N E =======================================
.text:000006A0
.text:000006A0 ; Attributes: bp-based frame
.text:000006A0
.text:000006A0 ; __int32 __cdecl NCompress::NImplode::NDecoder::CCoder::Code(NCompress::NImplode::NDecoder::CCoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000006A0                 public ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000006A0 ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000006A0                                         ; DATA XREF: .rdata:000008B8o
.text:000006A0
.text:000006A0 var_28          = dword ptr -28h
.text:000006A0 var_24          = dword ptr -24h
.text:000006A0 var_20          = dword ptr -20h
.text:000006A0 var_1C          = dword ptr -1Ch
.text:000006A0 var_18          = dword ptr -18h
.text:000006A0 var_14          = dword ptr -14h
.text:000006A0 var_10          = dword ptr -10h
.text:000006A0 var_C           = dword ptr -0Ch
.text:000006A0 var_4           = dword ptr -4
.text:000006A0 this            = dword ptr  8
.text:000006A0 arg_4           = dword ptr  0Ch
.text:000006A0 arg_8           = dword ptr  10h
.text:000006A0 arg_C           = dword ptr  14h
.text:000006A0 arg_10          = dword ptr  18h
.text:000006A0 arg_14          = dword ptr  1Ch
.text:000006A0
.text:000006A0 ; FUNCTION CHUNK AT .text:00000756 SIZE 0000002F BYTES
.text:000006A0
.text:000006A0                 push    ebp
.text:000006A1                 mov     ebp, esp
.text:000006A3                 push    0FFFFFFFFh
.text:000006A5                 push    offset __ehhandler$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000006AA                 mov     eax, large fs:0
.text:000006B0                 push    eax
.text:000006B1                 push    ecx
.text:000006B2                 sub     esp, 18h
.text:000006B5                 push    ebx
.text:000006B6                 push    esi
.text:000006B7                 push    edi
.text:000006B8                 mov     eax, 0CCCCCCCCh
.text:000006BD                 mov     [ebp+var_28], eax
.text:000006C0                 mov     [ebp+var_24], eax
.text:000006C3                 mov     [ebp+var_20], eax
.text:000006C6                 mov     [ebp+var_1C], eax
.text:000006C9                 mov     [ebp+var_18], eax
.text:000006CC                 mov     [ebp+var_14], eax
.text:000006CF                 mov     eax, dword ptr ds:___security_cookie
.text:000006D4                 xor     eax, ebp
.text:000006D6                 push    eax
.text:000006D7                 lea     eax, [ebp+var_C]
.text:000006DA                 mov     large fs:0, eax
.text:000006E0                 mov     [ebp+var_10], esp
.text:000006E3                 mov     [ebp+var_4], 0
.text:000006EA                 mov     eax, [ebp+arg_14]
.text:000006ED                 push    eax             ; struct ICompressProgressInfo *
.text:000006EE                 mov     ecx, [ebp+arg_10]
.text:000006F1                 push    ecx             ; unsigned __int64 *
.text:000006F2                 mov     edx, [ebp+arg_C]
.text:000006F5                 push    edx             ; unsigned __int64 *
.text:000006F6                 mov     eax, [ebp+arg_8]
.text:000006F9                 push    eax             ; struct ISequentialOutStream *
.text:000006FA                 mov     ecx, [ebp+arg_4]
.text:000006FD                 push    ecx             ; struct ISequentialInStream *
.text:000006FE                 mov     ecx, [ebp+this] ; this
.text:00000701                 call    ?CodeReal@CCoder@NDecoder@NImplode@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00000706                 mov     [ebp+var_28], eax
.text:00000709                 mov     eax, [ebp+var_28]
.text:0000070C                 jmp     short loc_756
.text:0000070C ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:0000070C
.text:0000070E
.text:0000070E ; =============== S U B R O U T I N E =======================================
.text:0000070E
.text:0000070E
.text:0000070E __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:0000070E                                         ; DATA XREF: .xdata$x:00000930o
.text:0000070E                 mov     edx, [ebp-18h]
.text:00000711                 mov     eax, [edx]
.text:00000713                 mov     [ebp-20h], eax
.text:00000716                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000071D                 mov     eax, offset $LN8_0
.text:00000722                 retn
.text:00000722 __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:00000722
.text:00000723 ; ---------------------------------------------------------------------------
.text:00000723                 mov     eax, offset __tryend$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00000728                 retn
.text:00000729
.text:00000729 ; =============== S U B R O U T I N E =======================================
.text:00000729
.text:00000729
.text:00000729 __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00000729                                         ; DATA XREF: .xdata$x:00000940o
.text:00000729                 mov     dword ptr [ebp-24h], 1
.text:00000730                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000737                 mov     eax, offset $LN10_0
.text:0000073C                 retn
.text:0000073C __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:0000073C
.text:0000073D ; ---------------------------------------------------------------------------
.text:0000073D                 mov     eax, offset __tryend$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.text:00000742                 retn
.text:00000743 ; ---------------------------------------------------------------------------
.text:00000743
.text:00000743 __tryend$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2:
.text:00000743                                         ; DATA XREF: .text:00000723o
.text:00000743                                         ; .text:0000073Do
.text:00000743                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000074A                 jmp     short loc_751
.text:0000074C ; ---------------------------------------------------------------------------
.text:0000074C
.text:0000074C $LN10_0:                                ; DATA XREF: __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Eo
.text:0000074C                 mov     eax, [ebp-24h]
.text:0000074F                 jmp     short loc_756
.text:00000751 ; ---------------------------------------------------------------------------
.text:00000751
.text:00000751 loc_751:                                ; CODE XREF: .text:0000074Aj
.text:00000751                 jmp     short loc_756
.text:00000753 ; ---------------------------------------------------------------------------
.text:00000753
.text:00000753 $LN8_0:                                 ; DATA XREF: __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:00000753                 mov     eax, [ebp-20h]
.text:00000756 ; START OF FUNCTION CHUNK FOR ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000756
.text:00000756 loc_756:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+6Cj
.text:00000756                                         ; .text:0000074Fj ...
.text:00000756                 push    edx
.text:00000757                 mov     ecx, ebp
.text:00000759                 push    eax
.text:0000075A                 lea     edx, $LN16
.text:00000760                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000765                 pop     eax
.text:00000766                 pop     edx
.text:00000767                 mov     ecx, [ebp+var_C]
.text:0000076A                 mov     large fs:0, ecx
.text:00000771                 pop     ecx
.text:00000772                 pop     edi
.text:00000773                 pop     esi
.text:00000774                 pop     ebx
.text:00000775                 add     esp, 28h
.text:00000778                 cmp     ebp, esp
.text:0000077A                 call    __RTC_CheckEsp
.text:0000077F                 mov     esp, ebp
.text:00000781                 pop     ebp
.text:00000782                 retn    18h
.text:00000782 ; END OF FUNCTION CHUNK FOR ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00000782 ; ---------------------------------------------------------------------------
.text:00000785                 align 4
.text:00000788 $LN16           dd 1                    ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BAo
.text:0000078C                 dd offset $LN15
.text:00000790 $LN15           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000078Co
.text:00000798                 dd offset $LN13
.text:0000079C $LN13           dd 0CCCC0065h           ; DATA XREF: .text:00000798o
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; __int32 __stdcall NCompress::NImplode::NDecoder::CCoder::SetDecoderProperties2(NCompress::NImplode::NDecoder::CCoder *this, const unsigned __int8 *, unsigned int)
.text:000007A0                 public ?SetDecoderProperties2@CCoder@NDecoder@NImplode@NCompress@@UAGJPBEI@Z
.text:000007A0 ?SetDecoderProperties2@CCoder@NDecoder@NImplode@NCompress@@UAGJPBEI@Z proc near
.text:000007A0                                         ; DATA XREF: .rdata:000008A4o
.text:000007A0
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 this            = dword ptr  8
.text:000007A0 arg_4           = dword ptr  0Ch
.text:000007A0 arg_8           = dword ptr  10h
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 push    ecx
.text:000007A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007AB                 cmp     [ebp+arg_8], 1
.text:000007AF                 jnb     short loc_7B8
.text:000007B1                 mov     eax, 80070057h
.text:000007B6                 jmp     short loc_826
.text:000007B8 ; ---------------------------------------------------------------------------
.text:000007B8
.text:000007B8 loc_7B8:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::SetDecoderProperties2(uchar const *,uint)+Fj
.text:000007B8                 mov     eax, [ebp+arg_4]
.text:000007BB                 mov     cl, [eax]
.text:000007BD                 mov     byte ptr [ebp+var_4+3], cl
.text:000007C0                 movzx   edx, byte ptr [ebp+var_4+3]
.text:000007C4                 and     edx, 2
.text:000007C7                 neg     edx
.text:000007C9                 sbb     edx, edx
.text:000007CB                 neg     edx
.text:000007CD                 mov     eax, [ebp+this]
.text:000007D0                 mov     [eax+234h], dl
.text:000007D6                 mov     ecx, [ebp+this]
.text:000007D9                 movzx   edx, byte ptr [ecx+234h]
.text:000007E0                 neg     edx
.text:000007E2                 sbb     edx, edx
.text:000007E4                 neg     edx
.text:000007E6                 add     edx, 6
.text:000007E9                 mov     eax, [ebp+this]
.text:000007EC                 mov     [eax+238h], edx
.text:000007F2                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:000007F6                 and     ecx, 4
.text:000007F9                 neg     ecx
.text:000007FB                 sbb     ecx, ecx
.text:000007FD                 neg     ecx
.text:000007FF                 mov     edx, [ebp+this]
.text:00000802                 mov     [edx+235h], cl
.text:00000808                 mov     eax, [ebp+this]
.text:0000080B                 movzx   ecx, byte ptr [eax+235h]
.text:00000812                 neg     ecx
.text:00000814                 sbb     ecx, ecx
.text:00000816                 neg     ecx
.text:00000818                 add     ecx, 2
.text:0000081B                 mov     edx, [ebp+this]
.text:0000081E                 mov     [edx+23Ch], ecx
.text:00000824                 xor     eax, eax
.text:00000826
.text:00000826 loc_826:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::SetDecoderProperties2(uchar const *,uint)+16j
.text:00000826                 mov     esp, ebp
.text:00000828                 pop     ebp
.text:00000829                 retn    0Ch
.text:00000829 ?SetDecoderProperties2@CCoder@NDecoder@NImplode@NCompress@@UAGJPBEI@Z endp
.text:00000829
.text:00000829 _text           ends
.text:00000829
.text$x:0000082C ; ===========================================================================
.text$x:0000082C
.text$x:0000082C ; Segment type: Pure code
.text$x:0000082C ; Segment permissions: Read/Execute
.text$x:0000082C _text$x         segment para public 'CODE' use32
.text$x:0000082C                 assume cs:_text$x
.text$x:0000082C                 ;org 82Ch
.text$x:0000082C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000082C
.text$x:0000082C ; =============== S U B R O U T I N E =======================================
.text$x:0000082C
.text$x:0000082C
.text$x:0000082C __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0 proc near
.text$x:0000082C                                         ; DATA XREF: .xdata$x:000008C0o
.text$x:0000082C                 mov     ecx, [ebp-10h]
.text$x:0000082F                 add     ecx, 10h        ; this
.text$x:00000832                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00000832 __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0 endp
.text$x:00000832
.text$x:00000837
.text$x:00000837 ; =============== S U B R O U T I N E =======================================
.text$x:00000837
.text$x:00000837
.text$x:00000837 __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1 proc near
.text$x:00000837                                         ; DATA XREF: .xdata$x:000008C8o
.text$x:00000837                 mov     ecx, [ebp-10h]
.text$x:0000083A                 add     ecx, 38h ; '8'
.text$x:0000083D                 jmp     ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text$x:0000083D __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1 endp
.text$x:0000083D
.text$x:00000842
.text$x:00000842 ; =============== S U B R O U T I N E =======================================
.text$x:00000842
.text$x:00000842
.text$x:00000842 __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2 proc near
.text$x:00000842                                         ; DATA XREF: .xdata$x:000008D0o
.text$x:00000842                 mov     ecx, [ebp-10h]
.text$x:00000845                 add     ecx, 70h ; 'p'  ; this
.text$x:00000848                 jmp     ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text$x:00000848 __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2 endp
.text$x:00000848
.text$x:0000084D
.text$x:0000084D ; =============== S U B R O U T I N E =======================================
.text$x:0000084D
.text$x:0000084D
.text$x:0000084D __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3 proc near
.text$x:0000084D                                         ; DATA XREF: .xdata$x:000008D8o
.text$x:0000084D                 mov     ecx, [ebp-10h]
.text$x:00000850                 add     ecx, 108h       ; this
.text$x:00000856                 jmp     ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text$x:00000856 __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3 endp
.text$x:00000856
.text$x:0000085B
.text$x:0000085B ; =============== S U B R O U T I N E =======================================
.text$x:0000085B
.text$x:0000085B
.text$x:0000085B __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ proc near
.text$x:0000085B                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+5o
.text$x:0000085B
.text$x:0000085B arg_4           = dword ptr  8
.text$x:0000085B
.text$x:0000085B                 mov     edx, [esp+arg_4]
.text$x:0000085F                 lea     eax, [edx+0Ch]
.text$x:00000862                 mov     ecx, [edx-8]
.text$x:00000865                 xor     ecx, eax
.text$x:00000867                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000086C                 mov     eax, offset __ehfuncinfo$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text$x:00000871                 jmp     ___CxxFrameHandler3
.text$x:00000871 __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ endp
.text$x:00000871
.text$x:00000876
.text$x:00000876 ; =============== S U B R O U T I N E =======================================
.text$x:00000876
.text$x:00000876
.text$x:00000876 __ehhandler$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00000876                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00000876
.text$x:00000876 arg_4           = dword ptr  8
.text$x:00000876
.text$x:00000876                 mov     edx, [esp+arg_4]
.text$x:0000087A                 lea     eax, [edx+0Ch]
.text$x:0000087D                 mov     ecx, [edx-2Ch]
.text$x:00000880                 xor     ecx, eax
.text$x:00000882                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000887                 mov     eax, offset __ehfuncinfo$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:0000088C                 jmp     ___CxxFrameHandler3
.text$x:0000088C __ehhandler$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:0000088C
.text$x:0000088C ; ---------------------------------------------------------------------------
.text$x:00000891                 align 4
.text$x:00000891 _text$x         ends
.text$x:00000891
.rdata:00000894 ; ===========================================================================
.rdata:00000894
.rdata:00000894 ; Segment type: Pure data
.rdata:00000894 ; Segment permissions: Read
.rdata:00000894 _rdata          segment dword public 'DATA' use32
.rdata:00000894                 assume cs:_rdata
.rdata:00000894                 ;org 894h
.rdata:00000894 ; COMDAT (pick largest)
.rdata:00000894                 dd offset ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@ ; const NCompress::NImplode::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata:00000898                 public ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata:00000898 ; const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressSetDecoderProperties2'}
.rdata:00000898 ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@ dd offset ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00000898                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+57o
.rdata:00000898                                         ; [thunk]:NCompress::NImplode::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:0000089C                 dd offset ?AddRef@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ ; [thunk]:NCompress::NImplode::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.rdata:000008A0                 dd offset ?Release@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ ; [thunk]:NCompress::NImplode::NDecoder::CCoder::Release`adjustor{4}' (void)
.rdata:000008A4                 dd offset ?SetDecoderProperties2@CCoder@NDecoder@NImplode@NCompress@@UAGJPBEI@Z ; NCompress::NImplode::NDecoder::CCoder::SetDecoderProperties2(uchar const *,uint)
.rdata:000008A4 _rdata          ends
.rdata:000008A4
.rdata:000008A8 ; ===========================================================================
.rdata:000008A8
.rdata:000008A8 ; Segment type: Pure data
.rdata:000008A8 ; Segment permissions: Read
.rdata:000008A8 _rdata          segment dword public 'DATA' use32
.rdata:000008A8                 assume cs:_rdata
.rdata:000008A8                 ;org 8A8h
.rdata:000008A8 ; COMDAT (pick largest)
.rdata:000008A8                 dd offset ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@ ; const NCompress::NImplode::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:000008AC                 public ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@
.rdata:000008AC ; const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressCoder'}
.rdata:000008AC ??_7CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:000008AC                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+4Eo
.rdata:000008AC                                         ; NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.rdata:000008B0                 dd offset ?AddRef@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ ; NCompress::NImplode::NDecoder::CCoder::AddRef(void)
.rdata:000008B4                 dd offset ?Release@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ ; NCompress::NImplode::NDecoder::CCoder::Release(void)
.rdata:000008B8                 dd offset ?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NImplode::NDecoder::CCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:000008B8 _rdata          ends
.rdata:000008B8
.xdata$x:000008BC ; ===========================================================================
.xdata$x:000008BC
.xdata$x:000008BC ; Segment type: Pure data
.xdata$x:000008BC ; Segment permissions: Read
.xdata$x:000008BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000008BC                 assume cs:_xdata$x
.xdata$x:000008BC                 ;org 8BCh
.xdata$x:000008BC __unwindtable$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ db 0FFh
.xdata$x:000008BC                                         ; DATA XREF: .xdata$x:000008E4o
.xdata$x:000008BD                 db 0FFh
.xdata$x:000008BE                 db 0FFh
.xdata$x:000008BF                 db 0FFh
.xdata$x:000008C0                 dd offset __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0
.xdata$x:000008C4                 align 8
.xdata$x:000008C8                 dd offset __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1
.xdata$x:000008CC                 db    1
.xdata$x:000008CD                 db    0
.xdata$x:000008CE                 db    0
.xdata$x:000008CF                 db    0
.xdata$x:000008D0                 dd offset __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2
.xdata$x:000008D4                 db    2
.xdata$x:000008D5                 db    0
.xdata$x:000008D6                 db    0
.xdata$x:000008D7                 db    0
.xdata$x:000008D8                 dd offset __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3
.xdata$x:000008DC __ehfuncinfo$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ db  22h ; "
.xdata$x:000008DC                                         ; DATA XREF: __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ+11o
.xdata$x:000008DD                 db    5
.xdata$x:000008DE                 db  93h ; ô
.xdata$x:000008DF                 db  19h
.xdata$x:000008E0                 db    4
.xdata$x:000008E1                 db    0
.xdata$x:000008E2                 db    0
.xdata$x:000008E3                 db    0
.xdata$x:000008E4                 dd offset __unwindtable$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.xdata$x:000008E8                 db    0
.xdata$x:000008E9                 db    0
.xdata$x:000008EA                 db    0
.xdata$x:000008EB                 db    0
.xdata$x:000008EC                 db    0
.xdata$x:000008ED                 db    0
.xdata$x:000008EE                 db    0
.xdata$x:000008EF                 db    0
.xdata$x:000008F0                 db    0
.xdata$x:000008F1                 db    0
.xdata$x:000008F2                 db    0
.xdata$x:000008F3                 db    0
.xdata$x:000008F4                 db    0
.xdata$x:000008F5                 db    0
.xdata$x:000008F6                 db    0
.xdata$x:000008F7                 db    0
.xdata$x:000008F8                 db    0
.xdata$x:000008F9                 db    0
.xdata$x:000008FA                 db    0
.xdata$x:000008FB                 db    0
.xdata$x:000008FC                 db    1
.xdata$x:000008FD                 db    0
.xdata$x:000008FE                 db    0
.xdata$x:000008FF                 db    0
.xdata$x:00000900 __unwindtable$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:00000900                                         ; DATA XREF: .xdata$x:0000094Co
.xdata$x:00000901                 db 0FFh
.xdata$x:00000902                 db 0FFh
.xdata$x:00000903                 db 0FFh
.xdata$x:00000904                 db    0
.xdata$x:00000905                 db    0
.xdata$x:00000906                 db    0
.xdata$x:00000907                 db    0
.xdata$x:00000908                 db 0FFh
.xdata$x:00000909                 db 0FFh
.xdata$x:0000090A                 db 0FFh
.xdata$x:0000090B                 db 0FFh
.xdata$x:0000090C                 db    0
.xdata$x:0000090D                 db    0
.xdata$x:0000090E                 db    0
.xdata$x:0000090F                 db    0
.xdata$x:00000910 __tryblocktable$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:00000910                                         ; DATA XREF: .xdata$x:00000954o
.xdata$x:00000911                 db    0
.xdata$x:00000912                 db    0
.xdata$x:00000913                 db    0
.xdata$x:00000914                 db    0
.xdata$x:00000915                 db    0
.xdata$x:00000916                 db    0
.xdata$x:00000917                 db    0
.xdata$x:00000918                 db    1
.xdata$x:00000919                 db    0
.xdata$x:0000091A                 db    0
.xdata$x:0000091B                 db    0
.xdata$x:0000091C                 db    2
.xdata$x:0000091D                 db    0
.xdata$x:0000091E                 db    0
.xdata$x:0000091F                 db    0
.xdata$x:00000920                 dd offset __catchsym$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.xdata$x:00000924 __catchsym$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3 db    9
.xdata$x:00000924                                         ; DATA XREF: .xdata$x:00000920o
.xdata$x:00000925                 db    0
.xdata$x:00000926                 db    0
.xdata$x:00000927                 db    0
.xdata$x:00000928                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:0000092C                 db 0E8h ; F
.xdata$x:0000092D                 db 0FFh
.xdata$x:0000092E                 db 0FFh
.xdata$x:0000092F                 db 0FFh
.xdata$x:00000930                 dd offset __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00000934                 dd offset loc_40
.xdata$x:00000938                 align 10h
.xdata$x:00000940                 dd offset __catch$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00000944 __ehfuncinfo$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:00000944                                         ; DATA XREF: __ehhandler$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:00000945                 db    5
.xdata$x:00000946                 db  93h ; ô
.xdata$x:00000947                 db  19h
.xdata$x:00000948                 db    2
.xdata$x:00000949                 db    0
.xdata$x:0000094A                 db    0
.xdata$x:0000094B                 db    0
.xdata$x:0000094C                 dd offset __unwindtable$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00000950                 db    1
.xdata$x:00000951                 db    0
.xdata$x:00000952                 db    0
.xdata$x:00000953                 db    0
.xdata$x:00000954                 dd offset __tryblocktable$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:00000958                 db    0
.xdata$x:00000959                 db    0
.xdata$x:0000095A                 db    0
.xdata$x:0000095B                 db    0
.xdata$x:0000095C                 db    0
.xdata$x:0000095D                 db    0
.xdata$x:0000095E                 db    0
.xdata$x:0000095F                 db    0
.xdata$x:00000960                 db    0
.xdata$x:00000961                 db    0
.xdata$x:00000962                 db    0
.xdata$x:00000963                 db    0
.xdata$x:00000964                 db    1
.xdata$x:00000965                 db    0
.xdata$x:00000966                 db    0
.xdata$x:00000967                 db    0
.xdata$x:00000967 _xdata$x        ends
.xdata$x:00000967
.rtc$TMZ:00000968 ; ===========================================================================
.rtc$TMZ:00000968
.rtc$TMZ:00000968 ; Segment type: Pure data
.rtc$TMZ:00000968 ; Segment permissions: Read
.rtc$TMZ:00000968 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000968                 assume cs:_rtc$TMZ
.rtc$TMZ:00000968                 ;org 968h
.rtc$TMZ:00000968 ; COMDAT (pick any)
.rtc$TMZ:00000968 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000968 _rtc$TMZ        ends
.rtc$TMZ:00000968
.rtc$IMZ:0000096C ; ===========================================================================
.rtc$IMZ:0000096C
.rtc$IMZ:0000096C ; Segment type: Pure data
.rtc$IMZ:0000096C ; Segment permissions: Read
.rtc$IMZ:0000096C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000096C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000096C                 ;org 96Ch
.rtc$IMZ:0000096C ; COMDAT (pick any)
.rtc$IMZ:0000096C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000096C _rtc$IMZ        ends
.rtc$IMZ:0000096C
.rdata$r:00000970 ; ===========================================================================
.rdata$r:00000970
.rdata$r:00000970 ; Segment type: Pure data
.rdata$r:00000970 ; Segment permissions: Read
.rdata$r:00000970 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000970                 assume cs:_rdata$r
.rdata$r:00000970                 ;org 970h
.rdata$r:00000970 ; COMDAT (pick any)
.rdata$r:00000970                 public ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@
.rdata$r:00000970 ; const NCompress::NImplode::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00000970 ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00000970                                         ; DATA XREF: .rdata:000008A8o
.rdata$r:00000971                 db    0
.rdata$r:00000972                 db    0
.rdata$r:00000973                 db    0
.rdata$r:00000974                 db    0
.rdata$r:00000975                 db    0
.rdata$r:00000976                 db    0
.rdata$r:00000977                 db    0
.rdata$r:00000978                 db    0
.rdata$r:00000979                 db    0
.rdata$r:0000097A                 db    0
.rdata$r:0000097B                 db    0
.rdata$r:0000097C                 dd offset ??_R0?AVCCoder@NDecoder@NImplode@NCompress@@@8 ; NCompress::NImplode::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000980                 dd offset ??_R3CCoder@NDecoder@NImplode@NCompress@@8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000980 _rdata$r        ends
.rdata$r:00000980
.data:00000984 ; ===========================================================================
.data:00000984
.data:00000984 ; Segment type: Pure data
.data:00000984 ; Segment permissions: Read/Write
.data:00000984 _data           segment dword public 'DATA' use32
.data:00000984                 assume cs:_data
.data:00000984                 ;org 984h
.data:00000984 ; COMDAT (pick any)
.data:00000984                 public ??_R0?AVCCoder@NDecoder@NImplode@NCompress@@@8
.data:00000984 ; class NCompress::NImplode::NDecoder::CCoder `RTTI Type Descriptor'
.data:00000984 ??_R0?AVCCoder@NDecoder@NImplode@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00000984                                         ; DATA XREF: .rdata$r:0000097Co
.data:00000984                                         ; .rdata$r:NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000984                                         ; const type_info::`vftable'
.data:00000988                 db    0
.data:00000989                 db    0
.data:0000098A                 db    0
.data:0000098B                 db    0
.data:0000098C                 db  2Eh ; .
.data:0000098D                 db  3Fh ; ?
.data:0000098E                 db  41h ; A
.data:0000098F                 db  56h ; V
.data:00000990                 db  43h ; C
.data:00000991                 db  43h ; C
.data:00000992                 db  6Fh ; o
.data:00000993                 db  64h ; d
.data:00000994                 db  65h ; e
.data:00000995                 db  72h ; r
.data:00000996                 db  40h ; @
.data:00000997                 db  4Eh ; N
.data:00000998                 db  44h ; D
.data:00000999                 db  65h ; e
.data:0000099A                 db  63h ; c
.data:0000099B                 db  6Fh ; o
.data:0000099C                 db  64h ; d
.data:0000099D                 db  65h ; e
.data:0000099E                 db  72h ; r
.data:0000099F                 db  40h ; @
.data:000009A0                 db  4Eh ; N
.data:000009A1                 db  49h ; I
.data:000009A2                 db  6Dh ; m
.data:000009A3                 db  70h ; p
.data:000009A4                 db  6Ch ; l
.data:000009A5                 db  6Fh ; o
.data:000009A6                 db  64h ; d
.data:000009A7                 db  65h ; e
.data:000009A8                 db  40h ; @
.data:000009A9                 db  4Eh ; N
.data:000009AA                 db  43h ; C
.data:000009AB                 db  6Fh ; o
.data:000009AC                 db  6Dh ; m
.data:000009AD                 db  70h ; p
.data:000009AE                 db  72h ; r
.data:000009AF                 db  65h ; e
.data:000009B0                 db  73h ; s
.data:000009B1                 db  73h ; s
.data:000009B2                 db  40h ; @
.data:000009B3                 db  40h ; @
.data:000009B4                 db    0
.data:000009B5                 align 4
.data:000009B5 _data           ends
.data:000009B5
.rdata$r:000009B8 ; ===========================================================================
.rdata$r:000009B8
.rdata$r:000009B8 ; Segment type: Pure data
.rdata$r:000009B8 ; Segment permissions: Read
.rdata$r:000009B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009B8                 assume cs:_rdata$r
.rdata$r:000009B8                 ;org 9B8h
.rdata$r:000009B8 ; COMDAT (pick any)
.rdata$r:000009B8                 public ??_R3CCoder@NDecoder@NImplode@NCompress@@8
.rdata$r:000009B8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009B8 ??_R3CCoder@NDecoder@NImplode@NCompress@@8 db    0
.rdata$r:000009B8                                         ; DATA XREF: .rdata$r:00000980o
.rdata$r:000009B8                                         ; .rdata$r:000009FCo ...
.rdata$r:000009B9                 db    0
.rdata$r:000009BA                 db    0
.rdata$r:000009BB                 db    0
.rdata$r:000009BC                 db    5
.rdata$r:000009BD                 db    0
.rdata$r:000009BE                 db    0
.rdata$r:000009BF                 db    0
.rdata$r:000009C0                 db    6
.rdata$r:000009C1                 db    0
.rdata$r:000009C2                 db    0
.rdata$r:000009C3                 db    0
.rdata$r:000009C4                 dd offset ??_R2CCoder@NDecoder@NImplode@NCompress@@8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000009C4 _rdata$r        ends
.rdata$r:000009C4
.rdata$r:000009C8 ; ===========================================================================
.rdata$r:000009C8
.rdata$r:000009C8 ; Segment type: Pure data
.rdata$r:000009C8 ; Segment permissions: Read
.rdata$r:000009C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009C8                 assume cs:_rdata$r
.rdata$r:000009C8                 ;org 9C8h
.rdata$r:000009C8 ; COMDAT (pick any)
.rdata$r:000009C8                 public ??_R2CCoder@NDecoder@NImplode@NCompress@@8
.rdata$r:000009C8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Array'
.rdata$r:000009C8 ??_R2CCoder@NDecoder@NImplode@NCompress@@8 dd offset ??_R1A@?0A@EA@CCoder@NDecoder@NImplode@NCompress@@8
.rdata$r:000009C8                                         ; DATA XREF: .rdata$r:000009C4o
.rdata$r:000009C8                                         ; NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009CC                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000009D0                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:000009D4                 dd offset ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000009D8                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:000009DC                 dd offset ??_R17?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:000009E0                 db    0
.rdata$r:000009E1                 align 4
.rdata$r:000009E1 _rdata$r        ends
.rdata$r:000009E1
.rdata$r:000009E4 ; ===========================================================================
.rdata$r:000009E4
.rdata$r:000009E4 ; Segment type: Pure data
.rdata$r:000009E4 ; Segment permissions: Read
.rdata$r:000009E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009E4                 assume cs:_rdata$r
.rdata$r:000009E4                 ;org 9E4h
.rdata$r:000009E4 ; COMDAT (pick any)
.rdata$r:000009E4                 public ??_R1A@?0A@EA@CCoder@NDecoder@NImplode@NCompress@@8
.rdata$r:000009E4 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000009E4 ??_R1A@?0A@EA@CCoder@NDecoder@NImplode@NCompress@@8 dd offset ??_R0?AVCCoder@NDecoder@NImplode@NCompress@@@8
.rdata$r:000009E4                                         ; DATA XREF: .rdata$r:NCompress::NImplode::NDecoder::CCoder::`RTTI Base Class Array'o
.rdata$r:000009E4                                         ; NCompress::NImplode::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:000009E8                 db    5
.rdata$r:000009E9                 db    0
.rdata$r:000009EA                 db    0
.rdata$r:000009EB                 db    0
.rdata$r:000009EC                 db    0
.rdata$r:000009ED                 db    0
.rdata$r:000009EE                 db    0
.rdata$r:000009EF                 db    0
.rdata$r:000009F0                 db 0FFh
.rdata$r:000009F1                 db 0FFh
.rdata$r:000009F2                 db 0FFh
.rdata$r:000009F3                 db 0FFh
.rdata$r:000009F4                 db    0
.rdata$r:000009F5                 db    0
.rdata$r:000009F6                 db    0
.rdata$r:000009F7                 db    0
.rdata$r:000009F8                 db  40h ; @
.rdata$r:000009F9                 db    0
.rdata$r:000009FA                 db    0
.rdata$r:000009FB                 db    0
.rdata$r:000009FC                 dd offset ??_R3CCoder@NDecoder@NImplode@NCompress@@8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009FC _rdata$r        ends
.rdata$r:000009FC
.rdata$r:00000A00 ; ===========================================================================
.rdata$r:00000A00
.rdata$r:00000A00 ; Segment type: Pure data
.rdata$r:00000A00 ; Segment permissions: Read
.rdata$r:00000A00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A00                 assume cs:_rdata$r
.rdata$r:00000A00                 ;org 0A00h
.rdata$r:00000A00 ; COMDAT (pick any)
.rdata$r:00000A00                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000A00 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A00 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00000A00                                         ; DATA XREF: .rdata$r:000009CCo
.rdata$r:00000A00                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00000A00                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00000A04                 db    1
.rdata$r:00000A05                 db    0
.rdata$r:00000A06                 db    0
.rdata$r:00000A07                 db    0
.rdata$r:00000A08                 db    0
.rdata$r:00000A09                 db    0
.rdata$r:00000A0A                 db    0
.rdata$r:00000A0B                 db    0
.rdata$r:00000A0C                 db 0FFh
.rdata$r:00000A0D                 db 0FFh
.rdata$r:00000A0E                 db 0FFh
.rdata$r:00000A0F                 db 0FFh
.rdata$r:00000A10                 db    0
.rdata$r:00000A11                 db    0
.rdata$r:00000A12                 db    0
.rdata$r:00000A13                 db    0
.rdata$r:00000A14                 db  40h ; @
.rdata$r:00000A15                 db    0
.rdata$r:00000A16                 db    0
.rdata$r:00000A17                 db    0
.rdata$r:00000A18                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A18 _rdata$r        ends
.rdata$r:00000A18
.data:00000A1C ; ===========================================================================
.data:00000A1C
.data:00000A1C ; Segment type: Pure data
.data:00000A1C ; Segment permissions: Read/Write
.data:00000A1C _data           segment dword public 'DATA' use32
.data:00000A1C                 assume cs:_data
.data:00000A1C                 ;org 0A1Ch
.data:00000A1C ; COMDAT (pick any)
.data:00000A1C                 public ??_R0?AUICompressCoder@@@8
.data:00000A1C ; struct ICompressCoder `RTTI Type Descriptor'
.data:00000A1C ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00000A1C                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A1C                                         ; .rdata$r:0000100Co
.data:00000A1C                                         ; const type_info::`vftable'
.data:00000A20                 db    0
.data:00000A21                 db    0
.data:00000A22                 db    0
.data:00000A23                 db    0
.data:00000A24                 db  2Eh ; .
.data:00000A25                 db  3Fh ; ?
.data:00000A26                 db  41h ; A
.data:00000A27                 db  55h ; U
.data:00000A28                 db  49h ; I
.data:00000A29                 db  43h ; C
.data:00000A2A                 db  6Fh ; o
.data:00000A2B                 db  6Dh ; m
.data:00000A2C                 db  70h ; p
.data:00000A2D                 db  72h ; r
.data:00000A2E                 db  65h ; e
.data:00000A2F                 db  73h ; s
.data:00000A30                 db  73h ; s
.data:00000A31                 db  43h ; C
.data:00000A32                 db  6Fh ; o
.data:00000A33                 db  64h ; d
.data:00000A34                 db  65h ; e
.data:00000A35                 db  72h ; r
.data:00000A36                 db  40h ; @
.data:00000A37                 db  40h ; @
.data:00000A38                 db    0
.data:00000A39                 align 4
.data:00000A39 _data           ends
.data:00000A39
.rdata$r:00000A3C ; ===========================================================================
.rdata$r:00000A3C
.rdata$r:00000A3C ; Segment type: Pure data
.rdata$r:00000A3C ; Segment permissions: Read
.rdata$r:00000A3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A3C                 assume cs:_rdata$r
.rdata$r:00000A3C                 ;org 0A3Ch
.rdata$r:00000A3C ; COMDAT (pick any)
.rdata$r:00000A3C                 public ??_R3ICompressCoder@@8
.rdata$r:00000A3C ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A3C ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00000A18o
.rdata$r:00000A3C                                         ; .rdata$r:00001010o
.rdata$r:00000A3D                 db    0
.rdata$r:00000A3E                 db    0
.rdata$r:00000A3F                 db    0
.rdata$r:00000A40                 db    0
.rdata$r:00000A41                 db    0
.rdata$r:00000A42                 db    0
.rdata$r:00000A43                 db    0
.rdata$r:00000A44                 db    2
.rdata$r:00000A45                 db    0
.rdata$r:00000A46                 db    0
.rdata$r:00000A47                 db    0
.rdata$r:00000A48                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000A48 _rdata$r        ends
.rdata$r:00000A48
.rdata$r:00000A4C ; ===========================================================================
.rdata$r:00000A4C
.rdata$r:00000A4C ; Segment type: Pure data
.rdata$r:00000A4C ; Segment permissions: Read
.rdata$r:00000A4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A4C                 assume cs:_rdata$r
.rdata$r:00000A4C                 ;org 0A4Ch
.rdata$r:00000A4C ; COMDAT (pick any)
.rdata$r:00000A4C                 public ??_R2ICompressCoder@@8
.rdata$r:00000A4C ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00000A4C ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00000A4C                                         ; DATA XREF: .rdata$r:00000A48o
.rdata$r:00000A4C                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A50                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000A54                 db    0
.rdata$r:00000A55                 align 4
.rdata$r:00000A55 _rdata$r        ends
.rdata$r:00000A55
.rdata$r:00000A58 ; ===========================================================================
.rdata$r:00000A58
.rdata$r:00000A58 ; Segment type: Pure data
.rdata$r:00000A58 ; Segment permissions: Read
.rdata$r:00000A58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A58                 assume cs:_rdata$r
.rdata$r:00000A58                 ;org 0A58h
.rdata$r:00000A58 ; COMDAT (pick any)
.rdata$r:00000A58                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000A58 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000A58 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000A58                                         ; DATA XREF: .rdata$r:00000A50o
.rdata$r:00000A58                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00000A58                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000A5C                 db    0
.rdata$r:00000A5D                 db    0
.rdata$r:00000A5E                 db    0
.rdata$r:00000A5F                 db    0
.rdata$r:00000A60                 db    0
.rdata$r:00000A61                 db    0
.rdata$r:00000A62                 db    0
.rdata$r:00000A63                 db    0
.rdata$r:00000A64                 db 0FFh
.rdata$r:00000A65                 db 0FFh
.rdata$r:00000A66                 db 0FFh
.rdata$r:00000A67                 db 0FFh
.rdata$r:00000A68                 db    0
.rdata$r:00000A69                 db    0
.rdata$r:00000A6A                 db    0
.rdata$r:00000A6B                 db    0
.rdata$r:00000A6C                 db  40h ; @
.rdata$r:00000A6D                 db    0
.rdata$r:00000A6E                 db    0
.rdata$r:00000A6F                 db    0
.rdata$r:00000A70                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A70 _rdata$r        ends
.rdata$r:00000A70
.data:00000A74 ; ===========================================================================
.data:00000A74
.data:00000A74 ; Segment type: Pure data
.data:00000A74 ; Segment permissions: Read/Write
.data:00000A74 _data           segment dword public 'DATA' use32
.data:00000A74                 assume cs:_data
.data:00000A74                 ;org 0A74h
.data:00000A74 ; COMDAT (pick any)
.data:00000A74                 public ??_R0?AUIUnknown@@@8
.data:00000A74 ; struct IUnknown `RTTI Type Descriptor'
.data:00000A74 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000A74                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000A74                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00000A74                                         ; const type_info::`vftable'
.data:00000A78                 db    0
.data:00000A79                 db    0
.data:00000A7A                 db    0
.data:00000A7B                 db    0
.data:00000A7C                 db  2Eh ; .
.data:00000A7D                 db  3Fh ; ?
.data:00000A7E                 db  41h ; A
.data:00000A7F                 db  55h ; U
.data:00000A80                 db  49h ; I
.data:00000A81                 db  55h ; U
.data:00000A82                 db  6Eh ; n
.data:00000A83                 db  6Bh ; k
.data:00000A84                 db  6Eh ; n
.data:00000A85                 db  6Fh ; o
.data:00000A86                 db  77h ; w
.data:00000A87                 db  6Eh ; n
.data:00000A88                 db  40h ; @
.data:00000A89                 db  40h ; @
.data:00000A8A                 db    0
.data:00000A8B                 align 4
.data:00000A8B _data           ends
.data:00000A8B
.rdata$r:00000A8C ; ===========================================================================
.rdata$r:00000A8C
.rdata$r:00000A8C ; Segment type: Pure data
.rdata$r:00000A8C ; Segment permissions: Read
.rdata$r:00000A8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A8C                 assume cs:_rdata$r
.rdata$r:00000A8C                 ;org 0A8Ch
.rdata$r:00000A8C ; COMDAT (pick any)
.rdata$r:00000A8C                 public ??_R3IUnknown@@8
.rdata$r:00000A8C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000A8C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000A70o
.rdata$r:00000A8C                                         ; .rdata$r:00000ABCo ...
.rdata$r:00000A8D                 db    0
.rdata$r:00000A8E                 db    0
.rdata$r:00000A8F                 db    0
.rdata$r:00000A90                 db    0
.rdata$r:00000A91                 db    0
.rdata$r:00000A92                 db    0
.rdata$r:00000A93                 db    0
.rdata$r:00000A94                 db    1
.rdata$r:00000A95                 db    0
.rdata$r:00000A96                 db    0
.rdata$r:00000A97                 db    0
.rdata$r:00000A98                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000A98 _rdata$r        ends
.rdata$r:00000A98
.rdata$r:00000A9C ; ===========================================================================
.rdata$r:00000A9C
.rdata$r:00000A9C ; Segment type: Pure data
.rdata$r:00000A9C ; Segment permissions: Read
.rdata$r:00000A9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A9C                 assume cs:_rdata$r
.rdata$r:00000A9C                 ;org 0A9Ch
.rdata$r:00000A9C ; COMDAT (pick any)
.rdata$r:00000A9C                 public ??_R2IUnknown@@8
.rdata$r:00000A9C ; IUnknown::`RTTI Base Class Array'
.rdata$r:00000A9C ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000A9C                                         ; DATA XREF: .rdata$r:00000A98o
.rdata$r:00000A9C                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000AA0                 db    0
.rdata$r:00000AA1                 align 4
.rdata$r:00000AA1 _rdata$r        ends
.rdata$r:00000AA1
.rdata$r:00000AA4 ; ===========================================================================
.rdata$r:00000AA4
.rdata$r:00000AA4 ; Segment type: Pure data
.rdata$r:00000AA4 ; Segment permissions: Read
.rdata$r:00000AA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AA4                 assume cs:_rdata$r
.rdata$r:00000AA4                 ;org 0AA4h
.rdata$r:00000AA4 ; COMDAT (pick any)
.rdata$r:00000AA4                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000AA4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000AA4 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000AA4                                         ; DATA XREF: .rdata$r:000009D0o
.rdata$r:00000AA4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000AA8                 align 10h
.rdata$r:00000AB0                 db 0FFh
.rdata$r:00000AB1                 db 0FFh
.rdata$r:00000AB2                 db 0FFh
.rdata$r:00000AB3                 db 0FFh
.rdata$r:00000AB4                 db    0
.rdata$r:00000AB5                 db    0
.rdata$r:00000AB6                 db    0
.rdata$r:00000AB7                 db    0
.rdata$r:00000AB8                 db  42h ; B
.rdata$r:00000AB9                 db    0
.rdata$r:00000ABA                 db    0
.rdata$r:00000ABB                 db    0
.rdata$r:00000ABC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000ABC _rdata$r        ends
.rdata$r:00000ABC
.rdata$r:00000AC0 ; ===========================================================================
.rdata$r:00000AC0
.rdata$r:00000AC0 ; Segment type: Pure data
.rdata$r:00000AC0 ; Segment permissions: Read
.rdata$r:00000AC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000AC0                 assume cs:_rdata$r
.rdata$r:00000AC0                 ;org 0AC0h
.rdata$r:00000AC0 ; COMDAT (pick any)
.rdata$r:00000AC0                 public ??_R13?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000AC0 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000AC0 ??_R13?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000AC0                                         ; DATA XREF: .rdata$r:000009D4o
.rdata$r:00000AC0                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000AC4                 db    1
.rdata$r:00000AC5                 db    0
.rdata$r:00000AC6                 db    0
.rdata$r:00000AC7                 db    0
.rdata$r:00000AC8                 db    4
.rdata$r:00000AC9                 db    0
.rdata$r:00000ACA                 db    0
.rdata$r:00000ACB                 db    0
.rdata$r:00000ACC                 db 0FFh
.rdata$r:00000ACD                 db 0FFh
.rdata$r:00000ACE                 db 0FFh
.rdata$r:00000ACF                 db 0FFh
.rdata$r:00000AD0                 db    0
.rdata$r:00000AD1                 db    0
.rdata$r:00000AD2                 db    0
.rdata$r:00000AD3                 db    0
.rdata$r:00000AD4                 db  40h ; @
.rdata$r:00000AD5                 db    0
.rdata$r:00000AD6                 db    0
.rdata$r:00000AD7                 db    0
.rdata$r:00000AD8                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AD8 _rdata$r        ends
.rdata$r:00000AD8
.data:00000ADC ; ===========================================================================
.data:00000ADC
.data:00000ADC ; Segment type: Pure data
.data:00000ADC ; Segment permissions: Read/Write
.data:00000ADC _data           segment dword public 'DATA' use32
.data:00000ADC                 assume cs:_data
.data:00000ADC                 ;org 0ADCh
.data:00000ADC ; COMDAT (pick any)
.data:00000ADC                 public ??_R0?AUICompressSetDecoderProperties2@@@8
.data:00000ADC ; struct ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.data:00000ADC ??_R0?AUICompressSetDecoderProperties2@@@8 dd offset ??_7type_info@@6B@
.data:00000ADC                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00000ADC                                         ; .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00000ADC                                         ; const type_info::`vftable'
.data:00000AE0                 db    0
.data:00000AE1                 db    0
.data:00000AE2                 db    0
.data:00000AE3                 db    0
.data:00000AE4                 db  2Eh ; .
.data:00000AE5                 db  3Fh ; ?
.data:00000AE6                 db  41h ; A
.data:00000AE7                 db  55h ; U
.data:00000AE8                 db  49h ; I
.data:00000AE9                 db  43h ; C
.data:00000AEA                 db  6Fh ; o
.data:00000AEB                 db  6Dh ; m
.data:00000AEC                 db  70h ; p
.data:00000AED                 db  72h ; r
.data:00000AEE                 db  65h ; e
.data:00000AEF                 db  73h ; s
.data:00000AF0                 db  73h ; s
.data:00000AF1                 db  53h ; S
.data:00000AF2                 db  65h ; e
.data:00000AF3                 db  74h ; t
.data:00000AF4                 db  44h ; D
.data:00000AF5                 db  65h ; e
.data:00000AF6                 db  63h ; c
.data:00000AF7                 db  6Fh ; o
.data:00000AF8                 db  64h ; d
.data:00000AF9                 db  65h ; e
.data:00000AFA                 db  72h ; r
.data:00000AFB                 db  50h ; P
.data:00000AFC                 db  72h ; r
.data:00000AFD                 db  6Fh ; o
.data:00000AFE                 db  70h ; p
.data:00000AFF                 db  65h ; e
.data:00000B00                 db  72h ; r
.data:00000B01                 db  74h ; t
.data:00000B02                 db  69h ; i
.data:00000B03                 db  65h ; e
.data:00000B04                 db  73h ; s
.data:00000B05                 db  32h ; 2
.data:00000B06                 db  40h ; @
.data:00000B07                 db  40h ; @
.data:00000B08                 db    0
.data:00000B09                 align 4
.data:00000B09 _data           ends
.data:00000B09
.rdata$r:00000B0C ; ===========================================================================
.rdata$r:00000B0C
.rdata$r:00000B0C ; Segment type: Pure data
.rdata$r:00000B0C ; Segment permissions: Read
.rdata$r:00000B0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B0C                 assume cs:_rdata$r
.rdata$r:00000B0C                 ;org 0B0Ch
.rdata$r:00000B0C ; COMDAT (pick any)
.rdata$r:00000B0C                 public ??_R3ICompressSetDecoderProperties2@@8
.rdata$r:00000B0C ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B0C ??_R3ICompressSetDecoderProperties2@@8 db    0
.rdata$r:00000B0C                                         ; DATA XREF: .rdata$r:00000AD8o
.rdata$r:00000B0C                                         ; .rdata$r:00000B40o ...
.rdata$r:00000B0D                 db    0
.rdata$r:00000B0E                 db    0
.rdata$r:00000B0F                 db    0
.rdata$r:00000B10                 db    0
.rdata$r:00000B11                 db    0
.rdata$r:00000B12                 db    0
.rdata$r:00000B13                 db    0
.rdata$r:00000B14                 db    2
.rdata$r:00000B15                 db    0
.rdata$r:00000B16                 db    0
.rdata$r:00000B17                 db    0
.rdata$r:00000B18                 dd offset ??_R2ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000B18 _rdata$r        ends
.rdata$r:00000B18
.rdata$r:00000B1C ; ===========================================================================
.rdata$r:00000B1C
.rdata$r:00000B1C ; Segment type: Pure data
.rdata$r:00000B1C ; Segment permissions: Read
.rdata$r:00000B1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B1C                 assume cs:_rdata$r
.rdata$r:00000B1C                 ;org 0B1Ch
.rdata$r:00000B1C ; COMDAT (pick any)
.rdata$r:00000B1C                 public ??_R2ICompressSetDecoderProperties2@@8
.rdata$r:00000B1C ; ICompressSetDecoderProperties2::`RTTI Base Class Array'
.rdata$r:00000B1C ??_R2ICompressSetDecoderProperties2@@8 dd offset ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000B1C                                         ; DATA XREF: .rdata$r:00000B18o
.rdata$r:00000B1C                                         ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B20                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B24                 db    0
.rdata$r:00000B25                 align 4
.rdata$r:00000B25 _rdata$r        ends
.rdata$r:00000B25
.rdata$r:00000B28 ; ===========================================================================
.rdata$r:00000B28
.rdata$r:00000B28 ; Segment type: Pure data
.rdata$r:00000B28 ; Segment permissions: Read
.rdata$r:00000B28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B28                 assume cs:_rdata$r
.rdata$r:00000B28                 ;org 0B28h
.rdata$r:00000B28 ; COMDAT (pick any)
.rdata$r:00000B28                 public ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8
.rdata$r:00000B28 ; ICompressSetDecoderProperties2::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B28 ??_R1A@?0A@EA@ICompressSetDecoderProperties2@@8 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8
.rdata$r:00000B28                                         ; DATA XREF: .rdata$r:ICompressSetDecoderProperties2::`RTTI Base Class Array'o
.rdata$r:00000B28                                         ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00000B2C                 db    1
.rdata$r:00000B2D                 db    0
.rdata$r:00000B2E                 db    0
.rdata$r:00000B2F                 db    0
.rdata$r:00000B30                 db    0
.rdata$r:00000B31                 db    0
.rdata$r:00000B32                 db    0
.rdata$r:00000B33                 db    0
.rdata$r:00000B34                 db 0FFh
.rdata$r:00000B35                 db 0FFh
.rdata$r:00000B36                 db 0FFh
.rdata$r:00000B37                 db 0FFh
.rdata$r:00000B38                 db    0
.rdata$r:00000B39                 db    0
.rdata$r:00000B3A                 db    0
.rdata$r:00000B3B                 db    0
.rdata$r:00000B3C                 db  40h ; @
.rdata$r:00000B3D                 db    0
.rdata$r:00000B3E                 db    0
.rdata$r:00000B3F                 db    0
.rdata$r:00000B40                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B40 _rdata$r        ends
.rdata$r:00000B40
.rdata$r:00000B44 ; ===========================================================================
.rdata$r:00000B44
.rdata$r:00000B44 ; Segment type: Pure data
.rdata$r:00000B44 ; Segment permissions: Read
.rdata$r:00000B44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B44                 assume cs:_rdata$r
.rdata$r:00000B44                 ;org 0B44h
.rdata$r:00000B44 ; COMDAT (pick any)
.rdata$r:00000B44                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000B44 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000B44 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000B44                                         ; DATA XREF: .rdata$r:000009D8o
.rdata$r:00000B44                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000B48                 db    0
.rdata$r:00000B49                 db    0
.rdata$r:00000B4A                 db    0
.rdata$r:00000B4B                 db    0
.rdata$r:00000B4C                 db    4
.rdata$r:00000B4D                 db    0
.rdata$r:00000B4E                 db    0
.rdata$r:00000B4F                 db    0
.rdata$r:00000B50                 db 0FFh
.rdata$r:00000B51                 db 0FFh
.rdata$r:00000B52                 db 0FFh
.rdata$r:00000B53                 db 0FFh
.rdata$r:00000B54                 db    0
.rdata$r:00000B55                 db    0
.rdata$r:00000B56                 db    0
.rdata$r:00000B57                 db    0
.rdata$r:00000B58                 db  42h ; B
.rdata$r:00000B59                 db    0
.rdata$r:00000B5A                 db    0
.rdata$r:00000B5B                 db    0
.rdata$r:00000B5C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B5C _rdata$r        ends
.rdata$r:00000B5C
.rdata$r:00000B60 ; ===========================================================================
.rdata$r:00000B60
.rdata$r:00000B60 ; Segment type: Pure data
.rdata$r:00000B60 ; Segment permissions: Read
.rdata$r:00000B60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B60                 assume cs:_rdata$r
.rdata$r:00000B60                 ;org 0B60h
.rdata$r:00000B60 ; COMDAT (pick any)
.rdata$r:00000B60                 public ??_R17?0A@EA@CMyUnknownImp@@8
.rdata$r:00000B60 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00000B60 ??_R17?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000B60                                         ; DATA XREF: .rdata$r:000009DCo
.rdata$r:00000B60                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000B64                 align 8
.rdata$r:00000B68                 db    8
.rdata$r:00000B69                 db    0
.rdata$r:00000B6A                 db    0
.rdata$r:00000B6B                 db    0
.rdata$r:00000B6C                 db 0FFh
.rdata$r:00000B6D                 db 0FFh
.rdata$r:00000B6E                 db 0FFh
.rdata$r:00000B6F                 db 0FFh
.rdata$r:00000B70                 db    0
.rdata$r:00000B71                 db    0
.rdata$r:00000B72                 db    0
.rdata$r:00000B73                 db    0
.rdata$r:00000B74                 db  40h ; @
.rdata$r:00000B75                 db    0
.rdata$r:00000B76                 db    0
.rdata$r:00000B77                 db    0
.rdata$r:00000B78                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B78 _rdata$r        ends
.rdata$r:00000B78
.data:00000B7C ; ===========================================================================
.data:00000B7C
.data:00000B7C ; Segment type: Pure data
.data:00000B7C ; Segment permissions: Read/Write
.data:00000B7C _data           segment dword public 'DATA' use32
.data:00000B7C                 assume cs:_data
.data:00000B7C                 ;org 0B7Ch
.data:00000B7C ; COMDAT (pick any)
.data:00000B7C                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000B7C ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000B7C ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000B7C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00000B7C                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000B7C                                         ; const type_info::`vftable'
.data:00000B80                 db    0
.data:00000B81                 db    0
.data:00000B82                 db    0
.data:00000B83                 db    0
.data:00000B84                 db  2Eh ; .
.data:00000B85                 db  3Fh ; ?
.data:00000B86                 db  41h ; A
.data:00000B87                 db  56h ; V
.data:00000B88                 db  43h ; C
.data:00000B89                 db  4Dh ; M
.data:00000B8A                 db  79h ; y
.data:00000B8B                 db  55h ; U
.data:00000B8C                 db  6Eh ; n
.data:00000B8D                 db  6Bh ; k
.data:00000B8E                 db  6Eh ; n
.data:00000B8F                 db  6Fh ; o
.data:00000B90                 db  77h ; w
.data:00000B91                 db  6Eh ; n
.data:00000B92                 db  49h ; I
.data:00000B93                 db  6Dh ; m
.data:00000B94                 db  70h ; p
.data:00000B95                 db  40h ; @
.data:00000B96                 db  40h ; @
.data:00000B97                 db    0
.data:00000B97 _data           ends
.data:00000B97
.rdata$r:00000B98 ; ===========================================================================
.rdata$r:00000B98
.rdata$r:00000B98 ; Segment type: Pure data
.rdata$r:00000B98 ; Segment permissions: Read
.rdata$r:00000B98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B98                 assume cs:_rdata$r
.rdata$r:00000B98                 ;org 0B98h
.rdata$r:00000B98 ; COMDAT (pick any)
.rdata$r:00000B98                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000B98 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B98 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000B78o
.rdata$r:00000B98                                         ; .rdata$r:00000BC8o
.rdata$r:00000B99                 db    0
.rdata$r:00000B9A                 db    0
.rdata$r:00000B9B                 db    0
.rdata$r:00000B9C                 db    0
.rdata$r:00000B9D                 db    0
.rdata$r:00000B9E                 db    0
.rdata$r:00000B9F                 db    0
.rdata$r:00000BA0                 db    1
.rdata$r:00000BA1                 db    0
.rdata$r:00000BA2                 db    0
.rdata$r:00000BA3                 db    0
.rdata$r:00000BA4                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000BA4 _rdata$r        ends
.rdata$r:00000BA4
.rdata$r:00000BA8 ; ===========================================================================
.rdata$r:00000BA8
.rdata$r:00000BA8 ; Segment type: Pure data
.rdata$r:00000BA8 ; Segment permissions: Read
.rdata$r:00000BA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BA8                 assume cs:_rdata$r
.rdata$r:00000BA8                 ;org 0BA8h
.rdata$r:00000BA8 ; COMDAT (pick any)
.rdata$r:00000BA8                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000BA8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000BA8 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000BA8                                         ; DATA XREF: .rdata$r:00000BA4o
.rdata$r:00000BA8                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BAC                 db    0
.rdata$r:00000BAD                 align 10h
.rdata$r:00000BAD _rdata$r        ends
.rdata$r:00000BAD
.rdata$r:00000BB0 ; ===========================================================================
.rdata$r:00000BB0
.rdata$r:00000BB0 ; Segment type: Pure data
.rdata$r:00000BB0 ; Segment permissions: Read
.rdata$r:00000BB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BB0                 assume cs:_rdata$r
.rdata$r:00000BB0                 ;org 0BB0h
.rdata$r:00000BB0 ; COMDAT (pick any)
.rdata$r:00000BB0                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000BB0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000BB0 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000BB0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000BB0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000BB4                 db    0
.rdata$r:00000BB5                 db    0
.rdata$r:00000BB6                 db    0
.rdata$r:00000BB7                 db    0
.rdata$r:00000BB8                 db    0
.rdata$r:00000BB9                 db    0
.rdata$r:00000BBA                 db    0
.rdata$r:00000BBB                 db    0
.rdata$r:00000BBC                 db 0FFh
.rdata$r:00000BBD                 db 0FFh
.rdata$r:00000BBE                 db 0FFh
.rdata$r:00000BBF                 db 0FFh
.rdata$r:00000BC0                 db    0
.rdata$r:00000BC1                 db    0
.rdata$r:00000BC2                 db    0
.rdata$r:00000BC3                 db    0
.rdata$r:00000BC4                 db  40h ; @
.rdata$r:00000BC5                 db    0
.rdata$r:00000BC6                 db    0
.rdata$r:00000BC7                 db    0
.rdata$r:00000BC8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BC8 _rdata$r        ends
.rdata$r:00000BC8
.rdata$r:00000BCC ; ===========================================================================
.rdata$r:00000BCC
.rdata$r:00000BCC ; Segment type: Pure data
.rdata$r:00000BCC ; Segment permissions: Read
.rdata$r:00000BCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BCC                 assume cs:_rdata$r
.rdata$r:00000BCC                 ;org 0BCCh
.rdata$r:00000BCC ; COMDAT (pick any)
.rdata$r:00000BCC                 public ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@
.rdata$r:00000BCC ; const NCompress::NImplode::NDecoder::CCoder::`RTTI Complete Object Locator'{for `ICompressSetDecoderProperties2'}
.rdata$r:00000BCC ??_R4CCoder@NDecoder@NImplode@NCompress@@6BICompressSetDecoderProperties2@@@ db    0
.rdata$r:00000BCC                                         ; DATA XREF: .rdata:00000894o
.rdata$r:00000BCD                 db    0
.rdata$r:00000BCE                 db    0
.rdata$r:00000BCF                 db    0
.rdata$r:00000BD0                 db    4
.rdata$r:00000BD1                 db    0
.rdata$r:00000BD2                 db    0
.rdata$r:00000BD3                 db    0
.rdata$r:00000BD4                 db    0
.rdata$r:00000BD5                 db    0
.rdata$r:00000BD6                 db    0
.rdata$r:00000BD7                 db    0
.rdata$r:00000BD8                 dd offset ??_R0?AVCCoder@NDecoder@NImplode@NCompress@@@8 ; NCompress::NImplode::NDecoder::CCoder `RTTI Type Descriptor'
.rdata$r:00000BDC                 dd offset ??_R3CCoder@NDecoder@NImplode@NCompress@@8 ; NCompress::NImplode::NDecoder::CCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BDC _rdata$r        ends
.rdata$r:00000BDC
.text:00000BE0 ; ===========================================================================
.text:00000BE0
.text:00000BE0 ; Segment type: Pure code
.text:00000BE0 ; Segment permissions: Read/Execute
.text:00000BE0 _text           segment para public 'CODE' use32
.text:00000BE0                 assume cs:_text
.text:00000BE0                 ;org 0BE0h
.text:00000BE0 ; COMDAT (pick any)
.text:00000BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BE0
.text:00000BE0 ; =============== S U B R O U T I N E =======================================
.text:00000BE0
.text:00000BE0 ; Attributes: bp-based frame
.text:00000BE0
.text:00000BE0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000BE0                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000BE0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+46p
.text:00000BE0
.text:00000BE0 var_4           = dword ptr -4
.text:00000BE0
.text:00000BE0                 push    ebp
.text:00000BE1                 mov     ebp, esp
.text:00000BE3                 push    ecx
.text:00000BE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BEB                 mov     [ebp+var_4], ecx
.text:00000BEE                 mov     eax, [ebp+var_4]
.text:00000BF1                 mov     dword ptr [eax], 0
.text:00000BF7                 mov     eax, [ebp+var_4]
.text:00000BFA                 mov     esp, ebp
.text:00000BFC                 pop     ebp
.text:00000BFD                 retn
.text:00000BFD ??0CMyUnknownImp@@QAE@XZ endp
.text:00000BFD
.text:00000BFD ; ---------------------------------------------------------------------------
.text:00000BFE                 align 10h
.text:00000BFE _text           ends
.text:00000BFE
.text:00000C00 ; ===========================================================================
.text:00000C00
.text:00000C00 ; Segment type: Pure code
.text:00000C00 ; Segment permissions: Read/Execute
.text:00000C00 _text           segment para public 'CODE' use32
.text:00000C00                 assume cs:_text
.text:00000C00                 ;org 0C00h
.text:00000C00 ; COMDAT (pick any)
.text:00000C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000C00
.text:00000C00 ; =============== S U B R O U T I N E =======================================
.text:00000C00
.text:00000C00 ; Attributes: bp-based frame
.text:00000C00
.text:00000C00 ; __int32 __stdcall NCompress::NImplode::NDecoder::CCoder::QueryInterface(NCompress::NImplode::NDecoder::CCoder *this, const struct _GUID *Buf1, void **)
.text:00000C00                 public ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00000C00 ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000C00                                         ; CODE XREF: [thunk]:NCompress::NImplode::NDecoder::CCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000C00                                         ; DATA XREF: .rdata:const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressCoder'}o
.text:00000C00
.text:00000C00 var_8           = dword ptr -8
.text:00000C00 var_4           = dword ptr -4
.text:00000C00 this            = dword ptr  8
.text:00000C00 Buf1            = dword ptr  0Ch
.text:00000C00 arg_8           = dword ptr  10h
.text:00000C00
.text:00000C00                 push    ebp
.text:00000C01                 mov     ebp, esp
.text:00000C03                 sub     esp, 8
.text:00000C06                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000C0D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C14                 mov     eax, [ebp+arg_8]
.text:00000C17                 mov     dword ptr [eax], 0
.text:00000C1D                 push    offset _IID_IUnknown ; Buf2
.text:00000C22                 mov     ecx, [ebp+Buf1]
.text:00000C25                 push    ecx             ; Buf1
.text:00000C26                 call    ___@8           ; __(x,x)
.text:00000C2B                 test    eax, eax
.text:00000C2D                 jz      short loc_C51
.text:00000C2F                 cmp     [ebp+this], 0
.text:00000C33                 jz      short loc_C40
.text:00000C35                 mov     edx, [ebp+this]
.text:00000C38                 add     edx, 4
.text:00000C3B                 mov     [ebp+var_4], edx
.text:00000C3E                 jmp     short loc_C47
.text:00000C40 ; ---------------------------------------------------------------------------
.text:00000C40
.text:00000C40 loc_C40:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+33j
.text:00000C40                 mov     [ebp+var_4], 0
.text:00000C47
.text:00000C47 loc_C47:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00000C47                 mov     eax, [ebp+arg_8]
.text:00000C4A                 mov     ecx, [ebp+var_4]
.text:00000C4D                 mov     [eax], ecx
.text:00000C4F                 jmp     short loc_C8C
.text:00000C51 ; ---------------------------------------------------------------------------
.text:00000C51
.text:00000C51 loc_C51:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+2Dj
.text:00000C51                 push    offset _IID_ICompressSetDecoderProperties2 ; Buf2
.text:00000C56                 mov     edx, [ebp+Buf1]
.text:00000C59                 push    edx             ; Buf1
.text:00000C5A                 call    ___@8           ; __(x,x)
.text:00000C5F                 test    eax, eax
.text:00000C61                 jz      short loc_C85
.text:00000C63                 cmp     [ebp+this], 0
.text:00000C67                 jz      short loc_C74
.text:00000C69                 mov     eax, [ebp+this]
.text:00000C6C                 add     eax, 4
.text:00000C6F                 mov     [ebp+var_8], eax
.text:00000C72                 jmp     short loc_C7B
.text:00000C74 ; ---------------------------------------------------------------------------
.text:00000C74
.text:00000C74 loc_C74:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+67j
.text:00000C74                 mov     [ebp+var_8], 0
.text:00000C7B
.text:00000C7B loc_C7B:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00000C7B                 mov     ecx, [ebp+arg_8]
.text:00000C7E                 mov     edx, [ebp+var_8]
.text:00000C81                 mov     [ecx], edx
.text:00000C83                 jmp     short loc_C8C
.text:00000C85 ; ---------------------------------------------------------------------------
.text:00000C85
.text:00000C85 loc_C85:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+61j
.text:00000C85                 mov     eax, 80004002h
.text:00000C8A                 jmp     short loc_C9D
.text:00000C8C ; ---------------------------------------------------------------------------
.text:00000C8C
.text:00000C8C loc_C8C:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+4Fj
.text:00000C8C                                         ; NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00000C8C                 mov     eax, [ebp+this]
.text:00000C8F                 mov     ecx, [eax+8]
.text:00000C92                 add     ecx, 1
.text:00000C95                 mov     edx, [ebp+this]
.text:00000C98                 mov     [edx+8], ecx
.text:00000C9B                 xor     eax, eax
.text:00000C9D
.text:00000C9D loc_C9D:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+8Aj
.text:00000C9D                 add     esp, 8
.text:00000CA0                 cmp     ebp, esp
.text:00000CA2                 call    __RTC_CheckEsp
.text:00000CA7                 mov     esp, ebp
.text:00000CA9                 pop     ebp
.text:00000CAA                 retn    0Ch
.text:00000CAA ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000CAA
.text:00000CAA ; ---------------------------------------------------------------------------
.text:00000CAD                 align 10h
.text:00000CAD _text           ends
.text:00000CAD
.text:00000CB0 ; ===========================================================================
.text:00000CB0
.text:00000CB0 ; Segment type: Pure code
.text:00000CB0 ; Segment permissions: Read/Execute
.text:00000CB0 _text           segment para public 'CODE' use32
.text:00000CB0                 assume cs:_text
.text:00000CB0                 ;org 0CB0h
.text:00000CB0 ; COMDAT (pick any)
.text:00000CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CB0
.text:00000CB0 ; =============== S U B R O U T I N E =======================================
.text:00000CB0
.text:00000CB0 ; Attributes: bp-based frame
.text:00000CB0
.text:00000CB0 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000CB0                 public ___@8
.text:00000CB0 ___@8           proc near               ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+26p
.text:00000CB0                                         ; NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+5Ap
.text:00000CB0
.text:00000CB0 Buf1            = dword ptr  8
.text:00000CB0 Buf2            = dword ptr  0Ch
.text:00000CB0
.text:00000CB0                 push    ebp
.text:00000CB1                 mov     ebp, esp
.text:00000CB3                 mov     eax, [ebp+Buf2]
.text:00000CB6                 push    eax             ; Buf2
.text:00000CB7                 mov     ecx, [ebp+Buf1]
.text:00000CBA                 push    ecx             ; Buf1
.text:00000CBB                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000CC0                 cmp     ebp, esp
.text:00000CC2                 call    __RTC_CheckEsp
.text:00000CC7                 pop     ebp
.text:00000CC8                 retn    8
.text:00000CC8 ___@8           endp
.text:00000CC8
.text:00000CC8 ; ---------------------------------------------------------------------------
.text:00000CCB                 align 4
.text:00000CCB _text           ends
.text:00000CCB
.text:00000CCC ; ===========================================================================
.text:00000CCC
.text:00000CCC ; Segment type: Pure code
.text:00000CCC ; Segment permissions: Read/Execute
.text:00000CCC _text           segment para public 'CODE' use32
.text:00000CCC                 assume cs:_text
.text:00000CCC                 ;org 0CCCh
.text:00000CCC ; COMDAT (pick any)
.text:00000CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CCC
.text:00000CCC ; =============== S U B R O U T I N E =======================================
.text:00000CCC
.text:00000CCC ; Attributes: bp-based frame
.text:00000CCC
.text:00000CCC ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00000CCC                 public _IsEqualGUID@8
.text:00000CCC _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00000CCC
.text:00000CCC Buf1            = dword ptr  8
.text:00000CCC Buf2            = dword ptr  0Ch
.text:00000CCC
.text:00000CCC                 push    ebp
.text:00000CCD                 mov     ebp, esp
.text:00000CCF                 push    10h             ; Size
.text:00000CD1                 mov     eax, [ebp+Buf2]
.text:00000CD4                 push    eax             ; Buf2
.text:00000CD5                 mov     ecx, [ebp+Buf1]
.text:00000CD8                 push    ecx             ; Buf1
.text:00000CD9                 call    _memcmp
.text:00000CDE                 add     esp, 0Ch
.text:00000CE1                 neg     eax
.text:00000CE3                 sbb     eax, eax
.text:00000CE5                 add     eax, 1
.text:00000CE8                 cmp     ebp, esp
.text:00000CEA                 call    __RTC_CheckEsp
.text:00000CEF                 pop     ebp
.text:00000CF0                 retn    8
.text:00000CF0 _IsEqualGUID@8  endp
.text:00000CF0
.text:00000CF0 ; ---------------------------------------------------------------------------
.text:00000CF3                 align 4
.text:00000CF3 _text           ends
.text:00000CF3
.text:00000CF4 ; ===========================================================================
.text:00000CF4
.text:00000CF4 ; Segment type: Pure code
.text:00000CF4 ; Segment permissions: Read/Execute
.text:00000CF4 _text           segment para public 'CODE' use32
.text:00000CF4                 assume cs:_text
.text:00000CF4                 ;org 0CF4h
.text:00000CF4 ; COMDAT (pick any)
.text:00000CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CF4
.text:00000CF4 ; =============== S U B R O U T I N E =======================================
.text:00000CF4
.text:00000CF4 ; Attributes: bp-based frame
.text:00000CF4
.text:00000CF4 ; unsigned __int32 __stdcall NCompress::NImplode::NDecoder::CCoder::AddRef(NCompress::NImplode::NDecoder::CCoder *this)
.text:00000CF4                 public ?AddRef@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ
.text:00000CF4 ?AddRef@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ proc near
.text:00000CF4                                         ; CODE XREF: [thunk]:NCompress::NImplode::NDecoder::CCoder::AddRef`adjustor{4}' (void)+5j
.text:00000CF4                                         ; DATA XREF: .rdata:000008B0o
.text:00000CF4
.text:00000CF4 var_4           = dword ptr -4
.text:00000CF4 this            = dword ptr  8
.text:00000CF4
.text:00000CF4                 push    ebp
.text:00000CF5                 mov     ebp, esp
.text:00000CF7                 push    ecx
.text:00000CF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CFF                 mov     eax, [ebp+this]
.text:00000D02                 mov     ecx, [eax+8]
.text:00000D05                 add     ecx, 1
.text:00000D08                 mov     [ebp+var_4], ecx
.text:00000D0B                 mov     edx, [ebp+this]
.text:00000D0E                 mov     eax, [ebp+var_4]
.text:00000D11                 mov     [edx+8], eax
.text:00000D14                 mov     eax, [ebp+var_4]
.text:00000D17                 mov     esp, ebp
.text:00000D19                 pop     ebp
.text:00000D1A                 retn    4
.text:00000D1A ?AddRef@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ endp
.text:00000D1A
.text:00000D1A ; ---------------------------------------------------------------------------
.text:00000D1D                 align 10h
.text:00000D1D _text           ends
.text:00000D1D
.text:00000D20 ; ===========================================================================
.text:00000D20
.text:00000D20 ; Segment type: Pure code
.text:00000D20 ; Segment permissions: Read/Execute
.text:00000D20 _text           segment para public 'CODE' use32
.text:00000D20                 assume cs:_text
.text:00000D20                 ;org 0D20h
.text:00000D20 ; COMDAT (pick any)
.text:00000D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D20
.text:00000D20 ; =============== S U B R O U T I N E =======================================
.text:00000D20
.text:00000D20 ; Attributes: bp-based frame
.text:00000D20
.text:00000D20 ; unsigned __int32 __stdcall NCompress::NImplode::NDecoder::CCoder::Release(NCompress::NImplode::NDecoder::CCoder *this)
.text:00000D20                 public ?Release@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ
.text:00000D20 ?Release@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ proc near
.text:00000D20                                         ; CODE XREF: [thunk]:NCompress::NImplode::NDecoder::CCoder::Release`adjustor{4}' (void)+5j
.text:00000D20                                         ; DATA XREF: .rdata:000008B4o
.text:00000D20
.text:00000D20 var_10          = dword ptr -10h
.text:00000D20 var_C           = dword ptr -0Ch
.text:00000D20 var_8           = dword ptr -8
.text:00000D20 var_4           = dword ptr -4
.text:00000D20 this            = dword ptr  8
.text:00000D20
.text:00000D20                 push    ebp
.text:00000D21                 mov     ebp, esp
.text:00000D23                 sub     esp, 10h
.text:00000D26                 mov     eax, 0CCCCCCCCh
.text:00000D2B                 mov     [ebp+var_10], eax
.text:00000D2E                 mov     [ebp+var_C], eax
.text:00000D31                 mov     [ebp+var_8], eax
.text:00000D34                 mov     [ebp+var_4], eax
.text:00000D37                 mov     eax, [ebp+this]
.text:00000D3A                 mov     ecx, [eax+8]
.text:00000D3D                 sub     ecx, 1
.text:00000D40                 mov     [ebp+var_C], ecx
.text:00000D43                 mov     edx, [ebp+this]
.text:00000D46                 mov     eax, [ebp+var_C]
.text:00000D49                 mov     [edx+8], eax
.text:00000D4C                 cmp     [ebp+var_C], 0
.text:00000D50                 jz      short loc_D5A
.text:00000D52                 mov     ecx, [ebp+this]
.text:00000D55                 mov     eax, [ecx+8]
.text:00000D58                 jmp     short loc_D84
.text:00000D5A ; ---------------------------------------------------------------------------
.text:00000D5A
.text:00000D5A loc_D5A:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Release(void)+30j
.text:00000D5A                 mov     edx, [ebp+this]
.text:00000D5D                 mov     [ebp+var_8], edx
.text:00000D60                 mov     eax, [ebp+var_8]
.text:00000D63                 mov     [ebp+var_4], eax
.text:00000D66                 cmp     [ebp+var_4], 0
.text:00000D6A                 jz      short loc_D7B
.text:00000D6C                 push    1
.text:00000D6E                 mov     ecx, [ebp+var_4]
.text:00000D71                 call    ??_GCCoder@NDecoder@NImplode@NCompress@@QAEPAXI@Z ; NCompress::NImplode::NDecoder::CCoder::`scalar deleting destructor'(uint)
.text:00000D76                 mov     [ebp+var_10], eax
.text:00000D79                 jmp     short loc_D82
.text:00000D7B ; ---------------------------------------------------------------------------
.text:00000D7B
.text:00000D7B loc_D7B:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Release(void)+4Aj
.text:00000D7B                 mov     [ebp+var_10], 0
.text:00000D82
.text:00000D82 loc_D82:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Release(void)+59j
.text:00000D82                 xor     eax, eax
.text:00000D84
.text:00000D84 loc_D84:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Release(void)+38j
.text:00000D84                 add     esp, 10h
.text:00000D87                 cmp     ebp, esp
.text:00000D89                 call    __RTC_CheckEsp
.text:00000D8E                 mov     esp, ebp
.text:00000D90                 pop     ebp
.text:00000D91                 retn    4
.text:00000D91 ?Release@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ endp
.text:00000D91
.text:00000D91 _text           ends
.text:00000D91
.text:00000D94 ; ===========================================================================
.text:00000D94
.text:00000D94 ; Segment type: Pure code
.text:00000D94 ; Segment permissions: Read/Execute
.text:00000D94 _text           segment para public 'CODE' use32
.text:00000D94                 assume cs:_text
.text:00000D94                 ;org 0D94h
.text:00000D94 ; COMDAT (pick any)
.text:00000D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D94
.text:00000D94 ; =============== S U B R O U T I N E =======================================
.text:00000D94
.text:00000D94 ; Attributes: bp-based frame
.text:00000D94
.text:00000D94 ; public: void * __thiscall NCompress::NImplode::NDecoder::CCoder::`scalar deleting destructor'(unsigned int)
.text:00000D94                 public ??_GCCoder@NDecoder@NImplode@NCompress@@QAEPAXI@Z
.text:00000D94 ??_GCCoder@NDecoder@NImplode@NCompress@@QAEPAXI@Z proc near
.text:00000D94                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::Release(void)+51p
.text:00000D94
.text:00000D94 var_4           = dword ptr -4
.text:00000D94 arg_0           = dword ptr  8
.text:00000D94
.text:00000D94                 push    ebp
.text:00000D95                 mov     ebp, esp
.text:00000D97                 push    ecx
.text:00000D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D9F                 mov     [ebp+var_4], ecx
.text:00000DA2                 mov     ecx, [ebp+var_4] ; this
.text:00000DA5                 call    ??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NDecoder::CCoder::~CCoder(void)
.text:00000DAA                 mov     eax, [ebp+arg_0]
.text:00000DAD                 and     eax, 1
.text:00000DB0                 jz      short loc_DBE
.text:00000DB2                 mov     ecx, [ebp+var_4]
.text:00000DB5                 push    ecx             ; void *
.text:00000DB6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000DBB                 add     esp, 4
.text:00000DBE
.text:00000DBE loc_DBE:                                ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::`scalar deleting destructor'(uint)+1Cj
.text:00000DBE                 mov     eax, [ebp+var_4]
.text:00000DC1                 add     esp, 4
.text:00000DC4                 cmp     ebp, esp
.text:00000DC6                 call    __RTC_CheckEsp
.text:00000DCB                 mov     esp, ebp
.text:00000DCD                 pop     ebp
.text:00000DCE                 retn    4
.text:00000DCE ??_GCCoder@NDecoder@NImplode@NCompress@@QAEPAXI@Z endp
.text:00000DCE
.text:00000DCE ; ---------------------------------------------------------------------------
.text:00000DD1                 align 4
.text:00000DD1 _text           ends
.text:00000DD1
.text:00000DD4 ; ===========================================================================
.text:00000DD4
.text:00000DD4 ; Segment type: Pure code
.text:00000DD4 ; Segment permissions: Read/Execute
.text:00000DD4 _text           segment para public 'CODE' use32
.text:00000DD4                 assume cs:_text
.text:00000DD4                 ;org 0DD4h
.text:00000DD4 ; COMDAT (pick any)
.text:00000DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DD4
.text:00000DD4 ; =============== S U B R O U T I N E =======================================
.text:00000DD4
.text:00000DD4 ; Attributes: bp-based frame
.text:00000DD4
.text:00000DD4 ; _DWORD __thiscall NCompress::NImplode::NDecoder::CCoder::~CCoder(NCompress::NImplode::NDecoder::CCoder *__hidden this)
.text:00000DD4                 public ??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text:00000DD4 ??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ proc near
.text:00000DD4                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::`scalar deleting destructor'(uint)+11p
.text:00000DD4
.text:00000DD4 var_10          = dword ptr -10h
.text:00000DD4 var_C           = dword ptr -0Ch
.text:00000DD4 var_4           = dword ptr -4
.text:00000DD4
.text:00000DD4                 push    ebp
.text:00000DD5                 mov     ebp, esp
.text:00000DD7                 push    0FFFFFFFFh
.text:00000DD9                 push    offset __ehhandler$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text:00000DDE                 mov     eax, large fs:0
.text:00000DE4                 push    eax
.text:00000DE5                 push    ecx
.text:00000DE6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000DED                 mov     eax, dword ptr ds:___security_cookie
.text:00000DF2                 xor     eax, ebp
.text:00000DF4                 push    eax
.text:00000DF5                 lea     eax, [ebp+var_C]
.text:00000DF8                 mov     large fs:0, eax
.text:00000DFE                 mov     [ebp+var_10], ecx
.text:00000E01                 mov     [ebp+var_4], 3
.text:00000E08                 mov     ecx, [ebp+var_10]
.text:00000E0B                 add     ecx, 1A0h       ; this
.text:00000E11                 call    ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text:00000E16                 mov     byte ptr [ebp+var_4], 2
.text:00000E1A                 mov     ecx, [ebp+var_10]
.text:00000E1D                 add     ecx, 108h       ; this
.text:00000E23                 call    ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text:00000E28                 mov     byte ptr [ebp+var_4], 1
.text:00000E2C                 mov     ecx, [ebp+var_10]
.text:00000E2F                 add     ecx, 70h ; 'p'  ; this
.text:00000E32                 call    ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text:00000E37                 mov     byte ptr [ebp+var_4], 0
.text:00000E3B                 mov     ecx, [ebp+var_10]
.text:00000E3E                 add     ecx, 38h ; '8'
.text:00000E41                 call    ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text:00000E46                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E4D                 mov     ecx, [ebp+var_10]
.text:00000E50                 add     ecx, 10h        ; this
.text:00000E53                 call    ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text:00000E58                 mov     ecx, [ebp+var_C]
.text:00000E5B                 mov     large fs:0, ecx
.text:00000E62                 pop     ecx
.text:00000E63                 add     esp, 10h
.text:00000E66                 cmp     ebp, esp
.text:00000E68                 call    __RTC_CheckEsp
.text:00000E6D                 mov     esp, ebp
.text:00000E6F                 pop     ebp
.text:00000E70                 retn
.text:00000E70 ??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ endp
.text:00000E70
.text:00000E70 ; ---------------------------------------------------------------------------
.text:00000E71                 align 4
.text:00000E71 _text           ends
.text:00000E71
.text$x:00000E74 ; ===========================================================================
.text$x:00000E74
.text$x:00000E74 ; Segment type: Pure code
.text$x:00000E74 ; Segment permissions: Read/Execute
.text$x:00000E74 _text$x         segment para public 'CODE' use32
.text$x:00000E74                 assume cs:_text$x
.text$x:00000E74                 ;org 0E74h
.text$x:00000E74 ; COMDAT (pick associative to section at DD4)
.text$x:00000E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000E74
.text$x:00000E74 ; =============== S U B R O U T I N E =======================================
.text$x:00000E74
.text$x:00000E74
.text$x:00000E74 __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0 proc near
.text$x:00000E74                                         ; DATA XREF: .xdata$x:00000EC4o
.text$x:00000E74                 mov     ecx, [ebp-10h]
.text$x:00000E77                 add     ecx, 10h        ; this
.text$x:00000E7A                 jmp     ??1CLzOutWindow@@QAE@XZ ; CLzOutWindow::~CLzOutWindow(void)
.text$x:00000E7A __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0 endp
.text$x:00000E7A
.text$x:00000E7F
.text$x:00000E7F ; =============== S U B R O U T I N E =======================================
.text$x:00000E7F
.text$x:00000E7F
.text$x:00000E7F __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1 proc near
.text$x:00000E7F                                         ; DATA XREF: .xdata$x:00000ECCo
.text$x:00000E7F                 mov     ecx, [ebp-10h]
.text$x:00000E82                 add     ecx, 38h ; '8'
.text$x:00000E85                 jmp     ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)
.text$x:00000E85 __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1 endp
.text$x:00000E85
.text$x:00000E8A
.text$x:00000E8A ; =============== S U B R O U T I N E =======================================
.text$x:00000E8A
.text$x:00000E8A
.text$x:00000E8A __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2 proc near
.text$x:00000E8A                                         ; DATA XREF: .xdata$x:00000ED4o
.text$x:00000E8A                 mov     ecx, [ebp-10h]
.text$x:00000E8D                 add     ecx, 70h ; 'p'  ; this
.text$x:00000E90                 jmp     ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text$x:00000E90 __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2 endp
.text$x:00000E90
.text$x:00000E95
.text$x:00000E95 ; =============== S U B R O U T I N E =======================================
.text$x:00000E95
.text$x:00000E95
.text$x:00000E95 __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3 proc near
.text$x:00000E95                                         ; DATA XREF: .xdata$x:00000EDCo
.text$x:00000E95                 mov     ecx, [ebp-10h]
.text$x:00000E98                 add     ecx, 108h       ; this
.text$x:00000E9E                 jmp     ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NHuffman::CDecoder::~CDecoder(void)
.text$x:00000E9E __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3 endp
.text$x:00000E9E
.text$x:00000EA3
.text$x:00000EA3 ; =============== S U B R O U T I N E =======================================
.text$x:00000EA3
.text$x:00000EA3
.text$x:00000EA3 __ehhandler$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ proc near
.text$x:00000EA3                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::~CCoder(void)+5o
.text$x:00000EA3
.text$x:00000EA3 arg_4           = dword ptr  8
.text$x:00000EA3
.text$x:00000EA3                 mov     edx, [esp+arg_4]
.text$x:00000EA7                 lea     eax, [edx+0Ch]
.text$x:00000EAA                 mov     ecx, [edx-8]
.text$x:00000EAD                 xor     ecx, eax
.text$x:00000EAF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000EB4                 mov     eax, offset __ehfuncinfo$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.text$x:00000EB9                 jmp     ___CxxFrameHandler3
.text$x:00000EB9 __ehhandler$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ endp
.text$x:00000EB9
.text$x:00000EB9 ; ---------------------------------------------------------------------------
.text$x:00000EBE                 align 10h
.text$x:00000EBE _text$x         ends
.text$x:00000EBE
.xdata$x:00000EC0 ; ===========================================================================
.xdata$x:00000EC0
.xdata$x:00000EC0 ; Segment type: Pure data
.xdata$x:00000EC0 ; Segment permissions: Read
.xdata$x:00000EC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000EC0                 assume cs:_xdata$x
.xdata$x:00000EC0                 ;org 0EC0h
.xdata$x:00000EC0 ; COMDAT (pick associative to section at DD4)
.xdata$x:00000EC0 __unwindtable$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ db 0FFh
.xdata$x:00000EC0                                         ; DATA XREF: .xdata$x:00000EE8o
.xdata$x:00000EC1                 db 0FFh
.xdata$x:00000EC2                 db 0FFh
.xdata$x:00000EC3                 db 0FFh
.xdata$x:00000EC4                 dd offset __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0
.xdata$x:00000EC8                 db    0
.xdata$x:00000EC9                 db    0
.xdata$x:00000ECA                 db    0
.xdata$x:00000ECB                 db    0
.xdata$x:00000ECC                 dd offset __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1
.xdata$x:00000ED0                 db    1
.xdata$x:00000ED1                 db    0
.xdata$x:00000ED2                 db    0
.xdata$x:00000ED3                 db    0
.xdata$x:00000ED4                 dd offset __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2
.xdata$x:00000ED8                 db    2
.xdata$x:00000ED9                 db    0
.xdata$x:00000EDA                 db    0
.xdata$x:00000EDB                 db    0
.xdata$x:00000EDC                 dd offset __unwindfunclet$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3
.xdata$x:00000EE0 __ehfuncinfo$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00000EE0                                         ; DATA XREF: __ehhandler$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ+11o
.xdata$x:00000EE1                 db    5
.xdata$x:00000EE2                 db  93h ; ô
.xdata$x:00000EE3                 db  19h
.xdata$x:00000EE4                 db    4
.xdata$x:00000EE5                 db    0
.xdata$x:00000EE6                 db    0
.xdata$x:00000EE7                 db    0
.xdata$x:00000EE8                 dd offset __unwindtable$??1CCoder@NDecoder@NImplode@NCompress@@QAE@XZ
.xdata$x:00000EEC                 align 20h
.xdata$x:00000F00                 db    1
.xdata$x:00000F01                 db    0
.xdata$x:00000F02                 db    0
.xdata$x:00000F03                 db    0
.xdata$x:00000F03 _xdata$x        ends
.xdata$x:00000F03
.text:00000F04 ; ===========================================================================
.text:00000F04
.text:00000F04 ; Segment type: Pure code
.text:00000F04 ; Segment permissions: Read/Execute
.text:00000F04 _text           segment para public 'CODE' use32
.text:00000F04                 assume cs:_text
.text:00000F04                 ;org 0F04h
.text:00000F04 ; COMDAT (pick any)
.text:00000F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F04
.text:00000F04 ; =============== S U B R O U T I N E =======================================
.text:00000F04
.text:00000F04 ; Attributes: bp-based frame
.text:00000F04
.text:00000F04 ; _DWORD __thiscall CLzOutWindow::~CLzOutWindow(CLzOutWindow *__hidden this)
.text:00000F04                 public ??1CLzOutWindow@@QAE@XZ
.text:00000F04 ??1CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$0+6j
.text:00000F04                                         ; NCompress::NImplode::NDecoder::CCoder::~CCoder(void)+7Fp ...
.text:00000F04
.text:00000F04 var_4           = dword ptr -4
.text:00000F04
.text:00000F04                 push    ebp
.text:00000F05                 mov     ebp, esp
.text:00000F07                 push    ecx
.text:00000F08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F0F                 mov     [ebp+var_4], ecx
.text:00000F12                 mov     ecx, [ebp+var_4] ; this
.text:00000F15                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:00000F1A                 add     esp, 4
.text:00000F1D                 cmp     ebp, esp
.text:00000F1F                 call    __RTC_CheckEsp
.text:00000F24                 mov     esp, ebp
.text:00000F26                 pop     ebp
.text:00000F27                 retn
.text:00000F27 ??1CLzOutWindow@@QAE@XZ endp
.text:00000F27
.text:00000F27 _text           ends
.text:00000F27
.text:00000F28 ; ===========================================================================
.text:00000F28
.text:00000F28 ; Segment type: Pure code
.text:00000F28 ; Segment permissions: Read/Execute
.text:00000F28 _text           segment para public 'CODE' use32
.text:00000F28                 assume cs:_text
.text:00000F28                 ;org 0F28h
.text:00000F28 ; COMDAT (pick any)
.text:00000F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F28
.text:00000F28 ; =============== S U B R O U T I N E =======================================
.text:00000F28
.text:00000F28 ; Attributes: bp-based frame
.text:00000F28
.text:00000F28 ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:00000F28                 public ??1COutBuffer@@QAE@XZ
.text:00000F28 ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::~CLzOutWindow(void)+11p
.text:00000F28
.text:00000F28 var_4           = dword ptr -4
.text:00000F28
.text:00000F28                 push    ebp
.text:00000F29                 mov     ebp, esp
.text:00000F2B                 push    ecx
.text:00000F2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F33                 mov     [ebp+var_4], ecx
.text:00000F36                 mov     ecx, [ebp+var_4] ; this
.text:00000F39                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:00000F3E                 add     esp, 4
.text:00000F41                 cmp     ebp, esp
.text:00000F43                 call    __RTC_CheckEsp
.text:00000F48                 mov     esp, ebp
.text:00000F4A                 pop     ebp
.text:00000F4B                 retn
.text:00000F4B ??1COutBuffer@@QAE@XZ endp
.text:00000F4B
.text:00000F4B _text           ends
.text:00000F4B
.text:00000F4C ; ===========================================================================
.text:00000F4C
.text:00000F4C ; Segment type: Pure code
.text:00000F4C ; Segment permissions: Read/Execute
.text:00000F4C _text           segment para public 'CODE' use32
.text:00000F4C                 assume cs:_text
.text:00000F4C                 ;org 0F4Ch
.text:00000F4C ; COMDAT (pick any)
.text:00000F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F4C
.text:00000F4C ; =============== S U B R O U T I N E =======================================
.text:00000F4C
.text:00000F4C ; Attributes: bp-based frame
.text:00000F4C
.text:00000F4C ; public: __thiscall NBitl::CDecoder<class CInBuffer>::~CDecoder<class CInBuffer>(void)
.text:00000F4C                 public ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000F4C ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000F4C                                         ; CODE XREF: __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$1+6j
.text:00000F4C                                         ; NCompress::NImplode::NDecoder::CCoder::~CCoder(void)+6Dp ...
.text:00000F4C
.text:00000F4C var_4           = dword ptr -4
.text:00000F4C
.text:00000F4C                 push    ebp
.text:00000F4D                 mov     ebp, esp
.text:00000F4F                 push    ecx
.text:00000F50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F57                 mov     [ebp+var_4], ecx
.text:00000F5A                 mov     ecx, [ebp+var_4]
.text:00000F5D                 call    ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)
.text:00000F62                 add     esp, 4
.text:00000F65                 cmp     ebp, esp
.text:00000F67                 call    __RTC_CheckEsp
.text:00000F6C                 mov     esp, ebp
.text:00000F6E                 pop     ebp
.text:00000F6F                 retn
.text:00000F6F ??1?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000F6F
.text:00000F6F _text           ends
.text:00000F6F
.text:00000F70 ; ===========================================================================
.text:00000F70
.text:00000F70 ; Segment type: Pure code
.text:00000F70 ; Segment permissions: Read/Execute
.text:00000F70 _text           segment para public 'CODE' use32
.text:00000F70                 assume cs:_text
.text:00000F70                 ;org 0F70h
.text:00000F70 ; COMDAT (pick any)
.text:00000F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F70
.text:00000F70 ; =============== S U B R O U T I N E =======================================
.text:00000F70
.text:00000F70 ; Attributes: bp-based frame
.text:00000F70
.text:00000F70 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::~CBaseDecoder<class CInBuffer>(void)
.text:00000F70                 public ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00000F70 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00000F70                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::~CDecoder<CInBuffer>(void)+11p
.text:00000F70
.text:00000F70 var_4           = dword ptr -4
.text:00000F70
.text:00000F70                 push    ebp
.text:00000F71                 mov     ebp, esp
.text:00000F73                 push    ecx
.text:00000F74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F7B                 mov     [ebp+var_4], ecx
.text:00000F7E                 mov     ecx, [ebp+var_4]
.text:00000F81                 add     ecx, 8          ; this
.text:00000F84                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:00000F89                 add     esp, 4
.text:00000F8C                 cmp     ebp, esp
.text:00000F8E                 call    __RTC_CheckEsp
.text:00000F93                 mov     esp, ebp
.text:00000F95                 pop     ebp
.text:00000F96                 retn
.text:00000F96 ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00000F96
.text:00000F96 ; ---------------------------------------------------------------------------
.text:00000F97                 align 4
.text:00000F97 _text           ends
.text:00000F97
.text:00000F98 ; ===========================================================================
.text:00000F98
.text:00000F98 ; Segment type: Pure code
.text:00000F98 ; Segment permissions: Read/Execute
.text:00000F98 _text           segment para public 'CODE' use32
.text:00000F98                 assume cs:_text
.text:00000F98                 ;org 0F98h
.text:00000F98 ; COMDAT (pick any)
.text:00000F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F98
.text:00000F98 ; =============== S U B R O U T I N E =======================================
.text:00000F98
.text:00000F98 ; Attributes: bp-based frame
.text:00000F98
.text:00000F98 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:00000F98                 public ??1CInBuffer@@QAE@XZ
.text:00000F98 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>(void)+14p
.text:00000F98
.text:00000F98 var_4           = dword ptr -4
.text:00000F98
.text:00000F98                 push    ebp
.text:00000F99                 mov     ebp, esp
.text:00000F9B                 push    ecx
.text:00000F9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FA3                 mov     [ebp+var_4], ecx
.text:00000FA6                 mov     ecx, [ebp+var_4] ; this
.text:00000FA9                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:00000FAE                 add     esp, 4
.text:00000FB1                 cmp     ebp, esp
.text:00000FB3                 call    __RTC_CheckEsp
.text:00000FB8                 mov     esp, ebp
.text:00000FBA                 pop     ebp
.text:00000FBB                 retn
.text:00000FBB ??1CInBuffer@@QAE@XZ endp
.text:00000FBB
.text:00000FBB _text           ends
.text:00000FBB
.text:00000FBC ; ===========================================================================
.text:00000FBC
.text:00000FBC ; Segment type: Pure code
.text:00000FBC ; Segment permissions: Read/Execute
.text:00000FBC _text           segment para public 'CODE' use32
.text:00000FBC                 assume cs:_text
.text:00000FBC                 ;org 0FBCh
.text:00000FBC ; COMDAT (pick any)
.text:00000FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000FBC
.text:00000FBC ; =============== S U B R O U T I N E =======================================
.text:00000FBC
.text:00000FBC ; Attributes: bp-based frame
.text:00000FBC
.text:00000FBC ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:00000FBC                 public ??0ICompressCoder@@QAE@XZ
.text:00000FBC ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+30p
.text:00000FBC
.text:00000FBC var_4           = dword ptr -4
.text:00000FBC
.text:00000FBC                 push    ebp
.text:00000FBD                 mov     ebp, esp
.text:00000FBF                 push    ecx
.text:00000FC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000FC7                 mov     [ebp+var_4], ecx
.text:00000FCA                 mov     ecx, [ebp+var_4]
.text:00000FCD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000FD2                 mov     eax, [ebp+var_4]
.text:00000FD5                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:00000FDB                 mov     eax, [ebp+var_4]
.text:00000FDE                 add     esp, 4
.text:00000FE1                 cmp     ebp, esp
.text:00000FE3                 call    __RTC_CheckEsp
.text:00000FE8                 mov     esp, ebp
.text:00000FEA                 pop     ebp
.text:00000FEB                 retn
.text:00000FEB ??0ICompressCoder@@QAE@XZ endp
.text:00000FEB
.text:00000FEB _text           ends
.text:00000FEB
.rdata:00000FEC ; ===========================================================================
.rdata:00000FEC
.rdata:00000FEC ; Segment type: Pure data
.rdata:00000FEC ; Segment permissions: Read
.rdata:00000FEC _rdata          segment dword public 'DATA' use32
.rdata:00000FEC                 assume cs:_rdata
.rdata:00000FEC                 ;org 0FECh
.rdata:00000FEC ; COMDAT (pick largest)
.rdata:00000FEC                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00000FF0                 public ??_7ICompressCoder@@6B@
.rdata:00000FF0 ; const ICompressCoder::`vftable'
.rdata:00000FF0 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00000FF0                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00000FF4                 dd offset __purecall
.rdata:00000FF8                 dd offset __purecall
.rdata:00000FFC                 dd offset __purecall
.rdata:00000FFC _rdata          ends
.rdata:00000FFC
.rdata$r:00001000 ; ===========================================================================
.rdata$r:00001000
.rdata$r:00001000 ; Segment type: Pure data
.rdata$r:00001000 ; Segment permissions: Read
.rdata$r:00001000 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001000                 assume cs:_rdata$r
.rdata$r:00001000                 ;org 1000h
.rdata$r:00001000 ; COMDAT (pick any)
.rdata$r:00001000                 public ??_R4ICompressCoder@@6B@
.rdata$r:00001000 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00001000 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:00000FECo
.rdata$r:00001001                 db    0
.rdata$r:00001002                 db    0
.rdata$r:00001003                 db    0
.rdata$r:00001004                 db    0
.rdata$r:00001005                 db    0
.rdata$r:00001006                 db    0
.rdata$r:00001007                 db    0
.rdata$r:00001008                 db    0
.rdata$r:00001009                 db    0
.rdata$r:0000100A                 db    0
.rdata$r:0000100B                 db    0
.rdata$r:0000100C                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00001010                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001010 _rdata$r        ends
.rdata$r:00001010
.text:00001014 ; ===========================================================================
.text:00001014
.text:00001014 ; Segment type: Pure code
.text:00001014 ; Segment permissions: Read/Execute
.text:00001014 _text           segment para public 'CODE' use32
.text:00001014                 assume cs:_text
.text:00001014                 ;org 1014h
.text:00001014 ; COMDAT (pick any)
.text:00001014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001014
.text:00001014 ; =============== S U B R O U T I N E =======================================
.text:00001014
.text:00001014 ; Attributes: bp-based frame
.text:00001014
.text:00001014 ; _DWORD __thiscall ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(ICompressSetDecoderProperties2 *__hidden this)
.text:00001014                 public ??0ICompressSetDecoderProperties2@@QAE@XZ
.text:00001014 ??0ICompressSetDecoderProperties2@@QAE@XZ proc near
.text:00001014                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+3Bp
.text:00001014
.text:00001014 var_4           = dword ptr -4
.text:00001014
.text:00001014                 push    ebp
.text:00001015                 mov     ebp, esp
.text:00001017                 push    ecx
.text:00001018                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000101F                 mov     [ebp+var_4], ecx
.text:00001022                 mov     ecx, [ebp+var_4]
.text:00001025                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000102A                 mov     eax, [ebp+var_4]
.text:0000102D                 mov     dword ptr [eax], offset ??_7ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`vftable'
.text:00001033                 mov     eax, [ebp+var_4]
.text:00001036                 add     esp, 4
.text:00001039                 cmp     ebp, esp
.text:0000103B                 call    __RTC_CheckEsp
.text:00001040                 mov     esp, ebp
.text:00001042                 pop     ebp
.text:00001043                 retn
.text:00001043 ??0ICompressSetDecoderProperties2@@QAE@XZ endp
.text:00001043
.text:00001043 _text           ends
.text:00001043
.rdata:00001044 ; ===========================================================================
.rdata:00001044
.rdata:00001044 ; Segment type: Pure data
.rdata:00001044 ; Segment permissions: Read
.rdata:00001044 _rdata          segment dword public 'DATA' use32
.rdata:00001044                 assume cs:_rdata
.rdata:00001044                 ;org 1044h
.rdata:00001044 ; COMDAT (pick largest)
.rdata:00001044                 dd offset ??_R4ICompressSetDecoderProperties2@@6B@ ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata:00001048                 public ??_7ICompressSetDecoderProperties2@@6B@
.rdata:00001048 ; const ICompressSetDecoderProperties2::`vftable'
.rdata:00001048 ??_7ICompressSetDecoderProperties2@@6B@ dd offset __purecall
.rdata:00001048                                         ; DATA XREF: ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+19o
.rdata:0000104C                 dd offset __purecall
.rdata:00001050                 dd offset __purecall
.rdata:00001054                 dd offset __purecall
.rdata:00001054 _rdata          ends
.rdata:00001054
.rdata$r:00001058 ; ===========================================================================
.rdata$r:00001058
.rdata$r:00001058 ; Segment type: Pure data
.rdata$r:00001058 ; Segment permissions: Read
.rdata$r:00001058 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00001058                 assume cs:_rdata$r
.rdata$r:00001058                 ;org 1058h
.rdata$r:00001058 ; COMDAT (pick any)
.rdata$r:00001058                 public ??_R4ICompressSetDecoderProperties2@@6B@
.rdata$r:00001058 ; const ICompressSetDecoderProperties2::`RTTI Complete Object Locator'
.rdata$r:00001058 ??_R4ICompressSetDecoderProperties2@@6B@ db    0
.rdata$r:00001058                                         ; DATA XREF: .rdata:00001044o
.rdata$r:00001059                 db    0
.rdata$r:0000105A                 db    0
.rdata$r:0000105B                 db    0
.rdata$r:0000105C                 db    0
.rdata$r:0000105D                 db    0
.rdata$r:0000105E                 db    0
.rdata$r:0000105F                 db    0
.rdata$r:00001060                 db    0
.rdata$r:00001061                 db    0
.rdata$r:00001062                 db    0
.rdata$r:00001063                 db    0
.rdata$r:00001064                 dd offset ??_R0?AUICompressSetDecoderProperties2@@@8 ; ICompressSetDecoderProperties2 `RTTI Type Descriptor'
.rdata$r:00001068                 dd offset ??_R3ICompressSetDecoderProperties2@@8 ; ICompressSetDecoderProperties2::`RTTI Class Hierarchy Descriptor'
.rdata$r:00001068 _rdata$r        ends
.rdata$r:00001068
.text:0000106C ; ===========================================================================
.text:0000106C
.text:0000106C ; Segment type: Pure code
.text:0000106C ; Segment permissions: Read/Execute
.text:0000106C _text           segment para public 'CODE' use32
.text:0000106C                 assume cs:_text
.text:0000106C                 ;org 106Ch
.text:0000106C ; COMDAT (pick any)
.text:0000106C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000106C
.text:0000106C ; =============== S U B R O U T I N E =======================================
.text:0000106C
.text:0000106C ; Attributes: bp-based frame
.text:0000106C
.text:0000106C ; public: __thiscall CLzOutWindow::CLzOutWindow(void)
.text:0000106C                 public ??0CLzOutWindow@@QAE@XZ
.text:0000106C ??0CLzOutWindow@@QAE@XZ proc near       ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+64p
.text:0000106C
.text:0000106C var_4           = dword ptr -4
.text:0000106C
.text:0000106C                 push    ebp
.text:0000106D                 mov     ebp, esp
.text:0000106F                 push    ecx
.text:00001070                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001077                 mov     [ebp+var_4], ecx
.text:0000107A                 mov     ecx, [ebp+var_4] ; this
.text:0000107D                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00001082                 mov     eax, [ebp+var_4]
.text:00001085                 add     esp, 4
.text:00001088                 cmp     ebp, esp
.text:0000108A                 call    __RTC_CheckEsp
.text:0000108F                 mov     esp, ebp
.text:00001091                 pop     ebp
.text:00001092                 retn
.text:00001092 ??0CLzOutWindow@@QAE@XZ endp
.text:00001092
.text:00001092 ; ---------------------------------------------------------------------------
.text:00001093                 align 4
.text:00001093 _text           ends
.text:00001093
.text:00001094 ; ===========================================================================
.text:00001094
.text:00001094 ; Segment type: Pure code
.text:00001094 ; Segment permissions: Read/Execute
.text:00001094 _text           segment para public 'CODE' use32
.text:00001094                 assume cs:_text
.text:00001094                 ;org 1094h
.text:00001094 ; COMDAT (pick any)
.text:00001094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001094
.text:00001094 ; =============== S U B R O U T I N E =======================================
.text:00001094
.text:00001094 ; Attributes: bp-based frame
.text:00001094
.text:00001094 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00001094                 public ??0COutBuffer@@QAE@XZ
.text:00001094 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CLzOutWindow::CLzOutWindow(void)+11p
.text:00001094
.text:00001094 var_4           = dword ptr -4
.text:00001094
.text:00001094                 push    ebp
.text:00001095                 mov     ebp, esp
.text:00001097                 push    ecx
.text:00001098                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000109F                 mov     [ebp+var_4], ecx
.text:000010A2                 mov     eax, [ebp+var_4]
.text:000010A5                 mov     dword ptr [eax], 0
.text:000010AB                 mov     ecx, [ebp+var_4]
.text:000010AE                 mov     dword ptr [ecx+4], 0
.text:000010B5                 mov     edx, [ebp+var_4]
.text:000010B8                 mov     dword ptr [edx+14h], 0
.text:000010BF                 mov     eax, [ebp+var_4]
.text:000010C2                 mov     dword ptr [eax+20h], 0
.text:000010C9                 mov     eax, [ebp+var_4]
.text:000010CC                 mov     esp, ebp
.text:000010CE                 pop     ebp
.text:000010CF                 retn
.text:000010CF ??0COutBuffer@@QAE@XZ endp
.text:000010CF
.text:000010CF _text           ends
.text:000010CF
.text:000010D0 ; ===========================================================================
.text:000010D0
.text:000010D0 ; Segment type: Pure code
.text:000010D0 ; Segment permissions: Read/Execute
.text:000010D0 _text           segment para public 'CODE' use32
.text:000010D0                 assume cs:_text
.text:000010D0                 ;org 10D0h
.text:000010D0 ; COMDAT (pick any)
.text:000010D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010D0
.text:000010D0 ; =============== S U B R O U T I N E =======================================
.text:000010D0
.text:000010D0 ; Attributes: bp-based frame
.text:000010D0
.text:000010D0 ; public: __thiscall NBitl::CDecoder<class CInBuffer>::CDecoder<class CInBuffer>(void)
.text:000010D0                 public ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:000010D0 ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:000010D0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+76p
.text:000010D0
.text:000010D0 var_4           = dword ptr -4
.text:000010D0
.text:000010D0                 push    ebp
.text:000010D1                 mov     ebp, esp
.text:000010D3                 push    ecx
.text:000010D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010DB                 mov     [ebp+var_4], ecx
.text:000010DE                 mov     ecx, [ebp+var_4]
.text:000010E1                 call    ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)
.text:000010E6                 mov     eax, [ebp+var_4]
.text:000010E9                 add     esp, 4
.text:000010EC                 cmp     ebp, esp
.text:000010EE                 call    __RTC_CheckEsp
.text:000010F3                 mov     esp, ebp
.text:000010F5                 pop     ebp
.text:000010F6                 retn
.text:000010F6 ??0?$CDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:000010F6
.text:000010F6 ; ---------------------------------------------------------------------------
.text:000010F7                 align 4
.text:000010F7 _text           ends
.text:000010F7
.text:000010F8 ; ===========================================================================
.text:000010F8
.text:000010F8 ; Segment type: Pure code
.text:000010F8 ; Segment permissions: Read/Execute
.text:000010F8 _text           segment para public 'CODE' use32
.text:000010F8                 assume cs:_text
.text:000010F8                 ;org 10F8h
.text:000010F8 ; COMDAT (pick any)
.text:000010F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010F8
.text:000010F8 ; =============== S U B R O U T I N E =======================================
.text:000010F8
.text:000010F8 ; Attributes: bp-based frame
.text:000010F8
.text:000010F8 ; public: __thiscall IUnknown::IUnknown(void)
.text:000010F8                 public ??0IUnknown@@QAE@XZ
.text:000010F8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:000010F8                                         ; ICompressSetDecoderProperties2::ICompressSetDecoderProperties2(void)+11p
.text:000010F8
.text:000010F8 var_4           = dword ptr -4
.text:000010F8
.text:000010F8                 push    ebp
.text:000010F9                 mov     ebp, esp
.text:000010FB                 push    ecx
.text:000010FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001103                 mov     [ebp+var_4], ecx
.text:00001106                 mov     eax, [ebp+var_4]
.text:00001109                 mov     esp, ebp
.text:0000110B                 pop     ebp
.text:0000110C                 retn
.text:0000110C ??0IUnknown@@QAE@XZ endp
.text:0000110C
.text:0000110C ; ---------------------------------------------------------------------------
.text:0000110D                 align 10h
.text:0000110D _text           ends
.text:0000110D
.text:00001110 ; ===========================================================================
.text:00001110
.text:00001110 ; Segment type: Pure code
.text:00001110 ; Segment permissions: Read/Execute
.text:00001110 _text           segment para public 'CODE' use32
.text:00001110                 assume cs:_text
.text:00001110                 ;org 1110h
.text:00001110 ; COMDAT (pick any)
.text:00001110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001110
.text:00001110 ; =============== S U B R O U T I N E =======================================
.text:00001110
.text:00001110 ; Attributes: bp-based frame
.text:00001110
.text:00001110 ; public: __thiscall NBitl::CBaseDecoder<class CInBuffer>::CBaseDecoder<class CInBuffer>(void)
.text:00001110                 public ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
.text:00001110 ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ proc near
.text:00001110                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::CDecoder<CInBuffer>(void)+11p
.text:00001110
.text:00001110 var_4           = dword ptr -4
.text:00001110
.text:00001110                 push    ebp
.text:00001111                 mov     ebp, esp
.text:00001113                 push    ecx
.text:00001114                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000111B                 mov     [ebp+var_4], ecx
.text:0000111E                 mov     ecx, [ebp+var_4]
.text:00001121                 add     ecx, 8
.text:00001124                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:00001129                 mov     eax, [ebp+var_4]
.text:0000112C                 add     esp, 4
.text:0000112F                 cmp     ebp, esp
.text:00001131                 call    __RTC_CheckEsp
.text:00001136                 mov     esp, ebp
.text:00001138                 pop     ebp
.text:00001139                 retn
.text:00001139 ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ endp
.text:00001139
.text:00001139 ; ---------------------------------------------------------------------------
.text:0000113A                 align 4
.text:0000113A _text           ends
.text:0000113A
.text:0000113C ; ===========================================================================
.text:0000113C
.text:0000113C ; Segment type: Pure code
.text:0000113C ; Segment permissions: Read/Execute
.text:0000113C _text           segment para public 'CODE' use32
.text:0000113C                 assume cs:_text
.text:0000113C                 ;org 113Ch
.text:0000113C ; COMDAT (pick any)
.text:0000113C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000113C
.text:0000113C ; =============== S U B R O U T I N E =======================================
.text:0000113C
.text:0000113C ; Attributes: bp-based frame
.text:0000113C
.text:0000113C ; public: __thiscall CInBuffer::CInBuffer(void)
.text:0000113C                 public ??0CInBuffer@@QAE@XZ
.text:0000113C ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>(void)+14p
.text:0000113C
.text:0000113C var_4           = dword ptr -4
.text:0000113C
.text:0000113C                 push    ebp
.text:0000113D                 mov     ebp, esp
.text:0000113F                 push    ecx
.text:00001140                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001147                 mov     [ebp+var_4], ecx
.text:0000114A                 mov     ecx, [ebp+var_4]
.text:0000114D                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:00001152                 mov     eax, [ebp+var_4]
.text:00001155                 add     esp, 4
.text:00001158                 cmp     ebp, esp
.text:0000115A                 call    __RTC_CheckEsp
.text:0000115F                 mov     esp, ebp
.text:00001161                 pop     ebp
.text:00001162                 retn
.text:00001162 ??0CInBuffer@@QAE@XZ endp
.text:00001162
.text:00001162 ; ---------------------------------------------------------------------------
.text:00001163                 align 4
.text:00001163 _text           ends
.text:00001163
.xdata$x:00001164 ; ===========================================================================
.xdata$x:00001164
.xdata$x:00001164 ; Segment type: Pure data
.xdata$x:00001164 ; Segment permissions: Read
.xdata$x:00001164 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001164                 assume cs:_xdata$x
.xdata$x:00001164                 ;org 1164h
.xdata$x:00001164 ; COMDAT (pick any)
.xdata$x:00001164                 public __TI1?AVCException@NDecoder@NImplode@NCompress@@
.xdata$x:00001164 __TI1?AVCException@NDecoder@NImplode@NCompress@@ db    0
.xdata$x:00001164                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+A1o
.xdata$x:00001165                 db    0
.xdata$x:00001166                 db    0
.xdata$x:00001167                 db    0
.xdata$x:00001168                 db    0
.xdata$x:00001169                 db    0
.xdata$x:0000116A                 db    0
.xdata$x:0000116B                 db    0
.xdata$x:0000116C                 db    0
.xdata$x:0000116D                 db    0
.xdata$x:0000116E                 db    0
.xdata$x:0000116F                 db    0
.xdata$x:00001170                 dd offset __CTA1?AVCException@NDecoder@NImplode@NCompress@@
.xdata$x:00001170 _xdata$x        ends
.xdata$x:00001170
.xdata$x:00001174 ; ===========================================================================
.xdata$x:00001174
.xdata$x:00001174 ; Segment type: Pure data
.xdata$x:00001174 ; Segment permissions: Read
.xdata$x:00001174 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001174                 assume cs:_xdata$x
.xdata$x:00001174                 ;org 1174h
.xdata$x:00001174 ; COMDAT (pick any)
.xdata$x:00001174                 public __CTA1?AVCException@NDecoder@NImplode@NCompress@@
.xdata$x:00001174 __CTA1?AVCException@NDecoder@NImplode@NCompress@@ db    1
.xdata$x:00001174                                         ; DATA XREF: .xdata$x:00001170o
.xdata$x:00001175                 db    0
.xdata$x:00001176                 db    0
.xdata$x:00001177                 db    0
.xdata$x:00001178                 dd offset __CT??_R0?AVCException@NDecoder@NImplode@NCompress@@@84
.xdata$x:00001178 _xdata$x        ends
.xdata$x:00001178
.xdata$x:0000117C ; ===========================================================================
.xdata$x:0000117C
.xdata$x:0000117C ; Segment type: Pure data
.xdata$x:0000117C ; Segment permissions: Read
.xdata$x:0000117C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000117C                 assume cs:_xdata$x
.xdata$x:0000117C                 ;org 117Ch
.xdata$x:0000117C ; COMDAT (pick any)
.xdata$x:0000117C                 public __CT??_R0?AVCException@NDecoder@NImplode@NCompress@@@84
.xdata$x:0000117C __CT??_R0?AVCException@NDecoder@NImplode@NCompress@@@84 db    0
.xdata$x:0000117C                                         ; DATA XREF: .xdata$x:00001178o
.xdata$x:0000117D                 db    0
.xdata$x:0000117E                 db    0
.xdata$x:0000117F                 db    0
.xdata$x:00001180                 dd offset ??_R0?AVCException@NDecoder@NImplode@NCompress@@@8 ; NCompress::NImplode::NDecoder::CException `RTTI Type Descriptor'
.xdata$x:00001184                 align 8
.xdata$x:00001188                 db 0FFh
.xdata$x:00001189                 db 0FFh
.xdata$x:0000118A                 db 0FFh
.xdata$x:0000118B                 db 0FFh
.xdata$x:0000118C                 db    0
.xdata$x:0000118D                 db    0
.xdata$x:0000118E                 db    0
.xdata$x:0000118F                 db    0
.xdata$x:00001190                 db    4
.xdata$x:00001191                 db    0
.xdata$x:00001192                 db    0
.xdata$x:00001193                 db    0
.xdata$x:00001194                 db    0
.xdata$x:00001195                 db    0
.xdata$x:00001196                 db    0
.xdata$x:00001197                 db    0
.xdata$x:00001197 _xdata$x        ends
.xdata$x:00001197
.data:00001198 ; ===========================================================================
.data:00001198
.data:00001198 ; Segment type: Pure data
.data:00001198 ; Segment permissions: Read/Write
.data:00001198 _data           segment dword public 'DATA' use32
.data:00001198                 assume cs:_data
.data:00001198                 ;org 1198h
.data:00001198 ; COMDAT (pick any)
.data:00001198                 public ??_R0?AVCException@NDecoder@NImplode@NCompress@@@8
.data:00001198 ; class NCompress::NImplode::NDecoder::CException `RTTI Type Descriptor'
.data:00001198 ??_R0?AVCException@NDecoder@NImplode@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00001198                                         ; DATA XREF: .xdata$x:00001180o
.data:00001198                                         ; const type_info::`vftable'
.data:0000119C                 align 10h
.data:000011A0 a_?avcexception db '.?AVCException@NDecoder@NImplode@NCompress@@',0
.data:000011CD                 align 10h
.data:000011CD _data           ends
.data:000011CD
.text:000011D0 ; ===========================================================================
.text:000011D0
.text:000011D0 ; Segment type: Pure code
.text:000011D0 ; Segment permissions: Read/Execute
.text:000011D0 _text           segment para public 'CODE' use32
.text:000011D0                 assume cs:_text
.text:000011D0                 ;org 11D0h
.text:000011D0 ; COMDAT (pick any)
.text:000011D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011D0
.text:000011D0 ; =============== S U B R O U T I N E =======================================
.text:000011D0
.text:000011D0 ; Attributes: bp-based frame
.text:000011D0
.text:000011D0 ; public: __thiscall NCompress::NImplode::NDecoder::CException::CException(enum  NCompress::NImplode::NDecoder::CException::ECauseType)
.text:000011D0                 public ??0CException@NDecoder@NImplode@NCompress@@QAE@W4ECauseType@0123@@Z
.text:000011D0 ??0CException@NDecoder@NImplode@NCompress@@QAE@W4ECauseType@0123@@Z proc near
.text:000011D0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+97p
.text:000011D0
.text:000011D0 var_4           = dword ptr -4
.text:000011D0 arg_0           = dword ptr  8
.text:000011D0
.text:000011D0                 push    ebp
.text:000011D1                 mov     ebp, esp
.text:000011D3                 push    ecx
.text:000011D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011DB                 mov     [ebp+var_4], ecx
.text:000011DE                 mov     eax, [ebp+var_4]
.text:000011E1                 mov     ecx, [ebp+arg_0]
.text:000011E4                 mov     [eax], ecx
.text:000011E6                 mov     eax, [ebp+var_4]
.text:000011E9                 mov     esp, ebp
.text:000011EB                 pop     ebp
.text:000011EC                 retn    4
.text:000011EC ??0CException@NDecoder@NImplode@NCompress@@QAE@W4ECauseType@0123@@Z endp
.text:000011EC
.text:000011EC ; ---------------------------------------------------------------------------
.text:000011EF                 align 10h
.text:000011EF _text           ends
.text:000011EF
.text:000011F0 ; ===========================================================================
.text:000011F0
.text:000011F0 ; Segment type: Pure code
.text:000011F0 ; Segment permissions: Read/Execute
.text:000011F0 _text           segment para public 'CODE' use32
.text:000011F0                 assume cs:_text
.text:000011F0                 ;org 11F0h
.text:000011F0 ; COMDAT (pick any)
.text:000011F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011F0
.text:000011F0 ; =============== S U B R O U T I N E =======================================
.text:000011F0
.text:000011F0 ; Attributes: bp-based frame
.text:000011F0
.text:000011F0 ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:000011F0                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:000011F0 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:000011F0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+96p
.text:000011F0
.text:000011F0 var_4           = dword ptr -4
.text:000011F0 arg_0           = dword ptr  8
.text:000011F0
.text:000011F0                 push    ebp
.text:000011F1                 mov     ebp, esp
.text:000011F3                 push    ecx
.text:000011F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011FB                 mov     [ebp+var_4], ecx
.text:000011FE                 mov     eax, [ebp+var_4]
.text:00001201                 mov     ecx, [ebp+arg_0]
.text:00001204                 mov     [eax+14h], ecx
.text:00001207                 mov     esp, ebp
.text:00001209                 pop     ebp
.text:0000120A                 retn    4
.text:0000120A ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:0000120A
.text:0000120A ; ---------------------------------------------------------------------------
.text:0000120D                 align 10h
.text:0000120D _text           ends
.text:0000120D
.text:00001210 ; ===========================================================================
.text:00001210
.text:00001210 ; Segment type: Pure code
.text:00001210 ; Segment permissions: Read/Execute
.text:00001210 _text           segment para public 'CODE' use32
.text:00001210                 assume cs:_text
.text:00001210                 ;org 1210h
.text:00001210 ; COMDAT (pick any)
.text:00001210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001210
.text:00001210 ; =============== S U B R O U T I N E =======================================
.text:00001210
.text:00001210 ; Attributes: bp-based frame
.text:00001210
.text:00001210 ; bool __thiscall CLzOutWindow::CopyBlock(CLzOutWindow *this, unsigned int, unsigned int)
.text:00001210                 public ?CopyBlock@CLzOutWindow@@QAE_NII@Z
.text:00001210 ?CopyBlock@CLzOutWindow@@QAE_NII@Z proc near
.text:00001210                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+278p
.text:00001210
.text:00001210 var_14          = dword ptr -14h
.text:00001210 var_10          = dword ptr -10h
.text:00001210 var_C           = dword ptr -0Ch
.text:00001210 var_8           = dword ptr -8
.text:00001210 var_4           = dword ptr -4
.text:00001210 arg_0           = dword ptr  8
.text:00001210 arg_4           = dword ptr  0Ch
.text:00001210
.text:00001210                 push    ebp
.text:00001211                 mov     ebp, esp
.text:00001213                 sub     esp, 14h
.text:00001216                 push    esi
.text:00001217                 mov     eax, 0CCCCCCCCh
.text:0000121C                 mov     [ebp+var_14], eax
.text:0000121F                 mov     [ebp+var_10], eax
.text:00001222                 mov     [ebp+var_C], eax
.text:00001225                 mov     [ebp+var_8], eax
.text:00001228                 mov     [ebp+var_4], eax
.text:0000122B                 mov     [ebp+var_4], ecx
.text:0000122E                 mov     eax, [ebp+var_4]
.text:00001231                 mov     ecx, [eax+4]
.text:00001234                 sub     ecx, [ebp+arg_0]
.text:00001237                 sub     ecx, 1
.text:0000123A                 mov     [ebp+var_8], ecx
.text:0000123D                 mov     edx, [ebp+var_4]
.text:00001240                 mov     eax, [ebp+arg_0]
.text:00001243                 cmp     eax, [edx+4]
.text:00001246                 jb      short loc_1271
.text:00001248                 mov     ecx, [ebp+var_4]
.text:0000124B                 movzx   edx, byte ptr [ecx+24h]
.text:0000124F                 test    edx, edx
.text:00001251                 jz      short loc_125E
.text:00001253                 mov     eax, [ebp+var_4]
.text:00001256                 mov     ecx, [ebp+arg_0]
.text:00001259                 cmp     ecx, [eax+10h]
.text:0000125C                 jb      short loc_1265
.text:0000125E
.text:0000125E loc_125E:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+41j
.text:0000125E                 xor     al, al
.text:00001260                 jmp     loc_134D
.text:00001265 ; ---------------------------------------------------------------------------
.text:00001265
.text:00001265 loc_1265:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+4Cj
.text:00001265                 mov     edx, [ebp+var_4]
.text:00001268                 mov     eax, [ebp+var_8]
.text:0000126B                 add     eax, [edx+10h]
.text:0000126E                 mov     [ebp+var_8], eax
.text:00001271
.text:00001271 loc_1271:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+36j
.text:00001271                 mov     ecx, [ebp+var_4]
.text:00001274                 mov     edx, [ebp+var_4]
.text:00001277                 mov     eax, [ecx+8]
.text:0000127A                 sub     eax, [edx+4]
.text:0000127D                 cmp     eax, [ebp+arg_4]
.text:00001280                 jbe     short loc_12E1
.text:00001282                 mov     ecx, [ebp+var_4]
.text:00001285                 mov     edx, [ecx+10h]
.text:00001288                 sub     edx, [ebp+var_8]
.text:0000128B                 cmp     edx, [ebp+arg_4]
.text:0000128E                 jbe     short loc_12E1
.text:00001290                 mov     eax, [ebp+var_4]
.text:00001293                 mov     ecx, [eax]
.text:00001295                 add     ecx, [ebp+var_8]
.text:00001298                 mov     [ebp+var_C], ecx
.text:0000129B                 mov     edx, [ebp+var_4]
.text:0000129E                 mov     eax, [edx]
.text:000012A0                 mov     ecx, [ebp+var_4]
.text:000012A3                 add     eax, [ecx+4]
.text:000012A6                 mov     [ebp+var_10], eax
.text:000012A9                 mov     edx, [ebp+var_4]
.text:000012AC                 mov     eax, [edx+4]
.text:000012AF                 add     eax, [ebp+arg_4]
.text:000012B2                 mov     ecx, [ebp+var_4]
.text:000012B5                 mov     [ecx+4], eax
.text:000012B8
.text:000012B8 loc_12B8:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CDj
.text:000012B8                 mov     edx, [ebp+var_10]
.text:000012BB                 mov     eax, [ebp+var_C]
.text:000012BE                 mov     cl, [eax]
.text:000012C0                 mov     [edx], cl
.text:000012C2                 mov     edx, [ebp+var_10]
.text:000012C5                 add     edx, 1
.text:000012C8                 mov     [ebp+var_10], edx
.text:000012CB                 mov     eax, [ebp+var_C]
.text:000012CE                 add     eax, 1
.text:000012D1                 mov     [ebp+var_C], eax
.text:000012D4                 mov     ecx, [ebp+arg_4]
.text:000012D7                 sub     ecx, 1
.text:000012DA                 mov     [ebp+arg_4], ecx
.text:000012DD                 jnz     short loc_12B8
.text:000012DF                 jmp     short loc_134B
.text:000012E1 ; ---------------------------------------------------------------------------
.text:000012E1
.text:000012E1 loc_12E1:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+70j
.text:000012E1                                         ; CLzOutWindow::CopyBlock(uint,uint)+7Ej ...
.text:000012E1                 mov     edx, [ebp+var_4]
.text:000012E4                 mov     eax, [ebp+var_8]
.text:000012E7                 cmp     eax, [edx+10h]
.text:000012EA                 jnz     short loc_12F3
.text:000012EC                 mov     [ebp+var_8], 0
.text:000012F3
.text:000012F3 loc_12F3:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+DAj
.text:000012F3                 mov     ecx, [ebp+var_4]
.text:000012F6                 mov     edx, [ecx+4]
.text:000012F9                 mov     [ebp+var_14], edx
.text:000012FC                 mov     eax, [ebp+var_4]
.text:000012FF                 mov     ecx, [eax]
.text:00001301                 mov     edx, [ebp+var_4]
.text:00001304                 mov     eax, [edx]
.text:00001306                 mov     edx, [ebp+var_14]
.text:00001309                 mov     esi, [ebp+var_8]
.text:0000130C                 mov     cl, [ecx+esi]
.text:0000130F                 mov     [eax+edx], cl
.text:00001312                 mov     edx, [ebp+var_14]
.text:00001315                 add     edx, 1
.text:00001318                 mov     [ebp+var_14], edx
.text:0000131B                 mov     eax, [ebp+var_8]
.text:0000131E                 add     eax, 1
.text:00001321                 mov     [ebp+var_8], eax
.text:00001324                 mov     ecx, [ebp+var_4]
.text:00001327                 mov     edx, [ebp+var_14]
.text:0000132A                 mov     [ecx+4], edx
.text:0000132D                 mov     eax, [ebp+var_4]
.text:00001330                 mov     ecx, [ebp+var_14]
.text:00001333                 cmp     ecx, [eax+8]
.text:00001336                 jnz     short loc_1340
.text:00001338                 mov     ecx, [ebp+var_4] ; this
.text:0000133B                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00001340
.text:00001340 loc_1340:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+126j
.text:00001340                 mov     edx, [ebp+arg_4]
.text:00001343                 sub     edx, 1
.text:00001346                 mov     [ebp+arg_4], edx
.text:00001349                 jnz     short loc_12E1
.text:0000134B
.text:0000134B loc_134B:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+CFj
.text:0000134B                 mov     al, 1
.text:0000134D
.text:0000134D loc_134D:                               ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+50j
.text:0000134D                 pop     esi
.text:0000134E                 add     esp, 14h
.text:00001351                 cmp     ebp, esp
.text:00001353                 call    __RTC_CheckEsp
.text:00001358                 mov     esp, ebp
.text:0000135A                 pop     ebp
.text:0000135B                 retn    8
.text:0000135B ?CopyBlock@CLzOutWindow@@QAE_NII@Z endp
.text:0000135B
.text:0000135B ; ---------------------------------------------------------------------------
.text:0000135E                 align 10h
.text:0000135E _text           ends
.text:0000135E
.text:00001360 ; ===========================================================================
.text:00001360
.text:00001360 ; Segment type: Pure code
.text:00001360 ; Segment permissions: Read/Execute
.text:00001360 _text           segment para public 'CODE' use32
.text:00001360                 assume cs:_text
.text:00001360                 ;org 1360h
.text:00001360 ; COMDAT (pick any)
.text:00001360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001360
.text:00001360 ; =============== S U B R O U T I N E =======================================
.text:00001360
.text:00001360 ; Attributes: bp-based frame
.text:00001360
.text:00001360 ; void __thiscall CLzOutWindow::PutByte(CLzOutWindow *this, unsigned __int8)
.text:00001360                 public ?PutByte@CLzOutWindow@@QAEXE@Z
.text:00001360 ?PutByte@CLzOutWindow@@QAEXE@Z proc near
.text:00001360                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+242p
.text:00001360                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E6p
.text:00001360
.text:00001360 var_8           = dword ptr -8
.text:00001360 var_4           = dword ptr -4
.text:00001360 arg_0           = byte ptr  8
.text:00001360
.text:00001360                 push    ebp
.text:00001361                 mov     ebp, esp
.text:00001363                 sub     esp, 8
.text:00001366                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000136D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001374                 mov     [ebp+var_4], ecx
.text:00001377                 mov     eax, [ebp+var_4]
.text:0000137A                 mov     ecx, [eax+4]
.text:0000137D                 mov     [ebp+var_8], ecx
.text:00001380                 mov     edx, [ebp+var_4]
.text:00001383                 mov     eax, [edx]
.text:00001385                 mov     ecx, [ebp+var_8]
.text:00001388                 mov     dl, [ebp+arg_0]
.text:0000138B                 mov     [eax+ecx], dl
.text:0000138E                 mov     eax, [ebp+var_8]
.text:00001391                 add     eax, 1
.text:00001394                 mov     [ebp+var_8], eax
.text:00001397                 mov     ecx, [ebp+var_4]
.text:0000139A                 mov     edx, [ebp+var_8]
.text:0000139D                 mov     [ecx+4], edx
.text:000013A0                 mov     eax, [ebp+var_4]
.text:000013A3                 mov     ecx, [ebp+var_8]
.text:000013A6                 cmp     ecx, [eax+8]
.text:000013A9                 jnz     short loc_13B3
.text:000013AB                 mov     ecx, [ebp+var_4] ; this
.text:000013AE                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:000013B3
.text:000013B3 loc_13B3:                               ; CODE XREF: CLzOutWindow::PutByte(uchar)+49j
.text:000013B3                 add     esp, 8
.text:000013B6                 cmp     ebp, esp
.text:000013B8                 call    __RTC_CheckEsp
.text:000013BD                 mov     esp, ebp
.text:000013BF                 pop     ebp
.text:000013C0                 retn    4
.text:000013C0 ?PutByte@CLzOutWindow@@QAEXE@Z endp
.text:000013C0
.text:000013C0 ; ---------------------------------------------------------------------------
.text:000013C3                 align 4
.text:000013C3 _text           ends
.text:000013C3
.data:000013C4 ; ===========================================================================
.data:000013C4
.data:000013C4 ; Segment type: Pure data
.data:000013C4 ; Segment permissions: Read/Write
.data:000013C4 _data           segment dword public 'DATA' use32
.data:000013C4                 assume cs:_data
.data:000013C4                 ;org 13C4h
.data:000013C4 ; COMDAT (pick any)
.data:000013C4                 public ??_R0?AUCOutBufferException@@@8
.data:000013C4 ; struct COutBufferException `RTTI Type Descriptor'
.data:000013C4 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:000013C4                                         ; DATA XREF: .xdata$x:00000928o
.data:000013C4                                         ; const type_info::`vftable'
.data:000013C8                 db    0
.data:000013C9                 db    0
.data:000013CA                 db    0
.data:000013CB                 db    0
.data:000013CC                 db  2Eh ; .
.data:000013CD                 db  3Fh ; ?
.data:000013CE                 db  41h ; A
.data:000013CF                 db  55h ; U
.data:000013D0                 db  43h ; C
.data:000013D1                 db  4Fh ; O
.data:000013D2                 db  75h ; u
.data:000013D3                 db  74h ; t
.data:000013D4                 db  42h ; B
.data:000013D5                 db  75h ; u
.data:000013D6                 db  66h ; f
.data:000013D7                 db  66h ; f
.data:000013D8                 db  65h ; e
.data:000013D9                 db  72h ; r
.data:000013DA                 db  45h ; E
.data:000013DB                 db  78h ; x
.data:000013DC                 db  63h ; c
.data:000013DD                 db  65h ; e
.data:000013DE                 db  70h ; p
.data:000013DF                 db  74h ; t
.data:000013E0                 db  69h ; i
.data:000013E1                 db  6Fh ; o
.data:000013E2                 db  6Eh ; n
.data:000013E3                 db  40h ; @
.data:000013E4                 db  40h ; @
.data:000013E5                 db    0
.data:000013E6                 align 4
.data:000013E6 _data           ends
.data:000013E6
.text:000013E8 ; ===========================================================================
.text:000013E8
.text:000013E8 ; Segment type: Pure code
.text:000013E8 ; Segment permissions: Read/Execute
.text:000013E8 _text           segment para public 'CODE' use32
.text:000013E8                 assume cs:_text
.text:000013E8                 ;org 13E8h
.text:000013E8 ; COMDAT (pick any)
.text:000013E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013E8
.text:000013E8 ; =============== S U B R O U T I N E =======================================
.text:000013E8
.text:000013E8 ; Attributes: bp-based frame
.text:000013E8
.text:000013E8 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Init(void)
.text:000013E8                 public ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:000013E8 ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:000013E8                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BDp
.text:000013E8
.text:000013E8 var_4           = dword ptr -4
.text:000013E8
.text:000013E8                 push    ebp
.text:000013E9                 mov     ebp, esp
.text:000013EB                 push    ecx
.text:000013EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013F3                 mov     [ebp+var_4], ecx
.text:000013F6                 mov     ecx, [ebp+var_4]
.text:000013F9                 call    ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Init(void)
.text:000013FE                 mov     eax, [ebp+var_4]
.text:00001401                 mov     dword ptr [eax+30h], 0
.text:00001408                 add     esp, 4
.text:0000140B                 cmp     ebp, esp
.text:0000140D                 call    __RTC_CheckEsp
.text:00001412                 mov     esp, ebp
.text:00001414                 pop     ebp
.text:00001415                 retn
.text:00001415 ?Init@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:00001415
.text:00001415 ; ---------------------------------------------------------------------------
.text:00001416                 align 4
.text:00001416 _text           ends
.text:00001416
.text:00001418 ; ===========================================================================
.text:00001418
.text:00001418 ; Segment type: Pure code
.text:00001418 ; Segment permissions: Read/Execute
.text:00001418 _text           segment para public 'CODE' use32
.text:00001418                 assume cs:_text
.text:00001418                 ;org 1418h
.text:00001418 ; COMDAT (pick any)
.text:00001418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001418
.text:00001418 ; =============== S U B R O U T I N E =======================================
.text:00001418
.text:00001418 ; Attributes: bp-based frame
.text:00001418
.text:00001418 ; public: unsigned int __thiscall NBitl::CDecoder<class CInBuffer>::ReadBits(unsigned int)
.text:00001418                 public ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z
.text:00001418 ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
.text:00001418                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+31p
.text:00001418                                         ; NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+69p ...
.text:00001418
.text:00001418 var_8           = dword ptr -8
.text:00001418 var_4           = dword ptr -4
.text:00001418 arg_0           = dword ptr  8
.text:00001418
.text:00001418                 push    ebp
.text:00001419                 mov     ebp, esp
.text:0000141B                 sub     esp, 8
.text:0000141E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001425                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000142C                 mov     [ebp+var_4], ecx
.text:0000142F                 mov     ecx, [ebp+var_4]
.text:00001432                 call    ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize(void)
.text:00001437                 mov     eax, 1
.text:0000143C                 mov     ecx, [ebp+arg_0]
.text:0000143F                 shl     eax, cl
.text:00001441                 sub     eax, 1
.text:00001444                 mov     ecx, [ebp+var_4]
.text:00001447                 and     eax, [ecx+30h]
.text:0000144A                 mov     [ebp+var_8], eax
.text:0000144D                 mov     edx, [ebp+arg_0]
.text:00001450                 push    edx
.text:00001451                 mov     ecx, [ebp+var_4]
.text:00001454                 call    ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos(uint)
.text:00001459                 mov     eax, [ebp+var_8]
.text:0000145C                 add     esp, 8
.text:0000145F                 cmp     ebp, esp
.text:00001461                 call    __RTC_CheckEsp
.text:00001466                 mov     esp, ebp
.text:00001468                 pop     ebp
.text:00001469                 retn    4
.text:00001469 ?ReadBits@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z endp
.text:00001469
.text:00001469 _text           ends
.text:00001469
.text:0000146C ; ===========================================================================
.text:0000146C
.text:0000146C ; Segment type: Pure code
.text:0000146C ; Segment permissions: Read/Execute
.text:0000146C _text           segment para public 'CODE' use32
.text:0000146C                 assume cs:_text
.text:0000146C                 ;org 146Ch
.text:0000146C ; COMDAT (pick any)
.text:0000146C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000146C
.text:0000146C ; =============== S U B R O U T I N E =======================================
.text:0000146C
.text:0000146C ; Attributes: bp-based frame
.text:0000146C
.text:0000146C ; public: bool __thiscall NBitl::CBaseDecoder<class CInBuffer>::Create(unsigned int)
.text:0000146C                 public ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z
.text:0000146C ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z proc near
.text:0000146C                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+27p
.text:0000146C
.text:0000146C var_4           = dword ptr -4
.text:0000146C arg_0           = dword ptr  8
.text:0000146C
.text:0000146C                 push    ebp
.text:0000146D                 mov     ebp, esp
.text:0000146F                 push    ecx
.text:00001470                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001477                 mov     [ebp+var_4], ecx
.text:0000147A                 mov     eax, [ebp+arg_0]
.text:0000147D                 push    eax             ; unsigned int
.text:0000147E                 mov     ecx, [ebp+var_4]
.text:00001481                 add     ecx, 8          ; this
.text:00001484                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:00001489                 add     esp, 4
.text:0000148C                 cmp     ebp, esp
.text:0000148E                 call    __RTC_CheckEsp
.text:00001493                 mov     esp, ebp
.text:00001495                 pop     ebp
.text:00001496                 retn    4
.text:00001496 ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z endp
.text:00001496
.text:00001496 ; ---------------------------------------------------------------------------
.text:00001499                 align 4
.text:00001499 _text           ends
.text:00001499
.text:0000149C ; ===========================================================================
.text:0000149C
.text:0000149C ; Segment type: Pure code
.text:0000149C ; Segment permissions: Read/Execute
.text:0000149C _text           segment para public 'CODE' use32
.text:0000149C                 assume cs:_text
.text:0000149C                 ;org 149Ch
.text:0000149C ; COMDAT (pick any)
.text:0000149C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000149C
.text:0000149C ; =============== S U B R O U T I N E =======================================
.text:0000149C
.text:0000149C ; Attributes: bp-based frame
.text:0000149C
.text:0000149C ; int __stdcall NBitl::CBaseDecoder<CInBuffer>::SetStream(struct ISequentialInStream *)
.text:0000149C                 public ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z
.text:0000149C ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000149C                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B2p
.text:0000149C
.text:0000149C var_4           = dword ptr -4
.text:0000149C arg_0           = dword ptr  8
.text:0000149C
.text:0000149C                 push    ebp
.text:0000149D                 mov     ebp, esp
.text:0000149F                 push    ecx
.text:000014A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014A7                 mov     [ebp+var_4], ecx
.text:000014AA                 mov     eax, [ebp+arg_0]
.text:000014AD                 push    eax             ; struct ISequentialInStream *
.text:000014AE                 mov     ecx, [ebp+var_4]
.text:000014B1                 add     ecx, 8          ; this
.text:000014B4                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:000014B9                 add     esp, 4
.text:000014BC                 cmp     ebp, esp
.text:000014BE                 call    __RTC_CheckEsp
.text:000014C3                 mov     esp, ebp
.text:000014C5                 pop     ebp
.text:000014C6                 retn    4
.text:000014C6 ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z endp
.text:000014C6
.text:000014C6 ; ---------------------------------------------------------------------------
.text:000014C9                 align 4
.text:000014C9 _text           ends
.text:000014C9
.text:000014CC ; ===========================================================================
.text:000014CC
.text:000014CC ; Segment type: Pure code
.text:000014CC ; Segment permissions: Read/Execute
.text:000014CC _text           segment para public 'CODE' use32
.text:000014CC                 assume cs:_text
.text:000014CC                 ;org 14CCh
.text:000014CC ; COMDAT (pick any)
.text:000014CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014CC
.text:000014CC ; =============== S U B R O U T I N E =======================================
.text:000014CC
.text:000014CC ; Attributes: bp-based frame
.text:000014CC
.text:000014CC ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:000014CC                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:000014CC ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:000014CC                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::SetStream(ISequentialInStream *)+18p
.text:000014CC
.text:000014CC var_4           = dword ptr -4
.text:000014CC arg_0           = dword ptr  8
.text:000014CC
.text:000014CC                 push    ebp
.text:000014CD                 mov     ebp, esp
.text:000014CF                 push    ecx
.text:000014D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014D7                 mov     [ebp+var_4], ecx
.text:000014DA                 mov     eax, [ebp+var_4]
.text:000014DD                 mov     ecx, [ebp+arg_0]
.text:000014E0                 mov     [eax+0Ch], ecx
.text:000014E3                 mov     esp, ebp
.text:000014E5                 pop     ebp
.text:000014E6                 retn    4
.text:000014E6 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:000014E6
.text:000014E6 ; ---------------------------------------------------------------------------
.text:000014E9                 align 4
.text:000014E9 _text           ends
.text:000014E9
.text:000014EC ; ===========================================================================
.text:000014EC
.text:000014EC ; Segment type: Pure code
.text:000014EC ; Segment permissions: Read/Execute
.text:000014EC _text           segment para public 'CODE' use32
.text:000014EC                 assume cs:_text
.text:000014EC                 ;org 14ECh
.text:000014EC ; COMDAT (pick any)
.text:000014EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014EC
.text:000014EC ; =============== S U B R O U T I N E =======================================
.text:000014EC
.text:000014EC ; Attributes: bp-based frame
.text:000014EC
.text:000014EC ; public: unsigned __int64 __thiscall NBitl::CBaseDecoder<class CInBuffer>::GetProcessedSize(void)const
.text:000014EC                 public ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
.text:000014EC ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ proc near
.text:000014EC                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+123p
.text:000014EC
.text:000014EC var_4           = dword ptr -4
.text:000014EC
.text:000014EC                 push    ebp
.text:000014ED                 mov     ebp, esp
.text:000014EF                 push    ecx
.text:000014F0                 push    esi
.text:000014F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014F8                 mov     [ebp+var_4], ecx
.text:000014FB                 mov     ecx, [ebp+var_4]
.text:000014FE                 add     ecx, 8          ; this
.text:00001501                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00001506                 mov     ecx, [ebp+var_4]
.text:00001509                 mov     esi, 20h ; ' '
.text:0000150E                 sub     esi, [ecx]
.text:00001510                 shr     esi, 3
.text:00001513                 xor     ecx, ecx
.text:00001515                 sub     eax, esi
.text:00001517                 sbb     edx, ecx
.text:00001519                 pop     esi
.text:0000151A                 add     esp, 4
.text:0000151D                 cmp     ebp, esp
.text:0000151F                 call    __RTC_CheckEsp
.text:00001524                 mov     esp, ebp
.text:00001526                 pop     ebp
.text:00001527                 retn
.text:00001527 ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ endp
.text:00001527
.text:00001527 _text           ends
.text:00001527
.text:00001528 ; ===========================================================================
.text:00001528
.text:00001528 ; Segment type: Pure code
.text:00001528 ; Segment permissions: Read/Execute
.text:00001528 _text           segment para public 'CODE' use32
.text:00001528                 assume cs:_text
.text:00001528                 ;org 1528h
.text:00001528 ; COMDAT (pick any)
.text:00001528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001528
.text:00001528 ; =============== S U B R O U T I N E =======================================
.text:00001528
.text:00001528 ; Attributes: bp-based frame
.text:00001528
.text:00001528 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:00001528                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:00001528 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:00001528                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize(void)+15p
.text:00001528
.text:00001528 var_4           = dword ptr -4
.text:00001528
.text:00001528                 push    ebp
.text:00001529                 mov     ebp, esp
.text:0000152B                 push    ecx
.text:0000152C                 push    esi
.text:0000152D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001534                 mov     [ebp+var_4], ecx
.text:00001537                 mov     eax, [ebp+var_4]
.text:0000153A                 mov     ecx, [eax+20h]
.text:0000153D                 xor     esi, esi
.text:0000153F                 mov     edx, [ebp+var_4]
.text:00001542                 add     ecx, [edx+10h]
.text:00001545                 adc     esi, [edx+14h]
.text:00001548                 mov     eax, [ebp+var_4]
.text:0000154B                 mov     edx, [ebp+var_4]
.text:0000154E                 mov     eax, [eax]
.text:00001550                 sub     eax, [edx+8]
.text:00001553                 cdq
.text:00001554                 add     ecx, eax
.text:00001556                 adc     esi, edx
.text:00001558                 mov     eax, ecx
.text:0000155A                 mov     edx, esi
.text:0000155C                 pop     esi
.text:0000155D                 mov     esp, ebp
.text:0000155F                 pop     ebp
.text:00001560                 retn
.text:00001560 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:00001560
.text:00001560 ; ---------------------------------------------------------------------------
.text:00001561                 align 4
.text:00001561 _text           ends
.text:00001561
.text:00001564 ; ===========================================================================
.text:00001564
.text:00001564 ; Segment type: Pure code
.text:00001564 ; Segment permissions: Read/Execute
.text:00001564 _text           segment para public 'CODE' use32
.text:00001564                 assume cs:_text
.text:00001564                 ;org 1564h
.text:00001564 ; COMDAT (pick any)
.text:00001564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001564
.text:00001564 ; =============== S U B R O U T I N E =======================================
.text:00001564
.text:00001564 ; Attributes: bp-based frame
.text:00001564
.text:00001564 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::Normalize(void)
.text:00001564                 public ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00001564 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00001564                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadBits(uint)+1Ap
.text:00001564
.text:00001564 var_8           = dword ptr -8
.text:00001564 var_4           = dword ptr -4
.text:00001564
.text:00001564                 push    ebp
.text:00001565                 mov     ebp, esp
.text:00001567                 sub     esp, 8
.text:0000156A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001571                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001578                 mov     [ebp+var_4], ecx
.text:0000157B                 jmp     short loc_158A
.text:0000157D ; ---------------------------------------------------------------------------
.text:0000157D
.text:0000157D loc_157D:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+74j
.text:0000157D                 mov     eax, [ebp+var_4]
.text:00001580                 mov     ecx, [eax]
.text:00001582                 sub     ecx, 8
.text:00001585                 mov     edx, [ebp+var_4]
.text:00001588                 mov     [edx], ecx
.text:0000158A
.text:0000158A loc_158A:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+17j
.text:0000158A                 mov     eax, [ebp+var_4]
.text:0000158D                 cmp     dword ptr [eax], 8
.text:00001590                 jb      short loc_15DA
.text:00001592                 mov     ecx, [ebp+var_4]
.text:00001595                 add     ecx, 8          ; this
.text:00001598                 call    ?ReadByte@CInBufferBase@@QAEEXZ ; CInBufferBase::ReadByte(void)
.text:0000159D                 mov     byte ptr [ebp+var_8+3], al
.text:000015A0                 movzx   edx, byte ptr [ebp+var_8+3]
.text:000015A4                 mov     eax, [ebp+var_4]
.text:000015A7                 mov     ecx, 20h ; ' '
.text:000015AC                 sub     ecx, [eax]
.text:000015AE                 shl     edx, cl
.text:000015B0                 mov     ecx, [ebp+var_4]
.text:000015B3                 or      edx, [ecx+30h]
.text:000015B6                 mov     eax, [ebp+var_4]
.text:000015B9                 mov     [eax+30h], edx
.text:000015BC                 mov     ecx, [ebp+var_4]
.text:000015BF                 mov     edx, [ecx+4]
.text:000015C2                 shl     edx, 8
.text:000015C5                 movzx   eax, byte ptr [ebp+var_8+3]
.text:000015C9                 movzx   ecx, byte ptr ds:?kInvertTable@NBitl@@3PAEA[eax] ; uchar * NBitl::kInvertTable
.text:000015D0                 or      edx, ecx
.text:000015D2                 mov     eax, [ebp+var_4]
.text:000015D5                 mov     [eax+4], edx
.text:000015D8                 jmp     short loc_157D
.text:000015DA ; ---------------------------------------------------------------------------
.text:000015DA
.text:000015DA loc_15DA:                               ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+2Cj
.text:000015DA                 add     esp, 8
.text:000015DD                 cmp     ebp, esp
.text:000015DF                 call    __RTC_CheckEsp
.text:000015E4                 mov     esp, ebp
.text:000015E6                 pop     ebp
.text:000015E7                 retn
.text:000015E7 ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:000015E7
.text:000015E7 _text           ends
.text:000015E7
.text:000015E8 ; ===========================================================================
.text:000015E8
.text:000015E8 ; Segment type: Pure code
.text:000015E8 ; Segment permissions: Read/Execute
.text:000015E8 _text           segment para public 'CODE' use32
.text:000015E8                 assume cs:_text
.text:000015E8                 ;org 15E8h
.text:000015E8 ; COMDAT (pick any)
.text:000015E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000015E8
.text:000015E8 ; =============== S U B R O U T I N E =======================================
.text:000015E8
.text:000015E8 ; Attributes: bp-based frame
.text:000015E8
.text:000015E8 ; unsigned __int8 __thiscall CInBufferBase::ReadByte(CInBufferBase *__hidden this)
.text:000015E8                 public ?ReadByte@CInBufferBase@@QAEEXZ
.text:000015E8 ?ReadByte@CInBufferBase@@QAEEXZ proc near
.text:000015E8                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+34p
.text:000015E8
.text:000015E8 var_8           = dword ptr -8
.text:000015E8 var_4           = dword ptr -4
.text:000015E8
.text:000015E8                 push    ebp
.text:000015E9                 mov     ebp, esp
.text:000015EB                 sub     esp, 8
.text:000015EE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000015F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015FC                 mov     [ebp+var_4], ecx
.text:000015FF                 mov     eax, [ebp+var_4]
.text:00001602                 mov     ecx, [ebp+var_4]
.text:00001605                 mov     edx, [eax]
.text:00001607                 cmp     edx, [ecx+4]
.text:0000160A                 jb      short loc_1616
.text:0000160C                 mov     ecx, [ebp+var_4] ; this
.text:0000160F                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock(void)
.text:00001614                 jmp     short loc_1630
.text:00001616 ; ---------------------------------------------------------------------------
.text:00001616
.text:00001616 loc_1616:                               ; CODE XREF: CInBufferBase::ReadByte(void)+22j
.text:00001616                 mov     eax, [ebp+var_4]
.text:00001619                 mov     ecx, [eax]
.text:0000161B                 mov     dl, [ecx]
.text:0000161D                 mov     byte ptr [ebp+var_8+3], dl
.text:00001620                 mov     eax, [ebp+var_4]
.text:00001623                 mov     ecx, [eax]
.text:00001625                 add     ecx, 1
.text:00001628                 mov     edx, [ebp+var_4]
.text:0000162B                 mov     [edx], ecx
.text:0000162D                 mov     al, byte ptr [ebp+var_8+3]
.text:00001630
.text:00001630 loc_1630:                               ; CODE XREF: CInBufferBase::ReadByte(void)+2Cj
.text:00001630                 add     esp, 8
.text:00001633                 cmp     ebp, esp
.text:00001635                 call    __RTC_CheckEsp
.text:0000163A                 mov     esp, ebp
.text:0000163C                 pop     ebp
.text:0000163D                 retn
.text:0000163D ?ReadByte@CInBufferBase@@QAEEXZ endp
.text:0000163D
.text:0000163D ; ---------------------------------------------------------------------------
.text:0000163E                 align 10h
.text:0000163E _text           ends
.text:0000163E
.text:00001640 ; ===========================================================================
.text:00001640
.text:00001640 ; Segment type: Pure code
.text:00001640 ; Segment permissions: Read/Execute
.text:00001640 _text           segment para public 'CODE' use32
.text:00001640                 assume cs:_text
.text:00001640                 ;org 1640h
.text:00001640 ; COMDAT (pick any)
.text:00001640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001640
.text:00001640 ; =============== S U B R O U T I N E =======================================
.text:00001640
.text:00001640 ; Attributes: bp-based frame
.text:00001640
.text:00001640 ; public: void __thiscall NBitl::CDecoder<class CInBuffer>::MovePos(unsigned int)
.text:00001640                 public ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z
.text:00001640 ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z proc near
.text:00001640                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::ReadBits(uint)+3Cp
.text:00001640
.text:00001640 var_4           = dword ptr -4
.text:00001640 arg_0           = dword ptr  8
.text:00001640
.text:00001640                 push    ebp
.text:00001641                 mov     ebp, esp
.text:00001643                 push    ecx
.text:00001644                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000164B                 mov     [ebp+var_4], ecx
.text:0000164E                 mov     eax, [ebp+var_4]
.text:00001651                 mov     ecx, [eax]
.text:00001653                 add     ecx, [ebp+arg_0]
.text:00001656                 mov     edx, [ebp+var_4]
.text:00001659                 mov     [edx], ecx
.text:0000165B                 mov     eax, [ebp+var_4]
.text:0000165E                 mov     edx, [eax+30h]
.text:00001661                 mov     ecx, [ebp+arg_0]
.text:00001664                 shr     edx, cl
.text:00001666                 mov     eax, [ebp+var_4]
.text:00001669                 mov     [eax+30h], edx
.text:0000166C                 mov     esp, ebp
.text:0000166E                 pop     ebp
.text:0000166F                 retn    4
.text:0000166F ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z endp
.text:0000166F
.text:0000166F ; ---------------------------------------------------------------------------
.text:00001672                 align 4
.text:00001672 _text           ends
.text:00001672
.text:00001674 ; ===========================================================================
.text:00001674
.text:00001674 ; Segment type: Pure code
.text:00001674 ; Segment permissions: Read/Execute
.text:00001674 _text           segment para public 'CODE' use32
.text:00001674                 assume cs:_text
.text:00001674                 ;org 1674h
.text:00001674 ; COMDAT (pick any)
.text:00001674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001674
.text:00001674 ; =============== S U B R O U T I N E =======================================
.text:00001674
.text:00001674 ; Attributes: bp-based frame
.text:00001674
.text:00001674 ; public: void __thiscall NBitl::CBaseDecoder<class CInBuffer>::Init(void)
.text:00001674                 public ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
.text:00001674 ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
.text:00001674                                         ; CODE XREF: NBitl::CDecoder<CInBuffer>::Init(void)+11p
.text:00001674
.text:00001674 var_4           = dword ptr -4
.text:00001674
.text:00001674                 push    ebp
.text:00001675                 mov     ebp, esp
.text:00001677                 push    ecx
.text:00001678                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000167F                 mov     [ebp+var_4], ecx
.text:00001682                 mov     ecx, [ebp+var_4]
.text:00001685                 add     ecx, 8          ; this
.text:00001688                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:0000168D                 mov     eax, [ebp+var_4]
.text:00001690                 mov     dword ptr [eax], 20h ; ' '
.text:00001696                 mov     ecx, [ebp+var_4]
.text:00001699                 mov     dword ptr [ecx+4], 0
.text:000016A0                 add     esp, 4
.text:000016A3                 cmp     ebp, esp
.text:000016A5                 call    __RTC_CheckEsp
.text:000016AA                 mov     esp, ebp
.text:000016AC                 pop     ebp
.text:000016AD                 retn
.text:000016AD ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ endp
.text:000016AD
.text:000016AD ; ---------------------------------------------------------------------------
.text:000016AE                 align 10h
.text:000016AE _text           ends
.text:000016AE
.text:000016B0 ; ===========================================================================
.text:000016B0
.text:000016B0 ; Segment type: Pure code
.text:000016B0 ; Segment permissions: Read/Execute
.text:000016B0 _text           segment para public 'CODE' use32
.text:000016B0                 assume cs:_text
.text:000016B0                 ;org 16B0h
.text:000016B0 ; COMDAT (pick any)
.text:000016B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016B0
.text:000016B0 ; =============== S U B R O U T I N E =======================================
.text:000016B0
.text:000016B0
.text:000016B0 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NImplode::NDecoder::CCoder::Release`adjustor{4}' (void)
.text:000016B0                 public ?Release@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ
.text:000016B0 ?Release@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ proc near
.text:000016B0                                         ; DATA XREF: .rdata:000008A0o
.text:000016B0
.text:000016B0 arg_0           = dword ptr  4
.text:000016B0
.text:000016B0                 sub     [esp+arg_0], 4
.text:000016B5                 jmp     ?Release@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ ; NCompress::NImplode::NDecoder::CCoder::Release(void)
.text:000016B5 ?Release@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ endp
.text:000016B5
.text:000016B5 ; ---------------------------------------------------------------------------
.text:000016BA                 align 4
.text:000016BA _text           ends
.text:000016BA
.text:000016BC ; ===========================================================================
.text:000016BC
.text:000016BC ; Segment type: Pure code
.text:000016BC ; Segment permissions: Read/Execute
.text:000016BC _text           segment para public 'CODE' use32
.text:000016BC                 assume cs:_text
.text:000016BC                 ;org 16BCh
.text:000016BC ; COMDAT (pick any)
.text:000016BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016BC
.text:000016BC ; =============== S U B R O U T I N E =======================================
.text:000016BC
.text:000016BC
.text:000016BC ; [thunk]:public: virtual unsigned long __stdcall NCompress::NImplode::NDecoder::CCoder::AddRef`adjustor{4}' (void)
.text:000016BC                 public ?AddRef@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ
.text:000016BC ?AddRef@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ proc near
.text:000016BC                                         ; DATA XREF: .rdata:0000089Co
.text:000016BC
.text:000016BC arg_0           = dword ptr  4
.text:000016BC
.text:000016BC                 sub     [esp+arg_0], 4
.text:000016C1                 jmp     ?AddRef@CCoder@NDecoder@NImplode@NCompress@@UAGKXZ ; NCompress::NImplode::NDecoder::CCoder::AddRef(void)
.text:000016C1 ?AddRef@CCoder@NDecoder@NImplode@NCompress@@W3AGKXZ endp
.text:000016C1
.text:000016C1 ; ---------------------------------------------------------------------------
.text:000016C6                 align 4
.text:000016C6 _text           ends
.text:000016C6
.text:000016C8 ; ===========================================================================
.text:000016C8
.text:000016C8 ; Segment type: Pure code
.text:000016C8 ; Segment permissions: Read/Execute
.text:000016C8 _text           segment para public 'CODE' use32
.text:000016C8                 assume cs:_text
.text:000016C8                 ;org 16C8h
.text:000016C8 ; COMDAT (pick any)
.text:000016C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016C8
.text:000016C8 ; =============== S U B R O U T I N E =======================================
.text:000016C8
.text:000016C8
.text:000016C8 ; [thunk]:public: virtual long __stdcall NCompress::NImplode::NDecoder::CCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:000016C8                 public ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:000016C8 ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:000016C8                                         ; DATA XREF: .rdata:const NCompress::NImplode::NDecoder::CCoder::`vftable'{for `ICompressSetDecoderProperties2'}o
.text:000016C8
.text:000016C8 arg_0           = dword ptr  4
.text:000016C8
.text:000016C8                 sub     [esp+arg_0], 4
.text:000016CD                 jmp     ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)
.text:000016CD ?QueryInterface@CCoder@NDecoder@NImplode@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:000016CD
.text:000016CD ; ---------------------------------------------------------------------------
.text:000016D2                 align 4
.text:000016D2 _text           ends
.text:000016D2
.text$yc:000016D4 ; ===========================================================================
.text$yc:000016D4
.text$yc:000016D4 ; Segment type: Pure code
.text$yc:000016D4 ; Segment permissions: Read/Execute
.text$yc:000016D4 _text$yc        segment para public 'CODE' use32
.text$yc:000016D4                 assume cs:_text$yc
.text$yc:000016D4                 ;org 16D4h
.text$yc:000016D4 ; COMDAT (pick any)
.text$yc:000016D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000016D4
.text$yc:000016D4 ; =============== S U B R O U T I N E =======================================
.text$yc:000016D4
.text$yc:000016D4 ; Attributes: bp-based frame
.text$yc:000016D4
.text$yc:000016D4 ; void __cdecl NCompress::NImplode::NDecoder::`dynamic initializer for 'kHistorySize''(void)
.text$yc:000016D4 ??__EkHistorySize@NDecoder@NImplode@NCompress@@YAXXZ proc near
.text$yc:000016D4                                         ; DATA XREF: .CRT$XCU:_kHistorySize$initializer$o
.text$yc:000016D4                 push    ebp
.text$yc:000016D5                 mov     ebp, esp
.text$yc:000016D7                 push    6
.text$yc:000016D9                 push    7
.text$yc:000016DB                 call    ??$MyMax@H@@YGHHH@Z ; MyMax<int>(int,int)
.text$yc:000016E0                 mov     edx, 1
.text$yc:000016E5                 mov     ecx, eax
.text$yc:000016E7                 shl     edx, cl
.text$yc:000016E9                 shl     edx, 6
.text$yc:000016EC                 mov     ds:_kHistorySize, edx
.text$yc:000016F2                 cmp     ebp, esp
.text$yc:000016F4                 call    __RTC_CheckEsp
.text$yc:000016F9                 pop     ebp
.text$yc:000016FA                 retn
.text$yc:000016FA ??__EkHistorySize@NDecoder@NImplode@NCompress@@YAXXZ endp
.text$yc:000016FA
.text$yc:000016FA ; ---------------------------------------------------------------------------
.text$yc:000016FB                 align 4
.text$yc:000016FB _text$yc        ends
.text$yc:000016FB
.text:000016FC ; ===========================================================================
.text:000016FC
.text:000016FC ; Segment type: Pure code
.text:000016FC ; Segment permissions: Read/Execute
.text:000016FC _text           segment para public 'CODE' use32
.text:000016FC                 assume cs:_text
.text:000016FC                 ;org 16FCh
.text:000016FC ; COMDAT (pick any)
.text:000016FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016FC
.text:000016FC ; =============== S U B R O U T I N E =======================================
.text:000016FC
.text:000016FC ; Attributes: bp-based frame
.text:000016FC
.text:000016FC ; int __stdcall MyMax<int>(int, int)
.text:000016FC                 public ??$MyMax@H@@YGHHH@Z
.text:000016FC ??$MyMax@H@@YGHHH@Z proc near           ; CODE XREF: NCompress::NImplode::NDecoder::`dynamic initializer for 'kHistorySize''(void)+7p
.text:000016FC
.text:000016FC var_4           = dword ptr -4
.text:000016FC arg_0           = dword ptr  8
.text:000016FC arg_4           = dword ptr  0Ch
.text:000016FC
.text:000016FC                 push    ebp
.text:000016FD                 mov     ebp, esp
.text:000016FF                 push    ecx
.text:00001700                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001707                 mov     eax, [ebp+arg_0]
.text:0000170A                 cmp     eax, [ebp+arg_4]
.text:0000170D                 jle     short loc_1717
.text:0000170F                 mov     ecx, [ebp+arg_0]
.text:00001712                 mov     [ebp+var_4], ecx
.text:00001715                 jmp     short loc_171D
.text:00001717 ; ---------------------------------------------------------------------------
.text:00001717
.text:00001717 loc_1717:                               ; CODE XREF: MyMax<int>(int,int)+11j
.text:00001717                 mov     edx, [ebp+arg_4]
.text:0000171A                 mov     [ebp+var_4], edx
.text:0000171D
.text:0000171D loc_171D:                               ; CODE XREF: MyMax<int>(int,int)+19j
.text:0000171D                 mov     eax, [ebp+var_4]
.text:00001720                 mov     esp, ebp
.text:00001722                 pop     ebp
.text:00001723                 retn    8
.text:00001723 ??$MyMax@H@@YGHHH@Z endp
.text:00001723
.text:00001723 ; ---------------------------------------------------------------------------
.text:00001726                 align 4
.text:00001726 _text           ends
.text:00001726
.text$yc:00001728 ; ===========================================================================
.text$yc:00001728
.text$yc:00001728 ; Segment type: Pure code
.text$yc:00001728 ; Segment permissions: Read/Execute
.text$yc:00001728 _text$yc        segment para public 'CODE' use32
.text$yc:00001728                 assume cs:_text$yc
.text$yc:00001728                 ;org 1728h
.text$yc:00001728 ; COMDAT (pick any)
.text$yc:00001728                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00001728
.text$yc:00001728 ; =============== S U B R O U T I N E =======================================
.text$yc:00001728
.text$yc:00001728 ; Attributes: bp-based frame
.text$yc:00001728
.text$yc:00001728 ; void __cdecl NCompress::NImplode::NDecoder::`dynamic initializer for 'kMatchMinLenMax''(void)
.text$yc:00001728 ??__EkMatchMinLenMax@NDecoder@NImplode@NCompress@@YAXXZ proc near
.text$yc:00001728                                         ; DATA XREF: .CRT$XCU:_kMatchMinLenMax$initializer$o
.text$yc:00001728                 push    ebp
.text$yc:00001729                 mov     ebp, esp
.text$yc:0000172B                 push    2
.text$yc:0000172D                 push    3
.text$yc:0000172F                 call    ??$MyMax@I@@YGIII@Z ; MyMax<uint>(uint,uint)
.text$yc:00001734                 mov     ds:_kMatchMinLenMax, eax
.text$yc:00001739                 cmp     ebp, esp
.text$yc:0000173B                 call    __RTC_CheckEsp
.text$yc:00001740                 pop     ebp
.text$yc:00001741                 retn
.text$yc:00001741 ??__EkMatchMinLenMax@NDecoder@NImplode@NCompress@@YAXXZ endp
.text$yc:00001741
.text$yc:00001741 ; ---------------------------------------------------------------------------
.text$yc:00001742                 align 4
.text$yc:00001742 _text$yc        ends
.text$yc:00001742
.text:00001744 ; ===========================================================================
.text:00001744
.text:00001744 ; Segment type: Pure code
.text:00001744 ; Segment permissions: Read/Execute
.text:00001744 _text           segment para public 'CODE' use32
.text:00001744                 assume cs:_text
.text:00001744                 ;org 1744h
.text:00001744 ; COMDAT (pick any)
.text:00001744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001744
.text:00001744 ; =============== S U B R O U T I N E =======================================
.text:00001744
.text:00001744 ; Attributes: bp-based frame
.text:00001744
.text:00001744 ; unsigned int __stdcall MyMax<unsigned int>(unsigned int, unsigned int)
.text:00001744                 public ??$MyMax@I@@YGIII@Z
.text:00001744 ??$MyMax@I@@YGIII@Z proc near           ; CODE XREF: NCompress::NImplode::NDecoder::`dynamic initializer for 'kMatchMinLenMax''(void)+7p
.text:00001744
.text:00001744 var_4           = dword ptr -4
.text:00001744 arg_0           = dword ptr  8
.text:00001744 arg_4           = dword ptr  0Ch
.text:00001744
.text:00001744                 push    ebp
.text:00001745                 mov     ebp, esp
.text:00001747                 push    ecx
.text:00001748                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000174F                 mov     eax, [ebp+arg_0]
.text:00001752                 cmp     eax, [ebp+arg_4]
.text:00001755                 jbe     short loc_175F
.text:00001757                 mov     ecx, [ebp+arg_0]
.text:0000175A                 mov     [ebp+var_4], ecx
.text:0000175D                 jmp     short loc_1765
.text:0000175F ; ---------------------------------------------------------------------------
.text:0000175F
.text:0000175F loc_175F:                               ; CODE XREF: MyMax<uint>(uint,uint)+11j
.text:0000175F                 mov     edx, [ebp+arg_4]
.text:00001762                 mov     [ebp+var_4], edx
.text:00001765
.text:00001765 loc_1765:                               ; CODE XREF: MyMax<uint>(uint,uint)+19j
.text:00001765                 mov     eax, [ebp+var_4]
.text:00001768                 mov     esp, ebp
.text:0000176A                 pop     ebp
.text:0000176B                 retn    8
.text:0000176B ??$MyMax@I@@YGIII@Z endp
.text:0000176B
.text:0000176B ; ---------------------------------------------------------------------------
.text:0000176E                 align 10h
.text:0000176E _text           ends
.text:0000176E
.bss:00001770 ; ===========================================================================
.bss:00001770
.bss:00001770 ; Segment type: Uninitialized
.bss:00001770 ; Segment permissions: Read/Write
.bss:00001770 _bss            segment dword public 'BSS' use32
.bss:00001770                 assume cs:_bss
.bss:00001770                 ;org 1770h
.bss:00001770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00001770 ; unsigned int kHistorySize
.bss:00001770 _kHistorySize   dd ?                    ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_35Dr
.bss:00001770                                         ; NCompress::NImplode::NDecoder::`dynamic initializer for 'kHistorySize''(void)+18w
.bss:00001774 _kMatchMinLenMax dd ?                   ; DATA XREF: NCompress::NImplode::NDecoder::`dynamic initializer for 'kMatchMinLenMax''(void)+Cw
.bss:00001774 _bss            ends
.bss:00001774
.CRT$XCU:00001778 ; ===========================================================================
.CRT$XCU:00001778
.CRT$XCU:00001778 ; Segment type: Pure data
.CRT$XCU:00001778 ; Segment permissions: Read
.CRT$XCU:00001778 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00001778                 assume cs:_CRT$XCU
.CRT$XCU:00001778                 ;org 1778h
.CRT$XCU:00001778 _kHistorySize$initializer$ dd offset ??__EkHistorySize@NDecoder@NImplode@NCompress@@YAXXZ ; NCompress::NImplode::NDecoder::`dynamic initializer for 'kHistorySize''(void)
.CRT$XCU:0000177C _kMatchMinLenMax$initializer$ dd offset ??__EkMatchMinLenMax@NDecoder@NImplode@NCompress@@YAXXZ ; NCompress::NImplode::NDecoder::`dynamic initializer for 'kMatchMinLenMax''(void)
.CRT$XCU:0000177C _CRT$XCU        ends
.CRT$XCU:0000177C
UNDEF:00001780 ; ===========================================================================
UNDEF:00001780
UNDEF:00001780 ; Segment type: Externs
UNDEF:00001780 ; UNDEF
UNDEF:00001780 ; _DWORD __thiscall NCompress::NImplode::NHuffman::CDecoder::~CDecoder(NCompress::NImplode::NHuffman::CDecoder *__hidden this)
UNDEF:00001780                 extrn ??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ:near
UNDEF:00001780                                         ; CODE XREF: __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$2+6j
UNDEF:00001780                                         ; __unwindfunclet$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ$3+9j ...
UNDEF:00001784 ; _DWORD __thiscall NCompress::NImplode::NHuffman::CDecoder::CDecoder(NCompress::NImplode::NHuffman::CDecoder *__hidden this, unsigned int)
UNDEF:00001784                 extrn ??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z:near
UNDEF:00001784                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+8Ap
UNDEF:00001784                                         ; NCompress::NImplode::NDecoder::CCoder::CCoder(void)+9Ep ...
UNDEF:00001788                 extrn ___security_cookie:near
UNDEF:00001788                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+19r
UNDEF:00001788                                         ; NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+1Er ...
UNDEF:0000178C                 extrn ___CxxFrameHandler3:near
UNDEF:0000178C                                         ; CODE XREF: __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ+16j
UNDEF:0000178C                                         ; __ehhandler$?Code@CCoder@NDecoder@NImplode@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+16j ...
UNDEF:00001790 ; __fastcall __security_check_cookie(x)
UNDEF:00001790                 extrn @__security_check_cookie@4:near
UNDEF:00001790                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+B5p
UNDEF:00001790                                         ; __ehhandler$??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ+Cp ...
UNDEF:00001794                 extrn __RTC_CheckEsp:near
UNDEF:00001794                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CCoder(void)+D1p
UNDEF:00001794                                         ; NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+101p ...
UNDEF:00001798                 extrn __RTC_Shutdown:near
UNDEF:00001798                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:0000179C                 extrn __RTC_InitBase:near
UNDEF:0000179C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000017A0 ; const type_info::`vftable'
UNDEF:000017A0                 extrn ??_7type_info@@6B@:near
UNDEF:000017A0                                         ; DATA XREF: .data:NCompress::NImplode::NDecoder::CCoder `RTTI Type Descriptor'o
UNDEF:000017A0                                         ; .data:ICompressCoder `RTTI Type Descriptor'o ...
UNDEF:000017A4                 extrn _IID_ICompressSetDecoderProperties2:near
UNDEF:000017A4                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *):loc_C51o
UNDEF:000017A8 ; const IID IID_IUnknown
UNDEF:000017A8                 extrn _IID_IUnknown:near
UNDEF:000017A8                                         ; DATA XREF: NCompress::NImplode::NDecoder::CCoder::QueryInterface(_GUID const &,void * *)+1Do
UNDEF:000017AC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:000017AC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:000017B0 ; void __cdecl operator delete(void *)
UNDEF:000017B0                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::`scalar deleting destructor'(uint)+22p
UNDEF:000017B4 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:000017B4                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:000017B4                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:000017B8 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:000017B8                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:000017B8                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:000017BC                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:000017BC                                         ; .rdata:00000FF4o ...
UNDEF:000017C0 ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:000017C0                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:000017C0                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:000017C4 ; bool __thiscall NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths(NCompress::NImplode::NHuffman::CDecoder *__hidden this, const unsigned __int8 *)
UNDEF:000017C4                 extrn ?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z:near
UNDEF:000017C4                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+F7p
UNDEF:000017C8 ; __stdcall _CxxThrowException(x, x)
UNDEF:000017C8                 extrn __CxxThrowException@8:near
UNDEF:000017C8                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadLevelItems(NCompress::NImplode::NHuffman::CDecoder &,uchar *,int)+AAp
UNDEF:000017CC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000017CC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000017CC                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::ReadTables(void)+A8p
UNDEF:000017CC                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+330p ...
UNDEF:000017D0 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:000017D0                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:000017D0                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+321p
UNDEF:000017D4 ; public: unsigned int __thiscall NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol(class NBitl::CDecoder<class CInBuffer> *)
UNDEF:000017D4                 extrn ?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z:near
UNDEF:000017D4                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+19Bp
UNDEF:000017D4                                         ; NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1D7p ...
UNDEF:000017D8 ; void __thiscall CLzOutWindow::Init(CLzOutWindow *__hidden this, bool)
UNDEF:000017D8                 extrn ?Init@CLzOutWindow@@QAEX_N@Z:near
UNDEF:000017D8                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A3p
UNDEF:000017DC ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:000017DC                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:000017DC                                         ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+4Ap
UNDEF:000017E0                 extrn __aullrem:near    ; CODE XREF: NCompress::NImplode::NDecoder::CCoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+10Ap
UNDEF:000017E4 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:000017E4                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:000017E4                                         ; CODE XREF: CLzOutWindow::CopyBlock(uint,uint)+12Bp
UNDEF:000017E4                                         ; CLzOutWindow::PutByte(uchar)+4Ep
UNDEF:000017E8 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:000017E8                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:000017E8                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Create(uint)+18p
UNDEF:000017EC ; unsigned char * NBitl::kInvertTable
UNDEF:000017EC                 extrn ?kInvertTable@NBitl@@3PAEA:near
UNDEF:000017EC                                         ; DATA XREF: NBitl::CDecoder<CInBuffer>::Normalize(void)+65r
UNDEF:000017F0 ; unsigned __int8 __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this)
UNDEF:000017F0                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:near
UNDEF:000017F0                                         ; CODE XREF: CInBufferBase::ReadByte(void)+27p
UNDEF:000017F4 ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:000017F4                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:000017F4                                         ; CODE XREF: NBitl::CBaseDecoder<CInBuffer>::Init(void)+14p
UNDEF:000017F4
UNDEF:000017F4
UNDEF:000017F4                 end