.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : A6FD1D633C3719F5300F568E916DA70F
.rdata:00000000 ; Input CRC32 : D24ECF12
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\HandlerOut.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG68150[3]
.rdata:00000000 $SG68150        db 'yx',0               ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_1FAo
.rdata:00000003                 db    0
.rdata:00000004 ; char _SG68159[4]
.rdata:00000004 $SG68159        db 'crc',0              ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_27Fo
.rdata:00000008 ; char _SG68166[3]
.rdata:00000008 $SG68166        db 'mt',0               ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1E6o
.rdata:0000000B                 db    0
.rdata:0000000C ; char _SG68174[]
.rdata:0000000C $SG68174        dd offset locret_64+2   ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &):loc_3D1o
.rdata:00000010 ; char _SG68222[3]
.rdata:00000010 $SG68222        db 'mt',0               ; DATA XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_7F9o
.rdata:00000013                 align 4
.rdata:00000013 _rdata          ends
.rdata:00000013
.text:00000014 ; ===========================================================================
.text:00000014
.text:00000014 ; Segment type: Pure code
.text:00000014 ; Segment permissions: Read/Execute
.text:00000014 _text           segment para public 'CODE' use32
.text:00000014                 assume cs:_text
.text:00000014                 ;org 14h
.text:00000014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000014
.text:00000014 ; =============== S U B R O U T I N E =======================================
.text:00000014
.text:00000014 ; Attributes: bp-based frame
.text:00000014
.text:00000014 ; void __thiscall NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(NArchive::CMultiMethodProps *this, struct COneMethodInfo *, unsigned int)
.text:00000014                 public ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z
.text:00000014 ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z proc near
.text:00000014
.text:00000014 var_8           = dword ptr -8
.text:00000014 var_4           = dword ptr -4
.text:00000014 arg_0           = dword ptr  8
.text:00000014 arg_4           = dword ptr  0Ch
.text:00000014
.text:00000014                 push    ebp
.text:00000015                 mov     ebp, esp
.text:00000017                 sub     esp, 8
.text:0000001A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000021                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000028                 mov     [ebp+var_4], ecx
.text:0000002B                 mov     eax, [ebp+var_4]
.text:0000002E                 mov     ecx, [eax]
.text:00000030                 mov     [ebp+var_8], ecx
.text:00000033                 cmp     [ebp+var_8], 0FFFFFFFFh
.text:00000037                 jz      short loc_48
.text:00000039                 mov     edx, [ebp+var_8]
.text:0000003C                 push    edx             ; unsigned int
.text:0000003D                 push    0Fh             ; unsigned __int32
.text:0000003F                 mov     eax, [ebp+arg_0]
.text:00000042                 push    eax             ; CProps *
.text:00000043                 call    ?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z ; NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)
.text:00000048
.text:00000048 loc_48:                                 ; CODE XREF: NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)+23j
.text:00000048                 mov     ecx, [ebp+arg_4]
.text:0000004B                 push    ecx             ; unsigned int
.text:0000004C                 push    0Dh             ; unsigned __int32
.text:0000004E                 mov     edx, [ebp+arg_0]
.text:00000051                 push    edx             ; CProps *
.text:00000052                 call    ?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z ; NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)
.text:00000057                 add     esp, 8
.text:0000005A                 cmp     ebp, esp
.text:0000005C                 call    __RTC_CheckEsp
.text:00000061                 mov     esp, ebp
.text:00000063                 pop     ebp
.text:00000064
.text:00000064 locret_64:                              ; DATA XREF: .rdata:$SG68174o
.text:00000064                 retn    8
.text:00000064 ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z endp
.text:00000064
.text:00000064 ; ---------------------------------------------------------------------------
.text:00000067                 db 0Dh dup(0CCh)
.text:00000074
.text:00000074 ; =============== S U B R O U T I N E =======================================
.text:00000074
.text:00000074 ; Attributes: bp-based frame
.text:00000074
.text:00000074 ; int __stdcall NArchive::SetMethodProp32(CProps *, unsigned __int32, unsigned int)
.text:00000074 ?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z proc near
.text:00000074                                         ; CODE XREF: NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)+2Fp
.text:00000074                                         ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)+3Ep
.text:00000074
.text:00000074 arg_0           = dword ptr  8
.text:00000074 arg_4           = dword ptr  0Ch
.text:00000074 arg_8           = dword ptr  10h
.text:00000074
.text:00000074                 push    ebp
.text:00000075                 mov     ebp, esp
.text:00000077                 mov     eax, [ebp+arg_4]
.text:0000007A                 push    eax             ; unsigned __int32
.text:0000007B                 mov     ecx, [ebp+arg_0] ; this
.text:0000007E                 call    ?FindProp@CMethodProps@@QBEHK@Z ; CMethodProps::FindProp(ulong)
.text:00000083                 test    eax, eax
.text:00000085                 jge     short loc_97
.text:00000087                 mov     ecx, [ebp+arg_8]
.text:0000008A                 push    ecx             ; unsigned int
.text:0000008B                 mov     edx, [ebp+arg_4]
.text:0000008E                 push    edx             ; unsigned __int32
.text:0000008F                 mov     ecx, [ebp+arg_0] ; this
.text:00000092                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00000097
.text:00000097 loc_97:                                 ; CODE XREF: NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)+11j
.text:00000097                 cmp     ebp, esp
.text:00000099                 call    __RTC_CheckEsp
.text:0000009E                 pop     ebp
.text:0000009F                 retn    0Ch
.text:0000009F ?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z endp
.text:0000009F
.text:0000009F ; ---------------------------------------------------------------------------
.text:000000A2                 align 4
.text:000000A4
.text:000000A4 ; =============== S U B R O U T I N E =======================================
.text:000000A4
.text:000000A4 ; Attributes: bp-based frame
.text:000000A4
.text:000000A4 ; void __thiscall NArchive::CMultiMethodProps::Init(NArchive::CMultiMethodProps *__hidden this)
.text:000000A4                 public ?Init@CMultiMethodProps@NArchive@@QAEXXZ
.text:000000A4 ?Init@CMultiMethodProps@NArchive@@QAEXXZ proc near
.text:000000A4
.text:000000A4 var_8           = dword ptr -8
.text:000000A4 var_4           = dword ptr -4
.text:000000A4
.text:000000A4                 push    ebp
.text:000000A5                 mov     ebp, esp
.text:000000A7                 sub     esp, 8
.text:000000AA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000000B1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000B8                 mov     [ebp+var_4], ecx
.text:000000BB                 call    ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors(void)
.text:000000C0                 mov     [ebp+var_8], eax
.text:000000C3                 mov     eax, [ebp+var_4]
.text:000000C6                 mov     ecx, [ebp+var_8]
.text:000000C9                 mov     [eax+8], ecx
.text:000000CC                 mov     edx, [ebp+var_4]
.text:000000CF                 mov     eax, [ebp+var_8]
.text:000000D2                 mov     [edx+0Ch], eax
.text:000000D5                 mov     ecx, [ebp+var_4]
.text:000000D8                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:000000DE                 mov     edx, [ebp+var_4]
.text:000000E1                 mov     dword ptr [edx+4], 0FFFFFFFFh
.text:000000E8                 mov     eax, [ebp+var_4]
.text:000000EB                 mov     byte ptr [eax+44h], 1
.text:000000EF                 mov     ecx, [ebp+var_4]
.text:000000F2                 mov     dword ptr [ecx+10h], 4
.text:000000F9                 mov     ecx, [ebp+var_4]
.text:000000FC                 add     ecx, 20h ; ' '  ; this
.text:000000FF                 call    ?Clear@COneMethodInfo@@QAEXXZ ; COneMethodInfo::Clear(void)
.text:00000104                 mov     ecx, [ebp+var_4]
.text:00000107                 add     ecx, 14h
.text:0000010A                 call    ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ; CObjectVector<COneMethodInfo>::Clear(void)
.text:0000010F                 add     esp, 8
.text:00000112                 cmp     ebp, esp
.text:00000114                 call    __RTC_CheckEsp
.text:00000119                 mov     esp, ebp
.text:0000011B                 pop     ebp
.text:0000011C                 retn
.text:0000011C ?Init@CMultiMethodProps@NArchive@@QAEXXZ endp
.text:0000011C
.text:0000011C ; ---------------------------------------------------------------------------
.text:0000011D                 db 7 dup(0CCh)
.text:00000124
.text:00000124 ; =============== S U B R O U T I N E =======================================
.text:00000124
.text:00000124 ; Attributes: bp-based frame
.text:00000124
.text:00000124 ; __int32 __thiscall NArchive::CMultiMethodProps::SetProperty(NArchive::CMultiMethodProps *this, const wchar_t *, const struct tagPROPVARIANT *)
.text:00000124                 public ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text:00000124 ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z proc near
.text:00000124
.text:00000124 var_E0          = dword ptr -0E0h
.text:00000124 var_DC          = dword ptr -0DCh
.text:00000124 var_D8          = dword ptr -0D8h
.text:00000124 var_D4          = dword ptr -0D4h
.text:00000124 var_D0          = dword ptr -0D0h
.text:00000124 var_CC          = byte ptr -0CCh
.text:00000124 var_A8          = dword ptr -0A8h
.text:00000124 var_A4          = byte ptr -0A4h
.text:00000124 var_98          = dword ptr -98h
.text:00000124 var_94          = dword ptr -94h
.text:00000124 var_90          = dword ptr -90h
.text:00000124 var_8C          = dword ptr -8Ch
.text:00000124 var_88          = dword ptr -88h
.text:00000124 var_84          = byte ptr -84h
.text:00000124 var_78          = dword ptr -78h
.text:00000124 var_74          = dword ptr -74h
.text:00000124 var_70          = dword ptr -70h
.text:00000124 var_6C          = dword ptr -6Ch
.text:00000124 var_68          = dword ptr -68h
.text:00000124 var_64          = dword ptr -64h
.text:00000124 var_60          = dword ptr -60h
.text:00000124 var_5C          = dword ptr -5Ch
.text:00000124 var_54          = byte ptr -54h
.text:00000124 var_44          = dword ptr -44h
.text:00000124 var_3C          = tagPROPVARIANT ptr -3Ch
.text:00000124 var_2C          = dword ptr -2Ch
.text:00000124 var_20          = byte ptr -20h
.text:00000124 var_10          = dword ptr -10h
.text:00000124 var_C           = dword ptr -0Ch
.text:00000124 var_4           = dword ptr -4
.text:00000124 arg_0           = dword ptr  8
.text:00000124 arg_4           = dword ptr  0Ch
.text:00000124
.text:00000124                 push    ebp
.text:00000125                 mov     ebp, esp
.text:00000127                 push    0FFFFFFFFh
.text:00000129                 push    offset __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text:0000012E                 mov     eax, large fs:0
.text:00000134                 push    eax
.text:00000135                 sub     esp, 0D4h
.text:0000013B                 push    edi
.text:0000013C                 push    ecx
.text:0000013D                 lea     edi, [ebp+var_E0]
.text:00000143                 mov     ecx, 35h ; '5'
.text:00000148                 mov     eax, 0CCCCCCCCh
.text:0000014D                 rep stosd
.text:0000014F                 pop     ecx
.text:00000150                 mov     eax, dword ptr ds:___security_cookie
.text:00000155                 xor     eax, ebp
.text:00000157                 push    eax
.text:00000158                 lea     eax, [ebp+var_C]
.text:0000015B                 mov     large fs:0, eax
.text:00000161                 mov     [ebp+var_10], ecx
.text:00000164                 mov     eax, [ebp+arg_0]
.text:00000167                 push    eax
.text:00000168                 lea     ecx, [ebp+var_20]
.text:0000016B                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000170                 mov     [ebp+var_4], 0
.text:00000177                 lea     ecx, [ebp+var_20] ; this
.text:0000017A                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:0000017F                 lea     ecx, [ebp+var_20] ; this
.text:00000182                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00000187                 movzx   ecx, al
.text:0000018A                 test    ecx, ecx
.text:0000018C                 jz      short loc_1AC
.text:0000018E                 mov     [ebp+var_68], 80070057h
.text:00000195                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000019C                 lea     ecx, [ebp+var_20] ; this
.text:0000019F                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001A4                 mov     eax, [ebp+var_68]
.text:000001A7                 jmp     loc_5C5
.text:000001AC ; ---------------------------------------------------------------------------
.text:000001AC
.text:000001AC loc_1AC:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+68j
.text:000001AC                 lea     ecx, [ebp+var_20]
.text:000001AF                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000001B4                 movzx   edx, word ptr [eax]
.text:000001B7                 cmp     edx, 78h ; 'x'
.text:000001BA                 jnz     short loc_1FA
.text:000001BC                 push    0               ; unsigned int
.text:000001BE                 lea     ecx, [ebp+var_20] ; this
.text:000001C1                 call    ?Delete@UString@@QAEXI@Z ; UString::Delete(uint)
.text:000001C6                 mov     eax, [ebp+var_10]
.text:000001C9                 mov     dword ptr [eax], 9
.text:000001CF                 mov     ecx, [ebp+var_10]
.text:000001D2                 push    ecx             ; unsigned int *
.text:000001D3                 mov     edx, [ebp+arg_4]
.text:000001D6                 push    edx             ; struct tagPROPVARIANT *
.text:000001D7                 lea     eax, [ebp+var_20]
.text:000001DA                 push    eax             ; struct UString *
.text:000001DB                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:000001E0                 mov     [ebp+var_6C], eax
.text:000001E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001EA                 lea     ecx, [ebp+var_20] ; this
.text:000001ED                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000001F2                 mov     eax, [ebp+var_6C]
.text:000001F5                 jmp     loc_5C5
.text:000001FA ; ---------------------------------------------------------------------------
.text:000001FA
.text:000001FA loc_1FA:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+96j
.text:000001FA                 push    offset $SG68150 ; "yx"
.text:000001FF                 lea     ecx, [ebp+var_20] ; this
.text:00000202                 call    ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase(char const *)
.text:00000207                 movzx   ecx, al
.text:0000020A                 test    ecx, ecx
.text:0000020C                 jz      short loc_27F
.text:0000020E                 push    2               ; unsigned int
.text:00000210                 push    0               ; unsigned int
.text:00000212                 lea     ecx, [ebp+var_20] ; this
.text:00000215                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:0000021A                 mov     [ebp+var_2C], 9
.text:00000221                 lea     edx, [ebp+var_2C]
.text:00000224                 push    edx             ; unsigned int *
.text:00000225                 mov     eax, [ebp+arg_4]
.text:00000228                 push    eax             ; struct tagPROPVARIANT *
.text:00000229                 lea     ecx, [ebp+var_20]
.text:0000022C                 push    ecx             ; struct UString *
.text:0000022D                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:00000232                 mov     dword ptr [ebp+var_3C.anonymous_0+8], eax
.text:00000235                 cmp     dword ptr [ebp+var_3C.anonymous_0+8], 0
.text:00000239                 jz      short loc_258
.text:0000023B                 mov     edx, dword ptr [ebp+var_3C.anonymous_0+8]
.text:0000023E                 mov     [ebp+var_70], edx
.text:00000241                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000248                 lea     ecx, [ebp+var_20] ; this
.text:0000024B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000250                 mov     eax, [ebp+var_70]
.text:00000253                 jmp     loc_5C5
.text:00000258 ; ---------------------------------------------------------------------------
.text:00000258
.text:00000258 loc_258:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+115j
.text:00000258                 mov     eax, [ebp+var_10]
.text:0000025B                 mov     ecx, [ebp+var_2C]
.text:0000025E                 mov     [eax+4], ecx
.text:00000261                 mov     [ebp+var_74], 0
.text:00000268                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000026F                 lea     ecx, [ebp+var_20] ; this
.text:00000272                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000277                 mov     eax, [ebp+var_74]
.text:0000027A                 jmp     loc_5C5
.text:0000027F ; ---------------------------------------------------------------------------
.text:0000027F
.text:0000027F loc_27F:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+E8j
.text:0000027F                 push    offset $SG68159 ; "crc"
.text:00000284                 lea     ecx, [ebp+var_20] ; this
.text:00000287                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:0000028C                 movzx   edx, al
.text:0000028F                 test    edx, edx
.text:00000291                 jz      short loc_2D7
.text:00000293                 push    3               ; unsigned int
.text:00000295                 push    0               ; unsigned int
.text:00000297                 lea     ecx, [ebp+var_20] ; this
.text:0000029A                 call    ?Delete@UString@@QAEXII@Z ; UString::Delete(uint,uint)
.text:0000029F                 mov     eax, [ebp+var_10]
.text:000002A2                 mov     dword ptr [eax+10h], 4
.text:000002A9                 mov     ecx, [ebp+var_10]
.text:000002AC                 add     ecx, 10h
.text:000002AF                 push    ecx             ; unsigned int *
.text:000002B0                 mov     edx, [ebp+arg_4]
.text:000002B3                 push    edx             ; struct tagPROPVARIANT *
.text:000002B4                 lea     eax, [ebp+var_20]
.text:000002B7                 push    eax             ; struct UString *
.text:000002B8                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:000002BD                 mov     [ebp+var_78], eax
.text:000002C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002C7                 lea     ecx, [ebp+var_20] ; this
.text:000002CA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002CF                 mov     eax, [ebp+var_78]
.text:000002D2                 jmp     loc_5C5
.text:000002D7 ; ---------------------------------------------------------------------------
.text:000002D7
.text:000002D7 loc_2D7:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+16Dj
.text:000002D7                 lea     ecx, [ebp+var_3C]
.text:000002DA                 push    ecx             ; unsigned int *
.text:000002DB                 lea     edx, [ebp+var_20]
.text:000002DE                 push    edx             ; struct UString *
.text:000002DF                 call    ?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32(UString const &,uint &)
.text:000002E4                 mov     [ebp+var_44], eax
.text:000002E7                 mov     eax, [ebp+var_44]
.text:000002EA                 push    eax             ; unsigned int
.text:000002EB                 lea     ecx, [ebp+var_20] ; this
.text:000002EE                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:000002F3                 push    eax
.text:000002F4                 lea     ecx, [ebp+var_54]
.text:000002F7                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:000002FC                 mov     byte ptr [ebp+var_4], 1
.text:00000300                 cmp     [ebp+var_44], 0
.text:00000304                 jnz     loc_4E5
.text:0000030A                 push    offset $SG68166 ; "mt"
.text:0000030F                 lea     ecx, [ebp+var_20] ; this
.text:00000312                 call    ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase(char const *)
.text:00000317                 movzx   ecx, al
.text:0000031A                 test    ecx, ecx
.text:0000031C                 jz      loc_3D1
.text:00000322                 push    2               ; unsigned int
.text:00000324                 lea     ecx, [ebp+var_20] ; this
.text:00000327                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000032C                 push    eax
.text:0000032D                 lea     ecx, [ebp+var_84]
.text:00000333                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000338                 mov     byte ptr [ebp+var_4], 2
.text:0000033C                 mov     edx, [ebp+var_10]
.text:0000033F                 add     edx, 8
.text:00000342                 push    edx             ; unsigned int *
.text:00000343                 mov     eax, [ebp+var_10]
.text:00000346                 mov     ecx, [eax+0Ch]
.text:00000349                 push    ecx             ; unsigned int
.text:0000034A                 mov     edx, [ebp+arg_4]
.text:0000034D                 push    edx             ; struct tagPROPVARIANT *
.text:0000034E                 lea     eax, [ebp+var_84]
.text:00000354                 push    eax             ; struct UString *
.text:00000355                 call    ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)
.text:0000035A                 mov     [ebp+var_5C], eax
.text:0000035D                 mov     byte ptr [ebp+var_4], 1
.text:00000361                 lea     ecx, [ebp+var_84] ; this
.text:00000367                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000036C                 cmp     [ebp+var_5C], 0
.text:00000370                 jz      short loc_3A1
.text:00000372                 mov     ecx, [ebp+var_5C]
.text:00000375                 mov     [ebp+var_88], ecx
.text:0000037B                 mov     byte ptr [ebp+var_4], 0
.text:0000037F                 lea     ecx, [ebp+var_54] ; this
.text:00000382                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000387                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000038E                 lea     ecx, [ebp+var_20] ; this
.text:00000391                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000396                 mov     eax, [ebp+var_88]
.text:0000039C                 jmp     loc_5C5
.text:000003A1 ; ---------------------------------------------------------------------------
.text:000003A1
.text:000003A1 loc_3A1:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+24Cj
.text:000003A1                 mov     [ebp+var_8C], 0
.text:000003AB                 mov     byte ptr [ebp+var_4], 0
.text:000003AF                 lea     ecx, [ebp+var_54] ; this
.text:000003B2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000003B7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003BE                 lea     ecx, [ebp+var_20] ; this
.text:000003C1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000003C6                 mov     eax, [ebp+var_8C]
.text:000003CC                 jmp     loc_5C5
.text:000003D1 ; ---------------------------------------------------------------------------
.text:000003D1
.text:000003D1 loc_3D1:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1F8j
.text:000003D1                 push    offset $SG68174 ; char *
.text:000003D6                 lea     ecx, [ebp+var_20] ; this
.text:000003D9                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:000003DE                 movzx   edx, al
.text:000003E1                 test    edx, edx
.text:000003E3                 jz      loc_4DE
.text:000003E9                 mov     eax, [ebp+var_10]
.text:000003EC                 add     eax, 44h ; 'D'
.text:000003EF                 push    eax             ; bool *
.text:000003F0                 mov     ecx, [ebp+arg_4]
.text:000003F3                 push    ecx             ; struct tagPROPVARIANT *
.text:000003F4                 call    ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool(tagPROPVARIANT const &,bool &)
.text:000003F9                 mov     [ebp+var_60], eax
.text:000003FC                 cmp     [ebp+var_60], 0
.text:00000400                 jnz     short loc_431
.text:00000402                 mov     edx, [ebp+var_60]
.text:00000405                 mov     [ebp+var_90], edx
.text:0000040B                 mov     byte ptr [ebp+var_4], 0
.text:0000040F                 lea     ecx, [ebp+var_54] ; this
.text:00000412                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000417                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000041E                 lea     ecx, [ebp+var_20] ; this
.text:00000421                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000426                 mov     eax, [ebp+var_90]
.text:0000042C                 jmp     loc_5C5
.text:00000431 ; ---------------------------------------------------------------------------
.text:00000431
.text:00000431 loc_431:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2DCj
.text:00000431                 mov     eax, [ebp+arg_4]
.text:00000434                 movzx   ecx, word ptr [eax]
.text:00000437                 cmp     ecx, 8
.text:0000043A                 jz      short loc_46C
.text:0000043C                 mov     [ebp+var_94], 80070057h
.text:00000446                 mov     byte ptr [ebp+var_4], 0
.text:0000044A                 lea     ecx, [ebp+var_54] ; this
.text:0000044D                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000452                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000459                 lea     ecx, [ebp+var_20] ; this
.text:0000045C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000461                 mov     eax, [ebp+var_94]
.text:00000467                 jmp     loc_5C5
.text:0000046C ; ---------------------------------------------------------------------------
.text:0000046C
.text:0000046C loc_46C:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+316j
.text:0000046C                 mov     edx, [ebp+arg_4]
.text:0000046F                 push    edx             ; struct tagPROPVARIANT *
.text:00000470                 lea     ecx, [ebp+var_A4]
.text:00000476                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:0000047B                 mov     [ebp+var_D4], eax
.text:00000481                 mov     eax, [ebp+var_D4]
.text:00000487                 mov     [ebp+var_D8], eax
.text:0000048D                 mov     byte ptr [ebp+var_4], 3
.text:00000491                 mov     ecx, [ebp+var_D8]
.text:00000497                 push    ecx             ; struct UString *
.text:00000498                 mov     ecx, [ebp+var_10]
.text:0000049B                 add     ecx, 20h ; ' '  ; this
.text:0000049E                 call    ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)
.text:000004A3                 mov     [ebp+var_98], eax
.text:000004A9                 mov     byte ptr [ebp+var_4], 1
.text:000004AD                 lea     ecx, [ebp+var_A4] ; this
.text:000004B3                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000004B8                 mov     byte ptr [ebp+var_4], 0
.text:000004BC                 lea     ecx, [ebp+var_54] ; this
.text:000004BF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000004C4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000004CB                 lea     ecx, [ebp+var_20] ; this
.text:000004CE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000004D3                 mov     eax, [ebp+var_98]
.text:000004D9                 jmp     loc_5C5
.text:000004DE ; ---------------------------------------------------------------------------
.text:000004DE
.text:000004DE loc_4DE:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2BFj
.text:000004DE                 mov     dword ptr [ebp+var_3C.anonymous_0], 0
.text:000004E5
.text:000004E5 loc_4E5:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1E0j
.text:000004E5                 cmp     dword ptr [ebp+var_3C.anonymous_0], 40h ; '@'
.text:000004E9                 jbe     short loc_51B
.text:000004EB                 mov     [ebp+var_A8], 80004005h
.text:000004F5                 mov     byte ptr [ebp+var_4], 0
.text:000004F9                 lea     ecx, [ebp+var_54] ; this
.text:000004FC                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000501                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000508                 lea     ecx, [ebp+var_20] ; this
.text:0000050B                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000510                 mov     eax, [ebp+var_A8]
.text:00000516                 jmp     loc_5C5
.text:0000051B ; ---------------------------------------------------------------------------
.text:0000051B
.text:0000051B loc_51B:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+3C5j
.text:0000051B                 mov     ecx, [ebp+var_10]
.text:0000051E                 add     ecx, 14h
.text:00000521                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00000526                 mov     [ebp+var_64], eax
.text:00000529                 jmp     short loc_534
.text:0000052B ; ---------------------------------------------------------------------------
.text:0000052B
.text:0000052B loc_52B:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+45Aj
.text:0000052B                 mov     edx, [ebp+var_64]
.text:0000052E                 add     edx, 1
.text:00000531                 mov     [ebp+var_64], edx
.text:00000534
.text:00000534 loc_534:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+405j
.text:00000534                 mov     eax, [ebp+var_64]
.text:00000537                 cmp     eax, dword ptr [ebp+var_3C.anonymous_0]
.text:0000053A                 jg      short loc_580
.text:0000053C                 lea     ecx, [ebp+var_CC]
.text:00000542                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00000547                 mov     [ebp+var_DC], eax
.text:0000054D                 mov     ecx, [ebp+var_DC]
.text:00000553                 mov     [ebp+var_E0], ecx
.text:00000559                 mov     byte ptr [ebp+var_4], 4
.text:0000055D                 mov     edx, [ebp+var_E0]
.text:00000563                 push    edx
.text:00000564                 mov     ecx, [ebp+var_10]
.text:00000567                 add     ecx, 14h
.text:0000056A                 call    ?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)
.text:0000056F                 mov     byte ptr [ebp+var_4], 1
.text:00000573                 lea     ecx, [ebp+var_CC] ; this
.text:00000579                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:0000057E                 jmp     short loc_52B
.text:00000580 ; ---------------------------------------------------------------------------
.text:00000580
.text:00000580 loc_580:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+416j
.text:00000580                 mov     eax, [ebp+arg_4]
.text:00000583                 push    eax             ; struct tagPROPVARIANT *
.text:00000584                 lea     ecx, [ebp+var_54]
.text:00000587                 push    ecx             ; struct UString *
.text:00000588                 mov     edx, dword ptr [ebp+var_3C.anonymous_0]
.text:0000058B                 push    edx
.text:0000058C                 mov     ecx, [ebp+var_10]
.text:0000058F                 add     ecx, 14h
.text:00000592                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:00000597                 mov     ecx, eax        ; this
.text:00000599                 call    ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)
.text:0000059E                 mov     [ebp+var_D0], eax
.text:000005A4                 mov     byte ptr [ebp+var_4], 0
.text:000005A8                 lea     ecx, [ebp+var_54] ; this
.text:000005AB                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000005B0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005B7                 lea     ecx, [ebp+var_20] ; this
.text:000005BA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000005BF                 mov     eax, [ebp+var_D0]
.text:000005C5
.text:000005C5 loc_5C5:                                ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+83j
.text:000005C5                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+D1j ...
.text:000005C5                 push    edx
.text:000005C6                 mov     ecx, ebp
.text:000005C8                 push    eax
.text:000005C9                 lea     edx, $LN29
.text:000005CF                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000005D4                 pop     eax
.text:000005D5                 pop     edx
.text:000005D6                 mov     ecx, [ebp+var_C]
.text:000005D9                 mov     large fs:0, ecx
.text:000005E0                 pop     ecx
.text:000005E1                 pop     edi
.text:000005E2                 add     esp, 0E0h
.text:000005E8                 cmp     ebp, esp
.text:000005EA                 call    __RTC_CheckEsp
.text:000005EF                 mov     esp, ebp
.text:000005F1                 pop     ebp
.text:000005F2                 retn    8
.text:000005F2 ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z endp
.text:000005F2
.text:000005F2 ; ---------------------------------------------------------------------------
.text:000005F5                 align 4
.text:000005F8 $LN29           dd 4                    ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+4A5o
.text:000005FC                 dd offset $LN28
.text:00000600 $LN28           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000005FCo
.text:00000608                 dd offset $LN23         ; "name"
.text:0000060C                 dd 0FFFFFFD4h, 4
.text:00000614                 dd offset $LN24         ; "v"
.text:00000618                 dd 0FFFFFFC4h, 4
.text:00000620                 dd offset $LN25         ; "number"
.text:00000624                 dd 0FFFFFFACh, 0Ch
.text:0000062C                 dd offset $LN26         ; "realName"
.text:00000630 $LN26           db 'realName',0         ; DATA XREF: .text:0000062Co
.text:00000639 $LN25           db 'number',0           ; DATA XREF: .text:00000620o
.text:00000640 $LN24           db 'v',0                ; DATA XREF: .text:00000614o
.text:00000642 $LN23           db 'name',0             ; DATA XREF: .text:00000608o
.text:00000647                 db 0Dh dup(0CCh)
.text:00000654
.text:00000654 ; =============== S U B R O U T I N E =======================================
.text:00000654
.text:00000654 ; Attributes: bp-based frame
.text:00000654
.text:00000654 ; void __thiscall NArchive::CSingleMethodProps::Init(NArchive::CSingleMethodProps *__hidden this)
.text:00000654                 public ?Init@CSingleMethodProps@NArchive@@QAEXXZ
.text:00000654 ?Init@CSingleMethodProps@NArchive@@QAEXXZ proc near
.text:00000654                                         ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+3Dp
.text:00000654
.text:00000654 var_8           = dword ptr -8
.text:00000654 var_4           = dword ptr -4
.text:00000654
.text:00000654                 push    ebp
.text:00000655                 mov     ebp, esp
.text:00000657                 sub     esp, 8
.text:0000065A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000661                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000668                 mov     [ebp+var_4], ecx
.text:0000066B                 mov     ecx, [ebp+var_4] ; this
.text:0000066E                 call    ?Clear@COneMethodInfo@@QAEXXZ ; COneMethodInfo::Clear(void)
.text:00000673                 mov     eax, [ebp+var_4]
.text:00000676                 mov     dword ptr [eax+24h], 0FFFFFFFFh
.text:0000067D                 call    ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors(void)
.text:00000682                 mov     [ebp+var_8], eax
.text:00000685                 mov     ecx, [ebp+var_4]
.text:00000688                 mov     edx, [ebp+var_8]
.text:0000068B                 mov     [ecx+28h], edx
.text:0000068E                 mov     eax, [ebp+var_4]
.text:00000691                 mov     ecx, [ebp+var_8]
.text:00000694                 mov     [eax+2Ch], ecx
.text:00000697                 mov     edx, [ebp+var_4]
.text:0000069A                 mov     eax, [edx+28h]
.text:0000069D                 push    eax             ; unsigned int
.text:0000069E                 mov     ecx, [ebp+var_4] ; this
.text:000006A1                 call    ?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads(uint)
.text:000006A6                 add     esp, 8
.text:000006A9                 cmp     ebp, esp
.text:000006AB                 call    __RTC_CheckEsp
.text:000006B0                 mov     esp, ebp
.text:000006B2                 pop     ebp
.text:000006B3                 retn
.text:000006B3 ?Init@CSingleMethodProps@NArchive@@QAEXXZ endp
.text:000006B3
.text:000006B4
.text:000006B4 ; =============== S U B R O U T I N E =======================================
.text:000006B4
.text:000006B4 ; Attributes: bp-based frame
.text:000006B4
.text:000006B4 ; __int32 __thiscall NArchive::CSingleMethodProps::SetProperties(NArchive::CSingleMethodProps *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:000006B4                 public ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:000006B4 ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:000006B4
.text:000006B4 var_74          = byte ptr -74h
.text:000006B4 var_68          = dword ptr -68h
.text:000006B4 var_64          = dword ptr -64h
.text:000006B4 var_60          = byte ptr -60h
.text:000006B4 var_54          = dword ptr -54h
.text:000006B4 var_50          = byte ptr -50h
.text:000006B4 var_44          = dword ptr -44h
.text:000006B4 var_40          = dword ptr -40h
.text:000006B4 var_3C          = dword ptr -3Ch
.text:000006B4 var_34          = dword ptr -34h
.text:000006B4 var_2C          = dword ptr -2Ch
.text:000006B4 var_24          = byte ptr -24h
.text:000006B4 var_14          = dword ptr -14h
.text:000006B4 var_10          = dword ptr -10h
.text:000006B4 var_C           = dword ptr -0Ch
.text:000006B4 var_4           = dword ptr -4
.text:000006B4 arg_0           = dword ptr  8
.text:000006B4 arg_4           = dword ptr  0Ch
.text:000006B4 arg_8           = dword ptr  10h
.text:000006B4
.text:000006B4                 push    ebp
.text:000006B5                 mov     ebp, esp
.text:000006B7                 push    0FFFFFFFFh
.text:000006B9                 push    offset __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:000006BE                 mov     eax, large fs:0
.text:000006C4                 push    eax
.text:000006C5                 sub     esp, 68h
.text:000006C8                 push    edi
.text:000006C9                 push    ecx
.text:000006CA                 lea     edi, [ebp+var_74]
.text:000006CD                 mov     ecx, 1Ah
.text:000006D2                 mov     eax, 0CCCCCCCCh
.text:000006D7                 rep stosd
.text:000006D9                 pop     ecx
.text:000006DA                 mov     eax, dword ptr ds:___security_cookie
.text:000006DF                 xor     eax, ebp
.text:000006E1                 push    eax
.text:000006E2                 lea     eax, [ebp+var_C]
.text:000006E5                 mov     large fs:0, eax
.text:000006EB                 mov     [ebp+var_10], ecx
.text:000006EE                 mov     ecx, [ebp+var_10] ; this
.text:000006F1                 call    ?Init@CSingleMethodProps@NArchive@@QAEXXZ ; NArchive::CSingleMethodProps::Init(void)
.text:000006F6                 mov     [ebp+var_14], 0
.text:000006FD                 jmp     short loc_708
.text:000006FF ; ---------------------------------------------------------------------------
.text:000006FF
.text:000006FF loc_6FF:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+223j
.text:000006FF                 mov     eax, [ebp+var_14]
.text:00000702                 add     eax, 1
.text:00000705                 mov     [ebp+var_14], eax
.text:00000708
.text:00000708 loc_708:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+49j
.text:00000708                 mov     ecx, [ebp+var_14]
.text:0000070B                 cmp     ecx, [ebp+arg_8]
.text:0000070E                 jnb     loc_8DC
.text:00000714                 mov     edx, [ebp+var_14]
.text:00000717                 mov     eax, [ebp+arg_0]
.text:0000071A                 mov     ecx, [eax+edx*4]
.text:0000071D                 push    ecx
.text:0000071E                 lea     ecx, [ebp+var_24]
.text:00000721                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000726                 mov     [ebp+var_4], 0
.text:0000072D                 lea     ecx, [ebp+var_24] ; this
.text:00000730                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00000735                 lea     ecx, [ebp+var_24] ; this
.text:00000738                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:0000073D                 movzx   edx, al
.text:00000740                 test    edx, edx
.text:00000742                 jz      short loc_762
.text:00000744                 mov     [ebp+var_44], 80070057h
.text:0000074B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000752                 lea     ecx, [ebp+var_24] ; this
.text:00000755                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000075A                 mov     eax, [ebp+var_44]
.text:0000075D                 jmp     loc_8DE
.text:00000762 ; ---------------------------------------------------------------------------
.text:00000762
.text:00000762 loc_762:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+8Ej
.text:00000762                 mov     eax, [ebp+var_14]
.text:00000765                 shl     eax, 4
.text:00000768                 add     eax, [ebp+arg_4]
.text:0000076B                 mov     [ebp+var_2C], eax
.text:0000076E                 lea     ecx, [ebp+var_24]
.text:00000771                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000776                 movzx   ecx, word ptr [eax]
.text:00000779                 cmp     ecx, 78h ; 'x'
.text:0000077C                 jnz     short loc_7F9
.text:0000077E                 mov     [ebp+var_34], 9
.text:00000785                 push    1               ; unsigned int
.text:00000787                 lea     ecx, [ebp+var_24] ; this
.text:0000078A                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:0000078F                 push    eax
.text:00000790                 lea     ecx, [ebp+var_50]
.text:00000793                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000798                 mov     byte ptr [ebp+var_4], 1
.text:0000079C                 lea     edx, [ebp+var_34]
.text:0000079F                 push    edx             ; unsigned int *
.text:000007A0                 mov     eax, [ebp+var_2C]
.text:000007A3                 push    eax             ; struct tagPROPVARIANT *
.text:000007A4                 lea     ecx, [ebp+var_50]
.text:000007A7                 push    ecx             ; struct UString *
.text:000007A8                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:000007AD                 mov     [ebp+var_3C], eax
.text:000007B0                 mov     byte ptr [ebp+var_4], 0
.text:000007B4                 lea     ecx, [ebp+var_50] ; this
.text:000007B7                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000007BC                 cmp     [ebp+var_3C], 0
.text:000007C0                 jz      short loc_7DF
.text:000007C2                 mov     edx, [ebp+var_3C]
.text:000007C5                 mov     [ebp+var_54], edx
.text:000007C8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007CF                 lea     ecx, [ebp+var_24] ; this
.text:000007D2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000007D7                 mov     eax, [ebp+var_54]
.text:000007DA                 jmp     loc_8DE
.text:000007DF ; ---------------------------------------------------------------------------
.text:000007DF
.text:000007DF loc_7DF:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+10Cj
.text:000007DF                 mov     eax, [ebp+var_10]
.text:000007E2                 mov     ecx, [ebp+var_34]
.text:000007E5                 mov     [eax+24h], ecx
.text:000007E8                 mov     edx, [ebp+var_34]
.text:000007EB                 push    edx             ; unsigned int
.text:000007EC                 mov     ecx, [ebp+var_10] ; this
.text:000007EF                 call    ?AddProp_Level@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_Level(uint)
.text:000007F4                 jmp     loc_8C8
.text:000007F9 ; ---------------------------------------------------------------------------
.text:000007F9
.text:000007F9 loc_7F9:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+C8j
.text:000007F9                 push    offset $SG68222 ; "mt"
.text:000007FE                 lea     ecx, [ebp+var_24] ; this
.text:00000801                 call    ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase(char const *)
.text:00000806                 movzx   eax, al
.text:00000809                 test    eax, eax
.text:0000080B                 jz      short loc_87F
.text:0000080D                 push    2               ; unsigned int
.text:0000080F                 lea     ecx, [ebp+var_24] ; this
.text:00000812                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00000817                 push    eax
.text:00000818                 lea     ecx, [ebp+var_60]
.text:0000081B                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000820                 mov     byte ptr [ebp+var_4], 2
.text:00000824                 mov     ecx, [ebp+var_10]
.text:00000827                 add     ecx, 28h ; '('
.text:0000082A                 push    ecx             ; unsigned int *
.text:0000082B                 mov     edx, [ebp+var_10]
.text:0000082E                 mov     eax, [edx+2Ch]
.text:00000831                 push    eax             ; unsigned int
.text:00000832                 mov     ecx, [ebp+var_2C]
.text:00000835                 push    ecx             ; struct tagPROPVARIANT *
.text:00000836                 lea     edx, [ebp+var_60]
.text:00000839                 push    edx             ; struct UString *
.text:0000083A                 call    ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp(UString const &,tagPROPVARIANT const &,uint,uint &)
.text:0000083F                 mov     [ebp+var_40], eax
.text:00000842                 mov     byte ptr [ebp+var_4], 0
.text:00000846                 lea     ecx, [ebp+var_60] ; this
.text:00000849                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000084E                 cmp     [ebp+var_40], 0
.text:00000852                 jz      short loc_86E
.text:00000854                 mov     eax, [ebp+var_40]
.text:00000857                 mov     [ebp+var_64], eax
.text:0000085A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000861                 lea     ecx, [ebp+var_24] ; this
.text:00000864                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000869                 mov     eax, [ebp+var_64]
.text:0000086C                 jmp     short loc_8DE
.text:0000086E ; ---------------------------------------------------------------------------
.text:0000086E
.text:0000086E loc_86E:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+19Ej
.text:0000086E                 mov     ecx, [ebp+var_10]
.text:00000871                 mov     edx, [ecx+28h]
.text:00000874                 push    edx             ; unsigned int
.text:00000875                 mov     ecx, [ebp+var_10] ; this
.text:00000878                 call    ?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads(uint)
.text:0000087D                 jmp     short loc_8C8
.text:0000087F ; ---------------------------------------------------------------------------
.text:0000087F
.text:0000087F loc_87F:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+157j
.text:0000087F                 mov     eax, [ebp+var_14]
.text:00000882                 mov     ecx, [ebp+arg_0]
.text:00000885                 mov     edx, [ecx+eax*4]
.text:00000888                 push    edx
.text:00000889                 lea     ecx, [ebp+var_74]
.text:0000088C                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00000891                 mov     byte ptr [ebp+var_4], 3
.text:00000895                 mov     eax, [ebp+var_2C]
.text:00000898                 push    eax             ; struct tagPROPVARIANT *
.text:00000899                 lea     ecx, [ebp+var_74]
.text:0000089C                 push    ecx             ; struct UString *
.text:0000089D                 mov     ecx, [ebp+var_10] ; this
.text:000008A0                 call    ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT(UString const &,tagPROPVARIANT const &)
.text:000008A5                 mov     [ebp+var_68], eax
.text:000008A8                 mov     byte ptr [ebp+var_4], 0
.text:000008AC                 lea     ecx, [ebp+var_74] ; this
.text:000008AF                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000008B4                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008BB                 lea     ecx, [ebp+var_24] ; this
.text:000008BE                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000008C3                 mov     eax, [ebp+var_68]
.text:000008C6                 jmp     short loc_8DE
.text:000008C8 ; ---------------------------------------------------------------------------
.text:000008C8
.text:000008C8 loc_8C8:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+140j
.text:000008C8                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1C9j
.text:000008C8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008CF                 lea     ecx, [ebp+var_24] ; this
.text:000008D2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000008D7                 jmp     loc_6FF
.text:000008DC ; ---------------------------------------------------------------------------
.text:000008DC
.text:000008DC loc_8DC:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5Aj
.text:000008DC                 xor     eax, eax
.text:000008DE
.text:000008DE loc_8DE:                                ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+A9j
.text:000008DE                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+126j ...
.text:000008DE                 push    edx
.text:000008DF                 mov     ecx, ebp
.text:000008E1                 push    eax
.text:000008E2                 lea     edx, $LN21
.text:000008E8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000008ED                 pop     eax
.text:000008EE                 pop     edx
.text:000008EF                 mov     ecx, [ebp+var_C]
.text:000008F2                 mov     large fs:0, ecx
.text:000008F9                 pop     ecx
.text:000008FA                 pop     edi
.text:000008FB                 add     esp, 74h
.text:000008FE                 cmp     ebp, esp
.text:00000900                 call    __RTC_CheckEsp
.text:00000905                 mov     esp, ebp
.text:00000907                 pop     ebp
.text:00000908                 retn    0Ch
.text:00000908 ?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00000908
.text:00000908 ; ---------------------------------------------------------------------------
.text:0000090B                 align 4
.text:0000090C $LN21           dd 2                    ; DATA XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+22Eo
.text:00000910                 dd offset $LN20
.text:00000914 $LN20           dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:00000910o
.text:0000091C                 dd offset $LN17         ; "name"
.text:00000920                 db 0CCh
.text:00000921                 db 3 dup(0FFh)
.text:00000924                 dd 4
.text:00000928                 dd offset $LN18
.text:0000092C $LN18           db 61h, 0               ; DATA XREF: .text:00000928o
.text:0000092E $LN17           db 'name',0             ; DATA XREF: .text:0000091Co
.text:00000933                 align 4
.text:00000933 _text           ends
.text:00000933
.rtc$TMZ:00000934 ; ===========================================================================
.rtc$TMZ:00000934
.rtc$TMZ:00000934 ; Segment type: Pure data
.rtc$TMZ:00000934 ; Segment permissions: Read
.rtc$TMZ:00000934 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000934                 assume cs:_rtc$TMZ
.rtc$TMZ:00000934                 ;org 934h
.rtc$TMZ:00000934 ; COMDAT (pick any)
.rtc$TMZ:00000934 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000934 _rtc$TMZ        ends
.rtc$TMZ:00000934
.rtc$IMZ:00000938 ; ===========================================================================
.rtc$IMZ:00000938
.rtc$IMZ:00000938 ; Segment type: Pure data
.rtc$IMZ:00000938 ; Segment permissions: Read
.rtc$IMZ:00000938 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000938                 assume cs:_rtc$IMZ
.rtc$IMZ:00000938                 ;org 938h
.rtc$IMZ:00000938 ; COMDAT (pick any)
.rtc$IMZ:00000938 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000938 _rtc$IMZ        ends
.rtc$IMZ:00000938
.text:0000093C ; ===========================================================================
.text:0000093C
.text:0000093C ; Segment type: Pure code
.text:0000093C ; Segment permissions: Read/Execute
.text:0000093C _text           segment para public 'CODE' use32
.text:0000093C                 assume cs:_text
.text:0000093C                 ;org 93Ch
.text:0000093C ; COMDAT (pick any)
.text:0000093C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000093C
.text:0000093C ; =============== S U B R O U T I N E =======================================
.text:0000093C
.text:0000093C ; Attributes: bp-based frame
.text:0000093C
.text:0000093C ; void __thiscall COneMethodInfo::Clear(COneMethodInfo *__hidden this)
.text:0000093C                 public ?Clear@COneMethodInfo@@QAEXXZ
.text:0000093C ?Clear@COneMethodInfo@@QAEXXZ proc near ; CODE XREF: NArchive::CMultiMethodProps::Init(void)+5Bp
.text:0000093C                                         ; NArchive::CSingleMethodProps::Init(void)+1Ap
.text:0000093C
.text:0000093C var_4           = dword ptr -4
.text:0000093C
.text:0000093C                 push    ebp
.text:0000093D                 mov     ebp, esp
.text:0000093F                 push    ecx
.text:00000940                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000947                 mov     [ebp+var_4], ecx
.text:0000094A                 mov     ecx, [ebp+var_4] ; this
.text:0000094D                 call    ?Clear@CProps@@QAEXXZ ; CProps::Clear(void)
.text:00000952                 mov     ecx, [ebp+var_4]
.text:00000955                 add     ecx, 0Ch        ; this
.text:00000958                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000095D                 mov     ecx, [ebp+var_4]
.text:00000960                 add     ecx, 18h        ; this
.text:00000963                 call    ?Empty@UString@@QAEXXZ ; UString::Empty(void)
.text:00000968                 add     esp, 4
.text:0000096B                 cmp     ebp, esp
.text:0000096D                 call    __RTC_CheckEsp
.text:00000972                 mov     esp, ebp
.text:00000974                 pop     ebp
.text:00000975                 retn
.text:00000975 ?Clear@COneMethodInfo@@QAEXXZ endp
.text:00000975
.text:00000975 ; ---------------------------------------------------------------------------
.text:00000976                 align 4
.text:00000976 _text           ends
.text:00000976
.text:00000978 ; ===========================================================================
.text:00000978
.text:00000978 ; Segment type: Pure code
.text:00000978 ; Segment permissions: Read/Execute
.text:00000978 _text           segment para public 'CODE' use32
.text:00000978                 assume cs:_text
.text:00000978                 ;org 978h
.text:00000978 ; COMDAT (pick any)
.text:00000978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000978
.text:00000978 ; =============== S U B R O U T I N E =======================================
.text:00000978
.text:00000978 ; Attributes: bp-based frame
.text:00000978
.text:00000978 ; void __thiscall AString::Empty(AString *__hidden this)
.text:00000978                 public ?Empty@AString@@QAEXXZ
.text:00000978 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: COneMethodInfo::Clear(void)+1Cp
.text:00000978
.text:00000978 var_4           = dword ptr -4
.text:00000978
.text:00000978                 push    ebp
.text:00000979                 mov     ebp, esp
.text:0000097B                 push    ecx
.text:0000097C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000983                 mov     [ebp+var_4], ecx
.text:00000986                 mov     eax, [ebp+var_4]
.text:00000989                 mov     dword ptr [eax+4], 0
.text:00000990                 mov     ecx, [ebp+var_4]
.text:00000993                 mov     edx, [ecx]
.text:00000995                 mov     byte ptr [edx], 0
.text:00000998                 mov     esp, ebp
.text:0000099A                 pop     ebp
.text:0000099B                 retn
.text:0000099B ?Empty@AString@@QAEXXZ endp
.text:0000099B
.text:0000099B _text           ends
.text:0000099B
.text:0000099C ; ===========================================================================
.text:0000099C
.text:0000099C ; Segment type: Pure code
.text:0000099C ; Segment permissions: Read/Execute
.text:0000099C _text           segment para public 'CODE' use32
.text:0000099C                 assume cs:_text
.text:0000099C                 ;org 99Ch
.text:0000099C ; COMDAT (pick any)
.text:0000099C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000099C
.text:0000099C ; =============== S U B R O U T I N E =======================================
.text:0000099C
.text:0000099C ; Attributes: bp-based frame
.text:0000099C
.text:0000099C ; void __thiscall UString::Empty(UString *__hidden this)
.text:0000099C                 public ?Empty@UString@@QAEXXZ
.text:0000099C ?Empty@UString@@QAEXXZ proc near        ; CODE XREF: COneMethodInfo::Clear(void)+27p
.text:0000099C
.text:0000099C var_4           = dword ptr -4
.text:0000099C
.text:0000099C                 push    ebp
.text:0000099D                 mov     ebp, esp
.text:0000099F                 push    ecx
.text:000009A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009A7                 mov     [ebp+var_4], ecx
.text:000009AA                 mov     eax, [ebp+var_4]
.text:000009AD                 mov     dword ptr [eax+4], 0
.text:000009B4                 mov     ecx, [ebp+var_4]
.text:000009B7                 mov     edx, [ecx]
.text:000009B9                 xor     eax, eax
.text:000009BB                 mov     [edx], ax
.text:000009BE                 mov     esp, ebp
.text:000009C0                 pop     ebp
.text:000009C1                 retn
.text:000009C1 ?Empty@UString@@QAEXXZ endp
.text:000009C1
.text:000009C1 ; ---------------------------------------------------------------------------
.text:000009C2                 align 4
.text:000009C2 _text           ends
.text:000009C2
.text:000009C4 ; ===========================================================================
.text:000009C4
.text:000009C4 ; Segment type: Pure code
.text:000009C4 ; Segment permissions: Read/Execute
.text:000009C4 _text           segment para public 'CODE' use32
.text:000009C4                 assume cs:_text
.text:000009C4                 ;org 9C4h
.text:000009C4 ; COMDAT (pick any)
.text:000009C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4 ; void __thiscall CProps::Clear(CProps *__hidden this)
.text:000009C4                 public ?Clear@CProps@@QAEXXZ
.text:000009C4 ?Clear@CProps@@QAEXXZ proc near         ; CODE XREF: COneMethodInfo::Clear(void)+11p
.text:000009C4
.text:000009C4 var_4           = dword ptr -4
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 push    ecx
.text:000009C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CF                 mov     [ebp+var_4], ecx
.text:000009D2                 mov     ecx, [ebp+var_4]
.text:000009D5                 call    ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ; CObjectVector<CProp>::Clear(void)
.text:000009DA                 add     esp, 4
.text:000009DD                 cmp     ebp, esp
.text:000009DF                 call    __RTC_CheckEsp
.text:000009E4                 mov     esp, ebp
.text:000009E6                 pop     ebp
.text:000009E7                 retn
.text:000009E7 ?Clear@CProps@@QAEXXZ endp
.text:000009E7
.text:000009E7 _text           ends
.text:000009E7
.text$x:000009E8 ; ===========================================================================
.text$x:000009E8
.text$x:000009E8 ; Segment type: Pure code
.text$x:000009E8 ; Segment permissions: Read/Execute
.text$x:000009E8 _text$x         segment para public 'CODE' use32
.text$x:000009E8                 assume cs:_text$x
.text$x:000009E8                 ;org 9E8h
.text$x:000009E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000009E8
.text$x:000009E8 ; =============== S U B R O U T I N E =======================================
.text$x:000009E8
.text$x:000009E8
.text$x:000009E8 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0 proc near
.text$x:000009E8                                         ; DATA XREF: .xdata$x:00000A9Co
.text$x:000009E8                 lea     ecx, [ebp-20h]  ; this
.text$x:000009EB                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000009EB __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0 endp
.text$x:000009EB
.text$x:000009F0
.text$x:000009F0 ; =============== S U B R O U T I N E =======================================
.text$x:000009F0
.text$x:000009F0
.text$x:000009F0 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$1 proc near
.text$x:000009F0                                         ; DATA XREF: .xdata$x:00000AA4o
.text$x:000009F0                 lea     ecx, [ebp-54h]  ; this
.text$x:000009F3                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000009F3 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$1 endp
.text$x:000009F3
.text$x:000009F8
.text$x:000009F8 ; =============== S U B R O U T I N E =======================================
.text$x:000009F8
.text$x:000009F8
.text$x:000009F8 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$2 proc near
.text$x:000009F8                                         ; DATA XREF: .xdata$x:00000AACo
.text$x:000009F8                 lea     ecx, [ebp-84h]  ; this
.text$x:000009FE                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:000009FE __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$2 endp
.text$x:000009FE
.text$x:00000A03
.text$x:00000A03 ; =============== S U B R O U T I N E =======================================
.text$x:00000A03
.text$x:00000A03
.text$x:00000A03 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$3 proc near
.text$x:00000A03                                         ; DATA XREF: .xdata$x:00000AB4o
.text$x:00000A03                 lea     ecx, [ebp-0A4h] ; this
.text$x:00000A09                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000A09 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$3 endp
.text$x:00000A09
.text$x:00000A0E
.text$x:00000A0E ; =============== S U B R O U T I N E =======================================
.text$x:00000A0E
.text$x:00000A0E
.text$x:00000A0E __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4 proc near
.text$x:00000A0E                                         ; DATA XREF: .xdata$x:00000ABCo
.text$x:00000A0E                 lea     ecx, [ebp-0CCh] ; this
.text$x:00000A14                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00000A14 __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4 endp
.text$x:00000A14
.text$x:00000A19
.text$x:00000A19 ; =============== S U B R O U T I N E =======================================
.text$x:00000A19
.text$x:00000A19
.text$x:00000A19 __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z proc near
.text$x:00000A19                                         ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+5o
.text$x:00000A19
.text$x:00000A19 arg_4           = dword ptr  8
.text$x:00000A19
.text$x:00000A19                 mov     edx, [esp+arg_4]
.text$x:00000A1D                 lea     eax, [edx+0Ch]
.text$x:00000A20                 mov     ecx, [edx-0DCh]
.text$x:00000A26                 xor     ecx, eax
.text$x:00000A28                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A2D                 mov     eax, offset __ehfuncinfo$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.text$x:00000A32                 jmp     ___CxxFrameHandler3
.text$x:00000A32 __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z endp
.text$x:00000A32
.text$x:00000A37
.text$x:00000A37 ; =============== S U B R O U T I N E =======================================
.text$x:00000A37
.text$x:00000A37
.text$x:00000A37 __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$0 proc near
.text$x:00000A37                                         ; DATA XREF: .xdata$x:00000AC4o
.text$x:00000A37                 lea     ecx, [ebp-24h]  ; this
.text$x:00000A3A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000A3A __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$0 endp
.text$x:00000A3A
.text$x:00000A3F
.text$x:00000A3F ; =============== S U B R O U T I N E =======================================
.text$x:00000A3F
.text$x:00000A3F
.text$x:00000A3F __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$1 proc near
.text$x:00000A3F                                         ; DATA XREF: .xdata$x:00000ACCo
.text$x:00000A3F                 lea     ecx, [ebp-50h]  ; this
.text$x:00000A42                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000A42 __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$1 endp
.text$x:00000A42
.text$x:00000A47
.text$x:00000A47 ; =============== S U B R O U T I N E =======================================
.text$x:00000A47
.text$x:00000A47
.text$x:00000A47 __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$2 proc near
.text$x:00000A47                                         ; DATA XREF: .xdata$x:00000AD4o
.text$x:00000A47                 lea     ecx, [ebp-60h]  ; this
.text$x:00000A4A                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000A4A __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$2 endp
.text$x:00000A4A
.text$x:00000A4F
.text$x:00000A4F ; =============== S U B R O U T I N E =======================================
.text$x:00000A4F
.text$x:00000A4F
.text$x:00000A4F __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$3 proc near
.text$x:00000A4F                                         ; DATA XREF: .xdata$x:00000ADCo
.text$x:00000A4F                 lea     ecx, [ebp-74h]  ; this
.text$x:00000A52                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000A52 __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$3 endp
.text$x:00000A52
.text$x:00000A57
.text$x:00000A57 ; =============== S U B R O U T I N E =======================================
.text$x:00000A57
.text$x:00000A57
.text$x:00000A57 __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text$x:00000A57                                         ; DATA XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5o
.text$x:00000A57
.text$x:00000A57 arg_4           = dword ptr  8
.text$x:00000A57
.text$x:00000A57                 mov     edx, [esp+arg_4]
.text$x:00000A5B                 lea     eax, [edx+0Ch]
.text$x:00000A5E                 mov     ecx, [edx-70h]
.text$x:00000A61                 xor     ecx, eax
.text$x:00000A63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000A68                 mov     eax, offset __ehfuncinfo$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
.text$x:00000A6D                 jmp     ___CxxFrameHandler3
.text$x:00000A6D __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text$x:00000A6D
.text$x:00000A6D ; ---------------------------------------------------------------------------
.text$x:00000A72                 align 4
.text$x:00000A72 _text$x         ends
.text$x:00000A72
.xdata$x:00000A74 ; ===========================================================================
.xdata$x:00000A74
.xdata$x:00000A74 ; Segment type: Pure data
.xdata$x:00000A74 ; Segment permissions: Read
.xdata$x:00000A74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000A74                 assume cs:_xdata$x
.xdata$x:00000A74                 ;org 0A74h
.xdata$x:00000A74 __ehfuncinfo$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00000A74                                         ; DATA XREF: __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z+14o
.xdata$x:00000A75                 db    5
.xdata$x:00000A76                 db  93h ; ô
.xdata$x:00000A77                 db  19h
.xdata$x:00000A78                 db    5
.xdata$x:00000A79                 db    0
.xdata$x:00000A7A                 db    0
.xdata$x:00000A7B                 db    0
.xdata$x:00000A7C                 dd offset __unwindtable$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
.xdata$x:00000A80                 db    0
.xdata$x:00000A81                 db    0
.xdata$x:00000A82                 db    0
.xdata$x:00000A83                 db    0
.xdata$x:00000A84                 db    0
.xdata$x:00000A85                 db    0
.xdata$x:00000A86                 db    0
.xdata$x:00000A87                 db    0
.xdata$x:00000A88                 db    0
.xdata$x:00000A89                 db    0
.xdata$x:00000A8A                 db    0
.xdata$x:00000A8B                 db    0
.xdata$x:00000A8C                 db    0
.xdata$x:00000A8D                 db    0
.xdata$x:00000A8E                 db    0
.xdata$x:00000A8F                 db    0
.xdata$x:00000A90                 db    0
.xdata$x:00000A91                 db    0
.xdata$x:00000A92                 db    0
.xdata$x:00000A93                 db    0
.xdata$x:00000A94                 db    1
.xdata$x:00000A95                 db    0
.xdata$x:00000A96                 db    0
.xdata$x:00000A97                 db    0
.xdata$x:00000A98 __unwindtable$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00000A98                                         ; DATA XREF: .xdata$x:00000A7Co
.xdata$x:00000A99                 db 0FFh
.xdata$x:00000A9A                 db 0FFh
.xdata$x:00000A9B                 db 0FFh
.xdata$x:00000A9C                 dd offset __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0
.xdata$x:00000AA0                 db    0
.xdata$x:00000AA1                 db    0
.xdata$x:00000AA2                 db    0
.xdata$x:00000AA3                 db    0
.xdata$x:00000AA4                 dd offset __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$1
.xdata$x:00000AA8                 db    1
.xdata$x:00000AA9                 db    0
.xdata$x:00000AAA                 db    0
.xdata$x:00000AAB                 db    0
.xdata$x:00000AAC                 dd offset __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$2
.xdata$x:00000AB0                 db    1
.xdata$x:00000AB1                 db    0
.xdata$x:00000AB2                 db    0
.xdata$x:00000AB3                 db    0
.xdata$x:00000AB4                 dd offset __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$3
.xdata$x:00000AB8                 db    1
.xdata$x:00000AB9                 db    0
.xdata$x:00000ABA                 db    0
.xdata$x:00000ABB                 db    0
.xdata$x:00000ABC                 dd offset __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4
.xdata$x:00000AC0 __unwindtable$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z db 0FFh
.xdata$x:00000AC0                                         ; DATA XREF: .xdata$x:00000AE8o
.xdata$x:00000AC1                 db 0FFh
.xdata$x:00000AC2                 db 0FFh
.xdata$x:00000AC3                 db 0FFh
.xdata$x:00000AC4                 dd offset __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$0
.xdata$x:00000AC8                 db    0
.xdata$x:00000AC9                 db    0
.xdata$x:00000ACA                 db    0
.xdata$x:00000ACB                 db    0
.xdata$x:00000ACC                 dd offset __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$1
.xdata$x:00000AD0                 db    0
.xdata$x:00000AD1                 db    0
.xdata$x:00000AD2                 db    0
.xdata$x:00000AD3                 db    0
.xdata$x:00000AD4                 dd offset __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$2
.xdata$x:00000AD8                 db    0
.xdata$x:00000AD9                 db    0
.xdata$x:00000ADA                 db    0
.xdata$x:00000ADB                 db    0
.xdata$x:00000ADC                 dd offset __unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$3
.xdata$x:00000AE0 __ehfuncinfo$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z db  22h ; "
.xdata$x:00000AE0                                         ; DATA XREF: __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z+11o
.xdata$x:00000AE1                 db    5
.xdata$x:00000AE2                 db  93h ; ô
.xdata$x:00000AE3                 db  19h
.xdata$x:00000AE4                 db    4
.xdata$x:00000AE5                 db    0
.xdata$x:00000AE6                 db    0
.xdata$x:00000AE7                 db    0
.xdata$x:00000AE8                 dd offset __unwindtable$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
.xdata$x:00000AEC                 align 20h
.xdata$x:00000B00                 db    1
.xdata$x:00000B01                 db    0
.xdata$x:00000B02                 db    0
.xdata$x:00000B03                 db    0
.xdata$x:00000B03 _xdata$x        ends
.xdata$x:00000B03
.text:00000B04 ; ===========================================================================
.text:00000B04
.text:00000B04 ; Segment type: Pure code
.text:00000B04 ; Segment permissions: Read/Execute
.text:00000B04 _text           segment para public 'CODE' use32
.text:00000B04                 assume cs:_text
.text:00000B04                 ;org 0B04h
.text:00000B04 ; COMDAT (pick any)
.text:00000B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B04
.text:00000B04 ; =============== S U B R O U T I N E =======================================
.text:00000B04
.text:00000B04 ; Attributes: bp-based frame
.text:00000B04
.text:00000B04 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000B04                 public ??1UString@@QAE@XZ
.text:00000B04 ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+7Bp
.text:00000B04                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+C9p ...
.text:00000B04
.text:00000B04 var_8           = dword ptr -8
.text:00000B04 var_4           = dword ptr -4
.text:00000B04
.text:00000B04                 push    ebp
.text:00000B05                 mov     ebp, esp
.text:00000B07                 sub     esp, 8
.text:00000B0A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B11                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B18                 mov     [ebp+var_4], ecx
.text:00000B1B                 mov     eax, [ebp+var_4]
.text:00000B1E                 mov     ecx, [eax]
.text:00000B20                 mov     [ebp+var_8], ecx
.text:00000B23                 mov     edx, [ebp+var_8]
.text:00000B26                 push    edx             ; void *
.text:00000B27                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000B2C                 add     esp, 4
.text:00000B2F                 add     esp, 8
.text:00000B32                 cmp     ebp, esp
.text:00000B34                 call    __RTC_CheckEsp
.text:00000B39                 mov     esp, ebp
.text:00000B3B                 pop     ebp
.text:00000B3C                 retn
.text:00000B3C ??1UString@@QAE@XZ endp
.text:00000B3C
.text:00000B3C ; ---------------------------------------------------------------------------
.text:00000B3D                 align 10h
.text:00000B3D _text           ends
.text:00000B3D
.text:00000B40 ; ===========================================================================
.text:00000B40
.text:00000B40 ; Segment type: Pure code
.text:00000B40 ; Segment permissions: Read/Execute
.text:00000B40 _text           segment para public 'CODE' use32
.text:00000B40                 assume cs:_text
.text:00000B40                 ;org 0B40h
.text:00000B40 ; COMDAT (pick any)
.text:00000B40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B40
.text:00000B40 ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40 ; Attributes: bp-based frame
.text:00000B40
.text:00000B40 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00000B40                 public ?IsEmpty@UString@@QBE_NXZ
.text:00000B40 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+5Ep
.text:00000B40                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+84p
.text:00000B40
.text:00000B40 var_4           = dword ptr -4
.text:00000B40
.text:00000B40                 push    ebp
.text:00000B41                 mov     ebp, esp
.text:00000B43                 push    ecx
.text:00000B44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B4B                 mov     [ebp+var_4], ecx
.text:00000B4E                 mov     eax, [ebp+var_4]
.text:00000B51                 xor     ecx, ecx
.text:00000B53                 cmp     dword ptr [eax+4], 0
.text:00000B57                 setz    cl
.text:00000B5A                 mov     al, cl
.text:00000B5C                 mov     esp, ebp
.text:00000B5E                 pop     ebp
.text:00000B5F                 retn
.text:00000B5F ?IsEmpty@UString@@QBE_NXZ endp
.text:00000B5F
.text:00000B5F _text           ends
.text:00000B5F
.text:00000B60 ; ===========================================================================
.text:00000B60
.text:00000B60 ; Segment type: Pure code
.text:00000B60 ; Segment permissions: Read/Execute
.text:00000B60 _text           segment para public 'CODE' use32
.text:00000B60                 assume cs:_text
.text:00000B60                 ;org 0B60h
.text:00000B60 ; COMDAT (pick any)
.text:00000B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B60
.text:00000B60 ; =============== S U B R O U T I N E =======================================
.text:00000B60
.text:00000B60 ; Attributes: bp-based frame
.text:00000B60
.text:00000B60 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000B60                 public ??BUString@@QBEPB_WXZ
.text:00000B60 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+8Bp
.text:00000B60                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+BDp
.text:00000B60
.text:00000B60 var_4           = dword ptr -4
.text:00000B60
.text:00000B60                 push    ebp
.text:00000B61                 mov     ebp, esp
.text:00000B63                 push    ecx
.text:00000B64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B6B                 mov     [ebp+var_4], ecx
.text:00000B6E                 mov     eax, [ebp+var_4]
.text:00000B71                 mov     eax, [eax]
.text:00000B73                 mov     esp, ebp
.text:00000B75                 pop     ebp
.text:00000B76                 retn
.text:00000B76 ??BUString@@QBEPB_WXZ endp
.text:00000B76
.text:00000B76 ; ---------------------------------------------------------------------------
.text:00000B77                 align 4
.text:00000B77 _text           ends
.text:00000B77
.text:00000B78 ; ===========================================================================
.text:00000B78
.text:00000B78 ; Segment type: Pure code
.text:00000B78 ; Segment permissions: Read/Execute
.text:00000B78 _text           segment para public 'CODE' use32
.text:00000B78                 assume cs:_text
.text:00000B78                 ;org 0B78h
.text:00000B78 ; COMDAT (pick any)
.text:00000B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B78
.text:00000B78 ; =============== S U B R O U T I N E =======================================
.text:00000B78
.text:00000B78 ; Attributes: bp-based frame
.text:00000B78
.text:00000B78 ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:00000B78                 public ?Ptr@UString@@QBEPB_WI@Z
.text:00000B78 ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1CAp
.text:00000B78                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+203p ...
.text:00000B78
.text:00000B78 var_4           = dword ptr -4
.text:00000B78 arg_0           = dword ptr  8
.text:00000B78
.text:00000B78                 push    ebp
.text:00000B79                 mov     ebp, esp
.text:00000B7B                 push    ecx
.text:00000B7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B83                 mov     [ebp+var_4], ecx
.text:00000B86                 mov     eax, [ebp+var_4]
.text:00000B89                 mov     ecx, [eax]
.text:00000B8B                 mov     edx, [ebp+arg_0]
.text:00000B8E                 lea     eax, [ecx+edx*2]
.text:00000B91                 mov     esp, ebp
.text:00000B93                 pop     ebp
.text:00000B94                 retn    4
.text:00000B94 ?Ptr@UString@@QBEPB_WI@Z endp
.text:00000B94
.text:00000B94 ; ---------------------------------------------------------------------------
.text:00000B97                 align 4
.text:00000B97 _text           ends
.text:00000B97
.text:00000B98 ; ===========================================================================
.text:00000B98
.text:00000B98 ; Segment type: Pure code
.text:00000B98 ; Segment permissions: Read/Execute
.text:00000B98 _text           segment para public 'CODE' use32
.text:00000B98                 assume cs:_text
.text:00000B98                 ;org 0B98h
.text:00000B98 ; COMDAT (pick any)
.text:00000B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B98
.text:00000B98 ; =============== S U B R O U T I N E =======================================
.text:00000B98
.text:00000B98 ; Attributes: bp-based frame
.text:00000B98
.text:00000B98 ; void __thiscall UString::MakeLower_Ascii(UString *__hidden this)
.text:00000B98                 public ?MakeLower_Ascii@UString@@QAEXXZ
.text:00000B98 ?MakeLower_Ascii@UString@@QAEXXZ proc near
.text:00000B98                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+56p
.text:00000B98                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+7Cp
.text:00000B98
.text:00000B98 var_4           = dword ptr -4
.text:00000B98
.text:00000B98                 push    ebp
.text:00000B99                 mov     ebp, esp
.text:00000B9B                 push    ecx
.text:00000B9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BA3                 mov     [ebp+var_4], ecx
.text:00000BA6                 mov     eax, [ebp+var_4]
.text:00000BA9                 mov     ecx, [eax]
.text:00000BAB                 push    ecx             ; wchar_t *
.text:00000BAC                 call    ?MyStringLower_Ascii@@YGXPA_W@Z ; MyStringLower_Ascii(wchar_t *)
.text:00000BB1                 add     esp, 4
.text:00000BB4                 cmp     ebp, esp
.text:00000BB6                 call    __RTC_CheckEsp
.text:00000BBB                 mov     esp, ebp
.text:00000BBD                 pop     ebp
.text:00000BBE                 retn
.text:00000BBE ?MakeLower_Ascii@UString@@QAEXXZ endp
.text:00000BBE
.text:00000BBE ; ---------------------------------------------------------------------------
.text:00000BBF                 align 10h
.text:00000BBF _text           ends
.text:00000BBF
.text:00000BC0 ; ===========================================================================
.text:00000BC0
.text:00000BC0 ; Segment type: Pure code
.text:00000BC0 ; Segment permissions: Read/Execute
.text:00000BC0 _text           segment para public 'CODE' use32
.text:00000BC0                 assume cs:_text
.text:00000BC0                 ;org 0BC0h
.text:00000BC0 ; COMDAT (pick any)
.text:00000BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BC0
.text:00000BC0 ; =============== S U B R O U T I N E =======================================
.text:00000BC0
.text:00000BC0 ; Attributes: bp-based frame
.text:00000BC0
.text:00000BC0 ; bool __thiscall UString::IsEqualTo(UString *this, const char *)
.text:00000BC0                 public ?IsEqualTo@UString@@QBE_NPBD@Z
.text:00000BC0 ?IsEqualTo@UString@@QBE_NPBD@Z proc near
.text:00000BC0                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+163p
.text:00000BC0                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2B5p
.text:00000BC0
.text:00000BC0 var_4           = dword ptr -4
.text:00000BC0 arg_0           = dword ptr  8
.text:00000BC0
.text:00000BC0                 push    ebp
.text:00000BC1                 mov     ebp, esp
.text:00000BC3                 push    ecx
.text:00000BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000BCB                 mov     [ebp+var_4], ecx
.text:00000BCE                 mov     eax, [ebp+arg_0]
.text:00000BD1                 push    eax             ; char *
.text:00000BD2                 mov     ecx, [ebp+var_4]
.text:00000BD5                 mov     edx, [ecx]
.text:00000BD7                 push    edx             ; wchar_t *
.text:00000BD8                 call    ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqual_Ascii(wchar_t const *,char const *)
.text:00000BDD                 add     esp, 4
.text:00000BE0                 cmp     ebp, esp
.text:00000BE2                 call    __RTC_CheckEsp
.text:00000BE7                 mov     esp, ebp
.text:00000BE9                 pop     ebp
.text:00000BEA                 retn    4
.text:00000BEA ?IsEqualTo@UString@@QBE_NPBD@Z endp
.text:00000BEA
.text:00000BEA ; ---------------------------------------------------------------------------
.text:00000BED                 align 10h
.text:00000BED _text           ends
.text:00000BED
.text:00000BF0 ; ===========================================================================
.text:00000BF0
.text:00000BF0 ; Segment type: Pure code
.text:00000BF0 ; Segment permissions: Read/Execute
.text:00000BF0 _text           segment para public 'CODE' use32
.text:00000BF0                 assume cs:_text
.text:00000BF0                 ;org 0BF0h
.text:00000BF0 ; COMDAT (pick any)
.text:00000BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000BF0
.text:00000BF0 ; =============== S U B R O U T I N E =======================================
.text:00000BF0
.text:00000BF0 ; Attributes: bp-based frame
.text:00000BF0
.text:00000BF0 ; public: __thiscall COneMethodInfo::COneMethodInfo(void)
.text:00000BF0                 public ??0COneMethodInfo@@QAE@XZ
.text:00000BF0 ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+41Ep
.text:00000BF0
.text:00000BF0 var_10          = dword ptr -10h
.text:00000BF0 var_C           = dword ptr -0Ch
.text:00000BF0 var_4           = dword ptr -4
.text:00000BF0
.text:00000BF0                 push    ebp
.text:00000BF1                 mov     ebp, esp
.text:00000BF3                 push    0FFFFFFFFh
.text:00000BF5                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:00000BFA                 mov     eax, large fs:0
.text:00000C00                 push    eax
.text:00000C01                 push    ecx
.text:00000C02                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000C09                 mov     eax, dword ptr ds:___security_cookie
.text:00000C0E                 xor     eax, ebp
.text:00000C10                 push    eax
.text:00000C11                 lea     eax, [ebp+var_C]
.text:00000C14                 mov     large fs:0, eax
.text:00000C1A                 mov     [ebp+var_10], ecx
.text:00000C1D                 mov     ecx, [ebp+var_10]
.text:00000C20                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00000C25                 mov     [ebp+var_4], 0
.text:00000C2C                 mov     ecx, [ebp+var_10]
.text:00000C2F                 add     ecx, 0Ch
.text:00000C32                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000C37                 mov     byte ptr [ebp+var_4], 1
.text:00000C3B                 mov     ecx, [ebp+var_10]
.text:00000C3E                 add     ecx, 18h
.text:00000C41                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00000C46                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000C4D                 mov     eax, [ebp+var_10]
.text:00000C50                 mov     ecx, [ebp+var_C]
.text:00000C53                 mov     large fs:0, ecx
.text:00000C5A                 pop     ecx
.text:00000C5B                 add     esp, 10h
.text:00000C5E                 cmp     ebp, esp
.text:00000C60                 call    __RTC_CheckEsp
.text:00000C65                 mov     esp, ebp
.text:00000C67                 pop     ebp
.text:00000C68                 retn
.text:00000C68 ??0COneMethodInfo@@QAE@XZ endp
.text:00000C68
.text:00000C68 ; ---------------------------------------------------------------------------
.text:00000C69                 align 4
.text:00000C69 _text           ends
.text:00000C69
.text$x:00000C6C ; ===========================================================================
.text$x:00000C6C
.text$x:00000C6C ; Segment type: Pure code
.text$x:00000C6C ; Segment permissions: Read/Execute
.text$x:00000C6C _text$x         segment para public 'CODE' use32
.text$x:00000C6C                 assume cs:_text$x
.text$x:00000C6C                 ;org 0C6Ch
.text$x:00000C6C ; COMDAT (pick associative to section at BF0)
.text$x:00000C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000C6C
.text$x:00000C6C ; =============== S U B R O U T I N E =======================================
.text$x:00000C6C
.text$x:00000C6C
.text$x:00000C6C __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00000C6C                                         ; DATA XREF: .xdata$x:00000CA0o
.text$x:00000C6C                 mov     ecx, [ebp-10h]  ; this
.text$x:00000C6F                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00000C6F __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:00000C6F
.text$x:00000C74
.text$x:00000C74 ; =============== S U B R O U T I N E =======================================
.text$x:00000C74
.text$x:00000C74
.text$x:00000C74 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00000C74                                         ; DATA XREF: .xdata$x:00000CA8o
.text$x:00000C74                 mov     ecx, [ebp-10h]
.text$x:00000C77                 add     ecx, 0Ch        ; this
.text$x:00000C7A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000C7A __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:00000C7A
.text$x:00000C7F
.text$x:00000C7F ; =============== S U B R O U T I N E =======================================
.text$x:00000C7F
.text$x:00000C7F
.text$x:00000C7F __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:00000C7F                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:00000C7F
.text$x:00000C7F arg_4           = dword ptr  8
.text$x:00000C7F
.text$x:00000C7F                 mov     edx, [esp+arg_4]
.text$x:00000C83                 lea     eax, [edx+0Ch]
.text$x:00000C86                 mov     ecx, [edx-8]
.text$x:00000C89                 xor     ecx, eax
.text$x:00000C8B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C90                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:00000C95                 jmp     ___CxxFrameHandler3
.text$x:00000C95 __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:00000C95
.text$x:00000C95 ; ---------------------------------------------------------------------------
.text$x:00000C9A                 align 4
.text$x:00000C9A _text$x         ends
.text$x:00000C9A
.xdata$x:00000C9C ; ===========================================================================
.xdata$x:00000C9C
.xdata$x:00000C9C ; Segment type: Pure data
.xdata$x:00000C9C ; Segment permissions: Read
.xdata$x:00000C9C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000C9C                 assume cs:_xdata$x
.xdata$x:00000C9C                 ;org 0C9Ch
.xdata$x:00000C9C ; COMDAT (pick associative to section at BF0)
.xdata$x:00000C9C __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00000C9C                                         ; DATA XREF: .xdata$x:00000CB4o
.xdata$x:00000C9D                 db 0FFh
.xdata$x:00000C9E                 db 0FFh
.xdata$x:00000C9F                 db 0FFh
.xdata$x:00000CA0                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:00000CA4                 align 8
.xdata$x:00000CA8                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:00000CAC __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00000CAC                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:00000CAD                 db    5
.xdata$x:00000CAE                 db  93h ; ô
.xdata$x:00000CAF                 db  19h
.xdata$x:00000CB0                 db    2
.xdata$x:00000CB1                 db    0
.xdata$x:00000CB2                 db    0
.xdata$x:00000CB3                 db    0
.xdata$x:00000CB4                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00000CB8                 db    0
.xdata$x:00000CB9                 db    0
.xdata$x:00000CBA                 db    0
.xdata$x:00000CBB                 db    0
.xdata$x:00000CBC                 db    0
.xdata$x:00000CBD                 db    0
.xdata$x:00000CBE                 db    0
.xdata$x:00000CBF                 db    0
.xdata$x:00000CC0                 db    0
.xdata$x:00000CC1                 db    0
.xdata$x:00000CC2                 db    0
.xdata$x:00000CC3                 db    0
.xdata$x:00000CC4                 db    0
.xdata$x:00000CC5                 db    0
.xdata$x:00000CC6                 db    0
.xdata$x:00000CC7                 db    0
.xdata$x:00000CC8                 db    0
.xdata$x:00000CC9                 db    0
.xdata$x:00000CCA                 db    0
.xdata$x:00000CCB                 db    0
.xdata$x:00000CCC                 db    1
.xdata$x:00000CCD                 db    0
.xdata$x:00000CCE                 db    0
.xdata$x:00000CCF                 db    0
.xdata$x:00000CCF _xdata$x        ends
.xdata$x:00000CCF
.text:00000CD0 ; ===========================================================================
.text:00000CD0
.text:00000CD0 ; Segment type: Pure code
.text:00000CD0 ; Segment permissions: Read/Execute
.text:00000CD0 _text           segment para public 'CODE' use32
.text:00000CD0                 assume cs:_text
.text:00000CD0                 ;org 0CD0h
.text:00000CD0 ; COMDAT (pick any)
.text:00000CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000CD0
.text:00000CD0 ; =============== S U B R O U T I N E =======================================
.text:00000CD0
.text:00000CD0 ; Attributes: bp-based frame
.text:00000CD0
.text:00000CD0 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00000CD0                 public ??1AString@@QAE@XZ
.text:00000CD0 ??1AString@@QAE@XZ proc near            ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1+6j
.text:00000CD0                                         ; COneMethodInfo::~COneMethodInfo(void)+49p ...
.text:00000CD0
.text:00000CD0 var_8           = dword ptr -8
.text:00000CD0 var_4           = dword ptr -4
.text:00000CD0
.text:00000CD0                 push    ebp
.text:00000CD1                 mov     ebp, esp
.text:00000CD3                 sub     esp, 8
.text:00000CD6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000CDD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CE4                 mov     [ebp+var_4], ecx
.text:00000CE7                 mov     eax, [ebp+var_4]
.text:00000CEA                 mov     ecx, [eax]
.text:00000CEC                 mov     [ebp+var_8], ecx
.text:00000CEF                 mov     edx, [ebp+var_8]
.text:00000CF2                 push    edx             ; void *
.text:00000CF3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000CF8                 add     esp, 4
.text:00000CFB                 add     esp, 8
.text:00000CFE                 cmp     ebp, esp
.text:00000D00                 call    __RTC_CheckEsp
.text:00000D05                 mov     esp, ebp
.text:00000D07                 pop     ebp
.text:00000D08                 retn
.text:00000D08 ??1AString@@QAE@XZ endp
.text:00000D08
.text:00000D08 ; ---------------------------------------------------------------------------
.text:00000D09                 align 4
.text:00000D09 _text           ends
.text:00000D09
.text:00000D0C ; ===========================================================================
.text:00000D0C
.text:00000D0C ; Segment type: Pure code
.text:00000D0C ; Segment permissions: Read/Execute
.text:00000D0C _text           segment para public 'CODE' use32
.text:00000D0C                 assume cs:_text
.text:00000D0C                 ;org 0D0Ch
.text:00000D0C ; COMDAT (pick any)
.text:00000D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000D0C
.text:00000D0C ; =============== S U B R O U T I N E =======================================
.text:00000D0C
.text:00000D0C ; Attributes: bp-based frame
.text:00000D0C
.text:00000D0C ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:00000D0C                 public ??1COneMethodInfo@@QAE@XZ
.text:00000D0C ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+455p
.text:00000D0C                                         ; __unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4+6j ...
.text:00000D0C
.text:00000D0C var_10          = dword ptr -10h
.text:00000D0C var_C           = dword ptr -0Ch
.text:00000D0C var_4           = dword ptr -4
.text:00000D0C
.text:00000D0C                 push    ebp
.text:00000D0D                 mov     ebp, esp
.text:00000D0F                 push    0FFFFFFFFh
.text:00000D11                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:00000D16                 mov     eax, large fs:0
.text:00000D1C                 push    eax
.text:00000D1D                 push    ecx
.text:00000D1E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000D25                 mov     eax, dword ptr ds:___security_cookie
.text:00000D2A                 xor     eax, ebp
.text:00000D2C                 push    eax
.text:00000D2D                 lea     eax, [ebp+var_C]
.text:00000D30                 mov     large fs:0, eax
.text:00000D36                 mov     [ebp+var_10], ecx
.text:00000D39                 mov     [ebp+var_4], 1
.text:00000D40                 mov     ecx, [ebp+var_10]
.text:00000D43                 add     ecx, 18h        ; this
.text:00000D46                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00000D4B                 mov     byte ptr [ebp+var_4], 0
.text:00000D4F                 mov     ecx, [ebp+var_10]
.text:00000D52                 add     ecx, 0Ch        ; this
.text:00000D55                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000D5A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D61                 mov     ecx, [ebp+var_10] ; this
.text:00000D64                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:00000D69                 mov     ecx, [ebp+var_C]
.text:00000D6C                 mov     large fs:0, ecx
.text:00000D73                 pop     ecx
.text:00000D74                 add     esp, 10h
.text:00000D77                 cmp     ebp, esp
.text:00000D79                 call    __RTC_CheckEsp
.text:00000D7E                 mov     esp, ebp
.text:00000D80                 pop     ebp
.text:00000D81                 retn
.text:00000D81 ??1COneMethodInfo@@QAE@XZ endp
.text:00000D81
.text:00000D81 ; ---------------------------------------------------------------------------
.text:00000D82                 align 4
.text:00000D82 _text           ends
.text:00000D82
.text$x:00000D84 ; ===========================================================================
.text$x:00000D84
.text$x:00000D84 ; Segment type: Pure code
.text$x:00000D84 ; Segment permissions: Read/Execute
.text$x:00000D84 _text$x         segment para public 'CODE' use32
.text$x:00000D84                 assume cs:_text$x
.text$x:00000D84                 ;org 0D84h
.text$x:00000D84 ; COMDAT (pick associative to section at D0C)
.text$x:00000D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000D84
.text$x:00000D84 ; =============== S U B R O U T I N E =======================================
.text$x:00000D84
.text$x:00000D84
.text$x:00000D84 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00000D84                                         ; DATA XREF: .xdata$x:00000DB8o
.text$x:00000D84                 mov     ecx, [ebp-10h]  ; this
.text$x:00000D87                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00000D87 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00000D87
.text$x:00000D8C
.text$x:00000D8C ; =============== S U B R O U T I N E =======================================
.text$x:00000D8C
.text$x:00000D8C
.text$x:00000D8C __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00000D8C                                         ; DATA XREF: .xdata$x:00000DC0o
.text$x:00000D8C                 mov     ecx, [ebp-10h]
.text$x:00000D8F                 add     ecx, 0Ch        ; this
.text$x:00000D92                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00000D92 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:00000D92
.text$x:00000D97
.text$x:00000D97 ; =============== S U B R O U T I N E =======================================
.text$x:00000D97
.text$x:00000D97
.text$x:00000D97 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00000D97                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00000D97
.text$x:00000D97 arg_4           = dword ptr  8
.text$x:00000D97
.text$x:00000D97                 mov     edx, [esp+arg_4]
.text$x:00000D9B                 lea     eax, [edx+0Ch]
.text$x:00000D9E                 mov     ecx, [edx-8]
.text$x:00000DA1                 xor     ecx, eax
.text$x:00000DA3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000DA8                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:00000DAD                 jmp     ___CxxFrameHandler3
.text$x:00000DAD __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:00000DAD
.text$x:00000DAD ; ---------------------------------------------------------------------------
.text$x:00000DB2                 align 4
.text$x:00000DB2 _text$x         ends
.text$x:00000DB2
.xdata$x:00000DB4 ; ===========================================================================
.xdata$x:00000DB4
.xdata$x:00000DB4 ; Segment type: Pure data
.xdata$x:00000DB4 ; Segment permissions: Read
.xdata$x:00000DB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000DB4                 assume cs:_xdata$x
.xdata$x:00000DB4                 ;org 0DB4h
.xdata$x:00000DB4 ; COMDAT (pick associative to section at D0C)
.xdata$x:00000DB4 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00000DB4                                         ; DATA XREF: .xdata$x:00000DCCo
.xdata$x:00000DB5                 db 0FFh
.xdata$x:00000DB6                 db 0FFh
.xdata$x:00000DB7                 db 0FFh
.xdata$x:00000DB8                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:00000DBC                 align 10h
.xdata$x:00000DC0                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00000DC4 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00000DC4                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00000DC5                 db    5
.xdata$x:00000DC6                 db  93h ; ô
.xdata$x:00000DC7                 db  19h
.xdata$x:00000DC8                 db    2
.xdata$x:00000DC9                 db    0
.xdata$x:00000DCA                 db    0
.xdata$x:00000DCB                 db    0
.xdata$x:00000DCC                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:00000DD0                 db    0
.xdata$x:00000DD1                 db    0
.xdata$x:00000DD2                 db    0
.xdata$x:00000DD3                 db    0
.xdata$x:00000DD4                 db    0
.xdata$x:00000DD5                 db    0
.xdata$x:00000DD6                 db    0
.xdata$x:00000DD7                 db    0
.xdata$x:00000DD8                 db    0
.xdata$x:00000DD9                 db    0
.xdata$x:00000DDA                 db    0
.xdata$x:00000DDB                 db    0
.xdata$x:00000DDC                 db    0
.xdata$x:00000DDD                 db    0
.xdata$x:00000DDE                 db    0
.xdata$x:00000DDF                 db    0
.xdata$x:00000DE0                 db    0
.xdata$x:00000DE1                 db    0
.xdata$x:00000DE2                 db    0
.xdata$x:00000DE3                 db    0
.xdata$x:00000DE4                 db    1
.xdata$x:00000DE5                 db    0
.xdata$x:00000DE6                 db    0
.xdata$x:00000DE7                 db    0
.xdata$x:00000DE7 _xdata$x        ends
.xdata$x:00000DE7
.text:00000DE8 ; ===========================================================================
.text:00000DE8
.text:00000DE8 ; Segment type: Pure code
.text:00000DE8 ; Segment permissions: Read/Execute
.text:00000DE8 _text           segment para public 'CODE' use32
.text:00000DE8                 assume cs:_text
.text:00000DE8                 ;org 0DE8h
.text:00000DE8 ; COMDAT (pick any)
.text:00000DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000DE8
.text:00000DE8 ; =============== S U B R O U T I N E =======================================
.text:00000DE8
.text:00000DE8 ; Attributes: bp-based frame
.text:00000DE8
.text:00000DE8 ; public: __thiscall CMethodProps::CMethodProps(void)
.text:00000DE8                 public ??0CMethodProps@@QAE@XZ
.text:00000DE8 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:00000DE8
.text:00000DE8 var_4           = dword ptr -4
.text:00000DE8
.text:00000DE8                 push    ebp
.text:00000DE9                 mov     ebp, esp
.text:00000DEB                 push    ecx
.text:00000DEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DF3                 mov     [ebp+var_4], ecx
.text:00000DF6                 mov     ecx, [ebp+var_4]
.text:00000DF9                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:00000DFE                 mov     eax, [ebp+var_4]
.text:00000E01                 add     esp, 4
.text:00000E04                 cmp     ebp, esp
.text:00000E06                 call    __RTC_CheckEsp
.text:00000E0B                 mov     esp, ebp
.text:00000E0D                 pop     ebp
.text:00000E0E                 retn
.text:00000E0E ??0CMethodProps@@QAE@XZ endp
.text:00000E0E
.text:00000E0E ; ---------------------------------------------------------------------------
.text:00000E0F                 align 10h
.text:00000E0F _text           ends
.text:00000E0F
.text:00000E10 ; ===========================================================================
.text:00000E10
.text:00000E10 ; Segment type: Pure code
.text:00000E10 ; Segment permissions: Read/Execute
.text:00000E10 _text           segment para public 'CODE' use32
.text:00000E10                 assume cs:_text
.text:00000E10                 ;org 0E10h
.text:00000E10 ; COMDAT (pick any)
.text:00000E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E10
.text:00000E10 ; =============== S U B R O U T I N E =======================================
.text:00000E10
.text:00000E10 ; Attributes: bp-based frame
.text:00000E10
.text:00000E10 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:00000E10                 public ??1CMethodProps@@QAE@XZ
.text:00000E10 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:00000E10                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:00000E10
.text:00000E10 var_4           = dword ptr -4
.text:00000E10
.text:00000E10                 push    ebp
.text:00000E11                 mov     ebp, esp
.text:00000E13                 push    ecx
.text:00000E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E1B                 mov     [ebp+var_4], ecx
.text:00000E1E                 mov     ecx, [ebp+var_4] ; this
.text:00000E21                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:00000E26                 add     esp, 4
.text:00000E29                 cmp     ebp, esp
.text:00000E2B                 call    __RTC_CheckEsp
.text:00000E30                 mov     esp, ebp
.text:00000E32                 pop     ebp
.text:00000E33                 retn
.text:00000E33 ??1CMethodProps@@QAE@XZ endp
.text:00000E33
.text:00000E33 _text           ends
.text:00000E33
.text:00000E34 ; ===========================================================================
.text:00000E34
.text:00000E34 ; Segment type: Pure code
.text:00000E34 ; Segment permissions: Read/Execute
.text:00000E34 _text           segment para public 'CODE' use32
.text:00000E34                 assume cs:_text
.text:00000E34                 ;org 0E34h
.text:00000E34 ; COMDAT (pick any)
.text:00000E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E34
.text:00000E34 ; =============== S U B R O U T I N E =======================================
.text:00000E34
.text:00000E34 ; Attributes: bp-based frame
.text:00000E34
.text:00000E34 ; public: __thiscall CProps::CProps(void)
.text:00000E34                 public ??0CProps@@QAE@XZ
.text:00000E34 ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:00000E34
.text:00000E34 var_4           = dword ptr -4
.text:00000E34
.text:00000E34                 push    ebp
.text:00000E35                 mov     ebp, esp
.text:00000E37                 push    ecx
.text:00000E38                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E3F                 mov     [ebp+var_4], ecx
.text:00000E42                 mov     ecx, [ebp+var_4]
.text:00000E45                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00000E4A                 mov     eax, [ebp+var_4]
.text:00000E4D                 add     esp, 4
.text:00000E50                 cmp     ebp, esp
.text:00000E52                 call    __RTC_CheckEsp
.text:00000E57                 mov     esp, ebp
.text:00000E59                 pop     ebp
.text:00000E5A                 retn
.text:00000E5A ??0CProps@@QAE@XZ endp
.text:00000E5A
.text:00000E5A ; ---------------------------------------------------------------------------
.text:00000E5B                 align 4
.text:00000E5B _text           ends
.text:00000E5B
.text:00000E5C ; ===========================================================================
.text:00000E5C
.text:00000E5C ; Segment type: Pure code
.text:00000E5C ; Segment permissions: Read/Execute
.text:00000E5C _text           segment para public 'CODE' use32
.text:00000E5C                 assume cs:_text
.text:00000E5C                 ;org 0E5Ch
.text:00000E5C ; COMDAT (pick any)
.text:00000E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E5C
.text:00000E5C ; =============== S U B R O U T I N E =======================================
.text:00000E5C
.text:00000E5C ; Attributes: bp-based frame
.text:00000E5C
.text:00000E5C ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00000E5C                 public ??1CProps@@QAE@XZ
.text:00000E5C ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00000E5C
.text:00000E5C var_4           = dword ptr -4
.text:00000E5C
.text:00000E5C                 push    ebp
.text:00000E5D                 mov     ebp, esp
.text:00000E5F                 push    ecx
.text:00000E60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E67                 mov     [ebp+var_4], ecx
.text:00000E6A                 mov     ecx, [ebp+var_4]
.text:00000E6D                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:00000E72                 add     esp, 4
.text:00000E75                 cmp     ebp, esp
.text:00000E77                 call    __RTC_CheckEsp
.text:00000E7C                 mov     esp, ebp
.text:00000E7E                 pop     ebp
.text:00000E7F                 retn
.text:00000E7F ??1CProps@@QAE@XZ endp
.text:00000E7F
.text:00000E7F _text           ends
.text:00000E7F
.text:00000E80 ; ===========================================================================
.text:00000E80
.text:00000E80 ; Segment type: Pure code
.text:00000E80 ; Segment permissions: Read/Execute
.text:00000E80 _text           segment para public 'CODE' use32
.text:00000E80                 assume cs:_text
.text:00000E80                 ;org 0E80h
.text:00000E80 ; COMDAT (pick any)
.text:00000E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000E80
.text:00000E80 ; =============== S U B R O U T I N E =======================================
.text:00000E80
.text:00000E80 ; Attributes: bp-based frame
.text:00000E80
.text:00000E80 ; void __thiscall CMethodProps::AddProp_NumThreads(CMethodProps *this, unsigned int)
.text:00000E80                 public ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
.text:00000E80 ?AddProp_NumThreads@CMethodProps@@QAEXI@Z proc near
.text:00000E80                                         ; CODE XREF: NArchive::CSingleMethodProps::Init(void)+4Dp
.text:00000E80                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1C4p
.text:00000E80
.text:00000E80 var_4           = dword ptr -4
.text:00000E80 arg_0           = dword ptr  8
.text:00000E80
.text:00000E80                 push    ebp
.text:00000E81                 mov     ebp, esp
.text:00000E83                 push    ecx
.text:00000E84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E8B                 mov     [ebp+var_4], ecx
.text:00000E8E                 mov     eax, [ebp+arg_0]
.text:00000E91                 push    eax             ; unsigned int
.text:00000E92                 push    0Dh             ; unsigned __int32
.text:00000E94                 mov     ecx, [ebp+var_4] ; this
.text:00000E97                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00000E9C                 add     esp, 4
.text:00000E9F                 cmp     ebp, esp
.text:00000EA1                 call    __RTC_CheckEsp
.text:00000EA6                 mov     esp, ebp
.text:00000EA8                 pop     ebp
.text:00000EA9                 retn    4
.text:00000EA9 ?AddProp_NumThreads@CMethodProps@@QAEXI@Z endp
.text:00000EA9
.text:00000EA9 _text           ends
.text:00000EA9
.text:00000EAC ; ===========================================================================
.text:00000EAC
.text:00000EAC ; Segment type: Pure code
.text:00000EAC ; Segment permissions: Read/Execute
.text:00000EAC _text           segment para public 'CODE' use32
.text:00000EAC                 assume cs:_text
.text:00000EAC                 ;org 0EACh
.text:00000EAC ; COMDAT (pick any)
.text:00000EAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000EAC
.text:00000EAC ; =============== S U B R O U T I N E =======================================
.text:00000EAC
.text:00000EAC ; Attributes: bp-based frame
.text:00000EAC
.text:00000EAC ; void __thiscall CMethodProps::AddProp_Level(CMethodProps *this, unsigned int)
.text:00000EAC                 public ?AddProp_Level@CMethodProps@@QAEXI@Z
.text:00000EAC ?AddProp_Level@CMethodProps@@QAEXI@Z proc near
.text:00000EAC                                         ; CODE XREF: NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+13Bp
.text:00000EAC
.text:00000EAC var_4           = dword ptr -4
.text:00000EAC arg_0           = dword ptr  8
.text:00000EAC
.text:00000EAC                 push    ebp
.text:00000EAD                 mov     ebp, esp
.text:00000EAF                 push    ecx
.text:00000EB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EB7                 mov     [ebp+var_4], ecx
.text:00000EBA                 mov     eax, [ebp+arg_0]
.text:00000EBD                 push    eax             ; unsigned int
.text:00000EBE                 push    0Fh             ; unsigned __int32
.text:00000EC0                 mov     ecx, [ebp+var_4] ; this
.text:00000EC3                 call    ?AddProp32@CProps@@QAEXKI@Z ; CProps::AddProp32(ulong,uint)
.text:00000EC8                 add     esp, 4
.text:00000ECB                 cmp     ebp, esp
.text:00000ECD                 call    __RTC_CheckEsp
.text:00000ED2                 mov     esp, ebp
.text:00000ED4                 pop     ebp
.text:00000ED5                 retn    4
.text:00000ED5 ?AddProp_Level@CMethodProps@@QAEXI@Z endp
.text:00000ED5
.text:00000ED5 _text           ends
.text:00000ED5
.text:00000ED8 ; ===========================================================================
.text:00000ED8
.text:00000ED8 ; Segment type: Pure code
.text:00000ED8 ; Segment permissions: Read/Execute
.text:00000ED8 _text           segment para public 'CODE' use32
.text:00000ED8                 assume cs:_text
.text:00000ED8                 ;org 0ED8h
.text:00000ED8 ; COMDAT (pick any)
.text:00000ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000ED8
.text:00000ED8 ; =============== S U B R O U T I N E =======================================
.text:00000ED8
.text:00000ED8 ; Attributes: bp-based frame
.text:00000ED8
.text:00000ED8 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00000ED8                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00000ED8 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00000ED8                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00000ED8
.text:00000ED8 var_4           = dword ptr -4
.text:00000ED8
.text:00000ED8                 push    ebp
.text:00000ED9                 mov     ebp, esp
.text:00000EDB                 push    ecx
.text:00000EDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EE3                 mov     [ebp+var_4], ecx
.text:00000EE6                 mov     ecx, [ebp+var_4]
.text:00000EE9                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00000EEE                 mov     eax, [ebp+var_4]
.text:00000EF1                 add     esp, 4
.text:00000EF4                 cmp     ebp, esp
.text:00000EF6                 call    __RTC_CheckEsp
.text:00000EFB                 mov     esp, ebp
.text:00000EFD                 pop     ebp
.text:00000EFE                 retn
.text:00000EFE ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00000EFE
.text:00000EFE ; ---------------------------------------------------------------------------
.text:00000EFF                 align 10h
.text:00000EFF _text           ends
.text:00000EFF
.text:00000F00 ; ===========================================================================
.text:00000F00
.text:00000F00 ; Segment type: Pure code
.text:00000F00 ; Segment permissions: Read/Execute
.text:00000F00 _text           segment para public 'CODE' use32
.text:00000F00                 assume cs:_text
.text:00000F00                 ;org 0F00h
.text:00000F00 ; COMDAT (pick any)
.text:00000F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000F00
.text:00000F00 ; =============== S U B R O U T I N E =======================================
.text:00000F00
.text:00000F00 ; Attributes: bp-based frame
.text:00000F00
.text:00000F00 ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00000F00                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00000F00 ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00000F00                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00000F00
.text:00000F00 var_20          = dword ptr -20h
.text:00000F00 var_1C          = dword ptr -1Ch
.text:00000F00 var_18          = dword ptr -18h
.text:00000F00 var_14          = dword ptr -14h
.text:00000F00 var_10          = dword ptr -10h
.text:00000F00 var_C           = dword ptr -0Ch
.text:00000F00 var_4           = dword ptr -4
.text:00000F00
.text:00000F00                 push    ebp
.text:00000F01                 mov     ebp, esp
.text:00000F03                 push    0FFFFFFFFh
.text:00000F05                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00000F0A                 mov     eax, large fs:0
.text:00000F10                 push    eax
.text:00000F11                 sub     esp, 14h
.text:00000F14                 mov     eax, 0CCCCCCCCh
.text:00000F19                 mov     [ebp+var_20], eax
.text:00000F1C                 mov     [ebp+var_1C], eax
.text:00000F1F                 mov     [ebp+var_18], eax
.text:00000F22                 mov     [ebp+var_14], eax
.text:00000F25                 mov     [ebp+var_10], eax
.text:00000F28                 mov     eax, dword ptr ds:___security_cookie
.text:00000F2D                 xor     eax, ebp
.text:00000F2F                 push    eax
.text:00000F30                 lea     eax, [ebp+var_C]
.text:00000F33                 mov     large fs:0, eax
.text:00000F39                 mov     [ebp+var_10], ecx
.text:00000F3C                 mov     [ebp+var_4], 0
.text:00000F43                 mov     ecx, [ebp+var_10]
.text:00000F46                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00000F4B                 mov     [ebp+var_14], eax
.text:00000F4E
.text:00000F4E loc_F4E:                                ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_F90j
.text:00000F4E                 cmp     [ebp+var_14], 0
.text:00000F52                 jz      short loc_F92
.text:00000F54                 mov     eax, [ebp+var_14]
.text:00000F57                 sub     eax, 1
.text:00000F5A                 mov     [ebp+var_14], eax
.text:00000F5D                 mov     ecx, [ebp+var_14]
.text:00000F60                 push    ecx
.text:00000F61                 mov     ecx, [ebp+var_10]
.text:00000F64                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00000F69                 mov     edx, [eax]
.text:00000F6B                 mov     [ebp+var_1C], edx
.text:00000F6E                 mov     eax, [ebp+var_1C]
.text:00000F71                 mov     [ebp+var_18], eax
.text:00000F74                 cmp     [ebp+var_18], 0
.text:00000F78                 jz      short loc_F89
.text:00000F7A                 push    1
.text:00000F7C                 mov     ecx, [ebp+var_18]
.text:00000F7F                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00000F84                 mov     [ebp+var_20], eax
.text:00000F87                 jmp     short loc_F90
.text:00000F89 ; ---------------------------------------------------------------------------
.text:00000F89
.text:00000F89 loc_F89:                                ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00000F89                 mov     [ebp+var_20], 0
.text:00000F90
.text:00000F90 loc_F90:                                ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00000F90                 jmp     short loc_F4E
.text:00000F92 ; ---------------------------------------------------------------------------
.text:00000F92
.text:00000F92 loc_F92:                                ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00000F92                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000F99                 mov     ecx, [ebp+var_10]
.text:00000F9C                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00000FA1                 mov     ecx, [ebp+var_C]
.text:00000FA4                 mov     large fs:0, ecx
.text:00000FAB                 pop     ecx
.text:00000FAC                 add     esp, 20h
.text:00000FAF                 cmp     ebp, esp
.text:00000FB1                 call    __RTC_CheckEsp
.text:00000FB6                 mov     esp, ebp
.text:00000FB8                 pop     ebp
.text:00000FB9                 retn
.text:00000FB9 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00000FB9
.text:00000FB9 ; ---------------------------------------------------------------------------
.text:00000FBA                 align 4
.text:00000FBA _text           ends
.text:00000FBA
.text$x:00000FBC ; ===========================================================================
.text$x:00000FBC
.text$x:00000FBC ; Segment type: Pure code
.text$x:00000FBC ; Segment permissions: Read/Execute
.text$x:00000FBC _text$x         segment para public 'CODE' use32
.text$x:00000FBC                 assume cs:_text$x
.text$x:00000FBC                 ;org 0FBCh
.text$x:00000FBC ; COMDAT (pick associative to section at F00)
.text$x:00000FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000FBC
.text$x:00000FBC ; =============== S U B R O U T I N E =======================================
.text$x:00000FBC
.text$x:00000FBC
.text$x:00000FBC __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00000FBC                                         ; DATA XREF: .xdata$x:00000FE4o
.text$x:00000FBC                 mov     ecx, [ebp-10h]
.text$x:00000FBF                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00000FBF __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:00000FBF
.text$x:00000FC4
.text$x:00000FC4 ; =============== S U B R O U T I N E =======================================
.text$x:00000FC4
.text$x:00000FC4
.text$x:00000FC4 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00000FC4                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00000FC4
.text$x:00000FC4 arg_4           = dword ptr  8
.text$x:00000FC4
.text$x:00000FC4                 mov     edx, [esp+arg_4]
.text$x:00000FC8                 lea     eax, [edx+0Ch]
.text$x:00000FCB                 mov     ecx, [edx-18h]
.text$x:00000FCE                 xor     ecx, eax
.text$x:00000FD0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000FD5                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00000FDA                 jmp     ___CxxFrameHandler3
.text$x:00000FDA __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00000FDA
.text$x:00000FDA ; ---------------------------------------------------------------------------
.text$x:00000FDF                 align 10h
.text$x:00000FDF _text$x         ends
.text$x:00000FDF
.xdata$x:00000FE0 ; ===========================================================================
.xdata$x:00000FE0
.xdata$x:00000FE0 ; Segment type: Pure data
.xdata$x:00000FE0 ; Segment permissions: Read
.xdata$x:00000FE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000FE0                 assume cs:_xdata$x
.xdata$x:00000FE0                 ;org 0FE0h
.xdata$x:00000FE0 ; COMDAT (pick associative to section at F00)
.xdata$x:00000FE0 __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00000FE0                                         ; DATA XREF: .xdata$x:00000FF0o
.xdata$x:00000FE1                 db 0FFh
.xdata$x:00000FE2                 db 0FFh
.xdata$x:00000FE3                 db 0FFh
.xdata$x:00000FE4                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00000FE8 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00000FE8                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00000FE9                 db    5
.xdata$x:00000FEA                 db  93h ; ô
.xdata$x:00000FEB                 db  19h
.xdata$x:00000FEC                 db    1
.xdata$x:00000FED                 db    0
.xdata$x:00000FEE                 db    0
.xdata$x:00000FEF                 db    0
.xdata$x:00000FF0                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00000FF4                 db    0
.xdata$x:00000FF5                 db    0
.xdata$x:00000FF6                 db    0
.xdata$x:00000FF7                 db    0
.xdata$x:00000FF8                 db    0
.xdata$x:00000FF9                 db    0
.xdata$x:00000FFA                 db    0
.xdata$x:00000FFB                 db    0
.xdata$x:00000FFC                 db    0
.xdata$x:00000FFD                 db    0
.xdata$x:00000FFE                 db    0
.xdata$x:00000FFF                 db    0
.xdata$x:00001000                 db    0
.xdata$x:00001001                 db    0
.xdata$x:00001002                 db    0
.xdata$x:00001003                 db    0
.xdata$x:00001004                 db    0
.xdata$x:00001005                 db    0
.xdata$x:00001006                 db    0
.xdata$x:00001007                 db    0
.xdata$x:00001008                 db    1
.xdata$x:00001009                 db    0
.xdata$x:0000100A                 db    0
.xdata$x:0000100B                 db    0
.xdata$x:0000100B _xdata$x        ends
.xdata$x:0000100B
.text:0000100C ; ===========================================================================
.text:0000100C
.text:0000100C ; Segment type: Pure code
.text:0000100C ; Segment permissions: Read/Execute
.text:0000100C _text           segment para public 'CODE' use32
.text:0000100C                 assume cs:_text
.text:0000100C                 ;org 100Ch
.text:0000100C ; COMDAT (pick any)
.text:0000100C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000100C
.text:0000100C ; =============== S U B R O U T I N E =======================================
.text:0000100C
.text:0000100C ; Attributes: bp-based frame
.text:0000100C
.text:0000100C ; public: void __thiscall CObjectVector<struct CProp>::Clear(void)
.text:0000100C                 public ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
.text:0000100C ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
.text:0000100C                                         ; CODE XREF: CProps::Clear(void)+11p
.text:0000100C
.text:0000100C var_14          = dword ptr -14h
.text:0000100C var_10          = dword ptr -10h
.text:0000100C var_C           = dword ptr -0Ch
.text:0000100C var_8           = dword ptr -8
.text:0000100C var_4           = dword ptr -4
.text:0000100C
.text:0000100C                 push    ebp
.text:0000100D                 mov     ebp, esp
.text:0000100F                 sub     esp, 14h
.text:00001012                 mov     eax, 0CCCCCCCCh
.text:00001017                 mov     [ebp+var_14], eax
.text:0000101A                 mov     [ebp+var_10], eax
.text:0000101D                 mov     [ebp+var_C], eax
.text:00001020                 mov     [ebp+var_8], eax
.text:00001023                 mov     [ebp+var_4], eax
.text:00001026                 mov     [ebp+var_4], ecx
.text:00001029                 mov     ecx, [ebp+var_4]
.text:0000102C                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001031                 mov     [ebp+var_8], eax
.text:00001034
.text:00001034 loc_1034:                               ; CODE XREF: CObjectVector<CProp>::Clear(void):loc_1076j
.text:00001034                 cmp     [ebp+var_8], 0
.text:00001038                 jz      short loc_1078
.text:0000103A                 mov     eax, [ebp+var_8]
.text:0000103D                 sub     eax, 1
.text:00001040                 mov     [ebp+var_8], eax
.text:00001043                 mov     ecx, [ebp+var_8]
.text:00001046                 push    ecx
.text:00001047                 mov     ecx, [ebp+var_4]
.text:0000104A                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000104F                 mov     edx, [eax]
.text:00001051                 mov     [ebp+var_10], edx
.text:00001054                 mov     eax, [ebp+var_10]
.text:00001057                 mov     [ebp+var_C], eax
.text:0000105A                 cmp     [ebp+var_C], 0
.text:0000105E                 jz      short loc_106F
.text:00001060                 push    1
.text:00001062                 mov     ecx, [ebp+var_C]
.text:00001065                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:0000106A                 mov     [ebp+var_14], eax
.text:0000106D                 jmp     short loc_1076
.text:0000106F ; ---------------------------------------------------------------------------
.text:0000106F
.text:0000106F loc_106F:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+52j
.text:0000106F                 mov     [ebp+var_14], 0
.text:00001076
.text:00001076 loc_1076:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+61j
.text:00001076                 jmp     short loc_1034
.text:00001078 ; ---------------------------------------------------------------------------
.text:00001078
.text:00001078 loc_1078:                               ; CODE XREF: CObjectVector<CProp>::Clear(void)+2Cj
.text:00001078                 mov     ecx, [ebp+var_4]
.text:0000107B                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00001080                 add     esp, 14h
.text:00001083                 cmp     ebp, esp
.text:00001085                 call    __RTC_CheckEsp
.text:0000108A                 mov     esp, ebp
.text:0000108C                 pop     ebp
.text:0000108D                 retn
.text:0000108D ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ endp
.text:0000108D
.text:0000108D ; ---------------------------------------------------------------------------
.text:0000108E                 align 10h
.text:0000108E _text           ends
.text:0000108E
.text:00001090 ; ===========================================================================
.text:00001090
.text:00001090 ; Segment type: Pure code
.text:00001090 ; Segment permissions: Read/Execute
.text:00001090 _text           segment para public 'CODE' use32
.text:00001090                 assume cs:_text
.text:00001090                 ;org 1090h
.text:00001090 ; COMDAT (pick any)
.text:00001090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001090
.text:00001090 ; =============== S U B R O U T I N E =======================================
.text:00001090
.text:00001090 ; Attributes: bp-based frame
.text:00001090
.text:00001090 ; public: unsigned int __thiscall CObjectVector<class COneMethodInfo>::Size(void)const
.text:00001090                 public ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
.text:00001090 ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ proc near
.text:00001090                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+3FDp
.text:00001090
.text:00001090 var_4           = dword ptr -4
.text:00001090
.text:00001090                 push    ebp
.text:00001091                 mov     ebp, esp
.text:00001093                 push    ecx
.text:00001094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000109B                 mov     [ebp+var_4], ecx
.text:0000109E                 mov     ecx, [ebp+var_4]
.text:000010A1                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000010A6                 add     esp, 4
.text:000010A9                 cmp     ebp, esp
.text:000010AB                 call    __RTC_CheckEsp
.text:000010B0                 mov     esp, ebp
.text:000010B2                 pop     ebp
.text:000010B3                 retn
.text:000010B3 ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ endp
.text:000010B3
.text:000010B3 _text           ends
.text:000010B3
.text:000010B4 ; ===========================================================================
.text:000010B4
.text:000010B4 ; Segment type: Pure code
.text:000010B4 ; Segment permissions: Read/Execute
.text:000010B4 _text           segment para public 'CODE' use32
.text:000010B4                 assume cs:_text
.text:000010B4                 ;org 10B4h
.text:000010B4 ; COMDAT (pick any)
.text:000010B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010B4
.text:000010B4 ; =============== S U B R O U T I N E =======================================
.text:000010B4
.text:000010B4 ; Attributes: bp-based frame
.text:000010B4
.text:000010B4 ; public: class COneMethodInfo & __thiscall CObjectVector<class COneMethodInfo>::operator[](unsigned int)
.text:000010B4                 public ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
.text:000010B4 ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z proc near
.text:000010B4                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+46Ep
.text:000010B4
.text:000010B4 var_4           = dword ptr -4
.text:000010B4 arg_0           = dword ptr  8
.text:000010B4
.text:000010B4                 push    ebp
.text:000010B5                 mov     ebp, esp
.text:000010B7                 push    ecx
.text:000010B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010BF                 mov     [ebp+var_4], ecx
.text:000010C2                 mov     eax, [ebp+arg_0]
.text:000010C5                 push    eax
.text:000010C6                 mov     ecx, [ebp+var_4]
.text:000010C9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000010CE                 mov     eax, [eax]
.text:000010D0                 add     esp, 4
.text:000010D3                 cmp     ebp, esp
.text:000010D5                 call    __RTC_CheckEsp
.text:000010DA                 mov     esp, ebp
.text:000010DC                 pop     ebp
.text:000010DD                 retn    4
.text:000010DD ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z endp
.text:000010DD
.text:000010DD _text           ends
.text:000010DD
.text:000010E0 ; ===========================================================================
.text:000010E0
.text:000010E0 ; Segment type: Pure code
.text:000010E0 ; Segment permissions: Read/Execute
.text:000010E0 _text           segment para public 'CODE' use32
.text:000010E0                 assume cs:_text
.text:000010E0                 ;org 10E0h
.text:000010E0 ; COMDAT (pick any)
.text:000010E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000010E0
.text:000010E0 ; =============== S U B R O U T I N E =======================================
.text:000010E0
.text:000010E0 ; Attributes: bp-based frame
.text:000010E0
.text:000010E0 ; public: unsigned int __thiscall CObjectVector<class COneMethodInfo>::Add(class COneMethodInfo const &)
.text:000010E0                 public ?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
.text:000010E0 ?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z proc near
.text:000010E0                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+446p
.text:000010E0
.text:000010E0 var_1C          = dword ptr -1Ch
.text:000010E0 var_18          = dword ptr -18h
.text:000010E0 var_14          = dword ptr -14h
.text:000010E0 var_10          = dword ptr -10h
.text:000010E0 var_C           = dword ptr -0Ch
.text:000010E0 var_4           = dword ptr -4
.text:000010E0 arg_0           = dword ptr  8
.text:000010E0
.text:000010E0                 push    ebp
.text:000010E1                 mov     ebp, esp
.text:000010E3                 push    0FFFFFFFFh
.text:000010E5                 push    offset __ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
.text:000010EA                 mov     eax, large fs:0
.text:000010F0                 push    eax
.text:000010F1                 sub     esp, 10h
.text:000010F4                 mov     eax, 0CCCCCCCCh
.text:000010F9                 mov     [ebp+var_1C], eax
.text:000010FC                 mov     [ebp+var_18], eax
.text:000010FF                 mov     [ebp+var_14], eax
.text:00001102                 mov     [ebp+var_10], eax
.text:00001105                 mov     eax, dword ptr ds:___security_cookie
.text:0000110A                 xor     eax, ebp
.text:0000110C                 push    eax
.text:0000110D                 lea     eax, [ebp+var_C]
.text:00001110                 mov     large fs:0, eax
.text:00001116                 mov     [ebp+var_10], ecx
.text:00001119                 push    24h ; '$'       ; unsigned int
.text:0000111B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001120                 add     esp, 4
.text:00001123                 mov     [ebp+var_18], eax
.text:00001126                 mov     [ebp+var_4], 0
.text:0000112D                 cmp     [ebp+var_18], 0
.text:00001131                 jz      short loc_1144
.text:00001133                 mov     eax, [ebp+arg_0]
.text:00001136                 push    eax
.text:00001137                 mov     ecx, [ebp+var_18]
.text:0000113A                 call    ??0COneMethodInfo@@QAE@ABV0@@Z ; COneMethodInfo::COneMethodInfo(COneMethodInfo const &)
.text:0000113F                 mov     [ebp+var_1C], eax
.text:00001142                 jmp     short loc_114B
.text:00001144 ; ---------------------------------------------------------------------------
.text:00001144
.text:00001144 loc_1144:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+51j
.text:00001144                 mov     [ebp+var_1C], 0
.text:0000114B
.text:0000114B loc_114B:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+62j
.text:0000114B                 mov     ecx, [ebp+var_1C]
.text:0000114E                 mov     [ebp+var_14], ecx
.text:00001151                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001158                 mov     edx, [ebp+var_14]
.text:0000115B                 push    edx
.text:0000115C                 mov     ecx, [ebp+var_10]
.text:0000115F                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00001164                 mov     ecx, [ebp+var_C]
.text:00001167                 mov     large fs:0, ecx
.text:0000116E                 pop     ecx
.text:0000116F                 add     esp, 1Ch
.text:00001172                 cmp     ebp, esp
.text:00001174                 call    __RTC_CheckEsp
.text:00001179                 mov     esp, ebp
.text:0000117B                 pop     ebp
.text:0000117C                 retn    4
.text:0000117C ?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z endp
.text:0000117C
.text:0000117C ; ---------------------------------------------------------------------------
.text:0000117F                 align 10h
.text:0000117F _text           ends
.text:0000117F
.text$x:00001180 ; ===========================================================================
.text$x:00001180
.text$x:00001180 ; Segment type: Pure code
.text$x:00001180 ; Segment permissions: Read/Execute
.text$x:00001180 _text$x         segment para public 'CODE' use32
.text$x:00001180                 assume cs:_text$x
.text$x:00001180                 ;org 1180h
.text$x:00001180 ; COMDAT (pick associative to section at 10E0)
.text$x:00001180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001180
.text$x:00001180 ; =============== S U B R O U T I N E =======================================
.text$x:00001180
.text$x:00001180
.text$x:00001180 __unwindfunclet$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z$0 proc near
.text$x:00001180                                         ; DATA XREF: .xdata$x:000011ACo
.text$x:00001180                 mov     eax, [ebp-18h]
.text$x:00001183                 push    eax             ; void *
.text$x:00001184                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001189                 pop     ecx
.text$x:0000118A                 retn
.text$x:0000118A __unwindfunclet$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z$0 endp
.text$x:0000118A
.text$x:0000118B
.text$x:0000118B ; =============== S U B R O U T I N E =======================================
.text$x:0000118B
.text$x:0000118B
.text$x:0000118B __ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z proc near
.text$x:0000118B                                         ; DATA XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+5o
.text$x:0000118B
.text$x:0000118B arg_4           = dword ptr  8
.text$x:0000118B
.text$x:0000118B                 mov     edx, [esp+arg_4]
.text$x:0000118F                 lea     eax, [edx+0Ch]
.text$x:00001192                 mov     ecx, [edx-14h]
.text$x:00001195                 xor     ecx, eax
.text$x:00001197                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000119C                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
.text$x:000011A1                 jmp     ___CxxFrameHandler3
.text$x:000011A1 __ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z endp
.text$x:000011A1
.text$x:000011A1 ; ---------------------------------------------------------------------------
.text$x:000011A6                 align 4
.text$x:000011A6 _text$x         ends
.text$x:000011A6
.xdata$x:000011A8 ; ===========================================================================
.xdata$x:000011A8
.xdata$x:000011A8 ; Segment type: Pure data
.xdata$x:000011A8 ; Segment permissions: Read
.xdata$x:000011A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000011A8                 assume cs:_xdata$x
.xdata$x:000011A8                 ;org 11A8h
.xdata$x:000011A8 ; COMDAT (pick associative to section at 10E0)
.xdata$x:000011A8 __unwindtable$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z db 0FFh
.xdata$x:000011A8                                         ; DATA XREF: .xdata$x:000011B8o
.xdata$x:000011A9                 db 0FFh
.xdata$x:000011AA                 db 0FFh
.xdata$x:000011AB                 db 0FFh
.xdata$x:000011AC                 dd offset __unwindfunclet$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z$0
.xdata$x:000011B0 __ehfuncinfo$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z db  22h ; "
.xdata$x:000011B0                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z+11o
.xdata$x:000011B1                 db    5
.xdata$x:000011B2                 db  93h ; ô
.xdata$x:000011B3                 db  19h
.xdata$x:000011B4                 db    1
.xdata$x:000011B5                 db    0
.xdata$x:000011B6                 db    0
.xdata$x:000011B7                 db    0
.xdata$x:000011B8                 dd offset __unwindtable$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
.xdata$x:000011BC                 db    0
.xdata$x:000011BD                 db    0
.xdata$x:000011BE                 db    0
.xdata$x:000011BF                 db    0
.xdata$x:000011C0                 db    0
.xdata$x:000011C1                 db    0
.xdata$x:000011C2                 db    0
.xdata$x:000011C3                 db    0
.xdata$x:000011C4                 db    0
.xdata$x:000011C5                 db    0
.xdata$x:000011C6                 db    0
.xdata$x:000011C7                 db    0
.xdata$x:000011C8                 db    0
.xdata$x:000011C9                 db    0
.xdata$x:000011CA                 db    0
.xdata$x:000011CB                 db    0
.xdata$x:000011CC                 db    0
.xdata$x:000011CD                 db    0
.xdata$x:000011CE                 db    0
.xdata$x:000011CF                 db    0
.xdata$x:000011D0                 db    1
.xdata$x:000011D1                 db    0
.xdata$x:000011D2                 db    0
.xdata$x:000011D3                 db    0
.xdata$x:000011D3 _xdata$x        ends
.xdata$x:000011D3
.text:000011D4 ; ===========================================================================
.text:000011D4
.text:000011D4 ; Segment type: Pure code
.text:000011D4 ; Segment permissions: Read/Execute
.text:000011D4 _text           segment para public 'CODE' use32
.text:000011D4                 assume cs:_text
.text:000011D4                 ;org 11D4h
.text:000011D4 ; COMDAT (pick any)
.text:000011D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000011D4
.text:000011D4 ; =============== S U B R O U T I N E =======================================
.text:000011D4
.text:000011D4 ; Attributes: bp-based frame
.text:000011D4
.text:000011D4 ; public: void __thiscall CObjectVector<class COneMethodInfo>::Clear(void)
.text:000011D4                 public ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ
.text:000011D4 ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ proc near
.text:000011D4                                         ; CODE XREF: NArchive::CMultiMethodProps::Init(void)+66p
.text:000011D4
.text:000011D4 var_14          = dword ptr -14h
.text:000011D4 var_10          = dword ptr -10h
.text:000011D4 var_C           = dword ptr -0Ch
.text:000011D4 var_8           = dword ptr -8
.text:000011D4 var_4           = dword ptr -4
.text:000011D4
.text:000011D4                 push    ebp
.text:000011D5                 mov     ebp, esp
.text:000011D7                 sub     esp, 14h
.text:000011DA                 mov     eax, 0CCCCCCCCh
.text:000011DF                 mov     [ebp+var_14], eax
.text:000011E2                 mov     [ebp+var_10], eax
.text:000011E5                 mov     [ebp+var_C], eax
.text:000011E8                 mov     [ebp+var_8], eax
.text:000011EB                 mov     [ebp+var_4], eax
.text:000011EE                 mov     [ebp+var_4], ecx
.text:000011F1                 mov     ecx, [ebp+var_4]
.text:000011F4                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000011F9                 mov     [ebp+var_8], eax
.text:000011FC
.text:000011FC loc_11FC:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Clear(void):loc_123Ej
.text:000011FC                 cmp     [ebp+var_8], 0
.text:00001200                 jz      short loc_1240
.text:00001202                 mov     eax, [ebp+var_8]
.text:00001205                 sub     eax, 1
.text:00001208                 mov     [ebp+var_8], eax
.text:0000120B                 mov     ecx, [ebp+var_8]
.text:0000120E                 push    ecx
.text:0000120F                 mov     ecx, [ebp+var_4]
.text:00001212                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00001217                 mov     edx, [eax]
.text:00001219                 mov     [ebp+var_10], edx
.text:0000121C                 mov     eax, [ebp+var_10]
.text:0000121F                 mov     [ebp+var_C], eax
.text:00001222                 cmp     [ebp+var_C], 0
.text:00001226                 jz      short loc_1237
.text:00001228                 push    1
.text:0000122A                 mov     ecx, [ebp+var_C]
.text:0000122D                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:00001232                 mov     [ebp+var_14], eax
.text:00001235                 jmp     short loc_123E
.text:00001237 ; ---------------------------------------------------------------------------
.text:00001237
.text:00001237 loc_1237:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Clear(void)+52j
.text:00001237                 mov     [ebp+var_14], 0
.text:0000123E
.text:0000123E loc_123E:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Clear(void)+61j
.text:0000123E                 jmp     short loc_11FC
.text:00001240 ; ---------------------------------------------------------------------------
.text:00001240
.text:00001240 loc_1240:                               ; CODE XREF: CObjectVector<COneMethodInfo>::Clear(void)+2Cj
.text:00001240                 mov     ecx, [ebp+var_4]
.text:00001243                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00001248                 add     esp, 14h
.text:0000124B                 cmp     ebp, esp
.text:0000124D                 call    __RTC_CheckEsp
.text:00001252                 mov     esp, ebp
.text:00001254                 pop     ebp
.text:00001255                 retn
.text:00001255 ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ endp
.text:00001255
.text:00001255 ; ---------------------------------------------------------------------------
.text:00001256                 align 4
.text:00001256 _text           ends
.text:00001256
.text:00001258 ; ===========================================================================
.text:00001258
.text:00001258 ; Segment type: Pure code
.text:00001258 ; Segment permissions: Read/Execute
.text:00001258 _text           segment para public 'CODE' use32
.text:00001258                 assume cs:_text
.text:00001258                 ;org 1258h
.text:00001258 ; COMDAT (pick any)
.text:00001258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001258
.text:00001258 ; =============== S U B R O U T I N E =======================================
.text:00001258
.text:00001258 ; Attributes: bp-based frame
.text:00001258
.text:00001258 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00001258                 public ??_GCProp@@QAEPAXI@Z
.text:00001258 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00001258                                         ; CObjectVector<CProp>::Clear(void)+59p
.text:00001258
.text:00001258 var_4           = dword ptr -4
.text:00001258 arg_0           = dword ptr  8
.text:00001258
.text:00001258                 push    ebp
.text:00001259                 mov     ebp, esp
.text:0000125B                 push    ecx
.text:0000125C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001263                 mov     [ebp+var_4], ecx
.text:00001266                 mov     ecx, [ebp+var_4] ; this
.text:00001269                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000126E                 mov     eax, [ebp+arg_0]
.text:00001271                 and     eax, 1
.text:00001274                 jz      short loc_1282
.text:00001276                 mov     ecx, [ebp+var_4]
.text:00001279                 push    ecx             ; void *
.text:0000127A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000127F                 add     esp, 4
.text:00001282
.text:00001282 loc_1282:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00001282                 mov     eax, [ebp+var_4]
.text:00001285                 add     esp, 4
.text:00001288                 cmp     ebp, esp
.text:0000128A                 call    __RTC_CheckEsp
.text:0000128F                 mov     esp, ebp
.text:00001291                 pop     ebp
.text:00001292                 retn    4
.text:00001292 ??_GCProp@@QAEPAXI@Z endp
.text:00001292
.text:00001292 ; ---------------------------------------------------------------------------
.text:00001295                 align 4
.text:00001295 _text           ends
.text:00001295
.text:00001298 ; ===========================================================================
.text:00001298
.text:00001298 ; Segment type: Pure code
.text:00001298 ; Segment permissions: Read/Execute
.text:00001298 _text           segment para public 'CODE' use32
.text:00001298                 assume cs:_text
.text:00001298                 ;org 1298h
.text:00001298 ; COMDAT (pick any)
.text:00001298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001298
.text:00001298 ; =============== S U B R O U T I N E =======================================
.text:00001298
.text:00001298 ; Attributes: bp-based frame
.text:00001298
.text:00001298 ; public: __thiscall COneMethodInfo::COneMethodInfo(class COneMethodInfo const &)
.text:00001298                 public ??0COneMethodInfo@@QAE@ABV0@@Z
.text:00001298 ??0COneMethodInfo@@QAE@ABV0@@Z proc near
.text:00001298                                         ; CODE XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+5Ap
.text:00001298
.text:00001298 var_10          = dword ptr -10h
.text:00001298 var_C           = dword ptr -0Ch
.text:00001298 var_4           = dword ptr -4
.text:00001298 arg_0           = dword ptr  8
.text:00001298
.text:00001298                 push    ebp
.text:00001299                 mov     ebp, esp
.text:0000129B                 push    0FFFFFFFFh
.text:0000129D                 push    offset __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
.text:000012A2                 mov     eax, large fs:0
.text:000012A8                 push    eax
.text:000012A9                 push    ecx
.text:000012AA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000012B1                 mov     eax, dword ptr ds:___security_cookie
.text:000012B6                 xor     eax, ebp
.text:000012B8                 push    eax
.text:000012B9                 lea     eax, [ebp+var_C]
.text:000012BC                 mov     large fs:0, eax
.text:000012C2                 mov     [ebp+var_10], ecx
.text:000012C5                 mov     eax, [ebp+arg_0]
.text:000012C8                 push    eax
.text:000012C9                 mov     ecx, [ebp+var_10]
.text:000012CC                 call    ??0CMethodProps@@QAE@ABV0@@Z ; CMethodProps::CMethodProps(CMethodProps const &)
.text:000012D1                 mov     [ebp+var_4], 0
.text:000012D8                 mov     ecx, [ebp+arg_0]
.text:000012DB                 add     ecx, 0Ch
.text:000012DE                 push    ecx
.text:000012DF                 mov     ecx, [ebp+var_10]
.text:000012E2                 add     ecx, 0Ch
.text:000012E5                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:000012EA                 mov     byte ptr [ebp+var_4], 1
.text:000012EE                 mov     edx, [ebp+arg_0]
.text:000012F1                 add     edx, 18h
.text:000012F4                 push    edx
.text:000012F5                 mov     ecx, [ebp+var_10]
.text:000012F8                 add     ecx, 18h
.text:000012FB                 call    ??0UString@@QAE@ABV0@@Z ; UString::UString(UString const &)
.text:00001300                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001307                 mov     eax, [ebp+var_10]
.text:0000130A                 mov     ecx, [ebp+var_C]
.text:0000130D                 mov     large fs:0, ecx
.text:00001314                 pop     ecx
.text:00001315                 add     esp, 10h
.text:00001318                 cmp     ebp, esp
.text:0000131A                 call    __RTC_CheckEsp
.text:0000131F                 mov     esp, ebp
.text:00001321                 pop     ebp
.text:00001322                 retn    4
.text:00001322 ??0COneMethodInfo@@QAE@ABV0@@Z endp
.text:00001322
.text:00001322 ; ---------------------------------------------------------------------------
.text:00001325                 align 4
.text:00001325 _text           ends
.text:00001325
.text$x:00001328 ; ===========================================================================
.text$x:00001328
.text$x:00001328 ; Segment type: Pure code
.text$x:00001328 ; Segment permissions: Read/Execute
.text$x:00001328 _text$x         segment para public 'CODE' use32
.text$x:00001328                 assume cs:_text$x
.text$x:00001328                 ;org 1328h
.text$x:00001328 ; COMDAT (pick associative to section at 1298)
.text$x:00001328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001328
.text$x:00001328 ; =============== S U B R O U T I N E =======================================
.text$x:00001328
.text$x:00001328
.text$x:00001328 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0 proc near
.text$x:00001328                                         ; DATA XREF: .xdata$x:0000135Co
.text$x:00001328                 mov     ecx, [ebp-10h]  ; this
.text$x:0000132B                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:0000132B __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0 endp
.text$x:0000132B
.text$x:00001330
.text$x:00001330 ; =============== S U B R O U T I N E =======================================
.text$x:00001330
.text$x:00001330
.text$x:00001330 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1 proc near
.text$x:00001330                                         ; DATA XREF: .xdata$x:00001364o
.text$x:00001330                 mov     ecx, [ebp-10h]
.text$x:00001333                 add     ecx, 0Ch        ; this
.text$x:00001336                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001336 __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1 endp
.text$x:00001336
.text$x:0000133B
.text$x:0000133B ; =============== S U B R O U T I N E =======================================
.text$x:0000133B
.text$x:0000133B
.text$x:0000133B __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z proc near
.text$x:0000133B                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+5o
.text$x:0000133B
.text$x:0000133B arg_4           = dword ptr  8
.text$x:0000133B
.text$x:0000133B                 mov     edx, [esp+arg_4]
.text$x:0000133F                 lea     eax, [edx+0Ch]
.text$x:00001342                 mov     ecx, [edx-8]
.text$x:00001345                 xor     ecx, eax
.text$x:00001347                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000134C                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
.text$x:00001351                 jmp     ___CxxFrameHandler3
.text$x:00001351 __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z endp
.text$x:00001351
.text$x:00001351 ; ---------------------------------------------------------------------------
.text$x:00001356                 align 4
.text$x:00001356 _text$x         ends
.text$x:00001356
.xdata$x:00001358 ; ===========================================================================
.xdata$x:00001358
.xdata$x:00001358 ; Segment type: Pure data
.xdata$x:00001358 ; Segment permissions: Read
.xdata$x:00001358 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001358                 assume cs:_xdata$x
.xdata$x:00001358                 ;org 1358h
.xdata$x:00001358 ; COMDAT (pick associative to section at 1298)
.xdata$x:00001358 __unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z db 0FFh
.xdata$x:00001358                                         ; DATA XREF: .xdata$x:00001370o
.xdata$x:00001359                 db 0FFh
.xdata$x:0000135A                 db 0FFh
.xdata$x:0000135B                 db 0FFh
.xdata$x:0000135C                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
.xdata$x:00001360                 db    0
.xdata$x:00001361                 db    0
.xdata$x:00001362                 db    0
.xdata$x:00001363                 db    0
.xdata$x:00001364                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
.xdata$x:00001368 __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z db  22h ; "
.xdata$x:00001368                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z+11o
.xdata$x:00001369                 db    5
.xdata$x:0000136A                 db  93h ; ô
.xdata$x:0000136B                 db  19h
.xdata$x:0000136C                 db    2
.xdata$x:0000136D                 db    0
.xdata$x:0000136E                 db    0
.xdata$x:0000136F                 db    0
.xdata$x:00001370                 dd offset __unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
.xdata$x:00001374                 db    0
.xdata$x:00001375                 db    0
.xdata$x:00001376                 db    0
.xdata$x:00001377                 db    0
.xdata$x:00001378                 db    0
.xdata$x:00001379                 db    0
.xdata$x:0000137A                 db    0
.xdata$x:0000137B                 db    0
.xdata$x:0000137C                 db    0
.xdata$x:0000137D                 db    0
.xdata$x:0000137E                 db    0
.xdata$x:0000137F                 db    0
.xdata$x:00001380                 db    0
.xdata$x:00001381                 db    0
.xdata$x:00001382                 db    0
.xdata$x:00001383                 db    0
.xdata$x:00001384                 db    0
.xdata$x:00001385                 db    0
.xdata$x:00001386                 db    0
.xdata$x:00001387                 db    0
.xdata$x:00001388                 db    1
.xdata$x:00001389                 db    0
.xdata$x:0000138A                 db    0
.xdata$x:0000138B                 db    0
.xdata$x:0000138B _xdata$x        ends
.xdata$x:0000138B
.text:0000138C ; ===========================================================================
.text:0000138C
.text:0000138C ; Segment type: Pure code
.text:0000138C ; Segment permissions: Read/Execute
.text:0000138C _text           segment para public 'CODE' use32
.text:0000138C                 assume cs:_text
.text:0000138C                 ;org 138Ch
.text:0000138C ; COMDAT (pick any)
.text:0000138C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000138C
.text:0000138C ; =============== S U B R O U T I N E =======================================
.text:0000138C
.text:0000138C ; Attributes: bp-based frame
.text:0000138C
.text:0000138C ; public: void * __thiscall COneMethodInfo::`scalar deleting destructor'(unsigned int)
.text:0000138C                 public ??_GCOneMethodInfo@@QAEPAXI@Z
.text:0000138C ??_GCOneMethodInfo@@QAEPAXI@Z proc near ; CODE XREF: CObjectVector<COneMethodInfo>::Clear(void)+59p
.text:0000138C
.text:0000138C var_4           = dword ptr -4
.text:0000138C arg_0           = dword ptr  8
.text:0000138C
.text:0000138C                 push    ebp
.text:0000138D                 mov     ebp, esp
.text:0000138F                 push    ecx
.text:00001390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001397                 mov     [ebp+var_4], ecx
.text:0000139A                 mov     ecx, [ebp+var_4] ; this
.text:0000139D                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:000013A2                 mov     eax, [ebp+arg_0]
.text:000013A5                 and     eax, 1
.text:000013A8                 jz      short loc_13B6
.text:000013AA                 mov     ecx, [ebp+var_4]
.text:000013AD                 push    ecx             ; void *
.text:000013AE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000013B3                 add     esp, 4
.text:000013B6
.text:000013B6 loc_13B6:                               ; CODE XREF: COneMethodInfo::`scalar deleting destructor'(uint)+1Cj
.text:000013B6                 mov     eax, [ebp+var_4]
.text:000013B9                 add     esp, 4
.text:000013BC                 cmp     ebp, esp
.text:000013BE                 call    __RTC_CheckEsp
.text:000013C3                 mov     esp, ebp
.text:000013C5                 pop     ebp
.text:000013C6                 retn    4
.text:000013C6 ??_GCOneMethodInfo@@QAEPAXI@Z endp
.text:000013C6
.text:000013C6 ; ---------------------------------------------------------------------------
.text:000013C9                 align 4
.text:000013C9 _text           ends
.text:000013C9
.text:000013CC ; ===========================================================================
.text:000013CC
.text:000013CC ; Segment type: Pure code
.text:000013CC ; Segment permissions: Read/Execute
.text:000013CC _text           segment para public 'CODE' use32
.text:000013CC                 assume cs:_text
.text:000013CC                 ;org 13CCh
.text:000013CC ; COMDAT (pick any)
.text:000013CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013CC
.text:000013CC ; =============== S U B R O U T I N E =======================================
.text:000013CC
.text:000013CC ; Attributes: bp-based frame
.text:000013CC
.text:000013CC ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:000013CC                 public ??1CProp@@QAE@XZ
.text:000013CC ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:000013CC
.text:000013CC var_4           = dword ptr -4
.text:000013CC
.text:000013CC                 push    ebp
.text:000013CD                 mov     ebp, esp
.text:000013CF                 push    ecx
.text:000013D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013D7                 mov     [ebp+var_4], ecx
.text:000013DA                 mov     ecx, [ebp+var_4]
.text:000013DD                 add     ecx, 8          ; this
.text:000013E0                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000013E5                 add     esp, 4
.text:000013E8                 cmp     ebp, esp
.text:000013EA                 call    __RTC_CheckEsp
.text:000013EF                 mov     esp, ebp
.text:000013F1                 pop     ebp
.text:000013F2                 retn
.text:000013F2 ??1CProp@@QAE@XZ endp
.text:000013F2
.text:000013F2 ; ---------------------------------------------------------------------------
.text:000013F3                 align 4
.text:000013F3 _text           ends
.text:000013F3
.text:000013F4 ; ===========================================================================
.text:000013F4
.text:000013F4 ; Segment type: Pure code
.text:000013F4 ; Segment permissions: Read/Execute
.text:000013F4 _text           segment para public 'CODE' use32
.text:000013F4                 assume cs:_text
.text:000013F4                 ;org 13F4h
.text:000013F4 ; COMDAT (pick any)
.text:000013F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000013F4
.text:000013F4 ; =============== S U B R O U T I N E =======================================
.text:000013F4
.text:000013F4 ; Attributes: bp-based frame
.text:000013F4
.text:000013F4 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000013F4                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000013F4 ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000013F4                                         ; CODE XREF: CProp::~CProp(void)+14p
.text:000013F4
.text:000013F4 var_4           = dword ptr -4
.text:000013F4
.text:000013F4                 push    ebp
.text:000013F5                 mov     ebp, esp
.text:000013F7                 push    ecx
.text:000013F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013FF                 mov     [ebp+var_4], ecx
.text:00001402                 mov     ecx, [ebp+var_4] ; this
.text:00001405                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:0000140A                 add     esp, 4
.text:0000140D                 cmp     ebp, esp
.text:0000140F                 call    __RTC_CheckEsp
.text:00001414                 mov     esp, ebp
.text:00001416                 pop     ebp
.text:00001417                 retn
.text:00001417 ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00001417
.text:00001417 _text           ends
.text:00001417
.text:00001418 ; ===========================================================================
.text:00001418
.text:00001418 ; Segment type: Pure code
.text:00001418 ; Segment permissions: Read/Execute
.text:00001418 _text           segment para public 'CODE' use32
.text:00001418                 assume cs:_text
.text:00001418                 ;org 1418h
.text:00001418 ; COMDAT (pick any)
.text:00001418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001418
.text:00001418 ; =============== S U B R O U T I N E =======================================
.text:00001418
.text:00001418 ; Attributes: bp-based frame
.text:00001418
.text:00001418 ; public: __thiscall CMethodProps::CMethodProps(class CMethodProps const &)
.text:00001418                 public ??0CMethodProps@@QAE@ABV0@@Z
.text:00001418 ??0CMethodProps@@QAE@ABV0@@Z proc near  ; CODE XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+34p
.text:00001418
.text:00001418 var_4           = dword ptr -4
.text:00001418 arg_0           = dword ptr  8
.text:00001418
.text:00001418                 push    ebp
.text:00001419                 mov     ebp, esp
.text:0000141B                 push    ecx
.text:0000141C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001423                 mov     [ebp+var_4], ecx
.text:00001426                 mov     eax, [ebp+arg_0]
.text:00001429                 push    eax
.text:0000142A                 mov     ecx, [ebp+var_4]
.text:0000142D                 call    ??0CProps@@QAE@ABU0@@Z ; CProps::CProps(CProps const &)
.text:00001432                 mov     eax, [ebp+var_4]
.text:00001435                 add     esp, 4
.text:00001438                 cmp     ebp, esp
.text:0000143A                 call    __RTC_CheckEsp
.text:0000143F                 mov     esp, ebp
.text:00001441                 pop     ebp
.text:00001442                 retn    4
.text:00001442 ??0CMethodProps@@QAE@ABV0@@Z endp
.text:00001442
.text:00001442 ; ---------------------------------------------------------------------------
.text:00001445                 align 4
.text:00001445 _text           ends
.text:00001445
.text:00001448 ; ===========================================================================
.text:00001448
.text:00001448 ; Segment type: Pure code
.text:00001448 ; Segment permissions: Read/Execute
.text:00001448 _text           segment para public 'CODE' use32
.text:00001448                 assume cs:_text
.text:00001448                 ;org 1448h
.text:00001448 ; COMDAT (pick any)
.text:00001448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001448
.text:00001448 ; =============== S U B R O U T I N E =======================================
.text:00001448
.text:00001448 ; Attributes: bp-based frame
.text:00001448
.text:00001448 ; public: __thiscall CProps::CProps(struct CProps const &)
.text:00001448                 public ??0CProps@@QAE@ABU0@@Z
.text:00001448 ??0CProps@@QAE@ABU0@@Z proc near        ; CODE XREF: CMethodProps::CMethodProps(CMethodProps const &)+15p
.text:00001448
.text:00001448 var_4           = dword ptr -4
.text:00001448 arg_0           = dword ptr  8
.text:00001448
.text:00001448                 push    ebp
.text:00001449                 mov     ebp, esp
.text:0000144B                 push    ecx
.text:0000144C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001453                 mov     [ebp+var_4], ecx
.text:00001456                 mov     eax, [ebp+arg_0]
.text:00001459                 push    eax
.text:0000145A                 mov     ecx, [ebp+var_4]
.text:0000145D                 call    ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)
.text:00001462                 mov     eax, [ebp+var_4]
.text:00001465                 add     esp, 4
.text:00001468                 cmp     ebp, esp
.text:0000146A                 call    __RTC_CheckEsp
.text:0000146F                 mov     esp, ebp
.text:00001471                 pop     ebp
.text:00001472                 retn    4
.text:00001472 ??0CProps@@QAE@ABU0@@Z endp
.text:00001472
.text:00001472 ; ---------------------------------------------------------------------------
.text:00001475                 align 4
.text:00001475 _text           ends
.text:00001475
.text:00001478 ; ===========================================================================
.text:00001478
.text:00001478 ; Segment type: Pure code
.text:00001478 ; Segment permissions: Read/Execute
.text:00001478 _text           segment para public 'CODE' use32
.text:00001478                 assume cs:_text
.text:00001478                 ;org 1478h
.text:00001478 ; COMDAT (pick any)
.text:00001478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001478
.text:00001478 ; =============== S U B R O U T I N E =======================================
.text:00001478
.text:00001478 ; Attributes: bp-based frame
.text:00001478
.text:00001478 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00001478                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00001478 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00001478                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:00001478                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+42p
.text:00001478
.text:00001478 var_4           = dword ptr -4
.text:00001478
.text:00001478                 push    ebp
.text:00001479                 mov     ebp, esp
.text:0000147B                 push    ecx
.text:0000147C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001483                 mov     [ebp+var_4], ecx
.text:00001486                 mov     eax, [ebp+var_4]
.text:00001489                 mov     dword ptr [eax], 0
.text:0000148F                 mov     ecx, [ebp+var_4]
.text:00001492                 mov     dword ptr [ecx+4], 0
.text:00001499                 mov     edx, [ebp+var_4]
.text:0000149C                 mov     dword ptr [edx+8], 0
.text:000014A3                 mov     eax, [ebp+var_4]
.text:000014A6                 mov     esp, ebp
.text:000014A8                 pop     ebp
.text:000014A9                 retn
.text:000014A9 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:000014A9
.text:000014A9 ; ---------------------------------------------------------------------------
.text:000014AA                 align 4
.text:000014AA _text           ends
.text:000014AA
.text:000014AC ; ===========================================================================
.text:000014AC
.text:000014AC ; Segment type: Pure code
.text:000014AC ; Segment permissions: Read/Execute
.text:000014AC _text           segment para public 'CODE' use32
.text:000014AC                 assume cs:_text
.text:000014AC                 ;org 14ACh
.text:000014AC ; COMDAT (pick any)
.text:000014AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014AC
.text:000014AC ; =============== S U B R O U T I N E =======================================
.text:000014AC
.text:000014AC ; Attributes: bp-based frame
.text:000014AC
.text:000014AC ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:000014AC                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:000014AC ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:000014AC                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p
.text:000014AC                                         ; CObjectVector<CProp>::Clear(void)+20p ...
.text:000014AC
.text:000014AC var_4           = dword ptr -4
.text:000014AC
.text:000014AC                 push    ebp
.text:000014AD                 mov     ebp, esp
.text:000014AF                 push    ecx
.text:000014B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014B7                 mov     [ebp+var_4], ecx
.text:000014BA                 mov     eax, [ebp+var_4]
.text:000014BD                 mov     eax, [eax+4]
.text:000014C0                 mov     esp, ebp
.text:000014C2                 pop     ebp
.text:000014C3                 retn
.text:000014C3 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:000014C3
.text:000014C3 _text           ends
.text:000014C3
.text:000014C4 ; ===========================================================================
.text:000014C4
.text:000014C4 ; Segment type: Pure code
.text:000014C4 ; Segment permissions: Read/Execute
.text:000014C4 _text           segment para public 'CODE' use32
.text:000014C4                 assume cs:_text
.text:000014C4                 ;org 14C4h
.text:000014C4 ; COMDAT (pick any)
.text:000014C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000014C4
.text:000014C4 ; =============== S U B R O U T I N E =======================================
.text:000014C4
.text:000014C4 ; Attributes: bp-based frame
.text:000014C4
.text:000014C4 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:000014C4                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:000014C4 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:000014C4                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:000014C4                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:000014C4
.text:000014C4 var_8           = dword ptr -8
.text:000014C4 var_4           = dword ptr -4
.text:000014C4
.text:000014C4                 push    ebp
.text:000014C5                 mov     ebp, esp
.text:000014C7                 sub     esp, 8
.text:000014CA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000014D1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014D8                 mov     [ebp+var_4], ecx
.text:000014DB                 mov     eax, [ebp+var_4]
.text:000014DE                 mov     ecx, [eax]
.text:000014E0                 mov     [ebp+var_8], ecx
.text:000014E3                 mov     edx, [ebp+var_8]
.text:000014E6                 push    edx             ; void *
.text:000014E7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000014EC                 add     esp, 4
.text:000014EF                 add     esp, 8
.text:000014F2                 cmp     ebp, esp
.text:000014F4                 call    __RTC_CheckEsp
.text:000014F9                 mov     esp, ebp
.text:000014FB                 pop     ebp
.text:000014FC                 retn
.text:000014FC ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000014FC
.text:000014FC ; ---------------------------------------------------------------------------
.text:000014FD                 align 10h
.text:000014FD _text           ends
.text:000014FD
.text:00001500 ; ===========================================================================
.text:00001500
.text:00001500 ; Segment type: Pure code
.text:00001500 ; Segment permissions: Read/Execute
.text:00001500 _text           segment para public 'CODE' use32
.text:00001500                 assume cs:_text
.text:00001500                 ;org 1500h
.text:00001500 ; COMDAT (pick any)
.text:00001500                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001500
.text:00001500 ; =============== S U B R O U T I N E =======================================
.text:00001500
.text:00001500 ; Attributes: bp-based frame
.text:00001500
.text:00001500 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:00001500                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:00001500 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:00001500                                         ; CODE XREF: CObjectVector<CProp>::Clear(void)+6Fp
.text:00001500                                         ; CObjectVector<COneMethodInfo>::Clear(void)+6Fp
.text:00001500
.text:00001500 var_4           = dword ptr -4
.text:00001500
.text:00001500                 push    ebp
.text:00001501                 mov     ebp, esp
.text:00001503                 push    ecx
.text:00001504                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000150B                 mov     [ebp+var_4], ecx
.text:0000150E                 mov     eax, [ebp+var_4]
.text:00001511                 mov     dword ptr [eax+4], 0
.text:00001518                 mov     esp, ebp
.text:0000151A                 pop     ebp
.text:0000151B                 retn
.text:0000151B ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:0000151B
.text:0000151B _text           ends
.text:0000151B
.text:0000151C ; ===========================================================================
.text:0000151C
.text:0000151C ; Segment type: Pure code
.text:0000151C ; Segment permissions: Read/Execute
.text:0000151C _text           segment para public 'CODE' use32
.text:0000151C                 assume cs:_text
.text:0000151C                 ;org 151Ch
.text:0000151C ; COMDAT (pick any)
.text:0000151C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000151C
.text:0000151C ; =============== S U B R O U T I N E =======================================
.text:0000151C
.text:0000151C ; Attributes: bp-based frame
.text:0000151C
.text:0000151C ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:0000151C                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:0000151C ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:0000151C                                         ; CODE XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+7Fp
.text:0000151C
.text:0000151C var_8           = dword ptr -8
.text:0000151C var_4           = dword ptr -4
.text:0000151C arg_0           = dword ptr  8
.text:0000151C
.text:0000151C                 push    ebp
.text:0000151D                 mov     ebp, esp
.text:0000151F                 sub     esp, 8
.text:00001522                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001529                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001530                 mov     [ebp+var_4], ecx
.text:00001533                 mov     ecx, [ebp+var_4]
.text:00001536                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000153B                 mov     eax, [ebp+var_4]
.text:0000153E                 mov     ecx, [eax+4]
.text:00001541                 mov     edx, [ebp+var_4]
.text:00001544                 mov     eax, [edx]
.text:00001546                 mov     edx, [ebp+arg_0]
.text:00001549                 mov     [eax+ecx*4], edx
.text:0000154C                 mov     eax, [ebp+var_4]
.text:0000154F                 mov     ecx, [eax+4]
.text:00001552                 mov     [ebp+var_8], ecx
.text:00001555                 mov     edx, [ebp+var_4]
.text:00001558                 mov     eax, [edx+4]
.text:0000155B                 add     eax, 1
.text:0000155E                 mov     ecx, [ebp+var_4]
.text:00001561                 mov     [ecx+4], eax
.text:00001564                 mov     eax, [ebp+var_8]
.text:00001567                 add     esp, 8
.text:0000156A                 cmp     ebp, esp
.text:0000156C                 call    __RTC_CheckEsp
.text:00001571                 mov     esp, ebp
.text:00001573                 pop     ebp
.text:00001574                 retn    4
.text:00001574 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00001574
.text:00001574 ; ---------------------------------------------------------------------------
.text:00001577                 align 4
.text:00001577 _text           ends
.text:00001577
.text:00001578 ; ===========================================================================
.text:00001578
.text:00001578 ; Segment type: Pure code
.text:00001578 ; Segment permissions: Read/Execute
.text:00001578 _text           segment para public 'CODE' use32
.text:00001578                 assume cs:_text
.text:00001578                 ;org 1578h
.text:00001578 ; COMDAT (pick any)
.text:00001578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001578
.text:00001578 ; =============== S U B R O U T I N E =======================================
.text:00001578
.text:00001578 ; Attributes: bp-based frame
.text:00001578
.text:00001578 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00001578                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00001578 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00001578                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p
.text:00001578                                         ; CObjectVector<CProp>::Clear(void)+3Ep ...
.text:00001578
.text:00001578 var_4           = dword ptr -4
.text:00001578 arg_0           = dword ptr  8
.text:00001578
.text:00001578                 push    ebp
.text:00001579                 mov     ebp, esp
.text:0000157B                 push    ecx
.text:0000157C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001583                 mov     [ebp+var_4], ecx
.text:00001586                 mov     eax, [ebp+var_4]
.text:00001589                 mov     ecx, [eax]
.text:0000158B                 mov     edx, [ebp+arg_0]
.text:0000158E                 lea     eax, [ecx+edx*4]
.text:00001591                 mov     esp, ebp
.text:00001593                 pop     ebp
.text:00001594                 retn    4
.text:00001594 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00001594
.text:00001594 ; ---------------------------------------------------------------------------
.text:00001597                 align 4
.text:00001597 _text           ends
.text:00001597
.text:00001598 ; ===========================================================================
.text:00001598
.text:00001598 ; Segment type: Pure code
.text:00001598 ; Segment permissions: Read/Execute
.text:00001598 _text           segment para public 'CODE' use32
.text:00001598                 assume cs:_text
.text:00001598                 ;org 1598h
.text:00001598 ; COMDAT (pick any)
.text:00001598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001598
.text:00001598 ; =============== S U B R O U T I N E =======================================
.text:00001598
.text:00001598 ; Attributes: bp-based frame
.text:00001598
.text:00001598 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(class CObjectVector<struct CProp> const &)
.text:00001598                 public ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:00001598 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text:00001598                                         ; CODE XREF: CProps::CProps(CProps const &)+15p
.text:00001598
.text:00001598 var_24          = dword ptr -24h
.text:00001598 var_20          = dword ptr -20h
.text:00001598 var_1C          = dword ptr -1Ch
.text:00001598 var_18          = dword ptr -18h
.text:00001598 var_14          = dword ptr -14h
.text:00001598 var_10          = dword ptr -10h
.text:00001598 var_C           = dword ptr -0Ch
.text:00001598 var_4           = dword ptr -4
.text:00001598 arg_0           = dword ptr  8
.text:00001598
.text:00001598                 push    ebp
.text:00001599                 mov     ebp, esp
.text:0000159B                 push    0FFFFFFFFh
.text:0000159D                 push    offset __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text:000015A2                 mov     eax, large fs:0
.text:000015A8                 push    eax
.text:000015A9                 sub     esp, 18h
.text:000015AC                 mov     eax, 0CCCCCCCCh
.text:000015B1                 mov     [ebp+var_24], eax
.text:000015B4                 mov     [ebp+var_20], eax
.text:000015B7                 mov     [ebp+var_1C], eax
.text:000015BA                 mov     [ebp+var_18], eax
.text:000015BD                 mov     [ebp+var_14], eax
.text:000015C0                 mov     [ebp+var_10], eax
.text:000015C3                 mov     eax, dword ptr ds:___security_cookie
.text:000015C8                 xor     eax, ebp
.text:000015CA                 push    eax
.text:000015CB                 lea     eax, [ebp+var_C]
.text:000015CE                 mov     large fs:0, eax
.text:000015D4                 mov     [ebp+var_10], ecx
.text:000015D7                 mov     ecx, [ebp+var_10]
.text:000015DA                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:000015DF                 mov     [ebp+var_4], 0
.text:000015E6                 mov     ecx, [ebp+arg_0]
.text:000015E9                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:000015EE                 mov     [ebp+var_14], eax
.text:000015F1                 mov     eax, [ebp+var_14]
.text:000015F4                 push    eax
.text:000015F5                 mov     ecx, [ebp+var_10]
.text:000015F8                 call    ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve(uint)
.text:000015FD                 mov     [ebp+var_18], 0
.text:00001604                 jmp     short loc_160F
.text:00001606 ; ---------------------------------------------------------------------------
.text:00001606
.text:00001606 loc_1606:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+CDj
.text:00001606                 mov     ecx, [ebp+var_18]
.text:00001609                 add     ecx, 1
.text:0000160C                 mov     [ebp+var_18], ecx
.text:0000160F
.text:0000160F loc_160F:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+6Cj
.text:0000160F                 mov     edx, [ebp+var_18]
.text:00001612                 cmp     edx, [ebp+var_14]
.text:00001615                 jnb     short loc_1667
.text:00001617                 push    18h             ; unsigned int
.text:00001619                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000161E                 add     esp, 4
.text:00001621                 mov     [ebp+var_20], eax
.text:00001624                 mov     byte ptr [ebp+var_4], 1
.text:00001628                 cmp     [ebp+var_20], 0
.text:0000162C                 jz      short loc_1648
.text:0000162E                 mov     eax, [ebp+var_18]
.text:00001631                 push    eax
.text:00001632                 mov     ecx, [ebp+arg_0]
.text:00001635                 call    ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:0000163A                 push    eax             ; struct CProp *
.text:0000163B                 mov     ecx, [ebp+var_20] ; this
.text:0000163E                 call    ??0CProp@@QAE@ABU0@@Z ; CProp::CProp(CProp const &)
.text:00001643                 mov     [ebp+var_24], eax
.text:00001646                 jmp     short loc_164F
.text:00001648 ; ---------------------------------------------------------------------------
.text:00001648
.text:00001648 loc_1648:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+94j
.text:00001648                 mov     [ebp+var_24], 0
.text:0000164F
.text:0000164F loc_164F:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+AEj
.text:0000164F                 mov     ecx, [ebp+var_24]
.text:00001652                 mov     [ebp+var_1C], ecx
.text:00001655                 mov     byte ptr [ebp+var_4], 0
.text:00001659                 mov     edx, [ebp+var_1C]
.text:0000165C                 push    edx
.text:0000165D                 mov     ecx, [ebp+var_10]
.text:00001660                 call    ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved(void * const)
.text:00001665                 jmp     short loc_1606
.text:00001667 ; ---------------------------------------------------------------------------
.text:00001667
.text:00001667 loc_1667:                               ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+7Dj
.text:00001667                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000166E                 mov     eax, [ebp+var_10]
.text:00001671                 mov     ecx, [ebp+var_C]
.text:00001674                 mov     large fs:0, ecx
.text:0000167B                 pop     ecx
.text:0000167C                 add     esp, 24h
.text:0000167F                 cmp     ebp, esp
.text:00001681                 call    __RTC_CheckEsp
.text:00001686                 mov     esp, ebp
.text:00001688                 pop     ebp
.text:00001689                 retn    4
.text:00001689 ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text:00001689
.text:00001689 _text           ends
.text:00001689
.text$x:0000168C ; ===========================================================================
.text$x:0000168C
.text$x:0000168C ; Segment type: Pure code
.text$x:0000168C ; Segment permissions: Read/Execute
.text$x:0000168C _text$x         segment para public 'CODE' use32
.text$x:0000168C                 assume cs:_text$x
.text$x:0000168C                 ;org 168Ch
.text$x:0000168C ; COMDAT (pick associative to section at 1598)
.text$x:0000168C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000168C
.text$x:0000168C ; =============== S U B R O U T I N E =======================================
.text$x:0000168C
.text$x:0000168C
.text$x:0000168C __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
.text$x:0000168C                                         ; DATA XREF: .xdata$x:000016C0o
.text$x:0000168C                 mov     ecx, [ebp-10h]
.text$x:0000168F                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000168F __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 endp
.text$x:0000168F
.text$x:00001694
.text$x:00001694 ; =============== S U B R O U T I N E =======================================
.text$x:00001694
.text$x:00001694
.text$x:00001694 __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
.text$x:00001694                                         ; DATA XREF: .xdata$x:000016C8o
.text$x:00001694                 mov     eax, [ebp-20h]
.text$x:00001697                 push    eax             ; void *
.text$x:00001698                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000169D                 pop     ecx
.text$x:0000169E                 retn
.text$x:0000169E __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 endp
.text$x:0000169E
.text$x:0000169F
.text$x:0000169F ; =============== S U B R O U T I N E =======================================
.text$x:0000169F
.text$x:0000169F
.text$x:0000169F __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
.text$x:0000169F                                         ; DATA XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+5o
.text$x:0000169F
.text$x:0000169F arg_4           = dword ptr  8
.text$x:0000169F
.text$x:0000169F                 mov     edx, [esp+arg_4]
.text$x:000016A3                 lea     eax, [edx+0Ch]
.text$x:000016A6                 mov     ecx, [edx-1Ch]
.text$x:000016A9                 xor     ecx, eax
.text$x:000016AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000016B0                 mov     eax, offset __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.text$x:000016B5                 jmp     ___CxxFrameHandler3
.text$x:000016B5 __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z endp
.text$x:000016B5
.text$x:000016B5 ; ---------------------------------------------------------------------------
.text$x:000016BA                 align 4
.text$x:000016BA _text$x         ends
.text$x:000016BA
.xdata$x:000016BC ; ===========================================================================
.xdata$x:000016BC
.xdata$x:000016BC ; Segment type: Pure data
.xdata$x:000016BC ; Segment permissions: Read
.xdata$x:000016BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000016BC                 assume cs:_xdata$x
.xdata$x:000016BC                 ;org 16BCh
.xdata$x:000016BC ; COMDAT (pick associative to section at 1598)
.xdata$x:000016BC __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db 0FFh
.xdata$x:000016BC                                         ; DATA XREF: .xdata$x:000016D4o
.xdata$x:000016BD                 db 0FFh
.xdata$x:000016BE                 db 0FFh
.xdata$x:000016BF                 db 0FFh
.xdata$x:000016C0                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
.xdata$x:000016C4                 align 8
.xdata$x:000016C8                 dd offset __unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
.xdata$x:000016CC __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z db  22h ; "
.xdata$x:000016CC                                         ; DATA XREF: __ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z+11o
.xdata$x:000016CD                 db    5
.xdata$x:000016CE                 db  93h ; ô
.xdata$x:000016CF                 db  19h
.xdata$x:000016D0                 db    2
.xdata$x:000016D1                 db    0
.xdata$x:000016D2                 db    0
.xdata$x:000016D3                 db    0
.xdata$x:000016D4                 dd offset __unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
.xdata$x:000016D8                 db    0
.xdata$x:000016D9                 db    0
.xdata$x:000016DA                 db    0
.xdata$x:000016DB                 db    0
.xdata$x:000016DC                 db    0
.xdata$x:000016DD                 db    0
.xdata$x:000016DE                 db    0
.xdata$x:000016DF                 db    0
.xdata$x:000016E0                 db    0
.xdata$x:000016E1                 db    0
.xdata$x:000016E2                 db    0
.xdata$x:000016E3                 db    0
.xdata$x:000016E4                 db    0
.xdata$x:000016E5                 db    0
.xdata$x:000016E6                 db    0
.xdata$x:000016E7                 db    0
.xdata$x:000016E8                 db    0
.xdata$x:000016E9                 db    0
.xdata$x:000016EA                 db    0
.xdata$x:000016EB                 db    0
.xdata$x:000016EC                 db    1
.xdata$x:000016ED                 db    0
.xdata$x:000016EE                 db    0
.xdata$x:000016EF                 db    0
.xdata$x:000016EF _xdata$x        ends
.xdata$x:000016EF
.text:000016F0 ; ===========================================================================
.text:000016F0
.text:000016F0 ; Segment type: Pure code
.text:000016F0 ; Segment permissions: Read/Execute
.text:000016F0 _text           segment para public 'CODE' use32
.text:000016F0                 assume cs:_text
.text:000016F0                 ;org 16F0h
.text:000016F0 ; COMDAT (pick any)
.text:000016F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000016F0
.text:000016F0 ; =============== S U B R O U T I N E =======================================
.text:000016F0
.text:000016F0 ; Attributes: bp-based frame
.text:000016F0
.text:000016F0 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:000016F0                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:000016F0 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:000016F0                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+51p
.text:000016F0
.text:000016F0 var_4           = dword ptr -4
.text:000016F0
.text:000016F0                 push    ebp
.text:000016F1                 mov     ebp, esp
.text:000016F3                 push    ecx
.text:000016F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016FB                 mov     [ebp+var_4], ecx
.text:000016FE                 mov     ecx, [ebp+var_4]
.text:00001701                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00001706                 add     esp, 4
.text:00001709                 cmp     ebp, esp
.text:0000170B                 call    __RTC_CheckEsp
.text:00001710                 mov     esp, ebp
.text:00001712                 pop     ebp
.text:00001713                 retn
.text:00001713 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00001713
.text:00001713 _text           ends
.text:00001713
.text:00001714 ; ===========================================================================
.text:00001714
.text:00001714 ; Segment type: Pure code
.text:00001714 ; Segment permissions: Read/Execute
.text:00001714 _text           segment para public 'CODE' use32
.text:00001714                 assume cs:_text
.text:00001714                 ;org 1714h
.text:00001714 ; COMDAT (pick any)
.text:00001714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001714
.text:00001714 ; =============== S U B R O U T I N E =======================================
.text:00001714
.text:00001714 ; Attributes: bp-based frame
.text:00001714
.text:00001714 ; public: struct CProp const & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)const
.text:00001714                 public ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
.text:00001714 ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
.text:00001714                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+9Dp
.text:00001714
.text:00001714 var_4           = dword ptr -4
.text:00001714 arg_0           = dword ptr  8
.text:00001714
.text:00001714                 push    ebp
.text:00001715                 mov     ebp, esp
.text:00001717                 push    ecx
.text:00001718                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000171F                 mov     [ebp+var_4], ecx
.text:00001722                 mov     eax, [ebp+arg_0]
.text:00001725                 push    eax
.text:00001726                 mov     ecx, [ebp+var_4]
.text:00001729                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000172E                 mov     eax, [eax]
.text:00001730                 add     esp, 4
.text:00001733                 cmp     ebp, esp
.text:00001735                 call    __RTC_CheckEsp
.text:0000173A                 mov     esp, ebp
.text:0000173C                 pop     ebp
.text:0000173D                 retn    4
.text:0000173D ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z endp
.text:0000173D
.text:0000173D _text           ends
.text:0000173D
.text:00001740 ; ===========================================================================
.text:00001740
.text:00001740 ; Segment type: Pure code
.text:00001740 ; Segment permissions: Read/Execute
.text:00001740 _text           segment para public 'CODE' use32
.text:00001740                 assume cs:_text
.text:00001740                 ;org 1740h
.text:00001740 ; COMDAT (pick any)
.text:00001740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001740
.text:00001740 ; =============== S U B R O U T I N E =======================================
.text:00001740
.text:00001740 ; Attributes: bp-based frame
.text:00001740
.text:00001740 ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:00001740                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:00001740 ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:00001740                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:00001740
.text:00001740 var_4           = dword ptr -4
.text:00001740 arg_0           = dword ptr  8
.text:00001740
.text:00001740                 push    ebp
.text:00001741                 mov     ebp, esp
.text:00001743                 push    ecx
.text:00001744                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000174B                 mov     [ebp+var_4], ecx
.text:0000174E                 mov     eax, [ebp+var_4]
.text:00001751                 mov     ecx, [eax]
.text:00001753                 mov     edx, [ebp+arg_0]
.text:00001756                 lea     eax, [ecx+edx*4]
.text:00001759                 mov     esp, ebp
.text:0000175B                 pop     ebp
.text:0000175C                 retn    4
.text:0000175C ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:0000175C
.text:0000175C ; ---------------------------------------------------------------------------
.text:0000175F                 align 10h
.text:0000175F _text           ends
.text:0000175F
.text:00001760 ; ===========================================================================
.text:00001760
.text:00001760 ; Segment type: Pure code
.text:00001760 ; Segment permissions: Read/Execute
.text:00001760 _text           segment para public 'CODE' use32
.text:00001760                 assume cs:_text
.text:00001760                 ;org 1760h
.text:00001760 ; COMDAT (pick any)
.text:00001760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001760
.text:00001760 ; =============== S U B R O U T I N E =======================================
.text:00001760
.text:00001760 ; Attributes: bp-based frame
.text:00001760
.text:00001760 ; _DWORD __thiscall CProp::CProp(CProp *this, const struct CProp *)
.text:00001760                 public ??0CProp@@QAE@ABU0@@Z
.text:00001760 ??0CProp@@QAE@ABU0@@Z proc near         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+A6p
.text:00001760
.text:00001760 var_4           = dword ptr -4
.text:00001760 arg_0           = dword ptr  8
.text:00001760
.text:00001760                 push    ebp
.text:00001761                 mov     ebp, esp
.text:00001763                 push    ecx
.text:00001764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000176B                 mov     [ebp+var_4], ecx
.text:0000176E                 mov     eax, [ebp+var_4]
.text:00001771                 mov     ecx, [ebp+arg_0]
.text:00001774                 mov     edx, [ecx]
.text:00001776                 mov     [eax], edx
.text:00001778                 mov     eax, [ebp+var_4]
.text:0000177B                 mov     ecx, [ebp+arg_0]
.text:0000177E                 mov     dl, [ecx+4]
.text:00001781                 mov     [eax+4], dl
.text:00001784                 mov     eax, [ebp+arg_0]
.text:00001787                 add     eax, 8
.text:0000178A                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000178B                 mov     ecx, [ebp+var_4]
.text:0000178E                 add     ecx, 8          ; this
.text:00001791                 call    ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant const &)
.text:00001796                 mov     eax, [ebp+var_4]
.text:00001799                 add     esp, 4
.text:0000179C                 cmp     ebp, esp
.text:0000179E                 call    __RTC_CheckEsp
.text:000017A3                 mov     esp, ebp
.text:000017A5                 pop     ebp
.text:000017A6                 retn    4
.text:000017A6 ??0CProp@@QAE@ABU0@@Z endp
.text:000017A6
.text:000017A6 ; ---------------------------------------------------------------------------
.text:000017A9                 align 4
.text:000017A9 _text           ends
.text:000017A9
.text:000017AC ; ===========================================================================
.text:000017AC
.text:000017AC ; Segment type: Pure code
.text:000017AC ; Segment permissions: Read/Execute
.text:000017AC _text           segment para public 'CODE' use32
.text:000017AC                 assume cs:_text
.text:000017AC                 ;org 17ACh
.text:000017AC ; COMDAT (pick any)
.text:000017AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000017AC
.text:000017AC ; =============== S U B R O U T I N E =======================================
.text:000017AC
.text:000017AC ; Attributes: bp-based frame
.text:000017AC
.text:000017AC ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:000017AC                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:000017AC ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:000017AC                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:000017AC
.text:000017AC var_14          = dword ptr -14h
.text:000017AC var_10          = dword ptr -10h
.text:000017AC Dst             = dword ptr -0Ch
.text:000017AC var_8           = dword ptr -8
.text:000017AC var_4           = dword ptr -4
.text:000017AC
.text:000017AC                 push    ebp
.text:000017AD                 mov     ebp, esp
.text:000017AF                 sub     esp, 14h
.text:000017B2                 mov     eax, 0CCCCCCCCh
.text:000017B7                 mov     [ebp+var_14], eax
.text:000017BA                 mov     [ebp+var_10], eax
.text:000017BD                 mov     [ebp+Dst], eax
.text:000017C0                 mov     [ebp+var_8], eax
.text:000017C3                 mov     [ebp+var_4], eax
.text:000017C6                 mov     [ebp+var_4], ecx
.text:000017C9                 mov     eax, [ebp+var_4]
.text:000017CC                 mov     ecx, [ebp+var_4]
.text:000017CF                 mov     edx, [eax+4]
.text:000017D2                 cmp     edx, [ecx+8]
.text:000017D5                 jnz     loc_1860
.text:000017DB                 mov     eax, [ebp+var_4]
.text:000017DE                 mov     ecx, [eax+8]
.text:000017E1                 shr     ecx, 2
.text:000017E4                 mov     edx, [ebp+var_4]
.text:000017E7                 mov     eax, [edx+8]
.text:000017EA                 lea     ecx, [eax+ecx+1]
.text:000017EE                 mov     [ebp+var_8], ecx
.text:000017F1                 xor     ecx, ecx
.text:000017F3                 mov     eax, [ebp+var_8]
.text:000017F6                 mov     edx, 4
.text:000017FB                 mul     edx
.text:000017FD                 seto    cl
.text:00001800                 neg     ecx
.text:00001802                 or      ecx, eax
.text:00001804                 push    ecx             ; unsigned int
.text:00001805                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000180A                 add     esp, 4
.text:0000180D                 mov     [ebp+var_10], eax
.text:00001810                 mov     eax, [ebp+var_10]
.text:00001813                 mov     [ebp+Dst], eax
.text:00001816                 mov     ecx, [ebp+var_4]
.text:00001819                 cmp     dword ptr [ecx+4], 0
.text:0000181D                 jz      short loc_183B
.text:0000181F                 mov     edx, [ebp+var_4]
.text:00001822                 mov     eax, [edx+4]
.text:00001825                 shl     eax, 2
.text:00001828                 push    eax             ; Size
.text:00001829                 mov     ecx, [ebp+var_4]
.text:0000182C                 mov     edx, [ecx]
.text:0000182E                 push    edx             ; Src
.text:0000182F                 mov     eax, [ebp+Dst]
.text:00001832                 push    eax             ; Dst
.text:00001833                 call    _memcpy
.text:00001838                 add     esp, 0Ch
.text:0000183B
.text:0000183B loc_183B:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:0000183B                 mov     ecx, [ebp+var_4]
.text:0000183E                 mov     edx, [ecx]
.text:00001840                 mov     [ebp+var_14], edx
.text:00001843                 mov     eax, [ebp+var_14]
.text:00001846                 push    eax             ; void *
.text:00001847                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000184C                 add     esp, 4
.text:0000184F                 mov     ecx, [ebp+var_4]
.text:00001852                 mov     edx, [ebp+Dst]
.text:00001855                 mov     [ecx], edx
.text:00001857                 mov     eax, [ebp+var_4]
.text:0000185A                 mov     ecx, [ebp+var_8]
.text:0000185D                 mov     [eax+8], ecx
.text:00001860
.text:00001860 loc_1860:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:00001860                 add     esp, 14h
.text:00001863                 cmp     ebp, esp
.text:00001865                 call    __RTC_CheckEsp
.text:0000186A                 mov     esp, ebp
.text:0000186C                 pop     ebp
.text:0000186D                 retn
.text:0000186D ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:0000186D
.text:0000186D ; ---------------------------------------------------------------------------
.text:0000186E                 align 10h
.text:0000186E _text           ends
.text:0000186E
.text:00001870 ; ===========================================================================
.text:00001870
.text:00001870 ; Segment type: Pure code
.text:00001870 ; Segment permissions: Read/Execute
.text:00001870 _text           segment para public 'CODE' use32
.text:00001870                 assume cs:_text
.text:00001870                 ;org 1870h
.text:00001870 ; COMDAT (pick any)
.text:00001870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00001870
.text:00001870 ; =============== S U B R O U T I N E =======================================
.text:00001870
.text:00001870 ; Attributes: bp-based frame
.text:00001870
.text:00001870 ; public: void __thiscall CRecordVector<void *>::ConstructReserve(unsigned int)
.text:00001870                 public ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
.text:00001870 ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00001870                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+60p
.text:00001870
.text:00001870 var_8           = dword ptr -8
.text:00001870 var_4           = dword ptr -4
.text:00001870 arg_0           = dword ptr  8
.text:00001870
.text:00001870                 push    ebp
.text:00001871                 mov     ebp, esp
.text:00001873                 sub     esp, 8
.text:00001876                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000187D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001884                 mov     [ebp+var_4], ecx
.text:00001887                 cmp     [ebp+arg_0], 0
.text:0000188B                 jz      short loc_18BD
.text:0000188D                 xor     ecx, ecx
.text:0000188F                 mov     eax, [ebp+arg_0]
.text:00001892                 mov     edx, 4
.text:00001897                 mul     edx
.text:00001899                 seto    cl
.text:0000189C                 neg     ecx
.text:0000189E                 or      ecx, eax
.text:000018A0                 push    ecx             ; unsigned int
.text:000018A1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000018A6                 add     esp, 4
.text:000018A9                 mov     [ebp+var_8], eax
.text:000018AC                 mov     eax, [ebp+var_4]
.text:000018AF                 mov     ecx, [ebp+var_8]
.text:000018B2                 mov     [eax], ecx
.text:000018B4                 mov     edx, [ebp+var_4]
.text:000018B7                 mov     eax, [ebp+arg_0]
.text:000018BA                 mov     [edx+8], eax
.text:000018BD
.text:000018BD loc_18BD:                               ; CODE XREF: CRecordVector<void *>::ConstructReserve(uint)+1Bj
.text:000018BD                 add     esp, 8
.text:000018C0                 cmp     ebp, esp
.text:000018C2                 call    __RTC_CheckEsp
.text:000018C7                 mov     esp, ebp
.text:000018C9                 pop     ebp
.text:000018CA                 retn    4
.text:000018CA ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z endp
.text:000018CA
.text:000018CA ; ---------------------------------------------------------------------------
.text:000018CD                 align 10h
.text:000018CD _text           ends
.text:000018CD
.text:000018D0 ; ===========================================================================
.text:000018D0
.text:000018D0 ; Segment type: Pure code
.text:000018D0 ; Segment permissions: Read/Execute
.text:000018D0 _text           segment para public 'CODE' use32
.text:000018D0                 assume cs:_text
.text:000018D0                 ;org 18D0h
.text:000018D0 ; COMDAT (pick any)
.text:000018D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000018D0
.text:000018D0 ; =============== S U B R O U T I N E =======================================
.text:000018D0
.text:000018D0 ; Attributes: bp-based frame
.text:000018D0
.text:000018D0 ; public: void __thiscall CRecordVector<void *>::AddInReserved(void * const)
.text:000018D0                 public ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
.text:000018D0 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
.text:000018D0                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+C8p
.text:000018D0
.text:000018D0 var_4           = dword ptr -4
.text:000018D0 arg_0           = dword ptr  8
.text:000018D0
.text:000018D0                 push    ebp
.text:000018D1                 mov     ebp, esp
.text:000018D3                 push    ecx
.text:000018D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018DB                 mov     [ebp+var_4], ecx
.text:000018DE                 mov     eax, [ebp+var_4]
.text:000018E1                 mov     ecx, [eax+4]
.text:000018E4                 mov     edx, [ebp+var_4]
.text:000018E7                 mov     eax, [edx]
.text:000018E9                 mov     edx, [ebp+arg_0]
.text:000018EC                 mov     [eax+ecx*4], edx
.text:000018EF                 mov     eax, [ebp+var_4]
.text:000018F2                 mov     ecx, [eax+4]
.text:000018F5                 add     ecx, 1
.text:000018F8                 mov     edx, [ebp+var_4]
.text:000018FB                 mov     [edx+4], ecx
.text:000018FE                 mov     esp, ebp
.text:00001900                 pop     ebp
.text:00001901                 retn    4
.text:00001901 ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z endp
.text:00001901
.text:00001901 _text           ends
.text:00001901
UNDEF:00001910 ; ===========================================================================
UNDEF:00001910
UNDEF:00001910 ; Segment type: Externs
UNDEF:00001910 ; UNDEF
UNDEF:00001910                 extrn __RTC_CheckEsp:near
UNDEF:00001910                                         ; CODE XREF: NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)+48p
UNDEF:00001910                                         ; NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)+25p ...
UNDEF:00001914                 extrn __RTC_Shutdown:near
UNDEF:00001914                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001918                 extrn __RTC_InitBase:near
UNDEF:00001918                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000191C ; void __thiscall CProps::AddProp32(CProps *__hidden this, unsigned __int32, unsigned int)
UNDEF:0000191C                 extrn ?AddProp32@CProps@@QAEXKI@Z:near
UNDEF:0000191C                                         ; CODE XREF: NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)+1Ep
UNDEF:0000191C                                         ; CMethodProps::AddProp_NumThreads(uint)+17p ...
UNDEF:00001920 ; int __thiscall CMethodProps::FindProp(CMethodProps *__hidden this, unsigned __int32)
UNDEF:00001920                 extrn ?FindProp@CMethodProps@@QBEHK@Z:near
UNDEF:00001920                                         ; CODE XREF: NArchive::SetMethodProp32(COneMethodInfo &,ulong,uint)+Ap
UNDEF:00001924 ; unsigned int NWindows::NSystem::GetNumberOfProcessors(NWindows::NSystem *__hidden this)
UNDEF:00001924                 extrn ?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:near
UNDEF:00001924                                         ; CODE XREF: NArchive::CMultiMethodProps::Init(void)+17p
UNDEF:00001924                                         ; NArchive::CSingleMethodProps::Init(void)+29p
UNDEF:00001928 ; __int32 __thiscall COneMethodInfo::ParseMethodFromPROPVARIANT(COneMethodInfo *__hidden this, const struct UString *, const struct tagPROPVARIANT *)
UNDEF:00001928                 extrn ?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z:near
UNDEF:00001928                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+37Ap
UNDEF:00001928                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+475p ...
UNDEF:0000192C ; public: __thiscall UString::UString(void)
UNDEF:0000192C                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000192C                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+352p
UNDEF:0000192C                                         ; COneMethodInfo::COneMethodInfo(void)+51p
UNDEF:00001930 ; __int32 __stdcall PROPVARIANT_to_bool(const struct tagPROPVARIANT *, bool *)
UNDEF:00001930                 extrn ?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:near
UNDEF:00001930                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2D0p
UNDEF:00001934 ; __int32 __stdcall ParseMtProp(const struct UString *, const struct tagPROPVARIANT *, unsigned int, unsigned int *)
UNDEF:00001934                 extrn ?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z:near
UNDEF:00001934                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+231p
UNDEF:00001934                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+186p
UNDEF:00001938 ; unsigned int __stdcall ParseStringToUInt32(const struct UString *, unsigned int *)
UNDEF:00001938                 extrn ?ParseStringToUInt32@@YGIABVUString@@AAI@Z:near
UNDEF:00001938                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1BBp
UNDEF:0000193C ; void __thiscall UString::Delete(UString *__hidden this, unsigned int, unsigned int)
UNDEF:0000193C                 extrn ?Delete@UString@@QAEXII@Z:near
UNDEF:0000193C                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+F1p
UNDEF:0000193C                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+176p
UNDEF:00001940 ; bool __thiscall UString::IsPrefixedBy_Ascii_NoCase(UString *__hidden this, const char *)
UNDEF:00001940                 extrn ?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z:near
UNDEF:00001940                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+DEp
UNDEF:00001940                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1EEp ...
UNDEF:00001944 ; __int32 __stdcall ParsePropToUInt32(const struct UString *, const struct tagPROPVARIANT *, unsigned int *)
UNDEF:00001944                 extrn ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:near
UNDEF:00001944                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+B7p
UNDEF:00001944                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+109p ...
UNDEF:00001948 ; void __thiscall UString::Delete(UString *__hidden this, unsigned int)
UNDEF:00001948                 extrn ?Delete@UString@@QAEXI@Z:near
UNDEF:00001948                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+9Dp
UNDEF:0000194C ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:0000194C                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:0000194C                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+47p
UNDEF:0000194C                                         ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+1D3p ...
UNDEF:00001950                 extrn ___security_cookie:near
UNDEF:00001950                                         ; DATA XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+2Cr
UNDEF:00001950                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+26r ...
UNDEF:00001954                 extrn ___CxxFrameHandler3:near
UNDEF:00001954                                         ; CODE XREF: __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z+19j
UNDEF:00001954                                         ; __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z+16j ...
UNDEF:00001958 ; __fastcall __security_check_cookie(x)
UNDEF:00001958                 extrn @__security_check_cookie@4:near
UNDEF:00001958                                         ; CODE XREF: __ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z+Fp
UNDEF:00001958                                         ; __ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z+Cp ...
UNDEF:0000195C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000195C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000195C                                         ; CODE XREF: NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)+4ABp
UNDEF:0000195C                                         ; NArchive::CSingleMethodProps::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+234p
UNDEF:00001960 ; void __cdecl operator delete(void *)
UNDEF:00001960                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00001960                                         ; AString::~AString(void)+23p ...
UNDEF:00001964 ; void __stdcall MyStringLower_Ascii(wchar_t *)
UNDEF:00001964                 extrn ?MyStringLower_Ascii@@YGXPA_W@Z:near
UNDEF:00001964                                         ; CODE XREF: UString::MakeLower_Ascii(void)+14p
UNDEF:00001968 ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
UNDEF:00001968                 extrn ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:00001968                                         ; CODE XREF: UString::IsEqualTo(char const *)+18p
UNDEF:0000196C ; public: __thiscall AString::AString(void)
UNDEF:0000196C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000196C                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+42p
UNDEF:00001970 ; void *__cdecl operator new(unsigned int)
UNDEF:00001970                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CObjectVector<COneMethodInfo>::Add(COneMethodInfo const &)+3Bp
UNDEF:00001970                                         ; CObjectVector<CProp>::CObjectVector<CProp>(CObjectVector<CProp> const &)+81p ...
UNDEF:00001974 ; public: __thiscall UString::UString(class UString const &)
UNDEF:00001974                 extrn ??0UString@@QAE@ABV0@@Z:near
UNDEF:00001974                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+63p
UNDEF:00001978 ; public: __thiscall AString::AString(class AString const &)
UNDEF:00001978                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:00001978                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(COneMethodInfo const &)+4Dp
UNDEF:0000197C ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:0000197C                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:0000197C                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00001980 ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this, const struct NWindows::NCOM::CPropVariant *)
UNDEF:00001980                 extrn ??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:near
UNDEF:00001980                                         ; CODE XREF: CProp::CProp(CProp const &)+31p
UNDEF:00001984 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001984                 extrn _memcpy:near      ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+87p
UNDEF:00001984
UNDEF:00001984
UNDEF:00001984                 end