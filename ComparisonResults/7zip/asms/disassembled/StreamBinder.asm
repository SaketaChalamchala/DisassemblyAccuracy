.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 152E0CAD1852FB36A76279FB04ED0E2D
.text:00000000 ; Input CRC32 : 0B471D2D
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\StreamBinder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __int32 __stdcall CBinderInStream::Read(CBinderInStream *this, void *Dst, size_t Size, unsigned int *)
.text:00000000                 public ?Read@CBinderInStream@@UAGJPAXIPAI@Z
.text:00000000 ?Read@CBinderInStream@@UAGJPAXIPAI@Z proc near ; DATA XREF: .rdata:00000694o
.text:00000000
.text:00000000 this            = dword ptr  8
.text:00000000 Dst             = dword ptr  0Ch
.text:00000000 Size            = dword ptr  10h
.text:00000000 arg_C           = dword ptr  14h
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 mov     eax, [ebp+arg_C]
.text:00000006                 push    eax             ; unsigned int *
.text:00000007                 mov     ecx, [ebp+Size]
.text:0000000A                 push    ecx             ; Size
.text:0000000B                 mov     edx, [ebp+Dst]
.text:0000000E                 push    edx             ; Dst
.text:0000000F                 mov     eax, [ebp+this]
.text:00000012                 mov     ecx, [eax+8]    ; this
.text:00000015                 call    ?Read@CStreamBinder@@QAEJPAXIPAI@Z ; CStreamBinder::Read(void *,uint,uint *)
.text:0000001A                 cmp     ebp, esp
.text:0000001C                 call    __RTC_CheckEsp
.text:00000021                 pop     ebp
.text:00000022                 retn    10h
.text:00000022 ?Read@CBinderInStream@@UAGJPAXIPAI@Z endp
.text:00000022
.text:00000022 ; ---------------------------------------------------------------------------
.text:00000025                 align 10h
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; __int32 __stdcall CBinderOutStream::Write(CBinderOutStream *this, const void *, unsigned int, unsigned int *)
.text:00000030                 public ?Write@CBinderOutStream@@UAGJPBXIPAI@Z
.text:00000030 ?Write@CBinderOutStream@@UAGJPBXIPAI@Z proc near
.text:00000030                                         ; DATA XREF: .rdata:00000B14o
.text:00000030
.text:00000030 this            = dword ptr  8
.text:00000030 arg_4           = dword ptr  0Ch
.text:00000030 arg_8           = dword ptr  10h
.text:00000030 arg_C           = dword ptr  14h
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 mov     eax, [ebp+arg_C]
.text:00000036                 push    eax             ; unsigned int *
.text:00000037                 mov     ecx, [ebp+arg_8]
.text:0000003A                 push    ecx             ; unsigned int
.text:0000003B                 mov     edx, [ebp+arg_4]
.text:0000003E                 push    edx             ; void *
.text:0000003F                 mov     eax, [ebp+this]
.text:00000042                 mov     ecx, [eax+8]    ; this
.text:00000045                 call    ?Write@CStreamBinder@@QAEJPBXIPAI@Z ; CStreamBinder::Write(void const *,uint,uint *)
.text:0000004A                 cmp     ebp, esp
.text:0000004C                 call    __RTC_CheckEsp
.text:00000051                 pop     ebp
.text:00000052                 retn    10h
.text:00000052 ?Write@CBinderOutStream@@UAGJPBXIPAI@Z endp
.text:00000052
.text:00000052 ; ---------------------------------------------------------------------------
.text:00000055                 align 10h
.text:00000060
.text:00000060 ; =============== S U B R O U T I N E =======================================
.text:00000060
.text:00000060 ; Attributes: bp-based frame
.text:00000060
.text:00000060 ; unsigned int __thiscall CStreamBinder::CreateEvents(CStreamBinder *__hidden this)
.text:00000060                 public ?CreateEvents@CStreamBinder@@QAEIXZ
.text:00000060 ?CreateEvents@CStreamBinder@@QAEIXZ proc near
.text:00000060
.text:00000060 var_C           = dword ptr -0Ch
.text:00000060 var_8           = dword ptr -8
.text:00000060 var_4           = dword ptr -4
.text:00000060
.text:00000060                 push    ebp
.text:00000061                 mov     ebp, esp
.text:00000063                 sub     esp, 0Ch
.text:00000066                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000006D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000074                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000007B                 mov     [ebp+var_4], ecx
.text:0000007E                 mov     ecx, [ebp+var_4] ; this
.text:00000081                 call    ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::Create(void)
.text:00000086                 mov     [ebp+var_8], eax
.text:00000089                 cmp     [ebp+var_8], 0
.text:0000008D                 jz      short loc_94
.text:0000008F                 mov     eax, [ebp+var_8]
.text:00000092                 jmp     short loc_BC
.text:00000094 ; ---------------------------------------------------------------------------
.text:00000094
.text:00000094 loc_94:                                 ; CODE XREF: CStreamBinder::CreateEvents(void)+2Dj
.text:00000094                 push    0               ; bool
.text:00000096                 mov     ecx, [ebp+var_4]
.text:00000099                 add     ecx, 4          ; this
.text:0000009C                 call    ?Create@CManualResetEvent@NSynchronization@NWindows@@QAEI_N@Z ; NWindows::NSynchronization::CManualResetEvent::Create(bool)
.text:000000A1                 mov     [ebp+var_C], eax
.text:000000A4                 cmp     [ebp+var_C], 0
.text:000000A8                 jz      short loc_AF
.text:000000AA                 mov     eax, [ebp+var_C]
.text:000000AD                 jmp     short loc_BC
.text:000000AF ; ---------------------------------------------------------------------------
.text:000000AF
.text:000000AF loc_AF:                                 ; CODE XREF: CStreamBinder::CreateEvents(void)+48j
.text:000000AF                 push    0               ; bool
.text:000000B1                 mov     ecx, [ebp+var_4]
.text:000000B4                 add     ecx, 8          ; this
.text:000000B7                 call    ?Create@CManualResetEvent@NSynchronization@NWindows@@QAEI_N@Z ; NWindows::NSynchronization::CManualResetEvent::Create(bool)
.text:000000BC
.text:000000BC loc_BC:                                 ; CODE XREF: CStreamBinder::CreateEvents(void)+32j
.text:000000BC                                         ; CStreamBinder::CreateEvents(void)+4Dj
.text:000000BC                 add     esp, 0Ch
.text:000000BF                 cmp     ebp, esp
.text:000000C1                 call    __RTC_CheckEsp
.text:000000C6                 mov     esp, ebp
.text:000000C8                 pop     ebp
.text:000000C9                 retn
.text:000000C9 ?CreateEvents@CStreamBinder@@QAEIXZ endp
.text:000000C9
.text:000000C9 ; ---------------------------------------------------------------------------
.text:000000CA                 align 10h
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; void __thiscall CStreamBinder::ReInit(CStreamBinder *__hidden this)
.text:000000D0                 public ?ReInit@CStreamBinder@@QAEXXZ
.text:000000D0 ?ReInit@CStreamBinder@@QAEXXZ proc near
.text:000000D0
.text:000000D0 var_4           = dword ptr -4
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    ecx
.text:000000D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000000DB                 mov     [ebp+var_4], ecx
.text:000000DE                 mov     ecx, [ebp+var_4] ; this
.text:000000E1                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000000E6                 mov     ecx, [ebp+var_4]
.text:000000E9                 add     ecx, 4          ; this
.text:000000EC                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000000F1                 mov     ecx, [ebp+var_4]
.text:000000F4                 add     ecx, 8          ; this
.text:000000F7                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000000FC                 mov     eax, [ebp+var_4]
.text:000000FF                 mov     byte ptr [eax+0Ch], 0
.text:00000103                 mov     ecx, [ebp+var_4]
.text:00000106                 mov     byte ptr [ecx+0Dh], 1
.text:0000010A                 mov     edx, [ebp+var_4]
.text:0000010D                 mov     dword ptr [edx+10h], 0
.text:00000114                 mov     eax, [ebp+var_4]
.text:00000117                 mov     dword ptr [eax+14h], 0
.text:0000011E                 mov     ecx, [ebp+var_4]
.text:00000121                 mov     dword ptr [ecx+18h], 0
.text:00000128                 mov     dword ptr [ecx+1Ch], 0
.text:0000012F                 add     esp, 4
.text:00000132                 cmp     ebp, esp
.text:00000134                 call    __RTC_CheckEsp
.text:00000139                 mov     esp, ebp
.text:0000013B                 pop     ebp
.text:0000013C                 retn
.text:0000013C ?ReInit@CStreamBinder@@QAEXXZ endp
.text:0000013C
.text:0000013C ; ---------------------------------------------------------------------------
.text:0000013D                 align 10h
.text:00000140
.text:00000140 ; =============== S U B R O U T I N E =======================================
.text:00000140
.text:00000140 ; Attributes: bp-based frame
.text:00000140
.text:00000140 ; void __thiscall CStreamBinder::CreateStreams(CStreamBinder *this, struct ISequentialInStream **, struct ISequentialOutStream **)
.text:00000140                 public ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z
.text:00000140 ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z proc near
.text:00000140
.text:00000140 var_48          = dword ptr -48h
.text:00000140 var_44          = dword ptr -44h
.text:00000140 var_40          = dword ptr -40h
.text:00000140 var_3C          = dword ptr -3Ch
.text:00000140 var_38          = dword ptr -38h
.text:00000140 var_34          = dword ptr -34h
.text:00000140 var_2C          = byte ptr -2Ch
.text:00000140 var_24          = dword ptr -24h
.text:00000140 var_1C          = byte ptr -1Ch
.text:00000140 var_14          = dword ptr -14h
.text:00000140 var_10          = dword ptr -10h
.text:00000140 var_C           = dword ptr -0Ch
.text:00000140 var_4           = dword ptr -4
.text:00000140 arg_0           = dword ptr  8
.text:00000140 arg_4           = dword ptr  0Ch
.text:00000140
.text:00000140                 push    ebp
.text:00000141                 mov     ebp, esp
.text:00000143                 push    0FFFFFFFFh
.text:00000145                 push    offset __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z
.text:0000014A                 mov     eax, large fs:0
.text:00000150                 push    eax
.text:00000151                 sub     esp, 3Ch
.text:00000154                 push    edi
.text:00000155                 push    ecx
.text:00000156                 lea     edi, [ebp+var_48]
.text:00000159                 mov     ecx, 0Fh
.text:0000015E                 mov     eax, 0CCCCCCCCh
.text:00000163                 rep stosd
.text:00000165                 pop     ecx
.text:00000166                 mov     eax, dword ptr ds:___security_cookie
.text:0000016B                 xor     eax, ebp
.text:0000016D                 push    eax
.text:0000016E                 lea     eax, [ebp+var_C]
.text:00000171                 mov     large fs:0, eax
.text:00000177                 mov     [ebp+var_10], ecx
.text:0000017A                 mov     eax, [ebp+var_10]
.text:0000017D                 mov     byte ptr [eax+0Ch], 0
.text:00000181                 mov     ecx, [ebp+var_10]
.text:00000184                 mov     byte ptr [ecx+0Dh], 1
.text:00000188                 mov     edx, [ebp+var_10]
.text:0000018B                 mov     dword ptr [edx+10h], 0
.text:00000192                 mov     eax, [ebp+var_10]
.text:00000195                 mov     dword ptr [eax+14h], 0
.text:0000019C                 mov     ecx, [ebp+var_10]
.text:0000019F                 mov     dword ptr [ecx+18h], 0
.text:000001A6                 mov     dword ptr [ecx+1Ch], 0
.text:000001AD                 push    0Ch             ; unsigned int
.text:000001AF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000001B4                 add     esp, 4
.text:000001B7                 mov     [ebp+var_38], eax
.text:000001BA                 mov     [ebp+var_4], 0
.text:000001C1                 cmp     [ebp+var_38], 0
.text:000001C5                 jz      short loc_1D8
.text:000001C7                 mov     edx, [ebp+var_10]
.text:000001CA                 push    edx
.text:000001CB                 mov     ecx, [ebp+var_38]
.text:000001CE                 call    ??0CBinderInStream@@QAE@PAVCStreamBinder@@@Z ; CBinderInStream::CBinderInStream(CStreamBinder *)
.text:000001D3                 mov     [ebp+var_44], eax
.text:000001D6                 jmp     short loc_1DF
.text:000001D8 ; ---------------------------------------------------------------------------
.text:000001D8
.text:000001D8 loc_1D8:                                ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+85j
.text:000001D8                 mov     [ebp+var_44], 0
.text:000001DF
.text:000001DF loc_1DF:                                ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+96j
.text:000001DF                 mov     eax, [ebp+var_44]
.text:000001E2                 mov     [ebp+var_34], eax
.text:000001E5                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000001EC                 mov     ecx, [ebp+var_34]
.text:000001EF                 mov     [ebp+var_14], ecx
.text:000001F2                 mov     edx, [ebp+var_14]
.text:000001F5                 push    edx
.text:000001F6                 lea     ecx, [ebp+var_1C]
.text:000001F9                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:000001FE                 mov     [ebp+var_4], 1
.text:00000205                 lea     ecx, [ebp+var_1C]
.text:00000208                 call    ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach(void)
.text:0000020D                 mov     ecx, [ebp+arg_0]
.text:00000210                 mov     [ecx], eax
.text:00000212                 push    0Ch             ; unsigned int
.text:00000214                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000219                 add     esp, 4
.text:0000021C                 mov     [ebp+var_40], eax
.text:0000021F                 mov     byte ptr [ebp+var_4], 2
.text:00000223                 cmp     [ebp+var_40], 0
.text:00000227                 jz      short loc_23A
.text:00000229                 mov     edx, [ebp+var_10]
.text:0000022C                 push    edx
.text:0000022D                 mov     ecx, [ebp+var_40]
.text:00000230                 call    ??0CBinderOutStream@@QAE@PAVCStreamBinder@@@Z ; CBinderOutStream::CBinderOutStream(CStreamBinder *)
.text:00000235                 mov     [ebp+var_48], eax
.text:00000238                 jmp     short loc_241
.text:0000023A ; ---------------------------------------------------------------------------
.text:0000023A
.text:0000023A loc_23A:                                ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+E7j
.text:0000023A                 mov     [ebp+var_48], 0
.text:00000241
.text:00000241 loc_241:                                ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+F8j
.text:00000241                 mov     eax, [ebp+var_48]
.text:00000244                 mov     [ebp+var_3C], eax
.text:00000247                 mov     byte ptr [ebp+var_4], 1
.text:0000024B                 mov     ecx, [ebp+var_3C]
.text:0000024E                 mov     [ebp+var_24], ecx
.text:00000251                 mov     edx, [ebp+var_24]
.text:00000254                 push    edx
.text:00000255                 lea     ecx, [ebp+var_2C]
.text:00000258                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:0000025D                 mov     byte ptr [ebp+var_4], 3
.text:00000261                 lea     ecx, [ebp+var_2C]
.text:00000264                 call    ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach(void)
.text:00000269                 mov     ecx, [ebp+arg_4]
.text:0000026C                 mov     [ecx], eax
.text:0000026E                 mov     byte ptr [ebp+var_4], 1
.text:00000272                 lea     ecx, [ebp+var_2C]
.text:00000275                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000027A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000281                 lea     ecx, [ebp+var_1C]
.text:00000284                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00000289                 push    edx
.text:0000028A                 mov     ecx, ebp
.text:0000028C                 push    eax
.text:0000028D                 lea     edx, $LN15
.text:00000293                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000298                 pop     eax
.text:00000299                 pop     edx
.text:0000029A                 mov     ecx, [ebp+var_C]
.text:0000029D                 mov     large fs:0, ecx
.text:000002A4                 pop     ecx
.text:000002A5                 pop     edi
.text:000002A6                 add     esp, 48h
.text:000002A9                 cmp     ebp, esp
.text:000002AB                 call    __RTC_CheckEsp
.text:000002B0                 mov     esp, ebp
.text:000002B2                 pop     ebp
.text:000002B3                 retn    8
.text:000002B3 ?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z endp
.text:000002B3
.text:000002B3 ; ---------------------------------------------------------------------------
.text:000002B6                 align 4
.text:000002B8 $LN15           dd 2                    ; DATA XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+14Do
.text:000002BC                 dd offset $LN14
.text:000002C0 $LN14           dd 0FFFFFFE4h, 4        ; DATA XREF: .text:000002BCo
.text:000002C8                 dd offset $LN11         ; "inStreamLoc"
.text:000002CC                 dd 0FFFFFFD4h, 4
.text:000002D4                 dd offset $LN12         ; "outStreamLoc"
.text:000002D8 $LN12           db 'outStreamLoc',0     ; DATA XREF: .text:000002D4o
.text:000002E5 $LN11           db 'inStreamLoc',0      ; DATA XREF: .text:000002C8o
.text:000002F1                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __int32 __thiscall CStreamBinder::Read(CStreamBinder *this, void *Dst, size_t Size, unsigned int *)
.text:00000300                 public ?Read@CStreamBinder@@QAEJPAXIPAI@Z
.text:00000300 ?Read@CStreamBinder@@QAEJPAXIPAI@Z proc near
.text:00000300                                         ; CODE XREF: CBinderInStream::Read(void *,uint,uint *)+15p
.text:00000300
.text:00000300 var_8           = dword ptr -8
.text:00000300 var_4           = dword ptr -4
.text:00000300 Dst             = dword ptr  8
.text:00000300 Size            = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 sub     esp, 8
.text:00000306                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000030D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000314                 mov     [ebp+var_4], ecx
.text:00000317                 cmp     [ebp+arg_8], 0
.text:0000031B                 jz      short loc_326
.text:0000031D                 mov     eax, [ebp+arg_8]
.text:00000320                 mov     dword ptr [eax], 0
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+1Bj
.text:00000326                 cmp     [ebp+Size], 0
.text:0000032A                 jz      loc_3F5
.text:00000330                 mov     ecx, [ebp+var_4]
.text:00000333                 movzx   edx, byte ptr [ecx+0Dh]
.text:00000337                 test    edx, edx
.text:00000339                 jz      short loc_35E
.text:0000033B                 mov     ecx, [ebp+var_4]
.text:0000033E                 add     ecx, 4          ; this
.text:00000341                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00000346                 mov     [ebp+var_8], eax
.text:00000349                 cmp     [ebp+var_8], 0
.text:0000034D                 jz      short loc_357
.text:0000034F                 mov     eax, [ebp+var_8]
.text:00000352                 jmp     loc_3F7
.text:00000357 ; ---------------------------------------------------------------------------
.text:00000357
.text:00000357 loc_357:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+4Dj
.text:00000357                 mov     eax, [ebp+var_4]
.text:0000035A                 mov     byte ptr [eax+0Dh], 0
.text:0000035E
.text:0000035E loc_35E:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+39j
.text:0000035E                 mov     ecx, [ebp+var_4]
.text:00000361                 mov     edx, [ebp+Size]
.text:00000364                 cmp     edx, [ecx+10h]
.text:00000367                 jbe     short loc_372
.text:00000369                 mov     eax, [ebp+var_4]
.text:0000036C                 mov     ecx, [eax+10h]
.text:0000036F                 mov     [ebp+Size], ecx
.text:00000372
.text:00000372 loc_372:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+67j
.text:00000372                 cmp     [ebp+Size], 0
.text:00000376                 jz      short loc_3F5
.text:00000378                 mov     edx, [ebp+Size]
.text:0000037B                 push    edx             ; Size
.text:0000037C                 mov     eax, [ebp+var_4]
.text:0000037F                 mov     ecx, [eax+14h]
.text:00000382                 push    ecx             ; Src
.text:00000383                 mov     edx, [ebp+Dst]
.text:00000386                 push    edx             ; Dst
.text:00000387                 call    _memcpy
.text:0000038C                 add     esp, 0Ch
.text:0000038F                 mov     eax, [ebp+var_4]
.text:00000392                 mov     ecx, [eax+14h]
.text:00000395                 add     ecx, [ebp+Size]
.text:00000398                 mov     edx, [ebp+var_4]
.text:0000039B                 mov     [edx+14h], ecx
.text:0000039E                 mov     eax, [ebp+Size]
.text:000003A1                 xor     ecx, ecx
.text:000003A3                 mov     edx, [ebp+var_4]
.text:000003A6                 add     eax, [edx+18h]
.text:000003A9                 adc     ecx, [edx+1Ch]
.text:000003AC                 mov     edx, [ebp+var_4]
.text:000003AF                 mov     [edx+18h], eax
.text:000003B2                 mov     [edx+1Ch], ecx
.text:000003B5                 cmp     [ebp+arg_8], 0
.text:000003B9                 jz      short loc_3C3
.text:000003BB                 mov     eax, [ebp+arg_8]
.text:000003BE                 mov     ecx, [ebp+Size]
.text:000003C1                 mov     [eax], ecx
.text:000003C3
.text:000003C3 loc_3C3:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+B9j
.text:000003C3                 mov     edx, [ebp+var_4]
.text:000003C6                 mov     eax, [edx+10h]
.text:000003C9                 sub     eax, [ebp+Size]
.text:000003CC                 mov     ecx, [ebp+var_4]
.text:000003CF                 mov     [ecx+10h], eax
.text:000003D2                 mov     edx, [ebp+var_4]
.text:000003D5                 cmp     dword ptr [edx+10h], 0
.text:000003D9                 jnz     short loc_3F5
.text:000003DB                 mov     eax, [ebp+var_4]
.text:000003DE                 mov     byte ptr [eax+0Dh], 1
.text:000003E2                 mov     ecx, [ebp+var_4]
.text:000003E5                 add     ecx, 4          ; this
.text:000003E8                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000003ED                 mov     ecx, [ebp+var_4] ; this
.text:000003F0                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000003F5
.text:000003F5 loc_3F5:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+2Aj
.text:000003F5                                         ; CStreamBinder::Read(void *,uint,uint *)+76j ...
.text:000003F5                 xor     eax, eax
.text:000003F7
.text:000003F7 loc_3F7:                                ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+52j
.text:000003F7                 add     esp, 8
.text:000003FA                 cmp     ebp, esp
.text:000003FC                 call    __RTC_CheckEsp
.text:00000401                 mov     esp, ebp
.text:00000403                 pop     ebp
.text:00000404                 retn    0Ch
.text:00000404 ?Read@CStreamBinder@@QAEJPAXIPAI@Z endp
.text:00000404
.text:00000404 ; ---------------------------------------------------------------------------
.text:00000407                 align 10h
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; __int32 __thiscall CStreamBinder::Write(CStreamBinder *this, const void *, unsigned int, unsigned int *)
.text:00000410                 public ?Write@CStreamBinder@@QAEJPBXIPAI@Z
.text:00000410 ?Write@CStreamBinder@@QAEJPBXIPAI@Z proc near
.text:00000410                                         ; CODE XREF: CBinderOutStream::Write(void const *,uint,uint *)+15p
.text:00000410
.text:00000410 var_18          = dword ptr -18h
.text:00000410 var_14          = dword ptr -14h
.text:00000410 Handles         = dword ptr -10h
.text:00000410 var_C           = dword ptr -0Ch
.text:00000410 var_8           = dword ptr -8
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410 arg_4           = dword ptr  0Ch
.text:00000410 arg_8           = dword ptr  10h
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 sub     esp, 18h
.text:00000416                 push    esi
.text:00000417                 mov     eax, 0CCCCCCCCh
.text:0000041C                 mov     [ebp+var_18], eax
.text:0000041F                 mov     [ebp+var_14], eax
.text:00000422                 mov     [ebp+Handles], eax
.text:00000425                 mov     [ebp+var_C], eax
.text:00000428                 mov     [ebp+var_8], eax
.text:0000042B                 mov     [ebp+var_4], eax
.text:0000042E                 mov     [ebp+var_4], ecx
.text:00000431                 cmp     [ebp+arg_8], 0
.text:00000435                 jz      short loc_440
.text:00000437                 mov     eax, [ebp+arg_8]
.text:0000043A                 mov     dword ptr [eax], 0
.text:00000440
.text:00000440 loc_440:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+25j
.text:00000440                 cmp     [ebp+arg_4], 0
.text:00000444                 jnz     short loc_44D
.text:00000446                 xor     eax, eax
.text:00000448                 jmp     loc_4E7
.text:0000044D ; ---------------------------------------------------------------------------
.text:0000044D
.text:0000044D loc_44D:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+34j
.text:0000044D                 mov     ecx, [ebp+var_4]
.text:00000450                 movzx   edx, byte ptr [ecx+0Ch]
.text:00000454                 test    edx, edx
.text:00000456                 jnz     loc_4E2
.text:0000045C                 mov     eax, [ebp+var_4]
.text:0000045F                 mov     ecx, [ebp+arg_0]
.text:00000462                 mov     [eax+14h], ecx
.text:00000465                 mov     edx, [ebp+var_4]
.text:00000468                 mov     eax, [ebp+arg_4]
.text:0000046B                 mov     [edx+10h], eax
.text:0000046E                 mov     ecx, [ebp+var_4]
.text:00000471                 add     ecx, 4          ; this
.text:00000474                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000479                 mov     ecx, [ebp+var_4]
.text:0000047C                 call    ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *(void)
.text:00000481                 mov     [ebp+Handles], eax
.text:00000484                 mov     ecx, [ebp+var_4]
.text:00000487                 add     ecx, 8
.text:0000048A                 call    ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *(void)
.text:0000048F                 mov     [ebp+var_C], eax
.text:00000492                 mov     esi, esp
.text:00000494                 push    0FFFFFFFFh      ; dwMilliseconds
.text:00000496                 push    0               ; bWaitAll
.text:00000498                 lea     ecx, [ebp+Handles]
.text:0000049B                 push    ecx             ; lpHandles
.text:0000049C                 push    2               ; nCount
.text:0000049E                 call    dword ptr ds:__imp__WaitForMultipleObjects@16 ; WaitForMultipleObjects(x,x,x,x)
.text:000004A4                 cmp     esi, esp
.text:000004A6                 call    __RTC_CheckEsp
.text:000004AB                 mov     [ebp+var_18], eax
.text:000004AE                 cmp     [ebp+var_18], 2
.text:000004B2                 jb      short loc_4BB
.text:000004B4                 mov     eax, 80004005h
.text:000004B9                 jmp     short loc_4E7
.text:000004BB ; ---------------------------------------------------------------------------
.text:000004BB
.text:000004BB loc_4BB:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+A2j
.text:000004BB                 mov     edx, [ebp+var_4]
.text:000004BE                 mov     eax, [ebp+arg_4]
.text:000004C1                 sub     eax, [edx+10h]
.text:000004C4                 mov     [ebp+arg_4], eax
.text:000004C7                 jz      short loc_4DB
.text:000004C9                 cmp     [ebp+arg_8], 0
.text:000004CD                 jz      short loc_4D7
.text:000004CF                 mov     ecx, [ebp+arg_8]
.text:000004D2                 mov     edx, [ebp+arg_4]
.text:000004D5                 mov     [ecx], edx
.text:000004D7
.text:000004D7 loc_4D7:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+BDj
.text:000004D7                 xor     eax, eax
.text:000004D9                 jmp     short loc_4E7
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DB
.text:000004DB loc_4DB:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+B7j
.text:000004DB                 mov     eax, [ebp+var_4]
.text:000004DE                 mov     byte ptr [eax+0Ch], 1
.text:000004E2
.text:000004E2 loc_4E2:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+46j
.text:000004E2                 mov     eax, 20000010h
.text:000004E7
.text:000004E7 loc_4E7:                                ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+38j
.text:000004E7                                         ; CStreamBinder::Write(void const *,uint,uint *)+A9j ...
.text:000004E7                 push    edx
.text:000004E8                 mov     ecx, ebp
.text:000004EA                 push    eax
.text:000004EB                 lea     edx, $LN11_0
.text:000004F1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000004F6                 pop     eax
.text:000004F7                 pop     edx
.text:000004F8                 pop     esi
.text:000004F9                 add     esp, 18h
.text:000004FC                 cmp     ebp, esp
.text:000004FE                 call    __RTC_CheckEsp
.text:00000503                 mov     esp, ebp
.text:00000505                 pop     ebp
.text:00000506                 retn    0Ch
.text:00000506 ?Write@CStreamBinder@@QAEJPBXIPAI@Z endp
.text:00000506
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000509                 align 4
.text:0000050C $LN11_0         dd 1                    ; DATA XREF: CStreamBinder::Write(void const *,uint,uint *)+DBo
.text:00000510                 dd offset $LN10
.text:00000514 $LN10           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00000510o
.text:0000051C                 dd offset $LN9          ; "events"
.text:00000520 $LN9            db 'events',0           ; DATA XREF: .text:0000051Co
.text:00000527                 align 4
.text:00000527 _text           ends
.text:00000527
.rtc$TMZ:00000528 ; ===========================================================================
.rtc$TMZ:00000528
.rtc$TMZ:00000528 ; Segment type: Pure data
.rtc$TMZ:00000528 ; Segment permissions: Read
.rtc$TMZ:00000528 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000528                 assume cs:_rtc$TMZ
.rtc$TMZ:00000528                 ;org 528h
.rtc$TMZ:00000528 ; COMDAT (pick any)
.rtc$TMZ:00000528 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000528 _rtc$TMZ        ends
.rtc$TMZ:00000528
.rtc$IMZ:0000052C ; ===========================================================================
.rtc$IMZ:0000052C
.rtc$IMZ:0000052C ; Segment type: Pure data
.rtc$IMZ:0000052C ; Segment permissions: Read
.rtc$IMZ:0000052C _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:0000052C                 assume cs:_rtc$IMZ
.rtc$IMZ:0000052C                 ;org 52Ch
.rtc$IMZ:0000052C ; COMDAT (pick any)
.rtc$IMZ:0000052C __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:0000052C _rtc$IMZ        ends
.rtc$IMZ:0000052C
.text:00000530 ; ===========================================================================
.text:00000530
.text:00000530 ; Segment type: Pure code
.text:00000530 ; Segment permissions: Read/Execute
.text:00000530 _text           segment para public 'CODE' use32
.text:00000530                 assume cs:_text
.text:00000530                 ;org 530h
.text:00000530 ; COMDAT (pick any)
.text:00000530                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000530
.text:00000530 ; =============== S U B R O U T I N E =======================================
.text:00000530
.text:00000530 ; Attributes: bp-based frame
.text:00000530
.text:00000530 ; unsigned int __thiscall NWindows::NSynchronization::CManualResetEvent::Create(NWindows::NSynchronization::CManualResetEvent *this, bool)
.text:00000530                 public ?Create@CManualResetEvent@NSynchronization@NWindows@@QAEI_N@Z
.text:00000530 ?Create@CManualResetEvent@NSynchronization@NWindows@@QAEI_N@Z proc near
.text:00000530                                         ; CODE XREF: CStreamBinder::CreateEvents(void)+3Cp
.text:00000530                                         ; CStreamBinder::CreateEvents(void)+57p
.text:00000530
.text:00000530 var_4           = dword ptr -4
.text:00000530 arg_0           = byte ptr  8
.text:00000530
.text:00000530                 push    ebp
.text:00000531                 mov     ebp, esp
.text:00000533                 push    ecx
.text:00000534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000053B                 mov     [ebp+var_4], ecx
.text:0000053E                 movzx   eax, [ebp+arg_0]
.text:00000542                 neg     eax
.text:00000544                 sbb     eax, eax
.text:00000546                 neg     eax
.text:00000548                 push    eax
.text:00000549                 mov     ecx, [ebp+var_4]
.text:0000054C                 push    ecx
.text:0000054D                 call    _ManualResetEvent_Create@8 ; ManualResetEvent_Create(x,x)
.text:00000552                 add     esp, 4
.text:00000555                 cmp     ebp, esp
.text:00000557                 call    __RTC_CheckEsp
.text:0000055C                 mov     esp, ebp
.text:0000055E                 pop     ebp
.text:0000055F                 retn    4
.text:0000055F ?Create@CManualResetEvent@NSynchronization@NWindows@@QAEI_N@Z endp
.text:0000055F
.text:0000055F ; ---------------------------------------------------------------------------
.text:00000562                 align 4
.text:00000562 _text           ends
.text:00000562
.text:00000564 ; ===========================================================================
.text:00000564
.text:00000564 ; Segment type: Pure code
.text:00000564 ; Segment permissions: Read/Execute
.text:00000564 _text           segment para public 'CODE' use32
.text:00000564                 assume cs:_text
.text:00000564                 ;org 564h
.text:00000564 ; COMDAT (pick any)
.text:00000564                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000564
.text:00000564 ; =============== S U B R O U T I N E =======================================
.text:00000564
.text:00000564 ; Attributes: bp-based frame
.text:00000564
.text:00000564 ; unsigned int __thiscall NWindows::NSynchronization::CAutoResetEvent::Create(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00000564                 public ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:00000564 ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00000564                                         ; CODE XREF: CStreamBinder::CreateEvents(void)+21p
.text:00000564
.text:00000564 var_4           = dword ptr -4
.text:00000564
.text:00000564                 push    ebp
.text:00000565                 mov     ebp, esp
.text:00000567                 push    ecx
.text:00000568                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000056F                 mov     [ebp+var_4], ecx
.text:00000572                 mov     eax, [ebp+var_4]
.text:00000575                 push    eax
.text:00000576                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:0000057B                 add     esp, 4
.text:0000057E                 cmp     ebp, esp
.text:00000580                 call    __RTC_CheckEsp
.text:00000585                 mov     esp, ebp
.text:00000587                 pop     ebp
.text:00000588                 retn
.text:00000588 ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00000588
.text:00000588 ; ---------------------------------------------------------------------------
.text:00000589                 align 4
.text:00000589 _text           ends
.text:00000589
.text:0000058C ; ===========================================================================
.text:0000058C
.text:0000058C ; Segment type: Pure code
.text:0000058C ; Segment permissions: Read/Execute
.text:0000058C _text           segment para public 'CODE' use32
.text:0000058C                 assume cs:_text
.text:0000058C                 ;org 58Ch
.text:0000058C ; COMDAT (pick any)
.text:0000058C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000058C
.text:0000058C ; =============== S U B R O U T I N E =======================================
.text:0000058C
.text:0000058C ; Attributes: bp-based frame
.text:0000058C
.text:0000058C ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Reset(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:0000058C                 public ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:0000058C ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:0000058C                                         ; CODE XREF: CStreamBinder::ReInit(void)+11p
.text:0000058C                                         ; CStreamBinder::ReInit(void)+1Cp ...
.text:0000058C
.text:0000058C var_4           = dword ptr -4
.text:0000058C
.text:0000058C                 push    ebp
.text:0000058D                 mov     ebp, esp
.text:0000058F                 push    ecx
.text:00000590                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000597                 mov     [ebp+var_4], ecx
.text:0000059A                 mov     eax, [ebp+var_4]
.text:0000059D                 push    eax
.text:0000059E                 call    _Event_Reset@4  ; Event_Reset(x)
.text:000005A3                 add     esp, 4
.text:000005A6                 cmp     ebp, esp
.text:000005A8                 call    __RTC_CheckEsp
.text:000005AD                 mov     esp, ebp
.text:000005AF                 pop     ebp
.text:000005B0                 retn
.text:000005B0 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:000005B0
.text:000005B0 ; ---------------------------------------------------------------------------
.text:000005B1                 align 4
.text:000005B1 _text           ends
.text:000005B1
.text$x:000005B4 ; ===========================================================================
.text$x:000005B4
.text$x:000005B4 ; Segment type: Pure code
.text$x:000005B4 ; Segment permissions: Read/Execute
.text$x:000005B4 _text$x         segment para public 'CODE' use32
.text$x:000005B4                 assume cs:_text$x
.text$x:000005B4                 ;org 5B4h
.text$x:000005B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000005B4
.text$x:000005B4 ; =============== S U B R O U T I N E =======================================
.text$x:000005B4
.text$x:000005B4
.text$x:000005B4 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$0 proc near
.text$x:000005B4                                         ; DATA XREF: .xdata$x:000005FCo
.text$x:000005B4                 mov     eax, [ebp-38h]
.text$x:000005B7                 push    eax             ; void *
.text$x:000005B8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000005BD                 pop     ecx
.text$x:000005BE                 retn
.text$x:000005BE __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$0 endp
.text$x:000005BE
.text$x:000005BF
.text$x:000005BF ; =============== S U B R O U T I N E =======================================
.text$x:000005BF
.text$x:000005BF
.text$x:000005BF __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$1 proc near
.text$x:000005BF                                         ; DATA XREF: .xdata$x:00000604o
.text$x:000005BF                 lea     ecx, [ebp-1Ch]
.text$x:000005C2                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000005C2 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$1 endp
.text$x:000005C2
.text$x:000005C7
.text$x:000005C7 ; =============== S U B R O U T I N E =======================================
.text$x:000005C7
.text$x:000005C7
.text$x:000005C7 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$2 proc near
.text$x:000005C7                                         ; DATA XREF: .xdata$x:0000060Co
.text$x:000005C7                 mov     eax, [ebp-40h]
.text$x:000005CA                 push    eax             ; void *
.text$x:000005CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000005D0                 pop     ecx
.text$x:000005D1                 retn
.text$x:000005D1 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$2 endp
.text$x:000005D1
.text$x:000005D2
.text$x:000005D2 ; =============== S U B R O U T I N E =======================================
.text$x:000005D2
.text$x:000005D2
.text$x:000005D2 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$3 proc near
.text$x:000005D2                                         ; DATA XREF: .xdata$x:00000614o
.text$x:000005D2                 lea     ecx, [ebp-2Ch]
.text$x:000005D5                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000005D5 __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$3 endp
.text$x:000005D5
.text$x:000005DA
.text$x:000005DA ; =============== S U B R O U T I N E =======================================
.text$x:000005DA
.text$x:000005DA
.text$x:000005DA __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z proc near
.text$x:000005DA                                         ; DATA XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+5o
.text$x:000005DA
.text$x:000005DA arg_4           = dword ptr  8
.text$x:000005DA
.text$x:000005DA                 mov     edx, [esp+arg_4]
.text$x:000005DE                 lea     eax, [edx+0Ch]
.text$x:000005E1                 mov     ecx, [edx-44h]
.text$x:000005E4                 xor     ecx, eax
.text$x:000005E6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000005EB                 mov     eax, offset __ehfuncinfo$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z
.text$x:000005F0                 jmp     ___CxxFrameHandler3
.text$x:000005F0 __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z endp
.text$x:000005F0
.text$x:000005F0 ; ---------------------------------------------------------------------------
.text$x:000005F5                 align 4
.text$x:000005F5 _text$x         ends
.text$x:000005F5
.xdata$x:000005F8 ; ===========================================================================
.xdata$x:000005F8
.xdata$x:000005F8 ; Segment type: Pure data
.xdata$x:000005F8 ; Segment permissions: Read
.xdata$x:000005F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000005F8                 assume cs:_xdata$x
.xdata$x:000005F8                 ;org 5F8h
.xdata$x:000005F8 __unwindtable$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z db 0FFh
.xdata$x:000005F8                                         ; DATA XREF: .xdata$x:00000620o
.xdata$x:000005F9                 db 0FFh
.xdata$x:000005FA                 db 0FFh
.xdata$x:000005FB                 db 0FFh
.xdata$x:000005FC                 dd offset __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$0
.xdata$x:00000600                 db 0FFh
.xdata$x:00000601                 db 0FFh
.xdata$x:00000602                 db 0FFh
.xdata$x:00000603                 db 0FFh
.xdata$x:00000604                 dd offset __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$1
.xdata$x:00000608                 db    1
.xdata$x:00000609                 db    0
.xdata$x:0000060A                 db    0
.xdata$x:0000060B                 db    0
.xdata$x:0000060C                 dd offset __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$2
.xdata$x:00000610                 db    1
.xdata$x:00000611                 db    0
.xdata$x:00000612                 db    0
.xdata$x:00000613                 db    0
.xdata$x:00000614                 dd offset __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$3
.xdata$x:00000618 __ehfuncinfo$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z db  22h ; "
.xdata$x:00000618                                         ; DATA XREF: __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z+11o
.xdata$x:00000619                 db    5
.xdata$x:0000061A                 db  93h ; ô
.xdata$x:0000061B                 db  19h
.xdata$x:0000061C                 db    4
.xdata$x:0000061D                 db    0
.xdata$x:0000061E                 db    0
.xdata$x:0000061F                 db    0
.xdata$x:00000620                 dd offset __unwindtable$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z
.xdata$x:00000624                 db    0
.xdata$x:00000625                 db    0
.xdata$x:00000626                 db    0
.xdata$x:00000627                 db    0
.xdata$x:00000628                 db    0
.xdata$x:00000629                 db    0
.xdata$x:0000062A                 db    0
.xdata$x:0000062B                 db    0
.xdata$x:0000062C                 db    0
.xdata$x:0000062D                 db    0
.xdata$x:0000062E                 db    0
.xdata$x:0000062F                 db    0
.xdata$x:00000630                 db    0
.xdata$x:00000631                 db    0
.xdata$x:00000632                 db    0
.xdata$x:00000633                 db    0
.xdata$x:00000634                 db    0
.xdata$x:00000635                 db    0
.xdata$x:00000636                 db    0
.xdata$x:00000637                 db    0
.xdata$x:00000638                 db    1
.xdata$x:00000639                 db    0
.xdata$x:0000063A                 db    0
.xdata$x:0000063B                 db    0
.xdata$x:0000063B _xdata$x        ends
.xdata$x:0000063B
.text:0000063C ; ===========================================================================
.text:0000063C
.text:0000063C ; Segment type: Pure code
.text:0000063C ; Segment permissions: Read/Execute
.text:0000063C _text           segment para public 'CODE' use32
.text:0000063C                 assume cs:_text
.text:0000063C                 ;org 63Ch
.text:0000063C ; COMDAT (pick any)
.text:0000063C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000063C
.text:0000063C ; =============== S U B R O U T I N E =======================================
.text:0000063C
.text:0000063C ; Attributes: bp-based frame
.text:0000063C
.text:0000063C ; public: __thiscall CBinderInStream::CBinderInStream(class CStreamBinder *)
.text:0000063C                 public ??0CBinderInStream@@QAE@PAVCStreamBinder@@@Z
.text:0000063C ??0CBinderInStream@@QAE@PAVCStreamBinder@@@Z proc near
.text:0000063C                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+8Ep
.text:0000063C
.text:0000063C var_4           = dword ptr -4
.text:0000063C arg_0           = dword ptr  8
.text:0000063C
.text:0000063C                 push    ebp
.text:0000063D                 mov     ebp, esp
.text:0000063F                 push    ecx
.text:00000640                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000647                 mov     [ebp+var_4], ecx
.text:0000064A                 mov     ecx, [ebp+var_4] ; this
.text:0000064D                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00000652                 mov     ecx, [ebp+var_4]
.text:00000655                 add     ecx, 4          ; this
.text:00000658                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:0000065D                 mov     eax, [ebp+var_4]
.text:00000660                 mov     dword ptr [eax], offset ??_7CBinderInStream@@6B@ ; const CBinderInStream::`vftable'
.text:00000666                 mov     ecx, [ebp+var_4]
.text:00000669                 mov     edx, [ebp+arg_0]
.text:0000066C                 mov     [ecx+8], edx
.text:0000066F                 mov     eax, [ebp+var_4]
.text:00000672                 add     esp, 4
.text:00000675                 cmp     ebp, esp
.text:00000677                 call    __RTC_CheckEsp
.text:0000067C                 mov     esp, ebp
.text:0000067E                 pop     ebp
.text:0000067F                 retn    4
.text:0000067F ??0CBinderInStream@@QAE@PAVCStreamBinder@@@Z endp
.text:0000067F
.text:0000067F ; ---------------------------------------------------------------------------
.text:00000682                 align 4
.text:00000682 _text           ends
.text:00000682
.rdata:00000684 ; ===========================================================================
.rdata:00000684
.rdata:00000684 ; Segment type: Pure data
.rdata:00000684 ; Segment permissions: Read
.rdata:00000684 _rdata          segment dword public 'DATA' use32
.rdata:00000684                 assume cs:_rdata
.rdata:00000684                 ;org 684h
.rdata:00000684 ; COMDAT (pick largest)
.rdata:00000684                 dd offset ??_R4CBinderInStream@@6B@ ; const CBinderInStream::`RTTI Complete Object Locator'
.rdata:00000688                 public ??_7CBinderInStream@@6B@
.rdata:00000688 ; const CBinderInStream::`vftable'
.rdata:00000688 ??_7CBinderInStream@@6B@ dd offset ?QueryInterface@CBinderInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000688                                         ; DATA XREF: CBinderInStream::CBinderInStream(CStreamBinder *)+24o
.rdata:00000688                                         ; CBinderInStream::~CBinderInStream(void)+11o
.rdata:00000688                                         ; CBinderInStream::QueryInterface(_GUID const &,void * *)
.rdata:0000068C                 dd offset ?AddRef@CBinderInStream@@UAGKXZ ; CBinderInStream::AddRef(void)
.rdata:00000690                 dd offset ?Release@CBinderInStream@@UAGKXZ ; CBinderInStream::Release(void)
.rdata:00000694                 dd offset ?Read@CBinderInStream@@UAGJPAXIPAI@Z ; CBinderInStream::Read(void *,uint,uint *)
.rdata:00000694 _rdata          ends
.rdata:00000694
.rdata$r:00000698 ; ===========================================================================
.rdata$r:00000698
.rdata$r:00000698 ; Segment type: Pure data
.rdata$r:00000698 ; Segment permissions: Read
.rdata$r:00000698 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000698                 assume cs:_rdata$r
.rdata$r:00000698                 ;org 698h
.rdata$r:00000698 ; COMDAT (pick any)
.rdata$r:00000698                 public ??_R4CBinderInStream@@6B@
.rdata$r:00000698 ; const CBinderInStream::`RTTI Complete Object Locator'
.rdata$r:00000698 ??_R4CBinderInStream@@6B@ db    0       ; DATA XREF: .rdata:00000684o
.rdata$r:00000699                 db    0
.rdata$r:0000069A                 db    0
.rdata$r:0000069B                 db    0
.rdata$r:0000069C                 db    0
.rdata$r:0000069D                 db    0
.rdata$r:0000069E                 db    0
.rdata$r:0000069F                 db    0
.rdata$r:000006A0                 db    0
.rdata$r:000006A1                 db    0
.rdata$r:000006A2                 db    0
.rdata$r:000006A3                 db    0
.rdata$r:000006A4                 dd offset ??_R0?AVCBinderInStream@@@8 ; CBinderInStream `RTTI Type Descriptor'
.rdata$r:000006A8                 dd offset ??_R3CBinderInStream@@8 ; CBinderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006A8 _rdata$r        ends
.rdata$r:000006A8
.data:000006AC ; ===========================================================================
.data:000006AC
.data:000006AC ; Segment type: Pure data
.data:000006AC ; Segment permissions: Read/Write
.data:000006AC _data           segment dword public 'DATA' use32
.data:000006AC                 assume cs:_data
.data:000006AC                 ;org 6ACh
.data:000006AC ; COMDAT (pick any)
.data:000006AC                 public ??_R0?AVCBinderInStream@@@8
.data:000006AC ; class CBinderInStream `RTTI Type Descriptor'
.data:000006AC ??_R0?AVCBinderInStream@@@8 dd offset ??_7type_info@@6B@
.data:000006AC                                         ; DATA XREF: .rdata$r:000006A4o
.data:000006AC                                         ; .rdata$r:CBinderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000006AC                                         ; const type_info::`vftable'
.data:000006B0                 db    0
.data:000006B1                 db    0
.data:000006B2                 db    0
.data:000006B3                 db    0
.data:000006B4                 db  2Eh ; .
.data:000006B5                 db  3Fh ; ?
.data:000006B6                 db  41h ; A
.data:000006B7                 db  56h ; V
.data:000006B8                 db  43h ; C
.data:000006B9                 db  42h ; B
.data:000006BA                 db  69h ; i
.data:000006BB                 db  6Eh ; n
.data:000006BC                 db  64h ; d
.data:000006BD                 db  65h ; e
.data:000006BE                 db  72h ; r
.data:000006BF                 db  49h ; I
.data:000006C0                 db  6Eh ; n
.data:000006C1                 db  53h ; S
.data:000006C2                 db  74h ; t
.data:000006C3                 db  72h ; r
.data:000006C4                 db  65h ; e
.data:000006C5                 db  61h ; a
.data:000006C6                 db  6Dh ; m
.data:000006C7                 db  40h ; @
.data:000006C8                 db  40h ; @
.data:000006C9                 db    0
.data:000006CA                 align 4
.data:000006CA _data           ends
.data:000006CA
.rdata$r:000006CC ; ===========================================================================
.rdata$r:000006CC
.rdata$r:000006CC ; Segment type: Pure data
.rdata$r:000006CC ; Segment permissions: Read
.rdata$r:000006CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006CC                 assume cs:_rdata$r
.rdata$r:000006CC                 ;org 6CCh
.rdata$r:000006CC ; COMDAT (pick any)
.rdata$r:000006CC                 public ??_R3CBinderInStream@@8
.rdata$r:000006CC ; CBinderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006CC ??_R3CBinderInStream@@8 db    0         ; DATA XREF: .rdata$r:000006A8o
.rdata$r:000006CC                                         ; .rdata$r:00000708o
.rdata$r:000006CD                 db    0
.rdata$r:000006CE                 db    0
.rdata$r:000006CF                 db    0
.rdata$r:000006D0                 db    1
.rdata$r:000006D1                 db    0
.rdata$r:000006D2                 db    0
.rdata$r:000006D3                 db    0
.rdata$r:000006D4                 db    4
.rdata$r:000006D5                 db    0
.rdata$r:000006D6                 db    0
.rdata$r:000006D7                 db    0
.rdata$r:000006D8                 dd offset ??_R2CBinderInStream@@8 ; CBinderInStream::`RTTI Base Class Array'
.rdata$r:000006D8 _rdata$r        ends
.rdata$r:000006D8
.rdata$r:000006DC ; ===========================================================================
.rdata$r:000006DC
.rdata$r:000006DC ; Segment type: Pure data
.rdata$r:000006DC ; Segment permissions: Read
.rdata$r:000006DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006DC                 assume cs:_rdata$r
.rdata$r:000006DC                 ;org 6DCh
.rdata$r:000006DC ; COMDAT (pick any)
.rdata$r:000006DC                 public ??_R2CBinderInStream@@8
.rdata$r:000006DC ; CBinderInStream::`RTTI Base Class Array'
.rdata$r:000006DC ??_R2CBinderInStream@@8 dd offset ??_R1A@?0A@EA@CBinderInStream@@8
.rdata$r:000006DC                                         ; DATA XREF: .rdata$r:000006D8o
.rdata$r:000006DC                                         ; CBinderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006E0                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006E4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000006E8                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:000006EC                 db    0
.rdata$r:000006ED                 align 10h
.rdata$r:000006ED _rdata$r        ends
.rdata$r:000006ED
.rdata$r:000006F0 ; ===========================================================================
.rdata$r:000006F0
.rdata$r:000006F0 ; Segment type: Pure data
.rdata$r:000006F0 ; Segment permissions: Read
.rdata$r:000006F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006F0                 assume cs:_rdata$r
.rdata$r:000006F0                 ;org 6F0h
.rdata$r:000006F0 ; COMDAT (pick any)
.rdata$r:000006F0                 public ??_R1A@?0A@EA@CBinderInStream@@8
.rdata$r:000006F0 ; CBinderInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000006F0 ??_R1A@?0A@EA@CBinderInStream@@8 dd offset ??_R0?AVCBinderInStream@@@8
.rdata$r:000006F0                                         ; DATA XREF: .rdata$r:CBinderInStream::`RTTI Base Class Array'o
.rdata$r:000006F0                                         ; CBinderInStream `RTTI Type Descriptor'
.rdata$r:000006F4                 db    3
.rdata$r:000006F5                 db    0
.rdata$r:000006F6                 db    0
.rdata$r:000006F7                 db    0
.rdata$r:000006F8                 db    0
.rdata$r:000006F9                 db    0
.rdata$r:000006FA                 db    0
.rdata$r:000006FB                 db    0
.rdata$r:000006FC                 db 0FFh
.rdata$r:000006FD                 db 0FFh
.rdata$r:000006FE                 db 0FFh
.rdata$r:000006FF                 db 0FFh
.rdata$r:00000700                 db    0
.rdata$r:00000701                 db    0
.rdata$r:00000702                 db    0
.rdata$r:00000703                 db    0
.rdata$r:00000704                 db  40h ; @
.rdata$r:00000705                 db    0
.rdata$r:00000706                 db    0
.rdata$r:00000707                 db    0
.rdata$r:00000708                 dd offset ??_R3CBinderInStream@@8 ; CBinderInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000708 _rdata$r        ends
.rdata$r:00000708
.rdata$r:0000070C ; ===========================================================================
.rdata$r:0000070C
.rdata$r:0000070C ; Segment type: Pure data
.rdata$r:0000070C ; Segment permissions: Read
.rdata$r:0000070C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000070C                 assume cs:_rdata$r
.rdata$r:0000070C                 ;org 70Ch
.rdata$r:0000070C ; COMDAT (pick any)
.rdata$r:0000070C                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000070C ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000070C ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:0000070C                                         ; DATA XREF: .rdata$r:000006E0o
.rdata$r:0000070C                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:0000070C                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000710                 db    1
.rdata$r:00000711                 db    0
.rdata$r:00000712                 db    0
.rdata$r:00000713                 db    0
.rdata$r:00000714                 db    0
.rdata$r:00000715                 db    0
.rdata$r:00000716                 db    0
.rdata$r:00000717                 db    0
.rdata$r:00000718                 db 0FFh
.rdata$r:00000719                 db 0FFh
.rdata$r:0000071A                 db 0FFh
.rdata$r:0000071B                 db 0FFh
.rdata$r:0000071C                 db    0
.rdata$r:0000071D                 db    0
.rdata$r:0000071E                 db    0
.rdata$r:0000071F                 db    0
.rdata$r:00000720                 db  40h ; @
.rdata$r:00000721                 db    0
.rdata$r:00000722                 db    0
.rdata$r:00000723                 db    0
.rdata$r:00000724                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000724 _rdata$r        ends
.rdata$r:00000724
.data:00000728 ; ===========================================================================
.data:00000728
.data:00000728 ; Segment type: Pure data
.data:00000728 ; Segment permissions: Read/Write
.data:00000728 _data           segment dword public 'DATA' use32
.data:00000728                 assume cs:_data
.data:00000728                 ;org 728h
.data:00000728 ; COMDAT (pick any)
.data:00000728                 public ??_R0?AUISequentialInStream@@@8
.data:00000728 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00000728 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00000728                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000728                                         ; .rdata$r:00000A9Co
.data:00000728                                         ; const type_info::`vftable'
.data:0000072C                 align 10h
.data:00000730 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:0000074A                 align 4
.data:0000074A _data           ends
.data:0000074A
.rdata$r:0000074C ; ===========================================================================
.rdata$r:0000074C
.rdata$r:0000074C ; Segment type: Pure data
.rdata$r:0000074C ; Segment permissions: Read
.rdata$r:0000074C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000074C                 assume cs:_rdata$r
.rdata$r:0000074C                 ;org 74Ch
.rdata$r:0000074C ; COMDAT (pick any)
.rdata$r:0000074C                 public ??_R3ISequentialInStream@@8
.rdata$r:0000074C ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000074C ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00000724o
.rdata$r:0000074C                                         ; .rdata$r:00000AA0o
.rdata$r:0000074D                 db    0
.rdata$r:0000074E                 db    0
.rdata$r:0000074F                 db    0
.rdata$r:00000750                 db    0
.rdata$r:00000751                 db    0
.rdata$r:00000752                 db    0
.rdata$r:00000753                 db    0
.rdata$r:00000754                 db    2
.rdata$r:00000755                 db    0
.rdata$r:00000756                 db    0
.rdata$r:00000757                 db    0
.rdata$r:00000758                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00000758 _rdata$r        ends
.rdata$r:00000758
.rdata$r:0000075C ; ===========================================================================
.rdata$r:0000075C
.rdata$r:0000075C ; Segment type: Pure data
.rdata$r:0000075C ; Segment permissions: Read
.rdata$r:0000075C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000075C                 assume cs:_rdata$r
.rdata$r:0000075C                 ;org 75Ch
.rdata$r:0000075C ; COMDAT (pick any)
.rdata$r:0000075C                 public ??_R2ISequentialInStream@@8
.rdata$r:0000075C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:0000075C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:0000075C                                         ; DATA XREF: .rdata$r:00000758o
.rdata$r:0000075C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000760                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000764                 db    0
.rdata$r:00000765                 align 4
.rdata$r:00000765 _rdata$r        ends
.rdata$r:00000765
.rdata$r:00000768 ; ===========================================================================
.rdata$r:00000768
.rdata$r:00000768 ; Segment type: Pure data
.rdata$r:00000768 ; Segment permissions: Read
.rdata$r:00000768 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000768                 assume cs:_rdata$r
.rdata$r:00000768                 ;org 768h
.rdata$r:00000768 ; COMDAT (pick any)
.rdata$r:00000768                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00000768 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000768 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000768                                         ; DATA XREF: .rdata$r:000006E4o
.rdata$r:00000768                                         ; .rdata$r:00000760o ...
.rdata$r:00000768                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000076C                 db    0
.rdata$r:0000076D                 db    0
.rdata$r:0000076E                 db    0
.rdata$r:0000076F                 db    0
.rdata$r:00000770                 db    0
.rdata$r:00000771                 db    0
.rdata$r:00000772                 db    0
.rdata$r:00000773                 db    0
.rdata$r:00000774                 db 0FFh
.rdata$r:00000775                 db 0FFh
.rdata$r:00000776                 db 0FFh
.rdata$r:00000777                 db 0FFh
.rdata$r:00000778                 db    0
.rdata$r:00000779                 db    0
.rdata$r:0000077A                 db    0
.rdata$r:0000077B                 db    0
.rdata$r:0000077C                 db  40h ; @
.rdata$r:0000077D                 db    0
.rdata$r:0000077E                 db    0
.rdata$r:0000077F                 db    0
.rdata$r:00000780                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000780 _rdata$r        ends
.rdata$r:00000780
.data:00000784 ; ===========================================================================
.data:00000784
.data:00000784 ; Segment type: Pure data
.data:00000784 ; Segment permissions: Read/Write
.data:00000784 _data           segment dword public 'DATA' use32
.data:00000784                 assume cs:_data
.data:00000784                 ;org 784h
.data:00000784 ; COMDAT (pick any)
.data:00000784                 public ??_R0?AUIUnknown@@@8
.data:00000784 ; struct IUnknown `RTTI Type Descriptor'
.data:00000784 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00000784                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000784                                         ; const type_info::`vftable'
.data:00000788                 db    0
.data:00000789                 db    0
.data:0000078A                 db    0
.data:0000078B                 db    0
.data:0000078C                 db  2Eh ; .
.data:0000078D                 db  3Fh ; ?
.data:0000078E                 db  41h ; A
.data:0000078F                 db  55h ; U
.data:00000790                 db  49h ; I
.data:00000791                 db  55h ; U
.data:00000792                 db  6Eh ; n
.data:00000793                 db  6Bh ; k
.data:00000794                 db  6Eh ; n
.data:00000795                 db  6Fh ; o
.data:00000796                 db  77h ; w
.data:00000797                 db  6Eh ; n
.data:00000798                 db  40h ; @
.data:00000799                 db  40h ; @
.data:0000079A                 db    0
.data:0000079B                 align 4
.data:0000079B _data           ends
.data:0000079B
.rdata$r:0000079C ; ===========================================================================
.rdata$r:0000079C
.rdata$r:0000079C ; Segment type: Pure data
.rdata$r:0000079C ; Segment permissions: Read
.rdata$r:0000079C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000079C                 assume cs:_rdata$r
.rdata$r:0000079C                 ;org 79Ch
.rdata$r:0000079C ; COMDAT (pick any)
.rdata$r:0000079C                 public ??_R3IUnknown@@8
.rdata$r:0000079C ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000079C ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00000780o
.rdata$r:0000079D                 db    0
.rdata$r:0000079E                 db    0
.rdata$r:0000079F                 db    0
.rdata$r:000007A0                 db    0
.rdata$r:000007A1                 db    0
.rdata$r:000007A2                 db    0
.rdata$r:000007A3                 db    0
.rdata$r:000007A4                 db    1
.rdata$r:000007A5                 db    0
.rdata$r:000007A6                 db    0
.rdata$r:000007A7                 db    0
.rdata$r:000007A8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000007A8 _rdata$r        ends
.rdata$r:000007A8
.rdata$r:000007AC ; ===========================================================================
.rdata$r:000007AC
.rdata$r:000007AC ; Segment type: Pure data
.rdata$r:000007AC ; Segment permissions: Read
.rdata$r:000007AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007AC                 assume cs:_rdata$r
.rdata$r:000007AC                 ;org 7ACh
.rdata$r:000007AC ; COMDAT (pick any)
.rdata$r:000007AC                 public ??_R2IUnknown@@8
.rdata$r:000007AC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000007AC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000007AC                                         ; DATA XREF: .rdata$r:000007A8o
.rdata$r:000007AC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000007B0                 db    0
.rdata$r:000007B1                 align 4
.rdata$r:000007B1 _rdata$r        ends
.rdata$r:000007B1
.rdata$r:000007B4 ; ===========================================================================
.rdata$r:000007B4
.rdata$r:000007B4 ; Segment type: Pure data
.rdata$r:000007B4 ; Segment permissions: Read
.rdata$r:000007B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007B4                 assume cs:_rdata$r
.rdata$r:000007B4                 ;org 7B4h
.rdata$r:000007B4 ; COMDAT (pick any)
.rdata$r:000007B4                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:000007B4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:000007B4 ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000007B4                                         ; DATA XREF: .rdata$r:000006E8o
.rdata$r:000007B4                                         ; .rdata$r:00000B68o
.rdata$r:000007B4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000007B8                 db    0
.rdata$r:000007B9                 db    0
.rdata$r:000007BA                 db    0
.rdata$r:000007BB                 db    0
.rdata$r:000007BC                 db    4
.rdata$r:000007BD                 db    0
.rdata$r:000007BE                 db    0
.rdata$r:000007BF                 db    0
.rdata$r:000007C0                 db 0FFh
.rdata$r:000007C1                 db 0FFh
.rdata$r:000007C2                 db 0FFh
.rdata$r:000007C3                 db 0FFh
.rdata$r:000007C4                 db    0
.rdata$r:000007C5                 db    0
.rdata$r:000007C6                 db    0
.rdata$r:000007C7                 db    0
.rdata$r:000007C8                 db  40h ; @
.rdata$r:000007C9                 db    0
.rdata$r:000007CA                 db    0
.rdata$r:000007CB                 db    0
.rdata$r:000007CC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007CC _rdata$r        ends
.rdata$r:000007CC
.data:000007D0 ; ===========================================================================
.data:000007D0
.data:000007D0 ; Segment type: Pure data
.data:000007D0 ; Segment permissions: Read/Write
.data:000007D0 _data           segment dword public 'DATA' use32
.data:000007D0                 assume cs:_data
.data:000007D0                 ;org 7D0h
.data:000007D0 ; COMDAT (pick any)
.data:000007D0                 public ??_R0?AVCMyUnknownImp@@@8
.data:000007D0 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000007D0 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000007D0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:000007D0                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000007D0                                         ; const type_info::`vftable'
.data:000007D4                 align 8
.data:000007D8 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000007D8 _data           ends
.data:000007D8
.rdata$r:000007EC ; ===========================================================================
.rdata$r:000007EC
.rdata$r:000007EC ; Segment type: Pure data
.rdata$r:000007EC ; Segment permissions: Read
.rdata$r:000007EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007EC                 assume cs:_rdata$r
.rdata$r:000007EC                 ;org 7ECh
.rdata$r:000007EC ; COMDAT (pick any)
.rdata$r:000007EC                 public ??_R3CMyUnknownImp@@8
.rdata$r:000007EC ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000007EC ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000007CCo
.rdata$r:000007EC                                         ; .rdata$r:0000081Co
.rdata$r:000007ED                 db    0
.rdata$r:000007EE                 db    0
.rdata$r:000007EF                 db    0
.rdata$r:000007F0                 db    0
.rdata$r:000007F1                 db    0
.rdata$r:000007F2                 db    0
.rdata$r:000007F3                 db    0
.rdata$r:000007F4                 db    1
.rdata$r:000007F5                 db    0
.rdata$r:000007F6                 db    0
.rdata$r:000007F7                 db    0
.rdata$r:000007F8                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000007F8 _rdata$r        ends
.rdata$r:000007F8
.rdata$r:000007FC ; ===========================================================================
.rdata$r:000007FC
.rdata$r:000007FC ; Segment type: Pure data
.rdata$r:000007FC ; Segment permissions: Read
.rdata$r:000007FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000007FC                 assume cs:_rdata$r
.rdata$r:000007FC                 ;org 7FCh
.rdata$r:000007FC ; COMDAT (pick any)
.rdata$r:000007FC                 public ??_R2CMyUnknownImp@@8
.rdata$r:000007FC ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000007FC ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000007FC                                         ; DATA XREF: .rdata$r:000007F8o
.rdata$r:000007FC                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000800                 db    0
.rdata$r:00000801                 align 4
.rdata$r:00000801 _rdata$r        ends
.rdata$r:00000801
.rdata$r:00000804 ; ===========================================================================
.rdata$r:00000804
.rdata$r:00000804 ; Segment type: Pure data
.rdata$r:00000804 ; Segment permissions: Read
.rdata$r:00000804 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000804                 assume cs:_rdata$r
.rdata$r:00000804                 ;org 804h
.rdata$r:00000804 ; COMDAT (pick any)
.rdata$r:00000804                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000804 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000804 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00000804                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00000804                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000808                 align 10h
.rdata$r:00000810                 db 0FFh
.rdata$r:00000811                 db 0FFh
.rdata$r:00000812                 db 0FFh
.rdata$r:00000813                 db 0FFh
.rdata$r:00000814                 db    0
.rdata$r:00000815                 db    0
.rdata$r:00000816                 db    0
.rdata$r:00000817                 db    0
.rdata$r:00000818                 db  40h ; @
.rdata$r:00000819                 db    0
.rdata$r:0000081A                 db    0
.rdata$r:0000081B                 db    0
.rdata$r:0000081C                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000081C _rdata$r        ends
.rdata$r:0000081C
.text:00000820 ; ===========================================================================
.text:00000820
.text:00000820 ; Segment type: Pure code
.text:00000820 ; Segment permissions: Read/Execute
.text:00000820 _text           segment para public 'CODE' use32
.text:00000820                 assume cs:_text
.text:00000820                 ;org 820h
.text:00000820 ; COMDAT (pick any)
.text:00000820                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000820
.text:00000820 ; =============== S U B R O U T I N E =======================================
.text:00000820
.text:00000820 ; Attributes: bp-based frame
.text:00000820
.text:00000820 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00000820                 public ??0CMyUnknownImp@@QAE@XZ
.text:00000820 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: CBinderInStream::CBinderInStream(CStreamBinder *)+1Cp
.text:00000820                                         ; CBinderOutStream::CBinderOutStream(CStreamBinder *)+1Cp
.text:00000820
.text:00000820 var_4           = dword ptr -4
.text:00000820
.text:00000820                 push    ebp
.text:00000821                 mov     ebp, esp
.text:00000823                 push    ecx
.text:00000824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000082B                 mov     [ebp+var_4], ecx
.text:0000082E                 mov     eax, [ebp+var_4]
.text:00000831                 mov     dword ptr [eax], 0
.text:00000837                 mov     eax, [ebp+var_4]
.text:0000083A                 mov     esp, ebp
.text:0000083C                 pop     ebp
.text:0000083D                 retn
.text:0000083D ??0CMyUnknownImp@@QAE@XZ endp
.text:0000083D
.text:0000083D ; ---------------------------------------------------------------------------
.text:0000083E                 align 10h
.text:0000083E _text           ends
.text:0000083E
.text:00000840 ; ===========================================================================
.text:00000840
.text:00000840 ; Segment type: Pure code
.text:00000840 ; Segment permissions: Read/Execute
.text:00000840 _text           segment para public 'CODE' use32
.text:00000840                 assume cs:_text
.text:00000840                 ;org 840h
.text:00000840 ; COMDAT (pick any)
.text:00000840                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000840
.text:00000840 ; =============== S U B R O U T I N E =======================================
.text:00000840
.text:00000840 ; Attributes: bp-based frame
.text:00000840
.text:00000840 ; __int32 __stdcall CBinderInStream::QueryInterface(CBinderInStream *this, const struct _GUID *Buf1, void **)
.text:00000840                 public ?QueryInterface@CBinderInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00000840 ?QueryInterface@CBinderInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000840                                         ; DATA XREF: .rdata:const CBinderInStream::`vftable'o
.text:00000840
.text:00000840 this            = dword ptr  8
.text:00000840 Buf1            = dword ptr  0Ch
.text:00000840 arg_8           = dword ptr  10h
.text:00000840
.text:00000840                 push    ebp
.text:00000841                 mov     ebp, esp
.text:00000843                 mov     eax, [ebp+arg_8]
.text:00000846                 mov     dword ptr [eax], 0
.text:0000084C                 push    offset _IID_IUnknown ; Buf2
.text:00000851                 mov     ecx, [ebp+Buf1]
.text:00000854                 push    ecx             ; Buf1
.text:00000855                 call    ___@8           ; __(x,x)
.text:0000085A                 test    eax, eax
.text:0000085C                 jz      short loc_868
.text:0000085E                 mov     edx, [ebp+arg_8]
.text:00000861                 mov     eax, [ebp+this]
.text:00000864                 mov     [edx], eax
.text:00000866                 jmp     short loc_88B
.text:00000868 ; ---------------------------------------------------------------------------
.text:00000868
.text:00000868 loc_868:                                ; CODE XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000868                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000086D                 mov     ecx, [ebp+Buf1]
.text:00000870                 push    ecx             ; Buf1
.text:00000871                 call    ___@8           ; __(x,x)
.text:00000876                 test    eax, eax
.text:00000878                 jz      short loc_884
.text:0000087A                 mov     edx, [ebp+arg_8]
.text:0000087D                 mov     eax, [ebp+this]
.text:00000880                 mov     [edx], eax
.text:00000882                 jmp     short loc_88B
.text:00000884 ; ---------------------------------------------------------------------------
.text:00000884
.text:00000884 loc_884:                                ; CODE XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00000884                 mov     eax, 80004002h
.text:00000889                 jmp     short loc_89C
.text:0000088B ; ---------------------------------------------------------------------------
.text:0000088B
.text:0000088B loc_88B:                                ; CODE XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+26j
.text:0000088B                                         ; CBinderInStream::QueryInterface(_GUID const &,void * *)+42j
.text:0000088B                 mov     ecx, [ebp+this]
.text:0000088E                 mov     edx, [ecx+4]
.text:00000891                 add     edx, 1
.text:00000894                 mov     eax, [ebp+this]
.text:00000897                 mov     [eax+4], edx
.text:0000089A                 xor     eax, eax
.text:0000089C
.text:0000089C loc_89C:                                ; CODE XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+49j
.text:0000089C                 cmp     ebp, esp
.text:0000089E                 call    __RTC_CheckEsp
.text:000008A3                 pop     ebp
.text:000008A4                 retn    0Ch
.text:000008A4 ?QueryInterface@CBinderInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:000008A4
.text:000008A4 ; ---------------------------------------------------------------------------
.text:000008A7                 align 4
.text:000008A7 _text           ends
.text:000008A7
.text:000008A8 ; ===========================================================================
.text:000008A8
.text:000008A8 ; Segment type: Pure code
.text:000008A8 ; Segment permissions: Read/Execute
.text:000008A8 _text           segment para public 'CODE' use32
.text:000008A8                 assume cs:_text
.text:000008A8                 ;org 8A8h
.text:000008A8 ; COMDAT (pick any)
.text:000008A8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008A8
.text:000008A8 ; =============== S U B R O U T I N E =======================================
.text:000008A8
.text:000008A8 ; Attributes: bp-based frame
.text:000008A8
.text:000008A8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000008A8                 public ___@8
.text:000008A8 ___@8           proc near               ; CODE XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+15p
.text:000008A8                                         ; CBinderInStream::QueryInterface(_GUID const &,void * *)+31p ...
.text:000008A8
.text:000008A8 Buf1            = dword ptr  8
.text:000008A8 Buf2            = dword ptr  0Ch
.text:000008A8
.text:000008A8                 push    ebp
.text:000008A9                 mov     ebp, esp
.text:000008AB                 mov     eax, [ebp+Buf2]
.text:000008AE                 push    eax             ; Buf2
.text:000008AF                 mov     ecx, [ebp+Buf1]
.text:000008B2                 push    ecx             ; Buf1
.text:000008B3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000008B8                 cmp     ebp, esp
.text:000008BA                 call    __RTC_CheckEsp
.text:000008BF                 pop     ebp
.text:000008C0                 retn    8
.text:000008C0 ___@8           endp
.text:000008C0
.text:000008C0 ; ---------------------------------------------------------------------------
.text:000008C3                 align 4
.text:000008C3 _text           ends
.text:000008C3
.text:000008C4 ; ===========================================================================
.text:000008C4
.text:000008C4 ; Segment type: Pure code
.text:000008C4 ; Segment permissions: Read/Execute
.text:000008C4 _text           segment para public 'CODE' use32
.text:000008C4                 assume cs:_text
.text:000008C4                 ;org 8C4h
.text:000008C4 ; COMDAT (pick any)
.text:000008C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008C4
.text:000008C4 ; =============== S U B R O U T I N E =======================================
.text:000008C4
.text:000008C4 ; Attributes: bp-based frame
.text:000008C4
.text:000008C4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000008C4                 public _IsEqualGUID@8
.text:000008C4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000008C4
.text:000008C4 Buf1            = dword ptr  8
.text:000008C4 Buf2            = dword ptr  0Ch
.text:000008C4
.text:000008C4                 push    ebp
.text:000008C5                 mov     ebp, esp
.text:000008C7                 push    10h             ; Size
.text:000008C9                 mov     eax, [ebp+Buf2]
.text:000008CC                 push    eax             ; Buf2
.text:000008CD                 mov     ecx, [ebp+Buf1]
.text:000008D0                 push    ecx             ; Buf1
.text:000008D1                 call    _memcmp
.text:000008D6                 add     esp, 0Ch
.text:000008D9                 neg     eax
.text:000008DB                 sbb     eax, eax
.text:000008DD                 add     eax, 1
.text:000008E0                 cmp     ebp, esp
.text:000008E2                 call    __RTC_CheckEsp
.text:000008E7                 pop     ebp
.text:000008E8                 retn    8
.text:000008E8 _IsEqualGUID@8  endp
.text:000008E8
.text:000008E8 ; ---------------------------------------------------------------------------
.text:000008EB                 align 4
.text:000008EB _text           ends
.text:000008EB
.text:000008EC ; ===========================================================================
.text:000008EC
.text:000008EC ; Segment type: Pure code
.text:000008EC ; Segment permissions: Read/Execute
.text:000008EC _text           segment para public 'CODE' use32
.text:000008EC                 assume cs:_text
.text:000008EC                 ;org 8ECh
.text:000008EC ; COMDAT (pick any)
.text:000008EC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000008EC
.text:000008EC ; =============== S U B R O U T I N E =======================================
.text:000008EC
.text:000008EC ; Attributes: bp-based frame
.text:000008EC
.text:000008EC ; unsigned __int32 __stdcall CBinderInStream::AddRef(CBinderInStream *this)
.text:000008EC                 public ?AddRef@CBinderInStream@@UAGKXZ
.text:000008EC ?AddRef@CBinderInStream@@UAGKXZ proc near ; DATA XREF: .rdata:0000068Co
.text:000008EC
.text:000008EC var_4           = dword ptr -4
.text:000008EC this            = dword ptr  8
.text:000008EC
.text:000008EC                 push    ebp
.text:000008ED                 mov     ebp, esp
.text:000008EF                 push    ecx
.text:000008F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008F7                 mov     eax, [ebp+this]
.text:000008FA                 mov     ecx, [eax+4]
.text:000008FD                 add     ecx, 1
.text:00000900                 mov     [ebp+var_4], ecx
.text:00000903                 mov     edx, [ebp+this]
.text:00000906                 mov     eax, [ebp+var_4]
.text:00000909                 mov     [edx+4], eax
.text:0000090C                 mov     eax, [ebp+var_4]
.text:0000090F                 mov     esp, ebp
.text:00000911                 pop     ebp
.text:00000912                 retn    4
.text:00000912 ?AddRef@CBinderInStream@@UAGKXZ endp
.text:00000912
.text:00000912 ; ---------------------------------------------------------------------------
.text:00000915                 align 4
.text:00000915 _text           ends
.text:00000915
.text:00000918 ; ===========================================================================
.text:00000918
.text:00000918 ; Segment type: Pure code
.text:00000918 ; Segment permissions: Read/Execute
.text:00000918 _text           segment para public 'CODE' use32
.text:00000918                 assume cs:_text
.text:00000918                 ;org 918h
.text:00000918 ; COMDAT (pick any)
.text:00000918                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000918
.text:00000918 ; =============== S U B R O U T I N E =======================================
.text:00000918
.text:00000918 ; Attributes: bp-based frame
.text:00000918
.text:00000918 ; unsigned __int32 __stdcall CBinderInStream::Release(CBinderInStream *this)
.text:00000918                 public ?Release@CBinderInStream@@UAGKXZ
.text:00000918 ?Release@CBinderInStream@@UAGKXZ proc near ; DATA XREF: .rdata:00000690o
.text:00000918
.text:00000918 var_10          = dword ptr -10h
.text:00000918 var_C           = dword ptr -0Ch
.text:00000918 var_8           = dword ptr -8
.text:00000918 var_4           = dword ptr -4
.text:00000918 this            = dword ptr  8
.text:00000918
.text:00000918                 push    ebp
.text:00000919                 mov     ebp, esp
.text:0000091B                 sub     esp, 10h
.text:0000091E                 mov     eax, 0CCCCCCCCh
.text:00000923                 mov     [ebp+var_10], eax
.text:00000926                 mov     [ebp+var_C], eax
.text:00000929                 mov     [ebp+var_8], eax
.text:0000092C                 mov     [ebp+var_4], eax
.text:0000092F                 mov     eax, [ebp+this]
.text:00000932                 mov     ecx, [eax+4]
.text:00000935                 sub     ecx, 1
.text:00000938                 mov     [ebp+var_C], ecx
.text:0000093B                 mov     edx, [ebp+this]
.text:0000093E                 mov     eax, [ebp+var_C]
.text:00000941                 mov     [edx+4], eax
.text:00000944                 cmp     [ebp+var_C], 0
.text:00000948                 jz      short loc_952
.text:0000094A                 mov     ecx, [ebp+this]
.text:0000094D                 mov     eax, [ecx+4]
.text:00000950                 jmp     short loc_97C
.text:00000952 ; ---------------------------------------------------------------------------
.text:00000952
.text:00000952 loc_952:                                ; CODE XREF: CBinderInStream::Release(void)+30j
.text:00000952                 mov     edx, [ebp+this]
.text:00000955                 mov     [ebp+var_8], edx
.text:00000958                 mov     eax, [ebp+var_8]
.text:0000095B                 mov     [ebp+var_4], eax
.text:0000095E                 cmp     [ebp+var_4], 0
.text:00000962                 jz      short loc_973
.text:00000964                 push    1
.text:00000966                 mov     ecx, [ebp+var_4]
.text:00000969                 call    ??_GCBinderInStream@@QAEPAXI@Z ; CBinderInStream::`scalar deleting destructor'(uint)
.text:0000096E                 mov     [ebp+var_10], eax
.text:00000971                 jmp     short loc_97A
.text:00000973 ; ---------------------------------------------------------------------------
.text:00000973
.text:00000973 loc_973:                                ; CODE XREF: CBinderInStream::Release(void)+4Aj
.text:00000973                 mov     [ebp+var_10], 0
.text:0000097A
.text:0000097A loc_97A:                                ; CODE XREF: CBinderInStream::Release(void)+59j
.text:0000097A                 xor     eax, eax
.text:0000097C
.text:0000097C loc_97C:                                ; CODE XREF: CBinderInStream::Release(void)+38j
.text:0000097C                 add     esp, 10h
.text:0000097F                 cmp     ebp, esp
.text:00000981                 call    __RTC_CheckEsp
.text:00000986                 mov     esp, ebp
.text:00000988                 pop     ebp
.text:00000989                 retn    4
.text:00000989 ?Release@CBinderInStream@@UAGKXZ endp
.text:00000989
.text:00000989 _text           ends
.text:00000989
.text:0000098C ; ===========================================================================
.text:0000098C
.text:0000098C ; Segment type: Pure code
.text:0000098C ; Segment permissions: Read/Execute
.text:0000098C _text           segment para public 'CODE' use32
.text:0000098C                 assume cs:_text
.text:0000098C                 ;org 98Ch
.text:0000098C ; COMDAT (pick any)
.text:0000098C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000098C
.text:0000098C ; =============== S U B R O U T I N E =======================================
.text:0000098C
.text:0000098C ; Attributes: bp-based frame
.text:0000098C
.text:0000098C ; public: void * __thiscall CBinderInStream::`scalar deleting destructor'(unsigned int)
.text:0000098C                 public ??_GCBinderInStream@@QAEPAXI@Z
.text:0000098C ??_GCBinderInStream@@QAEPAXI@Z proc near
.text:0000098C                                         ; CODE XREF: CBinderInStream::Release(void)+51p
.text:0000098C
.text:0000098C var_4           = dword ptr -4
.text:0000098C arg_0           = dword ptr  8
.text:0000098C
.text:0000098C                 push    ebp
.text:0000098D                 mov     ebp, esp
.text:0000098F                 push    ecx
.text:00000990                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000997                 mov     [ebp+var_4], ecx
.text:0000099A                 mov     ecx, [ebp+var_4] ; this
.text:0000099D                 call    ??1CBinderInStream@@QAE@XZ ; CBinderInStream::~CBinderInStream(void)
.text:000009A2                 mov     eax, [ebp+arg_0]
.text:000009A5                 and     eax, 1
.text:000009A8                 jz      short loc_9B6
.text:000009AA                 mov     ecx, [ebp+var_4]
.text:000009AD                 push    ecx             ; void *
.text:000009AE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009B3                 add     esp, 4
.text:000009B6
.text:000009B6 loc_9B6:                                ; CODE XREF: CBinderInStream::`scalar deleting destructor'(uint)+1Cj
.text:000009B6                 mov     eax, [ebp+var_4]
.text:000009B9                 add     esp, 4
.text:000009BC                 cmp     ebp, esp
.text:000009BE                 call    __RTC_CheckEsp
.text:000009C3                 mov     esp, ebp
.text:000009C5                 pop     ebp
.text:000009C6                 retn    4
.text:000009C6 ??_GCBinderInStream@@QAEPAXI@Z endp
.text:000009C6
.text:000009C6 ; ---------------------------------------------------------------------------
.text:000009C9                 align 4
.text:000009C9 _text           ends
.text:000009C9
.text:000009CC ; ===========================================================================
.text:000009CC
.text:000009CC ; Segment type: Pure code
.text:000009CC ; Segment permissions: Read/Execute
.text:000009CC _text           segment para public 'CODE' use32
.text:000009CC                 assume cs:_text
.text:000009CC                 ;org 9CCh
.text:000009CC ; COMDAT (pick any)
.text:000009CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009CC
.text:000009CC ; =============== S U B R O U T I N E =======================================
.text:000009CC
.text:000009CC ; Attributes: bp-based frame
.text:000009CC
.text:000009CC ; _DWORD __thiscall CBinderInStream::~CBinderInStream(CBinderInStream *__hidden this)
.text:000009CC                 public ??1CBinderInStream@@QAE@XZ
.text:000009CC ??1CBinderInStream@@QAE@XZ proc near    ; CODE XREF: CBinderInStream::`scalar deleting destructor'(uint)+11p
.text:000009CC
.text:000009CC var_4           = dword ptr -4
.text:000009CC
.text:000009CC                 push    ebp
.text:000009CD                 mov     ebp, esp
.text:000009CF                 push    ecx
.text:000009D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009D7                 mov     [ebp+var_4], ecx
.text:000009DA                 mov     eax, [ebp+var_4]
.text:000009DD                 mov     dword ptr [eax], offset ??_7CBinderInStream@@6B@ ; const CBinderInStream::`vftable'
.text:000009E3                 mov     ecx, [ebp+var_4]
.text:000009E6                 mov     ecx, [ecx+8]    ; this
.text:000009E9                 call    ?CloseRead@CStreamBinder@@QAEXXZ ; CStreamBinder::CloseRead(void)
.text:000009EE                 add     esp, 4
.text:000009F1                 cmp     ebp, esp
.text:000009F3                 call    __RTC_CheckEsp
.text:000009F8                 mov     esp, ebp
.text:000009FA                 pop     ebp
.text:000009FB                 retn
.text:000009FB ??1CBinderInStream@@QAE@XZ endp
.text:000009FB
.text:000009FB _text           ends
.text:000009FB
.text:000009FC ; ===========================================================================
.text:000009FC
.text:000009FC ; Segment type: Pure code
.text:000009FC ; Segment permissions: Read/Execute
.text:000009FC _text           segment para public 'CODE' use32
.text:000009FC                 assume cs:_text
.text:000009FC                 ;org 9FCh
.text:000009FC ; COMDAT (pick any)
.text:000009FC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000009FC
.text:000009FC ; =============== S U B R O U T I N E =======================================
.text:000009FC
.text:000009FC ; Attributes: bp-based frame
.text:000009FC
.text:000009FC ; void __thiscall CStreamBinder::CloseRead(CStreamBinder *__hidden this)
.text:000009FC                 public ?CloseRead@CStreamBinder@@QAEXXZ
.text:000009FC ?CloseRead@CStreamBinder@@QAEXXZ proc near
.text:000009FC                                         ; CODE XREF: CBinderInStream::~CBinderInStream(void)+1Dp
.text:000009FC
.text:000009FC var_4           = dword ptr -4
.text:000009FC
.text:000009FC                 push    ebp
.text:000009FD                 mov     ebp, esp
.text:000009FF                 push    ecx
.text:00000A00                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A07                 mov     [ebp+var_4], ecx
.text:00000A0A                 mov     ecx, [ebp+var_4]
.text:00000A0D                 add     ecx, 8          ; this
.text:00000A10                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000A15                 add     esp, 4
.text:00000A18                 cmp     ebp, esp
.text:00000A1A                 call    __RTC_CheckEsp
.text:00000A1F                 mov     esp, ebp
.text:00000A21                 pop     ebp
.text:00000A22                 retn
.text:00000A22 ?CloseRead@CStreamBinder@@QAEXXZ endp
.text:00000A22
.text:00000A22 ; ---------------------------------------------------------------------------
.text:00000A23                 align 4
.text:00000A23 _text           ends
.text:00000A23
.text:00000A24 ; ===========================================================================
.text:00000A24
.text:00000A24 ; Segment type: Pure code
.text:00000A24 ; Segment permissions: Read/Execute
.text:00000A24 _text           segment para public 'CODE' use32
.text:00000A24                 assume cs:_text
.text:00000A24                 ;org 0A24h
.text:00000A24 ; COMDAT (pick any)
.text:00000A24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A24
.text:00000A24 ; =============== S U B R O U T I N E =======================================
.text:00000A24
.text:00000A24 ; Attributes: bp-based frame
.text:00000A24
.text:00000A24 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Set(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00000A24                 public ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00000A24 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00000A24                                         ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+F0p
.text:00000A24                                         ; CStreamBinder::Write(void const *,uint,uint *)+64p ...
.text:00000A24
.text:00000A24 var_4           = dword ptr -4
.text:00000A24
.text:00000A24                 push    ebp
.text:00000A25                 mov     ebp, esp
.text:00000A27                 push    ecx
.text:00000A28                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A2F                 mov     [ebp+var_4], ecx
.text:00000A32                 mov     eax, [ebp+var_4]
.text:00000A35                 push    eax
.text:00000A36                 call    _Event_Set@4    ; Event_Set(x)
.text:00000A3B                 add     esp, 4
.text:00000A3E                 cmp     ebp, esp
.text:00000A40                 call    __RTC_CheckEsp
.text:00000A45                 mov     esp, ebp
.text:00000A47                 pop     ebp
.text:00000A48                 retn
.text:00000A48 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00000A48
.text:00000A48 ; ---------------------------------------------------------------------------
.text:00000A49                 align 4
.text:00000A49 _text           ends
.text:00000A49
.text:00000A4C ; ===========================================================================
.text:00000A4C
.text:00000A4C ; Segment type: Pure code
.text:00000A4C ; Segment permissions: Read/Execute
.text:00000A4C _text           segment para public 'CODE' use32
.text:00000A4C                 assume cs:_text
.text:00000A4C                 ;org 0A4Ch
.text:00000A4C ; COMDAT (pick any)
.text:00000A4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000A4C
.text:00000A4C ; =============== S U B R O U T I N E =======================================
.text:00000A4C
.text:00000A4C ; Attributes: bp-based frame
.text:00000A4C
.text:00000A4C ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00000A4C                 public ??0ISequentialInStream@@QAE@XZ
.text:00000A4C ??0ISequentialInStream@@QAE@XZ proc near
.text:00000A4C                                         ; CODE XREF: CBinderInStream::CBinderInStream(CStreamBinder *)+11p
.text:00000A4C
.text:00000A4C var_4           = dword ptr -4
.text:00000A4C
.text:00000A4C                 push    ebp
.text:00000A4D                 mov     ebp, esp
.text:00000A4F                 push    ecx
.text:00000A50                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A57                 mov     [ebp+var_4], ecx
.text:00000A5A                 mov     ecx, [ebp+var_4]
.text:00000A5D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000A62                 mov     eax, [ebp+var_4]
.text:00000A65                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00000A6B                 mov     eax, [ebp+var_4]
.text:00000A6E                 add     esp, 4
.text:00000A71                 cmp     ebp, esp
.text:00000A73                 call    __RTC_CheckEsp
.text:00000A78                 mov     esp, ebp
.text:00000A7A                 pop     ebp
.text:00000A7B                 retn
.text:00000A7B ??0ISequentialInStream@@QAE@XZ endp
.text:00000A7B
.text:00000A7B _text           ends
.text:00000A7B
.rdata:00000A7C ; ===========================================================================
.rdata:00000A7C
.rdata:00000A7C ; Segment type: Pure data
.rdata:00000A7C ; Segment permissions: Read
.rdata:00000A7C _rdata          segment dword public 'DATA' use32
.rdata:00000A7C                 assume cs:_rdata
.rdata:00000A7C                 ;org 0A7Ch
.rdata:00000A7C ; COMDAT (pick largest)
.rdata:00000A7C                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00000A80                 public ??_7ISequentialInStream@@6B@
.rdata:00000A80 ; const ISequentialInStream::`vftable'
.rdata:00000A80 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00000A80                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00000A84                 dd offset __purecall
.rdata:00000A88                 dd offset __purecall
.rdata:00000A8C                 dd offset __purecall
.rdata:00000A8C _rdata          ends
.rdata:00000A8C
.rdata$r:00000A90 ; ===========================================================================
.rdata$r:00000A90
.rdata$r:00000A90 ; Segment type: Pure data
.rdata$r:00000A90 ; Segment permissions: Read
.rdata$r:00000A90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000A90                 assume cs:_rdata$r
.rdata$r:00000A90                 ;org 0A90h
.rdata$r:00000A90 ; COMDAT (pick any)
.rdata$r:00000A90                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00000A90 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00000A90 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00000A7Co
.rdata$r:00000A91                 db    0
.rdata$r:00000A92                 db    0
.rdata$r:00000A93                 db    0
.rdata$r:00000A94                 db    0
.rdata$r:00000A95                 db    0
.rdata$r:00000A96                 db    0
.rdata$r:00000A97                 db    0
.rdata$r:00000A98                 db    0
.rdata$r:00000A99                 db    0
.rdata$r:00000A9A                 db    0
.rdata$r:00000A9B                 db    0
.rdata$r:00000A9C                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00000AA0                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000AA0 _rdata$r        ends
.rdata$r:00000AA0
.text:00000AA4 ; ===========================================================================
.text:00000AA4
.text:00000AA4 ; Segment type: Pure code
.text:00000AA4 ; Segment permissions: Read/Execute
.text:00000AA4 _text           segment para public 'CODE' use32
.text:00000AA4                 assume cs:_text
.text:00000AA4                 ;org 0AA4h
.text:00000AA4 ; COMDAT (pick any)
.text:00000AA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000AA4
.text:00000AA4 ; =============== S U B R O U T I N E =======================================
.text:00000AA4
.text:00000AA4 ; Attributes: bp-based frame
.text:00000AA4
.text:00000AA4 ; public: __thiscall IUnknown::IUnknown(void)
.text:00000AA4                 public ??0IUnknown@@QAE@XZ
.text:00000AA4 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialInStream::ISequentialInStream(void)+11p
.text:00000AA4                                         ; ISequentialOutStream::ISequentialOutStream(void)+11p
.text:00000AA4
.text:00000AA4 var_4           = dword ptr -4
.text:00000AA4
.text:00000AA4                 push    ebp
.text:00000AA5                 mov     ebp, esp
.text:00000AA7                 push    ecx
.text:00000AA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AAF                 mov     [ebp+var_4], ecx
.text:00000AB2                 mov     eax, [ebp+var_4]
.text:00000AB5                 mov     esp, ebp
.text:00000AB7                 pop     ebp
.text:00000AB8                 retn
.text:00000AB8 ??0IUnknown@@QAE@XZ endp
.text:00000AB8
.text:00000AB8 ; ---------------------------------------------------------------------------
.text:00000AB9                 align 4
.text:00000AB9 _text           ends
.text:00000AB9
.text:00000ABC ; ===========================================================================
.text:00000ABC
.text:00000ABC ; Segment type: Pure code
.text:00000ABC ; Segment permissions: Read/Execute
.text:00000ABC _text           segment para public 'CODE' use32
.text:00000ABC                 assume cs:_text
.text:00000ABC                 ;org 0ABCh
.text:00000ABC ; COMDAT (pick any)
.text:00000ABC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000ABC
.text:00000ABC ; =============== S U B R O U T I N E =======================================
.text:00000ABC
.text:00000ABC ; Attributes: bp-based frame
.text:00000ABC
.text:00000ABC ; public: __thiscall CBinderOutStream::CBinderOutStream(class CStreamBinder *)
.text:00000ABC                 public ??0CBinderOutStream@@QAE@PAVCStreamBinder@@@Z
.text:00000ABC ??0CBinderOutStream@@QAE@PAVCStreamBinder@@@Z proc near
.text:00000ABC                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+F0p
.text:00000ABC
.text:00000ABC var_4           = dword ptr -4
.text:00000ABC arg_0           = dword ptr  8
.text:00000ABC
.text:00000ABC                 push    ebp
.text:00000ABD                 mov     ebp, esp
.text:00000ABF                 push    ecx
.text:00000AC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AC7                 mov     [ebp+var_4], ecx
.text:00000ACA                 mov     ecx, [ebp+var_4] ; this
.text:00000ACD                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00000AD2                 mov     ecx, [ebp+var_4]
.text:00000AD5                 add     ecx, 4          ; this
.text:00000AD8                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000ADD                 mov     eax, [ebp+var_4]
.text:00000AE0                 mov     dword ptr [eax], offset ??_7CBinderOutStream@@6B@ ; const CBinderOutStream::`vftable'
.text:00000AE6                 mov     ecx, [ebp+var_4]
.text:00000AE9                 mov     edx, [ebp+arg_0]
.text:00000AEC                 mov     [ecx+8], edx
.text:00000AEF                 mov     eax, [ebp+var_4]
.text:00000AF2                 add     esp, 4
.text:00000AF5                 cmp     ebp, esp
.text:00000AF7                 call    __RTC_CheckEsp
.text:00000AFC                 mov     esp, ebp
.text:00000AFE                 pop     ebp
.text:00000AFF                 retn    4
.text:00000AFF ??0CBinderOutStream@@QAE@PAVCStreamBinder@@@Z endp
.text:00000AFF
.text:00000AFF ; ---------------------------------------------------------------------------
.text:00000B02                 align 4
.text:00000B02 _text           ends
.text:00000B02
.rdata:00000B04 ; ===========================================================================
.rdata:00000B04
.rdata:00000B04 ; Segment type: Pure data
.rdata:00000B04 ; Segment permissions: Read
.rdata:00000B04 _rdata          segment dword public 'DATA' use32
.rdata:00000B04                 assume cs:_rdata
.rdata:00000B04                 ;org 0B04h
.rdata:00000B04 ; COMDAT (pick largest)
.rdata:00000B04                 dd offset ??_R4CBinderOutStream@@6B@ ; const CBinderOutStream::`RTTI Complete Object Locator'
.rdata:00000B08                 public ??_7CBinderOutStream@@6B@
.rdata:00000B08 ; const CBinderOutStream::`vftable'
.rdata:00000B08 ??_7CBinderOutStream@@6B@ dd offset ?QueryInterface@CBinderOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00000B08                                         ; DATA XREF: CBinderOutStream::CBinderOutStream(CStreamBinder *)+24o
.rdata:00000B08                                         ; CBinderOutStream::~CBinderOutStream(void)+11o
.rdata:00000B08                                         ; CBinderOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00000B0C                 dd offset ?AddRef@CBinderOutStream@@UAGKXZ ; CBinderOutStream::AddRef(void)
.rdata:00000B10                 dd offset ?Release@CBinderOutStream@@UAGKXZ ; CBinderOutStream::Release(void)
.rdata:00000B14                 dd offset ?Write@CBinderOutStream@@UAGJPBXIPAI@Z ; CBinderOutStream::Write(void const *,uint,uint *)
.rdata:00000B14 _rdata          ends
.rdata:00000B14
.rdata$r:00000B18 ; ===========================================================================
.rdata$r:00000B18
.rdata$r:00000B18 ; Segment type: Pure data
.rdata$r:00000B18 ; Segment permissions: Read
.rdata$r:00000B18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B18                 assume cs:_rdata$r
.rdata$r:00000B18                 ;org 0B18h
.rdata$r:00000B18 ; COMDAT (pick any)
.rdata$r:00000B18                 public ??_R4CBinderOutStream@@6B@
.rdata$r:00000B18 ; const CBinderOutStream::`RTTI Complete Object Locator'
.rdata$r:00000B18 ??_R4CBinderOutStream@@6B@ db    0      ; DATA XREF: .rdata:00000B04o
.rdata$r:00000B19                 db    0
.rdata$r:00000B1A                 db    0
.rdata$r:00000B1B                 db    0
.rdata$r:00000B1C                 db    0
.rdata$r:00000B1D                 db    0
.rdata$r:00000B1E                 db    0
.rdata$r:00000B1F                 db    0
.rdata$r:00000B20                 db    0
.rdata$r:00000B21                 db    0
.rdata$r:00000B22                 db    0
.rdata$r:00000B23                 db    0
.rdata$r:00000B24                 dd offset ??_R0?AVCBinderOutStream@@@8 ; CBinderOutStream `RTTI Type Descriptor'
.rdata$r:00000B28                 dd offset ??_R3CBinderOutStream@@8 ; CBinderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B28 _rdata$r        ends
.rdata$r:00000B28
.data:00000B2C ; ===========================================================================
.data:00000B2C
.data:00000B2C ; Segment type: Pure data
.data:00000B2C ; Segment permissions: Read/Write
.data:00000B2C _data           segment dword public 'DATA' use32
.data:00000B2C                 assume cs:_data
.data:00000B2C                 ;org 0B2Ch
.data:00000B2C ; COMDAT (pick any)
.data:00000B2C                 public ??_R0?AVCBinderOutStream@@@8
.data:00000B2C ; class CBinderOutStream `RTTI Type Descriptor'
.data:00000B2C ??_R0?AVCBinderOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00000B2C                                         ; DATA XREF: .rdata$r:00000B24o
.data:00000B2C                                         ; .rdata$r:CBinderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000B2C                                         ; const type_info::`vftable'
.data:00000B30                 db    0
.data:00000B31                 db    0
.data:00000B32                 db    0
.data:00000B33                 db    0
.data:00000B34                 db  2Eh ; .
.data:00000B35                 db  3Fh ; ?
.data:00000B36                 db  41h ; A
.data:00000B37                 db  56h ; V
.data:00000B38                 db  43h ; C
.data:00000B39                 db  42h ; B
.data:00000B3A                 db  69h ; i
.data:00000B3B                 db  6Eh ; n
.data:00000B3C                 db  64h ; d
.data:00000B3D                 db  65h ; e
.data:00000B3E                 db  72h ; r
.data:00000B3F                 db  4Fh ; O
.data:00000B40                 db  75h ; u
.data:00000B41                 db  74h ; t
.data:00000B42                 db  53h ; S
.data:00000B43                 db  74h ; t
.data:00000B44                 db  72h ; r
.data:00000B45                 db  65h ; e
.data:00000B46                 db  61h ; a
.data:00000B47                 db  6Dh ; m
.data:00000B48                 db  40h ; @
.data:00000B49                 db  40h ; @
.data:00000B4A                 db    0
.data:00000B4B                 align 4
.data:00000B4B _data           ends
.data:00000B4B
.rdata$r:00000B4C ; ===========================================================================
.rdata$r:00000B4C
.rdata$r:00000B4C ; Segment type: Pure data
.rdata$r:00000B4C ; Segment permissions: Read
.rdata$r:00000B4C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B4C                 assume cs:_rdata$r
.rdata$r:00000B4C                 ;org 0B4Ch
.rdata$r:00000B4C ; COMDAT (pick any)
.rdata$r:00000B4C                 public ??_R3CBinderOutStream@@8
.rdata$r:00000B4C ; CBinderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B4C ??_R3CBinderOutStream@@8 db    0        ; DATA XREF: .rdata$r:00000B28o
.rdata$r:00000B4C                                         ; .rdata$r:00000B88o
.rdata$r:00000B4D                 db    0
.rdata$r:00000B4E                 db    0
.rdata$r:00000B4F                 db    0
.rdata$r:00000B50                 db    1
.rdata$r:00000B51                 db    0
.rdata$r:00000B52                 db    0
.rdata$r:00000B53                 db    0
.rdata$r:00000B54                 db    4
.rdata$r:00000B55                 db    0
.rdata$r:00000B56                 db    0
.rdata$r:00000B57                 db    0
.rdata$r:00000B58                 dd offset ??_R2CBinderOutStream@@8 ; CBinderOutStream::`RTTI Base Class Array'
.rdata$r:00000B58 _rdata$r        ends
.rdata$r:00000B58
.rdata$r:00000B5C ; ===========================================================================
.rdata$r:00000B5C
.rdata$r:00000B5C ; Segment type: Pure data
.rdata$r:00000B5C ; Segment permissions: Read
.rdata$r:00000B5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B5C                 assume cs:_rdata$r
.rdata$r:00000B5C                 ;org 0B5Ch
.rdata$r:00000B5C ; COMDAT (pick any)
.rdata$r:00000B5C                 public ??_R2CBinderOutStream@@8
.rdata$r:00000B5C ; CBinderOutStream::`RTTI Base Class Array'
.rdata$r:00000B5C ??_R2CBinderOutStream@@8 dd offset ??_R1A@?0A@EA@CBinderOutStream@@8
.rdata$r:00000B5C                                         ; DATA XREF: .rdata$r:00000B58o
.rdata$r:00000B5C                                         ; CBinderOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B60                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B64                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000B68                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000B6C                 db    0
.rdata$r:00000B6D                 align 10h
.rdata$r:00000B6D _rdata$r        ends
.rdata$r:00000B6D
.rdata$r:00000B70 ; ===========================================================================
.rdata$r:00000B70
.rdata$r:00000B70 ; Segment type: Pure data
.rdata$r:00000B70 ; Segment permissions: Read
.rdata$r:00000B70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B70                 assume cs:_rdata$r
.rdata$r:00000B70                 ;org 0B70h
.rdata$r:00000B70 ; COMDAT (pick any)
.rdata$r:00000B70                 public ??_R1A@?0A@EA@CBinderOutStream@@8
.rdata$r:00000B70 ; CBinderOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B70 ??_R1A@?0A@EA@CBinderOutStream@@8 dd offset ??_R0?AVCBinderOutStream@@@8
.rdata$r:00000B70                                         ; DATA XREF: .rdata$r:CBinderOutStream::`RTTI Base Class Array'o
.rdata$r:00000B70                                         ; CBinderOutStream `RTTI Type Descriptor'
.rdata$r:00000B74                 db    3
.rdata$r:00000B75                 db    0
.rdata$r:00000B76                 db    0
.rdata$r:00000B77                 db    0
.rdata$r:00000B78                 db    0
.rdata$r:00000B79                 db    0
.rdata$r:00000B7A                 db    0
.rdata$r:00000B7B                 db    0
.rdata$r:00000B7C                 db 0FFh
.rdata$r:00000B7D                 db 0FFh
.rdata$r:00000B7E                 db 0FFh
.rdata$r:00000B7F                 db 0FFh
.rdata$r:00000B80                 db    0
.rdata$r:00000B81                 db    0
.rdata$r:00000B82                 db    0
.rdata$r:00000B83                 db    0
.rdata$r:00000B84                 db  40h ; @
.rdata$r:00000B85                 db    0
.rdata$r:00000B86                 db    0
.rdata$r:00000B87                 db    0
.rdata$r:00000B88                 dd offset ??_R3CBinderOutStream@@8 ; CBinderOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000B88 _rdata$r        ends
.rdata$r:00000B88
.rdata$r:00000B8C ; ===========================================================================
.rdata$r:00000B8C
.rdata$r:00000B8C ; Segment type: Pure data
.rdata$r:00000B8C ; Segment permissions: Read
.rdata$r:00000B8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000B8C                 assume cs:_rdata$r
.rdata$r:00000B8C                 ;org 0B8Ch
.rdata$r:00000B8C ; COMDAT (pick any)
.rdata$r:00000B8C                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00000B8C ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000B8C ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00000B8C                                         ; DATA XREF: .rdata$r:00000B60o
.rdata$r:00000B8C                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00000B8C                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00000B90                 db    1
.rdata$r:00000B91                 db    0
.rdata$r:00000B92                 db    0
.rdata$r:00000B93                 db    0
.rdata$r:00000B94                 db    0
.rdata$r:00000B95                 db    0
.rdata$r:00000B96                 db    0
.rdata$r:00000B97                 db    0
.rdata$r:00000B98                 db 0FFh
.rdata$r:00000B99                 db 0FFh
.rdata$r:00000B9A                 db 0FFh
.rdata$r:00000B9B                 db 0FFh
.rdata$r:00000B9C                 db    0
.rdata$r:00000B9D                 db    0
.rdata$r:00000B9E                 db    0
.rdata$r:00000B9F                 db    0
.rdata$r:00000BA0                 db  40h ; @
.rdata$r:00000BA1                 db    0
.rdata$r:00000BA2                 db    0
.rdata$r:00000BA3                 db    0
.rdata$r:00000BA4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BA4 _rdata$r        ends
.rdata$r:00000BA4
.data:00000BA8 ; ===========================================================================
.data:00000BA8
.data:00000BA8 ; Segment type: Pure data
.data:00000BA8 ; Segment permissions: Read/Write
.data:00000BA8 _data           segment dword public 'DATA' use32
.data:00000BA8                 assume cs:_data
.data:00000BA8                 ;org 0BA8h
.data:00000BA8 ; COMDAT (pick any)
.data:00000BA8                 public ??_R0?AUISequentialOutStream@@@8
.data:00000BA8 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00000BA8 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00000BA8                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000BA8                                         ; .rdata$r:00000DECo
.data:00000BA8                                         ; const type_info::`vftable'
.data:00000BAC                 align 10h
.data:00000BB0 a_?auisequent_0 db '.?AUISequentialOutStream@@',0
.data:00000BCB                 align 4
.data:00000BCB _data           ends
.data:00000BCB
.rdata$r:00000BCC ; ===========================================================================
.rdata$r:00000BCC
.rdata$r:00000BCC ; Segment type: Pure data
.rdata$r:00000BCC ; Segment permissions: Read
.rdata$r:00000BCC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BCC                 assume cs:_rdata$r
.rdata$r:00000BCC                 ;org 0BCCh
.rdata$r:00000BCC ; COMDAT (pick any)
.rdata$r:00000BCC                 public ??_R3ISequentialOutStream@@8
.rdata$r:00000BCC ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000BCC ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00000BA4o
.rdata$r:00000BCC                                         ; .rdata$r:00000DF0o
.rdata$r:00000BCD                 db    0
.rdata$r:00000BCE                 db    0
.rdata$r:00000BCF                 db    0
.rdata$r:00000BD0                 db    0
.rdata$r:00000BD1                 db    0
.rdata$r:00000BD2                 db    0
.rdata$r:00000BD3                 db    0
.rdata$r:00000BD4                 db    2
.rdata$r:00000BD5                 db    0
.rdata$r:00000BD6                 db    0
.rdata$r:00000BD7                 db    0
.rdata$r:00000BD8                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00000BD8 _rdata$r        ends
.rdata$r:00000BD8
.rdata$r:00000BDC ; ===========================================================================
.rdata$r:00000BDC
.rdata$r:00000BDC ; Segment type: Pure data
.rdata$r:00000BDC ; Segment permissions: Read
.rdata$r:00000BDC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000BDC                 assume cs:_rdata$r
.rdata$r:00000BDC                 ;org 0BDCh
.rdata$r:00000BDC ; COMDAT (pick any)
.rdata$r:00000BDC                 public ??_R2ISequentialOutStream@@8
.rdata$r:00000BDC ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00000BDC ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00000BDC                                         ; DATA XREF: .rdata$r:00000BD8o
.rdata$r:00000BDC                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BE0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000BE4                 db    0
.rdata$r:00000BE5                 align 4
.rdata$r:00000BE5 _rdata$r        ends
.rdata$r:00000BE5
.text:00000BE8 ; ===========================================================================
.text:00000BE8
.text:00000BE8 ; Segment type: Pure code
.text:00000BE8 ; Segment permissions: Read/Execute
.text:00000BE8 _text           segment para public 'CODE' use32
.text:00000BE8                 assume cs:_text
.text:00000BE8                 ;org 0BE8h
.text:00000BE8 ; COMDAT (pick any)
.text:00000BE8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000BE8
.text:00000BE8 ; =============== S U B R O U T I N E =======================================
.text:00000BE8
.text:00000BE8 ; Attributes: bp-based frame
.text:00000BE8
.text:00000BE8 ; __int32 __stdcall CBinderOutStream::QueryInterface(CBinderOutStream *this, const struct _GUID *Buf1, void **)
.text:00000BE8                 public ?QueryInterface@CBinderOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:00000BE8 ?QueryInterface@CBinderOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000BE8                                         ; DATA XREF: .rdata:const CBinderOutStream::`vftable'o
.text:00000BE8
.text:00000BE8 this            = dword ptr  8
.text:00000BE8 Buf1            = dword ptr  0Ch
.text:00000BE8 arg_8           = dword ptr  10h
.text:00000BE8
.text:00000BE8                 push    ebp
.text:00000BE9                 mov     ebp, esp
.text:00000BEB                 mov     eax, [ebp+arg_8]
.text:00000BEE                 mov     dword ptr [eax], 0
.text:00000BF4                 push    offset _IID_IUnknown ; Buf2
.text:00000BF9                 mov     ecx, [ebp+Buf1]
.text:00000BFC                 push    ecx             ; Buf1
.text:00000BFD                 call    ___@8           ; __(x,x)
.text:00000C02                 test    eax, eax
.text:00000C04                 jz      short loc_C10
.text:00000C06                 mov     edx, [ebp+arg_8]
.text:00000C09                 mov     eax, [ebp+this]
.text:00000C0C                 mov     [edx], eax
.text:00000C0E                 jmp     short loc_C33
.text:00000C10 ; ---------------------------------------------------------------------------
.text:00000C10
.text:00000C10 loc_C10:                                ; CODE XREF: CBinderOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00000C10                 push    offset _IID_ISequentialOutStream ; Buf2
.text:00000C15                 mov     ecx, [ebp+Buf1]
.text:00000C18                 push    ecx             ; Buf1
.text:00000C19                 call    ___@8           ; __(x,x)
.text:00000C1E                 test    eax, eax
.text:00000C20                 jz      short loc_C2C
.text:00000C22                 mov     edx, [ebp+arg_8]
.text:00000C25                 mov     eax, [ebp+this]
.text:00000C28                 mov     [edx], eax
.text:00000C2A                 jmp     short loc_C33
.text:00000C2C ; ---------------------------------------------------------------------------
.text:00000C2C
.text:00000C2C loc_C2C:                                ; CODE XREF: CBinderOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:00000C2C                 mov     eax, 80004002h
.text:00000C31                 jmp     short loc_C44
.text:00000C33 ; ---------------------------------------------------------------------------
.text:00000C33
.text:00000C33 loc_C33:                                ; CODE XREF: CBinderOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00000C33                                         ; CBinderOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:00000C33                 mov     ecx, [ebp+this]
.text:00000C36                 mov     edx, [ecx+4]
.text:00000C39                 add     edx, 1
.text:00000C3C                 mov     eax, [ebp+this]
.text:00000C3F                 mov     [eax+4], edx
.text:00000C42                 xor     eax, eax
.text:00000C44
.text:00000C44 loc_C44:                                ; CODE XREF: CBinderOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:00000C44                 cmp     ebp, esp
.text:00000C46                 call    __RTC_CheckEsp
.text:00000C4B                 pop     ebp
.text:00000C4C                 retn    0Ch
.text:00000C4C ?QueryInterface@CBinderOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00000C4C
.text:00000C4C ; ---------------------------------------------------------------------------
.text:00000C4F                 align 10h
.text:00000C4F _text           ends
.text:00000C4F
.text:00000C50 ; ===========================================================================
.text:00000C50
.text:00000C50 ; Segment type: Pure code
.text:00000C50 ; Segment permissions: Read/Execute
.text:00000C50 _text           segment para public 'CODE' use32
.text:00000C50                 assume cs:_text
.text:00000C50                 ;org 0C50h
.text:00000C50 ; COMDAT (pick any)
.text:00000C50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C50
.text:00000C50 ; =============== S U B R O U T I N E =======================================
.text:00000C50
.text:00000C50 ; Attributes: bp-based frame
.text:00000C50
.text:00000C50 ; unsigned __int32 __stdcall CBinderOutStream::AddRef(CBinderOutStream *this)
.text:00000C50                 public ?AddRef@CBinderOutStream@@UAGKXZ
.text:00000C50 ?AddRef@CBinderOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00000B0Co
.text:00000C50
.text:00000C50 var_4           = dword ptr -4
.text:00000C50 this            = dword ptr  8
.text:00000C50
.text:00000C50                 push    ebp
.text:00000C51                 mov     ebp, esp
.text:00000C53                 push    ecx
.text:00000C54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C5B                 mov     eax, [ebp+this]
.text:00000C5E                 mov     ecx, [eax+4]
.text:00000C61                 add     ecx, 1
.text:00000C64                 mov     [ebp+var_4], ecx
.text:00000C67                 mov     edx, [ebp+this]
.text:00000C6A                 mov     eax, [ebp+var_4]
.text:00000C6D                 mov     [edx+4], eax
.text:00000C70                 mov     eax, [ebp+var_4]
.text:00000C73                 mov     esp, ebp
.text:00000C75                 pop     ebp
.text:00000C76                 retn    4
.text:00000C76 ?AddRef@CBinderOutStream@@UAGKXZ endp
.text:00000C76
.text:00000C76 ; ---------------------------------------------------------------------------
.text:00000C79                 align 4
.text:00000C79 _text           ends
.text:00000C79
.text:00000C7C ; ===========================================================================
.text:00000C7C
.text:00000C7C ; Segment type: Pure code
.text:00000C7C ; Segment permissions: Read/Execute
.text:00000C7C _text           segment para public 'CODE' use32
.text:00000C7C                 assume cs:_text
.text:00000C7C                 ;org 0C7Ch
.text:00000C7C ; COMDAT (pick any)
.text:00000C7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000C7C
.text:00000C7C ; =============== S U B R O U T I N E =======================================
.text:00000C7C
.text:00000C7C ; Attributes: bp-based frame
.text:00000C7C
.text:00000C7C ; unsigned __int32 __stdcall CBinderOutStream::Release(CBinderOutStream *this)
.text:00000C7C                 public ?Release@CBinderOutStream@@UAGKXZ
.text:00000C7C ?Release@CBinderOutStream@@UAGKXZ proc near ; DATA XREF: .rdata:00000B10o
.text:00000C7C
.text:00000C7C var_10          = dword ptr -10h
.text:00000C7C var_C           = dword ptr -0Ch
.text:00000C7C var_8           = dword ptr -8
.text:00000C7C var_4           = dword ptr -4
.text:00000C7C this            = dword ptr  8
.text:00000C7C
.text:00000C7C                 push    ebp
.text:00000C7D                 mov     ebp, esp
.text:00000C7F                 sub     esp, 10h
.text:00000C82                 mov     eax, 0CCCCCCCCh
.text:00000C87                 mov     [ebp+var_10], eax
.text:00000C8A                 mov     [ebp+var_C], eax
.text:00000C8D                 mov     [ebp+var_8], eax
.text:00000C90                 mov     [ebp+var_4], eax
.text:00000C93                 mov     eax, [ebp+this]
.text:00000C96                 mov     ecx, [eax+4]
.text:00000C99                 sub     ecx, 1
.text:00000C9C                 mov     [ebp+var_C], ecx
.text:00000C9F                 mov     edx, [ebp+this]
.text:00000CA2                 mov     eax, [ebp+var_C]
.text:00000CA5                 mov     [edx+4], eax
.text:00000CA8                 cmp     [ebp+var_C], 0
.text:00000CAC                 jz      short loc_CB6
.text:00000CAE                 mov     ecx, [ebp+this]
.text:00000CB1                 mov     eax, [ecx+4]
.text:00000CB4                 jmp     short loc_CE0
.text:00000CB6 ; ---------------------------------------------------------------------------
.text:00000CB6
.text:00000CB6 loc_CB6:                                ; CODE XREF: CBinderOutStream::Release(void)+30j
.text:00000CB6                 mov     edx, [ebp+this]
.text:00000CB9                 mov     [ebp+var_8], edx
.text:00000CBC                 mov     eax, [ebp+var_8]
.text:00000CBF                 mov     [ebp+var_4], eax
.text:00000CC2                 cmp     [ebp+var_4], 0
.text:00000CC6                 jz      short loc_CD7
.text:00000CC8                 push    1
.text:00000CCA                 mov     ecx, [ebp+var_4]
.text:00000CCD                 call    ??_GCBinderOutStream@@QAEPAXI@Z ; CBinderOutStream::`scalar deleting destructor'(uint)
.text:00000CD2                 mov     [ebp+var_10], eax
.text:00000CD5                 jmp     short loc_CDE
.text:00000CD7 ; ---------------------------------------------------------------------------
.text:00000CD7
.text:00000CD7 loc_CD7:                                ; CODE XREF: CBinderOutStream::Release(void)+4Aj
.text:00000CD7                 mov     [ebp+var_10], 0
.text:00000CDE
.text:00000CDE loc_CDE:                                ; CODE XREF: CBinderOutStream::Release(void)+59j
.text:00000CDE                 xor     eax, eax
.text:00000CE0
.text:00000CE0 loc_CE0:                                ; CODE XREF: CBinderOutStream::Release(void)+38j
.text:00000CE0                 add     esp, 10h
.text:00000CE3                 cmp     ebp, esp
.text:00000CE5                 call    __RTC_CheckEsp
.text:00000CEA                 mov     esp, ebp
.text:00000CEC                 pop     ebp
.text:00000CED                 retn    4
.text:00000CED ?Release@CBinderOutStream@@UAGKXZ endp
.text:00000CED
.text:00000CED _text           ends
.text:00000CED
.text:00000CF0 ; ===========================================================================
.text:00000CF0
.text:00000CF0 ; Segment type: Pure code
.text:00000CF0 ; Segment permissions: Read/Execute
.text:00000CF0 _text           segment para public 'CODE' use32
.text:00000CF0                 assume cs:_text
.text:00000CF0                 ;org 0CF0h
.text:00000CF0 ; COMDAT (pick any)
.text:00000CF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000CF0
.text:00000CF0 ; =============== S U B R O U T I N E =======================================
.text:00000CF0
.text:00000CF0 ; Attributes: bp-based frame
.text:00000CF0
.text:00000CF0 ; public: void * __thiscall CBinderOutStream::`scalar deleting destructor'(unsigned int)
.text:00000CF0                 public ??_GCBinderOutStream@@QAEPAXI@Z
.text:00000CF0 ??_GCBinderOutStream@@QAEPAXI@Z proc near
.text:00000CF0                                         ; CODE XREF: CBinderOutStream::Release(void)+51p
.text:00000CF0
.text:00000CF0 var_4           = dword ptr -4
.text:00000CF0 arg_0           = dword ptr  8
.text:00000CF0
.text:00000CF0                 push    ebp
.text:00000CF1                 mov     ebp, esp
.text:00000CF3                 push    ecx
.text:00000CF4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CFB                 mov     [ebp+var_4], ecx
.text:00000CFE                 mov     ecx, [ebp+var_4] ; this
.text:00000D01                 call    ??1CBinderOutStream@@QAE@XZ ; CBinderOutStream::~CBinderOutStream(void)
.text:00000D06                 mov     eax, [ebp+arg_0]
.text:00000D09                 and     eax, 1
.text:00000D0C                 jz      short loc_D1A
.text:00000D0E                 mov     ecx, [ebp+var_4]
.text:00000D11                 push    ecx             ; void *
.text:00000D12                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000D17                 add     esp, 4
.text:00000D1A
.text:00000D1A loc_D1A:                                ; CODE XREF: CBinderOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00000D1A                 mov     eax, [ebp+var_4]
.text:00000D1D                 add     esp, 4
.text:00000D20                 cmp     ebp, esp
.text:00000D22                 call    __RTC_CheckEsp
.text:00000D27                 mov     esp, ebp
.text:00000D29                 pop     ebp
.text:00000D2A                 retn    4
.text:00000D2A ??_GCBinderOutStream@@QAEPAXI@Z endp
.text:00000D2A
.text:00000D2A ; ---------------------------------------------------------------------------
.text:00000D2D                 align 10h
.text:00000D2D _text           ends
.text:00000D2D
.text:00000D30 ; ===========================================================================
.text:00000D30
.text:00000D30 ; Segment type: Pure code
.text:00000D30 ; Segment permissions: Read/Execute
.text:00000D30 _text           segment para public 'CODE' use32
.text:00000D30                 assume cs:_text
.text:00000D30                 ;org 0D30h
.text:00000D30 ; COMDAT (pick any)
.text:00000D30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; _DWORD __thiscall CBinderOutStream::~CBinderOutStream(CBinderOutStream *__hidden this)
.text:00000D30                 public ??1CBinderOutStream@@QAE@XZ
.text:00000D30 ??1CBinderOutStream@@QAE@XZ proc near   ; CODE XREF: CBinderOutStream::`scalar deleting destructor'(uint)+11p
.text:00000D30
.text:00000D30 var_4           = dword ptr -4
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 push    ecx
.text:00000D34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D3B                 mov     [ebp+var_4], ecx
.text:00000D3E                 mov     eax, [ebp+var_4]
.text:00000D41                 mov     dword ptr [eax], offset ??_7CBinderOutStream@@6B@ ; const CBinderOutStream::`vftable'
.text:00000D47                 mov     ecx, [ebp+var_4]
.text:00000D4A                 mov     ecx, [ecx+8]    ; this
.text:00000D4D                 call    ?CloseWrite@CStreamBinder@@QAEXXZ ; CStreamBinder::CloseWrite(void)
.text:00000D52                 add     esp, 4
.text:00000D55                 cmp     ebp, esp
.text:00000D57                 call    __RTC_CheckEsp
.text:00000D5C                 mov     esp, ebp
.text:00000D5E                 pop     ebp
.text:00000D5F                 retn
.text:00000D5F ??1CBinderOutStream@@QAE@XZ endp
.text:00000D5F
.text:00000D5F _text           ends
.text:00000D5F
.text:00000D60 ; ===========================================================================
.text:00000D60
.text:00000D60 ; Segment type: Pure code
.text:00000D60 ; Segment permissions: Read/Execute
.text:00000D60 _text           segment para public 'CODE' use32
.text:00000D60                 assume cs:_text
.text:00000D60                 ;org 0D60h
.text:00000D60 ; COMDAT (pick any)
.text:00000D60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D60
.text:00000D60 ; =============== S U B R O U T I N E =======================================
.text:00000D60
.text:00000D60 ; Attributes: bp-based frame
.text:00000D60
.text:00000D60 ; void __thiscall CStreamBinder::CloseWrite(CStreamBinder *__hidden this)
.text:00000D60                 public ?CloseWrite@CStreamBinder@@QAEXXZ
.text:00000D60 ?CloseWrite@CStreamBinder@@QAEXXZ proc near
.text:00000D60                                         ; CODE XREF: CBinderOutStream::~CBinderOutStream(void)+1Dp
.text:00000D60
.text:00000D60 var_4           = dword ptr -4
.text:00000D60
.text:00000D60                 push    ebp
.text:00000D61                 mov     ebp, esp
.text:00000D63                 push    ecx
.text:00000D64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D6B                 mov     [ebp+var_4], ecx
.text:00000D6E                 mov     eax, [ebp+var_4]
.text:00000D71                 mov     dword ptr [eax+14h], 0
.text:00000D78                 mov     ecx, [ebp+var_4]
.text:00000D7B                 mov     dword ptr [ecx+10h], 0
.text:00000D82                 mov     ecx, [ebp+var_4]
.text:00000D85                 add     ecx, 4          ; this
.text:00000D88                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000D8D                 add     esp, 4
.text:00000D90                 cmp     ebp, esp
.text:00000D92                 call    __RTC_CheckEsp
.text:00000D97                 mov     esp, ebp
.text:00000D99                 pop     ebp
.text:00000D9A                 retn
.text:00000D9A ?CloseWrite@CStreamBinder@@QAEXXZ endp
.text:00000D9A
.text:00000D9A ; ---------------------------------------------------------------------------
.text:00000D9B                 align 4
.text:00000D9B _text           ends
.text:00000D9B
.text:00000D9C ; ===========================================================================
.text:00000D9C
.text:00000D9C ; Segment type: Pure code
.text:00000D9C ; Segment permissions: Read/Execute
.text:00000D9C _text           segment para public 'CODE' use32
.text:00000D9C                 assume cs:_text
.text:00000D9C                 ;org 0D9Ch
.text:00000D9C ; COMDAT (pick any)
.text:00000D9C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000D9C
.text:00000D9C ; =============== S U B R O U T I N E =======================================
.text:00000D9C
.text:00000D9C ; Attributes: bp-based frame
.text:00000D9C
.text:00000D9C ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00000D9C                 public ??0ISequentialOutStream@@QAE@XZ
.text:00000D9C ??0ISequentialOutStream@@QAE@XZ proc near
.text:00000D9C                                         ; CODE XREF: CBinderOutStream::CBinderOutStream(CStreamBinder *)+11p
.text:00000D9C
.text:00000D9C var_4           = dword ptr -4
.text:00000D9C
.text:00000D9C                 push    ebp
.text:00000D9D                 mov     ebp, esp
.text:00000D9F                 push    ecx
.text:00000DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DA7                 mov     [ebp+var_4], ecx
.text:00000DAA                 mov     ecx, [ebp+var_4]
.text:00000DAD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000DB2                 mov     eax, [ebp+var_4]
.text:00000DB5                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00000DBB                 mov     eax, [ebp+var_4]
.text:00000DBE                 add     esp, 4
.text:00000DC1                 cmp     ebp, esp
.text:00000DC3                 call    __RTC_CheckEsp
.text:00000DC8                 mov     esp, ebp
.text:00000DCA                 pop     ebp
.text:00000DCB                 retn
.text:00000DCB ??0ISequentialOutStream@@QAE@XZ endp
.text:00000DCB
.text:00000DCB _text           ends
.text:00000DCB
.rdata:00000DCC ; ===========================================================================
.rdata:00000DCC
.rdata:00000DCC ; Segment type: Pure data
.rdata:00000DCC ; Segment permissions: Read
.rdata:00000DCC _rdata          segment dword public 'DATA' use32
.rdata:00000DCC                 assume cs:_rdata
.rdata:00000DCC                 ;org 0DCCh
.rdata:00000DCC ; COMDAT (pick largest)
.rdata:00000DCC                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00000DD0                 public ??_7ISequentialOutStream@@6B@
.rdata:00000DD0 ; const ISequentialOutStream::`vftable'
.rdata:00000DD0 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00000DD0                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00000DD4                 dd offset __purecall
.rdata:00000DD8                 dd offset __purecall
.rdata:00000DDC                 dd offset __purecall
.rdata:00000DDC _rdata          ends
.rdata:00000DDC
.rdata$r:00000DE0 ; ===========================================================================
.rdata$r:00000DE0
.rdata$r:00000DE0 ; Segment type: Pure data
.rdata$r:00000DE0 ; Segment permissions: Read
.rdata$r:00000DE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000DE0                 assume cs:_rdata$r
.rdata$r:00000DE0                 ;org 0DE0h
.rdata$r:00000DE0 ; COMDAT (pick any)
.rdata$r:00000DE0                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00000DE0 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00000DE0 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00000DCCo
.rdata$r:00000DE1                 db    0
.rdata$r:00000DE2                 db    0
.rdata$r:00000DE3                 db    0
.rdata$r:00000DE4                 db    0
.rdata$r:00000DE5                 db    0
.rdata$r:00000DE6                 db    0
.rdata$r:00000DE7                 db    0
.rdata$r:00000DE8                 db    0
.rdata$r:00000DE9                 db    0
.rdata$r:00000DEA                 db    0
.rdata$r:00000DEB                 db    0
.rdata$r:00000DEC                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00000DF0                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000DF0 _rdata$r        ends
.rdata$r:00000DF0
.text:00000DF4 ; ===========================================================================
.text:00000DF4
.text:00000DF4 ; Segment type: Pure code
.text:00000DF4 ; Segment permissions: Read/Execute
.text:00000DF4 _text           segment para public 'CODE' use32
.text:00000DF4                 assume cs:_text
.text:00000DF4                 ;org 0DF4h
.text:00000DF4 ; COMDAT (pick any)
.text:00000DF4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000DF4
.text:00000DF4 ; =============== S U B R O U T I N E =======================================
.text:00000DF4
.text:00000DF4 ; Attributes: bp-based frame
.text:00000DF4
.text:00000DF4 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00000DF4                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00000DF4 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00000DF4                                         ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+41p
.text:00000DF4
.text:00000DF4 var_4           = dword ptr -4
.text:00000DF4
.text:00000DF4                 push    ebp
.text:00000DF5                 mov     ebp, esp
.text:00000DF7                 push    ecx
.text:00000DF8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DFF                 mov     [ebp+var_4], ecx
.text:00000E02                 mov     eax, [ebp+var_4]
.text:00000E05                 mov     ecx, [eax]
.text:00000E07                 push    ecx
.text:00000E08                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00000E0D                 add     esp, 4
.text:00000E10                 cmp     ebp, esp
.text:00000E12                 call    __RTC_CheckEsp
.text:00000E17                 mov     esp, ebp
.text:00000E19                 pop     ebp
.text:00000E1A                 retn
.text:00000E1A ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00000E1A
.text:00000E1A ; ---------------------------------------------------------------------------
.text:00000E1B                 align 4
.text:00000E1B _text           ends
.text:00000E1B
.text:00000E1C ; ===========================================================================
.text:00000E1C
.text:00000E1C ; Segment type: Pure code
.text:00000E1C ; Segment permissions: Read/Execute
.text:00000E1C _text           segment para public 'CODE' use32
.text:00000E1C                 assume cs:_text
.text:00000E1C                 ;org 0E1Ch
.text:00000E1C ; COMDAT (pick any)
.text:00000E1C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E1C
.text:00000E1C ; =============== S U B R O U T I N E =======================================
.text:00000E1C
.text:00000E1C ; Attributes: bp-based frame
.text:00000E1C
.text:00000E1C ; public: __thiscall NWindows::NSynchronization::CBaseEvent::operator void *(void)
.text:00000E1C                 public ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ
.text:00000E1C ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ proc near
.text:00000E1C                                         ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+6Cp
.text:00000E1C                                         ; CStreamBinder::Write(void const *,uint,uint *)+7Ap
.text:00000E1C
.text:00000E1C var_4           = dword ptr -4
.text:00000E1C
.text:00000E1C                 push    ebp
.text:00000E1D                 mov     ebp, esp
.text:00000E1F                 push    ecx
.text:00000E20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E27                 mov     [ebp+var_4], ecx
.text:00000E2A                 mov     eax, [ebp+var_4]
.text:00000E2D                 mov     eax, [eax]
.text:00000E2F                 mov     esp, ebp
.text:00000E31                 pop     ebp
.text:00000E32                 retn
.text:00000E32 ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ endp
.text:00000E32
.text:00000E32 ; ---------------------------------------------------------------------------
.text:00000E33                 align 4
.text:00000E33 _text           ends
.text:00000E33
.text:00000E34 ; ===========================================================================
.text:00000E34
.text:00000E34 ; Segment type: Pure code
.text:00000E34 ; Segment permissions: Read/Execute
.text:00000E34 _text           segment para public 'CODE' use32
.text:00000E34                 assume cs:_text
.text:00000E34                 ;org 0E34h
.text:00000E34 ; COMDAT (pick any)
.text:00000E34                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E34
.text:00000E34 ; =============== S U B R O U T I N E =======================================
.text:00000E34
.text:00000E34 ; Attributes: bp-based frame
.text:00000E34
.text:00000E34 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00000E34                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00000E34 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00000E34                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+B9p
.text:00000E34
.text:00000E34 var_4           = dword ptr -4
.text:00000E34 arg_0           = dword ptr  8
.text:00000E34
.text:00000E34                 push    ebp
.text:00000E35                 mov     ebp, esp
.text:00000E37                 push    ecx
.text:00000E38                 push    esi
.text:00000E39                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E40                 mov     [ebp+var_4], ecx
.text:00000E43                 mov     eax, [ebp+var_4]
.text:00000E46                 mov     ecx, [ebp+arg_0]
.text:00000E49                 mov     [eax], ecx
.text:00000E4B                 cmp     [ebp+arg_0], 0
.text:00000E4F                 jz      short loc_E68
.text:00000E51                 mov     edx, [ebp+arg_0]
.text:00000E54                 mov     eax, [edx]
.text:00000E56                 mov     esi, esp
.text:00000E58                 mov     ecx, [ebp+arg_0]
.text:00000E5B                 push    ecx
.text:00000E5C                 mov     edx, [eax+4]
.text:00000E5F                 call    edx
.text:00000E61                 cmp     esi, esp
.text:00000E63                 call    __RTC_CheckEsp
.text:00000E68
.text:00000E68 loc_E68:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00000E68                 mov     eax, [ebp+var_4]
.text:00000E6B                 pop     esi
.text:00000E6C                 add     esp, 4
.text:00000E6F                 cmp     ebp, esp
.text:00000E71                 call    __RTC_CheckEsp
.text:00000E76                 mov     esp, ebp
.text:00000E78                 pop     ebp
.text:00000E79                 retn    4
.text:00000E79 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00000E79
.text:00000E79 _text           ends
.text:00000E79
.text:00000E7C ; ===========================================================================
.text:00000E7C
.text:00000E7C ; Segment type: Pure code
.text:00000E7C ; Segment permissions: Read/Execute
.text:00000E7C _text           segment para public 'CODE' use32
.text:00000E7C                 assume cs:_text
.text:00000E7C                 ;org 0E7Ch
.text:00000E7C ; COMDAT (pick any)
.text:00000E7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000E7C
.text:00000E7C ; =============== S U B R O U T I N E =======================================
.text:00000E7C
.text:00000E7C ; Attributes: bp-based frame
.text:00000E7C
.text:00000E7C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00000E7C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00000E7C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00000E7C                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+144p
.text:00000E7C                                         ; __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$1+3j
.text:00000E7C
.text:00000E7C var_4           = dword ptr -4
.text:00000E7C
.text:00000E7C                 push    ebp
.text:00000E7D                 mov     ebp, esp
.text:00000E7F                 push    ecx
.text:00000E80                 push    esi
.text:00000E81                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E88                 mov     [ebp+var_4], ecx
.text:00000E8B                 mov     eax, [ebp+var_4]
.text:00000E8E                 cmp     dword ptr [eax], 0
.text:00000E91                 jz      short loc_EAE
.text:00000E93                 mov     ecx, [ebp+var_4]
.text:00000E96                 mov     edx, [ecx]
.text:00000E98                 mov     eax, [ebp+var_4]
.text:00000E9B                 mov     ecx, [eax]
.text:00000E9D                 mov     edx, [edx]
.text:00000E9F                 mov     esi, esp
.text:00000EA1                 push    ecx
.text:00000EA2                 mov     eax, [edx+8]
.text:00000EA5                 call    eax
.text:00000EA7                 cmp     esi, esp
.text:00000EA9                 call    __RTC_CheckEsp
.text:00000EAE
.text:00000EAE loc_EAE:                                ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00000EAE                 pop     esi
.text:00000EAF                 add     esp, 4
.text:00000EB2                 cmp     ebp, esp
.text:00000EB4                 call    __RTC_CheckEsp
.text:00000EB9                 mov     esp, ebp
.text:00000EBB                 pop     ebp
.text:00000EBC                 retn
.text:00000EBC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00000EBC
.text:00000EBC ; ---------------------------------------------------------------------------
.text:00000EBD                 align 10h
.text:00000EBD _text           ends
.text:00000EBD
.text:00000EC0 ; ===========================================================================
.text:00000EC0
.text:00000EC0 ; Segment type: Pure code
.text:00000EC0 ; Segment permissions: Read/Execute
.text:00000EC0 _text           segment para public 'CODE' use32
.text:00000EC0                 assume cs:_text
.text:00000EC0                 ;org 0EC0h
.text:00000EC0 ; COMDAT (pick any)
.text:00000EC0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::Detach(void)
.text:00000EC0                 public ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
.text:00000EC0 ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ proc near
.text:00000EC0                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+C8p
.text:00000EC0
.text:00000EC0 var_8           = dword ptr -8
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 sub     esp, 8
.text:00000EC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000ECD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ED4                 mov     [ebp+var_4], ecx
.text:00000ED7                 mov     eax, [ebp+var_4]
.text:00000EDA                 mov     ecx, [eax]
.text:00000EDC                 mov     [ebp+var_8], ecx
.text:00000EDF                 mov     edx, [ebp+var_4]
.text:00000EE2                 mov     dword ptr [edx], 0
.text:00000EE8                 mov     eax, [ebp+var_8]
.text:00000EEB                 mov     esp, ebp
.text:00000EED                 pop     ebp
.text:00000EEE                 retn
.text:00000EEE ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ endp
.text:00000EEE
.text:00000EEE ; ---------------------------------------------------------------------------
.text:00000EEF                 align 10h
.text:00000EEF _text           ends
.text:00000EEF
.text:00000EF0 ; ===========================================================================
.text:00000EF0
.text:00000EF0 ; Segment type: Pure code
.text:00000EF0 ; Segment permissions: Read/Execute
.text:00000EF0 _text           segment para public 'CODE' use32
.text:00000EF0                 assume cs:_text
.text:00000EF0                 ;org 0EF0h
.text:00000EF0 ; COMDAT (pick any)
.text:00000EF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000EF0
.text:00000EF0 ; =============== S U B R O U T I N E =======================================
.text:00000EF0
.text:00000EF0 ; Attributes: bp-based frame
.text:00000EF0
.text:00000EF0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:00000EF0                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:00000EF0 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:00000EF0                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+118p
.text:00000EF0
.text:00000EF0 var_4           = dword ptr -4
.text:00000EF0 arg_0           = dword ptr  8
.text:00000EF0
.text:00000EF0                 push    ebp
.text:00000EF1                 mov     ebp, esp
.text:00000EF3                 push    ecx
.text:00000EF4                 push    esi
.text:00000EF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000EFC                 mov     [ebp+var_4], ecx
.text:00000EFF                 mov     eax, [ebp+var_4]
.text:00000F02                 mov     ecx, [ebp+arg_0]
.text:00000F05                 mov     [eax], ecx
.text:00000F07                 cmp     [ebp+arg_0], 0
.text:00000F0B                 jz      short loc_F24
.text:00000F0D                 mov     edx, [ebp+arg_0]
.text:00000F10                 mov     eax, [edx]
.text:00000F12                 mov     esi, esp
.text:00000F14                 mov     ecx, [ebp+arg_0]
.text:00000F17                 push    ecx
.text:00000F18                 mov     edx, [eax+4]
.text:00000F1B                 call    edx
.text:00000F1D                 cmp     esi, esp
.text:00000F1F                 call    __RTC_CheckEsp
.text:00000F24
.text:00000F24 loc_F24:                                ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:00000F24                 mov     eax, [ebp+var_4]
.text:00000F27                 pop     esi
.text:00000F28                 add     esp, 4
.text:00000F2B                 cmp     ebp, esp
.text:00000F2D                 call    __RTC_CheckEsp
.text:00000F32                 mov     esp, ebp
.text:00000F34                 pop     ebp
.text:00000F35                 retn    4
.text:00000F35 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:00000F35
.text:00000F35 _text           ends
.text:00000F35
.text:00000F38 ; ===========================================================================
.text:00000F38
.text:00000F38 ; Segment type: Pure code
.text:00000F38 ; Segment permissions: Read/Execute
.text:00000F38 _text           segment para public 'CODE' use32
.text:00000F38                 assume cs:_text
.text:00000F38                 ;org 0F38h
.text:00000F38 ; COMDAT (pick any)
.text:00000F38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F38
.text:00000F38 ; =============== S U B R O U T I N E =======================================
.text:00000F38
.text:00000F38 ; Attributes: bp-based frame
.text:00000F38
.text:00000F38 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00000F38                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00000F38 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00000F38                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+135p
.text:00000F38                                         ; __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$3+3j
.text:00000F38
.text:00000F38 var_4           = dword ptr -4
.text:00000F38
.text:00000F38                 push    ebp
.text:00000F39                 mov     ebp, esp
.text:00000F3B                 push    ecx
.text:00000F3C                 push    esi
.text:00000F3D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F44                 mov     [ebp+var_4], ecx
.text:00000F47                 mov     eax, [ebp+var_4]
.text:00000F4A                 cmp     dword ptr [eax], 0
.text:00000F4D                 jz      short loc_F6A
.text:00000F4F                 mov     ecx, [ebp+var_4]
.text:00000F52                 mov     edx, [ecx]
.text:00000F54                 mov     eax, [ebp+var_4]
.text:00000F57                 mov     ecx, [eax]
.text:00000F59                 mov     edx, [edx]
.text:00000F5B                 mov     esi, esp
.text:00000F5D                 push    ecx
.text:00000F5E                 mov     eax, [edx+8]
.text:00000F61                 call    eax
.text:00000F63                 cmp     esi, esp
.text:00000F65                 call    __RTC_CheckEsp
.text:00000F6A
.text:00000F6A loc_F6A:                                ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00000F6A                 pop     esi
.text:00000F6B                 add     esp, 4
.text:00000F6E                 cmp     ebp, esp
.text:00000F70                 call    __RTC_CheckEsp
.text:00000F75                 mov     esp, ebp
.text:00000F77                 pop     ebp
.text:00000F78                 retn
.text:00000F78 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00000F78
.text:00000F78 ; ---------------------------------------------------------------------------
.text:00000F79                 align 4
.text:00000F79 _text           ends
.text:00000F79
.text:00000F7C ; ===========================================================================
.text:00000F7C
.text:00000F7C ; Segment type: Pure code
.text:00000F7C ; Segment permissions: Read/Execute
.text:00000F7C _text           segment para public 'CODE' use32
.text:00000F7C                 assume cs:_text
.text:00000F7C                 ;org 0F7Ch
.text:00000F7C ; COMDAT (pick any)
.text:00000F7C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000F7C
.text:00000F7C ; =============== S U B R O U T I N E =======================================
.text:00000F7C
.text:00000F7C ; Attributes: bp-based frame
.text:00000F7C
.text:00000F7C ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::Detach(void)
.text:00000F7C                 public ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
.text:00000F7C ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ proc near
.text:00000F7C                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+124p
.text:00000F7C
.text:00000F7C var_8           = dword ptr -8
.text:00000F7C var_4           = dword ptr -4
.text:00000F7C
.text:00000F7C                 push    ebp
.text:00000F7D                 mov     ebp, esp
.text:00000F7F                 sub     esp, 8
.text:00000F82                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000F89                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000F90                 mov     [ebp+var_4], ecx
.text:00000F93                 mov     eax, [ebp+var_4]
.text:00000F96                 mov     ecx, [eax]
.text:00000F98                 mov     [ebp+var_8], ecx
.text:00000F9B                 mov     edx, [ebp+var_4]
.text:00000F9E                 mov     dword ptr [edx], 0
.text:00000FA4                 mov     eax, [ebp+var_8]
.text:00000FA7                 mov     esp, ebp
.text:00000FA9                 pop     ebp
.text:00000FAA                 retn
.text:00000FAA ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ endp
.text:00000FAA
.text:00000FAA _text           ends
.text:00000FAA
UNDEF:00000FB0 ; ===========================================================================
UNDEF:00000FB0
UNDEF:00000FB0 ; Segment type: Externs
UNDEF:00000FB0 ; UNDEF
UNDEF:00000FB0                 extrn __RTC_CheckEsp:near
UNDEF:00000FB0                                         ; CODE XREF: CBinderInStream::Read(void *,uint,uint *)+1Cp
UNDEF:00000FB0                                         ; CBinderOutStream::Write(void const *,uint,uint *)+1Cp ...
UNDEF:00000FB4                 extrn __RTC_Shutdown:near
UNDEF:00000FB4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000FB8                 extrn __RTC_InitBase:near
UNDEF:00000FB8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000FBC ; __stdcall ManualResetEvent_Create(x, x)
UNDEF:00000FBC                 extrn _ManualResetEvent_Create@8:near
UNDEF:00000FBC                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::Create(bool)+1Dp
UNDEF:00000FC0 ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:00000FC0                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:00000FC0                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::Create(void)+12p
UNDEF:00000FC4 ; __stdcall Event_Reset(x)
UNDEF:00000FC4                 extrn _Event_Reset@4:near
UNDEF:00000FC4                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Reset(void)+12p
UNDEF:00000FC8 ; void __cdecl operator delete(void *)
UNDEF:00000FC8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$0+4p
UNDEF:00000FC8                                         ; __unwindfunclet$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z$2+4p ...
UNDEF:00000FCC ; void *__cdecl operator new(unsigned int)
UNDEF:00000FCC                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+6Fp
UNDEF:00000FCC                                         ; CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+D4p
UNDEF:00000FD0                 extrn ___security_cookie:near
UNDEF:00000FD0                                         ; DATA XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+26r
UNDEF:00000FD4                 extrn ___CxxFrameHandler3:near
UNDEF:00000FD4                                         ; CODE XREF: __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z+16j
UNDEF:00000FD8 ; __fastcall __security_check_cookie(x)
UNDEF:00000FD8                 extrn @__security_check_cookie@4:near
UNDEF:00000FD8                                         ; CODE XREF: __ehhandler$?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z+Cp
UNDEF:00000FDC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000FDC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000FDC                                         ; CODE XREF: CStreamBinder::CreateStreams(ISequentialInStream * *,ISequentialOutStream * *)+153p
UNDEF:00000FDC                                         ; CStreamBinder::Write(void const *,uint,uint *)+E1p
UNDEF:00000FE0 ; const type_info::`vftable'
UNDEF:00000FE0                 extrn ??_7type_info@@6B@:near
UNDEF:00000FE0                                         ; DATA XREF: .data:CBinderInStream `RTTI Type Descriptor'o
UNDEF:00000FE0                                         ; .data:ISequentialInStream `RTTI Type Descriptor'o ...
UNDEF:00000FE4                 extrn _IID_ISequentialInStream:near
UNDEF:00000FE4                                         ; DATA XREF: CBinderInStream::QueryInterface(_GUID const &,void * *):loc_868o
UNDEF:00000FE8 ; const IID IID_IUnknown
UNDEF:00000FE8                 extrn _IID_IUnknown:near
UNDEF:00000FE8                                         ; DATA XREF: CBinderInStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000FE8                                         ; CBinderOutStream::QueryInterface(_GUID const &,void * *)+Co
UNDEF:00000FEC ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000FEC                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000FF0 ; __stdcall Event_Set(x)
UNDEF:00000FF0                 extrn _Event_Set@4:near ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Set(void)+12p
UNDEF:00000FF4                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialInStream::`vftable'o
UNDEF:00000FF4                                         ; .rdata:00000A84o ...
UNDEF:00000FF8                 extrn _IID_ISequentialOutStream:near
UNDEF:00000FF8                                         ; DATA XREF: CBinderOutStream::QueryInterface(_GUID const &,void * *):loc_C10o
UNDEF:00000FFC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000FFC                 extrn _memcpy:near      ; CODE XREF: CStreamBinder::Read(void *,uint,uint *)+87p
UNDEF:00001000 ; __stdcall Handle_WaitObject(x)
UNDEF:00001000                 extrn _Handle_WaitObject@4:near
UNDEF:00001000                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:00001004 ; DWORD __stdcall WaitForMultipleObjects(DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds)
UNDEF:00001004                 extrn __imp__WaitForMultipleObjects@16:near
UNDEF:00001004                                         ; CODE XREF: CStreamBinder::Write(void const *,uint,uint *)+8Ep
UNDEF:00001004                                         ; DATA XREF: CStreamBinder::Write(void const *,uint,uint *)+8Er
UNDEF:00001004
UNDEF:00001004
UNDEF:00001004                 end