.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 480585CDD20AA11FB3173C5ECD8C1AE5
.rdata:00000000 ; Input CRC32 : D0CC5D1F
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MainAr.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG75854        db 'Command Line Error:',0
.rdata:00000000                                         ; DATA XREF: .data:_kException_CmdLine_Error_Messageo
.rdata:00000014 $SG75856        db 'ERROR:',0           ; DATA XREF: .data:_kExceptionErrorMessageo
.rdata:0000001B                 align 4
.rdata:0000001C $SG75858        db 'Break signaled',0   ; DATA XREF: .data:_kUserBreakMessageo
.rdata:0000002B                 align 4
.rdata:0000002C $SG75860        db 'ERROR: Can',27h,'t allocate required memory!',0
.rdata:0000002C                                         ; DATA XREF: .data:_kMemoryExceptionMessageo
.rdata:00000053                 align 4
.rdata:00000054 $SG75862        db 'Unknown Error',0    ; DATA XREF: .data:_kUnknownExceptionMessageo
.rdata:00000062                 align 4
.rdata:00000064 $SG75864        db 0Ah                  ; DATA XREF: .data:_kInternalExceptionMessageo
.rdata:00000064                 db 0Ah
.rdata:00000064                 db 'Internal Error #',0
.rdata:00000077                 align 4
.rdata:00000078 ; char _SG75872[]
.rdata:00000078 $SG75872        dd offset aEexception@@ ; DATA XREF: PrintError(char const *)+1Ao
.rdata:00000078                                         ; "eException@@"
.rdata:0000007C ; char _SG75897[]
.rdata:0000007C $SG75897        db 'System ERROR:',0    ; DATA XREF: __catch$_main$3+65o
.rdata:0000008A                 align 4
.rdata:0000008A _rdata          ends
.rdata:0000008A
.bss:0000008C ; ===========================================================================
.bss:0000008C
.bss:0000008C ; Segment type: Uninitialized
.bss:0000008C ; Segment permissions: Read/Write
.bss:0000008C _bss            segment dword public 'BSS' use32
.bss:0000008C                 assume cs:_bss
.bss:0000008C                 ;org 8Ch
.bss:0000008C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000008C                 public ?g_IsNT@@3_NA
.bss:0000008C ; bool g_IsNT
.bss:0000008C ?g_IsNT@@3_NA   db ?                    ; DATA XREF: _main+5Aw
.bss:0000008D                 align 10h
.bss:00000090                 public ?g_StdStream@@3PAVCStdOutStream@@A
.bss:00000090 ; CStdOutStream *g_StdStream
.bss:00000090 ?g_StdStream@@3PAVCStdOutStream@@A dd ? ; DATA XREF: _main+4Bw
.bss:00000090                                         ; FlushStreams(void)+3r ...
.bss:00000094                 public ?g_ErrStream@@3PAVCStdOutStream@@A
.bss:00000094 ; class CStdOutStream * g_ErrStream
.bss:00000094 ?g_ErrStream@@3PAVCStdOutStream@@A dd ? ; DATA XREF: _main+41w
.bss:00000094                                         ; __catch$_main$2+Br ...
.bss:00000094 _bss            ends
.bss:00000094
.data:00000098 ; ===========================================================================
.data:00000098
.data:00000098 ; Segment type: Pure data
.data:00000098 ; Segment permissions: Read/Write
.data:00000098 _data           segment dword public 'DATA' use32
.data:00000098                 assume cs:_data
.data:00000098                 ;org 98h
.data:00000098 ; char *kException_CmdLine_Error_Message
.data:00000098 _kException_CmdLine_Error_Message dd offset $SG75854
.data:00000098                                         ; DATA XREF: __catch$_main$2r
.data:00000098                                         ; "Command Line Error:"
.data:0000009C ; char *kExceptionErrorMessage
.data:0000009C _kExceptionErrorMessage dd offset $SG75856 ; DATA XREF: __catch$_main$5+9r
.data:0000009C                                         ; __catch$_main$6+9r ...
.data:0000009C                                         ; "ERROR:"
.data:000000A0 ; char *kUserBreakMessage
.data:000000A0 _kUserBreakMessage dd offset $SG75858   ; DATA XREF: __catch$_main$1r
.data:000000A0                                         ; __catch$_main$3+39r
.data:000000A0                                         ; "Break signaled"
.data:000000A4 ; char *kMemoryExceptionMessage
.data:000000A4 _kMemoryExceptionMessage dd offset $SG75860 ; DATA XREF: __catch$_main$0r
.data:000000A4                                         ; __catch$_main$3+Br
.data:000000A4                                         ; "ERROR: Can't allocate required memory!"
.data:000000A8 ; char *kUnknownExceptionMessage
.data:000000A8 _kUnknownExceptionMessage dd offset $SG75862 ; DATA XREF: __catch$_main$10r
.data:000000A8                                         ; "Unknown Error"
.data:000000AC ; char *kInternalExceptionMessage
.data:000000AC _kInternalExceptionMessage dd offset $SG75864
.data:000000AC                                         ; DATA XREF: __catch$_main$4+19r
.data:000000AC                                         ; __catch$_main$9+17r
.data:000000AC _data           ends                    ; "\n\nInternal Error #"
.data:000000AC
.text:000000B0 ; ===========================================================================
.text:000000B0
.text:000000B0 ; Segment type: Pure code
.text:000000B0 ; Segment permissions: Read/Execute
.text:000000B0 _text           segment para public 'CODE' use32
.text:000000B0                 assume cs:_text
.text:000000B0                 ;org 0B0h
.text:000000B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000B0
.text:000000B0 ; =============== S U B R O U T I N E =======================================
.text:000000B0
.text:000000B0 ; Attributes: bp-based frame
.text:000000B0
.text:000000B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:000000B0                 public _main
.text:000000B0 _main           proc near
.text:000000B0
.text:000000B0 var_D0          = byte ptr -0D0h
.text:000000B0 var_C8          = dword ptr -0C8h
.text:000000B0 var_20          = dword ptr -20h
.text:000000B0 var_18          = byte ptr -18h
.text:000000B0 var_10          = dword ptr -10h
.text:000000B0 var_C           = byte ptr -0Ch
.text:000000B0 var_4           = dword ptr -4
.text:000000B0 argc            = dword ptr  8
.text:000000B0 argv            = dword ptr  0Ch
.text:000000B0 envp            = dword ptr  10h
.text:000000B0
.text:000000B0 ; FUNCTION CHUNK AT .text:000004E1 SIZE 00000009 BYTES
.text:000000B0
.text:000000B0                 push    ebp
.text:000000B1                 mov     ebp, esp
.text:000000B3                 push    0FFFFFFFFh
.text:000000B5                 push    offset __ehhandler$_main
.text:000000BA                 mov     eax, large fs:0
.text:000000C0                 push    eax
.text:000000C1                 push    ecx
.text:000000C2                 sub     esp, 0C0h
.text:000000C8                 push    ebx
.text:000000C9                 push    esi
.text:000000CA                 push    edi
.text:000000CB                 lea     edi, [ebp+var_D0]
.text:000000D1                 mov     ecx, 30h ; '0'
.text:000000D6                 mov     eax, 0CCCCCCCCh
.text:000000DB                 rep stosd
.text:000000DD                 mov     eax, dword ptr ds:___security_cookie
.text:000000E2                 xor     eax, ebp
.text:000000E4                 push    eax
.text:000000E5                 lea     eax, [ebp+var_C]
.text:000000E8                 mov     large fs:0, eax
.text:000000EE                 mov     [ebp+var_10], esp
.text:000000F1                 mov     ds:?g_ErrStream@@3PAVCStdOutStream@@A, offset ?g_StdErr@@3VCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000000FB                 mov     ds:?g_StdStream@@3PAVCStdOutStream@@A, offset ?g_StdOut@@3VCStdOutStream@@A ; CStdOutStream * g_StdStream
.text:00000105                 call    ?IsItWindowsNT@@YG_NXZ ; IsItWindowsNT(void)
.text:0000010A                 mov     ds:?g_IsNT@@3_NA, al ; bool g_IsNT
.text:0000010F                 lea     ecx, [ebp+var_18] ; this
.text:00000112                 call    ??0CCtrlHandlerSetter@NConsoleClose@@QAE@XZ ; NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(void)
.text:00000117                 mov     [ebp+var_4], 0
.text:0000011E                 mov     [ebp+var_20], 0
.text:00000125                 mov     byte ptr [ebp+var_4], 1
.text:00000129                 call    ?Main2@@YGHXZ   ; Main2(void)
.text:0000012E                 mov     [ebp+var_C8], eax
.text:00000134                 mov     eax, [ebp+var_C8]
.text:0000013A                 mov     [ebp+var_20], eax
.text:0000013D                 jmp     loc_4E1
.text:0000013D _main           endp
.text:0000013D
.text:00000142
.text:00000142 ; =============== S U B R O U T I N E =======================================
.text:00000142
.text:00000142
.text:00000142 __catch$_main$0 proc near               ; DATA XREF: .xdata$x:000008FCo
.text:00000142                 mov     ecx, ds:_kMemoryExceptionMessage
.text:00000148                 push    ecx             ; Str
.text:00000149                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:0000014E                 mov     dword ptr [ebp-84h], 8
.text:00000158                 mov     dword ptr [ebp-4], 0
.text:0000015F                 mov     eax, offset $LN29
.text:00000164                 retn
.text:00000164 __catch$_main$0 endp
.text:00000164
.text:00000165 ; ---------------------------------------------------------------------------
.text:00000165                 mov     eax, offset __tryend$_main$11
.text:0000016A                 retn
.text:0000016B
.text:0000016B ; =============== S U B R O U T I N E =======================================
.text:0000016B
.text:0000016B
.text:0000016B __catch$_main$1 proc near               ; DATA XREF: .xdata$x:0000090Co
.text:0000016B                 mov     edx, ds:_kUserBreakMessage
.text:00000171                 push    edx             ; Str
.text:00000172                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:00000177                 mov     dword ptr [ebp-88h], 0FFh
.text:00000181                 mov     dword ptr [ebp-4], 0
.text:00000188                 mov     eax, offset $LN31
.text:0000018D                 retn
.text:0000018D __catch$_main$1 endp
.text:0000018D
.text:0000018E ; ---------------------------------------------------------------------------
.text:0000018E                 mov     eax, offset __tryend$_main$11
.text:00000193                 retn
.text:00000194
.text:00000194 ; =============== S U B R O U T I N E =======================================
.text:00000194
.text:00000194
.text:00000194 __catch$_main$2 proc near               ; DATA XREF: .xdata$x:0000091Co
.text:00000194                 mov     eax, ds:_kException_CmdLine_Error_Message
.text:00000199                 push    eax             ; Str
.text:0000019A                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:0000019F                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:000001A6                 jz      short loc_1C8
.text:000001A8                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000001AD                 mov     ecx, [ebp-28h]
.text:000001B0                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:000001B5                 push    eax
.text:000001B6                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000001BC                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:000001C1                 mov     ecx, eax
.text:000001C3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000001C8
.text:000001C8 loc_1C8:                                ; CODE XREF: __catch$_main$2+12j
.text:000001C8                 mov     dword ptr [ebp-8Ch], 7
.text:000001D2                 mov     dword ptr [ebp-4], 0
.text:000001D9                 mov     eax, offset $LN33
.text:000001DE                 retn
.text:000001DE __catch$_main$2 endp
.text:000001DE
.text:000001DF ; ---------------------------------------------------------------------------
.text:000001DF                 mov     eax, offset __tryend$_main$11
.text:000001E4                 retn
.text:000001E5
.text:000001E5 ; =============== S U B R O U T I N E =======================================
.text:000001E5
.text:000001E5
.text:000001E5 __catch$_main$3 proc near               ; DATA XREF: .xdata$x:0000092Co
.text:000001E5                 mov     ecx, [ebp-34h]
.text:000001E8                 cmp     dword ptr [ecx], 8007000Eh
.text:000001EE                 jnz     short loc_213
.text:000001F0                 mov     edx, ds:_kMemoryExceptionMessage
.text:000001F6                 push    edx             ; Str
.text:000001F7                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:000001FC                 mov     dword ptr [ebp-90h], 8
.text:00000206                 mov     dword ptr [ebp-4], 0
.text:0000020D                 mov     eax, offset $LN35
.text:00000212                 retn
.text:00000213 ; ---------------------------------------------------------------------------
.text:00000213
.text:00000213 loc_213:                                ; CODE XREF: __catch$_main$3+9j
.text:00000213                 mov     eax, [ebp-34h]
.text:00000216                 cmp     dword ptr [eax], 80004004h
.text:0000021C                 jnz     short loc_241
.text:0000021E                 mov     ecx, ds:_kUserBreakMessage
.text:00000224                 push    ecx             ; Str
.text:00000225                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:0000022A                 mov     dword ptr [ebp-94h], 0FFh
.text:00000234                 mov     dword ptr [ebp-4], 0
.text:0000023B                 mov     eax, offset $LN37
.text:00000240                 retn
.text:00000241 ; ---------------------------------------------------------------------------
.text:00000241
.text:00000241 loc_241:                                ; CODE XREF: __catch$_main$3+37j
.text:00000241                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00000248                 jz      short loc_2AE
.text:0000024A                 push    offset $SG75897 ; "System ERROR:"
.text:0000024F                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:00000254                 mov     edx, [ebp-34h]
.text:00000257                 mov     eax, [edx]
.text:00000259                 push    eax
.text:0000025A                 lea     ecx, [ebp-0A0h]
.text:00000260                 push    ecx
.text:00000261                 call    ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage(ulong)
.text:00000266                 mov     [ebp-0CCh], eax
.text:0000026C                 mov     edx, [ebp-0CCh]
.text:00000272                 mov     [ebp-0D0h], edx
.text:00000278                 mov     byte ptr [ebp-4], 3
.text:0000027C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000281                 mov     ecx, [ebp-0D0h]
.text:00000287                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:0000028C                 push    eax
.text:0000028D                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00000293                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000298                 mov     ecx, eax
.text:0000029A                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:0000029F                 mov     byte ptr [ebp-4], 2
.text:000002A3                 lea     ecx, [ebp-0A0h] ; this
.text:000002A9                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000002AE
.text:000002AE loc_2AE:                                ; CODE XREF: __catch$_main$3+63j
.text:000002AE                 mov     dword ptr [ebp-0A4h], 2
.text:000002B8                 mov     dword ptr [ebp-4], 0
.text:000002BF                 mov     eax, offset $LN39
.text:000002C4                 retn
.text:000002C4 __catch$_main$3 endp
.text:000002C4
.text:000002C5 ; ---------------------------------------------------------------------------
.text:000002C5                 mov     eax, offset __tryend$_main$11
.text:000002CA                 retn
.text:000002CB
.text:000002CB ; =============== S U B R O U T I N E =======================================
.text:000002CB
.text:000002CB
.text:000002CB __catch$_main$4 proc near               ; DATA XREF: .xdata$x:0000093Co
.text:000002CB                 call    ?FlushStreams@@YGXXZ ; FlushStreams(void)
.text:000002D0                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:000002D7                 jz      short loc_304
.text:000002D9                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000002DE                 mov     eax, [ebp-40h]
.text:000002E1                 mov     ecx, [eax]
.text:000002E3                 push    ecx
.text:000002E4                 mov     edx, ds:_kInternalExceptionMessage
.text:000002EA                 push    edx             ; Str
.text:000002EB                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000002F1                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000002F6                 mov     ecx, eax
.text:000002F8                 call    ??6CStdOutStream@@QAEAAV0@H@Z ; CStdOutStream::operator<<(int)
.text:000002FD                 mov     ecx, eax
.text:000002FF                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000304
.text:00000304 loc_304:                                ; CODE XREF: __catch$_main$4+Cj
.text:00000304                 mov     eax, [ebp-40h]
.text:00000307                 mov     ecx, [eax]
.text:00000309                 mov     [ebp-0A8h], ecx
.text:0000030F                 mov     dword ptr [ebp-4], 0
.text:00000316                 mov     eax, offset $LN41
.text:0000031B                 retn
.text:0000031B __catch$_main$4 endp
.text:0000031B
.text:0000031C ; ---------------------------------------------------------------------------
.text:0000031C                 mov     eax, offset __tryend$_main$11
.text:00000321                 retn
.text:00000322
.text:00000322 ; =============== S U B R O U T I N E =======================================
.text:00000322
.text:00000322
.text:00000322 __catch$_main$5 proc near               ; DATA XREF: .xdata$x:0000094Co
.text:00000322                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00000329                 jz      short loc_357
.text:0000032B                 mov     edx, ds:_kExceptionErrorMessage
.text:00000331                 push    edx             ; Str
.text:00000332                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:00000337                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000033C                 mov     ecx, [ebp-4Ch]
.text:0000033F                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00000344                 push    eax
.text:00000345                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:0000034B                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:00000350                 mov     ecx, eax
.text:00000352                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000357
.text:00000357 loc_357:                                ; CODE XREF: __catch$_main$5+7j
.text:00000357                 mov     dword ptr [ebp-0ACh], 2
.text:00000361                 mov     dword ptr [ebp-4], 0
.text:00000368                 mov     eax, offset $LN43
.text:0000036D                 retn
.text:0000036D __catch$_main$5 endp
.text:0000036D
.text:0000036E ; ---------------------------------------------------------------------------
.text:0000036E                 mov     eax, offset __tryend$_main$11
.text:00000373                 retn
.text:00000374
.text:00000374 ; =============== S U B R O U T I N E =======================================
.text:00000374
.text:00000374
.text:00000374 __catch$_main$6 proc near               ; DATA XREF: .xdata$x:0000095Co
.text:00000374                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:0000037B                 jz      short loc_3A8
.text:0000037D                 mov     eax, ds:_kExceptionErrorMessage
.text:00000382                 push    eax             ; Str
.text:00000383                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:00000388                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000038D                 mov     ecx, [ebp-58h]
.text:00000390                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000395                 push    eax             ; Str
.text:00000396                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:0000039C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000003A1                 mov     ecx, eax
.text:000003A3                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: __catch$_main$6+7j
.text:000003A8                 mov     dword ptr [ebp-0B0h], 2
.text:000003B2                 mov     dword ptr [ebp-4], 0
.text:000003B9                 mov     eax, offset $LN45
.text:000003BE                 retn
.text:000003BE __catch$_main$6 endp
.text:000003BE
.text:000003BF ; ---------------------------------------------------------------------------
.text:000003BF                 mov     eax, offset __tryend$_main$11
.text:000003C4                 retn
.text:000003C5
.text:000003C5 ; =============== S U B R O U T I N E =======================================
.text:000003C5
.text:000003C5
.text:000003C5 __catch$_main$7 proc near               ; DATA XREF: .xdata$x:0000096Co
.text:000003C5                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:000003CC                 jz      short loc_3F5
.text:000003CE                 mov     ecx, ds:_kExceptionErrorMessage
.text:000003D4                 push    ecx             ; Str
.text:000003D5                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:000003DA                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:000003DF                 mov     edx, [ebp-64h]
.text:000003E2                 push    edx             ; Str
.text:000003E3                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:000003E9                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:000003EE                 mov     ecx, eax
.text:000003F0                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:000003F5
.text:000003F5 loc_3F5:                                ; CODE XREF: __catch$_main$7+7j
.text:000003F5                 mov     dword ptr [ebp-0B4h], 2
.text:000003FF                 mov     dword ptr [ebp-4], 0
.text:00000406                 mov     eax, offset $LN47
.text:0000040B                 retn
.text:0000040B __catch$_main$7 endp
.text:0000040B
.text:0000040C ; ---------------------------------------------------------------------------
.text:0000040C                 mov     eax, offset __tryend$_main$11
.text:00000411                 retn
.text:00000412
.text:00000412 ; =============== S U B R O U T I N E =======================================
.text:00000412
.text:00000412
.text:00000412 __catch$_main$8 proc near               ; DATA XREF: .xdata$x:0000097Co
.text:00000412                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00000419                 jz      short loc_441
.text:0000041B                 mov     eax, ds:_kExceptionErrorMessage
.text:00000420                 push    eax             ; Str
.text:00000421                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:00000426                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:0000042B                 mov     ecx, [ebp-70h]
.text:0000042E                 push    ecx
.text:0000042F                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00000435                 call    ??6CStdOutStream@@QAEAAV0@PB_W@Z ; CStdOutStream::operator<<(wchar_t const *)
.text:0000043A                 mov     ecx, eax
.text:0000043C                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000441
.text:00000441 loc_441:                                ; CODE XREF: __catch$_main$8+7j
.text:00000441                 mov     dword ptr [ebp-0B8h], 2
.text:0000044B                 mov     dword ptr [ebp-4], 0
.text:00000452                 mov     eax, offset $LN49
.text:00000457                 retn
.text:00000457 __catch$_main$8 endp
.text:00000457
.text:00000458 ; ---------------------------------------------------------------------------
.text:00000458                 mov     eax, offset __tryend$_main$11
.text:0000045D                 retn
.text:0000045E
.text:0000045E ; =============== S U B R O U T I N E =======================================
.text:0000045E
.text:0000045E
.text:0000045E __catch$_main$9 proc near               ; DATA XREF: .xdata$x:0000098Co
.text:0000045E                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:00000465                 jz      short loc_4AB
.text:00000467                 call    ?FlushStreams@@YGXXZ ; FlushStreams(void)
.text:0000046C                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000471                 mov     edx, [ebp-7Ch]
.text:00000474                 push    edx
.text:00000475                 mov     eax, ds:_kInternalExceptionMessage
.text:0000047A                 push    eax             ; Str
.text:0000047B                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00000481                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000486                 mov     ecx, eax
.text:00000488                 call    ??6CStdOutStream@@QAEAAV0@H@Z ; CStdOutStream::operator<<(int)
.text:0000048D                 mov     ecx, eax
.text:0000048F                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000494                 mov     dword ptr [ebp-0BCh], 2
.text:0000049E                 mov     dword ptr [ebp-4], 0
.text:000004A5                 mov     eax, offset $LN51
.text:000004AA                 retn
.text:000004AB ; ---------------------------------------------------------------------------
.text:000004AB
.text:000004AB loc_4AB:                                ; CODE XREF: __catch$_main$9+7j
.text:000004AB                 mov     dword ptr [ebp-4], 0
.text:000004B2                 mov     eax, offset __tryend$_main$11
.text:000004B7                 retn
.text:000004B7 __catch$_main$9 endp
.text:000004B7
.text:000004B8
.text:000004B8 ; =============== S U B R O U T I N E =======================================
.text:000004B8
.text:000004B8
.text:000004B8 __catch$_main$10 proc near              ; DATA XREF: .xdata$x:0000099Co
.text:000004B8                 mov     ecx, ds:_kUnknownExceptionMessage
.text:000004BE                 push    ecx             ; Str
.text:000004BF                 call    ?PrintError@@YGXPBD@Z ; PrintError(char const *)
.text:000004C4                 mov     dword ptr [ebp-0C0h], 2
.text:000004CE                 mov     dword ptr [ebp-4], 0
.text:000004D5                 mov     eax, offset $LN55
.text:000004DA                 retn
.text:000004DA __catch$_main$10 endp
.text:000004DA
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DB                 mov     eax, offset __tryend$_main$11
.text:000004E0                 retn
.text:000004E1 ; ---------------------------------------------------------------------------
.text:000004E1 ; START OF FUNCTION CHUNK FOR _main
.text:000004E1
.text:000004E1 loc_4E1:                                ; CODE XREF: _main+8Dj
.text:000004E1                 mov     [ebp+var_4], 0
.text:000004E8                 jmp     short __tryend$_main$11
.text:000004E8 ; END OF FUNCTION CHUNK FOR _main
.text:000004EA
.text:000004EA ; =============== S U B R O U T I N E =======================================
.text:000004EA
.text:000004EA
.text:000004EA $LN55           proc near               ; DATA XREF: __catch$_main$10+1Do
.text:000004EA                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000004F1                 lea     ecx, [ebp-18h]  ; this
.text:000004F4                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:000004F9                 mov     eax, [ebp-0C0h]
.text:000004FF                 jmp     loc_666
.text:00000504 ; ---------------------------------------------------------------------------
.text:00000504
.text:00000504 __tryend$_main$11:                      ; CODE XREF: _main+438j
.text:00000504                                         ; DATA XREF: .text:00000165o ...
.text:00000504                 jmp     short loc_520
.text:00000506 ; ---------------------------------------------------------------------------
.text:00000506
.text:00000506 $LN51:                                  ; DATA XREF: __catch$_main$9+47o
.text:00000506                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000050D                 lea     ecx, [ebp-18h]  ; this
.text:00000510                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000515                 mov     eax, [ebp-0BCh]
.text:0000051B                 jmp     loc_666
.text:00000520 ; ---------------------------------------------------------------------------
.text:00000520
.text:00000520 loc_520:                                ; CODE XREF: $LN55:__tryend$_main$11j
.text:00000520                 jmp     short loc_53C
.text:00000522 ; ---------------------------------------------------------------------------
.text:00000522
.text:00000522 $LN49:                                  ; DATA XREF: __catch$_main$8+40o
.text:00000522                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000529                 lea     ecx, [ebp-18h]  ; this
.text:0000052C                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000531                 mov     eax, [ebp-0B8h]
.text:00000537                 jmp     loc_666
.text:0000053C ; ---------------------------------------------------------------------------
.text:0000053C
.text:0000053C loc_53C:                                ; CODE XREF: $LN55:loc_520j
.text:0000053C                 jmp     short loc_558
.text:0000053E ; ---------------------------------------------------------------------------
.text:0000053E
.text:0000053E $LN47:                                  ; DATA XREF: __catch$_main$7+41o
.text:0000053E                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000545                 lea     ecx, [ebp-18h]  ; this
.text:00000548                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:0000054D                 mov     eax, [ebp-0B4h]
.text:00000553                 jmp     loc_666
.text:00000558 ; ---------------------------------------------------------------------------
.text:00000558
.text:00000558 loc_558:                                ; CODE XREF: $LN55:loc_53Cj
.text:00000558                 jmp     short loc_574
.text:0000055A ; ---------------------------------------------------------------------------
.text:0000055A
.text:0000055A $LN45:                                  ; DATA XREF: __catch$_main$6+45o
.text:0000055A                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000561                 lea     ecx, [ebp-18h]  ; this
.text:00000564                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000569                 mov     eax, [ebp-0B0h]
.text:0000056F                 jmp     loc_666
.text:00000574 ; ---------------------------------------------------------------------------
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: $LN55:loc_558j
.text:00000574                 jmp     short loc_590
.text:00000576 ; ---------------------------------------------------------------------------
.text:00000576
.text:00000576 $LN43:                                  ; DATA XREF: __catch$_main$5+46o
.text:00000576                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000057D                 lea     ecx, [ebp-18h]  ; this
.text:00000580                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000585                 mov     eax, [ebp-0ACh]
.text:0000058B                 jmp     loc_666
.text:00000590 ; ---------------------------------------------------------------------------
.text:00000590
.text:00000590 loc_590:                                ; CODE XREF: $LN55:loc_574j
.text:00000590                 jmp     short loc_5AC
.text:00000592 ; ---------------------------------------------------------------------------
.text:00000592
.text:00000592 $LN41:                                  ; DATA XREF: __catch$_main$4+4Bo
.text:00000592                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000599                 lea     ecx, [ebp-18h]  ; this
.text:0000059C                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:000005A1                 mov     eax, [ebp-0A8h]
.text:000005A7                 jmp     loc_666
.text:000005AC ; ---------------------------------------------------------------------------
.text:000005AC
.text:000005AC loc_5AC:                                ; CODE XREF: $LN55:loc_590j
.text:000005AC                 jmp     short loc_5C8
.text:000005AE ; ---------------------------------------------------------------------------
.text:000005AE
.text:000005AE $LN39:                                  ; DATA XREF: __catch$_main$3+DAo
.text:000005AE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005B5                 lea     ecx, [ebp-18h]  ; this
.text:000005B8                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:000005BD                 mov     eax, [ebp-0A4h]
.text:000005C3                 jmp     loc_666
.text:000005C8 ; ---------------------------------------------------------------------------
.text:000005C8
.text:000005C8 loc_5C8:                                ; CODE XREF: $LN55:loc_5ACj
.text:000005C8                 jmp     short loc_5E4
.text:000005CA ; ---------------------------------------------------------------------------
.text:000005CA
.text:000005CA $LN37:                                  ; DATA XREF: __catch$_main$3+56o
.text:000005CA                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005D1                 lea     ecx, [ebp-18h]  ; this
.text:000005D4                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:000005D9                 mov     eax, [ebp-94h]
.text:000005DF                 jmp     loc_666
.text:000005E4 ; ---------------------------------------------------------------------------
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: $LN55:loc_5C8j
.text:000005E4                 jmp     short loc_5FD
.text:000005E6 ; ---------------------------------------------------------------------------
.text:000005E6
.text:000005E6 $LN35:                                  ; DATA XREF: __catch$_main$3+28o
.text:000005E6                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000005ED                 lea     ecx, [ebp-18h]  ; this
.text:000005F0                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:000005F5                 mov     eax, [ebp-90h]
.text:000005FB                 jmp     short loc_666
.text:000005FD ; ---------------------------------------------------------------------------
.text:000005FD
.text:000005FD loc_5FD:                                ; CODE XREF: $LN55:loc_5E4j
.text:000005FD                 jmp     short loc_616
.text:000005FF ; ---------------------------------------------------------------------------
.text:000005FF
.text:000005FF $LN33:                                  ; DATA XREF: __catch$_main$2+45o
.text:000005FF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000606                 lea     ecx, [ebp-18h]  ; this
.text:00000609                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:0000060E                 mov     eax, [ebp-8Ch]
.text:00000614                 jmp     short loc_666
.text:00000616 ; ---------------------------------------------------------------------------
.text:00000616
.text:00000616 loc_616:                                ; CODE XREF: $LN55:loc_5FDj
.text:00000616                 jmp     short loc_62F
.text:00000618 ; ---------------------------------------------------------------------------
.text:00000618
.text:00000618 $LN31:                                  ; DATA XREF: __catch$_main$1+1Do
.text:00000618                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000061F                 lea     ecx, [ebp-18h]  ; this
.text:00000622                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000627                 mov     eax, [ebp-88h]
.text:0000062D                 jmp     short loc_666
.text:0000062F ; ---------------------------------------------------------------------------
.text:0000062F
.text:0000062F loc_62F:                                ; CODE XREF: $LN55:loc_616j
.text:0000062F                 jmp     short loc_648
.text:00000631 ; ---------------------------------------------------------------------------
.text:00000631
.text:00000631 $LN29:                                  ; DATA XREF: __catch$_main$0+1Do
.text:00000631                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000638                 lea     ecx, [ebp-18h]  ; this
.text:0000063B                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000640                 mov     eax, [ebp-84h]
.text:00000646                 jmp     short loc_666
.text:00000648 ; ---------------------------------------------------------------------------
.text:00000648
.text:00000648 loc_648:                                ; CODE XREF: $LN55:loc_62Fj
.text:00000648                 mov     edx, [ebp-20h]
.text:0000064B                 mov     [ebp-0C4h], edx
.text:00000651                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000658                 lea     ecx, [ebp-18h]  ; this
.text:0000065B                 call    ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text:00000660                 mov     eax, [ebp-0C4h]
.text:00000666
.text:00000666 loc_666:                                ; CODE XREF: $LN55+15j
.text:00000666                                         ; $LN55+31j ...
.text:00000666                 push    edx
.text:00000667                 mov     ecx, ebp
.text:00000669                 push    eax
.text:0000066A                 lea     edx, $LN81
.text:00000670                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000675                 pop     eax
.text:00000676                 pop     edx
.text:00000677                 mov     ecx, [ebp-0Ch]
.text:0000067A                 mov     large fs:0, ecx
.text:00000681                 pop     ecx
.text:00000682                 pop     edi
.text:00000683                 pop     esi
.text:00000684                 pop     ebx
.text:00000685                 add     esp, 0D0h
.text:0000068B                 cmp     ebp, esp
.text:0000068D                 call    __RTC_CheckEsp
.text:00000692                 mov     esp, ebp
.text:00000694                 pop     ebp
.text:00000695                 retn
.text:00000695 $LN55           endp ; sp-analysis failed
.text:00000695
.text:00000695 ; ---------------------------------------------------------------------------
.text:00000696                 align 4
.text:00000698 $LN81           dd 9                    ; DATA XREF: $LN55+180o
.text:0000069C                 dd offset $LN80
.text:000006A0 $LN80           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:0000069Co
.text:000006A8                 dd offset $LN70         ; "ctrlHandlerSetter"
.text:000006AC                 dd 0FFFFFFD8h, 4
.text:000006B4                 dd offset $LN71         ; "e"
.text:000006B8                 db 0CCh
.text:000006B9                 db 3 dup(0FFh)
.text:000006BC                 dd 4
.text:000006C0                 dd offset $LN72         ; "systemError"
.text:000006C4                 dd 0FFFFFFC0h, 4
.text:000006CC                 dd offset $LN73         ; "exitCode"
.text:000006D0                 dd 0FFFFFFB4h, 4
.text:000006D8                 dd offset $LN74
.text:000006DC                 dd 0FFFFFFA8h, 4
.text:000006E4                 dd offset $LN75
.text:000006E8                 dd 0FFFFFF9Ch, 4
.text:000006F0                 dd offset $LN76
.text:000006F4                 db 90h
.text:000006F5                 db 3 dup(0FFh)
.text:000006F8                 dd 4
.text:000006FC                 dd offset $LN77
.text:00000700                 dd 0FFFFFF84h, 4
.text:00000708                 dd offset $LN78
.text:0000070C $LN78           db  74h ; t             ; DATA XREF: .text:00000708o
.text:0000070D                 align 2
.text:0000070E $LN77           dw 73h                  ; DATA XREF: .text:000006FCo
.text:00000710 $LN76           db  73h ; s             ; DATA XREF: .text:000006F0o
.text:00000711                 align 2
.text:00000712 $LN75           dw 73h                  ; DATA XREF: .text:000006E4o
.text:00000714 $LN74           db 73h, 0               ; DATA XREF: .text:000006D8o
.text:00000716 $LN73           db 'exitCode',0         ; DATA XREF: .text:000006CCo
.text:0000071F $LN72           db 'systemError',0      ; DATA XREF: .text:000006C0o
.text:0000072B $LN71           db 'e',0                ; DATA XREF: .text:000006B4o
.text:0000072D $LN70           db 'ctrlHandlerSetter',0 ; DATA XREF: .text:000006A8o
.text:0000073F                 align 10h
.text:00000740
.text:00000740 ; =============== S U B R O U T I N E =======================================
.text:00000740
.text:00000740 ; Attributes: bp-based frame
.text:00000740
.text:00000740 ; bool __stdcall IsItWindowsNT(void)
.text:00000740 ?IsItWindowsNT@@YG_NXZ proc near        ; CODE XREF: _main+55p
.text:00000740
.text:00000740 var_A4          = dword ptr -0A4h
.text:00000740 VersionInformation= _OSVERSIONINFOA ptr -9Ch
.text:00000740 var_4           = dword ptr -4
.text:00000740
.text:00000740                 push    ebp
.text:00000741                 mov     ebp, esp
.text:00000743                 sub     esp, 0A4h
.text:00000749                 push    esi
.text:0000074A                 push    edi
.text:0000074B                 lea     edi, [ebp+var_A4]
.text:00000751                 mov     ecx, 29h ; ')'
.text:00000756                 mov     eax, 0CCCCCCCCh
.text:0000075B                 rep stosd
.text:0000075D                 mov     eax, dword ptr ds:___security_cookie
.text:00000762                 xor     eax, ebp
.text:00000764                 mov     [ebp+var_4], eax
.text:00000767                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h ; 'ö'
.text:00000771                 mov     esi, esp
.text:00000773                 lea     eax, [ebp+VersionInformation]
.text:00000779                 push    eax             ; lpVersionInformation
.text:0000077A                 call    dword ptr ds:__imp__GetVersionExA@4 ; GetVersionExA(x)
.text:00000780                 cmp     esi, esp
.text:00000782                 call    __RTC_CheckEsp
.text:00000787                 test    eax, eax
.text:00000789                 jz      short loc_7A0
.text:0000078B                 cmp     [ebp+VersionInformation.dwPlatformId], 2
.text:00000792                 jnz     short loc_7A0
.text:00000794                 mov     [ebp+var_A4], 1
.text:0000079E                 jmp     short loc_7AA
.text:000007A0 ; ---------------------------------------------------------------------------
.text:000007A0
.text:000007A0 loc_7A0:                                ; CODE XREF: IsItWindowsNT(void)+49j
.text:000007A0                                         ; IsItWindowsNT(void)+52j
.text:000007A0                 mov     [ebp+var_A4], 0
.text:000007AA
.text:000007AA loc_7AA:                                ; CODE XREF: IsItWindowsNT(void)+5Ej
.text:000007AA                 mov     al, byte ptr [ebp+var_A4]
.text:000007B0                 push    edx
.text:000007B1                 mov     ecx, ebp
.text:000007B3                 push    eax
.text:000007B4                 lea     edx, $LN7
.text:000007BA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000007BF                 pop     eax
.text:000007C0                 pop     edx
.text:000007C1                 pop     edi
.text:000007C2                 pop     esi
.text:000007C3                 mov     ecx, [ebp+var_4]
.text:000007C6                 xor     ecx, ebp
.text:000007C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000007CD                 add     esp, 0A4h
.text:000007D3                 cmp     ebp, esp
.text:000007D5                 call    __RTC_CheckEsp
.text:000007DA                 mov     esp, ebp
.text:000007DC                 pop     ebp
.text:000007DD                 retn
.text:000007DD ?IsItWindowsNT@@YG_NXZ endp
.text:000007DD
.text:000007DD ; ---------------------------------------------------------------------------
.text:000007DE                 align 10h
.text:000007E0 $LN7            dd 1                    ; DATA XREF: IsItWindowsNT(void)+74o
.text:000007E4                 dd offset $LN6
.text:000007E8 $LN6            dd 0FFFFFF64h, 94h      ; DATA XREF: .text:000007E4o
.text:000007F0                 dd offset $LN5
.text:000007F4 $LN5            dd 0CC006976h, 2 dup(0CCCCCCCCh) ; DATA XREF: .text:000007F0o
.text:00000800
.text:00000800 ; =============== S U B R O U T I N E =======================================
.text:00000800
.text:00000800 ; Attributes: bp-based frame
.text:00000800
.text:00000800 ; void __stdcall FlushStreams(void)
.text:00000800 ?FlushStreams@@YGXXZ proc near          ; CODE XREF: __catch$_main$4p
.text:00000800                                         ; __catch$_main$9+9p ...
.text:00000800                 push    ebp
.text:00000801                 mov     ebp, esp
.text:00000803                 cmp     ds:?g_StdStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_StdStream
.text:0000080A                 jz      short loc_817
.text:0000080C                 mov     ecx, ds:?g_StdStream@@3PAVCStdOutStream@@A ; this
.text:00000812                 call    ?Flush@CStdOutStream@@QAE_NXZ ; CStdOutStream::Flush(void)
.text:00000817
.text:00000817 loc_817:                                ; CODE XREF: FlushStreams(void)+Aj
.text:00000817                 cmp     ebp, esp
.text:00000819                 call    __RTC_CheckEsp
.text:0000081E                 pop     ebp
.text:0000081F                 retn
.text:0000081F ?FlushStreams@@YGXXZ endp
.text:0000081F
.text:00000820
.text:00000820 ; =============== S U B R O U T I N E =======================================
.text:00000820
.text:00000820 ; Attributes: bp-based frame
.text:00000820
.text:00000820 ; int __stdcall PrintError(char *Str)
.text:00000820 ?PrintError@@YGXPBD@Z proc near         ; CODE XREF: __catch$_main$0+7p
.text:00000820                                         ; __catch$_main$1+7p ...
.text:00000820
.text:00000820 Str             = dword ptr  8
.text:00000820
.text:00000820                 push    ebp
.text:00000821                 mov     ebp, esp
.text:00000823                 call    ?FlushStreams@@YGXXZ ; FlushStreams(void)
.text:00000828                 cmp     ds:?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; CStdOutStream * g_ErrStream
.text:0000082F                 jz      short loc_858
.text:00000831                 push    offset ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl(CStdOutStream &)
.text:00000836                 mov     eax, [ebp+Str]
.text:00000839                 push    eax             ; Str
.text:0000083A                 push    offset $SG75872 ; Str
.text:0000083F                 mov     ecx, ds:?g_ErrStream@@3PAVCStdOutStream@@A ; CStdOutStream * g_ErrStream
.text:00000845                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:0000084A                 mov     ecx, eax
.text:0000084C                 call    ??6CStdOutStream@@QAEAAV0@PBD@Z ; CStdOutStream::operator<<(char const *)
.text:00000851                 mov     ecx, eax
.text:00000853                 call    ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<(CStdOutStream & (*)(CStdOutStream &))
.text:00000858
.text:00000858 loc_858:                                ; CODE XREF: PrintError(char const *)+Fj
.text:00000858                 cmp     ebp, esp
.text:0000085A                 call    __RTC_CheckEsp
.text:0000085F                 pop     ebp
.text:00000860                 retn    4
.text:00000860 ?PrintError@@YGXPBD@Z endp
.text:00000860
.text:00000860 ; ---------------------------------------------------------------------------
.text:00000863                 align 4
.text:00000863 _text           ends
.text:00000863
.text$x:00000864 ; ===========================================================================
.text$x:00000864
.text$x:00000864 ; Segment type: Pure code
.text$x:00000864 ; Segment permissions: Read/Execute
.text$x:00000864 _text$x         segment para public 'CODE' use32
.text$x:00000864                 assume cs:_text$x
.text$x:00000864                 ;org 864h
.text$x:00000864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000864
.text$x:00000864 ; =============== S U B R O U T I N E =======================================
.text$x:00000864
.text$x:00000864
.text$x:00000864 __unwindfunclet$_main$12 proc near      ; DATA XREF: .xdata$x:000008B0o
.text$x:00000864                 lea     ecx, [ebp-18h]  ; this
.text$x:00000867                 jmp     ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ ; NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(void)
.text$x:00000867 __unwindfunclet$_main$12 endp
.text$x:00000867
.text$x:0000086C
.text$x:0000086C ; =============== S U B R O U T I N E =======================================
.text$x:0000086C
.text$x:0000086C
.text$x:0000086C __unwindfunclet$_main$13 proc near      ; DATA XREF: .xdata$x:000008C8o
.text$x:0000086C                 lea     ecx, [ebp-0A0h] ; this
.text$x:00000872                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00000872 __unwindfunclet$_main$13 endp
.text$x:00000872
.text$x:00000877
.text$x:00000877 ; =============== S U B R O U T I N E =======================================
.text$x:00000877
.text$x:00000877
.text$x:00000877 __ehhandler$_main proc near             ; DATA XREF: _main+5o
.text$x:00000877
.text$x:00000877 arg_4           = dword ptr  8
.text$x:00000877
.text$x:00000877                 mov     edx, [esp+arg_4]
.text$x:0000087B                 lea     eax, [edx+0Ch]
.text$x:0000087E                 mov     ecx, [edx-0D4h]
.text$x:00000884                 xor     ecx, eax
.text$x:00000886                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000088B                 mov     eax, offset __ehfuncinfo$_main
.text$x:00000890                 jmp     ___CxxFrameHandler3
.text$x:00000890 __ehhandler$_main endp
.text$x:00000890
.text$x:00000890 ; ---------------------------------------------------------------------------
.text$x:00000895                 align 4
.text$x:00000895 _text$x         ends
.text$x:00000895
.xdata$x:00000898 ; ===========================================================================
.xdata$x:00000898
.xdata$x:00000898 ; Segment type: Pure data
.xdata$x:00000898 ; Segment permissions: Read
.xdata$x:00000898 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000898                 assume cs:_xdata$x
.xdata$x:00000898                 ;org 898h
.xdata$x:00000898 __tryblocktable$_main db    1           ; DATA XREF: .xdata$x:000008DCo
.xdata$x:00000899                 db    0
.xdata$x:0000089A                 db    0
.xdata$x:0000089B                 db    0
.xdata$x:0000089C                 db    1
.xdata$x:0000089D                 db    0
.xdata$x:0000089E                 db    0
.xdata$x:0000089F                 db    0
.xdata$x:000008A0                 db    3
.xdata$x:000008A1                 db    0
.xdata$x:000008A2                 db    0
.xdata$x:000008A3                 db    0
.xdata$x:000008A4                 db  0Bh
.xdata$x:000008A5                 db    0
.xdata$x:000008A6                 db    0
.xdata$x:000008A7                 db    0
.xdata$x:000008A8                 dd offset __catchsym$_main$14
.xdata$x:000008AC __unwindtable$_main db 0FFh             ; DATA XREF: .xdata$x:000008D4o
.xdata$x:000008AD                 db 0FFh
.xdata$x:000008AE                 db 0FFh
.xdata$x:000008AF                 db 0FFh
.xdata$x:000008B0                 dd offset __unwindfunclet$_main$12
.xdata$x:000008B4                 db    0
.xdata$x:000008B5                 db    0
.xdata$x:000008B6                 db    0
.xdata$x:000008B7                 db    0
.xdata$x:000008B8                 db    0
.xdata$x:000008B9                 db    0
.xdata$x:000008BA                 db    0
.xdata$x:000008BB                 db    0
.xdata$x:000008BC                 db    0
.xdata$x:000008BD                 db    0
.xdata$x:000008BE                 db    0
.xdata$x:000008BF                 db    0
.xdata$x:000008C0                 db    0
.xdata$x:000008C1                 db    0
.xdata$x:000008C2                 db    0
.xdata$x:000008C3                 db    0
.xdata$x:000008C4                 db    2
.xdata$x:000008C5                 db    0
.xdata$x:000008C6                 db    0
.xdata$x:000008C7                 db    0
.xdata$x:000008C8                 dd offset __unwindfunclet$_main$13
.xdata$x:000008CC __ehfuncinfo$_main db  22h ; "          ; DATA XREF: __ehhandler$_main+14o
.xdata$x:000008CD                 db    5
.xdata$x:000008CE                 db  93h ; ô
.xdata$x:000008CF                 db  19h
.xdata$x:000008D0                 db    4
.xdata$x:000008D1                 db    0
.xdata$x:000008D2                 db    0
.xdata$x:000008D3                 db    0
.xdata$x:000008D4                 dd offset __unwindtable$_main
.xdata$x:000008D8                 db    1
.xdata$x:000008D9                 db    0
.xdata$x:000008DA                 db    0
.xdata$x:000008DB                 db    0
.xdata$x:000008DC                 dd offset __tryblocktable$_main
.xdata$x:000008E0                 db    0
.xdata$x:000008E1                 db    0
.xdata$x:000008E2                 db    0
.xdata$x:000008E3                 db    0
.xdata$x:000008E4                 db    0
.xdata$x:000008E5                 db    0
.xdata$x:000008E6                 db    0
.xdata$x:000008E7                 db    0
.xdata$x:000008E8                 db    0
.xdata$x:000008E9                 db    0
.xdata$x:000008EA                 db    0
.xdata$x:000008EB                 db    0
.xdata$x:000008EC                 db    1
.xdata$x:000008ED                 db    0
.xdata$x:000008EE                 db    0
.xdata$x:000008EF                 db    0
.xdata$x:000008F0 __catchsym$_main$14 db    9             ; DATA XREF: .xdata$x:000008A8o
.xdata$x:000008F1                 db    0
.xdata$x:000008F2                 db    0
.xdata$x:000008F3                 db    0
.xdata$x:000008F4                 dd offset ??_R0?AVCNewException@@@8 ; CNewException `RTTI Type Descriptor'
.xdata$x:000008F8                 db    0
.xdata$x:000008F9                 db    0
.xdata$x:000008FA                 db    0
.xdata$x:000008FB                 db    0
.xdata$x:000008FC                 dd offset __catch$_main$0
.xdata$x:00000900                 db    9
.xdata$x:00000901                 db    0
.xdata$x:00000902                 db    0
.xdata$x:00000903                 db    0
.xdata$x:00000904                 dd offset ??_R0?AVCCtrlBreakException@NConsoleClose@@@8 ; NConsoleClose::CCtrlBreakException `RTTI Type Descriptor'
.xdata$x:00000908                 db    0
.xdata$x:00000909                 db    0
.xdata$x:0000090A                 db    0
.xdata$x:0000090B                 db    0
.xdata$x:0000090C                 dd offset __catch$_main$1
.xdata$x:00000910                 db    9
.xdata$x:00000911                 db    0
.xdata$x:00000912                 db    0
.xdata$x:00000913                 db    0
.xdata$x:00000914                 dd offset ??_R0?AUCArcCmdLineException@@@8 ; CArcCmdLineException `RTTI Type Descriptor'
.xdata$x:00000918                 db 0D8h ; +
.xdata$x:00000919                 db 0FFh
.xdata$x:0000091A                 db 0FFh
.xdata$x:0000091B                 db 0FFh
.xdata$x:0000091C                 dd offset __catch$_main$2
.xdata$x:00000920                 db    9
.xdata$x:00000921                 db    0
.xdata$x:00000922                 db    0
.xdata$x:00000923                 db    0
.xdata$x:00000924                 dd offset ??_R0?AUCSystemException@@@8 ; CSystemException `RTTI Type Descriptor'
.xdata$x:00000928                 db 0CCh ; ¦
.xdata$x:00000929                 db 0FFh
.xdata$x:0000092A                 db 0FFh
.xdata$x:0000092B                 db 0FFh
.xdata$x:0000092C                 dd offset __catch$_main$3
.xdata$x:00000930                 db    8
.xdata$x:00000931                 db    0
.xdata$x:00000932                 db    0
.xdata$x:00000933                 db    0
.xdata$x:00000934                 dd offset ??_R0?AW4EEnum@NExitCode@@@8 ; NExitCode::EEnum `RTTI Type Descriptor'
.xdata$x:00000938                 db 0C0h ; +
.xdata$x:00000939                 db 0FFh
.xdata$x:0000093A                 db 0FFh
.xdata$x:0000093B                 db 0FFh
.xdata$x:0000093C                 dd offset __catch$_main$4
.xdata$x:00000940                 db    9
.xdata$x:00000941                 db    0
.xdata$x:00000942                 db    0
.xdata$x:00000943                 db    0
.xdata$x:00000944                 dd offset ??_R0?AVUString@@@8 ; UString `RTTI Type Descriptor'
.xdata$x:00000948                 db 0B4h ; ¦
.xdata$x:00000949                 db 0FFh
.xdata$x:0000094A                 db 0FFh
.xdata$x:0000094B                 db 0FFh
.xdata$x:0000094C                 dd offset __catch$_main$5
.xdata$x:00000950                 db    9
.xdata$x:00000951                 db    0
.xdata$x:00000952                 db    0
.xdata$x:00000953                 db    0
.xdata$x:00000954                 dd offset ??_R0?AVAString@@@8 ; AString `RTTI Type Descriptor'
.xdata$x:00000958                 db 0A8h ; ¿
.xdata$x:00000959                 db 0FFh
.xdata$x:0000095A                 db 0FFh
.xdata$x:0000095B                 db 0FFh
.xdata$x:0000095C                 dd offset __catch$_main$6
.xdata$x:00000960                 db    1
.xdata$x:00000961                 db    0
.xdata$x:00000962                 db    0
.xdata$x:00000963                 db    0
.xdata$x:00000964                 dd offset ??_R0PAD@8    ; char * `RTTI Type Descriptor'
.xdata$x:00000968                 db  9Ch ; £
.xdata$x:00000969                 db 0FFh
.xdata$x:0000096A                 db 0FFh
.xdata$x:0000096B                 db 0FFh
.xdata$x:0000096C                 dd offset __catch$_main$7
.xdata$x:00000970                 db    1
.xdata$x:00000971                 db    0
.xdata$x:00000972                 db    0
.xdata$x:00000973                 db    0
.xdata$x:00000974                 dd offset ??_R0PA_W@8   ; wchar_t * `RTTI Type Descriptor'
.xdata$x:00000978                 db  90h ; É
.xdata$x:00000979                 db 0FFh
.xdata$x:0000097A                 db 0FFh
.xdata$x:0000097B                 db 0FFh
.xdata$x:0000097C                 dd offset __catch$_main$8
.xdata$x:00000980                 db    0
.xdata$x:00000981                 db    0
.xdata$x:00000982                 db    0
.xdata$x:00000983                 db    0
.xdata$x:00000984                 dd offset ??_R0H@8      ; int `RTTI Type Descriptor'
.xdata$x:00000988                 db  84h ; ä
.xdata$x:00000989                 db 0FFh
.xdata$x:0000098A                 db 0FFh
.xdata$x:0000098B                 db 0FFh
.xdata$x:0000098C                 dd offset __catch$_main$9
.xdata$x:00000990                 dd offset $SG75860+14h  ; "e required memory!"
.xdata$x:00000994                 db    0
.xdata$x:00000995                 db    0
.xdata$x:00000996                 db    0
.xdata$x:00000997                 db    0
.xdata$x:00000998                 db    0
.xdata$x:00000999                 db    0
.xdata$x:0000099A                 db    0
.xdata$x:0000099B                 db    0
.xdata$x:0000099C                 dd offset __catch$_main$10
.xdata$x:0000099C _xdata$x        ends
.xdata$x:0000099C
.rtc$TMZ:000009A0 ; ===========================================================================
.rtc$TMZ:000009A0
.rtc$TMZ:000009A0 ; Segment type: Pure data
.rtc$TMZ:000009A0 ; Segment permissions: Read
.rtc$TMZ:000009A0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000009A0                 assume cs:_rtc$TMZ
.rtc$TMZ:000009A0                 ;org 9A0h
.rtc$TMZ:000009A0 ; COMDAT (pick any)
.rtc$TMZ:000009A0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000009A0 _rtc$TMZ        ends
.rtc$TMZ:000009A0
.rtc$IMZ:000009A4 ; ===========================================================================
.rtc$IMZ:000009A4
.rtc$IMZ:000009A4 ; Segment type: Pure data
.rtc$IMZ:000009A4 ; Segment permissions: Read
.rtc$IMZ:000009A4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000009A4                 assume cs:_rtc$IMZ
.rtc$IMZ:000009A4                 ;org 9A4h
.rtc$IMZ:000009A4 ; COMDAT (pick any)
.rtc$IMZ:000009A4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000009A4 _rtc$IMZ        ends
.rtc$IMZ:000009A4
.data:000009A8 ; ===========================================================================
.data:000009A8
.data:000009A8 ; Segment type: Pure data
.data:000009A8 ; Segment permissions: Read/Write
.data:000009A8 _data           segment dword public 'DATA' use32
.data:000009A8                 assume cs:_data
.data:000009A8                 ;org 9A8h
.data:000009A8 ; COMDAT (pick any)
.data:000009A8                 public ??_R0?AVCNewException@@@8
.data:000009A8 ; class CNewException `RTTI Type Descriptor'
.data:000009A8 ??_R0?AVCNewException@@@8 dd offset ??_7type_info@@6B@
.data:000009A8                                         ; DATA XREF: .xdata$x:000008F4o
.data:000009A8                                         ; const type_info::`vftable'
.data:000009AC                 align 10h
.data:000009B0 a_?avcnewexcept db '.?AVCNewException@@',0
.data:000009B0 _data           ends
.data:000009B0
.data:000009C4 ; ===========================================================================
.data:000009C4
.data:000009C4 ; Segment type: Pure data
.data:000009C4 ; Segment permissions: Read/Write
.data:000009C4 _data           segment dword public 'DATA' use32
.data:000009C4                 assume cs:_data
.data:000009C4                 ;org 9C4h
.data:000009C4 ; COMDAT (pick any)
.data:000009C4                 public ??_R0?AVCCtrlBreakException@NConsoleClose@@@8
.data:000009C4 ; class NConsoleClose::CCtrlBreakException `RTTI Type Descriptor'
.data:000009C4 ??_R0?AVCCtrlBreakException@NConsoleClose@@@8 dd offset ??_7type_info@@6B@
.data:000009C4                                         ; DATA XREF: .xdata$x:00000904o
.data:000009C4                                         ; const type_info::`vftable'
.data:000009C8                 db    0
.data:000009C9                 db    0
.data:000009CA                 db    0
.data:000009CB                 db    0
.data:000009CC                 db  2Eh ; .
.data:000009CD                 db  3Fh ; ?
.data:000009CE                 db  41h ; A
.data:000009CF                 db  56h ; V
.data:000009D0                 db  43h ; C
.data:000009D1                 db  43h ; C
.data:000009D2                 db  74h ; t
.data:000009D3                 db  72h ; r
.data:000009D4                 db  6Ch ; l
.data:000009D5                 db  42h ; B
.data:000009D6                 db  72h ; r
.data:000009D7                 db  65h ; e
.data:000009D8                 db  61h ; a
.data:000009D9                 db  6Bh ; k
.data:000009DA                 db  45h ; E
.data:000009DB                 db  78h ; x
.data:000009DC                 db  63h ; c
.data:000009DD                 db  65h ; e
.data:000009DE                 db  70h ; p
.data:000009DF                 db  74h ; t
.data:000009E0                 db  69h ; i
.data:000009E1                 db  6Fh ; o
.data:000009E2                 db  6Eh ; n
.data:000009E3                 db  40h ; @
.data:000009E4                 db  4Eh ; N
.data:000009E5                 db  43h ; C
.data:000009E6                 db  6Fh ; o
.data:000009E7                 db  6Eh ; n
.data:000009E8                 db  73h ; s
.data:000009E9                 db  6Fh ; o
.data:000009EA                 db  6Ch ; l
.data:000009EB                 db  65h ; e
.data:000009EC                 db  43h ; C
.data:000009ED                 db  6Ch ; l
.data:000009EE                 db  6Fh ; o
.data:000009EF                 db  73h ; s
.data:000009F0                 db  65h ; e
.data:000009F1                 db  40h ; @
.data:000009F2                 db  40h ; @
.data:000009F3                 db    0
.data:000009F3 _data           ends
.data:000009F3
.data:000009F4 ; ===========================================================================
.data:000009F4
.data:000009F4 ; Segment type: Pure data
.data:000009F4 ; Segment permissions: Read/Write
.data:000009F4 _data           segment dword public 'DATA' use32
.data:000009F4                 assume cs:_data
.data:000009F4                 ;org 9F4h
.data:000009F4 ; COMDAT (pick any)
.data:000009F4                 public ??_R0?AUCArcCmdLineException@@@8
.data:000009F4 ; struct CArcCmdLineException `RTTI Type Descriptor'
.data:000009F4 ??_R0?AUCArcCmdLineException@@@8 dd offset ??_7type_info@@6B@
.data:000009F4                                         ; DATA XREF: .xdata$x:00000914o
.data:000009F4                                         ; const type_info::`vftable'
.data:000009F8                 db    0
.data:000009F9                 db    0
.data:000009FA                 db    0
.data:000009FB                 db    0
.data:000009FC                 db  2Eh ; .
.data:000009FD                 db  3Fh ; ?
.data:000009FE                 db  41h ; A
.data:000009FF                 db  55h ; U
.data:00000A00                 db  43h ; C
.data:00000A01                 db  41h ; A
.data:00000A02                 db  72h ; r
.data:00000A03                 db  63h ; c
.data:00000A04                 db  43h ; C
.data:00000A05                 db  6Dh ; m
.data:00000A06                 db  64h ; d
.data:00000A07                 db  4Ch ; L
.data:00000A08                 db  69h ; i
.data:00000A09                 db  6Eh ; n
.data:00000A0A aEexception@@   db 'eException@@',0     ; DATA XREF: .rdata:$SG75872o
.data:00000A17                 align 4
.data:00000A17 _data           ends
.data:00000A17
.data:00000A18 ; ===========================================================================
.data:00000A18
.data:00000A18 ; Segment type: Pure data
.data:00000A18 ; Segment permissions: Read/Write
.data:00000A18 _data           segment dword public 'DATA' use32
.data:00000A18                 assume cs:_data
.data:00000A18                 ;org 0A18h
.data:00000A18 ; COMDAT (pick any)
.data:00000A18                 public ??_R0?AUCSystemException@@@8
.data:00000A18 ; struct CSystemException `RTTI Type Descriptor'
.data:00000A18 ??_R0?AUCSystemException@@@8 dd offset ??_7type_info@@6B@
.data:00000A18                                         ; DATA XREF: .xdata$x:00000924o
.data:00000A18                                         ; const type_info::`vftable'
.data:00000A1C                 align 10h
.data:00000A20 a_?aucsystemexc db '.?AUCSystemException@@',0
.data:00000A37                 align 4
.data:00000A37 _data           ends
.data:00000A37
.data:00000A38 ; ===========================================================================
.data:00000A38
.data:00000A38 ; Segment type: Pure data
.data:00000A38 ; Segment permissions: Read/Write
.data:00000A38 _data           segment dword public 'DATA' use32
.data:00000A38                 assume cs:_data
.data:00000A38                 ;org 0A38h
.data:00000A38 ; COMDAT (pick any)
.data:00000A38                 public ??_R0?AW4EEnum@NExitCode@@@8
.data:00000A38 ; enum  NExitCode::EEnum `RTTI Type Descriptor'
.data:00000A38 ??_R0?AW4EEnum@NExitCode@@@8 dd offset ??_7type_info@@6B@
.data:00000A38                                         ; DATA XREF: .xdata$x:00000934o
.data:00000A38                                         ; const type_info::`vftable'
.data:00000A3C                 align 10h
.data:00000A40 a_?aw4eenum@nex db '.?AW4EEnum@NExitCode@@',0
.data:00000A57                 align 4
.data:00000A57 _data           ends
.data:00000A57
.data:00000A58 ; ===========================================================================
.data:00000A58
.data:00000A58 ; Segment type: Pure data
.data:00000A58 ; Segment permissions: Read/Write
.data:00000A58 _data           segment dword public 'DATA' use32
.data:00000A58                 assume cs:_data
.data:00000A58                 ;org 0A58h
.data:00000A58 ; COMDAT (pick any)
.data:00000A58                 public ??_R0?AVUString@@@8
.data:00000A58 ; class UString `RTTI Type Descriptor'
.data:00000A58 ??_R0?AVUString@@@8 dd offset ??_7type_info@@6B@
.data:00000A58                                         ; DATA XREF: .xdata$x:00000944o
.data:00000A58                                         ; const type_info::`vftable'
.data:00000A5C                 align 10h
.data:00000A60 a_?avustring@@  db '.?AVUString@@',0
.data:00000A6E                 align 10h
.data:00000A6E _data           ends
.data:00000A6E
.data:00000A70 ; ===========================================================================
.data:00000A70
.data:00000A70 ; Segment type: Pure data
.data:00000A70 ; Segment permissions: Read/Write
.data:00000A70 _data           segment dword public 'DATA' use32
.data:00000A70                 assume cs:_data
.data:00000A70                 ;org 0A70h
.data:00000A70 ; COMDAT (pick any)
.data:00000A70                 public ??_R0?AVAString@@@8
.data:00000A70 ; class AString `RTTI Type Descriptor'
.data:00000A70 ??_R0?AVAString@@@8 dd offset ??_7type_info@@6B@
.data:00000A70                                         ; DATA XREF: .xdata$x:00000954o
.data:00000A70                                         ; const type_info::`vftable'
.data:00000A74                 align 8
.data:00000A78 a_?avastring@@  db '.?AVAString@@',0
.data:00000A86                 align 4
.data:00000A86 _data           ends
.data:00000A86
.data:00000A88 ; ===========================================================================
.data:00000A88
.data:00000A88 ; Segment type: Pure data
.data:00000A88 ; Segment permissions: Read/Write
.data:00000A88 _data           segment dword public 'DATA' use32
.data:00000A88                 assume cs:_data
.data:00000A88                 ;org 0A88h
.data:00000A88 ; COMDAT (pick any)
.data:00000A88                 public ??_R0PAD@8
.data:00000A88 ; char * `RTTI Type Descriptor'
.data:00000A88 ??_R0PAD@8      dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000964o
.data:00000A88                                         ; const type_info::`vftable'
.data:00000A8C                 align 10h
.data:00000A90 a_pad           db '.PAD',0
.data:00000A95                 align 4
.data:00000A95 _data           ends
.data:00000A95
.data:00000A98 ; ===========================================================================
.data:00000A98
.data:00000A98 ; Segment type: Pure data
.data:00000A98 ; Segment permissions: Read/Write
.data:00000A98 _data           segment dword public 'DATA' use32
.data:00000A98                 assume cs:_data
.data:00000A98                 ;org 0A98h
.data:00000A98 ; COMDAT (pick any)
.data:00000A98                 public ??_R0PA_W@8
.data:00000A98 ; wchar_t * `RTTI Type Descriptor'
.data:00000A98 ??_R0PA_W@8     dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000974o
.data:00000A98                                         ; const type_info::`vftable'
.data:00000A9C                 align 10h
.data:00000AA0 a_pa_w          db '.PA_W',0
.data:00000AA6                 align 4
.data:00000AA6 _data           ends
.data:00000AA6
.data:00000AA8 ; ===========================================================================
.data:00000AA8
.data:00000AA8 ; Segment type: Pure data
.data:00000AA8 ; Segment permissions: Read/Write
.data:00000AA8 _data           segment dword public 'DATA' use32
.data:00000AA8                 assume cs:_data
.data:00000AA8                 ;org 0AA8h
.data:00000AA8 ; COMDAT (pick any)
.data:00000AA8                 public ??_R0H@8
.data:00000AA8 ; int `RTTI Type Descriptor'
.data:00000AA8 ??_R0H@8        dd offset ??_7type_info@@6B@ ; DATA XREF: .xdata$x:00000984o
.data:00000AA8                                         ; const type_info::`vftable'
.data:00000AAC                 align 10h
.data:00000AB0                 db  2Eh ; .
.data:00000AB1                 db  48h ; H
.data:00000AB2                 db    0
.data:00000AB3                 align 4
.data:00000AB3 _data           ends
.data:00000AB3
.text:00000AB4 ; ===========================================================================
.text:00000AB4
.text:00000AB4 ; Segment type: Pure code
.text:00000AB4 ; Segment permissions: Read/Execute
.text:00000AB4 _text           segment para public 'CODE' use32
.text:00000AB4                 assume cs:_text
.text:00000AB4                 ;org 0AB4h
.text:00000AB4 ; COMDAT (pick any)
.text:00000AB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000AB4
.text:00000AB4 ; =============== S U B R O U T I N E =======================================
.text:00000AB4
.text:00000AB4 ; Attributes: bp-based frame
.text:00000AB4
.text:00000AB4 ; public: __thiscall AString::operator char const *(void)const
.text:00000AB4                 public ??BAString@@QBEPBDXZ
.text:00000AB4 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: __catch$_main$6+1Cp
.text:00000AB4
.text:00000AB4 var_4           = dword ptr -4
.text:00000AB4
.text:00000AB4                 push    ebp
.text:00000AB5                 mov     ebp, esp
.text:00000AB7                 push    ecx
.text:00000AB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000ABF                 mov     [ebp+var_4], ecx
.text:00000AC2                 mov     eax, [ebp+var_4]
.text:00000AC5                 mov     eax, [eax]
.text:00000AC7                 mov     esp, ebp
.text:00000AC9                 pop     ebp
.text:00000ACA                 retn
.text:00000ACA ??BAString@@QBEPBDXZ endp
.text:00000ACA
.text:00000ACA ; ---------------------------------------------------------------------------
.text:00000ACB                 align 4
.text:00000ACB _text           ends
.text:00000ACB
.text:00000ACC ; ===========================================================================
.text:00000ACC
.text:00000ACC ; Segment type: Pure code
.text:00000ACC ; Segment permissions: Read/Execute
.text:00000ACC _text           segment para public 'CODE' use32
.text:00000ACC                 assume cs:_text
.text:00000ACC                 ;org 0ACCh
.text:00000ACC ; COMDAT (pick any)
.text:00000ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000ACC
.text:00000ACC ; =============== S U B R O U T I N E =======================================
.text:00000ACC
.text:00000ACC ; Attributes: bp-based frame
.text:00000ACC
.text:00000ACC ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00000ACC                 public ??1UString@@QAE@XZ
.text:00000ACC ??1UString@@QAE@XZ proc near            ; CODE XREF: __catch$_main$3+C4p
.text:00000ACC                                         ; __unwindfunclet$_main$13+6j
.text:00000ACC
.text:00000ACC var_8           = dword ptr -8
.text:00000ACC var_4           = dword ptr -4
.text:00000ACC
.text:00000ACC                 push    ebp
.text:00000ACD                 mov     ebp, esp
.text:00000ACF                 sub     esp, 8
.text:00000AD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000AD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000AE0                 mov     [ebp+var_4], ecx
.text:00000AE3                 mov     eax, [ebp+var_4]
.text:00000AE6                 mov     ecx, [eax]
.text:00000AE8                 mov     [ebp+var_8], ecx
.text:00000AEB                 mov     edx, [ebp+var_8]
.text:00000AEE                 push    edx             ; void *
.text:00000AEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000AF4                 add     esp, 4
.text:00000AF7                 add     esp, 8
.text:00000AFA                 cmp     ebp, esp
.text:00000AFC                 call    __RTC_CheckEsp
.text:00000B01                 mov     esp, ebp
.text:00000B03                 pop     ebp
.text:00000B04                 retn
.text:00000B04 ??1UString@@QAE@XZ endp
.text:00000B04
.text:00000B04 ; ---------------------------------------------------------------------------
.text:00000B05                 align 4
.text:00000B05 _text           ends
.text:00000B05
.text:00000B08 ; ===========================================================================
.text:00000B08
.text:00000B08 ; Segment type: Pure code
.text:00000B08 ; Segment permissions: Read/Execute
.text:00000B08 _text           segment para public 'CODE' use32
.text:00000B08                 assume cs:_text
.text:00000B08                 ;org 0B08h
.text:00000B08 ; COMDAT (pick any)
.text:00000B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B08
.text:00000B08 ; =============== S U B R O U T I N E =======================================
.text:00000B08
.text:00000B08 ; Attributes: bp-based frame
.text:00000B08
.text:00000B08 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00000B08                 public ??BUString@@QBEPB_WXZ
.text:00000B08 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: __catch$_main$2+1Cp
.text:00000B08                                         ; __catch$_main$3+A2p ...
.text:00000B08
.text:00000B08 var_4           = dword ptr -4
.text:00000B08
.text:00000B08                 push    ebp
.text:00000B09                 mov     ebp, esp
.text:00000B0B                 push    ecx
.text:00000B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B13                 mov     [ebp+var_4], ecx
.text:00000B16                 mov     eax, [ebp+var_4]
.text:00000B19                 mov     eax, [eax]
.text:00000B1B                 mov     esp, ebp
.text:00000B1D                 pop     ebp
.text:00000B1E                 retn
.text:00000B1E ??BUString@@QBEPB_WXZ endp
.text:00000B1E
.text:00000B1E ; ---------------------------------------------------------------------------
.text:00000B1F                 align 10h
.text:00000B1F _text           ends
.text:00000B1F
.text:00000B20 ; ===========================================================================
.text:00000B20
.text:00000B20 ; Segment type: Pure code
.text:00000B20 ; Segment permissions: Read/Execute
.text:00000B20 _text           segment para public 'CODE' use32
.text:00000B20                 assume cs:_text
.text:00000B20                 ;org 0B20h
.text:00000B20 ; COMDAT (pick any)
.text:00000B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B20
.text:00000B20 ; =============== S U B R O U T I N E =======================================
.text:00000B20
.text:00000B20 ; Attributes: bp-based frame
.text:00000B20
.text:00000B20 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(class CStdOutStream & (__stdcall *)(class CStdOutStream &))
.text:00000B20                 public ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
.text:00000B20 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z proc near
.text:00000B20                                         ; CODE XREF: __catch$_main$2+2Fp
.text:00000B20                                         ; __catch$_main$3+B5p ...
.text:00000B20
.text:00000B20 var_4           = dword ptr -4
.text:00000B20 arg_0           = dword ptr  8
.text:00000B20
.text:00000B20                 push    ebp
.text:00000B21                 mov     ebp, esp
.text:00000B23                 push    ecx
.text:00000B24                 push    esi
.text:00000B25                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B2C                 mov     [ebp+var_4], ecx
.text:00000B2F                 mov     esi, esp
.text:00000B31                 mov     eax, [ebp+var_4]
.text:00000B34                 push    eax
.text:00000B35                 call    [ebp+arg_0]
.text:00000B38                 cmp     esi, esp
.text:00000B3A                 call    __RTC_CheckEsp
.text:00000B3F                 mov     eax, [ebp+var_4]
.text:00000B42                 pop     esi
.text:00000B43                 add     esp, 4
.text:00000B46                 cmp     ebp, esp
.text:00000B48                 call    __RTC_CheckEsp
.text:00000B4D                 mov     esp, ebp
.text:00000B4F                 pop     ebp
.text:00000B50                 retn    4
.text:00000B50 ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z endp
.text:00000B50
.text:00000B50 ; ---------------------------------------------------------------------------
.text:00000B53                 align 4
.text:00000B53 _text           ends
.text:00000B53
.text:00000B54 ; ===========================================================================
.text:00000B54
.text:00000B54 ; Segment type: Pure code
.text:00000B54 ; Segment permissions: Read/Execute
.text:00000B54 _text           segment para public 'CODE' use32
.text:00000B54                 assume cs:_text
.text:00000B54                 ;org 0B54h
.text:00000B54 ; COMDAT (pick any)
.text:00000B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000B54
.text:00000B54 ; =============== S U B R O U T I N E =======================================
.text:00000B54
.text:00000B54 ; Attributes: bp-based frame
.text:00000B54
.text:00000B54 ; int __stdcall CStdOutStream::operator<<(char *Str)
.text:00000B54                 public ??6CStdOutStream@@QAEAAV0@PBD@Z
.text:00000B54 ??6CStdOutStream@@QAEAAV0@PBD@Z proc near ; CODE XREF: __catch$_main$4+26p
.text:00000B54                                         ; __catch$_main$6+28p ...
.text:00000B54
.text:00000B54 var_4           = dword ptr -4
.text:00000B54 Str             = dword ptr  8
.text:00000B54
.text:00000B54                 push    ebp
.text:00000B55                 mov     ebp, esp
.text:00000B57                 push    ecx
.text:00000B58                 push    esi
.text:00000B59                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B60                 mov     [ebp+var_4], ecx
.text:00000B63                 mov     esi, esp
.text:00000B65                 mov     eax, [ebp+var_4]
.text:00000B68                 mov     ecx, [eax]
.text:00000B6A                 push    ecx             ; File
.text:00000B6B                 mov     edx, [ebp+Str]
.text:00000B6E                 push    edx             ; Str
.text:00000B6F                 call    dword ptr ds:__imp__fputs
.text:00000B75                 add     esp, 8
.text:00000B78                 cmp     esi, esp
.text:00000B7A                 call    __RTC_CheckEsp
.text:00000B7F                 mov     eax, [ebp+var_4]
.text:00000B82                 pop     esi
.text:00000B83                 add     esp, 4
.text:00000B86                 cmp     ebp, esp
.text:00000B88                 call    __RTC_CheckEsp
.text:00000B8D                 mov     esp, ebp
.text:00000B8F                 pop     ebp
.text:00000B90                 retn    4
.text:00000B90 ??6CStdOutStream@@QAEAAV0@PBD@Z endp
.text:00000B90
.text:00000B90 _text           ends
.text:00000B90
UNDEF:00000BA0 ; ===========================================================================
UNDEF:00000BA0
UNDEF:00000BA0 ; Segment type: Externs
UNDEF:00000BA0 ; UNDEF
UNDEF:00000BA0 ; _DWORD __thiscall NConsoleClose::CCtrlHandlerSetter::~CCtrlHandlerSetter(NConsoleClose::CCtrlHandlerSetter *__hidden this)
UNDEF:00000BA0                 extrn ??1CCtrlHandlerSetter@NConsoleClose@@UAE@XZ:near
UNDEF:00000BA0                                         ; CODE XREF: $LN55+Ap
UNDEF:00000BA0                                         ; $LN55+26p ...
UNDEF:00000BA4 ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(int)
UNDEF:00000BA4                 extrn ??6CStdOutStream@@QAEAAV0@H@Z:near
UNDEF:00000BA4                                         ; CODE XREF: __catch$_main$4+2Dp
UNDEF:00000BA4                                         ; __catch$_main$9+2Ap
UNDEF:00000BA8 ; struct UString __stdcall __high NWindows::NError::MyFormatMessage(unsigned __int32)
UNDEF:00000BA8                 extrn ?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:near
UNDEF:00000BA8                                         ; CODE XREF: __catch$_main$3+7Cp
UNDEF:00000BAC ; public: class CStdOutStream & __thiscall CStdOutStream::operator<<(wchar_t const *)
UNDEF:00000BAC                 extrn ??6CStdOutStream@@QAEAAV0@PB_W@Z:near
UNDEF:00000BAC                                         ; CODE XREF: __catch$_main$2+28p
UNDEF:00000BAC                                         ; __catch$_main$3+AEp ...
UNDEF:00000BB0 ; class CStdOutStream & __stdcall endl(class CStdOutStream &)
UNDEF:00000BB0                 extrn ?endl@@YGAAVCStdOutStream@@AAV1@@Z:near
UNDEF:00000BB0                                         ; DATA XREF: __catch$_main$2+14o
UNDEF:00000BB0                                         ; __catch$_main$3+97o ...
UNDEF:00000BB4 ; int __stdcall Main2()
UNDEF:00000BB4                 extrn ?Main2@@YGHXZ:near ; CODE XREF: _main+79p
UNDEF:00000BB8 ; _DWORD __thiscall NConsoleClose::CCtrlHandlerSetter::CCtrlHandlerSetter(NConsoleClose::CCtrlHandlerSetter *__hidden this)
UNDEF:00000BB8                 extrn ??0CCtrlHandlerSetter@NConsoleClose@@QAE@XZ:near
UNDEF:00000BB8                                         ; CODE XREF: _main+62p
UNDEF:00000BBC ; class CStdOutStream g_StdOut
UNDEF:00000BBC                 extrn ?g_StdOut@@3VCStdOutStream@@A:near
UNDEF:00000BBC                                         ; DATA XREF: _main+4Bo
UNDEF:00000BC0 ; class CStdOutStream g_StdErr
UNDEF:00000BC0                 extrn ?g_StdErr@@3VCStdOutStream@@A:near
UNDEF:00000BC0                                         ; DATA XREF: _main+41o
UNDEF:00000BC4                 extrn ___security_cookie:near ; DATA XREF: _main+2Dr
UNDEF:00000BC4                                         ; IsItWindowsNT(void)+1Dr
UNDEF:00000BC8                 extrn ___CxxFrameHandler3:near
UNDEF:00000BC8                                         ; CODE XREF: __ehhandler$_main+19j
UNDEF:00000BCC ; __fastcall __security_check_cookie(x)
UNDEF:00000BCC                 extrn @__security_check_cookie@4:near
UNDEF:00000BCC                                         ; CODE XREF: IsItWindowsNT(void)+88p
UNDEF:00000BCC                                         ; __ehhandler$_main+Fp
UNDEF:00000BD0                 extrn __RTC_CheckEsp:near ; CODE XREF: $LN55+1A3p
UNDEF:00000BD0                                         ; IsItWindowsNT(void)+42p ...
UNDEF:00000BD4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000BD4                 extrn @_RTC_CheckStackVars@8:near ; CODE XREF: $LN55+186p
UNDEF:00000BD4                                         ; IsItWindowsNT(void)+7Ap
UNDEF:00000BD8                 extrn __RTC_Shutdown:near
UNDEF:00000BD8                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000BDC                 extrn __RTC_InitBase:near
UNDEF:00000BDC                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000BE0 ; const type_info::`vftable'
UNDEF:00000BE0                 extrn ??_7type_info@@6B@:near
UNDEF:00000BE0                                         ; DATA XREF: .data:CNewException `RTTI Type Descriptor'o
UNDEF:00000BE0                                         ; .data:NConsoleClose::CCtrlBreakException `RTTI Type Descriptor'o ...
UNDEF:00000BE4 ; void __cdecl operator delete(void *)
UNDEF:00000BE4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: UString::~UString(void)+23p
UNDEF:00000BE8 ; int __cdecl _fputs(const char *Str, FILE *File)
UNDEF:00000BE8                 extrn __imp__fputs:near ; CODE XREF: CStdOutStream::operator<<(char const *)+1Bp
UNDEF:00000BE8                                         ; DATA XREF: CStdOutStream::operator<<(char const *)+1Br
UNDEF:00000BEC ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
UNDEF:00000BEC                 extrn __imp__GetVersionExA@4:near
UNDEF:00000BEC                                         ; CODE XREF: IsItWindowsNT(void)+3Ap
UNDEF:00000BEC                                         ; DATA XREF: IsItWindowsNT(void)+3Ar
UNDEF:00000BF0 ; bool __thiscall CStdOutStream::Flush(CStdOutStream *__hidden this)
UNDEF:00000BF0                 extrn ?Flush@CStdOutStream@@QAE_NXZ:near
UNDEF:00000BF0                                         ; CODE XREF: FlushStreams(void)+12p
UNDEF:00000BF0
UNDEF:00000BF0
UNDEF:00000BF0                 end