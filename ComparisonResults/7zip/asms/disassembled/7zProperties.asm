.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 744E55D8E5D4E07FA48CBFE09A0BCC7E
.rdata:00000000 ; Input CRC32 : 5BCB6329
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\7zProperties.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kPropMap       db  11h                 ; DATA XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+78o
.rdata:00000001                 db    0
.rdata:00000002                 db    0
.rdata:00000003                 db    0
.rdata:00000004                 db    0
.rdata:00000005                 db    0
.rdata:00000006                 db    0
.rdata:00000007                 db    0
.rdata:00000008                 db    3
.rdata:00000009                 db    0
.rdata:0000000A                 db    0
.rdata:0000000B                 db    0
.rdata:0000000C                 db    8
.rdata:0000000D                 db    0
.rdata:0000000E                 db    0
.rdata:0000000F                 db    0
.rdata:00000010                 db    9
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    0
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 db    7
.rdata:00000019                 db    0
.rdata:0000001A                 db    0
.rdata:0000001B                 db    0
.rdata:0000001C                 db  15h
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    6
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    0
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    8
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C                 db  15h
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030                 db  12h
.rdata:00000031                 db    0
.rdata:00000032                 db    0
.rdata:00000033                 db    0
.rdata:00000034                 db    0
.rdata:00000035                 db    0
.rdata:00000036                 db    0
.rdata:00000037                 db    0
.rdata:00000038                 db  0Ah
.rdata:00000039                 db    0
.rdata:0000003A                 db    0
.rdata:0000003B                 db    0
.rdata:0000003C                 db  40h ; @
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040                 db  14h
.rdata:00000041                 db    0
.rdata:00000042                 db    0
.rdata:00000043                 db    0
.rdata:00000044                 db    0
.rdata:00000045                 db    0
.rdata:00000046                 db    0
.rdata:00000047                 db    0
.rdata:00000048                 db  0Ch
.rdata:00000049                 db    0
.rdata:0000004A                 db    0
.rdata:0000004B                 db    0
.rdata:0000004C                 db  40h ; @
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:00000050                 db  13h
.rdata:00000051                 db    0
.rdata:00000052                 db    0
.rdata:00000053                 db    0
.rdata:00000054                 db    0
.rdata:00000055                 db    0
.rdata:00000056                 db    0
.rdata:00000057                 db    0
.rdata:00000058                 db  0Bh
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C                 db  40h ; @
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060                 db  15h
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 db    0
.rdata:00000065                 db    0
.rdata:00000066                 db    0
.rdata:00000067                 db    0
.rdata:00000068                 db    9
.rdata:00000069                 db    0
.rdata:0000006A                 db    0
.rdata:0000006B                 db    0
.rdata:0000006C                 db  13h
.rdata:0000006D                 db    0
.rdata:0000006E                 db    0
.rdata:0000006F                 db    0
.rdata:00000070                 db  18h
.rdata:00000071                 db    0
.rdata:00000072                 db    0
.rdata:00000073                 db    0
.rdata:00000074                 db    0
.rdata:00000075                 db    0
.rdata:00000076                 db    0
.rdata:00000077                 db    0
.rdata:00000078                 db  1Dh
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 db  15h
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080                 db  0Ah
.rdata:00000081                 db    0
.rdata:00000082                 db    0
.rdata:00000083                 db    0
.rdata:00000084                 db    0
.rdata:00000085                 db    0
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088                 db  13h
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 db  13h
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090                 db  10h
.rdata:00000091                 db    0
.rdata:00000092                 db    0
.rdata:00000093                 db    0
.rdata:00000094                 db    0
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db  15h
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db  0Bh
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 db  61h ; a
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 db    0
.rdata:000000A5                 db    0
.rdata:000000A6                 db    0
.rdata:000000A7                 db    0
.rdata:000000A8                 db  0Fh
.rdata:000000A9                 db    0
.rdata:000000AA                 db    0
.rdata:000000AB                 db    0
.rdata:000000AC                 db  0Bh
.rdata:000000AD                 db    0
.rdata:000000AE                 db    0
.rdata:000000AF                 db    0
.rdata:000000B0                 db  62h ; b
.rdata:000000B1                 db    0
.rdata:000000B2                 db    0
.rdata:000000B3                 db    0
.rdata:000000B4                 db    0
.rdata:000000B5                 db    0
.rdata:000000B6                 db    0
.rdata:000000B7                 db    0
.rdata:000000B8                 db  16h
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 db    8
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000C0                 db  63h ; c
.rdata:000000C1                 db    0
.rdata:000000C2                 db    0
.rdata:000000C3                 db    0
.rdata:000000C4                 db    0
.rdata:000000C5                 db    0
.rdata:000000C6                 db    0
.rdata:000000C7                 db    0
.rdata:000000C8                 db  1Bh
.rdata:000000C9                 db    0
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 db  13h
.rdata:000000CD                 db    0
.rdata:000000CE                 db    0
.rdata:000000CF                 db    0
.rdata:000000CF _rdata          ends
.rdata:000000CF
.text:000000D0 ; ===========================================================================
.text:000000D0
.text:000000D0 ; Segment type: Pure code
.text:000000D0 ; Segment permissions: Read/Execute
.text:000000D0 _text           segment para public 'CODE' use32
.text:000000D0                 assume cs:_text
.text:000000D0                 ;org 0D0h
.text:000000D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000D0
.text:000000D0 ; =============== S U B R O U T I N E =======================================
.text:000000D0
.text:000000D0 ; Attributes: bp-based frame
.text:000000D0
.text:000000D0 ; void __thiscall NArchive::N7z::CHandler::FillPopIDs(NArchive::N7z::CHandler *__hidden this)
.text:000000D0                 public ?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
.text:000000D0 ?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ proc near
.text:000000D0
.text:000000D0 var_24          = dword ptr -24h
.text:000000D0 var_20          = dword ptr -20h
.text:000000D0 var_1C          = dword ptr -1Ch
.text:000000D0 var_18          = dword ptr -18h
.text:000000D0 var_14          = dword ptr -14h
.text:000000D0 var_10          = dword ptr -10h
.text:000000D0 var_C           = dword ptr -0Ch
.text:000000D0 var_4           = dword ptr -4
.text:000000D0
.text:000000D0                 push    ebp
.text:000000D1                 mov     ebp, esp
.text:000000D3                 push    0FFFFFFFFh
.text:000000D5                 push    offset __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
.text:000000DA                 mov     eax, large fs:0
.text:000000E0                 push    eax
.text:000000E1                 sub     esp, 18h
.text:000000E4                 mov     eax, 0CCCCCCCCh
.text:000000E9                 mov     [ebp+var_24], eax
.text:000000EC                 mov     [ebp+var_20], eax
.text:000000EF                 mov     [ebp+var_1C], eax
.text:000000F2                 mov     [ebp+var_18], eax
.text:000000F5                 mov     [ebp+var_14], eax
.text:000000F8                 mov     [ebp+var_10], eax
.text:000000FB                 mov     eax, dword ptr ds:___security_cookie
.text:00000100                 xor     eax, ebp
.text:00000102                 push    eax
.text:00000103                 lea     eax, [ebp+var_C]
.text:00000106                 mov     large fs:0, eax
.text:0000010C                 mov     [ebp+var_10], ecx
.text:0000010F                 mov     ecx, [ebp+var_10]
.text:00000112                 add     ecx, 1E4h
.text:00000118                 call    ?Clear@?$CRecordVector@_K@@QAEXXZ ; CRecordVector<unsigned __int64>::Clear(void)
.text:0000011D                 mov     eax, [ebp+var_10]
.text:00000120                 add     eax, 198h
.text:00000125                 push    eax
.text:00000126                 lea     ecx, [ebp+var_20]
.text:00000129                 call    ??0?$CRecordVector@_K@@QAE@ABV0@@Z ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(CRecordVector<unsigned __int64> const &)
.text:0000012E                 mov     [ebp+var_4], 0
.text:00000135                 push    0Eh
.text:00000137                 lea     ecx, [ebp+var_20]
.text:0000013A                 push    ecx
.text:0000013B                 call    ?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)
.text:00000140                 push    0Fh
.text:00000142                 lea     edx, [ebp+var_20]
.text:00000145                 push    edx
.text:00000146                 call    ?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)
.text:0000014B                 push    11h
.text:0000014D                 mov     eax, [ebp+var_10]
.text:00000150                 add     eax, 1E4h
.text:00000155                 push    eax
.text:00000156                 lea     ecx, [ebp+var_20]
.text:00000159                 push    ecx
.text:0000015A                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:0000015F                 push    10h
.text:00000161                 mov     edx, [ebp+var_10]
.text:00000164                 add     edx, 1E4h
.text:0000016A                 push    edx
.text:0000016B                 lea     eax, [ebp+var_20]
.text:0000016E                 push    eax
.text:0000016F                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:00000174                 push    9
.text:00000176                 mov     ecx, [ebp+var_10]
.text:00000179                 add     ecx, 1E4h
.text:0000017F                 push    ecx
.text:00000180                 lea     edx, [ebp+var_20]
.text:00000183                 push    edx
.text:00000184                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:00000189                 push    6
.text:0000018B                 mov     eax, [ebp+var_10]
.text:0000018E                 add     eax, 1E4h
.text:00000193                 push    eax
.text:00000194                 lea     ecx, [ebp+var_20]
.text:00000197                 push    ecx
.text:00000198                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:0000019D                 push    12h
.text:0000019F                 mov     edx, [ebp+var_10]
.text:000001A2                 add     edx, 1E4h
.text:000001A8                 push    edx
.text:000001A9                 lea     eax, [ebp+var_20]
.text:000001AC                 push    eax
.text:000001AD                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:000001B2                 push    14h
.text:000001B4                 mov     ecx, [ebp+var_10]
.text:000001B7                 add     ecx, 1E4h
.text:000001BD                 push    ecx
.text:000001BE                 lea     edx, [ebp+var_20]
.text:000001C1                 push    edx
.text:000001C2                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:000001C7                 push    13h
.text:000001C9                 mov     eax, [ebp+var_10]
.text:000001CC                 add     eax, 1E4h
.text:000001D1                 push    eax
.text:000001D2                 lea     ecx, [ebp+var_20]
.text:000001D5                 push    ecx
.text:000001D6                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:000001DB                 push    15h
.text:000001DD                 mov     edx, [ebp+var_10]
.text:000001E0                 add     edx, 1E4h
.text:000001E6                 push    edx
.text:000001E7                 lea     eax, [ebp+var_20]
.text:000001EA                 push    eax
.text:000001EB                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:000001F0                 push    0Ah
.text:000001F2                 mov     ecx, [ebp+var_10]
.text:000001F5                 add     ecx, 1E4h
.text:000001FB                 push    ecx
.text:000001FC                 lea     edx, [ebp+var_20]
.text:000001FF                 push    edx
.text:00000200                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:00000205                 push    16h
.text:00000207                 mov     eax, [ebp+var_10]
.text:0000020A                 add     eax, 1E4h
.text:0000020F                 push    eax
.text:00000210                 lea     ecx, [ebp+var_20]
.text:00000213                 push    ecx
.text:00000214                 call    ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)
.text:00000219                 lea     edx, [ebp+var_20]
.text:0000021C                 push    edx
.text:0000021D                 mov     ecx, [ebp+var_10]
.text:00000220                 add     ecx, 1E4h
.text:00000226                 call    ??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z ; CRecordVector<unsigned __int64>::operator+=(CRecordVector<unsigned __int64> const &)
.text:0000022B                 push    0
.text:0000022D                 push    61h ; 'a'
.text:0000022F                 mov     ecx, [ebp+var_10]
.text:00000232                 add     ecx, 1E4h
.text:00000238                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000023D                 push    0
.text:0000023F                 push    62h ; 'b'
.text:00000241                 mov     ecx, [ebp+var_10]
.text:00000244                 add     ecx, 1E4h
.text:0000024A                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:0000024F                 push    0
.text:00000251                 push    63h ; 'c'
.text:00000253                 mov     ecx, [ebp+var_10]
.text:00000256                 add     ecx, 1E4h
.text:0000025C                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00000261                 push    14h
.text:00000263                 mov     eax, [ebp+var_10]
.text:00000266                 add     eax, 1E4h
.text:0000026B                 push    eax
.text:0000026C                 call    ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)
.text:00000271                 push    6
.text:00000273                 mov     ecx, [ebp+var_10]
.text:00000276                 add     ecx, 1E4h
.text:0000027C                 push    ecx
.text:0000027D                 call    ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)
.text:00000282                 push    9
.text:00000284                 mov     edx, [ebp+var_10]
.text:00000287                 add     edx, 1E4h
.text:0000028D                 push    edx
.text:0000028E                 call    ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)
.text:00000293                 push    11h
.text:00000295                 mov     eax, [ebp+var_10]
.text:00000298                 add     eax, 1E4h
.text:0000029D                 push    eax
.text:0000029E                 call    ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)
.text:000002A3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002AA                 lea     ecx, [ebp+var_20]
.text:000002AD                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000002B2                 push    edx
.text:000002B3                 mov     ecx, ebp
.text:000002B5                 push    eax
.text:000002B6                 lea     edx, $LN7
.text:000002BC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002C1                 pop     eax
.text:000002C2                 pop     edx
.text:000002C3                 mov     ecx, [ebp+var_C]
.text:000002C6                 mov     large fs:0, ecx
.text:000002CD                 pop     ecx
.text:000002CE                 add     esp, 24h
.text:000002D1                 cmp     ebp, esp
.text:000002D3                 call    __RTC_CheckEsp
.text:000002D8                 mov     esp, ebp
.text:000002DA                 pop     ebp
.text:000002DB                 retn
.text:000002DB ?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ endp
.text:000002DB
.text:000002DB ; ---------------------------------------------------------------------------
.text:000002DC $LN7            dd 1                    ; DATA XREF: NArchive::N7z::CHandler::FillPopIDs(void)+1E6o
.text:000002E0                 dd offset $LN6
.text:000002E4 $LN6            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000002E0o
.text:000002EC                 dd offset $LN4          ; "fileInfoPopIDs"
.text:000002F0 $LN4            db 'fileInfoPopIDs',0   ; DATA XREF: .text:000002ECo
.text:000002FF                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; void __stdcall NArchive::N7z::CopyOneItem(class CRecordVector<unsigned __int64> &, class CRecordVector<unsigned __int64> &, unsigned int)
.text:00000300 ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z proc near
.text:00000300                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+8Ap
.text:00000300                                         ; NArchive::N7z::CHandler::FillPopIDs(void)+9Fp ...
.text:00000300
.text:00000300 var_10          = dword ptr -10h
.text:00000300 var_C           = dword ptr -0Ch
.text:00000300 var_8           = dword ptr -8
.text:00000300 var_4           = dword ptr -4
.text:00000300 arg_0           = dword ptr  8
.text:00000300 arg_4           = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 sub     esp, 10h
.text:00000306                 mov     eax, 0CCCCCCCCh
.text:0000030B                 mov     [ebp+var_10], eax
.text:0000030E                 mov     [ebp+var_C], eax
.text:00000311                 mov     [ebp+var_8], eax
.text:00000314                 mov     [ebp+var_4], eax
.text:00000317                 mov     [ebp+var_4], 0
.text:0000031E                 jmp     short loc_329
.text:00000320 ; ---------------------------------------------------------------------------
.text:00000320
.text:00000320 loc_320:                                ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint):loc_382j
.text:00000320                 mov     eax, [ebp+var_4]
.text:00000323                 add     eax, 1
.text:00000326                 mov     [ebp+var_4], eax
.text:00000329
.text:00000329 loc_329:                                ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+1Ej
.text:00000329                 mov     ecx, [ebp+arg_0]
.text:0000032C                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00000331                 cmp     [ebp+var_4], eax
.text:00000334                 jnb     short loc_384
.text:00000336                 mov     ecx, [ebp+var_4]
.text:00000339                 push    ecx
.text:0000033A                 mov     ecx, [ebp+arg_0]
.text:0000033D                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000342                 mov     edx, [ebp+arg_8]
.text:00000345                 xor     ecx, ecx
.text:00000347                 mov     [ebp+var_8], eax
.text:0000034A                 mov     [ebp+var_10], edx
.text:0000034D                 mov     [ebp+var_C], ecx
.text:00000350                 mov     edx, [ebp+var_8]
.text:00000353                 mov     eax, [edx]
.text:00000355                 cmp     eax, [ebp+var_10]
.text:00000358                 jnz     short loc_382
.text:0000035A                 mov     ecx, [ebp+var_8]
.text:0000035D                 mov     edx, [ecx+4]
.text:00000360                 cmp     edx, [ebp+var_C]
.text:00000363                 jnz     short loc_382
.text:00000365                 mov     eax, [ebp+arg_8]
.text:00000368                 xor     ecx, ecx
.text:0000036A                 push    ecx
.text:0000036B                 push    eax
.text:0000036C                 mov     ecx, [ebp+arg_4]
.text:0000036F                 call    ?Add@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00000374                 mov     edx, [ebp+var_4]
.text:00000377                 push    edx
.text:00000378                 mov     ecx, [ebp+arg_0]
.text:0000037B                 call    ?Delete@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::Delete(uint)
.text:00000380                 jmp     short loc_384
.text:00000382 ; ---------------------------------------------------------------------------
.text:00000382
.text:00000382 loc_382:                                ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+58j
.text:00000382                                         ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+63j
.text:00000382                 jmp     short loc_320
.text:00000384 ; ---------------------------------------------------------------------------
.text:00000384
.text:00000384 loc_384:                                ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+34j
.text:00000384                                         ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+80j
.text:00000384                 add     esp, 10h
.text:00000387                 cmp     ebp, esp
.text:00000389                 call    __RTC_CheckEsp
.text:0000038E                 mov     esp, ebp
.text:00000390                 pop     ebp
.text:00000391                 retn    0Ch
.text:00000391 ?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z endp
.text:00000391
.text:00000391 ; ---------------------------------------------------------------------------
.text:00000394                 align 10h
.text:000003A0
.text:000003A0 ; =============== S U B R O U T I N E =======================================
.text:000003A0
.text:000003A0 ; Attributes: bp-based frame
.text:000003A0
.text:000003A0 ; void __stdcall NArchive::N7z::RemoveOneItem(class CRecordVector<unsigned __int64> &, unsigned int)
.text:000003A0 ?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z proc near
.text:000003A0                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+6Bp
.text:000003A0                                         ; NArchive::N7z::CHandler::FillPopIDs(void)+76p
.text:000003A0
.text:000003A0 var_10          = dword ptr -10h
.text:000003A0 var_C           = dword ptr -0Ch
.text:000003A0 var_8           = dword ptr -8
.text:000003A0 var_4           = dword ptr -4
.text:000003A0 arg_0           = dword ptr  8
.text:000003A0 arg_4           = dword ptr  0Ch
.text:000003A0
.text:000003A0                 push    ebp
.text:000003A1                 mov     ebp, esp
.text:000003A3                 sub     esp, 10h
.text:000003A6                 mov     eax, 0CCCCCCCCh
.text:000003AB                 mov     [ebp+var_10], eax
.text:000003AE                 mov     [ebp+var_C], eax
.text:000003B1                 mov     [ebp+var_8], eax
.text:000003B4                 mov     [ebp+var_4], eax
.text:000003B7                 mov     [ebp+var_4], 0
.text:000003BE                 jmp     short loc_3C9
.text:000003C0 ; ---------------------------------------------------------------------------
.text:000003C0
.text:000003C0 loc_3C0:                                ; CODE XREF: NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint):loc_413j
.text:000003C0                 mov     eax, [ebp+var_4]
.text:000003C3                 add     eax, 1
.text:000003C6                 mov     [ebp+var_4], eax
.text:000003C9
.text:000003C9 loc_3C9:                                ; CODE XREF: NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+1Ej
.text:000003C9                 mov     ecx, [ebp+arg_0]
.text:000003CC                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000003D1                 cmp     [ebp+var_4], eax
.text:000003D4                 jnb     short loc_415
.text:000003D6                 mov     ecx, [ebp+var_4]
.text:000003D9                 push    ecx
.text:000003DA                 mov     ecx, [ebp+arg_0]
.text:000003DD                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:000003E2                 mov     edx, [ebp+arg_4]
.text:000003E5                 xor     ecx, ecx
.text:000003E7                 mov     [ebp+var_8], eax
.text:000003EA                 mov     [ebp+var_10], edx
.text:000003ED                 mov     [ebp+var_C], ecx
.text:000003F0                 mov     edx, [ebp+var_8]
.text:000003F3                 mov     eax, [edx]
.text:000003F5                 cmp     eax, [ebp+var_10]
.text:000003F8                 jnz     short loc_413
.text:000003FA                 mov     ecx, [ebp+var_8]
.text:000003FD                 mov     edx, [ecx+4]
.text:00000400                 cmp     edx, [ebp+var_C]
.text:00000403                 jnz     short loc_413
.text:00000405                 mov     eax, [ebp+var_4]
.text:00000408                 push    eax
.text:00000409                 mov     ecx, [ebp+arg_0]
.text:0000040C                 call    ?Delete@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::Delete(uint)
.text:00000411                 jmp     short loc_415
.text:00000413 ; ---------------------------------------------------------------------------
.text:00000413
.text:00000413 loc_413:                                ; CODE XREF: NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+58j
.text:00000413                                         ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+63j
.text:00000413                 jmp     short loc_3C0
.text:00000415 ; ---------------------------------------------------------------------------
.text:00000415
.text:00000415 loc_415:                                ; CODE XREF: NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+34j
.text:00000415                                         ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+71j
.text:00000415                 add     esp, 10h
.text:00000418                 cmp     ebp, esp
.text:0000041A                 call    __RTC_CheckEsp
.text:0000041F                 mov     esp, ebp
.text:00000421                 pop     ebp
.text:00000422                 retn    8
.text:00000422 ?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z endp
.text:00000422
.text:00000422 ; ---------------------------------------------------------------------------
.text:00000425                 align 10h
.text:00000430
.text:00000430 ; =============== S U B R O U T I N E =======================================
.text:00000430
.text:00000430 ; Attributes: bp-based frame
.text:00000430
.text:00000430 ; void __stdcall NArchive::N7z::InsertToHead(class CRecordVector<unsigned __int64> &, unsigned int)
.text:00000430 ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z proc near
.text:00000430                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+19Cp
.text:00000430                                         ; NArchive::N7z::CHandler::FillPopIDs(void)+1ADp ...
.text:00000430
.text:00000430 var_10          = dword ptr -10h
.text:00000430 var_C           = dword ptr -0Ch
.text:00000430 var_8           = dword ptr -8
.text:00000430 var_4           = dword ptr -4
.text:00000430 arg_0           = dword ptr  8
.text:00000430 arg_4           = dword ptr  0Ch
.text:00000430
.text:00000430                 push    ebp
.text:00000431                 mov     ebp, esp
.text:00000433                 sub     esp, 10h
.text:00000436                 mov     eax, 0CCCCCCCCh
.text:0000043B                 mov     [ebp+var_10], eax
.text:0000043E                 mov     [ebp+var_C], eax
.text:00000441                 mov     [ebp+var_8], eax
.text:00000444                 mov     [ebp+var_4], eax
.text:00000447                 mov     [ebp+var_4], 0
.text:0000044E                 jmp     short loc_459
.text:00000450 ; ---------------------------------------------------------------------------
.text:00000450
.text:00000450 loc_450:                                ; CODE XREF: NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint):loc_4A3j
.text:00000450                 mov     eax, [ebp+var_4]
.text:00000453                 add     eax, 1
.text:00000456                 mov     [ebp+var_4], eax
.text:00000459
.text:00000459 loc_459:                                ; CODE XREF: NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+1Ej
.text:00000459                 mov     ecx, [ebp+arg_0]
.text:0000045C                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:00000461                 cmp     [ebp+var_4], eax
.text:00000464                 jnb     short loc_4A5
.text:00000466                 mov     ecx, [ebp+var_4]
.text:00000469                 push    ecx
.text:0000046A                 mov     ecx, [ebp+arg_0]
.text:0000046D                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00000472                 mov     edx, [ebp+arg_4]
.text:00000475                 xor     ecx, ecx
.text:00000477                 mov     [ebp+var_8], eax
.text:0000047A                 mov     [ebp+var_10], edx
.text:0000047D                 mov     [ebp+var_C], ecx
.text:00000480                 mov     edx, [ebp+var_8]
.text:00000483                 mov     eax, [edx]
.text:00000485                 cmp     eax, [ebp+var_10]
.text:00000488                 jnz     short loc_4A3
.text:0000048A                 mov     ecx, [ebp+var_8]
.text:0000048D                 mov     edx, [ecx+4]
.text:00000490                 cmp     edx, [ebp+var_C]
.text:00000493                 jnz     short loc_4A3
.text:00000495                 mov     eax, [ebp+var_4]
.text:00000498                 push    eax
.text:00000499                 mov     ecx, [ebp+arg_0]
.text:0000049C                 call    ?Delete@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::Delete(uint)
.text:000004A1                 jmp     short loc_4A5
.text:000004A3 ; ---------------------------------------------------------------------------
.text:000004A3
.text:000004A3 loc_4A3:                                ; CODE XREF: NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+58j
.text:000004A3                                         ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+63j
.text:000004A3                 jmp     short loc_450
.text:000004A5 ; ---------------------------------------------------------------------------
.text:000004A5
.text:000004A5 loc_4A5:                                ; CODE XREF: NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+34j
.text:000004A5                                         ; NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+71j
.text:000004A5                 mov     ecx, [ebp+arg_4]
.text:000004A8                 xor     edx, edx
.text:000004AA                 push    edx
.text:000004AB                 push    ecx
.text:000004AC                 push    0
.text:000004AE                 mov     ecx, [ebp+arg_0]
.text:000004B1                 call    ?Insert@?$CRecordVector@_K@@QAEXI_K@Z ; CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)
.text:000004B6                 add     esp, 10h
.text:000004B9                 cmp     ebp, esp
.text:000004BB                 call    __RTC_CheckEsp
.text:000004C0                 mov     esp, ebp
.text:000004C2                 pop     ebp
.text:000004C3                 retn    8
.text:000004C3 ?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z endp
.text:000004C3
.text:000004C3 ; ---------------------------------------------------------------------------
.text:000004C6                 align 10h
.text:000004D0
.text:000004D0 ; =============== S U B R O U T I N E =======================================
.text:000004D0
.text:000004D0 ; Attributes: bp-based frame
.text:000004D0
.text:000004D0 ; __int32 __stdcall NArchive::N7z::CHandler::GetNumberOfProperties(NArchive::N7z::CHandler *this, unsigned int *)
.text:000004D0                 public ?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z
.text:000004D0 ?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z proc near
.text:000004D0
.text:000004D0 this            = dword ptr  8
.text:000004D0 arg_4           = dword ptr  0Ch
.text:000004D0
.text:000004D0                 push    ebp
.text:000004D1                 mov     ebp, esp
.text:000004D3                 mov     ecx, [ebp+this]
.text:000004D6                 add     ecx, 1E4h
.text:000004DC                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000004E1                 mov     ecx, [ebp+arg_4]
.text:000004E4                 mov     [ecx], eax
.text:000004E6                 xor     eax, eax
.text:000004E8                 cmp     ebp, esp
.text:000004EA                 call    __RTC_CheckEsp
.text:000004EF                 pop     ebp
.text:000004F0                 retn    8
.text:000004F0 ?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z endp
.text:000004F0
.text:000004F0 ; ---------------------------------------------------------------------------
.text:000004F3                 align 10h
.text:00000500
.text:00000500 ; =============== S U B R O U T I N E =======================================
.text:00000500
.text:00000500 ; Attributes: bp-based frame
.text:00000500
.text:00000500 ; __int32 __stdcall NArchive::N7z::CHandler::GetPropertyInfo(NArchive::N7z::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000500                 public ?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000500 ?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000500
.text:00000500 var_1C          = dword ptr -1Ch
.text:00000500 var_18          = dword ptr -18h
.text:00000500 var_14          = dword ptr -14h
.text:00000500 var_10          = dword ptr -10h
.text:00000500 var_C           = dword ptr -0Ch
.text:00000500 var_8           = dword ptr -8
.text:00000500 var_4           = dword ptr -4
.text:00000500 this            = dword ptr  8
.text:00000500 arg_4           = dword ptr  0Ch
.text:00000500 arg_8           = dword ptr  10h
.text:00000500 arg_C           = dword ptr  14h
.text:00000500 arg_10          = dword ptr  18h
.text:00000500
.text:00000500                 push    ebp
.text:00000501                 mov     ebp, esp
.text:00000503                 sub     esp, 1Ch
.text:00000506                 mov     eax, 0CCCCCCCCh
.text:0000050B                 mov     [ebp+var_1C], eax
.text:0000050E                 mov     [ebp+var_18], eax
.text:00000511                 mov     [ebp+var_14], eax
.text:00000514                 mov     [ebp+var_10], eax
.text:00000517                 mov     [ebp+var_C], eax
.text:0000051A                 mov     [ebp+var_8], eax
.text:0000051D                 mov     [ebp+var_4], eax
.text:00000520                 mov     ecx, [ebp+this]
.text:00000523                 add     ecx, 1E4h
.text:00000529                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000052E                 cmp     [ebp+arg_4], eax
.text:00000531                 jb      short loc_53D
.text:00000533                 mov     eax, 80070057h
.text:00000538                 jmp     loc_5D3
.text:0000053D ; ---------------------------------------------------------------------------
.text:0000053D
.text:0000053D loc_53D:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+31j
.text:0000053D                 mov     eax, [ebp+arg_4]
.text:00000540                 push    eax
.text:00000541                 mov     ecx, [ebp+this]
.text:00000544                 add     ecx, 1E4h
.text:0000054A                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:0000054F                 mov     ecx, [eax]
.text:00000551                 mov     [ebp+var_8], ecx
.text:00000554                 mov     edx, [eax+4]
.text:00000557                 mov     [ebp+var_4], edx
.text:0000055A                 mov     [ebp+var_C], 0
.text:00000561                 jmp     short loc_56C
.text:00000563 ; ---------------------------------------------------------------------------
.text:00000563
.text:00000563 loc_563:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *):loc_5CCj
.text:00000563                 mov     eax, [ebp+var_C]
.text:00000566                 add     eax, 1
.text:00000569                 mov     [ebp+var_C], eax
.text:0000056C
.text:0000056C loc_56C:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+61j
.text:0000056C                 cmp     [ebp+var_C], 0Dh
.text:00000570                 jnb     short loc_5CE
.text:00000572                 mov     ecx, [ebp+var_C]
.text:00000575                 shl     ecx, 4
.text:00000578                 add     ecx, offset _kPropMap
.text:0000057E                 mov     [ebp+var_10], ecx
.text:00000581                 mov     edx, [ebp+var_10]
.text:00000584                 mov     eax, [edx]
.text:00000586                 xor     ecx, ecx
.text:00000588                 mov     [ebp+var_1C], eax
.text:0000058B                 mov     [ebp+var_18], ecx
.text:0000058E                 mov     edx, [ebp+var_1C]
.text:00000591                 cmp     edx, [ebp+var_8]
.text:00000594                 jnz     short loc_5CC
.text:00000596                 mov     eax, [ebp+var_18]
.text:00000599                 cmp     eax, [ebp+var_4]
.text:0000059C                 jnz     short loc_5CC
.text:0000059E                 mov     ecx, [ebp+var_10]
.text:000005A1                 add     ecx, 4
.text:000005A4                 mov     [ebp+var_14], ecx
.text:000005A7                 mov     edx, [ebp+arg_C]
.text:000005AA                 mov     eax, [ebp+var_14]
.text:000005AD                 mov     ecx, [eax+4]
.text:000005B0                 mov     [edx], ecx
.text:000005B2                 mov     edx, [ebp+arg_10]
.text:000005B5                 mov     eax, [ebp+var_14]
.text:000005B8                 mov     cx, [eax+8]
.text:000005BC                 mov     [edx], cx
.text:000005BF                 mov     edx, [ebp+arg_8]
.text:000005C2                 mov     dword ptr [edx], 0
.text:000005C8                 xor     eax, eax
.text:000005CA                 jmp     short loc_5D3
.text:000005CC ; ---------------------------------------------------------------------------
.text:000005CC
.text:000005CC loc_5CC:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+94j
.text:000005CC                                         ; NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+9Cj
.text:000005CC                 jmp     short loc_563
.text:000005CE ; ---------------------------------------------------------------------------
.text:000005CE
.text:000005CE loc_5CE:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+70j
.text:000005CE                 mov     eax, 80070057h
.text:000005D3
.text:000005D3 loc_5D3:                                ; CODE XREF: NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+38j
.text:000005D3                                         ; NArchive::N7z::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+CAj
.text:000005D3                 add     esp, 1Ch
.text:000005D6                 cmp     ebp, esp
.text:000005D8                 call    __RTC_CheckEsp
.text:000005DD                 mov     esp, ebp
.text:000005DF                 pop     ebp
.text:000005E0                 retn    14h
.text:000005E0 ?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000005E0
.text:000005E0 ; ---------------------------------------------------------------------------
.text:000005E3                 align 4
.text:000005E3 _text           ends
.text:000005E3
.text$x:000005E4 ; ===========================================================================
.text$x:000005E4
.text$x:000005E4 ; Segment type: Pure code
.text$x:000005E4 ; Segment permissions: Read/Execute
.text$x:000005E4 _text$x         segment para public 'CODE' use32
.text$x:000005E4                 assume cs:_text$x
.text$x:000005E4                 ;org 5E4h
.text$x:000005E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000005E4
.text$x:000005E4 ; =============== S U B R O U T I N E =======================================
.text$x:000005E4
.text$x:000005E4
.text$x:000005E4 __unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0 proc near
.text$x:000005E4                                         ; DATA XREF: .xdata$x:0000060Co
.text$x:000005E4                 lea     ecx, [ebp-20h]
.text$x:000005E7                 jmp     ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text$x:000005E7 __unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0 endp
.text$x:000005E7
.text$x:000005EC
.text$x:000005EC ; =============== S U B R O U T I N E =======================================
.text$x:000005EC
.text$x:000005EC
.text$x:000005EC __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ proc near
.text$x:000005EC                                         ; DATA XREF: NArchive::N7z::CHandler::FillPopIDs(void)+5o
.text$x:000005EC
.text$x:000005EC arg_4           = dword ptr  8
.text$x:000005EC
.text$x:000005EC                 mov     edx, [esp+arg_4]
.text$x:000005F0                 lea     eax, [edx+0Ch]
.text$x:000005F3                 mov     ecx, [edx-1Ch]
.text$x:000005F6                 xor     ecx, eax
.text$x:000005F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000005FD                 mov     eax, offset __ehfuncinfo$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
.text$x:00000602                 jmp     ___CxxFrameHandler3
.text$x:00000602 __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ endp
.text$x:00000602
.text$x:00000602 ; ---------------------------------------------------------------------------
.text$x:00000607                 align 4
.text$x:00000607 _text$x         ends
.text$x:00000607
.xdata$x:00000608 ; ===========================================================================
.xdata$x:00000608
.xdata$x:00000608 ; Segment type: Pure data
.xdata$x:00000608 ; Segment permissions: Read
.xdata$x:00000608 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00000608                 assume cs:_xdata$x
.xdata$x:00000608                 ;org 608h
.xdata$x:00000608 __unwindtable$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ db 0FFh
.xdata$x:00000608                                         ; DATA XREF: .xdata$x:00000618o
.xdata$x:00000609                 db 0FFh
.xdata$x:0000060A                 db 0FFh
.xdata$x:0000060B                 db 0FFh
.xdata$x:0000060C                 dd offset __unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0
.xdata$x:00000610 __ehfuncinfo$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ db  22h ; "
.xdata$x:00000610                                         ; DATA XREF: __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ+11o
.xdata$x:00000611                 db    5
.xdata$x:00000612                 db  93h ; ô
.xdata$x:00000613                 db  19h
.xdata$x:00000614                 db    1
.xdata$x:00000615                 db    0
.xdata$x:00000616                 db    0
.xdata$x:00000617                 db    0
.xdata$x:00000618                 dd offset __unwindtable$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
.xdata$x:0000061C                 db    0
.xdata$x:0000061D                 db    0
.xdata$x:0000061E                 db    0
.xdata$x:0000061F                 db    0
.xdata$x:00000620                 db    0
.xdata$x:00000621                 db    0
.xdata$x:00000622                 db    0
.xdata$x:00000623                 db    0
.xdata$x:00000624                 db    0
.xdata$x:00000625                 db    0
.xdata$x:00000626                 db    0
.xdata$x:00000627                 db    0
.xdata$x:00000628                 db    0
.xdata$x:00000629                 db    0
.xdata$x:0000062A                 db    0
.xdata$x:0000062B                 db    0
.xdata$x:0000062C                 db    0
.xdata$x:0000062D                 db    0
.xdata$x:0000062E                 db    0
.xdata$x:0000062F                 db    0
.xdata$x:00000630                 db    1
.xdata$x:00000631                 db    0
.xdata$x:00000632                 db    0
.xdata$x:00000633                 db    0
.xdata$x:00000633 _xdata$x        ends
.xdata$x:00000633
.rtc$TMZ:00000634 ; ===========================================================================
.rtc$TMZ:00000634
.rtc$TMZ:00000634 ; Segment type: Pure data
.rtc$TMZ:00000634 ; Segment permissions: Read
.rtc$TMZ:00000634 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00000634                 assume cs:_rtc$TMZ
.rtc$TMZ:00000634                 ;org 634h
.rtc$TMZ:00000634 ; COMDAT (pick any)
.rtc$TMZ:00000634 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00000634 _rtc$TMZ        ends
.rtc$TMZ:00000634
.rtc$IMZ:00000638 ; ===========================================================================
.rtc$IMZ:00000638
.rtc$IMZ:00000638 ; Segment type: Pure data
.rtc$IMZ:00000638 ; Segment permissions: Read
.rtc$IMZ:00000638 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00000638                 assume cs:_rtc$IMZ
.rtc$IMZ:00000638                 ;org 638h
.rtc$IMZ:00000638 ; COMDAT (pick any)
.rtc$IMZ:00000638 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00000638 _rtc$IMZ        ends
.rtc$IMZ:00000638
.text:0000063C ; ===========================================================================
.text:0000063C
.text:0000063C ; Segment type: Pure code
.text:0000063C ; Segment permissions: Read/Execute
.text:0000063C _text           segment para public 'CODE' use32
.text:0000063C                 assume cs:_text
.text:0000063C                 ;org 63Ch
.text:0000063C ; COMDAT (pick any)
.text:0000063C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000063C
.text:0000063C ; =============== S U B R O U T I N E =======================================
.text:0000063C
.text:0000063C ; Attributes: bp-based frame
.text:0000063C
.text:0000063C ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(class CRecordVector<unsigned __int64> const &)
.text:0000063C                 public ??0?$CRecordVector@_K@@QAE@ABV0@@Z
.text:0000063C ??0?$CRecordVector@_K@@QAE@ABV0@@Z proc near
.text:0000063C                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+59p
.text:0000063C
.text:0000063C var_C           = dword ptr -0Ch
.text:0000063C var_8           = dword ptr -8
.text:0000063C var_4           = dword ptr -4
.text:0000063C arg_0           = dword ptr  8
.text:0000063C
.text:0000063C                 push    ebp
.text:0000063D                 mov     ebp, esp
.text:0000063F                 sub     esp, 0Ch
.text:00000642                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000649                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000650                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000657                 mov     [ebp+var_4], ecx
.text:0000065A                 mov     eax, [ebp+var_4]
.text:0000065D                 mov     dword ptr [eax], 0
.text:00000663                 mov     ecx, [ebp+var_4]
.text:00000666                 mov     dword ptr [ecx+4], 0
.text:0000066D                 mov     edx, [ebp+var_4]
.text:00000670                 mov     dword ptr [edx+8], 0
.text:00000677                 mov     ecx, [ebp+arg_0]
.text:0000067A                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:0000067F                 mov     [ebp+var_8], eax
.text:00000682                 cmp     [ebp+var_8], 0
.text:00000686                 jz      short loc_6DC
.text:00000688                 xor     ecx, ecx
.text:0000068A                 mov     eax, [ebp+var_8]
.text:0000068D                 mov     edx, 8
.text:00000692                 mul     edx
.text:00000694                 seto    cl
.text:00000697                 neg     ecx
.text:00000699                 or      ecx, eax
.text:0000069B                 push    ecx             ; unsigned int
.text:0000069C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000006A1                 add     esp, 4
.text:000006A4                 mov     [ebp+var_C], eax
.text:000006A7                 mov     eax, [ebp+var_4]
.text:000006AA                 mov     ecx, [ebp+var_C]
.text:000006AD                 mov     [eax], ecx
.text:000006AF                 mov     edx, [ebp+var_4]
.text:000006B2                 mov     eax, [ebp+var_8]
.text:000006B5                 mov     [edx+4], eax
.text:000006B8                 mov     ecx, [ebp+var_4]
.text:000006BB                 mov     edx, [ebp+var_8]
.text:000006BE                 mov     [ecx+8], edx
.text:000006C1                 mov     eax, [ebp+var_8]
.text:000006C4                 shl     eax, 3
.text:000006C7                 push    eax             ; Size
.text:000006C8                 mov     ecx, [ebp+arg_0]
.text:000006CB                 mov     edx, [ecx]
.text:000006CD                 push    edx             ; Src
.text:000006CE                 mov     eax, [ebp+var_4]
.text:000006D1                 mov     ecx, [eax]
.text:000006D3                 push    ecx             ; Dst
.text:000006D4                 call    _memcpy
.text:000006D9                 add     esp, 0Ch
.text:000006DC
.text:000006DC loc_6DC:                                ; CODE XREF: CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(CRecordVector<unsigned __int64> const &)+4Aj
.text:000006DC                 mov     eax, [ebp+var_4]
.text:000006DF                 add     esp, 0Ch
.text:000006E2                 cmp     ebp, esp
.text:000006E4                 call    __RTC_CheckEsp
.text:000006E9                 mov     esp, ebp
.text:000006EB                 pop     ebp
.text:000006EC                 retn    4
.text:000006EC ??0?$CRecordVector@_K@@QAE@ABV0@@Z endp
.text:000006EC
.text:000006EC ; ---------------------------------------------------------------------------
.text:000006EF                 align 10h
.text:000006EF _text           ends
.text:000006EF
.text:000006F0 ; ===========================================================================
.text:000006F0
.text:000006F0 ; Segment type: Pure code
.text:000006F0 ; Segment permissions: Read/Execute
.text:000006F0 _text           segment para public 'CODE' use32
.text:000006F0                 assume cs:_text
.text:000006F0                 ;org 6F0h
.text:000006F0 ; COMDAT (pick any)
.text:000006F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006F0
.text:000006F0 ; =============== S U B R O U T I N E =======================================
.text:000006F0
.text:000006F0 ; Attributes: bp-based frame
.text:000006F0
.text:000006F0 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Size(void)const
.text:000006F0                 public ?Size@?$CRecordVector@_K@@QBEIXZ
.text:000006F0 ?Size@?$CRecordVector@_K@@QBEIXZ proc near
.text:000006F0                                         ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+2Cp
.text:000006F0                                         ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+2Cp ...
.text:000006F0
.text:000006F0 var_4           = dword ptr -4
.text:000006F0
.text:000006F0                 push    ebp
.text:000006F1                 mov     ebp, esp
.text:000006F3                 push    ecx
.text:000006F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006FB                 mov     [ebp+var_4], ecx
.text:000006FE                 mov     eax, [ebp+var_4]
.text:00000701                 mov     eax, [eax+4]
.text:00000704                 mov     esp, ebp
.text:00000706                 pop     ebp
.text:00000707                 retn
.text:00000707 ?Size@?$CRecordVector@_K@@QBEIXZ endp
.text:00000707
.text:00000707 _text           ends
.text:00000707
.text:00000708 ; ===========================================================================
.text:00000708
.text:00000708 ; Segment type: Pure code
.text:00000708 ; Segment permissions: Read/Execute
.text:00000708 _text           segment para public 'CODE' use32
.text:00000708                 assume cs:_text
.text:00000708                 ;org 708h
.text:00000708 ; COMDAT (pick any)
.text:00000708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000708
.text:00000708 ; =============== S U B R O U T I N E =======================================
.text:00000708
.text:00000708 ; Attributes: bp-based frame
.text:00000708
.text:00000708 ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:00000708                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:00000708 ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+1DDp
.text:00000708                                         ; __unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0+3j
.text:00000708
.text:00000708 var_8           = dword ptr -8
.text:00000708 var_4           = dword ptr -4
.text:00000708
.text:00000708                 push    ebp
.text:00000709                 mov     ebp, esp
.text:0000070B                 sub     esp, 8
.text:0000070E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000715                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071C                 mov     [ebp+var_4], ecx
.text:0000071F                 mov     eax, [ebp+var_4]
.text:00000722                 mov     ecx, [eax]
.text:00000724                 mov     [ebp+var_8], ecx
.text:00000727                 mov     edx, [ebp+var_8]
.text:0000072A                 push    edx             ; void *
.text:0000072B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000730                 add     esp, 4
.text:00000733                 add     esp, 8
.text:00000736                 cmp     ebp, esp
.text:00000738                 call    __RTC_CheckEsp
.text:0000073D                 mov     esp, ebp
.text:0000073F                 pop     ebp
.text:00000740                 retn
.text:00000740 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00000740
.text:00000740 ; ---------------------------------------------------------------------------
.text:00000741                 align 4
.text:00000741 _text           ends
.text:00000741
.text:00000744 ; ===========================================================================
.text:00000744
.text:00000744 ; Segment type: Pure code
.text:00000744 ; Segment permissions: Read/Execute
.text:00000744 _text           segment para public 'CODE' use32
.text:00000744                 assume cs:_text
.text:00000744                 ;org 744h
.text:00000744 ; COMDAT (pick any)
.text:00000744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000744
.text:00000744 ; =============== S U B R O U T I N E =======================================
.text:00000744
.text:00000744 ; Attributes: bp-based frame
.text:00000744
.text:00000744 ; public: void __thiscall CRecordVector<unsigned __int64>::Clear(void)
.text:00000744                 public ?Clear@?$CRecordVector@_K@@QAEXXZ
.text:00000744 ?Clear@?$CRecordVector@_K@@QAEXXZ proc near
.text:00000744                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+48p
.text:00000744
.text:00000744 var_4           = dword ptr -4
.text:00000744
.text:00000744                 push    ebp
.text:00000745                 mov     ebp, esp
.text:00000747                 push    ecx
.text:00000748                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000074F                 mov     [ebp+var_4], ecx
.text:00000752                 mov     eax, [ebp+var_4]
.text:00000755                 mov     dword ptr [eax+4], 0
.text:0000075C                 mov     esp, ebp
.text:0000075E                 pop     ebp
.text:0000075F                 retn
.text:0000075F ?Clear@?$CRecordVector@_K@@QAEXXZ endp
.text:0000075F
.text:0000075F _text           ends
.text:0000075F
.text:00000760 ; ===========================================================================
.text:00000760
.text:00000760 ; Segment type: Pure code
.text:00000760 ; Segment permissions: Read/Execute
.text:00000760 _text           segment para public 'CODE' use32
.text:00000760                 assume cs:_text
.text:00000760                 ;org 760h
.text:00000760 ; COMDAT (pick any)
.text:00000760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000760
.text:00000760 ; =============== S U B R O U T I N E =======================================
.text:00000760
.text:00000760 ; Attributes: bp-based frame
.text:00000760
.text:00000760 ; public: void __thiscall CRecordVector<unsigned __int64>::Delete(unsigned int)
.text:00000760                 public ?Delete@?$CRecordVector@_K@@QAEXI@Z
.text:00000760 ?Delete@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00000760                                         ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+7Bp
.text:00000760                                         ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+6Cp ...
.text:00000760
.text:00000760 var_4           = dword ptr -4
.text:00000760 arg_0           = dword ptr  8
.text:00000760
.text:00000760                 push    ebp
.text:00000761                 mov     ebp, esp
.text:00000763                 push    ecx
.text:00000764                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000076B                 mov     [ebp+var_4], ecx
.text:0000076E                 mov     eax, [ebp+arg_0]
.text:00000771                 add     eax, 1
.text:00000774                 push    eax
.text:00000775                 mov     ecx, [ebp+arg_0]
.text:00000778                 push    ecx
.text:00000779                 mov     ecx, [ebp+var_4]
.text:0000077C                 call    ?MoveItems@?$CRecordVector@_K@@AAEXII@Z ; CRecordVector<unsigned __int64>::MoveItems(uint,uint)
.text:00000781                 mov     edx, [ebp+var_4]
.text:00000784                 mov     eax, [edx+4]
.text:00000787                 sub     eax, 1
.text:0000078A                 mov     ecx, [ebp+var_4]
.text:0000078D                 mov     [ecx+4], eax
.text:00000790                 add     esp, 4
.text:00000793                 cmp     ebp, esp
.text:00000795                 call    __RTC_CheckEsp
.text:0000079A                 mov     esp, ebp
.text:0000079C                 pop     ebp
.text:0000079D                 retn    4
.text:0000079D ?Delete@?$CRecordVector@_K@@QAEXI@Z endp
.text:0000079D
.text:0000079D _text           ends
.text:0000079D
.text:000007A0 ; ===========================================================================
.text:000007A0
.text:000007A0 ; Segment type: Pure code
.text:000007A0 ; Segment permissions: Read/Execute
.text:000007A0 _text           segment para public 'CODE' use32
.text:000007A0                 assume cs:_text
.text:000007A0                 ;org 7A0h
.text:000007A0 ; COMDAT (pick any)
.text:000007A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007A0
.text:000007A0 ; =============== S U B R O U T I N E =======================================
.text:000007A0
.text:000007A0 ; Attributes: bp-based frame
.text:000007A0
.text:000007A0 ; public: class CRecordVector<unsigned __int64> & __thiscall CRecordVector<unsigned __int64>::operator+=(class CRecordVector<unsigned __int64> const &)
.text:000007A0                 public ??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z
.text:000007A0 ??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z proc near
.text:000007A0                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+156p
.text:000007A0
.text:000007A0 var_8           = dword ptr -8
.text:000007A0 var_4           = dword ptr -4
.text:000007A0 arg_0           = dword ptr  8
.text:000007A0
.text:000007A0                 push    ebp
.text:000007A1                 mov     ebp, esp
.text:000007A3                 sub     esp, 8
.text:000007A6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000007AD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007B4                 mov     [ebp+var_4], ecx
.text:000007B7                 mov     ecx, [ebp+arg_0]
.text:000007BA                 call    ?Size@?$CRecordVector@_K@@QBEIXZ ; CRecordVector<unsigned __int64>::Size(void)
.text:000007BF                 mov     [ebp+var_8], eax
.text:000007C2                 mov     eax, [ebp+var_4]
.text:000007C5                 mov     ecx, [eax+4]
.text:000007C8                 add     ecx, [ebp+var_8]
.text:000007CB                 push    ecx
.text:000007CC                 mov     ecx, [ebp+var_4]
.text:000007CF                 call    ?Reserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::Reserve(uint)
.text:000007D4                 cmp     [ebp+var_8], 0
.text:000007D8                 jz      short loc_7FE
.text:000007DA                 mov     edx, [ebp+var_8]
.text:000007DD                 shl     edx, 3
.text:000007E0                 push    edx             ; Size
.text:000007E1                 mov     eax, [ebp+arg_0]
.text:000007E4                 mov     ecx, [eax]
.text:000007E6                 push    ecx             ; Src
.text:000007E7                 mov     edx, [ebp+var_4]
.text:000007EA                 mov     eax, [edx+4]
.text:000007ED                 mov     ecx, [ebp+var_4]
.text:000007F0                 mov     edx, [ecx]
.text:000007F2                 lea     eax, [edx+eax*8]
.text:000007F5                 push    eax             ; Dst
.text:000007F6                 call    _memcpy
.text:000007FB                 add     esp, 0Ch
.text:000007FE
.text:000007FE loc_7FE:                                ; CODE XREF: CRecordVector<unsigned __int64>::operator+=(CRecordVector<unsigned __int64> const &)+38j
.text:000007FE                 mov     ecx, [ebp+var_4]
.text:00000801                 mov     edx, [ecx+4]
.text:00000804                 add     edx, [ebp+var_8]
.text:00000807                 mov     eax, [ebp+var_4]
.text:0000080A                 mov     [eax+4], edx
.text:0000080D                 mov     eax, [ebp+var_4]
.text:00000810                 add     esp, 8
.text:00000813                 cmp     ebp, esp
.text:00000815                 call    __RTC_CheckEsp
.text:0000081A                 mov     esp, ebp
.text:0000081C                 pop     ebp
.text:0000081D                 retn    4
.text:0000081D ??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z endp
.text:0000081D
.text:0000081D _text           ends
.text:0000081D
.text:00000820 ; ===========================================================================
.text:00000820
.text:00000820 ; Segment type: Pure code
.text:00000820 ; Segment permissions: Read/Execute
.text:00000820 _text           segment para public 'CODE' use32
.text:00000820                 assume cs:_text
.text:00000820                 ;org 820h
.text:00000820 ; COMDAT (pick any)
.text:00000820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000820
.text:00000820 ; =============== S U B R O U T I N E =======================================
.text:00000820
.text:00000820 ; Attributes: bp-based frame
.text:00000820
.text:00000820 ; public: unsigned int __thiscall CRecordVector<unsigned __int64>::Add(unsigned __int64)
.text:00000820                 public ?Add@?$CRecordVector@_K@@QAEI_K@Z
.text:00000820 ?Add@?$CRecordVector@_K@@QAEI_K@Z proc near
.text:00000820                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+168p
.text:00000820                                         ; NArchive::N7z::CHandler::FillPopIDs(void)+17Ap ...
.text:00000820
.text:00000820 var_8           = dword ptr -8
.text:00000820 var_4           = dword ptr -4
.text:00000820 arg_0           = dword ptr  8
.text:00000820 arg_4           = dword ptr  0Ch
.text:00000820
.text:00000820                 push    ebp
.text:00000821                 mov     ebp, esp
.text:00000823                 sub     esp, 8
.text:00000826                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000082D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000834                 mov     [ebp+var_4], ecx
.text:00000837                 mov     ecx, [ebp+var_4]
.text:0000083A                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000083F                 mov     eax, [ebp+var_4]
.text:00000842                 mov     ecx, [eax+4]
.text:00000845                 mov     edx, [ebp+var_4]
.text:00000848                 mov     eax, [edx]
.text:0000084A                 mov     edx, [ebp+arg_0]
.text:0000084D                 mov     [eax+ecx*8], edx
.text:00000850                 mov     edx, [ebp+arg_4]
.text:00000853                 mov     [eax+ecx*8+4], edx
.text:00000857                 mov     eax, [ebp+var_4]
.text:0000085A                 mov     ecx, [eax+4]
.text:0000085D                 mov     [ebp+var_8], ecx
.text:00000860                 mov     edx, [ebp+var_4]
.text:00000863                 mov     eax, [edx+4]
.text:00000866                 add     eax, 1
.text:00000869                 mov     ecx, [ebp+var_4]
.text:0000086C                 mov     [ecx+4], eax
.text:0000086F                 mov     eax, [ebp+var_8]
.text:00000872                 add     esp, 8
.text:00000875                 cmp     ebp, esp
.text:00000877                 call    __RTC_CheckEsp
.text:0000087C                 mov     esp, ebp
.text:0000087E                 pop     ebp
.text:0000087F                 retn    8
.text:0000087F ?Add@?$CRecordVector@_K@@QAEI_K@Z endp
.text:0000087F
.text:0000087F ; ---------------------------------------------------------------------------
.text:00000882                 align 4
.text:00000882 _text           ends
.text:00000882
.text:00000884 ; ===========================================================================
.text:00000884
.text:00000884 ; Segment type: Pure code
.text:00000884 ; Segment permissions: Read/Execute
.text:00000884 _text           segment para public 'CODE' use32
.text:00000884                 assume cs:_text
.text:00000884                 ;org 884h
.text:00000884 ; COMDAT (pick any)
.text:00000884                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000884
.text:00000884 ; =============== S U B R O U T I N E =======================================
.text:00000884
.text:00000884 ; Attributes: bp-based frame
.text:00000884
.text:00000884 ; public: void __thiscall CRecordVector<unsigned __int64>::Insert(unsigned int, unsigned __int64)
.text:00000884                 public ?Insert@?$CRecordVector@_K@@QAEXI_K@Z
.text:00000884 ?Insert@?$CRecordVector@_K@@QAEXI_K@Z proc near
.text:00000884                                         ; CODE XREF: NArchive::N7z::InsertToHead(CRecordVector<unsigned __int64> &,uint)+81p
.text:00000884
.text:00000884 var_4           = dword ptr -4
.text:00000884 arg_0           = dword ptr  8
.text:00000884 arg_4           = dword ptr  0Ch
.text:00000884 arg_8           = dword ptr  10h
.text:00000884
.text:00000884                 push    ebp
.text:00000885                 mov     ebp, esp
.text:00000887                 push    ecx
.text:00000888                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000088F                 mov     [ebp+var_4], ecx
.text:00000892                 mov     ecx, [ebp+var_4]
.text:00000895                 call    ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000089A                 mov     eax, [ebp+arg_0]
.text:0000089D                 push    eax
.text:0000089E                 mov     ecx, [ebp+arg_0]
.text:000008A1                 add     ecx, 1
.text:000008A4                 push    ecx
.text:000008A5                 mov     ecx, [ebp+var_4]
.text:000008A8                 call    ?MoveItems@?$CRecordVector@_K@@AAEXII@Z ; CRecordVector<unsigned __int64>::MoveItems(uint,uint)
.text:000008AD                 mov     edx, [ebp+var_4]
.text:000008B0                 mov     eax, [edx]
.text:000008B2                 mov     ecx, [ebp+arg_0]
.text:000008B5                 mov     edx, [ebp+arg_4]
.text:000008B8                 mov     [eax+ecx*8], edx
.text:000008BB                 mov     edx, [ebp+arg_8]
.text:000008BE                 mov     [eax+ecx*8+4], edx
.text:000008C2                 mov     eax, [ebp+var_4]
.text:000008C5                 mov     ecx, [eax+4]
.text:000008C8                 add     ecx, 1
.text:000008CB                 mov     edx, [ebp+var_4]
.text:000008CE                 mov     [edx+4], ecx
.text:000008D1                 add     esp, 4
.text:000008D4                 cmp     ebp, esp
.text:000008D6                 call    __RTC_CheckEsp
.text:000008DB                 mov     esp, ebp
.text:000008DD                 pop     ebp
.text:000008DE                 retn    0Ch
.text:000008DE ?Insert@?$CRecordVector@_K@@QAEXI_K@Z endp
.text:000008DE
.text:000008DE ; ---------------------------------------------------------------------------
.text:000008E1                 align 4
.text:000008E1 _text           ends
.text:000008E1
.text:000008E4 ; ===========================================================================
.text:000008E4
.text:000008E4 ; Segment type: Pure code
.text:000008E4 ; Segment permissions: Read/Execute
.text:000008E4 _text           segment para public 'CODE' use32
.text:000008E4                 assume cs:_text
.text:000008E4                 ;org 8E4h
.text:000008E4 ; COMDAT (pick any)
.text:000008E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008E4
.text:000008E4 ; =============== S U B R O U T I N E =======================================
.text:000008E4
.text:000008E4 ; Attributes: bp-based frame
.text:000008E4
.text:000008E4 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:000008E4                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:000008E4 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:000008E4                                         ; CODE XREF: NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+3Dp
.text:000008E4                                         ; NArchive::N7z::RemoveOneItem(CRecordVector<unsigned __int64> &,uint)+3Dp ...
.text:000008E4
.text:000008E4 var_4           = dword ptr -4
.text:000008E4 arg_0           = dword ptr  8
.text:000008E4
.text:000008E4                 push    ebp
.text:000008E5                 mov     ebp, esp
.text:000008E7                 push    ecx
.text:000008E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008EF                 mov     [ebp+var_4], ecx
.text:000008F2                 mov     eax, [ebp+var_4]
.text:000008F5                 mov     ecx, [eax]
.text:000008F7                 mov     edx, [ebp+arg_0]
.text:000008FA                 lea     eax, [ecx+edx*8]
.text:000008FD                 mov     esp, ebp
.text:000008FF                 pop     ebp
.text:00000900                 retn    4
.text:00000900 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:00000900
.text:00000900 ; ---------------------------------------------------------------------------
.text:00000903                 align 4
.text:00000903 _text           ends
.text:00000903
.text:00000904 ; ===========================================================================
.text:00000904
.text:00000904 ; Segment type: Pure code
.text:00000904 ; Segment permissions: Read/Execute
.text:00000904 _text           segment para public 'CODE' use32
.text:00000904                 assume cs:_text
.text:00000904                 ;org 904h
.text:00000904 ; COMDAT (pick any)
.text:00000904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000904
.text:00000904 ; =============== S U B R O U T I N E =======================================
.text:00000904
.text:00000904 ; Attributes: bp-based frame
.text:00000904
.text:00000904 ; private: void __thiscall CRecordVector<unsigned __int64>::MoveItems(unsigned int, unsigned int)
.text:00000904                 public ?MoveItems@?$CRecordVector@_K@@AAEXII@Z
.text:00000904 ?MoveItems@?$CRecordVector@_K@@AAEXII@Z proc near
.text:00000904                                         ; CODE XREF: CRecordVector<unsigned __int64>::Delete(uint)+1Cp
.text:00000904                                         ; CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)+24p
.text:00000904
.text:00000904 var_4           = dword ptr -4
.text:00000904 arg_0           = dword ptr  8
.text:00000904 arg_4           = dword ptr  0Ch
.text:00000904
.text:00000904                 push    ebp
.text:00000905                 mov     ebp, esp
.text:00000907                 push    ecx
.text:00000908                 push    esi
.text:00000909                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000910                 mov     [ebp+var_4], ecx
.text:00000913                 mov     eax, [ebp+var_4]
.text:00000916                 mov     ecx, [eax+4]
.text:00000919                 sub     ecx, [ebp+arg_4]
.text:0000091C                 shl     ecx, 3
.text:0000091F                 mov     esi, esp
.text:00000921                 push    ecx             ; Size
.text:00000922                 mov     edx, [ebp+var_4]
.text:00000925                 mov     eax, [edx]
.text:00000927                 mov     ecx, [ebp+arg_4]
.text:0000092A                 lea     edx, [eax+ecx*8]
.text:0000092D                 push    edx             ; Src
.text:0000092E                 mov     eax, [ebp+var_4]
.text:00000931                 mov     ecx, [eax]
.text:00000933                 mov     edx, [ebp+arg_0]
.text:00000936                 lea     eax, [ecx+edx*8]
.text:00000939                 push    eax             ; Dst
.text:0000093A                 call    dword ptr ds:__imp__memmove
.text:00000940                 add     esp, 0Ch
.text:00000943                 cmp     esi, esp
.text:00000945                 call    __RTC_CheckEsp
.text:0000094A                 pop     esi
.text:0000094B                 add     esp, 4
.text:0000094E                 cmp     ebp, esp
.text:00000950                 call    __RTC_CheckEsp
.text:00000955                 mov     esp, ebp
.text:00000957                 pop     ebp
.text:00000958                 retn    8
.text:00000958 ?MoveItems@?$CRecordVector@_K@@AAEXII@Z endp
.text:00000958
.text:00000958 ; ---------------------------------------------------------------------------
.text:0000095B                 align 4
.text:0000095B _text           ends
.text:0000095B
.text:0000095C ; ===========================================================================
.text:0000095C
.text:0000095C ; Segment type: Pure code
.text:0000095C ; Segment permissions: Read/Execute
.text:0000095C _text           segment para public 'CODE' use32
.text:0000095C                 assume cs:_text
.text:0000095C                 ;org 95Ch
.text:0000095C ; COMDAT (pick any)
.text:0000095C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000095C
.text:0000095C ; =============== S U B R O U T I N E =======================================
.text:0000095C
.text:0000095C ; Attributes: bp-based frame
.text:0000095C
.text:0000095C ; private: void __thiscall CRecordVector<unsigned __int64>::ReserveOnePosition(void)
.text:0000095C                 public ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
.text:0000095C ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ proc near
.text:0000095C                                         ; CODE XREF: CRecordVector<unsigned __int64>::Add(unsigned __int64)+1Ap
.text:0000095C                                         ; CRecordVector<unsigned __int64>::Insert(uint,unsigned __int64)+11p
.text:0000095C
.text:0000095C var_14          = dword ptr -14h
.text:0000095C var_10          = dword ptr -10h
.text:0000095C Dst             = dword ptr -0Ch
.text:0000095C var_8           = dword ptr -8
.text:0000095C var_4           = dword ptr -4
.text:0000095C
.text:0000095C                 push    ebp
.text:0000095D                 mov     ebp, esp
.text:0000095F                 sub     esp, 14h
.text:00000962                 mov     eax, 0CCCCCCCCh
.text:00000967                 mov     [ebp+var_14], eax
.text:0000096A                 mov     [ebp+var_10], eax
.text:0000096D                 mov     [ebp+Dst], eax
.text:00000970                 mov     [ebp+var_8], eax
.text:00000973                 mov     [ebp+var_4], eax
.text:00000976                 mov     [ebp+var_4], ecx
.text:00000979                 mov     eax, [ebp+var_4]
.text:0000097C                 mov     ecx, [ebp+var_4]
.text:0000097F                 mov     edx, [eax+4]
.text:00000982                 cmp     edx, [ecx+8]
.text:00000985                 jnz     loc_A10
.text:0000098B                 mov     eax, [ebp+var_4]
.text:0000098E                 mov     ecx, [eax+8]
.text:00000991                 shr     ecx, 2
.text:00000994                 mov     edx, [ebp+var_4]
.text:00000997                 mov     eax, [edx+8]
.text:0000099A                 lea     ecx, [eax+ecx+1]
.text:0000099E                 mov     [ebp+var_8], ecx
.text:000009A1                 xor     ecx, ecx
.text:000009A3                 mov     eax, [ebp+var_8]
.text:000009A6                 mov     edx, 8
.text:000009AB                 mul     edx
.text:000009AD                 seto    cl
.text:000009B0                 neg     ecx
.text:000009B2                 or      ecx, eax
.text:000009B4                 push    ecx             ; unsigned int
.text:000009B5                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000009BA                 add     esp, 4
.text:000009BD                 mov     [ebp+var_10], eax
.text:000009C0                 mov     eax, [ebp+var_10]
.text:000009C3                 mov     [ebp+Dst], eax
.text:000009C6                 mov     ecx, [ebp+var_4]
.text:000009C9                 cmp     dword ptr [ecx+4], 0
.text:000009CD                 jz      short loc_9EB
.text:000009CF                 mov     edx, [ebp+var_4]
.text:000009D2                 mov     eax, [edx+4]
.text:000009D5                 shl     eax, 3
.text:000009D8                 push    eax             ; Size
.text:000009D9                 mov     ecx, [ebp+var_4]
.text:000009DC                 mov     edx, [ecx]
.text:000009DE                 push    edx             ; Src
.text:000009DF                 mov     eax, [ebp+Dst]
.text:000009E2                 push    eax             ; Dst
.text:000009E3                 call    _memcpy
.text:000009E8                 add     esp, 0Ch
.text:000009EB
.text:000009EB loc_9EB:                                ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+71j
.text:000009EB                 mov     ecx, [ebp+var_4]
.text:000009EE                 mov     edx, [ecx]
.text:000009F0                 mov     [ebp+var_14], edx
.text:000009F3                 mov     eax, [ebp+var_14]
.text:000009F6                 push    eax             ; void *
.text:000009F7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000009FC                 add     esp, 4
.text:000009FF                 mov     ecx, [ebp+var_4]
.text:00000A02                 mov     edx, [ebp+Dst]
.text:00000A05                 mov     [ecx], edx
.text:00000A07                 mov     eax, [ebp+var_4]
.text:00000A0A                 mov     ecx, [ebp+var_8]
.text:00000A0D                 mov     [eax+8], ecx
.text:00000A10
.text:00000A10 loc_A10:                                ; CODE XREF: CRecordVector<unsigned __int64>::ReserveOnePosition(void)+29j
.text:00000A10                 add     esp, 14h
.text:00000A13                 cmp     ebp, esp
.text:00000A15                 call    __RTC_CheckEsp
.text:00000A1A                 mov     esp, ebp
.text:00000A1C                 pop     ebp
.text:00000A1D                 retn
.text:00000A1D ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ endp
.text:00000A1D
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A1E                 align 10h
.text:00000A1E _text           ends
.text:00000A1E
.text:00000A20 ; ===========================================================================
.text:00000A20
.text:00000A20 ; Segment type: Pure code
.text:00000A20 ; Segment permissions: Read/Execute
.text:00000A20 _text           segment para public 'CODE' use32
.text:00000A20                 assume cs:_text
.text:00000A20                 ;org 0A20h
.text:00000A20 ; COMDAT (pick any)
.text:00000A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A20
.text:00000A20 ; =============== S U B R O U T I N E =======================================
.text:00000A20
.text:00000A20 ; Attributes: bp-based frame
.text:00000A20
.text:00000A20 ; public: void __thiscall CRecordVector<unsigned __int64>::Reserve(unsigned int)
.text:00000A20                 public ?Reserve@?$CRecordVector@_K@@QAEXI@Z
.text:00000A20 ?Reserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00000A20                                         ; CODE XREF: CRecordVector<unsigned __int64>::operator+=(CRecordVector<unsigned __int64> const &)+2Fp
.text:00000A20
.text:00000A20 var_10          = dword ptr -10h
.text:00000A20 var_C           = dword ptr -0Ch
.text:00000A20 Dst             = dword ptr -8
.text:00000A20 var_4           = dword ptr -4
.text:00000A20 arg_0           = dword ptr  8
.text:00000A20
.text:00000A20                 push    ebp
.text:00000A21                 mov     ebp, esp
.text:00000A23                 sub     esp, 10h
.text:00000A26                 mov     eax, 0CCCCCCCCh
.text:00000A2B                 mov     [ebp+var_10], eax
.text:00000A2E                 mov     [ebp+var_C], eax
.text:00000A31                 mov     [ebp+Dst], eax
.text:00000A34                 mov     [ebp+var_4], eax
.text:00000A37                 mov     [ebp+var_4], ecx
.text:00000A3A                 mov     eax, [ebp+var_4]
.text:00000A3D                 mov     ecx, [ebp+arg_0]
.text:00000A40                 cmp     ecx, [eax+8]
.text:00000A43                 jbe     short loc_AB4
.text:00000A45                 xor     ecx, ecx
.text:00000A47                 mov     eax, [ebp+arg_0]
.text:00000A4A                 mov     edx, 8
.text:00000A4F                 mul     edx
.text:00000A51                 seto    cl
.text:00000A54                 neg     ecx
.text:00000A56                 or      ecx, eax
.text:00000A58                 push    ecx             ; unsigned int
.text:00000A59                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000A5E                 add     esp, 4
.text:00000A61                 mov     [ebp+var_C], eax
.text:00000A64                 mov     eax, [ebp+var_C]
.text:00000A67                 mov     [ebp+Dst], eax
.text:00000A6A                 mov     ecx, [ebp+var_4]
.text:00000A6D                 cmp     dword ptr [ecx+4], 0
.text:00000A71                 jz      short loc_A8F
.text:00000A73                 mov     edx, [ebp+var_4]
.text:00000A76                 mov     eax, [edx+4]
.text:00000A79                 shl     eax, 3
.text:00000A7C                 push    eax             ; Size
.text:00000A7D                 mov     ecx, [ebp+var_4]
.text:00000A80                 mov     edx, [ecx]
.text:00000A82                 push    edx             ; Src
.text:00000A83                 mov     eax, [ebp+Dst]
.text:00000A86                 push    eax             ; Dst
.text:00000A87                 call    _memcpy
.text:00000A8C                 add     esp, 0Ch
.text:00000A8F
.text:00000A8F loc_A8F:                                ; CODE XREF: CRecordVector<unsigned __int64>::Reserve(uint)+51j
.text:00000A8F                 mov     ecx, [ebp+var_4]
.text:00000A92                 mov     edx, [ecx]
.text:00000A94                 mov     [ebp+var_10], edx
.text:00000A97                 mov     eax, [ebp+var_10]
.text:00000A9A                 push    eax             ; void *
.text:00000A9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00000AA0                 add     esp, 4
.text:00000AA3                 mov     ecx, [ebp+var_4]
.text:00000AA6                 mov     edx, [ebp+Dst]
.text:00000AA9                 mov     [ecx], edx
.text:00000AAB                 mov     eax, [ebp+var_4]
.text:00000AAE                 mov     ecx, [ebp+arg_0]
.text:00000AB1                 mov     [eax+8], ecx
.text:00000AB4
.text:00000AB4 loc_AB4:                                ; CODE XREF: CRecordVector<unsigned __int64>::Reserve(uint)+23j
.text:00000AB4                 add     esp, 10h
.text:00000AB7                 cmp     ebp, esp
.text:00000AB9                 call    __RTC_CheckEsp
.text:00000ABE                 mov     esp, ebp
.text:00000AC0                 pop     ebp
.text:00000AC1                 retn    4
.text:00000AC1 ?Reserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:00000AC1
.text:00000AC1 _text           ends
.text:00000AC1
UNDEF:00000AD0 ; ===========================================================================
UNDEF:00000AD0
UNDEF:00000AD0 ; Segment type: Externs
UNDEF:00000AD0 ; UNDEF
UNDEF:00000AD0                 extrn ___security_cookie:near
UNDEF:00000AD0                                         ; DATA XREF: NArchive::N7z::CHandler::FillPopIDs(void)+2Br
UNDEF:00000AD4                 extrn ___CxxFrameHandler3:near
UNDEF:00000AD4                                         ; CODE XREF: __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ+16j
UNDEF:00000AD8 ; __fastcall __security_check_cookie(x)
UNDEF:00000AD8                 extrn @__security_check_cookie@4:near
UNDEF:00000AD8                                         ; CODE XREF: __ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ+Cp
UNDEF:00000ADC                 extrn __RTC_CheckEsp:near
UNDEF:00000ADC                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+203p
UNDEF:00000ADC                                         ; NArchive::N7z::CopyOneItem(CRecordVector<unsigned __int64> &,CRecordVector<unsigned __int64> &,uint)+89p ...
UNDEF:00000AE0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00000AE0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00000AE0                                         ; CODE XREF: NArchive::N7z::CHandler::FillPopIDs(void)+1ECp
UNDEF:00000AE4                 extrn __RTC_Shutdown:near
UNDEF:00000AE4                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000AE8                 extrn __RTC_InitBase:near
UNDEF:00000AE8                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000AEC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000AEC                 extrn _memcpy:near      ; CODE XREF: CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(CRecordVector<unsigned __int64> const &)+98p
UNDEF:00000AEC                                         ; CRecordVector<unsigned __int64>::operator+=(CRecordVector<unsigned __int64> const &)+56p ...
UNDEF:00000AF0 ; void *__cdecl operator new(unsigned int)
UNDEF:00000AF0                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(CRecordVector<unsigned __int64> const &)+60p
UNDEF:00000AF0                                         ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)+59p ...
UNDEF:00000AF4 ; void __cdecl operator delete(void *)
UNDEF:00000AF4                 extrn ??3@YAXPAX@Z:near ; CODE XREF: CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)+23p
UNDEF:00000AF4                                         ; CRecordVector<unsigned __int64>::ReserveOnePosition(void)+9Bp ...
UNDEF:00000AF8 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00000AF8                 extrn __imp__memmove:near
UNDEF:00000AF8                                         ; CODE XREF: CRecordVector<unsigned __int64>::MoveItems(uint,uint)+36p
UNDEF:00000AF8                                         ; DATA XREF: CRecordVector<unsigned __int64>::MoveItems(uint,uint)+36r
UNDEF:00000AF8
UNDEF:00000AF8
UNDEF:00000AF8                 end