.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : 33354F2A4285D3142DAB7454E209D8BD
.rdata:00000000 ; Input CRC32 : 87370034
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\TarHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kProps         db 3                    ; DATA XREF: NArchive::NTar::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000001 ; struct AString unk_1
.rdata:00000001 unk_1           db    6                 ; DATA XREF: NArchive::NTar::CItem::IsDir(void):$LN1o
.rdata:00000002                 db    7
.rdata:00000003                 db    8
.rdata:00000004                 db  0Ch
.rdata:00000005                 db  35h ; 5
.rdata:00000006                 db  19h
.rdata:00000007                 db  1Ah
.rdata:00000008                 db  36h ; 6
.rdata:00000009                 db  5Ah ; Z
.rdata:0000000A                 db    0
.rdata:0000000B                 db    0
.rdata:0000000C _kArcProps      db 2Dh                  ; DATA XREF: NArchive::NTar::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:0000000D                 db  53h ; S
.rdata:0000000E                 db    0
.rdata:0000000F                 db    0
.rdata:00000010 $SG71186        db  4Fh ; O             ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *):loc_236o
.rdata:00000011                 db  45h ; E
.rdata:00000012                 db  4Dh ; M
.rdata:00000013                 db    0
.rdata:00000014 $SG71188        db 'UTF-8',0            ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *):loc_23Fo
.rdata:0000001A                 align 4
.rdata:0000001C ; wchar_t _SG71307
.rdata:0000001C $SG71307:                               ; DATA XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5B7o
.rdata:0000001C                 unicode 0, <.tar>,0
.rdata:00000026                 align 4
.rdata:00000028 ; char _SG71839[]
.rdata:00000028 $SG71839        db 'cp',0               ; DATA XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_2C62o
.rdata:0000002B                 align 4
.rdata:0000002C $SG71843        db    0                 ; DATA XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+10Do
.rdata:0000002D                 db    0
.rdata:0000002E                 align 10h
.rdata:0000002E _rdata          ends
.rdata:0000002E
.text:00000030 ; ===========================================================================
.text:00000030
.text:00000030 ; Segment type: Pure code
.text:00000030 ; Segment permissions: Read/Execute
.text:00000030 _text           segment para public 'CODE' use32
.text:00000030                 assume cs:_text
.text:00000030                 ;org 30h
.text:00000030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000030
.text:00000030 ; =============== S U B R O U T I N E =======================================
.text:00000030
.text:00000030 ; Attributes: bp-based frame
.text:00000030
.text:00000030 ; __int32 __stdcall NArchive::NTar::CHandler::GetNumberOfProperties(NArchive::NTar::CHandler *this, unsigned int *)
.text:00000030                 public ?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z
.text:00000030 ?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z proc near
.text:00000030                                         ; DATA XREF: .rdata:000035E4o
.text:00000030
.text:00000030 this            = dword ptr  8
.text:00000030 arg_4           = dword ptr  0Ch
.text:00000030
.text:00000030                 push    ebp
.text:00000031                 mov     ebp, esp
.text:00000033                 mov     eax, [ebp+arg_4]
.text:00000036                 mov     dword ptr [eax], 0Ah
.text:0000003C                 xor     eax, eax
.text:0000003E                 pop     ebp
.text:0000003F
.text:0000003F locret_3F:                              ; DATA XREF: .xdata$x:__catchsym$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2o
.text:0000003F                                         ; .xdata$x:__catchsym$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3o ...
.text:0000003F                 retn    8
.text:0000003F ?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z endp
.text:0000003F
.text:0000003F ; ---------------------------------------------------------------------------
.text:00000042                 align 10h
.text:00000050
.text:00000050 ; =============== S U B R O U T I N E =======================================
.text:00000050
.text:00000050 ; Attributes: bp-based frame
.text:00000050
.text:00000050 ; __int32 __stdcall NArchive::NTar::CHandler::GetPropertyInfo(NArchive::NTar::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000050                 public ?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000050 ?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000050                                         ; DATA XREF: .rdata:000035E8o
.text:00000050
.text:00000050 this            = dword ptr  8
.text:00000050 arg_4           = dword ptr  0Ch
.text:00000050 arg_8           = dword ptr  10h
.text:00000050 arg_C           = dword ptr  14h
.text:00000050 arg_10          = dword ptr  18h
.text:00000050
.text:00000050                 push    ebp
.text:00000051                 mov     ebp, esp
.text:00000053                 cmp     [ebp+arg_4], 0Ah
.text:00000057                 jb      short loc_60
.text:00000059                 mov     eax, 80070057h
.text:0000005E                 jmp     short loc_8D
.text:00000060 ; ---------------------------------------------------------------------------
.text:00000060
.text:00000060 loc_60:                                 ; CODE XREF: NArchive::NTar::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000060                 mov     eax, [ebp+arg_4]
.text:00000063                 movzx   ecx, _kProps[eax]
.text:0000006A                 mov     edx, [ebp+arg_C]
.text:0000006D                 mov     [edx], ecx
.text:0000006F                 mov     eax, [ebp+arg_C]
.text:00000072                 mov     ecx, [eax]
.text:00000074                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:0000007C                 mov     eax, [ebp+arg_10]
.text:0000007F                 mov     [eax], dx
.text:00000082                 mov     ecx, [ebp+arg_8]
.text:00000085                 mov     dword ptr [ecx], 0
.text:0000008B                 xor     eax, eax
.text:0000008D
.text:0000008D loc_8D:                                 ; CODE XREF: NArchive::NTar::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:0000008D                 pop     ebp
.text:0000008E                 retn    14h
.text:0000008E ?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:0000008E
.text:0000008E ; ---------------------------------------------------------------------------
.text:00000091                 align 10h
.text:000000A0
.text:000000A0 ; =============== S U B R O U T I N E =======================================
.text:000000A0
.text:000000A0 ; Attributes: bp-based frame
.text:000000A0
.text:000000A0 ; __int32 __stdcall NArchive::NTar::CHandler::GetNumberOfArchiveProperties(NArchive::NTar::CHandler *this, unsigned int *)
.text:000000A0                 public ?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z
.text:000000A0 ?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z proc near
.text:000000A0                                         ; DATA XREF: .rdata:000035ECo
.text:000000A0
.text:000000A0 this            = dword ptr  8
.text:000000A0 arg_4           = dword ptr  0Ch
.text:000000A0
.text:000000A0                 push    ebp
.text:000000A1                 mov     ebp, esp
.text:000000A3                 mov     eax, [ebp+arg_4]
.text:000000A6                 mov     dword ptr [eax], 2
.text:000000AC                 xor     eax, eax
.text:000000AE                 pop     ebp
.text:000000AF                 retn    8
.text:000000AF ?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z endp
.text:000000AF
.text:000000AF ; ---------------------------------------------------------------------------
.text:000000B2                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __int32 __stdcall NArchive::NTar::CHandler::GetArchivePropertyInfo(NArchive::NTar::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:000000C0                 public ?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:000000C0 ?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:000000C0                                         ; DATA XREF: .rdata:000035F0o
.text:000000C0
.text:000000C0 this            = dword ptr  8
.text:000000C0 arg_4           = dword ptr  0Ch
.text:000000C0 arg_8           = dword ptr  10h
.text:000000C0 arg_C           = dword ptr  14h
.text:000000C0 arg_10          = dword ptr  18h
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 cmp     [ebp+arg_4], 2
.text:000000C7                 jb      short loc_D0
.text:000000C9                 mov     eax, 80070057h
.text:000000CE                 jmp     short loc_FD
.text:000000D0 ; ---------------------------------------------------------------------------
.text:000000D0
.text:000000D0 loc_D0:                                 ; CODE XREF: NArchive::NTar::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:000000D0                 mov     eax, [ebp+arg_4]
.text:000000D3                 movzx   ecx, _kArcProps[eax]
.text:000000DA                 mov     edx, [ebp+arg_C]
.text:000000DD                 mov     [edx], ecx
.text:000000DF                 mov     eax, [ebp+arg_C]
.text:000000E2                 mov     ecx, [eax]
.text:000000E4                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000000EC                 mov     eax, [ebp+arg_10]
.text:000000EF                 mov     [eax], dx
.text:000000F2                 mov     ecx, [ebp+arg_8]
.text:000000F5                 mov     dword ptr [ecx], 0
.text:000000FB                 xor     eax, eax
.text:000000FD
.text:000000FD loc_FD:                                 ; CODE XREF: NArchive::NTar::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000000FD                 pop     ebp
.text:000000FE                 retn    14h
.text:000000FE ?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000000FE
.text:000000FE ; ---------------------------------------------------------------------------
.text:00000101                 align 10h
.text:00000110
.text:00000110 ; =============== S U B R O U T I N E =======================================
.text:00000110
.text:00000110 ; Attributes: bp-based frame
.text:00000110
.text:00000110 ; __int32 __stdcall NArchive::NTar::CHandler::GetArchiveProperty(NArchive::NTar::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:00000110                 public ?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:00000110 ?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:00000110                                         ; DATA XREF: .rdata:000035E0o
.text:00000110
.text:00000110 var_4C          = dword ptr -4Ch
.text:00000110 var_48          = dword ptr -48h
.text:00000110 var_44          = dword ptr -44h
.text:00000110 var_40          = dword ptr -40h
.text:00000110 var_38          = byte ptr -38h
.text:00000110 var_24          = dword ptr -24h
.text:00000110 var_20          = dword ptr -20h
.text:00000110 var_18          = byte ptr -18h
.text:00000110 var_4           = dword ptr -4
.text:00000110 this            = dword ptr  8
.text:00000110 arg_4           = dword ptr  0Ch
.text:00000110 arg_8           = dword ptr  10h
.text:00000110
.text:00000110                 push    ebp
.text:00000111                 mov     ebp, esp
.text:00000113                 sub     esp, 4Ch
.text:00000116                 push    edi
.text:00000117                 lea     edi, [ebp+var_4C]
.text:0000011A                 mov     ecx, 13h
.text:0000011F                 mov     eax, 0CCCCCCCCh
.text:00000124                 rep stosd
.text:00000126                 mov     eax, dword ptr ds:___security_cookie
.text:0000012B                 xor     eax, ebp
.text:0000012D                 mov     [ebp+var_4], eax
.text:00000130                 lea     ecx, [ebp+var_18] ; this
.text:00000133                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00000138                 mov     eax, [ebp+arg_4]
.text:0000013B                 mov     [ebp+var_44], eax
.text:0000013E                 mov     ecx, [ebp+var_44]
.text:00000141                 sub     ecx, 2Ch ; ','
.text:00000144                 mov     [ebp+var_44], ecx
.text:00000147                 cmp     [ebp+var_44], 27h ; ''' ; switch 40 cases
.text:0000014B                 ja      $LN19           ; jumptable 0000015B default case
.text:00000151                 mov     edx, [ebp+var_44]
.text:00000154                 movzx   eax, ds:$LN23[edx]
.text:0000015B                 jmp     ds:$LN28[eax*4] ; switch jump
.text:00000162 ; ---------------------------------------------------------------------------
.text:00000162
.text:00000162 $LN18:                                  ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bj
.text:00000162                                         ; DATA XREF: .text:$LN28o
.text:00000162                 mov     ecx, [ebp+this] ; jumptable 0000015B case 0
.text:00000165                 movzx   edx, byte ptr [ecx+0D0h]
.text:0000016C                 test    edx, edx
.text:0000016E                 jz      short loc_189
.text:00000170                 mov     eax, [ebp+this]
.text:00000173                 mov     ecx, [eax+0C4h]
.text:00000179                 push    ecx
.text:0000017A                 mov     edx, [eax+0C0h]
.text:00000180                 push    edx
.text:00000181                 lea     ecx, [ebp+var_18]
.text:00000184                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000189
.text:00000189 loc_189:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5Ej
.text:00000189                 jmp     $LN19           ; jumptable 0000015B default case
.text:0000018E ; ---------------------------------------------------------------------------
.text:0000018E
.text:0000018E $LN16:                                  ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bj
.text:0000018E                                         ; DATA XREF: .text:$LN28o
.text:0000018E                 mov     eax, [ebp+this] ; jumptable 0000015B case 1
.text:00000191                 movzx   ecx, byte ptr [eax+0D0h]
.text:00000198                 test    ecx, ecx
.text:0000019A                 jz      short loc_1B5
.text:0000019C                 mov     edx, [ebp+this]
.text:0000019F                 mov     eax, [edx+0CCh]
.text:000001A5                 push    eax
.text:000001A6                 mov     ecx, [edx+0C8h]
.text:000001AC                 push    ecx
.text:000001AD                 lea     ecx, [ebp+var_18]
.text:000001B0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000001B5
.text:000001B5 loc_1B5:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+8Aj
.text:000001B5                 jmp     $LN19           ; jumptable 0000015B default case
.text:000001BA ; ---------------------------------------------------------------------------
.text:000001BA
.text:000001BA $LN14:                                  ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bj
.text:000001BA                                         ; DATA XREF: .text:$LN28o
.text:000001BA                 mov     [ebp+var_20], 0 ; jumptable 0000015B case 27
.text:000001C1                 mov     edx, [ebp+this]
.text:000001C4                 movzx   eax, byte ptr [edx+0D8h]
.text:000001CB                 test    eax, eax
.text:000001CD                 jnz     short loc_1DA
.text:000001CF                 mov     ecx, [ebp+var_20]
.text:000001D2                 or      ecx, 1
.text:000001D5                 mov     [ebp+var_20], ecx
.text:000001D8                 jmp     short loc_204
.text:000001DA ; ---------------------------------------------------------------------------
.text:000001DA
.text:000001DA loc_1DA:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+BDj
.text:000001DA                 mov     edx, [ebp+this]
.text:000001DD                 mov     eax, [edx+0D4h]
.text:000001E3                 mov     [ebp+var_48], eax
.text:000001E6                 cmp     [ebp+var_48], 1
.text:000001EA                 jz      short loc_1FD
.text:000001EC                 cmp     [ebp+var_48], 2
.text:000001F0                 jz      short loc_1F4
.text:000001F2                 jmp     short loc_204
.text:000001F4 ; ---------------------------------------------------------------------------
.text:000001F4
.text:000001F4 loc_1F4:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+E0j
.text:000001F4                 mov     [ebp+var_20], 20h ; ' '
.text:000001FB                 jmp     short loc_204
.text:000001FD ; ---------------------------------------------------------------------------
.text:000001FD
.text:000001FD loc_1FD:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+DAj
.text:000001FD                 mov     [ebp+var_20], 2
.text:00000204
.text:00000204 loc_204:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+C8j
.text:00000204                                         ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+E2j ...
.text:00000204                 mov     ecx, [ebp+var_20]
.text:00000207                 push    ecx
.text:00000208                 lea     ecx, [ebp+var_18]
.text:0000020B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00000210                 jmp     short $LN19     ; jumptable 0000015B default case
.text:00000212 ; ---------------------------------------------------------------------------
.text:00000212
.text:00000212 $LN7:                                   ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bj
.text:00000212                                         ; DATA XREF: .text:$LN28o
.text:00000212                 mov     [ebp+var_24], 0 ; jumptable 0000015B case 39
.text:00000219                 mov     edx, [ebp+this]
.text:0000021C                 mov     eax, [edx+0E4h]
.text:00000222                 mov     [ebp+var_4C], eax
.text:00000225                 cmp     [ebp+var_4C], 1
.text:00000229                 jz      short loc_236
.text:0000022B                 cmp     [ebp+var_4C], 0FDE9h
.text:00000232                 jz      short loc_23F
.text:00000234                 jmp     short loc_246
.text:00000236 ; ---------------------------------------------------------------------------
.text:00000236
.text:00000236 loc_236:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+119j
.text:00000236                 mov     [ebp+var_24], offset $SG71186
.text:0000023D                 jmp     short loc_246
.text:0000023F ; ---------------------------------------------------------------------------
.text:0000023F
.text:0000023F loc_23F:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+122j
.text:0000023F                 mov     [ebp+var_24], offset $SG71188 ; "UTF-8"
.text:00000246
.text:00000246 loc_246:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+124j
.text:00000246                                         ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+12Dj
.text:00000246                 cmp     [ebp+var_24], 0
.text:0000024A                 jz      short loc_25A
.text:0000024C                 mov     ecx, [ebp+var_24]
.text:0000024F                 push    ecx
.text:00000250                 lea     ecx, [ebp+var_18]
.text:00000253                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000258                 jmp     short $LN19     ; jumptable 0000015B default case
.text:0000025A ; ---------------------------------------------------------------------------
.text:0000025A
.text:0000025A loc_25A:                                ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+13Aj
.text:0000025A                 lea     edx, [ebp+var_38]
.text:0000025D                 push    edx             ; char *
.text:0000025E                 mov     eax, [ebp+this]
.text:00000261                 mov     ecx, [eax+0E4h]
.text:00000267                 push    ecx             ; unsigned int
.text:00000268                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000026D                 lea     edx, [ebp+var_38]
.text:00000270                 push    edx
.text:00000271                 lea     ecx, [ebp+var_18]
.text:00000274                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000279
.text:00000279 $LN19:                                  ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+3Bj
.text:00000279                                         ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Bj ...
.text:00000279                 mov     eax, [ebp+arg_8] ; jumptable 0000015B default case
.text:0000027C                 push    eax             ; struct tagPROPVARIANT *
.text:0000027D                 lea     ecx, [ebp+var_18] ; this
.text:00000280                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:00000285                 mov     [ebp+var_40], 0
.text:0000028C                 lea     ecx, [ebp+var_18] ; this
.text:0000028F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000294                 mov     eax, [ebp+var_40]
.text:00000297                 push    edx
.text:00000298                 mov     ecx, ebp
.text:0000029A                 push    eax
.text:0000029B                 lea     edx, $LN27
.text:000002A1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002A6                 pop     eax
.text:000002A7                 pop     edx
.text:000002A8                 pop     edi
.text:000002A9                 mov     ecx, [ebp+var_4]
.text:000002AC                 xor     ecx, ebp
.text:000002AE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002B3                 add     esp, 4Ch
.text:000002B6                 cmp     ebp, esp
.text:000002B8                 call    __RTC_CheckEsp
.text:000002BD                 mov     esp, ebp
.text:000002BF                 pop     ebp
.text:000002C0                 retn    0Ch
.text:000002C0 ?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:000002C0
.text:000002C0 ; ---------------------------------------------------------------------------
.text:000002C3                 align 4
.text:000002C4 $LN27           dd 2                    ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+18Bo
.text:000002C8                 dd offset $LN26
.text:000002CC $LN26           dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:000002C8o
.text:000002D4                 dd offset $LN24         ; "prop"
.text:000002D8                 dd 0FFFFFFC8h, 10h
.text:000002E0                 dd offset $LN25
.text:000002E4 $LN25           db 73h, 7Ah, 0          ; DATA XREF: .text:000002E0o
.text:000002E7 $LN24           db 'prop',0             ; DATA XREF: .text:000002D4o
.text:000002EC $LN28           dd offset $LN18         ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+4Br
.text:000002EC                 dd offset $LN16         ; jump table for switch statement
.text:000002EC                 dd offset $LN14
.text:000002EC                 dd offset $LN7
.text:000002EC                 dd offset $LN19
.text:00000300 $LN23           db      0,     1,     4,     4
.text:00000300                                         ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+44r
.text:00000300                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     2
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     4
.text:00000300                 db      4,     4,     4,     3
.text:00000328                 align 10h
.text:00000330
.text:00000330 ; =============== S U B R O U T I N E =======================================
.text:00000330
.text:00000330 ; Attributes: bp-based frame
.text:00000330
.text:00000330 ; __int32 __thiscall NArchive::NTar::CHandler::ReadItem2(NArchive::NTar::CHandler *this, struct ISequentialInStream *, struct ISequentialInStream *, struct NArchive::NTar::CItemEx *)
.text:00000330                 public ?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z
.text:00000330 ?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z proc near
.text:00000330                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+10Cp
.text:00000330                                         ; NArchive::NTar::CHandler::SkipTo(uint)+137p
.text:00000330
.text:00000330 var_8           = dword ptr -8
.text:00000330 var_4           = dword ptr -4
.text:00000330 arg_0           = dword ptr  8
.text:00000330 arg_4           = dword ptr  0Ch
.text:00000330 arg_8           = dword ptr  10h
.text:00000330
.text:00000330                 push    ebp
.text:00000331                 mov     ebp, esp
.text:00000333                 sub     esp, 8
.text:00000336                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000033D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000344                 mov     [ebp+var_4], ecx
.text:00000347                 mov     eax, [ebp+arg_8]
.text:0000034A                 mov     ecx, [ebp+var_4]
.text:0000034D                 mov     edx, [ecx+0C0h]
.text:00000353                 mov     [eax+78h], edx
.text:00000356                 mov     ecx, [ecx+0C4h]
.text:0000035C                 mov     [eax+7Ch], ecx
.text:0000035F                 mov     edx, [ebp+var_4]
.text:00000362                 add     edx, 0D4h ; '+'
.text:00000368                 push    edx             ; struct NArchive::NTar::CItemEx *
.text:00000369                 mov     eax, [ebp+arg_8]
.text:0000036C                 push    eax             ; bool *
.text:0000036D                 mov     ecx, [ebp+arg_4]
.text:00000370                 push    ecx             ; struct ISequentialInStream *
.text:00000371                 mov     edx, [ebp+arg_0]
.text:00000374                 push    edx             ; this
.text:00000375                 call    ?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)
.text:0000037A                 mov     [ebp+var_8], eax
.text:0000037D                 cmp     [ebp+var_8], 0
.text:00000381                 jz      short loc_388
.text:00000383                 mov     eax, [ebp+var_8]
.text:00000386                 jmp     short loc_3FF
.text:00000388 ; ---------------------------------------------------------------------------
.text:00000388
.text:00000388 loc_388:                                ; CODE XREF: NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+51j
.text:00000388                 mov     eax, [ebp+arg_4]
.text:0000038B                 movzx   ecx, byte ptr [eax]
.text:0000038E                 test    ecx, ecx
.text:00000390                 jz      short loc_3AB
.text:00000392                 mov     ecx, [ebp+arg_8] ; this
.text:00000395                 call    ?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsPaxExtendedHeader(void)
.text:0000039A                 movzx   edx, al
.text:0000039D                 test    edx, edx
.text:0000039F                 jz      short loc_3AB
.text:000003A1                 mov     eax, [ebp+var_4]
.text:000003A4                 mov     byte ptr [eax+0D9h], 1
.text:000003AB
.text:000003AB loc_3AB:                                ; CODE XREF: NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+60j
.text:000003AB                                         ; NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+6Fj
.text:000003AB                 mov     ecx, [ebp+arg_8]
.text:000003AE                 mov     edx, [ecx+80h]
.text:000003B4                 xor     eax, eax
.text:000003B6                 mov     ecx, [ebp+var_4]
.text:000003B9                 add     edx, [ecx+0C0h]
.text:000003BF                 adc     eax, [ecx+0C4h]
.text:000003C5                 mov     ecx, [ebp+var_4]
.text:000003C8                 mov     [ecx+0C0h], edx
.text:000003CE                 mov     [ecx+0C4h], eax
.text:000003D4                 mov     edx, [ebp+arg_8]
.text:000003D7                 mov     eax, [edx+80h]
.text:000003DD                 xor     ecx, ecx
.text:000003DF                 mov     edx, [ebp+var_4]
.text:000003E2                 add     eax, [edx+0C8h]
.text:000003E8                 adc     ecx, [edx+0CCh]
.text:000003EE                 mov     edx, [ebp+var_4]
.text:000003F1                 mov     [edx+0C8h], eax
.text:000003F7                 mov     [edx+0CCh], ecx
.text:000003FD                 xor     eax, eax
.text:000003FF
.text:000003FF loc_3FF:                                ; CODE XREF: NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+56j
.text:000003FF                 add     esp, 8
.text:00000402                 cmp     ebp, esp
.text:00000404                 call    __RTC_CheckEsp
.text:00000409                 mov     esp, ebp
.text:0000040B                 pop     ebp
.text:0000040C                 retn    0Ch
.text:0000040C ?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z endp
.text:0000040C
.text:0000040C ; ---------------------------------------------------------------------------
.text:0000040F                 align 10h
.text:00000410
.text:00000410 ; =============== S U B R O U T I N E =======================================
.text:00000410
.text:00000410 ; Attributes: bp-based frame
.text:00000410
.text:00000410 ; __int32 __thiscall NArchive::NTar::CHandler::Open2(NArchive::NTar::CHandler *this, struct IInStream *, struct IArchiveOpenCallback *)
.text:00000410                 public ?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text:00000410 ?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z proc near
.text:00000410                                         ; CODE XREF: NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Ap
.text:00000410
.text:00000410 var_140         = dword ptr -140h
.text:00000410 var_13C         = dword ptr -13Ch
.text:00000410 var_138         = dword ptr -138h
.text:00000410 var_134         = dword ptr -134h
.text:00000410 var_130         = dword ptr -130h
.text:00000410 var_12C         = dword ptr -12Ch
.text:00000410 var_128         = dword ptr -128h
.text:00000410 var_124         = dword ptr -124h
.text:00000410 var_120         = dword ptr -120h
.text:00000410 var_11C         = dword ptr -11Ch
.text:00000410 var_118         = dword ptr -118h
.text:00000410 var_114         = dword ptr -114h
.text:00000410 var_10C         = word ptr -10Ch
.text:00000410 var_104         = dword ptr -104h
.text:00000410 var_F4          = byte ptr -0F4h
.text:00000410 var_EC          = dword ptr -0ECh
.text:00000410 var_E4          = dword ptr -0E4h
.text:00000410 var_E0          = dword ptr -0E0h
.text:00000410 var_D8          = dword ptr -0D8h
.text:00000410 var_D4          = dword ptr -0D4h
.text:00000410 var_D0          = dword ptr -0D0h
.text:00000410 var_C5          = byte ptr -0C5h
.text:00000410 var_BC          = byte ptr -0BCh
.text:00000410 var_80          = byte ptr -80h
.text:00000410 var_74          = byte ptr -74h
.text:00000410 var_68          = byte ptr -68h
.text:00000410 var_38          = byte ptr -38h
.text:00000410 var_37          = byte ptr -37h
.text:00000410 var_2D          = byte ptr -2Dh
.text:00000410 var_2C          = dword ptr -2Ch
.text:00000410 var_28          = dword ptr -28h
.text:00000410 var_20          = dword ptr -20h
.text:00000410 var_1C          = dword ptr -1Ch
.text:00000410 var_14          = dword ptr -14h
.text:00000410 var_10          = dword ptr -10h
.text:00000410 var_C           = dword ptr -0Ch
.text:00000410 var_4           = dword ptr -4
.text:00000410 arg_0           = dword ptr  8
.text:00000410 arg_4           = dword ptr  0Ch
.text:00000410
.text:00000410                 push    ebp
.text:00000411                 mov     ebp, esp
.text:00000413                 push    0FFFFFFFFh
.text:00000415                 push    offset __ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text:0000041A                 mov     eax, large fs:0
.text:00000420                 push    eax
.text:00000421                 sub     esp, 134h
.text:00000427                 push    esi
.text:00000428                 push    edi
.text:00000429                 push    ecx
.text:0000042A                 lea     edi, [ebp+var_140]
.text:00000430                 mov     ecx, 4Dh ; 'M'
.text:00000435                 mov     eax, 0CCCCCCCCh
.text:0000043A                 rep stosd
.text:0000043C                 pop     ecx
.text:0000043D                 mov     eax, dword ptr ds:___security_cookie
.text:00000442                 xor     eax, ebp
.text:00000444                 mov     [ebp+var_10], eax
.text:00000447                 push    eax
.text:00000448                 lea     eax, [ebp+var_C]
.text:0000044B                 mov     large fs:0, eax
.text:00000451                 mov     [ebp+var_14], ecx
.text:00000454                 mov     [ebp+var_20], 0
.text:0000045B                 mov     [ebp+var_1C], 0
.text:00000462                 mov     esi, esp
.text:00000464                 lea     eax, [ebp+var_20]
.text:00000467                 push    eax
.text:00000468                 push    2
.text:0000046A                 push    0
.text:0000046C                 push    0
.text:0000046E                 mov     ecx, [ebp+arg_0]
.text:00000471                 mov     edx, [ecx]
.text:00000473                 mov     eax, [ebp+arg_0]
.text:00000476                 push    eax
.text:00000477                 mov     ecx, [edx+10h]
.text:0000047A                 call    ecx
.text:0000047C                 cmp     esi, esp
.text:0000047E                 call    __RTC_CheckEsp
.text:00000483                 mov     [ebp+var_28], eax
.text:00000486                 cmp     [ebp+var_28], 0
.text:0000048A                 jz      short loc_494
.text:0000048C                 mov     eax, [ebp+var_28]
.text:0000048F                 jmp     loc_A46
.text:00000494 ; ---------------------------------------------------------------------------
.text:00000494
.text:00000494 loc_494:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+7Aj
.text:00000494                 mov     esi, esp
.text:00000496                 push    0
.text:00000498                 push    0
.text:0000049A                 push    0
.text:0000049C                 push    0
.text:0000049E                 mov     edx, [ebp+arg_0]
.text:000004A1                 mov     eax, [edx]
.text:000004A3                 mov     ecx, [ebp+arg_0]
.text:000004A6                 push    ecx
.text:000004A7                 mov     edx, [eax+10h]
.text:000004AA                 call    edx
.text:000004AC                 cmp     esi, esp
.text:000004AE                 call    __RTC_CheckEsp
.text:000004B3                 mov     [ebp+var_2C], eax
.text:000004B6                 cmp     [ebp+var_2C], 0
.text:000004BA                 jz      short loc_4C4
.text:000004BC                 mov     eax, [ebp+var_2C]
.text:000004BF                 jmp     loc_A46
.text:000004C4 ; ---------------------------------------------------------------------------
.text:000004C4
.text:000004C4 loc_4C4:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+AAj
.text:000004C4                 mov     eax, [ebp+var_14]
.text:000004C7                 mov     byte ptr [eax+0D0h], 1
.text:000004CE                 mov     [ebp+var_2D], 1
.text:000004D2                 mov     ecx, [ebp+var_14]
.text:000004D5                 movzx   edx, byte ptr [ecx+0DAh]
.text:000004DC                 test    edx, edx
.text:000004DE                 jnz     short loc_4F5
.text:000004E0                 movzx   eax, [ebp+var_2D]
.text:000004E4                 test    eax, eax
.text:000004E6                 jnz     short loc_4F5
.text:000004E8                 mov     ecx, [ebp+var_14]
.text:000004EB                 mov     dword ptr [ecx+0E0h], 1
.text:000004F5
.text:000004F5 loc_4F5:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+CEj
.text:000004F5                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+D6j ...
.text:000004F5                 lea     ecx, [ebp+var_BC] ; this
.text:000004FB                 call    ??0CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::CItemEx(void)
.text:00000500                 mov     [ebp+var_4], 0
.text:00000507                 lea     edx, [ebp+var_BC]
.text:0000050D                 push    edx             ; struct NArchive::NTar::CItemEx *
.text:0000050E                 lea     eax, [ebp+var_C5]
.text:00000514                 push    eax             ; struct ISequentialInStream *
.text:00000515                 mov     ecx, [ebp+arg_0]
.text:00000518                 push    ecx             ; struct ISequentialInStream *
.text:00000519                 mov     ecx, [ebp+var_14] ; this
.text:0000051C                 call    ?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ; NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)
.text:00000521                 mov     [ebp+var_D0], eax
.text:00000527                 cmp     [ebp+var_D0], 0
.text:0000052E                 jz      short loc_559
.text:00000530                 mov     edx, [ebp+var_D0]
.text:00000536                 mov     [ebp+var_118], edx
.text:0000053C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000543                 lea     ecx, [ebp+var_BC] ; this
.text:00000549                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:0000054E                 mov     eax, [ebp+var_118]
.text:00000554                 jmp     loc_A46
.text:00000559 ; ---------------------------------------------------------------------------
.text:00000559
.text:00000559 loc_559:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+11Ej
.text:00000559                 movzx   eax, [ebp+var_C5]
.text:00000560                 test    eax, eax
.text:00000562                 jnz     short loc_57B
.text:00000564                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000056B                 lea     ecx, [ebp+var_BC] ; this
.text:00000571                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:00000576                 jmp     loc_7E3
.text:0000057B ; ---------------------------------------------------------------------------
.text:0000057B
.text:0000057B loc_57B:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+152j
.text:0000057B                 mov     ecx, [ebp+var_14]
.text:0000057E                 mov     byte ptr [ecx+0D8h], 1
.text:00000585                 lea     edx, [ebp+var_BC]
.text:0000058B                 push    edx             ; struct NArchive::NTar::CItemEx *
.text:0000058C                 mov     ecx, [ebp+var_14]
.text:0000058F                 add     ecx, 18h
.text:00000592                 call    ?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z ; CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)
.text:00000597                 mov     eax, [ebp+var_14]
.text:0000059A                 movzx   ecx, byte ptr [eax+0DAh]
.text:000005A1                 test    ecx, ecx
.text:000005A3                 jnz     short loc_61A
.text:000005A5                 movzx   edx, [ebp+var_2D]
.text:000005A9                 test    edx, edx
.text:000005AB                 jz      short loc_5C6
.text:000005AD                 movzx   eax, [ebp+var_38]
.text:000005B1                 push    eax             ; bool
.text:000005B2                 lea     ecx, [ebp+var_BC]
.text:000005B8                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000005BD                 push    eax             ; char *
.text:000005BE                 call    ?CheckUTF8@@YG_NPBD_N@Z ; CheckUTF8(char const *,bool)
.text:000005C3                 mov     [ebp+var_2D], al
.text:000005C6
.text:000005C6 loc_5C6:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+19Bj
.text:000005C6                 movzx   ecx, [ebp+var_2D]
.text:000005CA                 test    ecx, ecx
.text:000005CC                 jz      short loc_5E4
.text:000005CE                 movzx   edx, [ebp+var_37]
.text:000005D2                 push    edx             ; bool
.text:000005D3                 lea     ecx, [ebp+var_80]
.text:000005D6                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000005DB                 push    eax             ; char *
.text:000005DC                 call    ?CheckUTF8@@YG_NPBD_N@Z ; CheckUTF8(char const *,bool)
.text:000005E1                 mov     [ebp+var_2D], al
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1BCj
.text:000005E4                 movzx   eax, [ebp+var_2D]
.text:000005E8                 test    eax, eax
.text:000005EA                 jz      short loc_5FF
.text:000005EC                 push    0               ; bool
.text:000005EE                 lea     ecx, [ebp+var_74]
.text:000005F1                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000005F6                 push    eax             ; char *
.text:000005F7                 call    ?CheckUTF8@@YG_NPBD_N@Z ; CheckUTF8(char const *,bool)
.text:000005FC                 mov     [ebp+var_2D], al
.text:000005FF
.text:000005FF loc_5FF:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1DAj
.text:000005FF                 movzx   ecx, [ebp+var_2D]
.text:00000603                 test    ecx, ecx
.text:00000605                 jz      short loc_61A
.text:00000607                 push    0               ; bool
.text:00000609                 lea     ecx, [ebp+var_68]
.text:0000060C                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000611                 push    eax             ; char *
.text:00000612                 call    ?CheckUTF8@@YG_NPBD_N@Z ; CheckUTF8(char const *,bool)
.text:00000617                 mov     [ebp+var_2D], al
.text:0000061A
.text:0000061A loc_61A:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+193j
.text:0000061A                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1F5j
.text:0000061A                 mov     edx, [ebp+var_14]
.text:0000061D                 add     edx, 0C0h ; '+'
.text:00000623                 mov     esi, esp
.text:00000625                 push    edx
.text:00000626                 push    1
.text:00000628                 lea     ecx, [ebp+var_BC] ; this
.text:0000062E                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:00000633                 push    edx
.text:00000634                 push    eax
.text:00000635                 mov     eax, [ebp+arg_0]
.text:00000638                 mov     ecx, [eax]
.text:0000063A                 mov     edx, [ebp+arg_0]
.text:0000063D                 push    edx
.text:0000063E                 mov     eax, [ecx+10h]
.text:00000641                 call    eax
.text:00000643                 cmp     esi, esp
.text:00000645                 call    __RTC_CheckEsp
.text:0000064A                 mov     [ebp+var_D4], eax
.text:00000650                 cmp     [ebp+var_D4], 0
.text:00000657                 jz      short loc_682
.text:00000659                 mov     ecx, [ebp+var_D4]
.text:0000065F                 mov     [ebp+var_11C], ecx
.text:00000665                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000066C                 lea     ecx, [ebp+var_BC] ; this
.text:00000672                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:00000677                 mov     eax, [ebp+var_11C]
.text:0000067D                 jmp     loc_A46
.text:00000682 ; ---------------------------------------------------------------------------
.text:00000682
.text:00000682 loc_682:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+247j
.text:00000682                 mov     edx, [ebp+var_14]
.text:00000685                 mov     [ebp+var_13C], edx
.text:0000068B                 mov     eax, [ebp+var_13C]
.text:00000691                 mov     ecx, [eax+0C4h]
.text:00000697                 cmp     ecx, [ebp+var_1C]
.text:0000069A                 jb      short loc_6D3
.text:0000069C                 ja      short loc_6AF
.text:0000069E                 mov     edx, [ebp+var_13C]
.text:000006A4                 mov     eax, [edx+0C0h]
.text:000006AA                 cmp     eax, [ebp+var_20]
.text:000006AD                 jbe     short loc_6D3
.text:000006AF
.text:000006AF loc_6AF:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+28Cj
.text:000006AF                 mov     ecx, [ebp+var_14]
.text:000006B2                 mov     dword ptr [ecx+0D4h], 2
.text:000006BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006C3                 lea     ecx, [ebp+var_BC] ; this
.text:000006C9                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:000006CE                 jmp     loc_7E3
.text:000006D3 ; ---------------------------------------------------------------------------
.text:000006D3
.text:000006D3 loc_6D3:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+28Aj
.text:000006D3                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+29Dj
.text:000006D3                 cmp     [ebp+arg_4], 0
.text:000006D7                 jz      loc_7CC
.text:000006DD                 mov     ecx, [ebp+var_14]
.text:000006E0                 add     ecx, 18h
.text:000006E3                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:000006E8                 cmp     eax, 1
.text:000006EB                 jnz     short loc_742
.text:000006ED                 mov     esi, esp
.text:000006EF                 lea     edx, [ebp+var_20]
.text:000006F2                 push    edx
.text:000006F3                 push    0
.text:000006F5                 mov     eax, [ebp+arg_4]
.text:000006F8                 mov     ecx, [eax]
.text:000006FA                 mov     edx, [ebp+arg_4]
.text:000006FD                 push    edx
.text:000006FE                 mov     eax, [ecx+0Ch]
.text:00000701                 call    eax
.text:00000703                 cmp     esi, esp
.text:00000705                 call    __RTC_CheckEsp
.text:0000070A                 mov     [ebp+var_D8], eax
.text:00000710                 cmp     [ebp+var_D8], 0
.text:00000717                 jz      short loc_742
.text:00000719                 mov     ecx, [ebp+var_D8]
.text:0000071F                 mov     [ebp+var_120], ecx
.text:00000725                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000072C                 lea     ecx, [ebp+var_BC] ; this
.text:00000732                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:00000737                 mov     eax, [ebp+var_120]
.text:0000073D                 jmp     loc_A46
.text:00000742 ; ---------------------------------------------------------------------------
.text:00000742
.text:00000742 loc_742:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2DBj
.text:00000742                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+307j
.text:00000742                 mov     ecx, [ebp+var_14]
.text:00000745                 add     ecx, 18h
.text:00000748                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:0000074D                 and     eax, 3FFh
.text:00000752                 jnz     short loc_7CC
.text:00000754                 mov     ecx, [ebp+var_14]
.text:00000757                 add     ecx, 18h
.text:0000075A                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:0000075F                 xor     edx, edx
.text:00000761                 mov     [ebp+var_E4], eax
.text:00000767                 mov     [ebp+var_E0], edx
.text:0000076D                 mov     eax, [ebp+var_14]
.text:00000770                 add     eax, 0C0h ; '+'
.text:00000775                 mov     esi, esp
.text:00000777                 push    eax
.text:00000778                 lea     ecx, [ebp+var_E4]
.text:0000077E                 push    ecx
.text:0000077F                 mov     edx, [ebp+arg_4]
.text:00000782                 mov     eax, [edx]
.text:00000784                 mov     ecx, [ebp+arg_4]
.text:00000787                 push    ecx
.text:00000788                 mov     edx, [eax+10h]
.text:0000078B                 call    edx
.text:0000078D                 cmp     esi, esp
.text:0000078F                 call    __RTC_CheckEsp
.text:00000794                 mov     [ebp+var_EC], eax
.text:0000079A                 cmp     [ebp+var_EC], 0
.text:000007A1                 jz      short loc_7CC
.text:000007A3                 mov     eax, [ebp+var_EC]
.text:000007A9                 mov     [ebp+var_124], eax
.text:000007AF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007B6                 lea     ecx, [ebp+var_BC] ; this
.text:000007BC                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:000007C1                 mov     eax, [ebp+var_124]
.text:000007C7                 jmp     loc_A46
.text:000007CC ; ---------------------------------------------------------------------------
.text:000007CC
.text:000007CC loc_7CC:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2C7j
.text:000007CC                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+342j ...
.text:000007CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000007D3                 lea     ecx, [ebp+var_BC] ; this
.text:000007D9                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:000007DE                 jmp     loc_4F5
.text:000007E3 ; ---------------------------------------------------------------------------
.text:000007E3
.text:000007E3 loc_7E3:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+166j
.text:000007E3                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2BEj
.text:000007E3                 mov     ecx, [ebp+var_14]
.text:000007E6                 movzx   edx, byte ptr [ecx+0DAh]
.text:000007ED                 test    edx, edx
.text:000007EF                 jnz     short loc_806
.text:000007F1                 movzx   eax, [ebp+var_2D]
.text:000007F5                 test    eax, eax
.text:000007F7                 jnz     short loc_806
.text:000007F9                 mov     ecx, [ebp+var_14]
.text:000007FC                 mov     dword ptr [ecx+0E0h], 1
.text:00000806
.text:00000806 loc_806:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3DFj
.text:00000806                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3E7j
.text:00000806                 mov     edx, [ebp+var_14]
.text:00000809                 mov     eax, [ebp+var_14]
.text:0000080C                 mov     ecx, [eax+0E0h]
.text:00000812                 mov     [edx+0E4h], ecx
.text:00000818                 mov     ecx, [ebp+var_14]
.text:0000081B                 add     ecx, 18h
.text:0000081E                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:00000823                 test    eax, eax
.text:00000825                 jnz     loc_A3A
.text:0000082B                 mov     edx, [ebp+var_14]
.text:0000082E                 cmp     dword ptr [edx+0D4h], 0
.text:00000835                 jz      short loc_84B
.text:00000837                 mov     eax, [ebp+var_14]
.text:0000083A                 mov     byte ptr [eax+0D8h], 0
.text:00000841                 mov     eax, 1
.text:00000846                 jmp     loc_A46
.text:0000084B ; ---------------------------------------------------------------------------
.text:0000084B
.text:0000084B loc_84B:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+425j
.text:0000084B                 lea     ecx, [ebp+var_F4]
.text:00000851                 call    ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00000856                 mov     [ebp+var_4], 1
.text:0000085D                 cmp     [ebp+arg_4], 0
.text:00000861                 jnz     short loc_88A
.text:00000863                 mov     [ebp+var_128], 1
.text:0000086D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000874                 lea     ecx, [ebp+var_F4]
.text:0000087A                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:0000087F                 mov     eax, [ebp+var_128]
.text:00000885                 jmp     loc_A46
.text:0000088A ; ---------------------------------------------------------------------------
.text:0000088A
.text:0000088A loc_88A:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+451j
.text:0000088A                 lea     ecx, [ebp+var_F4]
.text:00000890                 call    ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&(void)
.text:00000895                 mov     esi, esp
.text:00000897                 push    eax
.text:00000898                 push    offset _IID_IArchiveOpenVolumeCallback
.text:0000089D                 mov     ecx, [ebp+arg_4]
.text:000008A0                 mov     edx, [ecx]
.text:000008A2                 mov     eax, [ebp+arg_4]
.text:000008A5                 push    eax
.text:000008A6                 mov     ecx, [edx]
.text:000008A8                 call    ecx
.text:000008AA                 cmp     esi, esp
.text:000008AC                 call    __RTC_CheckEsp
.text:000008B1                 lea     ecx, [ebp+var_F4]
.text:000008B7                 call    ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!(void)
.text:000008BC                 movzx   edx, al
.text:000008BF                 test    edx, edx
.text:000008C1                 jz      short loc_8EA
.text:000008C3                 mov     [ebp+var_12C], 1
.text:000008CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008D4                 lea     ecx, [ebp+var_F4]
.text:000008DA                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:000008DF                 mov     eax, [ebp+var_12C]
.text:000008E5                 jmp     loc_A46
.text:000008EA ; ---------------------------------------------------------------------------
.text:000008EA
.text:000008EA loc_8EA:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+4B1j
.text:000008EA                 lea     ecx, [ebp+var_10C] ; this
.text:000008F0                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000008F5                 mov     byte ptr [ebp+var_4], 2
.text:000008F9                 lea     ecx, [ebp+var_F4]
.text:000008FF                 call    ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->(void)
.text:00000904                 mov     [ebp+var_140], eax
.text:0000090A                 mov     esi, esp
.text:0000090C                 lea     eax, [ebp+var_10C]
.text:00000912                 push    eax
.text:00000913                 push    4
.text:00000915                 mov     ecx, [ebp+var_140]
.text:0000091B                 push    ecx
.text:0000091C                 mov     edx, [ebp+var_140]
.text:00000922                 mov     eax, [edx]
.text:00000924                 mov     ecx, [eax+0Ch]
.text:00000927                 call    ecx
.text:00000929                 cmp     esi, esp
.text:0000092B                 call    __RTC_CheckEsp
.text:00000930                 test    eax, eax
.text:00000932                 jz      short loc_96A
.text:00000934                 mov     [ebp+var_130], 1
.text:0000093E                 mov     byte ptr [ebp+var_4], 1
.text:00000942                 lea     ecx, [ebp+var_10C] ; this
.text:00000948                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000094D                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000954                 lea     ecx, [ebp+var_F4]
.text:0000095A                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:0000095F                 mov     eax, [ebp+var_130]
.text:00000965                 jmp     loc_A46
.text:0000096A ; ---------------------------------------------------------------------------
.text:0000096A
.text:0000096A loc_96A:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+522j
.text:0000096A                 movzx   edx, [ebp+var_10C]
.text:00000971                 cmp     edx, 8
.text:00000974                 jz      short loc_9AC
.text:00000976                 mov     [ebp+var_134], 1
.text:00000980                 mov     byte ptr [ebp+var_4], 1
.text:00000984                 lea     ecx, [ebp+var_10C] ; this
.text:0000098A                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000098F                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000996                 lea     ecx, [ebp+var_F4]
.text:0000099C                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:000009A1                 mov     eax, [ebp+var_134]
.text:000009A7                 jmp     loc_A46
.text:000009AC ; ---------------------------------------------------------------------------
.text:000009AC
.text:000009AC loc_9AC:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+564j
.text:000009AC                 mov     eax, [ebp+var_104]
.text:000009B2                 push    eax             ; wchar_t *
.text:000009B3                 call    ?MyStringLen@@YGIPB_W@Z ; MyStringLen(wchar_t const *)
.text:000009B8                 mov     [ebp+var_114], eax
.text:000009BE                 cmp     [ebp+var_114], 4
.text:000009C5                 jb      short loc_9E6
.text:000009C7                 push    offset $SG71307 ; ".tar"
.text:000009CC                 mov     ecx, [ebp+var_114]
.text:000009D2                 mov     edx, [ebp+var_104]
.text:000009D8                 lea     eax, [edx+ecx*2-8]
.text:000009DC                 push    eax             ; wchar_t *
.text:000009DD                 call    ?MyStringCompareNoCase@@YGHPB_W0@Z ; MyStringCompareNoCase(wchar_t const *,wchar_t const *)
.text:000009E2                 test    eax, eax
.text:000009E4                 jz      short loc_A19
.text:000009E6
.text:000009E6 loc_9E6:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5B5j
.text:000009E6                 mov     [ebp+var_138], 1
.text:000009F0                 mov     byte ptr [ebp+var_4], 1
.text:000009F4                 lea     ecx, [ebp+var_10C] ; this
.text:000009FA                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000009FF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A06                 lea     ecx, [ebp+var_F4]
.text:00000A0C                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00000A11                 mov     eax, [ebp+var_138]
.text:00000A17                 jmp     short loc_A46
.text:00000A19 ; ---------------------------------------------------------------------------
.text:00000A19
.text:00000A19 loc_A19:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5D4j
.text:00000A19                 mov     byte ptr [ebp+var_4], 1
.text:00000A1D                 lea     ecx, [ebp+var_10C] ; this
.text:00000A23                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000A28                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A2F                 lea     ecx, [ebp+var_F4]
.text:00000A35                 call    ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text:00000A3A
.text:00000A3A loc_A3A:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+415j
.text:00000A3A                 mov     ecx, [ebp+var_14]
.text:00000A3D                 mov     byte ptr [ecx+0D8h], 1
.text:00000A44                 xor     eax, eax
.text:00000A46
.text:00000A46 loc_A46:                                ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+7Fj
.text:00000A46                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+AFj ...
.text:00000A46                 push    edx
.text:00000A47                 mov     ecx, ebp
.text:00000A49                 push    eax
.text:00000A4A                 lea     edx, $LN45
.text:00000A50                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000A55                 pop     eax
.text:00000A56                 pop     edx
.text:00000A57                 mov     ecx, [ebp+var_C]
.text:00000A5A                 mov     large fs:0, ecx
.text:00000A61                 pop     ecx
.text:00000A62                 pop     edi
.text:00000A63                 pop     esi
.text:00000A64                 mov     ecx, [ebp+var_10]
.text:00000A67                 xor     ecx, ebp
.text:00000A69                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000A6E                 add     esp, 140h
.text:00000A74                 cmp     ebp, esp
.text:00000A76                 call    __RTC_CheckEsp
.text:00000A7B                 mov     esp, ebp
.text:00000A7D                 pop     ebp
.text:00000A7E                 retn    8
.text:00000A7E ?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z endp
.text:00000A7E
.text:00000A7E ; ---------------------------------------------------------------------------
.text:00000A81                 align 4
.text:00000A84 $LN45           dd 6                    ; DATA XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+63Ao
.text:00000A88                 dd offset $LN44
.text:00000A8C $LN44           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:00000A88o
.text:00000A94                 dd offset $LN37         ; "endPos"
.text:00000A98                 dd 0FFFFFF44h, 88h
.text:00000AA0                 dd offset $LN38         ; "item"
.text:00000AA4                 dd 0FFFFFF3Bh, 1
.text:00000AAC                 dd offset $LN39         ; "filled"
.text:00000AB0                 dd 0FFFFFF1Ch, 8
.text:00000AB8                 dd offset $LN40         ; "numFiles"
.text:00000ABC                 dd 0FFFFFF0Ch, 4
.text:00000AC4                 dd offset $LN41         ; "openVolumeCallback"
.text:00000AC8                 dd 0FFFFFEF4h, 10h
.text:00000AD0                 dd offset $LN42         ; "prop"
.text:00000AD4 $LN42           db 'prop',0             ; DATA XREF: .text:00000AD0o
.text:00000AD9 $LN41           db 'openVolumeCallback',0 ; DATA XREF: .text:00000AC4o
.text:00000AEC $LN40           db 'numFiles',0         ; DATA XREF: .text:00000AB8o
.text:00000AF5 $LN39           db 'filled',0           ; DATA XREF: .text:00000AACo
.text:00000AFC $LN38           db 'item',0             ; DATA XREF: .text:00000AA0o
.text:00000B01 $LN37           db 'endPos',0           ; DATA XREF: .text:00000A94o
.text:00000B08                 align 10h
.text:00000B10
.text:00000B10 ; =============== S U B R O U T I N E =======================================
.text:00000B10
.text:00000B10 ; Attributes: bp-based frame
.text:00000B10
.text:00000B10 ; __int32 __cdecl NArchive::NTar::CHandler::Open(NArchive::NTar::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00000B10                 public ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000B10 ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00000B10                                         ; DATA XREF: .rdata:000035CCo
.text:00000B10
.text:00000B10 var_1C          = dword ptr -1Ch
.text:00000B10 var_18          = dword ptr -18h
.text:00000B10 var_14          = dword ptr -14h
.text:00000B10 var_10          = dword ptr -10h
.text:00000B10 var_C           = dword ptr -0Ch
.text:00000B10 var_4           = dword ptr -4
.text:00000B10 this            = dword ptr  8
.text:00000B10 arg_4           = dword ptr  0Ch
.text:00000B10 arg_C           = dword ptr  14h
.text:00000B10
.text:00000B10 ; FUNCTION CHUNK AT .text:00000BCC SIZE 0000001E BYTES
.text:00000B10
.text:00000B10                 push    ebp
.text:00000B11                 mov     ebp, esp
.text:00000B13                 push    0FFFFFFFFh
.text:00000B15                 push    offset __ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000B1A                 mov     eax, large fs:0
.text:00000B20                 push    eax
.text:00000B21                 push    ecx
.text:00000B22                 sub     esp, 0Ch
.text:00000B25                 push    ebx
.text:00000B26                 push    esi
.text:00000B27                 push    edi
.text:00000B28                 mov     [ebp+var_1C], 0CCCCCCCCh
.text:00000B2F                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00000B36                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00000B3D                 mov     eax, dword ptr ds:___security_cookie
.text:00000B42                 xor     eax, ebp
.text:00000B44                 push    eax
.text:00000B45                 lea     eax, [ebp+var_C]
.text:00000B48                 mov     large fs:0, eax
.text:00000B4E                 mov     [ebp+var_10], esp
.text:00000B51                 mov     [ebp+var_4], 0
.text:00000B58                 mov     esi, esp
.text:00000B5A                 mov     eax, [ebp+this]
.text:00000B5D                 push    eax
.text:00000B5E                 mov     ecx, [ebp+this]
.text:00000B61                 mov     edx, [ecx]
.text:00000B63                 mov     eax, [edx+10h]
.text:00000B66                 call    eax
.text:00000B68                 cmp     esi, esp
.text:00000B6A                 call    __RTC_CheckEsp
.text:00000B6F                 mov     ecx, [ebp+arg_C]
.text:00000B72                 push    ecx             ; struct IArchiveOpenCallback *
.text:00000B73                 mov     edx, [ebp+arg_4]
.text:00000B76                 push    edx             ; struct IInStream *
.text:00000B77                 mov     ecx, [ebp+this] ; this
.text:00000B7A                 call    ?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)
.text:00000B7F                 mov     [ebp+var_1C], eax
.text:00000B82                 mov     eax, [ebp+var_1C]
.text:00000B85                 mov     [ebp+var_14], eax
.text:00000B88                 cmp     [ebp+var_14], 0
.text:00000B8C                 jz      short loc_B93
.text:00000B8E                 mov     eax, [ebp+var_14]
.text:00000B91                 jmp     short loc_BCC
.text:00000B93 ; ---------------------------------------------------------------------------
.text:00000B93
.text:00000B93 loc_B93:                                ; CODE XREF: NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+7Cj
.text:00000B93                 mov     ecx, [ebp+arg_4]
.text:00000B96                 push    ecx
.text:00000B97                 mov     ecx, [ebp+this]
.text:00000B9A                 add     ecx, 24h ; '$'
.text:00000B9D                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000BA2                 xor     eax, eax
.text:00000BA4                 jmp     short loc_BCC
.text:00000BA4 ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00000BA4
.text:00000BA6
.text:00000BA6 ; =============== S U B R O U T I N E =======================================
.text:00000BA6
.text:00000BA6
.text:00000BA6 __catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00000BA6                                         ; DATA XREF: .xdata$x:00002FFCo
.text:00000BA6                 mov     dword ptr [ebp-18h], 8007000Eh
.text:00000BAD                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000BB4                 mov     eax, offset $LN8
.text:00000BB9                 retn
.text:00000BB9 __catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:00000BB9
.text:00000BBA ; ---------------------------------------------------------------------------
.text:00000BBA                 mov     eax, offset __tryend$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:00000BBF                 retn
.text:00000BC0 ; ---------------------------------------------------------------------------
.text:00000BC0
.text:00000BC0 __tryend$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:00000BC0                                         ; DATA XREF: .text:00000BBAo
.text:00000BC0                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000BC7                 jmp     short loc_BCC
.text:00000BC9 ; ---------------------------------------------------------------------------
.text:00000BC9
.text:00000BC9 $LN8:                                   ; DATA XREF: __catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+Eo
.text:00000BC9                 mov     eax, [ebp-18h]
.text:00000BCC ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000BCC
.text:00000BCC loc_BCC:                                ; CODE XREF: NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+81j
.text:00000BCC                                         ; NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+94j ...
.text:00000BCC                 mov     ecx, [ebp+var_C]
.text:00000BCF                 mov     large fs:0, ecx
.text:00000BD6                 pop     ecx
.text:00000BD7                 pop     edi
.text:00000BD8                 pop     esi
.text:00000BD9                 pop     ebx
.text:00000BDA                 add     esp, 1Ch
.text:00000BDD                 cmp     ebp, esp
.text:00000BDF                 call    __RTC_CheckEsp
.text:00000BE4                 mov     esp, ebp
.text:00000BE6                 pop     ebp
.text:00000BE7                 retn    10h
.text:00000BE7 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00000BE7 ; ---------------------------------------------------------------------------
.text:00000BEA                 align 10h
.text:00000BF0
.text:00000BF0 ; =============== S U B R O U T I N E =======================================
.text:00000BF0
.text:00000BF0 ; Attributes: bp-based frame
.text:00000BF0
.text:00000BF0 ; __int32 __stdcall NArchive::NTar::CHandler::OpenSeq(NArchive::NTar::CHandler *this, struct ISequentialInStream *)
.text:00000BF0                 public ?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:00000BF0 ?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text:00000BF0                                         ; DATA XREF: .rdata:000035B8o
.text:00000BF0
.text:00000BF0 this            = dword ptr  8
.text:00000BF0 arg_4           = dword ptr  0Ch
.text:00000BF0
.text:00000BF0                 push    ebp
.text:00000BF1                 mov     ebp, esp
.text:00000BF3                 push    esi
.text:00000BF4                 mov     eax, [ebp+this]
.text:00000BF7                 sub     eax, 4
.text:00000BFA                 mov     ecx, [ebp+this]
.text:00000BFD                 mov     edx, [ecx-4]
.text:00000C00                 mov     esi, esp
.text:00000C02                 push    eax
.text:00000C03                 mov     eax, [edx+10h]
.text:00000C06                 call    eax
.text:00000C08                 cmp     esi, esp
.text:00000C0A                 call    __RTC_CheckEsp
.text:00000C0F                 mov     ecx, [ebp+arg_4]
.text:00000C12                 push    ecx
.text:00000C13                 mov     ecx, [ebp+this]
.text:00000C16                 add     ecx, 24h ; '$'
.text:00000C19                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000C1E                 mov     edx, [ebp+this]
.text:00000C21                 mov     byte ptr [edx+0D4h], 1
.text:00000C28                 xor     eax, eax
.text:00000C2A                 pop     esi
.text:00000C2B                 cmp     ebp, esp
.text:00000C2D                 call    __RTC_CheckEsp
.text:00000C32                 pop     ebp
.text:00000C33                 retn    8
.text:00000C33 ?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text:00000C33
.text:00000C33 ; ---------------------------------------------------------------------------
.text:00000C36                 align 10h
.text:00000C40
.text:00000C40 ; =============== S U B R O U T I N E =======================================
.text:00000C40
.text:00000C40 ; Attributes: bp-based frame
.text:00000C40
.text:00000C40 ; __int32 __stdcall NArchive::NTar::CHandler::Close(NArchive::NTar::CHandler *this)
.text:00000C40                 public ?Close@CHandler@NTar@NArchive@@UAGJXZ
.text:00000C40 ?Close@CHandler@NTar@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:000035D0o
.text:00000C40
.text:00000C40 this            = dword ptr  8
.text:00000C40
.text:00000C40                 push    ebp
.text:00000C41                 mov     ebp, esp
.text:00000C43                 mov     eax, [ebp+this]
.text:00000C46                 mov     byte ptr [eax+0D8h], 0
.text:00000C4D                 mov     ecx, [ebp+this]
.text:00000C50                 mov     dword ptr [ecx+0D4h], 0
.text:00000C5A                 mov     edx, [ebp+this]
.text:00000C5D                 mov     byte ptr [edx+0D0h], 0
.text:00000C64                 mov     eax, [ebp+this]
.text:00000C67                 mov     dword ptr [eax+0C0h], 0
.text:00000C71                 mov     dword ptr [eax+0C4h], 0
.text:00000C7B                 mov     ecx, [ebp+this]
.text:00000C7E                 mov     dword ptr [ecx+0C8h], 0
.text:00000C88                 mov     dword ptr [ecx+0CCh], 0
.text:00000C92                 mov     edx, [ebp+this]
.text:00000C95                 mov     dword ptr [edx+2Ch], 0
.text:00000C9C                 mov     eax, [ebp+this]
.text:00000C9F                 mov     byte ptr [eax+30h], 0
.text:00000CA3                 mov     ecx, [ebp+this]
.text:00000CA6                 mov     byte ptr [ecx+0D9h], 0
.text:00000CAD                 mov     ecx, [ebp+this]
.text:00000CB0                 add     ecx, 18h
.text:00000CB3                 call    ?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NTar::CItemEx>::Clear(void)
.text:00000CB8                 mov     ecx, [ebp+this]
.text:00000CBB                 add     ecx, 28h ; '('
.text:00000CBE                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:00000CC3                 mov     ecx, [ebp+this]
.text:00000CC6                 add     ecx, 24h ; '$'
.text:00000CC9                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:00000CCE                 xor     eax, eax
.text:00000CD0                 cmp     ebp, esp
.text:00000CD2                 call    __RTC_CheckEsp
.text:00000CD7                 pop     ebp
.text:00000CD8                 retn    4
.text:00000CD8 ?Close@CHandler@NTar@NArchive@@UAGJXZ endp
.text:00000CD8
.text:00000CD8 ; ---------------------------------------------------------------------------
.text:00000CDB                 align 10h
.text:00000CE0
.text:00000CE0 ; =============== S U B R O U T I N E =======================================
.text:00000CE0
.text:00000CE0 ; Attributes: bp-based frame
.text:00000CE0
.text:00000CE0 ; __int32 __stdcall NArchive::NTar::CHandler::GetNumberOfItems(NArchive::NTar::CHandler *this, unsigned int *)
.text:00000CE0                 public ?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z
.text:00000CE0 ?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z proc near
.text:00000CE0                                         ; DATA XREF: .rdata:000035D4o
.text:00000CE0
.text:00000CE0 var_4           = dword ptr -4
.text:00000CE0 this            = dword ptr  8
.text:00000CE0 arg_4           = dword ptr  0Ch
.text:00000CE0
.text:00000CE0                 push    ebp
.text:00000CE1                 mov     ebp, esp
.text:00000CE3                 push    ecx
.text:00000CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CEB                 mov     ecx, [ebp+this]
.text:00000CEE                 add     ecx, 24h ; '$'
.text:00000CF1                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00000CF6                 test    eax, eax
.text:00000CF8                 jz      short loc_D0A
.text:00000CFA                 mov     ecx, [ebp+this]
.text:00000CFD                 add     ecx, 18h
.text:00000D00                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:00000D05                 mov     [ebp+var_4], eax
.text:00000D08                 jmp     short loc_D11
.text:00000D0A ; ---------------------------------------------------------------------------
.text:00000D0A
.text:00000D0A loc_D0A:                                ; CODE XREF: NArchive::NTar::CHandler::GetNumberOfItems(uint *)+18j
.text:00000D0A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D11
.text:00000D11 loc_D11:                                ; CODE XREF: NArchive::NTar::CHandler::GetNumberOfItems(uint *)+28j
.text:00000D11                 mov     eax, [ebp+arg_4]
.text:00000D14                 mov     ecx, [ebp+var_4]
.text:00000D17                 mov     [eax], ecx
.text:00000D19                 xor     eax, eax
.text:00000D1B                 add     esp, 4
.text:00000D1E                 cmp     ebp, esp
.text:00000D20                 call    __RTC_CheckEsp
.text:00000D25                 mov     esp, ebp
.text:00000D27                 pop     ebp
.text:00000D28                 retn    8
.text:00000D28 ?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z endp
.text:00000D28
.text:00000D28 ; ---------------------------------------------------------------------------
.text:00000D2B                 align 10h
.text:00000D30
.text:00000D30 ; =============== S U B R O U T I N E =======================================
.text:00000D30
.text:00000D30 ; Attributes: bp-based frame
.text:00000D30
.text:00000D30 ; _DWORD __thiscall NArchive::NTar::CHandler::CHandler(NArchive::NTar::CHandler *__hidden this)
.text:00000D30                 public ??0CHandler@NTar@NArchive@@QAE@XZ
.text:00000D30 ??0CHandler@NTar@NArchive@@QAE@XZ proc near
.text:00000D30
.text:00000D30 var_1C          = dword ptr -1Ch
.text:00000D30 var_18          = dword ptr -18h
.text:00000D30 var_14          = dword ptr -14h
.text:00000D30 var_10          = dword ptr -10h
.text:00000D30 var_C           = dword ptr -0Ch
.text:00000D30 var_4           = dword ptr -4
.text:00000D30
.text:00000D30                 push    ebp
.text:00000D31                 mov     ebp, esp
.text:00000D33                 push    0FFFFFFFFh
.text:00000D35                 push    offset __ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ
.text:00000D3A                 mov     eax, large fs:0
.text:00000D40                 push    eax
.text:00000D41                 sub     esp, 10h
.text:00000D44                 mov     eax, 0CCCCCCCCh
.text:00000D49                 mov     [ebp+var_1C], eax
.text:00000D4C                 mov     [ebp+var_18], eax
.text:00000D4F                 mov     [ebp+var_14], eax
.text:00000D52                 mov     [ebp+var_10], eax
.text:00000D55                 mov     eax, dword ptr ds:___security_cookie
.text:00000D5A                 xor     eax, ebp
.text:00000D5C                 push    eax
.text:00000D5D                 lea     eax, [ebp+var_C]
.text:00000D60                 mov     large fs:0, eax
.text:00000D66                 mov     [ebp+var_10], ecx
.text:00000D69                 mov     ecx, [ebp+var_10] ; this
.text:00000D6C                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00000D71                 mov     ecx, [ebp+var_10]
.text:00000D74                 add     ecx, 4          ; this
.text:00000D77                 call    ??0IArchiveOpenSeq@@QAE@XZ ; IArchiveOpenSeq::IArchiveOpenSeq(void)
.text:00000D7C                 mov     ecx, [ebp+var_10]
.text:00000D7F                 add     ecx, 8          ; this
.text:00000D82                 call    ??0IInArchiveGetStream@@QAE@XZ ; IInArchiveGetStream::IInArchiveGetStream(void)
.text:00000D87                 mov     ecx, [ebp+var_10]
.text:00000D8A                 add     ecx, 0Ch        ; this
.text:00000D8D                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:00000D92                 mov     ecx, [ebp+var_10]
.text:00000D95                 add     ecx, 10h        ; this
.text:00000D98                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:00000D9D                 mov     ecx, [ebp+var_10]
.text:00000DA0                 add     ecx, 14h        ; this
.text:00000DA3                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000DA8                 mov     eax, [ebp+var_10]
.text:00000DAB                 mov     dword ptr [eax], offset ??_7CHandler@NTar@NArchive@@6BIInArchive@@@ ; const NArchive::NTar::CHandler::`vftable'{for `IInArchive'}
.text:00000DB1                 mov     ecx, [ebp+var_10]
.text:00000DB4                 mov     dword ptr [ecx+4], offset ??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NTar::CHandler::`vftable'{for `IArchiveOpenSeq'}
.text:00000DBB                 mov     edx, [ebp+var_10]
.text:00000DBE                 mov     dword ptr [edx+8], offset ??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ ; const NArchive::NTar::CHandler::`vftable'{for `IInArchiveGetStream'}
.text:00000DC5                 mov     eax, [ebp+var_10]
.text:00000DC8                 mov     dword ptr [eax+0Ch], offset ??_7CHandler@NTar@NArchive@@6BISetProperties@@@ ; const NArchive::NTar::CHandler::`vftable'{for `ISetProperties'}
.text:00000DCF                 mov     ecx, [ebp+var_10]
.text:00000DD2                 mov     dword ptr [ecx+10h], offset ??_7CHandler@NTar@NArchive@@6BIOutArchive@@@ ; const NArchive::NTar::CHandler::`vftable'{for `IOutArchive'}
.text:00000DD9                 mov     ecx, [ebp+var_10]
.text:00000DDC                 add     ecx, 18h
.text:00000DDF                 call    ??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>(void)
.text:00000DE4                 mov     [ebp+var_4], 0
.text:00000DEB                 mov     ecx, [ebp+var_10]
.text:00000DEE                 add     ecx, 24h ; '$'
.text:00000DF1                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00000DF6                 mov     byte ptr [ebp+var_4], 1
.text:00000DFA                 mov     ecx, [ebp+var_10]
.text:00000DFD                 add     ecx, 28h ; '('
.text:00000E00                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00000E05                 mov     byte ptr [ebp+var_4], 2
.text:00000E09                 mov     ecx, [ebp+var_10]
.text:00000E0C                 add     ecx, 38h ; '8'  ; this
.text:00000E0F                 call    ??0CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::CItemEx(void)
.text:00000E14                 mov     byte ptr [ebp+var_4], 3
.text:00000E18                 mov     ecx, [ebp+var_10]
.text:00000E1B                 add     ecx, 0ECh ; '8'
.text:00000E21                 call    ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>(void)
.text:00000E26                 mov     byte ptr [ebp+var_4], 4
.text:00000E2A                 push    28h ; '('       ; unsigned int
.text:00000E2C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00000E31                 add     esp, 4
.text:00000E34                 mov     [ebp+var_18], eax
.text:00000E37                 mov     byte ptr [ebp+var_4], 5
.text:00000E3B                 cmp     [ebp+var_18], 0
.text:00000E3F                 jz      short loc_E4E
.text:00000E41                 mov     ecx, [ebp+var_18] ; this
.text:00000E44                 call    ??0CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::CCopyCoder(void)
.text:00000E49                 mov     [ebp+var_1C], eax
.text:00000E4C                 jmp     short loc_E55
.text:00000E4E ; ---------------------------------------------------------------------------
.text:00000E4E
.text:00000E4E loc_E4E:                                ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+10Fj
.text:00000E4E                 mov     [ebp+var_1C], 0
.text:00000E55
.text:00000E55 loc_E55:                                ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+11Cj
.text:00000E55                 mov     edx, [ebp+var_1C]
.text:00000E58                 mov     [ebp+var_14], edx
.text:00000E5B                 mov     byte ptr [ebp+var_4], 4
.text:00000E5F                 mov     eax, [ebp+var_10]
.text:00000E62                 mov     ecx, [ebp+var_14]
.text:00000E65                 mov     [eax+0E8h], ecx
.text:00000E6B                 mov     edx, [ebp+var_10]
.text:00000E6E                 mov     eax, [edx+0E8h]
.text:00000E74                 push    eax
.text:00000E75                 mov     ecx, [ebp+var_10]
.text:00000E78                 add     ecx, 0ECh ; '8'
.text:00000E7E                 call    ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)
.text:00000E83                 mov     ecx, [ebp+var_10]
.text:00000E86                 mov     dword ptr [ecx+0E4h], 0FDE9h
.text:00000E90                 mov     ecx, [ebp+var_10] ; this
.text:00000E93                 call    ?Init@CHandler@NTar@NArchive@@QAEXXZ ; NArchive::NTar::CHandler::Init(void)
.text:00000E98                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000E9F                 mov     eax, [ebp+var_10]
.text:00000EA2                 mov     ecx, [ebp+var_C]
.text:00000EA5                 mov     large fs:0, ecx
.text:00000EAC                 pop     ecx
.text:00000EAD                 add     esp, 1Ch
.text:00000EB0                 cmp     ebp, esp
.text:00000EB2                 call    __RTC_CheckEsp
.text:00000EB7                 mov     esp, ebp
.text:00000EB9                 pop     ebp
.text:00000EBA                 retn
.text:00000EBA ??0CHandler@NTar@NArchive@@QAE@XZ endp
.text:00000EBA
.text:00000EBA ; ---------------------------------------------------------------------------
.text:00000EBB                 align 10h
.text:00000EC0
.text:00000EC0 ; =============== S U B R O U T I N E =======================================
.text:00000EC0
.text:00000EC0 ; Attributes: bp-based frame
.text:00000EC0
.text:00000EC0 ; __int32 __thiscall NArchive::NTar::CHandler::SkipTo(NArchive::NTar::CHandler *this, unsigned int)
.text:00000EC0                 public ?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z
.text:00000EC0 ?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z proc near
.text:00000EC0                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+AEp
.text:00000EC0                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+445p
.text:00000EC0
.text:00000EC0 var_2C          = dword ptr -2Ch
.text:00000EC0 var_28          = dword ptr -28h
.text:00000EC0 var_1D          = byte ptr -1Dh
.text:00000EC0 var_18          = dword ptr -18h
.text:00000EC0 var_10          = dword ptr -10h
.text:00000EC0 var_C           = dword ptr -0Ch
.text:00000EC0 var_4           = dword ptr -4
.text:00000EC0 arg_0           = dword ptr  8
.text:00000EC0
.text:00000EC0                 push    ebp
.text:00000EC1                 mov     ebp, esp
.text:00000EC3                 sub     esp, 2Ch
.text:00000EC6                 push    esi
.text:00000EC7                 push    edi
.text:00000EC8                 push    ecx
.text:00000EC9                 lea     edi, [ebp+var_2C]
.text:00000ECC                 mov     ecx, 0Bh
.text:00000ED1                 mov     eax, 0CCCCCCCCh
.text:00000ED6                 rep stosd
.text:00000ED8                 pop     ecx
.text:00000ED9                 mov     [ebp+var_4], ecx
.text:00000EDC
.text:00000EDC loc_EDC:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint):loc_102Aj
.text:00000EDC                 mov     eax, [ebp+var_4]
.text:00000EDF                 mov     ecx, [eax+2Ch]
.text:00000EE2                 cmp     ecx, [ebp+arg_0]
.text:00000EE5                 jb      short loc_EF6
.text:00000EE7                 mov     edx, [ebp+var_4]
.text:00000EEA                 movzx   eax, byte ptr [edx+30h]
.text:00000EEE                 test    eax, eax
.text:00000EF0                 jnz     loc_102F
.text:00000EF6
.text:00000EF6 loc_EF6:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+25j
.text:00000EF6                 mov     ecx, [ebp+var_4]
.text:00000EF9                 movzx   edx, byte ptr [ecx+30h]
.text:00000EFD                 test    edx, edx
.text:00000EFF                 jz      loc_FDD
.text:00000F05                 mov     ecx, [ebp+var_4]
.text:00000F08                 add     ecx, 38h ; '8'  ; this
.text:00000F0B                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:00000F10                 mov     [ebp+var_10], eax
.text:00000F13                 mov     [ebp+var_C], edx
.text:00000F16                 mov     esi, esp
.text:00000F18                 push    0
.text:00000F1A                 lea     eax, [ebp+var_10]
.text:00000F1D                 push    eax
.text:00000F1E                 lea     ecx, [ebp+var_10]
.text:00000F21                 push    ecx
.text:00000F22                 push    0
.text:00000F24                 mov     ecx, [ebp+var_4]
.text:00000F27                 add     ecx, 28h ; '('
.text:00000F2A                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000F2F                 push    eax
.text:00000F30                 mov     edx, [ebp+var_4]
.text:00000F33                 mov     eax, [edx+0E8h]
.text:00000F39                 mov     ecx, [ebp+var_4]
.text:00000F3C                 mov     edx, [ecx+0E8h]
.text:00000F42                 mov     eax, [eax]
.text:00000F44                 push    edx
.text:00000F45                 mov     ecx, [eax+0Ch]
.text:00000F48                 call    ecx
.text:00000F4A                 cmp     esi, esp
.text:00000F4C                 call    __RTC_CheckEsp
.text:00000F51                 mov     [ebp+var_18], eax
.text:00000F54                 cmp     [ebp+var_18], 0
.text:00000F58                 jz      short loc_F62
.text:00000F5A                 mov     eax, [ebp+var_18]
.text:00000F5D                 jmp     loc_1031
.text:00000F62 ; ---------------------------------------------------------------------------
.text:00000F62
.text:00000F62 loc_F62:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+98j
.text:00000F62                 mov     edx, [ebp+var_4]
.text:00000F65                 mov     eax, [edx+0E8h]
.text:00000F6B                 mov     ecx, [ebp+var_4]
.text:00000F6E                 mov     edx, [ecx+0C0h]
.text:00000F74                 add     edx, [eax+20h]
.text:00000F77                 mov     ecx, [ecx+0C4h]
.text:00000F7D                 adc     ecx, [eax+24h]
.text:00000F80                 mov     eax, [ebp+var_4]
.text:00000F83                 mov     [eax+0C0h], edx
.text:00000F89                 mov     [eax+0C4h], ecx
.text:00000F8F                 mov     ecx, [ebp+var_4]
.text:00000F92                 mov     edx, [ecx+0E8h]
.text:00000F98                 mov     [ebp+var_2C], edx
.text:00000F9B                 mov     eax, [ebp+var_2C]
.text:00000F9E                 mov     ecx, [eax+20h]
.text:00000FA1                 cmp     ecx, [ebp+var_10]
.text:00000FA4                 jnz     short loc_FB1
.text:00000FA6                 mov     edx, [ebp+var_2C]
.text:00000FA9                 mov     eax, [edx+24h]
.text:00000FAC                 cmp     eax, [ebp+var_C]
.text:00000FAF                 jz      short loc_FC5
.text:00000FB1
.text:00000FB1 loc_FB1:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+E4j
.text:00000FB1                 mov     ecx, [ebp+var_4]
.text:00000FB4                 mov     dword ptr [ecx+0D4h], 2
.text:00000FBE                 mov     eax, 1
.text:00000FC3                 jmp     short loc_1031
.text:00000FC5 ; ---------------------------------------------------------------------------
.text:00000FC5
.text:00000FC5 loc_FC5:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+EFj
.text:00000FC5                 mov     edx, [ebp+var_4]
.text:00000FC8                 mov     byte ptr [edx+30h], 0
.text:00000FCC                 mov     eax, [ebp+var_4]
.text:00000FCF                 mov     ecx, [eax+2Ch]
.text:00000FD2                 add     ecx, 1
.text:00000FD5                 mov     edx, [ebp+var_4]
.text:00000FD8                 mov     [edx+2Ch], ecx
.text:00000FDB                 jmp     short loc_102A
.text:00000FDD ; ---------------------------------------------------------------------------
.text:00000FDD
.text:00000FDD loc_FDD:                                ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+3Fj
.text:00000FDD                 mov     eax, [ebp+var_4]
.text:00000FE0                 add     eax, 38h ; '8'
.text:00000FE3                 push    eax             ; struct NArchive::NTar::CItemEx *
.text:00000FE4                 lea     ecx, [ebp+var_1D]
.text:00000FE7                 push    ecx             ; struct ISequentialInStream *
.text:00000FE8                 mov     ecx, [ebp+var_4]
.text:00000FEB                 add     ecx, 28h ; '('
.text:00000FEE                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00000FF3                 push    eax             ; struct ISequentialInStream *
.text:00000FF4                 mov     ecx, [ebp+var_4] ; this
.text:00000FF7                 call    ?ReadItem2@CHandler@NTar@NArchive@@AAEJPAUISequentialInStream@@AA_NAAUCItemEx@23@@Z ; NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)
.text:00000FFC                 mov     [ebp+var_28], eax
.text:00000FFF                 cmp     [ebp+var_28], 0
.text:00001003                 jz      short loc_100A
.text:00001005                 mov     eax, [ebp+var_28]
.text:00001008                 jmp     short loc_1031
.text:0000100A ; ---------------------------------------------------------------------------
.text:0000100A
.text:0000100A loc_100A:                               ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+143j
.text:0000100A                 movzx   edx, [ebp+var_1D]
.text:0000100E                 test    edx, edx
.text:00001010                 jnz     short loc_1023
.text:00001012                 mov     eax, [ebp+var_4]
.text:00001015                 mov     byte ptr [eax+0D0h], 1
.text:0000101C                 mov     eax, 80070057h
.text:00001021                 jmp     short loc_1031
.text:00001023 ; ---------------------------------------------------------------------------
.text:00001023
.text:00001023 loc_1023:                               ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+150j
.text:00001023                 mov     ecx, [ebp+var_4]
.text:00001026                 mov     byte ptr [ecx+30h], 1
.text:0000102A
.text:0000102A loc_102A:                               ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+11Bj
.text:0000102A                 jmp     loc_EDC
.text:0000102F ; ---------------------------------------------------------------------------
.text:0000102F
.text:0000102F loc_102F:                               ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+30j
.text:0000102F                 xor     eax, eax
.text:00001031
.text:00001031 loc_1031:                               ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+9Dj
.text:00001031                                         ; NArchive::NTar::CHandler::SkipTo(uint)+103j ...
.text:00001031                 push    edx
.text:00001032                 mov     ecx, ebp
.text:00001034                 push    eax
.text:00001035                 lea     edx, $LN16_0
.text:0000103B                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001040                 pop     eax
.text:00001041                 pop     edx
.text:00001042                 pop     edi
.text:00001043                 pop     esi
.text:00001044                 add     esp, 2Ch
.text:00001047                 cmp     ebp, esp
.text:00001049                 call    __RTC_CheckEsp
.text:0000104E                 mov     esp, ebp
.text:00001050                 pop     ebp
.text:00001051                 retn    4
.text:00001051 ?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z endp
.text:00001051
.text:00001051 ; ---------------------------------------------------------------------------
.text:00001054 $LN16_0         dd 2                    ; DATA XREF: NArchive::NTar::CHandler::SkipTo(uint)+175o
.text:00001058                 dd offset $LN15
.text:0000105C $LN15           dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00001058o
.text:00001064                 dd offset $LN13         ; "packSize"
.text:00001068                 dd 0FFFFFFE3h, 1
.text:00001070                 dd offset $LN14_0       ; "filled"
.text:00001074 $LN14_0         db 'filled',0           ; DATA XREF: .text:00001070o
.text:0000107B $LN13           db 'packSize',0         ; DATA XREF: .text:00001064o
.text:00001084                 align 10h
.text:00001090
.text:00001090 ; =============== S U B R O U T I N E =======================================
.text:00001090
.text:00001090 ; Attributes: bp-based frame
.text:00001090
.text:00001090 ; void __thiscall NArchive::NTar::CHandler::TarStringToUnicode(NArchive::NTar::CHandler *this, const struct AString *, struct NWindows::NCOM::CPropVariant *, bool)
.text:00001090                 public ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
.text:00001090 ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z proc near
.text:00001090                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+11Cp
.text:00001090                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1EDp ...
.text:00001090
.text:00001090 var_24          = dword ptr -24h
.text:00001090 var_20          = dword ptr -20h
.text:00001090 var_1C          = dword ptr -1Ch
.text:00001090 var_18          = dword ptr -18h
.text:00001090 var_14          = dword ptr -14h
.text:00001090 var_10          = dword ptr -10h
.text:00001090 var_C           = dword ptr -0Ch
.text:00001090 var_4           = dword ptr -4
.text:00001090 arg_0           = dword ptr  8
.text:00001090 arg_4           = dword ptr  0Ch
.text:00001090 arg_8           = byte ptr  10h
.text:00001090
.text:00001090                 push    ebp
.text:00001091                 mov     ebp, esp
.text:00001093                 push    0FFFFFFFFh
.text:00001095                 push    offset __ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
.text:0000109A                 mov     eax, large fs:0
.text:000010A0                 push    eax
.text:000010A1                 sub     esp, 18h
.text:000010A4                 mov     eax, 0CCCCCCCCh
.text:000010A9                 mov     [ebp+var_24], eax
.text:000010AC                 mov     [ebp+var_20], eax
.text:000010AF                 mov     [ebp+var_1C], eax
.text:000010B2                 mov     [ebp+var_18], eax
.text:000010B5                 mov     [ebp+var_14], eax
.text:000010B8                 mov     [ebp+var_10], eax
.text:000010BB                 mov     eax, dword ptr ds:___security_cookie
.text:000010C0                 xor     eax, ebp
.text:000010C2                 push    eax             ; struct UString *
.text:000010C3                 lea     eax, [ebp+var_C]
.text:000010C6                 mov     large fs:0, eax
.text:000010CC                 mov     [ebp+var_10], ecx
.text:000010CF                 lea     ecx, [ebp+var_20]
.text:000010D2                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:000010D7                 mov     [ebp+var_4], 0
.text:000010DE                 mov     eax, [ebp+var_10]
.text:000010E1                 cmp     dword ptr [eax+0E0h], 0FDE9h
.text:000010EB                 jnz     short loc_10FC
.text:000010ED                 lea     ecx, [ebp+var_20]
.text:000010F0                 push    ecx             ; struct UString *
.text:000010F1                 mov     edx, [ebp+arg_0]
.text:000010F4                 push    edx             ; struct AString *
.text:000010F5                 call    ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode(AString const &,UString &)
.text:000010FA                 jmp     short loc_1113
.text:000010FC ; ---------------------------------------------------------------------------
.text:000010FC
.text:000010FC loc_10FC:                               ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+5Bj
.text:000010FC                 mov     eax, [ebp+var_10]
.text:000010FF                 mov     ecx, [eax+0E0h]
.text:00001105                 push    ecx             ; unsigned int
.text:00001106                 mov     edx, [ebp+arg_0]
.text:00001109                 push    edx             ; struct AString *
.text:0000110A                 lea     eax, [ebp+var_20]
.text:0000110D                 push    eax             ; struct UString *
.text:0000110E                 call    ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2(UString &,AString const &,uint)
.text:00001113
.text:00001113 loc_1113:                               ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+6Aj
.text:00001113                 movzx   ecx, [ebp+arg_8]
.text:00001117                 test    ecx, ecx
.text:00001119                 jz      short loc_1124
.text:0000111B                 lea     edx, [ebp+var_20]
.text:0000111E                 push    edx             ; this
.text:0000111F                 call    ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ; NArchive::NItemName::ConvertToOSName2(UString &)
.text:00001124
.text:00001124 loc_1124:                               ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+89j
.text:00001124                 lea     eax, [ebp+var_20]
.text:00001127                 push    eax
.text:00001128                 mov     ecx, [ebp+arg_4]
.text:0000112B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=(UString const &)
.text:00001130                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00001137                 lea     ecx, [ebp+var_20] ; this
.text:0000113A                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:0000113F                 push    edx
.text:00001140                 mov     ecx, ebp
.text:00001142                 push    eax
.text:00001143                 lea     edx, $LN10
.text:00001149                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000114E                 pop     eax
.text:0000114F                 pop     edx
.text:00001150                 mov     ecx, [ebp+var_C]
.text:00001153                 mov     large fs:0, ecx
.text:0000115A                 pop     ecx
.text:0000115B                 add     esp, 24h
.text:0000115E                 cmp     ebp, esp
.text:00001160                 call    __RTC_CheckEsp
.text:00001165                 mov     esp, ebp
.text:00001167                 pop     ebp
.text:00001168                 retn    0Ch
.text:00001168 ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z endp ; sp-analysis failed
.text:00001168
.text:00001168 ; ---------------------------------------------------------------------------
.text:0000116B                 align 4
.text:0000116C $LN10           dd 1                    ; DATA XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+B3o
.text:00001170                 dd offset $LN9
.text:00001174 $LN9            dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:00001170o
.text:0000117C                 dd offset $LN7_0        ; "dest"
.text:00001180 $LN7_0          db 'dest',0             ; DATA XREF: .text:0000117Co
.text:00001185                 align 10h
.text:00001190
.text:00001190 ; =============== S U B R O U T I N E =======================================
.text:00001190
.text:00001190 ; Attributes: bp-based frame
.text:00001190
.text:00001190 ; __int32 __cdecl NArchive::NTar::CHandler::GetProperty(NArchive::NTar::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:00001190                 public ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00001190 ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:00001190                                         ; DATA XREF: .rdata:000035D8o
.text:00001190
.text:00001190 var_80          = byte ptr -80h
.text:00001190 var_7E          = byte ptr -7Eh
.text:00001190 var_7D          = byte ptr -7Dh
.text:00001190 var_7C          = dword ptr -7Ch
.text:00001190 var_78          = dword ptr -78h
.text:00001190 var_74          = dword ptr -74h
.text:00001190 var_70          = dword ptr -70h
.text:00001190 var_6C          = dword ptr -6Ch
.text:00001190 var_65          = byte ptr -65h
.text:00001190 var_64          = dword ptr -64h
.text:00001190 var_60          = dword ptr -60h
.text:00001190 var_5C          = dword ptr -5Ch
.text:00001190 var_58          = dword ptr -58h
.text:00001190 var_54          = dword ptr -54h
.text:00001190 var_4C          = dword ptr -4Ch
.text:00001190 var_48          = dword ptr -48h
.text:00001190 var_44          = dword ptr -44h
.text:00001190 var_3C          = byte ptr -3Ch
.text:00001190 var_30          = dword ptr -30h
.text:00001190 var_2C          = dword ptr -2Ch
.text:00001190 var_24          = byte ptr -24h
.text:00001190 var_10          = dword ptr -10h
.text:00001190 var_C           = dword ptr -0Ch
.text:00001190 var_4           = dword ptr -4
.text:00001190 this            = dword ptr  8
.text:00001190 arg_4           = dword ptr  0Ch
.text:00001190 arg_8           = dword ptr  10h
.text:00001190 arg_C           = dword ptr  14h
.text:00001190
.text:00001190 ; FUNCTION CHUNK AT .text:00001458 SIZE 00000032 BYTES
.text:00001190
.text:00001190                 push    ebp
.text:00001191                 mov     ebp, esp
.text:00001193                 push    0FFFFFFFFh
.text:00001195                 push    offset __ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:0000119A                 mov     eax, large fs:0
.text:000011A0                 push    eax
.text:000011A1                 push    ecx
.text:000011A2                 sub     esp, 70h
.text:000011A5                 push    ebx
.text:000011A6                 push    esi
.text:000011A7                 push    edi
.text:000011A8                 lea     edi, [ebp+var_80]
.text:000011AB                 mov     ecx, 1Ch
.text:000011B0                 mov     eax, 0CCCCCCCCh
.text:000011B5                 rep stosd
.text:000011B7                 mov     eax, dword ptr ds:___security_cookie
.text:000011BC                 xor     eax, ebp
.text:000011BE                 push    eax             ; struct _FILETIME *
.text:000011BF                 lea     eax, [ebp+var_C]
.text:000011C2                 mov     large fs:0, eax
.text:000011C8                 mov     [ebp+var_10], esp
.text:000011CB                 mov     [ebp+var_4], 0
.text:000011D2                 lea     ecx, [ebp+var_24] ; this
.text:000011D5                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:000011DA                 mov     [ebp+var_54], eax
.text:000011DD                 mov     byte ptr [ebp+var_4], 1
.text:000011E1                 mov     ecx, [ebp+this]
.text:000011E4                 add     ecx, 24h ; '$'
.text:000011E7                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000011EC                 mov     [ebp+var_58], eax
.text:000011EF                 cmp     [ebp+var_58], 0
.text:000011F3                 jz      short loc_120F
.text:000011F5                 mov     eax, [ebp+arg_4]
.text:000011F8                 push    eax
.text:000011F9                 mov     ecx, [ebp+this]
.text:000011FC                 add     ecx, 18h
.text:000011FF                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:00001204                 mov     [ebp+var_5C], eax
.text:00001207                 mov     ecx, [ebp+var_5C]
.text:0000120A                 mov     [ebp+var_2C], ecx
.text:0000120D                 jmp     short loc_1275
.text:0000120F ; ---------------------------------------------------------------------------
.text:0000120F
.text:0000120F loc_120F:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+63j
.text:0000120F                 mov     edx, [ebp+this]
.text:00001212                 mov     eax, [ebp+arg_4]
.text:00001215                 cmp     eax, [edx+2Ch]
.text:00001218                 jnb     short loc_1237
.text:0000121A                 mov     [ebp+var_44], 80070057h
.text:00001221                 mov     byte ptr [ebp+var_4], 0
.text:00001225                 lea     ecx, [ebp+var_24] ; this
.text:00001228                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000122D                 mov     eax, [ebp+var_44]
.text:00001230                 jmp     loc_1458
.text:00001235 ; ---------------------------------------------------------------------------
.text:00001235                 jmp     short loc_1275
.text:00001237 ; ---------------------------------------------------------------------------
.text:00001237
.text:00001237 loc_1237:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+88j
.text:00001237                 mov     ecx, [ebp+arg_4]
.text:0000123A                 push    ecx             ; unsigned int
.text:0000123B                 mov     ecx, [ebp+this] ; this
.text:0000123E                 call    ?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z ; NArchive::NTar::CHandler::SkipTo(uint)
.text:00001243                 mov     [ebp+var_60], eax
.text:00001246                 mov     edx, [ebp+var_60]
.text:00001249                 mov     [ebp+var_30], edx
.text:0000124C                 cmp     [ebp+var_30], 0
.text:00001250                 jz      short loc_126C
.text:00001252                 mov     eax, [ebp+var_30]
.text:00001255                 mov     [ebp+var_48], eax
.text:00001258                 mov     byte ptr [ebp+var_4], 0
.text:0000125C                 lea     ecx, [ebp+var_24] ; this
.text:0000125F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00001264                 mov     eax, [ebp+var_48]
.text:00001267                 jmp     loc_1458
.text:0000126C ; ---------------------------------------------------------------------------
.text:0000126C
.text:0000126C loc_126C:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+C0j
.text:0000126C                 mov     ecx, [ebp+this]
.text:0000126F                 add     ecx, 38h ; '8'
.text:00001272                 mov     [ebp+var_2C], ecx
.text:00001275
.text:00001275 loc_1275:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+7Dj
.text:00001275                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A5j
.text:00001275                 mov     edx, [ebp+arg_8]
.text:00001278                 mov     [ebp+var_64], edx
.text:0000127B                 mov     eax, [ebp+var_64]
.text:0000127E                 sub     eax, 3
.text:00001281                 mov     [ebp+var_64], eax
.text:00001284                 cmp     [ebp+var_64], 57h ; 'W' ; switch 88 cases
.text:00001288                 ja      $LN15_0         ; jumptable 00001298 default case
.text:0000128E                 mov     ecx, [ebp+var_64]
.text:00001291                 movzx   edx, ds:$LN31[ecx]
.text:00001298                 jmp     ds:$LN37_0[edx*4] ; switch jump
.text:0000129F ; ---------------------------------------------------------------------------
.text:0000129F
.text:0000129F $LN14_1:                                ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:0000129F                                         ; DATA XREF: .text:$LN37_0o
.text:0000129F                 push    1               ; jumptable 00001298 case 0
.text:000012A1                 lea     eax, [ebp+var_24]
.text:000012A4                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:000012A5                 mov     ecx, [ebp+var_2C]
.text:000012A8                 push    ecx             ; struct AString *
.text:000012A9                 mov     ecx, [ebp+this] ; this
.text:000012AC                 call    ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)
.text:000012B1                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:000012B6 ; ---------------------------------------------------------------------------
.text:000012B6
.text:000012B6 $LN13_0:                                ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:000012B6                                         ; DATA XREF: .text:$LN37_0o
.text:000012B6                 mov     ecx, [ebp+var_2C] ; jumptable 00001298 case 3
.text:000012B9                 call    ?IsDir@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsDir(void)
.text:000012BE                 mov     [ebp+var_65], al
.text:000012C1                 movzx   edx, [ebp+var_65]
.text:000012C5                 push    edx
.text:000012C6                 lea     ecx, [ebp+var_24]
.text:000012C9                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=(bool)
.text:000012CE                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:000012D3 ; ---------------------------------------------------------------------------
.text:000012D3
.text:000012D3 $LN12:                                  ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:000012D3                                         ; DATA XREF: .text:$LN37_0o
.text:000012D3                 mov     ecx, [ebp+var_2C] ; jumptable 00001298 case 4
.text:000012D6                 call    ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize(void)
.text:000012DB                 mov     [ebp+var_70], eax
.text:000012DE                 mov     [ebp+var_6C], edx
.text:000012E1                 mov     eax, [ebp+var_6C]
.text:000012E4                 push    eax
.text:000012E5                 mov     ecx, [ebp+var_70]
.text:000012E8                 push    ecx
.text:000012E9                 lea     ecx, [ebp+var_24]
.text:000012EC                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000012F1                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:000012F6 ; ---------------------------------------------------------------------------
.text:000012F6
.text:000012F6 $LN11:                                  ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:000012F6                                         ; DATA XREF: .text:$LN37_0o
.text:000012F6                 mov     ecx, [ebp+var_2C] ; jumptable 00001298 case 5
.text:000012F9                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:000012FE                 mov     [ebp+var_78], eax
.text:00001301                 mov     [ebp+var_74], edx
.text:00001304                 mov     edx, [ebp+var_74]
.text:00001307                 push    edx
.text:00001308                 mov     eax, [ebp+var_78]
.text:0000130B                 push    eax
.text:0000130C                 lea     ecx, [ebp+var_24]
.text:0000130F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00001314                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:00001319 ; ---------------------------------------------------------------------------
.text:00001319
.text:00001319 $LN10_0:                                ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:00001319                                         ; DATA XREF: .text:$LN37_0o
.text:00001319                 mov     ecx, [ebp+var_2C] ; jumptable 00001298 case 9
.text:0000131C                 mov     [ebp+var_7C], ecx
.text:0000131F                 mov     edx, [ebp+var_7C]
.text:00001322                 mov     eax, [ebp+var_7C]
.text:00001325                 mov     ecx, [edx+20h]
.text:00001328                 or      ecx, [eax+24h]
.text:0000132B                 jz      short loc_1354
.text:0000132D                 lea     edx, [ebp+var_3C]
.text:00001330                 push    edx
.text:00001331                 mov     eax, [ebp+var_2C]
.text:00001334                 mov     ecx, [eax+24h]
.text:00001337                 push    ecx             ; __int64
.text:00001338                 mov     edx, [eax+20h]
.text:0000133B                 push    edx             ; this
.text:0000133C                 call    ?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z ; NWindows::NTime::UnixTime64ToFileTime(__int64,_FILETIME &)
.text:00001341                 movzx   eax, al
.text:00001344                 test    eax, eax
.text:00001346                 jz      short loc_1354
.text:00001348                 lea     ecx, [ebp+var_3C]
.text:0000134B                 push    ecx
.text:0000134C                 lea     ecx, [ebp+var_24]
.text:0000134F                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=(_FILETIME const &)
.text:00001354
.text:00001354 loc_1354:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+19Bj
.text:00001354                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1B6j
.text:00001354                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:00001359 ; ---------------------------------------------------------------------------
.text:00001359
.text:00001359 $LN7_1:                                 ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:00001359                                         ; DATA XREF: .text:$LN37_0o
.text:00001359                 mov     edx, [ebp+var_2C] ; jumptable 00001298 case 50
.text:0000135C                 mov     eax, [edx+28h]
.text:0000135F                 push    eax
.text:00001360                 lea     ecx, [ebp+var_24]
.text:00001363                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:00001368                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:0000136D ; ---------------------------------------------------------------------------
.text:0000136D
.text:0000136D $LN6:                                   ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:0000136D                                         ; DATA XREF: .text:$LN37_0o
.text:0000136D                 push    0               ; jumptable 00001298 case 22
.text:0000136F                 lea     ecx, [ebp+var_24]
.text:00001372                 push    ecx             ; struct NWindows::NCOM::CPropVariant *
.text:00001373                 mov     edx, [ebp+var_2C]
.text:00001376                 add     edx, 48h ; 'H'
.text:00001379                 push    edx             ; struct AString *
.text:0000137A                 mov     ecx, [ebp+this] ; this
.text:0000137D                 call    ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)
.text:00001382                 jmp     $LN15_0         ; jumptable 00001298 default case
.text:00001387 ; ---------------------------------------------------------------------------
.text:00001387
.text:00001387 $LN5:                                   ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:00001387                                         ; DATA XREF: .text:$LN37_0o
.text:00001387                 push    0               ; jumptable 00001298 case 23
.text:00001389                 lea     eax, [ebp+var_24]
.text:0000138C                 push    eax             ; struct NWindows::NCOM::CPropVariant *
.text:0000138D                 mov     ecx, [ebp+var_2C]
.text:00001390                 add     ecx, 54h ; 'T'
.text:00001393                 push    ecx             ; struct AString *
.text:00001394                 mov     ecx, [ebp+this] ; this
.text:00001397                 call    ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)
.text:0000139C                 jmp     short $LN15_0   ; jumptable 00001298 default case
.text:0000139E ; ---------------------------------------------------------------------------
.text:0000139E
.text:0000139E $LN4:                                   ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:0000139E                                         ; DATA XREF: .text:$LN37_0o
.text:0000139E                 mov     edx, [ebp+var_2C] ; jumptable 00001298 case 51
.text:000013A1                 movsx   eax, byte ptr [edx+68h]
.text:000013A5                 cmp     eax, 32h ; '2'
.text:000013A8                 jnz     short loc_13D5
.text:000013AA                 mov     ecx, [ebp+var_2C]
.text:000013AD                 add     ecx, 3Ch ; '<'  ; this
.text:000013B0                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000013B5                 mov     [ebp+var_7D], al
.text:000013B8                 movzx   ecx, [ebp+var_7D]
.text:000013BC                 test    ecx, ecx
.text:000013BE                 jnz     short loc_13D5
.text:000013C0                 push    0               ; bool
.text:000013C2                 lea     edx, [ebp+var_24]
.text:000013C5                 push    edx             ; struct NWindows::NCOM::CPropVariant *
.text:000013C6                 mov     eax, [ebp+var_2C]
.text:000013C9                 add     eax, 3Ch ; '<'
.text:000013CC                 push    eax             ; struct AString *
.text:000013CD                 mov     ecx, [ebp+this] ; this
.text:000013D0                 call    ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)
.text:000013D5
.text:000013D5 loc_13D5:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+218j
.text:000013D5                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+22Ej
.text:000013D5                 jmp     short $LN15_0   ; jumptable 00001298 default case
.text:000013D7 ; ---------------------------------------------------------------------------
.text:000013D7
.text:000013D7 $LN2:                                   ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j
.text:000013D7                                         ; DATA XREF: .text:$LN37_0o
.text:000013D7                 mov     ecx, [ebp+var_2C] ; jumptable 00001298 case 87
.text:000013DA                 movsx   edx, byte ptr [ecx+68h]
.text:000013DE                 cmp     edx, 31h ; '1'
.text:000013E1                 jnz     short $LN15_0   ; jumptable 00001298 default case
.text:000013E3                 mov     ecx, [ebp+var_2C]
.text:000013E6                 add     ecx, 3Ch ; '<'  ; this
.text:000013E9                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000013EE                 mov     [ebp+var_7E], al
.text:000013F1                 movzx   eax, [ebp+var_7E]
.text:000013F5                 test    eax, eax
.text:000013F7                 jnz     short $LN15_0   ; jumptable 00001298 default case
.text:000013F9                 push    0               ; bool
.text:000013FB                 lea     ecx, [ebp+var_24]
.text:000013FE                 push    ecx             ; struct NWindows::NCOM::CPropVariant *
.text:000013FF                 mov     edx, [ebp+var_2C]
.text:00001402                 add     edx, 3Ch ; '<'
.text:00001405                 push    edx             ; struct AString *
.text:00001406                 mov     ecx, [ebp+this] ; this
.text:00001409                 call    ?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z ; NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)
.text:0000140E
.text:0000140E $LN15_0:                                ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+F8j
.text:0000140E                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108j ...
.text:0000140E                 mov     eax, [ebp+arg_C] ; jumptable 00001298 default case
.text:00001411                 push    eax             ; struct tagPROPVARIANT *
.text:00001412                 lea     ecx, [ebp+var_24] ; this
.text:00001415                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:0000141A                 mov     [ebp+var_4C], 0
.text:00001421                 mov     byte ptr [ebp+var_4], 0
.text:00001425                 lea     ecx, [ebp+var_24] ; this
.text:00001428                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000142D                 mov     eax, [ebp+var_4C]
.text:00001430                 jmp     short loc_1458
.text:00001430 ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp ; sp-analysis failed
.text:00001430
.text:00001432
.text:00001432 ; =============== S U B R O U T I N E =======================================
.text:00001432
.text:00001432
.text:00001432 __catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00001432                                         ; DATA XREF: .xdata$x:000030D4o
.text:00001432                 mov     dword ptr [ebp-50h], 8007000Eh
.text:00001439                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001440                 mov     eax, offset $LN29
.text:00001445                 retn
.text:00001445 __catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:00001445
.text:00001446 ; ---------------------------------------------------------------------------
.text:00001446                 mov     eax, offset __tryend$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:0000144B                 retn
.text:0000144C ; ---------------------------------------------------------------------------
.text:0000144C
.text:0000144C __tryend$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:0000144C                                         ; DATA XREF: .text:00001446o
.text:0000144C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00001453                 jmp     short loc_1458
.text:00001455 ; ---------------------------------------------------------------------------
.text:00001455
.text:00001455 $LN29:                                  ; DATA XREF: __catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+Eo
.text:00001455                 mov     eax, [ebp-50h]
.text:00001458 ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00001458
.text:00001458 loc_1458:                               ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+A0j
.text:00001458                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+D7j ...
.text:00001458                 push    edx
.text:00001459                 mov     ecx, ebp
.text:0000145B                 push    eax
.text:0000145C                 lea     edx, $LN36
.text:00001462                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001467                 pop     eax
.text:00001468                 pop     edx
.text:00001469                 mov     ecx, [ebp+var_C]
.text:0000146C                 mov     large fs:0, ecx
.text:00001473                 pop     ecx
.text:00001474                 pop     edi
.text:00001475                 pop     esi
.text:00001476                 pop     ebx
.text:00001477                 add     esp, 80h
.text:0000147D                 cmp     ebp, esp
.text:0000147F                 call    __RTC_CheckEsp
.text:00001484                 mov     esp, ebp
.text:00001486                 pop     ebp
.text:00001487                 retn    10h
.text:00001487 ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00001487 ; ---------------------------------------------------------------------------
.text:0000148A                 align 4
.text:0000148C $LN36           dd 2                    ; DATA XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+2CCo
.text:00001490                 dd offset $LN35
.text:00001494 $LN35           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00001490o
.text:0000149C                 dd offset $LN32         ; "prop"
.text:000014A0                 dd 0FFFFFFC4h, 8
.text:000014A8                 dd offset $LN33
.text:000014AC $LN33           db 66h, 74h, 0          ; DATA XREF: .text:000014A8o
.text:000014AF $LN32           db 'prop',0             ; DATA XREF: .text:0000149Co
.text:000014B4 $LN37_0         dd offset $LN14_1, offset $LN13_0, offset $LN12, offset $LN11
.text:000014B4                                         ; DATA XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+108r
.text:000014B4                 dd offset $LN10_0, offset $LN6, offset $LN5, offset $LN7_1 ; jump table for switch statement
.text:000014B4                 dd offset $LN4, offset $LN2, offset $LN15_0
.text:000014E0 $LN31           db      0,   0Ah,   0Ah,     1
.text:000014E0                                         ; DATA XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+101r
.text:000014E0                 db      2,     3,   0Ah,   0Ah ; indirect table for switch statement
.text:000014E0                 db    0Ah,     4,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,     5,     6
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,     7,     8
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,   0Ah
.text:000014E0                 db    0Ah,   0Ah,   0Ah,     9
.text:00001538                 align 10h
.text:00001540
.text:00001540 ; =============== S U B R O U T I N E =======================================
.text:00001540
.text:00001540 ; Attributes: bp-based frame
.text:00001540
.text:00001540 ; __int32 __cdecl NArchive::NTar::CHandler::Extract(NArchive::NTar::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:00001540                 public ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001540 ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:00001540                                         ; DATA XREF: .rdata:000035DCo
.text:00001540
.text:00001540 var_1F4         = dword ptr -1F4h
.text:00001540 var_1F0         = dword ptr -1F0h
.text:00001540 var_1EC         = dword ptr -1ECh
.text:00001540 var_1E8         = dword ptr -1E8h
.text:00001540 var_1E4         = dword ptr -1E4h
.text:00001540 var_1E0         = dword ptr -1E0h
.text:00001540 var_1DC         = dword ptr -1DCh
.text:00001540 var_1D8         = dword ptr -1D8h
.text:00001540 var_1D4         = dword ptr -1D4h
.text:00001540 var_1D0         = qword ptr -1D0h
.text:00001540 var_1C8         = dword ptr -1C8h
.text:00001540 var_1C4         = dword ptr -1C4h
.text:00001540 var_1C0         = dword ptr -1C0h
.text:00001540 var_1BC         = dword ptr -1BCh
.text:00001540 var_1B8         = dword ptr -1B8h
.text:00001540 var_1B4         = dword ptr -1B4h
.text:00001540 var_1B0         = dword ptr -1B0h
.text:00001540 var_1AA         = byte ptr -1AAh
.text:00001540 var_1A9         = byte ptr -1A9h
.text:00001540 var_1A8         = dword ptr -1A8h
.text:00001540 var_1A1         = byte ptr -1A1h
.text:00001540 var_1A0         = dword ptr -1A0h
.text:00001540 var_19C         = qword ptr -19Ch
.text:00001540 var_194         = dword ptr -194h
.text:00001540 var_190         = dword ptr -190h
.text:00001540 var_189         = byte ptr -189h
.text:00001540 var_188         = dword ptr -188h
.text:00001540 var_184         = dword ptr -184h
.text:00001540 var_17D         = byte ptr -17Dh
.text:00001540 var_17C         = dword ptr -17Ch
.text:00001540 var_178         = dword ptr -178h
.text:00001540 var_174         = dword ptr -174h
.text:00001540 var_170         = dword ptr -170h
.text:00001540 var_16C         = dword ptr -16Ch
.text:00001540 var_168         = dword ptr -168h
.text:00001540 var_164         = dword ptr -164h
.text:00001540 var_160         = dword ptr -160h
.text:00001540 var_15C         = dword ptr -15Ch
.text:00001540 var_158         = dword ptr -158h
.text:00001540 var_154         = dword ptr -154h
.text:00001540 var_150         = dword ptr -150h
.text:00001540 var_14C         = dword ptr -14Ch
.text:00001540 var_148         = dword ptr -148h
.text:00001540 var_144         = dword ptr -144h
.text:00001540 var_140         = dword ptr -140h
.text:00001540 var_13C         = dword ptr -13Ch
.text:00001540 var_138         = dword ptr -138h
.text:00001540 var_134         = dword ptr -134h
.text:00001540 var_130         = dword ptr -130h
.text:00001540 var_12C         = dword ptr -12Ch
.text:00001540 var_128         = dword ptr -128h
.text:00001540 var_124         = dword ptr -124h
.text:00001540 var_120         = dword ptr -120h
.text:00001540 var_11C         = dword ptr -11Ch
.text:00001540 var_118         = dword ptr -118h
.text:00001540 var_114         = dword ptr -114h
.text:00001540 var_110         = dword ptr -110h
.text:00001540 var_10C         = dword ptr -10Ch
.text:00001540 var_104         = dword ptr -104h
.text:00001540 var_100         = dword ptr -100h
.text:00001540 var_FC          = dword ptr -0FCh
.text:00001540 var_F8          = dword ptr -0F8h
.text:00001540 var_F4          = dword ptr -0F4h
.text:00001540 var_F0          = dword ptr -0F0h
.text:00001540 var_EC          = dword ptr -0ECh
.text:00001540 var_E8          = dword ptr -0E8h
.text:00001540 var_E4          = dword ptr -0E4h
.text:00001540 var_E0          = dword ptr -0E0h
.text:00001540 var_DC          = dword ptr -0DCh
.text:00001540 var_D8          = dword ptr -0D8h
.text:00001540 var_D4          = dword ptr -0D4h
.text:00001540 var_D0          = dword ptr -0D0h
.text:00001540 var_CC          = dword ptr -0CCh
.text:00001540 var_C8          = dword ptr -0C8h
.text:00001540 var_C4          = dword ptr -0C4h
.text:00001540 var_C0          = dword ptr -0C0h
.text:00001540 var_BC          = dword ptr -0BCh
.text:00001540 var_B8          = dword ptr -0B8h
.text:00001540 var_B4          = dword ptr -0B4h
.text:00001540 var_B0          = dword ptr -0B0h
.text:00001540 var_A8          = byte ptr -0A8h
.text:00001540 var_A0          = dword ptr -0A0h
.text:00001540 var_9C          = dword ptr -9Ch
.text:00001540 var_95          = byte ptr -95h
.text:00001540 var_94          = dword ptr -94h
.text:00001540 var_90          = dword ptr -90h
.text:00001540 var_8C          = dword ptr -8Ch
.text:00001540 var_88          = dword ptr -88h
.text:00001540 var_84          = dword ptr -84h
.text:00001540 var_80          = dword ptr -80h
.text:00001540 var_7C          = dword ptr -7Ch
.text:00001540 var_78          = dword ptr -78h
.text:00001540 var_74          = dword ptr -74h
.text:00001540 var_70          = dword ptr -70h
.text:00001540 var_68          = byte ptr -68h
.text:00001540 var_60          = dword ptr -60h
.text:00001540 var_58          = byte ptr -58h
.text:00001540 var_50          = dword ptr -50h
.text:00001540 var_48          = byte ptr -48h
.text:00001540 var_40          = dword ptr -40h
.text:00001540 var_38          = byte ptr -38h
.text:00001540 var_30          = dword ptr -30h
.text:00001540 var_2C          = dword ptr -2Ch
.text:00001540 var_28          = dword ptr -28h
.text:00001540 var_24          = dword ptr -24h
.text:00001540 var_20          = dword ptr -20h
.text:00001540 var_1C          = dword ptr -1Ch
.text:00001540 var_16          = byte ptr -16h
.text:00001540 var_15          = byte ptr -15h
.text:00001540 var_14          = dword ptr -14h
.text:00001540 var_10          = dword ptr -10h
.text:00001540 var_C           = dword ptr -0Ch
.text:00001540 var_4           = dword ptr -4
.text:00001540 this            = dword ptr  8
.text:00001540 arg_4           = dword ptr  0Ch
.text:00001540 arg_8           = dword ptr  10h
.text:00001540 arg_C           = dword ptr  14h
.text:00001540 arg_10          = dword ptr  18h
.text:00001540
.text:00001540 ; FUNCTION CHUNK AT .text:000022A9 SIZE 00000032 BYTES
.text:00001540
.text:00001540                 push    ebp
.text:00001541                 mov     ebp, esp
.text:00001543                 push    0FFFFFFFFh
.text:00001545                 push    offset __ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000154A                 mov     eax, large fs:0
.text:00001550                 push    eax
.text:00001551                 push    ecx
.text:00001552                 sub     esp, 1E4h
.text:00001558                 push    ebx
.text:00001559                 push    esi
.text:0000155A                 push    edi
.text:0000155B                 lea     edi, [ebp+var_1F4]
.text:00001561                 mov     ecx, 79h ; 'y'
.text:00001566                 mov     eax, 0CCCCCCCCh
.text:0000156B                 rep stosd
.text:0000156D                 mov     eax, dword ptr ds:___security_cookie
.text:00001572                 xor     eax, ebp
.text:00001574                 push    eax
.text:00001575                 lea     eax, [ebp+var_C]
.text:00001578                 mov     large fs:0, eax
.text:0000157E                 mov     [ebp+var_10], esp
.text:00001581                 mov     [ebp+var_4], 0
.text:00001588                 mov     ecx, [ebp+this]
.text:0000158B                 add     ecx, 28h ; '('
.text:0000158E                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00001593                 mov     [ebp+var_10C], eax
.text:00001599                 mov     eax, [ebp+var_10C]
.text:0000159F                 mov     [ebp+var_14], eax
.text:000015A2                 mov     ecx, [ebp+this]
.text:000015A5                 add     ecx, 24h ; '$'
.text:000015A8                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000015AD                 mov     [ebp+var_110], eax
.text:000015B3                 xor     ecx, ecx
.text:000015B5                 cmp     [ebp+var_110], 0
.text:000015BC                 setz    cl
.text:000015BF                 mov     [ebp+var_15], cl
.text:000015C2                 movzx   edx, [ebp+var_15]
.text:000015C6                 test    edx, edx
.text:000015C8                 jnz     short loc_15E4
.text:000015CA                 mov     ecx, [ebp+this]
.text:000015CD                 add     ecx, 24h ; '$'
.text:000015D0                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:000015D5                 mov     [ebp+var_114], eax
.text:000015DB                 mov     eax, [ebp+var_114]
.text:000015E1                 mov     [ebp+var_14], eax
.text:000015E4
.text:000015E4 loc_15E4:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+88j
.text:000015E4                 xor     ecx, ecx
.text:000015E6                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:000015EA                 setz    cl
.text:000015ED                 mov     [ebp+var_16], cl
.text:000015F0                 movzx   edx, [ebp+var_16]
.text:000015F4                 test    edx, edx
.text:000015F6                 jz      short loc_1612
.text:000015F8                 mov     ecx, [ebp+this]
.text:000015FB                 add     ecx, 18h
.text:000015FE                 call    ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CItemEx>::Size(void)
.text:00001603                 mov     [ebp+var_118], eax
.text:00001609                 mov     eax, [ebp+var_118]
.text:0000160F                 mov     [ebp+arg_8], eax
.text:00001612
.text:00001612 loc_1612:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B6j
.text:00001612                 mov     ecx, [ebp+this]
.text:00001615                 add     ecx, 24h ; '$'
.text:00001618                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:0000161D                 mov     [ebp+var_11C], eax
.text:00001623                 cmp     [ebp+var_11C], 0
.text:0000162A                 jz      short loc_1639
.text:0000162C                 cmp     [ebp+arg_8], 0
.text:00001630                 jnz     short loc_1639
.text:00001632                 xor     eax, eax
.text:00001634                 jmp     loc_22A9
.text:00001639 ; ---------------------------------------------------------------------------
.text:00001639
.text:00001639 loc_1639:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+EAj
.text:00001639                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F0j
.text:00001639                 mov     [ebp+var_20], 0
.text:00001640                 mov     [ebp+var_1C], 0
.text:00001647                 mov     [ebp+var_24], 0
.text:0000164E                 jmp     short loc_1659
.text:00001650 ; ---------------------------------------------------------------------------
.text:00001650
.text:00001650 loc_1650:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+18Aj
.text:00001650                 mov     ecx, [ebp+var_24]
.text:00001653                 add     ecx, 1
.text:00001656                 mov     [ebp+var_24], ecx
.text:00001659
.text:00001659 loc_1659:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10Ej
.text:00001659                 mov     edx, [ebp+var_24]
.text:0000165C                 cmp     edx, [ebp+arg_8]
.text:0000165F                 jnb     short loc_16CC
.text:00001661                 movzx   eax, [ebp+var_16]
.text:00001665                 test    eax, eax
.text:00001667                 jz      short loc_1674
.text:00001669                 mov     ecx, [ebp+var_24]
.text:0000166C                 mov     [ebp+var_120], ecx
.text:00001672                 jmp     short loc_1683
.text:00001674 ; ---------------------------------------------------------------------------
.text:00001674
.text:00001674 loc_1674:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+127j
.text:00001674                 mov     edx, [ebp+var_24]
.text:00001677                 mov     eax, [ebp+arg_4]
.text:0000167A                 mov     ecx, [eax+edx*4]
.text:0000167D                 mov     [ebp+var_120], ecx
.text:00001683
.text:00001683 loc_1683:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+132j
.text:00001683                 mov     edx, [ebp+var_120]
.text:00001689                 push    edx
.text:0000168A                 mov     ecx, [ebp+this]
.text:0000168D                 add     ecx, 18h
.text:00001690                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:00001695                 mov     [ebp+var_124], eax
.text:0000169B                 mov     ecx, [ebp+var_124] ; this
.text:000016A1                 call    ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize(void)
.text:000016A6                 mov     [ebp+var_12C], eax
.text:000016AC                 mov     [ebp+var_128], edx
.text:000016B2                 mov     eax, [ebp+var_20]
.text:000016B5                 add     eax, [ebp+var_12C]
.text:000016BB                 mov     ecx, [ebp+var_1C]
.text:000016BE                 adc     ecx, [ebp+var_128]
.text:000016C4                 mov     [ebp+var_20], eax
.text:000016C7                 mov     [ebp+var_1C], ecx
.text:000016CA                 jmp     short loc_1650
.text:000016CC ; ---------------------------------------------------------------------------
.text:000016CC
.text:000016CC loc_16CC:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+11Fj
.text:000016CC                 mov     esi, esp
.text:000016CE                 mov     edx, [ebp+var_1C]
.text:000016D1                 push    edx
.text:000016D2                 mov     eax, [ebp+var_20]
.text:000016D5                 push    eax
.text:000016D6                 mov     ecx, [ebp+arg_10]
.text:000016D9                 push    ecx
.text:000016DA                 mov     edx, [ebp+arg_10]
.text:000016DD                 mov     eax, [edx]
.text:000016DF                 mov     ecx, [eax+0Ch]
.text:000016E2                 call    ecx
.text:000016E4                 cmp     esi, esp
.text:000016E6                 call    __RTC_CheckEsp
.text:000016EB                 mov     [ebp+var_2C], 0
.text:000016F2                 mov     [ebp+var_28], 0
.text:000016F9                 mov     edx, [ebp+var_2C]
.text:000016FC                 mov     [ebp+var_20], edx
.text:000016FF                 mov     eax, [ebp+var_28]
.text:00001702                 mov     [ebp+var_1C], eax
.text:00001705                 push    38h ; '8'       ; unsigned int
.text:00001707                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000170C                 add     esp, 4
.text:0000170F                 mov     [ebp+var_130], eax
.text:00001715                 mov     ecx, [ebp+var_130]
.text:0000171B                 mov     [ebp+var_C4], ecx
.text:00001721                 mov     byte ptr [ebp+var_4], 1
.text:00001725                 cmp     [ebp+var_C4], 0
.text:0000172C                 jz      short loc_174D
.text:0000172E                 mov     ecx, [ebp+var_C4]
.text:00001734                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00001739                 mov     [ebp+var_134], eax
.text:0000173F                 mov     edx, [ebp+var_134]
.text:00001745                 mov     [ebp+var_138], edx
.text:0000174B                 jmp     short loc_1757
.text:0000174D ; ---------------------------------------------------------------------------
.text:0000174D
.text:0000174D loc_174D:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1ECj
.text:0000174D                 mov     [ebp+var_138], 0
.text:00001757
.text:00001757 loc_1757:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+20Bj
.text:00001757                 mov     eax, [ebp+var_138]
.text:0000175D                 mov     [ebp+var_C0], eax
.text:00001763                 mov     byte ptr [ebp+var_4], 0
.text:00001767                 mov     ecx, [ebp+var_C0]
.text:0000176D                 mov     [ebp+var_30], ecx
.text:00001770                 mov     edx, [ebp+var_30]
.text:00001773                 push    edx
.text:00001774                 lea     ecx, [ebp+var_38]
.text:00001777                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:0000177C                 mov     byte ptr [ebp+var_4], 2
.text:00001780                 push    0               ; bool
.text:00001782                 mov     eax, [ebp+arg_10]
.text:00001785                 push    eax             ; struct IProgress *
.text:00001786                 mov     ecx, [ebp+var_30] ; this
.text:00001789                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:0000178E                 push    28h ; '('       ; unsigned int
.text:00001790                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001795                 add     esp, 4
.text:00001798                 mov     [ebp+var_13C], eax
.text:0000179E                 mov     ecx, [ebp+var_13C]
.text:000017A4                 mov     [ebp+var_CC], ecx
.text:000017AA                 mov     byte ptr [ebp+var_4], 3
.text:000017AE                 cmp     [ebp+var_CC], 0
.text:000017B5                 jz      short loc_17D6
.text:000017B7                 mov     ecx, [ebp+var_CC]
.text:000017BD                 call    ??0CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:000017C2                 mov     [ebp+var_140], eax
.text:000017C8                 mov     edx, [ebp+var_140]
.text:000017CE                 mov     [ebp+var_144], edx
.text:000017D4                 jmp     short loc_17E0
.text:000017D6 ; ---------------------------------------------------------------------------
.text:000017D6
.text:000017D6 loc_17D6:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+275j
.text:000017D6                 mov     [ebp+var_144], 0
.text:000017E0
.text:000017E0 loc_17E0:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+294j
.text:000017E0                 mov     eax, [ebp+var_144]
.text:000017E6                 mov     [ebp+var_C8], eax
.text:000017EC                 mov     byte ptr [ebp+var_4], 2
.text:000017F0                 mov     ecx, [ebp+var_C8]
.text:000017F6                 mov     [ebp+var_40], ecx
.text:000017F9                 mov     edx, [ebp+var_40]
.text:000017FC                 push    edx
.text:000017FD                 lea     ecx, [ebp+var_48]
.text:00001800                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)
.text:00001805                 mov     byte ptr [ebp+var_4], 4
.text:00001809                 mov     eax, [ebp+var_14]
.text:0000180C                 push    eax             ; struct ISequentialInStream *
.text:0000180D                 mov     ecx, [ebp+var_40] ; this
.text:00001810                 call    ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)
.text:00001815                 push    20h ; ' '       ; unsigned int
.text:00001817                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000181C                 add     esp, 4
.text:0000181F                 mov     [ebp+var_148], eax
.text:00001825                 mov     ecx, [ebp+var_148]
.text:0000182B                 mov     [ebp+var_D4], ecx
.text:00001831                 mov     byte ptr [ebp+var_4], 5
.text:00001835                 cmp     [ebp+var_D4], 0
.text:0000183C                 jz      short loc_185D
.text:0000183E                 mov     ecx, [ebp+var_D4]
.text:00001844                 call    ??0CLimitedSequentialOutStream@@QAE@XZ ; CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)
.text:00001849                 mov     [ebp+var_14C], eax
.text:0000184F                 mov     edx, [ebp+var_14C]
.text:00001855                 mov     [ebp+var_150], edx
.text:0000185B                 jmp     short loc_1867
.text:0000185D ; ---------------------------------------------------------------------------
.text:0000185D
.text:0000185D loc_185D:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2FCj
.text:0000185D                 mov     [ebp+var_150], 0
.text:00001867
.text:00001867 loc_1867:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+31Bj
.text:00001867                 mov     eax, [ebp+var_150]
.text:0000186D                 mov     [ebp+var_D0], eax
.text:00001873                 mov     byte ptr [ebp+var_4], 4
.text:00001877                 mov     ecx, [ebp+var_D0]
.text:0000187D                 mov     [ebp+var_50], ecx
.text:00001880                 mov     edx, [ebp+var_50]
.text:00001883                 push    edx
.text:00001884                 lea     ecx, [ebp+var_58]
.text:00001887                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)
.text:0000188C                 mov     byte ptr [ebp+var_4], 6
.text:00001890                 mov     [ebp+var_24], 0
.text:00001897                 jmp     short loc_18A2
.text:00001899 ; ---------------------------------------------------------------------------
.text:00001899
.text:00001899 loc_1899:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+713j
.text:00001899                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+752j ...
.text:00001899                 mov     eax, [ebp+var_24]
.text:0000189C                 add     eax, 1
.text:0000189F                 mov     [ebp+var_24], eax
.text:000018A2
.text:000018A2 loc_18A2:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+357j
.text:000018A2                 mov     ecx, [ebp+var_24]
.text:000018A5                 cmp     ecx, [ebp+arg_8]
.text:000018A8                 jb      short loc_18B6
.text:000018AA                 movzx   edx, [ebp+var_15]
.text:000018AE                 test    edx, edx
.text:000018B0                 jz      loc_2247
.text:000018B6
.text:000018B6 loc_18B6:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+368j
.text:000018B6                 mov     eax, [ebp+var_30]
.text:000018B9                 mov     ecx, [ebp+var_2C]
.text:000018BC                 mov     [eax+20h], ecx
.text:000018BF                 mov     edx, [ebp+var_28]
.text:000018C2                 mov     [eax+24h], edx
.text:000018C5                 mov     eax, [ebp+var_30]
.text:000018C8                 mov     ecx, [ebp+var_20]
.text:000018CB                 mov     [eax+28h], ecx
.text:000018CE                 mov     edx, [ebp+var_1C]
.text:000018D1                 mov     [eax+2Ch], edx
.text:000018D4                 mov     ecx, [ebp+var_30] ; this
.text:000018D7                 call    ?SetCur@CLocalProgress@@QAEJXZ ; CLocalProgress::SetCur(void)
.text:000018DC                 mov     [ebp+var_154], eax
.text:000018E2                 mov     eax, [ebp+var_154]
.text:000018E8                 mov     [ebp+var_60], eax
.text:000018EB                 cmp     [ebp+var_60], 0
.text:000018EF                 jz      short loc_1929
.text:000018F1                 mov     ecx, [ebp+var_60]
.text:000018F4                 mov     [ebp+var_D8], ecx
.text:000018FA                 mov     byte ptr [ebp+var_4], 4
.text:000018FE                 lea     ecx, [ebp+var_58]
.text:00001901                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001906                 mov     byte ptr [ebp+var_4], 2
.text:0000190A                 lea     ecx, [ebp+var_48]
.text:0000190D                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001912                 mov     byte ptr [ebp+var_4], 0
.text:00001916                 lea     ecx, [ebp+var_38]
.text:00001919                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000191E                 mov     eax, [ebp+var_D8]
.text:00001924                 jmp     loc_22A9
.text:00001929 ; ---------------------------------------------------------------------------
.text:00001929
.text:00001929 loc_1929:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3AFj
.text:00001929                 lea     ecx, [ebp+var_68]
.text:0000192C                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001931                 mov     [ebp+var_158], eax
.text:00001937                 mov     byte ptr [ebp+var_4], 7
.text:0000193B                 xor     edx, edx
.text:0000193D                 cmp     [ebp+arg_C], 0
.text:00001941                 setnz   dl
.text:00001944                 mov     [ebp+var_70], edx
.text:00001947                 movzx   eax, [ebp+var_16]
.text:0000194B                 test    eax, eax
.text:0000194D                 jz      short loc_195A
.text:0000194F                 mov     ecx, [ebp+var_24]
.text:00001952                 mov     [ebp+var_15C], ecx
.text:00001958                 jmp     short loc_1969
.text:0000195A ; ---------------------------------------------------------------------------
.text:0000195A
.text:0000195A loc_195A:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+40Dj
.text:0000195A                 mov     edx, [ebp+var_24]
.text:0000195D                 mov     eax, [ebp+arg_4]
.text:00001960                 mov     ecx, [eax+edx*4]
.text:00001963                 mov     [ebp+var_15C], ecx
.text:00001969
.text:00001969 loc_1969:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+418j
.text:00001969                 mov     edx, [ebp+var_15C]
.text:0000196F                 mov     [ebp+var_74], edx
.text:00001972                 movzx   eax, [ebp+var_15]
.text:00001976                 test    eax, eax
.text:00001978                 jz      loc_1A0E
.text:0000197E                 mov     ecx, [ebp+var_74]
.text:00001981                 push    ecx             ; unsigned int
.text:00001982                 mov     ecx, [ebp+this] ; this
.text:00001985                 call    ?SkipTo@CHandler@NTar@NArchive@@AAEJI@Z ; NArchive::NTar::CHandler::SkipTo(uint)
.text:0000198A                 mov     [ebp+var_160], eax
.text:00001990                 mov     edx, [ebp+var_160]
.text:00001996                 mov     [ebp+var_7C], edx
.text:00001999                 cmp     [ebp+var_7C], 80070057h
.text:000019A0                 jnz     short loc_19B3
.text:000019A2                 mov     byte ptr [ebp+var_4], 6
.text:000019A6                 lea     ecx, [ebp+var_68]
.text:000019A9                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019AE                 jmp     loc_2247
.text:000019B3 ; ---------------------------------------------------------------------------
.text:000019B3
.text:000019B3 loc_19B3:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+460j
.text:000019B3                 mov     eax, [ebp+var_7C]
.text:000019B6                 mov     [ebp+var_80], eax
.text:000019B9                 cmp     [ebp+var_80], 0
.text:000019BD                 jz      short loc_1A03
.text:000019BF                 mov     ecx, [ebp+var_80]
.text:000019C2                 mov     [ebp+var_DC], ecx
.text:000019C8                 mov     byte ptr [ebp+var_4], 6
.text:000019CC                 lea     ecx, [ebp+var_68]
.text:000019CF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019D4                 mov     byte ptr [ebp+var_4], 4
.text:000019D8                 lea     ecx, [ebp+var_58]
.text:000019DB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000019E0                 mov     byte ptr [ebp+var_4], 2
.text:000019E4                 lea     ecx, [ebp+var_48]
.text:000019E7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000019EC                 mov     byte ptr [ebp+var_4], 0
.text:000019F0                 lea     ecx, [ebp+var_38]
.text:000019F3                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000019F8                 mov     eax, [ebp+var_DC]
.text:000019FE                 jmp     loc_22A9
.text:00001A03 ; ---------------------------------------------------------------------------
.text:00001A03
.text:00001A03 loc_1A03:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+47Dj
.text:00001A03                 mov     edx, [ebp+this]
.text:00001A06                 add     edx, 38h ; '8'
.text:00001A09                 mov     [ebp+var_78], edx
.text:00001A0C                 jmp     short loc_1A2C
.text:00001A0E ; ---------------------------------------------------------------------------
.text:00001A0E
.text:00001A0E loc_1A0E:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+438j
.text:00001A0E                 mov     eax, [ebp+var_74]
.text:00001A11                 push    eax
.text:00001A12                 mov     ecx, [ebp+this]
.text:00001A15                 add     ecx, 18h
.text:00001A18                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:00001A1D                 mov     [ebp+var_164], eax
.text:00001A23                 mov     ecx, [ebp+var_164]
.text:00001A29                 mov     [ebp+var_78], ecx
.text:00001A2C
.text:00001A2C loc_1A2C:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4CCj
.text:00001A2C                 lea     ecx, [ebp+var_68]
.text:00001A2F                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001A34                 mov     [ebp+var_168], eax
.text:00001A3A                 mov     esi, esp
.text:00001A3C                 mov     edx, [ebp+var_70]
.text:00001A3F                 push    edx
.text:00001A40                 mov     eax, [ebp+var_168]
.text:00001A46                 push    eax
.text:00001A47                 mov     ecx, [ebp+var_74]
.text:00001A4A                 push    ecx
.text:00001A4B                 mov     edx, [ebp+arg_10]
.text:00001A4E                 push    edx
.text:00001A4F                 mov     eax, [ebp+arg_10]
.text:00001A52                 mov     ecx, [eax]
.text:00001A54                 mov     edx, [ecx+14h]
.text:00001A57                 call    edx
.text:00001A59                 cmp     esi, esp
.text:00001A5B                 call    __RTC_CheckEsp
.text:00001A60                 mov     [ebp+var_16C], eax
.text:00001A66                 mov     eax, [ebp+var_16C]
.text:00001A6C                 mov     [ebp+var_84], eax
.text:00001A72                 cmp     [ebp+var_84], 0
.text:00001A79                 jz      short loc_1AC2
.text:00001A7B                 mov     ecx, [ebp+var_84]
.text:00001A81                 mov     [ebp+var_E0], ecx
.text:00001A87                 mov     byte ptr [ebp+var_4], 6
.text:00001A8B                 lea     ecx, [ebp+var_68]
.text:00001A8E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A93                 mov     byte ptr [ebp+var_4], 4
.text:00001A97                 lea     ecx, [ebp+var_58]
.text:00001A9A                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001A9F                 mov     byte ptr [ebp+var_4], 2
.text:00001AA3                 lea     ecx, [ebp+var_48]
.text:00001AA6                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001AAB                 mov     byte ptr [ebp+var_4], 0
.text:00001AAF                 lea     ecx, [ebp+var_38]
.text:00001AB2                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001AB7                 mov     eax, [ebp+var_E0]
.text:00001ABD                 jmp     loc_22A9
.text:00001AC2 ; ---------------------------------------------------------------------------
.text:00001AC2
.text:00001AC2 loc_1AC2:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+539j
.text:00001AC2                 mov     ecx, [ebp+var_78] ; this
.text:00001AC5                 call    ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetUnpackSize(void)
.text:00001ACA                 mov     [ebp+var_174], eax
.text:00001AD0                 mov     [ebp+var_170], edx
.text:00001AD6                 mov     edx, [ebp+var_174]
.text:00001ADC                 mov     [ebp+var_8C], edx
.text:00001AE2                 mov     eax, [ebp+var_170]
.text:00001AE8                 mov     [ebp+var_88], eax
.text:00001AEE                 mov     ecx, [ebp+var_20]
.text:00001AF1                 add     ecx, [ebp+var_8C]
.text:00001AF7                 mov     edx, [ebp+var_1C]
.text:00001AFA                 adc     edx, [ebp+var_88]
.text:00001B00                 mov     [ebp+var_20], ecx
.text:00001B03                 mov     [ebp+var_1C], edx
.text:00001B06                 mov     ecx, [ebp+var_78] ; this
.text:00001B09                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:00001B0E                 mov     [ebp+var_17C], eax
.text:00001B14                 mov     [ebp+var_178], edx
.text:00001B1A                 mov     eax, [ebp+var_2C]
.text:00001B1D                 add     eax, [ebp+var_17C]
.text:00001B23                 mov     ecx, [ebp+var_28]
.text:00001B26                 adc     ecx, [ebp+var_178]
.text:00001B2C                 mov     [ebp+var_2C], eax
.text:00001B2F                 mov     [ebp+var_28], ecx
.text:00001B32                 mov     ecx, [ebp+var_78] ; this
.text:00001B35                 call    ?IsDir@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsDir(void)
.text:00001B3A                 mov     [ebp+var_17D], al
.text:00001B40                 movzx   edx, [ebp+var_17D]
.text:00001B47                 test    edx, edx
.text:00001B49                 jz      loc_1C58
.text:00001B4F                 mov     esi, esp
.text:00001B51                 mov     eax, [ebp+var_70]
.text:00001B54                 push    eax
.text:00001B55                 mov     ecx, [ebp+arg_10]
.text:00001B58                 push    ecx
.text:00001B59                 mov     edx, [ebp+arg_10]
.text:00001B5C                 mov     eax, [edx]
.text:00001B5E                 mov     ecx, [eax+18h]
.text:00001B61                 call    ecx
.text:00001B63                 cmp     esi, esp
.text:00001B65                 call    __RTC_CheckEsp
.text:00001B6A                 mov     [ebp+var_184], eax
.text:00001B70                 mov     edx, [ebp+var_184]
.text:00001B76                 mov     [ebp+var_90], edx
.text:00001B7C                 cmp     [ebp+var_90], 0
.text:00001B83                 jz      short loc_1BCC
.text:00001B85                 mov     eax, [ebp+var_90]
.text:00001B8B                 mov     [ebp+var_E4], eax
.text:00001B91                 mov     byte ptr [ebp+var_4], 6
.text:00001B95                 lea     ecx, [ebp+var_68]
.text:00001B98                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001B9D                 mov     byte ptr [ebp+var_4], 4
.text:00001BA1                 lea     ecx, [ebp+var_58]
.text:00001BA4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001BA9                 mov     byte ptr [ebp+var_4], 2
.text:00001BAD                 lea     ecx, [ebp+var_48]
.text:00001BB0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001BB5                 mov     byte ptr [ebp+var_4], 0
.text:00001BB9                 lea     ecx, [ebp+var_38]
.text:00001BBC                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001BC1                 mov     eax, [ebp+var_E4]
.text:00001BC7                 jmp     loc_22A9
.text:00001BCC ; ---------------------------------------------------------------------------
.text:00001BCC
.text:00001BCC loc_1BCC:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+643j
.text:00001BCC                 mov     esi, esp
.text:00001BCE                 push    0
.text:00001BD0                 mov     ecx, [ebp+arg_10]
.text:00001BD3                 push    ecx
.text:00001BD4                 mov     edx, [ebp+arg_10]
.text:00001BD7                 mov     eax, [edx]
.text:00001BD9                 mov     ecx, [eax+1Ch]
.text:00001BDC                 call    ecx
.text:00001BDE                 cmp     esi, esp
.text:00001BE0                 call    __RTC_CheckEsp
.text:00001BE5                 mov     [ebp+var_188], eax
.text:00001BEB                 mov     edx, [ebp+var_188]
.text:00001BF1                 mov     [ebp+var_94], edx
.text:00001BF7                 cmp     [ebp+var_94], 0
.text:00001BFE                 jz      short loc_1C47
.text:00001C00                 mov     eax, [ebp+var_94]
.text:00001C06                 mov     [ebp+var_E8], eax
.text:00001C0C                 mov     byte ptr [ebp+var_4], 6
.text:00001C10                 lea     ecx, [ebp+var_68]
.text:00001C13                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C18                 mov     byte ptr [ebp+var_4], 4
.text:00001C1C                 lea     ecx, [ebp+var_58]
.text:00001C1F                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C24                 mov     byte ptr [ebp+var_4], 2
.text:00001C28                 lea     ecx, [ebp+var_48]
.text:00001C2B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001C30                 mov     byte ptr [ebp+var_4], 0
.text:00001C34                 lea     ecx, [ebp+var_38]
.text:00001C37                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001C3C                 mov     eax, [ebp+var_E8]
.text:00001C42                 jmp     loc_22A9
.text:00001C47 ; ---------------------------------------------------------------------------
.text:00001C47
.text:00001C47 loc_1C47:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6BEj
.text:00001C47                 mov     byte ptr [ebp+var_4], 6
.text:00001C4B                 lea     ecx, [ebp+var_68]
.text:00001C4E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C53                 jmp     loc_1899
.text:00001C58 ; ---------------------------------------------------------------------------
.text:00001C58
.text:00001C58 loc_1C58:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+609j
.text:00001C58                 mov     [ebp+var_95], 0
.text:00001C5F                 cmp     [ebp+arg_C], 0
.text:00001C63                 jnz     short loc_1CA5
.text:00001C65                 lea     ecx, [ebp+var_68]
.text:00001C68                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001C6D                 mov     [ebp+var_189], al
.text:00001C73                 movzx   ecx, [ebp+var_189]
.text:00001C7A                 test    ecx, ecx
.text:00001C7C                 jz      short loc_1CA5
.text:00001C7E                 movzx   edx, [ebp+var_15]
.text:00001C82                 test    edx, edx
.text:00001C84                 jnz     short loc_1C97
.text:00001C86                 mov     byte ptr [ebp+var_4], 6
.text:00001C8A                 lea     ecx, [ebp+var_68]
.text:00001C8D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001C92                 jmp     loc_1899
.text:00001C97 ; ---------------------------------------------------------------------------
.text:00001C97
.text:00001C97 loc_1C97:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+744j
.text:00001C97                 mov     [ebp+var_95], 1
.text:00001C9E                 mov     [ebp+var_70], 2
.text:00001CA5
.text:00001CA5 loc_1CA5:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+723j
.text:00001CA5                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+73Cj
.text:00001CA5                 mov     esi, esp
.text:00001CA7                 mov     eax, [ebp+var_70]
.text:00001CAA                 push    eax
.text:00001CAB                 mov     ecx, [ebp+arg_10]
.text:00001CAE                 push    ecx
.text:00001CAF                 mov     edx, [ebp+arg_10]
.text:00001CB2                 mov     eax, [edx]
.text:00001CB4                 mov     ecx, [eax+18h]
.text:00001CB7                 call    ecx
.text:00001CB9                 cmp     esi, esp
.text:00001CBB                 call    __RTC_CheckEsp
.text:00001CC0                 mov     [ebp+var_190], eax
.text:00001CC6                 mov     edx, [ebp+var_190]
.text:00001CCC                 mov     [ebp+var_9C], edx
.text:00001CD2                 cmp     [ebp+var_9C], 0
.text:00001CD9                 jz      short loc_1D22
.text:00001CDB                 mov     eax, [ebp+var_9C]
.text:00001CE1                 mov     [ebp+var_EC], eax
.text:00001CE7                 mov     byte ptr [ebp+var_4], 6
.text:00001CEB                 lea     ecx, [ebp+var_68]
.text:00001CEE                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001CF3                 mov     byte ptr [ebp+var_4], 4
.text:00001CF7                 lea     ecx, [ebp+var_58]
.text:00001CFA                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001CFF                 mov     byte ptr [ebp+var_4], 2
.text:00001D03                 lea     ecx, [ebp+var_48]
.text:00001D06                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001D0B                 mov     byte ptr [ebp+var_4], 0
.text:00001D0F                 lea     ecx, [ebp+var_38]
.text:00001D12                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001D17                 mov     eax, [ebp+var_EC]
.text:00001D1D                 jmp     loc_22A9
.text:00001D22 ; ---------------------------------------------------------------------------
.text:00001D22
.text:00001D22 loc_1D22:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+799j
.text:00001D22                 lea     ecx, [ebp+var_68]
.text:00001D25                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001D2A                 mov     [ebp+var_194], eax
.text:00001D30                 mov     ecx, [ebp+var_194]
.text:00001D36                 push    ecx             ; struct ISequentialOutStream *
.text:00001D37                 mov     ecx, [ebp+var_50] ; this
.text:00001D3A                 call    ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream(ISequentialOutStream *)
.text:00001D3F                 lea     ecx, [ebp+var_68]
.text:00001D42                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00001D47                 movzx   edx, [ebp+var_95]
.text:00001D4E                 test    edx, edx
.text:00001D50                 jz      short loc_1D68
.text:00001D52                 mov     dword ptr [ebp+var_19C], 0
.text:00001D5C                 mov     dword ptr [ebp+var_19C+4], 0
.text:00001D66                 jmp     short loc_1D80
.text:00001D68 ; ---------------------------------------------------------------------------
.text:00001D68
.text:00001D68 loc_1D68:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+810j
.text:00001D68                 mov     eax, [ebp+var_8C]
.text:00001D6E                 mov     dword ptr [ebp+var_19C], eax
.text:00001D74                 mov     ecx, [ebp+var_88]
.text:00001D7A                 mov     dword ptr [ebp+var_19C+4], ecx
.text:00001D80
.text:00001D80 loc_1D80:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+826j
.text:00001D80                 push    1               ; bool
.text:00001D82                 mov     edx, dword ptr [ebp+var_19C+4]
.text:00001D88                 push    edx
.text:00001D89                 mov     eax, dword ptr [ebp+var_19C]
.text:00001D8F                 push    eax             ; unsigned __int64
.text:00001D90                 mov     ecx, [ebp+var_50] ; this
.text:00001D93                 call    ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ; CLimitedSequentialOutStream::Init(unsigned __int64,bool)
.text:00001D98                 mov     [ebp+var_A0], 0
.text:00001DA2                 lea     ecx, [ebp+var_A8]
.text:00001DA8                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00001DAD                 mov     [ebp+var_1A0], eax
.text:00001DB3                 mov     byte ptr [ebp+var_4], 8
.text:00001DB7                 mov     ecx, [ebp+var_78] ; this
.text:00001DBA                 call    ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSparse(void)
.text:00001DBF                 mov     [ebp+var_1A1], al
.text:00001DC5                 movzx   ecx, [ebp+var_1A1]
.text:00001DCC                 test    ecx, ecx
.text:00001DCE                 jnz     short loc_1DE4
.text:00001DD0                 lea     edx, [ebp+var_48]
.text:00001DD3                 push    edx
.text:00001DD4                 lea     ecx, [ebp+var_A8]
.text:00001DDA                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=(CMyComPtr<ISequentialInStream> const &)
.text:00001DDF                 jmp     loc_1E8B
.text:00001DE4 ; ---------------------------------------------------------------------------
.text:00001DE4
.text:00001DE4 loc_1DE4:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+88Ej
.text:00001DE4                 lea     ecx, [ebp+var_A8]
.text:00001DEA                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:00001DEF                 mov     [ebp+var_1A8], eax
.text:00001DF5                 mov     esi, esp
.text:00001DF7                 mov     eax, [ebp+var_1A8]
.text:00001DFD                 push    eax
.text:00001DFE                 mov     ecx, [ebp+var_74]
.text:00001E01                 push    ecx
.text:00001E02                 mov     edx, [ebp+this]
.text:00001E05                 add     edx, 8
.text:00001E08                 push    edx
.text:00001E09                 mov     eax, [ebp+this]
.text:00001E0C                 mov     ecx, [eax+8]
.text:00001E0F                 mov     edx, [ecx+0Ch]
.text:00001E12                 call    edx
.text:00001E14                 cmp     esi, esp
.text:00001E16                 call    __RTC_CheckEsp
.text:00001E1B                 lea     ecx, [ebp+var_A8]
.text:00001E21                 call    ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!(void)
.text:00001E26                 mov     [ebp+var_1A9], al
.text:00001E2C                 movzx   eax, [ebp+var_1A9]
.text:00001E33                 test    eax, eax
.text:00001E35                 jz      short loc_1E8B
.text:00001E37                 mov     [ebp+var_F0], 80004005h
.text:00001E41                 mov     byte ptr [ebp+var_4], 7
.text:00001E45                 lea     ecx, [ebp+var_A8]
.text:00001E4B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001E50                 mov     byte ptr [ebp+var_4], 6
.text:00001E54                 lea     ecx, [ebp+var_68]
.text:00001E57                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001E5C                 mov     byte ptr [ebp+var_4], 4
.text:00001E60                 lea     ecx, [ebp+var_58]
.text:00001E63                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001E68                 mov     byte ptr [ebp+var_4], 2
.text:00001E6C                 lea     ecx, [ebp+var_48]
.text:00001E6F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001E74                 mov     byte ptr [ebp+var_4], 0
.text:00001E78                 lea     ecx, [ebp+var_38]
.text:00001E7B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001E80                 mov     eax, [ebp+var_F0]
.text:00001E86                 jmp     loc_22A9
.text:00001E8B ; ---------------------------------------------------------------------------
.text:00001E8B
.text:00001E8B loc_1E8B:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+89Fj
.text:00001E8B                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8F5j
.text:00001E8B                 mov     ecx, [ebp+var_78] ; this
.text:00001E8E                 call    ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSymLink(void)
.text:00001E93                 mov     [ebp+var_1AA], al
.text:00001E99                 movzx   ecx, [ebp+var_1AA]
.text:00001EA0                 test    ecx, ecx
.text:00001EA2                 jz      loc_1F4B
.text:00001EA8                 mov     ecx, [ebp+var_78]
.text:00001EAB                 add     ecx, 3Ch ; '<'  ; this
.text:00001EAE                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00001EB3                 mov     [ebp+var_1B0], eax
.text:00001EB9                 mov     ecx, [ebp+var_78]
.text:00001EBC                 add     ecx, 3Ch ; '<'
.text:00001EBF                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00001EC4                 mov     [ebp+var_1B4], eax
.text:00001ECA                 mov     edx, [ebp+var_1B0]
.text:00001ED0                 push    edx             ; unsigned int
.text:00001ED1                 mov     eax, [ebp+var_1B4]
.text:00001ED7                 push    eax             ; void *
.text:00001ED8                 mov     ecx, [ebp+var_50]
.text:00001EDB                 push    ecx             ; struct ISequentialOutStream *
.text:00001EDC                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00001EE1                 mov     [ebp+var_B0], eax
.text:00001EE7                 cmp     [ebp+var_B0], 0
.text:00001EEE                 jz      short loc_1F46
.text:00001EF0                 mov     edx, [ebp+var_B0]
.text:00001EF6                 mov     [ebp+var_F4], edx
.text:00001EFC                 mov     byte ptr [ebp+var_4], 7
.text:00001F00                 lea     ecx, [ebp+var_A8]
.text:00001F06                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001F0B                 mov     byte ptr [ebp+var_4], 6
.text:00001F0F                 lea     ecx, [ebp+var_68]
.text:00001F12                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F17                 mov     byte ptr [ebp+var_4], 4
.text:00001F1B                 lea     ecx, [ebp+var_58]
.text:00001F1E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F23                 mov     byte ptr [ebp+var_4], 2
.text:00001F27                 lea     ecx, [ebp+var_48]
.text:00001F2A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001F2F                 mov     byte ptr [ebp+var_4], 0
.text:00001F33                 lea     ecx, [ebp+var_38]
.text:00001F36                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001F3B                 mov     eax, [ebp+var_F4]
.text:00001F41                 jmp     loc_22A9
.text:00001F46 ; ---------------------------------------------------------------------------
.text:00001F46
.text:00001F46 loc_1F46:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+9AEj
.text:00001F46                 jmp     loc_2146
.text:00001F4B ; ---------------------------------------------------------------------------
.text:00001F4B
.text:00001F4B loc_1F4B:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+962j
.text:00001F4B                 movzx   eax, [ebp+var_15]
.text:00001F4F                 test    eax, eax
.text:00001F51                 jnz     loc_2028
.text:00001F57                 mov     ecx, [ebp+this]
.text:00001F5A                 add     ecx, 24h ; '$'
.text:00001F5D                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00001F62                 mov     [ebp+var_1B8], eax
.text:00001F68                 mov     ecx, [ebp+var_1B8]
.text:00001F6E                 mov     [ebp+var_1BC], ecx
.text:00001F74                 mov     ecx, [ebp+var_78] ; this
.text:00001F77                 call    ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition(void)
.text:00001F7C                 mov     [ebp+var_1C4], eax
.text:00001F82                 mov     [ebp+var_1C0], edx
.text:00001F88                 mov     esi, esp
.text:00001F8A                 push    0
.text:00001F8C                 push    0
.text:00001F8E                 mov     edx, [ebp+var_1C0]
.text:00001F94                 push    edx
.text:00001F95                 mov     eax, [ebp+var_1C4]
.text:00001F9B                 push    eax
.text:00001F9C                 mov     ecx, [ebp+var_1BC]
.text:00001FA2                 push    ecx
.text:00001FA3                 mov     edx, [ebp+var_1BC]
.text:00001FA9                 mov     eax, [edx]
.text:00001FAB                 mov     ecx, [eax+10h]
.text:00001FAE                 call    ecx
.text:00001FB0                 cmp     esi, esp
.text:00001FB2                 call    __RTC_CheckEsp
.text:00001FB7                 mov     [ebp+var_1C8], eax
.text:00001FBD                 mov     edx, [ebp+var_1C8]
.text:00001FC3                 mov     [ebp+var_B4], edx
.text:00001FC9                 cmp     [ebp+var_B4], 0
.text:00001FD0                 jz      short loc_2028
.text:00001FD2                 mov     eax, [ebp+var_B4]
.text:00001FD8                 mov     [ebp+var_F8], eax
.text:00001FDE                 mov     byte ptr [ebp+var_4], 7
.text:00001FE2                 lea     ecx, [ebp+var_A8]
.text:00001FE8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00001FED                 mov     byte ptr [ebp+var_4], 6
.text:00001FF1                 lea     ecx, [ebp+var_68]
.text:00001FF4                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001FF9                 mov     byte ptr [ebp+var_4], 4
.text:00001FFD                 lea     ecx, [ebp+var_58]
.text:00002000                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002005                 mov     byte ptr [ebp+var_4], 2
.text:00002009                 lea     ecx, [ebp+var_48]
.text:0000200C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002011                 mov     byte ptr [ebp+var_4], 0
.text:00002015                 lea     ecx, [ebp+var_38]
.text:00002018                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000201D                 mov     eax, [ebp+var_F8]
.text:00002023                 jmp     loc_22A9
.text:00002028 ; ---------------------------------------------------------------------------
.text:00002028
.text:00002028 loc_2028:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A11j
.text:00002028                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A90j
.text:00002028                 mov     ecx, [ebp+var_78] ; this
.text:0000202B                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:00002030                 mov     dword ptr [ebp+var_1D0], eax
.text:00002036                 mov     dword ptr [ebp+var_1D0+4], edx
.text:0000203C                 mov     ecx, dword ptr [ebp+var_1D0+4]
.text:00002042                 push    ecx
.text:00002043                 mov     edx, dword ptr [ebp+var_1D0]
.text:00002049                 push    edx             ; unsigned __int64
.text:0000204A                 mov     ecx, [ebp+var_40] ; this
.text:0000204D                 call    ?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init(unsigned __int64)
.text:00002052                 mov     ecx, [ebp+this]
.text:00002055                 add     ecx, 0ECh ; '8'
.text:0000205B                 call    ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->(void)
.text:00002060                 mov     [ebp+var_1D4], eax
.text:00002066                 mov     eax, [ebp+var_1D4]
.text:0000206C                 mov     [ebp+var_1D8], eax
.text:00002072                 lea     ecx, [ebp+var_38]
.text:00002075                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:0000207A                 mov     [ebp+var_1DC], eax
.text:00002080                 lea     ecx, [ebp+var_58]
.text:00002083                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00002088                 mov     [ebp+var_1E0], eax
.text:0000208E                 lea     ecx, [ebp+var_A8]
.text:00002094                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00002099                 mov     [ebp+var_1E4], eax
.text:0000209F                 mov     esi, esp
.text:000020A1                 mov     ecx, [ebp+var_1DC]
.text:000020A7                 push    ecx
.text:000020A8                 push    0
.text:000020AA                 push    0
.text:000020AC                 mov     edx, [ebp+var_1E0]
.text:000020B2                 push    edx
.text:000020B3                 mov     eax, [ebp+var_1E4]
.text:000020B9                 push    eax
.text:000020BA                 mov     ecx, [ebp+var_1D8]
.text:000020C0                 push    ecx
.text:000020C1                 mov     edx, [ebp+var_1D8]
.text:000020C7                 mov     eax, [edx]
.text:000020C9                 mov     ecx, [eax+0Ch]
.text:000020CC                 call    ecx
.text:000020CE                 cmp     esi, esp
.text:000020D0                 call    __RTC_CheckEsp
.text:000020D5                 mov     [ebp+var_1E8], eax
.text:000020DB                 mov     edx, [ebp+var_1E8]
.text:000020E1                 mov     [ebp+var_B8], edx
.text:000020E7                 cmp     [ebp+var_B8], 0
.text:000020EE                 jz      short loc_2146
.text:000020F0                 mov     eax, [ebp+var_B8]
.text:000020F6                 mov     [ebp+var_FC], eax
.text:000020FC                 mov     byte ptr [ebp+var_4], 7
.text:00002100                 lea     ecx, [ebp+var_A8]
.text:00002106                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000210B                 mov     byte ptr [ebp+var_4], 6
.text:0000210F                 lea     ecx, [ebp+var_68]
.text:00002112                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002117                 mov     byte ptr [ebp+var_4], 4
.text:0000211B                 lea     ecx, [ebp+var_58]
.text:0000211E                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002123                 mov     byte ptr [ebp+var_4], 2
.text:00002127                 lea     ecx, [ebp+var_48]
.text:0000212A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000212F                 mov     byte ptr [ebp+var_4], 0
.text:00002133                 lea     ecx, [ebp+var_38]
.text:00002136                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000213B                 mov     eax, [ebp+var_FC]
.text:00002141                 jmp     loc_22A9
.text:00002146 ; ---------------------------------------------------------------------------
.text:00002146
.text:00002146 loc_2146:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_1F46j
.text:00002146                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+BAEj
.text:00002146                 mov     ecx, [ebp+var_50] ; this
.text:00002149                 call    ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ; CLimitedSequentialOutStream::GetRem(void)
.text:0000214E                 mov     [ebp+var_1F0], eax
.text:00002154                 mov     [ebp+var_1EC], edx
.text:0000215A                 mov     ecx, [ebp+var_1F0]
.text:00002160                 or      ecx, [ebp+var_1EC]
.text:00002166                 jz      short loc_2172
.text:00002168                 mov     [ebp+var_A0], 2
.text:00002172
.text:00002172 loc_2172:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C26j
.text:00002172                 movzx   edx, [ebp+var_15]
.text:00002176                 test    edx, edx
.text:00002178                 jz      short loc_2190
.text:0000217A                 mov     eax, [ebp+this]
.text:0000217D                 mov     byte ptr [eax+30h], 0
.text:00002181                 mov     ecx, [ebp+this]
.text:00002184                 mov     edx, [ecx+2Ch]
.text:00002187                 add     edx, 1
.text:0000218A                 mov     eax, [ebp+this]
.text:0000218D                 mov     [eax+2Ch], edx
.text:00002190
.text:00002190 loc_2190:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C38j
.text:00002190                 mov     ecx, [ebp+var_50] ; this
.text:00002193                 call    ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream(void)
.text:00002198                 mov     esi, esp
.text:0000219A                 mov     ecx, [ebp+var_A0]
.text:000021A0                 push    ecx
.text:000021A1                 mov     edx, [ebp+arg_10]
.text:000021A4                 push    edx
.text:000021A5                 mov     eax, [ebp+arg_10]
.text:000021A8                 mov     ecx, [eax]
.text:000021AA                 mov     edx, [ecx+1Ch]
.text:000021AD                 call    edx
.text:000021AF                 cmp     esi, esp
.text:000021B1                 call    __RTC_CheckEsp
.text:000021B6                 mov     [ebp+var_1F4], eax
.text:000021BC                 mov     eax, [ebp+var_1F4]
.text:000021C2                 mov     [ebp+var_BC], eax
.text:000021C8                 cmp     [ebp+var_BC], 0
.text:000021CF                 jz      short loc_2227
.text:000021D1                 mov     ecx, [ebp+var_BC]
.text:000021D7                 mov     [ebp+var_100], ecx
.text:000021DD                 mov     byte ptr [ebp+var_4], 7
.text:000021E1                 lea     ecx, [ebp+var_A8]
.text:000021E7                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000021EC                 mov     byte ptr [ebp+var_4], 6
.text:000021F0                 lea     ecx, [ebp+var_68]
.text:000021F3                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:000021F8                 mov     byte ptr [ebp+var_4], 4
.text:000021FC                 lea     ecx, [ebp+var_58]
.text:000021FF                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002204                 mov     byte ptr [ebp+var_4], 2
.text:00002208                 lea     ecx, [ebp+var_48]
.text:0000220B                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002210                 mov     byte ptr [ebp+var_4], 0
.text:00002214                 lea     ecx, [ebp+var_38]
.text:00002217                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000221C                 mov     eax, [ebp+var_100]
.text:00002222                 jmp     loc_22A9
.text:00002227 ; ---------------------------------------------------------------------------
.text:00002227
.text:00002227 loc_2227:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C8Fj
.text:00002227                 mov     byte ptr [ebp+var_4], 7
.text:0000222B                 lea     ecx, [ebp+var_A8]
.text:00002231                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002236                 mov     byte ptr [ebp+var_4], 6
.text:0000223A                 lea     ecx, [ebp+var_68]
.text:0000223D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002242                 jmp     loc_1899
.text:00002247 ; ---------------------------------------------------------------------------
.text:00002247
.text:00002247 loc_2247:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+370j
.text:00002247                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+46Ej
.text:00002247                 mov     [ebp+var_104], 0
.text:00002251                 mov     byte ptr [ebp+var_4], 4
.text:00002255                 lea     ecx, [ebp+var_58]
.text:00002258                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:0000225D                 mov     byte ptr [ebp+var_4], 2
.text:00002261                 lea     ecx, [ebp+var_48]
.text:00002264                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002269                 mov     byte ptr [ebp+var_4], 0
.text:0000226D                 lea     ecx, [ebp+var_38]
.text:00002270                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002275                 mov     eax, [ebp+var_104]
.text:0000227B                 jmp     short loc_22A9
.text:0000227B ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:0000227B
.text:0000227D
.text:0000227D ; =============== S U B R O U T I N E =======================================
.text:0000227D
.text:0000227D
.text:0000227D __catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:0000227D                                         ; DATA XREF: .xdata$x:00003134o
.text:0000227D                 mov     dword ptr [ebp-108h], 8007000Eh
.text:00002287                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000228E                 mov     eax, offset $LN61
.text:00002293                 retn
.text:00002293 __catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00002293
.text:00002294 ; ---------------------------------------------------------------------------
.text:00002294                 mov     eax, offset __tryend$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:00002299                 retn
.text:0000229A ; ---------------------------------------------------------------------------
.text:0000229A
.text:0000229A __tryend$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:0000229A                                         ; DATA XREF: .text:00002294o
.text:0000229A                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000022A1                 jmp     short loc_22A9
.text:000022A3 ; ---------------------------------------------------------------------------
.text:000022A3
.text:000022A3 $LN61:                                  ; DATA XREF: __catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:000022A3                 mov     eax, [ebp-108h]
.text:000022A9 ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000022A9
.text:000022A9 loc_22A9:                               ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+F4j
.text:000022A9                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3E4j ...
.text:000022A9                 push    edx
.text:000022AA                 mov     ecx, ebp
.text:000022AC                 push    eax
.text:000022AD                 lea     edx, $LN70
.text:000022B3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000022B8                 pop     eax
.text:000022B9                 pop     edx
.text:000022BA                 mov     ecx, [ebp+var_C]
.text:000022BD                 mov     large fs:0, ecx
.text:000022C4                 pop     ecx
.text:000022C5                 pop     edi
.text:000022C6                 pop     esi
.text:000022C7                 pop     ebx
.text:000022C8                 add     esp, 1F4h
.text:000022CE                 cmp     ebp, esp
.text:000022D0                 call    __RTC_CheckEsp
.text:000022D5                 mov     esp, ebp
.text:000022D7                 pop     ebp
.text:000022D8                 retn    14h
.text:000022D8 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000022D8 ; ---------------------------------------------------------------------------
.text:000022DB                 align 4
.text:000022DC $LN70           dd 5                    ; DATA XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+D6Do
.text:000022E0                 dd offset $LN69
.text:000022E4 $LN69           dd 0FFFFFFC8h, 4        ; DATA XREF: .text:000022E0o
.text:000022EC                 dd offset $LN63         ; "progress"
.text:000022F0                 dd 0FFFFFFB8h, 4
.text:000022F8                 dd offset $LN64         ; "inStream"
.text:000022FC                 dd 0FFFFFFA8h, 4
.text:00002304                 dd offset $LN65         ; "outStream"
.text:00002308                 dd 0FFFFFF98h, 4
.text:00002310                 dd offset $LN66         ; "realOutStream"
.text:00002314                 dd 0FFFFFF58h, 4
.text:0000231C                 dd offset $LN67         ; "inStream2"
.text:00002320 $LN67           db 'inStream2',0        ; DATA XREF: .text:0000231Co
.text:0000232A $LN66           db 'realOutStream',0    ; DATA XREF: .text:00002310o
.text:00002338 $LN65           db 'outStream',0        ; DATA XREF: .text:00002304o
.text:00002342 $LN64           db 'inStream',0         ; DATA XREF: .text:000022F8o
.text:0000234B $LN63           db 'progress',0         ; DATA XREF: .text:000022ECo
.text:00002354                 align 10h
.text:00002360
.text:00002360 ; =============== S U B R O U T I N E =======================================
.text:00002360
.text:00002360 ; Attributes: bp-based frame
.text:00002360
.text:00002360 ; __int32 __stdcall NArchive::NTar::CSparseStream::Read(NArchive::NTar::CSparseStream *this, void *Dst, size_t Size, unsigned int *)
.text:00002360                 public ?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z
.text:00002360 ?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z proc near
.text:00002360                                         ; DATA XREF: .rdata:000050C8o
.text:00002360
.text:00002360 var_94          = dword ptr -94h
.text:00002360 var_90          = dword ptr -90h
.text:00002360 var_8C          = dword ptr -8Ch
.text:00002360 var_88          = dword ptr -88h
.text:00002360 var_84          = dword ptr -84h
.text:00002360 var_80          = dword ptr -80h
.text:00002360 var_7C          = dword ptr -7Ch
.text:00002360 var_78          = dword ptr -78h
.text:00002360 var_74          = dword ptr -74h
.text:00002360 var_70          = dword ptr -70h
.text:00002360 var_6C          = dword ptr -6Ch
.text:00002360 var_68          = dword ptr -68h
.text:00002360 var_64          = dword ptr -64h
.text:00002360 var_60          = dword ptr -60h
.text:00002360 var_5C          = dword ptr -5Ch
.text:00002360 var_58          = dword ptr -58h
.text:00002360 var_54          = dword ptr -54h
.text:00002360 var_50          = dword ptr -50h
.text:00002360 var_4C          = dword ptr -4Ch
.text:00002360 var_48          = dword ptr -48h
.text:00002360 var_44          = dword ptr -44h
.text:00002360 var_40          = dword ptr -40h
.text:00002360 var_3C          = dword ptr -3Ch
.text:00002360 var_38          = dword ptr -38h
.text:00002360 var_34          = dword ptr -34h
.text:00002360 var_30          = dword ptr -30h
.text:00002360 var_2C          = dword ptr -2Ch
.text:00002360 var_28          = dword ptr -28h
.text:00002360 var_24          = dword ptr -24h
.text:00002360 var_20          = dword ptr -20h
.text:00002360 var_1C          = dword ptr -1Ch
.text:00002360 var_18          = dword ptr -18h
.text:00002360 var_14          = dword ptr -14h
.text:00002360 var_10          = dword ptr -10h
.text:00002360 var_C           = dword ptr -0Ch
.text:00002360 var_8           = dword ptr -8
.text:00002360 var_4           = dword ptr -4
.text:00002360 this            = dword ptr  8
.text:00002360 Dst             = dword ptr  0Ch
.text:00002360 Size            = dword ptr  10h
.text:00002360 arg_C           = dword ptr  14h
.text:00002360
.text:00002360                 push    ebp
.text:00002361                 mov     ebp, esp
.text:00002363                 sub     esp, 94h
.text:00002369                 push    esi
.text:0000236A                 push    edi
.text:0000236B                 lea     edi, [ebp+var_94]
.text:00002371                 mov     ecx, 25h ; '%'
.text:00002376                 mov     eax, 0CCCCCCCCh
.text:0000237B                 rep stosd
.text:0000237D                 cmp     [ebp+arg_C], 0
.text:00002381                 jz      short loc_238C
.text:00002383                 mov     eax, [ebp+arg_C]
.text:00002386                 mov     dword ptr [eax], 0
.text:0000238C
.text:0000238C loc_238C:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+21j
.text:0000238C                 cmp     [ebp+Size], 0
.text:00002390                 jnz     short loc_2399
.text:00002392                 xor     eax, eax
.text:00002394                 jmp     loc_2784
.text:00002399 ; ---------------------------------------------------------------------------
.text:00002399
.text:00002399 loc_2399:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+30j
.text:00002399                 mov     ecx, [ebp+this]
.text:0000239C                 mov     edx, [ecx+24h]
.text:0000239F                 push    edx
.text:000023A0                 mov     eax, [ebp+this]
.text:000023A3                 mov     ecx, [eax+1Ch]
.text:000023A6                 add     ecx, 18h
.text:000023A9                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:000023AE                 mov     [ebp+var_4], eax
.text:000023B1                 mov     ecx, [ebp+this]
.text:000023B4                 mov     edx, [ebp+var_4]
.text:000023B7                 mov     [ebp+var_50], ecx
.text:000023BA                 mov     [ebp+var_54], edx
.text:000023BD                 mov     eax, [ebp+var_50]
.text:000023C0                 mov     ecx, [ebp+var_54]
.text:000023C3                 mov     edx, [eax+14h]
.text:000023C6                 cmp     edx, [ecx+1Ch]
.text:000023C9                 jb      short loc_23E2
.text:000023CB                 ja      short loc_23DB
.text:000023CD                 mov     eax, [ebp+var_50]
.text:000023D0                 mov     ecx, [ebp+var_54]
.text:000023D3                 mov     edx, [eax+10h]
.text:000023D6                 cmp     edx, [ecx+18h]
.text:000023D9                 jb      short loc_23E2
.text:000023DB
.text:000023DB loc_23DB:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+6Bj
.text:000023DB                 xor     eax, eax
.text:000023DD                 jmp     loc_2784
.text:000023E2 ; ---------------------------------------------------------------------------
.text:000023E2
.text:000023E2 loc_23E2:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+69j
.text:000023E2                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+79j
.text:000023E2                 mov     eax, [ebp+var_4]
.text:000023E5                 mov     ecx, [ebp+this]
.text:000023E8                 mov     edx, [eax+18h]
.text:000023EB                 sub     edx, [ecx+10h]
.text:000023EE                 mov     eax, [eax+1Ch]
.text:000023F1                 sbb     eax, [ecx+14h]
.text:000023F4                 mov     [ebp+var_C], edx
.text:000023F7                 mov     [ebp+var_8], eax
.text:000023FA                 mov     ecx, [ebp+Size]
.text:000023FD                 xor     edx, edx
.text:000023FF                 mov     [ebp+var_5C], ecx
.text:00002402                 mov     [ebp+var_58], edx
.text:00002405                 mov     eax, [ebp+var_58]
.text:00002408                 cmp     eax, [ebp+var_8]
.text:0000240B                 jb      short loc_241D
.text:0000240D                 ja      short loc_2417
.text:0000240F                 mov     ecx, [ebp+var_5C]
.text:00002412                 cmp     ecx, [ebp+var_C]
.text:00002415                 jbe     short loc_241D
.text:00002417
.text:00002417 loc_2417:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+ADj
.text:00002417                 mov     edx, [ebp+var_C]
.text:0000241A                 mov     [ebp+Size], edx
.text:0000241D
.text:0000241D loc_241D:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+ABj
.text:0000241D                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+B5j
.text:0000241D                 mov     [ebp+var_10], 0
.text:00002424                 mov     ecx, [ebp+var_4]
.text:00002427                 add     ecx, 6Ch ; 'l'
.text:0000242A                 call    ?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::IsEmpty(void)
.text:0000242F                 movzx   eax, al
.text:00002432                 test    eax, eax
.text:00002434                 jz      short loc_244D
.text:00002436                 mov     ecx, [ebp+Size]
.text:00002439                 push    ecx             ; Size
.text:0000243A                 push    0               ; Val
.text:0000243C                 mov     edx, [ebp+Dst]
.text:0000243F                 push    edx             ; Dst
.text:00002440                 call    _memset
.text:00002445                 add     esp, 0Ch
.text:00002448                 jmp     loc_275C
.text:0000244D ; ---------------------------------------------------------------------------
.text:0000244D
.text:0000244D loc_244D:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+D4j
.text:0000244D                 mov     [ebp+var_14], 0
.text:00002454                 mov     ecx, [ebp+var_4]
.text:00002457                 add     ecx, 6Ch ; 'l'
.text:0000245A                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:0000245F                 mov     [ebp+var_18], eax
.text:00002462
.text:00002462 loc_2462:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *):loc_24BAj
.text:00002462                 mov     eax, [ebp+var_14]
.text:00002465                 add     eax, [ebp+var_18]
.text:00002468                 shr     eax, 1
.text:0000246A                 mov     [ebp+var_1C], eax
.text:0000246D                 mov     ecx, [ebp+var_1C]
.text:00002470                 cmp     ecx, [ebp+var_14]
.text:00002473                 jnz     short loc_2477
.text:00002475                 jmp     short loc_24BC
.text:00002477 ; ---------------------------------------------------------------------------
.text:00002477
.text:00002477 loc_2477:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+113j
.text:00002477                 mov     edx, [ebp+var_1C]
.text:0000247A                 push    edx
.text:0000247B                 mov     ecx, [ebp+var_4]
.text:0000247E                 add     ecx, 6Ch ; 'l'
.text:00002481                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:00002486                 mov     ecx, [ebp+this]
.text:00002489                 mov     [ebp+var_60], ecx
.text:0000248C                 mov     [ebp+var_64], eax
.text:0000248F                 mov     edx, [ebp+var_60]
.text:00002492                 mov     eax, [ebp+var_64]
.text:00002495                 mov     ecx, [edx+14h]
.text:00002498                 cmp     ecx, [eax+4]
.text:0000249B                 ja      short loc_24B4
.text:0000249D                 jb      short loc_24AC
.text:0000249F                 mov     edx, [ebp+var_60]
.text:000024A2                 mov     eax, [ebp+var_64]
.text:000024A5                 mov     ecx, [edx+10h]
.text:000024A8                 cmp     ecx, [eax]
.text:000024AA                 jnb     short loc_24B4
.text:000024AC
.text:000024AC loc_24AC:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+13Dj
.text:000024AC                 mov     edx, [ebp+var_1C]
.text:000024AF                 mov     [ebp+var_18], edx
.text:000024B2                 jmp     short loc_24BA
.text:000024B4 ; ---------------------------------------------------------------------------
.text:000024B4
.text:000024B4 loc_24B4:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+13Bj
.text:000024B4                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+14Aj
.text:000024B4                 mov     eax, [ebp+var_1C]
.text:000024B7                 mov     [ebp+var_14], eax
.text:000024BA
.text:000024BA loc_24BA:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+152j
.text:000024BA                 jmp     short loc_2462
.text:000024BC ; ---------------------------------------------------------------------------
.text:000024BC
.text:000024BC loc_24BC:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+115j
.text:000024BC                 mov     ecx, [ebp+var_14]
.text:000024BF                 push    ecx
.text:000024C0                 mov     ecx, [ebp+var_4]
.text:000024C3                 add     ecx, 6Ch ; 'l'
.text:000024C6                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:000024CB                 mov     [ebp+var_20], eax
.text:000024CE                 mov     edx, [ebp+this]
.text:000024D1                 mov     eax, [ebp+var_20]
.text:000024D4                 mov     ecx, [edx+10h]
.text:000024D7                 sub     ecx, [eax]
.text:000024D9                 mov     edx, [edx+14h]
.text:000024DC                 sbb     edx, [eax+4]
.text:000024DF                 mov     [ebp+var_28], ecx
.text:000024E2                 mov     [ebp+var_24], edx
.text:000024E5                 mov     eax, [ebp+this]
.text:000024E8                 mov     ecx, [ebp+var_20]
.text:000024EB                 mov     [ebp+var_68], eax
.text:000024EE                 mov     [ebp+var_6C], ecx
.text:000024F1                 mov     edx, [ebp+var_68]
.text:000024F4                 mov     eax, [ebp+var_6C]
.text:000024F7                 mov     ecx, [edx+14h]
.text:000024FA                 cmp     ecx, [eax+4]
.text:000024FD                 jb      loc_267A
.text:00002503                 ja      short loc_2516
.text:00002505                 mov     edx, [ebp+var_68]
.text:00002508                 mov     eax, [ebp+var_6C]
.text:0000250B                 mov     ecx, [edx+10h]
.text:0000250E                 cmp     ecx, [eax]
.text:00002510                 jb      loc_267A
.text:00002516
.text:00002516 loc_2516:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+1A3j
.text:00002516                 mov     edx, [ebp+var_20]
.text:00002519                 mov     [ebp+var_70], edx
.text:0000251C                 mov     eax, [ebp+var_70]
.text:0000251F                 mov     ecx, [ebp+var_24]
.text:00002522                 cmp     ecx, [eax+0Ch]
.text:00002525                 ja      loc_267A
.text:0000252B                 jb      short loc_253C
.text:0000252D                 mov     edx, [ebp+var_70]
.text:00002530                 mov     eax, [ebp+var_28]
.text:00002533                 cmp     eax, [edx+8]
.text:00002536                 jnb     loc_267A
.text:0000253C
.text:0000253C loc_253C:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+1CBj
.text:0000253C                 mov     ecx, [ebp+var_20]
.text:0000253F                 mov     edx, [ecx+8]
.text:00002542                 sub     edx, [ebp+var_28]
.text:00002545                 mov     eax, [ecx+0Ch]
.text:00002548                 sbb     eax, [ebp+var_24]
.text:0000254B                 mov     [ebp+var_30], edx
.text:0000254E                 mov     [ebp+var_2C], eax
.text:00002551                 mov     ecx, [ebp+Size]
.text:00002554                 xor     edx, edx
.text:00002556                 mov     [ebp+var_78], ecx
.text:00002559                 mov     [ebp+var_74], edx
.text:0000255C                 mov     eax, [ebp+var_74]
.text:0000255F                 cmp     eax, [ebp+var_2C]
.text:00002562                 jb      short loc_2574
.text:00002564                 ja      short loc_256E
.text:00002566                 mov     ecx, [ebp+var_78]
.text:00002569                 cmp     ecx, [ebp+var_30]
.text:0000256C                 jbe     short loc_2574
.text:0000256E
.text:0000256E loc_256E:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+204j
.text:0000256E                 mov     edx, [ebp+var_30]
.text:00002571                 mov     [ebp+Size], edx
.text:00002574
.text:00002574 loc_2574:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+202j
.text:00002574                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+20Cj
.text:00002574                 mov     eax, [ebp+var_14]
.text:00002577                 push    eax
.text:00002578                 mov     ecx, [ebp+this]
.text:0000257B                 add     ecx, 28h ; '('
.text:0000257E                 call    ??A?$CRecordVector@_K@@QAEAA_KI@Z ; CRecordVector<unsigned __int64>::operator[](uint)
.text:00002583                 mov     ecx, [eax]
.text:00002585                 add     ecx, [ebp+var_28]
.text:00002588                 mov     edx, [eax+4]
.text:0000258B                 adc     edx, [ebp+var_24]
.text:0000258E                 mov     [ebp+var_38], ecx
.text:00002591                 mov     [ebp+var_34], edx
.text:00002594                 mov     eax, [ebp+this]
.text:00002597                 movzx   ecx, byte ptr [eax+18h]
.text:0000259B                 test    ecx, ecx
.text:0000259D                 jnz     short loc_25BB
.text:0000259F                 mov     edx, [ebp+this]
.text:000025A2                 mov     [ebp+var_7C], edx
.text:000025A5                 mov     eax, [ebp+var_7C]
.text:000025A8                 mov     ecx, [eax+8]
.text:000025AB                 cmp     ecx, [ebp+var_38]
.text:000025AE                 jnz     short loc_25BB
.text:000025B0                 mov     edx, [ebp+var_7C]
.text:000025B3                 mov     eax, [edx+0Ch]
.text:000025B6                 cmp     eax, [ebp+var_34]
.text:000025B9                 jz      short loc_261E
.text:000025BB
.text:000025BB loc_25BB:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+23Dj
.text:000025BB                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+24Ej
.text:000025BB                 mov     ecx, [ebp+this]
.text:000025BE                 mov     ecx, [ecx+1Ch]
.text:000025C1                 add     ecx, 24h ; '$'
.text:000025C4                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:000025C9                 mov     [ebp+var_80], eax
.text:000025CC                 mov     esi, esp
.text:000025CE                 push    0
.text:000025D0                 push    0
.text:000025D2                 mov     ecx, [ebp+var_4] ; this
.text:000025D5                 call    ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition(void)
.text:000025DA                 add     eax, [ebp+var_38]
.text:000025DD                 adc     edx, [ebp+var_34]
.text:000025E0                 push    edx
.text:000025E1                 push    eax
.text:000025E2                 mov     edx, [ebp+var_80]
.text:000025E5                 push    edx
.text:000025E6                 mov     eax, [ebp+var_80]
.text:000025E9                 mov     ecx, [eax]
.text:000025EB                 mov     edx, [ecx+10h]
.text:000025EE                 call    edx
.text:000025F0                 cmp     esi, esp
.text:000025F2                 call    __RTC_CheckEsp
.text:000025F7                 mov     [ebp+var_3C], eax
.text:000025FA                 cmp     [ebp+var_3C], 0
.text:000025FE                 jz      short loc_2608
.text:00002600                 mov     eax, [ebp+var_3C]
.text:00002603                 jmp     loc_2784
.text:00002608 ; ---------------------------------------------------------------------------
.text:00002608
.text:00002608 loc_2608:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+29Ej
.text:00002608                 mov     eax, [ebp+this]
.text:0000260B                 mov     byte ptr [eax+18h], 0
.text:0000260F                 mov     ecx, [ebp+this]
.text:00002612                 mov     edx, [ebp+var_38]
.text:00002615                 mov     [ecx+8], edx
.text:00002618                 mov     eax, [ebp+var_34]
.text:0000261B                 mov     [ecx+0Ch], eax
.text:0000261E
.text:0000261E loc_261E:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+259j
.text:0000261E                 mov     ecx, [ebp+this]
.text:00002621                 mov     ecx, [ecx+1Ch]
.text:00002624                 add     ecx, 24h ; '$'
.text:00002627                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:0000262C                 mov     [ebp+var_84], eax
.text:00002632                 mov     esi, esp
.text:00002634                 lea     edx, [ebp+Size]
.text:00002637                 push    edx
.text:00002638                 mov     eax, [ebp+Size]
.text:0000263B                 push    eax
.text:0000263C                 mov     ecx, [ebp+Dst]
.text:0000263F                 push    ecx
.text:00002640                 mov     edx, [ebp+var_84]
.text:00002646                 push    edx
.text:00002647                 mov     eax, [ebp+var_84]
.text:0000264D                 mov     ecx, [eax]
.text:0000264F                 mov     edx, [ecx+0Ch]
.text:00002652                 call    edx
.text:00002654                 cmp     esi, esp
.text:00002656                 call    __RTC_CheckEsp
.text:0000265B                 mov     [ebp+var_10], eax
.text:0000265E                 mov     eax, [ebp+Size]
.text:00002661                 xor     ecx, ecx
.text:00002663                 mov     edx, [ebp+this]
.text:00002666                 add     eax, [edx+8]
.text:00002669                 adc     ecx, [edx+0Ch]
.text:0000266C                 mov     edx, [ebp+this]
.text:0000266F                 mov     [edx+8], eax
.text:00002672                 mov     [edx+0Ch], ecx
.text:00002675                 jmp     loc_275C
.text:0000267A ; ---------------------------------------------------------------------------
.text:0000267A
.text:0000267A loc_267A:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+19Dj
.text:0000267A                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+1B0j ...
.text:0000267A                 mov     eax, [ebp+var_4]
.text:0000267D                 mov     ecx, [eax+18h]
.text:00002680                 mov     [ebp+var_44], ecx
.text:00002683                 mov     edx, [eax+1Ch]
.text:00002686                 mov     [ebp+var_40], edx
.text:00002689                 mov     eax, [ebp+this]
.text:0000268C                 mov     ecx, [ebp+var_20]
.text:0000268F                 mov     [ebp+var_88], eax
.text:00002695                 mov     [ebp+var_8C], ecx
.text:0000269B                 mov     edx, [ebp+var_88]
.text:000026A1                 mov     eax, [ebp+var_8C]
.text:000026A7                 mov     ecx, [edx+14h]
.text:000026AA                 cmp     ecx, [eax+4]
.text:000026AD                 ja      short loc_26D4
.text:000026AF                 jb      short loc_26C4
.text:000026B1                 mov     edx, [ebp+var_88]
.text:000026B7                 mov     eax, [ebp+var_8C]
.text:000026BD                 mov     ecx, [edx+10h]
.text:000026C0                 cmp     ecx, [eax]
.text:000026C2                 jnb     short loc_26D4
.text:000026C4
.text:000026C4 loc_26C4:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+34Fj
.text:000026C4                 mov     edx, [ebp+var_20]
.text:000026C7                 mov     eax, [edx]
.text:000026C9                 mov     [ebp+var_44], eax
.text:000026CC                 mov     ecx, [edx+4]
.text:000026CF                 mov     [ebp+var_40], ecx
.text:000026D2                 jmp     short loc_2706
.text:000026D4 ; ---------------------------------------------------------------------------
.text:000026D4
.text:000026D4 loc_26D4:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+34Dj
.text:000026D4                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+362j
.text:000026D4                 mov     esi, [ebp+var_14]
.text:000026D7                 add     esi, 1
.text:000026DA                 mov     ecx, [ebp+var_4]
.text:000026DD                 add     ecx, 6Ch ; 'l'
.text:000026E0                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000026E5                 cmp     esi, eax
.text:000026E7                 jnb     short loc_2706
.text:000026E9                 mov     edx, [ebp+var_14]
.text:000026EC                 add     edx, 1
.text:000026EF                 push    edx
.text:000026F0                 mov     ecx, [ebp+var_4]
.text:000026F3                 add     ecx, 6Ch ; 'l'
.text:000026F6                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:000026FB                 mov     ecx, [eax]
.text:000026FD                 mov     [ebp+var_44], ecx
.text:00002700                 mov     edx, [eax+4]
.text:00002703                 mov     [ebp+var_40], edx
.text:00002706
.text:00002706 loc_2706:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+372j
.text:00002706                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+387j
.text:00002706                 mov     eax, [ebp+this]
.text:00002709                 mov     ecx, [ebp+var_44]
.text:0000270C                 sub     ecx, [eax+10h]
.text:0000270F                 mov     edx, [ebp+var_40]
.text:00002712                 sbb     edx, [eax+14h]
.text:00002715                 mov     [ebp+var_4C], ecx
.text:00002718                 mov     [ebp+var_48], edx
.text:0000271B                 mov     eax, [ebp+Size]
.text:0000271E                 xor     ecx, ecx
.text:00002720                 mov     [ebp+var_94], eax
.text:00002726                 mov     [ebp+var_90], ecx
.text:0000272C                 mov     edx, [ebp+var_90]
.text:00002732                 cmp     edx, [ebp+var_48]
.text:00002735                 jb      short loc_274A
.text:00002737                 ja      short loc_2744
.text:00002739                 mov     eax, [ebp+var_94]
.text:0000273F                 cmp     eax, [ebp+var_4C]
.text:00002742                 jbe     short loc_274A
.text:00002744
.text:00002744 loc_2744:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+3D7j
.text:00002744                 mov     ecx, [ebp+var_4C]
.text:00002747                 mov     [ebp+Size], ecx
.text:0000274A
.text:0000274A loc_274A:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+3D5j
.text:0000274A                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+3E2j
.text:0000274A                 mov     edx, [ebp+Size]
.text:0000274D                 push    edx             ; Size
.text:0000274E                 push    0               ; Val
.text:00002750                 mov     eax, [ebp+Dst]
.text:00002753                 push    eax             ; Dst
.text:00002754                 call    _memset
.text:00002759                 add     esp, 0Ch
.text:0000275C
.text:0000275C loc_275C:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+E8j
.text:0000275C                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+315j
.text:0000275C                 mov     ecx, [ebp+Size]
.text:0000275F                 xor     edx, edx
.text:00002761                 mov     eax, [ebp+this]
.text:00002764                 add     ecx, [eax+10h]
.text:00002767                 adc     edx, [eax+14h]
.text:0000276A                 mov     eax, [ebp+this]
.text:0000276D                 mov     [eax+10h], ecx
.text:00002770                 mov     [eax+14h], edx
.text:00002773                 cmp     [ebp+arg_C], 0
.text:00002777                 jz      short loc_2781
.text:00002779                 mov     ecx, [ebp+arg_C]
.text:0000277C                 mov     edx, [ebp+Size]
.text:0000277F                 mov     [ecx], edx
.text:00002781
.text:00002781 loc_2781:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+417j
.text:00002781                 mov     eax, [ebp+var_10]
.text:00002784
.text:00002784 loc_2784:                               ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+34j
.text:00002784                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+7Dj ...
.text:00002784                 pop     edi
.text:00002785                 pop     esi
.text:00002786                 add     esp, 94h
.text:0000278C                 cmp     ebp, esp
.text:0000278E                 call    __RTC_CheckEsp
.text:00002793                 mov     esp, ebp
.text:00002795                 pop     ebp
.text:00002796                 retn    10h
.text:00002796 ?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z endp
.text:00002796
.text:00002796 ; ---------------------------------------------------------------------------
.text:00002799                 align 10h
.text:000027A0
.text:000027A0 ; =============== S U B R O U T I N E =======================================
.text:000027A0
.text:000027A0 ; Attributes: bp-based frame
.text:000027A0
.text:000027A0 ; __int32 __stdcall NArchive::NTar::CSparseStream::Seek(NArchive::NTar::CSparseStream *this, __int64, unsigned int, unsigned __int64 *)
.text:000027A0                 public ?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z
.text:000027A0 ?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z proc near
.text:000027A0                                         ; DATA XREF: .rdata:000050CCo
.text:000027A0
.text:000027A0 var_4           = dword ptr -4
.text:000027A0 this            = dword ptr  8
.text:000027A0 arg_4           = qword ptr  0Ch
.text:000027A0 arg_C           = dword ptr  14h
.text:000027A0 arg_10          = dword ptr  18h
.text:000027A0
.text:000027A0                 push    ebp
.text:000027A1                 mov     ebp, esp
.text:000027A3                 push    ecx
.text:000027A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000027AB                 mov     eax, [ebp+arg_C]
.text:000027AE                 mov     [ebp+var_4], eax
.text:000027B1                 cmp     [ebp+var_4], 0
.text:000027B5                 jz      short loc_27C5
.text:000027B7                 cmp     [ebp+var_4], 1
.text:000027BB                 jz      short loc_27C7
.text:000027BD                 cmp     [ebp+var_4], 2
.text:000027C1                 jz      short loc_27DE
.text:000027C3                 jmp     short loc_2807
.text:000027C5 ; ---------------------------------------------------------------------------
.text:000027C5
.text:000027C5 loc_27C5:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+15j
.text:000027C5                 jmp     short loc_280E
.text:000027C7 ; ---------------------------------------------------------------------------
.text:000027C7
.text:000027C7 loc_27C7:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+1Bj
.text:000027C7                 mov     ecx, [ebp+this]
.text:000027CA                 mov     edx, dword ptr [ebp+arg_4]
.text:000027CD                 add     edx, [ecx+10h]
.text:000027D0                 mov     eax, dword ptr [ebp+arg_4+4]
.text:000027D3                 adc     eax, [ecx+14h]
.text:000027D6                 mov     dword ptr [ebp+arg_4], edx
.text:000027D9                 mov     dword ptr [ebp+arg_4+4], eax
.text:000027DC                 jmp     short loc_280E
.text:000027DE ; ---------------------------------------------------------------------------
.text:000027DE
.text:000027DE loc_27DE:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+21j
.text:000027DE                 mov     ecx, [ebp+this]
.text:000027E1                 mov     edx, [ecx+24h]
.text:000027E4                 push    edx
.text:000027E5                 mov     eax, [ebp+this]
.text:000027E8                 mov     ecx, [eax+1Ch]
.text:000027EB                 add     ecx, 18h
.text:000027EE                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:000027F3                 mov     ecx, dword ptr [ebp+arg_4]
.text:000027F6                 add     ecx, [eax+18h]
.text:000027F9                 mov     edx, dword ptr [ebp+arg_4+4]
.text:000027FC                 adc     edx, [eax+1Ch]
.text:000027FF                 mov     dword ptr [ebp+arg_4], ecx
.text:00002802                 mov     dword ptr [ebp+arg_4+4], edx
.text:00002805                 jmp     short loc_280E
.text:00002807 ; ---------------------------------------------------------------------------
.text:00002807
.text:00002807 loc_2807:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+23j
.text:00002807                 mov     eax, 80030001h
.text:0000280C                 jmp     short loc_284B
.text:0000280E ; ---------------------------------------------------------------------------
.text:0000280E
.text:0000280E loc_280E:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *):loc_27C5j
.text:0000280E                                         ; NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+3Cj ...
.text:0000280E                 cmp     dword ptr [ebp+arg_4+4], 0
.text:00002812                 jg      short loc_2823
.text:00002814                 jl      short loc_281C
.text:00002816                 cmp     dword ptr [ebp+arg_4], 0
.text:0000281A                 jnb     short loc_2823
.text:0000281C
.text:0000281C loc_281C:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+74j
.text:0000281C                 mov     eax, 80070083h
.text:00002821                 jmp     short loc_284B
.text:00002823 ; ---------------------------------------------------------------------------
.text:00002823
.text:00002823 loc_2823:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+72j
.text:00002823                                         ; NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+7Aj
.text:00002823                 mov     eax, [ebp+this]
.text:00002826                 mov     ecx, dword ptr [ebp+arg_4]
.text:00002829                 mov     [eax+10h], ecx
.text:0000282C                 mov     edx, dword ptr [ebp+arg_4+4]
.text:0000282F                 mov     [eax+14h], edx
.text:00002832                 cmp     [ebp+arg_10], 0
.text:00002836                 jz      short loc_2849
.text:00002838                 mov     eax, [ebp+arg_10]
.text:0000283B                 mov     ecx, [ebp+this]
.text:0000283E                 mov     edx, [ecx+10h]
.text:00002841                 mov     [eax], edx
.text:00002843                 mov     ecx, [ecx+14h]
.text:00002846                 mov     [eax+4], ecx
.text:00002849
.text:00002849 loc_2849:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+96j
.text:00002849                 xor     eax, eax
.text:0000284B
.text:0000284B loc_284B:                               ; CODE XREF: NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+6Cj
.text:0000284B                                         ; NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)+81j
.text:0000284B                 add     esp, 4
.text:0000284E                 cmp     ebp, esp
.text:00002850                 call    __RTC_CheckEsp
.text:00002855                 mov     esp, ebp
.text:00002857                 pop     ebp
.text:00002858                 retn    14h
.text:00002858 ?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z endp
.text:00002858
.text:00002858 ; ---------------------------------------------------------------------------
.text:0000285B                 align 10h
.text:00002860
.text:00002860 ; =============== S U B R O U T I N E =======================================
.text:00002860
.text:00002860 ; Attributes: bp-based frame
.text:00002860
.text:00002860 ; __int32 __cdecl NArchive::NTar::CHandler::GetStream(NArchive::NTar::CHandler *this, unsigned int, struct ISequentialInStream **)
.text:00002860                 public ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00002860 ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text:00002860                                         ; DATA XREF: .rdata:000035A4o
.text:00002860
.text:00002860 var_84          = dword ptr -84h
.text:00002860 var_80          = dword ptr -80h
.text:00002860 var_7C          = qword ptr -7Ch
.text:00002860 var_74          = dword ptr -74h
.text:00002860 var_70          = dword ptr -70h
.text:00002860 var_69          = byte ptr -69h
.text:00002860 var_68          = dword ptr -68h
.text:00002860 var_64          = dword ptr -64h
.text:00002860 var_60          = dword ptr -60h
.text:00002860 var_5C          = dword ptr -5Ch
.text:00002860 var_58          = dword ptr -58h
.text:00002860 var_54          = dword ptr -54h
.text:00002860 var_50          = dword ptr -50h
.text:00002860 var_49          = byte ptr -49h
.text:00002860 var_48          = dword ptr -48h
.text:00002860 var_40          = dword ptr -40h
.text:00002860 var_3C          = dword ptr -3Ch
.text:00002860 var_38          = dword ptr -38h
.text:00002860 var_34          = dword ptr -34h
.text:00002860 var_30          = dword ptr -30h
.text:00002860 var_2C          = dword ptr -2Ch
.text:00002860 var_28          = dword ptr -28h
.text:00002860 var_20          = byte ptr -20h
.text:00002860 var_18          = dword ptr -18h
.text:00002860 var_14          = dword ptr -14h
.text:00002860 var_10          = dword ptr -10h
.text:00002860 var_C           = dword ptr -0Ch
.text:00002860 var_4           = dword ptr -4
.text:00002860 this            = dword ptr  8
.text:00002860 arg_4           = dword ptr  0Ch
.text:00002860 arg_8           = dword ptr  10h
.text:00002860
.text:00002860 ; FUNCTION CHUNK AT .text:00002AD8 SIZE 00000032 BYTES
.text:00002860
.text:00002860                 push    ebp
.text:00002861                 mov     ebp, esp
.text:00002863                 push    0FFFFFFFFh
.text:00002865                 push    offset __ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:0000286A                 mov     eax, large fs:0
.text:00002870                 push    eax
.text:00002871                 push    ecx
.text:00002872                 sub     esp, 74h
.text:00002875                 push    ebx
.text:00002876                 push    esi
.text:00002877                 push    edi
.text:00002878                 lea     edi, [ebp+var_84]
.text:0000287E                 mov     ecx, 1Dh
.text:00002883                 mov     eax, 0CCCCCCCCh
.text:00002888                 rep stosd
.text:0000288A                 mov     eax, dword ptr ds:___security_cookie
.text:0000288F                 xor     eax, ebp
.text:00002891                 push    eax
.text:00002892                 lea     eax, [ebp+var_C]
.text:00002895                 mov     large fs:0, eax
.text:0000289B                 mov     [ebp+var_10], esp
.text:0000289E                 mov     [ebp+var_4], 0
.text:000028A5                 mov     eax, [ebp+arg_4]
.text:000028A8                 push    eax
.text:000028A9                 mov     ecx, [ebp+this]
.text:000028AC                 add     ecx, 10h
.text:000028AF                 call    ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)
.text:000028B4                 mov     [ebp+var_48], eax
.text:000028B7                 mov     ecx, [ebp+var_48]
.text:000028BA                 mov     [ebp+var_14], ecx
.text:000028BD                 mov     ecx, [ebp+var_14] ; this
.text:000028C0                 call    ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSparse(void)
.text:000028C5                 mov     [ebp+var_49], al
.text:000028C8                 movzx   edx, [ebp+var_49]
.text:000028CC                 test    edx, edx
.text:000028CE                 jz      loc_2A1D
.text:000028D4                 push    38h ; '8'       ; unsigned int
.text:000028D6                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000028DB                 add     esp, 4
.text:000028DE                 mov     [ebp+var_50], eax
.text:000028E1                 mov     eax, [ebp+var_50]
.text:000028E4                 mov     [ebp+var_3C], eax
.text:000028E7                 mov     byte ptr [ebp+var_4], 1
.text:000028EB                 cmp     [ebp+var_3C], 0
.text:000028EF                 jz      short loc_2904
.text:000028F1                 mov     ecx, [ebp+var_3C] ; this
.text:000028F4                 call    ??0CSparseStream@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CSparseStream::CSparseStream(void)
.text:000028F9                 mov     [ebp+var_54], eax
.text:000028FC                 mov     ecx, [ebp+var_54]
.text:000028FF                 mov     [ebp+var_58], ecx
.text:00002902                 jmp     short loc_290B
.text:00002904 ; ---------------------------------------------------------------------------
.text:00002904
.text:00002904 loc_2904:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+8Fj
.text:00002904                 mov     [ebp+var_58], 0
.text:0000290B
.text:0000290B loc_290B:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+A2j
.text:0000290B                 mov     edx, [ebp+var_58]
.text:0000290E                 mov     [ebp+var_38], edx
.text:00002911                 mov     byte ptr [ebp+var_4], 0
.text:00002915                 mov     eax, [ebp+var_38]
.text:00002918                 mov     [ebp+var_18], eax
.text:0000291B                 mov     ecx, [ebp+var_18]
.text:0000291E                 push    ecx
.text:0000291F                 lea     ecx, [ebp+var_20]
.text:00002922                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)
.text:00002927                 mov     byte ptr [ebp+var_4], 2
.text:0000292B                 mov     ecx, [ebp+var_18] ; this
.text:0000292E                 call    ?Init@CSparseStream@NTar@NArchive@@QAEXXZ ; NArchive::NTar::CSparseStream::Init(void)
.text:00002933                 mov     edx, [ebp+this]
.text:00002936                 sub     edx, 8
.text:00002939                 mov     eax, [ebp+var_18]
.text:0000293C                 mov     [eax+1Ch], edx
.text:0000293F                 mov     ecx, [ebp+this]
.text:00002942                 sub     ecx, 8
.text:00002945                 push    ecx
.text:00002946                 mov     ecx, [ebp+var_18]
.text:00002949                 add     ecx, 20h ; ' '
.text:0000294C                 call    ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=(IUnknown *)
.text:00002951                 mov     edx, [ebp+var_18]
.text:00002954                 mov     eax, [ebp+arg_4]
.text:00002957                 mov     [edx+24h], eax
.text:0000295A                 mov     ecx, [ebp+var_14]
.text:0000295D                 add     ecx, 6Ch ; 'l'
.text:00002960                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:00002965                 mov     [ebp+var_5C], eax
.text:00002968                 mov     ecx, [ebp+var_5C]
.text:0000296B                 push    ecx
.text:0000296C                 mov     ecx, [ebp+var_18]
.text:0000296F                 add     ecx, 28h ; '('
.text:00002972                 call    ?Reserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::Reserve(uint)
.text:00002977                 mov     [ebp+var_2C], 0
.text:0000297E                 mov     [ebp+var_28], 0
.text:00002985                 mov     [ebp+var_30], 0
.text:0000298C                 jmp     short loc_2997
.text:0000298E ; ---------------------------------------------------------------------------
.text:0000298E
.text:0000298E loc_298E:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+18Dj
.text:0000298E                 mov     edx, [ebp+var_30]
.text:00002991                 add     edx, 1
.text:00002994                 mov     [ebp+var_30], edx
.text:00002997
.text:00002997 loc_2997:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+12Cj
.text:00002997                 mov     ecx, [ebp+var_14]
.text:0000299A                 add     ecx, 6Ch ; 'l'
.text:0000299D                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000029A2                 mov     [ebp+var_60], eax
.text:000029A5                 mov     eax, [ebp+var_30]
.text:000029A8                 cmp     eax, [ebp+var_60]
.text:000029AB                 jnb     short loc_29EF
.text:000029AD                 mov     ecx, [ebp+var_30]
.text:000029B0                 push    ecx
.text:000029B1                 mov     ecx, [ebp+var_14]
.text:000029B4                 add     ecx, 6Ch ; 'l'
.text:000029B7                 call    ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator[](uint)
.text:000029BC                 mov     [ebp+var_64], eax
.text:000029BF                 mov     edx, [ebp+var_64]
.text:000029C2                 mov     [ebp+var_34], edx
.text:000029C5                 mov     eax, [ebp+var_28]
.text:000029C8                 push    eax
.text:000029C9                 mov     ecx, [ebp+var_2C]
.text:000029CC                 push    ecx
.text:000029CD                 mov     ecx, [ebp+var_18]
.text:000029D0                 add     ecx, 28h ; '('
.text:000029D3                 call    ?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z ; CRecordVector<unsigned __int64>::AddInReserved(unsigned __int64)
.text:000029D8                 mov     edx, [ebp+var_34]
.text:000029DB                 mov     eax, [ebp+var_2C]
.text:000029DE                 add     eax, [edx+8]
.text:000029E1                 mov     ecx, [ebp+var_28]
.text:000029E4                 adc     ecx, [edx+0Ch]
.text:000029E7                 mov     [ebp+var_2C], eax
.text:000029EA                 mov     [ebp+var_28], ecx
.text:000029ED                 jmp     short loc_298E
.text:000029EF ; ---------------------------------------------------------------------------
.text:000029EF
.text:000029EF loc_29EF:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+14Bj
.text:000029EF                 lea     ecx, [ebp+var_20]
.text:000029F2                 call    ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ ; CMyComPtr<IInStream>::Detach(void)
.text:000029F7                 mov     [ebp+var_68], eax
.text:000029FA                 mov     edx, [ebp+arg_8]
.text:000029FD                 mov     eax, [ebp+var_68]
.text:00002A00                 mov     [edx], eax
.text:00002A02                 mov     [ebp+var_40], 0
.text:00002A09                 mov     byte ptr [ebp+var_4], 0
.text:00002A0D                 lea     ecx, [ebp+var_20]
.text:00002A10                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00002A15                 mov     eax, [ebp+var_40]
.text:00002A18                 jmp     loc_2AD8
.text:00002A1D ; ---------------------------------------------------------------------------
.text:00002A1D
.text:00002A1D loc_2A1D:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+6Ej
.text:00002A1D                 mov     ecx, [ebp+var_14] ; this
.text:00002A20                 call    ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSymLink(void)
.text:00002A25                 mov     [ebp+var_69], al
.text:00002A28                 movzx   ecx, [ebp+var_69]
.text:00002A2C                 test    ecx, ecx
.text:00002A2E                 jz      short loc_2A68
.text:00002A30                 mov     ecx, [ebp+var_14]
.text:00002A33                 add     ecx, 3Ch ; '<'  ; this
.text:00002A36                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00002A3B                 mov     [ebp+var_70], eax
.text:00002A3E                 mov     ecx, [ebp+var_14]
.text:00002A41                 add     ecx, 3Ch ; '<'
.text:00002A44                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00002A49                 mov     [ebp+var_74], eax
.text:00002A4C                 mov     edx, [ebp+arg_8]
.text:00002A4F                 push    edx             ; struct ISequentialInStream **
.text:00002A50                 mov     eax, [ebp+this]
.text:00002A53                 sub     eax, 8
.text:00002A56                 push    eax             ; struct IUnknown *
.text:00002A57                 mov     ecx, [ebp+var_70]
.text:00002A5A                 push    ecx             ; unsigned int
.text:00002A5B                 mov     edx, [ebp+var_74]
.text:00002A5E                 push    edx             ; void *
.text:00002A5F                 call    ?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z ; Create_BufInStream_WithReference(void const *,uint,IUnknown *,ISequentialInStream * *)
.text:00002A64                 xor     eax, eax
.text:00002A66                 jmp     short loc_2AD8
.text:00002A68 ; ---------------------------------------------------------------------------
.text:00002A68
.text:00002A68 loc_2A68:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1CEj
.text:00002A68                 mov     ecx, [ebp+var_14] ; this
.text:00002A6B                 call    ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition(void)
.text:00002A70                 mov     dword ptr [ebp+var_7C], eax
.text:00002A73                 mov     dword ptr [ebp+var_7C+4], edx
.text:00002A76                 mov     ecx, [ebp+this]
.text:00002A79                 add     ecx, 1Ch
.text:00002A7C                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002A81                 mov     [ebp+var_80], eax
.text:00002A84                 mov     eax, [ebp+arg_8]
.text:00002A87                 push    eax             ; struct ISequentialInStream **
.text:00002A88                 mov     ecx, [ebp+var_14]
.text:00002A8B                 mov     edx, [ecx+14h]
.text:00002A8E                 push    edx
.text:00002A8F                 mov     eax, [ecx+10h]
.text:00002A92                 push    eax             ; unsigned __int64
.text:00002A93                 mov     ecx, dword ptr [ebp+var_7C+4]
.text:00002A96                 push    ecx
.text:00002A97                 mov     edx, dword ptr [ebp+var_7C]
.text:00002A9A                 push    edx             ; unsigned __int64
.text:00002A9B                 mov     eax, [ebp+var_80]
.text:00002A9E                 push    eax             ; struct IInStream *
.text:00002A9F                 call    ?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ; CreateLimitedInStream(IInStream *,unsigned __int64,unsigned __int64,ISequentialInStream * *)
.text:00002AA4                 mov     [ebp+var_84], eax
.text:00002AAA                 mov     eax, [ebp+var_84]
.text:00002AB0                 jmp     short loc_2AD8
.text:00002AB0 ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z endp
.text:00002AB0
.text:00002AB2
.text:00002AB2 ; =============== S U B R O U T I N E =======================================
.text:00002AB2
.text:00002AB2
.text:00002AB2 __catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0 proc near
.text:00002AB2                                         ; DATA XREF: .xdata$x:000031CCo
.text:00002AB2                 mov     dword ptr [ebp-44h], 8007000Eh
.text:00002AB9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AC0                 mov     eax, offset $LN16_1
.text:00002AC5                 retn
.text:00002AC5 __catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0 endp
.text:00002AC5
.text:00002AC6 ; ---------------------------------------------------------------------------
.text:00002AC6                 mov     eax, offset __tryend$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1
.text:00002ACB                 retn
.text:00002ACC ; ---------------------------------------------------------------------------
.text:00002ACC
.text:00002ACC __tryend$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1:
.text:00002ACC                                         ; DATA XREF: .text:00002AC6o
.text:00002ACC                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AD3                 jmp     short loc_2AD8
.text:00002AD5 ; ---------------------------------------------------------------------------
.text:00002AD5
.text:00002AD5 $LN16_1:                                ; DATA XREF: __catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0+Eo
.text:00002AD5                 mov     eax, [ebp-44h]
.text:00002AD8 ; START OF FUNCTION CHUNK FOR ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00002AD8
.text:00002AD8 loc_2AD8:                               ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1B8j
.text:00002AD8                                         ; NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+206j ...
.text:00002AD8                 push    edx
.text:00002AD9                 mov     ecx, ebp
.text:00002ADB                 push    eax
.text:00002ADC                 lea     edx, $LN21
.text:00002AE2                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002AE7                 pop     eax
.text:00002AE8                 pop     edx
.text:00002AE9                 mov     ecx, [ebp+var_C]
.text:00002AEC                 mov     large fs:0, ecx
.text:00002AF3                 pop     ecx
.text:00002AF4                 pop     edi
.text:00002AF5                 pop     esi
.text:00002AF6                 pop     ebx
.text:00002AF7                 add     esp, 84h
.text:00002AFD                 cmp     ebp, esp
.text:00002AFF                 call    __RTC_CheckEsp
.text:00002B04                 mov     esp, ebp
.text:00002B06                 pop     ebp
.text:00002B07                 retn    0Ch
.text:00002B07 ; END OF FUNCTION CHUNK FOR ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text:00002B07 ; ---------------------------------------------------------------------------
.text:00002B0A                 align 4
.text:00002B0C $LN21           dd 1                    ; DATA XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+27Co
.text:00002B10                 dd offset $LN20
.text:00002B14 $LN20           dd 0FFFFFFE0h, 4        ; DATA XREF: .text:00002B10o
.text:00002B1C                 dd offset $LN18_0       ; "streamTemp"
.text:00002B20 $LN18_0         db 'streamTemp',0       ; DATA XREF: .text:00002B1Co
.text:00002B2B                 align 10h
.text:00002B30
.text:00002B30 ; =============== S U B R O U T I N E =======================================
.text:00002B30
.text:00002B30 ; Attributes: bp-based frame
.text:00002B30
.text:00002B30 ; void __thiscall NArchive::NTar::CHandler::Init(NArchive::NTar::CHandler *__hidden this)
.text:00002B30                 public ?Init@CHandler@NTar@NArchive@@QAEXXZ
.text:00002B30 ?Init@CHandler@NTar@NArchive@@QAEXXZ proc near
.text:00002B30                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+163p
.text:00002B30                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1Cp
.text:00002B30
.text:00002B30 var_4           = dword ptr -4
.text:00002B30
.text:00002B30                 push    ebp
.text:00002B31                 mov     ebp, esp
.text:00002B33                 push    ecx
.text:00002B34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B3B                 mov     [ebp+var_4], ecx
.text:00002B3E                 mov     eax, [ebp+var_4]
.text:00002B41                 mov     byte ptr [eax+0DAh], 0
.text:00002B48                 mov     ecx, [ebp+var_4]
.text:00002B4B                 mov     dword ptr [ecx+0DCh], 0FDE9h
.text:00002B55                 mov     edx, [ebp+var_4]
.text:00002B58                 mov     dword ptr [edx+0E0h], 0FDE9h
.text:00002B62                 mov     esp, ebp
.text:00002B64                 pop     ebp
.text:00002B65                 retn
.text:00002B65 ?Init@CHandler@NTar@NArchive@@QAEXXZ endp
.text:00002B65
.text:00002B65 ; ---------------------------------------------------------------------------
.text:00002B66                 align 10h
.text:00002B70
.text:00002B70 ; =============== S U B R O U T I N E =======================================
.text:00002B70
.text:00002B70 ; Attributes: bp-based frame
.text:00002B70
.text:00002B70 ; __int32 __stdcall NArchive::NTar::CHandler::SetProperties(NArchive::NTar::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:00002B70                 public ?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002B70 ?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:00002B70                                         ; DATA XREF: .rdata:00003590o
.text:00002B70
.text:00002B70 var_64          = dword ptr -64h
.text:00002B70 var_60          = dword ptr -60h
.text:00002B70 var_5C          = byte ptr -5Ch
.text:00002B70 var_50          = dword ptr -50h
.text:00002B70 var_4C          = byte ptr -4Ch
.text:00002B70 var_40          = dword ptr -40h
.text:00002B70 var_3C          = dword ptr -3Ch
.text:00002B70 var_34          = dword ptr -34h
.text:00002B70 var_2C          = dword ptr -2Ch
.text:00002B70 var_24          = dword ptr -24h
.text:00002B70 var_1C          = dword ptr -1Ch
.text:00002B70 var_14          = byte ptr -14h
.text:00002B70 var_4           = dword ptr -4
.text:00002B70 this            = dword ptr  8
.text:00002B70 arg_4           = dword ptr  0Ch
.text:00002B70 arg_8           = dword ptr  10h
.text:00002B70 arg_C           = dword ptr  14h
.text:00002B70
.text:00002B70                 push    ebp
.text:00002B71                 mov     ebp, esp
.text:00002B73                 sub     esp, 64h
.text:00002B76                 push    edi
.text:00002B77                 lea     edi, [ebp+var_64]
.text:00002B7A                 mov     ecx, 19h
.text:00002B7F                 mov     eax, 0CCCCCCCCh
.text:00002B84                 rep stosd
.text:00002B86                 mov     ecx, [ebp+this]
.text:00002B89                 sub     ecx, 0Ch        ; this
.text:00002B8C                 call    ?Init@CHandler@NTar@NArchive@@QAEXXZ ; NArchive::NTar::CHandler::Init(void)
.text:00002B91                 mov     [ebp+var_4], 0
.text:00002B98                 jmp     short loc_2BA3
.text:00002B9A ; ---------------------------------------------------------------------------
.text:00002B9A
.text:00002B9A loc_2B9A:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+18Fj
.text:00002B9A                 mov     eax, [ebp+var_4]
.text:00002B9D                 add     eax, 1
.text:00002BA0                 mov     [ebp+var_4], eax
.text:00002BA3
.text:00002BA3 loc_2BA3:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+28j
.text:00002BA3                 mov     ecx, [ebp+var_4]
.text:00002BA6                 cmp     ecx, [ebp+arg_C]
.text:00002BA9                 jnb     loc_2D04
.text:00002BAF                 mov     edx, [ebp+var_4]
.text:00002BB2                 mov     eax, [ebp+arg_4]
.text:00002BB5                 mov     ecx, [eax+edx*4]
.text:00002BB8                 push    ecx
.text:00002BB9                 lea     ecx, [ebp+var_14]
.text:00002BBC                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002BC1                 lea     ecx, [ebp+var_14] ; this
.text:00002BC4                 call    ?MakeLower_Ascii@UString@@QAEXXZ ; UString::MakeLower_Ascii(void)
.text:00002BC9                 lea     ecx, [ebp+var_14] ; this
.text:00002BCC                 call    ?IsEmpty@UString@@QBE_NXZ ; UString::IsEmpty(void)
.text:00002BD1                 movzx   edx, al
.text:00002BD4                 test    edx, edx
.text:00002BD6                 jz      short loc_2BEF
.text:00002BD8                 mov     [ebp+var_40], 80070057h
.text:00002BDF                 lea     ecx, [ebp+var_14] ; this
.text:00002BE2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002BE7                 mov     eax, [ebp+var_40]
.text:00002BEA                 jmp     loc_2D06
.text:00002BEF ; ---------------------------------------------------------------------------
.text:00002BEF
.text:00002BEF loc_2BEF:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+66j
.text:00002BEF                 mov     eax, [ebp+var_4]
.text:00002BF2                 shl     eax, 4
.text:00002BF5                 add     eax, [ebp+arg_8]
.text:00002BF8                 mov     [ebp+var_1C], eax
.text:00002BFB                 lea     ecx, [ebp+var_14]
.text:00002BFE                 call    ??BUString@@QBEPB_WXZ ; UString::operator wchar_t const *(void)
.text:00002C03                 movzx   ecx, word ptr [eax]
.text:00002C06                 cmp     ecx, 78h ; 'x'
.text:00002C09                 jnz     short loc_2C62
.text:00002C0B                 mov     [ebp+var_24], 0
.text:00002C12                 push    1               ; unsigned int
.text:00002C14                 lea     ecx, [ebp+var_14] ; this
.text:00002C17                 call    ?Ptr@UString@@QBEPB_WI@Z ; UString::Ptr(uint)
.text:00002C1C                 push    eax
.text:00002C1D                 lea     ecx, [ebp+var_4C]
.text:00002C20                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002C25                 lea     edx, [ebp+var_24]
.text:00002C28                 push    edx             ; unsigned int *
.text:00002C29                 mov     eax, [ebp+var_1C]
.text:00002C2C                 push    eax             ; struct tagPROPVARIANT *
.text:00002C2D                 lea     ecx, [ebp+var_4C]
.text:00002C30                 push    ecx             ; struct UString *
.text:00002C31                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:00002C36                 mov     [ebp+var_2C], eax
.text:00002C39                 lea     ecx, [ebp+var_4C] ; this
.text:00002C3C                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002C41                 cmp     [ebp+var_2C], 0
.text:00002C45                 jz      short loc_2C5D
.text:00002C47                 mov     edx, [ebp+var_2C]
.text:00002C4A                 mov     [ebp+var_50], edx
.text:00002C4D                 lea     ecx, [ebp+var_14] ; this
.text:00002C50                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002C55                 mov     eax, [ebp+var_50]
.text:00002C58                 jmp     loc_2D06
.text:00002C5D ; ---------------------------------------------------------------------------
.text:00002C5D
.text:00002C5D loc_2C5D:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+D5j
.text:00002C5D                 jmp     loc_2CF7
.text:00002C62 ; ---------------------------------------------------------------------------
.text:00002C62
.text:00002C62 loc_2C62:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+99j
.text:00002C62                 push    offset $SG71839 ; "cp"
.text:00002C67                 lea     ecx, [ebp+var_14] ; this
.text:00002C6A                 call    ?IsEqualTo@UString@@QBE_NPBD@Z ; UString::IsEqualTo(char const *)
.text:00002C6F                 movzx   eax, al
.text:00002C72                 test    eax, eax
.text:00002C74                 jz      short loc_2CE3
.text:00002C76                 mov     [ebp+var_34], 1
.text:00002C7D                 push    offset $SG71843
.text:00002C82                 lea     ecx, [ebp+var_5C]
.text:00002C85                 call    ??0UString@@QAE@PB_W@Z ; UString::UString(wchar_t const *)
.text:00002C8A                 lea     ecx, [ebp+var_34]
.text:00002C8D                 push    ecx             ; unsigned int *
.text:00002C8E                 mov     edx, [ebp+var_1C]
.text:00002C91                 push    edx             ; struct tagPROPVARIANT *
.text:00002C92                 lea     eax, [ebp+var_5C]
.text:00002C95                 push    eax             ; struct UString *
.text:00002C96                 call    ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32(UString const &,tagPROPVARIANT const &,uint &)
.text:00002C9B                 mov     [ebp+var_3C], eax
.text:00002C9E                 lea     ecx, [ebp+var_5C] ; this
.text:00002CA1                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002CA6                 cmp     [ebp+var_3C], 0
.text:00002CAA                 jz      short loc_2CBF
.text:00002CAC                 mov     ecx, [ebp+var_3C]
.text:00002CAF                 mov     [ebp+var_60], ecx
.text:00002CB2                 lea     ecx, [ebp+var_14] ; this
.text:00002CB5                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002CBA                 mov     eax, [ebp+var_60]
.text:00002CBD                 jmp     short loc_2D06
.text:00002CBF ; ---------------------------------------------------------------------------
.text:00002CBF
.text:00002CBF loc_2CBF:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+13Aj
.text:00002CBF                 mov     edx, [ebp+this]
.text:00002CC2                 mov     byte ptr [edx+0CEh], 1
.text:00002CC9                 mov     eax, [ebp+this]
.text:00002CCC                 mov     ecx, [ebp+var_34]
.text:00002CCF                 mov     [eax+0D0h], ecx
.text:00002CD5                 mov     edx, [ebp+this]
.text:00002CD8                 mov     eax, [ebp+var_34]
.text:00002CDB                 mov     [edx+0D4h], eax
.text:00002CE1                 jmp     short loc_2CF7
.text:00002CE3 ; ---------------------------------------------------------------------------
.text:00002CE3
.text:00002CE3 loc_2CE3:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+104j
.text:00002CE3                 mov     [ebp+var_64], 80070057h
.text:00002CEA                 lea     ecx, [ebp+var_14] ; this
.text:00002CED                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002CF2                 mov     eax, [ebp+var_64]
.text:00002CF5                 jmp     short loc_2D06
.text:00002CF7 ; ---------------------------------------------------------------------------
.text:00002CF7
.text:00002CF7 loc_2CF7:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_2C5Dj
.text:00002CF7                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+171j
.text:00002CF7                 lea     ecx, [ebp+var_14] ; this
.text:00002CFA                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:00002CFF                 jmp     loc_2B9A
.text:00002D04 ; ---------------------------------------------------------------------------
.text:00002D04
.text:00002D04 loc_2D04:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+39j
.text:00002D04                 xor     eax, eax
.text:00002D06
.text:00002D06 loc_2D06:                               ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+7Aj
.text:00002D06                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+E8j ...
.text:00002D06                 push    edx
.text:00002D07                 mov     ecx, ebp
.text:00002D09                 push    eax
.text:00002D0A                 lea     edx, $LN17
.text:00002D10                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002D15                 pop     eax
.text:00002D16                 pop     edx
.text:00002D17                 pop     edi
.text:00002D18                 add     esp, 64h
.text:00002D1B                 cmp     ebp, esp
.text:00002D1D                 call    __RTC_CheckEsp
.text:00002D22                 mov     esp, ebp
.text:00002D24                 pop     ebp
.text:00002D25                 retn    10h
.text:00002D25 ?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00002D25
.text:00002D25 ; ---------------------------------------------------------------------------
.text:00002D28 $LN17           dd 3                    ; DATA XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+19Ao
.text:00002D2C                 dd offset $LN16_2
.text:00002D30 $LN16_2         dd 0FFFFFFECh, 0Ch      ; DATA XREF: .text:00002D2Co
.text:00002D38                 dd offset $LN13_1       ; "name"
.text:00002D3C                 dd 0FFFFFFDCh, 4
.text:00002D44                 dd offset $LN14_2       ; "level"
.text:00002D48                 db 0CCh
.text:00002D49                 db 3 dup(0FFh)
.text:00002D4C                 dd 4
.text:00002D50                 dd offset $LN15_1
.text:00002D54 $LN15_1         db 63h, 70h, 0          ; DATA XREF: .text:00002D50o
.text:00002D57 $LN14_2         db 'level',0            ; DATA XREF: .text:00002D44o
.text:00002D5D $LN13_1         db 'name',0             ; DATA XREF: .text:00002D38o
.text:00002D62                 align 4
.text:00002D62 _text           ends
.text:00002D62
.rtc$TMZ:00002D64 ; ===========================================================================
.rtc$TMZ:00002D64
.rtc$TMZ:00002D64 ; Segment type: Pure data
.rtc$TMZ:00002D64 ; Segment permissions: Read
.rtc$TMZ:00002D64 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002D64                 assume cs:_rtc$TMZ
.rtc$TMZ:00002D64                 ;org 2D64h
.rtc$TMZ:00002D64 ; COMDAT (pick any)
.rtc$TMZ:00002D64 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002D64 _rtc$TMZ        ends
.rtc$TMZ:00002D64
.rtc$IMZ:00002D68 ; ===========================================================================
.rtc$IMZ:00002D68
.rtc$IMZ:00002D68 ; Segment type: Pure data
.rtc$IMZ:00002D68 ; Segment permissions: Read
.rtc$IMZ:00002D68 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002D68                 assume cs:_rtc$IMZ
.rtc$IMZ:00002D68                 ;org 2D68h
.rtc$IMZ:00002D68 ; COMDAT (pick any)
.rtc$IMZ:00002D68 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002D68 _rtc$IMZ        ends
.rtc$IMZ:00002D68
.text:00002D6C ; ===========================================================================
.text:00002D6C
.text:00002D6C ; Segment type: Pure code
.text:00002D6C ; Segment permissions: Read/Execute
.text:00002D6C _text           segment para public 'CODE' use32
.text:00002D6C                 assume cs:_text
.text:00002D6C                 ;org 2D6Ch
.text:00002D6C ; COMDAT (pick any)
.text:00002D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D6C
.text:00002D6C ; =============== S U B R O U T I N E =======================================
.text:00002D6C
.text:00002D6C ; Attributes: bp-based frame
.text:00002D6C
.text:00002D6C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00002D6C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00002D6C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00002D6C                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+23p
.text:00002D6C                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+4E0p ...
.text:00002D6C
.text:00002D6C var_4           = dword ptr -4
.text:00002D6C
.text:00002D6C                 push    ebp
.text:00002D6D                 mov     ebp, esp
.text:00002D6F                 push    ecx
.text:00002D70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D77                 mov     [ebp+var_4], ecx
.text:00002D7A                 xor     eax, eax
.text:00002D7C                 mov     ecx, [ebp+var_4]
.text:00002D7F                 mov     [ecx], ax
.text:00002D82                 xor     edx, edx
.text:00002D84                 mov     eax, [ebp+var_4]
.text:00002D87                 mov     [eax+2], dx
.text:00002D8B                 mov     ecx, [ebp+var_4]
.text:00002D8E                 mov     dword ptr [ecx+8], 0
.text:00002D95                 mov     eax, [ebp+var_4]
.text:00002D98                 mov     esp, ebp
.text:00002D9A                 pop     ebp
.text:00002D9B                 retn
.text:00002D9B ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00002D9B
.text:00002D9B _text           ends
.text:00002D9B
.text:00002D9C ; ===========================================================================
.text:00002D9C
.text:00002D9C ; Segment type: Pure code
.text:00002D9C ; Segment permissions: Read/Execute
.text:00002D9C _text           segment para public 'CODE' use32
.text:00002D9C                 assume cs:_text
.text:00002D9C                 ;org 2D9Ch
.text:00002D9C ; COMDAT (pick any)
.text:00002D9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002D9C
.text:00002D9C ; =============== S U B R O U T I N E =======================================
.text:00002D9C
.text:00002D9C ; Attributes: bp-based frame
.text:00002D9C
.text:00002D9C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:00002D9C                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:00002D9C ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:00002D9C                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+17Fp
.text:00002D9C                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+538p ...
.text:00002D9C
.text:00002D9C var_4           = dword ptr -4
.text:00002D9C
.text:00002D9C                 push    ebp
.text:00002D9D                 mov     ebp, esp
.text:00002D9F                 push    ecx
.text:00002DA0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DA7                 mov     [ebp+var_4], ecx
.text:00002DAA                 mov     ecx, [ebp+var_4] ; this
.text:00002DAD                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:00002DB2                 add     esp, 4
.text:00002DB5                 cmp     ebp, esp
.text:00002DB7                 call    __RTC_CheckEsp
.text:00002DBC                 mov     esp, ebp
.text:00002DBE                 pop     ebp
.text:00002DBF                 retn
.text:00002DBF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:00002DBF
.text:00002DBF _text           ends
.text:00002DBF
.text:00002DC0 ; ===========================================================================
.text:00002DC0
.text:00002DC0 ; Segment type: Pure code
.text:00002DC0 ; Segment permissions: Read/Execute
.text:00002DC0 _text           segment para public 'CODE' use32
.text:00002DC0                 assume cs:_text
.text:00002DC0                 ;org 2DC0h
.text:00002DC0 ; COMDAT (pick any)
.text:00002DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00002DC0
.text:00002DC0 ; =============== S U B R O U T I N E =======================================
.text:00002DC0
.text:00002DC0 ; Attributes: bp-based frame
.text:00002DC0
.text:00002DC0 ; bool __thiscall NArchive::NTar::CItem::IsPaxExtendedHeader(NArchive::NTar::CItem *__hidden this)
.text:00002DC0                 public ?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ
.text:00002DC0 ?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:00002DC0                                         ; CODE XREF: NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+65p
.text:00002DC0
.text:00002DC0 var_8           = dword ptr -8
.text:00002DC0 var_4           = dword ptr -4
.text:00002DC0
.text:00002DC0                 push    ebp
.text:00002DC1                 mov     ebp, esp
.text:00002DC3                 sub     esp, 8
.text:00002DC6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002DCD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DD4                 mov     [ebp+var_4], ecx
.text:00002DD7                 mov     eax, [ebp+var_4]
.text:00002DDA                 mov     cl, [eax+68h]
.text:00002DDD                 mov     byte ptr [ebp+var_8], cl
.text:00002DE0                 cmp     byte ptr [ebp+var_8], 58h ; 'X'
.text:00002DE4                 jz      short loc_2DF4
.text:00002DE6                 cmp     byte ptr [ebp+var_8], 67h ; 'g'
.text:00002DEA                 jz      short loc_2DF4
.text:00002DEC                 cmp     byte ptr [ebp+var_8], 78h ; 'x'
.text:00002DF0                 jz      short loc_2DF4
.text:00002DF2                 jmp     short loc_2DF8
.text:00002DF4 ; ---------------------------------------------------------------------------
.text:00002DF4
.text:00002DF4 loc_2DF4:                               ; CODE XREF: NArchive::NTar::CItem::IsPaxExtendedHeader(void)+24j
.text:00002DF4                                         ; NArchive::NTar::CItem::IsPaxExtendedHeader(void)+2Aj ...
.text:00002DF4                 mov     al, 1
.text:00002DF6                 jmp     short loc_2DFA
.text:00002DF8 ; ---------------------------------------------------------------------------
.text:00002DF8
.text:00002DF8 loc_2DF8:                               ; CODE XREF: NArchive::NTar::CItem::IsPaxExtendedHeader(void)+32j
.text:00002DF8                 xor     al, al
.text:00002DFA
.text:00002DFA loc_2DFA:                               ; CODE XREF: NArchive::NTar::CItem::IsPaxExtendedHeader(void)+36j
.text:00002DFA                 mov     esp, ebp
.text:00002DFC                 pop     ebp
.text:00002DFD                 retn
.text:00002DFD ?IsPaxExtendedHeader@CItem@NTar@NArchive@@QBE_NXZ endp
.text:00002DFD
.text:00002DFD ; ---------------------------------------------------------------------------
.text:00002DFE                 align 10h
.text:00002DFE _text           ends
.text:00002DFE
.text$x:00002E00 ; ===========================================================================
.text$x:00002E00
.text$x:00002E00 ; Segment type: Pure code
.text$x:00002E00 ; Segment permissions: Read/Execute
.text$x:00002E00 _text$x         segment para public 'CODE' use32
.text$x:00002E00                 assume cs:_text$x
.text$x:00002E00                 ;org 2E00h
.text$x:00002E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002E00
.text$x:00002E00 ; =============== S U B R O U T I N E =======================================
.text$x:00002E00
.text$x:00002E00
.text$x:00002E00 __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0 proc near
.text$x:00002E00                                         ; DATA XREF: .xdata$x:00002FB8o
.text$x:00002E00                 lea     ecx, [ebp-0BCh] ; this
.text$x:00002E06                 jmp     ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text$x:00002E06 __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0 endp
.text$x:00002E06
.text$x:00002E0B
.text$x:00002E0B ; =============== S U B R O U T I N E =======================================
.text$x:00002E0B
.text$x:00002E0B
.text$x:00002E0B __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1 proc near
.text$x:00002E0B                                         ; DATA XREF: .xdata$x:00002FC0o
.text$x:00002E0B                 lea     ecx, [ebp-0F4h]
.text$x:00002E11                 jmp     ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)
.text$x:00002E11 __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1 endp
.text$x:00002E11
.text$x:00002E16
.text$x:00002E16 ; =============== S U B R O U T I N E =======================================
.text$x:00002E16
.text$x:00002E16
.text$x:00002E16 __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2 proc near
.text$x:00002E16                                         ; DATA XREF: .xdata$x:00002FC8o
.text$x:00002E16                 lea     ecx, [ebp-10Ch] ; this
.text$x:00002E1C                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002E1C __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2 endp
.text$x:00002E1C
.text$x:00002E21
.text$x:00002E21 ; =============== S U B R O U T I N E =======================================
.text$x:00002E21
.text$x:00002E21
.text$x:00002E21 __ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z proc near
.text$x:00002E21                                         ; DATA XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5o
.text$x:00002E21
.text$x:00002E21 arg_4           = dword ptr  8
.text$x:00002E21
.text$x:00002E21                 mov     edx, [esp+arg_4]
.text$x:00002E25                 lea     eax, [edx+0Ch]
.text$x:00002E28                 mov     ecx, [edx-140h]
.text$x:00002E2E                 xor     ecx, eax
.text$x:00002E30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E35                 mov     ecx, [edx-4]
.text$x:00002E38                 xor     ecx, eax
.text$x:00002E3A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E3F                 mov     eax, offset __ehfuncinfo$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text$x:00002E44                 jmp     ___CxxFrameHandler3
.text$x:00002E44 __ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z endp
.text$x:00002E44
.text$x:00002E49
.text$x:00002E49 ; =============== S U B R O U T I N E =======================================
.text$x:00002E49
.text$x:00002E49
.text$x:00002E49 __ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:00002E49                                         ; DATA XREF: NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:00002E49
.text$x:00002E49 arg_4           = dword ptr  8
.text$x:00002E49
.text$x:00002E49                 mov     edx, [esp+arg_4]
.text$x:00002E4D                 lea     eax, [edx+0Ch]
.text$x:00002E50                 mov     ecx, [edx-20h]
.text$x:00002E53                 xor     ecx, eax
.text$x:00002E55                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E5A                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:00002E5F                 jmp     ___CxxFrameHandler3
.text$x:00002E5F __ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:00002E5F
.text$x:00002E64
.text$x:00002E64 ; =============== S U B R O U T I N E =======================================
.text$x:00002E64
.text$x:00002E64
.text$x:00002E64 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:00002E64                                         ; DATA XREF: .xdata$x:00003070o
.text$x:00002E64                 mov     ecx, [ebp-10h]
.text$x:00002E67                 add     ecx, 18h
.text$x:00002E6A                 jmp     ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)
.text$x:00002E6A __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0 endp
.text$x:00002E6A
.text$x:00002E6F
.text$x:00002E6F ; =============== S U B R O U T I N E =======================================
.text$x:00002E6F
.text$x:00002E6F
.text$x:00002E6F __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1 proc near
.text$x:00002E6F                                         ; DATA XREF: .xdata$x:00003078o
.text$x:00002E6F                 mov     ecx, [ebp-10h]
.text$x:00002E72                 add     ecx, 24h ; '$'
.text$x:00002E75                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002E75 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1 endp
.text$x:00002E75
.text$x:00002E7A
.text$x:00002E7A ; =============== S U B R O U T I N E =======================================
.text$x:00002E7A
.text$x:00002E7A
.text$x:00002E7A __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$2 proc near
.text$x:00002E7A                                         ; DATA XREF: .xdata$x:00003080o
.text$x:00002E7A                 mov     ecx, [ebp-10h]
.text$x:00002E7D                 add     ecx, 28h ; '('
.text$x:00002E80                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002E80 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$2 endp
.text$x:00002E80
.text$x:00002E85
.text$x:00002E85 ; =============== S U B R O U T I N E =======================================
.text$x:00002E85
.text$x:00002E85
.text$x:00002E85 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$3 proc near
.text$x:00002E85                                         ; DATA XREF: .xdata$x:00003088o
.text$x:00002E85                 mov     ecx, [ebp-10h]
.text$x:00002E88                 add     ecx, 38h ; '8'  ; this
.text$x:00002E8B                 jmp     ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text$x:00002E8B __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$3 endp
.text$x:00002E8B
.text$x:00002E90
.text$x:00002E90 ; =============== S U B R O U T I N E =======================================
.text$x:00002E90
.text$x:00002E90
.text$x:00002E90 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4 proc near
.text$x:00002E90                                         ; DATA XREF: .xdata$x:00003090o
.text$x:00002E90                 mov     ecx, [ebp-10h]
.text$x:00002E93                 add     ecx, 0ECh ; '8'
.text$x:00002E99                 jmp     ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text$x:00002E99 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4 endp
.text$x:00002E99
.text$x:00002E9E
.text$x:00002E9E ; =============== S U B R O U T I N E =======================================
.text$x:00002E9E
.text$x:00002E9E
.text$x:00002E9E __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5 proc near
.text$x:00002E9E                                         ; DATA XREF: .xdata$x:00003098o
.text$x:00002E9E                 mov     eax, [ebp-18h]
.text$x:00002EA1                 push    eax             ; void *
.text$x:00002EA2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002EA7                 pop     ecx
.text$x:00002EA8                 retn
.text$x:00002EA8 __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5 endp
.text$x:00002EA8
.text$x:00002EA9
.text$x:00002EA9 ; =============== S U B R O U T I N E =======================================
.text$x:00002EA9
.text$x:00002EA9
.text$x:00002EA9 __ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ proc near
.text$x:00002EA9                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+5o
.text$x:00002EA9
.text$x:00002EA9 arg_4           = dword ptr  8
.text$x:00002EA9
.text$x:00002EA9                 mov     edx, [esp+arg_4]
.text$x:00002EAD                 lea     eax, [edx+0Ch]
.text$x:00002EB0                 mov     ecx, [edx-14h]
.text$x:00002EB3                 xor     ecx, eax
.text$x:00002EB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002EBA                 mov     eax, offset __ehfuncinfo$??0CHandler@NTar@NArchive@@QAE@XZ
.text$x:00002EBF                 jmp     ___CxxFrameHandler3
.text$x:00002EBF __ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ endp
.text$x:00002EBF
.text$x:00002EC4
.text$x:00002EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00002EC4
.text$x:00002EC4
.text$x:00002EC4 __unwindfunclet$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z$0 proc near
.text$x:00002EC4                                         ; DATA XREF: .xdata$x:000030A0o
.text$x:00002EC4                 lea     ecx, [ebp-20h]  ; this
.text$x:00002EC7                 jmp     ??1UString@@QAE@XZ ; UString::~UString(void)
.text$x:00002EC7 __unwindfunclet$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z$0 endp
.text$x:00002EC7
.text$x:00002ECC
.text$x:00002ECC ; =============== S U B R O U T I N E =======================================
.text$x:00002ECC
.text$x:00002ECC
.text$x:00002ECC __ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z proc near
.text$x:00002ECC                                         ; DATA XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+5o
.text$x:00002ECC
.text$x:00002ECC arg_4           = dword ptr  8
.text$x:00002ECC
.text$x:00002ECC                 mov     edx, [esp+arg_4]
.text$x:00002ED0                 lea     eax, [edx+0Ch]
.text$x:00002ED3                 mov     ecx, [edx-1Ch]
.text$x:00002ED6                 xor     ecx, eax
.text$x:00002ED8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002EDD                 mov     eax, offset __ehfuncinfo$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
.text$x:00002EE2                 jmp     ___CxxFrameHandler3
.text$x:00002EE2 __ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z endp
.text$x:00002EE2
.text$x:00002EE7
.text$x:00002EE7 ; =============== S U B R O U T I N E =======================================
.text$x:00002EE7
.text$x:00002EE7
.text$x:00002EE7 __unwindfunclet$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:00002EE7                                         ; DATA XREF: .xdata$x:000030F8o
.text$x:00002EE7                 lea     ecx, [ebp-24h]  ; this
.text$x:00002EEA                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00002EEA __unwindfunclet$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:00002EEA
.text$x:00002EEF
.text$x:00002EEF ; =============== S U B R O U T I N E =======================================
.text$x:00002EEF
.text$x:00002EEF
.text$x:00002EEF __ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:00002EEF                                         ; DATA XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:00002EEF
.text$x:00002EEF arg_4           = dword ptr  8
.text$x:00002EEF
.text$x:00002EEF                 mov     edx, [esp+arg_4]
.text$x:00002EF3                 lea     eax, [edx+0Ch]
.text$x:00002EF6                 mov     ecx, [edx-84h]
.text$x:00002EFC                 xor     ecx, eax
.text$x:00002EFE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F03                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:00002F08                 jmp     ___CxxFrameHandler3
.text$x:00002F08 __ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:00002F08
.text$x:00002F0D
.text$x:00002F0D ; =============== S U B R O U T I N E =======================================
.text$x:00002F0D
.text$x:00002F0D
.text$x:00002F0D __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:00002F0D                                         ; DATA XREF: .xdata$x:0000317Co
.text$x:00002F0D                 mov     eax, [ebp-0C4h]
.text$x:00002F13                 push    eax             ; void *
.text$x:00002F14                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F19                 pop     ecx
.text$x:00002F1A                 retn
.text$x:00002F1A __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:00002F1A
.text$x:00002F1B
.text$x:00002F1B ; =============== S U B R O U T I N E =======================================
.text$x:00002F1B
.text$x:00002F1B
.text$x:00002F1B __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:00002F1B                                         ; DATA XREF: .xdata$x:00003184o
.text$x:00002F1B                 lea     ecx, [ebp-38h]
.text$x:00002F1E                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00002F1E __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:00002F1E
.text$x:00002F23
.text$x:00002F23 ; =============== S U B R O U T I N E =======================================
.text$x:00002F23
.text$x:00002F23
.text$x:00002F23 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:00002F23                                         ; DATA XREF: .xdata$x:0000318Co
.text$x:00002F23                 mov     eax, [ebp-0CCh]
.text$x:00002F29                 push    eax             ; void *
.text$x:00002F2A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F2F                 pop     ecx
.text$x:00002F30                 retn
.text$x:00002F30 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:00002F30
.text$x:00002F31
.text$x:00002F31 ; =============== S U B R O U T I N E =======================================
.text$x:00002F31
.text$x:00002F31
.text$x:00002F31 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:00002F31                                         ; DATA XREF: .xdata$x:00003194o
.text$x:00002F31                 lea     ecx, [ebp-48h]
.text$x:00002F34                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002F34 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:00002F34
.text$x:00002F39
.text$x:00002F39 ; =============== S U B R O U T I N E =======================================
.text$x:00002F39
.text$x:00002F39
.text$x:00002F39 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 proc near
.text$x:00002F39                                         ; DATA XREF: .xdata$x:0000319Co
.text$x:00002F39                 mov     eax, [ebp-0D4h]
.text$x:00002F3F                 push    eax             ; void *
.text$x:00002F40                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F45                 pop     ecx
.text$x:00002F46                 retn
.text$x:00002F46 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 endp
.text$x:00002F46
.text$x:00002F47
.text$x:00002F47 ; =============== S U B R O U T I N E =======================================
.text$x:00002F47
.text$x:00002F47
.text$x:00002F47 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 proc near
.text$x:00002F47                                         ; DATA XREF: .xdata$x:000031A4o
.text$x:00002F47                 lea     ecx, [ebp-58h]
.text$x:00002F4A                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00002F4A __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 endp
.text$x:00002F4A
.text$x:00002F4F
.text$x:00002F4F ; =============== S U B R O U T I N E =======================================
.text$x:00002F4F
.text$x:00002F4F
.text$x:00002F4F __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 proc near
.text$x:00002F4F                                         ; DATA XREF: .xdata$x:000031ACo
.text$x:00002F4F                 lea     ecx, [ebp-68h]
.text$x:00002F52                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:00002F52 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 endp
.text$x:00002F52
.text$x:00002F57
.text$x:00002F57 ; =============== S U B R O U T I N E =======================================
.text$x:00002F57
.text$x:00002F57
.text$x:00002F57 __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 proc near
.text$x:00002F57                                         ; DATA XREF: .xdata$x:000031B4o
.text$x:00002F57                 lea     ecx, [ebp-0A8h]
.text$x:00002F5D                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00002F5D __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9 endp
.text$x:00002F5D
.text$x:00002F62
.text$x:00002F62 ; =============== S U B R O U T I N E =======================================
.text$x:00002F62
.text$x:00002F62
.text$x:00002F62 __ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:00002F62                                         ; DATA XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:00002F62
.text$x:00002F62 arg_4           = dword ptr  8
.text$x:00002F62
.text$x:00002F62                 mov     edx, [esp+arg_4]
.text$x:00002F66                 lea     eax, [edx+0Ch]
.text$x:00002F69                 mov     ecx, [edx-1F8h]
.text$x:00002F6F                 xor     ecx, eax
.text$x:00002F71                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F76                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:00002F7B                 jmp     ___CxxFrameHandler3
.text$x:00002F7B __ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:00002F7B
.text$x:00002F80
.text$x:00002F80 ; =============== S U B R O U T I N E =======================================
.text$x:00002F80
.text$x:00002F80
.text$x:00002F80 __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2 proc near
.text$x:00002F80                                         ; DATA XREF: .xdata$x:000031F0o
.text$x:00002F80                 mov     eax, [ebp-3Ch]
.text$x:00002F83                 push    eax             ; void *
.text$x:00002F84                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F89                 pop     ecx
.text$x:00002F8A                 retn
.text$x:00002F8A __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2 endp
.text$x:00002F8A
.text$x:00002F8B
.text$x:00002F8B ; =============== S U B R O U T I N E =======================================
.text$x:00002F8B
.text$x:00002F8B
.text$x:00002F8B __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3 proc near
.text$x:00002F8B                                         ; DATA XREF: .xdata$x:000031F8o
.text$x:00002F8B                 lea     ecx, [ebp-20h]
.text$x:00002F8E                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00002F8E __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3 endp
.text$x:00002F8E
.text$x:00002F93
.text$x:00002F93 ; =============== S U B R O U T I N E =======================================
.text$x:00002F93
.text$x:00002F93
.text$x:00002F93 __ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z proc near
.text$x:00002F93                                         ; DATA XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+5o
.text$x:00002F93
.text$x:00002F93 arg_4           = dword ptr  8
.text$x:00002F93
.text$x:00002F93                 mov     edx, [esp+arg_4]
.text$x:00002F97                 lea     eax, [edx+0Ch]
.text$x:00002F9A                 mov     ecx, [edx-88h]
.text$x:00002FA0                 xor     ecx, eax
.text$x:00002FA2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002FA7                 mov     eax, offset __ehfuncinfo$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.text$x:00002FAC                 jmp     ___CxxFrameHandler3
.text$x:00002FAC __ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z endp
.text$x:00002FAC
.text$x:00002FAC ; ---------------------------------------------------------------------------
.text$x:00002FB1                 align 4
.text$x:00002FB1 _text$x         ends
.text$x:00002FB1
.xdata$x:00002FB4 ; ===========================================================================
.xdata$x:00002FB4
.xdata$x:00002FB4 ; Segment type: Pure data
.xdata$x:00002FB4 ; Segment permissions: Read
.xdata$x:00002FB4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002FB4                 assume cs:_xdata$x
.xdata$x:00002FB4                 ;org 2FB4h
.xdata$x:00002FB4 __unwindtable$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00002FB4                                         ; DATA XREF: .xdata$x:00002FD4o
.xdata$x:00002FB5                 db 0FFh
.xdata$x:00002FB6                 db 0FFh
.xdata$x:00002FB7                 db 0FFh
.xdata$x:00002FB8                 dd offset __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0
.xdata$x:00002FBC                 db 0FFh
.xdata$x:00002FBD                 db 0FFh
.xdata$x:00002FBE                 db 0FFh
.xdata$x:00002FBF                 db 0FFh
.xdata$x:00002FC0                 dd offset __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1
.xdata$x:00002FC4                 db    1
.xdata$x:00002FC5                 db    0
.xdata$x:00002FC6                 db    0
.xdata$x:00002FC7                 db    0
.xdata$x:00002FC8                 dd offset __unwindfunclet$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2
.xdata$x:00002FCC __ehfuncinfo$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00002FCC                                         ; DATA XREF: __ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z+1Eo
.xdata$x:00002FCD                 db    5
.xdata$x:00002FCE                 db  93h ; ô
.xdata$x:00002FCF                 db  19h
.xdata$x:00002FD0                 db    3
.xdata$x:00002FD1                 db    0
.xdata$x:00002FD2                 db    0
.xdata$x:00002FD3                 db    0
.xdata$x:00002FD4                 dd offset __unwindtable$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.xdata$x:00002FD8                 db    0
.xdata$x:00002FD9                 db    0
.xdata$x:00002FDA                 db    0
.xdata$x:00002FDB                 db    0
.xdata$x:00002FDC                 db    0
.xdata$x:00002FDD                 db    0
.xdata$x:00002FDE                 db    0
.xdata$x:00002FDF                 db    0
.xdata$x:00002FE0                 db    0
.xdata$x:00002FE1                 db    0
.xdata$x:00002FE2                 db    0
.xdata$x:00002FE3                 db    0
.xdata$x:00002FE4                 db    0
.xdata$x:00002FE5                 db    0
.xdata$x:00002FE6                 db    0
.xdata$x:00002FE7                 db    0
.xdata$x:00002FE8                 db    0
.xdata$x:00002FE9                 db    0
.xdata$x:00002FEA                 db    0
.xdata$x:00002FEB                 db    0
.xdata$x:00002FEC                 db    1
.xdata$x:00002FED                 db    0
.xdata$x:00002FEE                 db    0
.xdata$x:00002FEF                 db    0
.xdata$x:00002FF0 __catchsym$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset locret_3F+1
.xdata$x:00002FF0                                         ; DATA XREF: .xdata$x:00003020o
.xdata$x:00002FF4                 db    0
.xdata$x:00002FF5                 db    0
.xdata$x:00002FF6                 db    0
.xdata$x:00002FF7                 db    0
.xdata$x:00002FF8                 db    0
.xdata$x:00002FF9                 db    0
.xdata$x:00002FFA                 db    0
.xdata$x:00002FFB                 db    0
.xdata$x:00002FFC                 dd offset __catch$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00003000 __unwindtable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00003000                                         ; DATA XREF: .xdata$x:0000302Co
.xdata$x:00003001                 db 0FFh
.xdata$x:00003002                 db 0FFh
.xdata$x:00003003                 db 0FFh
.xdata$x:00003004                 db    0
.xdata$x:00003005                 db    0
.xdata$x:00003006                 db    0
.xdata$x:00003007                 db    0
.xdata$x:00003008                 db 0FFh
.xdata$x:00003009                 db 0FFh
.xdata$x:0000300A                 db 0FFh
.xdata$x:0000300B                 db 0FFh
.xdata$x:0000300C                 db    0
.xdata$x:0000300D                 db    0
.xdata$x:0000300E                 db    0
.xdata$x:0000300F                 db    0
.xdata$x:00003010 __tryblocktable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00003010                                         ; DATA XREF: .xdata$x:00003034o
.xdata$x:00003011                 db    0
.xdata$x:00003012                 db    0
.xdata$x:00003013                 db    0
.xdata$x:00003014                 db    0
.xdata$x:00003015                 db    0
.xdata$x:00003016                 db    0
.xdata$x:00003017                 db    0
.xdata$x:00003018                 db    1
.xdata$x:00003019                 db    0
.xdata$x:0000301A                 db    0
.xdata$x:0000301B                 db    0
.xdata$x:0000301C                 db    1
.xdata$x:0000301D                 db    0
.xdata$x:0000301E                 db    0
.xdata$x:0000301F                 db    0
.xdata$x:00003020                 dd offset __catchsym$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:00003024 __ehfuncinfo$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00003024                                         ; DATA XREF: __ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+11o
.xdata$x:00003025                 db    5
.xdata$x:00003026                 db  93h ; ô
.xdata$x:00003027                 db  19h
.xdata$x:00003028                 db    2
.xdata$x:00003029                 db    0
.xdata$x:0000302A                 db    0
.xdata$x:0000302B                 db    0
.xdata$x:0000302C                 dd offset __unwindtable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00003030                 db    1
.xdata$x:00003031                 db    0
.xdata$x:00003032                 db    0
.xdata$x:00003033                 db    0
.xdata$x:00003034                 dd offset __tryblocktable$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00003038                 db    0
.xdata$x:00003039                 db    0
.xdata$x:0000303A                 db    0
.xdata$x:0000303B                 db    0
.xdata$x:0000303C                 db    0
.xdata$x:0000303D                 db    0
.xdata$x:0000303E                 db    0
.xdata$x:0000303F                 db    0
.xdata$x:00003040                 db    0
.xdata$x:00003041                 db    0
.xdata$x:00003042                 db    0
.xdata$x:00003043                 db    0
.xdata$x:00003044                 db    1
.xdata$x:00003045                 db    0
.xdata$x:00003046                 db    0
.xdata$x:00003047                 db    0
.xdata$x:00003048 __ehfuncinfo$??0CHandler@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003048                                         ; DATA XREF: __ehhandler$??0CHandler@NTar@NArchive@@QAE@XZ+11o
.xdata$x:00003049                 db    5
.xdata$x:0000304A                 db  93h ; ô
.xdata$x:0000304B                 db  19h
.xdata$x:0000304C                 db    6
.xdata$x:0000304D                 db    0
.xdata$x:0000304E                 db    0
.xdata$x:0000304F                 db    0
.xdata$x:00003050                 dd offset __unwindtable$??0CHandler@NTar@NArchive@@QAE@XZ
.xdata$x:00003054                 db    0
.xdata$x:00003055                 db    0
.xdata$x:00003056                 db    0
.xdata$x:00003057                 db    0
.xdata$x:00003058                 db    0
.xdata$x:00003059                 db    0
.xdata$x:0000305A                 db    0
.xdata$x:0000305B                 db    0
.xdata$x:0000305C                 db    0
.xdata$x:0000305D                 db    0
.xdata$x:0000305E                 db    0
.xdata$x:0000305F                 db    0
.xdata$x:00003060                 db    0
.xdata$x:00003061                 db    0
.xdata$x:00003062                 db    0
.xdata$x:00003063                 db    0
.xdata$x:00003064                 db    0
.xdata$x:00003065                 db    0
.xdata$x:00003066                 db    0
.xdata$x:00003067                 db    0
.xdata$x:00003068                 db    1
.xdata$x:00003069                 db    0
.xdata$x:0000306A                 db    0
.xdata$x:0000306B                 db    0
.xdata$x:0000306C __unwindtable$??0CHandler@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:0000306C                                         ; DATA XREF: .xdata$x:00003050o
.xdata$x:0000306D                 db 0FFh
.xdata$x:0000306E                 db 0FFh
.xdata$x:0000306F                 db 0FFh
.xdata$x:00003070                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0
.xdata$x:00003074                 align 8
.xdata$x:00003078                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1
.xdata$x:0000307C                 db    1
.xdata$x:0000307D                 db    0
.xdata$x:0000307E                 db    0
.xdata$x:0000307F                 db    0
.xdata$x:00003080                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$2
.xdata$x:00003084                 db    2
.xdata$x:00003085                 db    0
.xdata$x:00003086                 db    0
.xdata$x:00003087                 db    0
.xdata$x:00003088                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$3
.xdata$x:0000308C                 db    3
.xdata$x:0000308D                 db    0
.xdata$x:0000308E                 db    0
.xdata$x:0000308F                 db    0
.xdata$x:00003090                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4
.xdata$x:00003094                 db    4
.xdata$x:00003095                 db    0
.xdata$x:00003096                 db    0
.xdata$x:00003097                 db    0
.xdata$x:00003098                 dd offset __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5
.xdata$x:0000309C __unwindtable$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z db 0FFh
.xdata$x:0000309C                                         ; DATA XREF: .xdata$x:000030ACo
.xdata$x:0000309D                 db 0FFh
.xdata$x:0000309E                 db 0FFh
.xdata$x:0000309F                 db 0FFh
.xdata$x:000030A0                 dd offset __unwindfunclet$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z$0
.xdata$x:000030A4 __ehfuncinfo$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z db  22h ; "
.xdata$x:000030A4                                         ; DATA XREF: __ehhandler$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z+11o
.xdata$x:000030A5                 db    5
.xdata$x:000030A6                 db  93h ; ô
.xdata$x:000030A7                 db  19h
.xdata$x:000030A8                 db    1
.xdata$x:000030A9                 db    0
.xdata$x:000030AA                 db    0
.xdata$x:000030AB                 db    0
.xdata$x:000030AC                 dd offset __unwindtable$?TarStringToUnicode@CHandler@NTar@NArchive@@ABEXABVAString@@AAVCPropVariant@NCOM@NWindows@@_N@Z
.xdata$x:000030B0                 db    0
.xdata$x:000030B1                 db    0
.xdata$x:000030B2                 db    0
.xdata$x:000030B3                 db    0
.xdata$x:000030B4                 db    0
.xdata$x:000030B5                 db    0
.xdata$x:000030B6                 db    0
.xdata$x:000030B7                 db    0
.xdata$x:000030B8                 db    0
.xdata$x:000030B9                 db    0
.xdata$x:000030BA                 db    0
.xdata$x:000030BB                 db    0
.xdata$x:000030BC                 db    0
.xdata$x:000030BD                 db    0
.xdata$x:000030BE                 db    0
.xdata$x:000030BF                 db    0
.xdata$x:000030C0                 db    0
.xdata$x:000030C1                 db    0
.xdata$x:000030C2                 db    0
.xdata$x:000030C3                 db    0
.xdata$x:000030C4                 db    1
.xdata$x:000030C5                 db    0
.xdata$x:000030C6                 db    0
.xdata$x:000030C7                 db    0
.xdata$x:000030C8 __catchsym$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 dd offset locret_3F+1
.xdata$x:000030C8                                         ; DATA XREF: .xdata$x:000030E8o
.xdata$x:000030CC                 db    0
.xdata$x:000030CD                 db    0
.xdata$x:000030CE                 db    0
.xdata$x:000030CF                 db    0
.xdata$x:000030D0                 db    0
.xdata$x:000030D1                 db    0
.xdata$x:000030D2                 db    0
.xdata$x:000030D3                 db    0
.xdata$x:000030D4                 dd offset __catch$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:000030D8 __tryblocktable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:000030D8                                         ; DATA XREF: .xdata$x:00003114o
.xdata$x:000030D9                 db    0
.xdata$x:000030DA                 db    0
.xdata$x:000030DB                 db    0
.xdata$x:000030DC                 db    1
.xdata$x:000030DD                 db    0
.xdata$x:000030DE                 db    0
.xdata$x:000030DF                 db    0
.xdata$x:000030E0                 db    2
.xdata$x:000030E1                 db    0
.xdata$x:000030E2                 db    0
.xdata$x:000030E3                 db    0
.xdata$x:000030E4                 db    1
.xdata$x:000030E5                 db    0
.xdata$x:000030E6                 db    0
.xdata$x:000030E7                 db    0
.xdata$x:000030E8                 dd offset __catchsym$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:000030EC __unwindtable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:000030EC                                         ; DATA XREF: .xdata$x:0000310Co
.xdata$x:000030ED                 db 0FFh
.xdata$x:000030EE                 db 0FFh
.xdata$x:000030EF                 db 0FFh
.xdata$x:000030F0                 db    0
.xdata$x:000030F1                 db    0
.xdata$x:000030F2                 db    0
.xdata$x:000030F3                 db    0
.xdata$x:000030F4                 db    0
.xdata$x:000030F5                 db    0
.xdata$x:000030F6                 db    0
.xdata$x:000030F7                 db    0
.xdata$x:000030F8                 dd offset __unwindfunclet$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:000030FC                 db 0FFh
.xdata$x:000030FD                 db 0FFh
.xdata$x:000030FE                 db 0FFh
.xdata$x:000030FF                 db 0FFh
.xdata$x:00003100                 db    0
.xdata$x:00003101                 db    0
.xdata$x:00003102                 db    0
.xdata$x:00003103                 db    0
.xdata$x:00003104 __ehfuncinfo$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00003104                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+14o
.xdata$x:00003105                 db    5
.xdata$x:00003106                 db  93h ; ô
.xdata$x:00003107                 db  19h
.xdata$x:00003108                 db    3
.xdata$x:00003109                 db    0
.xdata$x:0000310A                 db    0
.xdata$x:0000310B                 db    0
.xdata$x:0000310C                 dd offset __unwindtable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:00003110                 db    1
.xdata$x:00003111                 db    0
.xdata$x:00003112                 db    0
.xdata$x:00003113                 db    0
.xdata$x:00003114                 dd offset __tryblocktable$?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:00003118                 db    0
.xdata$x:00003119                 db    0
.xdata$x:0000311A                 db    0
.xdata$x:0000311B                 db    0
.xdata$x:0000311C                 db    0
.xdata$x:0000311D                 db    0
.xdata$x:0000311E                 db    0
.xdata$x:0000311F                 db    0
.xdata$x:00003120                 db    0
.xdata$x:00003121                 db    0
.xdata$x:00003122                 db    0
.xdata$x:00003123                 db    0
.xdata$x:00003124                 db    1
.xdata$x:00003125                 db    0
.xdata$x:00003126                 db    0
.xdata$x:00003127                 db    0
.xdata$x:00003128 __catchsym$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10 dd offset locret_3F+1
.xdata$x:00003128                                         ; DATA XREF: .xdata$x:00003148o
.xdata$x:0000312C                 db    0
.xdata$x:0000312D                 db    0
.xdata$x:0000312E                 db    0
.xdata$x:0000312F                 db    0
.xdata$x:00003130                 db    0
.xdata$x:00003131                 db    0
.xdata$x:00003132                 db    0
.xdata$x:00003133                 db    0
.xdata$x:00003134                 dd offset __catch$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00003138 __tryblocktable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:00003138                                         ; DATA XREF: .xdata$x:0000315Co
.xdata$x:00003139                 db    0
.xdata$x:0000313A                 db    0
.xdata$x:0000313B                 db    0
.xdata$x:0000313C                 db    8
.xdata$x:0000313D                 db    0
.xdata$x:0000313E                 db    0
.xdata$x:0000313F                 db    0
.xdata$x:00003140                 db    9
.xdata$x:00003141                 db    0
.xdata$x:00003142                 db    0
.xdata$x:00003143                 db    0
.xdata$x:00003144                 db    1
.xdata$x:00003145                 db    0
.xdata$x:00003146                 db    0
.xdata$x:00003147                 db    0
.xdata$x:00003148                 dd offset __catchsym$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
.xdata$x:0000314C __ehfuncinfo$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:0000314C                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+14o
.xdata$x:0000314D                 db    5
.xdata$x:0000314E                 db  93h ; ô
.xdata$x:0000314F                 db  19h
.xdata$x:00003150                 db  0Ah
.xdata$x:00003151                 db    0
.xdata$x:00003152                 db    0
.xdata$x:00003153                 db    0
.xdata$x:00003154                 dd offset __unwindtable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00003158                 db    1
.xdata$x:00003159                 db    0
.xdata$x:0000315A                 db    0
.xdata$x:0000315B                 db    0
.xdata$x:0000315C                 dd offset __tryblocktable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:00003160                 db    0
.xdata$x:00003161                 db    0
.xdata$x:00003162                 db    0
.xdata$x:00003163                 db    0
.xdata$x:00003164                 db    0
.xdata$x:00003165                 db    0
.xdata$x:00003166                 db    0
.xdata$x:00003167                 db    0
.xdata$x:00003168                 db    0
.xdata$x:00003169                 db    0
.xdata$x:0000316A                 db    0
.xdata$x:0000316B                 db    0
.xdata$x:0000316C                 db    1
.xdata$x:0000316D                 db    0
.xdata$x:0000316E                 db    0
.xdata$x:0000316F                 db    0
.xdata$x:00003170 __unwindtable$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:00003170                                         ; DATA XREF: .xdata$x:00003154o
.xdata$x:00003171                 db 0FFh
.xdata$x:00003172                 db 0FFh
.xdata$x:00003173                 db 0FFh
.xdata$x:00003174                 db    0
.xdata$x:00003175                 db    0
.xdata$x:00003176                 db    0
.xdata$x:00003177                 db    0
.xdata$x:00003178                 db    0
.xdata$x:00003179                 db    0
.xdata$x:0000317A                 db    0
.xdata$x:0000317B                 db    0
.xdata$x:0000317C                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:00003180                 db    0
.xdata$x:00003181                 db    0
.xdata$x:00003182                 db    0
.xdata$x:00003183                 db    0
.xdata$x:00003184                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:00003188                 db    2
.xdata$x:00003189                 db    0
.xdata$x:0000318A                 db    0
.xdata$x:0000318B                 db    0
.xdata$x:0000318C                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:00003190                 db    2
.xdata$x:00003191                 db    0
.xdata$x:00003192                 db    0
.xdata$x:00003193                 db    0
.xdata$x:00003194                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:00003198                 db    4
.xdata$x:00003199                 db    0
.xdata$x:0000319A                 db    0
.xdata$x:0000319B                 db    0
.xdata$x:0000319C                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:000031A0                 db    4
.xdata$x:000031A1                 db    0
.xdata$x:000031A2                 db    0
.xdata$x:000031A3                 db    0
.xdata$x:000031A4                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
.xdata$x:000031A8                 db    6
.xdata$x:000031A9                 db    0
.xdata$x:000031AA                 db    0
.xdata$x:000031AB                 db    0
.xdata$x:000031AC                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
.xdata$x:000031B0                 db    7
.xdata$x:000031B1                 db    0
.xdata$x:000031B2                 db    0
.xdata$x:000031B3                 db    0
.xdata$x:000031B4                 dd offset __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
.xdata$x:000031B8                 db 0FFh
.xdata$x:000031B9                 db 0FFh
.xdata$x:000031BA                 db 0FFh
.xdata$x:000031BB                 db 0FFh
.xdata$x:000031BC                 db    0
.xdata$x:000031BD                 db    0
.xdata$x:000031BE                 db    0
.xdata$x:000031BF                 db    0
.xdata$x:000031C0 __catchsym$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4 dd offset locret_3F+1
.xdata$x:000031C0                                         ; DATA XREF: .xdata$x:000031E0o
.xdata$x:000031C4                 db    0
.xdata$x:000031C5                 db    0
.xdata$x:000031C6                 db    0
.xdata$x:000031C7                 db    0
.xdata$x:000031C8                 db    0
.xdata$x:000031C9                 db    0
.xdata$x:000031CA                 db    0
.xdata$x:000031CB                 db    0
.xdata$x:000031CC                 dd offset __catch$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0
.xdata$x:000031D0 __tryblocktable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db    0
.xdata$x:000031D0                                         ; DATA XREF: .xdata$x:00003214o
.xdata$x:000031D1                 db    0
.xdata$x:000031D2                 db    0
.xdata$x:000031D3                 db    0
.xdata$x:000031D4                 db    2
.xdata$x:000031D5                 db    0
.xdata$x:000031D6                 db    0
.xdata$x:000031D7                 db    0
.xdata$x:000031D8                 db    3
.xdata$x:000031D9                 db    0
.xdata$x:000031DA                 db    0
.xdata$x:000031DB                 db    0
.xdata$x:000031DC                 db    1
.xdata$x:000031DD                 db    0
.xdata$x:000031DE                 db    0
.xdata$x:000031DF                 db    0
.xdata$x:000031E0                 dd offset __catchsym$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4
.xdata$x:000031E4 __unwindtable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db 0FFh
.xdata$x:000031E4                                         ; DATA XREF: .xdata$x:0000320Co
.xdata$x:000031E5                 db 0FFh
.xdata$x:000031E6                 db 0FFh
.xdata$x:000031E7                 db 0FFh
.xdata$x:000031E8                 db    0
.xdata$x:000031E9                 db    0
.xdata$x:000031EA                 db    0
.xdata$x:000031EB                 db    0
.xdata$x:000031EC                 db    0
.xdata$x:000031ED                 db    0
.xdata$x:000031EE                 db    0
.xdata$x:000031EF                 db    0
.xdata$x:000031F0                 dd offset __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2
.xdata$x:000031F4                 align 8
.xdata$x:000031F8                 dd offset __unwindfunclet$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3
.xdata$x:000031FC                 db 0FFh
.xdata$x:000031FD                 db 0FFh
.xdata$x:000031FE                 db 0FFh
.xdata$x:000031FF                 db 0FFh
.xdata$x:00003200                 db    0
.xdata$x:00003201                 db    0
.xdata$x:00003202                 db    0
.xdata$x:00003203                 db    0
.xdata$x:00003204 __ehfuncinfo$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z db  22h ; "
.xdata$x:00003204                                         ; DATA XREF: __ehhandler$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z+14o
.xdata$x:00003205                 db    5
.xdata$x:00003206                 db  93h ; ô
.xdata$x:00003207                 db  19h
.xdata$x:00003208                 db    4
.xdata$x:00003209                 db    0
.xdata$x:0000320A                 db    0
.xdata$x:0000320B                 db    0
.xdata$x:0000320C                 dd offset __unwindtable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:00003210                 db    1
.xdata$x:00003211                 db    0
.xdata$x:00003212                 db    0
.xdata$x:00003213                 db    0
.xdata$x:00003214                 dd offset __tryblocktable$?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
.xdata$x:00003218                 db    0
.xdata$x:00003219                 db    0
.xdata$x:0000321A                 db    0
.xdata$x:0000321B                 db    0
.xdata$x:0000321C                 db    0
.xdata$x:0000321D                 db    0
.xdata$x:0000321E                 db    0
.xdata$x:0000321F                 db    0
.xdata$x:00003220                 db    0
.xdata$x:00003221                 db    0
.xdata$x:00003222                 db    0
.xdata$x:00003223                 db    0
.xdata$x:00003224                 db    1
.xdata$x:00003225                 db    0
.xdata$x:00003226                 db    0
.xdata$x:00003227                 db    0
.xdata$x:00003227 _xdata$x        ends
.xdata$x:00003227
.text:00003228 ; ===========================================================================
.text:00003228
.text:00003228 ; Segment type: Pure code
.text:00003228 ; Segment permissions: Read/Execute
.text:00003228 _text           segment para public 'CODE' use32
.text:00003228                 assume cs:_text
.text:00003228                 ;org 3228h
.text:00003228 ; COMDAT (pick any)
.text:00003228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003228
.text:00003228 ; =============== S U B R O U T I N E =======================================
.text:00003228
.text:00003228 ; Attributes: bp-based frame
.text:00003228
.text:00003228 ; unsigned int __stdcall MyStringLen(const wchar_t *)
.text:00003228                 public ?MyStringLen@@YGIPB_W@Z
.text:00003228 ?MyStringLen@@YGIPB_W@Z proc near       ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5A3p
.text:00003228
.text:00003228 var_4           = dword ptr -4
.text:00003228 arg_0           = dword ptr  8
.text:00003228
.text:00003228                 push    ebp
.text:00003229                 mov     ebp, esp
.text:0000322B                 push    ecx
.text:0000322C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003233                 mov     [ebp+var_4], 0
.text:0000323A                 jmp     short loc_3245
.text:0000323C ; ---------------------------------------------------------------------------
.text:0000323C
.text:0000323C loc_323C:                               ; CODE XREF: MyStringLen(wchar_t const *)+2Bj
.text:0000323C                 mov     eax, [ebp+var_4]
.text:0000323F                 add     eax, 1
.text:00003242                 mov     [ebp+var_4], eax
.text:00003245
.text:00003245 loc_3245:                               ; CODE XREF: MyStringLen(wchar_t const *)+12j
.text:00003245                 mov     ecx, [ebp+var_4]
.text:00003248                 mov     edx, [ebp+arg_0]
.text:0000324B                 movzx   eax, word ptr [edx+ecx*2]
.text:0000324F                 test    eax, eax
.text:00003251                 jz      short loc_3255
.text:00003253                 jmp     short loc_323C
.text:00003255 ; ---------------------------------------------------------------------------
.text:00003255
.text:00003255 loc_3255:                               ; CODE XREF: MyStringLen(wchar_t const *)+29j
.text:00003255                 mov     eax, [ebp+var_4]
.text:00003258                 mov     esp, ebp
.text:0000325A                 pop     ebp
.text:0000325B                 retn    4
.text:0000325B ?MyStringLen@@YGIPB_W@Z endp
.text:0000325B
.text:0000325B ; ---------------------------------------------------------------------------
.text:0000325E                 align 10h
.text:0000325E _text           ends
.text:0000325E
.text:00003260 ; ===========================================================================
.text:00003260
.text:00003260 ; Segment type: Pure code
.text:00003260 ; Segment permissions: Read/Execute
.text:00003260 _text           segment para public 'CODE' use32
.text:00003260                 assume cs:_text
.text:00003260                 ;org 3260h
.text:00003260 ; COMDAT (pick any)
.text:00003260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003260
.text:00003260 ; =============== S U B R O U T I N E =======================================
.text:00003260
.text:00003260 ; Attributes: bp-based frame
.text:00003260
.text:00003260 ; public: __thiscall AString::operator char const *(void)const
.text:00003260                 public ??BAString@@QBEPBDXZ
.text:00003260 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1A8p
.text:00003260                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1C6p ...
.text:00003260
.text:00003260 var_4           = dword ptr -4
.text:00003260
.text:00003260                 push    ebp
.text:00003261                 mov     ebp, esp
.text:00003263                 push    ecx
.text:00003264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000326B                 mov     [ebp+var_4], ecx
.text:0000326E                 mov     eax, [ebp+var_4]
.text:00003271                 mov     eax, [eax]
.text:00003273                 mov     esp, ebp
.text:00003275                 pop     ebp
.text:00003276                 retn
.text:00003276 ??BAString@@QBEPBDXZ endp
.text:00003276
.text:00003276 ; ---------------------------------------------------------------------------
.text:00003277                 align 4
.text:00003277 _text           ends
.text:00003277
.text:00003278 ; ===========================================================================
.text:00003278
.text:00003278 ; Segment type: Pure code
.text:00003278 ; Segment permissions: Read/Execute
.text:00003278 _text           segment para public 'CODE' use32
.text:00003278                 assume cs:_text
.text:00003278                 ;org 3278h
.text:00003278 ; COMDAT (pick any)
.text:00003278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003278
.text:00003278 ; =============== S U B R O U T I N E =======================================
.text:00003278
.text:00003278 ; Attributes: bp-based frame
.text:00003278
.text:00003278 ; unsigned __int64 __thiscall NArchive::NTar::CItem::GetPackSizeAligned(NArchive::NTar::CItem *__hidden this)
.text:00003278                 public ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ
.text:00003278 ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ proc near
.text:00003278                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+21Ep
.text:00003278                                         ; NArchive::NTar::CHandler::SkipTo(uint)+4Bp ...
.text:00003278
.text:00003278 var_4           = dword ptr -4
.text:00003278
.text:00003278                 push    ebp
.text:00003279                 mov     ebp, esp
.text:0000327B                 push    ecx
.text:0000327C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003283                 mov     [ebp+var_4], ecx
.text:00003286                 mov     eax, [ebp+var_4]
.text:00003289                 mov     ecx, [eax+10h]
.text:0000328C                 add     ecx, 1FFh
.text:00003292                 mov     edx, [eax+14h]
.text:00003295                 adc     edx, 0
.text:00003298                 and     ecx, 0FFFFFE00h
.text:0000329E                 mov     eax, ecx
.text:000032A0                 mov     esp, ebp
.text:000032A2                 pop     ebp
.text:000032A3                 retn
.text:000032A3 ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ endp
.text:000032A3
.text:000032A3 _text           ends
.text:000032A3
.text:000032A4 ; ===========================================================================
.text:000032A4
.text:000032A4 ; Segment type: Pure code
.text:000032A4 ; Segment permissions: Read/Execute
.text:000032A4 _text           segment para public 'CODE' use32
.text:000032A4                 assume cs:_text
.text:000032A4                 ;org 32A4h
.text:000032A4 ; COMDAT (pick any)
.text:000032A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032A4
.text:000032A4 ; =============== S U B R O U T I N E =======================================
.text:000032A4
.text:000032A4 ; Attributes: bp-based frame
.text:000032A4
.text:000032A4 ; _DWORD __thiscall NArchive::NTar::CItemEx::~CItemEx(NArchive::NTar::CItemEx *__hidden this)
.text:000032A4                 public ??1CItemEx@NTar@NArchive@@QAE@XZ
.text:000032A4 ??1CItemEx@NTar@NArchive@@QAE@XZ proc near
.text:000032A4                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+139p
.text:000032A4                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+161p ...
.text:000032A4
.text:000032A4 var_4           = dword ptr -4
.text:000032A4
.text:000032A4                 push    ebp
.text:000032A5                 mov     ebp, esp
.text:000032A7                 push    ecx
.text:000032A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000032AF                 mov     [ebp+var_4], ecx
.text:000032B2                 mov     ecx, [ebp+var_4] ; this
.text:000032B5                 call    ??1CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::~CItem(void)
.text:000032BA                 add     esp, 4
.text:000032BD                 cmp     ebp, esp
.text:000032BF                 call    __RTC_CheckEsp
.text:000032C4                 mov     esp, ebp
.text:000032C6                 pop     ebp
.text:000032C7                 retn
.text:000032C7 ??1CItemEx@NTar@NArchive@@QAE@XZ endp
.text:000032C7
.text:000032C7 _text           ends
.text:000032C7
.text:000032C8 ; ===========================================================================
.text:000032C8
.text:000032C8 ; Segment type: Pure code
.text:000032C8 ; Segment permissions: Read/Execute
.text:000032C8 _text           segment para public 'CODE' use32
.text:000032C8                 assume cs:_text
.text:000032C8                 ;org 32C8h
.text:000032C8 ; COMDAT (pick any)
.text:000032C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000032C8
.text:000032C8 ; =============== S U B R O U T I N E =======================================
.text:000032C8
.text:000032C8 ; Attributes: bp-based frame
.text:000032C8
.text:000032C8 ; _DWORD __thiscall NArchive::NTar::CItem::~CItem(NArchive::NTar::CItem *__hidden this)
.text:000032C8                 public ??1CItem@NTar@NArchive@@QAE@XZ
.text:000032C8 ??1CItem@NTar@NArchive@@QAE@XZ proc near
.text:000032C8                                         ; CODE XREF: NArchive::NTar::CItemEx::~CItemEx(void)+11p
.text:000032C8
.text:000032C8 var_10          = dword ptr -10h
.text:000032C8 var_C           = dword ptr -0Ch
.text:000032C8 var_4           = dword ptr -4
.text:000032C8
.text:000032C8                 push    ebp
.text:000032C9                 mov     ebp, esp
.text:000032CB                 push    0FFFFFFFFh
.text:000032CD                 push    offset __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ
.text:000032D2                 mov     eax, large fs:0
.text:000032D8                 push    eax
.text:000032D9                 push    ecx
.text:000032DA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000032E1                 mov     eax, dword ptr ds:___security_cookie
.text:000032E6                 xor     eax, ebp
.text:000032E8                 push    eax
.text:000032E9                 lea     eax, [ebp+var_C]
.text:000032EC                 mov     large fs:0, eax
.text:000032F2                 mov     [ebp+var_10], ecx
.text:000032F5                 mov     [ebp+var_4], 3
.text:000032FC                 mov     ecx, [ebp+var_10]
.text:000032FF                 add     ecx, 6Ch ; 'l'
.text:00003302                 call    ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>(void)
.text:00003307                 mov     byte ptr [ebp+var_4], 2
.text:0000330B                 mov     ecx, [ebp+var_10]
.text:0000330E                 add     ecx, 54h ; 'T'  ; this
.text:00003311                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003316                 mov     byte ptr [ebp+var_4], 1
.text:0000331A                 mov     ecx, [ebp+var_10]
.text:0000331D                 add     ecx, 48h ; 'H'  ; this
.text:00003320                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003325                 mov     byte ptr [ebp+var_4], 0
.text:00003329                 mov     ecx, [ebp+var_10]
.text:0000332C                 add     ecx, 3Ch ; '<'  ; this
.text:0000332F                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003334                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000333B                 mov     ecx, [ebp+var_10] ; this
.text:0000333E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00003343                 mov     ecx, [ebp+var_C]
.text:00003346                 mov     large fs:0, ecx
.text:0000334D                 pop     ecx
.text:0000334E                 add     esp, 10h
.text:00003351                 cmp     ebp, esp
.text:00003353                 call    __RTC_CheckEsp
.text:00003358                 mov     esp, ebp
.text:0000335A                 pop     ebp
.text:0000335B                 retn
.text:0000335B ??1CItem@NTar@NArchive@@QAE@XZ endp
.text:0000335B
.text:0000335B _text           ends
.text:0000335B
.text$x:0000335C ; ===========================================================================
.text$x:0000335C
.text$x:0000335C ; Segment type: Pure code
.text$x:0000335C ; Segment permissions: Read/Execute
.text$x:0000335C _text$x         segment para public 'CODE' use32
.text$x:0000335C                 assume cs:_text$x
.text$x:0000335C                 ;org 335Ch
.text$x:0000335C ; COMDAT (pick associative to section at 32C8)
.text$x:0000335C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000335C
.text$x:0000335C ; =============== S U B R O U T I N E =======================================
.text$x:0000335C
.text$x:0000335C
.text$x:0000335C __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:0000335C                                         ; DATA XREF: .xdata$x:000033A4o
.text$x:0000335C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000335F                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000335F __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0 endp
.text$x:0000335F
.text$x:00003364
.text$x:00003364 ; =============== S U B R O U T I N E =======================================
.text$x:00003364
.text$x:00003364
.text$x:00003364 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1 proc near
.text$x:00003364                                         ; DATA XREF: .xdata$x:000033ACo
.text$x:00003364                 mov     ecx, [ebp-10h]
.text$x:00003367                 add     ecx, 3Ch ; '<'  ; this
.text$x:0000336A                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000336A __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1 endp
.text$x:0000336A
.text$x:0000336F
.text$x:0000336F ; =============== S U B R O U T I N E =======================================
.text$x:0000336F
.text$x:0000336F
.text$x:0000336F __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2 proc near
.text$x:0000336F                                         ; DATA XREF: .xdata$x:000033B4o
.text$x:0000336F                 mov     ecx, [ebp-10h]
.text$x:00003372                 add     ecx, 48h ; 'H'  ; this
.text$x:00003375                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003375 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2 endp
.text$x:00003375
.text$x:0000337A
.text$x:0000337A ; =============== S U B R O U T I N E =======================================
.text$x:0000337A
.text$x:0000337A
.text$x:0000337A __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3 proc near
.text$x:0000337A                                         ; DATA XREF: .xdata$x:000033BCo
.text$x:0000337A                 mov     ecx, [ebp-10h]
.text$x:0000337D                 add     ecx, 54h ; 'T'  ; this
.text$x:00003380                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003380 __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3 endp
.text$x:00003380
.text$x:00003385
.text$x:00003385 ; =============== S U B R O U T I N E =======================================
.text$x:00003385
.text$x:00003385
.text$x:00003385 __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ proc near
.text$x:00003385                                         ; DATA XREF: NArchive::NTar::CItem::~CItem(void)+5o
.text$x:00003385
.text$x:00003385 arg_4           = dword ptr  8
.text$x:00003385
.text$x:00003385                 mov     edx, [esp+arg_4]
.text$x:00003389                 lea     eax, [edx+0Ch]
.text$x:0000338C                 mov     ecx, [edx-8]
.text$x:0000338F                 xor     ecx, eax
.text$x:00003391                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003396                 mov     eax, offset __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ
.text$x:0000339B                 jmp     ___CxxFrameHandler3
.text$x:0000339B __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ endp
.text$x:0000339B
.text$x:0000339B _text$x         ends
.text$x:0000339B
.xdata$x:000033A0 ; ===========================================================================
.xdata$x:000033A0
.xdata$x:000033A0 ; Segment type: Pure data
.xdata$x:000033A0 ; Segment permissions: Read
.xdata$x:000033A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000033A0                 assume cs:_xdata$x
.xdata$x:000033A0                 ;org 33A0h
.xdata$x:000033A0 ; COMDAT (pick associative to section at 32C8)
.xdata$x:000033A0 __unwindtable$??1CItem@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:000033A0                                         ; DATA XREF: .xdata$x:000033C8o
.xdata$x:000033A1                 db 0FFh
.xdata$x:000033A2                 db 0FFh
.xdata$x:000033A3                 db 0FFh
.xdata$x:000033A4                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0
.xdata$x:000033A8                 db    0
.xdata$x:000033A9                 db    0
.xdata$x:000033AA                 db    0
.xdata$x:000033AB                 db    0
.xdata$x:000033AC                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1
.xdata$x:000033B0                 db    1
.xdata$x:000033B1                 db    0
.xdata$x:000033B2                 db    0
.xdata$x:000033B3                 db    0
.xdata$x:000033B4                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2
.xdata$x:000033B8                 db    2
.xdata$x:000033B9                 db    0
.xdata$x:000033BA                 db    0
.xdata$x:000033BB                 db    0
.xdata$x:000033BC                 dd offset __unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3
.xdata$x:000033C0 __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000033C0                                         ; DATA XREF: __ehhandler$??1CItem@NTar@NArchive@@QAE@XZ+11o
.xdata$x:000033C1                 db    5
.xdata$x:000033C2                 db  93h ; ô
.xdata$x:000033C3                 db  19h
.xdata$x:000033C4                 db    4
.xdata$x:000033C5                 db    0
.xdata$x:000033C6                 db    0
.xdata$x:000033C7                 db    0
.xdata$x:000033C8                 dd offset __unwindtable$??1CItem@NTar@NArchive@@QAE@XZ
.xdata$x:000033CC                 align 20h
.xdata$x:000033E0                 db    1
.xdata$x:000033E1                 db    0
.xdata$x:000033E2                 db    0
.xdata$x:000033E3                 db    0
.xdata$x:000033E3 _xdata$x        ends
.xdata$x:000033E3
.text:000033E4 ; ===========================================================================
.text:000033E4
.text:000033E4 ; Segment type: Pure code
.text:000033E4 ; Segment permissions: Read/Execute
.text:000033E4 _text           segment para public 'CODE' use32
.text:000033E4                 assume cs:_text
.text:000033E4                 ;org 33E4h
.text:000033E4 ; COMDAT (pick any)
.text:000033E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000033E4
.text:000033E4 ; =============== S U B R O U T I N E =======================================
.text:000033E4
.text:000033E4 ; Attributes: bp-based frame
.text:000033E4
.text:000033E4 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000033E4                 public ??1AString@@QAE@XZ
.text:000033E4 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NTar::CItem::~CItem(void)+49p
.text:000033E4                                         ; NArchive::NTar::CItem::~CItem(void)+58p ...
.text:000033E4
.text:000033E4 var_8           = dword ptr -8
.text:000033E4 var_4           = dword ptr -4
.text:000033E4
.text:000033E4                 push    ebp
.text:000033E5                 mov     ebp, esp
.text:000033E7                 sub     esp, 8
.text:000033EA                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000033F1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000033F8                 mov     [ebp+var_4], ecx
.text:000033FB                 mov     eax, [ebp+var_4]
.text:000033FE                 mov     ecx, [eax]
.text:00003400                 mov     [ebp+var_8], ecx
.text:00003403                 mov     edx, [ebp+var_8]
.text:00003406                 push    edx             ; void *
.text:00003407                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000340C                 add     esp, 4
.text:0000340F                 add     esp, 8
.text:00003412                 cmp     ebp, esp
.text:00003414                 call    __RTC_CheckEsp
.text:00003419                 mov     esp, ebp
.text:0000341B                 pop     ebp
.text:0000341C                 retn
.text:0000341C ??1AString@@QAE@XZ endp
.text:0000341C
.text:0000341C ; ---------------------------------------------------------------------------
.text:0000341D                 align 10h
.text:0000341D _text           ends
.text:0000341D
.text:00003420 ; ===========================================================================
.text:00003420
.text:00003420 ; Segment type: Pure code
.text:00003420 ; Segment permissions: Read/Execute
.text:00003420 _text           segment para public 'CODE' use32
.text:00003420                 assume cs:_text
.text:00003420                 ;org 3420h
.text:00003420 ; COMDAT (pick any)
.text:00003420                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003420
.text:00003420 ; =============== S U B R O U T I N E =======================================
.text:00003420
.text:00003420 ; Attributes: bp-based frame
.text:00003420
.text:00003420 ; _DWORD __thiscall NArchive::NTar::CItemEx::CItemEx(NArchive::NTar::CItemEx *__hidden this)
.text:00003420                 public ??0CItemEx@NTar@NArchive@@QAE@XZ
.text:00003420 ??0CItemEx@NTar@NArchive@@QAE@XZ proc near
.text:00003420                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+EBp
.text:00003420                                         ; NArchive::NTar::CHandler::CHandler(void)+DFp
.text:00003420
.text:00003420 var_4           = dword ptr -4
.text:00003420
.text:00003420                 push    ebp
.text:00003421                 mov     ebp, esp
.text:00003423                 push    ecx
.text:00003424                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000342B                 mov     [ebp+var_4], ecx
.text:0000342E                 mov     ecx, [ebp+var_4] ; this
.text:00003431                 call    ??0CItem@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItem::CItem(void)
.text:00003436                 mov     eax, [ebp+var_4]
.text:00003439                 add     esp, 4
.text:0000343C                 cmp     ebp, esp
.text:0000343E                 call    __RTC_CheckEsp
.text:00003443                 mov     esp, ebp
.text:00003445                 pop     ebp
.text:00003446                 retn
.text:00003446 ??0CItemEx@NTar@NArchive@@QAE@XZ endp
.text:00003446
.text:00003446 ; ---------------------------------------------------------------------------
.text:00003447                 align 4
.text:00003447 _text           ends
.text:00003447
.text:00003448 ; ===========================================================================
.text:00003448
.text:00003448 ; Segment type: Pure code
.text:00003448 ; Segment permissions: Read/Execute
.text:00003448 _text           segment para public 'CODE' use32
.text:00003448                 assume cs:_text
.text:00003448                 ;org 3448h
.text:00003448 ; COMDAT (pick any)
.text:00003448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003448
.text:00003448 ; =============== S U B R O U T I N E =======================================
.text:00003448
.text:00003448 ; Attributes: bp-based frame
.text:00003448
.text:00003448 ; _DWORD __thiscall NArchive::NTar::CItem::CItem(NArchive::NTar::CItem *__hidden this)
.text:00003448                 public ??0CItem@NTar@NArchive@@QAE@XZ
.text:00003448 ??0CItem@NTar@NArchive@@QAE@XZ proc near
.text:00003448                                         ; CODE XREF: NArchive::NTar::CItemEx::CItemEx(void)+11p
.text:00003448
.text:00003448 var_10          = dword ptr -10h
.text:00003448 var_C           = dword ptr -0Ch
.text:00003448 var_4           = dword ptr -4
.text:00003448
.text:00003448                 push    ebp
.text:00003449                 mov     ebp, esp
.text:0000344B                 push    0FFFFFFFFh
.text:0000344D                 push    offset __ehhandler$??0CItem@NTar@NArchive@@QAE@XZ
.text:00003452                 mov     eax, large fs:0
.text:00003458                 push    eax
.text:00003459                 push    ecx
.text:0000345A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003461                 mov     eax, dword ptr ds:___security_cookie
.text:00003466                 xor     eax, ebp
.text:00003468                 push    eax
.text:00003469                 lea     eax, [ebp+var_C]
.text:0000346C                 mov     large fs:0, eax
.text:00003472                 mov     [ebp+var_10], ecx
.text:00003475                 mov     ecx, [ebp+var_10]
.text:00003478                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000347D                 mov     [ebp+var_4], 0
.text:00003484                 mov     ecx, [ebp+var_10]
.text:00003487                 add     ecx, 3Ch ; '<'
.text:0000348A                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000348F                 mov     byte ptr [ebp+var_4], 1
.text:00003493                 mov     ecx, [ebp+var_10]
.text:00003496                 add     ecx, 48h ; 'H'
.text:00003499                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:0000349E                 mov     byte ptr [ebp+var_4], 2
.text:000034A2                 mov     ecx, [ebp+var_10]
.text:000034A5                 add     ecx, 54h ; 'T'
.text:000034A8                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000034AD                 mov     byte ptr [ebp+var_4], 3
.text:000034B1                 mov     ecx, [ebp+var_10]
.text:000034B4                 add     ecx, 6Ch ; 'l'
.text:000034B7                 call    ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(void)
.text:000034BC                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000034C3                 mov     eax, [ebp+var_10]
.text:000034C6                 mov     ecx, [ebp+var_C]
.text:000034C9                 mov     large fs:0, ecx
.text:000034D0                 pop     ecx
.text:000034D1                 add     esp, 10h
.text:000034D4                 cmp     ebp, esp
.text:000034D6                 call    __RTC_CheckEsp
.text:000034DB                 mov     esp, ebp
.text:000034DD                 pop     ebp
.text:000034DE                 retn
.text:000034DE ??0CItem@NTar@NArchive@@QAE@XZ endp
.text:000034DE
.text:000034DE ; ---------------------------------------------------------------------------
.text:000034DF                 align 10h
.text:000034DF _text           ends
.text:000034DF
.text$x:000034E0 ; ===========================================================================
.text$x:000034E0
.text$x:000034E0 ; Segment type: Pure code
.text$x:000034E0 ; Segment permissions: Read/Execute
.text$x:000034E0 _text$x         segment para public 'CODE' use32
.text$x:000034E0                 assume cs:_text$x
.text$x:000034E0                 ;org 34E0h
.text$x:000034E0 ; COMDAT (pick associative to section at 3448)
.text$x:000034E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000034E0
.text$x:000034E0 ; =============== S U B R O U T I N E =======================================
.text$x:000034E0
.text$x:000034E0
.text$x:000034E0 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:000034E0                                         ; DATA XREF: .xdata$x:00003528o
.text$x:000034E0                 mov     ecx, [ebp-10h]  ; this
.text$x:000034E3                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000034E3 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0 endp
.text$x:000034E3
.text$x:000034E8
.text$x:000034E8 ; =============== S U B R O U T I N E =======================================
.text$x:000034E8
.text$x:000034E8
.text$x:000034E8 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1 proc near
.text$x:000034E8                                         ; DATA XREF: .xdata$x:00003530o
.text$x:000034E8                 mov     ecx, [ebp-10h]
.text$x:000034EB                 add     ecx, 3Ch ; '<'  ; this
.text$x:000034EE                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000034EE __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1 endp
.text$x:000034EE
.text$x:000034F3
.text$x:000034F3 ; =============== S U B R O U T I N E =======================================
.text$x:000034F3
.text$x:000034F3
.text$x:000034F3 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2 proc near
.text$x:000034F3                                         ; DATA XREF: .xdata$x:00003538o
.text$x:000034F3                 mov     ecx, [ebp-10h]
.text$x:000034F6                 add     ecx, 48h ; 'H'  ; this
.text$x:000034F9                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000034F9 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2 endp
.text$x:000034F9
.text$x:000034FE
.text$x:000034FE ; =============== S U B R O U T I N E =======================================
.text$x:000034FE
.text$x:000034FE
.text$x:000034FE __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3 proc near
.text$x:000034FE                                         ; DATA XREF: .xdata$x:00003540o
.text$x:000034FE                 mov     ecx, [ebp-10h]
.text$x:00003501                 add     ecx, 54h ; 'T'  ; this
.text$x:00003504                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003504 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3 endp
.text$x:00003504
.text$x:00003509
.text$x:00003509 ; =============== S U B R O U T I N E =======================================
.text$x:00003509
.text$x:00003509
.text$x:00003509 __ehhandler$??0CItem@NTar@NArchive@@QAE@XZ proc near
.text$x:00003509                                         ; DATA XREF: NArchive::NTar::CItem::CItem(void)+5o
.text$x:00003509
.text$x:00003509 arg_4           = dword ptr  8
.text$x:00003509
.text$x:00003509                 mov     edx, [esp+arg_4]
.text$x:0000350D                 lea     eax, [edx+0Ch]
.text$x:00003510                 mov     ecx, [edx-8]
.text$x:00003513                 xor     ecx, eax
.text$x:00003515                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000351A                 mov     eax, offset __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ
.text$x:0000351F                 jmp     ___CxxFrameHandler3
.text$x:0000351F __ehhandler$??0CItem@NTar@NArchive@@QAE@XZ endp
.text$x:0000351F
.text$x:0000351F _text$x         ends
.text$x:0000351F
.xdata$x:00003524 ; ===========================================================================
.xdata$x:00003524
.xdata$x:00003524 ; Segment type: Pure data
.xdata$x:00003524 ; Segment permissions: Read
.xdata$x:00003524 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003524                 assume cs:_xdata$x
.xdata$x:00003524                 ;org 3524h
.xdata$x:00003524 ; COMDAT (pick associative to section at 3448)
.xdata$x:00003524 __unwindtable$??0CItem@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003524                                         ; DATA XREF: .xdata$x:0000354Co
.xdata$x:00003525                 db 0FFh
.xdata$x:00003526                 db 0FFh
.xdata$x:00003527                 db 0FFh
.xdata$x:00003528                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0
.xdata$x:0000352C                 align 10h
.xdata$x:00003530                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1
.xdata$x:00003534                 db    1
.xdata$x:00003535                 db    0
.xdata$x:00003536                 db    0
.xdata$x:00003537                 db    0
.xdata$x:00003538                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2
.xdata$x:0000353C                 db    2
.xdata$x:0000353D                 db    0
.xdata$x:0000353E                 db    0
.xdata$x:0000353F                 db    0
.xdata$x:00003540                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3
.xdata$x:00003544 __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003544                                         ; DATA XREF: __ehhandler$??0CItem@NTar@NArchive@@QAE@XZ+11o
.xdata$x:00003545                 db    5
.xdata$x:00003546                 db  93h ; ô
.xdata$x:00003547                 db  19h
.xdata$x:00003548                 db    4
.xdata$x:00003549                 db    0
.xdata$x:0000354A                 db    0
.xdata$x:0000354B                 db    0
.xdata$x:0000354C                 dd offset __unwindtable$??0CItem@NTar@NArchive@@QAE@XZ
.xdata$x:00003550                 db    0
.xdata$x:00003551                 db    0
.xdata$x:00003552                 db    0
.xdata$x:00003553                 db    0
.xdata$x:00003554                 db    0
.xdata$x:00003555                 db    0
.xdata$x:00003556                 db    0
.xdata$x:00003557                 db    0
.xdata$x:00003558                 db    0
.xdata$x:00003559                 db    0
.xdata$x:0000355A                 db    0
.xdata$x:0000355B                 db    0
.xdata$x:0000355C                 db    0
.xdata$x:0000355D                 db    0
.xdata$x:0000355E                 db    0
.xdata$x:0000355F                 db    0
.xdata$x:00003560                 db    0
.xdata$x:00003561                 db    0
.xdata$x:00003562                 db    0
.xdata$x:00003563                 db    0
.xdata$x:00003564                 db    1
.xdata$x:00003565                 db    0
.xdata$x:00003566                 db    0
.xdata$x:00003567                 db    0
.xdata$x:00003567 _xdata$x        ends
.xdata$x:00003567
.rdata:00003568 ; ===========================================================================
.rdata:00003568
.rdata:00003568 ; Segment type: Pure data
.rdata:00003568 ; Segment permissions: Read
.rdata:00003568 _rdata          segment dword public 'DATA' use32
.rdata:00003568                 assume cs:_rdata
.rdata:00003568                 ;org 3568h
.rdata:00003568 ; COMDAT (pick largest)
.rdata:00003568                 dd offset ??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@ ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:0000356C                 public ??_7CHandler@NTar@NArchive@@6BIOutArchive@@@
.rdata:0000356C ; const NArchive::NTar::CHandler::`vftable'{for `IOutArchive'}
.rdata:0000356C ??_7CHandler@NTar@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z
.rdata:0000356C                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+A2o
.rdata:0000356C                                         ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{16}' (_GUID const &,void * *)
.rdata:00003570                 dd offset ?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ ; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{16}' (void)
.rdata:00003574                 dd offset ?Release@CHandler@NTar@NArchive@@WBA@AGKXZ ; [thunk]:NArchive::NTar::CHandler::Release`adjustor{16}' (void)
.rdata:00003578                 dd offset ?UpdateItems@CHandler@NTar@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NTar::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:0000357C                 dd offset ?GetFileTimeType@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetFileTimeType(uint *)
.rdata:0000357C _rdata          ends
.rdata:0000357C
.rdata:00003580 ; ===========================================================================
.rdata:00003580
.rdata:00003580 ; Segment type: Pure data
.rdata:00003580 ; Segment permissions: Read
.rdata:00003580 _rdata          segment dword public 'DATA' use32
.rdata:00003580                 assume cs:_rdata
.rdata:00003580                 ;org 3580h
.rdata:00003580 ; COMDAT (pick largest)
.rdata:00003580                 dd offset ??_R4CHandler@NTar@NArchive@@6BISetProperties@@@ ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00003584                 public ??_7CHandler@NTar@NArchive@@6BISetProperties@@@
.rdata:00003584 ; const NArchive::NTar::CHandler::`vftable'{for `ISetProperties'}
.rdata:00003584 ??_7CHandler@NTar@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00003584                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+98o
.rdata:00003584                                         ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00003588                 dd offset ?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{12}' (void)
.rdata:0000358C                 dd offset ?Release@CHandler@NTar@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NTar::CHandler::Release`adjustor{12}' (void)
.rdata:00003590                 dd offset ?SetProperties@CHandler@NTar@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00003590 _rdata          ends
.rdata:00003590
.rdata:00003594 ; ===========================================================================
.rdata:00003594
.rdata:00003594 ; Segment type: Pure data
.rdata:00003594 ; Segment permissions: Read
.rdata:00003594 _rdata          segment dword public 'DATA' use32
.rdata:00003594                 assume cs:_rdata
.rdata:00003594                 ;org 3594h
.rdata:00003594 ; COMDAT (pick largest)
.rdata:00003594                 dd offset ??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IInArchiveGetStream'}
.rdata:00003598                 public ??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@
.rdata:00003598 ; const NArchive::NTar::CHandler::`vftable'{for `IInArchiveGetStream'}
.rdata:00003598 ??_7CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ dd offset ?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00003598                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+8Eo
.rdata:00003598                                         ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000359C                 dd offset ?AddRef@CHandler@NTar@NArchive@@W7AGKXZ ; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{8}' (void)
.rdata:000035A0                 dd offset ?Release@CHandler@NTar@NArchive@@W7AGKXZ ; [thunk]:NArchive::NTar::CHandler::Release`adjustor{8}' (void)
.rdata:000035A4                 dd offset ?GetStream@CHandler@NTar@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ; NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)
.rdata:000035A4 _rdata          ends
.rdata:000035A4
.rdata:000035A8 ; ===========================================================================
.rdata:000035A8
.rdata:000035A8 ; Segment type: Pure data
.rdata:000035A8 ; Segment permissions: Read
.rdata:000035A8 _rdata          segment dword public 'DATA' use32
.rdata:000035A8                 assume cs:_rdata
.rdata:000035A8                 ;org 35A8h
.rdata:000035A8 ; COMDAT (pick largest)
.rdata:000035A8                 dd offset ??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata:000035AC                 public ??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@
.rdata:000035AC ; const NArchive::NTar::CHandler::`vftable'{for `IArchiveOpenSeq'}
.rdata:000035AC ??_7CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ dd offset ?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000035AC                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+84o
.rdata:000035AC                                         ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000035B0                 dd offset ?AddRef@CHandler@NTar@NArchive@@W3AGKXZ ; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{4}' (void)
.rdata:000035B4                 dd offset ?Release@CHandler@NTar@NArchive@@W3AGKXZ ; [thunk]:NArchive::NTar::CHandler::Release`adjustor{4}' (void)
.rdata:000035B8                 dd offset ?OpenSeq@CHandler@NTar@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NTar::CHandler::OpenSeq(ISequentialInStream *)
.rdata:000035B8 _rdata          ends
.rdata:000035B8
.rdata:000035BC ; ===========================================================================
.rdata:000035BC
.rdata:000035BC ; Segment type: Pure data
.rdata:000035BC ; Segment permissions: Read
.rdata:000035BC _rdata          segment dword public 'DATA' use32
.rdata:000035BC                 assume cs:_rdata
.rdata:000035BC                 ;org 35BCh
.rdata:000035BC ; COMDAT (pick largest)
.rdata:000035BC                 dd offset ??_R4CHandler@NTar@NArchive@@6BIInArchive@@@ ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:000035C0                 public ??_7CHandler@NTar@NArchive@@6BIInArchive@@@
.rdata:000035C0 ; const NArchive::NTar::CHandler::`vftable'{for `IInArchive'}
.rdata:000035C0 ??_7CHandler@NTar@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000035C0                                         ; DATA XREF: NArchive::NTar::CHandler::CHandler(void)+7Bo
.rdata:000035C0                                         ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:000035C4                 dd offset ?AddRef@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::AddRef(void)
.rdata:000035C8                 dd offset ?Release@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::Release(void)
.rdata:000035CC                 dd offset ?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:000035D0                 dd offset ?Close@CHandler@NTar@NArchive@@UAGJXZ ; NArchive::NTar::CHandler::Close(void)
.rdata:000035D4                 dd offset ?GetNumberOfItems@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfItems(uint *)
.rdata:000035D8                 dd offset ?GetProperty@CHandler@NTar@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:000035DC                 dd offset ?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:000035E0                 dd offset ?GetArchiveProperty@CHandler@NTar@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:000035E4                 dd offset ?GetNumberOfProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfProperties(uint *)
.rdata:000035E8                 dd offset ?GetPropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NTar::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000035EC                 dd offset ?GetNumberOfArchiveProperties@CHandler@NTar@NArchive@@UAGJPAI@Z ; NArchive::NTar::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:000035F0                 dd offset ?GetArchivePropertyInfo@CHandler@NTar@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NTar::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:000035F0 _rdata          ends
.rdata:000035F0
.rdata$r:000035F4 ; ===========================================================================
.rdata$r:000035F4
.rdata$r:000035F4 ; Segment type: Pure data
.rdata$r:000035F4 ; Segment permissions: Read
.rdata$r:000035F4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000035F4                 assume cs:_rdata$r
.rdata$r:000035F4                 ;org 35F4h
.rdata$r:000035F4 ; COMDAT (pick any)
.rdata$r:000035F4                 public ??_R4CHandler@NTar@NArchive@@6BIInArchive@@@
.rdata$r:000035F4 ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:000035F4 ??_R4CHandler@NTar@NArchive@@6BIInArchive@@@ db    0
.rdata$r:000035F4                                         ; DATA XREF: .rdata:000035BCo
.rdata$r:000035F5                 db    0
.rdata$r:000035F6                 db    0
.rdata$r:000035F7                 db    0
.rdata$r:000035F8                 db    0
.rdata$r:000035F9                 db    0
.rdata$r:000035FA                 db    0
.rdata$r:000035FB                 db    0
.rdata$r:000035FC                 db    0
.rdata$r:000035FD                 db    0
.rdata$r:000035FE                 db    0
.rdata$r:000035FF                 db    0
.rdata$r:00003600                 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003604                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003604 _rdata$r        ends
.rdata$r:00003604
.data:00003608 ; ===========================================================================
.data:00003608
.data:00003608 ; Segment type: Pure data
.data:00003608 ; Segment permissions: Read/Write
.data:00003608 _data           segment dword public 'DATA' use32
.data:00003608                 assume cs:_data
.data:00003608                 ;org 3608h
.data:00003608 ; COMDAT (pick any)
.data:00003608                 public ??_R0?AVCHandler@NTar@NArchive@@@8
.data:00003608 ; class NArchive::NTar::CHandler `RTTI Type Descriptor'
.data:00003608 ??_R0?AVCHandler@NTar@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003608                                         ; DATA XREF: .rdata$r:00003600o
.data:00003608                                         ; .rdata$r:NArchive::NTar::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003608                                         ; const type_info::`vftable'
.data:0000360C                 align 10h
.data:00003610 a_?avchandler@n db '.?AVCHandler@NTar@NArchive@@',0
.data:0000362D                 align 10h
.data:0000362D _data           ends
.data:0000362D
.rdata$r:00003630 ; ===========================================================================
.rdata$r:00003630
.rdata$r:00003630 ; Segment type: Pure data
.rdata$r:00003630 ; Segment permissions: Read
.rdata$r:00003630 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003630                 assume cs:_rdata$r
.rdata$r:00003630                 ;org 3630h
.rdata$r:00003630 ; COMDAT (pick any)
.rdata$r:00003630                 public ??_R3CHandler@NTar@NArchive@@8
.rdata$r:00003630 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003630 ??_R3CHandler@NTar@NArchive@@8 db    0  ; DATA XREF: .rdata$r:00003604o
.rdata$r:00003630                                         ; .rdata$r:0000368Co ...
.rdata$r:00003631                 db    0
.rdata$r:00003632                 db    0
.rdata$r:00003633                 db    0
.rdata$r:00003634                 db    5
.rdata$r:00003635                 db    0
.rdata$r:00003636                 db    0
.rdata$r:00003637                 db    0
.rdata$r:00003638                 db  0Ch
.rdata$r:00003639                 db    0
.rdata$r:0000363A                 db    0
.rdata$r:0000363B                 db    0
.rdata$r:0000363C                 dd offset ??_R2CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Base Class Array'
.rdata$r:0000363C _rdata$r        ends
.rdata$r:0000363C
.rdata$r:00003640 ; ===========================================================================
.rdata$r:00003640
.rdata$r:00003640 ; Segment type: Pure data
.rdata$r:00003640 ; Segment permissions: Read
.rdata$r:00003640 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003640                 assume cs:_rdata$r
.rdata$r:00003640                 ;org 3640h
.rdata$r:00003640 ; COMDAT (pick any)
.rdata$r:00003640                 public ??_R2CHandler@NTar@NArchive@@8
.rdata$r:00003640 ; NArchive::NTar::CHandler::`RTTI Base Class Array'
.rdata$r:00003640 ??_R2CHandler@NTar@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NTar@NArchive@@8
.rdata$r:00003640                                         ; DATA XREF: .rdata$r:0000363Co
.rdata$r:00003640                                         ; NArchive::NTar::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003644                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003648                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000364C                 dd offset ??_R13?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003650                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003654                 dd offset ??_R17?0A@EA@IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003658                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000365C                 dd offset ??_R1M@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00003660                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00003664                 dd offset ??_R1BA@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00003668                 dd offset ??_R1BA@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (16,-1,0,66)'
.rdata$r:0000366C                 dd offset ??_R1BE@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'
.rdata$r:00003670                 db    0
.rdata$r:00003671                 align 4
.rdata$r:00003671 _rdata$r        ends
.rdata$r:00003671
.rdata$r:00003674 ; ===========================================================================
.rdata$r:00003674
.rdata$r:00003674 ; Segment type: Pure data
.rdata$r:00003674 ; Segment permissions: Read
.rdata$r:00003674 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003674                 assume cs:_rdata$r
.rdata$r:00003674                 ;org 3674h
.rdata$r:00003674 ; COMDAT (pick any)
.rdata$r:00003674                 public ??_R1A@?0A@EA@CHandler@NTar@NArchive@@8
.rdata$r:00003674 ; NArchive::NTar::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003674 ??_R1A@?0A@EA@CHandler@NTar@NArchive@@8 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8
.rdata$r:00003674                                         ; DATA XREF: .rdata$r:NArchive::NTar::CHandler::`RTTI Base Class Array'o
.rdata$r:00003674                                         ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003678                 db  0Bh
.rdata$r:00003679                 db    0
.rdata$r:0000367A                 db    0
.rdata$r:0000367B                 db    0
.rdata$r:0000367C                 db    0
.rdata$r:0000367D                 db    0
.rdata$r:0000367E                 db    0
.rdata$r:0000367F                 db    0
.rdata$r:00003680                 db 0FFh
.rdata$r:00003681                 db 0FFh
.rdata$r:00003682                 db 0FFh
.rdata$r:00003683                 db 0FFh
.rdata$r:00003684                 db    0
.rdata$r:00003685                 db    0
.rdata$r:00003686                 db    0
.rdata$r:00003687                 db    0
.rdata$r:00003688                 db  40h ; @
.rdata$r:00003689                 db    0
.rdata$r:0000368A                 db    0
.rdata$r:0000368B                 db    0
.rdata$r:0000368C                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000368C _rdata$r        ends
.rdata$r:0000368C
.rdata$r:00003690 ; ===========================================================================
.rdata$r:00003690
.rdata$r:00003690 ; Segment type: Pure data
.rdata$r:00003690 ; Segment permissions: Read
.rdata$r:00003690 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003690                 assume cs:_rdata$r
.rdata$r:00003690                 ;org 3690h
.rdata$r:00003690 ; COMDAT (pick any)
.rdata$r:00003690                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00003690 ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003690 ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:00003690                                         ; DATA XREF: .rdata$r:00003644o
.rdata$r:00003690                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:00003690                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:00003694                 db    1
.rdata$r:00003695                 db    0
.rdata$r:00003696                 db    0
.rdata$r:00003697                 db    0
.rdata$r:00003698                 db    0
.rdata$r:00003699                 db    0
.rdata$r:0000369A                 db    0
.rdata$r:0000369B                 db    0
.rdata$r:0000369C                 db 0FFh
.rdata$r:0000369D                 db 0FFh
.rdata$r:0000369E                 db 0FFh
.rdata$r:0000369F                 db 0FFh
.rdata$r:000036A0                 db    0
.rdata$r:000036A1                 db    0
.rdata$r:000036A2                 db    0
.rdata$r:000036A3                 db    0
.rdata$r:000036A4                 db  40h ; @
.rdata$r:000036A5                 db    0
.rdata$r:000036A6                 db    0
.rdata$r:000036A7                 db    0
.rdata$r:000036A8                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000036A8 _rdata$r        ends
.rdata$r:000036A8
.data:000036AC ; ===========================================================================
.data:000036AC
.data:000036AC ; Segment type: Pure data
.data:000036AC ; Segment permissions: Read/Write
.data:000036AC _data           segment dword public 'DATA' use32
.data:000036AC                 assume cs:_data
.data:000036AC                 ;org 36ACh
.data:000036AC ; COMDAT (pick any)
.data:000036AC                 public ??_R0?AUIInArchive@@@8
.data:000036AC ; struct IInArchive `RTTI Type Descriptor'
.data:000036AC ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:000036AC                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000036AC                                         ; .rdata$r:000045B0o
.data:000036AC                                         ; const type_info::`vftable'
.data:000036B0                 db    0
.data:000036B1                 db    0
.data:000036B2                 db    0
.data:000036B3                 db    0
.data:000036B4                 db  2Eh ; .
.data:000036B5                 db  3Fh ; ?
.data:000036B6                 db  41h ; A
.data:000036B7                 db  55h ; U
.data:000036B8                 db  49h ; I
.data:000036B9                 db  49h ; I
.data:000036BA                 db  6Eh ; n
.data:000036BB                 db  41h ; A
.data:000036BC                 db  72h ; r
.data:000036BD                 db  63h ; c
.data:000036BE                 db  68h ; h
.data:000036BF                 db  69h ; i
.data:000036C0                 db  76h ; v
.data:000036C1                 db  65h ; e
.data:000036C2                 db  40h ; @
.data:000036C3                 db  40h ; @
.data:000036C4                 db    0
.data:000036C5                 align 4
.data:000036C5 _data           ends
.data:000036C5
.rdata$r:000036C8 ; ===========================================================================
.rdata$r:000036C8
.rdata$r:000036C8 ; Segment type: Pure data
.rdata$r:000036C8 ; Segment permissions: Read
.rdata$r:000036C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000036C8                 assume cs:_rdata$r
.rdata$r:000036C8                 ;org 36C8h
.rdata$r:000036C8 ; COMDAT (pick any)
.rdata$r:000036C8                 public ??_R3IInArchive@@8
.rdata$r:000036C8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000036C8 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:000036A8o
.rdata$r:000036C8                                         ; .rdata$r:000045B4o
.rdata$r:000036C9                 db    0
.rdata$r:000036CA                 db    0
.rdata$r:000036CB                 db    0
.rdata$r:000036CC                 db    0
.rdata$r:000036CD                 db    0
.rdata$r:000036CE                 db    0
.rdata$r:000036CF                 db    0
.rdata$r:000036D0                 db    2
.rdata$r:000036D1                 db    0
.rdata$r:000036D2                 db    0
.rdata$r:000036D3                 db    0
.rdata$r:000036D4                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000036D4 _rdata$r        ends
.rdata$r:000036D4
.rdata$r:000036D8 ; ===========================================================================
.rdata$r:000036D8
.rdata$r:000036D8 ; Segment type: Pure data
.rdata$r:000036D8 ; Segment permissions: Read
.rdata$r:000036D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000036D8                 assume cs:_rdata$r
.rdata$r:000036D8                 ;org 36D8h
.rdata$r:000036D8 ; COMDAT (pick any)
.rdata$r:000036D8                 public ??_R2IInArchive@@8
.rdata$r:000036D8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:000036D8 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:000036D8                                         ; DATA XREF: .rdata$r:000036D4o
.rdata$r:000036D8                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000036DC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000036E0                 db    0
.rdata$r:000036E1                 align 4
.rdata$r:000036E1 _rdata$r        ends
.rdata$r:000036E1
.rdata$r:000036E4 ; ===========================================================================
.rdata$r:000036E4
.rdata$r:000036E4 ; Segment type: Pure data
.rdata$r:000036E4 ; Segment permissions: Read
.rdata$r:000036E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000036E4                 assume cs:_rdata$r
.rdata$r:000036E4                 ;org 36E4h
.rdata$r:000036E4 ; COMDAT (pick any)
.rdata$r:000036E4                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000036E4 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000036E4 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000036E4                                         ; DATA XREF: .rdata$r:000036DCo
.rdata$r:000036E4                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000036E4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000036E8                 align 10h
.rdata$r:000036F0                 db 0FFh
.rdata$r:000036F1                 db 0FFh
.rdata$r:000036F2                 db 0FFh
.rdata$r:000036F3                 db 0FFh
.rdata$r:000036F4                 db    0
.rdata$r:000036F5                 db    0
.rdata$r:000036F6                 db    0
.rdata$r:000036F7                 db    0
.rdata$r:000036F8                 db  40h ; @
.rdata$r:000036F9                 db    0
.rdata$r:000036FA                 db    0
.rdata$r:000036FB                 db    0
.rdata$r:000036FC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000036FC _rdata$r        ends
.rdata$r:000036FC
.data:00003700 ; ===========================================================================
.data:00003700
.data:00003700 ; Segment type: Pure data
.data:00003700 ; Segment permissions: Read/Write
.data:00003700 _data           segment dword public 'DATA' use32
.data:00003700                 assume cs:_data
.data:00003700                 ;org 3700h
.data:00003700 ; COMDAT (pick any)
.data:00003700                 public ??_R0?AUIUnknown@@@8
.data:00003700 ; struct IUnknown `RTTI Type Descriptor'
.data:00003700 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00003700                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003700                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00003700                                         ; const type_info::`vftable'
.data:00003704                 align 8
.data:00003708 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:00003717                 align 4
.data:00003717 _data           ends
.data:00003717
.rdata$r:00003718 ; ===========================================================================
.rdata$r:00003718
.rdata$r:00003718 ; Segment type: Pure data
.rdata$r:00003718 ; Segment permissions: Read
.rdata$r:00003718 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003718                 assume cs:_rdata$r
.rdata$r:00003718                 ;org 3718h
.rdata$r:00003718 ; COMDAT (pick any)
.rdata$r:00003718                 public ??_R3IUnknown@@8
.rdata$r:00003718 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003718 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000036FCo
.rdata$r:00003718                                         ; .rdata$r:00003748o ...
.rdata$r:00003719                 db    0
.rdata$r:0000371A                 db    0
.rdata$r:0000371B                 db    0
.rdata$r:0000371C                 db    0
.rdata$r:0000371D                 db    0
.rdata$r:0000371E                 db    0
.rdata$r:0000371F                 db    0
.rdata$r:00003720                 db    1
.rdata$r:00003721                 db    0
.rdata$r:00003722                 db    0
.rdata$r:00003723                 db    0
.rdata$r:00003724                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003724 _rdata$r        ends
.rdata$r:00003724
.rdata$r:00003728 ; ===========================================================================
.rdata$r:00003728
.rdata$r:00003728 ; Segment type: Pure data
.rdata$r:00003728 ; Segment permissions: Read
.rdata$r:00003728 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003728                 assume cs:_rdata$r
.rdata$r:00003728                 ;org 3728h
.rdata$r:00003728 ; COMDAT (pick any)
.rdata$r:00003728                 public ??_R2IUnknown@@8
.rdata$r:00003728 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003728 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003728                                         ; DATA XREF: .rdata$r:00003724o
.rdata$r:00003728                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000372C                 db    0
.rdata$r:0000372D                 align 10h
.rdata$r:0000372D _rdata$r        ends
.rdata$r:0000372D
.rdata$r:00003730 ; ===========================================================================
.rdata$r:00003730
.rdata$r:00003730 ; Segment type: Pure data
.rdata$r:00003730 ; Segment permissions: Read
.rdata$r:00003730 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003730                 assume cs:_rdata$r
.rdata$r:00003730                 ;org 3730h
.rdata$r:00003730 ; COMDAT (pick any)
.rdata$r:00003730                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00003730 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00003730 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003730                                         ; DATA XREF: .rdata$r:00003648o
.rdata$r:00003730                                         ; .rdata$r:00003BACo
.rdata$r:00003730                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003734                 db    0
.rdata$r:00003735                 db    0
.rdata$r:00003736                 db    0
.rdata$r:00003737                 db    0
.rdata$r:00003738                 db    0
.rdata$r:00003739                 db    0
.rdata$r:0000373A                 db    0
.rdata$r:0000373B                 db    0
.rdata$r:0000373C                 db 0FFh
.rdata$r:0000373D                 db 0FFh
.rdata$r:0000373E                 db 0FFh
.rdata$r:0000373F                 db 0FFh
.rdata$r:00003740                 db    0
.rdata$r:00003741                 db    0
.rdata$r:00003742                 db    0
.rdata$r:00003743                 db    0
.rdata$r:00003744                 db  42h ; B
.rdata$r:00003745                 db    0
.rdata$r:00003746                 db    0
.rdata$r:00003747                 db    0
.rdata$r:00003748                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003748 _rdata$r        ends
.rdata$r:00003748
.rdata$r:0000374C ; ===========================================================================
.rdata$r:0000374C
.rdata$r:0000374C ; Segment type: Pure data
.rdata$r:0000374C ; Segment permissions: Read
.rdata$r:0000374C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000374C                 assume cs:_rdata$r
.rdata$r:0000374C                 ;org 374Ch
.rdata$r:0000374C ; COMDAT (pick any)
.rdata$r:0000374C                 public ??_R13?0A@EA@IArchiveOpenSeq@@8
.rdata$r:0000374C ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:0000374C ??_R13?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:0000374C                                         ; DATA XREF: .rdata$r:0000364Co
.rdata$r:0000374C                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00003750                 db    1
.rdata$r:00003751                 db    0
.rdata$r:00003752                 db    0
.rdata$r:00003753                 db    0
.rdata$r:00003754                 db    4
.rdata$r:00003755                 db    0
.rdata$r:00003756                 db    0
.rdata$r:00003757                 db    0
.rdata$r:00003758                 db 0FFh
.rdata$r:00003759                 db 0FFh
.rdata$r:0000375A                 db 0FFh
.rdata$r:0000375B                 db 0FFh
.rdata$r:0000375C                 db    0
.rdata$r:0000375D                 db    0
.rdata$r:0000375E                 db    0
.rdata$r:0000375F                 db    0
.rdata$r:00003760                 db  40h ; @
.rdata$r:00003761                 db    0
.rdata$r:00003762                 db    0
.rdata$r:00003763                 db    0
.rdata$r:00003764                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003764 _rdata$r        ends
.rdata$r:00003764
.data:00003768 ; ===========================================================================
.data:00003768
.data:00003768 ; Segment type: Pure data
.data:00003768 ; Segment permissions: Read/Write
.data:00003768 _data           segment dword public 'DATA' use32
.data:00003768                 assume cs:_data
.data:00003768                 ;org 3768h
.data:00003768 ; COMDAT (pick any)
.data:00003768                 public ??_R0?AUIArchiveOpenSeq@@@8
.data:00003768 ; struct IArchiveOpenSeq `RTTI Type Descriptor'
.data:00003768 ??_R0?AUIArchiveOpenSeq@@@8 dd offset ??_7type_info@@6B@
.data:00003768                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003768                                         ; .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003768                                         ; const type_info::`vftable'
.data:0000376C                 align 10h
.data:00003770 a_?auiarchiveop db '.?AUIArchiveOpenSeq@@',0
.data:00003786                 align 4
.data:00003786 _data           ends
.data:00003786
.rdata$r:00003788 ; ===========================================================================
.rdata$r:00003788
.rdata$r:00003788 ; Segment type: Pure data
.rdata$r:00003788 ; Segment permissions: Read
.rdata$r:00003788 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003788                 assume cs:_rdata$r
.rdata$r:00003788                 ;org 3788h
.rdata$r:00003788 ; COMDAT (pick any)
.rdata$r:00003788                 public ??_R3IArchiveOpenSeq@@8
.rdata$r:00003788 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003788 ??_R3IArchiveOpenSeq@@8 db    0         ; DATA XREF: .rdata$r:00003764o
.rdata$r:00003788                                         ; .rdata$r:000037BCo ...
.rdata$r:00003789                 db    0
.rdata$r:0000378A                 db    0
.rdata$r:0000378B                 db    0
.rdata$r:0000378C                 db    0
.rdata$r:0000378D                 db    0
.rdata$r:0000378E                 db    0
.rdata$r:0000378F                 db    0
.rdata$r:00003790                 db    2
.rdata$r:00003791                 db    0
.rdata$r:00003792                 db    0
.rdata$r:00003793                 db    0
.rdata$r:00003794                 dd offset ??_R2IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00003794 _rdata$r        ends
.rdata$r:00003794
.rdata$r:00003798 ; ===========================================================================
.rdata$r:00003798
.rdata$r:00003798 ; Segment type: Pure data
.rdata$r:00003798 ; Segment permissions: Read
.rdata$r:00003798 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003798                 assume cs:_rdata$r
.rdata$r:00003798                 ;org 3798h
.rdata$r:00003798 ; COMDAT (pick any)
.rdata$r:00003798                 public ??_R2IArchiveOpenSeq@@8
.rdata$r:00003798 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00003798 ??_R2IArchiveOpenSeq@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00003798                                         ; DATA XREF: .rdata$r:00003794o
.rdata$r:00003798                                         ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000379C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000037A0                 db    0
.rdata$r:000037A1                 align 4
.rdata$r:000037A1 _rdata$r        ends
.rdata$r:000037A1
.rdata$r:000037A4 ; ===========================================================================
.rdata$r:000037A4
.rdata$r:000037A4 ; Segment type: Pure data
.rdata$r:000037A4 ; Segment permissions: Read
.rdata$r:000037A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037A4                 assume cs:_rdata$r
.rdata$r:000037A4                 ;org 37A4h
.rdata$r:000037A4 ; COMDAT (pick any)
.rdata$r:000037A4                 public ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:000037A4 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000037A4 ??_R1A@?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:000037A4                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Array'o
.rdata$r:000037A4                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:000037A8                 db    1
.rdata$r:000037A9                 db    0
.rdata$r:000037AA                 db    0
.rdata$r:000037AB                 db    0
.rdata$r:000037AC                 db    0
.rdata$r:000037AD                 db    0
.rdata$r:000037AE                 db    0
.rdata$r:000037AF                 db    0
.rdata$r:000037B0                 db 0FFh
.rdata$r:000037B1                 db 0FFh
.rdata$r:000037B2                 db 0FFh
.rdata$r:000037B3                 db 0FFh
.rdata$r:000037B4                 db    0
.rdata$r:000037B5                 db    0
.rdata$r:000037B6                 db    0
.rdata$r:000037B7                 db    0
.rdata$r:000037B8                 db  40h ; @
.rdata$r:000037B9                 db    0
.rdata$r:000037BA                 db    0
.rdata$r:000037BB                 db    0
.rdata$r:000037BC                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037BC _rdata$r        ends
.rdata$r:000037BC
.rdata$r:000037C0 ; ===========================================================================
.rdata$r:000037C0
.rdata$r:000037C0 ; Segment type: Pure data
.rdata$r:000037C0 ; Segment permissions: Read
.rdata$r:000037C0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037C0                 assume cs:_rdata$r
.rdata$r:000037C0                 ;org 37C0h
.rdata$r:000037C0 ; COMDAT (pick any)
.rdata$r:000037C0                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000037C0 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000037C0 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000037C0                                         ; DATA XREF: .rdata$r:00003650o
.rdata$r:000037C0                                         ; .rdata$r:00003BB4o
.rdata$r:000037C0                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000037C4                 align 8
.rdata$r:000037C8                 db    4
.rdata$r:000037C9                 db    0
.rdata$r:000037CA                 db    0
.rdata$r:000037CB                 db    0
.rdata$r:000037CC                 db 0FFh
.rdata$r:000037CD                 db 0FFh
.rdata$r:000037CE                 db 0FFh
.rdata$r:000037CF                 db 0FFh
.rdata$r:000037D0                 db    0
.rdata$r:000037D1                 db    0
.rdata$r:000037D2                 db    0
.rdata$r:000037D3                 db    0
.rdata$r:000037D4                 db  42h ; B
.rdata$r:000037D5                 db    0
.rdata$r:000037D6                 db    0
.rdata$r:000037D7                 db    0
.rdata$r:000037D8                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037D8 _rdata$r        ends
.rdata$r:000037D8
.rdata$r:000037DC ; ===========================================================================
.rdata$r:000037DC
.rdata$r:000037DC ; Segment type: Pure data
.rdata$r:000037DC ; Segment permissions: Read
.rdata$r:000037DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000037DC                 assume cs:_rdata$r
.rdata$r:000037DC                 ;org 37DCh
.rdata$r:000037DC ; COMDAT (pick any)
.rdata$r:000037DC                 public ??_R17?0A@EA@IInArchiveGetStream@@8
.rdata$r:000037DC ; IInArchiveGetStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000037DC ??_R17?0A@EA@IInArchiveGetStream@@8 dd offset ??_R0?AUIInArchiveGetStream@@@8
.rdata$r:000037DC                                         ; DATA XREF: .rdata$r:00003654o
.rdata$r:000037DC                                         ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:000037E0                 db    1
.rdata$r:000037E1                 db    0
.rdata$r:000037E2                 db    0
.rdata$r:000037E3                 db    0
.rdata$r:000037E4                 db    8
.rdata$r:000037E5                 db    0
.rdata$r:000037E6                 db    0
.rdata$r:000037E7                 db    0
.rdata$r:000037E8                 db 0FFh
.rdata$r:000037E9                 db 0FFh
.rdata$r:000037EA                 db 0FFh
.rdata$r:000037EB                 db 0FFh
.rdata$r:000037EC                 db    0
.rdata$r:000037ED                 db    0
.rdata$r:000037EE                 db    0
.rdata$r:000037EF                 db    0
.rdata$r:000037F0                 db  40h ; @
.rdata$r:000037F1                 db    0
.rdata$r:000037F2                 db    0
.rdata$r:000037F3                 db    0
.rdata$r:000037F4                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000037F4 _rdata$r        ends
.rdata$r:000037F4
.data:000037F8 ; ===========================================================================
.data:000037F8
.data:000037F8 ; Segment type: Pure data
.data:000037F8 ; Segment permissions: Read/Write
.data:000037F8 _data           segment dword public 'DATA' use32
.data:000037F8                 assume cs:_data
.data:000037F8                 ;org 37F8h
.data:000037F8 ; COMDAT (pick any)
.data:000037F8                 public ??_R0?AUIInArchiveGetStream@@@8
.data:000037F8 ; struct IInArchiveGetStream `RTTI Type Descriptor'
.data:000037F8 ??_R0?AUIInArchiveGetStream@@@8 dd offset ??_7type_info@@6B@
.data:000037F8                                         ; DATA XREF: .rdata$r:IInArchiveGetStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000037F8                                         ; .rdata$r:IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000037F8                                         ; const type_info::`vftable'
.data:000037FC                 align 10h
.data:00003800 a_?auiinarchive db '.?AUIInArchiveGetStream@@',0
.data:0000381A                 align 4
.data:0000381A _data           ends
.data:0000381A
.rdata$r:0000381C ; ===========================================================================
.rdata$r:0000381C
.rdata$r:0000381C ; Segment type: Pure data
.rdata$r:0000381C ; Segment permissions: Read
.rdata$r:0000381C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000381C                 assume cs:_rdata$r
.rdata$r:0000381C                 ;org 381Ch
.rdata$r:0000381C ; COMDAT (pick any)
.rdata$r:0000381C                 public ??_R3IInArchiveGetStream@@8
.rdata$r:0000381C ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000381C ??_R3IInArchiveGetStream@@8 db    0     ; DATA XREF: .rdata$r:000037F4o
.rdata$r:0000381C                                         ; .rdata$r:00003850o ...
.rdata$r:0000381D                 db    0
.rdata$r:0000381E                 db    0
.rdata$r:0000381F                 db    0
.rdata$r:00003820                 db    0
.rdata$r:00003821                 db    0
.rdata$r:00003822                 db    0
.rdata$r:00003823                 db    0
.rdata$r:00003824                 db    2
.rdata$r:00003825                 db    0
.rdata$r:00003826                 db    0
.rdata$r:00003827                 db    0
.rdata$r:00003828                 dd offset ??_R2IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Array'
.rdata$r:00003828 _rdata$r        ends
.rdata$r:00003828
.rdata$r:0000382C ; ===========================================================================
.rdata$r:0000382C
.rdata$r:0000382C ; Segment type: Pure data
.rdata$r:0000382C ; Segment permissions: Read
.rdata$r:0000382C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000382C                 assume cs:_rdata$r
.rdata$r:0000382C                 ;org 382Ch
.rdata$r:0000382C ; COMDAT (pick any)
.rdata$r:0000382C                 public ??_R2IInArchiveGetStream@@8
.rdata$r:0000382C ; IInArchiveGetStream::`RTTI Base Class Array'
.rdata$r:0000382C ??_R2IInArchiveGetStream@@8 dd offset ??_R1A@?0A@EA@IInArchiveGetStream@@8
.rdata$r:0000382C                                         ; DATA XREF: .rdata$r:00003828o
.rdata$r:0000382C                                         ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003830                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003834                 db    0
.rdata$r:00003835                 align 4
.rdata$r:00003835 _rdata$r        ends
.rdata$r:00003835
.rdata$r:00003838 ; ===========================================================================
.rdata$r:00003838
.rdata$r:00003838 ; Segment type: Pure data
.rdata$r:00003838 ; Segment permissions: Read
.rdata$r:00003838 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003838                 assume cs:_rdata$r
.rdata$r:00003838                 ;org 3838h
.rdata$r:00003838 ; COMDAT (pick any)
.rdata$r:00003838                 public ??_R1A@?0A@EA@IInArchiveGetStream@@8
.rdata$r:00003838 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003838 ??_R1A@?0A@EA@IInArchiveGetStream@@8 dd offset ??_R0?AUIInArchiveGetStream@@@8
.rdata$r:00003838                                         ; DATA XREF: .rdata$r:IInArchiveGetStream::`RTTI Base Class Array'o
.rdata$r:00003838                                         ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:0000383C                 db    1
.rdata$r:0000383D                 db    0
.rdata$r:0000383E                 db    0
.rdata$r:0000383F                 db    0
.rdata$r:00003840                 db    0
.rdata$r:00003841                 db    0
.rdata$r:00003842                 db    0
.rdata$r:00003843                 db    0
.rdata$r:00003844                 db 0FFh
.rdata$r:00003845                 db 0FFh
.rdata$r:00003846                 db 0FFh
.rdata$r:00003847                 db 0FFh
.rdata$r:00003848                 db    0
.rdata$r:00003849                 db    0
.rdata$r:0000384A                 db    0
.rdata$r:0000384B                 db    0
.rdata$r:0000384C                 db  40h ; @
.rdata$r:0000384D                 db    0
.rdata$r:0000384E                 db    0
.rdata$r:0000384F                 db    0
.rdata$r:00003850                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003850 _rdata$r        ends
.rdata$r:00003850
.rdata$r:00003854 ; ===========================================================================
.rdata$r:00003854
.rdata$r:00003854 ; Segment type: Pure data
.rdata$r:00003854 ; Segment permissions: Read
.rdata$r:00003854 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003854                 assume cs:_rdata$r
.rdata$r:00003854                 ;org 3854h
.rdata$r:00003854 ; COMDAT (pick any)
.rdata$r:00003854                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00003854 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00003854 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003854                                         ; DATA XREF: .rdata$r:00003658o
.rdata$r:00003854                                         ; .rdata$r:00003BBCo
.rdata$r:00003854                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003858                 db    0
.rdata$r:00003859                 db    0
.rdata$r:0000385A                 db    0
.rdata$r:0000385B                 db    0
.rdata$r:0000385C                 db    8
.rdata$r:0000385D                 db    0
.rdata$r:0000385E                 db    0
.rdata$r:0000385F                 db    0
.rdata$r:00003860                 db 0FFh
.rdata$r:00003861                 db 0FFh
.rdata$r:00003862                 db 0FFh
.rdata$r:00003863                 db 0FFh
.rdata$r:00003864                 db    0
.rdata$r:00003865                 db    0
.rdata$r:00003866                 db    0
.rdata$r:00003867                 db    0
.rdata$r:00003868                 db  42h ; B
.rdata$r:00003869                 db    0
.rdata$r:0000386A                 db    0
.rdata$r:0000386B                 db    0
.rdata$r:0000386C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000386C _rdata$r        ends
.rdata$r:0000386C
.rdata$r:00003870 ; ===========================================================================
.rdata$r:00003870
.rdata$r:00003870 ; Segment type: Pure data
.rdata$r:00003870 ; Segment permissions: Read
.rdata$r:00003870 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003870                 assume cs:_rdata$r
.rdata$r:00003870                 ;org 3870h
.rdata$r:00003870 ; COMDAT (pick any)
.rdata$r:00003870                 public ??_R1M@?0A@EA@ISetProperties@@8
.rdata$r:00003870 ; ISetProperties::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00003870 ??_R1M@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00003870                                         ; DATA XREF: .rdata$r:0000365Co
.rdata$r:00003870                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00003874                 db    1
.rdata$r:00003875                 db    0
.rdata$r:00003876                 db    0
.rdata$r:00003877                 db    0
.rdata$r:00003878                 db  0Ch
.rdata$r:00003879                 db    0
.rdata$r:0000387A                 db    0
.rdata$r:0000387B                 db    0
.rdata$r:0000387C                 db 0FFh
.rdata$r:0000387D                 db 0FFh
.rdata$r:0000387E                 db 0FFh
.rdata$r:0000387F                 db 0FFh
.rdata$r:00003880                 db    0
.rdata$r:00003881                 db    0
.rdata$r:00003882                 db    0
.rdata$r:00003883                 db    0
.rdata$r:00003884                 db  40h ; @
.rdata$r:00003885                 db    0
.rdata$r:00003886                 db    0
.rdata$r:00003887                 db    0
.rdata$r:00003888                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003888 _rdata$r        ends
.rdata$r:00003888
.data:0000388C ; ===========================================================================
.data:0000388C
.data:0000388C ; Segment type: Pure data
.data:0000388C ; Segment permissions: Read/Write
.data:0000388C _data           segment dword public 'DATA' use32
.data:0000388C                 assume cs:_data
.data:0000388C                 ;org 388Ch
.data:0000388C ; COMDAT (pick any)
.data:0000388C                 public ??_R0?AUISetProperties@@@8
.data:0000388C ; struct ISetProperties `RTTI Type Descriptor'
.data:0000388C ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:0000388C                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:0000388C                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000388C                                         ; const type_info::`vftable'
.data:00003890                 db    0
.data:00003891                 db    0
.data:00003892                 db    0
.data:00003893                 db    0
.data:00003894                 db  2Eh ; .
.data:00003895                 db  3Fh ; ?
.data:00003896                 db  41h ; A
.data:00003897                 db  55h ; U
.data:00003898                 db  49h ; I
.data:00003899                 db  53h ; S
.data:0000389A                 db  65h ; e
.data:0000389B                 db  74h ; t
.data:0000389C                 db  50h ; P
.data:0000389D                 db  72h ; r
.data:0000389E                 db  6Fh ; o
.data:0000389F                 db  70h ; p
.data:000038A0                 db  65h ; e
.data:000038A1                 db  72h ; r
.data:000038A2                 db  74h ; t
.data:000038A3                 db  69h ; i
.data:000038A4                 db  65h ; e
.data:000038A5                 db  73h ; s
.data:000038A6                 db  40h ; @
.data:000038A7                 db  40h ; @
.data:000038A8                 db    0
.data:000038A9                 align 4
.data:000038A9 _data           ends
.data:000038A9
.rdata$r:000038AC ; ===========================================================================
.rdata$r:000038AC
.rdata$r:000038AC ; Segment type: Pure data
.rdata$r:000038AC ; Segment permissions: Read
.rdata$r:000038AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000038AC                 assume cs:_rdata$r
.rdata$r:000038AC                 ;org 38ACh
.rdata$r:000038AC ; COMDAT (pick any)
.rdata$r:000038AC                 public ??_R3ISetProperties@@8
.rdata$r:000038AC ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000038AC ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:00003888o
.rdata$r:000038AC                                         ; .rdata$r:000038E0o ...
.rdata$r:000038AD                 db    0
.rdata$r:000038AE                 db    0
.rdata$r:000038AF                 db    0
.rdata$r:000038B0                 db    0
.rdata$r:000038B1                 db    0
.rdata$r:000038B2                 db    0
.rdata$r:000038B3                 db    0
.rdata$r:000038B4                 db    2
.rdata$r:000038B5                 db    0
.rdata$r:000038B6                 db    0
.rdata$r:000038B7                 db    0
.rdata$r:000038B8                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:000038B8 _rdata$r        ends
.rdata$r:000038B8
.rdata$r:000038BC ; ===========================================================================
.rdata$r:000038BC
.rdata$r:000038BC ; Segment type: Pure data
.rdata$r:000038BC ; Segment permissions: Read
.rdata$r:000038BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000038BC                 assume cs:_rdata$r
.rdata$r:000038BC                 ;org 38BCh
.rdata$r:000038BC ; COMDAT (pick any)
.rdata$r:000038BC                 public ??_R2ISetProperties@@8
.rdata$r:000038BC ; ISetProperties::`RTTI Base Class Array'
.rdata$r:000038BC ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:000038BC                                         ; DATA XREF: .rdata$r:000038B8o
.rdata$r:000038BC                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000038C0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000038C4                 db    0
.rdata$r:000038C5                 align 4
.rdata$r:000038C5 _rdata$r        ends
.rdata$r:000038C5
.rdata$r:000038C8 ; ===========================================================================
.rdata$r:000038C8
.rdata$r:000038C8 ; Segment type: Pure data
.rdata$r:000038C8 ; Segment permissions: Read
.rdata$r:000038C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000038C8                 assume cs:_rdata$r
.rdata$r:000038C8                 ;org 38C8h
.rdata$r:000038C8 ; COMDAT (pick any)
.rdata$r:000038C8                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:000038C8 ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000038C8 ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:000038C8                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:000038C8                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:000038CC                 db    1
.rdata$r:000038CD                 db    0
.rdata$r:000038CE                 db    0
.rdata$r:000038CF                 db    0
.rdata$r:000038D0                 db    0
.rdata$r:000038D1                 db    0
.rdata$r:000038D2                 db    0
.rdata$r:000038D3                 db    0
.rdata$r:000038D4                 db 0FFh
.rdata$r:000038D5                 db 0FFh
.rdata$r:000038D6                 db 0FFh
.rdata$r:000038D7                 db 0FFh
.rdata$r:000038D8                 db    0
.rdata$r:000038D9                 db    0
.rdata$r:000038DA                 db    0
.rdata$r:000038DB                 db    0
.rdata$r:000038DC                 db  40h ; @
.rdata$r:000038DD                 db    0
.rdata$r:000038DE                 db    0
.rdata$r:000038DF                 db    0
.rdata$r:000038E0                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000038E0 _rdata$r        ends
.rdata$r:000038E0
.rdata$r:000038E4 ; ===========================================================================
.rdata$r:000038E4
.rdata$r:000038E4 ; Segment type: Pure data
.rdata$r:000038E4 ; Segment permissions: Read
.rdata$r:000038E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000038E4                 assume cs:_rdata$r
.rdata$r:000038E4                 ;org 38E4h
.rdata$r:000038E4 ; COMDAT (pick any)
.rdata$r:000038E4                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:000038E4 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:000038E4 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000038E4                                         ; DATA XREF: .rdata$r:00003660o
.rdata$r:000038E4                                         ; .rdata$r:00003BC4o
.rdata$r:000038E4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000038E8                 db    0
.rdata$r:000038E9                 db    0
.rdata$r:000038EA                 db    0
.rdata$r:000038EB                 db    0
.rdata$r:000038EC                 db  0Ch
.rdata$r:000038ED                 db    0
.rdata$r:000038EE                 db    0
.rdata$r:000038EF                 db    0
.rdata$r:000038F0                 db 0FFh
.rdata$r:000038F1                 db 0FFh
.rdata$r:000038F2                 db 0FFh
.rdata$r:000038F3                 db 0FFh
.rdata$r:000038F4                 db    0
.rdata$r:000038F5                 db    0
.rdata$r:000038F6                 db    0
.rdata$r:000038F7                 db    0
.rdata$r:000038F8                 db  42h ; B
.rdata$r:000038F9                 db    0
.rdata$r:000038FA                 db    0
.rdata$r:000038FB                 db    0
.rdata$r:000038FC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000038FC _rdata$r        ends
.rdata$r:000038FC
.rdata$r:00003900 ; ===========================================================================
.rdata$r:00003900
.rdata$r:00003900 ; Segment type: Pure data
.rdata$r:00003900 ; Segment permissions: Read
.rdata$r:00003900 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003900                 assume cs:_rdata$r
.rdata$r:00003900                 ;org 3900h
.rdata$r:00003900 ; COMDAT (pick any)
.rdata$r:00003900                 public ??_R1BA@?0A@EA@IOutArchive@@8
.rdata$r:00003900 ; IOutArchive::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00003900 ??_R1BA@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00003900                                         ; DATA XREF: .rdata$r:00003664o
.rdata$r:00003900                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00003904                 db    1
.rdata$r:00003905                 db    0
.rdata$r:00003906                 db    0
.rdata$r:00003907                 db    0
.rdata$r:00003908                 db  10h
.rdata$r:00003909                 db    0
.rdata$r:0000390A                 db    0
.rdata$r:0000390B                 db    0
.rdata$r:0000390C                 db 0FFh
.rdata$r:0000390D                 db 0FFh
.rdata$r:0000390E                 db 0FFh
.rdata$r:0000390F                 db 0FFh
.rdata$r:00003910                 db    0
.rdata$r:00003911                 db    0
.rdata$r:00003912                 db    0
.rdata$r:00003913                 db    0
.rdata$r:00003914                 db  40h ; @
.rdata$r:00003915                 db    0
.rdata$r:00003916                 db    0
.rdata$r:00003917                 db    0
.rdata$r:00003918                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003918 _rdata$r        ends
.rdata$r:00003918
.data:0000391C ; ===========================================================================
.data:0000391C
.data:0000391C ; Segment type: Pure data
.data:0000391C ; Segment permissions: Read/Write
.data:0000391C _data           segment dword public 'DATA' use32
.data:0000391C                 assume cs:_data
.data:0000391C                 ;org 391Ch
.data:0000391C ; COMDAT (pick any)
.data:0000391C                 public ??_R0?AUIOutArchive@@@8
.data:0000391C ; struct IOutArchive `RTTI Type Descriptor'
.data:0000391C ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:0000391C                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:0000391C                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000391C                                         ; const type_info::`vftable'
.data:00003920                 db    0
.data:00003921                 db    0
.data:00003922                 db    0
.data:00003923                 db    0
.data:00003924                 db  2Eh ; .
.data:00003925                 db  3Fh ; ?
.data:00003926                 db  41h ; A
.data:00003927                 db  55h ; U
.data:00003928                 db  49h ; I
.data:00003929                 db  4Fh ; O
.data:0000392A                 db  75h ; u
.data:0000392B                 db  74h ; t
.data:0000392C                 db  41h ; A
.data:0000392D                 db  72h ; r
.data:0000392E                 db  63h ; c
.data:0000392F                 db  68h ; h
.data:00003930                 db  69h ; i
.data:00003931                 db  76h ; v
.data:00003932                 db  65h ; e
.data:00003933                 db  40h ; @
.data:00003934                 db  40h ; @
.data:00003935                 db    0
.data:00003936                 align 4
.data:00003936 _data           ends
.data:00003936
.rdata$r:00003938 ; ===========================================================================
.rdata$r:00003938
.rdata$r:00003938 ; Segment type: Pure data
.rdata$r:00003938 ; Segment permissions: Read
.rdata$r:00003938 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003938                 assume cs:_rdata$r
.rdata$r:00003938                 ;org 3938h
.rdata$r:00003938 ; COMDAT (pick any)
.rdata$r:00003938                 public ??_R3IOutArchive@@8
.rdata$r:00003938 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003938 ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:00003918o
.rdata$r:00003938                                         ; .rdata$r:0000396Co ...
.rdata$r:00003939                 db    0
.rdata$r:0000393A                 db    0
.rdata$r:0000393B                 db    0
.rdata$r:0000393C                 db    0
.rdata$r:0000393D                 db    0
.rdata$r:0000393E                 db    0
.rdata$r:0000393F                 db    0
.rdata$r:00003940                 db    2
.rdata$r:00003941                 db    0
.rdata$r:00003942                 db    0
.rdata$r:00003943                 db    0
.rdata$r:00003944                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:00003944 _rdata$r        ends
.rdata$r:00003944
.rdata$r:00003948 ; ===========================================================================
.rdata$r:00003948
.rdata$r:00003948 ; Segment type: Pure data
.rdata$r:00003948 ; Segment permissions: Read
.rdata$r:00003948 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003948                 assume cs:_rdata$r
.rdata$r:00003948                 ;org 3948h
.rdata$r:00003948 ; COMDAT (pick any)
.rdata$r:00003948                 public ??_R2IOutArchive@@8
.rdata$r:00003948 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:00003948 ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00003948                                         ; DATA XREF: .rdata$r:00003944o
.rdata$r:00003948                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000394C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003950                 db    0
.rdata$r:00003951                 align 4
.rdata$r:00003951 _rdata$r        ends
.rdata$r:00003951
.rdata$r:00003954 ; ===========================================================================
.rdata$r:00003954
.rdata$r:00003954 ; Segment type: Pure data
.rdata$r:00003954 ; Segment permissions: Read
.rdata$r:00003954 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003954                 assume cs:_rdata$r
.rdata$r:00003954                 ;org 3954h
.rdata$r:00003954 ; COMDAT (pick any)
.rdata$r:00003954                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00003954 ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003954 ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00003954                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:00003954                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00003958                 db    1
.rdata$r:00003959                 db    0
.rdata$r:0000395A                 db    0
.rdata$r:0000395B                 db    0
.rdata$r:0000395C                 db    0
.rdata$r:0000395D                 db    0
.rdata$r:0000395E                 db    0
.rdata$r:0000395F                 db    0
.rdata$r:00003960                 db 0FFh
.rdata$r:00003961                 db 0FFh
.rdata$r:00003962                 db 0FFh
.rdata$r:00003963                 db 0FFh
.rdata$r:00003964                 db    0
.rdata$r:00003965                 db    0
.rdata$r:00003966                 db    0
.rdata$r:00003967                 db    0
.rdata$r:00003968                 db  40h ; @
.rdata$r:00003969                 db    0
.rdata$r:0000396A                 db    0
.rdata$r:0000396B                 db    0
.rdata$r:0000396C                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000396C _rdata$r        ends
.rdata$r:0000396C
.rdata$r:00003970 ; ===========================================================================
.rdata$r:00003970
.rdata$r:00003970 ; Segment type: Pure data
.rdata$r:00003970 ; Segment permissions: Read
.rdata$r:00003970 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003970                 assume cs:_rdata$r
.rdata$r:00003970                 ;org 3970h
.rdata$r:00003970 ; COMDAT (pick any)
.rdata$r:00003970                 public ??_R1BA@?0A@EC@IUnknown@@8
.rdata$r:00003970 ; IUnknown::`RTTI Base Class Descriptor at (16, -1, 0, 66)'
.rdata$r:00003970 ??_R1BA@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003970                                         ; DATA XREF: .rdata$r:00003668o
.rdata$r:00003970                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003974                 align 8
.rdata$r:00003978                 db  10h
.rdata$r:00003979                 db    0
.rdata$r:0000397A                 db    0
.rdata$r:0000397B                 db    0
.rdata$r:0000397C                 db 0FFh
.rdata$r:0000397D                 db 0FFh
.rdata$r:0000397E                 db 0FFh
.rdata$r:0000397F                 db 0FFh
.rdata$r:00003980                 db    0
.rdata$r:00003981                 db    0
.rdata$r:00003982                 db    0
.rdata$r:00003983                 db    0
.rdata$r:00003984                 db  42h ; B
.rdata$r:00003985                 db    0
.rdata$r:00003986                 db    0
.rdata$r:00003987                 db    0
.rdata$r:00003988                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003988 _rdata$r        ends
.rdata$r:00003988
.rdata$r:0000398C ; ===========================================================================
.rdata$r:0000398C
.rdata$r:0000398C ; Segment type: Pure data
.rdata$r:0000398C ; Segment permissions: Read
.rdata$r:0000398C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000398C                 assume cs:_rdata$r
.rdata$r:0000398C                 ;org 398Ch
.rdata$r:0000398C ; COMDAT (pick any)
.rdata$r:0000398C                 public ??_R1BE@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000398C ; CMyUnknownImp::`RTTI Base Class Descriptor at (20, -1, 0, 64)'
.rdata$r:0000398C ??_R1BE@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000398C                                         ; DATA XREF: .rdata$r:0000366Co
.rdata$r:0000398C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003990                 db    0
.rdata$r:00003991                 db    0
.rdata$r:00003992                 db    0
.rdata$r:00003993                 db    0
.rdata$r:00003994                 db  14h
.rdata$r:00003995                 db    0
.rdata$r:00003996                 db    0
.rdata$r:00003997                 db    0
.rdata$r:00003998                 db 0FFh
.rdata$r:00003999                 db 0FFh
.rdata$r:0000399A                 db 0FFh
.rdata$r:0000399B                 db 0FFh
.rdata$r:0000399C                 db    0
.rdata$r:0000399D                 db    0
.rdata$r:0000399E                 db    0
.rdata$r:0000399F                 db    0
.rdata$r:000039A0                 db  40h ; @
.rdata$r:000039A1                 db    0
.rdata$r:000039A2                 db    0
.rdata$r:000039A3                 db    0
.rdata$r:000039A4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000039A4 _rdata$r        ends
.rdata$r:000039A4
.data:000039A8 ; ===========================================================================
.data:000039A8
.data:000039A8 ; Segment type: Pure data
.data:000039A8 ; Segment permissions: Read/Write
.data:000039A8 _data           segment dword public 'DATA' use32
.data:000039A8                 assume cs:_data
.data:000039A8                 ;org 39A8h
.data:000039A8 ; COMDAT (pick any)
.data:000039A8                 public ??_R0?AVCMyUnknownImp@@@8
.data:000039A8 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000039A8 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000039A8                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (20,-1,0,64)'o
.data:000039A8                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000039A8                                         ; const type_info::`vftable'
.data:000039AC                 align 10h
.data:000039B0 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000039B0 _data           ends
.data:000039B0
.rdata$r:000039C4 ; ===========================================================================
.rdata$r:000039C4
.rdata$r:000039C4 ; Segment type: Pure data
.rdata$r:000039C4 ; Segment permissions: Read
.rdata$r:000039C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000039C4                 assume cs:_rdata$r
.rdata$r:000039C4                 ;org 39C4h
.rdata$r:000039C4 ; COMDAT (pick any)
.rdata$r:000039C4                 public ??_R3CMyUnknownImp@@8
.rdata$r:000039C4 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000039C4 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000039A4o
.rdata$r:000039C4                                         ; .rdata$r:000039F4o ...
.rdata$r:000039C5                 db    0
.rdata$r:000039C6                 db    0
.rdata$r:000039C7                 db    0
.rdata$r:000039C8                 db    0
.rdata$r:000039C9                 db    0
.rdata$r:000039CA                 db    0
.rdata$r:000039CB                 db    0
.rdata$r:000039CC                 db    1
.rdata$r:000039CD                 db    0
.rdata$r:000039CE                 db    0
.rdata$r:000039CF                 db    0
.rdata$r:000039D0                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000039D0 _rdata$r        ends
.rdata$r:000039D0
.rdata$r:000039D4 ; ===========================================================================
.rdata$r:000039D4
.rdata$r:000039D4 ; Segment type: Pure data
.rdata$r:000039D4 ; Segment permissions: Read
.rdata$r:000039D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000039D4                 assume cs:_rdata$r
.rdata$r:000039D4                 ;org 39D4h
.rdata$r:000039D4 ; COMDAT (pick any)
.rdata$r:000039D4                 public ??_R2CMyUnknownImp@@8
.rdata$r:000039D4 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000039D4 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000039D4                                         ; DATA XREF: .rdata$r:000039D0o
.rdata$r:000039D4                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000039D8                 db    0
.rdata$r:000039D9                 align 4
.rdata$r:000039D9 _rdata$r        ends
.rdata$r:000039D9
.rdata$r:000039DC ; ===========================================================================
.rdata$r:000039DC
.rdata$r:000039DC ; Segment type: Pure data
.rdata$r:000039DC ; Segment permissions: Read
.rdata$r:000039DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000039DC                 assume cs:_rdata$r
.rdata$r:000039DC                 ;org 39DCh
.rdata$r:000039DC ; COMDAT (pick any)
.rdata$r:000039DC                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000039DC ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000039DC ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000039DC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000039DC                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000039E0                 db    0
.rdata$r:000039E1                 db    0
.rdata$r:000039E2                 db    0
.rdata$r:000039E3                 db    0
.rdata$r:000039E4                 db    0
.rdata$r:000039E5                 db    0
.rdata$r:000039E6                 db    0
.rdata$r:000039E7                 db    0
.rdata$r:000039E8                 db 0FFh
.rdata$r:000039E9                 db 0FFh
.rdata$r:000039EA                 db 0FFh
.rdata$r:000039EB                 db 0FFh
.rdata$r:000039EC                 db    0
.rdata$r:000039ED                 db    0
.rdata$r:000039EE                 db    0
.rdata$r:000039EF                 db    0
.rdata$r:000039F0                 db  40h ; @
.rdata$r:000039F1                 db    0
.rdata$r:000039F2                 db    0
.rdata$r:000039F3                 db    0
.rdata$r:000039F4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000039F4 _rdata$r        ends
.rdata$r:000039F4
.rdata$r:000039F8 ; ===========================================================================
.rdata$r:000039F8
.rdata$r:000039F8 ; Segment type: Pure data
.rdata$r:000039F8 ; Segment permissions: Read
.rdata$r:000039F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000039F8                 assume cs:_rdata$r
.rdata$r:000039F8                 ;org 39F8h
.rdata$r:000039F8 ; COMDAT (pick any)
.rdata$r:000039F8                 public ??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@
.rdata$r:000039F8 ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata$r:000039F8 ??_R4CHandler@NTar@NArchive@@6BIArchiveOpenSeq@@@ db    0
.rdata$r:000039F8                                         ; DATA XREF: .rdata:000035A8o
.rdata$r:000039F9                 db    0
.rdata$r:000039FA                 db    0
.rdata$r:000039FB                 db    0
.rdata$r:000039FC                 db    4
.rdata$r:000039FD                 db    0
.rdata$r:000039FE                 db    0
.rdata$r:000039FF                 db    0
.rdata$r:00003A00                 db    0
.rdata$r:00003A01                 db    0
.rdata$r:00003A02                 db    0
.rdata$r:00003A03                 db    0
.rdata$r:00003A04                 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003A08                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A08 _rdata$r        ends
.rdata$r:00003A08
.rdata$r:00003A0C ; ===========================================================================
.rdata$r:00003A0C
.rdata$r:00003A0C ; Segment type: Pure data
.rdata$r:00003A0C ; Segment permissions: Read
.rdata$r:00003A0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A0C                 assume cs:_rdata$r
.rdata$r:00003A0C                 ;org 3A0Ch
.rdata$r:00003A0C ; COMDAT (pick any)
.rdata$r:00003A0C                 public ??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@
.rdata$r:00003A0C ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IInArchiveGetStream'}
.rdata$r:00003A0C ??_R4CHandler@NTar@NArchive@@6BIInArchiveGetStream@@@ db    0
.rdata$r:00003A0C                                         ; DATA XREF: .rdata:00003594o
.rdata$r:00003A0D                 db    0
.rdata$r:00003A0E                 db    0
.rdata$r:00003A0F                 db    0
.rdata$r:00003A10                 db    8
.rdata$r:00003A11                 db    0
.rdata$r:00003A12                 db    0
.rdata$r:00003A13                 db    0
.rdata$r:00003A14                 db    0
.rdata$r:00003A15                 db    0
.rdata$r:00003A16                 db    0
.rdata$r:00003A17                 db    0
.rdata$r:00003A18                 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003A1C                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A1C _rdata$r        ends
.rdata$r:00003A1C
.rdata$r:00003A20 ; ===========================================================================
.rdata$r:00003A20
.rdata$r:00003A20 ; Segment type: Pure data
.rdata$r:00003A20 ; Segment permissions: Read
.rdata$r:00003A20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A20                 assume cs:_rdata$r
.rdata$r:00003A20                 ;org 3A20h
.rdata$r:00003A20 ; COMDAT (pick any)
.rdata$r:00003A20                 public ??_R4CHandler@NTar@NArchive@@6BISetProperties@@@
.rdata$r:00003A20 ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:00003A20 ??_R4CHandler@NTar@NArchive@@6BISetProperties@@@ db    0
.rdata$r:00003A20                                         ; DATA XREF: .rdata:00003580o
.rdata$r:00003A21                 db    0
.rdata$r:00003A22                 db    0
.rdata$r:00003A23                 db    0
.rdata$r:00003A24                 db  0Ch
.rdata$r:00003A25                 db    0
.rdata$r:00003A26                 db    0
.rdata$r:00003A27                 db    0
.rdata$r:00003A28                 db    0
.rdata$r:00003A29                 db    0
.rdata$r:00003A2A                 db    0
.rdata$r:00003A2B                 db    0
.rdata$r:00003A2C                 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003A30                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A30 _rdata$r        ends
.rdata$r:00003A30
.rdata$r:00003A34 ; ===========================================================================
.rdata$r:00003A34
.rdata$r:00003A34 ; Segment type: Pure data
.rdata$r:00003A34 ; Segment permissions: Read
.rdata$r:00003A34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A34                 assume cs:_rdata$r
.rdata$r:00003A34                 ;org 3A34h
.rdata$r:00003A34 ; COMDAT (pick any)
.rdata$r:00003A34                 public ??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@
.rdata$r:00003A34 ; const NArchive::NTar::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:00003A34 ??_R4CHandler@NTar@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:00003A34                                         ; DATA XREF: .rdata:00003568o
.rdata$r:00003A35                 db    0
.rdata$r:00003A36                 db    0
.rdata$r:00003A37                 db    0
.rdata$r:00003A38                 db  10h
.rdata$r:00003A39                 db    0
.rdata$r:00003A3A                 db    0
.rdata$r:00003A3B                 db    0
.rdata$r:00003A3C                 db    0
.rdata$r:00003A3D                 db    0
.rdata$r:00003A3E                 db    0
.rdata$r:00003A3F                 db    0
.rdata$r:00003A40                 dd offset ??_R0?AVCHandler@NTar@NArchive@@@8 ; NArchive::NTar::CHandler `RTTI Type Descriptor'
.rdata$r:00003A44                 dd offset ??_R3CHandler@NTar@NArchive@@8 ; NArchive::NTar::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A44 _rdata$r        ends
.rdata$r:00003A44
.text:00003A48 ; ===========================================================================
.text:00003A48
.text:00003A48 ; Segment type: Pure code
.text:00003A48 ; Segment permissions: Read/Execute
.text:00003A48 _text           segment para public 'CODE' use32
.text:00003A48                 assume cs:_text
.text:00003A48                 ;org 3A48h
.text:00003A48 ; COMDAT (pick any)
.text:00003A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A48
.text:00003A48 ; =============== S U B R O U T I N E =======================================
.text:00003A48
.text:00003A48 ; Attributes: bp-based frame
.text:00003A48
.text:00003A48 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00003A48                 public ??0CMyUnknownImp@@QAE@XZ
.text:00003A48 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+73p
.text:00003A48                                         ; NCompress::CCopyCoder::CCopyCoder(void)+3Dp ...
.text:00003A48
.text:00003A48 var_4           = dword ptr -4
.text:00003A48
.text:00003A48                 push    ebp
.text:00003A49                 mov     ebp, esp
.text:00003A4B                 push    ecx
.text:00003A4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A53                 mov     [ebp+var_4], ecx
.text:00003A56                 mov     eax, [ebp+var_4]
.text:00003A59                 mov     dword ptr [eax], 0
.text:00003A5F                 mov     eax, [ebp+var_4]
.text:00003A62                 mov     esp, ebp
.text:00003A64                 pop     ebp
.text:00003A65                 retn
.text:00003A65 ??0CMyUnknownImp@@QAE@XZ endp
.text:00003A65
.text:00003A65 ; ---------------------------------------------------------------------------
.text:00003A66                 align 4
.text:00003A66 _text           ends
.text:00003A66
.text:00003A68 ; ===========================================================================
.text:00003A68
.text:00003A68 ; Segment type: Pure code
.text:00003A68 ; Segment permissions: Read/Execute
.text:00003A68 _text           segment para public 'CODE' use32
.text:00003A68                 assume cs:_text
.text:00003A68                 ;org 3A68h
.text:00003A68 ; COMDAT (pick any)
.text:00003A68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003A68
.text:00003A68 ; =============== S U B R O U T I N E =======================================
.text:00003A68
.text:00003A68 ; Attributes: bp-based frame
.text:00003A68
.text:00003A68 ; _DWORD __thiscall NCompress::CCopyCoder::CCopyCoder(NCompress::CCopyCoder *__hidden this)
.text:00003A68                 public ??0CCopyCoder@NCompress@@QAE@XZ
.text:00003A68 ??0CCopyCoder@NCompress@@QAE@XZ proc near
.text:00003A68                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+114p
.text:00003A68
.text:00003A68 var_4           = dword ptr -4
.text:00003A68
.text:00003A68                 push    ebp
.text:00003A69                 mov     ebp, esp
.text:00003A6B                 push    ecx
.text:00003A6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A73                 mov     [ebp+var_4], ecx
.text:00003A76                 mov     ecx, [ebp+var_4] ; this
.text:00003A79                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:00003A7E                 mov     ecx, [ebp+var_4]
.text:00003A81                 add     ecx, 4          ; this
.text:00003A84                 call    ??0ICompressSetInStream@@QAE@XZ ; ICompressSetInStream::ICompressSetInStream(void)
.text:00003A89                 mov     ecx, [ebp+var_4]
.text:00003A8C                 add     ecx, 8          ; this
.text:00003A8F                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00003A94                 mov     ecx, [ebp+var_4]
.text:00003A97                 add     ecx, 0Ch        ; this
.text:00003A9A                 call    ??0ICompressGetInStreamProcessedSize@@QAE@XZ ; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)
.text:00003A9F                 mov     ecx, [ebp+var_4]
.text:00003AA2                 add     ecx, 10h        ; this
.text:00003AA5                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00003AAA                 mov     eax, [ebp+var_4]
.text:00003AAD                 mov     dword ptr [eax], offset ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.text:00003AB3                 mov     ecx, [ebp+var_4]
.text:00003AB6                 mov     dword ptr [ecx+4], offset ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.text:00003ABD                 mov     edx, [ebp+var_4]
.text:00003AC0                 mov     dword ptr [edx+8], offset ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.text:00003AC7                 mov     eax, [ebp+var_4]
.text:00003ACA                 mov     dword ptr [eax+0Ch], offset ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.text:00003AD1                 mov     ecx, [ebp+var_4]
.text:00003AD4                 mov     dword ptr [ecx+14h], 0
.text:00003ADB                 mov     ecx, [ebp+var_4]
.text:00003ADE                 add     ecx, 18h
.text:00003AE1                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00003AE6                 mov     edx, [ebp+var_4]
.text:00003AE9                 mov     dword ptr [edx+20h], 0
.text:00003AF0                 mov     dword ptr [edx+24h], 0
.text:00003AF7                 mov     eax, [ebp+var_4]
.text:00003AFA                 add     esp, 4
.text:00003AFD                 cmp     ebp, esp
.text:00003AFF                 call    __RTC_CheckEsp
.text:00003B04                 mov     esp, ebp
.text:00003B06                 pop     ebp
.text:00003B07                 retn
.text:00003B07 ??0CCopyCoder@NCompress@@QAE@XZ endp
.text:00003B07
.text:00003B07 _text           ends
.text:00003B07
.rdata:00003B08 ; ===========================================================================
.rdata:00003B08
.rdata:00003B08 ; Segment type: Pure data
.rdata:00003B08 ; Segment permissions: Read
.rdata:00003B08 _rdata          segment dword public 'DATA' use32
.rdata:00003B08                 assume cs:_rdata
.rdata:00003B08                 ;org 3B08h
.rdata:00003B08 ; COMDAT (pick largest)
.rdata:00003B08                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata:00003B0C                 public ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata:00003B0C ; const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}
.rdata:00003B0C ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00003B0C                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+62o
.rdata:00003B0C                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00003B10                 dd offset ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.rdata:00003B14                 dd offset ?Release@CCopyCoder@NCompress@@WM@AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}' (void)
.rdata:00003B18                 dd offset ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z ; NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
.rdata:00003B18 _rdata          ends
.rdata:00003B18
.rdata:00003B1C ; ===========================================================================
.rdata:00003B1C
.rdata:00003B1C ; Segment type: Pure data
.rdata:00003B1C ; Segment permissions: Read
.rdata:00003B1C _rdata          segment dword public 'DATA' use32
.rdata:00003B1C                 assume cs:_rdata
.rdata:00003B1C                 ;org 3B1Ch
.rdata:00003B1C ; COMDAT (pick largest)
.rdata:00003B1C                 dd offset ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata:00003B20                 public ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata:00003B20 ; const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}
.rdata:00003B20 ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00003B20                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+58o
.rdata:00003B20                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00003B24                 dd offset ?AddRef@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.rdata:00003B28                 dd offset ?Release@CCopyCoder@NCompress@@W7AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)
.rdata:00003B2C                 dd offset ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z ; NCompress::CCopyCoder::Read(void *,uint,uint *)
.rdata:00003B2C _rdata          ends
.rdata:00003B2C
.rdata:00003B30 ; ===========================================================================
.rdata:00003B30
.rdata:00003B30 ; Segment type: Pure data
.rdata:00003B30 ; Segment permissions: Read
.rdata:00003B30 _rdata          segment dword public 'DATA' use32
.rdata:00003B30                 assume cs:_rdata
.rdata:00003B30                 ;org 3B30h
.rdata:00003B30 ; COMDAT (pick largest)
.rdata:00003B30                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata:00003B34                 public ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata:00003B34 ; const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}
.rdata:00003B34 ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00003B34                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+4Eo
.rdata:00003B34                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00003B38                 dd offset ?AddRef@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.rdata:00003B3C                 dd offset ?Release@CCopyCoder@NCompress@@W3AGKXZ ; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)
.rdata:00003B40                 dd offset ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z ; NCompress::CCopyCoder::SetInStream(ISequentialInStream *)
.rdata:00003B44                 dd offset ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ ; NCompress::CCopyCoder::ReleaseInStream(void)
.rdata:00003B44 _rdata          ends
.rdata:00003B44
.rdata:00003B48 ; ===========================================================================
.rdata:00003B48
.rdata:00003B48 ; Segment type: Pure data
.rdata:00003B48 ; Segment permissions: Read
.rdata:00003B48 _rdata          segment dword public 'DATA' use32
.rdata:00003B48                 assume cs:_rdata
.rdata:00003B48                 ;org 3B48h
.rdata:00003B48 ; COMDAT (pick largest)
.rdata:00003B48                 dd offset ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00003B4C                 public ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata:00003B4C ; const NCompress::CCopyCoder::`vftable'{for `ICompressCoder'}
.rdata:00003B4C ??_7CCopyCoder@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003B4C                                         ; DATA XREF: NCompress::CCopyCoder::CCopyCoder(void)+45o
.rdata:00003B4C                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.rdata:00003B50                 dd offset ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.rdata:00003B54                 dd offset ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.rdata:00003B58                 dd offset ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::CCopyCoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00003B58 _rdata          ends
.rdata:00003B58
.rdata$r:00003B5C ; ===========================================================================
.rdata$r:00003B5C
.rdata$r:00003B5C ; Segment type: Pure data
.rdata$r:00003B5C ; Segment permissions: Read
.rdata$r:00003B5C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B5C                 assume cs:_rdata$r
.rdata$r:00003B5C                 ;org 3B5Ch
.rdata$r:00003B5C ; COMDAT (pick any)
.rdata$r:00003B5C                 public ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
.rdata$r:00003B5C ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00003B5C ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00003B5C                                         ; DATA XREF: .rdata:00003B48o
.rdata$r:00003B5D                 db    0
.rdata$r:00003B5E                 db    0
.rdata$r:00003B5F                 db    0
.rdata$r:00003B60                 db    0
.rdata$r:00003B61                 db    0
.rdata$r:00003B62                 db    0
.rdata$r:00003B63                 db    0
.rdata$r:00003B64                 db    0
.rdata$r:00003B65                 db    0
.rdata$r:00003B66                 db    0
.rdata$r:00003B67                 db    0
.rdata$r:00003B68                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00003B6C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B6C _rdata$r        ends
.rdata$r:00003B6C
.data:00003B70 ; ===========================================================================
.data:00003B70
.data:00003B70 ; Segment type: Pure data
.data:00003B70 ; Segment permissions: Read/Write
.data:00003B70 _data           segment dword public 'DATA' use32
.data:00003B70                 assume cs:_data
.data:00003B70                 ;org 3B70h
.data:00003B70 ; COMDAT (pick any)
.data:00003B70                 public ??_R0?AVCCopyCoder@NCompress@@@8
.data:00003B70 ; class NCompress::CCopyCoder `RTTI Type Descriptor'
.data:00003B70 ??_R0?AVCCopyCoder@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:00003B70                                         ; DATA XREF: .rdata$r:00003B68o
.data:00003B70                                         ; .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003B70                                         ; const type_info::`vftable'
.data:00003B74                 align 8
.data:00003B78 a_?avccopycoder db '.?AVCCopyCoder@NCompress@@',0
.data:00003B93                 align 4
.data:00003B93 _data           ends
.data:00003B93
.rdata$r:00003B94 ; ===========================================================================
.rdata$r:00003B94
.rdata$r:00003B94 ; Segment type: Pure data
.rdata$r:00003B94 ; Segment permissions: Read
.rdata$r:00003B94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B94                 assume cs:_rdata$r
.rdata$r:00003B94                 ;org 3B94h
.rdata$r:00003B94 ; COMDAT (pick any)
.rdata$r:00003B94                 public ??_R3CCopyCoder@NCompress@@8
.rdata$r:00003B94 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B94 ??_R3CCopyCoder@NCompress@@8 db    0    ; DATA XREF: .rdata$r:00003B6Co
.rdata$r:00003B94                                         ; .rdata$r:00003BE8o ...
.rdata$r:00003B95                 db    0
.rdata$r:00003B96                 db    0
.rdata$r:00003B97                 db    0
.rdata$r:00003B98                 db    5
.rdata$r:00003B99                 db    0
.rdata$r:00003B9A                 db    0
.rdata$r:00003B9B                 db    0
.rdata$r:00003B9C                 db  0Ah
.rdata$r:00003B9D                 db    0
.rdata$r:00003B9E                 db    0
.rdata$r:00003B9F                 db    0
.rdata$r:00003BA0                 dd offset ??_R2CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00003BA0 _rdata$r        ends
.rdata$r:00003BA0
.rdata$r:00003BA4 ; ===========================================================================
.rdata$r:00003BA4
.rdata$r:00003BA4 ; Segment type: Pure data
.rdata$r:00003BA4 ; Segment permissions: Read
.rdata$r:00003BA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BA4                 assume cs:_rdata$r
.rdata$r:00003BA4                 ;org 3BA4h
.rdata$r:00003BA4 ; COMDAT (pick any)
.rdata$r:00003BA4                 public ??_R2CCopyCoder@NCompress@@8
.rdata$r:00003BA4 ; NCompress::CCopyCoder::`RTTI Base Class Array'
.rdata$r:00003BA4 ??_R2CCopyCoder@NCompress@@8 dd offset ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00003BA4                                         ; DATA XREF: .rdata$r:00003BA0o
.rdata$r:00003BA4                                         ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BA8                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BAC                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003BB0                 dd offset ??_R13?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003BB4                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003BB8                 dd offset ??_R17?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003BBC                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00003BC0                 dd offset ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00003BC4                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00003BC8                 dd offset ??_R1BA@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00003BCC                 db    0
.rdata$r:00003BCD                 align 10h
.rdata$r:00003BCD _rdata$r        ends
.rdata$r:00003BCD
.rdata$r:00003BD0 ; ===========================================================================
.rdata$r:00003BD0
.rdata$r:00003BD0 ; Segment type: Pure data
.rdata$r:00003BD0 ; Segment permissions: Read
.rdata$r:00003BD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BD0                 assume cs:_rdata$r
.rdata$r:00003BD0                 ;org 3BD0h
.rdata$r:00003BD0 ; COMDAT (pick any)
.rdata$r:00003BD0                 public ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
.rdata$r:00003BD0 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003BD0 ??_R1A@?0A@EA@CCopyCoder@NCompress@@8 dd offset ??_R0?AVCCopyCoder@NCompress@@@8
.rdata$r:00003BD0                                         ; DATA XREF: .rdata$r:NCompress::CCopyCoder::`RTTI Base Class Array'o
.rdata$r:00003BD0                                         ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00003BD4                 db    9
.rdata$r:00003BD5                 db    0
.rdata$r:00003BD6                 db    0
.rdata$r:00003BD7                 db    0
.rdata$r:00003BD8                 db    0
.rdata$r:00003BD9                 db    0
.rdata$r:00003BDA                 db    0
.rdata$r:00003BDB                 db    0
.rdata$r:00003BDC                 db 0FFh
.rdata$r:00003BDD                 db 0FFh
.rdata$r:00003BDE                 db 0FFh
.rdata$r:00003BDF                 db 0FFh
.rdata$r:00003BE0                 db    0
.rdata$r:00003BE1                 db    0
.rdata$r:00003BE2                 db    0
.rdata$r:00003BE3                 db    0
.rdata$r:00003BE4                 db  40h ; @
.rdata$r:00003BE5                 db    0
.rdata$r:00003BE6                 db    0
.rdata$r:00003BE7                 db    0
.rdata$r:00003BE8                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003BE8 _rdata$r        ends
.rdata$r:00003BE8
.rdata$r:00003BEC ; ===========================================================================
.rdata$r:00003BEC
.rdata$r:00003BEC ; Segment type: Pure data
.rdata$r:00003BEC ; Segment permissions: Read
.rdata$r:00003BEC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BEC                 assume cs:_rdata$r
.rdata$r:00003BEC                 ;org 3BECh
.rdata$r:00003BEC ; COMDAT (pick any)
.rdata$r:00003BEC                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00003BEC ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003BEC ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:00003BEC                                         ; DATA XREF: .rdata$r:00003BA8o
.rdata$r:00003BEC                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:00003BEC                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00003BF0                 db    1
.rdata$r:00003BF1                 db    0
.rdata$r:00003BF2                 db    0
.rdata$r:00003BF3                 db    0
.rdata$r:00003BF4                 db    0
.rdata$r:00003BF5                 db    0
.rdata$r:00003BF6                 db    0
.rdata$r:00003BF7                 db    0
.rdata$r:00003BF8                 db 0FFh
.rdata$r:00003BF9                 db 0FFh
.rdata$r:00003BFA                 db 0FFh
.rdata$r:00003BFB                 db 0FFh
.rdata$r:00003BFC                 db    0
.rdata$r:00003BFD                 db    0
.rdata$r:00003BFE                 db    0
.rdata$r:00003BFF                 db    0
.rdata$r:00003C00                 db  40h ; @
.rdata$r:00003C01                 db    0
.rdata$r:00003C02                 db    0
.rdata$r:00003C03                 db    0
.rdata$r:00003C04                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C04 _rdata$r        ends
.rdata$r:00003C04
.data:00003C08 ; ===========================================================================
.data:00003C08
.data:00003C08 ; Segment type: Pure data
.data:00003C08 ; Segment permissions: Read/Write
.data:00003C08 _data           segment dword public 'DATA' use32
.data:00003C08                 assume cs:_data
.data:00003C08                 ;org 3C08h
.data:00003C08 ; COMDAT (pick any)
.data:00003C08                 public ??_R0?AUICompressCoder@@@8
.data:00003C08 ; struct ICompressCoder `RTTI Type Descriptor'
.data:00003C08 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:00003C08                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003C08                                         ; .rdata$r:000040DCo
.data:00003C08                                         ; const type_info::`vftable'
.data:00003C0C                 align 10h
.data:00003C10 a_?auicompressc db '.?AUICompressCoder@@',0
.data:00003C25                 align 4
.data:00003C25 _data           ends
.data:00003C25
.rdata$r:00003C28 ; ===========================================================================
.rdata$r:00003C28
.rdata$r:00003C28 ; Segment type: Pure data
.rdata$r:00003C28 ; Segment permissions: Read
.rdata$r:00003C28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C28                 assume cs:_rdata$r
.rdata$r:00003C28                 ;org 3C28h
.rdata$r:00003C28 ; COMDAT (pick any)
.rdata$r:00003C28                 public ??_R3ICompressCoder@@8
.rdata$r:00003C28 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C28 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:00003C04o
.rdata$r:00003C28                                         ; .rdata$r:000040E0o
.rdata$r:00003C29                 db    0
.rdata$r:00003C2A                 db    0
.rdata$r:00003C2B                 db    0
.rdata$r:00003C2C                 db    0
.rdata$r:00003C2D                 db    0
.rdata$r:00003C2E                 db    0
.rdata$r:00003C2F                 db    0
.rdata$r:00003C30                 db    2
.rdata$r:00003C31                 db    0
.rdata$r:00003C32                 db    0
.rdata$r:00003C33                 db    0
.rdata$r:00003C34                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00003C34 _rdata$r        ends
.rdata$r:00003C34
.rdata$r:00003C38 ; ===========================================================================
.rdata$r:00003C38
.rdata$r:00003C38 ; Segment type: Pure data
.rdata$r:00003C38 ; Segment permissions: Read
.rdata$r:00003C38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C38                 assume cs:_rdata$r
.rdata$r:00003C38                 ;org 3C38h
.rdata$r:00003C38 ; COMDAT (pick any)
.rdata$r:00003C38                 public ??_R2ICompressCoder@@8
.rdata$r:00003C38 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:00003C38 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:00003C38                                         ; DATA XREF: .rdata$r:00003C34o
.rdata$r:00003C38                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C3C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C40                 db    0
.rdata$r:00003C41                 align 4
.rdata$r:00003C41 _rdata$r        ends
.rdata$r:00003C41
.rdata$r:00003C44 ; ===========================================================================
.rdata$r:00003C44
.rdata$r:00003C44 ; Segment type: Pure data
.rdata$r:00003C44 ; Segment permissions: Read
.rdata$r:00003C44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C44                 assume cs:_rdata$r
.rdata$r:00003C44                 ;org 3C44h
.rdata$r:00003C44 ; COMDAT (pick any)
.rdata$r:00003C44                 public ??_R13?0A@EA@ICompressSetInStream@@8
.rdata$r:00003C44 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003C44 ??_R13?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00003C44                                         ; DATA XREF: .rdata$r:00003BB0o
.rdata$r:00003C44                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00003C48                 db    1
.rdata$r:00003C49                 db    0
.rdata$r:00003C4A                 db    0
.rdata$r:00003C4B                 db    0
.rdata$r:00003C4C                 db    4
.rdata$r:00003C4D                 db    0
.rdata$r:00003C4E                 db    0
.rdata$r:00003C4F                 db    0
.rdata$r:00003C50                 db 0FFh
.rdata$r:00003C51                 db 0FFh
.rdata$r:00003C52                 db 0FFh
.rdata$r:00003C53                 db 0FFh
.rdata$r:00003C54                 db    0
.rdata$r:00003C55                 db    0
.rdata$r:00003C56                 db    0
.rdata$r:00003C57                 db    0
.rdata$r:00003C58                 db  40h ; @
.rdata$r:00003C59                 db    0
.rdata$r:00003C5A                 db    0
.rdata$r:00003C5B                 db    0
.rdata$r:00003C5C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C5C _rdata$r        ends
.rdata$r:00003C5C
.data:00003C60 ; ===========================================================================
.data:00003C60
.data:00003C60 ; Segment type: Pure data
.data:00003C60 ; Segment permissions: Read/Write
.data:00003C60 _data           segment dword public 'DATA' use32
.data:00003C60                 assume cs:_data
.data:00003C60                 ;org 3C60h
.data:00003C60 ; COMDAT (pick any)
.data:00003C60                 public ??_R0?AUICompressSetInStream@@@8
.data:00003C60 ; struct ICompressSetInStream `RTTI Type Descriptor'
.data:00003C60 ??_R0?AUICompressSetInStream@@@8 dd offset ??_7type_info@@6B@
.data:00003C60                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003C60                                         ; .rdata$r:ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003C60                                         ; const type_info::`vftable'
.data:00003C64                 align 8
.data:00003C68 a_?auicompresss db '.?AUICompressSetInStream@@',0
.data:00003C83                 align 4
.data:00003C83 _data           ends
.data:00003C83
.rdata$r:00003C84 ; ===========================================================================
.rdata$r:00003C84
.rdata$r:00003C84 ; Segment type: Pure data
.rdata$r:00003C84 ; Segment permissions: Read
.rdata$r:00003C84 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C84                 assume cs:_rdata$r
.rdata$r:00003C84                 ;org 3C84h
.rdata$r:00003C84 ; COMDAT (pick any)
.rdata$r:00003C84                 public ??_R3ICompressSetInStream@@8
.rdata$r:00003C84 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C84 ??_R3ICompressSetInStream@@8 db    0    ; DATA XREF: .rdata$r:00003C5Co
.rdata$r:00003C84                                         ; .rdata$r:00003CB8o ...
.rdata$r:00003C85                 db    0
.rdata$r:00003C86                 db    0
.rdata$r:00003C87                 db    0
.rdata$r:00003C88                 db    0
.rdata$r:00003C89                 db    0
.rdata$r:00003C8A                 db    0
.rdata$r:00003C8B                 db    0
.rdata$r:00003C8C                 db    2
.rdata$r:00003C8D                 db    0
.rdata$r:00003C8E                 db    0
.rdata$r:00003C8F                 db    0
.rdata$r:00003C90                 dd offset ??_R2ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00003C90 _rdata$r        ends
.rdata$r:00003C90
.rdata$r:00003C94 ; ===========================================================================
.rdata$r:00003C94
.rdata$r:00003C94 ; Segment type: Pure data
.rdata$r:00003C94 ; Segment permissions: Read
.rdata$r:00003C94 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C94                 assume cs:_rdata$r
.rdata$r:00003C94                 ;org 3C94h
.rdata$r:00003C94 ; COMDAT (pick any)
.rdata$r:00003C94                 public ??_R2ICompressSetInStream@@8
.rdata$r:00003C94 ; ICompressSetInStream::`RTTI Base Class Array'
.rdata$r:00003C94 ??_R2ICompressSetInStream@@8 dd offset ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00003C94                                         ; DATA XREF: .rdata$r:00003C90o
.rdata$r:00003C94                                         ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C98                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C9C                 db    0
.rdata$r:00003C9D                 align 10h
.rdata$r:00003C9D _rdata$r        ends
.rdata$r:00003C9D
.rdata$r:00003CA0 ; ===========================================================================
.rdata$r:00003CA0
.rdata$r:00003CA0 ; Segment type: Pure data
.rdata$r:00003CA0 ; Segment permissions: Read
.rdata$r:00003CA0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CA0                 assume cs:_rdata$r
.rdata$r:00003CA0                 ;org 3CA0h
.rdata$r:00003CA0 ; COMDAT (pick any)
.rdata$r:00003CA0                 public ??_R1A@?0A@EA@ICompressSetInStream@@8
.rdata$r:00003CA0 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003CA0 ??_R1A@?0A@EA@ICompressSetInStream@@8 dd offset ??_R0?AUICompressSetInStream@@@8
.rdata$r:00003CA0                                         ; DATA XREF: .rdata$r:ICompressSetInStream::`RTTI Base Class Array'o
.rdata$r:00003CA0                                         ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:00003CA4                 db    1
.rdata$r:00003CA5                 db    0
.rdata$r:00003CA6                 db    0
.rdata$r:00003CA7                 db    0
.rdata$r:00003CA8                 db    0
.rdata$r:00003CA9                 db    0
.rdata$r:00003CAA                 db    0
.rdata$r:00003CAB                 db    0
.rdata$r:00003CAC                 db 0FFh
.rdata$r:00003CAD                 db 0FFh
.rdata$r:00003CAE                 db 0FFh
.rdata$r:00003CAF                 db 0FFh
.rdata$r:00003CB0                 db    0
.rdata$r:00003CB1                 db    0
.rdata$r:00003CB2                 db    0
.rdata$r:00003CB3                 db    0
.rdata$r:00003CB4                 db  40h ; @
.rdata$r:00003CB5                 db    0
.rdata$r:00003CB6                 db    0
.rdata$r:00003CB7                 db    0
.rdata$r:00003CB8                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CB8 _rdata$r        ends
.rdata$r:00003CB8
.rdata$r:00003CBC ; ===========================================================================
.rdata$r:00003CBC
.rdata$r:00003CBC ; Segment type: Pure data
.rdata$r:00003CBC ; Segment permissions: Read
.rdata$r:00003CBC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CBC                 assume cs:_rdata$r
.rdata$r:00003CBC                 ;org 3CBCh
.rdata$r:00003CBC ; COMDAT (pick any)
.rdata$r:00003CBC                 public ??_R17?0A@EA@ISequentialInStream@@8
.rdata$r:00003CBC ; ISequentialInStream::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00003CBC ??_R17?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00003CBC                                         ; DATA XREF: .rdata$r:00003BB8o
.rdata$r:00003CBC                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003CC0                 db    1
.rdata$r:00003CC1                 db    0
.rdata$r:00003CC2                 db    0
.rdata$r:00003CC3                 db    0
.rdata$r:00003CC4                 db    8
.rdata$r:00003CC5                 db    0
.rdata$r:00003CC6                 db    0
.rdata$r:00003CC7                 db    0
.rdata$r:00003CC8                 db 0FFh
.rdata$r:00003CC9                 db 0FFh
.rdata$r:00003CCA                 db 0FFh
.rdata$r:00003CCB                 db 0FFh
.rdata$r:00003CCC                 db    0
.rdata$r:00003CCD                 db    0
.rdata$r:00003CCE                 db    0
.rdata$r:00003CCF                 db    0
.rdata$r:00003CD0                 db  40h ; @
.rdata$r:00003CD1                 db    0
.rdata$r:00003CD2                 db    0
.rdata$r:00003CD3                 db    0
.rdata$r:00003CD4                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CD4 _rdata$r        ends
.rdata$r:00003CD4
.data:00003CD8 ; ===========================================================================
.data:00003CD8
.data:00003CD8 ; Segment type: Pure data
.data:00003CD8 ; Segment permissions: Read/Write
.data:00003CD8 _data           segment dword public 'DATA' use32
.data:00003CD8                 assume cs:_data
.data:00003CD8                 ;org 3CD8h
.data:00003CD8 ; COMDAT (pick any)
.data:00003CD8                 public ??_R0?AUISequentialInStream@@@8
.data:00003CD8 ; struct ISequentialInStream `RTTI Type Descriptor'
.data:00003CD8 ??_R0?AUISequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00003CD8                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00003CD8                                         ; .rdata$r:ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003CD8                                         ; const type_info::`vftable'
.data:00003CDC                 align 10h
.data:00003CE0 a_?auisequentia db '.?AUISequentialInStream@@',0
.data:00003CFA                 align 4
.data:00003CFA _data           ends
.data:00003CFA
.rdata$r:00003CFC ; ===========================================================================
.rdata$r:00003CFC
.rdata$r:00003CFC ; Segment type: Pure data
.rdata$r:00003CFC ; Segment permissions: Read
.rdata$r:00003CFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CFC                 assume cs:_rdata$r
.rdata$r:00003CFC                 ;org 3CFCh
.rdata$r:00003CFC ; COMDAT (pick any)
.rdata$r:00003CFC                 public ??_R3ISequentialInStream@@8
.rdata$r:00003CFC ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CFC ??_R3ISequentialInStream@@8 db    0     ; DATA XREF: .rdata$r:00003CD4o
.rdata$r:00003CFC                                         ; .rdata$r:00003D30o ...
.rdata$r:00003CFD                 db    0
.rdata$r:00003CFE                 db    0
.rdata$r:00003CFF                 db    0
.rdata$r:00003D00                 db    0
.rdata$r:00003D01                 db    0
.rdata$r:00003D02                 db    0
.rdata$r:00003D03                 db    0
.rdata$r:00003D04                 db    2
.rdata$r:00003D05                 db    0
.rdata$r:00003D06                 db    0
.rdata$r:00003D07                 db    0
.rdata$r:00003D08                 dd offset ??_R2ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00003D08 _rdata$r        ends
.rdata$r:00003D08
.rdata$r:00003D0C ; ===========================================================================
.rdata$r:00003D0C
.rdata$r:00003D0C ; Segment type: Pure data
.rdata$r:00003D0C ; Segment permissions: Read
.rdata$r:00003D0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D0C                 assume cs:_rdata$r
.rdata$r:00003D0C                 ;org 3D0Ch
.rdata$r:00003D0C ; COMDAT (pick any)
.rdata$r:00003D0C                 public ??_R2ISequentialInStream@@8
.rdata$r:00003D0C ; ISequentialInStream::`RTTI Base Class Array'
.rdata$r:00003D0C ??_R2ISequentialInStream@@8 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00003D0C                                         ; DATA XREF: .rdata$r:00003D08o
.rdata$r:00003D0C                                         ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D10                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D14                 db    0
.rdata$r:00003D15                 align 4
.rdata$r:00003D15 _rdata$r        ends
.rdata$r:00003D15
.rdata$r:00003D18 ; ===========================================================================
.rdata$r:00003D18
.rdata$r:00003D18 ; Segment type: Pure data
.rdata$r:00003D18 ; Segment permissions: Read
.rdata$r:00003D18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D18                 assume cs:_rdata$r
.rdata$r:00003D18                 ;org 3D18h
.rdata$r:00003D18 ; COMDAT (pick any)
.rdata$r:00003D18                 public ??_R1A@?0A@EA@ISequentialInStream@@8
.rdata$r:00003D18 ; ISequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D18 ??_R1A@?0A@EA@ISequentialInStream@@8 dd offset ??_R0?AUISequentialInStream@@@8
.rdata$r:00003D18                                         ; DATA XREF: .rdata$r:ISequentialInStream::`RTTI Base Class Array'o
.rdata$r:00003D18                                         ; .rdata$r:00004B10o ...
.rdata$r:00003D18                                         ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003D1C                 db    1
.rdata$r:00003D1D                 db    0
.rdata$r:00003D1E                 db    0
.rdata$r:00003D1F                 db    0
.rdata$r:00003D20                 db    0
.rdata$r:00003D21                 db    0
.rdata$r:00003D22                 db    0
.rdata$r:00003D23                 db    0
.rdata$r:00003D24                 db 0FFh
.rdata$r:00003D25                 db 0FFh
.rdata$r:00003D26                 db 0FFh
.rdata$r:00003D27                 db 0FFh
.rdata$r:00003D28                 db    0
.rdata$r:00003D29                 db    0
.rdata$r:00003D2A                 db    0
.rdata$r:00003D2B                 db    0
.rdata$r:00003D2C                 db  40h ; @
.rdata$r:00003D2D                 db    0
.rdata$r:00003D2E                 db    0
.rdata$r:00003D2F                 db    0
.rdata$r:00003D30                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D30 _rdata$r        ends
.rdata$r:00003D30
.rdata$r:00003D34 ; ===========================================================================
.rdata$r:00003D34
.rdata$r:00003D34 ; Segment type: Pure data
.rdata$r:00003D34 ; Segment permissions: Read
.rdata$r:00003D34 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D34                 assume cs:_rdata$r
.rdata$r:00003D34                 ;org 3D34h
.rdata$r:00003D34 ; COMDAT (pick any)
.rdata$r:00003D34                 public ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00003D34 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00003D34 ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00003D34                                         ; DATA XREF: .rdata$r:00003BC0o
.rdata$r:00003D34                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00003D38                 db    1
.rdata$r:00003D39                 db    0
.rdata$r:00003D3A                 db    0
.rdata$r:00003D3B                 db    0
.rdata$r:00003D3C                 db  0Ch
.rdata$r:00003D3D                 db    0
.rdata$r:00003D3E                 db    0
.rdata$r:00003D3F                 db    0
.rdata$r:00003D40                 db 0FFh
.rdata$r:00003D41                 db 0FFh
.rdata$r:00003D42                 db 0FFh
.rdata$r:00003D43                 db 0FFh
.rdata$r:00003D44                 db    0
.rdata$r:00003D45                 db    0
.rdata$r:00003D46                 db    0
.rdata$r:00003D47                 db    0
.rdata$r:00003D48                 db  40h ; @
.rdata$r:00003D49                 db    0
.rdata$r:00003D4A                 db    0
.rdata$r:00003D4B                 db    0
.rdata$r:00003D4C                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D4C _rdata$r        ends
.rdata$r:00003D4C
.data:00003D50 ; ===========================================================================
.data:00003D50
.data:00003D50 ; Segment type: Pure data
.data:00003D50 ; Segment permissions: Read/Write
.data:00003D50 _data           segment dword public 'DATA' use32
.data:00003D50                 assume cs:_data
.data:00003D50                 ;org 3D50h
.data:00003D50 ; COMDAT (pick any)
.data:00003D50                 public ??_R0?AUICompressGetInStreamProcessedSize@@@8
.data:00003D50 ; struct ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.data:00003D50 ??_R0?AUICompressGetInStreamProcessedSize@@@8 dd offset ??_7type_info@@6B@
.data:00003D50                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00003D50                                         ; .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003D50                                         ; const type_info::`vftable'
.data:00003D54                 align 8
.data:00003D58 a_?auicompressg db '.?AUICompressGetInStreamProcessedSize@@',0
.data:00003D58 _data           ends
.data:00003D58
.rdata$r:00003D80 ; ===========================================================================
.rdata$r:00003D80
.rdata$r:00003D80 ; Segment type: Pure data
.rdata$r:00003D80 ; Segment permissions: Read
.rdata$r:00003D80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D80                 assume cs:_rdata$r
.rdata$r:00003D80                 ;org 3D80h
.rdata$r:00003D80 ; COMDAT (pick any)
.rdata$r:00003D80                 public ??_R3ICompressGetInStreamProcessedSize@@8
.rdata$r:00003D80 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D80 ??_R3ICompressGetInStreamProcessedSize@@8 db    0
.rdata$r:00003D80                                         ; DATA XREF: .rdata$r:00003D4Co
.rdata$r:00003D80                                         ; .rdata$r:00003DB4o ...
.rdata$r:00003D81                 db    0
.rdata$r:00003D82                 db    0
.rdata$r:00003D83                 db    0
.rdata$r:00003D84                 db    0
.rdata$r:00003D85                 db    0
.rdata$r:00003D86                 db    0
.rdata$r:00003D87                 db    0
.rdata$r:00003D88                 db    2
.rdata$r:00003D89                 db    0
.rdata$r:00003D8A                 db    0
.rdata$r:00003D8B                 db    0
.rdata$r:00003D8C                 dd offset ??_R2ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00003D8C _rdata$r        ends
.rdata$r:00003D8C
.rdata$r:00003D90 ; ===========================================================================
.rdata$r:00003D90
.rdata$r:00003D90 ; Segment type: Pure data
.rdata$r:00003D90 ; Segment permissions: Read
.rdata$r:00003D90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D90                 assume cs:_rdata$r
.rdata$r:00003D90                 ;org 3D90h
.rdata$r:00003D90 ; COMDAT (pick any)
.rdata$r:00003D90                 public ??_R2ICompressGetInStreamProcessedSize@@8
.rdata$r:00003D90 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
.rdata$r:00003D90 ??_R2ICompressGetInStreamProcessedSize@@8 dd offset ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00003D90                                         ; DATA XREF: .rdata$r:00003D8Co
.rdata$r:00003D90                                         ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D94                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D98                 db    0
.rdata$r:00003D99                 align 4
.rdata$r:00003D99 _rdata$r        ends
.rdata$r:00003D99
.rdata$r:00003D9C ; ===========================================================================
.rdata$r:00003D9C
.rdata$r:00003D9C ; Segment type: Pure data
.rdata$r:00003D9C ; Segment permissions: Read
.rdata$r:00003D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D9C                 assume cs:_rdata$r
.rdata$r:00003D9C                 ;org 3D9Ch
.rdata$r:00003D9C ; COMDAT (pick any)
.rdata$r:00003D9C                 public ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
.rdata$r:00003D9C ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D9C ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8
.rdata$r:00003D9C                                         ; DATA XREF: .rdata$r:ICompressGetInStreamProcessedSize::`RTTI Base Class Array'o
.rdata$r:00003D9C                                         ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00003DA0                 db    1
.rdata$r:00003DA1                 db    0
.rdata$r:00003DA2                 db    0
.rdata$r:00003DA3                 db    0
.rdata$r:00003DA4                 db    0
.rdata$r:00003DA5                 db    0
.rdata$r:00003DA6                 db    0
.rdata$r:00003DA7                 db    0
.rdata$r:00003DA8                 db 0FFh
.rdata$r:00003DA9                 db 0FFh
.rdata$r:00003DAA                 db 0FFh
.rdata$r:00003DAB                 db 0FFh
.rdata$r:00003DAC                 db    0
.rdata$r:00003DAD                 db    0
.rdata$r:00003DAE                 db    0
.rdata$r:00003DAF                 db    0
.rdata$r:00003DB0                 db  40h ; @
.rdata$r:00003DB1                 db    0
.rdata$r:00003DB2                 db    0
.rdata$r:00003DB3                 db    0
.rdata$r:00003DB4                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DB4 _rdata$r        ends
.rdata$r:00003DB4
.rdata$r:00003DB8 ; ===========================================================================
.rdata$r:00003DB8
.rdata$r:00003DB8 ; Segment type: Pure data
.rdata$r:00003DB8 ; Segment permissions: Read
.rdata$r:00003DB8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DB8                 assume cs:_rdata$r
.rdata$r:00003DB8                 ;org 3DB8h
.rdata$r:00003DB8 ; COMDAT (pick any)
.rdata$r:00003DB8                 public ??_R1BA@?0A@EA@CMyUnknownImp@@8
.rdata$r:00003DB8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00003DB8 ??_R1BA@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003DB8                                         ; DATA XREF: .rdata$r:00003BC8o
.rdata$r:00003DB8                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003DBC                 align 10h
.rdata$r:00003DC0                 db  10h
.rdata$r:00003DC1                 db    0
.rdata$r:00003DC2                 db    0
.rdata$r:00003DC3                 db    0
.rdata$r:00003DC4                 db 0FFh
.rdata$r:00003DC5                 db 0FFh
.rdata$r:00003DC6                 db 0FFh
.rdata$r:00003DC7                 db 0FFh
.rdata$r:00003DC8                 db    0
.rdata$r:00003DC9                 db    0
.rdata$r:00003DCA                 db    0
.rdata$r:00003DCB                 db    0
.rdata$r:00003DCC                 db  40h ; @
.rdata$r:00003DCD                 db    0
.rdata$r:00003DCE                 db    0
.rdata$r:00003DCF                 db    0
.rdata$r:00003DD0                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DD0 _rdata$r        ends
.rdata$r:00003DD0
.rdata$r:00003DD4 ; ===========================================================================
.rdata$r:00003DD4
.rdata$r:00003DD4 ; Segment type: Pure data
.rdata$r:00003DD4 ; Segment permissions: Read
.rdata$r:00003DD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DD4                 assume cs:_rdata$r
.rdata$r:00003DD4                 ;org 3DD4h
.rdata$r:00003DD4 ; COMDAT (pick any)
.rdata$r:00003DD4                 public ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
.rdata$r:00003DD4 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressSetInStream'}
.rdata$r:00003DD4 ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ db    0
.rdata$r:00003DD4                                         ; DATA XREF: .rdata:00003B30o
.rdata$r:00003DD5                 db    0
.rdata$r:00003DD6                 db    0
.rdata$r:00003DD7                 db    0
.rdata$r:00003DD8                 db    4
.rdata$r:00003DD9                 db    0
.rdata$r:00003DDA                 db    0
.rdata$r:00003DDB                 db    0
.rdata$r:00003DDC                 db    0
.rdata$r:00003DDD                 db    0
.rdata$r:00003DDE                 db    0
.rdata$r:00003DDF                 db    0
.rdata$r:00003DE0                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00003DE4                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DE4 _rdata$r        ends
.rdata$r:00003DE4
.rdata$r:00003DE8 ; ===========================================================================
.rdata$r:00003DE8
.rdata$r:00003DE8 ; Segment type: Pure data
.rdata$r:00003DE8 ; Segment permissions: Read
.rdata$r:00003DE8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DE8                 assume cs:_rdata$r
.rdata$r:00003DE8                 ;org 3DE8h
.rdata$r:00003DE8 ; COMDAT (pick any)
.rdata$r:00003DE8                 public ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
.rdata$r:00003DE8 ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ISequentialInStream'}
.rdata$r:00003DE8 ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ db    0
.rdata$r:00003DE8                                         ; DATA XREF: .rdata:00003B1Co
.rdata$r:00003DE9                 db    0
.rdata$r:00003DEA                 db    0
.rdata$r:00003DEB                 db    0
.rdata$r:00003DEC                 db    8
.rdata$r:00003DED                 db    0
.rdata$r:00003DEE                 db    0
.rdata$r:00003DEF                 db    0
.rdata$r:00003DF0                 db    0
.rdata$r:00003DF1                 db    0
.rdata$r:00003DF2                 db    0
.rdata$r:00003DF3                 db    0
.rdata$r:00003DF4                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00003DF8                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DF8 _rdata$r        ends
.rdata$r:00003DF8
.rdata$r:00003DFC ; ===========================================================================
.rdata$r:00003DFC
.rdata$r:00003DFC ; Segment type: Pure data
.rdata$r:00003DFC ; Segment permissions: Read
.rdata$r:00003DFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DFC                 assume cs:_rdata$r
.rdata$r:00003DFC                 ;org 3DFCh
.rdata$r:00003DFC ; COMDAT (pick any)
.rdata$r:00003DFC                 public ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
.rdata$r:00003DFC ; const NCompress::CCopyCoder::`RTTI Complete Object Locator'{for `ICompressGetInStreamProcessedSize'}
.rdata$r:00003DFC ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ db    0
.rdata$r:00003DFC                                         ; DATA XREF: .rdata:00003B08o
.rdata$r:00003DFD                 db    0
.rdata$r:00003DFE                 db    0
.rdata$r:00003DFF                 db    0
.rdata$r:00003E00                 db  0Ch
.rdata$r:00003E01                 db    0
.rdata$r:00003E02                 db    0
.rdata$r:00003E03                 db    0
.rdata$r:00003E04                 db    0
.rdata$r:00003E05                 db    0
.rdata$r:00003E06                 db    0
.rdata$r:00003E07                 db    0
.rdata$r:00003E08                 dd offset ??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder `RTTI Type Descriptor'
.rdata$r:00003E0C                 dd offset ??_R3CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E0C _rdata$r        ends
.rdata$r:00003E0C
.text:00003E10 ; ===========================================================================
.text:00003E10
.text:00003E10 ; Segment type: Pure code
.text:00003E10 ; Segment permissions: Read/Execute
.text:00003E10 _text           segment para public 'CODE' use32
.text:00003E10                 assume cs:_text
.text:00003E10                 ;org 3E10h
.text:00003E10 ; COMDAT (pick any)
.text:00003E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E10
.text:00003E10 ; =============== S U B R O U T I N E =======================================
.text:00003E10
.text:00003E10 ; Attributes: bp-based frame
.text:00003E10
.text:00003E10 ; _DWORD __thiscall ISequentialInStream::ISequentialInStream(ISequentialInStream *__hidden this)
.text:00003E10                 public ??0ISequentialInStream@@QAE@XZ
.text:00003E10 ??0ISequentialInStream@@QAE@XZ proc near
.text:00003E10                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+27p
.text:00003E10                                         ; CLimitedSequentialInStream::CLimitedSequentialInStream(void)+11p ...
.text:00003E10
.text:00003E10 var_4           = dword ptr -4
.text:00003E10
.text:00003E10                 push    ebp
.text:00003E11                 mov     ebp, esp
.text:00003E13                 push    ecx
.text:00003E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E1B                 mov     [ebp+var_4], ecx
.text:00003E1E                 mov     ecx, [ebp+var_4]
.text:00003E21                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003E26                 mov     eax, [ebp+var_4]
.text:00003E29                 mov     dword ptr [eax], offset ??_7ISequentialInStream@@6B@ ; const ISequentialInStream::`vftable'
.text:00003E2F                 mov     eax, [ebp+var_4]
.text:00003E32                 add     esp, 4
.text:00003E35                 cmp     ebp, esp
.text:00003E37                 call    __RTC_CheckEsp
.text:00003E3C                 mov     esp, ebp
.text:00003E3E                 pop     ebp
.text:00003E3F                 retn
.text:00003E3F ??0ISequentialInStream@@QAE@XZ endp
.text:00003E3F
.text:00003E3F _text           ends
.text:00003E3F
.rdata:00003E40 ; ===========================================================================
.rdata:00003E40
.rdata:00003E40 ; Segment type: Pure data
.rdata:00003E40 ; Segment permissions: Read
.rdata:00003E40 _rdata          segment dword public 'DATA' use32
.rdata:00003E40                 assume cs:_rdata
.rdata:00003E40                 ;org 3E40h
.rdata:00003E40 ; COMDAT (pick largest)
.rdata:00003E40                 dd offset ??_R4ISequentialInStream@@6B@ ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata:00003E44                 public ??_7ISequentialInStream@@6B@
.rdata:00003E44 ; const ISequentialInStream::`vftable'
.rdata:00003E44 ??_7ISequentialInStream@@6B@ dd offset __purecall
.rdata:00003E44                                         ; DATA XREF: ISequentialInStream::ISequentialInStream(void)+19o
.rdata:00003E48                 dd offset __purecall
.rdata:00003E4C                 dd offset __purecall
.rdata:00003E50                 dd offset __purecall
.rdata:00003E50 _rdata          ends
.rdata:00003E50
.rdata$r:00003E54 ; ===========================================================================
.rdata$r:00003E54
.rdata$r:00003E54 ; Segment type: Pure data
.rdata$r:00003E54 ; Segment permissions: Read
.rdata$r:00003E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E54                 assume cs:_rdata$r
.rdata$r:00003E54                 ;org 3E54h
.rdata$r:00003E54 ; COMDAT (pick any)
.rdata$r:00003E54                 public ??_R4ISequentialInStream@@6B@
.rdata$r:00003E54 ; const ISequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00003E54 ??_R4ISequentialInStream@@6B@ db    0   ; DATA XREF: .rdata:00003E40o
.rdata$r:00003E55                 db    0
.rdata$r:00003E56                 db    0
.rdata$r:00003E57                 db    0
.rdata$r:00003E58                 db    0
.rdata$r:00003E59                 db    0
.rdata$r:00003E5A                 db    0
.rdata$r:00003E5B                 db    0
.rdata$r:00003E5C                 db    0
.rdata$r:00003E5D                 db    0
.rdata$r:00003E5E                 db    0
.rdata$r:00003E5F                 db    0
.rdata$r:00003E60                 dd offset ??_R0?AUISequentialInStream@@@8 ; ISequentialInStream `RTTI Type Descriptor'
.rdata$r:00003E64                 dd offset ??_R3ISequentialInStream@@8 ; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E64 _rdata$r        ends
.rdata$r:00003E64
.text:00003E68 ; ===========================================================================
.text:00003E68
.text:00003E68 ; Segment type: Pure code
.text:00003E68 ; Segment permissions: Read/Execute
.text:00003E68 _text           segment para public 'CODE' use32
.text:00003E68                 assume cs:_text
.text:00003E68                 ;org 3E68h
.text:00003E68 ; COMDAT (pick any)
.text:00003E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E68
.text:00003E68 ; =============== S U B R O U T I N E =======================================
.text:00003E68
.text:00003E68 ; Attributes: bp-based frame
.text:00003E68
.text:00003E68 ; public: __thiscall IUnknown::IUnknown(void)
.text:00003E68                 public ??0IUnknown@@QAE@XZ
.text:00003E68 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ISequentialInStream::ISequentialInStream(void)+11p
.text:00003E68                                         ; ICompressCoder::ICompressCoder(void)+11p ...
.text:00003E68
.text:00003E68 var_4           = dword ptr -4
.text:00003E68
.text:00003E68                 push    ebp
.text:00003E69                 mov     ebp, esp
.text:00003E6B                 push    ecx
.text:00003E6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E73                 mov     [ebp+var_4], ecx
.text:00003E76                 mov     eax, [ebp+var_4]
.text:00003E79                 mov     esp, ebp
.text:00003E7B                 pop     ebp
.text:00003E7C                 retn
.text:00003E7C ??0IUnknown@@QAE@XZ endp
.text:00003E7C
.text:00003E7C ; ---------------------------------------------------------------------------
.text:00003E7D                 align 10h
.text:00003E7D _text           ends
.text:00003E7D
.text:00003E80 ; ===========================================================================
.text:00003E80
.text:00003E80 ; Segment type: Pure code
.text:00003E80 ; Segment permissions: Read/Execute
.text:00003E80 _text           segment para public 'CODE' use32
.text:00003E80                 assume cs:_text
.text:00003E80                 ;org 3E80h
.text:00003E80 ; COMDAT (pick any)
.text:00003E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E80
.text:00003E80 ; =============== S U B R O U T I N E =======================================
.text:00003E80
.text:00003E80 ; Attributes: bp-based frame
.text:00003E80
.text:00003E80 ; __int32 __stdcall NCompress::CCopyCoder::QueryInterface(NCompress::CCopyCoder *this, const struct _GUID *Buf1, void **)
.text:00003E80                 public ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00003E80 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003E80                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00003E80                                         ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00003E80
.text:00003E80 var_C           = dword ptr -0Ch
.text:00003E80 var_8           = dword ptr -8
.text:00003E80 var_4           = dword ptr -4
.text:00003E80 this            = dword ptr  8
.text:00003E80 Buf1            = dword ptr  0Ch
.text:00003E80 arg_8           = dword ptr  10h
.text:00003E80
.text:00003E80                 push    ebp
.text:00003E81                 mov     ebp, esp
.text:00003E83                 sub     esp, 0Ch
.text:00003E86                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003E8D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E9B                 mov     eax, [ebp+arg_8]
.text:00003E9E                 mov     dword ptr [eax], 0
.text:00003EA4                 push    offset _IID_IUnknown ; Buf2
.text:00003EA9                 mov     ecx, [ebp+Buf1]
.text:00003EAC                 push    ecx             ; Buf1
.text:00003EAD                 call    ___@8           ; __(x,x)
.text:00003EB2                 test    eax, eax
.text:00003EB4                 jz      short loc_3EC3
.text:00003EB6                 mov     edx, [ebp+arg_8]
.text:00003EB9                 mov     eax, [ebp+this]
.text:00003EBC                 mov     [edx], eax
.text:00003EBE                 jmp     loc_3F85
.text:00003EC3 ; ---------------------------------------------------------------------------
.text:00003EC3
.text:00003EC3 loc_3EC3:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00003EC3                 push    offset _IID_ICompressCoder ; Buf2
.text:00003EC8                 mov     ecx, [ebp+Buf1]
.text:00003ECB                 push    ecx             ; Buf1
.text:00003ECC                 call    ___@8           ; __(x,x)
.text:00003ED1                 test    eax, eax
.text:00003ED3                 jz      short loc_3EE2
.text:00003ED5                 mov     edx, [ebp+arg_8]
.text:00003ED8                 mov     eax, [ebp+this]
.text:00003EDB                 mov     [edx], eax
.text:00003EDD                 jmp     loc_3F85
.text:00003EE2 ; ---------------------------------------------------------------------------
.text:00003EE2
.text:00003EE2 loc_3EE2:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+53j
.text:00003EE2                 push    offset _IID_ICompressSetInStream ; Buf2
.text:00003EE7                 mov     ecx, [ebp+Buf1]
.text:00003EEA                 push    ecx             ; Buf1
.text:00003EEB                 call    ___@8           ; __(x,x)
.text:00003EF0                 test    eax, eax
.text:00003EF2                 jz      short loc_3F16
.text:00003EF4                 cmp     [ebp+this], 0
.text:00003EF8                 jz      short loc_3F05
.text:00003EFA                 mov     edx, [ebp+this]
.text:00003EFD                 add     edx, 4
.text:00003F00                 mov     [ebp+var_4], edx
.text:00003F03                 jmp     short loc_3F0C
.text:00003F05 ; ---------------------------------------------------------------------------
.text:00003F05
.text:00003F05 loc_3F05:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+78j
.text:00003F05                 mov     [ebp+var_4], 0
.text:00003F0C
.text:00003F0C loc_3F0C:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+83j
.text:00003F0C                 mov     eax, [ebp+arg_8]
.text:00003F0F                 mov     ecx, [ebp+var_4]
.text:00003F12                 mov     [eax], ecx
.text:00003F14                 jmp     short loc_3F85
.text:00003F16 ; ---------------------------------------------------------------------------
.text:00003F16
.text:00003F16 loc_3F16:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+72j
.text:00003F16                 push    offset _IID_ISequentialInStream ; Buf2
.text:00003F1B                 mov     edx, [ebp+Buf1]
.text:00003F1E                 push    edx             ; Buf1
.text:00003F1F                 call    ___@8           ; __(x,x)
.text:00003F24                 test    eax, eax
.text:00003F26                 jz      short loc_3F4A
.text:00003F28                 cmp     [ebp+this], 0
.text:00003F2C                 jz      short loc_3F39
.text:00003F2E                 mov     eax, [ebp+this]
.text:00003F31                 add     eax, 8
.text:00003F34                 mov     [ebp+var_8], eax
.text:00003F37                 jmp     short loc_3F40
.text:00003F39 ; ---------------------------------------------------------------------------
.text:00003F39
.text:00003F39 loc_3F39:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+ACj
.text:00003F39                 mov     [ebp+var_8], 0
.text:00003F40
.text:00003F40 loc_3F40:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+B7j
.text:00003F40                 mov     ecx, [ebp+arg_8]
.text:00003F43                 mov     edx, [ebp+var_8]
.text:00003F46                 mov     [ecx], edx
.text:00003F48                 jmp     short loc_3F85
.text:00003F4A ; ---------------------------------------------------------------------------
.text:00003F4A
.text:00003F4A loc_3F4A:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+A6j
.text:00003F4A                 push    offset _IID_ICompressGetInStreamProcessedSize ; Buf2
.text:00003F4F                 mov     eax, [ebp+Buf1]
.text:00003F52                 push    eax             ; Buf1
.text:00003F53                 call    ___@8           ; __(x,x)
.text:00003F58                 test    eax, eax
.text:00003F5A                 jz      short loc_3F7E
.text:00003F5C                 cmp     [ebp+this], 0
.text:00003F60                 jz      short loc_3F6D
.text:00003F62                 mov     ecx, [ebp+this]
.text:00003F65                 add     ecx, 0Ch
.text:00003F68                 mov     [ebp+var_C], ecx
.text:00003F6B                 jmp     short loc_3F74
.text:00003F6D ; ---------------------------------------------------------------------------
.text:00003F6D
.text:00003F6D loc_3F6D:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+E0j
.text:00003F6D                 mov     [ebp+var_C], 0
.text:00003F74
.text:00003F74 loc_3F74:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+EBj
.text:00003F74                 mov     edx, [ebp+arg_8]
.text:00003F77                 mov     eax, [ebp+var_C]
.text:00003F7A                 mov     [edx], eax
.text:00003F7C                 jmp     short loc_3F85
.text:00003F7E ; ---------------------------------------------------------------------------
.text:00003F7E
.text:00003F7E loc_3F7E:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+DAj
.text:00003F7E                 mov     eax, 80004002h
.text:00003F83                 jmp     short loc_3F96
.text:00003F85 ; ---------------------------------------------------------------------------
.text:00003F85
.text:00003F85 loc_3F85:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+3Ej
.text:00003F85                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00003F85                 mov     ecx, [ebp+this]
.text:00003F88                 mov     edx, [ecx+10h]
.text:00003F8B                 add     edx, 1
.text:00003F8E                 mov     eax, [ebp+this]
.text:00003F91                 mov     [eax+10h], edx
.text:00003F94                 xor     eax, eax
.text:00003F96
.text:00003F96 loc_3F96:                               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+103j
.text:00003F96                 add     esp, 0Ch
.text:00003F99                 cmp     ebp, esp
.text:00003F9B                 call    __RTC_CheckEsp
.text:00003FA0                 mov     esp, ebp
.text:00003FA2                 pop     ebp
.text:00003FA3                 retn    0Ch
.text:00003FA3 ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:00003FA3
.text:00003FA3 ; ---------------------------------------------------------------------------
.text:00003FA6                 align 4
.text:00003FA6 _text           ends
.text:00003FA6
.text:00003FA8 ; ===========================================================================
.text:00003FA8
.text:00003FA8 ; Segment type: Pure code
.text:00003FA8 ; Segment permissions: Read/Execute
.text:00003FA8 _text           segment para public 'CODE' use32
.text:00003FA8                 assume cs:_text
.text:00003FA8                 ;org 3FA8h
.text:00003FA8 ; COMDAT (pick any)
.text:00003FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FA8
.text:00003FA8 ; =============== S U B R O U T I N E =======================================
.text:00003FA8
.text:00003FA8 ; Attributes: bp-based frame
.text:00003FA8
.text:00003FA8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00003FA8                 public ___@8
.text:00003FA8 ___@8           proc near               ; CODE XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00003FA8                                         ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:00003FA8
.text:00003FA8 Buf1            = dword ptr  8
.text:00003FA8 Buf2            = dword ptr  0Ch
.text:00003FA8
.text:00003FA8                 push    ebp
.text:00003FA9                 mov     ebp, esp
.text:00003FAB                 mov     eax, [ebp+Buf2]
.text:00003FAE                 push    eax             ; Buf2
.text:00003FAF                 mov     ecx, [ebp+Buf1]
.text:00003FB2                 push    ecx             ; Buf1
.text:00003FB3                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00003FB8                 cmp     ebp, esp
.text:00003FBA                 call    __RTC_CheckEsp
.text:00003FBF                 pop     ebp
.text:00003FC0                 retn    8
.text:00003FC0 ___@8           endp
.text:00003FC0
.text:00003FC0 ; ---------------------------------------------------------------------------
.text:00003FC3                 align 4
.text:00003FC3 _text           ends
.text:00003FC3
.text:00003FC4 ; ===========================================================================
.text:00003FC4
.text:00003FC4 ; Segment type: Pure code
.text:00003FC4 ; Segment permissions: Read/Execute
.text:00003FC4 _text           segment para public 'CODE' use32
.text:00003FC4                 assume cs:_text
.text:00003FC4                 ;org 3FC4h
.text:00003FC4 ; COMDAT (pick any)
.text:00003FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FC4
.text:00003FC4 ; =============== S U B R O U T I N E =======================================
.text:00003FC4
.text:00003FC4 ; Attributes: bp-based frame
.text:00003FC4
.text:00003FC4 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00003FC4                 public _IsEqualGUID@8
.text:00003FC4 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00003FC4
.text:00003FC4 Buf1            = dword ptr  8
.text:00003FC4 Buf2            = dword ptr  0Ch
.text:00003FC4
.text:00003FC4                 push    ebp
.text:00003FC5                 mov     ebp, esp
.text:00003FC7                 push    10h             ; Size
.text:00003FC9                 mov     eax, [ebp+Buf2]
.text:00003FCC                 push    eax             ; Buf2
.text:00003FCD                 mov     ecx, [ebp+Buf1]
.text:00003FD0                 push    ecx             ; Buf1
.text:00003FD1                 call    _memcmp
.text:00003FD6                 add     esp, 0Ch
.text:00003FD9                 neg     eax
.text:00003FDB                 sbb     eax, eax
.text:00003FDD                 add     eax, 1
.text:00003FE0                 cmp     ebp, esp
.text:00003FE2                 call    __RTC_CheckEsp
.text:00003FE7                 pop     ebp
.text:00003FE8                 retn    8
.text:00003FE8 _IsEqualGUID@8  endp
.text:00003FE8
.text:00003FE8 ; ---------------------------------------------------------------------------
.text:00003FEB                 align 4
.text:00003FEB _text           ends
.text:00003FEB
.text:00003FEC ; ===========================================================================
.text:00003FEC
.text:00003FEC ; Segment type: Pure code
.text:00003FEC ; Segment permissions: Read/Execute
.text:00003FEC _text           segment para public 'CODE' use32
.text:00003FEC                 assume cs:_text
.text:00003FEC                 ;org 3FECh
.text:00003FEC ; COMDAT (pick any)
.text:00003FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FEC
.text:00003FEC ; =============== S U B R O U T I N E =======================================
.text:00003FEC
.text:00003FEC ; Attributes: bp-based frame
.text:00003FEC
.text:00003FEC ; unsigned __int32 __stdcall NCompress::CCopyCoder::AddRef(NCompress::CCopyCoder *this)
.text:00003FEC                 public ?AddRef@CCopyCoder@NCompress@@UAGKXZ
.text:00003FEC ?AddRef@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00003FEC                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}' (void)+5j
.text:00003FEC                                         ; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}' (void)+5j ...
.text:00003FEC
.text:00003FEC var_4           = dword ptr -4
.text:00003FEC this            = dword ptr  8
.text:00003FEC
.text:00003FEC                 push    ebp
.text:00003FED                 mov     ebp, esp
.text:00003FEF                 push    ecx
.text:00003FF0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003FF7                 mov     eax, [ebp+this]
.text:00003FFA                 mov     ecx, [eax+10h]
.text:00003FFD                 add     ecx, 1
.text:00004000                 mov     [ebp+var_4], ecx
.text:00004003                 mov     edx, [ebp+this]
.text:00004006                 mov     eax, [ebp+var_4]
.text:00004009                 mov     [edx+10h], eax
.text:0000400C                 mov     eax, [ebp+var_4]
.text:0000400F                 mov     esp, ebp
.text:00004011                 pop     ebp
.text:00004012                 retn    4
.text:00004012 ?AddRef@CCopyCoder@NCompress@@UAGKXZ endp
.text:00004012
.text:00004012 ; ---------------------------------------------------------------------------
.text:00004015                 align 4
.text:00004015 _text           ends
.text:00004015
.text:00004018 ; ===========================================================================
.text:00004018
.text:00004018 ; Segment type: Pure code
.text:00004018 ; Segment permissions: Read/Execute
.text:00004018 _text           segment para public 'CODE' use32
.text:00004018                 assume cs:_text
.text:00004018                 ;org 4018h
.text:00004018 ; COMDAT (pick any)
.text:00004018                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004018
.text:00004018 ; =============== S U B R O U T I N E =======================================
.text:00004018
.text:00004018 ; Attributes: bp-based frame
.text:00004018
.text:00004018 ; unsigned __int32 __stdcall NCompress::CCopyCoder::Release(NCompress::CCopyCoder *this)
.text:00004018                 public ?Release@CCopyCoder@NCompress@@UAGKXZ
.text:00004018 ?Release@CCopyCoder@NCompress@@UAGKXZ proc near
.text:00004018                                         ; CODE XREF: [thunk]:NCompress::CCopyCoder::Release`adjustor{4}' (void)+5j
.text:00004018                                         ; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}' (void)+5j ...
.text:00004018
.text:00004018 var_10          = dword ptr -10h
.text:00004018 var_C           = dword ptr -0Ch
.text:00004018 var_8           = dword ptr -8
.text:00004018 var_4           = dword ptr -4
.text:00004018 this            = dword ptr  8
.text:00004018
.text:00004018                 push    ebp
.text:00004019                 mov     ebp, esp
.text:0000401B                 sub     esp, 10h
.text:0000401E                 mov     eax, 0CCCCCCCCh
.text:00004023                 mov     [ebp+var_10], eax
.text:00004026                 mov     [ebp+var_C], eax
.text:00004029                 mov     [ebp+var_8], eax
.text:0000402C                 mov     [ebp+var_4], eax
.text:0000402F                 mov     eax, [ebp+this]
.text:00004032                 mov     ecx, [eax+10h]
.text:00004035                 sub     ecx, 1
.text:00004038                 mov     [ebp+var_C], ecx
.text:0000403B                 mov     edx, [ebp+this]
.text:0000403E                 mov     eax, [ebp+var_C]
.text:00004041                 mov     [edx+10h], eax
.text:00004044                 cmp     [ebp+var_C], 0
.text:00004048                 jz      short loc_4052
.text:0000404A                 mov     ecx, [ebp+this]
.text:0000404D                 mov     eax, [ecx+10h]
.text:00004050                 jmp     short loc_407C
.text:00004052 ; ---------------------------------------------------------------------------
.text:00004052
.text:00004052 loc_4052:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+30j
.text:00004052                 mov     edx, [ebp+this]
.text:00004055                 mov     [ebp+var_8], edx
.text:00004058                 mov     eax, [ebp+var_8]
.text:0000405B                 mov     [ebp+var_4], eax
.text:0000405E                 cmp     [ebp+var_4], 0
.text:00004062                 jz      short loc_4073
.text:00004064                 push    1
.text:00004066                 mov     ecx, [ebp+var_4]
.text:00004069                 call    ??_GCCopyCoder@NCompress@@QAEPAXI@Z ; NCompress::CCopyCoder::`scalar deleting destructor'(uint)
.text:0000406E                 mov     [ebp+var_10], eax
.text:00004071                 jmp     short loc_407A
.text:00004073 ; ---------------------------------------------------------------------------
.text:00004073
.text:00004073 loc_4073:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+4Aj
.text:00004073                 mov     [ebp+var_10], 0
.text:0000407A
.text:0000407A loc_407A:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+59j
.text:0000407A                 xor     eax, eax
.text:0000407C
.text:0000407C loc_407C:                               ; CODE XREF: NCompress::CCopyCoder::Release(void)+38j
.text:0000407C                 add     esp, 10h
.text:0000407F                 cmp     ebp, esp
.text:00004081                 call    __RTC_CheckEsp
.text:00004086                 mov     esp, ebp
.text:00004088                 pop     ebp
.text:00004089                 retn    4
.text:00004089 ?Release@CCopyCoder@NCompress@@UAGKXZ endp
.text:00004089
.text:00004089 _text           ends
.text:00004089
.text:0000408C ; ===========================================================================
.text:0000408C
.text:0000408C ; Segment type: Pure code
.text:0000408C ; Segment permissions: Read/Execute
.text:0000408C _text           segment para public 'CODE' use32
.text:0000408C                 assume cs:_text
.text:0000408C                 ;org 408Ch
.text:0000408C ; COMDAT (pick any)
.text:0000408C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000408C
.text:0000408C ; =============== S U B R O U T I N E =======================================
.text:0000408C
.text:0000408C ; Attributes: bp-based frame
.text:0000408C
.text:0000408C ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:0000408C                 public ??0ICompressCoder@@QAE@XZ
.text:0000408C ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+11p
.text:0000408C
.text:0000408C var_4           = dword ptr -4
.text:0000408C
.text:0000408C                 push    ebp
.text:0000408D                 mov     ebp, esp
.text:0000408F                 push    ecx
.text:00004090                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004097                 mov     [ebp+var_4], ecx
.text:0000409A                 mov     ecx, [ebp+var_4]
.text:0000409D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000040A2                 mov     eax, [ebp+var_4]
.text:000040A5                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:000040AB                 mov     eax, [ebp+var_4]
.text:000040AE                 add     esp, 4
.text:000040B1                 cmp     ebp, esp
.text:000040B3                 call    __RTC_CheckEsp
.text:000040B8                 mov     esp, ebp
.text:000040BA                 pop     ebp
.text:000040BB                 retn
.text:000040BB ??0ICompressCoder@@QAE@XZ endp
.text:000040BB
.text:000040BB _text           ends
.text:000040BB
.rdata:000040BC ; ===========================================================================
.rdata:000040BC
.rdata:000040BC ; Segment type: Pure data
.rdata:000040BC ; Segment permissions: Read
.rdata:000040BC _rdata          segment dword public 'DATA' use32
.rdata:000040BC                 assume cs:_rdata
.rdata:000040BC                 ;org 40BCh
.rdata:000040BC ; COMDAT (pick largest)
.rdata:000040BC                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:000040C0                 public ??_7ICompressCoder@@6B@
.rdata:000040C0 ; const ICompressCoder::`vftable'
.rdata:000040C0 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:000040C0                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:000040C4                 dd offset __purecall
.rdata:000040C8                 dd offset __purecall
.rdata:000040CC                 dd offset __purecall
.rdata:000040CC _rdata          ends
.rdata:000040CC
.rdata$r:000040D0 ; ===========================================================================
.rdata$r:000040D0
.rdata$r:000040D0 ; Segment type: Pure data
.rdata$r:000040D0 ; Segment permissions: Read
.rdata$r:000040D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000040D0                 assume cs:_rdata$r
.rdata$r:000040D0                 ;org 40D0h
.rdata$r:000040D0 ; COMDAT (pick any)
.rdata$r:000040D0                 public ??_R4ICompressCoder@@6B@
.rdata$r:000040D0 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:000040D0 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:000040BCo
.rdata$r:000040D1                 db    0
.rdata$r:000040D2                 db    0
.rdata$r:000040D3                 db    0
.rdata$r:000040D4                 db    0
.rdata$r:000040D5                 db    0
.rdata$r:000040D6                 db    0
.rdata$r:000040D7                 db    0
.rdata$r:000040D8                 db    0
.rdata$r:000040D9                 db    0
.rdata$r:000040DA                 db    0
.rdata$r:000040DB                 db    0
.rdata$r:000040DC                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000040E0                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000040E0 _rdata$r        ends
.rdata$r:000040E0
.text:000040E4 ; ===========================================================================
.text:000040E4
.text:000040E4 ; Segment type: Pure code
.text:000040E4 ; Segment permissions: Read/Execute
.text:000040E4 _text           segment para public 'CODE' use32
.text:000040E4                 assume cs:_text
.text:000040E4                 ;org 40E4h
.text:000040E4 ; COMDAT (pick any)
.text:000040E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000040E4
.text:000040E4 ; =============== S U B R O U T I N E =======================================
.text:000040E4
.text:000040E4 ; Attributes: bp-based frame
.text:000040E4
.text:000040E4 ; _DWORD __thiscall ICompressSetInStream::ICompressSetInStream(ICompressSetInStream *__hidden this)
.text:000040E4                 public ??0ICompressSetInStream@@QAE@XZ
.text:000040E4 ??0ICompressSetInStream@@QAE@XZ proc near
.text:000040E4                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+1Cp
.text:000040E4
.text:000040E4 var_4           = dword ptr -4
.text:000040E4
.text:000040E4                 push    ebp
.text:000040E5                 mov     ebp, esp
.text:000040E7                 push    ecx
.text:000040E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040EF                 mov     [ebp+var_4], ecx
.text:000040F2                 mov     ecx, [ebp+var_4]
.text:000040F5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000040FA                 mov     eax, [ebp+var_4]
.text:000040FD                 mov     dword ptr [eax], offset ??_7ICompressSetInStream@@6B@ ; const ICompressSetInStream::`vftable'
.text:00004103                 mov     eax, [ebp+var_4]
.text:00004106                 add     esp, 4
.text:00004109                 cmp     ebp, esp
.text:0000410B                 call    __RTC_CheckEsp
.text:00004110                 mov     esp, ebp
.text:00004112                 pop     ebp
.text:00004113                 retn
.text:00004113 ??0ICompressSetInStream@@QAE@XZ endp
.text:00004113
.text:00004113 _text           ends
.text:00004113
.rdata:00004114 ; ===========================================================================
.rdata:00004114
.rdata:00004114 ; Segment type: Pure data
.rdata:00004114 ; Segment permissions: Read
.rdata:00004114 _rdata          segment dword public 'DATA' use32
.rdata:00004114                 assume cs:_rdata
.rdata:00004114                 ;org 4114h
.rdata:00004114 ; COMDAT (pick largest)
.rdata:00004114                 dd offset ??_R4ICompressSetInStream@@6B@ ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata:00004118                 public ??_7ICompressSetInStream@@6B@
.rdata:00004118 ; const ICompressSetInStream::`vftable'
.rdata:00004118 ??_7ICompressSetInStream@@6B@ dd offset __purecall
.rdata:00004118                                         ; DATA XREF: ICompressSetInStream::ICompressSetInStream(void)+19o
.rdata:0000411C                 dd offset __purecall
.rdata:00004120                 dd offset __purecall
.rdata:00004124                 dd offset __purecall
.rdata:00004128                 dd offset __purecall
.rdata:00004128 _rdata          ends
.rdata:00004128
.rdata$r:0000412C ; ===========================================================================
.rdata$r:0000412C
.rdata$r:0000412C ; Segment type: Pure data
.rdata$r:0000412C ; Segment permissions: Read
.rdata$r:0000412C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000412C                 assume cs:_rdata$r
.rdata$r:0000412C                 ;org 412Ch
.rdata$r:0000412C ; COMDAT (pick any)
.rdata$r:0000412C                 public ??_R4ICompressSetInStream@@6B@
.rdata$r:0000412C ; const ICompressSetInStream::`RTTI Complete Object Locator'
.rdata$r:0000412C ??_R4ICompressSetInStream@@6B@ db    0  ; DATA XREF: .rdata:00004114o
.rdata$r:0000412D                 db    0
.rdata$r:0000412E                 db    0
.rdata$r:0000412F                 db    0
.rdata$r:00004130                 db    0
.rdata$r:00004131                 db    0
.rdata$r:00004132                 db    0
.rdata$r:00004133                 db    0
.rdata$r:00004134                 db    0
.rdata$r:00004135                 db    0
.rdata$r:00004136                 db    0
.rdata$r:00004137                 db    0
.rdata$r:00004138                 dd offset ??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream `RTTI Type Descriptor'
.rdata$r:0000413C                 dd offset ??_R3ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000413C _rdata$r        ends
.rdata$r:0000413C
.text:00004140 ; ===========================================================================
.text:00004140
.text:00004140 ; Segment type: Pure code
.text:00004140 ; Segment permissions: Read/Execute
.text:00004140 _text           segment para public 'CODE' use32
.text:00004140                 assume cs:_text
.text:00004140                 ;org 4140h
.text:00004140 ; COMDAT (pick any)
.text:00004140                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004140
.text:00004140 ; =============== S U B R O U T I N E =======================================
.text:00004140
.text:00004140 ; Attributes: bp-based frame
.text:00004140
.text:00004140 ; _DWORD __thiscall ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(ICompressGetInStreamProcessedSize *__hidden this)
.text:00004140                 public ??0ICompressGetInStreamProcessedSize@@QAE@XZ
.text:00004140 ??0ICompressGetInStreamProcessedSize@@QAE@XZ proc near
.text:00004140                                         ; CODE XREF: NCompress::CCopyCoder::CCopyCoder(void)+32p
.text:00004140
.text:00004140 var_4           = dword ptr -4
.text:00004140
.text:00004140                 push    ebp
.text:00004141                 mov     ebp, esp
.text:00004143                 push    ecx
.text:00004144                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000414B                 mov     [ebp+var_4], ecx
.text:0000414E                 mov     ecx, [ebp+var_4]
.text:00004151                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004156                 mov     eax, [ebp+var_4]
.text:00004159                 mov     dword ptr [eax], offset ??_7ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`vftable'
.text:0000415F                 mov     eax, [ebp+var_4]
.text:00004162                 add     esp, 4
.text:00004165                 cmp     ebp, esp
.text:00004167                 call    __RTC_CheckEsp
.text:0000416C                 mov     esp, ebp
.text:0000416E                 pop     ebp
.text:0000416F                 retn
.text:0000416F ??0ICompressGetInStreamProcessedSize@@QAE@XZ endp
.text:0000416F
.text:0000416F _text           ends
.text:0000416F
.rdata:00004170 ; ===========================================================================
.rdata:00004170
.rdata:00004170 ; Segment type: Pure data
.rdata:00004170 ; Segment permissions: Read
.rdata:00004170 _rdata          segment dword public 'DATA' use32
.rdata:00004170                 assume cs:_rdata
.rdata:00004170                 ;org 4170h
.rdata:00004170 ; COMDAT (pick largest)
.rdata:00004170                 dd offset ??_R4ICompressGetInStreamProcessedSize@@6B@ ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata:00004174                 public ??_7ICompressGetInStreamProcessedSize@@6B@
.rdata:00004174 ; const ICompressGetInStreamProcessedSize::`vftable'
.rdata:00004174 ??_7ICompressGetInStreamProcessedSize@@6B@ dd offset __purecall
.rdata:00004174                                         ; DATA XREF: ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize(void)+19o
.rdata:00004178                 dd offset __purecall
.rdata:0000417C                 dd offset __purecall
.rdata:00004180                 dd offset __purecall
.rdata:00004180 _rdata          ends
.rdata:00004180
.rdata$r:00004184 ; ===========================================================================
.rdata$r:00004184
.rdata$r:00004184 ; Segment type: Pure data
.rdata$r:00004184 ; Segment permissions: Read
.rdata$r:00004184 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004184                 assume cs:_rdata$r
.rdata$r:00004184                 ;org 4184h
.rdata$r:00004184 ; COMDAT (pick any)
.rdata$r:00004184                 public ??_R4ICompressGetInStreamProcessedSize@@6B@
.rdata$r:00004184 ; const ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
.rdata$r:00004184 ??_R4ICompressGetInStreamProcessedSize@@6B@ db    0
.rdata$r:00004184                                         ; DATA XREF: .rdata:00004170o
.rdata$r:00004185                 db    0
.rdata$r:00004186                 db    0
.rdata$r:00004187                 db    0
.rdata$r:00004188                 db    0
.rdata$r:00004189                 db    0
.rdata$r:0000418A                 db    0
.rdata$r:0000418B                 db    0
.rdata$r:0000418C                 db    0
.rdata$r:0000418D                 db    0
.rdata$r:0000418E                 db    0
.rdata$r:0000418F                 db    0
.rdata$r:00004190                 dd offset ??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
.rdata$r:00004194                 dd offset ??_R3ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004194 _rdata$r        ends
.rdata$r:00004194
.text:00004198 ; ===========================================================================
.text:00004198
.text:00004198 ; Segment type: Pure code
.text:00004198 ; Segment permissions: Read/Execute
.text:00004198 _text           segment para public 'CODE' use32
.text:00004198                 assume cs:_text
.text:00004198                 ;org 4198h
.text:00004198 ; COMDAT (pick any)
.text:00004198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004198
.text:00004198 ; =============== S U B R O U T I N E =======================================
.text:00004198
.text:00004198 ; Attributes: bp-based frame
.text:00004198
.text:00004198 ; public: void * __thiscall NCompress::CCopyCoder::`scalar deleting destructor'(unsigned int)
.text:00004198                 public ??_GCCopyCoder@NCompress@@QAEPAXI@Z
.text:00004198 ??_GCCopyCoder@NCompress@@QAEPAXI@Z proc near
.text:00004198                                         ; CODE XREF: NCompress::CCopyCoder::Release(void)+51p
.text:00004198
.text:00004198 var_4           = dword ptr -4
.text:00004198 arg_0           = dword ptr  8
.text:00004198
.text:00004198                 push    ebp
.text:00004199                 mov     ebp, esp
.text:0000419B                 push    ecx
.text:0000419C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041A3                 mov     [ebp+var_4], ecx
.text:000041A6                 mov     ecx, [ebp+var_4] ; this
.text:000041A9                 call    ??1CCopyCoder@NCompress@@QAE@XZ ; NCompress::CCopyCoder::~CCopyCoder(void)
.text:000041AE                 mov     eax, [ebp+arg_0]
.text:000041B1                 and     eax, 1
.text:000041B4                 jz      short loc_41C2
.text:000041B6                 mov     ecx, [ebp+var_4]
.text:000041B9                 push    ecx             ; void *
.text:000041BA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000041BF                 add     esp, 4
.text:000041C2
.text:000041C2 loc_41C2:                               ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+1Cj
.text:000041C2                 mov     eax, [ebp+var_4]
.text:000041C5                 add     esp, 4
.text:000041C8                 cmp     ebp, esp
.text:000041CA                 call    __RTC_CheckEsp
.text:000041CF                 mov     esp, ebp
.text:000041D1                 pop     ebp
.text:000041D2                 retn    4
.text:000041D2 ??_GCCopyCoder@NCompress@@QAEPAXI@Z endp
.text:000041D2
.text:000041D2 ; ---------------------------------------------------------------------------
.text:000041D5                 align 4
.text:000041D5 _text           ends
.text:000041D5
.text:000041D8 ; ===========================================================================
.text:000041D8
.text:000041D8 ; Segment type: Pure code
.text:000041D8 ; Segment permissions: Read/Execute
.text:000041D8 _text           segment para public 'CODE' use32
.text:000041D8                 assume cs:_text
.text:000041D8                 ;org 41D8h
.text:000041D8 ; COMDAT (pick any)
.text:000041D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041D8
.text:000041D8 ; =============== S U B R O U T I N E =======================================
.text:000041D8
.text:000041D8 ; Attributes: bp-based frame
.text:000041D8
.text:000041D8 ; __int32 __stdcall NArchive::NTar::CHandler::QueryInterface(NArchive::NTar::CHandler *this, const struct _GUID *Buf1, void **)
.text:000041D8                 public ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:000041D8 ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:000041D8                                         ; CODE XREF: [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{16}' (_GUID const &,void * *)+5j
.text:000041D8                                         ; [thunk]:NArchive::NTar::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j ...
.text:000041D8
.text:000041D8 var_10          = dword ptr -10h
.text:000041D8 var_C           = dword ptr -0Ch
.text:000041D8 var_8           = dword ptr -8
.text:000041D8 var_4           = dword ptr -4
.text:000041D8 this            = dword ptr  8
.text:000041D8 Buf1            = dword ptr  0Ch
.text:000041D8 arg_8           = dword ptr  10h
.text:000041D8
.text:000041D8                 push    ebp
.text:000041D9                 mov     ebp, esp
.text:000041DB                 sub     esp, 10h
.text:000041DE                 mov     eax, 0CCCCCCCCh
.text:000041E3                 mov     [ebp+var_10], eax
.text:000041E6                 mov     [ebp+var_C], eax
.text:000041E9                 mov     [ebp+var_8], eax
.text:000041EC                 mov     [ebp+var_4], eax
.text:000041EF                 mov     eax, [ebp+arg_8]
.text:000041F2                 mov     dword ptr [eax], 0
.text:000041F8                 push    offset _IID_IUnknown ; Buf2
.text:000041FD                 mov     ecx, [ebp+Buf1]
.text:00004200                 push    ecx             ; Buf1
.text:00004201                 call    ___@8           ; __(x,x)
.text:00004206                 test    eax, eax
.text:00004208                 jz      short loc_4217
.text:0000420A                 mov     edx, [ebp+arg_8]
.text:0000420D                 mov     eax, [ebp+this]
.text:00004210                 mov     [edx], eax
.text:00004212                 jmp     loc_4310
.text:00004217 ; ---------------------------------------------------------------------------
.text:00004217
.text:00004217 loc_4217:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+30j
.text:00004217                 push    offset _IID_IInArchive ; Buf2
.text:0000421C                 mov     ecx, [ebp+Buf1]
.text:0000421F                 push    ecx             ; Buf1
.text:00004220                 call    ___@8           ; __(x,x)
.text:00004225                 test    eax, eax
.text:00004227                 jz      short loc_4236
.text:00004229                 mov     edx, [ebp+arg_8]
.text:0000422C                 mov     eax, [ebp+this]
.text:0000422F                 mov     [edx], eax
.text:00004231                 jmp     loc_4310
.text:00004236 ; ---------------------------------------------------------------------------
.text:00004236
.text:00004236 loc_4236:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+4Fj
.text:00004236                 push    offset _IID_IArchiveOpenSeq ; Buf2
.text:0000423B                 mov     ecx, [ebp+Buf1]
.text:0000423E                 push    ecx             ; Buf1
.text:0000423F                 call    ___@8           ; __(x,x)
.text:00004244                 test    eax, eax
.text:00004246                 jz      short loc_426D
.text:00004248                 cmp     [ebp+this], 0
.text:0000424C                 jz      short loc_4259
.text:0000424E                 mov     edx, [ebp+this]
.text:00004251                 add     edx, 4
.text:00004254                 mov     [ebp+var_4], edx
.text:00004257                 jmp     short loc_4260
.text:00004259 ; ---------------------------------------------------------------------------
.text:00004259
.text:00004259 loc_4259:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+74j
.text:00004259                 mov     [ebp+var_4], 0
.text:00004260
.text:00004260 loc_4260:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+7Fj
.text:00004260                 mov     eax, [ebp+arg_8]
.text:00004263                 mov     ecx, [ebp+var_4]
.text:00004266                 mov     [eax], ecx
.text:00004268                 jmp     loc_4310
.text:0000426D ; ---------------------------------------------------------------------------
.text:0000426D
.text:0000426D loc_426D:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000426D                 push    offset _IID_IInArchiveGetStream ; Buf2
.text:00004272                 mov     edx, [ebp+Buf1]
.text:00004275                 push    edx             ; Buf1
.text:00004276                 call    ___@8           ; __(x,x)
.text:0000427B                 test    eax, eax
.text:0000427D                 jz      short loc_42A1
.text:0000427F                 cmp     [ebp+this], 0
.text:00004283                 jz      short loc_4290
.text:00004285                 mov     eax, [ebp+this]
.text:00004288                 add     eax, 8
.text:0000428B                 mov     [ebp+var_8], eax
.text:0000428E                 jmp     short loc_4297
.text:00004290 ; ---------------------------------------------------------------------------
.text:00004290
.text:00004290 loc_4290:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+ABj
.text:00004290                 mov     [ebp+var_8], 0
.text:00004297
.text:00004297 loc_4297:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+B6j
.text:00004297                 mov     ecx, [ebp+arg_8]
.text:0000429A                 mov     edx, [ebp+var_8]
.text:0000429D                 mov     [ecx], edx
.text:0000429F                 jmp     short loc_4310
.text:000042A1 ; ---------------------------------------------------------------------------
.text:000042A1
.text:000042A1 loc_42A1:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+A5j
.text:000042A1                 push    offset _IID_ISetProperties ; Buf2
.text:000042A6                 mov     eax, [ebp+Buf1]
.text:000042A9                 push    eax             ; Buf1
.text:000042AA                 call    ___@8           ; __(x,x)
.text:000042AF                 test    eax, eax
.text:000042B1                 jz      short loc_42D5
.text:000042B3                 cmp     [ebp+this], 0
.text:000042B7                 jz      short loc_42C4
.text:000042B9                 mov     ecx, [ebp+this]
.text:000042BC                 add     ecx, 0Ch
.text:000042BF                 mov     [ebp+var_C], ecx
.text:000042C2                 jmp     short loc_42CB
.text:000042C4 ; ---------------------------------------------------------------------------
.text:000042C4
.text:000042C4 loc_42C4:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+DFj
.text:000042C4                 mov     [ebp+var_C], 0
.text:000042CB
.text:000042CB loc_42CB:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+EAj
.text:000042CB                 mov     edx, [ebp+arg_8]
.text:000042CE                 mov     eax, [ebp+var_C]
.text:000042D1                 mov     [edx], eax
.text:000042D3                 jmp     short loc_4310
.text:000042D5 ; ---------------------------------------------------------------------------
.text:000042D5
.text:000042D5 loc_42D5:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+D9j
.text:000042D5                 push    offset _IID_IOutArchive ; Buf2
.text:000042DA                 mov     ecx, [ebp+Buf1]
.text:000042DD                 push    ecx             ; Buf1
.text:000042DE                 call    ___@8           ; __(x,x)
.text:000042E3                 test    eax, eax
.text:000042E5                 jz      short loc_4309
.text:000042E7                 cmp     [ebp+this], 0
.text:000042EB                 jz      short loc_42F8
.text:000042ED                 mov     edx, [ebp+this]
.text:000042F0                 add     edx, 10h
.text:000042F3                 mov     [ebp+var_10], edx
.text:000042F6                 jmp     short loc_42FF
.text:000042F8 ; ---------------------------------------------------------------------------
.text:000042F8
.text:000042F8 loc_42F8:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+113j
.text:000042F8                 mov     [ebp+var_10], 0
.text:000042FF
.text:000042FF loc_42FF:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+11Ej
.text:000042FF                 mov     eax, [ebp+arg_8]
.text:00004302                 mov     ecx, [ebp+var_10]
.text:00004305                 mov     [eax], ecx
.text:00004307                 jmp     short loc_4310
.text:00004309 ; ---------------------------------------------------------------------------
.text:00004309
.text:00004309 loc_4309:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+10Dj
.text:00004309                 mov     eax, 80004002h
.text:0000430E                 jmp     short loc_4321
.text:00004310 ; ---------------------------------------------------------------------------
.text:00004310
.text:00004310 loc_4310:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+3Aj
.text:00004310                                         ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+59j ...
.text:00004310                 mov     edx, [ebp+this]
.text:00004313                 mov     eax, [edx+14h]
.text:00004316                 add     eax, 1
.text:00004319                 mov     ecx, [ebp+this]
.text:0000431C                 mov     [ecx+14h], eax
.text:0000431F                 xor     eax, eax
.text:00004321
.text:00004321 loc_4321:                               ; CODE XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+136j
.text:00004321                 add     esp, 10h
.text:00004324                 cmp     ebp, esp
.text:00004326                 call    __RTC_CheckEsp
.text:0000432B                 mov     esp, ebp
.text:0000432D                 pop     ebp
.text:0000432E                 retn    0Ch
.text:0000432E ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:0000432E
.text:0000432E ; ---------------------------------------------------------------------------
.text:00004331                 align 4
.text:00004331 _text           ends
.text:00004331
.text:00004334 ; ===========================================================================
.text:00004334
.text:00004334 ; Segment type: Pure code
.text:00004334 ; Segment permissions: Read/Execute
.text:00004334 _text           segment para public 'CODE' use32
.text:00004334                 assume cs:_text
.text:00004334                 ;org 4334h
.text:00004334 ; COMDAT (pick any)
.text:00004334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004334
.text:00004334 ; =============== S U B R O U T I N E =======================================
.text:00004334
.text:00004334 ; Attributes: bp-based frame
.text:00004334
.text:00004334 ; unsigned __int32 __stdcall NArchive::NTar::CHandler::AddRef(NArchive::NTar::CHandler *this)
.text:00004334                 public ?AddRef@CHandler@NTar@NArchive@@UAGKXZ
.text:00004334 ?AddRef@CHandler@NTar@NArchive@@UAGKXZ proc near
.text:00004334                                         ; CODE XREF: [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{4}' (void)+5j
.text:00004334                                         ; [thunk]:NArchive::NTar::CHandler::AddRef`adjustor{8}' (void)+5j ...
.text:00004334
.text:00004334 var_4           = dword ptr -4
.text:00004334 this            = dword ptr  8
.text:00004334
.text:00004334                 push    ebp
.text:00004335                 mov     ebp, esp
.text:00004337                 push    ecx
.text:00004338                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000433F                 mov     eax, [ebp+this]
.text:00004342                 mov     ecx, [eax+14h]
.text:00004345                 add     ecx, 1
.text:00004348                 mov     [ebp+var_4], ecx
.text:0000434B                 mov     edx, [ebp+this]
.text:0000434E                 mov     eax, [ebp+var_4]
.text:00004351                 mov     [edx+14h], eax
.text:00004354                 mov     eax, [ebp+var_4]
.text:00004357                 mov     esp, ebp
.text:00004359                 pop     ebp
.text:0000435A                 retn    4
.text:0000435A ?AddRef@CHandler@NTar@NArchive@@UAGKXZ endp
.text:0000435A
.text:0000435A ; ---------------------------------------------------------------------------
.text:0000435D                 align 10h
.text:0000435D _text           ends
.text:0000435D
.text:00004360 ; ===========================================================================
.text:00004360
.text:00004360 ; Segment type: Pure code
.text:00004360 ; Segment permissions: Read/Execute
.text:00004360 _text           segment para public 'CODE' use32
.text:00004360                 assume cs:_text
.text:00004360                 ;org 4360h
.text:00004360 ; COMDAT (pick any)
.text:00004360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004360
.text:00004360 ; =============== S U B R O U T I N E =======================================
.text:00004360
.text:00004360 ; Attributes: bp-based frame
.text:00004360
.text:00004360 ; unsigned __int32 __stdcall NArchive::NTar::CHandler::Release(NArchive::NTar::CHandler *this)
.text:00004360                 public ?Release@CHandler@NTar@NArchive@@UAGKXZ
.text:00004360 ?Release@CHandler@NTar@NArchive@@UAGKXZ proc near
.text:00004360                                         ; CODE XREF: [thunk]:NArchive::NTar::CHandler::Release`adjustor{4}' (void)+5j
.text:00004360                                         ; [thunk]:NArchive::NTar::CHandler::Release`adjustor{8}' (void)+5j ...
.text:00004360
.text:00004360 var_10          = dword ptr -10h
.text:00004360 var_C           = dword ptr -0Ch
.text:00004360 var_8           = dword ptr -8
.text:00004360 var_4           = dword ptr -4
.text:00004360 this            = dword ptr  8
.text:00004360
.text:00004360                 push    ebp
.text:00004361                 mov     ebp, esp
.text:00004363                 sub     esp, 10h
.text:00004366                 mov     eax, 0CCCCCCCCh
.text:0000436B                 mov     [ebp+var_10], eax
.text:0000436E                 mov     [ebp+var_C], eax
.text:00004371                 mov     [ebp+var_8], eax
.text:00004374                 mov     [ebp+var_4], eax
.text:00004377                 mov     eax, [ebp+this]
.text:0000437A                 mov     ecx, [eax+14h]
.text:0000437D                 sub     ecx, 1
.text:00004380                 mov     [ebp+var_C], ecx
.text:00004383                 mov     edx, [ebp+this]
.text:00004386                 mov     eax, [ebp+var_C]
.text:00004389                 mov     [edx+14h], eax
.text:0000438C                 cmp     [ebp+var_C], 0
.text:00004390                 jz      short loc_439A
.text:00004392                 mov     ecx, [ebp+this]
.text:00004395                 mov     eax, [ecx+14h]
.text:00004398                 jmp     short loc_43C4
.text:0000439A ; ---------------------------------------------------------------------------
.text:0000439A
.text:0000439A loc_439A:                               ; CODE XREF: NArchive::NTar::CHandler::Release(void)+30j
.text:0000439A                 mov     edx, [ebp+this]
.text:0000439D                 mov     [ebp+var_8], edx
.text:000043A0                 mov     eax, [ebp+var_8]
.text:000043A3                 mov     [ebp+var_4], eax
.text:000043A6                 cmp     [ebp+var_4], 0
.text:000043AA                 jz      short loc_43BB
.text:000043AC                 push    1
.text:000043AE                 mov     ecx, [ebp+var_4]
.text:000043B1                 call    ??_GCHandler@NTar@NArchive@@QAEPAXI@Z ; NArchive::NTar::CHandler::`scalar deleting destructor'(uint)
.text:000043B6                 mov     [ebp+var_10], eax
.text:000043B9                 jmp     short loc_43C2
.text:000043BB ; ---------------------------------------------------------------------------
.text:000043BB
.text:000043BB loc_43BB:                               ; CODE XREF: NArchive::NTar::CHandler::Release(void)+4Aj
.text:000043BB                 mov     [ebp+var_10], 0
.text:000043C2
.text:000043C2 loc_43C2:                               ; CODE XREF: NArchive::NTar::CHandler::Release(void)+59j
.text:000043C2                 xor     eax, eax
.text:000043C4
.text:000043C4 loc_43C4:                               ; CODE XREF: NArchive::NTar::CHandler::Release(void)+38j
.text:000043C4                 add     esp, 10h
.text:000043C7                 cmp     ebp, esp
.text:000043C9                 call    __RTC_CheckEsp
.text:000043CE                 mov     esp, ebp
.text:000043D0                 pop     ebp
.text:000043D1                 retn    4
.text:000043D1 ?Release@CHandler@NTar@NArchive@@UAGKXZ endp
.text:000043D1
.text:000043D1 _text           ends
.text:000043D1
.text:000043D4 ; ===========================================================================
.text:000043D4
.text:000043D4 ; Segment type: Pure code
.text:000043D4 ; Segment permissions: Read/Execute
.text:000043D4 _text           segment para public 'CODE' use32
.text:000043D4                 assume cs:_text
.text:000043D4                 ;org 43D4h
.text:000043D4 ; COMDAT (pick any)
.text:000043D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043D4
.text:000043D4 ; =============== S U B R O U T I N E =======================================
.text:000043D4
.text:000043D4 ; Attributes: bp-based frame
.text:000043D4
.text:000043D4 ; public: void * __thiscall NArchive::NTar::CHandler::`scalar deleting destructor'(unsigned int)
.text:000043D4                 public ??_GCHandler@NTar@NArchive@@QAEPAXI@Z
.text:000043D4 ??_GCHandler@NTar@NArchive@@QAEPAXI@Z proc near
.text:000043D4                                         ; CODE XREF: NArchive::NTar::CHandler::Release(void)+51p
.text:000043D4
.text:000043D4 var_4           = dword ptr -4
.text:000043D4 arg_0           = dword ptr  8
.text:000043D4
.text:000043D4                 push    ebp
.text:000043D5                 mov     ebp, esp
.text:000043D7                 push    ecx
.text:000043D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043DF                 mov     [ebp+var_4], ecx
.text:000043E2                 mov     ecx, [ebp+var_4] ; this
.text:000043E5                 call    ??1CHandler@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CHandler::~CHandler(void)
.text:000043EA                 mov     eax, [ebp+arg_0]
.text:000043ED                 and     eax, 1
.text:000043F0                 jz      short loc_43FE
.text:000043F2                 mov     ecx, [ebp+var_4]
.text:000043F5                 push    ecx             ; void *
.text:000043F6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000043FB                 add     esp, 4
.text:000043FE
.text:000043FE loc_43FE:                               ; CODE XREF: NArchive::NTar::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:000043FE                 mov     eax, [ebp+var_4]
.text:00004401                 add     esp, 4
.text:00004404                 cmp     ebp, esp
.text:00004406                 call    __RTC_CheckEsp
.text:0000440B                 mov     esp, ebp
.text:0000440D                 pop     ebp
.text:0000440E                 retn    4
.text:0000440E ??_GCHandler@NTar@NArchive@@QAEPAXI@Z endp
.text:0000440E
.text:0000440E ; ---------------------------------------------------------------------------
.text:00004411                 align 4
.text:00004411 _text           ends
.text:00004411
.text:00004414 ; ===========================================================================
.text:00004414
.text:00004414 ; Segment type: Pure code
.text:00004414 ; Segment permissions: Read/Execute
.text:00004414 _text           segment para public 'CODE' use32
.text:00004414                 assume cs:_text
.text:00004414                 ;org 4414h
.text:00004414 ; COMDAT (pick any)
.text:00004414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004414
.text:00004414 ; =============== S U B R O U T I N E =======================================
.text:00004414
.text:00004414 ; Attributes: bp-based frame
.text:00004414
.text:00004414 ; _DWORD __thiscall NArchive::NTar::CHandler::~CHandler(NArchive::NTar::CHandler *__hidden this)
.text:00004414                 public ??1CHandler@NTar@NArchive@@QAE@XZ
.text:00004414 ??1CHandler@NTar@NArchive@@QAE@XZ proc near
.text:00004414                                         ; CODE XREF: NArchive::NTar::CHandler::`scalar deleting destructor'(uint)+11p
.text:00004414
.text:00004414 var_10          = dword ptr -10h
.text:00004414 var_C           = dword ptr -0Ch
.text:00004414 var_4           = dword ptr -4
.text:00004414
.text:00004414                 push    ebp
.text:00004415                 mov     ebp, esp
.text:00004417                 push    0FFFFFFFFh
.text:00004419                 push    offset __ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ
.text:0000441E                 mov     eax, large fs:0
.text:00004424                 push    eax
.text:00004425                 push    ecx
.text:00004426                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000442D                 mov     eax, dword ptr ds:___security_cookie
.text:00004432                 xor     eax, ebp
.text:00004434                 push    eax
.text:00004435                 lea     eax, [ebp+var_C]
.text:00004438                 mov     large fs:0, eax
.text:0000443E                 mov     [ebp+var_10], ecx
.text:00004441                 mov     [ebp+var_4], 3
.text:00004448                 mov     ecx, [ebp+var_10]
.text:0000444B                 add     ecx, 0ECh ; '8'
.text:00004451                 call    ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)
.text:00004456                 mov     byte ptr [ebp+var_4], 2
.text:0000445A                 mov     ecx, [ebp+var_10]
.text:0000445D                 add     ecx, 38h ; '8'  ; this
.text:00004460                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:00004465                 mov     byte ptr [ebp+var_4], 1
.text:00004469                 mov     ecx, [ebp+var_10]
.text:0000446C                 add     ecx, 28h ; '('
.text:0000446F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004474                 mov     byte ptr [ebp+var_4], 0
.text:00004478                 mov     ecx, [ebp+var_10]
.text:0000447B                 add     ecx, 24h ; '$'
.text:0000447E                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00004483                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000448A                 mov     ecx, [ebp+var_10]
.text:0000448D                 add     ecx, 18h
.text:00004490                 call    ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)
.text:00004495                 mov     ecx, [ebp+var_C]
.text:00004498                 mov     large fs:0, ecx
.text:0000449F                 pop     ecx
.text:000044A0                 add     esp, 10h
.text:000044A3                 cmp     ebp, esp
.text:000044A5                 call    __RTC_CheckEsp
.text:000044AA                 mov     esp, ebp
.text:000044AC                 pop     ebp
.text:000044AD                 retn
.text:000044AD ??1CHandler@NTar@NArchive@@QAE@XZ endp
.text:000044AD
.text:000044AD ; ---------------------------------------------------------------------------
.text:000044AE                 align 10h
.text:000044AE _text           ends
.text:000044AE
.text$x:000044B0 ; ===========================================================================
.text$x:000044B0
.text$x:000044B0 ; Segment type: Pure code
.text$x:000044B0 ; Segment permissions: Read/Execute
.text$x:000044B0 _text$x         segment para public 'CODE' use32
.text$x:000044B0                 assume cs:_text$x
.text$x:000044B0                 ;org 44B0h
.text$x:000044B0 ; COMDAT (pick associative to section at 4414)
.text$x:000044B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044B0
.text$x:000044B0 ; =============== S U B R O U T I N E =======================================
.text$x:000044B0
.text$x:000044B0
.text$x:000044B0 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:000044B0                                         ; DATA XREF: .xdata$x:000044FCo
.text$x:000044B0                 mov     ecx, [ebp-10h]
.text$x:000044B3                 add     ecx, 18h
.text$x:000044B6                 jmp     ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)
.text$x:000044B6 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$0 endp
.text$x:000044B6
.text$x:000044BB
.text$x:000044BB ; =============== S U B R O U T I N E =======================================
.text$x:000044BB
.text$x:000044BB
.text$x:000044BB __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$1 proc near
.text$x:000044BB                                         ; DATA XREF: .xdata$x:00004504o
.text$x:000044BB                 mov     ecx, [ebp-10h]
.text$x:000044BE                 add     ecx, 24h ; '$'
.text$x:000044C1                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:000044C1 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$1 endp
.text$x:000044C1
.text$x:000044C6
.text$x:000044C6 ; =============== S U B R O U T I N E =======================================
.text$x:000044C6
.text$x:000044C6
.text$x:000044C6 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$2 proc near
.text$x:000044C6                                         ; DATA XREF: .xdata$x:0000450Co
.text$x:000044C6                 mov     ecx, [ebp-10h]
.text$x:000044C9                 add     ecx, 28h ; '('
.text$x:000044CC                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:000044CC __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$2 endp
.text$x:000044CC
.text$x:000044D1
.text$x:000044D1 ; =============== S U B R O U T I N E =======================================
.text$x:000044D1
.text$x:000044D1
.text$x:000044D1 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$3 proc near
.text$x:000044D1                                         ; DATA XREF: .xdata$x:00004514o
.text$x:000044D1                 mov     ecx, [ebp-10h]
.text$x:000044D4                 add     ecx, 38h ; '8'  ; this
.text$x:000044D7                 jmp     ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text$x:000044D7 __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$3 endp
.text$x:000044D7
.text$x:000044DC
.text$x:000044DC ; =============== S U B R O U T I N E =======================================
.text$x:000044DC
.text$x:000044DC
.text$x:000044DC __ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ proc near
.text$x:000044DC                                         ; DATA XREF: NArchive::NTar::CHandler::~CHandler(void)+5o
.text$x:000044DC
.text$x:000044DC arg_4           = dword ptr  8
.text$x:000044DC
.text$x:000044DC                 mov     edx, [esp+arg_4]
.text$x:000044E0                 lea     eax, [edx+0Ch]
.text$x:000044E3                 mov     ecx, [edx-8]
.text$x:000044E6                 xor     ecx, eax
.text$x:000044E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044ED                 mov     eax, offset __ehfuncinfo$??1CHandler@NTar@NArchive@@QAE@XZ
.text$x:000044F2                 jmp     ___CxxFrameHandler3
.text$x:000044F2 __ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ endp
.text$x:000044F2
.text$x:000044F2 ; ---------------------------------------------------------------------------
.text$x:000044F7                 align 4
.text$x:000044F7 _text$x         ends
.text$x:000044F7
.xdata$x:000044F8 ; ===========================================================================
.xdata$x:000044F8
.xdata$x:000044F8 ; Segment type: Pure data
.xdata$x:000044F8 ; Segment permissions: Read
.xdata$x:000044F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000044F8                 assume cs:_xdata$x
.xdata$x:000044F8                 ;org 44F8h
.xdata$x:000044F8 ; COMDAT (pick associative to section at 4414)
.xdata$x:000044F8 __unwindtable$??1CHandler@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:000044F8                                         ; DATA XREF: .xdata$x:00004520o
.xdata$x:000044F9                 db 0FFh
.xdata$x:000044FA                 db 0FFh
.xdata$x:000044FB                 db 0FFh
.xdata$x:000044FC                 dd offset __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$0
.xdata$x:00004500                 db    0
.xdata$x:00004501                 db    0
.xdata$x:00004502                 db    0
.xdata$x:00004503                 db    0
.xdata$x:00004504                 dd offset __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$1
.xdata$x:00004508                 db    1
.xdata$x:00004509                 db    0
.xdata$x:0000450A                 db    0
.xdata$x:0000450B                 db    0
.xdata$x:0000450C                 dd offset __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$2
.xdata$x:00004510                 db    2
.xdata$x:00004511                 db    0
.xdata$x:00004512                 db    0
.xdata$x:00004513                 db    0
.xdata$x:00004514                 dd offset __unwindfunclet$??1CHandler@NTar@NArchive@@QAE@XZ$3
.xdata$x:00004518 __ehfuncinfo$??1CHandler@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004518                                         ; DATA XREF: __ehhandler$??1CHandler@NTar@NArchive@@QAE@XZ+11o
.xdata$x:00004519                 db    5
.xdata$x:0000451A                 db  93h ; ô
.xdata$x:0000451B                 db  19h
.xdata$x:0000451C                 db    4
.xdata$x:0000451D                 db    0
.xdata$x:0000451E                 db    0
.xdata$x:0000451F                 db    0
.xdata$x:00004520                 dd offset __unwindtable$??1CHandler@NTar@NArchive@@QAE@XZ
.xdata$x:00004524                 db    0
.xdata$x:00004525                 db    0
.xdata$x:00004526                 db    0
.xdata$x:00004527                 db    0
.xdata$x:00004528                 db    0
.xdata$x:00004529                 db    0
.xdata$x:0000452A                 db    0
.xdata$x:0000452B                 db    0
.xdata$x:0000452C                 db    0
.xdata$x:0000452D                 db    0
.xdata$x:0000452E                 db    0
.xdata$x:0000452F                 db    0
.xdata$x:00004530                 db    0
.xdata$x:00004531                 db    0
.xdata$x:00004532                 db    0
.xdata$x:00004533                 db    0
.xdata$x:00004534                 db    0
.xdata$x:00004535                 db    0
.xdata$x:00004536                 db    0
.xdata$x:00004537                 db    0
.xdata$x:00004538                 db    1
.xdata$x:00004539                 db    0
.xdata$x:0000453A                 db    0
.xdata$x:0000453B                 db    0
.xdata$x:0000453B _xdata$x        ends
.xdata$x:0000453B
.text:0000453C ; ===========================================================================
.text:0000453C
.text:0000453C ; Segment type: Pure code
.text:0000453C ; Segment permissions: Read/Execute
.text:0000453C _text           segment para public 'CODE' use32
.text:0000453C                 assume cs:_text
.text:0000453C                 ;org 453Ch
.text:0000453C ; COMDAT (pick any)
.text:0000453C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000453C
.text:0000453C ; =============== S U B R O U T I N E =======================================
.text:0000453C
.text:0000453C ; Attributes: bp-based frame
.text:0000453C
.text:0000453C ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:0000453C                 public ??0IInArchive@@QAE@XZ
.text:0000453C ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+3Cp
.text:0000453C
.text:0000453C var_4           = dword ptr -4
.text:0000453C
.text:0000453C                 push    ebp
.text:0000453D                 mov     ebp, esp
.text:0000453F                 push    ecx
.text:00004540                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004547                 mov     [ebp+var_4], ecx
.text:0000454A                 mov     ecx, [ebp+var_4]
.text:0000454D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004552                 mov     eax, [ebp+var_4]
.text:00004555                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:0000455B                 mov     eax, [ebp+var_4]
.text:0000455E                 add     esp, 4
.text:00004561                 cmp     ebp, esp
.text:00004563                 call    __RTC_CheckEsp
.text:00004568                 mov     esp, ebp
.text:0000456A                 pop     ebp
.text:0000456B                 retn
.text:0000456B ??0IInArchive@@QAE@XZ endp
.text:0000456B
.text:0000456B _text           ends
.text:0000456B
.rdata:0000456C ; ===========================================================================
.rdata:0000456C
.rdata:0000456C ; Segment type: Pure data
.rdata:0000456C ; Segment permissions: Read
.rdata:0000456C _rdata          segment dword public 'DATA' use32
.rdata:0000456C                 assume cs:_rdata
.rdata:0000456C                 ;org 456Ch
.rdata:0000456C ; COMDAT (pick largest)
.rdata:0000456C                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:00004570                 public ??_7IInArchive@@6B@
.rdata:00004570 ; const IInArchive::`vftable'
.rdata:00004570 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:00004570                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:00004574                 dd offset __purecall
.rdata:00004578                 dd offset __purecall
.rdata:0000457C                 dd offset __purecall
.rdata:00004580                 dd offset __purecall
.rdata:00004584                 dd offset __purecall
.rdata:00004588                 dd offset __purecall
.rdata:0000458C                 dd offset __purecall
.rdata:00004590                 dd offset __purecall
.rdata:00004594                 dd offset __purecall
.rdata:00004598                 dd offset __purecall
.rdata:0000459C                 dd offset __purecall
.rdata:000045A0                 dd offset __purecall
.rdata:000045A0 _rdata          ends
.rdata:000045A0
.rdata$r:000045A4 ; ===========================================================================
.rdata$r:000045A4
.rdata$r:000045A4 ; Segment type: Pure data
.rdata$r:000045A4 ; Segment permissions: Read
.rdata$r:000045A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045A4                 assume cs:_rdata$r
.rdata$r:000045A4                 ;org 45A4h
.rdata$r:000045A4 ; COMDAT (pick any)
.rdata$r:000045A4                 public ??_R4IInArchive@@6B@
.rdata$r:000045A4 ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:000045A4 ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:0000456Co
.rdata$r:000045A5                 db    0
.rdata$r:000045A6                 db    0
.rdata$r:000045A7                 db    0
.rdata$r:000045A8                 db    0
.rdata$r:000045A9                 db    0
.rdata$r:000045AA                 db    0
.rdata$r:000045AB                 db    0
.rdata$r:000045AC                 db    0
.rdata$r:000045AD                 db    0
.rdata$r:000045AE                 db    0
.rdata$r:000045AF                 db    0
.rdata$r:000045B0                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:000045B4                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000045B4 _rdata$r        ends
.rdata$r:000045B4
.text:000045B8 ; ===========================================================================
.text:000045B8
.text:000045B8 ; Segment type: Pure code
.text:000045B8 ; Segment permissions: Read/Execute
.text:000045B8 _text           segment para public 'CODE' use32
.text:000045B8                 assume cs:_text
.text:000045B8                 ;org 45B8h
.text:000045B8 ; COMDAT (pick any)
.text:000045B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000045B8
.text:000045B8 ; =============== S U B R O U T I N E =======================================
.text:000045B8
.text:000045B8 ; Attributes: bp-based frame
.text:000045B8
.text:000045B8 ; _DWORD __thiscall IArchiveOpenSeq::IArchiveOpenSeq(IArchiveOpenSeq *__hidden this)
.text:000045B8                 public ??0IArchiveOpenSeq@@QAE@XZ
.text:000045B8 ??0IArchiveOpenSeq@@QAE@XZ proc near    ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+47p
.text:000045B8
.text:000045B8 var_4           = dword ptr -4
.text:000045B8
.text:000045B8                 push    ebp
.text:000045B9                 mov     ebp, esp
.text:000045BB                 push    ecx
.text:000045BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045C3                 mov     [ebp+var_4], ecx
.text:000045C6                 mov     ecx, [ebp+var_4]
.text:000045C9                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000045CE                 mov     eax, [ebp+var_4]
.text:000045D1                 mov     dword ptr [eax], offset ??_7IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`vftable'
.text:000045D7                 mov     eax, [ebp+var_4]
.text:000045DA                 add     esp, 4
.text:000045DD                 cmp     ebp, esp
.text:000045DF                 call    __RTC_CheckEsp
.text:000045E4                 mov     esp, ebp
.text:000045E6                 pop     ebp
.text:000045E7                 retn
.text:000045E7 ??0IArchiveOpenSeq@@QAE@XZ endp
.text:000045E7
.text:000045E7 _text           ends
.text:000045E7
.rdata:000045E8 ; ===========================================================================
.rdata:000045E8
.rdata:000045E8 ; Segment type: Pure data
.rdata:000045E8 ; Segment permissions: Read
.rdata:000045E8 _rdata          segment dword public 'DATA' use32
.rdata:000045E8                 assume cs:_rdata
.rdata:000045E8                 ;org 45E8h
.rdata:000045E8 ; COMDAT (pick largest)
.rdata:000045E8                 dd offset ??_R4IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata:000045EC                 public ??_7IArchiveOpenSeq@@6B@
.rdata:000045EC ; const IArchiveOpenSeq::`vftable'
.rdata:000045EC ??_7IArchiveOpenSeq@@6B@ dd offset __purecall
.rdata:000045EC                                         ; DATA XREF: IArchiveOpenSeq::IArchiveOpenSeq(void)+19o
.rdata:000045F0                 dd offset __purecall
.rdata:000045F4                 dd offset __purecall
.rdata:000045F8                 dd offset __purecall
.rdata:000045F8 _rdata          ends
.rdata:000045F8
.rdata$r:000045FC ; ===========================================================================
.rdata$r:000045FC
.rdata$r:000045FC ; Segment type: Pure data
.rdata$r:000045FC ; Segment permissions: Read
.rdata$r:000045FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000045FC                 assume cs:_rdata$r
.rdata$r:000045FC                 ;org 45FCh
.rdata$r:000045FC ; COMDAT (pick any)
.rdata$r:000045FC                 public ??_R4IArchiveOpenSeq@@6B@
.rdata$r:000045FC ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata$r:000045FC ??_R4IArchiveOpenSeq@@6B@ db    0       ; DATA XREF: .rdata:000045E8o
.rdata$r:000045FD                 db    0
.rdata$r:000045FE                 db    0
.rdata$r:000045FF                 db    0
.rdata$r:00004600                 db    0
.rdata$r:00004601                 db    0
.rdata$r:00004602                 db    0
.rdata$r:00004603                 db    0
.rdata$r:00004604                 db    0
.rdata$r:00004605                 db    0
.rdata$r:00004606                 db    0
.rdata$r:00004607                 db    0
.rdata$r:00004608                 dd offset ??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:0000460C                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000460C _rdata$r        ends
.rdata$r:0000460C
.text:00004610 ; ===========================================================================
.text:00004610
.text:00004610 ; Segment type: Pure code
.text:00004610 ; Segment permissions: Read/Execute
.text:00004610 _text           segment para public 'CODE' use32
.text:00004610                 assume cs:_text
.text:00004610                 ;org 4610h
.text:00004610 ; COMDAT (pick any)
.text:00004610                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004610
.text:00004610 ; =============== S U B R O U T I N E =======================================
.text:00004610
.text:00004610 ; Attributes: bp-based frame
.text:00004610
.text:00004610 ; _DWORD __thiscall IInArchiveGetStream::IInArchiveGetStream(IInArchiveGetStream *__hidden this)
.text:00004610                 public ??0IInArchiveGetStream@@QAE@XZ
.text:00004610 ??0IInArchiveGetStream@@QAE@XZ proc near
.text:00004610                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+52p
.text:00004610
.text:00004610 var_4           = dword ptr -4
.text:00004610
.text:00004610                 push    ebp
.text:00004611                 mov     ebp, esp
.text:00004613                 push    ecx
.text:00004614                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000461B                 mov     [ebp+var_4], ecx
.text:0000461E                 mov     ecx, [ebp+var_4]
.text:00004621                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004626                 mov     eax, [ebp+var_4]
.text:00004629                 mov     dword ptr [eax], offset ??_7IInArchiveGetStream@@6B@ ; const IInArchiveGetStream::`vftable'
.text:0000462F                 mov     eax, [ebp+var_4]
.text:00004632                 add     esp, 4
.text:00004635                 cmp     ebp, esp
.text:00004637                 call    __RTC_CheckEsp
.text:0000463C                 mov     esp, ebp
.text:0000463E                 pop     ebp
.text:0000463F                 retn
.text:0000463F ??0IInArchiveGetStream@@QAE@XZ endp
.text:0000463F
.text:0000463F _text           ends
.text:0000463F
.rdata:00004640 ; ===========================================================================
.rdata:00004640
.rdata:00004640 ; Segment type: Pure data
.rdata:00004640 ; Segment permissions: Read
.rdata:00004640 _rdata          segment dword public 'DATA' use32
.rdata:00004640                 assume cs:_rdata
.rdata:00004640                 ;org 4640h
.rdata:00004640 ; COMDAT (pick largest)
.rdata:00004640                 dd offset ??_R4IInArchiveGetStream@@6B@ ; const IInArchiveGetStream::`RTTI Complete Object Locator'
.rdata:00004644                 public ??_7IInArchiveGetStream@@6B@
.rdata:00004644 ; const IInArchiveGetStream::`vftable'
.rdata:00004644 ??_7IInArchiveGetStream@@6B@ dd offset __purecall
.rdata:00004644                                         ; DATA XREF: IInArchiveGetStream::IInArchiveGetStream(void)+19o
.rdata:00004648                 dd offset __purecall
.rdata:0000464C                 dd offset __purecall
.rdata:00004650                 dd offset __purecall
.rdata:00004650 _rdata          ends
.rdata:00004650
.rdata$r:00004654 ; ===========================================================================
.rdata$r:00004654
.rdata$r:00004654 ; Segment type: Pure data
.rdata$r:00004654 ; Segment permissions: Read
.rdata$r:00004654 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004654                 assume cs:_rdata$r
.rdata$r:00004654                 ;org 4654h
.rdata$r:00004654 ; COMDAT (pick any)
.rdata$r:00004654                 public ??_R4IInArchiveGetStream@@6B@
.rdata$r:00004654 ; const IInArchiveGetStream::`RTTI Complete Object Locator'
.rdata$r:00004654 ??_R4IInArchiveGetStream@@6B@ db    0   ; DATA XREF: .rdata:00004640o
.rdata$r:00004655                 db    0
.rdata$r:00004656                 db    0
.rdata$r:00004657                 db    0
.rdata$r:00004658                 db    0
.rdata$r:00004659                 db    0
.rdata$r:0000465A                 db    0
.rdata$r:0000465B                 db    0
.rdata$r:0000465C                 db    0
.rdata$r:0000465D                 db    0
.rdata$r:0000465E                 db    0
.rdata$r:0000465F                 db    0
.rdata$r:00004660                 dd offset ??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream `RTTI Type Descriptor'
.rdata$r:00004664                 dd offset ??_R3IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004664 _rdata$r        ends
.rdata$r:00004664
.text:00004668 ; ===========================================================================
.text:00004668
.text:00004668 ; Segment type: Pure code
.text:00004668 ; Segment permissions: Read/Execute
.text:00004668 _text           segment para public 'CODE' use32
.text:00004668                 assume cs:_text
.text:00004668                 ;org 4668h
.text:00004668 ; COMDAT (pick any)
.text:00004668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004668
.text:00004668 ; =============== S U B R O U T I N E =======================================
.text:00004668
.text:00004668 ; Attributes: bp-based frame
.text:00004668
.text:00004668 ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:00004668                 public ??0ISetProperties@@QAE@XZ
.text:00004668 ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+5Dp
.text:00004668
.text:00004668 var_4           = dword ptr -4
.text:00004668
.text:00004668                 push    ebp
.text:00004669                 mov     ebp, esp
.text:0000466B                 push    ecx
.text:0000466C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004673                 mov     [ebp+var_4], ecx
.text:00004676                 mov     ecx, [ebp+var_4]
.text:00004679                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000467E                 mov     eax, [ebp+var_4]
.text:00004681                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:00004687                 mov     eax, [ebp+var_4]
.text:0000468A                 add     esp, 4
.text:0000468D                 cmp     ebp, esp
.text:0000468F                 call    __RTC_CheckEsp
.text:00004694                 mov     esp, ebp
.text:00004696                 pop     ebp
.text:00004697                 retn
.text:00004697 ??0ISetProperties@@QAE@XZ endp
.text:00004697
.text:00004697 _text           ends
.text:00004697
.rdata:00004698 ; ===========================================================================
.rdata:00004698
.rdata:00004698 ; Segment type: Pure data
.rdata:00004698 ; Segment permissions: Read
.rdata:00004698 _rdata          segment dword public 'DATA' use32
.rdata:00004698                 assume cs:_rdata
.rdata:00004698                 ;org 4698h
.rdata:00004698 ; COMDAT (pick largest)
.rdata:00004698                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:0000469C                 public ??_7ISetProperties@@6B@
.rdata:0000469C ; const ISetProperties::`vftable'
.rdata:0000469C ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:0000469C                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:000046A0                 dd offset __purecall
.rdata:000046A4                 dd offset __purecall
.rdata:000046A8                 dd offset __purecall
.rdata:000046A8 _rdata          ends
.rdata:000046A8
.rdata$r:000046AC ; ===========================================================================
.rdata$r:000046AC
.rdata$r:000046AC ; Segment type: Pure data
.rdata$r:000046AC ; Segment permissions: Read
.rdata$r:000046AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000046AC                 assume cs:_rdata$r
.rdata$r:000046AC                 ;org 46ACh
.rdata$r:000046AC ; COMDAT (pick any)
.rdata$r:000046AC                 public ??_R4ISetProperties@@6B@
.rdata$r:000046AC ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:000046AC ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:00004698o
.rdata$r:000046AD                 db    0
.rdata$r:000046AE                 db    0
.rdata$r:000046AF                 db    0
.rdata$r:000046B0                 db    0
.rdata$r:000046B1                 db    0
.rdata$r:000046B2                 db    0
.rdata$r:000046B3                 db    0
.rdata$r:000046B4                 db    0
.rdata$r:000046B5                 db    0
.rdata$r:000046B6                 db    0
.rdata$r:000046B7                 db    0
.rdata$r:000046B8                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:000046BC                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000046BC _rdata$r        ends
.rdata$r:000046BC
.text:000046C0 ; ===========================================================================
.text:000046C0
.text:000046C0 ; Segment type: Pure code
.text:000046C0 ; Segment permissions: Read/Execute
.text:000046C0 _text           segment para public 'CODE' use32
.text:000046C0                 assume cs:_text
.text:000046C0                 ;org 46C0h
.text:000046C0 ; COMDAT (pick any)
.text:000046C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046C0
.text:000046C0 ; =============== S U B R O U T I N E =======================================
.text:000046C0
.text:000046C0 ; Attributes: bp-based frame
.text:000046C0
.text:000046C0 ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:000046C0                 public ??0IOutArchive@@QAE@XZ
.text:000046C0 ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+68p
.text:000046C0
.text:000046C0 var_4           = dword ptr -4
.text:000046C0
.text:000046C0                 push    ebp
.text:000046C1                 mov     ebp, esp
.text:000046C3                 push    ecx
.text:000046C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046CB                 mov     [ebp+var_4], ecx
.text:000046CE                 mov     ecx, [ebp+var_4]
.text:000046D1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000046D6                 mov     eax, [ebp+var_4]
.text:000046D9                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:000046DF                 mov     eax, [ebp+var_4]
.text:000046E2                 add     esp, 4
.text:000046E5                 cmp     ebp, esp
.text:000046E7                 call    __RTC_CheckEsp
.text:000046EC                 mov     esp, ebp
.text:000046EE                 pop     ebp
.text:000046EF                 retn
.text:000046EF ??0IOutArchive@@QAE@XZ endp
.text:000046EF
.text:000046EF _text           ends
.text:000046EF
.rdata:000046F0 ; ===========================================================================
.rdata:000046F0
.rdata:000046F0 ; Segment type: Pure data
.rdata:000046F0 ; Segment permissions: Read
.rdata:000046F0 _rdata          segment dword public 'DATA' use32
.rdata:000046F0                 assume cs:_rdata
.rdata:000046F0                 ;org 46F0h
.rdata:000046F0 ; COMDAT (pick largest)
.rdata:000046F0                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:000046F4                 public ??_7IOutArchive@@6B@
.rdata:000046F4 ; const IOutArchive::`vftable'
.rdata:000046F4 ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:000046F4                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:000046F8                 dd offset __purecall
.rdata:000046FC                 dd offset __purecall
.rdata:00004700                 dd offset __purecall
.rdata:00004704                 dd offset __purecall
.rdata:00004704 _rdata          ends
.rdata:00004704
.rdata$r:00004708 ; ===========================================================================
.rdata$r:00004708
.rdata$r:00004708 ; Segment type: Pure data
.rdata$r:00004708 ; Segment permissions: Read
.rdata$r:00004708 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004708                 assume cs:_rdata$r
.rdata$r:00004708                 ;org 4708h
.rdata$r:00004708 ; COMDAT (pick any)
.rdata$r:00004708                 public ??_R4IOutArchive@@6B@
.rdata$r:00004708 ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:00004708 ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:000046F0o
.rdata$r:00004709                 db    0
.rdata$r:0000470A                 db    0
.rdata$r:0000470B                 db    0
.rdata$r:0000470C                 db    0
.rdata$r:0000470D                 db    0
.rdata$r:0000470E                 db    0
.rdata$r:0000470F                 db    0
.rdata$r:00004710                 db    0
.rdata$r:00004711                 db    0
.rdata$r:00004712                 db    0
.rdata$r:00004713                 db    0
.rdata$r:00004714                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00004718                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004718 _rdata$r        ends
.rdata$r:00004718
.text:0000471C ; ===========================================================================
.text:0000471C
.text:0000471C ; Segment type: Pure code
.text:0000471C ; Segment permissions: Read/Execute
.text:0000471C _text           segment para public 'CODE' use32
.text:0000471C                 assume cs:_text
.text:0000471C                 ;org 471Ch
.text:0000471C ; COMDAT (pick any)
.text:0000471C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000471C
.text:0000471C ; =============== S U B R O U T I N E =======================================
.text:0000471C
.text:0000471C ; Attributes: bp-based frame
.text:0000471C
.text:0000471C ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:0000471C                 public ??1UString@@QAE@XZ
.text:0000471C ??1UString@@QAE@XZ proc near            ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+AAp
.text:0000471C                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+72p ...
.text:0000471C
.text:0000471C var_8           = dword ptr -8
.text:0000471C var_4           = dword ptr -4
.text:0000471C
.text:0000471C                 push    ebp
.text:0000471D                 mov     ebp, esp
.text:0000471F                 sub     esp, 8
.text:00004722                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004729                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004730                 mov     [ebp+var_4], ecx
.text:00004733                 mov     eax, [ebp+var_4]
.text:00004736                 mov     ecx, [eax]
.text:00004738                 mov     [ebp+var_8], ecx
.text:0000473B                 mov     edx, [ebp+var_8]
.text:0000473E                 push    edx             ; void *
.text:0000473F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004744                 add     esp, 4
.text:00004747                 add     esp, 8
.text:0000474A                 cmp     ebp, esp
.text:0000474C                 call    __RTC_CheckEsp
.text:00004751                 mov     esp, ebp
.text:00004753                 pop     ebp
.text:00004754                 retn
.text:00004754 ??1UString@@QAE@XZ endp
.text:00004754
.text:00004754 ; ---------------------------------------------------------------------------
.text:00004755                 align 4
.text:00004755 _text           ends
.text:00004755
.text:00004758 ; ===========================================================================
.text:00004758
.text:00004758 ; Segment type: Pure code
.text:00004758 ; Segment permissions: Read/Execute
.text:00004758 _text           segment para public 'CODE' use32
.text:00004758                 assume cs:_text
.text:00004758                 ;org 4758h
.text:00004758 ; COMDAT (pick any)
.text:00004758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004758
.text:00004758 ; =============== S U B R O U T I N E =======================================
.text:00004758
.text:00004758 ; Attributes: bp-based frame
.text:00004758
.text:00004758 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00004758                 public ?IsEmpty@AString@@QBE_NXZ
.text:00004758 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+220p
.text:00004758                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+259p
.text:00004758
.text:00004758 var_4           = dword ptr -4
.text:00004758
.text:00004758                 push    ebp
.text:00004759                 mov     ebp, esp
.text:0000475B                 push    ecx
.text:0000475C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004763                 mov     [ebp+var_4], ecx
.text:00004766                 mov     eax, [ebp+var_4]
.text:00004769                 xor     ecx, ecx
.text:0000476B                 cmp     dword ptr [eax+4], 0
.text:0000476F                 setz    cl
.text:00004772                 mov     al, cl
.text:00004774                 mov     esp, ebp
.text:00004776                 pop     ebp
.text:00004777                 retn
.text:00004777 ?IsEmpty@AString@@QBE_NXZ endp
.text:00004777
.text:00004777 _text           ends
.text:00004777
.text:00004778 ; ===========================================================================
.text:00004778
.text:00004778 ; Segment type: Pure code
.text:00004778 ; Segment permissions: Read/Execute
.text:00004778 _text           segment para public 'CODE' use32
.text:00004778                 assume cs:_text
.text:00004778                 ;org 4778h
.text:00004778 ; COMDAT (pick any)
.text:00004778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004778
.text:00004778 ; =============== S U B R O U T I N E =======================================
.text:00004778
.text:00004778 ; Attributes: bp-based frame
.text:00004778
.text:00004778 ; unsigned __int64 __thiscall NArchive::NTar::CItem::GetUnpackSize(NArchive::NTar::CItem *__hidden this)
.text:00004778                 public ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ
.text:00004778 ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ proc near
.text:00004778                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+146p
.text:00004778                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+161p ...
.text:00004778
.text:00004778 var_C           = dword ptr -0Ch
.text:00004778 var_8           = dword ptr -8
.text:00004778 var_4           = dword ptr -4
.text:00004778
.text:00004778                 push    ebp
.text:00004779                 mov     ebp, esp
.text:0000477B                 sub     esp, 0Ch
.text:0000477E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004785                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000478C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004793                 mov     [ebp+var_4], ecx
.text:00004796                 mov     ecx, [ebp+var_4] ; this
.text:00004799                 call    ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsSymLink(void)
.text:0000479E                 movzx   eax, al
.text:000047A1                 test    eax, eax
.text:000047A3                 jz      short loc_47BA
.text:000047A5                 mov     ecx, [ebp+var_4]
.text:000047A8                 add     ecx, 3Ch ; '<'  ; this
.text:000047AB                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:000047B0                 xor     ecx, ecx
.text:000047B2                 mov     [ebp+var_C], eax
.text:000047B5                 mov     [ebp+var_8], ecx
.text:000047B8                 jmp     short loc_47C9
.text:000047BA ; ---------------------------------------------------------------------------
.text:000047BA
.text:000047BA loc_47BA:                               ; CODE XREF: NArchive::NTar::CItem::GetUnpackSize(void)+2Bj
.text:000047BA                 mov     edx, [ebp+var_4]
.text:000047BD                 mov     eax, [edx+18h]
.text:000047C0                 mov     [ebp+var_C], eax
.text:000047C3                 mov     ecx, [edx+1Ch]
.text:000047C6                 mov     [ebp+var_8], ecx
.text:000047C9
.text:000047C9 loc_47C9:                               ; CODE XREF: NArchive::NTar::CItem::GetUnpackSize(void)+40j
.text:000047C9                 mov     eax, [ebp+var_C]
.text:000047CC                 mov     edx, [ebp+var_8]
.text:000047CF                 add     esp, 0Ch
.text:000047D2                 cmp     ebp, esp
.text:000047D4                 call    __RTC_CheckEsp
.text:000047D9                 mov     esp, ebp
.text:000047DB                 pop     ebp
.text:000047DC                 retn
.text:000047DC ?GetUnpackSize@CItem@NTar@NArchive@@QBE_KXZ endp
.text:000047DC
.text:000047DC ; ---------------------------------------------------------------------------
.text:000047DD                 align 10h
.text:000047DD _text           ends
.text:000047DD
.text:000047E0 ; ===========================================================================
.text:000047E0
.text:000047E0 ; Segment type: Pure code
.text:000047E0 ; Segment permissions: Read/Execute
.text:000047E0 _text           segment para public 'CODE' use32
.text:000047E0                 assume cs:_text
.text:000047E0                 ;org 47E0h
.text:000047E0 ; COMDAT (pick any)
.text:000047E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047E0
.text:000047E0 ; =============== S U B R O U T I N E =======================================
.text:000047E0
.text:000047E0 ; Attributes: bp-based frame
.text:000047E0
.text:000047E0 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:000047E0                 public ?Len@AString@@QBEIXZ
.text:000047E0 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+96Ep
.text:000047E0                                         ; NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1D6p ...
.text:000047E0
.text:000047E0 var_4           = dword ptr -4
.text:000047E0
.text:000047E0                 push    ebp
.text:000047E1                 mov     ebp, esp
.text:000047E3                 push    ecx
.text:000047E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047EB                 mov     [ebp+var_4], ecx
.text:000047EE                 mov     eax, [ebp+var_4]
.text:000047F1                 mov     eax, [eax+4]
.text:000047F4                 mov     esp, ebp
.text:000047F6                 pop     ebp
.text:000047F7                 retn
.text:000047F7 ?Len@AString@@QBEIXZ endp
.text:000047F7
.text:000047F7 _text           ends
.text:000047F7
.text:000047F8 ; ===========================================================================
.text:000047F8
.text:000047F8 ; Segment type: Pure code
.text:000047F8 ; Segment permissions: Read/Execute
.text:000047F8 _text           segment para public 'CODE' use32
.text:000047F8                 assume cs:_text
.text:000047F8                 ;org 47F8h
.text:000047F8 ; COMDAT (pick any)
.text:000047F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047F8
.text:000047F8 ; =============== S U B R O U T I N E =======================================
.text:000047F8
.text:000047F8 ; Attributes: bp-based frame
.text:000047F8
.text:000047F8 ; bool __thiscall NArchive::NTar::CItem::IsSymLink(NArchive::NTar::CItem *__hidden this)
.text:000047F8                 public ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ
.text:000047F8 ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:000047F8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+94Ep
.text:000047F8                                         ; NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1C0p ...
.text:000047F8
.text:000047F8 var_C           = dword ptr -0Ch
.text:000047F8 var_8           = dword ptr -8
.text:000047F8 var_4           = dword ptr -4
.text:000047F8
.text:000047F8                 push    ebp
.text:000047F9                 mov     ebp, esp
.text:000047FB                 sub     esp, 0Ch
.text:000047FE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00004805                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000480C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004813                 mov     [ebp+var_4], ecx
.text:00004816                 mov     eax, [ebp+var_4]
.text:00004819                 movsx   ecx, byte ptr [eax+68h]
.text:0000481D                 cmp     ecx, 32h ; '2'
.text:00004820                 jnz     short loc_483F
.text:00004822                 mov     edx, [ebp+var_4]
.text:00004825                 mov     [ebp+var_8], edx
.text:00004828                 mov     eax, [ebp+var_8]
.text:0000482B                 mov     ecx, [ebp+var_8]
.text:0000482E                 mov     edx, [eax+18h]
.text:00004831                 or      edx, [ecx+1Ch]
.text:00004834                 jnz     short loc_483F
.text:00004836                 mov     [ebp+var_C], 1
.text:0000483D                 jmp     short loc_4846
.text:0000483F ; ---------------------------------------------------------------------------
.text:0000483F
.text:0000483F loc_483F:                               ; CODE XREF: NArchive::NTar::CItem::IsSymLink(void)+28j
.text:0000483F                                         ; NArchive::NTar::CItem::IsSymLink(void)+3Cj
.text:0000483F                 mov     [ebp+var_C], 0
.text:00004846
.text:00004846 loc_4846:                               ; CODE XREF: NArchive::NTar::CItem::IsSymLink(void)+45j
.text:00004846                 mov     al, byte ptr [ebp+var_C]
.text:00004849                 mov     esp, ebp
.text:0000484B                 pop     ebp
.text:0000484C                 retn
.text:0000484C ?IsSymLink@CItem@NTar@NArchive@@QBE_NXZ endp
.text:0000484C
.text:0000484C ; ---------------------------------------------------------------------------
.text:0000484D                 align 10h
.text:0000484D _text           ends
.text:0000484D
.text:00004850 ; ===========================================================================
.text:00004850
.text:00004850 ; Segment type: Pure code
.text:00004850 ; Segment permissions: Read/Execute
.text:00004850 _text           segment para public 'CODE' use32
.text:00004850                 assume cs:_text
.text:00004850                 ;org 4850h
.text:00004850 ; COMDAT (pick any)
.text:00004850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004850
.text:00004850 ; =============== S U B R O U T I N E =======================================
.text:00004850
.text:00004850 ; Attributes: bp-based frame
.text:00004850
.text:00004850 ; bool __thiscall NArchive::NTar::CItem::IsDir(NArchive::NTar::CItem *__hidden this)
.text:00004850                 public ?IsDir@CItem@NTar@NArchive@@QBE_NXZ
.text:00004850 ?IsDir@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:00004850                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+129p
.text:00004850                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5F5p
.text:00004850
.text:00004850 var_8           = dword ptr -8
.text:00004850 var_4           = dword ptr -4
.text:00004850
.text:00004850                 push    ebp
.text:00004851                 mov     ebp, esp
.text:00004853                 sub     esp, 8
.text:00004856                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000485D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004864                 mov     [ebp+var_4], ecx
.text:00004867                 mov     eax, [ebp+var_4]
.text:0000486A                 movsx   ecx, byte ptr [eax+68h]
.text:0000486E                 mov     [ebp+var_8], ecx
.text:00004871                 cmp     [ebp+var_8], 44h ; 'D' ; switch 69 cases
.text:00004875                 ja      short $LN3      ; jumptable 00004881 default case
.text:00004877                 mov     edx, [ebp+var_8]
.text:0000487A                 movzx   eax, ds:$LN7_2[edx]
.text:00004881                 jmp     ds:$LN8_0[eax*4] ; switch jump
.text:00004888 ; ---------------------------------------------------------------------------
.text:00004888
.text:00004888 $LN2_0:                                 ; CODE XREF: NArchive::NTar::CItem::IsDir(void)+31j
.text:00004888                                         ; DATA XREF: .text:$LN8_0o
.text:00004888                 mov     al, 1           ; jumptable 00004881 cases 53,68
.text:0000488A                 jmp     short loc_489B
.text:0000488C ; ---------------------------------------------------------------------------
.text:0000488C
.text:0000488C $LN1:                                   ; CODE XREF: NArchive::NTar::CItem::IsDir(void)+31j
.text:0000488C                                         ; DATA XREF: .text:$LN8_0o
.text:0000488C                 push    offset unk_1    ; jumptable 00004881 cases 0,48,50
.text:0000488E                 mov     ecx, [ebp+var_4]
.text:00004891                 push    ecx             ; this
.text:00004892                 call    ?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z ; NArchive::NItemName::HasTailSlash(AString const &,uint)
.text:00004897                 jmp     short loc_489B
.text:00004899 ; ---------------------------------------------------------------------------
.text:00004899
.text:00004899 $LN3:                                   ; CODE XREF: NArchive::NTar::CItem::IsDir(void)+25j
.text:00004899                                         ; NArchive::NTar::CItem::IsDir(void)+31j
.text:00004899                                         ; DATA XREF: ...
.text:00004899                 xor     al, al          ; jumptable 00004881 default case
.text:0000489B
.text:0000489B loc_489B:                               ; CODE XREF: NArchive::NTar::CItem::IsDir(void)+3Aj
.text:0000489B                                         ; NArchive::NTar::CItem::IsDir(void)+47j
.text:0000489B                 add     esp, 8
.text:0000489E                 cmp     ebp, esp
.text:000048A0                 call    __RTC_CheckEsp
.text:000048A5                 mov     esp, ebp
.text:000048A7                 pop     ebp
.text:000048A8                 retn
.text:000048A8 ?IsDir@CItem@NTar@NArchive@@QBE_NXZ endp ; sp-analysis failed
.text:000048A8
.text:000048A8 ; ---------------------------------------------------------------------------
.text:000048A9                 align 4
.text:000048AC $LN8_0          dd offset $LN1, offset $LN2_0, offset $LN3
.text:000048AC                                         ; DATA XREF: NArchive::NTar::CItem::IsDir(void)+31r
.text:000048AC                                         ; jump table for switch statement
.text:000048B8 $LN7_2          db      0,     2,     2,     2
.text:000048B8                                         ; DATA XREF: NArchive::NTar::CItem::IsDir(void)+2Ar
.text:000048B8                 db      2,     2,     2,     2 ; indirect table for switch statement
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      0,     2,     0,     2
.text:000048B8                 db      2,     1,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      2,     2,     2,     2
.text:000048B8                 db      1
.text:000048FD                 align 10h
.text:000048FD _text           ends
.text:000048FD
.text:00004900 ; ===========================================================================
.text:00004900
.text:00004900 ; Segment type: Pure code
.text:00004900 ; Segment permissions: Read/Execute
.text:00004900 _text           segment para public 'CODE' use32
.text:00004900                 assume cs:_text
.text:00004900                 ;org 4900h
.text:00004900 ; COMDAT (pick any)
.text:00004900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004900
.text:00004900 ; =============== S U B R O U T I N E =======================================
.text:00004900
.text:00004900 ; Attributes: bp-based frame
.text:00004900
.text:00004900 ; void __thiscall CLimitedSequentialInStream::SetStream(CLimitedSequentialInStream *this, struct ISequentialInStream *)
.text:00004900                 public ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
.text:00004900 ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z proc near
.text:00004900                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2D0p
.text:00004900
.text:00004900 var_4           = dword ptr -4
.text:00004900 arg_0           = dword ptr  8
.text:00004900
.text:00004900                 push    ebp
.text:00004901                 mov     ebp, esp
.text:00004903                 push    ecx
.text:00004904                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000490B                 mov     [ebp+var_4], ecx
.text:0000490E                 mov     eax, [ebp+arg_0]
.text:00004911                 push    eax
.text:00004912                 mov     ecx, [ebp+var_4]
.text:00004915                 add     ecx, 8
.text:00004918                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:0000491D                 add     esp, 4
.text:00004920                 cmp     ebp, esp
.text:00004922                 call    __RTC_CheckEsp
.text:00004927                 mov     esp, ebp
.text:00004929                 pop     ebp
.text:0000492A                 retn    4
.text:0000492A ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z endp
.text:0000492A
.text:0000492A ; ---------------------------------------------------------------------------
.text:0000492D                 align 10h
.text:0000492D _text           ends
.text:0000492D
.text:00004930 ; ===========================================================================
.text:00004930
.text:00004930 ; Segment type: Pure code
.text:00004930 ; Segment permissions: Read/Execute
.text:00004930 _text           segment para public 'CODE' use32
.text:00004930                 assume cs:_text
.text:00004930                 ;org 4930h
.text:00004930 ; COMDAT (pick any)
.text:00004930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004930
.text:00004930 ; =============== S U B R O U T I N E =======================================
.text:00004930
.text:00004930 ; Attributes: bp-based frame
.text:00004930
.text:00004930 ; void __thiscall CLimitedSequentialInStream::Init(CLimitedSequentialInStream *this, unsigned __int64)
.text:00004930                 public ?Init@CLimitedSequentialInStream@@QAEX_K@Z
.text:00004930 ?Init@CLimitedSequentialInStream@@QAEX_K@Z proc near
.text:00004930                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B0Dp
.text:00004930
.text:00004930 var_4           = dword ptr -4
.text:00004930 arg_0           = qword ptr  8
.text:00004930
.text:00004930                 push    ebp
.text:00004931                 mov     ebp, esp
.text:00004933                 push    ecx
.text:00004934                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000493B                 mov     [ebp+var_4], ecx
.text:0000493E                 mov     eax, [ebp+var_4]
.text:00004941                 mov     ecx, dword ptr [ebp+arg_0]
.text:00004944                 mov     [eax+10h], ecx
.text:00004947                 mov     edx, dword ptr [ebp+arg_0+4]
.text:0000494A                 mov     [eax+14h], edx
.text:0000494D                 mov     eax, [ebp+var_4]
.text:00004950                 mov     dword ptr [eax+18h], 0
.text:00004957                 mov     dword ptr [eax+1Ch], 0
.text:0000495E                 mov     ecx, [ebp+var_4]
.text:00004961                 mov     byte ptr [ecx+20h], 0
.text:00004965                 mov     esp, ebp
.text:00004967                 pop     ebp
.text:00004968                 retn    8
.text:00004968 ?Init@CLimitedSequentialInStream@@QAEX_K@Z endp
.text:00004968
.text:00004968 ; ---------------------------------------------------------------------------
.text:0000496B                 align 4
.text:0000496B _text           ends
.text:0000496B
.text:0000496C ; ===========================================================================
.text:0000496C
.text:0000496C ; Segment type: Pure code
.text:0000496C ; Segment permissions: Read/Execute
.text:0000496C _text           segment para public 'CODE' use32
.text:0000496C                 assume cs:_text
.text:0000496C                 ;org 496Ch
.text:0000496C ; COMDAT (pick any)
.text:0000496C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000496C
.text:0000496C ; =============== S U B R O U T I N E =======================================
.text:0000496C
.text:0000496C ; Attributes: bp-based frame
.text:0000496C
.text:0000496C ; void __thiscall CLimitedSequentialOutStream::SetStream(CLimitedSequentialOutStream *this, struct ISequentialOutStream *)
.text:0000496C                 public ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z
.text:0000496C ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000496C                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7FAp
.text:0000496C
.text:0000496C var_4           = dword ptr -4
.text:0000496C arg_0           = dword ptr  8
.text:0000496C
.text:0000496C                 push    ebp
.text:0000496D                 mov     ebp, esp
.text:0000496F                 push    ecx
.text:00004970                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004977                 mov     [ebp+var_4], ecx
.text:0000497A                 mov     eax, [ebp+arg_0]
.text:0000497D                 push    eax
.text:0000497E                 mov     ecx, [ebp+var_4]
.text:00004981                 add     ecx, 8
.text:00004984                 call    ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)
.text:00004989                 add     esp, 4
.text:0000498C                 cmp     ebp, esp
.text:0000498E                 call    __RTC_CheckEsp
.text:00004993                 mov     esp, ebp
.text:00004995                 pop     ebp
.text:00004996                 retn    4
.text:00004996 ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z endp
.text:00004996
.text:00004996 ; ---------------------------------------------------------------------------
.text:00004999                 align 4
.text:00004999 _text           ends
.text:00004999
.text:0000499C ; ===========================================================================
.text:0000499C
.text:0000499C ; Segment type: Pure code
.text:0000499C ; Segment permissions: Read/Execute
.text:0000499C _text           segment para public 'CODE' use32
.text:0000499C                 assume cs:_text
.text:0000499C                 ;org 499Ch
.text:0000499C ; COMDAT (pick any)
.text:0000499C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000499C
.text:0000499C ; =============== S U B R O U T I N E =======================================
.text:0000499C
.text:0000499C ; Attributes: bp-based frame
.text:0000499C
.text:0000499C ; void __thiscall CLimitedSequentialOutStream::ReleaseStream(CLimitedSequentialOutStream *__hidden this)
.text:0000499C                 public ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ
.text:0000499C ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ proc near
.text:0000499C                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C53p
.text:0000499C
.text:0000499C var_4           = dword ptr -4
.text:0000499C
.text:0000499C                 push    ebp
.text:0000499D                 mov     ebp, esp
.text:0000499F                 push    ecx
.text:000049A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049A7                 mov     [ebp+var_4], ecx
.text:000049AA                 mov     ecx, [ebp+var_4]
.text:000049AD                 add     ecx, 8
.text:000049B0                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:000049B5                 add     esp, 4
.text:000049B8                 cmp     ebp, esp
.text:000049BA                 call    __RTC_CheckEsp
.text:000049BF                 mov     esp, ebp
.text:000049C1                 pop     ebp
.text:000049C2                 retn
.text:000049C2 ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ endp
.text:000049C2
.text:000049C2 ; ---------------------------------------------------------------------------
.text:000049C3                 align 4
.text:000049C3 _text           ends
.text:000049C3
.text:000049C4 ; ===========================================================================
.text:000049C4
.text:000049C4 ; Segment type: Pure code
.text:000049C4 ; Segment permissions: Read/Execute
.text:000049C4 _text           segment para public 'CODE' use32
.text:000049C4                 assume cs:_text
.text:000049C4                 ;org 49C4h
.text:000049C4 ; COMDAT (pick any)
.text:000049C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049C4
.text:000049C4 ; =============== S U B R O U T I N E =======================================
.text:000049C4
.text:000049C4 ; Attributes: bp-based frame
.text:000049C4
.text:000049C4 ; void __thiscall CLimitedSequentialOutStream::Init(CLimitedSequentialOutStream *this, unsigned __int64, bool)
.text:000049C4                 public ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z
.text:000049C4 ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z proc near
.text:000049C4                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+853p
.text:000049C4
.text:000049C4 var_4           = dword ptr -4
.text:000049C4 arg_0           = qword ptr  8
.text:000049C4 arg_8           = byte ptr  10h
.text:000049C4
.text:000049C4                 push    ebp
.text:000049C5                 mov     ebp, esp
.text:000049C7                 push    ecx
.text:000049C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049CF                 mov     [ebp+var_4], ecx
.text:000049D2                 mov     eax, [ebp+var_4]
.text:000049D5                 mov     ecx, dword ptr [ebp+arg_0]
.text:000049D8                 mov     [eax+10h], ecx
.text:000049DB                 mov     edx, dword ptr [ebp+arg_0+4]
.text:000049DE                 mov     [eax+14h], edx
.text:000049E1                 mov     eax, [ebp+var_4]
.text:000049E4                 mov     byte ptr [eax+18h], 0
.text:000049E8                 mov     ecx, [ebp+var_4]
.text:000049EB                 mov     dl, [ebp+arg_8]
.text:000049EE                 mov     [ecx+19h], dl
.text:000049F1                 mov     esp, ebp
.text:000049F3                 pop     ebp
.text:000049F4                 retn    0Ch
.text:000049F4 ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z endp
.text:000049F4
.text:000049F4 ; ---------------------------------------------------------------------------
.text:000049F7                 align 4
.text:000049F7 _text           ends
.text:000049F7
.text:000049F8 ; ===========================================================================
.text:000049F8
.text:000049F8 ; Segment type: Pure code
.text:000049F8 ; Segment permissions: Read/Execute
.text:000049F8 _text           segment para public 'CODE' use32
.text:000049F8                 assume cs:_text
.text:000049F8                 ;org 49F8h
.text:000049F8 ; COMDAT (pick any)
.text:000049F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049F8
.text:000049F8 ; =============== S U B R O U T I N E =======================================
.text:000049F8
.text:000049F8 ; Attributes: bp-based frame
.text:000049F8
.text:000049F8 ; unsigned __int64 __thiscall CLimitedSequentialOutStream::GetRem(CLimitedSequentialOutStream *__hidden this)
.text:000049F8                 public ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ
.text:000049F8 ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ proc near
.text:000049F8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+C09p
.text:000049F8
.text:000049F8 var_4           = dword ptr -4
.text:000049F8
.text:000049F8                 push    ebp
.text:000049F9                 mov     ebp, esp
.text:000049FB                 push    ecx
.text:000049FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A03                 mov     [ebp+var_4], ecx
.text:00004A06                 mov     ecx, [ebp+var_4]
.text:00004A09                 mov     eax, [ecx+10h]
.text:00004A0C                 mov     edx, [ecx+14h]
.text:00004A0F                 mov     esp, ebp
.text:00004A11                 pop     ebp
.text:00004A12                 retn
.text:00004A12 ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ endp
.text:00004A12
.text:00004A12 ; ---------------------------------------------------------------------------
.text:00004A13                 align 4
.text:00004A13 _text           ends
.text:00004A13
.text:00004A14 ; ===========================================================================
.text:00004A14
.text:00004A14 ; Segment type: Pure code
.text:00004A14 ; Segment permissions: Read/Execute
.text:00004A14 _text           segment para public 'CODE' use32
.text:00004A14                 assume cs:_text
.text:00004A14                 ;org 4A14h
.text:00004A14 ; COMDAT (pick any)
.text:00004A14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A14
.text:00004A14 ; =============== S U B R O U T I N E =======================================
.text:00004A14
.text:00004A14 ; Attributes: bp-based frame
.text:00004A14
.text:00004A14 ; bool __thiscall NArchive::NTar::CItem::IsSparse(NArchive::NTar::CItem *__hidden this)
.text:00004A14                 public ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ
.text:00004A14 ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:00004A14                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+87Ap
.text:00004A14                                         ; NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+60p
.text:00004A14
.text:00004A14 var_4           = dword ptr -4
.text:00004A14
.text:00004A14                 push    ebp
.text:00004A15                 mov     ebp, esp
.text:00004A17                 push    ecx
.text:00004A18                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A1F                 mov     [ebp+var_4], ecx
.text:00004A22                 mov     eax, [ebp+var_4]
.text:00004A25                 movsx   ecx, byte ptr [eax+68h]
.text:00004A29                 xor     eax, eax
.text:00004A2B                 cmp     ecx, 53h ; 'S'
.text:00004A2E                 setz    al
.text:00004A31                 mov     esp, ebp
.text:00004A33                 pop     ebp
.text:00004A34                 retn
.text:00004A34 ?IsSparse@CItem@NTar@NArchive@@QBE_NXZ endp
.text:00004A34
.text:00004A34 ; ---------------------------------------------------------------------------
.text:00004A35                 align 4
.text:00004A35 _text           ends
.text:00004A35
.text:00004A38 ; ===========================================================================
.text:00004A38
.text:00004A38 ; Segment type: Pure code
.text:00004A38 ; Segment permissions: Read/Execute
.text:00004A38 _text           segment para public 'CODE' use32
.text:00004A38                 assume cs:_text
.text:00004A38                 ;org 4A38h
.text:00004A38 ; COMDAT (pick any)
.text:00004A38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A38
.text:00004A38 ; =============== S U B R O U T I N E =======================================
.text:00004A38
.text:00004A38 ; Attributes: bp-based frame
.text:00004A38
.text:00004A38 ; unsigned __int64 __thiscall NArchive::NTar::CItemEx::GetDataPosition(NArchive::NTar::CItemEx *__hidden this)
.text:00004A38                 public ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ
.text:00004A38 ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ proc near
.text:00004A38                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A37p
.text:00004A38                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+275p ...
.text:00004A38
.text:00004A38 var_4           = dword ptr -4
.text:00004A38
.text:00004A38                 push    ebp
.text:00004A39                 mov     ebp, esp
.text:00004A3B                 push    ecx
.text:00004A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A43                 mov     [ebp+var_4], ecx
.text:00004A46                 mov     eax, [ebp+var_4]
.text:00004A49                 mov     eax, [eax+80h]
.text:00004A4F                 xor     edx, edx
.text:00004A51                 mov     ecx, [ebp+var_4]
.text:00004A54                 add     eax, [ecx+78h]
.text:00004A57                 adc     edx, [ecx+7Ch]
.text:00004A5A                 mov     esp, ebp
.text:00004A5C                 pop     ebp
.text:00004A5D                 retn
.text:00004A5D ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ endp
.text:00004A5D
.text:00004A5D ; ---------------------------------------------------------------------------
.text:00004A5E                 align 10h
.text:00004A5E _text           ends
.text:00004A5E
.text:00004A60 ; ===========================================================================
.text:00004A60
.text:00004A60 ; Segment type: Pure code
.text:00004A60 ; Segment permissions: Read/Execute
.text:00004A60 _text           segment para public 'CODE' use32
.text:00004A60                 assume cs:_text
.text:00004A60                 ;org 4A60h
.text:00004A60 ; COMDAT (pick any)
.text:00004A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A60
.text:00004A60 ; =============== S U B R O U T I N E =======================================
.text:00004A60
.text:00004A60 ; Attributes: bp-based frame
.text:00004A60
.text:00004A60 ; public: __thiscall CLimitedSequentialInStream::CLimitedSequentialInStream(void)
.text:00004A60                 public ??0CLimitedSequentialInStream@@QAE@XZ
.text:00004A60 ??0CLimitedSequentialInStream@@QAE@XZ proc near
.text:00004A60                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+27Dp
.text:00004A60
.text:00004A60 var_4           = dword ptr -4
.text:00004A60
.text:00004A60                 push    ebp
.text:00004A61                 mov     ebp, esp
.text:00004A63                 push    ecx
.text:00004A64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A6B                 mov     [ebp+var_4], ecx
.text:00004A6E                 mov     ecx, [ebp+var_4] ; this
.text:00004A71                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:00004A76                 mov     ecx, [ebp+var_4]
.text:00004A79                 add     ecx, 4          ; this
.text:00004A7C                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004A81                 mov     eax, [ebp+var_4]
.text:00004A84                 mov     dword ptr [eax], offset ??_7CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`vftable'
.text:00004A8A                 mov     ecx, [ebp+var_4]
.text:00004A8D                 add     ecx, 8
.text:00004A90                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00004A95                 mov     eax, [ebp+var_4]
.text:00004A98                 add     esp, 4
.text:00004A9B                 cmp     ebp, esp
.text:00004A9D                 call    __RTC_CheckEsp
.text:00004AA2                 mov     esp, ebp
.text:00004AA4                 pop     ebp
.text:00004AA5                 retn
.text:00004AA5 ??0CLimitedSequentialInStream@@QAE@XZ endp
.text:00004AA5
.text:00004AA5 ; ---------------------------------------------------------------------------
.text:00004AA6                 align 4
.text:00004AA6 _text           ends
.text:00004AA6
.rdata:00004AA8 ; ===========================================================================
.rdata:00004AA8
.rdata:00004AA8 ; Segment type: Pure data
.rdata:00004AA8 ; Segment permissions: Read
.rdata:00004AA8 _rdata          segment dword public 'DATA' use32
.rdata:00004AA8                 assume cs:_rdata
.rdata:00004AA8                 ;org 4AA8h
.rdata:00004AA8 ; COMDAT (pick largest)
.rdata:00004AA8                 dd offset ??_R4CLimitedSequentialInStream@@6B@ ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata:00004AAC                 public ??_7CLimitedSequentialInStream@@6B@
.rdata:00004AAC ; const CLimitedSequentialInStream::`vftable'
.rdata:00004AAC ??_7CLimitedSequentialInStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004AAC                                         ; DATA XREF: CLimitedSequentialInStream::CLimitedSequentialInStream(void)+24o
.rdata:00004AAC                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)
.rdata:00004AB0                 dd offset ?AddRef@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::AddRef(void)
.rdata:00004AB4                 dd offset ?Release@CLimitedSequentialInStream@@UAGKXZ ; CLimitedSequentialInStream::Release(void)
.rdata:00004AB8                 dd offset ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ; CLimitedSequentialInStream::Read(void *,uint,uint *)
.rdata:00004AB8 _rdata          ends
.rdata:00004AB8
.rdata$r:00004ABC ; ===========================================================================
.rdata$r:00004ABC
.rdata$r:00004ABC ; Segment type: Pure data
.rdata$r:00004ABC ; Segment permissions: Read
.rdata$r:00004ABC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004ABC                 assume cs:_rdata$r
.rdata$r:00004ABC                 ;org 4ABCh
.rdata$r:00004ABC ; COMDAT (pick any)
.rdata$r:00004ABC                 public ??_R4CLimitedSequentialInStream@@6B@
.rdata$r:00004ABC ; const CLimitedSequentialInStream::`RTTI Complete Object Locator'
.rdata$r:00004ABC ??_R4CLimitedSequentialInStream@@6B@ db    0 ; DATA XREF: .rdata:00004AA8o
.rdata$r:00004ABD                 db    0
.rdata$r:00004ABE                 db    0
.rdata$r:00004ABF                 db    0
.rdata$r:00004AC0                 db    0
.rdata$r:00004AC1                 db    0
.rdata$r:00004AC2                 db    0
.rdata$r:00004AC3                 db    0
.rdata$r:00004AC4                 db    0
.rdata$r:00004AC5                 db    0
.rdata$r:00004AC6                 db    0
.rdata$r:00004AC7                 db    0
.rdata$r:00004AC8                 dd offset ??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00004ACC                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004ACC _rdata$r        ends
.rdata$r:00004ACC
.data:00004AD0 ; ===========================================================================
.data:00004AD0
.data:00004AD0 ; Segment type: Pure data
.data:00004AD0 ; Segment permissions: Read/Write
.data:00004AD0 _data           segment dword public 'DATA' use32
.data:00004AD0                 assume cs:_data
.data:00004AD0                 ;org 4AD0h
.data:00004AD0 ; COMDAT (pick any)
.data:00004AD0                 public ??_R0?AVCLimitedSequentialInStream@@@8
.data:00004AD0 ; class CLimitedSequentialInStream `RTTI Type Descriptor'
.data:00004AD0 ??_R0?AVCLimitedSequentialInStream@@@8 dd offset ??_7type_info@@6B@
.data:00004AD0                                         ; DATA XREF: .rdata$r:00004AC8o
.data:00004AD0                                         ; .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004AD0                                         ; const type_info::`vftable'
.data:00004AD4                 align 8
.data:00004AD8 a_?avclimitedse db '.?AVCLimitedSequentialInStream@@',0
.data:00004AF9                 align 4
.data:00004AF9 _data           ends
.data:00004AF9
.rdata$r:00004AFC ; ===========================================================================
.rdata$r:00004AFC
.rdata$r:00004AFC ; Segment type: Pure data
.rdata$r:00004AFC ; Segment permissions: Read
.rdata$r:00004AFC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004AFC                 assume cs:_rdata$r
.rdata$r:00004AFC                 ;org 4AFCh
.rdata$r:00004AFC ; COMDAT (pick any)
.rdata$r:00004AFC                 public ??_R3CLimitedSequentialInStream@@8
.rdata$r:00004AFC ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004AFC ??_R3CLimitedSequentialInStream@@8 db    0 ; DATA XREF: .rdata$r:00004ACCo
.rdata$r:00004AFC                                         ; .rdata$r:00004B38o
.rdata$r:00004AFD                 db    0
.rdata$r:00004AFE                 db    0
.rdata$r:00004AFF                 db    0
.rdata$r:00004B00                 db    1
.rdata$r:00004B01                 db    0
.rdata$r:00004B02                 db    0
.rdata$r:00004B03                 db    0
.rdata$r:00004B04                 db    4
.rdata$r:00004B05                 db    0
.rdata$r:00004B06                 db    0
.rdata$r:00004B07                 db    0
.rdata$r:00004B08                 dd offset ??_R2CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00004B08 _rdata$r        ends
.rdata$r:00004B08
.rdata$r:00004B0C ; ===========================================================================
.rdata$r:00004B0C
.rdata$r:00004B0C ; Segment type: Pure data
.rdata$r:00004B0C ; Segment permissions: Read
.rdata$r:00004B0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B0C                 assume cs:_rdata$r
.rdata$r:00004B0C                 ;org 4B0Ch
.rdata$r:00004B0C ; COMDAT (pick any)
.rdata$r:00004B0C                 public ??_R2CLimitedSequentialInStream@@8
.rdata$r:00004B0C ; CLimitedSequentialInStream::`RTTI Base Class Array'
.rdata$r:00004B0C ??_R2CLimitedSequentialInStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00004B0C                                         ; DATA XREF: .rdata$r:00004B08o
.rdata$r:00004B0C                                         ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B10                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B14                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004B18                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004B1C                 db    0
.rdata$r:00004B1D                 align 10h
.rdata$r:00004B1D _rdata$r        ends
.rdata$r:00004B1D
.rdata$r:00004B20 ; ===========================================================================
.rdata$r:00004B20
.rdata$r:00004B20 ; Segment type: Pure data
.rdata$r:00004B20 ; Segment permissions: Read
.rdata$r:00004B20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B20                 assume cs:_rdata$r
.rdata$r:00004B20                 ;org 4B20h
.rdata$r:00004B20 ; COMDAT (pick any)
.rdata$r:00004B20                 public ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
.rdata$r:00004B20 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004B20 ??_R1A@?0A@EA@CLimitedSequentialInStream@@8 dd offset ??_R0?AVCLimitedSequentialInStream@@@8
.rdata$r:00004B20                                         ; DATA XREF: .rdata$r:CLimitedSequentialInStream::`RTTI Base Class Array'o
.rdata$r:00004B20                                         ; CLimitedSequentialInStream `RTTI Type Descriptor'
.rdata$r:00004B24                 db    3
.rdata$r:00004B25                 db    0
.rdata$r:00004B26                 db    0
.rdata$r:00004B27                 db    0
.rdata$r:00004B28                 db    0
.rdata$r:00004B29                 db    0
.rdata$r:00004B2A                 db    0
.rdata$r:00004B2B                 db    0
.rdata$r:00004B2C                 db 0FFh
.rdata$r:00004B2D                 db 0FFh
.rdata$r:00004B2E                 db 0FFh
.rdata$r:00004B2F                 db 0FFh
.rdata$r:00004B30                 db    0
.rdata$r:00004B31                 db    0
.rdata$r:00004B32                 db    0
.rdata$r:00004B33                 db    0
.rdata$r:00004B34                 db  40h ; @
.rdata$r:00004B35                 db    0
.rdata$r:00004B36                 db    0
.rdata$r:00004B37                 db    0
.rdata$r:00004B38                 dd offset ??_R3CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B38 _rdata$r        ends
.rdata$r:00004B38
.rdata$r:00004B3C ; ===========================================================================
.rdata$r:00004B3C
.rdata$r:00004B3C ; Segment type: Pure data
.rdata$r:00004B3C ; Segment permissions: Read
.rdata$r:00004B3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004B3C                 assume cs:_rdata$r
.rdata$r:00004B3C                 ;org 4B3Ch
.rdata$r:00004B3C ; COMDAT (pick any)
.rdata$r:00004B3C                 public ??_R13?0A@EA@CMyUnknownImp@@8
.rdata$r:00004B3C ; CMyUnknownImp::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00004B3C ??_R13?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00004B3C                                         ; DATA XREF: .rdata$r:00004B18o
.rdata$r:00004B3C                                         ; .rdata$r:00004D80o ...
.rdata$r:00004B3C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00004B40                 db    0
.rdata$r:00004B41                 db    0
.rdata$r:00004B42                 db    0
.rdata$r:00004B43                 db    0
.rdata$r:00004B44                 db    4
.rdata$r:00004B45                 db    0
.rdata$r:00004B46                 db    0
.rdata$r:00004B47                 db    0
.rdata$r:00004B48                 db 0FFh
.rdata$r:00004B49                 db 0FFh
.rdata$r:00004B4A                 db 0FFh
.rdata$r:00004B4B                 db 0FFh
.rdata$r:00004B4C                 db    0
.rdata$r:00004B4D                 db    0
.rdata$r:00004B4E                 db    0
.rdata$r:00004B4F                 db    0
.rdata$r:00004B50                 db  40h ; @
.rdata$r:00004B51                 db    0
.rdata$r:00004B52                 db    0
.rdata$r:00004B53                 db    0
.rdata$r:00004B54                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004B54 _rdata$r        ends
.rdata$r:00004B54
.text:00004B58 ; ===========================================================================
.text:00004B58
.text:00004B58 ; Segment type: Pure code
.text:00004B58 ; Segment permissions: Read/Execute
.text:00004B58 _text           segment para public 'CODE' use32
.text:00004B58                 assume cs:_text
.text:00004B58                 ;org 4B58h
.text:00004B58 ; COMDAT (pick any)
.text:00004B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B58
.text:00004B58 ; =============== S U B R O U T I N E =======================================
.text:00004B58
.text:00004B58 ; Attributes: bp-based frame
.text:00004B58
.text:00004B58 ; __int32 __stdcall CLimitedSequentialInStream::QueryInterface(CLimitedSequentialInStream *this, const struct _GUID *Buf1, void **)
.text:00004B58                 public ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
.text:00004B58 ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004B58                                         ; DATA XREF: .rdata:const CLimitedSequentialInStream::`vftable'o
.text:00004B58
.text:00004B58 this            = dword ptr  8
.text:00004B58 Buf1            = dword ptr  0Ch
.text:00004B58 arg_8           = dword ptr  10h
.text:00004B58
.text:00004B58                 push    ebp
.text:00004B59                 mov     ebp, esp
.text:00004B5B                 mov     eax, [ebp+arg_8]
.text:00004B5E                 mov     dword ptr [eax], 0
.text:00004B64                 push    offset _IID_IUnknown ; Buf2
.text:00004B69                 mov     ecx, [ebp+Buf1]
.text:00004B6C                 push    ecx             ; Buf1
.text:00004B6D                 call    ___@8           ; __(x,x)
.text:00004B72                 test    eax, eax
.text:00004B74                 jz      short loc_4B80
.text:00004B76                 mov     edx, [ebp+arg_8]
.text:00004B79                 mov     eax, [ebp+this]
.text:00004B7C                 mov     [edx], eax
.text:00004B7E                 jmp     short loc_4BA3
.text:00004B80 ; ---------------------------------------------------------------------------
.text:00004B80
.text:00004B80 loc_4B80:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004B80                 push    offset _IID_ISequentialInStream ; Buf2
.text:00004B85                 mov     ecx, [ebp+Buf1]
.text:00004B88                 push    ecx             ; Buf1
.text:00004B89                 call    ___@8           ; __(x,x)
.text:00004B8E                 test    eax, eax
.text:00004B90                 jz      short loc_4B9C
.text:00004B92                 mov     edx, [ebp+arg_8]
.text:00004B95                 mov     eax, [ebp+this]
.text:00004B98                 mov     [edx], eax
.text:00004B9A                 jmp     short loc_4BA3
.text:00004B9C ; ---------------------------------------------------------------------------
.text:00004B9C
.text:00004B9C loc_4B9C:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+38j
.text:00004B9C                 mov     eax, 80004002h
.text:00004BA1                 jmp     short loc_4BB4
.text:00004BA3 ; ---------------------------------------------------------------------------
.text:00004BA3
.text:00004BA3 loc_4BA3:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+26j
.text:00004BA3                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+42j
.text:00004BA3                 mov     ecx, [ebp+this]
.text:00004BA6                 mov     edx, [ecx+4]
.text:00004BA9                 add     edx, 1
.text:00004BAC                 mov     eax, [ebp+this]
.text:00004BAF                 mov     [eax+4], edx
.text:00004BB2                 xor     eax, eax
.text:00004BB4
.text:00004BB4 loc_4BB4:                               ; CODE XREF: CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *)+49j
.text:00004BB4                 cmp     ebp, esp
.text:00004BB6                 call    __RTC_CheckEsp
.text:00004BBB                 pop     ebp
.text:00004BBC                 retn    0Ch
.text:00004BBC ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004BBC
.text:00004BBC ; ---------------------------------------------------------------------------
.text:00004BBF                 align 10h
.text:00004BBF _text           ends
.text:00004BBF
.text:00004BC0 ; ===========================================================================
.text:00004BC0
.text:00004BC0 ; Segment type: Pure code
.text:00004BC0 ; Segment permissions: Read/Execute
.text:00004BC0 _text           segment para public 'CODE' use32
.text:00004BC0                 assume cs:_text
.text:00004BC0                 ;org 4BC0h
.text:00004BC0 ; COMDAT (pick any)
.text:00004BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BC0
.text:00004BC0 ; =============== S U B R O U T I N E =======================================
.text:00004BC0
.text:00004BC0 ; Attributes: bp-based frame
.text:00004BC0
.text:00004BC0 ; unsigned __int32 __stdcall CLimitedSequentialInStream::AddRef(CLimitedSequentialInStream *this)
.text:00004BC0                 public ?AddRef@CLimitedSequentialInStream@@UAGKXZ
.text:00004BC0 ?AddRef@CLimitedSequentialInStream@@UAGKXZ proc near
.text:00004BC0                                         ; DATA XREF: .rdata:00004AB0o
.text:00004BC0
.text:00004BC0 var_4           = dword ptr -4
.text:00004BC0 this            = dword ptr  8
.text:00004BC0
.text:00004BC0                 push    ebp
.text:00004BC1                 mov     ebp, esp
.text:00004BC3                 push    ecx
.text:00004BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BCB                 mov     eax, [ebp+this]
.text:00004BCE                 mov     ecx, [eax+4]
.text:00004BD1                 add     ecx, 1
.text:00004BD4                 mov     [ebp+var_4], ecx
.text:00004BD7                 mov     edx, [ebp+this]
.text:00004BDA                 mov     eax, [ebp+var_4]
.text:00004BDD                 mov     [edx+4], eax
.text:00004BE0                 mov     eax, [ebp+var_4]
.text:00004BE3                 mov     esp, ebp
.text:00004BE5                 pop     ebp
.text:00004BE6                 retn    4
.text:00004BE6 ?AddRef@CLimitedSequentialInStream@@UAGKXZ endp
.text:00004BE6
.text:00004BE6 ; ---------------------------------------------------------------------------
.text:00004BE9                 align 4
.text:00004BE9 _text           ends
.text:00004BE9
.text:00004BEC ; ===========================================================================
.text:00004BEC
.text:00004BEC ; Segment type: Pure code
.text:00004BEC ; Segment permissions: Read/Execute
.text:00004BEC _text           segment para public 'CODE' use32
.text:00004BEC                 assume cs:_text
.text:00004BEC                 ;org 4BECh
.text:00004BEC ; COMDAT (pick any)
.text:00004BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BEC
.text:00004BEC ; =============== S U B R O U T I N E =======================================
.text:00004BEC
.text:00004BEC ; Attributes: bp-based frame
.text:00004BEC
.text:00004BEC ; unsigned __int32 __stdcall CLimitedSequentialInStream::Release(CLimitedSequentialInStream *this)
.text:00004BEC                 public ?Release@CLimitedSequentialInStream@@UAGKXZ
.text:00004BEC ?Release@CLimitedSequentialInStream@@UAGKXZ proc near
.text:00004BEC                                         ; DATA XREF: .rdata:00004AB4o
.text:00004BEC
.text:00004BEC var_10          = dword ptr -10h
.text:00004BEC var_C           = dword ptr -0Ch
.text:00004BEC var_8           = dword ptr -8
.text:00004BEC var_4           = dword ptr -4
.text:00004BEC this            = dword ptr  8
.text:00004BEC
.text:00004BEC                 push    ebp
.text:00004BED                 mov     ebp, esp
.text:00004BEF                 sub     esp, 10h
.text:00004BF2                 mov     eax, 0CCCCCCCCh
.text:00004BF7                 mov     [ebp+var_10], eax
.text:00004BFA                 mov     [ebp+var_C], eax
.text:00004BFD                 mov     [ebp+var_8], eax
.text:00004C00                 mov     [ebp+var_4], eax
.text:00004C03                 mov     eax, [ebp+this]
.text:00004C06                 mov     ecx, [eax+4]
.text:00004C09                 sub     ecx, 1
.text:00004C0C                 mov     [ebp+var_C], ecx
.text:00004C0F                 mov     edx, [ebp+this]
.text:00004C12                 mov     eax, [ebp+var_C]
.text:00004C15                 mov     [edx+4], eax
.text:00004C18                 cmp     [ebp+var_C], 0
.text:00004C1C                 jz      short loc_4C26
.text:00004C1E                 mov     ecx, [ebp+this]
.text:00004C21                 mov     eax, [ecx+4]
.text:00004C24                 jmp     short loc_4C50
.text:00004C26 ; ---------------------------------------------------------------------------
.text:00004C26
.text:00004C26 loc_4C26:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+30j
.text:00004C26                 mov     edx, [ebp+this]
.text:00004C29                 mov     [ebp+var_8], edx
.text:00004C2C                 mov     eax, [ebp+var_8]
.text:00004C2F                 mov     [ebp+var_4], eax
.text:00004C32                 cmp     [ebp+var_4], 0
.text:00004C36                 jz      short loc_4C47
.text:00004C38                 push    1
.text:00004C3A                 mov     ecx, [ebp+var_4]
.text:00004C3D                 call    ??_GCLimitedSequentialInStream@@QAEPAXI@Z ; CLimitedSequentialInStream::`scalar deleting destructor'(uint)
.text:00004C42                 mov     [ebp+var_10], eax
.text:00004C45                 jmp     short loc_4C4E
.text:00004C47 ; ---------------------------------------------------------------------------
.text:00004C47
.text:00004C47 loc_4C47:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+4Aj
.text:00004C47                 mov     [ebp+var_10], 0
.text:00004C4E
.text:00004C4E loc_4C4E:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+59j
.text:00004C4E                 xor     eax, eax
.text:00004C50
.text:00004C50 loc_4C50:                               ; CODE XREF: CLimitedSequentialInStream::Release(void)+38j
.text:00004C50                 add     esp, 10h
.text:00004C53                 cmp     ebp, esp
.text:00004C55                 call    __RTC_CheckEsp
.text:00004C5A                 mov     esp, ebp
.text:00004C5C                 pop     ebp
.text:00004C5D                 retn    4
.text:00004C5D ?Release@CLimitedSequentialInStream@@UAGKXZ endp
.text:00004C5D
.text:00004C5D _text           ends
.text:00004C5D
.text:00004C60 ; ===========================================================================
.text:00004C60
.text:00004C60 ; Segment type: Pure code
.text:00004C60 ; Segment permissions: Read/Execute
.text:00004C60 _text           segment para public 'CODE' use32
.text:00004C60                 assume cs:_text
.text:00004C60                 ;org 4C60h
.text:00004C60 ; COMDAT (pick any)
.text:00004C60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C60
.text:00004C60 ; =============== S U B R O U T I N E =======================================
.text:00004C60
.text:00004C60 ; Attributes: bp-based frame
.text:00004C60
.text:00004C60 ; public: void * __thiscall CLimitedSequentialInStream::`scalar deleting destructor'(unsigned int)
.text:00004C60                 public ??_GCLimitedSequentialInStream@@QAEPAXI@Z
.text:00004C60 ??_GCLimitedSequentialInStream@@QAEPAXI@Z proc near
.text:00004C60                                         ; CODE XREF: CLimitedSequentialInStream::Release(void)+51p
.text:00004C60
.text:00004C60 var_4           = dword ptr -4
.text:00004C60 arg_0           = dword ptr  8
.text:00004C60
.text:00004C60                 push    ebp
.text:00004C61                 mov     ebp, esp
.text:00004C63                 push    ecx
.text:00004C64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C6B                 mov     [ebp+var_4], ecx
.text:00004C6E                 mov     ecx, [ebp+var_4] ; this
.text:00004C71                 call    ??1CLimitedSequentialInStream@@QAE@XZ ; CLimitedSequentialInStream::~CLimitedSequentialInStream(void)
.text:00004C76                 mov     eax, [ebp+arg_0]
.text:00004C79                 and     eax, 1
.text:00004C7C                 jz      short loc_4C8A
.text:00004C7E                 mov     ecx, [ebp+var_4]
.text:00004C81                 push    ecx             ; void *
.text:00004C82                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004C87                 add     esp, 4
.text:00004C8A
.text:00004C8A loc_4C8A:                               ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+1Cj
.text:00004C8A                 mov     eax, [ebp+var_4]
.text:00004C8D                 add     esp, 4
.text:00004C90                 cmp     ebp, esp
.text:00004C92                 call    __RTC_CheckEsp
.text:00004C97                 mov     esp, ebp
.text:00004C99                 pop     ebp
.text:00004C9A                 retn    4
.text:00004C9A ??_GCLimitedSequentialInStream@@QAEPAXI@Z endp
.text:00004C9A
.text:00004C9A ; ---------------------------------------------------------------------------
.text:00004C9D                 align 10h
.text:00004C9D _text           ends
.text:00004C9D
.text:00004CA0 ; ===========================================================================
.text:00004CA0
.text:00004CA0 ; Segment type: Pure code
.text:00004CA0 ; Segment permissions: Read/Execute
.text:00004CA0 _text           segment para public 'CODE' use32
.text:00004CA0                 assume cs:_text
.text:00004CA0                 ;org 4CA0h
.text:00004CA0 ; COMDAT (pick any)
.text:00004CA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CA0
.text:00004CA0 ; =============== S U B R O U T I N E =======================================
.text:00004CA0
.text:00004CA0 ; Attributes: bp-based frame
.text:00004CA0
.text:00004CA0 ; _DWORD __thiscall CLimitedSequentialInStream::~CLimitedSequentialInStream(CLimitedSequentialInStream *__hidden this)
.text:00004CA0                 public ??1CLimitedSequentialInStream@@QAE@XZ
.text:00004CA0 ??1CLimitedSequentialInStream@@QAE@XZ proc near
.text:00004CA0                                         ; CODE XREF: CLimitedSequentialInStream::`scalar deleting destructor'(uint)+11p
.text:00004CA0
.text:00004CA0 var_4           = dword ptr -4
.text:00004CA0
.text:00004CA0                 push    ebp
.text:00004CA1                 mov     ebp, esp
.text:00004CA3                 push    ecx
.text:00004CA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CAB                 mov     [ebp+var_4], ecx
.text:00004CAE                 mov     ecx, [ebp+var_4]
.text:00004CB1                 add     ecx, 8
.text:00004CB4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004CB9                 add     esp, 4
.text:00004CBC                 cmp     ebp, esp
.text:00004CBE                 call    __RTC_CheckEsp
.text:00004CC3                 mov     esp, ebp
.text:00004CC5                 pop     ebp
.text:00004CC6                 retn
.text:00004CC6 ??1CLimitedSequentialInStream@@QAE@XZ endp
.text:00004CC6
.text:00004CC6 ; ---------------------------------------------------------------------------
.text:00004CC7                 align 4
.text:00004CC7 _text           ends
.text:00004CC7
.text:00004CC8 ; ===========================================================================
.text:00004CC8
.text:00004CC8 ; Segment type: Pure code
.text:00004CC8 ; Segment permissions: Read/Execute
.text:00004CC8 _text           segment para public 'CODE' use32
.text:00004CC8                 assume cs:_text
.text:00004CC8                 ;org 4CC8h
.text:00004CC8 ; COMDAT (pick any)
.text:00004CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CC8
.text:00004CC8 ; =============== S U B R O U T I N E =======================================
.text:00004CC8
.text:00004CC8 ; Attributes: bp-based frame
.text:00004CC8
.text:00004CC8 ; public: __thiscall CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)
.text:00004CC8                 public ??0CLimitedSequentialOutStream@@QAE@XZ
.text:00004CC8 ??0CLimitedSequentialOutStream@@QAE@XZ proc near
.text:00004CC8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+304p
.text:00004CC8
.text:00004CC8 var_4           = dword ptr -4
.text:00004CC8
.text:00004CC8                 push    ebp
.text:00004CC9                 mov     ebp, esp
.text:00004CCB                 push    ecx
.text:00004CCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CD3                 mov     [ebp+var_4], ecx
.text:00004CD6                 mov     ecx, [ebp+var_4] ; this
.text:00004CD9                 call    ??0ISequentialOutStream@@QAE@XZ ; ISequentialOutStream::ISequentialOutStream(void)
.text:00004CDE                 mov     ecx, [ebp+var_4]
.text:00004CE1                 add     ecx, 4          ; this
.text:00004CE4                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00004CE9                 mov     eax, [ebp+var_4]
.text:00004CEC                 mov     dword ptr [eax], offset ??_7CLimitedSequentialOutStream@@6B@ ; const CLimitedSequentialOutStream::`vftable'
.text:00004CF2                 mov     ecx, [ebp+var_4]
.text:00004CF5                 add     ecx, 8
.text:00004CF8                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00004CFD                 mov     eax, [ebp+var_4]
.text:00004D00                 add     esp, 4
.text:00004D03                 cmp     ebp, esp
.text:00004D05                 call    __RTC_CheckEsp
.text:00004D0A                 mov     esp, ebp
.text:00004D0C                 pop     ebp
.text:00004D0D                 retn
.text:00004D0D ??0CLimitedSequentialOutStream@@QAE@XZ endp
.text:00004D0D
.text:00004D0D ; ---------------------------------------------------------------------------
.text:00004D0E                 align 10h
.text:00004D0E _text           ends
.text:00004D0E
.rdata:00004D10 ; ===========================================================================
.rdata:00004D10
.rdata:00004D10 ; Segment type: Pure data
.rdata:00004D10 ; Segment permissions: Read
.rdata:00004D10 _rdata          segment dword public 'DATA' use32
.rdata:00004D10                 assume cs:_rdata
.rdata:00004D10                 ;org 4D10h
.rdata:00004D10 ; COMDAT (pick largest)
.rdata:00004D10                 dd offset ??_R4CLimitedSequentialOutStream@@6B@ ; const CLimitedSequentialOutStream::`RTTI Complete Object Locator'
.rdata:00004D14                 public ??_7CLimitedSequentialOutStream@@6B@
.rdata:00004D14 ; const CLimitedSequentialOutStream::`vftable'
.rdata:00004D14 ??_7CLimitedSequentialOutStream@@6B@ dd offset ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
.rdata:00004D14                                         ; DATA XREF: CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+24o
.rdata:00004D14                                         ; CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)
.rdata:00004D18                 dd offset ?AddRef@CLimitedSequentialOutStream@@UAGKXZ ; CLimitedSequentialOutStream::AddRef(void)
.rdata:00004D1C                 dd offset ?Release@CLimitedSequentialOutStream@@UAGKXZ ; CLimitedSequentialOutStream::Release(void)
.rdata:00004D20                 dd offset ?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z ; CLimitedSequentialOutStream::Write(void const *,uint,uint *)
.rdata:00004D20 _rdata          ends
.rdata:00004D20
.rdata$r:00004D24 ; ===========================================================================
.rdata$r:00004D24
.rdata$r:00004D24 ; Segment type: Pure data
.rdata$r:00004D24 ; Segment permissions: Read
.rdata$r:00004D24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D24                 assume cs:_rdata$r
.rdata$r:00004D24                 ;org 4D24h
.rdata$r:00004D24 ; COMDAT (pick any)
.rdata$r:00004D24                 public ??_R4CLimitedSequentialOutStream@@6B@
.rdata$r:00004D24 ; const CLimitedSequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00004D24 ??_R4CLimitedSequentialOutStream@@6B@ db    0
.rdata$r:00004D24                                         ; DATA XREF: .rdata:00004D10o
.rdata$r:00004D25                 db    0
.rdata$r:00004D26                 db    0
.rdata$r:00004D27                 db    0
.rdata$r:00004D28                 db    0
.rdata$r:00004D29                 db    0
.rdata$r:00004D2A                 db    0
.rdata$r:00004D2B                 db    0
.rdata$r:00004D2C                 db    0
.rdata$r:00004D2D                 db    0
.rdata$r:00004D2E                 db    0
.rdata$r:00004D2F                 db    0
.rdata$r:00004D30                 dd offset ??_R0?AVCLimitedSequentialOutStream@@@8 ; CLimitedSequentialOutStream `RTTI Type Descriptor'
.rdata$r:00004D34                 dd offset ??_R3CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004D34 _rdata$r        ends
.rdata$r:00004D34
.data:00004D38 ; ===========================================================================
.data:00004D38
.data:00004D38 ; Segment type: Pure data
.data:00004D38 ; Segment permissions: Read/Write
.data:00004D38 _data           segment dword public 'DATA' use32
.data:00004D38                 assume cs:_data
.data:00004D38                 ;org 4D38h
.data:00004D38 ; COMDAT (pick any)
.data:00004D38                 public ??_R0?AVCLimitedSequentialOutStream@@@8
.data:00004D38 ; class CLimitedSequentialOutStream `RTTI Type Descriptor'
.data:00004D38 ??_R0?AVCLimitedSequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00004D38                                         ; DATA XREF: .rdata$r:00004D30o
.data:00004D38                                         ; .rdata$r:CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004D38                                         ; const type_info::`vftable'
.data:00004D3C                 align 10h
.data:00004D40 a_?avclimited_0 db '.?AVCLimitedSequentialOutStream@@',0
.data:00004D62                 align 4
.data:00004D62 _data           ends
.data:00004D62
.rdata$r:00004D64 ; ===========================================================================
.rdata$r:00004D64
.rdata$r:00004D64 ; Segment type: Pure data
.rdata$r:00004D64 ; Segment permissions: Read
.rdata$r:00004D64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D64                 assume cs:_rdata$r
.rdata$r:00004D64                 ;org 4D64h
.rdata$r:00004D64 ; COMDAT (pick any)
.rdata$r:00004D64                 public ??_R3CLimitedSequentialOutStream@@8
.rdata$r:00004D64 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004D64 ??_R3CLimitedSequentialOutStream@@8 db    0
.rdata$r:00004D64                                         ; DATA XREF: .rdata$r:00004D34o
.rdata$r:00004D64                                         ; .rdata$r:00004DA0o
.rdata$r:00004D65                 db    0
.rdata$r:00004D66                 db    0
.rdata$r:00004D67                 db    0
.rdata$r:00004D68                 db    1
.rdata$r:00004D69                 db    0
.rdata$r:00004D6A                 db    0
.rdata$r:00004D6B                 db    0
.rdata$r:00004D6C                 db    4
.rdata$r:00004D6D                 db    0
.rdata$r:00004D6E                 db    0
.rdata$r:00004D6F                 db    0
.rdata$r:00004D70                 dd offset ??_R2CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004D70 _rdata$r        ends
.rdata$r:00004D70
.rdata$r:00004D74 ; ===========================================================================
.rdata$r:00004D74
.rdata$r:00004D74 ; Segment type: Pure data
.rdata$r:00004D74 ; Segment permissions: Read
.rdata$r:00004D74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D74                 assume cs:_rdata$r
.rdata$r:00004D74                 ;org 4D74h
.rdata$r:00004D74 ; COMDAT (pick any)
.rdata$r:00004D74                 public ??_R2CLimitedSequentialOutStream@@8
.rdata$r:00004D74 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004D74 ??_R2CLimitedSequentialOutStream@@8 dd offset ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
.rdata$r:00004D74                                         ; DATA XREF: .rdata$r:00004D70o
.rdata$r:00004D74                                         ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004D78                 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004D7C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004D80                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00004D84                 db    0
.rdata$r:00004D85                 align 4
.rdata$r:00004D85 _rdata$r        ends
.rdata$r:00004D85
.rdata$r:00004D88 ; ===========================================================================
.rdata$r:00004D88
.rdata$r:00004D88 ; Segment type: Pure data
.rdata$r:00004D88 ; Segment permissions: Read
.rdata$r:00004D88 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004D88                 assume cs:_rdata$r
.rdata$r:00004D88                 ;org 4D88h
.rdata$r:00004D88 ; COMDAT (pick any)
.rdata$r:00004D88                 public ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
.rdata$r:00004D88 ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004D88 ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 dd offset ??_R0?AVCLimitedSequentialOutStream@@@8
.rdata$r:00004D88                                         ; DATA XREF: .rdata$r:CLimitedSequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00004D88                                         ; CLimitedSequentialOutStream `RTTI Type Descriptor'
.rdata$r:00004D8C                 db    3
.rdata$r:00004D8D                 db    0
.rdata$r:00004D8E                 db    0
.rdata$r:00004D8F                 db    0
.rdata$r:00004D90                 db    0
.rdata$r:00004D91                 db    0
.rdata$r:00004D92                 db    0
.rdata$r:00004D93                 db    0
.rdata$r:00004D94                 db 0FFh
.rdata$r:00004D95                 db 0FFh
.rdata$r:00004D96                 db 0FFh
.rdata$r:00004D97                 db 0FFh
.rdata$r:00004D98                 db    0
.rdata$r:00004D99                 db    0
.rdata$r:00004D9A                 db    0
.rdata$r:00004D9B                 db    0
.rdata$r:00004D9C                 db  40h ; @
.rdata$r:00004D9D                 db    0
.rdata$r:00004D9E                 db    0
.rdata$r:00004D9F                 db    0
.rdata$r:00004DA0                 dd offset ??_R3CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004DA0 _rdata$r        ends
.rdata$r:00004DA0
.rdata$r:00004DA4 ; ===========================================================================
.rdata$r:00004DA4
.rdata$r:00004DA4 ; Segment type: Pure data
.rdata$r:00004DA4 ; Segment permissions: Read
.rdata$r:00004DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004DA4                 assume cs:_rdata$r
.rdata$r:00004DA4                 ;org 4DA4h
.rdata$r:00004DA4 ; COMDAT (pick any)
.rdata$r:00004DA4                 public ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00004DA4 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004DA4 ??_R1A@?0A@EA@ISequentialOutStream@@8 dd offset ??_R0?AUISequentialOutStream@@@8
.rdata$r:00004DA4                                         ; DATA XREF: .rdata$r:00004D78o
.rdata$r:00004DA4                                         ; .rdata$r:ISequentialOutStream::`RTTI Base Class Array'o
.rdata$r:00004DA4                                         ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00004DA8                 db    1
.rdata$r:00004DA9                 db    0
.rdata$r:00004DAA                 db    0
.rdata$r:00004DAB                 db    0
.rdata$r:00004DAC                 db    0
.rdata$r:00004DAD                 db    0
.rdata$r:00004DAE                 db    0
.rdata$r:00004DAF                 db    0
.rdata$r:00004DB0                 db 0FFh
.rdata$r:00004DB1                 db 0FFh
.rdata$r:00004DB2                 db 0FFh
.rdata$r:00004DB3                 db 0FFh
.rdata$r:00004DB4                 db    0
.rdata$r:00004DB5                 db    0
.rdata$r:00004DB6                 db    0
.rdata$r:00004DB7                 db    0
.rdata$r:00004DB8                 db  40h ; @
.rdata$r:00004DB9                 db    0
.rdata$r:00004DBA                 db    0
.rdata$r:00004DBB                 db    0
.rdata$r:00004DBC                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004DBC _rdata$r        ends
.rdata$r:00004DBC
.data:00004DC0 ; ===========================================================================
.data:00004DC0
.data:00004DC0 ; Segment type: Pure data
.data:00004DC0 ; Segment permissions: Read/Write
.data:00004DC0 _data           segment dword public 'DATA' use32
.data:00004DC0                 assume cs:_data
.data:00004DC0                 ;org 4DC0h
.data:00004DC0 ; COMDAT (pick any)
.data:00004DC0                 public ??_R0?AUISequentialOutStream@@@8
.data:00004DC0 ; struct ISequentialOutStream `RTTI Type Descriptor'
.data:00004DC0 ??_R0?AUISequentialOutStream@@@8 dd offset ??_7type_info@@6B@
.data:00004DC0                                         ; DATA XREF: .rdata$r:ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00004DC0                                         ; .rdata$r:00004FC0o
.data:00004DC0                                         ; const type_info::`vftable'
.data:00004DC4                 align 8
.data:00004DC8 a_?auisequent_0 db '.?AUISequentialOutStream@@',0
.data:00004DE3                 align 4
.data:00004DE3 _data           ends
.data:00004DE3
.rdata$r:00004DE4 ; ===========================================================================
.rdata$r:00004DE4
.rdata$r:00004DE4 ; Segment type: Pure data
.rdata$r:00004DE4 ; Segment permissions: Read
.rdata$r:00004DE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004DE4                 assume cs:_rdata$r
.rdata$r:00004DE4                 ;org 4DE4h
.rdata$r:00004DE4 ; COMDAT (pick any)
.rdata$r:00004DE4                 public ??_R3ISequentialOutStream@@8
.rdata$r:00004DE4 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004DE4 ??_R3ISequentialOutStream@@8 db    0    ; DATA XREF: .rdata$r:00004DBCo
.rdata$r:00004DE4                                         ; .rdata$r:00004FC4o
.rdata$r:00004DE5                 db    0
.rdata$r:00004DE6                 db    0
.rdata$r:00004DE7                 db    0
.rdata$r:00004DE8                 db    0
.rdata$r:00004DE9                 db    0
.rdata$r:00004DEA                 db    0
.rdata$r:00004DEB                 db    0
.rdata$r:00004DEC                 db    2
.rdata$r:00004DED                 db    0
.rdata$r:00004DEE                 db    0
.rdata$r:00004DEF                 db    0
.rdata$r:00004DF0                 dd offset ??_R2ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004DF0 _rdata$r        ends
.rdata$r:00004DF0
.rdata$r:00004DF4 ; ===========================================================================
.rdata$r:00004DF4
.rdata$r:00004DF4 ; Segment type: Pure data
.rdata$r:00004DF4 ; Segment permissions: Read
.rdata$r:00004DF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004DF4                 assume cs:_rdata$r
.rdata$r:00004DF4                 ;org 4DF4h
.rdata$r:00004DF4 ; COMDAT (pick any)
.rdata$r:00004DF4                 public ??_R2ISequentialOutStream@@8
.rdata$r:00004DF4 ; ISequentialOutStream::`RTTI Base Class Array'
.rdata$r:00004DF4 ??_R2ISequentialOutStream@@8 dd offset ??_R1A@?0A@EA@ISequentialOutStream@@8
.rdata$r:00004DF4                                         ; DATA XREF: .rdata$r:00004DF0o
.rdata$r:00004DF4                                         ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004DF8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004DFC                 db    0
.rdata$r:00004DFD                 align 10h
.rdata$r:00004DFD _rdata$r        ends
.rdata$r:00004DFD
.text:00004E00 ; ===========================================================================
.text:00004E00
.text:00004E00 ; Segment type: Pure code
.text:00004E00 ; Segment permissions: Read/Execute
.text:00004E00 _text           segment para public 'CODE' use32
.text:00004E00                 assume cs:_text
.text:00004E00                 ;org 4E00h
.text:00004E00 ; COMDAT (pick any)
.text:00004E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E00
.text:00004E00 ; =============== S U B R O U T I N E =======================================
.text:00004E00
.text:00004E00 ; Attributes: bp-based frame
.text:00004E00
.text:00004E00 ; __int32 __stdcall CLimitedSequentialOutStream::QueryInterface(CLimitedSequentialOutStream *this, const struct _GUID *Buf1, void **)
.text:00004E00                 public ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
.text:00004E00 ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004E00                                         ; DATA XREF: .rdata:const CLimitedSequentialOutStream::`vftable'o
.text:00004E00
.text:00004E00 this            = dword ptr  8
.text:00004E00 Buf1            = dword ptr  0Ch
.text:00004E00 arg_8           = dword ptr  10h
.text:00004E00
.text:00004E00                 push    ebp
.text:00004E01                 mov     ebp, esp
.text:00004E03                 mov     eax, [ebp+arg_8]
.text:00004E06                 mov     dword ptr [eax], 0
.text:00004E0C                 push    offset _IID_IUnknown ; Buf2
.text:00004E11                 mov     ecx, [ebp+Buf1]
.text:00004E14                 push    ecx             ; Buf1
.text:00004E15                 call    ___@8           ; __(x,x)
.text:00004E1A                 test    eax, eax
.text:00004E1C                 jz      short loc_4E28
.text:00004E1E                 mov     edx, [ebp+arg_8]
.text:00004E21                 mov     eax, [ebp+this]
.text:00004E24                 mov     [edx], eax
.text:00004E26                 jmp     short loc_4E4B
.text:00004E28 ; ---------------------------------------------------------------------------
.text:00004E28
.text:00004E28 loc_4E28:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00004E28                 push    offset _IID_ISequentialOutStream ; Buf2
.text:00004E2D                 mov     ecx, [ebp+Buf1]
.text:00004E30                 push    ecx             ; Buf1
.text:00004E31                 call    ___@8           ; __(x,x)
.text:00004E36                 test    eax, eax
.text:00004E38                 jz      short loc_4E44
.text:00004E3A                 mov     edx, [ebp+arg_8]
.text:00004E3D                 mov     eax, [ebp+this]
.text:00004E40                 mov     [edx], eax
.text:00004E42                 jmp     short loc_4E4B
.text:00004E44 ; ---------------------------------------------------------------------------
.text:00004E44
.text:00004E44 loc_4E44:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+38j
.text:00004E44                 mov     eax, 80004002h
.text:00004E49                 jmp     short loc_4E5C
.text:00004E4B ; ---------------------------------------------------------------------------
.text:00004E4B
.text:00004E4B loc_4E4B:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+26j
.text:00004E4B                                         ; CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+42j
.text:00004E4B                 mov     ecx, [ebp+this]
.text:00004E4E                 mov     edx, [ecx+4]
.text:00004E51                 add     edx, 1
.text:00004E54                 mov     eax, [ebp+this]
.text:00004E57                 mov     [eax+4], edx
.text:00004E5A                 xor     eax, eax
.text:00004E5C
.text:00004E5C loc_4E5C:                               ; CODE XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *)+49j
.text:00004E5C                 cmp     ebp, esp
.text:00004E5E                 call    __RTC_CheckEsp
.text:00004E63                 pop     ebp
.text:00004E64                 retn    0Ch
.text:00004E64 ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z endp
.text:00004E64
.text:00004E64 ; ---------------------------------------------------------------------------
.text:00004E67                 align 4
.text:00004E67 _text           ends
.text:00004E67
.text:00004E68 ; ===========================================================================
.text:00004E68
.text:00004E68 ; Segment type: Pure code
.text:00004E68 ; Segment permissions: Read/Execute
.text:00004E68 _text           segment para public 'CODE' use32
.text:00004E68                 assume cs:_text
.text:00004E68                 ;org 4E68h
.text:00004E68 ; COMDAT (pick any)
.text:00004E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E68
.text:00004E68 ; =============== S U B R O U T I N E =======================================
.text:00004E68
.text:00004E68 ; Attributes: bp-based frame
.text:00004E68
.text:00004E68 ; unsigned __int32 __stdcall CLimitedSequentialOutStream::AddRef(CLimitedSequentialOutStream *this)
.text:00004E68                 public ?AddRef@CLimitedSequentialOutStream@@UAGKXZ
.text:00004E68 ?AddRef@CLimitedSequentialOutStream@@UAGKXZ proc near
.text:00004E68                                         ; DATA XREF: .rdata:00004D18o
.text:00004E68
.text:00004E68 var_4           = dword ptr -4
.text:00004E68 this            = dword ptr  8
.text:00004E68
.text:00004E68                 push    ebp
.text:00004E69                 mov     ebp, esp
.text:00004E6B                 push    ecx
.text:00004E6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E73                 mov     eax, [ebp+this]
.text:00004E76                 mov     ecx, [eax+4]
.text:00004E79                 add     ecx, 1
.text:00004E7C                 mov     [ebp+var_4], ecx
.text:00004E7F                 mov     edx, [ebp+this]
.text:00004E82                 mov     eax, [ebp+var_4]
.text:00004E85                 mov     [edx+4], eax
.text:00004E88                 mov     eax, [ebp+var_4]
.text:00004E8B                 mov     esp, ebp
.text:00004E8D                 pop     ebp
.text:00004E8E                 retn    4
.text:00004E8E ?AddRef@CLimitedSequentialOutStream@@UAGKXZ endp
.text:00004E8E
.text:00004E8E ; ---------------------------------------------------------------------------
.text:00004E91                 align 4
.text:00004E91 _text           ends
.text:00004E91
.text:00004E94 ; ===========================================================================
.text:00004E94
.text:00004E94 ; Segment type: Pure code
.text:00004E94 ; Segment permissions: Read/Execute
.text:00004E94 _text           segment para public 'CODE' use32
.text:00004E94                 assume cs:_text
.text:00004E94                 ;org 4E94h
.text:00004E94 ; COMDAT (pick any)
.text:00004E94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E94
.text:00004E94 ; =============== S U B R O U T I N E =======================================
.text:00004E94
.text:00004E94 ; Attributes: bp-based frame
.text:00004E94
.text:00004E94 ; unsigned __int32 __stdcall CLimitedSequentialOutStream::Release(CLimitedSequentialOutStream *this)
.text:00004E94                 public ?Release@CLimitedSequentialOutStream@@UAGKXZ
.text:00004E94 ?Release@CLimitedSequentialOutStream@@UAGKXZ proc near
.text:00004E94                                         ; DATA XREF: .rdata:00004D1Co
.text:00004E94
.text:00004E94 var_10          = dword ptr -10h
.text:00004E94 var_C           = dword ptr -0Ch
.text:00004E94 var_8           = dword ptr -8
.text:00004E94 var_4           = dword ptr -4
.text:00004E94 this            = dword ptr  8
.text:00004E94
.text:00004E94                 push    ebp
.text:00004E95                 mov     ebp, esp
.text:00004E97                 sub     esp, 10h
.text:00004E9A                 mov     eax, 0CCCCCCCCh
.text:00004E9F                 mov     [ebp+var_10], eax
.text:00004EA2                 mov     [ebp+var_C], eax
.text:00004EA5                 mov     [ebp+var_8], eax
.text:00004EA8                 mov     [ebp+var_4], eax
.text:00004EAB                 mov     eax, [ebp+this]
.text:00004EAE                 mov     ecx, [eax+4]
.text:00004EB1                 sub     ecx, 1
.text:00004EB4                 mov     [ebp+var_C], ecx
.text:00004EB7                 mov     edx, [ebp+this]
.text:00004EBA                 mov     eax, [ebp+var_C]
.text:00004EBD                 mov     [edx+4], eax
.text:00004EC0                 cmp     [ebp+var_C], 0
.text:00004EC4                 jz      short loc_4ECE
.text:00004EC6                 mov     ecx, [ebp+this]
.text:00004EC9                 mov     eax, [ecx+4]
.text:00004ECC                 jmp     short loc_4EF8
.text:00004ECE ; ---------------------------------------------------------------------------
.text:00004ECE
.text:00004ECE loc_4ECE:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+30j
.text:00004ECE                 mov     edx, [ebp+this]
.text:00004ED1                 mov     [ebp+var_8], edx
.text:00004ED4                 mov     eax, [ebp+var_8]
.text:00004ED7                 mov     [ebp+var_4], eax
.text:00004EDA                 cmp     [ebp+var_4], 0
.text:00004EDE                 jz      short loc_4EEF
.text:00004EE0                 push    1
.text:00004EE2                 mov     ecx, [ebp+var_4]
.text:00004EE5                 call    ??_GCLimitedSequentialOutStream@@QAEPAXI@Z ; CLimitedSequentialOutStream::`scalar deleting destructor'(uint)
.text:00004EEA                 mov     [ebp+var_10], eax
.text:00004EED                 jmp     short loc_4EF6
.text:00004EEF ; ---------------------------------------------------------------------------
.text:00004EEF
.text:00004EEF loc_4EEF:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+4Aj
.text:00004EEF                 mov     [ebp+var_10], 0
.text:00004EF6
.text:00004EF6 loc_4EF6:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+59j
.text:00004EF6                 xor     eax, eax
.text:00004EF8
.text:00004EF8 loc_4EF8:                               ; CODE XREF: CLimitedSequentialOutStream::Release(void)+38j
.text:00004EF8                 add     esp, 10h
.text:00004EFB                 cmp     ebp, esp
.text:00004EFD                 call    __RTC_CheckEsp
.text:00004F02                 mov     esp, ebp
.text:00004F04                 pop     ebp
.text:00004F05                 retn    4
.text:00004F05 ?Release@CLimitedSequentialOutStream@@UAGKXZ endp
.text:00004F05
.text:00004F05 _text           ends
.text:00004F05
.text:00004F08 ; ===========================================================================
.text:00004F08
.text:00004F08 ; Segment type: Pure code
.text:00004F08 ; Segment permissions: Read/Execute
.text:00004F08 _text           segment para public 'CODE' use32
.text:00004F08                 assume cs:_text
.text:00004F08                 ;org 4F08h
.text:00004F08 ; COMDAT (pick any)
.text:00004F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F08
.text:00004F08 ; =============== S U B R O U T I N E =======================================
.text:00004F08
.text:00004F08 ; Attributes: bp-based frame
.text:00004F08
.text:00004F08 ; public: void * __thiscall CLimitedSequentialOutStream::`scalar deleting destructor'(unsigned int)
.text:00004F08                 public ??_GCLimitedSequentialOutStream@@QAEPAXI@Z
.text:00004F08 ??_GCLimitedSequentialOutStream@@QAEPAXI@Z proc near
.text:00004F08                                         ; CODE XREF: CLimitedSequentialOutStream::Release(void)+51p
.text:00004F08
.text:00004F08 var_4           = dword ptr -4
.text:00004F08 arg_0           = dword ptr  8
.text:00004F08
.text:00004F08                 push    ebp
.text:00004F09                 mov     ebp, esp
.text:00004F0B                 push    ecx
.text:00004F0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F13                 mov     [ebp+var_4], ecx
.text:00004F16                 mov     ecx, [ebp+var_4] ; this
.text:00004F19                 call    ??1CLimitedSequentialOutStream@@QAE@XZ ; CLimitedSequentialOutStream::~CLimitedSequentialOutStream(void)
.text:00004F1E                 mov     eax, [ebp+arg_0]
.text:00004F21                 and     eax, 1
.text:00004F24                 jz      short loc_4F32
.text:00004F26                 mov     ecx, [ebp+var_4]
.text:00004F29                 push    ecx             ; void *
.text:00004F2A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00004F2F                 add     esp, 4
.text:00004F32
.text:00004F32 loc_4F32:                               ; CODE XREF: CLimitedSequentialOutStream::`scalar deleting destructor'(uint)+1Cj
.text:00004F32                 mov     eax, [ebp+var_4]
.text:00004F35                 add     esp, 4
.text:00004F38                 cmp     ebp, esp
.text:00004F3A                 call    __RTC_CheckEsp
.text:00004F3F                 mov     esp, ebp
.text:00004F41                 pop     ebp
.text:00004F42                 retn    4
.text:00004F42 ??_GCLimitedSequentialOutStream@@QAEPAXI@Z endp
.text:00004F42
.text:00004F42 ; ---------------------------------------------------------------------------
.text:00004F45                 align 4
.text:00004F45 _text           ends
.text:00004F45
.text:00004F48 ; ===========================================================================
.text:00004F48
.text:00004F48 ; Segment type: Pure code
.text:00004F48 ; Segment permissions: Read/Execute
.text:00004F48 _text           segment para public 'CODE' use32
.text:00004F48                 assume cs:_text
.text:00004F48                 ;org 4F48h
.text:00004F48 ; COMDAT (pick any)
.text:00004F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F48
.text:00004F48 ; =============== S U B R O U T I N E =======================================
.text:00004F48
.text:00004F48 ; Attributes: bp-based frame
.text:00004F48
.text:00004F48 ; _DWORD __thiscall CLimitedSequentialOutStream::~CLimitedSequentialOutStream(CLimitedSequentialOutStream *__hidden this)
.text:00004F48                 public ??1CLimitedSequentialOutStream@@QAE@XZ
.text:00004F48 ??1CLimitedSequentialOutStream@@QAE@XZ proc near
.text:00004F48                                         ; CODE XREF: CLimitedSequentialOutStream::`scalar deleting destructor'(uint)+11p
.text:00004F48
.text:00004F48 var_4           = dword ptr -4
.text:00004F48
.text:00004F48                 push    ebp
.text:00004F49                 mov     ebp, esp
.text:00004F4B                 push    ecx
.text:00004F4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F53                 mov     [ebp+var_4], ecx
.text:00004F56                 mov     ecx, [ebp+var_4]
.text:00004F59                 add     ecx, 8
.text:00004F5C                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00004F61                 add     esp, 4
.text:00004F64                 cmp     ebp, esp
.text:00004F66                 call    __RTC_CheckEsp
.text:00004F6B                 mov     esp, ebp
.text:00004F6D                 pop     ebp
.text:00004F6E                 retn
.text:00004F6E ??1CLimitedSequentialOutStream@@QAE@XZ endp
.text:00004F6E
.text:00004F6E ; ---------------------------------------------------------------------------
.text:00004F6F                 align 10h
.text:00004F6F _text           ends
.text:00004F6F
.text:00004F70 ; ===========================================================================
.text:00004F70
.text:00004F70 ; Segment type: Pure code
.text:00004F70 ; Segment permissions: Read/Execute
.text:00004F70 _text           segment para public 'CODE' use32
.text:00004F70                 assume cs:_text
.text:00004F70                 ;org 4F70h
.text:00004F70 ; COMDAT (pick any)
.text:00004F70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004F70
.text:00004F70 ; =============== S U B R O U T I N E =======================================
.text:00004F70
.text:00004F70 ; Attributes: bp-based frame
.text:00004F70
.text:00004F70 ; _DWORD __thiscall ISequentialOutStream::ISequentialOutStream(ISequentialOutStream *__hidden this)
.text:00004F70                 public ??0ISequentialOutStream@@QAE@XZ
.text:00004F70 ??0ISequentialOutStream@@QAE@XZ proc near
.text:00004F70                                         ; CODE XREF: CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+11p
.text:00004F70
.text:00004F70 var_4           = dword ptr -4
.text:00004F70
.text:00004F70                 push    ebp
.text:00004F71                 mov     ebp, esp
.text:00004F73                 push    ecx
.text:00004F74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004F7B                 mov     [ebp+var_4], ecx
.text:00004F7E                 mov     ecx, [ebp+var_4]
.text:00004F81                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004F86                 mov     eax, [ebp+var_4]
.text:00004F89                 mov     dword ptr [eax], offset ??_7ISequentialOutStream@@6B@ ; const ISequentialOutStream::`vftable'
.text:00004F8F                 mov     eax, [ebp+var_4]
.text:00004F92                 add     esp, 4
.text:00004F95                 cmp     ebp, esp
.text:00004F97                 call    __RTC_CheckEsp
.text:00004F9C                 mov     esp, ebp
.text:00004F9E                 pop     ebp
.text:00004F9F                 retn
.text:00004F9F ??0ISequentialOutStream@@QAE@XZ endp
.text:00004F9F
.text:00004F9F _text           ends
.text:00004F9F
.rdata:00004FA0 ; ===========================================================================
.rdata:00004FA0
.rdata:00004FA0 ; Segment type: Pure data
.rdata:00004FA0 ; Segment permissions: Read
.rdata:00004FA0 _rdata          segment dword public 'DATA' use32
.rdata:00004FA0                 assume cs:_rdata
.rdata:00004FA0                 ;org 4FA0h
.rdata:00004FA0 ; COMDAT (pick largest)
.rdata:00004FA0                 dd offset ??_R4ISequentialOutStream@@6B@ ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata:00004FA4                 public ??_7ISequentialOutStream@@6B@
.rdata:00004FA4 ; const ISequentialOutStream::`vftable'
.rdata:00004FA4 ??_7ISequentialOutStream@@6B@ dd offset __purecall
.rdata:00004FA4                                         ; DATA XREF: ISequentialOutStream::ISequentialOutStream(void)+19o
.rdata:00004FA8                 dd offset __purecall
.rdata:00004FAC                 dd offset __purecall
.rdata:00004FB0                 dd offset __purecall
.rdata:00004FB0 _rdata          ends
.rdata:00004FB0
.rdata$r:00004FB4 ; ===========================================================================
.rdata$r:00004FB4
.rdata$r:00004FB4 ; Segment type: Pure data
.rdata$r:00004FB4 ; Segment permissions: Read
.rdata$r:00004FB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004FB4                 assume cs:_rdata$r
.rdata$r:00004FB4                 ;org 4FB4h
.rdata$r:00004FB4 ; COMDAT (pick any)
.rdata$r:00004FB4                 public ??_R4ISequentialOutStream@@6B@
.rdata$r:00004FB4 ; const ISequentialOutStream::`RTTI Complete Object Locator'
.rdata$r:00004FB4 ??_R4ISequentialOutStream@@6B@ db    0  ; DATA XREF: .rdata:00004FA0o
.rdata$r:00004FB5                 db    0
.rdata$r:00004FB6                 db    0
.rdata$r:00004FB7                 db    0
.rdata$r:00004FB8                 db    0
.rdata$r:00004FB9                 db    0
.rdata$r:00004FBA                 db    0
.rdata$r:00004FBB                 db    0
.rdata$r:00004FBC                 db    0
.rdata$r:00004FBD                 db    0
.rdata$r:00004FBE                 db    0
.rdata$r:00004FBF                 db    0
.rdata$r:00004FC0                 dd offset ??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream `RTTI Type Descriptor'
.rdata$r:00004FC4                 dd offset ??_R3ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004FC4 _rdata$r        ends
.rdata$r:00004FC4
.text:00004FC8 ; ===========================================================================
.text:00004FC8
.text:00004FC8 ; Segment type: Pure code
.text:00004FC8 ; Segment permissions: Read/Execute
.text:00004FC8 _text           segment para public 'CODE' use32
.text:00004FC8                 assume cs:_text
.text:00004FC8                 ;org 4FC8h
.text:00004FC8 ; COMDAT (pick any)
.text:00004FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FC8
.text:00004FC8 ; =============== S U B R O U T I N E =======================================
.text:00004FC8
.text:00004FC8 ; Attributes: bp-based frame
.text:00004FC8
.text:00004FC8 ; void __thiscall NArchive::NTar::CSparseStream::Init(NArchive::NTar::CSparseStream *__hidden this)
.text:00004FC8                 public ?Init@CSparseStream@NTar@NArchive@@QAEXXZ
.text:00004FC8 ?Init@CSparseStream@NTar@NArchive@@QAEXXZ proc near
.text:00004FC8                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+CEp
.text:00004FC8
.text:00004FC8 var_4           = dword ptr -4
.text:00004FC8
.text:00004FC8                 push    ebp
.text:00004FC9                 mov     ebp, esp
.text:00004FCB                 push    ecx
.text:00004FCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FD3                 mov     [ebp+var_4], ecx
.text:00004FD6                 mov     eax, [ebp+var_4]
.text:00004FD9                 mov     dword ptr [eax+10h], 0
.text:00004FE0                 mov     dword ptr [eax+14h], 0
.text:00004FE7                 mov     ecx, [ebp+var_4]
.text:00004FEA                 mov     dword ptr [ecx+8], 0
.text:00004FF1                 mov     dword ptr [ecx+0Ch], 0
.text:00004FF8                 mov     edx, [ebp+var_4]
.text:00004FFB                 mov     byte ptr [edx+18h], 1
.text:00004FFF                 mov     esp, ebp
.text:00005001                 pop     ebp
.text:00005002                 retn
.text:00005002 ?Init@CSparseStream@NTar@NArchive@@QAEXXZ endp
.text:00005002
.text:00005002 ; ---------------------------------------------------------------------------
.text:00005003                 align 4
.text:00005003 _text           ends
.text:00005003
.text:00005004 ; ===========================================================================
.text:00005004
.text:00005004 ; Segment type: Pure code
.text:00005004 ; Segment permissions: Read/Execute
.text:00005004 _text           segment para public 'CODE' use32
.text:00005004                 assume cs:_text
.text:00005004                 ;org 5004h
.text:00005004 ; COMDAT (pick any)
.text:00005004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005004
.text:00005004 ; =============== S U B R O U T I N E =======================================
.text:00005004
.text:00005004 ; Attributes: bp-based frame
.text:00005004
.text:00005004 ; _DWORD __thiscall NArchive::NTar::CSparseStream::CSparseStream(NArchive::NTar::CSparseStream *__hidden this)
.text:00005004                 public ??0CSparseStream@NTar@NArchive@@QAE@XZ
.text:00005004 ??0CSparseStream@NTar@NArchive@@QAE@XZ proc near
.text:00005004                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+94p
.text:00005004
.text:00005004 var_10          = dword ptr -10h
.text:00005004 var_C           = dword ptr -0Ch
.text:00005004 var_4           = dword ptr -4
.text:00005004
.text:00005004                 push    ebp
.text:00005005                 mov     ebp, esp
.text:00005007                 push    0FFFFFFFFh
.text:00005009                 push    offset __ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ
.text:0000500E                 mov     eax, large fs:0
.text:00005014                 push    eax
.text:00005015                 push    ecx
.text:00005016                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000501D                 mov     eax, dword ptr ds:___security_cookie
.text:00005022                 xor     eax, ebp
.text:00005024                 push    eax
.text:00005025                 lea     eax, [ebp+var_C]
.text:00005028                 mov     large fs:0, eax
.text:0000502E                 mov     [ebp+var_10], ecx
.text:00005031                 mov     ecx, [ebp+var_10] ; this
.text:00005034                 call    ??0IInStream@@QAE@XZ ; IInStream::IInStream(void)
.text:00005039                 mov     ecx, [ebp+var_10]
.text:0000503C                 add     ecx, 4          ; this
.text:0000503F                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00005044                 mov     eax, [ebp+var_10]
.text:00005047                 mov     dword ptr [eax], offset ??_7CSparseStream@NTar@NArchive@@6B@ ; const NArchive::NTar::CSparseStream::`vftable'
.text:0000504D                 mov     ecx, [ebp+var_10]
.text:00005050                 add     ecx, 20h ; ' '
.text:00005053                 call    ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>(void)
.text:00005058                 mov     [ebp+var_4], 0
.text:0000505F                 mov     ecx, [ebp+var_10]
.text:00005062                 add     ecx, 28h ; '('
.text:00005065                 call    ??0?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:0000506A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005071                 mov     eax, [ebp+var_10]
.text:00005074                 mov     ecx, [ebp+var_C]
.text:00005077                 mov     large fs:0, ecx
.text:0000507E                 pop     ecx
.text:0000507F                 add     esp, 10h
.text:00005082                 cmp     ebp, esp
.text:00005084                 call    __RTC_CheckEsp
.text:00005089                 mov     esp, ebp
.text:0000508B                 pop     ebp
.text:0000508C                 retn
.text:0000508C ??0CSparseStream@NTar@NArchive@@QAE@XZ endp
.text:0000508C
.text:0000508C ; ---------------------------------------------------------------------------
.text:0000508D                 align 10h
.text:0000508D _text           ends
.text:0000508D
.text$x:00005090 ; ===========================================================================
.text$x:00005090
.text$x:00005090 ; Segment type: Pure code
.text$x:00005090 ; Segment permissions: Read/Execute
.text$x:00005090 _text$x         segment para public 'CODE' use32
.text$x:00005090                 assume cs:_text$x
.text$x:00005090                 ;org 5090h
.text$x:00005090 ; COMDAT (pick associative to section at 5004)
.text$x:00005090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005090
.text$x:00005090 ; =============== S U B R O U T I N E =======================================
.text$x:00005090
.text$x:00005090
.text$x:00005090 __unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:00005090                                         ; DATA XREF: .xdata$x:000050D4o
.text$x:00005090                 mov     ecx, [ebp-10h]
.text$x:00005093                 add     ecx, 20h ; ' '
.text$x:00005096                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:00005096 __unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0 endp
.text$x:00005096
.text$x:0000509B
.text$x:0000509B ; =============== S U B R O U T I N E =======================================
.text$x:0000509B
.text$x:0000509B
.text$x:0000509B __ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ proc near
.text$x:0000509B                                         ; DATA XREF: NArchive::NTar::CSparseStream::CSparseStream(void)+5o
.text$x:0000509B
.text$x:0000509B arg_4           = dword ptr  8
.text$x:0000509B
.text$x:0000509B                 mov     edx, [esp+arg_4]
.text$x:0000509F                 lea     eax, [edx+0Ch]
.text$x:000050A2                 mov     ecx, [edx-8]
.text$x:000050A5                 xor     ecx, eax
.text$x:000050A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050AC                 mov     eax, offset __ehfuncinfo$??0CSparseStream@NTar@NArchive@@QAE@XZ
.text$x:000050B1                 jmp     ___CxxFrameHandler3
.text$x:000050B1 __ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ endp
.text$x:000050B1
.text$x:000050B1 ; ---------------------------------------------------------------------------
.text$x:000050B6                 align 4
.text$x:000050B6 _text$x         ends
.text$x:000050B6
.rdata:000050B8 ; ===========================================================================
.rdata:000050B8
.rdata:000050B8 ; Segment type: Pure data
.rdata:000050B8 ; Segment permissions: Read
.rdata:000050B8 _rdata          segment dword public 'DATA' use32
.rdata:000050B8                 assume cs:_rdata
.rdata:000050B8                 ;org 50B8h
.rdata:000050B8 ; COMDAT (pick largest)
.rdata:000050B8                 dd offset ??_R4CSparseStream@NTar@NArchive@@6B@ ; const NArchive::NTar::CSparseStream::`RTTI Complete Object Locator'
.rdata:000050BC                 public ??_7CSparseStream@NTar@NArchive@@6B@
.rdata:000050BC ; const NArchive::NTar::CSparseStream::`vftable'
.rdata:000050BC ??_7CSparseStream@NTar@NArchive@@6B@ dd offset ?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:000050BC                                         ; DATA XREF: NArchive::NTar::CSparseStream::CSparseStream(void)+43o
.rdata:000050BC                                         ; NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)
.rdata:000050C0                 dd offset ?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CSparseStream::AddRef(void)
.rdata:000050C4                 dd offset ?Release@CSparseStream@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CSparseStream::Release(void)
.rdata:000050C8                 dd offset ?Read@CSparseStream@NTar@NArchive@@UAGJPAXIPAI@Z ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)
.rdata:000050CC                 dd offset ?Seek@CSparseStream@NTar@NArchive@@UAGJ_JIPA_K@Z ; NArchive::NTar::CSparseStream::Seek(__int64,uint,unsigned __int64 *)
.rdata:000050CC _rdata          ends
.rdata:000050CC
.xdata$x:000050D0 ; ===========================================================================
.xdata$x:000050D0
.xdata$x:000050D0 ; Segment type: Pure data
.xdata$x:000050D0 ; Segment permissions: Read
.xdata$x:000050D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000050D0                 assume cs:_xdata$x
.xdata$x:000050D0                 ;org 50D0h
.xdata$x:000050D0 ; COMDAT (pick associative to section at 5004)
.xdata$x:000050D0 __unwindtable$??0CSparseStream@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:000050D0                                         ; DATA XREF: .xdata$x:000050E0o
.xdata$x:000050D1                 db 0FFh
.xdata$x:000050D2                 db 0FFh
.xdata$x:000050D3                 db 0FFh
.xdata$x:000050D4                 dd offset __unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0
.xdata$x:000050D8 __ehfuncinfo$??0CSparseStream@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000050D8                                         ; DATA XREF: __ehhandler$??0CSparseStream@NTar@NArchive@@QAE@XZ+11o
.xdata$x:000050D9                 db    5
.xdata$x:000050DA                 db  93h ; ô
.xdata$x:000050DB                 db  19h
.xdata$x:000050DC                 db    1
.xdata$x:000050DD                 db    0
.xdata$x:000050DE                 db    0
.xdata$x:000050DF                 db    0
.xdata$x:000050E0                 dd offset __unwindtable$??0CSparseStream@NTar@NArchive@@QAE@XZ
.xdata$x:000050E4                 db    0
.xdata$x:000050E5                 db    0
.xdata$x:000050E6                 db    0
.xdata$x:000050E7                 db    0
.xdata$x:000050E8                 db    0
.xdata$x:000050E9                 db    0
.xdata$x:000050EA                 db    0
.xdata$x:000050EB                 db    0
.xdata$x:000050EC                 db    0
.xdata$x:000050ED                 db    0
.xdata$x:000050EE                 db    0
.xdata$x:000050EF                 db    0
.xdata$x:000050F0                 db    0
.xdata$x:000050F1                 db    0
.xdata$x:000050F2                 db    0
.xdata$x:000050F3                 db    0
.xdata$x:000050F4                 db    0
.xdata$x:000050F5                 db    0
.xdata$x:000050F6                 db    0
.xdata$x:000050F7                 db    0
.xdata$x:000050F8                 db    1
.xdata$x:000050F9                 db    0
.xdata$x:000050FA                 db    0
.xdata$x:000050FB                 db    0
.xdata$x:000050FB _xdata$x        ends
.xdata$x:000050FB
.rdata$r:000050FC ; ===========================================================================
.rdata$r:000050FC
.rdata$r:000050FC ; Segment type: Pure data
.rdata$r:000050FC ; Segment permissions: Read
.rdata$r:000050FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000050FC                 assume cs:_rdata$r
.rdata$r:000050FC                 ;org 50FCh
.rdata$r:000050FC ; COMDAT (pick any)
.rdata$r:000050FC                 public ??_R4CSparseStream@NTar@NArchive@@6B@
.rdata$r:000050FC ; const NArchive::NTar::CSparseStream::`RTTI Complete Object Locator'
.rdata$r:000050FC ??_R4CSparseStream@NTar@NArchive@@6B@ db    0
.rdata$r:000050FC                                         ; DATA XREF: .rdata:000050B8o
.rdata$r:000050FD                 db    0
.rdata$r:000050FE                 db    0
.rdata$r:000050FF                 db    0
.rdata$r:00005100                 db    0
.rdata$r:00005101                 db    0
.rdata$r:00005102                 db    0
.rdata$r:00005103                 db    0
.rdata$r:00005104                 db    0
.rdata$r:00005105                 db    0
.rdata$r:00005106                 db    0
.rdata$r:00005107                 db    0
.rdata$r:00005108                 dd offset ??_R0?AVCSparseStream@NTar@NArchive@@@8 ; NArchive::NTar::CSparseStream `RTTI Type Descriptor'
.rdata$r:0000510C                 dd offset ??_R3CSparseStream@NTar@NArchive@@8 ; NArchive::NTar::CSparseStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000510C _rdata$r        ends
.rdata$r:0000510C
.data:00005110 ; ===========================================================================
.data:00005110
.data:00005110 ; Segment type: Pure data
.data:00005110 ; Segment permissions: Read/Write
.data:00005110 _data           segment dword public 'DATA' use32
.data:00005110                 assume cs:_data
.data:00005110                 ;org 5110h
.data:00005110 ; COMDAT (pick any)
.data:00005110                 public ??_R0?AVCSparseStream@NTar@NArchive@@@8
.data:00005110 ; class NArchive::NTar::CSparseStream `RTTI Type Descriptor'
.data:00005110 ??_R0?AVCSparseStream@NTar@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00005110                                         ; DATA XREF: .rdata$r:00005108o
.data:00005110                                         ; .rdata$r:NArchive::NTar::CSparseStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00005110                                         ; const type_info::`vftable'
.data:00005114                 align 8
.data:00005118 a_?avcsparsestr db '.?AVCSparseStream@NTar@NArchive@@',0
.data:0000513A                 align 4
.data:0000513A _data           ends
.data:0000513A
.rdata$r:0000513C ; ===========================================================================
.rdata$r:0000513C
.rdata$r:0000513C ; Segment type: Pure data
.rdata$r:0000513C ; Segment permissions: Read
.rdata$r:0000513C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000513C                 assume cs:_rdata$r
.rdata$r:0000513C                 ;org 513Ch
.rdata$r:0000513C ; COMDAT (pick any)
.rdata$r:0000513C                 public ??_R3CSparseStream@NTar@NArchive@@8
.rdata$r:0000513C ; NArchive::NTar::CSparseStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000513C ??_R3CSparseStream@NTar@NArchive@@8 db    0
.rdata$r:0000513C                                         ; DATA XREF: .rdata$r:0000510Co
.rdata$r:0000513C                                         ; .rdata$r:0000517Co
.rdata$r:0000513D                 db    0
.rdata$r:0000513E                 db    0
.rdata$r:0000513F                 db    0
.rdata$r:00005140                 db    1
.rdata$r:00005141                 db    0
.rdata$r:00005142                 db    0
.rdata$r:00005143                 db    0
.rdata$r:00005144                 db    5
.rdata$r:00005145                 db    0
.rdata$r:00005146                 db    0
.rdata$r:00005147                 db    0
.rdata$r:00005148                 dd offset ??_R2CSparseStream@NTar@NArchive@@8 ; NArchive::NTar::CSparseStream::`RTTI Base Class Array'
.rdata$r:00005148 _rdata$r        ends
.rdata$r:00005148
.rdata$r:0000514C ; ===========================================================================
.rdata$r:0000514C
.rdata$r:0000514C ; Segment type: Pure data
.rdata$r:0000514C ; Segment permissions: Read
.rdata$r:0000514C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000514C                 assume cs:_rdata$r
.rdata$r:0000514C                 ;org 514Ch
.rdata$r:0000514C ; COMDAT (pick any)
.rdata$r:0000514C                 public ??_R2CSparseStream@NTar@NArchive@@8
.rdata$r:0000514C ; NArchive::NTar::CSparseStream::`RTTI Base Class Array'
.rdata$r:0000514C ??_R2CSparseStream@NTar@NArchive@@8 dd offset ??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8
.rdata$r:0000514C                                         ; DATA XREF: .rdata$r:00005148o
.rdata$r:0000514C                                         ; NArchive::NTar::CSparseStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005150                 dd offset ??_R1A@?0A@EA@IInStream@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005154                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005158                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000515C                 dd offset ??_R13?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00005160                 db    0
.rdata$r:00005161                 align 4
.rdata$r:00005161 _rdata$r        ends
.rdata$r:00005161
.rdata$r:00005164 ; ===========================================================================
.rdata$r:00005164
.rdata$r:00005164 ; Segment type: Pure data
.rdata$r:00005164 ; Segment permissions: Read
.rdata$r:00005164 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005164                 assume cs:_rdata$r
.rdata$r:00005164                 ;org 5164h
.rdata$r:00005164 ; COMDAT (pick any)
.rdata$r:00005164                 public ??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8
.rdata$r:00005164 ; NArchive::NTar::CSparseStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005164 ??_R1A@?0A@EA@CSparseStream@NTar@NArchive@@8 dd offset ??_R0?AVCSparseStream@NTar@NArchive@@@8
.rdata$r:00005164                                         ; DATA XREF: .rdata$r:NArchive::NTar::CSparseStream::`RTTI Base Class Array'o
.rdata$r:00005164                                         ; NArchive::NTar::CSparseStream `RTTI Type Descriptor'
.rdata$r:00005168                 db    4
.rdata$r:00005169                 db    0
.rdata$r:0000516A                 db    0
.rdata$r:0000516B                 db    0
.rdata$r:0000516C                 db    0
.rdata$r:0000516D                 db    0
.rdata$r:0000516E                 db    0
.rdata$r:0000516F                 db    0
.rdata$r:00005170                 db 0FFh
.rdata$r:00005171                 db 0FFh
.rdata$r:00005172                 db 0FFh
.rdata$r:00005173                 db 0FFh
.rdata$r:00005174                 db    0
.rdata$r:00005175                 db    0
.rdata$r:00005176                 db    0
.rdata$r:00005177                 db    0
.rdata$r:00005178                 db  40h ; @
.rdata$r:00005179                 db    0
.rdata$r:0000517A                 db    0
.rdata$r:0000517B                 db    0
.rdata$r:0000517C                 dd offset ??_R3CSparseStream@NTar@NArchive@@8 ; NArchive::NTar::CSparseStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000517C _rdata$r        ends
.rdata$r:0000517C
.rdata$r:00005180 ; ===========================================================================
.rdata$r:00005180
.rdata$r:00005180 ; Segment type: Pure data
.rdata$r:00005180 ; Segment permissions: Read
.rdata$r:00005180 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005180                 assume cs:_rdata$r
.rdata$r:00005180                 ;org 5180h
.rdata$r:00005180 ; COMDAT (pick any)
.rdata$r:00005180                 public ??_R1A@?0A@EA@IInStream@@8
.rdata$r:00005180 ; IInStream::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005180 ??_R1A@?0A@EA@IInStream@@8 dd offset ??_R0?AUIInStream@@@8
.rdata$r:00005180                                         ; DATA XREF: .rdata$r:00005150o
.rdata$r:00005180                                         ; .rdata$r:IInStream::`RTTI Base Class Array'o
.rdata$r:00005180                                         ; IInStream `RTTI Type Descriptor'
.rdata$r:00005184                 db    2
.rdata$r:00005185                 db    0
.rdata$r:00005186                 db    0
.rdata$r:00005187                 db    0
.rdata$r:00005188                 db    0
.rdata$r:00005189                 db    0
.rdata$r:0000518A                 db    0
.rdata$r:0000518B                 db    0
.rdata$r:0000518C                 db 0FFh
.rdata$r:0000518D                 db 0FFh
.rdata$r:0000518E                 db 0FFh
.rdata$r:0000518F                 db 0FFh
.rdata$r:00005190                 db    0
.rdata$r:00005191                 db    0
.rdata$r:00005192                 db    0
.rdata$r:00005193                 db    0
.rdata$r:00005194                 db  40h ; @
.rdata$r:00005195                 db    0
.rdata$r:00005196                 db    0
.rdata$r:00005197                 db    0
.rdata$r:00005198                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005198 _rdata$r        ends
.rdata$r:00005198
.data:0000519C ; ===========================================================================
.data:0000519C
.data:0000519C ; Segment type: Pure data
.data:0000519C ; Segment permissions: Read/Write
.data:0000519C _data           segment dword public 'DATA' use32
.data:0000519C                 assume cs:_data
.data:0000519C                 ;org 519Ch
.data:0000519C ; COMDAT (pick any)
.data:0000519C                 public ??_R0?AUIInStream@@@8
.data:0000519C ; struct IInStream `RTTI Type Descriptor'
.data:0000519C ??_R0?AUIInStream@@@8 dd offset ??_7type_info@@6B@
.data:0000519C                                         ; DATA XREF: .rdata$r:IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000519C                                         ; .rdata$r:00005228o
.data:0000519C                                         ; const type_info::`vftable'
.data:000051A0                 db    0
.data:000051A1                 db    0
.data:000051A2                 db    0
.data:000051A3                 db    0
.data:000051A4                 db  2Eh ; .
.data:000051A5                 db  3Fh ; ?
.data:000051A6                 db  41h ; A
.data:000051A7                 db  55h ; U
.data:000051A8                 db  49h ; I
.data:000051A9                 db  49h ; I
.data:000051AA                 db  6Eh ; n
.data:000051AB                 db  53h ; S
.data:000051AC                 db  74h ; t
.data:000051AD                 db  72h ; r
.data:000051AE                 db  65h ; e
.data:000051AF                 db  61h ; a
.data:000051B0                 db  6Dh ; m
.data:000051B1                 db  40h ; @
.data:000051B2                 db  40h ; @
.data:000051B3                 db    0
.data:000051B3 _data           ends
.data:000051B3
.rdata$r:000051B4 ; ===========================================================================
.rdata$r:000051B4
.rdata$r:000051B4 ; Segment type: Pure data
.rdata$r:000051B4 ; Segment permissions: Read
.rdata$r:000051B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051B4                 assume cs:_rdata$r
.rdata$r:000051B4                 ;org 51B4h
.rdata$r:000051B4 ; COMDAT (pick any)
.rdata$r:000051B4                 public ??_R3IInStream@@8
.rdata$r:000051B4 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:000051B4 ??_R3IInStream@@8 db    0               ; DATA XREF: .rdata$r:00005198o
.rdata$r:000051B4                                         ; .rdata$r:0000522Co
.rdata$r:000051B5                 db    0
.rdata$r:000051B6                 db    0
.rdata$r:000051B7                 db    0
.rdata$r:000051B8                 db    0
.rdata$r:000051B9                 db    0
.rdata$r:000051BA                 db    0
.rdata$r:000051BB                 db    0
.rdata$r:000051BC                 db    3
.rdata$r:000051BD                 db    0
.rdata$r:000051BE                 db    0
.rdata$r:000051BF                 db    0
.rdata$r:000051C0                 dd offset ??_R2IInStream@@8 ; IInStream::`RTTI Base Class Array'
.rdata$r:000051C0 _rdata$r        ends
.rdata$r:000051C0
.rdata$r:000051C4 ; ===========================================================================
.rdata$r:000051C4
.rdata$r:000051C4 ; Segment type: Pure data
.rdata$r:000051C4 ; Segment permissions: Read
.rdata$r:000051C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000051C4                 assume cs:_rdata$r
.rdata$r:000051C4                 ;org 51C4h
.rdata$r:000051C4 ; COMDAT (pick any)
.rdata$r:000051C4                 public ??_R2IInStream@@8
.rdata$r:000051C4 ; IInStream::`RTTI Base Class Array'
.rdata$r:000051C4 ??_R2IInStream@@8 dd offset ??_R1A@?0A@EA@IInStream@@8
.rdata$r:000051C4                                         ; DATA XREF: .rdata$r:000051C0o
.rdata$r:000051C4                                         ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051C8                 dd offset ??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051CC                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000051D0                 db    0
.rdata$r:000051D1                 align 4
.rdata$r:000051D1 _rdata$r        ends
.rdata$r:000051D1
.text:000051D4 ; ===========================================================================
.text:000051D4
.text:000051D4 ; Segment type: Pure code
.text:000051D4 ; Segment permissions: Read/Execute
.text:000051D4 _text           segment para public 'CODE' use32
.text:000051D4                 assume cs:_text
.text:000051D4                 ;org 51D4h
.text:000051D4 ; COMDAT (pick any)
.text:000051D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000051D4
.text:000051D4 ; =============== S U B R O U T I N E =======================================
.text:000051D4
.text:000051D4 ; Attributes: bp-based frame
.text:000051D4
.text:000051D4 ; _DWORD __thiscall IInStream::IInStream(IInStream *__hidden this)
.text:000051D4                 public ??0IInStream@@QAE@XZ
.text:000051D4 ??0IInStream@@QAE@XZ proc near          ; CODE XREF: NArchive::NTar::CSparseStream::CSparseStream(void)+30p
.text:000051D4
.text:000051D4 var_4           = dword ptr -4
.text:000051D4
.text:000051D4                 push    ebp
.text:000051D5                 mov     ebp, esp
.text:000051D7                 push    ecx
.text:000051D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000051DF                 mov     [ebp+var_4], ecx
.text:000051E2                 mov     ecx, [ebp+var_4] ; this
.text:000051E5                 call    ??0ISequentialInStream@@QAE@XZ ; ISequentialInStream::ISequentialInStream(void)
.text:000051EA                 mov     eax, [ebp+var_4]
.text:000051ED                 mov     dword ptr [eax], offset ??_7IInStream@@6B@ ; const IInStream::`vftable'
.text:000051F3                 mov     eax, [ebp+var_4]
.text:000051F6                 add     esp, 4
.text:000051F9                 cmp     ebp, esp
.text:000051FB                 call    __RTC_CheckEsp
.text:00005200                 mov     esp, ebp
.text:00005202                 pop     ebp
.text:00005203                 retn
.text:00005203 ??0IInStream@@QAE@XZ endp
.text:00005203
.text:00005203 _text           ends
.text:00005203
.rdata:00005204 ; ===========================================================================
.rdata:00005204
.rdata:00005204 ; Segment type: Pure data
.rdata:00005204 ; Segment permissions: Read
.rdata:00005204 _rdata          segment dword public 'DATA' use32
.rdata:00005204                 assume cs:_rdata
.rdata:00005204                 ;org 5204h
.rdata:00005204 ; COMDAT (pick largest)
.rdata:00005204                 dd offset ??_R4IInStream@@6B@ ; const IInStream::`RTTI Complete Object Locator'
.rdata:00005208                 public ??_7IInStream@@6B@
.rdata:00005208 ; const IInStream::`vftable'
.rdata:00005208 ??_7IInStream@@6B@ dd offset __purecall ; DATA XREF: IInStream::IInStream(void)+19o
.rdata:0000520C                 dd offset __purecall
.rdata:00005210                 dd offset __purecall
.rdata:00005214                 dd offset __purecall
.rdata:00005218                 dd offset __purecall
.rdata:00005218 _rdata          ends
.rdata:00005218
.rdata$r:0000521C ; ===========================================================================
.rdata$r:0000521C
.rdata$r:0000521C ; Segment type: Pure data
.rdata$r:0000521C ; Segment permissions: Read
.rdata$r:0000521C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000521C                 assume cs:_rdata$r
.rdata$r:0000521C                 ;org 521Ch
.rdata$r:0000521C ; COMDAT (pick any)
.rdata$r:0000521C                 public ??_R4IInStream@@6B@
.rdata$r:0000521C ; const IInStream::`RTTI Complete Object Locator'
.rdata$r:0000521C ??_R4IInStream@@6B@ db    0             ; DATA XREF: .rdata:00005204o
.rdata$r:0000521D                 db    0
.rdata$r:0000521E                 db    0
.rdata$r:0000521F                 db    0
.rdata$r:00005220                 db    0
.rdata$r:00005221                 db    0
.rdata$r:00005222                 db    0
.rdata$r:00005223                 db    0
.rdata$r:00005224                 db    0
.rdata$r:00005225                 db    0
.rdata$r:00005226                 db    0
.rdata$r:00005227                 db    0
.rdata$r:00005228                 dd offset ??_R0?AUIInStream@@@8 ; IInStream `RTTI Type Descriptor'
.rdata$r:0000522C                 dd offset ??_R3IInStream@@8 ; IInStream::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000522C _rdata$r        ends
.rdata$r:0000522C
.text:00005230 ; ===========================================================================
.text:00005230
.text:00005230 ; Segment type: Pure code
.text:00005230 ; Segment permissions: Read/Execute
.text:00005230 _text           segment para public 'CODE' use32
.text:00005230                 assume cs:_text
.text:00005230                 ;org 5230h
.text:00005230 ; COMDAT (pick any)
.text:00005230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005230
.text:00005230 ; =============== S U B R O U T I N E =======================================
.text:00005230
.text:00005230 ; Attributes: bp-based frame
.text:00005230
.text:00005230 ; __int32 __stdcall NArchive::NTar::CSparseStream::QueryInterface(NArchive::NTar::CSparseStream *this, const struct _GUID *Buf1, void **)
.text:00005230                 public ?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00005230 ?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00005230                                         ; DATA XREF: .rdata:const NArchive::NTar::CSparseStream::`vftable'o
.text:00005230
.text:00005230 this            = dword ptr  8
.text:00005230 Buf1            = dword ptr  0Ch
.text:00005230 arg_8           = dword ptr  10h
.text:00005230
.text:00005230                 push    ebp
.text:00005231                 mov     ebp, esp
.text:00005233                 mov     eax, [ebp+arg_8]
.text:00005236                 mov     dword ptr [eax], 0
.text:0000523C                 push    offset _IID_IUnknown ; Buf2
.text:00005241                 mov     ecx, [ebp+Buf1]
.text:00005244                 push    ecx             ; Buf1
.text:00005245                 call    ___@8           ; __(x,x)
.text:0000524A                 test    eax, eax
.text:0000524C                 jz      short loc_5258
.text:0000524E                 mov     edx, [ebp+arg_8]
.text:00005251                 mov     eax, [ebp+this]
.text:00005254                 mov     [edx], eax
.text:00005256                 jmp     short loc_5297
.text:00005258 ; ---------------------------------------------------------------------------
.text:00005258
.text:00005258 loc_5258:                               ; CODE XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+1Cj
.text:00005258                 push    offset _IID_ISequentialInStream ; Buf2
.text:0000525D                 mov     ecx, [ebp+Buf1]
.text:00005260                 push    ecx             ; Buf1
.text:00005261                 call    ___@8           ; __(x,x)
.text:00005266                 test    eax, eax
.text:00005268                 jz      short loc_5274
.text:0000526A                 mov     edx, [ebp+arg_8]
.text:0000526D                 mov     eax, [ebp+this]
.text:00005270                 mov     [edx], eax
.text:00005272                 jmp     short loc_5297
.text:00005274 ; ---------------------------------------------------------------------------
.text:00005274
.text:00005274 loc_5274:                               ; CODE XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+38j
.text:00005274                 push    offset _IID_IInStream ; Buf2
.text:00005279                 mov     ecx, [ebp+Buf1]
.text:0000527C                 push    ecx             ; Buf1
.text:0000527D                 call    ___@8           ; __(x,x)
.text:00005282                 test    eax, eax
.text:00005284                 jz      short loc_5290
.text:00005286                 mov     edx, [ebp+arg_8]
.text:00005289                 mov     eax, [ebp+this]
.text:0000528C                 mov     [edx], eax
.text:0000528E                 jmp     short loc_5297
.text:00005290 ; ---------------------------------------------------------------------------
.text:00005290
.text:00005290 loc_5290:                               ; CODE XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+54j
.text:00005290                 mov     eax, 80004002h
.text:00005295                 jmp     short loc_52A8
.text:00005297 ; ---------------------------------------------------------------------------
.text:00005297
.text:00005297 loc_5297:                               ; CODE XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+26j
.text:00005297                                         ; NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+42j ...
.text:00005297                 mov     ecx, [ebp+this]
.text:0000529A                 mov     edx, [ecx+4]
.text:0000529D                 add     edx, 1
.text:000052A0                 mov     eax, [ebp+this]
.text:000052A3                 mov     [eax+4], edx
.text:000052A6                 xor     eax, eax
.text:000052A8
.text:000052A8 loc_52A8:                               ; CODE XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *)+65j
.text:000052A8                 cmp     ebp, esp
.text:000052AA                 call    __RTC_CheckEsp
.text:000052AF                 pop     ebp
.text:000052B0                 retn    0Ch
.text:000052B0 ?QueryInterface@CSparseStream@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000052B0
.text:000052B0 ; ---------------------------------------------------------------------------
.text:000052B3                 align 4
.text:000052B3 _text           ends
.text:000052B3
.text:000052B4 ; ===========================================================================
.text:000052B4
.text:000052B4 ; Segment type: Pure code
.text:000052B4 ; Segment permissions: Read/Execute
.text:000052B4 _text           segment para public 'CODE' use32
.text:000052B4                 assume cs:_text
.text:000052B4                 ;org 52B4h
.text:000052B4 ; COMDAT (pick any)
.text:000052B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052B4
.text:000052B4 ; =============== S U B R O U T I N E =======================================
.text:000052B4
.text:000052B4 ; Attributes: bp-based frame
.text:000052B4
.text:000052B4 ; unsigned __int32 __stdcall NArchive::NTar::CSparseStream::AddRef(NArchive::NTar::CSparseStream *this)
.text:000052B4                 public ?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ
.text:000052B4 ?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ proc near
.text:000052B4                                         ; DATA XREF: .rdata:000050C0o
.text:000052B4
.text:000052B4 var_4           = dword ptr -4
.text:000052B4 this            = dword ptr  8
.text:000052B4
.text:000052B4                 push    ebp
.text:000052B5                 mov     ebp, esp
.text:000052B7                 push    ecx
.text:000052B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052BF                 mov     eax, [ebp+this]
.text:000052C2                 mov     ecx, [eax+4]
.text:000052C5                 add     ecx, 1
.text:000052C8                 mov     [ebp+var_4], ecx
.text:000052CB                 mov     edx, [ebp+this]
.text:000052CE                 mov     eax, [ebp+var_4]
.text:000052D1                 mov     [edx+4], eax
.text:000052D4                 mov     eax, [ebp+var_4]
.text:000052D7                 mov     esp, ebp
.text:000052D9                 pop     ebp
.text:000052DA                 retn    4
.text:000052DA ?AddRef@CSparseStream@NTar@NArchive@@UAGKXZ endp
.text:000052DA
.text:000052DA ; ---------------------------------------------------------------------------
.text:000052DD                 align 10h
.text:000052DD _text           ends
.text:000052DD
.text:000052E0 ; ===========================================================================
.text:000052E0
.text:000052E0 ; Segment type: Pure code
.text:000052E0 ; Segment permissions: Read/Execute
.text:000052E0 _text           segment para public 'CODE' use32
.text:000052E0                 assume cs:_text
.text:000052E0                 ;org 52E0h
.text:000052E0 ; COMDAT (pick any)
.text:000052E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052E0
.text:000052E0 ; =============== S U B R O U T I N E =======================================
.text:000052E0
.text:000052E0 ; Attributes: bp-based frame
.text:000052E0
.text:000052E0 ; unsigned __int32 __stdcall NArchive::NTar::CSparseStream::Release(NArchive::NTar::CSparseStream *this)
.text:000052E0                 public ?Release@CSparseStream@NTar@NArchive@@UAGKXZ
.text:000052E0 ?Release@CSparseStream@NTar@NArchive@@UAGKXZ proc near
.text:000052E0                                         ; DATA XREF: .rdata:000050C4o
.text:000052E0
.text:000052E0 var_10          = dword ptr -10h
.text:000052E0 var_C           = dword ptr -0Ch
.text:000052E0 var_8           = dword ptr -8
.text:000052E0 var_4           = dword ptr -4
.text:000052E0 this            = dword ptr  8
.text:000052E0
.text:000052E0                 push    ebp
.text:000052E1                 mov     ebp, esp
.text:000052E3                 sub     esp, 10h
.text:000052E6                 mov     eax, 0CCCCCCCCh
.text:000052EB                 mov     [ebp+var_10], eax
.text:000052EE                 mov     [ebp+var_C], eax
.text:000052F1                 mov     [ebp+var_8], eax
.text:000052F4                 mov     [ebp+var_4], eax
.text:000052F7                 mov     eax, [ebp+this]
.text:000052FA                 mov     ecx, [eax+4]
.text:000052FD                 sub     ecx, 1
.text:00005300                 mov     [ebp+var_C], ecx
.text:00005303                 mov     edx, [ebp+this]
.text:00005306                 mov     eax, [ebp+var_C]
.text:00005309                 mov     [edx+4], eax
.text:0000530C                 cmp     [ebp+var_C], 0
.text:00005310                 jz      short loc_531A
.text:00005312                 mov     ecx, [ebp+this]
.text:00005315                 mov     eax, [ecx+4]
.text:00005318                 jmp     short loc_5344
.text:0000531A ; ---------------------------------------------------------------------------
.text:0000531A
.text:0000531A loc_531A:                               ; CODE XREF: NArchive::NTar::CSparseStream::Release(void)+30j
.text:0000531A                 mov     edx, [ebp+this]
.text:0000531D                 mov     [ebp+var_8], edx
.text:00005320                 mov     eax, [ebp+var_8]
.text:00005323                 mov     [ebp+var_4], eax
.text:00005326                 cmp     [ebp+var_4], 0
.text:0000532A                 jz      short loc_533B
.text:0000532C                 push    1
.text:0000532E                 mov     ecx, [ebp+var_4]
.text:00005331                 call    ??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z ; NArchive::NTar::CSparseStream::`scalar deleting destructor'(uint)
.text:00005336                 mov     [ebp+var_10], eax
.text:00005339                 jmp     short loc_5342
.text:0000533B ; ---------------------------------------------------------------------------
.text:0000533B
.text:0000533B loc_533B:                               ; CODE XREF: NArchive::NTar::CSparseStream::Release(void)+4Aj
.text:0000533B                 mov     [ebp+var_10], 0
.text:00005342
.text:00005342 loc_5342:                               ; CODE XREF: NArchive::NTar::CSparseStream::Release(void)+59j
.text:00005342                 xor     eax, eax
.text:00005344
.text:00005344 loc_5344:                               ; CODE XREF: NArchive::NTar::CSparseStream::Release(void)+38j
.text:00005344                 add     esp, 10h
.text:00005347                 cmp     ebp, esp
.text:00005349                 call    __RTC_CheckEsp
.text:0000534E                 mov     esp, ebp
.text:00005350                 pop     ebp
.text:00005351                 retn    4
.text:00005351 ?Release@CSparseStream@NTar@NArchive@@UAGKXZ endp
.text:00005351
.text:00005351 _text           ends
.text:00005351
.text:00005354 ; ===========================================================================
.text:00005354
.text:00005354 ; Segment type: Pure code
.text:00005354 ; Segment permissions: Read/Execute
.text:00005354 _text           segment para public 'CODE' use32
.text:00005354                 assume cs:_text
.text:00005354                 ;org 5354h
.text:00005354 ; COMDAT (pick any)
.text:00005354                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005354
.text:00005354 ; =============== S U B R O U T I N E =======================================
.text:00005354
.text:00005354 ; Attributes: bp-based frame
.text:00005354
.text:00005354 ; public: void * __thiscall NArchive::NTar::CSparseStream::`scalar deleting destructor'(unsigned int)
.text:00005354                 public ??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z
.text:00005354 ??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z proc near
.text:00005354                                         ; CODE XREF: NArchive::NTar::CSparseStream::Release(void)+51p
.text:00005354
.text:00005354 var_4           = dword ptr -4
.text:00005354 arg_0           = dword ptr  8
.text:00005354
.text:00005354                 push    ebp
.text:00005355                 mov     ebp, esp
.text:00005357                 push    ecx
.text:00005358                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000535F                 mov     [ebp+var_4], ecx
.text:00005362                 mov     ecx, [ebp+var_4] ; this
.text:00005365                 call    ??1CSparseStream@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CSparseStream::~CSparseStream(void)
.text:0000536A                 mov     eax, [ebp+arg_0]
.text:0000536D                 and     eax, 1
.text:00005370                 jz      short loc_537E
.text:00005372                 mov     ecx, [ebp+var_4]
.text:00005375                 push    ecx             ; void *
.text:00005376                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000537B                 add     esp, 4
.text:0000537E
.text:0000537E loc_537E:                               ; CODE XREF: NArchive::NTar::CSparseStream::`scalar deleting destructor'(uint)+1Cj
.text:0000537E                 mov     eax, [ebp+var_4]
.text:00005381                 add     esp, 4
.text:00005384                 cmp     ebp, esp
.text:00005386                 call    __RTC_CheckEsp
.text:0000538B                 mov     esp, ebp
.text:0000538D                 pop     ebp
.text:0000538E                 retn    4
.text:0000538E ??_GCSparseStream@NTar@NArchive@@QAEPAXI@Z endp
.text:0000538E
.text:0000538E ; ---------------------------------------------------------------------------
.text:00005391                 align 4
.text:00005391 _text           ends
.text:00005391
.text:00005394 ; ===========================================================================
.text:00005394
.text:00005394 ; Segment type: Pure code
.text:00005394 ; Segment permissions: Read/Execute
.text:00005394 _text           segment para public 'CODE' use32
.text:00005394                 assume cs:_text
.text:00005394                 ;org 5394h
.text:00005394 ; COMDAT (pick any)
.text:00005394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005394
.text:00005394 ; =============== S U B R O U T I N E =======================================
.text:00005394
.text:00005394 ; Attributes: bp-based frame
.text:00005394
.text:00005394 ; _DWORD __thiscall NArchive::NTar::CSparseStream::~CSparseStream(NArchive::NTar::CSparseStream *__hidden this)
.text:00005394                 public ??1CSparseStream@NTar@NArchive@@QAE@XZ
.text:00005394 ??1CSparseStream@NTar@NArchive@@QAE@XZ proc near
.text:00005394                                         ; CODE XREF: NArchive::NTar::CSparseStream::`scalar deleting destructor'(uint)+11p
.text:00005394
.text:00005394 var_10          = dword ptr -10h
.text:00005394 var_C           = dword ptr -0Ch
.text:00005394 var_4           = dword ptr -4
.text:00005394
.text:00005394                 push    ebp
.text:00005395                 mov     ebp, esp
.text:00005397                 push    0FFFFFFFFh
.text:00005399                 push    offset __ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ
.text:0000539E                 mov     eax, large fs:0
.text:000053A4                 push    eax
.text:000053A5                 push    ecx
.text:000053A6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000053AD                 mov     eax, dword ptr ds:___security_cookie
.text:000053B2                 xor     eax, ebp
.text:000053B4                 push    eax
.text:000053B5                 lea     eax, [ebp+var_C]
.text:000053B8                 mov     large fs:0, eax
.text:000053BE                 mov     [ebp+var_10], ecx
.text:000053C1                 mov     [ebp+var_4], 0
.text:000053C8                 mov     ecx, [ebp+var_10]
.text:000053CB                 add     ecx, 28h ; '('
.text:000053CE                 call    ??1?$CRecordVector@_K@@QAE@XZ ; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:000053D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000053DA                 mov     ecx, [ebp+var_10]
.text:000053DD                 add     ecx, 20h ; ' '
.text:000053E0                 call    ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text:000053E5                 mov     ecx, [ebp+var_C]
.text:000053E8                 mov     large fs:0, ecx
.text:000053EF                 pop     ecx
.text:000053F0                 add     esp, 10h
.text:000053F3                 cmp     ebp, esp
.text:000053F5                 call    __RTC_CheckEsp
.text:000053FA                 mov     esp, ebp
.text:000053FC                 pop     ebp
.text:000053FD                 retn
.text:000053FD ??1CSparseStream@NTar@NArchive@@QAE@XZ endp
.text:000053FD
.text:000053FD ; ---------------------------------------------------------------------------
.text:000053FE                 align 10h
.text:000053FE _text           ends
.text:000053FE
.text$x:00005400 ; ===========================================================================
.text$x:00005400
.text$x:00005400 ; Segment type: Pure code
.text$x:00005400 ; Segment permissions: Read/Execute
.text$x:00005400 _text$x         segment para public 'CODE' use32
.text$x:00005400                 assume cs:_text$x
.text$x:00005400                 ;org 5400h
.text$x:00005400 ; COMDAT (pick associative to section at 5394)
.text$x:00005400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005400
.text$x:00005400 ; =============== S U B R O U T I N E =======================================
.text$x:00005400
.text$x:00005400
.text$x:00005400 __unwindfunclet$??1CSparseStream@NTar@NArchive@@QAE@XZ$0 proc near
.text$x:00005400                                         ; DATA XREF: .xdata$x:0000542Co
.text$x:00005400                 mov     ecx, [ebp-10h]
.text$x:00005403                 add     ecx, 20h ; ' '
.text$x:00005406                 jmp     ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)
.text$x:00005406 __unwindfunclet$??1CSparseStream@NTar@NArchive@@QAE@XZ$0 endp
.text$x:00005406
.text$x:0000540B
.text$x:0000540B ; =============== S U B R O U T I N E =======================================
.text$x:0000540B
.text$x:0000540B
.text$x:0000540B __ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ proc near
.text$x:0000540B                                         ; DATA XREF: NArchive::NTar::CSparseStream::~CSparseStream(void)+5o
.text$x:0000540B
.text$x:0000540B arg_4           = dword ptr  8
.text$x:0000540B
.text$x:0000540B                 mov     edx, [esp+arg_4]
.text$x:0000540F                 lea     eax, [edx+0Ch]
.text$x:00005412                 mov     ecx, [edx-8]
.text$x:00005415                 xor     ecx, eax
.text$x:00005417                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000541C                 mov     eax, offset __ehfuncinfo$??1CSparseStream@NTar@NArchive@@QAE@XZ
.text$x:00005421                 jmp     ___CxxFrameHandler3
.text$x:00005421 __ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ endp
.text$x:00005421
.text$x:00005421 ; ---------------------------------------------------------------------------
.text$x:00005426                 align 4
.text$x:00005426 _text$x         ends
.text$x:00005426
.xdata$x:00005428 ; ===========================================================================
.xdata$x:00005428
.xdata$x:00005428 ; Segment type: Pure data
.xdata$x:00005428 ; Segment permissions: Read
.xdata$x:00005428 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005428                 assume cs:_xdata$x
.xdata$x:00005428                 ;org 5428h
.xdata$x:00005428 ; COMDAT (pick associative to section at 5394)
.xdata$x:00005428 __unwindtable$??1CSparseStream@NTar@NArchive@@QAE@XZ db 0FFh
.xdata$x:00005428                                         ; DATA XREF: .xdata$x:00005438o
.xdata$x:00005429                 db 0FFh
.xdata$x:0000542A                 db 0FFh
.xdata$x:0000542B                 db 0FFh
.xdata$x:0000542C                 dd offset __unwindfunclet$??1CSparseStream@NTar@NArchive@@QAE@XZ$0
.xdata$x:00005430 __ehfuncinfo$??1CSparseStream@NTar@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00005430                                         ; DATA XREF: __ehhandler$??1CSparseStream@NTar@NArchive@@QAE@XZ+11o
.xdata$x:00005431                 db    5
.xdata$x:00005432                 db  93h ; ô
.xdata$x:00005433                 db  19h
.xdata$x:00005434                 db    1
.xdata$x:00005435                 db    0
.xdata$x:00005436                 db    0
.xdata$x:00005437                 db    0
.xdata$x:00005438                 dd offset __unwindtable$??1CSparseStream@NTar@NArchive@@QAE@XZ
.xdata$x:0000543C                 db    0
.xdata$x:0000543D                 db    0
.xdata$x:0000543E                 db    0
.xdata$x:0000543F                 db    0
.xdata$x:00005440                 db    0
.xdata$x:00005441                 db    0
.xdata$x:00005442                 db    0
.xdata$x:00005443                 db    0
.xdata$x:00005444                 db    0
.xdata$x:00005445                 db    0
.xdata$x:00005446                 db    0
.xdata$x:00005447                 db    0
.xdata$x:00005448                 db    0
.xdata$x:00005449                 db    0
.xdata$x:0000544A                 db    0
.xdata$x:0000544B                 db    0
.xdata$x:0000544C                 db    0
.xdata$x:0000544D                 db    0
.xdata$x:0000544E                 db    0
.xdata$x:0000544F                 db    0
.xdata$x:00005450                 db    1
.xdata$x:00005451                 db    0
.xdata$x:00005452                 db    0
.xdata$x:00005453                 db    0
.xdata$x:00005453 _xdata$x        ends
.xdata$x:00005453
.text:00005454 ; ===========================================================================
.text:00005454
.text:00005454 ; Segment type: Pure code
.text:00005454 ; Segment permissions: Read/Execute
.text:00005454 _text           segment para public 'CODE' use32
.text:00005454                 assume cs:_text
.text:00005454                 ;org 5454h
.text:00005454 ; COMDAT (pick any)
.text:00005454                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005454
.text:00005454 ; =============== S U B R O U T I N E =======================================
.text:00005454
.text:00005454 ; Attributes: bp-based frame
.text:00005454
.text:00005454 ; bool __thiscall UString::IsEmpty(UString *__hidden this)
.text:00005454                 public ?IsEmpty@UString@@QBE_NXZ
.text:00005454 ?IsEmpty@UString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5Cp
.text:00005454
.text:00005454 var_4           = dword ptr -4
.text:00005454
.text:00005454                 push    ebp
.text:00005455                 mov     ebp, esp
.text:00005457                 push    ecx
.text:00005458                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000545F                 mov     [ebp+var_4], ecx
.text:00005462                 mov     eax, [ebp+var_4]
.text:00005465                 xor     ecx, ecx
.text:00005467                 cmp     dword ptr [eax+4], 0
.text:0000546B                 setz    cl
.text:0000546E                 mov     al, cl
.text:00005470                 mov     esp, ebp
.text:00005472                 pop     ebp
.text:00005473                 retn
.text:00005473 ?IsEmpty@UString@@QBE_NXZ endp
.text:00005473
.text:00005473 _text           ends
.text:00005473
.text:00005474 ; ===========================================================================
.text:00005474
.text:00005474 ; Segment type: Pure code
.text:00005474 ; Segment permissions: Read/Execute
.text:00005474 _text           segment para public 'CODE' use32
.text:00005474                 assume cs:_text
.text:00005474                 ;org 5474h
.text:00005474 ; COMDAT (pick any)
.text:00005474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005474
.text:00005474 ; =============== S U B R O U T I N E =======================================
.text:00005474
.text:00005474 ; Attributes: bp-based frame
.text:00005474
.text:00005474 ; public: __thiscall UString::operator wchar_t const *(void)const
.text:00005474                 public ??BUString@@QBEPB_WXZ
.text:00005474 ??BUString@@QBEPB_WXZ proc near         ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+8Ep
.text:00005474
.text:00005474 var_4           = dword ptr -4
.text:00005474
.text:00005474                 push    ebp
.text:00005475                 mov     ebp, esp
.text:00005477                 push    ecx
.text:00005478                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000547F                 mov     [ebp+var_4], ecx
.text:00005482                 mov     eax, [ebp+var_4]
.text:00005485                 mov     eax, [eax]
.text:00005487                 mov     esp, ebp
.text:00005489                 pop     ebp
.text:0000548A                 retn
.text:0000548A ??BUString@@QBEPB_WXZ endp
.text:0000548A
.text:0000548A ; ---------------------------------------------------------------------------
.text:0000548B                 align 4
.text:0000548B _text           ends
.text:0000548B
.text:0000548C ; ===========================================================================
.text:0000548C
.text:0000548C ; Segment type: Pure code
.text:0000548C ; Segment permissions: Read/Execute
.text:0000548C _text           segment para public 'CODE' use32
.text:0000548C                 assume cs:_text
.text:0000548C                 ;org 548Ch
.text:0000548C ; COMDAT (pick any)
.text:0000548C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000548C
.text:0000548C ; =============== S U B R O U T I N E =======================================
.text:0000548C
.text:0000548C ; Attributes: bp-based frame
.text:0000548C
.text:0000548C ; const wchar_t *__thiscall UString::Ptr(UString *this, unsigned int)
.text:0000548C                 public ?Ptr@UString@@QBEPB_WI@Z
.text:0000548C ?Ptr@UString@@QBEPB_WI@Z proc near      ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+A7p
.text:0000548C
.text:0000548C var_4           = dword ptr -4
.text:0000548C arg_0           = dword ptr  8
.text:0000548C
.text:0000548C                 push    ebp
.text:0000548D                 mov     ebp, esp
.text:0000548F                 push    ecx
.text:00005490                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005497                 mov     [ebp+var_4], ecx
.text:0000549A                 mov     eax, [ebp+var_4]
.text:0000549D                 mov     ecx, [eax]
.text:0000549F                 mov     edx, [ebp+arg_0]
.text:000054A2                 lea     eax, [ecx+edx*2]
.text:000054A5                 mov     esp, ebp
.text:000054A7                 pop     ebp
.text:000054A8                 retn    4
.text:000054A8 ?Ptr@UString@@QBEPB_WI@Z endp
.text:000054A8
.text:000054A8 ; ---------------------------------------------------------------------------
.text:000054AB                 align 4
.text:000054AB _text           ends
.text:000054AB
.text:000054AC ; ===========================================================================
.text:000054AC
.text:000054AC ; Segment type: Pure code
.text:000054AC ; Segment permissions: Read/Execute
.text:000054AC _text           segment para public 'CODE' use32
.text:000054AC                 assume cs:_text
.text:000054AC                 ;org 54ACh
.text:000054AC ; COMDAT (pick any)
.text:000054AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054AC
.text:000054AC ; =============== S U B R O U T I N E =======================================
.text:000054AC
.text:000054AC ; Attributes: bp-based frame
.text:000054AC
.text:000054AC ; void __thiscall UString::MakeLower_Ascii(UString *__hidden this)
.text:000054AC                 public ?MakeLower_Ascii@UString@@QAEXXZ
.text:000054AC ?MakeLower_Ascii@UString@@QAEXXZ proc near
.text:000054AC                                         ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+54p
.text:000054AC
.text:000054AC var_4           = dword ptr -4
.text:000054AC
.text:000054AC                 push    ebp
.text:000054AD                 mov     ebp, esp
.text:000054AF                 push    ecx
.text:000054B0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054B7                 mov     [ebp+var_4], ecx
.text:000054BA                 mov     eax, [ebp+var_4]
.text:000054BD                 mov     ecx, [eax]
.text:000054BF                 push    ecx             ; wchar_t *
.text:000054C0                 call    ?MyStringLower_Ascii@@YGXPA_W@Z ; MyStringLower_Ascii(wchar_t *)
.text:000054C5                 add     esp, 4
.text:000054C8                 cmp     ebp, esp
.text:000054CA                 call    __RTC_CheckEsp
.text:000054CF                 mov     esp, ebp
.text:000054D1                 pop     ebp
.text:000054D2                 retn
.text:000054D2 ?MakeLower_Ascii@UString@@QAEXXZ endp
.text:000054D2
.text:000054D2 ; ---------------------------------------------------------------------------
.text:000054D3                 align 4
.text:000054D3 _text           ends
.text:000054D3
.text:000054D4 ; ===========================================================================
.text:000054D4
.text:000054D4 ; Segment type: Pure code
.text:000054D4 ; Segment permissions: Read/Execute
.text:000054D4 _text           segment para public 'CODE' use32
.text:000054D4                 assume cs:_text
.text:000054D4                 ;org 54D4h
.text:000054D4 ; COMDAT (pick any)
.text:000054D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054D4
.text:000054D4 ; =============== S U B R O U T I N E =======================================
.text:000054D4
.text:000054D4 ; Attributes: bp-based frame
.text:000054D4
.text:000054D4 ; bool __thiscall UString::IsEqualTo(UString *this, const char *)
.text:000054D4                 public ?IsEqualTo@UString@@QBE_NPBD@Z
.text:000054D4 ?IsEqualTo@UString@@QBE_NPBD@Z proc near
.text:000054D4                                         ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+FAp
.text:000054D4
.text:000054D4 var_4           = dword ptr -4
.text:000054D4 arg_0           = dword ptr  8
.text:000054D4
.text:000054D4                 push    ebp
.text:000054D5                 mov     ebp, esp
.text:000054D7                 push    ecx
.text:000054D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054DF                 mov     [ebp+var_4], ecx
.text:000054E2                 mov     eax, [ebp+arg_0]
.text:000054E5                 push    eax             ; char *
.text:000054E6                 mov     ecx, [ebp+var_4]
.text:000054E9                 mov     edx, [ecx]
.text:000054EB                 push    edx             ; wchar_t *
.text:000054EC                 call    ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqual_Ascii(wchar_t const *,char const *)
.text:000054F1                 add     esp, 4
.text:000054F4                 cmp     ebp, esp
.text:000054F6                 call    __RTC_CheckEsp
.text:000054FB                 mov     esp, ebp
.text:000054FD                 pop     ebp
.text:000054FE                 retn    4
.text:000054FE ?IsEqualTo@UString@@QBE_NPBD@Z endp
.text:000054FE
.text:000054FE ; ---------------------------------------------------------------------------
.text:00005501                 align 4
.text:00005501 _text           ends
.text:00005501
.text:00005504 ; ===========================================================================
.text:00005504
.text:00005504 ; Segment type: Pure code
.text:00005504 ; Segment permissions: Read/Execute
.text:00005504 _text           segment para public 'CODE' use32
.text:00005504                 assume cs:_text
.text:00005504                 ;org 5504h
.text:00005504 ; COMDAT (pick any)
.text:00005504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005504
.text:00005504 ; =============== S U B R O U T I N E =======================================
.text:00005504
.text:00005504 ; Attributes: bp-based frame
.text:00005504
.text:00005504 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00005504                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00005504 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00005504                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+D0p
.text:00005504                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+868p ...
.text:00005504
.text:00005504 var_4           = dword ptr -4
.text:00005504
.text:00005504                 push    ebp
.text:00005505                 mov     ebp, esp
.text:00005507                 push    ecx
.text:00005508                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000550F                 mov     [ebp+var_4], ecx
.text:00005512                 mov     eax, [ebp+var_4]
.text:00005515                 mov     dword ptr [eax], 0
.text:0000551B                 mov     eax, [ebp+var_4]
.text:0000551E                 mov     esp, ebp
.text:00005520                 pop     ebp
.text:00005521                 retn
.text:00005521 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00005521
.text:00005521 ; ---------------------------------------------------------------------------
.text:00005522                 align 4
.text:00005522 _text           ends
.text:00005522
.text:00005524 ; ===========================================================================
.text:00005524
.text:00005524 ; Segment type: Pure code
.text:00005524 ; Segment permissions: Read/Execute
.text:00005524 _text           segment para public 'CODE' use32
.text:00005524                 assume cs:_text
.text:00005524                 ;org 5524h
.text:00005524 ; COMDAT (pick any)
.text:00005524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005524
.text:00005524 ; =============== S U B R O U T I N E =======================================
.text:00005524
.text:00005524 ; Attributes: bp-based frame
.text:00005524
.text:00005524 ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(struct ISequentialInStream *)
.text:00005524                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
.text:00005524 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
.text:00005524                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2C0p
.text:00005524
.text:00005524 var_4           = dword ptr -4
.text:00005524 arg_0           = dword ptr  8
.text:00005524
.text:00005524                 push    ebp
.text:00005525                 mov     ebp, esp
.text:00005527                 push    ecx
.text:00005528                 push    esi
.text:00005529                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005530                 mov     [ebp+var_4], ecx
.text:00005533                 mov     eax, [ebp+var_4]
.text:00005536                 mov     ecx, [ebp+arg_0]
.text:00005539                 mov     [eax], ecx
.text:0000553B                 cmp     [ebp+arg_0], 0
.text:0000553F                 jz      short loc_5558
.text:00005541                 mov     edx, [ebp+arg_0]
.text:00005544                 mov     eax, [edx]
.text:00005546                 mov     esi, esp
.text:00005548                 mov     ecx, [ebp+arg_0]
.text:0000554B                 push    ecx
.text:0000554C                 mov     edx, [eax+4]
.text:0000554F                 call    edx
.text:00005551                 cmp     esi, esp
.text:00005553                 call    __RTC_CheckEsp
.text:00005558
.text:00005558 loc_5558:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(ISequentialInStream *)+1Bj
.text:00005558                 mov     eax, [ebp+var_4]
.text:0000555B                 pop     esi
.text:0000555C                 add     esp, 4
.text:0000555F                 cmp     ebp, esp
.text:00005561                 call    __RTC_CheckEsp
.text:00005566                 mov     esp, ebp
.text:00005568                 pop     ebp
.text:00005569                 retn    4
.text:00005569 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z endp
.text:00005569
.text:00005569 _text           ends
.text:00005569
.text:0000556C ; ===========================================================================
.text:0000556C
.text:0000556C ; Segment type: Pure code
.text:0000556C ; Segment permissions: Read/Execute
.text:0000556C _text           segment para public 'CODE' use32
.text:0000556C                 assume cs:_text
.text:0000556C                 ;org 556Ch
.text:0000556C ; COMDAT (pick any)
.text:0000556C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000556C
.text:0000556C ; =============== S U B R O U T I N E =======================================
.text:0000556C
.text:0000556C ; Attributes: bp-based frame
.text:0000556C
.text:0000556C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:0000556C                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:0000556C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:0000556C                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3CDp
.text:0000556C                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4A7p ...
.text:0000556C
.text:0000556C var_4           = dword ptr -4
.text:0000556C
.text:0000556C                 push    ebp
.text:0000556D                 mov     ebp, esp
.text:0000556F                 push    ecx
.text:00005570                 push    esi
.text:00005571                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005578                 mov     [ebp+var_4], ecx
.text:0000557B                 mov     eax, [ebp+var_4]
.text:0000557E                 cmp     dword ptr [eax], 0
.text:00005581                 jz      short loc_559E
.text:00005583                 mov     ecx, [ebp+var_4]
.text:00005586                 mov     edx, [ecx]
.text:00005588                 mov     eax, [ebp+var_4]
.text:0000558B                 mov     ecx, [eax]
.text:0000558D                 mov     edx, [edx]
.text:0000558F                 mov     esi, esp
.text:00005591                 push    ecx
.text:00005592                 mov     eax, [edx+8]
.text:00005595                 call    eax
.text:00005597                 cmp     esi, esp
.text:00005599                 call    __RTC_CheckEsp
.text:0000559E
.text:0000559E loc_559E:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:0000559E                 pop     esi
.text:0000559F                 add     esp, 4
.text:000055A2                 cmp     ebp, esp
.text:000055A4                 call    __RTC_CheckEsp
.text:000055A9                 mov     esp, ebp
.text:000055AB                 pop     ebp
.text:000055AC                 retn
.text:000055AC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:000055AC
.text:000055AC ; ---------------------------------------------------------------------------
.text:000055AD                 align 10h
.text:000055AD _text           ends
.text:000055AD
.text:000055B0 ; ===========================================================================
.text:000055B0
.text:000055B0 ; Segment type: Pure code
.text:000055B0 ; Segment permissions: Read/Execute
.text:000055B0 _text           segment para public 'CODE' use32
.text:000055B0                 assume cs:_text
.text:000055B0                 ;org 55B0h
.text:000055B0 ; COMDAT (pick any)
.text:000055B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055B0
.text:000055B0 ; =============== S U B R O U T I N E =======================================
.text:000055B0
.text:000055B0 ; Attributes: bp-based frame
.text:000055B0
.text:000055B0 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:000055B0                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:000055B0 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:000055B0                                         ; CODE XREF: NArchive::NTar::CHandler::Close(void)+7Ep
.text:000055B0
.text:000055B0 var_4           = dword ptr -4
.text:000055B0
.text:000055B0                 push    ebp
.text:000055B1                 mov     ebp, esp
.text:000055B3                 push    ecx
.text:000055B4                 push    esi
.text:000055B5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055BC                 mov     [ebp+var_4], ecx
.text:000055BF                 mov     eax, [ebp+var_4]
.text:000055C2                 cmp     dword ptr [eax], 0
.text:000055C5                 jz      short loc_55EB
.text:000055C7                 mov     ecx, [ebp+var_4]
.text:000055CA                 mov     edx, [ecx]
.text:000055CC                 mov     eax, [ebp+var_4]
.text:000055CF                 mov     ecx, [eax]
.text:000055D1                 mov     edx, [edx]
.text:000055D3                 mov     esi, esp
.text:000055D5                 push    ecx
.text:000055D6                 mov     eax, [edx+8]
.text:000055D9                 call    eax
.text:000055DB                 cmp     esi, esp
.text:000055DD                 call    __RTC_CheckEsp
.text:000055E2                 mov     ecx, [ebp+var_4]
.text:000055E5                 mov     dword ptr [ecx], 0
.text:000055EB
.text:000055EB loc_55EB:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:000055EB                 pop     esi
.text:000055EC                 add     esp, 4
.text:000055EF                 cmp     ebp, esp
.text:000055F1                 call    __RTC_CheckEsp
.text:000055F6                 mov     esp, ebp
.text:000055F8                 pop     ebp
.text:000055F9                 retn
.text:000055F9 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:000055F9
.text:000055F9 ; ---------------------------------------------------------------------------
.text:000055FA                 align 4
.text:000055FA _text           ends
.text:000055FA
.text:000055FC ; ===========================================================================
.text:000055FC
.text:000055FC ; Segment type: Pure code
.text:000055FC ; Segment permissions: Read/Execute
.text:000055FC _text           segment para public 'CODE' use32
.text:000055FC                 assume cs:_text
.text:000055FC                 ;org 55FCh
.text:000055FC ; COMDAT (pick any)
.text:000055FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055FC
.text:000055FC ; =============== S U B R O U T I N E =======================================
.text:000055FC
.text:000055FC ; Attributes: bp-based frame
.text:000055FC
.text:000055FC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:000055FC                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:000055FC ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:000055FC                                         ; CODE XREF: NArchive::NTar::CHandler::SkipTo(uint)+6Ap
.text:000055FC                                         ; NArchive::NTar::CHandler::SkipTo(uint)+12Ep ...
.text:000055FC
.text:000055FC var_4           = dword ptr -4
.text:000055FC
.text:000055FC                 push    ebp
.text:000055FD                 mov     ebp, esp
.text:000055FF                 push    ecx
.text:00005600                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005607                 mov     [ebp+var_4], ecx
.text:0000560A                 mov     eax, [ebp+var_4]
.text:0000560D                 mov     eax, [eax]
.text:0000560F                 mov     esp, ebp
.text:00005611                 pop     ebp
.text:00005612                 retn
.text:00005612 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00005612
.text:00005612 ; ---------------------------------------------------------------------------
.text:00005613                 align 4
.text:00005613 _text           ends
.text:00005613
.text:00005614 ; ===========================================================================
.text:00005614
.text:00005614 ; Segment type: Pure code
.text:00005614 ; Segment permissions: Read/Execute
.text:00005614 _text           segment para public 'CODE' use32
.text:00005614                 assume cs:_text
.text:00005614                 ;org 5614h
.text:00005614 ; COMDAT (pick any)
.text:00005614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005614
.text:00005614 ; =============== S U B R O U T I N E =======================================
.text:00005614
.text:00005614 ; Attributes: bp-based frame
.text:00005614
.text:00005614 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:00005614                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:00005614 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:00005614                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8AAp
.text:00005614
.text:00005614 var_4           = dword ptr -4
.text:00005614
.text:00005614                 push    ebp
.text:00005615                 mov     ebp, esp
.text:00005617                 push    ecx
.text:00005618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000561F                 mov     [ebp+var_4], ecx
.text:00005622                 mov     eax, [ebp+var_4]
.text:00005625                 mov     esp, ebp
.text:00005627                 pop     ebp
.text:00005628                 retn
.text:00005628 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:00005628
.text:00005628 ; ---------------------------------------------------------------------------
.text:00005629                 align 4
.text:00005629 _text           ends
.text:00005629
.text:0000562C ; ===========================================================================
.text:0000562C
.text:0000562C ; Segment type: Pure code
.text:0000562C ; Segment permissions: Read/Execute
.text:0000562C _text           segment para public 'CODE' use32
.text:0000562C                 assume cs:_text
.text:0000562C                 ;org 562Ch
.text:0000562C ; COMDAT (pick any)
.text:0000562C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000562C
.text:0000562C ; =============== S U B R O U T I N E =======================================
.text:0000562C
.text:0000562C ; Attributes: bp-based frame
.text:0000562C
.text:0000562C ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:0000562C                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:0000562C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:0000562C                                         ; CODE XREF: NArchive::NTar::CHandler::OpenSeq(ISequentialInStream *)+29p
.text:0000562C                                         ; CLimitedSequentialInStream::SetStream(ISequentialInStream *)+18p ...
.text:0000562C
.text:0000562C var_4           = dword ptr -4
.text:0000562C arg_0           = dword ptr  8
.text:0000562C
.text:0000562C                 push    ebp
.text:0000562D                 mov     ebp, esp
.text:0000562F                 push    ecx
.text:00005630                 push    esi
.text:00005631                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005638                 mov     [ebp+var_4], ecx
.text:0000563B                 cmp     [ebp+arg_0], 0
.text:0000563F                 jz      short loc_5658
.text:00005641                 mov     eax, [ebp+arg_0]
.text:00005644                 mov     ecx, [eax]
.text:00005646                 mov     esi, esp
.text:00005648                 mov     edx, [ebp+arg_0]
.text:0000564B                 push    edx
.text:0000564C                 mov     eax, [ecx+4]
.text:0000564F                 call    eax
.text:00005651                 cmp     esi, esp
.text:00005653                 call    __RTC_CheckEsp
.text:00005658
.text:00005658 loc_5658:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00005658                 mov     ecx, [ebp+var_4]
.text:0000565B                 cmp     dword ptr [ecx], 0
.text:0000565E                 jz      short loc_567B
.text:00005660                 mov     edx, [ebp+var_4]
.text:00005663                 mov     eax, [edx]
.text:00005665                 mov     ecx, [ebp+var_4]
.text:00005668                 mov     edx, [ecx]
.text:0000566A                 mov     eax, [eax]
.text:0000566C                 mov     esi, esp
.text:0000566E                 push    edx
.text:0000566F                 mov     ecx, [eax+8]
.text:00005672                 call    ecx
.text:00005674                 cmp     esi, esp
.text:00005676                 call    __RTC_CheckEsp
.text:0000567B
.text:0000567B loc_567B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:0000567B                 mov     edx, [ebp+var_4]
.text:0000567E                 mov     eax, [ebp+arg_0]
.text:00005681                 mov     [edx], eax
.text:00005683                 mov     eax, [ebp+arg_0]
.text:00005686                 pop     esi
.text:00005687                 add     esp, 4
.text:0000568A                 cmp     ebp, esp
.text:0000568C                 call    __RTC_CheckEsp
.text:00005691                 mov     esp, ebp
.text:00005693                 pop     ebp
.text:00005694                 retn    4
.text:00005694 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00005694
.text:00005694 ; ---------------------------------------------------------------------------
.text:00005697                 align 4
.text:00005697 _text           ends
.text:00005697
.text:00005698 ; ===========================================================================
.text:00005698
.text:00005698 ; Segment type: Pure code
.text:00005698 ; Segment permissions: Read/Execute
.text:00005698 _text           segment para public 'CODE' use32
.text:00005698                 assume cs:_text
.text:00005698                 ;org 5698h
.text:00005698 ; COMDAT (pick any)
.text:00005698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005698
.text:00005698 ; =============== S U B R O U T I N E =======================================
.text:00005698
.text:00005698 ; Attributes: bp-based frame
.text:00005698
.text:00005698 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(class CMyComPtr<struct ISequentialInStream> const &)
.text:00005698                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
.text:00005698 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z proc near
.text:00005698                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+89Ap
.text:00005698
.text:00005698 var_4           = dword ptr -4
.text:00005698 arg_0           = dword ptr  8
.text:00005698
.text:00005698                 push    ebp
.text:00005699                 mov     ebp, esp
.text:0000569B                 push    ecx
.text:0000569C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056A3                 mov     [ebp+var_4], ecx
.text:000056A6                 mov     eax, [ebp+arg_0]
.text:000056A9                 mov     ecx, [eax]
.text:000056AB                 push    ecx
.text:000056AC                 mov     ecx, [ebp+var_4]
.text:000056AF                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:000056B4                 add     esp, 4
.text:000056B7                 cmp     ebp, esp
.text:000056B9                 call    __RTC_CheckEsp
.text:000056BE                 mov     esp, ebp
.text:000056C0                 pop     ebp
.text:000056C1                 retn    4
.text:000056C1 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z endp
.text:000056C1
.text:000056C1 _text           ends
.text:000056C1
.text:000056C4 ; ===========================================================================
.text:000056C4
.text:000056C4 ; Segment type: Pure code
.text:000056C4 ; Segment permissions: Read/Execute
.text:000056C4 _text           segment para public 'CODE' use32
.text:000056C4                 assume cs:_text
.text:000056C4                 ;org 56C4h
.text:000056C4 ; COMDAT (pick any)
.text:000056C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056C4
.text:000056C4 ; =============== S U B R O U T I N E =======================================
.text:000056C4
.text:000056C4 ; Attributes: bp-based frame
.text:000056C4
.text:000056C4 ; public: bool __thiscall CMyComPtr<struct ISequentialInStream>::operator!(void)const
.text:000056C4                 public ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
.text:000056C4 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ proc near
.text:000056C4                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+8E1p
.text:000056C4
.text:000056C4 var_4           = dword ptr -4
.text:000056C4
.text:000056C4                 push    ebp
.text:000056C5                 mov     ebp, esp
.text:000056C7                 push    ecx
.text:000056C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056CF                 mov     [ebp+var_4], ecx
.text:000056D2                 mov     eax, [ebp+var_4]
.text:000056D5                 xor     ecx, ecx
.text:000056D7                 cmp     dword ptr [eax], 0
.text:000056DA                 setz    cl
.text:000056DD                 mov     al, cl
.text:000056DF                 mov     esp, ebp
.text:000056E1                 pop     ebp
.text:000056E2                 retn
.text:000056E2 ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ endp
.text:000056E2
.text:000056E2 ; ---------------------------------------------------------------------------
.text:000056E3                 align 4
.text:000056E3 _text           ends
.text:000056E3
.text:000056E4 ; ===========================================================================
.text:000056E4
.text:000056E4 ; Segment type: Pure code
.text:000056E4 ; Segment permissions: Read/Execute
.text:000056E4 _text           segment para public 'CODE' use32
.text:000056E4                 assume cs:_text
.text:000056E4                 ;org 56E4h
.text:000056E4 ; COMDAT (pick any)
.text:000056E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056E4
.text:000056E4 ; =============== S U B R O U T I N E =======================================
.text:000056E4
.text:000056E4 ; Attributes: bp-based frame
.text:000056E4
.text:000056E4 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:000056E4                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:000056E4 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:000056E4                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+C1p
.text:000056E4
.text:000056E4 var_4           = dword ptr -4
.text:000056E4
.text:000056E4                 push    ebp
.text:000056E5                 mov     ebp, esp
.text:000056E7                 push    ecx
.text:000056E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056EF                 mov     [ebp+var_4], ecx
.text:000056F2                 mov     eax, [ebp+var_4]
.text:000056F5                 mov     dword ptr [eax], 0
.text:000056FB                 mov     eax, [ebp+var_4]
.text:000056FE                 mov     esp, ebp
.text:00005700                 pop     ebp
.text:00005701                 retn
.text:00005701 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00005701
.text:00005701 ; ---------------------------------------------------------------------------
.text:00005702                 align 4
.text:00005702 _text           ends
.text:00005702
.text:00005704 ; ===========================================================================
.text:00005704
.text:00005704 ; Segment type: Pure code
.text:00005704 ; Segment permissions: Read/Execute
.text:00005704 _text           segment para public 'CODE' use32
.text:00005704                 assume cs:_text
.text:00005704                 ;org 5704h
.text:00005704 ; COMDAT (pick any)
.text:00005704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005704
.text:00005704 ; =============== S U B R O U T I N E =======================================
.text:00005704
.text:00005704 ; Attributes: bp-based frame
.text:00005704
.text:00005704 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(struct IInStream *)
.text:00005704                 public ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
.text:00005704 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z proc near
.text:00005704                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+C2p
.text:00005704
.text:00005704 var_4           = dword ptr -4
.text:00005704 arg_0           = dword ptr  8
.text:00005704
.text:00005704                 push    ebp
.text:00005705                 mov     ebp, esp
.text:00005707                 push    ecx
.text:00005708                 push    esi
.text:00005709                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005710                 mov     [ebp+var_4], ecx
.text:00005713                 mov     eax, [ebp+var_4]
.text:00005716                 mov     ecx, [ebp+arg_0]
.text:00005719                 mov     [eax], ecx
.text:0000571B                 cmp     [ebp+arg_0], 0
.text:0000571F                 jz      short loc_5738
.text:00005721                 mov     edx, [ebp+arg_0]
.text:00005724                 mov     eax, [edx]
.text:00005726                 mov     esi, esp
.text:00005728                 mov     ecx, [ebp+arg_0]
.text:0000572B                 push    ecx
.text:0000572C                 mov     edx, [eax+4]
.text:0000572F                 call    edx
.text:00005731                 cmp     esi, esp
.text:00005733                 call    __RTC_CheckEsp
.text:00005738
.text:00005738 loc_5738:                               ; CODE XREF: CMyComPtr<IInStream>::CMyComPtr<IInStream>(IInStream *)+1Bj
.text:00005738                 mov     eax, [ebp+var_4]
.text:0000573B                 pop     esi
.text:0000573C                 add     esp, 4
.text:0000573F                 cmp     ebp, esp
.text:00005741                 call    __RTC_CheckEsp
.text:00005746                 mov     esp, ebp
.text:00005748                 pop     ebp
.text:00005749                 retn    4
.text:00005749 ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z endp
.text:00005749
.text:00005749 _text           ends
.text:00005749
.text:0000574C ; ===========================================================================
.text:0000574C
.text:0000574C ; Segment type: Pure code
.text:0000574C ; Segment permissions: Read/Execute
.text:0000574C _text           segment para public 'CODE' use32
.text:0000574C                 assume cs:_text
.text:0000574C                 ;org 574Ch
.text:0000574C ; COMDAT (pick any)
.text:0000574C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000574C
.text:0000574C ; =============== S U B R O U T I N E =======================================
.text:0000574C
.text:0000574C ; Attributes: bp-based frame
.text:0000574C
.text:0000574C ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:0000574C                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:0000574C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:0000574C                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1B0p
.text:0000574C                                         ; __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$1+6j ...
.text:0000574C
.text:0000574C var_4           = dword ptr -4
.text:0000574C
.text:0000574C                 push    ebp
.text:0000574D                 mov     ebp, esp
.text:0000574F                 push    ecx
.text:00005750                 push    esi
.text:00005751                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005758                 mov     [ebp+var_4], ecx
.text:0000575B                 mov     eax, [ebp+var_4]
.text:0000575E                 cmp     dword ptr [eax], 0
.text:00005761                 jz      short loc_577E
.text:00005763                 mov     ecx, [ebp+var_4]
.text:00005766                 mov     edx, [ecx]
.text:00005768                 mov     eax, [ebp+var_4]
.text:0000576B                 mov     ecx, [eax]
.text:0000576D                 mov     edx, [edx]
.text:0000576F                 mov     esi, esp
.text:00005771                 push    ecx
.text:00005772                 mov     eax, [edx+8]
.text:00005775                 call    eax
.text:00005777                 cmp     esi, esp
.text:00005779                 call    __RTC_CheckEsp
.text:0000577E
.text:0000577E loc_577E:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:0000577E                 pop     esi
.text:0000577F                 add     esp, 4
.text:00005782                 cmp     ebp, esp
.text:00005784                 call    __RTC_CheckEsp
.text:00005789                 mov     esp, ebp
.text:0000578B                 pop     ebp
.text:0000578C                 retn
.text:0000578C ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:0000578C
.text:0000578C ; ---------------------------------------------------------------------------
.text:0000578D                 align 10h
.text:0000578D _text           ends
.text:0000578D
.text:00005790 ; ===========================================================================
.text:00005790
.text:00005790 ; Segment type: Pure code
.text:00005790 ; Segment permissions: Read/Execute
.text:00005790 _text           segment para public 'CODE' use32
.text:00005790                 assume cs:_text
.text:00005790                 ;org 5790h
.text:00005790 ; COMDAT (pick any)
.text:00005790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005790
.text:00005790 ; =============== S U B R O U T I N E =======================================
.text:00005790
.text:00005790 ; Attributes: bp-based frame
.text:00005790
.text:00005790 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00005790                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00005790 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00005790                                         ; CODE XREF: NArchive::NTar::CHandler::Close(void)+89p
.text:00005790
.text:00005790 var_4           = dword ptr -4
.text:00005790
.text:00005790                 push    ebp
.text:00005791                 mov     ebp, esp
.text:00005793                 push    ecx
.text:00005794                 push    esi
.text:00005795                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000579C                 mov     [ebp+var_4], ecx
.text:0000579F                 mov     eax, [ebp+var_4]
.text:000057A2                 cmp     dword ptr [eax], 0
.text:000057A5                 jz      short loc_57CB
.text:000057A7                 mov     ecx, [ebp+var_4]
.text:000057AA                 mov     edx, [ecx]
.text:000057AC                 mov     eax, [ebp+var_4]
.text:000057AF                 mov     ecx, [eax]
.text:000057B1                 mov     edx, [edx]
.text:000057B3                 mov     esi, esp
.text:000057B5                 push    ecx
.text:000057B6                 mov     eax, [edx+8]
.text:000057B9                 call    eax
.text:000057BB                 cmp     esi, esp
.text:000057BD                 call    __RTC_CheckEsp
.text:000057C2                 mov     ecx, [ebp+var_4]
.text:000057C5                 mov     dword ptr [ecx], 0
.text:000057CB
.text:000057CB loc_57CB:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:000057CB                 pop     esi
.text:000057CC                 add     esp, 4
.text:000057CF                 cmp     ebp, esp
.text:000057D1                 call    __RTC_CheckEsp
.text:000057D6                 mov     esp, ebp
.text:000057D8                 pop     ebp
.text:000057D9                 retn
.text:000057D9 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:000057D9
.text:000057D9 ; ---------------------------------------------------------------------------
.text:000057DA                 align 4
.text:000057DA _text           ends
.text:000057DA
.text:000057DC ; ===========================================================================
.text:000057DC
.text:000057DC ; Segment type: Pure code
.text:000057DC ; Segment permissions: Read/Execute
.text:000057DC _text           segment para public 'CODE' use32
.text:000057DC                 assume cs:_text
.text:000057DC                 ;org 57DCh
.text:000057DC ; COMDAT (pick any)
.text:000057DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057DC
.text:000057DC ; =============== S U B R O U T I N E =======================================
.text:000057DC
.text:000057DC ; Attributes: bp-based frame
.text:000057DC
.text:000057DC ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000057DC                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000057DC ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000057DC                                         ; CODE XREF: NArchive::NTar::CHandler::GetNumberOfItems(uint *)+11p
.text:000057DC                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+57p ...
.text:000057DC
.text:000057DC var_4           = dword ptr -4
.text:000057DC
.text:000057DC                 push    ebp
.text:000057DD                 mov     ebp, esp
.text:000057DF                 push    ecx
.text:000057E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057E7                 mov     [ebp+var_4], ecx
.text:000057EA                 mov     eax, [ebp+var_4]
.text:000057ED                 mov     eax, [eax]
.text:000057EF                 mov     esp, ebp
.text:000057F1                 pop     ebp
.text:000057F2                 retn
.text:000057F2 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000057F2
.text:000057F2 ; ---------------------------------------------------------------------------
.text:000057F3                 align 4
.text:000057F3 _text           ends
.text:000057F3
.text:000057F4 ; ===========================================================================
.text:000057F4
.text:000057F4 ; Segment type: Pure code
.text:000057F4 ; Segment permissions: Read/Execute
.text:000057F4 _text           segment para public 'CODE' use32
.text:000057F4                 assume cs:_text
.text:000057F4                 ;org 57F4h
.text:000057F4 ; COMDAT (pick any)
.text:000057F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057F4
.text:000057F4 ; =============== S U B R O U T I N E =======================================
.text:000057F4
.text:000057F4 ; Attributes: bp-based frame
.text:000057F4
.text:000057F4 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000057F4                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000057F4 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000057F4                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+A1Dp
.text:000057F4                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+264p ...
.text:000057F4
.text:000057F4 var_4           = dword ptr -4
.text:000057F4
.text:000057F4                 push    ebp
.text:000057F5                 mov     ebp, esp
.text:000057F7                 push    ecx
.text:000057F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057FF                 mov     [ebp+var_4], ecx
.text:00005802                 mov     eax, [ebp+var_4]
.text:00005805                 mov     eax, [eax]
.text:00005807                 mov     esp, ebp
.text:00005809                 pop     ebp
.text:0000580A                 retn
.text:0000580A ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:0000580A
.text:0000580A ; ---------------------------------------------------------------------------
.text:0000580B                 align 4
.text:0000580B _text           ends
.text:0000580B
.text:0000580C ; ===========================================================================
.text:0000580C
.text:0000580C ; Segment type: Pure code
.text:0000580C ; Segment permissions: Read/Execute
.text:0000580C _text           segment para public 'CODE' use32
.text:0000580C                 assume cs:_text
.text:0000580C                 ;org 580Ch
.text:0000580C ; COMDAT (pick any)
.text:0000580C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000580C
.text:0000580C ; =============== S U B R O U T I N E =======================================
.text:0000580C
.text:0000580C ; Attributes: bp-based frame
.text:0000580C
.text:0000580C ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:0000580C                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:0000580C ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:0000580C                                         ; CODE XREF: NArchive::NTar::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+8Dp
.text:0000580C
.text:0000580C var_4           = dword ptr -4
.text:0000580C arg_0           = dword ptr  8
.text:0000580C
.text:0000580C                 push    ebp
.text:0000580D                 mov     ebp, esp
.text:0000580F                 push    ecx
.text:00005810                 push    esi
.text:00005811                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005818                 mov     [ebp+var_4], ecx
.text:0000581B                 cmp     [ebp+arg_0], 0
.text:0000581F                 jz      short loc_5838
.text:00005821                 mov     eax, [ebp+arg_0]
.text:00005824                 mov     ecx, [eax]
.text:00005826                 mov     esi, esp
.text:00005828                 mov     edx, [ebp+arg_0]
.text:0000582B                 push    edx
.text:0000582C                 mov     eax, [ecx+4]
.text:0000582F                 call    eax
.text:00005831                 cmp     esi, esp
.text:00005833                 call    __RTC_CheckEsp
.text:00005838
.text:00005838 loc_5838:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:00005838                 mov     ecx, [ebp+var_4]
.text:0000583B                 cmp     dword ptr [ecx], 0
.text:0000583E                 jz      short loc_585B
.text:00005840                 mov     edx, [ebp+var_4]
.text:00005843                 mov     eax, [edx]
.text:00005845                 mov     ecx, [ebp+var_4]
.text:00005848                 mov     edx, [ecx]
.text:0000584A                 mov     eax, [eax]
.text:0000584C                 mov     esi, esp
.text:0000584E                 push    edx
.text:0000584F                 mov     ecx, [eax+8]
.text:00005852                 call    ecx
.text:00005854                 cmp     esi, esp
.text:00005856                 call    __RTC_CheckEsp
.text:0000585B
.text:0000585B loc_585B:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:0000585B                 mov     edx, [ebp+var_4]
.text:0000585E                 mov     eax, [ebp+arg_0]
.text:00005861                 mov     [edx], eax
.text:00005863                 mov     eax, [ebp+arg_0]
.text:00005866                 pop     esi
.text:00005867                 add     esp, 4
.text:0000586A                 cmp     ebp, esp
.text:0000586C                 call    __RTC_CheckEsp
.text:00005871                 mov     esp, ebp
.text:00005873                 pop     ebp
.text:00005874                 retn    4
.text:00005874 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00005874
.text:00005874 ; ---------------------------------------------------------------------------
.text:00005877                 align 4
.text:00005877 _text           ends
.text:00005877
.text:00005878 ; ===========================================================================
.text:00005878
.text:00005878 ; Segment type: Pure code
.text:00005878 ; Segment permissions: Read/Execute
.text:00005878 _text           segment para public 'CODE' use32
.text:00005878                 assume cs:_text
.text:00005878                 ;org 5878h
.text:00005878 ; COMDAT (pick any)
.text:00005878                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005878
.text:00005878 ; =============== S U B R O U T I N E =======================================
.text:00005878
.text:00005878 ; Attributes: bp-based frame
.text:00005878
.text:00005878 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::Detach(void)
.text:00005878                 public ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ
.text:00005878 ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ proc near
.text:00005878                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+192p
.text:00005878
.text:00005878 var_8           = dword ptr -8
.text:00005878 var_4           = dword ptr -4
.text:00005878
.text:00005878                 push    ebp
.text:00005879                 mov     ebp, esp
.text:0000587B                 sub     esp, 8
.text:0000587E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005885                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000588C                 mov     [ebp+var_4], ecx
.text:0000588F                 mov     eax, [ebp+var_4]
.text:00005892                 mov     ecx, [eax]
.text:00005894                 mov     [ebp+var_8], ecx
.text:00005897                 mov     edx, [ebp+var_4]
.text:0000589A                 mov     dword ptr [edx], 0
.text:000058A0                 mov     eax, [ebp+var_8]
.text:000058A3                 mov     esp, ebp
.text:000058A5                 pop     ebp
.text:000058A6                 retn
.text:000058A6 ?Detach@?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@XZ endp
.text:000058A6
.text:000058A6 ; ---------------------------------------------------------------------------
.text:000058A7                 align 4
.text:000058A7 _text           ends
.text:000058A7
.text:000058A8 ; ===========================================================================
.text:000058A8
.text:000058A8 ; Segment type: Pure code
.text:000058A8 ; Segment permissions: Read/Execute
.text:000058A8 _text           segment para public 'CODE' use32
.text:000058A8                 assume cs:_text
.text:000058A8                 ;org 58A8h
.text:000058A8 ; COMDAT (pick any)
.text:000058A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058A8
.text:000058A8 ; =============== S U B R O U T I N E =======================================
.text:000058A8
.text:000058A8 ; Attributes: bp-based frame
.text:000058A8
.text:000058A8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:000058A8                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:000058A8 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:000058A8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3ECp
.text:000058A8                                         ; CLimitedSequentialOutStream::CLimitedSequentialOutStream(void)+30p
.text:000058A8
.text:000058A8 var_4           = dword ptr -4
.text:000058A8
.text:000058A8                 push    ebp
.text:000058A9                 mov     ebp, esp
.text:000058AB                 push    ecx
.text:000058AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058B3                 mov     [ebp+var_4], ecx
.text:000058B6                 mov     eax, [ebp+var_4]
.text:000058B9                 mov     dword ptr [eax], 0
.text:000058BF                 mov     eax, [ebp+var_4]
.text:000058C2                 mov     esp, ebp
.text:000058C4                 pop     ebp
.text:000058C5                 retn
.text:000058C5 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000058C5
.text:000058C5 ; ---------------------------------------------------------------------------
.text:000058C6                 align 4
.text:000058C6 _text           ends
.text:000058C6
.text:000058C8 ; ===========================================================================
.text:000058C8
.text:000058C8 ; Segment type: Pure code
.text:000058C8 ; Segment permissions: Read/Execute
.text:000058C8 _text           segment para public 'CODE' use32
.text:000058C8                 assume cs:_text
.text:000058C8                 ;org 58C8h
.text:000058C8 ; COMDAT (pick any)
.text:000058C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000058C8
.text:000058C8 ; =============== S U B R O U T I N E =======================================
.text:000058C8
.text:000058C8 ; Attributes: bp-based frame
.text:000058C8
.text:000058C8 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(struct ISequentialOutStream *)
.text:000058C8                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
.text:000058C8 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
.text:000058C8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+347p
.text:000058C8
.text:000058C8 var_4           = dword ptr -4
.text:000058C8 arg_0           = dword ptr  8
.text:000058C8
.text:000058C8                 push    ebp
.text:000058C9                 mov     ebp, esp
.text:000058CB                 push    ecx
.text:000058CC                 push    esi
.text:000058CD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000058D4                 mov     [ebp+var_4], ecx
.text:000058D7                 mov     eax, [ebp+var_4]
.text:000058DA                 mov     ecx, [ebp+arg_0]
.text:000058DD                 mov     [eax], ecx
.text:000058DF                 cmp     [ebp+arg_0], 0
.text:000058E3                 jz      short loc_58FC
.text:000058E5                 mov     edx, [ebp+arg_0]
.text:000058E8                 mov     eax, [edx]
.text:000058EA                 mov     esi, esp
.text:000058EC                 mov     ecx, [ebp+arg_0]
.text:000058EF                 push    ecx
.text:000058F0                 mov     edx, [eax+4]
.text:000058F3                 call    edx
.text:000058F5                 cmp     esi, esp
.text:000058F7                 call    __RTC_CheckEsp
.text:000058FC
.text:000058FC loc_58FC:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(ISequentialOutStream *)+1Bj
.text:000058FC                 mov     eax, [ebp+var_4]
.text:000058FF                 pop     esi
.text:00005900                 add     esp, 4
.text:00005903                 cmp     ebp, esp
.text:00005905                 call    __RTC_CheckEsp
.text:0000590A                 mov     esp, ebp
.text:0000590C                 pop     ebp
.text:0000590D                 retn    4
.text:0000590D ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z endp
.text:0000590D
.text:0000590D _text           ends
.text:0000590D
.text:00005910 ; ===========================================================================
.text:00005910
.text:00005910 ; Segment type: Pure code
.text:00005910 ; Segment permissions: Read/Execute
.text:00005910 _text           segment para public 'CODE' use32
.text:00005910                 assume cs:_text
.text:00005910                 ;org 5910h
.text:00005910 ; COMDAT (pick any)
.text:00005910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005910
.text:00005910 ; =============== S U B R O U T I N E =======================================
.text:00005910
.text:00005910 ; Attributes: bp-based frame
.text:00005910
.text:00005910 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:00005910                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:00005910 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:00005910                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3C1p
.text:00005910                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+469p ...
.text:00005910
.text:00005910 var_4           = dword ptr -4
.text:00005910
.text:00005910                 push    ebp
.text:00005911                 mov     ebp, esp
.text:00005913                 push    ecx
.text:00005914                 push    esi
.text:00005915                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000591C                 mov     [ebp+var_4], ecx
.text:0000591F                 mov     eax, [ebp+var_4]
.text:00005922                 cmp     dword ptr [eax], 0
.text:00005925                 jz      short loc_5942
.text:00005927                 mov     ecx, [ebp+var_4]
.text:0000592A                 mov     edx, [ecx]
.text:0000592C                 mov     eax, [ebp+var_4]
.text:0000592F                 mov     ecx, [eax]
.text:00005931                 mov     edx, [edx]
.text:00005933                 mov     esi, esp
.text:00005935                 push    ecx
.text:00005936                 mov     eax, [edx+8]
.text:00005939                 call    eax
.text:0000593B                 cmp     esi, esp
.text:0000593D                 call    __RTC_CheckEsp
.text:00005942
.text:00005942 loc_5942:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:00005942                 pop     esi
.text:00005943                 add     esp, 4
.text:00005946                 cmp     ebp, esp
.text:00005948                 call    __RTC_CheckEsp
.text:0000594D                 mov     esp, ebp
.text:0000594F                 pop     ebp
.text:00005950                 retn
.text:00005950 ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005950
.text:00005950 ; ---------------------------------------------------------------------------
.text:00005951                 align 4
.text:00005951 _text           ends
.text:00005951
.text:00005954 ; ===========================================================================
.text:00005954
.text:00005954 ; Segment type: Pure code
.text:00005954 ; Segment permissions: Read/Execute
.text:00005954 _text           segment para public 'CODE' use32
.text:00005954                 assume cs:_text
.text:00005954                 ;org 5954h
.text:00005954 ; COMDAT (pick any)
.text:00005954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005954
.text:00005954 ; =============== S U B R O U T I N E =======================================
.text:00005954
.text:00005954 ; Attributes: bp-based frame
.text:00005954
.text:00005954 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:00005954                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:00005954 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:00005954                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+802p
.text:00005954                                         ; CLimitedSequentialOutStream::ReleaseStream(void)+14p
.text:00005954
.text:00005954 var_4           = dword ptr -4
.text:00005954
.text:00005954                 push    ebp
.text:00005955                 mov     ebp, esp
.text:00005957                 push    ecx
.text:00005958                 push    esi
.text:00005959                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005960                 mov     [ebp+var_4], ecx
.text:00005963                 mov     eax, [ebp+var_4]
.text:00005966                 cmp     dword ptr [eax], 0
.text:00005969                 jz      short loc_598F
.text:0000596B                 mov     ecx, [ebp+var_4]
.text:0000596E                 mov     edx, [ecx]
.text:00005970                 mov     eax, [ebp+var_4]
.text:00005973                 mov     ecx, [eax]
.text:00005975                 mov     edx, [edx]
.text:00005977                 mov     esi, esp
.text:00005979                 push    ecx
.text:0000597A                 mov     eax, [edx+8]
.text:0000597D                 call    eax
.text:0000597F                 cmp     esi, esp
.text:00005981                 call    __RTC_CheckEsp
.text:00005986                 mov     ecx, [ebp+var_4]
.text:00005989                 mov     dword ptr [ecx], 0
.text:0000598F
.text:0000598F loc_598F:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000598F                 pop     esi
.text:00005990                 add     esp, 4
.text:00005993                 cmp     ebp, esp
.text:00005995                 call    __RTC_CheckEsp
.text:0000599A                 mov     esp, ebp
.text:0000599C                 pop     ebp
.text:0000599D                 retn
.text:0000599D ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:0000599D
.text:0000599D ; ---------------------------------------------------------------------------
.text:0000599E                 align 10h
.text:0000599E _text           ends
.text:0000599E
.text:000059A0 ; ===========================================================================
.text:000059A0
.text:000059A0 ; Segment type: Pure code
.text:000059A0 ; Segment permissions: Read/Execute
.text:000059A0 _text           segment para public 'CODE' use32
.text:000059A0                 assume cs:_text
.text:000059A0                 ;org 59A0h
.text:000059A0 ; COMDAT (pick any)
.text:000059A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059A0
.text:000059A0 ; =============== S U B R O U T I N E =======================================
.text:000059A0
.text:000059A0 ; Attributes: bp-based frame
.text:000059A0
.text:000059A0 ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:000059A0                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:000059A0 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:000059A0                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+7E5p
.text:000059A0                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B43p
.text:000059A0
.text:000059A0 var_4           = dword ptr -4
.text:000059A0
.text:000059A0                 push    ebp
.text:000059A1                 mov     ebp, esp
.text:000059A3                 push    ecx
.text:000059A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059AB                 mov     [ebp+var_4], ecx
.text:000059AE                 mov     eax, [ebp+var_4]
.text:000059B1                 mov     eax, [eax]
.text:000059B3                 mov     esp, ebp
.text:000059B5                 pop     ebp
.text:000059B6                 retn
.text:000059B6 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:000059B6
.text:000059B6 ; ---------------------------------------------------------------------------
.text:000059B7                 align 4
.text:000059B7 _text           ends
.text:000059B7
.text:000059B8 ; ===========================================================================
.text:000059B8
.text:000059B8 ; Segment type: Pure code
.text:000059B8 ; Segment permissions: Read/Execute
.text:000059B8 _text           segment para public 'CODE' use32
.text:000059B8                 assume cs:_text
.text:000059B8                 ;org 59B8h
.text:000059B8 ; COMDAT (pick any)
.text:000059B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059B8
.text:000059B8 ; =============== S U B R O U T I N E =======================================
.text:000059B8
.text:000059B8 ; Attributes: bp-based frame
.text:000059B8
.text:000059B8 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:000059B8                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:000059B8 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:000059B8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4EFp
.text:000059B8
.text:000059B8 var_4           = dword ptr -4
.text:000059B8
.text:000059B8                 push    ebp
.text:000059B9                 mov     ebp, esp
.text:000059BB                 push    ecx
.text:000059BC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059C3                 mov     [ebp+var_4], ecx
.text:000059C6                 mov     eax, [ebp+var_4]
.text:000059C9                 mov     esp, ebp
.text:000059CB                 pop     ebp
.text:000059CC                 retn
.text:000059CC ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:000059CC
.text:000059CC ; ---------------------------------------------------------------------------
.text:000059CD                 align 10h
.text:000059CD _text           ends
.text:000059CD
.text:000059D0 ; ===========================================================================
.text:000059D0
.text:000059D0 ; Segment type: Pure code
.text:000059D0 ; Segment permissions: Read/Execute
.text:000059D0 _text           segment para public 'CODE' use32
.text:000059D0                 assume cs:_text
.text:000059D0                 ;org 59D0h
.text:000059D0 ; COMDAT (pick any)
.text:000059D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000059D0
.text:000059D0 ; =============== S U B R O U T I N E =======================================
.text:000059D0
.text:000059D0 ; Attributes: bp-based frame
.text:000059D0
.text:000059D0 ; public: struct ISequentialOutStream * __thiscall CMyComPtr<struct ISequentialOutStream>::operator=(struct ISequentialOutStream *)
.text:000059D0                 public ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
.text:000059D0 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
.text:000059D0                                         ; CODE XREF: CLimitedSequentialOutStream::SetStream(ISequentialOutStream *)+18p
.text:000059D0
.text:000059D0 var_4           = dword ptr -4
.text:000059D0 arg_0           = dword ptr  8
.text:000059D0
.text:000059D0                 push    ebp
.text:000059D1                 mov     ebp, esp
.text:000059D3                 push    ecx
.text:000059D4                 push    esi
.text:000059D5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000059DC                 mov     [ebp+var_4], ecx
.text:000059DF                 cmp     [ebp+arg_0], 0
.text:000059E3                 jz      short loc_59FC
.text:000059E5                 mov     eax, [ebp+arg_0]
.text:000059E8                 mov     ecx, [eax]
.text:000059EA                 mov     esi, esp
.text:000059EC                 mov     edx, [ebp+arg_0]
.text:000059EF                 push    edx
.text:000059F0                 mov     eax, [ecx+4]
.text:000059F3                 call    eax
.text:000059F5                 cmp     esi, esp
.text:000059F7                 call    __RTC_CheckEsp
.text:000059FC
.text:000059FC loc_59FC:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+13j
.text:000059FC                 mov     ecx, [ebp+var_4]
.text:000059FF                 cmp     dword ptr [ecx], 0
.text:00005A02                 jz      short loc_5A1F
.text:00005A04                 mov     edx, [ebp+var_4]
.text:00005A07                 mov     eax, [edx]
.text:00005A09                 mov     ecx, [ebp+var_4]
.text:00005A0C                 mov     edx, [ecx]
.text:00005A0E                 mov     eax, [eax]
.text:00005A10                 mov     esi, esp
.text:00005A12                 push    edx
.text:00005A13                 mov     ecx, [eax+8]
.text:00005A16                 call    ecx
.text:00005A18                 cmp     esi, esp
.text:00005A1A                 call    __RTC_CheckEsp
.text:00005A1F
.text:00005A1F loc_5A1F:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::operator=(ISequentialOutStream *)+32j
.text:00005A1F                 mov     edx, [ebp+var_4]
.text:00005A22                 mov     eax, [ebp+arg_0]
.text:00005A25                 mov     [edx], eax
.text:00005A27                 mov     eax, [ebp+arg_0]
.text:00005A2A                 pop     esi
.text:00005A2B                 add     esp, 4
.text:00005A2E                 cmp     ebp, esp
.text:00005A30                 call    __RTC_CheckEsp
.text:00005A35                 mov     esp, ebp
.text:00005A37                 pop     ebp
.text:00005A38                 retn    4
.text:00005A38 ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z endp
.text:00005A38
.text:00005A38 ; ---------------------------------------------------------------------------
.text:00005A3B                 align 4
.text:00005A3B _text           ends
.text:00005A3B
.text:00005A3C ; ===========================================================================
.text:00005A3C
.text:00005A3C ; Segment type: Pure code
.text:00005A3C ; Segment permissions: Read/Execute
.text:00005A3C _text           segment para public 'CODE' use32
.text:00005A3C                 assume cs:_text
.text:00005A3C                 ;org 5A3Ch
.text:00005A3C ; COMDAT (pick any)
.text:00005A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A3C
.text:00005A3C ; =============== S U B R O U T I N E =======================================
.text:00005A3C
.text:00005A3C ; Attributes: bp-based frame
.text:00005A3C
.text:00005A3C ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:00005A3C                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:00005A3C ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:00005A3C                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+728p
.text:00005A3C
.text:00005A3C var_4           = dword ptr -4
.text:00005A3C
.text:00005A3C                 push    ebp
.text:00005A3D                 mov     ebp, esp
.text:00005A3F                 push    ecx
.text:00005A40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A47                 mov     [ebp+var_4], ecx
.text:00005A4A                 mov     eax, [ebp+var_4]
.text:00005A4D                 xor     ecx, ecx
.text:00005A4F                 cmp     dword ptr [eax], 0
.text:00005A52                 setz    cl
.text:00005A55                 mov     al, cl
.text:00005A57                 mov     esp, ebp
.text:00005A59                 pop     ebp
.text:00005A5A                 retn
.text:00005A5A ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:00005A5A
.text:00005A5A ; ---------------------------------------------------------------------------
.text:00005A5B                 align 4
.text:00005A5B _text           ends
.text:00005A5B
.text:00005A5C ; ===========================================================================
.text:00005A5C
.text:00005A5C ; Segment type: Pure code
.text:00005A5C ; Segment permissions: Read/Execute
.text:00005A5C _text           segment para public 'CODE' use32
.text:00005A5C                 assume cs:_text
.text:00005A5C                 ;org 5A5Ch
.text:00005A5C ; COMDAT (pick any)
.text:00005A5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005A5C
.text:00005A5C ; =============== S U B R O U T I N E =======================================
.text:00005A5C
.text:00005A5C ; Attributes: bp-based frame
.text:00005A5C
.text:00005A5C ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00005A5C                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00005A5C ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00005A5C                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+237p
.text:00005A5C
.text:00005A5C var_4           = dword ptr -4
.text:00005A5C arg_0           = dword ptr  8
.text:00005A5C
.text:00005A5C                 push    ebp
.text:00005A5D                 mov     ebp, esp
.text:00005A5F                 push    ecx
.text:00005A60                 push    esi
.text:00005A61                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005A68                 mov     [ebp+var_4], ecx
.text:00005A6B                 mov     eax, [ebp+var_4]
.text:00005A6E                 mov     ecx, [ebp+arg_0]
.text:00005A71                 mov     [eax], ecx
.text:00005A73                 cmp     [ebp+arg_0], 0
.text:00005A77                 jz      short loc_5A90
.text:00005A79                 mov     edx, [ebp+arg_0]
.text:00005A7C                 mov     eax, [edx]
.text:00005A7E                 mov     esi, esp
.text:00005A80                 mov     ecx, [ebp+arg_0]
.text:00005A83                 push    ecx
.text:00005A84                 mov     edx, [eax+4]
.text:00005A87                 call    edx
.text:00005A89                 cmp     esi, esp
.text:00005A8B                 call    __RTC_CheckEsp
.text:00005A90
.text:00005A90 loc_5A90:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00005A90                 mov     eax, [ebp+var_4]
.text:00005A93                 pop     esi
.text:00005A94                 add     esp, 4
.text:00005A97                 cmp     ebp, esp
.text:00005A99                 call    __RTC_CheckEsp
.text:00005A9E                 mov     esp, ebp
.text:00005AA0                 pop     ebp
.text:00005AA1                 retn    4
.text:00005AA1 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00005AA1
.text:00005AA1 _text           ends
.text:00005AA1
.text:00005AA4 ; ===========================================================================
.text:00005AA4
.text:00005AA4 ; Segment type: Pure code
.text:00005AA4 ; Segment permissions: Read/Execute
.text:00005AA4 _text           segment para public 'CODE' use32
.text:00005AA4                 assume cs:_text
.text:00005AA4                 ;org 5AA4h
.text:00005AA4 ; COMDAT (pick any)
.text:00005AA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AA4
.text:00005AA4 ; =============== S U B R O U T I N E =======================================
.text:00005AA4
.text:00005AA4 ; Attributes: bp-based frame
.text:00005AA4
.text:00005AA4 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00005AA4                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00005AA4 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00005AA4                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3D9p
.text:00005AA4                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4B3p ...
.text:00005AA4
.text:00005AA4 var_4           = dword ptr -4
.text:00005AA4
.text:00005AA4                 push    ebp
.text:00005AA5                 mov     ebp, esp
.text:00005AA7                 push    ecx
.text:00005AA8                 push    esi
.text:00005AA9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AB0                 mov     [ebp+var_4], ecx
.text:00005AB3                 mov     eax, [ebp+var_4]
.text:00005AB6                 cmp     dword ptr [eax], 0
.text:00005AB9                 jz      short loc_5AD6
.text:00005ABB                 mov     ecx, [ebp+var_4]
.text:00005ABE                 mov     edx, [ecx]
.text:00005AC0                 mov     eax, [ebp+var_4]
.text:00005AC3                 mov     ecx, [eax]
.text:00005AC5                 mov     edx, [edx]
.text:00005AC7                 mov     esi, esp
.text:00005AC9                 push    ecx
.text:00005ACA                 mov     eax, [edx+8]
.text:00005ACD                 call    eax
.text:00005ACF                 cmp     esi, esp
.text:00005AD1                 call    __RTC_CheckEsp
.text:00005AD6
.text:00005AD6 loc_5AD6:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00005AD6                 pop     esi
.text:00005AD7                 add     esp, 4
.text:00005ADA                 cmp     ebp, esp
.text:00005ADC                 call    __RTC_CheckEsp
.text:00005AE1                 mov     esp, ebp
.text:00005AE3                 pop     ebp
.text:00005AE4                 retn
.text:00005AE4 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00005AE4
.text:00005AE4 ; ---------------------------------------------------------------------------
.text:00005AE5                 align 4
.text:00005AE5 _text           ends
.text:00005AE5
.text:00005AE8 ; ===========================================================================
.text:00005AE8
.text:00005AE8 ; Segment type: Pure code
.text:00005AE8 ; Segment permissions: Read/Execute
.text:00005AE8 _text           segment para public 'CODE' use32
.text:00005AE8                 assume cs:_text
.text:00005AE8                 ;org 5AE8h
.text:00005AE8 ; COMDAT (pick any)
.text:00005AE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005AE8
.text:00005AE8 ; =============== S U B R O U T I N E =======================================
.text:00005AE8
.text:00005AE8 ; Attributes: bp-based frame
.text:00005AE8
.text:00005AE8 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00005AE8                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00005AE8 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00005AE8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B35p
.text:00005AE8
.text:00005AE8 var_4           = dword ptr -4
.text:00005AE8
.text:00005AE8                 push    ebp
.text:00005AE9                 mov     ebp, esp
.text:00005AEB                 push    ecx
.text:00005AEC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005AF3                 mov     [ebp+var_4], ecx
.text:00005AF6                 mov     eax, [ebp+var_4]
.text:00005AF9                 mov     eax, [eax]
.text:00005AFB                 mov     esp, ebp
.text:00005AFD                 pop     ebp
.text:00005AFE                 retn
.text:00005AFE ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00005AFE
.text:00005AFE ; ---------------------------------------------------------------------------
.text:00005AFF                 align 10h
.text:00005AFF _text           ends
.text:00005AFF
.text:00005B00 ; ===========================================================================
.text:00005B00
.text:00005B00 ; Segment type: Pure code
.text:00005B00 ; Segment permissions: Read/Execute
.text:00005B00 _text           segment para public 'CODE' use32
.text:00005B00                 assume cs:_text
.text:00005B00                 ;org 5B00h
.text:00005B00 ; COMDAT (pick any)
.text:00005B00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B00
.text:00005B00 ; =============== S U B R O U T I N E =======================================
.text:00005B00
.text:00005B00 ; Attributes: bp-based frame
.text:00005B00
.text:00005B00 ; public: __thiscall CMyComPtr<struct IUnknown>::CMyComPtr<struct IUnknown>(void)
.text:00005B00                 public ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005B00 ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005B00                                         ; CODE XREF: NArchive::NTar::CSparseStream::CSparseStream(void)+4Fp
.text:00005B00
.text:00005B00 var_4           = dword ptr -4
.text:00005B00
.text:00005B00                 push    ebp
.text:00005B01                 mov     ebp, esp
.text:00005B03                 push    ecx
.text:00005B04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B0B                 mov     [ebp+var_4], ecx
.text:00005B0E                 mov     eax, [ebp+var_4]
.text:00005B11                 mov     dword ptr [eax], 0
.text:00005B17                 mov     eax, [ebp+var_4]
.text:00005B1A                 mov     esp, ebp
.text:00005B1C                 pop     ebp
.text:00005B1D                 retn
.text:00005B1D ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00005B1D
.text:00005B1D ; ---------------------------------------------------------------------------
.text:00005B1E                 align 10h
.text:00005B1E _text           ends
.text:00005B1E
.text:00005B20 ; ===========================================================================
.text:00005B20
.text:00005B20 ; Segment type: Pure code
.text:00005B20 ; Segment permissions: Read/Execute
.text:00005B20 _text           segment para public 'CODE' use32
.text:00005B20                 assume cs:_text
.text:00005B20                 ;org 5B20h
.text:00005B20 ; COMDAT (pick any)
.text:00005B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B20
.text:00005B20 ; =============== S U B R O U T I N E =======================================
.text:00005B20
.text:00005B20 ; Attributes: bp-based frame
.text:00005B20
.text:00005B20 ; public: __thiscall CMyComPtr<struct IUnknown>::~CMyComPtr<struct IUnknown>(void)
.text:00005B20                 public ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
.text:00005B20 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
.text:00005B20                                         ; CODE XREF: __unwindfunclet$??0CSparseStream@NTar@NArchive@@QAE@XZ$0+6j
.text:00005B20                                         ; NArchive::NTar::CSparseStream::~CSparseStream(void)+4Cp ...
.text:00005B20
.text:00005B20 var_4           = dword ptr -4
.text:00005B20
.text:00005B20                 push    ebp
.text:00005B21                 mov     ebp, esp
.text:00005B23                 push    ecx
.text:00005B24                 push    esi
.text:00005B25                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B2C                 mov     [ebp+var_4], ecx
.text:00005B2F                 mov     eax, [ebp+var_4]
.text:00005B32                 cmp     dword ptr [eax], 0
.text:00005B35                 jz      short loc_5B52
.text:00005B37                 mov     ecx, [ebp+var_4]
.text:00005B3A                 mov     edx, [ecx]
.text:00005B3C                 mov     eax, [ebp+var_4]
.text:00005B3F                 mov     ecx, [eax]
.text:00005B41                 mov     edx, [edx]
.text:00005B43                 mov     esi, esp
.text:00005B45                 push    ecx
.text:00005B46                 mov     eax, [edx+8]
.text:00005B49                 call    eax
.text:00005B4B                 cmp     esi, esp
.text:00005B4D                 call    __RTC_CheckEsp
.text:00005B52
.text:00005B52 loc_5B52:                               ; CODE XREF: CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>(void)+15j
.text:00005B52                 pop     esi
.text:00005B53                 add     esp, 4
.text:00005B56                 cmp     ebp, esp
.text:00005B58                 call    __RTC_CheckEsp
.text:00005B5D                 mov     esp, ebp
.text:00005B5F                 pop     ebp
.text:00005B60                 retn
.text:00005B60 ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ endp
.text:00005B60
.text:00005B60 ; ---------------------------------------------------------------------------
.text:00005B61                 align 4
.text:00005B61 _text           ends
.text:00005B61
.text:00005B64 ; ===========================================================================
.text:00005B64
.text:00005B64 ; Segment type: Pure code
.text:00005B64 ; Segment permissions: Read/Execute
.text:00005B64 _text           segment para public 'CODE' use32
.text:00005B64                 assume cs:_text
.text:00005B64                 ;org 5B64h
.text:00005B64 ; COMDAT (pick any)
.text:00005B64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005B64
.text:00005B64 ; =============== S U B R O U T I N E =======================================
.text:00005B64
.text:00005B64 ; Attributes: bp-based frame
.text:00005B64
.text:00005B64 ; public: struct IUnknown * __thiscall CMyComPtr<struct IUnknown>::operator=(struct IUnknown *)
.text:00005B64                 public ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
.text:00005B64 ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
.text:00005B64                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+ECp
.text:00005B64
.text:00005B64 var_4           = dword ptr -4
.text:00005B64 arg_0           = dword ptr  8
.text:00005B64
.text:00005B64                 push    ebp
.text:00005B65                 mov     ebp, esp
.text:00005B67                 push    ecx
.text:00005B68                 push    esi
.text:00005B69                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005B70                 mov     [ebp+var_4], ecx
.text:00005B73                 cmp     [ebp+arg_0], 0
.text:00005B77                 jz      short loc_5B90
.text:00005B79                 mov     eax, [ebp+arg_0]
.text:00005B7C                 mov     ecx, [eax]
.text:00005B7E                 mov     esi, esp
.text:00005B80                 mov     edx, [ebp+arg_0]
.text:00005B83                 push    edx
.text:00005B84                 mov     eax, [ecx+4]
.text:00005B87                 call    eax
.text:00005B89                 cmp     esi, esp
.text:00005B8B                 call    __RTC_CheckEsp
.text:00005B90
.text:00005B90 loc_5B90:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+13j
.text:00005B90                 mov     ecx, [ebp+var_4]
.text:00005B93                 cmp     dword ptr [ecx], 0
.text:00005B96                 jz      short loc_5BB3
.text:00005B98                 mov     edx, [ebp+var_4]
.text:00005B9B                 mov     eax, [edx]
.text:00005B9D                 mov     ecx, [ebp+var_4]
.text:00005BA0                 mov     edx, [ecx]
.text:00005BA2                 mov     eax, [eax]
.text:00005BA4                 mov     esi, esp
.text:00005BA6                 push    edx
.text:00005BA7                 mov     ecx, [eax+8]
.text:00005BAA                 call    ecx
.text:00005BAC                 cmp     esi, esp
.text:00005BAE                 call    __RTC_CheckEsp
.text:00005BB3
.text:00005BB3 loc_5BB3:                               ; CODE XREF: CMyComPtr<IUnknown>::operator=(IUnknown *)+32j
.text:00005BB3                 mov     edx, [ebp+var_4]
.text:00005BB6                 mov     eax, [ebp+arg_0]
.text:00005BB9                 mov     [edx], eax
.text:00005BBB                 mov     eax, [ebp+arg_0]
.text:00005BBE                 pop     esi
.text:00005BBF                 add     esp, 4
.text:00005BC2                 cmp     ebp, esp
.text:00005BC4                 call    __RTC_CheckEsp
.text:00005BC9                 mov     esp, ebp
.text:00005BCB                 pop     ebp
.text:00005BCC                 retn    4
.text:00005BCC ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z endp
.text:00005BCC
.text:00005BCC ; ---------------------------------------------------------------------------
.text:00005BCF                 align 10h
.text:00005BCF _text           ends
.text:00005BCF
.text:00005BD0 ; ===========================================================================
.text:00005BD0
.text:00005BD0 ; Segment type: Pure code
.text:00005BD0 ; Segment permissions: Read/Execute
.text:00005BD0 _text           segment para public 'CODE' use32
.text:00005BD0                 assume cs:_text
.text:00005BD0                 ;org 5BD0h
.text:00005BD0 ; COMDAT (pick any)
.text:00005BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005BD0
.text:00005BD0 ; =============== S U B R O U T I N E =======================================
.text:00005BD0
.text:00005BD0 ; Attributes: bp-based frame
.text:00005BD0
.text:00005BD0 ; public: __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::CRecordVector<struct NArchive::NTar::CSparseBlock>(void)
.text:00005BD0                 public ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
.text:00005BD0 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ proc near
.text:00005BD0                                         ; CODE XREF: NArchive::NTar::CItem::CItem(void)+6Fp
.text:00005BD0
.text:00005BD0 var_4           = dword ptr -4
.text:00005BD0
.text:00005BD0                 push    ebp
.text:00005BD1                 mov     ebp, esp
.text:00005BD3                 push    ecx
.text:00005BD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005BDB                 mov     [ebp+var_4], ecx
.text:00005BDE                 mov     eax, [ebp+var_4]
.text:00005BE1                 mov     dword ptr [eax], 0
.text:00005BE7                 mov     ecx, [ebp+var_4]
.text:00005BEA                 mov     dword ptr [ecx+4], 0
.text:00005BF1                 mov     edx, [ebp+var_4]
.text:00005BF4                 mov     dword ptr [edx+8], 0
.text:00005BFB                 mov     eax, [ebp+var_4]
.text:00005BFE                 mov     esp, ebp
.text:00005C00                 pop     ebp
.text:00005C01                 retn
.text:00005C01 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ endp
.text:00005C01
.text:00005C01 ; ---------------------------------------------------------------------------
.text:00005C02                 align 4
.text:00005C02 _text           ends
.text:00005C02
.text:00005C04 ; ===========================================================================
.text:00005C04
.text:00005C04 ; Segment type: Pure code
.text:00005C04 ; Segment permissions: Read/Execute
.text:00005C04 _text           segment para public 'CODE' use32
.text:00005C04                 assume cs:_text
.text:00005C04                 ;org 5C04h
.text:00005C04 ; COMDAT (pick any)
.text:00005C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C04
.text:00005C04 ; =============== S U B R O U T I N E =======================================
.text:00005C04
.text:00005C04 ; Attributes: bp-based frame
.text:00005C04
.text:00005C04 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::Size(void)const
.text:00005C04                 public ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ
.text:00005C04 ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ proc near
.text:00005C04                                         ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+FAp
.text:00005C04                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+380p ...
.text:00005C04
.text:00005C04 var_4           = dword ptr -4
.text:00005C04
.text:00005C04                 push    ebp
.text:00005C05                 mov     ebp, esp
.text:00005C07                 push    ecx
.text:00005C08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C0F                 mov     [ebp+var_4], ecx
.text:00005C12                 mov     eax, [ebp+var_4]
.text:00005C15                 mov     eax, [eax+4]
.text:00005C18                 mov     esp, ebp
.text:00005C1A                 pop     ebp
.text:00005C1B                 retn
.text:00005C1B ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ endp
.text:00005C1B
.text:00005C1B _text           ends
.text:00005C1B
.text:00005C1C ; ===========================================================================
.text:00005C1C
.text:00005C1C ; Segment type: Pure code
.text:00005C1C ; Segment permissions: Read/Execute
.text:00005C1C _text           segment para public 'CODE' use32
.text:00005C1C                 assume cs:_text
.text:00005C1C                 ;org 5C1Ch
.text:00005C1C ; COMDAT (pick any)
.text:00005C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C1C
.text:00005C1C ; =============== S U B R O U T I N E =======================================
.text:00005C1C
.text:00005C1C ; Attributes: bp-based frame
.text:00005C1C
.text:00005C1C ; public: bool __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::IsEmpty(void)const
.text:00005C1C                 public ?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ
.text:00005C1C ?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ proc near
.text:00005C1C                                         ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+CAp
.text:00005C1C
.text:00005C1C var_4           = dword ptr -4
.text:00005C1C
.text:00005C1C                 push    ebp
.text:00005C1D                 mov     ebp, esp
.text:00005C1F                 push    ecx
.text:00005C20                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C27                 mov     [ebp+var_4], ecx
.text:00005C2A                 mov     eax, [ebp+var_4]
.text:00005C2D                 xor     ecx, ecx
.text:00005C2F                 cmp     dword ptr [eax+4], 0
.text:00005C33                 setz    cl
.text:00005C36                 mov     al, cl
.text:00005C38                 mov     esp, ebp
.text:00005C3A                 pop     ebp
.text:00005C3B                 retn
.text:00005C3B ?IsEmpty@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBE_NXZ endp
.text:00005C3B
.text:00005C3B _text           ends
.text:00005C3B
.text:00005C3C ; ===========================================================================
.text:00005C3C
.text:00005C3C ; Segment type: Pure code
.text:00005C3C ; Segment permissions: Read/Execute
.text:00005C3C _text           segment para public 'CODE' use32
.text:00005C3C                 assume cs:_text
.text:00005C3C                 ;org 5C3Ch
.text:00005C3C ; COMDAT (pick any)
.text:00005C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C3C
.text:00005C3C ; =============== S U B R O U T I N E =======================================
.text:00005C3C
.text:00005C3C ; Attributes: bp-based frame
.text:00005C3C
.text:00005C3C ; public: __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::~CRecordVector<struct NArchive::NTar::CSparseBlock>(void)
.text:00005C3C                 public ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
.text:00005C3C ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ proc near
.text:00005C3C                                         ; CODE XREF: NArchive::NTar::CItem::~CItem(void)+3Ap
.text:00005C3C
.text:00005C3C var_8           = dword ptr -8
.text:00005C3C var_4           = dword ptr -4
.text:00005C3C
.text:00005C3C                 push    ebp
.text:00005C3D                 mov     ebp, esp
.text:00005C3F                 sub     esp, 8
.text:00005C42                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C49                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C50                 mov     [ebp+var_4], ecx
.text:00005C53                 mov     eax, [ebp+var_4]
.text:00005C56                 mov     ecx, [eax]
.text:00005C58                 mov     [ebp+var_8], ecx
.text:00005C5B                 mov     edx, [ebp+var_8]
.text:00005C5E                 push    edx             ; void *
.text:00005C5F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005C64                 add     esp, 4
.text:00005C67                 add     esp, 8
.text:00005C6A                 cmp     ebp, esp
.text:00005C6C                 call    __RTC_CheckEsp
.text:00005C71                 mov     esp, ebp
.text:00005C73                 pop     ebp
.text:00005C74                 retn
.text:00005C74 ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ endp
.text:00005C74
.text:00005C74 ; ---------------------------------------------------------------------------
.text:00005C75                 align 4
.text:00005C75 _text           ends
.text:00005C75
.text:00005C78 ; ===========================================================================
.text:00005C78
.text:00005C78 ; Segment type: Pure code
.text:00005C78 ; Segment permissions: Read/Execute
.text:00005C78 _text           segment para public 'CODE' use32
.text:00005C78                 assume cs:_text
.text:00005C78                 ;org 5C78h
.text:00005C78 ; COMDAT (pick any)
.text:00005C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C78
.text:00005C78 ; =============== S U B R O U T I N E =======================================
.text:00005C78
.text:00005C78 ; Attributes: bp-based frame
.text:00005C78
.text:00005C78 ; public: struct NArchive::NTar::CSparseBlock const & __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::operator[](unsigned int)const
.text:00005C78                 public ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z
.text:00005C78 ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z proc near
.text:00005C78                                         ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+121p
.text:00005C78                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+166p ...
.text:00005C78
.text:00005C78 var_4           = dword ptr -4
.text:00005C78 arg_0           = dword ptr  8
.text:00005C78
.text:00005C78                 push    ebp
.text:00005C79                 mov     ebp, esp
.text:00005C7B                 push    ecx
.text:00005C7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C83                 mov     [ebp+var_4], ecx
.text:00005C86                 mov     eax, [ebp+arg_0]
.text:00005C89                 shl     eax, 4
.text:00005C8C                 mov     ecx, [ebp+var_4]
.text:00005C8F                 add     eax, [ecx]
.text:00005C91                 mov     esp, ebp
.text:00005C93                 pop     ebp
.text:00005C94                 retn    4
.text:00005C94 ??A?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEABUCSparseBlock@NTar@NArchive@@I@Z endp
.text:00005C94
.text:00005C94 ; ---------------------------------------------------------------------------
.text:00005C97                 align 4
.text:00005C97 _text           ends
.text:00005C97
.text:00005C98 ; ===========================================================================
.text:00005C98
.text:00005C98 ; Segment type: Pure code
.text:00005C98 ; Segment permissions: Read/Execute
.text:00005C98 _text           segment para public 'CODE' use32
.text:00005C98                 assume cs:_text
.text:00005C98                 ;org 5C98h
.text:00005C98 ; COMDAT (pick any)
.text:00005C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005C98
.text:00005C98 ; =============== S U B R O U T I N E =======================================
.text:00005C98
.text:00005C98 ; Attributes: bp-based frame
.text:00005C98
.text:00005C98 ; public: unsigned int __thiscall CObjectVector<struct NArchive::NTar::CItemEx>::Size(void)const
.text:00005C98                 public ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ
.text:00005C98 ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ proc near
.text:00005C98                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2D3p
.text:00005C98                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+338p ...
.text:00005C98
.text:00005C98 var_4           = dword ptr -4
.text:00005C98
.text:00005C98                 push    ebp
.text:00005C99                 mov     ebp, esp
.text:00005C9B                 push    ecx
.text:00005C9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CA3                 mov     [ebp+var_4], ecx
.text:00005CA6                 mov     ecx, [ebp+var_4]
.text:00005CA9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005CAE                 add     esp, 4
.text:00005CB1                 cmp     ebp, esp
.text:00005CB3                 call    __RTC_CheckEsp
.text:00005CB8                 mov     esp, ebp
.text:00005CBA                 pop     ebp
.text:00005CBB                 retn
.text:00005CBB ?Size@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEIXZ endp
.text:00005CBB
.text:00005CBB _text           ends
.text:00005CBB
.text:00005CBC ; ===========================================================================
.text:00005CBC
.text:00005CBC ; Segment type: Pure code
.text:00005CBC ; Segment permissions: Read/Execute
.text:00005CBC _text           segment para public 'CODE' use32
.text:00005CBC                 assume cs:_text
.text:00005CBC                 ;org 5CBCh
.text:00005CBC ; COMDAT (pick any)
.text:00005CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CBC
.text:00005CBC ; =============== S U B R O U T I N E =======================================
.text:00005CBC
.text:00005CBC ; Attributes: bp-based frame
.text:00005CBC
.text:00005CBC ; public: __thiscall CObjectVector<struct NArchive::NTar::CItemEx>::CObjectVector<struct NArchive::NTar::CItemEx>(void)
.text:00005CBC                 public ??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
.text:00005CBC ??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ proc near
.text:00005CBC                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+AFp
.text:00005CBC
.text:00005CBC var_4           = dword ptr -4
.text:00005CBC
.text:00005CBC                 push    ebp
.text:00005CBD                 mov     ebp, esp
.text:00005CBF                 push    ecx
.text:00005CC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CC7                 mov     [ebp+var_4], ecx
.text:00005CCA                 mov     ecx, [ebp+var_4]
.text:00005CCD                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005CD2                 mov     eax, [ebp+var_4]
.text:00005CD5                 add     esp, 4
.text:00005CD8                 cmp     ebp, esp
.text:00005CDA                 call    __RTC_CheckEsp
.text:00005CDF                 mov     esp, ebp
.text:00005CE1                 pop     ebp
.text:00005CE2                 retn
.text:00005CE2 ??0?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ endp
.text:00005CE2
.text:00005CE2 ; ---------------------------------------------------------------------------
.text:00005CE3                 align 4
.text:00005CE3 _text           ends
.text:00005CE3
.text:00005CE4 ; ===========================================================================
.text:00005CE4
.text:00005CE4 ; Segment type: Pure code
.text:00005CE4 ; Segment permissions: Read/Execute
.text:00005CE4 _text           segment para public 'CODE' use32
.text:00005CE4                 assume cs:_text
.text:00005CE4                 ;org 5CE4h
.text:00005CE4 ; COMDAT (pick any)
.text:00005CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005CE4
.text:00005CE4 ; =============== S U B R O U T I N E =======================================
.text:00005CE4
.text:00005CE4 ; Attributes: bp-based frame
.text:00005CE4
.text:00005CE4 ; public: struct NArchive::NTar::CItemEx & __thiscall CObjectVector<struct NArchive::NTar::CItemEx>::operator[](unsigned int)
.text:00005CE4                 public ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z
.text:00005CE4 ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z proc near
.text:00005CE4                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+6Fp
.text:00005CE4                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+150p ...
.text:00005CE4
.text:00005CE4 var_4           = dword ptr -4
.text:00005CE4 arg_0           = dword ptr  8
.text:00005CE4
.text:00005CE4                 push    ebp
.text:00005CE5                 mov     ebp, esp
.text:00005CE7                 push    ecx
.text:00005CE8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005CEF                 mov     [ebp+var_4], ecx
.text:00005CF2                 mov     eax, [ebp+arg_0]
.text:00005CF5                 push    eax
.text:00005CF6                 mov     ecx, [ebp+var_4]
.text:00005CF9                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005CFE                 mov     eax, [eax]
.text:00005D00                 add     esp, 4
.text:00005D03                 cmp     ebp, esp
.text:00005D05                 call    __RTC_CheckEsp
.text:00005D0A                 mov     esp, ebp
.text:00005D0C                 pop     ebp
.text:00005D0D                 retn    4
.text:00005D0D ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEAAUCItemEx@NTar@NArchive@@I@Z endp
.text:00005D0D
.text:00005D0D _text           ends
.text:00005D0D
.text:00005D10 ; ===========================================================================
.text:00005D10
.text:00005D10 ; Segment type: Pure code
.text:00005D10 ; Segment permissions: Read/Execute
.text:00005D10 _text           segment para public 'CODE' use32
.text:00005D10                 assume cs:_text
.text:00005D10                 ;org 5D10h
.text:00005D10 ; COMDAT (pick any)
.text:00005D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005D10
.text:00005D10 ; =============== S U B R O U T I N E =======================================
.text:00005D10
.text:00005D10 ; Attributes: bp-based frame
.text:00005D10
.text:00005D10 ; int __stdcall CObjectVector<NArchive::NTar::CItemEx>::Add(struct NArchive::NTar::CItemEx *)
.text:00005D10                 public ?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
.text:00005D10 ?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z proc near
.text:00005D10                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+182p
.text:00005D10
.text:00005D10 var_1C          = dword ptr -1Ch
.text:00005D10 var_18          = dword ptr -18h
.text:00005D10 var_14          = dword ptr -14h
.text:00005D10 var_10          = dword ptr -10h
.text:00005D10 var_C           = dword ptr -0Ch
.text:00005D10 var_4           = dword ptr -4
.text:00005D10 arg_0           = dword ptr  8
.text:00005D10
.text:00005D10                 push    ebp
.text:00005D11                 mov     ebp, esp
.text:00005D13                 push    0FFFFFFFFh
.text:00005D15                 push    offset __ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
.text:00005D1A                 mov     eax, large fs:0
.text:00005D20                 push    eax
.text:00005D21                 sub     esp, 10h
.text:00005D24                 mov     eax, 0CCCCCCCCh
.text:00005D29                 mov     [ebp+var_1C], eax
.text:00005D2C                 mov     [ebp+var_18], eax
.text:00005D2F                 mov     [ebp+var_14], eax
.text:00005D32                 mov     [ebp+var_10], eax
.text:00005D35                 mov     eax, dword ptr ds:___security_cookie
.text:00005D3A                 xor     eax, ebp
.text:00005D3C                 push    eax
.text:00005D3D                 lea     eax, [ebp+var_C]
.text:00005D40                 mov     large fs:0, eax
.text:00005D46                 mov     [ebp+var_10], ecx
.text:00005D49                 push    88h ; 'ê'       ; unsigned int
.text:00005D4E                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00005D53                 add     esp, 4
.text:00005D56                 mov     [ebp+var_18], eax
.text:00005D59                 mov     [ebp+var_4], 0
.text:00005D60                 cmp     [ebp+var_18], 0
.text:00005D64                 jz      short loc_5D77
.text:00005D66                 mov     eax, [ebp+arg_0]
.text:00005D69                 push    eax             ; struct NArchive::NTar::CItemEx *
.text:00005D6A                 mov     ecx, [ebp+var_18] ; this
.text:00005D6D                 call    ??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z ; NArchive::NTar::CItemEx::CItemEx(NArchive::NTar::CItemEx const &)
.text:00005D72                 mov     [ebp+var_1C], eax
.text:00005D75                 jmp     short loc_5D7E
.text:00005D77 ; ---------------------------------------------------------------------------
.text:00005D77
.text:00005D77 loc_5D77:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)+54j
.text:00005D77                 mov     [ebp+var_1C], 0
.text:00005D7E
.text:00005D7E loc_5D7E:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)+65j
.text:00005D7E                 mov     ecx, [ebp+var_1C]
.text:00005D81                 mov     [ebp+var_14], ecx
.text:00005D84                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005D8B                 mov     edx, [ebp+var_14]
.text:00005D8E                 push    edx
.text:00005D8F                 mov     ecx, [ebp+var_10]
.text:00005D92                 call    ?Add@?$CRecordVector@PAX@@QAEIQAX@Z ; CRecordVector<void *>::Add(void * const)
.text:00005D97                 mov     ecx, [ebp+var_C]
.text:00005D9A                 mov     large fs:0, ecx
.text:00005DA1                 pop     ecx
.text:00005DA2                 add     esp, 1Ch
.text:00005DA5                 cmp     ebp, esp
.text:00005DA7                 call    __RTC_CheckEsp
.text:00005DAC                 mov     esp, ebp
.text:00005DAE                 pop     ebp
.text:00005DAF                 retn    4
.text:00005DAF ?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z endp
.text:00005DAF
.text:00005DAF ; ---------------------------------------------------------------------------
.text:00005DB2                 align 4
.text:00005DB2 _text           ends
.text:00005DB2
.text$x:00005DB4 ; ===========================================================================
.text$x:00005DB4
.text$x:00005DB4 ; Segment type: Pure code
.text$x:00005DB4 ; Segment permissions: Read/Execute
.text$x:00005DB4 _text$x         segment para public 'CODE' use32
.text$x:00005DB4                 assume cs:_text$x
.text$x:00005DB4                 ;org 5DB4h
.text$x:00005DB4 ; COMDAT (pick associative to section at 5D10)
.text$x:00005DB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005DB4
.text$x:00005DB4 ; =============== S U B R O U T I N E =======================================
.text$x:00005DB4
.text$x:00005DB4
.text$x:00005DB4 __unwindfunclet$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z$0 proc near
.text$x:00005DB4                                         ; DATA XREF: .xdata$x:00005DE0o
.text$x:00005DB4                 mov     eax, [ebp-18h]
.text$x:00005DB7                 push    eax             ; void *
.text$x:00005DB8                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00005DBD                 pop     ecx
.text$x:00005DBE                 retn
.text$x:00005DBE __unwindfunclet$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z$0 endp
.text$x:00005DBE
.text$x:00005DBF
.text$x:00005DBF ; =============== S U B R O U T I N E =======================================
.text$x:00005DBF
.text$x:00005DBF
.text$x:00005DBF __ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z proc near
.text$x:00005DBF                                         ; DATA XREF: CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)+5o
.text$x:00005DBF
.text$x:00005DBF arg_4           = dword ptr  8
.text$x:00005DBF
.text$x:00005DBF                 mov     edx, [esp+arg_4]
.text$x:00005DC3                 lea     eax, [edx+0Ch]
.text$x:00005DC6                 mov     ecx, [edx-14h]
.text$x:00005DC9                 xor     ecx, eax
.text$x:00005DCB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DD0                 mov     eax, offset __ehfuncinfo$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
.text$x:00005DD5                 jmp     ___CxxFrameHandler3
.text$x:00005DD5 __ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z endp
.text$x:00005DD5
.text$x:00005DD5 ; ---------------------------------------------------------------------------
.text$x:00005DDA                 align 4
.text$x:00005DDA _text$x         ends
.text$x:00005DDA
.xdata$x:00005DDC ; ===========================================================================
.xdata$x:00005DDC
.xdata$x:00005DDC ; Segment type: Pure data
.xdata$x:00005DDC ; Segment permissions: Read
.xdata$x:00005DDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005DDC                 assume cs:_xdata$x
.xdata$x:00005DDC                 ;org 5DDCh
.xdata$x:00005DDC ; COMDAT (pick associative to section at 5D10)
.xdata$x:00005DDC __unwindtable$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z db 0FFh
.xdata$x:00005DDC                                         ; DATA XREF: .xdata$x:00005DECo
.xdata$x:00005DDD                 db 0FFh
.xdata$x:00005DDE                 db 0FFh
.xdata$x:00005DDF                 db 0FFh
.xdata$x:00005DE0                 dd offset __unwindfunclet$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z$0
.xdata$x:00005DE4 __ehfuncinfo$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z db  22h ; "
.xdata$x:00005DE4                                         ; DATA XREF: __ehhandler$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z+11o
.xdata$x:00005DE5                 db    5
.xdata$x:00005DE6                 db  93h ; ô
.xdata$x:00005DE7                 db  19h
.xdata$x:00005DE8                 db    1
.xdata$x:00005DE9                 db    0
.xdata$x:00005DEA                 db    0
.xdata$x:00005DEB                 db    0
.xdata$x:00005DEC                 dd offset __unwindtable$?Add@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEIABUCItemEx@NTar@NArchive@@@Z
.xdata$x:00005DF0                 db    0
.xdata$x:00005DF1                 db    0
.xdata$x:00005DF2                 db    0
.xdata$x:00005DF3                 db    0
.xdata$x:00005DF4                 db    0
.xdata$x:00005DF5                 db    0
.xdata$x:00005DF6                 db    0
.xdata$x:00005DF7                 db    0
.xdata$x:00005DF8                 db    0
.xdata$x:00005DF9                 db    0
.xdata$x:00005DFA                 db    0
.xdata$x:00005DFB                 db    0
.xdata$x:00005DFC                 db    0
.xdata$x:00005DFD                 db    0
.xdata$x:00005DFE                 db    0
.xdata$x:00005DFF                 db    0
.xdata$x:00005E00                 db    0
.xdata$x:00005E01                 db    0
.xdata$x:00005E02                 db    0
.xdata$x:00005E03                 db    0
.xdata$x:00005E04                 db    1
.xdata$x:00005E05                 db    0
.xdata$x:00005E06                 db    0
.xdata$x:00005E07                 db    0
.xdata$x:00005E07 _xdata$x        ends
.xdata$x:00005E07
.text:00005E08 ; ===========================================================================
.text:00005E08
.text:00005E08 ; Segment type: Pure code
.text:00005E08 ; Segment permissions: Read/Execute
.text:00005E08 _text           segment para public 'CODE' use32
.text:00005E08                 assume cs:_text
.text:00005E08                 ;org 5E08h
.text:00005E08 ; COMDAT (pick any)
.text:00005E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005E08
.text:00005E08 ; =============== S U B R O U T I N E =======================================
.text:00005E08
.text:00005E08 ; Attributes: bp-based frame
.text:00005E08
.text:00005E08 ; public: __thiscall CObjectVector<struct NArchive::NTar::CItemEx>::~CObjectVector<struct NArchive::NTar::CItemEx>(void)
.text:00005E08                 public ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
.text:00005E08 ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ proc near
.text:00005E08                                         ; CODE XREF: __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$0+6j
.text:00005E08                                         ; NArchive::NTar::CHandler::~CHandler(void)+7Cp ...
.text:00005E08
.text:00005E08 var_20          = dword ptr -20h
.text:00005E08 var_1C          = dword ptr -1Ch
.text:00005E08 var_18          = dword ptr -18h
.text:00005E08 var_14          = dword ptr -14h
.text:00005E08 var_10          = dword ptr -10h
.text:00005E08 var_C           = dword ptr -0Ch
.text:00005E08 var_4           = dword ptr -4
.text:00005E08
.text:00005E08                 push    ebp
.text:00005E09                 mov     ebp, esp
.text:00005E0B                 push    0FFFFFFFFh
.text:00005E0D                 push    offset __ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
.text:00005E12                 mov     eax, large fs:0
.text:00005E18                 push    eax
.text:00005E19                 sub     esp, 14h
.text:00005E1C                 mov     eax, 0CCCCCCCCh
.text:00005E21                 mov     [ebp+var_20], eax
.text:00005E24                 mov     [ebp+var_1C], eax
.text:00005E27                 mov     [ebp+var_18], eax
.text:00005E2A                 mov     [ebp+var_14], eax
.text:00005E2D                 mov     [ebp+var_10], eax
.text:00005E30                 mov     eax, dword ptr ds:___security_cookie
.text:00005E35                 xor     eax, ebp
.text:00005E37                 push    eax
.text:00005E38                 lea     eax, [ebp+var_C]
.text:00005E3B                 mov     large fs:0, eax
.text:00005E41                 mov     [ebp+var_10], ecx
.text:00005E44                 mov     [ebp+var_4], 0
.text:00005E4B                 mov     ecx, [ebp+var_10]
.text:00005E4E                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005E53                 mov     [ebp+var_14], eax
.text:00005E56
.text:00005E56 loc_5E56:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void):loc_5E98j
.text:00005E56                 cmp     [ebp+var_14], 0
.text:00005E5A                 jz      short loc_5E9A
.text:00005E5C                 mov     eax, [ebp+var_14]
.text:00005E5F                 sub     eax, 1
.text:00005E62                 mov     [ebp+var_14], eax
.text:00005E65                 mov     ecx, [ebp+var_14]
.text:00005E68                 push    ecx
.text:00005E69                 mov     ecx, [ebp+var_10]
.text:00005E6C                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005E71                 mov     edx, [eax]
.text:00005E73                 mov     [ebp+var_1C], edx
.text:00005E76                 mov     eax, [ebp+var_1C]
.text:00005E79                 mov     [ebp+var_18], eax
.text:00005E7C                 cmp     [ebp+var_18], 0
.text:00005E80                 jz      short loc_5E91
.text:00005E82                 push    1
.text:00005E84                 mov     ecx, [ebp+var_18]
.text:00005E87                 call    ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z ; NArchive::NTar::CItemEx::`scalar deleting destructor'(uint)
.text:00005E8C                 mov     [ebp+var_20], eax
.text:00005E8F                 jmp     short loc_5E98
.text:00005E91 ; ---------------------------------------------------------------------------
.text:00005E91
.text:00005E91 loc_5E91:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+78j
.text:00005E91                 mov     [ebp+var_20], 0
.text:00005E98
.text:00005E98 loc_5E98:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+87j
.text:00005E98                 jmp     short loc_5E56
.text:00005E9A ; ---------------------------------------------------------------------------
.text:00005E9A
.text:00005E9A loc_5E9A:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+52j
.text:00005E9A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005EA1                 mov     ecx, [ebp+var_10]
.text:00005EA4                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00005EA9                 mov     ecx, [ebp+var_C]
.text:00005EAC                 mov     large fs:0, ecx
.text:00005EB3                 pop     ecx
.text:00005EB4                 add     esp, 20h
.text:00005EB7                 cmp     ebp, esp
.text:00005EB9                 call    __RTC_CheckEsp
.text:00005EBE                 mov     esp, ebp
.text:00005EC0                 pop     ebp
.text:00005EC1                 retn
.text:00005EC1 ??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ endp
.text:00005EC1
.text:00005EC1 ; ---------------------------------------------------------------------------
.text:00005EC2                 align 4
.text:00005EC2 _text           ends
.text:00005EC2
.text$x:00005EC4 ; ===========================================================================
.text$x:00005EC4
.text$x:00005EC4 ; Segment type: Pure code
.text$x:00005EC4 ; Segment permissions: Read/Execute
.text$x:00005EC4 _text$x         segment para public 'CODE' use32
.text$x:00005EC4                 assume cs:_text$x
.text$x:00005EC4                 ;org 5EC4h
.text$x:00005EC4 ; COMDAT (pick associative to section at 5E08)
.text$x:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005EC4
.text$x:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00005EC4
.text$x:00005EC4
.text$x:00005EC4 __unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0 proc near
.text$x:00005EC4                                         ; DATA XREF: .xdata$x:00005EECo
.text$x:00005EC4                 mov     ecx, [ebp-10h]
.text$x:00005EC7                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00005EC7 __unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0 endp
.text$x:00005EC7
.text$x:00005ECC
.text$x:00005ECC ; =============== S U B R O U T I N E =======================================
.text$x:00005ECC
.text$x:00005ECC
.text$x:00005ECC __ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ proc near
.text$x:00005ECC                                         ; DATA XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+5o
.text$x:00005ECC
.text$x:00005ECC arg_4           = dword ptr  8
.text$x:00005ECC
.text$x:00005ECC                 mov     edx, [esp+arg_4]
.text$x:00005ED0                 lea     eax, [edx+0Ch]
.text$x:00005ED3                 mov     ecx, [edx-18h]
.text$x:00005ED6                 xor     ecx, eax
.text$x:00005ED8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EDD                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
.text$x:00005EE2                 jmp     ___CxxFrameHandler3
.text$x:00005EE2 __ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ endp
.text$x:00005EE2
.text$x:00005EE2 ; ---------------------------------------------------------------------------
.text$x:00005EE7                 align 4
.text$x:00005EE7 _text$x         ends
.text$x:00005EE7
.xdata$x:00005EE8 ; ===========================================================================
.xdata$x:00005EE8
.xdata$x:00005EE8 ; Segment type: Pure data
.xdata$x:00005EE8 ; Segment permissions: Read
.xdata$x:00005EE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00005EE8                 assume cs:_xdata$x
.xdata$x:00005EE8                 ;org 5EE8h
.xdata$x:00005EE8 ; COMDAT (pick associative to section at 5E08)
.xdata$x:00005EE8 __unwindtable$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ db 0FFh
.xdata$x:00005EE8                                         ; DATA XREF: .xdata$x:00005EF8o
.xdata$x:00005EE9                 db 0FFh
.xdata$x:00005EEA                 db 0FFh
.xdata$x:00005EEB                 db 0FFh
.xdata$x:00005EEC                 dd offset __unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0
.xdata$x:00005EF0 __ehfuncinfo$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ db  22h ; "
.xdata$x:00005EF0                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ+11o
.xdata$x:00005EF1                 db    5
.xdata$x:00005EF2                 db  93h ; ô
.xdata$x:00005EF3                 db  19h
.xdata$x:00005EF4                 db    1
.xdata$x:00005EF5                 db    0
.xdata$x:00005EF6                 db    0
.xdata$x:00005EF7                 db    0
.xdata$x:00005EF8                 dd offset __unwindtable$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ
.xdata$x:00005EFC                 db    0
.xdata$x:00005EFD                 db    0
.xdata$x:00005EFE                 db    0
.xdata$x:00005EFF                 db    0
.xdata$x:00005F00                 db    0
.xdata$x:00005F01                 db    0
.xdata$x:00005F02                 db    0
.xdata$x:00005F03                 db    0
.xdata$x:00005F04                 db    0
.xdata$x:00005F05                 db    0
.xdata$x:00005F06                 db    0
.xdata$x:00005F07                 db    0
.xdata$x:00005F08                 db    0
.xdata$x:00005F09                 db    0
.xdata$x:00005F0A                 db    0
.xdata$x:00005F0B                 db    0
.xdata$x:00005F0C                 db    0
.xdata$x:00005F0D                 db    0
.xdata$x:00005F0E                 db    0
.xdata$x:00005F0F                 db    0
.xdata$x:00005F10                 db    1
.xdata$x:00005F11                 db    0
.xdata$x:00005F12                 db    0
.xdata$x:00005F13                 db    0
.xdata$x:00005F13 _xdata$x        ends
.xdata$x:00005F13
.text:00005F14 ; ===========================================================================
.text:00005F14
.text:00005F14 ; Segment type: Pure code
.text:00005F14 ; Segment permissions: Read/Execute
.text:00005F14 _text           segment para public 'CODE' use32
.text:00005F14                 assume cs:_text
.text:00005F14                 ;org 5F14h
.text:00005F14 ; COMDAT (pick any)
.text:00005F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F14
.text:00005F14 ; =============== S U B R O U T I N E =======================================
.text:00005F14
.text:00005F14 ; Attributes: bp-based frame
.text:00005F14
.text:00005F14 ; public: void __thiscall CObjectVector<struct NArchive::NTar::CItemEx>::Clear(void)
.text:00005F14                 public ?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ
.text:00005F14 ?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ proc near
.text:00005F14                                         ; CODE XREF: NArchive::NTar::CHandler::Close(void)+73p
.text:00005F14
.text:00005F14 var_14          = dword ptr -14h
.text:00005F14 var_10          = dword ptr -10h
.text:00005F14 var_C           = dword ptr -0Ch
.text:00005F14 var_8           = dword ptr -8
.text:00005F14 var_4           = dword ptr -4
.text:00005F14
.text:00005F14                 push    ebp
.text:00005F15                 mov     ebp, esp
.text:00005F17                 sub     esp, 14h
.text:00005F1A                 mov     eax, 0CCCCCCCCh
.text:00005F1F                 mov     [ebp+var_14], eax
.text:00005F22                 mov     [ebp+var_10], eax
.text:00005F25                 mov     [ebp+var_C], eax
.text:00005F28                 mov     [ebp+var_8], eax
.text:00005F2B                 mov     [ebp+var_4], eax
.text:00005F2E                 mov     [ebp+var_4], ecx
.text:00005F31                 mov     ecx, [ebp+var_4]
.text:00005F34                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00005F39                 mov     [ebp+var_8], eax
.text:00005F3C
.text:00005F3C loc_5F3C:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Clear(void):loc_5F7Ej
.text:00005F3C                 cmp     [ebp+var_8], 0
.text:00005F40                 jz      short loc_5F80
.text:00005F42                 mov     eax, [ebp+var_8]
.text:00005F45                 sub     eax, 1
.text:00005F48                 mov     [ebp+var_8], eax
.text:00005F4B                 mov     ecx, [ebp+var_8]
.text:00005F4E                 push    ecx
.text:00005F4F                 mov     ecx, [ebp+var_4]
.text:00005F52                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00005F57                 mov     edx, [eax]
.text:00005F59                 mov     [ebp+var_10], edx
.text:00005F5C                 mov     eax, [ebp+var_10]
.text:00005F5F                 mov     [ebp+var_C], eax
.text:00005F62                 cmp     [ebp+var_C], 0
.text:00005F66                 jz      short loc_5F77
.text:00005F68                 push    1
.text:00005F6A                 mov     ecx, [ebp+var_C]
.text:00005F6D                 call    ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z ; NArchive::NTar::CItemEx::`scalar deleting destructor'(uint)
.text:00005F72                 mov     [ebp+var_14], eax
.text:00005F75                 jmp     short loc_5F7E
.text:00005F77 ; ---------------------------------------------------------------------------
.text:00005F77
.text:00005F77 loc_5F77:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Clear(void)+52j
.text:00005F77                 mov     [ebp+var_14], 0
.text:00005F7E
.text:00005F7E loc_5F7E:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Clear(void)+61j
.text:00005F7E                 jmp     short loc_5F3C
.text:00005F80 ; ---------------------------------------------------------------------------
.text:00005F80
.text:00005F80 loc_5F80:                               ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Clear(void)+2Cj
.text:00005F80                 mov     ecx, [ebp+var_4]
.text:00005F83                 call    ?Clear@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::Clear(void)
.text:00005F88                 add     esp, 14h
.text:00005F8B                 cmp     ebp, esp
.text:00005F8D                 call    __RTC_CheckEsp
.text:00005F92                 mov     esp, ebp
.text:00005F94                 pop     ebp
.text:00005F95                 retn
.text:00005F95 ?Clear@?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAEXXZ endp
.text:00005F95
.text:00005F95 ; ---------------------------------------------------------------------------
.text:00005F96                 align 4
.text:00005F96 _text           ends
.text:00005F96
.text:00005F98 ; ===========================================================================
.text:00005F98
.text:00005F98 ; Segment type: Pure code
.text:00005F98 ; Segment permissions: Read/Execute
.text:00005F98 _text           segment para public 'CODE' use32
.text:00005F98                 assume cs:_text
.text:00005F98                 ;org 5F98h
.text:00005F98 ; COMDAT (pick any)
.text:00005F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005F98
.text:00005F98 ; =============== S U B R O U T I N E =======================================
.text:00005F98
.text:00005F98 ; Attributes: bp-based frame
.text:00005F98
.text:00005F98 ; public: __thiscall CMyComPtr<struct ICompressCoder>::CMyComPtr<struct ICompressCoder>(void)
.text:00005F98                 public ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00005F98 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00005F98                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+F1p
.text:00005F98
.text:00005F98 var_4           = dword ptr -4
.text:00005F98
.text:00005F98                 push    ebp
.text:00005F99                 mov     ebp, esp
.text:00005F9B                 push    ecx
.text:00005F9C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FA3                 mov     [ebp+var_4], ecx
.text:00005FA6                 mov     eax, [ebp+var_4]
.text:00005FA9                 mov     dword ptr [eax], 0
.text:00005FAF                 mov     eax, [ebp+var_4]
.text:00005FB2                 mov     esp, ebp
.text:00005FB4                 pop     ebp
.text:00005FB5                 retn
.text:00005FB5 ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00005FB5
.text:00005FB5 ; ---------------------------------------------------------------------------
.text:00005FB6                 align 4
.text:00005FB6 _text           ends
.text:00005FB6
.text:00005FB8 ; ===========================================================================
.text:00005FB8
.text:00005FB8 ; Segment type: Pure code
.text:00005FB8 ; Segment permissions: Read/Execute
.text:00005FB8 _text           segment para public 'CODE' use32
.text:00005FB8                 assume cs:_text
.text:00005FB8                 ;org 5FB8h
.text:00005FB8 ; COMDAT (pick any)
.text:00005FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FB8
.text:00005FB8 ; =============== S U B R O U T I N E =======================================
.text:00005FB8
.text:00005FB8 ; Attributes: bp-based frame
.text:00005FB8
.text:00005FB8 ; public: __thiscall CMyComPtr<struct ICompressCoder>::~CMyComPtr<struct ICompressCoder>(void)
.text:00005FB8                 public ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
.text:00005FB8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
.text:00005FB8                                         ; CODE XREF: __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$4+9j
.text:00005FB8                                         ; NArchive::NTar::CHandler::~CHandler(void)+3Dp
.text:00005FB8
.text:00005FB8 var_4           = dword ptr -4
.text:00005FB8
.text:00005FB8                 push    ebp
.text:00005FB9                 mov     ebp, esp
.text:00005FBB                 push    ecx
.text:00005FBC                 push    esi
.text:00005FBD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005FC4                 mov     [ebp+var_4], ecx
.text:00005FC7                 mov     eax, [ebp+var_4]
.text:00005FCA                 cmp     dword ptr [eax], 0
.text:00005FCD                 jz      short loc_5FEA
.text:00005FCF                 mov     ecx, [ebp+var_4]
.text:00005FD2                 mov     edx, [ecx]
.text:00005FD4                 mov     eax, [ebp+var_4]
.text:00005FD7                 mov     ecx, [eax]
.text:00005FD9                 mov     edx, [edx]
.text:00005FDB                 mov     esi, esp
.text:00005FDD                 push    ecx
.text:00005FDE                 mov     eax, [edx+8]
.text:00005FE1                 call    eax
.text:00005FE3                 cmp     esi, esp
.text:00005FE5                 call    __RTC_CheckEsp
.text:00005FEA
.text:00005FEA loc_5FEA:                               ; CODE XREF: CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>(void)+15j
.text:00005FEA                 pop     esi
.text:00005FEB                 add     esp, 4
.text:00005FEE                 cmp     ebp, esp
.text:00005FF0                 call    __RTC_CheckEsp
.text:00005FF5                 mov     esp, ebp
.text:00005FF7                 pop     ebp
.text:00005FF8                 retn
.text:00005FF8 ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ endp
.text:00005FF8
.text:00005FF8 ; ---------------------------------------------------------------------------
.text:00005FF9                 align 4
.text:00005FF9 _text           ends
.text:00005FF9
.text:00005FFC ; ===========================================================================
.text:00005FFC
.text:00005FFC ; Segment type: Pure code
.text:00005FFC ; Segment permissions: Read/Execute
.text:00005FFC _text           segment para public 'CODE' use32
.text:00005FFC                 assume cs:_text
.text:00005FFC                 ;org 5FFCh
.text:00005FFC ; COMDAT (pick any)
.text:00005FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005FFC
.text:00005FFC ; =============== S U B R O U T I N E =======================================
.text:00005FFC
.text:00005FFC ; Attributes: bp-based frame
.text:00005FFC
.text:00005FFC ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator->(void)const
.text:00005FFC                 public ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
.text:00005FFC ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
.text:00005FFC                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+B1Bp
.text:00005FFC
.text:00005FFC var_4           = dword ptr -4
.text:00005FFC
.text:00005FFC                 push    ebp
.text:00005FFD                 mov     ebp, esp
.text:00005FFF                 push    ecx
.text:00006000                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006007                 mov     [ebp+var_4], ecx
.text:0000600A                 mov     eax, [ebp+var_4]
.text:0000600D                 mov     eax, [eax]
.text:0000600F                 mov     esp, ebp
.text:00006011                 pop     ebp
.text:00006012                 retn
.text:00006012 ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ endp
.text:00006012
.text:00006012 ; ---------------------------------------------------------------------------
.text:00006013                 align 4
.text:00006013 _text           ends
.text:00006013
.text:00006014 ; ===========================================================================
.text:00006014
.text:00006014 ; Segment type: Pure code
.text:00006014 ; Segment permissions: Read/Execute
.text:00006014 _text           segment para public 'CODE' use32
.text:00006014                 assume cs:_text
.text:00006014                 ;org 6014h
.text:00006014 ; COMDAT (pick any)
.text:00006014                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006014
.text:00006014 ; =============== S U B R O U T I N E =======================================
.text:00006014
.text:00006014 ; Attributes: bp-based frame
.text:00006014
.text:00006014 ; public: struct ICompressCoder * __thiscall CMyComPtr<struct ICompressCoder>::operator=(struct ICompressCoder *)
.text:00006014                 public ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
.text:00006014 ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
.text:00006014                                         ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+14Ep
.text:00006014
.text:00006014 var_4           = dword ptr -4
.text:00006014 arg_0           = dword ptr  8
.text:00006014
.text:00006014                 push    ebp
.text:00006015                 mov     ebp, esp
.text:00006017                 push    ecx
.text:00006018                 push    esi
.text:00006019                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006020                 mov     [ebp+var_4], ecx
.text:00006023                 cmp     [ebp+arg_0], 0
.text:00006027                 jz      short loc_6040
.text:00006029                 mov     eax, [ebp+arg_0]
.text:0000602C                 mov     ecx, [eax]
.text:0000602E                 mov     esi, esp
.text:00006030                 mov     edx, [ebp+arg_0]
.text:00006033                 push    edx
.text:00006034                 mov     eax, [ecx+4]
.text:00006037                 call    eax
.text:00006039                 cmp     esi, esp
.text:0000603B                 call    __RTC_CheckEsp
.text:00006040
.text:00006040 loc_6040:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+13j
.text:00006040                 mov     ecx, [ebp+var_4]
.text:00006043                 cmp     dword ptr [ecx], 0
.text:00006046                 jz      short loc_6063
.text:00006048                 mov     edx, [ebp+var_4]
.text:0000604B                 mov     eax, [edx]
.text:0000604D                 mov     ecx, [ebp+var_4]
.text:00006050                 mov     edx, [ecx]
.text:00006052                 mov     eax, [eax]
.text:00006054                 mov     esi, esp
.text:00006056                 push    edx
.text:00006057                 mov     ecx, [eax+8]
.text:0000605A                 call    ecx
.text:0000605C                 cmp     esi, esp
.text:0000605E                 call    __RTC_CheckEsp
.text:00006063
.text:00006063 loc_6063:                               ; CODE XREF: CMyComPtr<ICompressCoder>::operator=(ICompressCoder *)+32j
.text:00006063                 mov     edx, [ebp+var_4]
.text:00006066                 mov     eax, [ebp+arg_0]
.text:00006069                 mov     [edx], eax
.text:0000606B                 mov     eax, [ebp+arg_0]
.text:0000606E                 pop     esi
.text:0000606F                 add     esp, 4
.text:00006072                 cmp     ebp, esp
.text:00006074                 call    __RTC_CheckEsp
.text:00006079                 mov     esp, ebp
.text:0000607B                 pop     ebp
.text:0000607C                 retn    4
.text:0000607C ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z endp
.text:0000607C
.text:0000607C ; ---------------------------------------------------------------------------
.text:0000607F                 align 10h
.text:0000607F _text           ends
.text:0000607F
.text:00006080 ; ===========================================================================
.text:00006080
.text:00006080 ; Segment type: Pure code
.text:00006080 ; Segment permissions: Read/Execute
.text:00006080 _text           segment para public 'CODE' use32
.text:00006080                 assume cs:_text
.text:00006080                 ;org 6080h
.text:00006080 ; COMDAT (pick any)
.text:00006080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006080
.text:00006080 ; =============== S U B R O U T I N E =======================================
.text:00006080
.text:00006080 ; Attributes: bp-based frame
.text:00006080
.text:00006080 ; public: __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::CMyComPtr<struct IArchiveOpenVolumeCallback>(void)
.text:00006080                 public ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
.text:00006080 ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ proc near
.text:00006080                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+441p
.text:00006080
.text:00006080 var_4           = dword ptr -4
.text:00006080
.text:00006080                 push    ebp
.text:00006081                 mov     ebp, esp
.text:00006083                 push    ecx
.text:00006084                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000608B                 mov     [ebp+var_4], ecx
.text:0000608E                 mov     eax, [ebp+var_4]
.text:00006091                 mov     dword ptr [eax], 0
.text:00006097                 mov     eax, [ebp+var_4]
.text:0000609A                 mov     esp, ebp
.text:0000609C                 pop     ebp
.text:0000609D                 retn
.text:0000609D ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ endp
.text:0000609D
.text:0000609D ; ---------------------------------------------------------------------------
.text:0000609E                 align 10h
.text:0000609E _text           ends
.text:0000609E
.text:000060A0 ; ===========================================================================
.text:000060A0
.text:000060A0 ; Segment type: Pure code
.text:000060A0 ; Segment permissions: Read/Execute
.text:000060A0 _text           segment para public 'CODE' use32
.text:000060A0                 assume cs:_text
.text:000060A0                 ;org 60A0h
.text:000060A0 ; COMDAT (pick any)
.text:000060A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060A0
.text:000060A0 ; =============== S U B R O U T I N E =======================================
.text:000060A0
.text:000060A0 ; Attributes: bp-based frame
.text:000060A0
.text:000060A0 ; public: __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::~CMyComPtr<struct IArchiveOpenVolumeCallback>(void)
.text:000060A0                 public ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
.text:000060A0 ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ proc near
.text:000060A0                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+46Ap
.text:000060A0                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+4CAp ...
.text:000060A0
.text:000060A0 var_4           = dword ptr -4
.text:000060A0
.text:000060A0                 push    ebp
.text:000060A1                 mov     ebp, esp
.text:000060A3                 push    ecx
.text:000060A4                 push    esi
.text:000060A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060AC                 mov     [ebp+var_4], ecx
.text:000060AF                 mov     eax, [ebp+var_4]
.text:000060B2                 cmp     dword ptr [eax], 0
.text:000060B5                 jz      short loc_60D2
.text:000060B7                 mov     ecx, [ebp+var_4]
.text:000060BA                 mov     edx, [ecx]
.text:000060BC                 mov     eax, [ebp+var_4]
.text:000060BF                 mov     ecx, [eax]
.text:000060C1                 mov     edx, [edx]
.text:000060C3                 mov     esi, esp
.text:000060C5                 push    ecx
.text:000060C6                 mov     eax, [edx+8]
.text:000060C9                 call    eax
.text:000060CB                 cmp     esi, esp
.text:000060CD                 call    __RTC_CheckEsp
.text:000060D2
.text:000060D2 loc_60D2:                               ; CODE XREF: CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>(void)+15j
.text:000060D2                 pop     esi
.text:000060D3                 add     esp, 4
.text:000060D6                 cmp     ebp, esp
.text:000060D8                 call    __RTC_CheckEsp
.text:000060DD                 mov     esp, ebp
.text:000060DF                 pop     ebp
.text:000060E0                 retn
.text:000060E0 ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ endp
.text:000060E0
.text:000060E0 ; ---------------------------------------------------------------------------
.text:000060E1                 align 4
.text:000060E1 _text           ends
.text:000060E1
.text:000060E4 ; ===========================================================================
.text:000060E4
.text:000060E4 ; Segment type: Pure code
.text:000060E4 ; Segment permissions: Read/Execute
.text:000060E4 _text           segment para public 'CODE' use32
.text:000060E4                 assume cs:_text
.text:000060E4                 ;org 60E4h
.text:000060E4 ; COMDAT (pick any)
.text:000060E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060E4
.text:000060E4 ; =============== S U B R O U T I N E =======================================
.text:000060E4
.text:000060E4 ; Attributes: bp-based frame
.text:000060E4
.text:000060E4 ; public: struct IArchiveOpenVolumeCallback * * __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator&(void)
.text:000060E4                 public ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ
.text:000060E4 ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ proc near
.text:000060E4                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+480p
.text:000060E4
.text:000060E4 var_4           = dword ptr -4
.text:000060E4
.text:000060E4                 push    ebp
.text:000060E5                 mov     ebp, esp
.text:000060E7                 push    ecx
.text:000060E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000060EF                 mov     [ebp+var_4], ecx
.text:000060F2                 mov     eax, [ebp+var_4]
.text:000060F5                 mov     esp, ebp
.text:000060F7                 pop     ebp
.text:000060F8                 retn
.text:000060F8 ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ endp
.text:000060F8
.text:000060F8 ; ---------------------------------------------------------------------------
.text:000060F9                 align 4
.text:000060F9 _text           ends
.text:000060F9
.text:000060FC ; ===========================================================================
.text:000060FC
.text:000060FC ; Segment type: Pure code
.text:000060FC ; Segment permissions: Read/Execute
.text:000060FC _text           segment para public 'CODE' use32
.text:000060FC                 assume cs:_text
.text:000060FC                 ;org 60FCh
.text:000060FC ; COMDAT (pick any)
.text:000060FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000060FC
.text:000060FC ; =============== S U B R O U T I N E =======================================
.text:000060FC
.text:000060FC ; Attributes: bp-based frame
.text:000060FC
.text:000060FC ; public: struct IArchiveOpenVolumeCallback * __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator->(void)const
.text:000060FC                 public ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ
.text:000060FC ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ proc near
.text:000060FC                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+4EFp
.text:000060FC
.text:000060FC var_4           = dword ptr -4
.text:000060FC
.text:000060FC                 push    ebp
.text:000060FD                 mov     ebp, esp
.text:000060FF                 push    ecx
.text:00006100                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006107                 mov     [ebp+var_4], ecx
.text:0000610A                 mov     eax, [ebp+var_4]
.text:0000610D                 mov     eax, [eax]
.text:0000610F                 mov     esp, ebp
.text:00006111                 pop     ebp
.text:00006112                 retn
.text:00006112 ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ endp
.text:00006112
.text:00006112 ; ---------------------------------------------------------------------------
.text:00006113                 align 4
.text:00006113 _text           ends
.text:00006113
.text:00006114 ; ===========================================================================
.text:00006114
.text:00006114 ; Segment type: Pure code
.text:00006114 ; Segment permissions: Read/Execute
.text:00006114 _text           segment para public 'CODE' use32
.text:00006114                 assume cs:_text
.text:00006114                 ;org 6114h
.text:00006114 ; COMDAT (pick any)
.text:00006114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006114
.text:00006114 ; =============== S U B R O U T I N E =======================================
.text:00006114
.text:00006114 ; Attributes: bp-based frame
.text:00006114
.text:00006114 ; public: bool __thiscall CMyComPtr<struct IArchiveOpenVolumeCallback>::operator!(void)const
.text:00006114                 public ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ
.text:00006114 ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ proc near
.text:00006114                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+4A7p
.text:00006114
.text:00006114 var_4           = dword ptr -4
.text:00006114
.text:00006114                 push    ebp
.text:00006115                 mov     ebp, esp
.text:00006117                 push    ecx
.text:00006118                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000611F                 mov     [ebp+var_4], ecx
.text:00006122                 mov     eax, [ebp+var_4]
.text:00006125                 xor     ecx, ecx
.text:00006127                 cmp     dword ptr [eax], 0
.text:0000612A                 setz    cl
.text:0000612D                 mov     al, cl
.text:0000612F                 mov     esp, ebp
.text:00006131                 pop     ebp
.text:00006132                 retn
.text:00006132 ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ endp
.text:00006132
.text:00006132 ; ---------------------------------------------------------------------------
.text:00006133                 align 4
.text:00006133 _text           ends
.text:00006133
.text:00006134 ; ===========================================================================
.text:00006134
.text:00006134 ; Segment type: Pure code
.text:00006134 ; Segment permissions: Read/Execute
.text:00006134 _text           segment para public 'CODE' use32
.text:00006134                 assume cs:_text
.text:00006134                 ;org 6134h
.text:00006134 ; COMDAT (pick any)
.text:00006134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006134
.text:00006134 ; =============== S U B R O U T I N E =======================================
.text:00006134
.text:00006134 ; Attributes: bp-based frame
.text:00006134
.text:00006134 ; public: __thiscall CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>(void)
.text:00006134                 public ??0?$CRecordVector@_K@@QAE@XZ
.text:00006134 ??0?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::NTar::CSparseStream::CSparseStream(void)+61p
.text:00006134
.text:00006134 var_4           = dword ptr -4
.text:00006134
.text:00006134                 push    ebp
.text:00006135                 mov     ebp, esp
.text:00006137                 push    ecx
.text:00006138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000613F                 mov     [ebp+var_4], ecx
.text:00006142                 mov     eax, [ebp+var_4]
.text:00006145                 mov     dword ptr [eax], 0
.text:0000614B                 mov     ecx, [ebp+var_4]
.text:0000614E                 mov     dword ptr [ecx+4], 0
.text:00006155                 mov     edx, [ebp+var_4]
.text:00006158                 mov     dword ptr [edx+8], 0
.text:0000615F                 mov     eax, [ebp+var_4]
.text:00006162                 mov     esp, ebp
.text:00006164                 pop     ebp
.text:00006165                 retn
.text:00006165 ??0?$CRecordVector@_K@@QAE@XZ endp
.text:00006165
.text:00006165 ; ---------------------------------------------------------------------------
.text:00006166                 align 4
.text:00006166 _text           ends
.text:00006166
.text:00006168 ; ===========================================================================
.text:00006168
.text:00006168 ; Segment type: Pure code
.text:00006168 ; Segment permissions: Read/Execute
.text:00006168 _text           segment para public 'CODE' use32
.text:00006168                 assume cs:_text
.text:00006168                 ;org 6168h
.text:00006168 ; COMDAT (pick any)
.text:00006168                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006168
.text:00006168 ; =============== S U B R O U T I N E =======================================
.text:00006168
.text:00006168 ; Attributes: bp-based frame
.text:00006168
.text:00006168 ; public: void __thiscall CRecordVector<unsigned __int64>::Reserve(unsigned int)
.text:00006168                 public ?Reserve@?$CRecordVector@_K@@QAEXI@Z
.text:00006168 ?Reserve@?$CRecordVector@_K@@QAEXI@Z proc near
.text:00006168                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+112p
.text:00006168
.text:00006168 var_10          = dword ptr -10h
.text:00006168 var_C           = dword ptr -0Ch
.text:00006168 Dst             = dword ptr -8
.text:00006168 var_4           = dword ptr -4
.text:00006168 arg_0           = dword ptr  8
.text:00006168
.text:00006168                 push    ebp
.text:00006169                 mov     ebp, esp
.text:0000616B                 sub     esp, 10h
.text:0000616E                 mov     eax, 0CCCCCCCCh
.text:00006173                 mov     [ebp+var_10], eax
.text:00006176                 mov     [ebp+var_C], eax
.text:00006179                 mov     [ebp+Dst], eax
.text:0000617C                 mov     [ebp+var_4], eax
.text:0000617F                 mov     [ebp+var_4], ecx
.text:00006182                 mov     eax, [ebp+var_4]
.text:00006185                 mov     ecx, [ebp+arg_0]
.text:00006188                 cmp     ecx, [eax+8]
.text:0000618B                 jbe     short loc_61FC
.text:0000618D                 xor     ecx, ecx
.text:0000618F                 mov     eax, [ebp+arg_0]
.text:00006192                 mov     edx, 8
.text:00006197                 mul     edx
.text:00006199                 seto    cl
.text:0000619C                 neg     ecx
.text:0000619E                 or      ecx, eax
.text:000061A0                 push    ecx             ; unsigned int
.text:000061A1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000061A6                 add     esp, 4
.text:000061A9                 mov     [ebp+var_C], eax
.text:000061AC                 mov     eax, [ebp+var_C]
.text:000061AF                 mov     [ebp+Dst], eax
.text:000061B2                 mov     ecx, [ebp+var_4]
.text:000061B5                 cmp     dword ptr [ecx+4], 0
.text:000061B9                 jz      short loc_61D7
.text:000061BB                 mov     edx, [ebp+var_4]
.text:000061BE                 mov     eax, [edx+4]
.text:000061C1                 shl     eax, 3
.text:000061C4                 push    eax             ; Size
.text:000061C5                 mov     ecx, [ebp+var_4]
.text:000061C8                 mov     edx, [ecx]
.text:000061CA                 push    edx             ; Src
.text:000061CB                 mov     eax, [ebp+Dst]
.text:000061CE                 push    eax             ; Dst
.text:000061CF                 call    _memcpy
.text:000061D4                 add     esp, 0Ch
.text:000061D7
.text:000061D7 loc_61D7:                               ; CODE XREF: CRecordVector<unsigned __int64>::Reserve(uint)+51j
.text:000061D7                 mov     ecx, [ebp+var_4]
.text:000061DA                 mov     edx, [ecx]
.text:000061DC                 mov     [ebp+var_10], edx
.text:000061DF                 mov     eax, [ebp+var_10]
.text:000061E2                 push    eax             ; void *
.text:000061E3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000061E8                 add     esp, 4
.text:000061EB                 mov     ecx, [ebp+var_4]
.text:000061EE                 mov     edx, [ebp+Dst]
.text:000061F1                 mov     [ecx], edx
.text:000061F3                 mov     eax, [ebp+var_4]
.text:000061F6                 mov     ecx, [ebp+arg_0]
.text:000061F9                 mov     [eax+8], ecx
.text:000061FC
.text:000061FC loc_61FC:                               ; CODE XREF: CRecordVector<unsigned __int64>::Reserve(uint)+23j
.text:000061FC                 add     esp, 10h
.text:000061FF                 cmp     ebp, esp
.text:00006201                 call    __RTC_CheckEsp
.text:00006206                 mov     esp, ebp
.text:00006208                 pop     ebp
.text:00006209                 retn    4
.text:00006209 ?Reserve@?$CRecordVector@_K@@QAEXI@Z endp
.text:00006209
.text:00006209 _text           ends
.text:00006209
.text:0000620C ; ===========================================================================
.text:0000620C
.text:0000620C ; Segment type: Pure code
.text:0000620C ; Segment permissions: Read/Execute
.text:0000620C _text           segment para public 'CODE' use32
.text:0000620C                 assume cs:_text
.text:0000620C                 ;org 620Ch
.text:0000620C ; COMDAT (pick any)
.text:0000620C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000620C
.text:0000620C ; =============== S U B R O U T I N E =======================================
.text:0000620C
.text:0000620C ; Attributes: bp-based frame
.text:0000620C
.text:0000620C ; public: __thiscall CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>(void)
.text:0000620C                 public ??1?$CRecordVector@_K@@QAE@XZ
.text:0000620C ??1?$CRecordVector@_K@@QAE@XZ proc near ; CODE XREF: NArchive::NTar::CSparseStream::~CSparseStream(void)+3Ap
.text:0000620C
.text:0000620C var_8           = dword ptr -8
.text:0000620C var_4           = dword ptr -4
.text:0000620C
.text:0000620C                 push    ebp
.text:0000620D                 mov     ebp, esp
.text:0000620F                 sub     esp, 8
.text:00006212                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00006219                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006220                 mov     [ebp+var_4], ecx
.text:00006223                 mov     eax, [ebp+var_4]
.text:00006226                 mov     ecx, [eax]
.text:00006228                 mov     [ebp+var_8], ecx
.text:0000622B                 mov     edx, [ebp+var_8]
.text:0000622E                 push    edx             ; void *
.text:0000622F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006234                 add     esp, 4
.text:00006237                 add     esp, 8
.text:0000623A                 cmp     ebp, esp
.text:0000623C                 call    __RTC_CheckEsp
.text:00006241                 mov     esp, ebp
.text:00006243                 pop     ebp
.text:00006244                 retn
.text:00006244 ??1?$CRecordVector@_K@@QAE@XZ endp
.text:00006244
.text:00006244 ; ---------------------------------------------------------------------------
.text:00006245                 align 4
.text:00006245 _text           ends
.text:00006245
.text:00006248 ; ===========================================================================
.text:00006248
.text:00006248 ; Segment type: Pure code
.text:00006248 ; Segment permissions: Read/Execute
.text:00006248 _text           segment para public 'CODE' use32
.text:00006248                 assume cs:_text
.text:00006248                 ;org 6248h
.text:00006248 ; COMDAT (pick any)
.text:00006248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006248
.text:00006248 ; =============== S U B R O U T I N E =======================================
.text:00006248
.text:00006248 ; Attributes: bp-based frame
.text:00006248
.text:00006248 ; public: void __thiscall CRecordVector<unsigned __int64>::AddInReserved(unsigned __int64)
.text:00006248                 public ?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z
.text:00006248 ?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z proc near
.text:00006248                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+173p
.text:00006248
.text:00006248 var_4           = dword ptr -4
.text:00006248 arg_0           = dword ptr  8
.text:00006248 arg_4           = dword ptr  0Ch
.text:00006248
.text:00006248                 push    ebp
.text:00006249                 mov     ebp, esp
.text:0000624B                 push    ecx
.text:0000624C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006253                 mov     [ebp+var_4], ecx
.text:00006256                 mov     eax, [ebp+var_4]
.text:00006259                 mov     ecx, [eax+4]
.text:0000625C                 mov     edx, [ebp+var_4]
.text:0000625F                 mov     eax, [edx]
.text:00006261                 mov     edx, [ebp+arg_0]
.text:00006264                 mov     [eax+ecx*8], edx
.text:00006267                 mov     edx, [ebp+arg_4]
.text:0000626A                 mov     [eax+ecx*8+4], edx
.text:0000626E                 mov     eax, [ebp+var_4]
.text:00006271                 mov     ecx, [eax+4]
.text:00006274                 add     ecx, 1
.text:00006277                 mov     edx, [ebp+var_4]
.text:0000627A                 mov     [edx+4], ecx
.text:0000627D                 mov     esp, ebp
.text:0000627F                 pop     ebp
.text:00006280                 retn    8
.text:00006280 ?AddInReserved@?$CRecordVector@_K@@QAEX_K@Z endp
.text:00006280
.text:00006280 ; ---------------------------------------------------------------------------
.text:00006283                 align 4
.text:00006283 _text           ends
.text:00006283
.text:00006284 ; ===========================================================================
.text:00006284
.text:00006284 ; Segment type: Pure code
.text:00006284 ; Segment permissions: Read/Execute
.text:00006284 _text           segment para public 'CODE' use32
.text:00006284                 assume cs:_text
.text:00006284                 ;org 6284h
.text:00006284 ; COMDAT (pick any)
.text:00006284                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006284
.text:00006284 ; =============== S U B R O U T I N E =======================================
.text:00006284
.text:00006284 ; Attributes: bp-based frame
.text:00006284
.text:00006284 ; public: unsigned __int64 & __thiscall CRecordVector<unsigned __int64>::operator[](unsigned int)
.text:00006284                 public ??A?$CRecordVector@_K@@QAEAA_KI@Z
.text:00006284 ??A?$CRecordVector@_K@@QAEAA_KI@Z proc near
.text:00006284                                         ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+21Ep
.text:00006284
.text:00006284 var_4           = dword ptr -4
.text:00006284 arg_0           = dword ptr  8
.text:00006284
.text:00006284                 push    ebp
.text:00006285                 mov     ebp, esp
.text:00006287                 push    ecx
.text:00006288                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000628F                 mov     [ebp+var_4], ecx
.text:00006292                 mov     eax, [ebp+var_4]
.text:00006295                 mov     ecx, [eax]
.text:00006297                 mov     edx, [ebp+arg_0]
.text:0000629A                 lea     eax, [ecx+edx*8]
.text:0000629D                 mov     esp, ebp
.text:0000629F                 pop     ebp
.text:000062A0                 retn    4
.text:000062A0 ??A?$CRecordVector@_K@@QAEAA_KI@Z endp
.text:000062A0
.text:000062A0 ; ---------------------------------------------------------------------------
.text:000062A3                 align 4
.text:000062A3 _text           ends
.text:000062A3
.text:000062A4 ; ===========================================================================
.text:000062A4
.text:000062A4 ; Segment type: Pure code
.text:000062A4 ; Segment permissions: Read/Execute
.text:000062A4 _text           segment para public 'CODE' use32
.text:000062A4                 assume cs:_text
.text:000062A4                 ;org 62A4h
.text:000062A4 ; COMDAT (pick any)
.text:000062A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000062A4
.text:000062A4 ; =============== S U B R O U T I N E =======================================
.text:000062A4
.text:000062A4 ; Attributes: bp-based frame
.text:000062A4
.text:000062A4 ; _DWORD __thiscall NArchive::NTar::CItemEx::CItemEx(NArchive::NTar::CItemEx *this, const struct NArchive::NTar::CItemEx *)
.text:000062A4                 public ??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z
.text:000062A4 ??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z proc near
.text:000062A4                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)+5Dp
.text:000062A4
.text:000062A4 var_4           = dword ptr -4
.text:000062A4 arg_0           = dword ptr  8
.text:000062A4
.text:000062A4                 push    ebp
.text:000062A5                 mov     ebp, esp
.text:000062A7                 push    ecx
.text:000062A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000062AF                 mov     [ebp+var_4], ecx
.text:000062B2                 mov     eax, [ebp+arg_0]
.text:000062B5                 push    eax             ; struct NArchive::NTar::CItem *
.text:000062B6                 mov     ecx, [ebp+var_4] ; this
.text:000062B9                 call    ??0CItem@NTar@NArchive@@QAE@ABU012@@Z ; NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)
.text:000062BE                 mov     ecx, [ebp+var_4]
.text:000062C1                 mov     edx, [ebp+arg_0]
.text:000062C4                 mov     eax, [edx+78h]
.text:000062C7                 mov     [ecx+78h], eax
.text:000062CA                 mov     edx, [edx+7Ch]
.text:000062CD                 mov     [ecx+7Ch], edx
.text:000062D0                 mov     eax, [ebp+var_4]
.text:000062D3                 mov     ecx, [ebp+arg_0]
.text:000062D6                 mov     edx, [ecx+80h]
.text:000062DC                 mov     [eax+80h], edx
.text:000062E2                 mov     eax, [ebp+var_4]
.text:000062E5                 mov     ecx, [ebp+arg_0]
.text:000062E8                 mov     dl, [ecx+84h]
.text:000062EE                 mov     [eax+84h], dl
.text:000062F4                 mov     eax, [ebp+var_4]
.text:000062F7                 mov     ecx, [ebp+arg_0]
.text:000062FA                 mov     dl, [ecx+85h]
.text:00006300                 mov     [eax+85h], dl
.text:00006306                 mov     eax, [ebp+var_4]
.text:00006309                 add     esp, 4
.text:0000630C                 cmp     ebp, esp
.text:0000630E                 call    __RTC_CheckEsp
.text:00006313                 mov     esp, ebp
.text:00006315                 pop     ebp
.text:00006316                 retn    4
.text:00006316 ??0CItemEx@NTar@NArchive@@QAE@ABU012@@Z endp
.text:00006316
.text:00006316 ; ---------------------------------------------------------------------------
.text:00006319                 align 4
.text:00006319 _text           ends
.text:00006319
.text:0000631C ; ===========================================================================
.text:0000631C
.text:0000631C ; Segment type: Pure code
.text:0000631C ; Segment permissions: Read/Execute
.text:0000631C _text           segment para public 'CODE' use32
.text:0000631C                 assume cs:_text
.text:0000631C                 ;org 631Ch
.text:0000631C ; COMDAT (pick any)
.text:0000631C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000631C
.text:0000631C ; =============== S U B R O U T I N E =======================================
.text:0000631C
.text:0000631C ; Attributes: bp-based frame
.text:0000631C
.text:0000631C ; public: void * __thiscall NArchive::NTar::CItemEx::`scalar deleting destructor'(unsigned int)
.text:0000631C                 public ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z
.text:0000631C ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z proc near
.text:0000631C                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+7Fp
.text:0000631C                                         ; CObjectVector<NArchive::NTar::CItemEx>::Clear(void)+59p
.text:0000631C
.text:0000631C var_4           = dword ptr -4
.text:0000631C arg_0           = dword ptr  8
.text:0000631C
.text:0000631C                 push    ebp
.text:0000631D                 mov     ebp, esp
.text:0000631F                 push    ecx
.text:00006320                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006327                 mov     [ebp+var_4], ecx
.text:0000632A                 mov     ecx, [ebp+var_4] ; this
.text:0000632D                 call    ??1CItemEx@NTar@NArchive@@QAE@XZ ; NArchive::NTar::CItemEx::~CItemEx(void)
.text:00006332                 mov     eax, [ebp+arg_0]
.text:00006335                 and     eax, 1
.text:00006338                 jz      short loc_6346
.text:0000633A                 mov     ecx, [ebp+var_4]
.text:0000633D                 push    ecx             ; void *
.text:0000633E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00006343                 add     esp, 4
.text:00006346
.text:00006346 loc_6346:                               ; CODE XREF: NArchive::NTar::CItemEx::`scalar deleting destructor'(uint)+1Cj
.text:00006346                 mov     eax, [ebp+var_4]
.text:00006349                 add     esp, 4
.text:0000634C                 cmp     ebp, esp
.text:0000634E                 call    __RTC_CheckEsp
.text:00006353                 mov     esp, ebp
.text:00006355                 pop     ebp
.text:00006356                 retn    4
.text:00006356 ??_GCItemEx@NTar@NArchive@@QAEPAXI@Z endp
.text:00006356
.text:00006356 ; ---------------------------------------------------------------------------
.text:00006359                 align 4
.text:00006359 _text           ends
.text:00006359
.text:0000635C ; ===========================================================================
.text:0000635C
.text:0000635C ; Segment type: Pure code
.text:0000635C ; Segment permissions: Read/Execute
.text:0000635C _text           segment para public 'CODE' use32
.text:0000635C                 assume cs:_text
.text:0000635C                 ;org 635Ch
.text:0000635C ; COMDAT (pick any)
.text:0000635C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000635C
.text:0000635C ; =============== S U B R O U T I N E =======================================
.text:0000635C
.text:0000635C ; Attributes: bp-based frame
.text:0000635C
.text:0000635C ; _DWORD __thiscall NArchive::NTar::CItem::CItem(NArchive::NTar::CItem *this, const struct NArchive::NTar::CItem *)
.text:0000635C                 public ??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text:0000635C ??0CItem@NTar@NArchive@@QAE@ABU012@@Z proc near
.text:0000635C                                         ; CODE XREF: NArchive::NTar::CItemEx::CItemEx(NArchive::NTar::CItemEx const &)+15p
.text:0000635C
.text:0000635C var_10          = dword ptr -10h
.text:0000635C var_C           = dword ptr -0Ch
.text:0000635C var_4           = dword ptr -4
.text:0000635C arg_0           = dword ptr  8
.text:0000635C
.text:0000635C                 push    ebp
.text:0000635D                 mov     ebp, esp
.text:0000635F                 push    0FFFFFFFFh
.text:00006361                 push    offset __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text:00006366                 mov     eax, large fs:0
.text:0000636C                 push    eax
.text:0000636D                 push    ecx
.text:0000636E                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00006375                 mov     eax, dword ptr ds:___security_cookie
.text:0000637A                 xor     eax, ebp
.text:0000637C                 push    eax
.text:0000637D                 lea     eax, [ebp+var_C]
.text:00006380                 mov     large fs:0, eax
.text:00006386                 mov     [ebp+var_10], ecx
.text:00006389                 mov     eax, [ebp+arg_0]
.text:0000638C                 push    eax
.text:0000638D                 mov     ecx, [ebp+var_10]
.text:00006390                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00006395                 mov     [ebp+var_4], 0
.text:0000639C                 mov     ecx, [ebp+var_10]
.text:0000639F                 mov     edx, [ebp+arg_0]
.text:000063A2                 mov     eax, [edx+10h]
.text:000063A5                 mov     [ecx+10h], eax
.text:000063A8                 mov     edx, [edx+14h]
.text:000063AB                 mov     [ecx+14h], edx
.text:000063AE                 mov     eax, [ebp+var_10]
.text:000063B1                 mov     ecx, [ebp+arg_0]
.text:000063B4                 mov     edx, [ecx+18h]
.text:000063B7                 mov     [eax+18h], edx
.text:000063BA                 mov     ecx, [ecx+1Ch]
.text:000063BD                 mov     [eax+1Ch], ecx
.text:000063C0                 mov     edx, [ebp+var_10]
.text:000063C3                 mov     eax, [ebp+arg_0]
.text:000063C6                 mov     ecx, [eax+20h]
.text:000063C9                 mov     [edx+20h], ecx
.text:000063CC                 mov     eax, [eax+24h]
.text:000063CF                 mov     [edx+24h], eax
.text:000063D2                 mov     ecx, [ebp+var_10]
.text:000063D5                 mov     edx, [ebp+arg_0]
.text:000063D8                 mov     eax, [edx+28h]
.text:000063DB                 mov     [ecx+28h], eax
.text:000063DE                 mov     ecx, [ebp+var_10]
.text:000063E1                 mov     edx, [ebp+arg_0]
.text:000063E4                 mov     eax, [edx+2Ch]
.text:000063E7                 mov     [ecx+2Ch], eax
.text:000063EA                 mov     ecx, [ebp+var_10]
.text:000063ED                 mov     edx, [ebp+arg_0]
.text:000063F0                 mov     eax, [edx+30h]
.text:000063F3                 mov     [ecx+30h], eax
.text:000063F6                 mov     ecx, [ebp+var_10]
.text:000063F9                 mov     edx, [ebp+arg_0]
.text:000063FC                 mov     eax, [edx+34h]
.text:000063FF                 mov     [ecx+34h], eax
.text:00006402                 mov     ecx, [ebp+var_10]
.text:00006405                 mov     edx, [ebp+arg_0]
.text:00006408                 mov     eax, [edx+38h]
.text:0000640B                 mov     [ecx+38h], eax
.text:0000640E                 mov     ecx, [ebp+arg_0]
.text:00006411                 add     ecx, 3Ch ; '<'
.text:00006414                 push    ecx
.text:00006415                 mov     ecx, [ebp+var_10]
.text:00006418                 add     ecx, 3Ch ; '<'
.text:0000641B                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00006420                 mov     byte ptr [ebp+var_4], 1
.text:00006424                 mov     edx, [ebp+arg_0]
.text:00006427                 add     edx, 48h ; 'H'
.text:0000642A                 push    edx
.text:0000642B                 mov     ecx, [ebp+var_10]
.text:0000642E                 add     ecx, 48h ; 'H'
.text:00006431                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00006436                 mov     byte ptr [ebp+var_4], 2
.text:0000643A                 mov     eax, [ebp+arg_0]
.text:0000643D                 add     eax, 54h ; 'T'
.text:00006440                 push    eax
.text:00006441                 mov     ecx, [ebp+var_10]
.text:00006444                 add     ecx, 54h ; 'T'
.text:00006447                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:0000644C                 mov     byte ptr [ebp+var_4], 3
.text:00006450                 mov     ecx, [ebp+var_10]
.text:00006453                 mov     edx, [ebp+arg_0]
.text:00006456                 mov     eax, [edx+60h]
.text:00006459                 mov     [ecx+60h], eax
.text:0000645C                 mov     edx, [edx+64h]
.text:0000645F                 mov     [ecx+64h], edx
.text:00006462                 mov     eax, [ebp+var_10]
.text:00006465                 mov     ecx, [ebp+arg_0]
.text:00006468                 mov     dl, [ecx+68h]
.text:0000646B                 mov     [eax+68h], dl
.text:0000646E                 mov     eax, [ebp+var_10]
.text:00006471                 mov     ecx, [ebp+arg_0]
.text:00006474                 mov     dl, [ecx+69h]
.text:00006477                 mov     [eax+69h], dl
.text:0000647A                 mov     eax, [ebp+var_10]
.text:0000647D                 mov     ecx, [ebp+arg_0]
.text:00006480                 mov     dl, [ecx+6Ah]
.text:00006483                 mov     [eax+6Ah], dl
.text:00006486                 mov     eax, [ebp+arg_0]
.text:00006489                 add     eax, 6Ch ; 'l'
.text:0000648C                 push    eax
.text:0000648D                 mov     ecx, [ebp+var_10]
.text:00006490                 add     ecx, 6Ch ; 'l'
.text:00006493                 call    ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)
.text:00006498                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000649F                 mov     eax, [ebp+var_10]
.text:000064A2                 mov     ecx, [ebp+var_C]
.text:000064A5                 mov     large fs:0, ecx
.text:000064AC                 pop     ecx
.text:000064AD                 add     esp, 10h
.text:000064B0                 cmp     ebp, esp
.text:000064B2                 call    __RTC_CheckEsp
.text:000064B7                 mov     esp, ebp
.text:000064B9                 pop     ebp
.text:000064BA                 retn    4
.text:000064BA ??0CItem@NTar@NArchive@@QAE@ABU012@@Z endp
.text:000064BA
.text:000064BA ; ---------------------------------------------------------------------------
.text:000064BD                 align 10h
.text:000064BD _text           ends
.text:000064BD
.text$x:000064C0 ; ===========================================================================
.text$x:000064C0
.text$x:000064C0 ; Segment type: Pure code
.text$x:000064C0 ; Segment permissions: Read/Execute
.text$x:000064C0 _text$x         segment para public 'CODE' use32
.text$x:000064C0                 assume cs:_text$x
.text$x:000064C0                 ;org 64C0h
.text$x:000064C0 ; COMDAT (pick associative to section at 635C)
.text$x:000064C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000064C0
.text$x:000064C0 ; =============== S U B R O U T I N E =======================================
.text$x:000064C0
.text$x:000064C0
.text$x:000064C0 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0 proc near
.text$x:000064C0                                         ; DATA XREF: .xdata$x:00006508o
.text$x:000064C0                 mov     ecx, [ebp-10h]  ; this
.text$x:000064C3                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000064C3 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0 endp
.text$x:000064C3
.text$x:000064C8
.text$x:000064C8 ; =============== S U B R O U T I N E =======================================
.text$x:000064C8
.text$x:000064C8
.text$x:000064C8 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1 proc near
.text$x:000064C8                                         ; DATA XREF: .xdata$x:00006510o
.text$x:000064C8                 mov     ecx, [ebp-10h]
.text$x:000064CB                 add     ecx, 3Ch ; '<'  ; this
.text$x:000064CE                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000064CE __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1 endp
.text$x:000064CE
.text$x:000064D3
.text$x:000064D3 ; =============== S U B R O U T I N E =======================================
.text$x:000064D3
.text$x:000064D3
.text$x:000064D3 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2 proc near
.text$x:000064D3                                         ; DATA XREF: .xdata$x:00006518o
.text$x:000064D3                 mov     ecx, [ebp-10h]
.text$x:000064D6                 add     ecx, 48h ; 'H'  ; this
.text$x:000064D9                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000064D9 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2 endp
.text$x:000064D9
.text$x:000064DE
.text$x:000064DE ; =============== S U B R O U T I N E =======================================
.text$x:000064DE
.text$x:000064DE
.text$x:000064DE __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3 proc near
.text$x:000064DE                                         ; DATA XREF: .xdata$x:00006520o
.text$x:000064DE                 mov     ecx, [ebp-10h]
.text$x:000064E1                 add     ecx, 54h ; 'T'  ; this
.text$x:000064E4                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000064E4 __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3 endp
.text$x:000064E4
.text$x:000064E9
.text$x:000064E9 ; =============== S U B R O U T I N E =======================================
.text$x:000064E9
.text$x:000064E9
.text$x:000064E9 __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z proc near
.text$x:000064E9                                         ; DATA XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+5o
.text$x:000064E9
.text$x:000064E9 arg_4           = dword ptr  8
.text$x:000064E9
.text$x:000064E9                 mov     edx, [esp+arg_4]
.text$x:000064ED                 lea     eax, [edx+0Ch]
.text$x:000064F0                 mov     ecx, [edx-8]
.text$x:000064F3                 xor     ecx, eax
.text$x:000064F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064FA                 mov     eax, offset __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.text$x:000064FF                 jmp     ___CxxFrameHandler3
.text$x:000064FF __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z endp
.text$x:000064FF
.text$x:000064FF _text$x         ends
.text$x:000064FF
.xdata$x:00006504 ; ===========================================================================
.xdata$x:00006504
.xdata$x:00006504 ; Segment type: Pure data
.xdata$x:00006504 ; Segment permissions: Read
.xdata$x:00006504 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00006504                 assume cs:_xdata$x
.xdata$x:00006504                 ;org 6504h
.xdata$x:00006504 ; COMDAT (pick associative to section at 635C)
.xdata$x:00006504 __unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z db 0FFh
.xdata$x:00006504                                         ; DATA XREF: .xdata$x:0000652Co
.xdata$x:00006505                 db 0FFh
.xdata$x:00006506                 db 0FFh
.xdata$x:00006507                 db 0FFh
.xdata$x:00006508                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$0
.xdata$x:0000650C                 align 10h
.xdata$x:00006510                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$1
.xdata$x:00006514                 db    1
.xdata$x:00006515                 db    0
.xdata$x:00006516                 db    0
.xdata$x:00006517                 db    0
.xdata$x:00006518                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$2
.xdata$x:0000651C                 db    2
.xdata$x:0000651D                 db    0
.xdata$x:0000651E                 db    0
.xdata$x:0000651F                 db    0
.xdata$x:00006520                 dd offset __unwindfunclet$??0CItem@NTar@NArchive@@QAE@ABU012@@Z$3
.xdata$x:00006524 __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@ABU012@@Z db  22h ; "
.xdata$x:00006524                                         ; DATA XREF: __ehhandler$??0CItem@NTar@NArchive@@QAE@ABU012@@Z+11o
.xdata$x:00006525                 db    5
.xdata$x:00006526                 db  93h ; ô
.xdata$x:00006527                 db  19h
.xdata$x:00006528                 db    4
.xdata$x:00006529                 db    0
.xdata$x:0000652A                 db    0
.xdata$x:0000652B                 db    0
.xdata$x:0000652C                 dd offset __unwindtable$??0CItem@NTar@NArchive@@QAE@ABU012@@Z
.xdata$x:00006530                 db    0
.xdata$x:00006531                 db    0
.xdata$x:00006532                 db    0
.xdata$x:00006533                 db    0
.xdata$x:00006534                 db    0
.xdata$x:00006535                 db    0
.xdata$x:00006536                 db    0
.xdata$x:00006537                 db    0
.xdata$x:00006538                 db    0
.xdata$x:00006539                 db    0
.xdata$x:0000653A                 db    0
.xdata$x:0000653B                 db    0
.xdata$x:0000653C                 db    0
.xdata$x:0000653D                 db    0
.xdata$x:0000653E                 db    0
.xdata$x:0000653F                 db    0
.xdata$x:00006540                 db    0
.xdata$x:00006541                 db    0
.xdata$x:00006542                 db    0
.xdata$x:00006543                 db    0
.xdata$x:00006544                 db    1
.xdata$x:00006545                 db    0
.xdata$x:00006546                 db    0
.xdata$x:00006547                 db    0
.xdata$x:00006547 _xdata$x        ends
.xdata$x:00006547
.text:00006548 ; ===========================================================================
.text:00006548
.text:00006548 ; Segment type: Pure code
.text:00006548 ; Segment permissions: Read/Execute
.text:00006548 _text           segment para public 'CODE' use32
.text:00006548                 assume cs:_text
.text:00006548                 ;org 6548h
.text:00006548 ; COMDAT (pick any)
.text:00006548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006548
.text:00006548 ; =============== S U B R O U T I N E =======================================
.text:00006548
.text:00006548 ; Attributes: bp-based frame
.text:00006548
.text:00006548 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:00006548                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:00006548 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006548                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::CObjectVector<NArchive::NTar::CItemEx>(void)+11p
.text:00006548
.text:00006548 var_4           = dword ptr -4
.text:00006548
.text:00006548                 push    ebp
.text:00006549                 mov     ebp, esp
.text:0000654B                 push    ecx
.text:0000654C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006553                 mov     [ebp+var_4], ecx
.text:00006556                 mov     eax, [ebp+var_4]
.text:00006559                 mov     dword ptr [eax], 0
.text:0000655F                 mov     ecx, [ebp+var_4]
.text:00006562                 mov     dword ptr [ecx+4], 0
.text:00006569                 mov     edx, [ebp+var_4]
.text:0000656C                 mov     dword ptr [edx+8], 0
.text:00006573                 mov     eax, [ebp+var_4]
.text:00006576                 mov     esp, ebp
.text:00006578                 pop     ebp
.text:00006579                 retn
.text:00006579 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00006579
.text:00006579 ; ---------------------------------------------------------------------------
.text:0000657A                 align 4
.text:0000657A _text           ends
.text:0000657A
.text:0000657C ; ===========================================================================
.text:0000657C
.text:0000657C ; Segment type: Pure code
.text:0000657C ; Segment permissions: Read/Execute
.text:0000657C _text           segment para public 'CODE' use32
.text:0000657C                 assume cs:_text
.text:0000657C                 ;org 657Ch
.text:0000657C ; COMDAT (pick any)
.text:0000657C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000657C
.text:0000657C ; =============== S U B R O U T I N E =======================================
.text:0000657C
.text:0000657C ; Attributes: bp-based frame
.text:0000657C
.text:0000657C ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:0000657C                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:0000657C ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:0000657C                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Size(void)+11p
.text:0000657C                                         ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+46p ...
.text:0000657C
.text:0000657C var_4           = dword ptr -4
.text:0000657C
.text:0000657C                 push    ebp
.text:0000657D                 mov     ebp, esp
.text:0000657F                 push    ecx
.text:00006580                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006587                 mov     [ebp+var_4], ecx
.text:0000658A                 mov     eax, [ebp+var_4]
.text:0000658D                 mov     eax, [eax+4]
.text:00006590                 mov     esp, ebp
.text:00006592                 pop     ebp
.text:00006593                 retn
.text:00006593 ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:00006593
.text:00006593 _text           ends
.text:00006593
.text:00006594 ; ===========================================================================
.text:00006594
.text:00006594 ; Segment type: Pure code
.text:00006594 ; Segment permissions: Read/Execute
.text:00006594 _text           segment para public 'CODE' use32
.text:00006594                 assume cs:_text
.text:00006594                 ;org 6594h
.text:00006594 ; COMDAT (pick any)
.text:00006594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006594
.text:00006594 ; =============== S U B R O U T I N E =======================================
.text:00006594
.text:00006594 ; Attributes: bp-based frame
.text:00006594
.text:00006594 ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00006594                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:00006594 ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:00006594                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+9Cp
.text:00006594                                         ; __unwindfunclet$??1?$CObjectVector@UCItemEx@NTar@NArchive@@@@QAE@XZ$0+3j
.text:00006594
.text:00006594 var_8           = dword ptr -8
.text:00006594 var_4           = dword ptr -4
.text:00006594
.text:00006594                 push    ebp
.text:00006595                 mov     ebp, esp
.text:00006597                 sub     esp, 8
.text:0000659A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000065A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065A8                 mov     [ebp+var_4], ecx
.text:000065AB                 mov     eax, [ebp+var_4]
.text:000065AE                 mov     ecx, [eax]
.text:000065B0                 mov     [ebp+var_8], ecx
.text:000065B3                 mov     edx, [ebp+var_8]
.text:000065B6                 push    edx             ; void *
.text:000065B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000065BC                 add     esp, 4
.text:000065BF                 add     esp, 8
.text:000065C2                 cmp     ebp, esp
.text:000065C4                 call    __RTC_CheckEsp
.text:000065C9                 mov     esp, ebp
.text:000065CB                 pop     ebp
.text:000065CC                 retn
.text:000065CC ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:000065CC
.text:000065CC ; ---------------------------------------------------------------------------
.text:000065CD                 align 10h
.text:000065CD _text           ends
.text:000065CD
.text:000065D0 ; ===========================================================================
.text:000065D0
.text:000065D0 ; Segment type: Pure code
.text:000065D0 ; Segment permissions: Read/Execute
.text:000065D0 _text           segment para public 'CODE' use32
.text:000065D0                 assume cs:_text
.text:000065D0                 ;org 65D0h
.text:000065D0 ; COMDAT (pick any)
.text:000065D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065D0
.text:000065D0 ; =============== S U B R O U T I N E =======================================
.text:000065D0
.text:000065D0 ; Attributes: bp-based frame
.text:000065D0
.text:000065D0 ; public: void __thiscall CRecordVector<void *>::Clear(void)
.text:000065D0                 public ?Clear@?$CRecordVector@PAX@@QAEXXZ
.text:000065D0 ?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
.text:000065D0                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Clear(void)+6Fp
.text:000065D0
.text:000065D0 var_4           = dword ptr -4
.text:000065D0
.text:000065D0                 push    ebp
.text:000065D1                 mov     ebp, esp
.text:000065D3                 push    ecx
.text:000065D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000065DB                 mov     [ebp+var_4], ecx
.text:000065DE                 mov     eax, [ebp+var_4]
.text:000065E1                 mov     dword ptr [eax+4], 0
.text:000065E8                 mov     esp, ebp
.text:000065EA                 pop     ebp
.text:000065EB                 retn
.text:000065EB ?Clear@?$CRecordVector@PAX@@QAEXXZ endp
.text:000065EB
.text:000065EB _text           ends
.text:000065EB
.text:000065EC ; ===========================================================================
.text:000065EC
.text:000065EC ; Segment type: Pure code
.text:000065EC ; Segment permissions: Read/Execute
.text:000065EC _text           segment para public 'CODE' use32
.text:000065EC                 assume cs:_text
.text:000065EC                 ;org 65ECh
.text:000065EC ; COMDAT (pick any)
.text:000065EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000065EC
.text:000065EC ; =============== S U B R O U T I N E =======================================
.text:000065EC
.text:000065EC ; Attributes: bp-based frame
.text:000065EC
.text:000065EC ; public: unsigned int __thiscall CRecordVector<void *>::Add(void * const)
.text:000065EC                 public ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
.text:000065EC ?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
.text:000065EC                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::Add(NArchive::NTar::CItemEx const &)+82p
.text:000065EC
.text:000065EC var_8           = dword ptr -8
.text:000065EC var_4           = dword ptr -4
.text:000065EC arg_0           = dword ptr  8
.text:000065EC
.text:000065EC                 push    ebp
.text:000065ED                 mov     ebp, esp
.text:000065EF                 sub     esp, 8
.text:000065F2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000065F9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006600                 mov     [ebp+var_4], ecx
.text:00006603                 mov     ecx, [ebp+var_4]
.text:00006606                 call    ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition(void)
.text:0000660B                 mov     eax, [ebp+var_4]
.text:0000660E                 mov     ecx, [eax+4]
.text:00006611                 mov     edx, [ebp+var_4]
.text:00006614                 mov     eax, [edx]
.text:00006616                 mov     edx, [ebp+arg_0]
.text:00006619                 mov     [eax+ecx*4], edx
.text:0000661C                 mov     eax, [ebp+var_4]
.text:0000661F                 mov     ecx, [eax+4]
.text:00006622                 mov     [ebp+var_8], ecx
.text:00006625                 mov     edx, [ebp+var_4]
.text:00006628                 mov     eax, [edx+4]
.text:0000662B                 add     eax, 1
.text:0000662E                 mov     ecx, [ebp+var_4]
.text:00006631                 mov     [ecx+4], eax
.text:00006634                 mov     eax, [ebp+var_8]
.text:00006637                 add     esp, 8
.text:0000663A                 cmp     ebp, esp
.text:0000663C                 call    __RTC_CheckEsp
.text:00006641                 mov     esp, ebp
.text:00006643                 pop     ebp
.text:00006644                 retn    4
.text:00006644 ?Add@?$CRecordVector@PAX@@QAEIQAX@Z endp
.text:00006644
.text:00006644 ; ---------------------------------------------------------------------------
.text:00006647                 align 4
.text:00006647 _text           ends
.text:00006647
.text:00006648 ; ===========================================================================
.text:00006648
.text:00006648 ; Segment type: Pure code
.text:00006648 ; Segment permissions: Read/Execute
.text:00006648 _text           segment para public 'CODE' use32
.text:00006648                 assume cs:_text
.text:00006648                 ;org 6648h
.text:00006648 ; COMDAT (pick any)
.text:00006648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006648
.text:00006648 ; =============== S U B R O U T I N E =======================================
.text:00006648
.text:00006648 ; Attributes: bp-based frame
.text:00006648
.text:00006648 ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:00006648                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:00006648 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:00006648                                         ; CODE XREF: CObjectVector<NArchive::NTar::CItemEx>::operator[](uint)+15p
.text:00006648                                         ; CObjectVector<NArchive::NTar::CItemEx>::~CObjectVector<NArchive::NTar::CItemEx>(void)+64p ...
.text:00006648
.text:00006648 var_4           = dword ptr -4
.text:00006648 arg_0           = dword ptr  8
.text:00006648
.text:00006648                 push    ebp
.text:00006649                 mov     ebp, esp
.text:0000664B                 push    ecx
.text:0000664C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006653                 mov     [ebp+var_4], ecx
.text:00006656                 mov     eax, [ebp+var_4]
.text:00006659                 mov     ecx, [eax]
.text:0000665B                 mov     edx, [ebp+arg_0]
.text:0000665E                 lea     eax, [ecx+edx*4]
.text:00006661                 mov     esp, ebp
.text:00006663                 pop     ebp
.text:00006664                 retn    4
.text:00006664 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:00006664
.text:00006664 ; ---------------------------------------------------------------------------
.text:00006667                 align 4
.text:00006667 _text           ends
.text:00006667
.text:00006668 ; ===========================================================================
.text:00006668
.text:00006668 ; Segment type: Pure code
.text:00006668 ; Segment permissions: Read/Execute
.text:00006668 _text           segment para public 'CODE' use32
.text:00006668                 assume cs:_text
.text:00006668                 ;org 6668h
.text:00006668 ; COMDAT (pick any)
.text:00006668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006668
.text:00006668 ; =============== S U B R O U T I N E =======================================
.text:00006668
.text:00006668 ; Attributes: bp-based frame
.text:00006668
.text:00006668 ; public: __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::CRecordVector<struct NArchive::NTar::CSparseBlock>(class CRecordVector<struct NArchive::NTar::CSparseBlock> const &)
.text:00006668                 public ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z
.text:00006668 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z proc near
.text:00006668                                         ; CODE XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+137p
.text:00006668
.text:00006668 var_C           = dword ptr -0Ch
.text:00006668 var_8           = dword ptr -8
.text:00006668 var_4           = dword ptr -4
.text:00006668 arg_0           = dword ptr  8
.text:00006668
.text:00006668                 push    ebp
.text:00006669                 mov     ebp, esp
.text:0000666B                 sub     esp, 0Ch
.text:0000666E                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00006675                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000667C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00006683                 mov     [ebp+var_4], ecx
.text:00006686                 mov     eax, [ebp+var_4]
.text:00006689                 mov     dword ptr [eax], 0
.text:0000668F                 mov     ecx, [ebp+var_4]
.text:00006692                 mov     dword ptr [ecx+4], 0
.text:00006699                 mov     edx, [ebp+var_4]
.text:0000669C                 mov     dword ptr [edx+8], 0
.text:000066A3                 mov     ecx, [ebp+arg_0]
.text:000066A6                 call    ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size(void)
.text:000066AB                 mov     [ebp+var_8], eax
.text:000066AE                 cmp     [ebp+var_8], 0
.text:000066B2                 jz      short loc_6708
.text:000066B4                 xor     ecx, ecx
.text:000066B6                 mov     eax, [ebp+var_8]
.text:000066B9                 mov     edx, 10h
.text:000066BE                 mul     edx
.text:000066C0                 seto    cl
.text:000066C3                 neg     ecx
.text:000066C5                 or      ecx, eax
.text:000066C7                 push    ecx             ; unsigned int
.text:000066C8                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000066CD                 add     esp, 4
.text:000066D0                 mov     [ebp+var_C], eax
.text:000066D3                 mov     eax, [ebp+var_4]
.text:000066D6                 mov     ecx, [ebp+var_C]
.text:000066D9                 mov     [eax], ecx
.text:000066DB                 mov     edx, [ebp+var_4]
.text:000066DE                 mov     eax, [ebp+var_8]
.text:000066E1                 mov     [edx+4], eax
.text:000066E4                 mov     ecx, [ebp+var_4]
.text:000066E7                 mov     edx, [ebp+var_8]
.text:000066EA                 mov     [ecx+8], edx
.text:000066ED                 mov     eax, [ebp+var_8]
.text:000066F0                 shl     eax, 4
.text:000066F3                 push    eax             ; Size
.text:000066F4                 mov     ecx, [ebp+arg_0]
.text:000066F7                 mov     edx, [ecx]
.text:000066F9                 push    edx             ; Src
.text:000066FA                 mov     eax, [ebp+var_4]
.text:000066FD                 mov     ecx, [eax]
.text:000066FF                 push    ecx             ; Dst
.text:00006700                 call    _memcpy
.text:00006705                 add     esp, 0Ch
.text:00006708
.text:00006708 loc_6708:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)+4Aj
.text:00006708                 mov     eax, [ebp+var_4]
.text:0000670B                 add     esp, 0Ch
.text:0000670E                 cmp     ebp, esp
.text:00006710                 call    __RTC_CheckEsp
.text:00006715                 mov     esp, ebp
.text:00006717                 pop     ebp
.text:00006718                 retn    4
.text:00006718 ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@ABV0@@Z endp
.text:00006718
.text:00006718 ; ---------------------------------------------------------------------------
.text:0000671B                 align 4
.text:0000671B _text           ends
.text:0000671B
.text:0000671C ; ===========================================================================
.text:0000671C
.text:0000671C ; Segment type: Pure code
.text:0000671C ; Segment permissions: Read/Execute
.text:0000671C _text           segment para public 'CODE' use32
.text:0000671C                 assume cs:_text
.text:0000671C                 ;org 671Ch
.text:0000671C ; COMDAT (pick any)
.text:0000671C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000671C
.text:0000671C ; =============== S U B R O U T I N E =======================================
.text:0000671C
.text:0000671C ; Attributes: bp-based frame
.text:0000671C
.text:0000671C ; private: void __thiscall CRecordVector<void *>::ReserveOnePosition(void)
.text:0000671C                 public ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
.text:0000671C ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
.text:0000671C                                         ; CODE XREF: CRecordVector<void *>::Add(void * const)+1Ap
.text:0000671C
.text:0000671C var_14          = dword ptr -14h
.text:0000671C var_10          = dword ptr -10h
.text:0000671C Dst             = dword ptr -0Ch
.text:0000671C var_8           = dword ptr -8
.text:0000671C var_4           = dword ptr -4
.text:0000671C
.text:0000671C                 push    ebp
.text:0000671D                 mov     ebp, esp
.text:0000671F                 sub     esp, 14h
.text:00006722                 mov     eax, 0CCCCCCCCh
.text:00006727                 mov     [ebp+var_14], eax
.text:0000672A                 mov     [ebp+var_10], eax
.text:0000672D                 mov     [ebp+Dst], eax
.text:00006730                 mov     [ebp+var_8], eax
.text:00006733                 mov     [ebp+var_4], eax
.text:00006736                 mov     [ebp+var_4], ecx
.text:00006739                 mov     eax, [ebp+var_4]
.text:0000673C                 mov     ecx, [ebp+var_4]
.text:0000673F                 mov     edx, [eax+4]
.text:00006742                 cmp     edx, [ecx+8]
.text:00006745                 jnz     loc_67D0
.text:0000674B                 mov     eax, [ebp+var_4]
.text:0000674E                 mov     ecx, [eax+8]
.text:00006751                 shr     ecx, 2
.text:00006754                 mov     edx, [ebp+var_4]
.text:00006757                 mov     eax, [edx+8]
.text:0000675A                 lea     ecx, [eax+ecx+1]
.text:0000675E                 mov     [ebp+var_8], ecx
.text:00006761                 xor     ecx, ecx
.text:00006763                 mov     eax, [ebp+var_8]
.text:00006766                 mov     edx, 4
.text:0000676B                 mul     edx
.text:0000676D                 seto    cl
.text:00006770                 neg     ecx
.text:00006772                 or      ecx, eax
.text:00006774                 push    ecx             ; unsigned int
.text:00006775                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0000677A                 add     esp, 4
.text:0000677D                 mov     [ebp+var_10], eax
.text:00006780                 mov     eax, [ebp+var_10]
.text:00006783                 mov     [ebp+Dst], eax
.text:00006786                 mov     ecx, [ebp+var_4]
.text:00006789                 cmp     dword ptr [ecx+4], 0
.text:0000678D                 jz      short loc_67AB
.text:0000678F                 mov     edx, [ebp+var_4]
.text:00006792                 mov     eax, [edx+4]
.text:00006795                 shl     eax, 2
.text:00006798                 push    eax             ; Size
.text:00006799                 mov     ecx, [ebp+var_4]
.text:0000679C                 mov     edx, [ecx]
.text:0000679E                 push    edx             ; Src
.text:0000679F                 mov     eax, [ebp+Dst]
.text:000067A2                 push    eax             ; Dst
.text:000067A3                 call    _memcpy
.text:000067A8                 add     esp, 0Ch
.text:000067AB
.text:000067AB loc_67AB:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+71j
.text:000067AB                 mov     ecx, [ebp+var_4]
.text:000067AE                 mov     edx, [ecx]
.text:000067B0                 mov     [ebp+var_14], edx
.text:000067B3                 mov     eax, [ebp+var_14]
.text:000067B6                 push    eax             ; void *
.text:000067B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000067BC                 add     esp, 4
.text:000067BF                 mov     ecx, [ebp+var_4]
.text:000067C2                 mov     edx, [ebp+Dst]
.text:000067C5                 mov     [ecx], edx
.text:000067C7                 mov     eax, [ebp+var_4]
.text:000067CA                 mov     ecx, [ebp+var_8]
.text:000067CD                 mov     [eax+8], ecx
.text:000067D0
.text:000067D0 loc_67D0:                               ; CODE XREF: CRecordVector<void *>::ReserveOnePosition(void)+29j
.text:000067D0                 add     esp, 14h
.text:000067D3                 cmp     ebp, esp
.text:000067D5                 call    __RTC_CheckEsp
.text:000067DA                 mov     esp, ebp
.text:000067DC                 pop     ebp
.text:000067DD                 retn
.text:000067DD ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ endp
.text:000067DD
.text:000067DD ; ---------------------------------------------------------------------------
.text:000067DE                 align 10h
.text:000067DE _text           ends
.text:000067DE
.text:000067E0 ; ===========================================================================
.text:000067E0
.text:000067E0 ; Segment type: Pure code
.text:000067E0 ; Segment permissions: Read/Execute
.text:000067E0 _text           segment para public 'CODE' use32
.text:000067E0                 assume cs:_text
.text:000067E0                 ;org 67E0h
.text:000067E0 ; COMDAT (pick any)
.text:000067E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067E0
.text:000067E0 ; =============== S U B R O U T I N E =======================================
.text:000067E0
.text:000067E0
.text:000067E0 ; [thunk]:public: virtual long __stdcall NArchive::NTar::CHandler::QueryInterface`adjustor{16}' (struct _GUID const &, void * *)
.text:000067E0                 public ?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z
.text:000067E0 ?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z proc near
.text:000067E0                                         ; DATA XREF: .rdata:const NArchive::NTar::CHandler::`vftable'{for `IOutArchive'}o
.text:000067E0
.text:000067E0 arg_0           = dword ptr  4
.text:000067E0
.text:000067E0                 sub     [esp+arg_0], 10h
.text:000067E5                 jmp     ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)
.text:000067E5 ?QueryInterface@CHandler@NTar@NArchive@@WBA@AGJABU_GUID@@PAPAX@Z endp
.text:000067E5
.text:000067E5 ; ---------------------------------------------------------------------------
.text:000067EA                 align 4
.text:000067EA _text           ends
.text:000067EA
.text:000067EC ; ===========================================================================
.text:000067EC
.text:000067EC ; Segment type: Pure code
.text:000067EC ; Segment permissions: Read/Execute
.text:000067EC _text           segment para public 'CODE' use32
.text:000067EC                 assume cs:_text
.text:000067EC                 ;org 67ECh
.text:000067EC ; COMDAT (pick any)
.text:000067EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067EC
.text:000067EC ; =============== S U B R O U T I N E =======================================
.text:000067EC
.text:000067EC
.text:000067EC ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{4}' (void)
.text:000067EC                 public ?Release@CCopyCoder@NCompress@@W3AGKXZ
.text:000067EC ?Release@CCopyCoder@NCompress@@W3AGKXZ proc near
.text:000067EC                                         ; DATA XREF: .rdata:00003B3Co
.text:000067EC
.text:000067EC arg_0           = dword ptr  4
.text:000067EC
.text:000067EC                 sub     [esp+arg_0], 4
.text:000067F1                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:000067F1 ?Release@CCopyCoder@NCompress@@W3AGKXZ endp
.text:000067F1
.text:000067F1 ; ---------------------------------------------------------------------------
.text:000067F6                 align 4
.text:000067F6 _text           ends
.text:000067F6
.text:000067F8 ; ===========================================================================
.text:000067F8
.text:000067F8 ; Segment type: Pure code
.text:000067F8 ; Segment permissions: Read/Execute
.text:000067F8 _text           segment para public 'CODE' use32
.text:000067F8                 assume cs:_text
.text:000067F8                 ;org 67F8h
.text:000067F8 ; COMDAT (pick any)
.text:000067F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000067F8
.text:000067F8 ; =============== S U B R O U T I N E =======================================
.text:000067F8
.text:000067F8
.text:000067F8 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::Release`adjustor{4}' (void)
.text:000067F8                 public ?Release@CHandler@NTar@NArchive@@W3AGKXZ
.text:000067F8 ?Release@CHandler@NTar@NArchive@@W3AGKXZ proc near
.text:000067F8                                         ; DATA XREF: .rdata:000035B4o
.text:000067F8
.text:000067F8 arg_0           = dword ptr  4
.text:000067F8
.text:000067F8                 sub     [esp+arg_0], 4
.text:000067FD                 jmp     ?Release@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::Release(void)
.text:000067FD ?Release@CHandler@NTar@NArchive@@W3AGKXZ endp
.text:000067FD
.text:000067FD ; ---------------------------------------------------------------------------
.text:00006802                 align 4
.text:00006802 _text           ends
.text:00006802
.text:00006804 ; ===========================================================================
.text:00006804
.text:00006804 ; Segment type: Pure code
.text:00006804 ; Segment permissions: Read/Execute
.text:00006804 _text           segment para public 'CODE' use32
.text:00006804                 assume cs:_text
.text:00006804                 ;org 6804h
.text:00006804 ; COMDAT (pick any)
.text:00006804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006804
.text:00006804 ; =============== S U B R O U T I N E =======================================
.text:00006804
.text:00006804
.text:00006804 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{8}' (void)
.text:00006804                 public ?Release@CCopyCoder@NCompress@@W7AGKXZ
.text:00006804 ?Release@CCopyCoder@NCompress@@W7AGKXZ proc near
.text:00006804                                         ; DATA XREF: .rdata:00003B28o
.text:00006804
.text:00006804 arg_0           = dword ptr  4
.text:00006804
.text:00006804                 sub     [esp+arg_0], 8
.text:00006809                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:00006809 ?Release@CCopyCoder@NCompress@@W7AGKXZ endp
.text:00006809
.text:00006809 ; ---------------------------------------------------------------------------
.text:0000680E                 align 10h
.text:0000680E _text           ends
.text:0000680E
.text:00006810 ; ===========================================================================
.text:00006810
.text:00006810 ; Segment type: Pure code
.text:00006810 ; Segment permissions: Read/Execute
.text:00006810 _text           segment para public 'CODE' use32
.text:00006810                 assume cs:_text
.text:00006810                 ;org 6810h
.text:00006810 ; COMDAT (pick any)
.text:00006810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006810
.text:00006810 ; =============== S U B R O U T I N E =======================================
.text:00006810
.text:00006810
.text:00006810 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::Release`adjustor{8}' (void)
.text:00006810                 public ?Release@CHandler@NTar@NArchive@@W7AGKXZ
.text:00006810 ?Release@CHandler@NTar@NArchive@@W7AGKXZ proc near
.text:00006810                                         ; DATA XREF: .rdata:000035A0o
.text:00006810
.text:00006810 arg_0           = dword ptr  4
.text:00006810
.text:00006810                 sub     [esp+arg_0], 8
.text:00006815                 jmp     ?Release@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::Release(void)
.text:00006815 ?Release@CHandler@NTar@NArchive@@W7AGKXZ endp
.text:00006815
.text:00006815 ; ---------------------------------------------------------------------------
.text:0000681A                 align 4
.text:0000681A _text           ends
.text:0000681A
.text:0000681C ; ===========================================================================
.text:0000681C
.text:0000681C ; Segment type: Pure code
.text:0000681C ; Segment permissions: Read/Execute
.text:0000681C _text           segment para public 'CODE' use32
.text:0000681C                 assume cs:_text
.text:0000681C                 ;org 681Ch
.text:0000681C ; COMDAT (pick any)
.text:0000681C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000681C
.text:0000681C ; =============== S U B R O U T I N E =======================================
.text:0000681C
.text:0000681C
.text:0000681C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::Release`adjustor{12}' (void)
.text:0000681C                 public ?Release@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000681C ?Release@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000681C                                         ; DATA XREF: .rdata:00003B14o
.text:0000681C
.text:0000681C arg_0           = dword ptr  4
.text:0000681C
.text:0000681C                 sub     [esp+arg_0], 0Ch
.text:00006821                 jmp     ?Release@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::Release(void)
.text:00006821 ?Release@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:00006821
.text:00006821 ; ---------------------------------------------------------------------------
.text:00006826                 align 4
.text:00006826 _text           ends
.text:00006826
.text:00006828 ; ===========================================================================
.text:00006828
.text:00006828 ; Segment type: Pure code
.text:00006828 ; Segment permissions: Read/Execute
.text:00006828 _text           segment para public 'CODE' use32
.text:00006828                 assume cs:_text
.text:00006828                 ;org 6828h
.text:00006828 ; COMDAT (pick any)
.text:00006828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006828
.text:00006828 ; =============== S U B R O U T I N E =======================================
.text:00006828
.text:00006828
.text:00006828 ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{4}' (void)
.text:00006828                 public ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
.text:00006828 ?AddRef@CCopyCoder@NCompress@@W3AGKXZ proc near ; DATA XREF: .rdata:00003B38o
.text:00006828
.text:00006828 arg_0           = dword ptr  4
.text:00006828
.text:00006828                 sub     [esp+arg_0], 4
.text:0000682D                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:0000682D ?AddRef@CCopyCoder@NCompress@@W3AGKXZ endp
.text:0000682D
.text:0000682D ; ---------------------------------------------------------------------------
.text:00006832                 align 4
.text:00006832 _text           ends
.text:00006832
.text:00006834 ; ===========================================================================
.text:00006834
.text:00006834 ; Segment type: Pure code
.text:00006834 ; Segment permissions: Read/Execute
.text:00006834 _text           segment para public 'CODE' use32
.text:00006834                 assume cs:_text
.text:00006834                 ;org 6834h
.text:00006834 ; COMDAT (pick any)
.text:00006834                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006834
.text:00006834 ; =============== S U B R O U T I N E =======================================
.text:00006834
.text:00006834
.text:00006834 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::Release`adjustor{12}' (void)
.text:00006834                 public ?Release@CHandler@NTar@NArchive@@WM@AGKXZ
.text:00006834 ?Release@CHandler@NTar@NArchive@@WM@AGKXZ proc near
.text:00006834                                         ; DATA XREF: .rdata:0000358Co
.text:00006834
.text:00006834 arg_0           = dword ptr  4
.text:00006834
.text:00006834                 sub     [esp+arg_0], 0Ch
.text:00006839                 jmp     ?Release@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::Release(void)
.text:00006839 ?Release@CHandler@NTar@NArchive@@WM@AGKXZ endp
.text:00006839
.text:00006839 ; ---------------------------------------------------------------------------
.text:0000683E                 align 10h
.text:0000683E _text           ends
.text:0000683E
.text:00006840 ; ===========================================================================
.text:00006840
.text:00006840 ; Segment type: Pure code
.text:00006840 ; Segment permissions: Read/Execute
.text:00006840 _text           segment para public 'CODE' use32
.text:00006840                 assume cs:_text
.text:00006840                 ;org 6840h
.text:00006840 ; COMDAT (pick any)
.text:00006840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006840
.text:00006840 ; =============== S U B R O U T I N E =======================================
.text:00006840
.text:00006840
.text:00006840 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::AddRef`adjustor{4}' (void)
.text:00006840                 public ?AddRef@CHandler@NTar@NArchive@@W3AGKXZ
.text:00006840 ?AddRef@CHandler@NTar@NArchive@@W3AGKXZ proc near
.text:00006840                                         ; DATA XREF: .rdata:000035B0o
.text:00006840
.text:00006840 arg_0           = dword ptr  4
.text:00006840
.text:00006840                 sub     [esp+arg_0], 4
.text:00006845                 jmp     ?AddRef@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::AddRef(void)
.text:00006845 ?AddRef@CHandler@NTar@NArchive@@W3AGKXZ endp
.text:00006845
.text:00006845 ; ---------------------------------------------------------------------------
.text:0000684A                 align 4
.text:0000684A _text           ends
.text:0000684A
.text:0000684C ; ===========================================================================
.text:0000684C
.text:0000684C ; Segment type: Pure code
.text:0000684C ; Segment permissions: Read/Execute
.text:0000684C _text           segment para public 'CODE' use32
.text:0000684C                 assume cs:_text
.text:0000684C                 ;org 684Ch
.text:0000684C ; COMDAT (pick any)
.text:0000684C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000684C
.text:0000684C ; =============== S U B R O U T I N E =======================================
.text:0000684C
.text:0000684C
.text:0000684C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{8}' (void)
.text:0000684C                 public ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
.text:0000684C ?AddRef@CCopyCoder@NCompress@@W7AGKXZ proc near ; DATA XREF: .rdata:00003B24o
.text:0000684C
.text:0000684C arg_0           = dword ptr  4
.text:0000684C
.text:0000684C                 sub     [esp+arg_0], 8
.text:00006851                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00006851 ?AddRef@CCopyCoder@NCompress@@W7AGKXZ endp
.text:00006851
.text:00006851 ; ---------------------------------------------------------------------------
.text:00006856                 align 4
.text:00006856 _text           ends
.text:00006856
.text:00006858 ; ===========================================================================
.text:00006858
.text:00006858 ; Segment type: Pure code
.text:00006858 ; Segment permissions: Read/Execute
.text:00006858 _text           segment para public 'CODE' use32
.text:00006858                 assume cs:_text
.text:00006858                 ;org 6858h
.text:00006858 ; COMDAT (pick any)
.text:00006858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006858
.text:00006858 ; =============== S U B R O U T I N E =======================================
.text:00006858
.text:00006858
.text:00006858 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00006858                 public ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00006858 ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00006858                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressSetInStream'}o
.text:00006858
.text:00006858 arg_0           = dword ptr  4
.text:00006858
.text:00006858                 sub     [esp+arg_0], 4
.text:0000685D                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:0000685D ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000685D
.text:0000685D ; ---------------------------------------------------------------------------
.text:00006862                 align 4
.text:00006862 _text           ends
.text:00006862
.text:00006864 ; ===========================================================================
.text:00006864
.text:00006864 ; Segment type: Pure code
.text:00006864 ; Segment permissions: Read/Execute
.text:00006864 _text           segment para public 'CODE' use32
.text:00006864                 assume cs:_text
.text:00006864                 ;org 6864h
.text:00006864 ; COMDAT (pick any)
.text:00006864                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006864
.text:00006864 ; =============== S U B R O U T I N E =======================================
.text:00006864
.text:00006864
.text:00006864 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::Release`adjustor{16}' (void)
.text:00006864                 public ?Release@CHandler@NTar@NArchive@@WBA@AGKXZ
.text:00006864 ?Release@CHandler@NTar@NArchive@@WBA@AGKXZ proc near
.text:00006864                                         ; DATA XREF: .rdata:00003574o
.text:00006864
.text:00006864 arg_0           = dword ptr  4
.text:00006864
.text:00006864                 sub     [esp+arg_0], 10h
.text:00006869                 jmp     ?Release@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::Release(void)
.text:00006869 ?Release@CHandler@NTar@NArchive@@WBA@AGKXZ endp
.text:00006869
.text:00006869 ; ---------------------------------------------------------------------------
.text:0000686E                 align 10h
.text:0000686E _text           ends
.text:0000686E
.text:00006870 ; ===========================================================================
.text:00006870
.text:00006870 ; Segment type: Pure code
.text:00006870 ; Segment permissions: Read/Execute
.text:00006870 _text           segment para public 'CODE' use32
.text:00006870                 assume cs:_text
.text:00006870                 ;org 6870h
.text:00006870 ; COMDAT (pick any)
.text:00006870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006870
.text:00006870 ; =============== S U B R O U T I N E =======================================
.text:00006870
.text:00006870
.text:00006870 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::AddRef`adjustor{8}' (void)
.text:00006870                 public ?AddRef@CHandler@NTar@NArchive@@W7AGKXZ
.text:00006870 ?AddRef@CHandler@NTar@NArchive@@W7AGKXZ proc near
.text:00006870                                         ; DATA XREF: .rdata:0000359Co
.text:00006870
.text:00006870 arg_0           = dword ptr  4
.text:00006870
.text:00006870                 sub     [esp+arg_0], 8
.text:00006875                 jmp     ?AddRef@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::AddRef(void)
.text:00006875 ?AddRef@CHandler@NTar@NArchive@@W7AGKXZ endp
.text:00006875
.text:00006875 ; ---------------------------------------------------------------------------
.text:0000687A                 align 4
.text:0000687A _text           ends
.text:0000687A
.text:0000687C ; ===========================================================================
.text:0000687C
.text:0000687C ; Segment type: Pure code
.text:0000687C ; Segment permissions: Read/Execute
.text:0000687C _text           segment para public 'CODE' use32
.text:0000687C                 assume cs:_text
.text:0000687C                 ;org 687Ch
.text:0000687C ; COMDAT (pick any)
.text:0000687C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000687C
.text:0000687C ; =============== S U B R O U T I N E =======================================
.text:0000687C
.text:0000687C
.text:0000687C ; [thunk]:public: virtual unsigned long __stdcall NCompress::CCopyCoder::AddRef`adjustor{12}' (void)
.text:0000687C                 public ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
.text:0000687C ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ proc near
.text:0000687C                                         ; DATA XREF: .rdata:00003B10o
.text:0000687C
.text:0000687C arg_0           = dword ptr  4
.text:0000687C
.text:0000687C                 sub     [esp+arg_0], 0Ch
.text:00006881                 jmp     ?AddRef@CCopyCoder@NCompress@@UAGKXZ ; NCompress::CCopyCoder::AddRef(void)
.text:00006881 ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ endp
.text:00006881
.text:00006881 ; ---------------------------------------------------------------------------
.text:00006886                 align 4
.text:00006886 _text           ends
.text:00006886
.text:00006888 ; ===========================================================================
.text:00006888
.text:00006888 ; Segment type: Pure code
.text:00006888 ; Segment permissions: Read/Execute
.text:00006888 _text           segment para public 'CODE' use32
.text:00006888                 assume cs:_text
.text:00006888                 ;org 6888h
.text:00006888 ; COMDAT (pick any)
.text:00006888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006888
.text:00006888 ; =============== S U B R O U T I N E =======================================
.text:00006888
.text:00006888
.text:00006888 ; [thunk]:public: virtual long __stdcall NArchive::NTar::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00006888                 public ?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:00006888 ?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00006888                                         ; DATA XREF: .rdata:const NArchive::NTar::CHandler::`vftable'{for `IArchiveOpenSeq'}o
.text:00006888
.text:00006888 arg_0           = dword ptr  4
.text:00006888
.text:00006888                 sub     [esp+arg_0], 4
.text:0000688D                 jmp     ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)
.text:0000688D ?QueryInterface@CHandler@NTar@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:0000688D
.text:0000688D ; ---------------------------------------------------------------------------
.text:00006892                 align 4
.text:00006892 _text           ends
.text:00006892
.text:00006894 ; ===========================================================================
.text:00006894
.text:00006894 ; Segment type: Pure code
.text:00006894 ; Segment permissions: Read/Execute
.text:00006894 _text           segment para public 'CODE' use32
.text:00006894                 assume cs:_text
.text:00006894                 ;org 6894h
.text:00006894 ; COMDAT (pick any)
.text:00006894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00006894
.text:00006894 ; =============== S U B R O U T I N E =======================================
.text:00006894
.text:00006894
.text:00006894 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00006894                 public ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:00006894 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00006894                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ISequentialInStream'}o
.text:00006894
.text:00006894 arg_0           = dword ptr  4
.text:00006894
.text:00006894                 sub     [esp+arg_0], 8
.text:00006899                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:00006899 ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00006899
.text:00006899 ; ---------------------------------------------------------------------------
.text:0000689E                 align 10h
.text:0000689E _text           ends
.text:0000689E
.text:000068A0 ; ===========================================================================
.text:000068A0
.text:000068A0 ; Segment type: Pure code
.text:000068A0 ; Segment permissions: Read/Execute
.text:000068A0 _text           segment para public 'CODE' use32
.text:000068A0                 assume cs:_text
.text:000068A0                 ;org 68A0h
.text:000068A0 ; COMDAT (pick any)
.text:000068A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068A0
.text:000068A0 ; =============== S U B R O U T I N E =======================================
.text:000068A0
.text:000068A0
.text:000068A0 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::AddRef`adjustor{12}' (void)
.text:000068A0                 public ?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ
.text:000068A0 ?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ proc near
.text:000068A0                                         ; DATA XREF: .rdata:00003588o
.text:000068A0
.text:000068A0 arg_0           = dword ptr  4
.text:000068A0
.text:000068A0                 sub     [esp+arg_0], 0Ch
.text:000068A5                 jmp     ?AddRef@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::AddRef(void)
.text:000068A5 ?AddRef@CHandler@NTar@NArchive@@WM@AGKXZ endp
.text:000068A5
.text:000068A5 ; ---------------------------------------------------------------------------
.text:000068AA                 align 4
.text:000068AA _text           ends
.text:000068AA
.text:000068AC ; ===========================================================================
.text:000068AC
.text:000068AC ; Segment type: Pure code
.text:000068AC ; Segment permissions: Read/Execute
.text:000068AC _text           segment para public 'CODE' use32
.text:000068AC                 assume cs:_text
.text:000068AC                 ;org 68ACh
.text:000068AC ; COMDAT (pick any)
.text:000068AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068AC
.text:000068AC ; =============== S U B R O U T I N E =======================================
.text:000068AC
.text:000068AC
.text:000068AC ; [thunk]:public: virtual long __stdcall NArchive::NTar::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000068AC                 public ?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:000068AC ?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000068AC                                         ; DATA XREF: .rdata:const NArchive::NTar::CHandler::`vftable'{for `IInArchiveGetStream'}o
.text:000068AC
.text:000068AC arg_0           = dword ptr  4
.text:000068AC
.text:000068AC                 sub     [esp+arg_0], 8
.text:000068B1                 jmp     ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)
.text:000068B1 ?QueryInterface@CHandler@NTar@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000068B1
.text:000068B1 ; ---------------------------------------------------------------------------
.text:000068B6                 align 4
.text:000068B6 _text           ends
.text:000068B6
.text:000068B8 ; ===========================================================================
.text:000068B8
.text:000068B8 ; Segment type: Pure code
.text:000068B8 ; Segment permissions: Read/Execute
.text:000068B8 _text           segment para public 'CODE' use32
.text:000068B8                 assume cs:_text
.text:000068B8                 ;org 68B8h
.text:000068B8 ; COMDAT (pick any)
.text:000068B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068B8
.text:000068B8 ; =============== S U B R O U T I N E =======================================
.text:000068B8
.text:000068B8
.text:000068B8 ; [thunk]:public: virtual long __stdcall NCompress::CCopyCoder::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000068B8                 public ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
.text:000068B8 ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000068B8                                         ; DATA XREF: .rdata:const NCompress::CCopyCoder::`vftable'{for `ICompressGetInStreamProcessedSize'}o
.text:000068B8
.text:000068B8 arg_0           = dword ptr  4
.text:000068B8
.text:000068B8                 sub     [esp+arg_0], 0Ch
.text:000068BD                 jmp     ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)
.text:000068BD ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000068BD
.text:000068BD ; ---------------------------------------------------------------------------
.text:000068C2                 align 4
.text:000068C2 _text           ends
.text:000068C2
.text:000068C4 ; ===========================================================================
.text:000068C4
.text:000068C4 ; Segment type: Pure code
.text:000068C4 ; Segment permissions: Read/Execute
.text:000068C4 _text           segment para public 'CODE' use32
.text:000068C4                 assume cs:_text
.text:000068C4                 ;org 68C4h
.text:000068C4 ; COMDAT (pick any)
.text:000068C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068C4
.text:000068C4 ; =============== S U B R O U T I N E =======================================
.text:000068C4
.text:000068C4
.text:000068C4 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NTar::CHandler::AddRef`adjustor{16}' (void)
.text:000068C4                 public ?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ
.text:000068C4 ?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ proc near
.text:000068C4                                         ; DATA XREF: .rdata:00003570o
.text:000068C4
.text:000068C4 arg_0           = dword ptr  4
.text:000068C4
.text:000068C4                 sub     [esp+arg_0], 10h
.text:000068C9                 jmp     ?AddRef@CHandler@NTar@NArchive@@UAGKXZ ; NArchive::NTar::CHandler::AddRef(void)
.text:000068C9 ?AddRef@CHandler@NTar@NArchive@@WBA@AGKXZ endp
.text:000068C9
.text:000068C9 ; ---------------------------------------------------------------------------
.text:000068CE                 align 10h
.text:000068CE _text           ends
.text:000068CE
.text:000068D0 ; ===========================================================================
.text:000068D0
.text:000068D0 ; Segment type: Pure code
.text:000068D0 ; Segment permissions: Read/Execute
.text:000068D0 _text           segment para public 'CODE' use32
.text:000068D0                 assume cs:_text
.text:000068D0                 ;org 68D0h
.text:000068D0 ; COMDAT (pick any)
.text:000068D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000068D0
.text:000068D0 ; =============== S U B R O U T I N E =======================================
.text:000068D0
.text:000068D0
.text:000068D0 ; [thunk]:public: virtual long __stdcall NArchive::NTar::CHandler::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000068D0                 public ?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.text:000068D0 ?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000068D0                                         ; DATA XREF: .rdata:const NArchive::NTar::CHandler::`vftable'{for `ISetProperties'}o
.text:000068D0
.text:000068D0 arg_0           = dword ptr  4
.text:000068D0
.text:000068D0                 sub     [esp+arg_0], 0Ch
.text:000068D5                 jmp     ?QueryInterface@CHandler@NTar@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)
.text:000068D5 ?QueryInterface@CHandler@NTar@NArchive@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000068D5
.text:000068D5 _text           ends
.text:000068D5
UNDEF:000068E0 ; ===========================================================================
UNDEF:000068E0
UNDEF:000068E0 ; Segment type: Externs
UNDEF:000068E0 ; UNDEF
UNDEF:000068E0                 extrn __RTC_Shutdown:near
UNDEF:000068E0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000068E4                 extrn __RTC_InitBase:near
UNDEF:000068E4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000068E8 ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:000068E8                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:000068E8                                         ; DATA XREF: NArchive::NTar::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:000068E8                                         ; NArchive::NTar::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:000068EC ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:000068EC                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:000068EC                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+170p
UNDEF:000068EC                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+285p
UNDEF:000068F0 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:000068F0                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:000068F0                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+158p
UNDEF:000068F4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:000068F4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:000068F4                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+143p
UNDEF:000068F4                                         ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+164p
UNDEF:000068F8 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:000068F8                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:000068F8                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+FBp
UNDEF:000068F8                                         ; NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1D3p
UNDEF:000068FC ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:000068FC                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:000068FC                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74p
UNDEF:000068FC                                         ; NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+A0p ...
UNDEF:00006900                 extrn ___security_cookie:near
UNDEF:00006900                                         ; DATA XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+16r
UNDEF:00006900                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2Dr ...
UNDEF:00006904                 extrn __RTC_CheckEsp:near
UNDEF:00006904                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1A8p
UNDEF:00006904                                         ; NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+D4p ...
UNDEF:00006908 ; __fastcall __security_check_cookie(x)
UNDEF:00006908                 extrn @__security_check_cookie@4:near
UNDEF:00006908                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+19Ep
UNDEF:00006908                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+659p ...
UNDEF:0000690C ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:0000690C                 extrn @_RTC_CheckStackVars@8:near
UNDEF:0000690C                                         ; CODE XREF: NArchive::NTar::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+191p
UNDEF:0000690C                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+640p ...
UNDEF:00006910 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:00006910                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:00006910                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:00006914 ; __int32 NArchive::NTar::ReadItem(NArchive::NTar *__hidden this, struct ISequentialInStream *, bool *, struct NArchive::NTar::CItemEx *, enum NArchive::NTar::EErrorType *)
UNDEF:00006914                 extrn ?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z:near
UNDEF:00006914                                         ; CODE XREF: NArchive::NTar::CHandler::ReadItem2(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &)+45p
UNDEF:00006918 ; int __stdcall MyStringCompareNoCase(const wchar_t *, const wchar_t *)
UNDEF:00006918                 extrn ?MyStringCompareNoCase@@YGHPB_W0@Z:near
UNDEF:00006918                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5CDp
UNDEF:0000691C                 extrn _IID_IArchiveOpenVolumeCallback:near
UNDEF:0000691C                                         ; DATA XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+488o
UNDEF:00006920 ; bool __stdcall CheckUTF8(const char *, bool)
UNDEF:00006920                 extrn ?CheckUTF8@@YG_NPBD_N@Z:near
UNDEF:00006920                                         ; CODE XREF: NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1AEp
UNDEF:00006920                                         ; NArchive::NTar::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1CCp ...
UNDEF:00006924                 extrn ___CxxFrameHandler3:near
UNDEF:00006924                                         ; CODE XREF: __ehhandler$?Open2@CHandler@NTar@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z+23j
UNDEF:00006924                                         ; __ehhandler$?Open@CHandler@NTar@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+16j ...
UNDEF:00006928 ; void __cdecl operator delete(void *)
UNDEF:00006928                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??0CHandler@NTar@NArchive@@QAE@XZ$5+4p
UNDEF:00006928                                         ; __unwindfunclet$?Extract@CHandler@NTar@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2+7p ...
UNDEF:0000692C ; public: __thiscall AString::AString(void)
UNDEF:0000692C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000692C                                         ; CODE XREF: NArchive::NTar::CItem::CItem(void)+30p
UNDEF:0000692C                                         ; NArchive::NTar::CItem::CItem(void)+42p ...
UNDEF:00006930 ; void *__cdecl operator new(unsigned int)
UNDEF:00006930                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NTar::CHandler::CHandler(void)+FCp
UNDEF:00006930                                         ; NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1C7p ...
UNDEF:00006934 ; const type_info::`vftable'
UNDEF:00006934                 extrn ??_7type_info@@6B@:near
UNDEF:00006934                                         ; DATA XREF: .data:NArchive::NTar::CHandler `RTTI Type Descriptor'o
UNDEF:00006934                                         ; .data:IInArchive `RTTI Type Descriptor'o ...
UNDEF:00006938 ; public: virtual long __stdcall NArchive::NTar::CHandler::UpdateItems(struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
UNDEF:00006938                 extrn ?UpdateItems@CHandler@NTar@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:near
UNDEF:00006938                                         ; DATA XREF: .rdata:00003578o
UNDEF:0000693C ; public: virtual long __stdcall NArchive::NTar::CHandler::GetFileTimeType(unsigned int *)
UNDEF:0000693C                 extrn ?GetFileTimeType@CHandler@NTar@NArchive@@UAGJPAI@Z:near
UNDEF:0000693C                                         ; DATA XREF: .rdata:0000357Co
UNDEF:00006940 ; public: virtual long __stdcall NCompress::CCopyCoder::Code(struct ISequentialInStream *, struct ISequentialOutStream *, unsigned __int64 const *, unsigned __int64 const *, struct ICompressProgressInfo *)
UNDEF:00006940                 extrn ?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:near
UNDEF:00006940                                         ; DATA XREF: .rdata:00003B58o
UNDEF:00006944 ; public: virtual long __stdcall NCompress::CCopyCoder::SetInStream(struct ISequentialInStream *)
UNDEF:00006944                 extrn ?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:near
UNDEF:00006944                                         ; DATA XREF: .rdata:00003B40o
UNDEF:00006948 ; public: virtual long __stdcall NCompress::CCopyCoder::ReleaseInStream(void)
UNDEF:00006948                 extrn ?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:near
UNDEF:00006948                                         ; DATA XREF: .rdata:00003B44o
UNDEF:0000694C ; public: virtual long __stdcall NCompress::CCopyCoder::Read(void *, unsigned int, unsigned int *)
UNDEF:0000694C                 extrn ?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:near
UNDEF:0000694C                                         ; DATA XREF: .rdata:00003B2Co
UNDEF:00006950 ; public: virtual long __stdcall NCompress::CCopyCoder::GetInStreamProcessedSize(unsigned __int64 *)
UNDEF:00006950                 extrn ?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:near
UNDEF:00006950                                         ; DATA XREF: .rdata:00003B18o
UNDEF:00006954                 extrn __purecall:near   ; DATA XREF: .rdata:const ISequentialInStream::`vftable'o
UNDEF:00006954                                         ; .rdata:00003E48o ...
UNDEF:00006958                 extrn _IID_ICompressGetInStreamProcessedSize:near
UNDEF:00006958                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_3F4Ao
UNDEF:0000695C                 extrn _IID_ISequentialInStream:near
UNDEF:0000695C                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_3F16o
UNDEF:0000695C                                         ; CLimitedSequentialInStream::QueryInterface(_GUID const &,void * *):loc_4B80o ...
UNDEF:00006960                 extrn _IID_ICompressSetInStream:near
UNDEF:00006960                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_3EE2o
UNDEF:00006964                 extrn _IID_ICompressCoder:near
UNDEF:00006964                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *):loc_3EC3o
UNDEF:00006968 ; const IID IID_IUnknown
UNDEF:00006968                 extrn _IID_IUnknown:near
UNDEF:00006968                                         ; DATA XREF: NCompress::CCopyCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00006968                                         ; NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *)+20o ...
UNDEF:0000696C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000696C                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00006970 ; _DWORD __thiscall NCompress::CCopyCoder::~CCopyCoder(NCompress::CCopyCoder *__hidden this)
UNDEF:00006970                 extrn ??1CCopyCoder@NCompress@@QAE@XZ:near
UNDEF:00006970                                         ; CODE XREF: NCompress::CCopyCoder::`scalar deleting destructor'(uint)+11p
UNDEF:00006974                 extrn _IID_IOutArchive:near
UNDEF:00006974                                         ; DATA XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *):loc_42D5o
UNDEF:00006978                 extrn _IID_ISetProperties:near
UNDEF:00006978                                         ; DATA XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *):loc_42A1o
UNDEF:0000697C                 extrn _IID_IInArchiveGetStream:near
UNDEF:0000697C                                         ; DATA XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *):loc_426Do
UNDEF:00006980                 extrn _IID_IArchiveOpenSeq:near
UNDEF:00006980                                         ; DATA XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *):loc_4236o
UNDEF:00006984                 extrn _IID_IInArchive:near
UNDEF:00006984                                         ; DATA XREF: NArchive::NTar::CHandler::QueryInterface(_GUID const &,void * *):loc_4217o
UNDEF:00006988 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(class UString const &)
UNDEF:00006988                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:near
UNDEF:00006988                                         ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+9Bp
UNDEF:0000698C ; void NArchive::NItemName::ConvertToOSName2(NArchive::NItemName *__hidden this, struct UString *)
UNDEF:0000698C                 extrn ?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z:near
UNDEF:0000698C                                         ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+8Fp
UNDEF:00006990 ; void __stdcall MultiByteToUnicodeString2(struct UString *, const struct AString *, unsigned int)
UNDEF:00006990                 extrn ?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z:near
UNDEF:00006990                                         ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+7Ep
UNDEF:00006994 ; bool __stdcall ConvertUTF8ToUnicode(const struct AString *, struct UString *)
UNDEF:00006994                 extrn ?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:near
UNDEF:00006994                                         ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+65p
UNDEF:00006998 ; public: __thiscall UString::UString(void)
UNDEF:00006998                 extrn ??0UString@@QAE@XZ:near
UNDEF:00006998                                         ; CODE XREF: NArchive::NTar::CHandler::TarStringToUnicode(AString const &,NWindows::NCOM::CPropVariant &,bool)+42p
UNDEF:0000699C ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(struct _FILETIME const &)
UNDEF:0000699C                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:near
UNDEF:0000699C                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1BFp
UNDEF:000069A0 ; bool NWindows::NTime::UnixTime64ToFileTime(NWindows::NTime *__hidden this, __int64, struct _FILETIME *)
UNDEF:000069A0                 extrn ?UnixTime64ToFileTime@NTime@NWindows@@YG_N_JAAU_FILETIME@@@Z:near
UNDEF:000069A0                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+1ACp
UNDEF:000069A4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(bool)
UNDEF:000069A4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:near
UNDEF:000069A4                                         ; CODE XREF: NArchive::NTar::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+139p
UNDEF:000069A8 ; bool NArchive::NItemName::HasTailSlash(NArchive::NItemName *__hidden this, const struct AString *, unsigned int)
UNDEF:000069A8                 extrn ?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z:near
UNDEF:000069A8                                         ; CODE XREF: NArchive::NTar::CItem::IsDir(void)+42p
UNDEF:000069AC ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:000069AC                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:000069AC                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+99Cp
UNDEF:000069B0 ; __int32 __thiscall CLocalProgress::SetCur(CLocalProgress *__hidden this)
UNDEF:000069B0                 extrn ?SetCur@CLocalProgress@@QAEJXZ:near
UNDEF:000069B0                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+397p
UNDEF:000069B4 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:000069B4                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:000069B4                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+249p
UNDEF:000069B8 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:000069B8                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:000069B8                                         ; CODE XREF: NArchive::NTar::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F4p
UNDEF:000069BC ; public: virtual long __stdcall CLimitedSequentialInStream::Read(void *, unsigned int, unsigned int *)
UNDEF:000069BC                 extrn ?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:near
UNDEF:000069BC                                         ; DATA XREF: .rdata:00004AB8o
UNDEF:000069C0 ; public: virtual long __stdcall CLimitedSequentialOutStream::Write(void const *, unsigned int, unsigned int *)
UNDEF:000069C0                 extrn ?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z:near
UNDEF:000069C0                                         ; DATA XREF: .rdata:00004D20o
UNDEF:000069C4                 extrn _IID_ISequentialOutStream:near
UNDEF:000069C4                                         ; DATA XREF: CLimitedSequentialOutStream::QueryInterface(_GUID const &,void * *):loc_4E28o
UNDEF:000069C8 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:000069C8                 extrn _memset:near      ; CODE XREF: NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+E0p
UNDEF:000069C8                                         ; NArchive::NTar::CSparseStream::Read(void *,uint,uint *)+3F4p
UNDEF:000069CC ; __int32 __stdcall CreateLimitedInStream(struct IInStream *, unsigned __int64, unsigned __int64, struct ISequentialInStream **)
UNDEF:000069CC                 extrn ?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z:near
UNDEF:000069CC                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+23Fp
UNDEF:000069D0 ; void __stdcall Create_BufInStream_WithReference(const void *, unsigned int, struct IUnknown *, struct ISequentialInStream **)
UNDEF:000069D0                 extrn ?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z:near
UNDEF:000069D0                                         ; CODE XREF: NArchive::NTar::CHandler::GetStream(uint,ISequentialInStream * *)+1FFp
UNDEF:000069D4                 extrn _IID_IInStream:near
UNDEF:000069D4                                         ; DATA XREF: NArchive::NTar::CSparseStream::QueryInterface(_GUID const &,void * *):loc_5274o
UNDEF:000069D8 ; __int32 __stdcall ParsePropToUInt32(const struct UString *, const struct tagPROPVARIANT *, unsigned int *)
UNDEF:000069D8                 extrn ?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:near
UNDEF:000069D8                                         ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+C1p
UNDEF:000069D8                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+126p
UNDEF:000069DC ; public: __thiscall UString::UString(wchar_t const *)
UNDEF:000069DC                 extrn ??0UString@@QAE@PB_W@Z:near
UNDEF:000069DC                                         ; CODE XREF: NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+4Cp
UNDEF:000069DC                                         ; NArchive::NTar::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+B0p ...
UNDEF:000069E0 ; void __stdcall MyStringLower_Ascii(wchar_t *)
UNDEF:000069E0                 extrn ?MyStringLower_Ascii@@YGXPA_W@Z:near
UNDEF:000069E0                                         ; CODE XREF: UString::MakeLower_Ascii(void)+14p
UNDEF:000069E4 ; bool __stdcall StringsAreEqual_Ascii(const wchar_t *, const char *)
UNDEF:000069E4                 extrn ?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:near
UNDEF:000069E4                                         ; CODE XREF: UString::IsEqualTo(char const *)+18p
UNDEF:000069E8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000069E8                 extrn _memcpy:near      ; CODE XREF: CRecordVector<unsigned __int64>::Reserve(uint)+67p
UNDEF:000069E8                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>(CRecordVector<NArchive::NTar::CSparseBlock> const &)+98p ...
UNDEF:000069EC ; public: __thiscall AString::AString(class AString const &)
UNDEF:000069EC                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:000069EC                                         ; CODE XREF: NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+34p
UNDEF:000069EC                                         ; NArchive::NTar::CItem::CItem(NArchive::NTar::CItem const &)+BFp ...
UNDEF:000069EC
UNDEF:000069EC
UNDEF:000069EC                 end