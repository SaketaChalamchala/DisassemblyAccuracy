.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 5F1DCD190DDA5A1192EDDB5C033A96A6
.text:00000000 ; Input CRC32 : 961794BA
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\TarIn.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; __stdcall IsArc_Tar(x, x)
.text:00000000                 public _IsArc_Tar@8
.text:00000000 _IsArc_Tar@8    proc near
.text:00000000
.text:00000000 var_3C          = byte ptr -3Ch
.text:00000000 var_38          = byte ptr -38h
.text:00000000 var_2C          = byte ptr -2Ch
.text:00000000 var_1C          = byte ptr -1Ch
.text:00000000 var_C           = byte ptr -0Ch
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = dword ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 sub     esp, 3Ch
.text:00000006                 push    edi
.text:00000007                 lea     edi, [ebp+var_3C]
.text:0000000A                 mov     ecx, 0Fh
.text:0000000F                 mov     eax, 0CCCCCCCCh
.text:00000014                 rep stosd
.text:00000016                 cmp     [ebp+arg_4], 200h
.text:0000001D                 jnb     short loc_29
.text:0000001F                 mov     eax, 2
.text:00000024                 jmp     loc_CE
.text:00000029 ; ---------------------------------------------------------------------------
.text:00000029
.text:00000029 loc_29:                                 ; CODE XREF: IsArc_Tar(x,x)+1Dj
.text:00000029                 mov     eax, [ebp+arg_0]
.text:0000002C                 mov     [ebp+var_4], eax
.text:0000002F                 mov     ecx, [ebp+var_4]
.text:00000032                 add     ecx, 64h ; 'd'
.text:00000035                 mov     [ebp+var_4], ecx
.text:00000038                 lea     edx, [ebp+var_C]
.text:0000003B                 push    edx
.text:0000003C                 push    8
.text:0000003E                 mov     eax, [ebp+var_4]
.text:00000041                 push    eax
.text:00000042                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000047                 movzx   ecx, al
.text:0000004A                 test    ecx, ecx
.text:0000004C                 jnz     short loc_52
.text:0000004E                 xor     eax, eax
.text:00000050                 jmp     short loc_CE
.text:00000052 ; ---------------------------------------------------------------------------
.text:00000052
.text:00000052 loc_52:                                 ; CODE XREF: IsArc_Tar(x,x)+4Cj
.text:00000052                 mov     edx, [ebp+var_4]
.text:00000055                 add     edx, 8
.text:00000058                 mov     [ebp+var_4], edx
.text:0000005B                 mov     eax, [ebp+var_4]
.text:0000005E                 add     eax, 8
.text:00000061                 mov     [ebp+var_4], eax
.text:00000064                 mov     ecx, [ebp+var_4]
.text:00000067                 add     ecx, 8
.text:0000006A                 mov     [ebp+var_4], ecx
.text:0000006D                 lea     edx, [ebp+var_1C]
.text:00000070                 push    edx
.text:00000071                 mov     eax, [ebp+var_4]
.text:00000074                 push    eax
.text:00000075                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:0000007A                 movzx   ecx, al
.text:0000007D                 test    ecx, ecx
.text:0000007F                 jnz     short loc_85
.text:00000081                 xor     eax, eax
.text:00000083                 jmp     short loc_CE
.text:00000085 ; ---------------------------------------------------------------------------
.text:00000085
.text:00000085 loc_85:                                 ; CODE XREF: IsArc_Tar(x,x)+7Fj
.text:00000085                 mov     edx, [ebp+var_4]
.text:00000088                 add     edx, 0Ch
.text:0000008B                 mov     [ebp+var_4], edx
.text:0000008E                 lea     eax, [ebp+var_2C]
.text:00000091                 push    eax
.text:00000092                 mov     ecx, [ebp+var_4]
.text:00000095                 push    ecx
.text:00000096                 call    ?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z ; NArchive::NTar::ParseInt64(char const *,__int64 &)
.text:0000009B                 movzx   edx, al
.text:0000009E                 test    edx, edx
.text:000000A0                 jnz     short loc_A6
.text:000000A2                 xor     eax, eax
.text:000000A4                 jmp     short loc_CE
.text:000000A6 ; ---------------------------------------------------------------------------
.text:000000A6
.text:000000A6 loc_A6:                                 ; CODE XREF: IsArc_Tar(x,x)+A0j
.text:000000A6                 mov     eax, [ebp+var_4]
.text:000000A9                 add     eax, 0Ch
.text:000000AC                 mov     [ebp+var_4], eax
.text:000000AF                 lea     ecx, [ebp+var_38]
.text:000000B2                 push    ecx
.text:000000B3                 push    8
.text:000000B5                 mov     edx, [ebp+var_4]
.text:000000B8                 push    edx
.text:000000B9                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:000000BE                 movzx   eax, al
.text:000000C1                 test    eax, eax
.text:000000C3                 jnz     short loc_C9
.text:000000C5                 xor     eax, eax
.text:000000C7                 jmp     short loc_CE
.text:000000C9 ; ---------------------------------------------------------------------------
.text:000000C9
.text:000000C9 loc_C9:                                 ; CODE XREF: IsArc_Tar(x,x)+C3j
.text:000000C9                 mov     eax, 1
.text:000000CE
.text:000000CE loc_CE:                                 ; CODE XREF: IsArc_Tar(x,x)+24j
.text:000000CE                                         ; IsArc_Tar(x,x)+50j ...
.text:000000CE                 push    edx
.text:000000CF                 mov     ecx, ebp
.text:000000D1                 push    eax
.text:000000D2                 lea     edx, $LN13
.text:000000D8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000000DD                 pop     eax
.text:000000DE                 pop     edx
.text:000000DF                 pop     edi
.text:000000E0                 add     esp, 3Ch
.text:000000E3                 cmp     ebp, esp
.text:000000E5                 call    __RTC_CheckEsp
.text:000000EA                 mov     esp, ebp
.text:000000EC                 pop     ebp
.text:000000ED                 retn    8
.text:000000ED _IsArc_Tar@8    endp
.text:000000ED
.text:000000ED ; ---------------------------------------------------------------------------
.text:000000F0 $LN13           dd 4                    ; DATA XREF: IsArc_Tar(x,x)+D2o
.text:000000F4                 dd offset $LN12
.text:000000F8 $LN12           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:000000F4o
.text:00000100                 dd offset $LN8          ; "mode"
.text:00000104                 dd 0FFFFFFE4h, 8
.text:0000010C                 dd offset $LN9          ; "packSize"
.text:00000110                 dd 0FFFFFFD4h, 8
.text:00000118                 dd offset $LN10         ; "time"
.text:0000011C                 dd 0FFFFFFC8h, 4
.text:00000124                 dd offset $LN11         ; "checkSum"
.text:00000128 $LN11           db 'checkSum',0         ; DATA XREF: .text:00000124o
.text:00000131 $LN10           db 'time',0             ; DATA XREF: .text:00000118o
.text:00000136 $LN9            db 'packSize',0         ; DATA XREF: .text:0000010Co
.text:0000013F $LN8            db 'mode',0             ; DATA XREF: .text:00000100o
.text:00000144                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; bool __stdcall NArchive::NTar::OctalToNumber32(char const *, unsigned int, unsigned int &)
.text:00000150 ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z proc near
.text:00000150                                         ; CODE XREF: IsArc_Tar(x,x)+42p
.text:00000150                                         ; IsArc_Tar(x,x)+B9p ...
.text:00000150
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_8           = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150 arg_4           = dword ptr  0Ch
.text:00000150 arg_8           = dword ptr  10h
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 14h
.text:00000156                 mov     eax, 0CCCCCCCCh
.text:0000015B                 mov     [ebp+var_14], eax
.text:0000015E                 mov     [ebp+var_10], eax
.text:00000161                 mov     [ebp+var_C], eax
.text:00000164                 mov     [ebp+var_8], eax
.text:00000167                 mov     [ebp+var_4], eax
.text:0000016A                 lea     eax, [ebp+var_C]
.text:0000016D                 push    eax
.text:0000016E                 mov     ecx, [ebp+arg_4]
.text:00000171                 push    ecx
.text:00000172                 mov     edx, [ebp+arg_0]
.text:00000175                 push    edx
.text:00000176                 call    ?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)
.text:0000017B                 movzx   eax, al
.text:0000017E                 test    eax, eax
.text:00000180                 jnz     short loc_186
.text:00000182                 xor     al, al
.text:00000184                 jmp     short loc_1AF
.text:00000186 ; ---------------------------------------------------------------------------
.text:00000186
.text:00000186 loc_186:                                ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+30j
.text:00000186                 mov     ecx, [ebp+var_C]
.text:00000189                 mov     edx, [ebp+arg_8]
.text:0000018C                 mov     [edx], ecx
.text:0000018E                 cmp     [ebp+var_8], 0
.text:00000192                 ja      short loc_1A5
.text:00000194                 jb      short loc_19C
.text:00000196                 cmp     [ebp+var_C], 0FFFFFFFFh
.text:0000019A                 ja      short loc_1A5
.text:0000019C
.text:0000019C loc_19C:                                ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+44j
.text:0000019C                 mov     [ebp+var_14], 1
.text:000001A3                 jmp     short loc_1AC
.text:000001A5 ; ---------------------------------------------------------------------------
.text:000001A5
.text:000001A5 loc_1A5:                                ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+42j
.text:000001A5                                         ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+4Aj
.text:000001A5                 mov     [ebp+var_14], 0
.text:000001AC
.text:000001AC loc_1AC:                                ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+53j
.text:000001AC                 mov     al, byte ptr [ebp+var_14]
.text:000001AF
.text:000001AF loc_1AF:                                ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+34j
.text:000001AF                 push    edx
.text:000001B0                 mov     ecx, ebp
.text:000001B2                 push    eax
.text:000001B3                 lea     edx, $LN9_0
.text:000001B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000001BE                 pop     eax
.text:000001BF                 pop     edx
.text:000001C0                 add     esp, 14h
.text:000001C3                 cmp     ebp, esp
.text:000001C5                 call    __RTC_CheckEsp
.text:000001CA                 mov     esp, ebp
.text:000001CC                 pop     ebp
.text:000001CD                 retn    0Ch
.text:000001CD ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z endp
.text:000001CD
.text:000001CD ; ---------------------------------------------------------------------------
.text:000001D0 $LN9_0          dd 1                    ; DATA XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+63o
.text:000001D4                 dd offset $LN8_0
.text:000001D8 $LN8_0          dd 0FFFFFFF4h, 8        ; DATA XREF: .text:000001D4o
.text:000001E0                 dd offset $LN7          ; "res64"
.text:000001E4 $LN7            db 'res64',0            ; DATA XREF: .text:000001E0o
.text:000001EA                 align 10h
.text:000001F0
.text:000001F0 ; =============== S U B R O U T I N E =======================================
.text:000001F0
.text:000001F0 ; Attributes: bp-based frame
.text:000001F0
.text:000001F0 ; bool __stdcall NArchive::NTar::OctalToNumber(char const *, unsigned int, unsigned __int64 &)
.text:000001F0 ?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z proc near
.text:000001F0                                         ; CODE XREF: NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+26p
.text:000001F0                                         ; NArchive::NTar::ParseInt64(char const *,__int64 &)+BEp ...
.text:000001F0
.text:000001F0 var_40          = dword ptr -40h
.text:000001F0 var_3C          = dword ptr -3Ch
.text:000001F0 var_34          = dword ptr -34h
.text:000001F0 var_28          = byte ptr -28h
.text:000001F0 var_4           = dword ptr -4
.text:000001F0 arg_0           = dword ptr  8
.text:000001F0 arg_4           = dword ptr  0Ch
.text:000001F0 arg_8           = dword ptr  10h
.text:000001F0
.text:000001F0                 push    ebp
.text:000001F1                 mov     ebp, esp
.text:000001F3                 sub     esp, 40h
.text:000001F6                 push    edi
.text:000001F7                 lea     edi, [ebp+var_40]
.text:000001FA                 mov     ecx, 10h
.text:000001FF                 mov     eax, 0CCCCCCCCh
.text:00000204                 rep stosd
.text:00000206                 mov     eax, dword ptr ds:___security_cookie
.text:0000020B                 xor     eax, ebp
.text:0000020D                 mov     [ebp+var_4], eax
.text:00000210                 mov     eax, [ebp+arg_4]
.text:00000213                 push    eax
.text:00000214                 mov     ecx, [ebp+arg_0]
.text:00000217                 push    ecx
.text:00000218                 lea     edx, [ebp+var_28]
.text:0000021B                 push    edx
.text:0000021C                 call    ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z ; NArchive::NTar::MyStrNCpy(char *,char const *,uint)
.text:00000221                 mov     eax, [ebp+arg_4]
.text:00000224                 mov     [ebp+eax+var_28], 0
.text:00000229                 mov     [ebp+var_3C], 0
.text:00000230                 jmp     short loc_23B
.text:00000232 ; ---------------------------------------------------------------------------
.text:00000232
.text:00000232 loc_232:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+58j
.text:00000232                 mov     ecx, [ebp+var_3C]
.text:00000235                 add     ecx, 1
.text:00000238                 mov     [ebp+var_3C], ecx
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+40j
.text:0000023B                 mov     edx, [ebp+var_3C]
.text:0000023E                 movsx   eax, [ebp+edx+var_28]
.text:00000243                 cmp     eax, 20h ; ' '
.text:00000246                 jnz     short loc_24A
.text:00000248                 jmp     short loc_232
.text:0000024A ; ---------------------------------------------------------------------------
.text:0000024A
.text:0000024A loc_24A:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+56j
.text:0000024A                 lea     ecx, [ebp+var_34]
.text:0000024D                 push    ecx             ; char **
.text:0000024E                 mov     edx, [ebp+var_3C]
.text:00000251                 lea     eax, [ebp+edx+var_28]
.text:00000255                 push    eax             ; char *
.text:00000256                 call    ?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z ; ConvertOctStringToUInt64(char const *,char const * *)
.text:0000025B                 mov     ecx, [ebp+arg_8]
.text:0000025E                 mov     [ecx], eax
.text:00000260                 mov     [ecx+4], edx
.text:00000263                 mov     edx, [ebp+var_3C]
.text:00000266                 lea     eax, [ebp+edx+var_28]
.text:0000026A                 cmp     [ebp+var_34], eax
.text:0000026D                 jnz     short loc_273
.text:0000026F                 xor     al, al
.text:00000271                 jmp     short loc_29B
.text:00000273 ; ---------------------------------------------------------------------------
.text:00000273
.text:00000273 loc_273:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+7Dj
.text:00000273                 mov     ecx, [ebp+var_34]
.text:00000276                 movsx   edx, byte ptr [ecx]
.text:00000279                 cmp     edx, 20h ; ' '
.text:0000027C                 jz      short loc_291
.text:0000027E                 mov     eax, [ebp+var_34]
.text:00000281                 movsx   ecx, byte ptr [eax]
.text:00000284                 test    ecx, ecx
.text:00000286                 jz      short loc_291
.text:00000288                 mov     [ebp+var_40], 0
.text:0000028F                 jmp     short loc_298
.text:00000291 ; ---------------------------------------------------------------------------
.text:00000291
.text:00000291 loc_291:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+8Cj
.text:00000291                                         ; NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+96j
.text:00000291                 mov     [ebp+var_40], 1
.text:00000298
.text:00000298 loc_298:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+9Fj
.text:00000298                 mov     al, byte ptr [ebp+var_40]
.text:0000029B
.text:0000029B loc_29B:                                ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+81j
.text:0000029B                 push    edx
.text:0000029C                 mov     ecx, ebp
.text:0000029E                 push    eax
.text:0000029F                 lea     edx, $LN12_0
.text:000002A5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000002AA                 pop     eax
.text:000002AB                 pop     edx
.text:000002AC                 pop     edi
.text:000002AD                 mov     ecx, [ebp+var_4]
.text:000002B0                 xor     ecx, ebp
.text:000002B2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000002B7                 add     esp, 40h
.text:000002BA                 cmp     ebp, esp
.text:000002BC                 call    __RTC_CheckEsp
.text:000002C1                 mov     esp, ebp
.text:000002C3                 pop     ebp
.text:000002C4                 retn    0Ch
.text:000002C4 ?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z endp
.text:000002C4
.text:000002C4 ; ---------------------------------------------------------------------------
.text:000002C7                 align 4
.text:000002C8 $LN12_0         dd 2                    ; DATA XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+AFo
.text:000002CC                 dd offset $LN11_0
.text:000002D0 $LN11_0         dd 0FFFFFFD8h, 20h      ; DATA XREF: .text:000002CCo
.text:000002D8                 dd offset $LN9_1
.text:000002DC                 db 0CCh
.text:000002DD                 db 3 dup(0FFh)
.text:000002E0                 dd 4
.text:000002E4                 dd offset $LN10_0
.text:000002E8 $LN10_0         dd 646E65h              ; DATA XREF: .text:000002E4o
.text:000002EC $LN9_1          dd 0CC007A73h           ; DATA XREF: .text:000002D8o
.text:000002F0
.text:000002F0 ; =============== S U B R O U T I N E =======================================
.text:000002F0
.text:000002F0 ; Attributes: bp-based frame
.text:000002F0
.text:000002F0 ; void __stdcall NArchive::NTar::MyStrNCpy(char *, char const *, unsigned int)
.text:000002F0 ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z proc near
.text:000002F0                                         ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+2Cp
.text:000002F0                                         ; NArchive::NTar::ReadString(char const *,uint,AString &)+35p
.text:000002F0
.text:000002F0 var_8           = dword ptr -8
.text:000002F0 var_4           = dword ptr -4
.text:000002F0 arg_0           = dword ptr  8
.text:000002F0 arg_4           = dword ptr  0Ch
.text:000002F0 arg_8           = dword ptr  10h
.text:000002F0
.text:000002F0                 push    ebp
.text:000002F1                 mov     ebp, esp
.text:000002F3                 sub     esp, 8
.text:000002F6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000002FD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000304                 mov     [ebp+var_4], 0
.text:0000030B                 jmp     short loc_316
.text:0000030D ; ---------------------------------------------------------------------------
.text:0000030D
.text:0000030D loc_30D:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint):loc_33Ej
.text:0000030D                 mov     eax, [ebp+var_4]
.text:00000310                 add     eax, 1
.text:00000313                 mov     [ebp+var_4], eax
.text:00000316
.text:00000316 loc_316:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+1Bj
.text:00000316                 mov     ecx, [ebp+var_4]
.text:00000319                 cmp     ecx, [ebp+arg_8]
.text:0000031C                 jnb     short loc_340
.text:0000031E                 mov     edx, [ebp+arg_4]
.text:00000321                 add     edx, [ebp+var_4]
.text:00000324                 mov     al, [edx]
.text:00000326                 mov     byte ptr [ebp+var_8+3], al
.text:00000329                 mov     ecx, [ebp+arg_0]
.text:0000032C                 add     ecx, [ebp+var_4]
.text:0000032F                 mov     dl, byte ptr [ebp+var_8+3]
.text:00000332                 mov     [ecx], dl
.text:00000334                 movsx   eax, byte ptr [ebp+var_8+3]
.text:00000338                 test    eax, eax
.text:0000033A                 jnz     short loc_33E
.text:0000033C                 jmp     short loc_340
.text:0000033E ; ---------------------------------------------------------------------------
.text:0000033E
.text:0000033E loc_33E:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+4Aj
.text:0000033E                 jmp     short loc_30D
.text:00000340 ; ---------------------------------------------------------------------------
.text:00000340
.text:00000340 loc_340:                                ; CODE XREF: NArchive::NTar::MyStrNCpy(char *,char const *,uint)+2Cj
.text:00000340                                         ; NArchive::NTar::MyStrNCpy(char *,char const *,uint)+4Cj
.text:00000340                 mov     esp, ebp
.text:00000342                 pop     ebp
.text:00000343                 retn    0Ch
.text:00000343 ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z endp
.text:00000343
.text:00000343 ; ---------------------------------------------------------------------------
.text:00000346                 align 10h
.text:00000350
.text:00000350 ; =============== S U B R O U T I N E =======================================
.text:00000350
.text:00000350 ; Attributes: bp-based frame
.text:00000350
.text:00000350 ; bool __stdcall NArchive::NTar::ParseInt64(char const *, __int64 &)
.text:00000350 ?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z proc near
.text:00000350                                         ; CODE XREF: IsArc_Tar(x,x)+96p
.text:00000350                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+286p
.text:00000350
.text:00000350 var_30          = dword ptr -30h
.text:00000350 var_2C          = dword ptr -2Ch
.text:00000350 var_28          = dword ptr -28h
.text:00000350 var_24          = dword ptr -24h
.text:00000350 var_20          = dword ptr -20h
.text:00000350 var_1C          = dword ptr -1Ch
.text:00000350 var_15          = byte ptr -15h
.text:00000350 var_10          = dword ptr -10h
.text:00000350 var_C           = dword ptr -0Ch
.text:00000350 var_4           = dword ptr -4
.text:00000350 arg_0           = dword ptr  8
.text:00000350 arg_4           = dword ptr  0Ch
.text:00000350
.text:00000350                 push    ebp
.text:00000351                 mov     ebp, esp
.text:00000353                 sub     esp, 30h
.text:00000356                 push    edi
.text:00000357                 lea     edi, [ebp+var_30]
.text:0000035A                 mov     ecx, 0Ch
.text:0000035F                 mov     eax, 0CCCCCCCCh
.text:00000364                 rep stosd
.text:00000366                 mov     eax, [ebp+arg_0]
.text:00000369                 mov     ecx, [eax]
.text:0000036B                 bswap   ecx
.text:0000036D                 mov     [ebp+var_4], ecx
.text:00000370                 mov     edx, [ebp+arg_0]
.text:00000373                 mov     eax, [edx+4]
.text:00000376                 mov     ecx, [edx+8]
.text:00000379                 bswap   eax
.text:0000037B                 bswap   ecx
.text:0000037D                 mov     edx, [ebp+arg_4]
.text:00000380                 mov     [edx], ecx
.text:00000382                 mov     [edx+4], eax
.text:00000385                 cmp     [ebp+var_4], 80000000h
.text:0000038C                 jnz     short loc_3C6
.text:0000038E                 mov     ecx, [ebp+arg_4]
.text:00000391                 mov     eax, [ecx]
.text:00000393                 mov     edx, [ecx+4]
.text:00000396                 mov     cl, 3Fh ; '?'
.text:00000398                 call    __allshr
.text:0000039D                 and     eax, 1
.text:000003A0                 and     edx, 0
.text:000003A3                 mov     [ebp+var_20], eax
.text:000003A6                 mov     [ebp+var_1C], edx
.text:000003A9                 mov     edx, [ebp+var_20]
.text:000003AC                 or      edx, [ebp+var_1C]
.text:000003AF                 jnz     short loc_3BA
.text:000003B1                 mov     [ebp+var_24], 1
.text:000003B8                 jmp     short loc_3C1
.text:000003BA ; ---------------------------------------------------------------------------
.text:000003BA
.text:000003BA loc_3BA:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+5Fj
.text:000003BA                 mov     [ebp+var_24], 0
.text:000003C1
.text:000003C1 loc_3C1:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+68j
.text:000003C1                 mov     al, byte ptr [ebp+var_24]
.text:000003C4                 jmp     short loc_427
.text:000003C6 ; ---------------------------------------------------------------------------
.text:000003C6
.text:000003C6 loc_3C6:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+3Cj
.text:000003C6                 cmp     [ebp+var_4], 0FFFFFFFFh
.text:000003CA                 jnz     short loc_404
.text:000003CC                 mov     ecx, [ebp+arg_4]
.text:000003CF                 mov     eax, [ecx]
.text:000003D1                 mov     edx, [ecx+4]
.text:000003D4                 mov     cl, 3Fh ; '?'
.text:000003D6                 call    __allshr
.text:000003DB                 and     eax, 1
.text:000003DE                 and     edx, 0
.text:000003E1                 mov     [ebp+var_2C], eax
.text:000003E4                 mov     [ebp+var_28], edx
.text:000003E7                 mov     edx, [ebp+var_2C]
.text:000003EA                 or      edx, [ebp+var_28]
.text:000003ED                 jz      short loc_3F8
.text:000003EF                 mov     [ebp+var_30], 1
.text:000003F6                 jmp     short loc_3FF
.text:000003F8 ; ---------------------------------------------------------------------------
.text:000003F8
.text:000003F8 loc_3F8:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+9Dj
.text:000003F8                 mov     [ebp+var_30], 0
.text:000003FF
.text:000003FF loc_3FF:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+A6j
.text:000003FF                 mov     al, byte ptr [ebp+var_30]
.text:00000402                 jmp     short loc_427
.text:00000404 ; ---------------------------------------------------------------------------
.text:00000404
.text:00000404 loc_404:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+7Aj
.text:00000404                 lea     eax, [ebp+var_10]
.text:00000407                 push    eax
.text:00000408                 push    0Ch
.text:0000040A                 mov     ecx, [ebp+arg_0]
.text:0000040D                 push    ecx
.text:0000040E                 call    ?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)
.text:00000413                 mov     [ebp+var_15], al
.text:00000416                 mov     edx, [ebp+arg_4]
.text:00000419                 mov     eax, [ebp+var_10]
.text:0000041C                 mov     [edx], eax
.text:0000041E                 mov     ecx, [ebp+var_C]
.text:00000421                 mov     [edx+4], ecx
.text:00000424                 mov     al, [ebp+var_15]
.text:00000427
.text:00000427 loc_427:                                ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+74j
.text:00000427                                         ; NArchive::NTar::ParseInt64(char const *,__int64 &)+B2j
.text:00000427                 push    edx
.text:00000428                 mov     ecx, ebp
.text:0000042A                 push    eax
.text:0000042B                 lea     edx, $LN11_1
.text:00000431                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000436                 pop     eax
.text:00000437                 pop     edx
.text:00000438                 pop     edi
.text:00000439                 add     esp, 30h
.text:0000043C                 cmp     ebp, esp
.text:0000043E                 call    __RTC_CheckEsp
.text:00000443                 mov     esp, ebp
.text:00000445                 pop     ebp
.text:00000446                 retn    8
.text:00000446 ?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z endp
.text:00000446
.text:00000446 ; ---------------------------------------------------------------------------
.text:00000449                 align 4
.text:0000044C $LN11_1         dd 1                    ; DATA XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+DBo
.text:00000450                 dd offset $LN10_1
.text:00000454 $LN10_1         dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00000450o
.text:0000045C                 dd offset $LN9_2
.text:00000460 $LN9_2          dd 0CC007675h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000045Co
.text:00000470
.text:00000470 ; =============== S U B R O U T I N E =======================================
.text:00000470
.text:00000470 ; Attributes: bp-based frame
.text:00000470
.text:00000470 ; bool __stdcall NArchive::NTar::ParseSize(char const *, unsigned __int64 &)
.text:00000470 ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z proc near
.text:00000470                                         ; CODE XREF: IsArc_Tar(x,x)+75p
.text:00000470                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+244p ...
.text:00000470
.text:00000470 var_C           = dword ptr -0Ch
.text:00000470 var_8           = dword ptr -8
.text:00000470 var_4           = dword ptr -4
.text:00000470 arg_0           = dword ptr  8
.text:00000470 arg_4           = dword ptr  0Ch
.text:00000470
.text:00000470                 push    ebp
.text:00000471                 mov     ebp, esp
.text:00000473                 sub     esp, 0Ch
.text:00000476                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000047D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000484                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000048B                 mov     eax, [ebp+arg_0]
.text:0000048E                 mov     ecx, [eax]
.text:00000490                 bswap   ecx
.text:00000492                 cmp     ecx, 80000000h
.text:00000498                 jnz     short loc_4E7
.text:0000049A                 mov     edx, [ebp+arg_0]
.text:0000049D                 mov     eax, [edx+4]
.text:000004A0                 mov     ecx, [edx+8]
.text:000004A3                 bswap   eax
.text:000004A5                 bswap   ecx
.text:000004A7                 mov     edx, [ebp+arg_4]
.text:000004AA                 mov     [edx], ecx
.text:000004AC                 mov     [edx+4], eax
.text:000004AF                 mov     ecx, [ebp+arg_4]
.text:000004B2                 mov     eax, [ecx]
.text:000004B4                 mov     edx, [ecx+4]
.text:000004B7                 mov     cl, 3Fh ; '?'
.text:000004B9                 call    __aullshr
.text:000004BE                 and     eax, 1
.text:000004C1                 and     edx, 0
.text:000004C4                 mov     [ebp+var_8], eax
.text:000004C7                 mov     [ebp+var_4], edx
.text:000004CA                 mov     edx, [ebp+var_8]
.text:000004CD                 or      edx, [ebp+var_4]
.text:000004D0                 jnz     short loc_4DB
.text:000004D2                 mov     [ebp+var_C], 1
.text:000004D9                 jmp     short loc_4E2
.text:000004DB ; ---------------------------------------------------------------------------
.text:000004DB
.text:000004DB loc_4DB:                                ; CODE XREF: NArchive::NTar::ParseSize(char const *,unsigned __int64 &)+60j
.text:000004DB                 mov     [ebp+var_C], 0
.text:000004E2
.text:000004E2 loc_4E2:                                ; CODE XREF: NArchive::NTar::ParseSize(char const *,unsigned __int64 &)+69j
.text:000004E2                 mov     al, byte ptr [ebp+var_C]
.text:000004E5                 jmp     short loc_4F6
.text:000004E7 ; ---------------------------------------------------------------------------
.text:000004E7
.text:000004E7 loc_4E7:                                ; CODE XREF: NArchive::NTar::ParseSize(char const *,unsigned __int64 &)+28j
.text:000004E7                 mov     eax, [ebp+arg_4]
.text:000004EA                 push    eax
.text:000004EB                 push    0Ch
.text:000004ED                 mov     ecx, [ebp+arg_0]
.text:000004F0                 push    ecx
.text:000004F1                 call    ?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)
.text:000004F6
.text:000004F6 loc_4F6:                                ; CODE XREF: NArchive::NTar::ParseSize(char const *,unsigned __int64 &)+75j
.text:000004F6                 add     esp, 0Ch
.text:000004F9                 cmp     ebp, esp
.text:000004FB                 call    __RTC_CheckEsp
.text:00000500                 mov     esp, ebp
.text:00000502                 pop     ebp
.text:00000503                 retn    8
.text:00000503 ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z endp
.text:00000503
.text:00000503 ; ---------------------------------------------------------------------------
.text:00000506                 align 10h
.text:00000510
.text:00000510 ; =============== S U B R O U T I N E =======================================
.text:00000510
.text:00000510 ; Attributes: bp-based frame
.text:00000510
.text:00000510 ; __int32 __stdcall NArchive::NTar::ReadItem(NArchive::NTar *this, struct ISequentialInStream *, NArchive::NTar::CItem *, struct NArchive::NTar::CItemEx *, enum NArchive::NTar::EErrorType *)
.text:00000510                 public ?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.text:00000510 ?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z proc near
.text:00000510
.text:00000510 var_90          = dword ptr -90h
.text:00000510 var_8C          = dword ptr -8Ch
.text:00000510 var_88          = dword ptr -88h
.text:00000510 var_84          = dword ptr -84h
.text:00000510 var_80          = dword ptr -80h
.text:00000510 var_7C          = dword ptr -7Ch
.text:00000510 var_78          = dword ptr -78h
.text:00000510 var_74          = dword ptr -74h
.text:00000510 var_70          = dword ptr -70h
.text:00000510 var_6C          = dword ptr -6Ch
.text:00000510 var_68          = dword ptr -68h
.text:00000510 var_64          = dword ptr -64h
.text:00000510 var_60          = dword ptr -60h
.text:00000510 var_5C          = dword ptr -5Ch
.text:00000510 var_58          = dword ptr -58h
.text:00000510 var_50          = dword ptr -50h
.text:00000510 var_48          = dword ptr -48h
.text:00000510 var_44          = dword ptr -44h
.text:00000510 var_40          = dword ptr -40h
.text:00000510 var_3C          = dword ptr -3Ch
.text:00000510 var_34          = byte ptr -34h
.text:00000510 var_20          = byte ptr -20h
.text:00000510 var_E           = byte ptr -0Eh
.text:00000510 var_D           = byte ptr -0Dh
.text:00000510 var_C           = dword ptr -0Ch
.text:00000510 var_4           = dword ptr -4
.text:00000510 this            = dword ptr  8
.text:00000510 arg_4           = dword ptr  0Ch
.text:00000510 arg_8           = dword ptr  10h
.text:00000510 arg_C           = dword ptr  14h
.text:00000510
.text:00000510                 push    ebp
.text:00000511                 mov     ebp, esp
.text:00000513                 push    0FFFFFFFFh
.text:00000515                 push    offset __ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.text:0000051A                 mov     eax, large fs:0
.text:00000520                 push    eax
.text:00000521                 sub     esp, 84h
.text:00000527                 push    edi
.text:00000528                 lea     edi, [ebp+var_90]
.text:0000052E                 mov     ecx, 21h ; '!'
.text:00000533                 mov     eax, 0CCCCCCCCh
.text:00000538                 rep stosd
.text:0000053A                 mov     eax, dword ptr ds:___security_cookie
.text:0000053F                 xor     eax, ebp
.text:00000541                 push    eax
.text:00000542                 lea     eax, [ebp+var_C]
.text:00000545                 mov     large fs:0, eax
.text:0000054B                 mov     eax, [ebp+arg_8]
.text:0000054E                 mov     dword ptr [eax+80h], 0
.text:00000558                 mov     [ebp+var_D], 0
.text:0000055C                 mov     [ebp+var_E], 0
.text:00000560                 lea     ecx, [ebp+var_20]
.text:00000563                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000568                 mov     [ebp+var_4], 0
.text:0000056F                 lea     ecx, [ebp+var_34]
.text:00000572                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000577                 mov     byte ptr [ebp+var_4], 1
.text:0000057B
.text:0000057B loc_57B:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_859j
.text:0000057B                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+455j
.text:0000057B                 mov     ecx, [ebp+arg_C]
.text:0000057E                 push    ecx             ; int
.text:0000057F                 mov     edx, [ebp+arg_8]
.text:00000582                 push    edx             ; AString *
.text:00000583                 mov     eax, [ebp+arg_4]
.text:00000586                 push    eax             ; int
.text:00000587                 mov     ecx, [ebp+this]
.text:0000058A                 push    ecx             ; struct ISequentialInStream *
.text:0000058B                 call    ?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)
.text:00000590                 mov     [ebp+var_3C], eax
.text:00000593                 cmp     [ebp+var_3C], 0
.text:00000597                 jz      short loc_5C2
.text:00000599                 mov     edx, [ebp+var_3C]
.text:0000059C                 mov     [ebp+var_60], edx
.text:0000059F                 mov     byte ptr [ebp+var_4], 0
.text:000005A3                 lea     ecx, [ebp+var_34] ; this
.text:000005A6                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000005AB                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000005B2                 lea     ecx, [ebp+var_20] ; this
.text:000005B5                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000005BA                 mov     eax, [ebp+var_60]
.text:000005BD                 jmp     loc_985
.text:000005C2 ; ---------------------------------------------------------------------------
.text:000005C2
.text:000005C2 loc_5C2:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+87j
.text:000005C2                 mov     eax, [ebp+arg_4]
.text:000005C5                 movzx   ecx, byte ptr [eax]
.text:000005C8                 test    ecx, ecx
.text:000005CA                 jnz     short loc_617
.text:000005CC                 mov     edx, [ebp+arg_C]
.text:000005CF                 cmp     dword ptr [edx], 0
.text:000005D2                 jnz     short loc_5ED
.text:000005D4                 movzx   eax, [ebp+var_D]
.text:000005D8                 test    eax, eax
.text:000005DA                 jnz     short loc_5E4
.text:000005DC                 movzx   ecx, [ebp+var_E]
.text:000005E0                 test    ecx, ecx
.text:000005E2                 jz      short loc_5ED
.text:000005E4
.text:000005E4 loc_5E4:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+CAj
.text:000005E4                 mov     edx, [ebp+arg_C]
.text:000005E7                 mov     dword ptr [edx], 1
.text:000005ED
.text:000005ED loc_5ED:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+C2j
.text:000005ED                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+D2j
.text:000005ED                 mov     [ebp+var_64], 0
.text:000005F4                 mov     byte ptr [ebp+var_4], 0
.text:000005F8                 lea     ecx, [ebp+var_34] ; this
.text:000005FB                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000600                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000607                 lea     ecx, [ebp+var_20] ; this
.text:0000060A                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000060F                 mov     eax, [ebp+var_64]
.text:00000612                 jmp     loc_985
.text:00000617 ; ---------------------------------------------------------------------------
.text:00000617
.text:00000617 loc_617:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BAj
.text:00000617                 mov     eax, [ebp+arg_C]
.text:0000061A                 cmp     dword ptr [eax], 0
.text:0000061D                 jz      short loc_649
.text:0000061F                 mov     [ebp+var_68], 0
.text:00000626                 mov     byte ptr [ebp+var_4], 0
.text:0000062A                 lea     ecx, [ebp+var_34] ; this
.text:0000062D                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000632                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000639                 lea     ecx, [ebp+var_20] ; this
.text:0000063C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000641                 mov     eax, [ebp+var_68]
.text:00000644                 jmp     loc_985
.text:00000649 ; ---------------------------------------------------------------------------
.text:00000649
.text:00000649 loc_649:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+10Dj
.text:00000649                 mov     ecx, [ebp+arg_8]
.text:0000064C                 movsx   edx, byte ptr [ecx+68h]
.text:00000650                 cmp     edx, 4Ch ; 'L'
.text:00000653                 jz      short loc_665
.text:00000655                 mov     eax, [ebp+arg_8]
.text:00000658                 movsx   ecx, byte ptr [eax+68h]
.text:0000065C                 cmp     ecx, 4Bh ; 'K'
.text:0000065F                 jnz     loc_85E
.text:00000665
.text:00000665 loc_665:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+143j
.text:00000665                 mov     edx, [ebp+arg_8]
.text:00000668                 movsx   eax, byte ptr [edx+68h]
.text:0000066C                 cmp     eax, 4Ch ; 'L'
.text:0000066F                 jnz     short loc_6AF
.text:00000671                 movzx   ecx, [ebp+var_D]
.text:00000675                 test    ecx, ecx
.text:00000677                 jz      short loc_6A3
.text:00000679                 mov     [ebp+var_6C], 0
.text:00000680                 mov     byte ptr [ebp+var_4], 0
.text:00000684                 lea     ecx, [ebp+var_34] ; this
.text:00000687                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000068C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000693                 lea     ecx, [ebp+var_20] ; this
.text:00000696                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000069B                 mov     eax, [ebp+var_6C]
.text:0000069E                 jmp     loc_985
.text:000006A3 ; ---------------------------------------------------------------------------
.text:000006A3
.text:000006A3 loc_6A3:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+167j
.text:000006A3                 mov     [ebp+var_D], 1
.text:000006A7                 lea     edx, [ebp+var_20]
.text:000006AA                 mov     [ebp+var_40], edx
.text:000006AD                 jmp     short loc_6EB
.text:000006AF ; ---------------------------------------------------------------------------
.text:000006AF
.text:000006AF loc_6AF:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+15Fj
.text:000006AF                 movzx   eax, [ebp+var_E]
.text:000006B3                 test    eax, eax
.text:000006B5                 jz      short loc_6E1
.text:000006B7                 mov     [ebp+var_70], 0
.text:000006BE                 mov     byte ptr [ebp+var_4], 0
.text:000006C2                 lea     ecx, [ebp+var_34] ; this
.text:000006C5                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000006CA                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006D1                 lea     ecx, [ebp+var_20] ; this
.text:000006D4                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000006D9                 mov     eax, [ebp+var_70]
.text:000006DC                 jmp     loc_985
.text:000006E1 ; ---------------------------------------------------------------------------
.text:000006E1
.text:000006E1 loc_6E1:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1A5j
.text:000006E1                 mov     [ebp+var_E], 1
.text:000006E5                 lea     ecx, [ebp+var_34]
.text:000006E8                 mov     [ebp+var_40], ecx
.text:000006EB
.text:000006EB loc_6EB:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+19Dj
.text:000006EB                 mov     edx, dword ptr ds:?kLongLink@NFileHeader@NTar@NArchive@@3PBDB ; char const * const NArchive::NTar::NFileHeader::kLongLink
.text:000006F1                 push    edx             ; Str2
.text:000006F2                 mov     eax, [ebp+arg_8]
.text:000006F5                 push    eax             ; int
.text:000006F6                 call    ??9@YG_NABVAString@@PBD@Z ; operator!=(AString const &,char const *)
.text:000006FB                 movzx   ecx, al
.text:000006FE                 test    ecx, ecx
.text:00000700                 jz      short loc_743
.text:00000702                 mov     edx, dword ptr ds:?kLongLink2@NFileHeader@NTar@NArchive@@3PBDB ; char const * const NArchive::NTar::NFileHeader::kLongLink2
.text:00000708                 push    edx             ; Str2
.text:00000709                 mov     eax, [ebp+arg_8]
.text:0000070C                 push    eax             ; int
.text:0000070D                 call    ??9@YG_NABVAString@@PBD@Z ; operator!=(AString const &,char const *)
.text:00000712                 movzx   ecx, al
.text:00000715                 test    ecx, ecx
.text:00000717                 jz      short loc_743
.text:00000719                 mov     [ebp+var_74], 0
.text:00000720                 mov     byte ptr [ebp+var_4], 0
.text:00000724                 lea     ecx, [ebp+var_34] ; this
.text:00000727                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000072C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000733                 lea     ecx, [ebp+var_20] ; this
.text:00000736                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000073B                 mov     eax, [ebp+var_74]
.text:0000073E                 jmp     loc_985
.text:00000743 ; ---------------------------------------------------------------------------
.text:00000743
.text:00000743 loc_743:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1F0j
.text:00000743                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+207j
.text:00000743                 mov     edx, [ebp+arg_8]
.text:00000746                 mov     [ebp+var_8C], edx
.text:0000074C                 mov     eax, [ebp+var_8C]
.text:00000752                 cmp     dword ptr [eax+14h], 0
.text:00000756                 ja      short loc_767
.text:00000758                 mov     ecx, [ebp+var_8C]
.text:0000075E                 cmp     dword ptr [ecx+10h], 4000h
.text:00000765                 jbe     short loc_791
.text:00000767
.text:00000767 loc_767:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+246j
.text:00000767                 mov     [ebp+var_78], 0
.text:0000076E                 mov     byte ptr [ebp+var_4], 0
.text:00000772                 lea     ecx, [ebp+var_34] ; this
.text:00000775                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000077A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000781                 lea     ecx, [ebp+var_20] ; this
.text:00000784                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000789                 mov     eax, [ebp+var_78]
.text:0000078C                 jmp     loc_985
.text:00000791 ; ---------------------------------------------------------------------------
.text:00000791
.text:00000791 loc_791:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+255j
.text:00000791                 mov     ecx, [ebp+arg_8] ; this
.text:00000794                 call    ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned(void)
.text:00000799                 mov     [ebp+var_44], eax
.text:0000079C                 mov     edx, [ebp+var_44]
.text:0000079F                 push    edx             ; unsigned int
.text:000007A0                 mov     ecx, [ebp+var_40] ; this
.text:000007A3                 call    ?GetBuf@AString@@QAEPADI@Z ; AString::GetBuf(uint)
.text:000007A8                 mov     [ebp+var_48], eax
.text:000007AB                 mov     eax, [ebp+var_44]
.text:000007AE                 mov     [ebp+var_50], eax
.text:000007B1                 lea     ecx, [ebp+var_50]
.text:000007B4                 push    ecx             ; unsigned int *
.text:000007B5                 mov     edx, [ebp+var_48]
.text:000007B8                 push    edx             ; void *
.text:000007B9                 mov     eax, [ebp+this]
.text:000007BC                 push    eax             ; struct ISequentialInStream *
.text:000007BD                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:000007C2                 mov     [ebp+var_58], eax
.text:000007C5                 mov     ecx, [ebp+arg_8]
.text:000007C8                 mov     edx, [ecx+80h]
.text:000007CE                 add     edx, [ebp+var_50]
.text:000007D1                 mov     eax, [ebp+arg_8]
.text:000007D4                 mov     [eax+80h], edx
.text:000007DA                 mov     ecx, [ebp+arg_8]
.text:000007DD                 mov     edx, [ecx+10h]
.text:000007E0                 push    edx             ; unsigned int
.text:000007E1                 mov     ecx, [ebp+var_40] ; this
.text:000007E4                 call    ?ReleaseBuf_CalcLen@AString@@QAEXI@Z ; AString::ReleaseBuf_CalcLen(uint)
.text:000007E9                 mov     eax, [ebp+var_58]
.text:000007EC                 mov     [ebp+var_5C], eax
.text:000007EF                 cmp     [ebp+var_5C], 0
.text:000007F3                 jz      short loc_81E
.text:000007F5                 mov     ecx, [ebp+var_5C]
.text:000007F8                 mov     [ebp+var_7C], ecx
.text:000007FB                 mov     byte ptr [ebp+var_4], 0
.text:000007FF                 lea     ecx, [ebp+var_34] ; this
.text:00000802                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000807                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000080E                 lea     ecx, [ebp+var_20] ; this
.text:00000811                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000816                 mov     eax, [ebp+var_7C]
.text:00000819                 jmp     loc_985
.text:0000081E ; ---------------------------------------------------------------------------
.text:0000081E
.text:0000081E loc_81E:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2E3j
.text:0000081E                 mov     edx, [ebp+var_50]
.text:00000821                 cmp     edx, [ebp+var_44]
.text:00000824                 jz      short loc_859
.text:00000826                 mov     eax, [ebp+arg_C]
.text:00000829                 mov     dword ptr [eax], 2
.text:0000082F                 mov     [ebp+var_80], 0
.text:00000836                 mov     byte ptr [ebp+var_4], 0
.text:0000083A                 lea     ecx, [ebp+var_34] ; this
.text:0000083D                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000842                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000849                 lea     ecx, [ebp+var_20] ; this
.text:0000084C                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000851                 mov     eax, [ebp+var_80]
.text:00000854                 jmp     loc_985
.text:00000859 ; ---------------------------------------------------------------------------
.text:00000859
.text:00000859 loc_859:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+314j
.text:00000859                 jmp     loc_57B
.text:0000085E ; ---------------------------------------------------------------------------
.text:0000085E
.text:0000085E loc_85E:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+14Fj
.text:0000085E                 mov     ecx, [ebp+arg_8]
.text:00000861                 movsx   edx, byte ptr [ecx+68h]
.text:00000865                 mov     [ebp+var_90], edx
.text:0000086B                 mov     eax, [ebp+var_90]
.text:00000871                 sub     eax, 44h ; 'D'
.text:00000874                 mov     [ebp+var_90], eax
.text:0000087A                 cmp     [ebp+var_90], 34h ; '4' ; switch 53 cases
.text:00000881                 ja      short $LN5      ; jumptable 00000890 default case
.text:00000883                 mov     ecx, [ebp+var_90]
.text:00000889                 movzx   edx, ds:$LN33[ecx]
.text:00000890                 jmp     ds:$LN40[edx*4] ; switch jump
.text:00000897 ; ---------------------------------------------------------------------------
.text:00000897
.text:00000897 $LN8_1:                                 ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+380j
.text:00000897                                         ; DATA XREF: .text:$LN40o
.text:00000897                 jmp     short loc_8F0   ; jumptable 00000890 cases 20,35,52
.text:00000899 ; ---------------------------------------------------------------------------
.text:00000899
.text:00000899 $LN7_0:                                 ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+380j
.text:00000899                                         ; DATA XREF: .text:$LN40o
.text:00000899                 jmp     short loc_8F0   ; jumptable 00000890 case 0
.text:0000089B ; ---------------------------------------------------------------------------
.text:0000089B
.text:0000089B $LN6:                                   ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+380j
.text:0000089B                                         ; DATA XREF: .text:$LN40o
.text:0000089B                 jmp     short loc_8F0   ; jumptable 00000890 case 15
.text:0000089D ; ---------------------------------------------------------------------------
.text:0000089D
.text:0000089D $LN5:                                   ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+371j
.text:0000089D                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+380j
.text:0000089D                                         ; DATA XREF: ...
.text:0000089D                 mov     eax, [ebp+arg_8] ; jumptable 00000890 default case
.text:000008A0                 movsx   ecx, byte ptr [eax+68h]
.text:000008A4                 cmp     ecx, 37h ; '7'
.text:000008A7                 jg      short loc_8C0
.text:000008A9                 mov     edx, [ebp+arg_8]
.text:000008AC                 movsx   eax, byte ptr [edx+68h]
.text:000008B0                 cmp     eax, 30h ; '0'
.text:000008B3                 jge     short loc_8F0
.text:000008B5                 mov     ecx, [ebp+arg_8]
.text:000008B8                 movsx   edx, byte ptr [ecx+68h]
.text:000008BC                 test    edx, edx
.text:000008BE                 jz      short loc_8F0
.text:000008C0
.text:000008C0 loc_8C0:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+397j
.text:000008C0                 mov     [ebp+var_84], 0
.text:000008CA                 mov     byte ptr [ebp+var_4], 0
.text:000008CE                 lea     ecx, [ebp+var_34] ; this
.text:000008D1                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000008D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000008DD                 lea     ecx, [ebp+var_20] ; this
.text:000008E0                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000008E5                 mov     eax, [ebp+var_84]
.text:000008EB                 jmp     loc_985
.text:000008F0 ; ---------------------------------------------------------------------------
.text:000008F0
.text:000008F0 loc_8F0:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):$LN8_1j
.text:000008F0                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):$LN7_0j ...
.text:000008F0                 movzx   eax, [ebp+var_D]
.text:000008F4                 test    eax, eax
.text:000008F6                 jz      short loc_90E
.text:000008F8                 lea     ecx, [ebp+var_20]
.text:000008FB                 push    ecx
.text:000008FC                 mov     ecx, [ebp+arg_8]
.text:000008FF                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000904                 mov     edx, [ebp+arg_8]
.text:00000907                 mov     byte ptr [edx+84h], 0
.text:0000090E
.text:0000090E loc_90E:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+3E6j
.text:0000090E                 movzx   eax, [ebp+var_E]
.text:00000912                 test    eax, eax
.text:00000914                 jz      short loc_92F
.text:00000916                 lea     ecx, [ebp+var_34]
.text:00000919                 push    ecx
.text:0000091A                 mov     ecx, [ebp+arg_8]
.text:0000091D                 add     ecx, 3Ch ; '<'
.text:00000920                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000925                 mov     edx, [ebp+arg_8]
.text:00000928                 mov     byte ptr [edx+85h], 0
.text:0000092F
.text:0000092F loc_92F:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+404j
.text:0000092F                 mov     eax, [ebp+arg_C]
.text:00000932                 mov     dword ptr [eax], 0
.text:00000938                 mov     [ebp+var_88], 0
.text:00000942                 mov     byte ptr [ebp+var_4], 0
.text:00000946                 lea     ecx, [ebp+var_34] ; this
.text:00000949                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000094E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000955                 lea     ecx, [ebp+var_20] ; this
.text:00000958                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000095D                 mov     eax, [ebp+var_88]
.text:00000963                 jmp     short loc_985
.text:00000965 ; ---------------------------------------------------------------------------
.text:00000965                 jmp     loc_57B
.text:0000096A ; ---------------------------------------------------------------------------
.text:0000096A                 mov     byte ptr [ebp+var_4], 0
.text:0000096E                 lea     ecx, [ebp+var_34] ; this
.text:00000971                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000976                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000097D                 lea     ecx, [ebp+var_20] ; this
.text:00000980                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000985
.text:00000985 loc_985:                                ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+ADj
.text:00000985                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+102j ...
.text:00000985                 push    edx
.text:00000986                 mov     ecx, ebp
.text:00000988                 push    eax
.text:00000989                 lea     edx, $LN39
.text:0000098F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000994                 pop     eax
.text:00000995                 pop     edx
.text:00000996                 mov     ecx, [ebp+var_C]
.text:00000999                 mov     large fs:0, ecx
.text:000009A0                 pop     ecx
.text:000009A1                 pop     edi
.text:000009A2                 add     esp, 90h
.text:000009A8                 cmp     ebp, esp
.text:000009AA                 call    __RTC_CheckEsp
.text:000009AF                 mov     esp, ebp
.text:000009B1                 pop     ebp
.text:000009B2                 retn    10h
.text:000009B2 ?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z endp
.text:000009B2
.text:000009B2 ; ---------------------------------------------------------------------------
.text:000009B5                 align 4
.text:000009B8 $LN39           dd 3                    ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+479o
.text:000009BC                 dd offset $LN38
.text:000009C0 $LN38           dd 0FFFFFFE0h, 0Ch      ; DATA XREF: .text:000009BCo
.text:000009C8                 dd offset $LN34         ; "nameL"
.text:000009CC                 db 0CCh
.text:000009CD                 db 3 dup(0FFh)
.text:000009D0                 dd 0Ch
.text:000009D4                 dd offset $LN35         ; "nameK"
.text:000009D8                 dd 0FFFFFFB0h, 4
.text:000009E0                 dd offset $LN36         ; "processedSize"
.text:000009E4 $LN36           db 'processedSize',0    ; DATA XREF: .text:000009E0o
.text:000009F2 $LN35           db 'nameK',0            ; DATA XREF: .text:000009D4o
.text:000009F8 $LN34           db 'nameL',0            ; DATA XREF: .text:000009C8o
.text:000009FE                 align 10h
.text:00000A00 $LN40           dd offset $LN7_0, offset $LN6, offset $LN8_1, offset $LN5
.text:00000A00                                         ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+380r
.text:00000A00                                         ; jump table for switch statement
.text:00000A10 $LN33           db      0,     3,     3,     3
.text:00000A10                                         ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+379r
.text:00000A10                 db      3,     3,     3,     3 ; indirect table for switch statement
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     1
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      2,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     2
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      3,     3,     3,     3
.text:00000A10                 db      2
.text:00000A45                 align 10h
.text:00000A50
.text:00000A50 ; =============== S U B R O U T I N E =======================================
.text:00000A50
.text:00000A50 ; Attributes: bp-based frame
.text:00000A50
.text:00000A50 ; int __stdcall NArchive::NTar::GetNextItemReal(struct ISequentialInStream *, int, AString *, int)
.text:00000A50 ?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z proc near
.text:00000A50                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7Bp
.text:00000A50
.text:00000A50 var_310         = dword ptr -310h
.text:00000A50 var_30C         = dword ptr -30Ch
.text:00000A50 var_308         = dword ptr -308h
.text:00000A50 var_304         = dword ptr -304h
.text:00000A50 var_300         = dword ptr -300h
.text:00000A50 var_2FC         = dword ptr -2FCh
.text:00000A50 var_2F8         = dword ptr -2F8h
.text:00000A50 var_2F4         = dword ptr -2F4h
.text:00000A50 var_2F0         = dword ptr -2F0h
.text:00000A50 var_2EC         = dword ptr -2ECh
.text:00000A50 var_2E8         = dword ptr -2E8h
.text:00000A50 var_2E4         = dword ptr -2E4h
.text:00000A50 var_2E0         = dword ptr -2E0h
.text:00000A50 var_2DC         = dword ptr -2DCh
.text:00000A50 var_2D8         = dword ptr -2D8h
.text:00000A50 var_2D4         = dword ptr -2D4h
.text:00000A50 var_2D0         = dword ptr -2D0h
.text:00000A50 var_2CC         = dword ptr -2CCh
.text:00000A50 var_2C8         = byte ptr -2C8h
.text:00000A50 var_2BC         = byte ptr -2BCh
.text:00000A50 var_2AC         = dword ptr -2ACh
.text:00000A50 var_2A8         = dword ptr -2A8h
.text:00000A50 var_2A4         = dword ptr -2A4h
.text:00000A50 var_2A0         = dword ptr -2A0h
.text:00000A50 var_298         = dword ptr -298h
.text:00000A50 var_294         = dword ptr -294h
.text:00000A50 var_28C         = dword ptr -28Ch
.text:00000A50 var_280         = dword ptr -280h
.text:00000A50 var_27C         = dword ptr -27Ch
.text:00000A50 var_278         = dword ptr -278h
.text:00000A50 var_274         = dword ptr -274h
.text:00000A50 var_26C         = dword ptr -26Ch
.text:00000A50 var_268         = dword ptr -268h
.text:00000A50 var_264         = dword ptr -264h
.text:00000A50 var_25E         = byte ptr -25Eh
.text:00000A50 var_25D         = byte ptr -25Dh
.text:00000A50 var_25C         = dword ptr -25Ch
.text:00000A50 var_258         = dword ptr -258h
.text:00000A50 var_254         = dword ptr -254h
.text:00000A50 var_24C         = byte ptr -24Ch
.text:00000A50 var_238         = dword ptr -238h
.text:00000A50 var_230         = dword ptr -230h
.text:00000A50 var_228         = dword ptr -228h
.text:00000A50 var_21D         = byte ptr -21Dh
.text:00000A50 Dst             = dword ptr -21Ch
.text:00000A50 var_214         = byte ptr -214h
.text:00000A50 var_92          = byte ptr -92h
.text:00000A50 var_32          = byte ptr -32h
.text:00000A50 var_31          = byte ptr -31h
.text:00000A50 var_1C          = byte ptr -1Ch
.text:00000A50 var_10          = dword ptr -10h
.text:00000A50 var_C           = dword ptr -0Ch
.text:00000A50 var_4           = dword ptr -4
.text:00000A50 arg_0           = dword ptr  8
.text:00000A50 arg_4           = dword ptr  0Ch
.text:00000A50 arg_8           = dword ptr  10h
.text:00000A50 arg_C           = dword ptr  14h
.text:00000A50
.text:00000A50                 push    ebp
.text:00000A51                 mov     ebp, esp
.text:00000A53                 push    0FFFFFFFFh
.text:00000A55                 push    offset __ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.text:00000A5A                 mov     eax, large fs:0
.text:00000A60                 push    eax
.text:00000A61                 sub     esp, 304h
.text:00000A67                 push    edi
.text:00000A68                 lea     edi, [ebp+var_310]
.text:00000A6E                 mov     ecx, 0C1h ; '-'
.text:00000A73                 mov     eax, 0CCCCCCCCh
.text:00000A78                 rep stosd
.text:00000A7A                 mov     eax, dword ptr ds:___security_cookie
.text:00000A7F                 xor     eax, ebp
.text:00000A81                 mov     [ebp+var_10], eax
.text:00000A84                 push    eax
.text:00000A85                 lea     eax, [ebp+var_C]
.text:00000A88                 mov     large fs:0, eax
.text:00000A8E                 lea     eax, [ebp+var_214]
.text:00000A94                 mov     [ebp+Dst], eax
.text:00000A9A                 mov     ecx, [ebp+arg_C]
.text:00000A9D                 mov     dword ptr [ecx], 0
.text:00000AA3                 mov     edx, [ebp+arg_4]
.text:00000AA6                 mov     byte ptr [edx], 0
.text:00000AA9                 mov     [ebp+var_21D], 0
.text:00000AB0
.text:00000AB0 loc_AB0:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+11Aj
.text:00000AB0                 mov     [ebp+var_228], 200h
.text:00000ABA                 lea     eax, [ebp+var_228]
.text:00000AC0                 push    eax             ; unsigned int *
.text:00000AC1                 lea     ecx, [ebp+var_214]
.text:00000AC7                 push    ecx             ; void *
.text:00000AC8                 mov     edx, [ebp+arg_0]
.text:00000ACB                 push    edx             ; struct ISequentialInStream *
.text:00000ACC                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00000AD1                 mov     [ebp+var_230], eax
.text:00000AD7                 cmp     [ebp+var_230], 0
.text:00000ADE                 jz      short loc_AEB
.text:00000AE0                 mov     eax, [ebp+var_230]
.text:00000AE6                 jmp     loc_161E
.text:00000AEB ; ---------------------------------------------------------------------------
.text:00000AEB
.text:00000AEB loc_AEB:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8Ej
.text:00000AEB                 cmp     [ebp+var_228], 0
.text:00000AF2                 jnz     short loc_B0F
.text:00000AF4                 movzx   eax, [ebp+var_21D]
.text:00000AFB                 test    eax, eax
.text:00000AFD                 jnz     short loc_B08
.text:00000AFF                 mov     ecx, [ebp+arg_C]
.text:00000B02                 mov     dword ptr [ecx], 2
.text:00000B08
.text:00000B08 loc_B08:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+ADj
.text:00000B08                 xor     eax, eax
.text:00000B0A                 jmp     loc_161E
.text:00000B0F ; ---------------------------------------------------------------------------
.text:00000B0F
.text:00000B0F loc_B0F:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A2j
.text:00000B0F                 cmp     [ebp+var_228], 200h
.text:00000B19                 jz      short loc_B36
.text:00000B1B                 movzx   edx, [ebp+var_21D]
.text:00000B22                 test    edx, edx
.text:00000B24                 jnz     short loc_B2F
.text:00000B26                 mov     eax, [ebp+arg_C]
.text:00000B29                 mov     dword ptr [eax], 2
.text:00000B2F
.text:00000B2F loc_B2F:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+D4j
.text:00000B2F                 xor     eax, eax
.text:00000B31                 jmp     loc_161E
.text:00000B36 ; ---------------------------------------------------------------------------
.text:00000B36
.text:00000B36 loc_B36:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+C9j
.text:00000B36                 lea     ecx, [ebp+var_214]
.text:00000B3C                 push    ecx
.text:00000B3D                 call    ?IsRecordLast@NTar@NArchive@@YG_NPBD@Z ; NArchive::NTar::IsRecordLast(char const *)
.text:00000B42                 movzx   edx, al
.text:00000B45                 test    edx, edx
.text:00000B47                 jnz     short loc_B4B
.text:00000B49                 jmp     short loc_B6F
.text:00000B4B ; ---------------------------------------------------------------------------
.text:00000B4B
.text:00000B4B loc_B4B:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+F7j
.text:00000B4B                 mov     eax, [ebp+arg_8]
.text:00000B4E                 mov     ecx, [eax+80h]
.text:00000B54                 add     ecx, 200h
.text:00000B5A                 mov     edx, [ebp+arg_8]
.text:00000B5D                 mov     [edx+80h], ecx
.text:00000B63                 mov     [ebp+var_21D], 1
.text:00000B6A                 jmp     loc_AB0
.text:00000B6F ; ---------------------------------------------------------------------------
.text:00000B6F
.text:00000B6F loc_B6F:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+F9j
.text:00000B6F                 movzx   eax, [ebp+var_21D]
.text:00000B76                 test    eax, eax
.text:00000B78                 jz      short loc_B81
.text:00000B7A                 xor     eax, eax
.text:00000B7C                 jmp     loc_161E
.text:00000B81 ; ---------------------------------------------------------------------------
.text:00000B81
.text:00000B81 loc_B81:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+128j
.text:00000B81                 mov     ecx, [ebp+arg_C]
.text:00000B84                 mov     dword ptr [ecx], 1
.text:00000B8A                 mov     edx, [ebp+arg_8]
.text:00000B8D                 push    edx
.text:00000B8E                 push    64h ; 'd'
.text:00000B90                 mov     eax, [ebp+Dst]
.text:00000B96                 push    eax
.text:00000B97                 call    ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString(char const *,uint,AString &)
.text:00000B9C                 mov     ecx, [ebp+Dst]
.text:00000BA2                 add     ecx, 64h ; 'd'
.text:00000BA5                 mov     [ebp+Dst], ecx
.text:00000BAB                 mov     ecx, [ebp+arg_8] ; this
.text:00000BAE                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000BB3                 cmp     eax, 64h ; 'd'
.text:00000BB6                 jz      short loc_BD1
.text:00000BB8                 mov     ecx, [ebp+arg_8] ; this
.text:00000BBB                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000BC0                 cmp     eax, 63h ; 'c'
.text:00000BC3                 jz      short loc_BD1
.text:00000BC5                 mov     [ebp+var_2CC], 0
.text:00000BCF                 jmp     short loc_BDB
.text:00000BD1 ; ---------------------------------------------------------------------------
.text:00000BD1
.text:00000BD1 loc_BD1:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+166j
.text:00000BD1                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+173j
.text:00000BD1                 mov     [ebp+var_2CC], 1
.text:00000BDB
.text:00000BDB loc_BDB:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+17Fj
.text:00000BDB                 mov     edx, [ebp+arg_8]
.text:00000BDE                 mov     al, byte ptr [ebp+var_2CC]
.text:00000BE4                 mov     [edx+84h], al
.text:00000BEA                 mov     ecx, [ebp+arg_8]
.text:00000BED                 add     ecx, 28h ; '('
.text:00000BF0                 push    ecx
.text:00000BF1                 push    8
.text:00000BF3                 mov     edx, [ebp+Dst]
.text:00000BF9                 push    edx
.text:00000BFA                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000BFF                 movzx   eax, al
.text:00000C02                 test    eax, eax
.text:00000C04                 jnz     short loc_C0D
.text:00000C06                 xor     eax, eax
.text:00000C08                 jmp     loc_161E
.text:00000C0D ; ---------------------------------------------------------------------------
.text:00000C0D
.text:00000C0D loc_C0D:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1B4j
.text:00000C0D                 mov     ecx, [ebp+Dst]
.text:00000C13                 add     ecx, 8
.text:00000C16                 mov     [ebp+Dst], ecx
.text:00000C1C                 mov     edx, [ebp+arg_8]
.text:00000C1F                 add     edx, 2Ch ; ','
.text:00000C22                 push    edx
.text:00000C23                 push    8
.text:00000C25                 mov     eax, [ebp+Dst]
.text:00000C2B                 push    eax
.text:00000C2C                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000C31                 movzx   ecx, al
.text:00000C34                 test    ecx, ecx
.text:00000C36                 jnz     short loc_C42
.text:00000C38                 mov     edx, [ebp+arg_8]
.text:00000C3B                 mov     dword ptr [edx+2Ch], 0
.text:00000C42
.text:00000C42 loc_C42:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1E6j
.text:00000C42                 mov     eax, [ebp+Dst]
.text:00000C48                 add     eax, 8
.text:00000C4B                 mov     [ebp+Dst], eax
.text:00000C51                 mov     ecx, [ebp+arg_8]
.text:00000C54                 add     ecx, 30h ; '0'
.text:00000C57                 push    ecx
.text:00000C58                 push    8
.text:00000C5A                 mov     edx, [ebp+Dst]
.text:00000C60                 push    edx
.text:00000C61                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000C66                 movzx   eax, al
.text:00000C69                 test    eax, eax
.text:00000C6B                 jnz     short loc_C77
.text:00000C6D                 mov     ecx, [ebp+arg_8]
.text:00000C70                 mov     dword ptr [ecx+30h], 0
.text:00000C77
.text:00000C77 loc_C77:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+21Bj
.text:00000C77                 mov     edx, [ebp+Dst]
.text:00000C7D                 add     edx, 8
.text:00000C80                 mov     [ebp+Dst], edx
.text:00000C86                 mov     eax, [ebp+arg_8]
.text:00000C89                 add     eax, 10h
.text:00000C8C                 push    eax
.text:00000C8D                 mov     ecx, [ebp+Dst]
.text:00000C93                 push    ecx
.text:00000C94                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:00000C99                 movzx   edx, al
.text:00000C9C                 test    edx, edx
.text:00000C9E                 jnz     short loc_CA7
.text:00000CA0                 xor     eax, eax
.text:00000CA2                 jmp     loc_161E
.text:00000CA7 ; ---------------------------------------------------------------------------
.text:00000CA7
.text:00000CA7 loc_CA7:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+24Ej
.text:00000CA7                 mov     eax, [ebp+arg_8]
.text:00000CAA                 mov     ecx, [ebp+arg_8]
.text:00000CAD                 mov     edx, [ecx+10h]
.text:00000CB0                 mov     [eax+18h], edx
.text:00000CB3                 mov     ecx, [ecx+14h]
.text:00000CB6                 mov     [eax+1Ch], ecx
.text:00000CB9                 mov     edx, [ebp+Dst]
.text:00000CBF                 add     edx, 0Ch
.text:00000CC2                 mov     [ebp+Dst], edx
.text:00000CC8                 mov     eax, [ebp+arg_8]
.text:00000CCB                 add     eax, 20h ; ' '
.text:00000CCE                 push    eax
.text:00000CCF                 mov     ecx, [ebp+Dst]
.text:00000CD5                 push    ecx
.text:00000CD6                 call    ?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z ; NArchive::NTar::ParseInt64(char const *,__int64 &)
.text:00000CDB                 movzx   edx, al
.text:00000CDE                 test    edx, edx
.text:00000CE0                 jnz     short loc_CE9
.text:00000CE2                 xor     eax, eax
.text:00000CE4                 jmp     loc_161E
.text:00000CE9 ; ---------------------------------------------------------------------------
.text:00000CE9
.text:00000CE9 loc_CE9:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+290j
.text:00000CE9                 mov     eax, [ebp+Dst]
.text:00000CEF                 add     eax, 0Ch
.text:00000CF2                 mov     [ebp+Dst], eax
.text:00000CF8                 lea     ecx, [ebp+var_238]
.text:00000CFE                 push    ecx
.text:00000CFF                 push    8
.text:00000D01                 mov     edx, [ebp+Dst]
.text:00000D07                 push    edx
.text:00000D08                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000D0D                 movzx   eax, al
.text:00000D10                 test    eax, eax
.text:00000D12                 jnz     short loc_D1B
.text:00000D14                 xor     eax, eax
.text:00000D16                 jmp     loc_161E
.text:00000D1B ; ---------------------------------------------------------------------------
.text:00000D1B
.text:00000D1B loc_D1B:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2C2j
.text:00000D1B                 push    8               ; Size
.text:00000D1D                 push    20h ; ' '       ; Val
.text:00000D1F                 mov     ecx, [ebp+Dst]
.text:00000D25                 push    ecx             ; Dst
.text:00000D26                 call    _memset
.text:00000D2B                 add     esp, 0Ch
.text:00000D2E                 mov     edx, [ebp+Dst]
.text:00000D34                 add     edx, 8
.text:00000D37                 mov     [ebp+Dst], edx
.text:00000D3D                 mov     eax, [ebp+arg_8]
.text:00000D40                 mov     ecx, [ebp+Dst]
.text:00000D46                 mov     dl, [ecx]
.text:00000D48                 mov     [eax+68h], dl
.text:00000D4B                 mov     eax, [ebp+Dst]
.text:00000D51                 add     eax, 1
.text:00000D54                 mov     [ebp+Dst], eax
.text:00000D5A                 mov     ecx, [ebp+arg_8]
.text:00000D5D                 add     ecx, 3Ch ; '<'
.text:00000D60                 push    ecx
.text:00000D61                 push    64h ; 'd'
.text:00000D63                 mov     edx, [ebp+Dst]
.text:00000D69                 push    edx
.text:00000D6A                 call    ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString(char const *,uint,AString &)
.text:00000D6F                 mov     eax, [ebp+Dst]
.text:00000D75                 add     eax, 64h ; 'd'
.text:00000D78                 mov     [ebp+Dst], eax
.text:00000D7E                 mov     ecx, [ebp+arg_8]
.text:00000D81                 add     ecx, 3Ch ; '<'  ; this
.text:00000D84                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000D89                 cmp     eax, 64h ; 'd'
.text:00000D8C                 jz      short loc_DAA
.text:00000D8E                 mov     ecx, [ebp+arg_8]
.text:00000D91                 add     ecx, 3Ch ; '<'  ; this
.text:00000D94                 call    ?Len@AString@@QBEIXZ ; AString::Len(void)
.text:00000D99                 cmp     eax, 63h ; 'c'
.text:00000D9C                 jz      short loc_DAA
.text:00000D9E                 mov     [ebp+var_2D0], 0
.text:00000DA8                 jmp     short loc_DB4
.text:00000DAA ; ---------------------------------------------------------------------------
.text:00000DAA
.text:00000DAA loc_DAA:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+33Cj
.text:00000DAA                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+34Cj
.text:00000DAA                 mov     [ebp+var_2D0], 1
.text:00000DB4
.text:00000DB4 loc_DB4:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+358j
.text:00000DB4                 mov     ecx, [ebp+arg_8]
.text:00000DB7                 mov     dl, byte ptr [ebp+var_2D0]
.text:00000DBD                 mov     [ecx+85h], dl
.text:00000DC3                 push    8               ; Size
.text:00000DC5                 mov     eax, [ebp+Dst]
.text:00000DCB                 push    eax             ; Src
.text:00000DCC                 mov     ecx, [ebp+arg_8]
.text:00000DCF                 add     ecx, 60h ; '`'
.text:00000DD2                 push    ecx             ; Dst
.text:00000DD3                 call    _memcpy
.text:00000DD8                 add     esp, 0Ch
.text:00000DDB                 mov     edx, [ebp+Dst]
.text:00000DE1                 add     edx, 8
.text:00000DE4                 mov     [ebp+Dst], edx
.text:00000DEA                 mov     eax, [ebp+arg_8]
.text:00000DED                 add     eax, 48h ; 'H'
.text:00000DF0                 push    eax
.text:00000DF1                 push    20h ; ' '
.text:00000DF3                 mov     ecx, [ebp+Dst]
.text:00000DF9                 push    ecx
.text:00000DFA                 call    ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString(char const *,uint,AString &)
.text:00000DFF                 mov     edx, [ebp+Dst]
.text:00000E05                 add     edx, 20h ; ' '
.text:00000E08                 mov     [ebp+Dst], edx
.text:00000E0E                 mov     eax, [ebp+arg_8]
.text:00000E11                 add     eax, 54h ; 'T'
.text:00000E14                 push    eax
.text:00000E15                 push    20h ; ' '
.text:00000E17                 mov     ecx, [ebp+Dst]
.text:00000E1D                 push    ecx
.text:00000E1E                 call    ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString(char const *,uint,AString &)
.text:00000E23                 mov     edx, [ebp+Dst]
.text:00000E29                 add     edx, 20h ; ' '
.text:00000E2C                 mov     [ebp+Dst], edx
.text:00000E32                 mov     eax, [ebp+Dst]
.text:00000E38                 movsx   ecx, byte ptr [eax]
.text:00000E3B                 neg     ecx
.text:00000E3D                 sbb     ecx, ecx
.text:00000E3F                 neg     ecx
.text:00000E41                 mov     edx, [ebp+arg_8]
.text:00000E44                 mov     [edx+69h], cl
.text:00000E47                 mov     eax, [ebp+arg_8]
.text:00000E4A                 movzx   ecx, byte ptr [eax+69h]
.text:00000E4E                 test    ecx, ecx
.text:00000E50                 jz      short loc_E75
.text:00000E52                 mov     edx, [ebp+arg_8]
.text:00000E55                 add     edx, 34h ; '4'
.text:00000E58                 push    edx
.text:00000E59                 push    8
.text:00000E5B                 mov     eax, [ebp+Dst]
.text:00000E61                 push    eax
.text:00000E62                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000E67                 movzx   ecx, al
.text:00000E6A                 test    ecx, ecx
.text:00000E6C                 jnz     short loc_E75
.text:00000E6E                 xor     eax, eax
.text:00000E70                 jmp     loc_161E
.text:00000E75 ; ---------------------------------------------------------------------------
.text:00000E75
.text:00000E75 loc_E75:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+400j
.text:00000E75                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+41Cj
.text:00000E75                 mov     edx, [ebp+Dst]
.text:00000E7B                 add     edx, 8
.text:00000E7E                 mov     [ebp+Dst], edx
.text:00000E84                 mov     eax, [ebp+Dst]
.text:00000E8A                 movsx   ecx, byte ptr [eax]
.text:00000E8D                 neg     ecx
.text:00000E8F                 sbb     ecx, ecx
.text:00000E91                 neg     ecx
.text:00000E93                 mov     edx, [ebp+arg_8]
.text:00000E96                 mov     [edx+6Ah], cl
.text:00000E99                 mov     eax, [ebp+arg_8]
.text:00000E9C                 movzx   ecx, byte ptr [eax+6Ah]
.text:00000EA0                 test    ecx, ecx
.text:00000EA2                 jz      short loc_EC7
.text:00000EA4                 mov     edx, [ebp+arg_8]
.text:00000EA7                 add     edx, 38h ; '8'
.text:00000EAA                 push    edx
.text:00000EAB                 push    8
.text:00000EAD                 mov     eax, [ebp+Dst]
.text:00000EB3                 push    eax
.text:00000EB4                 call    ?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)
.text:00000EB9                 movzx   ecx, al
.text:00000EBC                 test    ecx, ecx
.text:00000EBE                 jnz     short loc_EC7
.text:00000EC0                 xor     eax, eax
.text:00000EC2                 jmp     loc_161E
.text:00000EC7 ; ---------------------------------------------------------------------------
.text:00000EC7
.text:00000EC7 loc_EC7:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+452j
.text:00000EC7                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+46Ej
.text:00000EC7                 mov     edx, [ebp+Dst]
.text:00000ECD                 add     edx, 8
.text:00000ED0                 mov     [ebp+Dst], edx
.text:00000ED6                 mov     eax, [ebp+Dst]
.text:00000EDC                 movsx   ecx, byte ptr [eax]
.text:00000EDF                 test    ecx, ecx
.text:00000EE1                 jz      loc_FE1
.text:00000EE7                 lea     ecx, [ebp+var_24C]
.text:00000EED                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00000EF2                 mov     [ebp+var_4], 0
.text:00000EF9                 lea     edx, [ebp+var_24C]
.text:00000EFF                 push    edx
.text:00000F00                 push    9Bh ; '¢'
.text:00000F05                 mov     eax, [ebp+Dst]
.text:00000F0B                 push    eax
.text:00000F0C                 call    ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString(char const *,uint,AString &)
.text:00000F11                 lea     ecx, [ebp+var_24C] ; this
.text:00000F17                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00000F1C                 movzx   ecx, al
.text:00000F1F                 test    ecx, ecx
.text:00000F21                 jnz     loc_FCF
.text:00000F27                 mov     ecx, [ebp+arg_8] ; this
.text:00000F2A                 call    ?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsUstarMagic(void)
.text:00000F2F                 movzx   edx, al
.text:00000F32                 test    edx, edx
.text:00000F34                 jz      loc_FCF
.text:00000F3A                 mov     eax, [ebp+arg_8]
.text:00000F3D                 movsx   ecx, byte ptr [eax+68h]
.text:00000F41                 cmp     ecx, 4Ch ; 'L'
.text:00000F44                 jz      loc_FCF
.text:00000F4A                 mov     edx, [ebp+arg_8]
.text:00000F4D                 push    edx
.text:00000F4E                 push    2Fh ; '/'
.text:00000F50                 lea     eax, [ebp+var_24C]
.text:00000F56                 push    eax
.text:00000F57                 lea     ecx, [ebp+var_2BC]
.text:00000F5D                 push    ecx
.text:00000F5E                 call    ??H@YG?AVAString@@ABV0@D@Z ; operator+(AString const &,char)
.text:00000F63                 mov     [ebp+var_2D4], eax
.text:00000F69                 mov     edx, [ebp+var_2D4]
.text:00000F6F                 mov     [ebp+var_2D8], edx
.text:00000F75                 mov     byte ptr [ebp+var_4], 1
.text:00000F79                 mov     eax, [ebp+var_2D8]
.text:00000F7F                 push    eax
.text:00000F80                 lea     ecx, [ebp+var_2C8]
.text:00000F86                 push    ecx
.text:00000F87                 call    ??H@YG?AVAString@@ABV0@0@Z ; operator+(AString const &,AString const &)
.text:00000F8C                 mov     [ebp+var_2DC], eax
.text:00000F92                 mov     edx, [ebp+var_2DC]
.text:00000F98                 mov     [ebp+var_2E0], edx
.text:00000F9E                 mov     byte ptr [ebp+var_4], 2
.text:00000FA2                 mov     eax, [ebp+var_2E0]
.text:00000FA8                 push    eax
.text:00000FA9                 mov     ecx, [ebp+arg_8]
.text:00000FAC                 call    ??4AString@@QAEAAV0@ABV0@@Z ; AString::operator=(AString const &)
.text:00000FB1                 mov     byte ptr [ebp+var_4], 1
.text:00000FB5                 lea     ecx, [ebp+var_2C8] ; this
.text:00000FBB                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000FC0                 mov     byte ptr [ebp+var_4], 0
.text:00000FC4                 lea     ecx, [ebp+var_2BC] ; this
.text:00000FCA                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000FCF
.text:00000FCF loc_FCF:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+4D1j
.text:00000FCF                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+4E4j ...
.text:00000FCF                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000FD6                 lea     ecx, [ebp+var_24C] ; this
.text:00000FDC                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000FE1
.text:00000FE1 loc_FE1:                                ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+491j
.text:00000FE1                 mov     ecx, [ebp+Dst]
.text:00000FE7                 add     ecx, 9Bh ; '¢'
.text:00000FED                 mov     [ebp+Dst], ecx
.text:00000FF3                 mov     edx, [ebp+arg_8]
.text:00000FF6                 movsx   eax, byte ptr [edx+68h]
.text:00000FFA                 cmp     eax, 31h ; '1'
.text:00000FFD                 jnz     short loc_1021
.text:00000FFF                 mov     ecx, [ebp+arg_8]
.text:00001002                 mov     dword ptr [ecx+10h], 0
.text:00001009                 mov     dword ptr [ecx+14h], 0
.text:00001010                 mov     edx, [ebp+arg_8]
.text:00001013                 mov     dword ptr [edx+18h], 0
.text:0000101A                 mov     dword ptr [edx+1Ch], 0
.text:00001021
.text:00001021 loc_1021:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+5ADj
.text:00001021                 mov     [ebp+var_254], 0
.text:0000102B                 mov     [ebp+var_258], 0
.text:00001035                 mov     [ebp+var_25C], 0
.text:0000103F                 jmp     short loc_1050
.text:00001041 ; ---------------------------------------------------------------------------
.text:00001041
.text:00001041 loc_1041:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+64Cj
.text:00001041                 mov     eax, [ebp+var_25C]
.text:00001047                 add     eax, 1
.text:0000104A                 mov     [ebp+var_25C], eax
.text:00001050
.text:00001050 loc_1050:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+5EFj
.text:00001050                 cmp     [ebp+var_25C], 200h
.text:0000105A                 jnb     short loc_109E
.text:0000105C                 mov     ecx, [ebp+var_25C]
.text:00001062                 mov     dl, [ebp+ecx+var_214]
.text:00001069                 mov     [ebp+var_25D], dl
.text:0000106F                 movsx   eax, [ebp+var_25D]
.text:00001076                 add     eax, [ebp+var_258]
.text:0000107C                 mov     [ebp+var_258], eax
.text:00001082                 mov     ecx, [ebp+var_25C]
.text:00001088                 movzx   edx, [ebp+ecx+var_214]
.text:00001090                 add     edx, [ebp+var_254]
.text:00001096                 mov     [ebp+var_254], edx
.text:0000109C                 jmp     short loc_1041
.text:0000109E ; ---------------------------------------------------------------------------
.text:0000109E
.text:0000109E loc_109E:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+60Aj
.text:0000109E                 mov     eax, [ebp+var_254]
.text:000010A4                 cmp     eax, [ebp+var_238]
.text:000010AA                 jz      short loc_10C1
.text:000010AC                 mov     ecx, [ebp+var_258]
.text:000010B2                 cmp     ecx, [ebp+var_238]
.text:000010B8                 jz      short loc_10C1
.text:000010BA                 xor     eax, eax
.text:000010BC                 jmp     loc_161E
.text:000010C1 ; ---------------------------------------------------------------------------
.text:000010C1
.text:000010C1 loc_10C1:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+65Aj
.text:000010C1                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+668j
.text:000010C1                 mov     edx, [ebp+arg_8]
.text:000010C4                 mov     eax, [edx+80h]
.text:000010CA                 add     eax, 200h
.text:000010CF                 mov     ecx, [ebp+arg_8]
.text:000010D2                 mov     [ecx+80h], eax
.text:000010D8                 mov     edx, [ebp+arg_8]
.text:000010DB                 movsx   eax, byte ptr [edx+68h]
.text:000010DF                 cmp     eax, 53h ; 'S'
.text:000010E2                 jnz     loc_160D
.text:000010E8                 mov     cl, [ebp+var_32]
.text:000010EB                 mov     [ebp+var_25E], cl
.text:000010F1                 movzx   edx, [ebp+var_25E]
.text:000010F8                 test    edx, edx
.text:000010FA                 jz      short loc_110F
.text:000010FC                 movzx   eax, [ebp+var_25E]
.text:00001103                 cmp     eax, 1
.text:00001106                 jz      short loc_110F
.text:00001108                 xor     eax, eax
.text:0000110A                 jmp     loc_161E
.text:0000110F ; ---------------------------------------------------------------------------
.text:0000110F
.text:0000110F loc_110F:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+6AAj
.text:0000110F                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+6B6j
.text:0000110F                 mov     ecx, [ebp+arg_8]
.text:00001112                 add     ecx, 18h
.text:00001115                 push    ecx
.text:00001116                 lea     edx, [ebp+var_31]
.text:00001119                 push    edx
.text:0000111A                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:0000111F                 movzx   eax, al
.text:00001122                 test    eax, eax
.text:00001124                 jnz     short loc_112D
.text:00001126                 xor     eax, eax
.text:00001128                 jmp     loc_161E
.text:0000112D ; ---------------------------------------------------------------------------
.text:0000112D
.text:0000112D loc_112D:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+6D4j
.text:0000112D                 mov     [ebp+var_268], 0
.text:00001137                 mov     [ebp+var_264], 0
.text:00001141                 mov     [ebp+var_26C], 0
.text:0000114B                 jmp     short loc_115C
.text:0000114D ; ---------------------------------------------------------------------------
.text:0000114D
.text:0000114D loc_114D:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_131Cj
.text:0000114D                 mov     ecx, [ebp+var_26C]
.text:00001153                 add     ecx, 1
.text:00001156                 mov     [ebp+var_26C], ecx
.text:0000115C
.text:0000115C loc_115C:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+6FBj
.text:0000115C                 cmp     [ebp+var_26C], 4
.text:00001163                 jnb     loc_1321
.text:00001169                 mov     edx, [ebp+var_26C]
.text:0000116F                 imul    edx, 18h
.text:00001172                 lea     eax, [ebp+edx+var_92]
.text:00001179                 mov     [ebp+Dst], eax
.text:0000117F                 mov     ecx, [ebp+Dst]
.text:00001185                 mov     edx, [ecx]
.text:00001187                 bswap   edx
.text:00001189                 test    edx, edx
.text:0000118B                 jnz     short loc_11A4
.text:0000118D                 movzx   eax, [ebp+var_25E]
.text:00001194                 test    eax, eax
.text:00001196                 jz      short loc_119F
.text:00001198                 xor     eax, eax
.text:0000119A                 jmp     loc_161E
.text:0000119F ; ---------------------------------------------------------------------------
.text:0000119F
.text:0000119F loc_119F:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+746j
.text:0000119F                 jmp     loc_1321
.text:000011A4 ; ---------------------------------------------------------------------------
.text:000011A4
.text:000011A4 loc_11A4:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+73Bj
.text:000011A4                 lea     ecx, [ebp+var_280]
.text:000011AA                 push    ecx
.text:000011AB                 mov     edx, [ebp+Dst]
.text:000011B1                 push    edx
.text:000011B2                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:000011B7                 movzx   eax, al
.text:000011BA                 test    eax, eax
.text:000011BC                 jnz     short loc_11C5
.text:000011BE                 xor     eax, eax
.text:000011C0                 jmp     loc_161E
.text:000011C5 ; ---------------------------------------------------------------------------
.text:000011C5
.text:000011C5 loc_11C5:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+76Cj
.text:000011C5                 lea     ecx, [ebp+var_278]
.text:000011CB                 push    ecx
.text:000011CC                 mov     edx, [ebp+Dst]
.text:000011D2                 add     edx, 0Ch
.text:000011D5                 push    edx
.text:000011D6                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:000011DB                 movzx   eax, al
.text:000011DE                 test    eax, eax
.text:000011E0                 jnz     short loc_11E9
.text:000011E2                 xor     eax, eax
.text:000011E4                 jmp     loc_161E
.text:000011E9 ; ---------------------------------------------------------------------------
.text:000011E9
.text:000011E9 loc_11E9:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+790j
.text:000011E9                 sub     esp, 10h
.text:000011EC                 mov     ecx, esp
.text:000011EE                 mov     edx, [ebp+var_280]
.text:000011F4                 mov     [ecx], edx
.text:000011F6                 mov     eax, [ebp+var_27C]
.text:000011FC                 mov     [ecx+4], eax
.text:000011FF                 mov     edx, [ebp+var_278]
.text:00001205                 mov     [ecx+8], edx
.text:00001208                 mov     eax, [ebp+var_274]
.text:0000120E                 mov     [ecx+0Ch], eax
.text:00001211                 mov     ecx, [ebp+arg_8]
.text:00001214                 add     ecx, 6Ch ; 'l'
.text:00001217                 call    ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::Add(NArchive::NTar::CSparseBlock)
.text:0000121C                 mov     ecx, [ebp+var_27C]
.text:00001222                 cmp     ecx, [ebp+var_264]
.text:00001228                 jb      short loc_1267
.text:0000122A                 ja      short loc_123A
.text:0000122C                 mov     edx, [ebp+var_280]
.text:00001232                 cmp     edx, [ebp+var_268]
.text:00001238                 jb      short loc_1267
.text:0000123A
.text:0000123A loc_123A:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7DAj
.text:0000123A                 mov     eax, [ebp+arg_8]
.text:0000123D                 mov     [ebp+var_2E4], eax
.text:00001243                 mov     ecx, [ebp+var_2E4]
.text:00001249                 mov     edx, [ebp+var_27C]
.text:0000124F                 cmp     edx, [ecx+1Ch]
.text:00001252                 jb      short loc_126E
.text:00001254                 ja      short loc_1267
.text:00001256                 mov     eax, [ebp+var_2E4]
.text:0000125C                 mov     ecx, [ebp+var_280]
.text:00001262                 cmp     ecx, [eax+18h]
.text:00001265                 jbe     short loc_126E
.text:00001267
.text:00001267 loc_1267:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7D8j
.text:00001267                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7E8j ...
.text:00001267                 xor     eax, eax
.text:00001269                 jmp     loc_161E
.text:0000126E ; ---------------------------------------------------------------------------
.text:0000126E
.text:0000126E loc_126E:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+802j
.text:0000126E                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+815j
.text:0000126E                 mov     edx, [ebp+var_280]
.text:00001274                 and     edx, 1FFh
.text:0000127A                 mov     eax, [ebp+var_27C]
.text:00001280                 and     eax, 0
.text:00001283                 mov     [ebp+var_2EC], edx
.text:00001289                 mov     [ebp+var_2E8], eax
.text:0000128F                 mov     ecx, [ebp+var_2EC]
.text:00001295                 or      ecx, [ebp+var_2E8]
.text:0000129B                 jnz     short loc_12CC
.text:0000129D                 mov     edx, [ebp+var_278]
.text:000012A3                 and     edx, 1FFh
.text:000012A9                 mov     eax, [ebp+var_274]
.text:000012AF                 and     eax, 0
.text:000012B2                 mov     [ebp+var_2F4], edx
.text:000012B8                 mov     [ebp+var_2F0], eax
.text:000012BE                 mov     ecx, [ebp+var_2F4]
.text:000012C4                 or      ecx, [ebp+var_2F0]
.text:000012CA                 jz      short loc_12D3
.text:000012CC
.text:000012CC loc_12CC:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+84Bj
.text:000012CC                 xor     eax, eax
.text:000012CE                 jmp     loc_161E
.text:000012D3 ; ---------------------------------------------------------------------------
.text:000012D3
.text:000012D3 loc_12D3:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+87Aj
.text:000012D3                 mov     edx, [ebp+var_280]
.text:000012D9                 add     edx, [ebp+var_278]
.text:000012DF                 mov     eax, [ebp+var_27C]
.text:000012E5                 adc     eax, [ebp+var_274]
.text:000012EB                 mov     [ebp+var_268], edx
.text:000012F1                 mov     [ebp+var_264], eax
.text:000012F7                 mov     ecx, [ebp+var_264]
.text:000012FD                 cmp     ecx, [ebp+var_27C]
.text:00001303                 ja      short loc_131C
.text:00001305                 jb      short loc_1315
.text:00001307                 mov     edx, [ebp+var_268]
.text:0000130D                 cmp     edx, [ebp+var_280]
.text:00001313                 jnb     short loc_131C
.text:00001315
.text:00001315 loc_1315:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8B5j
.text:00001315                 xor     eax, eax
.text:00001317                 jmp     loc_161E
.text:0000131C ; ---------------------------------------------------------------------------
.text:0000131C
.text:0000131C loc_131C:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8B3j
.text:0000131C                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8C3j
.text:0000131C                 jmp     loc_114D
.text:00001321 ; ---------------------------------------------------------------------------
.text:00001321
.text:00001321 loc_1321:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+713j
.text:00001321                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_119Fj
.text:00001321                 mov     eax, [ebp+arg_8]
.text:00001324                 mov     [ebp+var_2F8], eax
.text:0000132A                 mov     ecx, [ebp+var_2F8]
.text:00001330                 mov     edx, [ebp+var_264]
.text:00001336                 cmp     edx, [ecx+1Ch]
.text:00001339                 jb      short loc_1355
.text:0000133B                 ja      short loc_134E
.text:0000133D                 mov     eax, [ebp+var_2F8]
.text:00001343                 mov     ecx, [ebp+var_268]
.text:00001349                 cmp     ecx, [eax+18h]
.text:0000134C                 jbe     short loc_1355
.text:0000134E
.text:0000134E loc_134E:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8EBj
.text:0000134E                 xor     eax, eax
.text:00001350                 jmp     loc_161E
.text:00001355 ; ---------------------------------------------------------------------------
.text:00001355
.text:00001355 loc_1355:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8E9j
.text:00001355                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+8FCj ...
.text:00001355                 movzx   edx, [ebp+var_25E]
.text:0000135C                 test    edx, edx
.text:0000135E                 jz      loc_15DC
.text:00001364                 mov     [ebp+var_28C], 200h
.text:0000136E                 lea     eax, [ebp+var_28C]
.text:00001374                 push    eax             ; unsigned int *
.text:00001375                 lea     ecx, [ebp+var_214]
.text:0000137B                 push    ecx             ; void *
.text:0000137C                 mov     edx, [ebp+arg_0]
.text:0000137F                 push    edx             ; struct ISequentialInStream *
.text:00001380                 call    ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream(ISequentialInStream *,void *,uint *)
.text:00001385                 mov     [ebp+var_294], eax
.text:0000138B                 cmp     [ebp+var_294], 0
.text:00001392                 jz      short loc_139F
.text:00001394                 mov     eax, [ebp+var_294]
.text:0000139A                 jmp     loc_161E
.text:0000139F ; ---------------------------------------------------------------------------
.text:0000139F
.text:0000139F loc_139F:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+942j
.text:0000139F                 cmp     [ebp+var_28C], 200h
.text:000013A9                 jz      short loc_13BB
.text:000013AB                 mov     eax, [ebp+arg_C]
.text:000013AE                 mov     dword ptr [eax], 2
.text:000013B4                 xor     eax, eax
.text:000013B6                 jmp     loc_161E
.text:000013BB ; ---------------------------------------------------------------------------
.text:000013BB
.text:000013BB loc_13BB:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+959j
.text:000013BB                 mov     ecx, [ebp+arg_8]
.text:000013BE                 mov     edx, [ecx+80h]
.text:000013C4                 add     edx, 200h
.text:000013CA                 mov     eax, [ebp+arg_8]
.text:000013CD                 mov     [eax+80h], edx
.text:000013D3                 mov     cl, [ebp+var_1C]
.text:000013D6                 mov     [ebp+var_25E], cl
.text:000013DC                 movzx   edx, [ebp+var_25E]
.text:000013E3                 test    edx, edx
.text:000013E5                 jz      short loc_13FA
.text:000013E7                 movzx   eax, [ebp+var_25E]
.text:000013EE                 cmp     eax, 1
.text:000013F1                 jz      short loc_13FA
.text:000013F3                 xor     eax, eax
.text:000013F5                 jmp     loc_161E
.text:000013FA ; ---------------------------------------------------------------------------
.text:000013FA
.text:000013FA loc_13FA:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+995j
.text:000013FA                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+9A1j
.text:000013FA                 mov     [ebp+var_298], 0
.text:00001404                 jmp     short loc_1415
.text:00001406 ; ---------------------------------------------------------------------------
.text:00001406
.text:00001406 loc_1406:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_15D2j
.text:00001406                 mov     ecx, [ebp+var_298]
.text:0000140C                 add     ecx, 1
.text:0000140F                 mov     [ebp+var_298], ecx
.text:00001415
.text:00001415 loc_1415:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+9B4j
.text:00001415                 cmp     [ebp+var_298], 15h
.text:0000141C                 jnb     loc_15D7
.text:00001422                 mov     edx, [ebp+var_298]
.text:00001428                 imul    edx, 18h
.text:0000142B                 lea     eax, [ebp+edx+var_214]
.text:00001432                 mov     [ebp+Dst], eax
.text:00001438                 mov     ecx, [ebp+Dst]
.text:0000143E                 mov     edx, [ecx]
.text:00001440                 bswap   edx
.text:00001442                 test    edx, edx
.text:00001444                 jnz     short loc_145D
.text:00001446                 movzx   eax, [ebp+var_25E]
.text:0000144D                 test    eax, eax
.text:0000144F                 jz      short loc_1458
.text:00001451                 xor     eax, eax
.text:00001453                 jmp     loc_161E
.text:00001458 ; ---------------------------------------------------------------------------
.text:00001458
.text:00001458 loc_1458:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+9FFj
.text:00001458                 jmp     loc_15D7
.text:0000145D ; ---------------------------------------------------------------------------
.text:0000145D
.text:0000145D loc_145D:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+9F4j
.text:0000145D                 lea     ecx, [ebp+var_2AC]
.text:00001463                 push    ecx
.text:00001464                 mov     edx, [ebp+Dst]
.text:0000146A                 push    edx
.text:0000146B                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:00001470                 movzx   eax, al
.text:00001473                 test    eax, eax
.text:00001475                 jnz     short loc_147E
.text:00001477                 xor     eax, eax
.text:00001479                 jmp     loc_161E
.text:0000147E ; ---------------------------------------------------------------------------
.text:0000147E
.text:0000147E loc_147E:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A25j
.text:0000147E                 lea     ecx, [ebp+var_2A4]
.text:00001484                 push    ecx
.text:00001485                 mov     edx, [ebp+Dst]
.text:0000148B                 add     edx, 0Ch
.text:0000148E                 push    edx
.text:0000148F                 call    ?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ; NArchive::NTar::ParseSize(char const *,unsigned __int64 &)
.text:00001494                 movzx   eax, al
.text:00001497                 test    eax, eax
.text:00001499                 jnz     short loc_14A2
.text:0000149B                 xor     eax, eax
.text:0000149D                 jmp     loc_161E
.text:000014A2 ; ---------------------------------------------------------------------------
.text:000014A2
.text:000014A2 loc_14A2:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A49j
.text:000014A2                 sub     esp, 10h
.text:000014A5                 mov     ecx, esp
.text:000014A7                 mov     edx, [ebp+var_2AC]
.text:000014AD                 mov     [ecx], edx
.text:000014AF                 mov     eax, [ebp+var_2A8]
.text:000014B5                 mov     [ecx+4], eax
.text:000014B8                 mov     edx, [ebp+var_2A4]
.text:000014BE                 mov     [ecx+8], edx
.text:000014C1                 mov     eax, [ebp+var_2A0]
.text:000014C7                 mov     [ecx+0Ch], eax
.text:000014CA                 mov     ecx, [ebp+arg_8]
.text:000014CD                 add     ecx, 6Ch ; 'l'
.text:000014D0                 call    ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::Add(NArchive::NTar::CSparseBlock)
.text:000014D5                 mov     ecx, [ebp+var_2A8]
.text:000014DB                 cmp     ecx, [ebp+var_264]
.text:000014E1                 jb      short loc_1520
.text:000014E3                 ja      short loc_14F3
.text:000014E5                 mov     edx, [ebp+var_2AC]
.text:000014EB                 cmp     edx, [ebp+var_268]
.text:000014F1                 jb      short loc_1520
.text:000014F3
.text:000014F3 loc_14F3:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A93j
.text:000014F3                 mov     eax, [ebp+arg_8]
.text:000014F6                 mov     [ebp+var_2FC], eax
.text:000014FC                 mov     ecx, [ebp+var_2FC]
.text:00001502                 mov     edx, [ebp+var_2A8]
.text:00001508                 cmp     edx, [ecx+1Ch]
.text:0000150B                 jb      short loc_1527
.text:0000150D                 ja      short loc_1520
.text:0000150F                 mov     eax, [ebp+var_2FC]
.text:00001515                 mov     ecx, [ebp+var_2AC]
.text:0000151B                 cmp     ecx, [eax+18h]
.text:0000151E                 jbe     short loc_1527
.text:00001520
.text:00001520 loc_1520:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A91j
.text:00001520                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+AA1j ...
.text:00001520                 xor     eax, eax
.text:00001522                 jmp     loc_161E
.text:00001527 ; ---------------------------------------------------------------------------
.text:00001527
.text:00001527 loc_1527:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+ABBj
.text:00001527                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+ACEj
.text:00001527                 mov     edx, [ebp+var_2AC]
.text:0000152D                 and     edx, 1FFh
.text:00001533                 mov     eax, [ebp+var_2A8]
.text:00001539                 and     eax, 0
.text:0000153C                 mov     [ebp+var_304], edx
.text:00001542                 mov     [ebp+var_300], eax
.text:00001548                 mov     ecx, [ebp+var_304]
.text:0000154E                 or      ecx, [ebp+var_300]
.text:00001554                 jnz     short loc_1585
.text:00001556                 mov     edx, [ebp+var_2A4]
.text:0000155C                 and     edx, 1FFh
.text:00001562                 mov     eax, [ebp+var_2A0]
.text:00001568                 and     eax, 0
.text:0000156B                 mov     [ebp+var_30C], edx
.text:00001571                 mov     [ebp+var_308], eax
.text:00001577                 mov     ecx, [ebp+var_30C]
.text:0000157D                 or      ecx, [ebp+var_308]
.text:00001583                 jz      short loc_158C
.text:00001585
.text:00001585 loc_1585:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+B04j
.text:00001585                 xor     eax, eax
.text:00001587                 jmp     loc_161E
.text:0000158C ; ---------------------------------------------------------------------------
.text:0000158C
.text:0000158C loc_158C:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+B33j
.text:0000158C                 mov     edx, [ebp+var_2AC]
.text:00001592                 add     edx, [ebp+var_2A4]
.text:00001598                 mov     eax, [ebp+var_2A8]
.text:0000159E                 adc     eax, [ebp+var_2A0]
.text:000015A4                 mov     [ebp+var_268], edx
.text:000015AA                 mov     [ebp+var_264], eax
.text:000015B0                 mov     ecx, [ebp+var_264]
.text:000015B6                 cmp     ecx, [ebp+var_2A8]
.text:000015BC                 ja      short loc_15D2
.text:000015BE                 jb      short loc_15CE
.text:000015C0                 mov     edx, [ebp+var_268]
.text:000015C6                 cmp     edx, [ebp+var_2AC]
.text:000015CC                 jnb     short loc_15D2
.text:000015CE
.text:000015CE loc_15CE:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+B6Ej
.text:000015CE                 xor     eax, eax
.text:000015D0                 jmp     short loc_161E
.text:000015D2 ; ---------------------------------------------------------------------------
.text:000015D2
.text:000015D2 loc_15D2:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+B6Cj
.text:000015D2                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+B7Cj
.text:000015D2                 jmp     loc_1406
.text:000015D7 ; ---------------------------------------------------------------------------
.text:000015D7
.text:000015D7 loc_15D7:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+9CCj
.text:000015D7                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_1458j
.text:000015D7                 jmp     loc_1355
.text:000015DC ; ---------------------------------------------------------------------------
.text:000015DC
.text:000015DC loc_15DC:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+90Ej
.text:000015DC                 mov     eax, [ebp+arg_8]
.text:000015DF                 mov     [ebp+var_310], eax
.text:000015E5                 mov     ecx, [ebp+var_310]
.text:000015EB                 mov     edx, [ebp+var_264]
.text:000015F1                 cmp     edx, [ecx+1Ch]
.text:000015F4                 jb      short loc_160D
.text:000015F6                 ja      short loc_1609
.text:000015F8                 mov     eax, [ebp+var_310]
.text:000015FE                 mov     ecx, [ebp+var_268]
.text:00001604                 cmp     ecx, [eax+18h]
.text:00001607                 jbe     short loc_160D
.text:00001609
.text:00001609 loc_1609:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BA6j
.text:00001609                 xor     eax, eax
.text:0000160B                 jmp     short loc_161E
.text:0000160D ; ---------------------------------------------------------------------------
.text:0000160D
.text:0000160D loc_160D:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+692j
.text:0000160D                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BA4j ...
.text:0000160D                 mov     edx, [ebp+arg_4]
.text:00001610                 mov     byte ptr [edx], 1
.text:00001613                 mov     eax, [ebp+arg_C]
.text:00001616                 mov     dword ptr [eax], 0
.text:0000161C                 xor     eax, eax
.text:0000161E
.text:0000161E loc_161E:                               ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+96j
.text:0000161E                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BAj ...
.text:0000161E                 push    edx
.text:0000161F                 mov     ecx, ebp
.text:00001621                 push    eax
.text:00001622                 lea     edx, $LN89
.text:00001628                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000162D                 pop     eax
.text:0000162E                 pop     edx
.text:0000162F                 mov     ecx, [ebp+var_C]
.text:00001632                 mov     large fs:0, ecx
.text:00001639                 pop     ecx
.text:0000163A                 pop     edi
.text:0000163B                 mov     ecx, [ebp+var_10]
.text:0000163E                 xor     ecx, ebp
.text:00001640                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001645                 add     esp, 310h
.text:0000164B                 cmp     ebp, esp
.text:0000164D                 call    __RTC_CheckEsp
.text:00001652                 mov     esp, ebp
.text:00001654                 pop     ebp
.text:00001655                 retn    10h
.text:00001655 ?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z endp
.text:00001655
.text:00001655 ; ---------------------------------------------------------------------------
.text:00001658 $LN89           dd 7                    ; DATA XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BD2o
.text:0000165C                 dd offset $LN88
.text:00001660 $LN88           dd 0FFFFFDECh, 200h     ; DATA XREF: .text:0000165Co
.text:00001668                 dd offset $LN80         ; "buf"
.text:0000166C                 dd 0FFFFFDD8h, 4
.text:00001674                 dd offset $LN81         ; "processedSize"
.text:00001678                 dd 0FFFFFDC8h, 4
.text:00001680                 dd offset $LN82         ; "checkSum"
.text:00001684                 dd 0FFFFFDB4h, 0Ch
.text:0000168C                 dd offset $LN83         ; "prefix"
.text:00001690                 dd 0FFFFFD80h, 10h
.text:00001698                 dd offset $LN84         ; "sb"
.text:0000169C                 dd 0FFFFFD74h, 4
.text:000016A4                 dd offset $LN85         ; "processedSize"
.text:000016A8                 dd 0FFFFFD54h, 10h
.text:000016B0                 dd offset $LN86
.text:000016B4 $LN86           db 73h, 62h, 0          ; DATA XREF: .text:000016B0o
.text:000016B7 $LN85           db 'processedSize',0    ; DATA XREF: .text:000016A4o
.text:000016C5 $LN84           db 'sb',0               ; DATA XREF: .text:00001698o
.text:000016C8 $LN83           db 'prefix',0           ; DATA XREF: .text:0000168Co
.text:000016CF $LN82           db 'checkSum',0         ; DATA XREF: .text:00001680o
.text:000016D8 $LN81           db 'processedSize',0    ; DATA XREF: .text:00001674o
.text:000016E6 $LN80           db 'buf',0              ; DATA XREF: .text:00001668o
.text:000016EA                 align 10h
.text:000016F0
.text:000016F0 ; =============== S U B R O U T I N E =======================================
.text:000016F0
.text:000016F0 ; Attributes: bp-based frame
.text:000016F0
.text:000016F0 ; bool __stdcall NArchive::NTar::IsRecordLast(char const *)
.text:000016F0 ?IsRecordLast@NTar@NArchive@@YG_NPBD@Z proc near
.text:000016F0                                         ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+EDp
.text:000016F0
.text:000016F0 var_4           = dword ptr -4
.text:000016F0 arg_0           = dword ptr  8
.text:000016F0
.text:000016F0                 push    ebp
.text:000016F1                 mov     ebp, esp
.text:000016F3                 push    ecx
.text:000016F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000016FB                 mov     [ebp+var_4], 0
.text:00001702                 jmp     short loc_170D
.text:00001704 ; ---------------------------------------------------------------------------
.text:00001704
.text:00001704 loc_1704:                               ; CODE XREF: NArchive::NTar::IsRecordLast(char const *):loc_1727j
.text:00001704                 mov     eax, [ebp+var_4]
.text:00001707                 add     eax, 1
.text:0000170A                 mov     [ebp+var_4], eax
.text:0000170D
.text:0000170D loc_170D:                               ; CODE XREF: NArchive::NTar::IsRecordLast(char const *)+12j
.text:0000170D                 cmp     [ebp+var_4], 200h
.text:00001714                 jnb     short loc_1729
.text:00001716                 mov     ecx, [ebp+arg_0]
.text:00001719                 add     ecx, [ebp+var_4]
.text:0000171C                 movsx   edx, byte ptr [ecx]
.text:0000171F                 test    edx, edx
.text:00001721                 jz      short loc_1727
.text:00001723                 xor     al, al
.text:00001725                 jmp     short loc_172B
.text:00001727 ; ---------------------------------------------------------------------------
.text:00001727
.text:00001727 loc_1727:                               ; CODE XREF: NArchive::NTar::IsRecordLast(char const *)+31j
.text:00001727                 jmp     short loc_1704
.text:00001729 ; ---------------------------------------------------------------------------
.text:00001729
.text:00001729 loc_1729:                               ; CODE XREF: NArchive::NTar::IsRecordLast(char const *)+24j
.text:00001729                 mov     al, 1
.text:0000172B
.text:0000172B loc_172B:                               ; CODE XREF: NArchive::NTar::IsRecordLast(char const *)+35j
.text:0000172B                 mov     esp, ebp
.text:0000172D                 pop     ebp
.text:0000172E                 retn    4
.text:0000172E ?IsRecordLast@NTar@NArchive@@YG_NPBD@Z endp
.text:0000172E
.text:0000172E ; ---------------------------------------------------------------------------
.text:00001731                 align 10h
.text:00001740
.text:00001740 ; =============== S U B R O U T I N E =======================================
.text:00001740
.text:00001740 ; Attributes: bp-based frame
.text:00001740
.text:00001740 ; void __stdcall NArchive::NTar::ReadString(char const *, unsigned int, class AString &)
.text:00001740 ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z proc near
.text:00001740                                         ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+147p
.text:00001740                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+31Ap ...
.text:00001740
.text:00001740 var_210         = byte ptr -210h
.text:00001740 var_20C         = byte ptr -20Ch
.text:00001740 var_4           = dword ptr -4
.text:00001740 arg_0           = dword ptr  8
.text:00001740 arg_4           = dword ptr  0Ch
.text:00001740 arg_8           = dword ptr  10h
.text:00001740
.text:00001740                 push    ebp
.text:00001741                 mov     ebp, esp
.text:00001743                 sub     esp, 210h
.text:00001749                 push    edi
.text:0000174A                 lea     edi, [ebp+var_210]
.text:00001750                 mov     ecx, 84h ; 'ä'
.text:00001755                 mov     eax, 0CCCCCCCCh
.text:0000175A                 rep stosd
.text:0000175C                 mov     eax, dword ptr ds:___security_cookie
.text:00001761                 xor     eax, ebp
.text:00001763                 mov     [ebp+var_4], eax
.text:00001766                 mov     eax, [ebp+arg_4]
.text:00001769                 push    eax
.text:0000176A                 mov     ecx, [ebp+arg_0]
.text:0000176D                 push    ecx
.text:0000176E                 lea     edx, [ebp+var_20C]
.text:00001774                 push    edx
.text:00001775                 call    ?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z ; NArchive::NTar::MyStrNCpy(char *,char const *,uint)
.text:0000177A                 mov     eax, [ebp+arg_4]
.text:0000177D                 mov     [ebp+eax+var_20C], 0
.text:00001785                 lea     ecx, [ebp+var_20C]
.text:0000178B                 push    ecx
.text:0000178C                 mov     ecx, [ebp+arg_8]
.text:0000178F                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001794                 push    edx
.text:00001795                 mov     ecx, ebp
.text:00001797                 push    eax
.text:00001798                 lea     edx, $LN5_0
.text:0000179E                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000017A3                 pop     eax
.text:000017A4                 pop     edx
.text:000017A5                 pop     edi
.text:000017A6                 mov     ecx, [ebp+var_4]
.text:000017A9                 xor     ecx, ebp
.text:000017AB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000017B0                 add     esp, 210h
.text:000017B6                 cmp     ebp, esp
.text:000017B8                 call    __RTC_CheckEsp
.text:000017BD                 mov     esp, ebp
.text:000017BF                 pop     ebp
.text:000017C0                 retn    0Ch
.text:000017C0 ?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z endp
.text:000017C0
.text:000017C0 ; ---------------------------------------------------------------------------
.text:000017C3                 align 4
.text:000017C4 $LN5_0          dd 1                    ; DATA XREF: NArchive::NTar::ReadString(char const *,uint,AString &)+58o
.text:000017C8                 dd offset $LN4
.text:000017CC $LN4            dd 0FFFFFDF4h, 201h     ; DATA XREF: .text:000017C8o
.text:000017D4                 dd offset $LN3          ; "temp"
.text:000017D8 $LN3            db 'temp',0             ; DATA XREF: .text:000017D4o
.text:000017DD                 align 10h
.text:000017DD _text           ends
.text:000017DD
.rtc$TMZ:000017E0 ; ===========================================================================
.rtc$TMZ:000017E0
.rtc$TMZ:000017E0 ; Segment type: Pure data
.rtc$TMZ:000017E0 ; Segment permissions: Read
.rtc$TMZ:000017E0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000017E0                 assume cs:_rtc$TMZ
.rtc$TMZ:000017E0                 ;org 17E0h
.rtc$TMZ:000017E0 ; COMDAT (pick any)
.rtc$TMZ:000017E0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000017E0 _rtc$TMZ        ends
.rtc$TMZ:000017E0
.rtc$IMZ:000017E4 ; ===========================================================================
.rtc$IMZ:000017E4
.rtc$IMZ:000017E4 ; Segment type: Pure data
.rtc$IMZ:000017E4 ; Segment permissions: Read
.rtc$IMZ:000017E4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000017E4                 assume cs:_rtc$IMZ
.rtc$IMZ:000017E4                 ;org 17E4h
.rtc$IMZ:000017E4 ; COMDAT (pick any)
.rtc$IMZ:000017E4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000017E4 _rtc$IMZ        ends
.rtc$IMZ:000017E4
.text$x:000017E8 ; ===========================================================================
.text$x:000017E8
.text$x:000017E8 ; Segment type: Pure code
.text$x:000017E8 ; Segment permissions: Read/Execute
.text$x:000017E8 _text$x         segment para public 'CODE' use32
.text$x:000017E8                 assume cs:_text$x
.text$x:000017E8                 ;org 17E8h
.text$x:000017E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:000017E8
.text$x:000017E8 ; =============== S U B R O U T I N E =======================================
.text$x:000017E8
.text$x:000017E8
.text$x:000017E8 __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0 proc near
.text$x:000017E8                                         ; DATA XREF: .xdata$x:00001864o
.text$x:000017E8                 lea     ecx, [ebp-20h]  ; this
.text$x:000017EB                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000017EB __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0 endp
.text$x:000017EB
.text$x:000017F0
.text$x:000017F0 ; =============== S U B R O U T I N E =======================================
.text$x:000017F0
.text$x:000017F0
.text$x:000017F0 __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1 proc near
.text$x:000017F0                                         ; DATA XREF: .xdata$x:0000186Co
.text$x:000017F0                 lea     ecx, [ebp-34h]  ; this
.text$x:000017F3                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000017F3 __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1 endp
.text$x:000017F3
.text$x:000017F8
.text$x:000017F8 ; =============== S U B R O U T I N E =======================================
.text$x:000017F8
.text$x:000017F8
.text$x:000017F8 __ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z proc near
.text$x:000017F8                                         ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+5o
.text$x:000017F8
.text$x:000017F8 arg_4           = dword ptr  8
.text$x:000017F8
.text$x:000017F8                 mov     edx, [esp+arg_4]
.text$x:000017FC                 lea     eax, [edx+0Ch]
.text$x:000017FF                 mov     ecx, [edx-8Ch]
.text$x:00001805                 xor     ecx, eax
.text$x:00001807                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000180C                 mov     eax, offset __ehfuncinfo$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.text$x:00001811                 jmp     ___CxxFrameHandler3
.text$x:00001811 __ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z endp
.text$x:00001811
.text$x:00001816
.text$x:00001816 ; =============== S U B R O U T I N E =======================================
.text$x:00001816
.text$x:00001816
.text$x:00001816 __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0 proc near
.text$x:00001816                                         ; DATA XREF: .xdata$x:00001898o
.text$x:00001816                 lea     ecx, [ebp-24Ch] ; this
.text$x:0000181C                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000181C __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0 endp
.text$x:0000181C
.text$x:00001821
.text$x:00001821 ; =============== S U B R O U T I N E =======================================
.text$x:00001821
.text$x:00001821
.text$x:00001821 __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1 proc near
.text$x:00001821                                         ; DATA XREF: .xdata$x:000018A0o
.text$x:00001821                 lea     ecx, [ebp-2BCh] ; this
.text$x:00001827                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001827 __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1 endp
.text$x:00001827
.text$x:0000182C
.text$x:0000182C ; =============== S U B R O U T I N E =======================================
.text$x:0000182C
.text$x:0000182C
.text$x:0000182C __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$2 proc near
.text$x:0000182C                                         ; DATA XREF: .xdata$x:000018A8o
.text$x:0000182C                 lea     ecx, [ebp-2C8h] ; this
.text$x:00001832                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00001832 __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$2 endp
.text$x:00001832
.text$x:00001837
.text$x:00001837 ; =============== S U B R O U T I N E =======================================
.text$x:00001837
.text$x:00001837
.text$x:00001837 __ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z proc near
.text$x:00001837                                         ; DATA XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+5o
.text$x:00001837
.text$x:00001837 arg_4           = dword ptr  8
.text$x:00001837
.text$x:00001837                 mov     edx, [esp+arg_4]
.text$x:0000183B                 lea     eax, [edx+0Ch]
.text$x:0000183E                 mov     ecx, [edx-30Ch]
.text$x:00001844                 xor     ecx, eax
.text$x:00001846                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000184B                 mov     ecx, [edx-4]
.text$x:0000184E                 xor     ecx, eax
.text$x:00001850                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001855                 mov     eax, offset __ehfuncinfo$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.text$x:0000185A                 jmp     ___CxxFrameHandler3
.text$x:0000185A __ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z endp
.text$x:0000185A
.text$x:0000185A ; ---------------------------------------------------------------------------
.text$x:0000185F                 align 10h
.text$x:0000185F _text$x         ends
.text$x:0000185F
.xdata$x:00001860 ; ===========================================================================
.xdata$x:00001860
.xdata$x:00001860 ; Segment type: Pure data
.xdata$x:00001860 ; Segment permissions: Read
.xdata$x:00001860 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00001860                 assume cs:_xdata$x
.xdata$x:00001860                 ;org 1860h
.xdata$x:00001860 __unwindtable$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z db 0FFh
.xdata$x:00001860                                         ; DATA XREF: .xdata$x:00001878o
.xdata$x:00001861                 db 0FFh
.xdata$x:00001862                 db 0FFh
.xdata$x:00001863                 db 0FFh
.xdata$x:00001864                 dd offset __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0
.xdata$x:00001868                 db    0
.xdata$x:00001869                 db    0
.xdata$x:0000186A                 db    0
.xdata$x:0000186B                 db    0
.xdata$x:0000186C                 dd offset __unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1
.xdata$x:00001870 __ehfuncinfo$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z db  22h ; "
.xdata$x:00001870                                         ; DATA XREF: __ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z+14o
.xdata$x:00001871                 db    5
.xdata$x:00001872                 db  93h ; ô
.xdata$x:00001873                 db  19h
.xdata$x:00001874                 db    2
.xdata$x:00001875                 db    0
.xdata$x:00001876                 db    0
.xdata$x:00001877                 db    0
.xdata$x:00001878                 dd offset __unwindtable$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.xdata$x:0000187C                 db    0
.xdata$x:0000187D                 db    0
.xdata$x:0000187E                 db    0
.xdata$x:0000187F                 db    0
.xdata$x:00001880                 db    0
.xdata$x:00001881                 db    0
.xdata$x:00001882                 db    0
.xdata$x:00001883                 db    0
.xdata$x:00001884                 db    0
.xdata$x:00001885                 db    0
.xdata$x:00001886                 db    0
.xdata$x:00001887                 db    0
.xdata$x:00001888                 db    0
.xdata$x:00001889                 db    0
.xdata$x:0000188A                 db    0
.xdata$x:0000188B                 db    0
.xdata$x:0000188C                 db    0
.xdata$x:0000188D                 db    0
.xdata$x:0000188E                 db    0
.xdata$x:0000188F                 db    0
.xdata$x:00001890                 db    1
.xdata$x:00001891                 db    0
.xdata$x:00001892                 db    0
.xdata$x:00001893                 db    0
.xdata$x:00001894 __unwindtable$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z db 0FFh
.xdata$x:00001894                                         ; DATA XREF: .xdata$x:000018B4o
.xdata$x:00001895                 db 0FFh
.xdata$x:00001896                 db 0FFh
.xdata$x:00001897                 db 0FFh
.xdata$x:00001898                 dd offset __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0
.xdata$x:0000189C                 align 10h
.xdata$x:000018A0                 dd offset __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1
.xdata$x:000018A4                 db    1
.xdata$x:000018A5                 db    0
.xdata$x:000018A6                 db    0
.xdata$x:000018A7                 db    0
.xdata$x:000018A8                 dd offset __unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$2
.xdata$x:000018AC __ehfuncinfo$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z db  22h ; "
.xdata$x:000018AC                                         ; DATA XREF: __ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z+1Eo
.xdata$x:000018AD                 db    5
.xdata$x:000018AE                 db  93h ; ô
.xdata$x:000018AF                 db  19h
.xdata$x:000018B0                 db    3
.xdata$x:000018B1                 db    0
.xdata$x:000018B2                 db    0
.xdata$x:000018B3                 db    0
.xdata$x:000018B4                 dd offset __unwindtable$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
.xdata$x:000018B8                 db    0
.xdata$x:000018B9                 db    0
.xdata$x:000018BA                 db    0
.xdata$x:000018BB                 db    0
.xdata$x:000018BC                 db    0
.xdata$x:000018BD                 db    0
.xdata$x:000018BE                 db    0
.xdata$x:000018BF                 db    0
.xdata$x:000018C0                 db    0
.xdata$x:000018C1                 db    0
.xdata$x:000018C2                 db    0
.xdata$x:000018C3                 db    0
.xdata$x:000018C4                 db    0
.xdata$x:000018C5                 db    0
.xdata$x:000018C6                 db    0
.xdata$x:000018C7                 db    0
.xdata$x:000018C8                 db    0
.xdata$x:000018C9                 db    0
.xdata$x:000018CA                 db    0
.xdata$x:000018CB                 db    0
.xdata$x:000018CC                 db    1
.xdata$x:000018CD                 db    0
.xdata$x:000018CE                 db    0
.xdata$x:000018CF                 db    0
.xdata$x:000018CF _xdata$x        ends
.xdata$x:000018CF
.text:000018D0 ; ===========================================================================
.text:000018D0
.text:000018D0 ; Segment type: Pure code
.text:000018D0 ; Segment permissions: Read/Execute
.text:000018D0 _text           segment para public 'CODE' use32
.text:000018D0                 assume cs:_text
.text:000018D0                 ;org 18D0h
.text:000018D0 ; COMDAT (pick any)
.text:000018D0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000018D0
.text:000018D0 ; =============== S U B R O U T I N E =======================================
.text:000018D0
.text:000018D0 ; Attributes: bp-based frame
.text:000018D0
.text:000018D0 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:000018D0                 public ??1AString@@QAE@XZ
.text:000018D0 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+96p
.text:000018D0                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A5p ...
.text:000018D0
.text:000018D0 var_8           = dword ptr -8
.text:000018D0 var_4           = dword ptr -4
.text:000018D0
.text:000018D0                 push    ebp
.text:000018D1                 mov     ebp, esp
.text:000018D3                 sub     esp, 8
.text:000018D6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000018DD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000018E4                 mov     [ebp+var_4], ecx
.text:000018E7                 mov     eax, [ebp+var_4]
.text:000018EA                 mov     ecx, [eax]
.text:000018EC                 mov     [ebp+var_8], ecx
.text:000018EF                 mov     edx, [ebp+var_8]
.text:000018F2                 push    edx             ; void *
.text:000018F3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000018F8                 add     esp, 4
.text:000018FB                 add     esp, 8
.text:000018FE                 cmp     ebp, esp
.text:00001900                 call    __RTC_CheckEsp
.text:00001905                 mov     esp, ebp
.text:00001907                 pop     ebp
.text:00001908                 retn
.text:00001908 ??1AString@@QAE@XZ endp
.text:00001908
.text:00001908 ; ---------------------------------------------------------------------------
.text:00001909                 align 4
.text:00001909 _text           ends
.text:00001909
.text:0000190C ; ===========================================================================
.text:0000190C
.text:0000190C ; Segment type: Pure code
.text:0000190C ; Segment permissions: Read/Execute
.text:0000190C _text           segment para public 'CODE' use32
.text:0000190C                 assume cs:_text
.text:0000190C                 ;org 190Ch
.text:0000190C ; COMDAT (pick any)
.text:0000190C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000190C
.text:0000190C ; =============== S U B R O U T I N E =======================================
.text:0000190C
.text:0000190C ; Attributes: bp-based frame
.text:0000190C
.text:0000190C ; char *__thiscall AString::GetBuf(AString *this, unsigned int)
.text:0000190C                 public ?GetBuf@AString@@QAEPADI@Z
.text:0000190C ?GetBuf@AString@@QAEPADI@Z proc near    ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+293p
.text:0000190C
.text:0000190C var_4           = dword ptr -4
.text:0000190C arg_0           = dword ptr  8
.text:0000190C
.text:0000190C                 push    ebp
.text:0000190D                 mov     ebp, esp
.text:0000190F                 push    ecx
.text:00001910                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001917                 mov     [ebp+var_4], ecx
.text:0000191A                 mov     eax, [ebp+var_4]
.text:0000191D                 mov     ecx, [ebp+arg_0]
.text:00001920                 cmp     ecx, [eax+8]
.text:00001923                 jbe     short loc_1931
.text:00001925                 mov     edx, [ebp+arg_0]
.text:00001928                 push    edx             ; unsigned int
.text:00001929                 mov     ecx, [ebp+var_4] ; this
.text:0000192C                 call    ?ReAlloc2@AString@@AAEXI@Z ; AString::ReAlloc2(uint)
.text:00001931
.text:00001931 loc_1931:                               ; CODE XREF: AString::GetBuf(uint)+17j
.text:00001931                 mov     eax, [ebp+var_4]
.text:00001934                 mov     eax, [eax]
.text:00001936                 add     esp, 4
.text:00001939                 cmp     ebp, esp
.text:0000193B                 call    __RTC_CheckEsp
.text:00001940                 mov     esp, ebp
.text:00001942                 pop     ebp
.text:00001943                 retn    4
.text:00001943 ?GetBuf@AString@@QAEPADI@Z endp
.text:00001943
.text:00001943 ; ---------------------------------------------------------------------------
.text:00001946                 align 4
.text:00001946 _text           ends
.text:00001946
.text:00001948 ; ===========================================================================
.text:00001948
.text:00001948 ; Segment type: Pure code
.text:00001948 ; Segment permissions: Read/Execute
.text:00001948 _text           segment para public 'CODE' use32
.text:00001948                 assume cs:_text
.text:00001948                 ;org 1948h
.text:00001948 ; COMDAT (pick any)
.text:00001948                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001948
.text:00001948 ; =============== S U B R O U T I N E =======================================
.text:00001948
.text:00001948 ; Attributes: bp-based frame
.text:00001948
.text:00001948 ; void __thiscall AString::ReleaseBuf_CalcLen(AString *this, unsigned int)
.text:00001948                 public ?ReleaseBuf_CalcLen@AString@@QAEXI@Z
.text:00001948 ?ReleaseBuf_CalcLen@AString@@QAEXI@Z proc near
.text:00001948                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2D4p
.text:00001948
.text:00001948 var_8           = dword ptr -8
.text:00001948 var_4           = dword ptr -4
.text:00001948 arg_0           = dword ptr  8
.text:00001948
.text:00001948                 push    ebp
.text:00001949                 mov     ebp, esp
.text:0000194B                 sub     esp, 8
.text:0000194E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001955                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000195C                 mov     [ebp+var_4], ecx
.text:0000195F                 mov     eax, [ebp+var_4]
.text:00001962                 mov     ecx, [eax]
.text:00001964                 mov     [ebp+var_8], ecx
.text:00001967                 mov     edx, [ebp+var_8]
.text:0000196A                 add     edx, [ebp+arg_0]
.text:0000196D                 mov     byte ptr [edx], 0
.text:00001970                 mov     eax, [ebp+var_8]
.text:00001973                 push    eax             ; char *
.text:00001974                 call    ?MyStringLen@@YGIPBD@Z ; MyStringLen(char const *)
.text:00001979                 mov     ecx, [ebp+var_4]
.text:0000197C                 mov     [ecx+4], eax
.text:0000197F                 add     esp, 8
.text:00001982                 cmp     ebp, esp
.text:00001984                 call    __RTC_CheckEsp
.text:00001989                 mov     esp, ebp
.text:0000198B                 pop     ebp
.text:0000198C                 retn    4
.text:0000198C ?ReleaseBuf_CalcLen@AString@@QAEXI@Z endp
.text:0000198C
.text:0000198C ; ---------------------------------------------------------------------------
.text:0000198F                 align 10h
.text:0000198F _text           ends
.text:0000198F
.text:00001990 ; ===========================================================================
.text:00001990
.text:00001990 ; Segment type: Pure code
.text:00001990 ; Segment permissions: Read/Execute
.text:00001990 _text           segment para public 'CODE' use32
.text:00001990                 assume cs:_text
.text:00001990                 ;org 1990h
.text:00001990 ; COMDAT (pick any)
.text:00001990                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001990
.text:00001990 ; =============== S U B R O U T I N E =======================================
.text:00001990
.text:00001990 ; Attributes: bp-based frame
.text:00001990
.text:00001990 ; unsigned int __stdcall MyStringLen(const char *)
.text:00001990                 public ?MyStringLen@@YGIPBD@Z
.text:00001990 ?MyStringLen@@YGIPBD@Z proc near        ; CODE XREF: AString::ReleaseBuf_CalcLen(uint)+2Cp
.text:00001990
.text:00001990 var_4           = dword ptr -4
.text:00001990 arg_0           = dword ptr  8
.text:00001990
.text:00001990                 push    ebp
.text:00001991                 mov     ebp, esp
.text:00001993                 push    ecx
.text:00001994                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000199B                 mov     [ebp+var_4], 0
.text:000019A2                 jmp     short loc_19AD
.text:000019A4 ; ---------------------------------------------------------------------------
.text:000019A4
.text:000019A4 loc_19A4:                               ; CODE XREF: MyStringLen(char const *)+2Aj
.text:000019A4                 mov     eax, [ebp+var_4]
.text:000019A7                 add     eax, 1
.text:000019AA                 mov     [ebp+var_4], eax
.text:000019AD
.text:000019AD loc_19AD:                               ; CODE XREF: MyStringLen(char const *)+12j
.text:000019AD                 mov     ecx, [ebp+arg_0]
.text:000019B0                 add     ecx, [ebp+var_4]
.text:000019B3                 movsx   edx, byte ptr [ecx]
.text:000019B6                 test    edx, edx
.text:000019B8                 jz      short loc_19BC
.text:000019BA                 jmp     short loc_19A4
.text:000019BC ; ---------------------------------------------------------------------------
.text:000019BC
.text:000019BC loc_19BC:                               ; CODE XREF: MyStringLen(char const *)+28j
.text:000019BC                 mov     eax, [ebp+var_4]
.text:000019BF                 mov     esp, ebp
.text:000019C1                 pop     ebp
.text:000019C2                 retn    4
.text:000019C2 ?MyStringLen@@YGIPBD@Z endp
.text:000019C2
.text:000019C2 ; ---------------------------------------------------------------------------
.text:000019C5                 align 4
.text:000019C5 _text           ends
.text:000019C5
.text:000019C8 ; ===========================================================================
.text:000019C8
.text:000019C8 ; Segment type: Pure code
.text:000019C8 ; Segment permissions: Read/Execute
.text:000019C8 _text           segment para public 'CODE' use32
.text:000019C8                 assume cs:_text
.text:000019C8                 ;org 19C8h
.text:000019C8 ; COMDAT (pick any)
.text:000019C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019C8
.text:000019C8 ; =============== S U B R O U T I N E =======================================
.text:000019C8
.text:000019C8 ; Attributes: bp-based frame
.text:000019C8
.text:000019C8 ; int __stdcall operator!=(int, char *Str2)
.text:000019C8                 public ??9@YG_NABVAString@@PBD@Z
.text:000019C8 ??9@YG_NABVAString@@PBD@Z proc near     ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1E6p
.text:000019C8                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1FDp
.text:000019C8
.text:000019C8 arg_0           = dword ptr  8
.text:000019C8 Str2            = dword ptr  0Ch
.text:000019C8
.text:000019C8                 push    ebp
.text:000019C9                 mov     ebp, esp
.text:000019CB                 mov     eax, [ebp+Str2]
.text:000019CE                 push    eax             ; Str2
.text:000019CF                 mov     ecx, [ebp+arg_0]
.text:000019D2                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000019D7                 push    eax             ; Str1
.text:000019D8                 call    _strcmp
.text:000019DD                 add     esp, 8
.text:000019E0                 neg     eax
.text:000019E2                 sbb     eax, eax
.text:000019E4                 neg     eax
.text:000019E6                 cmp     ebp, esp
.text:000019E8                 call    __RTC_CheckEsp
.text:000019ED                 pop     ebp
.text:000019EE                 retn    8
.text:000019EE ??9@YG_NABVAString@@PBD@Z endp
.text:000019EE
.text:000019EE ; ---------------------------------------------------------------------------
.text:000019F1                 align 4
.text:000019F1 _text           ends
.text:000019F1
.text:000019F4 ; ===========================================================================
.text:000019F4
.text:000019F4 ; Segment type: Pure code
.text:000019F4 ; Segment permissions: Read/Execute
.text:000019F4 _text           segment para public 'CODE' use32
.text:000019F4                 assume cs:_text
.text:000019F4                 ;org 19F4h
.text:000019F4 ; COMDAT (pick any)
.text:000019F4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000019F4
.text:000019F4 ; =============== S U B R O U T I N E =======================================
.text:000019F4
.text:000019F4 ; Attributes: bp-based frame
.text:000019F4
.text:000019F4 ; public: __thiscall AString::operator char const *(void)const
.text:000019F4                 public ??BAString@@QBEPBDXZ
.text:000019F4 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: operator!=(AString const &,char const *)+Ap
.text:000019F4
.text:000019F4 var_4           = dword ptr -4
.text:000019F4
.text:000019F4                 push    ebp
.text:000019F5                 mov     ebp, esp
.text:000019F7                 push    ecx
.text:000019F8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019FF                 mov     [ebp+var_4], ecx
.text:00001A02                 mov     eax, [ebp+var_4]
.text:00001A05                 mov     eax, [eax]
.text:00001A07                 mov     esp, ebp
.text:00001A09                 pop     ebp
.text:00001A0A                 retn
.text:00001A0A ??BAString@@QBEPBDXZ endp
.text:00001A0A
.text:00001A0A ; ---------------------------------------------------------------------------
.text:00001A0B                 align 4
.text:00001A0B _text           ends
.text:00001A0B
.text:00001A0C ; ===========================================================================
.text:00001A0C
.text:00001A0C ; Segment type: Pure code
.text:00001A0C ; Segment permissions: Read/Execute
.text:00001A0C _text           segment para public 'CODE' use32
.text:00001A0C                 assume cs:_text
.text:00001A0C                 ;org 1A0Ch
.text:00001A0C ; COMDAT (pick any)
.text:00001A0C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A0C
.text:00001A0C ; =============== S U B R O U T I N E =======================================
.text:00001A0C
.text:00001A0C ; Attributes: bp-based frame
.text:00001A0C
.text:00001A0C ; unsigned __int64 __thiscall NArchive::NTar::CItem::GetPackSizeAligned(NArchive::NTar::CItem *__hidden this)
.text:00001A0C                 public ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ
.text:00001A0C ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ proc near
.text:00001A0C                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+284p
.text:00001A0C
.text:00001A0C var_4           = dword ptr -4
.text:00001A0C
.text:00001A0C                 push    ebp
.text:00001A0D                 mov     ebp, esp
.text:00001A0F                 push    ecx
.text:00001A10                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A17                 mov     [ebp+var_4], ecx
.text:00001A1A                 mov     eax, [ebp+var_4]
.text:00001A1D                 mov     ecx, [eax+10h]
.text:00001A20                 add     ecx, 1FFh
.text:00001A26                 mov     edx, [eax+14h]
.text:00001A29                 adc     edx, 0
.text:00001A2C                 and     ecx, 0FFFFFE00h
.text:00001A32                 mov     eax, ecx
.text:00001A34                 mov     esp, ebp
.text:00001A36                 pop     ebp
.text:00001A37                 retn
.text:00001A37 ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ endp
.text:00001A37
.text:00001A37 _text           ends
.text:00001A37
.text:00001A38 ; ===========================================================================
.text:00001A38
.text:00001A38 ; Segment type: Pure code
.text:00001A38 ; Segment permissions: Read/Execute
.text:00001A38 _text           segment para public 'CODE' use32
.text:00001A38                 assume cs:_text
.text:00001A38                 ;org 1A38h
.text:00001A38 ; COMDAT (pick any)
.text:00001A38                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A38
.text:00001A38 ; =============== S U B R O U T I N E =======================================
.text:00001A38
.text:00001A38 ; Attributes: bp-based frame
.text:00001A38
.text:00001A38 ; class AString __stdcall operator+(class AString const &, char)
.text:00001A38                 public ??H@YG?AVAString@@ABV0@D@Z
.text:00001A38 ??H@YG?AVAString@@ABV0@D@Z proc near    ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+50Ep
.text:00001A38
.text:00001A38 var_4           = dword ptr -4
.text:00001A38 arg_0           = dword ptr  8
.text:00001A38 arg_4           = dword ptr  0Ch
.text:00001A38 arg_8           = byte ptr  10h
.text:00001A38
.text:00001A38                 push    ebp
.text:00001A39                 mov     ebp, esp
.text:00001A3B                 push    ecx
.text:00001A3C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A43                 mov     [ebp+var_4], 0
.text:00001A4A                 movzx   eax, [ebp+arg_8]
.text:00001A4E                 push    eax
.text:00001A4F                 mov     ecx, [ebp+arg_4]
.text:00001A52                 push    ecx
.text:00001A53                 mov     ecx, [ebp+arg_0]
.text:00001A56                 call    ??0AString@@AAE@ABV0@D@Z ; AString::AString(AString const &,char)
.text:00001A5B                 mov     edx, [ebp+var_4]
.text:00001A5E                 or      edx, 1
.text:00001A61                 mov     [ebp+var_4], edx
.text:00001A64                 mov     eax, [ebp+arg_0]
.text:00001A67                 add     esp, 4
.text:00001A6A                 cmp     ebp, esp
.text:00001A6C                 call    __RTC_CheckEsp
.text:00001A71                 mov     esp, ebp
.text:00001A73                 pop     ebp
.text:00001A74                 retn    0Ch
.text:00001A74 ??H@YG?AVAString@@ABV0@D@Z endp
.text:00001A74
.text:00001A74 ; ---------------------------------------------------------------------------
.text:00001A77                 align 4
.text:00001A77 _text           ends
.text:00001A77
.text:00001A78 ; ===========================================================================
.text:00001A78
.text:00001A78 ; Segment type: Pure code
.text:00001A78 ; Segment permissions: Read/Execute
.text:00001A78 _text           segment para public 'CODE' use32
.text:00001A78                 assume cs:_text
.text:00001A78                 ;org 1A78h
.text:00001A78 ; COMDAT (pick any)
.text:00001A78                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A78
.text:00001A78 ; =============== S U B R O U T I N E =======================================
.text:00001A78
.text:00001A78 ; Attributes: bp-based frame
.text:00001A78
.text:00001A78 ; unsigned int __thiscall AString::Len(AString *__hidden this)
.text:00001A78                 public ?Len@AString@@QBEIXZ
.text:00001A78 ?Len@AString@@QBEIXZ proc near          ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+15Ep
.text:00001A78                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+16Bp ...
.text:00001A78
.text:00001A78 var_4           = dword ptr -4
.text:00001A78
.text:00001A78                 push    ebp
.text:00001A79                 mov     ebp, esp
.text:00001A7B                 push    ecx
.text:00001A7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A83                 mov     [ebp+var_4], ecx
.text:00001A86                 mov     eax, [ebp+var_4]
.text:00001A89                 mov     eax, [eax+4]
.text:00001A8C                 mov     esp, ebp
.text:00001A8E                 pop     ebp
.text:00001A8F                 retn
.text:00001A8F ?Len@AString@@QBEIXZ endp
.text:00001A8F
.text:00001A8F _text           ends
.text:00001A8F
.text:00001A90 ; ===========================================================================
.text:00001A90
.text:00001A90 ; Segment type: Pure code
.text:00001A90 ; Segment permissions: Read/Execute
.text:00001A90 _text           segment para public 'CODE' use32
.text:00001A90                 assume cs:_text
.text:00001A90                 ;org 1A90h
.text:00001A90 ; COMDAT (pick any)
.text:00001A90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001A90
.text:00001A90 ; =============== S U B R O U T I N E =======================================
.text:00001A90
.text:00001A90 ; Attributes: bp-based frame
.text:00001A90
.text:00001A90 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00001A90                 public ?IsEmpty@AString@@QBE_NXZ
.text:00001A90 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+4C7p
.text:00001A90
.text:00001A90 var_4           = dword ptr -4
.text:00001A90
.text:00001A90                 push    ebp
.text:00001A91                 mov     ebp, esp
.text:00001A93                 push    ecx
.text:00001A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001A9B                 mov     [ebp+var_4], ecx
.text:00001A9E                 mov     eax, [ebp+var_4]
.text:00001AA1                 xor     ecx, ecx
.text:00001AA3                 cmp     dword ptr [eax+4], 0
.text:00001AA7                 setz    cl
.text:00001AAA                 mov     al, cl
.text:00001AAC                 mov     esp, ebp
.text:00001AAE                 pop     ebp
.text:00001AAF                 retn
.text:00001AAF ?IsEmpty@AString@@QBE_NXZ endp
.text:00001AAF
.text:00001AAF _text           ends
.text:00001AAF
.text:00001AB0 ; ===========================================================================
.text:00001AB0
.text:00001AB0 ; Segment type: Pure code
.text:00001AB0 ; Segment permissions: Read/Execute
.text:00001AB0 _text           segment para public 'CODE' use32
.text:00001AB0                 assume cs:_text
.text:00001AB0                 ;org 1AB0h
.text:00001AB0 ; COMDAT (pick any)
.text:00001AB0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001AB0
.text:00001AB0 ; =============== S U B R O U T I N E =======================================
.text:00001AB0
.text:00001AB0 ; Attributes: bp-based frame
.text:00001AB0
.text:00001AB0 ; bool __thiscall NArchive::NTar::CItem::IsUstarMagic(NArchive::NTar::CItem *__hidden this)
.text:00001AB0                 public ?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ
.text:00001AB0 ?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ proc near
.text:00001AB0                                         ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+4DAp
.text:00001AB0
.text:00001AB0 var_8           = dword ptr -8
.text:00001AB0 var_4           = dword ptr -4
.text:00001AB0
.text:00001AB0                 push    ebp
.text:00001AB1                 mov     ebp, esp
.text:00001AB3                 sub     esp, 8
.text:00001AB6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001ABD                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001AC4                 mov     [ebp+var_4], ecx
.text:00001AC7                 mov     [ebp+var_8], 0
.text:00001ACE                 jmp     short loc_1AD9
.text:00001AD0 ; ---------------------------------------------------------------------------
.text:00001AD0
.text:00001AD0 loc_1AD0:                               ; CODE XREF: NArchive::NTar::CItem::IsUstarMagic(void):loc_1AFBj
.text:00001AD0                 mov     eax, [ebp+var_8]
.text:00001AD3                 add     eax, 1
.text:00001AD6                 mov     [ebp+var_8], eax
.text:00001AD9
.text:00001AD9 loc_1AD9:                               ; CODE XREF: NArchive::NTar::CItem::IsUstarMagic(void)+1Ej
.text:00001AD9                 cmp     [ebp+var_8], 5
.text:00001ADD                 jge     short loc_1AFD
.text:00001ADF                 mov     ecx, [ebp+var_4]
.text:00001AE2                 add     ecx, [ebp+var_8]
.text:00001AE5                 movsx   edx, byte ptr [ecx+60h]
.text:00001AE9                 mov     eax, [ebp+var_8]
.text:00001AEC                 movsx   ecx, byte ptr ds:?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB[eax] ; char const * const NArchive::NTar::NFileHeader::NMagic::kUsTar_00
.text:00001AF3                 cmp     edx, ecx
.text:00001AF5                 jz      short loc_1AFB
.text:00001AF7                 xor     al, al
.text:00001AF9                 jmp     short loc_1AFF
.text:00001AFB ; ---------------------------------------------------------------------------
.text:00001AFB
.text:00001AFB loc_1AFB:                               ; CODE XREF: NArchive::NTar::CItem::IsUstarMagic(void)+45j
.text:00001AFB                 jmp     short loc_1AD0
.text:00001AFD ; ---------------------------------------------------------------------------
.text:00001AFD
.text:00001AFD loc_1AFD:                               ; CODE XREF: NArchive::NTar::CItem::IsUstarMagic(void)+2Dj
.text:00001AFD                 mov     al, 1
.text:00001AFF
.text:00001AFF loc_1AFF:                               ; CODE XREF: NArchive::NTar::CItem::IsUstarMagic(void)+49j
.text:00001AFF                 mov     esp, ebp
.text:00001B01                 pop     ebp
.text:00001B02                 retn
.text:00001B02 ?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ endp
.text:00001B02
.text:00001B02 ; ---------------------------------------------------------------------------
.text:00001B03                 align 4
.text:00001B03 _text           ends
.text:00001B03
.text:00001B04 ; ===========================================================================
.text:00001B04
.text:00001B04 ; Segment type: Pure code
.text:00001B04 ; Segment permissions: Read/Execute
.text:00001B04 _text           segment para public 'CODE' use32
.text:00001B04                 assume cs:_text
.text:00001B04                 ;org 1B04h
.text:00001B04 ; COMDAT (pick any)
.text:00001B04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001B04
.text:00001B04 ; =============== S U B R O U T I N E =======================================
.text:00001B04
.text:00001B04 ; Attributes: bp-based frame
.text:00001B04
.text:00001B04 ; public: unsigned int __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::Add(struct NArchive::NTar::CSparseBlock)
.text:00001B04                 public ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z
.text:00001B04 ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z proc near
.text:00001B04                                         ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7C7p
.text:00001B04                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+A80p
.text:00001B04
.text:00001B04 var_14          = dword ptr -14h
.text:00001B04 var_10          = dword ptr -10h
.text:00001B04 var_C           = dword ptr -0Ch
.text:00001B04 var_8           = dword ptr -8
.text:00001B04 var_4           = dword ptr -4
.text:00001B04 arg_0           = dword ptr  8
.text:00001B04 arg_4           = dword ptr  0Ch
.text:00001B04 arg_8           = dword ptr  10h
.text:00001B04 arg_C           = dword ptr  14h
.text:00001B04
.text:00001B04                 push    ebp
.text:00001B05                 mov     ebp, esp
.text:00001B07                 sub     esp, 14h
.text:00001B0A                 mov     eax, 0CCCCCCCCh
.text:00001B0F                 mov     [ebp+var_14], eax
.text:00001B12                 mov     [ebp+var_10], eax
.text:00001B15                 mov     [ebp+var_C], eax
.text:00001B18                 mov     [ebp+var_8], eax
.text:00001B1B                 mov     [ebp+var_4], eax
.text:00001B1E                 mov     [ebp+var_4], ecx
.text:00001B21                 mov     ecx, [ebp+var_4]
.text:00001B24                 call    ?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)
.text:00001B29                 mov     eax, [ebp+var_4]
.text:00001B2C                 mov     ecx, [eax+4]
.text:00001B2F                 shl     ecx, 4
.text:00001B32                 mov     edx, [ebp+var_4]
.text:00001B35                 mov     eax, [edx]
.text:00001B37                 add     eax, ecx
.text:00001B39                 mov     ecx, [ebp+arg_0]
.text:00001B3C                 mov     [eax], ecx
.text:00001B3E                 mov     edx, [ebp+arg_4]
.text:00001B41                 mov     [eax+4], edx
.text:00001B44                 mov     ecx, [ebp+arg_8]
.text:00001B47                 mov     [eax+8], ecx
.text:00001B4A                 mov     edx, [ebp+arg_C]
.text:00001B4D                 mov     [eax+0Ch], edx
.text:00001B50                 mov     eax, [ebp+var_4]
.text:00001B53                 mov     ecx, [eax+4]
.text:00001B56                 mov     [ebp+var_14], ecx
.text:00001B59                 mov     edx, [ebp+var_4]
.text:00001B5C                 mov     eax, [edx+4]
.text:00001B5F                 add     eax, 1
.text:00001B62                 mov     ecx, [ebp+var_4]
.text:00001B65                 mov     [ecx+4], eax
.text:00001B68                 mov     eax, [ebp+var_14]
.text:00001B6B                 push    edx
.text:00001B6C                 mov     ecx, ebp
.text:00001B6E                 push    eax
.text:00001B6F                 lea     edx, $LN5_1
.text:00001B75                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001B7A                 pop     eax
.text:00001B7B                 pop     edx
.text:00001B7C                 add     esp, 14h
.text:00001B7F                 cmp     ebp, esp
.text:00001B81                 call    __RTC_CheckEsp
.text:00001B86                 mov     esp, ebp
.text:00001B88                 pop     ebp
.text:00001B89                 retn    10h
.text:00001B89 ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z endp
.text:00001B89
.text:00001B89 ; ---------------------------------------------------------------------------
.text:00001B8C $LN5_1          dd 1                    ; DATA XREF: CRecordVector<NArchive::NTar::CSparseBlock>::Add(NArchive::NTar::CSparseBlock)+6Bo
.text:00001B90                 dd offset $LN4_0
.text:00001B94 $LN4_0          dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00001B90o
.text:00001B9C                 dd offset $LN3_0        ; "_$ArrayPad"
.text:00001BA0 $LN3_0          db '_$ArrayPad',0       ; DATA XREF: .text:00001B9Co
.text:00001BAB                 align 4
.text:00001BAB _text           ends
.text:00001BAB
.text:00001BAC ; ===========================================================================
.text:00001BAC
.text:00001BAC ; Segment type: Pure code
.text:00001BAC ; Segment permissions: Read/Execute
.text:00001BAC _text           segment para public 'CODE' use32
.text:00001BAC                 assume cs:_text
.text:00001BAC                 ;org 1BACh
.text:00001BAC ; COMDAT (pick any)
.text:00001BAC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00001BAC
.text:00001BAC ; =============== S U B R O U T I N E =======================================
.text:00001BAC
.text:00001BAC ; Attributes: bp-based frame
.text:00001BAC
.text:00001BAC ; private: void __thiscall CRecordVector<struct NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)
.text:00001BAC                 public ?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ
.text:00001BAC ?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ proc near
.text:00001BAC                                         ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::Add(NArchive::NTar::CSparseBlock)+20p
.text:00001BAC
.text:00001BAC var_14          = dword ptr -14h
.text:00001BAC var_10          = dword ptr -10h
.text:00001BAC Dst             = dword ptr -0Ch
.text:00001BAC var_8           = dword ptr -8
.text:00001BAC var_4           = dword ptr -4
.text:00001BAC
.text:00001BAC                 push    ebp
.text:00001BAD                 mov     ebp, esp
.text:00001BAF                 sub     esp, 14h
.text:00001BB2                 mov     eax, 0CCCCCCCCh
.text:00001BB7                 mov     [ebp+var_14], eax
.text:00001BBA                 mov     [ebp+var_10], eax
.text:00001BBD                 mov     [ebp+Dst], eax
.text:00001BC0                 mov     [ebp+var_8], eax
.text:00001BC3                 mov     [ebp+var_4], eax
.text:00001BC6                 mov     [ebp+var_4], ecx
.text:00001BC9                 mov     eax, [ebp+var_4]
.text:00001BCC                 mov     ecx, [ebp+var_4]
.text:00001BCF                 mov     edx, [eax+4]
.text:00001BD2                 cmp     edx, [ecx+8]
.text:00001BD5                 jnz     loc_1C60
.text:00001BDB                 mov     eax, [ebp+var_4]
.text:00001BDE                 mov     ecx, [eax+8]
.text:00001BE1                 shr     ecx, 2
.text:00001BE4                 mov     edx, [ebp+var_4]
.text:00001BE7                 mov     eax, [edx+8]
.text:00001BEA                 lea     ecx, [eax+ecx+1]
.text:00001BEE                 mov     [ebp+var_8], ecx
.text:00001BF1                 xor     ecx, ecx
.text:00001BF3                 mov     eax, [ebp+var_8]
.text:00001BF6                 mov     edx, 10h
.text:00001BFB                 mul     edx
.text:00001BFD                 seto    cl
.text:00001C00                 neg     ecx
.text:00001C02                 or      ecx, eax
.text:00001C04                 push    ecx             ; unsigned int
.text:00001C05                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001C0A                 add     esp, 4
.text:00001C0D                 mov     [ebp+var_10], eax
.text:00001C10                 mov     eax, [ebp+var_10]
.text:00001C13                 mov     [ebp+Dst], eax
.text:00001C16                 mov     ecx, [ebp+var_4]
.text:00001C19                 cmp     dword ptr [ecx+4], 0
.text:00001C1D                 jz      short loc_1C3B
.text:00001C1F                 mov     edx, [ebp+var_4]
.text:00001C22                 mov     eax, [edx+4]
.text:00001C25                 shl     eax, 4
.text:00001C28                 push    eax             ; Size
.text:00001C29                 mov     ecx, [ebp+var_4]
.text:00001C2C                 mov     edx, [ecx]
.text:00001C2E                 push    edx             ; Src
.text:00001C2F                 mov     eax, [ebp+Dst]
.text:00001C32                 push    eax             ; Dst
.text:00001C33                 call    _memcpy
.text:00001C38                 add     esp, 0Ch
.text:00001C3B
.text:00001C3B loc_1C3B:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)+71j
.text:00001C3B                 mov     ecx, [ebp+var_4]
.text:00001C3E                 mov     edx, [ecx]
.text:00001C40                 mov     [ebp+var_14], edx
.text:00001C43                 mov     eax, [ebp+var_14]
.text:00001C46                 push    eax             ; void *
.text:00001C47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00001C4C                 add     esp, 4
.text:00001C4F                 mov     ecx, [ebp+var_4]
.text:00001C52                 mov     edx, [ebp+Dst]
.text:00001C55                 mov     [ecx], edx
.text:00001C57                 mov     eax, [ebp+var_4]
.text:00001C5A                 mov     ecx, [ebp+var_8]
.text:00001C5D                 mov     [eax+8], ecx
.text:00001C60
.text:00001C60 loc_1C60:                               ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)+29j
.text:00001C60                 add     esp, 14h
.text:00001C63                 cmp     ebp, esp
.text:00001C65                 call    __RTC_CheckEsp
.text:00001C6A                 mov     esp, ebp
.text:00001C6C                 pop     ebp
.text:00001C6D                 retn
.text:00001C6D ?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ endp
.text:00001C6D
.text:00001C6D _text           ends
.text:00001C6D
UNDEF:00001C70 ; ===========================================================================
UNDEF:00001C70
UNDEF:00001C70 ; Segment type: Externs
UNDEF:00001C70 ; UNDEF
UNDEF:00001C70                 extrn __RTC_CheckEsp:near ; CODE XREF: IsArc_Tar(x,x)+E5p
UNDEF:00001C70                                         ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+75p ...
UNDEF:00001C74 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00001C74                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00001C74                                         ; CODE XREF: IsArc_Tar(x,x)+D8p
UNDEF:00001C74                                         ; NArchive::NTar::OctalToNumber32(char const *,uint,uint &)+69p ...
UNDEF:00001C78                 extrn __RTC_Shutdown:near
UNDEF:00001C78                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00001C7C                 extrn __RTC_InitBase:near
UNDEF:00001C7C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00001C80 ; unsigned __int64 __stdcall ConvertOctStringToUInt64(const char *, const char **)
UNDEF:00001C80                 extrn ?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z:near
UNDEF:00001C80                                         ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+66p
UNDEF:00001C84                 extrn ___security_cookie:near
UNDEF:00001C84                                         ; DATA XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+16r
UNDEF:00001C84                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2Ar ...
UNDEF:00001C88 ; __fastcall __security_check_cookie(x)
UNDEF:00001C88                 extrn @__security_check_cookie@4:near
UNDEF:00001C88                                         ; CODE XREF: NArchive::NTar::OctalToNumber(char const *,uint,unsigned __int64 &)+C2p
UNDEF:00001C88                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+BF0p ...
UNDEF:00001C8C                 extrn __allshr:near     ; CODE XREF: NArchive::NTar::ParseInt64(char const *,__int64 &)+48p
UNDEF:00001C8C                                         ; NArchive::NTar::ParseInt64(char const *,__int64 &)+86p
UNDEF:00001C90                 extrn __aullshr:near    ; CODE XREF: NArchive::NTar::ParseSize(char const *,unsigned __int64 &)+49p
UNDEF:00001C94 ; public: class AString & __thiscall AString::operator=(class AString const &)
UNDEF:00001C94                 extrn ??4AString@@QAEAAV0@ABV0@@Z:near
UNDEF:00001C94                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+3EFp
UNDEF:00001C94                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+410p ...
UNDEF:00001C98 ; __int32 __stdcall ReadStream(struct ISequentialInStream *, void *, unsigned int *)
UNDEF:00001C98                 extrn ?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:near
UNDEF:00001C98                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2ADp
UNDEF:00001C98                                         ; NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+7Cp ...
UNDEF:00001C9C ; char *NArchive::NTar::NFileHeader::kLongLink2
UNDEF:00001C9C                 extrn ?kLongLink2@NFileHeader@NTar@NArchive@@3PBDB:near
UNDEF:00001C9C                                         ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+1F2r
UNDEF:00001CA0 ; char *NArchive::NTar::NFileHeader::kLongLink
UNDEF:00001CA0                 extrn ?kLongLink@NFileHeader@NTar@NArchive@@3PBDB:near
UNDEF:00001CA0                                         ; DATA XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &):loc_6EBr
UNDEF:00001CA4 ; public: __thiscall AString::AString(void)
UNDEF:00001CA4                 extrn ??0AString@@QAE@XZ:near
UNDEF:00001CA4                                         ; CODE XREF: NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+53p
UNDEF:00001CA4                                         ; NArchive::NTar::ReadItem(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+62p ...
UNDEF:00001CA8                 extrn ___CxxFrameHandler3:near
UNDEF:00001CA8                                         ; CODE XREF: __ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z+19j
UNDEF:00001CA8                                         ; __ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z+23j
UNDEF:00001CAC ; void __cdecl operator delete(void *)
UNDEF:00001CAC                 extrn ??3@YAXPAX@Z:near ; CODE XREF: AString::~AString(void)+23p
UNDEF:00001CAC                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)+9Bp
UNDEF:00001CB0 ; void __thiscall AString::ReAlloc2(AString *__hidden this, unsigned int)
UNDEF:00001CB0                 extrn ?ReAlloc2@AString@@AAEXI@Z:near
UNDEF:00001CB0                                         ; CODE XREF: AString::GetBuf(uint)+20p
UNDEF:00001CB4 ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:00001CB4                 extrn _strcmp:near      ; CODE XREF: operator!=(AString const &,char const *)+10p
UNDEF:00001CB8 ; class AString __stdcall operator+(class AString const &, class AString const &)
UNDEF:00001CB8                 extrn ??H@YG?AVAString@@ABV0@0@Z:near
UNDEF:00001CB8                                         ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+537p
UNDEF:00001CBC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00001CBC                 extrn _memcpy:near      ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+383p
UNDEF:00001CBC                                         ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)+87p
UNDEF:00001CC0 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00001CC0                 extrn _memset:near      ; CODE XREF: NArchive::NTar::GetNextItemReal(ISequentialInStream *,bool &,NArchive::NTar::CItemEx &,NArchive::NTar::EErrorType &)+2D6p
UNDEF:00001CC4 ; private: __thiscall AString::AString(class AString const &, char)
UNDEF:00001CC4                 extrn ??0AString@@AAE@ABV0@D@Z:near
UNDEF:00001CC4                                         ; CODE XREF: operator+(AString const &,char)+1Ep
UNDEF:00001CC8 ; char const * const NArchive::NTar::NFileHeader::NMagic::kUsTar_00
UNDEF:00001CC8                 extrn ?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB:near
UNDEF:00001CC8                                         ; DATA XREF: NArchive::NTar::CItem::IsUstarMagic(void)+3Cr
UNDEF:00001CCC ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00001CCC                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00001CCC                                         ; CODE XREF: NArchive::NTar::ReadString(char const *,uint,AString &)+4Fp
UNDEF:00001CD0 ; void *__cdecl operator new(unsigned int)
UNDEF:00001CD0                 extrn ??2@YAPAXI@Z:near ; CODE XREF: CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition(void)+59p
UNDEF:00001CD0
UNDEF:00001CD0
UNDEF:00001CD0                 end