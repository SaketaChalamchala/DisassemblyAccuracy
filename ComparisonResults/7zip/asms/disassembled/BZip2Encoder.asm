.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : A657ADBC6DA54432C95C9660BAC11BF3
.text:00000000 ; Input CRC32 : 2459AF70
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\BZip2Encoder.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; bool __thiscall NCompress::NBZip2::CThreadInfo::Alloc(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:00000000                 public ?Alloc@CThreadInfo@NBZip2@NCompress@@QAE_NXZ
.text:00000000 ?Alloc@CThreadInfo@NBZip2@NCompress@@QAE_NXZ proc near
.text:00000000                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+FFp
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     eax, [ebp+var_4]
.text:00000011                 cmp     dword ptr [eax+0Ch], 0
.text:00000015                 jnz     short loc_34
.text:00000017                 push    71DD00h
.text:0000001C                 call    _BigAlloc@4     ; BigAlloc(x)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 mov     [ecx+0Ch], eax
.text:00000027                 mov     edx, [ebp+var_4]
.text:0000002A                 cmp     dword ptr [edx+0Ch], 0
.text:0000002E                 jnz     short loc_34
.text:00000030                 xor     al, al
.text:00000032                 jmp     short loc_7C
.text:00000034 ; ---------------------------------------------------------------------------
.text:00000034
.text:00000034 loc_34:                                 ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+15j
.text:00000034                                         ; NCompress::NBZip2::CThreadInfo::Alloc(void)+2Ej
.text:00000034                 mov     eax, [ebp+var_4]
.text:00000037                 cmp     dword ptr [eax], 0
.text:0000003A                 jnz     short loc_7A
.text:0000003C
.text:0000003C loc_3C:                                 ; DATA XREF: .xdata$x:00002FA4o
.text:0000003C                                         ; .xdata$x:__catchsym$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$3o ...
.text:0000003C                 push    4659B0h
.text:00000041                 call    _MidAlloc@4     ; MidAlloc(x)
.text:00000046                 mov     ecx, [ebp+var_4]
.text:00000049                 mov     [ecx], eax
.text:0000004B                 mov     edx, [ebp+var_4]
.text:0000004E                 cmp     dword ptr [edx], 0
.text:00000051                 jnz     short loc_57
.text:00000053                 xor     al, al
.text:00000055                 jmp     short loc_7C
.text:00000057 ; ---------------------------------------------------------------------------
.text:00000057
.text:00000057 loc_57:                                 ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+51j
.text:00000057                 mov     eax, [ebp+var_4]
.text:0000005A                 mov     ecx, [eax]
.text:0000005C                 add     ecx, 0DBBA0h
.text:00000062                 mov     edx, [ebp+var_4]
.text:00000065                 mov     [edx+4], ecx
.text:00000068                 mov     eax, [ebp+var_4]
.text:0000006B                 mov     ecx, [eax+4]
.text:0000006E                 add     ecx, 1B7742h
.text:00000074                 mov     edx, [ebp+var_4]
.text:00000077                 mov     [edx+8], ecx
.text:0000007A
.text:0000007A loc_7A:                                 ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+3Aj
.text:0000007A                 mov     al, 1
.text:0000007C
.text:0000007C loc_7C:                                 ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+32j
.text:0000007C                                         ; NCompress::NBZip2::CThreadInfo::Alloc(void)+55j
.text:0000007C                 add     esp, 4
.text:0000007F                 cmp     ebp, esp
.text:00000081                 call    __RTC_CheckEsp
.text:00000086                 mov     esp, ebp
.text:00000088                 pop     ebp
.text:00000089                 retn
.text:00000089 ?Alloc@CThreadInfo@NBZip2@NCompress@@QAE_NXZ endp
.text:00000089
.text:00000089 ; ---------------------------------------------------------------------------
.text:0000008A                 align 10h
.text:00000090
.text:00000090 ; =============== S U B R O U T I N E =======================================
.text:00000090
.text:00000090 ; Attributes: bp-based frame
.text:00000090
.text:00000090 ; void __thiscall NCompress::NBZip2::CThreadInfo::Free(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:00000090                 public ?Free@CThreadInfo@NBZip2@NCompress@@QAEXXZ
.text:00000090 ?Free@CThreadInfo@NBZip2@NCompress@@QAEXXZ proc near
.text:00000090                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+9Dp
.text:00000090                                         ; NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)+37p
.text:00000090
.text:00000090 var_4           = dword ptr -4
.text:00000090
.text:00000090                 push    ebp
.text:00000091                 mov     ebp, esp
.text:00000093                 push    ecx
.text:00000094                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000009B                 mov     [ebp+var_4], ecx
.text:0000009E                 mov     eax, [ebp+var_4]
.text:000000A1                 mov     ecx, [eax+0Ch]
.text:000000A4                 push    ecx
.text:000000A5                 call    _BigFree@4      ; BigFree(x)
.text:000000AA                 mov     edx, [ebp+var_4]
.text:000000AD                 mov     dword ptr [edx+0Ch], 0
.text:000000B4                 mov     eax, [ebp+var_4]
.text:000000B7                 mov     ecx, [eax]
.text:000000B9                 push    ecx
.text:000000BA                 call    _MidFree@4      ; MidFree(x)
.text:000000BF                 mov     edx, [ebp+var_4]
.text:000000C2                 mov     dword ptr [edx], 0
.text:000000C8                 add     esp, 4
.text:000000CB                 cmp     ebp, esp
.text:000000CD                 call    __RTC_CheckEsp
.text:000000D2                 mov     esp, ebp
.text:000000D4                 pop     ebp
.text:000000D5                 retn
.text:000000D5 ?Free@CThreadInfo@NBZip2@NCompress@@QAEXXZ endp
.text:000000D5
.text:000000D5 ; ---------------------------------------------------------------------------
.text:000000D6                 align 10h
.text:000000E0
.text:000000E0 ; =============== S U B R O U T I N E =======================================
.text:000000E0
.text:000000E0 ; Attributes: bp-based frame
.text:000000E0
.text:000000E0 ; __int32 __thiscall NCompress::NBZip2::CThreadInfo::Create(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:000000E0                 public ?Create@CThreadInfo@NBZip2@NCompress@@QAEJXZ
.text:000000E0 ?Create@CThreadInfo@NBZip2@NCompress@@QAEJXZ proc near
.text:000000E0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+203p
.text:000000E0
.text:000000E0 var_14          = dword ptr -14h
.text:000000E0 var_10          = dword ptr -10h
.text:000000E0 var_C           = dword ptr -0Ch
.text:000000E0 var_8           = dword ptr -8
.text:000000E0 var_4           = dword ptr -4
.text:000000E0
.text:000000E0                 push    ebp
.text:000000E1                 mov     ebp, esp
.text:000000E3                 sub     esp, 14h
.text:000000E6                 mov     eax, 0CCCCCCCCh
.text:000000EB                 mov     [ebp+var_14], eax
.text:000000EE                 mov     [ebp+var_10], eax
.text:000000F1                 mov     [ebp+var_C], eax
.text:000000F4                 mov     [ebp+var_8], eax
.text:000000F7                 mov     [ebp+var_4], eax
.text:000000FA                 mov     [ebp+var_4], ecx
.text:000000FD                 mov     ecx, [ebp+var_4]
.text:00000100                 add     ecx, 8CE8h      ; this
.text:00000106                 call    ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::Create(void)
.text:0000010B                 mov     [ebp+var_8], eax
.text:0000010E                 cmp     [ebp+var_8], 0
.text:00000112                 jz      short loc_119
.text:00000114                 mov     eax, [ebp+var_8]
.text:00000117                 jmp     short loc_178
.text:00000119 ; ---------------------------------------------------------------------------
.text:00000119
.text:00000119 loc_119:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+32j
.text:00000119                 mov     ecx, [ebp+var_4]
.text:0000011C                 add     ecx, 8CECh      ; this
.text:00000122                 call    ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::Create(void)
.text:00000127                 mov     [ebp+var_C], eax
.text:0000012A                 cmp     [ebp+var_C], 0
.text:0000012E                 jz      short loc_135
.text:00000130                 mov     eax, [ebp+var_C]
.text:00000133                 jmp     short loc_178
.text:00000135 ; ---------------------------------------------------------------------------
.text:00000135
.text:00000135 loc_135:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+4Ej
.text:00000135                 mov     ecx, [ebp+var_4]
.text:00000138                 add     ecx, 8CF0h      ; this
.text:0000013E                 call    ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CAutoResetEvent::Create(void)
.text:00000143                 mov     [ebp+var_10], eax
.text:00000146                 cmp     [ebp+var_10], 0
.text:0000014A                 jz      short loc_151
.text:0000014C                 mov     eax, [ebp+var_10]
.text:0000014F                 jmp     short loc_178
.text:00000151 ; ---------------------------------------------------------------------------
.text:00000151
.text:00000151 loc_151:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+6Aj
.text:00000151                 mov     eax, [ebp+var_4]
.text:00000154                 push    eax             ; void *
.text:00000155                 push    offset ?MFThread@NBZip2@NCompress@@YGIPAX@Z ; unsigned int (__stdcall *)(void *)
.text:0000015A                 mov     ecx, [ebp+var_4]
.text:0000015D                 add     ecx, 8CE4h      ; this
.text:00000163                 call    ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create(uint (*)(void *),void *)
.text:00000168                 mov     [ebp+var_14], eax
.text:0000016B                 cmp     [ebp+var_14], 0
.text:0000016F                 jz      short loc_176
.text:00000171                 mov     eax, [ebp+var_14]
.text:00000174                 jmp     short loc_178
.text:00000176 ; ---------------------------------------------------------------------------
.text:00000176
.text:00000176 loc_176:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+8Fj
.text:00000176                 xor     eax, eax
.text:00000178
.text:00000178 loc_178:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+37j
.text:00000178                                         ; NCompress::NBZip2::CThreadInfo::Create(void)+53j ...
.text:00000178                 add     esp, 14h
.text:0000017B                 cmp     ebp, esp
.text:0000017D                 call    __RTC_CheckEsp
.text:00000182                 mov     esp, ebp
.text:00000184                 pop     ebp
.text:00000185                 retn
.text:00000185 ?Create@CThreadInfo@NBZip2@NCompress@@QAEJXZ endp
.text:00000185
.text:00000185 ; ---------------------------------------------------------------------------
.text:00000186                 align 10h
.text:00000190
.text:00000190 ; =============== S U B R O U T I N E =======================================
.text:00000190
.text:00000190 ; Attributes: bp-based frame
.text:00000190
.text:00000190 ; int __stdcall NCompress::NBZip2::MFThread(NCompress::NBZip2::CThreadInfo *)
.text:00000190 ?MFThread@NBZip2@NCompress@@YGIPAX@Z proc near
.text:00000190                                         ; DATA XREF: NCompress::NBZip2::CThreadInfo::Create(void)+75o
.text:00000190
.text:00000190 arg_0           = dword ptr  8
.text:00000190
.text:00000190                 push    ebp
.text:00000191                 mov     ebp, esp
.text:00000193                 mov     ecx, [ebp+arg_0] ; this
.text:00000196                 call    ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ ; NCompress::NBZip2::CThreadInfo::ThreadFunc(void)
.text:0000019B                 cmp     ebp, esp
.text:0000019D                 call    __RTC_CheckEsp
.text:000001A2                 pop     ebp
.text:000001A3                 retn    4
.text:000001A3 ?MFThread@NBZip2@NCompress@@YGIPAX@Z endp
.text:000001A3
.text:000001A3 ; ---------------------------------------------------------------------------
.text:000001A6                 align 10h
.text:000001B0
.text:000001B0 ; =============== S U B R O U T I N E =======================================
.text:000001B0
.text:000001B0 ; Attributes: bp-based frame
.text:000001B0
.text:000001B0 ; void __thiscall NCompress::NBZip2::CThreadInfo::FinishStream(NCompress::NBZip2::CThreadInfo *this, bool)
.text:000001B0                 public ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z
.text:000001B0 ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z proc near
.text:000001B0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+B0p
.text:000001B0                                         ; NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+183p ...
.text:000001B0
.text:000001B0 var_4           = dword ptr -4
.text:000001B0 arg_0           = byte ptr  8
.text:000001B0
.text:000001B0                 push    ebp
.text:000001B1                 mov     ebp, esp
.text:000001B3                 push    ecx
.text:000001B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000001BB                 mov     [ebp+var_4], ecx
.text:000001BE                 mov     eax, [ebp+var_4]
.text:000001C1                 mov     ecx, [eax+8CE0h]
.text:000001C7                 mov     byte ptr [ecx+1A9h], 1
.text:000001CE                 mov     ecx, [ebp+var_4]
.text:000001D1                 add     ecx, 8CE8h      ; this
.text:000001D7                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000001DC                 movzx   edx, [ebp+arg_0]
.text:000001E0                 test    edx, edx
.text:000001E2                 jz      short loc_1F8
.text:000001E4                 mov     eax, [ebp+var_4]
.text:000001E7                 mov     ecx, [eax+8CE0h]
.text:000001ED                 add     ecx, 184h       ; this
.text:000001F3                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000001F8
.text:000001F8 loc_1F8:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::FinishStream(bool)+32j
.text:000001F8                 mov     ecx, [ebp+var_4]
.text:000001FB                 mov     ecx, [ecx+8CE0h]
.text:00000201                 add     ecx, 1ACh       ; this
.text:00000207                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:0000020C                 mov     ecx, [ebp+var_4]
.text:0000020F                 add     ecx, 8CECh      ; this
.text:00000215                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:0000021A                 add     esp, 4
.text:0000021D                 cmp     ebp, esp
.text:0000021F                 call    __RTC_CheckEsp
.text:00000224                 mov     esp, ebp
.text:00000226                 pop     ebp
.text:00000227                 retn    4
.text:00000227 ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z endp
.text:00000227
.text:00000227 ; ---------------------------------------------------------------------------
.text:0000022A                 align 10h
.text:00000230
.text:00000230 ; =============== S U B R O U T I N E =======================================
.text:00000230
.text:00000230 ; Attributes: bp-based frame
.text:00000230
.text:00000230 ; unsigned __int32 __thiscall NCompress::NBZip2::CThreadInfo::ThreadFunc(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:00000230                 public ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.text:00000230 ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ proc near
.text:00000230                                         ; CODE XREF: NCompress::NBZip2::MFThread(void *)+6p
.text:00000230
.text:00000230 var_4C          = dword ptr -4Ch
.text:00000230 var_48          = dword ptr -48h
.text:00000230 var_44          = dword ptr -44h
.text:00000230 var_40          = dword ptr -40h
.text:00000230 var_3C          = dword ptr -3Ch
.text:00000230 var_20          = dword ptr -20h
.text:00000230 var_19          = byte ptr -19h
.text:00000230 var_18          = dword ptr -18h
.text:00000230 var_14          = dword ptr -14h
.text:00000230 var_10          = dword ptr -10h
.text:00000230 var_C           = dword ptr -0Ch
.text:00000230 var_4           = dword ptr -4
.text:00000230
.text:00000230 ; FUNCTION CHUNK AT .text:00000431 SIZE 00000063 BYTES
.text:00000230
.text:00000230                 push    ebp
.text:00000231                 mov     ebp, esp
.text:00000233                 push    0FFFFFFFFh
.text:00000235                 push    offset __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.text:0000023A                 mov     eax, large fs:0
.text:00000240                 push    eax
.text:00000241                 push    ecx
.text:00000242                 sub     esp, 3Ch
.text:00000245                 push    ebx
.text:00000246                 push    esi
.text:00000247                 push    edi
.text:00000248                 push    ecx
.text:00000249                 lea     edi, [ebp+var_4C]
.text:0000024C                 mov     ecx, 0Fh
.text:00000251                 mov     eax, 0CCCCCCCCh
.text:00000256                 rep stosd
.text:00000258                 pop     ecx
.text:00000259                 mov     eax, dword ptr ds:___security_cookie
.text:0000025E                 xor     eax, ebp
.text:00000260                 push    eax
.text:00000261                 lea     eax, [ebp+var_C]
.text:00000264                 mov     large fs:0, eax
.text:0000026A                 mov     [ebp+var_10], esp
.text:0000026D                 mov     [ebp+var_14], ecx
.text:00000270
.text:00000270 loc_270:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+B5j
.text:00000270                                         ; NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+18Fj ...
.text:00000270                 mov     eax, [ebp+var_14]
.text:00000273                 mov     ecx, [eax+8CE0h]
.text:00000279                 add     ecx, 180h       ; this
.text:0000027F                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00000284                 mov     ecx, [ebp+var_14]
.text:00000287                 mov     ecx, [ecx+8CE0h]
.text:0000028D                 add     ecx, 184h       ; this
.text:00000293                 call    ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter(void)
.text:00000298                 mov     edx, [ebp+var_14]
.text:0000029B                 mov     eax, [edx+8CE0h]
.text:000002A1                 movzx   ecx, byte ptr [eax+1A8h]
.text:000002A8                 test    ecx, ecx
.text:000002AA                 jz      short loc_2C7
.text:000002AC                 mov     edx, [ebp+var_14]
.text:000002AF                 mov     ecx, [edx+8CE0h]
.text:000002B5                 add     ecx, 184h       ; this
.text:000002BB                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000002C0                 xor     eax, eax
.text:000002C2                 jmp     loc_467
.text:000002C7 ; ---------------------------------------------------------------------------
.text:000002C7
.text:000002C7 loc_2C7:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+7Aj
.text:000002C7                 mov     eax, [ebp+var_14]
.text:000002CA                 mov     ecx, [eax+8CE0h]
.text:000002D0                 movzx   edx, byte ptr [ecx+1A9h]
.text:000002D7                 test    edx, edx
.text:000002D9                 jz      short loc_2E7
.text:000002DB                 push    1               ; bool
.text:000002DD                 mov     ecx, [ebp+var_14] ; this
.text:000002E0                 call    ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z ; NCompress::NBZip2::CThreadInfo::FinishStream(bool)
.text:000002E5                 jmp     short loc_270
.text:000002E7 ; ---------------------------------------------------------------------------
.text:000002E7
.text:000002E7 loc_2E7:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+A9j
.text:000002E7                 mov     [ebp+var_18], 0
.text:000002EE                 mov     [ebp+var_19], 1
.text:000002F2                 mov     [ebp+var_4], 0
.text:000002F9                 mov     eax, [ebp+var_14]
.text:000002FC                 mov     ecx, [eax]
.text:000002FE                 push    ecx             ; unsigned __int8 *
.text:000002FF                 mov     edx, [ebp+var_14]
.text:00000302                 mov     ecx, [edx+8CE0h] ; this
.text:00000308                 call    ?ReadRleBlock@CEncoder@NBZip2@NCompress@@QAEIPAE@Z ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)
.text:0000030D                 mov     [ebp+var_3C], eax
.text:00000310                 mov     eax, [ebp+var_3C]
.text:00000313                 mov     [ebp+var_20], eax
.text:00000316                 mov     ecx, [ebp+var_14]
.text:00000319                 mov     ecx, [ecx+8CE0h]
.text:0000031F                 add     ecx, 18h        ; this
.text:00000322                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00000327                 mov     [ebp+var_44], eax
.text:0000032A                 mov     [ebp+var_40], edx
.text:0000032D                 mov     edx, [ebp+var_14]
.text:00000330                 mov     eax, [ebp+var_44]
.text:00000333                 mov     [edx+8CF8h], eax
.text:00000339                 mov     ecx, [ebp+var_40]
.text:0000033C                 mov     [edx+8CFCh], ecx
.text:00000342                 mov     edx, [ebp+var_14]
.text:00000345                 mov     eax, [edx+8CE0h]
.text:0000034B                 mov     ecx, [ebp+var_14]
.text:0000034E                 mov     edx, [eax+1A4h]
.text:00000354                 mov     [ecx+8CD8h], edx
.text:0000035A                 mov     eax, [ebp+var_14]
.text:0000035D                 mov     ecx, [eax+8CE0h]
.text:00000363                 mov     edx, [ecx+1A4h]
.text:00000369                 add     edx, 1
.text:0000036C                 mov     [ebp+var_48], edx
.text:0000036F                 mov     eax, [ebp+var_14]
.text:00000372                 mov     ecx, [eax+8CE0h]
.text:00000378                 mov     edx, [ebp+var_48]
.text:0000037B                 mov     [ecx+1A4h], edx
.text:00000381                 mov     eax, [ebp+var_14]
.text:00000384                 mov     ecx, [eax+8CE0h]
.text:0000038A                 mov     edx, [ebp+var_48]
.text:0000038D                 cmp     edx, [ecx+19Ch]
.text:00000393                 jnz     short loc_3A8
.text:00000395                 mov     eax, [ebp+var_14]
.text:00000398                 mov     ecx, [eax+8CE0h]
.text:0000039E                 mov     dword ptr [ecx+1A4h], 0
.text:000003A8
.text:000003A8 loc_3A8:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+163j
.text:000003A8                 cmp     [ebp+var_20], 0
.text:000003AC                 jnz     short loc_3C4
.text:000003AE                 push    1               ; bool
.text:000003B0                 mov     ecx, [ebp+var_14] ; this
.text:000003B3                 call    ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z ; NCompress::NBZip2::CThreadInfo::FinishStream(bool)
.text:000003B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000003BF                 jmp     loc_270
.text:000003C4 ; ---------------------------------------------------------------------------
.text:000003C4
.text:000003C4 loc_3C4:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+17Cj
.text:000003C4                 mov     edx, [ebp+var_14]
.text:000003C7                 mov     ecx, [edx+8CE0h]
.text:000003CD                 add     ecx, 184h       ; this
.text:000003D3                 call    ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave(void)
.text:000003D8                 mov     [ebp+var_19], 0
.text:000003DC                 mov     eax, [ebp+var_20]
.text:000003DF                 push    eax             ; unsigned int
.text:000003E0                 mov     ecx, [ebp+var_14] ; this
.text:000003E3                 call    ?EncodeBlock3@CThreadInfo@NBZip2@NCompress@@QAEJI@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)
.text:000003E8                 mov     [ebp+var_4C], eax
.text:000003EB                 mov     ecx, [ebp+var_4C]
.text:000003EE                 mov     [ebp+var_18], ecx
.text:000003F1                 jmp     short loc_431
.text:000003F1 ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ endp
.text:000003F1
.text:000003F3
.text:000003F3 ; =============== S U B R O U T I N E =======================================
.text:000003F3
.text:000003F3
.text:000003F3 __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$0 proc near
.text:000003F3                                         ; DATA XREF: .xdata$x:00002F90o
.text:000003F3                 mov     edx, [ebp-28h]
.text:000003F6                 mov     eax, [edx]
.text:000003F8                 mov     [ebp-18h], eax
.text:000003FB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000402                 mov     eax, offset __tryend$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$3
.text:00000407                 retn
.text:00000407 __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$0 endp
.text:00000407
.text:00000408
.text:00000408 ; =============== S U B R O U T I N E =======================================
.text:00000408
.text:00000408
.text:00000408 __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$1 proc near
.text:00000408                                         ; DATA XREF: .xdata$x:00002FA0o
.text:00000408                 mov     ecx, [ebp-34h]
.text:0000040B                 mov     edx, [ecx]
.text:0000040D                 mov     [ebp-18h], edx
.text:00000410                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000417                 mov     eax, offset __tryend$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$3
.text:0000041C                 retn
.text:0000041C __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$1 endp
.text:0000041C
.text:0000041D
.text:0000041D ; =============== S U B R O U T I N E =======================================
.text:0000041D
.text:0000041D
.text:0000041D __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$2 proc near
.text:0000041D                                         ; DATA XREF: .xdata$x:00002FB0o
.text:0000041D                 mov     dword ptr [ebp-18h], 80004005h
.text:00000424                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000042B                 mov     eax, offset __tryend$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$3
.text:00000430                 retn
.text:00000430 __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$2 endp
.text:00000430
.text:00000431 ; ---------------------------------------------------------------------------
.text:00000431 ; START OF FUNCTION CHUNK FOR ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.text:00000431
.text:00000431 loc_431:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+1C1j
.text:00000431                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000438
.text:00000438 __tryend$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$3:
.text:00000438                                         ; DATA XREF: __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$0+Fo
.text:00000438                                         ; __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$1+Fo ...
.text:00000438                 cmp     [ebp+var_18], 0
.text:0000043C                 jz      short loc_462
.text:0000043E                 mov     eax, [ebp+var_14]
.text:00000441                 mov     ecx, [eax+8CE0h]
.text:00000447                 mov     edx, [ebp+var_18]
.text:0000044A                 mov     [ecx+1B0h], edx
.text:00000450                 movzx   eax, [ebp+var_19]
.text:00000454                 push    eax             ; bool
.text:00000455                 mov     ecx, [ebp+var_14] ; this
.text:00000458                 call    ?FinishStream@CThreadInfo@NBZip2@NCompress@@QAEX_N@Z ; NCompress::NBZip2::CThreadInfo::FinishStream(bool)
.text:0000045D                 jmp     loc_270
.text:00000462 ; ---------------------------------------------------------------------------
.text:00000462
.text:00000462 loc_462:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+20Cj
.text:00000462                 jmp     loc_270
.text:00000467 ; ---------------------------------------------------------------------------
.text:00000467
.text:00000467 loc_467:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+92j
.text:00000467                 push    edx
.text:00000468                 mov     ecx, ebp
.text:0000046A                 push    eax
.text:0000046B                 lea     edx, $LN29
.text:00000471                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000476                 pop     eax
.text:00000477                 pop     edx
.text:00000478                 mov     ecx, [ebp+var_C]
.text:0000047B                 mov     large fs:0, ecx
.text:00000482                 pop     ecx
.text:00000483                 pop     edi
.text:00000484                 pop     esi
.text:00000485                 pop     ebx
.text:00000486                 add     esp, 4Ch
.text:00000489                 cmp     ebp, esp
.text:0000048B                 call    __RTC_CheckEsp
.text:00000490                 mov     esp, ebp
.text:00000492                 pop     ebp
.text:00000493                 retn
.text:00000493 ; END OF FUNCTION CHUNK FOR ?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.text:00000493 ; ---------------------------------------------------------------------------
.text:00000494 $LN29           dd 2                    ; DATA XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+23Bo
.text:00000498                 dd offset $LN28
.text:0000049C $LN28           dd 0FFFFFFD8h, 4        ; DATA XREF: .text:00000498o
.text:000004A4                 dd offset $LN25
.text:000004A8                 db 0CCh
.text:000004A9                 db 3 dup(0FFh)
.text:000004AC                 dd 4
.text:000004B0                 dd offset $LN26
.text:000004B4 $LN26           db 65h, 0               ; DATA XREF: .text:000004B0o
.text:000004B6 $LN25           dw 65h                  ; DATA XREF: .text:000004A4o
.text:000004B8                 align 10h
.text:000004C0
.text:000004C0 ; =============== S U B R O U T I N E =======================================
.text:000004C0
.text:000004C0 ; Attributes: bp-based frame
.text:000004C0
.text:000004C0 ; void __thiscall NCompress::NBZip2::CEncProps::Normalize(NCompress::NBZip2::CEncProps *this, int)
.text:000004C0                 public ?Normalize@CEncProps@NBZip2@NCompress@@QAEXH@Z
.text:000004C0 ?Normalize@CEncProps@NBZip2@NCompress@@QAEXH@Z proc near
.text:000004C0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+F4p
.text:000004C0                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+FDp
.text:000004C0
.text:000004C0 var_10          = dword ptr -10h
.text:000004C0 var_C           = dword ptr -0Ch
.text:000004C0 var_8           = dword ptr -8
.text:000004C0 var_4           = dword ptr -4
.text:000004C0 arg_0           = dword ptr  8
.text:000004C0
.text:000004C0                 push    ebp
.text:000004C1                 mov     ebp, esp
.text:000004C3                 sub     esp, 10h
.text:000004C6                 mov     eax, 0CCCCCCCCh
.text:000004CB                 mov     [ebp+var_10], eax
.text:000004CE                 mov     [ebp+var_C], eax
.text:000004D1                 mov     [ebp+var_8], eax
.text:000004D4                 mov     [ebp+var_4], eax
.text:000004D7                 mov     [ebp+var_4], ecx
.text:000004DA                 cmp     [ebp+arg_0], 0
.text:000004DE                 jge     short loc_4E7
.text:000004E0                 mov     [ebp+arg_0], 5
.text:000004E7
.text:000004E7 loc_4E7:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+1Ej
.text:000004E7                 cmp     [ebp+arg_0], 9
.text:000004EB                 jle     short loc_4F4
.text:000004ED                 mov     [ebp+arg_0], 9
.text:000004F4
.text:000004F4 loc_4F4:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+2Bj
.text:000004F4                 mov     eax, [ebp+var_4]
.text:000004F7                 cmp     dword ptr [eax+4], 0FFFFFFFFh
.text:000004FB                 jnz     short loc_524
.text:000004FD                 cmp     [ebp+arg_0], 9
.text:00000501                 jl      short loc_50C
.text:00000503                 mov     [ebp+var_8], 7
.text:0000050A                 jmp     short loc_51B
.text:0000050C ; ---------------------------------------------------------------------------
.text:0000050C
.text:0000050C loc_50C:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+41j
.text:0000050C                 xor     ecx, ecx
.text:0000050E                 cmp     [ebp+arg_0], 7
.text:00000512                 setnl   cl
.text:00000515                 add     ecx, 1
.text:00000518                 mov     [ebp+var_8], ecx
.text:0000051B
.text:0000051B loc_51B:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+4Aj
.text:0000051B                 mov     edx, [ebp+var_4]
.text:0000051E                 mov     eax, [ebp+var_8]
.text:00000521                 mov     [edx+4], eax
.text:00000524
.text:00000524 loc_524:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+3Bj
.text:00000524                 mov     ecx, [ebp+var_4]
.text:00000527                 cmp     dword ptr [ecx+4], 1
.text:0000052B                 jnb     short loc_537
.text:0000052D                 mov     edx, [ebp+var_4]
.text:00000530                 mov     dword ptr [edx+4], 1
.text:00000537
.text:00000537 loc_537:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+6Bj
.text:00000537                 mov     eax, [ebp+var_4]
.text:0000053A                 cmp     dword ptr [eax+4], 0Ah
.text:0000053E                 jbe     short loc_54A
.text:00000540                 mov     ecx, [ebp+var_4]
.text:00000543                 mov     dword ptr [ecx+4], 0Ah
.text:0000054A
.text:0000054A loc_54A:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+7Ej
.text:0000054A                 mov     edx, [ebp+var_4]
.text:0000054D                 cmp     dword ptr [edx], 0FFFFFFFFh
.text:00000550                 jnz     short loc_588
.text:00000552                 cmp     [ebp+arg_0], 5
.text:00000556                 jl      short loc_561
.text:00000558                 mov     [ebp+var_C], 9
.text:0000055F                 jmp     short loc_580
.text:00000561 ; ---------------------------------------------------------------------------
.text:00000561
.text:00000561 loc_561:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+96j
.text:00000561                 cmp     [ebp+arg_0], 1
.text:00000565                 jl      short loc_573
.text:00000567                 mov     eax, [ebp+arg_0]
.text:0000056A                 lea     ecx, [eax+eax-1]
.text:0000056E                 mov     [ebp+var_10], ecx
.text:00000571                 jmp     short loc_57A
.text:00000573 ; ---------------------------------------------------------------------------
.text:00000573
.text:00000573 loc_573:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+A5j
.text:00000573                 mov     [ebp+var_10], 1
.text:0000057A
.text:0000057A loc_57A:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+B1j
.text:0000057A                 mov     edx, [ebp+var_10]
.text:0000057D                 mov     [ebp+var_C], edx
.text:00000580
.text:00000580 loc_580:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+9Fj
.text:00000580                 mov     eax, [ebp+var_4]
.text:00000583                 mov     ecx, [ebp+var_C]
.text:00000586                 mov     [eax], ecx
.text:00000588
.text:00000588 loc_588:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+90j
.text:00000588                 mov     edx, [ebp+var_4]
.text:0000058B                 cmp     dword ptr [edx], 1
.text:0000058E                 jnb     short loc_599
.text:00000590                 mov     eax, [ebp+var_4]
.text:00000593                 mov     dword ptr [eax], 1
.text:00000599
.text:00000599 loc_599:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+CEj
.text:00000599                 mov     ecx, [ebp+var_4]
.text:0000059C                 cmp     dword ptr [ecx], 9
.text:0000059F                 jbe     short loc_5AA
.text:000005A1                 mov     edx, [ebp+var_4]
.text:000005A4                 mov     dword ptr [edx], 9
.text:000005AA
.text:000005AA loc_5AA:                                ; CODE XREF: NCompress::NBZip2::CEncProps::Normalize(int)+DFj
.text:000005AA                 mov     esp, ebp
.text:000005AC                 pop     ebp
.text:000005AD                 retn    4
.text:000005AD ?Normalize@CEncProps@NBZip2@NCompress@@QAEXH@Z endp
.text:000005AD
.text:000005B0
.text:000005B0 ; =============== S U B R O U T I N E =======================================
.text:000005B0
.text:000005B0 ; Attributes: bp-based frame
.text:000005B0
.text:000005B0 ; _DWORD __thiscall NCompress::NBZip2::CEncoder::CEncoder(NCompress::NBZip2::CEncoder *__hidden this)
.text:000005B0                 public ??0CEncoder@NBZip2@NCompress@@QAE@XZ
.text:000005B0 ??0CEncoder@NBZip2@NCompress@@QAE@XZ proc near
.text:000005B0
.text:000005B0 var_10          = dword ptr -10h
.text:000005B0 var_C           = dword ptr -0Ch
.text:000005B0 var_4           = dword ptr -4
.text:000005B0
.text:000005B0                 push    ebp
.text:000005B1                 mov     ebp, esp
.text:000005B3                 push    0FFFFFFFFh
.text:000005B5                 push    offset __ehhandler$??0CEncoder@NBZip2@NCompress@@QAE@XZ
.text:000005BA                 mov     eax, large fs:0
.text:000005C0                 push    eax
.text:000005C1                 push    ecx
.text:000005C2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000005C9                 mov     eax, dword ptr ds:___security_cookie
.text:000005CE                 xor     eax, ebp
.text:000005D0                 push    eax
.text:000005D1                 lea     eax, [ebp+var_C]
.text:000005D4                 mov     large fs:0, eax
.text:000005DA                 mov     [ebp+var_10], ecx
.text:000005DD                 mov     ecx, [ebp+var_10] ; this
.text:000005E0                 call    ??0ICompressCoder@@QAE@XZ ; ICompressCoder::ICompressCoder(void)
.text:000005E5                 mov     ecx, [ebp+var_10]
.text:000005E8                 add     ecx, 4          ; this
.text:000005EB                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:000005F0                 mov     ecx, [ebp+var_10]
.text:000005F3                 add     ecx, 8          ; this
.text:000005F6                 call    ??0ICompressSetCoderMt@@QAE@XZ ; ICompressSetCoderMt::ICompressSetCoderMt(void)
.text:000005FB                 mov     ecx, [ebp+var_10]
.text:000005FE                 add     ecx, 0Ch        ; this
.text:00000601                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000606                 mov     eax, [ebp+var_10]
.text:00000609                 mov     dword ptr [eax], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressCoder'}
.text:0000060F                 mov     ecx, [ebp+var_10]
.text:00000612                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000619                 mov     edx, [ebp+var_10]
.text:0000061C                 mov     dword ptr [edx+8], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderMt'}
.text:00000623                 mov     ecx, [ebp+var_10]
.text:00000626                 add     ecx, 18h
.text:00000629                 call    ??0CInBuffer@@QAE@XZ ; CInBuffer::CInBuffer(void)
.text:0000062E                 mov     [ebp+var_4], 0
.text:00000635                 mov     ecx, [ebp+var_10]
.text:00000638                 add     ecx, 140h
.text:0000063E                 call    ??0?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ ; CBitmEncoder<COutBuffer>::CBitmEncoder<COutBuffer>(void)
.text:00000643                 mov     byte ptr [ebp+var_4], 1
.text:00000647                 mov     ecx, [ebp+var_10]
.text:0000064A                 add     ecx, 170h       ; this
.text:00000650                 call    ??0CEncProps@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CEncProps::CEncProps(void)
.text:00000655                 mov     ecx, [ebp+var_10]
.text:00000658                 add     ecx, 178h       ; this
.text:0000065E                 call    ??0CBZip2CombinedCrc@@QAE@XZ ; CBZip2CombinedCrc::CBZip2CombinedCrc(void)
.text:00000663                 mov     ecx, [ebp+var_10]
.text:00000666                 add     ecx, 180h       ; this
.text:0000066C                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:00000671                 mov     byte ptr [ebp+var_4], 2
.text:00000675                 mov     ecx, [ebp+var_10]
.text:00000678                 add     ecx, 184h       ; this
.text:0000067E                 call    ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)
.text:00000683                 mov     byte ptr [ebp+var_4], 3
.text:00000687                 mov     ecx, [ebp+var_10]
.text:0000068A                 add     ecx, 1ACh       ; this
.text:00000690                 call    ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)
.text:00000695                 mov     byte ptr [ebp+var_4], 4
.text:00000699                 push    0FFFFFFFFh      ; int
.text:0000069B                 mov     ecx, [ebp+var_10]
.text:0000069E                 add     ecx, 170h       ; this
.text:000006A4                 call    ?Normalize@CEncProps@NBZip2@NCompress@@QAEXH@Z ; NCompress::NBZip2::CEncProps::Normalize(int)
.text:000006A9                 mov     eax, [ebp+var_10]
.text:000006AC                 mov     dword ptr [eax+17Ch], 0
.text:000006B6                 mov     ecx, [ebp+var_10]
.text:000006B9                 mov     dword ptr [ecx+10h], 0
.text:000006C0                 mov     edx, [ebp+var_10]
.text:000006C3                 mov     dword ptr [edx+19Ch], 1
.text:000006CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000006D4                 mov     eax, [ebp+var_10]
.text:000006D7                 mov     ecx, [ebp+var_C]
.text:000006DA                 mov     large fs:0, ecx
.text:000006E1                 pop     ecx
.text:000006E2                 add     esp, 10h
.text:000006E5                 cmp     ebp, esp
.text:000006E7                 call    __RTC_CheckEsp
.text:000006EC                 mov     esp, ebp
.text:000006EE                 pop     ebp
.text:000006EF                 retn
.text:000006EF ??0CEncoder@NBZip2@NCompress@@QAE@XZ endp
.text:000006EF
.text:000006F0
.text:000006F0 ; =============== S U B R O U T I N E =======================================
.text:000006F0
.text:000006F0 ; Attributes: bp-based frame
.text:000006F0
.text:000006F0 ; _DWORD __thiscall NCompress::NBZip2::CEncoder::~CEncoder(NCompress::NBZip2::CEncoder *__hidden this)
.text:000006F0                 public ??1CEncoder@NBZip2@NCompress@@QAE@XZ
.text:000006F0 ??1CEncoder@NBZip2@NCompress@@QAE@XZ proc near
.text:000006F0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::`scalar deleting destructor'(uint)+11p
.text:000006F0
.text:000006F0 var_10          = dword ptr -10h
.text:000006F0 var_C           = dword ptr -0Ch
.text:000006F0 var_4           = dword ptr -4
.text:000006F0
.text:000006F0                 push    ebp
.text:000006F1                 mov     ebp, esp
.text:000006F3                 push    0FFFFFFFFh
.text:000006F5                 push    offset __ehhandler$??1CEncoder@NBZip2@NCompress@@QAE@XZ
.text:000006FA                 mov     eax, large fs:0
.text:00000700                 push    eax
.text:00000701                 push    ecx
.text:00000702                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00000709                 mov     eax, dword ptr ds:___security_cookie
.text:0000070E                 xor     eax, ebp
.text:00000710                 push    eax
.text:00000711                 lea     eax, [ebp+var_C]
.text:00000714                 mov     large fs:0, eax
.text:0000071A                 mov     [ebp+var_10], ecx
.text:0000071D                 mov     eax, [ebp+var_10]
.text:00000720                 mov     dword ptr [eax], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressCoder'}
.text:00000726                 mov     ecx, [ebp+var_10]
.text:00000729                 mov     dword ptr [ecx+4], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000730                 mov     edx, [ebp+var_10]
.text:00000733                 mov     dword ptr [edx+8], offset ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderMt'}
.text:0000073A                 mov     [ebp+var_4], 4
.text:00000741                 mov     ecx, [ebp+var_10] ; this
.text:00000744                 call    ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CEncoder::Free(void)
.text:00000749                 mov     byte ptr [ebp+var_4], 3
.text:0000074D                 mov     ecx, [ebp+var_10]
.text:00000750                 add     ecx, 1ACh       ; this
.text:00000756                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000075B                 mov     byte ptr [ebp+var_4], 2
.text:0000075F                 mov     ecx, [ebp+var_10]
.text:00000762                 add     ecx, 184h       ; this
.text:00000768                 call    ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text:0000076D                 mov     byte ptr [ebp+var_4], 1
.text:00000771                 mov     ecx, [ebp+var_10]
.text:00000774                 add     ecx, 180h       ; this
.text:0000077A                 call    ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text:0000077F                 mov     byte ptr [ebp+var_4], 0
.text:00000783                 mov     ecx, [ebp+var_10]
.text:00000786                 add     ecx, 140h
.text:0000078C                 call    ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ ; CBitmEncoder<COutBuffer>::~CBitmEncoder<COutBuffer>(void)
.text:00000791                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000798                 mov     ecx, [ebp+var_10]
.text:0000079B                 add     ecx, 18h        ; this
.text:0000079E                 call    ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text:000007A3                 mov     ecx, [ebp+var_C]
.text:000007A6                 mov     large fs:0, ecx
.text:000007AD                 pop     ecx
.text:000007AE                 add     esp, 10h
.text:000007B1                 cmp     ebp, esp
.text:000007B3                 call    __RTC_CheckEsp
.text:000007B8                 mov     esp, ebp
.text:000007BA                 pop     ebp
.text:000007BB                 retn
.text:000007BB ??1CEncoder@NBZip2@NCompress@@QAE@XZ endp
.text:000007BB
.text:000007BB ; ---------------------------------------------------------------------------
.text:000007BC                 align 10h
.text:000007C0
.text:000007C0 ; =============== S U B R O U T I N E =======================================
.text:000007C0
.text:000007C0 ; Attributes: bp-based frame
.text:000007C0
.text:000007C0 ; __int32 __thiscall NCompress::NBZip2::CEncoder::Create(NCompress::NBZip2::CEncoder *__hidden this)
.text:000007C0                 public ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:000007C0 ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ proc near
.text:000007C0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2Bp
.text:000007C0
.text:000007C0 var_40          = dword ptr -40h
.text:000007C0 var_3C          = dword ptr -3Ch
.text:000007C0 var_34          = dword ptr -34h
.text:000007C0 var_30          = dword ptr -30h
.text:000007C0 var_2C          = dword ptr -2Ch
.text:000007C0 var_28          = dword ptr -28h
.text:000007C0 var_24          = dword ptr -24h
.text:000007C0 var_20          = dword ptr -20h
.text:000007C0 var_1C          = dword ptr -1Ch
.text:000007C0 var_18          = dword ptr -18h
.text:000007C0 var_14          = dword ptr -14h
.text:000007C0 var_10          = dword ptr -10h
.text:000007C0 var_C           = dword ptr -0Ch
.text:000007C0 var_4           = dword ptr -4
.text:000007C0
.text:000007C0 ; FUNCTION CHUNK AT .text:00000963 SIZE 00000009 BYTES
.text:000007C0 ; FUNCTION CHUNK AT .text:00000971 SIZE 00000099 BYTES
.text:000007C0
.text:000007C0                 push    ebp
.text:000007C1                 mov     ebp, esp
.text:000007C3                 push    0FFFFFFFFh
.text:000007C5                 push    offset __ehhandler$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:000007CA                 mov     eax, large fs:0
.text:000007D0                 push    eax
.text:000007D1                 push    ecx
.text:000007D2                 sub     esp, 30h
.text:000007D5                 push    ebx
.text:000007D6                 push    esi
.text:000007D7                 push    edi
.text:000007D8                 push    ecx
.text:000007D9                 lea     edi, [ebp+var_40]
.text:000007DC                 mov     ecx, 0Ch
.text:000007E1                 mov     eax, 0CCCCCCCCh
.text:000007E6                 rep stosd
.text:000007E8                 pop     ecx
.text:000007E9                 mov     eax, dword ptr ds:___security_cookie
.text:000007EE                 xor     eax, ebp
.text:000007F0                 push    eax
.text:000007F1                 lea     eax, [ebp+var_C]
.text:000007F4                 mov     large fs:0, eax
.text:000007FA                 mov     [ebp+var_10], esp
.text:000007FD                 mov     [ebp+var_14], ecx
.text:00000800                 mov     ecx, [ebp+var_14]
.text:00000803                 add     ecx, 180h       ; this
.text:00000809                 call    ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)
.text:0000080E                 mov     [ebp+var_18], eax
.text:00000811                 cmp     [ebp+var_18], 0
.text:00000815                 jz      short loc_81F
.text:00000817                 mov     eax, [ebp+var_18]
.text:0000081A                 jmp     loc_9EE
.text:0000081F ; ---------------------------------------------------------------------------
.text:0000081F
.text:0000081F loc_81F:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+55j
.text:0000081F                 mov     ecx, [ebp+var_14]
.text:00000822                 add     ecx, 1ACh       ; this
.text:00000828                 call    ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)
.text:0000082D                 mov     [ebp+var_1C], eax
.text:00000830                 cmp     [ebp+var_1C], 0
.text:00000834                 jz      short loc_83E
.text:00000836                 mov     eax, [ebp+var_1C]
.text:00000839                 jmp     loc_9EE
.text:0000083E ; ---------------------------------------------------------------------------
.text:0000083E
.text:0000083E loc_83E:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+74j
.text:0000083E                 mov     eax, [ebp+var_14]
.text:00000841                 cmp     dword ptr [eax+17Ch], 0
.text:00000848                 jz      short loc_862
.text:0000084A                 mov     ecx, [ebp+var_14]
.text:0000084D                 mov     edx, [ebp+var_14]
.text:00000850                 mov     eax, [ecx+10h]
.text:00000853                 cmp     eax, [edx+19Ch]
.text:00000859                 jnz     short loc_862
.text:0000085B                 xor     eax, eax
.text:0000085D                 jmp     loc_9EE
.text:00000862 ; ---------------------------------------------------------------------------
.text:00000862
.text:00000862 loc_862:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+88j
.text:00000862                                         ; NCompress::NBZip2::CEncoder::Create(void)+99j
.text:00000862                 mov     [ebp+var_4], 0
.text:00000869                 mov     ecx, [ebp+var_14] ; this
.text:0000086C                 call    ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CEncoder::Free(void)
.text:00000871                 mov     ecx, [ebp+var_14]
.text:00000874                 mov     edx, 1
.text:00000879                 cmp     edx, [ecx+19Ch]
.text:0000087F                 sbb     eax, eax
.text:00000881                 neg     eax
.text:00000883                 mov     ecx, [ebp+var_14]
.text:00000886                 mov     [ecx+1A0h], al
.text:0000088C                 mov     edx, [ebp+var_14]
.text:0000088F                 mov     eax, [ebp+var_14]
.text:00000892                 mov     ecx, [eax+19Ch]
.text:00000898                 mov     [edx+10h], ecx
.text:0000089B                 mov     edx, [ebp+var_14]
.text:0000089E                 mov     eax, [edx+19Ch]
.text:000008A4                 mov     [ebp+var_2C], eax
.text:000008A7                 xor     ecx, ecx
.text:000008A9                 mov     eax, [ebp+var_2C]
.text:000008AC                 mov     edx, 8E00h
.text:000008B1                 mul     edx
.text:000008B3                 seto    cl
.text:000008B6                 neg     ecx
.text:000008B8                 or      ecx, eax
.text:000008BA                 xor     eax, eax
.text:000008BC                 add     ecx, 4
.text:000008BF                 setb    al
.text:000008C2                 neg     eax
.text:000008C4                 or      eax, ecx
.text:000008C6                 push    eax             ; unsigned int
.text:000008C7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000008CC                 add     esp, 4
.text:000008CF                 mov     [ebp+var_3C], eax
.text:000008D2                 mov     ecx, [ebp+var_3C]
.text:000008D5                 mov     [ebp+var_34], ecx
.text:000008D8                 mov     byte ptr [ebp+var_4], 1
.text:000008DC                 cmp     [ebp+var_34], 0
.text:000008E0                 jz      short loc_914
.text:000008E2                 mov     edx, [ebp+var_34]
.text:000008E5                 mov     eax, [ebp+var_2C]
.text:000008E8                 mov     [edx], eax
.text:000008EA                 push    offset ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)
.text:000008EF                 push    offset ??0CThreadInfo@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CThreadInfo::CThreadInfo(void)
.text:000008F4                 mov     ecx, [ebp+var_2C]
.text:000008F7                 push    ecx
.text:000008F8                 push    8E00h
.text:000008FD                 mov     edx, [ebp+var_34]
.text:00000900                 add     edx, 4
.text:00000903                 push    edx
.text:00000904                 call    ??_L@YGXPAXIHP6EX0@Z1@Z ; `eh vector constructor iterator'(void *,uint,int,void (*)(void *),void (*)(void *))
.text:00000909                 mov     eax, [ebp+var_34]
.text:0000090C                 add     eax, 4
.text:0000090F                 mov     [ebp+var_40], eax
.text:00000912                 jmp     short loc_91B
.text:00000914 ; ---------------------------------------------------------------------------
.text:00000914
.text:00000914 loc_914:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+120j
.text:00000914                 mov     [ebp+var_40], 0
.text:0000091B
.text:0000091B loc_91B:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+152j
.text:0000091B                 mov     ecx, [ebp+var_40]
.text:0000091E                 mov     [ebp+var_30], ecx
.text:00000921                 mov     byte ptr [ebp+var_4], 0
.text:00000925                 mov     edx, [ebp+var_14]
.text:00000928                 mov     eax, [ebp+var_30]
.text:0000092B                 mov     [edx+17Ch], eax
.text:00000931                 mov     ecx, [ebp+var_14]
.text:00000934                 cmp     dword ptr [ecx+17Ch], 0
.text:0000093B                 jnz     short loc_947
.text:0000093D                 mov     eax, 8007000Eh
.text:00000942                 jmp     loc_9EE
.text:00000947 ; ---------------------------------------------------------------------------
.text:00000947
.text:00000947 loc_947:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+17Bj
.text:00000947                 jmp     short $LN15
.text:00000947 ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ endp
.text:00000947
.text:00000949
.text:00000949 ; =============== S U B R O U T I N E =======================================
.text:00000949
.text:00000949
.text:00000949 __catch$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$0 proc near
.text:00000949                                         ; DATA XREF: .xdata$x:00003058o
.text:00000949                 mov     dword ptr [ebp-38h], 8007000Eh
.text:00000950                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000957                 mov     eax, offset $LN19
.text:0000095C                 retn
.text:0000095C __catch$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$0 endp
.text:0000095C
.text:0000095D ; ---------------------------------------------------------------------------
.text:0000095D                 mov     eax, offset $LN15
.text:00000962                 retn
.text:00000963 ; ---------------------------------------------------------------------------
.text:00000963 ; START OF FUNCTION CHUNK FOR ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:00000963
.text:00000963 $LN15:                                  ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void):loc_947j
.text:00000963                                         ; DATA XREF: .text:0000095Do
.text:00000963                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000096A                 jmp     short loc_971
.text:0000096A ; END OF FUNCTION CHUNK FOR ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:0000096C
.text:0000096C ; =============== S U B R O U T I N E =======================================
.text:0000096C
.text:0000096C
.text:0000096C $LN19           proc near               ; DATA XREF: __catch$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$0+Eo
.text:0000096C                 mov     eax, [ebp-38h]
.text:0000096F                 jmp     short loc_9EE
.text:0000096F $LN19           endp
.text:0000096F
.text:00000971 ; ---------------------------------------------------------------------------
.text:00000971 ; START OF FUNCTION CHUNK FOR ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:00000971
.text:00000971 loc_971:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+1AAj
.text:00000971                 mov     [ebp+var_20], 0
.text:00000978                 jmp     short loc_983
.text:0000097A ; ---------------------------------------------------------------------------
.text:0000097A
.text:0000097A loc_97A:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void):loc_9EAj
.text:0000097A                 mov     edx, [ebp+var_20]
.text:0000097D                 add     edx, 1
.text:00000980                 mov     [ebp+var_20], edx
.text:00000983
.text:00000983 loc_983:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+1B8j
.text:00000983                 mov     eax, [ebp+var_14]
.text:00000986                 mov     ecx, [ebp+var_20]
.text:00000989                 cmp     ecx, [eax+19Ch]
.text:0000098F                 jnb     short loc_9EC
.text:00000991                 mov     edx, [ebp+var_20]
.text:00000994                 imul    edx, 8E00h
.text:0000099A                 mov     eax, [ebp+var_14]
.text:0000099D                 add     edx, [eax+17Ch]
.text:000009A3                 mov     [ebp+var_24], edx
.text:000009A6                 mov     ecx, [ebp+var_24]
.text:000009A9                 mov     edx, [ebp+var_14]
.text:000009AC                 mov     [ecx+8CE0h], edx
.text:000009B2                 mov     eax, [ebp+var_14]
.text:000009B5                 movzx   ecx, byte ptr [eax+1A0h]
.text:000009BC                 test    ecx, ecx
.text:000009BE                 jz      short loc_9EA
.text:000009C0                 mov     ecx, [ebp+var_24] ; this
.text:000009C3                 call    ?Create@CThreadInfo@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CThreadInfo::Create(void)
.text:000009C8                 mov     [ebp+var_28], eax
.text:000009CB                 cmp     [ebp+var_28], 0
.text:000009CF                 jz      short loc_9EA
.text:000009D1                 mov     edx, [ebp+var_14]
.text:000009D4                 mov     eax, [ebp+var_20]
.text:000009D7                 mov     [edx+19Ch], eax
.text:000009DD                 mov     ecx, [ebp+var_14] ; this
.text:000009E0                 call    ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CEncoder::Free(void)
.text:000009E5                 mov     eax, [ebp+var_28]
.text:000009E8                 jmp     short loc_9EE
.text:000009EA ; ---------------------------------------------------------------------------
.text:000009EA
.text:000009EA loc_9EA:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+1FEj
.text:000009EA                                         ; NCompress::NBZip2::CEncoder::Create(void)+20Fj
.text:000009EA                 jmp     short loc_97A
.text:000009EC ; ---------------------------------------------------------------------------
.text:000009EC
.text:000009EC loc_9EC:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+1CFj
.text:000009EC                 xor     eax, eax
.text:000009EE
.text:000009EE loc_9EE:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+5Aj
.text:000009EE                                         ; NCompress::NBZip2::CEncoder::Create(void)+79j ...
.text:000009EE                 mov     ecx, [ebp+var_C]
.text:000009F1                 mov     large fs:0, ecx
.text:000009F8                 pop     ecx
.text:000009F9                 pop     edi
.text:000009FA                 pop     esi
.text:000009FB                 pop     ebx
.text:000009FC                 add     esp, 40h
.text:000009FF                 cmp     ebp, esp
.text:00000A01                 call    __RTC_CheckEsp
.text:00000A06                 mov     esp, ebp
.text:00000A08                 pop     ebp
.text:00000A09                 retn
.text:00000A09 ; END OF FUNCTION CHUNK FOR ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:00000A09 ; ---------------------------------------------------------------------------
.text:00000A0A                 align 10h
.text:00000A10
.text:00000A10 ; =============== S U B R O U T I N E =======================================
.text:00000A10
.text:00000A10 ; Attributes: bp-based frame
.text:00000A10
.text:00000A10 ; void __thiscall NCompress::NBZip2::CEncoder::Free(NCompress::NBZip2::CEncoder *__hidden this)
.text:00000A10                 public ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ
.text:00000A10 ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ proc near
.text:00000A10                                         ; CODE XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+54p
.text:00000A10                                         ; NCompress::NBZip2::CEncoder::Create(void)+ACp ...
.text:00000A10
.text:00000A10 var_18          = dword ptr -18h
.text:00000A10 var_14          = dword ptr -14h
.text:00000A10 var_10          = dword ptr -10h
.text:00000A10 var_C           = dword ptr -0Ch
.text:00000A10 var_8           = dword ptr -8
.text:00000A10 var_4           = dword ptr -4
.text:00000A10
.text:00000A10                 push    ebp
.text:00000A11                 mov     ebp, esp
.text:00000A13                 sub     esp, 18h
.text:00000A16                 mov     eax, 0CCCCCCCCh
.text:00000A1B                 mov     [ebp+var_18], eax
.text:00000A1E                 mov     [ebp+var_14], eax
.text:00000A21                 mov     [ebp+var_10], eax
.text:00000A24                 mov     [ebp+var_C], eax
.text:00000A27                 mov     [ebp+var_8], eax
.text:00000A2A                 mov     [ebp+var_4], eax
.text:00000A2D                 mov     [ebp+var_4], ecx
.text:00000A30                 mov     eax, [ebp+var_4]
.text:00000A33                 cmp     dword ptr [eax+17Ch], 0
.text:00000A3A                 jnz     short loc_A41
.text:00000A3C                 jmp     loc_AEF
.text:00000A41 ; ---------------------------------------------------------------------------
.text:00000A41
.text:00000A41 loc_A41:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+2Aj
.text:00000A41                 mov     ecx, [ebp+var_4]
.text:00000A44                 mov     byte ptr [ecx+1A8h], 1
.text:00000A4B                 mov     ecx, [ebp+var_4]
.text:00000A4E                 add     ecx, 180h       ; this
.text:00000A54                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00000A59                 mov     [ebp+var_8], 0
.text:00000A60                 jmp     short loc_A6B
.text:00000A62 ; ---------------------------------------------------------------------------
.text:00000A62
.text:00000A62 loc_A62:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+A2j
.text:00000A62                 mov     edx, [ebp+var_8]
.text:00000A65                 add     edx, 1
.text:00000A68                 mov     [ebp+var_8], edx
.text:00000A6B
.text:00000A6B loc_A6B:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+50j
.text:00000A6B                 mov     eax, [ebp+var_4]
.text:00000A6E                 mov     ecx, [ebp+var_8]
.text:00000A71                 cmp     ecx, [eax+19Ch]
.text:00000A77                 jnb     short loc_AB4
.text:00000A79                 mov     edx, [ebp+var_8]
.text:00000A7C                 imul    edx, 8E00h
.text:00000A82                 mov     eax, [ebp+var_4]
.text:00000A85                 add     edx, [eax+17Ch]
.text:00000A8B                 mov     [ebp+var_C], edx
.text:00000A8E                 mov     ecx, [ebp+var_4]
.text:00000A91                 movzx   edx, byte ptr [ecx+1A0h]
.text:00000A98                 test    edx, edx
.text:00000A9A                 jz      short loc_AAA
.text:00000A9C                 mov     ecx, [ebp+var_C]
.text:00000A9F                 add     ecx, 8CE4h      ; this
.text:00000AA5                 call    ?Wait@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Wait(void)
.text:00000AAA
.text:00000AAA loc_AAA:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+8Aj
.text:00000AAA                 mov     ecx, [ebp+var_C] ; this
.text:00000AAD                 call    ?Free@CThreadInfo@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CThreadInfo::Free(void)
.text:00000AB2                 jmp     short loc_A62
.text:00000AB4 ; ---------------------------------------------------------------------------
.text:00000AB4
.text:00000AB4 loc_AB4:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+67j
.text:00000AB4                 mov     eax, [ebp+var_4]
.text:00000AB7                 mov     ecx, [eax+17Ch]
.text:00000ABD                 mov     [ebp+var_14], ecx
.text:00000AC0                 mov     edx, [ebp+var_14]
.text:00000AC3                 mov     [ebp+var_10], edx
.text:00000AC6                 cmp     [ebp+var_10], 0
.text:00000ACA                 jz      short loc_ADB
.text:00000ACC                 push    3
.text:00000ACE                 mov     ecx, [ebp+var_10]
.text:00000AD1                 call    ??_ECThreadInfo@NBZip2@NCompress@@QAEPAXI@Z ; NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)
.text:00000AD6                 mov     [ebp+var_18], eax
.text:00000AD9                 jmp     short loc_AE2
.text:00000ADB ; ---------------------------------------------------------------------------
.text:00000ADB
.text:00000ADB loc_ADB:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+BAj
.text:00000ADB                 mov     [ebp+var_18], 0
.text:00000AE2
.text:00000AE2 loc_AE2:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+C9j
.text:00000AE2                 mov     eax, [ebp+var_4]
.text:00000AE5                 mov     dword ptr [eax+17Ch], 0
.text:00000AEF
.text:00000AEF loc_AEF:                                ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+2Cj
.text:00000AEF                 add     esp, 18h
.text:00000AF2                 cmp     ebp, esp
.text:00000AF4                 call    __RTC_CheckEsp
.text:00000AF9                 mov     esp, ebp
.text:00000AFB                 pop     ebp
.text:00000AFC                 retn
.text:00000AFC ?Free@CEncoder@NBZip2@NCompress@@QAEXXZ endp
.text:00000AFC
.text:00000AFC ; ---------------------------------------------------------------------------
.text:00000AFD                 align 10h
.text:00000B00
.text:00000B00 ; =============== S U B R O U T I N E =======================================
.text:00000B00
.text:00000B00 ; Attributes: bp-based frame
.text:00000B00
.text:00000B00 ; unsigned int __thiscall NCompress::NBZip2::CEncoder::ReadRleBlock(NCompress::NBZip2::CEncoder *this, unsigned __int8 *)
.text:00000B00                 public ?ReadRleBlock@CEncoder@NBZip2@NCompress@@QAEIPAE@Z
.text:00000B00 ?ReadRleBlock@CEncoder@NBZip2@NCompress@@QAEIPAE@Z proc near
.text:00000B00                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+D8p
.text:00000B00                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+328p
.text:00000B00
.text:00000B00 var_28          = byte ptr -28h
.text:00000B00 var_21          = byte ptr -21h
.text:00000B00 var_1C          = dword ptr -1Ch
.text:00000B00 var_18          = dword ptr -18h
.text:00000B00 var_D           = byte ptr -0Dh
.text:00000B00 var_8           = dword ptr -8
.text:00000B00 var_4           = dword ptr -4
.text:00000B00 arg_0           = dword ptr  8
.text:00000B00
.text:00000B00                 push    ebp
.text:00000B01                 mov     ebp, esp
.text:00000B03                 sub     esp, 28h
.text:00000B06                 push    edi
.text:00000B07                 push    ecx
.text:00000B08                 lea     edi, [ebp+var_28]
.text:00000B0B                 mov     ecx, 0Ah
.text:00000B10                 mov     eax, 0CCCCCCCCh
.text:00000B15                 rep stosd
.text:00000B17                 pop     ecx
.text:00000B18                 mov     [ebp+var_4], ecx
.text:00000B1B                 mov     [ebp+var_8], 0
.text:00000B22                 lea     eax, [ebp+var_D]
.text:00000B25                 push    eax             ; unsigned __int8 *
.text:00000B26                 mov     ecx, [ebp+var_4]
.text:00000B29                 add     ecx, 18h        ; this
.text:00000B2C                 call    ?ReadByte@CInBufferBase@@QAE_NAAE@Z ; CInBufferBase::ReadByte(uchar &)
.text:00000B31                 movzx   ecx, al
.text:00000B34                 test    ecx, ecx
.text:00000B36                 jz      loc_C4D
.text:00000B3C                 mov     edx, [ebp+var_4]
.text:00000B3F                 mov     eax, [edx+170h]
.text:00000B45                 imul    eax, 186A0h
.text:00000B4B                 sub     eax, 1
.text:00000B4E                 mov     [ebp+var_18], eax
.text:00000B51                 mov     [ebp+var_1C], 1
.text:00000B58                 mov     ecx, [ebp+arg_0]
.text:00000B5B                 add     ecx, [ebp+var_8]
.text:00000B5E                 mov     dl, [ebp+var_D]
.text:00000B61                 mov     [ecx], dl
.text:00000B63                 mov     eax, [ebp+var_8]
.text:00000B66                 add     eax, 1
.text:00000B69                 mov     [ebp+var_8], eax
.text:00000B6C
.text:00000B6C loc_B6C:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+DDj
.text:00000B6C                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *):loc_C2Bj
.text:00000B6C                 mov     ecx, [ebp+var_8]
.text:00000B6F                 cmp     ecx, [ebp+var_18]
.text:00000B72                 jnb     loc_C30
.text:00000B78                 lea     edx, [ebp+var_21]
.text:00000B7B                 push    edx             ; unsigned __int8 *
.text:00000B7C                 mov     ecx, [ebp+var_4]
.text:00000B7F                 add     ecx, 18h        ; this
.text:00000B82                 call    ?ReadByte@CInBufferBase@@QAE_NAAE@Z ; CInBufferBase::ReadByte(uchar &)
.text:00000B87                 movzx   eax, al
.text:00000B8A                 test    eax, eax
.text:00000B8C                 jnz     short loc_B93
.text:00000B8E                 jmp     loc_C30
.text:00000B93 ; ---------------------------------------------------------------------------
.text:00000B93
.text:00000B93 loc_B93:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+8Cj
.text:00000B93                 movzx   ecx, [ebp+var_21]
.text:00000B97                 movzx   edx, [ebp+var_D]
.text:00000B9B                 cmp     ecx, edx
.text:00000B9D                 jz      short loc_BDF
.text:00000B9F                 cmp     [ebp+var_1C], 4
.text:00000BA3                 jb      short loc_BBC
.text:00000BA5                 mov     eax, [ebp+var_1C]
.text:00000BA8                 sub     eax, 4
.text:00000BAB                 mov     ecx, [ebp+arg_0]
.text:00000BAE                 add     ecx, [ebp+var_8]
.text:00000BB1                 mov     [ecx], al
.text:00000BB3                 mov     edx, [ebp+var_8]
.text:00000BB6                 add     edx, 1
.text:00000BB9                 mov     [ebp+var_8], edx
.text:00000BBC
.text:00000BBC loc_BBC:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+A3j
.text:00000BBC                 mov     eax, [ebp+arg_0]
.text:00000BBF                 add     eax, [ebp+var_8]
.text:00000BC2                 mov     cl, [ebp+var_21]
.text:00000BC5                 mov     [eax], cl
.text:00000BC7                 mov     edx, [ebp+var_8]
.text:00000BCA                 add     edx, 1
.text:00000BCD                 mov     [ebp+var_8], edx
.text:00000BD0                 mov     [ebp+var_1C], 1
.text:00000BD7                 mov     al, [ebp+var_21]
.text:00000BDA                 mov     [ebp+var_D], al
.text:00000BDD                 jmp     short loc_B6C
.text:00000BDF ; ---------------------------------------------------------------------------
.text:00000BDF
.text:00000BDF loc_BDF:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+9Dj
.text:00000BDF                 mov     ecx, [ebp+var_1C]
.text:00000BE2                 add     ecx, 1
.text:00000BE5                 mov     [ebp+var_1C], ecx
.text:00000BE8                 cmp     [ebp+var_1C], 4
.text:00000BEC                 ja      short loc_C04
.text:00000BEE                 mov     edx, [ebp+arg_0]
.text:00000BF1                 add     edx, [ebp+var_8]
.text:00000BF4                 mov     al, [ebp+var_21]
.text:00000BF7                 mov     [edx], al
.text:00000BF9                 mov     ecx, [ebp+var_8]
.text:00000BFC                 add     ecx, 1
.text:00000BFF                 mov     [ebp+var_8], ecx
.text:00000C02                 jmp     short loc_C2B
.text:00000C04 ; ---------------------------------------------------------------------------
.text:00000C04
.text:00000C04 loc_C04:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+ECj
.text:00000C04                 cmp     [ebp+var_1C], 103h
.text:00000C0B                 jnz     short loc_C2B
.text:00000C0D                 mov     edx, [ebp+var_1C]
.text:00000C10                 sub     edx, 4
.text:00000C13                 mov     eax, [ebp+arg_0]
.text:00000C16                 add     eax, [ebp+var_8]
.text:00000C19                 mov     [eax], dl
.text:00000C1B                 mov     ecx, [ebp+var_8]
.text:00000C1E                 add     ecx, 1
.text:00000C21                 mov     [ebp+var_8], ecx
.text:00000C24                 mov     [ebp+var_1C], 0
.text:00000C2B
.text:00000C2B loc_C2B:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+102j
.text:00000C2B                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+10Bj
.text:00000C2B                 jmp     loc_B6C
.text:00000C30 ; ---------------------------------------------------------------------------
.text:00000C30
.text:00000C30 loc_C30:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+72j
.text:00000C30                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+8Ej
.text:00000C30                 cmp     [ebp+var_1C], 4
.text:00000C34                 jb      short loc_C4D
.text:00000C36                 mov     edx, [ebp+var_1C]
.text:00000C39                 sub     edx, 4
.text:00000C3C                 mov     eax, [ebp+arg_0]
.text:00000C3F                 add     eax, [ebp+var_8]
.text:00000C42                 mov     [eax], dl
.text:00000C44                 mov     ecx, [ebp+var_8]
.text:00000C47                 add     ecx, 1
.text:00000C4A                 mov     [ebp+var_8], ecx
.text:00000C4D
.text:00000C4D loc_C4D:                                ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+36j
.text:00000C4D                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+134j
.text:00000C4D                 mov     eax, [ebp+var_8]
.text:00000C50                 push    edx
.text:00000C51                 mov     ecx, ebp
.text:00000C53                 push    eax
.text:00000C54                 lea     edx, $LN17
.text:00000C5A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000C5F                 pop     eax
.text:00000C60                 pop     edx
.text:00000C61                 pop     edi
.text:00000C62                 add     esp, 28h
.text:00000C65                 cmp     ebp, esp
.text:00000C67                 call    __RTC_CheckEsp
.text:00000C6C                 mov     esp, ebp
.text:00000C6E                 pop     ebp
.text:00000C6F                 retn    4
.text:00000C6F ?ReadRleBlock@CEncoder@NBZip2@NCompress@@QAEIPAE@Z endp
.text:00000C6F
.text:00000C6F ; ---------------------------------------------------------------------------
.text:00000C72                 align 4
.text:00000C74 $LN17           dd 2                    ; DATA XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+154o
.text:00000C78                 dd offset $LN16
.text:00000C7C $LN16           dd 0FFFFFFF3h, 1        ; DATA XREF: .text:00000C78o
.text:00000C84                 dd offset $LN14         ; "prevByte"
.text:00000C88                 dd 0FFFFFFDFh, 1
.text:00000C90                 dd offset $LN15_0
.text:00000C94 $LN15_0         db 62h, 0               ; DATA XREF: .text:00000C90o
.text:00000C96 $LN14           db 'prevByte',0         ; DATA XREF: .text:00000C84o
.text:00000C9F                 align 10h
.text:00000CA0
.text:00000CA0 ; =============== S U B R O U T I N E =======================================
.text:00000CA0
.text:00000CA0 ; Attributes: bp-based frame
.text:00000CA0
.text:00000CA0 ; void __thiscall NCompress::NBZip2::CThreadInfo::WriteBits2(NCompress::NBZip2::CThreadInfo *this, unsigned int, unsigned int)
.text:00000CA0                 public ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z
.text:00000CA0 ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z proc near
.text:00000CA0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)+18p
.text:00000CA0                                         ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)+18p ...
.text:00000CA0
.text:00000CA0 var_4           = dword ptr -4
.text:00000CA0 arg_0           = dword ptr  8
.text:00000CA0 arg_4           = dword ptr  0Ch
.text:00000CA0
.text:00000CA0                 push    ebp
.text:00000CA1                 mov     ebp, esp
.text:00000CA3                 push    ecx
.text:00000CA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CAB                 mov     [ebp+var_4], ecx
.text:00000CAE                 mov     eax, [ebp+arg_4]
.text:00000CB1                 push    eax             ; unsigned int
.text:00000CB2                 mov     ecx, [ebp+arg_0]
.text:00000CB5                 push    ecx             ; unsigned int
.text:00000CB6                 mov     edx, [ebp+var_4]
.text:00000CB9                 mov     ecx, [edx+10h]  ; this
.text:00000CBC                 call    ?WriteBits@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXII@Z ; NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint)
.text:00000CC1                 add     esp, 4
.text:00000CC4                 cmp     ebp, esp
.text:00000CC6                 call    __RTC_CheckEsp
.text:00000CCB                 mov     esp, ebp
.text:00000CCD                 pop     ebp
.text:00000CCE                 retn    8
.text:00000CCE ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z endp
.text:00000CCE
.text:00000CCE ; ---------------------------------------------------------------------------
.text:00000CD1                 align 10h
.text:00000CE0
.text:00000CE0 ; =============== S U B R O U T I N E =======================================
.text:00000CE0
.text:00000CE0 ; Attributes: bp-based frame
.text:00000CE0
.text:00000CE0 ; void __thiscall NCompress::NBZip2::CThreadInfo::WriteByte2(NCompress::NBZip2::CThreadInfo *this, unsigned __int8)
.text:00000CE0                 public ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z
.text:00000CE0 ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z proc near
.text:00000CE0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteCrc2(uint)+47p
.text:00000CE0                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+2Ep ...
.text:00000CE0
.text:00000CE0 var_4           = dword ptr -4
.text:00000CE0 arg_0           = byte ptr  8
.text:00000CE0
.text:00000CE0                 push    ebp
.text:00000CE1                 mov     ebp, esp
.text:00000CE3                 push    ecx
.text:00000CE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000CEB                 mov     [ebp+var_4], ecx
.text:00000CEE                 push    8               ; unsigned int
.text:00000CF0                 movzx   eax, [ebp+arg_0]
.text:00000CF4                 push    eax             ; unsigned int
.text:00000CF5                 mov     ecx, [ebp+var_4] ; this
.text:00000CF8                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00000CFD                 add     esp, 4
.text:00000D00                 cmp     ebp, esp
.text:00000D02                 call    __RTC_CheckEsp
.text:00000D07                 mov     esp, ebp
.text:00000D09                 pop     ebp
.text:00000D0A                 retn    4
.text:00000D0A ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z endp
.text:00000D0A
.text:00000D0A ; ---------------------------------------------------------------------------
.text:00000D0D                 align 10h
.text:00000D10
.text:00000D10 ; =============== S U B R O U T I N E =======================================
.text:00000D10
.text:00000D10 ; Attributes: bp-based frame
.text:00000D10
.text:00000D10 ; void __thiscall NCompress::NBZip2::CThreadInfo::WriteBit2(NCompress::NBZip2::CThreadInfo *this, unsigned __int8)
.text:00000D10                 public ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z
.text:00000D10 ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z proc near
.text:00000D10                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+30p
.text:00000D10                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1BEp ...
.text:00000D10
.text:00000D10 var_4           = dword ptr -4
.text:00000D10 arg_0           = byte ptr  8
.text:00000D10
.text:00000D10                 push    ebp
.text:00000D11                 mov     ebp, esp
.text:00000D13                 push    ecx
.text:00000D14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D1B                 mov     [ebp+var_4], ecx
.text:00000D1E                 push    1               ; unsigned int
.text:00000D20                 movzx   eax, [ebp+arg_0]
.text:00000D24                 push    eax             ; unsigned int
.text:00000D25                 mov     ecx, [ebp+var_4] ; this
.text:00000D28                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00000D2D                 add     esp, 4
.text:00000D30                 cmp     ebp, esp
.text:00000D32                 call    __RTC_CheckEsp
.text:00000D37                 mov     esp, ebp
.text:00000D39                 pop     ebp
.text:00000D3A                 retn    4
.text:00000D3A ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z endp
.text:00000D3A
.text:00000D3A ; ---------------------------------------------------------------------------
.text:00000D3D                 align 10h
.text:00000D40
.text:00000D40 ; =============== S U B R O U T I N E =======================================
.text:00000D40
.text:00000D40 ; Attributes: bp-based frame
.text:00000D40
.text:00000D40 ; void __thiscall NCompress::NBZip2::CThreadInfo::WriteCrc2(NCompress::NBZip2::CThreadInfo *this, unsigned int)
.text:00000D40                 public ?WriteCrc2@CThreadInfo@NBZip2@NCompress@@AAEXI@Z
.text:00000D40 ?WriteCrc2@CThreadInfo@NBZip2@NCompress@@AAEXI@Z proc near
.text:00000D40                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+113p
.text:00000D40
.text:00000D40 var_8           = dword ptr -8
.text:00000D40 var_4           = dword ptr -4
.text:00000D40 arg_0           = dword ptr  8
.text:00000D40
.text:00000D40                 push    ebp
.text:00000D41                 mov     ebp, esp
.text:00000D43                 sub     esp, 8
.text:00000D46                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000D4D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000D54                 mov     [ebp+var_4], ecx
.text:00000D57                 mov     [ebp+var_8], 0
.text:00000D5E                 jmp     short loc_D69
.text:00000D60 ; ---------------------------------------------------------------------------
.text:00000D60
.text:00000D60 loc_D60:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteCrc2(uint)+4Cj
.text:00000D60                 mov     eax, [ebp+var_8]
.text:00000D63                 add     eax, 1
.text:00000D66                 mov     [ebp+var_8], eax
.text:00000D69
.text:00000D69 loc_D69:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteCrc2(uint)+1Ej
.text:00000D69                 cmp     [ebp+var_8], 4
.text:00000D6D                 jnb     short loc_D8E
.text:00000D6F                 mov     ecx, [ebp+var_8]
.text:00000D72                 shl     ecx, 3
.text:00000D75                 mov     edx, 18h
.text:00000D7A                 sub     edx, ecx
.text:00000D7C                 mov     eax, [ebp+arg_0]
.text:00000D7F                 mov     ecx, edx
.text:00000D81                 shr     eax, cl
.text:00000D83                 push    eax             ; unsigned __int8
.text:00000D84                 mov     ecx, [ebp+var_4] ; this
.text:00000D87                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00000D8C                 jmp     short loc_D60
.text:00000D8E ; ---------------------------------------------------------------------------
.text:00000D8E
.text:00000D8E loc_D8E:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteCrc2(uint)+2Dj
.text:00000D8E                 add     esp, 8
.text:00000D91                 cmp     ebp, esp
.text:00000D93                 call    __RTC_CheckEsp
.text:00000D98                 mov     esp, ebp
.text:00000D9A                 pop     ebp
.text:00000D9B                 retn    4
.text:00000D9B ?WriteCrc2@CThreadInfo@NBZip2@NCompress@@AAEXI@Z endp
.text:00000D9B
.text:00000D9B ; ---------------------------------------------------------------------------
.text:00000D9E                 align 10h
.text:00000DA0
.text:00000DA0 ; =============== S U B R O U T I N E =======================================
.text:00000DA0
.text:00000DA0 ; Attributes: bp-based frame
.text:00000DA0
.text:00000DA0 ; void __thiscall NCompress::NBZip2::CEncoder::WriteBits(NCompress::NBZip2::CEncoder *this, unsigned int, unsigned int)
.text:00000DA0                 public ?WriteBits@CEncoder@NBZip2@NCompress@@QAEXII@Z
.text:00000DA0 ?WriteBits@CEncoder@NBZip2@NCompress@@QAEXII@Z proc near
.text:00000DA0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::WriteByte(uchar)+18p
.text:00000DA0                                         ; NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)+6Cp
.text:00000DA0
.text:00000DA0 var_4           = dword ptr -4
.text:00000DA0 arg_0           = dword ptr  8
.text:00000DA0 arg_4           = dword ptr  0Ch
.text:00000DA0
.text:00000DA0                 push    ebp
.text:00000DA1                 mov     ebp, esp
.text:00000DA3                 push    ecx
.text:00000DA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DAB                 mov     [ebp+var_4], ecx
.text:00000DAE                 mov     eax, [ebp+arg_4]
.text:00000DB1                 push    eax
.text:00000DB2                 mov     ecx, [ebp+arg_0]
.text:00000DB5                 push    ecx
.text:00000DB6                 mov     ecx, [ebp+var_4]
.text:00000DB9                 add     ecx, 140h
.text:00000DBF                 call    ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z ; CBitmEncoder<COutBuffer>::WriteBits(uint,uint)
.text:00000DC4                 add     esp, 4
.text:00000DC7                 cmp     ebp, esp
.text:00000DC9                 call    __RTC_CheckEsp
.text:00000DCE                 mov     esp, ebp
.text:00000DD0                 pop     ebp
.text:00000DD1                 retn    8
.text:00000DD1 ?WriteBits@CEncoder@NBZip2@NCompress@@QAEXII@Z endp
.text:00000DD1
.text:00000DD1 ; ---------------------------------------------------------------------------
.text:00000DD4                 align 10h
.text:00000DE0
.text:00000DE0 ; =============== S U B R O U T I N E =======================================
.text:00000DE0
.text:00000DE0 ; Attributes: bp-based frame
.text:00000DE0
.text:00000DE0 ; void __thiscall NCompress::NBZip2::CEncoder::WriteByte(NCompress::NBZip2::CEncoder *this, unsigned __int8)
.text:00000DE0                 public ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z
.text:00000DE0 ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z proc near
.text:00000DE0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::WriteCrc(uint)+47p
.text:00000DE0                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1DBp ...
.text:00000DE0
.text:00000DE0 var_4           = dword ptr -4
.text:00000DE0 arg_0           = byte ptr  8
.text:00000DE0
.text:00000DE0                 push    ebp
.text:00000DE1                 mov     ebp, esp
.text:00000DE3                 push    ecx
.text:00000DE4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000DEB                 mov     [ebp+var_4], ecx
.text:00000DEE                 push    8               ; unsigned int
.text:00000DF0                 movzx   eax, [ebp+arg_0]
.text:00000DF4                 push    eax             ; unsigned int
.text:00000DF5                 mov     ecx, [ebp+var_4] ; this
.text:00000DF8                 call    ?WriteBits@CEncoder@NBZip2@NCompress@@QAEXII@Z ; NCompress::NBZip2::CEncoder::WriteBits(uint,uint)
.text:00000DFD                 add     esp, 4
.text:00000E00                 cmp     ebp, esp
.text:00000E02                 call    __RTC_CheckEsp
.text:00000E07                 mov     esp, ebp
.text:00000E09                 pop     ebp
.text:00000E0A                 retn    4
.text:00000E0A ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z endp
.text:00000E0A
.text:00000E0A ; ---------------------------------------------------------------------------
.text:00000E0D                 align 10h
.text:00000E10
.text:00000E10 ; =============== S U B R O U T I N E =======================================
.text:00000E10
.text:00000E10 ; Attributes: bp-based frame
.text:00000E10
.text:00000E10 ; void __thiscall NCompress::NBZip2::CEncoder::WriteCrc(NCompress::NBZip2::CEncoder *this, unsigned int)
.text:00000E10                 public ?WriteCrc@CEncoder@NBZip2@NCompress@@QAEXI@Z
.text:00000E10 ?WriteCrc@CEncoder@NBZip2@NCompress@@QAEXI@Z proc near
.text:00000E10                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+403p
.text:00000E10
.text:00000E10 var_8           = dword ptr -8
.text:00000E10 var_4           = dword ptr -4
.text:00000E10 arg_0           = dword ptr  8
.text:00000E10
.text:00000E10                 push    ebp
.text:00000E11                 mov     ebp, esp
.text:00000E13                 sub     esp, 8
.text:00000E16                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000E1D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000E24                 mov     [ebp+var_4], ecx
.text:00000E27                 mov     [ebp+var_8], 0
.text:00000E2E                 jmp     short loc_E39
.text:00000E30 ; ---------------------------------------------------------------------------
.text:00000E30
.text:00000E30 loc_E30:                                ; CODE XREF: NCompress::NBZip2::CEncoder::WriteCrc(uint)+4Cj
.text:00000E30                 mov     eax, [ebp+var_8]
.text:00000E33                 add     eax, 1
.text:00000E36                 mov     [ebp+var_8], eax
.text:00000E39
.text:00000E39 loc_E39:                                ; CODE XREF: NCompress::NBZip2::CEncoder::WriteCrc(uint)+1Ej
.text:00000E39                 cmp     [ebp+var_8], 4
.text:00000E3D                 jnb     short loc_E5E
.text:00000E3F                 mov     ecx, [ebp+var_8]
.text:00000E42                 shl     ecx, 3
.text:00000E45                 mov     edx, 18h
.text:00000E4A                 sub     edx, ecx
.text:00000E4C                 mov     eax, [ebp+arg_0]
.text:00000E4F                 mov     ecx, edx
.text:00000E51                 shr     eax, cl
.text:00000E53                 push    eax             ; unsigned __int8
.text:00000E54                 mov     ecx, [ebp+var_4] ; this
.text:00000E57                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:00000E5C                 jmp     short loc_E30
.text:00000E5E ; ---------------------------------------------------------------------------
.text:00000E5E
.text:00000E5E loc_E5E:                                ; CODE XREF: NCompress::NBZip2::CEncoder::WriteCrc(uint)+2Dj
.text:00000E5E                 add     esp, 8
.text:00000E61                 cmp     ebp, esp
.text:00000E63                 call    __RTC_CheckEsp
.text:00000E68                 mov     esp, ebp
.text:00000E6A                 pop     ebp
.text:00000E6B                 retn    4
.text:00000E6B ?WriteCrc@CEncoder@NBZip2@NCompress@@QAEXI@Z endp
.text:00000E6B
.text:00000E6B ; ---------------------------------------------------------------------------
.text:00000E6E                 align 10h
.text:00000E70
.text:00000E70 ; =============== S U B R O U T I N E =======================================
.text:00000E70
.text:00000E70 ; Attributes: bp-based frame
.text:00000E70
.text:00000E70 ; void __thiscall NCompress::NBZip2::CThreadInfo::EncodeBlock(NCompress::NBZip2::CThreadInfo *this, const unsigned __int8 *, unsigned int)
.text:00000E70                 public ?EncodeBlock@CThreadInfo@NBZip2@NCompress@@AAEXPBEI@Z
.text:00000E70 ?EncodeBlock@CThreadInfo@NBZip2@NCompress@@AAEXPBEI@Z proc near
.text:00000E70                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+123p
.text:00000E70
.text:00000E70 var_818         = dword ptr -818h
.text:00000E70 var_814         = dword ptr -814h
.text:00000E70 var_810         = dword ptr -810h
.text:00000E70 var_80C         = dword ptr -80Ch
.text:00000E70 var_808         = dword ptr -808h
.text:00000E70 var_804         = dword ptr -804h
.text:00000E70 var_800         = dword ptr -800h
.text:00000E70 var_7FC         = dword ptr -7FCh
.text:00000E70 var_7F8         = dword ptr -7F8h
.text:00000E70 var_7F4         = dword ptr -7F4h
.text:00000E70 var_7F0         = dword ptr -7F0h
.text:00000E70 var_7EC         = dword ptr -7ECh
.text:00000E70 var_7E8         = dword ptr -7E8h
.text:00000E70 var_7E4         = dword ptr -7E4h
.text:00000E70 var_7E0         = dword ptr -7E0h
.text:00000E70 var_7D9         = byte ptr -7D9h
.text:00000E70 var_7D8         = dword ptr -7D8h
.text:00000E70 var_7D4         = dword ptr -7D4h
.text:00000E70 var_7CD         = byte ptr -7CDh
.text:00000E70 var_7CC         = byte ptr -7CCh
.text:00000E70 var_7C0         = dword ptr -7C0h
.text:00000E70 var_7BC         = dword ptr -7BCh
.text:00000E70 var_7B8         = dword ptr -7B8h
.text:00000E70 var_7B4         = dword ptr -7B4h
.text:00000E70 var_7B0         = dword ptr -7B0h
.text:00000E70 var_7AC         = dword ptr -7ACh
.text:00000E70 var_7A8         = dword ptr -7A8h
.text:00000E70 var_7A4         = dword ptr -7A4h
.text:00000E70 var_7A0         = dword ptr -7A0h
.text:00000E70 var_79C         = dword ptr -79Ch
.text:00000E70 var_798         = dword ptr -798h
.text:00000E70 var_794         = dword ptr -794h
.text:00000E70 var_78C         = dword ptr -78Ch
.text:00000E70 var_6C0         = dword ptr -6C0h
.text:00000E70 var_6BC         = dword ptr -6BCh
.text:00000E70 var_6B8         = dword ptr -6B8h
.text:00000E70 var_6B4         = dword ptr -6B4h
.text:00000E70 var_6B0         = dword ptr -6B0h
.text:00000E70 var_6AC         = dword ptr -6ACh
.text:00000E70 var_6A8         = dword ptr -6A8h
.text:00000E70 var_6A4         = dword ptr -6A4h
.text:00000E70 var_6A0         = dword ptr -6A0h
.text:00000E70 var_69C         = dword ptr -69Ch
.text:00000E70 var_698         = dword ptr -698h
.text:00000E70 var_694         = dword ptr -694h
.text:00000E70 var_690         = dword ptr -690h
.text:00000E70 var_68C         = dword ptr -68Ch
.text:00000E70 var_688         = dword ptr -688h
.text:00000E70 var_681         = byte ptr -681h
.text:00000E70 var_680         = dword ptr -680h
.text:00000E70 var_67C         = dword ptr -67Ch
.text:00000E70 var_678         = dword ptr -678h
.text:00000E70 var_674         = dword ptr -674h
.text:00000E70 var_670         = dword ptr -670h
.text:00000E70 var_66C         = dword ptr -66Ch
.text:00000E70 var_668         = dword ptr -668h
.text:00000E70 var_664         = dword ptr -664h
.text:00000E70 var_660         = dword ptr -660h
.text:00000E70 var_65C         = dword ptr -65Ch
.text:00000E70 var_658         = dword ptr -658h
.text:00000E70 var_654         = dword ptr -654h
.text:00000E70 var_650         = dword ptr -650h
.text:00000E70 var_248         = dword ptr -248h
.text:00000E70 var_244         = dword ptr -244h
.text:00000E70 var_240         = dword ptr -240h
.text:00000E70 var_23C         = dword ptr -23Ch
.text:00000E70 var_234         = byte ptr -234h
.text:00000E70 var_21C         = byte ptr -21Ch
.text:00000E70 var_118         = dword ptr -118h
.text:00000E70 var_110         = byte ptr -110h
.text:00000E70 var_C           = dword ptr -0Ch
.text:00000E70 var_8           = dword ptr -8
.text:00000E70 var_4           = dword ptr -4
.text:00000E70 arg_0           = dword ptr  8
.text:00000E70 arg_4           = dword ptr  0Ch
.text:00000E70
.text:00000E70                 push    ebp
.text:00000E71                 mov     ebp, esp
.text:00000E73                 sub     esp, 818h
.text:00000E79                 push    edi
.text:00000E7A                 push    ecx
.text:00000E7B                 lea     edi, [ebp+var_818]
.text:00000E81                 mov     ecx, 206h
.text:00000E86                 mov     eax, 0CCCCCCCCh
.text:00000E8B                 rep stosd
.text:00000E8D                 pop     ecx
.text:00000E8E                 mov     eax, dword ptr ds:___security_cookie
.text:00000E93                 xor     eax, ebp
.text:00000E95                 mov     [ebp+var_4], eax
.text:00000E98                 mov     [ebp+var_8], ecx
.text:00000E9B                 push    0               ; unsigned __int8
.text:00000E9D                 mov     ecx, [ebp+var_8] ; this
.text:00000EA0                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00000EA5                 mov     eax, [ebp+arg_4]
.text:00000EA8                 push    eax
.text:00000EA9                 mov     ecx, [ebp+arg_0]
.text:00000EAC                 push    ecx
.text:00000EAD                 mov     edx, [ebp+var_8]
.text:00000EB0                 mov     eax, [edx+0Ch]
.text:00000EB3                 push    eax
.text:00000EB4                 call    _BlockSort@12   ; BlockSort(x,x,x)
.text:00000EB9                 mov     [ebp+var_C], eax
.text:00000EBC                 mov     ecx, [ebp+var_8]
.text:00000EBF                 mov     edx, [ecx+0Ch]
.text:00000EC2                 mov     eax, [ebp+var_C]
.text:00000EC5                 mov     ecx, [ebp+arg_4]
.text:00000EC8                 mov     [edx+eax*4], ecx
.text:00000ECB                 push    18h             ; unsigned int
.text:00000ECD                 mov     edx, [ebp+var_C]
.text:00000ED0                 push    edx             ; unsigned int
.text:00000ED1                 mov     ecx, [ebp+var_8] ; this
.text:00000ED4                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00000ED9                 mov     [ebp+var_118], 0
.text:00000EE3                 mov     [ebp+var_23C], 0
.text:00000EED                 jmp     short loc_EFE
.text:00000EEF ; ---------------------------------------------------------------------------
.text:00000EEF
.text:00000EEF loc_EEF:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+A8j
.text:00000EEF                 mov     eax, [ebp+var_23C]
.text:00000EF5                 add     eax, 1
.text:00000EF8                 mov     [ebp+var_23C], eax
.text:00000EFE
.text:00000EFE loc_EFE:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+7Dj
.text:00000EFE                 cmp     [ebp+var_23C], 100h
.text:00000F08                 jnb     short loc_F1A
.text:00000F0A                 mov     ecx, [ebp+var_23C]
.text:00000F10                 mov     [ebp+ecx+var_21C], 0
.text:00000F18                 jmp     short loc_EEF
.text:00000F1A ; ---------------------------------------------------------------------------
.text:00000F1A
.text:00000F1A loc_F1A:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+98j
.text:00000F1A                 mov     [ebp+var_23C], 0
.text:00000F24                 jmp     short loc_F35
.text:00000F26 ; ---------------------------------------------------------------------------
.text:00000F26
.text:00000F26 loc_F26:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+DCj
.text:00000F26                 mov     edx, [ebp+var_23C]
.text:00000F2C                 add     edx, 1
.text:00000F2F                 mov     [ebp+var_23C], edx
.text:00000F35
.text:00000F35 loc_F35:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+B4j
.text:00000F35                 cmp     [ebp+var_23C], 10h
.text:00000F3C                 jnb     short loc_F4E
.text:00000F3E                 mov     eax, [ebp+var_23C]
.text:00000F44                 mov     [ebp+eax+var_234], 0
.text:00000F4C                 jmp     short loc_F26
.text:00000F4E ; ---------------------------------------------------------------------------
.text:00000F4E
.text:00000F4E loc_F4E:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+CCj
.text:00000F4E                 mov     [ebp+var_23C], 0
.text:00000F58                 jmp     short loc_F69
.text:00000F5A ; ---------------------------------------------------------------------------
.text:00000F5A
.text:00000F5A loc_F5A:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+118j
.text:00000F5A                 mov     ecx, [ebp+var_23C]
.text:00000F60                 add     ecx, 1
.text:00000F63                 mov     [ebp+var_23C], ecx
.text:00000F69
.text:00000F69 loc_F69:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+E8j
.text:00000F69                 mov     edx, [ebp+var_23C]
.text:00000F6F                 cmp     edx, [ebp+arg_4]
.text:00000F72                 jnb     short loc_F8A
.text:00000F74                 mov     eax, [ebp+arg_0]
.text:00000F77                 add     eax, [ebp+var_23C]
.text:00000F7D                 movzx   ecx, byte ptr [eax]
.text:00000F80                 mov     [ebp+ecx+var_21C], 1
.text:00000F88                 jmp     short loc_F5A
.text:00000F8A ; ---------------------------------------------------------------------------
.text:00000F8A
.text:00000F8A loc_F8A:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+102j
.text:00000F8A                 mov     [ebp+var_23C], 0
.text:00000F94                 jmp     short loc_FA5
.text:00000F96 ; ---------------------------------------------------------------------------
.text:00000F96
.text:00000F96 loc_F96:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint):loc_FF6j
.text:00000F96                 mov     edx, [ebp+var_23C]
.text:00000F9C                 add     edx, 1
.text:00000F9F                 mov     [ebp+var_23C], edx
.text:00000FA5
.text:00000FA5 loc_FA5:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+124j
.text:00000FA5                 cmp     [ebp+var_23C], 100h
.text:00000FAF                 jnb     short loc_FF8
.text:00000FB1                 mov     eax, [ebp+var_23C]
.text:00000FB7                 movzx   ecx, [ebp+eax+var_21C]
.text:00000FBF                 test    ecx, ecx
.text:00000FC1                 jz      short loc_FF6
.text:00000FC3                 mov     edx, [ebp+var_23C]
.text:00000FC9                 shr     edx, 4
.text:00000FCC                 mov     [ebp+edx+var_234], 1
.text:00000FD4                 mov     eax, [ebp+var_118]
.text:00000FDA                 mov     cl, byte ptr [ebp+var_23C]
.text:00000FE0                 mov     [ebp+eax+var_110], cl
.text:00000FE7                 mov     edx, [ebp+var_118]
.text:00000FED                 add     edx, 1
.text:00000FF0                 mov     [ebp+var_118], edx
.text:00000FF6
.text:00000FF6 loc_FF6:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+151j
.text:00000FF6                 jmp     short loc_F96
.text:00000FF8 ; ---------------------------------------------------------------------------
.text:00000FF8
.text:00000FF8 loc_FF8:                                ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+13Fj
.text:00000FF8                 mov     [ebp+var_23C], 0
.text:00001002                 jmp     short loc_1013
.text:00001004 ; ---------------------------------------------------------------------------
.text:00001004
.text:00001004 loc_1004:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1C3j
.text:00001004                 mov     eax, [ebp+var_23C]
.text:0000100A                 add     eax, 1
.text:0000100D                 mov     [ebp+var_23C], eax
.text:00001013
.text:00001013 loc_1013:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+192j
.text:00001013                 cmp     [ebp+var_23C], 10h
.text:0000101A                 jnb     short loc_1035
.text:0000101C                 mov     ecx, [ebp+var_23C]
.text:00001022                 movzx   edx, [ebp+ecx+var_234]
.text:0000102A                 push    edx             ; unsigned __int8
.text:0000102B                 mov     ecx, [ebp+var_8] ; this
.text:0000102E                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001033                 jmp     short loc_1004
.text:00001035 ; ---------------------------------------------------------------------------
.text:00001035
.text:00001035 loc_1035:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1AAj
.text:00001035                 mov     [ebp+var_23C], 0
.text:0000103F                 jmp     short loc_1050
.text:00001041 ; ---------------------------------------------------------------------------
.text:00001041
.text:00001041 loc_1041:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint):loc_1088j
.text:00001041                 mov     eax, [ebp+var_23C]
.text:00001047                 add     eax, 1
.text:0000104A                 mov     [ebp+var_23C], eax
.text:00001050
.text:00001050 loc_1050:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1CFj
.text:00001050                 cmp     [ebp+var_23C], 100h
.text:0000105A                 jnb     short loc_108A
.text:0000105C                 mov     ecx, [ebp+var_23C]
.text:00001062                 shr     ecx, 4
.text:00001065                 movzx   edx, [ebp+ecx+var_234]
.text:0000106D                 test    edx, edx
.text:0000106F                 jz      short loc_1088
.text:00001071                 mov     eax, [ebp+var_23C]
.text:00001077                 movzx   ecx, [ebp+eax+var_21C]
.text:0000107F                 push    ecx             ; unsigned __int8
.text:00001080                 mov     ecx, [ebp+var_8] ; this
.text:00001083                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001088
.text:00001088 loc_1088:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1FFj
.text:00001088                 jmp     short loc_1041
.text:0000108A ; ---------------------------------------------------------------------------
.text:0000108A
.text:0000108A loc_108A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+1EAj
.text:0000108A                 mov     edx, [ebp+var_118]
.text:00001090                 add     edx, 2
.text:00001093                 mov     [ebp+var_240], edx
.text:00001099                 mov     eax, [ebp+var_8]
.text:0000109C                 mov     ecx, [eax+4]
.text:0000109F                 mov     [ebp+var_244], ecx
.text:000010A5                 mov     [ebp+var_248], 0
.text:000010AF                 mov     [ebp+var_65C], 0
.text:000010B9                 jmp     short loc_10CA
.text:000010BB ; ---------------------------------------------------------------------------
.text:000010BB
.text:000010BB loc_10BB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+277j
.text:000010BB                 mov     edx, [ebp+var_65C]
.text:000010C1                 add     edx, 1
.text:000010C4                 mov     [ebp+var_65C], edx
.text:000010CA
.text:000010CA loc_10CA:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+249j
.text:000010CA                 cmp     [ebp+var_65C], 102h
.text:000010D4                 jnb     short loc_10E9
.text:000010D6                 mov     eax, [ebp+var_65C]
.text:000010DC                 mov     [ebp+eax*4+var_654], 0
.text:000010E7                 jmp     short loc_10BB
.text:000010E9 ; ---------------------------------------------------------------------------
.text:000010E9
.text:000010E9 loc_10E9:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+264j
.text:000010E9                 mov     [ebp+var_660], 0
.text:000010F3                 mov     [ebp+var_664], 0
.text:000010FD                 mov     ecx, [ebp+var_8]
.text:00001100                 mov     edx, [ecx+0Ch]
.text:00001103                 mov     [ebp+var_668], edx
.text:00001109                 mov     eax, [ebp+arg_0]
.text:0000110C                 sub     eax, 1
.text:0000110F                 mov     [ebp+arg_0], eax
.text:00001112
.text:00001112 loc_1112:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+408j
.text:00001112                 mov     ecx, [ebp+var_664]
.text:00001118                 mov     edx, [ebp+var_668]
.text:0000111E                 mov     eax, [edx+ecx*4]
.text:00001121                 mov     ecx, [ebp+arg_0]
.text:00001124                 movzx   edx, byte ptr [ecx+eax]
.text:00001128                 push    edx             ; unsigned __int8
.text:00001129                 lea     ecx, [ebp+var_110] ; this
.text:0000112F                 call    ?FindAndMove@CMtf8Encoder@NCompress@@QAEIE@Z ; NCompress::CMtf8Encoder::FindAndMove(uchar)
.text:00001134                 mov     [ebp+var_66C], eax
.text:0000113A                 cmp     [ebp+var_66C], 0
.text:00001141                 jnz     short loc_1157
.text:00001143                 mov     eax, [ebp+var_660]
.text:00001149                 add     eax, 1
.text:0000114C                 mov     [ebp+var_660], eax
.text:00001152                 jmp     loc_1260
.text:00001157 ; ---------------------------------------------------------------------------
.text:00001157
.text:00001157 loc_1157:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+2D1j
.text:00001157                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+356j
.text:00001157                 cmp     [ebp+var_660], 0
.text:0000115E                 jz      short loc_11C8
.text:00001160                 mov     ecx, [ebp+var_660]
.text:00001166                 sub     ecx, 1
.text:00001169                 mov     [ebp+var_660], ecx
.text:0000116F                 mov     edx, [ebp+var_660]
.text:00001175                 and     edx, 1
.text:00001178                 mov     eax, [ebp+var_244]
.text:0000117E                 add     eax, [ebp+var_248]
.text:00001184                 mov     [eax], dl
.text:00001186                 mov     ecx, [ebp+var_248]
.text:0000118C                 add     ecx, 1
.text:0000118F                 mov     [ebp+var_248], ecx
.text:00001195                 mov     edx, [ebp+var_660]
.text:0000119B                 and     edx, 1
.text:0000119E                 mov     eax, [ebp+edx*4+var_654]
.text:000011A5                 add     eax, 1
.text:000011A8                 mov     ecx, [ebp+var_660]
.text:000011AE                 and     ecx, 1
.text:000011B1                 mov     [ebp+ecx*4+var_654], eax
.text:000011B8                 mov     edx, [ebp+var_660]
.text:000011BE                 shr     edx, 1
.text:000011C0                 mov     [ebp+var_660], edx
.text:000011C6                 jmp     short loc_1157
.text:000011C8 ; ---------------------------------------------------------------------------
.text:000011C8
.text:000011C8 loc_11C8:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+2EEj
.text:000011C8                 cmp     [ebp+var_66C], 0FEh ; '¦'
.text:000011D2                 jb      short loc_121D
.text:000011D4                 mov     eax, [ebp+var_244]
.text:000011DA                 add     eax, [ebp+var_248]
.text:000011E0                 mov     byte ptr [eax], 0FFh
.text:000011E3                 mov     ecx, [ebp+var_248]
.text:000011E9                 add     ecx, 1
.text:000011EC                 mov     [ebp+var_248], ecx
.text:000011F2                 mov     edx, [ebp+var_66C]
.text:000011F8                 sub     edx, 0FEh ; '¦'
.text:000011FE                 mov     eax, [ebp+var_244]
.text:00001204                 add     eax, [ebp+var_248]
.text:0000120A                 mov     [eax], dl
.text:0000120C                 mov     ecx, [ebp+var_248]
.text:00001212                 add     ecx, 1
.text:00001215                 mov     [ebp+var_248], ecx
.text:0000121B                 jmp     short loc_1243
.text:0000121D ; ---------------------------------------------------------------------------
.text:0000121D
.text:0000121D loc_121D:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+362j
.text:0000121D                 mov     edx, [ebp+var_66C]
.text:00001223                 add     edx, 1
.text:00001226                 mov     eax, [ebp+var_244]
.text:0000122C                 add     eax, [ebp+var_248]
.text:00001232                 mov     [eax], dl
.text:00001234                 mov     ecx, [ebp+var_248]
.text:0000123A                 add     ecx, 1
.text:0000123D                 mov     [ebp+var_248], ecx
.text:00001243
.text:00001243 loc_1243:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+3ABj
.text:00001243                 mov     edx, [ebp+var_66C]
.text:00001249                 mov     eax, [ebp+edx*4+var_650]
.text:00001250                 add     eax, 1
.text:00001253                 mov     ecx, [ebp+var_66C]
.text:00001259                 mov     [ebp+ecx*4+var_650], eax
.text:00001260
.text:00001260 loc_1260:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+2E2j
.text:00001260                 mov     edx, [ebp+var_664]
.text:00001266                 add     edx, 1
.text:00001269                 mov     [ebp+var_664], edx
.text:0000126F                 mov     eax, [ebp+var_664]
.text:00001275                 cmp     eax, [ebp+arg_4]
.text:00001278                 jb      loc_1112
.text:0000127E
.text:0000127E loc_127E:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+47Dj
.text:0000127E                 cmp     [ebp+var_660], 0
.text:00001285                 jz      short loc_12EF
.text:00001287                 mov     ecx, [ebp+var_660]
.text:0000128D                 sub     ecx, 1
.text:00001290                 mov     [ebp+var_660], ecx
.text:00001296                 mov     edx, [ebp+var_660]
.text:0000129C                 and     edx, 1
.text:0000129F                 mov     eax, [ebp+var_244]
.text:000012A5                 add     eax, [ebp+var_248]
.text:000012AB                 mov     [eax], dl
.text:000012AD                 mov     ecx, [ebp+var_248]
.text:000012B3                 add     ecx, 1
.text:000012B6                 mov     [ebp+var_248], ecx
.text:000012BC                 mov     edx, [ebp+var_660]
.text:000012C2                 and     edx, 1
.text:000012C5                 mov     eax, [ebp+edx*4+var_654]
.text:000012CC                 add     eax, 1
.text:000012CF                 mov     ecx, [ebp+var_660]
.text:000012D5                 and     ecx, 1
.text:000012D8                 mov     [ebp+ecx*4+var_654], eax
.text:000012DF                 mov     edx, [ebp+var_660]
.text:000012E5                 shr     edx, 1
.text:000012E7                 mov     [ebp+var_660], edx
.text:000012ED                 jmp     short loc_127E
.text:000012EF ; ---------------------------------------------------------------------------
.text:000012EF
.text:000012EF loc_12EF:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+415j
.text:000012EF                 cmp     [ebp+var_240], 100h
.text:000012F9                 jnb     short loc_1323
.text:000012FB                 mov     eax, [ebp+var_240]
.text:00001301                 sub     eax, 1
.text:00001304                 mov     ecx, [ebp+var_244]
.text:0000130A                 add     ecx, [ebp+var_248]
.text:00001310                 mov     [ecx], al
.text:00001312                 mov     edx, [ebp+var_248]
.text:00001318                 add     edx, 1
.text:0000131B                 mov     [ebp+var_248], edx
.text:00001321                 jmp     short loc_136A
.text:00001323 ; ---------------------------------------------------------------------------
.text:00001323
.text:00001323 loc_1323:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+489j
.text:00001323                 mov     eax, [ebp+var_244]
.text:00001329                 add     eax, [ebp+var_248]
.text:0000132F                 mov     byte ptr [eax], 0FFh
.text:00001332                 mov     ecx, [ebp+var_248]
.text:00001338                 add     ecx, 1
.text:0000133B                 mov     [ebp+var_248], ecx
.text:00001341                 mov     edx, [ebp+var_240]
.text:00001347                 sub     edx, 100h
.text:0000134D                 mov     eax, [ebp+var_244]
.text:00001353                 add     eax, [ebp+var_248]
.text:00001359                 mov     [eax], dl
.text:0000135B                 mov     ecx, [ebp+var_248]
.text:00001361                 add     ecx, 1
.text:00001364                 mov     [ebp+var_248], ecx
.text:0000136A
.text:0000136A loc_136A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+4B1j
.text:0000136A                 mov     edx, [ebp+var_240]
.text:00001370                 mov     eax, [ebp+edx*4+var_658]
.text:00001377                 add     eax, 1
.text:0000137A                 mov     ecx, [ebp+var_240]
.text:00001380                 mov     [ebp+ecx*4+var_658], eax
.text:00001387                 mov     [ebp+var_670], 0
.text:00001391                 mov     [ebp+var_674], 0
.text:0000139B                 jmp     short loc_13AC
.text:0000139D ; ---------------------------------------------------------------------------
.text:0000139D
.text:0000139D loc_139D:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+561j
.text:0000139D                 mov     edx, [ebp+var_674]
.text:000013A3                 add     edx, 1
.text:000013A6                 mov     [ebp+var_674], edx
.text:000013AC
.text:000013AC loc_13AC:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+52Bj
.text:000013AC                 cmp     [ebp+var_674], 102h
.text:000013B6                 jnb     short loc_13D3
.text:000013B8                 mov     eax, [ebp+var_674]
.text:000013BE                 mov     ecx, [ebp+var_670]
.text:000013C4                 add     ecx, [ebp+eax*4+var_654]
.text:000013CB                 mov     [ebp+var_670], ecx
.text:000013D1                 jmp     short loc_139D
.text:000013D3 ; ---------------------------------------------------------------------------
.text:000013D3
.text:000013D3 loc_13D3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+546j
.text:000013D3                 mov     [ebp+var_678], 2
.text:000013DD                 mov     [ebp+var_67C], 0FFFFFFFFh
.text:000013E7                 mov     edx, [ebp+var_8]
.text:000013EA                 mov     ecx, [edx+10h]  ; this
.text:000013ED                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:000013F2                 mov     [ebp+var_680], eax
.text:000013F8                 mov     eax, [ebp+var_8]
.text:000013FB                 mov     ecx, [eax+10h]  ; this
.text:000013FE                 call    ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetCurByte(void)
.text:00001403                 mov     [ebp+var_681], al
.text:00001409                 mov     [ebp+var_688], 2
.text:00001413                 jmp     short loc_1424
.text:00001415 ; ---------------------------------------------------------------------------
.text:00001415
.text:00001415 loc_1415:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint):loc_1DF3j
.text:00001415                 mov     ecx, [ebp+var_688]
.text:0000141B                 add     ecx, 1
.text:0000141E                 mov     [ebp+var_688], ecx
.text:00001424
.text:00001424 loc_1424:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+5A3j
.text:00001424                 cmp     [ebp+var_688], 7
.text:0000142B                 ja      loc_1DF8
.text:00001431                 mov     edx, [ebp+var_8]
.text:00001434                 movzx   eax, byte ptr [edx+8CDCh]
.text:0000143B                 test    eax, eax
.text:0000143D                 jz      short loc_1493
.text:0000143F                 mov     ecx, [ebp+var_680]
.text:00001445                 push    ecx             ; unsigned int
.text:00001446                 mov     edx, [ebp+var_8]
.text:00001449                 mov     ecx, [edx+10h]  ; this
.text:0000144C                 call    ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetPos(uint)
.text:00001451                 movzx   eax, [ebp+var_681]
.text:00001458                 push    eax             ; unsigned __int8
.text:00001459                 mov     ecx, [ebp+var_680]
.text:0000145F                 and     ecx, 7
.text:00001462                 push    ecx             ; unsigned int
.text:00001463                 mov     edx, [ebp+var_8]
.text:00001466                 mov     ecx, [edx+10h]  ; this
.text:00001469                 call    ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetCurState(uint,uchar)
.text:0000146E                 cmp     [ebp+var_688], 6
.text:00001475                 ja      short loc_1485
.text:00001477                 mov     eax, [ebp+var_688]
.text:0000147D                 mov     [ebp+var_68C], eax
.text:00001483                 jmp     short loc_1491
.text:00001485 ; ---------------------------------------------------------------------------
.text:00001485
.text:00001485 loc_1485:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+605j
.text:00001485                 mov     ecx, [ebp+var_678]
.text:0000148B                 mov     [ebp+var_68C], ecx
.text:00001491
.text:00001491 loc_1491:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+613j
.text:00001491                 jmp     short loc_14FD
.text:00001493 ; ---------------------------------------------------------------------------
.text:00001493
.text:00001493 loc_1493:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+5CDj
.text:00001493                 cmp     [ebp+var_670], 0C8h ; '+'
.text:0000149D                 jnb     short loc_14AB
.text:0000149F                 mov     [ebp+var_68C], 2
.text:000014A9                 jmp     short loc_14FD
.text:000014AB ; ---------------------------------------------------------------------------
.text:000014AB
.text:000014AB loc_14AB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+62Dj
.text:000014AB                 cmp     [ebp+var_670], 258h
.text:000014B5                 jnb     short loc_14C3
.text:000014B7                 mov     [ebp+var_68C], 3
.text:000014C1                 jmp     short loc_14FD
.text:000014C3 ; ---------------------------------------------------------------------------
.text:000014C3
.text:000014C3 loc_14C3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+645j
.text:000014C3                 cmp     [ebp+var_670], 4B0h
.text:000014CD                 jnb     short loc_14DB
.text:000014CF                 mov     [ebp+var_68C], 4
.text:000014D9                 jmp     short loc_14FD
.text:000014DB ; ---------------------------------------------------------------------------
.text:000014DB
.text:000014DB loc_14DB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+65Dj
.text:000014DB                 cmp     [ebp+var_670], 960h
.text:000014E5                 jnb     short loc_14F3
.text:000014E7                 mov     [ebp+var_68C], 5
.text:000014F1                 jmp     short loc_14FD
.text:000014F3 ; ---------------------------------------------------------------------------
.text:000014F3
.text:000014F3 loc_14F3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+675j
.text:000014F3                 mov     [ebp+var_68C], 6
.text:000014FD
.text:000014FD loc_14FD:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint):loc_1491j
.text:000014FD                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+639j ...
.text:000014FD                 push    3               ; unsigned int
.text:000014FF                 mov     edx, [ebp+var_68C]
.text:00001505                 push    edx             ; unsigned int
.text:00001506                 mov     ecx, [ebp+var_8] ; this
.text:00001509                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:0000150E                 mov     eax, [ebp+var_670]
.text:00001514                 add     eax, 31h ; '1'
.text:00001517                 xor     edx, edx
.text:00001519                 mov     ecx, 32h ; '2'
.text:0000151E                 div     ecx
.text:00001520                 mov     [ebp+var_690], eax
.text:00001526                 push    0Fh             ; unsigned int
.text:00001528                 mov     edx, [ebp+var_690]
.text:0000152E                 push    edx             ; unsigned int
.text:0000152F                 mov     ecx, [ebp+var_8] ; this
.text:00001532                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00001537                 mov     eax, [ebp+var_670]
.text:0000153D                 mov     [ebp+var_694], eax
.text:00001543                 mov     [ebp+var_698], 0
.text:0000154D                 mov     ecx, [ebp+var_68C]
.text:00001553                 mov     [ebp+var_69C], ecx
.text:00001559
.text:00001559 loc_1559:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+862j
.text:00001559                 mov     eax, [ebp+var_694]
.text:0000155F                 xor     edx, edx
.text:00001561                 div     [ebp+var_69C]
.text:00001567                 mov     [ebp+var_6A0], eax
.text:0000156D                 mov     edx, [ebp+var_698]
.text:00001573                 mov     [ebp+var_6A4], edx
.text:00001579                 mov     [ebp+var_6A8], 0
.text:00001583
.text:00001583 loc_1583:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+749j
.text:00001583                 mov     eax, [ebp+var_6A8]
.text:00001589                 cmp     eax, [ebp+var_6A0]
.text:0000158F                 jnb     short loc_15BB
.text:00001591                 mov     ecx, [ebp+var_6A4]
.text:00001597                 mov     edx, [ebp+var_6A8]
.text:0000159D                 add     edx, [ebp+ecx*4+var_654]
.text:000015A4                 mov     [ebp+var_6A8], edx
.text:000015AA                 mov     eax, [ebp+var_6A4]
.text:000015B0                 add     eax, 1
.text:000015B3                 mov     [ebp+var_6A4], eax
.text:000015B9                 jmp     short loc_1583
.text:000015BB ; ---------------------------------------------------------------------------
.text:000015BB
.text:000015BB loc_15BB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+71Fj
.text:000015BB                 mov     ecx, [ebp+var_698]
.text:000015C1                 add     ecx, 1
.text:000015C4                 cmp     [ebp+var_6A4], ecx
.text:000015CA                 jbe     short loc_161C
.text:000015CC                 mov     edx, [ebp+var_69C]
.text:000015D2                 cmp     edx, [ebp+var_68C]
.text:000015D8                 jz      short loc_161C
.text:000015DA                 cmp     [ebp+var_69C], 1
.text:000015E1                 jz      short loc_161C
.text:000015E3                 mov     eax, [ebp+var_68C]
.text:000015E9                 sub     eax, [ebp+var_69C]
.text:000015EF                 and     eax, 1
.text:000015F2                 jz      short loc_161C
.text:000015F4                 mov     ecx, [ebp+var_6A4]
.text:000015FA                 sub     ecx, 1
.text:000015FD                 mov     [ebp+var_6A4], ecx
.text:00001603                 mov     edx, [ebp+var_6A4]
.text:00001609                 mov     eax, [ebp+var_6A8]
.text:0000160F                 sub     eax, [ebp+edx*4+var_654]
.text:00001616                 mov     [ebp+var_6A8], eax
.text:0000161C
.text:0000161C loc_161C:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+75Aj
.text:0000161C                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+768j ...
.text:0000161C                 mov     ecx, [ebp+var_69C]
.text:00001622                 sub     ecx, 1
.text:00001625                 imul    ecx, 102h
.text:0000162B                 mov     edx, [ebp+var_8]
.text:0000162E                 lea     eax, [edx+ecx+14h]
.text:00001632                 mov     [ebp+var_6AC], eax
.text:00001638                 mov     [ebp+var_6B0], 0
.text:00001642
.text:00001642 loc_1642:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+833j
.text:00001642                 mov     ecx, [ebp+var_6B0]
.text:00001648                 cmp     ecx, [ebp+var_698]
.text:0000164E                 jb      short loc_166A
.text:00001650                 mov     edx, [ebp+var_6B0]
.text:00001656                 cmp     edx, [ebp+var_6A4]
.text:0000165C                 jnb     short loc_166A
.text:0000165E                 mov     [ebp+var_818], 0
.text:00001668                 jmp     short loc_1674
.text:0000166A ; ---------------------------------------------------------------------------
.text:0000166A
.text:0000166A loc_166A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+7DEj
.text:0000166A                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+7ECj
.text:0000166A                 mov     [ebp+var_818], 1
.text:00001674
.text:00001674 loc_1674:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+7F8j
.text:00001674                 mov     eax, [ebp+var_6AC]
.text:0000167A                 add     eax, [ebp+var_6B0]
.text:00001680                 mov     cl, byte ptr [ebp+var_818]
.text:00001686                 mov     [eax], cl
.text:00001688                 mov     edx, [ebp+var_6B0]
.text:0000168E                 add     edx, 1
.text:00001691                 mov     [ebp+var_6B0], edx
.text:00001697                 mov     eax, [ebp+var_6B0]
.text:0000169D                 cmp     eax, [ebp+var_240]
.text:000016A3                 jb      short loc_1642
.text:000016A5                 mov     ecx, [ebp+var_6A4]
.text:000016AB                 mov     [ebp+var_698], ecx
.text:000016B1                 mov     edx, [ebp+var_694]
.text:000016B7                 sub     edx, [ebp+var_6A8]
.text:000016BD                 mov     [ebp+var_694], edx
.text:000016C3                 mov     eax, [ebp+var_69C]
.text:000016C9                 sub     eax, 1
.text:000016CC                 mov     [ebp+var_69C], eax
.text:000016D2                 jnz     loc_1559
.text:000016D8                 mov     [ebp+var_6B4], 0
.text:000016E2                 jmp     short loc_16F3
.text:000016E4 ; ---------------------------------------------------------------------------
.text:000016E4
.text:000016E4 loc_16E4:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+BD1j
.text:000016E4                 mov     ecx, [ebp+var_6B4]
.text:000016EA                 add     ecx, 1
.text:000016ED                 mov     [ebp+var_6B4], ecx
.text:000016F3
.text:000016F3 loc_16F3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+872j
.text:000016F3                 cmp     [ebp+var_6B4], 4
.text:000016FA                 jnb     loc_1A46
.text:00001700                 mov     [ebp+var_6B8], 0
.text:0000170A
.text:0000170A loc_170A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+8DBj
.text:0000170A                 push    408h            ; Size
.text:0000170F                 push    0               ; Val
.text:00001711                 mov     edx, [ebp+var_6B8]
.text:00001717                 imul    edx, 408h
.text:0000171D                 mov     eax, [ebp+var_8]
.text:00001720                 lea     ecx, [eax+edx+620h]
.text:00001727                 push    ecx             ; Dst
.text:00001728                 call    _memset
.text:0000172D                 add     esp, 0Ch
.text:00001730                 mov     edx, [ebp+var_6B8]
.text:00001736                 add     edx, 1
.text:00001739                 mov     [ebp+var_6B8], edx
.text:0000173F                 mov     eax, [ebp+var_6B8]
.text:00001745                 cmp     eax, [ebp+var_68C]
.text:0000174B                 jb      short loc_170A
.text:0000174D                 mov     [ebp+var_6BC], 0
.text:00001757                 mov     [ebp+var_6C0], 0
.text:00001761
.text:00001761 loc_1761:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+AFAj
.text:00001761                 mov     [ebp+var_794], 0
.text:0000176B
.text:0000176B loc_176B:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+98Cj
.text:0000176B                 mov     ecx, [ebp+var_244]
.text:00001771                 add     ecx, [ebp+var_6BC]
.text:00001777                 movzx   edx, byte ptr [ecx]
.text:0000177A                 mov     [ebp+var_798], edx
.text:00001780                 mov     eax, [ebp+var_6BC]
.text:00001786                 add     eax, 1
.text:00001789                 mov     [ebp+var_6BC], eax
.text:0000178F                 cmp     [ebp+var_798], 0FFh
.text:00001799                 jb      short loc_17C5
.text:0000179B                 mov     ecx, [ebp+var_244]
.text:000017A1                 add     ecx, [ebp+var_6BC]
.text:000017A7                 movzx   edx, byte ptr [ecx]
.text:000017AA                 add     edx, [ebp+var_798]
.text:000017B0                 mov     [ebp+var_798], edx
.text:000017B6                 mov     eax, [ebp+var_6BC]
.text:000017BC                 add     eax, 1
.text:000017BF                 mov     [ebp+var_6BC], eax
.text:000017C5
.text:000017C5 loc_17C5:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+929j
.text:000017C5                 mov     ecx, [ebp+var_794]
.text:000017CB                 mov     edx, [ebp+var_798]
.text:000017D1                 mov     [ebp+ecx*4+var_78C], edx
.text:000017D8                 mov     eax, [ebp+var_794]
.text:000017DE                 add     eax, 1
.text:000017E1                 mov     [ebp+var_794], eax
.text:000017E7                 cmp     [ebp+var_794], 32h ; '2'
.text:000017EE                 jnb     short loc_1802
.text:000017F0                 mov     ecx, [ebp+var_6BC]
.text:000017F6                 cmp     ecx, [ebp+var_248]
.text:000017FC                 jb      loc_176B
.text:00001802
.text:00001802 loc_1802:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+97Ej
.text:00001802                 mov     [ebp+var_79C], 0FFFFFFFFh
.text:0000180C                 mov     [ebp+var_7A0], 0
.text:00001816
.text:00001816 loc_1816:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+A5Dj
.text:00001816                 mov     edx, [ebp+var_7A0]
.text:0000181C                 imul    edx, 102h
.text:00001822                 mov     eax, [ebp+var_8]
.text:00001825                 lea     ecx, [eax+edx+14h]
.text:00001829                 mov     [ebp+var_7A4], ecx
.text:0000182F                 mov     [ebp+var_7A8], 0
.text:00001839                 mov     [ebp+var_7AC], 0
.text:00001843
.text:00001843 loc_1843:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+A11j
.text:00001843                 mov     edx, [ebp+var_7AC]
.text:00001849                 mov     eax, [ebp+edx*4+var_78C]
.text:00001850                 mov     ecx, [ebp+var_7A4]
.text:00001856                 movzx   edx, byte ptr [ecx+eax]
.text:0000185A                 add     edx, [ebp+var_7A8]
.text:00001860                 mov     [ebp+var_7A8], edx
.text:00001866                 mov     eax, [ebp+var_7AC]
.text:0000186C                 add     eax, 1
.text:0000186F                 mov     [ebp+var_7AC], eax
.text:00001875                 mov     ecx, [ebp+var_7AC]
.text:0000187B                 cmp     ecx, [ebp+var_794]
.text:00001881                 jb      short loc_1843
.text:00001883                 mov     edx, [ebp+var_7A8]
.text:00001889                 cmp     edx, [ebp+var_79C]
.text:0000188F                 jnb     short loc_18B2
.text:00001891                 mov     eax, [ebp+var_8]
.text:00001894                 add     eax, [ebp+var_6C0]
.text:0000189A                 mov     cl, byte ptr [ebp+var_7A0]
.text:000018A0                 mov     [eax+3680h], cl
.text:000018A6                 mov     edx, [ebp+var_7A8]
.text:000018AC                 mov     [ebp+var_79C], edx
.text:000018B2
.text:000018B2 loc_18B2:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+A1Fj
.text:000018B2                 mov     eax, [ebp+var_7A0]
.text:000018B8                 add     eax, 1
.text:000018BB                 mov     [ebp+var_7A0], eax
.text:000018C1                 mov     ecx, [ebp+var_7A0]
.text:000018C7                 cmp     ecx, [ebp+var_68C]
.text:000018CD                 jb      loc_1816
.text:000018D3                 mov     edx, [ebp+var_8]
.text:000018D6                 add     edx, [ebp+var_6C0]
.text:000018DC                 movzx   eax, byte ptr [edx+3680h]
.text:000018E3                 imul    eax, 408h
.text:000018E9                 mov     ecx, [ebp+var_8]
.text:000018EC                 lea     edx, [ecx+eax+620h]
.text:000018F3                 mov     [ebp+var_7B0], edx
.text:000018F9                 mov     eax, [ebp+var_6C0]
.text:000018FF                 add     eax, 1
.text:00001902                 mov     [ebp+var_6C0], eax
.text:00001908                 mov     [ebp+var_7B4], 0
.text:00001912
.text:00001912 loc_1912:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+AECj
.text:00001912                 mov     ecx, [ebp+var_7B4]
.text:00001918                 mov     edx, [ebp+ecx*4+var_78C]
.text:0000191F                 mov     eax, [ebp+var_7B0]
.text:00001925                 mov     ecx, [eax+edx*4]
.text:00001928                 add     ecx, 1
.text:0000192B                 mov     edx, [ebp+var_7B4]
.text:00001931                 mov     eax, [ebp+edx*4+var_78C]
.text:00001938                 mov     edx, [ebp+var_7B0]
.text:0000193E                 mov     [edx+eax*4], ecx
.text:00001941                 mov     eax, [ebp+var_7B4]
.text:00001947                 add     eax, 1
.text:0000194A                 mov     [ebp+var_7B4], eax
.text:00001950                 mov     ecx, [ebp+var_7B4]
.text:00001956                 cmp     ecx, [ebp+var_794]
.text:0000195C                 jb      short loc_1912
.text:0000195E                 mov     edx, [ebp+var_6BC]
.text:00001964                 cmp     edx, [ebp+var_248]
.text:0000196A                 jb      loc_1761
.text:00001970                 mov     [ebp+var_7B8], 0
.text:0000197A
.text:0000197A loc_197A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+BCBj
.text:0000197A                 mov     eax, [ebp+var_7B8]
.text:00001980                 imul    eax, 408h
.text:00001986                 mov     ecx, [ebp+var_8]
.text:00001989                 lea     edx, [ecx+eax+620h]
.text:00001990                 mov     [ebp+var_7BC], edx
.text:00001996                 mov     [ebp+var_7C0], 0
.text:000019A0
.text:000019A0 loc_19A0:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+B70j
.text:000019A0                 mov     eax, [ebp+var_7C0]
.text:000019A6                 mov     ecx, [ebp+var_7BC]
.text:000019AC                 cmp     dword ptr [ecx+eax*4], 0
.text:000019B0                 jnz     short loc_19C5
.text:000019B2                 mov     edx, [ebp+var_7C0]
.text:000019B8                 mov     eax, [ebp+var_7BC]
.text:000019BE                 mov     dword ptr [eax+edx*4], 1
.text:000019C5
.text:000019C5 loc_19C5:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+B40j
.text:000019C5                 mov     ecx, [ebp+var_7C0]
.text:000019CB                 add     ecx, 1
.text:000019CE                 mov     [ebp+var_7C0], ecx
.text:000019D4                 mov     edx, [ebp+var_7C0]
.text:000019DA                 cmp     edx, [ebp+var_240]
.text:000019E0                 jb      short loc_19A0
.text:000019E2                 push    10h
.text:000019E4                 push    102h
.text:000019E9                 mov     eax, [ebp+var_7B8]
.text:000019EF                 imul    eax, 102h
.text:000019F5                 mov     ecx, [ebp+var_8]
.text:000019F8                 lea     edx, [ecx+eax+14h]
.text:000019FC                 push    edx
.text:000019FD                 mov     eax, [ebp+var_7B8]
.text:00001A03                 imul    eax, 408h
.text:00001A09                 mov     ecx, [ebp+var_8]
.text:00001A0C                 lea     edx, [ecx+eax+1E50h]
.text:00001A13                 push    edx
.text:00001A14                 mov     eax, [ebp+var_7BC]
.text:00001A1A                 push    eax
.text:00001A1B                 call    _Huffman_Generate@20 ; Huffman_Generate(x,x,x,x,x)
.text:00001A20                 mov     ecx, [ebp+var_7B8]
.text:00001A26                 add     ecx, 1
.text:00001A29                 mov     [ebp+var_7B8], ecx
.text:00001A2F                 mov     edx, [ebp+var_7B8]
.text:00001A35                 cmp     edx, [ebp+var_68C]
.text:00001A3B                 jb      loc_197A
.text:00001A41                 jmp     loc_16E4
.text:00001A46 ; ---------------------------------------------------------------------------
.text:00001A46
.text:00001A46 loc_1A46:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+88Aj
.text:00001A46                 mov     [ebp+var_7D4], 0
.text:00001A50
.text:00001A50 loc_1A50:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C0Ej
.text:00001A50                 mov     eax, [ebp+var_7D4]
.text:00001A56                 mov     cl, byte ptr [ebp+var_7D4]
.text:00001A5C                 mov     [ebp+eax+var_7CC], cl
.text:00001A63                 mov     edx, [ebp+var_7D4]
.text:00001A69                 add     edx, 1
.text:00001A6C                 mov     [ebp+var_7D4], edx
.text:00001A72                 mov     eax, [ebp+var_7D4]
.text:00001A78                 cmp     eax, [ebp+var_68C]
.text:00001A7E                 jb      short loc_1A50
.text:00001A80                 mov     [ebp+var_7D8], 0
.text:00001A8A
.text:00001A8A loc_1A8A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+CD6j
.text:00001A8A                 mov     ecx, [ebp+var_8]
.text:00001A8D                 add     ecx, [ebp+var_7D8]
.text:00001A93                 mov     dl, [ecx+3680h]
.text:00001A99                 mov     [ebp+var_7D9], dl
.text:00001A9F                 mov     [ebp+var_7E0], 0
.text:00001AA9                 jmp     short loc_1ABA
.text:00001AAB ; ---------------------------------------------------------------------------
.text:00001AAB
.text:00001AAB loc_1AAB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C6Dj
.text:00001AAB                 mov     eax, [ebp+var_7E0]
.text:00001AB1                 add     eax, 1
.text:00001AB4                 mov     [ebp+var_7E0], eax
.text:00001ABA
.text:00001ABA loc_1ABA:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C39j
.text:00001ABA                 mov     ecx, [ebp+var_7E0]
.text:00001AC0                 movzx   edx, [ebp+ecx+var_7CC]
.text:00001AC8                 movzx   eax, [ebp+var_7D9]
.text:00001ACF                 cmp     edx, eax
.text:00001AD1                 jz      short loc_1ADF
.text:00001AD3                 push    1               ; unsigned __int8
.text:00001AD5                 mov     ecx, [ebp+var_8] ; this
.text:00001AD8                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001ADD                 jmp     short loc_1AAB
.text:00001ADF ; ---------------------------------------------------------------------------
.text:00001ADF
.text:00001ADF loc_1ADF:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C61j
.text:00001ADF                 push    0               ; unsigned __int8
.text:00001AE1                 mov     ecx, [ebp+var_8] ; this
.text:00001AE4                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001AE9                 jmp     short loc_1AFA
.text:00001AEB ; ---------------------------------------------------------------------------
.text:00001AEB
.text:00001AEB loc_1AEB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+CADj
.text:00001AEB                 mov     ecx, [ebp+var_7E0]
.text:00001AF1                 sub     ecx, 1
.text:00001AF4                 mov     [ebp+var_7E0], ecx
.text:00001AFA
.text:00001AFA loc_1AFA:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C79j
.text:00001AFA                 cmp     [ebp+var_7E0], 0
.text:00001B01                 jbe     short loc_1B1F
.text:00001B03                 mov     edx, [ebp+var_7E0]
.text:00001B09                 mov     eax, [ebp+var_7E0]
.text:00001B0F                 mov     cl, [ebp+eax+var_7CD]
.text:00001B16                 mov     [ebp+edx+var_7CC], cl
.text:00001B1D                 jmp     short loc_1AEB
.text:00001B1F ; ---------------------------------------------------------------------------
.text:00001B1F
.text:00001B1F loc_1B1F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+C91j
.text:00001B1F                 mov     dl, [ebp+var_7D9]
.text:00001B25                 mov     [ebp+var_7CC], dl
.text:00001B2B                 mov     eax, [ebp+var_7D8]
.text:00001B31                 add     eax, 1
.text:00001B34                 mov     [ebp+var_7D8], eax
.text:00001B3A                 mov     ecx, [ebp+var_7D8]
.text:00001B40                 cmp     ecx, [ebp+var_690]
.text:00001B46                 jb      loc_1A8A
.text:00001B4C                 mov     [ebp+var_7E4], 0
.text:00001B56
.text:00001B56 loc_1B56:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+DE0j
.text:00001B56                 mov     edx, [ebp+var_7E4]
.text:00001B5C                 imul    edx, 102h
.text:00001B62                 mov     eax, [ebp+var_8]
.text:00001B65                 lea     ecx, [eax+edx+14h]
.text:00001B69                 mov     [ebp+var_7E8], ecx
.text:00001B6F                 mov     edx, [ebp+var_7E8]
.text:00001B75                 movzx   eax, byte ptr [edx]
.text:00001B78                 mov     [ebp+var_7EC], eax
.text:00001B7E                 push    5               ; unsigned int
.text:00001B80                 mov     ecx, [ebp+var_7EC]
.text:00001B86                 push    ecx             ; unsigned int
.text:00001B87                 mov     ecx, [ebp+var_8] ; this
.text:00001B8A                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00001B8F                 mov     [ebp+var_7F0], 0
.text:00001B99
.text:00001B99 loc_1B99:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+DBFj
.text:00001B99                 mov     edx, [ebp+var_7E8]
.text:00001B9F                 add     edx, [ebp+var_7F0]
.text:00001BA5                 movzx   eax, byte ptr [edx]
.text:00001BA8                 mov     [ebp+var_7F4], eax
.text:00001BAE
.text:00001BAE loc_1BAE:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint):loc_1C08j
.text:00001BAE                 mov     ecx, [ebp+var_7EC]
.text:00001BB4                 cmp     ecx, [ebp+var_7F4]
.text:00001BBA                 jz      short loc_1C0A
.text:00001BBC                 push    1               ; unsigned __int8
.text:00001BBE                 mov     ecx, [ebp+var_8] ; this
.text:00001BC1                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001BC6                 mov     edx, [ebp+var_7EC]
.text:00001BCC                 cmp     edx, [ebp+var_7F4]
.text:00001BD2                 jnb     short loc_1BEF
.text:00001BD4                 push    0               ; unsigned __int8
.text:00001BD6                 mov     ecx, [ebp+var_8] ; this
.text:00001BD9                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001BDE                 mov     eax, [ebp+var_7EC]
.text:00001BE4                 add     eax, 1
.text:00001BE7                 mov     [ebp+var_7EC], eax
.text:00001BED                 jmp     short loc_1C08
.text:00001BEF ; ---------------------------------------------------------------------------
.text:00001BEF
.text:00001BEF loc_1BEF:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+D62j
.text:00001BEF                 push    1               ; unsigned __int8
.text:00001BF1                 mov     ecx, [ebp+var_8] ; this
.text:00001BF4                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001BF9                 mov     ecx, [ebp+var_7EC]
.text:00001BFF                 sub     ecx, 1
.text:00001C02                 mov     [ebp+var_7EC], ecx
.text:00001C08
.text:00001C08 loc_1C08:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+D7Dj
.text:00001C08                 jmp     short loc_1BAE
.text:00001C0A ; ---------------------------------------------------------------------------
.text:00001C0A
.text:00001C0A loc_1C0A:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+D4Aj
.text:00001C0A                 push    0               ; unsigned __int8
.text:00001C0C                 mov     ecx, [ebp+var_8] ; this
.text:00001C0F                 call    ?WriteBit2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteBit2(uchar)
.text:00001C14                 mov     edx, [ebp+var_7F0]
.text:00001C1A                 add     edx, 1
.text:00001C1D                 mov     [ebp+var_7F0], edx
.text:00001C23                 mov     eax, [ebp+var_7F0]
.text:00001C29                 cmp     eax, [ebp+var_240]
.text:00001C2F                 jb      loc_1B99
.text:00001C35                 mov     ecx, [ebp+var_7E4]
.text:00001C3B                 add     ecx, 1
.text:00001C3E                 mov     [ebp+var_7E4], ecx
.text:00001C44                 mov     edx, [ebp+var_7E4]
.text:00001C4A                 cmp     edx, [ebp+var_68C]
.text:00001C50                 jb      loc_1B56
.text:00001C56                 mov     [ebp+var_7F8], 0
.text:00001C60                 mov     [ebp+var_7FC], 0
.text:00001C6A                 mov     [ebp+var_800], 0
.text:00001C74                 mov     [ebp+var_804], 0
.text:00001C7E                 mov     [ebp+var_808], 0
.text:00001C88
.text:00001C88 loc_1C88:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F25j
.text:00001C88                 mov     eax, [ebp+var_244]
.text:00001C8E                 add     eax, [ebp+var_808]
.text:00001C94                 movzx   ecx, byte ptr [eax]
.text:00001C97                 mov     [ebp+var_80C], ecx
.text:00001C9D                 mov     edx, [ebp+var_808]
.text:00001CA3                 add     edx, 1
.text:00001CA6                 mov     [ebp+var_808], edx
.text:00001CAC                 cmp     [ebp+var_80C], 0FFh
.text:00001CB6                 jb      short loc_1CE2
.text:00001CB8                 mov     eax, [ebp+var_244]
.text:00001CBE                 add     eax, [ebp+var_808]
.text:00001CC4                 movzx   ecx, byte ptr [eax]
.text:00001CC7                 add     ecx, [ebp+var_80C]
.text:00001CCD                 mov     [ebp+var_80C], ecx
.text:00001CD3                 mov     edx, [ebp+var_808]
.text:00001CD9                 add     edx, 1
.text:00001CDC                 mov     [ebp+var_808], edx
.text:00001CE2
.text:00001CE2 loc_1CE2:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+E46j
.text:00001CE2                 cmp     [ebp+var_7F8], 0
.text:00001CE9                 jnz     short loc_1D4F
.text:00001CEB                 mov     [ebp+var_7F8], 32h ; '2'
.text:00001CF5                 mov     eax, [ebp+var_8]
.text:00001CF8                 add     eax, [ebp+var_7FC]
.text:00001CFE                 movzx   ecx, byte ptr [eax+3680h]
.text:00001D05                 mov     [ebp+var_810], ecx
.text:00001D0B                 mov     edx, [ebp+var_7FC]
.text:00001D11                 add     edx, 1
.text:00001D14                 mov     [ebp+var_7FC], edx
.text:00001D1A                 mov     eax, [ebp+var_810]
.text:00001D20                 imul    eax, 102h
.text:00001D26                 mov     ecx, [ebp+var_8]
.text:00001D29                 lea     edx, [ecx+eax+14h]
.text:00001D2D                 mov     [ebp+var_800], edx
.text:00001D33                 mov     eax, [ebp+var_810]
.text:00001D39                 imul    eax, 408h
.text:00001D3F                 mov     ecx, [ebp+var_8]
.text:00001D42                 lea     edx, [ecx+eax+1E50h]
.text:00001D49                 mov     [ebp+var_804], edx
.text:00001D4F
.text:00001D4F loc_1D4F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+E79j
.text:00001D4F                 mov     eax, [ebp+var_7F8]
.text:00001D55                 sub     eax, 1
.text:00001D58                 mov     [ebp+var_7F8], eax
.text:00001D5E                 mov     ecx, [ebp+var_800]
.text:00001D64                 add     ecx, [ebp+var_80C]
.text:00001D6A                 movzx   edx, byte ptr [ecx]
.text:00001D6D                 push    edx             ; unsigned int
.text:00001D6E                 mov     eax, [ebp+var_80C]
.text:00001D74                 mov     ecx, [ebp+var_804]
.text:00001D7A                 mov     edx, [ecx+eax*4]
.text:00001D7D                 push    edx             ; unsigned int
.text:00001D7E                 mov     eax, [ebp+var_8]
.text:00001D81                 mov     ecx, [eax+10h]  ; this
.text:00001D84                 call    ?WriteBits@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXII@Z ; NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint)
.text:00001D89                 mov     ecx, [ebp+var_808]
.text:00001D8F                 cmp     ecx, [ebp+var_248]
.text:00001D95                 jb      loc_1C88
.text:00001D9B                 mov     edx, [ebp+var_8]
.text:00001D9E                 movzx   eax, byte ptr [edx+8CDCh]
.text:00001DA5                 test    eax, eax
.text:00001DA7                 jnz     short loc_1DAB
.text:00001DA9                 jmp     short loc_1DF8
.text:00001DAB ; ---------------------------------------------------------------------------
.text:00001DAB
.text:00001DAB loc_1DAB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F37j
.text:00001DAB                 mov     ecx, [ebp+var_8]
.text:00001DAE                 mov     ecx, [ecx+10h]  ; this
.text:00001DB1                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:00001DB6                 sub     eax, [ebp+var_680]
.text:00001DBC                 mov     [ebp+var_814], eax
.text:00001DC2                 mov     edx, [ebp+var_814]
.text:00001DC8                 cmp     edx, [ebp+var_67C]
.text:00001DCE                 ja      short loc_1DF3
.text:00001DD0                 cmp     [ebp+var_688], 6
.text:00001DD7                 jnz     short loc_1DDB
.text:00001DD9                 jmp     short loc_1DF8
.text:00001DDB ; ---------------------------------------------------------------------------
.text:00001DDB
.text:00001DDB loc_1DDB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F67j
.text:00001DDB                 mov     eax, [ebp+var_814]
.text:00001DE1                 mov     [ebp+var_67C], eax
.text:00001DE7                 mov     ecx, [ebp+var_688]
.text:00001DED                 mov     [ebp+var_678], ecx
.text:00001DF3
.text:00001DF3 loc_1DF3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F5Ej
.text:00001DF3                 jmp     loc_1415
.text:00001DF8 ; ---------------------------------------------------------------------------
.text:00001DF8
.text:00001DF8 loc_1DF8:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+5BBj
.text:00001DF8                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F39j ...
.text:00001DF8                 push    edx
.text:00001DF9                 mov     ecx, ebp
.text:00001DFB                 push    eax
.text:00001DFC                 lea     edx, $LN136
.text:00001E02                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001E07                 pop     eax
.text:00001E08                 pop     edx
.text:00001E09                 pop     edi
.text:00001E0A                 mov     ecx, [ebp+var_4]
.text:00001E0D                 xor     ecx, ebp
.text:00001E0F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001E14                 add     esp, 818h
.text:00001E1A                 cmp     ebp, esp
.text:00001E1C                 call    __RTC_CheckEsp
.text:00001E21                 mov     esp, ebp
.text:00001E23                 pop     ebp
.text:00001E24                 retn    8
.text:00001E24 ?EncodeBlock@CThreadInfo@NBZip2@NCompress@@AAEXPBEI@Z endp
.text:00001E24
.text:00001E24 ; ---------------------------------------------------------------------------
.text:00001E27                 align 4
.text:00001E28 $LN136          dd 6                    ; DATA XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F8Co
.text:00001E2C                 dd offset $LN135
.text:00001E30 $LN135          dd 0FFFFFEF0h, 100h     ; DATA XREF: .text:00001E2Co
.text:00001E38                 dd offset $LN129        ; "mtf"
.text:00001E3C                 dd 0FFFFFDE4h, 100h
.text:00001E44                 dd offset $LN130        ; "inUse"
.text:00001E48                 db 0CCh
.text:00001E49                 db 0FDh, 2 dup(0FFh)
.text:00001E4C                 dd 10h
.text:00001E50                 dd offset $LN131        ; "inUse16"
.text:00001E54                 dd 0FFFFF9ACh, 408h
.text:00001E5C                 dd offset $LN132        ; "symbolCounts"
.text:00001E60                 dd 0FFFFF874h, 0C8h
.text:00001E68                 dd offset $LN133        ; "symbols"
.text:00001E6C                 dd 0FFFFF834h, 6
.text:00001E74                 dd offset $LN134        ; "mtfSel"
.text:00001E78 $LN134          db 'mtfSel',0           ; DATA XREF: .text:00001E74o
.text:00001E7F $LN133          db 'symbols',0          ; DATA XREF: .text:00001E68o
.text:00001E87 $LN132          db 'symbolCounts',0     ; DATA XREF: .text:00001E5Co
.text:00001E94 $LN131          db 'inUse16',0          ; DATA XREF: .text:00001E50o
.text:00001E9C $LN130          db 'inUse',0            ; DATA XREF: .text:00001E44o
.text:00001EA2 $LN129          db 'mtf',0              ; DATA XREF: .text:00001E38o
.text:00001EA6                 align 10h
.text:00001EB0
.text:00001EB0 ; =============== S U B R O U T I N E =======================================
.text:00001EB0
.text:00001EB0 ; Attributes: bp-based frame
.text:00001EB0
.text:00001EB0 ; unsigned int __thiscall NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(NCompress::NBZip2::CThreadInfo *this, const unsigned __int8 *, unsigned int)
.text:00001EB0                 public ?EncodeBlockWithHeaders@CThreadInfo@NBZip2@NCompress@@AAEIPBEI@Z
.text:00001EB0 ?EncodeBlockWithHeaders@CThreadInfo@NBZip2@NCompress@@AAEIPBEI@Z proc near
.text:00001EB0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+182p
.text:00001EB0
.text:00001EB0 var_24          = dword ptr -24h
.text:00001EB0 var_20          = dword ptr -20h
.text:00001EB0 var_1C          = dword ptr -1Ch
.text:00001EB0 var_18          = dword ptr -18h
.text:00001EB0 var_14          = dword ptr -14h
.text:00001EB0 var_10          = dword ptr -10h
.text:00001EB0 var_C           = dword ptr -0Ch
.text:00001EB0 var_8           = dword ptr -8
.text:00001EB0 var_4           = dword ptr -4
.text:00001EB0 arg_0           = dword ptr  8
.text:00001EB0 arg_4           = dword ptr  0Ch
.text:00001EB0
.text:00001EB0                 push    ebp
.text:00001EB1                 mov     ebp, esp
.text:00001EB3                 sub     esp, 24h
.text:00001EB6                 mov     eax, 0CCCCCCCCh
.text:00001EBB                 mov     [ebp+var_24], eax
.text:00001EBE                 mov     [ebp+var_20], eax
.text:00001EC1                 mov     [ebp+var_1C], eax
.text:00001EC4                 mov     [ebp+var_18], eax
.text:00001EC7                 mov     [ebp+var_14], eax
.text:00001ECA                 mov     [ebp+var_10], eax
.text:00001ECD                 mov     [ebp+var_C], eax
.text:00001ED0                 mov     [ebp+var_8], eax
.text:00001ED3                 mov     [ebp+var_4], eax
.text:00001ED6                 mov     [ebp+var_4], ecx
.text:00001ED9                 push    31h ; '1'       ; unsigned __int8
.text:00001EDB                 mov     ecx, [ebp+var_4] ; this
.text:00001EDE                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001EE3                 push    41h ; 'A'       ; unsigned __int8
.text:00001EE5                 mov     ecx, [ebp+var_4] ; this
.text:00001EE8                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001EED                 push    59h ; 'Y'       ; unsigned __int8
.text:00001EEF                 mov     ecx, [ebp+var_4] ; this
.text:00001EF2                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001EF7                 push    26h ; '&'       ; unsigned __int8
.text:00001EF9                 mov     ecx, [ebp+var_4] ; this
.text:00001EFC                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001F01                 push    53h ; 'S'       ; unsigned __int8
.text:00001F03                 mov     ecx, [ebp+var_4] ; this
.text:00001F06                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001F0B                 push    59h ; 'Y'       ; unsigned __int8
.text:00001F0D                 mov     ecx, [ebp+var_4] ; this
.text:00001F10                 call    ?WriteByte2@CThreadInfo@NBZip2@NCompress@@AAEXE@Z ; NCompress::NBZip2::CThreadInfo::WriteByte2(uchar)
.text:00001F15                 lea     ecx, [ebp+var_C] ; this
.text:00001F18                 call    ??0CBZip2Crc@@QAE@XZ ; CBZip2Crc::CBZip2Crc(void)
.text:00001F1D                 mov     [ebp+var_14], 0
.text:00001F24                 mov     eax, [ebp+arg_0]
.text:00001F27                 mov     cl, [eax]
.text:00001F29                 mov     byte ptr [ebp+var_18+3], cl
.text:00001F2C                 mov     [ebp+var_1C], 0
.text:00001F33
.text:00001F33 loc_1F33:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+FFj
.text:00001F33                 mov     edx, [ebp+arg_0]
.text:00001F36                 add     edx, [ebp+var_1C]
.text:00001F39                 mov     al, [edx]
.text:00001F3B                 mov     byte ptr [ebp+var_20+3], al
.text:00001F3E                 cmp     [ebp+var_14], 4
.text:00001F42                 jnz     short loc_1F6F
.text:00001F44                 jmp     short loc_1F4F
.text:00001F46 ; ---------------------------------------------------------------------------
.text:00001F46
.text:00001F46 loc_1F46:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+B4j
.text:00001F46                 mov     cl, byte ptr [ebp+var_20+3]
.text:00001F49                 sub     cl, 1
.text:00001F4C                 mov     byte ptr [ebp+var_20+3], cl
.text:00001F4F
.text:00001F4F loc_1F4F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+94j
.text:00001F4F                 movzx   edx, byte ptr [ebp+var_20+3]
.text:00001F53                 test    edx, edx
.text:00001F55                 jle     short loc_1F66
.text:00001F57                 movzx   eax, byte ptr [ebp+var_18+3]
.text:00001F5B                 push    eax             ; unsigned __int8
.text:00001F5C                 lea     ecx, [ebp+var_C] ; this
.text:00001F5F                 call    ?UpdateByte@CBZip2Crc@@QAEXE@Z ; CBZip2Crc::UpdateByte(uchar)
.text:00001F64                 jmp     short loc_1F46
.text:00001F66 ; ---------------------------------------------------------------------------
.text:00001F66
.text:00001F66 loc_1F66:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+A5j
.text:00001F66                 mov     [ebp+var_14], 0
.text:00001F6D                 jmp     short loc_1FA0
.text:00001F6F ; ---------------------------------------------------------------------------
.text:00001F6F
.text:00001F6F loc_1F6F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+92j
.text:00001F6F                 movzx   ecx, byte ptr [ebp+var_18+3]
.text:00001F73                 movzx   edx, byte ptr [ebp+var_20+3]
.text:00001F77                 cmp     ecx, edx
.text:00001F79                 jnz     short loc_1F86
.text:00001F7B                 mov     eax, [ebp+var_14]
.text:00001F7E                 add     eax, 1
.text:00001F81                 mov     [ebp+var_14], eax
.text:00001F84                 jmp     short loc_1F93
.text:00001F86 ; ---------------------------------------------------------------------------
.text:00001F86
.text:00001F86 loc_1F86:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+C9j
.text:00001F86                 mov     [ebp+var_14], 1
.text:00001F8D                 mov     cl, byte ptr [ebp+var_20+3]
.text:00001F90                 mov     byte ptr [ebp+var_18+3], cl
.text:00001F93
.text:00001F93 loc_1F93:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+D4j
.text:00001F93                 movzx   edx, byte ptr [ebp+var_20+3]
.text:00001F97                 push    edx             ; unsigned __int8
.text:00001F98                 lea     ecx, [ebp+var_C] ; this
.text:00001F9B                 call    ?UpdateByte@CBZip2Crc@@QAEXE@Z ; CBZip2Crc::UpdateByte(uchar)
.text:00001FA0
.text:00001FA0 loc_1FA0:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+BDj
.text:00001FA0                 mov     eax, [ebp+var_1C]
.text:00001FA3                 add     eax, 1
.text:00001FA6                 mov     [ebp+var_1C], eax
.text:00001FA9                 mov     ecx, [ebp+var_1C]
.text:00001FAC                 cmp     ecx, [ebp+arg_4]
.text:00001FAF                 jb      short loc_1F33
.text:00001FB1                 lea     ecx, [ebp+var_C] ; this
.text:00001FB4                 call    ?GetDigest@CBZip2Crc@@QBEIXZ ; CBZip2Crc::GetDigest(void)
.text:00001FB9                 mov     [ebp+var_24], eax
.text:00001FBC                 mov     edx, [ebp+var_24]
.text:00001FBF                 push    edx             ; unsigned int
.text:00001FC0                 mov     ecx, [ebp+var_4] ; this
.text:00001FC3                 call    ?WriteCrc2@CThreadInfo@NBZip2@NCompress@@AAEXI@Z ; NCompress::NBZip2::CThreadInfo::WriteCrc2(uint)
.text:00001FC8                 mov     eax, [ebp+arg_4]
.text:00001FCB                 push    eax             ; unsigned int
.text:00001FCC                 mov     ecx, [ebp+arg_0]
.text:00001FCF                 push    ecx             ; unsigned __int8 *
.text:00001FD0                 mov     ecx, [ebp+var_4] ; this
.text:00001FD3                 call    ?EncodeBlock@CThreadInfo@NBZip2@NCompress@@AAEXPBEI@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)
.text:00001FD8                 mov     eax, [ebp+var_24]
.text:00001FDB                 push    edx
.text:00001FDC                 mov     ecx, ebp
.text:00001FDE                 push    eax
.text:00001FDF                 lea     edx, $LN14_0
.text:00001FE5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001FEA                 pop     eax
.text:00001FEB                 pop     edx
.text:00001FEC                 add     esp, 24h
.text:00001FEF                 cmp     ebp, esp
.text:00001FF1                 call    __RTC_CheckEsp
.text:00001FF6                 mov     esp, ebp
.text:00001FF8                 pop     ebp
.text:00001FF9                 retn    8
.text:00001FF9 ?EncodeBlockWithHeaders@CThreadInfo@NBZip2@NCompress@@AAEIPBEI@Z endp
.text:00001FF9
.text:00001FF9 ; ---------------------------------------------------------------------------
.text:00001FFC $LN14_0         dd 1                    ; DATA XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+12Fo
.text:00002000                 dd offset $LN13
.text:00002004 $LN13           dd 0FFFFFFF4h, 4        ; DATA XREF: .text:00002000o
.text:0000200C                 dd offset $LN12
.text:00002010 $LN12           dd 637263h, 3 dup(0CCCCCCCCh) ; DATA XREF: .text:0000200Co
.text:00002020
.text:00002020 ; =============== S U B R O U T I N E =======================================
.text:00002020
.text:00002020 ; Attributes: bp-based frame
.text:00002020
.text:00002020 ; void __thiscall NCompress::NBZip2::CThreadInfo::EncodeBlock2(NCompress::NBZip2::CThreadInfo *this, const unsigned __int8 *, unsigned int, unsigned int)
.text:00002020                 public ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z
.text:00002020 ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z proc near
.text:00002020                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+E2p
.text:00002020                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+FFp ...
.text:00002020
.text:00002020 var_40          = dword ptr -40h
.text:00002020 var_3C          = dword ptr -3Ch
.text:00002020 var_38          = dword ptr -38h
.text:00002020 var_34          = dword ptr -34h
.text:00002020 var_30          = dword ptr -30h
.text:00002020 var_2C          = dword ptr -2Ch
.text:00002020 var_28          = dword ptr -28h
.text:00002020 var_24          = dword ptr -24h
.text:00002020 var_20          = dword ptr -20h
.text:00002020 var_1C          = dword ptr -1Ch
.text:00002020 var_16          = byte ptr -16h
.text:00002020 var_15          = byte ptr -15h
.text:00002020 var_14          = dword ptr -14h
.text:00002020 var_10          = dword ptr -10h
.text:00002020 var_9           = byte ptr -9
.text:00002020 var_8           = dword ptr -8
.text:00002020 var_4           = dword ptr -4
.text:00002020 arg_0           = dword ptr  8
.text:00002020 arg_4           = dword ptr  0Ch
.text:00002020 arg_8           = dword ptr  10h
.text:00002020
.text:00002020                 push    ebp
.text:00002021                 mov     ebp, esp
.text:00002023                 sub     esp, 40h
.text:00002026                 push    esi
.text:00002027                 push    edi
.text:00002028                 push    ecx
.text:00002029                 lea     edi, [ebp+var_40]
.text:0000202C                 mov     ecx, 10h
.text:00002031                 mov     eax, 0CCCCCCCCh
.text:00002036                 rep stosd
.text:00002038                 pop     ecx
.text:00002039                 mov     [ebp+var_4], ecx
.text:0000203C                 mov     eax, [ebp+var_4]
.text:0000203F                 mov     ecx, [eax+8CD4h]
.text:00002045                 mov     [ebp+var_8], ecx
.text:00002048                 mov     [ebp+var_9], 0
.text:0000204C                 mov     edx, [ebp+var_4]
.text:0000204F                 mov     ecx, [edx+10h]  ; this
.text:00002052                 call    ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetBytePos(void)
.text:00002057                 mov     [ebp+var_10], eax
.text:0000205A                 mov     eax, [ebp+var_4]
.text:0000205D                 mov     ecx, [eax+10h]  ; this
.text:00002060                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:00002065                 mov     [ebp+var_14], eax
.text:00002068                 mov     ecx, [ebp+var_4]
.text:0000206B                 mov     ecx, [ecx+10h]  ; this
.text:0000206E                 call    ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetCurByte(void)
.text:00002073                 mov     [ebp+var_15], al
.text:00002076                 mov     [ebp+var_16], 0
.text:0000207A                 mov     [ebp+var_1C], 0
.text:00002081                 cmp     [ebp+arg_8], 1
.text:00002085                 jbe     loc_217B
.text:0000208B                 cmp     [ebp+arg_4], 400h
.text:00002092                 jb      loc_217B
.text:00002098                 mov     edx, [ebp+arg_4]
.text:0000209B                 shr     edx, 1
.text:0000209D                 mov     [ebp+var_20], edx
.text:000020A0                 jmp     short loc_20AB
.text:000020A2 ; ---------------------------------------------------------------------------
.text:000020A2
.text:000020A2 loc_20A2:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+C2j
.text:000020A2                 mov     eax, [ebp+var_20]
.text:000020A5                 add     eax, 1
.text:000020A8                 mov     [ebp+var_20], eax
.text:000020AB
.text:000020AB loc_20AB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+80j
.text:000020AB                 mov     ecx, [ebp+arg_0]
.text:000020AE                 add     ecx, [ebp+var_20]
.text:000020B1                 movzx   edx, byte ptr [ecx]
.text:000020B4                 mov     eax, [ebp+arg_0]
.text:000020B7                 add     eax, [ebp+var_20]
.text:000020BA                 movzx   ecx, byte ptr [eax-1]
.text:000020BE                 cmp     edx, ecx
.text:000020C0                 jz      short loc_20DA
.text:000020C2                 mov     edx, [ebp+arg_0]
.text:000020C5                 add     edx, [ebp+var_20]
.text:000020C8                 movzx   eax, byte ptr [edx-1]
.text:000020CC                 mov     ecx, [ebp+arg_0]
.text:000020CF                 add     ecx, [ebp+var_20]
.text:000020D2                 movzx   edx, byte ptr [ecx-2]
.text:000020D6                 cmp     eax, edx
.text:000020D8                 jnz     short loc_20E4
.text:000020DA
.text:000020DA loc_20DA:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+A0j
.text:000020DA                 mov     eax, [ebp+var_20]
.text:000020DD                 cmp     eax, [ebp+arg_4]
.text:000020E0                 jnb     short loc_20E4
.text:000020E2                 jmp     short loc_20A2
.text:000020E4 ; ---------------------------------------------------------------------------
.text:000020E4
.text:000020E4 loc_20E4:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+B8j
.text:000020E4                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+C0j
.text:000020E4                 mov     ecx, [ebp+var_20]
.text:000020E7                 cmp     ecx, [ebp+arg_4]
.text:000020EA                 jnb     loc_217B
.text:000020F0                 mov     edx, [ebp+arg_8]
.text:000020F3                 sub     edx, 1
.text:000020F6                 push    edx             ; unsigned int
.text:000020F7                 mov     eax, [ebp+var_20]
.text:000020FA                 push    eax             ; unsigned int
.text:000020FB                 mov     ecx, [ebp+arg_0]
.text:000020FE                 push    ecx             ; unsigned __int8 *
.text:000020FF                 mov     ecx, [ebp+var_4] ; this
.text:00002102                 call    ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)
.text:00002107                 mov     edx, [ebp+arg_8]
.text:0000210A                 sub     edx, 1
.text:0000210D                 push    edx             ; unsigned int
.text:0000210E                 mov     eax, [ebp+arg_4]
.text:00002111                 sub     eax, [ebp+var_20]
.text:00002114                 push    eax             ; unsigned int
.text:00002115                 mov     ecx, [ebp+arg_0]
.text:00002118                 add     ecx, [ebp+var_20]
.text:0000211B                 push    ecx             ; unsigned __int8 *
.text:0000211C                 mov     ecx, [ebp+var_4] ; this
.text:0000211F                 call    ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)
.text:00002124                 mov     edx, [ebp+var_4]
.text:00002127                 mov     ecx, [edx+10h]  ; this
.text:0000212A                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:0000212F                 mov     [ebp+var_1C], eax
.text:00002132                 mov     eax, [ebp+var_4]
.text:00002135                 mov     ecx, [eax+10h]  ; this
.text:00002138                 call    ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetCurByte(void)
.text:0000213D                 mov     [ebp+var_16], al
.text:00002140                 mov     ecx, [ebp+var_1C]
.text:00002143                 and     ecx, 7
.text:00002146                 jbe     short loc_2160
.text:00002148                 mov     edx, [ebp+var_1C]
.text:0000214B                 and     edx, 7
.text:0000214E                 mov     eax, 8
.text:00002153                 sub     eax, edx
.text:00002155                 push    eax             ; unsigned int
.text:00002156                 push    0               ; unsigned int
.text:00002158                 mov     ecx, [ebp+var_4] ; this
.text:0000215B                 call    ?WriteBits2@CThreadInfo@NBZip2@NCompress@@AAEXII@Z ; NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)
.text:00002160
.text:00002160 loc_2160:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+126j
.text:00002160                 movzx   ecx, [ebp+var_15]
.text:00002164                 push    ecx             ; unsigned __int8
.text:00002165                 mov     edx, [ebp+var_14]
.text:00002168                 and     edx, 7
.text:0000216B                 push    edx             ; unsigned int
.text:0000216C                 mov     eax, [ebp+var_4]
.text:0000216F                 mov     ecx, [eax+10h]  ; this
.text:00002172                 call    ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetCurState(uint,uchar)
.text:00002177                 mov     [ebp+var_9], 1
.text:0000217B
.text:0000217B loc_217B:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+65j
.text:0000217B                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+72j ...
.text:0000217B                 mov     ecx, [ebp+var_4]
.text:0000217E                 mov     ecx, [ecx+10h]  ; this
.text:00002181                 call    ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetBytePos(void)
.text:00002186                 mov     [ebp+var_24], eax
.text:00002189                 mov     edx, [ebp+var_4]
.text:0000218C                 mov     ecx, [edx+10h]  ; this
.text:0000218F                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:00002194                 mov     [ebp+var_28], eax
.text:00002197                 mov     eax, [ebp+arg_4]
.text:0000219A                 push    eax             ; unsigned int
.text:0000219B                 mov     ecx, [ebp+arg_0]
.text:0000219E                 push    ecx             ; unsigned __int8 *
.text:0000219F                 mov     ecx, [ebp+var_4] ; this
.text:000021A2                 call    ?EncodeBlockWithHeaders@CThreadInfo@NBZip2@NCompress@@AAEIPBEI@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)
.text:000021A7                 mov     [ebp+var_2C], eax
.text:000021AA                 mov     edx, [ebp+var_4]
.text:000021AD                 mov     ecx, [edx+10h]  ; this
.text:000021B0                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:000021B5                 mov     [ebp+var_30], eax
.text:000021B8                 movzx   eax, [ebp+var_9]
.text:000021BC                 test    eax, eax
.text:000021BE                 jz      loc_22A5
.text:000021C4                 mov     ecx, [ebp+var_30]
.text:000021C7                 sub     ecx, [ebp+var_28]
.text:000021CA                 mov     [ebp+var_34], ecx
.text:000021CD                 mov     edx, [ebp+var_1C]
.text:000021D0                 sub     edx, [ebp+var_14]
.text:000021D3                 cmp     [ebp+var_34], edx
.text:000021D6                 jnb     loc_227D
.text:000021DC                 mov     eax, [ebp+var_4]
.text:000021DF                 mov     ecx, [eax+10h]  ; this
.text:000021E2                 call    ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetBytePos(void)
.text:000021E7                 sub     eax, [ebp+var_24]
.text:000021EA                 mov     [ebp+var_38], eax
.text:000021ED                 mov     ecx, [ebp+var_4]
.text:000021F0                 mov     ecx, [ecx+10h]  ; this
.text:000021F3                 call    ?GetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QBEPAEXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetStream(void)
.text:000021F8                 mov     [ebp+var_3C], eax
.text:000021FB                 mov     [ebp+var_40], 0
.text:00002202                 jmp     short loc_220D
.text:00002204 ; ---------------------------------------------------------------------------
.text:00002204
.text:00002204 loc_2204:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+20Dj
.text:00002204                 mov     edx, [ebp+var_40]
.text:00002207                 add     edx, 1
.text:0000220A                 mov     [ebp+var_40], edx
.text:0000220D
.text:0000220D loc_220D:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+1E2j
.text:0000220D                 mov     eax, [ebp+var_40]
.text:00002210                 cmp     eax, [ebp+var_38]
.text:00002213                 jnb     short loc_222F
.text:00002215                 mov     ecx, [ebp+var_24]
.text:00002218                 add     ecx, [ebp+var_40]
.text:0000221B                 mov     edx, [ebp+var_10]
.text:0000221E                 add     edx, [ebp+var_40]
.text:00002221                 mov     eax, [ebp+var_3C]
.text:00002224                 mov     esi, [ebp+var_3C]
.text:00002227                 mov     cl, [esi+ecx]
.text:0000222A                 mov     [eax+edx], cl
.text:0000222D                 jmp     short loc_2204
.text:0000222F ; ---------------------------------------------------------------------------
.text:0000222F
.text:0000222F loc_222F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+1F3j
.text:0000222F                 mov     edx, [ebp+var_14]
.text:00002232                 add     edx, [ebp+var_30]
.text:00002235                 sub     edx, [ebp+var_28]
.text:00002238                 push    edx             ; unsigned int
.text:00002239                 mov     eax, [ebp+var_4]
.text:0000223C                 mov     ecx, [eax+10h]  ; this
.text:0000223F                 call    ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetPos(uint)
.text:00002244                 mov     ecx, [ebp+var_4]
.text:00002247                 mov     edx, [ebp+var_8]
.text:0000224A                 mov     [ecx+8CD4h], edx
.text:00002250                 mov     eax, [ebp+var_4]
.text:00002253                 mov     ecx, [eax+8CD4h]
.text:00002259                 mov     edx, [ebp+var_4]
.text:0000225C                 mov     eax, [ebp+var_2C]
.text:0000225F                 mov     [edx+ecx*4+7CD4h], eax
.text:00002266                 mov     ecx, [ebp+var_4]
.text:00002269                 mov     edx, [ecx+8CD4h]
.text:0000226F                 add     edx, 1
.text:00002272                 mov     eax, [ebp+var_4]
.text:00002275                 mov     [eax+8CD4h], edx
.text:0000227B                 jmp     short loc_22A3
.text:0000227D ; ---------------------------------------------------------------------------
.text:0000227D
.text:0000227D loc_227D:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+1B6j
.text:0000227D                 mov     ecx, [ebp+var_1C]
.text:00002280                 push    ecx             ; unsigned int
.text:00002281                 mov     edx, [ebp+var_4]
.text:00002284                 mov     ecx, [edx+10h]  ; this
.text:00002287                 call    ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetPos(uint)
.text:0000228C                 movzx   eax, [ebp+var_16]
.text:00002290                 push    eax             ; unsigned __int8
.text:00002291                 mov     ecx, [ebp+var_1C]
.text:00002294                 and     ecx, 7
.text:00002297                 push    ecx             ; unsigned int
.text:00002298                 mov     edx, [ebp+var_4]
.text:0000229B                 mov     ecx, [edx+10h]  ; this
.text:0000229E                 call    ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetCurState(uint,uchar)
.text:000022A3
.text:000022A3 loc_22A3:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+25Bj
.text:000022A3                 jmp     short loc_22DC
.text:000022A5 ; ---------------------------------------------------------------------------
.text:000022A5
.text:000022A5 loc_22A5:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+19Ej
.text:000022A5                 mov     eax, [ebp+var_4]
.text:000022A8                 mov     ecx, [ebp+var_8]
.text:000022AB                 mov     [eax+8CD4h], ecx
.text:000022B1                 mov     edx, [ebp+var_4]
.text:000022B4                 mov     eax, [edx+8CD4h]
.text:000022BA                 mov     ecx, [ebp+var_4]
.text:000022BD                 mov     edx, [ebp+var_2C]
.text:000022C0                 mov     [ecx+eax*4+7CD4h], edx
.text:000022C7                 mov     eax, [ebp+var_4]
.text:000022CA                 mov     ecx, [eax+8CD4h]
.text:000022D0                 add     ecx, 1
.text:000022D3                 mov     edx, [ebp+var_4]
.text:000022D6                 mov     [edx+8CD4h], ecx
.text:000022DC
.text:000022DC loc_22DC:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint):loc_22A3j
.text:000022DC                 pop     edi
.text:000022DD                 pop     esi
.text:000022DE                 add     esp, 40h
.text:000022E1                 cmp     ebp, esp
.text:000022E3                 call    __RTC_CheckEsp
.text:000022E8                 mov     esp, ebp
.text:000022EA                 pop     ebp
.text:000022EB                 retn    0Ch
.text:000022EB ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z endp
.text:000022EB
.text:000022EB ; ---------------------------------------------------------------------------
.text:000022EE                 align 10h
.text:000022F0
.text:000022F0 ; =============== S U B R O U T I N E =======================================
.text:000022F0
.text:000022F0 ; Attributes: bp-based frame
.text:000022F0
.text:000022F0 ; __int32 __thiscall NCompress::NBZip2::CThreadInfo::EncodeBlock3(NCompress::NBZip2::CThreadInfo *this, unsigned int)
.text:000022F0                 public ?EncodeBlock3@CThreadInfo@NBZip2@NCompress@@QAEJI@Z
.text:000022F0 ?EncodeBlock3@CThreadInfo@NBZip2@NCompress@@QAEJI@Z proc near
.text:000022F0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+1B3p
.text:000022F0                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+33Fp
.text:000022F0
.text:000022F0 var_38          = byte ptr -38h
.text:000022F0 var_34          = dword ptr -34h
.text:000022F0 var_30          = dword ptr -30h
.text:000022F0 var_28          = dword ptr -28h
.text:000022F0 var_24          = dword ptr -24h
.text:000022F0 var_20          = dword ptr -20h
.text:000022F0 var_18          = byte ptr -18h
.text:000022F0 var_4           = dword ptr -4
.text:000022F0 arg_0           = dword ptr  8
.text:000022F0
.text:000022F0                 push    ebp
.text:000022F1                 mov     ebp, esp
.text:000022F3                 sub     esp, 38h
.text:000022F6                 push    esi
.text:000022F7                 push    edi
.text:000022F8                 push    ecx
.text:000022F9                 lea     edi, [ebp+var_38]
.text:000022FC                 mov     ecx, 0Eh
.text:00002301                 mov     eax, 0CCCCCCCCh
.text:00002306                 rep stosd
.text:00002308                 pop     ecx
.text:00002309                 mov     [ebp+var_4], ecx
.text:0000230C                 mov     eax, [ebp+var_4]
.text:0000230F                 mov     ecx, [eax+8]
.text:00002312                 push    ecx             ; unsigned __int8 *
.text:00002313                 lea     ecx, [ebp+var_18] ; this
.text:00002316                 call    ?SetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXPAE@Z ; NCompress::NBZip2::CMsbfEncoderTemp::SetStream(uchar *)
.text:0000231B                 lea     ecx, [ebp+var_18] ; this
.text:0000231E                 call    ?Init@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CMsbfEncoderTemp::Init(void)
.text:00002323                 mov     edx, [ebp+var_4]
.text:00002326                 lea     eax, [ebp+var_18]
.text:00002329                 mov     [edx+10h], eax
.text:0000232C                 mov     ecx, [ebp+var_4]
.text:0000232F                 mov     dword ptr [ecx+8CD4h], 0
.text:00002339                 mov     edx, [ebp+var_4]
.text:0000233C                 mov     eax, [edx+8CE0h]
.text:00002342                 mov     ecx, [eax+174h]
.text:00002348                 push    ecx             ; unsigned int
.text:00002349                 mov     edx, [ebp+arg_0]
.text:0000234C                 push    edx             ; unsigned int
.text:0000234D                 mov     eax, [ebp+var_4]
.text:00002350                 mov     ecx, [eax]
.text:00002352                 push    ecx             ; unsigned __int8 *
.text:00002353                 mov     ecx, [ebp+var_4] ; this
.text:00002356                 call    ?EncodeBlock2@CThreadInfo@NBZip2@NCompress@@AAEXPBEII@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)
.text:0000235B                 mov     edx, [ebp+var_4]
.text:0000235E                 mov     eax, [edx+8CE0h]
.text:00002364                 movzx   ecx, byte ptr [eax+1A0h]
.text:0000236B                 test    ecx, ecx
.text:0000236D                 jz      short loc_2399
.text:0000236F                 mov     edx, [ebp+var_4]
.text:00002372                 mov     eax, [edx+8CE0h]
.text:00002378                 mov     ecx, [ebp+var_4]
.text:0000237B                 mov     edx, [ecx+8CD8h]
.text:00002381                 imul    edx, 8E00h
.text:00002387                 mov     eax, [eax+17Ch]
.text:0000238D                 lea     ecx, [eax+edx+8CF0h] ; this
.text:00002394                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00002399
.text:00002399 loc_2399:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+7Dj
.text:00002399                 mov     [ebp+var_20], 0
.text:000023A0                 jmp     short loc_23AB
.text:000023A2 ; ---------------------------------------------------------------------------
.text:000023A2
.text:000023A2 loc_23A2:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+EBj
.text:000023A2                 mov     ecx, [ebp+var_20]
.text:000023A5                 add     ecx, 1
.text:000023A8                 mov     [ebp+var_20], ecx
.text:000023AB
.text:000023AB loc_23AB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+B0j
.text:000023AB                 mov     edx, [ebp+var_4]
.text:000023AE                 mov     eax, [ebp+var_20]
.text:000023B1                 cmp     eax, [edx+8CD4h]
.text:000023B7                 jnb     short loc_23DD
.text:000023B9                 mov     ecx, [ebp+var_20]
.text:000023BC                 mov     edx, [ebp+var_4]
.text:000023BF                 mov     eax, [edx+ecx*4+7CD4h]
.text:000023C6                 push    eax             ; unsigned int
.text:000023C7                 mov     ecx, [ebp+var_4]
.text:000023CA                 mov     ecx, [ecx+8CE0h]
.text:000023D0                 add     ecx, 178h       ; this
.text:000023D6                 call    ?Update@CBZip2CombinedCrc@@QAEXI@Z ; CBZip2CombinedCrc::Update(uint)
.text:000023DB                 jmp     short loc_23A2
.text:000023DD ; ---------------------------------------------------------------------------
.text:000023DD
.text:000023DD loc_23DD:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+C7j
.text:000023DD                 lea     ecx, [ebp+var_18] ; this
.text:000023E0                 call    ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetCurByte(void)
.text:000023E5                 movzx   edx, al
.text:000023E8                 push    edx             ; unsigned __int8
.text:000023E9                 lea     ecx, [ebp+var_18] ; this
.text:000023EC                 call    ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ ; NCompress::NBZip2::CMsbfEncoderTemp::GetPos(void)
.text:000023F1                 push    eax             ; unsigned int
.text:000023F2                 mov     eax, [ebp+var_4]
.text:000023F5                 mov     ecx, [eax+8]
.text:000023F8                 push    ecx             ; unsigned __int8 *
.text:000023F9                 mov     edx, [ebp+var_4]
.text:000023FC                 mov     ecx, [edx+8CE0h] ; this
.text:00002402                 call    ?WriteBytes@CEncoder@NBZip2@NCompress@@QAEXPBEIE@Z ; NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)
.text:00002407                 mov     [ebp+var_24], 0
.text:0000240E                 mov     eax, [ebp+var_4]
.text:00002411                 mov     ecx, [eax+8CE0h]
.text:00002417                 movzx   edx, byte ptr [ecx+1A0h]
.text:0000241E                 test    edx, edx
.text:00002420                 jz      loc_24DF
.text:00002426                 mov     eax, [ebp+var_4]
.text:00002429                 mov     ecx, [eax+8CD8h]
.text:0000242F                 add     ecx, 1
.text:00002432                 mov     [ebp+var_28], ecx
.text:00002435                 mov     edx, [ebp+var_4]
.text:00002438                 mov     eax, [edx+8CE0h]
.text:0000243E                 mov     ecx, [ebp+var_28]
.text:00002441                 cmp     ecx, [eax+19Ch]
.text:00002447                 jnz     short loc_2450
.text:00002449                 mov     [ebp+var_28], 0
.text:00002450
.text:00002450 loc_2450:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+157j
.text:00002450                 mov     edx, [ebp+var_4]
.text:00002453                 mov     eax, [edx+8CE0h]
.text:00002459                 cmp     dword ptr [eax+1B4h], 0
.text:00002460                 jz      short loc_24BB
.text:00002462                 mov     ecx, [ebp+var_4]
.text:00002465                 mov     ecx, [ecx+8CE0h]
.text:0000246B                 add     ecx, 140h
.text:00002471                 call    ?GetProcessedSize@?$CBitmEncoder@VCOutBuffer@@@@QBE_KXZ ; CBitmEncoder<COutBuffer>::GetProcessedSize(void)
.text:00002476                 mov     [ebp+var_34], eax
.text:00002479                 mov     [ebp+var_30], edx
.text:0000247C                 mov     esi, esp
.text:0000247E                 lea     edx, [ebp+var_34]
.text:00002481                 push    edx
.text:00002482                 mov     eax, [ebp+var_4]
.text:00002485                 add     eax, 8CF8h
.text:0000248A                 push    eax
.text:0000248B                 mov     ecx, [ebp+var_4]
.text:0000248E                 mov     edx, [ecx+8CE0h]
.text:00002494                 mov     eax, [edx+1B4h]
.text:0000249A                 mov     ecx, [ebp+var_4]
.text:0000249D                 mov     edx, [ecx+8CE0h]
.text:000024A3                 mov     ecx, [edx+1B4h]
.text:000024A9                 mov     edx, [eax]
.text:000024AB                 push    ecx
.text:000024AC                 mov     eax, [edx+0Ch]
.text:000024AF                 call    eax
.text:000024B1                 cmp     esi, esp
.text:000024B3                 call    __RTC_CheckEsp
.text:000024B8                 mov     [ebp+var_24], eax
.text:000024BB
.text:000024BB loc_24BB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+170j
.text:000024BB                 mov     ecx, [ebp+var_4]
.text:000024BE                 mov     edx, [ecx+8CE0h]
.text:000024C4                 mov     eax, [ebp+var_28]
.text:000024C7                 imul    eax, 8E00h
.text:000024CD                 mov     ecx, [edx+17Ch]
.text:000024D3                 lea     ecx, [ecx+eax+8CF0h] ; this
.text:000024DA                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:000024DF
.text:000024DF loc_24DF:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+130j
.text:000024DF                 mov     eax, [ebp+var_24]
.text:000024E2                 push    edx
.text:000024E3                 mov     ecx, ebp
.text:000024E5                 push    eax
.text:000024E6                 lea     edx, $LN13_0
.text:000024EC                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000024F1                 pop     eax
.text:000024F2                 pop     edx
.text:000024F3                 pop     edi
.text:000024F4                 pop     esi
.text:000024F5                 add     esp, 38h
.text:000024F8                 cmp     ebp, esp
.text:000024FA                 call    __RTC_CheckEsp
.text:000024FF                 mov     esp, ebp
.text:00002501                 pop     ebp
.text:00002502                 retn    4
.text:00002502 ?EncodeBlock3@CThreadInfo@NBZip2@NCompress@@QAEJI@Z endp
.text:00002502
.text:00002502 ; ---------------------------------------------------------------------------
.text:00002505                 align 4
.text:00002508 $LN13_0         dd 2                    ; DATA XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+1F6o
.text:0000250C                 dd offset $LN12_0
.text:00002510 $LN12_0         dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:0000250Co
.text:00002518                 dd offset $LN10         ; "outStreamTemp"
.text:0000251C                 db 0CCh
.text:0000251D                 db 3 dup(0FFh)
.text:00002520                 dd 8
.text:00002524                 dd offset $LN11         ; "unpackSize"
.text:00002528 $LN11           db 'unpackSize',0       ; DATA XREF: .text:00002524o
.text:00002533 $LN10           db 'outStreamTemp',0    ; DATA XREF: .text:00002518o
.text:00002541                 align 10h
.text:00002550
.text:00002550 ; =============== S U B R O U T I N E =======================================
.text:00002550
.text:00002550 ; Attributes: bp-based frame
.text:00002550
.text:00002550 ; void __thiscall NCompress::NBZip2::CEncoder::WriteBytes(NCompress::NBZip2::CEncoder *this, const unsigned __int8 *, unsigned int, unsigned __int8)
.text:00002550                 public ?WriteBytes@CEncoder@NBZip2@NCompress@@QAEXPBEIE@Z
.text:00002550 ?WriteBytes@CEncoder@NBZip2@NCompress@@QAEXPBEIE@Z proc near
.text:00002550                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+112p
.text:00002550
.text:00002550 var_C           = dword ptr -0Ch
.text:00002550 var_8           = dword ptr -8
.text:00002550 var_4           = dword ptr -4
.text:00002550 arg_0           = dword ptr  8
.text:00002550 arg_4           = dword ptr  0Ch
.text:00002550 arg_8           = byte ptr  10h
.text:00002550
.text:00002550                 push    ebp
.text:00002551                 mov     ebp, esp
.text:00002553                 sub     esp, 0Ch
.text:00002556                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000255D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002564                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000256B                 mov     [ebp+var_4], ecx
.text:0000256E                 mov     eax, [ebp+arg_4]
.text:00002571                 shr     eax, 3
.text:00002574                 mov     [ebp+var_8], eax
.text:00002577                 mov     [ebp+var_C], 0
.text:0000257E                 jmp     short loc_2589
.text:00002580 ; ---------------------------------------------------------------------------
.text:00002580
.text:00002580 loc_2580:                               ; CODE XREF: NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)+5Bj
.text:00002580                 mov     ecx, [ebp+var_C]
.text:00002583                 add     ecx, 1
.text:00002586                 mov     [ebp+var_C], ecx
.text:00002589
.text:00002589 loc_2589:                               ; CODE XREF: NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)+2Ej
.text:00002589                 mov     edx, [ebp+var_C]
.text:0000258C                 cmp     edx, [ebp+var_8]
.text:0000258F                 jnb     short loc_25AD
.text:00002591                 push    8
.text:00002593                 mov     eax, [ebp+arg_0]
.text:00002596                 add     eax, [ebp+var_C]
.text:00002599                 movzx   ecx, byte ptr [eax]
.text:0000259C                 push    ecx
.text:0000259D                 mov     ecx, [ebp+var_4]
.text:000025A0                 add     ecx, 140h
.text:000025A6                 call    ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z ; CBitmEncoder<COutBuffer>::WriteBits(uint,uint)
.text:000025AB                 jmp     short loc_2580
.text:000025AD ; ---------------------------------------------------------------------------
.text:000025AD
.text:000025AD loc_25AD:                               ; CODE XREF: NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)+3Fj
.text:000025AD                 mov     edx, [ebp+arg_4]
.text:000025B0                 and     edx, 7
.text:000025B3                 push    edx             ; unsigned int
.text:000025B4                 movzx   eax, [ebp+arg_8]
.text:000025B8                 push    eax             ; unsigned int
.text:000025B9                 mov     ecx, [ebp+var_4] ; this
.text:000025BC                 call    ?WriteBits@CEncoder@NBZip2@NCompress@@QAEXII@Z ; NCompress::NBZip2::CEncoder::WriteBits(uint,uint)
.text:000025C1                 add     esp, 0Ch
.text:000025C4                 cmp     ebp, esp
.text:000025C6                 call    __RTC_CheckEsp
.text:000025CB                 mov     esp, ebp
.text:000025CD                 pop     ebp
.text:000025CE                 retn    0Ch
.text:000025CE ?WriteBytes@CEncoder@NBZip2@NCompress@@QAEXPBEIE@Z endp
.text:000025CE
.text:000025CE ; ---------------------------------------------------------------------------
.text:000025D1                 align 10h
.text:000025E0
.text:000025E0 ; =============== S U B R O U T I N E =======================================
.text:000025E0
.text:000025E0 ; Attributes: bp-based frame
.text:000025E0
.text:000025E0 ; __int32 __thiscall NCompress::NBZip2::CEncoder::CodeReal(NCompress::NBZip2::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:000025E0                 public ?CodeReal@CEncoder@NBZip2@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:000025E0 ?CodeReal@CEncoder@NBZip2@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:000025E0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+59p
.text:000025E0
.text:000025E0 var_54          = dword ptr -54h
.text:000025E0 var_4C          = dword ptr -4Ch
.text:000025E0 var_48          = dword ptr -48h
.text:000025E0 var_3C          = dword ptr -3Ch
.text:000025E0 var_38          = dword ptr -38h
.text:000025E0 var_30          = dword ptr -30h
.text:000025E0 var_2C          = dword ptr -2Ch
.text:000025E0 var_28          = dword ptr -28h
.text:000025E0 var_24          = dword ptr -24h
.text:000025E0 var_20          = dword ptr -20h
.text:000025E0 var_1C          = dword ptr -1Ch
.text:000025E0 var_18          = dword ptr -18h
.text:000025E0 var_14          = dword ptr -14h
.text:000025E0 var_10          = dword ptr -10h
.text:000025E0 var_C           = dword ptr -0Ch
.text:000025E0 var_8           = dword ptr -8
.text:000025E0 var_4           = dword ptr -4
.text:000025E0 arg_0           = dword ptr  8
.text:000025E0 arg_4           = dword ptr  0Ch
.text:000025E0 arg_10          = dword ptr  18h
.text:000025E0
.text:000025E0                 push    ebp
.text:000025E1                 mov     ebp, esp
.text:000025E3                 sub     esp, 54h
.text:000025E6                 push    esi
.text:000025E7                 push    edi
.text:000025E8                 push    ecx
.text:000025E9                 lea     edi, [ebp+var_54]
.text:000025EC                 mov     ecx, 15h
.text:000025F1                 mov     eax, 0CCCCCCCCh
.text:000025F6                 rep stosd
.text:000025F8                 pop     ecx
.text:000025F9                 mov     [ebp+var_4], ecx
.text:000025FC                 mov     eax, [ebp+var_4]
.text:000025FF                 mov     ecx, [ebp+arg_10]
.text:00002602                 mov     [eax+1B4h], ecx
.text:00002608                 mov     ecx, [ebp+var_4] ; this
.text:0000260B                 call    ?Create@CEncoder@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CEncoder::Create(void)
.text:00002610                 mov     [ebp+var_8], eax
.text:00002613                 cmp     [ebp+var_8], 0
.text:00002617                 jz      short loc_2621
.text:00002619                 mov     eax, [ebp+var_8]
.text:0000261C                 jmp     loc_29F0
.text:00002621 ; ---------------------------------------------------------------------------
.text:00002621
.text:00002621 loc_2621:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+37j
.text:00002621                 mov     [ebp+var_C], 0
.text:00002628                 jmp     short loc_2633
.text:0000262A ; ---------------------------------------------------------------------------
.text:0000262A
.text:0000262A loc_262A:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_26F5j
.text:0000262A                 mov     edx, [ebp+var_C]
.text:0000262D                 add     edx, 1
.text:00002630                 mov     [ebp+var_C], edx
.text:00002633
.text:00002633 loc_2633:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+48j
.text:00002633                 mov     eax, [ebp+var_4]
.text:00002636                 mov     ecx, [ebp+var_C]
.text:00002639                 cmp     ecx, [eax+19Ch]
.text:0000263F                 jnb     loc_26FA
.text:00002645                 mov     edx, [ebp+var_C]
.text:00002648                 imul    edx, 8E00h
.text:0000264E                 mov     eax, [ebp+var_4]
.text:00002651                 add     edx, [eax+17Ch]
.text:00002657                 mov     [ebp+var_10], edx
.text:0000265A                 mov     ecx, [ebp+var_4]
.text:0000265D                 movzx   edx, byte ptr [ecx+1A0h]
.text:00002664                 test    edx, edx
.text:00002666                 jz      short loc_26C5
.text:00002668                 mov     ecx, [ebp+var_10]
.text:0000266B                 add     ecx, 8CE8h      ; this
.text:00002671                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:00002676                 mov     [ebp+var_14], eax
.text:00002679                 cmp     [ebp+var_14], 0
.text:0000267D                 jz      short loc_2687
.text:0000267F                 mov     eax, [ebp+var_14]
.text:00002682                 jmp     loc_29F0
.text:00002687 ; ---------------------------------------------------------------------------
.text:00002687
.text:00002687 loc_2687:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+9Dj
.text:00002687                 mov     ecx, [ebp+var_10]
.text:0000268A                 add     ecx, 8CECh      ; this
.text:00002690                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:00002695                 mov     [ebp+var_18], eax
.text:00002698                 cmp     [ebp+var_18], 0
.text:0000269C                 jz      short loc_26A6
.text:0000269E                 mov     eax, [ebp+var_18]
.text:000026A1                 jmp     loc_29F0
.text:000026A6 ; ---------------------------------------------------------------------------
.text:000026A6
.text:000026A6 loc_26A6:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+BCj
.text:000026A6                 mov     ecx, [ebp+var_10]
.text:000026A9                 add     ecx, 8CF0h      ; this
.text:000026AF                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000026B4                 mov     [ebp+var_1C], eax
.text:000026B7                 cmp     [ebp+var_1C], 0
.text:000026BB                 jz      short loc_26C5
.text:000026BD                 mov     eax, [ebp+var_1C]
.text:000026C0                 jmp     loc_29F0
.text:000026C5 ; ---------------------------------------------------------------------------
.text:000026C5
.text:000026C5 loc_26C5:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+86j
.text:000026C5                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+DBj
.text:000026C5                 mov     ecx, [ebp+var_4]
.text:000026C8                 add     ecx, 170h       ; this
.text:000026CE                 call    ?DoOptimizeNumTables@CEncProps@NBZip2@NCompress@@QBE_NXZ ; NCompress::NBZip2::CEncProps::DoOptimizeNumTables(void)
.text:000026D3                 mov     ecx, [ebp+var_10]
.text:000026D6                 mov     [ecx+8CDCh], al
.text:000026DC                 mov     ecx, [ebp+var_10] ; this
.text:000026DF                 call    ?Alloc@CThreadInfo@NBZip2@NCompress@@QAE_NXZ ; NCompress::NBZip2::CThreadInfo::Alloc(void)
.text:000026E4                 movzx   edx, al
.text:000026E7                 test    edx, edx
.text:000026E9                 jnz     short loc_26F5
.text:000026EB                 mov     eax, 8007000Eh
.text:000026F0                 jmp     loc_29F0
.text:000026F5 ; ---------------------------------------------------------------------------
.text:000026F5
.text:000026F5 loc_26F5:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+109j
.text:000026F5                 jmp     loc_262A
.text:000026FA ; ---------------------------------------------------------------------------
.text:000026FA
.text:000026FA loc_26FA:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5Fj
.text:000026FA                 push    20000h          ; unsigned int
.text:000026FF                 mov     ecx, [ebp+var_4]
.text:00002702                 add     ecx, 18h        ; this
.text:00002705                 call    ?Create@CInBuffer@@QAE_NI@Z ; CInBuffer::Create(uint)
.text:0000270A                 movzx   eax, al
.text:0000270D                 test    eax, eax
.text:0000270F                 jnz     short loc_271B
.text:00002711                 mov     eax, 8007000Eh
.text:00002716                 jmp     loc_29F0
.text:0000271B ; ---------------------------------------------------------------------------
.text:0000271B
.text:0000271B loc_271B:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+12Fj
.text:0000271B                 push    20000h
.text:00002720                 mov     ecx, [ebp+var_4]
.text:00002723                 add     ecx, 140h
.text:00002729                 call    ?Create@?$CBitmEncoder@VCOutBuffer@@@@QAE_NI@Z ; CBitmEncoder<COutBuffer>::Create(uint)
.text:0000272E                 movzx   ecx, al
.text:00002731                 test    ecx, ecx
.text:00002733                 jnz     short loc_273F
.text:00002735                 mov     eax, 8007000Eh
.text:0000273A                 jmp     loc_29F0
.text:0000273F ; ---------------------------------------------------------------------------
.text:0000273F
.text:0000273F loc_273F:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+153j
.text:0000273F                 mov     edx, [ebp+arg_0]
.text:00002742                 push    edx             ; struct ISequentialInStream *
.text:00002743                 mov     ecx, [ebp+var_4]
.text:00002746                 add     ecx, 18h        ; this
.text:00002749                 call    ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream(ISequentialInStream *)
.text:0000274E                 mov     ecx, [ebp+var_4]
.text:00002751                 add     ecx, 18h        ; this
.text:00002754                 call    ?Init@CInBufferBase@@QAEXXZ ; CInBufferBase::Init(void)
.text:00002759                 mov     eax, [ebp+arg_4]
.text:0000275C                 push    eax             ; struct ISequentialOutStream *
.text:0000275D                 mov     ecx, [ebp+var_4]
.text:00002760                 add     ecx, 140h
.text:00002766                 call    ?SetStream@?$CBitmEncoder@VCOutBuffer@@@@QAEXPAUISequentialOutStream@@@Z ; CBitmEncoder<COutBuffer>::SetStream(ISequentialOutStream *)
.text:0000276B                 mov     ecx, [ebp+var_4]
.text:0000276E                 add     ecx, 140h
.text:00002774                 call    ?Init@?$CBitmEncoder@VCOutBuffer@@@@QAEXXZ ; CBitmEncoder<COutBuffer>::Init(void)
.text:00002779                 mov     ecx, [ebp+var_4]
.text:0000277C                 add     ecx, 178h       ; this
.text:00002782                 call    ?Init@CBZip2CombinedCrc@@QAEXXZ ; CBZip2CombinedCrc::Init(void)
.text:00002787                 mov     ecx, [ebp+var_4]
.text:0000278A                 mov     dword ptr [ecx+1A4h], 0
.text:00002794                 mov     edx, [ebp+var_4]
.text:00002797                 mov     byte ptr [edx+1A9h], 0
.text:0000279E                 mov     eax, [ebp+var_4]
.text:000027A1                 mov     byte ptr [eax+1A8h], 0
.text:000027A8                 mov     ecx, [ebp+var_4]
.text:000027AB                 add     ecx, 1ACh       ; this
.text:000027B1                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000027B6                 push    42h ; 'B'       ; unsigned __int8
.text:000027B8                 mov     ecx, [ebp+var_4] ; this
.text:000027BB                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000027C0                 push    5Ah ; 'Z'       ; unsigned __int8
.text:000027C2                 mov     ecx, [ebp+var_4] ; this
.text:000027C5                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000027CA                 push    68h ; 'h'       ; unsigned __int8
.text:000027CC                 mov     ecx, [ebp+var_4] ; this
.text:000027CF                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000027D4                 mov     ecx, [ebp+var_4]
.text:000027D7                 mov     edx, [ecx+170h]
.text:000027DD                 add     edx, 30h ; '0'
.text:000027E0                 push    edx             ; unsigned __int8
.text:000027E1                 mov     ecx, [ebp+var_4] ; this
.text:000027E4                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000027E9                 mov     eax, [ebp+var_4]
.text:000027EC                 movzx   ecx, byte ptr [eax+1A0h]
.text:000027F3                 test    ecx, ecx
.text:000027F5                 jz      loc_28F3
.text:000027FB                 mov     edx, [ebp+var_4]
.text:000027FE                 mov     ecx, [edx+17Ch]
.text:00002804                 add     ecx, 8CF0h      ; this
.text:0000280A                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:0000280F                 mov     eax, [ebp+var_4]
.text:00002812                 mov     dword ptr [eax+1B0h], 0
.text:0000281C                 mov     ecx, [ebp+var_4]
.text:0000281F                 add     ecx, 180h       ; this
.text:00002825                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:0000282A                 mov     [ebp+var_20], 0
.text:00002831                 jmp     short loc_283C
.text:00002833 ; ---------------------------------------------------------------------------
.text:00002833
.text:00002833 loc_2833:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+288j
.text:00002833                 mov     ecx, [ebp+var_20]
.text:00002836                 add     ecx, 1
.text:00002839                 mov     [ebp+var_20], ecx
.text:0000283C
.text:0000283C loc_283C:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+251j
.text:0000283C                 mov     edx, [ebp+var_4]
.text:0000283F                 mov     eax, [ebp+var_20]
.text:00002842                 cmp     eax, [edx+19Ch]
.text:00002848                 jnb     short loc_286A
.text:0000284A                 mov     ecx, [ebp+var_20]
.text:0000284D                 imul    ecx, 8E00h
.text:00002853                 mov     edx, [ebp+var_4]
.text:00002856                 mov     eax, [edx+17Ch]
.text:0000285C                 lea     ecx, [eax+ecx+8CE8h] ; this
.text:00002863                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:00002868                 jmp     short loc_2833
.text:0000286A ; ---------------------------------------------------------------------------
.text:0000286A
.text:0000286A loc_286A:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+268j
.text:0000286A                 mov     ecx, [ebp+var_4]
.text:0000286D                 add     ecx, 180h       ; this
.text:00002873                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:00002878                 mov     ecx, [ebp+var_4]
.text:0000287B                 add     ecx, 1ACh       ; this
.text:00002881                 call    ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set(void)
.text:00002886                 mov     [ebp+var_20], 0
.text:0000288D                 jmp     short loc_2898
.text:0000288F ; ---------------------------------------------------------------------------
.text:0000288F
.text:0000288F loc_288F:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2E4j
.text:0000288F                 mov     ecx, [ebp+var_20]
.text:00002892                 add     ecx, 1
.text:00002895                 mov     [ebp+var_20], ecx
.text:00002898
.text:00002898 loc_2898:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2ADj
.text:00002898                 mov     edx, [ebp+var_4]
.text:0000289B                 mov     eax, [ebp+var_20]
.text:0000289E                 cmp     eax, [edx+19Ch]
.text:000028A4                 jnb     short loc_28C6
.text:000028A6                 mov     ecx, [ebp+var_20]
.text:000028A9                 imul    ecx, 8E00h
.text:000028AF                 mov     edx, [ebp+var_4]
.text:000028B2                 mov     eax, [edx+17Ch]
.text:000028B8                 lea     ecx, [eax+ecx+8CECh] ; this
.text:000028BF                 call    ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock(void)
.text:000028C4                 jmp     short loc_288F
.text:000028C6 ; ---------------------------------------------------------------------------
.text:000028C6
.text:000028C6 loc_28C6:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+2C4j
.text:000028C6                 mov     ecx, [ebp+var_4]
.text:000028C9                 add     ecx, 1ACh       ; this
.text:000028CF                 call    ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset(void)
.text:000028D4                 mov     ecx, [ebp+var_4]
.text:000028D7                 mov     edx, [ecx+1B0h]
.text:000028DD                 mov     [ebp+var_24], edx
.text:000028E0                 cmp     [ebp+var_24], 0
.text:000028E4                 jz      short loc_28EE
.text:000028E6                 mov     eax, [ebp+var_24]
.text:000028E9                 jmp     loc_29F0
.text:000028EE ; ---------------------------------------------------------------------------
.text:000028EE
.text:000028EE loc_28EE:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+304j
.text:000028EE                 jmp     loc_2992
.text:000028F3 ; ---------------------------------------------------------------------------
.text:000028F3
.text:000028F3 loc_28F3:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+215j
.text:000028F3                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_298Dj
.text:000028F3                 mov     eax, [ebp+var_4]
.text:000028F6                 mov     ecx, [eax+17Ch]
.text:000028FC                 mov     [ebp+var_28], ecx
.text:000028FF                 mov     edx, [ebp+var_28]
.text:00002902                 mov     eax, [edx]
.text:00002904                 push    eax             ; unsigned __int8 *
.text:00002905                 mov     ecx, [ebp+var_4] ; this
.text:00002908                 call    ?ReadRleBlock@CEncoder@NBZip2@NCompress@@QAEIPAE@Z ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)
.text:0000290D                 mov     [ebp+var_2C], eax
.text:00002910                 cmp     [ebp+var_2C], 0
.text:00002914                 jnz     short loc_2918
.text:00002916                 jmp     short loc_2992
.text:00002918 ; ---------------------------------------------------------------------------
.text:00002918
.text:00002918 loc_2918:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+334j
.text:00002918                 mov     ecx, [ebp+var_2C]
.text:0000291B                 push    ecx             ; unsigned int
.text:0000291C                 mov     ecx, [ebp+var_28] ; this
.text:0000291F                 call    ?EncodeBlock3@CThreadInfo@NBZip2@NCompress@@QAEJI@Z ; NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)
.text:00002924                 mov     [ebp+var_30], eax
.text:00002927                 cmp     [ebp+var_30], 0
.text:0000292B                 jz      short loc_2935
.text:0000292D                 mov     eax, [ebp+var_30]
.text:00002930                 jmp     loc_29F0
.text:00002935 ; ---------------------------------------------------------------------------
.text:00002935
.text:00002935 loc_2935:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+34Bj
.text:00002935                 cmp     [ebp+arg_10], 0
.text:00002939                 jz      short loc_298D
.text:0000293B                 mov     ecx, [ebp+var_4]
.text:0000293E                 add     ecx, 18h        ; this
.text:00002941                 call    ?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize(void)
.text:00002946                 mov     [ebp+var_3C], eax
.text:00002949                 mov     [ebp+var_38], edx
.text:0000294C                 mov     ecx, [ebp+var_4]
.text:0000294F                 add     ecx, 140h
.text:00002955                 call    ?GetProcessedSize@?$CBitmEncoder@VCOutBuffer@@@@QBE_KXZ ; CBitmEncoder<COutBuffer>::GetProcessedSize(void)
.text:0000295A                 mov     [ebp+var_4C], eax
.text:0000295D                 mov     [ebp+var_48], edx
.text:00002960                 mov     esi, esp
.text:00002962                 lea     edx, [ebp+var_4C]
.text:00002965                 push    edx
.text:00002966                 lea     eax, [ebp+var_3C]
.text:00002969                 push    eax
.text:0000296A                 mov     ecx, [ebp+arg_10]
.text:0000296D                 mov     edx, [ecx]
.text:0000296F                 mov     eax, [ebp+arg_10]
.text:00002972                 push    eax
.text:00002973                 mov     ecx, [edx+0Ch]
.text:00002976                 call    ecx
.text:00002978                 cmp     esi, esp
.text:0000297A                 call    __RTC_CheckEsp
.text:0000297F                 mov     [ebp+var_54], eax
.text:00002982                 cmp     [ebp+var_54], 0
.text:00002986                 jz      short loc_298D
.text:00002988                 mov     eax, [ebp+var_54]
.text:0000298B                 jmp     short loc_29F0
.text:0000298D ; ---------------------------------------------------------------------------
.text:0000298D
.text:0000298D loc_298D:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+359j
.text:0000298D                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3A6j
.text:0000298D                 jmp     loc_28F3
.text:00002992 ; ---------------------------------------------------------------------------
.text:00002992
.text:00002992 loc_2992:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *):loc_28EEj
.text:00002992                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+336j
.text:00002992                 push    17h             ; unsigned __int8
.text:00002994                 mov     ecx, [ebp+var_4] ; this
.text:00002997                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:0000299C                 push    72h ; 'r'       ; unsigned __int8
.text:0000299E                 mov     ecx, [ebp+var_4] ; this
.text:000029A1                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000029A6                 push    45h ; 'E'       ; unsigned __int8
.text:000029A8                 mov     ecx, [ebp+var_4] ; this
.text:000029AB                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000029B0                 push    38h ; '8'       ; unsigned __int8
.text:000029B2                 mov     ecx, [ebp+var_4] ; this
.text:000029B5                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000029BA                 push    50h ; 'P'       ; unsigned __int8
.text:000029BC                 mov     ecx, [ebp+var_4] ; this
.text:000029BF                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000029C4                 push    90h ; 'É'       ; unsigned __int8
.text:000029C9                 mov     ecx, [ebp+var_4] ; this
.text:000029CC                 call    ?WriteByte@CEncoder@NBZip2@NCompress@@QAEXE@Z ; NCompress::NBZip2::CEncoder::WriteByte(uchar)
.text:000029D1                 mov     ecx, [ebp+var_4]
.text:000029D4                 add     ecx, 178h       ; this
.text:000029DA                 call    ?GetDigest@CBZip2CombinedCrc@@QBEIXZ ; CBZip2CombinedCrc::GetDigest(void)
.text:000029DF                 push    eax             ; unsigned int
.text:000029E0                 mov     ecx, [ebp+var_4] ; this
.text:000029E3                 call    ?WriteCrc@CEncoder@NBZip2@NCompress@@QAEXI@Z ; NCompress::NBZip2::CEncoder::WriteCrc(uint)
.text:000029E8                 mov     ecx, [ebp+var_4] ; this
.text:000029EB                 call    ?Flush@CEncoder@NBZip2@NCompress@@QAEJXZ ; NCompress::NBZip2::CEncoder::Flush(void)
.text:000029F0
.text:000029F0 loc_29F0:                               ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3Cj
.text:000029F0                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+A2j ...
.text:000029F0                 push    edx
.text:000029F1                 mov     ecx, ebp
.text:000029F3                 push    eax
.text:000029F4                 lea     edx, $LN32
.text:000029FA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000029FF                 pop     eax
.text:00002A00                 pop     edx
.text:00002A01                 pop     edi
.text:00002A02                 pop     esi
.text:00002A03                 add     esp, 54h
.text:00002A06                 cmp     ebp, esp
.text:00002A08                 call    __RTC_CheckEsp
.text:00002A0D                 mov     esp, ebp
.text:00002A0F                 pop     ebp
.text:00002A10                 retn    14h
.text:00002A10 ?CodeReal@CEncoder@NBZip2@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002A10
.text:00002A10 ; ---------------------------------------------------------------------------
.text:00002A13                 align 4
.text:00002A14 $LN32           dd 2                    ; DATA XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+414o
.text:00002A18                 dd offset $LN31
.text:00002A1C $LN31           dd 0FFFFFFC4h, 8        ; DATA XREF: .text:00002A18o
.text:00002A24                 dd offset $LN29_0       ; "packSize"
.text:00002A28                 dd 0FFFFFFB4h, 8
.text:00002A30                 dd offset $LN30         ; "unpackSize"
.text:00002A34 $LN30           db 'unpackSize',0       ; DATA XREF: .text:00002A30o
.text:00002A3F $LN29_0         db 'packSize',0         ; DATA XREF: .text:00002A24o
.text:00002A48                 align 10h
.text:00002A50
.text:00002A50 ; =============== S U B R O U T I N E =======================================
.text:00002A50
.text:00002A50 ; Attributes: bp-based frame
.text:00002A50
.text:00002A50 ; __int32 __cdecl NCompress::NBZip2::CEncoder::Code(NCompress::NBZip2::CEncoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, const unsigned __int64 *, const unsigned __int64 *, struct ICompressProgressInfo *)
.text:00002A50                 public ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002A50 ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text:00002A50                                         ; DATA XREF: .rdata:00003214o
.text:00002A50
.text:00002A50 var_38          = dword ptr -38h
.text:00002A50 var_10          = dword ptr -10h
.text:00002A50 var_C           = dword ptr -0Ch
.text:00002A50 var_4           = dword ptr -4
.text:00002A50 this            = dword ptr  8
.text:00002A50 arg_4           = dword ptr  0Ch
.text:00002A50 arg_8           = dword ptr  10h
.text:00002A50 arg_C           = dword ptr  14h
.text:00002A50 arg_10          = dword ptr  18h
.text:00002A50 arg_14          = dword ptr  1Ch
.text:00002A50
.text:00002A50 ; FUNCTION CHUNK AT .text:00002B20 SIZE 0000002F BYTES
.text:00002A50
.text:00002A50                 push    ebp
.text:00002A51                 mov     ebp, esp
.text:00002A53                 push    0FFFFFFFFh
.text:00002A55                 push    offset __ehhandler$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002A5A                 mov     eax, large fs:0
.text:00002A60                 push    eax
.text:00002A61                 push    ecx
.text:00002A62                 sub     esp, 28h
.text:00002A65                 push    ebx
.text:00002A66                 push    esi
.text:00002A67                 push    edi
.text:00002A68                 lea     edi, [ebp+var_38]
.text:00002A6B                 mov     ecx, 0Ah
.text:00002A70                 mov     eax, 0CCCCCCCCh
.text:00002A75                 rep stosd
.text:00002A77                 mov     eax, dword ptr ds:___security_cookie
.text:00002A7C                 xor     eax, ebp
.text:00002A7E                 push    eax
.text:00002A7F                 lea     eax, [ebp+var_C]
.text:00002A82                 mov     large fs:0, eax
.text:00002A88                 mov     [ebp+var_10], esp
.text:00002A8B                 mov     [ebp+var_4], 0
.text:00002A92                 mov     eax, [ebp+arg_14]
.text:00002A95                 push    eax             ; struct ICompressProgressInfo *
.text:00002A96                 mov     ecx, [ebp+arg_10]
.text:00002A99                 push    ecx             ; unsigned __int64 *
.text:00002A9A                 mov     edx, [ebp+arg_C]
.text:00002A9D                 push    edx             ; unsigned __int64 *
.text:00002A9E                 mov     eax, [ebp+arg_8]
.text:00002AA1                 push    eax             ; struct ISequentialOutStream *
.text:00002AA2                 mov     ecx, [ebp+arg_4]
.text:00002AA5                 push    ecx             ; struct ISequentialInStream *
.text:00002AA6                 mov     ecx, [ebp+this] ; this
.text:00002AA9                 call    ?CodeReal@CEncoder@NBZip2@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.text:00002AAE                 mov     [ebp+var_38], eax
.text:00002AB1                 mov     eax, [ebp+var_38]
.text:00002AB4                 jmp     short loc_2B20
.text:00002AB4 ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text:00002AB4
.text:00002AB6
.text:00002AB6 ; =============== S U B R O U T I N E =======================================
.text:00002AB6
.text:00002AB6
.text:00002AB6 __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
.text:00002AB6                                         ; DATA XREF: .xdata$x:00003100o
.text:00002AB6                 mov     edx, [ebp-18h]
.text:00002AB9                 mov     eax, [edx]
.text:00002ABB                 mov     [ebp-2Ch], eax
.text:00002ABE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AC5                 mov     eax, offset $LN9
.text:00002ACA                 retn
.text:00002ACA __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 endp
.text:00002ACA
.text:00002ACB ; ---------------------------------------------------------------------------
.text:00002ACB                 mov     eax, offset __tryend$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00002AD0                 retn
.text:00002AD1
.text:00002AD1 ; =============== S U B R O U T I N E =======================================
.text:00002AD1
.text:00002AD1
.text:00002AD1 __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
.text:00002AD1                                         ; DATA XREF: .xdata$x:00003110o
.text:00002AD1                 mov     ecx, [ebp-24h]
.text:00002AD4                 mov     edx, [ecx]
.text:00002AD6                 mov     [ebp-30h], edx
.text:00002AD9                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AE0                 mov     eax, offset $LN11_0
.text:00002AE5                 retn
.text:00002AE5 __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 endp
.text:00002AE5
.text:00002AE6 ; ---------------------------------------------------------------------------
.text:00002AE6                 mov     eax, offset __tryend$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00002AEB                 retn
.text:00002AEC
.text:00002AEC ; =============== S U B R O U T I N E =======================================
.text:00002AEC
.text:00002AEC
.text:00002AEC __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 proc near
.text:00002AEC                                         ; DATA XREF: .xdata$x:00003120o
.text:00002AEC                 mov     dword ptr [ebp-34h], 1
.text:00002AF3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002AFA                 mov     eax, offset $LN13_1
.text:00002AFF                 retn
.text:00002AFF __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 endp
.text:00002AFF
.text:00002B00 ; ---------------------------------------------------------------------------
.text:00002B00                 mov     eax, offset __tryend$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
.text:00002B05                 retn
.text:00002B06 ; ---------------------------------------------------------------------------
.text:00002B06
.text:00002B06 __tryend$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
.text:00002B06                                         ; DATA XREF: .text:00002ACBo
.text:00002B06                                         ; .text:00002AE6o ...
.text:00002B06                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002B0D                 jmp     short loc_2B14
.text:00002B0F ; ---------------------------------------------------------------------------
.text:00002B0F
.text:00002B0F $LN13_1:                                ; DATA XREF: __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2+Eo
.text:00002B0F                 mov     eax, [ebp-34h]
.text:00002B12                 jmp     short loc_2B20
.text:00002B14 ; ---------------------------------------------------------------------------
.text:00002B14
.text:00002B14 loc_2B14:                               ; CODE XREF: .text:00002B0Dj
.text:00002B14                 jmp     short loc_2B1B
.text:00002B16 ; ---------------------------------------------------------------------------
.text:00002B16
.text:00002B16 $LN11_0:                                ; DATA XREF: __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1+Fo
.text:00002B16                 mov     eax, [ebp-30h]
.text:00002B19                 jmp     short loc_2B20
.text:00002B1B ; ---------------------------------------------------------------------------
.text:00002B1B
.text:00002B1B loc_2B1B:                               ; CODE XREF: .text:loc_2B14j
.text:00002B1B                 jmp     short loc_2B20
.text:00002B1D ; ---------------------------------------------------------------------------
.text:00002B1D
.text:00002B1D $LN9:                                   ; DATA XREF: __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0+Fo
.text:00002B1D                 mov     eax, [ebp-2Ch]
.text:00002B20 ; START OF FUNCTION CHUNK FOR ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002B20
.text:00002B20 loc_2B20:                               ; CODE XREF: NCompress::NBZip2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+64j
.text:00002B20                                         ; .text:00002B12j ...
.text:00002B20                 push    edx
.text:00002B21                 mov     ecx, ebp
.text:00002B23                 push    eax
.text:00002B24                 lea     edx, $LN21
.text:00002B2A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002B2F                 pop     eax
.text:00002B30                 pop     edx
.text:00002B31                 mov     ecx, [ebp+var_C]
.text:00002B34                 mov     large fs:0, ecx
.text:00002B3B                 pop     ecx
.text:00002B3C                 pop     edi
.text:00002B3D                 pop     esi
.text:00002B3E                 pop     ebx
.text:00002B3F                 add     esp, 38h
.text:00002B42                 cmp     ebp, esp
.text:00002B44                 call    __RTC_CheckEsp
.text:00002B49                 mov     esp, ebp
.text:00002B4B                 pop     ebp
.text:00002B4C                 retn    18h
.text:00002B4C ; END OF FUNCTION CHUNK FOR ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text:00002B4C ; ---------------------------------------------------------------------------
.text:00002B4F                 align 10h
.text:00002B50 $LN21           dd 2                    ; DATA XREF: NCompress::NBZip2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+D4o
.text:00002B54                 dd offset $LN20
.text:00002B58 $LN20           dd 0FFFFFFE8h, 4        ; DATA XREF: .text:00002B54o
.text:00002B60                 dd offset $LN17_0
.text:00002B64                 dd 0FFFFFFDCh, 4
.text:00002B6C                 dd offset $LN18
.text:00002B70 $LN18           db 65h, 0               ; DATA XREF: .text:00002B6Co
.text:00002B72 $LN17_0         dw 65h                  ; DATA XREF: .text:00002B60o
.text:00002B74                 align 10h
.text:00002B80
.text:00002B80 ; =============== S U B R O U T I N E =======================================
.text:00002B80
.text:00002B80 ; Attributes: bp-based frame
.text:00002B80
.text:00002B80 ; __int32 __stdcall NCompress::NBZip2::CEncoder::SetCoderProperties(NCompress::NBZip2::CEncoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00002B80                 public ?SetCoderProperties@CEncoder@NBZip2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00002B80 ?SetCoderProperties@CEncoder@NBZip2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00002B80                                         ; DATA XREF: .rdata:00003200o
.text:00002B80
.text:00002B80 var_28          = dword ptr -28h
.text:00002B80 var_24          = dword ptr -24h
.text:00002B80 var_20          = dword ptr -20h
.text:00002B80 var_1C          = dword ptr -1Ch
.text:00002B80 var_18          = dword ptr -18h
.text:00002B80 var_10          = dword ptr -10h
.text:00002B80 var_C           = dword ptr -0Ch
.text:00002B80 var_4           = dword ptr -4
.text:00002B80 this            = dword ptr  8
.text:00002B80 arg_4           = dword ptr  0Ch
.text:00002B80 arg_8           = dword ptr  10h
.text:00002B80 arg_C           = dword ptr  14h
.text:00002B80
.text:00002B80                 push    ebp
.text:00002B81                 mov     ebp, esp
.text:00002B83                 sub     esp, 28h
.text:00002B86                 push    esi
.text:00002B87                 push    edi
.text:00002B88                 lea     edi, [ebp+var_28]
.text:00002B8B                 mov     ecx, 0Ah
.text:00002B90                 mov     eax, 0CCCCCCCCh
.text:00002B95                 rep stosd
.text:00002B97                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00002B9E                 lea     ecx, [ebp+var_10] ; this
.text:00002BA1                 call    ??0CEncProps@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CEncProps::CEncProps(void)
.text:00002BA6                 mov     [ebp+var_18], 0
.text:00002BAD                 jmp     short loc_2BB8
.text:00002BAF ; ---------------------------------------------------------------------------
.text:00002BAF
.text:00002BAF loc_2BAF:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+62j
.text:00002BAF                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_2C71j
.text:00002BAF                 mov     eax, [ebp+var_18]
.text:00002BB2                 add     eax, 1
.text:00002BB5                 mov     [ebp+var_18], eax
.text:00002BB8
.text:00002BB8 loc_2BB8:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Dj
.text:00002BB8                 mov     ecx, [ebp+var_18]
.text:00002BBB                 cmp     ecx, [ebp+arg_C]
.text:00002BBE                 jnb     loc_2C76
.text:00002BC4                 mov     edx, [ebp+var_18]
.text:00002BC7                 shl     edx, 4
.text:00002BCA                 add     edx, [ebp+arg_8]
.text:00002BCD                 mov     [ebp+var_1C], edx
.text:00002BD0                 mov     eax, [ebp+var_18]
.text:00002BD3                 mov     ecx, [ebp+arg_4]
.text:00002BD6                 mov     edx, [ecx+eax*4]
.text:00002BD9                 mov     [ebp+var_20], edx
.text:00002BDC                 cmp     [ebp+var_20], 10h
.text:00002BE0                 jb      short loc_2BE4
.text:00002BE2                 jmp     short loc_2BAF
.text:00002BE4 ; ---------------------------------------------------------------------------
.text:00002BE4
.text:00002BE4 loc_2BE4:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+60j
.text:00002BE4                 mov     eax, [ebp+var_1C]
.text:00002BE7                 movzx   ecx, word ptr [eax]
.text:00002BEA                 cmp     ecx, 13h
.text:00002BED                 jz      short loc_2BF9
.text:00002BEF                 mov     eax, 80070057h
.text:00002BF4                 jmp     loc_2C99
.text:00002BF9 ; ---------------------------------------------------------------------------
.text:00002BF9
.text:00002BF9 loc_2BF9:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Dj
.text:00002BF9                 mov     edx, [ebp+var_1C]
.text:00002BFC                 mov     eax, [edx+8]
.text:00002BFF                 mov     [ebp+var_24], eax
.text:00002C02                 mov     ecx, [ebp+var_20]
.text:00002C05                 mov     [ebp+var_28], ecx
.text:00002C08                 mov     edx, [ebp+var_28]
.text:00002C0B                 sub     edx, 1
.text:00002C0E                 mov     [ebp+var_28], edx
.text:00002C11                 cmp     [ebp+var_28], 0Eh ; switch 15 cases
.text:00002C15                 ja      short $LN1      ; jumptable 00002C21 default case
.text:00002C17                 mov     eax, [ebp+var_28]
.text:00002C1A                 movzx   ecx, ds:$LN15_1[eax]
.text:00002C21                 jmp     ds:$LN19_0[ecx*4] ; switch jump
.text:00002C28 ; ---------------------------------------------------------------------------
.text:00002C28
.text:00002C28 $LN5:                                   ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:00002C28                                         ; DATA XREF: .text:$LN19_0o
.text:00002C28                 mov     edx, [ebp+var_24] ; jumptable 00002C21 case 10
.text:00002C2B                 mov     [ebp+var_C], edx
.text:00002C2E                 jmp     short loc_2C71
.text:00002C30 ; ---------------------------------------------------------------------------
.text:00002C30
.text:00002C30 $LN4:                                   ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:00002C30                                         ; DATA XREF: .text:$LN19_0o
.text:00002C30                 mov     eax, [ebp+var_24] ; jumptable 00002C21 case 0
.text:00002C33                 xor     edx, edx
.text:00002C35                 mov     ecx, 186A0h
.text:00002C3A                 div     ecx
.text:00002C3C                 mov     [ebp+var_10], eax
.text:00002C3F                 jmp     short loc_2C71
.text:00002C41 ; ---------------------------------------------------------------------------
.text:00002C41
.text:00002C41 $LN3:                                   ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:00002C41                                         ; DATA XREF: .text:$LN19_0o
.text:00002C41                 mov     edx, [ebp+var_24] ; jumptable 00002C21 case 14
.text:00002C44                 mov     [ebp+var_4], edx
.text:00002C47                 jmp     short loc_2C71
.text:00002C49 ; ---------------------------------------------------------------------------
.text:00002C49
.text:00002C49 $LN2:                                   ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:00002C49                                         ; DATA XREF: .text:$LN19_0o
.text:00002C49                 mov     esi, esp        ; jumptable 00002C21 case 12
.text:00002C4B                 mov     eax, [ebp+var_24]
.text:00002C4E                 push    eax
.text:00002C4F                 mov     ecx, [ebp+this]
.text:00002C52                 add     ecx, 4
.text:00002C55                 mov     edx, [ebp+this]
.text:00002C58                 mov     eax, [edx+4]
.text:00002C5B                 push    ecx
.text:00002C5C                 mov     ecx, [eax+0Ch]
.text:00002C5F                 call    ecx
.text:00002C61                 cmp     esi, esp
.text:00002C63                 call    __RTC_CheckEsp
.text:00002C68                 jmp     short loc_2C71
.text:00002C6A ; ---------------------------------------------------------------------------
.text:00002C6A
.text:00002C6A $LN1:                                   ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+95j
.text:00002C6A                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1j
.text:00002C6A                                         ; DATA XREF: ...
.text:00002C6A                 mov     eax, 80070057h  ; jumptable 00002C21 default case
.text:00002C6F                 jmp     short loc_2C99
.text:00002C71 ; ---------------------------------------------------------------------------
.text:00002C71
.text:00002C71 loc_2C71:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+AEj
.text:00002C71                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+BFj ...
.text:00002C71                 jmp     loc_2BAF
.text:00002C76 ; ---------------------------------------------------------------------------
.text:00002C76
.text:00002C76 loc_2C76:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+3Ej
.text:00002C76                 mov     edx, [ebp+var_4]
.text:00002C79                 push    edx             ; int
.text:00002C7A                 lea     ecx, [ebp+var_10] ; this
.text:00002C7D                 call    ?Normalize@CEncProps@NBZip2@NCompress@@QAEXH@Z ; NCompress::NBZip2::CEncProps::Normalize(int)
.text:00002C82                 mov     eax, [ebp+this]
.text:00002C85                 mov     ecx, [ebp+var_10]
.text:00002C88                 mov     [eax+16Ch], ecx
.text:00002C8E                 mov     edx, [ebp+var_C]
.text:00002C91                 mov     [eax+170h], edx
.text:00002C97                 xor     eax, eax
.text:00002C99
.text:00002C99 loc_2C99:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+74j
.text:00002C99                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+EFj
.text:00002C99                 push    edx
.text:00002C9A                 mov     ecx, ebp
.text:00002C9C                 push    eax
.text:00002C9D                 lea     edx, $LN18_0
.text:00002CA3                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002CA8                 pop     eax
.text:00002CA9                 pop     edx
.text:00002CAA                 pop     edi
.text:00002CAB                 pop     esi
.text:00002CAC                 add     esp, 28h
.text:00002CAF                 cmp     ebp, esp
.text:00002CB1                 call    __RTC_CheckEsp
.text:00002CB6                 mov     esp, ebp
.text:00002CB8                 pop     ebp
.text:00002CB9                 retn    10h
.text:00002CB9 ?SetCoderProperties@CEncoder@NBZip2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00002CB9
.text:00002CB9 ; ---------------------------------------------------------------------------
.text:00002CBC $LN18_0         dd 1                    ; DATA XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+11Do
.text:00002CC0                 dd offset $LN17_1
.text:00002CC4 $LN17_1         dd 0FFFFFFF0h, 8        ; DATA XREF: .text:00002CC0o
.text:00002CCC                 dd offset $LN16_0       ; "props"
.text:00002CD0 $LN16_0         db 'props',0            ; DATA XREF: .text:00002CCCo
.text:00002CD6                 align 4
.text:00002CD8 $LN19_0         dd offset $LN4          ; DATA XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+A1r
.text:00002CD8                 dd offset $LN5          ; jump table for switch statement
.text:00002CD8                 dd offset $LN2
.text:00002CD8                 dd offset $LN3
.text:00002CD8                 dd offset $LN1
.text:00002CEC $LN15_1         db      0,     4,     4,     4
.text:00002CEC                                         ; DATA XREF: NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+9Ar
.text:00002CEC                 db      4,     4,     4,     4 ; indirect table for switch statement
.text:00002CEC                 db      4,     4,     1,     4
.text:00002CEC                 db      2,     4,     3
.text:00002CFB                 align 10h
.text:00002D00
.text:00002D00 ; =============== S U B R O U T I N E =======================================
.text:00002D00
.text:00002D00 ; Attributes: bp-based frame
.text:00002D00
.text:00002D00 ; __int32 __stdcall NCompress::NBZip2::CEncoder::SetNumberOfThreads(NCompress::NBZip2::CEncoder *this, unsigned int)
.text:00002D00                 public ?SetNumberOfThreads@CEncoder@NBZip2@NCompress@@UAGJI@Z
.text:00002D00 ?SetNumberOfThreads@CEncoder@NBZip2@NCompress@@UAGJI@Z proc near
.text:00002D00                                         ; DATA XREF: .rdata:000031ECo
.text:00002D00
.text:00002D00 var_4           = dword ptr -4
.text:00002D00 this            = dword ptr  8
.text:00002D00 arg_4           = dword ptr  0Ch
.text:00002D00
.text:00002D00                 push    ebp
.text:00002D01                 mov     ebp, esp
.text:00002D03                 push    ecx
.text:00002D04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D0B                 mov     [ebp+var_4], 40h ; '@'
.text:00002D12                 cmp     [ebp+arg_4], 1
.text:00002D16                 jnb     short loc_2D1F
.text:00002D18                 mov     [ebp+arg_4], 1
.text:00002D1F
.text:00002D1F loc_2D1F:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetNumberOfThreads(uint)+16j
.text:00002D1F                 cmp     [ebp+arg_4], 40h ; '@'
.text:00002D23                 jbe     short loc_2D2C
.text:00002D25                 mov     [ebp+arg_4], 40h ; '@'
.text:00002D2C
.text:00002D2C loc_2D2C:                               ; CODE XREF: NCompress::NBZip2::CEncoder::SetNumberOfThreads(uint)+23j
.text:00002D2C                 mov     eax, [ebp+this]
.text:00002D2F                 mov     ecx, [ebp+arg_4]
.text:00002D32                 mov     [eax+194h], ecx
.text:00002D38                 xor     eax, eax
.text:00002D3A                 mov     esp, ebp
.text:00002D3C                 pop     ebp
.text:00002D3D                 retn    8
.text:00002D3D ?SetNumberOfThreads@CEncoder@NBZip2@NCompress@@UAGJI@Z endp
.text:00002D3D
.text:00002D3D _text           ends
.text:00002D3D
.rtc$TMZ:00002D40 ; ===========================================================================
.rtc$TMZ:00002D40
.rtc$TMZ:00002D40 ; Segment type: Pure data
.rtc$TMZ:00002D40 ; Segment permissions: Read
.rtc$TMZ:00002D40 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00002D40                 assume cs:_rtc$TMZ
.rtc$TMZ:00002D40                 ;org 2D40h
.rtc$TMZ:00002D40 ; COMDAT (pick any)
.rtc$TMZ:00002D40 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00002D40 _rtc$TMZ        ends
.rtc$TMZ:00002D40
.rtc$IMZ:00002D44 ; ===========================================================================
.rtc$IMZ:00002D44
.rtc$IMZ:00002D44 ; Segment type: Pure data
.rtc$IMZ:00002D44 ; Segment permissions: Read
.rtc$IMZ:00002D44 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00002D44                 assume cs:_rtc$IMZ
.rtc$IMZ:00002D44                 ;org 2D44h
.rtc$IMZ:00002D44 ; COMDAT (pick any)
.rtc$IMZ:00002D44 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00002D44 _rtc$IMZ        ends
.rtc$IMZ:00002D44
.text:00002D48 ; ===========================================================================
.text:00002D48
.text:00002D48 ; Segment type: Pure code
.text:00002D48 ; Segment permissions: Read/Execute
.text:00002D48 _text           segment para public 'CODE' use32
.text:00002D48                 assume cs:_text
.text:00002D48                 ;org 2D48h
.text:00002D48 ; COMDAT (pick any)
.text:00002D48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D48
.text:00002D48 ; =============== S U B R O U T I N E =======================================
.text:00002D48
.text:00002D48 ; Attributes: bp-based frame
.text:00002D48
.text:00002D48 ; unsigned int __thiscall NWindows::NSynchronization::CAutoResetEvent::Create(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00002D48                 public ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:00002D48 ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00002D48                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+26p
.text:00002D48                                         ; NCompress::NBZip2::CThreadInfo::Create(void)+42p ...
.text:00002D48
.text:00002D48 var_4           = dword ptr -4
.text:00002D48
.text:00002D48                 push    ebp
.text:00002D49                 mov     ebp, esp
.text:00002D4B                 push    ecx
.text:00002D4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D53                 mov     [ebp+var_4], ecx
.text:00002D56                 mov     eax, [ebp+var_4]
.text:00002D59                 push    eax
.text:00002D5A                 call    _AutoResetEvent_CreateNotSignaled@4 ; AutoResetEvent_CreateNotSignaled(x)
.text:00002D5F                 add     esp, 4
.text:00002D62                 cmp     ebp, esp
.text:00002D64                 call    __RTC_CheckEsp
.text:00002D69                 mov     esp, ebp
.text:00002D6B                 pop     ebp
.text:00002D6C                 retn
.text:00002D6C ?Create@CAutoResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00002D6C
.text:00002D6C ; ---------------------------------------------------------------------------
.text:00002D6D                 align 10h
.text:00002D6D _text           ends
.text:00002D6D
.text:00002D70 ; ===========================================================================
.text:00002D70
.text:00002D70 ; Segment type: Pure code
.text:00002D70 ; Segment permissions: Read/Execute
.text:00002D70 _text           segment para public 'CODE' use32
.text:00002D70                 assume cs:_text
.text:00002D70                 ;org 2D70h
.text:00002D70 ; COMDAT (pick any)
.text:00002D70                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002D70
.text:00002D70 ; =============== S U B R O U T I N E =======================================
.text:00002D70
.text:00002D70 ; Attributes: bp-based frame
.text:00002D70
.text:00002D70 ; unsigned int __thiscall NWindows::CThread::Create(NWindows::CThread *this, unsigned int (__stdcall *)(void *), void *)
.text:00002D70                 public ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
.text:00002D70 ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z proc near
.text:00002D70                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::Create(void)+83p
.text:00002D70
.text:00002D70 var_4           = dword ptr -4
.text:00002D70 arg_0           = dword ptr  8
.text:00002D70 arg_4           = dword ptr  0Ch
.text:00002D70
.text:00002D70                 push    ebp
.text:00002D71                 mov     ebp, esp
.text:00002D73                 push    ecx
.text:00002D74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002D7B                 mov     [ebp+var_4], ecx
.text:00002D7E                 mov     eax, [ebp+arg_4]
.text:00002D81                 push    eax
.text:00002D82                 mov     ecx, [ebp+arg_0]
.text:00002D85                 push    ecx
.text:00002D86                 mov     edx, [ebp+var_4]
.text:00002D89                 push    edx
.text:00002D8A                 call    _Thread_Create@12 ; Thread_Create(x,x,x)
.text:00002D8F                 add     esp, 4
.text:00002D92                 cmp     ebp, esp
.text:00002D94                 call    __RTC_CheckEsp
.text:00002D99                 mov     esp, ebp
.text:00002D9B                 pop     ebp
.text:00002D9C                 retn    8
.text:00002D9C ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z endp
.text:00002D9C
.text:00002D9C ; ---------------------------------------------------------------------------
.text:00002D9F                 align 10h
.text:00002D9F _text           ends
.text:00002D9F
.text:00002DA0 ; ===========================================================================
.text:00002DA0
.text:00002DA0 ; Segment type: Pure code
.text:00002DA0 ; Segment permissions: Read/Execute
.text:00002DA0 _text           segment para public 'CODE' use32
.text:00002DA0                 assume cs:_text
.text:00002DA0                 ;org 2DA0h
.text:00002DA0 ; COMDAT (pick any)
.text:00002DA0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DA0
.text:00002DA0 ; =============== S U B R O U T I N E =======================================
.text:00002DA0
.text:00002DA0 ; Attributes: bp-based frame
.text:00002DA0
.text:00002DA0 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Set(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00002DA0                 public ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00002DA0 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00002DA0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::FinishStream(bool)+27p
.text:00002DA0                                         ; NCompress::NBZip2::CThreadInfo::FinishStream(bool)+65p ...
.text:00002DA0
.text:00002DA0 var_4           = dword ptr -4
.text:00002DA0
.text:00002DA0                 push    ebp
.text:00002DA1                 mov     ebp, esp
.text:00002DA3                 push    ecx
.text:00002DA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DAB                 mov     [ebp+var_4], ecx
.text:00002DAE                 mov     eax, [ebp+var_4]
.text:00002DB1                 push    eax
.text:00002DB2                 call    _Event_Set@4    ; Event_Set(x)
.text:00002DB7                 add     esp, 4
.text:00002DBA                 cmp     ebp, esp
.text:00002DBC                 call    __RTC_CheckEsp
.text:00002DC1                 mov     esp, ebp
.text:00002DC3                 pop     ebp
.text:00002DC4                 retn
.text:00002DC4 ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00002DC4
.text:00002DC4 ; ---------------------------------------------------------------------------
.text:00002DC5                 align 4
.text:00002DC5 _text           ends
.text:00002DC5
.text:00002DC8 ; ===========================================================================
.text:00002DC8
.text:00002DC8 ; Segment type: Pure code
.text:00002DC8 ; Segment permissions: Read/Execute
.text:00002DC8 _text           segment para public 'CODE' use32
.text:00002DC8                 assume cs:_text
.text:00002DC8                 ;org 2DC8h
.text:00002DC8 ; COMDAT (pick any)
.text:00002DC8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DC8
.text:00002DC8 ; =============== S U B R O U T I N E =======================================
.text:00002DC8
.text:00002DC8 ; Attributes: bp-based frame
.text:00002DC8
.text:00002DC8 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Lock(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00002DC8                 public ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00002DC8 ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00002DC8                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::FinishStream(bool)+57p
.text:00002DC8                                         ; NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+4Fp ...
.text:00002DC8
.text:00002DC8 var_4           = dword ptr -4
.text:00002DC8
.text:00002DC8                 push    ebp
.text:00002DC9                 mov     ebp, esp
.text:00002DCB                 push    ecx
.text:00002DCC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002DD3                 mov     [ebp+var_4], ecx
.text:00002DD6                 mov     eax, [ebp+var_4]
.text:00002DD9                 mov     ecx, [eax]
.text:00002DDB                 push    ecx
.text:00002DDC                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00002DE1                 add     esp, 4
.text:00002DE4                 cmp     ebp, esp
.text:00002DE6                 call    __RTC_CheckEsp
.text:00002DEB                 mov     esp, ebp
.text:00002DED                 pop     ebp
.text:00002DEE                 retn
.text:00002DEE ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00002DEE
.text:00002DEE ; ---------------------------------------------------------------------------
.text:00002DEF                 align 10h
.text:00002DEF _text           ends
.text:00002DEF
.text:00002DF0 ; ===========================================================================
.text:00002DF0
.text:00002DF0 ; Segment type: Pure code
.text:00002DF0 ; Segment permissions: Read/Execute
.text:00002DF0 _text           segment para public 'CODE' use32
.text:00002DF0                 assume cs:_text
.text:00002DF0                 ;org 2DF0h
.text:00002DF0 ; COMDAT (pick any)
.text:00002DF0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00002DF0
.text:00002DF0 ; =============== S U B R O U T I N E =======================================
.text:00002DF0
.text:00002DF0 ; Attributes: bp-based frame
.text:00002DF0
.text:00002DF0 ; void __thiscall NWindows::NSynchronization::CCriticalSection::Leave(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00002DF0                 public ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:00002DF0 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:00002DF0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::FinishStream(bool)+43p
.text:00002DF0                                         ; NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+8Bp ...
.text:00002DF0
.text:00002DF0 lpCriticalSection= dword ptr -4
.text:00002DF0
.text:00002DF0                 push    ebp
.text:00002DF1                 mov     ebp, esp
.text:00002DF3                 push    ecx
.text:00002DF4                 push    esi
.text:00002DF5                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00002DFC                 mov     [ebp+lpCriticalSection], ecx
.text:00002DFF                 mov     esi, esp
.text:00002E01                 mov     eax, [ebp+lpCriticalSection]
.text:00002E04                 push    eax             ; lpCriticalSection
.text:00002E05                 call    dword ptr ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
.text:00002E0B                 cmp     esi, esp
.text:00002E0D                 call    __RTC_CheckEsp
.text:00002E12                 pop     esi
.text:00002E13                 add     esp, 4
.text:00002E16                 cmp     ebp, esp
.text:00002E18                 call    __RTC_CheckEsp
.text:00002E1D                 mov     esp, ebp
.text:00002E1F                 pop     ebp
.text:00002E20                 retn
.text:00002E20 ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:00002E20
.text:00002E20 ; ---------------------------------------------------------------------------
.text:00002E21                 align 4
.text:00002E21 _text           ends
.text:00002E21
.text$x:00002E24 ; ===========================================================================
.text$x:00002E24
.text$x:00002E24 ; Segment type: Pure code
.text$x:00002E24 ; Segment permissions: Read/Execute
.text$x:00002E24 _text$x         segment para public 'CODE' use32
.text$x:00002E24                 assume cs:_text$x
.text$x:00002E24                 ;org 2E24h
.text$x:00002E24                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00002E24
.text$x:00002E24 ; =============== S U B R O U T I N E =======================================
.text$x:00002E24
.text$x:00002E24
.text$x:00002E24 __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ proc near
.text$x:00002E24                                         ; DATA XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+5o
.text$x:00002E24
.text$x:00002E24 arg_4           = dword ptr  8
.text$x:00002E24
.text$x:00002E24                 mov     edx, [esp+arg_4]
.text$x:00002E28                 lea     eax, [edx+0Ch]
.text$x:00002E2B                 mov     ecx, [edx-50h]
.text$x:00002E2E                 xor     ecx, eax
.text$x:00002E30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E35                 mov     eax, offset __ehfuncinfo$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.text$x:00002E3A                 jmp     ___CxxFrameHandler3
.text$x:00002E3A __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ endp
.text$x:00002E3A
.text$x:00002E3F
.text$x:00002E3F ; =============== S U B R O U T I N E =======================================
.text$x:00002E3F
.text$x:00002E3F
.text$x:00002E3F __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00002E3F                                         ; DATA XREF: .xdata$x:00002FDCo
.text$x:00002E3F                 mov     ecx, [ebp-10h]
.text$x:00002E42                 add     ecx, 18h        ; this
.text$x:00002E45                 jmp     ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text$x:00002E45 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00002E45
.text$x:00002E4A
.text$x:00002E4A ; =============== S U B R O U T I N E =======================================
.text$x:00002E4A
.text$x:00002E4A
.text$x:00002E4A __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00002E4A                                         ; DATA XREF: .xdata$x:00002FE4o
.text$x:00002E4A                 mov     ecx, [ebp-10h]
.text$x:00002E4D                 add     ecx, 140h
.text$x:00002E53                 jmp     ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ ; CBitmEncoder<COutBuffer>::~CBitmEncoder<COutBuffer>(void)
.text$x:00002E53 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00002E53
.text$x:00002E58
.text$x:00002E58 ; =============== S U B R O U T I N E =======================================
.text$x:00002E58
.text$x:00002E58
.text$x:00002E58 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00002E58                                         ; DATA XREF: .xdata$x:00002FECo
.text$x:00002E58                 mov     ecx, [ebp-10h]
.text$x:00002E5B                 add     ecx, 180h       ; this
.text$x:00002E61                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002E61 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00002E61
.text$x:00002E66
.text$x:00002E66 ; =============== S U B R O U T I N E =======================================
.text$x:00002E66
.text$x:00002E66
.text$x:00002E66 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00002E66                                         ; DATA XREF: .xdata$x:00002FF4o
.text$x:00002E66                 mov     ecx, [ebp-10h]
.text$x:00002E69                 add     ecx, 184h       ; this
.text$x:00002E6F                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00002E6F __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00002E6F
.text$x:00002E74
.text$x:00002E74 ; =============== S U B R O U T I N E =======================================
.text$x:00002E74
.text$x:00002E74
.text$x:00002E74 __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$4 proc near
.text$x:00002E74                                         ; DATA XREF: .xdata$x:00002FFCo
.text$x:00002E74                 mov     ecx, [ebp-10h]
.text$x:00002E77                 add     ecx, 1ACh       ; this
.text$x:00002E7D                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002E7D __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$4 endp
.text$x:00002E7D
.text$x:00002E82
.text$x:00002E82 ; =============== S U B R O U T I N E =======================================
.text$x:00002E82
.text$x:00002E82
.text$x:00002E82 __ehhandler$??0CEncoder@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00002E82                                         ; DATA XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+5o
.text$x:00002E82
.text$x:00002E82 arg_4           = dword ptr  8
.text$x:00002E82
.text$x:00002E82                 mov     edx, [esp+arg_4]
.text$x:00002E86                 lea     eax, [edx+0Ch]
.text$x:00002E89                 mov     ecx, [edx-8]
.text$x:00002E8C                 xor     ecx, eax
.text$x:00002E8E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002E93                 mov     eax, offset __ehfuncinfo$??0CEncoder@NBZip2@NCompress@@QAE@XZ
.text$x:00002E98                 jmp     ___CxxFrameHandler3
.text$x:00002E98 __ehhandler$??0CEncoder@NBZip2@NCompress@@QAE@XZ endp
.text$x:00002E98
.text$x:00002E9D
.text$x:00002E9D ; =============== S U B R O U T I N E =======================================
.text$x:00002E9D
.text$x:00002E9D
.text$x:00002E9D __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00002E9D                                         ; DATA XREF: .xdata$x:00003028o
.text$x:00002E9D                 mov     ecx, [ebp-10h]
.text$x:00002EA0                 add     ecx, 18h        ; this
.text$x:00002EA3                 jmp     ??1CInBuffer@@QAE@XZ ; CInBuffer::~CInBuffer(void)
.text$x:00002EA3 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00002EA3
.text$x:00002EA8
.text$x:00002EA8 ; =============== S U B R O U T I N E =======================================
.text$x:00002EA8
.text$x:00002EA8
.text$x:00002EA8 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00002EA8                                         ; DATA XREF: .xdata$x:00003030o
.text$x:00002EA8                 mov     ecx, [ebp-10h]
.text$x:00002EAB                 add     ecx, 140h
.text$x:00002EB1                 jmp     ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ ; CBitmEncoder<COutBuffer>::~CBitmEncoder<COutBuffer>(void)
.text$x:00002EB1 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00002EB1
.text$x:00002EB6
.text$x:00002EB6 ; =============== S U B R O U T I N E =======================================
.text$x:00002EB6
.text$x:00002EB6
.text$x:00002EB6 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00002EB6                                         ; DATA XREF: .xdata$x:00003038o
.text$x:00002EB6                 mov     ecx, [ebp-10h]
.text$x:00002EB9                 add     ecx, 180h       ; this
.text$x:00002EBF                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002EBF __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00002EBF
.text$x:00002EC4
.text$x:00002EC4 ; =============== S U B R O U T I N E =======================================
.text$x:00002EC4
.text$x:00002EC4
.text$x:00002EC4 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00002EC4                                         ; DATA XREF: .xdata$x:00003040o
.text$x:00002EC4                 mov     ecx, [ebp-10h]
.text$x:00002EC7                 add     ecx, 184h       ; this
.text$x:00002ECD                 jmp     ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)
.text$x:00002ECD __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00002ECD
.text$x:00002ED2
.text$x:00002ED2 ; =============== S U B R O U T I N E =======================================
.text$x:00002ED2
.text$x:00002ED2
.text$x:00002ED2 __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$4 proc near
.text$x:00002ED2                                         ; DATA XREF: .xdata$x:00003048o
.text$x:00002ED2                 mov     ecx, [ebp-10h]
.text$x:00002ED5                 add     ecx, 1ACh       ; this
.text$x:00002EDB                 jmp     ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)
.text$x:00002EDB __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$4 endp
.text$x:00002EDB
.text$x:00002EE0
.text$x:00002EE0 ; =============== S U B R O U T I N E =======================================
.text$x:00002EE0
.text$x:00002EE0
.text$x:00002EE0 __ehhandler$??1CEncoder@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00002EE0                                         ; DATA XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+5o
.text$x:00002EE0
.text$x:00002EE0 arg_4           = dword ptr  8
.text$x:00002EE0
.text$x:00002EE0                 mov     edx, [esp+arg_4]
.text$x:00002EE4                 lea     eax, [edx+0Ch]
.text$x:00002EE7                 mov     ecx, [edx-8]
.text$x:00002EEA                 xor     ecx, eax
.text$x:00002EEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002EF1                 mov     eax, offset __ehfuncinfo$??1CEncoder@NBZip2@NCompress@@QAE@XZ
.text$x:00002EF6                 jmp     ___CxxFrameHandler3
.text$x:00002EF6 __ehhandler$??1CEncoder@NBZip2@NCompress@@QAE@XZ endp
.text$x:00002EF6
.text$x:00002EFB
.text$x:00002EFB ; =============== S U B R O U T I N E =======================================
.text$x:00002EFB
.text$x:00002EFB
.text$x:00002EFB __unwindfunclet$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$2 proc near
.text$x:00002EFB                                         ; DATA XREF: .xdata$x:0000307Co
.text$x:00002EFB                 mov     eax, [ebp-34h]
.text$x:00002EFE                 push    eax             ; void *
.text$x:00002EFF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00002F04                 pop     ecx
.text$x:00002F05                 retn
.text$x:00002F05 __unwindfunclet$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$2 endp
.text$x:00002F05
.text$x:00002F06
.text$x:00002F06 ; =============== S U B R O U T I N E =======================================
.text$x:00002F06
.text$x:00002F06
.text$x:00002F06 __ehhandler$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ proc near
.text$x:00002F06                                         ; DATA XREF: NCompress::NBZip2::CEncoder::Create(void)+5o
.text$x:00002F06
.text$x:00002F06 arg_4           = dword ptr  8
.text$x:00002F06
.text$x:00002F06                 mov     edx, [esp+arg_4]
.text$x:00002F0A                 lea     eax, [edx+0Ch]
.text$x:00002F0D                 mov     ecx, [edx-44h]
.text$x:00002F10                 xor     ecx, eax
.text$x:00002F12                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F17                 mov     eax, offset __ehfuncinfo$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.text$x:00002F1C                 jmp     ___CxxFrameHandler3
.text$x:00002F1C __ehhandler$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ endp
.text$x:00002F1C
.text$x:00002F21
.text$x:00002F21 ; =============== S U B R O U T I N E =======================================
.text$x:00002F21
.text$x:00002F21
.text$x:00002F21 __ehhandler$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
.text$x:00002F21                                         ; DATA XREF: NCompress::NBZip2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+5o
.text$x:00002F21
.text$x:00002F21 arg_4           = dword ptr  8
.text$x:00002F21
.text$x:00002F21                 mov     edx, [esp+arg_4]
.text$x:00002F25                 lea     eax, [edx+0Ch]
.text$x:00002F28                 mov     ecx, [edx-3Ch]
.text$x:00002F2B                 xor     ecx, eax
.text$x:00002F2D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F32                 mov     eax, offset __ehfuncinfo$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.text$x:00002F37                 jmp     ___CxxFrameHandler3
.text$x:00002F37 __ehhandler$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z endp
.text$x:00002F37
.text$x:00002F37 _text$x         ends
.text$x:00002F37
.xdata$x:00002F3C ; ===========================================================================
.xdata$x:00002F3C
.xdata$x:00002F3C ; Segment type: Pure data
.xdata$x:00002F3C ; Segment permissions: Read
.xdata$x:00002F3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002F3C                 assume cs:_xdata$x
.xdata$x:00002F3C                 ;org 2F3Ch
.xdata$x:00002F3C __unwindtable$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ db 0FFh
.xdata$x:00002F3C                                         ; DATA XREF: .xdata$x:00002F68o
.xdata$x:00002F3D                 db 0FFh
.xdata$x:00002F3E                 db 0FFh
.xdata$x:00002F3F                 db 0FFh
.xdata$x:00002F40                 db    0
.xdata$x:00002F41                 db    0
.xdata$x:00002F42                 db    0
.xdata$x:00002F43                 db    0
.xdata$x:00002F44                 db 0FFh
.xdata$x:00002F45                 db 0FFh
.xdata$x:00002F46                 db 0FFh
.xdata$x:00002F47                 db 0FFh
.xdata$x:00002F48                 db    0
.xdata$x:00002F49                 db    0
.xdata$x:00002F4A                 db    0
.xdata$x:00002F4B                 db    0
.xdata$x:00002F4C __tryblocktable$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ db    0
.xdata$x:00002F4C                                         ; DATA XREF: .xdata$x:00002F70o
.xdata$x:00002F4D                 db    0
.xdata$x:00002F4E                 db    0
.xdata$x:00002F4F                 db    0
.xdata$x:00002F50                 db    0
.xdata$x:00002F51                 db    0
.xdata$x:00002F52                 db    0
.xdata$x:00002F53                 db    0
.xdata$x:00002F54                 db    1
.xdata$x:00002F55                 db    0
.xdata$x:00002F56                 db    0
.xdata$x:00002F57                 db    0
.xdata$x:00002F58                 db    3
.xdata$x:00002F59                 db    0
.xdata$x:00002F5A                 db    0
.xdata$x:00002F5B                 db    0
.xdata$x:00002F5C                 dd offset __catchsym$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$4
.xdata$x:00002F60 __ehfuncinfo$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ db  22h ; "
.xdata$x:00002F60                                         ; DATA XREF: __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ+11o
.xdata$x:00002F61                 db    5
.xdata$x:00002F62                 db  93h ; ô
.xdata$x:00002F63                 db  19h
.xdata$x:00002F64                 db    2
.xdata$x:00002F65                 db    0
.xdata$x:00002F66                 db    0
.xdata$x:00002F67                 db    0
.xdata$x:00002F68                 dd offset __unwindtable$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.xdata$x:00002F6C                 db    1
.xdata$x:00002F6D                 db    0
.xdata$x:00002F6E                 db    0
.xdata$x:00002F6F                 db    0
.xdata$x:00002F70                 dd offset __tryblocktable$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ
.xdata$x:00002F74                 align 10h
.xdata$x:00002F80                 db    1
.xdata$x:00002F81                 db    0
.xdata$x:00002F82                 db    0
.xdata$x:00002F83                 db    0
.xdata$x:00002F84 __catchsym$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$4 db    9
.xdata$x:00002F84                                         ; DATA XREF: .xdata$x:00002F5Co
.xdata$x:00002F85                 db    0
.xdata$x:00002F86                 db    0
.xdata$x:00002F87                 db    0
.xdata$x:00002F88                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:00002F8C                 db 0D8h ; +
.xdata$x:00002F8D                 db 0FFh
.xdata$x:00002F8E                 db 0FFh
.xdata$x:00002F8F                 db 0FFh
.xdata$x:00002F90                 dd offset __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$0
.xdata$x:00002F94                 db    9
.xdata$x:00002F95                 db    0
.xdata$x:00002F96                 db    0
.xdata$x:00002F97                 db    0
.xdata$x:00002F98                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:00002F9C                 db 0CCh ; ¦
.xdata$x:00002F9D                 db 0FFh
.xdata$x:00002F9E                 db 0FFh
.xdata$x:00002F9F                 db 0FFh
.xdata$x:00002FA0                 dd offset __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$1
.xdata$x:00002FA4                 dd offset loc_3C+4
.xdata$x:00002FA8                 align 10h
.xdata$x:00002FB0                 dd offset __catch$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ$2
.xdata$x:00002FB4 __ehfuncinfo$??0CEncoder@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00002FB4                                         ; DATA XREF: __ehhandler$??0CEncoder@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00002FB5                 db    5
.xdata$x:00002FB6                 db  93h ; ô
.xdata$x:00002FB7                 db  19h
.xdata$x:00002FB8                 db    5
.xdata$x:00002FB9                 db    0
.xdata$x:00002FBA                 db    0
.xdata$x:00002FBB                 db    0
.xdata$x:00002FBC                 dd offset __unwindtable$??0CEncoder@NBZip2@NCompress@@QAE@XZ
.xdata$x:00002FC0                 db    0
.xdata$x:00002FC1                 db    0
.xdata$x:00002FC2                 db    0
.xdata$x:00002FC3                 db    0
.xdata$x:00002FC4                 db    0
.xdata$x:00002FC5                 db    0
.xdata$x:00002FC6                 db    0
.xdata$x:00002FC7                 db    0
.xdata$x:00002FC8                 db    0
.xdata$x:00002FC9                 db    0
.xdata$x:00002FCA                 db    0
.xdata$x:00002FCB                 db    0
.xdata$x:00002FCC                 db    0
.xdata$x:00002FCD                 db    0
.xdata$x:00002FCE                 db    0
.xdata$x:00002FCF                 db    0
.xdata$x:00002FD0                 db    0
.xdata$x:00002FD1                 db    0
.xdata$x:00002FD2                 db    0
.xdata$x:00002FD3                 db    0
.xdata$x:00002FD4                 db    1
.xdata$x:00002FD5                 db    0
.xdata$x:00002FD6                 db    0
.xdata$x:00002FD7                 db    0
.xdata$x:00002FD8 __unwindtable$??0CEncoder@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00002FD8                                         ; DATA XREF: .xdata$x:00002FBCo
.xdata$x:00002FD9                 db 0FFh
.xdata$x:00002FDA                 db 0FFh
.xdata$x:00002FDB                 db 0FFh
.xdata$x:00002FDC                 dd offset __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00002FE0                 db    0
.xdata$x:00002FE1                 db    0
.xdata$x:00002FE2                 db    0
.xdata$x:00002FE3                 db    0
.xdata$x:00002FE4                 dd offset __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00002FE8                 db    1
.xdata$x:00002FE9                 db    0
.xdata$x:00002FEA                 db    0
.xdata$x:00002FEB                 db    0
.xdata$x:00002FEC                 dd offset __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00002FF0                 db    2
.xdata$x:00002FF1                 db    0
.xdata$x:00002FF2                 db    0
.xdata$x:00002FF3                 db    0
.xdata$x:00002FF4                 dd offset __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00002FF8                 db    3
.xdata$x:00002FF9                 db    0
.xdata$x:00002FFA                 db    0
.xdata$x:00002FFB                 db    0
.xdata$x:00002FFC                 dd offset __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$4
.xdata$x:00003000 __ehfuncinfo$??1CEncoder@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003000                                         ; DATA XREF: __ehhandler$??1CEncoder@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003001                 db    5
.xdata$x:00003002                 db  93h ; ô
.xdata$x:00003003                 db  19h
.xdata$x:00003004                 db    5
.xdata$x:00003005                 db    0
.xdata$x:00003006                 db    0
.xdata$x:00003007                 db    0
.xdata$x:00003008                 dd offset __unwindtable$??1CEncoder@NBZip2@NCompress@@QAE@XZ
.xdata$x:0000300C                 align 20h
.xdata$x:00003020                 db    1
.xdata$x:00003021                 db    0
.xdata$x:00003022                 db    0
.xdata$x:00003023                 db    0
.xdata$x:00003024 __unwindtable$??1CEncoder@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00003024                                         ; DATA XREF: .xdata$x:00003008o
.xdata$x:00003025                 db 0FFh
.xdata$x:00003026                 db 0FFh
.xdata$x:00003027                 db 0FFh
.xdata$x:00003028                 dd offset __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:0000302C                 align 10h
.xdata$x:00003030                 dd offset __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00003034                 db    1
.xdata$x:00003035                 db    0
.xdata$x:00003036                 db    0
.xdata$x:00003037                 db    0
.xdata$x:00003038                 dd offset __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:0000303C                 db    2
.xdata$x:0000303D                 db    0
.xdata$x:0000303E                 db    0
.xdata$x:0000303F                 db    0
.xdata$x:00003040                 dd offset __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00003044                 db    3
.xdata$x:00003045                 db    0
.xdata$x:00003046                 db    0
.xdata$x:00003047                 db    0
.xdata$x:00003048                 dd offset __unwindfunclet$??1CEncoder@NBZip2@NCompress@@QAE@XZ$4
.xdata$x:0000304C __catchsym$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$3 dd offset loc_3C+4
.xdata$x:0000304C                                         ; DATA XREF: .xdata$x:0000306Co
.xdata$x:00003050                 db    0
.xdata$x:00003051                 db    0
.xdata$x:00003052                 db    0
.xdata$x:00003053                 db    0
.xdata$x:00003054                 db    0
.xdata$x:00003055                 db    0
.xdata$x:00003056                 db    0
.xdata$x:00003057                 db    0
.xdata$x:00003058                 dd offset __catch$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$0
.xdata$x:0000305C __tryblocktable$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ db    0
.xdata$x:0000305C                                         ; DATA XREF: .xdata$x:00003098o
.xdata$x:0000305D                 db    0
.xdata$x:0000305E                 db    0
.xdata$x:0000305F                 db    0
.xdata$x:00003060                 db    1
.xdata$x:00003061                 db    0
.xdata$x:00003062                 db    0
.xdata$x:00003063                 db    0
.xdata$x:00003064                 db    2
.xdata$x:00003065                 db    0
.xdata$x:00003066                 db    0
.xdata$x:00003067                 db    0
.xdata$x:00003068                 db    1
.xdata$x:00003069                 db    0
.xdata$x:0000306A                 db    0
.xdata$x:0000306B                 db    0
.xdata$x:0000306C                 dd offset __catchsym$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$3
.xdata$x:00003070 __unwindtable$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ db 0FFh
.xdata$x:00003070                                         ; DATA XREF: .xdata$x:00003090o
.xdata$x:00003071                 db 0FFh
.xdata$x:00003072                 db 0FFh
.xdata$x:00003073                 db 0FFh
.xdata$x:00003074                 db    0
.xdata$x:00003075                 db    0
.xdata$x:00003076                 db    0
.xdata$x:00003077                 db    0
.xdata$x:00003078                 db    0
.xdata$x:00003079                 db    0
.xdata$x:0000307A                 db    0
.xdata$x:0000307B                 db    0
.xdata$x:0000307C                 dd offset __unwindfunclet$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$2
.xdata$x:00003080                 db 0FFh
.xdata$x:00003081                 db 0FFh
.xdata$x:00003082                 db 0FFh
.xdata$x:00003083                 db 0FFh
.xdata$x:00003084                 db    0
.xdata$x:00003085                 db    0
.xdata$x:00003086                 db    0
.xdata$x:00003087                 db    0
.xdata$x:00003088 __ehfuncinfo$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ db  22h ; "
.xdata$x:00003088                                         ; DATA XREF: __ehhandler$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ+11o
.xdata$x:00003089                 db    5
.xdata$x:0000308A                 db  93h ; ô
.xdata$x:0000308B                 db  19h
.xdata$x:0000308C                 db    3
.xdata$x:0000308D                 db    0
.xdata$x:0000308E                 db    0
.xdata$x:0000308F                 db    0
.xdata$x:00003090                 dd offset __unwindtable$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.xdata$x:00003094                 db    1
.xdata$x:00003095                 db    0
.xdata$x:00003096                 db    0
.xdata$x:00003097                 db    0
.xdata$x:00003098                 dd offset __tryblocktable$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ
.xdata$x:0000309C                 db    0
.xdata$x:0000309D                 db    0
.xdata$x:0000309E                 db    0
.xdata$x:0000309F                 db    0
.xdata$x:000030A0                 db    0
.xdata$x:000030A1                 db    0
.xdata$x:000030A2                 db    0
.xdata$x:000030A3                 db    0
.xdata$x:000030A4                 db    0
.xdata$x:000030A5                 db    0
.xdata$x:000030A6                 db    0
.xdata$x:000030A7                 db    0
.xdata$x:000030A8                 db    1
.xdata$x:000030A9                 db    0
.xdata$x:000030AA                 db    0
.xdata$x:000030AB                 db    0
.xdata$x:000030AC __unwindtable$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db 0FFh
.xdata$x:000030AC                                         ; DATA XREF: .xdata$x:000030D8o
.xdata$x:000030AD                 db 0FFh
.xdata$x:000030AE                 db 0FFh
.xdata$x:000030AF                 db 0FFh
.xdata$x:000030B0                 db    0
.xdata$x:000030B1                 db    0
.xdata$x:000030B2                 db    0
.xdata$x:000030B3                 db    0
.xdata$x:000030B4                 db 0FFh
.xdata$x:000030B5                 db 0FFh
.xdata$x:000030B6                 db 0FFh
.xdata$x:000030B7                 db 0FFh
.xdata$x:000030B8                 db    0
.xdata$x:000030B9                 db    0
.xdata$x:000030BA                 db    0
.xdata$x:000030BB                 db    0
.xdata$x:000030BC __tryblocktable$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db    0
.xdata$x:000030BC                                         ; DATA XREF: .xdata$x:000030E0o
.xdata$x:000030BD                 db    0
.xdata$x:000030BE                 db    0
.xdata$x:000030BF                 db    0
.xdata$x:000030C0                 db    0
.xdata$x:000030C1                 db    0
.xdata$x:000030C2                 db    0
.xdata$x:000030C3                 db    0
.xdata$x:000030C4                 db    1
.xdata$x:000030C5                 db    0
.xdata$x:000030C6                 db    0
.xdata$x:000030C7                 db    0
.xdata$x:000030C8                 db    3
.xdata$x:000030C9                 db    0
.xdata$x:000030CA                 db    0
.xdata$x:000030CB                 db    0
.xdata$x:000030CC                 dd offset __catchsym$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
.xdata$x:000030D0 __ehfuncinfo$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z db  22h ; "
.xdata$x:000030D0                                         ; DATA XREF: __ehhandler$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z+11o
.xdata$x:000030D1                 db    5
.xdata$x:000030D2                 db  93h ; ô
.xdata$x:000030D3                 db  19h
.xdata$x:000030D4                 db    2
.xdata$x:000030D5                 db    0
.xdata$x:000030D6                 db    0
.xdata$x:000030D7                 db    0
.xdata$x:000030D8                 dd offset __unwindtable$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000030DC                 db    1
.xdata$x:000030DD                 db    0
.xdata$x:000030DE                 db    0
.xdata$x:000030DF                 db    0
.xdata$x:000030E0                 dd offset __tryblocktable$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
.xdata$x:000030E4                 align 10h
.xdata$x:000030F0                 db    1
.xdata$x:000030F1                 db    0
.xdata$x:000030F2                 db    0
.xdata$x:000030F3                 db    0
.xdata$x:000030F4 __catchsym$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 db    9
.xdata$x:000030F4                                         ; DATA XREF: .xdata$x:000030CCo
.xdata$x:000030F5                 db    0
.xdata$x:000030F6                 db    0
.xdata$x:000030F7                 db    0
.xdata$x:000030F8                 dd offset ??_R0?AUCInBufferException@@@8 ; CInBufferException `RTTI Type Descriptor'
.xdata$x:000030FC                 db 0E8h ; F
.xdata$x:000030FD                 db 0FFh
.xdata$x:000030FE                 db 0FFh
.xdata$x:000030FF                 db 0FFh
.xdata$x:00003100                 dd offset __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
.xdata$x:00003104                 db    9
.xdata$x:00003105                 db    0
.xdata$x:00003106                 db    0
.xdata$x:00003107                 db    0
.xdata$x:00003108                 dd offset ??_R0?AUCOutBufferException@@@8 ; COutBufferException `RTTI Type Descriptor'
.xdata$x:0000310C                 db 0DCh ; _
.xdata$x:0000310D                 db 0FFh
.xdata$x:0000310E                 db 0FFh
.xdata$x:0000310F                 db 0FFh
.xdata$x:00003110                 dd offset __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
.xdata$x:00003114                 dd offset loc_3C+4
.xdata$x:00003118                 align 10h
.xdata$x:00003120                 dd offset __catch$?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
.xdata$x:00003120 _xdata$x        ends
.xdata$x:00003120
.data:00003124 ; ===========================================================================
.data:00003124
.data:00003124 ; Segment type: Pure data
.data:00003124 ; Segment permissions: Read/Write
.data:00003124 _data           segment dword public 'DATA' use32
.data:00003124                 assume cs:_data
.data:00003124                 ;org 3124h
.data:00003124 ; COMDAT (pick any)
.data:00003124                 public ??_R0?AUCInBufferException@@@8
.data:00003124 ; struct CInBufferException `RTTI Type Descriptor'
.data:00003124 ??_R0?AUCInBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003124                                         ; DATA XREF: .xdata$x:00002F88o
.data:00003124                                         ; .xdata$x:000030F8o
.data:00003124                                         ; const type_info::`vftable'
.data:00003128                 db    0
.data:00003129                 db    0
.data:0000312A                 db    0
.data:0000312B                 db    0
.data:0000312C                 db  2Eh ; .
.data:0000312D                 db  3Fh ; ?
.data:0000312E                 db  41h ; A
.data:0000312F                 db  55h ; U
.data:00003130                 db  43h ; C
.data:00003131                 db  49h ; I
.data:00003132                 db  6Eh ; n
.data:00003133                 db  42h ; B
.data:00003134                 db  75h ; u
.data:00003135                 db  66h ; f
.data:00003136                 db  66h ; f
.data:00003137                 db  65h ; e
.data:00003138                 db  72h ; r
.data:00003139                 db  45h ; E
.data:0000313A                 db  78h ; x
.data:0000313B                 db  63h ; c
.data:0000313C                 db  65h ; e
.data:0000313D                 db  70h ; p
.data:0000313E                 db  74h ; t
.data:0000313F                 db  69h ; i
.data:00003140                 db  6Fh ; o
.data:00003141                 db  6Eh ; n
.data:00003142                 db  40h ; @
.data:00003143                 db  40h ; @
.data:00003144                 db    0
.data:00003145                 align 4
.data:00003145 _data           ends
.data:00003145
.data:00003148 ; ===========================================================================
.data:00003148
.data:00003148 ; Segment type: Pure data
.data:00003148 ; Segment permissions: Read/Write
.data:00003148 _data           segment dword public 'DATA' use32
.data:00003148                 assume cs:_data
.data:00003148                 ;org 3148h
.data:00003148 ; COMDAT (pick any)
.data:00003148                 public ??_R0?AUCOutBufferException@@@8
.data:00003148 ; struct COutBufferException `RTTI Type Descriptor'
.data:00003148 ??_R0?AUCOutBufferException@@@8 dd offset ??_7type_info@@6B@
.data:00003148                                         ; DATA XREF: .xdata$x:00002F98o
.data:00003148                                         ; .xdata$x:00003108o
.data:00003148                                         ; const type_info::`vftable'
.data:0000314C                 align 10h
.data:00003150 a_?aucoutbuffer db '.?AUCOutBufferException@@',0
.data:0000316A                 align 4
.data:0000316A _data           ends
.data:0000316A
.text:0000316C ; ===========================================================================
.text:0000316C
.text:0000316C ; Segment type: Pure code
.text:0000316C ; Segment permissions: Read/Execute
.text:0000316C _text           segment para public 'CODE' use32
.text:0000316C                 assume cs:_text
.text:0000316C                 ;org 316Ch
.text:0000316C ; COMDAT (pick any)
.text:0000316C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000316C
.text:0000316C ; =============== S U B R O U T I N E =======================================
.text:0000316C
.text:0000316C ; Attributes: bp-based frame
.text:0000316C
.text:0000316C ; void __thiscall NWindows::NSynchronization::CCriticalSection::Enter(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:0000316C                 public ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
.text:0000316C ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
.text:0000316C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+63p
.text:0000316C
.text:0000316C lpCriticalSection= dword ptr -4
.text:0000316C
.text:0000316C                 push    ebp
.text:0000316D                 mov     ebp, esp
.text:0000316F                 push    ecx
.text:00003170                 push    esi
.text:00003171                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:00003178                 mov     [ebp+lpCriticalSection], ecx
.text:0000317B                 mov     esi, esp
.text:0000317D                 mov     eax, [ebp+lpCriticalSection]
.text:00003180                 push    eax             ; lpCriticalSection
.text:00003181                 call    dword ptr ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
.text:00003187                 cmp     esi, esp
.text:00003189                 call    __RTC_CheckEsp
.text:0000318E                 pop     esi
.text:0000318F                 add     esp, 4
.text:00003192                 cmp     ebp, esp
.text:00003194                 call    __RTC_CheckEsp
.text:00003199                 mov     esp, ebp
.text:0000319B                 pop     ebp
.text:0000319C                 retn
.text:0000319C ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ endp
.text:0000319C
.text:0000319C ; ---------------------------------------------------------------------------
.text:0000319D                 align 10h
.text:0000319D _text           ends
.text:0000319D
.text:000031A0 ; ===========================================================================
.text:000031A0
.text:000031A0 ; Segment type: Pure code
.text:000031A0 ; Segment permissions: Read/Execute
.text:000031A0 _text           segment para public 'CODE' use32
.text:000031A0                 assume cs:_text
.text:000031A0                 ;org 31A0h
.text:000031A0 ; COMDAT (pick any)
.text:000031A0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000031A0
.text:000031A0 ; =============== S U B R O U T I N E =======================================
.text:000031A0
.text:000031A0 ; Attributes: bp-based frame
.text:000031A0
.text:000031A0 ; unsigned __int64 __thiscall CInBufferBase::GetProcessedSize(CInBufferBase *__hidden this)
.text:000031A0                 public ?GetProcessedSize@CInBufferBase@@QBE_KXZ
.text:000031A0 ?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
.text:000031A0                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+F2p
.text:000031A0                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+361p
.text:000031A0
.text:000031A0 var_4           = dword ptr -4
.text:000031A0
.text:000031A0                 push    ebp
.text:000031A1                 mov     ebp, esp
.text:000031A3                 push    ecx
.text:000031A4                 push    esi
.text:000031A5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000031AC                 mov     [ebp+var_4], ecx
.text:000031AF                 mov     eax, [ebp+var_4]
.text:000031B2                 mov     ecx, [eax+20h]
.text:000031B5                 xor     esi, esi
.text:000031B7                 mov     edx, [ebp+var_4]
.text:000031BA                 add     ecx, [edx+10h]
.text:000031BD                 adc     esi, [edx+14h]
.text:000031C0                 mov     eax, [ebp+var_4]
.text:000031C3                 mov     edx, [ebp+var_4]
.text:000031C6                 mov     eax, [eax]
.text:000031C8                 sub     eax, [edx+8]
.text:000031CB                 cdq
.text:000031CC                 add     ecx, eax
.text:000031CE                 adc     esi, edx
.text:000031D0                 mov     eax, ecx
.text:000031D2                 mov     edx, esi
.text:000031D4                 pop     esi
.text:000031D5                 mov     esp, ebp
.text:000031D7                 pop     ebp
.text:000031D8                 retn
.text:000031D8 ?GetProcessedSize@CInBufferBase@@QBE_KXZ endp
.text:000031D8
.text:000031D8 ; ---------------------------------------------------------------------------
.text:000031D9                 align 4
.text:000031D9 _text           ends
.text:000031D9
.rdata:000031DC ; ===========================================================================
.rdata:000031DC
.rdata:000031DC ; Segment type: Pure data
.rdata:000031DC ; Segment permissions: Read
.rdata:000031DC _rdata          segment dword public 'DATA' use32
.rdata:000031DC                 assume cs:_rdata
.rdata:000031DC                 ;org 31DCh
.rdata:000031DC ; COMDAT (pick largest)
.rdata:000031DC                 dd offset ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderMt'}
.rdata:000031E0                 public ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@
.rdata:000031E0 ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderMt'}
.rdata:000031E0 ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ dd offset ?QueryInterface@CEncoder@NBZip2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.rdata:000031E0                                         ; DATA XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+6Co
.rdata:000031E0                                         ; NCompress::NBZip2::CEncoder::~CEncoder(void)+43o
.rdata:000031E0                                         ; [thunk]:NCompress::NBZip2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:000031E4                 dd offset ?AddRef@CEncoder@NBZip2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBZip2::CEncoder::AddRef`adjustor{8}' (void)
.rdata:000031E8                 dd offset ?Release@CEncoder@NBZip2@NCompress@@W7AGKXZ ; [thunk]:NCompress::NBZip2::CEncoder::Release`adjustor{8}' (void)
.rdata:000031EC                 dd offset ?SetNumberOfThreads@CEncoder@NBZip2@NCompress@@UAGJI@Z ; NCompress::NBZip2::CEncoder::SetNumberOfThreads(uint)
.rdata:000031EC _rdata          ends
.rdata:000031EC
.rdata:000031F0 ; ===========================================================================
.rdata:000031F0
.rdata:000031F0 ; Segment type: Pure data
.rdata:000031F0 ; Segment permissions: Read
.rdata:000031F0 _rdata          segment dword public 'DATA' use32
.rdata:000031F0                 assume cs:_rdata
.rdata:000031F0                 ;org 31F0h
.rdata:000031F0 ; COMDAT (pick largest)
.rdata:000031F0                 dd offset ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@ ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:000031F4                 public ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@
.rdata:000031F4 ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:000031F4 ??_7CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CEncoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000031F4                                         ; DATA XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+62o
.rdata:000031F4                                         ; NCompress::NBZip2::CEncoder::~CEncoder(void)+39o
.rdata:000031F4                                         ; [thunk]:NCompress::NBZip2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000031F8                 dd offset ?AddRef@CEncoder@NBZip2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBZip2::CEncoder::AddRef`adjustor{4}' (void)
.rdata:000031FC                 dd offset ?Release@CEncoder@NBZip2@NCompress@@W3AGKXZ ; [thunk]:NCompress::NBZip2::CEncoder::Release`adjustor{4}' (void)
.rdata:00003200                 dd offset ?SetCoderProperties@CEncoder@NBZip2@NCompress@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:00003200 _rdata          ends
.rdata:00003200
.rdata:00003204 ; ===========================================================================
.rdata:00003204
.rdata:00003204 ; Segment type: Pure data
.rdata:00003204 ; Segment permissions: Read
.rdata:00003204 _rdata          segment dword public 'DATA' use32
.rdata:00003204                 assume cs:_rdata
.rdata:00003204                 ;org 3204h
.rdata:00003204 ; COMDAT (pick largest)
.rdata:00003204                 dd offset ??_R4CEncoder@NBZip2@NCompress@@6BICompressCoder@@@ ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata:00003208                 public ??_7CEncoder@NBZip2@NCompress@@6BICompressCoder@@@
.rdata:00003208 ; const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressCoder'}
.rdata:00003208 ??_7CEncoder@NBZip2@NCompress@@6BICompressCoder@@@ dd offset ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003208                                         ; DATA XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+59o
.rdata:00003208                                         ; NCompress::NBZip2::CEncoder::~CEncoder(void)+30o
.rdata:00003208                                         ; NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)
.rdata:0000320C                 dd offset ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::AddRef(void)
.rdata:00003210                 dd offset ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::Release(void)
.rdata:00003214                 dd offset ?Code@CEncoder@NBZip2@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CEncoder::Code(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)
.rdata:00003214 _rdata          ends
.rdata:00003214
.rdata$r:00003218 ; ===========================================================================
.rdata$r:00003218
.rdata$r:00003218 ; Segment type: Pure data
.rdata$r:00003218 ; Segment permissions: Read
.rdata$r:00003218 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003218                 assume cs:_rdata$r
.rdata$r:00003218                 ;org 3218h
.rdata$r:00003218 ; COMDAT (pick any)
.rdata$r:00003218                 public ??_R4CEncoder@NBZip2@NCompress@@6BICompressCoder@@@
.rdata$r:00003218 ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressCoder'}
.rdata$r:00003218 ??_R4CEncoder@NBZip2@NCompress@@6BICompressCoder@@@ db    0
.rdata$r:00003218                                         ; DATA XREF: .rdata:00003204o
.rdata$r:00003219                 db    0
.rdata$r:0000321A                 db    0
.rdata$r:0000321B                 db    0
.rdata$r:0000321C                 db    0
.rdata$r:0000321D                 db    0
.rdata$r:0000321E                 db    0
.rdata$r:0000321F                 db    0
.rdata$r:00003220                 db    0
.rdata$r:00003221                 db    0
.rdata$r:00003222                 db    0
.rdata$r:00003223                 db    0
.rdata$r:00003224                 dd offset ??_R0?AVCEncoder@NBZip2@NCompress@@@8 ; NCompress::NBZip2::CEncoder `RTTI Type Descriptor'
.rdata$r:00003228                 dd offset ??_R3CEncoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003228 _rdata$r        ends
.rdata$r:00003228
.data:0000322C ; ===========================================================================
.data:0000322C
.data:0000322C ; Segment type: Pure data
.data:0000322C ; Segment permissions: Read/Write
.data:0000322C _data           segment dword public 'DATA' use32
.data:0000322C                 assume cs:_data
.data:0000322C                 ;org 322Ch
.data:0000322C ; COMDAT (pick any)
.data:0000322C                 public ??_R0?AVCEncoder@NBZip2@NCompress@@@8
.data:0000322C ; class NCompress::NBZip2::CEncoder `RTTI Type Descriptor'
.data:0000322C ??_R0?AVCEncoder@NBZip2@NCompress@@@8 dd offset ??_7type_info@@6B@
.data:0000322C                                         ; DATA XREF: .rdata$r:00003224o
.data:0000322C                                         ; .rdata$r:NCompress::NBZip2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000322C                                         ; const type_info::`vftable'
.data:00003230                 db    0
.data:00003231                 db    0
.data:00003232                 db    0
.data:00003233                 db    0
.data:00003234                 db  2Eh ; .
.data:00003235                 db  3Fh ; ?
.data:00003236                 db  41h ; A
.data:00003237                 db  56h ; V
.data:00003238                 db  43h ; C
.data:00003239                 db  45h ; E
.data:0000323A                 db  6Eh ; n
.data:0000323B                 db  63h ; c
.data:0000323C                 db  6Fh ; o
.data:0000323D                 db  64h ; d
.data:0000323E                 db  65h ; e
.data:0000323F                 db  72h ; r
.data:00003240                 db  40h ; @
.data:00003241                 db  4Eh ; N
.data:00003242                 db  42h ; B
.data:00003243                 db  5Ah ; Z
.data:00003244                 db  69h ; i
.data:00003245                 db  70h ; p
.data:00003246                 db  32h ; 2
.data:00003247                 db  40h ; @
.data:00003248                 db  4Eh ; N
.data:00003249                 db  43h ; C
.data:0000324A                 db  6Fh ; o
.data:0000324B                 db  6Dh ; m
.data:0000324C                 db  70h ; p
.data:0000324D                 db  72h ; r
.data:0000324E                 db  65h ; e
.data:0000324F                 db  73h ; s
.data:00003250                 db  73h ; s
.data:00003251                 db  40h ; @
.data:00003252                 db  40h ; @
.data:00003253                 db    0
.data:00003253 _data           ends
.data:00003253
.rdata$r:00003254 ; ===========================================================================
.rdata$r:00003254
.rdata$r:00003254 ; Segment type: Pure data
.rdata$r:00003254 ; Segment permissions: Read
.rdata$r:00003254 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003254                 assume cs:_rdata$r
.rdata$r:00003254                 ;org 3254h
.rdata$r:00003254 ; COMDAT (pick any)
.rdata$r:00003254                 public ??_R3CEncoder@NBZip2@NCompress@@8
.rdata$r:00003254 ; NCompress::NBZip2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003254 ??_R3CEncoder@NBZip2@NCompress@@8 db    0 ; DATA XREF: .rdata$r:00003228o
.rdata$r:00003254                                         ; .rdata$r:000032A0o ...
.rdata$r:00003255                 db    0
.rdata$r:00003256                 db    0
.rdata$r:00003257                 db    0
.rdata$r:00003258                 db    5
.rdata$r:00003259                 db    0
.rdata$r:0000325A                 db    0
.rdata$r:0000325B                 db    0
.rdata$r:0000325C                 db    8
.rdata$r:0000325D                 db    0
.rdata$r:0000325E                 db    0
.rdata$r:0000325F                 db    0
.rdata$r:00003260                 dd offset ??_R2CEncoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CEncoder::`RTTI Base Class Array'
.rdata$r:00003260 _rdata$r        ends
.rdata$r:00003260
.rdata$r:00003264 ; ===========================================================================
.rdata$r:00003264
.rdata$r:00003264 ; Segment type: Pure data
.rdata$r:00003264 ; Segment permissions: Read
.rdata$r:00003264 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003264                 assume cs:_rdata$r
.rdata$r:00003264                 ;org 3264h
.rdata$r:00003264 ; COMDAT (pick any)
.rdata$r:00003264                 public ??_R2CEncoder@NBZip2@NCompress@@8
.rdata$r:00003264 ; NCompress::NBZip2::CEncoder::`RTTI Base Class Array'
.rdata$r:00003264 ??_R2CEncoder@NBZip2@NCompress@@8 dd offset ??_R1A@?0A@EA@CEncoder@NBZip2@NCompress@@8
.rdata$r:00003264                                         ; DATA XREF: .rdata$r:00003260o
.rdata$r:00003264                                         ; NCompress::NBZip2::CEncoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003268                 dd offset ??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000326C                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003270                 dd offset ??_R13?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003274                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003278                 dd offset ??_R17?0A@EA@ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:0000327C                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00003280                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00003284                 db    0
.rdata$r:00003285                 align 4
.rdata$r:00003285 _rdata$r        ends
.rdata$r:00003285
.rdata$r:00003288 ; ===========================================================================
.rdata$r:00003288
.rdata$r:00003288 ; Segment type: Pure data
.rdata$r:00003288 ; Segment permissions: Read
.rdata$r:00003288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003288                 assume cs:_rdata$r
.rdata$r:00003288                 ;org 3288h
.rdata$r:00003288 ; COMDAT (pick any)
.rdata$r:00003288                 public ??_R1A@?0A@EA@CEncoder@NBZip2@NCompress@@8
.rdata$r:00003288 ; NCompress::NBZip2::CEncoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003288 ??_R1A@?0A@EA@CEncoder@NBZip2@NCompress@@8 dd offset ??_R0?AVCEncoder@NBZip2@NCompress@@@8
.rdata$r:00003288                                         ; DATA XREF: .rdata$r:NCompress::NBZip2::CEncoder::`RTTI Base Class Array'o
.rdata$r:00003288                                         ; NCompress::NBZip2::CEncoder `RTTI Type Descriptor'
.rdata$r:0000328C                 db    7
.rdata$r:0000328D                 db    0
.rdata$r:0000328E                 db    0
.rdata$r:0000328F                 db    0
.rdata$r:00003290                 db    0
.rdata$r:00003291                 db    0
.rdata$r:00003292                 db    0
.rdata$r:00003293                 db    0
.rdata$r:00003294                 db 0FFh
.rdata$r:00003295                 db 0FFh
.rdata$r:00003296                 db 0FFh
.rdata$r:00003297                 db 0FFh
.rdata$r:00003298                 db    0
.rdata$r:00003299                 db    0
.rdata$r:0000329A                 db    0
.rdata$r:0000329B                 db    0
.rdata$r:0000329C                 db  40h ; @
.rdata$r:0000329D                 db    0
.rdata$r:0000329E                 db    0
.rdata$r:0000329F                 db    0
.rdata$r:000032A0                 dd offset ??_R3CEncoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032A0 _rdata$r        ends
.rdata$r:000032A0
.rdata$r:000032A4 ; ===========================================================================
.rdata$r:000032A4
.rdata$r:000032A4 ; Segment type: Pure data
.rdata$r:000032A4 ; Segment permissions: Read
.rdata$r:000032A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032A4                 assume cs:_rdata$r
.rdata$r:000032A4                 ;org 32A4h
.rdata$r:000032A4 ; COMDAT (pick any)
.rdata$r:000032A4                 public ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000032A4 ; ICompressCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000032A4 ??_R1A@?0A@EA@ICompressCoder@@8 dd offset ??_R0?AUICompressCoder@@@8
.rdata$r:000032A4                                         ; DATA XREF: .rdata$r:00003268o
.rdata$r:000032A4                                         ; .rdata$r:ICompressCoder::`RTTI Base Class Array'o
.rdata$r:000032A4                                         ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:000032A8                 db    1
.rdata$r:000032A9                 db    0
.rdata$r:000032AA                 db    0
.rdata$r:000032AB                 db    0
.rdata$r:000032AC                 db    0
.rdata$r:000032AD                 db    0
.rdata$r:000032AE                 db    0
.rdata$r:000032AF                 db    0
.rdata$r:000032B0                 db 0FFh
.rdata$r:000032B1                 db 0FFh
.rdata$r:000032B2                 db 0FFh
.rdata$r:000032B3                 db 0FFh
.rdata$r:000032B4                 db    0
.rdata$r:000032B5                 db    0
.rdata$r:000032B6                 db    0
.rdata$r:000032B7                 db    0
.rdata$r:000032B8                 db  40h ; @
.rdata$r:000032B9                 db    0
.rdata$r:000032BA                 db    0
.rdata$r:000032BB                 db    0
.rdata$r:000032BC                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032BC _rdata$r        ends
.rdata$r:000032BC
.data:000032C0 ; ===========================================================================
.data:000032C0
.data:000032C0 ; Segment type: Pure data
.data:000032C0 ; Segment permissions: Read/Write
.data:000032C0 _data           segment dword public 'DATA' use32
.data:000032C0                 assume cs:_data
.data:000032C0                 ;org 32C0h
.data:000032C0 ; COMDAT (pick any)
.data:000032C0                 public ??_R0?AUICompressCoder@@@8
.data:000032C0 ; struct ICompressCoder `RTTI Type Descriptor'
.data:000032C0 ??_R0?AUICompressCoder@@@8 dd offset ??_7type_info@@6B@
.data:000032C0                                         ; DATA XREF: .rdata$r:ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000032C0                                         ; .rdata$r:0000386Co
.data:000032C0                                         ; const type_info::`vftable'
.data:000032C4                 align 8
.data:000032C8 a_?auicompressc db '.?AUICompressCoder@@',0
.data:000032DD                 align 10h
.data:000032DD _data           ends
.data:000032DD
.rdata$r:000032E0 ; ===========================================================================
.rdata$r:000032E0
.rdata$r:000032E0 ; Segment type: Pure data
.rdata$r:000032E0 ; Segment permissions: Read
.rdata$r:000032E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032E0                 assume cs:_rdata$r
.rdata$r:000032E0                 ;org 32E0h
.rdata$r:000032E0 ; COMDAT (pick any)
.rdata$r:000032E0                 public ??_R3ICompressCoder@@8
.rdata$r:000032E0 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000032E0 ??_R3ICompressCoder@@8 db    0          ; DATA XREF: .rdata$r:000032BCo
.rdata$r:000032E0                                         ; .rdata$r:00003870o
.rdata$r:000032E1                 db    0
.rdata$r:000032E2                 db    0
.rdata$r:000032E3                 db    0
.rdata$r:000032E4                 db    0
.rdata$r:000032E5                 db    0
.rdata$r:000032E6                 db    0
.rdata$r:000032E7                 db    0
.rdata$r:000032E8                 db    2
.rdata$r:000032E9                 db    0
.rdata$r:000032EA                 db    0
.rdata$r:000032EB                 db    0
.rdata$r:000032EC                 dd offset ??_R2ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000032EC _rdata$r        ends
.rdata$r:000032EC
.rdata$r:000032F0 ; ===========================================================================
.rdata$r:000032F0
.rdata$r:000032F0 ; Segment type: Pure data
.rdata$r:000032F0 ; Segment permissions: Read
.rdata$r:000032F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032F0                 assume cs:_rdata$r
.rdata$r:000032F0                 ;org 32F0h
.rdata$r:000032F0 ; COMDAT (pick any)
.rdata$r:000032F0                 public ??_R2ICompressCoder@@8
.rdata$r:000032F0 ; ICompressCoder::`RTTI Base Class Array'
.rdata$r:000032F0 ??_R2ICompressCoder@@8 dd offset ??_R1A@?0A@EA@ICompressCoder@@8
.rdata$r:000032F0                                         ; DATA XREF: .rdata$r:000032ECo
.rdata$r:000032F0                                         ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000032F4                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000032F8                 db    0
.rdata$r:000032F9                 align 4
.rdata$r:000032F9 _rdata$r        ends
.rdata$r:000032F9
.rdata$r:000032FC ; ===========================================================================
.rdata$r:000032FC
.rdata$r:000032FC ; Segment type: Pure data
.rdata$r:000032FC ; Segment permissions: Read
.rdata$r:000032FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000032FC                 assume cs:_rdata$r
.rdata$r:000032FC                 ;org 32FCh
.rdata$r:000032FC ; COMDAT (pick any)
.rdata$r:000032FC                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000032FC ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000032FC ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000032FC                                         ; DATA XREF: .rdata$r:000032F4o
.rdata$r:000032FC                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000032FC                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003300                 db    0
.rdata$r:00003301                 db    0
.rdata$r:00003302                 db    0
.rdata$r:00003303                 db    0
.rdata$r:00003304                 db    0
.rdata$r:00003305                 db    0
.rdata$r:00003306                 db    0
.rdata$r:00003307                 db    0
.rdata$r:00003308                 db 0FFh
.rdata$r:00003309                 db 0FFh
.rdata$r:0000330A                 db 0FFh
.rdata$r:0000330B                 db 0FFh
.rdata$r:0000330C                 db    0
.rdata$r:0000330D                 db    0
.rdata$r:0000330E                 db    0
.rdata$r:0000330F                 db    0
.rdata$r:00003310                 db  40h ; @
.rdata$r:00003311                 db    0
.rdata$r:00003312                 db    0
.rdata$r:00003313                 db    0
.rdata$r:00003314                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003314 _rdata$r        ends
.rdata$r:00003314
.data:00003318 ; ===========================================================================
.data:00003318
.data:00003318 ; Segment type: Pure data
.data:00003318 ; Segment permissions: Read/Write
.data:00003318 _data           segment dword public 'DATA' use32
.data:00003318                 assume cs:_data
.data:00003318                 ;org 3318h
.data:00003318 ; COMDAT (pick any)
.data:00003318                 public ??_R0?AUIUnknown@@@8
.data:00003318 ; struct IUnknown `RTTI Type Descriptor'
.data:00003318 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00003318                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003318                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00003318                                         ; const type_info::`vftable'
.data:0000331C                 align 10h
.data:00003320 a_?auiunknown@@ db '.?AUIUnknown@@',0
.data:0000332F                 align 10h
.data:0000332F _data           ends
.data:0000332F
.rdata$r:00003330 ; ===========================================================================
.rdata$r:00003330
.rdata$r:00003330 ; Segment type: Pure data
.rdata$r:00003330 ; Segment permissions: Read
.rdata$r:00003330 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003330                 assume cs:_rdata$r
.rdata$r:00003330                 ;org 3330h
.rdata$r:00003330 ; COMDAT (pick any)
.rdata$r:00003330                 public ??_R3IUnknown@@8
.rdata$r:00003330 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003330 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00003314o
.rdata$r:00003330                                         ; .rdata$r:00003360o ...
.rdata$r:00003331                 db    0
.rdata$r:00003332                 db    0
.rdata$r:00003333                 db    0
.rdata$r:00003334                 db    0
.rdata$r:00003335                 db    0
.rdata$r:00003336                 db    0
.rdata$r:00003337                 db    0
.rdata$r:00003338                 db    1
.rdata$r:00003339                 db    0
.rdata$r:0000333A                 db    0
.rdata$r:0000333B                 db    0
.rdata$r:0000333C                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:0000333C _rdata$r        ends
.rdata$r:0000333C
.rdata$r:00003340 ; ===========================================================================
.rdata$r:00003340
.rdata$r:00003340 ; Segment type: Pure data
.rdata$r:00003340 ; Segment permissions: Read
.rdata$r:00003340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003340                 assume cs:_rdata$r
.rdata$r:00003340                 ;org 3340h
.rdata$r:00003340 ; COMDAT (pick any)
.rdata$r:00003340                 public ??_R2IUnknown@@8
.rdata$r:00003340 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003340 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003340                                         ; DATA XREF: .rdata$r:0000333Co
.rdata$r:00003340                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003344                 db    0
.rdata$r:00003345                 align 4
.rdata$r:00003345 _rdata$r        ends
.rdata$r:00003345
.rdata$r:00003348 ; ===========================================================================
.rdata$r:00003348
.rdata$r:00003348 ; Segment type: Pure data
.rdata$r:00003348 ; Segment permissions: Read
.rdata$r:00003348 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003348                 assume cs:_rdata$r
.rdata$r:00003348                 ;org 3348h
.rdata$r:00003348 ; COMDAT (pick any)
.rdata$r:00003348                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00003348 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00003348 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003348                                         ; DATA XREF: .rdata$r:0000326Co
.rdata$r:00003348                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000334C                 db    0
.rdata$r:0000334D                 db    0
.rdata$r:0000334E                 db    0
.rdata$r:0000334F                 db    0
.rdata$r:00003350                 db    0
.rdata$r:00003351                 db    0
.rdata$r:00003352                 db    0
.rdata$r:00003353                 db    0
.rdata$r:00003354                 db 0FFh
.rdata$r:00003355                 db 0FFh
.rdata$r:00003356                 db 0FFh
.rdata$r:00003357                 db 0FFh
.rdata$r:00003358                 db    0
.rdata$r:00003359                 db    0
.rdata$r:0000335A                 db    0
.rdata$r:0000335B                 db    0
.rdata$r:0000335C                 db  42h ; B
.rdata$r:0000335D                 db    0
.rdata$r:0000335E                 db    0
.rdata$r:0000335F                 db    0
.rdata$r:00003360                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003360 _rdata$r        ends
.rdata$r:00003360
.rdata$r:00003364 ; ===========================================================================
.rdata$r:00003364
.rdata$r:00003364 ; Segment type: Pure data
.rdata$r:00003364 ; Segment permissions: Read
.rdata$r:00003364 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003364                 assume cs:_rdata$r
.rdata$r:00003364                 ;org 3364h
.rdata$r:00003364 ; COMDAT (pick any)
.rdata$r:00003364                 public ??_R13?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00003364 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003364 ??_R13?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00003364                                         ; DATA XREF: .rdata$r:00003270o
.rdata$r:00003364                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00003368                 db    1
.rdata$r:00003369                 db    0
.rdata$r:0000336A                 db    0
.rdata$r:0000336B                 db    0
.rdata$r:0000336C                 db    4
.rdata$r:0000336D                 db    0
.rdata$r:0000336E                 db    0
.rdata$r:0000336F                 db    0
.rdata$r:00003370                 db 0FFh
.rdata$r:00003371                 db 0FFh
.rdata$r:00003372                 db 0FFh
.rdata$r:00003373                 db 0FFh
.rdata$r:00003374                 db    0
.rdata$r:00003375                 db    0
.rdata$r:00003376                 db    0
.rdata$r:00003377                 db    0
.rdata$r:00003378                 db  40h ; @
.rdata$r:00003379                 db    0
.rdata$r:0000337A                 db    0
.rdata$r:0000337B                 db    0
.rdata$r:0000337C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000337C _rdata$r        ends
.rdata$r:0000337C
.data:00003380 ; ===========================================================================
.data:00003380
.data:00003380 ; Segment type: Pure data
.data:00003380 ; Segment permissions: Read/Write
.data:00003380 _data           segment dword public 'DATA' use32
.data:00003380                 assume cs:_data
.data:00003380                 ;org 3380h
.data:00003380 ; COMDAT (pick any)
.data:00003380                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:00003380 ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:00003380 ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:00003380                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003380                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003380                                         ; const type_info::`vftable'
.data:00003384                 align 8
.data:00003388 a_?auicompresss db '.?AUICompressSetCoderProperties@@',0
.data:000033AA                 align 4
.data:000033AA _data           ends
.data:000033AA
.rdata$r:000033AC ; ===========================================================================
.rdata$r:000033AC
.rdata$r:000033AC ; Segment type: Pure data
.rdata$r:000033AC ; Segment permissions: Read
.rdata$r:000033AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033AC                 assume cs:_rdata$r
.rdata$r:000033AC                 ;org 33ACh
.rdata$r:000033AC ; COMDAT (pick any)
.rdata$r:000033AC                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000033AC ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000033AC ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000033AC                                         ; DATA XREF: .rdata$r:0000337Co
.rdata$r:000033AC                                         ; .rdata$r:000033E0o ...
.rdata$r:000033AD                 db    0
.rdata$r:000033AE                 db    0
.rdata$r:000033AF                 db    0
.rdata$r:000033B0                 db    0
.rdata$r:000033B1                 db    0
.rdata$r:000033B2                 db    0
.rdata$r:000033B3                 db    0
.rdata$r:000033B4                 db    2
.rdata$r:000033B5                 db    0
.rdata$r:000033B6                 db    0
.rdata$r:000033B7                 db    0
.rdata$r:000033B8                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000033B8 _rdata$r        ends
.rdata$r:000033B8
.rdata$r:000033BC ; ===========================================================================
.rdata$r:000033BC
.rdata$r:000033BC ; Segment type: Pure data
.rdata$r:000033BC ; Segment permissions: Read
.rdata$r:000033BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033BC                 assume cs:_rdata$r
.rdata$r:000033BC                 ;org 33BCh
.rdata$r:000033BC ; COMDAT (pick any)
.rdata$r:000033BC                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:000033BC ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:000033BC ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000033BC                                         ; DATA XREF: .rdata$r:000033B8o
.rdata$r:000033BC                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000033C0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000033C4                 db    0
.rdata$r:000033C5                 align 4
.rdata$r:000033C5 _rdata$r        ends
.rdata$r:000033C5
.rdata$r:000033C8 ; ===========================================================================
.rdata$r:000033C8
.rdata$r:000033C8 ; Segment type: Pure data
.rdata$r:000033C8 ; Segment permissions: Read
.rdata$r:000033C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033C8                 assume cs:_rdata$r
.rdata$r:000033C8                 ;org 33C8h
.rdata$r:000033C8 ; COMDAT (pick any)
.rdata$r:000033C8                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000033C8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000033C8 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000033C8                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:000033C8                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000033CC                 db    1
.rdata$r:000033CD                 db    0
.rdata$r:000033CE                 db    0
.rdata$r:000033CF                 db    0
.rdata$r:000033D0                 db    0
.rdata$r:000033D1                 db    0
.rdata$r:000033D2                 db    0
.rdata$r:000033D3                 db    0
.rdata$r:000033D4                 db 0FFh
.rdata$r:000033D5                 db 0FFh
.rdata$r:000033D6                 db 0FFh
.rdata$r:000033D7                 db 0FFh
.rdata$r:000033D8                 db    0
.rdata$r:000033D9                 db    0
.rdata$r:000033DA                 db    0
.rdata$r:000033DB                 db    0
.rdata$r:000033DC                 db  40h ; @
.rdata$r:000033DD                 db    0
.rdata$r:000033DE                 db    0
.rdata$r:000033DF                 db    0
.rdata$r:000033E0                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000033E0 _rdata$r        ends
.rdata$r:000033E0
.rdata$r:000033E4 ; ===========================================================================
.rdata$r:000033E4
.rdata$r:000033E4 ; Segment type: Pure data
.rdata$r:000033E4 ; Segment permissions: Read
.rdata$r:000033E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000033E4                 assume cs:_rdata$r
.rdata$r:000033E4                 ;org 33E4h
.rdata$r:000033E4 ; COMDAT (pick any)
.rdata$r:000033E4                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:000033E4 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:000033E4 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000033E4                                         ; DATA XREF: .rdata$r:00003274o
.rdata$r:000033E4                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000033E8                 db    0
.rdata$r:000033E9                 db    0
.rdata$r:000033EA                 db    0
.rdata$r:000033EB                 db    0
.rdata$r:000033EC                 db    4
.rdata$r:000033ED                 db    0
.rdata$r:000033EE                 db    0
.rdata$r:000033EF                 db    0
.rdata$r:000033F0                 db 0FFh
.rdata$r:000033F1                 db 0FFh
.rdata$r:000033F2                 db 0FFh
.rdata$r:000033F3                 db 0FFh
.rdata$r:000033F4                 db    0
.rdata$r:000033F5                 db    0
.rdata$r:000033F6                 db    0
.rdata$r:000033F7                 db    0
.rdata$r:000033F8                 db  42h ; B
.rdata$r:000033F9                 db    0
.rdata$r:000033FA                 db    0
.rdata$r:000033FB                 db    0
.rdata$r:000033FC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000033FC _rdata$r        ends
.rdata$r:000033FC
.rdata$r:00003400 ; ===========================================================================
.rdata$r:00003400
.rdata$r:00003400 ; Segment type: Pure data
.rdata$r:00003400 ; Segment permissions: Read
.rdata$r:00003400 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003400                 assume cs:_rdata$r
.rdata$r:00003400                 ;org 3400h
.rdata$r:00003400 ; COMDAT (pick any)
.rdata$r:00003400                 public ??_R17?0A@EA@ICompressSetCoderMt@@8
.rdata$r:00003400 ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00003400 ??_R17?0A@EA@ICompressSetCoderMt@@8 dd offset ??_R0?AUICompressSetCoderMt@@@8
.rdata$r:00003400                                         ; DATA XREF: .rdata$r:00003278o
.rdata$r:00003400                                         ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003404                 db    1
.rdata$r:00003405                 db    0
.rdata$r:00003406                 db    0
.rdata$r:00003407                 db    0
.rdata$r:00003408                 db    8
.rdata$r:00003409                 db    0
.rdata$r:0000340A                 db    0
.rdata$r:0000340B                 db    0
.rdata$r:0000340C                 db 0FFh
.rdata$r:0000340D                 db 0FFh
.rdata$r:0000340E                 db 0FFh
.rdata$r:0000340F                 db 0FFh
.rdata$r:00003410                 db    0
.rdata$r:00003411                 db    0
.rdata$r:00003412                 db    0
.rdata$r:00003413                 db    0
.rdata$r:00003414                 db  40h ; @
.rdata$r:00003415                 db    0
.rdata$r:00003416                 db    0
.rdata$r:00003417                 db    0
.rdata$r:00003418                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003418 _rdata$r        ends
.rdata$r:00003418
.data:0000341C ; ===========================================================================
.data:0000341C
.data:0000341C ; Segment type: Pure data
.data:0000341C ; Segment permissions: Read/Write
.data:0000341C _data           segment dword public 'DATA' use32
.data:0000341C                 assume cs:_data
.data:0000341C                 ;org 341Ch
.data:0000341C ; COMDAT (pick any)
.data:0000341C                 public ??_R0?AUICompressSetCoderMt@@@8
.data:0000341C ; struct ICompressSetCoderMt `RTTI Type Descriptor'
.data:0000341C ??_R0?AUICompressSetCoderMt@@@8 dd offset ??_7type_info@@6B@
.data:0000341C                                         ; DATA XREF: .rdata$r:ICompressSetCoderMt::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:0000341C                                         ; .rdata$r:ICompressSetCoderMt::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000341C                                         ; const type_info::`vftable'
.data:00003420                 db    0
.data:00003421                 db    0
.data:00003422                 db    0
.data:00003423                 db    0
.data:00003424                 db  2Eh ; .
.data:00003425                 db  3Fh ; ?
.data:00003426                 db  41h ; A
.data:00003427                 db  55h ; U
.data:00003428                 db  49h ; I
.data:00003429                 db  43h ; C
.data:0000342A                 db  6Fh ; o
.data:0000342B                 db  6Dh ; m
.data:0000342C                 db  70h ; p
.data:0000342D                 db  72h ; r
.data:0000342E                 db  65h ; e
.data:0000342F                 db  73h ; s
.data:00003430                 db  73h ; s
.data:00003431                 db  53h ; S
.data:00003432                 db  65h ; e
.data:00003433                 db  74h ; t
.data:00003434                 db  43h ; C
.data:00003435                 db  6Fh ; o
.data:00003436                 db  64h ; d
.data:00003437                 db  65h ; e
.data:00003438                 db  72h ; r
.data:00003439                 db  4Dh ; M
.data:0000343A                 db  74h ; t
.data:0000343B                 db  40h ; @
.data:0000343C                 db  40h ; @
.data:0000343D                 db    0
.data:0000343E                 align 10h
.data:0000343E _data           ends
.data:0000343E
.rdata$r:00003440 ; ===========================================================================
.rdata$r:00003440
.rdata$r:00003440 ; Segment type: Pure data
.rdata$r:00003440 ; Segment permissions: Read
.rdata$r:00003440 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003440                 assume cs:_rdata$r
.rdata$r:00003440                 ;org 3440h
.rdata$r:00003440 ; COMDAT (pick any)
.rdata$r:00003440                 public ??_R3ICompressSetCoderMt@@8
.rdata$r:00003440 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003440 ??_R3ICompressSetCoderMt@@8 db    0     ; DATA XREF: .rdata$r:00003418o
.rdata$r:00003440                                         ; .rdata$r:00003474o ...
.rdata$r:00003441                 db    0
.rdata$r:00003442                 db    0
.rdata$r:00003443                 db    0
.rdata$r:00003444                 db    0
.rdata$r:00003445                 db    0
.rdata$r:00003446                 db    0
.rdata$r:00003447                 db    0
.rdata$r:00003448                 db    2
.rdata$r:00003449                 db    0
.rdata$r:0000344A                 db    0
.rdata$r:0000344B                 db    0
.rdata$r:0000344C                 dd offset ??_R2ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Base Class Array'
.rdata$r:0000344C _rdata$r        ends
.rdata$r:0000344C
.rdata$r:00003450 ; ===========================================================================
.rdata$r:00003450
.rdata$r:00003450 ; Segment type: Pure data
.rdata$r:00003450 ; Segment permissions: Read
.rdata$r:00003450 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003450                 assume cs:_rdata$r
.rdata$r:00003450                 ;org 3450h
.rdata$r:00003450 ; COMDAT (pick any)
.rdata$r:00003450                 public ??_R2ICompressSetCoderMt@@8
.rdata$r:00003450 ; ICompressSetCoderMt::`RTTI Base Class Array'
.rdata$r:00003450 ??_R2ICompressSetCoderMt@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderMt@@8
.rdata$r:00003450                                         ; DATA XREF: .rdata$r:0000344Co
.rdata$r:00003450                                         ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003454                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003458                 db    0
.rdata$r:00003459                 align 4
.rdata$r:00003459 _rdata$r        ends
.rdata$r:00003459
.rdata$r:0000345C ; ===========================================================================
.rdata$r:0000345C
.rdata$r:0000345C ; Segment type: Pure data
.rdata$r:0000345C ; Segment permissions: Read
.rdata$r:0000345C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000345C                 assume cs:_rdata$r
.rdata$r:0000345C                 ;org 345Ch
.rdata$r:0000345C ; COMDAT (pick any)
.rdata$r:0000345C                 public ??_R1A@?0A@EA@ICompressSetCoderMt@@8
.rdata$r:0000345C ; ICompressSetCoderMt::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000345C ??_R1A@?0A@EA@ICompressSetCoderMt@@8 dd offset ??_R0?AUICompressSetCoderMt@@@8
.rdata$r:0000345C                                         ; DATA XREF: .rdata$r:ICompressSetCoderMt::`RTTI Base Class Array'o
.rdata$r:0000345C                                         ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003460                 db    1
.rdata$r:00003461                 db    0
.rdata$r:00003462                 db    0
.rdata$r:00003463                 db    0
.rdata$r:00003464                 db    0
.rdata$r:00003465                 db    0
.rdata$r:00003466                 db    0
.rdata$r:00003467                 db    0
.rdata$r:00003468                 db 0FFh
.rdata$r:00003469                 db 0FFh
.rdata$r:0000346A                 db 0FFh
.rdata$r:0000346B                 db 0FFh
.rdata$r:0000346C                 db    0
.rdata$r:0000346D                 db    0
.rdata$r:0000346E                 db    0
.rdata$r:0000346F                 db    0
.rdata$r:00003470                 db  40h ; @
.rdata$r:00003471                 db    0
.rdata$r:00003472                 db    0
.rdata$r:00003473                 db    0
.rdata$r:00003474                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003474 _rdata$r        ends
.rdata$r:00003474
.rdata$r:00003478 ; ===========================================================================
.rdata$r:00003478
.rdata$r:00003478 ; Segment type: Pure data
.rdata$r:00003478 ; Segment permissions: Read
.rdata$r:00003478 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003478                 assume cs:_rdata$r
.rdata$r:00003478                 ;org 3478h
.rdata$r:00003478 ; COMDAT (pick any)
.rdata$r:00003478                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00003478 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00003478 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003478                                         ; DATA XREF: .rdata$r:0000327Co
.rdata$r:00003478                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:0000347C                 align 10h
.rdata$r:00003480                 db    8
.rdata$r:00003481                 db    0
.rdata$r:00003482                 db    0
.rdata$r:00003483                 db    0
.rdata$r:00003484                 db 0FFh
.rdata$r:00003485                 db 0FFh
.rdata$r:00003486                 db 0FFh
.rdata$r:00003487                 db 0FFh
.rdata$r:00003488                 db    0
.rdata$r:00003489                 db    0
.rdata$r:0000348A                 db    0
.rdata$r:0000348B                 db    0
.rdata$r:0000348C                 db  42h ; B
.rdata$r:0000348D                 db    0
.rdata$r:0000348E                 db    0
.rdata$r:0000348F                 db    0
.rdata$r:00003490                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003490 _rdata$r        ends
.rdata$r:00003490
.rdata$r:00003494 ; ===========================================================================
.rdata$r:00003494
.rdata$r:00003494 ; Segment type: Pure data
.rdata$r:00003494 ; Segment permissions: Read
.rdata$r:00003494 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003494                 assume cs:_rdata$r
.rdata$r:00003494                 ;org 3494h
.rdata$r:00003494 ; COMDAT (pick any)
.rdata$r:00003494                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:00003494 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00003494 ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003494                                         ; DATA XREF: .rdata$r:00003280o
.rdata$r:00003494                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003498                 db    0
.rdata$r:00003499                 db    0
.rdata$r:0000349A                 db    0
.rdata$r:0000349B                 db    0
.rdata$r:0000349C                 db  0Ch
.rdata$r:0000349D                 db    0
.rdata$r:0000349E                 db    0
.rdata$r:0000349F                 db    0
.rdata$r:000034A0                 db 0FFh
.rdata$r:000034A1                 db 0FFh
.rdata$r:000034A2                 db 0FFh
.rdata$r:000034A3                 db 0FFh
.rdata$r:000034A4                 db    0
.rdata$r:000034A5                 db    0
.rdata$r:000034A6                 db    0
.rdata$r:000034A7                 db    0
.rdata$r:000034A8                 db  40h ; @
.rdata$r:000034A9                 db    0
.rdata$r:000034AA                 db    0
.rdata$r:000034AB                 db    0
.rdata$r:000034AC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000034AC _rdata$r        ends
.rdata$r:000034AC
.data:000034B0 ; ===========================================================================
.data:000034B0
.data:000034B0 ; Segment type: Pure data
.data:000034B0 ; Segment permissions: Read/Write
.data:000034B0 _data           segment dword public 'DATA' use32
.data:000034B0                 assume cs:_data
.data:000034B0                 ;org 34B0h
.data:000034B0 ; COMDAT (pick any)
.data:000034B0                 public ??_R0?AVCMyUnknownImp@@@8
.data:000034B0 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:000034B0 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:000034B0                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:000034B0                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000034B0                                         ; const type_info::`vftable'
.data:000034B4                 align 8
.data:000034B8 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:000034B8 _data           ends
.data:000034B8
.rdata$r:000034CC ; ===========================================================================
.rdata$r:000034CC
.rdata$r:000034CC ; Segment type: Pure data
.rdata$r:000034CC ; Segment permissions: Read
.rdata$r:000034CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000034CC                 assume cs:_rdata$r
.rdata$r:000034CC                 ;org 34CCh
.rdata$r:000034CC ; COMDAT (pick any)
.rdata$r:000034CC                 public ??_R3CMyUnknownImp@@8
.rdata$r:000034CC ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000034CC ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:000034ACo
.rdata$r:000034CC                                         ; .rdata$r:000034FCo
.rdata$r:000034CD                 db    0
.rdata$r:000034CE                 db    0
.rdata$r:000034CF                 db    0
.rdata$r:000034D0                 db    0
.rdata$r:000034D1                 db    0
.rdata$r:000034D2                 db    0
.rdata$r:000034D3                 db    0
.rdata$r:000034D4                 db    1
.rdata$r:000034D5                 db    0
.rdata$r:000034D6                 db    0
.rdata$r:000034D7                 db    0
.rdata$r:000034D8                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000034D8 _rdata$r        ends
.rdata$r:000034D8
.rdata$r:000034DC ; ===========================================================================
.rdata$r:000034DC
.rdata$r:000034DC ; Segment type: Pure data
.rdata$r:000034DC ; Segment permissions: Read
.rdata$r:000034DC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000034DC                 assume cs:_rdata$r
.rdata$r:000034DC                 ;org 34DCh
.rdata$r:000034DC ; COMDAT (pick any)
.rdata$r:000034DC                 public ??_R2CMyUnknownImp@@8
.rdata$r:000034DC ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:000034DC ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000034DC                                         ; DATA XREF: .rdata$r:000034D8o
.rdata$r:000034DC                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000034E0                 db    0
.rdata$r:000034E1                 align 4
.rdata$r:000034E1 _rdata$r        ends
.rdata$r:000034E1
.rdata$r:000034E4 ; ===========================================================================
.rdata$r:000034E4
.rdata$r:000034E4 ; Segment type: Pure data
.rdata$r:000034E4 ; Segment permissions: Read
.rdata$r:000034E4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000034E4                 assume cs:_rdata$r
.rdata$r:000034E4                 ;org 34E4h
.rdata$r:000034E4 ; COMDAT (pick any)
.rdata$r:000034E4                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:000034E4 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000034E4 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:000034E4                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:000034E4                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000034E8                 align 10h
.rdata$r:000034F0                 db 0FFh
.rdata$r:000034F1                 db 0FFh
.rdata$r:000034F2                 db 0FFh
.rdata$r:000034F3                 db 0FFh
.rdata$r:000034F4                 db    0
.rdata$r:000034F5                 db    0
.rdata$r:000034F6                 db    0
.rdata$r:000034F7                 db    0
.rdata$r:000034F8                 db  40h ; @
.rdata$r:000034F9                 db    0
.rdata$r:000034FA                 db    0
.rdata$r:000034FB                 db    0
.rdata$r:000034FC                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000034FC _rdata$r        ends
.rdata$r:000034FC
.rdata$r:00003500 ; ===========================================================================
.rdata$r:00003500
.rdata$r:00003500 ; Segment type: Pure data
.rdata$r:00003500 ; Segment permissions: Read
.rdata$r:00003500 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003500                 assume cs:_rdata$r
.rdata$r:00003500                 ;org 3500h
.rdata$r:00003500 ; COMDAT (pick any)
.rdata$r:00003500                 public ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@
.rdata$r:00003500 ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:00003500 ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:00003500                                         ; DATA XREF: .rdata:000031F0o
.rdata$r:00003501                 db    0
.rdata$r:00003502                 db    0
.rdata$r:00003503                 db    0
.rdata$r:00003504                 db    4
.rdata$r:00003505                 db    0
.rdata$r:00003506                 db    0
.rdata$r:00003507                 db    0
.rdata$r:00003508                 db    0
.rdata$r:00003509                 db    0
.rdata$r:0000350A                 db    0
.rdata$r:0000350B                 db    0
.rdata$r:0000350C                 dd offset ??_R0?AVCEncoder@NBZip2@NCompress@@@8 ; NCompress::NBZip2::CEncoder `RTTI Type Descriptor'
.rdata$r:00003510                 dd offset ??_R3CEncoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003510 _rdata$r        ends
.rdata$r:00003510
.rdata$r:00003514 ; ===========================================================================
.rdata$r:00003514
.rdata$r:00003514 ; Segment type: Pure data
.rdata$r:00003514 ; Segment permissions: Read
.rdata$r:00003514 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003514                 assume cs:_rdata$r
.rdata$r:00003514                 ;org 3514h
.rdata$r:00003514 ; COMDAT (pick any)
.rdata$r:00003514                 public ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@
.rdata$r:00003514 ; const NCompress::NBZip2::CEncoder::`RTTI Complete Object Locator'{for `ICompressSetCoderMt'}
.rdata$r:00003514 ??_R4CEncoder@NBZip2@NCompress@@6BICompressSetCoderMt@@@ db    0
.rdata$r:00003514                                         ; DATA XREF: .rdata:000031DCo
.rdata$r:00003515                 db    0
.rdata$r:00003516                 db    0
.rdata$r:00003517                 db    0
.rdata$r:00003518                 db    8
.rdata$r:00003519                 db    0
.rdata$r:0000351A                 db    0
.rdata$r:0000351B                 db    0
.rdata$r:0000351C                 db    0
.rdata$r:0000351D                 db    0
.rdata$r:0000351E                 db    0
.rdata$r:0000351F                 db    0
.rdata$r:00003520                 dd offset ??_R0?AVCEncoder@NBZip2@NCompress@@@8 ; NCompress::NBZip2::CEncoder `RTTI Type Descriptor'
.rdata$r:00003524                 dd offset ??_R3CEncoder@NBZip2@NCompress@@8 ; NCompress::NBZip2::CEncoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003524 _rdata$r        ends
.rdata$r:00003524
.text:00003528 ; ===========================================================================
.text:00003528
.text:00003528 ; Segment type: Pure code
.text:00003528 ; Segment permissions: Read/Execute
.text:00003528 _text           segment para public 'CODE' use32
.text:00003528                 assume cs:_text
.text:00003528                 ;org 3528h
.text:00003528 ; COMDAT (pick any)
.text:00003528                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003528
.text:00003528 ; =============== S U B R O U T I N E =======================================
.text:00003528
.text:00003528 ; Attributes: bp-based frame
.text:00003528
.text:00003528 ; _DWORD __thiscall CBZip2CombinedCrc::CBZip2CombinedCrc(CBZip2CombinedCrc *__hidden this)
.text:00003528                 public ??0CBZip2CombinedCrc@@QAE@XZ
.text:00003528 ??0CBZip2CombinedCrc@@QAE@XZ proc near  ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+AEp
.text:00003528
.text:00003528 var_4           = dword ptr -4
.text:00003528
.text:00003528                 push    ebp
.text:00003529                 mov     ebp, esp
.text:0000352B                 push    ecx
.text:0000352C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003533                 mov     [ebp+var_4], ecx
.text:00003536                 mov     eax, [ebp+var_4]
.text:00003539                 mov     dword ptr [eax], 0
.text:0000353F                 mov     eax, [ebp+var_4]
.text:00003542                 mov     esp, ebp
.text:00003544                 pop     ebp
.text:00003545                 retn
.text:00003545 ??0CBZip2CombinedCrc@@QAE@XZ endp
.text:00003545
.text:00003545 ; ---------------------------------------------------------------------------
.text:00003546                 align 4
.text:00003546 _text           ends
.text:00003546
.text:00003548 ; ===========================================================================
.text:00003548
.text:00003548 ; Segment type: Pure code
.text:00003548 ; Segment permissions: Read/Execute
.text:00003548 _text           segment para public 'CODE' use32
.text:00003548                 assume cs:_text
.text:00003548                 ;org 3548h
.text:00003548 ; COMDAT (pick any)
.text:00003548                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003548
.text:00003548 ; =============== S U B R O U T I N E =======================================
.text:00003548
.text:00003548 ; Attributes: bp-based frame
.text:00003548
.text:00003548 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00003548                 public ??0CMyUnknownImp@@QAE@XZ
.text:00003548 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+51p
.text:00003548
.text:00003548 var_4           = dword ptr -4
.text:00003548
.text:00003548                 push    ebp
.text:00003549                 mov     ebp, esp
.text:0000354B                 push    ecx
.text:0000354C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003553                 mov     [ebp+var_4], ecx
.text:00003556                 mov     eax, [ebp+var_4]
.text:00003559                 mov     dword ptr [eax], 0
.text:0000355F                 mov     eax, [ebp+var_4]
.text:00003562                 mov     esp, ebp
.text:00003564                 pop     ebp
.text:00003565                 retn
.text:00003565 ??0CMyUnknownImp@@QAE@XZ endp
.text:00003565
.text:00003565 ; ---------------------------------------------------------------------------
.text:00003566                 align 4
.text:00003566 _text           ends
.text:00003566
.text:00003568 ; ===========================================================================
.text:00003568
.text:00003568 ; Segment type: Pure code
.text:00003568 ; Segment permissions: Read/Execute
.text:00003568 _text           segment para public 'CODE' use32
.text:00003568                 assume cs:_text
.text:00003568                 ;org 3568h
.text:00003568 ; COMDAT (pick any)
.text:00003568                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003568
.text:00003568 ; =============== S U B R O U T I N E =======================================
.text:00003568
.text:00003568 ; Attributes: bp-based frame
.text:00003568
.text:00003568 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003568                 public ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003568 ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003568                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+CEp
.text:00003568
.text:00003568 var_4           = dword ptr -4
.text:00003568
.text:00003568                 push    ebp
.text:00003569                 mov     ebp, esp
.text:0000356B                 push    ecx
.text:0000356C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003573                 mov     [ebp+var_4], ecx
.text:00003576                 mov     eax, [ebp+var_4]
.text:00003579                 push    eax
.text:0000357A                 call    _CriticalSection_Init@4 ; CriticalSection_Init(x)
.text:0000357F                 mov     eax, [ebp+var_4]
.text:00003582                 add     esp, 4
.text:00003585                 cmp     ebp, esp
.text:00003587                 call    __RTC_CheckEsp
.text:0000358C                 mov     esp, ebp
.text:0000358E                 pop     ebp
.text:0000358F                 retn
.text:0000358F ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:0000358F
.text:0000358F _text           ends
.text:0000358F
.text:00003590 ; ===========================================================================
.text:00003590
.text:00003590 ; Segment type: Pure code
.text:00003590 ; Segment permissions: Read/Execute
.text:00003590 _text           segment para public 'CODE' use32
.text:00003590                 assume cs:_text
.text:00003590                 ;org 3590h
.text:00003590 ; COMDAT (pick any)
.text:00003590                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003590
.text:00003590 ; =============== S U B R O U T I N E =======================================
.text:00003590
.text:00003590 ; Attributes: bp-based frame
.text:00003590
.text:00003590 ; _DWORD __thiscall NWindows::NSynchronization::CCriticalSection::~CCriticalSection(NWindows::NSynchronization::CCriticalSection *__hidden this)
.text:00003590                 public ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
.text:00003590 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003590                                         ; CODE XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+78p
.text:00003590                                         ; __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$3+9j ...
.text:00003590
.text:00003590 lpCriticalSection= dword ptr -4
.text:00003590
.text:00003590                 push    ebp
.text:00003591                 mov     ebp, esp
.text:00003593                 push    ecx
.text:00003594                 push    esi
.text:00003595                 mov     [ebp+lpCriticalSection], 0CCCCCCCCh
.text:0000359C                 mov     [ebp+lpCriticalSection], ecx
.text:0000359F                 mov     esi, esp
.text:000035A1                 mov     eax, [ebp+lpCriticalSection]
.text:000035A4                 push    eax             ; lpCriticalSection
.text:000035A5                 call    dword ptr ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
.text:000035AB                 cmp     esi, esp
.text:000035AD                 call    __RTC_CheckEsp
.text:000035B2                 pop     esi
.text:000035B3                 add     esp, 4
.text:000035B6                 cmp     ebp, esp
.text:000035B8                 call    __RTC_CheckEsp
.text:000035BD                 mov     esp, ebp
.text:000035BF                 pop     ebp
.text:000035C0                 retn
.text:000035C0 ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ endp
.text:000035C0
.text:000035C0 ; ---------------------------------------------------------------------------
.text:000035C1                 align 4
.text:000035C1 _text           ends
.text:000035C1
.text:000035C4 ; ===========================================================================
.text:000035C4
.text:000035C4 ; Segment type: Pure code
.text:000035C4 ; Segment permissions: Read/Execute
.text:000035C4 _text           segment para public 'CODE' use32
.text:000035C4                 assume cs:_text
.text:000035C4                 ;org 35C4h
.text:000035C4 ; COMDAT (pick any)
.text:000035C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035C4
.text:000035C4 ; =============== S U B R O U T I N E =======================================
.text:000035C4
.text:000035C4 ; Attributes: bp-based frame
.text:000035C4
.text:000035C4 ; _DWORD __thiscall CInBuffer::~CInBuffer(CInBuffer *__hidden this)
.text:000035C4                 public ??1CInBuffer@@QAE@XZ
.text:000035C4 ??1CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+AEp
.text:000035C4                                         ; __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$0+6j ...
.text:000035C4
.text:000035C4 var_4           = dword ptr -4
.text:000035C4
.text:000035C4                 push    ebp
.text:000035C5                 mov     ebp, esp
.text:000035C7                 push    ecx
.text:000035C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035CF                 mov     [ebp+var_4], ecx
.text:000035D2                 mov     ecx, [ebp+var_4] ; this
.text:000035D5                 call    ?Free@CInBuffer@@QAEXXZ ; CInBuffer::Free(void)
.text:000035DA                 add     esp, 4
.text:000035DD                 cmp     ebp, esp
.text:000035DF                 call    __RTC_CheckEsp
.text:000035E4                 mov     esp, ebp
.text:000035E6                 pop     ebp
.text:000035E7                 retn
.text:000035E7 ??1CInBuffer@@QAE@XZ endp
.text:000035E7
.text:000035E7 _text           ends
.text:000035E7
.text:000035E8 ; ===========================================================================
.text:000035E8
.text:000035E8 ; Segment type: Pure code
.text:000035E8 ; Segment permissions: Read/Execute
.text:000035E8 _text           segment para public 'CODE' use32
.text:000035E8                 assume cs:_text
.text:000035E8                 ;org 35E8h
.text:000035E8 ; COMDAT (pick any)
.text:000035E8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000035E8
.text:000035E8 ; =============== S U B R O U T I N E =======================================
.text:000035E8
.text:000035E8 ; Attributes: bp-based frame
.text:000035E8
.text:000035E8 ; _DWORD __thiscall NCompress::NBZip2::CEncProps::CEncProps(NCompress::NBZip2::CEncProps *__hidden this)
.text:000035E8                 public ??0CEncProps@NBZip2@NCompress@@QAE@XZ
.text:000035E8 ??0CEncProps@NBZip2@NCompress@@QAE@XZ proc near
.text:000035E8                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+A0p
.text:000035E8                                         ; NCompress::NBZip2::CEncoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+21p
.text:000035E8
.text:000035E8 var_4           = dword ptr -4
.text:000035E8
.text:000035E8                 push    ebp
.text:000035E9                 mov     ebp, esp
.text:000035EB                 push    ecx
.text:000035EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000035F3                 mov     [ebp+var_4], ecx
.text:000035F6                 mov     eax, [ebp+var_4]
.text:000035F9                 mov     dword ptr [eax], 0FFFFFFFFh
.text:000035FF                 mov     ecx, [ebp+var_4]
.text:00003602                 mov     dword ptr [ecx+4], 0FFFFFFFFh
.text:00003609                 mov     eax, [ebp+var_4]
.text:0000360C                 mov     esp, ebp
.text:0000360E                 pop     ebp
.text:0000360F                 retn
.text:0000360F ??0CEncProps@NBZip2@NCompress@@QAE@XZ endp
.text:0000360F
.text:0000360F _text           ends
.text:0000360F
.text:00003610 ; ===========================================================================
.text:00003610
.text:00003610 ; Segment type: Pure code
.text:00003610 ; Segment permissions: Read/Execute
.text:00003610 _text           segment para public 'CODE' use32
.text:00003610                 assume cs:_text
.text:00003610                 ;org 3610h
.text:00003610 ; COMDAT (pick any)
.text:00003610                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003610
.text:00003610 ; =============== S U B R O U T I N E =======================================
.text:00003610
.text:00003610 ; Attributes: bp-based frame
.text:00003610
.text:00003610 ; __int32 __stdcall NCompress::NBZip2::CEncoder::QueryInterface(NCompress::NBZip2::CEncoder *this, const struct _GUID *Buf1, void **)
.text:00003610                 public ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z
.text:00003610 ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00003610                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CEncoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00003610                                         ; [thunk]:NCompress::NBZip2::CEncoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00003610                                         ; DATA XREF: ...
.text:00003610
.text:00003610 var_C           = dword ptr -0Ch
.text:00003610 var_8           = dword ptr -8
.text:00003610 var_4           = dword ptr -4
.text:00003610 this            = dword ptr  8
.text:00003610 Buf1            = dword ptr  0Ch
.text:00003610 arg_8           = dword ptr  10h
.text:00003610
.text:00003610                 push    ebp
.text:00003611                 mov     ebp, esp
.text:00003613                 sub     esp, 0Ch
.text:00003616                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000361D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000362B                 mov     eax, [ebp+arg_8]
.text:0000362E                 mov     dword ptr [eax], 0
.text:00003634                 push    offset _IID_IUnknown ; Buf2
.text:00003639                 mov     ecx, [ebp+Buf1]
.text:0000363C                 push    ecx             ; Buf1
.text:0000363D                 call    ___@8           ; __(x,x)
.text:00003642                 test    eax, eax
.text:00003644                 jz      short loc_3668
.text:00003646                 cmp     [ebp+this], 0
.text:0000364A                 jz      short loc_3657
.text:0000364C                 mov     edx, [ebp+this]
.text:0000364F                 add     edx, 8
.text:00003652                 mov     [ebp+var_4], edx
.text:00003655                 jmp     short loc_365E
.text:00003657 ; ---------------------------------------------------------------------------
.text:00003657
.text:00003657 loc_3657:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00003657                 mov     [ebp+var_4], 0
.text:0000365E
.text:0000365E loc_365E:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+45j
.text:0000365E                 mov     eax, [ebp+arg_8]
.text:00003661                 mov     ecx, [ebp+var_4]
.text:00003664                 mov     [eax], ecx
.text:00003666                 jmp     short loc_36D7
.text:00003668 ; ---------------------------------------------------------------------------
.text:00003668
.text:00003668 loc_3668:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+34j
.text:00003668                 push    offset _IID_ICompressSetCoderMt ; Buf2
.text:0000366D                 mov     edx, [ebp+Buf1]
.text:00003670                 push    edx             ; Buf1
.text:00003671                 call    ___@8           ; __(x,x)
.text:00003676                 test    eax, eax
.text:00003678                 jz      short loc_369C
.text:0000367A                 cmp     [ebp+this], 0
.text:0000367E                 jz      short loc_368B
.text:00003680                 mov     eax, [ebp+this]
.text:00003683                 add     eax, 8
.text:00003686                 mov     [ebp+var_8], eax
.text:00003689                 jmp     short loc_3692
.text:0000368B ; ---------------------------------------------------------------------------
.text:0000368B
.text:0000368B loc_368B:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000368B                 mov     [ebp+var_8], 0
.text:00003692
.text:00003692 loc_3692:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+79j
.text:00003692                 mov     ecx, [ebp+arg_8]
.text:00003695                 mov     edx, [ebp+var_8]
.text:00003698                 mov     [ecx], edx
.text:0000369A                 jmp     short loc_36D7
.text:0000369C ; ---------------------------------------------------------------------------
.text:0000369C
.text:0000369C loc_369C:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+68j
.text:0000369C                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:000036A1                 mov     eax, [ebp+Buf1]
.text:000036A4                 push    eax             ; Buf1
.text:000036A5                 call    ___@8           ; __(x,x)
.text:000036AA                 test    eax, eax
.text:000036AC                 jz      short loc_36D0
.text:000036AE                 cmp     [ebp+this], 0
.text:000036B2                 jz      short loc_36BF
.text:000036B4                 mov     ecx, [ebp+this]
.text:000036B7                 add     ecx, 4
.text:000036BA                 mov     [ebp+var_C], ecx
.text:000036BD                 jmp     short loc_36C6
.text:000036BF ; ---------------------------------------------------------------------------
.text:000036BF
.text:000036BF loc_36BF:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+A2j
.text:000036BF                 mov     [ebp+var_C], 0
.text:000036C6
.text:000036C6 loc_36C6:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+ADj
.text:000036C6                 mov     edx, [ebp+arg_8]
.text:000036C9                 mov     eax, [ebp+var_C]
.text:000036CC                 mov     [edx], eax
.text:000036CE                 jmp     short loc_36D7
.text:000036D0 ; ---------------------------------------------------------------------------
.text:000036D0
.text:000036D0 loc_36D0:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:000036D0                 mov     eax, 80004002h
.text:000036D5                 jmp     short loc_36E8
.text:000036D7 ; ---------------------------------------------------------------------------
.text:000036D7
.text:000036D7 loc_36D7:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+56j
.text:000036D7                                         ; NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:000036D7                 mov     ecx, [ebp+this]
.text:000036DA                 mov     edx, [ecx+0Ch]
.text:000036DD                 add     edx, 1
.text:000036E0                 mov     eax, [ebp+this]
.text:000036E3                 mov     [eax+0Ch], edx
.text:000036E6                 xor     eax, eax
.text:000036E8
.text:000036E8 loc_36E8:                               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+C5j
.text:000036E8                 add     esp, 0Ch
.text:000036EB                 cmp     ebp, esp
.text:000036ED                 call    __RTC_CheckEsp
.text:000036F2                 mov     esp, ebp
.text:000036F4                 pop     ebp
.text:000036F5                 retn    0Ch
.text:000036F5 ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z endp
.text:000036F5
.text:000036F5 _text           ends
.text:000036F5
.text:000036F8 ; ===========================================================================
.text:000036F8
.text:000036F8 ; Segment type: Pure code
.text:000036F8 ; Segment permissions: Read/Execute
.text:000036F8 _text           segment para public 'CODE' use32
.text:000036F8                 assume cs:_text
.text:000036F8                 ;org 36F8h
.text:000036F8 ; COMDAT (pick any)
.text:000036F8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000036F8
.text:000036F8 ; =============== S U B R O U T I N E =======================================
.text:000036F8
.text:000036F8 ; Attributes: bp-based frame
.text:000036F8
.text:000036F8 ; int __stdcall __(void *Buf1, void *Buf2)
.text:000036F8                 public ___@8
.text:000036F8 ___@8           proc near               ; CODE XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:000036F8                                         ; NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:000036F8
.text:000036F8 Buf1            = dword ptr  8
.text:000036F8 Buf2            = dword ptr  0Ch
.text:000036F8
.text:000036F8                 push    ebp
.text:000036F9                 mov     ebp, esp
.text:000036FB                 mov     eax, [ebp+Buf2]
.text:000036FE                 push    eax             ; Buf2
.text:000036FF                 mov     ecx, [ebp+Buf1]
.text:00003702                 push    ecx             ; Buf1
.text:00003703                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00003708                 cmp     ebp, esp
.text:0000370A                 call    __RTC_CheckEsp
.text:0000370F                 pop     ebp
.text:00003710                 retn    8
.text:00003710 ___@8           endp
.text:00003710
.text:00003710 ; ---------------------------------------------------------------------------
.text:00003713                 align 4
.text:00003713 _text           ends
.text:00003713
.text:00003714 ; ===========================================================================
.text:00003714
.text:00003714 ; Segment type: Pure code
.text:00003714 ; Segment permissions: Read/Execute
.text:00003714 _text           segment para public 'CODE' use32
.text:00003714                 assume cs:_text
.text:00003714                 ;org 3714h
.text:00003714 ; COMDAT (pick any)
.text:00003714                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003714
.text:00003714 ; =============== S U B R O U T I N E =======================================
.text:00003714
.text:00003714 ; Attributes: bp-based frame
.text:00003714
.text:00003714 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:00003714                 public _IsEqualGUID@8
.text:00003714 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:00003714
.text:00003714 Buf1            = dword ptr  8
.text:00003714 Buf2            = dword ptr  0Ch
.text:00003714
.text:00003714                 push    ebp
.text:00003715                 mov     ebp, esp
.text:00003717                 push    10h             ; Size
.text:00003719                 mov     eax, [ebp+Buf2]
.text:0000371C                 push    eax             ; Buf2
.text:0000371D                 mov     ecx, [ebp+Buf1]
.text:00003720                 push    ecx             ; Buf1
.text:00003721                 call    _memcmp
.text:00003726                 add     esp, 0Ch
.text:00003729                 neg     eax
.text:0000372B                 sbb     eax, eax
.text:0000372D                 add     eax, 1
.text:00003730                 cmp     ebp, esp
.text:00003732                 call    __RTC_CheckEsp
.text:00003737                 pop     ebp
.text:00003738                 retn    8
.text:00003738 _IsEqualGUID@8  endp
.text:00003738
.text:00003738 ; ---------------------------------------------------------------------------
.text:0000373B                 align 4
.text:0000373B _text           ends
.text:0000373B
.text:0000373C ; ===========================================================================
.text:0000373C
.text:0000373C ; Segment type: Pure code
.text:0000373C ; Segment permissions: Read/Execute
.text:0000373C _text           segment para public 'CODE' use32
.text:0000373C                 assume cs:_text
.text:0000373C                 ;org 373Ch
.text:0000373C ; COMDAT (pick any)
.text:0000373C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000373C
.text:0000373C ; =============== S U B R O U T I N E =======================================
.text:0000373C
.text:0000373C ; Attributes: bp-based frame
.text:0000373C
.text:0000373C ; unsigned __int32 __stdcall NCompress::NBZip2::CEncoder::AddRef(NCompress::NBZip2::CEncoder *this)
.text:0000373C                 public ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ
.text:0000373C ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ proc near
.text:0000373C                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CEncoder::AddRef`adjustor{4}' (void)+5j
.text:0000373C                                         ; [thunk]:NCompress::NBZip2::CEncoder::AddRef`adjustor{8}' (void)+5j
.text:0000373C                                         ; DATA XREF: ...
.text:0000373C
.text:0000373C var_4           = dword ptr -4
.text:0000373C this            = dword ptr  8
.text:0000373C
.text:0000373C                 push    ebp
.text:0000373D                 mov     ebp, esp
.text:0000373F                 push    ecx
.text:00003740                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003747                 mov     eax, [ebp+this]
.text:0000374A                 mov     ecx, [eax+0Ch]
.text:0000374D                 add     ecx, 1
.text:00003750                 mov     [ebp+var_4], ecx
.text:00003753                 mov     edx, [ebp+this]
.text:00003756                 mov     eax, [ebp+var_4]
.text:00003759                 mov     [edx+0Ch], eax
.text:0000375C                 mov     eax, [ebp+var_4]
.text:0000375F                 mov     esp, ebp
.text:00003761                 pop     ebp
.text:00003762                 retn    4
.text:00003762 ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ endp
.text:00003762
.text:00003762 ; ---------------------------------------------------------------------------
.text:00003765                 align 4
.text:00003765 _text           ends
.text:00003765
.text:00003768 ; ===========================================================================
.text:00003768
.text:00003768 ; Segment type: Pure code
.text:00003768 ; Segment permissions: Read/Execute
.text:00003768 _text           segment para public 'CODE' use32
.text:00003768                 assume cs:_text
.text:00003768                 ;org 3768h
.text:00003768 ; COMDAT (pick any)
.text:00003768                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003768
.text:00003768 ; =============== S U B R O U T I N E =======================================
.text:00003768
.text:00003768 ; Attributes: bp-based frame
.text:00003768
.text:00003768 ; unsigned __int32 __stdcall NCompress::NBZip2::CEncoder::Release(NCompress::NBZip2::CEncoder *this)
.text:00003768                 public ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ
.text:00003768 ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ proc near
.text:00003768                                         ; CODE XREF: [thunk]:NCompress::NBZip2::CEncoder::Release`adjustor{8}' (void)+5j
.text:00003768                                         ; [thunk]:NCompress::NBZip2::CEncoder::Release`adjustor{4}' (void)+5j
.text:00003768                                         ; DATA XREF: ...
.text:00003768
.text:00003768 var_10          = dword ptr -10h
.text:00003768 var_C           = dword ptr -0Ch
.text:00003768 var_8           = dword ptr -8
.text:00003768 var_4           = dword ptr -4
.text:00003768 this            = dword ptr  8
.text:00003768
.text:00003768                 push    ebp
.text:00003769                 mov     ebp, esp
.text:0000376B                 sub     esp, 10h
.text:0000376E                 mov     eax, 0CCCCCCCCh
.text:00003773                 mov     [ebp+var_10], eax
.text:00003776                 mov     [ebp+var_C], eax
.text:00003779                 mov     [ebp+var_8], eax
.text:0000377C                 mov     [ebp+var_4], eax
.text:0000377F                 mov     eax, [ebp+this]
.text:00003782                 mov     ecx, [eax+0Ch]
.text:00003785                 sub     ecx, 1
.text:00003788                 mov     [ebp+var_C], ecx
.text:0000378B                 mov     edx, [ebp+this]
.text:0000378E                 mov     eax, [ebp+var_C]
.text:00003791                 mov     [edx+0Ch], eax
.text:00003794                 cmp     [ebp+var_C], 0
.text:00003798                 jz      short loc_37A2
.text:0000379A                 mov     ecx, [ebp+this]
.text:0000379D                 mov     eax, [ecx+0Ch]
.text:000037A0                 jmp     short loc_37CC
.text:000037A2 ; ---------------------------------------------------------------------------
.text:000037A2
.text:000037A2 loc_37A2:                               ; CODE XREF: NCompress::NBZip2::CEncoder::Release(void)+30j
.text:000037A2                 mov     edx, [ebp+this]
.text:000037A5                 mov     [ebp+var_8], edx
.text:000037A8                 mov     eax, [ebp+var_8]
.text:000037AB                 mov     [ebp+var_4], eax
.text:000037AE                 cmp     [ebp+var_4], 0
.text:000037B2                 jz      short loc_37C3
.text:000037B4                 push    1
.text:000037B6                 mov     ecx, [ebp+var_4]
.text:000037B9                 call    ??_GCEncoder@NBZip2@NCompress@@QAEPAXI@Z ; NCompress::NBZip2::CEncoder::`scalar deleting destructor'(uint)
.text:000037BE                 mov     [ebp+var_10], eax
.text:000037C1                 jmp     short loc_37CA
.text:000037C3 ; ---------------------------------------------------------------------------
.text:000037C3
.text:000037C3 loc_37C3:                               ; CODE XREF: NCompress::NBZip2::CEncoder::Release(void)+4Aj
.text:000037C3                 mov     [ebp+var_10], 0
.text:000037CA
.text:000037CA loc_37CA:                               ; CODE XREF: NCompress::NBZip2::CEncoder::Release(void)+59j
.text:000037CA                 xor     eax, eax
.text:000037CC
.text:000037CC loc_37CC:                               ; CODE XREF: NCompress::NBZip2::CEncoder::Release(void)+38j
.text:000037CC                 add     esp, 10h
.text:000037CF                 cmp     ebp, esp
.text:000037D1                 call    __RTC_CheckEsp
.text:000037D6                 mov     esp, ebp
.text:000037D8                 pop     ebp
.text:000037D9                 retn    4
.text:000037D9 ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ endp
.text:000037D9
.text:000037D9 _text           ends
.text:000037D9
.text:000037DC ; ===========================================================================
.text:000037DC
.text:000037DC ; Segment type: Pure code
.text:000037DC ; Segment permissions: Read/Execute
.text:000037DC _text           segment para public 'CODE' use32
.text:000037DC                 assume cs:_text
.text:000037DC                 ;org 37DCh
.text:000037DC ; COMDAT (pick any)
.text:000037DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000037DC
.text:000037DC ; =============== S U B R O U T I N E =======================================
.text:000037DC
.text:000037DC ; Attributes: bp-based frame
.text:000037DC
.text:000037DC ; public: void * __thiscall NCompress::NBZip2::CEncoder::`scalar deleting destructor'(unsigned int)
.text:000037DC                 public ??_GCEncoder@NBZip2@NCompress@@QAEPAXI@Z
.text:000037DC ??_GCEncoder@NBZip2@NCompress@@QAEPAXI@Z proc near
.text:000037DC                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Release(void)+51p
.text:000037DC
.text:000037DC var_4           = dword ptr -4
.text:000037DC arg_0           = dword ptr  8
.text:000037DC
.text:000037DC                 push    ebp
.text:000037DD                 mov     ebp, esp
.text:000037DF                 push    ecx
.text:000037E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000037E7                 mov     [ebp+var_4], ecx
.text:000037EA                 mov     ecx, [ebp+var_4] ; this
.text:000037ED                 call    ??1CEncoder@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CEncoder::~CEncoder(void)
.text:000037F2                 mov     eax, [ebp+arg_0]
.text:000037F5                 and     eax, 1
.text:000037F8                 jz      short loc_3806
.text:000037FA                 mov     ecx, [ebp+var_4]
.text:000037FD                 push    ecx             ; void *
.text:000037FE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003803                 add     esp, 4
.text:00003806
.text:00003806 loc_3806:                               ; CODE XREF: NCompress::NBZip2::CEncoder::`scalar deleting destructor'(uint)+1Cj
.text:00003806                 mov     eax, [ebp+var_4]
.text:00003809                 add     esp, 4
.text:0000380C                 cmp     ebp, esp
.text:0000380E                 call    __RTC_CheckEsp
.text:00003813                 mov     esp, ebp
.text:00003815                 pop     ebp
.text:00003816                 retn    4
.text:00003816 ??_GCEncoder@NBZip2@NCompress@@QAEPAXI@Z endp
.text:00003816
.text:00003816 ; ---------------------------------------------------------------------------
.text:00003819                 align 4
.text:00003819 _text           ends
.text:00003819
.text:0000381C ; ===========================================================================
.text:0000381C
.text:0000381C ; Segment type: Pure code
.text:0000381C ; Segment permissions: Read/Execute
.text:0000381C _text           segment para public 'CODE' use32
.text:0000381C                 assume cs:_text
.text:0000381C                 ;org 381Ch
.text:0000381C ; COMDAT (pick any)
.text:0000381C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000381C
.text:0000381C ; =============== S U B R O U T I N E =======================================
.text:0000381C
.text:0000381C ; Attributes: bp-based frame
.text:0000381C
.text:0000381C ; _DWORD __thiscall ICompressCoder::ICompressCoder(ICompressCoder *__hidden this)
.text:0000381C                 public ??0ICompressCoder@@QAE@XZ
.text:0000381C ??0ICompressCoder@@QAE@XZ proc near     ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+30p
.text:0000381C
.text:0000381C var_4           = dword ptr -4
.text:0000381C
.text:0000381C                 push    ebp
.text:0000381D                 mov     ebp, esp
.text:0000381F                 push    ecx
.text:00003820                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003827                 mov     [ebp+var_4], ecx
.text:0000382A                 mov     ecx, [ebp+var_4]
.text:0000382D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00003832                 mov     eax, [ebp+var_4]
.text:00003835                 mov     dword ptr [eax], offset ??_7ICompressCoder@@6B@ ; const ICompressCoder::`vftable'
.text:0000383B                 mov     eax, [ebp+var_4]
.text:0000383E                 add     esp, 4
.text:00003841                 cmp     ebp, esp
.text:00003843                 call    __RTC_CheckEsp
.text:00003848                 mov     esp, ebp
.text:0000384A                 pop     ebp
.text:0000384B                 retn
.text:0000384B ??0ICompressCoder@@QAE@XZ endp
.text:0000384B
.text:0000384B _text           ends
.text:0000384B
.rdata:0000384C ; ===========================================================================
.rdata:0000384C
.rdata:0000384C ; Segment type: Pure data
.rdata:0000384C ; Segment permissions: Read
.rdata:0000384C _rdata          segment dword public 'DATA' use32
.rdata:0000384C                 assume cs:_rdata
.rdata:0000384C                 ;org 384Ch
.rdata:0000384C ; COMDAT (pick largest)
.rdata:0000384C                 dd offset ??_R4ICompressCoder@@6B@ ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata:00003850                 public ??_7ICompressCoder@@6B@
.rdata:00003850 ; const ICompressCoder::`vftable'
.rdata:00003850 ??_7ICompressCoder@@6B@ dd offset __purecall
.rdata:00003850                                         ; DATA XREF: ICompressCoder::ICompressCoder(void)+19o
.rdata:00003854                 dd offset __purecall
.rdata:00003858                 dd offset __purecall
.rdata:0000385C                 dd offset __purecall
.rdata:0000385C _rdata          ends
.rdata:0000385C
.rdata$r:00003860 ; ===========================================================================
.rdata$r:00003860
.rdata$r:00003860 ; Segment type: Pure data
.rdata$r:00003860 ; Segment permissions: Read
.rdata$r:00003860 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003860                 assume cs:_rdata$r
.rdata$r:00003860                 ;org 3860h
.rdata$r:00003860 ; COMDAT (pick any)
.rdata$r:00003860                 public ??_R4ICompressCoder@@6B@
.rdata$r:00003860 ; const ICompressCoder::`RTTI Complete Object Locator'
.rdata$r:00003860 ??_R4ICompressCoder@@6B@ db    0        ; DATA XREF: .rdata:0000384Co
.rdata$r:00003861                 db    0
.rdata$r:00003862                 db    0
.rdata$r:00003863                 db    0
.rdata$r:00003864                 db    0
.rdata$r:00003865                 db    0
.rdata$r:00003866                 db    0
.rdata$r:00003867                 db    0
.rdata$r:00003868                 db    0
.rdata$r:00003869                 db    0
.rdata$r:0000386A                 db    0
.rdata$r:0000386B                 db    0
.rdata$r:0000386C                 dd offset ??_R0?AUICompressCoder@@@8 ; ICompressCoder `RTTI Type Descriptor'
.rdata$r:00003870                 dd offset ??_R3ICompressCoder@@8 ; ICompressCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003870 _rdata$r        ends
.rdata$r:00003870
.text:00003874 ; ===========================================================================
.text:00003874
.text:00003874 ; Segment type: Pure code
.text:00003874 ; Segment permissions: Read/Execute
.text:00003874 _text           segment para public 'CODE' use32
.text:00003874                 assume cs:_text
.text:00003874                 ;org 3874h
.text:00003874 ; COMDAT (pick any)
.text:00003874                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003874
.text:00003874 ; =============== S U B R O U T I N E =======================================
.text:00003874
.text:00003874 ; Attributes: bp-based frame
.text:00003874
.text:00003874 ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:00003874                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:00003874 ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:00003874                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+3Bp
.text:00003874
.text:00003874 var_4           = dword ptr -4
.text:00003874
.text:00003874                 push    ebp
.text:00003875                 mov     ebp, esp
.text:00003877                 push    ecx
.text:00003878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000387F                 mov     [ebp+var_4], ecx
.text:00003882                 mov     ecx, [ebp+var_4]
.text:00003885                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000388A                 mov     eax, [ebp+var_4]
.text:0000388D                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:00003893                 mov     eax, [ebp+var_4]
.text:00003896                 add     esp, 4
.text:00003899                 cmp     ebp, esp
.text:0000389B                 call    __RTC_CheckEsp
.text:000038A0                 mov     esp, ebp
.text:000038A2                 pop     ebp
.text:000038A3                 retn
.text:000038A3 ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:000038A3
.text:000038A3 _text           ends
.text:000038A3
.rdata:000038A4 ; ===========================================================================
.rdata:000038A4
.rdata:000038A4 ; Segment type: Pure data
.rdata:000038A4 ; Segment permissions: Read
.rdata:000038A4 _rdata          segment dword public 'DATA' use32
.rdata:000038A4                 assume cs:_rdata
.rdata:000038A4                 ;org 38A4h
.rdata:000038A4 ; COMDAT (pick largest)
.rdata:000038A4                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:000038A8                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:000038A8 ; const ICompressSetCoderProperties::`vftable'
.rdata:000038A8 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:000038A8                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:000038AC                 dd offset __purecall
.rdata:000038B0                 dd offset __purecall
.rdata:000038B4                 dd offset __purecall
.rdata:000038B4 _rdata          ends
.rdata:000038B4
.rdata$r:000038B8 ; ===========================================================================
.rdata$r:000038B8
.rdata$r:000038B8 ; Segment type: Pure data
.rdata$r:000038B8 ; Segment permissions: Read
.rdata$r:000038B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000038B8                 assume cs:_rdata$r
.rdata$r:000038B8                 ;org 38B8h
.rdata$r:000038B8 ; COMDAT (pick any)
.rdata$r:000038B8                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:000038B8 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:000038B8 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:000038B8                                         ; DATA XREF: .rdata:000038A4o
.rdata$r:000038B9                 db    0
.rdata$r:000038BA                 db    0
.rdata$r:000038BB                 db    0
.rdata$r:000038BC                 db    0
.rdata$r:000038BD                 db    0
.rdata$r:000038BE                 db    0
.rdata$r:000038BF                 db    0
.rdata$r:000038C0                 db    0
.rdata$r:000038C1                 db    0
.rdata$r:000038C2                 db    0
.rdata$r:000038C3                 db    0
.rdata$r:000038C4                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000038C8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000038C8 _rdata$r        ends
.rdata$r:000038C8
.text:000038CC ; ===========================================================================
.text:000038CC
.text:000038CC ; Segment type: Pure code
.text:000038CC ; Segment permissions: Read/Execute
.text:000038CC _text           segment para public 'CODE' use32
.text:000038CC                 assume cs:_text
.text:000038CC                 ;org 38CCh
.text:000038CC ; COMDAT (pick any)
.text:000038CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000038CC
.text:000038CC ; =============== S U B R O U T I N E =======================================
.text:000038CC
.text:000038CC ; Attributes: bp-based frame
.text:000038CC
.text:000038CC ; _DWORD __thiscall ICompressSetCoderMt::ICompressSetCoderMt(ICompressSetCoderMt *__hidden this)
.text:000038CC                 public ??0ICompressSetCoderMt@@QAE@XZ
.text:000038CC ??0ICompressSetCoderMt@@QAE@XZ proc near
.text:000038CC                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+46p
.text:000038CC
.text:000038CC var_4           = dword ptr -4
.text:000038CC
.text:000038CC                 push    ebp
.text:000038CD                 mov     ebp, esp
.text:000038CF                 push    ecx
.text:000038D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000038D7                 mov     [ebp+var_4], ecx
.text:000038DA                 mov     ecx, [ebp+var_4]
.text:000038DD                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000038E2                 mov     eax, [ebp+var_4]
.text:000038E5                 mov     dword ptr [eax], offset ??_7ICompressSetCoderMt@@6B@ ; const ICompressSetCoderMt::`vftable'
.text:000038EB                 mov     eax, [ebp+var_4]
.text:000038EE                 add     esp, 4
.text:000038F1                 cmp     ebp, esp
.text:000038F3                 call    __RTC_CheckEsp
.text:000038F8                 mov     esp, ebp
.text:000038FA                 pop     ebp
.text:000038FB                 retn
.text:000038FB ??0ICompressSetCoderMt@@QAE@XZ endp
.text:000038FB
.text:000038FB _text           ends
.text:000038FB
.rdata:000038FC ; ===========================================================================
.rdata:000038FC
.rdata:000038FC ; Segment type: Pure data
.rdata:000038FC ; Segment permissions: Read
.rdata:000038FC _rdata          segment dword public 'DATA' use32
.rdata:000038FC                 assume cs:_rdata
.rdata:000038FC                 ;org 38FCh
.rdata:000038FC ; COMDAT (pick largest)
.rdata:000038FC                 dd offset ??_R4ICompressSetCoderMt@@6B@ ; const ICompressSetCoderMt::`RTTI Complete Object Locator'
.rdata:00003900                 public ??_7ICompressSetCoderMt@@6B@
.rdata:00003900 ; const ICompressSetCoderMt::`vftable'
.rdata:00003900 ??_7ICompressSetCoderMt@@6B@ dd offset __purecall
.rdata:00003900                                         ; DATA XREF: ICompressSetCoderMt::ICompressSetCoderMt(void)+19o
.rdata:00003904                 dd offset __purecall
.rdata:00003908                 dd offset __purecall
.rdata:0000390C                 dd offset __purecall
.rdata:0000390C _rdata          ends
.rdata:0000390C
.rdata$r:00003910 ; ===========================================================================
.rdata$r:00003910
.rdata$r:00003910 ; Segment type: Pure data
.rdata$r:00003910 ; Segment permissions: Read
.rdata$r:00003910 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003910                 assume cs:_rdata$r
.rdata$r:00003910                 ;org 3910h
.rdata$r:00003910 ; COMDAT (pick any)
.rdata$r:00003910                 public ??_R4ICompressSetCoderMt@@6B@
.rdata$r:00003910 ; const ICompressSetCoderMt::`RTTI Complete Object Locator'
.rdata$r:00003910 ??_R4ICompressSetCoderMt@@6B@ db    0   ; DATA XREF: .rdata:000038FCo
.rdata$r:00003911                 db    0
.rdata$r:00003912                 db    0
.rdata$r:00003913                 db    0
.rdata$r:00003914                 db    0
.rdata$r:00003915                 db    0
.rdata$r:00003916                 db    0
.rdata$r:00003917                 db    0
.rdata$r:00003918                 db    0
.rdata$r:00003919                 db    0
.rdata$r:0000391A                 db    0
.rdata$r:0000391B                 db    0
.rdata$r:0000391C                 dd offset ??_R0?AUICompressSetCoderMt@@@8 ; ICompressSetCoderMt `RTTI Type Descriptor'
.rdata$r:00003920                 dd offset ??_R3ICompressSetCoderMt@@8 ; ICompressSetCoderMt::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003920 _rdata$r        ends
.rdata$r:00003920
.text:00003924 ; ===========================================================================
.text:00003924
.text:00003924 ; Segment type: Pure code
.text:00003924 ; Segment permissions: Read/Execute
.text:00003924 _text           segment para public 'CODE' use32
.text:00003924                 assume cs:_text
.text:00003924                 ;org 3924h
.text:00003924 ; COMDAT (pick any)
.text:00003924                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003924
.text:00003924 ; =============== S U B R O U T I N E =======================================
.text:00003924
.text:00003924 ; Attributes: bp-based frame
.text:00003924
.text:00003924 ; public: __thiscall CInBuffer::CInBuffer(void)
.text:00003924                 public ??0CInBuffer@@QAE@XZ
.text:00003924 ??0CInBuffer@@QAE@XZ proc near          ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+79p
.text:00003924
.text:00003924 var_4           = dword ptr -4
.text:00003924
.text:00003924                 push    ebp
.text:00003925                 mov     ebp, esp
.text:00003927                 push    ecx
.text:00003928                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000392F                 mov     [ebp+var_4], ecx
.text:00003932                 mov     ecx, [ebp+var_4]
.text:00003935                 call    ??0CInBufferBase@@QAE@XZ ; CInBufferBase::CInBufferBase(void)
.text:0000393A                 mov     eax, [ebp+var_4]
.text:0000393D                 add     esp, 4
.text:00003940                 cmp     ebp, esp
.text:00003942                 call    __RTC_CheckEsp
.text:00003947                 mov     esp, ebp
.text:00003949                 pop     ebp
.text:0000394A                 retn
.text:0000394A ??0CInBuffer@@QAE@XZ endp
.text:0000394A
.text:0000394A ; ---------------------------------------------------------------------------
.text:0000394B                 align 4
.text:0000394B _text           ends
.text:0000394B
.text:0000394C ; ===========================================================================
.text:0000394C
.text:0000394C ; Segment type: Pure code
.text:0000394C ; Segment permissions: Read/Execute
.text:0000394C _text           segment para public 'CODE' use32
.text:0000394C                 assume cs:_text
.text:0000394C                 ;org 394Ch
.text:0000394C ; COMDAT (pick any)
.text:0000394C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000394C
.text:0000394C ; =============== S U B R O U T I N E =======================================
.text:0000394C
.text:0000394C ; Attributes: bp-based frame
.text:0000394C
.text:0000394C ; public: __thiscall CBitmEncoder<class COutBuffer>::CBitmEncoder<class COutBuffer>(void)
.text:0000394C                 public ??0?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ
.text:0000394C ??0?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ proc near
.text:0000394C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+8Ep
.text:0000394C
.text:0000394C var_4           = dword ptr -4
.text:0000394C
.text:0000394C                 push    ebp
.text:0000394D                 mov     ebp, esp
.text:0000394F                 push    ecx
.text:00003950                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003957                 mov     [ebp+var_4], ecx
.text:0000395A                 mov     ecx, [ebp+var_4]
.text:0000395D                 add     ecx, 8          ; this
.text:00003960                 call    ??0COutBuffer@@QAE@XZ ; COutBuffer::COutBuffer(void)
.text:00003965                 mov     eax, [ebp+var_4]
.text:00003968                 add     esp, 4
.text:0000396B                 cmp     ebp, esp
.text:0000396D                 call    __RTC_CheckEsp
.text:00003972                 mov     esp, ebp
.text:00003974                 pop     ebp
.text:00003975                 retn
.text:00003975 ??0?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ endp
.text:00003975
.text:00003975 ; ---------------------------------------------------------------------------
.text:00003976                 align 4
.text:00003976 _text           ends
.text:00003976
.text:00003978 ; ===========================================================================
.text:00003978
.text:00003978 ; Segment type: Pure code
.text:00003978 ; Segment permissions: Read/Execute
.text:00003978 _text           segment para public 'CODE' use32
.text:00003978                 assume cs:_text
.text:00003978                 ;org 3978h
.text:00003978 ; COMDAT (pick any)
.text:00003978                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003978
.text:00003978 ; =============== S U B R O U T I N E =======================================
.text:00003978
.text:00003978 ; Attributes: bp-based frame
.text:00003978
.text:00003978 ; _DWORD __thiscall COutBuffer::COutBuffer(COutBuffer *__hidden this)
.text:00003978                 public ??0COutBuffer@@QAE@XZ
.text:00003978 ??0COutBuffer@@QAE@XZ proc near         ; CODE XREF: CBitmEncoder<COutBuffer>::CBitmEncoder<COutBuffer>(void)+14p
.text:00003978
.text:00003978 var_4           = dword ptr -4
.text:00003978
.text:00003978                 push    ebp
.text:00003979                 mov     ebp, esp
.text:0000397B                 push    ecx
.text:0000397C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003983                 mov     [ebp+var_4], ecx
.text:00003986                 mov     eax, [ebp+var_4]
.text:00003989                 mov     dword ptr [eax], 0
.text:0000398F                 mov     ecx, [ebp+var_4]
.text:00003992                 mov     dword ptr [ecx+4], 0
.text:00003999                 mov     edx, [ebp+var_4]
.text:0000399C                 mov     dword ptr [edx+14h], 0
.text:000039A3                 mov     eax, [ebp+var_4]
.text:000039A6                 mov     dword ptr [eax+20h], 0
.text:000039AD                 mov     eax, [ebp+var_4]
.text:000039B0                 mov     esp, ebp
.text:000039B2                 pop     ebp
.text:000039B3                 retn
.text:000039B3 ??0COutBuffer@@QAE@XZ endp
.text:000039B3
.text:000039B3 _text           ends
.text:000039B3
.text:000039B4 ; ===========================================================================
.text:000039B4
.text:000039B4 ; Segment type: Pure code
.text:000039B4 ; Segment permissions: Read/Execute
.text:000039B4 _text           segment para public 'CODE' use32
.text:000039B4                 assume cs:_text
.text:000039B4                 ;org 39B4h
.text:000039B4 ; COMDAT (pick any)
.text:000039B4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039B4
.text:000039B4 ; =============== S U B R O U T I N E =======================================
.text:000039B4
.text:000039B4 ; Attributes: bp-based frame
.text:000039B4
.text:000039B4 ; public: __thiscall CBitmEncoder<class COutBuffer>::~CBitmEncoder<class COutBuffer>(void)
.text:000039B4                 public ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ
.text:000039B4 ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ proc near
.text:000039B4                                         ; CODE XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+9Cp
.text:000039B4                                         ; __unwindfunclet$??0CEncoder@NBZip2@NCompress@@QAE@XZ$1+9j ...
.text:000039B4
.text:000039B4 var_4           = dword ptr -4
.text:000039B4
.text:000039B4                 push    ebp
.text:000039B5                 mov     ebp, esp
.text:000039B7                 push    ecx
.text:000039B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039BF                 mov     [ebp+var_4], ecx
.text:000039C2                 mov     ecx, [ebp+var_4]
.text:000039C5                 add     ecx, 8          ; this
.text:000039C8                 call    ??1COutBuffer@@QAE@XZ ; COutBuffer::~COutBuffer(void)
.text:000039CD                 add     esp, 4
.text:000039D0                 cmp     ebp, esp
.text:000039D2                 call    __RTC_CheckEsp
.text:000039D7                 mov     esp, ebp
.text:000039D9                 pop     ebp
.text:000039DA                 retn
.text:000039DA ??1?$CBitmEncoder@VCOutBuffer@@@@QAE@XZ endp
.text:000039DA
.text:000039DA ; ---------------------------------------------------------------------------
.text:000039DB                 align 4
.text:000039DB _text           ends
.text:000039DB
.text:000039DC ; ===========================================================================
.text:000039DC
.text:000039DC ; Segment type: Pure code
.text:000039DC ; Segment permissions: Read/Execute
.text:000039DC _text           segment para public 'CODE' use32
.text:000039DC                 assume cs:_text
.text:000039DC                 ;org 39DCh
.text:000039DC ; COMDAT (pick any)
.text:000039DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000039DC
.text:000039DC ; =============== S U B R O U T I N E =======================================
.text:000039DC
.text:000039DC ; Attributes: bp-based frame
.text:000039DC
.text:000039DC ; _DWORD __thiscall COutBuffer::~COutBuffer(COutBuffer *__hidden this)
.text:000039DC                 public ??1COutBuffer@@QAE@XZ
.text:000039DC ??1COutBuffer@@QAE@XZ proc near         ; CODE XREF: CBitmEncoder<COutBuffer>::~CBitmEncoder<COutBuffer>(void)+14p
.text:000039DC
.text:000039DC var_4           = dword ptr -4
.text:000039DC
.text:000039DC                 push    ebp
.text:000039DD                 mov     ebp, esp
.text:000039DF                 push    ecx
.text:000039E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000039E7                 mov     [ebp+var_4], ecx
.text:000039EA                 mov     ecx, [ebp+var_4] ; this
.text:000039ED                 call    ?Free@COutBuffer@@QAEXXZ ; COutBuffer::Free(void)
.text:000039F2                 add     esp, 4
.text:000039F5                 cmp     ebp, esp
.text:000039F7                 call    __RTC_CheckEsp
.text:000039FC                 mov     esp, ebp
.text:000039FE                 pop     ebp
.text:000039FF                 retn
.text:000039FF ??1COutBuffer@@QAE@XZ endp
.text:000039FF
.text:000039FF _text           ends
.text:000039FF
.text:00003A00 ; ===========================================================================
.text:00003A00
.text:00003A00 ; Segment type: Pure code
.text:00003A00 ; Segment permissions: Read/Execute
.text:00003A00 _text           segment para public 'CODE' use32
.text:00003A00                 assume cs:_text
.text:00003A00                 ;org 3A00h
.text:00003A00 ; COMDAT (pick any)
.text:00003A00                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A00
.text:00003A00 ; =============== S U B R O U T I N E =======================================
.text:00003A00
.text:00003A00 ; Attributes: bp-based frame
.text:00003A00
.text:00003A00 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00003A00                 public ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003A00 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003A00                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CEncoder(void)+BCp
.text:00003A00                                         ; NCompress::NBZip2::CEncoder::CEncoder(void)+E0p
.text:00003A00
.text:00003A00 var_4           = dword ptr -4
.text:00003A00
.text:00003A00                 push    ebp
.text:00003A01                 mov     ebp, esp
.text:00003A03                 push    ecx
.text:00003A04                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A0B                 mov     [ebp+var_4], ecx
.text:00003A0E                 mov     ecx, [ebp+var_4] ; this
.text:00003A11                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:00003A16                 mov     eax, [ebp+var_4]
.text:00003A19                 add     esp, 4
.text:00003A1C                 cmp     ebp, esp
.text:00003A1E                 call    __RTC_CheckEsp
.text:00003A23                 mov     esp, ebp
.text:00003A25                 pop     ebp
.text:00003A26                 retn
.text:00003A26 ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003A26
.text:00003A26 ; ---------------------------------------------------------------------------
.text:00003A27                 align 4
.text:00003A27 _text           ends
.text:00003A27
.text:00003A28 ; ===========================================================================
.text:00003A28
.text:00003A28 ; Segment type: Pure code
.text:00003A28 ; Segment permissions: Read/Execute
.text:00003A28 _text           segment para public 'CODE' use32
.text:00003A28                 assume cs:_text
.text:00003A28                 ;org 3A28h
.text:00003A28 ; COMDAT (pick any)
.text:00003A28                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A28
.text:00003A28 ; =============== S U B R O U T I N E =======================================
.text:00003A28
.text:00003A28 ; Attributes: bp-based frame
.text:00003A28
.text:00003A28 ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003A28                 public ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003A28 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003A28                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CManualResetEvent(void)+11p
.text:00003A28                                         ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)+11p
.text:00003A28
.text:00003A28 var_4           = dword ptr -4
.text:00003A28
.text:00003A28                 push    ebp
.text:00003A29                 mov     ebp, esp
.text:00003A2B                 push    ecx
.text:00003A2C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A33                 mov     [ebp+var_4], ecx
.text:00003A36                 mov     eax, [ebp+var_4]
.text:00003A39                 mov     dword ptr [eax], 0
.text:00003A3F                 mov     eax, [ebp+var_4]
.text:00003A42                 mov     esp, ebp
.text:00003A44                 pop     ebp
.text:00003A45                 retn
.text:00003A45 ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003A45
.text:00003A45 ; ---------------------------------------------------------------------------
.text:00003A46                 align 4
.text:00003A46 _text           ends
.text:00003A46
.text:00003A48 ; ===========================================================================
.text:00003A48
.text:00003A48 ; Segment type: Pure code
.text:00003A48 ; Segment permissions: Read/Execute
.text:00003A48 _text           segment para public 'CODE' use32
.text:00003A48                 assume cs:_text
.text:00003A48                 ;org 3A48h
.text:00003A48 ; COMDAT (pick any)
.text:00003A48                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A48
.text:00003A48 ; =============== S U B R O U T I N E =======================================
.text:00003A48
.text:00003A48 ; Attributes: bp-based frame
.text:00003A48
.text:00003A48 ; _DWORD __thiscall NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00003A48                 public ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003A48 ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003A48                                         ; CODE XREF: NCompress::NBZip2::CEncoder::~CEncoder(void)+66p
.text:00003A48                                         ; NCompress::NBZip2::CEncoder::~CEncoder(void)+8Ap ...
.text:00003A48
.text:00003A48 var_4           = dword ptr -4
.text:00003A48
.text:00003A48                 push    ebp
.text:00003A49                 mov     ebp, esp
.text:00003A4B                 push    ecx
.text:00003A4C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A53                 mov     [ebp+var_4], ecx
.text:00003A56                 mov     ecx, [ebp+var_4] ; this
.text:00003A59                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00003A5E                 add     esp, 4
.text:00003A61                 cmp     ebp, esp
.text:00003A63                 call    __RTC_CheckEsp
.text:00003A68                 mov     esp, ebp
.text:00003A6A                 pop     ebp
.text:00003A6B                 retn
.text:00003A6B ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003A6B
.text:00003A6B _text           ends
.text:00003A6B
.text:00003A6C ; ===========================================================================
.text:00003A6C
.text:00003A6C ; Segment type: Pure code
.text:00003A6C ; Segment permissions: Read/Execute
.text:00003A6C _text           segment para public 'CODE' use32
.text:00003A6C                 assume cs:_text
.text:00003A6C                 ;org 3A6Ch
.text:00003A6C ; COMDAT (pick any)
.text:00003A6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A6C
.text:00003A6C ; =============== S U B R O U T I N E =======================================
.text:00003A6C
.text:00003A6C ; Attributes: bp-based frame
.text:00003A6C
.text:00003A6C ; _DWORD __thiscall NWindows::NSynchronization::CBaseEvent::~CBaseEvent(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003A6C                 public ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003A6C ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003A6C                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent(void)+11p
.text:00003A6C                                         ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)+11p
.text:00003A6C
.text:00003A6C var_4           = dword ptr -4
.text:00003A6C
.text:00003A6C                 push    ebp
.text:00003A6D                 mov     ebp, esp
.text:00003A6F                 push    ecx
.text:00003A70                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A77                 mov     [ebp+var_4], ecx
.text:00003A7A                 mov     ecx, [ebp+var_4] ; this
.text:00003A7D                 call    ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close(void)
.text:00003A82                 add     esp, 4
.text:00003A85                 cmp     ebp, esp
.text:00003A87                 call    __RTC_CheckEsp
.text:00003A8C                 mov     esp, ebp
.text:00003A8E                 pop     ebp
.text:00003A8F                 retn
.text:00003A8F ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003A8F
.text:00003A8F _text           ends
.text:00003A8F
.text:00003A90 ; ===========================================================================
.text:00003A90
.text:00003A90 ; Segment type: Pure code
.text:00003A90 ; Segment permissions: Read/Execute
.text:00003A90 _text           segment para public 'CODE' use32
.text:00003A90                 assume cs:_text
.text:00003A90                 ;org 3A90h
.text:00003A90 ; COMDAT (pick any)
.text:00003A90                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003A90
.text:00003A90 ; =============== S U B R O U T I N E =======================================
.text:00003A90
.text:00003A90 ; Attributes: bp-based frame
.text:00003A90
.text:00003A90 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Close(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003A90                 public ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003A90 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003A90                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)+11p
.text:00003A90
.text:00003A90 var_4           = dword ptr -4
.text:00003A90
.text:00003A90                 push    ebp
.text:00003A91                 mov     ebp, esp
.text:00003A93                 push    ecx
.text:00003A94                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003A9B                 mov     [ebp+var_4], ecx
.text:00003A9E                 mov     eax, [ebp+var_4]
.text:00003AA1                 push    eax
.text:00003AA2                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00003AA7                 add     esp, 4
.text:00003AAA                 cmp     ebp, esp
.text:00003AAC                 call    __RTC_CheckEsp
.text:00003AB1                 mov     esp, ebp
.text:00003AB3                 pop     ebp
.text:00003AB4                 retn
.text:00003AB4 ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003AB4
.text:00003AB4 ; ---------------------------------------------------------------------------
.text:00003AB5                 align 4
.text:00003AB5 _text           ends
.text:00003AB5
.text:00003AB8 ; ===========================================================================
.text:00003AB8
.text:00003AB8 ; Segment type: Pure code
.text:00003AB8 ; Segment permissions: Read/Execute
.text:00003AB8 _text           segment para public 'CODE' use32
.text:00003AB8                 assume cs:_text
.text:00003AB8                 ;org 3AB8h
.text:00003AB8 ; COMDAT (pick any)
.text:00003AB8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AB8
.text:00003AB8 ; =============== S U B R O U T I N E =======================================
.text:00003AB8
.text:00003AB8 ; Attributes: bp-based frame
.text:00003AB8
.text:00003AB8 ; public: __thiscall IUnknown::IUnknown(void)
.text:00003AB8                 public ??0IUnknown@@QAE@XZ
.text:00003AB8 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressCoder::ICompressCoder(void)+11p
.text:00003AB8                                         ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)+11p ...
.text:00003AB8
.text:00003AB8 var_4           = dword ptr -4
.text:00003AB8
.text:00003AB8                 push    ebp
.text:00003AB9                 mov     ebp, esp
.text:00003ABB                 push    ecx
.text:00003ABC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003AC3                 mov     [ebp+var_4], ecx
.text:00003AC6                 mov     eax, [ebp+var_4]
.text:00003AC9                 mov     esp, ebp
.text:00003ACB                 pop     ebp
.text:00003ACC                 retn
.text:00003ACC ??0IUnknown@@QAE@XZ endp
.text:00003ACC
.text:00003ACC ; ---------------------------------------------------------------------------
.text:00003ACD                 align 10h
.text:00003ACD _text           ends
.text:00003ACD
.text:00003AD0 ; ===========================================================================
.text:00003AD0
.text:00003AD0 ; Segment type: Pure code
.text:00003AD0 ; Segment permissions: Read/Execute
.text:00003AD0 _text           segment para public 'CODE' use32
.text:00003AD0                 assume cs:_text
.text:00003AD0                 ;org 3AD0h
.text:00003AD0 ; COMDAT (pick any)
.text:00003AD0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003AD0
.text:00003AD0 ; =============== S U B R O U T I N E =======================================
.text:00003AD0
.text:00003AD0 ; Attributes: bp-based frame
.text:00003AD0
.text:00003AD0 ; unsigned int __thiscall NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(NWindows::NSynchronization::CManualResetEvent *__hidden this)
.text:00003AD0                 public ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ
.text:00003AD0 ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00003AD0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+49p
.text:00003AD0                                         ; NCompress::NBZip2::CEncoder::Create(void)+68p
.text:00003AD0
.text:00003AD0 var_4           = dword ptr -4
.text:00003AD0
.text:00003AD0                 push    ebp
.text:00003AD1                 mov     ebp, esp
.text:00003AD3                 push    ecx
.text:00003AD4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003ADB                 mov     [ebp+var_4], ecx
.text:00003ADE                 mov     ecx, [ebp+var_4] ; this
.text:00003AE1                 call    ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ ; NWindows::NSynchronization::CBaseEvent::IsCreated(void)
.text:00003AE6                 movzx   eax, al
.text:00003AE9                 test    eax, eax
.text:00003AEB                 jz      short loc_3AF1
.text:00003AED                 xor     eax, eax
.text:00003AEF                 jmp     short loc_3AFA
.text:00003AF1 ; ---------------------------------------------------------------------------
.text:00003AF1
.text:00003AF1 loc_3AF1:                               ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+1Bj
.text:00003AF1                 mov     ecx, [ebp+var_4]
.text:00003AF4                 push    ecx
.text:00003AF5                 call    _ManualResetEvent_CreateNotSignaled@4 ; ManualResetEvent_CreateNotSignaled(x)
.text:00003AFA
.text:00003AFA loc_3AFA:                               ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+1Fj
.text:00003AFA                 add     esp, 4
.text:00003AFD                 cmp     ebp, esp
.text:00003AFF                 call    __RTC_CheckEsp
.text:00003B04                 mov     esp, ebp
.text:00003B06                 pop     ebp
.text:00003B07                 retn
.text:00003B07 ?CreateIfNotCreated@CManualResetEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00003B07
.text:00003B07 _text           ends
.text:00003B07
.text:00003B08 ; ===========================================================================
.text:00003B08
.text:00003B08 ; Segment type: Pure code
.text:00003B08 ; Segment permissions: Read/Execute
.text:00003B08 _text           segment para public 'CODE' use32
.text:00003B08                 assume cs:_text
.text:00003B08                 ;org 3B08h
.text:00003B08 ; COMDAT (pick any)
.text:00003B08                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B08
.text:00003B08 ; =============== S U B R O U T I N E =======================================
.text:00003B08
.text:00003B08 ; Attributes: bp-based frame
.text:00003B08
.text:00003B08 ; bool __thiscall NWindows::NSynchronization::CBaseEvent::IsCreated(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00003B08                 public ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ
.text:00003B08 ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ proc near
.text:00003B08                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+11p
.text:00003B08
.text:00003B08 var_4           = dword ptr -4
.text:00003B08
.text:00003B08                 push    ebp
.text:00003B09                 mov     ebp, esp
.text:00003B0B                 push    ecx
.text:00003B0C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003B13                 mov     [ebp+var_4], ecx
.text:00003B16                 mov     eax, [ebp+var_4]
.text:00003B19                 xor     ecx, ecx
.text:00003B1B                 cmp     dword ptr [eax], 0
.text:00003B1E                 setnz   cl
.text:00003B21                 neg     ecx
.text:00003B23                 sbb     ecx, ecx
.text:00003B25                 neg     ecx
.text:00003B27                 mov     al, cl
.text:00003B29                 mov     esp, ebp
.text:00003B2B                 pop     ebp
.text:00003B2C                 retn
.text:00003B2C ?IsCreated@CBaseEvent@NSynchronization@NWindows@@QAE_NXZ endp
.text:00003B2C
.text:00003B2C ; ---------------------------------------------------------------------------
.text:00003B2D                 align 10h
.text:00003B2D _text           ends
.text:00003B2D
.text:00003B30 ; ===========================================================================
.text:00003B30
.text:00003B30 ; Segment type: Pure code
.text:00003B30 ; Segment permissions: Read/Execute
.text:00003B30 _text           segment para public 'CODE' use32
.text:00003B30                 assume cs:_text
.text:00003B30                 ;org 3B30h
.text:00003B30 ; COMDAT (pick any)
.text:00003B30                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003B30
.text:00003B30 ; =============== S U B R O U T I N E =======================================
.text:00003B30
.text:00003B30 ; Attributes: bp-based frame
.text:00003B30
.text:00003B30 ; _DWORD __thiscall NCompress::NBZip2::CThreadInfo::CThreadInfo(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:00003B30                 public ??0CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text:00003B30 ??0CThreadInfo@NBZip2@NCompress@@QAE@XZ proc near
.text:00003B30                                         ; DATA XREF: NCompress::NBZip2::CEncoder::Create(void)+12Fo
.text:00003B30
.text:00003B30 var_10          = dword ptr -10h
.text:00003B30 var_C           = dword ptr -0Ch
.text:00003B30 var_4           = dword ptr -4
.text:00003B30
.text:00003B30                 push    ebp
.text:00003B31                 mov     ebp, esp
.text:00003B33                 push    0FFFFFFFFh
.text:00003B35                 push    offset __ehhandler$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text:00003B3A                 mov     eax, large fs:0
.text:00003B40                 push    eax
.text:00003B41                 push    ecx
.text:00003B42                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003B49                 mov     eax, dword ptr ds:___security_cookie
.text:00003B4E                 xor     eax, ebp
.text:00003B50                 push    eax
.text:00003B51                 lea     eax, [ebp+var_C]
.text:00003B54                 mov     large fs:0, eax
.text:00003B5A                 mov     [ebp+var_10], ecx
.text:00003B5D                 mov     eax, [ebp+var_10]
.text:00003B60                 mov     dword ptr [eax], 0
.text:00003B66                 mov     ecx, [ebp+var_10]
.text:00003B69                 mov     dword ptr [ecx+0Ch], 0
.text:00003B70                 mov     ecx, [ebp+var_10]
.text:00003B73                 add     ecx, 8CE4h      ; this
.text:00003B79                 call    ??0CThread@NWindows@@QAE@XZ ; NWindows::CThread::CThread(void)
.text:00003B7E                 mov     [ebp+var_4], 0
.text:00003B85                 mov     ecx, [ebp+var_10]
.text:00003B88                 add     ecx, 8CE8h      ; this
.text:00003B8E                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00003B93                 mov     byte ptr [ebp+var_4], 1
.text:00003B97                 mov     ecx, [ebp+var_10]
.text:00003B9A                 add     ecx, 8CECh      ; this
.text:00003BA0                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00003BA5                 mov     byte ptr [ebp+var_4], 2
.text:00003BA9                 mov     ecx, [ebp+var_10]
.text:00003BAC                 add     ecx, 8CF0h      ; this
.text:00003BB2                 call    ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(void)
.text:00003BB7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003BBE                 mov     eax, [ebp+var_10]
.text:00003BC1                 mov     ecx, [ebp+var_C]
.text:00003BC4                 mov     large fs:0, ecx
.text:00003BCB                 pop     ecx
.text:00003BCC                 add     esp, 10h
.text:00003BCF                 cmp     ebp, esp
.text:00003BD1                 call    __RTC_CheckEsp
.text:00003BD6                 mov     esp, ebp
.text:00003BD8                 pop     ebp
.text:00003BD9                 retn
.text:00003BD9 ??0CThreadInfo@NBZip2@NCompress@@QAE@XZ endp
.text:00003BD9
.text:00003BD9 ; ---------------------------------------------------------------------------
.text:00003BDA                 align 4
.text:00003BDA _text           ends
.text:00003BDA
.text$x:00003BDC ; ===========================================================================
.text$x:00003BDC
.text$x:00003BDC ; Segment type: Pure code
.text$x:00003BDC ; Segment permissions: Read/Execute
.text$x:00003BDC _text$x         segment para public 'CODE' use32
.text$x:00003BDC                 assume cs:_text$x
.text$x:00003BDC                 ;org 3BDCh
.text$x:00003BDC ; COMDAT (pick associative to section at 3B30)
.text$x:00003BDC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003BDC
.text$x:00003BDC ; =============== S U B R O U T I N E =======================================
.text$x:00003BDC
.text$x:00003BDC
.text$x:00003BDC __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00003BDC                                         ; DATA XREF: .xdata$x:00003C28o
.text$x:00003BDC                 mov     ecx, [ebp-10h]
.text$x:00003BDF                 add     ecx, 8CE4h      ; this
.text$x:00003BE5                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00003BE5 __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00003BE5
.text$x:00003BEA
.text$x:00003BEA ; =============== S U B R O U T I N E =======================================
.text$x:00003BEA
.text$x:00003BEA
.text$x:00003BEA __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00003BEA                                         ; DATA XREF: .xdata$x:00003C30o
.text$x:00003BEA                 mov     ecx, [ebp-10h]
.text$x:00003BED                 add     ecx, 8CE8h      ; this
.text$x:00003BF3                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003BF3 __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00003BF3
.text$x:00003BF8
.text$x:00003BF8 ; =============== S U B R O U T I N E =======================================
.text$x:00003BF8
.text$x:00003BF8
.text$x:00003BF8 __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00003BF8                                         ; DATA XREF: .xdata$x:00003C38o
.text$x:00003BF8                 mov     ecx, [ebp-10h]
.text$x:00003BFB                 add     ecx, 8CECh      ; this
.text$x:00003C01                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003C01 __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00003C01
.text$x:00003C06
.text$x:00003C06 ; =============== S U B R O U T I N E =======================================
.text$x:00003C06
.text$x:00003C06
.text$x:00003C06 __ehhandler$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00003C06                                         ; DATA XREF: NCompress::NBZip2::CThreadInfo::CThreadInfo(void)+5o
.text$x:00003C06
.text$x:00003C06 arg_4           = dword ptr  8
.text$x:00003C06
.text$x:00003C06                 mov     edx, [esp+arg_4]
.text$x:00003C0A                 lea     eax, [edx+0Ch]
.text$x:00003C0D                 mov     ecx, [edx-8]
.text$x:00003C10                 xor     ecx, eax
.text$x:00003C12                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C17                 mov     eax, offset __ehfuncinfo$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text$x:00003C1C                 jmp     ___CxxFrameHandler3
.text$x:00003C1C __ehhandler$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ endp
.text$x:00003C1C
.text$x:00003C1C ; ---------------------------------------------------------------------------
.text$x:00003C21                 align 4
.text$x:00003C21 _text$x         ends
.text$x:00003C21
.xdata$x:00003C24 ; ===========================================================================
.xdata$x:00003C24
.xdata$x:00003C24 ; Segment type: Pure data
.xdata$x:00003C24 ; Segment permissions: Read
.xdata$x:00003C24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003C24                 assume cs:_xdata$x
.xdata$x:00003C24                 ;org 3C24h
.xdata$x:00003C24 ; COMDAT (pick associative to section at 3B30)
.xdata$x:00003C24 __unwindtable$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00003C24                                         ; DATA XREF: .xdata$x:00003C44o
.xdata$x:00003C25                 db 0FFh
.xdata$x:00003C26                 db 0FFh
.xdata$x:00003C27                 db 0FFh
.xdata$x:00003C28                 dd offset __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00003C2C                 align 10h
.xdata$x:00003C30                 dd offset __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00003C34                 db    1
.xdata$x:00003C35                 db    0
.xdata$x:00003C36                 db    0
.xdata$x:00003C37                 db    0
.xdata$x:00003C38                 dd offset __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00003C3C __ehfuncinfo$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003C3C                                         ; DATA XREF: __ehhandler$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003C3D                 db    5
.xdata$x:00003C3E                 db  93h ; ô
.xdata$x:00003C3F                 db  19h
.xdata$x:00003C40                 db    3
.xdata$x:00003C41                 db    0
.xdata$x:00003C42                 db    0
.xdata$x:00003C43                 db    0
.xdata$x:00003C44                 dd offset __unwindtable$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ
.xdata$x:00003C48                 db    0
.xdata$x:00003C49                 db    0
.xdata$x:00003C4A                 db    0
.xdata$x:00003C4B                 db    0
.xdata$x:00003C4C                 db    0
.xdata$x:00003C4D                 db    0
.xdata$x:00003C4E                 db    0
.xdata$x:00003C4F                 db    0
.xdata$x:00003C50                 db    0
.xdata$x:00003C51                 db    0
.xdata$x:00003C52                 db    0
.xdata$x:00003C53                 db    0
.xdata$x:00003C54                 db    0
.xdata$x:00003C55                 db    0
.xdata$x:00003C56                 db    0
.xdata$x:00003C57                 db    0
.xdata$x:00003C58                 db    0
.xdata$x:00003C59                 db    0
.xdata$x:00003C5A                 db    0
.xdata$x:00003C5B                 db    0
.xdata$x:00003C5C                 db    1
.xdata$x:00003C5D                 db    0
.xdata$x:00003C5E                 db    0
.xdata$x:00003C5F                 db    0
.xdata$x:00003C5F _xdata$x        ends
.xdata$x:00003C5F
.text:00003C60 ; ===========================================================================
.text:00003C60
.text:00003C60 ; Segment type: Pure code
.text:00003C60 ; Segment permissions: Read/Execute
.text:00003C60 _text           segment para public 'CODE' use32
.text:00003C60                 assume cs:_text
.text:00003C60                 ;org 3C60h
.text:00003C60 ; COMDAT (pick any)
.text:00003C60                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C60
.text:00003C60 ; =============== S U B R O U T I N E =======================================
.text:00003C60
.text:00003C60 ; Attributes: bp-based frame
.text:00003C60
.text:00003C60 ; _DWORD __thiscall NWindows::CThread::CThread(NWindows::CThread *__hidden this)
.text:00003C60                 public ??0CThread@NWindows@@QAE@XZ
.text:00003C60 ??0CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: NCompress::NBZip2::CThreadInfo::CThreadInfo(void)+49p
.text:00003C60
.text:00003C60 var_4           = dword ptr -4
.text:00003C60
.text:00003C60                 push    ebp
.text:00003C61                 mov     ebp, esp
.text:00003C63                 push    ecx
.text:00003C64                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C6B                 mov     [ebp+var_4], ecx
.text:00003C6E                 mov     eax, [ebp+var_4]
.text:00003C71                 mov     dword ptr [eax], 0
.text:00003C77                 mov     eax, [ebp+var_4]
.text:00003C7A                 mov     esp, ebp
.text:00003C7C                 pop     ebp
.text:00003C7D                 retn
.text:00003C7D ??0CThread@NWindows@@QAE@XZ endp
.text:00003C7D
.text:00003C7D ; ---------------------------------------------------------------------------
.text:00003C7E                 align 10h
.text:00003C7E _text           ends
.text:00003C7E
.text:00003C80 ; ===========================================================================
.text:00003C80
.text:00003C80 ; Segment type: Pure code
.text:00003C80 ; Segment permissions: Read/Execute
.text:00003C80 _text           segment para public 'CODE' use32
.text:00003C80                 assume cs:_text
.text:00003C80                 ;org 3C80h
.text:00003C80 ; COMDAT (pick any)
.text:00003C80                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003C80
.text:00003C80 ; =============== S U B R O U T I N E =======================================
.text:00003C80
.text:00003C80 ; Attributes: bp-based frame
.text:00003C80
.text:00003C80 ; _DWORD __thiscall NWindows::CThread::~CThread(NWindows::CThread *__hidden this)
.text:00003C80                 public ??1CThread@NWindows@@QAE@XZ
.text:00003C80 ??1CThread@NWindows@@QAE@XZ proc near   ; CODE XREF: __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$0+9j
.text:00003C80                                         ; NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)+82p ...
.text:00003C80
.text:00003C80 var_4           = dword ptr -4
.text:00003C80
.text:00003C80                 push    ebp
.text:00003C81                 mov     ebp, esp
.text:00003C83                 push    ecx
.text:00003C84                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003C8B                 mov     [ebp+var_4], ecx
.text:00003C8E                 mov     ecx, [ebp+var_4] ; this
.text:00003C91                 call    ?Close@CThread@NWindows@@QAEIXZ ; NWindows::CThread::Close(void)
.text:00003C96                 add     esp, 4
.text:00003C99                 cmp     ebp, esp
.text:00003C9B                 call    __RTC_CheckEsp
.text:00003CA0                 mov     esp, ebp
.text:00003CA2                 pop     ebp
.text:00003CA3                 retn
.text:00003CA3 ??1CThread@NWindows@@QAE@XZ endp
.text:00003CA3
.text:00003CA3 _text           ends
.text:00003CA3
.text:00003CA4 ; ===========================================================================
.text:00003CA4
.text:00003CA4 ; Segment type: Pure code
.text:00003CA4 ; Segment permissions: Read/Execute
.text:00003CA4 _text           segment para public 'CODE' use32
.text:00003CA4                 assume cs:_text
.text:00003CA4                 ;org 3CA4h
.text:00003CA4 ; COMDAT (pick any)
.text:00003CA4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003CA4
.text:00003CA4 ; =============== S U B R O U T I N E =======================================
.text:00003CA4
.text:00003CA4 ; Attributes: bp-based frame
.text:00003CA4
.text:00003CA4 ; unsigned int __thiscall NWindows::CThread::Close(NWindows::CThread *__hidden this)
.text:00003CA4                 public ?Close@CThread@NWindows@@QAEIXZ
.text:00003CA4 ?Close@CThread@NWindows@@QAEIXZ proc near
.text:00003CA4                                         ; CODE XREF: NWindows::CThread::~CThread(void)+11p
.text:00003CA4
.text:00003CA4 var_4           = dword ptr -4
.text:00003CA4
.text:00003CA4                 push    ebp
.text:00003CA5                 mov     ebp, esp
.text:00003CA7                 push    ecx
.text:00003CA8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003CAF                 mov     [ebp+var_4], ecx
.text:00003CB2                 mov     eax, [ebp+var_4]
.text:00003CB5                 push    eax
.text:00003CB6                 call    _HandlePtr_Close@4 ; HandlePtr_Close(x)
.text:00003CBB                 add     esp, 4
.text:00003CBE                 cmp     ebp, esp
.text:00003CC0                 call    __RTC_CheckEsp
.text:00003CC5                 mov     esp, ebp
.text:00003CC7                 pop     ebp
.text:00003CC8                 retn
.text:00003CC8 ?Close@CThread@NWindows@@QAEIXZ endp
.text:00003CC8
.text:00003CC8 ; ---------------------------------------------------------------------------
.text:00003CC9                 align 4
.text:00003CC9 _text           ends
.text:00003CC9
.text:00003CCC ; ===========================================================================
.text:00003CCC
.text:00003CCC ; Segment type: Pure code
.text:00003CCC ; Segment permissions: Read/Execute
.text:00003CCC _text           segment para public 'CODE' use32
.text:00003CCC                 assume cs:_text
.text:00003CCC                 ;org 3CCCh
.text:00003CCC ; COMDAT (pick any)
.text:00003CCC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003CCC
.text:00003CCC ; =============== S U B R O U T I N E =======================================
.text:00003CCC
.text:00003CCC ; Attributes: bp-based frame
.text:00003CCC
.text:00003CCC ; _DWORD __thiscall NCompress::NBZip2::CThreadInfo::~CThreadInfo(NCompress::NBZip2::CThreadInfo *__hidden this)
.text:00003CCC                 public ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text:00003CCC ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ proc near
.text:00003CCC                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+52p
.text:00003CCC                                         ; DATA XREF: NCompress::NBZip2::CEncoder::Create(void)+12Ao ...
.text:00003CCC
.text:00003CCC var_10          = dword ptr -10h
.text:00003CCC var_C           = dword ptr -0Ch
.text:00003CCC var_4           = dword ptr -4
.text:00003CCC
.text:00003CCC                 push    ebp
.text:00003CCD                 mov     ebp, esp
.text:00003CCF                 push    0FFFFFFFFh
.text:00003CD1                 push    offset __ehhandler$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text:00003CD6                 mov     eax, large fs:0
.text:00003CDC                 push    eax
.text:00003CDD                 push    ecx
.text:00003CDE                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003CE5                 mov     eax, dword ptr ds:___security_cookie
.text:00003CEA                 xor     eax, ebp
.text:00003CEC                 push    eax
.text:00003CED                 lea     eax, [ebp+var_C]
.text:00003CF0                 mov     large fs:0, eax
.text:00003CF6                 mov     [ebp+var_10], ecx
.text:00003CF9                 mov     [ebp+var_4], 3
.text:00003D00                 mov     ecx, [ebp+var_10] ; this
.text:00003D03                 call    ?Free@CThreadInfo@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CThreadInfo::Free(void)
.text:00003D08                 mov     byte ptr [ebp+var_4], 2
.text:00003D0C                 mov     ecx, [ebp+var_10]
.text:00003D0F                 add     ecx, 8CF0h      ; this
.text:00003D15                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003D1A                 mov     byte ptr [ebp+var_4], 1
.text:00003D1E                 mov     ecx, [ebp+var_10]
.text:00003D21                 add     ecx, 8CECh      ; this
.text:00003D27                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003D2C                 mov     byte ptr [ebp+var_4], 0
.text:00003D30                 mov     ecx, [ebp+var_10]
.text:00003D33                 add     ecx, 8CE8h      ; this
.text:00003D39                 call    ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text:00003D3E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003D45                 mov     ecx, [ebp+var_10]
.text:00003D48                 add     ecx, 8CE4h      ; this
.text:00003D4E                 call    ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text:00003D53                 mov     ecx, [ebp+var_C]
.text:00003D56                 mov     large fs:0, ecx
.text:00003D5D                 pop     ecx
.text:00003D5E                 add     esp, 10h
.text:00003D61                 cmp     ebp, esp
.text:00003D63                 call    __RTC_CheckEsp
.text:00003D68                 mov     esp, ebp
.text:00003D6A                 pop     ebp
.text:00003D6B                 retn
.text:00003D6B ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ endp
.text:00003D6B
.text:00003D6B _text           ends
.text:00003D6B
.text$x:00003D6C ; ===========================================================================
.text$x:00003D6C
.text$x:00003D6C ; Segment type: Pure code
.text$x:00003D6C ; Segment permissions: Read/Execute
.text$x:00003D6C _text$x         segment para public 'CODE' use32
.text$x:00003D6C                 assume cs:_text$x
.text$x:00003D6C                 ;org 3D6Ch
.text$x:00003D6C ; COMDAT (pick associative to section at 3CCC)
.text$x:00003D6C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text$x:00003D6C
.text$x:00003D6C ; =============== S U B R O U T I N E =======================================
.text$x:00003D6C
.text$x:00003D6C
.text$x:00003D6C __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$0 proc near
.text$x:00003D6C                                         ; DATA XREF: .xdata$x:00003DC4o
.text$x:00003D6C                 mov     ecx, [ebp-10h]
.text$x:00003D6F                 add     ecx, 8CE4h      ; this
.text$x:00003D75                 jmp     ??1CThread@NWindows@@QAE@XZ ; NWindows::CThread::~CThread(void)
.text$x:00003D75 __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$0 endp
.text$x:00003D75
.text$x:00003D7A
.text$x:00003D7A ; =============== S U B R O U T I N E =======================================
.text$x:00003D7A
.text$x:00003D7A
.text$x:00003D7A __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$1 proc near
.text$x:00003D7A                                         ; DATA XREF: .xdata$x:00003DCCo
.text$x:00003D7A                 mov     ecx, [ebp-10h]
.text$x:00003D7D                 add     ecx, 8CE8h      ; this
.text$x:00003D83                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003D83 __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$1 endp
.text$x:00003D83
.text$x:00003D88
.text$x:00003D88 ; =============== S U B R O U T I N E =======================================
.text$x:00003D88
.text$x:00003D88
.text$x:00003D88 __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$2 proc near
.text$x:00003D88                                         ; DATA XREF: .xdata$x:00003DD4o
.text$x:00003D88                 mov     ecx, [ebp-10h]
.text$x:00003D8B                 add     ecx, 8CECh      ; this
.text$x:00003D91                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003D91 __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$2 endp
.text$x:00003D91
.text$x:00003D96
.text$x:00003D96 ; =============== S U B R O U T I N E =======================================
.text$x:00003D96
.text$x:00003D96
.text$x:00003D96 __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$3 proc near
.text$x:00003D96                                         ; DATA XREF: .xdata$x:00003DDCo
.text$x:00003D96                 mov     ecx, [ebp-10h]
.text$x:00003D99                 add     ecx, 8CF0h      ; this
.text$x:00003D9F                 jmp     ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(void)
.text$x:00003D9F __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$3 endp
.text$x:00003D9F
.text$x:00003DA4
.text$x:00003DA4 ; =============== S U B R O U T I N E =======================================
.text$x:00003DA4
.text$x:00003DA4
.text$x:00003DA4 __ehhandler$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ proc near
.text$x:00003DA4                                         ; DATA XREF: NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)+5o
.text$x:00003DA4
.text$x:00003DA4 arg_4           = dword ptr  8
.text$x:00003DA4
.text$x:00003DA4                 mov     edx, [esp+arg_4]
.text$x:00003DA8                 lea     eax, [edx+0Ch]
.text$x:00003DAB                 mov     ecx, [edx-8]
.text$x:00003DAE                 xor     ecx, eax
.text$x:00003DB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DB5                 mov     eax, offset __ehfuncinfo$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ
.text$x:00003DBA                 jmp     ___CxxFrameHandler3
.text$x:00003DBA __ehhandler$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ endp
.text$x:00003DBA
.text$x:00003DBA ; ---------------------------------------------------------------------------
.text$x:00003DBF                 align 10h
.text$x:00003DBF _text$x         ends
.text$x:00003DBF
.xdata$x:00003DC0 ; ===========================================================================
.xdata$x:00003DC0
.xdata$x:00003DC0 ; Segment type: Pure data
.xdata$x:00003DC0 ; Segment permissions: Read
.xdata$x:00003DC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003DC0                 assume cs:_xdata$x
.xdata$x:00003DC0                 ;org 3DC0h
.xdata$x:00003DC0 ; COMDAT (pick associative to section at 3CCC)
.xdata$x:00003DC0 __unwindtable$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ db 0FFh
.xdata$x:00003DC0                                         ; DATA XREF: .xdata$x:00003DE8o
.xdata$x:00003DC1                 db 0FFh
.xdata$x:00003DC2                 db 0FFh
.xdata$x:00003DC3                 db 0FFh
.xdata$x:00003DC4                 dd offset __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$0
.xdata$x:00003DC8                 db    0
.xdata$x:00003DC9                 db    0
.xdata$x:00003DCA                 db    0
.xdata$x:00003DCB                 db    0
.xdata$x:00003DCC                 dd offset __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$1
.xdata$x:00003DD0                 db    1
.xdata$x:00003DD1                 db    0
.xdata$x:00003DD2                 db    0
.xdata$x:00003DD3                 db    0
.xdata$x:00003DD4                 dd offset __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$2
.xdata$x:00003DD8                 db    2
.xdata$x:00003DD9                 db    0
.xdata$x:00003DDA                 db    0
.xdata$x:00003DDB                 db    0
.xdata$x:00003DDC                 dd offset __unwindfunclet$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ$3
.xdata$x:00003DE0 __ehfuncinfo$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ db  22h ; "
.xdata$x:00003DE0                                         ; DATA XREF: __ehhandler$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ+11o
.xdata$x:00003DE1                 db    5
.xdata$x:00003DE2                 db  93h ; ô
.xdata$x:00003DE3                 db  19h
.xdata$x:00003DE4                 db    4
.xdata$x:00003DE5                 db    0
.xdata$x:00003DE6                 db    0
.xdata$x:00003DE7                 db    0
.xdata$x:00003DE8                 dd offset __unwindtable$??1CThreadInfo@NBZip2@NCompress@@QAE@XZ
.xdata$x:00003DEC                 align 20h
.xdata$x:00003E00                 db    1
.xdata$x:00003E01                 db    0
.xdata$x:00003E02                 db    0
.xdata$x:00003E03                 db    0
.xdata$x:00003E03 _xdata$x        ends
.xdata$x:00003E03
.text:00003E04 ; ===========================================================================
.text:00003E04
.text:00003E04 ; Segment type: Pure code
.text:00003E04 ; Segment permissions: Read/Execute
.text:00003E04 _text           segment para public 'CODE' use32
.text:00003E04                 assume cs:_text
.text:00003E04                 ;org 3E04h
.text:00003E04 ; COMDAT (pick any)
.text:00003E04                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E04
.text:00003E04 ; =============== S U B R O U T I N E =======================================
.text:00003E04
.text:00003E04 ; Attributes: bp-based frame
.text:00003E04
.text:00003E04 ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00003E04                 public ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003E04 ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003E04                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::CThreadInfo(void)+5Ep
.text:00003E04                                         ; NCompress::NBZip2::CThreadInfo::CThreadInfo(void)+70p ...
.text:00003E04
.text:00003E04 var_4           = dword ptr -4
.text:00003E04
.text:00003E04                 push    ebp
.text:00003E05                 mov     ebp, esp
.text:00003E07                 push    ecx
.text:00003E08                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E0F                 mov     [ebp+var_4], ecx
.text:00003E12                 mov     ecx, [ebp+var_4] ; this
.text:00003E15                 call    ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent(void)
.text:00003E1A                 mov     eax, [ebp+var_4]
.text:00003E1D                 add     esp, 4
.text:00003E20                 cmp     ebp, esp
.text:00003E22                 call    __RTC_CheckEsp
.text:00003E27                 mov     esp, ebp
.text:00003E29                 pop     ebp
.text:00003E2A                 retn
.text:00003E2A ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003E2A
.text:00003E2A ; ---------------------------------------------------------------------------
.text:00003E2B                 align 4
.text:00003E2B _text           ends
.text:00003E2B
.text:00003E2C ; ===========================================================================
.text:00003E2C
.text:00003E2C ; Segment type: Pure code
.text:00003E2C ; Segment permissions: Read/Execute
.text:00003E2C _text           segment para public 'CODE' use32
.text:00003E2C                 assume cs:_text
.text:00003E2C                 ;org 3E2Ch
.text:00003E2C ; COMDAT (pick any)
.text:00003E2C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E2C
.text:00003E2C ; =============== S U B R O U T I N E =======================================
.text:00003E2C
.text:00003E2C ; Attributes: bp-based frame
.text:00003E2C
.text:00003E2C ; _DWORD __thiscall NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent(NWindows::NSynchronization::CAutoResetEvent *__hidden this)
.text:00003E2C                 public ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
.text:00003E2C ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ proc near
.text:00003E2C                                         ; CODE XREF: __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$1+9j
.text:00003E2C                                         ; __unwindfunclet$??0CThreadInfo@NBZip2@NCompress@@QAE@XZ$2+9j ...
.text:00003E2C
.text:00003E2C var_4           = dword ptr -4
.text:00003E2C
.text:00003E2C                 push    ebp
.text:00003E2D                 mov     ebp, esp
.text:00003E2F                 push    ecx
.text:00003E30                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E37                 mov     [ebp+var_4], ecx
.text:00003E3A                 mov     ecx, [ebp+var_4] ; this
.text:00003E3D                 call    ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent(void)
.text:00003E42                 add     esp, 4
.text:00003E45                 cmp     ebp, esp
.text:00003E47                 call    __RTC_CheckEsp
.text:00003E4C                 mov     esp, ebp
.text:00003E4E                 pop     ebp
.text:00003E4F                 retn
.text:00003E4F ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ endp
.text:00003E4F
.text:00003E4F _text           ends
.text:00003E4F
.text:00003E50 ; ===========================================================================
.text:00003E50
.text:00003E50 ; Segment type: Pure code
.text:00003E50 ; Segment permissions: Read/Execute
.text:00003E50 _text           segment para public 'CODE' use32
.text:00003E50                 assume cs:_text
.text:00003E50                 ;org 3E50h
.text:00003E50 ; COMDAT (pick any)
.text:00003E50                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003E50
.text:00003E50 ; =============== S U B R O U T I N E =======================================
.text:00003E50
.text:00003E50 ; Attributes: bp-based frame
.text:00003E50
.text:00003E50 ; public: void * __thiscall NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(unsigned int)
.text:00003E50                 public ??_ECThreadInfo@NBZip2@NCompress@@QAEPAXI@Z
.text:00003E50 ??_ECThreadInfo@NBZip2@NCompress@@QAEPAXI@Z proc near
.text:00003E50                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+C1p
.text:00003E50
.text:00003E50 var_4           = dword ptr -4
.text:00003E50 arg_0           = dword ptr  8
.text:00003E50
.text:00003E50                 push    ebp
.text:00003E51                 mov     ebp, esp
.text:00003E53                 push    ecx
.text:00003E54                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E5B                 mov     [ebp+var_4], ecx
.text:00003E5E                 mov     eax, [ebp+arg_0]
.text:00003E61                 and     eax, 2
.text:00003E64                 jz      short loc_3E9F
.text:00003E66                 push    offset ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)
.text:00003E6B                 mov     ecx, [ebp+var_4]
.text:00003E6E                 mov     edx, [ecx-4]
.text:00003E71                 push    edx
.text:00003E72                 push    8E00h
.text:00003E77                 mov     eax, [ebp+var_4]
.text:00003E7A                 push    eax
.text:00003E7B                 call    ??_M@YGXPAXIHP6EX0@Z@Z ; `eh vector destructor iterator'(void *,uint,int,void (*)(void *))
.text:00003E80                 mov     ecx, [ebp+arg_0]
.text:00003E83                 and     ecx, 1
.text:00003E86                 jz      short loc_3E97
.text:00003E88                 mov     edx, [ebp+var_4]
.text:00003E8B                 sub     edx, 4
.text:00003E8E                 push    edx             ; void *
.text:00003E8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003E94                 add     esp, 4
.text:00003E97
.text:00003E97 loc_3E97:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+36j
.text:00003E97                 mov     eax, [ebp+var_4]
.text:00003E9A                 sub     eax, 4
.text:00003E9D                 jmp     short loc_3EBE
.text:00003E9F ; ---------------------------------------------------------------------------
.text:00003E9F
.text:00003E9F loc_3E9F:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+14j
.text:00003E9F                 mov     ecx, [ebp+var_4] ; this
.text:00003EA2                 call    ??1CThreadInfo@NBZip2@NCompress@@QAE@XZ ; NCompress::NBZip2::CThreadInfo::~CThreadInfo(void)
.text:00003EA7                 mov     eax, [ebp+arg_0]
.text:00003EAA                 and     eax, 1
.text:00003EAD                 jz      short loc_3EBB
.text:00003EAF                 mov     ecx, [ebp+var_4]
.text:00003EB2                 push    ecx             ; void *
.text:00003EB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003EB8                 add     esp, 4
.text:00003EBB
.text:00003EBB loc_3EBB:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+5Dj
.text:00003EBB                 mov     eax, [ebp+var_4]
.text:00003EBE
.text:00003EBE loc_3EBE:                               ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+4Dj
.text:00003EBE                 add     esp, 4
.text:00003EC1                 cmp     ebp, esp
.text:00003EC3                 call    __RTC_CheckEsp
.text:00003EC8                 mov     esp, ebp
.text:00003ECA                 pop     ebp
.text:00003ECB                 retn    4
.text:00003ECB ??_ECThreadInfo@NBZip2@NCompress@@QAEPAXI@Z endp
.text:00003ECB
.text:00003ECB ; ---------------------------------------------------------------------------
.text:00003ECE                 align 10h
.text:00003ECE _text           ends
.text:00003ECE
.text:00003ED0 ; ===========================================================================
.text:00003ED0
.text:00003ED0 ; Segment type: Pure code
.text:00003ED0 ; Segment permissions: Read/Execute
.text:00003ED0 _text           segment para public 'CODE' use32
.text:00003ED0                 assume cs:_text
.text:00003ED0                 ;org 3ED0h
.text:00003ED0 ; COMDAT (pick any)
.text:00003ED0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003ED0
.text:00003ED0 ; =============== S U B R O U T I N E =======================================
.text:00003ED0
.text:00003ED0 ; Attributes: bp-based frame
.text:00003ED0
.text:00003ED0 ; unsigned int __thiscall NWindows::CThread::Wait(NWindows::CThread *__hidden this)
.text:00003ED0                 public ?Wait@CThread@NWindows@@QAEIXZ
.text:00003ED0 ?Wait@CThread@NWindows@@QAEIXZ proc near
.text:00003ED0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Free(void)+95p
.text:00003ED0
.text:00003ED0 var_4           = dword ptr -4
.text:00003ED0
.text:00003ED0                 push    ebp
.text:00003ED1                 mov     ebp, esp
.text:00003ED3                 push    ecx
.text:00003ED4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003EDB                 mov     [ebp+var_4], ecx
.text:00003EDE                 mov     eax, [ebp+var_4]
.text:00003EE1                 mov     ecx, [eax]
.text:00003EE3                 push    ecx
.text:00003EE4                 call    _Handle_WaitObject@4 ; Handle_WaitObject(x)
.text:00003EE9                 add     esp, 4
.text:00003EEC                 cmp     ebp, esp
.text:00003EEE                 call    __RTC_CheckEsp
.text:00003EF3                 mov     esp, ebp
.text:00003EF5                 pop     ebp
.text:00003EF6                 retn
.text:00003EF6 ?Wait@CThread@NWindows@@QAEIXZ endp
.text:00003EF6
.text:00003EF6 ; ---------------------------------------------------------------------------
.text:00003EF7                 align 4
.text:00003EF7 _text           ends
.text:00003EF7
.text:00003EF8 ; ===========================================================================
.text:00003EF8
.text:00003EF8 ; Segment type: Pure code
.text:00003EF8 ; Segment permissions: Read/Execute
.text:00003EF8 _text           segment para public 'CODE' use32
.text:00003EF8                 assume cs:_text
.text:00003EF8                 ;org 3EF8h
.text:00003EF8 ; COMDAT (pick any)
.text:00003EF8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003EF8
.text:00003EF8 ; =============== S U B R O U T I N E =======================================
.text:00003EF8
.text:00003EF8 ; Attributes: bp-based frame
.text:00003EF8
.text:00003EF8 ; bool __thiscall CInBufferBase::ReadByte(CInBufferBase *this, unsigned __int8 *)
.text:00003EF8                 public ?ReadByte@CInBufferBase@@QAE_NAAE@Z
.text:00003EF8 ?ReadByte@CInBufferBase@@QAE_NAAE@Z proc near
.text:00003EF8                                         ; CODE XREF: NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+2Cp
.text:00003EF8                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+82p
.text:00003EF8
.text:00003EF8 var_4           = dword ptr -4
.text:00003EF8 arg_0           = dword ptr  8
.text:00003EF8
.text:00003EF8                 push    ebp
.text:00003EF9                 mov     ebp, esp
.text:00003EFB                 push    ecx
.text:00003EFC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F03                 mov     [ebp+var_4], ecx
.text:00003F06                 mov     eax, [ebp+var_4]
.text:00003F09                 mov     ecx, [ebp+var_4]
.text:00003F0C                 mov     edx, [eax]
.text:00003F0E                 cmp     edx, [ecx+4]
.text:00003F11                 jb      short loc_3F21
.text:00003F13                 mov     eax, [ebp+arg_0]
.text:00003F16                 push    eax             ; unsigned __int8 *
.text:00003F17                 mov     ecx, [ebp+var_4] ; this
.text:00003F1A                 call    ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z ; CInBufferBase::ReadByte_FromNewBlock(uchar &)
.text:00003F1F                 jmp     short loc_3F3C
.text:00003F21 ; ---------------------------------------------------------------------------
.text:00003F21
.text:00003F21 loc_3F21:                               ; CODE XREF: CInBufferBase::ReadByte(uchar &)+19j
.text:00003F21                 mov     ecx, [ebp+var_4]
.text:00003F24                 mov     edx, [ecx]
.text:00003F26                 mov     eax, [ebp+arg_0]
.text:00003F29                 mov     cl, [edx]
.text:00003F2B                 mov     [eax], cl
.text:00003F2D                 mov     edx, [ebp+var_4]
.text:00003F30                 mov     eax, [edx]
.text:00003F32                 add     eax, 1
.text:00003F35                 mov     ecx, [ebp+var_4]
.text:00003F38                 mov     [ecx], eax
.text:00003F3A                 mov     al, 1
.text:00003F3C
.text:00003F3C loc_3F3C:                               ; CODE XREF: CInBufferBase::ReadByte(uchar &)+27j
.text:00003F3C                 add     esp, 4
.text:00003F3F                 cmp     ebp, esp
.text:00003F41                 call    __RTC_CheckEsp
.text:00003F46                 mov     esp, ebp
.text:00003F48                 pop     ebp
.text:00003F49                 retn    4
.text:00003F49 ?ReadByte@CInBufferBase@@QAE_NAAE@Z endp
.text:00003F49
.text:00003F49 _text           ends
.text:00003F49
.text:00003F4C ; ===========================================================================
.text:00003F4C
.text:00003F4C ; Segment type: Pure code
.text:00003F4C ; Segment permissions: Read/Execute
.text:00003F4C _text           segment para public 'CODE' use32
.text:00003F4C                 assume cs:_text
.text:00003F4C                 ;org 3F4Ch
.text:00003F4C ; COMDAT (pick any)
.text:00003F4C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00003F4C
.text:00003F4C ; =============== S U B R O U T I N E =======================================
.text:00003F4C
.text:00003F4C ; Attributes: bp-based frame
.text:00003F4C
.text:00003F4C ; void __thiscall NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(NCompress::NBZip2::CMsbfEncoderTemp *this, unsigned int, unsigned int)
.text:00003F4C                 public ?WriteBits@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXII@Z
.text:00003F4C ?WriteBits@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXII@Z proc near
.text:00003F4C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::WriteBits2(uint,uint)+1Cp
.text:00003F4C                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F14p
.text:00003F4C
.text:00003F4C var_C           = dword ptr -0Ch
.text:00003F4C var_8           = dword ptr -8
.text:00003F4C var_4           = dword ptr -4
.text:00003F4C arg_0           = dword ptr  8
.text:00003F4C arg_4           = dword ptr  0Ch
.text:00003F4C
.text:00003F4C                 push    ebp
.text:00003F4D                 mov     ebp, esp
.text:00003F4F                 sub     esp, 0Ch
.text:00003F52                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00003F59                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003F60                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003F67                 mov     [ebp+var_4], ecx
.text:00003F6A
.text:00003F6A loc_3F6A:                               ; CODE XREF: NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint):loc_4012j
.text:00003F6A                 cmp     [ebp+arg_4], 0
.text:00003F6E                 jbe     loc_4017
.text:00003F74                 mov     eax, [ebp+var_4]
.text:00003F77                 mov     ecx, [eax+4]
.text:00003F7A                 push    ecx
.text:00003F7B                 mov     edx, [ebp+arg_4]
.text:00003F7E                 push    edx
.text:00003F7F                 call    ??$MyMin@I@@YGIII@Z ; MyMin<uint>(uint,uint)
.text:00003F84                 mov     [ebp+var_8], eax
.text:00003F87                 mov     eax, [ebp+arg_4]
.text:00003F8A                 sub     eax, [ebp+var_8]
.text:00003F8D                 mov     [ebp+arg_4], eax
.text:00003F90                 mov     ecx, [ebp+var_4]
.text:00003F93                 mov     dl, [ecx+8]
.text:00003F96                 mov     cl, byte ptr [ebp+var_8]
.text:00003F99                 shl     dl, cl
.text:00003F9B                 mov     eax, [ebp+var_4]
.text:00003F9E                 mov     [eax+8], dl
.text:00003FA1                 mov     edx, [ebp+arg_0]
.text:00003FA4                 mov     ecx, [ebp+arg_4]
.text:00003FA7                 shr     edx, cl
.text:00003FA9                 mov     [ebp+var_C], edx
.text:00003FAC                 movzx   eax, byte ptr [ebp+var_C]
.text:00003FB0                 mov     ecx, [ebp+var_4]
.text:00003FB3                 movzx   edx, byte ptr [ecx+8]
.text:00003FB7                 or      edx, eax
.text:00003FB9                 mov     eax, [ebp+var_4]
.text:00003FBC                 mov     [eax+8], dl
.text:00003FBF                 mov     edx, [ebp+var_C]
.text:00003FC2                 mov     ecx, [ebp+arg_4]
.text:00003FC5                 shl     edx, cl
.text:00003FC7                 mov     eax, [ebp+arg_0]
.text:00003FCA                 sub     eax, edx
.text:00003FCC                 mov     [ebp+arg_0], eax
.text:00003FCF                 mov     ecx, [ebp+var_4]
.text:00003FD2                 mov     edx, [ecx+4]
.text:00003FD5                 sub     edx, [ebp+var_8]
.text:00003FD8                 mov     eax, [ebp+var_4]
.text:00003FDB                 mov     [eax+4], edx
.text:00003FDE                 mov     ecx, [ebp+var_4]
.text:00003FE1                 cmp     dword ptr [ecx+4], 0
.text:00003FE5                 jnz     short loc_4012
.text:00003FE7                 mov     edx, [ebp+var_4]
.text:00003FEA                 mov     eax, [edx+0Ch]
.text:00003FED                 mov     ecx, [ebp+var_4]
.text:00003FF0                 mov     edx, [ecx]
.text:00003FF2                 mov     ecx, [ebp+var_4]
.text:00003FF5                 mov     cl, [ecx+8]
.text:00003FF8                 mov     [eax+edx], cl
.text:00003FFB                 mov     edx, [ebp+var_4]
.text:00003FFE                 mov     eax, [edx]
.text:00004000                 add     eax, 1
.text:00004003                 mov     ecx, [ebp+var_4]
.text:00004006                 mov     [ecx], eax
.text:00004008                 mov     edx, [ebp+var_4]
.text:0000400B                 mov     dword ptr [edx+4], 8
.text:00004012
.text:00004012 loc_4012:                               ; CODE XREF: NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint)+99j
.text:00004012                 jmp     loc_3F6A
.text:00004017 ; ---------------------------------------------------------------------------
.text:00004017
.text:00004017 loc_4017:                               ; CODE XREF: NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint)+22j
.text:00004017                 add     esp, 0Ch
.text:0000401A                 cmp     ebp, esp
.text:0000401C                 call    __RTC_CheckEsp
.text:00004021                 mov     esp, ebp
.text:00004023                 pop     ebp
.text:00004024                 retn    8
.text:00004024 ?WriteBits@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXII@Z endp
.text:00004024
.text:00004024 ; ---------------------------------------------------------------------------
.text:00004027                 align 4
.text:00004027 _text           ends
.text:00004027
.text:00004028 ; ===========================================================================
.text:00004028
.text:00004028 ; Segment type: Pure code
.text:00004028 ; Segment permissions: Read/Execute
.text:00004028 _text           segment para public 'CODE' use32
.text:00004028                 assume cs:_text
.text:00004028                 ;org 4028h
.text:00004028 ; COMDAT (pick any)
.text:00004028                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004028
.text:00004028 ; =============== S U B R O U T I N E =======================================
.text:00004028
.text:00004028 ; Attributes: bp-based frame
.text:00004028
.text:00004028 ; unsigned int __thiscall NCompress::NBZip2::CMsbfEncoderTemp::GetPos(NCompress::NBZip2::CMsbfEncoderTemp *__hidden this)
.text:00004028                 public ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ
.text:00004028 ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ proc near
.text:00004028                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+57Dp
.text:00004028                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F41p ...
.text:00004028
.text:00004028 var_4           = dword ptr -4
.text:00004028
.text:00004028                 push    ebp
.text:00004029                 mov     ebp, esp
.text:0000402B                 push    ecx
.text:0000402C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004033                 mov     [ebp+var_4], ecx
.text:00004036                 mov     eax, [ebp+var_4]
.text:00004039                 mov     ecx, [eax]
.text:0000403B                 mov     edx, [ebp+var_4]
.text:0000403E                 mov     eax, 8
.text:00004043                 sub     eax, [edx+4]
.text:00004046                 lea     eax, [eax+ecx*8]
.text:00004049                 mov     esp, ebp
.text:0000404B                 pop     ebp
.text:0000404C                 retn
.text:0000404C ?GetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ endp
.text:0000404C
.text:0000404C ; ---------------------------------------------------------------------------
.text:0000404D                 align 10h
.text:0000404D _text           ends
.text:0000404D
.text:00004050 ; ===========================================================================
.text:00004050
.text:00004050 ; Segment type: Pure code
.text:00004050 ; Segment permissions: Read/Execute
.text:00004050 _text           segment para public 'CODE' use32
.text:00004050                 assume cs:_text
.text:00004050                 ;org 4050h
.text:00004050 ; COMDAT (pick any)
.text:00004050                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004050
.text:00004050 ; =============== S U B R O U T I N E =======================================
.text:00004050
.text:00004050 ; Attributes: bp-based frame
.text:00004050
.text:00004050 ; unsigned __int8 __thiscall NCompress::NBZip2::CMsbfEncoderTemp::GetCurByte(NCompress::NBZip2::CMsbfEncoderTemp *__hidden this)
.text:00004050                 public ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ
.text:00004050 ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ proc near
.text:00004050                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+58Ep
.text:00004050                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+4Ep ...
.text:00004050
.text:00004050 var_4           = dword ptr -4
.text:00004050
.text:00004050                 push    ebp
.text:00004051                 mov     ebp, esp
.text:00004053                 push    ecx
.text:00004054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000405B                 mov     [ebp+var_4], ecx
.text:0000405E                 mov     eax, [ebp+var_4]
.text:00004061                 mov     al, [eax+8]
.text:00004064                 mov     esp, ebp
.text:00004066                 pop     ebp
.text:00004067                 retn
.text:00004067 ?GetCurByte@CMsbfEncoderTemp@NBZip2@NCompress@@QBEEXZ endp
.text:00004067
.text:00004067 _text           ends
.text:00004067
.text:00004068 ; ===========================================================================
.text:00004068
.text:00004068 ; Segment type: Pure code
.text:00004068 ; Segment permissions: Read/Execute
.text:00004068 _text           segment para public 'CODE' use32
.text:00004068                 assume cs:_text
.text:00004068                 ;org 4068h
.text:00004068 ; COMDAT (pick any)
.text:00004068                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004068
.text:00004068 ; =============== S U B R O U T I N E =======================================
.text:00004068
.text:00004068 ; Attributes: bp-based frame
.text:00004068
.text:00004068 ; void __thiscall NCompress::NBZip2::CMsbfEncoderTemp::SetPos(NCompress::NBZip2::CMsbfEncoderTemp *this, unsigned int)
.text:00004068                 public ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z
.text:00004068 ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z proc near
.text:00004068                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+5DCp
.text:00004068                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+21Fp ...
.text:00004068
.text:00004068 var_4           = dword ptr -4
.text:00004068 arg_0           = dword ptr  8
.text:00004068
.text:00004068                 push    ebp
.text:00004069                 mov     ebp, esp
.text:0000406B                 push    ecx
.text:0000406C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004073                 mov     [ebp+var_4], ecx
.text:00004076                 mov     eax, [ebp+arg_0]
.text:00004079                 shr     eax, 3
.text:0000407C                 mov     ecx, [ebp+var_4]
.text:0000407F                 mov     [ecx], eax
.text:00004081                 mov     edx, [ebp+arg_0]
.text:00004084                 and     edx, 7
.text:00004087                 mov     eax, 8
.text:0000408C                 sub     eax, edx
.text:0000408E                 mov     ecx, [ebp+var_4]
.text:00004091                 mov     [ecx+4], eax
.text:00004094                 mov     esp, ebp
.text:00004096                 pop     ebp
.text:00004097                 retn    4
.text:00004097 ?SetPos@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXI@Z endp
.text:00004097
.text:00004097 ; ---------------------------------------------------------------------------
.text:0000409A                 align 4
.text:0000409A _text           ends
.text:0000409A
.text:0000409C ; ===========================================================================
.text:0000409C
.text:0000409C ; Segment type: Pure code
.text:0000409C ; Segment permissions: Read/Execute
.text:0000409C _text           segment para public 'CODE' use32
.text:0000409C                 assume cs:_text
.text:0000409C                 ;org 409Ch
.text:0000409C ; COMDAT (pick any)
.text:0000409C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000409C
.text:0000409C ; =============== S U B R O U T I N E =======================================
.text:0000409C
.text:0000409C ; Attributes: bp-based frame
.text:0000409C
.text:0000409C ; void __thiscall NCompress::NBZip2::CMsbfEncoderTemp::SetCurState(NCompress::NBZip2::CMsbfEncoderTemp *this, unsigned int, unsigned __int8)
.text:0000409C                 public ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z
.text:0000409C ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z proc near
.text:0000409C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+5F9p
.text:0000409C                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+152p ...
.text:0000409C
.text:0000409C var_4           = dword ptr -4
.text:0000409C arg_0           = dword ptr  8
.text:0000409C arg_4           = byte ptr  0Ch
.text:0000409C
.text:0000409C                 push    ebp
.text:0000409D                 mov     ebp, esp
.text:0000409F                 push    ecx
.text:000040A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040A7                 mov     [ebp+var_4], ecx
.text:000040AA                 mov     eax, 8
.text:000040AF                 sub     eax, [ebp+arg_0]
.text:000040B2                 mov     ecx, [ebp+var_4]
.text:000040B5                 mov     [ecx+4], eax
.text:000040B8                 mov     edx, [ebp+var_4]
.text:000040BB                 mov     al, [ebp+arg_4]
.text:000040BE                 mov     [edx+8], al
.text:000040C1                 mov     esp, ebp
.text:000040C3                 pop     ebp
.text:000040C4                 retn    8
.text:000040C4 ?SetCurState@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXIE@Z endp
.text:000040C4
.text:000040C4 ; ---------------------------------------------------------------------------
.text:000040C7                 align 4
.text:000040C7 _text           ends
.text:000040C7
.text:000040C8 ; ===========================================================================
.text:000040C8
.text:000040C8 ; Segment type: Pure code
.text:000040C8 ; Segment permissions: Read/Execute
.text:000040C8 _text           segment para public 'CODE' use32
.text:000040C8                 assume cs:_text
.text:000040C8                 ;org 40C8h
.text:000040C8 ; COMDAT (pick any)
.text:000040C8                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000040C8
.text:000040C8 ; =============== S U B R O U T I N E =======================================
.text:000040C8
.text:000040C8 ; Attributes: bp-based frame
.text:000040C8
.text:000040C8 ; unsigned int __thiscall NCompress::CMtf8Encoder::FindAndMove(NCompress::CMtf8Encoder *this, unsigned __int8)
.text:000040C8                 public ?FindAndMove@CMtf8Encoder@NCompress@@QAEIE@Z
.text:000040C8 ?FindAndMove@CMtf8Encoder@NCompress@@QAEIE@Z proc near
.text:000040C8                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+2BFp
.text:000040C8
.text:000040C8 var_C           = dword ptr -0Ch
.text:000040C8 var_8           = dword ptr -8
.text:000040C8 var_4           = dword ptr -4
.text:000040C8 arg_0           = byte ptr  8
.text:000040C8
.text:000040C8                 push    ebp
.text:000040C9                 mov     ebp, esp
.text:000040CB                 sub     esp, 0Ch
.text:000040CE                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000040D5                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000040DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000040E3                 mov     [ebp+var_4], ecx
.text:000040E6                 mov     [ebp+var_8], 0
.text:000040ED                 jmp     short loc_40F8
.text:000040EF ; ---------------------------------------------------------------------------
.text:000040EF
.text:000040EF loc_40EF:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+41j
.text:000040EF                 mov     eax, [ebp+var_8]
.text:000040F2                 add     eax, 1
.text:000040F5                 mov     [ebp+var_8], eax
.text:000040F8
.text:000040F8 loc_40F8:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+25j
.text:000040F8                 mov     ecx, [ebp+var_4]
.text:000040FB                 add     ecx, [ebp+var_8]
.text:000040FE                 movzx   edx, byte ptr [ecx]
.text:00004101                 movzx   eax, [ebp+arg_0]
.text:00004105                 cmp     edx, eax
.text:00004107                 jz      short loc_410B
.text:00004109                 jmp     short loc_40EF
.text:0000410B ; ---------------------------------------------------------------------------
.text:0000410B
.text:0000410B loc_410B:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+3Fj
.text:0000410B                 mov     ecx, [ebp+var_8]
.text:0000410E                 mov     [ebp+var_C], ecx
.text:00004111                 jmp     short loc_411C
.text:00004113 ; ---------------------------------------------------------------------------
.text:00004113
.text:00004113 loc_4113:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+EDj
.text:00004113                 mov     edx, [ebp+var_8]
.text:00004116                 sub     edx, 8
.text:00004119                 mov     [ebp+var_8], edx
.text:0000411C
.text:0000411C loc_411C:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+49j
.text:0000411C                 cmp     [ebp+var_8], 8
.text:00004120                 jb      loc_41BA
.text:00004126                 mov     eax, [ebp+var_4]
.text:00004129                 add     eax, [ebp+var_8]
.text:0000412C                 mov     ecx, [ebp+var_4]
.text:0000412F                 add     ecx, [ebp+var_8]
.text:00004132                 mov     dl, [ecx-1]
.text:00004135                 mov     [eax], dl
.text:00004137                 mov     eax, [ebp+var_4]
.text:0000413A                 add     eax, [ebp+var_8]
.text:0000413D                 mov     ecx, [ebp+var_4]
.text:00004140                 add     ecx, [ebp+var_8]
.text:00004143                 mov     dl, [ecx-2]
.text:00004146                 mov     [eax-1], dl
.text:00004149                 mov     eax, [ebp+var_4]
.text:0000414C                 add     eax, [ebp+var_8]
.text:0000414F                 mov     ecx, [ebp+var_4]
.text:00004152                 add     ecx, [ebp+var_8]
.text:00004155                 mov     dl, [ecx-3]
.text:00004158                 mov     [eax-2], dl
.text:0000415B                 mov     eax, [ebp+var_4]
.text:0000415E                 add     eax, [ebp+var_8]
.text:00004161                 mov     ecx, [ebp+var_4]
.text:00004164                 add     ecx, [ebp+var_8]
.text:00004167                 mov     dl, [ecx-4]
.text:0000416A                 mov     [eax-3], dl
.text:0000416D                 mov     eax, [ebp+var_4]
.text:00004170                 add     eax, [ebp+var_8]
.text:00004173                 mov     ecx, [ebp+var_4]
.text:00004176                 add     ecx, [ebp+var_8]
.text:00004179                 mov     dl, [ecx-5]
.text:0000417C                 mov     [eax-4], dl
.text:0000417F                 mov     eax, [ebp+var_4]
.text:00004182                 add     eax, [ebp+var_8]
.text:00004185                 mov     ecx, [ebp+var_4]
.text:00004188                 add     ecx, [ebp+var_8]
.text:0000418B                 mov     dl, [ecx-6]
.text:0000418E                 mov     [eax-5], dl
.text:00004191                 mov     eax, [ebp+var_4]
.text:00004194                 add     eax, [ebp+var_8]
.text:00004197                 mov     ecx, [ebp+var_4]
.text:0000419A                 add     ecx, [ebp+var_8]
.text:0000419D                 mov     dl, [ecx-7]
.text:000041A0                 mov     [eax-6], dl
.text:000041A3                 mov     eax, [ebp+var_4]
.text:000041A6                 add     eax, [ebp+var_8]
.text:000041A9                 mov     ecx, [ebp+var_4]
.text:000041AC                 add     ecx, [ebp+var_8]
.text:000041AF                 mov     dl, [ecx-8]
.text:000041B2                 mov     [eax-7], dl
.text:000041B5                 jmp     loc_4113
.text:000041BA ; ---------------------------------------------------------------------------
.text:000041BA
.text:000041BA loc_41BA:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+58j
.text:000041BA                 jmp     short loc_41C5
.text:000041BC ; ---------------------------------------------------------------------------
.text:000041BC
.text:000041BC loc_41BC:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+114j
.text:000041BC                 mov     eax, [ebp+var_8]
.text:000041BF                 sub     eax, 1
.text:000041C2                 mov     [ebp+var_8], eax
.text:000041C5
.text:000041C5 loc_41C5:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar):loc_41BAj
.text:000041C5                 cmp     [ebp+var_8], 0
.text:000041C9                 jz      short loc_41DE
.text:000041CB                 mov     ecx, [ebp+var_4]
.text:000041CE                 add     ecx, [ebp+var_8]
.text:000041D1                 mov     edx, [ebp+var_4]
.text:000041D4                 add     edx, [ebp+var_8]
.text:000041D7                 mov     al, [edx-1]
.text:000041DA                 mov     [ecx], al
.text:000041DC                 jmp     short loc_41BC
.text:000041DE ; ---------------------------------------------------------------------------
.text:000041DE
.text:000041DE loc_41DE:                               ; CODE XREF: NCompress::CMtf8Encoder::FindAndMove(uchar)+101j
.text:000041DE                 mov     ecx, [ebp+var_4]
.text:000041E1                 mov     dl, [ebp+arg_0]
.text:000041E4                 mov     [ecx], dl
.text:000041E6                 mov     eax, [ebp+var_C]
.text:000041E9                 mov     esp, ebp
.text:000041EB                 pop     ebp
.text:000041EC                 retn    4
.text:000041EC ?FindAndMove@CMtf8Encoder@NCompress@@QAEIE@Z endp
.text:000041EC
.text:000041EC ; ---------------------------------------------------------------------------
.text:000041EF                 align 10h
.text:000041EF _text           ends
.text:000041EF
.text:000041F0 ; ===========================================================================
.text:000041F0
.text:000041F0 ; Segment type: Pure code
.text:000041F0 ; Segment permissions: Read/Execute
.text:000041F0 _text           segment para public 'CODE' use32
.text:000041F0                 assume cs:_text
.text:000041F0                 ;org 41F0h
.text:000041F0 ; COMDAT (pick any)
.text:000041F0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000041F0
.text:000041F0 ; =============== S U B R O U T I N E =======================================
.text:000041F0
.text:000041F0 ; Attributes: bp-based frame
.text:000041F0
.text:000041F0 ; _DWORD __thiscall CBZip2Crc::CBZip2Crc(CBZip2Crc *__hidden this)
.text:000041F0                 public ??0CBZip2Crc@@QAE@XZ
.text:000041F0 ??0CBZip2Crc@@QAE@XZ proc near          ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+68p
.text:000041F0
.text:000041F0 var_4           = dword ptr -4
.text:000041F0
.text:000041F0                 push    ebp
.text:000041F1                 mov     ebp, esp
.text:000041F3                 push    ecx
.text:000041F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041FB                 mov     [ebp+var_4], ecx
.text:000041FE                 mov     eax, [ebp+var_4]
.text:00004201                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00004207                 mov     eax, [ebp+var_4]
.text:0000420A                 mov     esp, ebp
.text:0000420C                 pop     ebp
.text:0000420D                 retn
.text:0000420D ??0CBZip2Crc@@QAE@XZ endp
.text:0000420D
.text:0000420D ; ---------------------------------------------------------------------------
.text:0000420E                 align 10h
.text:0000420E _text           ends
.text:0000420E
.text:00004210 ; ===========================================================================
.text:00004210
.text:00004210 ; Segment type: Pure code
.text:00004210 ; Segment permissions: Read/Execute
.text:00004210 _text           segment para public 'CODE' use32
.text:00004210                 assume cs:_text
.text:00004210                 ;org 4210h
.text:00004210 ; COMDAT (pick any)
.text:00004210                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004210
.text:00004210 ; =============== S U B R O U T I N E =======================================
.text:00004210
.text:00004210 ; Attributes: bp-based frame
.text:00004210
.text:00004210 ; void __thiscall CBZip2Crc::UpdateByte(CBZip2Crc *this, unsigned __int8)
.text:00004210                 public ?UpdateByte@CBZip2Crc@@QAEXE@Z
.text:00004210 ?UpdateByte@CBZip2Crc@@QAEXE@Z proc near
.text:00004210                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+AFp
.text:00004210                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+EBp
.text:00004210
.text:00004210 var_4           = dword ptr -4
.text:00004210 arg_0           = byte ptr  8
.text:00004210
.text:00004210                 push    ebp
.text:00004211                 mov     ebp, esp
.text:00004213                 push    ecx
.text:00004214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000421B                 mov     [ebp+var_4], ecx
.text:0000421E                 mov     eax, [ebp+var_4]
.text:00004221                 mov     ecx, [eax]
.text:00004223                 shr     ecx, 18h
.text:00004226                 movzx   edx, [ebp+arg_0]
.text:0000422A                 xor     ecx, edx
.text:0000422C                 mov     eax, [ebp+var_4]
.text:0000422F                 mov     edx, [eax]
.text:00004231                 shl     edx, 8
.text:00004234                 xor     edx, dword ptr ds:?Table@CBZip2Crc@@0PAIA[ecx*4] ; uint * CBZip2Crc::Table
.text:0000423B                 mov     eax, [ebp+var_4]
.text:0000423E                 mov     [eax], edx
.text:00004240                 mov     esp, ebp
.text:00004242                 pop     ebp
.text:00004243                 retn    4
.text:00004243 ?UpdateByte@CBZip2Crc@@QAEXE@Z endp
.text:00004243
.text:00004243 ; ---------------------------------------------------------------------------
.text:00004246                 align 4
.text:00004246 _text           ends
.text:00004246
.text:00004248 ; ===========================================================================
.text:00004248
.text:00004248 ; Segment type: Pure code
.text:00004248 ; Segment permissions: Read/Execute
.text:00004248 _text           segment para public 'CODE' use32
.text:00004248                 assume cs:_text
.text:00004248                 ;org 4248h
.text:00004248 ; COMDAT (pick any)
.text:00004248                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004248
.text:00004248 ; =============== S U B R O U T I N E =======================================
.text:00004248
.text:00004248 ; Attributes: bp-based frame
.text:00004248
.text:00004248 ; unsigned int __thiscall CBZip2Crc::GetDigest(CBZip2Crc *__hidden this)
.text:00004248                 public ?GetDigest@CBZip2Crc@@QBEIXZ
.text:00004248 ?GetDigest@CBZip2Crc@@QBEIXZ proc near  ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlockWithHeaders(uchar const *,uint)+104p
.text:00004248
.text:00004248 var_4           = dword ptr -4
.text:00004248
.text:00004248                 push    ebp
.text:00004249                 mov     ebp, esp
.text:0000424B                 push    ecx
.text:0000424C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004253                 mov     [ebp+var_4], ecx
.text:00004256                 mov     eax, [ebp+var_4]
.text:00004259                 mov     eax, [eax]
.text:0000425B                 xor     eax, 0FFFFFFFFh
.text:0000425E                 mov     esp, ebp
.text:00004260                 pop     ebp
.text:00004261                 retn
.text:00004261 ?GetDigest@CBZip2Crc@@QBEIXZ endp
.text:00004261
.text:00004261 ; ---------------------------------------------------------------------------
.text:00004262                 align 4
.text:00004262 _text           ends
.text:00004262
.text:00004264 ; ===========================================================================
.text:00004264
.text:00004264 ; Segment type: Pure code
.text:00004264 ; Segment permissions: Read/Execute
.text:00004264 _text           segment para public 'CODE' use32
.text:00004264                 assume cs:_text
.text:00004264                 ;org 4264h
.text:00004264 ; COMDAT (pick any)
.text:00004264                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004264
.text:00004264 ; =============== S U B R O U T I N E =======================================
.text:00004264
.text:00004264 ; Attributes: bp-based frame
.text:00004264
.text:00004264 ; unsigned __int8 *__thiscall NCompress::NBZip2::CMsbfEncoderTemp::GetStream(NCompress::NBZip2::CMsbfEncoderTemp *__hidden this)
.text:00004264                 public ?GetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QBEPAEXZ
.text:00004264 ?GetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QBEPAEXZ proc near
.text:00004264                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+1D3p
.text:00004264
.text:00004264 var_4           = dword ptr -4
.text:00004264
.text:00004264                 push    ebp
.text:00004265                 mov     ebp, esp
.text:00004267                 push    ecx
.text:00004268                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000426F                 mov     [ebp+var_4], ecx
.text:00004272                 mov     eax, [ebp+var_4]
.text:00004275                 mov     eax, [eax+0Ch]
.text:00004278                 mov     esp, ebp
.text:0000427A                 pop     ebp
.text:0000427B                 retn
.text:0000427B ?GetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QBEPAEXZ endp
.text:0000427B
.text:0000427B _text           ends
.text:0000427B
.text:0000427C ; ===========================================================================
.text:0000427C
.text:0000427C ; Segment type: Pure code
.text:0000427C ; Segment permissions: Read/Execute
.text:0000427C _text           segment para public 'CODE' use32
.text:0000427C                 assume cs:_text
.text:0000427C                 ;org 427Ch
.text:0000427C ; COMDAT (pick any)
.text:0000427C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000427C
.text:0000427C ; =============== S U B R O U T I N E =======================================
.text:0000427C
.text:0000427C ; Attributes: bp-based frame
.text:0000427C
.text:0000427C ; unsigned int __thiscall NCompress::NBZip2::CMsbfEncoderTemp::GetBytePos(NCompress::NBZip2::CMsbfEncoderTemp *__hidden this)
.text:0000427C                 public ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ
.text:0000427C ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ proc near
.text:0000427C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+32p
.text:0000427C                                         ; NCompress::NBZip2::CThreadInfo::EncodeBlock2(uchar const *,uint,uint)+161p ...
.text:0000427C
.text:0000427C var_4           = dword ptr -4
.text:0000427C
.text:0000427C                 push    ebp
.text:0000427D                 mov     ebp, esp
.text:0000427F                 push    ecx
.text:00004280                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004287                 mov     [ebp+var_4], ecx
.text:0000428A                 mov     eax, [ebp+var_4]
.text:0000428D                 mov     eax, [eax]
.text:0000428F                 mov     esp, ebp
.text:00004291                 pop     ebp
.text:00004292                 retn
.text:00004292 ?GetBytePos@CMsbfEncoderTemp@NBZip2@NCompress@@QBEIXZ endp
.text:00004292
.text:00004292 ; ---------------------------------------------------------------------------
.text:00004293                 align 4
.text:00004293 _text           ends
.text:00004293
.text:00004294 ; ===========================================================================
.text:00004294
.text:00004294 ; Segment type: Pure code
.text:00004294 ; Segment permissions: Read/Execute
.text:00004294 _text           segment para public 'CODE' use32
.text:00004294                 assume cs:_text
.text:00004294                 ;org 4294h
.text:00004294 ; COMDAT (pick any)
.text:00004294                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004294
.text:00004294 ; =============== S U B R O U T I N E =======================================
.text:00004294
.text:00004294 ; Attributes: bp-based frame
.text:00004294
.text:00004294 ; void __thiscall CBZip2CombinedCrc::Update(CBZip2CombinedCrc *this, unsigned int)
.text:00004294                 public ?Update@CBZip2CombinedCrc@@QAEXI@Z
.text:00004294 ?Update@CBZip2CombinedCrc@@QAEXI@Z proc near
.text:00004294                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+E6p
.text:00004294
.text:00004294 var_4           = dword ptr -4
.text:00004294 arg_0           = dword ptr  8
.text:00004294
.text:00004294                 push    ebp
.text:00004295                 mov     ebp, esp
.text:00004297                 push    ecx
.text:00004298                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000429F                 mov     [ebp+var_4], ecx
.text:000042A2                 mov     eax, [ebp+var_4]
.text:000042A5                 mov     ecx, [eax]
.text:000042A7                 shl     ecx, 1
.text:000042A9                 mov     edx, [ebp+var_4]
.text:000042AC                 mov     eax, [edx]
.text:000042AE                 shr     eax, 1Fh
.text:000042B1                 or      ecx, eax
.text:000042B3                 xor     ecx, [ebp+arg_0]
.text:000042B6                 mov     edx, [ebp+var_4]
.text:000042B9                 mov     [edx], ecx
.text:000042BB                 mov     esp, ebp
.text:000042BD                 pop     ebp
.text:000042BE                 retn    4
.text:000042BE ?Update@CBZip2CombinedCrc@@QAEXI@Z endp
.text:000042BE
.text:000042BE ; ---------------------------------------------------------------------------
.text:000042C1                 align 4
.text:000042C1 _text           ends
.text:000042C1
.text:000042C4 ; ===========================================================================
.text:000042C4
.text:000042C4 ; Segment type: Pure code
.text:000042C4 ; Segment permissions: Read/Execute
.text:000042C4 _text           segment para public 'CODE' use32
.text:000042C4                 assume cs:_text
.text:000042C4                 ;org 42C4h
.text:000042C4 ; COMDAT (pick any)
.text:000042C4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042C4
.text:000042C4 ; =============== S U B R O U T I N E =======================================
.text:000042C4
.text:000042C4 ; Attributes: bp-based frame
.text:000042C4
.text:000042C4 ; void __thiscall NCompress::NBZip2::CMsbfEncoderTemp::SetStream(NCompress::NBZip2::CMsbfEncoderTemp *this, unsigned __int8 *)
.text:000042C4                 public ?SetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXPAE@Z
.text:000042C4 ?SetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXPAE@Z proc near
.text:000042C4                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+26p
.text:000042C4
.text:000042C4 var_4           = dword ptr -4
.text:000042C4 arg_0           = dword ptr  8
.text:000042C4
.text:000042C4                 push    ebp
.text:000042C5                 mov     ebp, esp
.text:000042C7                 push    ecx
.text:000042C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042CF                 mov     [ebp+var_4], ecx
.text:000042D2                 mov     eax, [ebp+var_4]
.text:000042D5                 mov     ecx, [ebp+arg_0]
.text:000042D8                 mov     [eax+0Ch], ecx
.text:000042DB                 mov     esp, ebp
.text:000042DD                 pop     ebp
.text:000042DE                 retn    4
.text:000042DE ?SetStream@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXPAE@Z endp
.text:000042DE
.text:000042DE ; ---------------------------------------------------------------------------
.text:000042E1                 align 4
.text:000042E1 _text           ends
.text:000042E1
.text:000042E4 ; ===========================================================================
.text:000042E4
.text:000042E4 ; Segment type: Pure code
.text:000042E4 ; Segment permissions: Read/Execute
.text:000042E4 _text           segment para public 'CODE' use32
.text:000042E4                 assume cs:_text
.text:000042E4                 ;org 42E4h
.text:000042E4 ; COMDAT (pick any)
.text:000042E4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000042E4
.text:000042E4 ; =============== S U B R O U T I N E =======================================
.text:000042E4
.text:000042E4 ; Attributes: bp-based frame
.text:000042E4
.text:000042E4 ; void __thiscall NCompress::NBZip2::CMsbfEncoderTemp::Init(NCompress::NBZip2::CMsbfEncoderTemp *__hidden this)
.text:000042E4                 public ?Init@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXXZ
.text:000042E4 ?Init@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXXZ proc near
.text:000042E4                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+2Ep
.text:000042E4
.text:000042E4 var_4           = dword ptr -4
.text:000042E4
.text:000042E4                 push    ebp
.text:000042E5                 mov     ebp, esp
.text:000042E7                 push    ecx
.text:000042E8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042EF                 mov     [ebp+var_4], ecx
.text:000042F2                 mov     eax, [ebp+var_4]
.text:000042F5                 mov     dword ptr [eax], 0
.text:000042FB                 mov     ecx, [ebp+var_4]
.text:000042FE                 mov     dword ptr [ecx+4], 8
.text:00004305                 mov     edx, [ebp+var_4]
.text:00004308                 mov     byte ptr [edx+8], 0
.text:0000430C                 mov     esp, ebp
.text:0000430E                 pop     ebp
.text:0000430F                 retn
.text:0000430F ?Init@CMsbfEncoderTemp@NBZip2@NCompress@@QAEXXZ endp
.text:0000430F
.text:0000430F _text           ends
.text:0000430F
.text:00004310 ; ===========================================================================
.text:00004310
.text:00004310 ; Segment type: Pure code
.text:00004310 ; Segment permissions: Read/Execute
.text:00004310 _text           segment para public 'CODE' use32
.text:00004310                 assume cs:_text
.text:00004310                 ;org 4310h
.text:00004310 ; COMDAT (pick any)
.text:00004310                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004310
.text:00004310 ; =============== S U B R O U T I N E =======================================
.text:00004310
.text:00004310 ; Attributes: bp-based frame
.text:00004310
.text:00004310 ; void __thiscall CBZip2CombinedCrc::Init(CBZip2CombinedCrc *__hidden this)
.text:00004310                 public ?Init@CBZip2CombinedCrc@@QAEXXZ
.text:00004310 ?Init@CBZip2CombinedCrc@@QAEXXZ proc near
.text:00004310                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+1A2p
.text:00004310
.text:00004310 var_4           = dword ptr -4
.text:00004310
.text:00004310                 push    ebp
.text:00004311                 mov     ebp, esp
.text:00004313                 push    ecx
.text:00004314                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000431B                 mov     [ebp+var_4], ecx
.text:0000431E                 mov     eax, [ebp+var_4]
.text:00004321                 mov     dword ptr [eax], 0
.text:00004327                 mov     esp, ebp
.text:00004329                 pop     ebp
.text:0000432A                 retn
.text:0000432A ?Init@CBZip2CombinedCrc@@QAEXXZ endp
.text:0000432A
.text:0000432A ; ---------------------------------------------------------------------------
.text:0000432B                 align 4
.text:0000432B _text           ends
.text:0000432B
.text:0000432C ; ===========================================================================
.text:0000432C
.text:0000432C ; Segment type: Pure code
.text:0000432C ; Segment permissions: Read/Execute
.text:0000432C _text           segment para public 'CODE' use32
.text:0000432C                 assume cs:_text
.text:0000432C                 ;org 432Ch
.text:0000432C ; COMDAT (pick any)
.text:0000432C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000432C
.text:0000432C ; =============== S U B R O U T I N E =======================================
.text:0000432C
.text:0000432C ; Attributes: bp-based frame
.text:0000432C
.text:0000432C ; unsigned int __thiscall CBZip2CombinedCrc::GetDigest(CBZip2CombinedCrc *__hidden this)
.text:0000432C                 public ?GetDigest@CBZip2CombinedCrc@@QBEIXZ
.text:0000432C ?GetDigest@CBZip2CombinedCrc@@QBEIXZ proc near
.text:0000432C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+3FAp
.text:0000432C
.text:0000432C var_4           = dword ptr -4
.text:0000432C
.text:0000432C                 push    ebp
.text:0000432D                 mov     ebp, esp
.text:0000432F                 push    ecx
.text:00004330                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004337                 mov     [ebp+var_4], ecx
.text:0000433A                 mov     eax, [ebp+var_4]
.text:0000433D                 mov     eax, [eax]
.text:0000433F                 mov     esp, ebp
.text:00004341                 pop     ebp
.text:00004342                 retn
.text:00004342 ?GetDigest@CBZip2CombinedCrc@@QBEIXZ endp
.text:00004342
.text:00004342 ; ---------------------------------------------------------------------------
.text:00004343                 align 4
.text:00004343 _text           ends
.text:00004343
.text:00004344 ; ===========================================================================
.text:00004344
.text:00004344 ; Segment type: Pure code
.text:00004344 ; Segment permissions: Read/Execute
.text:00004344 _text           segment para public 'CODE' use32
.text:00004344                 assume cs:_text
.text:00004344                 ;org 4344h
.text:00004344 ; COMDAT (pick any)
.text:00004344                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004344
.text:00004344 ; =============== S U B R O U T I N E =======================================
.text:00004344
.text:00004344 ; Attributes: bp-based frame
.text:00004344
.text:00004344 ; unsigned int __thiscall NWindows::NSynchronization::CBaseEvent::Reset(NWindows::NSynchronization::CBaseEvent *__hidden this)
.text:00004344                 public ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
.text:00004344 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
.text:00004344                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+91p
.text:00004344                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+B0p ...
.text:00004344
.text:00004344 var_4           = dword ptr -4
.text:00004344
.text:00004344                 push    ebp
.text:00004345                 mov     ebp, esp
.text:00004347                 push    ecx
.text:00004348                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000434F                 mov     [ebp+var_4], ecx
.text:00004352                 mov     eax, [ebp+var_4]
.text:00004355                 push    eax
.text:00004356                 call    _Event_Reset@4  ; Event_Reset(x)
.text:0000435B                 add     esp, 4
.text:0000435E                 cmp     ebp, esp
.text:00004360                 call    __RTC_CheckEsp
.text:00004365                 mov     esp, ebp
.text:00004367                 pop     ebp
.text:00004368                 retn
.text:00004368 ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ endp
.text:00004368
.text:00004368 ; ---------------------------------------------------------------------------
.text:00004369                 align 4
.text:00004369 _text           ends
.text:00004369
.text:0000436C ; ===========================================================================
.text:0000436C
.text:0000436C ; Segment type: Pure code
.text:0000436C ; Segment permissions: Read/Execute
.text:0000436C _text           segment para public 'CODE' use32
.text:0000436C                 assume cs:_text
.text:0000436C                 ;org 436Ch
.text:0000436C ; COMDAT (pick any)
.text:0000436C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000436C
.text:0000436C ; =============== S U B R O U T I N E =======================================
.text:0000436C
.text:0000436C ; Attributes: bp-based frame
.text:0000436C
.text:0000436C ; void __thiscall CInBufferBase::SetStream(CInBufferBase *this, struct ISequentialInStream *)
.text:0000436C                 public ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
.text:0000436C ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
.text:0000436C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+169p
.text:0000436C
.text:0000436C var_4           = dword ptr -4
.text:0000436C arg_0           = dword ptr  8
.text:0000436C
.text:0000436C                 push    ebp
.text:0000436D                 mov     ebp, esp
.text:0000436F                 push    ecx
.text:00004370                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004377                 mov     [ebp+var_4], ecx
.text:0000437A                 mov     eax, [ebp+var_4]
.text:0000437D                 mov     ecx, [ebp+arg_0]
.text:00004380                 mov     [eax+0Ch], ecx
.text:00004383                 mov     esp, ebp
.text:00004385                 pop     ebp
.text:00004386                 retn    4
.text:00004386 ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z endp
.text:00004386
.text:00004386 ; ---------------------------------------------------------------------------
.text:00004389                 align 4
.text:00004389 _text           ends
.text:00004389
.text:0000438C ; ===========================================================================
.text:0000438C
.text:0000438C ; Segment type: Pure code
.text:0000438C ; Segment permissions: Read/Execute
.text:0000438C _text           segment para public 'CODE' use32
.text:0000438C                 assume cs:_text
.text:0000438C                 ;org 438Ch
.text:0000438C ; COMDAT (pick any)
.text:0000438C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000438C
.text:0000438C ; =============== S U B R O U T I N E =======================================
.text:0000438C
.text:0000438C ; Attributes: bp-based frame
.text:0000438C
.text:0000438C ; bool __thiscall NCompress::NBZip2::CEncProps::DoOptimizeNumTables(NCompress::NBZip2::CEncProps *__hidden this)
.text:0000438C                 public ?DoOptimizeNumTables@CEncProps@NBZip2@NCompress@@QBE_NXZ
.text:0000438C ?DoOptimizeNumTables@CEncProps@NBZip2@NCompress@@QBE_NXZ proc near
.text:0000438C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+EEp
.text:0000438C
.text:0000438C var_4           = dword ptr -4
.text:0000438C
.text:0000438C                 push    ebp
.text:0000438D                 mov     ebp, esp
.text:0000438F                 push    ecx
.text:00004390                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004397                 mov     [ebp+var_4], ecx
.text:0000439A                 mov     eax, [ebp+var_4]
.text:0000439D                 mov     ecx, 1
.text:000043A2                 cmp     ecx, [eax+4]
.text:000043A5                 sbb     eax, eax
.text:000043A7                 neg     eax
.text:000043A9                 mov     esp, ebp
.text:000043AB                 pop     ebp
.text:000043AC                 retn
.text:000043AC ?DoOptimizeNumTables@CEncProps@NBZip2@NCompress@@QBE_NXZ endp
.text:000043AC
.text:000043AC ; ---------------------------------------------------------------------------
.text:000043AD                 align 10h
.text:000043AD _text           ends
.text:000043AD
.text:000043B0 ; ===========================================================================
.text:000043B0
.text:000043B0 ; Segment type: Pure code
.text:000043B0 ; Segment permissions: Read/Execute
.text:000043B0 _text           segment para public 'CODE' use32
.text:000043B0                 assume cs:_text
.text:000043B0                 ;org 43B0h
.text:000043B0 ; COMDAT (pick any)
.text:000043B0                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000043B0
.text:000043B0 ; =============== S U B R O U T I N E =======================================
.text:000043B0
.text:000043B0 ; Attributes: bp-based frame
.text:000043B0
.text:000043B0 ; __int32 __thiscall NCompress::NBZip2::CEncoder::Flush(NCompress::NBZip2::CEncoder *__hidden this)
.text:000043B0                 public ?Flush@CEncoder@NBZip2@NCompress@@QAEJXZ
.text:000043B0 ?Flush@CEncoder@NBZip2@NCompress@@QAEJXZ proc near
.text:000043B0                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+40Bp
.text:000043B0
.text:000043B0 var_4           = dword ptr -4
.text:000043B0
.text:000043B0                 push    ebp
.text:000043B1                 mov     ebp, esp
.text:000043B3                 push    ecx
.text:000043B4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043BB                 mov     [ebp+var_4], ecx
.text:000043BE                 mov     ecx, [ebp+var_4]
.text:000043C1                 add     ecx, 140h
.text:000043C7                 call    ?Flush@?$CBitmEncoder@VCOutBuffer@@@@QAEJXZ ; CBitmEncoder<COutBuffer>::Flush(void)
.text:000043CC                 add     esp, 4
.text:000043CF                 cmp     ebp, esp
.text:000043D1                 call    __RTC_CheckEsp
.text:000043D6                 mov     esp, ebp
.text:000043D8                 pop     ebp
.text:000043D9                 retn
.text:000043D9 ?Flush@CEncoder@NBZip2@NCompress@@QAEJXZ endp
.text:000043D9
.text:000043D9 ; ---------------------------------------------------------------------------
.text:000043DA                 align 4
.text:000043DA _text           ends
.text:000043DA
.text:000043DC ; ===========================================================================
.text:000043DC
.text:000043DC ; Segment type: Pure code
.text:000043DC ; Segment permissions: Read/Execute
.text:000043DC _text           segment para public 'CODE' use32
.text:000043DC                 assume cs:_text
.text:000043DC                 ;org 43DCh
.text:000043DC ; COMDAT (pick any)
.text:000043DC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000043DC
.text:000043DC ; =============== S U B R O U T I N E =======================================
.text:000043DC
.text:000043DC ; Attributes: bp-based frame
.text:000043DC
.text:000043DC ; public: bool __thiscall CBitmEncoder<class COutBuffer>::Create(unsigned int)
.text:000043DC                 public ?Create@?$CBitmEncoder@VCOutBuffer@@@@QAE_NI@Z
.text:000043DC ?Create@?$CBitmEncoder@VCOutBuffer@@@@QAE_NI@Z proc near
.text:000043DC                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+149p
.text:000043DC
.text:000043DC var_4           = dword ptr -4
.text:000043DC arg_0           = dword ptr  8
.text:000043DC
.text:000043DC                 push    ebp
.text:000043DD                 mov     ebp, esp
.text:000043DF                 push    ecx
.text:000043E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000043E7                 mov     [ebp+var_4], ecx
.text:000043EA                 mov     eax, [ebp+arg_0]
.text:000043ED                 push    eax             ; unsigned int
.text:000043EE                 mov     ecx, [ebp+var_4]
.text:000043F1                 add     ecx, 8          ; this
.text:000043F4                 call    ?Create@COutBuffer@@QAE_NI@Z ; COutBuffer::Create(uint)
.text:000043F9                 add     esp, 4
.text:000043FC                 cmp     ebp, esp
.text:000043FE                 call    __RTC_CheckEsp
.text:00004403                 mov     esp, ebp
.text:00004405                 pop     ebp
.text:00004406                 retn    4
.text:00004406 ?Create@?$CBitmEncoder@VCOutBuffer@@@@QAE_NI@Z endp
.text:00004406
.text:00004406 ; ---------------------------------------------------------------------------
.text:00004409                 align 4
.text:00004409 _text           ends
.text:00004409
.text:0000440C ; ===========================================================================
.text:0000440C
.text:0000440C ; Segment type: Pure code
.text:0000440C ; Segment permissions: Read/Execute
.text:0000440C _text           segment para public 'CODE' use32
.text:0000440C                 assume cs:_text
.text:0000440C                 ;org 440Ch
.text:0000440C ; COMDAT (pick any)
.text:0000440C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000440C
.text:0000440C ; =============== S U B R O U T I N E =======================================
.text:0000440C
.text:0000440C ; Attributes: bp-based frame
.text:0000440C
.text:0000440C ; int __stdcall CBitmEncoder<COutBuffer>::SetStream(struct ISequentialOutStream *)
.text:0000440C                 public ?SetStream@?$CBitmEncoder@VCOutBuffer@@@@QAEXPAUISequentialOutStream@@@Z
.text:0000440C ?SetStream@?$CBitmEncoder@VCOutBuffer@@@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000440C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+186p
.text:0000440C
.text:0000440C var_4           = dword ptr -4
.text:0000440C arg_0           = dword ptr  8
.text:0000440C
.text:0000440C                 push    ebp
.text:0000440D                 mov     ebp, esp
.text:0000440F                 push    ecx
.text:00004410                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004417                 mov     [ebp+var_4], ecx
.text:0000441A                 mov     eax, [ebp+arg_0]
.text:0000441D                 push    eax             ; struct ISequentialOutStream *
.text:0000441E                 mov     ecx, [ebp+var_4]
.text:00004421                 add     ecx, 8          ; this
.text:00004424                 call    ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream(ISequentialOutStream *)
.text:00004429                 add     esp, 4
.text:0000442C                 cmp     ebp, esp
.text:0000442E                 call    __RTC_CheckEsp
.text:00004433                 mov     esp, ebp
.text:00004435                 pop     ebp
.text:00004436                 retn    4
.text:00004436 ?SetStream@?$CBitmEncoder@VCOutBuffer@@@@QAEXPAUISequentialOutStream@@@Z endp
.text:00004436
.text:00004436 ; ---------------------------------------------------------------------------
.text:00004439                 align 4
.text:00004439 _text           ends
.text:00004439
.text:0000443C ; ===========================================================================
.text:0000443C
.text:0000443C ; Segment type: Pure code
.text:0000443C ; Segment permissions: Read/Execute
.text:0000443C _text           segment para public 'CODE' use32
.text:0000443C                 assume cs:_text
.text:0000443C                 ;org 443Ch
.text:0000443C ; COMDAT (pick any)
.text:0000443C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000443C
.text:0000443C ; =============== S U B R O U T I N E =======================================
.text:0000443C
.text:0000443C ; Attributes: bp-based frame
.text:0000443C
.text:0000443C ; void __thiscall COutBuffer::SetStream(COutBuffer *this, struct ISequentialOutStream *)
.text:0000443C                 public ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
.text:0000443C ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
.text:0000443C                                         ; CODE XREF: CBitmEncoder<COutBuffer>::SetStream(ISequentialOutStream *)+18p
.text:0000443C
.text:0000443C var_4           = dword ptr -4
.text:0000443C arg_0           = dword ptr  8
.text:0000443C
.text:0000443C                 push    ebp
.text:0000443D                 mov     ebp, esp
.text:0000443F                 push    ecx
.text:00004440                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004447                 mov     [ebp+var_4], ecx
.text:0000444A                 mov     eax, [ebp+var_4]
.text:0000444D                 mov     ecx, [ebp+arg_0]
.text:00004450                 mov     [eax+14h], ecx
.text:00004453                 mov     esp, ebp
.text:00004455                 pop     ebp
.text:00004456                 retn    4
.text:00004456 ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z endp
.text:00004456
.text:00004456 ; ---------------------------------------------------------------------------
.text:00004459                 align 4
.text:00004459 _text           ends
.text:00004459
.text:0000445C ; ===========================================================================
.text:0000445C
.text:0000445C ; Segment type: Pure code
.text:0000445C ; Segment permissions: Read/Execute
.text:0000445C _text           segment para public 'CODE' use32
.text:0000445C                 assume cs:_text
.text:0000445C                 ;org 445Ch
.text:0000445C ; COMDAT (pick any)
.text:0000445C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000445C
.text:0000445C ; =============== S U B R O U T I N E =======================================
.text:0000445C
.text:0000445C ; Attributes: bp-based frame
.text:0000445C
.text:0000445C ; public: unsigned __int64 __thiscall CBitmEncoder<class COutBuffer>::GetProcessedSize(void)const
.text:0000445C                 public ?GetProcessedSize@?$CBitmEncoder@VCOutBuffer@@@@QBE_KXZ
.text:0000445C ?GetProcessedSize@?$CBitmEncoder@VCOutBuffer@@@@QBE_KXZ proc near
.text:0000445C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock3(uint)+181p
.text:0000445C                                         ; NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+375p
.text:0000445C
.text:0000445C var_4           = dword ptr -4
.text:0000445C
.text:0000445C                 push    ebp
.text:0000445D                 mov     ebp, esp
.text:0000445F                 push    ecx
.text:00004460                 push    esi
.text:00004461                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004468                 mov     [ebp+var_4], ecx
.text:0000446B                 mov     ecx, [ebp+var_4]
.text:0000446E                 add     ecx, 8          ; this
.text:00004471                 call    ?GetProcessedSize@COutBuffer@@QBE_KXZ ; COutBuffer::GetProcessedSize(void)
.text:00004476                 mov     ecx, [ebp+var_4]
.text:00004479                 mov     esi, 8
.text:0000447E                 sub     esi, [ecx]
.text:00004480                 add     esi, 7
.text:00004483                 shr     esi, 3
.text:00004486                 xor     ecx, ecx
.text:00004488                 add     eax, esi
.text:0000448A                 adc     edx, ecx
.text:0000448C                 pop     esi
.text:0000448D                 add     esp, 4
.text:00004490                 cmp     ebp, esp
.text:00004492                 call    __RTC_CheckEsp
.text:00004497                 mov     esp, ebp
.text:00004499                 pop     ebp
.text:0000449A                 retn
.text:0000449A ?GetProcessedSize@?$CBitmEncoder@VCOutBuffer@@@@QBE_KXZ endp
.text:0000449A
.text:0000449A ; ---------------------------------------------------------------------------
.text:0000449B                 align 4
.text:0000449B _text           ends
.text:0000449B
.text:0000449C ; ===========================================================================
.text:0000449C
.text:0000449C ; Segment type: Pure code
.text:0000449C ; Segment permissions: Read/Execute
.text:0000449C _text           segment para public 'CODE' use32
.text:0000449C                 assume cs:_text
.text:0000449C                 ;org 449Ch
.text:0000449C ; COMDAT (pick any)
.text:0000449C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000449C
.text:0000449C ; =============== S U B R O U T I N E =======================================
.text:0000449C
.text:0000449C ; Attributes: bp-based frame
.text:0000449C
.text:0000449C ; public: void __thiscall CBitmEncoder<class COutBuffer>::Init(void)
.text:0000449C                 public ?Init@?$CBitmEncoder@VCOutBuffer@@@@QAEXXZ
.text:0000449C ?Init@?$CBitmEncoder@VCOutBuffer@@@@QAEXXZ proc near
.text:0000449C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+194p
.text:0000449C
.text:0000449C var_4           = dword ptr -4
.text:0000449C
.text:0000449C                 push    ebp
.text:0000449D                 mov     ebp, esp
.text:0000449F                 push    ecx
.text:000044A0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044A7                 mov     [ebp+var_4], ecx
.text:000044AA                 mov     ecx, [ebp+var_4]
.text:000044AD                 add     ecx, 8          ; this
.text:000044B0                 call    ?Init@COutBuffer@@QAEXXZ ; COutBuffer::Init(void)
.text:000044B5                 mov     eax, [ebp+var_4]
.text:000044B8                 mov     dword ptr [eax], 8
.text:000044BE                 mov     ecx, [ebp+var_4]
.text:000044C1                 mov     byte ptr [ecx+4], 0
.text:000044C5                 add     esp, 4
.text:000044C8                 cmp     ebp, esp
.text:000044CA                 call    __RTC_CheckEsp
.text:000044CF                 mov     esp, ebp
.text:000044D1                 pop     ebp
.text:000044D2                 retn
.text:000044D2 ?Init@?$CBitmEncoder@VCOutBuffer@@@@QAEXXZ endp
.text:000044D2
.text:000044D2 ; ---------------------------------------------------------------------------
.text:000044D3                 align 4
.text:000044D3 _text           ends
.text:000044D3
.text:000044D4 ; ===========================================================================
.text:000044D4
.text:000044D4 ; Segment type: Pure code
.text:000044D4 ; Segment permissions: Read/Execute
.text:000044D4 _text           segment para public 'CODE' use32
.text:000044D4                 assume cs:_text
.text:000044D4                 ;org 44D4h
.text:000044D4 ; COMDAT (pick any)
.text:000044D4                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000044D4
.text:000044D4 ; =============== S U B R O U T I N E =======================================
.text:000044D4
.text:000044D4 ; Attributes: bp-based frame
.text:000044D4
.text:000044D4 ; public: long __thiscall CBitmEncoder<class COutBuffer>::Flush(void)
.text:000044D4                 public ?Flush@?$CBitmEncoder@VCOutBuffer@@@@QAEJXZ
.text:000044D4 ?Flush@?$CBitmEncoder@VCOutBuffer@@@@QAEJXZ proc near
.text:000044D4                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Flush(void)+17p
.text:000044D4
.text:000044D4 var_4           = dword ptr -4
.text:000044D4
.text:000044D4                 push    ebp
.text:000044D5                 mov     ebp, esp
.text:000044D7                 push    ecx
.text:000044D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044DF                 mov     [ebp+var_4], ecx
.text:000044E2                 mov     eax, [ebp+var_4]
.text:000044E5                 cmp     dword ptr [eax], 8
.text:000044E8                 jnb     short loc_44FA
.text:000044EA                 mov     ecx, [ebp+var_4]
.text:000044ED                 mov     edx, [ecx]
.text:000044EF                 push    edx
.text:000044F0                 push    0
.text:000044F2                 mov     ecx, [ebp+var_4]
.text:000044F5                 call    ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z ; CBitmEncoder<COutBuffer>::WriteBits(uint,uint)
.text:000044FA
.text:000044FA loc_44FA:                               ; CODE XREF: CBitmEncoder<COutBuffer>::Flush(void)+14j
.text:000044FA                 mov     ecx, [ebp+var_4]
.text:000044FD                 add     ecx, 8          ; this
.text:00004500                 call    ?Flush@COutBuffer@@QAEJXZ ; COutBuffer::Flush(void)
.text:00004505                 add     esp, 4
.text:00004508                 cmp     ebp, esp
.text:0000450A                 call    __RTC_CheckEsp
.text:0000450F                 mov     esp, ebp
.text:00004511                 pop     ebp
.text:00004512                 retn
.text:00004512 ?Flush@?$CBitmEncoder@VCOutBuffer@@@@QAEJXZ endp
.text:00004512
.text:00004512 ; ---------------------------------------------------------------------------
.text:00004513                 align 4
.text:00004513 _text           ends
.text:00004513
.text:00004514 ; ===========================================================================
.text:00004514
.text:00004514 ; Segment type: Pure code
.text:00004514 ; Segment permissions: Read/Execute
.text:00004514 _text           segment para public 'CODE' use32
.text:00004514                 assume cs:_text
.text:00004514                 ;org 4514h
.text:00004514 ; COMDAT (pick any)
.text:00004514                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004514
.text:00004514 ; =============== S U B R O U T I N E =======================================
.text:00004514
.text:00004514 ; Attributes: bp-based frame
.text:00004514
.text:00004514 ; public: void __thiscall CBitmEncoder<class COutBuffer>::WriteBits(unsigned int, unsigned int)
.text:00004514                 public ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z
.text:00004514 ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z proc near
.text:00004514                                         ; CODE XREF: NCompress::NBZip2::CEncoder::WriteBits(uint,uint)+1Fp
.text:00004514                                         ; NCompress::NBZip2::CEncoder::WriteBytes(uchar const *,uint,uchar)+56p ...
.text:00004514
.text:00004514 var_8           = dword ptr -8
.text:00004514 var_4           = dword ptr -4
.text:00004514 arg_0           = dword ptr  8
.text:00004514 arg_4           = dword ptr  0Ch
.text:00004514
.text:00004514                 push    ebp
.text:00004515                 mov     ebp, esp
.text:00004517                 sub     esp, 8
.text:0000451A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004521                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004528                 mov     [ebp+var_4], ecx
.text:0000452B
.text:0000452B loc_452B:                               ; CODE XREF: CBitmEncoder<COutBuffer>::WriteBits(uint,uint)+A0j
.text:0000452B                 cmp     [ebp+arg_4], 0
.text:0000452F                 jbe     loc_45B9
.text:00004535                 mov     eax, [ebp+var_4]
.text:00004538                 mov     ecx, [ebp+arg_4]
.text:0000453B                 cmp     ecx, [eax]
.text:0000453D                 jnb     short loc_4568
.text:0000453F                 mov     edx, [ebp+var_4]
.text:00004542                 mov     eax, [edx]
.text:00004544                 sub     eax, [ebp+arg_4]
.text:00004547                 mov     ecx, [ebp+var_4]
.text:0000454A                 mov     [ecx], eax
.text:0000454C                 movzx   edx, byte ptr [ebp+arg_0]
.text:00004550                 mov     eax, [ebp+var_4]
.text:00004553                 mov     ecx, [eax]
.text:00004555                 shl     edx, cl
.text:00004557                 mov     ecx, [ebp+var_4]
.text:0000455A                 movzx   eax, byte ptr [ecx+4]
.text:0000455E                 or      eax, edx
.text:00004560                 mov     ecx, [ebp+var_4]
.text:00004563                 mov     [ecx+4], al
.text:00004566                 jmp     short loc_45B9
.text:00004568 ; ---------------------------------------------------------------------------
.text:00004568
.text:00004568 loc_4568:                               ; CODE XREF: CBitmEncoder<COutBuffer>::WriteBits(uint,uint)+29j
.text:00004568                 mov     edx, [ebp+var_4]
.text:0000456B                 mov     eax, [ebp+arg_4]
.text:0000456E                 sub     eax, [edx]
.text:00004570                 mov     [ebp+arg_4], eax
.text:00004573                 mov     edx, [ebp+arg_0]
.text:00004576                 mov     ecx, [ebp+arg_4]
.text:00004579                 shr     edx, cl
.text:0000457B                 mov     [ebp+var_8], edx
.text:0000457E                 mov     eax, [ebp+var_8]
.text:00004581                 mov     ecx, [ebp+arg_4]
.text:00004584                 shl     eax, cl
.text:00004586                 mov     ecx, [ebp+arg_0]
.text:00004589                 sub     ecx, eax
.text:0000458B                 mov     [ebp+arg_0], ecx
.text:0000458E                 mov     edx, [ebp+var_4]
.text:00004591                 movzx   eax, byte ptr [edx+4]
.text:00004595                 or      eax, [ebp+var_8]
.text:00004598                 push    eax             ; unsigned __int8
.text:00004599                 mov     ecx, [ebp+var_4]
.text:0000459C                 add     ecx, 8          ; this
.text:0000459F                 call    ?WriteByte@COutBuffer@@QAEXE@Z ; COutBuffer::WriteByte(uchar)
.text:000045A4                 mov     ecx, [ebp+var_4]
.text:000045A7                 mov     dword ptr [ecx], 8
.text:000045AD                 mov     edx, [ebp+var_4]
.text:000045B0                 mov     byte ptr [edx+4], 0
.text:000045B4                 jmp     loc_452B
.text:000045B9 ; ---------------------------------------------------------------------------
.text:000045B9
.text:000045B9 loc_45B9:                               ; CODE XREF: CBitmEncoder<COutBuffer>::WriteBits(uint,uint)+1Bj
.text:000045B9                                         ; CBitmEncoder<COutBuffer>::WriteBits(uint,uint)+52j
.text:000045B9                 add     esp, 8
.text:000045BC                 cmp     ebp, esp
.text:000045BE                 call    __RTC_CheckEsp
.text:000045C3                 mov     esp, ebp
.text:000045C5                 pop     ebp
.text:000045C6                 retn    8
.text:000045C6 ?WriteBits@?$CBitmEncoder@VCOutBuffer@@@@QAEXII@Z endp
.text:000045C6
.text:000045C6 ; ---------------------------------------------------------------------------
.text:000045C9                 align 4
.text:000045C9 _text           ends
.text:000045C9
.text:000045CC ; ===========================================================================
.text:000045CC
.text:000045CC ; Segment type: Pure code
.text:000045CC ; Segment permissions: Read/Execute
.text:000045CC _text           segment para public 'CODE' use32
.text:000045CC                 assume cs:_text
.text:000045CC                 ;org 45CCh
.text:000045CC ; COMDAT (pick any)
.text:000045CC                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:000045CC
.text:000045CC ; =============== S U B R O U T I N E =======================================
.text:000045CC
.text:000045CC ; Attributes: bp-based frame
.text:000045CC
.text:000045CC ; void __thiscall COutBuffer::WriteByte(COutBuffer *this, unsigned __int8)
.text:000045CC                 public ?WriteByte@COutBuffer@@QAEXE@Z
.text:000045CC ?WriteByte@COutBuffer@@QAEXE@Z proc near
.text:000045CC                                         ; CODE XREF: CBitmEncoder<COutBuffer>::WriteBits(uint,uint)+8Bp
.text:000045CC
.text:000045CC var_4           = dword ptr -4
.text:000045CC arg_0           = byte ptr  8
.text:000045CC
.text:000045CC                 push    ebp
.text:000045CD                 mov     ebp, esp
.text:000045CF                 push    ecx
.text:000045D0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000045D7                 mov     [ebp+var_4], ecx
.text:000045DA                 mov     eax, [ebp+var_4]
.text:000045DD                 mov     ecx, [eax]
.text:000045DF                 mov     edx, [ebp+var_4]
.text:000045E2                 mov     eax, [edx+4]
.text:000045E5                 mov     dl, [ebp+arg_0]
.text:000045E8                 mov     [ecx+eax], dl
.text:000045EB                 mov     eax, [ebp+var_4]
.text:000045EE                 mov     ecx, [eax+4]
.text:000045F1                 add     ecx, 1
.text:000045F4                 mov     edx, [ebp+var_4]
.text:000045F7                 mov     [edx+4], ecx
.text:000045FA                 mov     eax, [ebp+var_4]
.text:000045FD                 mov     ecx, [ebp+var_4]
.text:00004600                 mov     edx, [eax+4]
.text:00004603                 cmp     edx, [ecx+8]
.text:00004606                 jnz     short loc_4610
.text:00004608                 mov     ecx, [ebp+var_4] ; this
.text:0000460B                 call    ?FlushWithCheck@COutBuffer@@QAEXXZ ; COutBuffer::FlushWithCheck(void)
.text:00004610
.text:00004610 loc_4610:                               ; CODE XREF: COutBuffer::WriteByte(uchar)+3Aj
.text:00004610                 add     esp, 4
.text:00004613                 cmp     ebp, esp
.text:00004615                 call    __RTC_CheckEsp
.text:0000461A                 mov     esp, ebp
.text:0000461C                 pop     ebp
.text:0000461D                 retn    4
.text:0000461D ?WriteByte@COutBuffer@@QAEXE@Z endp
.text:0000461D
.text:0000461D _text           ends
.text:0000461D
.text:00004620 ; ===========================================================================
.text:00004620
.text:00004620 ; Segment type: Pure code
.text:00004620 ; Segment permissions: Read/Execute
.text:00004620 _text           segment para public 'CODE' use32
.text:00004620                 assume cs:_text
.text:00004620                 ;org 4620h
.text:00004620 ; COMDAT (pick any)
.text:00004620                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004620
.text:00004620 ; =============== S U B R O U T I N E =======================================
.text:00004620
.text:00004620 ; Attributes: bp-based frame
.text:00004620
.text:00004620 ; unsigned int __stdcall MyMin<unsigned int>(unsigned int, unsigned int)
.text:00004620                 public ??$MyMin@I@@YGIII@Z
.text:00004620 ??$MyMin@I@@YGIII@Z proc near           ; CODE XREF: NCompress::NBZip2::CMsbfEncoderTemp::WriteBits(uint,uint)+33p
.text:00004620
.text:00004620 var_4           = dword ptr -4
.text:00004620 arg_0           = dword ptr  8
.text:00004620 arg_4           = dword ptr  0Ch
.text:00004620
.text:00004620                 push    ebp
.text:00004621                 mov     ebp, esp
.text:00004623                 push    ecx
.text:00004624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000462B                 mov     eax, [ebp+arg_0]
.text:0000462E                 cmp     eax, [ebp+arg_4]
.text:00004631                 jnb     short loc_463B
.text:00004633                 mov     ecx, [ebp+arg_0]
.text:00004636                 mov     [ebp+var_4], ecx
.text:00004639                 jmp     short loc_4641
.text:0000463B ; ---------------------------------------------------------------------------
.text:0000463B
.text:0000463B loc_463B:                               ; CODE XREF: MyMin<uint>(uint,uint)+11j
.text:0000463B                 mov     edx, [ebp+arg_4]
.text:0000463E                 mov     [ebp+var_4], edx
.text:00004641
.text:00004641 loc_4641:                               ; CODE XREF: MyMin<uint>(uint,uint)+19j
.text:00004641                 mov     eax, [ebp+var_4]
.text:00004644                 mov     esp, ebp
.text:00004646                 pop     ebp
.text:00004647                 retn    8
.text:00004647 ??$MyMin@I@@YGIII@Z endp
.text:00004647
.text:00004647 ; ---------------------------------------------------------------------------
.text:0000464A                 align 4
.text:0000464A _text           ends
.text:0000464A
.text:0000464C ; ===========================================================================
.text:0000464C
.text:0000464C ; Segment type: Pure code
.text:0000464C ; Segment permissions: Read/Execute
.text:0000464C _text           segment para public 'CODE' use32
.text:0000464C                 assume cs:_text
.text:0000464C                 ;org 464Ch
.text:0000464C ; COMDAT (pick any)
.text:0000464C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000464C
.text:0000464C ; =============== S U B R O U T I N E =======================================
.text:0000464C
.text:0000464C
.text:0000464C ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CEncoder::Release`adjustor{8}' (void)
.text:0000464C                 public ?Release@CEncoder@NBZip2@NCompress@@W7AGKXZ
.text:0000464C ?Release@CEncoder@NBZip2@NCompress@@W7AGKXZ proc near
.text:0000464C                                         ; DATA XREF: .rdata:000031E8o
.text:0000464C
.text:0000464C arg_0           = dword ptr  4
.text:0000464C
.text:0000464C                 sub     [esp+arg_0], 8
.text:00004651                 jmp     ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::Release(void)
.text:00004651 ?Release@CEncoder@NBZip2@NCompress@@W7AGKXZ endp
.text:00004651
.text:00004651 ; ---------------------------------------------------------------------------
.text:00004656                 align 4
.text:00004656 _text           ends
.text:00004656
.text:00004658 ; ===========================================================================
.text:00004658
.text:00004658 ; Segment type: Pure code
.text:00004658 ; Segment permissions: Read/Execute
.text:00004658 _text           segment para public 'CODE' use32
.text:00004658                 assume cs:_text
.text:00004658                 ;org 4658h
.text:00004658 ; COMDAT (pick any)
.text:00004658                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004658
.text:00004658 ; =============== S U B R O U T I N E =======================================
.text:00004658
.text:00004658
.text:00004658 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CEncoder::AddRef`adjustor{4}' (void)
.text:00004658                 public ?AddRef@CEncoder@NBZip2@NCompress@@W3AGKXZ
.text:00004658 ?AddRef@CEncoder@NBZip2@NCompress@@W3AGKXZ proc near
.text:00004658                                         ; DATA XREF: .rdata:000031F8o
.text:00004658
.text:00004658 arg_0           = dword ptr  4
.text:00004658
.text:00004658                 sub     [esp+arg_0], 4
.text:0000465D                 jmp     ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::AddRef(void)
.text:0000465D ?AddRef@CEncoder@NBZip2@NCompress@@W3AGKXZ endp
.text:0000465D
.text:0000465D ; ---------------------------------------------------------------------------
.text:00004662                 align 4
.text:00004662 _text           ends
.text:00004662
.text:00004664 ; ===========================================================================
.text:00004664
.text:00004664 ; Segment type: Pure code
.text:00004664 ; Segment permissions: Read/Execute
.text:00004664 _text           segment para public 'CODE' use32
.text:00004664                 assume cs:_text
.text:00004664                 ;org 4664h
.text:00004664 ; COMDAT (pick any)
.text:00004664                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004664
.text:00004664 ; =============== S U B R O U T I N E =======================================
.text:00004664
.text:00004664
.text:00004664 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CEncoder::AddRef`adjustor{8}' (void)
.text:00004664                 public ?AddRef@CEncoder@NBZip2@NCompress@@W7AGKXZ
.text:00004664 ?AddRef@CEncoder@NBZip2@NCompress@@W7AGKXZ proc near
.text:00004664                                         ; DATA XREF: .rdata:000031E4o
.text:00004664
.text:00004664 arg_0           = dword ptr  4
.text:00004664
.text:00004664                 sub     [esp+arg_0], 8
.text:00004669                 jmp     ?AddRef@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::AddRef(void)
.text:00004669 ?AddRef@CEncoder@NBZip2@NCompress@@W7AGKXZ endp
.text:00004669
.text:00004669 ; ---------------------------------------------------------------------------
.text:0000466E                 align 10h
.text:0000466E _text           ends
.text:0000466E
.text:00004670 ; ===========================================================================
.text:00004670
.text:00004670 ; Segment type: Pure code
.text:00004670 ; Segment permissions: Read/Execute
.text:00004670 _text           segment para public 'CODE' use32
.text:00004670                 assume cs:_text
.text:00004670                 ;org 4670h
.text:00004670 ; COMDAT (pick any)
.text:00004670                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004670
.text:00004670 ; =============== S U B R O U T I N E =======================================
.text:00004670
.text:00004670
.text:00004670 ; [thunk]:public: virtual long __stdcall NCompress::NBZip2::CEncoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00004670                 public ?QueryInterface@CEncoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z
.text:00004670 ?QueryInterface@CEncoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00004670                                         ; DATA XREF: .rdata:const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00004670
.text:00004670 arg_0           = dword ptr  4
.text:00004670
.text:00004670                 sub     [esp+arg_0], 4
.text:00004675                 jmp     ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00004675 ?QueryInterface@CEncoder@NBZip2@NCompress@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00004675
.text:00004675 ; ---------------------------------------------------------------------------
.text:0000467A                 align 4
.text:0000467A _text           ends
.text:0000467A
.text:0000467C ; ===========================================================================
.text:0000467C
.text:0000467C ; Segment type: Pure code
.text:0000467C ; Segment permissions: Read/Execute
.text:0000467C _text           segment para public 'CODE' use32
.text:0000467C                 assume cs:_text
.text:0000467C                 ;org 467Ch
.text:0000467C ; COMDAT (pick any)
.text:0000467C                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:0000467C
.text:0000467C ; =============== S U B R O U T I N E =======================================
.text:0000467C
.text:0000467C
.text:0000467C ; [thunk]:public: virtual long __stdcall NCompress::NBZip2::CEncoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:0000467C                 public ?QueryInterface@CEncoder@NBZip2@NCompress@@W7AGJABU_GUID@@PAPAX@Z
.text:0000467C ?QueryInterface@CEncoder@NBZip2@NCompress@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:0000467C                                         ; DATA XREF: .rdata:const NCompress::NBZip2::CEncoder::`vftable'{for `ICompressSetCoderMt'}o
.text:0000467C
.text:0000467C arg_0           = dword ptr  4
.text:0000467C
.text:0000467C                 sub     [esp+arg_0], 8
.text:00004681                 jmp     ?QueryInterface@CEncoder@NBZip2@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)
.text:00004681 ?QueryInterface@CEncoder@NBZip2@NCompress@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00004681
.text:00004681 ; ---------------------------------------------------------------------------
.text:00004686                 align 4
.text:00004686 _text           ends
.text:00004686
.text:00004688 ; ===========================================================================
.text:00004688
.text:00004688 ; Segment type: Pure code
.text:00004688 ; Segment permissions: Read/Execute
.text:00004688 _text           segment para public 'CODE' use32
.text:00004688                 assume cs:_text
.text:00004688                 ;org 4688h
.text:00004688 ; COMDAT (pick any)
.text:00004688                 assume es:nothing, ss:nothing, ds:_rtc$TMZ, fs:nothing, gs:nothing
.text:00004688
.text:00004688 ; =============== S U B R O U T I N E =======================================
.text:00004688
.text:00004688
.text:00004688 ; [thunk]:public: virtual unsigned long __stdcall NCompress::NBZip2::CEncoder::Release`adjustor{4}' (void)
.text:00004688                 public ?Release@CEncoder@NBZip2@NCompress@@W3AGKXZ
.text:00004688 ?Release@CEncoder@NBZip2@NCompress@@W3AGKXZ proc near
.text:00004688                                         ; DATA XREF: .rdata:000031FCo
.text:00004688
.text:00004688 arg_0           = dword ptr  4
.text:00004688
.text:00004688                 sub     [esp+arg_0], 4
.text:0000468D                 jmp     ?Release@CEncoder@NBZip2@NCompress@@UAGKXZ ; NCompress::NBZip2::CEncoder::Release(void)
.text:0000468D ?Release@CEncoder@NBZip2@NCompress@@W3AGKXZ endp
.text:0000468D
.text:0000468D _text           ends
.text:0000468D
UNDEF:000046A0 ; ===========================================================================
UNDEF:000046A0
UNDEF:000046A0 ; Segment type: Externs
UNDEF:000046A0 ; UNDEF
UNDEF:000046A0 ; __stdcall MidAlloc(x)
UNDEF:000046A0                 extrn _MidAlloc@4:near  ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+41p
UNDEF:000046A4 ; __stdcall BigAlloc(x)
UNDEF:000046A4                 extrn _BigAlloc@4:near  ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+1Cp
UNDEF:000046A8                 extrn __RTC_CheckEsp:near
UNDEF:000046A8                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::Alloc(void)+81p
UNDEF:000046A8                                         ; NCompress::NBZip2::CThreadInfo::Free(void)+3Dp ...
UNDEF:000046AC                 extrn __RTC_Shutdown:near
UNDEF:000046AC                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:000046B0                 extrn __RTC_InitBase:near
UNDEF:000046B0                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:000046B4 ; __stdcall MidFree(x)
UNDEF:000046B4                 extrn _MidFree@4:near   ; CODE XREF: NCompress::NBZip2::CThreadInfo::Free(void)+2Ap
UNDEF:000046B8 ; __stdcall BigFree(x)
UNDEF:000046B8                 extrn _BigFree@4:near   ; CODE XREF: NCompress::NBZip2::CThreadInfo::Free(void)+15p
UNDEF:000046BC ; __stdcall AutoResetEvent_CreateNotSignaled(x)
UNDEF:000046BC                 extrn _AutoResetEvent_CreateNotSignaled@4:near
UNDEF:000046BC                                         ; CODE XREF: NWindows::NSynchronization::CAutoResetEvent::Create(void)+12p
UNDEF:000046C0 ; __stdcall Thread_Create(x, x, x)
UNDEF:000046C0                 extrn _Thread_Create@12:near
UNDEF:000046C0                                         ; CODE XREF: NWindows::CThread::Create(uint (*)(void *),void *)+1Ap
UNDEF:000046C4 ; __stdcall Event_Set(x)
UNDEF:000046C4                 extrn _Event_Set@4:near ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Set(void)+12p
UNDEF:000046C8 ; __stdcall Handle_WaitObject(x)
UNDEF:000046C8                 extrn _Handle_WaitObject@4:near
UNDEF:000046C8                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Lock(void)+14p
UNDEF:000046C8                                         ; NWindows::CThread::Wait(void)+14p
UNDEF:000046CC ; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000046CC                 extrn __imp__LeaveCriticalSection@4:near
UNDEF:000046CC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15p
UNDEF:000046CC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Leave(void)+15r
UNDEF:000046D0                 extrn ___security_cookie:near
UNDEF:000046D0                                         ; DATA XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+29r
UNDEF:000046D0                                         ; NCompress::NBZip2::CEncoder::CEncoder(void)+19r ...
UNDEF:000046D4                 extrn ___CxxFrameHandler3:near
UNDEF:000046D4                                         ; CODE XREF: __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ+16j
UNDEF:000046D4                                         ; __ehhandler$??0CEncoder@NBZip2@NCompress@@QAE@XZ+16j ...
UNDEF:000046D8 ; __fastcall __security_check_cookie(x)
UNDEF:000046D8                 extrn @__security_check_cookie@4:near
UNDEF:000046D8                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+F9Fp
UNDEF:000046D8                                         ; __ehhandler$?ThreadFunc@CThreadInfo@NBZip2@NCompress@@QAEKXZ+Cp ...
UNDEF:000046DC ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000046DC                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000046DC                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::ThreadFunc(void)+241p
UNDEF:000046DC                                         ; NCompress::NBZip2::CEncoder::ReadRleBlock(uchar *)+15Ap ...
UNDEF:000046E0 ; const type_info::`vftable'
UNDEF:000046E0                 extrn ??_7type_info@@6B@:near
UNDEF:000046E0                                         ; DATA XREF: .data:CInBufferException `RTTI Type Descriptor'o
UNDEF:000046E0                                         ; .data:COutBufferException `RTTI Type Descriptor'o ...
UNDEF:000046E4 ; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000046E4                 extrn __imp__EnterCriticalSection@4:near
UNDEF:000046E4                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15p
UNDEF:000046E4                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::Enter(void)+15r
UNDEF:000046E8 ; __stdcall CriticalSection_Init(x)
UNDEF:000046E8                 extrn _CriticalSection_Init@4:near
UNDEF:000046E8                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::CCriticalSection(void)+12p
UNDEF:000046EC ; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
UNDEF:000046EC                 extrn __imp__DeleteCriticalSection@4:near
UNDEF:000046EC                                         ; CODE XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15p
UNDEF:000046EC                                         ; DATA XREF: NWindows::NSynchronization::CCriticalSection::~CCriticalSection(void)+15r
UNDEF:000046F0 ; void __thiscall CInBuffer::Free(CInBuffer *__hidden this)
UNDEF:000046F0                 extrn ?Free@CInBuffer@@QAEXXZ:near
UNDEF:000046F0                                         ; CODE XREF: CInBuffer::~CInBuffer(void)+11p
UNDEF:000046F4                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:000046F4                                         ; DATA XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *):loc_369Co
UNDEF:000046F8                 extrn _IID_ICompressSetCoderMt:near
UNDEF:000046F8                                         ; DATA XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *):loc_3668o
UNDEF:000046FC ; const IID IID_IUnknown
UNDEF:000046FC                 extrn _IID_IUnknown:near
UNDEF:000046FC                                         ; DATA XREF: NCompress::NBZip2::CEncoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00004700 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00004700                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00004704 ; void __cdecl operator delete(void *)
UNDEF:00004704                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Create@CEncoder@NBZip2@NCompress@@QAEJXZ$2+4p
UNDEF:00004704                                         ; NCompress::NBZip2::CEncoder::`scalar deleting destructor'(uint)+22p ...
UNDEF:00004708                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressCoder::`vftable'o
UNDEF:00004708                                         ; .rdata:00003854o ...
UNDEF:0000470C ; public: __thiscall CInBufferBase::CInBufferBase(void)
UNDEF:0000470C                 extrn ??0CInBufferBase@@QAE@XZ:near
UNDEF:0000470C                                         ; CODE XREF: CInBuffer::CInBuffer(void)+11p
UNDEF:00004710 ; void __thiscall COutBuffer::Free(COutBuffer *__hidden this)
UNDEF:00004710                 extrn ?Free@COutBuffer@@QAEXXZ:near
UNDEF:00004710                                         ; CODE XREF: COutBuffer::~COutBuffer(void)+11p
UNDEF:00004714 ; __stdcall HandlePtr_Close(x)
UNDEF:00004714                 extrn _HandlePtr_Close@4:near
UNDEF:00004714                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Close(void)+12p
UNDEF:00004714                                         ; NWindows::CThread::Close(void)+12p
UNDEF:00004718 ; void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *))
UNDEF:00004718                 extrn ??_L@YGXPAXIHP6EX0@Z1@Z:near
UNDEF:00004718                                         ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+144p
UNDEF:0000471C ; void *__cdecl operator new(unsigned int)
UNDEF:0000471C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NCompress::NBZip2::CEncoder::Create(void)+107p
UNDEF:00004720 ; __stdcall ManualResetEvent_CreateNotSignaled(x)
UNDEF:00004720                 extrn _ManualResetEvent_CreateNotSignaled@4:near
UNDEF:00004720                                         ; CODE XREF: NWindows::NSynchronization::CManualResetEvent::CreateIfNotCreated(void)+25p
UNDEF:00004724 ; void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *))
UNDEF:00004724                 extrn ??_M@YGXPAXIHP6EX0@Z@Z:near
UNDEF:00004724                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::`vector deleting destructor'(uint)+2Bp
UNDEF:00004728 ; bool __thiscall CInBufferBase::ReadByte_FromNewBlock(CInBufferBase *__hidden this, unsigned __int8 *)
UNDEF:00004728                 extrn ?ReadByte_FromNewBlock@CInBufferBase@@IAE_NAAE@Z:near
UNDEF:00004728                                         ; CODE XREF: CInBufferBase::ReadByte(uchar &)+22p
UNDEF:0000472C ; __stdcall Huffman_Generate(x, x, x, x, x)
UNDEF:0000472C                 extrn _Huffman_Generate@20:near
UNDEF:0000472C                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+BABp
UNDEF:00004730 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00004730                 extrn _memset:near      ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+8B8p
UNDEF:00004734 ; __stdcall BlockSort(x, x, x)
UNDEF:00004734                 extrn _BlockSort@12:near
UNDEF:00004734                                         ; CODE XREF: NCompress::NBZip2::CThreadInfo::EncodeBlock(uchar const *,uint)+44p
UNDEF:00004738 ; private: static unsigned int * CBZip2Crc::Table
UNDEF:00004738                 extrn ?Table@CBZip2Crc@@0PAIA:near
UNDEF:00004738                                         ; DATA XREF: CBZip2Crc::UpdateByte(uchar)+24r
UNDEF:0000473C ; void __thiscall CInBufferBase::Init(CInBufferBase *__hidden this)
UNDEF:0000473C                 extrn ?Init@CInBufferBase@@QAEXXZ:near
UNDEF:0000473C                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+174p
UNDEF:00004740 ; bool __thiscall CInBuffer::Create(CInBuffer *__hidden this, unsigned int)
UNDEF:00004740                 extrn ?Create@CInBuffer@@QAE_NI@Z:near
UNDEF:00004740                                         ; CODE XREF: NCompress::NBZip2::CEncoder::CodeReal(ISequentialInStream *,ISequentialOutStream *,unsigned __int64 const *,unsigned __int64 const *,ICompressProgressInfo *)+125p
UNDEF:00004744 ; __stdcall Event_Reset(x)
UNDEF:00004744                 extrn _Event_Reset@4:near
UNDEF:00004744                                         ; CODE XREF: NWindows::NSynchronization::CBaseEvent::Reset(void)+12p
UNDEF:00004748 ; bool __thiscall COutBuffer::Create(COutBuffer *__hidden this, unsigned int)
UNDEF:00004748                 extrn ?Create@COutBuffer@@QAE_NI@Z:near
UNDEF:00004748                                         ; CODE XREF: CBitmEncoder<COutBuffer>::Create(uint)+18p
UNDEF:0000474C ; unsigned __int64 __thiscall COutBuffer::GetProcessedSize(COutBuffer *__hidden this)
UNDEF:0000474C                 extrn ?GetProcessedSize@COutBuffer@@QBE_KXZ:near
UNDEF:0000474C                                         ; CODE XREF: CBitmEncoder<COutBuffer>::GetProcessedSize(void)+15p
UNDEF:00004750 ; void __thiscall COutBuffer::Init(COutBuffer *__hidden this)
UNDEF:00004750                 extrn ?Init@COutBuffer@@QAEXXZ:near
UNDEF:00004750                                         ; CODE XREF: CBitmEncoder<COutBuffer>::Init(void)+14p
UNDEF:00004754 ; __int32 __thiscall COutBuffer::Flush(COutBuffer *__hidden this)
UNDEF:00004754                 extrn ?Flush@COutBuffer@@QAEJXZ:near
UNDEF:00004754                                         ; CODE XREF: CBitmEncoder<COutBuffer>::Flush(void)+2Cp
UNDEF:00004758 ; void __thiscall COutBuffer::FlushWithCheck(COutBuffer *__hidden this)
UNDEF:00004758                 extrn ?FlushWithCheck@COutBuffer@@QAEXXZ:near
UNDEF:00004758                                         ; CODE XREF: COutBuffer::WriteByte(uchar)+3Fp
UNDEF:00004758
UNDEF:00004758