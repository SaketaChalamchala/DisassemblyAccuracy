.text:00000000 ;
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.text:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.text:00000000 ; |                      License info: 48-3677-7074-51                      |
.text:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.text:00000000 ; +-------------------------------------------------------------------------+
.text:00000000 ;
.text:00000000 ; Input MD5   : 214793BE8296A02E56251ECC85787F0D
.text:00000000 ; Input CRC32 : 91BB50AE
.text:00000000
.text:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\MyAes.obj
.text:00000000 ; Format      : COFF (X386MAGIC)
.text:00000000 ; includelib "uuid.lib"
.text:00000000 ; includelib "MSVCRTD"
.text:00000000 ; includelib "OLDNAMES"
.text:00000000
.text:00000000                 .686p
.text:00000000                 .mmx
.text:00000000                 .model flat
.text:00000000
.text:00000000 ; ===========================================================================
.text:00000000
.text:00000000 ; Segment type: Pure code
.text:00000000 ; Segment permissions: Read/Execute
.text:00000000 _text           segment para public 'CODE' use32
.text:00000000                 assume cs:_text
.text:00000000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000000
.text:00000000 ; =============== S U B R O U T I N E =======================================
.text:00000000
.text:00000000 ; Attributes: bp-based frame
.text:00000000
.text:00000000 ; _DWORD __thiscall NCrypto::CAesCbcCoder::CAesCbcCoder(NCrypto::CAesCbcCoder *this, bool, unsigned int)
.text:00000000                 public ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z
.text:00000000 ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z proc near
.text:00000000
.text:00000000 var_4           = dword ptr -4
.text:00000000 arg_0           = byte ptr  8
.text:00000000 arg_4           = dword ptr  0Ch
.text:00000000
.text:00000000                 push    ebp
.text:00000001                 mov     ebp, esp
.text:00000003                 push    ecx
.text:00000004                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000000B                 mov     [ebp+var_4], ecx
.text:0000000E                 mov     ecx, [ebp+var_4] ; this
.text:00000011                 call    ??0ICompressFilter@@QAE@XZ ; ICompressFilter::ICompressFilter(void)
.text:00000016                 mov     ecx, [ebp+var_4]
.text:00000019                 add     ecx, 4          ; this
.text:0000001C                 call    ??0ICryptoProperties@@QAE@XZ ; ICryptoProperties::ICryptoProperties(void)
.text:00000021                 mov     ecx, [ebp+var_4]
.text:00000024                 add     ecx, 8          ; this
.text:00000027                 call    ??0ICompressSetCoderProperties@@QAE@XZ ; ICompressSetCoderProperties::ICompressSetCoderProperties(void)
.text:0000002C                 mov     ecx, [ebp+var_4]
.text:0000002F                 add     ecx, 0Ch        ; this
.text:00000032                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000037                 mov     eax, [ebp+var_4]
.text:0000003A                 mov     dword ptr [eax], offset ??_7CAesCbcCoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcCoder::`vftable'{for `ICompressFilter'}
.text:00000040                 mov     ecx, [ebp+var_4]
.text:00000043                 mov     dword ptr [ecx+4], offset ??_7CAesCbcCoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcCoder::`vftable'{for `ICryptoProperties'}
.text:0000004A                 mov     edx, [ebp+var_4]
.text:0000004D                 mov     dword ptr [edx+8], offset ??_7CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcCoder::`vftable'{for `ICompressSetCoderProperties'}
.text:00000054                 mov     eax, [ebp+var_4]
.text:00000057                 mov     ecx, [ebp+arg_4]
.text:0000005A                 mov     [eax+18h], ecx
.text:0000005D                 mov     edx, [ebp+var_4]
.text:00000060                 mov     byte ptr [edx+1Ch], 0
.text:00000064                 mov     eax, [ebp+var_4]
.text:00000067                 mov     cl, [ebp+arg_0]
.text:0000006A                 mov     [eax+1Dh], cl
.text:0000006D                 mov     edx, [ebp+var_4]
.text:00000070                 add     edx, 20h ; ' '
.text:00000073                 xor     eax, eax
.text:00000075                 sub     eax, edx
.text:00000077                 and     eax, 0Fh
.text:0000007A                 shr     eax, 2
.text:0000007D                 mov     ecx, [ebp+var_4]
.text:00000080                 mov     [ecx+14h], eax
.text:00000083                 push    10h             ; Size
.text:00000085                 push    0               ; Val
.text:00000087                 mov     edx, [ebp+var_4]
.text:0000008A                 add     edx, 13Ch
.text:00000090                 push    edx             ; Dst
.text:00000091                 call    _memset
.text:00000096                 add     esp, 0Ch
.text:00000099                 push    0               ; unsigned int
.text:0000009B                 mov     ecx, [ebp+var_4] ; this
.text:0000009E                 call    ?SetFunctions@CAesCbcCoder@NCrypto@@AAE_NI@Z ; NCrypto::CAesCbcCoder::SetFunctions(uint)
.text:000000A3                 mov     eax, [ebp+var_4]
.text:000000A6                 add     esp, 4
.text:000000A9                 cmp     ebp, esp
.text:000000AB                 call    __RTC_CheckEsp
.text:000000B0                 mov     esp, ebp
.text:000000B2                 pop     ebp
.text:000000B3                 retn    8
.text:000000B3 ??0CAesCbcCoder@NCrypto@@QAE@_NI@Z endp
.text:000000B3
.text:000000B3 ; ---------------------------------------------------------------------------
.text:000000B6                 align 10h
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __int32 __stdcall NCrypto::CAesCbcCoder::Init(NCrypto::CAesCbcCoder *this)
.text:000000C0                 public ?Init@CAesCbcCoder@NCrypto@@UAGJXZ
.text:000000C0 ?Init@CAesCbcCoder@NCrypto@@UAGJXZ proc near
.text:000000C0                                         ; CODE XREF: NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)+31p
.text:000000C0                                         ; DATA XREF: .rdata:000003C8o
.text:000000C0
.text:000000C0 this            = dword ptr  8
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 mov     eax, [ebp+this]
.text:000000C6                 add     eax, 13Ch
.text:000000CB                 push    eax
.text:000000CC                 mov     ecx, [ebp+this]
.text:000000CF                 mov     edx, [ecx+14h]
.text:000000D2                 mov     eax, [ebp+this]
.text:000000D5                 lea     ecx, [eax+edx*4+20h]
.text:000000D9                 push    ecx
.text:000000DA                 call    _AesCbc_Init@8  ; AesCbc_Init(x,x)
.text:000000DF                 mov     edx, [ebp+this]
.text:000000E2                 movzx   eax, byte ptr [edx+1Ch]
.text:000000E6                 neg     eax
.text:000000E8                 sbb     eax, eax
.text:000000EA                 and     eax, 7FFFBFFBh
.text:000000EF                 add     eax, 80004005h
.text:000000F4                 cmp     ebp, esp
.text:000000F6                 call    __RTC_CheckEsp
.text:000000FB                 pop     ebp
.text:000000FC                 retn    4
.text:000000FC ?Init@CAesCbcCoder@NCrypto@@UAGJXZ endp
.text:000000FC
.text:000000FC ; ---------------------------------------------------------------------------
.text:000000FF                 align 10h
.text:00000100
.text:00000100 ; =============== S U B R O U T I N E =======================================
.text:00000100
.text:00000100 ; Attributes: bp-based frame
.text:00000100
.text:00000100 ; public: virtual unsigned int __stdcall NCrypto::CAesCbcCoder::Filter(unsigned char *, unsigned int)
.text:00000100                 public ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z
.text:00000100 ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z proc near
.text:00000100                                         ; DATA XREF: .rdata:000003CCo
.text:00000100
.text:00000100 arg_0           = dword ptr  8
.text:00000100 arg_4           = dword ptr  0Ch
.text:00000100 arg_8           = dword ptr  10h
.text:00000100
.text:00000100                 push    ebp
.text:00000101                 mov     ebp, esp
.text:00000103                 push    esi
.text:00000104                 mov     eax, [ebp+arg_0]
.text:00000107                 movzx   ecx, byte ptr [eax+1Ch]
.text:0000010B                 test    ecx, ecx
.text:0000010D                 jnz     short loc_113
.text:0000010F                 xor     eax, eax
.text:00000111                 jmp     short loc_15E
.text:00000113 ; ---------------------------------------------------------------------------
.text:00000113
.text:00000113 loc_113:                                ; CODE XREF: NCrypto::CAesCbcCoder::Filter(uchar *,uint)+Dj
.text:00000113                 cmp     [ebp+arg_8], 0
.text:00000117                 jnz     short loc_11D
.text:00000119                 xor     eax, eax
.text:0000011B                 jmp     short loc_15E
.text:0000011D ; ---------------------------------------------------------------------------
.text:0000011D
.text:0000011D loc_11D:                                ; CODE XREF: NCrypto::CAesCbcCoder::Filter(uchar *,uint)+17j
.text:0000011D                 cmp     [ebp+arg_8], 10h
.text:00000121                 jnb     short loc_12A
.text:00000123                 mov     eax, 10h
.text:00000128                 jmp     short loc_15E
.text:0000012A ; ---------------------------------------------------------------------------
.text:0000012A
.text:0000012A loc_12A:                                ; CODE XREF: NCrypto::CAesCbcCoder::Filter(uchar *,uint)+21j
.text:0000012A                 mov     edx, [ebp+arg_8]
.text:0000012D                 shr     edx, 4
.text:00000130                 mov     [ebp+arg_8], edx
.text:00000133                 mov     esi, esp
.text:00000135                 mov     eax, [ebp+arg_8]
.text:00000138                 push    eax
.text:00000139                 mov     ecx, [ebp+arg_0]
.text:0000013C                 mov     edx, [ecx+14h]
.text:0000013F                 mov     eax, [ebp+arg_0]
.text:00000142                 lea     ecx, [eax+edx*4+20h]
.text:00000146                 mov     eax, [ebp+arg_0]
.text:00000149                 mov     edx, [ebp+arg_4]
.text:0000014C                 mov     eax, [eax+10h]
.text:0000014F                 call    eax
.text:00000151                 cmp     esi, esp
.text:00000153                 call    __RTC_CheckEsp
.text:00000158                 mov     eax, [ebp+arg_8]
.text:0000015B                 shl     eax, 4
.text:0000015E
.text:0000015E loc_15E:                                ; CODE XREF: NCrypto::CAesCbcCoder::Filter(uchar *,uint)+11j
.text:0000015E                                         ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)+1Bj ...
.text:0000015E                 pop     esi
.text:0000015F                 cmp     ebp, esp
.text:00000161                 call    __RTC_CheckEsp
.text:00000166                 pop     ebp
.text:00000167                 retn    0Ch
.text:00000167 ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z endp
.text:00000167
.text:00000167 ; ---------------------------------------------------------------------------
.text:0000016A                 align 10h
.text:00000170
.text:00000170 ; =============== S U B R O U T I N E =======================================
.text:00000170
.text:00000170 ; Attributes: bp-based frame
.text:00000170
.text:00000170 ; __int32 __stdcall NCrypto::CAesCbcCoder::SetKey(NCrypto::CAesCbcCoder *this, const unsigned __int8 *, unsigned int)
.text:00000170                 public ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
.text:00000170 ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z proc near
.text:00000170                                         ; DATA XREF: .rdata:000003B0o
.text:00000170
.text:00000170 var_8           = dword ptr -8
.text:00000170 var_4           = dword ptr -4
.text:00000170 this            = dword ptr  8
.text:00000170 arg_4           = dword ptr  0Ch
.text:00000170 arg_8           = dword ptr  10h
.text:00000170
.text:00000170                 push    ebp
.text:00000171                 mov     ebp, esp
.text:00000173                 sub     esp, 8
.text:00000176                 push    esi
.text:00000177                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000017E                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000185                 mov     eax, [ebp+arg_8]
.text:00000188                 and     eax, 7
.text:0000018B                 jnz     short loc_199
.text:0000018D                 cmp     [ebp+arg_8], 10h
.text:00000191                 jb      short loc_199
.text:00000193                 cmp     [ebp+arg_8], 20h ; ' '
.text:00000197                 jbe     short loc_1A0
.text:00000199
.text:00000199 loc_199:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+1Bj
.text:00000199                                         ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+21j
.text:00000199                 mov     eax, 80070057h
.text:0000019E                 jmp     short loc_205
.text:000001A0 ; ---------------------------------------------------------------------------
.text:000001A0
.text:000001A0 loc_1A0:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+27j
.text:000001A0                 mov     ecx, [ebp+this]
.text:000001A3                 cmp     dword ptr [ecx+14h], 0
.text:000001A7                 jz      short loc_1BB
.text:000001A9                 mov     edx, [ebp+this]
.text:000001AC                 mov     eax, [ebp+arg_8]
.text:000001AF                 cmp     eax, [edx+14h]
.text:000001B2                 jz      short loc_1BB
.text:000001B4                 mov     eax, 80070057h
.text:000001B9                 jmp     short loc_205
.text:000001BB ; ---------------------------------------------------------------------------
.text:000001BB
.text:000001BB loc_1BB:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+37j
.text:000001BB                                         ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+42j
.text:000001BB                 mov     ecx, [ebp+this]
.text:000001BE                 movzx   edx, byte ptr [ecx+19h]
.text:000001C2                 test    edx, edx
.text:000001C4                 jz      short loc_1CF
.text:000001C6                 mov     [ebp+var_8], offset @Aes_SetKey_Enc@12 ; Aes_SetKey_Enc(x,x,x)
.text:000001CD                 jmp     short loc_1D6
.text:000001CF ; ---------------------------------------------------------------------------
.text:000001CF
.text:000001CF loc_1CF:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+54j
.text:000001CF                 mov     [ebp+var_8], offset @Aes_SetKey_Dec@12 ; Aes_SetKey_Dec(x,x,x)
.text:000001D6
.text:000001D6 loc_1D6:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+5Dj
.text:000001D6                 mov     eax, [ebp+var_8]
.text:000001D9                 mov     [ebp+var_4], eax
.text:000001DC                 mov     esi, esp
.text:000001DE                 mov     ecx, [ebp+arg_8]
.text:000001E1                 push    ecx
.text:000001E2                 mov     edx, [ebp+this]
.text:000001E5                 mov     eax, [edx+10h]
.text:000001E8                 mov     ecx, [ebp+this]
.text:000001EB                 lea     ecx, [ecx+eax*4+2Ch]
.text:000001EF                 mov     edx, [ebp+arg_4]
.text:000001F2                 call    [ebp+var_4]
.text:000001F5                 cmp     esi, esp
.text:000001F7                 call    __RTC_CheckEsp
.text:000001FC                 mov     edx, [ebp+this]
.text:000001FF                 mov     byte ptr [edx+18h], 1
.text:00000203                 xor     eax, eax
.text:00000205
.text:00000205 loc_205:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+2Ej
.text:00000205                                         ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+49j
.text:00000205                 pop     esi
.text:00000206                 add     esp, 8
.text:00000209                 cmp     ebp, esp
.text:0000020B                 call    __RTC_CheckEsp
.text:00000210                 mov     esp, ebp
.text:00000212                 pop     ebp
.text:00000213                 retn    0Ch
.text:00000213 ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z endp
.text:00000213
.text:00000213 ; ---------------------------------------------------------------------------
.text:00000216                 align 10h
.text:00000220
.text:00000220 ; =============== S U B R O U T I N E =======================================
.text:00000220
.text:00000220 ; Attributes: bp-based frame
.text:00000220
.text:00000220 ; __int32 __stdcall NCrypto::CAesCbcCoder::SetInitVector(NCrypto::CAesCbcCoder *this, const unsigned __int8 *Src, size_t Size)
.text:00000220                 public ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
.text:00000220 ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z proc near
.text:00000220                                         ; DATA XREF: .rdata:000003B4o
.text:00000220
.text:00000220 this            = dword ptr  8
.text:00000220 Src             = dword ptr  0Ch
.text:00000220 Size            = dword ptr  10h
.text:00000220
.text:00000220                 push    ebp
.text:00000221                 mov     ebp, esp
.text:00000223                 cmp     [ebp+Size], 10h
.text:00000227                 jz      short loc_230
.text:00000229                 mov     eax, 80070057h
.text:0000022E                 jmp     short loc_258
.text:00000230 ; ---------------------------------------------------------------------------
.text:00000230
.text:00000230 loc_230:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)+7j
.text:00000230                 mov     eax, [ebp+Size]
.text:00000233                 push    eax             ; Size
.text:00000234                 mov     ecx, [ebp+Src]
.text:00000237                 push    ecx             ; Src
.text:00000238                 mov     edx, [ebp+this]
.text:0000023B                 add     edx, 138h
.text:00000241                 push    edx             ; Dst
.text:00000242                 call    _memcpy
.text:00000247                 add     esp, 0Ch
.text:0000024A                 mov     eax, [ebp+this]
.text:0000024D                 sub     eax, 4
.text:00000250                 push    eax             ; this
.text:00000251                 call    ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.text:00000256                 xor     eax, eax
.text:00000258
.text:00000258 loc_258:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)+Ej
.text:00000258                 cmp     ebp, esp
.text:0000025A                 call    __RTC_CheckEsp
.text:0000025F                 pop     ebp
.text:00000260                 retn    0Ch
.text:00000260 ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z endp
.text:00000260
.text:00000260 ; ---------------------------------------------------------------------------
.text:00000263                 align 10h
.text:00000270
.text:00000270 ; =============== S U B R O U T I N E =======================================
.text:00000270
.text:00000270 ; Attributes: bp-based frame
.text:00000270
.text:00000270 ; bool __thiscall NCrypto::CAesCbcCoder::SetFunctions(NCrypto::CAesCbcCoder *this, unsigned int)
.text:00000270                 public ?SetFunctions@CAesCbcCoder@NCrypto@@AAE_NI@Z
.text:00000270 ?SetFunctions@CAesCbcCoder@NCrypto@@AAE_NI@Z proc near
.text:00000270                                         ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+9Ep
.text:00000270                                         ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+65p
.text:00000270
.text:00000270 var_C           = dword ptr -0Ch
.text:00000270 var_8           = dword ptr -8
.text:00000270 var_4           = dword ptr -4
.text:00000270 arg_0           = dword ptr  8
.text:00000270
.text:00000270                 push    ebp
.text:00000271                 mov     ebp, esp
.text:00000273                 sub     esp, 0Ch
.text:00000276                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000027D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000284                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000028B                 mov     [ebp+var_4], ecx
.text:0000028E                 mov     eax, [ebp+var_4]
.text:00000291                 movzx   ecx, byte ptr [eax+1Dh]
.text:00000295                 test    ecx, ecx
.text:00000297                 jz      short loc_2A4
.text:00000299                 mov     edx, dword ptr ds:_g_AesCbc_Encode
.text:0000029F                 mov     [ebp+var_8], edx
.text:000002A2                 jmp     short loc_2AC
.text:000002A4 ; ---------------------------------------------------------------------------
.text:000002A4
.text:000002A4 loc_2A4:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+27j
.text:000002A4                 mov     eax, dword ptr ds:_g_AesCbc_Decode
.text:000002A9                 mov     [ebp+var_8], eax
.text:000002AC
.text:000002AC loc_2AC:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+32j
.text:000002AC                 mov     ecx, [ebp+var_4]
.text:000002AF                 mov     edx, [ebp+var_8]
.text:000002B2                 mov     [ecx+10h], edx
.text:000002B5                 cmp     [ebp+arg_0], 1
.text:000002B9                 jnz     short loc_2DF
.text:000002BB                 mov     eax, [ebp+var_4]
.text:000002BE                 movzx   ecx, byte ptr [eax+1Dh]
.text:000002C2                 test    ecx, ecx
.text:000002C4                 jz      short loc_2CF
.text:000002C6                 mov     [ebp+var_C], offset @AesCbc_Encode@12 ; AesCbc_Encode(x,x,x)
.text:000002CD                 jmp     short loc_2D6
.text:000002CF ; ---------------------------------------------------------------------------
.text:000002CF
.text:000002CF loc_2CF:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+54j
.text:000002CF                 mov     [ebp+var_C], offset @AesCbc_Decode@12 ; AesCbc_Decode(x,x,x)
.text:000002D6
.text:000002D6 loc_2D6:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+5Dj
.text:000002D6                 mov     edx, [ebp+var_4]
.text:000002D9                 mov     eax, [ebp+var_C]
.text:000002DC                 mov     [edx+10h], eax
.text:000002DF
.text:000002DF loc_2DF:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+49j
.text:000002DF                 cmp     [ebp+arg_0], 2
.text:000002E3                 jnz     short loc_2F5
.text:000002E5                 cmp     dword ptr ds:_g_AesCbc_Encode, offset @AesCbc_Encode_Intel@12 ; AesCbc_Encode_Intel(x,x,x)
.text:000002EF                 jz      short loc_2F5
.text:000002F1                 xor     al, al
.text:000002F3                 jmp     short loc_2F7
.text:000002F5 ; ---------------------------------------------------------------------------
.text:000002F5
.text:000002F5 loc_2F5:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+73j
.text:000002F5                                         ; NCrypto::CAesCbcCoder::SetFunctions(uint)+7Fj
.text:000002F5                 mov     al, 1
.text:000002F7
.text:000002F7 loc_2F7:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+83j
.text:000002F7                 mov     esp, ebp
.text:000002F9                 pop     ebp
.text:000002FA                 retn    4
.text:000002FA ?SetFunctions@CAesCbcCoder@NCrypto@@AAE_NI@Z endp
.text:000002FA
.text:000002FA ; ---------------------------------------------------------------------------
.text:000002FD                 align 10h
.text:00000300
.text:00000300 ; =============== S U B R O U T I N E =======================================
.text:00000300
.text:00000300 ; Attributes: bp-based frame
.text:00000300
.text:00000300 ; __int32 __stdcall NCrypto::CAesCbcCoder::SetCoderProperties(NCrypto::CAesCbcCoder *this, const unsigned __int32 *, const struct tagPROPVARIANT *, unsigned int)
.text:00000300                 public ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z
.text:00000300 ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z proc near
.text:00000300                                         ; DATA XREF: .rdata:0000039Co
.text:00000300
.text:00000300 var_8           = dword ptr -8
.text:00000300 var_4           = dword ptr -4
.text:00000300 this            = dword ptr  8
.text:00000300 arg_4           = dword ptr  0Ch
.text:00000300 arg_8           = dword ptr  10h
.text:00000300 arg_C           = dword ptr  14h
.text:00000300
.text:00000300                 push    ebp
.text:00000301                 mov     ebp, esp
.text:00000303                 sub     esp, 8
.text:00000306                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000030D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000314                 mov     [ebp+var_4], 0
.text:0000031B                 jmp     short loc_326
.text:0000031D ; ---------------------------------------------------------------------------
.text:0000031D
.text:0000031D loc_31D:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint):loc_378j
.text:0000031D                 mov     eax, [ebp+var_4]
.text:00000320                 add     eax, 1
.text:00000323                 mov     [ebp+var_4], eax
.text:00000326
.text:00000326 loc_326:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+1Bj
.text:00000326                 mov     ecx, [ebp+var_4]
.text:00000329                 cmp     ecx, [ebp+arg_C]
.text:0000032C                 jnb     short loc_37A
.text:0000032E                 mov     edx, [ebp+var_4]
.text:00000331                 shl     edx, 4
.text:00000334                 add     edx, [ebp+arg_8]
.text:00000337                 mov     [ebp+var_8], edx
.text:0000033A                 mov     eax, [ebp+var_4]
.text:0000033D                 mov     ecx, [ebp+arg_4]
.text:00000340                 cmp     dword ptr [ecx+eax*4], 0
.text:00000344                 jnz     short loc_378
.text:00000346                 mov     edx, [ebp+var_8]
.text:00000349                 movzx   eax, word ptr [edx]
.text:0000034C                 cmp     eax, 13h
.text:0000034F                 jz      short loc_358
.text:00000351                 mov     eax, 80070057h
.text:00000356                 jmp     short loc_37C
.text:00000358 ; ---------------------------------------------------------------------------
.text:00000358
.text:00000358 loc_358:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+4Fj
.text:00000358                 mov     ecx, [ebp+var_8]
.text:0000035B                 mov     edx, [ecx+8]
.text:0000035E                 push    edx             ; unsigned int
.text:0000035F                 mov     ecx, [ebp+this]
.text:00000362                 sub     ecx, 8          ; this
.text:00000365                 call    ?SetFunctions@CAesCbcCoder@NCrypto@@AAE_NI@Z ; NCrypto::CAesCbcCoder::SetFunctions(uint)
.text:0000036A                 movzx   eax, al
.text:0000036D                 test    eax, eax
.text:0000036F                 jnz     short loc_378
.text:00000371                 mov     eax, 80004001h
.text:00000376                 jmp     short loc_37C
.text:00000378 ; ---------------------------------------------------------------------------
.text:00000378
.text:00000378 loc_378:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+44j
.text:00000378                                         ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+6Fj
.text:00000378                 jmp     short loc_31D
.text:0000037A ; ---------------------------------------------------------------------------
.text:0000037A
.text:0000037A loc_37A:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+2Cj
.text:0000037A                 xor     eax, eax
.text:0000037C
.text:0000037C loc_37C:                                ; CODE XREF: NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+56j
.text:0000037C                                         ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)+76j
.text:0000037C                 add     esp, 8
.text:0000037F                 cmp     ebp, esp
.text:00000381                 call    __RTC_CheckEsp
.text:00000386                 mov     esp, ebp
.text:00000388                 pop     ebp
.text:00000389                 retn    10h
.text:00000389 ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z endp
.text:00000389
.text:00000389 _text           ends
.text:00000389
.rdata:0000038C ; ===========================================================================
.rdata:0000038C
.rdata:0000038C ; Segment type: Pure data
.rdata:0000038C ; Segment permissions: Read
.rdata:0000038C _rdata          segment dword public 'DATA' use32
.rdata:0000038C                 assume cs:_rdata
.rdata:0000038C                 ;org 38Ch
.rdata:0000038C ; COMDAT (pick largest)
.rdata:0000038C                 dd offset ??_R4CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@ ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata:00000390                 public ??_7CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata:00000390 ; const NCrypto::CAesCbcCoder::`vftable'{for `ICompressSetCoderProperties'}
.rdata:00000390 ??_7CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00000390                                         ; DATA XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+4Do
.rdata:00000390                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:00000394                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.rdata:00000398                 dd offset ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.rdata:0000039C                 dd offset ?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z ; NCrypto::CAesCbcCoder::SetCoderProperties(ulong const *,tagPROPVARIANT const *,uint)
.rdata:0000039C _rdata          ends
.rdata:0000039C
.rdata:000003A0 ; ===========================================================================
.rdata:000003A0
.rdata:000003A0 ; Segment type: Pure data
.rdata:000003A0 ; Segment permissions: Read
.rdata:000003A0 _rdata          segment dword public 'DATA' use32
.rdata:000003A0                 assume cs:_rdata
.rdata:000003A0                 ;org 3A0h
.rdata:000003A0 ; COMDAT (pick largest)
.rdata:000003A0                 dd offset ??_R4CAesCbcCoder@NCrypto@@6BICryptoProperties@@@ ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata:000003A4                 public ??_7CAesCbcCoder@NCrypto@@6BICryptoProperties@@@
.rdata:000003A4 ; const NCrypto::CAesCbcCoder::`vftable'{for `ICryptoProperties'}
.rdata:000003A4 ??_7CAesCbcCoder@NCrypto@@6BICryptoProperties@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.rdata:000003A4                                         ; DATA XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+43o
.rdata:000003A4                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:000003A8                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.rdata:000003AC                 dd offset ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.rdata:000003B0                 dd offset ?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)
.rdata:000003B4                 dd offset ?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z ; NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)
.rdata:000003B4 _rdata          ends
.rdata:000003B4
.rdata:000003B8 ; ===========================================================================
.rdata:000003B8
.rdata:000003B8 ; Segment type: Pure data
.rdata:000003B8 ; Segment permissions: Read
.rdata:000003B8 _rdata          segment dword public 'DATA' use32
.rdata:000003B8                 assume cs:_rdata
.rdata:000003B8                 ;org 3B8h
.rdata:000003B8 ; COMDAT (pick largest)
.rdata:000003B8                 dd offset ??_R4CAesCbcCoder@NCrypto@@6BICompressFilter@@@ ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata:000003BC                 public ??_7CAesCbcCoder@NCrypto@@6BICompressFilter@@@
.rdata:000003BC ; const NCrypto::CAesCbcCoder::`vftable'{for `ICompressFilter'}
.rdata:000003BC ??_7CAesCbcCoder@NCrypto@@6BICompressFilter@@@ dd offset ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.rdata:000003BC                                         ; DATA XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+3Ao
.rdata:000003BC                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.rdata:000003C0                 dd offset ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.rdata:000003C4                 dd offset ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.rdata:000003C8                 dd offset ?Init@CAesCbcCoder@NCrypto@@UAGJXZ ; NCrypto::CAesCbcCoder::Init(void)
.rdata:000003CC                 dd offset ?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z ; NCrypto::CAesCbcCoder::Filter(uchar *,uint)
.rdata:000003CC _rdata          ends
.rdata:000003CC
.rtc$TMZ:000003D0 ; ===========================================================================
.rtc$TMZ:000003D0
.rtc$TMZ:000003D0 ; Segment type: Pure data
.rtc$TMZ:000003D0 ; Segment permissions: Read
.rtc$TMZ:000003D0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:000003D0                 assume cs:_rtc$TMZ
.rtc$TMZ:000003D0                 ;org 3D0h
.rtc$TMZ:000003D0 ; COMDAT (pick any)
.rtc$TMZ:000003D0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:000003D0 _rtc$TMZ        ends
.rtc$TMZ:000003D0
.rtc$IMZ:000003D4 ; ===========================================================================
.rtc$IMZ:000003D4
.rtc$IMZ:000003D4 ; Segment type: Pure data
.rtc$IMZ:000003D4 ; Segment permissions: Read
.rtc$IMZ:000003D4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:000003D4                 assume cs:_rtc$IMZ
.rtc$IMZ:000003D4                 ;org 3D4h
.rtc$IMZ:000003D4 ; COMDAT (pick any)
.rtc$IMZ:000003D4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:000003D4 _rtc$IMZ        ends
.rtc$IMZ:000003D4
.rdata$r:000003D8 ; ===========================================================================
.rdata$r:000003D8
.rdata$r:000003D8 ; Segment type: Pure data
.rdata$r:000003D8 ; Segment permissions: Read
.rdata$r:000003D8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000003D8                 assume cs:_rdata$r
.rdata$r:000003D8                 ;org 3D8h
.rdata$r:000003D8 ; COMDAT (pick any)
.rdata$r:000003D8                 public ??_R4CAesCbcCoder@NCrypto@@6BICompressFilter@@@
.rdata$r:000003D8 ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICompressFilter'}
.rdata$r:000003D8 ??_R4CAesCbcCoder@NCrypto@@6BICompressFilter@@@ db    0
.rdata$r:000003D8                                         ; DATA XREF: .rdata:000003B8o
.rdata$r:000003D9                 db    0
.rdata$r:000003DA                 db    0
.rdata$r:000003DB                 db    0
.rdata$r:000003DC                 db    0
.rdata$r:000003DD                 db    0
.rdata$r:000003DE                 db    0
.rdata$r:000003DF                 db    0
.rdata$r:000003E0                 db    0
.rdata$r:000003E1                 db    0
.rdata$r:000003E2                 db    0
.rdata$r:000003E3                 db    0
.rdata$r:000003E4                 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8 ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:000003E8                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000003E8 _rdata$r        ends
.rdata$r:000003E8
.data:000003EC ; ===========================================================================
.data:000003EC
.data:000003EC ; Segment type: Pure data
.data:000003EC ; Segment permissions: Read/Write
.data:000003EC _data           segment dword public 'DATA' use32
.data:000003EC                 assume cs:_data
.data:000003EC                 ;org 3ECh
.data:000003EC ; COMDAT (pick any)
.data:000003EC                 public ??_R0?AVCAesCbcCoder@NCrypto@@@8
.data:000003EC ; class NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.data:000003EC ??_R0?AVCAesCbcCoder@NCrypto@@@8 dd offset ??_7type_info@@6B@
.data:000003EC                                         ; DATA XREF: .rdata$r:000003E4o
.data:000003EC                                         ; .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000003EC                                         ; const type_info::`vftable'
.data:000003F0                 db    0
.data:000003F1                 db    0
.data:000003F2                 db    0
.data:000003F3                 db    0
.data:000003F4                 db  2Eh ; .
.data:000003F5                 db  3Fh ; ?
.data:000003F6                 db  41h ; A
.data:000003F7                 db  56h ; V
.data:000003F8                 db  43h ; C
.data:000003F9                 db  41h ; A
.data:000003FA                 db  65h ; e
.data:000003FB                 db  73h ; s
.data:000003FC                 db  43h ; C
.data:000003FD                 db  62h ; b
.data:000003FE                 db  63h ; c
.data:000003FF                 db  43h ; C
.data:00000400                 db  6Fh ; o
.data:00000401                 db  64h ; d
.data:00000402                 db  65h ; e
.data:00000403                 db  72h ; r
.data:00000404                 db  40h ; @
.data:00000405                 db  4Eh ; N
.data:00000406                 db  43h ; C
.data:00000407                 db  72h ; r
.data:00000408                 db  79h ; y
.data:00000409                 db  70h ; p
.data:0000040A                 db  74h ; t
.data:0000040B                 db  6Fh ; o
.data:0000040C                 db  40h ; @
.data:0000040D                 db  40h ; @
.data:0000040E                 db    0
.data:0000040F                 align 10h
.data:0000040F _data           ends
.data:0000040F
.rdata$r:00000410 ; ===========================================================================
.rdata$r:00000410
.rdata$r:00000410 ; Segment type: Pure data
.rdata$r:00000410 ; Segment permissions: Read
.rdata$r:00000410 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000410                 assume cs:_rdata$r
.rdata$r:00000410                 ;org 410h
.rdata$r:00000410 ; COMDAT (pick any)
.rdata$r:00000410                 public ??_R3CAesCbcCoder@NCrypto@@8
.rdata$r:00000410 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000410 ??_R3CAesCbcCoder@NCrypto@@8 db    0    ; DATA XREF: .rdata$r:000003E8o
.rdata$r:00000410                                         ; .rdata$r:0000045Co ...
.rdata$r:00000411                 db    0
.rdata$r:00000412                 db    0
.rdata$r:00000413                 db    0
.rdata$r:00000414                 db    5
.rdata$r:00000415                 db    0
.rdata$r:00000416                 db    0
.rdata$r:00000417                 db    0
.rdata$r:00000418                 db    8
.rdata$r:00000419                 db    0
.rdata$r:0000041A                 db    0
.rdata$r:0000041B                 db    0
.rdata$r:0000041C                 dd offset ??_R2CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:0000041C _rdata$r        ends
.rdata$r:0000041C
.rdata$r:00000420 ; ===========================================================================
.rdata$r:00000420
.rdata$r:00000420 ; Segment type: Pure data
.rdata$r:00000420 ; Segment permissions: Read
.rdata$r:00000420 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000420                 assume cs:_rdata$r
.rdata$r:00000420                 ;org 420h
.rdata$r:00000420 ; COMDAT (pick any)
.rdata$r:00000420                 public ??_R2CAesCbcCoder@NCrypto@@8
.rdata$r:00000420 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
.rdata$r:00000420 ??_R2CAesCbcCoder@NCrypto@@8 dd offset ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00000420                                         ; DATA XREF: .rdata$r:0000041Co
.rdata$r:00000420                                         ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000424                 dd offset ??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000428                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:0000042C                 dd offset ??_R13?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00000430                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00000434                 dd offset ??_R17?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00000438                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:0000043C                 dd offset ??_R1M@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00000440                 db    0
.rdata$r:00000441                 align 4
.rdata$r:00000441 _rdata$r        ends
.rdata$r:00000441
.rdata$r:00000444 ; ===========================================================================
.rdata$r:00000444
.rdata$r:00000444 ; Segment type: Pure data
.rdata$r:00000444 ; Segment permissions: Read
.rdata$r:00000444 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000444                 assume cs:_rdata$r
.rdata$r:00000444                 ;org 444h
.rdata$r:00000444 ; COMDAT (pick any)
.rdata$r:00000444                 public ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
.rdata$r:00000444 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000444 ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8
.rdata$r:00000444                                         ; DATA XREF: .rdata$r:NCrypto::CAesCbcCoder::`RTTI Base Class Array'o
.rdata$r:00000444                                         ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:00000448                 db    7
.rdata$r:00000449                 db    0
.rdata$r:0000044A                 db    0
.rdata$r:0000044B                 db    0
.rdata$r:0000044C                 db    0
.rdata$r:0000044D                 db    0
.rdata$r:0000044E                 db    0
.rdata$r:0000044F                 db    0
.rdata$r:00000450                 db 0FFh
.rdata$r:00000451                 db 0FFh
.rdata$r:00000452                 db 0FFh
.rdata$r:00000453                 db 0FFh
.rdata$r:00000454                 db    0
.rdata$r:00000455                 db    0
.rdata$r:00000456                 db    0
.rdata$r:00000457                 db    0
.rdata$r:00000458                 db  40h ; @
.rdata$r:00000459                 db    0
.rdata$r:0000045A                 db    0
.rdata$r:0000045B                 db    0
.rdata$r:0000045C                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000045C _rdata$r        ends
.rdata$r:0000045C
.rdata$r:00000460 ; ===========================================================================
.rdata$r:00000460
.rdata$r:00000460 ; Segment type: Pure data
.rdata$r:00000460 ; Segment permissions: Read
.rdata$r:00000460 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000460                 assume cs:_rdata$r
.rdata$r:00000460                 ;org 460h
.rdata$r:00000460 ; COMDAT (pick any)
.rdata$r:00000460                 public ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:00000460 ; ICompressFilter::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000460 ??_R1A@?0A@EA@ICompressFilter@@8 dd offset ??_R0?AUICompressFilter@@@8
.rdata$r:00000460                                         ; DATA XREF: .rdata$r:00000424o
.rdata$r:00000460                                         ; .rdata$r:ICompressFilter::`RTTI Base Class Array'o
.rdata$r:00000460                                         ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:00000464                 db    1
.rdata$r:00000465                 db    0
.rdata$r:00000466                 db    0
.rdata$r:00000467                 db    0
.rdata$r:00000468                 db    0
.rdata$r:00000469                 db    0
.rdata$r:0000046A                 db    0
.rdata$r:0000046B                 db    0
.rdata$r:0000046C                 db 0FFh
.rdata$r:0000046D                 db 0FFh
.rdata$r:0000046E                 db 0FFh
.rdata$r:0000046F                 db 0FFh
.rdata$r:00000470                 db    0
.rdata$r:00000471                 db    0
.rdata$r:00000472                 db    0
.rdata$r:00000473                 db    0
.rdata$r:00000474                 db  40h ; @
.rdata$r:00000475                 db    0
.rdata$r:00000476                 db    0
.rdata$r:00000477                 db    0
.rdata$r:00000478                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000478 _rdata$r        ends
.rdata$r:00000478
.data:0000047C ; ===========================================================================
.data:0000047C
.data:0000047C ; Segment type: Pure data
.data:0000047C ; Segment permissions: Read/Write
.data:0000047C _data           segment dword public 'DATA' use32
.data:0000047C                 assume cs:_data
.data:0000047C                 ;org 47Ch
.data:0000047C ; COMDAT (pick any)
.data:0000047C                 public ??_R0?AUICompressFilter@@@8
.data:0000047C ; struct ICompressFilter `RTTI Type Descriptor'
.data:0000047C ??_R0?AUICompressFilter@@@8 dd offset ??_7type_info@@6B@
.data:0000047C                                         ; DATA XREF: .rdata$r:ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:0000047C                                         ; .rdata$r:00000908o
.data:0000047C                                         ; const type_info::`vftable'
.data:00000480                 db    0
.data:00000481                 db    0
.data:00000482                 db    0
.data:00000483                 db    0
.data:00000484                 db  2Eh ; .
.data:00000485                 db  3Fh ; ?
.data:00000486                 db  41h ; A
.data:00000487                 db  55h ; U
.data:00000488                 db  49h ; I
.data:00000489                 db  43h ; C
.data:0000048A                 db  6Fh ; o
.data:0000048B                 db  6Dh ; m
.data:0000048C                 db  70h ; p
.data:0000048D                 db  72h ; r
.data:0000048E                 db  65h ; e
.data:0000048F                 db  73h ; s
.data:00000490                 db  73h ; s
.data:00000491                 db  46h ; F
.data:00000492                 db  69h ; i
.data:00000493                 db  6Ch ; l
.data:00000494                 db  74h ; t
.data:00000495                 db  65h ; e
.data:00000496                 db  72h ; r
.data:00000497                 db  40h ; @
.data:00000498                 db  40h ; @
.data:00000499                 db    0
.data:0000049A                 align 4
.data:0000049A _data           ends
.data:0000049A
.rdata$r:0000049C ; ===========================================================================
.rdata$r:0000049C
.rdata$r:0000049C ; Segment type: Pure data
.rdata$r:0000049C ; Segment permissions: Read
.rdata$r:0000049C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000049C                 assume cs:_rdata$r
.rdata$r:0000049C                 ;org 49Ch
.rdata$r:0000049C ; COMDAT (pick any)
.rdata$r:0000049C                 public ??_R3ICompressFilter@@8
.rdata$r:0000049C ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000049C ??_R3ICompressFilter@@8 db    0         ; DATA XREF: .rdata$r:00000478o
.rdata$r:0000049C                                         ; .rdata$r:0000090Co
.rdata$r:0000049D                 db    0
.rdata$r:0000049E                 db    0
.rdata$r:0000049F                 db    0
.rdata$r:000004A0                 db    0
.rdata$r:000004A1                 db    0
.rdata$r:000004A2                 db    0
.rdata$r:000004A3                 db    0
.rdata$r:000004A4                 db    2
.rdata$r:000004A5                 db    0
.rdata$r:000004A6                 db    0
.rdata$r:000004A7                 db    0
.rdata$r:000004A8                 dd offset ??_R2ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000004A8 _rdata$r        ends
.rdata$r:000004A8
.rdata$r:000004AC ; ===========================================================================
.rdata$r:000004AC
.rdata$r:000004AC ; Segment type: Pure data
.rdata$r:000004AC ; Segment permissions: Read
.rdata$r:000004AC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004AC                 assume cs:_rdata$r
.rdata$r:000004AC                 ;org 4ACh
.rdata$r:000004AC ; COMDAT (pick any)
.rdata$r:000004AC                 public ??_R2ICompressFilter@@8
.rdata$r:000004AC ; ICompressFilter::`RTTI Base Class Array'
.rdata$r:000004AC ??_R2ICompressFilter@@8 dd offset ??_R1A@?0A@EA@ICompressFilter@@8
.rdata$r:000004AC                                         ; DATA XREF: .rdata$r:000004A8o
.rdata$r:000004AC                                         ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004B0                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000004B4                 db    0
.rdata$r:000004B5                 align 4
.rdata$r:000004B5 _rdata$r        ends
.rdata$r:000004B5
.rdata$r:000004B8 ; ===========================================================================
.rdata$r:000004B8
.rdata$r:000004B8 ; Segment type: Pure data
.rdata$r:000004B8 ; Segment permissions: Read
.rdata$r:000004B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004B8                 assume cs:_rdata$r
.rdata$r:000004B8                 ;org 4B8h
.rdata$r:000004B8 ; COMDAT (pick any)
.rdata$r:000004B8                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004B8 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000004B8 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:000004B8                                         ; DATA XREF: .rdata$r:000004B0o
.rdata$r:000004B8                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:000004B8                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:000004BC                 db    0
.rdata$r:000004BD                 db    0
.rdata$r:000004BE                 db    0
.rdata$r:000004BF                 db    0
.rdata$r:000004C0                 db    0
.rdata$r:000004C1                 db    0
.rdata$r:000004C2                 db    0
.rdata$r:000004C3                 db    0
.rdata$r:000004C4                 db 0FFh
.rdata$r:000004C5                 db 0FFh
.rdata$r:000004C6                 db 0FFh
.rdata$r:000004C7                 db 0FFh
.rdata$r:000004C8                 db    0
.rdata$r:000004C9                 db    0
.rdata$r:000004CA                 db    0
.rdata$r:000004CB                 db    0
.rdata$r:000004CC                 db  40h ; @
.rdata$r:000004CD                 db    0
.rdata$r:000004CE                 db    0
.rdata$r:000004CF                 db    0
.rdata$r:000004D0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004D0 _rdata$r        ends
.rdata$r:000004D0
.data:000004D4 ; ===========================================================================
.data:000004D4
.data:000004D4 ; Segment type: Pure data
.data:000004D4 ; Segment permissions: Read/Write
.data:000004D4 _data           segment dword public 'DATA' use32
.data:000004D4                 assume cs:_data
.data:000004D4                 ;org 4D4h
.data:000004D4 ; COMDAT (pick any)
.data:000004D4                 public ??_R0?AUIUnknown@@@8
.data:000004D4 ; struct IUnknown `RTTI Type Descriptor'
.data:000004D4 ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:000004D4                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:000004D4                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:000004D4                                         ; const type_info::`vftable'
.data:000004D8                 db    0
.data:000004D9                 db    0
.data:000004DA                 db    0
.data:000004DB                 db    0
.data:000004DC                 db  2Eh ; .
.data:000004DD                 db  3Fh ; ?
.data:000004DE                 db  41h ; A
.data:000004DF                 db  55h ; U
.data:000004E0                 db  49h ; I
.data:000004E1                 db  55h ; U
.data:000004E2                 db  6Eh ; n
.data:000004E3                 db  6Bh ; k
.data:000004E4                 db  6Eh ; n
.data:000004E5                 db  6Fh ; o
.data:000004E6                 db  77h ; w
.data:000004E7                 db  6Eh ; n
.data:000004E8                 db  40h ; @
.data:000004E9                 db  40h ; @
.data:000004EA                 db    0
.data:000004EB                 align 4
.data:000004EB _data           ends
.data:000004EB
.rdata$r:000004EC ; ===========================================================================
.rdata$r:000004EC
.rdata$r:000004EC ; Segment type: Pure data
.rdata$r:000004EC ; Segment permissions: Read
.rdata$r:000004EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004EC                 assume cs:_rdata$r
.rdata$r:000004EC                 ;org 4ECh
.rdata$r:000004EC ; COMDAT (pick any)
.rdata$r:000004EC                 public ??_R3IUnknown@@8
.rdata$r:000004EC ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000004EC ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:000004D0o
.rdata$r:000004EC                                         ; .rdata$r:0000051Co ...
.rdata$r:000004ED                 db    0
.rdata$r:000004EE                 db    0
.rdata$r:000004EF                 db    0
.rdata$r:000004F0                 db    0
.rdata$r:000004F1                 db    0
.rdata$r:000004F2                 db    0
.rdata$r:000004F3                 db    0
.rdata$r:000004F4                 db    1
.rdata$r:000004F5                 db    0
.rdata$r:000004F6                 db    0
.rdata$r:000004F7                 db    0
.rdata$r:000004F8                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004F8 _rdata$r        ends
.rdata$r:000004F8
.rdata$r:000004FC ; ===========================================================================
.rdata$r:000004FC
.rdata$r:000004FC ; Segment type: Pure data
.rdata$r:000004FC ; Segment permissions: Read
.rdata$r:000004FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000004FC                 assume cs:_rdata$r
.rdata$r:000004FC                 ;org 4FCh
.rdata$r:000004FC ; COMDAT (pick any)
.rdata$r:000004FC                 public ??_R2IUnknown@@8
.rdata$r:000004FC ; IUnknown::`RTTI Base Class Array'
.rdata$r:000004FC ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:000004FC                                         ; DATA XREF: .rdata$r:000004F8o
.rdata$r:000004FC                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000500                 db    0
.rdata$r:00000501                 align 4
.rdata$r:00000501 _rdata$r        ends
.rdata$r:00000501
.rdata$r:00000504 ; ===========================================================================
.rdata$r:00000504
.rdata$r:00000504 ; Segment type: Pure data
.rdata$r:00000504 ; Segment permissions: Read
.rdata$r:00000504 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000504                 assume cs:_rdata$r
.rdata$r:00000504                 ;org 504h
.rdata$r:00000504 ; COMDAT (pick any)
.rdata$r:00000504                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00000504 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00000504 ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000504                                         ; DATA XREF: .rdata$r:00000428o
.rdata$r:00000504                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000508                 align 10h
.rdata$r:00000510                 db 0FFh
.rdata$r:00000511                 db 0FFh
.rdata$r:00000512                 db 0FFh
.rdata$r:00000513                 db 0FFh
.rdata$r:00000514                 db    0
.rdata$r:00000515                 db    0
.rdata$r:00000516                 db    0
.rdata$r:00000517                 db    0
.rdata$r:00000518                 db  42h ; B
.rdata$r:00000519                 db    0
.rdata$r:0000051A                 db    0
.rdata$r:0000051B                 db    0
.rdata$r:0000051C                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000051C _rdata$r        ends
.rdata$r:0000051C
.rdata$r:00000520 ; ===========================================================================
.rdata$r:00000520
.rdata$r:00000520 ; Segment type: Pure data
.rdata$r:00000520 ; Segment permissions: Read
.rdata$r:00000520 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000520                 assume cs:_rdata$r
.rdata$r:00000520                 ;org 520h
.rdata$r:00000520 ; COMDAT (pick any)
.rdata$r:00000520                 public ??_R13?0A@EA@ICryptoProperties@@8
.rdata$r:00000520 ; ICryptoProperties::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00000520 ??_R13?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00000520                                         ; DATA XREF: .rdata$r:0000042Co
.rdata$r:00000520                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00000524                 db    1
.rdata$r:00000525                 db    0
.rdata$r:00000526                 db    0
.rdata$r:00000527                 db    0
.rdata$r:00000528                 db    4
.rdata$r:00000529                 db    0
.rdata$r:0000052A                 db    0
.rdata$r:0000052B                 db    0
.rdata$r:0000052C                 db 0FFh
.rdata$r:0000052D                 db 0FFh
.rdata$r:0000052E                 db 0FFh
.rdata$r:0000052F                 db 0FFh
.rdata$r:00000530                 db    0
.rdata$r:00000531                 db    0
.rdata$r:00000532                 db    0
.rdata$r:00000533                 db    0
.rdata$r:00000534                 db  40h ; @
.rdata$r:00000535                 db    0
.rdata$r:00000536                 db    0
.rdata$r:00000537                 db    0
.rdata$r:00000538                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000538 _rdata$r        ends
.rdata$r:00000538
.data:0000053C ; ===========================================================================
.data:0000053C
.data:0000053C ; Segment type: Pure data
.data:0000053C ; Segment permissions: Read/Write
.data:0000053C _data           segment dword public 'DATA' use32
.data:0000053C                 assume cs:_data
.data:0000053C                 ;org 53Ch
.data:0000053C ; COMDAT (pick any)
.data:0000053C                 public ??_R0?AUICryptoProperties@@@8
.data:0000053C ; struct ICryptoProperties `RTTI Type Descriptor'
.data:0000053C ??_R0?AUICryptoProperties@@@8 dd offset ??_7type_info@@6B@
.data:0000053C                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:0000053C                                         ; .rdata$r:ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:0000053C                                         ; const type_info::`vftable'
.data:00000540                 db    0
.data:00000541                 db    0
.data:00000542                 db    0
.data:00000543                 db    0
.data:00000544                 db  2Eh ; .
.data:00000545                 db  3Fh ; ?
.data:00000546                 db  41h ; A
.data:00000547                 db  55h ; U
.data:00000548                 db  49h ; I
.data:00000549                 db  43h ; C
.data:0000054A                 db  72h ; r
.data:0000054B                 db  79h ; y
.data:0000054C                 db  70h ; p
.data:0000054D                 db  74h ; t
.data:0000054E                 db  6Fh ; o
.data:0000054F                 db  50h ; P
.data:00000550                 db  72h ; r
.data:00000551                 db  6Fh ; o
.data:00000552                 db  70h ; p
.data:00000553                 db  65h ; e
.data:00000554                 db  72h ; r
.data:00000555                 db  74h ; t
.data:00000556                 db  69h ; i
.data:00000557                 db  65h ; e
.data:00000558                 db  73h ; s
.data:00000559                 db  40h ; @
.data:0000055A                 db  40h ; @
.data:0000055B                 db    0
.data:0000055B _data           ends
.data:0000055B
.rdata$r:0000055C ; ===========================================================================
.rdata$r:0000055C
.rdata$r:0000055C ; Segment type: Pure data
.rdata$r:0000055C ; Segment permissions: Read
.rdata$r:0000055C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000055C                 assume cs:_rdata$r
.rdata$r:0000055C                 ;org 55Ch
.rdata$r:0000055C ; COMDAT (pick any)
.rdata$r:0000055C                 public ??_R3ICryptoProperties@@8
.rdata$r:0000055C ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000055C ??_R3ICryptoProperties@@8 db    0       ; DATA XREF: .rdata$r:00000538o
.rdata$r:0000055C                                         ; .rdata$r:00000590o ...
.rdata$r:0000055D                 db    0
.rdata$r:0000055E                 db    0
.rdata$r:0000055F                 db    0
.rdata$r:00000560                 db    0
.rdata$r:00000561                 db    0
.rdata$r:00000562                 db    0
.rdata$r:00000563                 db    0
.rdata$r:00000564                 db    2
.rdata$r:00000565                 db    0
.rdata$r:00000566                 db    0
.rdata$r:00000567                 db    0
.rdata$r:00000568                 dd offset ??_R2ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:00000568 _rdata$r        ends
.rdata$r:00000568
.rdata$r:0000056C ; ===========================================================================
.rdata$r:0000056C
.rdata$r:0000056C ; Segment type: Pure data
.rdata$r:0000056C ; Segment permissions: Read
.rdata$r:0000056C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000056C                 assume cs:_rdata$r
.rdata$r:0000056C                 ;org 56Ch
.rdata$r:0000056C ; COMDAT (pick any)
.rdata$r:0000056C                 public ??_R2ICryptoProperties@@8
.rdata$r:0000056C ; ICryptoProperties::`RTTI Base Class Array'
.rdata$r:0000056C ??_R2ICryptoProperties@@8 dd offset ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:0000056C                                         ; DATA XREF: .rdata$r:00000568o
.rdata$r:0000056C                                         ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000570                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000574                 db    0
.rdata$r:00000575                 align 4
.rdata$r:00000575 _rdata$r        ends
.rdata$r:00000575
.rdata$r:00000578 ; ===========================================================================
.rdata$r:00000578
.rdata$r:00000578 ; Segment type: Pure data
.rdata$r:00000578 ; Segment permissions: Read
.rdata$r:00000578 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000578                 assume cs:_rdata$r
.rdata$r:00000578                 ;org 578h
.rdata$r:00000578 ; COMDAT (pick any)
.rdata$r:00000578                 public ??_R1A@?0A@EA@ICryptoProperties@@8
.rdata$r:00000578 ; ICryptoProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000578 ??_R1A@?0A@EA@ICryptoProperties@@8 dd offset ??_R0?AUICryptoProperties@@@8
.rdata$r:00000578                                         ; DATA XREF: .rdata$r:ICryptoProperties::`RTTI Base Class Array'o
.rdata$r:00000578                                         ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:0000057C                 db    1
.rdata$r:0000057D                 db    0
.rdata$r:0000057E                 db    0
.rdata$r:0000057F                 db    0
.rdata$r:00000580                 db    0
.rdata$r:00000581                 db    0
.rdata$r:00000582                 db    0
.rdata$r:00000583                 db    0
.rdata$r:00000584                 db 0FFh
.rdata$r:00000585                 db 0FFh
.rdata$r:00000586                 db 0FFh
.rdata$r:00000587                 db 0FFh
.rdata$r:00000588                 db    0
.rdata$r:00000589                 db    0
.rdata$r:0000058A                 db    0
.rdata$r:0000058B                 db    0
.rdata$r:0000058C                 db  40h ; @
.rdata$r:0000058D                 db    0
.rdata$r:0000058E                 db    0
.rdata$r:0000058F                 db    0
.rdata$r:00000590                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000590 _rdata$r        ends
.rdata$r:00000590
.rdata$r:00000594 ; ===========================================================================
.rdata$r:00000594
.rdata$r:00000594 ; Segment type: Pure data
.rdata$r:00000594 ; Segment permissions: Read
.rdata$r:00000594 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000594                 assume cs:_rdata$r
.rdata$r:00000594                 ;org 594h
.rdata$r:00000594 ; COMDAT (pick any)
.rdata$r:00000594                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00000594 ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00000594 ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000594                                         ; DATA XREF: .rdata$r:00000430o
.rdata$r:00000594                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000598                 db    0
.rdata$r:00000599                 db    0
.rdata$r:0000059A                 db    0
.rdata$r:0000059B                 db    0
.rdata$r:0000059C                 db    4
.rdata$r:0000059D                 db    0
.rdata$r:0000059E                 db    0
.rdata$r:0000059F                 db    0
.rdata$r:000005A0                 db 0FFh
.rdata$r:000005A1                 db 0FFh
.rdata$r:000005A2                 db 0FFh
.rdata$r:000005A3                 db 0FFh
.rdata$r:000005A4                 db    0
.rdata$r:000005A5                 db    0
.rdata$r:000005A6                 db    0
.rdata$r:000005A7                 db    0
.rdata$r:000005A8                 db  42h ; B
.rdata$r:000005A9                 db    0
.rdata$r:000005AA                 db    0
.rdata$r:000005AB                 db    0
.rdata$r:000005AC                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005AC _rdata$r        ends
.rdata$r:000005AC
.rdata$r:000005B0 ; ===========================================================================
.rdata$r:000005B0
.rdata$r:000005B0 ; Segment type: Pure data
.rdata$r:000005B0 ; Segment permissions: Read
.rdata$r:000005B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005B0                 assume cs:_rdata$r
.rdata$r:000005B0                 ;org 5B0h
.rdata$r:000005B0 ; COMDAT (pick any)
.rdata$r:000005B0                 public ??_R17?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:000005B0 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:000005B0 ??_R17?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:000005B0                                         ; DATA XREF: .rdata$r:00000434o
.rdata$r:000005B0                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000005B4                 db    1
.rdata$r:000005B5                 db    0
.rdata$r:000005B6                 db    0
.rdata$r:000005B7                 db    0
.rdata$r:000005B8                 db    8
.rdata$r:000005B9                 db    0
.rdata$r:000005BA                 db    0
.rdata$r:000005BB                 db    0
.rdata$r:000005BC                 db 0FFh
.rdata$r:000005BD                 db 0FFh
.rdata$r:000005BE                 db 0FFh
.rdata$r:000005BF                 db 0FFh
.rdata$r:000005C0                 db    0
.rdata$r:000005C1                 db    0
.rdata$r:000005C2                 db    0
.rdata$r:000005C3                 db    0
.rdata$r:000005C4                 db  40h ; @
.rdata$r:000005C5                 db    0
.rdata$r:000005C6                 db    0
.rdata$r:000005C7                 db    0
.rdata$r:000005C8                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005C8 _rdata$r        ends
.rdata$r:000005C8
.data:000005CC ; ===========================================================================
.data:000005CC
.data:000005CC ; Segment type: Pure data
.data:000005CC ; Segment permissions: Read/Write
.data:000005CC _data           segment dword public 'DATA' use32
.data:000005CC                 assume cs:_data
.data:000005CC                 ;org 5CCh
.data:000005CC ; COMDAT (pick any)
.data:000005CC                 public ??_R0?AUICompressSetCoderProperties@@@8
.data:000005CC ; struct ICompressSetCoderProperties `RTTI Type Descriptor'
.data:000005CC ??_R0?AUICompressSetCoderProperties@@@8 dd offset ??_7type_info@@6B@
.data:000005CC                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:000005CC                                         ; .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:000005CC                                         ; const type_info::`vftable'
.data:000005D0                 db    0
.data:000005D1                 db    0
.data:000005D2                 db    0
.data:000005D3                 db    0
.data:000005D4                 db  2Eh ; .
.data:000005D5                 db  3Fh ; ?
.data:000005D6                 db  41h ; A
.data:000005D7                 db  55h ; U
.data:000005D8                 db  49h ; I
.data:000005D9                 db  43h ; C
.data:000005DA                 db  6Fh ; o
.data:000005DB                 db  6Dh ; m
.data:000005DC                 db  70h ; p
.data:000005DD                 db  72h ; r
.data:000005DE                 db  65h ; e
.data:000005DF                 db  73h ; s
.data:000005E0                 db  73h ; s
.data:000005E1                 db  53h ; S
.data:000005E2                 db  65h ; e
.data:000005E3                 db  74h ; t
.data:000005E4                 db  43h ; C
.data:000005E5                 db  6Fh ; o
.data:000005E6                 db  64h ; d
.data:000005E7                 db  65h ; e
.data:000005E8                 db  72h ; r
.data:000005E9                 db  50h ; P
.data:000005EA                 db  72h ; r
.data:000005EB                 db  6Fh ; o
.data:000005EC                 db  70h ; p
.data:000005ED                 db  65h ; e
.data:000005EE                 db  72h ; r
.data:000005EF                 db  74h ; t
.data:000005F0                 db  69h ; i
.data:000005F1                 db  65h ; e
.data:000005F2                 db  73h ; s
.data:000005F3                 db  40h ; @
.data:000005F4                 db  40h ; @
.data:000005F5                 db    0
.data:000005F6                 align 4
.data:000005F6 _data           ends
.data:000005F6
.rdata$r:000005F8 ; ===========================================================================
.rdata$r:000005F8
.rdata$r:000005F8 ; Segment type: Pure data
.rdata$r:000005F8 ; Segment permissions: Read
.rdata$r:000005F8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000005F8                 assume cs:_rdata$r
.rdata$r:000005F8                 ;org 5F8h
.rdata$r:000005F8 ; COMDAT (pick any)
.rdata$r:000005F8                 public ??_R3ICompressSetCoderProperties@@8
.rdata$r:000005F8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000005F8 ??_R3ICompressSetCoderProperties@@8 db    0
.rdata$r:000005F8                                         ; DATA XREF: .rdata$r:000005C8o
.rdata$r:000005F8                                         ; .rdata$r:0000062Co ...
.rdata$r:000005F9                 db    0
.rdata$r:000005FA                 db    0
.rdata$r:000005FB                 db    0
.rdata$r:000005FC                 db    0
.rdata$r:000005FD                 db    0
.rdata$r:000005FE                 db    0
.rdata$r:000005FF                 db    0
.rdata$r:00000600                 db    2
.rdata$r:00000601                 db    0
.rdata$r:00000602                 db    0
.rdata$r:00000603                 db    0
.rdata$r:00000604                 dd offset ??_R2ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000604 _rdata$r        ends
.rdata$r:00000604
.rdata$r:00000608 ; ===========================================================================
.rdata$r:00000608
.rdata$r:00000608 ; Segment type: Pure data
.rdata$r:00000608 ; Segment permissions: Read
.rdata$r:00000608 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000608                 assume cs:_rdata$r
.rdata$r:00000608                 ;org 608h
.rdata$r:00000608 ; COMDAT (pick any)
.rdata$r:00000608                 public ??_R2ICompressSetCoderProperties@@8
.rdata$r:00000608 ; ICompressSetCoderProperties::`RTTI Base Class Array'
.rdata$r:00000608 ??_R2ICompressSetCoderProperties@@8 dd offset ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000608                                         ; DATA XREF: .rdata$r:00000604o
.rdata$r:00000608                                         ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000060C                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000610                 db    0
.rdata$r:00000611                 align 4
.rdata$r:00000611 _rdata$r        ends
.rdata$r:00000611
.rdata$r:00000614 ; ===========================================================================
.rdata$r:00000614
.rdata$r:00000614 ; Segment type: Pure data
.rdata$r:00000614 ; Segment permissions: Read
.rdata$r:00000614 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000614                 assume cs:_rdata$r
.rdata$r:00000614                 ;org 614h
.rdata$r:00000614 ; COMDAT (pick any)
.rdata$r:00000614                 public ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
.rdata$r:00000614 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00000614 ??_R1A@?0A@EA@ICompressSetCoderProperties@@8 dd offset ??_R0?AUICompressSetCoderProperties@@@8
.rdata$r:00000614                                         ; DATA XREF: .rdata$r:ICompressSetCoderProperties::`RTTI Base Class Array'o
.rdata$r:00000614                                         ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:00000618                 db    1
.rdata$r:00000619                 db    0
.rdata$r:0000061A                 db    0
.rdata$r:0000061B                 db    0
.rdata$r:0000061C                 db    0
.rdata$r:0000061D                 db    0
.rdata$r:0000061E                 db    0
.rdata$r:0000061F                 db    0
.rdata$r:00000620                 db 0FFh
.rdata$r:00000621                 db 0FFh
.rdata$r:00000622                 db 0FFh
.rdata$r:00000623                 db 0FFh
.rdata$r:00000624                 db    0
.rdata$r:00000625                 db    0
.rdata$r:00000626                 db    0
.rdata$r:00000627                 db    0
.rdata$r:00000628                 db  40h ; @
.rdata$r:00000629                 db    0
.rdata$r:0000062A                 db    0
.rdata$r:0000062B                 db    0
.rdata$r:0000062C                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000062C _rdata$r        ends
.rdata$r:0000062C
.rdata$r:00000630 ; ===========================================================================
.rdata$r:00000630
.rdata$r:00000630 ; Segment type: Pure data
.rdata$r:00000630 ; Segment permissions: Read
.rdata$r:00000630 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000630                 assume cs:_rdata$r
.rdata$r:00000630                 ;org 630h
.rdata$r:00000630 ; COMDAT (pick any)
.rdata$r:00000630                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00000630 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00000630 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00000630                                         ; DATA XREF: .rdata$r:00000438o
.rdata$r:00000630                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00000634                 align 8
.rdata$r:00000638                 db    8
.rdata$r:00000639                 db    0
.rdata$r:0000063A                 db    0
.rdata$r:0000063B                 db    0
.rdata$r:0000063C                 db 0FFh
.rdata$r:0000063D                 db 0FFh
.rdata$r:0000063E                 db 0FFh
.rdata$r:0000063F                 db 0FFh
.rdata$r:00000640                 db    0
.rdata$r:00000641                 db    0
.rdata$r:00000642                 db    0
.rdata$r:00000643                 db    0
.rdata$r:00000644                 db  42h ; B
.rdata$r:00000645                 db    0
.rdata$r:00000646                 db    0
.rdata$r:00000647                 db    0
.rdata$r:00000648                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000648 _rdata$r        ends
.rdata$r:00000648
.rdata$r:0000064C ; ===========================================================================
.rdata$r:0000064C
.rdata$r:0000064C ; Segment type: Pure data
.rdata$r:0000064C ; Segment permissions: Read
.rdata$r:0000064C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000064C                 assume cs:_rdata$r
.rdata$r:0000064C                 ;org 64Ch
.rdata$r:0000064C ; COMDAT (pick any)
.rdata$r:0000064C                 public ??_R1M@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000064C ; CMyUnknownImp::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:0000064C ??_R1M@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000064C                                         ; DATA XREF: .rdata$r:0000043Co
.rdata$r:0000064C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00000650                 db    0
.rdata$r:00000651                 db    0
.rdata$r:00000652                 db    0
.rdata$r:00000653                 db    0
.rdata$r:00000654                 db  0Ch
.rdata$r:00000655                 db    0
.rdata$r:00000656                 db    0
.rdata$r:00000657                 db    0
.rdata$r:00000658                 db 0FFh
.rdata$r:00000659                 db 0FFh
.rdata$r:0000065A                 db 0FFh
.rdata$r:0000065B                 db 0FFh
.rdata$r:0000065C                 db    0
.rdata$r:0000065D                 db    0
.rdata$r:0000065E                 db    0
.rdata$r:0000065F                 db    0
.rdata$r:00000660                 db  40h ; @
.rdata$r:00000661                 db    0
.rdata$r:00000662                 db    0
.rdata$r:00000663                 db    0
.rdata$r:00000664                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000664 _rdata$r        ends
.rdata$r:00000664
.data:00000668 ; ===========================================================================
.data:00000668
.data:00000668 ; Segment type: Pure data
.data:00000668 ; Segment permissions: Read/Write
.data:00000668 _data           segment dword public 'DATA' use32
.data:00000668                 assume cs:_data
.data:00000668                 ;org 668h
.data:00000668 ; COMDAT (pick any)
.data:00000668                 public ??_R0?AVCMyUnknownImp@@@8
.data:00000668 ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00000668 ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00000668                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00000668                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00000668                                         ; const type_info::`vftable'
.data:0000066C                 align 10h
.data:00000670 a_?avcmyunknown db '.?AVCMyUnknownImp@@',0
.data:00000670 _data           ends
.data:00000670
.rdata$r:00000684 ; ===========================================================================
.rdata$r:00000684
.rdata$r:00000684 ; Segment type: Pure data
.rdata$r:00000684 ; Segment permissions: Read
.rdata$r:00000684 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000684                 assume cs:_rdata$r
.rdata$r:00000684                 ;org 684h
.rdata$r:00000684 ; COMDAT (pick any)
.rdata$r:00000684                 public ??_R3CMyUnknownImp@@8
.rdata$r:00000684 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000684 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00000664o
.rdata$r:00000684                                         ; .rdata$r:000006B4o
.rdata$r:00000685                 db    0
.rdata$r:00000686                 db    0
.rdata$r:00000687                 db    0
.rdata$r:00000688                 db    0
.rdata$r:00000689                 db    0
.rdata$r:0000068A                 db    0
.rdata$r:0000068B                 db    0
.rdata$r:0000068C                 db    1
.rdata$r:0000068D                 db    0
.rdata$r:0000068E                 db    0
.rdata$r:0000068F                 db    0
.rdata$r:00000690                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000690 _rdata$r        ends
.rdata$r:00000690
.rdata$r:00000694 ; ===========================================================================
.rdata$r:00000694
.rdata$r:00000694 ; Segment type: Pure data
.rdata$r:00000694 ; Segment permissions: Read
.rdata$r:00000694 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000694                 assume cs:_rdata$r
.rdata$r:00000694                 ;org 694h
.rdata$r:00000694 ; COMDAT (pick any)
.rdata$r:00000694                 public ??_R2CMyUnknownImp@@8
.rdata$r:00000694 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00000694 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00000694                                         ; DATA XREF: .rdata$r:00000690o
.rdata$r:00000694                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00000698                 db    0
.rdata$r:00000699                 align 4
.rdata$r:00000699 _rdata$r        ends
.rdata$r:00000699
.rdata$r:0000069C ; ===========================================================================
.rdata$r:0000069C
.rdata$r:0000069C ; Segment type: Pure data
.rdata$r:0000069C ; Segment permissions: Read
.rdata$r:0000069C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000069C                 assume cs:_rdata$r
.rdata$r:0000069C                 ;org 69Ch
.rdata$r:0000069C ; COMDAT (pick any)
.rdata$r:0000069C                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:0000069C ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000069C ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:0000069C                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:0000069C                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:000006A0                 db    0
.rdata$r:000006A1                 db    0
.rdata$r:000006A2                 db    0
.rdata$r:000006A3                 db    0
.rdata$r:000006A4                 db    0
.rdata$r:000006A5                 db    0
.rdata$r:000006A6                 db    0
.rdata$r:000006A7                 db    0
.rdata$r:000006A8                 db 0FFh
.rdata$r:000006A9                 db 0FFh
.rdata$r:000006AA                 db 0FFh
.rdata$r:000006AB                 db 0FFh
.rdata$r:000006AC                 db    0
.rdata$r:000006AD                 db    0
.rdata$r:000006AE                 db    0
.rdata$r:000006AF                 db    0
.rdata$r:000006B0                 db  40h ; @
.rdata$r:000006B1                 db    0
.rdata$r:000006B2                 db    0
.rdata$r:000006B3                 db    0
.rdata$r:000006B4                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006B4 _rdata$r        ends
.rdata$r:000006B4
.rdata$r:000006B8 ; ===========================================================================
.rdata$r:000006B8
.rdata$r:000006B8 ; Segment type: Pure data
.rdata$r:000006B8 ; Segment permissions: Read
.rdata$r:000006B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006B8                 assume cs:_rdata$r
.rdata$r:000006B8                 ;org 6B8h
.rdata$r:000006B8 ; COMDAT (pick any)
.rdata$r:000006B8                 public ??_R4CAesCbcCoder@NCrypto@@6BICryptoProperties@@@
.rdata$r:000006B8 ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICryptoProperties'}
.rdata$r:000006B8 ??_R4CAesCbcCoder@NCrypto@@6BICryptoProperties@@@ db    0
.rdata$r:000006B8                                         ; DATA XREF: .rdata:000003A0o
.rdata$r:000006B9                 db    0
.rdata$r:000006BA                 db    0
.rdata$r:000006BB                 db    0
.rdata$r:000006BC                 db    4
.rdata$r:000006BD                 db    0
.rdata$r:000006BE                 db    0
.rdata$r:000006BF                 db    0
.rdata$r:000006C0                 db    0
.rdata$r:000006C1                 db    0
.rdata$r:000006C2                 db    0
.rdata$r:000006C3                 db    0
.rdata$r:000006C4                 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8 ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:000006C8                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006C8 _rdata$r        ends
.rdata$r:000006C8
.rdata$r:000006CC ; ===========================================================================
.rdata$r:000006CC
.rdata$r:000006CC ; Segment type: Pure data
.rdata$r:000006CC ; Segment permissions: Read
.rdata$r:000006CC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000006CC                 assume cs:_rdata$r
.rdata$r:000006CC                 ;org 6CCh
.rdata$r:000006CC ; COMDAT (pick any)
.rdata$r:000006CC                 public ??_R4CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@
.rdata$r:000006CC ; const NCrypto::CAesCbcCoder::`RTTI Complete Object Locator'{for `ICompressSetCoderProperties'}
.rdata$r:000006CC ??_R4CAesCbcCoder@NCrypto@@6BICompressSetCoderProperties@@@ db    0
.rdata$r:000006CC                                         ; DATA XREF: .rdata:0000038Co
.rdata$r:000006CD                 db    0
.rdata$r:000006CE                 db    0
.rdata$r:000006CF                 db    0
.rdata$r:000006D0                 db    8
.rdata$r:000006D1                 db    0
.rdata$r:000006D2                 db    0
.rdata$r:000006D3                 db    0
.rdata$r:000006D4                 db    0
.rdata$r:000006D5                 db    0
.rdata$r:000006D6                 db    0
.rdata$r:000006D7                 db    0
.rdata$r:000006D8                 dd offset ??_R0?AVCAesCbcCoder@NCrypto@@@8 ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
.rdata$r:000006DC                 dd offset ??_R3CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
.rdata$r:000006DC _rdata$r        ends
.rdata$r:000006DC
.text:000006E0 ; ===========================================================================
.text:000006E0
.text:000006E0 ; Segment type: Pure code
.text:000006E0 ; Segment permissions: Read/Execute
.text:000006E0 _text           segment para public 'CODE' use32
.text:000006E0                 assume cs:_text
.text:000006E0                 ;org 6E0h
.text:000006E0 ; COMDAT (pick any)
.text:000006E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000006E0
.text:000006E0 ; =============== S U B R O U T I N E =======================================
.text:000006E0
.text:000006E0 ; Attributes: bp-based frame
.text:000006E0
.text:000006E0 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:000006E0                 public ??0CMyUnknownImp@@QAE@XZ
.text:000006E0 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+32p
.text:000006E0
.text:000006E0 var_4           = dword ptr -4
.text:000006E0
.text:000006E0                 push    ebp
.text:000006E1                 mov     ebp, esp
.text:000006E3                 push    ecx
.text:000006E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000006EB                 mov     [ebp+var_4], ecx
.text:000006EE                 mov     eax, [ebp+var_4]
.text:000006F1                 mov     dword ptr [eax], 0
.text:000006F7                 mov     eax, [ebp+var_4]
.text:000006FA                 mov     esp, ebp
.text:000006FC                 pop     ebp
.text:000006FD                 retn
.text:000006FD ??0CMyUnknownImp@@QAE@XZ endp
.text:000006FD
.text:000006FD ; ---------------------------------------------------------------------------
.text:000006FE                 align 10h
.text:000006FE _text           ends
.text:000006FE
.text:00000700 ; ===========================================================================
.text:00000700
.text:00000700 ; Segment type: Pure code
.text:00000700 ; Segment permissions: Read/Execute
.text:00000700 _text           segment para public 'CODE' use32
.text:00000700                 assume cs:_text
.text:00000700                 ;org 700h
.text:00000700 ; COMDAT (pick any)
.text:00000700                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000700
.text:00000700 ; =============== S U B R O U T I N E =======================================
.text:00000700
.text:00000700 ; Attributes: bp-based frame
.text:00000700
.text:00000700 ; __int32 __stdcall NCrypto::CAesCbcCoder::QueryInterface(NCrypto::CAesCbcCoder *this, const struct _GUID *Buf1, void **)
.text:00000700                 public ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
.text:00000700 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00000700                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00000700                                         ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j
.text:00000700                                         ; DATA XREF: ...
.text:00000700
.text:00000700 var_C           = dword ptr -0Ch
.text:00000700 var_8           = dword ptr -8
.text:00000700 var_4           = dword ptr -4
.text:00000700 this            = dword ptr  8
.text:00000700 Buf1            = dword ptr  0Ch
.text:00000700 arg_8           = dword ptr  10h
.text:00000700
.text:00000700                 push    ebp
.text:00000701                 mov     ebp, esp
.text:00000703                 sub     esp, 0Ch
.text:00000706                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000070D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000714                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000071B                 mov     eax, [ebp+arg_8]
.text:0000071E                 mov     dword ptr [eax], 0
.text:00000724                 push    offset _IID_IUnknown ; Buf2
.text:00000729                 mov     ecx, [ebp+Buf1]
.text:0000072C                 push    ecx             ; Buf1
.text:0000072D                 call    ___@8           ; __(x,x)
.text:00000732                 test    eax, eax
.text:00000734                 jz      short loc_758
.text:00000736                 cmp     [ebp+this], 0
.text:0000073A                 jz      short loc_747
.text:0000073C                 mov     edx, [ebp+this]
.text:0000073F                 add     edx, 4
.text:00000742                 mov     [ebp+var_4], edx
.text:00000745                 jmp     short loc_74E
.text:00000747 ; ---------------------------------------------------------------------------
.text:00000747
.text:00000747 loc_747:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+3Aj
.text:00000747                 mov     [ebp+var_4], 0
.text:0000074E
.text:0000074E loc_74E:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+45j
.text:0000074E                 mov     eax, [ebp+arg_8]
.text:00000751                 mov     ecx, [ebp+var_4]
.text:00000754                 mov     [eax], ecx
.text:00000756                 jmp     short loc_7C7
.text:00000758 ; ---------------------------------------------------------------------------
.text:00000758
.text:00000758 loc_758:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+34j
.text:00000758                 push    offset _IID_ICryptoProperties ; Buf2
.text:0000075D                 mov     edx, [ebp+Buf1]
.text:00000760                 push    edx             ; Buf1
.text:00000761                 call    ___@8           ; __(x,x)
.text:00000766                 test    eax, eax
.text:00000768                 jz      short loc_78C
.text:0000076A                 cmp     [ebp+this], 0
.text:0000076E                 jz      short loc_77B
.text:00000770                 mov     eax, [ebp+this]
.text:00000773                 add     eax, 4
.text:00000776                 mov     [ebp+var_8], eax
.text:00000779                 jmp     short loc_782
.text:0000077B ; ---------------------------------------------------------------------------
.text:0000077B
.text:0000077B loc_77B:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+6Ej
.text:0000077B                 mov     [ebp+var_8], 0
.text:00000782
.text:00000782 loc_782:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+79j
.text:00000782                 mov     ecx, [ebp+arg_8]
.text:00000785                 mov     edx, [ebp+var_8]
.text:00000788                 mov     [ecx], edx
.text:0000078A                 jmp     short loc_7C7
.text:0000078C ; ---------------------------------------------------------------------------
.text:0000078C
.text:0000078C loc_78C:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+68j
.text:0000078C                 push    offset _IID_ICompressSetCoderProperties ; Buf2
.text:00000791                 mov     eax, [ebp+Buf1]
.text:00000794                 push    eax             ; Buf1
.text:00000795                 call    ___@8           ; __(x,x)
.text:0000079A                 test    eax, eax
.text:0000079C                 jz      short loc_7C0
.text:0000079E                 cmp     [ebp+this], 0
.text:000007A2                 jz      short loc_7AF
.text:000007A4                 mov     ecx, [ebp+this]
.text:000007A7                 add     ecx, 8
.text:000007AA                 mov     [ebp+var_C], ecx
.text:000007AD                 jmp     short loc_7B6
.text:000007AF ; ---------------------------------------------------------------------------
.text:000007AF
.text:000007AF loc_7AF:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+A2j
.text:000007AF                 mov     [ebp+var_C], 0
.text:000007B6
.text:000007B6 loc_7B6:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+ADj
.text:000007B6                 mov     edx, [ebp+arg_8]
.text:000007B9                 mov     eax, [ebp+var_C]
.text:000007BC                 mov     [edx], eax
.text:000007BE                 jmp     short loc_7C7
.text:000007C0 ; ---------------------------------------------------------------------------
.text:000007C0
.text:000007C0 loc_7C0:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+9Cj
.text:000007C0                 mov     eax, 80004002h
.text:000007C5                 jmp     short loc_7D8
.text:000007C7 ; ---------------------------------------------------------------------------
.text:000007C7
.text:000007C7 loc_7C7:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+56j
.text:000007C7                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+8Aj ...
.text:000007C7                 mov     ecx, [ebp+this]
.text:000007CA                 mov     edx, [ecx+0Ch]
.text:000007CD                 add     edx, 1
.text:000007D0                 mov     eax, [ebp+this]
.text:000007D3                 mov     [eax+0Ch], edx
.text:000007D6                 xor     eax, eax
.text:000007D8
.text:000007D8 loc_7D8:                                ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+C5j
.text:000007D8                 add     esp, 0Ch
.text:000007DB                 cmp     ebp, esp
.text:000007DD                 call    __RTC_CheckEsp
.text:000007E2                 mov     esp, ebp
.text:000007E4                 pop     ebp
.text:000007E5                 retn    0Ch
.text:000007E5 ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z endp
.text:000007E5
.text:000007E5 _text           ends
.text:000007E5
.text:000007E8 ; ===========================================================================
.text:000007E8
.text:000007E8 ; Segment type: Pure code
.text:000007E8 ; Segment permissions: Read/Execute
.text:000007E8 _text           segment para public 'CODE' use32
.text:000007E8                 assume cs:_text
.text:000007E8                 ;org 7E8h
.text:000007E8 ; COMDAT (pick any)
.text:000007E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000007E8
.text:000007E8 ; =============== S U B R O U T I N E =======================================
.text:000007E8
.text:000007E8 ; Attributes: bp-based frame
.text:000007E8
.text:000007E8 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::AddRef(NCrypto::CAesCbcCoder *this)
.text:000007E8                 public ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
.text:000007E8 ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:000007E8                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)+5j
.text:000007E8                                         ; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)+5j
.text:000007E8                                         ; DATA XREF: ...
.text:000007E8
.text:000007E8 var_4           = dword ptr -4
.text:000007E8 this            = dword ptr  8
.text:000007E8
.text:000007E8                 push    ebp
.text:000007E9                 mov     ebp, esp
.text:000007EB                 push    ecx
.text:000007EC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000007F3                 mov     eax, [ebp+this]
.text:000007F6                 mov     ecx, [eax+0Ch]
.text:000007F9                 add     ecx, 1
.text:000007FC                 mov     [ebp+var_4], ecx
.text:000007FF                 mov     edx, [ebp+this]
.text:00000802                 mov     eax, [ebp+var_4]
.text:00000805                 mov     [edx+0Ch], eax
.text:00000808                 mov     eax, [ebp+var_4]
.text:0000080B                 mov     esp, ebp
.text:0000080D                 pop     ebp
.text:0000080E                 retn    4
.text:0000080E ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:0000080E
.text:0000080E ; ---------------------------------------------------------------------------
.text:00000811                 align 4
.text:00000811 _text           ends
.text:00000811
.text:00000814 ; ===========================================================================
.text:00000814
.text:00000814 ; Segment type: Pure code
.text:00000814 ; Segment permissions: Read/Execute
.text:00000814 _text           segment para public 'CODE' use32
.text:00000814                 assume cs:_text
.text:00000814                 ;org 814h
.text:00000814 ; COMDAT (pick any)
.text:00000814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000814
.text:00000814 ; =============== S U B R O U T I N E =======================================
.text:00000814
.text:00000814 ; Attributes: bp-based frame
.text:00000814
.text:00000814 ; unsigned __int32 __stdcall NCrypto::CAesCbcCoder::Release(NCrypto::CAesCbcCoder *this)
.text:00000814                 public ?Release@CAesCbcCoder@NCrypto@@UAGKXZ
.text:00000814 ?Release@CAesCbcCoder@NCrypto@@UAGKXZ proc near
.text:00000814                                         ; CODE XREF: [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)+5j
.text:00000814                                         ; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)+5j
.text:00000814                                         ; DATA XREF: ...
.text:00000814
.text:00000814 var_8           = dword ptr -8
.text:00000814 var_4           = dword ptr -4
.text:00000814 this            = dword ptr  8
.text:00000814
.text:00000814                 push    ebp
.text:00000815                 mov     ebp, esp
.text:00000817                 sub     esp, 8
.text:0000081A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000821                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000828                 mov     eax, [ebp+this]
.text:0000082B                 mov     ecx, [eax+0Ch]
.text:0000082E                 sub     ecx, 1
.text:00000831                 mov     [ebp+var_8], ecx
.text:00000834                 mov     edx, [ebp+this]
.text:00000837                 mov     eax, [ebp+var_8]
.text:0000083A                 mov     [edx+0Ch], eax
.text:0000083D                 cmp     [ebp+var_8], 0
.text:00000841                 jz      short loc_84B
.text:00000843                 mov     ecx, [ebp+this]
.text:00000846                 mov     eax, [ecx+0Ch]
.text:00000849                 jmp     short loc_85F
.text:0000084B ; ---------------------------------------------------------------------------
.text:0000084B
.text:0000084B loc_84B:                                ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+2Dj
.text:0000084B                 mov     edx, [ebp+this]
.text:0000084E                 mov     [ebp+var_4], edx
.text:00000851                 mov     eax, [ebp+var_4]
.text:00000854                 push    eax             ; void *
.text:00000855                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000085A                 add     esp, 4
.text:0000085D                 xor     eax, eax
.text:0000085F
.text:0000085F loc_85F:                                ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+35j
.text:0000085F                 add     esp, 8
.text:00000862                 cmp     ebp, esp
.text:00000864                 call    __RTC_CheckEsp
.text:00000869                 mov     esp, ebp
.text:0000086B                 pop     ebp
.text:0000086C                 retn    4
.text:0000086C ?Release@CAesCbcCoder@NCrypto@@UAGKXZ endp
.text:0000086C
.text:0000086C ; ---------------------------------------------------------------------------
.text:0000086F                 align 10h
.text:0000086F _text           ends
.text:0000086F
.text:00000870 ; ===========================================================================
.text:00000870
.text:00000870 ; Segment type: Pure code
.text:00000870 ; Segment permissions: Read/Execute
.text:00000870 _text           segment para public 'CODE' use32
.text:00000870                 assume cs:_text
.text:00000870                 ;org 870h
.text:00000870 ; COMDAT (pick any)
.text:00000870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000870
.text:00000870 ; =============== S U B R O U T I N E =======================================
.text:00000870
.text:00000870 ; Attributes: bp-based frame
.text:00000870
.text:00000870 ; int __stdcall __(void *Buf1, void *Buf2)
.text:00000870                 public ___@8
.text:00000870 ___@8           proc near               ; CODE XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+2Dp
.text:00000870                                         ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+61p ...
.text:00000870
.text:00000870 Buf1            = dword ptr  8
.text:00000870 Buf2            = dword ptr  0Ch
.text:00000870
.text:00000870                 push    ebp
.text:00000871                 mov     ebp, esp
.text:00000873                 mov     eax, [ebp+Buf2]
.text:00000876                 push    eax             ; Buf2
.text:00000877                 mov     ecx, [ebp+Buf1]
.text:0000087A                 push    ecx             ; Buf1
.text:0000087B                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:00000880                 cmp     ebp, esp
.text:00000882                 call    __RTC_CheckEsp
.text:00000887                 pop     ebp
.text:00000888                 retn    8
.text:00000888 ___@8           endp
.text:00000888
.text:00000888 ; ---------------------------------------------------------------------------
.text:0000088B                 align 4
.text:0000088B _text           ends
.text:0000088B
.text:0000088C ; ===========================================================================
.text:0000088C
.text:0000088C ; Segment type: Pure code
.text:0000088C ; Segment permissions: Read/Execute
.text:0000088C _text           segment para public 'CODE' use32
.text:0000088C                 assume cs:_text
.text:0000088C                 ;org 88Ch
.text:0000088C ; COMDAT (pick any)
.text:0000088C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000088C
.text:0000088C ; =============== S U B R O U T I N E =======================================
.text:0000088C
.text:0000088C ; Attributes: bp-based frame
.text:0000088C
.text:0000088C ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:0000088C                 public _IsEqualGUID@8
.text:0000088C _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:0000088C
.text:0000088C Buf1            = dword ptr  8
.text:0000088C Buf2            = dword ptr  0Ch
.text:0000088C
.text:0000088C                 push    ebp
.text:0000088D                 mov     ebp, esp
.text:0000088F                 push    10h             ; Size
.text:00000891                 mov     eax, [ebp+Buf2]
.text:00000894                 push    eax             ; Buf2
.text:00000895                 mov     ecx, [ebp+Buf1]
.text:00000898                 push    ecx             ; Buf1
.text:00000899                 call    _memcmp
.text:0000089E                 add     esp, 0Ch
.text:000008A1                 neg     eax
.text:000008A3                 sbb     eax, eax
.text:000008A5                 add     eax, 1
.text:000008A8                 cmp     ebp, esp
.text:000008AA                 call    __RTC_CheckEsp
.text:000008AF                 pop     ebp
.text:000008B0                 retn    8
.text:000008B0 _IsEqualGUID@8  endp
.text:000008B0
.text:000008B0 ; ---------------------------------------------------------------------------
.text:000008B3                 align 4
.text:000008B3 _text           ends
.text:000008B3
.text:000008B4 ; ===========================================================================
.text:000008B4
.text:000008B4 ; Segment type: Pure code
.text:000008B4 ; Segment permissions: Read/Execute
.text:000008B4 _text           segment para public 'CODE' use32
.text:000008B4                 assume cs:_text
.text:000008B4                 ;org 8B4h
.text:000008B4 ; COMDAT (pick any)
.text:000008B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000008B4
.text:000008B4 ; =============== S U B R O U T I N E =======================================
.text:000008B4
.text:000008B4 ; Attributes: bp-based frame
.text:000008B4
.text:000008B4 ; _DWORD __thiscall ICompressFilter::ICompressFilter(ICompressFilter *__hidden this)
.text:000008B4                 public ??0ICompressFilter@@QAE@XZ
.text:000008B4 ??0ICompressFilter@@QAE@XZ proc near    ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+11p
.text:000008B4
.text:000008B4 var_4           = dword ptr -4
.text:000008B4
.text:000008B4                 push    ebp
.text:000008B5                 mov     ebp, esp
.text:000008B7                 push    ecx
.text:000008B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008BF                 mov     [ebp+var_4], ecx
.text:000008C2                 mov     ecx, [ebp+var_4]
.text:000008C5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000008CA                 mov     eax, [ebp+var_4]
.text:000008CD                 mov     dword ptr [eax], offset ??_7ICompressFilter@@6B@ ; const ICompressFilter::`vftable'
.text:000008D3                 mov     eax, [ebp+var_4]
.text:000008D6                 add     esp, 4
.text:000008D9                 cmp     ebp, esp
.text:000008DB                 call    __RTC_CheckEsp
.text:000008E0                 mov     esp, ebp
.text:000008E2                 pop     ebp
.text:000008E3                 retn
.text:000008E3 ??0ICompressFilter@@QAE@XZ endp
.text:000008E3
.text:000008E3 _text           ends
.text:000008E3
.rdata:000008E4 ; ===========================================================================
.rdata:000008E4
.rdata:000008E4 ; Segment type: Pure data
.rdata:000008E4 ; Segment permissions: Read
.rdata:000008E4 _rdata          segment dword public 'DATA' use32
.rdata:000008E4                 assume cs:_rdata
.rdata:000008E4                 ;org 8E4h
.rdata:000008E4 ; COMDAT (pick largest)
.rdata:000008E4                 dd offset ??_R4ICompressFilter@@6B@ ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata:000008E8                 public ??_7ICompressFilter@@6B@
.rdata:000008E8 ; const ICompressFilter::`vftable'
.rdata:000008E8 ??_7ICompressFilter@@6B@ dd offset __purecall
.rdata:000008E8                                         ; DATA XREF: ICompressFilter::ICompressFilter(void)+19o
.rdata:000008EC                 dd offset __purecall
.rdata:000008F0                 dd offset __purecall
.rdata:000008F4                 dd offset __purecall
.rdata:000008F8                 dd offset __purecall
.rdata:000008F8 _rdata          ends
.rdata:000008F8
.rdata$r:000008FC ; ===========================================================================
.rdata$r:000008FC
.rdata$r:000008FC ; Segment type: Pure data
.rdata$r:000008FC ; Segment permissions: Read
.rdata$r:000008FC _rdata$r        segment dword public 'DATA' use32
.rdata$r:000008FC                 assume cs:_rdata$r
.rdata$r:000008FC                 ;org 8FCh
.rdata$r:000008FC ; COMDAT (pick any)
.rdata$r:000008FC                 public ??_R4ICompressFilter@@6B@
.rdata$r:000008FC ; const ICompressFilter::`RTTI Complete Object Locator'
.rdata$r:000008FC ??_R4ICompressFilter@@6B@ db    0       ; DATA XREF: .rdata:000008E4o
.rdata$r:000008FD                 db    0
.rdata$r:000008FE                 db    0
.rdata$r:000008FF                 db    0
.rdata$r:00000900                 db    0
.rdata$r:00000901                 db    0
.rdata$r:00000902                 db    0
.rdata$r:00000903                 db    0
.rdata$r:00000904                 db    0
.rdata$r:00000905                 db    0
.rdata$r:00000906                 db    0
.rdata$r:00000907                 db    0
.rdata$r:00000908                 dd offset ??_R0?AUICompressFilter@@@8 ; ICompressFilter `RTTI Type Descriptor'
.rdata$r:0000090C                 dd offset ??_R3ICompressFilter@@8 ; ICompressFilter::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000090C _rdata$r        ends
.rdata$r:0000090C
.text:00000910 ; ===========================================================================
.text:00000910
.text:00000910 ; Segment type: Pure code
.text:00000910 ; Segment permissions: Read/Execute
.text:00000910 _text           segment para public 'CODE' use32
.text:00000910                 assume cs:_text
.text:00000910                 ;org 910h
.text:00000910 ; COMDAT (pick any)
.text:00000910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000910
.text:00000910 ; =============== S U B R O U T I N E =======================================
.text:00000910
.text:00000910 ; Attributes: bp-based frame
.text:00000910
.text:00000910 ; _DWORD __thiscall ICryptoProperties::ICryptoProperties(ICryptoProperties *__hidden this)
.text:00000910                 public ??0ICryptoProperties@@QAE@XZ
.text:00000910 ??0ICryptoProperties@@QAE@XZ proc near  ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+1Cp
.text:00000910
.text:00000910 var_4           = dword ptr -4
.text:00000910
.text:00000910                 push    ebp
.text:00000911                 mov     ebp, esp
.text:00000913                 push    ecx
.text:00000914                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000091B                 mov     [ebp+var_4], ecx
.text:0000091E                 mov     ecx, [ebp+var_4]
.text:00000921                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000926                 mov     eax, [ebp+var_4]
.text:00000929                 mov     dword ptr [eax], offset ??_7ICryptoProperties@@6B@ ; const ICryptoProperties::`vftable'
.text:0000092F                 mov     eax, [ebp+var_4]
.text:00000932                 add     esp, 4
.text:00000935                 cmp     ebp, esp
.text:00000937                 call    __RTC_CheckEsp
.text:0000093C                 mov     esp, ebp
.text:0000093E                 pop     ebp
.text:0000093F                 retn
.text:0000093F ??0ICryptoProperties@@QAE@XZ endp
.text:0000093F
.text:0000093F _text           ends
.text:0000093F
.rdata:00000940 ; ===========================================================================
.rdata:00000940
.rdata:00000940 ; Segment type: Pure data
.rdata:00000940 ; Segment permissions: Read
.rdata:00000940 _rdata          segment dword public 'DATA' use32
.rdata:00000940                 assume cs:_rdata
.rdata:00000940                 ;org 940h
.rdata:00000940 ; COMDAT (pick largest)
.rdata:00000940                 dd offset ??_R4ICryptoProperties@@6B@ ; const ICryptoProperties::`RTTI Complete Object Locator'
.rdata:00000944                 public ??_7ICryptoProperties@@6B@
.rdata:00000944 ; const ICryptoProperties::`vftable'
.rdata:00000944 ??_7ICryptoProperties@@6B@ dd offset __purecall
.rdata:00000944                                         ; DATA XREF: ICryptoProperties::ICryptoProperties(void)+19o
.rdata:00000948                 dd offset __purecall
.rdata:0000094C                 dd offset __purecall
.rdata:00000950                 dd offset __purecall
.rdata:00000954                 dd offset __purecall
.rdata:00000954 _rdata          ends
.rdata:00000954
.rdata$r:00000958 ; ===========================================================================
.rdata$r:00000958
.rdata$r:00000958 ; Segment type: Pure data
.rdata$r:00000958 ; Segment permissions: Read
.rdata$r:00000958 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00000958                 assume cs:_rdata$r
.rdata$r:00000958                 ;org 958h
.rdata$r:00000958 ; COMDAT (pick any)
.rdata$r:00000958                 public ??_R4ICryptoProperties@@6B@
.rdata$r:00000958 ; const ICryptoProperties::`RTTI Complete Object Locator'
.rdata$r:00000958 ??_R4ICryptoProperties@@6B@ db    0     ; DATA XREF: .rdata:00000940o
.rdata$r:00000959                 db    0
.rdata$r:0000095A                 db    0
.rdata$r:0000095B                 db    0
.rdata$r:0000095C                 db    0
.rdata$r:0000095D                 db    0
.rdata$r:0000095E                 db    0
.rdata$r:0000095F                 db    0
.rdata$r:00000960                 db    0
.rdata$r:00000961                 db    0
.rdata$r:00000962                 db    0
.rdata$r:00000963                 db    0
.rdata$r:00000964                 dd offset ??_R0?AUICryptoProperties@@@8 ; ICryptoProperties `RTTI Type Descriptor'
.rdata$r:00000968                 dd offset ??_R3ICryptoProperties@@8 ; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00000968 _rdata$r        ends
.rdata$r:00000968
.text:0000096C ; ===========================================================================
.text:0000096C
.text:0000096C ; Segment type: Pure code
.text:0000096C ; Segment permissions: Read/Execute
.text:0000096C _text           segment para public 'CODE' use32
.text:0000096C                 assume cs:_text
.text:0000096C                 ;org 96Ch
.text:0000096C ; COMDAT (pick any)
.text:0000096C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000096C
.text:0000096C ; =============== S U B R O U T I N E =======================================
.text:0000096C
.text:0000096C ; Attributes: bp-based frame
.text:0000096C
.text:0000096C ; _DWORD __thiscall ICompressSetCoderProperties::ICompressSetCoderProperties(ICompressSetCoderProperties *__hidden this)
.text:0000096C                 public ??0ICompressSetCoderProperties@@QAE@XZ
.text:0000096C ??0ICompressSetCoderProperties@@QAE@XZ proc near
.text:0000096C                                         ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+27p
.text:0000096C
.text:0000096C var_4           = dword ptr -4
.text:0000096C
.text:0000096C                 push    ebp
.text:0000096D                 mov     ebp, esp
.text:0000096F                 push    ecx
.text:00000970                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000977                 mov     [ebp+var_4], ecx
.text:0000097A                 mov     ecx, [ebp+var_4]
.text:0000097D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00000982                 mov     eax, [ebp+var_4]
.text:00000985                 mov     dword ptr [eax], offset ??_7ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`vftable'
.text:0000098B                 mov     eax, [ebp+var_4]
.text:0000098E                 add     esp, 4
.text:00000991                 cmp     ebp, esp
.text:00000993                 call    __RTC_CheckEsp
.text:00000998                 mov     esp, ebp
.text:0000099A                 pop     ebp
.text:0000099B                 retn
.text:0000099B ??0ICompressSetCoderProperties@@QAE@XZ endp
.text:0000099B
.text:0000099B _text           ends
.text:0000099B
.rdata:0000099C ; ===========================================================================
.rdata:0000099C
.rdata:0000099C ; Segment type: Pure data
.rdata:0000099C ; Segment permissions: Read
.rdata:0000099C _rdata          segment dword public 'DATA' use32
.rdata:0000099C                 assume cs:_rdata
.rdata:0000099C                 ;org 99Ch
.rdata:0000099C ; COMDAT (pick largest)
.rdata:0000099C                 dd offset ??_R4ICompressSetCoderProperties@@6B@ ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata:000009A0                 public ??_7ICompressSetCoderProperties@@6B@
.rdata:000009A0 ; const ICompressSetCoderProperties::`vftable'
.rdata:000009A0 ??_7ICompressSetCoderProperties@@6B@ dd offset __purecall
.rdata:000009A0                                         ; DATA XREF: ICompressSetCoderProperties::ICompressSetCoderProperties(void)+19o
.rdata:000009A4                 dd offset __purecall
.rdata:000009A8                 dd offset __purecall
.rdata:000009AC                 dd offset __purecall
.rdata:000009AC _rdata          ends
.rdata:000009AC
.rdata$r:000009B0 ; ===========================================================================
.rdata$r:000009B0
.rdata$r:000009B0 ; Segment type: Pure data
.rdata$r:000009B0 ; Segment permissions: Read
.rdata$r:000009B0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000009B0                 assume cs:_rdata$r
.rdata$r:000009B0                 ;org 9B0h
.rdata$r:000009B0 ; COMDAT (pick any)
.rdata$r:000009B0                 public ??_R4ICompressSetCoderProperties@@6B@
.rdata$r:000009B0 ; const ICompressSetCoderProperties::`RTTI Complete Object Locator'
.rdata$r:000009B0 ??_R4ICompressSetCoderProperties@@6B@ db    0
.rdata$r:000009B0                                         ; DATA XREF: .rdata:0000099Co
.rdata$r:000009B1                 db    0
.rdata$r:000009B2                 db    0
.rdata$r:000009B3                 db    0
.rdata$r:000009B4                 db    0
.rdata$r:000009B5                 db    0
.rdata$r:000009B6                 db    0
.rdata$r:000009B7                 db    0
.rdata$r:000009B8                 db    0
.rdata$r:000009B9                 db    0
.rdata$r:000009BA                 db    0
.rdata$r:000009BB                 db    0
.rdata$r:000009BC                 dd offset ??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties `RTTI Type Descriptor'
.rdata$r:000009C0                 dd offset ??_R3ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:000009C0 _rdata$r        ends
.rdata$r:000009C0
.text:000009C4 ; ===========================================================================
.text:000009C4
.text:000009C4 ; Segment type: Pure code
.text:000009C4 ; Segment permissions: Read/Execute
.text:000009C4 _text           segment para public 'CODE' use32
.text:000009C4                 assume cs:_text
.text:000009C4                 ;org 9C4h
.text:000009C4 ; COMDAT (pick any)
.text:000009C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009C4
.text:000009C4 ; =============== S U B R O U T I N E =======================================
.text:000009C4
.text:000009C4 ; Attributes: bp-based frame
.text:000009C4
.text:000009C4 ; public: __thiscall IUnknown::IUnknown(void)
.text:000009C4                 public ??0IUnknown@@QAE@XZ
.text:000009C4 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: ICompressFilter::ICompressFilter(void)+11p
.text:000009C4                                         ; ICryptoProperties::ICryptoProperties(void)+11p ...
.text:000009C4
.text:000009C4 var_4           = dword ptr -4
.text:000009C4
.text:000009C4                 push    ebp
.text:000009C5                 mov     ebp, esp
.text:000009C7                 push    ecx
.text:000009C8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000009CF                 mov     [ebp+var_4], ecx
.text:000009D2                 mov     eax, [ebp+var_4]
.text:000009D5                 mov     esp, ebp
.text:000009D7                 pop     ebp
.text:000009D8                 retn
.text:000009D8 ??0IUnknown@@QAE@XZ endp
.text:000009D8
.text:000009D8 ; ---------------------------------------------------------------------------
.text:000009D9                 align 4
.text:000009D9 _text           ends
.text:000009D9
.text:000009DC ; ===========================================================================
.text:000009DC
.text:000009DC ; Segment type: Pure code
.text:000009DC ; Segment permissions: Read/Execute
.text:000009DC _text           segment para public 'CODE' use32
.text:000009DC                 assume cs:_text
.text:000009DC                 ;org 9DCh
.text:000009DC ; COMDAT (pick any)
.text:000009DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009DC
.text:000009DC ; =============== S U B R O U T I N E =======================================
.text:000009DC
.text:000009DC
.text:000009DC ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{4}' (void)
.text:000009DC                 public ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:000009DC ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ proc near
.text:000009DC                                         ; DATA XREF: .rdata:000003ACo
.text:000009DC
.text:000009DC arg_0           = dword ptr  4
.text:000009DC
.text:000009DC                 sub     [esp+arg_0], 4
.text:000009E1                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:000009E1 ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:000009E1
.text:000009E1 ; ---------------------------------------------------------------------------
.text:000009E6                 align 4
.text:000009E6 _text           ends
.text:000009E6
.text:000009E8 ; ===========================================================================
.text:000009E8
.text:000009E8 ; Segment type: Pure code
.text:000009E8 ; Segment permissions: Read/Execute
.text:000009E8 _text           segment para public 'CODE' use32
.text:000009E8                 assume cs:_text
.text:000009E8                 ;org 9E8h
.text:000009E8 ; COMDAT (pick any)
.text:000009E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009E8
.text:000009E8 ; =============== S U B R O U T I N E =======================================
.text:000009E8
.text:000009E8
.text:000009E8 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::Release`adjustor{8}' (void)
.text:000009E8                 public ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:000009E8 ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ proc near
.text:000009E8                                         ; DATA XREF: .rdata:00000398o
.text:000009E8
.text:000009E8 arg_0           = dword ptr  4
.text:000009E8
.text:000009E8                 sub     [esp+arg_0], 8
.text:000009ED                 jmp     ?Release@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::Release(void)
.text:000009ED ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:000009ED
.text:000009ED ; ---------------------------------------------------------------------------
.text:000009F2                 align 4
.text:000009F2 _text           ends
.text:000009F2
.text:000009F4 ; ===========================================================================
.text:000009F4
.text:000009F4 ; Segment type: Pure code
.text:000009F4 ; Segment permissions: Read/Execute
.text:000009F4 _text           segment para public 'CODE' use32
.text:000009F4                 assume cs:_text
.text:000009F4                 ;org 9F4h
.text:000009F4 ; COMDAT (pick any)
.text:000009F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000009F4
.text:000009F4 ; =============== S U B R O U T I N E =======================================
.text:000009F4
.text:000009F4
.text:000009F4 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{4}' (void)
.text:000009F4                 public ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
.text:000009F4 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ proc near ; DATA XREF: .rdata:000003A8o
.text:000009F4
.text:000009F4 arg_0           = dword ptr  4
.text:000009F4
.text:000009F4                 sub     [esp+arg_0], 4
.text:000009F9                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:000009F9 ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ endp
.text:000009F9
.text:000009F9 ; ---------------------------------------------------------------------------
.text:000009FE                 align 10h
.text:000009FE _text           ends
.text:000009FE
.text:00000A00 ; ===========================================================================
.text:00000A00
.text:00000A00 ; Segment type: Pure code
.text:00000A00 ; Segment permissions: Read/Execute
.text:00000A00 _text           segment para public 'CODE' use32
.text:00000A00                 assume cs:_text
.text:00000A00                 ;org 0A00h
.text:00000A00 ; COMDAT (pick any)
.text:00000A00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A00
.text:00000A00 ; =============== S U B R O U T I N E =======================================
.text:00000A00
.text:00000A00
.text:00000A00 ; [thunk]:public: virtual unsigned long __stdcall NCrypto::CAesCbcCoder::AddRef`adjustor{8}' (void)
.text:00000A00                 public ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
.text:00000A00 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ proc near ; DATA XREF: .rdata:00000394o
.text:00000A00
.text:00000A00 arg_0           = dword ptr  4
.text:00000A00
.text:00000A00                 sub     [esp+arg_0], 8
.text:00000A05                 jmp     ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ; NCrypto::CAesCbcCoder::AddRef(void)
.text:00000A05 ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ endp
.text:00000A05
.text:00000A05 ; ---------------------------------------------------------------------------
.text:00000A0A                 align 4
.text:00000A0A _text           ends
.text:00000A0A
.text:00000A0C ; ===========================================================================
.text:00000A0C
.text:00000A0C ; Segment type: Pure code
.text:00000A0C ; Segment permissions: Read/Execute
.text:00000A0C _text           segment para public 'CODE' use32
.text:00000A0C                 assume cs:_text
.text:00000A0C                 ;org 0A0Ch
.text:00000A0C ; COMDAT (pick any)
.text:00000A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A0C
.text:00000A0C ; =============== S U B R O U T I N E =======================================
.text:00000A0C
.text:00000A0C
.text:00000A0C ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00000A0C                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
.text:00000A0C ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00000A0C                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcCoder::`vftable'{for `ICryptoProperties'}o
.text:00000A0C
.text:00000A0C arg_0           = dword ptr  4
.text:00000A0C
.text:00000A0C                 sub     [esp+arg_0], 4
.text:00000A11                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00000A11 ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00000A11
.text:00000A11 ; ---------------------------------------------------------------------------
.text:00000A16                 align 4
.text:00000A16 _text           ends
.text:00000A16
.text:00000A18 ; ===========================================================================
.text:00000A18
.text:00000A18 ; Segment type: Pure code
.text:00000A18 ; Segment permissions: Read/Execute
.text:00000A18 _text           segment para public 'CODE' use32
.text:00000A18                 assume cs:_text
.text:00000A18                 ;org 0A18h
.text:00000A18 ; COMDAT (pick any)
.text:00000A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A18
.text:00000A18 ; =============== S U B R O U T I N E =======================================
.text:00000A18
.text:00000A18
.text:00000A18 ; [thunk]:public: virtual long __stdcall NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:00000A18                 public ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
.text:00000A18 ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:00000A18                                         ; DATA XREF: .rdata:const NCrypto::CAesCbcCoder::`vftable'{for `ICompressSetCoderProperties'}o
.text:00000A18
.text:00000A18 arg_0           = dword ptr  4
.text:00000A18
.text:00000A18                 sub     [esp+arg_0], 8
.text:00000A1D                 jmp     ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)
.text:00000A1D ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z endp
.text:00000A1D
.text:00000A1D ; ---------------------------------------------------------------------------
.text:00000A22                 align 4
.text:00000A22 _text           ends
.text:00000A22
.text$yc:00000A24 ; ===========================================================================
.text$yc:00000A24
.text$yc:00000A24 ; Segment type: Pure code
.text$yc:00000A24 ; Segment permissions: Read/Execute
.text$yc:00000A24 _text$yc        segment para public 'CODE' use32
.text$yc:00000A24                 assume cs:_text$yc
.text$yc:00000A24                 ;org 0A24h
.text$yc:00000A24 ; COMDAT (pick any)
.text$yc:00000A24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:00000A24
.text$yc:00000A24 ; =============== S U B R O U T I N E =======================================
.text$yc:00000A24
.text$yc:00000A24 ; Attributes: bp-based frame
.text$yc:00000A24
.text$yc:00000A24 ; void __cdecl NCrypto::`dynamic initializer for 'g_AesTabInit''(void)
.text$yc:00000A24 ??__Eg_AesTabInit@NCrypto@@YAXXZ proc near
.text$yc:00000A24                                         ; DATA XREF: .CRT$XCU:_g_AesTabInit$initializer$o
.text$yc:00000A24                 push    ebp
.text$yc:00000A25                 mov     ebp, esp
.text$yc:00000A27                 mov     ecx, offset _g_AesTabInit ; this
.text$yc:00000A2C                 call    ??0CAesTabInit@NCrypto@@QAE@XZ ; NCrypto::CAesTabInit::CAesTabInit(void)
.text$yc:00000A31                 cmp     ebp, esp
.text$yc:00000A33                 call    __RTC_CheckEsp
.text$yc:00000A38                 pop     ebp
.text$yc:00000A39                 retn
.text$yc:00000A39 ??__Eg_AesTabInit@NCrypto@@YAXXZ endp
.text$yc:00000A39
.text$yc:00000A39 ; ---------------------------------------------------------------------------
.text$yc:00000A3A                 align 4
.text$yc:00000A3A _text$yc        ends
.text$yc:00000A3A
.text:00000A3C ; ===========================================================================
.text:00000A3C
.text:00000A3C ; Segment type: Pure code
.text:00000A3C ; Segment permissions: Read/Execute
.text:00000A3C _text           segment para public 'CODE' use32
.text:00000A3C                 assume cs:_text
.text:00000A3C                 ;org 0A3Ch
.text:00000A3C ; COMDAT (pick any)
.text:00000A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000A3C
.text:00000A3C ; =============== S U B R O U T I N E =======================================
.text:00000A3C
.text:00000A3C ; Attributes: bp-based frame
.text:00000A3C
.text:00000A3C ; _DWORD __thiscall NCrypto::CAesTabInit::CAesTabInit(NCrypto::CAesTabInit *__hidden this)
.text:00000A3C                 public ??0CAesTabInit@NCrypto@@QAE@XZ
.text:00000A3C ??0CAesTabInit@NCrypto@@QAE@XZ proc near
.text:00000A3C                                         ; CODE XREF: NCrypto::`dynamic initializer for 'g_AesTabInit''(void)+8p
.text:00000A3C
.text:00000A3C var_4           = dword ptr -4
.text:00000A3C
.text:00000A3C                 push    ebp
.text:00000A3D                 mov     ebp, esp
.text:00000A3F                 push    ecx
.text:00000A40                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000A47                 mov     [ebp+var_4], ecx
.text:00000A4A                 call    _AesGenTables@0 ; AesGenTables()
.text:00000A4F                 mov     eax, [ebp+var_4]
.text:00000A52                 add     esp, 4
.text:00000A55                 cmp     ebp, esp
.text:00000A57                 call    __RTC_CheckEsp
.text:00000A5C                 mov     esp, ebp
.text:00000A5E                 pop     ebp
.text:00000A5F                 retn
.text:00000A5F ??0CAesTabInit@NCrypto@@QAE@XZ endp
.text:00000A5F
.text:00000A5F _text           ends
.text:00000A5F
.bss:00000A60 ; ===========================================================================
.bss:00000A60
.bss:00000A60 ; Segment type: Uninitialized
.bss:00000A60 ; Segment permissions: Read/Write
.bss:00000A60 _bss            segment byte public 'BSS' use32
.bss:00000A60                 assume cs:_bss
.bss:00000A60                 ;org 0A60h
.bss:00000A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000A60 ; NCrypto::CAesTabInit g_AesTabInit
.bss:00000A60 _g_AesTabInit   db    ? ;               ; DATA XREF: NCrypto::`dynamic initializer for 'g_AesTabInit''(void)+3o
.bss:00000A61                 align 4
.bss:00000A61 _bss            ends
.bss:00000A61
.CRT$XCU:00000A64 ; ===========================================================================
.CRT$XCU:00000A64
.CRT$XCU:00000A64 ; Segment type: Pure data
.CRT$XCU:00000A64 ; Segment permissions: Read
.CRT$XCU:00000A64 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000A64                 assume cs:_CRT$XCU
.CRT$XCU:00000A64                 ;org 0A64h
.CRT$XCU:00000A64 _g_AesTabInit$initializer$ dd offset ??__Eg_AesTabInit@NCrypto@@YAXXZ ; NCrypto::`dynamic initializer for 'g_AesTabInit''(void)
.CRT$XCU:00000A64 _CRT$XCU        ends
.CRT$XCU:00000A64
UNDEF:00000A70 ; ===========================================================================
UNDEF:00000A70
UNDEF:00000A70 ; Segment type: Externs
UNDEF:00000A70 ; UNDEF
UNDEF:00000A70 ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:00000A70                 extrn _memset:near      ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+91p
UNDEF:00000A74                 extrn __RTC_CheckEsp:near
UNDEF:00000A74                                         ; CODE XREF: NCrypto::CAesCbcCoder::CAesCbcCoder(bool,uint)+ABp
UNDEF:00000A74                                         ; NCrypto::CAesCbcCoder::Init(void)+36p ...
UNDEF:00000A78                 extrn __RTC_Shutdown:near
UNDEF:00000A78                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00000A7C                 extrn __RTC_InitBase:near
UNDEF:00000A7C                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00000A80 ; const type_info::`vftable'
UNDEF:00000A80                 extrn ??_7type_info@@6B@:near
UNDEF:00000A80                                         ; DATA XREF: .data:NCrypto::CAesCbcCoder `RTTI Type Descriptor'o
UNDEF:00000A80                                         ; .data:ICompressFilter `RTTI Type Descriptor'o ...
UNDEF:00000A84                 extrn _IID_ICompressSetCoderProperties:near
UNDEF:00000A84                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_78Co
UNDEF:00000A88                 extrn _IID_ICryptoProperties:near
UNDEF:00000A88                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *):loc_758o
UNDEF:00000A8C ; const IID IID_IUnknown
UNDEF:00000A8C                 extrn _IID_IUnknown:near
UNDEF:00000A8C                                         ; DATA XREF: NCrypto::CAesCbcCoder::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00000A90 ; void __cdecl operator delete(void *)
UNDEF:00000A90                 extrn ??3@YAXPAX@Z:near ; CODE XREF: NCrypto::CAesCbcCoder::Release(void)+41p
UNDEF:00000A94 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00000A94                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00000A98                 extrn __purecall:near   ; DATA XREF: .rdata:const ICompressFilter::`vftable'o
UNDEF:00000A98                                         ; .rdata:000008ECo ...
UNDEF:00000A9C ; __stdcall AesCbc_Init(x, x)
UNDEF:00000A9C                 extrn _AesCbc_Init@8:near
UNDEF:00000A9C                                         ; CODE XREF: NCrypto::CAesCbcCoder::Init(void)+1Ap
UNDEF:00000AA0 ; __fastcall Aes_SetKey_Dec(x, x, x)
UNDEF:00000AA0                 extrn @Aes_SetKey_Dec@12:near
UNDEF:00000AA0                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint):loc_1CFo
UNDEF:00000AA4 ; __fastcall Aes_SetKey_Enc(x, x, x)
UNDEF:00000AA4                 extrn @Aes_SetKey_Enc@12:near
UNDEF:00000AA4                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetKey(uchar const *,uint)+56o
UNDEF:00000AA8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00000AA8                 extrn _memcpy:near      ; CODE XREF: NCrypto::CAesCbcCoder::SetInitVector(uchar const *,uint)+22p
UNDEF:00000AAC ; __fastcall AesCbc_Encode_Intel(x, x, x)
UNDEF:00000AAC                 extrn @AesCbc_Encode_Intel@12:near
UNDEF:00000AAC                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+75o
UNDEF:00000AB0 ; __fastcall AesCbc_Decode(x, x, x)
UNDEF:00000AB0                 extrn @AesCbc_Decode@12:near
UNDEF:00000AB0                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetFunctions(uint):loc_2CFo
UNDEF:00000AB4 ; __fastcall AesCbc_Encode(x, x, x)
UNDEF:00000AB4                 extrn @AesCbc_Encode@12:near
UNDEF:00000AB4                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+56o
UNDEF:00000AB8                 extrn _g_AesCbc_Decode:near
UNDEF:00000AB8                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetFunctions(uint):loc_2A4r
UNDEF:00000ABC                 extrn _g_AesCbc_Encode:near
UNDEF:00000ABC                                         ; DATA XREF: NCrypto::CAesCbcCoder::SetFunctions(uint)+29r
UNDEF:00000ABC                                         ; NCrypto::CAesCbcCoder::SetFunctions(uint)+75r
UNDEF:00000AC0 ; _DWORD __stdcall AesGenTables()
UNDEF:00000AC0                 extrn _AesGenTables@0:near
UNDEF:00000AC0                                         ; CODE XREF: NCrypto::CAesTabInit::CAesTabInit(void)+Ep
UNDEF:00000AC0
UNDEF:00000AC0
UNDEF:00000AC0                 end