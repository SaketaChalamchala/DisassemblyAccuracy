.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : F081DCCB798307AF78CF5F2F0490D13D
.rdata:00000000 ; Input CRC32 : 3D9DB9B7
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\LzmaEnc.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 _kLiteralNextStates dd 0                ; DATA XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+101r
.rdata:00000000                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+2ABr ...
.rdata:00000004                 align 10h
.rdata:00000010                 db    1
.rdata:00000011                 db    0
.rdata:00000012                 db    0
.rdata:00000013                 db    0
.rdata:00000014                 db    2
.rdata:00000015                 db    0
.rdata:00000016                 db    0
.rdata:00000017                 db    0
.rdata:00000018                 db    3
.rdata:00000019                 db    0
.rdata:0000001A                 db    0
.rdata:0000001B                 db    0
.rdata:0000001C                 db    4
.rdata:0000001D                 db    0
.rdata:0000001E                 db    0
.rdata:0000001F                 db    0
.rdata:00000020                 db    5
.rdata:00000021                 db    0
.rdata:00000022                 db    0
.rdata:00000023                 db    0
.rdata:00000024                 db    6
.rdata:00000025                 db    0
.rdata:00000026                 db    0
.rdata:00000027                 db    0
.rdata:00000028                 db    4
.rdata:00000029                 db    0
.rdata:0000002A                 db    0
.rdata:0000002B                 db    0
.rdata:0000002C                 db    5
.rdata:0000002D                 db    0
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030 _kMatchNextStates dd 7                  ; DATA XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+4DAr
.rdata:00000030                                         ; GetOptimum(x,x,x)+96Ar ...
.rdata:00000034                 db    7
.rdata:00000035                 db    0
.rdata:00000036                 db    0
.rdata:00000037                 db    0
.rdata:00000038                 db    7
.rdata:00000039                 db    0
.rdata:0000003A                 db    0
.rdata:0000003B                 db    0
.rdata:0000003C                 db    7
.rdata:0000003D                 db    0
.rdata:0000003E                 db    0
.rdata:0000003F                 db    0
.rdata:00000040                 db    7
.rdata:00000041                 db    0
.rdata:00000042                 db    0
.rdata:00000043                 db    0
.rdata:00000044                 db    7
.rdata:00000045                 db    0
.rdata:00000046                 db    0
.rdata:00000047                 db    0
.rdata:00000048                 db    7
.rdata:00000049                 db    0
.rdata:0000004A                 db    0
.rdata:0000004B                 db    0
.rdata:0000004C                 db  0Ah
.rdata:0000004D                 db    0
.rdata:0000004E                 db    0
.rdata:0000004F                 db    0
.rdata:00000050                 db  0Ah
.rdata:00000051                 db    0
.rdata:00000052                 db    0
.rdata:00000053                 db    0
.rdata:00000054                 db  0Ah
.rdata:00000055                 db    0
.rdata:00000056                 db    0
.rdata:00000057                 db    0
.rdata:00000058                 db  0Ah
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C                 db  0Ah
.rdata:0000005D                 db    0
.rdata:0000005E                 db    0
.rdata:0000005F                 db    0
.rdata:00000060 _kRepNextStates dd 8                    ; DATA XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+4A1r
.rdata:00000060                                         ; GetOptimum(x,x,x)+955r ...
.rdata:00000064                 db    8
.rdata:00000065                 db    0
.rdata:00000066                 db    0
.rdata:00000067                 db    0
.rdata:00000068                 db    8
.rdata:00000069                 db    0
.rdata:0000006A                 db    0
.rdata:0000006B                 db    0
.rdata:0000006C                 db    8
.rdata:0000006D                 db    0
.rdata:0000006E                 db    0
.rdata:0000006F                 db    0
.rdata:00000070                 db    8
.rdata:00000071                 db    0
.rdata:00000072                 db    0
.rdata:00000073                 db    0
.rdata:00000074                 db    8
.rdata:00000075                 db    0
.rdata:00000076                 db    0
.rdata:00000077                 db    0
.rdata:00000078                 db    8
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 db  0Bh
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080                 db  0Bh
.rdata:00000081                 db    0
.rdata:00000082                 db    0
.rdata:00000083                 db    0
.rdata:00000084                 db  0Bh
.rdata:00000085                 db    0
.rdata:00000086                 db    0
.rdata:00000087                 db    0
.rdata:00000088                 db  0Bh
.rdata:00000089                 db    0
.rdata:0000008A                 db    0
.rdata:0000008B                 db    0
.rdata:0000008C                 db  0Bh
.rdata:0000008D                 db    0
.rdata:0000008E                 db    0
.rdata:0000008F                 db    0
.rdata:00000090 _kShortRepNextStates dd 9               ; DATA XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+453r
.rdata:00000090                                         ; GetOptimum(x,x,x)+9E0r
.rdata:00000094                 db    9
.rdata:00000095                 db    0
.rdata:00000096                 db    0
.rdata:00000097                 db    0
.rdata:00000098                 db    9
.rdata:00000099                 db    0
.rdata:0000009A                 db    0
.rdata:0000009B                 db    0
.rdata:0000009C                 db    9
.rdata:0000009D                 db    0
.rdata:0000009E                 db    0
.rdata:0000009F                 db    0
.rdata:000000A0                 db    9
.rdata:000000A1                 db    0
.rdata:000000A2                 db    0
.rdata:000000A3                 db    0
.rdata:000000A4                 db    9
.rdata:000000A5                 db    0
.rdata:000000A6                 db    0
.rdata:000000A7                 db    0
.rdata:000000A8                 db    9
.rdata:000000A9                 db    0
.rdata:000000AA                 db    0
.rdata:000000AB                 db    0
.rdata:000000AC                 db  0Bh
.rdata:000000AD                 db    0
.rdata:000000AE                 db    0
.rdata:000000AF                 db    0
.rdata:000000B0                 db  0Bh
.rdata:000000B1                 db    0
.rdata:000000B2                 db    0
.rdata:000000B3                 db    0
.rdata:000000B4                 db  0Bh
.rdata:000000B5                 db    0
.rdata:000000B6                 db    0
.rdata:000000B7                 db    0
.rdata:000000B8                 db  0Bh
.rdata:000000B9                 db    0
.rdata:000000BA                 db    0
.rdata:000000BB                 db    0
.rdata:000000BC                 db  0Bh
.rdata:000000BD                 db    0
.rdata:000000BE                 db    0
.rdata:000000BF                 db    0
.rdata:000000BF _rdata          ends
.rdata:000000BF
.text:000000C0 ; ===========================================================================
.text:000000C0
.text:000000C0 ; Segment type: Pure code
.text:000000C0 ; Segment permissions: Read/Execute
.text:000000C0 _text           segment para public 'CODE' use32
.text:000000C0                 assume cs:_text
.text:000000C0                 ;org 0C0h
.text:000000C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000000C0
.text:000000C0 ; =============== S U B R O U T I N E =======================================
.text:000000C0
.text:000000C0 ; Attributes: bp-based frame
.text:000000C0
.text:000000C0 ; __stdcall LzmaEncProps_Init(x)
.text:000000C0                 public _LzmaEncProps_Init@4
.text:000000C0 _LzmaEncProps_Init@4 proc near          ; CODE XREF: LzmaEnc_Construct(x)+61p
.text:000000C0
.text:000000C0 arg_0           = dword ptr  8
.text:000000C0
.text:000000C0                 push    ebp
.text:000000C1                 mov     ebp, esp
.text:000000C3                 mov     eax, [ebp+arg_0]
.text:000000C6                 mov     dword ptr [eax], 5
.text:000000CC                 mov     ecx, [ebp+arg_0]
.text:000000CF                 mov     dword ptr [ecx+2Ch], 0
.text:000000D6                 mov     edx, [ebp+arg_0]
.text:000000D9                 mov     dword ptr [edx+4], 0
.text:000000E0                 mov     eax, [ebp+arg_0]
.text:000000E3                 mov     dword ptr [eax+8], 0FFFFFFFFh
.text:000000EA                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:000000F1                 mov     ecx, [ebp+arg_0]
.text:000000F4                 mov     dword ptr [ecx+34h], 0FFFFFFFFh
.text:000000FB                 mov     edx, [ebp+arg_0]
.text:000000FE                 mov     dword ptr [edx+28h], 0FFFFFFFFh
.text:00000105                 mov     eax, [ebp+arg_0]
.text:00000108                 mov     dword ptr [eax+24h], 0FFFFFFFFh
.text:0000010F                 mov     ecx, [ebp+arg_0]
.text:00000112                 mov     dword ptr [ecx+20h], 0FFFFFFFFh
.text:00000119                 mov     edx, [ebp+arg_0]
.text:0000011C                 mov     dword ptr [edx+1Ch], 0FFFFFFFFh
.text:00000123                 mov     eax, [ebp+arg_0]
.text:00000126                 mov     dword ptr [eax+18h], 0FFFFFFFFh
.text:0000012D                 mov     ecx, [ebp+arg_0]
.text:00000130                 mov     dword ptr [ecx+14h], 0FFFFFFFFh
.text:00000137                 mov     edx, [ebp+arg_0]
.text:0000013A                 mov     dword ptr [edx+10h], 0FFFFFFFFh
.text:00000141                 mov     eax, [ebp+arg_0]
.text:00000144                 mov     dword ptr [eax+30h], 0
.text:0000014B                 pop     ebp
.text:0000014C                 retn    4
.text:0000014C _LzmaEncProps_Init@4 endp
.text:0000014C
.text:0000014C ; ---------------------------------------------------------------------------
.text:0000014F                 align 10h
.text:00000150
.text:00000150 ; =============== S U B R O U T I N E =======================================
.text:00000150
.text:00000150 ; Attributes: bp-based frame
.text:00000150
.text:00000150 ; __stdcall LzmaEncProps_Normalize(x)
.text:00000150                 public _LzmaEncProps_Normalize@4
.text:00000150 _LzmaEncProps_Normalize@4 proc near     ; CODE XREF: LzmaEncProps_GetDictSize(x)+32p
.text:00000150                                         ; LzmaEnc_SetProps(x,x)+38p
.text:00000150
.text:00000150 var_1C          = dword ptr -1Ch
.text:00000150 var_18          = dword ptr -18h
.text:00000150 var_14          = dword ptr -14h
.text:00000150 var_10          = dword ptr -10h
.text:00000150 var_C           = dword ptr -0Ch
.text:00000150 var_8           = dword ptr -8
.text:00000150 var_4           = dword ptr -4
.text:00000150 arg_0           = dword ptr  8
.text:00000150
.text:00000150                 push    ebp
.text:00000151                 mov     ebp, esp
.text:00000153                 sub     esp, 1Ch
.text:00000156                 mov     eax, 0CCCCCCCCh
.text:0000015B                 mov     [ebp+var_1C], eax
.text:0000015E                 mov     [ebp+var_18], eax
.text:00000161                 mov     [ebp+var_14], eax
.text:00000164                 mov     [ebp+var_10], eax
.text:00000167                 mov     [ebp+var_C], eax
.text:0000016A                 mov     [ebp+var_8], eax
.text:0000016D                 mov     [ebp+var_4], eax
.text:00000170                 mov     eax, [ebp+arg_0]
.text:00000173                 mov     ecx, [eax]
.text:00000175                 mov     [ebp+var_4], ecx
.text:00000178                 cmp     [ebp+var_4], 0
.text:0000017C                 jge     short loc_185
.text:0000017E                 mov     [ebp+var_4], 5
.text:00000185
.text:00000185 loc_185:                                ; CODE XREF: LzmaEncProps_Normalize(x)+2Cj
.text:00000185                 mov     edx, [ebp+arg_0]
.text:00000188                 mov     eax, [ebp+var_4]
.text:0000018B                 mov     [edx], eax
.text:0000018D                 mov     ecx, [ebp+arg_0]
.text:00000190                 cmp     dword ptr [ecx+4], 0
.text:00000194                 jnz     short loc_1D1
.text:00000196                 cmp     [ebp+var_4], 5
.text:0000019A                 jg      short loc_1AF
.text:0000019C                 mov     edx, [ebp+var_4]
.text:0000019F                 lea     ecx, [edx+edx+0Eh]
.text:000001A3                 mov     eax, 1
.text:000001A8                 shl     eax, cl
.text:000001AA                 mov     [ebp+var_C], eax
.text:000001AD                 jmp     short loc_1C8
.text:000001AF ; ---------------------------------------------------------------------------
.text:000001AF
.text:000001AF loc_1AF:                                ; CODE XREF: LzmaEncProps_Normalize(x)+4Aj
.text:000001AF                 mov     ecx, [ebp+var_4]
.text:000001B2                 sub     ecx, 6
.text:000001B5                 neg     ecx
.text:000001B7                 sbb     ecx, ecx
.text:000001B9                 and     ecx, 2000000h
.text:000001BF                 add     ecx, 2000000h
.text:000001C5                 mov     [ebp+var_C], ecx
.text:000001C8
.text:000001C8 loc_1C8:                                ; CODE XREF: LzmaEncProps_Normalize(x)+5Dj
.text:000001C8                 mov     edx, [ebp+arg_0]
.text:000001CB                 mov     eax, [ebp+var_C]
.text:000001CE                 mov     [edx+4], eax
.text:000001D1
.text:000001D1 loc_1D1:                                ; CODE XREF: LzmaEncProps_Normalize(x)+44j
.text:000001D1                 mov     ecx, [ebp+arg_0]
.text:000001D4                 mov     edx, [ecx+4]
.text:000001D7                 xor     eax, eax
.text:000001D9                 mov     ecx, [ebp+arg_0]
.text:000001DC                 mov     [ebp+var_14], edx
.text:000001DF                 mov     [ebp+var_10], eax
.text:000001E2                 mov     [ebp+var_18], ecx
.text:000001E5                 mov     edx, [ebp+var_18]
.text:000001E8                 mov     eax, [ebp+var_10]
.text:000001EB                 cmp     eax, [edx+0Ch]
.text:000001EE                 jb      short loc_263
.text:000001F0                 ja      short loc_1FD
.text:000001F2                 mov     ecx, [ebp+var_18]
.text:000001F5                 mov     edx, [ebp+var_14]
.text:000001F8                 cmp     edx, [ecx+8]
.text:000001FB                 jbe     short loc_263
.text:000001FD
.text:000001FD loc_1FD:                                ; CODE XREF: LzmaEncProps_Normalize(x)+A0j
.text:000001FD                 mov     [ebp+var_8], 0Bh
.text:00000204                 jmp     short loc_20F
.text:00000206 ; ---------------------------------------------------------------------------
.text:00000206
.text:00000206 loc_206:                                ; CODE XREF: LzmaEncProps_Normalize(x):loc_261j
.text:00000206                 mov     eax, [ebp+var_8]
.text:00000209                 add     eax, 1
.text:0000020C                 mov     [ebp+var_8], eax
.text:0000020F
.text:0000020F loc_20F:                                ; CODE XREF: LzmaEncProps_Normalize(x)+B4j
.text:0000020F                 cmp     [ebp+var_8], 1Eh
.text:00000213                 ja      short loc_263
.text:00000215                 mov     ecx, [ebp+arg_0]
.text:00000218                 mov     edx, [ecx+8]
.text:0000021B                 mov     eax, 2
.text:00000220                 mov     ecx, [ebp+var_8]
.text:00000223                 shl     eax, cl
.text:00000225                 cmp     edx, eax
.text:00000227                 ja      short loc_23B
.text:00000229                 mov     edx, 2
.text:0000022E                 mov     ecx, [ebp+var_8]
.text:00000231                 shl     edx, cl
.text:00000233                 mov     eax, [ebp+arg_0]
.text:00000236                 mov     [eax+4], edx
.text:00000239                 jmp     short loc_263
.text:0000023B ; ---------------------------------------------------------------------------
.text:0000023B
.text:0000023B loc_23B:                                ; CODE XREF: LzmaEncProps_Normalize(x)+D7j
.text:0000023B                 mov     ecx, [ebp+arg_0]
.text:0000023E                 mov     edx, [ecx+8]
.text:00000241                 mov     eax, 3
.text:00000246                 mov     ecx, [ebp+var_8]
.text:00000249                 shl     eax, cl
.text:0000024B                 cmp     edx, eax
.text:0000024D                 ja      short loc_261
.text:0000024F                 mov     edx, 3
.text:00000254                 mov     ecx, [ebp+var_8]
.text:00000257                 shl     edx, cl
.text:00000259                 mov     eax, [ebp+arg_0]
.text:0000025C                 mov     [eax+4], edx
.text:0000025F                 jmp     short loc_263
.text:00000261 ; ---------------------------------------------------------------------------
.text:00000261
.text:00000261 loc_261:                                ; CODE XREF: LzmaEncProps_Normalize(x)+FDj
.text:00000261                 jmp     short loc_206
.text:00000263 ; ---------------------------------------------------------------------------
.text:00000263
.text:00000263 loc_263:                                ; CODE XREF: LzmaEncProps_Normalize(x)+9Ej
.text:00000263                                         ; LzmaEncProps_Normalize(x)+ABj ...
.text:00000263                 mov     ecx, [ebp+arg_0]
.text:00000266                 cmp     dword ptr [ecx+10h], 0
.text:0000026A                 jge     short loc_276
.text:0000026C                 mov     edx, [ebp+arg_0]
.text:0000026F                 mov     dword ptr [edx+10h], 3
.text:00000276
.text:00000276 loc_276:                                ; CODE XREF: LzmaEncProps_Normalize(x)+11Aj
.text:00000276                 mov     eax, [ebp+arg_0]
.text:00000279                 cmp     dword ptr [eax+14h], 0
.text:0000027D                 jge     short loc_289
.text:0000027F                 mov     ecx, [ebp+arg_0]
.text:00000282                 mov     dword ptr [ecx+14h], 0
.text:00000289
.text:00000289 loc_289:                                ; CODE XREF: LzmaEncProps_Normalize(x)+12Dj
.text:00000289                 mov     edx, [ebp+arg_0]
.text:0000028C                 cmp     dword ptr [edx+18h], 0
.text:00000290                 jge     short loc_29C
.text:00000292                 mov     eax, [ebp+arg_0]
.text:00000295                 mov     dword ptr [eax+18h], 2
.text:0000029C
.text:0000029C loc_29C:                                ; CODE XREF: LzmaEncProps_Normalize(x)+140j
.text:0000029C                 mov     ecx, [ebp+arg_0]
.text:0000029F                 cmp     dword ptr [ecx+1Ch], 0
.text:000002A3                 jge     short loc_2B4
.text:000002A5                 xor     edx, edx
.text:000002A7                 cmp     [ebp+var_4], 5
.text:000002AB                 setnl   dl
.text:000002AE                 mov     eax, [ebp+arg_0]
.text:000002B1                 mov     [eax+1Ch], edx
.text:000002B4
.text:000002B4 loc_2B4:                                ; CODE XREF: LzmaEncProps_Normalize(x)+153j
.text:000002B4                 mov     ecx, [ebp+arg_0]
.text:000002B7                 cmp     dword ptr [ecx+20h], 0
.text:000002BB                 jge     short loc_2D5
.text:000002BD                 xor     edx, edx
.text:000002BF                 cmp     [ebp+var_4], 7
.text:000002C3                 setnl   dl
.text:000002C6                 sub     edx, 1
.text:000002C9                 and     edx, 0FFFFFFE0h
.text:000002CC                 add     edx, 40h ; '@'
.text:000002CF                 mov     eax, [ebp+arg_0]
.text:000002D2                 mov     [eax+20h], edx
.text:000002D5
.text:000002D5 loc_2D5:                                ; CODE XREF: LzmaEncProps_Normalize(x)+16Bj
.text:000002D5                 mov     ecx, [ebp+arg_0]
.text:000002D8                 cmp     dword ptr [ecx+24h], 0
.text:000002DC                 jge     short loc_2F0
.text:000002DE                 mov     edx, [ebp+arg_0]
.text:000002E1                 xor     eax, eax
.text:000002E3                 cmp     dword ptr [edx+1Ch], 0
.text:000002E7                 setnz   al
.text:000002EA                 mov     ecx, [ebp+arg_0]
.text:000002ED                 mov     [ecx+24h], eax
.text:000002F0
.text:000002F0 loc_2F0:                                ; CODE XREF: LzmaEncProps_Normalize(x)+18Cj
.text:000002F0                 mov     edx, [ebp+arg_0]
.text:000002F3                 cmp     dword ptr [edx+28h], 0
.text:000002F7                 jge     short loc_303
.text:000002F9                 mov     eax, [ebp+arg_0]
.text:000002FC                 mov     dword ptr [eax+28h], 4
.text:00000303
.text:00000303 loc_303:                                ; CODE XREF: LzmaEncProps_Normalize(x)+1A7j
.text:00000303                 mov     ecx, [ebp+arg_0]
.text:00000306                 cmp     dword ptr [ecx+2Ch], 0
.text:0000030A                 jnz     short loc_32D
.text:0000030C                 mov     edx, [ebp+arg_0]
.text:0000030F                 mov     eax, [edx+20h]
.text:00000312                 sar     eax, 1
.text:00000314                 add     eax, 10h
.text:00000317                 mov     ecx, [ebp+arg_0]
.text:0000031A                 xor     edx, edx
.text:0000031C                 cmp     dword ptr [ecx+24h], 0
.text:00000320                 setz    dl
.text:00000323                 mov     ecx, edx
.text:00000325                 sar     eax, cl
.text:00000327                 mov     ecx, [ebp+arg_0]
.text:0000032A                 mov     [ecx+2Ch], eax
.text:0000032D
.text:0000032D loc_32D:                                ; CODE XREF: LzmaEncProps_Normalize(x)+1BAj
.text:0000032D                 mov     edx, [ebp+arg_0]
.text:00000330                 cmp     dword ptr [edx+34h], 0
.text:00000334                 jge     short loc_361
.text:00000336                 mov     eax, [ebp+arg_0]
.text:00000339                 cmp     dword ptr [eax+24h], 0
.text:0000033D                 jz      short loc_351
.text:0000033F                 mov     ecx, [ebp+arg_0]
.text:00000342                 cmp     dword ptr [ecx+1Ch], 0
.text:00000346                 jz      short loc_351
.text:00000348                 mov     [ebp+var_1C], 2
.text:0000034F                 jmp     short loc_358
.text:00000351 ; ---------------------------------------------------------------------------
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: LzmaEncProps_Normalize(x)+1EDj
.text:00000351                                         ; LzmaEncProps_Normalize(x)+1F6j
.text:00000351                 mov     [ebp+var_1C], 1
.text:00000358
.text:00000358 loc_358:                                ; CODE XREF: LzmaEncProps_Normalize(x)+1FFj
.text:00000358                 mov     edx, [ebp+arg_0]
.text:0000035B                 mov     eax, [ebp+var_1C]
.text:0000035E                 mov     [edx+34h], eax
.text:00000361
.text:00000361 loc_361:                                ; CODE XREF: LzmaEncProps_Normalize(x)+1E4j
.text:00000361                 mov     esp, ebp
.text:00000363                 pop     ebp
.text:00000364                 retn    4
.text:00000364 _LzmaEncProps_Normalize@4 endp
.text:00000364
.text:00000364 ; ---------------------------------------------------------------------------
.text:00000367                 align 10h
.text:00000370
.text:00000370 ; =============== S U B R O U T I N E =======================================
.text:00000370
.text:00000370 ; Attributes: bp-based frame
.text:00000370
.text:00000370 ; __stdcall LzmaEncProps_GetDictSize(x)
.text:00000370                 public _LzmaEncProps_GetDictSize@4
.text:00000370 _LzmaEncProps_GetDictSize@4 proc near
.text:00000370
.text:00000370 var_44          = byte ptr -44h
.text:00000370 var_40          = byte ptr -40h
.text:00000370 var_3C          = dword ptr -3Ch
.text:00000370 var_4           = dword ptr -4
.text:00000370 arg_0           = dword ptr  8
.text:00000370
.text:00000370                 push    ebp
.text:00000371                 mov     ebp, esp
.text:00000373                 sub     esp, 44h
.text:00000376                 push    esi
.text:00000377                 push    edi
.text:00000378                 lea     edi, [ebp+var_44]
.text:0000037B                 mov     ecx, 11h
.text:00000380                 mov     eax, 0CCCCCCCCh
.text:00000385                 rep stosd
.text:00000387                 mov     eax, dword ptr ds:___security_cookie
.text:0000038C                 xor     eax, ebp
.text:0000038E                 mov     [ebp+var_4], eax
.text:00000391                 mov     esi, [ebp+arg_0]
.text:00000394                 mov     ecx, 0Eh
.text:00000399                 lea     edi, [ebp+var_40]
.text:0000039C                 rep movsd
.text:0000039E                 lea     eax, [ebp+var_40]
.text:000003A1                 push    eax
.text:000003A2                 call    _LzmaEncProps_Normalize@4 ; LzmaEncProps_Normalize(x)
.text:000003A7                 mov     eax, [ebp+var_3C]
.text:000003AA                 push    edx
.text:000003AB                 mov     ecx, ebp
.text:000003AD                 push    eax
.text:000003AE                 lea     edx, $LN5
.text:000003B4                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000003B9                 pop     eax
.text:000003BA                 pop     edx
.text:000003BB                 pop     edi
.text:000003BC                 pop     esi
.text:000003BD                 mov     ecx, [ebp+var_4]
.text:000003C0                 xor     ecx, ebp
.text:000003C2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000003C7                 add     esp, 44h
.text:000003CA                 cmp     ebp, esp
.text:000003CC                 call    __RTC_CheckEsp
.text:000003D1                 mov     esp, ebp
.text:000003D3                 pop     ebp
.text:000003D4                 retn    4
.text:000003D4 _LzmaEncProps_GetDictSize@4 endp
.text:000003D4
.text:000003D4 ; ---------------------------------------------------------------------------
.text:000003D7                 align 4
.text:000003D8 $LN5            dd 1                    ; DATA XREF: LzmaEncProps_GetDictSize(x)+3Eo
.text:000003DC                 dd offset $LN4
.text:000003E0 $LN4            dd 0FFFFFFC0h, 38h      ; DATA XREF: .text:000003DCo
.text:000003E8                 dd offset $LN3          ; "props"
.text:000003EC $LN3            db 'props',0            ; DATA XREF: .text:000003E8o
.text:000003F2                 align 10h
.text:00000400
.text:00000400 ; =============== S U B R O U T I N E =======================================
.text:00000400
.text:00000400 ; Attributes: bp-based frame
.text:00000400
.text:00000400 ; __stdcall LzmaEnc_SaveState(x)
.text:00000400                 public _LzmaEnc_SaveState@4
.text:00000400 _LzmaEnc_SaveState@4 proc near
.text:00000400
.text:00000400 var_C           = dword ptr -0Ch
.text:00000400 var_8           = dword ptr -8
.text:00000400 var_4           = dword ptr -4
.text:00000400 arg_0           = dword ptr  8
.text:00000400
.text:00000400                 push    ebp
.text:00000401                 mov     ebp, esp
.text:00000403                 sub     esp, 0Ch
.text:00000406                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000040D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000414                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000041B                 mov     eax, [ebp+arg_0]
.text:0000041E                 mov     [ebp+var_4], eax
.text:00000421                 mov     ecx, [ebp+var_4]
.text:00000424                 add     ecx, 3BCFCh
.text:0000042A                 mov     [ebp+var_8], ecx
.text:0000042D                 mov     edx, [ebp+var_4]
.text:00000430                 add     edx, 32C6Ch
.text:00000436                 mov     eax, [ebp+var_8]
.text:00000439                 add     eax, 67Ch
.text:0000043E                 push    4848h           ; Size
.text:00000443                 push    edx             ; Src
.text:00000444                 push    eax             ; Dst
.text:00000445                 call    _memcpy_0
.text:0000044A                 add     esp, 0Ch
.text:0000044D                 mov     ecx, [ebp+var_4]
.text:00000450                 add     ecx, 374B4h
.text:00000456                 mov     edx, [ebp+var_8]
.text:00000459                 add     edx, 4EC4h
.text:0000045F                 push    4848h           ; Size
.text:00000464                 push    ecx             ; Src
.text:00000465                 push    edx             ; Dst
.text:00000466                 call    _memcpy_0
.text:0000046B                 add     esp, 0Ch
.text:0000046E                 mov     eax, [ebp+var_8]
.text:00000471                 mov     ecx, [ebp+var_4]
.text:00000474                 mov     edx, [ecx+44h]
.text:00000477                 mov     [eax+4], edx
.text:0000047A                 mov     [ebp+var_C], 0
.text:00000481                 jmp     short loc_48C
.text:00000483 ; ---------------------------------------------------------------------------
.text:00000483
.text:00000483 loc_483:                                ; CODE XREF: LzmaEnc_SaveState(x)+E7j
.text:00000483                 mov     eax, [ebp+var_C]
.text:00000486                 add     eax, 1
.text:00000489                 mov     [ebp+var_C], eax
.text:0000048C
.text:0000048C loc_48C:                                ; CODE XREF: LzmaEnc_SaveState(x)+81j
.text:0000048C                 cmp     [ebp+var_C], 0Ch
.text:00000490                 jge     short loc_4E9
.text:00000492                 push    20h ; ' '       ; Size
.text:00000494                 mov     ecx, [ebp+var_C]
.text:00000497                 shl     ecx, 5
.text:0000049A                 mov     edx, [ebp+var_4]
.text:0000049D                 lea     eax, [edx+ecx+32608h]
.text:000004A4                 push    eax             ; Src
.text:000004A5                 mov     ecx, [ebp+var_C]
.text:000004A8                 shl     ecx, 5
.text:000004AB                 mov     edx, [ebp+var_8]
.text:000004AE                 lea     eax, [edx+ecx+18h]
.text:000004B2                 push    eax             ; Dst
.text:000004B3                 call    _memcpy
.text:000004B8                 add     esp, 0Ch
.text:000004BB                 push    20h ; ' '       ; Size
.text:000004BD                 mov     ecx, [ebp+var_C]
.text:000004C0                 shl     ecx, 5
.text:000004C3                 mov     edx, [ebp+var_4]
.text:000004C6                 lea     eax, [edx+ecx+327E8h]
.text:000004CD                 push    eax             ; Src
.text:000004CE                 mov     ecx, [ebp+var_C]
.text:000004D1                 shl     ecx, 5
.text:000004D4                 mov     edx, [ebp+var_8]
.text:000004D7                 lea     eax, [edx+ecx+1F8h]
.text:000004DE                 push    eax             ; Dst
.text:000004DF                 call    _memcpy
.text:000004E4                 add     esp, 0Ch
.text:000004E7                 jmp     short loc_483
.text:000004E9 ; ---------------------------------------------------------------------------
.text:000004E9
.text:000004E9 loc_4E9:                                ; CODE XREF: LzmaEnc_SaveState(x)+90j
.text:000004E9                 mov     [ebp+var_C], 0
.text:000004F0                 jmp     short loc_4FB
.text:000004F2 ; ---------------------------------------------------------------------------
.text:000004F2
.text:000004F2 loc_4F2:                                ; CODE XREF: LzmaEnc_SaveState(x)+130j
.text:000004F2                 mov     ecx, [ebp+var_C]
.text:000004F5                 add     ecx, 1
.text:000004F8                 mov     [ebp+var_C], ecx
.text:000004FB
.text:000004FB loc_4FB:                                ; CODE XREF: LzmaEnc_SaveState(x)+F0j
.text:000004FB                 cmp     [ebp+var_C], 4
.text:000004FF                 jge     short loc_532
.text:00000501                 push    80h ; 'Ç'       ; Size
.text:00000506                 mov     edx, [ebp+var_C]
.text:00000509                 shl     edx, 7
.text:0000050C                 mov     eax, [ebp+var_4]
.text:0000050F                 lea     ecx, [eax+edx+32968h]
.text:00000516                 push    ecx             ; Src
.text:00000517                 mov     edx, [ebp+var_C]
.text:0000051A                 shl     edx, 7
.text:0000051D                 mov     eax, [ebp+var_8]
.text:00000520                 lea     ecx, [eax+edx+378h]
.text:00000527                 push    ecx             ; Dst
.text:00000528                 call    _memcpy
.text:0000052D                 add     esp, 0Ch
.text:00000530                 jmp     short loc_4F2
.text:00000532 ; ---------------------------------------------------------------------------
.text:00000532
.text:00000532 loc_532:                                ; CODE XREF: LzmaEnc_SaveState(x)+FFj
.text:00000532                 push    18h             ; Size
.text:00000534                 mov     edx, [ebp+var_4]
.text:00000537                 add     edx, 32788h
.text:0000053D                 push    edx             ; Src
.text:0000053E                 mov     eax, [ebp+var_8]
.text:00000541                 add     eax, 198h
.text:00000546                 push    eax             ; Dst
.text:00000547                 call    _memcpy
.text:0000054C                 add     esp, 0Ch
.text:0000054F                 push    18h             ; Size
.text:00000551                 mov     ecx, [ebp+var_4]
.text:00000554                 add     ecx, 327A0h
.text:0000055A                 push    ecx             ; Src
.text:0000055B                 mov     edx, [ebp+var_8]
.text:0000055E                 add     edx, 1B0h
.text:00000564                 push    edx             ; Dst
.text:00000565                 call    _memcpy
.text:0000056A                 add     esp, 0Ch
.text:0000056D                 push    18h             ; Size
.text:0000056F                 mov     eax, [ebp+var_4]
.text:00000572                 add     eax, 327B8h
.text:00000577                 push    eax             ; Src
.text:00000578                 mov     ecx, [ebp+var_8]
.text:0000057B                 add     ecx, 1C8h
.text:00000581                 push    ecx             ; Dst
.text:00000582                 call    _memcpy
.text:00000587                 add     esp, 0Ch
.text:0000058A                 push    18h             ; Size
.text:0000058C                 mov     edx, [ebp+var_4]
.text:0000058F                 add     edx, 327D0h
.text:00000595                 push    edx             ; Src
.text:00000596                 mov     eax, [ebp+var_8]
.text:00000599                 add     eax, 1E0h
.text:0000059E                 push    eax             ; Dst
.text:0000059F                 call    _memcpy
.text:000005A4                 add     esp, 0Ch
.text:000005A7                 push    0E4h ; 'S'      ; Size
.text:000005AC                 mov     ecx, [ebp+var_4]
.text:000005AF                 add     ecx, 32B68h
.text:000005B5                 push    ecx             ; Src
.text:000005B6                 mov     edx, [ebp+var_8]
.text:000005B9                 add     edx, 578h
.text:000005BF                 push    edx             ; Dst
.text:000005C0                 call    _memcpy
.text:000005C5                 add     esp, 0Ch
.text:000005C8                 push    20h ; ' '       ; Size
.text:000005CA                 mov     eax, [ebp+var_4]
.text:000005CD                 add     eax, 32C4Ch
.text:000005D2                 push    eax             ; Src
.text:000005D3                 mov     ecx, [ebp+var_8]
.text:000005D6                 add     ecx, 65Ch
.text:000005DC                 push    ecx             ; Dst
.text:000005DD                 call    _memcpy
.text:000005E2                 add     esp, 0Ch
.text:000005E5                 push    10h             ; Size
.text:000005E7                 mov     edx, [ebp+var_4]
.text:000005EA                 add     edx, 34h ; '4'
.text:000005ED                 push    edx             ; Src
.text:000005EE                 mov     eax, [ebp+var_8]
.text:000005F1                 add     eax, 8
.text:000005F4                 push    eax             ; Dst
.text:000005F5                 call    _memcpy
.text:000005FA                 add     esp, 0Ch
.text:000005FD                 mov     ecx, [ebp+var_4]
.text:00000600                 mov     edx, 300h
.text:00000605                 mov     ecx, [ecx+5Ch]
.text:00000608                 shl     edx, cl
.text:0000060A                 shl     edx, 1
.text:0000060C                 push    edx             ; Size
.text:0000060D                 mov     eax, [ebp+var_4]
.text:00000610                 mov     ecx, [eax+60h]
.text:00000613                 push    ecx             ; Src
.text:00000614                 mov     edx, [ebp+var_8]
.text:00000617                 mov     eax, [edx]
.text:00000619                 push    eax             ; Dst
.text:0000061A                 call    _memcpy
.text:0000061F                 add     esp, 0Ch
.text:00000622                 add     esp, 0Ch
.text:00000625                 cmp     ebp, esp
.text:00000627                 call    __RTC_CheckEsp
.text:0000062C                 mov     esp, ebp
.text:0000062E                 pop     ebp
.text:0000062F                 retn    4
.text:0000062F _LzmaEnc_SaveState@4 endp
.text:0000062F
.text:0000062F ; ---------------------------------------------------------------------------
.text:00000632                 align 10h
.text:00000640
.text:00000640 ; =============== S U B R O U T I N E =======================================
.text:00000640
.text:00000640 ; Attributes: bp-based frame
.text:00000640
.text:00000640 ; __stdcall LzmaEnc_RestoreState(x)
.text:00000640                 public _LzmaEnc_RestoreState@4
.text:00000640 _LzmaEnc_RestoreState@4 proc near
.text:00000640
.text:00000640 var_C           = dword ptr -0Ch
.text:00000640 var_8           = dword ptr -8
.text:00000640 var_4           = dword ptr -4
.text:00000640 arg_0           = dword ptr  8
.text:00000640
.text:00000640                 push    ebp
.text:00000641                 mov     ebp, esp
.text:00000643                 sub     esp, 0Ch
.text:00000646                 mov     [ebp+var_C], 0CCCCCCCCh
.text:0000064D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000654                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000065B                 mov     eax, [ebp+arg_0]
.text:0000065E                 mov     [ebp+var_4], eax
.text:00000661                 mov     ecx, [ebp+var_4]
.text:00000664                 add     ecx, 3BCFCh
.text:0000066A                 mov     [ebp+var_8], ecx
.text:0000066D                 mov     edx, [ebp+var_8]
.text:00000670                 add     edx, 67Ch
.text:00000676                 mov     eax, [ebp+var_4]
.text:00000679                 add     eax, 32C6Ch
.text:0000067E                 push    4848h           ; Size
.text:00000683                 push    edx             ; Src
.text:00000684                 push    eax             ; Dst
.text:00000685                 call    _memcpy_0
.text:0000068A                 add     esp, 0Ch
.text:0000068D                 mov     ecx, [ebp+var_8]
.text:00000690                 add     ecx, 4EC4h
.text:00000696                 mov     edx, [ebp+var_4]
.text:00000699                 add     edx, 374B4h
.text:0000069F                 push    4848h           ; Size
.text:000006A4                 push    ecx             ; Src
.text:000006A5                 push    edx             ; Dst
.text:000006A6                 call    _memcpy_0
.text:000006AB                 add     esp, 0Ch
.text:000006AE                 mov     eax, [ebp+var_4]
.text:000006B1                 mov     ecx, [ebp+var_8]
.text:000006B4                 mov     edx, [ecx+4]
.text:000006B7                 mov     [eax+44h], edx
.text:000006BA                 mov     [ebp+var_C], 0
.text:000006C1                 jmp     short loc_6CC
.text:000006C3 ; ---------------------------------------------------------------------------
.text:000006C3
.text:000006C3 loc_6C3:                                ; CODE XREF: LzmaEnc_RestoreState(x)+E7j
.text:000006C3                 mov     eax, [ebp+var_C]
.text:000006C6                 add     eax, 1
.text:000006C9                 mov     [ebp+var_C], eax
.text:000006CC
.text:000006CC loc_6CC:                                ; CODE XREF: LzmaEnc_RestoreState(x)+81j
.text:000006CC                 cmp     [ebp+var_C], 0Ch
.text:000006D0                 jge     short loc_729
.text:000006D2                 push    20h ; ' '       ; Size
.text:000006D4                 mov     ecx, [ebp+var_C]
.text:000006D7                 shl     ecx, 5
.text:000006DA                 mov     edx, [ebp+var_8]
.text:000006DD                 lea     eax, [edx+ecx+18h]
.text:000006E1                 push    eax             ; Src
.text:000006E2                 mov     ecx, [ebp+var_C]
.text:000006E5                 shl     ecx, 5
.text:000006E8                 mov     edx, [ebp+var_4]
.text:000006EB                 lea     eax, [edx+ecx+32608h]
.text:000006F2                 push    eax             ; Dst
.text:000006F3                 call    _memcpy
.text:000006F8                 add     esp, 0Ch
.text:000006FB                 push    20h ; ' '       ; Size
.text:000006FD                 mov     ecx, [ebp+var_C]
.text:00000700                 shl     ecx, 5
.text:00000703                 mov     edx, [ebp+var_8]
.text:00000706                 lea     eax, [edx+ecx+1F8h]
.text:0000070D                 push    eax             ; Src
.text:0000070E                 mov     ecx, [ebp+var_C]
.text:00000711                 shl     ecx, 5
.text:00000714                 mov     edx, [ebp+var_4]
.text:00000717                 lea     eax, [edx+ecx+327E8h]
.text:0000071E                 push    eax             ; Dst
.text:0000071F                 call    _memcpy
.text:00000724                 add     esp, 0Ch
.text:00000727                 jmp     short loc_6C3
.text:00000729 ; ---------------------------------------------------------------------------
.text:00000729
.text:00000729 loc_729:                                ; CODE XREF: LzmaEnc_RestoreState(x)+90j
.text:00000729                 mov     [ebp+var_C], 0
.text:00000730                 jmp     short loc_73B
.text:00000732 ; ---------------------------------------------------------------------------
.text:00000732
.text:00000732 loc_732:                                ; CODE XREF: LzmaEnc_RestoreState(x)+130j
.text:00000732                 mov     ecx, [ebp+var_C]
.text:00000735                 add     ecx, 1
.text:00000738                 mov     [ebp+var_C], ecx
.text:0000073B
.text:0000073B loc_73B:                                ; CODE XREF: LzmaEnc_RestoreState(x)+F0j
.text:0000073B                 cmp     [ebp+var_C], 4
.text:0000073F                 jge     short loc_772
.text:00000741                 push    80h ; 'Ç'       ; Size
.text:00000746                 mov     edx, [ebp+var_C]
.text:00000749                 shl     edx, 7
.text:0000074C                 mov     eax, [ebp+var_8]
.text:0000074F                 lea     ecx, [eax+edx+378h]
.text:00000756                 push    ecx             ; Src
.text:00000757                 mov     edx, [ebp+var_C]
.text:0000075A                 shl     edx, 7
.text:0000075D                 mov     eax, [ebp+var_4]
.text:00000760                 lea     ecx, [eax+edx+32968h]
.text:00000767                 push    ecx             ; Dst
.text:00000768                 call    _memcpy
.text:0000076D                 add     esp, 0Ch
.text:00000770                 jmp     short loc_732
.text:00000772 ; ---------------------------------------------------------------------------
.text:00000772
.text:00000772 loc_772:                                ; CODE XREF: LzmaEnc_RestoreState(x)+FFj
.text:00000772                 push    18h             ; Size
.text:00000774                 mov     edx, [ebp+var_8]
.text:00000777                 add     edx, 198h
.text:0000077D                 push    edx             ; Src
.text:0000077E                 mov     eax, [ebp+var_4]
.text:00000781                 add     eax, 32788h
.text:00000786                 push    eax             ; Dst
.text:00000787                 call    _memcpy
.text:0000078C                 add     esp, 0Ch
.text:0000078F                 push    18h             ; Size
.text:00000791                 mov     ecx, [ebp+var_8]
.text:00000794                 add     ecx, 1B0h
.text:0000079A                 push    ecx             ; Src
.text:0000079B                 mov     edx, [ebp+var_4]
.text:0000079E                 add     edx, 327A0h
.text:000007A4                 push    edx             ; Dst
.text:000007A5                 call    _memcpy
.text:000007AA                 add     esp, 0Ch
.text:000007AD                 push    18h             ; Size
.text:000007AF                 mov     eax, [ebp+var_8]
.text:000007B2                 add     eax, 1C8h
.text:000007B7                 push    eax             ; Src
.text:000007B8                 mov     ecx, [ebp+var_4]
.text:000007BB                 add     ecx, 327B8h
.text:000007C1                 push    ecx             ; Dst
.text:000007C2                 call    _memcpy
.text:000007C7                 add     esp, 0Ch
.text:000007CA                 push    18h             ; Size
.text:000007CC                 mov     edx, [ebp+var_8]
.text:000007CF                 add     edx, 1E0h
.text:000007D5                 push    edx             ; Src
.text:000007D6                 mov     eax, [ebp+var_4]
.text:000007D9                 add     eax, 327D0h
.text:000007DE                 push    eax             ; Dst
.text:000007DF                 call    _memcpy
.text:000007E4                 add     esp, 0Ch
.text:000007E7                 push    0E4h ; 'S'      ; Size
.text:000007EC                 mov     ecx, [ebp+var_8]
.text:000007EF                 add     ecx, 578h
.text:000007F5                 push    ecx             ; Src
.text:000007F6                 mov     edx, [ebp+var_4]
.text:000007F9                 add     edx, 32B68h
.text:000007FF                 push    edx             ; Dst
.text:00000800                 call    _memcpy
.text:00000805                 add     esp, 0Ch
.text:00000808                 push    20h ; ' '       ; Size
.text:0000080A                 mov     eax, [ebp+var_8]
.text:0000080D                 add     eax, 65Ch
.text:00000812                 push    eax             ; Src
.text:00000813                 mov     ecx, [ebp+var_4]
.text:00000816                 add     ecx, 32C4Ch
.text:0000081C                 push    ecx             ; Dst
.text:0000081D                 call    _memcpy
.text:00000822                 add     esp, 0Ch
.text:00000825                 push    10h             ; Size
.text:00000827                 mov     edx, [ebp+var_8]
.text:0000082A                 add     edx, 8
.text:0000082D                 push    edx             ; Src
.text:0000082E                 mov     eax, [ebp+var_4]
.text:00000831                 add     eax, 34h ; '4'
.text:00000834                 push    eax             ; Dst
.text:00000835                 call    _memcpy
.text:0000083A                 add     esp, 0Ch
.text:0000083D                 mov     ecx, [ebp+var_4]
.text:00000840                 mov     edx, 300h
.text:00000845                 mov     ecx, [ecx+5Ch]
.text:00000848                 shl     edx, cl
.text:0000084A                 shl     edx, 1
.text:0000084C                 push    edx             ; Size
.text:0000084D                 mov     eax, [ebp+var_8]
.text:00000850                 mov     ecx, [eax]
.text:00000852                 push    ecx             ; Src
.text:00000853                 mov     edx, [ebp+var_4]
.text:00000856                 mov     eax, [edx+60h]
.text:00000859                 push    eax             ; Dst
.text:0000085A                 call    _memcpy
.text:0000085F                 add     esp, 0Ch
.text:00000862                 add     esp, 0Ch
.text:00000865                 cmp     ebp, esp
.text:00000867                 call    __RTC_CheckEsp
.text:0000086C                 mov     esp, ebp
.text:0000086E                 pop     ebp
.text:0000086F                 retn    4
.text:0000086F _LzmaEnc_RestoreState@4 endp
.text:0000086F
.text:0000086F ; ---------------------------------------------------------------------------
.text:00000872                 align 10h
.text:00000880
.text:00000880 ; =============== S U B R O U T I N E =======================================
.text:00000880
.text:00000880 ; Attributes: bp-based frame
.text:00000880
.text:00000880 ; __stdcall LzmaEnc_SetProps(x, x)
.text:00000880                 public _LzmaEnc_SetProps@8
.text:00000880 _LzmaEnc_SetProps@8 proc near           ; CODE XREF: LzmaEnc_Construct(x)+6Ep
.text:00000880                                         ; LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+35p
.text:00000880
.text:00000880 var_58          = dword ptr -58h
.text:00000880 var_54          = dword ptr -54h
.text:00000880 var_50          = dword ptr -50h
.text:00000880 var_4C          = dword ptr -4Ch
.text:00000880 var_44          = byte ptr -44h
.text:00000880 var_40          = dword ptr -40h
.text:00000880 var_34          = dword ptr -34h
.text:00000880 var_30          = dword ptr -30h
.text:00000880 var_2C          = dword ptr -2Ch
.text:00000880 var_28          = dword ptr -28h
.text:00000880 var_24          = dword ptr -24h
.text:00000880 var_20          = dword ptr -20h
.text:00000880 var_1C          = dword ptr -1Ch
.text:00000880 var_18          = dword ptr -18h
.text:00000880 var_14          = dword ptr -14h
.text:00000880 var_10          = dword ptr -10h
.text:00000880 var_8           = dword ptr -8
.text:00000880 var_4           = dword ptr -4
.text:00000880 arg_0           = dword ptr  8
.text:00000880 arg_4           = dword ptr  0Ch
.text:00000880
.text:00000880                 push    ebp
.text:00000881                 mov     ebp, esp
.text:00000883                 sub     esp, 58h
.text:00000886                 push    esi
.text:00000887                 push    edi
.text:00000888                 lea     edi, [ebp+var_58]
.text:0000088B                 mov     ecx, 16h
.text:00000890                 mov     eax, 0CCCCCCCCh
.text:00000895                 rep stosd
.text:00000897                 mov     eax, dword ptr ds:___security_cookie
.text:0000089C                 xor     eax, ebp
.text:0000089E                 mov     [ebp+var_4], eax
.text:000008A1                 mov     eax, [ebp+arg_0]
.text:000008A4                 mov     [ebp+var_8], eax
.text:000008A7                 mov     esi, [ebp+arg_4]
.text:000008AA                 mov     ecx, 0Eh
.text:000008AF                 lea     edi, [ebp+var_44]
.text:000008B2                 rep movsd
.text:000008B4                 lea     ecx, [ebp+var_44]
.text:000008B7                 push    ecx
.text:000008B8                 call    _LzmaEncProps_Normalize@4 ; LzmaEncProps_Normalize(x)
.text:000008BD                 cmp     [ebp+var_34], 8
.text:000008C1                 jg      short loc_8F4
.text:000008C3                 cmp     [ebp+var_30], 4
.text:000008C7                 jg      short loc_8F4
.text:000008C9                 cmp     [ebp+var_2C], 4
.text:000008CD                 jg      short loc_8F4
.text:000008CF                 mov     edx, [ebp+var_40]
.text:000008D2                 xor     eax, eax
.text:000008D4                 mov     [ebp+var_58], edx
.text:000008D7                 mov     [ebp+var_54], eax
.text:000008DA                 cmp     [ebp+var_54], 0
.text:000008DE                 ja      short loc_8F4
.text:000008E0                 jb      short loc_8EB
.text:000008E2                 cmp     [ebp+var_58], 8000000h
.text:000008E9                 ja      short loc_8F4
.text:000008EB
.text:000008EB loc_8EB:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+60j
.text:000008EB                 cmp     [ebp+var_40], 60000000h
.text:000008F2                 jbe     short loc_8FE
.text:000008F4
.text:000008F4 loc_8F4:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+41j
.text:000008F4                                         ; LzmaEnc_SetProps(x,x)+47j ...
.text:000008F4                 mov     eax, 5
.text:000008F9                 jmp     loc_9CC
.text:000008FE ; ---------------------------------------------------------------------------
.text:000008FE
.text:000008FE loc_8FE:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+72j
.text:000008FE                 mov     ecx, [ebp+var_8]
.text:00000901                 mov     edx, [ebp+var_40]
.text:00000904                 mov     [ecx+8Ch], edx
.text:0000090A                 mov     eax, [ebp+var_24]
.text:0000090D                 mov     [ebp+var_4C], eax
.text:00000910                 cmp     [ebp+var_4C], 5
.text:00000914                 jnb     short loc_91D
.text:00000916                 mov     [ebp+var_4C], 5
.text:0000091D
.text:0000091D loc_91D:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+94j
.text:0000091D                 cmp     [ebp+var_4C], 111h
.text:00000924                 jbe     short loc_92D
.text:00000926                 mov     [ebp+var_4C], 111h
.text:0000092D
.text:0000092D loc_92D:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+A4j
.text:0000092D                 mov     ecx, [ebp+var_8]
.text:00000930                 mov     edx, [ebp+var_4C]
.text:00000933                 mov     [ecx+2Ch], edx
.text:00000936                 mov     eax, [ebp+var_8]
.text:00000939                 mov     ecx, [ebp+var_34]
.text:0000093C                 mov     [eax+48h], ecx
.text:0000093F                 mov     edx, [ebp+var_8]
.text:00000942                 mov     eax, [ebp+var_30]
.text:00000945                 mov     [edx+4Ch], eax
.text:00000948                 mov     ecx, [ebp+var_8]
.text:0000094B                 mov     edx, [ebp+var_2C]
.text:0000094E                 mov     [ecx+50h], edx
.text:00000951                 xor     eax, eax
.text:00000953                 cmp     [ebp+var_28], 0
.text:00000957                 setz    al
.text:0000095A                 mov     ecx, [ebp+var_8]
.text:0000095D                 mov     [ecx+64h], eax
.text:00000960                 xor     edx, edx
.text:00000962                 cmp     [ebp+var_20], 0
.text:00000966                 setnz   dl
.text:00000969                 mov     eax, [ebp+var_8]
.text:0000096C                 mov     [eax+26Dh], dl
.text:00000972                 mov     [ebp+var_50], 4
.text:00000979                 cmp     [ebp+var_20], 0
.text:0000097D                 jz      short loc_99A
.text:0000097F                 cmp     [ebp+var_1C], 2
.text:00000983                 jge     short loc_98E
.text:00000985                 mov     [ebp+var_50], 2
.text:0000098C                 jmp     short loc_99A
.text:0000098E ; ---------------------------------------------------------------------------
.text:0000098E
.text:0000098E loc_98E:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+103j
.text:0000098E                 cmp     [ebp+var_1C], 4
.text:00000992                 jge     short loc_99A
.text:00000994                 mov     ecx, [ebp+var_1C]
.text:00000997                 mov     [ebp+var_50], ecx
.text:0000099A
.text:0000099A loc_99A:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+FDj
.text:0000099A                                         ; LzmaEnc_SetProps(x,x)+10Cj ...
.text:0000099A                 mov     edx, [ebp+var_8]
.text:0000099D                 mov     eax, [ebp+var_50]
.text:000009A0                 mov     [edx+298h], eax
.text:000009A6                 mov     ecx, [ebp+var_8]
.text:000009A9                 mov     edx, [ebp+var_18]
.text:000009AC                 mov     [ecx+280h], edx
.text:000009B2                 mov     eax, [ebp+var_8]
.text:000009B5                 mov     ecx, [ebp+var_14]
.text:000009B8                 mov     [eax+68h], ecx
.text:000009BB                 xor     edx, edx
.text:000009BD                 cmp     [ebp+var_10], 1
.text:000009C1                 setnle  dl
.text:000009C4                 mov     eax, [ebp+var_8]
.text:000009C7                 mov     [eax+70h], edx
.text:000009CA                 xor     eax, eax
.text:000009CC
.text:000009CC loc_9CC:                                ; CODE XREF: LzmaEnc_SetProps(x,x)+79j
.text:000009CC                 push    edx
.text:000009CD                 mov     ecx, ebp
.text:000009CF                 push    eax
.text:000009D0                 lea     edx, $LN14
.text:000009D6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000009DB                 pop     eax
.text:000009DC                 pop     edx
.text:000009DD                 pop     edi
.text:000009DE                 pop     esi
.text:000009DF                 mov     ecx, [ebp+var_4]
.text:000009E2                 xor     ecx, ebp
.text:000009E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000009E9                 add     esp, 58h
.text:000009EC                 cmp     ebp, esp
.text:000009EE                 call    __RTC_CheckEsp
.text:000009F3                 mov     esp, ebp
.text:000009F5                 pop     ebp
.text:000009F6                 retn    8
.text:000009F6 _LzmaEnc_SetProps@8 endp
.text:000009F6
.text:000009F6 ; ---------------------------------------------------------------------------
.text:000009F9                 align 4
.text:000009FC $LN14           dd 1                    ; DATA XREF: LzmaEnc_SetProps(x,x)+150o
.text:00000A00                 dd offset $LN13
.text:00000A04 $LN13           dd 0FFFFFFBCh, 38h      ; DATA XREF: .text:00000A00o
.text:00000A0C                 dd offset $LN12         ; "props"
.text:00000A10 $LN12           db 'props',0            ; DATA XREF: .text:00000A0Co
.text:00000A16                 align 10h
.text:00000A20
.text:00000A20 ; =============== S U B R O U T I N E =======================================
.text:00000A20
.text:00000A20 ; Attributes: bp-based frame
.text:00000A20
.text:00000A20 ; __stdcall LzmaEnc_Construct(x)
.text:00000A20                 public _LzmaEnc_Construct@4
.text:00000A20 _LzmaEnc_Construct@4 proc near          ; CODE XREF: LzmaEnc_Create(x)+32p
.text:00000A20
.text:00000A20 var_44          = byte ptr -44h
.text:00000A20 var_40          = byte ptr -40h
.text:00000A20 var_4           = dword ptr -4
.text:00000A20 arg_0           = dword ptr  8
.text:00000A20
.text:00000A20                 push    ebp
.text:00000A21                 mov     ebp, esp
.text:00000A23                 sub     esp, 44h
.text:00000A26                 push    edi
.text:00000A27                 lea     edi, [ebp+var_44]
.text:00000A2A                 mov     ecx, 11h
.text:00000A2F                 mov     eax, 0CCCCCCCCh
.text:00000A34                 rep stosd
.text:00000A36                 mov     eax, dword ptr ds:___security_cookie
.text:00000A3B                 xor     eax, ebp
.text:00000A3D                 mov     [ebp+var_4], eax
.text:00000A40                 mov     eax, [ebp+arg_0]
.text:00000A43                 add     eax, 98h ; 'ÿ'
.text:00000A48                 push    eax
.text:00000A49                 call    _RangeEnc_Construct@4 ; RangeEnc_Construct(x)
.text:00000A4E                 mov     ecx, [ebp+arg_0]
.text:00000A51                 add     ecx, 250h
.text:00000A57                 push    ecx
.text:00000A58                 call    _MatchFinder_Construct@4 ; MatchFinder_Construct(x)
.text:00000A5D                 mov     edx, [ebp+arg_0]
.text:00000A60                 add     edx, 0D4h ; '+'
.text:00000A66                 push    edx
.text:00000A67                 call    _MatchFinderMt_Construct@4 ; MatchFinderMt_Construct(x)
.text:00000A6C                 mov     eax, [ebp+arg_0]
.text:00000A6F                 add     eax, 250h
.text:00000A74                 mov     ecx, [ebp+arg_0]
.text:00000A77                 mov     [ecx+24Ch], eax
.text:00000A7D                 lea     edx, [ebp+var_40]
.text:00000A80                 push    edx
.text:00000A81                 call    _LzmaEncProps_Init@4 ; LzmaEncProps_Init(x)
.text:00000A86                 lea     eax, [ebp+var_40]
.text:00000A89                 push    eax
.text:00000A8A                 mov     ecx, [ebp+arg_0]
.text:00000A8D                 push    ecx
.text:00000A8E                 call    _LzmaEnc_SetProps@8 ; LzmaEnc_SetProps(x,x)
.text:00000A93                 mov     edx, [ebp+arg_0]
.text:00000A96                 add     edx, 30734h
.text:00000A9C                 push    edx
.text:00000A9D                 call    _LzmaEnc_FastPosInit@4 ; LzmaEnc_FastPosInit(x)
.text:00000AA2                 mov     eax, [ebp+arg_0]
.text:00000AA5                 add     eax, 30F34h
.text:00000AAA                 push    eax
.text:00000AAB                 call    _LzmaEnc_InitPriceTables@4 ; LzmaEnc_InitPriceTables(x)
.text:00000AB0                 mov     ecx, [ebp+arg_0]
.text:00000AB3                 mov     dword ptr [ecx+60h], 0
.text:00000ABA                 mov     edx, [ebp+arg_0]
.text:00000ABD                 mov     dword ptr [edx+3BCFCh], 0
.text:00000AC7                 push    edx
.text:00000AC8                 mov     ecx, ebp
.text:00000ACA                 push    eax
.text:00000ACB                 lea     edx, $LN5_0
.text:00000AD1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000AD6                 pop     eax
.text:00000AD7                 pop     edx
.text:00000AD8                 pop     edi
.text:00000AD9                 mov     ecx, [ebp+var_4]
.text:00000ADC                 xor     ecx, ebp
.text:00000ADE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000AE3                 add     esp, 44h
.text:00000AE6                 cmp     ebp, esp
.text:00000AE8                 call    __RTC_CheckEsp
.text:00000AED                 mov     esp, ebp
.text:00000AEF                 pop     ebp
.text:00000AF0                 retn    4
.text:00000AF0 _LzmaEnc_Construct@4 endp
.text:00000AF0
.text:00000AF0 ; ---------------------------------------------------------------------------
.text:00000AF3                 align 4
.text:00000AF4 $LN5_0          dd 1                    ; DATA XREF: LzmaEnc_Construct(x)+ABo
.text:00000AF8                 dd offset $LN4_0
.text:00000AFC $LN4_0          dd 0FFFFFFC0h, 38h      ; DATA XREF: .text:00000AF8o
.text:00000B04                 dd offset $LN3_0        ; "props"
.text:00000B08 $LN3_0          db 'props',0            ; DATA XREF: .text:00000B04o
.text:00000B0E                 align 10h
.text:00000B10
.text:00000B10 ; =============== S U B R O U T I N E =======================================
.text:00000B10
.text:00000B10 ; Attributes: bp-based frame
.text:00000B10
.text:00000B10 ; __stdcall LzmaEnc_FastPosInit(x)
.text:00000B10 _LzmaEnc_FastPosInit@4 proc near        ; CODE XREF: LzmaEnc_Construct(x)+7Dp
.text:00000B10
.text:00000B10 var_C           = dword ptr -0Ch
.text:00000B10 var_8           = dword ptr -8
.text:00000B10 var_4           = dword ptr -4
.text:00000B10 arg_0           = dword ptr  8
.text:00000B10
.text:00000B10                 push    ebp
.text:00000B11                 mov     ebp, esp
.text:00000B13                 sub     esp, 0Ch
.text:00000B16                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00000B1D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00000B24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000B2B                 mov     eax, [ebp+arg_0]
.text:00000B2E                 mov     byte ptr [eax], 0
.text:00000B31                 mov     ecx, [ebp+arg_0]
.text:00000B34                 mov     byte ptr [ecx+1], 1
.text:00000B38                 mov     edx, [ebp+arg_0]
.text:00000B3B                 add     edx, 2
.text:00000B3E                 mov     [ebp+arg_0], edx
.text:00000B41                 mov     [ebp+var_4], 2
.text:00000B48                 jmp     short loc_B53
.text:00000B4A ; ---------------------------------------------------------------------------
.text:00000B4A
.text:00000B4A loc_B4A:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+8Bj
.text:00000B4A                 mov     eax, [ebp+var_4]
.text:00000B4D                 add     eax, 1
.text:00000B50                 mov     [ebp+var_4], eax
.text:00000B53
.text:00000B53 loc_B53:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+38j
.text:00000B53                 cmp     [ebp+var_4], 16h
.text:00000B57                 jnb     short loc_B9D
.text:00000B59                 mov     ecx, [ebp+var_4]
.text:00000B5C                 shr     ecx, 1
.text:00000B5E                 sub     ecx, 1
.text:00000B61                 mov     edx, 1
.text:00000B66                 shl     edx, cl
.text:00000B68                 mov     [ebp+var_8], edx
.text:00000B6B                 mov     [ebp+var_C], 0
.text:00000B72                 jmp     short loc_B7D
.text:00000B74 ; ---------------------------------------------------------------------------
.text:00000B74
.text:00000B74 loc_B74:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+80j
.text:00000B74                 mov     eax, [ebp+var_C]
.text:00000B77                 add     eax, 1
.text:00000B7A                 mov     [ebp+var_C], eax
.text:00000B7D
.text:00000B7D loc_B7D:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+62j
.text:00000B7D                 mov     ecx, [ebp+var_C]
.text:00000B80                 cmp     ecx, [ebp+var_8]
.text:00000B83                 jnb     short loc_B92
.text:00000B85                 mov     edx, [ebp+arg_0]
.text:00000B88                 add     edx, [ebp+var_C]
.text:00000B8B                 mov     al, byte ptr [ebp+var_4]
.text:00000B8E                 mov     [edx], al
.text:00000B90                 jmp     short loc_B74
.text:00000B92 ; ---------------------------------------------------------------------------
.text:00000B92
.text:00000B92 loc_B92:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+73j
.text:00000B92                 mov     ecx, [ebp+arg_0]
.text:00000B95                 add     ecx, [ebp+var_8]
.text:00000B98                 mov     [ebp+arg_0], ecx
.text:00000B9B                 jmp     short loc_B4A
.text:00000B9D ; ---------------------------------------------------------------------------
.text:00000B9D
.text:00000B9D loc_B9D:                                ; CODE XREF: LzmaEnc_FastPosInit(x)+47j
.text:00000B9D                 mov     esp, ebp
.text:00000B9F                 pop     ebp
.text:00000BA0                 retn    4
.text:00000BA0 _LzmaEnc_FastPosInit@4 endp
.text:00000BA0
.text:00000BA0 ; ---------------------------------------------------------------------------
.text:00000BA3                 align 10h
.text:00000BB0
.text:00000BB0 ; =============== S U B R O U T I N E =======================================
.text:00000BB0
.text:00000BB0 ; Attributes: bp-based frame
.text:00000BB0
.text:00000BB0 ; __stdcall RangeEnc_Construct(x)
.text:00000BB0 _RangeEnc_Construct@4 proc near         ; CODE XREF: LzmaEnc_Construct(x)+29p
.text:00000BB0
.text:00000BB0 arg_0           = dword ptr  8
.text:00000BB0
.text:00000BB0                 push    ebp
.text:00000BB1                 mov     ebp, esp
.text:00000BB3                 mov     eax, [ebp+arg_0]
.text:00000BB6                 mov     dword ptr [eax+24h], 0
.text:00000BBD                 mov     ecx, [ebp+arg_0]
.text:00000BC0                 mov     dword ptr [ecx+20h], 0
.text:00000BC7                 pop     ebp
.text:00000BC8                 retn    4
.text:00000BC8 _RangeEnc_Construct@4 endp
.text:00000BC8
.text:00000BC8 ; ---------------------------------------------------------------------------
.text:00000BCB                 align 10h
.text:00000BD0
.text:00000BD0 ; =============== S U B R O U T I N E =======================================
.text:00000BD0
.text:00000BD0 ; Attributes: bp-based frame
.text:00000BD0
.text:00000BD0 ; __stdcall LzmaEnc_InitPriceTables(x)
.text:00000BD0 _LzmaEnc_InitPriceTables@4 proc near    ; CODE XREF: LzmaEnc_Construct(x)+8Bp
.text:00000BD0
.text:00000BD0 var_14          = dword ptr -14h
.text:00000BD0 var_10          = dword ptr -10h
.text:00000BD0 var_C           = dword ptr -0Ch
.text:00000BD0 var_8           = dword ptr -8
.text:00000BD0 var_4           = dword ptr -4
.text:00000BD0 arg_0           = dword ptr  8
.text:00000BD0
.text:00000BD0                 push    ebp
.text:00000BD1                 mov     ebp, esp
.text:00000BD3                 sub     esp, 14h
.text:00000BD6                 mov     eax, 0CCCCCCCCh
.text:00000BDB                 mov     [ebp+var_14], eax
.text:00000BDE                 mov     [ebp+var_10], eax
.text:00000BE1                 mov     [ebp+var_C], eax
.text:00000BE4                 mov     [ebp+var_8], eax
.text:00000BE7                 mov     [ebp+var_4], eax
.text:00000BEA                 mov     [ebp+var_4], 8
.text:00000BF1                 jmp     short loc_BFC
.text:00000BF3 ; ---------------------------------------------------------------------------
.text:00000BF3
.text:00000BF3 loc_BF3:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+AFj
.text:00000BF3                 mov     eax, [ebp+var_4]
.text:00000BF6                 add     eax, 10h
.text:00000BF9                 mov     [ebp+var_4], eax
.text:00000BFC
.text:00000BFC loc_BFC:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+21j
.text:00000BFC                 cmp     [ebp+var_4], 800h
.text:00000C03                 jnb     short loc_C84
.text:00000C05                 mov     [ebp+var_8], 4
.text:00000C0C                 mov     ecx, [ebp+var_4]
.text:00000C0F                 mov     [ebp+var_C], ecx
.text:00000C12                 mov     [ebp+var_10], 0
.text:00000C19                 mov     [ebp+var_14], 0
.text:00000C20                 jmp     short loc_C2B
.text:00000C22 ; ---------------------------------------------------------------------------
.text:00000C22
.text:00000C22 loc_C22:                                ; CODE XREF: LzmaEnc_InitPriceTables(x):loc_C61j
.text:00000C22                 mov     edx, [ebp+var_14]
.text:00000C25                 add     edx, 1
.text:00000C28                 mov     [ebp+var_14], edx
.text:00000C2B
.text:00000C2B loc_C2B:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+50j
.text:00000C2B                 mov     eax, [ebp+var_14]
.text:00000C2E                 cmp     eax, [ebp+var_8]
.text:00000C31                 jge     short loc_C63
.text:00000C33                 mov     ecx, [ebp+var_C]
.text:00000C36                 imul    ecx, [ebp+var_C]
.text:00000C3A                 mov     [ebp+var_C], ecx
.text:00000C3D                 mov     edx, [ebp+var_10]
.text:00000C40                 shl     edx, 1
.text:00000C42                 mov     [ebp+var_10], edx
.text:00000C45
.text:00000C45 loc_C45:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+8Fj
.text:00000C45                 cmp     [ebp+var_C], 10000h
.text:00000C4C                 jb      short loc_C61
.text:00000C4E                 mov     eax, [ebp+var_C]
.text:00000C51                 shr     eax, 1
.text:00000C53                 mov     [ebp+var_C], eax
.text:00000C56                 mov     ecx, [ebp+var_10]
.text:00000C59                 add     ecx, 1
.text:00000C5C                 mov     [ebp+var_10], ecx
.text:00000C5F                 jmp     short loc_C45
.text:00000C61 ; ---------------------------------------------------------------------------
.text:00000C61
.text:00000C61 loc_C61:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+7Cj
.text:00000C61                 jmp     short loc_C22
.text:00000C63 ; ---------------------------------------------------------------------------
.text:00000C63
.text:00000C63 loc_C63:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+61j
.text:00000C63                 mov     edx, 0Bh
.text:00000C68                 mov     ecx, [ebp+var_8]
.text:00000C6B                 shl     edx, cl
.text:00000C6D                 sub     edx, 0Fh
.text:00000C70                 sub     edx, [ebp+var_10]
.text:00000C73                 mov     eax, [ebp+var_4]
.text:00000C76                 shr     eax, 4
.text:00000C79                 mov     ecx, [ebp+arg_0]
.text:00000C7C                 mov     [ecx+eax*4], edx
.text:00000C7F                 jmp     loc_BF3
.text:00000C84 ; ---------------------------------------------------------------------------
.text:00000C84
.text:00000C84 loc_C84:                                ; CODE XREF: LzmaEnc_InitPriceTables(x)+33j
.text:00000C84                 mov     esp, ebp
.text:00000C86                 pop     ebp
.text:00000C87                 retn    4
.text:00000C87 _LzmaEnc_InitPriceTables@4 endp
.text:00000C87
.text:00000C87 ; ---------------------------------------------------------------------------
.text:00000C8A                 align 10h
.text:00000C90
.text:00000C90 ; =============== S U B R O U T I N E =======================================
.text:00000C90
.text:00000C90 ; Attributes: bp-based frame
.text:00000C90
.text:00000C90 ; __stdcall LzmaEnc_Create(x)
.text:00000C90                 public _LzmaEnc_Create@4
.text:00000C90 _LzmaEnc_Create@4 proc near             ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+18p
.text:00000C90
.text:00000C90 var_4           = dword ptr -4
.text:00000C90 arg_0           = dword ptr  8
.text:00000C90
.text:00000C90                 push    ebp
.text:00000C91                 mov     ebp, esp
.text:00000C93                 push    ecx
.text:00000C94                 push    esi
.text:00000C95                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00000C9C                 mov     esi, esp
.text:00000C9E                 push    45488h
.text:00000CA3                 mov     eax, [ebp+arg_0]
.text:00000CA6                 push    eax
.text:00000CA7                 mov     ecx, [ebp+arg_0]
.text:00000CAA                 mov     edx, [ecx]
.text:00000CAC                 call    edx
.text:00000CAE                 cmp     esi, esp
.text:00000CB0                 call    __RTC_CheckEsp
.text:00000CB5                 mov     [ebp+var_4], eax
.text:00000CB8                 cmp     [ebp+var_4], 0
.text:00000CBC                 jz      short loc_CC7
.text:00000CBE                 mov     eax, [ebp+var_4]
.text:00000CC1                 push    eax
.text:00000CC2                 call    _LzmaEnc_Construct@4 ; LzmaEnc_Construct(x)
.text:00000CC7
.text:00000CC7 loc_CC7:                                ; CODE XREF: LzmaEnc_Create(x)+2Cj
.text:00000CC7                 mov     eax, [ebp+var_4]
.text:00000CCA                 pop     esi
.text:00000CCB                 add     esp, 4
.text:00000CCE                 cmp     ebp, esp
.text:00000CD0                 call    __RTC_CheckEsp
.text:00000CD5                 mov     esp, ebp
.text:00000CD7                 pop     ebp
.text:00000CD8                 retn    4
.text:00000CD8 _LzmaEnc_Create@4 endp
.text:00000CD8
.text:00000CD8 ; ---------------------------------------------------------------------------
.text:00000CDB                 align 10h
.text:00000CE0
.text:00000CE0 ; =============== S U B R O U T I N E =======================================
.text:00000CE0
.text:00000CE0 ; Attributes: bp-based frame
.text:00000CE0
.text:00000CE0 ; __stdcall LzmaEnc_FreeLits(x, x)
.text:00000CE0                 public _LzmaEnc_FreeLits@8
.text:00000CE0 _LzmaEnc_FreeLits@8 proc near           ; CODE XREF: LzmaEnc_Destruct(x,x,x)+30p
.text:00000CE0                                         ; LzmaEnc_Alloc(x,x,x,x)+B7p ...
.text:00000CE0
.text:00000CE0 arg_0           = dword ptr  8
.text:00000CE0 arg_4           = dword ptr  0Ch
.text:00000CE0
.text:00000CE0                 push    ebp
.text:00000CE1                 mov     ebp, esp
.text:00000CE3                 push    esi
.text:00000CE4                 mov     esi, esp
.text:00000CE6                 mov     eax, [ebp+arg_0]
.text:00000CE9                 mov     ecx, [eax+60h]
.text:00000CEC                 push    ecx
.text:00000CED                 mov     edx, [ebp+arg_4]
.text:00000CF0                 push    edx
.text:00000CF1                 mov     eax, [ebp+arg_4]
.text:00000CF4                 mov     ecx, [eax+4]
.text:00000CF7                 call    ecx
.text:00000CF9                 cmp     esi, esp
.text:00000CFB                 call    __RTC_CheckEsp
.text:00000D00                 mov     esi, esp
.text:00000D02                 mov     edx, [ebp+arg_0]
.text:00000D05                 mov     eax, [edx+3BCFCh]
.text:00000D0B                 push    eax
.text:00000D0C                 mov     ecx, [ebp+arg_4]
.text:00000D0F                 push    ecx
.text:00000D10                 mov     edx, [ebp+arg_4]
.text:00000D13                 mov     eax, [edx+4]
.text:00000D16                 call    eax
.text:00000D18                 cmp     esi, esp
.text:00000D1A                 call    __RTC_CheckEsp
.text:00000D1F                 mov     ecx, [ebp+arg_0]
.text:00000D22                 mov     dword ptr [ecx+60h], 0
.text:00000D29                 mov     edx, [ebp+arg_0]
.text:00000D2C                 mov     dword ptr [edx+3BCFCh], 0
.text:00000D36                 pop     esi
.text:00000D37                 cmp     ebp, esp
.text:00000D39                 call    __RTC_CheckEsp
.text:00000D3E                 pop     ebp
.text:00000D3F                 retn    8
.text:00000D3F _LzmaEnc_FreeLits@8 endp
.text:00000D3F
.text:00000D3F ; ---------------------------------------------------------------------------
.text:00000D42                 align 10h
.text:00000D50
.text:00000D50 ; =============== S U B R O U T I N E =======================================
.text:00000D50
.text:00000D50 ; Attributes: bp-based frame
.text:00000D50
.text:00000D50 ; __stdcall LzmaEnc_Destruct(x, x, x)
.text:00000D50                 public _LzmaEnc_Destruct@12
.text:00000D50 _LzmaEnc_Destruct@12 proc near          ; CODE XREF: LzmaEnc_Destroy(x,x,x)+10p
.text:00000D50
.text:00000D50 arg_0           = dword ptr  8
.text:00000D50 arg_4           = dword ptr  0Ch
.text:00000D50 arg_8           = dword ptr  10h
.text:00000D50
.text:00000D50                 push    ebp
.text:00000D51                 mov     ebp, esp
.text:00000D53                 mov     eax, [ebp+arg_8]
.text:00000D56                 push    eax
.text:00000D57                 mov     ecx, [ebp+arg_0]
.text:00000D5A                 add     ecx, 0D4h ; '+'
.text:00000D60                 push    ecx
.text:00000D61                 call    _MatchFinderMt_Destruct@8 ; MatchFinderMt_Destruct(x,x)
.text:00000D66                 mov     edx, [ebp+arg_8]
.text:00000D69                 push    edx
.text:00000D6A                 mov     eax, [ebp+arg_0]
.text:00000D6D                 add     eax, 250h
.text:00000D72                 push    eax
.text:00000D73                 call    _MatchFinder_Free@8 ; MatchFinder_Free(x,x)
.text:00000D78                 mov     ecx, [ebp+arg_4]
.text:00000D7B                 push    ecx
.text:00000D7C                 mov     edx, [ebp+arg_0]
.text:00000D7F                 push    edx
.text:00000D80                 call    _LzmaEnc_FreeLits@8 ; LzmaEnc_FreeLits(x,x)
.text:00000D85                 mov     eax, [ebp+arg_4]
.text:00000D88                 push    eax
.text:00000D89                 mov     ecx, [ebp+arg_0]
.text:00000D8C                 add     ecx, 98h ; 'ÿ'
.text:00000D92                 push    ecx
.text:00000D93                 call    _RangeEnc_Free@8 ; RangeEnc_Free(x,x)
.text:00000D98                 cmp     ebp, esp
.text:00000D9A                 call    __RTC_CheckEsp
.text:00000D9F                 pop     ebp
.text:00000DA0                 retn    0Ch
.text:00000DA0 _LzmaEnc_Destruct@12 endp
.text:00000DA0
.text:00000DA0 ; ---------------------------------------------------------------------------
.text:00000DA3                 align 10h
.text:00000DB0
.text:00000DB0 ; =============== S U B R O U T I N E =======================================
.text:00000DB0
.text:00000DB0 ; Attributes: bp-based frame
.text:00000DB0
.text:00000DB0 ; __stdcall RangeEnc_Free(x, x)
.text:00000DB0 _RangeEnc_Free@8 proc near              ; CODE XREF: LzmaEnc_Destruct(x,x,x)+43p
.text:00000DB0
.text:00000DB0 arg_0           = dword ptr  8
.text:00000DB0 arg_4           = dword ptr  0Ch
.text:00000DB0
.text:00000DB0                 push    ebp
.text:00000DB1                 mov     ebp, esp
.text:00000DB3                 push    esi
.text:00000DB4                 mov     esi, esp
.text:00000DB6                 mov     eax, [ebp+arg_0]
.text:00000DB9                 mov     ecx, [eax+20h]
.text:00000DBC                 push    ecx
.text:00000DBD                 mov     edx, [ebp+arg_4]
.text:00000DC0                 push    edx
.text:00000DC1                 mov     eax, [ebp+arg_4]
.text:00000DC4                 mov     ecx, [eax+4]
.text:00000DC7                 call    ecx
.text:00000DC9                 cmp     esi, esp
.text:00000DCB                 call    __RTC_CheckEsp
.text:00000DD0                 mov     edx, [ebp+arg_0]
.text:00000DD3                 mov     dword ptr [edx+20h], 0
.text:00000DDA                 pop     esi
.text:00000DDB                 cmp     ebp, esp
.text:00000DDD                 call    __RTC_CheckEsp
.text:00000DE2                 pop     ebp
.text:00000DE3                 retn    8
.text:00000DE3 _RangeEnc_Free@8 endp
.text:00000DE3
.text:00000DE3 ; ---------------------------------------------------------------------------
.text:00000DE6                 align 10h
.text:00000DF0
.text:00000DF0 ; =============== S U B R O U T I N E =======================================
.text:00000DF0
.text:00000DF0 ; Attributes: bp-based frame
.text:00000DF0
.text:00000DF0 ; __stdcall LzmaEnc_Destroy(x, x, x)
.text:00000DF0                 public _LzmaEnc_Destroy@12
.text:00000DF0 _LzmaEnc_Destroy@12 proc near           ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+95p
.text:00000DF0
.text:00000DF0 arg_0           = dword ptr  8
.text:00000DF0 arg_4           = dword ptr  0Ch
.text:00000DF0 arg_8           = dword ptr  10h
.text:00000DF0
.text:00000DF0                 push    ebp
.text:00000DF1                 mov     ebp, esp
.text:00000DF3                 push    esi
.text:00000DF4                 mov     eax, [ebp+arg_8]
.text:00000DF7                 push    eax
.text:00000DF8                 mov     ecx, [ebp+arg_4]
.text:00000DFB                 push    ecx
.text:00000DFC                 mov     edx, [ebp+arg_0]
.text:00000DFF                 push    edx
.text:00000E00                 call    _LzmaEnc_Destruct@12 ; LzmaEnc_Destruct(x,x,x)
.text:00000E05                 mov     esi, esp
.text:00000E07                 mov     eax, [ebp+arg_0]
.text:00000E0A                 push    eax
.text:00000E0B                 mov     ecx, [ebp+arg_4]
.text:00000E0E                 push    ecx
.text:00000E0F                 mov     edx, [ebp+arg_4]
.text:00000E12                 mov     eax, [edx+4]
.text:00000E15                 call    eax
.text:00000E17                 cmp     esi, esp
.text:00000E19                 call    __RTC_CheckEsp
.text:00000E1E                 pop     esi
.text:00000E1F                 cmp     ebp, esp
.text:00000E21                 call    __RTC_CheckEsp
.text:00000E26                 pop     ebp
.text:00000E27                 retn    0Ch
.text:00000E27 _LzmaEnc_Destroy@12 endp
.text:00000E27
.text:00000E27 ; ---------------------------------------------------------------------------
.text:00000E2A                 align 10h
.text:00000E30
.text:00000E30 ; =============== S U B R O U T I N E =======================================
.text:00000E30
.text:00000E30 ; Attributes: bp-based frame
.text:00000E30
.text:00000E30 ; __stdcall LzmaEnc_Init(x)
.text:00000E30                 public _LzmaEnc_Init@4
.text:00000E30 _LzmaEnc_Init@4 proc near               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+91p
.text:00000E30                                         ; LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+63p
.text:00000E30
.text:00000E30 var_18          = dword ptr -18h
.text:00000E30 var_14          = dword ptr -14h
.text:00000E30 var_10          = dword ptr -10h
.text:00000E30 var_C           = dword ptr -0Ch
.text:00000E30 var_8           = dword ptr -8
.text:00000E30 var_4           = dword ptr -4
.text:00000E30 arg_0           = dword ptr  8
.text:00000E30
.text:00000E30                 push    ebp
.text:00000E31                 mov     ebp, esp
.text:00000E33                 sub     esp, 18h
.text:00000E36                 mov     eax, 0CCCCCCCCh
.text:00000E3B                 mov     [ebp+var_18], eax
.text:00000E3E                 mov     [ebp+var_14], eax
.text:00000E41                 mov     [ebp+var_10], eax
.text:00000E44                 mov     [ebp+var_C], eax
.text:00000E47                 mov     [ebp+var_8], eax
.text:00000E4A                 mov     [ebp+var_4], eax
.text:00000E4D                 mov     eax, [ebp+arg_0]
.text:00000E50                 mov     dword ptr [eax+44h], 0
.text:00000E57                 mov     [ebp+var_4], 0
.text:00000E5E                 jmp     short loc_E69
.text:00000E60 ; ---------------------------------------------------------------------------
.text:00000E60
.text:00000E60 loc_E60:                                ; CODE XREF: LzmaEnc_Init(x)+4Dj
.text:00000E60                 mov     ecx, [ebp+var_4]
.text:00000E63                 add     ecx, 1
.text:00000E66                 mov     [ebp+var_4], ecx
.text:00000E69
.text:00000E69 loc_E69:                                ; CODE XREF: LzmaEnc_Init(x)+2Ej
.text:00000E69                 cmp     [ebp+var_4], 4
.text:00000E6D                 jnb     short loc_E7F
.text:00000E6F                 mov     edx, [ebp+var_4]
.text:00000E72                 mov     eax, [ebp+arg_0]
.text:00000E75                 mov     dword ptr [eax+edx*4+34h], 0
.text:00000E7D                 jmp     short loc_E60
.text:00000E7F ; ---------------------------------------------------------------------------
.text:00000E7F
.text:00000E7F loc_E7F:                                ; CODE XREF: LzmaEnc_Init(x)+3Dj
.text:00000E7F                 mov     ecx, [ebp+arg_0]
.text:00000E82                 add     ecx, 98h ; 'ÿ'
.text:00000E88                 push    ecx
.text:00000E89                 call    _RangeEnc_Init@4 ; RangeEnc_Init(x)
.text:00000E8E                 mov     [ebp+var_4], 0
.text:00000E95                 jmp     short loc_EA0
.text:00000E97 ; ---------------------------------------------------------------------------
.text:00000E97
.text:00000E97 loc_E97:                                ; CODE XREF: LzmaEnc_Init(x)+118j
.text:00000E97                 mov     edx, [ebp+var_4]
.text:00000E9A                 add     edx, 1
.text:00000E9D                 mov     [ebp+var_4], edx
.text:00000EA0
.text:00000EA0 loc_EA0:                                ; CODE XREF: LzmaEnc_Init(x)+65j
.text:00000EA0                 cmp     [ebp+var_4], 0Ch
.text:00000EA4                 jnb     loc_F4D
.text:00000EAA                 mov     [ebp+var_8], 0
.text:00000EB1                 jmp     short loc_EBC
.text:00000EB3 ; ---------------------------------------------------------------------------
.text:00000EB3
.text:00000EB3 loc_EB3:                                ; CODE XREF: LzmaEnc_Init(x)+CAj
.text:00000EB3                 mov     eax, [ebp+var_8]
.text:00000EB6                 add     eax, 1
.text:00000EB9                 mov     [ebp+var_8], eax
.text:00000EBC
.text:00000EBC loc_EBC:                                ; CODE XREF: LzmaEnc_Init(x)+81j
.text:00000EBC                 cmp     [ebp+var_8], 10h
.text:00000EC0                 jnb     short loc_EFC
.text:00000EC2                 mov     ecx, [ebp+var_4]
.text:00000EC5                 shl     ecx, 5
.text:00000EC8                 mov     edx, [ebp+arg_0]
.text:00000ECB                 lea     eax, [edx+ecx+32608h]
.text:00000ED2                 mov     ecx, 400h
.text:00000ED7                 mov     edx, [ebp+var_8]
.text:00000EDA                 mov     [eax+edx*2], cx
.text:00000EDE                 mov     eax, [ebp+var_4]
.text:00000EE1                 shl     eax, 5
.text:00000EE4                 mov     ecx, [ebp+arg_0]
.text:00000EE7                 lea     edx, [ecx+eax+327E8h]
.text:00000EEE                 mov     eax, 400h
.text:00000EF3                 mov     ecx, [ebp+var_8]
.text:00000EF6                 mov     [edx+ecx*2], ax
.text:00000EFA                 jmp     short loc_EB3
.text:00000EFC ; ---------------------------------------------------------------------------
.text:00000EFC
.text:00000EFC loc_EFC:                                ; CODE XREF: LzmaEnc_Init(x)+90j
.text:00000EFC                 mov     edx, 400h
.text:00000F01                 mov     eax, [ebp+var_4]
.text:00000F04                 mov     ecx, [ebp+arg_0]
.text:00000F07                 mov     [ecx+eax*2+32788h], dx
.text:00000F0F                 mov     edx, 400h
.text:00000F14                 mov     eax, [ebp+var_4]
.text:00000F17                 mov     ecx, [ebp+arg_0]
.text:00000F1A                 mov     [ecx+eax*2+327A0h], dx
.text:00000F22                 mov     edx, 400h
.text:00000F27                 mov     eax, [ebp+var_4]
.text:00000F2A                 mov     ecx, [ebp+arg_0]
.text:00000F2D                 mov     [ecx+eax*2+327B8h], dx
.text:00000F35                 mov     edx, 400h
.text:00000F3A                 mov     eax, [ebp+var_4]
.text:00000F3D                 mov     ecx, [ebp+arg_0]
.text:00000F40                 mov     [ecx+eax*2+327D0h], dx
.text:00000F48                 jmp     loc_E97
.text:00000F4D ; ---------------------------------------------------------------------------
.text:00000F4D
.text:00000F4D loc_F4D:                                ; CODE XREF: LzmaEnc_Init(x)+74j
.text:00000F4D                 mov     edx, [ebp+arg_0]
.text:00000F50                 mov     ecx, [edx+4Ch]
.text:00000F53                 mov     eax, [ebp+arg_0]
.text:00000F56                 add     ecx, [eax+48h]
.text:00000F59                 mov     edx, 300h
.text:00000F5E                 shl     edx, cl
.text:00000F60                 mov     [ebp+var_C], edx
.text:00000F63                 mov     eax, [ebp+arg_0]
.text:00000F66                 mov     ecx, [eax+60h]
.text:00000F69                 mov     [ebp+var_10], ecx
.text:00000F6C                 mov     [ebp+var_4], 0
.text:00000F73                 jmp     short loc_F7E
.text:00000F75 ; ---------------------------------------------------------------------------
.text:00000F75
.text:00000F75 loc_F75:                                ; CODE XREF: LzmaEnc_Init(x)+165j
.text:00000F75                 mov     edx, [ebp+var_4]
.text:00000F78                 add     edx, 1
.text:00000F7B                 mov     [ebp+var_4], edx
.text:00000F7E
.text:00000F7E loc_F7E:                                ; CODE XREF: LzmaEnc_Init(x)+143j
.text:00000F7E                 mov     eax, [ebp+var_4]
.text:00000F81                 cmp     eax, [ebp+var_C]
.text:00000F84                 jnb     short loc_F97
.text:00000F86                 mov     ecx, 400h
.text:00000F8B                 mov     edx, [ebp+var_4]
.text:00000F8E                 mov     eax, [ebp+var_10]
.text:00000F91                 mov     [eax+edx*2], cx
.text:00000F95                 jmp     short loc_F75
.text:00000F97 ; ---------------------------------------------------------------------------
.text:00000F97
.text:00000F97 loc_F97:                                ; CODE XREF: LzmaEnc_Init(x)+154j
.text:00000F97                 mov     [ebp+var_4], 0
.text:00000F9E                 jmp     short loc_FA9
.text:00000FA0 ; ---------------------------------------------------------------------------
.text:00000FA0
.text:00000FA0 loc_FA0:                                ; CODE XREF: LzmaEnc_Init(x):loc_FEBj
.text:00000FA0                 mov     ecx, [ebp+var_4]
.text:00000FA3                 add     ecx, 1
.text:00000FA6                 mov     [ebp+var_4], ecx
.text:00000FA9
.text:00000FA9 loc_FA9:                                ; CODE XREF: LzmaEnc_Init(x)+16Ej
.text:00000FA9                 cmp     [ebp+var_4], 4
.text:00000FAD                 jnb     short loc_FED
.text:00000FAF                 mov     edx, [ebp+var_4]
.text:00000FB2                 shl     edx, 7
.text:00000FB5                 mov     eax, [ebp+arg_0]
.text:00000FB8                 lea     ecx, [eax+edx+32968h]
.text:00000FBF                 mov     [ebp+var_14], ecx
.text:00000FC2                 mov     [ebp+var_18], 0
.text:00000FC9                 jmp     short loc_FD4
.text:00000FCB ; ---------------------------------------------------------------------------
.text:00000FCB
.text:00000FCB loc_FCB:                                ; CODE XREF: LzmaEnc_Init(x)+1B9j
.text:00000FCB                 mov     edx, [ebp+var_18]
.text:00000FCE                 add     edx, 1
.text:00000FD1                 mov     [ebp+var_18], edx
.text:00000FD4
.text:00000FD4 loc_FD4:                                ; CODE XREF: LzmaEnc_Init(x)+199j
.text:00000FD4                 cmp     [ebp+var_18], 40h ; '@'
.text:00000FD8                 jnb     short loc_FEB
.text:00000FDA                 mov     eax, 400h
.text:00000FDF                 mov     ecx, [ebp+var_18]
.text:00000FE2                 mov     edx, [ebp+var_14]
.text:00000FE5                 mov     [edx+ecx*2], ax
.text:00000FE9                 jmp     short loc_FCB
.text:00000FEB ; ---------------------------------------------------------------------------
.text:00000FEB
.text:00000FEB loc_FEB:                                ; CODE XREF: LzmaEnc_Init(x)+1A8j
.text:00000FEB                 jmp     short loc_FA0
.text:00000FED ; ---------------------------------------------------------------------------
.text:00000FED
.text:00000FED loc_FED:                                ; CODE XREF: LzmaEnc_Init(x)+17Dj
.text:00000FED                 mov     [ebp+var_4], 0
.text:00000FF4                 jmp     short loc_FFF
.text:00000FF6 ; ---------------------------------------------------------------------------
.text:00000FF6
.text:00000FF6 loc_FF6:                                ; CODE XREF: LzmaEnc_Init(x)+1E8j
.text:00000FF6                 mov     eax, [ebp+var_4]
.text:00000FF9                 add     eax, 1
.text:00000FFC                 mov     [ebp+var_4], eax
.text:00000FFF
.text:00000FFF loc_FFF:                                ; CODE XREF: LzmaEnc_Init(x)+1C4j
.text:00000FFF                 cmp     [ebp+var_4], 72h ; 'r'
.text:00001003                 jnb     short loc_101A
.text:00001005                 mov     ecx, 400h
.text:0000100A                 mov     edx, [ebp+var_4]
.text:0000100D                 mov     eax, [ebp+arg_0]
.text:00001010                 mov     [eax+edx*2+32B68h], cx
.text:00001018                 jmp     short loc_FF6
.text:0000101A ; ---------------------------------------------------------------------------
.text:0000101A
.text:0000101A loc_101A:                               ; CODE XREF: LzmaEnc_Init(x)+1D3j
.text:0000101A                 mov     ecx, [ebp+arg_0]
.text:0000101D                 add     ecx, 32C6Ch
.text:00001023                 push    ecx
.text:00001024                 call    _LenEnc_Init@4  ; LenEnc_Init(x)
.text:00001029                 mov     edx, [ebp+arg_0]
.text:0000102C                 add     edx, 374B4h
.text:00001032                 push    edx
.text:00001033                 call    _LenEnc_Init@4  ; LenEnc_Init(x)
.text:00001038                 mov     [ebp+var_4], 0
.text:0000103F                 jmp     short loc_104A
.text:00001041 ; ---------------------------------------------------------------------------
.text:00001041
.text:00001041 loc_1041:                               ; CODE XREF: LzmaEnc_Init(x)+233j
.text:00001041                 mov     eax, [ebp+var_4]
.text:00001044                 add     eax, 1
.text:00001047                 mov     [ebp+var_4], eax
.text:0000104A
.text:0000104A loc_104A:                               ; CODE XREF: LzmaEnc_Init(x)+20Fj
.text:0000104A                 cmp     [ebp+var_4], 10h
.text:0000104E                 jnb     short loc_1065
.text:00001050                 mov     ecx, 400h
.text:00001055                 mov     edx, [ebp+var_4]
.text:00001058                 mov     eax, [ebp+arg_0]
.text:0000105B                 mov     [eax+edx*2+32C4Ch], cx
.text:00001063                 jmp     short loc_1041
.text:00001065 ; ---------------------------------------------------------------------------
.text:00001065
.text:00001065 loc_1065:                               ; CODE XREF: LzmaEnc_Init(x)+21Ej
.text:00001065                 mov     ecx, [ebp+arg_0]
.text:00001068                 mov     dword ptr [ecx+18h], 0
.text:0000106F                 mov     edx, [ebp+arg_0]
.text:00001072                 mov     dword ptr [edx+1Ch], 0
.text:00001079                 mov     eax, [ebp+arg_0]
.text:0000107C                 mov     dword ptr [eax+30h], 0
.text:00001083                 mov     ecx, [ebp+arg_0]
.text:00001086                 mov     edx, 1
.text:0000108B                 mov     ecx, [ecx+50h]
.text:0000108E                 shl     edx, cl
.text:00001090                 sub     edx, 1
.text:00001093                 mov     eax, [ebp+arg_0]
.text:00001096                 mov     [eax+58h], edx
.text:00001099                 mov     ecx, [ebp+arg_0]
.text:0000109C                 mov     edx, 1
.text:000010A1                 mov     ecx, [ecx+4Ch]
.text:000010A4                 shl     edx, cl
.text:000010A6                 sub     edx, 1
.text:000010A9                 mov     eax, [ebp+arg_0]
.text:000010AC                 mov     [eax+54h], edx
.text:000010AF                 add     esp, 18h
.text:000010B2                 cmp     ebp, esp
.text:000010B4                 call    __RTC_CheckEsp
.text:000010B9                 mov     esp, ebp
.text:000010BB                 pop     ebp
.text:000010BC                 retn    4
.text:000010BC _LzmaEnc_Init@4 endp
.text:000010BC
.text:000010BC ; ---------------------------------------------------------------------------
.text:000010BF                 align 10h
.text:000010C0
.text:000010C0 ; =============== S U B R O U T I N E =======================================
.text:000010C0
.text:000010C0 ; Attributes: bp-based frame
.text:000010C0
.text:000010C0 ; __stdcall RangeEnc_Init(x)
.text:000010C0 _RangeEnc_Init@4 proc near              ; CODE XREF: LzmaEnc_Init(x)+59p
.text:000010C0                                         ; LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+89p
.text:000010C0
.text:000010C0 arg_0           = dword ptr  8
.text:000010C0
.text:000010C0                 push    ebp
.text:000010C1                 mov     ebp, esp
.text:000010C3                 mov     eax, [ebp+arg_0]
.text:000010C6                 mov     dword ptr [eax+8], 0
.text:000010CD                 mov     dword ptr [eax+0Ch], 0
.text:000010D4                 mov     ecx, [ebp+arg_0]
.text:000010D7                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:000010DD                 mov     edx, [ebp+arg_0]
.text:000010E0                 mov     dword ptr [edx+10h], 1
.text:000010E7                 mov     dword ptr [edx+14h], 0
.text:000010EE                 mov     eax, [ebp+arg_0]
.text:000010F1                 mov     byte ptr [eax+4], 0
.text:000010F5                 mov     ecx, [ebp+arg_0]
.text:000010F8                 mov     edx, [ebp+arg_0]
.text:000010FB                 mov     eax, [edx+20h]
.text:000010FE                 mov     [ecx+18h], eax
.text:00001101                 mov     ecx, [ebp+arg_0]
.text:00001104                 mov     dword ptr [ecx+28h], 0
.text:0000110B                 mov     dword ptr [ecx+2Ch], 0
.text:00001112                 mov     edx, [ebp+arg_0]
.text:00001115                 mov     dword ptr [edx+30h], 0
.text:0000111C                 pop     ebp
.text:0000111D                 retn    4
.text:0000111D _RangeEnc_Init@4 endp
.text:0000111D
.text:00001120
.text:00001120 ; =============== S U B R O U T I N E =======================================
.text:00001120
.text:00001120 ; Attributes: bp-based frame
.text:00001120
.text:00001120 ; __stdcall LenEnc_Init(x)
.text:00001120 _LenEnc_Init@4  proc near               ; CODE XREF: LzmaEnc_Init(x)+1F4p
.text:00001120                                         ; LzmaEnc_Init(x)+203p
.text:00001120
.text:00001120 var_4           = dword ptr -4
.text:00001120 arg_0           = dword ptr  8
.text:00001120
.text:00001120                 push    ebp
.text:00001121                 mov     ebp, esp
.text:00001123                 push    ecx
.text:00001124                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000112B                 mov     eax, 400h
.text:00001130                 mov     ecx, [ebp+arg_0]
.text:00001133                 mov     [ecx+2], ax
.text:00001137                 mov     edx, 400h
.text:0000113C                 mov     eax, [ebp+arg_0]
.text:0000113F                 mov     [eax], dx
.text:00001142                 mov     [ebp+var_4], 0
.text:00001149                 jmp     short loc_1154
.text:0000114B ; ---------------------------------------------------------------------------
.text:0000114B
.text:0000114B loc_114B:                               ; CODE XREF: LenEnc_Init(x)+4Dj
.text:0000114B                 mov     ecx, [ebp+var_4]
.text:0000114E                 add     ecx, 1
.text:00001151                 mov     [ebp+var_4], ecx
.text:00001154
.text:00001154 loc_1154:                               ; CODE XREF: LenEnc_Init(x)+29j
.text:00001154                 cmp     [ebp+var_4], 80h ; 'Ç'
.text:0000115B                 jnb     short loc_116F
.text:0000115D                 mov     edx, 400h
.text:00001162                 mov     eax, [ebp+var_4]
.text:00001165                 mov     ecx, [ebp+arg_0]
.text:00001168                 mov     [ecx+eax*2+4], dx
.text:0000116D                 jmp     short loc_114B
.text:0000116F ; ---------------------------------------------------------------------------
.text:0000116F
.text:0000116F loc_116F:                               ; CODE XREF: LenEnc_Init(x)+3Bj
.text:0000116F                 mov     [ebp+var_4], 0
.text:00001176                 jmp     short loc_1181
.text:00001178 ; ---------------------------------------------------------------------------
.text:00001178
.text:00001178 loc_1178:                               ; CODE XREF: LenEnc_Init(x)+7Dj
.text:00001178                 mov     edx, [ebp+var_4]
.text:0000117B                 add     edx, 1
.text:0000117E                 mov     [ebp+var_4], edx
.text:00001181
.text:00001181 loc_1181:                               ; CODE XREF: LenEnc_Init(x)+56j
.text:00001181                 cmp     [ebp+var_4], 80h ; 'Ç'
.text:00001188                 jnb     short loc_119F
.text:0000118A                 mov     eax, 400h
.text:0000118F                 mov     ecx, [ebp+var_4]
.text:00001192                 mov     edx, [ebp+arg_0]
.text:00001195                 mov     [edx+ecx*2+104h], ax
.text:0000119D                 jmp     short loc_1178
.text:0000119F ; ---------------------------------------------------------------------------
.text:0000119F
.text:0000119F loc_119F:                               ; CODE XREF: LenEnc_Init(x)+68j
.text:0000119F                 mov     [ebp+var_4], 0
.text:000011A6                 jmp     short loc_11B1
.text:000011A8 ; ---------------------------------------------------------------------------
.text:000011A8
.text:000011A8 loc_11A8:                               ; CODE XREF: LenEnc_Init(x)+ADj
.text:000011A8                 mov     eax, [ebp+var_4]
.text:000011AB                 add     eax, 1
.text:000011AE                 mov     [ebp+var_4], eax
.text:000011B1
.text:000011B1 loc_11B1:                               ; CODE XREF: LenEnc_Init(x)+86j
.text:000011B1                 cmp     [ebp+var_4], 100h
.text:000011B8                 jnb     short loc_11CF
.text:000011BA                 mov     ecx, 400h
.text:000011BF                 mov     edx, [ebp+var_4]
.text:000011C2                 mov     eax, [ebp+arg_0]
.text:000011C5                 mov     [eax+edx*2+204h], cx
.text:000011CD                 jmp     short loc_11A8
.text:000011CF ; ---------------------------------------------------------------------------
.text:000011CF
.text:000011CF loc_11CF:                               ; CODE XREF: LenEnc_Init(x)+98j
.text:000011CF                 mov     esp, ebp
.text:000011D1                 pop     ebp
.text:000011D2                 retn    4
.text:000011D2 _LenEnc_Init@4  endp
.text:000011D2
.text:000011D2 ; ---------------------------------------------------------------------------
.text:000011D5                 align 10h
.text:000011E0
.text:000011E0 ; =============== S U B R O U T I N E =======================================
.text:000011E0
.text:000011E0 ; Attributes: bp-based frame
.text:000011E0
.text:000011E0 ; __stdcall LzmaEnc_InitPrices(x)
.text:000011E0                 public _LzmaEnc_InitPrices@4
.text:000011E0 _LzmaEnc_InitPrices@4 proc near         ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+9Ap
.text:000011E0                                         ; LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+6Cp
.text:000011E0
.text:000011E0 var_4           = dword ptr -4
.text:000011E0 arg_0           = dword ptr  8
.text:000011E0
.text:000011E0                 push    ebp
.text:000011E1                 mov     ebp, esp
.text:000011E3                 push    ecx
.text:000011E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000011EB                 mov     eax, [ebp+arg_0]
.text:000011EE                 cmp     dword ptr [eax+64h], 0
.text:000011F2                 jnz     short loc_1206
.text:000011F4                 mov     ecx, [ebp+arg_0]
.text:000011F7                 push    ecx
.text:000011F8                 call    _FillDistancesPrices@4 ; FillDistancesPrices(x)
.text:000011FD                 mov     edx, [ebp+arg_0]
.text:00001200                 push    edx
.text:00001201                 call    _FillAlignPrices@4 ; FillAlignPrices(x)
.text:00001206
.text:00001206 loc_1206:                               ; CODE XREF: LzmaEnc_InitPrices(x)+12j
.text:00001206                 mov     eax, [ebp+arg_0]
.text:00001209                 mov     ecx, [eax+2Ch]
.text:0000120C                 add     ecx, 0FFFFFFFFh
.text:0000120F                 mov     [ebp+var_4], ecx
.text:00001212                 mov     edx, [ebp+arg_0]
.text:00001215                 mov     eax, [ebp+var_4]
.text:00001218                 mov     [edx+378B8h], eax
.text:0000121E                 mov     ecx, [ebp+arg_0]
.text:00001221                 mov     edx, [ebp+var_4]
.text:00001224                 mov     [ecx+33070h], edx
.text:0000122A                 mov     eax, [ebp+arg_0]
.text:0000122D                 add     eax, 30F34h
.text:00001232                 push    eax
.text:00001233                 mov     ecx, [ebp+arg_0]
.text:00001236                 mov     edx, 1
.text:0000123B                 mov     ecx, [ecx+50h]
.text:0000123E                 shl     edx, cl
.text:00001240                 push    edx
.text:00001241                 mov     eax, [ebp+arg_0]
.text:00001244                 add     eax, 32C6Ch
.text:00001249                 push    eax
.text:0000124A                 call    _LenPriceEnc_UpdateTables@12 ; LenPriceEnc_UpdateTables(x,x,x)
.text:0000124F                 mov     ecx, [ebp+arg_0]
.text:00001252                 add     ecx, 30F34h
.text:00001258                 push    ecx
.text:00001259                 mov     edx, [ebp+arg_0]
.text:0000125C                 mov     eax, 1
.text:00001261                 mov     ecx, [edx+50h]
.text:00001264                 shl     eax, cl
.text:00001266                 push    eax
.text:00001267                 mov     ecx, [ebp+arg_0]
.text:0000126A                 add     ecx, 374B4h
.text:00001270                 push    ecx
.text:00001271                 call    _LenPriceEnc_UpdateTables@12 ; LenPriceEnc_UpdateTables(x,x,x)
.text:00001276                 add     esp, 4
.text:00001279                 cmp     ebp, esp
.text:0000127B                 call    __RTC_CheckEsp
.text:00001280                 mov     esp, ebp
.text:00001282                 pop     ebp
.text:00001283                 retn    4
.text:00001283 _LzmaEnc_InitPrices@4 endp
.text:00001283
.text:00001283 ; ---------------------------------------------------------------------------
.text:00001286                 align 10h
.text:00001290
.text:00001290 ; =============== S U B R O U T I N E =======================================
.text:00001290
.text:00001290 ; Attributes: bp-based frame
.text:00001290
.text:00001290 ; __stdcall LenPriceEnc_UpdateTables(x, x, x)
.text:00001290 _LenPriceEnc_UpdateTables@12 proc near  ; CODE XREF: LzmaEnc_InitPrices(x)+6Ap
.text:00001290                                         ; LzmaEnc_InitPrices(x)+91p
.text:00001290
.text:00001290 var_4           = dword ptr -4
.text:00001290 arg_0           = dword ptr  8
.text:00001290 arg_4           = dword ptr  0Ch
.text:00001290 arg_8           = dword ptr  10h
.text:00001290
.text:00001290                 push    ebp
.text:00001291                 mov     ebp, esp
.text:00001293                 push    ecx
.text:00001294                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000129B                 mov     [ebp+var_4], 0
.text:000012A2                 jmp     short loc_12AD
.text:000012A4 ; ---------------------------------------------------------------------------
.text:000012A4
.text:000012A4 loc_12A4:                               ; CODE XREF: LenPriceEnc_UpdateTables(x,x,x)+34j
.text:000012A4                 mov     eax, [ebp+var_4]
.text:000012A7                 add     eax, 1
.text:000012AA                 mov     [ebp+var_4], eax
.text:000012AD
.text:000012AD loc_12AD:                               ; CODE XREF: LenPriceEnc_UpdateTables(x,x,x)+12j
.text:000012AD                 mov     ecx, [ebp+var_4]
.text:000012B0                 cmp     ecx, [ebp+arg_4]
.text:000012B3                 jnb     short loc_12C6
.text:000012B5                 mov     edx, [ebp+arg_8]
.text:000012B8                 push    edx
.text:000012B9                 mov     edx, [ebp+var_4]
.text:000012BC                 mov     ecx, [ebp+arg_0]
.text:000012BF                 call    @LenPriceEnc_UpdateTable@12 ; LenPriceEnc_UpdateTable(x,x,x)
.text:000012C4                 jmp     short loc_12A4
.text:000012C6 ; ---------------------------------------------------------------------------
.text:000012C6
.text:000012C6 loc_12C6:                               ; CODE XREF: LenPriceEnc_UpdateTables(x,x,x)+23j
.text:000012C6                 add     esp, 4
.text:000012C9                 cmp     ebp, esp
.text:000012CB                 call    __RTC_CheckEsp
.text:000012D0                 mov     esp, ebp
.text:000012D2                 pop     ebp
.text:000012D3                 retn    0Ch
.text:000012D3 _LenPriceEnc_UpdateTables@12 endp
.text:000012D3
.text:000012D3 ; ---------------------------------------------------------------------------
.text:000012D6                 align 10h
.text:000012E0
.text:000012E0 ; =============== S U B R O U T I N E =======================================
.text:000012E0
.text:000012E0 ; Attributes: bp-based frame
.text:000012E0
.text:000012E0 ; __fastcall LenPriceEnc_UpdateTable(x, x, x)
.text:000012E0 @LenPriceEnc_UpdateTable@12 proc near   ; CODE XREF: LenPriceEnc_UpdateTables(x,x,x)+2Fp
.text:000012E0                                         ; LenEnc_Encode2(x,x,x,x,x,x)+59p
.text:000012E0
.text:000012E0 var_8           = dword ptr -8
.text:000012E0 var_4           = dword ptr -4
.text:000012E0 arg_0           = dword ptr  8
.text:000012E0
.text:000012E0                 push    ebp
.text:000012E1                 mov     ebp, esp
.text:000012E3                 sub     esp, 8
.text:000012E6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000012ED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000012F4                 mov     [ebp+var_8], edx
.text:000012F7                 mov     [ebp+var_4], ecx
.text:000012FA                 mov     eax, [ebp+arg_0]
.text:000012FD                 push    eax
.text:000012FE                 mov     ecx, [ebp+var_8]
.text:00001301                 imul    ecx, 440h
.text:00001307                 mov     edx, [ebp+var_4]
.text:0000130A                 lea     eax, [edx+ecx+408h]
.text:00001311                 push    eax
.text:00001312                 mov     ecx, [ebp+var_4]
.text:00001315                 mov     edx, [ecx+404h]
.text:0000131B                 push    edx
.text:0000131C                 mov     eax, [ebp+var_8]
.text:0000131F                 push    eax
.text:00001320                 mov     ecx, [ebp+var_4]
.text:00001323                 push    ecx
.text:00001324                 call    _LenEnc_SetPrices@20 ; LenEnc_SetPrices(x,x,x,x,x)
.text:00001329                 mov     edx, [ebp+var_8]
.text:0000132C                 mov     eax, [ebp+var_4]
.text:0000132F                 mov     ecx, [ebp+var_4]
.text:00001332                 mov     ecx, [ecx+404h]
.text:00001338                 mov     [eax+edx*4+4808h], ecx
.text:0000133F                 add     esp, 8
.text:00001342                 cmp     ebp, esp
.text:00001344                 call    __RTC_CheckEsp
.text:00001349                 mov     esp, ebp
.text:0000134B                 pop     ebp
.text:0000134C                 retn    4
.text:0000134C @LenPriceEnc_UpdateTable@12 endp
.text:0000134C
.text:0000134C ; ---------------------------------------------------------------------------
.text:0000134F                 align 10h
.text:00001350
.text:00001350 ; =============== S U B R O U T I N E =======================================
.text:00001350
.text:00001350 ; Attributes: bp-based frame
.text:00001350
.text:00001350 ; __stdcall LenEnc_SetPrices(x, x, x, x, x)
.text:00001350 _LenEnc_SetPrices@20 proc near          ; CODE XREF: LenPriceEnc_UpdateTable(x,x,x)+44p
.text:00001350
.text:00001350 var_14          = dword ptr -14h
.text:00001350 var_10          = dword ptr -10h
.text:00001350 var_C           = dword ptr -0Ch
.text:00001350 var_8           = dword ptr -8
.text:00001350 var_4           = dword ptr -4
.text:00001350 arg_0           = dword ptr  8
.text:00001350 arg_4           = dword ptr  0Ch
.text:00001350 arg_8           = dword ptr  10h
.text:00001350 arg_C           = dword ptr  14h
.text:00001350 arg_10          = dword ptr  18h
.text:00001350
.text:00001350                 push    ebp
.text:00001351                 mov     ebp, esp
.text:00001353                 sub     esp, 14h
.text:00001356                 mov     eax, 0CCCCCCCCh
.text:0000135B                 mov     [ebp+var_14], eax
.text:0000135E                 mov     [ebp+var_10], eax
.text:00001361                 mov     [ebp+var_C], eax
.text:00001364                 mov     [ebp+var_8], eax
.text:00001367                 mov     [ebp+var_4], eax
.text:0000136A                 mov     eax, [ebp+arg_0]
.text:0000136D                 movzx   ecx, word ptr [eax]
.text:00001370                 sar     ecx, 4
.text:00001373                 mov     edx, [ebp+arg_10]
.text:00001376                 mov     eax, [edx+ecx*4]
.text:00001379                 mov     [ebp+var_4], eax
.text:0000137C                 mov     ecx, [ebp+arg_0]
.text:0000137F                 movzx   edx, word ptr [ecx]
.text:00001382                 xor     edx, 7FFh
.text:00001388                 sar     edx, 4
.text:0000138B                 mov     eax, [ebp+arg_10]
.text:0000138E                 mov     ecx, [eax+edx*4]
.text:00001391                 mov     [ebp+var_8], ecx
.text:00001394                 mov     edx, [ebp+arg_0]
.text:00001397                 movzx   eax, word ptr [edx+2]
.text:0000139B                 sar     eax, 4
.text:0000139E                 mov     ecx, [ebp+arg_10]
.text:000013A1                 mov     edx, [ebp+var_8]
.text:000013A4                 add     edx, [ecx+eax*4]
.text:000013A7                 mov     [ebp+var_C], edx
.text:000013AA                 mov     eax, [ebp+arg_0]
.text:000013AD                 movzx   ecx, word ptr [eax+2]
.text:000013B1                 xor     ecx, 7FFh
.text:000013B7                 sar     ecx, 4
.text:000013BA                 mov     edx, [ebp+arg_10]
.text:000013BD                 mov     eax, [ebp+var_8]
.text:000013C0                 add     eax, [edx+ecx*4]
.text:000013C3                 mov     [ebp+var_10], eax
.text:000013C6                 mov     [ebp+var_14], 0
.text:000013CD                 mov     [ebp+var_14], 0
.text:000013D4                 jmp     short loc_13DF
.text:000013D6 ; ---------------------------------------------------------------------------
.text:000013D6
.text:000013D6 loc_13D6:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+CBj
.text:000013D6                 mov     ecx, [ebp+var_14]
.text:000013D9                 add     ecx, 1
.text:000013DC                 mov     [ebp+var_14], ecx
.text:000013DF
.text:000013DF loc_13DF:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+84j
.text:000013DF                 cmp     [ebp+var_14], 8
.text:000013E3                 jnb     short loc_141D
.text:000013E5                 mov     edx, [ebp+var_14]
.text:000013E8                 cmp     edx, [ebp+arg_8]
.text:000013EB                 jb      short loc_13F2
.text:000013ED                 jmp     loc_14A6
.text:000013F2 ; ---------------------------------------------------------------------------
.text:000013F2
.text:000013F2 loc_13F2:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+9Bj
.text:000013F2                 mov     eax, [ebp+arg_10]
.text:000013F5                 push    eax
.text:000013F6                 mov     ecx, [ebp+var_14]
.text:000013F9                 push    ecx
.text:000013FA                 push    3
.text:000013FC                 mov     edx, [ebp+arg_4]
.text:000013FF                 shl     edx, 3
.text:00001402                 mov     eax, [ebp+arg_0]
.text:00001405                 lea     ecx, [eax+edx*2+4]
.text:00001409                 push    ecx
.text:0000140A                 call    _RcTree_GetPrice@16 ; RcTree_GetPrice(x,x,x,x)
.text:0000140F                 add     eax, [ebp+var_4]
.text:00001412                 mov     edx, [ebp+var_14]
.text:00001415                 mov     ecx, [ebp+arg_C]
.text:00001418                 mov     [ecx+edx*4], eax
.text:0000141B                 jmp     short loc_13D6
.text:0000141D ; ---------------------------------------------------------------------------
.text:0000141D
.text:0000141D loc_141D:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+93j
.text:0000141D                 jmp     short loc_1428
.text:0000141F ; ---------------------------------------------------------------------------
.text:0000141F
.text:0000141F loc_141F:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+117j
.text:0000141F                 mov     edx, [ebp+var_14]
.text:00001422                 add     edx, 1
.text:00001425                 mov     [ebp+var_14], edx
.text:00001428
.text:00001428 loc_1428:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x):loc_141Dj
.text:00001428                 cmp     [ebp+var_14], 10h
.text:0000142C                 jnb     short loc_1469
.text:0000142E                 mov     eax, [ebp+var_14]
.text:00001431                 cmp     eax, [ebp+arg_8]
.text:00001434                 jb      short loc_1438
.text:00001436                 jmp     short loc_14A6
.text:00001438 ; ---------------------------------------------------------------------------
.text:00001438
.text:00001438 loc_1438:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+E4j
.text:00001438                 mov     ecx, [ebp+arg_10]
.text:0000143B                 push    ecx
.text:0000143C                 mov     edx, [ebp+var_14]
.text:0000143F                 sub     edx, 8
.text:00001442                 push    edx
.text:00001443                 push    3
.text:00001445                 mov     eax, [ebp+arg_4]
.text:00001448                 shl     eax, 3
.text:0000144B                 mov     ecx, [ebp+arg_0]
.text:0000144E                 lea     edx, [ecx+eax*2+104h]
.text:00001455                 push    edx
.text:00001456                 call    _RcTree_GetPrice@16 ; RcTree_GetPrice(x,x,x,x)
.text:0000145B                 add     eax, [ebp+var_C]
.text:0000145E                 mov     ecx, [ebp+var_14]
.text:00001461                 mov     edx, [ebp+arg_C]
.text:00001464                 mov     [edx+ecx*4], eax
.text:00001467                 jmp     short loc_141F
.text:00001469 ; ---------------------------------------------------------------------------
.text:00001469
.text:00001469 loc_1469:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+DCj
.text:00001469                 jmp     short loc_1474
.text:0000146B ; ---------------------------------------------------------------------------
.text:0000146B
.text:0000146B loc_146B:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+154j
.text:0000146B                 mov     eax, [ebp+var_14]
.text:0000146E                 add     eax, 1
.text:00001471                 mov     [ebp+var_14], eax
.text:00001474
.text:00001474 loc_1474:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x):loc_1469j
.text:00001474                 mov     ecx, [ebp+var_14]
.text:00001477                 cmp     ecx, [ebp+arg_8]
.text:0000147A                 jnb     short loc_14A6
.text:0000147C                 mov     edx, [ebp+arg_10]
.text:0000147F                 push    edx
.text:00001480                 mov     eax, [ebp+var_14]
.text:00001483                 sub     eax, 10h
.text:00001486                 push    eax
.text:00001487                 push    8
.text:00001489                 mov     ecx, [ebp+arg_0]
.text:0000148C                 add     ecx, 204h
.text:00001492                 push    ecx
.text:00001493                 call    _RcTree_GetPrice@16 ; RcTree_GetPrice(x,x,x,x)
.text:00001498                 add     eax, [ebp+var_10]
.text:0000149B                 mov     edx, [ebp+var_14]
.text:0000149E                 mov     ecx, [ebp+arg_C]
.text:000014A1                 mov     [ecx+edx*4], eax
.text:000014A4                 jmp     short loc_146B
.text:000014A6 ; ---------------------------------------------------------------------------
.text:000014A6
.text:000014A6 loc_14A6:                               ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+9Dj
.text:000014A6                                         ; LenEnc_SetPrices(x,x,x,x,x)+E6j ...
.text:000014A6                 add     esp, 14h
.text:000014A9                 cmp     ebp, esp
.text:000014AB                 call    __RTC_CheckEsp
.text:000014B0                 mov     esp, ebp
.text:000014B2                 pop     ebp
.text:000014B3                 retn    14h
.text:000014B3 _LenEnc_SetPrices@20 endp
.text:000014B3
.text:000014B3 ; ---------------------------------------------------------------------------
.text:000014B6                 align 10h
.text:000014C0
.text:000014C0 ; =============== S U B R O U T I N E =======================================
.text:000014C0
.text:000014C0 ; Attributes: bp-based frame
.text:000014C0
.text:000014C0 ; __stdcall RcTree_GetPrice(x, x, x, x)
.text:000014C0 _RcTree_GetPrice@16 proc near           ; CODE XREF: LenEnc_SetPrices(x,x,x,x,x)+BAp
.text:000014C0                                         ; LenEnc_SetPrices(x,x,x,x,x)+106p ...
.text:000014C0
.text:000014C0 var_4           = dword ptr -4
.text:000014C0 arg_0           = dword ptr  8
.text:000014C0 arg_4           = dword ptr  0Ch
.text:000014C0 arg_8           = dword ptr  10h
.text:000014C0 arg_C           = dword ptr  14h
.text:000014C0
.text:000014C0                 push    ebp
.text:000014C1                 mov     ebp, esp
.text:000014C3                 push    ecx
.text:000014C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000014CB                 mov     [ebp+var_4], 0
.text:000014D2                 mov     eax, 1
.text:000014D7                 mov     ecx, [ebp+arg_4]
.text:000014DA                 shl     eax, cl
.text:000014DC                 or      eax, [ebp+arg_8]
.text:000014DF                 mov     [ebp+arg_8], eax
.text:000014E2
.text:000014E2 loc_14E2:                               ; CODE XREF: RcTree_GetPrice(x,x,x,x)+5Bj
.text:000014E2                 cmp     [ebp+arg_8], 1
.text:000014E6                 jz      short loc_151D
.text:000014E8                 mov     ecx, [ebp+arg_8]
.text:000014EB                 shr     ecx, 1
.text:000014ED                 mov     edx, [ebp+arg_0]
.text:000014F0                 movzx   eax, word ptr [edx+ecx*2]
.text:000014F4                 mov     ecx, [ebp+arg_8]
.text:000014F7                 and     ecx, 1
.text:000014FA                 neg     ecx
.text:000014FC                 and     ecx, 7FFh
.text:00001502                 xor     eax, ecx
.text:00001504                 sar     eax, 4
.text:00001507                 mov     edx, [ebp+arg_C]
.text:0000150A                 mov     ecx, [ebp+var_4]
.text:0000150D                 add     ecx, [edx+eax*4]
.text:00001510                 mov     [ebp+var_4], ecx
.text:00001513                 mov     edx, [ebp+arg_8]
.text:00001516                 shr     edx, 1
.text:00001518                 mov     [ebp+arg_8], edx
.text:0000151B                 jmp     short loc_14E2
.text:0000151D ; ---------------------------------------------------------------------------
.text:0000151D
.text:0000151D loc_151D:                               ; CODE XREF: RcTree_GetPrice(x,x,x,x)+26j
.text:0000151D                 mov     eax, [ebp+var_4]
.text:00001520                 mov     esp, ebp
.text:00001522                 pop     ebp
.text:00001523                 retn    10h
.text:00001523 _RcTree_GetPrice@16 endp
.text:00001523
.text:00001523 ; ---------------------------------------------------------------------------
.text:00001526                 align 10h
.text:00001530
.text:00001530 ; =============== S U B R O U T I N E =======================================
.text:00001530
.text:00001530 ; Attributes: bp-based frame
.text:00001530
.text:00001530 ; __stdcall FillAlignPrices(x)
.text:00001530 _FillAlignPrices@4 proc near            ; CODE XREF: LzmaEnc_InitPrices(x)+21p
.text:00001530                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+6FFp
.text:00001530
.text:00001530 var_4           = dword ptr -4
.text:00001530 arg_0           = dword ptr  8
.text:00001530
.text:00001530                 push    ebp
.text:00001531                 mov     ebp, esp
.text:00001533                 push    ecx
.text:00001534                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000153B                 mov     [ebp+var_4], 0
.text:00001542                 jmp     short loc_154D
.text:00001544 ; ---------------------------------------------------------------------------
.text:00001544
.text:00001544 loc_1544:                               ; CODE XREF: FillAlignPrices(x)+4Ej
.text:00001544                 mov     eax, [ebp+var_4]
.text:00001547                 add     eax, 1
.text:0000154A                 mov     [ebp+var_4], eax
.text:0000154D
.text:0000154D loc_154D:                               ; CODE XREF: FillAlignPrices(x)+12j
.text:0000154D                 cmp     [ebp+var_4], 10h
.text:00001551                 jnb     short loc_1580
.text:00001553                 mov     ecx, [ebp+arg_0]
.text:00001556                 add     ecx, 30F34h
.text:0000155C                 push    ecx
.text:0000155D                 mov     edx, [ebp+var_4]
.text:00001560                 push    edx
.text:00001561                 push    4
.text:00001563                 mov     eax, [ebp+arg_0]
.text:00001566                 add     eax, 32C4Ch
.text:0000156B                 push    eax
.text:0000156C                 call    _RcTree_ReverseGetPrice@16 ; RcTree_ReverseGetPrice(x,x,x,x)
.text:00001571                 mov     ecx, [ebp+var_4]
.text:00001574                 mov     edx, [ebp+arg_0]
.text:00001577                 mov     [edx+ecx*4+325C8h], eax
.text:0000157E                 jmp     short loc_1544
.text:00001580 ; ---------------------------------------------------------------------------
.text:00001580
.text:00001580 loc_1580:                               ; CODE XREF: FillAlignPrices(x)+21j
.text:00001580                 mov     eax, [ebp+arg_0]
.text:00001583                 mov     dword ptr [eax+84h], 0
.text:0000158D                 add     esp, 4
.text:00001590                 cmp     ebp, esp
.text:00001592                 call    __RTC_CheckEsp
.text:00001597                 mov     esp, ebp
.text:00001599                 pop     ebp
.text:0000159A                 retn    4
.text:0000159A _FillAlignPrices@4 endp
.text:0000159A
.text:0000159A ; ---------------------------------------------------------------------------
.text:0000159D                 align 10h
.text:000015A0
.text:000015A0 ; =============== S U B R O U T I N E =======================================
.text:000015A0
.text:000015A0 ; Attributes: bp-based frame
.text:000015A0
.text:000015A0 ; __stdcall RcTree_ReverseGetPrice(x, x, x, x)
.text:000015A0 _RcTree_ReverseGetPrice@16 proc near    ; CODE XREF: FillAlignPrices(x)+3Cp
.text:000015A0                                         ; FillDistancesPrices(x)+CEp
.text:000015A0
.text:000015A0 var_10          = dword ptr -10h
.text:000015A0 var_C           = dword ptr -0Ch
.text:000015A0 var_8           = dword ptr -8
.text:000015A0 var_4           = dword ptr -4
.text:000015A0 arg_0           = dword ptr  8
.text:000015A0 arg_4           = dword ptr  0Ch
.text:000015A0 arg_8           = dword ptr  10h
.text:000015A0 arg_C           = dword ptr  14h
.text:000015A0
.text:000015A0                 push    ebp
.text:000015A1                 mov     ebp, esp
.text:000015A3                 sub     esp, 10h
.text:000015A6                 mov     eax, 0CCCCCCCCh
.text:000015AB                 mov     [ebp+var_10], eax
.text:000015AE                 mov     [ebp+var_C], eax
.text:000015B1                 mov     [ebp+var_8], eax
.text:000015B4                 mov     [ebp+var_4], eax
.text:000015B7                 mov     [ebp+var_4], 0
.text:000015BE                 mov     [ebp+var_8], 1
.text:000015C5                 mov     eax, [ebp+arg_4]
.text:000015C8                 mov     [ebp+var_C], eax
.text:000015CB                 jmp     short loc_15D6
.text:000015CD ; ---------------------------------------------------------------------------
.text:000015CD
.text:000015CD loc_15CD:                               ; CODE XREF: RcTree_ReverseGetPrice(x,x,x,x)+7Ej
.text:000015CD                 mov     ecx, [ebp+var_C]
.text:000015D0                 sub     ecx, 1
.text:000015D3                 mov     [ebp+var_C], ecx
.text:000015D6
.text:000015D6 loc_15D6:                               ; CODE XREF: RcTree_ReverseGetPrice(x,x,x,x)+2Bj
.text:000015D6                 cmp     [ebp+var_C], 0
.text:000015DA                 jz      short loc_1620
.text:000015DC                 mov     edx, [ebp+arg_8]
.text:000015DF                 and     edx, 1
.text:000015E2                 mov     [ebp+var_10], edx
.text:000015E5                 mov     eax, [ebp+arg_8]
.text:000015E8                 shr     eax, 1
.text:000015EA                 mov     [ebp+arg_8], eax
.text:000015ED                 mov     ecx, [ebp+var_8]
.text:000015F0                 mov     edx, [ebp+arg_0]
.text:000015F3                 movzx   eax, word ptr [edx+ecx*2]
.text:000015F7                 mov     ecx, [ebp+var_10]
.text:000015FA                 neg     ecx
.text:000015FC                 and     ecx, 7FFh
.text:00001602                 xor     eax, ecx
.text:00001604                 sar     eax, 4
.text:00001607                 mov     edx, [ebp+arg_C]
.text:0000160A                 mov     ecx, [ebp+var_4]
.text:0000160D                 add     ecx, [edx+eax*4]
.text:00001610                 mov     [ebp+var_4], ecx
.text:00001613                 mov     edx, [ebp+var_8]
.text:00001616                 shl     edx, 1
.text:00001618                 or      edx, [ebp+var_10]
.text:0000161B                 mov     [ebp+var_8], edx
.text:0000161E                 jmp     short loc_15CD
.text:00001620 ; ---------------------------------------------------------------------------
.text:00001620
.text:00001620 loc_1620:                               ; CODE XREF: RcTree_ReverseGetPrice(x,x,x,x)+3Aj
.text:00001620                 mov     eax, [ebp+var_4]
.text:00001623                 mov     esp, ebp
.text:00001625                 pop     ebp
.text:00001626                 retn    10h
.text:00001626 _RcTree_ReverseGetPrice@16 endp
.text:00001626
.text:00001626 ; ---------------------------------------------------------------------------
.text:00001629                 align 10h
.text:00001630
.text:00001630 ; =============== S U B R O U T I N E =======================================
.text:00001630
.text:00001630 ; Attributes: bp-based frame
.text:00001630
.text:00001630 ; __stdcall FillDistancesPrices(x)
.text:00001630 _FillDistancesPrices@4 proc near        ; CODE XREF: LzmaEnc_InitPrices(x)+18p
.text:00001630                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+6EAp
.text:00001630
.text:00001630 var_234         = dword ptr -234h
.text:00001630 var_230         = dword ptr -230h
.text:00001630 var_22C         = dword ptr -22Ch
.text:00001630 var_228         = dword ptr -228h
.text:00001630 var_224         = dword ptr -224h
.text:00001630 var_220         = dword ptr -220h
.text:00001630 var_21C         = dword ptr -21Ch
.text:00001630 var_218         = dword ptr -218h
.text:00001630 var_214         = dword ptr -214h
.text:00001630 var_210         = dword ptr -210h
.text:00001630 var_208         = dword ptr -208h
.text:00001630 var_4           = dword ptr -4
.text:00001630 arg_0           = dword ptr  8
.text:00001630
.text:00001630                 push    ebp
.text:00001631                 mov     ebp, esp
.text:00001633                 sub     esp, 234h
.text:00001639                 push    esi
.text:0000163A                 push    edi
.text:0000163B                 lea     edi, [ebp+var_234]
.text:00001641                 mov     ecx, 8Dh ; 'ì'
.text:00001646                 mov     eax, 0CCCCCCCCh
.text:0000164B                 rep stosd
.text:0000164D                 mov     eax, dword ptr ds:___security_cookie
.text:00001652                 xor     eax, ebp
.text:00001654                 mov     [ebp+var_4], eax
.text:00001657                 mov     [ebp+var_210], 4
.text:00001661                 jmp     short loc_1672
.text:00001663 ; ---------------------------------------------------------------------------
.text:00001663
.text:00001663 loc_1663:                               ; CODE XREF: FillDistancesPrices(x)+E0j
.text:00001663                 mov     eax, [ebp+var_210]
.text:00001669                 add     eax, 1
.text:0000166C                 mov     [ebp+var_210], eax
.text:00001672
.text:00001672 loc_1672:                               ; CODE XREF: FillDistancesPrices(x)+31j
.text:00001672                 cmp     [ebp+var_210], 80h ; 'Ç'
.text:0000167C                 jnb     loc_1715
.text:00001682                 mov     ecx, [ebp+arg_0]
.text:00001685                 add     ecx, [ebp+var_210]
.text:0000168B                 movzx   edx, byte ptr [ecx+30734h]
.text:00001692                 mov     [ebp+var_218], edx
.text:00001698                 mov     eax, [ebp+var_218]
.text:0000169E                 shr     eax, 1
.text:000016A0                 sub     eax, 1
.text:000016A3                 mov     [ebp+var_21C], eax
.text:000016A9                 mov     edx, [ebp+var_218]
.text:000016AF                 and     edx, 1
.text:000016B2                 or      edx, 2
.text:000016B5                 mov     ecx, [ebp+var_21C]
.text:000016BB                 shl     edx, cl
.text:000016BD                 mov     [ebp+var_220], edx
.text:000016C3                 mov     eax, [ebp+arg_0]
.text:000016C6                 add     eax, 30F34h
.text:000016CB                 push    eax
.text:000016CC                 mov     ecx, [ebp+var_210]
.text:000016D2                 sub     ecx, [ebp+var_220]
.text:000016D8                 push    ecx
.text:000016D9                 mov     edx, [ebp+var_21C]
.text:000016DF                 push    edx
.text:000016E0                 mov     eax, [ebp+var_220]
.text:000016E6                 mov     ecx, [ebp+arg_0]
.text:000016E9                 lea     edx, [ecx+eax*2+32B68h]
.text:000016F0                 mov     eax, [ebp+var_218]
.text:000016F6                 shl     eax, 1
.text:000016F8                 sub     edx, eax
.text:000016FA                 sub     edx, 2
.text:000016FD                 push    edx
.text:000016FE                 call    _RcTree_ReverseGetPrice@16 ; RcTree_ReverseGetPrice(x,x,x,x)
.text:00001703                 mov     ecx, [ebp+var_210]
.text:00001709                 mov     [ebp+ecx*4+var_208], eax
.text:00001710                 jmp     loc_1663
.text:00001715 ; ---------------------------------------------------------------------------
.text:00001715
.text:00001715 loc_1715:                               ; CODE XREF: FillDistancesPrices(x)+4Cj
.text:00001715                 mov     [ebp+var_214], 0
.text:0000171F                 jmp     short loc_1730
.text:00001721 ; ---------------------------------------------------------------------------
.text:00001721
.text:00001721 loc_1721:                               ; CODE XREF: FillDistancesPrices(x):loc_18D5j
.text:00001721                 mov     edx, [ebp+var_214]
.text:00001727                 add     edx, 1
.text:0000172A                 mov     [ebp+var_214], edx
.text:00001730
.text:00001730 loc_1730:                               ; CODE XREF: FillDistancesPrices(x)+EFj
.text:00001730                 cmp     [ebp+var_214], 4
.text:00001737                 jnb     loc_18DA
.text:0000173D                 mov     eax, [ebp+var_214]
.text:00001743                 shl     eax, 7
.text:00001746                 mov     ecx, [ebp+arg_0]
.text:00001749                 lea     edx, [ecx+eax+32968h]
.text:00001750                 mov     [ebp+var_228], edx
.text:00001756                 mov     eax, [ebp+var_214]
.text:0000175C                 shl     eax, 8
.text:0000175F                 mov     ecx, [ebp+arg_0]
.text:00001762                 lea     edx, [ecx+eax+319C8h]
.text:00001769                 mov     [ebp+var_22C], edx
.text:0000176F                 mov     [ebp+var_224], 0
.text:00001779                 jmp     short loc_178A
.text:0000177B ; ---------------------------------------------------------------------------
.text:0000177B
.text:0000177B loc_177B:                               ; CODE XREF: FillDistancesPrices(x)+198j
.text:0000177B                 mov     eax, [ebp+var_224]
.text:00001781                 add     eax, 1
.text:00001784                 mov     [ebp+var_224], eax
.text:0000178A
.text:0000178A loc_178A:                               ; CODE XREF: FillDistancesPrices(x)+149j
.text:0000178A                 mov     ecx, [ebp+arg_0]
.text:0000178D                 mov     edx, [ebp+var_224]
.text:00001793                 cmp     edx, [ecx+88h]
.text:00001799                 jnb     short loc_17CA
.text:0000179B                 mov     eax, [ebp+arg_0]
.text:0000179E                 add     eax, 30F34h
.text:000017A3                 push    eax
.text:000017A4                 mov     ecx, [ebp+var_224]
.text:000017AA                 push    ecx
.text:000017AB                 push    6
.text:000017AD                 mov     edx, [ebp+var_228]
.text:000017B3                 push    edx
.text:000017B4                 call    _RcTree_GetPrice@16 ; RcTree_GetPrice(x,x,x,x)
.text:000017B9                 mov     ecx, [ebp+var_224]
.text:000017BF                 mov     edx, [ebp+var_22C]
.text:000017C5                 mov     [edx+ecx*4], eax
.text:000017C8                 jmp     short loc_177B
.text:000017CA ; ---------------------------------------------------------------------------
.text:000017CA
.text:000017CA loc_17CA:                               ; CODE XREF: FillDistancesPrices(x)+169j
.text:000017CA                 mov     [ebp+var_224], 0Eh
.text:000017D4                 jmp     short loc_17E5
.text:000017D6 ; ---------------------------------------------------------------------------
.text:000017D6
.text:000017D6 loc_17D6:                               ; CODE XREF: FillDistancesPrices(x)+1F2j
.text:000017D6                 mov     eax, [ebp+var_224]
.text:000017DC                 add     eax, 1
.text:000017DF                 mov     [ebp+var_224], eax
.text:000017E5
.text:000017E5 loc_17E5:                               ; CODE XREF: FillDistancesPrices(x)+1A4j
.text:000017E5                 mov     ecx, [ebp+arg_0]
.text:000017E8                 mov     edx, [ebp+var_224]
.text:000017EE                 cmp     edx, [ecx+88h]
.text:000017F4                 jnb     short loc_1824
.text:000017F6                 mov     eax, [ebp+var_224]
.text:000017FC                 shr     eax, 1
.text:000017FE                 sub     eax, 5
.text:00001801                 shl     eax, 4
.text:00001804                 mov     ecx, [ebp+var_224]
.text:0000180A                 mov     edx, [ebp+var_22C]
.text:00001810                 add     eax, [edx+ecx*4]
.text:00001813                 mov     ecx, [ebp+var_224]
.text:00001819                 mov     edx, [ebp+var_22C]
.text:0000181F                 mov     [edx+ecx*4], eax
.text:00001822                 jmp     short loc_17D6
.text:00001824 ; ---------------------------------------------------------------------------
.text:00001824
.text:00001824 loc_1824:                               ; CODE XREF: FillDistancesPrices(x)+1C4j
.text:00001824                 mov     eax, [ebp+var_214]
.text:0000182A                 shl     eax, 9
.text:0000182D                 mov     ecx, [ebp+arg_0]
.text:00001830                 lea     edx, [ecx+eax+31DC8h]
.text:00001837                 mov     [ebp+var_230], edx
.text:0000183D                 mov     [ebp+var_234], 0
.text:00001847                 jmp     short loc_1858
.text:00001849 ; ---------------------------------------------------------------------------
.text:00001849
.text:00001849 loc_1849:                               ; CODE XREF: FillDistancesPrices(x)+24Fj
.text:00001849                 mov     eax, [ebp+var_234]
.text:0000184F                 add     eax, 1
.text:00001852                 mov     [ebp+var_234], eax
.text:00001858
.text:00001858 loc_1858:                               ; CODE XREF: FillDistancesPrices(x)+217j
.text:00001858                 cmp     [ebp+var_234], 4
.text:0000185F                 jnb     short loc_1881
.text:00001861                 mov     ecx, [ebp+var_234]
.text:00001867                 mov     edx, [ebp+var_230]
.text:0000186D                 mov     eax, [ebp+var_234]
.text:00001873                 mov     esi, [ebp+var_22C]
.text:00001879                 mov     eax, [esi+eax*4]
.text:0000187C                 mov     [edx+ecx*4], eax
.text:0000187F                 jmp     short loc_1849
.text:00001881 ; ---------------------------------------------------------------------------
.text:00001881
.text:00001881 loc_1881:                               ; CODE XREF: FillDistancesPrices(x)+22Fj
.text:00001881                 jmp     short loc_1892
.text:00001883 ; ---------------------------------------------------------------------------
.text:00001883
.text:00001883 loc_1883:                               ; CODE XREF: FillDistancesPrices(x)+2A3j
.text:00001883                 mov     ecx, [ebp+var_234]
.text:00001889                 add     ecx, 1
.text:0000188C                 mov     [ebp+var_234], ecx
.text:00001892
.text:00001892 loc_1892:                               ; CODE XREF: FillDistancesPrices(x):loc_1881j
.text:00001892                 cmp     [ebp+var_234], 80h ; 'Ç'
.text:0000189C                 jnb     short loc_18D5
.text:0000189E                 mov     edx, [ebp+arg_0]
.text:000018A1                 add     edx, [ebp+var_234]
.text:000018A7                 movzx   eax, byte ptr [edx+30734h]
.text:000018AE                 mov     ecx, [ebp+var_22C]
.text:000018B4                 mov     edx, [ecx+eax*4]
.text:000018B7                 mov     eax, [ebp+var_234]
.text:000018BD                 add     edx, [ebp+eax*4+var_208]
.text:000018C4                 mov     ecx, [ebp+var_234]
.text:000018CA                 mov     eax, [ebp+var_230]
.text:000018D0                 mov     [eax+ecx*4], edx
.text:000018D3                 jmp     short loc_1883
.text:000018D5 ; ---------------------------------------------------------------------------
.text:000018D5
.text:000018D5 loc_18D5:                               ; CODE XREF: FillDistancesPrices(x)+26Cj
.text:000018D5                 jmp     loc_1721
.text:000018DA ; ---------------------------------------------------------------------------
.text:000018DA
.text:000018DA loc_18DA:                               ; CODE XREF: FillDistancesPrices(x)+107j
.text:000018DA                 mov     ecx, [ebp+arg_0]
.text:000018DD                 mov     dword ptr [ecx+80h], 0
.text:000018E7                 push    edx
.text:000018E8                 mov     ecx, ebp
.text:000018EA                 push    eax
.text:000018EB                 lea     edx, $LN23
.text:000018F1                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000018F6                 pop     eax
.text:000018F7                 pop     edx
.text:000018F8                 pop     edi
.text:000018F9                 pop     esi
.text:000018FA                 mov     ecx, [ebp+var_4]
.text:000018FD                 xor     ecx, ebp
.text:000018FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001904                 add     esp, 234h
.text:0000190A                 cmp     ebp, esp
.text:0000190C                 call    __RTC_CheckEsp
.text:00001911                 mov     esp, ebp
.text:00001913                 pop     ebp
.text:00001914                 retn    4
.text:00001914 _FillDistancesPrices@4 endp
.text:00001914
.text:00001914 ; ---------------------------------------------------------------------------
.text:00001917                 align 4
.text:00001918 $LN23           dd 1                    ; DATA XREF: FillDistancesPrices(x)+2BBo
.text:0000191C                 dd offset $LN22
.text:00001920 $LN22           dd 0FFFFFDF8h, 200h     ; DATA XREF: .text:0000191Co
.text:00001928                 dd offset $LN21         ; "tempPrices"
.text:0000192C $LN21           db 'tempPrices',0       ; DATA XREF: .text:00001928o
.text:00001937                 align 10h
.text:00001940
.text:00001940 ; =============== S U B R O U T I N E =======================================
.text:00001940
.text:00001940 ; Attributes: bp-based frame
.text:00001940
.text:00001940 ; __stdcall LzmaEnc_PrepareForLzma2(x, x, x, x, x)
.text:00001940                 public _LzmaEnc_PrepareForLzma2@20
.text:00001940 _LzmaEnc_PrepareForLzma2@20 proc near
.text:00001940
.text:00001940 var_4           = dword ptr -4
.text:00001940 arg_0           = dword ptr  8
.text:00001940 arg_4           = dword ptr  0Ch
.text:00001940 arg_8           = dword ptr  10h
.text:00001940 arg_C           = dword ptr  14h
.text:00001940 arg_10          = dword ptr  18h
.text:00001940
.text:00001940                 push    ebp
.text:00001941                 mov     ebp, esp
.text:00001943                 push    ecx
.text:00001944                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000194B                 mov     eax, [ebp+arg_0]
.text:0000194E                 mov     [ebp+var_4], eax
.text:00001951                 mov     ecx, [ebp+var_4]
.text:00001954                 mov     edx, [ebp+arg_4]
.text:00001957                 mov     [ecx+288h], edx
.text:0000195D                 mov     eax, [ebp+var_4]
.text:00001960                 mov     dword ptr [eax+74h], 1
.text:00001967                 mov     ecx, [ebp+arg_10]
.text:0000196A                 push    ecx
.text:0000196B                 mov     edx, [ebp+arg_C]
.text:0000196E                 push    edx
.text:0000196F                 mov     eax, [ebp+arg_8]
.text:00001972                 push    eax
.text:00001973                 mov     ecx, [ebp+var_4]
.text:00001976                 push    ecx
.text:00001977                 call    _LzmaEnc_AllocAndInit@16 ; LzmaEnc_AllocAndInit(x,x,x,x)
.text:0000197C                 add     esp, 4
.text:0000197F                 cmp     ebp, esp
.text:00001981                 call    __RTC_CheckEsp
.text:00001986                 mov     esp, ebp
.text:00001988                 pop     ebp
.text:00001989                 retn    14h
.text:00001989 _LzmaEnc_PrepareForLzma2@20 endp
.text:00001989
.text:00001989 ; ---------------------------------------------------------------------------
.text:0000198C                 align 10h
.text:00001990
.text:00001990 ; =============== S U B R O U T I N E =======================================
.text:00001990
.text:00001990 ; Attributes: bp-based frame
.text:00001990
.text:00001990 ; __stdcall LzmaEnc_AllocAndInit(x, x, x, x)
.text:00001990 _LzmaEnc_AllocAndInit@16 proc near      ; CODE XREF: LzmaEnc_PrepareForLzma2(x,x,x,x,x)+37p
.text:00001990                                         ; LzmaEnc_MemPrepare(x,x,x,x,x,x)+3Cp ...
.text:00001990
.text:00001990 var_8           = dword ptr -8
.text:00001990 var_4           = dword ptr -4
.text:00001990 arg_0           = dword ptr  8
.text:00001990 arg_4           = dword ptr  0Ch
.text:00001990 arg_8           = dword ptr  10h
.text:00001990 arg_C           = dword ptr  14h
.text:00001990
.text:00001990                 push    ebp
.text:00001991                 mov     ebp, esp
.text:00001993                 sub     esp, 8
.text:00001996                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000199D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000019A4                 mov     [ebp+var_4], 0
.text:000019AB                 jmp     short loc_19B6
.text:000019AD ; ---------------------------------------------------------------------------
.text:000019AD
.text:000019AD loc_19AD:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x):loc_19D3j
.text:000019AD                 mov     eax, [ebp+var_4]
.text:000019B0                 add     eax, 1
.text:000019B3                 mov     [ebp+var_4], eax
.text:000019B6
.text:000019B6 loc_19B6:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+1Bj
.text:000019B6                 cmp     [ebp+var_4], 1Bh
.text:000019BA                 jnb     short loc_19D5
.text:000019BC                 mov     edx, 1
.text:000019C1                 mov     ecx, [ebp+var_4]
.text:000019C4                 shl     edx, cl
.text:000019C6                 mov     eax, [ebp+arg_0]
.text:000019C9                 cmp     [eax+8Ch], edx
.text:000019CF                 ja      short loc_19D3
.text:000019D1                 jmp     short loc_19D5
.text:000019D3 ; ---------------------------------------------------------------------------
.text:000019D3
.text:000019D3 loc_19D3:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+3Fj
.text:000019D3                 jmp     short loc_19AD
.text:000019D5 ; ---------------------------------------------------------------------------
.text:000019D5
.text:000019D5 loc_19D5:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+2Aj
.text:000019D5                                         ; LzmaEnc_AllocAndInit(x,x,x,x)+41j
.text:000019D5                 mov     ecx, [ebp+var_4]
.text:000019D8                 shl     ecx, 1
.text:000019DA                 mov     edx, [ebp+arg_0]
.text:000019DD                 mov     [edx+88h], ecx
.text:000019E3                 mov     eax, [ebp+arg_0]
.text:000019E6                 mov     dword ptr [eax+6Ch], 0
.text:000019ED                 mov     ecx, [ebp+arg_0]
.text:000019F0                 mov     dword ptr [ecx+90h], 0
.text:000019FA                 mov     edx, [ebp+arg_C]
.text:000019FD                 push    edx
.text:000019FE                 mov     eax, [ebp+arg_8]
.text:00001A01                 push    eax
.text:00001A02                 mov     ecx, [ebp+arg_4]
.text:00001A05                 push    ecx
.text:00001A06                 mov     edx, [ebp+arg_0]
.text:00001A09                 push    edx
.text:00001A0A                 call    _LzmaEnc_Alloc@16 ; LzmaEnc_Alloc(x,x,x,x)
.text:00001A0F                 mov     [ebp+var_8], eax
.text:00001A12                 cmp     [ebp+var_8], 0
.text:00001A16                 jz      short loc_1A1D
.text:00001A18                 mov     eax, [ebp+var_8]
.text:00001A1B                 jmp     short loc_1A42
.text:00001A1D ; ---------------------------------------------------------------------------
.text:00001A1D
.text:00001A1D loc_1A1D:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+86j
.text:00001A1D                 mov     eax, [ebp+arg_0]
.text:00001A20                 push    eax
.text:00001A21                 call    _LzmaEnc_Init@4 ; LzmaEnc_Init(x)
.text:00001A26                 mov     ecx, [ebp+arg_0]
.text:00001A29                 push    ecx
.text:00001A2A                 call    _LzmaEnc_InitPrices@4 ; LzmaEnc_InitPrices(x)
.text:00001A2F                 mov     edx, [ebp+arg_0]
.text:00001A32                 mov     dword ptr [edx+78h], 0
.text:00001A39                 mov     dword ptr [edx+7Ch], 0
.text:00001A40                 xor     eax, eax
.text:00001A42
.text:00001A42 loc_1A42:                               ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+8Bj
.text:00001A42                 add     esp, 8
.text:00001A45                 cmp     ebp, esp
.text:00001A47                 call    __RTC_CheckEsp
.text:00001A4C                 mov     esp, ebp
.text:00001A4E                 pop     ebp
.text:00001A4F                 retn    10h
.text:00001A4F _LzmaEnc_AllocAndInit@16 endp
.text:00001A4F
.text:00001A4F ; ---------------------------------------------------------------------------
.text:00001A52                 align 10h
.text:00001A60
.text:00001A60 ; =============== S U B R O U T I N E =======================================
.text:00001A60
.text:00001A60 ; Attributes: bp-based frame
.text:00001A60
.text:00001A60 ; __stdcall LzmaEnc_Alloc(x, x, x, x)
.text:00001A60 _LzmaEnc_Alloc@16 proc near             ; CODE XREF: LzmaEnc_AllocAndInit(x,x,x,x)+7Ap
.text:00001A60
.text:00001A60 var_10          = dword ptr -10h
.text:00001A60 var_C           = dword ptr -0Ch
.text:00001A60 var_8           = dword ptr -8
.text:00001A60 var_4           = dword ptr -4
.text:00001A60 arg_0           = dword ptr  8
.text:00001A60 arg_4           = dword ptr  0Ch
.text:00001A60 arg_8           = dword ptr  10h
.text:00001A60 arg_C           = dword ptr  14h
.text:00001A60
.text:00001A60                 push    ebp
.text:00001A61                 mov     ebp, esp
.text:00001A63                 sub     esp, 10h
.text:00001A66                 push    esi
.text:00001A67                 mov     eax, 0CCCCCCCCh
.text:00001A6C                 mov     [ebp+var_10], eax
.text:00001A6F                 mov     [ebp+var_C], eax
.text:00001A72                 mov     [ebp+var_8], eax
.text:00001A75                 mov     [ebp+var_4], eax
.text:00001A78                 mov     [ebp+var_4], 1000h
.text:00001A7F                 mov     eax, [ebp+arg_8]
.text:00001A82                 push    eax
.text:00001A83                 mov     ecx, [ebp+arg_0]
.text:00001A86                 add     ecx, 98h ; 'ÿ'
.text:00001A8C                 push    ecx
.text:00001A8D                 call    _RangeEnc_Alloc@8 ; RangeEnc_Alloc(x,x)
.text:00001A92                 test    eax, eax
.text:00001A94                 jnz     short loc_1AA0
.text:00001A96                 mov     eax, 2
.text:00001A9B                 jmp     loc_1CA9
.text:00001AA0 ; ---------------------------------------------------------------------------
.text:00001AA0
.text:00001AA0 loc_1AA0:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+34j
.text:00001AA0                 mov     edx, [ebp+arg_0]
.text:00001AA3                 cmp     dword ptr [edx+70h], 0
.text:00001AA7                 jz      short loc_1AC9
.text:00001AA9                 mov     eax, [ebp+arg_0]
.text:00001AAC                 cmp     dword ptr [eax+64h], 0
.text:00001AB0                 jnz     short loc_1AC9
.text:00001AB2                 mov     ecx, [ebp+arg_0]
.text:00001AB5                 movzx   edx, byte ptr [ecx+26Dh]
.text:00001ABC                 test    edx, edx
.text:00001ABE                 jz      short loc_1AC9
.text:00001AC0                 mov     [ebp+var_10], 1
.text:00001AC7                 jmp     short loc_1AD0
.text:00001AC9 ; ---------------------------------------------------------------------------
.text:00001AC9
.text:00001AC9 loc_1AC9:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+47j
.text:00001AC9                                         ; LzmaEnc_Alloc(x,x,x,x)+50j ...
.text:00001AC9                 mov     [ebp+var_10], 0
.text:00001AD0
.text:00001AD0 loc_1AD0:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+67j
.text:00001AD0                 mov     eax, [ebp+arg_0]
.text:00001AD3                 mov     ecx, [ebp+var_10]
.text:00001AD6                 mov     [eax+0D0h], ecx
.text:00001ADC                 mov     edx, [ebp+arg_0]
.text:00001ADF                 mov     eax, [edx+48h]
.text:00001AE2                 mov     ecx, [ebp+arg_0]
.text:00001AE5                 add     eax, [ecx+4Ch]
.text:00001AE8                 mov     [ebp+var_8], eax
.text:00001AEB                 mov     edx, [ebp+arg_0]
.text:00001AEE                 cmp     dword ptr [edx+60h], 0
.text:00001AF2                 jz      short loc_1B0F
.text:00001AF4                 mov     eax, [ebp+arg_0]
.text:00001AF7                 cmp     dword ptr [eax+3BCFCh], 0
.text:00001AFE                 jz      short loc_1B0F
.text:00001B00                 mov     ecx, [ebp+arg_0]
.text:00001B03                 mov     edx, [ecx+5Ch]
.text:00001B06                 cmp     edx, [ebp+var_8]
.text:00001B09                 jz      loc_1BA2
.text:00001B0F
.text:00001B0F loc_1B0F:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+92j
.text:00001B0F                                         ; LzmaEnc_Alloc(x,x,x,x)+9Ej
.text:00001B0F                 mov     eax, [ebp+arg_8]
.text:00001B12                 push    eax
.text:00001B13                 mov     ecx, [ebp+arg_0]
.text:00001B16                 push    ecx
.text:00001B17                 call    _LzmaEnc_FreeLits@8 ; LzmaEnc_FreeLits(x,x)
.text:00001B1C                 mov     edx, 300h
.text:00001B21                 mov     ecx, [ebp+var_8]
.text:00001B24                 shl     edx, cl
.text:00001B26                 shl     edx, 1
.text:00001B28                 mov     esi, esp
.text:00001B2A                 push    edx
.text:00001B2B                 mov     eax, [ebp+arg_8]
.text:00001B2E                 push    eax
.text:00001B2F                 mov     ecx, [ebp+arg_8]
.text:00001B32                 mov     edx, [ecx]
.text:00001B34                 call    edx
.text:00001B36                 cmp     esi, esp
.text:00001B38                 call    __RTC_CheckEsp
.text:00001B3D                 mov     ecx, [ebp+arg_0]
.text:00001B40                 mov     [ecx+60h], eax
.text:00001B43                 mov     edx, 300h
.text:00001B48                 mov     ecx, [ebp+var_8]
.text:00001B4B                 shl     edx, cl
.text:00001B4D                 shl     edx, 1
.text:00001B4F                 mov     esi, esp
.text:00001B51                 push    edx
.text:00001B52                 mov     eax, [ebp+arg_8]
.text:00001B55                 push    eax
.text:00001B56                 mov     ecx, [ebp+arg_8]
.text:00001B59                 mov     edx, [ecx]
.text:00001B5B                 call    edx
.text:00001B5D                 cmp     esi, esp
.text:00001B5F                 call    __RTC_CheckEsp
.text:00001B64                 mov     ecx, [ebp+arg_0]
.text:00001B67                 mov     [ecx+3BCFCh], eax
.text:00001B6D                 mov     edx, [ebp+arg_0]
.text:00001B70                 cmp     dword ptr [edx+60h], 0
.text:00001B74                 jz      short loc_1B82
.text:00001B76                 mov     eax, [ebp+arg_0]
.text:00001B79                 cmp     dword ptr [eax+3BCFCh], 0
.text:00001B80                 jnz     short loc_1B99
.text:00001B82
.text:00001B82 loc_1B82:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+114j
.text:00001B82                 mov     ecx, [ebp+arg_8]
.text:00001B85                 push    ecx
.text:00001B86                 mov     edx, [ebp+arg_0]
.text:00001B89                 push    edx
.text:00001B8A                 call    _LzmaEnc_FreeLits@8 ; LzmaEnc_FreeLits(x,x)
.text:00001B8F                 mov     eax, 2
.text:00001B94                 jmp     loc_1CA9
.text:00001B99 ; ---------------------------------------------------------------------------
.text:00001B99
.text:00001B99 loc_1B99:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+120j
.text:00001B99                 mov     eax, [ebp+arg_0]
.text:00001B9C                 mov     ecx, [ebp+var_8]
.text:00001B9F                 mov     [eax+5Ch], ecx
.text:00001BA2
.text:00001BA2 loc_1BA2:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+A9j
.text:00001BA2                 mov     edx, [ebp+arg_0]
.text:00001BA5                 mov     eax, 1000000h
.text:00001BAA                 cmp     eax, [edx+8Ch]
.text:00001BB0                 sbb     ecx, ecx
.text:00001BB2                 neg     ecx
.text:00001BB4                 mov     edx, [ebp+arg_0]
.text:00001BB7                 mov     [edx+26Eh], cl
.text:00001BBD                 mov     eax, [ebp+arg_0]
.text:00001BC0                 mov     ecx, [ebp+var_4]
.text:00001BC3                 add     ecx, [eax+8Ch]
.text:00001BC9                 cmp     ecx, [ebp+arg_4]
.text:00001BCC                 jnb     short loc_1BDD
.text:00001BCE                 mov     edx, [ebp+arg_0]
.text:00001BD1                 mov     eax, [ebp+arg_4]
.text:00001BD4                 sub     eax, [edx+8Ch]
.text:00001BDA                 mov     [ebp+var_4], eax
.text:00001BDD
.text:00001BDD loc_1BDD:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+16Cj
.text:00001BDD                 mov     ecx, [ebp+arg_0]
.text:00001BE0                 cmp     dword ptr [ecx+0D0h], 0
.text:00001BE7                 jz      short loc_1C4B
.text:00001BE9                 mov     edx, [ebp+arg_C]
.text:00001BEC                 push    edx
.text:00001BED                 push    111h
.text:00001BF2                 mov     eax, [ebp+arg_0]
.text:00001BF5                 mov     ecx, [eax+2Ch]
.text:00001BF8                 push    ecx
.text:00001BF9                 mov     edx, [ebp+var_4]
.text:00001BFC                 push    edx
.text:00001BFD                 mov     eax, [ebp+arg_0]
.text:00001C00                 mov     ecx, [eax+8Ch]
.text:00001C06                 push    ecx
.text:00001C07                 mov     edx, [ebp+arg_0]
.text:00001C0A                 add     edx, 0D4h ; '+'
.text:00001C10                 push    edx
.text:00001C11                 call    _MatchFinderMt_Create@24 ; MatchFinderMt_Create(x,x,x,x,x,x)
.text:00001C16                 mov     [ebp+var_C], eax
.text:00001C19                 cmp     [ebp+var_C], 0
.text:00001C1D                 jz      short loc_1C27
.text:00001C1F                 mov     eax, [ebp+var_C]
.text:00001C22                 jmp     loc_1CA9
.text:00001C27 ; ---------------------------------------------------------------------------
.text:00001C27
.text:00001C27 loc_1C27:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+1BDj
.text:00001C27                 mov     eax, [ebp+arg_0]
.text:00001C2A                 add     eax, 0D4h ; '+'
.text:00001C2F                 mov     ecx, [ebp+arg_0]
.text:00001C32                 mov     [ecx], eax
.text:00001C34                 mov     edx, [ebp+arg_0]
.text:00001C37                 add     edx, 4
.text:00001C3A                 push    edx
.text:00001C3B                 mov     eax, [ebp+arg_0]
.text:00001C3E                 add     eax, 0D4h ; '+'
.text:00001C43                 push    eax
.text:00001C44                 call    _MatchFinderMt_CreateVTable@8 ; MatchFinderMt_CreateVTable(x,x)
.text:00001C49                 jmp     short loc_1CA7
.text:00001C4B ; ---------------------------------------------------------------------------
.text:00001C4B
.text:00001C4B loc_1C4B:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+187j
.text:00001C4B                 mov     ecx, [ebp+arg_C]
.text:00001C4E                 push    ecx
.text:00001C4F                 push    111h
.text:00001C54                 mov     edx, [ebp+arg_0]
.text:00001C57                 mov     eax, [edx+2Ch]
.text:00001C5A                 push    eax
.text:00001C5B                 mov     ecx, [ebp+var_4]
.text:00001C5E                 push    ecx
.text:00001C5F                 mov     edx, [ebp+arg_0]
.text:00001C62                 mov     eax, [edx+8Ch]
.text:00001C68                 push    eax
.text:00001C69                 mov     ecx, [ebp+arg_0]
.text:00001C6C                 add     ecx, 250h
.text:00001C72                 push    ecx
.text:00001C73                 call    _MatchFinder_Create@24 ; MatchFinder_Create(x,x,x,x,x,x)
.text:00001C78                 test    eax, eax
.text:00001C7A                 jnz     short loc_1C83
.text:00001C7C                 mov     eax, 2
.text:00001C81                 jmp     short loc_1CA9
.text:00001C83 ; ---------------------------------------------------------------------------
.text:00001C83
.text:00001C83 loc_1C83:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+21Aj
.text:00001C83                 mov     edx, [ebp+arg_0]
.text:00001C86                 add     edx, 250h
.text:00001C8C                 mov     eax, [ebp+arg_0]
.text:00001C8F                 mov     [eax], edx
.text:00001C91                 mov     ecx, [ebp+arg_0]
.text:00001C94                 add     ecx, 4
.text:00001C97                 push    ecx
.text:00001C98                 mov     edx, [ebp+arg_0]
.text:00001C9B                 add     edx, 250h
.text:00001CA1                 push    edx
.text:00001CA2                 call    _MatchFinder_CreateVTable@8 ; MatchFinder_CreateVTable(x,x)
.text:00001CA7
.text:00001CA7 loc_1CA7:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+1E9j
.text:00001CA7                 xor     eax, eax
.text:00001CA9
.text:00001CA9 loc_1CA9:                               ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+3Bj
.text:00001CA9                                         ; LzmaEnc_Alloc(x,x,x,x)+134j ...
.text:00001CA9                 pop     esi
.text:00001CAA                 add     esp, 10h
.text:00001CAD                 cmp     ebp, esp
.text:00001CAF                 call    __RTC_CheckEsp
.text:00001CB4                 mov     esp, ebp
.text:00001CB6                 pop     ebp
.text:00001CB7                 retn    10h
.text:00001CB7 _LzmaEnc_Alloc@16 endp
.text:00001CB7
.text:00001CB7 ; ---------------------------------------------------------------------------
.text:00001CBA                 align 10h
.text:00001CC0
.text:00001CC0 ; =============== S U B R O U T I N E =======================================
.text:00001CC0
.text:00001CC0 ; Attributes: bp-based frame
.text:00001CC0
.text:00001CC0 ; __stdcall RangeEnc_Alloc(x, x)
.text:00001CC0 _RangeEnc_Alloc@8 proc near             ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+2Dp
.text:00001CC0
.text:00001CC0 arg_0           = dword ptr  8
.text:00001CC0 arg_4           = dword ptr  0Ch
.text:00001CC0
.text:00001CC0                 push    ebp
.text:00001CC1                 mov     ebp, esp
.text:00001CC3                 push    esi
.text:00001CC4                 mov     eax, [ebp+arg_0]
.text:00001CC7                 cmp     dword ptr [eax+20h], 0
.text:00001CCB                 jnz     short loc_1D0B
.text:00001CCD                 mov     esi, esp
.text:00001CCF                 push    10000h
.text:00001CD4                 mov     ecx, [ebp+arg_4]
.text:00001CD7                 push    ecx
.text:00001CD8                 mov     edx, [ebp+arg_4]
.text:00001CDB                 mov     eax, [edx]
.text:00001CDD                 call    eax
.text:00001CDF                 cmp     esi, esp
.text:00001CE1                 call    __RTC_CheckEsp
.text:00001CE6                 mov     ecx, [ebp+arg_0]
.text:00001CE9                 mov     [ecx+20h], eax
.text:00001CEC                 mov     edx, [ebp+arg_0]
.text:00001CEF                 cmp     dword ptr [edx+20h], 0
.text:00001CF3                 jnz     short loc_1CF9
.text:00001CF5                 xor     eax, eax
.text:00001CF7                 jmp     short loc_1D10
.text:00001CF9 ; ---------------------------------------------------------------------------
.text:00001CF9
.text:00001CF9 loc_1CF9:                               ; CODE XREF: RangeEnc_Alloc(x,x)+33j
.text:00001CF9                 mov     eax, [ebp+arg_0]
.text:00001CFC                 mov     ecx, [eax+20h]
.text:00001CFF                 add     ecx, 10000h
.text:00001D05                 mov     edx, [ebp+arg_0]
.text:00001D08                 mov     [edx+1Ch], ecx
.text:00001D0B
.text:00001D0B loc_1D0B:                               ; CODE XREF: RangeEnc_Alloc(x,x)+Bj
.text:00001D0B                 mov     eax, 1
.text:00001D10
.text:00001D10 loc_1D10:                               ; CODE XREF: RangeEnc_Alloc(x,x)+37j
.text:00001D10                 pop     esi
.text:00001D11                 cmp     ebp, esp
.text:00001D13                 call    __RTC_CheckEsp
.text:00001D18                 pop     ebp
.text:00001D19                 retn    8
.text:00001D19 _RangeEnc_Alloc@8 endp
.text:00001D19
.text:00001D19 ; ---------------------------------------------------------------------------
.text:00001D1C                 align 10h
.text:00001D20
.text:00001D20 ; =============== S U B R O U T I N E =======================================
.text:00001D20
.text:00001D20 ; Attributes: bp-based frame
.text:00001D20
.text:00001D20 ; __stdcall LzmaEnc_MemPrepare(x, x, x, x, x, x)
.text:00001D20                 public _LzmaEnc_MemPrepare@24
.text:00001D20 _LzmaEnc_MemPrepare@24 proc near        ; CODE XREF: LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+81p
.text:00001D20
.text:00001D20 var_4           = dword ptr -4
.text:00001D20 arg_0           = dword ptr  8
.text:00001D20 arg_4           = dword ptr  0Ch
.text:00001D20 arg_8           = dword ptr  10h
.text:00001D20 arg_C           = dword ptr  14h
.text:00001D20 arg_10          = dword ptr  18h
.text:00001D20 arg_14          = dword ptr  1Ch
.text:00001D20
.text:00001D20                 push    ebp
.text:00001D21                 mov     ebp, esp
.text:00001D23                 push    ecx
.text:00001D24                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001D2B                 mov     eax, [ebp+arg_0]
.text:00001D2E                 mov     [ebp+var_4], eax
.text:00001D31                 mov     ecx, [ebp+arg_8]
.text:00001D34                 push    ecx
.text:00001D35                 mov     edx, [ebp+arg_4]
.text:00001D38                 push    edx
.text:00001D39                 mov     eax, [ebp+var_4]
.text:00001D3C                 push    eax
.text:00001D3D                 call    _LzmaEnc_SetInputBuf@12 ; LzmaEnc_SetInputBuf(x,x,x)
.text:00001D42                 mov     ecx, [ebp+var_4]
.text:00001D45                 mov     dword ptr [ecx+74h], 1
.text:00001D4C                 mov     edx, [ebp+arg_14]
.text:00001D4F                 push    edx
.text:00001D50                 mov     eax, [ebp+arg_10]
.text:00001D53                 push    eax
.text:00001D54                 mov     ecx, [ebp+arg_C]
.text:00001D57                 push    ecx
.text:00001D58                 mov     edx, [ebp+var_4]
.text:00001D5B                 push    edx
.text:00001D5C                 call    _LzmaEnc_AllocAndInit@16 ; LzmaEnc_AllocAndInit(x,x,x,x)
.text:00001D61                 add     esp, 4
.text:00001D64                 cmp     ebp, esp
.text:00001D66                 call    __RTC_CheckEsp
.text:00001D6B                 mov     esp, ebp
.text:00001D6D                 pop     ebp
.text:00001D6E                 retn    18h
.text:00001D6E _LzmaEnc_MemPrepare@24 endp
.text:00001D6E
.text:00001D6E ; ---------------------------------------------------------------------------
.text:00001D71                 align 10h
.text:00001D80
.text:00001D80 ; =============== S U B R O U T I N E =======================================
.text:00001D80
.text:00001D80 ; Attributes: bp-based frame
.text:00001D80
.text:00001D80 ; __stdcall LzmaEnc_SetInputBuf(x, x, x)
.text:00001D80 _LzmaEnc_SetInputBuf@12 proc near       ; CODE XREF: LzmaEnc_MemPrepare(x,x,x,x,x,x)+1Dp
.text:00001D80                                         ; LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+35p
.text:00001D80
.text:00001D80 arg_0           = dword ptr  8
.text:00001D80 arg_4           = dword ptr  0Ch
.text:00001D80 arg_8           = dword ptr  10h
.text:00001D80
.text:00001D80                 push    ebp
.text:00001D81                 mov     ebp, esp
.text:00001D83                 mov     eax, [ebp+arg_0]
.text:00001D86                 mov     byte ptr [eax+26Fh], 1
.text:00001D8D                 mov     ecx, [ebp+arg_0]
.text:00001D90                 mov     edx, [ebp+arg_4]
.text:00001D93                 mov     [ecx+284h], edx
.text:00001D99                 mov     eax, [ebp+arg_0]
.text:00001D9C                 mov     ecx, [ebp+arg_8]
.text:00001D9F                 mov     [eax+29Ch], ecx
.text:00001DA5                 pop     ebp
.text:00001DA6                 retn    0Ch
.text:00001DA6 _LzmaEnc_SetInputBuf@12 endp
.text:00001DA6
.text:00001DA6 ; ---------------------------------------------------------------------------
.text:00001DA9                 align 10h
.text:00001DB0
.text:00001DB0 ; =============== S U B R O U T I N E =======================================
.text:00001DB0
.text:00001DB0 ; Attributes: bp-based frame
.text:00001DB0
.text:00001DB0 ; __stdcall LzmaEnc_Finish(x)
.text:00001DB0                 public _LzmaEnc_Finish@4
.text:00001DB0 _LzmaEnc_Finish@4 proc near             ; CODE XREF: LzmaEnc_Encode2(x,x)+D7p
.text:00001DB0
.text:00001DB0 var_4           = dword ptr -4
.text:00001DB0 arg_0           = dword ptr  8
.text:00001DB0
.text:00001DB0                 push    ebp
.text:00001DB1                 mov     ebp, esp
.text:00001DB3                 push    ecx
.text:00001DB4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DBB                 mov     eax, [ebp+arg_0]
.text:00001DBE                 mov     [ebp+var_4], eax
.text:00001DC1                 mov     ecx, [ebp+var_4]
.text:00001DC4                 cmp     dword ptr [ecx+0D0h], 0
.text:00001DCB                 jz      short loc_1DDC
.text:00001DCD                 mov     edx, [ebp+var_4]
.text:00001DD0                 add     edx, 0D4h ; '+'
.text:00001DD6                 push    edx
.text:00001DD7                 call    _MatchFinderMt_ReleaseStream@4 ; MatchFinderMt_ReleaseStream(x)
.text:00001DDC
.text:00001DDC loc_1DDC:                               ; CODE XREF: LzmaEnc_Finish(x)+1Bj
.text:00001DDC                 add     esp, 4
.text:00001DDF                 cmp     ebp, esp
.text:00001DE1                 call    __RTC_CheckEsp
.text:00001DE6                 mov     esp, ebp
.text:00001DE8                 pop     ebp
.text:00001DE9                 retn    4
.text:00001DE9 _LzmaEnc_Finish@4 endp
.text:00001DE9
.text:00001DE9 ; ---------------------------------------------------------------------------
.text:00001DEC                 align 10h
.text:00001DF0
.text:00001DF0 ; =============== S U B R O U T I N E =======================================
.text:00001DF0
.text:00001DF0 ; Attributes: bp-based frame
.text:00001DF0
.text:00001DF0 ; __stdcall LzmaEnc_GetNumAvailableBytes(x)
.text:00001DF0                 public _LzmaEnc_GetNumAvailableBytes@4
.text:00001DF0 _LzmaEnc_GetNumAvailableBytes@4 proc near
.text:00001DF0
.text:00001DF0 var_4           = dword ptr -4
.text:00001DF0 arg_0           = dword ptr  8
.text:00001DF0
.text:00001DF0                 push    ebp
.text:00001DF1                 mov     ebp, esp
.text:00001DF3                 push    ecx
.text:00001DF4                 push    esi
.text:00001DF5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001DFC                 mov     eax, [ebp+arg_0]
.text:00001DFF                 mov     [ebp+var_4], eax
.text:00001E02                 mov     esi, esp
.text:00001E04                 mov     ecx, [ebp+var_4]
.text:00001E07                 mov     edx, [ecx]
.text:00001E09                 push    edx
.text:00001E0A                 mov     eax, [ebp+var_4]
.text:00001E0D                 mov     ecx, [eax+8]
.text:00001E10                 call    ecx
.text:00001E12                 cmp     esi, esp
.text:00001E14                 call    __RTC_CheckEsp
.text:00001E19                 pop     esi
.text:00001E1A                 add     esp, 4
.text:00001E1D                 cmp     ebp, esp
.text:00001E1F                 call    __RTC_CheckEsp
.text:00001E24                 mov     esp, ebp
.text:00001E26                 pop     ebp
.text:00001E27                 retn    4
.text:00001E27 _LzmaEnc_GetNumAvailableBytes@4 endp
.text:00001E27
.text:00001E27 ; ---------------------------------------------------------------------------
.text:00001E2A                 align 10h
.text:00001E30
.text:00001E30 ; =============== S U B R O U T I N E =======================================
.text:00001E30
.text:00001E30 ; Attributes: bp-based frame
.text:00001E30
.text:00001E30 ; __stdcall LzmaEnc_GetCurBuf(x)
.text:00001E30                 public _LzmaEnc_GetCurBuf@4
.text:00001E30 _LzmaEnc_GetCurBuf@4 proc near
.text:00001E30
.text:00001E30 var_4           = dword ptr -4
.text:00001E30 arg_0           = dword ptr  8
.text:00001E30
.text:00001E30                 push    ebp
.text:00001E31                 mov     ebp, esp
.text:00001E33                 push    ecx
.text:00001E34                 push    esi
.text:00001E35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001E3C                 mov     eax, [ebp+arg_0]
.text:00001E3F                 mov     [ebp+var_4], eax
.text:00001E42                 mov     esi, esp
.text:00001E44                 mov     ecx, [ebp+var_4]
.text:00001E47                 mov     edx, [ecx]
.text:00001E49                 push    edx
.text:00001E4A                 mov     eax, [ebp+var_4]
.text:00001E4D                 mov     ecx, [eax+0Ch]
.text:00001E50                 call    ecx
.text:00001E52                 cmp     esi, esp
.text:00001E54                 call    __RTC_CheckEsp
.text:00001E59                 mov     edx, [ebp+var_4]
.text:00001E5C                 sub     eax, [edx+30h]
.text:00001E5F                 pop     esi
.text:00001E60                 add     esp, 4
.text:00001E63                 cmp     ebp, esp
.text:00001E65                 call    __RTC_CheckEsp
.text:00001E6A                 mov     esp, ebp
.text:00001E6C                 pop     ebp
.text:00001E6D                 retn    4
.text:00001E6D _LzmaEnc_GetCurBuf@4 endp
.text:00001E6D
.text:00001E70
.text:00001E70 ; =============== S U B R O U T I N E =======================================
.text:00001E70
.text:00001E70 ; Attributes: bp-based frame
.text:00001E70
.text:00001E70 ; __stdcall LzmaEnc_CodeOneMemBlock(x, x, x, x, x, x)
.text:00001E70                 public _LzmaEnc_CodeOneMemBlock@24
.text:00001E70 _LzmaEnc_CodeOneMemBlock@24 proc near
.text:00001E70
.text:00001E70 var_28          = byte ptr -28h
.text:00001E70 var_24          = dword ptr -24h
.text:00001E70 var_20          = dword ptr -20h
.text:00001E70 var_1C          = dword ptr -1Ch
.text:00001E70 var_18          = dword ptr -18h
.text:00001E70 var_10          = dword ptr -10h
.text:00001E70 var_C           = dword ptr -0Ch
.text:00001E70 var_8           = dword ptr -8
.text:00001E70 var_4           = dword ptr -4
.text:00001E70 arg_0           = dword ptr  8
.text:00001E70 arg_4           = dword ptr  0Ch
.text:00001E70 arg_8           = dword ptr  10h
.text:00001E70 arg_C           = dword ptr  14h
.text:00001E70 arg_10          = dword ptr  18h
.text:00001E70 arg_14          = dword ptr  1Ch
.text:00001E70
.text:00001E70                 push    ebp
.text:00001E71                 mov     ebp, esp
.text:00001E73                 sub     esp, 28h
.text:00001E76                 push    edi
.text:00001E77                 lea     edi, [ebp+var_28]
.text:00001E7A                 mov     ecx, 0Ah
.text:00001E7F                 mov     eax, 0CCCCCCCCh
.text:00001E84                 rep stosd
.text:00001E86                 mov     eax, [ebp+arg_0]
.text:00001E89                 mov     [ebp+var_4], eax
.text:00001E8C                 mov     [ebp+var_24], offset _MyWrite@12 ; MyWrite(x,x,x)
.text:00001E93                 mov     ecx, [ebp+arg_8]
.text:00001E96                 mov     [ebp+var_20], ecx
.text:00001E99                 mov     edx, [ebp+arg_C]
.text:00001E9C                 mov     eax, [edx]
.text:00001E9E                 mov     [ebp+var_1C], eax
.text:00001EA1                 mov     [ebp+var_18], 0
.text:00001EA8                 mov     ecx, [ebp+var_4]
.text:00001EAB                 mov     dword ptr [ecx+68h], 0
.text:00001EB2                 mov     edx, [ebp+var_4]
.text:00001EB5                 mov     dword ptr [edx+6Ch], 0
.text:00001EBC                 mov     eax, [ebp+var_4]
.text:00001EBF                 mov     dword ptr [eax+90h], 0
.text:00001EC9                 cmp     [ebp+arg_4], 0
.text:00001ECD                 jz      short loc_1ED8
.text:00001ECF                 mov     ecx, [ebp+var_4]
.text:00001ED2                 push    ecx
.text:00001ED3                 call    _LzmaEnc_Init@4 ; LzmaEnc_Init(x)
.text:00001ED8
.text:00001ED8 loc_1ED8:                               ; CODE XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+5Dj
.text:00001ED8                 mov     edx, [ebp+var_4]
.text:00001EDB                 push    edx
.text:00001EDC                 call    _LzmaEnc_InitPrices@4 ; LzmaEnc_InitPrices(x)
.text:00001EE1                 mov     eax, [ebp+var_4]
.text:00001EE4                 mov     ecx, [eax+78h]
.text:00001EE7                 mov     [ebp+var_C], ecx
.text:00001EEA                 mov     edx, [eax+7Ch]
.text:00001EED                 mov     [ebp+var_8], edx
.text:00001EF0                 mov     eax, [ebp+var_4]
.text:00001EF3                 add     eax, 98h ; 'ÿ'
.text:00001EF8                 push    eax
.text:00001EF9                 call    _RangeEnc_Init@4 ; RangeEnc_Init(x)
.text:00001EFE                 mov     ecx, [ebp+var_4]
.text:00001F01                 lea     edx, [ebp+var_24]
.text:00001F04                 mov     [ecx+0BCh], edx
.text:00001F0A                 mov     eax, [ebp+arg_14]
.text:00001F0D                 mov     ecx, [eax]
.text:00001F0F                 push    ecx
.text:00001F10                 mov     edx, [ebp+arg_10]
.text:00001F13                 push    edx
.text:00001F14                 push    1
.text:00001F16                 mov     eax, [ebp+var_4]
.text:00001F19                 push    eax
.text:00001F1A                 call    _LzmaEnc_CodeOneBlock@16 ; LzmaEnc_CodeOneBlock(x,x,x,x)
.text:00001F1F                 mov     [ebp+var_10], eax
.text:00001F22                 mov     ecx, [ebp+var_4]
.text:00001F25                 mov     edx, [ecx+78h]
.text:00001F28                 sub     edx, [ebp+var_C]
.text:00001F2B                 mov     eax, [ecx+7Ch]
.text:00001F2E                 sbb     eax, [ebp+var_8]
.text:00001F31                 mov     ecx, [ebp+arg_14]
.text:00001F34                 mov     [ecx], edx
.text:00001F36                 mov     edx, [ebp+arg_C]
.text:00001F39                 mov     eax, [edx]
.text:00001F3B                 sub     eax, [ebp+var_1C]
.text:00001F3E                 mov     ecx, [ebp+arg_C]
.text:00001F41                 mov     [ecx], eax
.text:00001F43                 cmp     [ebp+var_18], 0
.text:00001F47                 jz      short loc_1F50
.text:00001F49                 mov     eax, 7
.text:00001F4E                 jmp     short loc_1F53
.text:00001F50 ; ---------------------------------------------------------------------------
.text:00001F50
.text:00001F50 loc_1F50:                               ; CODE XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+D7j
.text:00001F50                 mov     eax, [ebp+var_10]
.text:00001F53
.text:00001F53 loc_1F53:                               ; CODE XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+DEj
.text:00001F53                 push    edx
.text:00001F54                 mov     ecx, ebp
.text:00001F56                 push    eax
.text:00001F57                 lea     edx, $LN7
.text:00001F5D                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001F62                 pop     eax
.text:00001F63                 pop     edx
.text:00001F64                 pop     edi
.text:00001F65                 add     esp, 28h
.text:00001F68                 cmp     ebp, esp
.text:00001F6A                 call    __RTC_CheckEsp
.text:00001F6F                 mov     esp, ebp
.text:00001F71                 pop     ebp
.text:00001F72                 retn    18h
.text:00001F72 _LzmaEnc_CodeOneMemBlock@24 endp
.text:00001F72
.text:00001F72 ; ---------------------------------------------------------------------------
.text:00001F75                 align 4
.text:00001F78 $LN7            dd 1                    ; DATA XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+E7o
.text:00001F7C                 dd offset $LN6
.text:00001F80 $LN6            dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00001F7Co
.text:00001F88                 dd offset $LN5_1        ; "outStream"
.text:00001F8C $LN5_1          db 'outStream',0        ; DATA XREF: .text:00001F88o
.text:00001F96                 align 10h
.text:00001FA0
.text:00001FA0 ; =============== S U B R O U T I N E =======================================
.text:00001FA0
.text:00001FA0 ; Attributes: bp-based frame
.text:00001FA0
.text:00001FA0 ; __stdcall LzmaEnc_CodeOneBlock(x, x, x, x)
.text:00001FA0 _LzmaEnc_CodeOneBlock@16 proc near      ; CODE XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+AAp
.text:00001FA0                                         ; LzmaEnc_Encode2(x,x)+4Bp
.text:00001FA0
.text:00001FA0 var_70          = dword ptr -70h
.text:00001FA0 var_6C          = dword ptr -6Ch
.text:00001FA0 var_68          = dword ptr -68h
.text:00001FA0 var_64          = dword ptr -64h
.text:00001FA0 var_60          = dword ptr -60h
.text:00001FA0 var_5C          = dword ptr -5Ch
.text:00001FA0 var_58          = dword ptr -58h
.text:00001FA0 var_54          = dword ptr -54h
.text:00001FA0 var_50          = dword ptr -50h
.text:00001FA0 var_4C          = dword ptr -4Ch
.text:00001FA0 var_48          = dword ptr -48h
.text:00001FA0 var_44          = dword ptr -44h
.text:00001FA0 var_40          = dword ptr -40h
.text:00001FA0 var_3C          = dword ptr -3Ch
.text:00001FA0 var_38          = dword ptr -38h
.text:00001FA0 var_31          = byte ptr -31h
.text:00001FA0 var_30          = dword ptr -30h
.text:00001FA0 var_2C          = dword ptr -2Ch
.text:00001FA0 var_24          = dword ptr -24h
.text:00001FA0 var_19          = byte ptr -19h
.text:00001FA0 var_14          = byte ptr -14h
.text:00001FA0 var_C           = dword ptr -0Ch
.text:00001FA0 var_8           = dword ptr -8
.text:00001FA0 var_4           = dword ptr -4
.text:00001FA0 arg_0           = dword ptr  8
.text:00001FA0 arg_4           = dword ptr  0Ch
.text:00001FA0 arg_8           = dword ptr  10h
.text:00001FA0 arg_C           = dword ptr  14h
.text:00001FA0
.text:00001FA0                 push    ebp
.text:00001FA1                 mov     ebp, esp
.text:00001FA3                 sub     esp, 70h
.text:00001FA6                 push    esi
.text:00001FA7                 push    edi
.text:00001FA8                 lea     edi, [ebp+var_70]
.text:00001FAB                 mov     ecx, 1Ch
.text:00001FB0                 mov     eax, 0CCCCCCCCh
.text:00001FB5                 rep stosd
.text:00001FB7                 mov     eax, [ebp+arg_0]
.text:00001FBA                 cmp     dword ptr [eax+74h], 0
.text:00001FBE                 jz      short loc_1FE1
.text:00001FC0                 mov     esi, esp
.text:00001FC2                 mov     ecx, [ebp+arg_0]
.text:00001FC5                 mov     edx, [ecx]
.text:00001FC7                 push    edx
.text:00001FC8                 mov     eax, [ebp+arg_0]
.text:00001FCB                 mov     ecx, [eax+4]
.text:00001FCE                 call    ecx
.text:00001FD0                 cmp     esi, esp
.text:00001FD2                 call    __RTC_CheckEsp
.text:00001FD7                 mov     edx, [ebp+arg_0]
.text:00001FDA                 mov     dword ptr [edx+74h], 0
.text:00001FE1
.text:00001FE1 loc_1FE1:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+1Ej
.text:00001FE1                 mov     eax, [ebp+arg_0]
.text:00001FE4                 cmp     dword ptr [eax+6Ch], 0
.text:00001FE8                 jz      short loc_1FF8
.text:00001FEA                 mov     ecx, [ebp+arg_0]
.text:00001FED                 mov     eax, [ecx+90h]
.text:00001FF3                 jmp     loc_279D
.text:00001FF8 ; ---------------------------------------------------------------------------
.text:00001FF8
.text:00001FF8 loc_1FF8:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+48j
.text:00001FF8                 mov     edx, [ebp+arg_0]
.text:00001FFB                 push    edx
.text:00001FFC                 call    _CheckErrors@4  ; CheckErrors(x)
.text:00002001                 mov     [ebp+var_C], eax
.text:00002004                 cmp     [ebp+var_C], 0
.text:00002008                 jz      short loc_2012
.text:0000200A                 mov     eax, [ebp+var_C]
.text:0000200D                 jmp     loc_279D
.text:00002012 ; ---------------------------------------------------------------------------
.text:00002012
.text:00002012 loc_2012:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+68j
.text:00002012                 mov     eax, [ebp+arg_0]
.text:00002015                 mov     ecx, [eax+78h]
.text:00002018                 mov     [ebp+var_4], ecx
.text:0000201B                 mov     edx, [ebp+var_4]
.text:0000201E                 mov     [ebp+var_8], edx
.text:00002021                 mov     eax, [ebp+arg_0]
.text:00002024                 mov     [ebp+var_5C], eax
.text:00002027                 mov     ecx, [ebp+var_5C]
.text:0000202A                 mov     edx, [ebp+var_5C]
.text:0000202D                 mov     eax, [ecx+78h]
.text:00002030                 or      eax, [edx+7Ch]
.text:00002033                 jnz     loc_20FF
.text:00002039                 mov     esi, esp
.text:0000203B                 mov     ecx, [ebp+arg_0]
.text:0000203E                 mov     edx, [ecx]
.text:00002040                 push    edx
.text:00002041                 mov     eax, [ebp+arg_0]
.text:00002044                 mov     ecx, [eax+8]
.text:00002047                 call    ecx
.text:00002049                 cmp     esi, esp
.text:0000204B                 call    __RTC_CheckEsp
.text:00002050                 test    eax, eax
.text:00002052                 jnz     short loc_2066
.text:00002054                 mov     edx, [ebp+var_4]
.text:00002057                 push    edx
.text:00002058                 mov     eax, [ebp+arg_0]
.text:0000205B                 push    eax
.text:0000205C                 call    _Flush@8        ; Flush(x,x)
.text:00002061                 jmp     loc_279D
.text:00002066 ; ---------------------------------------------------------------------------
.text:00002066
.text:00002066 loc_2066:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+B2j
.text:00002066                 lea     ecx, [ebp+var_14]
.text:00002069                 push    ecx
.text:0000206A                 mov     edx, [ebp+arg_0]
.text:0000206D                 push    edx
.text:0000206E                 call    _ReadMatchDistances@8 ; ReadMatchDistances(x,x)
.text:00002073                 push    0
.text:00002075                 mov     eax, [ebp+arg_0]
.text:00002078                 mov     ecx, [eax+44h]
.text:0000207B                 shl     ecx, 5
.text:0000207E                 mov     edx, [ebp+arg_0]
.text:00002081                 lea     eax, [edx+ecx+32608h]
.text:00002088                 push    eax
.text:00002089                 mov     ecx, [ebp+arg_0]
.text:0000208C                 add     ecx, 98h ; 'ÿ'
.text:00002092                 push    ecx
.text:00002093                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002098                 mov     edx, [ebp+arg_0]
.text:0000209B                 mov     eax, [edx+44h]
.text:0000209E                 mov     ecx, [ebp+arg_0]
.text:000020A1                 mov     edx, _kLiteralNextStates[eax*4]
.text:000020A8                 mov     [ecx+44h], edx
.text:000020AB                 mov     esi, esp
.text:000020AD                 mov     eax, [ebp+arg_0]
.text:000020B0                 mov     ecx, [eax]
.text:000020B2                 push    ecx
.text:000020B3                 mov     edx, [ebp+arg_0]
.text:000020B6                 mov     eax, [edx+0Ch]
.text:000020B9                 call    eax
.text:000020BB                 cmp     esi, esp
.text:000020BD                 call    __RTC_CheckEsp
.text:000020C2                 mov     ecx, [ebp+arg_0]
.text:000020C5                 sub     eax, [ecx+30h]
.text:000020C8                 mov     dl, [eax]
.text:000020CA                 mov     [ebp+var_19], dl
.text:000020CD                 movzx   eax, [ebp+var_19]
.text:000020D1                 push    eax
.text:000020D2                 mov     ecx, [ebp+arg_0]
.text:000020D5                 mov     edx, [ecx+60h]
.text:000020D8                 push    edx
.text:000020D9                 mov     eax, [ebp+arg_0]
.text:000020DC                 add     eax, 98h ; 'ÿ'
.text:000020E1                 push    eax
.text:000020E2                 call    _LitEnc_Encode@12 ; LitEnc_Encode(x,x,x)
.text:000020E7                 mov     ecx, [ebp+arg_0]
.text:000020EA                 mov     edx, [ecx+30h]
.text:000020ED                 sub     edx, 1
.text:000020F0                 mov     eax, [ebp+arg_0]
.text:000020F3                 mov     [eax+30h], edx
.text:000020F6                 mov     ecx, [ebp+var_4]
.text:000020F9                 add     ecx, 1
.text:000020FC                 mov     [ebp+var_4], ecx
.text:000020FF
.text:000020FF loc_20FF:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+93j
.text:000020FF                 mov     esi, esp
.text:00002101                 mov     edx, [ebp+arg_0]
.text:00002104                 mov     eax, [edx]
.text:00002106                 push    eax
.text:00002107                 mov     ecx, [ebp+arg_0]
.text:0000210A                 mov     edx, [ecx+8]
.text:0000210D                 call    edx
.text:0000210F                 cmp     esi, esp
.text:00002111                 call    __RTC_CheckEsp
.text:00002116                 test    eax, eax
.text:00002118                 jz      loc_2776
.text:0000211E
.text:0000211E loc_211E:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x):loc_2771j
.text:0000211E                 mov     eax, [ebp+arg_0]
.text:00002121                 cmp     dword ptr [eax+64h], 0
.text:00002125                 jz      short loc_2139
.text:00002127                 lea     ecx, [ebp+var_24]
.text:0000212A                 push    ecx
.text:0000212B                 mov     edx, [ebp+arg_0]
.text:0000212E                 push    edx
.text:0000212F                 call    _GetOptimumFast@8 ; GetOptimumFast(x,x)
.text:00002134                 mov     [ebp+var_2C], eax
.text:00002137                 jmp     short loc_214D
.text:00002139 ; ---------------------------------------------------------------------------
.text:00002139
.text:00002139 loc_2139:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+185j
.text:00002139                 lea     eax, [ebp+var_24]
.text:0000213C                 push    eax
.text:0000213D                 mov     ecx, [ebp+var_4]
.text:00002140                 push    ecx
.text:00002141                 mov     edx, [ebp+arg_0]
.text:00002144                 push    edx
.text:00002145                 call    _GetOptimum@12  ; GetOptimum(x,x,x)
.text:0000214A                 mov     [ebp+var_2C], eax
.text:0000214D
.text:0000214D loc_214D:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+197j
.text:0000214D                 mov     eax, [ebp+arg_0]
.text:00002150                 mov     ecx, [ebp+var_4]
.text:00002153                 and     ecx, [eax+58h]
.text:00002156                 mov     [ebp+var_30], ecx
.text:00002159                 cmp     [ebp+var_2C], 1
.text:0000215D                 jnz     loc_225A
.text:00002163                 cmp     [ebp+var_24], 0FFFFFFFFh
.text:00002167                 jnz     loc_225A
.text:0000216D                 push    0
.text:0000216F                 mov     edx, [ebp+arg_0]
.text:00002172                 mov     eax, [edx+44h]
.text:00002175                 shl     eax, 5
.text:00002178                 mov     ecx, [ebp+arg_0]
.text:0000217B                 lea     edx, [ecx+eax+32608h]
.text:00002182                 mov     eax, [ebp+var_30]
.text:00002185                 lea     ecx, [edx+eax*2]
.text:00002188                 push    ecx
.text:00002189                 mov     edx, [ebp+arg_0]
.text:0000218C                 add     edx, 98h ; 'ÿ'
.text:00002192                 push    edx
.text:00002193                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002198                 mov     esi, esp
.text:0000219A                 mov     eax, [ebp+arg_0]
.text:0000219D                 mov     ecx, [eax]
.text:0000219F                 push    ecx
.text:000021A0                 mov     edx, [ebp+arg_0]
.text:000021A3                 mov     eax, [edx+0Ch]
.text:000021A6                 call    eax
.text:000021A8                 cmp     esi, esp
.text:000021AA                 call    __RTC_CheckEsp
.text:000021AF                 mov     ecx, [ebp+arg_0]
.text:000021B2                 sub     eax, [ecx+30h]
.text:000021B5                 mov     [ebp+var_3C], eax
.text:000021B8                 mov     edx, [ebp+var_3C]
.text:000021BB                 mov     al, [edx]
.text:000021BD                 mov     [ebp+var_31], al
.text:000021C0                 mov     ecx, [ebp+arg_0]
.text:000021C3                 mov     edx, [ebp+var_4]
.text:000021C6                 and     edx, [ecx+54h]
.text:000021C9                 mov     eax, [ebp+arg_0]
.text:000021CC                 mov     ecx, [eax+48h]
.text:000021CF                 shl     edx, cl
.text:000021D1                 mov     ecx, [ebp+var_3C]
.text:000021D4                 movzx   eax, byte ptr [ecx-1]
.text:000021D8                 mov     ecx, [ebp+arg_0]
.text:000021DB                 mov     esi, 8
.text:000021E0                 sub     esi, [ecx+48h]
.text:000021E3                 mov     ecx, esi
.text:000021E5                 sar     eax, cl
.text:000021E7                 add     edx, eax
.text:000021E9                 imul    edx, 300h
.text:000021EF                 mov     eax, [ebp+arg_0]
.text:000021F2                 mov     ecx, [eax+60h]
.text:000021F5                 lea     edx, [ecx+edx*2]
.text:000021F8                 mov     [ebp+var_38], edx
.text:000021FB                 mov     eax, [ebp+arg_0]
.text:000021FE                 cmp     dword ptr [eax+44h], 7
.text:00002202                 jnb     short loc_221D
.text:00002204                 movzx   ecx, [ebp+var_31]
.text:00002208                 push    ecx
.text:00002209                 mov     edx, [ebp+var_38]
.text:0000220C                 push    edx
.text:0000220D                 mov     eax, [ebp+arg_0]
.text:00002210                 add     eax, 98h ; 'ÿ'
.text:00002215                 push    eax
.text:00002216                 call    _LitEnc_Encode@12 ; LitEnc_Encode(x,x,x)
.text:0000221B                 jmp     short loc_2242
.text:0000221D ; ---------------------------------------------------------------------------
.text:0000221D
.text:0000221D loc_221D:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+262j
.text:0000221D                 mov     ecx, [ebp+arg_0]
.text:00002220                 mov     edx, [ebp+var_3C]
.text:00002223                 sub     edx, [ecx+34h]
.text:00002226                 movzx   eax, byte ptr [edx-1]
.text:0000222A                 push    eax
.text:0000222B                 movzx   ecx, [ebp+var_31]
.text:0000222F                 push    ecx
.text:00002230                 mov     edx, [ebp+var_38]
.text:00002233                 push    edx
.text:00002234                 mov     eax, [ebp+arg_0]
.text:00002237                 add     eax, 98h ; 'ÿ'
.text:0000223C                 push    eax
.text:0000223D                 call    _LitEnc_EncodeMatched@16 ; LitEnc_EncodeMatched(x,x,x,x)
.text:00002242
.text:00002242 loc_2242:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+27Bj
.text:00002242                 mov     ecx, [ebp+arg_0]
.text:00002245                 mov     edx, [ecx+44h]
.text:00002248                 mov     eax, [ebp+arg_0]
.text:0000224B                 mov     ecx, _kLiteralNextStates[edx*4]
.text:00002252                 mov     [eax+44h], ecx
.text:00002255                 jmp     loc_2649
.text:0000225A ; ---------------------------------------------------------------------------
.text:0000225A
.text:0000225A loc_225A:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+1BDj
.text:0000225A                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+1C7j
.text:0000225A                 push    1
.text:0000225C                 mov     edx, [ebp+arg_0]
.text:0000225F                 mov     eax, [edx+44h]
.text:00002262                 shl     eax, 5
.text:00002265                 mov     ecx, [ebp+arg_0]
.text:00002268                 lea     edx, [ecx+eax+32608h]
.text:0000226F                 mov     eax, [ebp+var_30]
.text:00002272                 lea     ecx, [edx+eax*2]
.text:00002275                 push    ecx
.text:00002276                 mov     edx, [ebp+arg_0]
.text:00002279                 add     edx, 98h ; 'ÿ'
.text:0000227F                 push    edx
.text:00002280                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002285                 cmp     [ebp+var_24], 4
.text:00002289                 jnb     loc_2450
.text:0000228F                 push    1
.text:00002291                 mov     eax, [ebp+arg_0]
.text:00002294                 mov     ecx, [eax+44h]
.text:00002297                 mov     edx, [ebp+arg_0]
.text:0000229A                 lea     eax, [edx+ecx*2+32788h]
.text:000022A1                 push    eax
.text:000022A2                 mov     ecx, [ebp+arg_0]
.text:000022A5                 add     ecx, 98h ; 'ÿ'
.text:000022AB                 push    ecx
.text:000022AC                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:000022B1                 cmp     [ebp+var_24], 0
.text:000022B5                 jnz     short loc_2310
.text:000022B7                 push    0
.text:000022B9                 mov     edx, [ebp+arg_0]
.text:000022BC                 mov     eax, [edx+44h]
.text:000022BF                 mov     ecx, [ebp+arg_0]
.text:000022C2                 lea     edx, [ecx+eax*2+327A0h]
.text:000022C9                 push    edx
.text:000022CA                 mov     eax, [ebp+arg_0]
.text:000022CD                 add     eax, 98h ; 'ÿ'
.text:000022D2                 push    eax
.text:000022D3                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:000022D8                 xor     ecx, ecx
.text:000022DA                 cmp     [ebp+var_2C], 1
.text:000022DE                 setnz   cl
.text:000022E1                 push    ecx
.text:000022E2                 mov     edx, [ebp+arg_0]
.text:000022E5                 mov     eax, [edx+44h]
.text:000022E8                 shl     eax, 5
.text:000022EB                 mov     ecx, [ebp+arg_0]
.text:000022EE                 lea     edx, [ecx+eax+327E8h]
.text:000022F5                 mov     eax, [ebp+var_30]
.text:000022F8                 lea     ecx, [edx+eax*2]
.text:000022FB                 push    ecx
.text:000022FC                 mov     edx, [ebp+arg_0]
.text:000022FF                 add     edx, 98h ; 'ÿ'
.text:00002305                 push    edx
.text:00002306                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:0000230B                 jmp     loc_23E4
.text:00002310 ; ---------------------------------------------------------------------------
.text:00002310
.text:00002310 loc_2310:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+315j
.text:00002310                 mov     eax, [ebp+var_24]
.text:00002313                 mov     ecx, [ebp+arg_0]
.text:00002316                 mov     edx, [ecx+eax*4+34h]
.text:0000231A                 mov     [ebp+var_40], edx
.text:0000231D                 push    1
.text:0000231F                 mov     eax, [ebp+arg_0]
.text:00002322                 mov     ecx, [eax+44h]
.text:00002325                 mov     edx, [ebp+arg_0]
.text:00002328                 lea     eax, [edx+ecx*2+327A0h]
.text:0000232F                 push    eax
.text:00002330                 mov     ecx, [ebp+arg_0]
.text:00002333                 add     ecx, 98h ; 'ÿ'
.text:00002339                 push    ecx
.text:0000233A                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:0000233F                 cmp     [ebp+var_24], 1
.text:00002343                 jnz     short loc_2368
.text:00002345                 push    0
.text:00002347                 mov     edx, [ebp+arg_0]
.text:0000234A                 mov     eax, [edx+44h]
.text:0000234D                 mov     ecx, [ebp+arg_0]
.text:00002350                 lea     edx, [ecx+eax*2+327B8h]
.text:00002357                 push    edx
.text:00002358                 mov     eax, [ebp+arg_0]
.text:0000235B                 add     eax, 98h ; 'ÿ'
.text:00002360                 push    eax
.text:00002361                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002366                 jmp     short loc_23CF
.text:00002368 ; ---------------------------------------------------------------------------
.text:00002368
.text:00002368 loc_2368:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+3A3j
.text:00002368                 push    1
.text:0000236A                 mov     ecx, [ebp+arg_0]
.text:0000236D                 mov     edx, [ecx+44h]
.text:00002370                 mov     eax, [ebp+arg_0]
.text:00002373                 lea     ecx, [eax+edx*2+327B8h]
.text:0000237A                 push    ecx
.text:0000237B                 mov     edx, [ebp+arg_0]
.text:0000237E                 add     edx, 98h ; 'ÿ'
.text:00002384                 push    edx
.text:00002385                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:0000238A                 mov     eax, [ebp+var_24]
.text:0000238D                 sub     eax, 2
.text:00002390                 push    eax
.text:00002391                 mov     ecx, [ebp+arg_0]
.text:00002394                 mov     edx, [ecx+44h]
.text:00002397                 mov     eax, [ebp+arg_0]
.text:0000239A                 lea     ecx, [eax+edx*2+327D0h]
.text:000023A1                 push    ecx
.text:000023A2                 mov     edx, [ebp+arg_0]
.text:000023A5                 add     edx, 98h ; 'ÿ'
.text:000023AB                 push    edx
.text:000023AC                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:000023B1                 cmp     [ebp+var_24], 3
.text:000023B5                 jnz     short loc_23C3
.text:000023B7                 mov     eax, [ebp+arg_0]
.text:000023BA                 mov     ecx, [ebp+arg_0]
.text:000023BD                 mov     edx, [ecx+3Ch]
.text:000023C0                 mov     [eax+40h], edx
.text:000023C3
.text:000023C3 loc_23C3:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+415j
.text:000023C3                 mov     eax, [ebp+arg_0]
.text:000023C6                 mov     ecx, [ebp+arg_0]
.text:000023C9                 mov     edx, [ecx+38h]
.text:000023CC                 mov     [eax+3Ch], edx
.text:000023CF
.text:000023CF loc_23CF:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+3C6j
.text:000023CF                 mov     eax, [ebp+arg_0]
.text:000023D2                 mov     ecx, [ebp+arg_0]
.text:000023D5                 mov     edx, [ecx+34h]
.text:000023D8                 mov     [eax+38h], edx
.text:000023DB                 mov     eax, [ebp+arg_0]
.text:000023DE                 mov     ecx, [ebp+var_40]
.text:000023E1                 mov     [eax+34h], ecx
.text:000023E4
.text:000023E4 loc_23E4:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+36Bj
.text:000023E4                 cmp     [ebp+var_2C], 1
.text:000023E8                 jnz     short loc_23FF
.text:000023EA                 mov     edx, [ebp+arg_0]
.text:000023ED                 mov     eax, [edx+44h]
.text:000023F0                 mov     ecx, [ebp+arg_0]
.text:000023F3                 mov     edx, _kShortRepNextStates[eax*4]
.text:000023FA                 mov     [ecx+44h], edx
.text:000023FD                 jmp     short loc_244B
.text:000023FF ; ---------------------------------------------------------------------------
.text:000023FF
.text:000023FF loc_23FF:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+448j
.text:000023FF                 mov     eax, [ebp+arg_0]
.text:00002402                 add     eax, 30F34h
.text:00002407                 push    eax
.text:00002408                 mov     ecx, [ebp+arg_0]
.text:0000240B                 xor     edx, edx
.text:0000240D                 cmp     dword ptr [ecx+64h], 0
.text:00002411                 setz    dl
.text:00002414                 push    edx
.text:00002415                 mov     eax, [ebp+var_30]
.text:00002418                 push    eax
.text:00002419                 mov     ecx, [ebp+var_2C]
.text:0000241C                 sub     ecx, 2
.text:0000241F                 push    ecx
.text:00002420                 mov     edx, [ebp+arg_0]
.text:00002423                 add     edx, 98h ; 'ÿ'
.text:00002429                 push    edx
.text:0000242A                 mov     eax, [ebp+arg_0]
.text:0000242D                 add     eax, 374B4h
.text:00002432                 push    eax
.text:00002433                 call    _LenEnc_Encode2@24 ; LenEnc_Encode2(x,x,x,x,x,x)
.text:00002438                 mov     ecx, [ebp+arg_0]
.text:0000243B                 mov     edx, [ecx+44h]
.text:0000243E                 mov     eax, [ebp+arg_0]
.text:00002441                 mov     ecx, _kRepNextStates[edx*4]
.text:00002448                 mov     [eax+44h], ecx
.text:0000244B
.text:0000244B loc_244B:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+45Dj
.text:0000244B                 jmp     loc_2649
.text:00002450 ; ---------------------------------------------------------------------------
.text:00002450
.text:00002450 loc_2450:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+2E9j
.text:00002450                 push    0
.text:00002452                 mov     edx, [ebp+arg_0]
.text:00002455                 mov     eax, [edx+44h]
.text:00002458                 mov     ecx, [ebp+arg_0]
.text:0000245B                 lea     edx, [ecx+eax*2+32788h]
.text:00002462                 push    edx
.text:00002463                 mov     eax, [ebp+arg_0]
.text:00002466                 add     eax, 98h ; 'ÿ'
.text:0000246B                 push    eax
.text:0000246C                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002471                 mov     ecx, [ebp+arg_0]
.text:00002474                 mov     edx, [ecx+44h]
.text:00002477                 mov     eax, [ebp+arg_0]
.text:0000247A                 mov     ecx, _kMatchNextStates[edx*4]
.text:00002481                 mov     [eax+44h], ecx
.text:00002484                 mov     edx, [ebp+arg_0]
.text:00002487                 add     edx, 30F34h
.text:0000248D                 push    edx
.text:0000248E                 mov     eax, [ebp+arg_0]
.text:00002491                 xor     ecx, ecx
.text:00002493                 cmp     dword ptr [eax+64h], 0
.text:00002497                 setz    cl
.text:0000249A                 push    ecx
.text:0000249B                 mov     edx, [ebp+var_30]
.text:0000249E                 push    edx
.text:0000249F                 mov     eax, [ebp+var_2C]
.text:000024A2                 sub     eax, 2
.text:000024A5                 push    eax
.text:000024A6                 mov     ecx, [ebp+arg_0]
.text:000024A9                 add     ecx, 98h ; 'ÿ'
.text:000024AF                 push    ecx
.text:000024B0                 mov     edx, [ebp+arg_0]
.text:000024B3                 add     edx, 32C6Ch
.text:000024B9                 push    edx
.text:000024BA                 call    _LenEnc_Encode2@24 ; LenEnc_Encode2(x,x,x,x,x,x)
.text:000024BF                 mov     eax, [ebp+var_24]
.text:000024C2                 sub     eax, 4
.text:000024C5                 mov     [ebp+var_24], eax
.text:000024C8                 cmp     [ebp+var_24], 80h ; 'Ç'
.text:000024CF                 jnb     short loc_24E3
.text:000024D1                 mov     ecx, [ebp+arg_0]
.text:000024D4                 add     ecx, [ebp+var_24]
.text:000024D7                 movzx   edx, byte ptr [ecx+30734h]
.text:000024DE                 mov     [ebp+var_44], edx
.text:000024E1                 jmp     short loc_2511
.text:000024E3 ; ---------------------------------------------------------------------------
.text:000024E3
.text:000024E3 loc_24E3:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+52Fj
.text:000024E3                 cmp     [ebp+var_24], 20000h
.text:000024EA                 sbb     eax, eax
.text:000024EC                 and     eax, 0FFFFFFF6h
.text:000024EF                 add     eax, 10h
.text:000024F2                 mov     [ebp+var_48], eax
.text:000024F5                 mov     edx, [ebp+var_24]
.text:000024F8                 mov     ecx, [ebp+var_48]
.text:000024FB                 shr     edx, cl
.text:000024FD                 mov     eax, [ebp+arg_0]
.text:00002500                 movzx   ecx, byte ptr [eax+edx+30734h]
.text:00002508                 mov     edx, [ebp+var_48]
.text:0000250B                 lea     eax, [ecx+edx*2]
.text:0000250E                 mov     [ebp+var_44], eax
.text:00002511
.text:00002511 loc_2511:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+541j
.text:00002511                 cmp     [ebp+var_2C], 5
.text:00002515                 jnb     short loc_2522
.text:00002517                 mov     ecx, [ebp+var_2C]
.text:0000251A                 sub     ecx, 2
.text:0000251D                 mov     [ebp+var_60], ecx
.text:00002520                 jmp     short loc_2529
.text:00002522 ; ---------------------------------------------------------------------------
.text:00002522
.text:00002522 loc_2522:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+575j
.text:00002522                 mov     [ebp+var_60], 3
.text:00002529
.text:00002529 loc_2529:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+580j
.text:00002529                 mov     edx, [ebp+var_44]
.text:0000252C                 push    edx
.text:0000252D                 push    6
.text:0000252F                 mov     eax, [ebp+var_60]
.text:00002532                 shl     eax, 7
.text:00002535                 mov     ecx, [ebp+arg_0]
.text:00002538                 lea     edx, [ecx+eax+32968h]
.text:0000253F                 push    edx
.text:00002540                 mov     eax, [ebp+arg_0]
.text:00002543                 add     eax, 98h ; 'ÿ'
.text:00002548                 push    eax
.text:00002549                 call    _RcTree_Encode@16 ; RcTree_Encode(x,x,x,x)
.text:0000254E                 cmp     [ebp+var_44], 4
.text:00002552                 jb      loc_2607
.text:00002558                 mov     ecx, [ebp+var_44]
.text:0000255B                 shr     ecx, 1
.text:0000255D                 sub     ecx, 1
.text:00002560                 mov     [ebp+var_4C], ecx
.text:00002563                 mov     edx, [ebp+var_44]
.text:00002566                 and     edx, 1
.text:00002569                 or      edx, 2
.text:0000256C                 mov     ecx, [ebp+var_4C]
.text:0000256F                 shl     edx, cl
.text:00002571                 mov     [ebp+var_50], edx
.text:00002574                 mov     eax, [ebp+var_24]
.text:00002577                 sub     eax, [ebp+var_50]
.text:0000257A                 mov     [ebp+var_54], eax
.text:0000257D                 cmp     [ebp+var_44], 0Eh
.text:00002581                 jnb     short loc_25B4
.text:00002583                 mov     ecx, [ebp+var_54]
.text:00002586                 push    ecx
.text:00002587                 mov     edx, [ebp+var_4C]
.text:0000258A                 push    edx
.text:0000258B                 mov     eax, [ebp+var_50]
.text:0000258E                 mov     ecx, [ebp+arg_0]
.text:00002591                 lea     edx, [ecx+eax*2+32B68h]
.text:00002598                 mov     eax, [ebp+var_44]
.text:0000259B                 shl     eax, 1
.text:0000259D                 sub     edx, eax
.text:0000259F                 sub     edx, 2
.text:000025A2                 push    edx
.text:000025A3                 mov     ecx, [ebp+arg_0]
.text:000025A6                 add     ecx, 98h ; 'ÿ'
.text:000025AC                 push    ecx
.text:000025AD                 call    _RcTree_ReverseEncode@16 ; RcTree_ReverseEncode(x,x,x,x)
.text:000025B2                 jmp     short loc_2607
.text:000025B4 ; ---------------------------------------------------------------------------
.text:000025B4
.text:000025B4 loc_25B4:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+5E1j
.text:000025B4                 mov     edx, [ebp+var_4C]
.text:000025B7                 sub     edx, 4
.text:000025BA                 push    edx
.text:000025BB                 mov     eax, [ebp+var_54]
.text:000025BE                 shr     eax, 4
.text:000025C1                 push    eax
.text:000025C2                 mov     ecx, [ebp+arg_0]
.text:000025C5                 add     ecx, 98h ; 'ÿ'
.text:000025CB                 push    ecx
.text:000025CC                 call    _RangeEnc_EncodeDirectBits@12 ; RangeEnc_EncodeDirectBits(x,x,x)
.text:000025D1                 mov     edx, [ebp+var_54]
.text:000025D4                 and     edx, 0Fh
.text:000025D7                 push    edx
.text:000025D8                 push    4
.text:000025DA                 mov     eax, [ebp+arg_0]
.text:000025DD                 add     eax, 32C4Ch
.text:000025E2                 push    eax
.text:000025E3                 mov     ecx, [ebp+arg_0]
.text:000025E6                 add     ecx, 98h ; 'ÿ'
.text:000025EC                 push    ecx
.text:000025ED                 call    _RcTree_ReverseEncode@16 ; RcTree_ReverseEncode(x,x,x,x)
.text:000025F2                 mov     edx, [ebp+arg_0]
.text:000025F5                 mov     eax, [edx+84h]
.text:000025FB                 add     eax, 1
.text:000025FE                 mov     ecx, [ebp+arg_0]
.text:00002601                 mov     [ecx+84h], eax
.text:00002607
.text:00002607 loc_2607:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+5B2j
.text:00002607                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+612j
.text:00002607                 mov     edx, [ebp+arg_0]
.text:0000260A                 mov     eax, [ebp+arg_0]
.text:0000260D                 mov     ecx, [eax+3Ch]
.text:00002610                 mov     [edx+40h], ecx
.text:00002613                 mov     edx, [ebp+arg_0]
.text:00002616                 mov     eax, [ebp+arg_0]
.text:00002619                 mov     ecx, [eax+38h]
.text:0000261C                 mov     [edx+3Ch], ecx
.text:0000261F                 mov     edx, [ebp+arg_0]
.text:00002622                 mov     eax, [ebp+arg_0]
.text:00002625                 mov     ecx, [eax+34h]
.text:00002628                 mov     [edx+38h], ecx
.text:0000262B                 mov     edx, [ebp+arg_0]
.text:0000262E                 mov     eax, [ebp+var_24]
.text:00002631                 mov     [edx+34h], eax
.text:00002634                 mov     ecx, [ebp+arg_0]
.text:00002637                 mov     edx, [ecx+80h]
.text:0000263D                 add     edx, 1
.text:00002640                 mov     eax, [ebp+arg_0]
.text:00002643                 mov     [eax+80h], edx
.text:00002649
.text:00002649 loc_2649:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+2B5j
.text:00002649                                         ; LzmaEnc_CodeOneBlock(x,x,x,x):loc_244Bj
.text:00002649                 mov     ecx, [ebp+arg_0]
.text:0000264C                 mov     edx, [ecx+30h]
.text:0000264F                 sub     edx, [ebp+var_2C]
.text:00002652                 mov     eax, [ebp+arg_0]
.text:00002655                 mov     [eax+30h], edx
.text:00002658                 mov     ecx, [ebp+var_4]
.text:0000265B                 add     ecx, [ebp+var_2C]
.text:0000265E                 mov     [ebp+var_4], ecx
.text:00002661                 mov     edx, [ebp+arg_0]
.text:00002664                 cmp     dword ptr [edx+30h], 0
.text:00002668                 jnz     loc_2771
.text:0000266E                 mov     eax, [ebp+arg_0]
.text:00002671                 cmp     dword ptr [eax+64h], 0
.text:00002675                 jnz     short loc_26A4
.text:00002677                 mov     ecx, [ebp+arg_0]
.text:0000267A                 cmp     dword ptr [ecx+80h], 80h ; 'Ç'
.text:00002684                 jb      short loc_268F
.text:00002686                 mov     edx, [ebp+arg_0]
.text:00002689                 push    edx
.text:0000268A                 call    _FillDistancesPrices@4 ; FillDistancesPrices(x)
.text:0000268F
.text:0000268F loc_268F:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+6E4j
.text:0000268F                 mov     eax, [ebp+arg_0]
.text:00002692                 cmp     dword ptr [eax+84h], 10h
.text:00002699                 jb      short loc_26A4
.text:0000269B                 mov     ecx, [ebp+arg_0]
.text:0000269E                 push    ecx
.text:0000269F                 call    _FillAlignPrices@4 ; FillAlignPrices(x)
.text:000026A4
.text:000026A4 loc_26A4:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+6D5j
.text:000026A4                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+6F9j
.text:000026A4                 mov     esi, esp
.text:000026A6                 mov     edx, [ebp+arg_0]
.text:000026A9                 mov     eax, [edx]
.text:000026AB                 push    eax
.text:000026AC                 mov     ecx, [ebp+arg_0]
.text:000026AF                 mov     edx, [ecx+8]
.text:000026B2                 call    edx
.text:000026B4                 cmp     esi, esp
.text:000026B6                 call    __RTC_CheckEsp
.text:000026BB                 test    eax, eax
.text:000026BD                 jnz     short loc_26C4
.text:000026BF                 jmp     loc_2776
.text:000026C4 ; ---------------------------------------------------------------------------
.text:000026C4
.text:000026C4 loc_26C4:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+71Dj
.text:000026C4                 mov     eax, [ebp+var_4]
.text:000026C7                 sub     eax, [ebp+var_8]
.text:000026CA                 mov     [ebp+var_58], eax
.text:000026CD                 cmp     [ebp+arg_4], 0
.text:000026D1                 jz      short loc_2743
.text:000026D3                 mov     ecx, [ebp+var_58]
.text:000026D6                 add     ecx, 112Ch
.text:000026DC                 cmp     ecx, [ebp+arg_C]
.text:000026DF                 jnb     short loc_273F
.text:000026E1                 mov     edx, [ebp+arg_0]
.text:000026E4                 mov     eax, [ebp+arg_0]
.text:000026E7                 mov     ecx, [edx+0B0h]
.text:000026ED                 sub     ecx, [eax+0B8h]
.text:000026F3                 mov     eax, ecx
.text:000026F5                 cdq
.text:000026F6                 mov     ecx, [ebp+arg_0]
.text:000026F9                 add     eax, [ecx+0C0h]
.text:000026FF                 adc     edx, [ecx+0C4h]
.text:00002705                 mov     ecx, [ebp+arg_0]
.text:00002708                 add     eax, [ecx+0A8h]
.text:0000270E                 adc     edx, [ecx+0ACh]
.text:00002714                 add     eax, 2000h
.text:00002719                 adc     edx, 0
.text:0000271C                 mov     ecx, [ebp+arg_8]
.text:0000271F                 xor     esi, esi
.text:00002721                 mov     [ebp+var_68], eax
.text:00002724                 mov     [ebp+var_64], edx
.text:00002727                 mov     [ebp+var_70], ecx
.text:0000272A                 mov     [ebp+var_6C], esi
.text:0000272D                 mov     edx, [ebp+var_64]
.text:00002730                 cmp     edx, [ebp+var_6C]
.text:00002733                 jb      short loc_2741
.text:00002735                 ja      short loc_273F
.text:00002737                 mov     eax, [ebp+var_68]
.text:0000273A                 cmp     eax, [ebp+var_70]
.text:0000273D                 jb      short loc_2741
.text:0000273F
.text:0000273F loc_273F:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+73Fj
.text:0000273F                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+795j
.text:0000273F                 jmp     short loc_2776
.text:00002741 ; ---------------------------------------------------------------------------
.text:00002741
.text:00002741 loc_2741:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+793j
.text:00002741                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+79Dj
.text:00002741                 jmp     short loc_2771
.text:00002743 ; ---------------------------------------------------------------------------
.text:00002743
.text:00002743 loc_2743:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+731j
.text:00002743                 cmp     [ebp+var_58], 20000h
.text:0000274A                 jb      short loc_2771
.text:0000274C                 mov     ecx, [ebp+var_4]
.text:0000274F                 sub     ecx, [ebp+var_8]
.text:00002752                 xor     edx, edx
.text:00002754                 mov     eax, [ebp+arg_0]
.text:00002757                 add     ecx, [eax+78h]
.text:0000275A                 adc     edx, [eax+7Ch]
.text:0000275D                 mov     eax, [ebp+arg_0]
.text:00002760                 mov     [eax+78h], ecx
.text:00002763                 mov     [eax+7Ch], edx
.text:00002766                 mov     ecx, [ebp+arg_0]
.text:00002769                 push    ecx
.text:0000276A                 call    _CheckErrors@4  ; CheckErrors(x)
.text:0000276F                 jmp     short loc_279D
.text:00002771 ; ---------------------------------------------------------------------------
.text:00002771
.text:00002771 loc_2771:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+6C8j
.text:00002771                                         ; LzmaEnc_CodeOneBlock(x,x,x,x):loc_2741j ...
.text:00002771                 jmp     loc_211E
.text:00002776 ; ---------------------------------------------------------------------------
.text:00002776
.text:00002776 loc_2776:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+178j
.text:00002776                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+71Fj ...
.text:00002776                 mov     edx, [ebp+var_4]
.text:00002779                 sub     edx, [ebp+var_8]
.text:0000277C                 xor     eax, eax
.text:0000277E                 mov     ecx, [ebp+arg_0]
.text:00002781                 add     edx, [ecx+78h]
.text:00002784                 adc     eax, [ecx+7Ch]
.text:00002787                 mov     ecx, [ebp+arg_0]
.text:0000278A                 mov     [ecx+78h], edx
.text:0000278D                 mov     [ecx+7Ch], eax
.text:00002790                 mov     edx, [ebp+var_4]
.text:00002793                 push    edx
.text:00002794                 mov     eax, [ebp+arg_0]
.text:00002797                 push    eax
.text:00002798                 call    _Flush@8        ; Flush(x,x)
.text:0000279D
.text:0000279D loc_279D:                               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+53j
.text:0000279D                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+6Dj ...
.text:0000279D                 push    edx
.text:0000279E                 mov     ecx, ebp
.text:000027A0                 push    eax
.text:000027A1                 lea     edx, $LN47
.text:000027A7                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000027AC                 pop     eax
.text:000027AD                 pop     edx
.text:000027AE                 pop     edi
.text:000027AF                 pop     esi
.text:000027B0                 add     esp, 70h
.text:000027B3                 cmp     ebp, esp
.text:000027B5                 call    __RTC_CheckEsp
.text:000027BA                 mov     esp, ebp
.text:000027BC                 pop     ebp
.text:000027BD                 retn    10h
.text:000027BD _LzmaEnc_CodeOneBlock@16 endp
.text:000027BD
.text:000027BD ; ---------------------------------------------------------------------------
.text:000027C0 $LN47           dd 2                    ; DATA XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+801o
.text:000027C4                 dd offset $LN46
.text:000027C8 $LN46           dd 0FFFFFFECh, 4        ; DATA XREF: .text:000027C4o
.text:000027D0                 dd offset $LN44         ; "numPairs"
.text:000027D4                 dd 0FFFFFFDCh, 4
.text:000027DC                 dd offset $LN45
.text:000027E0 $LN45           dd 736F70h              ; DATA XREF: .text:000027DCo
.text:000027E4 $LN44           db 'numPairs',0         ; DATA XREF: .text:000027D0o
.text:000027ED                 align 10h
.text:000027F0
.text:000027F0 ; =============== S U B R O U T I N E =======================================
.text:000027F0
.text:000027F0 ; Attributes: bp-based frame
.text:000027F0
.text:000027F0 ; __stdcall RangeEnc_EncodeDirectBits(x, x, x)
.text:000027F0 _RangeEnc_EncodeDirectBits@12 proc near ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+62Cp
.text:000027F0                                         ; WriteEndMarker(x,x)+100p
.text:000027F0
.text:000027F0 arg_0           = dword ptr  8
.text:000027F0 arg_4           = dword ptr  0Ch
.text:000027F0 arg_8           = dword ptr  10h
.text:000027F0
.text:000027F0                 push    ebp
.text:000027F1                 mov     ebp, esp
.text:000027F3
.text:000027F3 loc_27F3:                               ; CODE XREF: RangeEnc_EncodeDirectBits(x,x,x)+64j
.text:000027F3                 mov     eax, [ebp+arg_0]
.text:000027F6                 mov     ecx, [eax]
.text:000027F8                 shr     ecx, 1
.text:000027FA                 mov     edx, [ebp+arg_0]
.text:000027FD                 mov     [edx], ecx
.text:000027FF                 mov     eax, [ebp+arg_8]
.text:00002802                 sub     eax, 1
.text:00002805                 mov     [ebp+arg_8], eax
.text:00002808                 mov     edx, [ebp+arg_4]
.text:0000280B                 mov     ecx, [ebp+arg_8]
.text:0000280E                 shr     edx, cl
.text:00002810                 and     edx, 1
.text:00002813                 xor     eax, eax
.text:00002815                 sub     eax, edx
.text:00002817                 mov     ecx, [ebp+arg_0]
.text:0000281A                 and     eax, [ecx]
.text:0000281C                 xor     edx, edx
.text:0000281E                 mov     ecx, [ebp+arg_0]
.text:00002821                 add     eax, [ecx+8]
.text:00002824                 adc     edx, [ecx+0Ch]
.text:00002827                 mov     ecx, [ebp+arg_0]
.text:0000282A                 mov     [ecx+8], eax
.text:0000282D                 mov     [ecx+0Ch], edx
.text:00002830                 mov     edx, [ebp+arg_0]
.text:00002833                 cmp     dword ptr [edx], 1000000h
.text:00002839                 jnb     short loc_2850
.text:0000283B                 mov     eax, [ebp+arg_0]
.text:0000283E                 mov     ecx, [eax]
.text:00002840                 shl     ecx, 8
.text:00002843                 mov     edx, [ebp+arg_0]
.text:00002846                 mov     [edx], ecx
.text:00002848                 mov     ecx, [ebp+arg_0]
.text:0000284B                 call    @RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:00002850
.text:00002850 loc_2850:                               ; CODE XREF: RangeEnc_EncodeDirectBits(x,x,x)+49j
.text:00002850                 cmp     [ebp+arg_8], 0
.text:00002854                 jnz     short loc_27F3
.text:00002856                 cmp     ebp, esp
.text:00002858                 call    __RTC_CheckEsp
.text:0000285D                 pop     ebp
.text:0000285E                 retn    0Ch
.text:0000285E _RangeEnc_EncodeDirectBits@12 endp
.text:0000285E
.text:0000285E ; ---------------------------------------------------------------------------
.text:00002861                 align 10h
.text:00002870
.text:00002870 ; =============== S U B R O U T I N E =======================================
.text:00002870
.text:00002870 ; Attributes: bp-based frame
.text:00002870
.text:00002870 ; __fastcall RangeEnc_ShiftLow(x)
.text:00002870 @RangeEnc_ShiftLow@4 proc near          ; CODE XREF: RangeEnc_EncodeDirectBits(x,x,x)+5Bp
.text:00002870                                         ; RangeEnc_EncodeBit(x,x,x)+A4p ...
.text:00002870
.text:00002870 var_14          = dword ptr -14h
.text:00002870 var_10          = dword ptr -10h
.text:00002870 var_C           = dword ptr -0Ch
.text:00002870 var_8           = dword ptr -8
.text:00002870 var_4           = dword ptr -4
.text:00002870
.text:00002870                 push    ebp
.text:00002871                 mov     ebp, esp
.text:00002873                 sub     esp, 14h
.text:00002876                 push    ebx
.text:00002877                 mov     eax, 0CCCCCCCCh
.text:0000287C                 mov     [ebp+var_14], eax
.text:0000287F                 mov     [ebp+var_10], eax
.text:00002882                 mov     [ebp+var_C], eax
.text:00002885                 mov     [ebp+var_8], eax
.text:00002888                 mov     [ebp+var_4], eax
.text:0000288B                 mov     [ebp+var_4], ecx
.text:0000288E                 mov     eax, [ebp+var_4]
.text:00002891                 cmp     dword ptr [eax+8], 0FF000000h
.text:00002898                 jb      short loc_28B2
.text:0000289A                 mov     ecx, [ebp+var_4]
.text:0000289D                 mov     eax, [ecx+8]
.text:000028A0                 mov     edx, [ecx+0Ch]
.text:000028A3                 mov     cl, 20h ; ' '
.text:000028A5                 call    __aullshr
.text:000028AA                 test    eax, eax
.text:000028AC                 jz      loc_2947
.text:000028B2
.text:000028B2 loc_28B2:                               ; CODE XREF: RangeEnc_ShiftLow(x)+28j
.text:000028B2                 mov     edx, [ebp+var_4]
.text:000028B5                 mov     al, [edx+4]
.text:000028B8                 mov     byte ptr [ebp+var_8+3], al
.text:000028BB
.text:000028BB loc_28BB:                               ; CODE XREF: RangeEnc_ShiftLow(x)+C6j
.text:000028BB                 mov     ecx, [ebp+var_4]
.text:000028BE                 mov     edx, [ecx+18h]
.text:000028C1                 mov     [ebp+var_C], edx
.text:000028C4                 movzx   ebx, byte ptr [ebp+var_8+3]
.text:000028C8                 mov     ecx, [ebp+var_4]
.text:000028CB                 mov     eax, [ecx+8]
.text:000028CE                 mov     edx, [ecx+0Ch]
.text:000028D1                 mov     cl, 20h ; ' '
.text:000028D3                 call    __aullshr
.text:000028D8                 movzx   edx, al
.text:000028DB                 add     ebx, edx
.text:000028DD                 mov     eax, [ebp+var_C]
.text:000028E0                 mov     [eax], bl
.text:000028E2                 mov     ecx, [ebp+var_C]
.text:000028E5                 add     ecx, 1
.text:000028E8                 mov     [ebp+var_C], ecx
.text:000028EB                 mov     edx, [ebp+var_4]
.text:000028EE                 mov     eax, [ebp+var_C]
.text:000028F1                 mov     [edx+18h], eax
.text:000028F4                 mov     ecx, [ebp+var_4]
.text:000028F7                 mov     edx, [ebp+var_C]
.text:000028FA                 cmp     edx, [ecx+1Ch]
.text:000028FD                 jnz     short loc_2908
.text:000028FF                 mov     eax, [ebp+var_4]
.text:00002902                 push    eax
.text:00002903                 call    _RangeEnc_FlushStream@4 ; RangeEnc_FlushStream(x)
.text:00002908
.text:00002908 loc_2908:                               ; CODE XREF: RangeEnc_ShiftLow(x)+8Dj
.text:00002908                 mov     byte ptr [ebp+var_8+3], 0FFh
.text:0000290C                 mov     ecx, [ebp+var_4]
.text:0000290F                 mov     edx, [ecx+10h]
.text:00002912                 sub     edx, 1
.text:00002915                 mov     [ebp+var_14], edx
.text:00002918                 mov     eax, [ecx+14h]
.text:0000291B                 sbb     eax, 0
.text:0000291E                 mov     [ebp+var_10], eax
.text:00002921                 mov     ecx, [ebp+var_4]
.text:00002924                 mov     edx, [ebp+var_14]
.text:00002927                 mov     [ecx+10h], edx
.text:0000292A                 mov     eax, [ebp+var_10]
.text:0000292D                 mov     [ecx+14h], eax
.text:00002930                 mov     ecx, [ebp+var_14]
.text:00002933                 or      ecx, [ebp+var_10]
.text:00002936                 jnz     short loc_28BB
.text:00002938                 mov     edx, [ebp+var_4]
.text:0000293B                 mov     eax, [edx+8]
.text:0000293E                 shr     eax, 18h
.text:00002941                 mov     ecx, [ebp+var_4]
.text:00002944                 mov     [ecx+4], al
.text:00002947
.text:00002947 loc_2947:                               ; CODE XREF: RangeEnc_ShiftLow(x)+3Cj
.text:00002947                 mov     edx, [ebp+var_4]
.text:0000294A                 mov     eax, [edx+10h]
.text:0000294D                 add     eax, 1
.text:00002950                 mov     ecx, [edx+14h]
.text:00002953                 adc     ecx, 0
.text:00002956                 mov     edx, [ebp+var_4]
.text:00002959                 mov     [edx+10h], eax
.text:0000295C                 mov     [edx+14h], ecx
.text:0000295F                 mov     eax, [ebp+var_4]
.text:00002962                 mov     ecx, [eax+8]
.text:00002965                 shl     ecx, 8
.text:00002968                 xor     edx, edx
.text:0000296A                 mov     eax, [ebp+var_4]
.text:0000296D                 mov     [eax+8], ecx
.text:00002970                 mov     [eax+0Ch], edx
.text:00002973                 pop     ebx
.text:00002974                 add     esp, 14h
.text:00002977                 cmp     ebp, esp
.text:00002979                 call    __RTC_CheckEsp
.text:0000297E                 mov     esp, ebp
.text:00002980                 pop     ebp
.text:00002981                 retn
.text:00002981 @RangeEnc_ShiftLow@4 endp
.text:00002981
.text:00002981 ; ---------------------------------------------------------------------------
.text:00002982                 align 10h
.text:00002990
.text:00002990 ; =============== S U B R O U T I N E =======================================
.text:00002990
.text:00002990 ; Attributes: bp-based frame
.text:00002990
.text:00002990 ; __stdcall RangeEnc_FlushStream(x)
.text:00002990 _RangeEnc_FlushStream@4 proc near       ; CODE XREF: RangeEnc_ShiftLow(x)+93p
.text:00002990                                         ; Flush(x,x)+41p
.text:00002990
.text:00002990 var_4           = dword ptr -4
.text:00002990 arg_0           = dword ptr  8
.text:00002990
.text:00002990                 push    ebp
.text:00002991                 mov     ebp, esp
.text:00002993                 push    ecx
.text:00002994                 push    esi
.text:00002995                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000299C                 mov     eax, [ebp+arg_0]
.text:0000299F                 cmp     dword ptr [eax+30h], 0
.text:000029A3                 jz      short loc_29A7
.text:000029A5                 jmp     short loc_2A0D
.text:000029A7 ; ---------------------------------------------------------------------------
.text:000029A7
.text:000029A7 loc_29A7:                               ; CODE XREF: RangeEnc_FlushStream(x)+13j
.text:000029A7                 mov     ecx, [ebp+arg_0]
.text:000029AA                 mov     edx, [ebp+arg_0]
.text:000029AD                 mov     eax, [ecx+18h]
.text:000029B0                 sub     eax, [edx+20h]
.text:000029B3                 mov     [ebp+var_4], eax
.text:000029B6                 mov     esi, esp
.text:000029B8                 mov     ecx, [ebp+var_4]
.text:000029BB                 push    ecx
.text:000029BC                 mov     edx, [ebp+arg_0]
.text:000029BF                 mov     eax, [edx+20h]
.text:000029C2                 push    eax
.text:000029C3                 mov     ecx, [ebp+arg_0]
.text:000029C6                 mov     edx, [ecx+24h]
.text:000029C9                 push    edx
.text:000029CA                 mov     eax, [ebp+arg_0]
.text:000029CD                 mov     ecx, [eax+24h]
.text:000029D0                 mov     edx, [ecx]
.text:000029D2                 call    edx
.text:000029D4                 cmp     esi, esp
.text:000029D6                 call    __RTC_CheckEsp
.text:000029DB                 cmp     [ebp+var_4], eax
.text:000029DE                 jz      short loc_29EA
.text:000029E0                 mov     eax, [ebp+arg_0]
.text:000029E3                 mov     dword ptr [eax+30h], 9
.text:000029EA
.text:000029EA loc_29EA:                               ; CODE XREF: RangeEnc_FlushStream(x)+4Ej
.text:000029EA                 mov     ecx, [ebp+var_4]
.text:000029ED                 xor     edx, edx
.text:000029EF                 mov     eax, [ebp+arg_0]
.text:000029F2                 add     ecx, [eax+28h]
.text:000029F5                 adc     edx, [eax+2Ch]
.text:000029F8                 mov     eax, [ebp+arg_0]
.text:000029FB                 mov     [eax+28h], ecx
.text:000029FE                 mov     [eax+2Ch], edx
.text:00002A01                 mov     ecx, [ebp+arg_0]
.text:00002A04                 mov     edx, [ebp+arg_0]
.text:00002A07                 mov     eax, [edx+20h]
.text:00002A0A                 mov     [ecx+18h], eax
.text:00002A0D
.text:00002A0D loc_2A0D:                               ; CODE XREF: RangeEnc_FlushStream(x)+15j
.text:00002A0D                 pop     esi
.text:00002A0E                 add     esp, 4
.text:00002A11                 cmp     ebp, esp
.text:00002A13                 call    __RTC_CheckEsp
.text:00002A18                 mov     esp, ebp
.text:00002A1A                 pop     ebp
.text:00002A1B                 retn    4
.text:00002A1B _RangeEnc_FlushStream@4 endp
.text:00002A1B
.text:00002A1B ; ---------------------------------------------------------------------------
.text:00002A1E                 align 10h
.text:00002A20
.text:00002A20 ; =============== S U B R O U T I N E =======================================
.text:00002A20
.text:00002A20 ; Attributes: bp-based frame
.text:00002A20
.text:00002A20 ; __stdcall RangeEnc_EncodeBit(x, x, x)
.text:00002A20 _RangeEnc_EncodeBit@12 proc near        ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+F3p
.text:00002A20                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+1F3p ...
.text:00002A20
.text:00002A20 var_8           = dword ptr -8
.text:00002A20 var_4           = dword ptr -4
.text:00002A20 arg_0           = dword ptr  8
.text:00002A20 arg_4           = dword ptr  0Ch
.text:00002A20 arg_8           = dword ptr  10h
.text:00002A20
.text:00002A20                 push    ebp
.text:00002A21                 mov     ebp, esp
.text:00002A23                 sub     esp, 8
.text:00002A26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002A2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002A34                 mov     eax, [ebp+arg_4]
.text:00002A37                 movzx   ecx, word ptr [eax]
.text:00002A3A                 mov     [ebp+var_4], ecx
.text:00002A3D                 mov     edx, [ebp+arg_0]
.text:00002A40                 mov     eax, [edx]
.text:00002A42                 shr     eax, 0Bh
.text:00002A45                 imul    eax, [ebp+var_4]
.text:00002A49                 mov     [ebp+var_8], eax
.text:00002A4C                 cmp     [ebp+arg_8], 0
.text:00002A50                 jnz     short loc_2A6D
.text:00002A52                 mov     ecx, [ebp+arg_0]
.text:00002A55                 mov     edx, [ebp+var_8]
.text:00002A58                 mov     [ecx], edx
.text:00002A5A                 mov     eax, 800h
.text:00002A5F                 sub     eax, [ebp+var_4]
.text:00002A62                 shr     eax, 5
.text:00002A65                 add     eax, [ebp+var_4]
.text:00002A68                 mov     [ebp+var_4], eax
.text:00002A6B                 jmp     short loc_2A9F
.text:00002A6D ; ---------------------------------------------------------------------------
.text:00002A6D
.text:00002A6D loc_2A6D:                               ; CODE XREF: RangeEnc_EncodeBit(x,x,x)+30j
.text:00002A6D                 mov     ecx, [ebp+var_8]
.text:00002A70                 xor     edx, edx
.text:00002A72                 mov     eax, [ebp+arg_0]
.text:00002A75                 add     ecx, [eax+8]
.text:00002A78                 adc     edx, [eax+0Ch]
.text:00002A7B                 mov     eax, [ebp+arg_0]
.text:00002A7E                 mov     [eax+8], ecx
.text:00002A81                 mov     [eax+0Ch], edx
.text:00002A84                 mov     ecx, [ebp+arg_0]
.text:00002A87                 mov     edx, [ecx]
.text:00002A89                 sub     edx, [ebp+var_8]
.text:00002A8C                 mov     eax, [ebp+arg_0]
.text:00002A8F                 mov     [eax], edx
.text:00002A91                 mov     ecx, [ebp+var_4]
.text:00002A94                 shr     ecx, 5
.text:00002A97                 mov     edx, [ebp+var_4]
.text:00002A9A                 sub     edx, ecx
.text:00002A9C                 mov     [ebp+var_4], edx
.text:00002A9F
.text:00002A9F loc_2A9F:                               ; CODE XREF: RangeEnc_EncodeBit(x,x,x)+4Bj
.text:00002A9F                 mov     eax, [ebp+arg_4]
.text:00002AA2                 mov     cx, word ptr [ebp+var_4]
.text:00002AA6                 mov     [eax], cx
.text:00002AA9                 mov     edx, [ebp+arg_0]
.text:00002AAC                 cmp     dword ptr [edx], 1000000h
.text:00002AB2                 jnb     short loc_2AC9
.text:00002AB4                 mov     eax, [ebp+arg_0]
.text:00002AB7                 mov     ecx, [eax]
.text:00002AB9                 shl     ecx, 8
.text:00002ABC                 mov     edx, [ebp+arg_0]
.text:00002ABF                 mov     [edx], ecx
.text:00002AC1                 mov     ecx, [ebp+arg_0]
.text:00002AC4                 call    @RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:00002AC9
.text:00002AC9 loc_2AC9:                               ; CODE XREF: RangeEnc_EncodeBit(x,x,x)+92j
.text:00002AC9                 add     esp, 8
.text:00002ACC                 cmp     ebp, esp
.text:00002ACE                 call    __RTC_CheckEsp
.text:00002AD3                 mov     esp, ebp
.text:00002AD5                 pop     ebp
.text:00002AD6                 retn    0Ch
.text:00002AD6 _RangeEnc_EncodeBit@12 endp
.text:00002AD6
.text:00002AD6 ; ---------------------------------------------------------------------------
.text:00002AD9                 align 10h
.text:00002AE0
.text:00002AE0 ; =============== S U B R O U T I N E =======================================
.text:00002AE0
.text:00002AE0 ; Attributes: bp-based frame
.text:00002AE0
.text:00002AE0 ; __stdcall LitEnc_Encode(x, x, x)
.text:00002AE0 _LitEnc_Encode@12 proc near             ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+142p
.text:00002AE0                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+276p
.text:00002AE0
.text:00002AE0 arg_0           = dword ptr  8
.text:00002AE0 arg_4           = dword ptr  0Ch
.text:00002AE0 arg_8           = dword ptr  10h
.text:00002AE0
.text:00002AE0                 push    ebp
.text:00002AE1                 mov     ebp, esp
.text:00002AE3                 mov     eax, [ebp+arg_8]
.text:00002AE6                 or      eax, 100h
.text:00002AEB                 mov     [ebp+arg_8], eax
.text:00002AEE
.text:00002AEE loc_2AEE:                               ; CODE XREF: LitEnc_Encode(x,x,x)+3Dj
.text:00002AEE                 mov     ecx, [ebp+arg_8]
.text:00002AF1                 shr     ecx, 7
.text:00002AF4                 and     ecx, 1
.text:00002AF7                 push    ecx
.text:00002AF8                 mov     edx, [ebp+arg_8]
.text:00002AFB                 shr     edx, 8
.text:00002AFE                 mov     eax, [ebp+arg_4]
.text:00002B01                 lea     ecx, [eax+edx*2]
.text:00002B04                 push    ecx
.text:00002B05                 mov     edx, [ebp+arg_0]
.text:00002B08                 push    edx
.text:00002B09                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002B0E                 mov     eax, [ebp+arg_8]
.text:00002B11                 shl     eax, 1
.text:00002B13                 mov     [ebp+arg_8], eax
.text:00002B16                 cmp     [ebp+arg_8], 10000h
.text:00002B1D                 jb      short loc_2AEE
.text:00002B1F                 cmp     ebp, esp
.text:00002B21                 call    __RTC_CheckEsp
.text:00002B26                 pop     ebp
.text:00002B27                 retn    0Ch
.text:00002B27 _LitEnc_Encode@12 endp
.text:00002B27
.text:00002B27 ; ---------------------------------------------------------------------------
.text:00002B2A                 align 10h
.text:00002B30
.text:00002B30 ; =============== S U B R O U T I N E =======================================
.text:00002B30
.text:00002B30 ; Attributes: bp-based frame
.text:00002B30
.text:00002B30 ; __stdcall LitEnc_EncodeMatched(x, x, x, x)
.text:00002B30 _LitEnc_EncodeMatched@16 proc near      ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+29Dp
.text:00002B30
.text:00002B30 var_4           = dword ptr -4
.text:00002B30 arg_0           = dword ptr  8
.text:00002B30 arg_4           = dword ptr  0Ch
.text:00002B30 arg_8           = dword ptr  10h
.text:00002B30 arg_C           = dword ptr  14h
.text:00002B30
.text:00002B30                 push    ebp
.text:00002B31                 mov     ebp, esp
.text:00002B33                 push    ecx
.text:00002B34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002B3B                 mov     [ebp+var_4], 100h
.text:00002B42                 mov     eax, [ebp+arg_8]
.text:00002B45                 or      eax, 100h
.text:00002B4A                 mov     [ebp+arg_8], eax
.text:00002B4D
.text:00002B4D loc_2B4D:                               ; CODE XREF: LitEnc_EncodeMatched(x,x,x,x)+6Dj
.text:00002B4D                 mov     ecx, [ebp+arg_C]
.text:00002B50                 shl     ecx, 1
.text:00002B52                 mov     [ebp+arg_C], ecx
.text:00002B55                 mov     edx, [ebp+arg_8]
.text:00002B58                 shr     edx, 7
.text:00002B5B                 and     edx, 1
.text:00002B5E                 push    edx
.text:00002B5F                 mov     eax, [ebp+arg_C]
.text:00002B62                 and     eax, [ebp+var_4]
.text:00002B65                 add     eax, [ebp+var_4]
.text:00002B68                 mov     ecx, [ebp+arg_8]
.text:00002B6B                 shr     ecx, 8
.text:00002B6E                 add     eax, ecx
.text:00002B70                 mov     edx, [ebp+arg_4]
.text:00002B73                 lea     eax, [edx+eax*2]
.text:00002B76                 push    eax
.text:00002B77                 mov     ecx, [ebp+arg_0]
.text:00002B7A                 push    ecx
.text:00002B7B                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002B80                 mov     edx, [ebp+arg_8]
.text:00002B83                 shl     edx, 1
.text:00002B85                 mov     [ebp+arg_8], edx
.text:00002B88                 mov     eax, [ebp+arg_C]
.text:00002B8B                 xor     eax, [ebp+arg_8]
.text:00002B8E                 not     eax
.text:00002B90                 and     eax, [ebp+var_4]
.text:00002B93                 mov     [ebp+var_4], eax
.text:00002B96                 cmp     [ebp+arg_8], 10000h
.text:00002B9D                 jb      short loc_2B4D
.text:00002B9F                 add     esp, 4
.text:00002BA2                 cmp     ebp, esp
.text:00002BA4                 call    __RTC_CheckEsp
.text:00002BA9                 mov     esp, ebp
.text:00002BAB                 pop     ebp
.text:00002BAC                 retn    10h
.text:00002BAC _LitEnc_EncodeMatched@16 endp
.text:00002BAC
.text:00002BAC ; ---------------------------------------------------------------------------
.text:00002BAF                 align 10h
.text:00002BB0
.text:00002BB0 ; =============== S U B R O U T I N E =======================================
.text:00002BB0
.text:00002BB0 ; Attributes: bp-based frame
.text:00002BB0
.text:00002BB0 ; __stdcall RcTree_Encode(x, x, x, x)
.text:00002BB0 _RcTree_Encode@16 proc near             ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+5A9p
.text:00002BB0                                         ; LenEnc_Encode(x,x,x,x)+30p ...
.text:00002BB0
.text:00002BB0 var_C           = dword ptr -0Ch
.text:00002BB0 var_8           = dword ptr -8
.text:00002BB0 var_4           = dword ptr -4
.text:00002BB0 arg_0           = dword ptr  8
.text:00002BB0 arg_4           = dword ptr  0Ch
.text:00002BB0 arg_8           = dword ptr  10h
.text:00002BB0 arg_C           = dword ptr  14h
.text:00002BB0
.text:00002BB0                 push    ebp
.text:00002BB1                 mov     ebp, esp
.text:00002BB3                 sub     esp, 0Ch
.text:00002BB6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002BBD                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002BC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002BCB                 mov     [ebp+var_4], 1
.text:00002BD2                 mov     eax, [ebp+arg_8]
.text:00002BD5                 mov     [ebp+var_8], eax
.text:00002BD8
.text:00002BD8 loc_2BD8:                               ; CODE XREF: RcTree_Encode(x,x,x,x)+67j
.text:00002BD8                 cmp     [ebp+var_8], 0
.text:00002BDC                 jz      short loc_2C19
.text:00002BDE                 mov     ecx, [ebp+var_8]
.text:00002BE1                 sub     ecx, 1
.text:00002BE4                 mov     [ebp+var_8], ecx
.text:00002BE7                 mov     edx, [ebp+arg_C]
.text:00002BEA                 mov     ecx, [ebp+var_8]
.text:00002BED                 shr     edx, cl
.text:00002BEF                 and     edx, 1
.text:00002BF2                 mov     [ebp+var_C], edx
.text:00002BF5                 mov     eax, [ebp+var_C]
.text:00002BF8                 push    eax
.text:00002BF9                 mov     ecx, [ebp+var_4]
.text:00002BFC                 mov     edx, [ebp+arg_4]
.text:00002BFF                 lea     eax, [edx+ecx*2]
.text:00002C02                 push    eax
.text:00002C03                 mov     ecx, [ebp+arg_0]
.text:00002C06                 push    ecx
.text:00002C07                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002C0C                 mov     edx, [ebp+var_4]
.text:00002C0F                 shl     edx, 1
.text:00002C11                 or      edx, [ebp+var_C]
.text:00002C14                 mov     [ebp+var_4], edx
.text:00002C17                 jmp     short loc_2BD8
.text:00002C19 ; ---------------------------------------------------------------------------
.text:00002C19
.text:00002C19 loc_2C19:                               ; CODE XREF: RcTree_Encode(x,x,x,x)+2Cj
.text:00002C19                 add     esp, 0Ch
.text:00002C1C                 cmp     ebp, esp
.text:00002C1E                 call    __RTC_CheckEsp
.text:00002C23                 mov     esp, ebp
.text:00002C25                 pop     ebp
.text:00002C26                 retn    10h
.text:00002C26 _RcTree_Encode@16 endp
.text:00002C26
.text:00002C26 ; ---------------------------------------------------------------------------
.text:00002C29                 align 10h
.text:00002C30
.text:00002C30 ; =============== S U B R O U T I N E =======================================
.text:00002C30
.text:00002C30 ; Attributes: bp-based frame
.text:00002C30
.text:00002C30 ; __stdcall RcTree_ReverseEncode(x, x, x, x)
.text:00002C30 _RcTree_ReverseEncode@16 proc near      ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+60Dp
.text:00002C30                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+64Dp ...
.text:00002C30
.text:00002C30 var_C           = dword ptr -0Ch
.text:00002C30 var_8           = dword ptr -8
.text:00002C30 var_4           = dword ptr -4
.text:00002C30 arg_0           = dword ptr  8
.text:00002C30 arg_4           = dword ptr  0Ch
.text:00002C30 arg_8           = dword ptr  10h
.text:00002C30 arg_C           = dword ptr  14h
.text:00002C30
.text:00002C30                 push    ebp
.text:00002C31                 mov     ebp, esp
.text:00002C33                 sub     esp, 0Ch
.text:00002C36                 mov     [ebp+var_C], 0CCCCCCCCh
.text:00002C3D                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00002C44                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002C4B                 mov     [ebp+var_4], 1
.text:00002C52                 mov     [ebp+var_8], 0
.text:00002C59                 jmp     short loc_2C64
.text:00002C5B ; ---------------------------------------------------------------------------
.text:00002C5B
.text:00002C5B loc_2C5B:                               ; CODE XREF: RcTree_ReverseEncode(x,x,x,x)+6Fj
.text:00002C5B                 mov     eax, [ebp+var_8]
.text:00002C5E                 add     eax, 1
.text:00002C61                 mov     [ebp+var_8], eax
.text:00002C64
.text:00002C64 loc_2C64:                               ; CODE XREF: RcTree_ReverseEncode(x,x,x,x)+29j
.text:00002C64                 mov     ecx, [ebp+var_8]
.text:00002C67                 cmp     ecx, [ebp+arg_8]
.text:00002C6A                 jge     short loc_2CA1
.text:00002C6C                 mov     edx, [ebp+arg_C]
.text:00002C6F                 and     edx, 1
.text:00002C72                 mov     [ebp+var_C], edx
.text:00002C75                 mov     eax, [ebp+var_C]
.text:00002C78                 push    eax
.text:00002C79                 mov     ecx, [ebp+var_4]
.text:00002C7C                 mov     edx, [ebp+arg_4]
.text:00002C7F                 lea     eax, [edx+ecx*2]
.text:00002C82                 push    eax
.text:00002C83                 mov     ecx, [ebp+arg_0]
.text:00002C86                 push    ecx
.text:00002C87                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002C8C                 mov     edx, [ebp+var_4]
.text:00002C8F                 shl     edx, 1
.text:00002C91                 or      edx, [ebp+var_C]
.text:00002C94                 mov     [ebp+var_4], edx
.text:00002C97                 mov     eax, [ebp+arg_C]
.text:00002C9A                 shr     eax, 1
.text:00002C9C                 mov     [ebp+arg_C], eax
.text:00002C9F                 jmp     short loc_2C5B
.text:00002CA1 ; ---------------------------------------------------------------------------
.text:00002CA1
.text:00002CA1 loc_2CA1:                               ; CODE XREF: RcTree_ReverseEncode(x,x,x,x)+3Aj
.text:00002CA1                 add     esp, 0Ch
.text:00002CA4                 cmp     ebp, esp
.text:00002CA6                 call    __RTC_CheckEsp
.text:00002CAB                 mov     esp, ebp
.text:00002CAD                 pop     ebp
.text:00002CAE                 retn    10h
.text:00002CAE _RcTree_ReverseEncode@16 endp
.text:00002CAE
.text:00002CAE ; ---------------------------------------------------------------------------
.text:00002CB1                 align 10h
.text:00002CC0
.text:00002CC0 ; =============== S U B R O U T I N E =======================================
.text:00002CC0
.text:00002CC0 ; Attributes: bp-based frame
.text:00002CC0
.text:00002CC0 ; __stdcall LenEnc_Encode2(x, x, x, x, x, x)
.text:00002CC0 _LenEnc_Encode2@24 proc near            ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+493p
.text:00002CC0                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+51Ap ...
.text:00002CC0
.text:00002CC0 var_4           = dword ptr -4
.text:00002CC0 arg_0           = dword ptr  8
.text:00002CC0 arg_4           = dword ptr  0Ch
.text:00002CC0 arg_8           = dword ptr  10h
.text:00002CC0 arg_C           = dword ptr  14h
.text:00002CC0 arg_10          = dword ptr  18h
.text:00002CC0 arg_14          = dword ptr  1Ch
.text:00002CC0
.text:00002CC0                 push    ebp
.text:00002CC1                 mov     ebp, esp
.text:00002CC3                 push    ecx
.text:00002CC4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00002CCB                 mov     eax, [ebp+arg_C]
.text:00002CCE                 push    eax
.text:00002CCF                 mov     ecx, [ebp+arg_8]
.text:00002CD2                 push    ecx
.text:00002CD3                 mov     edx, [ebp+arg_4]
.text:00002CD6                 push    edx
.text:00002CD7                 mov     eax, [ebp+arg_0]
.text:00002CDA                 push    eax
.text:00002CDB                 call    _LenEnc_Encode@16 ; LenEnc_Encode(x,x,x,x)
.text:00002CE0                 cmp     [ebp+arg_10], 0
.text:00002CE4                 jz      short loc_2D1E
.text:00002CE6                 mov     ecx, [ebp+arg_C]
.text:00002CE9                 mov     edx, [ebp+arg_0]
.text:00002CEC                 mov     eax, [edx+ecx*4+4808h]
.text:00002CF3                 sub     eax, 1
.text:00002CF6                 mov     [ebp+var_4], eax
.text:00002CF9                 mov     ecx, [ebp+arg_C]
.text:00002CFC                 mov     edx, [ebp+arg_0]
.text:00002CFF                 mov     eax, [ebp+var_4]
.text:00002D02                 mov     [edx+ecx*4+4808h], eax
.text:00002D09                 cmp     [ebp+var_4], 0
.text:00002D0D                 jnz     short loc_2D1E
.text:00002D0F                 mov     ecx, [ebp+arg_14]
.text:00002D12                 push    ecx
.text:00002D13                 mov     edx, [ebp+arg_C]
.text:00002D16                 mov     ecx, [ebp+arg_0]
.text:00002D19                 call    @LenPriceEnc_UpdateTable@12 ; LenPriceEnc_UpdateTable(x,x,x)
.text:00002D1E
.text:00002D1E loc_2D1E:                               ; CODE XREF: LenEnc_Encode2(x,x,x,x,x,x)+24j
.text:00002D1E                                         ; LenEnc_Encode2(x,x,x,x,x,x)+4Dj
.text:00002D1E                 add     esp, 4
.text:00002D21                 cmp     ebp, esp
.text:00002D23                 call    __RTC_CheckEsp
.text:00002D28                 mov     esp, ebp
.text:00002D2A                 pop     ebp
.text:00002D2B                 retn    18h
.text:00002D2B _LenEnc_Encode2@24 endp
.text:00002D2B
.text:00002D2B ; ---------------------------------------------------------------------------
.text:00002D2E                 align 10h
.text:00002D30
.text:00002D30 ; =============== S U B R O U T I N E =======================================
.text:00002D30
.text:00002D30 ; Attributes: bp-based frame
.text:00002D30
.text:00002D30 ; __stdcall LenEnc_Encode(x, x, x, x)
.text:00002D30 _LenEnc_Encode@16 proc near             ; CODE XREF: LenEnc_Encode2(x,x,x,x,x,x)+1Bp
.text:00002D30
.text:00002D30 arg_0           = dword ptr  8
.text:00002D30 arg_4           = dword ptr  0Ch
.text:00002D30 arg_8           = dword ptr  10h
.text:00002D30 arg_C           = dword ptr  14h
.text:00002D30
.text:00002D30                 push    ebp
.text:00002D31                 mov     ebp, esp
.text:00002D33                 cmp     [ebp+arg_8], 8
.text:00002D37                 jnb     short loc_2D67
.text:00002D39                 push    0
.text:00002D3B                 mov     eax, [ebp+arg_0]
.text:00002D3E                 push    eax
.text:00002D3F                 mov     ecx, [ebp+arg_4]
.text:00002D42                 push    ecx
.text:00002D43                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002D48                 mov     edx, [ebp+arg_8]
.text:00002D4B                 push    edx
.text:00002D4C                 push    3
.text:00002D4E                 mov     eax, [ebp+arg_C]
.text:00002D51                 shl     eax, 3
.text:00002D54                 mov     ecx, [ebp+arg_0]
.text:00002D57                 lea     edx, [ecx+eax*2+4]
.text:00002D5B                 push    edx
.text:00002D5C                 mov     eax, [ebp+arg_4]
.text:00002D5F                 push    eax
.text:00002D60                 call    _RcTree_Encode@16 ; RcTree_Encode(x,x,x,x)
.text:00002D65                 jmp     short loc_2DE1
.text:00002D67 ; ---------------------------------------------------------------------------
.text:00002D67
.text:00002D67 loc_2D67:                               ; CODE XREF: LenEnc_Encode(x,x,x,x)+7j
.text:00002D67                 push    1
.text:00002D69                 mov     ecx, [ebp+arg_0]
.text:00002D6C                 push    ecx
.text:00002D6D                 mov     edx, [ebp+arg_4]
.text:00002D70                 push    edx
.text:00002D71                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002D76                 cmp     [ebp+arg_8], 10h
.text:00002D7A                 jnb     short loc_2DB3
.text:00002D7C                 push    0
.text:00002D7E                 mov     eax, [ebp+arg_0]
.text:00002D81                 add     eax, 2
.text:00002D84                 push    eax
.text:00002D85                 mov     ecx, [ebp+arg_4]
.text:00002D88                 push    ecx
.text:00002D89                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002D8E                 mov     edx, [ebp+arg_8]
.text:00002D91                 sub     edx, 8
.text:00002D94                 push    edx
.text:00002D95                 push    3
.text:00002D97                 mov     eax, [ebp+arg_C]
.text:00002D9A                 shl     eax, 3
.text:00002D9D                 mov     ecx, [ebp+arg_0]
.text:00002DA0                 lea     edx, [ecx+eax*2+104h]
.text:00002DA7                 push    edx
.text:00002DA8                 mov     eax, [ebp+arg_4]
.text:00002DAB                 push    eax
.text:00002DAC                 call    _RcTree_Encode@16 ; RcTree_Encode(x,x,x,x)
.text:00002DB1                 jmp     short loc_2DE1
.text:00002DB3 ; ---------------------------------------------------------------------------
.text:00002DB3
.text:00002DB3 loc_2DB3:                               ; CODE XREF: LenEnc_Encode(x,x,x,x)+4Aj
.text:00002DB3                 push    1
.text:00002DB5                 mov     ecx, [ebp+arg_0]
.text:00002DB8                 add     ecx, 2
.text:00002DBB                 push    ecx
.text:00002DBC                 mov     edx, [ebp+arg_4]
.text:00002DBF                 push    edx
.text:00002DC0                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:00002DC5                 mov     eax, [ebp+arg_8]
.text:00002DC8                 sub     eax, 10h
.text:00002DCB                 push    eax
.text:00002DCC                 push    8
.text:00002DCE                 mov     ecx, [ebp+arg_0]
.text:00002DD1                 add     ecx, 204h
.text:00002DD7                 push    ecx
.text:00002DD8                 mov     edx, [ebp+arg_4]
.text:00002DDB                 push    edx
.text:00002DDC                 call    _RcTree_Encode@16 ; RcTree_Encode(x,x,x,x)
.text:00002DE1
.text:00002DE1 loc_2DE1:                               ; CODE XREF: LenEnc_Encode(x,x,x,x)+35j
.text:00002DE1                                         ; LenEnc_Encode(x,x,x,x)+81j
.text:00002DE1                 cmp     ebp, esp
.text:00002DE3                 call    __RTC_CheckEsp
.text:00002DE8                 pop     ebp
.text:00002DE9                 retn    10h
.text:00002DE9 _LenEnc_Encode@16 endp
.text:00002DE9
.text:00002DE9 ; ---------------------------------------------------------------------------
.text:00002DEC                 align 10h
.text:00002DF0
.text:00002DF0 ; =============== S U B R O U T I N E =======================================
.text:00002DF0
.text:00002DF0 ; Attributes: bp-based frame
.text:00002DF0
.text:00002DF0 ; __stdcall ReadMatchDistances(x, x)
.text:00002DF0 _ReadMatchDistances@8 proc near         ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+CEp
.text:00002DF0                                         ; GetOptimum(x,x,x)+9Ep ...
.text:00002DF0
.text:00002DF0 var_1C          = dword ptr -1Ch
.text:00002DF0 var_18          = dword ptr -18h
.text:00002DF0 var_14          = dword ptr -14h
.text:00002DF0 var_10          = dword ptr -10h
.text:00002DF0 var_C           = dword ptr -0Ch
.text:00002DF0 var_8           = dword ptr -8
.text:00002DF0 var_4           = dword ptr -4
.text:00002DF0 arg_0           = dword ptr  8
.text:00002DF0 arg_4           = dword ptr  0Ch
.text:00002DF0
.text:00002DF0                 push    ebp
.text:00002DF1                 mov     ebp, esp
.text:00002DF3                 sub     esp, 1Ch
.text:00002DF6                 push    esi
.text:00002DF7                 mov     eax, 0CCCCCCCCh
.text:00002DFC                 mov     [ebp+var_1C], eax
.text:00002DFF                 mov     [ebp+var_18], eax
.text:00002E02                 mov     [ebp+var_14], eax
.text:00002E05                 mov     [ebp+var_10], eax
.text:00002E08                 mov     [ebp+var_C], eax
.text:00002E0B                 mov     [ebp+var_8], eax
.text:00002E0E                 mov     [ebp+var_4], eax
.text:00002E11                 mov     [ebp+var_4], 0
.text:00002E18                 mov     esi, esp
.text:00002E1A                 mov     eax, [ebp+arg_0]
.text:00002E1D                 mov     ecx, [eax]
.text:00002E1F                 push    ecx
.text:00002E20                 mov     edx, [ebp+arg_0]
.text:00002E23                 mov     eax, [edx+8]
.text:00002E26                 call    eax
.text:00002E28                 cmp     esi, esp
.text:00002E2A                 call    __RTC_CheckEsp
.text:00002E2F                 mov     ecx, [ebp+arg_0]
.text:00002E32                 mov     [ecx+28h], eax
.text:00002E35                 mov     edx, [ebp+arg_0]
.text:00002E38                 add     edx, 31134h
.text:00002E3E                 mov     esi, esp
.text:00002E40                 push    edx
.text:00002E41                 mov     eax, [ebp+arg_0]
.text:00002E44                 mov     ecx, [eax]
.text:00002E46                 push    ecx
.text:00002E47                 mov     edx, [ebp+arg_0]
.text:00002E4A                 mov     eax, [edx+10h]
.text:00002E4D                 call    eax
.text:00002E4F                 cmp     esi, esp
.text:00002E51                 call    __RTC_CheckEsp
.text:00002E56                 mov     [ebp+var_8], eax
.text:00002E59                 cmp     [ebp+var_8], 0
.text:00002E5D                 jbe     loc_2F0E
.text:00002E63                 mov     ecx, [ebp+var_8]
.text:00002E66                 mov     edx, [ebp+arg_0]
.text:00002E69                 mov     eax, [edx+ecx*4+3112Ch]
.text:00002E70                 mov     [ebp+var_4], eax
.text:00002E73                 mov     ecx, [ebp+arg_0]
.text:00002E76                 mov     edx, [ebp+var_4]
.text:00002E79                 cmp     edx, [ecx+2Ch]
.text:00002E7C                 jnz     loc_2F0E
.text:00002E82                 mov     eax, [ebp+arg_0]
.text:00002E85                 mov     ecx, [eax+28h]
.text:00002E88                 mov     [ebp+var_C], ecx
.text:00002E8B                 cmp     [ebp+var_C], 111h
.text:00002E92                 jbe     short loc_2E9B
.text:00002E94                 mov     [ebp+var_C], 111h
.text:00002E9B
.text:00002E9B loc_2E9B:                               ; CODE XREF: ReadMatchDistances(x,x)+A2j
.text:00002E9B                 mov     esi, esp
.text:00002E9D                 mov     edx, [ebp+arg_0]
.text:00002EA0                 mov     eax, [edx]
.text:00002EA2                 push    eax
.text:00002EA3                 mov     ecx, [ebp+arg_0]
.text:00002EA6                 mov     edx, [ecx+0Ch]
.text:00002EA9                 call    edx
.text:00002EAB                 cmp     esi, esp
.text:00002EAD                 call    __RTC_CheckEsp
.text:00002EB2                 sub     eax, 1
.text:00002EB5                 mov     [ebp+var_10], eax
.text:00002EB8                 mov     eax, [ebp+var_10]
.text:00002EBB                 add     eax, [ebp+var_4]
.text:00002EBE                 mov     [ebp+var_14], eax
.text:00002EC1                 mov     ecx, [ebp+var_8]
.text:00002EC4                 mov     edx, [ebp+arg_0]
.text:00002EC7                 or      eax, 0FFFFFFFFh
.text:00002ECA                 sub     eax, [edx+ecx*4+31130h]
.text:00002ED1                 mov     [ebp+var_18], eax
.text:00002ED4                 mov     ecx, [ebp+var_10]
.text:00002ED7                 add     ecx, [ebp+var_C]
.text:00002EDA                 mov     [ebp+var_1C], ecx
.text:00002EDD                 jmp     short loc_2EE8
.text:00002EDF ; ---------------------------------------------------------------------------
.text:00002EDF
.text:00002EDF loc_2EDF:                               ; CODE XREF: ReadMatchDistances(x,x)+113j
.text:00002EDF                 mov     edx, [ebp+var_14]
.text:00002EE2                 add     edx, 1
.text:00002EE5                 mov     [ebp+var_14], edx
.text:00002EE8
.text:00002EE8 loc_2EE8:                               ; CODE XREF: ReadMatchDistances(x,x)+EDj
.text:00002EE8                 mov     eax, [ebp+var_14]
.text:00002EEB                 cmp     eax, [ebp+var_1C]
.text:00002EEE                 jz      short loc_2F05
.text:00002EF0                 mov     ecx, [ebp+var_14]
.text:00002EF3                 movzx   edx, byte ptr [ecx]
.text:00002EF6                 mov     eax, [ebp+var_14]
.text:00002EF9                 add     eax, [ebp+var_18]
.text:00002EFC                 movzx   ecx, byte ptr [eax]
.text:00002EFF                 cmp     edx, ecx
.text:00002F01                 jnz     short loc_2F05
.text:00002F03                 jmp     short loc_2EDF
.text:00002F05 ; ---------------------------------------------------------------------------
.text:00002F05
.text:00002F05 loc_2F05:                               ; CODE XREF: ReadMatchDistances(x,x)+FEj
.text:00002F05                                         ; ReadMatchDistances(x,x)+111j
.text:00002F05                 mov     edx, [ebp+var_14]
.text:00002F08                 sub     edx, [ebp+var_10]
.text:00002F0B                 mov     [ebp+var_4], edx
.text:00002F0E
.text:00002F0E loc_2F0E:                               ; CODE XREF: ReadMatchDistances(x,x)+6Dj
.text:00002F0E                                         ; ReadMatchDistances(x,x)+8Cj
.text:00002F0E                 mov     eax, [ebp+arg_0]
.text:00002F11                 mov     ecx, [eax+30h]
.text:00002F14                 add     ecx, 1
.text:00002F17                 mov     edx, [ebp+arg_0]
.text:00002F1A                 mov     [edx+30h], ecx
.text:00002F1D                 mov     eax, [ebp+arg_4]
.text:00002F20                 mov     ecx, [ebp+var_8]
.text:00002F23                 mov     [eax], ecx
.text:00002F25                 mov     eax, [ebp+var_4]
.text:00002F28                 pop     esi
.text:00002F29                 add     esp, 1Ch
.text:00002F2C                 cmp     ebp, esp
.text:00002F2E                 call    __RTC_CheckEsp
.text:00002F33                 mov     esp, ebp
.text:00002F35                 pop     ebp
.text:00002F36                 retn    8
.text:00002F36 _ReadMatchDistances@8 endp
.text:00002F36
.text:00002F36 ; ---------------------------------------------------------------------------
.text:00002F39                 align 10h
.text:00002F40
.text:00002F40 ; =============== S U B R O U T I N E =======================================
.text:00002F40
.text:00002F40 ; Attributes: bp-based frame
.text:00002F40
.text:00002F40 ; __stdcall GetOptimum(x, x, x)
.text:00002F40 _GetOptimum@12  proc near               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+1A5p
.text:00002F40
.text:00002F40 var_1F8         = dword ptr -1F8h
.text:00002F40 var_1F4         = dword ptr -1F4h
.text:00002F40 var_1F0         = dword ptr -1F0h
.text:00002F40 var_1EC         = dword ptr -1ECh
.text:00002F40 var_1E8         = dword ptr -1E8h
.text:00002F40 var_1E4         = dword ptr -1E4h
.text:00002F40 var_1E0         = dword ptr -1E0h
.text:00002F40 var_1DC         = dword ptr -1DCh
.text:00002F40 var_1D8         = dword ptr -1D8h
.text:00002F40 var_1D4         = dword ptr -1D4h
.text:00002F40 var_1D0         = dword ptr -1D0h
.text:00002F40 var_1CC         = dword ptr -1CCh
.text:00002F40 var_1C8         = dword ptr -1C8h
.text:00002F40 var_1C4         = dword ptr -1C4h
.text:00002F40 var_1C0         = dword ptr -1C0h
.text:00002F40 var_1BC         = dword ptr -1BCh
.text:00002F40 var_1B8         = dword ptr -1B8h
.text:00002F40 var_1B4         = dword ptr -1B4h
.text:00002F40 var_1B0         = dword ptr -1B0h
.text:00002F40 var_1AC         = dword ptr -1ACh
.text:00002F40 var_1A8         = dword ptr -1A8h
.text:00002F40 var_1A4         = dword ptr -1A4h
.text:00002F40 var_1A0         = dword ptr -1A0h
.text:00002F40 var_19C         = dword ptr -19Ch
.text:00002F40 var_198         = dword ptr -198h
.text:00002F40 var_194         = dword ptr -194h
.text:00002F40 var_190         = dword ptr -190h
.text:00002F40 var_18C         = dword ptr -18Ch
.text:00002F40 var_188         = dword ptr -188h
.text:00002F40 var_184         = dword ptr -184h
.text:00002F40 var_180         = dword ptr -180h
.text:00002F40 var_17C         = dword ptr -17Ch
.text:00002F40 var_178         = dword ptr -178h
.text:00002F40 var_174         = dword ptr -174h
.text:00002F40 var_170         = dword ptr -170h
.text:00002F40 var_16C         = dword ptr -16Ch
.text:00002F40 var_168         = dword ptr -168h
.text:00002F40 var_164         = dword ptr -164h
.text:00002F40 var_160         = dword ptr -160h
.text:00002F40 var_15C         = dword ptr -15Ch
.text:00002F40 var_158         = dword ptr -158h
.text:00002F40 var_154         = dword ptr -154h
.text:00002F40 var_150         = dword ptr -150h
.text:00002F40 var_14C         = dword ptr -14Ch
.text:00002F40 var_148         = dword ptr -148h
.text:00002F40 var_144         = dword ptr -144h
.text:00002F40 var_140         = dword ptr -140h
.text:00002F40 var_13C         = dword ptr -13Ch
.text:00002F40 var_138         = dword ptr -138h
.text:00002F40 var_134         = dword ptr -134h
.text:00002F40 var_130         = dword ptr -130h
.text:00002F40 var_12C         = dword ptr -12Ch
.text:00002F40 var_128         = dword ptr -128h
.text:00002F40 var_124         = dword ptr -124h
.text:00002F40 var_120         = dword ptr -120h
.text:00002F40 var_11C         = dword ptr -11Ch
.text:00002F40 var_118         = dword ptr -118h
.text:00002F40 var_114         = dword ptr -114h
.text:00002F40 var_110         = dword ptr -110h
.text:00002F40 var_10C         = dword ptr -10Ch
.text:00002F40 var_108         = dword ptr -108h
.text:00002F40 var_104         = dword ptr -104h
.text:00002F40 var_100         = dword ptr -100h
.text:00002F40 var_FA          = byte ptr -0FAh
.text:00002F40 var_F9          = byte ptr -0F9h
.text:00002F40 var_F8          = dword ptr -0F8h
.text:00002F40 var_F4          = dword ptr -0F4h
.text:00002F40 var_F0          = dword ptr -0F0h
.text:00002F40 var_EC          = dword ptr -0ECh
.text:00002F40 var_E8          = dword ptr -0E8h
.text:00002F40 var_E4          = dword ptr -0E4h
.text:00002F40 var_E0          = dword ptr -0E0h
.text:00002F40 var_DC          = dword ptr -0DCh
.text:00002F40 var_D8          = dword ptr -0D8h
.text:00002F40 var_D0          = dword ptr -0D0h
.text:00002F40 var_C8          = dword ptr -0C8h
.text:00002F40 var_C4          = dword ptr -0C4h
.text:00002F40 var_C0          = dword ptr -0C0h
.text:00002F40 var_BC          = dword ptr -0BCh
.text:00002F40 var_B8          = dword ptr -0B8h
.text:00002F40 var_B4          = dword ptr -0B4h
.text:00002F40 var_B0          = dword ptr -0B0h
.text:00002F40 var_AC          = dword ptr -0ACh
.text:00002F40 var_A8          = dword ptr -0A8h
.text:00002F40 var_A4          = dword ptr -0A4h
.text:00002F40 var_A0          = dword ptr -0A0h
.text:00002F40 var_9C          = dword ptr -9Ch
.text:00002F40 var_98          = dword ptr -98h
.text:00002F40 var_94          = dword ptr -94h
.text:00002F40 var_90          = dword ptr -90h
.text:00002F40 var_8C          = dword ptr -8Ch
.text:00002F40 var_88          = dword ptr -88h
.text:00002F40 var_84          = dword ptr -84h
.text:00002F40 var_80          = dword ptr -80h
.text:00002F40 var_7C          = dword ptr -7Ch
.text:00002F40 var_76          = byte ptr -76h
.text:00002F40 var_75          = byte ptr -75h
.text:00002F40 var_74          = dword ptr -74h
.text:00002F40 var_70          = dword ptr -70h
.text:00002F40 var_68          = dword ptr -68h
.text:00002F40 var_50          = dword ptr -50h
.text:00002F40 var_4C          = dword ptr -4Ch
.text:00002F40 var_48          = dword ptr -48h
.text:00002F40 var_44          = dword ptr -44h
.text:00002F40 var_3C          = dword ptr -3Ch
.text:00002F40 var_38          = dword ptr -38h
.text:00002F40 var_34          = dword ptr -34h
.text:00002F40 var_30          = dword ptr -30h
.text:00002F40 var_2C          = dword ptr -2Ch
.text:00002F40 var_28          = dword ptr -28h
.text:00002F40 var_24          = dword ptr -24h
.text:00002F40 var_20          = dword ptr -20h
.text:00002F40 var_1C          = dword ptr -1Ch
.text:00002F40 var_14          = dword ptr -14h
.text:00002F40 var_C           = dword ptr -0Ch
.text:00002F40 var_8           = dword ptr -8
.text:00002F40 var_4           = dword ptr -4
.text:00002F40 arg_0           = dword ptr  8
.text:00002F40 arg_4           = dword ptr  0Ch
.text:00002F40 arg_8           = dword ptr  10h
.text:00002F40
.text:00002F40                 push    ebp
.text:00002F41                 mov     ebp, esp
.text:00002F43                 sub     esp, 1F8h
.text:00002F49                 push    esi
.text:00002F4A                 push    edi
.text:00002F4B                 lea     edi, [ebp+var_1F8]
.text:00002F51                 mov     ecx, 7Eh ; '~'
.text:00002F56                 mov     eax, 0CCCCCCCCh
.text:00002F5B                 rep stosd
.text:00002F5D                 mov     eax, dword ptr ds:___security_cookie
.text:00002F62                 xor     eax, ebp
.text:00002F64                 mov     [ebp+var_4], eax
.text:00002F67                 mov     eax, [ebp+arg_0]
.text:00002F6A                 mov     ecx, [ebp+arg_0]
.text:00002F6D                 mov     edx, [eax+18h]
.text:00002F70                 cmp     edx, [ecx+1Ch]
.text:00002F73                 jz      short loc_2FB9
.text:00002F75                 mov     eax, [ebp+arg_0]
.text:00002F78                 mov     ecx, [eax+1Ch]
.text:00002F7B                 imul    ecx, 30h
.text:00002F7E                 mov     edx, [ebp+arg_0]
.text:00002F81                 lea     eax, [edx+ecx+734h]
.text:00002F88                 mov     [ebp+var_7C], eax
.text:00002F8B                 mov     ecx, [ebp+var_7C]
.text:00002F8E                 mov     edx, [ebp+arg_0]
.text:00002F91                 mov     eax, [ecx+18h]
.text:00002F94                 sub     eax, [edx+1Ch]
.text:00002F97                 mov     [ebp+var_80], eax
.text:00002F9A                 mov     ecx, [ebp+arg_8]
.text:00002F9D                 mov     edx, [ebp+var_7C]
.text:00002FA0                 mov     eax, [edx+1Ch]
.text:00002FA3                 mov     [ecx], eax
.text:00002FA5                 mov     ecx, [ebp+arg_0]
.text:00002FA8                 mov     edx, [ebp+var_7C]
.text:00002FAB                 mov     eax, [edx+18h]
.text:00002FAE                 mov     [ecx+1Ch], eax
.text:00002FB1                 mov     eax, [ebp+var_80]
.text:00002FB4                 jmp     loc_4BDE
.text:00002FB9 ; ---------------------------------------------------------------------------
.text:00002FB9
.text:00002FB9 loc_2FB9:                               ; CODE XREF: GetOptimum(x,x,x)+33j
.text:00002FB9                 mov     ecx, [ebp+arg_0]
.text:00002FBC                 mov     dword ptr [ecx+18h], 0
.text:00002FC3                 mov     edx, [ebp+arg_0]
.text:00002FC6                 mov     dword ptr [edx+1Ch], 0
.text:00002FCD                 mov     eax, [ebp+arg_0]
.text:00002FD0                 cmp     dword ptr [eax+30h], 0
.text:00002FD4                 jnz     short loc_2FE8
.text:00002FD6                 lea     ecx, [ebp+var_14]
.text:00002FD9                 push    ecx
.text:00002FDA                 mov     edx, [ebp+arg_0]
.text:00002FDD                 push    edx
.text:00002FDE                 call    _ReadMatchDistances@8 ; ReadMatchDistances(x,x)
.text:00002FE3                 mov     [ebp+var_C], eax
.text:00002FE6                 jmp     short loc_2FFA
.text:00002FE8 ; ---------------------------------------------------------------------------
.text:00002FE8
.text:00002FE8 loc_2FE8:                               ; CODE XREF: GetOptimum(x,x,x)+94j
.text:00002FE8                 mov     eax, [ebp+arg_0]
.text:00002FEB                 mov     ecx, [eax+20h]
.text:00002FEE                 mov     [ebp+var_C], ecx
.text:00002FF1                 mov     edx, [ebp+arg_0]
.text:00002FF4                 mov     eax, [edx+24h]
.text:00002FF7                 mov     [ebp+var_14], eax
.text:00002FFA
.text:00002FFA loc_2FFA:                               ; CODE XREF: GetOptimum(x,x,x)+A6j
.text:00002FFA                 mov     ecx, [ebp+arg_0]
.text:00002FFD                 mov     edx, [ecx+28h]
.text:00003000                 mov     [ebp+var_8], edx
.text:00003003                 cmp     [ebp+var_8], 2
.text:00003007                 jnb     short loc_301C
.text:00003009                 mov     eax, [ebp+arg_8]
.text:0000300C                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00003012                 mov     eax, 1
.text:00003017                 jmp     loc_4BDE
.text:0000301C ; ---------------------------------------------------------------------------
.text:0000301C
.text:0000301C loc_301C:                               ; CODE XREF: GetOptimum(x,x,x)+C7j
.text:0000301C                 cmp     [ebp+var_8], 111h
.text:00003023                 jbe     short loc_302C
.text:00003025                 mov     [ebp+var_8], 111h
.text:0000302C
.text:0000302C loc_302C:                               ; CODE XREF: GetOptimum(x,x,x)+E3j
.text:0000302C                 mov     esi, esp
.text:0000302E                 mov     ecx, [ebp+arg_0]
.text:00003031                 mov     edx, [ecx]
.text:00003033                 push    edx
.text:00003034                 mov     eax, [ebp+arg_0]
.text:00003037                 mov     ecx, [eax+0Ch]
.text:0000303A                 call    ecx
.text:0000303C                 cmp     esi, esp
.text:0000303E                 call    __RTC_CheckEsp
.text:00003043                 sub     eax, 1
.text:00003046                 mov     [ebp+var_74], eax
.text:00003049                 mov     [ebp+var_1C], 0
.text:00003050                 mov     [ebp+var_20], 0
.text:00003057                 jmp     short loc_3062
.text:00003059 ; ---------------------------------------------------------------------------
.text:00003059
.text:00003059 loc_3059:                               ; CODE XREF: GetOptimum(x,x,x)+183j
.text:00003059                                         ; GetOptimum(x,x,x):loc_312Ej
.text:00003059                 mov     edx, [ebp+var_20]
.text:0000305C                 add     edx, 1
.text:0000305F                 mov     [ebp+var_20], edx
.text:00003062
.text:00003062 loc_3062:                               ; CODE XREF: GetOptimum(x,x,x)+117j
.text:00003062                 cmp     [ebp+var_20], 4
.text:00003066                 jnb     loc_3133
.text:0000306C                 mov     eax, [ebp+var_20]
.text:0000306F                 mov     ecx, [ebp+var_20]
.text:00003072                 mov     edx, [ebp+arg_0]
.text:00003075                 mov     ecx, [edx+ecx*4+34h]
.text:00003079                 mov     [ebp+eax*4+var_50], ecx
.text:0000307D                 mov     edx, [ebp+var_20]
.text:00003080                 mov     eax, [ebp+var_74]
.text:00003083                 sub     eax, [ebp+edx*4+var_50]
.text:00003087                 sub     eax, 1
.text:0000308A                 mov     [ebp+var_88], eax
.text:00003090                 mov     ecx, [ebp+var_74]
.text:00003093                 movzx   edx, byte ptr [ecx]
.text:00003096                 mov     eax, [ebp+var_88]
.text:0000309C                 movzx   ecx, byte ptr [eax]
.text:0000309F                 cmp     edx, ecx
.text:000030A1                 jnz     short loc_30B8
.text:000030A3                 mov     edx, [ebp+var_74]
.text:000030A6                 movzx   eax, byte ptr [edx+1]
.text:000030AA                 mov     ecx, [ebp+var_88]
.text:000030B0                 movzx   edx, byte ptr [ecx+1]
.text:000030B4                 cmp     eax, edx
.text:000030B6                 jz      short loc_30C5
.text:000030B8
.text:000030B8 loc_30B8:                               ; CODE XREF: GetOptimum(x,x,x)+161j
.text:000030B8                 mov     eax, [ebp+var_20]
.text:000030BB                 mov     [ebp+eax*4+var_68], 0
.text:000030C3                 jmp     short loc_3059
.text:000030C5 ; ---------------------------------------------------------------------------
.text:000030C5
.text:000030C5 loc_30C5:                               ; CODE XREF: GetOptimum(x,x,x)+176j
.text:000030C5                 mov     [ebp+var_84], 2
.text:000030CF                 jmp     short loc_30E0
.text:000030D1 ; ---------------------------------------------------------------------------
.text:000030D1
.text:000030D1 loc_30D1:                               ; CODE XREF: GetOptimum(x,x,x)+1CAj
.text:000030D1                 mov     ecx, [ebp+var_84]
.text:000030D7                 add     ecx, 1
.text:000030DA                 mov     [ebp+var_84], ecx
.text:000030E0
.text:000030E0 loc_30E0:                               ; CODE XREF: GetOptimum(x,x,x)+18Fj
.text:000030E0                 mov     edx, [ebp+var_84]
.text:000030E6                 cmp     edx, [ebp+var_8]
.text:000030E9                 jnb     short loc_310C
.text:000030EB                 mov     eax, [ebp+var_74]
.text:000030EE                 add     eax, [ebp+var_84]
.text:000030F4                 movzx   ecx, byte ptr [eax]
.text:000030F7                 mov     edx, [ebp+var_88]
.text:000030FD                 add     edx, [ebp+var_84]
.text:00003103                 movzx   eax, byte ptr [edx]
.text:00003106                 cmp     ecx, eax
.text:00003108                 jnz     short loc_310C
.text:0000310A                 jmp     short loc_30D1
.text:0000310C ; ---------------------------------------------------------------------------
.text:0000310C
.text:0000310C loc_310C:                               ; CODE XREF: GetOptimum(x,x,x)+1A9j
.text:0000310C                                         ; GetOptimum(x,x,x)+1C8j
.text:0000310C                 mov     ecx, [ebp+var_20]
.text:0000310F                 mov     edx, [ebp+var_84]
.text:00003115                 mov     [ebp+ecx*4+var_68], edx
.text:00003119                 mov     eax, [ebp+var_1C]
.text:0000311C                 mov     ecx, [ebp+var_84]
.text:00003122                 cmp     ecx, [ebp+eax*4+var_68]
.text:00003126                 jbe     short loc_312E
.text:00003128                 mov     edx, [ebp+var_20]
.text:0000312B                 mov     [ebp+var_1C], edx
.text:0000312E
.text:0000312E loc_312E:                               ; CODE XREF: GetOptimum(x,x,x)+1E6j
.text:0000312E                 jmp     loc_3059
.text:00003133 ; ---------------------------------------------------------------------------
.text:00003133
.text:00003133 loc_3133:                               ; CODE XREF: GetOptimum(x,x,x)+126j
.text:00003133                 mov     eax, [ebp+var_1C]
.text:00003136                 mov     ecx, [ebp+arg_0]
.text:00003139                 mov     edx, [ebp+eax*4+var_68]
.text:0000313D                 cmp     edx, [ecx+2Ch]
.text:00003140                 jb      short loc_3175
.text:00003142                 mov     eax, [ebp+arg_8]
.text:00003145                 mov     ecx, [ebp+var_1C]
.text:00003148                 mov     [eax], ecx
.text:0000314A                 mov     edx, [ebp+var_1C]
.text:0000314D                 mov     eax, [ebp+edx*4+var_68]
.text:00003151                 mov     [ebp+var_8C], eax
.text:00003157                 mov     ecx, [ebp+var_8C]
.text:0000315D                 sub     ecx, 1
.text:00003160                 push    ecx
.text:00003161                 mov     edx, [ebp+arg_0]
.text:00003164                 push    edx
.text:00003165                 call    _MovePos@8      ; MovePos(x,x)
.text:0000316A                 mov     eax, [ebp+var_8C]
.text:00003170                 jmp     loc_4BDE
.text:00003175 ; ---------------------------------------------------------------------------
.text:00003175
.text:00003175 loc_3175:                               ; CODE XREF: GetOptimum(x,x,x)+200j
.text:00003175                 mov     eax, [ebp+arg_0]
.text:00003178                 add     eax, 31134h
.text:0000317D                 mov     [ebp+var_70], eax
.text:00003180                 mov     ecx, [ebp+arg_0]
.text:00003183                 mov     edx, [ebp+var_C]
.text:00003186                 cmp     edx, [ecx+2Ch]
.text:00003189                 jb      short loc_31B5
.text:0000318B                 mov     eax, [ebp+var_14]
.text:0000318E                 mov     ecx, [ebp+var_70]
.text:00003191                 mov     edx, [ecx+eax*4-4]
.text:00003195                 add     edx, 4
.text:00003198                 mov     eax, [ebp+arg_8]
.text:0000319B                 mov     [eax], edx
.text:0000319D                 mov     ecx, [ebp+var_C]
.text:000031A0                 sub     ecx, 1
.text:000031A3                 push    ecx
.text:000031A4                 mov     edx, [ebp+arg_0]
.text:000031A7                 push    edx
.text:000031A8                 call    _MovePos@8      ; MovePos(x,x)
.text:000031AD                 mov     eax, [ebp+var_C]
.text:000031B0                 jmp     loc_4BDE
.text:000031B5 ; ---------------------------------------------------------------------------
.text:000031B5
.text:000031B5 loc_31B5:                               ; CODE XREF: GetOptimum(x,x,x)+249j
.text:000031B5                 mov     eax, [ebp+var_74]
.text:000031B8                 mov     cl, [eax]
.text:000031BA                 mov     [ebp+var_75], cl
.text:000031BD                 mov     edx, [ebp+var_50]
.text:000031C0                 add     edx, 1
.text:000031C3                 mov     eax, [ebp+var_74]
.text:000031C6                 sub     eax, edx
.text:000031C8                 mov     cl, [eax]
.text:000031CA                 mov     [ebp+var_76], cl
.text:000031CD                 cmp     [ebp+var_C], 2
.text:000031D1                 jnb     short loc_31FC
.text:000031D3                 movzx   edx, [ebp+var_75]
.text:000031D7                 movzx   eax, [ebp+var_76]
.text:000031DB                 cmp     edx, eax
.text:000031DD                 jz      short loc_31FC
.text:000031DF                 mov     ecx, [ebp+var_1C]
.text:000031E2                 cmp     [ebp+ecx*4+var_68], 2
.text:000031E7                 jnb     short loc_31FC
.text:000031E9                 mov     edx, [ebp+arg_8]
.text:000031EC                 mov     dword ptr [edx], 0FFFFFFFFh
.text:000031F2                 mov     eax, 1
.text:000031F7                 jmp     loc_4BDE
.text:000031FC ; ---------------------------------------------------------------------------
.text:000031FC
.text:000031FC loc_31FC:                               ; CODE XREF: GetOptimum(x,x,x)+291j
.text:000031FC                                         ; GetOptimum(x,x,x)+29Dj ...
.text:000031FC                 mov     eax, [ebp+arg_0]
.text:000031FF                 mov     ecx, [ebp+arg_0]
.text:00003202                 mov     edx, [ecx+44h]
.text:00003205                 mov     [eax+738h], edx
.text:0000320B                 mov     eax, [ebp+arg_0]
.text:0000320E                 mov     ecx, [ebp+arg_4]
.text:00003211                 and     ecx, [eax+58h]
.text:00003214                 mov     [ebp+var_24], ecx
.text:00003217                 mov     edx, [ebp+arg_0]
.text:0000321A                 mov     eax, [ebp+arg_4]
.text:0000321D                 and     eax, [edx+54h]
.text:00003220                 mov     ecx, [ebp+arg_0]
.text:00003223                 mov     ecx, [ecx+48h]
.text:00003226                 shl     eax, cl
.text:00003228                 mov     edx, [ebp+var_74]
.text:0000322B                 movzx   edx, byte ptr [edx-1]
.text:0000322F                 mov     ecx, [ebp+arg_0]
.text:00003232                 mov     esi, 8
.text:00003237                 sub     esi, [ecx+48h]
.text:0000323A                 mov     ecx, esi
.text:0000323C                 sar     edx, cl
.text:0000323E                 add     eax, edx
.text:00003240                 imul    eax, 300h
.text:00003246                 mov     edx, [ebp+arg_0]
.text:00003249                 mov     ecx, [edx+60h]
.text:0000324C                 lea     edx, [ecx+eax*2]
.text:0000324F                 mov     [ebp+var_90], edx
.text:00003255                 mov     eax, [ebp+arg_0]
.text:00003258                 cmp     dword ptr [eax+44h], 7
.text:0000325C                 jb      short loc_3286
.text:0000325E                 mov     ecx, [ebp+arg_0]
.text:00003261                 add     ecx, 30F34h
.text:00003267                 push    ecx
.text:00003268                 movzx   edx, [ebp+var_76]
.text:0000326C                 push    edx
.text:0000326D                 movzx   eax, [ebp+var_75]
.text:00003271                 push    eax
.text:00003272                 mov     ecx, [ebp+var_90]
.text:00003278                 push    ecx
.text:00003279                 call    _LitEnc_GetPriceMatched@16 ; LitEnc_GetPriceMatched(x,x,x,x)
.text:0000327E                 mov     [ebp+var_1E0], eax
.text:00003284                 jmp     short loc_32A7
.text:00003286 ; ---------------------------------------------------------------------------
.text:00003286
.text:00003286 loc_3286:                               ; CODE XREF: GetOptimum(x,x,x)+31Cj
.text:00003286                 mov     edx, [ebp+arg_0]
.text:00003289                 add     edx, 30F34h
.text:0000328F                 push    edx
.text:00003290                 movzx   eax, [ebp+var_75]
.text:00003294                 push    eax
.text:00003295                 mov     ecx, [ebp+var_90]
.text:0000329B                 push    ecx
.text:0000329C                 call    _LitEnc_GetPrice@12 ; LitEnc_GetPrice(x,x,x)
.text:000032A1                 mov     [ebp+var_1E0], eax
.text:000032A7
.text:000032A7 loc_32A7:                               ; CODE XREF: GetOptimum(x,x,x)+344j
.text:000032A7                 mov     edx, [ebp+arg_0]
.text:000032AA                 mov     eax, [edx+44h]
.text:000032AD                 shl     eax, 5
.text:000032B0                 mov     ecx, [ebp+arg_0]
.text:000032B3                 lea     edx, [ecx+eax+32608h]
.text:000032BA                 mov     eax, [ebp+var_24]
.text:000032BD                 movzx   ecx, word ptr [edx+eax*2]
.text:000032C1                 sar     ecx, 4
.text:000032C4                 mov     edx, [ebp+arg_0]
.text:000032C7                 mov     eax, [edx+ecx*4+30F34h]
.text:000032CE                 add     eax, [ebp+var_1E0]
.text:000032D4                 mov     ecx, [ebp+arg_0]
.text:000032D7                 mov     [ecx+764h], eax
.text:000032DD                 mov     edx, [ebp+arg_0]
.text:000032E0                 mov     dword ptr [edx+780h], 0FFFFFFFFh
.text:000032EA                 mov     eax, [ebp+arg_0]
.text:000032ED                 mov     dword ptr [eax+76Ch], 0
.text:000032F7                 mov     ecx, [ebp+arg_0]
.text:000032FA                 mov     edx, [ecx+44h]
.text:000032FD                 shl     edx, 5
.text:00003300                 mov     eax, [ebp+arg_0]
.text:00003303                 lea     ecx, [eax+edx+32608h]
.text:0000330A                 mov     edx, [ebp+var_24]
.text:0000330D                 movzx   eax, word ptr [ecx+edx*2]
.text:00003311                 xor     eax, 7FFh
.text:00003316                 sar     eax, 4
.text:00003319                 mov     ecx, [ebp+arg_0]
.text:0000331C                 mov     edx, [ecx+eax*4+30F34h]
.text:00003323                 mov     [ebp+var_34], edx
.text:00003326                 mov     eax, [ebp+arg_0]
.text:00003329                 mov     ecx, [eax+44h]
.text:0000332C                 mov     edx, [ebp+arg_0]
.text:0000332F                 movzx   eax, word ptr [edx+ecx*2+32788h]
.text:00003337                 xor     eax, 7FFh
.text:0000333C                 sar     eax, 4
.text:0000333F                 mov     ecx, [ebp+arg_0]
.text:00003342                 mov     edx, [ebp+var_34]
.text:00003345                 add     edx, [ecx+eax*4+30F34h]
.text:0000334C                 mov     [ebp+var_38], edx
.text:0000334F                 movzx   eax, [ebp+var_76]
.text:00003353                 movzx   ecx, [ebp+var_75]
.text:00003357                 cmp     eax, ecx
.text:00003359                 jnz     short loc_33B2
.text:0000335B                 mov     edx, [ebp+var_24]
.text:0000335E                 push    edx
.text:0000335F                 mov     eax, [ebp+arg_0]
.text:00003362                 mov     ecx, [eax+44h]
.text:00003365                 push    ecx
.text:00003366                 mov     edx, [ebp+arg_0]
.text:00003369                 push    edx
.text:0000336A                 call    _GetRepLen1Price@12 ; GetRepLen1Price(x,x,x)
.text:0000336F                 add     eax, [ebp+var_38]
.text:00003372                 mov     [ebp+var_94], eax
.text:00003378                 mov     eax, [ebp+arg_0]
.text:0000337B                 mov     ecx, [ebp+var_94]
.text:00003381                 cmp     ecx, [eax+764h]
.text:00003387                 jnb     short loc_33B2
.text:00003389                 mov     edx, [ebp+arg_0]
.text:0000338C                 mov     eax, [ebp+var_94]
.text:00003392                 mov     [edx+764h], eax
.text:00003398                 mov     ecx, [ebp+arg_0]
.text:0000339B                 mov     dword ptr [ecx+780h], 0
.text:000033A5                 mov     edx, [ebp+arg_0]
.text:000033A8                 mov     dword ptr [edx+76Ch], 0
.text:000033B2
.text:000033B2 loc_33B2:                               ; CODE XREF: GetOptimum(x,x,x)+419j
.text:000033B2                                         ; GetOptimum(x,x,x)+447j
.text:000033B2                 mov     eax, [ebp+var_1C]
.text:000033B5                 mov     ecx, [ebp+var_C]
.text:000033B8                 cmp     ecx, [ebp+eax*4+var_68]
.text:000033BC                 jb      short loc_33C9
.text:000033BE                 mov     edx, [ebp+var_C]
.text:000033C1                 mov     [ebp+var_1E4], edx
.text:000033C7                 jmp     short loc_33D6
.text:000033C9 ; ---------------------------------------------------------------------------
.text:000033C9
.text:000033C9 loc_33C9:                               ; CODE XREF: GetOptimum(x,x,x)+47Cj
.text:000033C9                 mov     eax, [ebp+var_1C]
.text:000033CC                 mov     ecx, [ebp+eax*4+var_68]
.text:000033D0                 mov     [ebp+var_1E4], ecx
.text:000033D6
.text:000033D6 loc_33D6:                               ; CODE XREF: GetOptimum(x,x,x)+487j
.text:000033D6                 mov     edx, [ebp+var_1E4]
.text:000033DC                 mov     [ebp+var_28], edx
.text:000033DF                 cmp     [ebp+var_28], 2
.text:000033E3                 jnb     short loc_33FD
.text:000033E5                 mov     eax, [ebp+arg_8]
.text:000033E8                 mov     ecx, [ebp+arg_0]
.text:000033EB                 mov     edx, [ecx+780h]
.text:000033F1                 mov     [eax], edx
.text:000033F3                 mov     eax, 1
.text:000033F8                 jmp     loc_4BDE
.text:000033FD ; ---------------------------------------------------------------------------
.text:000033FD
.text:000033FD loc_33FD:                               ; CODE XREF: GetOptimum(x,x,x)+4A3j
.text:000033FD                 mov     eax, [ebp+arg_0]
.text:00003400                 mov     dword ptr [eax+77Ch], 0
.text:0000340A                 mov     [ebp+var_20], 0
.text:00003411                 jmp     short loc_341C
.text:00003413 ; ---------------------------------------------------------------------------
.text:00003413
.text:00003413 loc_3413:                               ; CODE XREF: GetOptimum(x,x,x)+4F6j
.text:00003413                 mov     ecx, [ebp+var_20]
.text:00003416                 add     ecx, 1
.text:00003419                 mov     [ebp+var_20], ecx
.text:0000341C
.text:0000341C loc_341C:                               ; CODE XREF: GetOptimum(x,x,x)+4D1j
.text:0000341C                 cmp     [ebp+var_20], 4
.text:00003420                 jnb     short loc_3438
.text:00003422                 mov     edx, [ebp+var_20]
.text:00003425                 mov     eax, [ebp+arg_0]
.text:00003428                 mov     ecx, [ebp+var_20]
.text:0000342B                 mov     ecx, [ebp+ecx*4+var_50]
.text:0000342F                 mov     [eax+edx*4+754h], ecx
.text:00003436                 jmp     short loc_3413
.text:00003438 ; ---------------------------------------------------------------------------
.text:00003438
.text:00003438 loc_3438:                               ; CODE XREF: GetOptimum(x,x,x)+4E0j
.text:00003438                 mov     edx, [ebp+var_28]
.text:0000343B                 mov     [ebp+var_2C], edx
.text:0000343E
.text:0000343E loc_343E:                               ; CODE XREF: GetOptimum(x,x,x)+51Fj
.text:0000343E                 mov     eax, [ebp+var_2C]
.text:00003441                 imul    eax, 30h
.text:00003444                 mov     ecx, [ebp+arg_0]
.text:00003447                 mov     dword ptr [ecx+eax+734h], 40000000h
.text:00003452                 mov     edx, [ebp+var_2C]
.text:00003455                 sub     edx, 1
.text:00003458                 mov     [ebp+var_2C], edx
.text:0000345B                 cmp     [ebp+var_2C], 2
.text:0000345F                 jnb     short loc_343E
.text:00003461                 mov     [ebp+var_20], 0
.text:00003468                 jmp     short loc_3473
.text:0000346A ; ---------------------------------------------------------------------------
.text:0000346A
.text:0000346A loc_346A:                               ; CODE XREF: GetOptimum(x,x,x)+553j
.text:0000346A                                         ; GetOptimum(x,x,x)+618j
.text:0000346A                 mov     eax, [ebp+var_20]
.text:0000346D                 add     eax, 1
.text:00003470                 mov     [ebp+var_20], eax
.text:00003473
.text:00003473 loc_3473:                               ; CODE XREF: GetOptimum(x,x,x)+528j
.text:00003473                 cmp     [ebp+var_20], 4
.text:00003477                 jnb     loc_355D
.text:0000347D                 mov     ecx, [ebp+var_20]
.text:00003480                 mov     edx, [ebp+ecx*4+var_68]
.text:00003484                 mov     [ebp+var_98], edx
.text:0000348A                 cmp     [ebp+var_98], 2
.text:00003491                 jnb     short loc_3495
.text:00003493                 jmp     short loc_346A
.text:00003495 ; ---------------------------------------------------------------------------
.text:00003495
.text:00003495 loc_3495:                               ; CODE XREF: GetOptimum(x,x,x)+551j
.text:00003495                 mov     eax, [ebp+var_24]
.text:00003498                 push    eax
.text:00003499                 mov     ecx, [ebp+arg_0]
.text:0000349C                 mov     edx, [ecx+44h]
.text:0000349F                 push    edx
.text:000034A0                 mov     eax, [ebp+var_20]
.text:000034A3                 push    eax
.text:000034A4                 mov     ecx, [ebp+arg_0]
.text:000034A7                 push    ecx
.text:000034A8                 call    _GetPureRepPrice@16 ; GetPureRepPrice(x,x,x,x)
.text:000034AD                 add     eax, [ebp+var_38]
.text:000034B0                 mov     [ebp+var_9C], eax
.text:000034B6
.text:000034B6 loc_34B6:                               ; CODE XREF: GetOptimum(x,x,x)+612j
.text:000034B6                 mov     edx, [ebp+var_24]
.text:000034B9                 imul    edx, 440h
.text:000034BF                 mov     eax, [ebp+arg_0]
.text:000034C2                 lea     ecx, [eax+edx+378BCh]
.text:000034C9                 mov     edx, [ebp+var_98]
.text:000034CF                 mov     eax, [ebp+var_9C]
.text:000034D5                 add     eax, [ecx+edx*4-8]
.text:000034D9                 mov     [ebp+var_A0], eax
.text:000034DF                 mov     ecx, [ebp+var_98]
.text:000034E5                 imul    ecx, 30h
.text:000034E8                 mov     edx, [ebp+arg_0]
.text:000034EB                 lea     eax, [edx+ecx+734h]
.text:000034F2                 mov     [ebp+var_A4], eax
.text:000034F8                 mov     ecx, [ebp+var_A4]
.text:000034FE                 mov     edx, [ebp+var_A0]
.text:00003504                 cmp     edx, [ecx]
.text:00003506                 jnb     short loc_353C
.text:00003508                 mov     eax, [ebp+var_A4]
.text:0000350E                 mov     ecx, [ebp+var_A0]
.text:00003514                 mov     [eax], ecx
.text:00003516                 mov     edx, [ebp+var_A4]
.text:0000351C                 mov     dword ptr [edx+18h], 0
.text:00003523                 mov     eax, [ebp+var_A4]
.text:00003529                 mov     ecx, [ebp+var_20]
.text:0000352C                 mov     [eax+1Ch], ecx
.text:0000352F                 mov     edx, [ebp+var_A4]
.text:00003535                 mov     dword ptr [edx+8], 0
.text:0000353C
.text:0000353C loc_353C:                               ; CODE XREF: GetOptimum(x,x,x)+5C6j
.text:0000353C                 mov     eax, [ebp+var_98]
.text:00003542                 sub     eax, 1
.text:00003545                 mov     [ebp+var_98], eax
.text:0000354B                 cmp     [ebp+var_98], 2
.text:00003552                 jnb     loc_34B6
.text:00003558                 jmp     loc_346A
.text:0000355D ; ---------------------------------------------------------------------------
.text:0000355D
.text:0000355D loc_355D:                               ; CODE XREF: GetOptimum(x,x,x)+537j
.text:0000355D                 mov     ecx, [ebp+arg_0]
.text:00003560                 mov     edx, [ecx+44h]
.text:00003563                 mov     eax, [ebp+arg_0]
.text:00003566                 movzx   ecx, word ptr [eax+edx*2+32788h]
.text:0000356E                 sar     ecx, 4
.text:00003571                 mov     edx, [ebp+arg_0]
.text:00003574                 mov     eax, [ebp+var_34]
.text:00003577                 add     eax, [edx+ecx*4+30F34h]
.text:0000357E                 mov     [ebp+var_3C], eax
.text:00003581                 cmp     [ebp+var_68], 2
.text:00003585                 jb      short loc_3595
.text:00003587                 mov     ecx, [ebp+var_68]
.text:0000358A                 add     ecx, 1
.text:0000358D                 mov     [ebp+var_1E8], ecx
.text:00003593                 jmp     short loc_359F
.text:00003595 ; ---------------------------------------------------------------------------
.text:00003595
.text:00003595 loc_3595:                               ; CODE XREF: GetOptimum(x,x,x)+645j
.text:00003595                 mov     [ebp+var_1E8], 2
.text:0000359F
.text:0000359F loc_359F:                               ; CODE XREF: GetOptimum(x,x,x)+653j
.text:0000359F                 mov     edx, [ebp+var_1E8]
.text:000035A5                 mov     [ebp+var_2C], edx
.text:000035A8                 mov     eax, [ebp+var_2C]
.text:000035AB                 cmp     eax, [ebp+var_C]
.text:000035AE                 ja      loc_378E
.text:000035B4                 mov     [ebp+var_A8], 0
.text:000035BE
.text:000035BE loc_35BE:                               ; CODE XREF: GetOptimum(x,x,x)+69Ej
.text:000035BE                 mov     ecx, [ebp+var_A8]
.text:000035C4                 mov     edx, [ebp+var_70]
.text:000035C7                 mov     eax, [ebp+var_2C]
.text:000035CA                 cmp     eax, [edx+ecx*4]
.text:000035CD                 jbe     short loc_35E0
.text:000035CF                 mov     ecx, [ebp+var_A8]
.text:000035D5                 add     ecx, 2
.text:000035D8                 mov     [ebp+var_A8], ecx
.text:000035DE                 jmp     short loc_35BE
.text:000035E0 ; ---------------------------------------------------------------------------
.text:000035E0
.text:000035E0 loc_35E0:                               ; CODE XREF: GetOptimum(x,x,x)+68Dj
.text:000035E0                 jmp     short loc_35EB
.text:000035E2 ; ---------------------------------------------------------------------------
.text:000035E2
.text:000035E2 loc_35E2:                               ; CODE XREF: GetOptimum(x,x,x):loc_3789j
.text:000035E2                 mov     edx, [ebp+var_2C]
.text:000035E5                 add     edx, 1
.text:000035E8                 mov     [ebp+var_2C], edx
.text:000035EB
.text:000035EB loc_35EB:                               ; CODE XREF: GetOptimum(x,x,x):loc_35E0j
.text:000035EB                 mov     eax, [ebp+var_A8]
.text:000035F1                 mov     ecx, [ebp+var_70]
.text:000035F4                 mov     edx, [ecx+eax*4+4]
.text:000035F8                 mov     [ebp+var_B0], edx
.text:000035FE                 mov     eax, [ebp+var_24]
.text:00003601                 imul    eax, 440h
.text:00003607                 mov     ecx, [ebp+arg_0]
.text:0000360A                 lea     edx, [ecx+eax+33074h]
.text:00003611                 mov     eax, [ebp+var_2C]
.text:00003614                 mov     ecx, [ebp+var_3C]
.text:00003617                 add     ecx, [edx+eax*4-8]
.text:0000361B                 mov     [ebp+var_B4], ecx
.text:00003621                 cmp     [ebp+var_2C], 5
.text:00003625                 jnb     short loc_3635
.text:00003627                 mov     edx, [ebp+var_2C]
.text:0000362A                 sub     edx, 2
.text:0000362D                 mov     [ebp+var_1EC], edx
.text:00003633                 jmp     short loc_363F
.text:00003635 ; ---------------------------------------------------------------------------
.text:00003635
.text:00003635 loc_3635:                               ; CODE XREF: GetOptimum(x,x,x)+6E5j
.text:00003635                 mov     [ebp+var_1EC], 3
.text:0000363F
.text:0000363F loc_363F:                               ; CODE XREF: GetOptimum(x,x,x)+6F3j
.text:0000363F                 mov     eax, [ebp+var_1EC]
.text:00003645                 mov     [ebp+var_B8], eax
.text:0000364B                 cmp     [ebp+var_B0], 80h ; 'Ç'
.text:00003655                 jnb     short loc_3681
.text:00003657                 mov     ecx, [ebp+var_B8]
.text:0000365D                 shl     ecx, 9
.text:00003660                 mov     edx, [ebp+arg_0]
.text:00003663                 lea     eax, [edx+ecx+31DC8h]
.text:0000366A                 mov     ecx, [ebp+var_B0]
.text:00003670                 mov     edx, [ebp+var_B4]
.text:00003676                 add     edx, [eax+ecx*4]
.text:00003679                 mov     [ebp+var_B4], edx
.text:0000367F                 jmp     short loc_36FC
.text:00003681 ; ---------------------------------------------------------------------------
.text:00003681
.text:00003681 loc_3681:                               ; CODE XREF: GetOptimum(x,x,x)+715j
.text:00003681                 cmp     [ebp+var_B0], 20000h
.text:0000368B                 sbb     eax, eax
.text:0000368D                 and     eax, 0FFFFFFF6h
.text:00003690                 add     eax, 10h
.text:00003693                 mov     [ebp+var_C0], eax
.text:00003699                 mov     edx, [ebp+var_B0]
.text:0000369F                 mov     ecx, [ebp+var_C0]
.text:000036A5                 shr     edx, cl
.text:000036A7                 mov     eax, [ebp+arg_0]
.text:000036AA                 movzx   ecx, byte ptr [eax+edx+30734h]
.text:000036B2                 mov     edx, [ebp+var_C0]
.text:000036B8                 lea     eax, [ecx+edx*2]
.text:000036BB                 mov     [ebp+var_BC], eax
.text:000036C1                 mov     ecx, [ebp+var_B0]
.text:000036C7                 and     ecx, 0Fh
.text:000036CA                 mov     edx, [ebp+var_B8]
.text:000036D0                 shl     edx, 8
.text:000036D3                 mov     eax, [ebp+arg_0]
.text:000036D6                 lea     edx, [eax+edx+319C8h]
.text:000036DD                 mov     eax, [ebp+arg_0]
.text:000036E0                 mov     ecx, [eax+ecx*4+325C8h]
.text:000036E7                 mov     eax, [ebp+var_BC]
.text:000036ED                 add     ecx, [edx+eax*4]
.text:000036F0                 add     ecx, [ebp+var_B4]
.text:000036F6                 mov     [ebp+var_B4], ecx
.text:000036FC
.text:000036FC loc_36FC:                               ; CODE XREF: GetOptimum(x,x,x)+73Fj
.text:000036FC                 mov     ecx, [ebp+var_2C]
.text:000036FF                 imul    ecx, 30h
.text:00003702                 mov     edx, [ebp+arg_0]
.text:00003705                 lea     eax, [edx+ecx+734h]
.text:0000370C                 mov     [ebp+var_AC], eax
.text:00003712                 mov     ecx, [ebp+var_AC]
.text:00003718                 mov     edx, [ebp+var_B4]
.text:0000371E                 cmp     edx, [ecx]
.text:00003720                 jnb     short loc_375C
.text:00003722                 mov     eax, [ebp+var_AC]
.text:00003728                 mov     ecx, [ebp+var_B4]
.text:0000372E                 mov     [eax], ecx
.text:00003730                 mov     edx, [ebp+var_AC]
.text:00003736                 mov     dword ptr [edx+18h], 0
.text:0000373D                 mov     eax, [ebp+var_B0]
.text:00003743                 add     eax, 4
.text:00003746                 mov     ecx, [ebp+var_AC]
.text:0000374C                 mov     [ecx+1Ch], eax
.text:0000374F                 mov     edx, [ebp+var_AC]
.text:00003755                 mov     dword ptr [edx+8], 0
.text:0000375C
.text:0000375C loc_375C:                               ; CODE XREF: GetOptimum(x,x,x)+7E0j
.text:0000375C                 mov     eax, [ebp+var_A8]
.text:00003762                 mov     ecx, [ebp+var_70]
.text:00003765                 mov     edx, [ebp+var_2C]
.text:00003768                 cmp     edx, [ecx+eax*4]
.text:0000376B                 jnz     short loc_3789
.text:0000376D                 mov     eax, [ebp+var_A8]
.text:00003773                 add     eax, 2
.text:00003776                 mov     [ebp+var_A8], eax
.text:0000377C                 mov     ecx, [ebp+var_A8]
.text:00003782                 cmp     ecx, [ebp+var_14]
.text:00003785                 jnz     short loc_3789
.text:00003787                 jmp     short loc_378E
.text:00003789 ; ---------------------------------------------------------------------------
.text:00003789
.text:00003789 loc_3789:                               ; CODE XREF: GetOptimum(x,x,x)+82Bj
.text:00003789                                         ; GetOptimum(x,x,x)+845j
.text:00003789                 jmp     loc_35E2
.text:0000378E ; ---------------------------------------------------------------------------
.text:0000378E
.text:0000378E loc_378E:                               ; CODE XREF: GetOptimum(x,x,x)+66Ej
.text:0000378E                                         ; GetOptimum(x,x,x)+847j
.text:0000378E                 mov     [ebp+var_30], 0
.text:00003795
.text:00003795 loc_3795:                               ; CODE XREF: GetOptimum(x,x,x)+ED2j
.text:00003795                                         ; GetOptimum(x,x,x):loc_4BD9j
.text:00003795                 mov     edx, [ebp+var_30]
.text:00003798                 add     edx, 1
.text:0000379B                 mov     [ebp+var_30], edx
.text:0000379E                 mov     eax, [ebp+var_30]
.text:000037A1                 cmp     eax, [ebp+var_28]
.text:000037A4                 jnz     short loc_37BC
.text:000037A6                 mov     ecx, [ebp+var_30]
.text:000037A9                 push    ecx
.text:000037AA                 mov     edx, [ebp+arg_8]
.text:000037AD                 push    edx
.text:000037AE                 mov     eax, [ebp+arg_0]
.text:000037B1                 push    eax
.text:000037B2                 call    _Backward@12    ; Backward(x,x,x)
.text:000037B7                 jmp     loc_4BDE
.text:000037BC ; ---------------------------------------------------------------------------
.text:000037BC
.text:000037BC loc_37BC:                               ; CODE XREF: GetOptimum(x,x,x)+864j
.text:000037BC                 lea     ecx, [ebp+var_D0]
.text:000037C2                 push    ecx
.text:000037C3                 mov     edx, [ebp+arg_0]
.text:000037C6                 push    edx
.text:000037C7                 call    _ReadMatchDistances@8 ; ReadMatchDistances(x,x)
.text:000037CC                 mov     [ebp+var_C8], eax
.text:000037D2                 mov     eax, [ebp+arg_0]
.text:000037D5                 mov     ecx, [ebp+var_C8]
.text:000037DB                 cmp     ecx, [eax+2Ch]
.text:000037DE                 jb      short loc_380E
.text:000037E0                 mov     edx, [ebp+arg_0]
.text:000037E3                 mov     eax, [ebp+var_D0]
.text:000037E9                 mov     [edx+24h], eax
.text:000037EC                 mov     ecx, [ebp+arg_0]
.text:000037EF                 mov     edx, [ebp+var_C8]
.text:000037F5                 mov     [ecx+20h], edx
.text:000037F8                 mov     eax, [ebp+var_30]
.text:000037FB                 push    eax
.text:000037FC                 mov     ecx, [ebp+arg_8]
.text:000037FF                 push    ecx
.text:00003800                 mov     edx, [ebp+arg_0]
.text:00003803                 push    edx
.text:00003804                 call    _Backward@12    ; Backward(x,x,x)
.text:00003809                 jmp     loc_4BDE
.text:0000380E ; ---------------------------------------------------------------------------
.text:0000380E
.text:0000380E loc_380E:                               ; CODE XREF: GetOptimum(x,x,x)+89Ej
.text:0000380E                 mov     eax, [ebp+arg_4]
.text:00003811                 add     eax, 1
.text:00003814                 mov     [ebp+arg_4], eax
.text:00003817                 mov     ecx, [ebp+var_30]
.text:0000381A                 imul    ecx, 30h
.text:0000381D                 mov     edx, [ebp+arg_0]
.text:00003820                 lea     eax, [edx+ecx+734h]
.text:00003827                 mov     [ebp+var_104], eax
.text:0000382D                 mov     ecx, [ebp+var_104]
.text:00003833                 mov     edx, [ecx+18h]
.text:00003836                 mov     [ebp+var_D8], edx
.text:0000383C                 mov     eax, [ebp+var_104]
.text:00003842                 cmp     dword ptr [eax+8], 0
.text:00003846                 jz      loc_38E7
.text:0000384C                 mov     ecx, [ebp+var_D8]
.text:00003852                 sub     ecx, 1
.text:00003855                 mov     [ebp+var_D8], ecx
.text:0000385B                 mov     edx, [ebp+var_104]
.text:00003861                 cmp     dword ptr [edx+0Ch], 0
.text:00003865                 jz      short loc_38B9
.text:00003867                 mov     eax, [ebp+var_104]
.text:0000386D                 mov     ecx, [eax+10h]
.text:00003870                 imul    ecx, 30h
.text:00003873                 mov     edx, [ebp+arg_0]
.text:00003876                 mov     eax, [edx+ecx+738h]
.text:0000387D                 mov     [ebp+var_DC], eax
.text:00003883                 mov     ecx, [ebp+var_104]
.text:00003889                 cmp     dword ptr [ecx+14h], 4
.text:0000388D                 jnb     short loc_38A4
.text:0000388F                 mov     edx, [ebp+var_DC]
.text:00003895                 mov     eax, _kRepNextStates[edx*4]
.text:0000389C                 mov     [ebp+var_DC], eax
.text:000038A2                 jmp     short loc_38B7
.text:000038A4 ; ---------------------------------------------------------------------------
.text:000038A4
.text:000038A4 loc_38A4:                               ; CODE XREF: GetOptimum(x,x,x)+94Dj
.text:000038A4                 mov     ecx, [ebp+var_DC]
.text:000038AA                 mov     edx, _kMatchNextStates[ecx*4]
.text:000038B1                 mov     [ebp+var_DC], edx
.text:000038B7
.text:000038B7 loc_38B7:                               ; CODE XREF: GetOptimum(x,x,x)+962j
.text:000038B7                 jmp     short loc_38D2
.text:000038B9 ; ---------------------------------------------------------------------------
.text:000038B9
.text:000038B9 loc_38B9:                               ; CODE XREF: GetOptimum(x,x,x)+925j
.text:000038B9                 mov     eax, [ebp+var_D8]
.text:000038BF                 imul    eax, 30h
.text:000038C2                 mov     ecx, [ebp+arg_0]
.text:000038C5                 mov     edx, [ecx+eax+738h]
.text:000038CC                 mov     [ebp+var_DC], edx
.text:000038D2
.text:000038D2 loc_38D2:                               ; CODE XREF: GetOptimum(x,x,x):loc_38B7j
.text:000038D2                 mov     eax, [ebp+var_DC]
.text:000038D8                 mov     ecx, _kLiteralNextStates[eax*4]
.text:000038DF                 mov     [ebp+var_DC], ecx
.text:000038E5                 jmp     short loc_3900
.text:000038E7 ; ---------------------------------------------------------------------------
.text:000038E7
.text:000038E7 loc_38E7:                               ; CODE XREF: GetOptimum(x,x,x)+906j
.text:000038E7                 mov     edx, [ebp+var_D8]
.text:000038ED                 imul    edx, 30h
.text:000038F0                 mov     eax, [ebp+arg_0]
.text:000038F3                 mov     ecx, [eax+edx+738h]
.text:000038FA                 mov     [ebp+var_DC], ecx
.text:00003900
.text:00003900 loc_3900:                               ; CODE XREF: GetOptimum(x,x,x)+9A5j
.text:00003900                 mov     edx, [ebp+var_30]
.text:00003903                 sub     edx, 1
.text:00003906                 cmp     [ebp+var_D8], edx
.text:0000390C                 jnz     short loc_3947
.text:0000390E                 mov     eax, [ebp+var_104]
.text:00003914                 cmp     dword ptr [eax+1Ch], 0
.text:00003918                 jnz     short loc_392F
.text:0000391A                 mov     ecx, [ebp+var_DC]
.text:00003920                 mov     edx, _kShortRepNextStates[ecx*4]
.text:00003927                 mov     [ebp+var_DC], edx
.text:0000392D                 jmp     short loc_3942
.text:0000392F ; ---------------------------------------------------------------------------
.text:0000392F
.text:0000392F loc_392F:                               ; CODE XREF: GetOptimum(x,x,x)+9D8j
.text:0000392F                 mov     eax, [ebp+var_DC]
.text:00003935                 mov     ecx, _kLiteralNextStates[eax*4]
.text:0000393C                 mov     [ebp+var_DC], ecx
.text:00003942
.text:00003942 loc_3942:                               ; CODE XREF: GetOptimum(x,x,x)+9EDj
.text:00003942                 jmp     loc_3AD4
.text:00003947 ; ---------------------------------------------------------------------------
.text:00003947
.text:00003947 loc_3947:                               ; CODE XREF: GetOptimum(x,x,x)+9CCj
.text:00003947                 mov     edx, [ebp+var_104]
.text:0000394D                 cmp     dword ptr [edx+8], 0
.text:00003951                 jz      short loc_3992
.text:00003953                 mov     eax, [ebp+var_104]
.text:00003959                 cmp     dword ptr [eax+0Ch], 0
.text:0000395D                 jz      short loc_3992
.text:0000395F                 mov     ecx, [ebp+var_104]
.text:00003965                 mov     edx, [ecx+10h]
.text:00003968                 mov     [ebp+var_D8], edx
.text:0000396E                 mov     eax, [ebp+var_104]
.text:00003974                 mov     ecx, [eax+14h]
.text:00003977                 mov     [ebp+var_10C], ecx
.text:0000397D                 mov     edx, [ebp+var_DC]
.text:00003983                 mov     eax, _kRepNextStates[edx*4]
.text:0000398A                 mov     [ebp+var_DC], eax
.text:00003990                 jmp     short loc_39D2
.text:00003992 ; ---------------------------------------------------------------------------
.text:00003992
.text:00003992 loc_3992:                               ; CODE XREF: GetOptimum(x,x,x)+A11j
.text:00003992                                         ; GetOptimum(x,x,x)+A1Dj
.text:00003992                 mov     ecx, [ebp+var_104]
.text:00003998                 mov     edx, [ecx+1Ch]
.text:0000399B                 mov     [ebp+var_10C], edx
.text:000039A1                 cmp     [ebp+var_10C], 4
.text:000039A8                 jnb     short loc_39BF
.text:000039AA                 mov     eax, [ebp+var_DC]
.text:000039B0                 mov     ecx, _kRepNextStates[eax*4]
.text:000039B7                 mov     [ebp+var_DC], ecx
.text:000039BD                 jmp     short loc_39D2
.text:000039BF ; ---------------------------------------------------------------------------
.text:000039BF
.text:000039BF loc_39BF:                               ; CODE XREF: GetOptimum(x,x,x)+A68j
.text:000039BF                 mov     edx, [ebp+var_DC]
.text:000039C5                 mov     eax, _kMatchNextStates[edx*4]
.text:000039CC                 mov     [ebp+var_DC], eax
.text:000039D2
.text:000039D2 loc_39D2:                               ; CODE XREF: GetOptimum(x,x,x)+A50j
.text:000039D2                                         ; GetOptimum(x,x,x)+A7Dj
.text:000039D2                 mov     ecx, [ebp+var_D8]
.text:000039D8                 imul    ecx, 30h
.text:000039DB                 mov     edx, [ebp+arg_0]
.text:000039DE                 lea     eax, [edx+ecx+734h]
.text:000039E5                 mov     [ebp+var_110], eax
.text:000039EB                 cmp     [ebp+var_10C], 4
.text:000039F2                 jnb     loc_3A88
.text:000039F8                 mov     ecx, [ebp+var_10C]
.text:000039FE                 mov     edx, [ebp+var_110]
.text:00003A04                 mov     eax, [edx+ecx*4+20h]
.text:00003A08                 mov     [ebp+var_50], eax
.text:00003A0B                 mov     [ebp+var_114], 1
.text:00003A15                 jmp     short loc_3A26
.text:00003A17 ; ---------------------------------------------------------------------------
.text:00003A17
.text:00003A17 loc_3A17:                               ; CODE XREF: GetOptimum(x,x,x)+B0Ej
.text:00003A17                 mov     ecx, [ebp+var_114]
.text:00003A1D                 add     ecx, 1
.text:00003A20                 mov     [ebp+var_114], ecx
.text:00003A26
.text:00003A26 loc_3A26:                               ; CODE XREF: GetOptimum(x,x,x)+AD5j
.text:00003A26                 mov     edx, [ebp+var_114]
.text:00003A2C                 cmp     edx, [ebp+var_10C]
.text:00003A32                 ja      short loc_3A50
.text:00003A34                 mov     eax, [ebp+var_114]
.text:00003A3A                 mov     ecx, [ebp+var_114]
.text:00003A40                 mov     edx, [ebp+var_110]
.text:00003A46                 mov     ecx, [edx+ecx*4+1Ch]
.text:00003A4A                 mov     [ebp+eax*4+var_50], ecx
.text:00003A4E                 jmp     short loc_3A17
.text:00003A50 ; ---------------------------------------------------------------------------
.text:00003A50
.text:00003A50 loc_3A50:                               ; CODE XREF: GetOptimum(x,x,x)+AF2j
.text:00003A50                 jmp     short loc_3A61
.text:00003A52 ; ---------------------------------------------------------------------------
.text:00003A52
.text:00003A52 loc_3A52:                               ; CODE XREF: GetOptimum(x,x,x)+B44j
.text:00003A52                 mov     edx, [ebp+var_114]
.text:00003A58                 add     edx, 1
.text:00003A5B                 mov     [ebp+var_114], edx
.text:00003A61
.text:00003A61 loc_3A61:                               ; CODE XREF: GetOptimum(x,x,x):loc_3A50j
.text:00003A61                 cmp     [ebp+var_114], 4
.text:00003A68                 jnb     short loc_3A86
.text:00003A6A                 mov     eax, [ebp+var_114]
.text:00003A70                 mov     ecx, [ebp+var_114]
.text:00003A76                 mov     edx, [ebp+var_110]
.text:00003A7C                 mov     ecx, [edx+ecx*4+20h]
.text:00003A80                 mov     [ebp+eax*4+var_50], ecx
.text:00003A84                 jmp     short loc_3A52
.text:00003A86 ; ---------------------------------------------------------------------------
.text:00003A86
.text:00003A86 loc_3A86:                               ; CODE XREF: GetOptimum(x,x,x)+B28j
.text:00003A86                 jmp     short loc_3AD4
.text:00003A88 ; ---------------------------------------------------------------------------
.text:00003A88
.text:00003A88 loc_3A88:                               ; CODE XREF: GetOptimum(x,x,x)+AB2j
.text:00003A88                 mov     edx, [ebp+var_10C]
.text:00003A8E                 sub     edx, 4
.text:00003A91                 mov     [ebp+var_50], edx
.text:00003A94                 mov     [ebp+var_118], 1
.text:00003A9E                 jmp     short loc_3AAF
.text:00003AA0 ; ---------------------------------------------------------------------------
.text:00003AA0
.text:00003AA0 loc_3AA0:                               ; CODE XREF: GetOptimum(x,x,x)+B92j
.text:00003AA0                 mov     eax, [ebp+var_118]
.text:00003AA6                 add     eax, 1
.text:00003AA9                 mov     [ebp+var_118], eax
.text:00003AAF
.text:00003AAF loc_3AAF:                               ; CODE XREF: GetOptimum(x,x,x)+B5Ej
.text:00003AAF                 cmp     [ebp+var_118], 4
.text:00003AB6                 jnb     short loc_3AD4
.text:00003AB8                 mov     ecx, [ebp+var_118]
.text:00003ABE                 mov     edx, [ebp+var_118]
.text:00003AC4                 mov     eax, [ebp+var_110]
.text:00003ACA                 mov     edx, [eax+edx*4+1Ch]
.text:00003ACE                 mov     [ebp+ecx*4+var_50], edx
.text:00003AD2                 jmp     short loc_3AA0
.text:00003AD4 ; ---------------------------------------------------------------------------
.text:00003AD4
.text:00003AD4 loc_3AD4:                               ; CODE XREF: GetOptimum(x,x,x):loc_3942j
.text:00003AD4                                         ; GetOptimum(x,x,x):loc_3A86j ...
.text:00003AD4                 mov     eax, [ebp+var_104]
.text:00003ADA                 mov     ecx, [ebp+var_DC]
.text:00003AE0                 mov     [eax+4], ecx
.text:00003AE3                 mov     edx, [ebp+var_104]
.text:00003AE9                 mov     eax, [ebp+var_50]
.text:00003AEC                 mov     [edx+20h], eax
.text:00003AEF                 mov     ecx, [ebp+var_104]
.text:00003AF5                 mov     edx, [ebp+var_4C]
.text:00003AF8                 mov     [ecx+24h], edx
.text:00003AFB                 mov     eax, [ebp+var_104]
.text:00003B01                 mov     ecx, [ebp+var_48]
.text:00003B04                 mov     [eax+28h], ecx
.text:00003B07                 mov     edx, [ebp+var_104]
.text:00003B0D                 mov     eax, [ebp+var_44]
.text:00003B10                 mov     [edx+2Ch], eax
.text:00003B13                 mov     ecx, [ebp+var_104]
.text:00003B19                 mov     edx, [ecx]
.text:00003B1B                 mov     [ebp+var_E8], edx
.text:00003B21                 mov     [ebp+var_F8], 0
.text:00003B2B                 mov     esi, esp
.text:00003B2D                 mov     eax, [ebp+arg_0]
.text:00003B30                 mov     ecx, [eax]
.text:00003B32                 push    ecx
.text:00003B33                 mov     edx, [ebp+arg_0]
.text:00003B36                 mov     eax, [edx+0Ch]
.text:00003B39                 call    eax
.text:00003B3B                 cmp     esi, esp
.text:00003B3D                 call    __RTC_CheckEsp
.text:00003B42                 sub     eax, 1
.text:00003B45                 mov     [ebp+var_100], eax
.text:00003B4B                 mov     ecx, [ebp+var_100]
.text:00003B51                 mov     dl, [ecx]
.text:00003B53                 mov     [ebp+var_F9], dl
.text:00003B59                 mov     eax, [ebp+var_50]
.text:00003B5C                 add     eax, 1
.text:00003B5F                 mov     ecx, [ebp+var_100]
.text:00003B65                 sub     ecx, eax
.text:00003B67                 mov     dl, [ecx]
.text:00003B69                 mov     [ebp+var_FA], dl
.text:00003B6F                 mov     eax, [ebp+arg_0]
.text:00003B72                 mov     ecx, [ebp+arg_4]
.text:00003B75                 and     ecx, [eax+58h]
.text:00003B78                 mov     [ebp+var_E0], ecx
.text:00003B7E                 mov     edx, [ebp+var_DC]
.text:00003B84                 shl     edx, 5
.text:00003B87                 mov     eax, [ebp+arg_0]
.text:00003B8A                 lea     ecx, [eax+edx+32608h]
.text:00003B91                 mov     edx, [ebp+var_E0]
.text:00003B97                 movzx   eax, word ptr [ecx+edx*2]
.text:00003B9B                 sar     eax, 4
.text:00003B9E                 mov     ecx, [ebp+arg_0]
.text:00003BA1                 mov     edx, [ebp+var_E8]
.text:00003BA7                 add     edx, [ecx+eax*4+30F34h]
.text:00003BAE                 mov     [ebp+var_EC], edx
.text:00003BB4                 mov     eax, [ebp+arg_0]
.text:00003BB7                 mov     edx, [ebp+arg_4]
.text:00003BBA                 and     edx, [eax+54h]
.text:00003BBD                 mov     eax, [ebp+arg_0]
.text:00003BC0                 mov     ecx, [eax+48h]
.text:00003BC3                 shl     edx, cl
.text:00003BC5                 mov     ecx, [ebp+var_100]
.text:00003BCB                 movzx   eax, byte ptr [ecx-1]
.text:00003BCF                 mov     ecx, [ebp+arg_0]
.text:00003BD2                 mov     esi, 8
.text:00003BD7                 sub     esi, [ecx+48h]
.text:00003BDA                 mov     ecx, esi
.text:00003BDC                 sar     eax, cl
.text:00003BDE                 add     edx, eax
.text:00003BE0                 imul    edx, 300h
.text:00003BE6                 mov     eax, [ebp+arg_0]
.text:00003BE9                 mov     ecx, [eax+60h]
.text:00003BEC                 lea     edx, [ecx+edx*2]
.text:00003BEF                 mov     [ebp+var_11C], edx
.text:00003BF5                 cmp     [ebp+var_DC], 7
.text:00003BFC                 jb      short loc_3C2B
.text:00003BFE                 mov     eax, [ebp+arg_0]
.text:00003C01                 add     eax, 30F34h
.text:00003C06                 push    eax
.text:00003C07                 movzx   ecx, [ebp+var_FA]
.text:00003C0E                 push    ecx
.text:00003C0F                 movzx   edx, [ebp+var_F9]
.text:00003C16                 push    edx
.text:00003C17                 mov     eax, [ebp+var_11C]
.text:00003C1D                 push    eax
.text:00003C1E                 call    _LitEnc_GetPriceMatched@16 ; LitEnc_GetPriceMatched(x,x,x,x)
.text:00003C23                 mov     [ebp+var_1F0], eax
.text:00003C29                 jmp     short loc_3C4F
.text:00003C2B ; ---------------------------------------------------------------------------
.text:00003C2B
.text:00003C2B loc_3C2B:                               ; CODE XREF: GetOptimum(x,x,x)+CBCj
.text:00003C2B                 mov     ecx, [ebp+arg_0]
.text:00003C2E                 add     ecx, 30F34h
.text:00003C34                 push    ecx
.text:00003C35                 movzx   edx, [ebp+var_F9]
.text:00003C3C                 push    edx
.text:00003C3D                 mov     eax, [ebp+var_11C]
.text:00003C43                 push    eax
.text:00003C44                 call    _LitEnc_GetPrice@12 ; LitEnc_GetPrice(x,x,x)
.text:00003C49                 mov     [ebp+var_1F0], eax
.text:00003C4F
.text:00003C4F loc_3C4F:                               ; CODE XREF: GetOptimum(x,x,x)+CE9j
.text:00003C4F                 mov     ecx, [ebp+var_EC]
.text:00003C55                 add     ecx, [ebp+var_1F0]
.text:00003C5B                 mov     [ebp+var_EC], ecx
.text:00003C61                 mov     edx, [ebp+var_30]
.text:00003C64                 add     edx, 1
.text:00003C67                 imul    edx, 30h
.text:00003C6A                 mov     eax, [ebp+arg_0]
.text:00003C6D                 lea     ecx, [eax+edx+734h]
.text:00003C74                 mov     [ebp+var_108], ecx
.text:00003C7A                 mov     edx, [ebp+var_108]
.text:00003C80                 mov     eax, [ebp+var_EC]
.text:00003C86                 cmp     eax, [edx]
.text:00003C88                 jnb     short loc_3CC8
.text:00003C8A                 mov     ecx, [ebp+var_108]
.text:00003C90                 mov     edx, [ebp+var_EC]
.text:00003C96                 mov     [ecx], edx
.text:00003C98                 mov     eax, [ebp+var_108]
.text:00003C9E                 mov     ecx, [ebp+var_30]
.text:00003CA1                 mov     [eax+18h], ecx
.text:00003CA4                 mov     edx, [ebp+var_108]
.text:00003CAA                 mov     dword ptr [edx+1Ch], 0FFFFFFFFh
.text:00003CB1                 mov     eax, [ebp+var_108]
.text:00003CB7                 mov     dword ptr [eax+8], 0
.text:00003CBE                 mov     [ebp+var_F8], 1
.text:00003CC8
.text:00003CC8 loc_3CC8:                               ; CODE XREF: GetOptimum(x,x,x)+D48j
.text:00003CC8                 mov     ecx, [ebp+var_DC]
.text:00003CCE                 shl     ecx, 5
.text:00003CD1                 mov     edx, [ebp+arg_0]
.text:00003CD4                 lea     eax, [edx+ecx+32608h]
.text:00003CDB                 mov     ecx, [ebp+var_E0]
.text:00003CE1                 movzx   edx, word ptr [eax+ecx*2]
.text:00003CE5                 xor     edx, 7FFh
.text:00003CEB                 sar     edx, 4
.text:00003CEE                 mov     eax, [ebp+arg_0]
.text:00003CF1                 mov     ecx, [ebp+var_E8]
.text:00003CF7                 add     ecx, [eax+edx*4+30F34h]
.text:00003CFE                 mov     [ebp+var_F0], ecx
.text:00003D04                 mov     edx, [ebp+var_DC]
.text:00003D0A                 mov     eax, [ebp+arg_0]
.text:00003D0D                 movzx   ecx, word ptr [eax+edx*2+32788h]
.text:00003D15                 xor     ecx, 7FFh
.text:00003D1B                 sar     ecx, 4
.text:00003D1E                 mov     edx, [ebp+arg_0]
.text:00003D21                 mov     eax, [ebp+var_F0]
.text:00003D27                 add     eax, [edx+ecx*4+30F34h]
.text:00003D2E                 mov     [ebp+var_F4], eax
.text:00003D34                 movzx   ecx, [ebp+var_FA]
.text:00003D3B                 movzx   edx, [ebp+var_F9]
.text:00003D42                 cmp     ecx, edx
.text:00003D44                 jnz     loc_3DD5
.text:00003D4A                 mov     eax, [ebp+var_108]
.text:00003D50                 mov     ecx, [eax+18h]
.text:00003D53                 cmp     ecx, [ebp+var_30]
.text:00003D56                 jnb     short loc_3D64
.text:00003D58                 mov     edx, [ebp+var_108]
.text:00003D5E                 cmp     dword ptr [edx+1Ch], 0
.text:00003D62                 jz      short loc_3DD5
.text:00003D64
.text:00003D64 loc_3D64:                               ; CODE XREF: GetOptimum(x,x,x)+E16j
.text:00003D64                 mov     eax, [ebp+var_E0]
.text:00003D6A                 push    eax
.text:00003D6B                 mov     ecx, [ebp+var_DC]
.text:00003D71                 push    ecx
.text:00003D72                 mov     edx, [ebp+arg_0]
.text:00003D75                 push    edx
.text:00003D76                 call    _GetRepLen1Price@12 ; GetRepLen1Price(x,x,x)
.text:00003D7B                 add     eax, [ebp+var_F4]
.text:00003D81                 mov     [ebp+var_120], eax
.text:00003D87                 mov     eax, [ebp+var_108]
.text:00003D8D                 mov     ecx, [ebp+var_120]
.text:00003D93                 cmp     ecx, [eax]
.text:00003D95                 ja      short loc_3DD5
.text:00003D97                 mov     edx, [ebp+var_108]
.text:00003D9D                 mov     eax, [ebp+var_120]
.text:00003DA3                 mov     [edx], eax
.text:00003DA5                 mov     ecx, [ebp+var_108]
.text:00003DAB                 mov     edx, [ebp+var_30]
.text:00003DAE                 mov     [ecx+18h], edx
.text:00003DB1                 mov     eax, [ebp+var_108]
.text:00003DB7                 mov     dword ptr [eax+1Ch], 0
.text:00003DBE                 mov     ecx, [ebp+var_108]
.text:00003DC4                 mov     dword ptr [ecx+8], 0
.text:00003DCB                 mov     [ebp+var_F8], 1
.text:00003DD5
.text:00003DD5 loc_3DD5:                               ; CODE XREF: GetOptimum(x,x,x)+E04j
.text:00003DD5                                         ; GetOptimum(x,x,x)+E22j ...
.text:00003DD5                 mov     edx, [ebp+arg_0]
.text:00003DD8                 mov     eax, [edx+28h]
.text:00003DDB                 mov     [ebp+var_C4], eax
.text:00003DE1                 mov     ecx, 0FFFh
.text:00003DE6                 sub     ecx, [ebp+var_30]
.text:00003DE9                 mov     [ebp+var_124], ecx
.text:00003DEF                 mov     edx, [ebp+var_124]
.text:00003DF5                 cmp     edx, [ebp+var_C4]
.text:00003DFB                 jnb     short loc_3E09
.text:00003DFD                 mov     eax, [ebp+var_124]
.text:00003E03                 mov     [ebp+var_C4], eax
.text:00003E09
.text:00003E09 loc_3E09:                               ; CODE XREF: GetOptimum(x,x,x)+EBBj
.text:00003E09                 cmp     [ebp+var_C4], 2
.text:00003E10                 jnb     short loc_3E17
.text:00003E12                 jmp     loc_3795
.text:00003E17 ; ---------------------------------------------------------------------------
.text:00003E17
.text:00003E17 loc_3E17:                               ; CODE XREF: GetOptimum(x,x,x)+ED0j
.text:00003E17                 mov     ecx, [ebp+arg_0]
.text:00003E1A                 mov     edx, [ebp+var_C4]
.text:00003E20                 cmp     edx, [ecx+2Ch]
.text:00003E23                 ja      short loc_3E33
.text:00003E25                 mov     eax, [ebp+var_C4]
.text:00003E2B                 mov     [ebp+var_1F4], eax
.text:00003E31                 jmp     short loc_3E3F
.text:00003E33 ; ---------------------------------------------------------------------------
.text:00003E33
.text:00003E33 loc_3E33:                               ; CODE XREF: GetOptimum(x,x,x)+EE3j
.text:00003E33                 mov     ecx, [ebp+arg_0]
.text:00003E36                 mov     edx, [ecx+2Ch]
.text:00003E39                 mov     [ebp+var_1F4], edx
.text:00003E3F
.text:00003E3F loc_3E3F:                               ; CODE XREF: GetOptimum(x,x,x)+EF1j
.text:00003E3F                 mov     eax, [ebp+var_1F4]
.text:00003E45                 mov     [ebp+var_8], eax
.text:00003E48                 cmp     [ebp+var_F8], 0
.text:00003E4F                 jnz     loc_406A
.text:00003E55                 movzx   ecx, [ebp+var_FA]
.text:00003E5C                 movzx   edx, [ebp+var_F9]
.text:00003E63                 cmp     ecx, edx
.text:00003E65                 jz      loc_406A
.text:00003E6B                 mov     eax, [ebp+var_100]
.text:00003E71                 sub     eax, [ebp+var_50]
.text:00003E74                 sub     eax, 1
.text:00003E77                 mov     [ebp+var_130], eax
.text:00003E7D                 mov     ecx, [ebp+arg_0]
.text:00003E80                 mov     edx, [ecx+2Ch]
.text:00003E83                 add     edx, 1
.text:00003E86                 mov     [ebp+var_134], edx
.text:00003E8C                 mov     eax, [ebp+var_134]
.text:00003E92                 cmp     eax, [ebp+var_C4]
.text:00003E98                 jbe     short loc_3EA6
.text:00003E9A                 mov     ecx, [ebp+var_C4]
.text:00003EA0                 mov     [ebp+var_134], ecx
.text:00003EA6
.text:00003EA6 loc_3EA6:                               ; CODE XREF: GetOptimum(x,x,x)+F58j
.text:00003EA6                 mov     [ebp+var_128], 1
.text:00003EB0                 jmp     short loc_3EC1
.text:00003EB2 ; ---------------------------------------------------------------------------
.text:00003EB2
.text:00003EB2 loc_3EB2:                               ; CODE XREF: GetOptimum(x,x,x)+FB1j
.text:00003EB2                 mov     edx, [ebp+var_128]
.text:00003EB8                 add     edx, 1
.text:00003EBB                 mov     [ebp+var_128], edx
.text:00003EC1
.text:00003EC1 loc_3EC1:                               ; CODE XREF: GetOptimum(x,x,x)+F70j
.text:00003EC1                 mov     eax, [ebp+var_128]
.text:00003EC7                 cmp     eax, [ebp+var_134]
.text:00003ECD                 jnb     short loc_3EF3
.text:00003ECF                 mov     ecx, [ebp+var_100]
.text:00003ED5                 add     ecx, [ebp+var_128]
.text:00003EDB                 movzx   edx, byte ptr [ecx]
.text:00003EDE                 mov     eax, [ebp+var_130]
.text:00003EE4                 add     eax, [ebp+var_128]
.text:00003EEA                 movzx   ecx, byte ptr [eax]
.text:00003EED                 cmp     edx, ecx
.text:00003EEF                 jnz     short loc_3EF3
.text:00003EF1                 jmp     short loc_3EB2
.text:00003EF3 ; ---------------------------------------------------------------------------
.text:00003EF3
.text:00003EF3 loc_3EF3:                               ; CODE XREF: GetOptimum(x,x,x)+F8Dj
.text:00003EF3                                         ; GetOptimum(x,x,x)+FAFj
.text:00003EF3                 mov     edx, [ebp+var_128]
.text:00003EF9                 sub     edx, 1
.text:00003EFC                 mov     [ebp+var_12C], edx
.text:00003F02                 cmp     [ebp+var_12C], 2
.text:00003F09                 jb      loc_406A
.text:00003F0F                 mov     eax, [ebp+var_DC]
.text:00003F15                 mov     ecx, _kLiteralNextStates[eax*4]
.text:00003F1C                 mov     [ebp+var_138], ecx
.text:00003F22                 mov     edx, [ebp+arg_4]
.text:00003F25                 add     edx, 1
.text:00003F28                 mov     eax, [ebp+arg_0]
.text:00003F2B                 and     edx, [eax+58h]
.text:00003F2E                 mov     [ebp+var_13C], edx
.text:00003F34                 mov     ecx, [ebp+var_138]
.text:00003F3A                 shl     ecx, 5
.text:00003F3D                 mov     edx, [ebp+arg_0]
.text:00003F40                 lea     eax, [edx+ecx+32608h]
.text:00003F47                 mov     ecx, [ebp+var_13C]
.text:00003F4D                 movzx   edx, word ptr [eax+ecx*2]
.text:00003F51                 xor     edx, 7FFh
.text:00003F57                 sar     edx, 4
.text:00003F5A                 mov     eax, [ebp+arg_0]
.text:00003F5D                 mov     ecx, [ebp+var_EC]
.text:00003F63                 add     ecx, [eax+edx*4+30F34h]
.text:00003F6A                 mov     edx, [ebp+var_138]
.text:00003F70                 mov     eax, [ebp+arg_0]
.text:00003F73                 movzx   edx, word ptr [eax+edx*2+32788h]
.text:00003F7B                 xor     edx, 7FFh
.text:00003F81                 sar     edx, 4
.text:00003F84                 mov     eax, [ebp+arg_0]
.text:00003F87                 add     ecx, [eax+edx*4+30F34h]
.text:00003F8E                 mov     [ebp+var_140], ecx
.text:00003F94                 mov     ecx, [ebp+var_12C]
.text:00003F9A                 mov     edx, [ebp+var_30]
.text:00003F9D                 lea     eax, [edx+ecx+1]
.text:00003FA1                 mov     [ebp+var_14C], eax
.text:00003FA7
.text:00003FA7 loc_3FA7:                               ; CODE XREF: GetOptimum(x,x,x)+108Fj
.text:00003FA7                 mov     ecx, [ebp+var_28]
.text:00003FAA                 cmp     ecx, [ebp+var_14C]
.text:00003FB0                 jnb     short loc_3FD1
.text:00003FB2                 mov     edx, [ebp+var_28]
.text:00003FB5                 add     edx, 1
.text:00003FB8                 mov     [ebp+var_28], edx
.text:00003FBB                 mov     eax, [ebp+var_28]
.text:00003FBE                 imul    eax, 30h
.text:00003FC1                 mov     ecx, [ebp+arg_0]
.text:00003FC4                 mov     dword ptr [ecx+eax+734h], 40000000h
.text:00003FCF                 jmp     short loc_3FA7
.text:00003FD1 ; ---------------------------------------------------------------------------
.text:00003FD1
.text:00003FD1 loc_3FD1:                               ; CODE XREF: GetOptimum(x,x,x)+1070j
.text:00003FD1                 mov     edx, [ebp+var_13C]
.text:00003FD7                 push    edx
.text:00003FD8                 mov     eax, [ebp+var_138]
.text:00003FDE                 push    eax
.text:00003FDF                 mov     ecx, [ebp+var_12C]
.text:00003FE5                 push    ecx
.text:00003FE6                 push    0
.text:00003FE8                 mov     edx, [ebp+arg_0]
.text:00003FEB                 push    edx
.text:00003FEC                 call    _GetRepPrice@20 ; GetRepPrice(x,x,x,x,x)
.text:00003FF1                 add     eax, [ebp+var_140]
.text:00003FF7                 mov     [ebp+var_144], eax
.text:00003FFD                 mov     eax, [ebp+var_14C]
.text:00004003                 imul    eax, 30h
.text:00004006                 mov     ecx, [ebp+arg_0]
.text:00004009                 lea     edx, [ecx+eax+734h]
.text:00004010                 mov     [ebp+var_148], edx
.text:00004016                 mov     eax, [ebp+var_148]
.text:0000401C                 mov     ecx, [ebp+var_144]
.text:00004022                 cmp     ecx, [eax]
.text:00004024                 jnb     short loc_406A
.text:00004026                 mov     edx, [ebp+var_148]
.text:0000402C                 mov     eax, [ebp+var_144]
.text:00004032                 mov     [edx], eax
.text:00004034                 mov     ecx, [ebp+var_30]
.text:00004037                 add     ecx, 1
.text:0000403A                 mov     edx, [ebp+var_148]
.text:00004040                 mov     [edx+18h], ecx
.text:00004043                 mov     eax, [ebp+var_148]
.text:00004049                 mov     dword ptr [eax+1Ch], 0
.text:00004050                 mov     ecx, [ebp+var_148]
.text:00004056                 mov     dword ptr [ecx+8], 1
.text:0000405D                 mov     edx, [ebp+var_148]
.text:00004063                 mov     dword ptr [edx+0Ch], 0
.text:0000406A
.text:0000406A loc_406A:                               ; CODE XREF: GetOptimum(x,x,x)+F0Fj
.text:0000406A                                         ; GetOptimum(x,x,x)+F25j ...
.text:0000406A                 mov     [ebp+var_E4], 2
.text:00004074                 mov     [ebp+var_150], 0
.text:0000407E                 jmp     short loc_408F
.text:00004080 ; ---------------------------------------------------------------------------
.text:00004080
.text:00004080 loc_4080:                               ; CODE XREF: GetOptimum(x,x,x):loc_40E3j
.text:00004080                                         ; GetOptimum(x,x,x):loc_4583j
.text:00004080                 mov     eax, [ebp+var_150]
.text:00004086                 add     eax, 1
.text:00004089                 mov     [ebp+var_150], eax
.text:0000408F
.text:0000408F loc_408F:                               ; CODE XREF: GetOptimum(x,x,x)+113Ej
.text:0000408F                 cmp     [ebp+var_150], 4
.text:00004096                 jnb     loc_4588
.text:0000409C                 mov     ecx, [ebp+var_150]
.text:000040A2                 mov     edx, [ebp+var_100]
.text:000040A8                 sub     edx, [ebp+ecx*4+var_50]
.text:000040AC                 sub     edx, 1
.text:000040AF                 mov     [ebp+var_160], edx
.text:000040B5                 mov     eax, [ebp+var_100]
.text:000040BB                 movzx   ecx, byte ptr [eax]
.text:000040BE                 mov     edx, [ebp+var_160]
.text:000040C4                 movzx   eax, byte ptr [edx]
.text:000040C7                 cmp     ecx, eax
.text:000040C9                 jnz     short loc_40E3
.text:000040CB                 mov     ecx, [ebp+var_100]
.text:000040D1                 movzx   edx, byte ptr [ecx+1]
.text:000040D5                 mov     eax, [ebp+var_160]
.text:000040DB                 movzx   ecx, byte ptr [eax+1]
.text:000040DF                 cmp     edx, ecx
.text:000040E1                 jz      short loc_40E5
.text:000040E3
.text:000040E3 loc_40E3:                               ; CODE XREF: GetOptimum(x,x,x)+1189j
.text:000040E3                 jmp     short loc_4080
.text:000040E5 ; ---------------------------------------------------------------------------
.text:000040E5
.text:000040E5 loc_40E5:                               ; CODE XREF: GetOptimum(x,x,x)+11A1j
.text:000040E5                 mov     [ebp+var_154], 2
.text:000040EF                 jmp     short loc_4100
.text:000040F1 ; ---------------------------------------------------------------------------
.text:000040F1
.text:000040F1 loc_40F1:                               ; CODE XREF: GetOptimum(x,x,x)+11EDj
.text:000040F1                 mov     edx, [ebp+var_154]
.text:000040F7                 add     edx, 1
.text:000040FA                 mov     [ebp+var_154], edx
.text:00004100
.text:00004100 loc_4100:                               ; CODE XREF: GetOptimum(x,x,x)+11AFj
.text:00004100                 mov     eax, [ebp+var_154]
.text:00004106                 cmp     eax, [ebp+var_8]
.text:00004109                 jnb     short loc_412F
.text:0000410B                 mov     ecx, [ebp+var_100]
.text:00004111                 add     ecx, [ebp+var_154]
.text:00004117                 movzx   edx, byte ptr [ecx]
.text:0000411A                 mov     eax, [ebp+var_160]
.text:00004120                 add     eax, [ebp+var_154]
.text:00004126                 movzx   ecx, byte ptr [eax]
.text:00004129                 cmp     edx, ecx
.text:0000412B                 jnz     short loc_412F
.text:0000412D                 jmp     short loc_40F1
.text:0000412F ; ---------------------------------------------------------------------------
.text:0000412F
.text:0000412F loc_412F:                               ; CODE XREF: GetOptimum(x,x,x)+11C9j
.text:0000412F                                         ; GetOptimum(x,x,x)+11EBj ...
.text:0000412F                 mov     edx, [ebp+var_30]
.text:00004132                 add     edx, [ebp+var_154]
.text:00004138                 cmp     [ebp+var_28], edx
.text:0000413B                 jnb     short loc_415C
.text:0000413D                 mov     eax, [ebp+var_28]
.text:00004140                 add     eax, 1
.text:00004143                 mov     [ebp+var_28], eax
.text:00004146                 mov     ecx, [ebp+var_28]
.text:00004149                 imul    ecx, 30h
.text:0000414C                 mov     edx, [ebp+arg_0]
.text:0000414F                 mov     dword ptr [edx+ecx+734h], 40000000h
.text:0000415A                 jmp     short loc_412F
.text:0000415C ; ---------------------------------------------------------------------------
.text:0000415C
.text:0000415C loc_415C:                               ; CODE XREF: GetOptimum(x,x,x)+11FBj
.text:0000415C                 mov     eax, [ebp+var_154]
.text:00004162                 mov     [ebp+var_158], eax
.text:00004168                 mov     ecx, [ebp+var_E0]
.text:0000416E                 push    ecx
.text:0000416F                 mov     edx, [ebp+var_DC]
.text:00004175                 push    edx
.text:00004176                 mov     eax, [ebp+var_150]
.text:0000417C                 push    eax
.text:0000417D                 mov     ecx, [ebp+arg_0]
.text:00004180                 push    ecx
.text:00004181                 call    _GetPureRepPrice@16 ; GetPureRepPrice(x,x,x,x)
.text:00004186                 add     eax, [ebp+var_F4]
.text:0000418C                 mov     [ebp+var_15C], eax
.text:00004192
.text:00004192 loc_4192:                               ; CODE XREF: GetOptimum(x,x,x)+12F6j
.text:00004192                 mov     edx, [ebp+var_E0]
.text:00004198                 imul    edx, 440h
.text:0000419E                 mov     eax, [ebp+arg_0]
.text:000041A1                 lea     ecx, [eax+edx+378BCh]
.text:000041A8                 mov     edx, [ebp+var_154]
.text:000041AE                 mov     eax, [ebp+var_15C]
.text:000041B4                 add     eax, [ecx+edx*4-8]
.text:000041B8                 mov     [ebp+var_164], eax
.text:000041BE                 mov     ecx, [ebp+var_30]
.text:000041C1                 add     ecx, [ebp+var_154]
.text:000041C7                 imul    ecx, 30h
.text:000041CA                 mov     edx, [ebp+arg_0]
.text:000041CD                 lea     eax, [edx+ecx+734h]
.text:000041D4                 mov     [ebp+var_168], eax
.text:000041DA                 mov     ecx, [ebp+var_168]
.text:000041E0                 mov     edx, [ebp+var_164]
.text:000041E6                 cmp     edx, [ecx]
.text:000041E8                 jnb     short loc_4220
.text:000041EA                 mov     eax, [ebp+var_168]
.text:000041F0                 mov     ecx, [ebp+var_164]
.text:000041F6                 mov     [eax], ecx
.text:000041F8                 mov     edx, [ebp+var_168]
.text:000041FE                 mov     eax, [ebp+var_30]
.text:00004201                 mov     [edx+18h], eax
.text:00004204                 mov     ecx, [ebp+var_168]
.text:0000420A                 mov     edx, [ebp+var_150]
.text:00004210                 mov     [ecx+1Ch], edx
.text:00004213                 mov     eax, [ebp+var_168]
.text:00004219                 mov     dword ptr [eax+8], 0
.text:00004220
.text:00004220 loc_4220:                               ; CODE XREF: GetOptimum(x,x,x)+12A8j
.text:00004220                 mov     ecx, [ebp+var_154]
.text:00004226                 sub     ecx, 1
.text:00004229                 mov     [ebp+var_154], ecx
.text:0000422F                 cmp     [ebp+var_154], 2
.text:00004236                 jnb     loc_4192
.text:0000423C                 mov     edx, [ebp+var_158]
.text:00004242                 mov     [ebp+var_154], edx
.text:00004248                 cmp     [ebp+var_150], 0
.text:0000424F                 jnz     short loc_4260
.text:00004251                 mov     eax, [ebp+var_154]
.text:00004257                 add     eax, 1
.text:0000425A                 mov     [ebp+var_E4], eax
.text:00004260
.text:00004260 loc_4260:                               ; CODE XREF: GetOptimum(x,x,x)+130Fj
.text:00004260                 mov     ecx, [ebp+var_154]
.text:00004266                 add     ecx, 1
.text:00004269                 mov     [ebp+var_16C], ecx
.text:0000426F                 mov     edx, [ebp+arg_0]
.text:00004272                 mov     eax, [ebp+var_16C]
.text:00004278                 add     eax, [edx+2Ch]
.text:0000427B                 mov     [ebp+var_170], eax
.text:00004281                 mov     ecx, [ebp+var_170]
.text:00004287                 cmp     ecx, [ebp+var_C4]
.text:0000428D                 jbe     short loc_429B
.text:0000428F                 mov     edx, [ebp+var_C4]
.text:00004295                 mov     [ebp+var_170], edx
.text:0000429B
.text:0000429B loc_429B:                               ; CODE XREF: GetOptimum(x,x,x)+134Dj
.text:0000429B                 jmp     short loc_42AC
.text:0000429D ; ---------------------------------------------------------------------------
.text:0000429D
.text:0000429D loc_429D:                               ; CODE XREF: GetOptimum(x,x,x)+139Cj
.text:0000429D                 mov     eax, [ebp+var_16C]
.text:000042A3                 add     eax, 1
.text:000042A6                 mov     [ebp+var_16C], eax
.text:000042AC
.text:000042AC loc_42AC:                               ; CODE XREF: GetOptimum(x,x,x):loc_429Bj
.text:000042AC                 mov     ecx, [ebp+var_16C]
.text:000042B2                 cmp     ecx, [ebp+var_170]
.text:000042B8                 jnb     short loc_42DE
.text:000042BA                 mov     edx, [ebp+var_100]
.text:000042C0                 add     edx, [ebp+var_16C]
.text:000042C6                 movzx   eax, byte ptr [edx]
.text:000042C9                 mov     ecx, [ebp+var_160]
.text:000042CF                 add     ecx, [ebp+var_16C]
.text:000042D5                 movzx   edx, byte ptr [ecx]
.text:000042D8                 cmp     eax, edx
.text:000042DA                 jnz     short loc_42DE
.text:000042DC                 jmp     short loc_429D
.text:000042DE ; ---------------------------------------------------------------------------
.text:000042DE
.text:000042DE loc_42DE:                               ; CODE XREF: GetOptimum(x,x,x)+1378j
.text:000042DE                                         ; GetOptimum(x,x,x)+139Aj
.text:000042DE                 mov     eax, [ebp+var_154]
.text:000042E4                 add     eax, 1
.text:000042E7                 mov     ecx, [ebp+var_16C]
.text:000042ED                 sub     ecx, eax
.text:000042EF                 mov     [ebp+var_16C], ecx
.text:000042F5                 cmp     [ebp+var_16C], 2
.text:000042FC                 jb      loc_4583
.text:00004302                 mov     edx, [ebp+var_DC]
.text:00004308                 mov     eax, _kRepNextStates[edx*4]
.text:0000430F                 mov     [ebp+var_178], eax
.text:00004315                 mov     ecx, [ebp+arg_4]
.text:00004318                 add     ecx, [ebp+var_154]
.text:0000431E                 mov     edx, [ebp+arg_0]
.text:00004321                 and     ecx, [edx+58h]
.text:00004324                 mov     [ebp+var_17C], ecx
.text:0000432A                 mov     eax, [ebp+var_E0]
.text:00004330                 imul    eax, 440h
.text:00004336                 mov     ecx, [ebp+arg_0]
.text:00004339                 lea     edx, [ecx+eax+378BCh]
.text:00004340                 mov     eax, [ebp+var_154]
.text:00004346                 mov     esi, [ebp+var_15C]
.text:0000434C                 add     esi, [edx+eax*4-8]
.text:00004350                 mov     ecx, [ebp+var_178]
.text:00004356                 shl     ecx, 5
.text:00004359                 mov     edx, [ebp+arg_0]
.text:0000435C                 lea     eax, [edx+ecx+32608h]
.text:00004363                 mov     ecx, [ebp+var_17C]
.text:00004369                 movzx   edx, word ptr [eax+ecx*2]
.text:0000436D                 sar     edx, 4
.text:00004370                 mov     eax, [ebp+arg_0]
.text:00004373                 add     esi, [eax+edx*4+30F34h]
.text:0000437A                 mov     ecx, [ebp+arg_0]
.text:0000437D                 add     ecx, 30F34h
.text:00004383                 push    ecx
.text:00004384                 mov     edx, [ebp+var_160]
.text:0000438A                 add     edx, [ebp+var_154]
.text:00004390                 movzx   eax, byte ptr [edx]
.text:00004393                 push    eax
.text:00004394                 mov     ecx, [ebp+var_100]
.text:0000439A                 add     ecx, [ebp+var_154]
.text:000043A0                 movzx   edx, byte ptr [ecx]
.text:000043A3                 push    edx
.text:000043A4                 mov     eax, [ebp+arg_4]
.text:000043A7                 add     eax, [ebp+var_154]
.text:000043AD                 mov     ecx, [ebp+arg_0]
.text:000043B0                 and     eax, [ecx+54h]
.text:000043B3                 mov     edx, [ebp+arg_0]
.text:000043B6                 mov     ecx, [edx+48h]
.text:000043B9                 shl     eax, cl
.text:000043BB                 mov     ecx, [ebp+var_100]
.text:000043C1                 add     ecx, [ebp+var_154]
.text:000043C7                 movzx   edx, byte ptr [ecx-1]
.text:000043CB                 mov     ecx, [ebp+arg_0]
.text:000043CE                 mov     edi, 8
.text:000043D3                 sub     edi, [ecx+48h]
.text:000043D6                 mov     ecx, edi
.text:000043D8                 sar     edx, cl
.text:000043DA                 add     eax, edx
.text:000043DC                 imul    eax, 300h
.text:000043E2                 mov     edx, [ebp+arg_0]
.text:000043E5                 mov     ecx, [edx+60h]
.text:000043E8                 lea     edx, [ecx+eax*2]
.text:000043EB                 push    edx
.text:000043EC                 call    _LitEnc_GetPriceMatched@16 ; LitEnc_GetPriceMatched(x,x,x,x)
.text:000043F1                 add     esi, eax
.text:000043F3                 mov     [ebp+var_180], esi
.text:000043F9                 mov     eax, [ebp+var_178]
.text:000043FF                 mov     ecx, _kLiteralNextStates[eax*4]
.text:00004406                 mov     [ebp+var_178], ecx
.text:0000440C                 mov     edx, [ebp+var_154]
.text:00004412                 mov     eax, [ebp+arg_4]
.text:00004415                 lea     ecx, [eax+edx+1]
.text:00004419                 mov     edx, [ebp+arg_0]
.text:0000441C                 and     ecx, [edx+58h]
.text:0000441F                 mov     [ebp+var_17C], ecx
.text:00004425                 mov     eax, [ebp+var_178]
.text:0000442B                 shl     eax, 5
.text:0000442E                 mov     ecx, [ebp+arg_0]
.text:00004431                 lea     edx, [ecx+eax+32608h]
.text:00004438                 mov     eax, [ebp+var_17C]
.text:0000443E                 movzx   ecx, word ptr [edx+eax*2]
.text:00004442                 xor     ecx, 7FFh
.text:00004448                 sar     ecx, 4
.text:0000444B                 mov     edx, [ebp+arg_0]
.text:0000444E                 mov     eax, [ebp+var_180]
.text:00004454                 add     eax, [edx+ecx*4+30F34h]
.text:0000445B                 mov     ecx, [ebp+var_178]
.text:00004461                 mov     edx, [ebp+arg_0]
.text:00004464                 movzx   ecx, word ptr [edx+ecx*2+32788h]
.text:0000446C                 xor     ecx, 7FFh
.text:00004472                 sar     ecx, 4
.text:00004475                 mov     edx, [ebp+arg_0]
.text:00004478                 add     eax, [edx+ecx*4+30F34h]
.text:0000447F                 mov     [ebp+var_174], eax
.text:00004485                 mov     eax, [ebp+var_30]
.text:00004488                 add     eax, [ebp+var_154]
.text:0000448E                 mov     ecx, [ebp+var_16C]
.text:00004494                 lea     edx, [eax+ecx+1]
.text:00004498                 mov     [ebp+var_18C], edx
.text:0000449E
.text:0000449E loc_449E:                               ; CODE XREF: GetOptimum(x,x,x)+1586j
.text:0000449E                 mov     eax, [ebp+var_28]
.text:000044A1                 cmp     eax, [ebp+var_18C]
.text:000044A7                 jnb     short loc_44C8
.text:000044A9                 mov     ecx, [ebp+var_28]
.text:000044AC                 add     ecx, 1
.text:000044AF                 mov     [ebp+var_28], ecx
.text:000044B2                 mov     edx, [ebp+var_28]
.text:000044B5                 imul    edx, 30h
.text:000044B8                 mov     eax, [ebp+arg_0]
.text:000044BB                 mov     dword ptr [eax+edx+734h], 40000000h
.text:000044C6                 jmp     short loc_449E
.text:000044C8 ; ---------------------------------------------------------------------------
.text:000044C8
.text:000044C8 loc_44C8:                               ; CODE XREF: GetOptimum(x,x,x)+1567j
.text:000044C8                 mov     ecx, [ebp+var_17C]
.text:000044CE                 push    ecx
.text:000044CF                 mov     edx, [ebp+var_178]
.text:000044D5                 push    edx
.text:000044D6                 mov     eax, [ebp+var_16C]
.text:000044DC                 push    eax
.text:000044DD                 push    0
.text:000044DF                 mov     ecx, [ebp+arg_0]
.text:000044E2                 push    ecx
.text:000044E3                 call    _GetRepPrice@20 ; GetRepPrice(x,x,x,x,x)
.text:000044E8                 add     eax, [ebp+var_174]
.text:000044EE                 mov     [ebp+var_184], eax
.text:000044F4                 mov     edx, [ebp+var_18C]
.text:000044FA                 imul    edx, 30h
.text:000044FD                 mov     eax, [ebp+arg_0]
.text:00004500                 lea     ecx, [eax+edx+734h]
.text:00004507                 mov     [ebp+var_188], ecx
.text:0000450D                 mov     edx, [ebp+var_188]
.text:00004513                 mov     eax, [ebp+var_184]
.text:00004519                 cmp     eax, [edx]
.text:0000451B                 jnb     short loc_4583
.text:0000451D                 mov     ecx, [ebp+var_188]
.text:00004523                 mov     edx, [ebp+var_184]
.text:00004529                 mov     [ecx], edx
.text:0000452B                 mov     eax, [ebp+var_154]
.text:00004531                 mov     ecx, [ebp+var_30]
.text:00004534                 lea     edx, [ecx+eax+1]
.text:00004538                 mov     eax, [ebp+var_188]
.text:0000453E                 mov     [eax+18h], edx
.text:00004541                 mov     ecx, [ebp+var_188]
.text:00004547                 mov     dword ptr [ecx+1Ch], 0
.text:0000454E                 mov     edx, [ebp+var_188]
.text:00004554                 mov     dword ptr [edx+8], 1
.text:0000455B                 mov     eax, [ebp+var_188]
.text:00004561                 mov     dword ptr [eax+0Ch], 1
.text:00004568                 mov     ecx, [ebp+var_188]
.text:0000456E                 mov     edx, [ebp+var_30]
.text:00004571                 mov     [ecx+10h], edx
.text:00004574                 mov     eax, [ebp+var_188]
.text:0000457A                 mov     ecx, [ebp+var_150]
.text:00004580                 mov     [eax+14h], ecx
.text:00004583
.text:00004583 loc_4583:                               ; CODE XREF: GetOptimum(x,x,x)+13BCj
.text:00004583                                         ; GetOptimum(x,x,x)+15DBj
.text:00004583                 jmp     loc_4080
.text:00004588 ; ---------------------------------------------------------------------------
.text:00004588
.text:00004588 loc_4588:                               ; CODE XREF: GetOptimum(x,x,x)+1156j
.text:00004588                 mov     edx, [ebp+var_C8]
.text:0000458E                 cmp     edx, [ebp+var_8]
.text:00004591                 jbe     short loc_45EE
.text:00004593                 mov     eax, [ebp+var_8]
.text:00004596                 mov     [ebp+var_C8], eax
.text:0000459C                 mov     [ebp+var_D0], 0
.text:000045A6                 jmp     short loc_45B7
.text:000045A8 ; ---------------------------------------------------------------------------
.text:000045A8
.text:000045A8 loc_45A8:                               ; CODE XREF: GetOptimum(x,x,x)+168Bj
.text:000045A8                 mov     ecx, [ebp+var_D0]
.text:000045AE                 add     ecx, 2
.text:000045B1                 mov     [ebp+var_D0], ecx
.text:000045B7
.text:000045B7 loc_45B7:                               ; CODE XREF: GetOptimum(x,x,x)+1666j
.text:000045B7                 mov     edx, [ebp+var_D0]
.text:000045BD                 mov     eax, [ebp+var_70]
.text:000045C0                 mov     ecx, [ebp+var_C8]
.text:000045C6                 cmp     ecx, [eax+edx*4]
.text:000045C9                 jbe     short loc_45CD
.text:000045CB                 jmp     short loc_45A8
.text:000045CD ; ---------------------------------------------------------------------------
.text:000045CD
.text:000045CD loc_45CD:                               ; CODE XREF: GetOptimum(x,x,x)+1689j
.text:000045CD                 mov     edx, [ebp+var_D0]
.text:000045D3                 mov     eax, [ebp+var_70]
.text:000045D6                 mov     ecx, [ebp+var_C8]
.text:000045DC                 mov     [eax+edx*4], ecx
.text:000045DF                 mov     edx, [ebp+var_D0]
.text:000045E5                 add     edx, 2
.text:000045E8                 mov     [ebp+var_D0], edx
.text:000045EE
.text:000045EE loc_45EE:                               ; CODE XREF: GetOptimum(x,x,x)+1651j
.text:000045EE                 mov     eax, [ebp+var_C8]
.text:000045F4                 cmp     eax, [ebp+var_E4]
.text:000045FA                 jb      loc_4BD9
.text:00004600                 mov     ecx, [ebp+var_DC]
.text:00004606                 mov     edx, [ebp+arg_0]
.text:00004609                 movzx   eax, word ptr [edx+ecx*2+32788h]
.text:00004611                 sar     eax, 4
.text:00004614                 mov     ecx, [ebp+arg_0]
.text:00004617                 mov     edx, [ebp+var_F0]
.text:0000461D                 add     edx, [ecx+eax*4+30F34h]
.text:00004624                 mov     [ebp+var_190], edx
.text:0000462A
.text:0000462A loc_462A:                               ; CODE XREF: GetOptimum(x,x,x)+1715j
.text:0000462A                 mov     eax, [ebp+var_30]
.text:0000462D                 add     eax, [ebp+var_C8]
.text:00004633                 cmp     [ebp+var_28], eax
.text:00004636                 jnb     short loc_4657
.text:00004638                 mov     ecx, [ebp+var_28]
.text:0000463B                 add     ecx, 1
.text:0000463E                 mov     [ebp+var_28], ecx
.text:00004641                 mov     edx, [ebp+var_28]
.text:00004644                 imul    edx, 30h
.text:00004647                 mov     eax, [ebp+arg_0]
.text:0000464A                 mov     dword ptr [eax+edx+734h], 40000000h
.text:00004655                 jmp     short loc_462A
.text:00004657 ; ---------------------------------------------------------------------------
.text:00004657
.text:00004657 loc_4657:                               ; CODE XREF: GetOptimum(x,x,x)+16F6j
.text:00004657                 mov     [ebp+var_194], 0
.text:00004661
.text:00004661 loc_4661:                               ; CODE XREF: GetOptimum(x,x,x)+1744j
.text:00004661                 mov     ecx, [ebp+var_194]
.text:00004667                 mov     edx, [ebp+var_70]
.text:0000466A                 mov     eax, [ebp+var_E4]
.text:00004670                 cmp     eax, [edx+ecx*4]
.text:00004673                 jbe     short loc_4686
.text:00004675                 mov     ecx, [ebp+var_194]
.text:0000467B                 add     ecx, 2
.text:0000467E                 mov     [ebp+var_194], ecx
.text:00004684                 jmp     short loc_4661
.text:00004686 ; ---------------------------------------------------------------------------
.text:00004686
.text:00004686 loc_4686:                               ; CODE XREF: GetOptimum(x,x,x)+1733j
.text:00004686                 mov     edx, [ebp+var_194]
.text:0000468C                 mov     eax, [ebp+var_70]
.text:0000468F                 mov     ecx, [eax+edx*4+4]
.text:00004693                 mov     [ebp+var_198], ecx
.text:00004699                 cmp     [ebp+var_198], 20000h
.text:000046A3                 sbb     edx, edx
.text:000046A5                 and     edx, 0FFFFFFF6h
.text:000046A8                 add     edx, 10h
.text:000046AB                 mov     [ebp+var_1A4], edx
.text:000046B1                 mov     eax, [ebp+var_198]
.text:000046B7                 mov     ecx, [ebp+var_1A4]
.text:000046BD                 shr     eax, cl
.text:000046BF                 mov     ecx, [ebp+arg_0]
.text:000046C2                 movzx   edx, byte ptr [ecx+eax+30734h]
.text:000046CA                 mov     eax, [ebp+var_1A4]
.text:000046D0                 lea     ecx, [edx+eax*2]
.text:000046D3                 mov     [ebp+var_19C], ecx
.text:000046D9                 mov     edx, [ebp+var_E4]
.text:000046DF                 mov     [ebp+var_1A0], edx
.text:000046E5                 jmp     short loc_46F6
.text:000046E7 ; ---------------------------------------------------------------------------
.text:000046E7
.text:000046E7 loc_46E7:                               ; CODE XREF: GetOptimum(x,x,x):loc_4BD4j
.text:000046E7                 mov     eax, [ebp+var_1A0]
.text:000046ED                 add     eax, 1
.text:000046F0                 mov     [ebp+var_1A0], eax
.text:000046F6
.text:000046F6 loc_46F6:                               ; CODE XREF: GetOptimum(x,x,x)+17A5j
.text:000046F6                 mov     ecx, [ebp+var_E0]
.text:000046FC                 imul    ecx, 440h
.text:00004702                 mov     edx, [ebp+arg_0]
.text:00004705                 lea     eax, [edx+ecx+33074h]
.text:0000470C                 mov     ecx, [ebp+var_1A0]
.text:00004712                 mov     edx, [ebp+var_190]
.text:00004718                 add     edx, [eax+ecx*4-8]
.text:0000471C                 mov     [ebp+var_1A8], edx
.text:00004722                 cmp     [ebp+var_1A0], 5
.text:00004729                 jnb     short loc_473C
.text:0000472B                 mov     eax, [ebp+var_1A0]
.text:00004731                 sub     eax, 2
.text:00004734                 mov     [ebp+var_1F8], eax
.text:0000473A                 jmp     short loc_4746
.text:0000473C ; ---------------------------------------------------------------------------
.text:0000473C
.text:0000473C loc_473C:                               ; CODE XREF: GetOptimum(x,x,x)+17E9j
.text:0000473C                 mov     [ebp+var_1F8], 3
.text:00004746
.text:00004746 loc_4746:                               ; CODE XREF: GetOptimum(x,x,x)+17FAj
.text:00004746                 mov     ecx, [ebp+var_1F8]
.text:0000474C                 mov     [ebp+var_1AC], ecx
.text:00004752                 cmp     [ebp+var_198], 80h ; 'Ç'
.text:0000475C                 jnb     short loc_4788
.text:0000475E                 mov     edx, [ebp+var_1AC]
.text:00004764                 shl     edx, 9
.text:00004767                 mov     eax, [ebp+arg_0]
.text:0000476A                 lea     ecx, [eax+edx+31DC8h]
.text:00004771                 mov     edx, [ebp+var_198]
.text:00004777                 mov     eax, [ebp+var_1A8]
.text:0000477D                 add     eax, [ecx+edx*4]
.text:00004780                 mov     [ebp+var_1A8], eax
.text:00004786                 jmp     short loc_47C3
.text:00004788 ; ---------------------------------------------------------------------------
.text:00004788
.text:00004788 loc_4788:                               ; CODE XREF: GetOptimum(x,x,x)+181Cj
.text:00004788                 mov     ecx, [ebp+var_1AC]
.text:0000478E                 shl     ecx, 8
.text:00004791                 mov     edx, [ebp+arg_0]
.text:00004794                 lea     eax, [edx+ecx+319C8h]
.text:0000479B                 mov     ecx, [ebp+var_198]
.text:000047A1                 and     ecx, 0Fh
.text:000047A4                 mov     edx, [ebp+var_19C]
.text:000047AA                 mov     eax, [eax+edx*4]
.text:000047AD                 mov     edx, [ebp+arg_0]
.text:000047B0                 add     eax, [edx+ecx*4+325C8h]
.text:000047B7                 add     eax, [ebp+var_1A8]
.text:000047BD                 mov     [ebp+var_1A8], eax
.text:000047C3
.text:000047C3 loc_47C3:                               ; CODE XREF: GetOptimum(x,x,x)+1846j
.text:000047C3                 mov     eax, [ebp+var_30]
.text:000047C6                 add     eax, [ebp+var_1A0]
.text:000047CC                 imul    eax, 30h
.text:000047CF                 mov     ecx, [ebp+arg_0]
.text:000047D2                 lea     edx, [ecx+eax+734h]
.text:000047D9                 mov     [ebp+var_1B0], edx
.text:000047DF                 mov     eax, [ebp+var_1B0]
.text:000047E5                 mov     ecx, [ebp+var_1A8]
.text:000047EB                 cmp     ecx, [eax]
.text:000047ED                 jnb     short loc_4828
.text:000047EF                 mov     edx, [ebp+var_1B0]
.text:000047F5                 mov     eax, [ebp+var_1A8]
.text:000047FB                 mov     [edx], eax
.text:000047FD                 mov     ecx, [ebp+var_1B0]
.text:00004803                 mov     edx, [ebp+var_30]
.text:00004806                 mov     [ecx+18h], edx
.text:00004809                 mov     eax, [ebp+var_198]
.text:0000480F                 add     eax, 4
.text:00004812                 mov     ecx, [ebp+var_1B0]
.text:00004818                 mov     [ecx+1Ch], eax
.text:0000481B                 mov     edx, [ebp+var_1B0]
.text:00004821                 mov     dword ptr [edx+8], 0
.text:00004828
.text:00004828 loc_4828:                               ; CODE XREF: GetOptimum(x,x,x)+18ADj
.text:00004828                 mov     eax, [ebp+var_194]
.text:0000482E                 mov     ecx, [ebp+var_70]
.text:00004831                 mov     edx, [ebp+var_1A0]
.text:00004837                 cmp     edx, [ecx+eax*4]
.text:0000483A                 jnz     loc_4BD4
.text:00004840                 mov     eax, [ebp+var_100]
.text:00004846                 sub     eax, [ebp+var_198]
.text:0000484C                 sub     eax, 1
.text:0000484F                 mov     [ebp+var_1B4], eax
.text:00004855                 mov     ecx, [ebp+var_1A0]
.text:0000485B                 add     ecx, 1
.text:0000485E                 mov     [ebp+var_1B8], ecx
.text:00004864                 mov     edx, [ebp+arg_0]
.text:00004867                 mov     eax, [ebp+var_1B8]
.text:0000486D                 add     eax, [edx+2Ch]
.text:00004870                 mov     [ebp+var_1BC], eax
.text:00004876                 mov     ecx, [ebp+var_1BC]
.text:0000487C                 cmp     ecx, [ebp+var_C4]
.text:00004882                 jbe     short loc_4890
.text:00004884                 mov     edx, [ebp+var_C4]
.text:0000488A                 mov     [ebp+var_1BC], edx
.text:00004890
.text:00004890 loc_4890:                               ; CODE XREF: GetOptimum(x,x,x)+1942j
.text:00004890                 jmp     short loc_48A1
.text:00004892 ; ---------------------------------------------------------------------------
.text:00004892
.text:00004892 loc_4892:                               ; CODE XREF: GetOptimum(x,x,x)+1991j
.text:00004892                 mov     eax, [ebp+var_1B8]
.text:00004898                 add     eax, 1
.text:0000489B                 mov     [ebp+var_1B8], eax
.text:000048A1
.text:000048A1 loc_48A1:                               ; CODE XREF: GetOptimum(x,x,x):loc_4890j
.text:000048A1                 mov     ecx, [ebp+var_1B8]
.text:000048A7                 cmp     ecx, [ebp+var_1BC]
.text:000048AD                 jnb     short loc_48D3
.text:000048AF                 mov     edx, [ebp+var_100]
.text:000048B5                 add     edx, [ebp+var_1B8]
.text:000048BB                 movzx   eax, byte ptr [edx]
.text:000048BE                 mov     ecx, [ebp+var_1B4]
.text:000048C4                 add     ecx, [ebp+var_1B8]
.text:000048CA                 movzx   edx, byte ptr [ecx]
.text:000048CD                 cmp     eax, edx
.text:000048CF                 jnz     short loc_48D3
.text:000048D1                 jmp     short loc_4892
.text:000048D3 ; ---------------------------------------------------------------------------
.text:000048D3
.text:000048D3 loc_48D3:                               ; CODE XREF: GetOptimum(x,x,x)+196Dj
.text:000048D3                                         ; GetOptimum(x,x,x)+198Fj
.text:000048D3                 mov     eax, [ebp+var_1A0]
.text:000048D9                 add     eax, 1
.text:000048DC                 mov     ecx, [ebp+var_1B8]
.text:000048E2                 sub     ecx, eax
.text:000048E4                 mov     [ebp+var_1B8], ecx
.text:000048EA                 cmp     [ebp+var_1B8], 2
.text:000048F1                 jb      loc_4B56
.text:000048F7                 mov     edx, [ebp+var_DC]
.text:000048FD                 mov     eax, _kMatchNextStates[edx*4]
.text:00004904                 mov     [ebp+var_1C4], eax
.text:0000490A                 mov     ecx, [ebp+arg_4]
.text:0000490D                 add     ecx, [ebp+var_1A0]
.text:00004913                 mov     edx, [ebp+arg_0]
.text:00004916                 and     ecx, [edx+58h]
.text:00004919                 mov     [ebp+var_1C8], ecx
.text:0000491F                 mov     eax, [ebp+var_1C4]
.text:00004925                 shl     eax, 5
.text:00004928                 mov     ecx, [ebp+arg_0]
.text:0000492B                 lea     edx, [ecx+eax+32608h]
.text:00004932                 mov     eax, [ebp+var_1C8]
.text:00004938                 movzx   ecx, word ptr [edx+eax*2]
.text:0000493C                 sar     ecx, 4
.text:0000493F                 mov     edx, [ebp+arg_0]
.text:00004942                 mov     esi, [ebp+var_1A8]
.text:00004948                 add     esi, [edx+ecx*4+30F34h]
.text:0000494F                 mov     eax, [ebp+arg_0]
.text:00004952                 add     eax, 30F34h
.text:00004957                 push    eax
.text:00004958                 mov     ecx, [ebp+var_1B4]
.text:0000495E                 add     ecx, [ebp+var_1A0]
.text:00004964                 movzx   edx, byte ptr [ecx]
.text:00004967                 push    edx
.text:00004968                 mov     eax, [ebp+var_100]
.text:0000496E                 add     eax, [ebp+var_1A0]
.text:00004974                 movzx   ecx, byte ptr [eax]
.text:00004977                 push    ecx
.text:00004978                 mov     edx, [ebp+arg_4]
.text:0000497B                 add     edx, [ebp+var_1A0]
.text:00004981                 mov     eax, [ebp+arg_0]
.text:00004984                 and     edx, [eax+54h]
.text:00004987                 mov     ecx, [ebp+arg_0]
.text:0000498A                 mov     ecx, [ecx+48h]
.text:0000498D                 shl     edx, cl
.text:0000498F                 mov     eax, [ebp+var_100]
.text:00004995                 add     eax, [ebp+var_1A0]
.text:0000499B                 movzx   eax, byte ptr [eax-1]
.text:0000499F                 mov     ecx, [ebp+arg_0]
.text:000049A2                 mov     edi, 8
.text:000049A7                 sub     edi, [ecx+48h]
.text:000049AA                 mov     ecx, edi
.text:000049AC                 sar     eax, cl
.text:000049AE                 add     edx, eax
.text:000049B0                 imul    edx, 300h
.text:000049B6                 mov     eax, [ebp+arg_0]
.text:000049B9                 mov     ecx, [eax+60h]
.text:000049BC                 lea     edx, [ecx+edx*2]
.text:000049BF                 push    edx
.text:000049C0                 call    _LitEnc_GetPriceMatched@16 ; LitEnc_GetPriceMatched(x,x,x,x)
.text:000049C5                 add     esi, eax
.text:000049C7                 mov     [ebp+var_1CC], esi
.text:000049CD                 mov     eax, [ebp+var_1C4]
.text:000049D3                 mov     ecx, _kLiteralNextStates[eax*4]
.text:000049DA                 mov     [ebp+var_1C4], ecx
.text:000049E0                 mov     edx, [ebp+var_1C8]
.text:000049E6                 add     edx, 1
.text:000049E9                 mov     eax, [ebp+arg_0]
.text:000049EC                 and     edx, [eax+58h]
.text:000049EF                 mov     [ebp+var_1C8], edx
.text:000049F5                 mov     ecx, [ebp+var_1C4]
.text:000049FB                 shl     ecx, 5
.text:000049FE                 mov     edx, [ebp+arg_0]
.text:00004A01                 lea     eax, [edx+ecx+32608h]
.text:00004A08                 mov     ecx, [ebp+var_1C8]
.text:00004A0E                 movzx   edx, word ptr [eax+ecx*2]
.text:00004A12                 xor     edx, 7FFh
.text:00004A18                 sar     edx, 4
.text:00004A1B                 mov     eax, [ebp+arg_0]
.text:00004A1E                 mov     ecx, [ebp+var_1CC]
.text:00004A24                 add     ecx, [eax+edx*4+30F34h]
.text:00004A2B                 mov     edx, [ebp+var_1C4]
.text:00004A31                 mov     eax, [ebp+arg_0]
.text:00004A34                 movzx   edx, word ptr [eax+edx*2+32788h]
.text:00004A3C                 xor     edx, 7FFh
.text:00004A42                 sar     edx, 4
.text:00004A45                 mov     eax, [ebp+arg_0]
.text:00004A48                 add     ecx, [eax+edx*4+30F34h]
.text:00004A4F                 mov     [ebp+var_1C0], ecx
.text:00004A55                 mov     ecx, [ebp+var_30]
.text:00004A58                 add     ecx, [ebp+var_1A0]
.text:00004A5E                 mov     edx, [ebp+var_1B8]
.text:00004A64                 lea     eax, [ecx+edx+1]
.text:00004A68                 mov     [ebp+var_1D0], eax
.text:00004A6E
.text:00004A6E loc_4A6E:                               ; CODE XREF: GetOptimum(x,x,x)+1B56j
.text:00004A6E                 mov     ecx, [ebp+var_28]
.text:00004A71                 cmp     ecx, [ebp+var_1D0]
.text:00004A77                 jnb     short loc_4A98
.text:00004A79                 mov     edx, [ebp+var_28]
.text:00004A7C                 add     edx, 1
.text:00004A7F                 mov     [ebp+var_28], edx
.text:00004A82                 mov     eax, [ebp+var_28]
.text:00004A85                 imul    eax, 30h
.text:00004A88                 mov     ecx, [ebp+arg_0]
.text:00004A8B                 mov     dword ptr [ecx+eax+734h], 40000000h
.text:00004A96                 jmp     short loc_4A6E
.text:00004A98 ; ---------------------------------------------------------------------------
.text:00004A98
.text:00004A98 loc_4A98:                               ; CODE XREF: GetOptimum(x,x,x)+1B37j
.text:00004A98                 mov     edx, [ebp+var_1C8]
.text:00004A9E                 push    edx
.text:00004A9F                 mov     eax, [ebp+var_1C4]
.text:00004AA5                 push    eax
.text:00004AA6                 mov     ecx, [ebp+var_1B8]
.text:00004AAC                 push    ecx
.text:00004AAD                 push    0
.text:00004AAF                 mov     edx, [ebp+arg_0]
.text:00004AB2                 push    edx
.text:00004AB3                 call    _GetRepPrice@20 ; GetRepPrice(x,x,x,x,x)
.text:00004AB8                 add     eax, [ebp+var_1C0]
.text:00004ABE                 mov     [ebp+var_1D4], eax
.text:00004AC4                 mov     eax, [ebp+var_1D0]
.text:00004ACA                 imul    eax, 30h
.text:00004ACD                 mov     ecx, [ebp+arg_0]
.text:00004AD0                 lea     edx, [ecx+eax+734h]
.text:00004AD7                 mov     [ebp+var_1D8], edx
.text:00004ADD                 mov     eax, [ebp+var_1D8]
.text:00004AE3                 mov     ecx, [ebp+var_1D4]
.text:00004AE9                 cmp     ecx, [eax]
.text:00004AEB                 jnb     short loc_4B56
.text:00004AED                 mov     edx, [ebp+var_1D8]
.text:00004AF3                 mov     eax, [ebp+var_1D4]
.text:00004AF9                 mov     [edx], eax
.text:00004AFB                 mov     ecx, [ebp+var_1A0]
.text:00004B01                 mov     edx, [ebp+var_30]
.text:00004B04                 lea     eax, [edx+ecx+1]
.text:00004B08                 mov     ecx, [ebp+var_1D8]
.text:00004B0E                 mov     [ecx+18h], eax
.text:00004B11                 mov     edx, [ebp+var_1D8]
.text:00004B17                 mov     dword ptr [edx+1Ch], 0
.text:00004B1E                 mov     eax, [ebp+var_1D8]
.text:00004B24                 mov     dword ptr [eax+8], 1
.text:00004B2B                 mov     ecx, [ebp+var_1D8]
.text:00004B31                 mov     dword ptr [ecx+0Ch], 1
.text:00004B38                 mov     edx, [ebp+var_1D8]
.text:00004B3E                 mov     eax, [ebp+var_30]
.text:00004B41                 mov     [edx+10h], eax
.text:00004B44                 mov     ecx, [ebp+var_198]
.text:00004B4A                 add     ecx, 4
.text:00004B4D                 mov     edx, [ebp+var_1D8]
.text:00004B53                 mov     [edx+14h], ecx
.text:00004B56
.text:00004B56 loc_4B56:                               ; CODE XREF: GetOptimum(x,x,x)+19B1j
.text:00004B56                                         ; GetOptimum(x,x,x)+1BABj
.text:00004B56                 mov     eax, [ebp+var_194]
.text:00004B5C                 add     eax, 2
.text:00004B5F                 mov     [ebp+var_194], eax
.text:00004B65                 mov     ecx, [ebp+var_194]
.text:00004B6B                 cmp     ecx, [ebp+var_D0]
.text:00004B71                 jnz     short loc_4B75
.text:00004B73                 jmp     short loc_4BD9
.text:00004B75 ; ---------------------------------------------------------------------------
.text:00004B75
.text:00004B75 loc_4B75:                               ; CODE XREF: GetOptimum(x,x,x)+1C31j
.text:00004B75                 mov     edx, [ebp+var_194]
.text:00004B7B                 mov     eax, [ebp+var_70]
.text:00004B7E                 mov     ecx, [eax+edx*4+4]
.text:00004B82                 mov     [ebp+var_198], ecx
.text:00004B88                 cmp     [ebp+var_198], 80h ; 'Ç'
.text:00004B92                 jb      short loc_4BD4
.text:00004B94                 cmp     [ebp+var_198], 20000h
.text:00004B9E                 sbb     edx, edx
.text:00004BA0                 and     edx, 0FFFFFFF6h
.text:00004BA3                 add     edx, 10h
.text:00004BA6                 mov     [ebp+var_1DC], edx
.text:00004BAC                 mov     eax, [ebp+var_198]
.text:00004BB2                 mov     ecx, [ebp+var_1DC]
.text:00004BB8                 shr     eax, cl
.text:00004BBA                 mov     ecx, [ebp+arg_0]
.text:00004BBD                 movzx   edx, byte ptr [ecx+eax+30734h]
.text:00004BC5                 mov     eax, [ebp+var_1DC]
.text:00004BCB                 lea     ecx, [edx+eax*2]
.text:00004BCE                 mov     [ebp+var_19C], ecx
.text:00004BD4
.text:00004BD4 loc_4BD4:                               ; CODE XREF: GetOptimum(x,x,x)+18FAj
.text:00004BD4                                         ; GetOptimum(x,x,x)+1C52j
.text:00004BD4                 jmp     loc_46E7
.text:00004BD9 ; ---------------------------------------------------------------------------
.text:00004BD9
.text:00004BD9 loc_4BD9:                               ; CODE XREF: GetOptimum(x,x,x)+16BAj
.text:00004BD9                                         ; GetOptimum(x,x,x)+1C33j
.text:00004BD9                 jmp     loc_3795
.text:00004BDE ; ---------------------------------------------------------------------------
.text:00004BDE
.text:00004BDE loc_4BDE:                               ; CODE XREF: GetOptimum(x,x,x)+74j
.text:00004BDE                                         ; GetOptimum(x,x,x)+D7j ...
.text:00004BDE                 push    edx
.text:00004BDF                 mov     ecx, ebp
.text:00004BE1                 push    eax
.text:00004BE2                 lea     edx, $LN161
.text:00004BE8                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00004BED                 pop     eax
.text:00004BEE                 pop     edx
.text:00004BEF                 pop     edi
.text:00004BF0                 pop     esi
.text:00004BF1                 mov     ecx, [ebp+var_4]
.text:00004BF4                 xor     ecx, ebp
.text:00004BF6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00004BFB                 add     esp, 1F8h
.text:00004C01                 cmp     ebp, esp
.text:00004C03                 call    __RTC_CheckEsp
.text:00004C08                 mov     esp, ebp
.text:00004C0A                 pop     ebp
.text:00004C0B                 retn    0Ch
.text:00004C0B _GetOptimum@12  endp
.text:00004C0B
.text:00004C0B ; ---------------------------------------------------------------------------
.text:00004C0E                 align 10h
.text:00004C10 $LN161          dd 4                    ; DATA XREF: GetOptimum(x,x,x)+1CA2o
.text:00004C14                 dd offset $LN160
.text:00004C18 $LN160          dd 0FFFFFFECh, 4        ; DATA XREF: .text:00004C14o
.text:00004C20                 dd offset $LN156        ; "numPairs"
.text:00004C24                 dd 0FFFFFFB0h, 10h
.text:00004C2C                 dd offset $LN157        ; "reps"
.text:00004C30                 dd 0FFFFFF98h, 10h
.text:00004C38                 dd offset $LN158        ; "repLens"
.text:00004C3C                 dd 0FFFFFF30h, 4
.text:00004C44                 dd offset $LN159        ; "numPairs"
.text:00004C48 $LN159          db 'numPairs',0         ; DATA XREF: .text:00004C44o
.text:00004C51 $LN158          db 'repLens',0          ; DATA XREF: .text:00004C38o
.text:00004C59 $LN157          db 'reps',0             ; DATA XREF: .text:00004C2Co
.text:00004C5E $LN156          db 'numPairs',0         ; DATA XREF: .text:00004C20o
.text:00004C67                 align 10h
.text:00004C70
.text:00004C70 ; =============== S U B R O U T I N E =======================================
.text:00004C70
.text:00004C70 ; Attributes: bp-based frame
.text:00004C70
.text:00004C70 ; __stdcall LitEnc_GetPrice(x, x, x)
.text:00004C70 _LitEnc_GetPrice@12 proc near           ; CODE XREF: GetOptimum(x,x,x)+35Cp
.text:00004C70                                         ; GetOptimum(x,x,x)+D04p
.text:00004C70
.text:00004C70 var_4           = dword ptr -4
.text:00004C70 arg_0           = dword ptr  8
.text:00004C70 arg_4           = dword ptr  0Ch
.text:00004C70 arg_8           = dword ptr  10h
.text:00004C70
.text:00004C70                 push    ebp
.text:00004C71                 mov     ebp, esp
.text:00004C73                 push    ecx
.text:00004C74                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C7B                 mov     [ebp+var_4], 0
.text:00004C82                 mov     eax, [ebp+arg_4]
.text:00004C85                 or      eax, 100h
.text:00004C8A                 mov     [ebp+arg_4], eax
.text:00004C8D
.text:00004C8D loc_4C8D:                               ; CODE XREF: LitEnc_GetPrice(x,x,x)+5Bj
.text:00004C8D                 mov     ecx, [ebp+arg_4]
.text:00004C90                 shr     ecx, 8
.text:00004C93                 mov     edx, [ebp+arg_0]
.text:00004C96                 movzx   eax, word ptr [edx+ecx*2]
.text:00004C9A                 mov     ecx, [ebp+arg_4]
.text:00004C9D                 shr     ecx, 7
.text:00004CA0                 and     ecx, 1
.text:00004CA3                 neg     ecx
.text:00004CA5                 and     ecx, 7FFh
.text:00004CAB                 xor     eax, ecx
.text:00004CAD                 sar     eax, 4
.text:00004CB0                 mov     edx, [ebp+arg_8]
.text:00004CB3                 mov     ecx, [ebp+var_4]
.text:00004CB6                 add     ecx, [edx+eax*4]
.text:00004CB9                 mov     [ebp+var_4], ecx
.text:00004CBC                 mov     edx, [ebp+arg_4]
.text:00004CBF                 shl     edx, 1
.text:00004CC1                 mov     [ebp+arg_4], edx
.text:00004CC4                 cmp     [ebp+arg_4], 10000h
.text:00004CCB                 jb      short loc_4C8D
.text:00004CCD                 mov     eax, [ebp+var_4]
.text:00004CD0                 mov     esp, ebp
.text:00004CD2                 pop     ebp
.text:00004CD3                 retn    0Ch
.text:00004CD3 _LitEnc_GetPrice@12 endp
.text:00004CD3
.text:00004CD3 ; ---------------------------------------------------------------------------
.text:00004CD6                 align 10h
.text:00004CE0
.text:00004CE0 ; =============== S U B R O U T I N E =======================================
.text:00004CE0
.text:00004CE0 ; Attributes: bp-based frame
.text:00004CE0
.text:00004CE0 ; __stdcall LitEnc_GetPriceMatched(x, x, x, x)
.text:00004CE0 _LitEnc_GetPriceMatched@16 proc near    ; CODE XREF: GetOptimum(x,x,x)+339p
.text:00004CE0                                         ; GetOptimum(x,x,x)+CDEp ...
.text:00004CE0
.text:00004CE0 var_8           = dword ptr -8
.text:00004CE0 var_4           = dword ptr -4
.text:00004CE0 arg_0           = dword ptr  8
.text:00004CE0 arg_4           = dword ptr  0Ch
.text:00004CE0 arg_8           = dword ptr  10h
.text:00004CE0 arg_C           = dword ptr  14h
.text:00004CE0
.text:00004CE0                 push    ebp
.text:00004CE1                 mov     ebp, esp
.text:00004CE3                 sub     esp, 8
.text:00004CE6                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004CED                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CF4                 mov     [ebp+var_4], 0
.text:00004CFB                 mov     [ebp+var_8], 100h
.text:00004D02                 mov     eax, [ebp+arg_4]
.text:00004D05                 or      eax, 100h
.text:00004D0A                 mov     [ebp+arg_4], eax
.text:00004D0D
.text:00004D0D loc_4D0D:                               ; CODE XREF: LitEnc_GetPriceMatched(x,x,x,x)+8Bj
.text:00004D0D                 mov     ecx, [ebp+arg_8]
.text:00004D10                 shl     ecx, 1
.text:00004D12                 mov     [ebp+arg_8], ecx
.text:00004D15                 mov     edx, [ebp+arg_8]
.text:00004D18                 and     edx, [ebp+var_8]
.text:00004D1B                 add     edx, [ebp+var_8]
.text:00004D1E                 mov     eax, [ebp+arg_4]
.text:00004D21                 shr     eax, 8
.text:00004D24                 add     edx, eax
.text:00004D26                 mov     ecx, [ebp+arg_0]
.text:00004D29                 movzx   edx, word ptr [ecx+edx*2]
.text:00004D2D                 mov     eax, [ebp+arg_4]
.text:00004D30                 shr     eax, 7
.text:00004D33                 and     eax, 1
.text:00004D36                 neg     eax
.text:00004D38                 and     eax, 7FFh
.text:00004D3D                 xor     edx, eax
.text:00004D3F                 sar     edx, 4
.text:00004D42                 mov     ecx, [ebp+arg_C]
.text:00004D45                 mov     eax, [ebp+var_4]
.text:00004D48                 add     eax, [ecx+edx*4]
.text:00004D4B                 mov     [ebp+var_4], eax
.text:00004D4E                 mov     ecx, [ebp+arg_4]
.text:00004D51                 shl     ecx, 1
.text:00004D53                 mov     [ebp+arg_4], ecx
.text:00004D56                 mov     edx, [ebp+arg_8]
.text:00004D59                 xor     edx, [ebp+arg_4]
.text:00004D5C                 not     edx
.text:00004D5E                 and     edx, [ebp+var_8]
.text:00004D61                 mov     [ebp+var_8], edx
.text:00004D64                 cmp     [ebp+arg_4], 10000h
.text:00004D6B                 jb      short loc_4D0D
.text:00004D6D                 mov     eax, [ebp+var_4]
.text:00004D70                 mov     esp, ebp
.text:00004D72                 pop     ebp
.text:00004D73                 retn    10h
.text:00004D73 _LitEnc_GetPriceMatched@16 endp
.text:00004D73
.text:00004D73 ; ---------------------------------------------------------------------------
.text:00004D76                 align 10h
.text:00004D80
.text:00004D80 ; =============== S U B R O U T I N E =======================================
.text:00004D80
.text:00004D80 ; Attributes: bp-based frame
.text:00004D80
.text:00004D80 ; __stdcall MovePos(x, x)
.text:00004D80 _MovePos@8      proc near               ; CODE XREF: GetOptimum(x,x,x)+225p
.text:00004D80                                         ; GetOptimum(x,x,x)+268p ...
.text:00004D80
.text:00004D80 arg_0           = dword ptr  8
.text:00004D80 arg_4           = dword ptr  0Ch
.text:00004D80
.text:00004D80                 push    ebp
.text:00004D81                 mov     ebp, esp
.text:00004D83                 push    esi
.text:00004D84                 cmp     [ebp+arg_4], 0
.text:00004D88                 jz      short loc_4DB4
.text:00004D8A                 mov     eax, [ebp+arg_0]
.text:00004D8D                 mov     ecx, [eax+30h]
.text:00004D90                 add     ecx, [ebp+arg_4]
.text:00004D93                 mov     edx, [ebp+arg_0]
.text:00004D96                 mov     [edx+30h], ecx
.text:00004D99                 mov     esi, esp
.text:00004D9B                 mov     eax, [ebp+arg_4]
.text:00004D9E                 push    eax
.text:00004D9F                 mov     ecx, [ebp+arg_0]
.text:00004DA2                 mov     edx, [ecx]
.text:00004DA4                 push    edx
.text:00004DA5                 mov     eax, [ebp+arg_0]
.text:00004DA8                 mov     ecx, [eax+14h]
.text:00004DAB                 call    ecx
.text:00004DAD                 cmp     esi, esp
.text:00004DAF                 call    __RTC_CheckEsp
.text:00004DB4
.text:00004DB4 loc_4DB4:                               ; CODE XREF: MovePos(x,x)+8j
.text:00004DB4                 pop     esi
.text:00004DB5                 cmp     ebp, esp
.text:00004DB7                 call    __RTC_CheckEsp
.text:00004DBC                 pop     ebp
.text:00004DBD                 retn    8
.text:00004DBD _MovePos@8      endp
.text:00004DBD
.text:00004DC0
.text:00004DC0 ; =============== S U B R O U T I N E =======================================
.text:00004DC0
.text:00004DC0 ; Attributes: bp-based frame
.text:00004DC0
.text:00004DC0 ; __stdcall GetRepLen1Price(x, x, x)
.text:00004DC0 _GetRepLen1Price@12 proc near           ; CODE XREF: GetOptimum(x,x,x)+42Ap
.text:00004DC0                                         ; GetOptimum(x,x,x)+E36p
.text:00004DC0
.text:00004DC0 arg_0           = dword ptr  8
.text:00004DC0 arg_4           = dword ptr  0Ch
.text:00004DC0 arg_8           = dword ptr  10h
.text:00004DC0
.text:00004DC0                 push    ebp
.text:00004DC1                 mov     ebp, esp
.text:00004DC3                 mov     eax, [ebp+arg_4]
.text:00004DC6                 mov     ecx, [ebp+arg_0]
.text:00004DC9                 movzx   edx, word ptr [ecx+eax*2+327A0h]
.text:00004DD1                 sar     edx, 4
.text:00004DD4                 mov     eax, [ebp+arg_4]
.text:00004DD7                 shl     eax, 5
.text:00004DDA                 mov     ecx, [ebp+arg_0]
.text:00004DDD                 lea     eax, [ecx+eax+327E8h]
.text:00004DE4                 mov     ecx, [ebp+arg_8]
.text:00004DE7                 movzx   eax, word ptr [eax+ecx*2]
.text:00004DEB                 sar     eax, 4
.text:00004DEE                 mov     ecx, [ebp+arg_0]
.text:00004DF1                 mov     edx, [ecx+edx*4+30F34h]
.text:00004DF8                 mov     ecx, [ebp+arg_0]
.text:00004DFB                 add     edx, [ecx+eax*4+30F34h]
.text:00004E02                 mov     eax, edx
.text:00004E04                 pop     ebp
.text:00004E05                 retn    0Ch
.text:00004E05 _GetRepLen1Price@12 endp
.text:00004E05
.text:00004E05 ; ---------------------------------------------------------------------------
.text:00004E08                 align 10h
.text:00004E10
.text:00004E10 ; =============== S U B R O U T I N E =======================================
.text:00004E10
.text:00004E10 ; Attributes: bp-based frame
.text:00004E10
.text:00004E10 ; __stdcall GetPureRepPrice(x, x, x, x)
.text:00004E10 _GetPureRepPrice@16 proc near           ; CODE XREF: GetOptimum(x,x,x)+568p
.text:00004E10                                         ; GetOptimum(x,x,x)+1241p ...
.text:00004E10
.text:00004E10 var_4           = dword ptr -4
.text:00004E10 arg_0           = dword ptr  8
.text:00004E10 arg_4           = dword ptr  0Ch
.text:00004E10 arg_8           = dword ptr  10h
.text:00004E10 arg_C           = dword ptr  14h
.text:00004E10
.text:00004E10                 push    ebp
.text:00004E11                 mov     ebp, esp
.text:00004E13                 push    ecx
.text:00004E14                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E1B                 cmp     [ebp+arg_4], 0
.text:00004E1F                 jnz     short loc_4E73
.text:00004E21                 mov     eax, [ebp+arg_8]
.text:00004E24                 mov     ecx, [ebp+arg_0]
.text:00004E27                 movzx   edx, word ptr [ecx+eax*2+327A0h]
.text:00004E2F                 sar     edx, 4
.text:00004E32                 mov     eax, [ebp+arg_0]
.text:00004E35                 mov     ecx, [eax+edx*4+30F34h]
.text:00004E3C                 mov     [ebp+var_4], ecx
.text:00004E3F                 mov     edx, [ebp+arg_8]
.text:00004E42                 shl     edx, 5
.text:00004E45                 mov     eax, [ebp+arg_0]
.text:00004E48                 lea     ecx, [eax+edx+327E8h]
.text:00004E4F                 mov     edx, [ebp+arg_C]
.text:00004E52                 movzx   eax, word ptr [ecx+edx*2]
.text:00004E56                 xor     eax, 7FFh
.text:00004E5B                 sar     eax, 4
.text:00004E5E                 mov     ecx, [ebp+arg_0]
.text:00004E61                 mov     edx, [ebp+var_4]
.text:00004E64                 add     edx, [ecx+eax*4+30F34h]
.text:00004E6B                 mov     [ebp+var_4], edx
.text:00004E6E                 jmp     loc_4F16
.text:00004E73 ; ---------------------------------------------------------------------------
.text:00004E73
.text:00004E73 loc_4E73:                               ; CODE XREF: GetPureRepPrice(x,x,x,x)+Fj
.text:00004E73                 mov     eax, [ebp+arg_8]
.text:00004E76                 mov     ecx, [ebp+arg_0]
.text:00004E79                 movzx   edx, word ptr [ecx+eax*2+327A0h]
.text:00004E81                 xor     edx, 7FFh
.text:00004E87                 sar     edx, 4
.text:00004E8A                 mov     eax, [ebp+arg_0]
.text:00004E8D                 mov     ecx, [eax+edx*4+30F34h]
.text:00004E94                 mov     [ebp+var_4], ecx
.text:00004E97                 cmp     [ebp+arg_4], 1
.text:00004E9B                 jnz     short loc_4EC0
.text:00004E9D                 mov     edx, [ebp+arg_8]
.text:00004EA0                 mov     eax, [ebp+arg_0]
.text:00004EA3                 movzx   ecx, word ptr [eax+edx*2+327B8h]
.text:00004EAB                 sar     ecx, 4
.text:00004EAE                 mov     edx, [ebp+arg_0]
.text:00004EB1                 mov     eax, [ebp+var_4]
.text:00004EB4                 add     eax, [edx+ecx*4+30F34h]
.text:00004EBB                 mov     [ebp+var_4], eax
.text:00004EBE                 jmp     short loc_4F16
.text:00004EC0 ; ---------------------------------------------------------------------------
.text:00004EC0
.text:00004EC0 loc_4EC0:                               ; CODE XREF: GetPureRepPrice(x,x,x,x)+8Bj
.text:00004EC0                 mov     ecx, [ebp+arg_8]
.text:00004EC3                 mov     edx, [ebp+arg_0]
.text:00004EC6                 movzx   eax, word ptr [edx+ecx*2+327B8h]
.text:00004ECE                 xor     eax, 7FFh
.text:00004ED3                 sar     eax, 4
.text:00004ED6                 mov     ecx, [ebp+arg_0]
.text:00004ED9                 mov     edx, [ebp+var_4]
.text:00004EDC                 add     edx, [ecx+eax*4+30F34h]
.text:00004EE3                 mov     [ebp+var_4], edx
.text:00004EE6                 mov     eax, [ebp+arg_8]
.text:00004EE9                 mov     ecx, [ebp+arg_0]
.text:00004EEC                 movzx   edx, word ptr [ecx+eax*2+327D0h]
.text:00004EF4                 mov     eax, [ebp+arg_4]
.text:00004EF7                 sub     eax, 2
.text:00004EFA                 neg     eax
.text:00004EFC                 and     eax, 7FFh
.text:00004F01                 xor     edx, eax
.text:00004F03                 sar     edx, 4
.text:00004F06                 mov     ecx, [ebp+arg_0]
.text:00004F09                 mov     eax, [ebp+var_4]
.text:00004F0C                 add     eax, [ecx+edx*4+30F34h]
.text:00004F13                 mov     [ebp+var_4], eax
.text:00004F16
.text:00004F16 loc_4F16:                               ; CODE XREF: GetPureRepPrice(x,x,x,x)+5Ej
.text:00004F16                                         ; GetPureRepPrice(x,x,x,x)+AEj
.text:00004F16                 mov     eax, [ebp+var_4]
.text:00004F19                 mov     esp, ebp
.text:00004F1B                 pop     ebp
.text:00004F1C                 retn    10h
.text:00004F1C _GetPureRepPrice@16 endp
.text:00004F1C
.text:00004F1C ; ---------------------------------------------------------------------------
.text:00004F1F                 align 10h
.text:00004F20
.text:00004F20 ; =============== S U B R O U T I N E =======================================
.text:00004F20
.text:00004F20 ; Attributes: bp-based frame
.text:00004F20
.text:00004F20 ; __stdcall GetRepPrice(x, x, x, x, x)
.text:00004F20 _GetRepPrice@20 proc near               ; CODE XREF: GetOptimum(x,x,x)+10ACp
.text:00004F20                                         ; GetOptimum(x,x,x)+15A3p ...
.text:00004F20
.text:00004F20 arg_0           = dword ptr  8
.text:00004F20 arg_4           = dword ptr  0Ch
.text:00004F20 arg_8           = dword ptr  10h
.text:00004F20 arg_C           = dword ptr  14h
.text:00004F20 arg_10          = dword ptr  18h
.text:00004F20
.text:00004F20                 push    ebp
.text:00004F21                 mov     ebp, esp
.text:00004F23                 push    esi
.text:00004F24                 mov     eax, [ebp+arg_10]
.text:00004F27                 imul    eax, 440h
.text:00004F2D                 mov     ecx, [ebp+arg_0]
.text:00004F30                 lea     esi, [ecx+eax+378BCh]
.text:00004F37                 mov     edx, [ebp+arg_10]
.text:00004F3A                 push    edx
.text:00004F3B                 mov     eax, [ebp+arg_C]
.text:00004F3E                 push    eax
.text:00004F3F                 mov     ecx, [ebp+arg_4]
.text:00004F42                 push    ecx
.text:00004F43                 mov     edx, [ebp+arg_0]
.text:00004F46                 push    edx
.text:00004F47                 call    _GetPureRepPrice@16 ; GetPureRepPrice(x,x,x,x)
.text:00004F4C                 mov     ecx, [ebp+arg_8]
.text:00004F4F                 add     eax, [esi+ecx*4-8]
.text:00004F53                 pop     esi
.text:00004F54                 cmp     ebp, esp
.text:00004F56                 call    __RTC_CheckEsp
.text:00004F5B                 pop     ebp
.text:00004F5C                 retn    14h
.text:00004F5C _GetRepPrice@20 endp
.text:00004F5C
.text:00004F5C ; ---------------------------------------------------------------------------
.text:00004F5F                 align 10h
.text:00004F60
.text:00004F60 ; =============== S U B R O U T I N E =======================================
.text:00004F60
.text:00004F60 ; Attributes: bp-based frame
.text:00004F60
.text:00004F60 ; __stdcall Backward(x, x, x)
.text:00004F60 _Backward@12    proc near               ; CODE XREF: GetOptimum(x,x,x)+872p
.text:00004F60                                         ; GetOptimum(x,x,x)+8C4p
.text:00004F60
.text:00004F60 var_10          = dword ptr -10h
.text:00004F60 var_C           = dword ptr -0Ch
.text:00004F60 var_8           = dword ptr -8
.text:00004F60 var_4           = dword ptr -4
.text:00004F60 arg_0           = dword ptr  8
.text:00004F60 arg_4           = dword ptr  0Ch
.text:00004F60 arg_8           = dword ptr  10h
.text:00004F60
.text:00004F60                 push    ebp
.text:00004F61                 mov     ebp, esp
.text:00004F63                 sub     esp, 10h
.text:00004F66                 push    esi
.text:00004F67                 mov     eax, 0CCCCCCCCh
.text:00004F6C                 mov     [ebp+var_10], eax
.text:00004F6F                 mov     [ebp+var_C], eax
.text:00004F72                 mov     [ebp+var_8], eax
.text:00004F75                 mov     [ebp+var_4], eax
.text:00004F78                 mov     eax, [ebp+arg_8]
.text:00004F7B                 imul    eax, 30h
.text:00004F7E                 mov     ecx, [ebp+arg_0]
.text:00004F81                 mov     edx, [ecx+eax+74Ch]
.text:00004F88                 mov     [ebp+var_4], edx
.text:00004F8B                 mov     eax, [ebp+arg_8]
.text:00004F8E                 imul    eax, 30h
.text:00004F91                 mov     ecx, [ebp+arg_0]
.text:00004F94                 mov     edx, [ecx+eax+750h]
.text:00004F9B                 mov     [ebp+var_8], edx
.text:00004F9E                 mov     eax, [ebp+arg_0]
.text:00004FA1                 mov     ecx, [ebp+arg_8]
.text:00004FA4                 mov     [eax+18h], ecx
.text:00004FA7
.text:00004FA7 loc_4FA7:                               ; CODE XREF: Backward(x,x,x)+16Ej
.text:00004FA7                 mov     edx, [ebp+arg_8]
.text:00004FAA                 imul    edx, 30h
.text:00004FAD                 mov     eax, [ebp+arg_0]
.text:00004FB0                 cmp     dword ptr [eax+edx+73Ch], 0
.text:00004FB8                 jz      loc_506C
.text:00004FBE                 mov     ecx, [ebp+var_4]
.text:00004FC1                 imul    ecx, 30h
.text:00004FC4                 mov     edx, [ebp+arg_0]
.text:00004FC7                 mov     dword ptr [edx+ecx+750h], 0FFFFFFFFh
.text:00004FD2                 mov     eax, [ebp+var_4]
.text:00004FD5                 imul    eax, 30h
.text:00004FD8                 mov     ecx, [ebp+arg_0]
.text:00004FDB                 mov     dword ptr [ecx+eax+73Ch], 0
.text:00004FE6                 mov     edx, [ebp+var_4]
.text:00004FE9                 sub     edx, 1
.text:00004FEC                 mov     eax, [ebp+var_4]
.text:00004FEF                 imul    eax, 30h
.text:00004FF2                 mov     ecx, [ebp+arg_0]
.text:00004FF5                 mov     [ecx+eax+74Ch], edx
.text:00004FFC                 mov     edx, [ebp+arg_8]
.text:00004FFF                 imul    edx, 30h
.text:00005002                 mov     eax, [ebp+arg_0]
.text:00005005                 cmp     dword ptr [eax+edx+740h], 0
.text:0000500D                 jz      short loc_506C
.text:0000500F                 mov     ecx, [ebp+var_4]
.text:00005012                 sub     ecx, 1
.text:00005015                 imul    ecx, 30h
.text:00005018                 mov     edx, [ebp+arg_0]
.text:0000501B                 mov     dword ptr [edx+ecx+73Ch], 0
.text:00005026                 mov     eax, [ebp+arg_8]
.text:00005029                 imul    eax, 30h
.text:0000502C                 mov     ecx, [ebp+var_4]
.text:0000502F                 sub     ecx, 1
.text:00005032                 imul    ecx, 30h
.text:00005035                 mov     edx, [ebp+arg_0]
.text:00005038                 mov     esi, [ebp+arg_0]
.text:0000503B                 mov     eax, [esi+eax+744h]
.text:00005042                 mov     [edx+ecx+74Ch], eax
.text:00005049                 mov     ecx, [ebp+arg_8]
.text:0000504C                 imul    ecx, 30h
.text:0000504F                 mov     edx, [ebp+var_4]
.text:00005052                 sub     edx, 1
.text:00005055                 imul    edx, 30h
.text:00005058                 mov     eax, [ebp+arg_0]
.text:0000505B                 mov     esi, [ebp+arg_0]
.text:0000505E                 mov     ecx, [esi+ecx+748h]
.text:00005065                 mov     [eax+edx+750h], ecx
.text:0000506C
.text:0000506C loc_506C:                               ; CODE XREF: Backward(x,x,x)+58j
.text:0000506C                                         ; Backward(x,x,x)+ADj
.text:0000506C                 mov     edx, [ebp+var_4]
.text:0000506F                 mov     [ebp+var_C], edx
.text:00005072                 mov     eax, [ebp+var_8]
.text:00005075                 mov     [ebp+var_10], eax
.text:00005078                 mov     ecx, [ebp+var_C]
.text:0000507B                 imul    ecx, 30h
.text:0000507E                 mov     edx, [ebp+arg_0]
.text:00005081                 mov     eax, [edx+ecx+750h]
.text:00005088                 mov     [ebp+var_8], eax
.text:0000508B                 mov     ecx, [ebp+var_C]
.text:0000508E                 imul    ecx, 30h
.text:00005091                 mov     edx, [ebp+arg_0]
.text:00005094                 mov     eax, [edx+ecx+74Ch]
.text:0000509B                 mov     [ebp+var_4], eax
.text:0000509E                 mov     ecx, [ebp+var_C]
.text:000050A1                 imul    ecx, 30h
.text:000050A4                 mov     edx, [ebp+arg_0]
.text:000050A7                 mov     eax, [ebp+var_10]
.text:000050AA                 mov     [edx+ecx+750h], eax
.text:000050B1                 mov     ecx, [ebp+var_C]
.text:000050B4                 imul    ecx, 30h
.text:000050B7                 mov     edx, [ebp+arg_0]
.text:000050BA                 mov     eax, [ebp+arg_8]
.text:000050BD                 mov     [edx+ecx+74Ch], eax
.text:000050C4                 mov     ecx, [ebp+var_C]
.text:000050C7                 mov     [ebp+arg_8], ecx
.text:000050CA                 cmp     [ebp+arg_8], 0
.text:000050CE                 jnz     loc_4FA7
.text:000050D4                 mov     edx, [ebp+arg_4]
.text:000050D7                 mov     eax, [ebp+arg_0]
.text:000050DA                 mov     ecx, [eax+750h]
.text:000050E0                 mov     [edx], ecx
.text:000050E2                 mov     edx, [ebp+arg_0]
.text:000050E5                 mov     eax, [ebp+arg_0]
.text:000050E8                 mov     ecx, [eax+74Ch]
.text:000050EE                 mov     [edx+1Ch], ecx
.text:000050F1                 mov     edx, [ebp+arg_0]
.text:000050F4                 mov     eax, [edx+1Ch]
.text:000050F7                 pop     esi
.text:000050F8                 mov     esp, ebp
.text:000050FA                 pop     ebp
.text:000050FB                 retn    0Ch
.text:000050FB _Backward@12    endp
.text:000050FB
.text:000050FB ; ---------------------------------------------------------------------------
.text:000050FE                 align 10h
.text:00005100
.text:00005100 ; =============== S U B R O U T I N E =======================================
.text:00005100
.text:00005100 ; Attributes: bp-based frame
.text:00005100
.text:00005100 ; __stdcall GetOptimumFast(x, x)
.text:00005100 _GetOptimumFast@8 proc near             ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+18Fp
.text:00005100
.text:00005100 var_44          = dword ptr -44h
.text:00005100 var_40          = dword ptr -40h
.text:00005100 var_3C          = dword ptr -3Ch
.text:00005100 var_38          = dword ptr -38h
.text:00005100 var_34          = dword ptr -34h
.text:00005100 var_30          = dword ptr -30h
.text:00005100 var_2C          = dword ptr -2Ch
.text:00005100 var_28          = dword ptr -28h
.text:00005100 var_24          = dword ptr -24h
.text:00005100 var_20          = dword ptr -20h
.text:00005100 var_1C          = dword ptr -1Ch
.text:00005100 var_14          = dword ptr -14h
.text:00005100 var_C           = dword ptr -0Ch
.text:00005100 var_8           = dword ptr -8
.text:00005100 var_4           = dword ptr -4
.text:00005100 arg_0           = dword ptr  8
.text:00005100 arg_4           = dword ptr  0Ch
.text:00005100
.text:00005100                 push    ebp
.text:00005101                 mov     ebp, esp
.text:00005103                 sub     esp, 44h
.text:00005106                 push    esi
.text:00005107                 push    edi
.text:00005108                 lea     edi, [ebp+var_44]
.text:0000510B                 mov     ecx, 11h
.text:00005110                 mov     eax, 0CCCCCCCCh
.text:00005115                 rep stosd
.text:00005117                 mov     eax, [ebp+arg_0]
.text:0000511A                 cmp     dword ptr [eax+30h], 0
.text:0000511E                 jnz     short loc_5132
.text:00005120                 lea     ecx, [ebp+var_14]
.text:00005123                 push    ecx
.text:00005124                 mov     edx, [ebp+arg_0]
.text:00005127                 push    edx
.text:00005128                 call    _ReadMatchDistances@8 ; ReadMatchDistances(x,x)
.text:0000512D                 mov     [ebp+var_8], eax
.text:00005130                 jmp     short loc_5144
.text:00005132 ; ---------------------------------------------------------------------------
.text:00005132
.text:00005132 loc_5132:                               ; CODE XREF: GetOptimumFast(x,x)+1Ej
.text:00005132                 mov     eax, [ebp+arg_0]
.text:00005135                 mov     ecx, [eax+20h]
.text:00005138                 mov     [ebp+var_8], ecx
.text:0000513B                 mov     edx, [ebp+arg_0]
.text:0000513E                 mov     eax, [edx+24h]
.text:00005141                 mov     [ebp+var_14], eax
.text:00005144
.text:00005144 loc_5144:                               ; CODE XREF: GetOptimumFast(x,x)+30j
.text:00005144                 mov     ecx, [ebp+arg_0]
.text:00005147                 mov     edx, [ecx+28h]
.text:0000514A                 mov     [ebp+var_4], edx
.text:0000514D                 mov     eax, [ebp+arg_4]
.text:00005150                 mov     dword ptr [eax], 0FFFFFFFFh
.text:00005156                 cmp     [ebp+var_4], 2
.text:0000515A                 jnb     short loc_5166
.text:0000515C                 mov     eax, 1
.text:00005161                 jmp     loc_5508
.text:00005166 ; ---------------------------------------------------------------------------
.text:00005166
.text:00005166 loc_5166:                               ; CODE XREF: GetOptimumFast(x,x)+5Aj
.text:00005166                 cmp     [ebp+var_4], 111h
.text:0000516D                 jbe     short loc_5176
.text:0000516F                 mov     [ebp+var_4], 111h
.text:00005176
.text:00005176 loc_5176:                               ; CODE XREF: GetOptimumFast(x,x)+6Dj
.text:00005176                 mov     esi, esp
.text:00005178                 mov     ecx, [ebp+arg_0]
.text:0000517B                 mov     edx, [ecx]
.text:0000517D                 push    edx
.text:0000517E                 mov     eax, [ebp+arg_0]
.text:00005181                 mov     ecx, [eax+0Ch]
.text:00005184                 call    ecx
.text:00005186                 cmp     esi, esp
.text:00005188                 call    __RTC_CheckEsp
.text:0000518D                 sub     eax, 1
.text:00005190                 mov     [ebp+var_28], eax
.text:00005193                 mov     [ebp+var_1C], 0
.text:0000519A                 mov     edx, [ebp+var_1C]
.text:0000519D                 mov     [ebp+var_20], edx
.text:000051A0                 mov     [ebp+var_24], 0
.text:000051A7                 jmp     short loc_51B2
.text:000051A9 ; ---------------------------------------------------------------------------
.text:000051A9
.text:000051A9 loc_51A9:                               ; CODE XREF: GetOptimumFast(x,x):loc_51F1j
.text:000051A9                                         ; GetOptimumFast(x,x):loc_5264j
.text:000051A9                 mov     eax, [ebp+var_24]
.text:000051AC                 add     eax, 1
.text:000051AF                 mov     [ebp+var_24], eax
.text:000051B2
.text:000051B2 loc_51B2:                               ; CODE XREF: GetOptimumFast(x,x)+A7j
.text:000051B2                 cmp     [ebp+var_24], 4
.text:000051B6                 jnb     loc_5269
.text:000051BC                 mov     ecx, [ebp+var_24]
.text:000051BF                 mov     edx, [ebp+arg_0]
.text:000051C2                 mov     eax, [ebp+var_28]
.text:000051C5                 sub     eax, [edx+ecx*4+34h]
.text:000051C9                 sub     eax, 1
.text:000051CC                 mov     [ebp+var_34], eax
.text:000051CF                 mov     ecx, [ebp+var_28]
.text:000051D2                 movzx   edx, byte ptr [ecx]
.text:000051D5                 mov     eax, [ebp+var_34]
.text:000051D8                 movzx   ecx, byte ptr [eax]
.text:000051DB                 cmp     edx, ecx
.text:000051DD                 jnz     short loc_51F1
.text:000051DF                 mov     edx, [ebp+var_28]
.text:000051E2                 movzx   eax, byte ptr [edx+1]
.text:000051E6                 mov     ecx, [ebp+var_34]
.text:000051E9                 movzx   edx, byte ptr [ecx+1]
.text:000051ED                 cmp     eax, edx
.text:000051EF                 jz      short loc_51F3
.text:000051F1
.text:000051F1 loc_51F1:                               ; CODE XREF: GetOptimumFast(x,x)+DDj
.text:000051F1                 jmp     short loc_51A9
.text:000051F3 ; ---------------------------------------------------------------------------
.text:000051F3
.text:000051F3 loc_51F3:                               ; CODE XREF: GetOptimumFast(x,x)+EFj
.text:000051F3                 mov     [ebp+var_30], 2
.text:000051FA                 jmp     short loc_5205
.text:000051FC ; ---------------------------------------------------------------------------
.text:000051FC
.text:000051FC loc_51FC:                               ; CODE XREF: GetOptimumFast(x,x)+123j
.text:000051FC                 mov     eax, [ebp+var_30]
.text:000051FF                 add     eax, 1
.text:00005202                 mov     [ebp+var_30], eax
.text:00005205
.text:00005205 loc_5205:                               ; CODE XREF: GetOptimumFast(x,x)+FAj
.text:00005205                 mov     ecx, [ebp+var_30]
.text:00005208                 cmp     ecx, [ebp+var_4]
.text:0000520B                 jnb     short loc_5225
.text:0000520D                 mov     edx, [ebp+var_28]
.text:00005210                 add     edx, [ebp+var_30]
.text:00005213                 movzx   eax, byte ptr [edx]
.text:00005216                 mov     ecx, [ebp+var_34]
.text:00005219                 add     ecx, [ebp+var_30]
.text:0000521C                 movzx   edx, byte ptr [ecx]
.text:0000521F                 cmp     eax, edx
.text:00005221                 jnz     short loc_5225
.text:00005223                 jmp     short loc_51FC
.text:00005225 ; ---------------------------------------------------------------------------
.text:00005225
.text:00005225 loc_5225:                               ; CODE XREF: GetOptimumFast(x,x)+10Bj
.text:00005225                                         ; GetOptimumFast(x,x)+121j
.text:00005225                 mov     eax, [ebp+arg_0]
.text:00005228                 mov     ecx, [ebp+var_30]
.text:0000522B                 cmp     ecx, [eax+2Ch]
.text:0000522E                 jb      short loc_5250
.text:00005230                 mov     edx, [ebp+arg_4]
.text:00005233                 mov     eax, [ebp+var_24]
.text:00005236                 mov     [edx], eax
.text:00005238                 mov     ecx, [ebp+var_30]
.text:0000523B                 sub     ecx, 1
.text:0000523E                 push    ecx
.text:0000523F                 mov     edx, [ebp+arg_0]
.text:00005242                 push    edx
.text:00005243                 call    _MovePos@8      ; MovePos(x,x)
.text:00005248                 mov     eax, [ebp+var_30]
.text:0000524B                 jmp     loc_5508
.text:00005250 ; ---------------------------------------------------------------------------
.text:00005250
.text:00005250 loc_5250:                               ; CODE XREF: GetOptimumFast(x,x)+12Ej
.text:00005250                 mov     eax, [ebp+var_30]
.text:00005253                 cmp     eax, [ebp+var_20]
.text:00005256                 jbe     short loc_5264
.text:00005258                 mov     ecx, [ebp+var_24]
.text:0000525B                 mov     [ebp+var_1C], ecx
.text:0000525E                 mov     edx, [ebp+var_30]
.text:00005261                 mov     [ebp+var_20], edx
.text:00005264
.text:00005264 loc_5264:                               ; CODE XREF: GetOptimumFast(x,x)+156j
.text:00005264                 jmp     loc_51A9
.text:00005269 ; ---------------------------------------------------------------------------
.text:00005269
.text:00005269 loc_5269:                               ; CODE XREF: GetOptimumFast(x,x)+B6j
.text:00005269                 mov     eax, [ebp+arg_0]
.text:0000526C                 add     eax, 31134h
.text:00005271                 mov     [ebp+var_2C], eax
.text:00005274                 mov     ecx, [ebp+arg_0]
.text:00005277                 mov     edx, [ebp+var_8]
.text:0000527A                 cmp     edx, [ecx+2Ch]
.text:0000527D                 jb      short loc_52A9
.text:0000527F                 mov     eax, [ebp+var_14]
.text:00005282                 mov     ecx, [ebp+var_2C]
.text:00005285                 mov     edx, [ecx+eax*4-4]
.text:00005289                 add     edx, 4
.text:0000528C                 mov     eax, [ebp+arg_4]
.text:0000528F                 mov     [eax], edx
.text:00005291                 mov     ecx, [ebp+var_8]
.text:00005294                 sub     ecx, 1
.text:00005297                 push    ecx
.text:00005298                 mov     edx, [ebp+arg_0]
.text:0000529B                 push    edx
.text:0000529C                 call    _MovePos@8      ; MovePos(x,x)
.text:000052A1                 mov     eax, [ebp+var_8]
.text:000052A4                 jmp     loc_5508
.text:000052A9 ; ---------------------------------------------------------------------------
.text:000052A9
.text:000052A9 loc_52A9:                               ; CODE XREF: GetOptimumFast(x,x)+17Dj
.text:000052A9                 mov     [ebp+var_C], 0
.text:000052B0                 cmp     [ebp+var_8], 2
.text:000052B4                 jb      short loc_532A
.text:000052B6                 mov     eax, [ebp+var_14]
.text:000052B9                 mov     ecx, [ebp+var_2C]
.text:000052BC                 mov     edx, [ecx+eax*4-4]
.text:000052C0                 mov     [ebp+var_C], edx
.text:000052C3
.text:000052C3 loc_52C3:                               ; CODE XREF: GetOptimumFast(x,x)+212j
.text:000052C3                 cmp     [ebp+var_14], 2
.text:000052C7                 jbe     short loc_5314
.text:000052C9                 mov     eax, [ebp+var_14]
.text:000052CC                 mov     ecx, [ebp+var_2C]
.text:000052CF                 mov     edx, [ecx+eax*4-10h]
.text:000052D3                 add     edx, 1
.text:000052D6                 cmp     [ebp+var_8], edx
.text:000052D9                 jnz     short loc_5314
.text:000052DB                 mov     eax, [ebp+var_C]
.text:000052DE                 shr     eax, 7
.text:000052E1                 mov     ecx, [ebp+var_14]
.text:000052E4                 mov     edx, [ebp+var_2C]
.text:000052E7                 cmp     eax, [edx+ecx*4-0Ch]
.text:000052EB                 ja      short loc_52EF
.text:000052ED                 jmp     short loc_5314
.text:000052EF ; ---------------------------------------------------------------------------
.text:000052EF
.text:000052EF loc_52EF:                               ; CODE XREF: GetOptimumFast(x,x)+1EBj
.text:000052EF                 mov     eax, [ebp+var_14]
.text:000052F2                 sub     eax, 2
.text:000052F5                 mov     [ebp+var_14], eax
.text:000052F8                 mov     ecx, [ebp+var_14]
.text:000052FB                 mov     edx, [ebp+var_2C]
.text:000052FE                 mov     eax, [edx+ecx*4-8]
.text:00005302                 mov     [ebp+var_8], eax
.text:00005305                 mov     ecx, [ebp+var_14]
.text:00005308                 mov     edx, [ebp+var_2C]
.text:0000530B                 mov     eax, [edx+ecx*4-4]
.text:0000530F                 mov     [ebp+var_C], eax
.text:00005312                 jmp     short loc_52C3
.text:00005314 ; ---------------------------------------------------------------------------
.text:00005314
.text:00005314 loc_5314:                               ; CODE XREF: GetOptimumFast(x,x)+1C7j
.text:00005314                                         ; GetOptimumFast(x,x)+1D9j ...
.text:00005314                 cmp     [ebp+var_8], 2
.text:00005318                 jnz     short loc_532A
.text:0000531A                 cmp     [ebp+var_C], 80h ; 'Ç'
.text:00005321                 jb      short loc_532A
.text:00005323                 mov     [ebp+var_8], 1
.text:0000532A
.text:0000532A loc_532A:                               ; CODE XREF: GetOptimumFast(x,x)+1B4j
.text:0000532A                                         ; GetOptimumFast(x,x)+218j ...
.text:0000532A                 cmp     [ebp+var_20], 2
.text:0000532E                 jb      short loc_5383
.text:00005330                 mov     ecx, [ebp+var_20]
.text:00005333                 add     ecx, 1
.text:00005336                 cmp     ecx, [ebp+var_8]
.text:00005339                 jnb     short loc_5363
.text:0000533B                 mov     edx, [ebp+var_20]
.text:0000533E                 add     edx, 2
.text:00005341                 cmp     edx, [ebp+var_8]
.text:00005344                 jb      short loc_534F
.text:00005346                 cmp     [ebp+var_C], 200h
.text:0000534D                 jnb     short loc_5363
.text:0000534F
.text:0000534F loc_534F:                               ; CODE XREF: GetOptimumFast(x,x)+244j
.text:0000534F                 mov     eax, [ebp+var_20]
.text:00005352                 add     eax, 3
.text:00005355                 cmp     eax, [ebp+var_8]
.text:00005358                 jb      short loc_5383
.text:0000535A                 cmp     [ebp+var_C], 8000h
.text:00005361                 jb      short loc_5383
.text:00005363
.text:00005363 loc_5363:                               ; CODE XREF: GetOptimumFast(x,x)+239j
.text:00005363                                         ; GetOptimumFast(x,x)+24Dj
.text:00005363                 mov     ecx, [ebp+arg_4]
.text:00005366                 mov     edx, [ebp+var_1C]
.text:00005369                 mov     [ecx], edx
.text:0000536B                 mov     eax, [ebp+var_20]
.text:0000536E                 sub     eax, 1
.text:00005371                 push    eax
.text:00005372                 mov     ecx, [ebp+arg_0]
.text:00005375                 push    ecx
.text:00005376                 call    _MovePos@8      ; MovePos(x,x)
.text:0000537B                 mov     eax, [ebp+var_20]
.text:0000537E                 jmp     loc_5508
.text:00005383 ; ---------------------------------------------------------------------------
.text:00005383
.text:00005383 loc_5383:                               ; CODE XREF: GetOptimumFast(x,x)+22Ej
.text:00005383                                         ; GetOptimumFast(x,x)+258j ...
.text:00005383                 cmp     [ebp+var_8], 2
.text:00005387                 jb      short loc_538F
.text:00005389                 cmp     [ebp+var_4], 2
.text:0000538D                 ja      short loc_5399
.text:0000538F
.text:0000538F loc_538F:                               ; CODE XREF: GetOptimumFast(x,x)+287j
.text:0000538F                 mov     eax, 1
.text:00005394                 jmp     loc_5508
.text:00005399 ; ---------------------------------------------------------------------------
.text:00005399
.text:00005399 loc_5399:                               ; CODE XREF: GetOptimumFast(x,x)+28Dj
.text:00005399                 mov     edx, [ebp+arg_0]
.text:0000539C                 add     edx, 24h ; '$'
.text:0000539F                 push    edx
.text:000053A0                 mov     eax, [ebp+arg_0]
.text:000053A3                 push    eax
.text:000053A4                 call    _ReadMatchDistances@8 ; ReadMatchDistances(x,x)
.text:000053A9                 mov     ecx, [ebp+arg_0]
.text:000053AC                 mov     [ecx+20h], eax
.text:000053AF                 mov     edx, [ebp+arg_0]
.text:000053B2                 cmp     dword ptr [edx+20h], 2
.text:000053B6                 jb      short loc_542B
.text:000053B8                 mov     eax, [ebp+arg_0]
.text:000053BB                 mov     ecx, [eax+24h]
.text:000053BE                 mov     edx, [ebp+var_2C]
.text:000053C1                 mov     eax, [edx+ecx*4-4]
.text:000053C5                 mov     [ebp+var_38], eax
.text:000053C8                 mov     ecx, [ebp+arg_0]
.text:000053CB                 mov     edx, [ecx+20h]
.text:000053CE                 cmp     edx, [ebp+var_8]
.text:000053D1                 jb      short loc_53DB
.text:000053D3                 mov     eax, [ebp+var_38]
.text:000053D6                 cmp     eax, [ebp+var_C]
.text:000053D9                 jb      short loc_5421
.text:000053DB
.text:000053DB loc_53DB:                               ; CODE XREF: GetOptimumFast(x,x)+2D1j
.text:000053DB                 mov     ecx, [ebp+var_8]
.text:000053DE                 add     ecx, 1
.text:000053E1                 mov     edx, [ebp+arg_0]
.text:000053E4                 cmp     [edx+20h], ecx
.text:000053E7                 jnz     short loc_53F4
.text:000053E9                 mov     eax, [ebp+var_38]
.text:000053EC                 shr     eax, 7
.text:000053EF                 cmp     eax, [ebp+var_C]
.text:000053F2                 jbe     short loc_5421
.text:000053F4
.text:000053F4 loc_53F4:                               ; CODE XREF: GetOptimumFast(x,x)+2E7j
.text:000053F4                 mov     ecx, [ebp+var_8]
.text:000053F7                 add     ecx, 1
.text:000053FA                 mov     edx, [ebp+arg_0]
.text:000053FD                 cmp     [edx+20h], ecx
.text:00005400                 ja      short loc_5421
.text:00005402                 mov     eax, [ebp+arg_0]
.text:00005405                 mov     ecx, [eax+20h]
.text:00005408                 add     ecx, 1
.text:0000540B                 cmp     ecx, [ebp+var_8]
.text:0000540E                 jb      short loc_542B
.text:00005410                 cmp     [ebp+var_8], 3
.text:00005414                 jb      short loc_542B
.text:00005416                 mov     edx, [ebp+var_C]
.text:00005419                 shr     edx, 7
.text:0000541C                 cmp     edx, [ebp+var_38]
.text:0000541F                 jbe     short loc_542B
.text:00005421
.text:00005421 loc_5421:                               ; CODE XREF: GetOptimumFast(x,x)+2D9j
.text:00005421                                         ; GetOptimumFast(x,x)+2F2j ...
.text:00005421                 mov     eax, 1
.text:00005426                 jmp     loc_5508
.text:0000542B ; ---------------------------------------------------------------------------
.text:0000542B
.text:0000542B loc_542B:                               ; CODE XREF: GetOptimumFast(x,x)+2B6j
.text:0000542B                                         ; GetOptimumFast(x,x)+30Ej ...
.text:0000542B                 mov     esi, esp
.text:0000542D                 mov     eax, [ebp+arg_0]
.text:00005430                 mov     ecx, [eax]
.text:00005432                 push    ecx
.text:00005433                 mov     edx, [ebp+arg_0]
.text:00005436                 mov     eax, [edx+0Ch]
.text:00005439                 call    eax
.text:0000543B                 cmp     esi, esp
.text:0000543D                 call    __RTC_CheckEsp
.text:00005442                 sub     eax, 1
.text:00005445                 mov     [ebp+var_28], eax
.text:00005448                 mov     [ebp+var_24], 0
.text:0000544F                 jmp     short loc_545A
.text:00005451 ; ---------------------------------------------------------------------------
.text:00005451
.text:00005451 loc_5451:                               ; CODE XREF: GetOptimumFast(x,x):loc_5499j
.text:00005451                                         ; GetOptimumFast(x,x):loc_54E5j
.text:00005451                 mov     ecx, [ebp+var_24]
.text:00005454                 add     ecx, 1
.text:00005457                 mov     [ebp+var_24], ecx
.text:0000545A
.text:0000545A loc_545A:                               ; CODE XREF: GetOptimumFast(x,x)+34Fj
.text:0000545A                 cmp     [ebp+var_24], 4
.text:0000545E                 jnb     loc_54EA
.text:00005464                 mov     edx, [ebp+var_24]
.text:00005467                 mov     eax, [ebp+arg_0]
.text:0000546A                 mov     ecx, [ebp+var_28]
.text:0000546D                 sub     ecx, [eax+edx*4+34h]
.text:00005471                 sub     ecx, 1
.text:00005474                 mov     [ebp+var_44], ecx
.text:00005477                 mov     edx, [ebp+var_28]
.text:0000547A                 movzx   eax, byte ptr [edx]
.text:0000547D                 mov     ecx, [ebp+var_44]
.text:00005480                 movzx   edx, byte ptr [ecx]
.text:00005483                 cmp     eax, edx
.text:00005485                 jnz     short loc_5499
.text:00005487                 mov     eax, [ebp+var_28]
.text:0000548A                 movzx   ecx, byte ptr [eax+1]
.text:0000548E                 mov     edx, [ebp+var_44]
.text:00005491                 movzx   eax, byte ptr [edx+1]
.text:00005495                 cmp     ecx, eax
.text:00005497                 jz      short loc_549B
.text:00005499
.text:00005499 loc_5499:                               ; CODE XREF: GetOptimumFast(x,x)+385j
.text:00005499                 jmp     short loc_5451
.text:0000549B ; ---------------------------------------------------------------------------
.text:0000549B
.text:0000549B loc_549B:                               ; CODE XREF: GetOptimumFast(x,x)+397j
.text:0000549B                 mov     ecx, [ebp+var_8]
.text:0000549E                 sub     ecx, 1
.text:000054A1                 mov     [ebp+var_40], ecx
.text:000054A4                 mov     [ebp+var_3C], 2
.text:000054AB                 jmp     short loc_54B6
.text:000054AD ; ---------------------------------------------------------------------------
.text:000054AD
.text:000054AD loc_54AD:                               ; CODE XREF: GetOptimumFast(x,x)+3D4j
.text:000054AD                 mov     edx, [ebp+var_3C]
.text:000054B0                 add     edx, 1
.text:000054B3                 mov     [ebp+var_3C], edx
.text:000054B6
.text:000054B6 loc_54B6:                               ; CODE XREF: GetOptimumFast(x,x)+3ABj
.text:000054B6                 mov     eax, [ebp+var_3C]
.text:000054B9                 cmp     eax, [ebp+var_40]
.text:000054BC                 jnb     short loc_54D6
.text:000054BE                 mov     ecx, [ebp+var_28]
.text:000054C1                 add     ecx, [ebp+var_3C]
.text:000054C4                 movzx   edx, byte ptr [ecx]
.text:000054C7                 mov     eax, [ebp+var_44]
.text:000054CA                 add     eax, [ebp+var_3C]
.text:000054CD                 movzx   ecx, byte ptr [eax]
.text:000054D0                 cmp     edx, ecx
.text:000054D2                 jnz     short loc_54D6
.text:000054D4                 jmp     short loc_54AD
.text:000054D6 ; ---------------------------------------------------------------------------
.text:000054D6
.text:000054D6 loc_54D6:                               ; CODE XREF: GetOptimumFast(x,x)+3BCj
.text:000054D6                                         ; GetOptimumFast(x,x)+3D2j
.text:000054D6                 mov     edx, [ebp+var_3C]
.text:000054D9                 cmp     edx, [ebp+var_40]
.text:000054DC                 jb      short loc_54E5
.text:000054DE                 mov     eax, 1
.text:000054E3                 jmp     short loc_5508
.text:000054E5 ; ---------------------------------------------------------------------------
.text:000054E5
.text:000054E5 loc_54E5:                               ; CODE XREF: GetOptimumFast(x,x)+3DCj
.text:000054E5                 jmp     loc_5451
.text:000054EA ; ---------------------------------------------------------------------------
.text:000054EA
.text:000054EA loc_54EA:                               ; CODE XREF: GetOptimumFast(x,x)+35Ej
.text:000054EA                 mov     eax, [ebp+var_C]
.text:000054ED                 add     eax, 4
.text:000054F0                 mov     ecx, [ebp+arg_4]
.text:000054F3                 mov     [ecx], eax
.text:000054F5                 mov     edx, [ebp+var_8]
.text:000054F8                 sub     edx, 2
.text:000054FB                 push    edx
.text:000054FC                 mov     eax, [ebp+arg_0]
.text:000054FF                 push    eax
.text:00005500                 call    _MovePos@8      ; MovePos(x,x)
.text:00005505                 mov     eax, [ebp+var_8]
.text:00005508
.text:00005508 loc_5508:                               ; CODE XREF: GetOptimumFast(x,x)+61j
.text:00005508                                         ; GetOptimumFast(x,x)+14Bj ...
.text:00005508                 push    edx
.text:00005509                 mov     ecx, ebp
.text:0000550B                 push    eax
.text:0000550C                 lea     edx, $LN44_0
.text:00005512                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005517                 pop     eax
.text:00005518                 pop     edx
.text:00005519                 pop     edi
.text:0000551A                 pop     esi
.text:0000551B                 add     esp, 44h
.text:0000551E                 cmp     ebp, esp
.text:00005520                 call    __RTC_CheckEsp
.text:00005525                 mov     esp, ebp
.text:00005527                 pop     ebp
.text:00005528                 retn    8
.text:00005528 _GetOptimumFast@8 endp
.text:00005528
.text:00005528 ; ---------------------------------------------------------------------------
.text:0000552B                 align 4
.text:0000552C $LN44_0         dd 1                    ; DATA XREF: GetOptimumFast(x,x)+40Co
.text:00005530                 dd offset $LN43
.text:00005534 $LN43           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00005530o
.text:0000553C                 dd offset $LN42         ; "numPairs"
.text:00005540 $LN42           db 'numPairs',0         ; DATA XREF: .text:0000553Co
.text:00005549                 align 10h
.text:00005550
.text:00005550 ; =============== S U B R O U T I N E =======================================
.text:00005550
.text:00005550 ; Attributes: bp-based frame
.text:00005550
.text:00005550 ; __stdcall CheckErrors(x)
.text:00005550 _CheckErrors@4  proc near               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+5Cp
.text:00005550                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+7CAp ...
.text:00005550
.text:00005550 arg_0           = dword ptr  8
.text:00005550
.text:00005550                 push    ebp
.text:00005551                 mov     ebp, esp
.text:00005553                 mov     eax, [ebp+arg_0]
.text:00005556                 cmp     dword ptr [eax+90h], 0
.text:0000555D                 jz      short loc_556A
.text:0000555F                 mov     ecx, [ebp+arg_0]
.text:00005562                 mov     eax, [ecx+90h]
.text:00005568                 jmp     short loc_55BB
.text:0000556A ; ---------------------------------------------------------------------------
.text:0000556A
.text:0000556A loc_556A:                               ; CODE XREF: CheckErrors(x)+Dj
.text:0000556A                 mov     edx, [ebp+arg_0]
.text:0000556D                 cmp     dword ptr [edx+0C8h], 0
.text:00005574                 jz      short loc_5583
.text:00005576                 mov     eax, [ebp+arg_0]
.text:00005579                 mov     dword ptr [eax+90h], 9
.text:00005583
.text:00005583 loc_5583:                               ; CODE XREF: CheckErrors(x)+24j
.text:00005583                 mov     ecx, [ebp+arg_0]
.text:00005586                 cmp     dword ptr [ecx+2ACh], 0
.text:0000558D                 jz      short loc_559C
.text:0000558F                 mov     edx, [ebp+arg_0]
.text:00005592                 mov     dword ptr [edx+90h], 8
.text:0000559C
.text:0000559C loc_559C:                               ; CODE XREF: CheckErrors(x)+3Dj
.text:0000559C                 mov     eax, [ebp+arg_0]
.text:0000559F                 cmp     dword ptr [eax+90h], 0
.text:000055A6                 jz      short loc_55B2
.text:000055A8                 mov     ecx, [ebp+arg_0]
.text:000055AB                 mov     dword ptr [ecx+6Ch], 1
.text:000055B2
.text:000055B2 loc_55B2:                               ; CODE XREF: CheckErrors(x)+56j
.text:000055B2                 mov     edx, [ebp+arg_0]
.text:000055B5                 mov     eax, [edx+90h]
.text:000055BB
.text:000055BB loc_55BB:                               ; CODE XREF: CheckErrors(x)+18j
.text:000055BB                 pop     ebp
.text:000055BC                 retn    4
.text:000055BC _CheckErrors@4  endp
.text:000055BC
.text:000055BC ; ---------------------------------------------------------------------------
.text:000055BF                 align 10h
.text:000055C0
.text:000055C0 ; =============== S U B R O U T I N E =======================================
.text:000055C0
.text:000055C0 ; Attributes: bp-based frame
.text:000055C0
.text:000055C0 ; __stdcall Flush(x, x)
.text:000055C0 _Flush@8        proc near               ; CODE XREF: LzmaEnc_CodeOneBlock(x,x,x,x)+BCp
.text:000055C0                                         ; LzmaEnc_CodeOneBlock(x,x,x,x)+7F8p
.text:000055C0
.text:000055C0 arg_0           = dword ptr  8
.text:000055C0 arg_4           = dword ptr  0Ch
.text:000055C0
.text:000055C0                 push    ebp
.text:000055C1                 mov     ebp, esp
.text:000055C3                 mov     eax, [ebp+arg_0]
.text:000055C6                 mov     dword ptr [eax+6Ch], 1
.text:000055CD                 mov     ecx, [ebp+arg_0]
.text:000055D0                 cmp     dword ptr [ecx+68h], 0
.text:000055D4                 jz      short loc_55E9
.text:000055D6                 mov     edx, [ebp+arg_0]
.text:000055D9                 mov     eax, [ebp+arg_4]
.text:000055DC                 and     eax, [edx+58h]
.text:000055DF                 push    eax
.text:000055E0                 mov     ecx, [ebp+arg_0]
.text:000055E3                 push    ecx
.text:000055E4                 call    _WriteEndMarker@8 ; WriteEndMarker(x,x)
.text:000055E9
.text:000055E9 loc_55E9:                               ; CODE XREF: Flush(x,x)+14j
.text:000055E9                 mov     edx, [ebp+arg_0]
.text:000055EC                 add     edx, 98h ; 'ÿ'
.text:000055F2                 push    edx
.text:000055F3                 call    _RangeEnc_FlushData@4 ; RangeEnc_FlushData(x)
.text:000055F8                 mov     eax, [ebp+arg_0]
.text:000055FB                 add     eax, 98h ; 'ÿ'
.text:00005600                 push    eax
.text:00005601                 call    _RangeEnc_FlushStream@4 ; RangeEnc_FlushStream(x)
.text:00005606                 mov     ecx, [ebp+arg_0]
.text:00005609                 push    ecx
.text:0000560A                 call    _CheckErrors@4  ; CheckErrors(x)
.text:0000560F                 cmp     ebp, esp
.text:00005611                 call    __RTC_CheckEsp
.text:00005616                 pop     ebp
.text:00005617                 retn    8
.text:00005617 _Flush@8        endp
.text:00005617
.text:00005617 ; ---------------------------------------------------------------------------
.text:0000561A                 align 10h
.text:00005620
.text:00005620 ; =============== S U B R O U T I N E =======================================
.text:00005620
.text:00005620 ; Attributes: bp-based frame
.text:00005620
.text:00005620 ; __stdcall RangeEnc_FlushData(x)
.text:00005620 _RangeEnc_FlushData@4 proc near         ; CODE XREF: Flush(x,x)+33p
.text:00005620
.text:00005620 var_4           = dword ptr -4
.text:00005620 arg_0           = dword ptr  8
.text:00005620
.text:00005620                 push    ebp
.text:00005621                 mov     ebp, esp
.text:00005623                 push    ecx
.text:00005624                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000562B                 mov     [ebp+var_4], 0
.text:00005632                 jmp     short loc_563D
.text:00005634 ; ---------------------------------------------------------------------------
.text:00005634
.text:00005634 loc_5634:                               ; CODE XREF: RangeEnc_FlushData(x)+2Bj
.text:00005634                 mov     eax, [ebp+var_4]
.text:00005637                 add     eax, 1
.text:0000563A                 mov     [ebp+var_4], eax
.text:0000563D
.text:0000563D loc_563D:                               ; CODE XREF: RangeEnc_FlushData(x)+12j
.text:0000563D                 cmp     [ebp+var_4], 5
.text:00005641                 jge     short loc_564D
.text:00005643                 mov     ecx, [ebp+arg_0]
.text:00005646                 call    @RangeEnc_ShiftLow@4 ; RangeEnc_ShiftLow(x)
.text:0000564B                 jmp     short loc_5634
.text:0000564D ; ---------------------------------------------------------------------------
.text:0000564D
.text:0000564D loc_564D:                               ; CODE XREF: RangeEnc_FlushData(x)+21j
.text:0000564D                 add     esp, 4
.text:00005650                 cmp     ebp, esp
.text:00005652                 call    __RTC_CheckEsp
.text:00005657                 mov     esp, ebp
.text:00005659                 pop     ebp
.text:0000565A                 retn    4
.text:0000565A _RangeEnc_FlushData@4 endp
.text:0000565A
.text:0000565A ; ---------------------------------------------------------------------------
.text:0000565D                 align 10h
.text:00005660
.text:00005660 ; =============== S U B R O U T I N E =======================================
.text:00005660
.text:00005660 ; Attributes: bp-based frame
.text:00005660
.text:00005660 ; __stdcall WriteEndMarker(x, x)
.text:00005660 _WriteEndMarker@8 proc near             ; CODE XREF: Flush(x,x)+24p
.text:00005660
.text:00005660 var_8           = dword ptr -8
.text:00005660 var_4           = dword ptr -4
.text:00005660 arg_0           = dword ptr  8
.text:00005660 arg_4           = dword ptr  0Ch
.text:00005660
.text:00005660                 push    ebp
.text:00005661                 mov     ebp, esp
.text:00005663                 sub     esp, 8
.text:00005666                 mov     [ebp+var_8], 0CCCCCCCCh
.text:0000566D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005674                 push    1
.text:00005676                 mov     eax, [ebp+arg_0]
.text:00005679                 mov     ecx, [eax+44h]
.text:0000567C                 shl     ecx, 5
.text:0000567F                 mov     edx, [ebp+arg_0]
.text:00005682                 lea     eax, [edx+ecx+32608h]
.text:00005689                 mov     ecx, [ebp+arg_4]
.text:0000568C                 lea     edx, [eax+ecx*2]
.text:0000568F                 push    edx
.text:00005690                 mov     eax, [ebp+arg_0]
.text:00005693                 add     eax, 98h ; 'ÿ'
.text:00005698                 push    eax
.text:00005699                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:0000569E                 push    0
.text:000056A0                 mov     ecx, [ebp+arg_0]
.text:000056A3                 mov     edx, [ecx+44h]
.text:000056A6                 mov     eax, [ebp+arg_0]
.text:000056A9                 lea     ecx, [eax+edx*2+32788h]
.text:000056B0                 push    ecx
.text:000056B1                 mov     edx, [ebp+arg_0]
.text:000056B4                 add     edx, 98h ; 'ÿ'
.text:000056BA                 push    edx
.text:000056BB                 call    _RangeEnc_EncodeBit@12 ; RangeEnc_EncodeBit(x,x,x)
.text:000056C0                 mov     eax, [ebp+arg_0]
.text:000056C3                 mov     ecx, [eax+44h]
.text:000056C6                 mov     edx, [ebp+arg_0]
.text:000056C9                 mov     eax, _kMatchNextStates[ecx*4]
.text:000056D0                 mov     [edx+44h], eax
.text:000056D3                 mov     [ebp+var_4], 2
.text:000056DA                 mov     ecx, [ebp+arg_0]
.text:000056DD                 add     ecx, 30F34h
.text:000056E3                 push    ecx
.text:000056E4                 mov     edx, [ebp+arg_0]
.text:000056E7                 xor     eax, eax
.text:000056E9                 cmp     dword ptr [edx+64h], 0
.text:000056ED                 setz    al
.text:000056F0                 push    eax
.text:000056F1                 mov     ecx, [ebp+arg_4]
.text:000056F4                 push    ecx
.text:000056F5                 mov     edx, [ebp+var_4]
.text:000056F8                 sub     edx, 2
.text:000056FB                 push    edx
.text:000056FC                 mov     eax, [ebp+arg_0]
.text:000056FF                 add     eax, 98h ; 'ÿ'
.text:00005704                 push    eax
.text:00005705                 mov     ecx, [ebp+arg_0]
.text:00005708                 add     ecx, 32C6Ch
.text:0000570E                 push    ecx
.text:0000570F                 call    _LenEnc_Encode2@24 ; LenEnc_Encode2(x,x,x,x,x,x)
.text:00005714                 cmp     [ebp+var_4], 5
.text:00005718                 jnb     short loc_5725
.text:0000571A                 mov     edx, [ebp+var_4]
.text:0000571D                 sub     edx, 2
.text:00005720                 mov     [ebp+var_8], edx
.text:00005723                 jmp     short loc_572C
.text:00005725 ; ---------------------------------------------------------------------------
.text:00005725
.text:00005725 loc_5725:                               ; CODE XREF: WriteEndMarker(x,x)+B8j
.text:00005725                 mov     [ebp+var_8], 3
.text:0000572C
.text:0000572C loc_572C:                               ; CODE XREF: WriteEndMarker(x,x)+C3j
.text:0000572C                 push    3Fh ; '?'
.text:0000572E                 push    6
.text:00005730                 mov     eax, [ebp+var_8]
.text:00005733                 shl     eax, 7
.text:00005736                 mov     ecx, [ebp+arg_0]
.text:00005739                 lea     edx, [ecx+eax+32968h]
.text:00005740                 push    edx
.text:00005741                 mov     eax, [ebp+arg_0]
.text:00005744                 add     eax, 98h ; 'ÿ'
.text:00005749                 push    eax
.text:0000574A                 call    _RcTree_Encode@16 ; RcTree_Encode(x,x,x,x)
.text:0000574F                 push    1Ah
.text:00005751                 push    3FFFFFFh
.text:00005756                 mov     ecx, [ebp+arg_0]
.text:00005759                 add     ecx, 98h ; 'ÿ'
.text:0000575F                 push    ecx
.text:00005760                 call    _RangeEnc_EncodeDirectBits@12 ; RangeEnc_EncodeDirectBits(x,x,x)
.text:00005765                 push    0Fh
.text:00005767                 push    4
.text:00005769                 mov     edx, [ebp+arg_0]
.text:0000576C                 add     edx, 32C4Ch
.text:00005772                 push    edx
.text:00005773                 mov     eax, [ebp+arg_0]
.text:00005776                 add     eax, 98h ; 'ÿ'
.text:0000577B                 push    eax
.text:0000577C                 call    _RcTree_ReverseEncode@16 ; RcTree_ReverseEncode(x,x,x,x)
.text:00005781                 add     esp, 8
.text:00005784                 cmp     ebp, esp
.text:00005786                 call    __RTC_CheckEsp
.text:0000578B                 mov     esp, ebp
.text:0000578D                 pop     ebp
.text:0000578E                 retn    8
.text:0000578E _WriteEndMarker@8 endp
.text:0000578E
.text:0000578E ; ---------------------------------------------------------------------------
.text:00005791                 align 10h
.text:000057A0
.text:000057A0 ; =============== S U B R O U T I N E =======================================
.text:000057A0
.text:000057A0 ; Attributes: bp-based frame
.text:000057A0
.text:000057A0 ; int __stdcall MyWrite(int, void *Src, size_t Size)
.text:000057A0 _MyWrite@12     proc near               ; DATA XREF: LzmaEnc_CodeOneMemBlock(x,x,x,x,x,x)+1Co
.text:000057A0                                         ; LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+3Ao
.text:000057A0
.text:000057A0 var_4           = dword ptr -4
.text:000057A0 arg_0           = dword ptr  8
.text:000057A0 Src             = dword ptr  0Ch
.text:000057A0 Size            = dword ptr  10h
.text:000057A0
.text:000057A0                 push    ebp
.text:000057A1                 mov     ebp, esp
.text:000057A3                 push    ecx
.text:000057A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057AB                 mov     eax, [ebp+arg_0]
.text:000057AE                 mov     [ebp+var_4], eax
.text:000057B1                 mov     ecx, [ebp+var_4]
.text:000057B4                 mov     edx, [ecx+8]
.text:000057B7                 cmp     edx, [ebp+Size]
.text:000057BA                 jnb     short loc_57CF
.text:000057BC                 mov     eax, [ebp+var_4]
.text:000057BF                 mov     ecx, [eax+8]
.text:000057C2                 mov     [ebp+Size], ecx
.text:000057C5                 mov     edx, [ebp+var_4]
.text:000057C8                 mov     dword ptr [edx+0Ch], 1
.text:000057CF
.text:000057CF loc_57CF:                               ; CODE XREF: MyWrite(x,x,x)+1Aj
.text:000057CF                 mov     eax, [ebp+Size]
.text:000057D2                 push    eax             ; Size
.text:000057D3                 mov     ecx, [ebp+Src]
.text:000057D6                 push    ecx             ; Src
.text:000057D7                 mov     edx, [ebp+var_4]
.text:000057DA                 mov     eax, [edx+4]
.text:000057DD                 push    eax             ; Dst
.text:000057DE                 call    _memcpy
.text:000057E3                 add     esp, 0Ch
.text:000057E6                 mov     ecx, [ebp+var_4]
.text:000057E9                 mov     edx, [ecx+8]
.text:000057EC                 sub     edx, [ebp+Size]
.text:000057EF                 mov     eax, [ebp+var_4]
.text:000057F2                 mov     [eax+8], edx
.text:000057F5                 mov     ecx, [ebp+var_4]
.text:000057F8                 mov     edx, [ecx+4]
.text:000057FB                 add     edx, [ebp+Size]
.text:000057FE                 mov     eax, [ebp+var_4]
.text:00005801                 mov     [eax+4], edx
.text:00005804                 mov     eax, [ebp+Size]
.text:00005807                 add     esp, 4
.text:0000580A                 cmp     ebp, esp
.text:0000580C                 call    __RTC_CheckEsp
.text:00005811                 mov     esp, ebp
.text:00005813                 pop     ebp
.text:00005814                 retn    0Ch
.text:00005814 _MyWrite@12     endp
.text:00005814
.text:00005814 ; ---------------------------------------------------------------------------
.text:00005817                 align 10h
.text:00005820
.text:00005820 ; =============== S U B R O U T I N E =======================================
.text:00005820
.text:00005820 ; Attributes: bp-based frame
.text:00005820
.text:00005820 ; __stdcall LzmaEnc_Encode(x, x, x, x, x, x)
.text:00005820                 public _LzmaEnc_Encode@24
.text:00005820 _LzmaEnc_Encode@24 proc near
.text:00005820
.text:00005820 var_4           = dword ptr -4
.text:00005820 arg_0           = dword ptr  8
.text:00005820 arg_4           = dword ptr  0Ch
.text:00005820 arg_8           = dword ptr  10h
.text:00005820 arg_C           = dword ptr  14h
.text:00005820 arg_10          = dword ptr  18h
.text:00005820 arg_14          = dword ptr  1Ch
.text:00005820
.text:00005820                 push    ebp
.text:00005821                 mov     ebp, esp
.text:00005823                 push    ecx
.text:00005824                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000582B                 mov     eax, [ebp+arg_14]
.text:0000582E                 push    eax
.text:0000582F                 mov     ecx, [ebp+arg_10]
.text:00005832                 push    ecx
.text:00005833                 mov     edx, [ebp+arg_8]
.text:00005836                 push    edx
.text:00005837                 mov     eax, [ebp+arg_4]
.text:0000583A                 push    eax
.text:0000583B                 mov     ecx, [ebp+arg_0]
.text:0000583E                 push    ecx
.text:0000583F                 call    _LzmaEnc_Prepare@20 ; LzmaEnc_Prepare(x,x,x,x,x)
.text:00005844                 mov     [ebp+var_4], eax
.text:00005847                 cmp     [ebp+var_4], 0
.text:0000584B                 jz      short loc_5852
.text:0000584D                 mov     eax, [ebp+var_4]
.text:00005850                 jmp     short loc_585F
.text:00005852 ; ---------------------------------------------------------------------------
.text:00005852
.text:00005852 loc_5852:                               ; CODE XREF: LzmaEnc_Encode(x,x,x,x,x,x)+2Bj
.text:00005852                 mov     edx, [ebp+arg_C]
.text:00005855                 push    edx
.text:00005856                 mov     eax, [ebp+arg_0]
.text:00005859                 push    eax
.text:0000585A                 call    _LzmaEnc_Encode2@8 ; LzmaEnc_Encode2(x,x)
.text:0000585F
.text:0000585F loc_585F:                               ; CODE XREF: LzmaEnc_Encode(x,x,x,x,x,x)+30j
.text:0000585F                 add     esp, 4
.text:00005862                 cmp     ebp, esp
.text:00005864                 call    __RTC_CheckEsp
.text:00005869                 mov     esp, ebp
.text:0000586B                 pop     ebp
.text:0000586C                 retn    18h
.text:0000586C _LzmaEnc_Encode@24 endp
.text:0000586C
.text:0000586C ; ---------------------------------------------------------------------------
.text:0000586F                 align 10h
.text:00005870
.text:00005870 ; =============== S U B R O U T I N E =======================================
.text:00005870
.text:00005870 ; Attributes: bp-based frame
.text:00005870
.text:00005870 ; __stdcall LzmaEnc_Prepare(x, x, x, x, x)
.text:00005870 _LzmaEnc_Prepare@20 proc near           ; CODE XREF: LzmaEnc_Encode(x,x,x,x,x,x)+1Fp
.text:00005870
.text:00005870 var_4           = dword ptr -4
.text:00005870 arg_0           = dword ptr  8
.text:00005870 arg_4           = dword ptr  0Ch
.text:00005870 arg_8           = dword ptr  10h
.text:00005870 arg_C           = dword ptr  14h
.text:00005870 arg_10          = dword ptr  18h
.text:00005870
.text:00005870                 push    ebp
.text:00005871                 mov     ebp, esp
.text:00005873                 push    ecx
.text:00005874                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000587B                 mov     eax, [ebp+arg_0]
.text:0000587E                 mov     [ebp+var_4], eax
.text:00005881                 mov     ecx, [ebp+var_4]
.text:00005884                 mov     edx, [ebp+arg_8]
.text:00005887                 mov     [ecx+288h], edx
.text:0000588D                 mov     eax, [ebp+var_4]
.text:00005890                 mov     dword ptr [eax+74h], 1
.text:00005897                 mov     ecx, [ebp+var_4]
.text:0000589A                 mov     edx, [ebp+arg_4]
.text:0000589D                 mov     [ecx+0BCh], edx
.text:000058A3                 mov     eax, [ebp+arg_10]
.text:000058A6                 push    eax
.text:000058A7                 mov     ecx, [ebp+arg_C]
.text:000058AA                 push    ecx
.text:000058AB                 push    0
.text:000058AD                 mov     edx, [ebp+var_4]
.text:000058B0                 push    edx
.text:000058B1                 call    _LzmaEnc_AllocAndInit@16 ; LzmaEnc_AllocAndInit(x,x,x,x)
.text:000058B6                 add     esp, 4
.text:000058B9                 cmp     ebp, esp
.text:000058BB                 call    __RTC_CheckEsp
.text:000058C0                 mov     esp, ebp
.text:000058C2                 pop     ebp
.text:000058C3                 retn    14h
.text:000058C3 _LzmaEnc_Prepare@20 endp
.text:000058C3
.text:000058C3 ; ---------------------------------------------------------------------------
.text:000058C6                 align 10h
.text:000058D0
.text:000058D0 ; =============== S U B R O U T I N E =======================================
.text:000058D0
.text:000058D0 ; Attributes: bp-based frame
.text:000058D0
.text:000058D0 ; __stdcall LzmaEnc_Encode2(x, x)
.text:000058D0 _LzmaEnc_Encode2@8 proc near            ; CODE XREF: LzmaEnc_Encode(x,x,x,x,x,x)+3Ap
.text:000058D0                                         ; LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+97p
.text:000058D0
.text:000058D0 var_310         = byte ptr -310h
.text:000058D0 var_30C         = byte ptr -30Ch
.text:000058D0 var_30B         = byte ptr -30Bh
.text:000058D0 var_8           = dword ptr -8
.text:000058D0 var_4           = dword ptr -4
.text:000058D0 arg_0           = dword ptr  8
.text:000058D0 arg_4           = dword ptr  0Ch
.text:000058D0
.text:000058D0                 push    ebp
.text:000058D1                 mov     ebp, esp
.text:000058D3                 sub     esp, 310h
.text:000058D9                 push    esi
.text:000058DA                 push    edi
.text:000058DB                 lea     edi, [ebp+var_310]
.text:000058E1                 mov     ecx, 0C4h ; '-'
.text:000058E6                 mov     eax, 0CCCCCCCCh
.text:000058EB                 rep stosd
.text:000058ED                 mov     eax, dword ptr ds:___security_cookie
.text:000058F2                 xor     eax, ebp
.text:000058F4                 mov     [ebp+var_4], eax
.text:000058F7                 mov     [ebp+var_8], 0
.text:000058FE                 mov     [ebp+var_30C], 0
.text:00005905                 mov     al, [ebp+var_30C]
.text:0000590B                 mov     [ebp+var_30B], al
.text:00005911
.text:00005911 loc_5911:                               ; CODE XREF: LzmaEnc_Encode2(x,x):loc_599Ej
.text:00005911                 push    0
.text:00005913                 push    0
.text:00005915                 push    0
.text:00005917                 mov     ecx, [ebp+arg_0]
.text:0000591A                 push    ecx
.text:0000591B                 call    _LzmaEnc_CodeOneBlock@16 ; LzmaEnc_CodeOneBlock(x,x,x,x)
.text:00005920                 mov     [ebp+var_8], eax
.text:00005923                 cmp     [ebp+var_8], 0
.text:00005927                 jnz     short loc_5932
.text:00005929                 mov     edx, [ebp+arg_0]
.text:0000592C                 cmp     dword ptr [edx+6Ch], 0
.text:00005930                 jz      short loc_5934
.text:00005932
.text:00005932 loc_5932:                               ; CODE XREF: LzmaEnc_Encode2(x,x)+57j
.text:00005932                 jmp     short loc_59A3
.text:00005934 ; ---------------------------------------------------------------------------
.text:00005934
.text:00005934 loc_5934:                               ; CODE XREF: LzmaEnc_Encode2(x,x)+60j
.text:00005934                 cmp     [ebp+arg_4], 0
.text:00005938                 jz      short loc_599E
.text:0000593A                 mov     eax, [ebp+arg_0]
.text:0000593D                 mov     ecx, [ebp+arg_0]
.text:00005940                 mov     eax, [eax+0B0h]
.text:00005946                 sub     eax, [ecx+0B8h]
.text:0000594C                 cdq
.text:0000594D                 mov     ecx, [ebp+arg_0]
.text:00005950                 add     eax, [ecx+0C0h]
.text:00005956                 adc     edx, [ecx+0C4h]
.text:0000595C                 mov     ecx, [ebp+arg_0]
.text:0000595F                 add     eax, [ecx+0A8h]
.text:00005965                 adc     edx, [ecx+0ACh]
.text:0000596B                 mov     esi, esp
.text:0000596D                 push    edx
.text:0000596E                 push    eax
.text:0000596F                 mov     edx, [ebp+arg_0]
.text:00005972                 mov     eax, [edx+7Ch]
.text:00005975                 push    eax
.text:00005976                 mov     ecx, [edx+78h]
.text:00005979                 push    ecx
.text:0000597A                 mov     edx, [ebp+arg_4]
.text:0000597D                 push    edx
.text:0000597E                 mov     eax, [ebp+arg_4]
.text:00005981                 mov     ecx, [eax]
.text:00005983                 call    ecx
.text:00005985                 cmp     esi, esp
.text:00005987                 call    __RTC_CheckEsp
.text:0000598C                 mov     [ebp+var_8], eax
.text:0000598F                 cmp     [ebp+var_8], 0
.text:00005993                 jz      short loc_599E
.text:00005995                 mov     [ebp+var_8], 0Ah
.text:0000599C                 jmp     short loc_59A3
.text:0000599E ; ---------------------------------------------------------------------------
.text:0000599E
.text:0000599E loc_599E:                               ; CODE XREF: LzmaEnc_Encode2(x,x)+68j
.text:0000599E                                         ; LzmaEnc_Encode2(x,x)+C3j
.text:0000599E                 jmp     loc_5911
.text:000059A3 ; ---------------------------------------------------------------------------
.text:000059A3
.text:000059A3 loc_59A3:                               ; CODE XREF: LzmaEnc_Encode2(x,x):loc_5932j
.text:000059A3                                         ; LzmaEnc_Encode2(x,x)+CCj
.text:000059A3                 mov     edx, [ebp+arg_0]
.text:000059A6                 push    edx
.text:000059A7                 call    _LzmaEnc_Finish@4 ; LzmaEnc_Finish(x)
.text:000059AC                 mov     eax, [ebp+var_8]
.text:000059AF                 push    edx
.text:000059B0                 mov     ecx, ebp
.text:000059B2                 push    eax
.text:000059B3                 lea     edx, $LN11
.text:000059B9                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000059BE                 pop     eax
.text:000059BF                 pop     edx
.text:000059C0                 pop     edi
.text:000059C1                 pop     esi
.text:000059C2                 mov     ecx, [ebp+var_4]
.text:000059C5                 xor     ecx, ebp
.text:000059C7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000059CC                 add     esp, 310h
.text:000059D2                 cmp     ebp, esp
.text:000059D4                 call    __RTC_CheckEsp
.text:000059D9                 mov     esp, ebp
.text:000059DB                 pop     ebp
.text:000059DC                 retn    8
.text:000059DC _LzmaEnc_Encode2@8 endp
.text:000059DC
.text:000059DC ; ---------------------------------------------------------------------------
.text:000059DF                 align 10h
.text:000059E0 $LN11           dd 1                    ; DATA XREF: LzmaEnc_Encode2(x,x)+E3o
.text:000059E4                 dd offset $LN10
.text:000059E8 $LN10           dd 0FFFFFCF4h, 300h     ; DATA XREF: .text:000059E4o
.text:000059F0                 dd offset $LN9          ; "allocaDummy"
.text:000059F4 $LN9            db 'allocaDummy',0      ; DATA XREF: .text:000059F0o
.text:00005A00
.text:00005A00 ; =============== S U B R O U T I N E =======================================
.text:00005A00
.text:00005A00 ; Attributes: bp-based frame
.text:00005A00
.text:00005A00 ; __stdcall LzmaEnc_WriteProperties(x, x, x)
.text:00005A00                 public _LzmaEnc_WriteProperties@12
.text:00005A00 _LzmaEnc_WriteProperties@12 proc near   ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+4Fp
.text:00005A00
.text:00005A00 var_10          = dword ptr -10h
.text:00005A00 var_C           = dword ptr -0Ch
.text:00005A00 var_8           = dword ptr -8
.text:00005A00 var_4           = dword ptr -4
.text:00005A00 arg_0           = dword ptr  8
.text:00005A00 arg_4           = dword ptr  0Ch
.text:00005A00 arg_8           = dword ptr  10h
.text:00005A00
.text:00005A00                 push    ebp
.text:00005A01                 mov     ebp, esp
.text:00005A03                 sub     esp, 10h
.text:00005A06                 mov     eax, 0CCCCCCCCh
.text:00005A0B                 mov     [ebp+var_10], eax
.text:00005A0E                 mov     [ebp+var_C], eax
.text:00005A11                 mov     [ebp+var_8], eax
.text:00005A14                 mov     [ebp+var_4], eax
.text:00005A17                 mov     eax, [ebp+arg_0]
.text:00005A1A                 mov     [ebp+var_4], eax
.text:00005A1D                 mov     ecx, [ebp+var_4]
.text:00005A20                 mov     edx, [ecx+8Ch]
.text:00005A26                 mov     [ebp+var_C], edx
.text:00005A29                 mov     eax, [ebp+arg_8]
.text:00005A2C                 cmp     dword ptr [eax], 5
.text:00005A2F                 jnb     short loc_5A3B
.text:00005A31                 mov     eax, 5
.text:00005A36                 jmp     loc_5B14
.text:00005A3B ; ---------------------------------------------------------------------------
.text:00005A3B
.text:00005A3B loc_5A3B:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+2Fj
.text:00005A3B                 mov     ecx, [ebp+arg_8]
.text:00005A3E                 mov     dword ptr [ecx], 5
.text:00005A44                 mov     edx, [ebp+var_4]
.text:00005A47                 mov     eax, [edx+50h]
.text:00005A4A                 imul    eax, 5
.text:00005A4D                 mov     ecx, [ebp+var_4]
.text:00005A50                 add     eax, [ecx+4Ch]
.text:00005A53                 imul    eax, 9
.text:00005A56                 mov     edx, [ebp+var_4]
.text:00005A59                 add     eax, [edx+48h]
.text:00005A5C                 mov     ecx, [ebp+arg_4]
.text:00005A5F                 mov     [ecx], al
.text:00005A61                 cmp     [ebp+var_C], 400000h
.text:00005A68                 jb      short loc_5A8E
.text:00005A6A                 mov     [ebp+var_10], 0FFFFFh
.text:00005A71                 or      edx, 0FFFFFFFFh
.text:00005A74                 sub     edx, [ebp+var_10]
.text:00005A77                 cmp     [ebp+var_C], edx
.text:00005A7A                 jnb     short loc_5A8C
.text:00005A7C                 mov     eax, [ebp+var_C]
.text:00005A7F                 add     eax, [ebp+var_10]
.text:00005A82                 mov     ecx, [ebp+var_10]
.text:00005A85                 not     ecx
.text:00005A87                 and     eax, ecx
.text:00005A89                 mov     [ebp+var_C], eax
.text:00005A8C
.text:00005A8C loc_5A8C:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+7Aj
.text:00005A8C                 jmp     short loc_5AE4
.text:00005A8E ; ---------------------------------------------------------------------------
.text:00005A8E
.text:00005A8E loc_5A8E:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+68j
.text:00005A8E                 mov     [ebp+var_8], 0Bh
.text:00005A95                 jmp     short loc_5AA0
.text:00005A97 ; ---------------------------------------------------------------------------
.text:00005A97
.text:00005A97 loc_5A97:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x):loc_5AE2j
.text:00005A97                 mov     edx, [ebp+var_8]
.text:00005A9A                 add     edx, 1
.text:00005A9D                 mov     [ebp+var_8], edx
.text:00005AA0
.text:00005AA0 loc_5AA0:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+95j
.text:00005AA0                 cmp     [ebp+var_8], 1Eh
.text:00005AA4                 ja      short loc_5AE4
.text:00005AA6                 mov     eax, 2
.text:00005AAB                 mov     ecx, [ebp+var_8]
.text:00005AAE                 shl     eax, cl
.text:00005AB0                 cmp     [ebp+var_C], eax
.text:00005AB3                 ja      short loc_5AC4
.text:00005AB5                 mov     edx, 2
.text:00005ABA                 mov     ecx, [ebp+var_8]
.text:00005ABD                 shl     edx, cl
.text:00005ABF                 mov     [ebp+var_C], edx
.text:00005AC2                 jmp     short loc_5AE4
.text:00005AC4 ; ---------------------------------------------------------------------------
.text:00005AC4
.text:00005AC4 loc_5AC4:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+B3j
.text:00005AC4                 mov     eax, 3
.text:00005AC9                 mov     ecx, [ebp+var_8]
.text:00005ACC                 shl     eax, cl
.text:00005ACE                 cmp     [ebp+var_C], eax
.text:00005AD1                 ja      short loc_5AE2
.text:00005AD3                 mov     edx, 3
.text:00005AD8                 mov     ecx, [ebp+var_8]
.text:00005ADB                 shl     edx, cl
.text:00005ADD                 mov     [ebp+var_C], edx
.text:00005AE0                 jmp     short loc_5AE4
.text:00005AE2 ; ---------------------------------------------------------------------------
.text:00005AE2
.text:00005AE2 loc_5AE2:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+D1j
.text:00005AE2                 jmp     short loc_5A97
.text:00005AE4 ; ---------------------------------------------------------------------------
.text:00005AE4
.text:00005AE4 loc_5AE4:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x):loc_5A8Cj
.text:00005AE4                                         ; LzmaEnc_WriteProperties(x,x,x)+A4j ...
.text:00005AE4                 mov     [ebp+var_8], 0
.text:00005AEB                 jmp     short loc_5AF6
.text:00005AED ; ---------------------------------------------------------------------------
.text:00005AED
.text:00005AED loc_5AED:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+110j
.text:00005AED                 mov     eax, [ebp+var_8]
.text:00005AF0                 add     eax, 1
.text:00005AF3                 mov     [ebp+var_8], eax
.text:00005AF6
.text:00005AF6 loc_5AF6:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+EBj
.text:00005AF6                 cmp     [ebp+var_8], 4
.text:00005AFA                 jnb     short loc_5B12
.text:00005AFC                 mov     ecx, [ebp+var_8]
.text:00005AFF                 shl     ecx, 3
.text:00005B02                 mov     edx, [ebp+var_C]
.text:00005B05                 shr     edx, cl
.text:00005B07                 mov     eax, [ebp+arg_4]
.text:00005B0A                 add     eax, [ebp+var_8]
.text:00005B0D                 mov     [eax+1], dl
.text:00005B10                 jmp     short loc_5AED
.text:00005B12 ; ---------------------------------------------------------------------------
.text:00005B12
.text:00005B12 loc_5B12:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+FAj
.text:00005B12                 xor     eax, eax
.text:00005B14
.text:00005B14 loc_5B14:                               ; CODE XREF: LzmaEnc_WriteProperties(x,x,x)+36j
.text:00005B14                 mov     esp, ebp
.text:00005B16                 pop     ebp
.text:00005B17                 retn    0Ch
.text:00005B17 _LzmaEnc_WriteProperties@12 endp
.text:00005B17
.text:00005B17 ; ---------------------------------------------------------------------------
.text:00005B1A                 align 10h
.text:00005B20
.text:00005B20 ; =============== S U B R O U T I N E =======================================
.text:00005B20
.text:00005B20 ; Attributes: bp-based frame
.text:00005B20
.text:00005B20 ; __stdcall LzmaEnc_MemEncode(x, x, x, x, x, x, x, x, x)
.text:00005B20                 public _LzmaEnc_MemEncode@36
.text:00005B20 _LzmaEnc_MemEncode@36 proc near         ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+81p
.text:00005B20
.text:00005B20 var_20          = dword ptr -20h
.text:00005B20 var_1C          = dword ptr -1Ch
.text:00005B20 var_18          = dword ptr -18h
.text:00005B20 var_14          = dword ptr -14h
.text:00005B20 var_10          = dword ptr -10h
.text:00005B20 var_C           = dword ptr -0Ch
.text:00005B20 var_8           = dword ptr -8
.text:00005B20 var_4           = dword ptr -4
.text:00005B20 arg_0           = dword ptr  8
.text:00005B20 arg_4           = dword ptr  0Ch
.text:00005B20 arg_8           = dword ptr  10h
.text:00005B20 arg_C           = dword ptr  14h
.text:00005B20 arg_10          = dword ptr  18h
.text:00005B20 arg_14          = dword ptr  1Ch
.text:00005B20 arg_18          = dword ptr  20h
.text:00005B20 arg_1C          = dword ptr  24h
.text:00005B20 arg_20          = dword ptr  28h
.text:00005B20
.text:00005B20                 push    ebp
.text:00005B21                 mov     ebp, esp
.text:00005B23                 sub     esp, 20h
.text:00005B26                 mov     eax, 0CCCCCCCCh
.text:00005B2B                 mov     [ebp+var_20], eax
.text:00005B2E                 mov     [ebp+var_1C], eax
.text:00005B31                 mov     [ebp+var_18], eax
.text:00005B34                 mov     [ebp+var_14], eax
.text:00005B37                 mov     [ebp+var_10], eax
.text:00005B3A                 mov     [ebp+var_C], eax
.text:00005B3D                 mov     [ebp+var_8], eax
.text:00005B40                 mov     [ebp+var_4], eax
.text:00005B43                 mov     eax, [ebp+arg_0]
.text:00005B46                 mov     [ebp+var_8], eax
.text:00005B49                 mov     ecx, [ebp+arg_10]
.text:00005B4C                 push    ecx
.text:00005B4D                 mov     edx, [ebp+arg_C]
.text:00005B50                 push    edx
.text:00005B51                 mov     eax, [ebp+var_8]
.text:00005B54                 push    eax
.text:00005B55                 call    _LzmaEnc_SetInputBuf@12 ; LzmaEnc_SetInputBuf(x,x,x)
.text:00005B5A                 mov     [ebp+var_1C], offset _MyWrite@12 ; MyWrite(x,x,x)
.text:00005B61                 mov     ecx, [ebp+arg_4]
.text:00005B64                 mov     [ebp+var_18], ecx
.text:00005B67                 mov     edx, [ebp+arg_8]
.text:00005B6A                 mov     eax, [edx]
.text:00005B6C                 mov     [ebp+var_14], eax
.text:00005B6F                 mov     [ebp+var_10], 0
.text:00005B76                 mov     ecx, [ebp+var_8]
.text:00005B79                 mov     edx, [ebp+arg_14]
.text:00005B7C                 mov     [ecx+68h], edx
.text:00005B7F                 mov     eax, [ebp+var_8]
.text:00005B82                 lea     ecx, [ebp+var_1C]
.text:00005B85                 mov     [eax+0BCh], ecx
.text:00005B8B                 mov     edx, [ebp+arg_20]
.text:00005B8E                 push    edx
.text:00005B8F                 mov     eax, [ebp+arg_1C]
.text:00005B92                 push    eax
.text:00005B93                 push    0
.text:00005B95                 mov     ecx, [ebp+arg_10]
.text:00005B98                 push    ecx
.text:00005B99                 mov     edx, [ebp+arg_C]
.text:00005B9C                 push    edx
.text:00005B9D                 mov     eax, [ebp+arg_0]
.text:00005BA0                 push    eax
.text:00005BA1                 call    _LzmaEnc_MemPrepare@24 ; LzmaEnc_MemPrepare(x,x,x,x,x,x)
.text:00005BA6                 mov     [ebp+var_4], eax
.text:00005BA9                 cmp     [ebp+var_4], 0
.text:00005BAD                 jnz     short loc_5BBF
.text:00005BAF                 mov     ecx, [ebp+arg_18]
.text:00005BB2                 push    ecx
.text:00005BB3                 mov     edx, [ebp+var_8]
.text:00005BB6                 push    edx
.text:00005BB7                 call    _LzmaEnc_Encode2@8 ; LzmaEnc_Encode2(x,x)
.text:00005BBC                 mov     [ebp+var_4], eax
.text:00005BBF
.text:00005BBF loc_5BBF:                               ; CODE XREF: LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+8Dj
.text:00005BBF                 mov     eax, [ebp+arg_8]
.text:00005BC2                 mov     ecx, [eax]
.text:00005BC4                 sub     ecx, [ebp+var_14]
.text:00005BC7                 mov     edx, [ebp+arg_8]
.text:00005BCA                 mov     [edx], ecx
.text:00005BCC                 cmp     [ebp+var_10], 0
.text:00005BD0                 jz      short loc_5BD9
.text:00005BD2                 mov     eax, 7
.text:00005BD7                 jmp     short loc_5BDC
.text:00005BD9 ; ---------------------------------------------------------------------------
.text:00005BD9
.text:00005BD9 loc_5BD9:                               ; CODE XREF: LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+B0j
.text:00005BD9                 mov     eax, [ebp+var_4]
.text:00005BDC
.text:00005BDC loc_5BDC:                               ; CODE XREF: LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+B7j
.text:00005BDC                 push    edx
.text:00005BDD                 mov     ecx, ebp
.text:00005BDF                 push    eax
.text:00005BE0                 lea     edx, $LN7_0
.text:00005BE6                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00005BEB                 pop     eax
.text:00005BEC                 pop     edx
.text:00005BED                 add     esp, 20h
.text:00005BF0                 cmp     ebp, esp
.text:00005BF2                 call    __RTC_CheckEsp
.text:00005BF7                 mov     esp, ebp
.text:00005BF9                 pop     ebp
.text:00005BFA                 retn    24h
.text:00005BFA _LzmaEnc_MemEncode@36 endp
.text:00005BFA
.text:00005BFA ; ---------------------------------------------------------------------------
.text:00005BFD                 align 10h
.text:00005C00 $LN7_0          dd 1                    ; DATA XREF: LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)+C0o
.text:00005C04                 dd offset $LN6_0
.text:00005C08 $LN6_0          dd 0FFFFFFE4h, 10h      ; DATA XREF: .text:00005C04o
.text:00005C10                 dd offset $LN5_2        ; "outStream"
.text:00005C14 $LN5_2          db 'outStream',0        ; DATA XREF: .text:00005C10o
.text:00005C1E                 align 10h
.text:00005C20
.text:00005C20 ; =============== S U B R O U T I N E =======================================
.text:00005C20
.text:00005C20 ; Attributes: bp-based frame
.text:00005C20
.text:00005C20 ; __stdcall LzmaEncode(x, x, x, x, x, x, x, x, x, x, x)
.text:00005C20                 public _LzmaEncode@44
.text:00005C20 _LzmaEncode@44  proc near
.text:00005C20
.text:00005C20 var_8           = dword ptr -8
.text:00005C20 var_4           = dword ptr -4
.text:00005C20 arg_0           = dword ptr  8
.text:00005C20 arg_4           = dword ptr  0Ch
.text:00005C20 arg_8           = dword ptr  10h
.text:00005C20 arg_C           = dword ptr  14h
.text:00005C20 arg_10          = dword ptr  18h
.text:00005C20 arg_14          = dword ptr  1Ch
.text:00005C20 arg_18          = dword ptr  20h
.text:00005C20 arg_1C          = dword ptr  24h
.text:00005C20 arg_20          = dword ptr  28h
.text:00005C20 arg_24          = dword ptr  2Ch
.text:00005C20 arg_28          = dword ptr  30h
.text:00005C20
.text:00005C20                 push    ebp
.text:00005C21                 mov     ebp, esp
.text:00005C23                 sub     esp, 8
.text:00005C26                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005C2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005C34                 mov     eax, [ebp+arg_24]
.text:00005C37                 push    eax
.text:00005C38                 call    _LzmaEnc_Create@4 ; LzmaEnc_Create(x)
.text:00005C3D                 mov     [ebp+var_4], eax
.text:00005C40                 cmp     [ebp+var_4], 0
.text:00005C44                 jnz     short loc_5C4D
.text:00005C46                 mov     eax, 2
.text:00005C4B                 jmp     short loc_5CBD
.text:00005C4D ; ---------------------------------------------------------------------------
.text:00005C4D
.text:00005C4D loc_5C4D:                               ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+24j
.text:00005C4D                 mov     ecx, [ebp+arg_10]
.text:00005C50                 push    ecx
.text:00005C51                 mov     edx, [ebp+var_4]
.text:00005C54                 push    edx
.text:00005C55                 call    _LzmaEnc_SetProps@8 ; LzmaEnc_SetProps(x,x)
.text:00005C5A                 mov     [ebp+var_8], eax
.text:00005C5D                 cmp     [ebp+var_8], 0
.text:00005C61                 jnz     short loc_5CA9
.text:00005C63                 mov     eax, [ebp+arg_18]
.text:00005C66                 push    eax
.text:00005C67                 mov     ecx, [ebp+arg_14]
.text:00005C6A                 push    ecx
.text:00005C6B                 mov     edx, [ebp+var_4]
.text:00005C6E                 push    edx
.text:00005C6F                 call    _LzmaEnc_WriteProperties@12 ; LzmaEnc_WriteProperties(x,x,x)
.text:00005C74                 mov     [ebp+var_8], eax
.text:00005C77                 cmp     [ebp+var_8], 0
.text:00005C7B                 jnz     short loc_5CA9
.text:00005C7D                 mov     eax, [ebp+arg_28]
.text:00005C80                 push    eax
.text:00005C81                 mov     ecx, [ebp+arg_24]
.text:00005C84                 push    ecx
.text:00005C85                 mov     edx, [ebp+arg_20]
.text:00005C88                 push    edx
.text:00005C89                 mov     eax, [ebp+arg_1C]
.text:00005C8C                 push    eax
.text:00005C8D                 mov     ecx, [ebp+arg_C]
.text:00005C90                 push    ecx
.text:00005C91                 mov     edx, [ebp+arg_8]
.text:00005C94                 push    edx
.text:00005C95                 mov     eax, [ebp+arg_4]
.text:00005C98                 push    eax
.text:00005C99                 mov     ecx, [ebp+arg_0]
.text:00005C9C                 push    ecx
.text:00005C9D                 mov     edx, [ebp+var_4]
.text:00005CA0                 push    edx
.text:00005CA1                 call    _LzmaEnc_MemEncode@36 ; LzmaEnc_MemEncode(x,x,x,x,x,x,x,x,x)
.text:00005CA6                 mov     [ebp+var_8], eax
.text:00005CA9
.text:00005CA9 loc_5CA9:                               ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+41j
.text:00005CA9                                         ; LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+5Bj
.text:00005CA9                 mov     eax, [ebp+arg_28]
.text:00005CAC                 push    eax
.text:00005CAD                 mov     ecx, [ebp+arg_24]
.text:00005CB0                 push    ecx
.text:00005CB1                 mov     edx, [ebp+var_4]
.text:00005CB4                 push    edx
.text:00005CB5                 call    _LzmaEnc_Destroy@12 ; LzmaEnc_Destroy(x,x,x)
.text:00005CBA                 mov     eax, [ebp+var_8]
.text:00005CBD
.text:00005CBD loc_5CBD:                               ; CODE XREF: LzmaEncode(x,x,x,x,x,x,x,x,x,x,x)+2Bj
.text:00005CBD                 add     esp, 8
.text:00005CC0                 cmp     ebp, esp
.text:00005CC2                 call    __RTC_CheckEsp
.text:00005CC7                 mov     esp, ebp
.text:00005CC9                 pop     ebp
.text:00005CCA                 retn    2Ch
.text:00005CCA _LzmaEncode@44  endp
.text:00005CCA
.text:00005CCA ; ---------------------------------------------------------------------------
.text:00005CCD                 align 10h
.text:00005CCD _text           ends
.text:00005CCD
.rtc$TMZ:00005CD0 ; ===========================================================================
.rtc$TMZ:00005CD0
.rtc$TMZ:00005CD0 ; Segment type: Pure data
.rtc$TMZ:00005CD0 ; Segment permissions: Read
.rtc$TMZ:00005CD0 _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:00005CD0                 assume cs:_rtc$TMZ
.rtc$TMZ:00005CD0                 ;org 5CD0h
.rtc$TMZ:00005CD0 ; COMDAT (pick any)
.rtc$TMZ:00005CD0 __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:00005CD0 _rtc$TMZ        ends
.rtc$TMZ:00005CD0
.rtc$IMZ:00005CD4 ; ===========================================================================
.rtc$IMZ:00005CD4
.rtc$IMZ:00005CD4 ; Segment type: Pure data
.rtc$IMZ:00005CD4 ; Segment permissions: Read
.rtc$IMZ:00005CD4 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00005CD4                 assume cs:_rtc$IMZ
.rtc$IMZ:00005CD4                 ;org 5CD4h
.rtc$IMZ:00005CD4 ; COMDAT (pick any)
.rtc$IMZ:00005CD4 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00005CD4 _rtc$IMZ        ends
.rtc$IMZ:00005CD4
UNDEF:00005CE0 ; ===========================================================================
UNDEF:00005CE0
UNDEF:00005CE0 ; Segment type: Externs
UNDEF:00005CE0 ; UNDEF
UNDEF:00005CE0                 extrn __RTC_Shutdown:near
UNDEF:00005CE0                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00005CE4                 extrn __RTC_InitBase:near
UNDEF:00005CE4                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:00005CE8                 extrn ___security_cookie:near
UNDEF:00005CE8                                         ; DATA XREF: LzmaEncProps_GetDictSize(x)+17r
UNDEF:00005CE8                                         ; LzmaEnc_SetProps(x,x)+17r ...
UNDEF:00005CEC                 extrn __RTC_CheckEsp:near
UNDEF:00005CEC                                         ; CODE XREF: LzmaEncProps_GetDictSize(x)+5Cp
UNDEF:00005CEC                                         ; LzmaEnc_SaveState(x)+227p ...
UNDEF:00005CF0 ; __fastcall __security_check_cookie(x)
UNDEF:00005CF0                 extrn @__security_check_cookie@4:near
UNDEF:00005CF0                                         ; CODE XREF: LzmaEncProps_GetDictSize(x)+52p
UNDEF:00005CF0                                         ; LzmaEnc_SetProps(x,x)+164p ...
UNDEF:00005CF4 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:00005CF4                 extrn @_RTC_CheckStackVars@8:near
UNDEF:00005CF4                                         ; CODE XREF: LzmaEncProps_GetDictSize(x)+44p
UNDEF:00005CF4                                         ; LzmaEnc_SetProps(x,x)+156p ...
UNDEF:00005CF8 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00005CF8                 extrn _memcpy:near      ; CODE XREF: LzmaEnc_SaveState(x)+B3p
UNDEF:00005CF8                                         ; LzmaEnc_SaveState(x)+DFp ...
UNDEF:00005CFC ; void *__cdecl memcpy_0(void *Dst, const void *Src, size_t Size)
UNDEF:00005CFC                 extrn _memcpy_0:near    ; CODE XREF: LzmaEnc_SaveState(x)+45p
UNDEF:00005CFC                                         ; LzmaEnc_SaveState(x)+66p ...
UNDEF:00005D00 ; __stdcall MatchFinderMt_Construct(x)
UNDEF:00005D00                 extrn _MatchFinderMt_Construct@4:near
UNDEF:00005D00                                         ; CODE XREF: LzmaEnc_Construct(x)+47p
UNDEF:00005D04 ; __stdcall MatchFinder_Construct(x)
UNDEF:00005D04                 extrn _MatchFinder_Construct@4:near
UNDEF:00005D04                                         ; CODE XREF: LzmaEnc_Construct(x)+38p
UNDEF:00005D08 ; __stdcall MatchFinder_Free(x, x)
UNDEF:00005D08                 extrn _MatchFinder_Free@8:near
UNDEF:00005D08                                         ; CODE XREF: LzmaEnc_Destruct(x,x,x)+23p
UNDEF:00005D0C ; __stdcall MatchFinderMt_Destruct(x, x)
UNDEF:00005D0C                 extrn _MatchFinderMt_Destruct@8:near
UNDEF:00005D0C                                         ; CODE XREF: LzmaEnc_Destruct(x,x,x)+11p
UNDEF:00005D10 ; __stdcall MatchFinder_CreateVTable(x, x)
UNDEF:00005D10                 extrn _MatchFinder_CreateVTable@8:near
UNDEF:00005D10                                         ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+242p
UNDEF:00005D14 ; __stdcall MatchFinder_Create(x, x, x, x, x, x)
UNDEF:00005D14                 extrn _MatchFinder_Create@24:near
UNDEF:00005D14                                         ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+213p
UNDEF:00005D18 ; __stdcall MatchFinderMt_CreateVTable(x, x)
UNDEF:00005D18                 extrn _MatchFinderMt_CreateVTable@8:near
UNDEF:00005D18                                         ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+1E4p
UNDEF:00005D1C ; __stdcall MatchFinderMt_Create(x, x, x, x, x, x)
UNDEF:00005D1C                 extrn _MatchFinderMt_Create@24:near
UNDEF:00005D1C                                         ; CODE XREF: LzmaEnc_Alloc(x,x,x,x)+1B1p
UNDEF:00005D20 ; __stdcall MatchFinderMt_ReleaseStream(x)
UNDEF:00005D20                 extrn _MatchFinderMt_ReleaseStream@4:near
UNDEF:00005D20                                         ; CODE XREF: LzmaEnc_Finish(x)+27p
UNDEF:00005D24                 extrn __aullshr:near    ; CODE XREF: RangeEnc_ShiftLow(x)+35p
UNDEF:00005D24                                         ; RangeEnc_ShiftLow(x)+63p
UNDEF:00005D24
UNDEF:00005D24
UNDEF:00005D24                 end