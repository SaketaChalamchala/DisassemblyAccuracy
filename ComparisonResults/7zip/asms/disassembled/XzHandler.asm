.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : E4BC2B9DFF237D1C77DCEB691FF7BEE1
.rdata:00000000 ; Input CRC32 : 064AB465
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\7z1505-src\CPP\7zip\Bundles\Alone\Debug\XzHandler.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "MSVCRTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG69791        db 'LZMA2',0            ; DATA XREF: .data:_k_LZMA2_Nameo
.rdata:00000000                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+BCBo
.rdata:00000006                 align 4
.rdata:00000008 _kProps         db 7                    ; DATA XREF: NArchive::NXz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:00000009                 db    8
.rdata:0000000A                 db  16h
.rdata:0000000B                 db    0
.rdata:0000000C _kArcProps      db 16h                  ; DATA XREF: NArchive::NXz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+13r
.rdata:0000000D                 db  4Ah ; J
.rdata:0000000E                 db  26h ; &
.rdata:0000000F                 db    0
.rdata:00000010 ; NCompress::NLzma2 _SG70045
.rdata:00000010 $SG70045        dd offset loc_4251+2    ; DATA XREF: .rdata:off_4Co
.rdata:00000010                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3F1o
.rdata:00000014 $SG70046        db 'Delta',0            ; DATA XREF: .rdata:00000054o
.rdata:0000001A                 align 4
.rdata:0000001C $SG70047        db 'BCJ',0              ; DATA XREF: .rdata:0000005Co
.rdata:00000020 $SG70048        db 'PPC',0              ; DATA XREF: .rdata:00000064o
.rdata:00000020                                         ; .rdata:00000088o
.rdata:00000024 $SG70049        db 'IA64',0             ; DATA XREF: .rdata:0000006Co
.rdata:00000029                 align 4
.rdata:0000002C $SG70050        db 'ARM',0              ; DATA XREF: .rdata:00000074o
.rdata:00000030 $SG70051        db 'ARMT',0             ; DATA XREF: .rdata:0000007Co
.rdata:00000035                 align 4
.rdata:00000038 $SG70052        db 'SPARC',0            ; DATA XREF: .rdata:00000084o
.rdata:0000003E                 align 10h
.rdata:00000040 $SG70053        db 'LZMA2',0            ; DATA XREF: .rdata:0000008Co
.rdata:00000040                                         ; .xdata$x:__catchsym$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3o ...
.rdata:00000046                 align 4
.rdata:00000048 _g_NamePairs    dd 1                    ; DATA XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+61r
.rdata:00000048                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+D0o
.rdata:0000004C off_4C          dd offset $SG70045      ; DATA XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+8Er
.rdata:00000050                 db    3
.rdata:00000051                 db    0
.rdata:00000052                 db    0
.rdata:00000053                 db    0
.rdata:00000054                 dd offset $SG70046      ; "Delta"
.rdata:00000058 unk_58          db    4                 ; DATA XREF: .rdata$r:00003DC8o
.rdata:00000059                 db    0
.rdata:0000005A                 db    0
.rdata:0000005B                 db    0
.rdata:0000005C                 dd offset $SG70047      ; "BCJ"
.rdata:00000060                 db    5
.rdata:00000061                 db    0
.rdata:00000062                 db    0
.rdata:00000063                 db    0
.rdata:00000064                 dd offset $SG70048      ; "PPC"
.rdata:00000068                 db    6
.rdata:00000069                 db    0
.rdata:0000006A                 db    0
.rdata:0000006B                 db    0
.rdata:0000006C                 dd offset $SG70049      ; "IA64"
.rdata:00000070                 db    7
.rdata:00000071                 db    0
.rdata:00000072                 db    0
.rdata:00000073                 db    0
.rdata:00000074                 dd offset $SG70050      ; "ARM"
.rdata:00000078                 db    8
.rdata:00000079                 db    0
.rdata:0000007A                 db    0
.rdata:0000007B                 db    0
.rdata:0000007C                 dd offset $SG70051      ; "ARMT"
.rdata:00000080                 db    9
.rdata:00000081                 db    0
.rdata:00000082                 db    0
.rdata:00000083                 db    0
.rdata:00000084                 dd offset $SG70052      ; "SPARC"
.rdata:00000088                 dd offset $SG70048+1    ; "PC"
.rdata:0000008C                 dd offset $SG70053      ; "LZMA2"
.rdata:00000090 $SG70082        db 'NoCheck',0          ; DATA XREF: .rdata:_kCheckso
.rdata:00000098 $SG70083        db 'CRC32',0            ; DATA XREF: .rdata:000000B4o
.rdata:0000009E                 align 10h
.rdata:000000A0 $SG70084        db 'CRC64',0            ; DATA XREF: .rdata:000000C0o
.rdata:000000A6                 align 4
.rdata:000000A8 $SG70085        db 'SHA256',0           ; DATA XREF: .rdata:000000D8o
.rdata:000000AF                 align 10h
.rdata:000000B0 _kChecks        dd offset $SG70082      ; DATA XREF: NArchive::NXz::GetCheckString(CXzs const &)+C4r
.rdata:000000B0                                         ; NArchive::NXz::GetCheckString(CXzs const &)+D1r
.rdata:000000B0                                         ; "NoCheck"
.rdata:000000B4                 dd offset $SG70083      ; "CRC32"
.rdata:000000B8                 align 10h
.rdata:000000C0                 dd offset $SG70084      ; "CRC64"
.rdata:000000C4                 db    0
.rdata:000000C5                 db    0
.rdata:000000C6                 db    0
.rdata:000000C7                 db    0
.rdata:000000C8                 db    0
.rdata:000000C9                 db    0
.rdata:000000CA                 db    0
.rdata:000000CB                 db    0
.rdata:000000CC                 db    0
.rdata:000000CD                 db    0
.rdata:000000CE                 db    0
.rdata:000000CF                 db    0
.rdata:000000D0                 db    0
.rdata:000000D1                 db    0
.rdata:000000D2                 db    0
.rdata:000000D3                 db    0
.rdata:000000D4                 db    0
.rdata:000000D5                 db    0
.rdata:000000D6                 db    0
.rdata:000000D7                 db    0
.rdata:000000D8                 dd offset $SG70085      ; "SHA256"
.rdata:000000DC                 db    0
.rdata:000000DD                 db    0
.rdata:000000DE                 db    0
.rdata:000000DF                 db    0
.rdata:000000E0                 db    0
.rdata:000000E1                 db    0
.rdata:000000E2                 db    0
.rdata:000000E3                 db    0
.rdata:000000E4                 db    0
.rdata:000000E5                 db    0
.rdata:000000E6                 db    0
.rdata:000000E7                 db    0
.rdata:000000E8                 db    0
.rdata:000000E9                 db    0
.rdata:000000EA                 db    0
.rdata:000000EB                 db    0
.rdata:000000EC                 db    0
.rdata:000000ED                 db    0
.rdata:000000EE                 db    0
.rdata:000000EF                 db    0
.rdata:000000F0 $SG70104        db 'Check-',0           ; DATA XREF: NArchive::NXz::GetCheckString(CXzs const &):loc_1317o
.rdata:000000F7                 align 4
.rdata:000000F8 $SG70746        db 'xz',0               ; DATA XREF: .rdata:00000118o
.rdata:000000FB                 align 4
.rdata:000000FC $SG70747        db 'xz txz',0           ; DATA XREF: .rdata:0000011Co
.rdata:00000103                 align 4
.rdata:00000104 $SG70748        db '* .tar',0           ; DATA XREF: .rdata:00000120o
.rdata:0000010B                 align 4
.rdata:0000010C ; struct CArcInfo g_ArcInfo
.rdata:0000010C _g_ArcInfo      db    1                 ; DATA XREF: NArchive::NXz::CRegisterArc::CRegisterArc(void)+Eo
.rdata:0000010D                 db    0
.rdata:0000010E                 db  0Ch
.rdata:0000010F                 db    6
.rdata:00000110                 db    0
.rdata:00000111                 db    0
.rdata:00000112                 db    0
.rdata:00000113                 db    0
.rdata:00000114                 dd offset _XZ_SIG
.rdata:00000118                 dd offset $SG70746      ; "xz"
.rdata:0000011C                 dd offset $SG70747      ; "xz txz"
.rdata:00000120                 dd offset $SG70748      ; "* .tar"
.rdata:00000124                 dd offset ?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ ; NArchive::NXz::CreateArc(void)
.rdata:00000128                 dd offset ?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ ; NArchive::NXz::CreateArcOut(void)
.rdata:0000012C                 align 10h
.rdata:0000012C _rdata          ends
.rdata:0000012C
.data:00000130 ; ===========================================================================
.data:00000130
.data:00000130 ; Segment type: Pure data
.data:00000130 ; Segment permissions: Read/Write
.data:00000130 _data           segment dword public 'DATA' use32
.data:00000130                 assume cs:_data
.data:00000130                 ;org 130h
.data:00000130 ; char *k_LZMA2_Name
.data:00000130 _k_LZMA2_Name   dd offset $SG69791      ; DATA XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+19Cr
.data:00000130                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_3170r
.data:00000130 _data           ends                    ; "LZMA2"
.data:00000130
.text:00000134 ; ===========================================================================
.text:00000134
.text:00000134 ; Segment type: Pure code
.text:00000134 ; Segment permissions: Read/Execute
.text:00000134 _text           segment para public 'CODE' use32
.text:00000134                 assume cs:_text
.text:00000134                 ;org 134h
.text:00000134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00000134
.text:00000134 ; =============== S U B R O U T I N E =======================================
.text:00000134
.text:00000134 ; Attributes: bp-based frame
.text:00000134
.text:00000134 ; void __thiscall NArchive::NXz::CStatInfo::Clear(NArchive::NXz::CStatInfo *__hidden this)
.text:00000134                 public ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ
.text:00000134 ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ proc near
.text:00000134                                         ; CODE XREF: NArchive::NXz::CHandler::Close(void)+9p
.text:00000134                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2Dp ...
.text:00000134
.text:00000134 var_4           = dword ptr -4
.text:00000134
.text:00000134                 push    ebp
.text:00000135                 mov     ebp, esp
.text:00000137                 push    ecx
.text:00000138                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000013F                 mov     [ebp+var_4], ecx
.text:00000142                 mov     eax, [ebp+var_4]
.text:00000145                 mov     dword ptr [eax], 0
.text:0000014B                 mov     dword ptr [eax+4], 0
.text:00000152                 mov     ecx, [ebp+var_4]
.text:00000155                 mov     dword ptr [ecx+8], 0
.text:0000015C                 mov     dword ptr [ecx+0Ch], 0
.text:00000163                 mov     edx, [ebp+var_4]
.text:00000166                 mov     dword ptr [edx+10h], 0
.text:0000016D                 mov     dword ptr [edx+14h], 0
.text:00000174                 mov     eax, [ebp+var_4]
.text:00000177                 mov     dword ptr [eax+18h], 0
.text:0000017E                 mov     dword ptr [eax+1Ch], 0
.text:00000185                 mov     ecx, [ebp+var_4]
.text:00000188                 mov     dword ptr [ecx+20h], 0
.text:0000018F                 mov     dword ptr [ecx+24h], 0
.text:00000196                 mov     edx, [ebp+var_4]
.text:00000199                 mov     byte ptr [edx+28h], 0
.text:0000019D                 mov     eax, [ebp+var_4]
.text:000001A0                 mov     byte ptr [eax+29h], 0
.text:000001A4                 mov     ecx, [ebp+var_4]
.text:000001A7                 mov     byte ptr [ecx+2Ah], 0
.text:000001AB                 mov     edx, [ebp+var_4]
.text:000001AE                 mov     byte ptr [edx+2Bh], 0
.text:000001B2                 mov     eax, [ebp+var_4]
.text:000001B5                 mov     byte ptr [eax+2Ch], 0
.text:000001B9                 mov     ecx, [ebp+var_4]
.text:000001BC                 mov     byte ptr [ecx+2Dh], 0
.text:000001C0                 mov     edx, [ebp+var_4]
.text:000001C3                 mov     byte ptr [edx+2Eh], 0
.text:000001C7                 mov     eax, [ebp+var_4]
.text:000001CA                 mov     byte ptr [eax+2Fh], 0
.text:000001CE                 mov     ecx, [ebp+var_4]
.text:000001D1                 mov     byte ptr [ecx+30h], 0
.text:000001D5                 mov     edx, [ebp+var_4]
.text:000001D8                 mov     byte ptr [edx+31h], 0
.text:000001DC                 mov     esp, ebp
.text:000001DE                 pop     ebp
.text:000001DF                 retn
.text:000001DF ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ endp
.text:000001DF
.text:000001DF ; ---------------------------------------------------------------------------
.text:000001E0                 db 4 dup(0CCh)
.text:000001E4
.text:000001E4 ; =============== S U B R O U T I N E =======================================
.text:000001E4
.text:000001E4 ; Attributes: bp-based frame
.text:000001E4
.text:000001E4 ; _DWORD __thiscall NArchive::NXz::CHandler::CHandler(NArchive::NXz::CHandler *__hidden this)
.text:000001E4                 public ??0CHandler@NXz@NArchive@@QAE@XZ
.text:000001E4 ??0CHandler@NXz@NArchive@@QAE@XZ proc near
.text:000001E4                                         ; CODE XREF: NArchive::NXz::CreateArc(void)+5Ap
.text:000001E4                                         ; NArchive::NXz::CreateArcOut(void)+56p
.text:000001E4
.text:000001E4 var_10          = dword ptr -10h
.text:000001E4 var_C           = dword ptr -0Ch
.text:000001E4 var_4           = dword ptr -4
.text:000001E4
.text:000001E4                 push    ebp
.text:000001E5                 mov     ebp, esp
.text:000001E7                 push    0FFFFFFFFh
.text:000001E9                 push    offset __ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ
.text:000001EE                 mov     eax, large fs:0
.text:000001F4                 push    eax
.text:000001F5                 push    ecx
.text:000001F6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000001FD                 mov     eax, dword ptr ds:___security_cookie
.text:00000202                 xor     eax, ebp
.text:00000204                 push    eax
.text:00000205                 lea     eax, [ebp+var_C]
.text:00000208                 mov     large fs:0, eax
.text:0000020E                 mov     [ebp+var_10], ecx
.text:00000211                 mov     ecx, [ebp+var_10] ; this
.text:00000214                 call    ??0IInArchive@@QAE@XZ ; IInArchive::IInArchive(void)
.text:00000219                 mov     ecx, [ebp+var_10]
.text:0000021C                 add     ecx, 4          ; this
.text:0000021F                 call    ??0IArchiveOpenSeq@@QAE@XZ ; IArchiveOpenSeq::IArchiveOpenSeq(void)
.text:00000224                 mov     ecx, [ebp+var_10]
.text:00000227                 add     ecx, 8          ; this
.text:0000022A                 call    ??0IOutArchive@@QAE@XZ ; IOutArchive::IOutArchive(void)
.text:0000022F                 mov     ecx, [ebp+var_10]
.text:00000232                 add     ecx, 0Ch        ; this
.text:00000235                 call    ??0ISetProperties@@QAE@XZ ; ISetProperties::ISetProperties(void)
.text:0000023A                 mov     ecx, [ebp+var_10]
.text:0000023D                 add     ecx, 10h        ; this
.text:00000240                 call    ??0CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::CMultiMethodProps(void)
.text:00000245                 mov     [ebp+var_4], 0
.text:0000024C                 mov     ecx, [ebp+var_10]
.text:0000024F                 add     ecx, 58h ; 'X'  ; this
.text:00000252                 call    ??0CMyUnknownImp@@QAE@XZ ; CMyUnknownImp::CMyUnknownImp(void)
.text:00000257                 mov     eax, [ebp+var_10]
.text:0000025A                 mov     dword ptr [eax], offset ??_7CHandler@NXz@NArchive@@6BIInArchive@@@ ; const NArchive::NXz::CHandler::`vftable'{for `IInArchive'}
.text:00000260                 mov     ecx, [ebp+var_10]
.text:00000263                 mov     dword ptr [ecx+4], offset ??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NXz::CHandler::`vftable'{for `IArchiveOpenSeq'}
.text:0000026A                 mov     edx, [ebp+var_10]
.text:0000026D                 mov     dword ptr [edx+8], offset ??_7CHandler@NXz@NArchive@@6BIOutArchive@@@ ; const NArchive::NXz::CHandler::`vftable'{for `IOutArchive'}
.text:00000274                 mov     eax, [ebp+var_10]
.text:00000277                 mov     dword ptr [eax+0Ch], offset ??_7CHandler@NXz@NArchive@@6BISetProperties@@@ ; const NArchive::NXz::CHandler::`vftable'{for `ISetProperties'}
.text:0000027E                 mov     ecx, [ebp+var_10]
.text:00000281                 add     ecx, 60h ; '`'  ; this
.text:00000284                 call    ??0CStatInfo@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CStatInfo::CStatInfo(void)
.text:00000289                 mov     ecx, [ebp+var_10]
.text:0000028C                 add     ecx, 9Ch ; '£'
.text:00000292                 call    ??0?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::CMyComPtr<IInStream>(void)
.text:00000297                 mov     byte ptr [ebp+var_4], 1
.text:0000029B                 mov     ecx, [ebp+var_10]
.text:0000029E                 add     ecx, 0A0h ; 'á'
.text:000002A4                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:000002A9                 mov     byte ptr [ebp+var_4], 2
.text:000002AD                 mov     ecx, [ebp+var_10]
.text:000002B0                 add     ecx, 0A8h ; '¿'
.text:000002B6                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000002BB                 mov     byte ptr [ebp+var_4], 3
.text:000002BF                 mov     ecx, [ebp+var_10] ; this
.text:000002C2                 call    ?Init@CHandler@NXz@NArchive@@AAEXXZ ; NArchive::NXz::CHandler::Init(void)
.text:000002C7                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000002CE                 mov     eax, [ebp+var_10]
.text:000002D1                 mov     ecx, [ebp+var_C]
.text:000002D4                 mov     large fs:0, ecx
.text:000002DB                 pop     ecx
.text:000002DC                 add     esp, 10h
.text:000002DF                 cmp     ebp, esp
.text:000002E1                 call    __RTC_CheckEsp
.text:000002E6                 mov     esp, ebp
.text:000002E8                 pop     ebp
.text:000002E9                 retn
.text:000002E9 ??0CHandler@NXz@NArchive@@QAE@XZ endp
.text:000002E9
.text:000002E9 ; ---------------------------------------------------------------------------
.text:000002EA                 db 0Ah dup(0CCh)
.text:000002F4
.text:000002F4 ; =============== S U B R O U T I N E =======================================
.text:000002F4
.text:000002F4 ; Attributes: bp-based frame
.text:000002F4
.text:000002F4 ; __int32 __stdcall NArchive::NXz::CHandler::GetNumberOfProperties(NArchive::NXz::CHandler *this, unsigned int *)
.text:000002F4                 public ?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z
.text:000002F4 ?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z proc near
.text:000002F4                                         ; DATA XREF: .rdata:00003668o
.text:000002F4
.text:000002F4 this            = dword ptr  8
.text:000002F4 arg_4           = dword ptr  0Ch
.text:000002F4
.text:000002F4                 push    ebp
.text:000002F5                 mov     ebp, esp
.text:000002F7                 mov     eax, [ebp+arg_4]
.text:000002FA                 mov     dword ptr [eax], 3
.text:00000300                 xor     eax, eax
.text:00000302                 pop     ebp
.text:00000303                 retn    8
.text:00000303 ?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z endp
.text:00000303
.text:00000303 ; ---------------------------------------------------------------------------
.text:00000306                 db 0Eh dup(0CCh)
.text:00000314
.text:00000314 ; =============== S U B R O U T I N E =======================================
.text:00000314
.text:00000314 ; Attributes: bp-based frame
.text:00000314
.text:00000314 ; __int32 __stdcall NArchive::NXz::CHandler::GetPropertyInfo(NArchive::NXz::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000314                 public ?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000314 ?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000314                                         ; DATA XREF: .rdata:0000366Co
.text:00000314
.text:00000314 this            = dword ptr  8
.text:00000314 arg_4           = dword ptr  0Ch
.text:00000314 arg_8           = dword ptr  10h
.text:00000314 arg_C           = dword ptr  14h
.text:00000314 arg_10          = dword ptr  18h
.text:00000314
.text:00000314                 push    ebp
.text:00000315                 mov     ebp, esp
.text:00000317                 cmp     [ebp+arg_4], 3
.text:0000031B                 jb      short loc_324
.text:0000031D                 mov     eax, 80070057h
.text:00000322                 jmp     short loc_351
.text:00000324 ; ---------------------------------------------------------------------------
.text:00000324
.text:00000324 loc_324:                                ; CODE XREF: NArchive::NXz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000324                 mov     eax, [ebp+arg_4]
.text:00000327                 movzx   ecx, _kProps[eax]
.text:0000032E                 mov     edx, [ebp+arg_C]
.text:00000331                 mov     [edx], ecx
.text:00000333                 mov     eax, [ebp+arg_C]
.text:00000336                 mov     ecx, [eax]
.text:00000338                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:00000340                 mov     eax, [ebp+arg_10]
.text:00000343                 mov     [eax], dx
.text:00000346                 mov     ecx, [ebp+arg_8]
.text:00000349                 mov     dword ptr [ecx], 0
.text:0000034F                 xor     eax, eax
.text:00000351
.text:00000351 loc_351:                                ; CODE XREF: NArchive::NXz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:00000351                 pop     ebp
.text:00000352                 retn    14h
.text:00000352 ?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:00000352
.text:00000352 ; ---------------------------------------------------------------------------
.text:00000355                 db 0Fh dup(0CCh)
.text:00000364
.text:00000364 ; =============== S U B R O U T I N E =======================================
.text:00000364
.text:00000364 ; Attributes: bp-based frame
.text:00000364
.text:00000364 ; __int32 __stdcall NArchive::NXz::CHandler::GetNumberOfArchiveProperties(NArchive::NXz::CHandler *this, unsigned int *)
.text:00000364                 public ?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z
.text:00000364 ?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z proc near
.text:00000364                                         ; DATA XREF: .rdata:00003670o
.text:00000364
.text:00000364 this            = dword ptr  8
.text:00000364 arg_4           = dword ptr  0Ch
.text:00000364
.text:00000364                 push    ebp
.text:00000365                 mov     ebp, esp
.text:00000367                 mov     eax, [ebp+arg_4]
.text:0000036A                 mov     dword ptr [eax], 3
.text:00000370                 xor     eax, eax
.text:00000372                 pop     ebp
.text:00000373                 retn    8
.text:00000373 ?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z endp
.text:00000373
.text:00000373 ; ---------------------------------------------------------------------------
.text:00000376                 db 0Eh dup(0CCh)
.text:00000384
.text:00000384 ; =============== S U B R O U T I N E =======================================
.text:00000384
.text:00000384 ; Attributes: bp-based frame
.text:00000384
.text:00000384 ; __int32 __stdcall NArchive::NXz::CHandler::GetArchivePropertyInfo(NArchive::NXz::CHandler *this, unsigned int, wchar_t **, unsigned __int32 *, unsigned __int16 *)
.text:00000384                 public ?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z
.text:00000384 ?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z proc near
.text:00000384                                         ; DATA XREF: .rdata:00003674o
.text:00000384
.text:00000384 this            = dword ptr  8
.text:00000384 arg_4           = dword ptr  0Ch
.text:00000384 arg_8           = dword ptr  10h
.text:00000384 arg_C           = dword ptr  14h
.text:00000384 arg_10          = dword ptr  18h
.text:00000384
.text:00000384                 push    ebp
.text:00000385                 mov     ebp, esp
.text:00000387                 cmp     [ebp+arg_4], 3
.text:0000038B                 jb      short loc_394
.text:0000038D                 mov     eax, 80070057h
.text:00000392                 jmp     short loc_3C1
.text:00000394 ; ---------------------------------------------------------------------------
.text:00000394
.text:00000394 loc_394:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+7j
.text:00000394                 mov     eax, [ebp+arg_4]
.text:00000397                 movzx   ecx, _kArcProps[eax]
.text:0000039E                 mov     edx, [ebp+arg_C]
.text:000003A1                 mov     [edx], ecx
.text:000003A3                 mov     eax, [ebp+arg_C]
.text:000003A6                 mov     ecx, [eax]
.text:000003A8                 movzx   dx, byte ptr ds:?k7z_PROPID_To_VARTYPE@@3QBEB[ecx] ; uchar const * const k7z_PROPID_To_VARTYPE
.text:000003B0                 mov     eax, [ebp+arg_10]
.text:000003B3                 mov     [eax], dx
.text:000003B6                 mov     ecx, [ebp+arg_8]
.text:000003B9                 mov     dword ptr [ecx], 0
.text:000003BF                 xor     eax, eax
.text:000003C1
.text:000003C1 loc_3C1:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+Ej
.text:000003C1                 pop     ebp
.text:000003C2                 retn    14h
.text:000003C2 ?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z endp
.text:000003C2
.text:000003C2 ; ---------------------------------------------------------------------------
.text:000003C5                 db 0Fh dup(0CCh)
.text:000003D4
.text:000003D4 ; =============== S U B R O U T I N E =======================================
.text:000003D4
.text:000003D4 ; Attributes: bp-based frame
.text:000003D4
.text:000003D4 ; __int32 __cdecl NArchive::NXz::CHandler::GetArchiveProperty(NArchive::NXz::CHandler *this, unsigned __int32, struct tagPROPVARIANT *)
.text:000003D4                 public ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000003D4 ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text:000003D4                                         ; DATA XREF: .rdata:00003664o
.text:000003D4
.text:000003D4 var_44          = dword ptr -44h
.text:000003D4 var_3D          = byte ptr -3Dh
.text:000003D4 var_3C          = dword ptr -3Ch
.text:000003D4 var_38          = dword ptr -38h
.text:000003D4 var_30          = dword ptr -30h
.text:000003D4 var_2C          = dword ptr -2Ch
.text:000003D4 var_24          = byte ptr -24h
.text:000003D4 var_10          = dword ptr -10h
.text:000003D4 var_C           = dword ptr -0Ch
.text:000003D4 var_4           = dword ptr -4
.text:000003D4 this            = dword ptr  8
.text:000003D4 arg_4           = dword ptr  0Ch
.text:000003D4 arg_8           = dword ptr  10h
.text:000003D4
.text:000003D4 ; FUNCTION CHUNK AT .text:0000062F SIZE 0000002F BYTES
.text:000003D4
.text:000003D4                 push    ebp
.text:000003D5                 mov     ebp, esp
.text:000003D7                 push    0FFFFFFFFh
.text:000003D9                 push    offset __ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:000003DE                 mov     eax, large fs:0
.text:000003E4                 push    eax
.text:000003E5                 push    ecx
.text:000003E6                 sub     esp, 34h
.text:000003E9                 push    ebx
.text:000003EA                 push    esi
.text:000003EB                 push    edi
.text:000003EC                 lea     edi, [ebp+var_44]
.text:000003EF                 mov     ecx, 0Dh
.text:000003F4                 mov     eax, 0CCCCCCCCh
.text:000003F9                 rep stosd
.text:000003FB                 mov     eax, dword ptr ds:___security_cookie
.text:00000400                 xor     eax, ebp
.text:00000402                 push    eax
.text:00000403                 lea     eax, [ebp+var_C]
.text:00000406                 mov     large fs:0, eax
.text:0000040C                 mov     [ebp+var_10], esp
.text:0000040F                 mov     [ebp+var_4], 0
.text:00000416                 lea     ecx, [ebp+var_24] ; this
.text:00000419                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000041E                 mov     [ebp+var_38], eax
.text:00000421                 mov     byte ptr [ebp+var_4], 1
.text:00000425                 mov     eax, [ebp+arg_4]
.text:00000428                 mov     [ebp+var_3C], eax
.text:0000042B                 mov     ecx, [ebp+var_3C]
.text:0000042E                 sub     ecx, 16h
.text:00000431                 mov     [ebp+var_3C], ecx
.text:00000434                 cmp     [ebp+var_3C], 38h ; '8' ; switch 57 cases
.text:00000438                 ja      $LN19           ; jumptable 00000448 default case
.text:0000043E                 mov     edx, [ebp+var_3C]
.text:00000441                 movzx   eax, ds:$LN30[edx]
.text:00000448                 jmp     ds:$LN35[eax*4] ; switch jump
.text:0000044F ; ---------------------------------------------------------------------------
.text:0000044F
.text:0000044F $LN18:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:0000044F                                         ; DATA XREF: .text:$LN35o
.text:0000044F                 mov     ecx, [ebp+this] ; jumptable 00000448 case 22
.text:00000452                 movzx   edx, byte ptr [ecx+9Ah]
.text:00000459                 test    edx, edx
.text:0000045B                 jz      short loc_470
.text:0000045D                 mov     eax, [ebp+this]
.text:00000460                 mov     ecx, [eax+74h]
.text:00000463                 push    ecx
.text:00000464                 mov     edx, [eax+70h]
.text:00000467                 push    edx
.text:00000468                 lea     ecx, [ebp+var_24]
.text:0000046B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000470
.text:00000470 loc_470:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+87j
.text:00000470                 jmp     $LN19           ; jumptable 00000448 default case
.text:00000475 ; ---------------------------------------------------------------------------
.text:00000475
.text:00000475 $LN16:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000475                                         ; DATA XREF: .text:$LN35o
.text:00000475                 mov     eax, [ebp+this] ; jumptable 00000448 case 52
.text:00000478                 movzx   ecx, byte ptr [eax+89h]
.text:0000047F                 test    ecx, ecx
.text:00000481                 jz      short loc_496
.text:00000483                 mov     edx, [ebp+this]
.text:00000486                 mov     eax, [edx+7Ch]
.text:00000489                 push    eax
.text:0000048A                 mov     ecx, [edx+78h]
.text:0000048D                 push    ecx
.text:0000048E                 lea     ecx, [ebp+var_24]
.text:00000491                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000496
.text:00000496 loc_496:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+ADj
.text:00000496                 jmp     $LN19           ; jumptable 00000448 default case
.text:0000049B ; ---------------------------------------------------------------------------
.text:0000049B
.text:0000049B $LN14:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:0000049B                                         ; DATA XREF: .text:$LN35o
.text:0000049B                 mov     edx, [ebp+this] ; jumptable 00000448 case 16
.text:0000049E                 movzx   eax, byte ptr [edx+8Ah]
.text:000004A5                 test    eax, eax
.text:000004A7                 jz      short loc_4C2
.text:000004A9                 mov     ecx, [ebp+this]
.text:000004AC                 mov     edx, [ecx+84h]
.text:000004B2                 push    edx
.text:000004B3                 mov     eax, [ecx+80h]
.text:000004B9                 push    eax
.text:000004BA                 lea     ecx, [ebp+var_24]
.text:000004BD                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000004C2
.text:000004C2 loc_4C2:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+D3j
.text:000004C2                 jmp     $LN19           ; jumptable 00000448 default case
.text:000004C7 ; ---------------------------------------------------------------------------
.text:000004C7
.text:000004C7 $LN12:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:000004C7                                         ; DATA XREF: .text:$LN35o
.text:000004C7                 mov     ecx, [ebp+this] ; jumptable 00000448 case 56
.text:000004CA                 movzx   edx, byte ptr [ecx+88h]
.text:000004D1                 test    edx, edx
.text:000004D3                 jz      short loc_4E8
.text:000004D5                 mov     eax, [ebp+this]
.text:000004D8                 mov     ecx, [eax+6Ch]
.text:000004DB                 push    ecx
.text:000004DC                 mov     edx, [eax+68h]
.text:000004DF                 push    edx
.text:000004E0                 lea     ecx, [ebp+var_24]
.text:000004E3                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000004E8
.text:000004E8 loc_4E8:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+FFj
.text:000004E8                 jmp     $LN19           ; jumptable 00000448 default case
.text:000004ED ; ---------------------------------------------------------------------------
.text:000004ED
.text:000004ED $LN10:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:000004ED                                         ; DATA XREF: .text:$LN35o
.text:000004ED                 mov     ecx, [ebp+this] ; jumptable 00000448 case 0
.text:000004F0                 add     ecx, 0A8h ; '¿' ; this
.text:000004F6                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000004FB                 mov     [ebp+var_3D], al
.text:000004FE                 movzx   eax, [ebp+var_3D]
.text:00000502                 test    eax, eax
.text:00000504                 jnz     short loc_523
.text:00000506                 mov     ecx, [ebp+this]
.text:00000509                 add     ecx, 0A8h ; '¿'
.text:0000050F                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:00000514                 mov     [ebp+var_44], eax
.text:00000517                 mov     ecx, [ebp+var_44]
.text:0000051A                 push    ecx
.text:0000051B                 lea     ecx, [ebp+var_24]
.text:0000051E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:00000523
.text:00000523 loc_523:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+130j
.text:00000523                 jmp     $LN19           ; jumptable 00000448 default case
.text:00000528 ; ---------------------------------------------------------------------------
.text:00000528
.text:00000528 $LN8:                                   ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j
.text:00000528                                         ; DATA XREF: .text:$LN35o
.text:00000528                 mov     [ebp+var_2C], 0 ; jumptable 00000448 case 49
.text:0000052F                 mov     edx, [ebp+this]
.text:00000532                 movzx   eax, byte ptr [edx+98h]
.text:00000539                 test    eax, eax
.text:0000053B                 jnz     short loc_546
.text:0000053D                 mov     ecx, [ebp+var_2C]
.text:00000540                 or      ecx, 1
.text:00000543                 mov     [ebp+var_2C], ecx
.text:00000546
.text:00000546 loc_546:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+167j
.text:00000546                 mov     edx, [ebp+this]
.text:00000549                 movzx   eax, byte ptr [edx+8Ch]
.text:00000550                 test    eax, eax
.text:00000552                 jz      short loc_55D
.text:00000554                 mov     ecx, [ebp+var_2C]
.text:00000557                 or      ecx, 20h
.text:0000055A                 mov     [ebp+var_2C], ecx
.text:0000055D
.text:0000055D loc_55D:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+17Ej
.text:0000055D                 mov     edx, [ebp+this]
.text:00000560                 movzx   eax, byte ptr [edx+8Dh]
.text:00000567                 test    eax, eax
.text:00000569                 jz      short loc_574
.text:0000056B                 mov     ecx, [ebp+var_2C]
.text:0000056E                 or      ecx, 40h
.text:00000571                 mov     [ebp+var_2C], ecx
.text:00000574
.text:00000574 loc_574:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+195j
.text:00000574                 mov     edx, [ebp+this]
.text:00000577                 movzx   eax, byte ptr [edx+8Fh]
.text:0000057E                 test    eax, eax
.text:00000580                 jz      short loc_58B
.text:00000582                 mov     ecx, [ebp+var_2C]
.text:00000585                 or      ecx, 2
.text:00000588                 mov     [ebp+var_2C], ecx
.text:0000058B
.text:0000058B loc_58B:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1ACj
.text:0000058B                 mov     edx, [ebp+this]
.text:0000058E                 movzx   eax, byte ptr [edx+8Eh]
.text:00000595                 test    eax, eax
.text:00000597                 jz      short loc_5A5
.text:00000599                 mov     ecx, [ebp+var_2C]
.text:0000059C                 or      ecx, 80h
.text:000005A2                 mov     [ebp+var_2C], ecx
.text:000005A5
.text:000005A5 loc_5A5:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1C3j
.text:000005A5                 mov     edx, [ebp+this]
.text:000005A8                 movzx   eax, byte ptr [edx+90h]
.text:000005AF                 test    eax, eax
.text:000005B1                 jz      short loc_5BF
.text:000005B3                 mov     ecx, [ebp+var_2C]
.text:000005B6                 or      ecx, 200h
.text:000005BC                 mov     [ebp+var_2C], ecx
.text:000005BF
.text:000005BF loc_5BF:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1DDj
.text:000005BF                 mov     edx, [ebp+this]
.text:000005C2                 movzx   eax, byte ptr [edx+91h]
.text:000005C9                 test    eax, eax
.text:000005CB                 jz      short loc_5D9
.text:000005CD                 mov     ecx, [ebp+var_2C]
.text:000005D0                 or      ecx, 400h
.text:000005D6                 mov     [ebp+var_2C], ecx
.text:000005D9
.text:000005D9 loc_5D9:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+1F7j
.text:000005D9                 mov     edx, [ebp+var_2C]
.text:000005DC                 push    edx
.text:000005DD                 lea     ecx, [ebp+var_24]
.text:000005E0                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=(uint)
.text:000005E5
.text:000005E5 $LN19:                                  ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+64j
.text:000005E5                                         ; NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74j ...
.text:000005E5                 mov     eax, [ebp+arg_8] ; jumptable 00000448 default case
.text:000005E8                 push    eax             ; struct tagPROPVARIANT *
.text:000005E9                 lea     ecx, [ebp+var_24] ; this
.text:000005EC                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000005F1                 mov     [ebp+var_30], 0
.text:000005F8                 mov     byte ptr [ebp+var_4], 0
.text:000005FC                 lea     ecx, [ebp+var_24] ; this
.text:000005FF                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00000604                 mov     eax, [ebp+var_30]
.text:00000607                 jmp     short loc_62F
.text:00000607 ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text:00000607
.text:00000609
.text:00000609 ; =============== S U B R O U T I N E =======================================
.text:00000609
.text:00000609
.text:00000609 __catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 proc near
.text:00000609                                         ; DATA XREF: .xdata$x:000036C8o
.text:00000609                 mov     dword ptr [ebp-34h], 8007000Eh
.text:00000610                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000617                 mov     eax, offset $LN28
.text:0000061C                 retn
.text:0000061C __catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0 endp
.text:0000061C
.text:0000061D ; ---------------------------------------------------------------------------
.text:0000061D                 mov     eax, offset __tryend$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1
.text:00000622                 retn
.text:00000623 ; ---------------------------------------------------------------------------
.text:00000623
.text:00000623 __tryend$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1:
.text:00000623                                         ; DATA XREF: .text:0000061Do
.text:00000623                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000062A                 jmp     short loc_62F
.text:0000062C ; ---------------------------------------------------------------------------
.text:0000062C
.text:0000062C $LN28:                                  ; DATA XREF: __catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0+Eo
.text:0000062C                 mov     eax, [ebp-34h]
.text:0000062F ; START OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000062F
.text:0000062F loc_62F:                                ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+233j
.text:0000062F                                         ; .text:0000062Aj
.text:0000062F                 push    edx
.text:00000630                 mov     ecx, ebp
.text:00000632                 push    eax
.text:00000633                 lea     edx, $LN34
.text:00000639                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000063E                 pop     eax
.text:0000063F                 pop     edx
.text:00000640                 mov     ecx, [ebp+var_C]
.text:00000643                 mov     large fs:0, ecx
.text:0000064A                 pop     ecx
.text:0000064B                 pop     edi
.text:0000064C                 pop     esi
.text:0000064D                 pop     ebx
.text:0000064E                 add     esp, 44h
.text:00000651                 cmp     ebp, esp
.text:00000653                 call    __RTC_CheckEsp
.text:00000658                 mov     esp, ebp
.text:0000065A                 pop     ebp
.text:0000065B                 retn    0Ch
.text:0000065B ; END OF FUNCTION CHUNK FOR ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text:0000065B ; ---------------------------------------------------------------------------
.text:0000065E                 align 10h
.text:00000660 $LN34           dd 1                    ; DATA XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+25Fo
.text:00000664                 dd offset $LN33
.text:00000668 $LN33           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00000664o
.text:00000670                 dd offset $LN31         ; "prop"
.text:00000674 $LN31           db 'prop',0             ; DATA XREF: .text:00000670o
.text:00000679                 align 4
.text:0000067C $LN35           dd offset $LN10, offset $LN14, offset $LN18, offset $LN8
.text:0000067C                                         ; DATA XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+74r
.text:0000067C                 dd offset $LN16, offset $LN12, offset $LN19 ; jump table for switch statement
.text:00000698 $LN30           db      0,     6,     6,     6
.text:00000698                                         ; DATA XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+6Dr
.text:00000698                 db      6,     6,     6,     6 ; indirect table for switch statement
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      1,     6,     6,     6
.text:00000698                 db      6,     6,     2,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     6,     6,     6
.text:00000698                 db      6,     3,     6,     6
.text:00000698                 db      4,     6,     6,     6
.text:00000698                 db      5
.text:000006D1                 align 4
.text:000006D4
.text:000006D4 ; =============== S U B R O U T I N E =======================================
.text:000006D4
.text:000006D4 ; Attributes: bp-based frame
.text:000006D4
.text:000006D4 ; __int32 __stdcall NArchive::NXz::CHandler::GetNumberOfItems(NArchive::NXz::CHandler *this, unsigned int *)
.text:000006D4                 public ?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z
.text:000006D4 ?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z proc near
.text:000006D4                                         ; DATA XREF: .rdata:00003658o
.text:000006D4
.text:000006D4 this            = dword ptr  8
.text:000006D4 arg_4           = dword ptr  0Ch
.text:000006D4
.text:000006D4                 push    ebp
.text:000006D5                 mov     ebp, esp
.text:000006D7                 mov     eax, [ebp+arg_4]
.text:000006DA                 mov     dword ptr [eax], 1
.text:000006E0                 xor     eax, eax
.text:000006E2                 pop     ebp
.text:000006E3                 retn    8
.text:000006E3 ?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z endp
.text:000006E3
.text:000006E3 ; ---------------------------------------------------------------------------
.text:000006E6                 db 0Eh dup(0CCh)
.text:000006F4
.text:000006F4 ; =============== S U B R O U T I N E =======================================
.text:000006F4
.text:000006F4 ; Attributes: bp-based frame
.text:000006F4
.text:000006F4 ; __int32 __cdecl NArchive::NXz::CHandler::GetProperty(NArchive::NXz::CHandler *this, unsigned int, unsigned __int32, struct tagPROPVARIANT *)
.text:000006F4                 public ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000006F4 ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text:000006F4                                         ; DATA XREF: .rdata:0000365Co
.text:000006F4
.text:000006F4 var_40          = dword ptr -40h
.text:000006F4 var_39          = byte ptr -39h
.text:000006F4 var_38          = dword ptr -38h
.text:000006F4 var_34          = dword ptr -34h
.text:000006F4 var_2C          = dword ptr -2Ch
.text:000006F4 var_24          = byte ptr -24h
.text:000006F4 var_10          = dword ptr -10h
.text:000006F4 var_C           = dword ptr -0Ch
.text:000006F4 var_4           = dword ptr -4
.text:000006F4 this            = dword ptr  8
.text:000006F4 arg_8           = dword ptr  10h
.text:000006F4 arg_C           = dword ptr  14h
.text:000006F4
.text:000006F4 ; FUNCTION CHUNK AT .text:00000825 SIZE 0000002F BYTES
.text:000006F4
.text:000006F4                 push    ebp
.text:000006F5                 mov     ebp, esp
.text:000006F7                 push    0FFFFFFFFh
.text:000006F9                 push    offset __ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:000006FE                 mov     eax, large fs:0
.text:00000704                 push    eax
.text:00000705                 push    ecx
.text:00000706                 sub     esp, 30h
.text:00000709                 push    ebx
.text:0000070A                 push    esi
.text:0000070B                 push    edi
.text:0000070C                 lea     edi, [ebp+var_40]
.text:0000070F                 mov     ecx, 0Ch
.text:00000714                 mov     eax, 0CCCCCCCCh
.text:00000719                 rep stosd
.text:0000071B                 mov     eax, dword ptr ds:___security_cookie
.text:00000720                 xor     eax, ebp
.text:00000722                 push    eax
.text:00000723                 lea     eax, [ebp+var_C]
.text:00000726                 mov     large fs:0, eax
.text:0000072C                 mov     [ebp+var_10], esp
.text:0000072F                 mov     [ebp+var_4], 0
.text:00000736                 lea     ecx, [ebp+var_24] ; this
.text:00000739                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:0000073E                 mov     [ebp+var_34], eax
.text:00000741                 mov     byte ptr [ebp+var_4], 1
.text:00000745                 mov     eax, [ebp+arg_8]
.text:00000748                 mov     [ebp+var_38], eax
.text:0000074B                 cmp     [ebp+var_38], 7
.text:0000074F                 jz      short loc_75F
.text:00000751                 cmp     [ebp+var_38], 8
.text:00000755                 jz      short loc_782
.text:00000757                 cmp     [ebp+var_38], 16h
.text:0000075B                 jz      short loc_7A5
.text:0000075D                 jmp     short loc_7DB
.text:0000075F ; ---------------------------------------------------------------------------
.text:0000075F
.text:0000075F loc_75F:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5Bj
.text:0000075F                 mov     ecx, [ebp+this]
.text:00000762                 movzx   edx, byte ptr [ecx+88h]
.text:00000769                 test    edx, edx
.text:0000076B                 jz      short loc_780
.text:0000076D                 mov     eax, [ebp+this]
.text:00000770                 mov     ecx, [eax+6Ch]
.text:00000773                 push    ecx
.text:00000774                 mov     edx, [eax+68h]
.text:00000777                 push    edx
.text:00000778                 lea     ecx, [ebp+var_24]
.text:0000077B                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:00000780
.text:00000780 loc_780:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+77j
.text:00000780                 jmp     short loc_7DB
.text:00000782 ; ---------------------------------------------------------------------------
.text:00000782
.text:00000782 loc_782:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+61j
.text:00000782                 mov     eax, [ebp+this]
.text:00000785                 movzx   ecx, byte ptr [eax+9Ah]
.text:0000078C                 test    ecx, ecx
.text:0000078E                 jz      short loc_7A3
.text:00000790                 mov     edx, [ebp+this]
.text:00000793                 mov     eax, [edx+74h]
.text:00000796                 push    eax
.text:00000797                 mov     ecx, [edx+70h]
.text:0000079A                 push    ecx
.text:0000079B                 lea     ecx, [ebp+var_24]
.text:0000079E                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
.text:000007A3
.text:000007A3 loc_7A3:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+9Aj
.text:000007A3                 jmp     short loc_7DB
.text:000007A5 ; ---------------------------------------------------------------------------
.text:000007A5
.text:000007A5 loc_7A5:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+67j
.text:000007A5                 mov     ecx, [ebp+this]
.text:000007A8                 add     ecx, 0A8h ; '¿' ; this
.text:000007AE                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:000007B3                 mov     [ebp+var_39], al
.text:000007B6                 movzx   edx, [ebp+var_39]
.text:000007BA                 test    edx, edx
.text:000007BC                 jnz     short loc_7DB
.text:000007BE                 mov     ecx, [ebp+this]
.text:000007C1                 add     ecx, 0A8h ; '¿'
.text:000007C7                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000007CC                 mov     [ebp+var_40], eax
.text:000007CF                 mov     eax, [ebp+var_40]
.text:000007D2                 push    eax
.text:000007D3                 lea     ecx, [ebp+var_24]
.text:000007D6                 call    ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=(char const *)
.text:000007DB
.text:000007DB loc_7DB:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+69j
.text:000007DB                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *):loc_780j ...
.text:000007DB                 mov     ecx, [ebp+arg_C]
.text:000007DE                 push    ecx             ; struct tagPROPVARIANT *
.text:000007DF                 lea     ecx, [ebp+var_24] ; this
.text:000007E2                 call    ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach(tagPROPVARIANT *)
.text:000007E7                 mov     [ebp+var_2C], 0
.text:000007EE                 mov     byte ptr [ebp+var_4], 0
.text:000007F2                 lea     ecx, [ebp+var_24] ; this
.text:000007F5                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000007FA                 mov     eax, [ebp+var_2C]
.text:000007FD                 jmp     short loc_825
.text:000007FD ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text:000007FD
.text:000007FF
.text:000007FF ; =============== S U B R O U T I N E =======================================
.text:000007FF
.text:000007FF
.text:000007FF __catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 proc near
.text:000007FF                                         ; DATA XREF: .xdata$x:00003728o
.text:000007FF                 mov     dword ptr [ebp-30h], 8007000Eh
.text:00000806                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0000080D                 mov     eax, offset $LN16_0
.text:00000812                 retn
.text:00000812 __catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0 endp
.text:00000812
.text:00000813 ; ---------------------------------------------------------------------------
.text:00000813                 mov     eax, offset __tryend$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
.text:00000818                 retn
.text:00000819 ; ---------------------------------------------------------------------------
.text:00000819
.text:00000819 __tryend$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
.text:00000819                                         ; DATA XREF: .text:00000813o
.text:00000819                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00000820                 jmp     short loc_825
.text:00000822 ; ---------------------------------------------------------------------------
.text:00000822
.text:00000822 $LN16_0:                                ; DATA XREF: __catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0+Eo
.text:00000822                 mov     eax, [ebp-30h]
.text:00000825 ; START OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000825
.text:00000825 loc_825:                                ; CODE XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+109j
.text:00000825                                         ; .text:00000820j
.text:00000825                 push    edx
.text:00000826                 mov     ecx, ebp
.text:00000828                 push    eax
.text:00000829                 lea     edx, $LN21
.text:0000082F                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000834                 pop     eax
.text:00000835                 pop     edx
.text:00000836                 mov     ecx, [ebp+var_C]
.text:00000839                 mov     large fs:0, ecx
.text:00000840                 pop     ecx
.text:00000841                 pop     edi
.text:00000842                 pop     esi
.text:00000843                 pop     ebx
.text:00000844                 add     esp, 40h
.text:00000847                 cmp     ebp, esp
.text:00000849                 call    __RTC_CheckEsp
.text:0000084E                 mov     esp, ebp
.text:00000850                 pop     ebp
.text:00000851                 retn    10h
.text:00000851 ; END OF FUNCTION CHUNK FOR ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text:00000851 ; ---------------------------------------------------------------------------
.text:00000854 $LN21           dd 1                    ; DATA XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+135o
.text:00000858                 dd offset $LN20
.text:0000085C $LN20           dd 0FFFFFFDCh, 10h      ; DATA XREF: .text:00000858o
.text:00000864                 dd offset $LN18_0       ; "prop"
.text:00000868 $LN18_0         db 'prop',0             ; DATA XREF: .text:00000864o
.text:0000086D                 db 7 dup(0CCh)
.text:00000874
.text:00000874 ; =============== S U B R O U T I N E =======================================
.text:00000874
.text:00000874 ; Attributes: bp-based frame
.text:00000874
.text:00000874 ; _DWORD __thiscall NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap(NArchive::NXz::COpenCallbackWrap *this, struct IArchiveOpenCallback *)
.text:00000874                 public ??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z
.text:00000874 ??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z proc near
.text:00000874                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+213p
.text:00000874
.text:00000874 var_4           = dword ptr -4
.text:00000874 arg_0           = dword ptr  8
.text:00000874
.text:00000874                 push    ebp
.text:00000875                 mov     ebp, esp
.text:00000877                 push    ecx
.text:00000878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000087F                 mov     [ebp+var_4], ecx
.text:00000882                 mov     eax, [ebp+var_4]
.text:00000885                 mov     dword ptr [eax], offset ?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z ; NArchive::NXz::OpenCallbackProgress(void *,unsigned __int64,unsigned __int64)
.text:0000088B                 mov     ecx, [ebp+var_4]
.text:0000088E                 mov     edx, [ebp+arg_0]
.text:00000891                 mov     [ecx+4], edx
.text:00000894                 mov     eax, [ebp+var_4]
.text:00000897                 mov     dword ptr [eax+8], 0
.text:0000089E                 mov     eax, [ebp+var_4]
.text:000008A1                 mov     esp, ebp
.text:000008A3                 pop     ebp
.text:000008A4                 retn    4
.text:000008A4 ??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z endp
.text:000008A4
.text:000008A4 ; ---------------------------------------------------------------------------
.text:000008A7                 db 0Dh dup(0CCh)
.text:000008B4
.text:000008B4 ; =============== S U B R O U T I N E =======================================
.text:000008B4
.text:000008B4 ; Attributes: bp-based frame
.text:000008B4
.text:000008B4 ; int __stdcall NArchive::NXz::OpenCallbackProgress(void *, unsigned __int64, unsigned __int64)
.text:000008B4 ?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z proc near
.text:000008B4                                         ; DATA XREF: NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap(IArchiveOpenCallback *)+11o
.text:000008B4
.text:000008B4 var_4           = dword ptr -4
.text:000008B4 arg_0           = dword ptr  8
.text:000008B4 arg_4           = byte ptr  0Ch
.text:000008B4
.text:000008B4                 push    ebp
.text:000008B5                 mov     ebp, esp
.text:000008B7                 push    ecx
.text:000008B8                 push    esi
.text:000008B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000008C0                 mov     eax, [ebp+arg_0]
.text:000008C3                 mov     [ebp+var_4], eax
.text:000008C6                 mov     esi, esp
.text:000008C8                 lea     ecx, [ebp+arg_4]
.text:000008CB                 push    ecx
.text:000008CC                 push    0
.text:000008CE                 mov     edx, [ebp+var_4]
.text:000008D1                 mov     eax, [edx+4]
.text:000008D4                 mov     ecx, [ebp+var_4]
.text:000008D7                 mov     edx, [ecx+4]
.text:000008DA                 mov     eax, [eax]
.text:000008DC                 push    edx
.text:000008DD                 mov     ecx, [eax+10h]
.text:000008E0                 call    ecx
.text:000008E2                 cmp     esi, esp
.text:000008E4                 call    __RTC_CheckEsp
.text:000008E9                 mov     edx, [ebp+var_4]
.text:000008EC                 mov     [edx+8], eax
.text:000008EF                 mov     eax, [ebp+var_4]
.text:000008F2                 mov     eax, [eax+8]
.text:000008F5                 pop     esi
.text:000008F6                 add     esp, 4
.text:000008F9                 cmp     ebp, esp
.text:000008FB                 call    __RTC_CheckEsp
.text:00000900                 mov     esp, ebp
.text:00000902                 pop     ebp
.text:00000903                 retn    14h
.text:00000903 ?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z endp
.text:00000903
.text:00000903 ; ---------------------------------------------------------------------------
.text:00000906                 db 0Eh dup(0CCh)
.text:00000914
.text:00000914 ; =============== S U B R O U T I N E =======================================
.text:00000914
.text:00000914 ; Attributes: bp-based frame
.text:00000914
.text:00000914 ; __int32 __thiscall NArchive::NXz::CHandler::Open2(NArchive::NXz::CHandler *this, struct IInStream *, struct IArchiveOpenCallback *)
.text:00000914                 public ?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text:00000914 ?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z proc near
.text:00000914                                         ; CODE XREF: NArchive::NXz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+63p
.text:00000914
.text:00000914 var_41C4        = dword ptr -41C4h
.text:00000914 var_41C0        = dword ptr -41C0h
.text:00000914 var_41BC        = dword ptr -41BCh
.text:00000914 var_41B8        = dword ptr -41B8h
.text:00000914 var_41B4        = dword ptr -41B4h
.text:00000914 var_41B0        = dword ptr -41B0h
.text:00000914 var_41AC        = dword ptr -41ACh
.text:00000914 var_41A8        = byte ptr -41A8h
.text:00000914 var_419C        = dword ptr -419Ch
.text:00000914 var_4198        = byte ptr -4198h
.text:00000914 var_418C        = dword ptr -418Ch
.text:00000914 var_4188        = dword ptr -4188h
.text:00000914 var_4180        = dword ptr -4180h
.text:00000914 var_417C        = dword ptr -417Ch
.text:00000914 var_4170        = dword ptr -4170h
.text:00000914 var_415C        = byte ptr -415Ch
.text:00000914 var_4154        = dword ptr -4154h
.text:00000914 var_4148        = byte ptr -4148h
.text:00000914 var_4138        = dword ptr -4138h
.text:00000914 var_124         = byte ptr -124h
.text:00000914 var_110         = dword ptr -110h
.text:00000914 var_10C         = dword ptr -10Ch
.text:00000914 var_108         = dword ptr -108h
.text:00000914 var_104         = dword ptr -104h
.text:00000914 var_100         = dword ptr -100h
.text:00000914 var_F8          = byte ptr -0F8h
.text:00000914 var_EC          = dword ptr -0ECh
.text:00000914 var_E0          = byte ptr -0E0h
.text:00000914 var_D0          = byte ptr -0D0h
.text:00000914 var_C8          = byte ptr -0C8h
.text:00000914 var_44          = dword ptr -44h
.text:00000914 var_3C          = byte ptr -3Ch
.text:00000914 var_1C          = byte ptr -1Ch
.text:00000914 var_14          = dword ptr -14h
.text:00000914 var_10          = dword ptr -10h
.text:00000914 var_C           = dword ptr -0Ch
.text:00000914 var_4           = dword ptr -4
.text:00000914 arg_0           = dword ptr  8
.text:00000914 arg_4           = dword ptr  0Ch
.text:00000914
.text:00000914                 push    ebp
.text:00000915                 mov     ebp, esp
.text:00000917                 push    0FFFFFFFFh
.text:00000919                 push    offset __ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text:0000091E                 mov     eax, large fs:0
.text:00000924                 push    eax
.text:00000925                 mov     eax, 41B8h
.text:0000092A                 call    __chkstk
.text:0000092F                 push    esi
.text:00000930                 push    edi
.text:00000931                 push    ecx
.text:00000932                 lea     edi, [ebp+var_41C4]
.text:00000938                 mov     ecx, 106Eh
.text:0000093D                 mov     eax, 0CCCCCCCCh
.text:00000942                 rep stosd
.text:00000944                 pop     ecx
.text:00000945                 mov     eax, dword ptr ds:___security_cookie
.text:0000094A                 xor     eax, ebp
.text:0000094C                 mov     [ebp+var_10], eax
.text:0000094F                 push    eax
.text:00000950                 lea     eax, [ebp+var_C]
.text:00000953                 mov     large fs:0, eax
.text:00000959                 mov     [ebp+var_14], ecx
.text:0000095C                 mov     eax, [ebp+var_14]
.text:0000095F                 mov     byte ptr [eax+99h], 1
.text:00000966                 mov     ecx, [ebp+arg_0]
.text:00000969                 push    ecx             ; struct ISequentialInStream *
.text:0000096A                 lea     ecx, [ebp+var_3C] ; this
.text:0000096D                 call    ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap(ISequentialInStream *)
.text:00000972                 lea     edx, [ebp+var_3C]
.text:00000975                 push    edx
.text:00000976                 lea     eax, [ebp+var_1C]
.text:00000979                 push    eax
.text:0000097A                 call    _Xz_ReadHeader@8 ; Xz_ReadHeader(x,x)
.text:0000097F                 mov     [ebp+var_44], eax
.text:00000982                 cmp     [ebp+var_44], 0
.text:00000986                 jz      short loc_996
.text:00000988                 mov     ecx, [ebp+var_44]
.text:0000098B                 push    ecx
.text:0000098C                 call    ?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z ; NArchive::NXz::SRes_to_Open_HRESULT(int)
.text:00000991                 jmp     loc_D30
.text:00000996 ; ---------------------------------------------------------------------------
.text:00000996
.text:00000996 loc_996:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+72j
.text:00000996                 lea     edx, [ebp+var_F8]
.text:0000099C                 push    edx
.text:0000099D                 lea     eax, [ebp+var_EC]
.text:000009A3                 push    eax
.text:000009A4                 lea     ecx, [ebp+var_3C]
.text:000009A7                 push    ecx
.text:000009A8                 lea     edx, [ebp+var_E0]
.text:000009AE                 push    edx
.text:000009AF                 call    _XzBlock_ReadHeader@16 ; XzBlock_ReadHeader(x,x,x,x)
.text:000009B4                 mov     [ebp+var_100], eax
.text:000009BA                 cmp     [ebp+var_100], 0
.text:000009C1                 jnz     loc_A70
.text:000009C7                 cmp     [ebp+var_EC], 0
.text:000009CE                 jnz     loc_A70
.text:000009D4                 movzx   eax, [ebp+var_D0]
.text:000009DB                 and     eax, 3
.text:000009DE                 add     eax, 1
.text:000009E1                 mov     [ebp+var_104], eax
.text:000009E7                 mov     [ebp+var_108], 0
.text:000009F1                 jmp     short loc_A02
.text:000009F3 ; ---------------------------------------------------------------------------
.text:000009F3
.text:000009F3 loc_9F3:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+15Aj
.text:000009F3                 mov     ecx, [ebp+var_108]
.text:000009F9                 add     ecx, 1
.text:000009FC                 mov     [ebp+var_108], ecx
.text:00000A02
.text:00000A02 loc_A02:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+DDj
.text:00000A02                 mov     edx, [ebp+var_108]
.text:00000A08                 cmp     edx, [ebp+var_104]
.text:00000A0E                 jnb     short loc_A70
.text:00000A10                 mov     eax, [ebp+var_108]
.text:00000A16                 shl     eax, 5
.text:00000A19                 lea     ecx, [ebp+eax+var_C8]
.text:00000A20                 push    ecx
.text:00000A21                 lea     edx, [ebp+var_4198]
.text:00000A27                 push    edx
.text:00000A28                 call    ?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z ; NArchive::NXz::GetMethodString(CXzFilter const &)
.text:00000A2D                 mov     [ebp+var_41B4], eax
.text:00000A33                 mov     eax, [ebp+var_41B4]
.text:00000A39                 mov     [ebp+var_41B8], eax
.text:00000A3F                 mov     [ebp+var_4], 0
.text:00000A46                 mov     ecx, [ebp+var_41B8]
.text:00000A4C                 push    ecx             ; int
.text:00000A4D                 mov     edx, [ebp+var_14]
.text:00000A50                 add     edx, 0A8h ; '¿'
.text:00000A56                 push    edx             ; AString *
.text:00000A57                 call    ?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString(AString &,AString const &)
.text:00000A5C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000A63                 lea     ecx, [ebp+var_4198] ; this
.text:00000A69                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000A6E                 jmp     short loc_9F3
.text:00000A70 ; ---------------------------------------------------------------------------
.text:00000A70
.text:00000A70 loc_A70:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+ADj
.text:00000A70                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+BAj ...
.text:00000A70                 mov     eax, [ebp+var_14]
.text:00000A73                 add     eax, 70h ; 'p'
.text:00000A76                 mov     esi, esp
.text:00000A78                 push    eax
.text:00000A79                 push    2
.text:00000A7B                 push    0
.text:00000A7D                 push    0
.text:00000A7F                 mov     ecx, [ebp+arg_0]
.text:00000A82                 mov     edx, [ecx]
.text:00000A84                 mov     eax, [ebp+arg_0]
.text:00000A87                 push    eax
.text:00000A88                 mov     ecx, [edx+10h]
.text:00000A8B                 call    ecx
.text:00000A8D                 cmp     esi, esp
.text:00000A8F                 call    __RTC_CheckEsp
.text:00000A94                 mov     [ebp+var_10C], eax
.text:00000A9A                 cmp     [ebp+var_10C], 0
.text:00000AA1                 jz      short loc_AAE
.text:00000AA3                 mov     eax, [ebp+var_10C]
.text:00000AA9                 jmp     loc_D30
.text:00000AAE ; ---------------------------------------------------------------------------
.text:00000AAE
.text:00000AAE loc_AAE:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+18Dj
.text:00000AAE                 mov     edx, [ebp+var_14]
.text:00000AB1                 add     edx, 70h ; 'p'
.text:00000AB4                 mov     esi, esp
.text:00000AB6                 push    edx
.text:00000AB7                 push    0
.text:00000AB9                 mov     eax, [ebp+arg_4]
.text:00000ABC                 mov     ecx, [eax]
.text:00000ABE                 mov     edx, [ebp+arg_4]
.text:00000AC1                 push    edx
.text:00000AC2                 mov     eax, [ecx+0Ch]
.text:00000AC5                 call    eax
.text:00000AC7                 cmp     esi, esp
.text:00000AC9                 call    __RTC_CheckEsp
.text:00000ACE                 mov     [ebp+var_110], eax
.text:00000AD4                 cmp     [ebp+var_110], 0
.text:00000ADB                 jz      short loc_AE8
.text:00000ADD                 mov     eax, [ebp+var_110]
.text:00000AE3                 jmp     loc_D30
.text:00000AE8 ; ---------------------------------------------------------------------------
.text:00000AE8
.text:00000AE8 loc_AE8:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1C7j
.text:00000AE8                 mov     ecx, [ebp+arg_0]
.text:00000AEB                 push    ecx             ; struct IInStream *
.text:00000AEC                 lea     ecx, [ebp+var_124] ; this
.text:00000AF2                 call    ??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z ; CSeekInStreamWrap::CSeekInStreamWrap(IInStream *)
.text:00000AF7                 push    1
.text:00000AF9                 lea     edx, [ebp+var_4148]
.text:00000AFF                 push    edx
.text:00000B00                 call    _LookToRead_CreateVTable@8 ; LookToRead_CreateVTable(x,x)
.text:00000B05                 lea     eax, [ebp+var_124]
.text:00000B0B                 mov     [ebp+var_4138], eax
.text:00000B11                 lea     ecx, [ebp+var_4148]
.text:00000B17                 push    ecx
.text:00000B18                 call    _LookToRead_Init@4 ; LookToRead_Init(x)
.text:00000B1D                 mov     edx, [ebp+arg_4]
.text:00000B20                 push    edx             ; struct IArchiveOpenCallback *
.text:00000B21                 lea     ecx, [ebp+var_415C] ; this
.text:00000B27                 call    ??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap(IArchiveOpenCallback *)
.text:00000B2C                 lea     ecx, [ebp+var_4170] ; this
.text:00000B32                 call    ??0CXzsCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzsCPP::CXzsCPP(void)
.text:00000B37                 mov     [ebp+var_4], 1
.text:00000B3E                 push    offset _g_Alloc
.text:00000B43                 lea     eax, [ebp+var_415C]
.text:00000B49                 push    eax
.text:00000B4A                 lea     ecx, [ebp+var_4180]
.text:00000B50                 push    ecx
.text:00000B51                 lea     edx, [ebp+var_4148]
.text:00000B57                 push    edx
.text:00000B58                 lea     eax, [ebp+var_4170]
.text:00000B5E                 push    eax
.text:00000B5F                 call    _Xzs_ReadBackward@20 ; Xzs_ReadBackward(x,x,x,x,x)
.text:00000B64                 mov     [ebp+var_4188], eax
.text:00000B6A                 cmp     [ebp+var_4188], 0Ah
.text:00000B71                 jnz     short loc_BBD
.text:00000B73                 cmp     [ebp+var_4154], 0
.text:00000B7A                 jnz     short loc_B88
.text:00000B7C                 mov     [ebp+var_41BC], 80004005h
.text:00000B86                 jmp     short loc_B94
.text:00000B88 ; ---------------------------------------------------------------------------
.text:00000B88
.text:00000B88 loc_B88:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+266j
.text:00000B88                 mov     ecx, [ebp+var_4154]
.text:00000B8E                 mov     [ebp+var_41BC], ecx
.text:00000B94
.text:00000B94 loc_B94:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+272j
.text:00000B94                 mov     edx, [ebp+var_41BC]
.text:00000B9A                 mov     [ebp+var_419C], edx
.text:00000BA0                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000BA7                 lea     ecx, [ebp+var_4170] ; this
.text:00000BAD                 call    ??1CXzsCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzsCPP::~CXzsCPP(void)
.text:00000BB2                 mov     eax, [ebp+var_419C]
.text:00000BB8                 jmp     loc_D30
.text:00000BBD ; ---------------------------------------------------------------------------
.text:00000BBD
.text:00000BBD loc_BBD:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+25Dj
.text:00000BBD                 cmp     [ebp+var_4188], 0
.text:00000BC4                 jnz     loc_C95
.text:00000BCA                 mov     eax, [ebp+var_4180]
.text:00000BD0                 or      eax, [ebp+var_417C]
.text:00000BD6                 jnz     loc_C95
.text:00000BDC                 mov     ecx, [ebp+var_14]
.text:00000BDF                 mov     byte ptr [ecx+9Ah], 1
.text:00000BE6                 lea     edx, [ebp+var_4170]
.text:00000BEC                 push    edx
.text:00000BED                 call    _Xzs_GetUnpackSize@4 ; Xzs_GetUnpackSize(x)
.text:00000BF2                 mov     ecx, [ebp+var_14]
.text:00000BF5                 mov     [ecx+68h], eax
.text:00000BF8                 mov     [ecx+6Ch], edx
.text:00000BFB                 mov     edx, [ebp+var_14]
.text:00000BFE                 mov     byte ptr [edx+88h], 1
.text:00000C05                 mov     eax, [ebp+var_4170]
.text:00000C0B                 xor     ecx, ecx
.text:00000C0D                 mov     edx, [ebp+var_14]
.text:00000C10                 mov     [edx+78h], eax
.text:00000C13                 mov     [edx+7Ch], ecx
.text:00000C16                 mov     eax, [ebp+var_14]
.text:00000C19                 mov     byte ptr [eax+89h], 1
.text:00000C20                 lea     ecx, [ebp+var_4170]
.text:00000C26                 push    ecx
.text:00000C27                 call    _Xzs_GetNumBlocks@4 ; Xzs_GetNumBlocks(x)
.text:00000C2C                 mov     ecx, [ebp+var_14]
.text:00000C2F                 mov     [ecx+80h], eax
.text:00000C35                 mov     [ecx+84h], edx
.text:00000C3B                 mov     edx, [ebp+var_14]
.text:00000C3E                 mov     byte ptr [edx+8Ah], 1
.text:00000C45                 lea     eax, [ebp+var_4170]
.text:00000C4B                 push    eax
.text:00000C4C                 lea     ecx, [ebp+var_41A8]
.text:00000C52                 push    ecx
.text:00000C53                 call    ?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z ; NArchive::NXz::GetCheckString(CXzs const &)
.text:00000C58                 mov     [ebp+var_41C0], eax
.text:00000C5E                 mov     edx, [ebp+var_41C0]
.text:00000C64                 mov     [ebp+var_41C4], edx
.text:00000C6A                 mov     byte ptr [ebp+var_4], 2
.text:00000C6E                 mov     eax, [ebp+var_41C4]
.text:00000C74                 push    eax             ; int
.text:00000C75                 mov     ecx, [ebp+var_14]
.text:00000C78                 add     ecx, 0A8h ; '¿'
.text:00000C7E                 push    ecx             ; AString *
.text:00000C7F                 call    ?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString(AString &,AString const &)
.text:00000C84                 mov     byte ptr [ebp+var_4], 1
.text:00000C88                 lea     ecx, [ebp+var_41A8] ; this
.text:00000C8E                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00000C93                 jmp     short loc_C9F
.text:00000C95 ; ---------------------------------------------------------------------------
.text:00000C95
.text:00000C95 loc_C95:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2B0j
.text:00000C95                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2C2j
.text:00000C95                 mov     [ebp+var_4188], 0
.text:00000C9F
.text:00000C9F loc_C9F:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+37Fj
.text:00000C9F                 mov     edx, [ebp+var_4188]
.text:00000CA5                 push    edx
.text:00000CA6                 call    ?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z ; NArchive::NXz::SRes_to_Open_HRESULT(int)
.text:00000CAB                 mov     [ebp+var_418C], eax
.text:00000CB1                 cmp     [ebp+var_418C], 0
.text:00000CB8                 jz      short loc_CE0
.text:00000CBA                 mov     eax, [ebp+var_418C]
.text:00000CC0                 mov     [ebp+var_41AC], eax
.text:00000CC6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000CCD                 lea     ecx, [ebp+var_4170] ; this
.text:00000CD3                 call    ??1CXzsCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzsCPP::~CXzsCPP(void)
.text:00000CD8                 mov     eax, [ebp+var_41AC]
.text:00000CDE                 jmp     short loc_D30
.text:00000CE0 ; ---------------------------------------------------------------------------
.text:00000CE0
.text:00000CE0 loc_CE0:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3A4j
.text:00000CE0                 mov     ecx, [ebp+arg_0]
.text:00000CE3                 push    ecx
.text:00000CE4                 mov     ecx, [ebp+var_14]
.text:00000CE7                 add     ecx, 9Ch ; '£'
.text:00000CED                 call    ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=(IInStream *)
.text:00000CF2                 mov     edx, [ebp+arg_0]
.text:00000CF5                 push    edx
.text:00000CF6                 mov     ecx, [ebp+var_14]
.text:00000CF9                 add     ecx, 0A0h ; 'á'
.text:00000CFF                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00000D04                 mov     eax, [ebp+var_14]
.text:00000D07                 mov     byte ptr [eax+98h], 1
.text:00000D0E                 mov     [ebp+var_41B0], 0
.text:00000D18                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00000D1F                 lea     ecx, [ebp+var_4170] ; this
.text:00000D25                 call    ??1CXzsCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzsCPP::~CXzsCPP(void)
.text:00000D2A                 mov     eax, [ebp+var_41B0]
.text:00000D30
.text:00000D30 loc_D30:                                ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+7Dj
.text:00000D30                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+195j ...
.text:00000D30                 push    edx
.text:00000D31                 mov     ecx, ebp
.text:00000D33                 push    eax
.text:00000D34                 lea     edx, $LN31_0
.text:00000D3A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00000D3F                 pop     eax
.text:00000D40                 pop     edx
.text:00000D41                 mov     ecx, [ebp+var_C]
.text:00000D44                 mov     large fs:0, ecx
.text:00000D4B                 pop     ecx
.text:00000D4C                 pop     edi
.text:00000D4D                 pop     esi
.text:00000D4E                 mov     ecx, [ebp+var_10]
.text:00000D51                 xor     ecx, ebp
.text:00000D53                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00000D58                 add     esp, 41C4h
.text:00000D5E                 cmp     ebp, esp
.text:00000D60                 call    __RTC_CheckEsp
.text:00000D65                 mov     esp, ebp
.text:00000D67                 pop     ebp
.text:00000D68                 retn    8
.text:00000D68 ?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z endp
.text:00000D68
.text:00000D68 ; ---------------------------------------------------------------------------
.text:00000D6B                 align 4
.text:00000D6C $LN31_0         dd 0Ah                  ; DATA XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+420o
.text:00000D70                 dd offset $LN30_0
.text:00000D74 $LN30_0         dd 0FFFFFFE4h, 2        ; DATA XREF: .text:00000D70o
.text:00000D7C                 dd offset $LN19_0       ; "st"
.text:00000D80                 dd 0FFFFFFC4h, 18h
.text:00000D88                 dd offset $LN20_0       ; "inStreamWrap"
.text:00000D8C                 dd 0FFFFFF20h, 98h
.text:00000D94                 dd offset $LN21_0       ; "block"
.text:00000D98                 dd 0FFFFFF14h, 4
.text:00000DA0                 dd offset $LN22         ; "isIndex"
.text:00000DA4                 db 8, 0FFh
.text:00000DA6                 dw 0FFFFh
.text:00000DA8                 dd 4
.text:00000DAC                 dd offset $LN23         ; "headerSizeRes"
.text:00000DB0                 dd 0FFFFFEDCh, 10h
.text:00000DB8                 dd offset $LN24         ; "inStreamImp"
.text:00000DBC                 dd 0FFFFBEB8h, 401Ch
.text:00000DC4                 dd offset $LN25         ; "lookStream"
.text:00000DC8                 dd 0FFFFBEA4h, 0Ch
.text:00000DD0                 dd offset $LN26         ; "openWrap"
.text:00000DD4                 db 90h
.text:00000DD5                 db 0BEh, 2 dup(0FFh)
.text:00000DD8                 dd 0Ch
.text:00000DDC                 dd offset $LN27         ; "xzs"
.text:00000DE0                 dd 0FFFFBE80h, 8
.text:00000DE8                 dd offset $LN28_0       ; "startPosition"
.text:00000DEC $LN28_0         db 'startPosition',0    ; DATA XREF: .text:00000DE8o
.text:00000DFA $LN27           db 'xzs',0              ; DATA XREF: .text:00000DDCo
.text:00000DFE $LN26           db 'openWrap',0         ; DATA XREF: .text:00000DD0o
.text:00000E07 $LN25           db 'lookStream',0       ; DATA XREF: .text:00000DC4o
.text:00000E12 $LN24           db 'inStreamImp',0      ; DATA XREF: .text:00000DB8o
.text:00000E1E $LN23           db 'headerSizeRes',0    ; DATA XREF: .text:00000DACo
.text:00000E2C $LN22           db 'isIndex',0          ; DATA XREF: .text:00000DA0o
.text:00000E34 $LN21_0         db 'block',0            ; DATA XREF: .text:00000D94o
.text:00000E3A $LN20_0         db 'inStreamWrap',0     ; DATA XREF: .text:00000D88o
.text:00000E47 $LN19_0         db 'st',0               ; DATA XREF: .text:00000D7Co
.text:00000E4A                 db 0Ah dup(0CCh)
.text:00000E54
.text:00000E54 ; =============== S U B R O U T I N E =======================================
.text:00000E54
.text:00000E54 ; Attributes: bp-based frame
.text:00000E54
.text:00000E54 ; class AString __stdcall NArchive::NXz::GetMethodString(struct CXzFilter const &)
.text:00000E54 ?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z proc near
.text:00000E54                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+114p
.text:00000E54
.text:00000E54 var_70          = dword ptr -70h
.text:00000E54 var_6C          = dword ptr -6Ch
.text:00000E54 var_68          = dword ptr -68h
.text:00000E54 var_64          = dword ptr -64h
.text:00000E54 var_60          = dword ptr -60h
.text:00000E54 var_5C          = dword ptr -5Ch
.text:00000E54 var_58          = dword ptr -58h
.text:00000E54 var_50          = byte ptr -50h
.text:00000E54 var_3C          = byte ptr -3Ch
.text:00000E54 var_18          = dword ptr -18h
.text:00000E54 var_14          = dword ptr -14h
.text:00000E54 var_10          = dword ptr -10h
.text:00000E54 var_C           = dword ptr -0Ch
.text:00000E54 var_4           = dword ptr -4
.text:00000E54 arg_0           = dword ptr  8
.text:00000E54 arg_4           = dword ptr  0Ch
.text:00000E54
.text:00000E54                 push    ebp
.text:00000E55                 mov     ebp, esp
.text:00000E57                 push    0FFFFFFFFh
.text:00000E59                 push    offset __ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
.text:00000E5E                 mov     eax, large fs:0
.text:00000E64                 push    eax
.text:00000E65                 sub     esp, 64h
.text:00000E68                 push    edi
.text:00000E69                 lea     edi, [ebp+var_70]
.text:00000E6C                 mov     ecx, 19h
.text:00000E71                 mov     eax, 0CCCCCCCCh
.text:00000E76                 rep stosd
.text:00000E78                 mov     eax, dword ptr ds:___security_cookie
.text:00000E7D                 xor     eax, ebp
.text:00000E7F                 mov     [ebp+var_10], eax
.text:00000E82                 push    eax
.text:00000E83                 lea     eax, [ebp+var_C]
.text:00000E86                 mov     large fs:0, eax
.text:00000E8C                 mov     [ebp+var_5C], 0
.text:00000E93                 mov     [ebp+var_14], 0
.text:00000E9A                 mov     [ebp+var_18], 0
.text:00000EA1                 jmp     short loc_EAC
.text:00000EA3 ; ---------------------------------------------------------------------------
.text:00000EA3
.text:00000EA3 loc_EA3:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &):loc_EEEj
.text:00000EA3                 mov     eax, [ebp+var_18]
.text:00000EA6                 add     eax, 1
.text:00000EA9                 mov     [ebp+var_18], eax
.text:00000EAC
.text:00000EAC loc_EAC:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+4Dj
.text:00000EAC                 cmp     [ebp+var_18], 9
.text:00000EB0                 jnb     short loc_EF0
.text:00000EB2                 mov     ecx, [ebp+var_18]
.text:00000EB5                 mov     edx, _g_NamePairs[ecx*8]
.text:00000EBC                 xor     eax, eax
.text:00000EBE                 mov     ecx, [ebp+arg_4]
.text:00000EC1                 mov     [ebp+var_64], edx
.text:00000EC4                 mov     [ebp+var_60], eax
.text:00000EC7                 mov     [ebp+var_68], ecx
.text:00000ECA                 mov     edx, [ebp+var_68]
.text:00000ECD                 mov     eax, [ebp+var_64]
.text:00000ED0                 cmp     eax, [edx]
.text:00000ED2                 jnz     short loc_EEE
.text:00000ED4                 mov     ecx, [ebp+var_68]
.text:00000ED7                 mov     edx, [ebp+var_60]
.text:00000EDA                 cmp     edx, [ecx+4]
.text:00000EDD                 jnz     short loc_EEE
.text:00000EDF                 mov     eax, [ebp+var_18]
.text:00000EE2                 mov     ecx, off_4C[eax*8]
.text:00000EE9                 mov     [ebp+var_14], ecx
.text:00000EEC                 jmp     short loc_EF0
.text:00000EEE ; ---------------------------------------------------------------------------
.text:00000EEE
.text:00000EEE loc_EEE:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+7Ej
.text:00000EEE                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+89j
.text:00000EEE                 jmp     short loc_EA3
.text:00000EF0 ; ---------------------------------------------------------------------------
.text:00000EF0
.text:00000EF0 loc_EF0:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+5Cj
.text:00000EF0                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+98j
.text:00000EF0                 cmp     [ebp+var_14], 0
.text:00000EF4                 jnz     short loc_F0F
.text:00000EF6                 lea     edx, [ebp+var_3C]
.text:00000EF9                 push    edx             ; char *
.text:00000EFA                 mov     eax, [ebp+arg_4]
.text:00000EFD                 mov     ecx, [eax+4]
.text:00000F00                 push    ecx
.text:00000F01                 mov     edx, [eax]
.text:00000F03                 push    edx             ; unsigned __int64
.text:00000F04                 call    ?ConvertUInt64ToString@@YGX_KPAD@Z ; ConvertUInt64ToString(unsigned __int64,char *)
.text:00000F09                 lea     eax, [ebp+var_3C]
.text:00000F0C                 mov     [ebp+var_14], eax
.text:00000F0F
.text:00000F0F loc_F0F:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+A0j
.text:00000F0F                 mov     ecx, [ebp+var_14]
.text:00000F12                 push    ecx
.text:00000F13                 lea     ecx, [ebp+var_50]
.text:00000F16                 call    ??0AString@@QAE@PBD@Z ; AString::AString(char const *)
.text:00000F1B                 mov     [ebp+var_4], 1
.text:00000F22                 mov     edx, [ebp+arg_4]
.text:00000F25                 cmp     dword ptr [edx+8], 0
.text:00000F29                 jbe     loc_FE9
.text:00000F2F                 push    3Ah ; ':'
.text:00000F31                 lea     ecx, [ebp+var_50]
.text:00000F34                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000F39                 mov     eax, [ebp+arg_4]
.text:00000F3C                 mov     [ebp+var_6C], eax
.text:00000F3F                 mov     ecx, [ebp+var_6C]
.text:00000F42                 cmp     dword ptr [ecx], 21h ; '!'
.text:00000F45                 jnz     short loc_F6C
.text:00000F47                 mov     edx, [ebp+var_6C]
.text:00000F4A                 cmp     dword ptr [edx+4], 0
.text:00000F4E                 jnz     short loc_F6C
.text:00000F50                 mov     eax, [ebp+arg_4]
.text:00000F53                 cmp     dword ptr [eax+8], 1
.text:00000F57                 jnz     short loc_F6C
.text:00000F59                 mov     ecx, [ebp+arg_4]
.text:00000F5C                 movzx   edx, byte ptr [ecx+0Ch]
.text:00000F60                 push    edx
.text:00000F61                 lea     eax, [ebp+var_50]
.text:00000F64                 push    eax
.text:00000F65                 call    ?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::Lzma2PropToString(AString &,uint)
.text:00000F6A                 jmp     short loc_FE9
.text:00000F6C ; ---------------------------------------------------------------------------
.text:00000F6C
.text:00000F6C loc_F6C:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+F1j
.text:00000F6C                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+FAj ...
.text:00000F6C                 mov     ecx, [ebp+arg_4]
.text:00000F6F                 mov     [ebp+var_70], ecx
.text:00000F72                 mov     edx, [ebp+var_70]
.text:00000F75                 cmp     dword ptr [edx], 3
.text:00000F78                 jnz     short loc_FA2
.text:00000F7A                 mov     eax, [ebp+var_70]
.text:00000F7D                 cmp     dword ptr [eax+4], 0
.text:00000F81                 jnz     short loc_FA2
.text:00000F83                 mov     ecx, [ebp+arg_4]
.text:00000F86                 cmp     dword ptr [ecx+8], 1
.text:00000F8A                 jnz     short loc_FA2
.text:00000F8C                 mov     edx, [ebp+arg_4]
.text:00000F8F                 movzx   eax, byte ptr [edx+0Ch]
.text:00000F93                 add     eax, 1
.text:00000F96                 push    eax
.text:00000F97                 lea     ecx, [ebp+var_50]
.text:00000F9A                 push    ecx
.text:00000F9B                 call    ?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString(AString &,uint)
.text:00000FA0                 jmp     short loc_FE9
.text:00000FA2 ; ---------------------------------------------------------------------------
.text:00000FA2
.text:00000FA2 loc_FA2:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+124j
.text:00000FA2                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+12Dj ...
.text:00000FA2                 push    5Bh ; '['
.text:00000FA4                 lea     ecx, [ebp+var_50]
.text:00000FA7                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000FAC                 mov     [ebp+var_58], 0
.text:00000FB3                 jmp     short loc_FBE
.text:00000FB5 ; ---------------------------------------------------------------------------
.text:00000FB5
.text:00000FB5 loc_FB5:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+189j
.text:00000FB5                 mov     edx, [ebp+var_58]
.text:00000FB8                 add     edx, 1
.text:00000FBB                 mov     [ebp+var_58], edx
.text:00000FBE
.text:00000FBE loc_FBE:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+15Fj
.text:00000FBE                 mov     eax, [ebp+arg_4]
.text:00000FC1                 mov     ecx, [ebp+var_58]
.text:00000FC4                 cmp     ecx, [eax+8]
.text:00000FC7                 jnb     short loc_FDF
.text:00000FC9                 mov     edx, [ebp+arg_4]
.text:00000FCC                 add     edx, [ebp+var_58]
.text:00000FCF                 movzx   eax, byte ptr [edx+0Ch]
.text:00000FD3                 push    eax
.text:00000FD4                 lea     ecx, [ebp+var_50]
.text:00000FD7                 push    ecx
.text:00000FD8                 call    ?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z ; NArchive::NXz::AddHexToString(AString &,uchar)
.text:00000FDD                 jmp     short loc_FB5
.text:00000FDF ; ---------------------------------------------------------------------------
.text:00000FDF
.text:00000FDF loc_FDF:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+173j
.text:00000FDF                 push    5Dh ; ']'
.text:00000FE1                 lea     ecx, [ebp+var_50]
.text:00000FE4                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00000FE9
.text:00000FE9 loc_FE9:                                ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+D5j
.text:00000FE9                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+116j ...
.text:00000FE9                 lea     edx, [ebp+var_50]
.text:00000FEC                 push    edx
.text:00000FED                 mov     ecx, [ebp+arg_0]
.text:00000FF0                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00000FF5                 mov     eax, [ebp+var_5C]
.text:00000FF8                 or      eax, 1
.text:00000FFB                 mov     [ebp+var_5C], eax
.text:00000FFE                 mov     byte ptr [ebp+var_4], 0
.text:00001002                 lea     ecx, [ebp+var_50] ; this
.text:00001005                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000100A                 mov     eax, [ebp+arg_0]
.text:0000100D                 push    edx
.text:0000100E                 mov     ecx, ebp
.text:00001010                 push    eax
.text:00001011                 lea     edx, $LN23_0
.text:00001017                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000101C                 pop     eax
.text:0000101D                 pop     edx
.text:0000101E                 mov     ecx, [ebp+var_C]
.text:00001021                 mov     large fs:0, ecx
.text:00001028                 pop     ecx
.text:00001029                 pop     edi
.text:0000102A                 mov     ecx, [ebp+var_10]
.text:0000102D                 xor     ecx, ebp
.text:0000102F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001034                 add     esp, 70h
.text:00001037                 cmp     ebp, esp
.text:00001039                 call    __RTC_CheckEsp
.text:0000103E                 mov     esp, ebp
.text:00001040                 pop     ebp
.text:00001041                 retn    8
.text:00001041 ?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z endp
.text:00001041
.text:00001041 ; ---------------------------------------------------------------------------
.text:00001044 $LN23_0         dd 2                    ; DATA XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+1BDo
.text:00001048                 dd offset $LN22_0
.text:0000104C $LN22_0         dd 0FFFFFFC4h, 20h      ; DATA XREF: .text:00001048o
.text:00001054                 dd offset $LN19_1       ; "temp"
.text:00001058                 dd 0FFFFFFB0h, 0Ch
.text:00001060                 dd offset $LN20_1
.text:00001064 $LN20_1         db 73h, 0               ; DATA XREF: .text:00001060o
.text:00001066 $LN19_1         db 'temp',0             ; DATA XREF: .text:00001054o
.text:0000106B                 db 9 dup(0CCh)
.text:00001074
.text:00001074 ; =============== S U B R O U T I N E =======================================
.text:00001074
.text:00001074 ; Attributes: bp-based frame
.text:00001074
.text:00001074 ; void __stdcall NArchive::NXz::AddHexToString(class AString &, unsigned char)
.text:00001074 ?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z proc near
.text:00001074                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+184p
.text:00001074
.text:00001074 arg_0           = dword ptr  8
.text:00001074 arg_4           = byte ptr  0Ch
.text:00001074
.text:00001074                 push    ebp
.text:00001075                 mov     ebp, esp
.text:00001077                 movzx   eax, [ebp+arg_4]
.text:0000107B                 sar     eax, 4
.text:0000107E                 push    eax
.text:0000107F                 call    ?GetHex@NXz@NArchive@@YGDI@Z ; NArchive::NXz::GetHex(uint)
.text:00001084                 movzx   ecx, al
.text:00001087                 push    ecx
.text:00001088                 mov     ecx, [ebp+arg_0]
.text:0000108B                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:00001090                 movzx   edx, [ebp+arg_4]
.text:00001094                 and     edx, 0Fh
.text:00001097                 push    edx
.text:00001098                 call    ?GetHex@NXz@NArchive@@YGDI@Z ; NArchive::NXz::GetHex(uint)
.text:0000109D                 movzx   eax, al
.text:000010A0                 push    eax
.text:000010A1                 mov     ecx, [ebp+arg_0]
.text:000010A4                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000010A9                 cmp     ebp, esp
.text:000010AB                 call    __RTC_CheckEsp
.text:000010B0                 pop     ebp
.text:000010B1                 retn    8
.text:000010B1 ?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z endp
.text:000010B1
.text:000010B4
.text:000010B4 ; =============== S U B R O U T I N E =======================================
.text:000010B4
.text:000010B4 ; Attributes: bp-based frame
.text:000010B4
.text:000010B4 ; char __stdcall NArchive::NXz::GetHex(unsigned int)
.text:000010B4 ?GetHex@NXz@NArchive@@YGDI@Z proc near  ; CODE XREF: NArchive::NXz::AddHexToString(AString &,uchar)+Bp
.text:000010B4                                         ; NArchive::NXz::AddHexToString(AString &,uchar)+24p
.text:000010B4
.text:000010B4 var_4           = dword ptr -4
.text:000010B4 arg_0           = dword ptr  8
.text:000010B4
.text:000010B4                 push    ebp
.text:000010B5                 mov     ebp, esp
.text:000010B7                 push    ecx
.text:000010B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000010BF                 cmp     [ebp+arg_0], 0Ah
.text:000010C3                 jnb     short loc_10D0
.text:000010C5                 mov     eax, [ebp+arg_0]
.text:000010C8                 add     eax, 30h ; '0'
.text:000010CB                 mov     [ebp+var_4], eax
.text:000010CE                 jmp     short loc_10D9
.text:000010D0 ; ---------------------------------------------------------------------------
.text:000010D0
.text:000010D0 loc_10D0:                               ; CODE XREF: NArchive::NXz::GetHex(uint)+Fj
.text:000010D0                 mov     ecx, [ebp+arg_0]
.text:000010D3                 add     ecx, 37h ; '7'
.text:000010D6                 mov     [ebp+var_4], ecx
.text:000010D9
.text:000010D9 loc_10D9:                               ; CODE XREF: NArchive::NXz::GetHex(uint)+1Aj
.text:000010D9                 mov     al, byte ptr [ebp+var_4]
.text:000010DC                 mov     esp, ebp
.text:000010DE                 pop     ebp
.text:000010DF                 retn    4
.text:000010DF ?GetHex@NXz@NArchive@@YGDI@Z endp
.text:000010DF
.text:000010DF ; ---------------------------------------------------------------------------
.text:000010E2                 align 4
.text:000010E4
.text:000010E4 ; =============== S U B R O U T I N E =======================================
.text:000010E4
.text:000010E4 ; Attributes: bp-based frame
.text:000010E4
.text:000010E4 ; void __stdcall NArchive::NXz::AddUInt32ToString(class AString &, unsigned int)
.text:000010E4 ?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z proc near
.text:000010E4                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+147p
.text:000010E4                                         ; NArchive::NXz::Lzma2PropToString(AString &,uint)+62p ...
.text:000010E4
.text:000010E4 var_1C          = dword ptr -1Ch
.text:000010E4 var_18          = byte ptr -18h
.text:000010E4 var_14          = dword ptr -14h
.text:000010E4 var_10          = dword ptr -10h
.text:000010E4 var_C           = dword ptr -0Ch
.text:000010E4 var_8           = dword ptr -8
.text:000010E4 var_4           = dword ptr -4
.text:000010E4 arg_0           = dword ptr  8
.text:000010E4 arg_4           = dword ptr  0Ch
.text:000010E4
.text:000010E4                 push    ebp
.text:000010E5                 mov     ebp, esp
.text:000010E7                 sub     esp, 1Ch
.text:000010EA                 mov     eax, 0CCCCCCCCh
.text:000010EF                 mov     [ebp+var_1C], eax
.text:000010F2                 mov     dword ptr [ebp+var_18], eax
.text:000010F5                 mov     [ebp+var_14], eax
.text:000010F8                 mov     [ebp+var_10], eax
.text:000010FB                 mov     [ebp+var_C], eax
.text:000010FE                 mov     [ebp+var_8], eax
.text:00001101                 mov     [ebp+var_4], eax
.text:00001104                 mov     eax, dword ptr ds:___security_cookie
.text:00001109                 xor     eax, ebp
.text:0000110B                 mov     [ebp+var_4], eax
.text:0000110E                 lea     eax, [ebp+var_18]
.text:00001111                 push    eax             ; char *
.text:00001112                 mov     ecx, [ebp+arg_4]
.text:00001115                 push    ecx             ; unsigned int
.text:00001116                 call    ?ConvertUInt32ToString@@YGXIPAD@Z ; ConvertUInt32ToString(uint,char *)
.text:0000111B                 lea     edx, [ebp+var_18]
.text:0000111E                 push    edx
.text:0000111F                 mov     ecx, [ebp+arg_0]
.text:00001122                 call    ??YAString@@QAEAAV0@PBD@Z ; AString::operator+=(char const *)
.text:00001127                 push    edx
.text:00001128                 mov     ecx, ebp
.text:0000112A                 push    eax
.text:0000112B                 lea     edx, $LN5
.text:00001131                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001136                 pop     eax
.text:00001137                 pop     edx
.text:00001138                 mov     ecx, [ebp+var_4]
.text:0000113B                 xor     ecx, ebp
.text:0000113D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00001142                 add     esp, 1Ch
.text:00001145                 cmp     ebp, esp
.text:00001147                 call    __RTC_CheckEsp
.text:0000114C                 mov     esp, ebp
.text:0000114E                 pop     ebp
.text:0000114F                 retn    8
.text:0000114F ?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z endp
.text:0000114F
.text:0000114F ; ---------------------------------------------------------------------------
.text:00001152                 align 4
.text:00001154 $LN5            dd 1                    ; DATA XREF: NArchive::NXz::AddUInt32ToString(AString &,uint)+47o
.text:00001158                 dd offset $LN4
.text:0000115C $LN4            dd 0FFFFFFE8h, 10h      ; DATA XREF: .text:00001158o
.text:00001164                 dd offset $LN3          ; "temp"
.text:00001168 $LN3            db 'temp',0             ; DATA XREF: .text:00001164o
.text:0000116D                 db 7 dup(0CCh)
.text:00001174
.text:00001174 ; =============== S U B R O U T I N E =======================================
.text:00001174
.text:00001174 ; Attributes: bp-based frame
.text:00001174
.text:00001174 ; void __stdcall NArchive::NXz::Lzma2PropToString(class AString &, unsigned int)
.text:00001174 ?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z proc near
.text:00001174                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+111p
.text:00001174
.text:00001174 var_8           = dword ptr -8
.text:00001174 var_4           = dword ptr -4
.text:00001174 arg_0           = dword ptr  8
.text:00001174 arg_4           = dword ptr  0Ch
.text:00001174
.text:00001174                 push    ebp
.text:00001175                 mov     ebp, esp
.text:00001177                 sub     esp, 8
.text:0000117A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001181                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001188                 mov     byte ptr [ebp+var_4+3], 0
.text:0000118C                 mov     eax, [ebp+arg_4]
.text:0000118F                 and     eax, 1
.text:00001192                 jnz     short loc_11A1
.text:00001194                 mov     ecx, [ebp+arg_4]
.text:00001197                 shr     ecx, 1
.text:00001199                 add     ecx, 0Ch
.text:0000119C                 mov     [ebp+var_8], ecx
.text:0000119F                 jmp     short loc_11CE
.text:000011A1 ; ---------------------------------------------------------------------------
.text:000011A1
.text:000011A1 loc_11A1:                               ; CODE XREF: NArchive::NXz::Lzma2PropToString(AString &,uint)+1Ej
.text:000011A1                 mov     byte ptr [ebp+var_4+3], 6Bh ; 'k'
.text:000011A5                 mov     edx, [ebp+arg_4]
.text:000011A8                 and     edx, 1
.text:000011AB                 or      edx, 2
.text:000011AE                 mov     ecx, [ebp+arg_4]
.text:000011B1                 shr     ecx, 1
.text:000011B3                 add     ecx, 1
.text:000011B6                 shl     edx, cl
.text:000011B8                 mov     [ebp+var_8], edx
.text:000011BB                 cmp     [ebp+arg_4], 11h
.text:000011BF                 jbe     short loc_11CE
.text:000011C1                 mov     eax, [ebp+var_8]
.text:000011C4                 shr     eax, 0Ah
.text:000011C7                 mov     [ebp+var_8], eax
.text:000011CA                 mov     byte ptr [ebp+var_4+3], 6Dh ; 'm'
.text:000011CE
.text:000011CE loc_11CE:                               ; CODE XREF: NArchive::NXz::Lzma2PropToString(AString &,uint)+2Bj
.text:000011CE                                         ; NArchive::NXz::Lzma2PropToString(AString &,uint)+4Bj
.text:000011CE                 mov     ecx, [ebp+var_8]
.text:000011D1                 push    ecx
.text:000011D2                 mov     edx, [ebp+arg_0]
.text:000011D5                 push    edx
.text:000011D6                 call    ?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString(AString &,uint)
.text:000011DB                 movsx   eax, byte ptr [ebp+var_4+3]
.text:000011DF                 test    eax, eax
.text:000011E1                 jz      short loc_11F0
.text:000011E3                 movzx   ecx, byte ptr [ebp+var_4+3]
.text:000011E7                 push    ecx
.text:000011E8                 mov     ecx, [ebp+arg_0]
.text:000011EB                 call    ??YAString@@QAEAAV0@D@Z ; AString::operator+=(char)
.text:000011F0
.text:000011F0 loc_11F0:                               ; CODE XREF: NArchive::NXz::Lzma2PropToString(AString &,uint)+6Dj
.text:000011F0                 add     esp, 8
.text:000011F3                 cmp     ebp, esp
.text:000011F5                 call    __RTC_CheckEsp
.text:000011FA                 mov     esp, ebp
.text:000011FC                 pop     ebp
.text:000011FD                 retn    8
.text:000011FD ?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z endp
.text:000011FD
.text:000011FD ; ---------------------------------------------------------------------------
.text:00001200                 db 4 dup(0CCh)
.text:00001204
.text:00001204 ; =============== S U B R O U T I N E =======================================
.text:00001204
.text:00001204 ; Attributes: bp-based frame
.text:00001204
.text:00001204 ; int __stdcall NArchive::NXz::AddString(AString *, int)
.text:00001204 ?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z proc near
.text:00001204                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+143p
.text:00001204                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+36Bp ...
.text:00001204
.text:00001204 arg_0           = dword ptr  8
.text:00001204 arg_4           = dword ptr  0Ch
.text:00001204
.text:00001204                 push    ebp
.text:00001205                 mov     ebp, esp
.text:00001207                 mov     ecx, [ebp+arg_0] ; this
.text:0000120A                 call    ?Add_Space_if_NotEmpty@AString@@QAEXXZ ; AString::Add_Space_if_NotEmpty(void)
.text:0000120F                 mov     eax, [ebp+arg_4]
.text:00001212                 push    eax
.text:00001213                 mov     ecx, [ebp+arg_0]
.text:00001216                 call    ??YAString@@QAEAAV0@ABV0@@Z ; AString::operator+=(AString const &)
.text:0000121B                 cmp     ebp, esp
.text:0000121D                 call    __RTC_CheckEsp
.text:00001222                 pop     ebp
.text:00001223                 retn    8
.text:00001223 ?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z endp
.text:00001223
.text:00001223 ; ---------------------------------------------------------------------------
.text:00001226                 db 0Eh dup(0CCh)
.text:00001234
.text:00001234 ; =============== S U B R O U T I N E =======================================
.text:00001234
.text:00001234 ; Attributes: bp-based frame
.text:00001234
.text:00001234 ; class AString __stdcall NArchive::NXz::GetCheckString(struct CXzs const &)
.text:00001234 ?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z proc near
.text:00001234                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+33Fp
.text:00001234
.text:00001234 var_40          = dword ptr -40h
.text:00001234 var_38          = dword ptr -38h
.text:00001234 var_24          = byte ptr -24h
.text:00001234 var_14          = dword ptr -14h
.text:00001234 var_10          = dword ptr -10h
.text:00001234 var_C           = dword ptr -0Ch
.text:00001234 var_4           = dword ptr -4
.text:00001234 arg_0           = dword ptr  8
.text:00001234 arg_4           = dword ptr  0Ch
.text:00001234
.text:00001234                 push    ebp
.text:00001235                 mov     ebp, esp
.text:00001237                 push    0FFFFFFFFh
.text:00001239                 push    offset __ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
.text:0000123E                 mov     eax, large fs:0
.text:00001244                 push    eax
.text:00001245                 sub     esp, 34h
.text:00001248                 push    edi
.text:00001249                 lea     edi, [ebp+var_40]
.text:0000124C                 mov     ecx, 0Dh
.text:00001251                 mov     eax, 0CCCCCCCCh
.text:00001256                 rep stosd
.text:00001258                 mov     eax, dword ptr ds:___security_cookie
.text:0000125D                 xor     eax, ebp
.text:0000125F                 push    eax
.text:00001260                 lea     eax, [ebp+var_C]
.text:00001263                 mov     large fs:0, eax
.text:00001269                 mov     [ebp+var_40], 0
.text:00001270                 mov     [ebp+var_14], 0
.text:00001277                 mov     [ebp+var_10], 0
.text:0000127E                 jmp     short loc_1289
.text:00001280 ; ---------------------------------------------------------------------------
.text:00001280
.text:00001280 loc_1280:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+7Fj
.text:00001280                 mov     eax, [ebp+var_10]
.text:00001283                 add     eax, 1
.text:00001286                 mov     [ebp+var_10], eax
.text:00001289
.text:00001289 loc_1289:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+4Aj
.text:00001289                 mov     ecx, [ebp+arg_4]
.text:0000128C                 mov     edx, [ebp+var_10]
.text:0000128F                 cmp     edx, [ecx]
.text:00001291                 jnb     short loc_12B5
.text:00001293                 mov     eax, [ebp+var_10]
.text:00001296                 imul    eax, 18h
.text:00001299                 mov     ecx, [ebp+arg_4]
.text:0000129C                 mov     edx, [ecx+8]
.text:0000129F                 movzx   ecx, word ptr [edx+eax]
.text:000012A3                 and     ecx, 0Fh
.text:000012A6                 mov     eax, 1
.text:000012AB                 shl     eax, cl
.text:000012AD                 or      eax, [ebp+var_14]
.text:000012B0                 mov     [ebp+var_14], eax
.text:000012B3                 jmp     short loc_1280
.text:000012B5 ; ---------------------------------------------------------------------------
.text:000012B5
.text:000012B5 loc_12B5:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+5Dj
.text:000012B5                 lea     ecx, [ebp+var_24]
.text:000012B8                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000012BD                 mov     [ebp+var_4], 1
.text:000012C4                 mov     [ebp+var_10], 0
.text:000012CB                 jmp     short loc_12D6
.text:000012CD ; ---------------------------------------------------------------------------
.text:000012CD
.text:000012CD loc_12CD:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &):loc_134Aj
.text:000012CD                 mov     ecx, [ebp+var_10]
.text:000012D0                 add     ecx, 1
.text:000012D3                 mov     [ebp+var_10], ecx
.text:000012D6
.text:000012D6 loc_12D6:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+97j
.text:000012D6                 cmp     [ebp+var_10], 0Fh
.text:000012DA                 ja      short loc_134C
.text:000012DC                 mov     edx, [ebp+var_14]
.text:000012DF                 mov     ecx, [ebp+var_10]
.text:000012E2                 shr     edx, cl
.text:000012E4                 and     edx, 1
.text:000012E7                 jz      short loc_134A
.text:000012E9                 lea     ecx, [ebp+var_38]
.text:000012EC                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:000012F1                 mov     byte ptr [ebp+var_4], 2
.text:000012F5                 mov     eax, [ebp+var_10]
.text:000012F8                 cmp     _kChecks[eax*4], 0
.text:00001300                 jz      short loc_1317
.text:00001302                 mov     ecx, [ebp+var_10]
.text:00001305                 mov     edx, _kChecks[ecx*4]
.text:0000130C                 push    edx
.text:0000130D                 lea     ecx, [ebp+var_38]
.text:00001310                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001315                 jmp     short loc_1331
.text:00001317 ; ---------------------------------------------------------------------------
.text:00001317
.text:00001317 loc_1317:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+CCj
.text:00001317                 push    offset $SG70104 ; "Check-"
.text:0000131C                 lea     ecx, [ebp+var_38]
.text:0000131F                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:00001324                 mov     eax, [ebp+var_10]
.text:00001327                 push    eax
.text:00001328                 lea     ecx, [ebp+var_38]
.text:0000132B                 push    ecx
.text:0000132C                 call    ?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString(AString &,uint)
.text:00001331
.text:00001331 loc_1331:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+E1j
.text:00001331                 lea     edx, [ebp+var_38]
.text:00001334                 push    edx             ; int
.text:00001335                 lea     eax, [ebp+var_24]
.text:00001338                 push    eax             ; AString *
.text:00001339                 call    ?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString(AString &,AString const &)
.text:0000133E                 mov     byte ptr [ebp+var_4], 1
.text:00001342                 lea     ecx, [ebp+var_38] ; this
.text:00001345                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000134A
.text:0000134A loc_134A:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+B3j
.text:0000134A                 jmp     short loc_12CD
.text:0000134C ; ---------------------------------------------------------------------------
.text:0000134C
.text:0000134C loc_134C:                               ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+A6j
.text:0000134C                 lea     ecx, [ebp+var_24]
.text:0000134F                 push    ecx
.text:00001350                 mov     ecx, [ebp+arg_0]
.text:00001353                 call    ??0AString@@QAE@ABV0@@Z ; AString::AString(AString const &)
.text:00001358                 mov     edx, [ebp+var_40]
.text:0000135B                 or      edx, 1
.text:0000135E                 mov     [ebp+var_40], edx
.text:00001361                 mov     byte ptr [ebp+var_4], 0
.text:00001365                 lea     ecx, [ebp+var_24] ; this
.text:00001368                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:0000136D                 mov     eax, [ebp+arg_0]
.text:00001370                 push    edx
.text:00001371                 mov     ecx, ebp
.text:00001373                 push    eax
.text:00001374                 lea     edx, $LN20_2
.text:0000137A                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:0000137F                 pop     eax
.text:00001380                 pop     edx
.text:00001381                 mov     ecx, [ebp+var_C]
.text:00001384                 mov     large fs:0, ecx
.text:0000138B                 pop     ecx
.text:0000138C                 pop     edi
.text:0000138D                 add     esp, 40h
.text:00001390                 cmp     ebp, esp
.text:00001392                 call    __RTC_CheckEsp
.text:00001397                 mov     esp, ebp
.text:00001399                 pop     ebp
.text:0000139A                 retn    8
.text:0000139A ?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z endp
.text:0000139A
.text:0000139A ; ---------------------------------------------------------------------------
.text:0000139D                 align 10h
.text:000013A0 $LN20_2         dd 2                    ; DATA XREF: NArchive::NXz::GetCheckString(CXzs const &)+140o
.text:000013A4                 dd offset $LN19_2
.text:000013A8 $LN19_2         dd 0FFFFFFDCh, 0Ch      ; DATA XREF: .text:000013A4o
.text:000013B0                 dd offset $LN16_1
.text:000013B4                 dd 0FFFFFFC8h, 0Ch
.text:000013BC                 dd offset $LN17
.text:000013C0 $LN17           db 73h, 32h, 0          ; DATA XREF: .text:000013BCo
.text:000013C3 $LN16_1         db 73h                  ; DATA XREF: .text:000013B0o
.text:000013C4                 dd 0CCCCCC00h, 3 dup(0CCCCCCCCh)
.text:000013D4
.text:000013D4 ; =============== S U B R O U T I N E =======================================
.text:000013D4
.text:000013D4 ; Attributes: bp-based frame
.text:000013D4
.text:000013D4 ; long __stdcall NArchive::NXz::SRes_to_Open_HRESULT(int)
.text:000013D4 ?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z proc near
.text:000013D4                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+78p
.text:000013D4                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+392p
.text:000013D4
.text:000013D4 var_4           = dword ptr -4
.text:000013D4 arg_0           = dword ptr  8
.text:000013D4
.text:000013D4                 push    ebp
.text:000013D5                 mov     ebp, esp
.text:000013D7                 push    ecx
.text:000013D8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000013DF                 mov     eax, [ebp+arg_0]
.text:000013E2                 mov     [ebp+var_4], eax
.text:000013E5                 cmp     [ebp+var_4], 0
.text:000013E9                 jz      short loc_13F9
.text:000013EB                 cmp     [ebp+var_4], 2
.text:000013EF                 jz      short loc_13FD
.text:000013F1                 cmp     [ebp+var_4], 0Ah
.text:000013F5                 jz      short loc_1404
.text:000013F7                 jmp     short loc_140B
.text:000013F9 ; ---------------------------------------------------------------------------
.text:000013F9
.text:000013F9 loc_13F9:                               ; CODE XREF: NArchive::NXz::SRes_to_Open_HRESULT(int)+15j
.text:000013F9                 xor     eax, eax
.text:000013FB                 jmp     short loc_1410
.text:000013FD ; ---------------------------------------------------------------------------
.text:000013FD
.text:000013FD loc_13FD:                               ; CODE XREF: NArchive::NXz::SRes_to_Open_HRESULT(int)+1Bj
.text:000013FD                 mov     eax, 8007000Eh
.text:00001402                 jmp     short loc_1410
.text:00001404 ; ---------------------------------------------------------------------------
.text:00001404
.text:00001404 loc_1404:                               ; CODE XREF: NArchive::NXz::SRes_to_Open_HRESULT(int)+21j
.text:00001404                 mov     eax, 80004004h
.text:00001409                 jmp     short loc_1410
.text:0000140B ; ---------------------------------------------------------------------------
.text:0000140B
.text:0000140B loc_140B:                               ; CODE XREF: NArchive::NXz::SRes_to_Open_HRESULT(int)+23j
.text:0000140B                 mov     eax, 1
.text:00001410
.text:00001410 loc_1410:                               ; CODE XREF: NArchive::NXz::SRes_to_Open_HRESULT(int)+27j
.text:00001410                                         ; NArchive::NXz::SRes_to_Open_HRESULT(int)+2Ej ...
.text:00001410                 mov     esp, ebp
.text:00001412                 pop     ebp
.text:00001413                 retn    4
.text:00001413 ?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z endp
.text:00001413
.text:00001413 ; ---------------------------------------------------------------------------
.text:00001416                 db 0Eh dup(0CCh)
.text:00001424
.text:00001424 ; =============== S U B R O U T I N E =======================================
.text:00001424
.text:00001424 ; Attributes: bp-based frame
.text:00001424
.text:00001424 ; __int32 __cdecl NArchive::NXz::CHandler::Open(NArchive::NXz::CHandler *this, struct IInStream *, const unsigned __int64 *, struct IArchiveOpenCallback *)
.text:00001424                 public ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:00001424 ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text:00001424                                         ; DATA XREF: .rdata:00003650o
.text:00001424
.text:00001424 var_18          = dword ptr -18h
.text:00001424 var_14          = dword ptr -14h
.text:00001424 var_10          = dword ptr -10h
.text:00001424 var_C           = dword ptr -0Ch
.text:00001424 var_4           = dword ptr -4
.text:00001424 this            = dword ptr  8
.text:00001424 arg_4           = dword ptr  0Ch
.text:00001424 arg_C           = dword ptr  14h
.text:00001424
.text:00001424 ; FUNCTION CHUNK AT .text:000014BA SIZE 0000001E BYTES
.text:00001424
.text:00001424                 push    ebp
.text:00001425                 mov     ebp, esp
.text:00001427                 push    0FFFFFFFFh
.text:00001429                 push    offset __ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:0000142E                 mov     eax, large fs:0
.text:00001434                 push    eax
.text:00001435                 push    ecx
.text:00001436                 sub     esp, 8
.text:00001439                 push    ebx
.text:0000143A                 push    esi
.text:0000143B                 push    edi
.text:0000143C                 mov     [ebp+var_18], 0CCCCCCCCh
.text:00001443                 mov     [ebp+var_14], 0CCCCCCCCh
.text:0000144A                 mov     eax, dword ptr ds:___security_cookie
.text:0000144F                 xor     eax, ebp
.text:00001451                 push    eax
.text:00001452                 lea     eax, [ebp+var_C]
.text:00001455                 mov     large fs:0, eax
.text:0000145B                 mov     [ebp+var_10], esp
.text:0000145E                 mov     [ebp+var_4], 0
.text:00001465                 mov     esi, esp
.text:00001467                 mov     eax, [ebp+this]
.text:0000146A                 push    eax
.text:0000146B                 mov     ecx, [ebp+this]
.text:0000146E                 mov     edx, [ecx]
.text:00001470                 mov     eax, [edx+10h]
.text:00001473                 call    eax
.text:00001475                 cmp     esi, esp
.text:00001477                 call    __RTC_CheckEsp
.text:0000147C                 mov     ecx, [ebp+arg_C]
.text:0000147F                 push    ecx             ; struct IArchiveOpenCallback *
.text:00001480                 mov     edx, [ebp+arg_4]
.text:00001483                 push    edx             ; struct IInStream *
.text:00001484                 mov     ecx, [ebp+this] ; this
.text:00001487                 call    ?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)
.text:0000148C                 mov     [ebp+var_18], eax
.text:0000148F                 mov     eax, [ebp+var_18]
.text:00001492                 jmp     short loc_14BA
.text:00001492 ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text:00001492
.text:00001494
.text:00001494 ; =============== S U B R O U T I N E =======================================
.text:00001494
.text:00001494
.text:00001494 __catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 proc near
.text:00001494                                         ; DATA XREF: .xdata$x:00003834o
.text:00001494                 mov     dword ptr [ebp-14h], 8007000Eh
.text:0000149B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000014A2                 mov     eax, offset $LN7
.text:000014A7                 retn
.text:000014A7 __catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0 endp
.text:000014A7
.text:000014A8 ; ---------------------------------------------------------------------------
.text:000014A8                 mov     eax, offset __tryend$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
.text:000014AD                 retn
.text:000014AE ; ---------------------------------------------------------------------------
.text:000014AE
.text:000014AE __tryend$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
.text:000014AE                                         ; DATA XREF: .text:000014A8o
.text:000014AE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000014B5                 jmp     short loc_14BA
.text:000014B7 ; ---------------------------------------------------------------------------
.text:000014B7
.text:000014B7 $LN7:                                   ; DATA XREF: __catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0+Eo
.text:000014B7                 mov     eax, [ebp-14h]
.text:000014BA ; START OF FUNCTION CHUNK FOR ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000014BA
.text:000014BA loc_14BA:                               ; CODE XREF: NArchive::NXz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+6Ej
.text:000014BA                                         ; .text:000014B5j
.text:000014BA                 mov     ecx, [ebp+var_C]
.text:000014BD                 mov     large fs:0, ecx
.text:000014C4                 pop     ecx
.text:000014C5                 pop     edi
.text:000014C6                 pop     esi
.text:000014C7                 pop     ebx
.text:000014C8                 add     esp, 18h
.text:000014CB                 cmp     ebp, esp
.text:000014CD                 call    __RTC_CheckEsp
.text:000014D2                 mov     esp, ebp
.text:000014D4                 pop     ebp
.text:000014D5                 retn    10h
.text:000014D5 ; END OF FUNCTION CHUNK FOR ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text:000014D5 ; ---------------------------------------------------------------------------
.text:000014D8                 db 0Ch dup(0CCh)
.text:000014E4
.text:000014E4 ; =============== S U B R O U T I N E =======================================
.text:000014E4
.text:000014E4 ; Attributes: bp-based frame
.text:000014E4
.text:000014E4 ; __int32 __stdcall NArchive::NXz::CHandler::OpenSeq(NArchive::NXz::CHandler *this, struct ISequentialInStream *)
.text:000014E4                 public ?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z
.text:000014E4 ?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z proc near
.text:000014E4                                         ; DATA XREF: .rdata:0000363Co
.text:000014E4
.text:000014E4 this            = dword ptr  8
.text:000014E4 arg_4           = dword ptr  0Ch
.text:000014E4
.text:000014E4                 push    ebp
.text:000014E5                 mov     ebp, esp
.text:000014E7                 push    esi
.text:000014E8                 mov     eax, [ebp+this]
.text:000014EB                 sub     eax, 4
.text:000014EE                 mov     ecx, [ebp+this]
.text:000014F1                 mov     edx, [ecx-4]
.text:000014F4                 mov     esi, esp
.text:000014F6                 push    eax
.text:000014F7                 mov     eax, [edx+10h]
.text:000014FA                 call    eax
.text:000014FC                 cmp     esi, esp
.text:000014FE                 call    __RTC_CheckEsp
.text:00001503                 mov     ecx, [ebp+arg_4]
.text:00001506                 push    ecx
.text:00001507                 mov     ecx, [ebp+this]
.text:0000150A                 add     ecx, 9Ch ; '£'
.text:00001510                 call    ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)
.text:00001515                 mov     edx, [ebp+this]
.text:00001518                 mov     byte ptr [edx+94h], 1
.text:0000151F                 mov     eax, [ebp+this]
.text:00001522                 mov     byte ptr [eax+95h], 0
.text:00001529                 xor     eax, eax
.text:0000152B                 pop     esi
.text:0000152C                 cmp     ebp, esp
.text:0000152E                 call    __RTC_CheckEsp
.text:00001533                 pop     ebp
.text:00001534                 retn    8
.text:00001534 ?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z endp
.text:00001534
.text:00001534 ; ---------------------------------------------------------------------------
.text:00001537                 db 0Dh dup(0CCh)
.text:00001544
.text:00001544 ; =============== S U B R O U T I N E =======================================
.text:00001544
.text:00001544 ; Attributes: bp-based frame
.text:00001544
.text:00001544 ; __int32 __stdcall NArchive::NXz::CHandler::Close(NArchive::NXz::CHandler *this)
.text:00001544                 public ?Close@CHandler@NXz@NArchive@@UAGJXZ
.text:00001544 ?Close@CHandler@NXz@NArchive@@UAGJXZ proc near ; DATA XREF: .rdata:00003654o
.text:00001544
.text:00001544 this            = dword ptr  8
.text:00001544
.text:00001544                 push    ebp
.text:00001545                 mov     ebp, esp
.text:00001547                 mov     ecx, [ebp+this]
.text:0000154A                 add     ecx, 60h ; '`'  ; this
.text:0000154D                 call    ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ ; NArchive::NXz::CStatInfo::Clear(void)
.text:00001552                 mov     eax, [ebp+this]
.text:00001555                 mov     byte ptr [eax+98h], 0
.text:0000155C                 mov     ecx, [ebp+this]
.text:0000155F                 mov     byte ptr [ecx+99h], 0
.text:00001566                 mov     edx, [ebp+this]
.text:00001569                 mov     byte ptr [edx+9Ah], 0
.text:00001570                 mov     ecx, [ebp+this]
.text:00001573                 add     ecx, 0A8h ; '¿' ; this
.text:00001579                 call    ?Empty@AString@@QAEXXZ ; AString::Empty(void)
.text:0000157E                 mov     ecx, [ebp+this]
.text:00001581                 add     ecx, 9Ch ; '£'
.text:00001587                 call    ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release(void)
.text:0000158C                 mov     ecx, [ebp+this]
.text:0000158F                 add     ecx, 0A0h ; 'á'
.text:00001595                 call    ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release(void)
.text:0000159A                 xor     eax, eax
.text:0000159C                 cmp     ebp, esp
.text:0000159E                 call    __RTC_CheckEsp
.text:000015A3                 pop     ebp
.text:000015A4                 retn    4
.text:000015A4 ?Close@CHandler@NXz@NArchive@@UAGJXZ endp
.text:000015A4
.text:000015A4 ; ---------------------------------------------------------------------------
.text:000015A7                 db 0Dh dup(0CCh)
.text:000015B4
.text:000015B4 ; =============== S U B R O U T I N E =======================================
.text:000015B4
.text:000015B4 ; Attributes: bp-based frame
.text:000015B4
.text:000015B4 ; __int32 __stdcall NArchive::NXz::CSeekToSeqStream::Read(NArchive::NXz::CSeekToSeqStream *this, void *, unsigned int, unsigned int *)
.text:000015B4                 public ?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z
.text:000015B4 ?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z proc near
.text:000015B4
.text:000015B4 var_4           = dword ptr -4
.text:000015B4 this            = dword ptr  8
.text:000015B4 arg_4           = dword ptr  0Ch
.text:000015B4 arg_8           = dword ptr  10h
.text:000015B4 arg_C           = dword ptr  14h
.text:000015B4
.text:000015B4                 push    ebp
.text:000015B5                 mov     ebp, esp
.text:000015B7                 push    ecx
.text:000015B8                 push    esi
.text:000015B9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000015C0                 mov     ecx, [ebp+this]
.text:000015C3                 add     ecx, 8
.text:000015C6                 call    ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->(void)
.text:000015CB                 mov     [ebp+var_4], eax
.text:000015CE                 mov     esi, esp
.text:000015D0                 mov     eax, [ebp+arg_C]
.text:000015D3                 push    eax
.text:000015D4                 mov     ecx, [ebp+arg_8]
.text:000015D7                 push    ecx
.text:000015D8                 mov     edx, [ebp+arg_4]
.text:000015DB                 push    edx
.text:000015DC                 mov     eax, [ebp+var_4]
.text:000015DF                 push    eax
.text:000015E0                 mov     ecx, [ebp+var_4]
.text:000015E3                 mov     edx, [ecx]
.text:000015E5                 mov     eax, [edx+0Ch]
.text:000015E8                 call    eax
.text:000015EA                 cmp     esi, esp
.text:000015EC                 call    __RTC_CheckEsp
.text:000015F1                 pop     esi
.text:000015F2                 add     esp, 4
.text:000015F5                 cmp     ebp, esp
.text:000015F7                 call    __RTC_CheckEsp
.text:000015FC                 mov     esp, ebp
.text:000015FE                 pop     ebp
.text:000015FF                 retn    10h
.text:000015FF ?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z endp
.text:000015FF
.text:000015FF ; ---------------------------------------------------------------------------
.text:00001602                 align 4
.text:00001604
.text:00001604 ; =============== S U B R O U T I N E =======================================
.text:00001604
.text:00001604 ; Attributes: bp-based frame
.text:00001604
.text:00001604 ; __int32 __stdcall NArchive::NXz::CSeekToSeqStream::Seek(NArchive::NXz::CSeekToSeqStream *this, __int64, unsigned int, unsigned __int64 *)
.text:00001604                 public ?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z
.text:00001604 ?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z proc near
.text:00001604
.text:00001604 this            = dword ptr  8
.text:00001604
.text:00001604                 push    ebp
.text:00001605                 mov     ebp, esp
.text:00001607                 mov     eax, 80004001h
.text:0000160C                 pop     ebp
.text:0000160D                 retn    14h
.text:0000160D ?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z endp
.text:0000160D
.text:0000160D ; ---------------------------------------------------------------------------
.text:00001610                 db 4 dup(0CCh)
.text:00001614
.text:00001614 ; =============== S U B R O U T I N E =======================================
.text:00001614
.text:00001614 ; Attributes: bp-based frame
.text:00001614
.text:00001614 ; _DWORD __thiscall NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(NArchive::NXz::CXzUnpackerCPP *__hidden this)
.text:00001614                 public ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ
.text:00001614 ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ proc near
.text:00001614                                         ; CODE XREF: NArchive::NXz::CDecoder::CDecoder(void)+1Cp
.text:00001614
.text:00001614 var_4           = dword ptr -4
.text:00001614
.text:00001614                 push    ebp
.text:00001615                 mov     ebp, esp
.text:00001617                 push    ecx
.text:00001618                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000161F                 mov     [ebp+var_4], ecx
.text:00001622                 mov     eax, [ebp+var_4]
.text:00001625                 mov     dword ptr [eax], 0
.text:0000162B                 mov     ecx, [ebp+var_4]
.text:0000162E                 mov     dword ptr [ecx+4], 0
.text:00001635                 push    offset _g_Alloc
.text:0000163A                 mov     edx, [ebp+var_4]
.text:0000163D                 add     edx, 8
.text:00001640                 push    edx
.text:00001641                 call    _XzUnpacker_Construct@8 ; XzUnpacker_Construct(x,x)
.text:00001646                 mov     eax, [ebp+var_4]
.text:00001649                 add     esp, 4
.text:0000164C                 cmp     ebp, esp
.text:0000164E                 call    __RTC_CheckEsp
.text:00001653                 mov     esp, ebp
.text:00001655                 pop     ebp
.text:00001656                 retn
.text:00001656 ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ endp
.text:00001656
.text:00001656 ; ---------------------------------------------------------------------------
.text:00001657                 db 0Dh dup(0CCh)
.text:00001664
.text:00001664 ; =============== S U B R O U T I N E =======================================
.text:00001664
.text:00001664 ; Attributes: bp-based frame
.text:00001664
.text:00001664 ; _DWORD __thiscall NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(NArchive::NXz::CXzUnpackerCPP *__hidden this)
.text:00001664                 public ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ
.text:00001664 ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ proc near
.text:00001664                                         ; CODE XREF: NArchive::NXz::CDecoder::~CDecoder(void)+14p
.text:00001664
.text:00001664 var_4           = dword ptr -4
.text:00001664
.text:00001664                 push    ebp
.text:00001665                 mov     ebp, esp
.text:00001667                 push    ecx
.text:00001668                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000166F                 mov     [ebp+var_4], ecx
.text:00001672                 mov     eax, [ebp+var_4]
.text:00001675                 add     eax, 8
.text:00001678                 push    eax
.text:00001679                 call    _XzUnpacker_Free@4 ; XzUnpacker_Free(x)
.text:0000167E                 mov     ecx, [ebp+var_4]
.text:00001681                 mov     edx, [ecx]
.text:00001683                 push    edx
.text:00001684                 call    _MyFree@4       ; MyFree(x)
.text:00001689                 mov     eax, [ebp+var_4]
.text:0000168C                 mov     ecx, [eax+4]
.text:0000168F                 push    ecx
.text:00001690                 call    _MyFree@4       ; MyFree(x)
.text:00001695                 add     esp, 4
.text:00001698                 cmp     ebp, esp
.text:0000169A                 call    __RTC_CheckEsp
.text:0000169F                 mov     esp, ebp
.text:000016A1                 pop     ebp
.text:000016A2                 retn
.text:000016A2 ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ endp
.text:000016A2
.text:000016A2 ; ---------------------------------------------------------------------------
.text:000016A3                 align 4
.text:000016A4
.text:000016A4 ; =============== S U B R O U T I N E =======================================
.text:000016A4
.text:000016A4 ; Attributes: bp-based frame
.text:000016A4
.text:000016A4 ; __int32 __thiscall NArchive::NXz::CDecoder::Decode(NArchive::NXz::CDecoder *this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
.text:000016A4                 public ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
.text:000016A4 ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z proc near
.text:000016A4                                         ; CODE XREF: NArchive::NXz::CHandler::Decode2(ISequentialInStream *,ISequentialOutStream *,NArchive::NXz::CDecoder &,ICompressProgressInfo *)+28p
.text:000016A4
.text:000016A4 var_70          = dword ptr -70h
.text:000016A4 var_6C          = dword ptr -6Ch
.text:000016A4 var_68          = dword ptr -68h
.text:000016A4 var_64          = dword ptr -64h
.text:000016A4 var_60          = dword ptr -60h
.text:000016A4 var_5C          = dword ptr -5Ch
.text:000016A4 var_58          = dword ptr -58h
.text:000016A4 var_54          = dword ptr -54h
.text:000016A4 var_4D          = byte ptr -4Dh
.text:000016A4 var_4C          = dword ptr -4Ch
.text:000016A4 var_44          = dword ptr -44h
.text:000016A4 var_38          = dword ptr -38h
.text:000016A4 var_2C          = dword ptr -2Ch
.text:000016A4 var_24          = dword ptr -24h
.text:000016A4 var_20          = dword ptr -20h
.text:000016A4 var_1C          = dword ptr -1Ch
.text:000016A4 var_14          = dword ptr -14h
.text:000016A4 var_C           = dword ptr -0Ch
.text:000016A4 var_8           = dword ptr -8
.text:000016A4 var_4           = dword ptr -4
.text:000016A4 arg_0           = dword ptr  8
.text:000016A4 arg_4           = dword ptr  0Ch
.text:000016A4 arg_8           = dword ptr  10h
.text:000016A4
.text:000016A4                 push    ebp
.text:000016A5                 mov     ebp, esp
.text:000016A7                 sub     esp, 70h
.text:000016AA                 push    esi
.text:000016AB                 push    edi
.text:000016AC                 push    ecx
.text:000016AD                 lea     edi, [ebp+var_70]
.text:000016B0                 mov     ecx, 1Ch
.text:000016B5                 mov     eax, 0CCCCCCCCh
.text:000016BA                 rep stosd
.text:000016BC                 pop     ecx
.text:000016BD                 mov     [ebp+var_4], ecx
.text:000016C0                 mov     [ebp+var_8], 8000h
.text:000016C7                 mov     [ebp+var_C], 200000h
.text:000016CE                 mov     ecx, [ebp+var_4] ; this
.text:000016D1                 call    ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ ; NArchive::NXz::CStatInfo::Clear(void)
.text:000016D6                 mov     eax, [ebp+var_4]
.text:000016D9                 mov     dword ptr [eax+6E0h], 0
.text:000016E3                 mov     ecx, [ebp+var_4]
.text:000016E6                 add     ecx, 40h ; '@'
.text:000016E9                 push    ecx
.text:000016EA                 call    _XzUnpacker_Init@4 ; XzUnpacker_Init(x)
.text:000016EF                 mov     edx, [ebp+var_4]
.text:000016F2                 cmp     dword ptr [edx+38h], 0
.text:000016F6                 jnz     short loc_1708
.text:000016F8                 push    8000h
.text:000016FD                 call    _MyAlloc@4      ; MyAlloc(x)
.text:00001702                 mov     ecx, [ebp+var_4]
.text:00001705                 mov     [ecx+38h], eax
.text:00001708
.text:00001708 loc_1708:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+52j
.text:00001708                 mov     edx, [ebp+var_4]
.text:0000170B                 cmp     dword ptr [edx+3Ch], 0
.text:0000170F                 jnz     short loc_1721
.text:00001711                 push    200000h
.text:00001716                 call    _MyAlloc@4      ; MyAlloc(x)
.text:0000171B                 mov     ecx, [ebp+var_4]
.text:0000171E                 mov     [ecx+3Ch], eax
.text:00001721
.text:00001721 loc_1721:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+6Bj
.text:00001721                 mov     [ebp+var_14], 0
.text:00001728                 mov     [ebp+var_1C], 0
.text:0000172F                 mov     [ebp+var_20], 0
.text:00001736
.text:00001736 loc_1736:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_1A64j
.text:00001736                 mov     edx, [ebp+var_1C]
.text:00001739                 cmp     edx, [ebp+var_14]
.text:0000173C                 jnz     short loc_1783
.text:0000173E                 mov     [ebp+var_14], 0
.text:00001745                 mov     eax, [ebp+var_14]
.text:00001748                 mov     [ebp+var_1C], eax
.text:0000174B                 mov     esi, esp
.text:0000174D                 lea     ecx, [ebp+var_14]
.text:00001750                 push    ecx
.text:00001751                 push    8000h
.text:00001756                 mov     edx, [ebp+var_4]
.text:00001759                 mov     eax, [edx+38h]
.text:0000175C                 push    eax
.text:0000175D                 mov     ecx, [ebp+arg_0]
.text:00001760                 mov     edx, [ecx]
.text:00001762                 mov     eax, [ebp+arg_0]
.text:00001765                 push    eax
.text:00001766                 mov     ecx, [edx+0Ch]
.text:00001769                 call    ecx
.text:0000176B                 cmp     esi, esp
.text:0000176D                 call    __RTC_CheckEsp
.text:00001772                 mov     [ebp+var_24], eax
.text:00001775                 cmp     [ebp+var_24], 0
.text:00001779                 jz      short loc_1783
.text:0000177B                 mov     eax, [ebp+var_24]
.text:0000177E                 jmp     loc_1A6B
.text:00001783 ; ---------------------------------------------------------------------------
.text:00001783
.text:00001783 loc_1783:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+98j
.text:00001783                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+D5j
.text:00001783                 mov     edx, [ebp+var_14]
.text:00001786                 sub     edx, [ebp+var_1C]
.text:00001789                 mov     [ebp+var_2C], edx
.text:0000178C                 mov     eax, 200000h
.text:00001791                 sub     eax, [ebp+var_20]
.text:00001794                 mov     [ebp+var_38], eax
.text:00001797                 lea     ecx, [ebp+var_44]
.text:0000179A                 push    ecx
.text:0000179B                 xor     edx, edx
.text:0000179D                 cmp     [ebp+var_14], 0
.text:000017A1                 setz    dl
.text:000017A4                 push    edx
.text:000017A5                 lea     eax, [ebp+var_2C]
.text:000017A8                 push    eax
.text:000017A9                 mov     ecx, [ebp+var_4]
.text:000017AC                 mov     edx, [ecx+38h]
.text:000017AF                 add     edx, [ebp+var_1C]
.text:000017B2                 push    edx
.text:000017B3                 lea     eax, [ebp+var_38]
.text:000017B6                 push    eax
.text:000017B7                 mov     ecx, [ebp+var_4]
.text:000017BA                 mov     edx, [ecx+3Ch]
.text:000017BD                 add     edx, [ebp+var_20]
.text:000017C0                 push    edx
.text:000017C1                 mov     eax, [ebp+var_4]
.text:000017C4                 add     eax, 40h ; '@'
.text:000017C7                 push    eax
.text:000017C8                 call    _XzUnpacker_Code@28 ; XzUnpacker_Code(x,x,x,x,x,x,x)
.text:000017CD                 mov     [ebp+var_4C], eax
.text:000017D0                 mov     ecx, [ebp+var_1C]
.text:000017D3                 add     ecx, [ebp+var_2C]
.text:000017D6                 mov     [ebp+var_1C], ecx
.text:000017D9                 mov     edx, [ebp+var_20]
.text:000017DC                 add     edx, [ebp+var_38]
.text:000017DF                 mov     [ebp+var_20], edx
.text:000017E2                 mov     eax, [ebp+var_2C]
.text:000017E5                 xor     ecx, ecx
.text:000017E7                 mov     edx, [ebp+var_4]
.text:000017EA                 add     eax, [edx]
.text:000017EC                 adc     ecx, [edx+4]
.text:000017EF                 mov     edx, [ebp+var_4]
.text:000017F2                 mov     [edx], eax
.text:000017F4                 mov     [edx+4], ecx
.text:000017F7                 mov     eax, [ebp+var_38]
.text:000017FA                 xor     ecx, ecx
.text:000017FC                 mov     edx, [ebp+var_4]
.text:000017FF                 add     eax, [edx+8]
.text:00001802                 adc     ecx, [edx+0Ch]
.text:00001805                 mov     edx, [ebp+var_4]
.text:00001808                 mov     [edx+8], eax
.text:0000180B                 mov     [edx+0Ch], ecx
.text:0000180E                 mov     eax, [ebp+var_4]
.text:00001811                 mov     ecx, [ebp+var_4C]
.text:00001814                 mov     [eax+6E0h], ecx
.text:0000181A                 cmp     [ebp+var_2C], 0
.text:0000181E                 jnz     short loc_1826
.text:00001820                 cmp     [ebp+var_38], 0
.text:00001824                 jz      short loc_1835
.text:00001826
.text:00001826 loc_1826:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+17Aj
.text:00001826                 cmp     [ebp+var_4C], 0
.text:0000182A                 jnz     short loc_1835
.text:0000182C                 mov     [ebp+var_64], 0
.text:00001833                 jmp     short loc_183C
.text:00001835 ; ---------------------------------------------------------------------------
.text:00001835
.text:00001835 loc_1835:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+180j
.text:00001835                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+186j
.text:00001835                 mov     [ebp+var_64], 1
.text:0000183C
.text:0000183C loc_183C:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+18Fj
.text:0000183C                 mov     dl, byte ptr [ebp+var_64]
.text:0000183F                 mov     [ebp+var_4D], dl
.text:00001842                 cmp     [ebp+arg_4], 0
.text:00001846                 jz      short loc_188D
.text:00001848                 cmp     [ebp+var_20], 200000h
.text:0000184F                 jz      short loc_1859
.text:00001851                 movzx   eax, [ebp+var_4D]
.text:00001855                 test    eax, eax
.text:00001857                 jz      short loc_188B
.text:00001859
.text:00001859 loc_1859:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1ABj
.text:00001859                 cmp     [ebp+var_20], 0
.text:0000185D                 jz      short loc_188B
.text:0000185F                 mov     ecx, [ebp+var_20]
.text:00001862                 push    ecx             ; unsigned int
.text:00001863                 mov     edx, [ebp+var_4]
.text:00001866                 mov     eax, [edx+3Ch]
.text:00001869                 push    eax             ; void *
.text:0000186A                 mov     ecx, [ebp+arg_4]
.text:0000186D                 push    ecx             ; struct ISequentialOutStream *
.text:0000186E                 call    ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream(ISequentialOutStream *,void const *,uint)
.text:00001873                 mov     [ebp+var_54], eax
.text:00001876                 cmp     [ebp+var_54], 0
.text:0000187A                 jz      short loc_1884
.text:0000187C                 mov     eax, [ebp+var_54]
.text:0000187F                 jmp     loc_1A6B
.text:00001884 ; ---------------------------------------------------------------------------
.text:00001884
.text:00001884 loc_1884:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1D6j
.text:00001884                 mov     [ebp+var_20], 0
.text:0000188B
.text:0000188B loc_188B:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1B3j
.text:0000188B                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1B9j
.text:0000188B                 jmp     short loc_1894
.text:0000188D ; ---------------------------------------------------------------------------
.text:0000188D
.text:0000188D loc_188D:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1A2j
.text:0000188D                 mov     [ebp+var_20], 0
.text:00001894
.text:00001894 loc_1894:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_188Bj
.text:00001894                 cmp     [ebp+arg_8], 0
.text:00001898                 jz      short loc_18CD
.text:0000189A                 mov     edx, [ebp+var_4]
.text:0000189D                 add     edx, 8
.text:000018A0                 mov     esi, esp
.text:000018A2                 push    edx
.text:000018A3                 mov     eax, [ebp+var_4]
.text:000018A6                 push    eax
.text:000018A7                 mov     ecx, [ebp+arg_8]
.text:000018AA                 mov     edx, [ecx]
.text:000018AC                 mov     eax, [ebp+arg_8]
.text:000018AF                 push    eax
.text:000018B0                 mov     ecx, [edx+0Ch]
.text:000018B3                 call    ecx
.text:000018B5                 cmp     esi, esp
.text:000018B7                 call    __RTC_CheckEsp
.text:000018BC                 mov     [ebp+var_58], eax
.text:000018BF                 cmp     [ebp+var_58], 0
.text:000018C3                 jz      short loc_18CD
.text:000018C5                 mov     eax, [ebp+var_58]
.text:000018C8                 jmp     loc_1A6B
.text:000018CD ; ---------------------------------------------------------------------------
.text:000018CD
.text:000018CD loc_18CD:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1F4j
.text:000018CD                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+21Fj
.text:000018CD                 movzx   edx, [ebp+var_4D]
.text:000018D1                 test    edx, edx
.text:000018D3                 jz      loc_1A64
.text:000018D9                 mov     eax, [ebp+var_4]
.text:000018DC                 mov     ecx, [ebp+var_4]
.text:000018DF                 mov     edx, [ecx]
.text:000018E1                 mov     [eax+10h], edx
.text:000018E4                 mov     ecx, [ecx+4]
.text:000018E7                 mov     [eax+14h], ecx
.text:000018EA                 mov     edx, [ebp+var_4]
.text:000018ED                 mov     eax, [ebp+var_4]
.text:000018F0                 mov     ecx, [eax+88h]
.text:000018F6                 mov     [edx+18h], ecx
.text:000018F9                 mov     eax, [eax+8Ch]
.text:000018FF                 mov     [edx+1Ch], eax
.text:00001902                 mov     ecx, [ebp+var_4]
.text:00001905                 mov     [ebp+var_68], ecx
.text:00001908                 mov     edx, [ebp+var_68]
.text:0000190B                 cmp     dword ptr [edx+1Ch], 0
.text:0000190F                 ja      short loc_191A
.text:00001911                 mov     eax, [ebp+var_68]
.text:00001914                 cmp     dword ptr [eax+18h], 0
.text:00001918                 jbe     short loc_1921
.text:0000191A
.text:0000191A loc_191A:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+26Bj
.text:0000191A                 mov     ecx, [ebp+var_4]
.text:0000191D                 mov     byte ptr [ecx+2Bh], 1
.text:00001921
.text:00001921 loc_1921:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+274j
.text:00001921                 mov     edx, [ebp+var_4]
.text:00001924                 mov     eax, [ebp+var_4]
.text:00001927                 mov     ecx, [eax+98h]
.text:0000192D                 mov     [edx+20h], ecx
.text:00001930                 mov     eax, [eax+9Ch]
.text:00001936                 mov     [edx+24h], eax
.text:00001939                 mov     ecx, [ebp+var_4]
.text:0000193C                 mov     byte ptr [ecx+28h], 1
.text:00001940                 mov     edx, [ebp+var_4]
.text:00001943                 mov     byte ptr [edx+29h], 1
.text:00001947                 mov     eax, [ebp+var_4]
.text:0000194A                 mov     byte ptr [eax+2Ah], 1
.text:0000194E                 mov     ecx, [ebp+var_4]
.text:00001951                 add     ecx, 40h ; '@'
.text:00001954                 push    ecx
.text:00001955                 call    _XzUnpacker_GetExtraSize@4 ; XzUnpacker_GetExtraSize(x)
.text:0000195A                 mov     [ebp+var_60], eax
.text:0000195D                 mov     [ebp+var_5C], edx
.text:00001960                 cmp     [ebp+var_4C], 0
.text:00001964                 jnz     short loc_19A3
.text:00001966                 cmp     [ebp+var_44], 3
.text:0000196A                 jnz     short loc_199A
.text:0000196C                 mov     [ebp+var_60], 0
.text:00001973                 mov     [ebp+var_5C], 0
.text:0000197A                 mov     edx, [ebp+var_4]
.text:0000197D                 add     edx, 40h ; '@'
.text:00001980                 push    edx
.text:00001981                 call    _XzUnpacker_IsStreamWasFinished@4 ; XzUnpacker_IsStreamWasFinished(x)
.text:00001986                 test    eax, eax
.text:00001988                 jnz     short loc_1998
.text:0000198A                 mov     eax, [ebp+var_4]
.text:0000198D                 mov     byte ptr [eax+2Ch], 1
.text:00001991                 mov     [ebp+var_4C], 1
.text:00001998
.text:00001998 loc_1998:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2E4j
.text:00001998                 jmp     short loc_19A1
.text:0000199A ; ---------------------------------------------------------------------------
.text:0000199A
.text:0000199A loc_199A:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2C6j
.text:0000199A                 mov     [ebp+var_4C], 1
.text:000019A1
.text:000019A1 loc_19A1:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_1998j
.text:000019A1                 jmp     short loc_19EB
.text:000019A3 ; ---------------------------------------------------------------------------
.text:000019A3
.text:000019A3 loc_19A3:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2C0j
.text:000019A3                 cmp     [ebp+var_4C], 11h
.text:000019A7                 jnz     short loc_19EB
.text:000019A9                 mov     ecx, [ebp+var_4]
.text:000019AC                 mov     [ebp+var_6C], ecx
.text:000019AF                 mov     edx, [ebp+var_6C]
.text:000019B2                 mov     eax, [edx]
.text:000019B4                 cmp     eax, [ebp+var_60]
.text:000019B7                 jnz     short loc_19CD
.text:000019B9                 mov     ecx, [ebp+var_6C]
.text:000019BC                 mov     edx, [ecx+4]
.text:000019BF                 cmp     edx, [ebp+var_5C]
.text:000019C2                 jnz     short loc_19CD
.text:000019C4                 mov     eax, [ebp+var_4]
.text:000019C7                 mov     byte ptr [eax+2Bh], 0
.text:000019CB                 jmp     short loc_19EB
.text:000019CD ; ---------------------------------------------------------------------------
.text:000019CD
.text:000019CD loc_19CD:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+313j
.text:000019CD                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+31Ej
.text:000019CD                 mov     ecx, [ebp+var_60]
.text:000019D0                 or      ecx, [ebp+var_5C]
.text:000019D3                 jnz     short loc_19DD
.text:000019D5                 mov     edx, [ebp+var_1C]
.text:000019D8                 cmp     edx, [ebp+var_14]
.text:000019DB                 jz      short loc_19EB
.text:000019DD
.text:000019DD loc_19DD:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+32Fj
.text:000019DD                 mov     eax, [ebp+var_4]
.text:000019E0                 mov     byte ptr [eax+2Dh], 1
.text:000019E4                 mov     [ebp+var_4C], 0
.text:000019EB
.text:000019EB loc_19EB:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_19A1j
.text:000019EB                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+303j ...
.text:000019EB                 mov     ecx, [ebp+var_4]
.text:000019EE                 mov     edx, [ebp+var_4C]
.text:000019F1                 mov     [ecx+6E0h], edx
.text:000019F7                 mov     eax, [ebp+var_4]
.text:000019FA                 mov     ecx, [eax+10h]
.text:000019FD                 sub     ecx, [ebp+var_60]
.text:00001A00                 mov     edx, [eax+14h]
.text:00001A03                 sbb     edx, [ebp+var_5C]
.text:00001A06                 mov     eax, [ebp+var_4]
.text:00001A09                 mov     [eax+10h], ecx
.text:00001A0C                 mov     [eax+14h], edx
.text:00001A0F                 mov     ecx, [ebp+var_4C]
.text:00001A12                 mov     [ebp+var_70], ecx
.text:00001A15                 cmp     [ebp+var_70], 11h ; switch 18 cases
.text:00001A19                 ja      short $LN1      ; jumptable 00001A25 default case
.text:00001A1B                 mov     edx, [ebp+var_70]
.text:00001A1E                 movzx   eax, ds:$LN42[edx]
.text:00001A25                 jmp     ds:$LN49[eax*4] ; switch jump
.text:00001A2C ; ---------------------------------------------------------------------------
.text:00001A2C
.text:00001A2C $LN7_0:                                 ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A2C                                         ; DATA XREF: .text:$LN49o
.text:00001A2C                 jmp     short loc_1A62  ; jumptable 00001A25 case 0
.text:00001A2E ; ---------------------------------------------------------------------------
.text:00001A2E
.text:00001A2E $LN6:                                   ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A2E                                         ; DATA XREF: .text:$LN49o
.text:00001A2E                 mov     ecx, [ebp+var_4] ; jumptable 00001A25 case 17
.text:00001A31                 mov     byte ptr [ecx+2Bh], 0
.text:00001A35                 jmp     short loc_1A62
.text:00001A37 ; ---------------------------------------------------------------------------
.text:00001A37
.text:00001A37 $LN5_0:                                 ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A37                                         ; DATA XREF: .text:$LN49o
.text:00001A37                 mov     edx, [ebp+var_4] ; jumptable 00001A25 case 16
.text:00001A3A                 mov     byte ptr [edx+2Fh], 1
.text:00001A3E                 jmp     short loc_1A62
.text:00001A40 ; ---------------------------------------------------------------------------
.text:00001A40
.text:00001A40 $LN4_0:                                 ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A40                                         ; DATA XREF: .text:$LN49o
.text:00001A40                 mov     eax, [ebp+var_4] ; jumptable 00001A25 case 4
.text:00001A43                 mov     byte ptr [eax+2Eh], 1
.text:00001A47                 jmp     short loc_1A62
.text:00001A49 ; ---------------------------------------------------------------------------
.text:00001A49
.text:00001A49 $LN3_0:                                 ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A49                                         ; DATA XREF: .text:$LN49o
.text:00001A49                 mov     ecx, [ebp+var_4] ; jumptable 00001A25 case 3
.text:00001A4C                 mov     byte ptr [ecx+31h], 1
.text:00001A50                 jmp     short loc_1A62
.text:00001A52 ; ---------------------------------------------------------------------------
.text:00001A52
.text:00001A52 $LN2:                                   ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A52                                         ; DATA XREF: .text:$LN49o
.text:00001A52                 mov     edx, [ebp+var_4] ; jumptable 00001A25 case 1
.text:00001A55                 mov     byte ptr [edx+30h], 1
.text:00001A59                 jmp     short loc_1A62
.text:00001A5B ; ---------------------------------------------------------------------------
.text:00001A5B
.text:00001A5B $LN1:                                   ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+375j
.text:00001A5B                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381j
.text:00001A5B                                         ; DATA XREF: ...
.text:00001A5B                 mov     eax, [ebp+var_4] ; jumptable 00001A25 default case
.text:00001A5E                 mov     byte ptr [eax+30h], 1
.text:00001A62
.text:00001A62 loc_1A62:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):$LN7_0j
.text:00001A62                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+391j ...
.text:00001A62                 jmp     short loc_1A69
.text:00001A64 ; ---------------------------------------------------------------------------
.text:00001A64
.text:00001A64 loc_1A64:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+22Fj
.text:00001A64                 jmp     loc_1736
.text:00001A69 ; ---------------------------------------------------------------------------
.text:00001A69
.text:00001A69 loc_1A69:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *):loc_1A62j
.text:00001A69                 xor     eax, eax
.text:00001A6B
.text:00001A6B loc_1A6B:                               ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+DAj
.text:00001A6B                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1DBj ...
.text:00001A6B                 push    edx
.text:00001A6C                 mov     ecx, ebp
.text:00001A6E                 push    eax
.text:00001A6F                 lea     edx, $LN48
.text:00001A75                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00001A7A                 pop     eax
.text:00001A7B                 pop     edx
.text:00001A7C                 pop     edi
.text:00001A7D                 pop     esi
.text:00001A7E                 add     esp, 70h
.text:00001A81                 cmp     ebp, esp
.text:00001A83                 call    __RTC_CheckEsp
.text:00001A88                 mov     esp, ebp
.text:00001A8A                 pop     ebp
.text:00001A8B                 retn    0Ch
.text:00001A8B ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z endp
.text:00001A8B
.text:00001A8B ; ---------------------------------------------------------------------------
.text:00001A8E                 align 10h
.text:00001A90 $LN48           dd 4                    ; DATA XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+3CBo
.text:00001A94                 dd offset $LN47
.text:00001A98 $LN47           dd 0FFFFFFECh, 4        ; DATA XREF: .text:00001A94o
.text:00001AA0                 dd offset $LN43         ; "inSize"
.text:00001AA4                 dd 0FFFFFFD4h, 4
.text:00001AAC                 dd offset $LN44         ; "inLen"
.text:00001AB0                 dd 0FFFFFFC8h, 4
.text:00001AB8                 dd offset $LN45         ; "outLen"
.text:00001ABC                 dd 0FFFFFFBCh, 4
.text:00001AC4                 dd offset $LN46         ; "status"
.text:00001AC8 $LN46           db 'status',0           ; DATA XREF: .text:00001AC4o
.text:00001ACF $LN45           db 'outLen',0           ; DATA XREF: .text:00001AB8o
.text:00001AD6 $LN44           db 'inLen',0            ; DATA XREF: .text:00001AACo
.text:00001ADC $LN43           db 'inSize',0           ; DATA XREF: .text:00001AA0o
.text:00001AE3                 align 4
.text:00001AE4 $LN49           dd offset $LN7_0        ; DATA XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+381r
.text:00001AE4                 dd offset $LN2          ; jump table for switch statement
.text:00001AE4                 dd offset $LN3_0
.text:00001AE4                 dd offset $LN4_0
.text:00001AE4                 dd offset $LN5_0
.text:00001AE4                 dd offset $LN6
.text:00001AE4                 dd offset $LN1
.text:00001B00 $LN42           db      0,     1,     6,     2
.text:00001B00                                         ; DATA XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+37Ar
.text:00001B00                 db      3,     6,     6,     6 ; indirect table for switch statement
.text:00001B00                 db      6,     6,     6,     6
.text:00001B00                 db      6,     6,     6,     6
.text:00001B00                 db      4,     5
.text:00001B12                 align 4
.text:00001B14
.text:00001B14 ; =============== S U B R O U T I N E =======================================
.text:00001B14
.text:00001B14 ; Attributes: bp-based frame
.text:00001B14
.text:00001B14 ; int __thiscall NArchive::NXz::CDecoder::Get_Extract_OperationResult(NArchive::NXz::CDecoder *__hidden this)
.text:00001B14                 public ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ
.text:00001B14 ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ proc near
.text:00001B14                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+40Dp
.text:00001B14
.text:00001B14 var_8           = dword ptr -8
.text:00001B14 var_4           = dword ptr -4
.text:00001B14
.text:00001B14                 push    ebp
.text:00001B15                 mov     ebp, esp
.text:00001B17                 sub     esp, 8
.text:00001B1A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00001B21                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00001B28                 mov     [ebp+var_4], ecx
.text:00001B2B                 mov     eax, [ebp+var_4]
.text:00001B2E                 movzx   ecx, byte ptr [eax+2Bh]
.text:00001B32                 test    ecx, ecx
.text:00001B34                 jnz     short loc_1B42
.text:00001B36                 mov     [ebp+var_8], 7
.text:00001B3D                 jmp     loc_1BD9
.text:00001B42 ; ---------------------------------------------------------------------------
.text:00001B42
.text:00001B42 loc_1B42:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+20j
.text:00001B42                 mov     edx, [ebp+var_4]
.text:00001B45                 movzx   eax, byte ptr [edx+2Ch]
.text:00001B49                 test    eax, eax
.text:00001B4B                 jz      short loc_1B59
.text:00001B4D                 mov     [ebp+var_8], 5
.text:00001B54                 jmp     loc_1BD9
.text:00001B59 ; ---------------------------------------------------------------------------
.text:00001B59
.text:00001B59 loc_1B59:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+37j
.text:00001B59                 mov     ecx, [ebp+var_4]
.text:00001B5C                 movzx   edx, byte ptr [ecx+2Dh]
.text:00001B60                 test    edx, edx
.text:00001B62                 jz      short loc_1B6D
.text:00001B64                 mov     [ebp+var_8], 6
.text:00001B6B                 jmp     short loc_1BD9
.text:00001B6D ; ---------------------------------------------------------------------------
.text:00001B6D
.text:00001B6D loc_1B6D:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+4Ej
.text:00001B6D                 mov     eax, [ebp+var_4]
.text:00001B70                 movzx   ecx, byte ptr [eax+31h]
.text:00001B74                 test    ecx, ecx
.text:00001B76                 jz      short loc_1B81
.text:00001B78                 mov     [ebp+var_8], 3
.text:00001B7F                 jmp     short loc_1BD9
.text:00001B81 ; ---------------------------------------------------------------------------
.text:00001B81
.text:00001B81 loc_1B81:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+62j
.text:00001B81                 mov     edx, [ebp+var_4]
.text:00001B84                 movzx   eax, byte ptr [edx+2Eh]
.text:00001B88                 test    eax, eax
.text:00001B8A                 jz      short loc_1B95
.text:00001B8C                 mov     [ebp+var_8], 1
.text:00001B93                 jmp     short loc_1BD9
.text:00001B95 ; ---------------------------------------------------------------------------
.text:00001B95
.text:00001B95 loc_1B95:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+76j
.text:00001B95                 mov     ecx, [ebp+var_4]
.text:00001B98                 movzx   edx, byte ptr [ecx+2Fh]
.text:00001B9C                 test    edx, edx
.text:00001B9E                 jz      short loc_1BA9
.text:00001BA0                 mov     [ebp+var_8], 2
.text:00001BA7                 jmp     short loc_1BD9
.text:00001BA9 ; ---------------------------------------------------------------------------
.text:00001BA9
.text:00001BA9 loc_1BA9:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+8Aj
.text:00001BA9                 mov     eax, [ebp+var_4]
.text:00001BAC                 movzx   ecx, byte ptr [eax+30h]
.text:00001BB0                 test    ecx, ecx
.text:00001BB2                 jz      short loc_1BBD
.text:00001BB4                 mov     [ebp+var_8], 2
.text:00001BBB                 jmp     short loc_1BD9
.text:00001BBD ; ---------------------------------------------------------------------------
.text:00001BBD
.text:00001BBD loc_1BBD:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+9Ej
.text:00001BBD                 mov     edx, [ebp+var_4]
.text:00001BC0                 cmp     dword ptr [edx+6E0h], 0
.text:00001BC7                 jz      short loc_1BD2
.text:00001BC9                 mov     [ebp+var_8], 2
.text:00001BD0                 jmp     short loc_1BD9
.text:00001BD2 ; ---------------------------------------------------------------------------
.text:00001BD2
.text:00001BD2 loc_1BD2:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+B3j
.text:00001BD2                 mov     [ebp+var_8], 0
.text:00001BD9
.text:00001BD9 loc_1BD9:                               ; CODE XREF: NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+29j
.text:00001BD9                                         ; NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)+40j ...
.text:00001BD9                 mov     eax, [ebp+var_8]
.text:00001BDC                 mov     esp, ebp
.text:00001BDE                 pop     ebp
.text:00001BDF                 retn
.text:00001BDF ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ endp
.text:00001BDF
.text:00001BDF ; ---------------------------------------------------------------------------
.text:00001BE0                 db 4 dup(0CCh)
.text:00001BE4
.text:00001BE4 ; =============== S U B R O U T I N E =======================================
.text:00001BE4
.text:00001BE4 ; Attributes: bp-based frame
.text:00001BE4
.text:00001BE4 ; __int32 __cdecl NArchive::NXz::CHandler::Extract(NArchive::NXz::CHandler *this, const unsigned int *, unsigned int, int, struct IArchiveExtractCallback *)
.text:00001BE4                 public ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001BE4 ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text:00001BE4                                         ; DATA XREF: .rdata:00003660o
.text:00001BE4
.text:00001BE4 var_7B8         = dword ptr -7B8h
.text:00001BE4 var_7B4         = dword ptr -7B4h
.text:00001BE4 var_7B0         = dword ptr -7B0h
.text:00001BE4 var_7AC         = dword ptr -7ACh
.text:00001BE4 var_7A8         = dword ptr -7A8h
.text:00001BE4 var_7A4         = dword ptr -7A4h
.text:00001BE4 var_7A0         = dword ptr -7A0h
.text:00001BE4 var_79C         = dword ptr -79Ch
.text:00001BE4 var_798         = dword ptr -798h
.text:00001BE4 var_794         = dword ptr -794h
.text:00001BE4 var_78D         = byte ptr -78Dh
.text:00001BE4 var_78C         = dword ptr -78Ch
.text:00001BE4 var_788         = dword ptr -788h
.text:00001BE4 var_784         = dword ptr -784h
.text:00001BE4 var_77D         = byte ptr -77Dh
.text:00001BE4 var_77C         = dword ptr -77Ch
.text:00001BE4 var_778         = dword ptr -778h
.text:00001BE4 var_774         = dword ptr -774h
.text:00001BE4 var_770         = dword ptr -770h
.text:00001BE4 var_768         = dword ptr -768h
.text:00001BE4 var_764         = dword ptr -764h
.text:00001BE4 var_760         = dword ptr -760h
.text:00001BE4 var_75C         = dword ptr -75Ch
.text:00001BE4 var_758         = dword ptr -758h
.text:00001BE4 var_754         = dword ptr -754h
.text:00001BE4 var_750         = dword ptr -750h
.text:00001BE4 var_74C         = dword ptr -74Ch
.text:00001BE4 var_748         = dword ptr -748h
.text:00001BE4 var_744         = dword ptr -744h
.text:00001BE4 var_73C         = byte ptr -73Ch
.text:00001BE4 var_50          = dword ptr -50h
.text:00001BE4 var_48          = byte ptr -48h
.text:00001BE4 var_40          = dword ptr -40h
.text:00001BE4 var_3C          = dword ptr -3Ch
.text:00001BE4 var_38          = dword ptr -38h
.text:00001BE4 var_30          = byte ptr -30h
.text:00001BE4 var_28          = dword ptr -28h
.text:00001BE4 var_20          = dword ptr -20h
.text:00001BE4 var_1C          = dword ptr -1Ch
.text:00001BE4 var_14          = dword ptr -14h
.text:00001BE4 var_10          = dword ptr -10h
.text:00001BE4 var_C           = dword ptr -0Ch
.text:00001BE4 var_4           = dword ptr -4
.text:00001BE4 this            = dword ptr  8
.text:00001BE4 arg_4           = dword ptr  0Ch
.text:00001BE4 arg_8           = dword ptr  10h
.text:00001BE4 arg_C           = dword ptr  14h
.text:00001BE4 arg_10          = dword ptr  18h
.text:00001BE4
.text:00001BE4 ; FUNCTION CHUNK AT .text:0000209B SIZE 0000003C BYTES
.text:00001BE4
.text:00001BE4                 push    ebp
.text:00001BE5                 mov     ebp, esp
.text:00001BE7                 push    0FFFFFFFFh
.text:00001BE9                 push    offset __ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:00001BEE                 mov     eax, large fs:0
.text:00001BF4                 push    eax
.text:00001BF5                 push    ecx
.text:00001BF6                 sub     esp, 7A8h
.text:00001BFC                 push    ebx
.text:00001BFD                 push    esi
.text:00001BFE                 push    edi
.text:00001BFF                 lea     edi, [ebp+var_7B8]
.text:00001C05                 mov     ecx, 1EAh
.text:00001C0A                 mov     eax, 0CCCCCCCCh
.text:00001C0F                 rep stosd
.text:00001C11                 mov     eax, dword ptr ds:___security_cookie
.text:00001C16                 xor     eax, ebp
.text:00001C18                 mov     [ebp+var_14], eax
.text:00001C1B                 push    eax
.text:00001C1C                 lea     eax, [ebp+var_C]
.text:00001C1F                 mov     large fs:0, eax
.text:00001C25                 mov     [ebp+var_10], esp
.text:00001C28                 mov     [ebp+var_4], 0
.text:00001C2F                 cmp     [ebp+arg_8], 0
.text:00001C33                 jnz     short loc_1C3C
.text:00001C35                 xor     eax, eax
.text:00001C37                 jmp     loc_209B
.text:00001C3C ; ---------------------------------------------------------------------------
.text:00001C3C
.text:00001C3C loc_1C3C:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4Fj
.text:00001C3C                 cmp     [ebp+arg_8], 0FFFFFFFFh
.text:00001C40                 jz      short loc_1C5A
.text:00001C42                 cmp     [ebp+arg_8], 1
.text:00001C46                 jnz     short loc_1C50
.text:00001C48                 mov     eax, [ebp+arg_4]
.text:00001C4B                 cmp     dword ptr [eax], 0
.text:00001C4E                 jz      short loc_1C5A
.text:00001C50
.text:00001C50 loc_1C50:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+62j
.text:00001C50                 mov     eax, 80070057h
.text:00001C55                 jmp     loc_209B
.text:00001C5A ; ---------------------------------------------------------------------------
.text:00001C5A
.text:00001C5A loc_1C5A:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5Cj
.text:00001C5A                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+6Aj
.text:00001C5A                 mov     ecx, [ebp+this]
.text:00001C5D                 movzx   edx, byte ptr [ecx+9Ah]
.text:00001C64                 test    edx, edx
.text:00001C66                 jz      short loc_1C8A
.text:00001C68                 mov     esi, esp
.text:00001C6A                 mov     eax, [ebp+this]
.text:00001C6D                 mov     ecx, [eax+74h]
.text:00001C70                 push    ecx
.text:00001C71                 mov     edx, [eax+70h]
.text:00001C74                 push    edx
.text:00001C75                 mov     eax, [ebp+arg_10]
.text:00001C78                 push    eax
.text:00001C79                 mov     ecx, [ebp+arg_10]
.text:00001C7C                 mov     edx, [ecx]
.text:00001C7E                 mov     eax, [edx+0Ch]
.text:00001C81                 call    eax
.text:00001C83                 cmp     esi, esp
.text:00001C85                 call    __RTC_CheckEsp
.text:00001C8A
.text:00001C8A loc_1C8A:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+82j
.text:00001C8A                 mov     [ebp+var_20], 0
.text:00001C91                 mov     [ebp+var_1C], 0
.text:00001C98                 mov     esi, esp
.text:00001C9A                 lea     ecx, [ebp+var_20]
.text:00001C9D                 push    ecx
.text:00001C9E                 mov     edx, [ebp+arg_10]
.text:00001CA1                 push    edx
.text:00001CA2                 mov     eax, [ebp+arg_10]
.text:00001CA5                 mov     ecx, [eax]
.text:00001CA7                 mov     edx, [ecx+10h]
.text:00001CAA                 call    edx
.text:00001CAC                 cmp     esi, esp
.text:00001CAE                 call    __RTC_CheckEsp
.text:00001CB3                 mov     [ebp+var_770], eax
.text:00001CB9                 mov     eax, [ebp+var_770]
.text:00001CBF                 mov     [ebp+var_28], eax
.text:00001CC2                 cmp     [ebp+var_28], 0
.text:00001CC6                 jz      short loc_1CD0
.text:00001CC8                 mov     eax, [ebp+var_28]
.text:00001CCB                 jmp     loc_209B
.text:00001CD0 ; ---------------------------------------------------------------------------
.text:00001CD0
.text:00001CD0 loc_1CD0:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+E2j
.text:00001CD0                 lea     ecx, [ebp+var_30]
.text:00001CD3                 call    ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>(void)
.text:00001CD8                 mov     [ebp+var_774], eax
.text:00001CDE                 mov     byte ptr [ebp+var_4], 1
.text:00001CE2                 xor     ecx, ecx
.text:00001CE4                 cmp     [ebp+arg_C], 0
.text:00001CE8                 setnz   cl
.text:00001CEB                 mov     [ebp+var_38], ecx
.text:00001CEE                 lea     ecx, [ebp+var_30]
.text:00001CF1                 call    ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&(void)
.text:00001CF6                 mov     [ebp+var_778], eax
.text:00001CFC                 mov     esi, esp
.text:00001CFE                 mov     edx, [ebp+var_38]
.text:00001D01                 push    edx
.text:00001D02                 mov     eax, [ebp+var_778]
.text:00001D08                 push    eax
.text:00001D09                 push    0
.text:00001D0B                 mov     ecx, [ebp+arg_10]
.text:00001D0E                 push    ecx
.text:00001D0F                 mov     edx, [ebp+arg_10]
.text:00001D12                 mov     eax, [edx]
.text:00001D14                 mov     ecx, [eax+14h]
.text:00001D17                 call    ecx
.text:00001D19                 cmp     esi, esp
.text:00001D1B                 call    __RTC_CheckEsp
.text:00001D20                 mov     [ebp+var_77C], eax
.text:00001D26                 mov     edx, [ebp+var_77C]
.text:00001D2C                 mov     [ebp+var_3C], edx
.text:00001D2F                 cmp     [ebp+var_3C], 0
.text:00001D33                 jz      short loc_1D55
.text:00001D35                 mov     eax, [ebp+var_3C]
.text:00001D38                 mov     [ebp+var_74C], eax
.text:00001D3E                 mov     byte ptr [ebp+var_4], 0
.text:00001D42                 lea     ecx, [ebp+var_30]
.text:00001D45                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001D4A                 mov     eax, [ebp+var_74C]
.text:00001D50                 jmp     loc_209B
.text:00001D55 ; ---------------------------------------------------------------------------
.text:00001D55
.text:00001D55 loc_1D55:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+14Fj
.text:00001D55                 cmp     [ebp+arg_C], 0
.text:00001D59                 jnz     short loc_1D95
.text:00001D5B                 lea     ecx, [ebp+var_30]
.text:00001D5E                 call    ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!(void)
.text:00001D63                 mov     [ebp+var_77D], al
.text:00001D69                 movzx   ecx, [ebp+var_77D]
.text:00001D70                 test    ecx, ecx
.text:00001D72                 jz      short loc_1D95
.text:00001D74                 mov     [ebp+var_750], 0
.text:00001D7E                 mov     byte ptr [ebp+var_4], 0
.text:00001D82                 lea     ecx, [ebp+var_30]
.text:00001D85                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001D8A                 mov     eax, [ebp+var_750]
.text:00001D90                 jmp     loc_209B
.text:00001D95 ; ---------------------------------------------------------------------------
.text:00001D95
.text:00001D95 loc_1D95:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+175j
.text:00001D95                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+18Ej
.text:00001D95                 mov     esi, esp
.text:00001D97                 mov     edx, [ebp+var_38]
.text:00001D9A                 push    edx
.text:00001D9B                 mov     eax, [ebp+arg_10]
.text:00001D9E                 push    eax
.text:00001D9F                 mov     ecx, [ebp+arg_10]
.text:00001DA2                 mov     edx, [ecx]
.text:00001DA4                 mov     eax, [edx+18h]
.text:00001DA7                 call    eax
.text:00001DA9                 cmp     esi, esp
.text:00001DAB                 call    __RTC_CheckEsp
.text:00001DB0                 push    38h ; '8'       ; unsigned int
.text:00001DB2                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00001DB7                 add     esp, 4
.text:00001DBA                 mov     [ebp+var_784], eax
.text:00001DC0                 mov     ecx, [ebp+var_784]
.text:00001DC6                 mov     [ebp+var_758], ecx
.text:00001DCC                 mov     byte ptr [ebp+var_4], 2
.text:00001DD0                 cmp     [ebp+var_758], 0
.text:00001DD7                 jz      short loc_1DF8
.text:00001DD9                 mov     ecx, [ebp+var_758]
.text:00001DDF                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00001DE4                 mov     [ebp+var_788], eax
.text:00001DEA                 mov     edx, [ebp+var_788]
.text:00001DF0                 mov     [ebp+var_78C], edx
.text:00001DF6                 jmp     short loc_1E02
.text:00001DF8 ; ---------------------------------------------------------------------------
.text:00001DF8
.text:00001DF8 loc_1DF8:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1F3j
.text:00001DF8                 mov     [ebp+var_78C], 0
.text:00001E02
.text:00001E02 loc_1E02:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+212j
.text:00001E02                 mov     eax, [ebp+var_78C]
.text:00001E08                 mov     [ebp+var_754], eax
.text:00001E0E                 mov     byte ptr [ebp+var_4], 1
.text:00001E12                 mov     ecx, [ebp+var_754]
.text:00001E18                 mov     [ebp+var_40], ecx
.text:00001E1B                 mov     edx, [ebp+var_40]
.text:00001E1E                 push    edx
.text:00001E1F                 lea     ecx, [ebp+var_48]
.text:00001E22                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00001E27                 mov     byte ptr [ebp+var_4], 3
.text:00001E2B                 push    1               ; bool
.text:00001E2D                 mov     eax, [ebp+arg_10]
.text:00001E30                 push    eax             ; struct IProgress *
.text:00001E31                 mov     ecx, [ebp+var_40] ; this
.text:00001E34                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00001E39                 mov     ecx, [ebp+this]
.text:00001E3C                 movzx   edx, byte ptr [ecx+99h]
.text:00001E43                 test    edx, edx
.text:00001E45                 jz      loc_1F1F
.text:00001E4B                 mov     ecx, [ebp+this]
.text:00001E4E                 add     ecx, 9Ch ; '£'
.text:00001E54                 call    ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ; CMyComPtr<IInStream>::operator!(void)
.text:00001E59                 mov     [ebp+var_78D], al
.text:00001E5F                 movzx   eax, [ebp+var_78D]
.text:00001E66                 test    eax, eax
.text:00001E68                 jz      short loc_1E97
.text:00001E6A                 mov     [ebp+var_75C], 80004005h
.text:00001E74                 mov     byte ptr [ebp+var_4], 1
.text:00001E78                 lea     ecx, [ebp+var_48]
.text:00001E7B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001E80                 mov     byte ptr [ebp+var_4], 0
.text:00001E84                 lea     ecx, [ebp+var_30]
.text:00001E87                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001E8C                 mov     eax, [ebp+var_75C]
.text:00001E92                 jmp     loc_209B
.text:00001E97 ; ---------------------------------------------------------------------------
.text:00001E97
.text:00001E97 loc_1E97:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+284j
.text:00001E97                 mov     ecx, [ebp+this]
.text:00001E9A                 add     ecx, 9Ch ; '£'
.text:00001EA0                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00001EA5                 mov     [ebp+var_794], eax
.text:00001EAB                 mov     ecx, [ebp+var_794]
.text:00001EB1                 mov     [ebp+var_798], ecx
.text:00001EB7                 mov     esi, esp
.text:00001EB9                 push    0
.text:00001EBB                 push    0
.text:00001EBD                 push    0
.text:00001EBF                 push    0
.text:00001EC1                 mov     edx, [ebp+var_798]
.text:00001EC7                 push    edx
.text:00001EC8                 mov     eax, [ebp+var_798]
.text:00001ECE                 mov     ecx, [eax]
.text:00001ED0                 mov     edx, [ecx+10h]
.text:00001ED3                 call    edx
.text:00001ED5                 cmp     esi, esp
.text:00001ED7                 call    __RTC_CheckEsp
.text:00001EDC                 mov     [ebp+var_79C], eax
.text:00001EE2                 mov     eax, [ebp+var_79C]
.text:00001EE8                 mov     [ebp+var_50], eax
.text:00001EEB                 cmp     [ebp+var_50], 0
.text:00001EEF                 jz      short loc_1F1D
.text:00001EF1                 mov     ecx, [ebp+var_50]
.text:00001EF4                 mov     [ebp+var_760], ecx
.text:00001EFA                 mov     byte ptr [ebp+var_4], 1
.text:00001EFE                 lea     ecx, [ebp+var_48]
.text:00001F01                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001F06                 mov     byte ptr [ebp+var_4], 0
.text:00001F0A                 lea     ecx, [ebp+var_30]
.text:00001F0D                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001F12                 mov     eax, [ebp+var_760]
.text:00001F18                 jmp     loc_209B
.text:00001F1D ; ---------------------------------------------------------------------------
.text:00001F1D
.text:00001F1D loc_1F1D:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+30Bj
.text:00001F1D                 jmp     short loc_1F29
.text:00001F1F ; ---------------------------------------------------------------------------
.text:00001F1F
.text:00001F1F loc_1F1F:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+261j
.text:00001F1F                 mov     edx, [ebp+this]
.text:00001F22                 mov     byte ptr [edx+99h], 1
.text:00001F29
.text:00001F29 loc_1F29:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *):loc_1F1Dj
.text:00001F29                 lea     ecx, [ebp+var_73C] ; this
.text:00001F2F                 call    ??0CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::CDecoder(void)
.text:00001F34                 mov     [ebp+var_7A0], eax
.text:00001F3A                 mov     byte ptr [ebp+var_4], 4
.text:00001F3E                 lea     ecx, [ebp+var_48]
.text:00001F41                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00001F46                 mov     [ebp+var_7A4], eax
.text:00001F4C                 lea     ecx, [ebp+var_30]
.text:00001F4F                 call    ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *(void)
.text:00001F54                 mov     [ebp+var_7A8], eax
.text:00001F5A                 mov     ecx, [ebp+this]
.text:00001F5D                 add     ecx, 0A0h ; 'á'
.text:00001F63                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:00001F68                 mov     [ebp+var_7AC], eax
.text:00001F6E                 mov     eax, [ebp+var_7A4]
.text:00001F74                 push    eax             ; struct ICompressProgressInfo *
.text:00001F75                 lea     ecx, [ebp+var_73C]
.text:00001F7B                 push    ecx             ; struct NArchive::NXz::CDecoder *
.text:00001F7C                 mov     edx, [ebp+var_7A8]
.text:00001F82                 push    edx             ; struct ISequentialOutStream *
.text:00001F83                 mov     eax, [ebp+var_7AC]
.text:00001F89                 push    eax             ; struct ISequentialInStream *
.text:00001F8A                 mov     ecx, [ebp+this] ; this
.text:00001F8D                 call    ?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CHandler::Decode2(ISequentialInStream *,ISequentialOutStream *,NArchive::NXz::CDecoder &,ICompressProgressInfo *)
.text:00001F92                 mov     [ebp+var_7B0], eax
.text:00001F98                 mov     ecx, [ebp+var_7B0]
.text:00001F9E                 mov     [ebp+var_744], ecx
.text:00001FA4                 cmp     [ebp+var_744], 0
.text:00001FAB                 jz      short loc_1FEB
.text:00001FAD                 mov     edx, [ebp+var_744]
.text:00001FB3                 mov     [ebp+var_764], edx
.text:00001FB9                 mov     byte ptr [ebp+var_4], 3
.text:00001FBD                 lea     ecx, [ebp+var_73C] ; this
.text:00001FC3                 call    ??1CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::~CDecoder(void)
.text:00001FC8                 mov     byte ptr [ebp+var_4], 1
.text:00001FCC                 lea     ecx, [ebp+var_48]
.text:00001FCF                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00001FD4                 mov     byte ptr [ebp+var_4], 0
.text:00001FD8                 lea     ecx, [ebp+var_30]
.text:00001FDB                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00001FE0                 mov     eax, [ebp+var_764]
.text:00001FE6                 jmp     loc_209B
.text:00001FEB ; ---------------------------------------------------------------------------
.text:00001FEB
.text:00001FEB loc_1FEB:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3C7j
.text:00001FEB                 lea     ecx, [ebp+var_73C] ; this
.text:00001FF1                 call    ?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ; NArchive::NXz::CDecoder::Get_Extract_OperationResult(void)
.text:00001FF6                 mov     [ebp+var_7B4], eax
.text:00001FFC                 mov     eax, [ebp+var_7B4]
.text:00002002                 mov     [ebp+var_748], eax
.text:00002008                 lea     ecx, [ebp+var_30]
.text:0000200B                 call    ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release(void)
.text:00002010                 mov     esi, esp
.text:00002012                 mov     ecx, [ebp+var_748]
.text:00002018                 push    ecx
.text:00002019                 mov     edx, [ebp+arg_10]
.text:0000201C                 push    edx
.text:0000201D                 mov     eax, [ebp+arg_10]
.text:00002020                 mov     ecx, [eax]
.text:00002022                 mov     edx, [ecx+1Ch]
.text:00002025                 call    edx
.text:00002027                 cmp     esi, esp
.text:00002029                 call    __RTC_CheckEsp
.text:0000202E                 mov     [ebp+var_7B8], eax
.text:00002034                 mov     eax, [ebp+var_7B8]
.text:0000203A                 mov     [ebp+var_768], eax
.text:00002040                 mov     byte ptr [ebp+var_4], 3
.text:00002044                 lea     ecx, [ebp+var_73C] ; this
.text:0000204A                 call    ??1CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::~CDecoder(void)
.text:0000204F                 mov     byte ptr [ebp+var_4], 1
.text:00002053                 lea     ecx, [ebp+var_48]
.text:00002056                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:0000205B                 mov     byte ptr [ebp+var_4], 0
.text:0000205F                 lea     ecx, [ebp+var_30]
.text:00002062                 call    ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text:00002067                 mov     eax, [ebp+var_768]
.text:0000206D                 jmp     short loc_209B
.text:0000206D ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text:0000206D
.text:0000206F
.text:0000206F ; =============== S U B R O U T I N E =======================================
.text:0000206F
.text:0000206F
.text:0000206F __catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 proc near
.text:0000206F                                         ; DATA XREF: .xdata$x:0000388Co
.text:0000206F                 mov     dword ptr [ebp-76Ch], 8007000Eh
.text:00002079                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002080                 mov     eax, offset $LN25_0
.text:00002085                 retn
.text:00002085 __catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0 endp
.text:00002085
.text:00002086 ; ---------------------------------------------------------------------------
.text:00002086                 mov     eax, offset __tryend$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
.text:0000208B                 retn
.text:0000208C ; ---------------------------------------------------------------------------
.text:0000208C
.text:0000208C __tryend$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
.text:0000208C                                         ; DATA XREF: .text:00002086o
.text:0000208C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002093                 jmp     short loc_209B
.text:00002095 ; ---------------------------------------------------------------------------
.text:00002095
.text:00002095 $LN25_0:                                ; DATA XREF: __catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0+11o
.text:00002095                 mov     eax, [ebp-76Ch]
.text:0000209B ; START OF FUNCTION CHUNK FOR ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:0000209B
.text:0000209B loc_209B:                               ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+53j
.text:0000209B                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+71j ...
.text:0000209B                 push    edx
.text:0000209C                 mov     ecx, ebp
.text:0000209E                 push    eax
.text:0000209F                 lea     edx, $LN33_0
.text:000020A5                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:000020AA                 pop     eax
.text:000020AB                 pop     edx
.text:000020AC                 mov     ecx, [ebp+var_C]
.text:000020AF                 mov     large fs:0, ecx
.text:000020B6                 pop     ecx
.text:000020B7                 pop     edi
.text:000020B8                 pop     esi
.text:000020B9                 pop     ebx
.text:000020BA                 mov     ecx, [ebp+var_14]
.text:000020BD                 xor     ecx, ebp
.text:000020BF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:000020C4                 add     esp, 7B8h
.text:000020CA                 cmp     ebp, esp
.text:000020CC                 call    __RTC_CheckEsp
.text:000020D1                 mov     esp, ebp
.text:000020D3                 pop     ebp
.text:000020D4                 retn    14h
.text:000020D4 ; END OF FUNCTION CHUNK FOR ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text:000020D4 ; ---------------------------------------------------------------------------
.text:000020D7                 align 4
.text:000020D8 $LN33_0         dd 4                    ; DATA XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+4BBo
.text:000020DC                 dd offset $LN32
.text:000020E0 $LN32           dd 0FFFFFFE0h, 8        ; DATA XREF: .text:000020DCo
.text:000020E8                 dd offset $LN27_0       ; "currentTotalPacked"
.text:000020EC                 dd 0FFFFFFD0h, 4
.text:000020F4                 dd offset $LN28_1       ; "realOutStream"
.text:000020F8                 dd 0FFFFFFB8h, 4
.text:00002100                 dd offset $LN29         ; "lpsRef"
.text:00002104                 dd 0FFFFF8C4h, 6E8h
.text:0000210C                 dd offset $LN30_1       ; "decoder"
.text:00002110 $LN30_1         db 'decoder',0          ; DATA XREF: .text:0000210Co
.text:00002118 $LN29           db 'lpsRef',0           ; DATA XREF: .text:00002100o
.text:0000211F $LN28_1         db 'realOutStream',0    ; DATA XREF: .text:000020F4o
.text:0000212D $LN27_0         db 'currentTotalPacked',0 ; DATA XREF: .text:000020E8o
.text:00002140                 db 4 dup(0CCh)
.text:00002144
.text:00002144 ; =============== S U B R O U T I N E =======================================
.text:00002144
.text:00002144 ; Attributes: bp-based frame
.text:00002144
.text:00002144 ; __int32 __stdcall NArchive::NXz::CHandler::GetFileTimeType(NArchive::NXz::CHandler *this, unsigned int *)
.text:00002144                 public ?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z
.text:00002144 ?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z proc near
.text:00002144                                         ; DATA XREF: .rdata:00003628o
.text:00002144
.text:00002144 this            = dword ptr  8
.text:00002144 arg_4           = dword ptr  0Ch
.text:00002144
.text:00002144                 push    ebp
.text:00002145                 mov     ebp, esp
.text:00002147                 mov     eax, [ebp+arg_4]
.text:0000214A                 mov     dword ptr [eax], 1
.text:00002150                 xor     eax, eax
.text:00002152                 pop     ebp
.text:00002153                 retn    8
.text:00002153 ?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z endp
.text:00002153
.text:00002153 ; ---------------------------------------------------------------------------
.text:00002156                 db 0Eh dup(0CCh)
.text:00002164
.text:00002164 ; =============== S U B R O U T I N E =======================================
.text:00002164
.text:00002164 ; Attributes: bp-based frame
.text:00002164
.text:00002164 ; __int32 __cdecl NArchive::NXz::CHandler::UpdateItems(NArchive::NXz::CHandler *this, struct ISequentialOutStream *, unsigned int, struct IArchiveUpdateCallback *)
.text:00002164                 public ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002164 ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text:00002164                                         ; DATA XREF: .rdata:00003624o
.text:00002164
.text:00002164 var_2EC         = dword ptr -2ECh
.text:00002164 var_2E8         = dword ptr -2E8h
.text:00002164 var_2E4         = dword ptr -2E4h
.text:00002164 var_2E0         = dword ptr -2E0h
.text:00002164 var_2DC         = dword ptr -2DCh
.text:00002164 var_2D8         = dword ptr -2D8h
.text:00002164 var_2D4         = dword ptr -2D4h
.text:00002164 var_2D0         = dword ptr -2D0h
.text:00002164 var_2CC         = dword ptr -2CCh
.text:00002164 var_2C8         = dword ptr -2C8h
.text:00002164 var_2C4         = dword ptr -2C4h
.text:00002164 var_2C0         = dword ptr -2C0h
.text:00002164 var_2BC         = dword ptr -2BCh
.text:00002164 var_2B8         = dword ptr -2B8h
.text:00002164 var_2B4         = dword ptr -2B4h
.text:00002164 var_2B0         = dword ptr -2B0h
.text:00002164 var_2AC         = dword ptr -2ACh
.text:00002164 var_2A8         = dword ptr -2A8h
.text:00002164 var_2A4         = dword ptr -2A4h
.text:00002164 var_2A0         = dword ptr -2A0h
.text:00002164 var_29C         = dword ptr -29Ch
.text:00002164 var_298         = dword ptr -298h
.text:00002164 var_294         = dword ptr -294h
.text:00002164 var_290         = dword ptr -290h
.text:00002164 var_28C         = dword ptr -28Ch
.text:00002164 var_288         = dword ptr -288h
.text:00002164 var_284         = dword ptr -284h
.text:00002164 var_280         = dword ptr -280h
.text:00002164 var_27C         = dword ptr -27Ch
.text:00002164 var_278         = dword ptr -278h
.text:00002164 var_274         = dword ptr -274h
.text:00002164 var_270         = dword ptr -270h
.text:00002164 var_26C         = dword ptr -26Ch
.text:00002164 var_268         = dword ptr -268h
.text:00002164 var_264         = dword ptr -264h
.text:00002164 var_260         = dword ptr -260h
.text:00002164 var_25C         = dword ptr -25Ch
.text:00002164 var_258         = dword ptr -258h
.text:00002164 var_254         = dword ptr -254h
.text:00002164 var_250         = dword ptr -250h
.text:00002164 var_249         = byte ptr -249h
.text:00002164 var_248         = dword ptr -248h
.text:00002164 var_244         = dword ptr -244h
.text:00002164 var_23D         = byte ptr -23Dh
.text:00002164 var_23C         = dword ptr -23Ch
.text:00002164 var_234         = dword ptr -234h
.text:00002164 var_230         = dword ptr -230h
.text:00002164 var_22C         = dword ptr -22Ch
.text:00002164 var_228         = dword ptr -228h
.text:00002164 var_224         = dword ptr -224h
.text:00002164 var_220         = dword ptr -220h
.text:00002164 var_21C         = dword ptr -21Ch
.text:00002164 var_218         = dword ptr -218h
.text:00002164 var_214         = dword ptr -214h
.text:00002164 var_210         = dword ptr -210h
.text:00002164 var_20C         = dword ptr -20Ch
.text:00002164 var_208         = dword ptr -208h
.text:00002164 var_204         = dword ptr -204h
.text:00002164 var_200         = dword ptr -200h
.text:00002164 var_1FC         = dword ptr -1FCh
.text:00002164 var_1F8         = dword ptr -1F8h
.text:00002164 var_1F4         = dword ptr -1F4h
.text:00002164 var_1F0         = dword ptr -1F0h
.text:00002164 var_1EC         = dword ptr -1ECh
.text:00002164 var_1E8         = dword ptr -1E8h
.text:00002164 var_1E4         = dword ptr -1E4h
.text:00002164 var_1DC         = byte ptr -1DCh
.text:00002164 var_1D4         = dword ptr -1D4h
.text:00002164 var_1D0         = dword ptr -1D0h
.text:00002164 var_1CC         = dword ptr -1CCh
.text:00002164 var_1C8         = dword ptr -1C8h
.text:00002164 var_1C0         = byte ptr -1C0h
.text:00002164 var_1B8         = dword ptr -1B8h
.text:00002164 var_1B4         = dword ptr -1B4h
.text:00002164 var_1B0         = dword ptr -1B0h
.text:00002164 var_1AC         = dword ptr -1ACh
.text:00002164 var_1A5         = byte ptr -1A5h
.text:00002164 var_1A0         = dword ptr -1A0h
.text:00002164 var_19C         = dword ptr -19Ch
.text:00002164 var_188         = dword ptr -188h
.text:00002164 var_184         = dword ptr -184h
.text:00002164 var_180         = dword ptr -180h
.text:00002164 var_174         = byte ptr -174h
.text:00002164 var_160         = byte ptr -160h
.text:00002164 var_158         = dword ptr -158h
.text:00002164 var_154         = dword ptr -154h
.text:00002164 var_150         = dword ptr -150h
.text:00002164 var_14C         = dword ptr -14Ch
.text:00002164 var_148         = dword ptr -148h
.text:00002164 var_144         = dword ptr -144h
.text:00002164 var_140         = dword ptr -140h
.text:00002164 var_138         = dword ptr -138h
.text:00002164 var_120         = byte ptr -120h
.text:00002164 var_104         = dword ptr -104h
.text:00002164 var_FC          = byte ptr -0FCh
.text:00002164 var_F0          = tagPROPVARIANT ptr -0F0h
.text:00002164 var_B0          = dword ptr -0B0h
.text:00002164 var_A4          = dword ptr -0A4h
.text:00002164 var_A0          = dword ptr -0A0h
.text:00002164 var_98          = word ptr -98h
.text:00002164 var_90          = dword ptr -90h
.text:00002164 var_8C          = dword ptr -8Ch
.text:00002164 var_84          = qword ptr -84h
.text:00002164 var_7C          = dword ptr -7Ch
.text:00002164 var_74          = word ptr -74h
.text:00002164 var_6C          = word ptr -6Ch
.text:00002164 var_60          = dword ptr -60h
.text:00002164 var_58          = dword ptr -58h
.text:00002164 var_4C          = dword ptr -4Ch
.text:00002164 var_40          = dword ptr -40h
.text:00002164 var_38          = dword ptr -38h
.text:00002164 var_30          = byte ptr -30h
.text:00002164 var_14          = dword ptr -14h
.text:00002164 var_10          = dword ptr -10h
.text:00002164 var_C           = dword ptr -0Ch
.text:00002164 var_4           = dword ptr -4
.text:00002164 this            = dword ptr  8
.text:00002164 arg_4           = dword ptr  0Ch
.text:00002164 arg_8           = dword ptr  10h
.text:00002164 arg_C           = dword ptr  14h
.text:00002164
.text:00002164 ; FUNCTION CHUNK AT .text:00002DE0 SIZE 0000003C BYTES
.text:00002164
.text:00002164                 push    ebp
.text:00002165                 mov     ebp, esp
.text:00002167                 push    0FFFFFFFFh
.text:00002169                 push    offset __ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:0000216E                 mov     eax, large fs:0
.text:00002174                 push    eax
.text:00002175                 push    ecx
.text:00002176                 sub     esp, 2DCh
.text:0000217C                 push    ebx
.text:0000217D                 push    esi
.text:0000217E                 push    edi
.text:0000217F                 lea     edi, [ebp+var_2EC]
.text:00002185                 mov     ecx, 0B7h ; '+'
.text:0000218A                 mov     eax, 0CCCCCCCCh
.text:0000218F                 rep stosd
.text:00002191                 mov     eax, dword ptr ds:___security_cookie
.text:00002196                 xor     eax, ebp
.text:00002198                 mov     [ebp+var_14], eax
.text:0000219B                 push    eax             ; struct ICompressProgressInfo *
.text:0000219C                 lea     eax, [ebp+var_C]
.text:0000219F                 mov     large fs:0, eax
.text:000021A5                 mov     [ebp+var_10], esp
.text:000021A8                 mov     [ebp+var_4], 0
.text:000021AF                 mov     eax, [ebp+arg_4]
.text:000021B2                 push    eax             ; struct ISequentialOutStream *
.text:000021B3                 lea     ecx, [ebp+var_30] ; this
.text:000021B6                 call    ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ; CSeqOutStreamWrap::CSeqOutStreamWrap(ISequentialOutStream *)
.text:000021BB                 cmp     [ebp+arg_8], 0
.text:000021BF                 jnz     short loc_21DB
.text:000021C1                 lea     ecx, [ebp+var_30]
.text:000021C4                 push    ecx
.text:000021C5                 call    _Xz_EncodeEmpty@4 ; Xz_EncodeEmpty(x)
.text:000021CA                 mov     [ebp+var_38], eax
.text:000021CD                 mov     edx, [ebp+var_38]
.text:000021D0                 push    edx             ; int
.text:000021D1                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:000021D6                 jmp     loc_2DE0
.text:000021DB ; ---------------------------------------------------------------------------
.text:000021DB
.text:000021DB loc_21DB:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5Bj
.text:000021DB                 cmp     [ebp+arg_8], 1
.text:000021DF                 jz      short loc_21EB
.text:000021E1                 mov     eax, 80070057h
.text:000021E6                 jmp     loc_2DE0
.text:000021EB ; ---------------------------------------------------------------------------
.text:000021EB
.text:000021EB loc_21EB:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7Bj
.text:000021EB                 cmp     [ebp+arg_C], 0
.text:000021EF                 jnz     short loc_21FB
.text:000021F1                 mov     eax, 80004005h
.text:000021F6                 jmp     loc_2DE0
.text:000021FB ; ---------------------------------------------------------------------------
.text:000021FB
.text:000021FB loc_21FB:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8Bj
.text:000021FB                 mov     esi, esp
.text:000021FD                 lea     eax, [ebp+var_58]
.text:00002200                 push    eax
.text:00002201                 lea     ecx, [ebp+var_4C]
.text:00002204                 push    ecx
.text:00002205                 lea     edx, [ebp+var_40]
.text:00002208                 push    edx
.text:00002209                 push    0
.text:0000220B                 mov     eax, [ebp+arg_C]
.text:0000220E                 push    eax
.text:0000220F                 mov     ecx, [ebp+arg_C]
.text:00002212                 mov     edx, [ecx]
.text:00002214                 mov     eax, [edx+14h]
.text:00002217                 call    eax
.text:00002219                 cmp     esi, esp
.text:0000221B                 call    __RTC_CheckEsp
.text:00002220                 mov     [ebp+var_23C], eax
.text:00002226                 mov     ecx, [ebp+var_23C]
.text:0000222C                 mov     [ebp+var_60], ecx
.text:0000222F                 cmp     [ebp+var_60], 0
.text:00002233                 jz      short loc_223D
.text:00002235                 mov     eax, [ebp+var_60]
.text:00002238                 jmp     loc_2DE0
.text:0000223D ; ---------------------------------------------------------------------------
.text:0000223D
.text:0000223D loc_223D:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+CFj
.text:0000223D                 mov     edx, [ebp+var_4C]
.text:00002240                 push    edx             ; int
.text:00002241                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00002246                 mov     [ebp+var_23D], al
.text:0000224C                 movzx   eax, [ebp+var_23D]
.text:00002253                 test    eax, eax
.text:00002255                 jz      loc_2307
.text:0000225B                 lea     ecx, [ebp+var_74] ; this
.text:0000225E                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002263                 mov     [ebp+var_244], eax
.text:00002269                 mov     byte ptr [ebp+var_4], 1
.text:0000226D                 mov     esi, esp
.text:0000226F                 lea     ecx, [ebp+var_74]
.text:00002272                 push    ecx
.text:00002273                 push    6
.text:00002275                 push    0
.text:00002277                 mov     edx, [ebp+arg_C]
.text:0000227A                 push    edx
.text:0000227B                 mov     eax, [ebp+arg_C]
.text:0000227E                 mov     ecx, [eax]
.text:00002280                 mov     edx, [ecx+18h]
.text:00002283                 call    edx
.text:00002285                 cmp     esi, esp
.text:00002287                 call    __RTC_CheckEsp
.text:0000228C                 mov     [ebp+var_248], eax
.text:00002292                 mov     eax, [ebp+var_248]
.text:00002298                 mov     [ebp+var_7C], eax
.text:0000229B                 cmp     [ebp+var_7C], 0
.text:0000229F                 jz      short loc_22C1
.text:000022A1                 mov     ecx, [ebp+var_7C]
.text:000022A4                 mov     [ebp+var_1E4], ecx
.text:000022AA                 mov     byte ptr [ebp+var_4], 0
.text:000022AE                 lea     ecx, [ebp+var_74] ; this
.text:000022B1                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000022B6                 mov     eax, [ebp+var_1E4]
.text:000022BC                 jmp     loc_2DE0
.text:000022C1 ; ---------------------------------------------------------------------------
.text:000022C1
.text:000022C1 loc_22C1:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+13Bj
.text:000022C1                 movzx   edx, [ebp+var_74]
.text:000022C5                 test    edx, edx
.text:000022C7                 jz      short loc_22FB
.text:000022C9                 movzx   eax, [ebp+var_74]
.text:000022CD                 cmp     eax, 0Bh
.text:000022D0                 jnz     short loc_22DA
.text:000022D2                 movsx   ecx, [ebp+var_6C]
.text:000022D6                 test    ecx, ecx
.text:000022D8                 jz      short loc_22FB
.text:000022DA
.text:000022DA loc_22DA:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+16Cj
.text:000022DA                 mov     [ebp+var_1E8], 80070057h
.text:000022E4                 mov     byte ptr [ebp+var_4], 0
.text:000022E8                 lea     ecx, [ebp+var_74] ; this
.text:000022EB                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000022F0                 mov     eax, [ebp+var_1E8]
.text:000022F6                 jmp     loc_2DE0
.text:000022FB ; ---------------------------------------------------------------------------
.text:000022FB
.text:000022FB loc_22FB:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+163j
.text:000022FB                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+174j
.text:000022FB                 mov     byte ptr [ebp+var_4], 0
.text:000022FF                 lea     ecx, [ebp+var_74] ; this
.text:00002302                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002307
.text:00002307 loc_2307:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+F1j
.text:00002307                 mov     edx, [ebp+var_40]
.text:0000230A                 push    edx             ; int
.text:0000230B                 call    ?IntToBool@@YG_NH@Z ; IntToBool(int)
.text:00002310                 mov     [ebp+var_249], al
.text:00002316                 movzx   eax, [ebp+var_249]
.text:0000231D                 test    eax, eax
.text:0000231F                 jz      loc_2A9C
.text:00002325                 lea     ecx, [ebp+var_98] ; this
.text:0000232B                 call    ??0CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::CPropVariant(void)
.text:00002330                 mov     [ebp+var_250], eax
.text:00002336                 mov     byte ptr [ebp+var_4], 2
.text:0000233A                 mov     esi, esp
.text:0000233C                 lea     ecx, [ebp+var_98]
.text:00002342                 push    ecx
.text:00002343                 push    7
.text:00002345                 push    0
.text:00002347                 mov     edx, [ebp+arg_C]
.text:0000234A                 push    edx
.text:0000234B                 mov     eax, [ebp+arg_C]
.text:0000234E                 mov     ecx, [eax]
.text:00002350                 mov     edx, [ecx+18h]
.text:00002353                 call    edx
.text:00002355                 cmp     esi, esp
.text:00002357                 call    __RTC_CheckEsp
.text:0000235C                 mov     [ebp+var_254], eax
.text:00002362                 mov     eax, [ebp+var_254]
.text:00002368                 mov     [ebp+var_A0], eax
.text:0000236E                 cmp     [ebp+var_A0], 0
.text:00002375                 jz      short loc_239D
.text:00002377                 mov     ecx, [ebp+var_A0]
.text:0000237D                 mov     [ebp+var_1EC], ecx
.text:00002383                 mov     byte ptr [ebp+var_4], 0
.text:00002387                 lea     ecx, [ebp+var_98] ; this
.text:0000238D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002392                 mov     eax, [ebp+var_1EC]
.text:00002398                 jmp     loc_2DE0
.text:0000239D ; ---------------------------------------------------------------------------
.text:0000239D
.text:0000239D loc_239D:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+211j
.text:0000239D                 movzx   edx, [ebp+var_98]
.text:000023A4                 cmp     edx, 15h
.text:000023A7                 jz      short loc_23CD
.text:000023A9                 mov     [ebp+var_1F0], 80070057h
.text:000023B3                 mov     byte ptr [ebp+var_4], 0
.text:000023B7                 lea     ecx, [ebp+var_98] ; this
.text:000023BD                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000023C2                 mov     eax, [ebp+var_1F0]
.text:000023C8                 jmp     loc_2DE0
.text:000023CD ; ---------------------------------------------------------------------------
.text:000023CD
.text:000023CD loc_23CD:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+243j
.text:000023CD                 mov     eax, [ebp+var_90]
.text:000023D3                 mov     dword ptr [ebp+var_84], eax
.text:000023D9                 mov     ecx, [ebp+var_8C]
.text:000023DF                 mov     dword ptr [ebp+var_84+4], ecx
.text:000023E2                 mov     esi, esp
.text:000023E4                 mov     edx, dword ptr [ebp+var_84+4]
.text:000023E7                 push    edx
.text:000023E8                 mov     eax, dword ptr [ebp+var_84]
.text:000023EE                 push    eax
.text:000023EF                 mov     ecx, [ebp+arg_C]
.text:000023F2                 push    ecx
.text:000023F3                 mov     edx, [ebp+arg_C]
.text:000023F6                 mov     eax, [edx]
.text:000023F8                 mov     ecx, [eax+0Ch]
.text:000023FB                 call    ecx
.text:000023FD                 cmp     esi, esp
.text:000023FF                 call    __RTC_CheckEsp
.text:00002404                 mov     [ebp+var_258], eax
.text:0000240A                 mov     edx, [ebp+var_258]
.text:00002410                 mov     [ebp+var_A4], edx
.text:00002416                 cmp     [ebp+var_A4], 0
.text:0000241D                 jz      short loc_2445
.text:0000241F                 mov     eax, [ebp+var_A4]
.text:00002425                 mov     [ebp+var_1F4], eax
.text:0000242B                 mov     byte ptr [ebp+var_4], 0
.text:0000242F                 lea     ecx, [ebp+var_98] ; this
.text:00002435                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:0000243A                 mov     eax, [ebp+var_1F4]
.text:00002440                 jmp     loc_2DE0
.text:00002445 ; ---------------------------------------------------------------------------
.text:00002445
.text:00002445 loc_2445:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2B9j
.text:00002445                 mov     byte ptr [ebp+var_4], 0
.text:00002449                 lea     ecx, [ebp+var_98] ; this
.text:0000244F                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002454                 lea     ecx, [ebp+var_F0]
.text:0000245A                 push    ecx
.text:0000245B                 call    _Lzma2EncProps_Init@4 ; Lzma2EncProps_Init(x)
.text:00002460                 mov     ecx, [ebp+this]
.text:00002463                 add     ecx, 8          ; this
.text:00002466                 call    ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel(void)
.text:0000246B                 mov     [ebp+var_25C], eax
.text:00002471                 mov     edx, [ebp+var_25C]
.text:00002477                 mov     dword ptr [ebp+var_F0.anonymous_0], edx
.text:0000247D                 lea     ecx, [ebp+var_FC]
.text:00002483                 call    ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>(void)
.text:00002488                 mov     [ebp+var_260], eax
.text:0000248E                 mov     byte ptr [ebp+var_4], 3
.text:00002492                 lea     ecx, [ebp+var_FC]
.text:00002498                 call    ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&(void)
.text:0000249D                 mov     [ebp+var_264], eax
.text:000024A3                 mov     esi, esp
.text:000024A5                 mov     eax, [ebp+var_264]
.text:000024AB                 push    eax
.text:000024AC                 push    0
.text:000024AE                 mov     ecx, [ebp+arg_C]
.text:000024B1                 push    ecx
.text:000024B2                 mov     edx, [ebp+arg_C]
.text:000024B5                 mov     eax, [edx]
.text:000024B7                 mov     ecx, [eax+1Ch]
.text:000024BA                 call    ecx
.text:000024BC                 cmp     esi, esp
.text:000024BE                 call    __RTC_CheckEsp
.text:000024C3                 mov     [ebp+var_268], eax
.text:000024C9                 mov     edx, [ebp+var_268]
.text:000024CF                 mov     [ebp+var_104], edx
.text:000024D5                 cmp     [ebp+var_104], 0
.text:000024DC                 jz      short loc_2504
.text:000024DE                 mov     eax, [ebp+var_104]
.text:000024E4                 mov     [ebp+var_1F8], eax
.text:000024EA                 mov     byte ptr [ebp+var_4], 0
.text:000024EE                 lea     ecx, [ebp+var_FC]
.text:000024F4                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000024F9                 mov     eax, [ebp+var_1F8]
.text:000024FF                 jmp     loc_2DE0
.text:00002504 ; ---------------------------------------------------------------------------
.text:00002504
.text:00002504 loc_2504:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+378j
.text:00002504                 lea     ecx, [ebp+var_FC]
.text:0000250A                 call    ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *(void)
.text:0000250F                 mov     [ebp+var_26C], eax
.text:00002515                 mov     ecx, [ebp+var_26C]
.text:0000251B                 push    ecx             ; struct ISequentialInStream *
.text:0000251C                 lea     ecx, [ebp+var_120] ; this
.text:00002522                 call    ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap(ISequentialInStream *)
.text:00002527                 mov     edx, dword ptr [ebp+var_84+4]
.text:0000252A                 push    edx
.text:0000252B                 mov     eax, dword ptr [ebp+var_84]
.text:00002531                 push    eax             ; unsigned __int64
.text:00002532                 lea     ecx, [ebp+var_138] ; this
.text:00002538                 call    ??0CPropVariant@NCOM@NWindows@@QAE@_K@Z ; NWindows::NCOM::CPropVariant::CPropVariant(unsigned __int64)
.text:0000253D                 mov     [ebp+var_270], eax
.text:00002543                 mov     byte ptr [ebp+var_4], 4
.text:00002547                 lea     ecx, [ebp+var_F0]
.text:0000254D                 push    ecx             ; struct tagPROPVARIANT *
.text:0000254E                 lea     edx, [ebp+var_138]
.text:00002554                 push    edx             ; unsigned __int32
.text:00002555                 push    offset $SG70045 ; struct CLzma2EncProps *
.text:00002557                 call    ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z ; NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)
.text:0000255C                 mov     [ebp+var_274], eax
.text:00002562                 mov     eax, [ebp+var_274]
.text:00002568                 mov     [ebp+var_140], eax
.text:0000256E                 cmp     [ebp+var_140], 0
.text:00002575                 jz      short loc_25AC
.text:00002577                 mov     ecx, [ebp+var_140]
.text:0000257D                 mov     [ebp+var_1FC], ecx
.text:00002583                 mov     byte ptr [ebp+var_4], 3
.text:00002587                 lea     ecx, [ebp+var_138] ; this
.text:0000258D                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:00002592                 mov     byte ptr [ebp+var_4], 0
.text:00002596                 lea     ecx, [ebp+var_FC]
.text:0000259C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000025A1                 mov     eax, [ebp+var_1FC]
.text:000025A7                 jmp     loc_2DE0
.text:000025AC ; ---------------------------------------------------------------------------
.text:000025AC
.text:000025AC loc_25AC:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+411j
.text:000025AC                 mov     byte ptr [ebp+var_4], 3
.text:000025B0                 lea     ecx, [ebp+var_138] ; this
.text:000025B6                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000025BB                 mov     [ebp+var_144], 0
.text:000025C5                 jmp     short loc_25D6
.text:000025C7 ; ---------------------------------------------------------------------------
.text:000025C7
.text:000025C7 loc_25C7:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *):loc_26FDj
.text:000025C7                 mov     edx, [ebp+var_144]
.text:000025CD                 add     edx, 1
.text:000025D0                 mov     [ebp+var_144], edx
.text:000025D6
.text:000025D6 loc_25D6:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+461j
.text:000025D6                 mov     ecx, [ebp+this]
.text:000025D9                 add     ecx, 1Ch
.text:000025DC                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:000025E1                 mov     [ebp+var_278], eax
.text:000025E7                 mov     eax, [ebp+var_144]
.text:000025ED                 cmp     eax, [ebp+var_278]
.text:000025F3                 jnb     loc_2702
.text:000025F9                 mov     ecx, [ebp+var_144]
.text:000025FF                 push    ecx
.text:00002600                 mov     ecx, [ebp+this]
.text:00002603                 add     ecx, 1Ch
.text:00002606                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:0000260B                 mov     [ebp+var_27C], eax
.text:00002611                 mov     edx, [ebp+var_27C]
.text:00002617                 mov     [ebp+var_148], edx
.text:0000261D                 mov     eax, [ebp+this]
.text:00002620                 mov     ecx, [eax+10h]
.text:00002623                 push    ecx             ; unsigned int
.text:00002624                 mov     edx, [ebp+var_148]
.text:0000262A                 push    edx             ; struct COneMethodInfo *
.text:0000262B                 mov     ecx, [ebp+this]
.text:0000262E                 add     ecx, 8          ; this
.text:00002631                 call    ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(COneMethodInfo &,uint)
.text:00002636                 mov     [ebp+var_14C], 0
.text:00002640                 jmp     short loc_2651
.text:00002642 ; ---------------------------------------------------------------------------
.text:00002642
.text:00002642 loc_2642:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *):loc_26F8j
.text:00002642                 mov     eax, [ebp+var_14C]
.text:00002648                 add     eax, 1
.text:0000264B                 mov     [ebp+var_14C], eax
.text:00002651
.text:00002651 loc_2651:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4DCj
.text:00002651                 mov     ecx, [ebp+var_148]
.text:00002657                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:0000265C                 mov     [ebp+var_280], eax
.text:00002662                 mov     ecx, [ebp+var_14C]
.text:00002668                 cmp     ecx, [ebp+var_280]
.text:0000266E                 jnb     loc_26FD
.text:00002674                 mov     edx, [ebp+var_14C]
.text:0000267A                 push    edx
.text:0000267B                 mov     ecx, [ebp+var_148]
.text:00002681                 call    ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00002686                 mov     [ebp+var_284], eax
.text:0000268C                 mov     eax, [ebp+var_284]
.text:00002692                 mov     [ebp+var_150], eax
.text:00002698                 lea     ecx, [ebp+var_F0]
.text:0000269E                 push    ecx             ; struct tagPROPVARIANT *
.text:0000269F                 mov     edx, [ebp+var_150]
.text:000026A5                 add     edx, 8
.text:000026A8                 push    edx             ; unsigned __int32
.text:000026A9                 mov     eax, [ebp+var_150]
.text:000026AF                 mov     ecx, [eax]
.text:000026B1                 push    ecx             ; this
.text:000026B2                 call    ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z ; NCompress::NLzma2::SetLzma2Prop(ulong,tagPROPVARIANT const &,CLzma2EncProps &)
.text:000026B7                 mov     [ebp+var_288], eax
.text:000026BD                 mov     edx, [ebp+var_288]
.text:000026C3                 mov     [ebp+var_154], edx
.text:000026C9                 cmp     [ebp+var_154], 0
.text:000026D0                 jz      short loc_26F8
.text:000026D2                 mov     eax, [ebp+var_154]
.text:000026D8                 mov     [ebp+var_200], eax
.text:000026DE                 mov     byte ptr [ebp+var_4], 0
.text:000026E2                 lea     ecx, [ebp+var_FC]
.text:000026E8                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000026ED                 mov     eax, [ebp+var_200]
.text:000026F3                 jmp     loc_2DE0
.text:000026F8 ; ---------------------------------------------------------------------------
.text:000026F8
.text:000026F8 loc_26F8:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+56Cj
.text:000026F8                 jmp     loc_2642
.text:000026FD ; ---------------------------------------------------------------------------
.text:000026FD
.text:000026FD loc_26FD:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+50Aj
.text:000026FD                 jmp     loc_25C7
.text:00002702 ; ---------------------------------------------------------------------------
.text:00002702
.text:00002702 loc_2702:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+48Fj
.text:00002702                 mov     ecx, [ebp+this]
.text:00002705                 mov     edx, [ecx+10h]
.text:00002708                 mov     [ebp+var_B0], edx
.text:0000270E                 push    38h ; '8'       ; unsigned int
.text:00002710                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002715                 add     esp, 4
.text:00002718                 mov     [ebp+var_28C], eax
.text:0000271E                 mov     eax, [ebp+var_28C]
.text:00002724                 mov     [ebp+var_208], eax
.text:0000272A                 mov     byte ptr [ebp+var_4], 5
.text:0000272E                 cmp     [ebp+var_208], 0
.text:00002735                 jz      short loc_2756
.text:00002737                 mov     ecx, [ebp+var_208]
.text:0000273D                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00002742                 mov     [ebp+var_290], eax
.text:00002748                 mov     ecx, [ebp+var_290]
.text:0000274E                 mov     [ebp+var_294], ecx
.text:00002754                 jmp     short loc_2760
.text:00002756 ; ---------------------------------------------------------------------------
.text:00002756
.text:00002756 loc_2756:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5D1j
.text:00002756                 mov     [ebp+var_294], 0
.text:00002760
.text:00002760 loc_2760:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5F0j
.text:00002760                 mov     edx, [ebp+var_294]
.text:00002766                 mov     [ebp+var_204], edx
.text:0000276C                 mov     byte ptr [ebp+var_4], 3
.text:00002770                 mov     eax, [ebp+var_204]
.text:00002776                 mov     [ebp+var_158], eax
.text:0000277C                 mov     ecx, [ebp+var_158]
.text:00002782                 push    ecx
.text:00002783                 lea     ecx, [ebp+var_160]
.text:00002789                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:0000278E                 mov     byte ptr [ebp+var_4], 6
.text:00002792                 push    1               ; bool
.text:00002794                 mov     edx, [ebp+arg_C]
.text:00002797                 push    edx             ; struct IProgress *
.text:00002798                 mov     ecx, [ebp+var_158] ; this
.text:0000279E                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:000027A3                 lea     ecx, [ebp+var_160]
.text:000027A9                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:000027AE                 mov     [ebp+var_298], eax
.text:000027B4                 mov     eax, [ebp+var_298]
.text:000027BA                 push    eax             ; struct ICompressProgressInfo *
.text:000027BB                 lea     ecx, [ebp+var_174] ; this
.text:000027C1                 call    ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ; CCompressProgressWrap::CCompressProgressWrap(ICompressProgressInfo *)
.text:000027C6                 lea     ecx, [ebp+var_188]
.text:000027CC                 push    ecx
.text:000027CD                 call    _XzProps_Init@4 ; XzProps_Init(x)
.text:000027D2                 lea     edx, [ebp+var_1A0]
.text:000027D8                 push    edx
.text:000027D9                 call    _XzFilterProps_Init@4 ; XzFilterProps_Init(x)
.text:000027DE                 lea     eax, [ebp+var_F0]
.text:000027E4                 mov     [ebp+var_188], eax
.text:000027EA                 mov     ecx, [ebp+this]
.text:000027ED                 mov     edx, [ecx+9Ch]
.text:000027F3                 neg     edx
.text:000027F5                 sbb     edx, edx
.text:000027F7                 lea     eax, [ebp+var_1A0]
.text:000027FD                 and     edx, eax
.text:000027FF                 mov     [ebp+var_184], edx
.text:00002805                 mov     ecx, [ebp+this]
.text:00002808                 mov     edx, [ecx+18h]
.text:0000280B                 mov     [ebp+var_29C], edx
.text:00002811                 cmp     [ebp+var_29C], 20h ; ' ' ; switch 33 cases
.text:00002818                 ja      short $LN17_0   ; jumptable 00002827 default case
.text:0000281A                 mov     eax, [ebp+var_29C]
.text:00002820                 movzx   ecx, ds:$LN67[eax]
.text:00002827                 jmp     ds:$LN87[ecx*4] ; switch jump
.text:0000282E ; ---------------------------------------------------------------------------
.text:0000282E
.text:0000282E $LN21_1:                                ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3j
.text:0000282E                                         ; DATA XREF: .text:$LN87o
.text:0000282E                 mov     [ebp+var_180], 0 ; jumptable 00002827 case 0
.text:00002838                 jmp     short loc_2891
.text:0000283A ; ---------------------------------------------------------------------------
.text:0000283A
.text:0000283A $LN20_3:                                ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3j
.text:0000283A                                         ; DATA XREF: .text:$LN87o
.text:0000283A                 mov     [ebp+var_180], 1 ; jumptable 00002827 case 4
.text:00002844                 jmp     short loc_2891
.text:00002846 ; ---------------------------------------------------------------------------
.text:00002846
.text:00002846 $LN19_3:                                ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3j
.text:00002846                                         ; DATA XREF: .text:$LN87o
.text:00002846                 mov     [ebp+var_180], 4 ; jumptable 00002827 case 8
.text:00002850                 jmp     short loc_2891
.text:00002852 ; ---------------------------------------------------------------------------
.text:00002852
.text:00002852 $LN18_1:                                ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3j
.text:00002852                                         ; DATA XREF: .text:$LN87o
.text:00002852                 mov     [ebp+var_180], 0Ah ; jumptable 00002827 case 32
.text:0000285C                 jmp     short loc_2891
.text:0000285E ; ---------------------------------------------------------------------------
.text:0000285E
.text:0000285E $LN17_0:                                ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6B4j
.text:0000285E                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3j
.text:0000285E                                         ; DATA XREF: ...
.text:0000285E                 mov     [ebp+var_20C], 80070057h ; jumptable 00002827 default case
.text:00002868                 mov     byte ptr [ebp+var_4], 3
.text:0000286C                 lea     ecx, [ebp+var_160]
.text:00002872                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002877                 mov     byte ptr [ebp+var_4], 0
.text:0000287B                 lea     ecx, [ebp+var_FC]
.text:00002881                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002886                 mov     eax, [ebp+var_20C]
.text:0000288C                 jmp     loc_2DE0
.text:00002891 ; ---------------------------------------------------------------------------
.text:00002891
.text:00002891 loc_2891:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6D4j
.text:00002891                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6E0j ...
.text:00002891                 mov     edx, [ebp+this]
.text:00002894                 mov     eax, [edx+9Ch]
.text:0000289A                 mov     [ebp+var_1A0], eax
.text:000028A0                 mov     ecx, [ebp+this]
.text:000028A3                 cmp     dword ptr [ecx+9Ch], 3
.text:000028AA                 jnz     loc_29E0
.text:000028B0                 mov     [ebp+var_1A5], 0
.text:000028B7                 mov     [ebp+var_1AC], 0
.text:000028C1                 jmp     short loc_28D2
.text:000028C3 ; ---------------------------------------------------------------------------
.text:000028C3
.text:000028C3 loc_28C3:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *):loc_299Dj
.text:000028C3                 mov     edx, [ebp+var_1AC]
.text:000028C9                 add     edx, 1
.text:000028CC                 mov     [ebp+var_1AC], edx
.text:000028D2
.text:000028D2 loc_28D2:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+75Dj
.text:000028D2                 mov     ecx, [ebp+this]
.text:000028D5                 add     ecx, 28h ; '('
.text:000028D8                 call    ?Size@?$CObjectVector@UCProp@@@@QBEIXZ ; CObjectVector<CProp>::Size(void)
.text:000028DD                 mov     [ebp+var_2A0], eax
.text:000028E3                 mov     eax, [ebp+var_1AC]
.text:000028E9                 cmp     eax, [ebp+var_2A0]
.text:000028EF                 jnb     loc_29A2
.text:000028F5                 mov     ecx, [ebp+var_1AC]
.text:000028FB                 push    ecx
.text:000028FC                 mov     ecx, [ebp+this]
.text:000028FF                 add     ecx, 28h ; '('
.text:00002902                 call    ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z ; CObjectVector<CProp>::operator[](uint)
.text:00002907                 mov     [ebp+var_2A4], eax
.text:0000290D                 mov     edx, [ebp+var_2A4]
.text:00002913                 mov     [ebp+var_1B0], edx
.text:00002919                 mov     eax, [ebp+var_1B0]
.text:0000291F                 cmp     dword ptr [eax], 0
.text:00002922                 jnz     short loc_299D
.text:00002924                 mov     ecx, [ebp+var_1B0]
.text:0000292A                 movzx   edx, word ptr [ecx+8]
.text:0000292E                 cmp     edx, 13h
.text:00002931                 jnz     short loc_299D
.text:00002933                 mov     eax, [ebp+var_1B0]
.text:00002939                 mov     ecx, [eax+10h]
.text:0000293C                 mov     [ebp+var_1B4], ecx
.text:00002942                 cmp     [ebp+var_1B4], 1
.text:00002949                 jb      short loc_2957
.text:0000294B                 cmp     [ebp+var_1B4], 100h
.text:00002955                 jbe     short loc_298A
.text:00002957
.text:00002957 loc_2957:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7E5j
.text:00002957                 mov     [ebp+var_210], 80070057h
.text:00002961                 mov     byte ptr [ebp+var_4], 3
.text:00002965                 lea     ecx, [ebp+var_160]
.text:0000296B                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002970                 mov     byte ptr [ebp+var_4], 0
.text:00002974                 lea     ecx, [ebp+var_FC]
.text:0000297A                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:0000297F                 mov     eax, [ebp+var_210]
.text:00002985                 jmp     loc_2DE0
.text:0000298A ; ---------------------------------------------------------------------------
.text:0000298A
.text:0000298A loc_298A:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7F1j
.text:0000298A                 mov     edx, [ebp+var_1B4]
.text:00002990                 mov     [ebp+var_19C], edx
.text:00002996                 mov     [ebp+var_1A5], 1
.text:0000299D
.text:0000299D loc_299D:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7BEj
.text:0000299D                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+7CDj
.text:0000299D                 jmp     loc_28C3
.text:000029A2 ; ---------------------------------------------------------------------------
.text:000029A2
.text:000029A2 loc_29A2:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+78Bj
.text:000029A2                 movzx   eax, [ebp+var_1A5]
.text:000029A9                 test    eax, eax
.text:000029AB                 jnz     short loc_29E0
.text:000029AD                 mov     [ebp+var_214], 80070057h
.text:000029B7                 mov     byte ptr [ebp+var_4], 3
.text:000029BB                 lea     ecx, [ebp+var_160]
.text:000029C1                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:000029C6                 mov     byte ptr [ebp+var_4], 0
.text:000029CA                 lea     ecx, [ebp+var_FC]
.text:000029D0                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:000029D5                 mov     eax, [ebp+var_214]
.text:000029DB                 jmp     loc_2DE0
.text:000029E0 ; ---------------------------------------------------------------------------
.text:000029E0
.text:000029E0 loc_29E0:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+746j
.text:000029E0                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+847j
.text:000029E0                 lea     ecx, [ebp+var_174]
.text:000029E6                 push    ecx
.text:000029E7                 lea     edx, [ebp+var_188]
.text:000029ED                 push    edx
.text:000029EE                 lea     eax, [ebp+var_120]
.text:000029F4                 push    eax
.text:000029F5                 lea     ecx, [ebp+var_30]
.text:000029F8                 push    ecx
.text:000029F9                 call    _Xz_Encode@16   ; Xz_Encode(x,x,x,x)
.text:000029FE                 mov     [ebp+var_1B8], eax
.text:00002A04                 cmp     [ebp+var_1B8], 0
.text:00002A0B                 jnz     short loc_2A61
.text:00002A0D                 mov     esi, esp
.text:00002A0F                 push    0
.text:00002A11                 mov     edx, [ebp+arg_C]
.text:00002A14                 push    edx
.text:00002A15                 mov     eax, [ebp+arg_C]
.text:00002A18                 mov     ecx, [eax]
.text:00002A1A                 mov     edx, [ecx+20h]
.text:00002A1D                 call    edx
.text:00002A1F                 cmp     esi, esp
.text:00002A21                 call    __RTC_CheckEsp
.text:00002A26                 mov     [ebp+var_2A8], eax
.text:00002A2C                 mov     eax, [ebp+var_2A8]
.text:00002A32                 mov     [ebp+var_218], eax
.text:00002A38                 mov     byte ptr [ebp+var_4], 3
.text:00002A3C                 lea     ecx, [ebp+var_160]
.text:00002A42                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002A47                 mov     byte ptr [ebp+var_4], 0
.text:00002A4B                 lea     ecx, [ebp+var_FC]
.text:00002A51                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002A56                 mov     eax, [ebp+var_218]
.text:00002A5C                 jmp     loc_2DE0
.text:00002A61 ; ---------------------------------------------------------------------------
.text:00002A61
.text:00002A61 loc_2A61:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+8A7j
.text:00002A61                 mov     ecx, [ebp+var_1B8]
.text:00002A67                 push    ecx             ; int
.text:00002A68                 call    ?SResToHRESULT@@YGJH@Z ; SResToHRESULT(int)
.text:00002A6D                 mov     [ebp+var_21C], eax
.text:00002A73                 mov     byte ptr [ebp+var_4], 3
.text:00002A77                 lea     ecx, [ebp+var_160]
.text:00002A7D                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002A82                 mov     byte ptr [ebp+var_4], 0
.text:00002A86                 lea     ecx, [ebp+var_FC]
.text:00002A8C                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00002A91                 mov     eax, [ebp+var_21C]
.text:00002A97                 jmp     loc_2DE0
.text:00002A9C ; ---------------------------------------------------------------------------
.text:00002A9C
.text:00002A9C loc_2A9C:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1BBj
.text:00002A9C                 cmp     [ebp+var_58], 0
.text:00002AA0                 jz      short loc_2AAC
.text:00002AA2                 mov     eax, 80070057h
.text:00002AA7                 jmp     loc_2DE0
.text:00002AAC ; ---------------------------------------------------------------------------
.text:00002AAC
.text:00002AAC loc_2AAC:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+93Cj
.text:00002AAC                 lea     ecx, [ebp+var_1C0]
.text:00002AB2                 call    ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002AB7                 mov     [ebp+var_2AC], eax
.text:00002ABD                 mov     byte ptr [ebp+var_4], 7
.text:00002AC1                 lea     ecx, [ebp+var_1C0]
.text:00002AC7                 call    ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&(void)
.text:00002ACC                 mov     [ebp+var_2B0], eax
.text:00002AD2                 mov     esi, esp
.text:00002AD4                 mov     edx, [ebp+var_2B0]
.text:00002ADA                 push    edx
.text:00002ADB                 push    offset _IID_IArchiveUpdateCallbackFile
.text:00002AE0                 mov     eax, [ebp+arg_C]
.text:00002AE3                 push    eax
.text:00002AE4                 mov     ecx, [ebp+arg_C]
.text:00002AE7                 mov     edx, [ecx]
.text:00002AE9                 mov     eax, [edx]
.text:00002AEB                 call    eax
.text:00002AED                 cmp     esi, esp
.text:00002AEF                 call    __RTC_CheckEsp
.text:00002AF4                 lea     ecx, [ebp+var_1C0]
.text:00002AFA                 call    ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *(void)
.text:00002AFF                 mov     [ebp+var_2B4], eax
.text:00002B05                 cmp     [ebp+var_2B4], 0
.text:00002B0C                 jz      loc_2B93
.text:00002B12                 lea     ecx, [ebp+var_1C0]
.text:00002B18                 call    ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->(void)
.text:00002B1D                 mov     [ebp+var_2B8], eax
.text:00002B23                 mov     ecx, [ebp+var_2B8]
.text:00002B29                 mov     [ebp+var_2BC], ecx
.text:00002B2F                 mov     esi, esp
.text:00002B31                 push    3
.text:00002B33                 push    0
.text:00002B35                 push    1
.text:00002B37                 mov     edx, [ebp+var_2BC]
.text:00002B3D                 push    edx
.text:00002B3E                 mov     eax, [ebp+var_2BC]
.text:00002B44                 mov     ecx, [eax]
.text:00002B46                 mov     edx, [ecx+10h]
.text:00002B49                 call    edx
.text:00002B4B                 cmp     esi, esp
.text:00002B4D                 call    __RTC_CheckEsp
.text:00002B52                 mov     [ebp+var_2C0], eax
.text:00002B58                 mov     eax, [ebp+var_2C0]
.text:00002B5E                 mov     [ebp+var_1C8], eax
.text:00002B64                 cmp     [ebp+var_1C8], 0
.text:00002B6B                 jz      short loc_2B93
.text:00002B6D                 mov     ecx, [ebp+var_1C8]
.text:00002B73                 mov     [ebp+var_220], ecx
.text:00002B79                 mov     byte ptr [ebp+var_4], 0
.text:00002B7D                 lea     ecx, [ebp+var_1C0]
.text:00002B83                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002B88                 mov     eax, [ebp+var_220]
.text:00002B8E                 jmp     loc_2DE0
.text:00002B93 ; ---------------------------------------------------------------------------
.text:00002B93
.text:00002B93 loc_2B93:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9A8j
.text:00002B93                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A07j
.text:00002B93                 mov     ecx, [ebp+this]
.text:00002B96                 add     ecx, 94h ; 'ö'
.text:00002B9C                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002BA1                 mov     [ebp+var_2C4], eax
.text:00002BA7                 cmp     [ebp+var_2C4], 0
.text:00002BAE                 jz      loc_2CAB
.text:00002BB4                 mov     edx, [ebp+this]
.text:00002BB7                 movzx   eax, byte ptr [edx+92h]
.text:00002BBE                 test    eax, eax
.text:00002BC0                 jz      short loc_2C25
.text:00002BC2                 mov     esi, esp
.text:00002BC4                 mov     ecx, [ebp+this]
.text:00002BC7                 mov     edx, [ecx+6Ch]
.text:00002BCA                 push    edx
.text:00002BCB                 mov     eax, [ecx+68h]
.text:00002BCE                 push    eax
.text:00002BCF                 mov     ecx, [ebp+arg_C]
.text:00002BD2                 push    ecx
.text:00002BD3                 mov     edx, [ebp+arg_C]
.text:00002BD6                 mov     eax, [edx]
.text:00002BD8                 mov     ecx, [eax+0Ch]
.text:00002BDB                 call    ecx
.text:00002BDD                 cmp     esi, esp
.text:00002BDF                 call    __RTC_CheckEsp
.text:00002BE4                 mov     [ebp+var_2C8], eax
.text:00002BEA                 mov     edx, [ebp+var_2C8]
.text:00002BF0                 mov     [ebp+var_1CC], edx
.text:00002BF6                 cmp     [ebp+var_1CC], 0
.text:00002BFD                 jz      short loc_2C25
.text:00002BFF                 mov     eax, [ebp+var_1CC]
.text:00002C05                 mov     [ebp+var_224], eax
.text:00002C0B                 mov     byte ptr [ebp+var_4], 0
.text:00002C0F                 lea     ecx, [ebp+var_1C0]
.text:00002C15                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002C1A                 mov     eax, [ebp+var_224]
.text:00002C20                 jmp     loc_2DE0
.text:00002C25 ; ---------------------------------------------------------------------------
.text:00002C25
.text:00002C25 loc_2C25:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A5Cj
.text:00002C25                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A99j
.text:00002C25                 mov     ecx, [ebp+this]
.text:00002C28                 add     ecx, 94h ; 'ö'
.text:00002C2E                 call    ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->(void)
.text:00002C33                 mov     [ebp+var_2CC], eax
.text:00002C39                 mov     ecx, [ebp+var_2CC]
.text:00002C3F                 mov     [ebp+var_2D0], ecx
.text:00002C45                 mov     esi, esp
.text:00002C47                 push    0
.text:00002C49                 push    0
.text:00002C4B                 push    0
.text:00002C4D                 push    0
.text:00002C4F                 mov     edx, [ebp+var_2D0]
.text:00002C55                 push    edx
.text:00002C56                 mov     eax, [ebp+var_2D0]
.text:00002C5C                 mov     ecx, [eax]
.text:00002C5E                 mov     edx, [ecx+10h]
.text:00002C61                 call    edx
.text:00002C63                 cmp     esi, esp
.text:00002C65                 call    __RTC_CheckEsp
.text:00002C6A                 mov     [ebp+var_2D4], eax
.text:00002C70                 mov     eax, [ebp+var_2D4]
.text:00002C76                 mov     [ebp+var_1D0], eax
.text:00002C7C                 cmp     [ebp+var_1D0], 0
.text:00002C83                 jz      short loc_2CAB
.text:00002C85                 mov     ecx, [ebp+var_1D0]
.text:00002C8B                 mov     [ebp+var_228], ecx
.text:00002C91                 mov     byte ptr [ebp+var_4], 0
.text:00002C95                 lea     ecx, [ebp+var_1C0]
.text:00002C9B                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002CA0                 mov     eax, [ebp+var_228]
.text:00002CA6                 jmp     loc_2DE0
.text:00002CAB ; ---------------------------------------------------------------------------
.text:00002CAB
.text:00002CAB loc_2CAB:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A4Aj
.text:00002CAB                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B1Fj
.text:00002CAB                 push    38h ; '8'       ; unsigned int
.text:00002CAD                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00002CB2                 add     esp, 4
.text:00002CB5                 mov     [ebp+var_2D8], eax
.text:00002CBB                 mov     edx, [ebp+var_2D8]
.text:00002CC1                 mov     [ebp+var_230], edx
.text:00002CC7                 mov     byte ptr [ebp+var_4], 8
.text:00002CCB                 cmp     [ebp+var_230], 0
.text:00002CD2                 jz      short loc_2CF3
.text:00002CD4                 mov     ecx, [ebp+var_230]
.text:00002CDA                 call    ??0CLocalProgress@@QAE@XZ ; CLocalProgress::CLocalProgress(void)
.text:00002CDF                 mov     [ebp+var_2DC], eax
.text:00002CE5                 mov     eax, [ebp+var_2DC]
.text:00002CEB                 mov     [ebp+var_2E0], eax
.text:00002CF1                 jmp     short loc_2CFD
.text:00002CF3 ; ---------------------------------------------------------------------------
.text:00002CF3
.text:00002CF3 loc_2CF3:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B6Ej
.text:00002CF3                 mov     [ebp+var_2E0], 0
.text:00002CFD
.text:00002CFD loc_2CFD:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+B8Dj
.text:00002CFD                 mov     ecx, [ebp+var_2E0]
.text:00002D03                 mov     [ebp+var_22C], ecx
.text:00002D09                 mov     byte ptr [ebp+var_4], 7
.text:00002D0D                 mov     edx, [ebp+var_22C]
.text:00002D13                 mov     [ebp+var_1D4], edx
.text:00002D19                 mov     eax, [ebp+var_1D4]
.text:00002D1F                 push    eax
.text:00002D20                 lea     ecx, [ebp+var_1DC]
.text:00002D26                 call    ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)
.text:00002D2B                 mov     byte ptr [ebp+var_4], 9
.text:00002D2F                 push    (offset $SG69791+1) ; bool
.text:00002D31                 mov     ecx, [ebp+arg_C]
.text:00002D34                 push    ecx             ; struct IProgress *
.text:00002D35                 mov     ecx, [ebp+var_1D4] ; this
.text:00002D3B                 call    ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init(IProgress *,bool)
.text:00002D40                 lea     ecx, [ebp+var_1DC]
.text:00002D46                 call    ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *(void)
.text:00002D4B                 mov     [ebp+var_2E4], eax
.text:00002D51                 mov     ecx, [ebp+this]
.text:00002D54                 add     ecx, 94h ; 'ö'
.text:00002D5A                 call    ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *(void)
.text:00002D5F                 mov     [ebp+var_2E8], eax
.text:00002D65                 mov     edx, [ebp+var_2E4]
.text:00002D6B                 push    edx             ; struct ISequentialOutStream *
.text:00002D6C                 mov     eax, [ebp+arg_4]
.text:00002D6F                 push    eax             ; struct ISequentialInStream *
.text:00002D70                 mov     ecx, [ebp+var_2E8]
.text:00002D76                 push    ecx             ; this
.text:00002D77                 call    ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00002D7C                 mov     [ebp+var_2EC], eax
.text:00002D82                 mov     edx, [ebp+var_2EC]
.text:00002D88                 mov     [ebp+var_234], edx
.text:00002D8E                 mov     byte ptr [ebp+var_4], 7
.text:00002D92                 lea     ecx, [ebp+var_1DC]
.text:00002D98                 call    ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text:00002D9D                 mov     byte ptr [ebp+var_4], 0
.text:00002DA1                 lea     ecx, [ebp+var_1C0]
.text:00002DA7                 call    ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text:00002DAC                 mov     eax, [ebp+var_234]
.text:00002DB2                 jmp     short loc_2DE0
.text:00002DB2 ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp ; sp-analysis failed
.text:00002DB2
.text:00002DB4
.text:00002DB4 ; =============== S U B R O U T I N E =======================================
.text:00002DB4
.text:00002DB4
.text:00002DB4 __catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 proc near
.text:00002DB4                                         ; DATA XREF: .xdata$x:00003904o
.text:00002DB4                 mov     dword ptr [ebp-238h], 8007000Eh
.text:00002DBE                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002DC5                 mov     eax, offset $LN65
.text:00002DCA                 retn
.text:00002DCA __catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0 endp
.text:00002DCA
.text:00002DCB ; ---------------------------------------------------------------------------
.text:00002DCB                 mov     eax, offset __tryend$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
.text:00002DD0                 retn
.text:00002DD1 ; ---------------------------------------------------------------------------
.text:00002DD1
.text:00002DD1 __tryend$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
.text:00002DD1                                         ; DATA XREF: .text:00002DCBo
.text:00002DD1                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00002DD8                 jmp     short loc_2DE0
.text:00002DDA ; ---------------------------------------------------------------------------
.text:00002DDA
.text:00002DDA $LN65:                                  ; DATA XREF: __catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0+11o
.text:00002DDA                 mov     eax, [ebp-238h]
.text:00002DE0 ; START OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002DE0
.text:00002DE0 loc_2DE0:                               ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+72j
.text:00002DE0                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+82j ...
.text:00002DE0                 push    edx
.text:00002DE1                 mov     ecx, ebp
.text:00002DE3                 push    eax
.text:00002DE4                 lea     edx, $LN86
.text:00002DEA                 call    @_RTC_CheckStackVars@8 ; _RTC_CheckStackVars(x,x)
.text:00002DEF                 pop     eax
.text:00002DF0                 pop     edx
.text:00002DF1                 mov     ecx, [ebp+var_C]
.text:00002DF4                 mov     large fs:0, ecx
.text:00002DFB                 pop     ecx
.text:00002DFC                 pop     edi
.text:00002DFD                 pop     esi
.text:00002DFE                 pop     ebx
.text:00002DFF                 mov     ecx, [ebp+var_14]
.text:00002E02                 xor     ecx, ebp
.text:00002E04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00002E09                 add     esp, 2ECh
.text:00002E0F                 cmp     ebp, esp
.text:00002E11                 call    __RTC_CheckEsp
.text:00002E16                 mov     esp, ebp
.text:00002E18                 pop     ebp
.text:00002E19                 retn    10h
.text:00002E19 ; END OF FUNCTION CHUNK FOR ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text:00002E19 ; ---------------------------------------------------------------------------
.text:00002E1C $LN86           dd 10h                  ; DATA XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C80o
.text:00002E20                 dd offset $LN85
.text:00002E24 $LN85           dd 0FFFFFFD0h, 18h      ; DATA XREF: .text:00002E20o
.text:00002E2C                 dd offset $LN68         ; "seqOutStream"
.text:00002E30                 dd 0FFFFFFC0h, 4
.text:00002E38                 dd offset $LN69         ; "newData"
.text:00002E3C                 dd 0FFFFFFB4h, 4
.text:00002E44                 dd offset $LN70         ; "newProps"
.text:00002E48                 dd 0FFFFFFA8h, 4
.text:00002E50                 dd offset $LN71         ; "indexInArchive"
.text:00002E54                 dd 0FFFFFF8Ch, 10h
.text:00002E5C                 dd offset $LN72         ; "prop"
.text:00002E60                 dd 0FFFFFF68h, 10h
.text:00002E68                 dd offset $LN73         ; "prop"
.text:00002E6C                 dd 0FFFFFF10h, 48h
.text:00002E74                 dd offset $LN74         ; "lzma2Props"
.text:00002E78                 dd 0FFFFFF04h, 4
.text:00002E80                 dd offset $LN75         ; "fileInStream"
.text:00002E84                 dd 0FFFFFEE0h, 18h
.text:00002E8C                 dd offset $LN76         ; "seqInStream"
.text:00002E90                 dd 0FFFFFEC8h, 10h
.text:00002E98                 dd offset $LN77         ; "prop"
.text:00002E9C                 dd 0FFFFFEA0h, 4
.text:00002EA4                 dd offset $LN78         ; "progress"
.text:00002EA8                 dd 0FFFFFE8Ch, 0Ch
.text:00002EB0                 dd offset $LN79         ; "progressWrap"
.text:00002EB4                 dd 0FFFFFE78h, 0Ch
.text:00002EBC                 dd offset $LN80         ; "xzProps"
.text:00002EC0                 dd 0FFFFFE60h, 10h
.text:00002EC8                 dd offset $LN81         ; "filter"
.text:00002ECC                 dd 0FFFFFE40h, 4
.text:00002ED4                 dd offset $LN82         ; "opCallback"
.text:00002ED8                 dd 0FFFFFE24h, 4
.text:00002EE0                 dd offset $LN83         ; "progress"
.text:00002EE4 $LN83           db 'progress',0         ; DATA XREF: .text:00002EE0o
.text:00002EED $LN82           db 'opCallback',0       ; DATA XREF: .text:00002ED4o
.text:00002EF8 $LN81           db 'filter',0           ; DATA XREF: .text:00002EC8o
.text:00002EFF $LN80           db 'xzProps',0          ; DATA XREF: .text:00002EBCo
.text:00002F07 $LN79           db 'progressWrap',0     ; DATA XREF: .text:00002EB0o
.text:00002F14 $LN78           db 'progress',0         ; DATA XREF: .text:00002EA4o
.text:00002F1D $LN77           db 'prop',0             ; DATA XREF: .text:00002E98o
.text:00002F22 $LN76           db 'seqInStream',0      ; DATA XREF: .text:00002E8Co
.text:00002F2E $LN75           db 'fileInStream',0     ; DATA XREF: .text:00002E80o
.text:00002F3B $LN74           db 'lzma2Props',0       ; DATA XREF: .text:00002E74o
.text:00002F46 $LN73           db 'prop',0             ; DATA XREF: .text:00002E68o
.text:00002F4B $LN72           db 'prop',0             ; DATA XREF: .text:00002E5Co
.text:00002F50 $LN71           db 'indexInArchive',0   ; DATA XREF: .text:00002E50o
.text:00002F5F $LN70           db 'newProps',0         ; DATA XREF: .text:00002E44o
.text:00002F68 $LN69           db 'newData',0          ; DATA XREF: .text:00002E38o
.text:00002F70 $LN68           db 'seqOutStream',0     ; DATA XREF: .text:00002E2Co
.text:00002F7D                 align 10h
.text:00002F80 $LN87           dd offset $LN21_1       ; DATA XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6C3r
.text:00002F80                 dd offset $LN20_3       ; jump table for switch statement
.text:00002F80                 dd offset $LN19_3
.text:00002F80                 dd offset $LN18_1
.text:00002F80                 dd offset $LN17_0
.text:00002F94 $LN67           db      0,     4,     4,     4
.text:00002F94                                         ; DATA XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6BCr
.text:00002F94                 db      1,     4,     4,     4 ; indirect table for switch statement
.text:00002F94                 db      2,     4,     4,     4
.text:00002F94                 db      4,     4,     4,     4
.text:00002F94                 db      4,     4,     4,     4
.text:00002F94                 db      4,     4,     4,     4
.text:00002F94                 db      4,     4,     4,     4
.text:00002F94                 db      4,     4,     4,     4
.text:00002F94                 db      3
.text:00002FB5                 db 0Fh dup(0CCh)
.text:00002FC4
.text:00002FC4 ; =============== S U B R O U T I N E =======================================
.text:00002FC4
.text:00002FC4 ; Attributes: bp-based frame
.text:00002FC4
.text:00002FC4 ; __int32 __cdecl NArchive::NXz::CHandler::SetProperties(NArchive::NXz::CHandler *this, const wchar_t *const *, const struct tagPROPVARIANT *, unsigned int)
.text:00002FC4                 public ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002FC4 ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text:00002FC4                                         ; DATA XREF: .rdata:00003610o
.text:00002FC4
.text:00002FC4 var_48          = byte ptr -48h
.text:00002FC4 var_46          = byte ptr -46h
.text:00002FC4 var_45          = byte ptr -45h
.text:00002FC4 var_44          = dword ptr -44h
.text:00002FC4 var_40          = dword ptr -40h
.text:00002FC4 var_3C          = dword ptr -3Ch
.text:00002FC4 var_38          = dword ptr -38h
.text:00002FC4 var_34          = dword ptr -34h
.text:00002FC4 var_2D          = byte ptr -2Dh
.text:00002FC4 var_2C          = dword ptr -2Ch
.text:00002FC4 var_24          = dword ptr -24h
.text:00002FC4 var_20          = dword ptr -20h
.text:00002FC4 var_1C          = dword ptr -1Ch
.text:00002FC4 var_18          = dword ptr -18h
.text:00002FC4 var_14          = dword ptr -14h
.text:00002FC4 var_10          = dword ptr -10h
.text:00002FC4 var_C           = dword ptr -0Ch
.text:00002FC4 var_4           = dword ptr -4
.text:00002FC4 this            = dword ptr  8
.text:00002FC4 arg_4           = dword ptr  0Ch
.text:00002FC4 arg_8           = dword ptr  10h
.text:00002FC4 arg_C           = dword ptr  14h
.text:00002FC4
.text:00002FC4 ; FUNCTION CHUNK AT .text:000031BB SIZE 0000001E BYTES
.text:00002FC4
.text:00002FC4                 push    ebp
.text:00002FC5                 mov     ebp, esp
.text:00002FC7                 push    0FFFFFFFFh
.text:00002FC9                 push    offset __ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:00002FCE                 mov     eax, large fs:0
.text:00002FD4                 push    eax
.text:00002FD5                 push    ecx
.text:00002FD6                 sub     esp, 38h
.text:00002FD9                 push    ebx
.text:00002FDA                 push    esi
.text:00002FDB                 push    edi
.text:00002FDC                 lea     edi, [ebp+var_48]
.text:00002FDF                 mov     ecx, 0Eh
.text:00002FE4                 mov     eax, 0CCCCCCCCh
.text:00002FE9                 rep stosd
.text:00002FEB                 mov     eax, dword ptr ds:___security_cookie
.text:00002FF0                 xor     eax, ebp
.text:00002FF2                 push    eax
.text:00002FF3                 lea     eax, [ebp+var_C]
.text:00002FF6                 mov     large fs:0, eax
.text:00002FFC                 mov     [ebp+var_10], esp
.text:00002FFF                 mov     [ebp+var_4], 0
.text:00003006                 mov     ecx, [ebp+this]
.text:00003009                 sub     ecx, 0Ch        ; this
.text:0000300C                 call    ?Init@CHandler@NXz@NArchive@@AAEXXZ ; NArchive::NXz::CHandler::Init(void)
.text:00003011                 mov     [ebp+var_14], 0
.text:00003018                 jmp     short loc_3023
.text:0000301A ; ---------------------------------------------------------------------------
.text:0000301A
.text:0000301A loc_301A:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_3061j
.text:0000301A                 mov     eax, [ebp+var_14]
.text:0000301D                 add     eax, 1
.text:00003020                 mov     [ebp+var_14], eax
.text:00003023
.text:00003023 loc_3023:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+54j
.text:00003023                 mov     ecx, [ebp+var_14]
.text:00003026                 cmp     ecx, [ebp+arg_C]
.text:00003029                 jnb     short loc_3063
.text:0000302B                 mov     edx, [ebp+var_14]
.text:0000302E                 shl     edx, 4
.text:00003031                 add     edx, [ebp+arg_8]
.text:00003034                 push    edx             ; struct tagPROPVARIANT *
.text:00003035                 mov     eax, [ebp+var_14]
.text:00003038                 mov     ecx, [ebp+arg_4]
.text:0000303B                 mov     edx, [ecx+eax*4]
.text:0000303E                 push    edx             ; wchar_t *
.text:0000303F                 mov     ecx, [ebp+this]
.text:00003042                 add     ecx, 4          ; this
.text:00003045                 call    ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::CMultiMethodProps::SetProperty(wchar_t const *,tagPROPVARIANT const &)
.text:0000304A                 mov     [ebp+var_2C], eax
.text:0000304D                 mov     eax, [ebp+var_2C]
.text:00003050                 mov     [ebp+var_18], eax
.text:00003053                 cmp     [ebp+var_18], 0
.text:00003057                 jz      short loc_3061
.text:00003059                 mov     eax, [ebp+var_18]
.text:0000305C                 jmp     loc_31BB
.text:00003061 ; ---------------------------------------------------------------------------
.text:00003061
.text:00003061 loc_3061:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+93j
.text:00003061                 jmp     short loc_301A
.text:00003063 ; ---------------------------------------------------------------------------
.text:00003063
.text:00003063 loc_3063:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+65j
.text:00003063                 mov     ecx, [ebp+this]
.text:00003066                 add     ecx, 30h ; '0'  ; this
.text:00003069                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:0000306E                 mov     [ebp+var_2D], al
.text:00003071                 movzx   ecx, [ebp+var_2D]
.text:00003075                 test    ecx, ecx
.text:00003077                 jnz     short loc_30E5
.text:00003079                 mov     [ebp+var_1C], 0
.text:00003080                 jmp     short loc_308B
.text:00003082 ; ---------------------------------------------------------------------------
.text:00003082
.text:00003082 loc_3082:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint):loc_30D3j
.text:00003082                 mov     edx, [ebp+var_1C]
.text:00003085                 add     edx, 1
.text:00003088                 mov     [ebp+var_1C], edx
.text:0000308B
.text:0000308B loc_308B:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+BCj
.text:0000308B                 cmp     [ebp+var_1C], 9
.text:0000308F                 jnb     short loc_30D5
.text:00003091                 mov     eax, [ebp+var_1C]
.text:00003094                 lea     ecx, _g_NamePairs[eax*8]
.text:0000309B                 mov     [ebp+var_20], ecx
.text:0000309E                 mov     ecx, [ebp+this]
.text:000030A1                 add     ecx, 30h ; '0'
.text:000030A4                 call    ??BAString@@QBEPBDXZ ; AString::operator char const *(void)
.text:000030A9                 mov     [ebp+var_34], eax
.text:000030AC                 mov     edx, [ebp+var_20]
.text:000030AF                 mov     eax, [edx+4]
.text:000030B2                 push    eax             ; char *
.text:000030B3                 mov     ecx, [ebp+var_34]
.text:000030B6                 push    ecx             ; char *
.text:000030B7                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii(char const *,char const *)
.text:000030BC                 movzx   edx, al
.text:000030BF                 test    edx, edx
.text:000030C1                 jz      short loc_30D3
.text:000030C3                 mov     eax, [ebp+this]
.text:000030C6                 mov     ecx, [ebp+var_20]
.text:000030C9                 mov     edx, [ecx]
.text:000030CB                 mov     [eax+98h], edx
.text:000030D1                 jmp     short loc_30D5
.text:000030D3 ; ---------------------------------------------------------------------------
.text:000030D3
.text:000030D3 loc_30D3:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+FDj
.text:000030D3                 jmp     short loc_3082
.text:000030D5 ; ---------------------------------------------------------------------------
.text:000030D5
.text:000030D5 loc_30D5:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+CBj
.text:000030D5                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+10Dj
.text:000030D5                 cmp     [ebp+var_1C], 9
.text:000030D9                 jnz     short loc_30E5
.text:000030DB                 mov     eax, 80070057h
.text:000030E0                 jmp     loc_31BB
.text:000030E5 ; ---------------------------------------------------------------------------
.text:000030E5
.text:000030E5 loc_30E5:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+B3j
.text:000030E5                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+115j
.text:000030E5                 mov     ecx, [ebp+this]
.text:000030E8                 add     ecx, 4          ; this
.text:000030EB                 call    ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods(void)
.text:000030F0                 mov     [ebp+var_38], eax
.text:000030F3                 mov     eax, [ebp+var_38]
.text:000030F6                 push    eax
.text:000030F7                 mov     ecx, [ebp+this]
.text:000030FA                 add     ecx, 18h
.text:000030FD                 call    ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal(uint)
.text:00003102                 mov     ecx, [ebp+this]
.text:00003105                 add     ecx, 18h
.text:00003108                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:0000310D                 mov     [ebp+var_3C], eax
.text:00003110                 cmp     [ebp+var_3C], 1
.text:00003114                 jbe     short loc_3120
.text:00003116                 mov     eax, 80070057h
.text:0000311B                 jmp     loc_31BB
.text:00003120 ; ---------------------------------------------------------------------------
.text:00003120
.text:00003120 loc_3120:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+150j
.text:00003120                 mov     ecx, [ebp+this]
.text:00003123                 add     ecx, 18h
.text:00003126                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:0000312B                 mov     [ebp+var_40], eax
.text:0000312E                 cmp     [ebp+var_40], 1
.text:00003132                 jnz     short loc_3191
.text:00003134                 push    0
.text:00003136                 mov     ecx, [ebp+this]
.text:00003139                 add     ecx, 18h
.text:0000313C                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:00003141                 mov     [ebp+var_44], eax
.text:00003144                 mov     ecx, [ebp+var_44]
.text:00003147                 add     ecx, 0Ch
.text:0000314A                 mov     [ebp+var_24], ecx
.text:0000314D                 mov     ecx, [ebp+var_24] ; this
.text:00003150                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00003155                 mov     [ebp+var_45], al
.text:00003158                 movzx   edx, [ebp+var_45]
.text:0000315C                 test    edx, edx
.text:0000315E                 jz      short loc_3170
.text:00003160                 mov     eax, ds:_k_LZMA2_Name
.text:00003165                 push    eax
.text:00003166                 mov     ecx, [ebp+var_24]
.text:00003169                 call    ??4AString@@QAEAAV0@PBD@Z ; AString::operator=(char const *)
.text:0000316E                 jmp     short loc_3191
.text:00003170 ; ---------------------------------------------------------------------------
.text:00003170
.text:00003170 loc_3170:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+19Aj
.text:00003170                 mov     ecx, ds:_k_LZMA2_Name
.text:00003176                 push    ecx             ; char *
.text:00003177                 mov     ecx, [ebp+var_24] ; this
.text:0000317A                 call    ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ; AString::IsEqualTo_Ascii_NoCase(char const *)
.text:0000317F                 mov     [ebp+var_46], al
.text:00003182                 movzx   edx, [ebp+var_46]
.text:00003186                 test    edx, edx
.text:00003188                 jnz     short loc_3191
.text:0000318A                 mov     eax, 80070057h
.text:0000318F                 jmp     short loc_31BB
.text:00003191 ; ---------------------------------------------------------------------------
.text:00003191
.text:00003191 loc_3191:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+16Ej
.text:00003191                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1AAj ...
.text:00003191                 xor     eax, eax
.text:00003193                 jmp     short loc_31BB
.text:00003193 ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text:00003193
.text:00003195
.text:00003195 ; =============== S U B R O U T I N E =======================================
.text:00003195
.text:00003195
.text:00003195 __catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0 proc near
.text:00003195                                         ; DATA XREF: .xdata$x:000039A4o
.text:00003195                 mov     dword ptr [ebp-28h], 8007000Eh
.text:0000319C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000031A3                 mov     eax, offset $LN22_1
.text:000031A8                 retn
.text:000031A8 __catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0 endp
.text:000031A8
.text:000031A9 ; ---------------------------------------------------------------------------
.text:000031A9                 mov     eax, offset __tryend$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1
.text:000031AE                 retn
.text:000031AF ; ---------------------------------------------------------------------------
.text:000031AF
.text:000031AF __tryend$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1:
.text:000031AF                                         ; DATA XREF: .text:000031A9o
.text:000031AF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:000031B6                 jmp     short loc_31BB
.text:000031B8 ; ---------------------------------------------------------------------------
.text:000031B8
.text:000031B8 $LN22_1:                                ; DATA XREF: __catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0+Eo
.text:000031B8                 mov     eax, [ebp-28h]
.text:000031BB ; START OF FUNCTION CHUNK FOR ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:000031BB
.text:000031BB loc_31BB:                               ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+98j
.text:000031BB                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+11Cj ...
.text:000031BB                 mov     ecx, [ebp+var_C]
.text:000031BE                 mov     large fs:0, ecx
.text:000031C5                 pop     ecx
.text:000031C6                 pop     edi
.text:000031C7                 pop     esi
.text:000031C8                 pop     ebx
.text:000031C9                 add     esp, 48h
.text:000031CC                 cmp     ebp, esp
.text:000031CE                 call    __RTC_CheckEsp
.text:000031D3                 mov     esp, ebp
.text:000031D5                 pop     ebp
.text:000031D6                 retn    10h
.text:000031D6 ; END OF FUNCTION CHUNK FOR ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text:000031D6 ; ---------------------------------------------------------------------------
.text:000031D9                 db 0Bh dup(0CCh)
.text:000031E4
.text:000031E4 ; =============== S U B R O U T I N E =======================================
.text:000031E4
.text:000031E4 ; Attributes: bp-based frame
.text:000031E4
.text:000031E4 ; struct IInArchive * __stdcall NArchive::NXz::CreateArc(void)
.text:000031E4 ?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ proc near
.text:000031E4                                         ; DATA XREF: .rdata:00000124o
.text:000031E4
.text:000031E4 var_18          = dword ptr -18h
.text:000031E4 var_14          = dword ptr -14h
.text:000031E4 var_10          = dword ptr -10h
.text:000031E4 var_C           = dword ptr -0Ch
.text:000031E4 var_4           = dword ptr -4
.text:000031E4
.text:000031E4                 push    ebp
.text:000031E5                 mov     ebp, esp
.text:000031E7                 push    0FFFFFFFFh
.text:000031E9                 push    offset __ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
.text:000031EE                 mov     eax, large fs:0
.text:000031F4                 push    eax
.text:000031F5                 sub     esp, 0Ch
.text:000031F8                 mov     [ebp+var_18], 0CCCCCCCCh
.text:000031FF                 mov     [ebp+var_14], 0CCCCCCCCh
.text:00003206                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000320D                 mov     eax, dword ptr ds:___security_cookie
.text:00003212                 xor     eax, ebp
.text:00003214                 push    eax
.text:00003215                 lea     eax, [ebp+var_C]
.text:00003218                 mov     large fs:0, eax
.text:0000321E                 push    0B8h ; '+'      ; unsigned int
.text:00003223                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00003228                 add     esp, 4
.text:0000322B                 mov     [ebp+var_14], eax
.text:0000322E                 mov     [ebp+var_4], 0
.text:00003235                 cmp     [ebp+var_14], 0
.text:00003239                 jz      short loc_3248
.text:0000323B                 mov     ecx, [ebp+var_14] ; this
.text:0000323E                 call    ??0CHandler@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CHandler::CHandler(void)
.text:00003243                 mov     [ebp+var_18], eax
.text:00003246                 jmp     short loc_324F
.text:00003248 ; ---------------------------------------------------------------------------
.text:00003248
.text:00003248 loc_3248:                               ; CODE XREF: NArchive::NXz::CreateArc(void)+55j
.text:00003248                 mov     [ebp+var_18], 0
.text:0000324F
.text:0000324F loc_324F:                               ; CODE XREF: NArchive::NXz::CreateArc(void)+62j
.text:0000324F                 mov     eax, [ebp+var_18]
.text:00003252                 mov     [ebp+var_10], eax
.text:00003255                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000325C                 mov     eax, [ebp+var_10]
.text:0000325F                 mov     ecx, [ebp+var_C]
.text:00003262                 mov     large fs:0, ecx
.text:00003269                 pop     ecx
.text:0000326A                 add     esp, 18h
.text:0000326D                 cmp     ebp, esp
.text:0000326F                 call    __RTC_CheckEsp
.text:00003274                 mov     esp, ebp
.text:00003276                 pop     ebp
.text:00003277                 retn
.text:00003277 ?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ endp
.text:00003277
.text:00003277 ; ---------------------------------------------------------------------------
.text:00003278                 db 0Ch dup(0CCh)
.text:00003284
.text:00003284 ; =============== S U B R O U T I N E =======================================
.text:00003284
.text:00003284 ; Attributes: bp-based frame
.text:00003284
.text:00003284 ; struct IOutArchive * __stdcall NArchive::NXz::CreateArcOut(void)
.text:00003284 ?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ proc near
.text:00003284                                         ; DATA XREF: .rdata:00000128o
.text:00003284
.text:00003284 var_1C          = dword ptr -1Ch
.text:00003284 var_18          = dword ptr -18h
.text:00003284 var_14          = dword ptr -14h
.text:00003284 var_10          = dword ptr -10h
.text:00003284 var_C           = dword ptr -0Ch
.text:00003284 var_4           = dword ptr -4
.text:00003284
.text:00003284                 push    ebp
.text:00003285                 mov     ebp, esp
.text:00003287                 push    0FFFFFFFFh
.text:00003289                 push    offset __ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
.text:0000328E                 mov     eax, large fs:0
.text:00003294                 push    eax
.text:00003295                 sub     esp, 10h
.text:00003298                 mov     eax, 0CCCCCCCCh
.text:0000329D                 mov     [ebp+var_1C], eax
.text:000032A0                 mov     [ebp+var_18], eax
.text:000032A3                 mov     [ebp+var_14], eax
.text:000032A6                 mov     [ebp+var_10], eax
.text:000032A9                 mov     eax, dword ptr ds:___security_cookie
.text:000032AE                 xor     eax, ebp
.text:000032B0                 push    eax
.text:000032B1                 lea     eax, [ebp+var_C]
.text:000032B4                 mov     large fs:0, eax
.text:000032BA                 push    0B8h ; '+'      ; unsigned int
.text:000032BF                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:000032C4                 add     esp, 4
.text:000032C7                 mov     [ebp+var_14], eax
.text:000032CA                 mov     [ebp+var_4], 0
.text:000032D1                 cmp     [ebp+var_14], 0
.text:000032D5                 jz      short loc_32E4
.text:000032D7                 mov     ecx, [ebp+var_14] ; this
.text:000032DA                 call    ??0CHandler@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CHandler::CHandler(void)
.text:000032DF                 mov     [ebp+var_18], eax
.text:000032E2                 jmp     short loc_32EB
.text:000032E4 ; ---------------------------------------------------------------------------
.text:000032E4
.text:000032E4 loc_32E4:                               ; CODE XREF: NArchive::NXz::CreateArcOut(void)+51j
.text:000032E4                 mov     [ebp+var_18], 0
.text:000032EB
.text:000032EB loc_32EB:                               ; CODE XREF: NArchive::NXz::CreateArcOut(void)+5Ej
.text:000032EB                 mov     eax, [ebp+var_18]
.text:000032EE                 mov     [ebp+var_10], eax
.text:000032F1                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000032F8                 cmp     [ebp+var_10], 0
.text:000032FC                 jz      short loc_3309
.text:000032FE                 mov     ecx, [ebp+var_10]
.text:00003301                 add     ecx, 8
.text:00003304                 mov     [ebp+var_1C], ecx
.text:00003307                 jmp     short loc_3310
.text:00003309 ; ---------------------------------------------------------------------------
.text:00003309
.text:00003309 loc_3309:                               ; CODE XREF: NArchive::NXz::CreateArcOut(void)+78j
.text:00003309                 mov     [ebp+var_1C], 0
.text:00003310
.text:00003310 loc_3310:                               ; CODE XREF: NArchive::NXz::CreateArcOut(void)+83j
.text:00003310                 mov     eax, [ebp+var_1C]
.text:00003313                 mov     ecx, [ebp+var_C]
.text:00003316                 mov     large fs:0, ecx
.text:0000331D                 pop     ecx
.text:0000331E                 add     esp, 1Ch
.text:00003321                 cmp     ebp, esp
.text:00003323                 call    __RTC_CheckEsp
.text:00003328                 mov     esp, ebp
.text:0000332A                 pop     ebp
.text:0000332B                 retn
.text:0000332B ?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ endp
.text:0000332B
.text:0000332B _text           ends
.text:0000332B
.rtc$TMZ:0000332C ; ===========================================================================
.rtc$TMZ:0000332C
.rtc$TMZ:0000332C ; Segment type: Pure data
.rtc$TMZ:0000332C ; Segment permissions: Read
.rtc$TMZ:0000332C _rtc$TMZ        segment dword public 'DATA' use32
.rtc$TMZ:0000332C                 assume cs:_rtc$TMZ
.rtc$TMZ:0000332C                 ;org 332Ch
.rtc$TMZ:0000332C ; COMDAT (pick any)
.rtc$TMZ:0000332C __RTC_Shutdown_rtc$TMZ dd offset __RTC_Shutdown
.rtc$TMZ:0000332C _rtc$TMZ        ends
.rtc$TMZ:0000332C
.rtc$IMZ:00003330 ; ===========================================================================
.rtc$IMZ:00003330
.rtc$IMZ:00003330 ; Segment type: Pure data
.rtc$IMZ:00003330 ; Segment permissions: Read
.rtc$IMZ:00003330 _rtc$IMZ        segment dword public 'DATA' use32
.rtc$IMZ:00003330                 assume cs:_rtc$IMZ
.rtc$IMZ:00003330                 ;org 3330h
.rtc$IMZ:00003330 ; COMDAT (pick any)
.rtc$IMZ:00003330 __RTC_InitBase_rtc$IMZ dd offset __RTC_InitBase
.rtc$IMZ:00003330 _rtc$IMZ        ends
.rtc$IMZ:00003330
.text$x:00003334 ; ===========================================================================
.text$x:00003334
.text$x:00003334 ; Segment type: Pure code
.text$x:00003334 ; Segment permissions: Read/Execute
.text$x:00003334 _text$x         segment para public 'CODE' use32
.text$x:00003334                 assume cs:_text$x
.text$x:00003334                 ;org 3334h
.text$x:00003334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003334
.text$x:00003334 ; =============== S U B R O U T I N E =======================================
.text$x:00003334
.text$x:00003334
.text$x:00003334 __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0 proc near
.text$x:00003334                                         ; DATA XREF: .xdata$x:0000367Co
.text$x:00003334                 mov     ecx, [ebp-10h]
.text$x:00003337                 add     ecx, 10h        ; this
.text$x:0000333A                 jmp     ??1CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)
.text$x:0000333A __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0 endp
.text$x:0000333A
.text$x:0000333F
.text$x:0000333F ; =============== S U B R O U T I N E =======================================
.text$x:0000333F
.text$x:0000333F
.text$x:0000333F __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1 proc near
.text$x:0000333F                                         ; DATA XREF: .xdata$x:00003684o
.text$x:0000333F                 mov     ecx, [ebp-10h]
.text$x:00003342                 add     ecx, 9Ch ; '£'
.text$x:00003348                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00003348 __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1 endp
.text$x:00003348
.text$x:0000334D
.text$x:0000334D ; =============== S U B R O U T I N E =======================================
.text$x:0000334D
.text$x:0000334D
.text$x:0000334D __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$2 proc near
.text$x:0000334D                                         ; DATA XREF: .xdata$x:0000368Co
.text$x:0000334D                 mov     ecx, [ebp-10h]
.text$x:00003350                 add     ecx, 0A0h ; 'á'
.text$x:00003356                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003356 __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$2 endp
.text$x:00003356
.text$x:0000335B
.text$x:0000335B ; =============== S U B R O U T I N E =======================================
.text$x:0000335B
.text$x:0000335B
.text$x:0000335B __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$3 proc near
.text$x:0000335B                                         ; DATA XREF: .xdata$x:00003694o
.text$x:0000335B                 mov     ecx, [ebp-10h]
.text$x:0000335E                 add     ecx, 0A8h ; '¿' ; this
.text$x:00003364                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003364 __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$3 endp
.text$x:00003364
.text$x:00003369
.text$x:00003369 ; =============== S U B R O U T I N E =======================================
.text$x:00003369
.text$x:00003369
.text$x:00003369 __ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ proc near
.text$x:00003369                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+5o
.text$x:00003369
.text$x:00003369 arg_4           = dword ptr  8
.text$x:00003369
.text$x:00003369                 mov     edx, [esp+arg_4]
.text$x:0000336D                 lea     eax, [edx+0Ch]
.text$x:00003370                 mov     ecx, [edx-8]
.text$x:00003373                 xor     ecx, eax
.text$x:00003375                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000337A                 mov     eax, offset __ehfuncinfo$??0CHandler@NXz@NArchive@@QAE@XZ
.text$x:0000337F                 jmp     ___CxxFrameHandler3
.text$x:0000337F __ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ endp
.text$x:0000337F
.text$x:00003384
.text$x:00003384 ; =============== S U B R O U T I N E =======================================
.text$x:00003384
.text$x:00003384
.text$x:00003384 __unwindfunclet$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:00003384                                         ; DATA XREF: .xdata$x:000036ECo
.text$x:00003384                 lea     ecx, [ebp-24h]  ; this
.text$x:00003387                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00003387 __unwindfunclet$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:00003387
.text$x:0000338C
.text$x:0000338C ; =============== S U B R O U T I N E =======================================
.text$x:0000338C
.text$x:0000338C
.text$x:0000338C __ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z proc near
.text$x:0000338C                                         ; DATA XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+5o
.text$x:0000338C
.text$x:0000338C arg_4           = dword ptr  8
.text$x:0000338C
.text$x:0000338C                 mov     edx, [esp+arg_4]
.text$x:00003390                 lea     eax, [edx+0Ch]
.text$x:00003393                 mov     ecx, [edx-48h]
.text$x:00003396                 xor     ecx, eax
.text$x:00003398                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000339D                 mov     eax, offset __ehfuncinfo$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.text$x:000033A2                 jmp     ___CxxFrameHandler3
.text$x:000033A2 __ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z endp
.text$x:000033A2
.text$x:000033A7
.text$x:000033A7 ; =============== S U B R O U T I N E =======================================
.text$x:000033A7
.text$x:000033A7
.text$x:000033A7 __unwindfunclet$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 proc near
.text$x:000033A7                                         ; DATA XREF: .xdata$x:0000374Co
.text$x:000033A7                 lea     ecx, [ebp-24h]  ; this
.text$x:000033AA                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:000033AA __unwindfunclet$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2 endp
.text$x:000033AA
.text$x:000033AF
.text$x:000033AF ; =============== S U B R O U T I N E =======================================
.text$x:000033AF
.text$x:000033AF
.text$x:000033AF __ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z proc near
.text$x:000033AF                                         ; DATA XREF: NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+5o
.text$x:000033AF
.text$x:000033AF arg_4           = dword ptr  8
.text$x:000033AF
.text$x:000033AF                 mov     edx, [esp+arg_4]
.text$x:000033B3                 lea     eax, [edx+0Ch]
.text$x:000033B6                 mov     ecx, [edx-44h]
.text$x:000033B9                 xor     ecx, eax
.text$x:000033BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033C0                 mov     eax, offset __ehfuncinfo$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.text$x:000033C5                 jmp     ___CxxFrameHandler3
.text$x:000033C5 __ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z endp
.text$x:000033C5
.text$x:000033CA
.text$x:000033CA ; =============== S U B R O U T I N E =======================================
.text$x:000033CA
.text$x:000033CA
.text$x:000033CA __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0 proc near
.text$x:000033CA                                         ; DATA XREF: .xdata$x:00003780o
.text$x:000033CA                 lea     ecx, [ebp-4198h] ; this
.text$x:000033D0                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000033D0 __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0 endp
.text$x:000033D0
.text$x:000033D5
.text$x:000033D5 ; =============== S U B R O U T I N E =======================================
.text$x:000033D5
.text$x:000033D5
.text$x:000033D5 __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1 proc near
.text$x:000033D5                                         ; DATA XREF: .xdata$x:00003788o
.text$x:000033D5                 lea     ecx, [ebp-4170h] ; this
.text$x:000033DB                 jmp     ??1CXzsCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzsCPP::~CXzsCPP(void)
.text$x:000033DB __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1 endp
.text$x:000033DB
.text$x:000033E0
.text$x:000033E0 ; =============== S U B R O U T I N E =======================================
.text$x:000033E0
.text$x:000033E0
.text$x:000033E0 __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2 proc near
.text$x:000033E0                                         ; DATA XREF: .xdata$x:00003790o
.text$x:000033E0                 lea     ecx, [ebp-41A8h] ; this
.text$x:000033E6                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:000033E6 __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2 endp
.text$x:000033E6
.text$x:000033EB
.text$x:000033EB ; =============== S U B R O U T I N E =======================================
.text$x:000033EB
.text$x:000033EB
.text$x:000033EB __ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z proc near
.text$x:000033EB                                         ; DATA XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+5o
.text$x:000033EB
.text$x:000033EB arg_4           = dword ptr  8
.text$x:000033EB
.text$x:000033EB                 mov     edx, [esp+arg_4]
.text$x:000033EF                 lea     eax, [edx+0Ch]
.text$x:000033F2                 mov     ecx, [edx-41C4h]
.text$x:000033F8                 xor     ecx, eax
.text$x:000033FA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000033FF                 mov     ecx, [edx-4]
.text$x:00003402                 xor     ecx, eax
.text$x:00003404                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003409                 mov     eax, offset __ehfuncinfo$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.text$x:0000340E                 jmp     ___CxxFrameHandler3
.text$x:0000340E __ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z endp
.text$x:0000340E
.text$x:00003413
.text$x:00003413 ; =============== S U B R O U T I N E =======================================
.text$x:00003413
.text$x:00003413
.text$x:00003413 __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$0 proc near
.text$x:00003413                                         ; DATA XREF: .xdata$x:000037C4o
.text$x:00003413                 lea     ecx, [ebp-50h]  ; this
.text$x:00003416                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003416 __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$0 endp
.text$x:00003416
.text$x:0000341B
.text$x:0000341B ; =============== S U B R O U T I N E =======================================
.text$x:0000341B
.text$x:0000341B
.text$x:0000341B __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1 proc near
.text$x:0000341B                                         ; DATA XREF: .xdata$x:000037BCo
.text$x:0000341B                 mov     eax, [ebp-5Ch]
.text$x:0000341E                 and     eax, 1
.text$x:00003421                 jz      locret_3433
.text$x:00003427                 and     dword ptr [ebp-5Ch], 0FFFFFFFEh
.text$x:0000342B                 mov     ecx, [ebp+8]    ; this
.text$x:0000342E                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003433 ; ---------------------------------------------------------------------------
.text$x:00003433
.text$x:00003433 locret_3433:                            ; CODE XREF: __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1+6j
.text$x:00003433                 retn
.text$x:00003433 __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1 endp
.text$x:00003433
.text$x:00003434
.text$x:00003434 ; =============== S U B R O U T I N E =======================================
.text$x:00003434
.text$x:00003434
.text$x:00003434 __ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z proc near
.text$x:00003434                                         ; DATA XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+5o
.text$x:00003434
.text$x:00003434 arg_4           = dword ptr  8
.text$x:00003434
.text$x:00003434                 mov     edx, [esp+arg_4]
.text$x:00003438                 lea     eax, [edx+0Ch]
.text$x:0000343B                 mov     ecx, [edx-6Ch]
.text$x:0000343E                 xor     ecx, eax
.text$x:00003440                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003445                 mov     ecx, [edx-4]
.text$x:00003448                 xor     ecx, eax
.text$x:0000344A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000344F                 mov     eax, offset __ehfuncinfo$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
.text$x:00003454                 jmp     ___CxxFrameHandler3
.text$x:00003454 __ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z endp
.text$x:00003454
.text$x:00003459
.text$x:00003459 ; =============== S U B R O U T I N E =======================================
.text$x:00003459
.text$x:00003459
.text$x:00003459 __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$0 proc near
.text$x:00003459                                         ; DATA XREF: .xdata$x:000037F8o
.text$x:00003459                 lea     ecx, [ebp-24h]  ; this
.text$x:0000345C                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000345C __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$0 endp
.text$x:0000345C
.text$x:00003461
.text$x:00003461 ; =============== S U B R O U T I N E =======================================
.text$x:00003461
.text$x:00003461
.text$x:00003461 __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$1 proc near
.text$x:00003461                                         ; DATA XREF: .xdata$x:00003800o
.text$x:00003461                 lea     ecx, [ebp-38h]  ; this
.text$x:00003464                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003464 __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$1 endp
.text$x:00003464
.text$x:00003469
.text$x:00003469 ; =============== S U B R O U T I N E =======================================
.text$x:00003469
.text$x:00003469
.text$x:00003469 __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2 proc near
.text$x:00003469                                         ; DATA XREF: .xdata$x:000037F0o
.text$x:00003469                 mov     eax, [ebp-40h]
.text$x:0000346C                 and     eax, 1
.text$x:0000346F                 jz      locret_3481
.text$x:00003475                 and     dword ptr [ebp-40h], 0FFFFFFFEh
.text$x:00003479                 mov     ecx, [ebp+8]    ; this
.text$x:0000347C                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00003481 ; ---------------------------------------------------------------------------
.text$x:00003481
.text$x:00003481 locret_3481:                            ; CODE XREF: __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2+6j
.text$x:00003481                 retn
.text$x:00003481 __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2 endp
.text$x:00003481
.text$x:00003482
.text$x:00003482 ; =============== S U B R O U T I N E =======================================
.text$x:00003482
.text$x:00003482
.text$x:00003482 __ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z proc near
.text$x:00003482                                         ; DATA XREF: NArchive::NXz::GetCheckString(CXzs const &)+5o
.text$x:00003482
.text$x:00003482 arg_4           = dword ptr  8
.text$x:00003482
.text$x:00003482                 mov     edx, [esp+arg_4]
.text$x:00003486                 lea     eax, [edx+0Ch]
.text$x:00003489                 mov     ecx, [edx-3Ch]
.text$x:0000348C                 xor     ecx, eax
.text$x:0000348E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003493                 mov     eax, offset __ehfuncinfo$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
.text$x:00003498                 jmp     ___CxxFrameHandler3
.text$x:00003498 __ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z endp
.text$x:00003498
.text$x:0000349D
.text$x:0000349D ; =============== S U B R O U T I N E =======================================
.text$x:0000349D
.text$x:0000349D
.text$x:0000349D __ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z proc near
.text$x:0000349D                                         ; DATA XREF: NArchive::NXz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)+5o
.text$x:0000349D
.text$x:0000349D arg_4           = dword ptr  8
.text$x:0000349D
.text$x:0000349D                 mov     edx, [esp+arg_4]
.text$x:000034A1                 lea     eax, [edx+0Ch]
.text$x:000034A4                 mov     ecx, [edx-1Ch]
.text$x:000034A7                 xor     ecx, eax
.text$x:000034A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000034AE                 mov     eax, offset __ehfuncinfo$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.text$x:000034B3                 jmp     ___CxxFrameHandler3
.text$x:000034B3 __ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z endp
.text$x:000034B3
.text$x:000034B8
.text$x:000034B8 ; =============== S U B R O U T I N E =======================================
.text$x:000034B8
.text$x:000034B8
.text$x:000034B8 __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 proc near
.text$x:000034B8                                         ; DATA XREF: .xdata$x:000038D4o
.text$x:000034B8                 lea     ecx, [ebp-30h]
.text$x:000034BB                 jmp     ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)
.text$x:000034BB __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2 endp
.text$x:000034BB
.text$x:000034C0
.text$x:000034C0 ; =============== S U B R O U T I N E =======================================
.text$x:000034C0
.text$x:000034C0
.text$x:000034C0 __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 proc near
.text$x:000034C0                                         ; DATA XREF: .xdata$x:000038DCo
.text$x:000034C0                 mov     eax, [ebp-758h]
.text$x:000034C6                 push    eax             ; void *
.text$x:000034C7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000034CC                 pop     ecx
.text$x:000034CD                 retn
.text$x:000034CD __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3 endp
.text$x:000034CD
.text$x:000034CE
.text$x:000034CE ; =============== S U B R O U T I N E =======================================
.text$x:000034CE
.text$x:000034CE
.text$x:000034CE __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 proc near
.text$x:000034CE                                         ; DATA XREF: .xdata$x:000038E4o
.text$x:000034CE                 lea     ecx, [ebp-48h]
.text$x:000034D1                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:000034D1 __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4 endp
.text$x:000034D1
.text$x:000034D6
.text$x:000034D6 ; =============== S U B R O U T I N E =======================================
.text$x:000034D6
.text$x:000034D6
.text$x:000034D6 __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 proc near
.text$x:000034D6                                         ; DATA XREF: .xdata$x:000038ECo
.text$x:000034D6                 lea     ecx, [ebp-73Ch] ; this
.text$x:000034DC                 jmp     ??1CDecoder@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CDecoder::~CDecoder(void)
.text$x:000034DC __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5 endp
.text$x:000034DC
.text$x:000034E1
.text$x:000034E1 ; =============== S U B R O U T I N E =======================================
.text$x:000034E1
.text$x:000034E1
.text$x:000034E1 __ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z proc near
.text$x:000034E1                                         ; DATA XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+5o
.text$x:000034E1
.text$x:000034E1 arg_4           = dword ptr  8
.text$x:000034E1
.text$x:000034E1                 mov     edx, [esp+arg_4]
.text$x:000034E5                 lea     eax, [edx+0Ch]
.text$x:000034E8                 mov     ecx, [edx-7BCh]
.text$x:000034EE                 xor     ecx, eax
.text$x:000034F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000034F5                 mov     ecx, [edx-8]
.text$x:000034F8                 xor     ecx, eax
.text$x:000034FA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000034FF                 mov     eax, offset __ehfuncinfo$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.text$x:00003504                 jmp     ___CxxFrameHandler3
.text$x:00003504 __ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z endp
.text$x:00003504
.text$x:00003509
.text$x:00003509 ; =============== S U B R O U T I N E =======================================
.text$x:00003509
.text$x:00003509
.text$x:00003509 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 proc near
.text$x:00003509                                         ; DATA XREF: .xdata$x:0000394Co
.text$x:00003509                 lea     ecx, [ebp-74h]  ; this
.text$x:0000350C                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000350C __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2 endp
.text$x:0000350C
.text$x:00003511
.text$x:00003511 ; =============== S U B R O U T I N E =======================================
.text$x:00003511
.text$x:00003511
.text$x:00003511 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 proc near
.text$x:00003511                                         ; DATA XREF: .xdata$x:00003954o
.text$x:00003511                 lea     ecx, [ebp-98h]  ; this
.text$x:00003517                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:00003517 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3 endp
.text$x:00003517
.text$x:0000351C
.text$x:0000351C ; =============== S U B R O U T I N E =======================================
.text$x:0000351C
.text$x:0000351C
.text$x:0000351C __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 proc near
.text$x:0000351C                                         ; DATA XREF: .xdata$x:0000395Co
.text$x:0000351C                 lea     ecx, [ebp-0FCh]
.text$x:00003522                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00003522 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4 endp
.text$x:00003522
.text$x:00003527
.text$x:00003527 ; =============== S U B R O U T I N E =======================================
.text$x:00003527
.text$x:00003527
.text$x:00003527 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 proc near
.text$x:00003527                                         ; DATA XREF: .xdata$x:00003964o
.text$x:00003527                 lea     ecx, [ebp-138h] ; this
.text$x:0000352D                 jmp     ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text$x:0000352D __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5 endp
.text$x:0000352D
.text$x:00003532
.text$x:00003532 ; =============== S U B R O U T I N E =======================================
.text$x:00003532
.text$x:00003532
.text$x:00003532 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 proc near
.text$x:00003532                                         ; DATA XREF: .xdata$x:0000396Co
.text$x:00003532                 mov     eax, [ebp-208h]
.text$x:00003538                 push    eax             ; void *
.text$x:00003539                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000353E                 pop     ecx
.text$x:0000353F                 retn
.text$x:0000353F __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6 endp
.text$x:0000353F
.text$x:00003540
.text$x:00003540 ; =============== S U B R O U T I N E =======================================
.text$x:00003540
.text$x:00003540
.text$x:00003540 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 proc near
.text$x:00003540                                         ; DATA XREF: .xdata$x:00003974o
.text$x:00003540                 lea     ecx, [ebp-160h]
.text$x:00003546                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:00003546 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 endp
.text$x:00003546
.text$x:0000354B
.text$x:0000354B ; =============== S U B R O U T I N E =======================================
.text$x:0000354B
.text$x:0000354B
.text$x:0000354B __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 proc near
.text$x:0000354B                                         ; DATA XREF: .xdata$x:0000397Co
.text$x:0000354B                 lea     ecx, [ebp-1C0h]
.text$x:00003551                 jmp     ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)
.text$x:00003551 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8 endp
.text$x:00003551
.text$x:00003556
.text$x:00003556 ; =============== S U B R O U T I N E =======================================
.text$x:00003556
.text$x:00003556
.text$x:00003556 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 proc near
.text$x:00003556                                         ; DATA XREF: .xdata$x:00003984o
.text$x:00003556                 mov     eax, [ebp-230h]
.text$x:0000355C                 push    eax             ; void *
.text$x:0000355D                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003562                 pop     ecx
.text$x:00003563                 retn
.text$x:00003563 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9 endp
.text$x:00003563
.text$x:00003564
.text$x:00003564 ; =============== S U B R O U T I N E =======================================
.text$x:00003564
.text$x:00003564
.text$x:00003564 __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 proc near
.text$x:00003564                                         ; DATA XREF: .xdata$x:0000398Co
.text$x:00003564                 lea     ecx, [ebp-1DCh]
.text$x:0000356A                 jmp     ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)
.text$x:0000356A __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10 endp
.text$x:0000356A
.text$x:0000356F
.text$x:0000356F ; =============== S U B R O U T I N E =======================================
.text$x:0000356F
.text$x:0000356F
.text$x:0000356F __ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z proc near
.text$x:0000356F                                         ; DATA XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5o
.text$x:0000356F
.text$x:0000356F arg_4           = dword ptr  8
.text$x:0000356F
.text$x:0000356F                 mov     edx, [esp+arg_4]
.text$x:00003573                 lea     eax, [edx+0Ch]
.text$x:00003576                 mov     ecx, [edx-2F0h]
.text$x:0000357C                 xor     ecx, eax
.text$x:0000357E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003583                 mov     ecx, [edx-8]
.text$x:00003586                 xor     ecx, eax
.text$x:00003588                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000358D                 mov     eax, offset __ehfuncinfo$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.text$x:00003592                 jmp     ___CxxFrameHandler3
.text$x:00003592 __ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z endp
.text$x:00003592
.text$x:00003597
.text$x:00003597 ; =============== S U B R O U T I N E =======================================
.text$x:00003597
.text$x:00003597
.text$x:00003597 __ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z proc near
.text$x:00003597                                         ; DATA XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+5o
.text$x:00003597
.text$x:00003597 arg_4           = dword ptr  8
.text$x:00003597
.text$x:00003597                 mov     edx, [esp+arg_4]
.text$x:0000359B                 lea     eax, [edx+0Ch]
.text$x:0000359E                 mov     ecx, [edx-4Ch]
.text$x:000035A1                 xor     ecx, eax
.text$x:000035A3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035A8                 mov     eax, offset __ehfuncinfo$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.text$x:000035AD                 jmp     ___CxxFrameHandler3
.text$x:000035AD __ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z endp
.text$x:000035AD
.text$x:000035B2
.text$x:000035B2 ; =============== S U B R O U T I N E =======================================
.text$x:000035B2
.text$x:000035B2
.text$x:000035B2 __unwindfunclet$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ$0 proc near
.text$x:000035B2                                         ; DATA XREF: .xdata$x:000039F4o
.text$x:000035B2                 mov     eax, [ebp-14h]
.text$x:000035B5                 push    eax             ; void *
.text$x:000035B6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000035BB                 pop     ecx
.text$x:000035BC                 retn
.text$x:000035BC __unwindfunclet$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ$0 endp
.text$x:000035BC
.text$x:000035BD
.text$x:000035BD ; =============== S U B R O U T I N E =======================================
.text$x:000035BD
.text$x:000035BD
.text$x:000035BD __ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ proc near
.text$x:000035BD                                         ; DATA XREF: NArchive::NXz::CreateArc(void)+5o
.text$x:000035BD
.text$x:000035BD arg_4           = dword ptr  8
.text$x:000035BD
.text$x:000035BD                 mov     edx, [esp+arg_4]
.text$x:000035C1                 lea     eax, [edx+0Ch]
.text$x:000035C4                 mov     ecx, [edx-10h]
.text$x:000035C7                 xor     ecx, eax
.text$x:000035C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035CE                 mov     eax, offset __ehfuncinfo$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
.text$x:000035D3                 jmp     ___CxxFrameHandler3
.text$x:000035D3 __ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ endp
.text$x:000035D3
.text$x:000035D8
.text$x:000035D8 ; =============== S U B R O U T I N E =======================================
.text$x:000035D8
.text$x:000035D8
.text$x:000035D8 __unwindfunclet$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ$0 proc near
.text$x:000035D8                                         ; DATA XREF: .xdata$x:00003A20o
.text$x:000035D8                 mov     eax, [ebp-14h]
.text$x:000035DB                 push    eax             ; void *
.text$x:000035DC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000035E1                 pop     ecx
.text$x:000035E2                 retn
.text$x:000035E2 __unwindfunclet$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ$0 endp
.text$x:000035E2
.text$x:000035E3
.text$x:000035E3 ; =============== S U B R O U T I N E =======================================
.text$x:000035E3
.text$x:000035E3
.text$x:000035E3 __ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ proc near
.text$x:000035E3                                         ; DATA XREF: NArchive::NXz::CreateArcOut(void)+5o
.text$x:000035E3
.text$x:000035E3 arg_4           = dword ptr  8
.text$x:000035E3
.text$x:000035E3                 mov     edx, [esp+arg_4]
.text$x:000035E7                 lea     eax, [edx+0Ch]
.text$x:000035EA                 mov     ecx, [edx-14h]
.text$x:000035ED                 xor     ecx, eax
.text$x:000035EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000035F4                 mov     eax, offset __ehfuncinfo$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
.text$x:000035F9                 jmp     ___CxxFrameHandler3
.text$x:000035F9 __ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ endp
.text$x:000035F9
.text$x:000035F9 ; ---------------------------------------------------------------------------
.text$x:000035FE                 align 10h
.text$x:000035FE _text$x         ends
.text$x:000035FE
.rdata:00003600 ; ===========================================================================
.rdata:00003600
.rdata:00003600 ; Segment type: Pure data
.rdata:00003600 ; Segment permissions: Read
.rdata:00003600 _rdata          segment dword public 'DATA' use32
.rdata:00003600                 assume cs:_rdata
.rdata:00003600                 ;org 3600h
.rdata:00003600 ; COMDAT (pick largest)
.rdata:00003600                 dd offset ??_R4CHandler@NXz@NArchive@@6BISetProperties@@@ ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata:00003604                 public ??_7CHandler@NXz@NArchive@@6BISetProperties@@@
.rdata:00003604 ; const NArchive::NXz::CHandler::`vftable'{for `ISetProperties'}
.rdata:00003604 ??_7CHandler@NXz@NArchive@@6BISetProperties@@@ dd offset ?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.rdata:00003604                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+93o
.rdata:00003604                                         ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{12}' (_GUID const &,void * *)
.rdata:00003608                 dd offset ?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{12}' (void)
.rdata:0000360C                 dd offset ?Release@CHandler@NXz@NArchive@@WM@AGKXZ ; [thunk]:NArchive::NXz::CHandler::Release`adjustor{12}' (void)
.rdata:00003610                 dd offset ?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)
.rdata:00003610 _rdata          ends
.rdata:00003610
.rdata:00003614 ; ===========================================================================
.rdata:00003614
.rdata:00003614 ; Segment type: Pure data
.rdata:00003614 ; Segment permissions: Read
.rdata:00003614 _rdata          segment dword public 'DATA' use32
.rdata:00003614                 assume cs:_rdata
.rdata:00003614                 ;org 3614h
.rdata:00003614 ; COMDAT (pick largest)
.rdata:00003614                 dd offset ??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@ ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata:00003618                 public ??_7CHandler@NXz@NArchive@@6BIOutArchive@@@
.rdata:00003618 ; const NArchive::NXz::CHandler::`vftable'{for `IOutArchive'}
.rdata:00003618 ??_7CHandler@NXz@NArchive@@6BIOutArchive@@@ dd offset ?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.rdata:00003618                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+89o
.rdata:00003618                                         ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)
.rdata:0000361C                 dd offset ?AddRef@CHandler@NXz@NArchive@@W7AGKXZ ; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{8}' (void)
.rdata:00003620                 dd offset ?Release@CHandler@NXz@NArchive@@W7AGKXZ ; [thunk]:NArchive::NXz::CHandler::Release`adjustor{8}' (void)
.rdata:00003624                 dd offset ?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)
.rdata:00003628                 dd offset ?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetFileTimeType(uint *)
.rdata:00003628 _rdata          ends
.rdata:00003628
.rdata:0000362C ; ===========================================================================
.rdata:0000362C
.rdata:0000362C ; Segment type: Pure data
.rdata:0000362C ; Segment permissions: Read
.rdata:0000362C _rdata          segment dword public 'DATA' use32
.rdata:0000362C                 assume cs:_rdata
.rdata:0000362C                 ;org 362Ch
.rdata:0000362C ; COMDAT (pick largest)
.rdata:0000362C                 dd offset ??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata:00003630                 public ??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@
.rdata:00003630 ; const NArchive::NXz::CHandler::`vftable'{for `IArchiveOpenSeq'}
.rdata:00003630 ??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ dd offset ?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.rdata:00003630                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+7Fo
.rdata:00003630                                         ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)
.rdata:00003634                 dd offset ?AddRef@CHandler@NXz@NArchive@@W3AGKXZ ; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{4}' (void)
.rdata:00003638                 dd offset ?Release@CHandler@NXz@NArchive@@W3AGKXZ ; [thunk]:NArchive::NXz::CHandler::Release`adjustor{4}' (void)
.rdata:0000363C                 dd offset ?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NXz::CHandler::OpenSeq(ISequentialInStream *)
.rdata:0000363C _rdata          ends
.rdata:0000363C
.rdata:00003640 ; ===========================================================================
.rdata:00003640
.rdata:00003640 ; Segment type: Pure data
.rdata:00003640 ; Segment permissions: Read
.rdata:00003640 _rdata          segment dword public 'DATA' use32
.rdata:00003640                 assume cs:_rdata
.rdata:00003640                 ;org 3640h
.rdata:00003640 ; COMDAT (pick largest)
.rdata:00003640                 dd offset ??_R4CHandler@NXz@NArchive@@6BIInArchive@@@ ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata:00003644                 public ??_7CHandler@NXz@NArchive@@6BIInArchive@@@
.rdata:00003644 ; const NArchive::NXz::CHandler::`vftable'{for `IInArchive'}
.rdata:00003644 ??_7CHandler@NXz@NArchive@@6BIInArchive@@@ dd offset ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z
.rdata:00003644                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+76o
.rdata:00003644                                         ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)
.rdata:00003648                 dd offset ?AddRef@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::AddRef(void)
.rdata:0000364C                 dd offset ?Release@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::Release(void)
.rdata:00003650                 dd offset ?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NXz::CHandler::Open(IInStream *,unsigned __int64 const *,IArchiveOpenCallback *)
.rdata:00003654                 dd offset ?Close@CHandler@NXz@NArchive@@UAGJXZ ; NArchive::NXz::CHandler::Close(void)
.rdata:00003658                 dd offset ?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfItems(uint *)
.rdata:0000365C                 dd offset ?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)
.rdata:00003660                 dd offset ?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)
.rdata:00003664                 dd offset ?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)
.rdata:00003668                 dd offset ?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfProperties(uint *)
.rdata:0000366C                 dd offset ?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NXz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00003670                 dd offset ?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfArchiveProperties(uint *)
.rdata:00003674                 dd offset ?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NXz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)
.rdata:00003674 _rdata          ends
.rdata:00003674
.xdata$x:00003678 ; ===========================================================================
.xdata$x:00003678
.xdata$x:00003678 ; Segment type: Pure data
.xdata$x:00003678 ; Segment permissions: Read
.xdata$x:00003678 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003678                 assume cs:_xdata$x
.xdata$x:00003678                 ;org 3678h
.xdata$x:00003678 __unwindtable$??0CHandler@NXz@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003678                                         ; DATA XREF: .xdata$x:000036A0o
.xdata$x:00003679                 db 0FFh
.xdata$x:0000367A                 db 0FFh
.xdata$x:0000367B                 db 0FFh
.xdata$x:0000367C                 dd offset __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0
.xdata$x:00003680                 db    0
.xdata$x:00003681                 db    0
.xdata$x:00003682                 db    0
.xdata$x:00003683                 db    0
.xdata$x:00003684                 dd offset __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1
.xdata$x:00003688                 db    1
.xdata$x:00003689                 db    0
.xdata$x:0000368A                 db    0
.xdata$x:0000368B                 db    0
.xdata$x:0000368C                 dd offset __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$2
.xdata$x:00003690                 db    2
.xdata$x:00003691                 db    0
.xdata$x:00003692                 db    0
.xdata$x:00003693                 db    0
.xdata$x:00003694                 dd offset __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$3
.xdata$x:00003698 __ehfuncinfo$??0CHandler@NXz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003698                                         ; DATA XREF: __ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ+11o
.xdata$x:00003699                 db    5
.xdata$x:0000369A                 db  93h ; ô
.xdata$x:0000369B                 db  19h
.xdata$x:0000369C                 db    4
.xdata$x:0000369D                 db    0
.xdata$x:0000369E                 db    0
.xdata$x:0000369F                 db    0
.xdata$x:000036A0                 dd offset __unwindtable$??0CHandler@NXz@NArchive@@QAE@XZ
.xdata$x:000036A4                 db    0
.xdata$x:000036A5                 db    0
.xdata$x:000036A6                 db    0
.xdata$x:000036A7                 db    0
.xdata$x:000036A8                 db    0
.xdata$x:000036A9                 db    0
.xdata$x:000036AA                 db    0
.xdata$x:000036AB                 db    0
.xdata$x:000036AC                 db    0
.xdata$x:000036AD                 db    0
.xdata$x:000036AE                 db    0
.xdata$x:000036AF                 db    0
.xdata$x:000036B0                 db    0
.xdata$x:000036B1                 db    0
.xdata$x:000036B2                 db    0
.xdata$x:000036B3                 db    0
.xdata$x:000036B4                 db    0
.xdata$x:000036B5                 db    0
.xdata$x:000036B6                 db    0
.xdata$x:000036B7                 db    0
.xdata$x:000036B8                 db    1
.xdata$x:000036B9                 db    0
.xdata$x:000036BA                 db    0
.xdata$x:000036BB                 db    0
.xdata$x:000036BC __catchsym$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 dd offset $SG70053
.xdata$x:000036BC                                         ; DATA XREF: .xdata$x:000036DCo
.xdata$x:000036BC                                         ; "LZMA2"
.xdata$x:000036C0                 db    0
.xdata$x:000036C1                 db    0
.xdata$x:000036C2                 db    0
.xdata$x:000036C3                 db    0
.xdata$x:000036C4                 db    0
.xdata$x:000036C5                 db    0
.xdata$x:000036C6                 db    0
.xdata$x:000036C7                 db    0
.xdata$x:000036C8                 dd offset __catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
.xdata$x:000036CC __tryblocktable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:000036CC                                         ; DATA XREF: .xdata$x:00003708o
.xdata$x:000036CD                 db    0
.xdata$x:000036CE                 db    0
.xdata$x:000036CF                 db    0
.xdata$x:000036D0                 db    1
.xdata$x:000036D1                 db    0
.xdata$x:000036D2                 db    0
.xdata$x:000036D3                 db    0
.xdata$x:000036D4                 db    2
.xdata$x:000036D5                 db    0
.xdata$x:000036D6                 db    0
.xdata$x:000036D7                 db    0
.xdata$x:000036D8                 db    1
.xdata$x:000036D9                 db    0
.xdata$x:000036DA                 db    0
.xdata$x:000036DB                 db    0
.xdata$x:000036DC                 dd offset __catchsym$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
.xdata$x:000036E0 __unwindtable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:000036E0                                         ; DATA XREF: .xdata$x:00003700o
.xdata$x:000036E1                 db 0FFh
.xdata$x:000036E2                 db 0FFh
.xdata$x:000036E3                 db 0FFh
.xdata$x:000036E4                 db    0
.xdata$x:000036E5                 db    0
.xdata$x:000036E6                 db    0
.xdata$x:000036E7                 db    0
.xdata$x:000036E8                 db    0
.xdata$x:000036E9                 db    0
.xdata$x:000036EA                 db    0
.xdata$x:000036EB                 db    0
.xdata$x:000036EC                 dd offset __unwindfunclet$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
.xdata$x:000036F0                 db 0FFh
.xdata$x:000036F1                 db 0FFh
.xdata$x:000036F2                 db 0FFh
.xdata$x:000036F3                 db 0FFh
.xdata$x:000036F4                 db    0
.xdata$x:000036F5                 db    0
.xdata$x:000036F6                 db    0
.xdata$x:000036F7                 db    0
.xdata$x:000036F8 __ehfuncinfo$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:000036F8                                         ; DATA XREF: __ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+11o
.xdata$x:000036F9                 db    5
.xdata$x:000036FA                 db  93h ; ô
.xdata$x:000036FB                 db  19h
.xdata$x:000036FC                 db    3
.xdata$x:000036FD                 db    0
.xdata$x:000036FE                 db    0
.xdata$x:000036FF                 db    0
.xdata$x:00003700                 dd offset __unwindtable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:00003704                 db    1
.xdata$x:00003705                 db    0
.xdata$x:00003706                 db    0
.xdata$x:00003707                 db    0
.xdata$x:00003708                 dd offset __tryblocktable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
.xdata$x:0000370C                 db    0
.xdata$x:0000370D                 db    0
.xdata$x:0000370E                 db    0
.xdata$x:0000370F                 db    0
.xdata$x:00003710                 db    0
.xdata$x:00003711                 db    0
.xdata$x:00003712                 db    0
.xdata$x:00003713                 db    0
.xdata$x:00003714                 db    0
.xdata$x:00003715                 db    0
.xdata$x:00003716                 db    0
.xdata$x:00003717                 db    0
.xdata$x:00003718                 db    1
.xdata$x:00003719                 db    0
.xdata$x:0000371A                 db    0
.xdata$x:0000371B                 db    0
.xdata$x:0000371C __catchsym$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 dd offset $SG70053
.xdata$x:0000371C                                         ; DATA XREF: .xdata$x:0000373Co
.xdata$x:0000371C                                         ; "LZMA2"
.xdata$x:00003720                 db    0
.xdata$x:00003721                 db    0
.xdata$x:00003722                 db    0
.xdata$x:00003723                 db    0
.xdata$x:00003724                 db    0
.xdata$x:00003725                 db    0
.xdata$x:00003726                 db    0
.xdata$x:00003727                 db    0
.xdata$x:00003728                 dd offset __catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
.xdata$x:0000372C __tryblocktable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db    0
.xdata$x:0000372C                                         ; DATA XREF: .xdata$x:00003768o
.xdata$x:0000372D                 db    0
.xdata$x:0000372E                 db    0
.xdata$x:0000372F                 db    0
.xdata$x:00003730                 db    1
.xdata$x:00003731                 db    0
.xdata$x:00003732                 db    0
.xdata$x:00003733                 db    0
.xdata$x:00003734                 db    2
.xdata$x:00003735                 db    0
.xdata$x:00003736                 db    0
.xdata$x:00003737                 db    0
.xdata$x:00003738                 db    1
.xdata$x:00003739                 db    0
.xdata$x:0000373A                 db    0
.xdata$x:0000373B                 db    0
.xdata$x:0000373C                 dd offset __catchsym$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
.xdata$x:00003740 __unwindtable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db 0FFh
.xdata$x:00003740                                         ; DATA XREF: .xdata$x:00003760o
.xdata$x:00003741                 db 0FFh
.xdata$x:00003742                 db 0FFh
.xdata$x:00003743                 db 0FFh
.xdata$x:00003744                 db    0
.xdata$x:00003745                 db    0
.xdata$x:00003746                 db    0
.xdata$x:00003747                 db    0
.xdata$x:00003748                 db    0
.xdata$x:00003749                 db    0
.xdata$x:0000374A                 db    0
.xdata$x:0000374B                 db    0
.xdata$x:0000374C                 dd offset __unwindfunclet$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
.xdata$x:00003750                 db 0FFh
.xdata$x:00003751                 db 0FFh
.xdata$x:00003752                 db 0FFh
.xdata$x:00003753                 db 0FFh
.xdata$x:00003754                 db    0
.xdata$x:00003755                 db    0
.xdata$x:00003756                 db    0
.xdata$x:00003757                 db    0
.xdata$x:00003758 __ehfuncinfo$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z db  22h ; "
.xdata$x:00003758                                         ; DATA XREF: __ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z+11o
.xdata$x:00003759                 db    5
.xdata$x:0000375A                 db  93h ; ô
.xdata$x:0000375B                 db  19h
.xdata$x:0000375C                 db    3
.xdata$x:0000375D                 db    0
.xdata$x:0000375E                 db    0
.xdata$x:0000375F                 db    0
.xdata$x:00003760                 dd offset __unwindtable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:00003764                 db    1
.xdata$x:00003765                 db    0
.xdata$x:00003766                 db    0
.xdata$x:00003767                 db    0
.xdata$x:00003768                 dd offset __tryblocktable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
.xdata$x:0000376C                 db    0
.xdata$x:0000376D                 db    0
.xdata$x:0000376E                 db    0
.xdata$x:0000376F                 db    0
.xdata$x:00003770                 db    0
.xdata$x:00003771                 db    0
.xdata$x:00003772                 db    0
.xdata$x:00003773                 db    0
.xdata$x:00003774                 db    0
.xdata$x:00003775                 db    0
.xdata$x:00003776                 db    0
.xdata$x:00003777                 db    0
.xdata$x:00003778                 db    1
.xdata$x:00003779                 db    0
.xdata$x:0000377A                 db    0
.xdata$x:0000377B                 db    0
.xdata$x:0000377C __unwindtable$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:0000377C                                         ; DATA XREF: .xdata$x:0000379Co
.xdata$x:0000377D                 db 0FFh
.xdata$x:0000377E                 db 0FFh
.xdata$x:0000377F                 db 0FFh
.xdata$x:00003780                 dd offset __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0
.xdata$x:00003784                 db 0FFh
.xdata$x:00003785                 db 0FFh
.xdata$x:00003786                 db 0FFh
.xdata$x:00003787                 db 0FFh
.xdata$x:00003788                 dd offset __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1
.xdata$x:0000378C                 db    1
.xdata$x:0000378D                 db    0
.xdata$x:0000378E                 db    0
.xdata$x:0000378F                 db    0
.xdata$x:00003790                 dd offset __unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2
.xdata$x:00003794 __ehfuncinfo$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:00003794                                         ; DATA XREF: __ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z+1Eo
.xdata$x:00003795                 db    5
.xdata$x:00003796                 db  93h ; ô
.xdata$x:00003797                 db  19h
.xdata$x:00003798                 db    3
.xdata$x:00003799                 db    0
.xdata$x:0000379A                 db    0
.xdata$x:0000379B                 db    0
.xdata$x:0000379C                 dd offset __unwindtable$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
.xdata$x:000037A0                 db    0
.xdata$x:000037A1                 db    0
.xdata$x:000037A2                 db    0
.xdata$x:000037A3                 db    0
.xdata$x:000037A4                 db    0
.xdata$x:000037A5                 db    0
.xdata$x:000037A6                 db    0
.xdata$x:000037A7                 db    0
.xdata$x:000037A8                 db    0
.xdata$x:000037A9                 db    0
.xdata$x:000037AA                 db    0
.xdata$x:000037AB                 db    0
.xdata$x:000037AC                 db    0
.xdata$x:000037AD                 db    0
.xdata$x:000037AE                 db    0
.xdata$x:000037AF                 db    0
.xdata$x:000037B0                 db    0
.xdata$x:000037B1                 db    0
.xdata$x:000037B2                 db    0
.xdata$x:000037B3                 db    0
.xdata$x:000037B4                 db    1
.xdata$x:000037B5                 db    0
.xdata$x:000037B6                 db    0
.xdata$x:000037B7                 db    0
.xdata$x:000037B8 __unwindtable$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z db 0FFh
.xdata$x:000037B8                                         ; DATA XREF: .xdata$x:000037D0o
.xdata$x:000037B9                 db 0FFh
.xdata$x:000037BA                 db 0FFh
.xdata$x:000037BB                 db 0FFh
.xdata$x:000037BC                 dd offset __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1
.xdata$x:000037C0                 db    0
.xdata$x:000037C1                 db    0
.xdata$x:000037C2                 db    0
.xdata$x:000037C3                 db    0
.xdata$x:000037C4                 dd offset __unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$0
.xdata$x:000037C8 __ehfuncinfo$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z db  22h ; "
.xdata$x:000037C8                                         ; DATA XREF: __ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z+1Bo
.xdata$x:000037C9                 db    5
.xdata$x:000037CA                 db  93h ; ô
.xdata$x:000037CB                 db  19h
.xdata$x:000037CC                 db    2
.xdata$x:000037CD                 db    0
.xdata$x:000037CE                 db    0
.xdata$x:000037CF                 db    0
.xdata$x:000037D0                 dd offset __unwindtable$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
.xdata$x:000037D4                 db    0
.xdata$x:000037D5                 db    0
.xdata$x:000037D6                 db    0
.xdata$x:000037D7                 db    0
.xdata$x:000037D8                 db    0
.xdata$x:000037D9                 db    0
.xdata$x:000037DA                 db    0
.xdata$x:000037DB                 db    0
.xdata$x:000037DC                 db    0
.xdata$x:000037DD                 db    0
.xdata$x:000037DE                 db    0
.xdata$x:000037DF                 db    0
.xdata$x:000037E0                 db    0
.xdata$x:000037E1                 db    0
.xdata$x:000037E2                 db    0
.xdata$x:000037E3                 db    0
.xdata$x:000037E4                 db    0
.xdata$x:000037E5                 db    0
.xdata$x:000037E6                 db    0
.xdata$x:000037E7                 db    0
.xdata$x:000037E8                 db    1
.xdata$x:000037E9                 db    0
.xdata$x:000037EA                 db    0
.xdata$x:000037EB                 db    0
.xdata$x:000037EC __unwindtable$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z db 0FFh
.xdata$x:000037EC                                         ; DATA XREF: .xdata$x:0000380Co
.xdata$x:000037ED                 db 0FFh
.xdata$x:000037EE                 db 0FFh
.xdata$x:000037EF                 db 0FFh
.xdata$x:000037F0                 dd offset __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2
.xdata$x:000037F4                 align 8
.xdata$x:000037F8                 dd offset __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$0
.xdata$x:000037FC                 db    1
.xdata$x:000037FD                 db    0
.xdata$x:000037FE                 db    0
.xdata$x:000037FF                 db    0
.xdata$x:00003800                 dd offset __unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$1
.xdata$x:00003804 __ehfuncinfo$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z db  22h ; "
.xdata$x:00003804                                         ; DATA XREF: __ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z+11o
.xdata$x:00003805                 db    5
.xdata$x:00003806                 db  93h ; ô
.xdata$x:00003807                 db  19h
.xdata$x:00003808                 db    3
.xdata$x:00003809                 db    0
.xdata$x:0000380A                 db    0
.xdata$x:0000380B                 db    0
.xdata$x:0000380C                 dd offset __unwindtable$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
.xdata$x:00003810                 db    0
.xdata$x:00003811                 db    0
.xdata$x:00003812                 db    0
.xdata$x:00003813                 db    0
.xdata$x:00003814                 db    0
.xdata$x:00003815                 db    0
.xdata$x:00003816                 db    0
.xdata$x:00003817                 db    0
.xdata$x:00003818                 db    0
.xdata$x:00003819                 db    0
.xdata$x:0000381A                 db    0
.xdata$x:0000381B                 db    0
.xdata$x:0000381C                 db    0
.xdata$x:0000381D                 db    0
.xdata$x:0000381E                 db    0
.xdata$x:0000381F                 db    0
.xdata$x:00003820                 db    0
.xdata$x:00003821                 db    0
.xdata$x:00003822                 db    0
.xdata$x:00003823                 db    0
.xdata$x:00003824                 db    1
.xdata$x:00003825                 db    0
.xdata$x:00003826                 db    0
.xdata$x:00003827                 db    0
.xdata$x:00003828 __catchsym$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 dd offset $SG70053
.xdata$x:00003828                                         ; DATA XREF: .xdata$x:00003858o
.xdata$x:00003828                                         ; "LZMA2"
.xdata$x:0000382C                 db    0
.xdata$x:0000382D                 db    0
.xdata$x:0000382E                 db    0
.xdata$x:0000382F                 db    0
.xdata$x:00003830                 db    0
.xdata$x:00003831                 db    0
.xdata$x:00003832                 db    0
.xdata$x:00003833                 db    0
.xdata$x:00003834                 dd offset __catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
.xdata$x:00003838 __unwindtable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db 0FFh
.xdata$x:00003838                                         ; DATA XREF: .xdata$x:00003864o
.xdata$x:00003839                 db 0FFh
.xdata$x:0000383A                 db 0FFh
.xdata$x:0000383B                 db 0FFh
.xdata$x:0000383C                 db    0
.xdata$x:0000383D                 db    0
.xdata$x:0000383E                 db    0
.xdata$x:0000383F                 db    0
.xdata$x:00003840                 db 0FFh
.xdata$x:00003841                 db 0FFh
.xdata$x:00003842                 db 0FFh
.xdata$x:00003843                 db 0FFh
.xdata$x:00003844                 db    0
.xdata$x:00003845                 db    0
.xdata$x:00003846                 db    0
.xdata$x:00003847                 db    0
.xdata$x:00003848 __tryblocktable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db    0
.xdata$x:00003848                                         ; DATA XREF: .xdata$x:0000386Co
.xdata$x:00003849                 db    0
.xdata$x:0000384A                 db    0
.xdata$x:0000384B                 db    0
.xdata$x:0000384C                 db    0
.xdata$x:0000384D                 db    0
.xdata$x:0000384E                 db    0
.xdata$x:0000384F                 db    0
.xdata$x:00003850                 db    1
.xdata$x:00003851                 db    0
.xdata$x:00003852                 db    0
.xdata$x:00003853                 db    0
.xdata$x:00003854                 db    1
.xdata$x:00003855                 db    0
.xdata$x:00003856                 db    0
.xdata$x:00003857                 db    0
.xdata$x:00003858                 dd offset __catchsym$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
.xdata$x:0000385C __ehfuncinfo$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z db  22h ; "
.xdata$x:0000385C                                         ; DATA XREF: __ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z+11o
.xdata$x:0000385D                 db    5
.xdata$x:0000385E                 db  93h ; ô
.xdata$x:0000385F                 db  19h
.xdata$x:00003860                 db    2
.xdata$x:00003861                 db    0
.xdata$x:00003862                 db    0
.xdata$x:00003863                 db    0
.xdata$x:00003864                 dd offset __unwindtable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00003868                 db    1
.xdata$x:00003869                 db    0
.xdata$x:0000386A                 db    0
.xdata$x:0000386B                 db    0
.xdata$x:0000386C                 dd offset __tryblocktable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
.xdata$x:00003870                 db    0
.xdata$x:00003871                 db    0
.xdata$x:00003872                 db    0
.xdata$x:00003873                 db    0
.xdata$x:00003874                 db    0
.xdata$x:00003875                 db    0
.xdata$x:00003876                 db    0
.xdata$x:00003877                 db    0
.xdata$x:00003878                 db    0
.xdata$x:00003879                 db    0
.xdata$x:0000387A                 db    0
.xdata$x:0000387B                 db    0
.xdata$x:0000387C                 db    1
.xdata$x:0000387D                 db    0
.xdata$x:0000387E                 db    0
.xdata$x:0000387F                 db    0
.xdata$x:00003880 __catchsym$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 dd offset $SG70053
.xdata$x:00003880                                         ; DATA XREF: .xdata$x:000038A0o
.xdata$x:00003880                                         ; "LZMA2"
.xdata$x:00003884                 db    0
.xdata$x:00003885                 db    0
.xdata$x:00003886                 db    0
.xdata$x:00003887                 db    0
.xdata$x:00003888                 db    0
.xdata$x:00003889                 db    0
.xdata$x:0000388A                 db    0
.xdata$x:0000388B                 db    0
.xdata$x:0000388C                 dd offset __catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
.xdata$x:00003890 __tryblocktable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db    0
.xdata$x:00003890                                         ; DATA XREF: .xdata$x:000038B4o
.xdata$x:00003891                 db    0
.xdata$x:00003892                 db    0
.xdata$x:00003893                 db    0
.xdata$x:00003894                 db    4
.xdata$x:00003895                 db    0
.xdata$x:00003896                 db    0
.xdata$x:00003897                 db    0
.xdata$x:00003898                 db    5
.xdata$x:00003899                 db    0
.xdata$x:0000389A                 db    0
.xdata$x:0000389B                 db    0
.xdata$x:0000389C                 db    1
.xdata$x:0000389D                 db    0
.xdata$x:0000389E                 db    0
.xdata$x:0000389F                 db    0
.xdata$x:000038A0                 dd offset __catchsym$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
.xdata$x:000038A4 __ehfuncinfo$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db  22h ; "
.xdata$x:000038A4                                         ; DATA XREF: __ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z+1Eo
.xdata$x:000038A5                 db    5
.xdata$x:000038A6                 db  93h ; ô
.xdata$x:000038A7                 db  19h
.xdata$x:000038A8                 db    6
.xdata$x:000038A9                 db    0
.xdata$x:000038AA                 db    0
.xdata$x:000038AB                 db    0
.xdata$x:000038AC                 dd offset __unwindtable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000038B0                 db    1
.xdata$x:000038B1                 db    0
.xdata$x:000038B2                 db    0
.xdata$x:000038B3                 db    0
.xdata$x:000038B4                 dd offset __tryblocktable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
.xdata$x:000038B8                 db    0
.xdata$x:000038B9                 db    0
.xdata$x:000038BA                 db    0
.xdata$x:000038BB                 db    0
.xdata$x:000038BC                 db    0
.xdata$x:000038BD                 db    0
.xdata$x:000038BE                 db    0
.xdata$x:000038BF                 db    0
.xdata$x:000038C0                 db    0
.xdata$x:000038C1                 db    0
.xdata$x:000038C2                 db    0
.xdata$x:000038C3                 db    0
.xdata$x:000038C4                 db    1
.xdata$x:000038C5                 db    0
.xdata$x:000038C6                 db    0
.xdata$x:000038C7                 db    0
.xdata$x:000038C8 __unwindtable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z db 0FFh
.xdata$x:000038C8                                         ; DATA XREF: .xdata$x:000038ACo
.xdata$x:000038C9                 db 0FFh
.xdata$x:000038CA                 db 0FFh
.xdata$x:000038CB                 db 0FFh
.xdata$x:000038CC                 db    0
.xdata$x:000038CD                 db    0
.xdata$x:000038CE                 db    0
.xdata$x:000038CF                 db    0
.xdata$x:000038D0                 db    0
.xdata$x:000038D1                 db    0
.xdata$x:000038D2                 db    0
.xdata$x:000038D3                 db    0
.xdata$x:000038D4                 dd offset __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
.xdata$x:000038D8                 db    1
.xdata$x:000038D9                 db    0
.xdata$x:000038DA                 db    0
.xdata$x:000038DB                 db    0
.xdata$x:000038DC                 dd offset __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
.xdata$x:000038E0                 db    1
.xdata$x:000038E1                 db    0
.xdata$x:000038E2                 db    0
.xdata$x:000038E3                 db    0
.xdata$x:000038E4                 dd offset __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
.xdata$x:000038E8                 db    3
.xdata$x:000038E9                 db    0
.xdata$x:000038EA                 db    0
.xdata$x:000038EB                 db    0
.xdata$x:000038EC                 dd offset __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
.xdata$x:000038F0                 db 0FFh
.xdata$x:000038F1                 db 0FFh
.xdata$x:000038F2                 db 0FFh
.xdata$x:000038F3                 db 0FFh
.xdata$x:000038F4                 db    0
.xdata$x:000038F5                 db    0
.xdata$x:000038F6                 db    0
.xdata$x:000038F7                 db    0
.xdata$x:000038F8 __catchsym$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 dd offset $SG70053
.xdata$x:000038F8                                         ; DATA XREF: .xdata$x:00003918o
.xdata$x:000038F8                                         ; "LZMA2"
.xdata$x:000038FC                 db    0
.xdata$x:000038FD                 db    0
.xdata$x:000038FE                 db    0
.xdata$x:000038FF                 db    0
.xdata$x:00003900                 db    0
.xdata$x:00003901                 db    0
.xdata$x:00003902                 db    0
.xdata$x:00003903                 db    0
.xdata$x:00003904                 dd offset __catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
.xdata$x:00003908 __tryblocktable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db    0
.xdata$x:00003908                                         ; DATA XREF: .xdata$x:0000392Co
.xdata$x:00003909                 db    0
.xdata$x:0000390A                 db    0
.xdata$x:0000390B                 db    0
.xdata$x:0000390C                 db    9
.xdata$x:0000390D                 db    0
.xdata$x:0000390E                 db    0
.xdata$x:0000390F                 db    0
.xdata$x:00003910                 db  0Ah
.xdata$x:00003911                 db    0
.xdata$x:00003912                 db    0
.xdata$x:00003913                 db    0
.xdata$x:00003914                 db    1
.xdata$x:00003915                 db    0
.xdata$x:00003916                 db    0
.xdata$x:00003917                 db    0
.xdata$x:00003918                 dd offset __catchsym$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
.xdata$x:0000391C __ehfuncinfo$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db  22h ; "
.xdata$x:0000391C                                         ; DATA XREF: __ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z+1Eo
.xdata$x:0000391D                 db    5
.xdata$x:0000391E                 db  93h ; ô
.xdata$x:0000391F                 db  19h
.xdata$x:00003920                 db  0Bh
.xdata$x:00003921                 db    0
.xdata$x:00003922                 db    0
.xdata$x:00003923                 db    0
.xdata$x:00003924                 dd offset __unwindtable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003928                 db    1
.xdata$x:00003929                 db    0
.xdata$x:0000392A                 db    0
.xdata$x:0000392B                 db    0
.xdata$x:0000392C                 dd offset __tryblocktable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
.xdata$x:00003930                 db    0
.xdata$x:00003931                 db    0
.xdata$x:00003932                 db    0
.xdata$x:00003933                 db    0
.xdata$x:00003934                 db    0
.xdata$x:00003935                 db    0
.xdata$x:00003936                 db    0
.xdata$x:00003937                 db    0
.xdata$x:00003938                 db    0
.xdata$x:00003939                 db    0
.xdata$x:0000393A                 db    0
.xdata$x:0000393B                 db    0
.xdata$x:0000393C                 db    1
.xdata$x:0000393D                 db    0
.xdata$x:0000393E                 db    0
.xdata$x:0000393F                 db    0
.xdata$x:00003940 __unwindtable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z db 0FFh
.xdata$x:00003940                                         ; DATA XREF: .xdata$x:00003924o
.xdata$x:00003941                 db 0FFh
.xdata$x:00003942                 db 0FFh
.xdata$x:00003943                 db 0FFh
.xdata$x:00003944                 db    0
.xdata$x:00003945                 db    0
.xdata$x:00003946                 db    0
.xdata$x:00003947                 db    0
.xdata$x:00003948                 db    0
.xdata$x:00003949                 db    0
.xdata$x:0000394A                 db    0
.xdata$x:0000394B                 db    0
.xdata$x:0000394C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
.xdata$x:00003950                 db    0
.xdata$x:00003951                 db    0
.xdata$x:00003952                 db    0
.xdata$x:00003953                 db    0
.xdata$x:00003954                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
.xdata$x:00003958                 db    0
.xdata$x:00003959                 db    0
.xdata$x:0000395A                 db    0
.xdata$x:0000395B                 db    0
.xdata$x:0000395C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
.xdata$x:00003960                 db    3
.xdata$x:00003961                 db    0
.xdata$x:00003962                 db    0
.xdata$x:00003963                 db    0
.xdata$x:00003964                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
.xdata$x:00003968                 db    3
.xdata$x:00003969                 db    0
.xdata$x:0000396A                 db    0
.xdata$x:0000396B                 db    0
.xdata$x:0000396C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
.xdata$x:00003970                 db    3
.xdata$x:00003971                 db    0
.xdata$x:00003972                 db    0
.xdata$x:00003973                 db    0
.xdata$x:00003974                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
.xdata$x:00003978                 db    0
.xdata$x:00003979                 db    0
.xdata$x:0000397A                 db    0
.xdata$x:0000397B                 db    0
.xdata$x:0000397C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
.xdata$x:00003980                 db    7
.xdata$x:00003981                 db    0
.xdata$x:00003982                 db    0
.xdata$x:00003983                 db    0
.xdata$x:00003984                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
.xdata$x:00003988                 db    7
.xdata$x:00003989                 db    0
.xdata$x:0000398A                 db    0
.xdata$x:0000398B                 db    0
.xdata$x:0000398C                 dd offset __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
.xdata$x:00003990                 db 0FFh
.xdata$x:00003991                 db 0FFh
.xdata$x:00003992                 db 0FFh
.xdata$x:00003993                 db 0FFh
.xdata$x:00003994                 db    0
.xdata$x:00003995                 db    0
.xdata$x:00003996                 db    0
.xdata$x:00003997                 db    0
.xdata$x:00003998 __catchsym$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2 dd offset $SG70053
.xdata$x:00003998                                         ; DATA XREF: .xdata$x:000039C8o
.xdata$x:00003998                                         ; "LZMA2"
.xdata$x:0000399C                 db    0
.xdata$x:0000399D                 db    0
.xdata$x:0000399E                 db    0
.xdata$x:0000399F                 db    0
.xdata$x:000039A0                 db    0
.xdata$x:000039A1                 db    0
.xdata$x:000039A2                 db    0
.xdata$x:000039A3                 db    0
.xdata$x:000039A4                 dd offset __catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0
.xdata$x:000039A8 __unwindtable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db 0FFh
.xdata$x:000039A8                                         ; DATA XREF: .xdata$x:000039D4o
.xdata$x:000039A9                 db 0FFh
.xdata$x:000039AA                 db 0FFh
.xdata$x:000039AB                 db 0FFh
.xdata$x:000039AC                 db    0
.xdata$x:000039AD                 db    0
.xdata$x:000039AE                 db    0
.xdata$x:000039AF                 db    0
.xdata$x:000039B0                 db 0FFh
.xdata$x:000039B1                 db 0FFh
.xdata$x:000039B2                 db 0FFh
.xdata$x:000039B3                 db 0FFh
.xdata$x:000039B4                 db    0
.xdata$x:000039B5                 db    0
.xdata$x:000039B6                 db    0
.xdata$x:000039B7                 db    0
.xdata$x:000039B8 __tryblocktable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db    0
.xdata$x:000039B8                                         ; DATA XREF: .xdata$x:000039DCo
.xdata$x:000039B9                 db    0
.xdata$x:000039BA                 db    0
.xdata$x:000039BB                 db    0
.xdata$x:000039BC                 db    0
.xdata$x:000039BD                 db    0
.xdata$x:000039BE                 db    0
.xdata$x:000039BF                 db    0
.xdata$x:000039C0                 db    1
.xdata$x:000039C1                 db    0
.xdata$x:000039C2                 db    0
.xdata$x:000039C3                 db    0
.xdata$x:000039C4                 db    1
.xdata$x:000039C5                 db    0
.xdata$x:000039C6                 db    0
.xdata$x:000039C7                 db    0
.xdata$x:000039C8                 dd offset __catchsym$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2
.xdata$x:000039CC __ehfuncinfo$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z db  22h ; "
.xdata$x:000039CC                                         ; DATA XREF: __ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z+11o
.xdata$x:000039CD                 db    5
.xdata$x:000039CE                 db  93h ; ô
.xdata$x:000039CF                 db  19h
.xdata$x:000039D0                 db    2
.xdata$x:000039D1                 db    0
.xdata$x:000039D2                 db    0
.xdata$x:000039D3                 db    0
.xdata$x:000039D4                 dd offset __unwindtable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.xdata$x:000039D8                 db    1
.xdata$x:000039D9                 db    0
.xdata$x:000039DA                 db    0
.xdata$x:000039DB                 db    0
.xdata$x:000039DC                 dd offset __tryblocktable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
.xdata$x:000039E0                 db    0
.xdata$x:000039E1                 db    0
.xdata$x:000039E2                 db    0
.xdata$x:000039E3                 db    0
.xdata$x:000039E4                 db    0
.xdata$x:000039E5                 db    0
.xdata$x:000039E6                 db    0
.xdata$x:000039E7                 db    0
.xdata$x:000039E8                 db    0
.xdata$x:000039E9                 db    0
.xdata$x:000039EA                 db    0
.xdata$x:000039EB                 db    0
.xdata$x:000039EC                 db    1
.xdata$x:000039ED                 db    0
.xdata$x:000039EE                 db    0
.xdata$x:000039EF                 db    0
.xdata$x:000039F0 __unwindtable$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ db 0FFh
.xdata$x:000039F0                                         ; DATA XREF: .xdata$x:00003A00o
.xdata$x:000039F1                 db 0FFh
.xdata$x:000039F2                 db 0FFh
.xdata$x:000039F3                 db 0FFh
.xdata$x:000039F4                 dd offset __unwindfunclet$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ$0
.xdata$x:000039F8 __ehfuncinfo$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ db  22h ; "
.xdata$x:000039F8                                         ; DATA XREF: __ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ+11o
.xdata$x:000039F9                 db    5
.xdata$x:000039FA                 db  93h ; ô
.xdata$x:000039FB                 db  19h
.xdata$x:000039FC                 db    1
.xdata$x:000039FD                 db    0
.xdata$x:000039FE                 db    0
.xdata$x:000039FF                 db    0
.xdata$x:00003A00                 dd offset __unwindtable$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
.xdata$x:00003A04                 db    0
.xdata$x:00003A05                 db    0
.xdata$x:00003A06                 db    0
.xdata$x:00003A07                 db    0
.xdata$x:00003A08                 db    0
.xdata$x:00003A09                 db    0
.xdata$x:00003A0A                 db    0
.xdata$x:00003A0B                 db    0
.xdata$x:00003A0C                 db    0
.xdata$x:00003A0D                 db    0
.xdata$x:00003A0E                 db    0
.xdata$x:00003A0F                 db    0
.xdata$x:00003A10                 db    0
.xdata$x:00003A11                 db    0
.xdata$x:00003A12                 db    0
.xdata$x:00003A13                 db    0
.xdata$x:00003A14                 db    0
.xdata$x:00003A15                 db    0
.xdata$x:00003A16                 db    0
.xdata$x:00003A17                 db    0
.xdata$x:00003A18                 db    1
.xdata$x:00003A19                 db    0
.xdata$x:00003A1A                 db    0
.xdata$x:00003A1B                 db    0
.xdata$x:00003A1C __unwindtable$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ db 0FFh
.xdata$x:00003A1C                                         ; DATA XREF: .xdata$x:00003A2Co
.xdata$x:00003A1D                 db 0FFh
.xdata$x:00003A1E                 db 0FFh
.xdata$x:00003A1F                 db 0FFh
.xdata$x:00003A20                 dd offset __unwindfunclet$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ$0
.xdata$x:00003A24 __ehfuncinfo$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ db  22h ; "
.xdata$x:00003A24                                         ; DATA XREF: __ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ+11o
.xdata$x:00003A25                 db    5
.xdata$x:00003A26                 db  93h ; ô
.xdata$x:00003A27                 db  19h
.xdata$x:00003A28                 db    1
.xdata$x:00003A29                 db    0
.xdata$x:00003A2A                 db    0
.xdata$x:00003A2B                 db    0
.xdata$x:00003A2C                 dd offset __unwindtable$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
.xdata$x:00003A30                 db    0
.xdata$x:00003A31                 db    0
.xdata$x:00003A32                 db    0
.xdata$x:00003A33                 db    0
.xdata$x:00003A34                 db    0
.xdata$x:00003A35                 db    0
.xdata$x:00003A36                 db    0
.xdata$x:00003A37                 db    0
.xdata$x:00003A38                 db    0
.xdata$x:00003A39                 db    0
.xdata$x:00003A3A                 db    0
.xdata$x:00003A3B                 db    0
.xdata$x:00003A3C                 db    0
.xdata$x:00003A3D                 db    0
.xdata$x:00003A3E                 db    0
.xdata$x:00003A3F                 db    0
.xdata$x:00003A40                 db    0
.xdata$x:00003A41                 db    0
.xdata$x:00003A42                 db    0
.xdata$x:00003A43                 db    0
.xdata$x:00003A44                 db    1
.xdata$x:00003A45                 db    0
.xdata$x:00003A46                 db    0
.xdata$x:00003A47                 db    0
.xdata$x:00003A47 _xdata$x        ends
.xdata$x:00003A47
.rdata$r:00003A48 ; ===========================================================================
.rdata$r:00003A48
.rdata$r:00003A48 ; Segment type: Pure data
.rdata$r:00003A48 ; Segment permissions: Read
.rdata$r:00003A48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A48                 assume cs:_rdata$r
.rdata$r:00003A48                 ;org 3A48h
.rdata$r:00003A48 ; COMDAT (pick any)
.rdata$r:00003A48                 public ??_R4CHandler@NXz@NArchive@@6BIInArchive@@@
.rdata$r:00003A48 ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IInArchive'}
.rdata$r:00003A48 ??_R4CHandler@NXz@NArchive@@6BIInArchive@@@ db    0
.rdata$r:00003A48                                         ; DATA XREF: .rdata:00003640o
.rdata$r:00003A49                 db    0
.rdata$r:00003A4A                 db    0
.rdata$r:00003A4B                 db    0
.rdata$r:00003A4C                 db    0
.rdata$r:00003A4D                 db    0
.rdata$r:00003A4E                 db    0
.rdata$r:00003A4F                 db    0
.rdata$r:00003A50                 db    0
.rdata$r:00003A51                 db    0
.rdata$r:00003A52                 db    0
.rdata$r:00003A53                 db    0
.rdata$r:00003A54                 dd offset ??_R0?AVCHandler@NXz@NArchive@@@8 ; NArchive::NXz::CHandler `RTTI Type Descriptor'
.rdata$r:00003A58                 dd offset ??_R3CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A58 _rdata$r        ends
.rdata$r:00003A58
.data:00003A5C ; ===========================================================================
.data:00003A5C
.data:00003A5C ; Segment type: Pure data
.data:00003A5C ; Segment permissions: Read/Write
.data:00003A5C _data           segment dword public 'DATA' use32
.data:00003A5C                 assume cs:_data
.data:00003A5C                 ;org 3A5Ch
.data:00003A5C ; COMDAT (pick any)
.data:00003A5C                 public ??_R0?AVCHandler@NXz@NArchive@@@8
.data:00003A5C ; class NArchive::NXz::CHandler `RTTI Type Descriptor'
.data:00003A5C ??_R0?AVCHandler@NXz@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003A5C                                         ; DATA XREF: .rdata$r:00003A54o
.data:00003A5C                                         ; .rdata$r:NArchive::NXz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003A5C                                         ; const type_info::`vftable'
.data:00003A60                 db    0
.data:00003A61                 db    0
.data:00003A62                 db    0
.data:00003A63                 db    0
.data:00003A64                 db  2Eh ; .
.data:00003A65                 db  3Fh ; ?
.data:00003A66                 db  41h ; A
.data:00003A67                 db  56h ; V
.data:00003A68                 db  43h ; C
.data:00003A69                 db  48h ; H
.data:00003A6A                 db  61h ; a
.data:00003A6B                 db  6Eh ; n
.data:00003A6C                 db  64h ; d
.data:00003A6D                 db  6Ch ; l
.data:00003A6E                 db  65h ; e
.data:00003A6F                 db  72h ; r
.data:00003A70                 db  40h ; @
.data:00003A71                 db  4Eh ; N
.data:00003A72                 db  58h ; X
.data:00003A73                 db  7Ah ; z
.data:00003A74                 db  40h ; @
.data:00003A75                 db  4Eh ; N
.data:00003A76                 db  41h ; A
.data:00003A77                 db  72h ; r
.data:00003A78                 db  63h ; c
.data:00003A79                 db  68h ; h
.data:00003A7A                 db  69h ; i
.data:00003A7B                 db  76h ; v
.data:00003A7C                 db  65h ; e
.data:00003A7D                 db  40h ; @
.data:00003A7E                 db  40h ; @
.data:00003A7F                 db    0
.data:00003A7F _data           ends
.data:00003A7F
.rdata$r:00003A80 ; ===========================================================================
.rdata$r:00003A80
.rdata$r:00003A80 ; Segment type: Pure data
.rdata$r:00003A80 ; Segment permissions: Read
.rdata$r:00003A80 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A80                 assume cs:_rdata$r
.rdata$r:00003A80                 ;org 3A80h
.rdata$r:00003A80 ; COMDAT (pick any)
.rdata$r:00003A80                 public ??_R3CHandler@NXz@NArchive@@8
.rdata$r:00003A80 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003A80 ??_R3CHandler@NXz@NArchive@@8 db    0   ; DATA XREF: .rdata$r:00003A58o
.rdata$r:00003A80                                         ; .rdata$r:00003AD8o ...
.rdata$r:00003A81                 db    0
.rdata$r:00003A82                 db    0
.rdata$r:00003A83                 db    0
.rdata$r:00003A84                 db    1
.rdata$r:00003A85                 db    0
.rdata$r:00003A86                 db    0
.rdata$r:00003A87                 db    0
.rdata$r:00003A88                 db  0Bh
.rdata$r:00003A89                 db    0
.rdata$r:00003A8A                 db    0
.rdata$r:00003A8B                 db    0
.rdata$r:00003A8C                 dd offset ??_R2CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Base Class Array'
.rdata$r:00003A8C _rdata$r        ends
.rdata$r:00003A8C
.rdata$r:00003A90 ; ===========================================================================
.rdata$r:00003A90
.rdata$r:00003A90 ; Segment type: Pure data
.rdata$r:00003A90 ; Segment permissions: Read
.rdata$r:00003A90 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003A90                 assume cs:_rdata$r
.rdata$r:00003A90                 ;org 3A90h
.rdata$r:00003A90 ; COMDAT (pick any)
.rdata$r:00003A90                 public ??_R2CHandler@NXz@NArchive@@8
.rdata$r:00003A90 ; NArchive::NXz::CHandler::`RTTI Base Class Array'
.rdata$r:00003A90 ??_R2CHandler@NXz@NArchive@@8 dd offset ??_R1A@?0A@EA@CHandler@NXz@NArchive@@8
.rdata$r:00003A90                                         ; DATA XREF: .rdata$r:00003A8Co
.rdata$r:00003A90                                         ; NArchive::NXz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003A94                 dd offset ??_R1A@?0A@EA@IInArchive@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003A98                 dd offset ??_R1A@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
.rdata$r:00003A9C                 dd offset ??_R13?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
.rdata$r:00003AA0                 dd offset ??_R13?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
.rdata$r:00003AA4                 dd offset ??_R17?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
.rdata$r:00003AA8                 dd offset ??_R17?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
.rdata$r:00003AAC                 dd offset ??_R1M@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
.rdata$r:00003AB0                 dd offset ??_R1M@?0A@EC@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
.rdata$r:00003AB4                 dd offset ??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (16,-1,0,64)'
.rdata$r:00003AB8                 dd offset ??_R1FI@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (88,-1,0,64)'
.rdata$r:00003ABC                 db    0
.rdata$r:00003ABD                 align 10h
.rdata$r:00003ABD _rdata$r        ends
.rdata$r:00003ABD
.rdata$r:00003AC0 ; ===========================================================================
.rdata$r:00003AC0
.rdata$r:00003AC0 ; Segment type: Pure data
.rdata$r:00003AC0 ; Segment permissions: Read
.rdata$r:00003AC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003AC0                 assume cs:_rdata$r
.rdata$r:00003AC0                 ;org 3AC0h
.rdata$r:00003AC0 ; COMDAT (pick any)
.rdata$r:00003AC0                 public ??_R1A@?0A@EA@CHandler@NXz@NArchive@@8
.rdata$r:00003AC0 ; NArchive::NXz::CHandler::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003AC0 ??_R1A@?0A@EA@CHandler@NXz@NArchive@@8 dd offset ??_R0?AVCHandler@NXz@NArchive@@@8
.rdata$r:00003AC0                                         ; DATA XREF: .rdata$r:NArchive::NXz::CHandler::`RTTI Base Class Array'o
.rdata$r:00003AC0                                         ; NArchive::NXz::CHandler `RTTI Type Descriptor'
.rdata$r:00003AC4                 db  0Ah
.rdata$r:00003AC5                 db    0
.rdata$r:00003AC6                 db    0
.rdata$r:00003AC7                 db    0
.rdata$r:00003AC8                 db    0
.rdata$r:00003AC9                 db    0
.rdata$r:00003ACA                 db    0
.rdata$r:00003ACB                 db    0
.rdata$r:00003ACC                 db 0FFh
.rdata$r:00003ACD                 db 0FFh
.rdata$r:00003ACE                 db 0FFh
.rdata$r:00003ACF                 db 0FFh
.rdata$r:00003AD0                 db    0
.rdata$r:00003AD1                 db    0
.rdata$r:00003AD2                 db    0
.rdata$r:00003AD3                 db    0
.rdata$r:00003AD4                 db  40h ; @
.rdata$r:00003AD5                 db    0
.rdata$r:00003AD6                 db    0
.rdata$r:00003AD7                 db    0
.rdata$r:00003AD8                 dd offset ??_R3CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003AD8 _rdata$r        ends
.rdata$r:00003AD8
.rdata$r:00003ADC ; ===========================================================================
.rdata$r:00003ADC
.rdata$r:00003ADC ; Segment type: Pure data
.rdata$r:00003ADC ; Segment permissions: Read
.rdata$r:00003ADC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003ADC                 assume cs:_rdata$r
.rdata$r:00003ADC                 ;org 3ADCh
.rdata$r:00003ADC ; COMDAT (pick any)
.rdata$r:00003ADC                 public ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00003ADC ; IInArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003ADC ??_R1A@?0A@EA@IInArchive@@8 dd offset ??_R0?AUIInArchive@@@8
.rdata$r:00003ADC                                         ; DATA XREF: .rdata$r:00003A94o
.rdata$r:00003ADC                                         ; .rdata$r:IInArchive::`RTTI Base Class Array'o
.rdata$r:00003ADC                                         ; IInArchive `RTTI Type Descriptor'
.rdata$r:00003AE0                 db    1
.rdata$r:00003AE1                 db    0
.rdata$r:00003AE2                 db    0
.rdata$r:00003AE3                 db    0
.rdata$r:00003AE4                 db    0
.rdata$r:00003AE5                 db    0
.rdata$r:00003AE6                 db    0
.rdata$r:00003AE7                 db    0
.rdata$r:00003AE8                 db 0FFh
.rdata$r:00003AE9                 db 0FFh
.rdata$r:00003AEA                 db 0FFh
.rdata$r:00003AEB                 db 0FFh
.rdata$r:00003AEC                 db    0
.rdata$r:00003AED                 db    0
.rdata$r:00003AEE                 db    0
.rdata$r:00003AEF                 db    0
.rdata$r:00003AF0                 db  40h ; @
.rdata$r:00003AF1                 db    0
.rdata$r:00003AF2                 db    0
.rdata$r:00003AF3                 db    0
.rdata$r:00003AF4                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003AF4 _rdata$r        ends
.rdata$r:00003AF4
.data:00003AF8 ; ===========================================================================
.data:00003AF8
.data:00003AF8 ; Segment type: Pure data
.data:00003AF8 ; Segment permissions: Read/Write
.data:00003AF8 _data           segment dword public 'DATA' use32
.data:00003AF8                 assume cs:_data
.data:00003AF8                 ;org 3AF8h
.data:00003AF8 ; COMDAT (pick any)
.data:00003AF8                 public ??_R0?AUIInArchive@@@8
.data:00003AF8 ; struct IInArchive `RTTI Type Descriptor'
.data:00003AF8 ??_R0?AUIInArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003AF8                                         ; DATA XREF: .rdata$r:IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003AF8                                         ; .rdata$r:00004728o
.data:00003AF8                                         ; const type_info::`vftable'
.data:00003AFC                 align 10h
.data:00003B00 a_?auiinarchive db '.?AUIInArchive@@',0
.data:00003B11                 align 4
.data:00003B11 _data           ends
.data:00003B11
.rdata$r:00003B14 ; ===========================================================================
.rdata$r:00003B14
.rdata$r:00003B14 ; Segment type: Pure data
.rdata$r:00003B14 ; Segment permissions: Read
.rdata$r:00003B14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B14                 assume cs:_rdata$r
.rdata$r:00003B14                 ;org 3B14h
.rdata$r:00003B14 ; COMDAT (pick any)
.rdata$r:00003B14                 public ??_R3IInArchive@@8
.rdata$r:00003B14 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B14 ??_R3IInArchive@@8 db    0              ; DATA XREF: .rdata$r:00003AF4o
.rdata$r:00003B14                                         ; .rdata$r:0000472Co
.rdata$r:00003B15                 db    0
.rdata$r:00003B16                 db    0
.rdata$r:00003B17                 db    0
.rdata$r:00003B18                 db    0
.rdata$r:00003B19                 db    0
.rdata$r:00003B1A                 db    0
.rdata$r:00003B1B                 db    0
.rdata$r:00003B1C                 db    2
.rdata$r:00003B1D                 db    0
.rdata$r:00003B1E                 db    0
.rdata$r:00003B1F                 db    0
.rdata$r:00003B20                 dd offset ??_R2IInArchive@@8 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00003B20 _rdata$r        ends
.rdata$r:00003B20
.rdata$r:00003B24 ; ===========================================================================
.rdata$r:00003B24
.rdata$r:00003B24 ; Segment type: Pure data
.rdata$r:00003B24 ; Segment permissions: Read
.rdata$r:00003B24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B24                 assume cs:_rdata$r
.rdata$r:00003B24                 ;org 3B24h
.rdata$r:00003B24 ; COMDAT (pick any)
.rdata$r:00003B24                 public ??_R2IInArchive@@8
.rdata$r:00003B24 ; IInArchive::`RTTI Base Class Array'
.rdata$r:00003B24 ??_R2IInArchive@@8 dd offset ??_R1A@?0A@EA@IInArchive@@8
.rdata$r:00003B24                                         ; DATA XREF: .rdata$r:00003B20o
.rdata$r:00003B24                                         ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B28                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B2C                 db    0
.rdata$r:00003B2D                 align 10h
.rdata$r:00003B2D _rdata$r        ends
.rdata$r:00003B2D
.rdata$r:00003B30 ; ===========================================================================
.rdata$r:00003B30
.rdata$r:00003B30 ; Segment type: Pure data
.rdata$r:00003B30 ; Segment permissions: Read
.rdata$r:00003B30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B30                 assume cs:_rdata$r
.rdata$r:00003B30                 ;org 3B30h
.rdata$r:00003B30 ; COMDAT (pick any)
.rdata$r:00003B30                 public ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003B30 ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003B30 ??_R1A@?0A@EA@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003B30                                         ; DATA XREF: .rdata$r:00003B28o
.rdata$r:00003B30                                         ; .rdata$r:IUnknown::`RTTI Base Class Array'o ...
.rdata$r:00003B30                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003B34                 db    0
.rdata$r:00003B35                 db    0
.rdata$r:00003B36                 db    0
.rdata$r:00003B37                 db    0
.rdata$r:00003B38                 db    0
.rdata$r:00003B39                 db    0
.rdata$r:00003B3A                 db    0
.rdata$r:00003B3B                 db    0
.rdata$r:00003B3C                 db 0FFh
.rdata$r:00003B3D                 db 0FFh
.rdata$r:00003B3E                 db 0FFh
.rdata$r:00003B3F                 db 0FFh
.rdata$r:00003B40                 db    0
.rdata$r:00003B41                 db    0
.rdata$r:00003B42                 db    0
.rdata$r:00003B43                 db    0
.rdata$r:00003B44                 db  40h ; @
.rdata$r:00003B45                 db    0
.rdata$r:00003B46                 db    0
.rdata$r:00003B47                 db    0
.rdata$r:00003B48                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B48 _rdata$r        ends
.rdata$r:00003B48
.data:00003B4C ; ===========================================================================
.data:00003B4C
.data:00003B4C ; Segment type: Pure data
.data:00003B4C ; Segment permissions: Read/Write
.data:00003B4C _data           segment dword public 'DATA' use32
.data:00003B4C                 assume cs:_data
.data:00003B4C                 ;org 3B4Ch
.data:00003B4C ; COMDAT (pick any)
.data:00003B4C                 public ??_R0?AUIUnknown@@@8
.data:00003B4C ; struct IUnknown `RTTI Type Descriptor'
.data:00003B4C ??_R0?AUIUnknown@@@8 dd offset ??_7type_info@@6B@
.data:00003B4C                                         ; DATA XREF: .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003B4C                                         ; .rdata$r:IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'o ...
.data:00003B4C                                         ; const type_info::`vftable'
.data:00003B50                 db    0
.data:00003B51                 db    0
.data:00003B52                 db    0
.data:00003B53                 db    0
.data:00003B54                 db  2Eh ; .
.data:00003B55                 db  3Fh ; ?
.data:00003B56                 db  41h ; A
.data:00003B57                 db  55h ; U
.data:00003B58                 db  49h ; I
.data:00003B59                 db  55h ; U
.data:00003B5A                 db  6Eh ; n
.data:00003B5B                 db  6Bh ; k
.data:00003B5C                 db  6Eh ; n
.data:00003B5D                 db  6Fh ; o
.data:00003B5E                 db  77h ; w
.data:00003B5F                 db  6Eh ; n
.data:00003B60                 db  40h ; @
.data:00003B61                 db  40h ; @
.data:00003B62                 db    0
.data:00003B63                 align 4
.data:00003B63 _data           ends
.data:00003B63
.rdata$r:00003B64 ; ===========================================================================
.rdata$r:00003B64
.rdata$r:00003B64 ; Segment type: Pure data
.rdata$r:00003B64 ; Segment permissions: Read
.rdata$r:00003B64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B64                 assume cs:_rdata$r
.rdata$r:00003B64                 ;org 3B64h
.rdata$r:00003B64 ; COMDAT (pick any)
.rdata$r:00003B64                 public ??_R3IUnknown@@8
.rdata$r:00003B64 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B64 ??_R3IUnknown@@8 db    0                ; DATA XREF: .rdata$r:00003B48o
.rdata$r:00003B64                                         ; .rdata$r:00003B94o ...
.rdata$r:00003B65                 db    0
.rdata$r:00003B66                 db    0
.rdata$r:00003B67                 db    0
.rdata$r:00003B68                 db    0
.rdata$r:00003B69                 db    0
.rdata$r:00003B6A                 db    0
.rdata$r:00003B6B                 db    0
.rdata$r:00003B6C                 db    1
.rdata$r:00003B6D                 db    0
.rdata$r:00003B6E                 db    0
.rdata$r:00003B6F                 db    0
.rdata$r:00003B70                 dd offset ??_R2IUnknown@@8 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003B70 _rdata$r        ends
.rdata$r:00003B70
.rdata$r:00003B74 ; ===========================================================================
.rdata$r:00003B74
.rdata$r:00003B74 ; Segment type: Pure data
.rdata$r:00003B74 ; Segment permissions: Read
.rdata$r:00003B74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B74                 assume cs:_rdata$r
.rdata$r:00003B74                 ;org 3B74h
.rdata$r:00003B74 ; COMDAT (pick any)
.rdata$r:00003B74                 public ??_R2IUnknown@@8
.rdata$r:00003B74 ; IUnknown::`RTTI Base Class Array'
.rdata$r:00003B74 ??_R2IUnknown@@8 dd offset ??_R1A@?0A@EA@IUnknown@@8
.rdata$r:00003B74                                         ; DATA XREF: .rdata$r:00003B70o
.rdata$r:00003B74                                         ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003B78                 db    0
.rdata$r:00003B79                 align 4
.rdata$r:00003B79 _rdata$r        ends
.rdata$r:00003B79
.rdata$r:00003B7C ; ===========================================================================
.rdata$r:00003B7C
.rdata$r:00003B7C ; Segment type: Pure data
.rdata$r:00003B7C ; Segment permissions: Read
.rdata$r:00003B7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B7C                 assume cs:_rdata$r
.rdata$r:00003B7C                 ;org 3B7Ch
.rdata$r:00003B7C ; COMDAT (pick any)
.rdata$r:00003B7C                 public ??_R1A@?0A@EC@IUnknown@@8
.rdata$r:00003B7C ; IUnknown::`RTTI Base Class Descriptor at (0, -1, 0, 66)'
.rdata$r:00003B7C ??_R1A@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003B7C                                         ; DATA XREF: .rdata$r:00003A98o
.rdata$r:00003B7C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003B80                 db    0
.rdata$r:00003B81                 db    0
.rdata$r:00003B82                 db    0
.rdata$r:00003B83                 db    0
.rdata$r:00003B84                 db    0
.rdata$r:00003B85                 db    0
.rdata$r:00003B86                 db    0
.rdata$r:00003B87                 db    0
.rdata$r:00003B88                 db 0FFh
.rdata$r:00003B89                 db 0FFh
.rdata$r:00003B8A                 db 0FFh
.rdata$r:00003B8B                 db 0FFh
.rdata$r:00003B8C                 db    0
.rdata$r:00003B8D                 db    0
.rdata$r:00003B8E                 db    0
.rdata$r:00003B8F                 db    0
.rdata$r:00003B90                 db  42h ; B
.rdata$r:00003B91                 db    0
.rdata$r:00003B92                 db    0
.rdata$r:00003B93                 db    0
.rdata$r:00003B94                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003B94 _rdata$r        ends
.rdata$r:00003B94
.rdata$r:00003B98 ; ===========================================================================
.rdata$r:00003B98
.rdata$r:00003B98 ; Segment type: Pure data
.rdata$r:00003B98 ; Segment permissions: Read
.rdata$r:00003B98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003B98                 assume cs:_rdata$r
.rdata$r:00003B98                 ;org 3B98h
.rdata$r:00003B98 ; COMDAT (pick any)
.rdata$r:00003B98                 public ??_R13?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00003B98 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.rdata$r:00003B98 ??_R13?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00003B98                                         ; DATA XREF: .rdata$r:00003A9Co
.rdata$r:00003B98                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00003B9C                 db    1
.rdata$r:00003B9D                 db    0
.rdata$r:00003B9E                 db    0
.rdata$r:00003B9F                 db    0
.rdata$r:00003BA0                 db    4
.rdata$r:00003BA1                 db    0
.rdata$r:00003BA2                 db    0
.rdata$r:00003BA3                 db    0
.rdata$r:00003BA4                 db 0FFh
.rdata$r:00003BA5                 db 0FFh
.rdata$r:00003BA6                 db 0FFh
.rdata$r:00003BA7                 db 0FFh
.rdata$r:00003BA8                 db    0
.rdata$r:00003BA9                 db    0
.rdata$r:00003BAA                 db    0
.rdata$r:00003BAB                 db    0
.rdata$r:00003BAC                 db  40h ; @
.rdata$r:00003BAD                 db    0
.rdata$r:00003BAE                 db    0
.rdata$r:00003BAF                 db    0
.rdata$r:00003BB0                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003BB0 _rdata$r        ends
.rdata$r:00003BB0
.data:00003BB4 ; ===========================================================================
.data:00003BB4
.data:00003BB4 ; Segment type: Pure data
.data:00003BB4 ; Segment permissions: Read/Write
.data:00003BB4 _data           segment dword public 'DATA' use32
.data:00003BB4                 assume cs:_data
.data:00003BB4                 ;org 3BB4h
.data:00003BB4 ; COMDAT (pick any)
.data:00003BB4                 public ??_R0?AUIArchiveOpenSeq@@@8
.data:00003BB4 ; struct IArchiveOpenSeq `RTTI Type Descriptor'
.data:00003BB4 ??_R0?AUIArchiveOpenSeq@@@8 dd offset ??_7type_info@@6B@
.data:00003BB4                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'o
.data:00003BB4                                         ; .rdata$r:IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003BB4                                         ; const type_info::`vftable'
.data:00003BB8                 db    0
.data:00003BB9                 db    0
.data:00003BBA                 db    0
.data:00003BBB                 db    0
.data:00003BBC                 db  2Eh ; .
.data:00003BBD                 db  3Fh ; ?
.data:00003BBE                 db  41h ; A
.data:00003BBF                 db  55h ; U
.data:00003BC0                 db  49h ; I
.data:00003BC1                 db  41h ; A
.data:00003BC2                 db  72h ; r
.data:00003BC3                 db  63h ; c
.data:00003BC4                 db  68h ; h
.data:00003BC5                 db  69h ; i
.data:00003BC6                 db  76h ; v
.data:00003BC7                 db  65h ; e
.data:00003BC8                 db  4Fh ; O
.data:00003BC9                 db  70h ; p
.data:00003BCA                 db  65h ; e
.data:00003BCB                 db  6Eh ; n
.data:00003BCC                 db  53h ; S
.data:00003BCD                 db  65h ; e
.data:00003BCE                 db  71h ; q
.data:00003BCF                 db  40h ; @
.data:00003BD0                 db  40h ; @
.data:00003BD1                 db    0
.data:00003BD2                 align 4
.data:00003BD2 _data           ends
.data:00003BD2
.rdata$r:00003BD4 ; ===========================================================================
.rdata$r:00003BD4
.rdata$r:00003BD4 ; Segment type: Pure data
.rdata$r:00003BD4 ; Segment permissions: Read
.rdata$r:00003BD4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BD4                 assume cs:_rdata$r
.rdata$r:00003BD4                 ;org 3BD4h
.rdata$r:00003BD4 ; COMDAT (pick any)
.rdata$r:00003BD4                 public ??_R3IArchiveOpenSeq@@8
.rdata$r:00003BD4 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003BD4 ??_R3IArchiveOpenSeq@@8 db    0         ; DATA XREF: .rdata$r:00003BB0o
.rdata$r:00003BD4                                         ; .rdata$r:00003C08o ...
.rdata$r:00003BD5                 db    0
.rdata$r:00003BD6                 db    0
.rdata$r:00003BD7                 db    0
.rdata$r:00003BD8                 db    0
.rdata$r:00003BD9                 db    0
.rdata$r:00003BDA                 db    0
.rdata$r:00003BDB                 db    0
.rdata$r:00003BDC                 db    2
.rdata$r:00003BDD                 db    0
.rdata$r:00003BDE                 db    0
.rdata$r:00003BDF                 db    0
.rdata$r:00003BE0                 dd offset ??_R2IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00003BE0 _rdata$r        ends
.rdata$r:00003BE0
.rdata$r:00003BE4 ; ===========================================================================
.rdata$r:00003BE4
.rdata$r:00003BE4 ; Segment type: Pure data
.rdata$r:00003BE4 ; Segment permissions: Read
.rdata$r:00003BE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BE4                 assume cs:_rdata$r
.rdata$r:00003BE4                 ;org 3BE4h
.rdata$r:00003BE4 ; COMDAT (pick any)
.rdata$r:00003BE4                 public ??_R2IArchiveOpenSeq@@8
.rdata$r:00003BE4 ; IArchiveOpenSeq::`RTTI Base Class Array'
.rdata$r:00003BE4 ??_R2IArchiveOpenSeq@@8 dd offset ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00003BE4                                         ; DATA XREF: .rdata$r:00003BE0o
.rdata$r:00003BE4                                         ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BE8                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003BEC                 db    0
.rdata$r:00003BED                 align 10h
.rdata$r:00003BED _rdata$r        ends
.rdata$r:00003BED
.rdata$r:00003BF0 ; ===========================================================================
.rdata$r:00003BF0
.rdata$r:00003BF0 ; Segment type: Pure data
.rdata$r:00003BF0 ; Segment permissions: Read
.rdata$r:00003BF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003BF0                 assume cs:_rdata$r
.rdata$r:00003BF0                 ;org 3BF0h
.rdata$r:00003BF0 ; COMDAT (pick any)
.rdata$r:00003BF0                 public ??_R1A@?0A@EA@IArchiveOpenSeq@@8
.rdata$r:00003BF0 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003BF0 ??_R1A@?0A@EA@IArchiveOpenSeq@@8 dd offset ??_R0?AUIArchiveOpenSeq@@@8
.rdata$r:00003BF0                                         ; DATA XREF: .rdata$r:IArchiveOpenSeq::`RTTI Base Class Array'o
.rdata$r:00003BF0                                         ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:00003BF4                 db    1
.rdata$r:00003BF5                 db    0
.rdata$r:00003BF6                 db    0
.rdata$r:00003BF7                 db    0
.rdata$r:00003BF8                 db    0
.rdata$r:00003BF9                 db    0
.rdata$r:00003BFA                 db    0
.rdata$r:00003BFB                 db    0
.rdata$r:00003BFC                 db 0FFh
.rdata$r:00003BFD                 db 0FFh
.rdata$r:00003BFE                 db 0FFh
.rdata$r:00003BFF                 db 0FFh
.rdata$r:00003C00                 db    0
.rdata$r:00003C01                 db    0
.rdata$r:00003C02                 db    0
.rdata$r:00003C03                 db    0
.rdata$r:00003C04                 db  40h ; @
.rdata$r:00003C05                 db    0
.rdata$r:00003C06                 db    0
.rdata$r:00003C07                 db    0
.rdata$r:00003C08                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C08 _rdata$r        ends
.rdata$r:00003C08
.rdata$r:00003C0C ; ===========================================================================
.rdata$r:00003C0C
.rdata$r:00003C0C ; Segment type: Pure data
.rdata$r:00003C0C ; Segment permissions: Read
.rdata$r:00003C0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C0C                 assume cs:_rdata$r
.rdata$r:00003C0C                 ;org 3C0Ch
.rdata$r:00003C0C ; COMDAT (pick any)
.rdata$r:00003C0C                 public ??_R13?0A@EC@IUnknown@@8
.rdata$r:00003C0C ; IUnknown::`RTTI Base Class Descriptor at (4, -1, 0, 66)'
.rdata$r:00003C0C ??_R13?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003C0C                                         ; DATA XREF: .rdata$r:00003AA0o
.rdata$r:00003C0C                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003C10                 db    0
.rdata$r:00003C11                 db    0
.rdata$r:00003C12                 db    0
.rdata$r:00003C13                 db    0
.rdata$r:00003C14                 db    4
.rdata$r:00003C15                 db    0
.rdata$r:00003C16                 db    0
.rdata$r:00003C17                 db    0
.rdata$r:00003C18                 db 0FFh
.rdata$r:00003C19                 db 0FFh
.rdata$r:00003C1A                 db 0FFh
.rdata$r:00003C1B                 db 0FFh
.rdata$r:00003C1C                 db    0
.rdata$r:00003C1D                 db    0
.rdata$r:00003C1E                 db    0
.rdata$r:00003C1F                 db    0
.rdata$r:00003C20                 db  42h ; B
.rdata$r:00003C21                 db    0
.rdata$r:00003C22                 db    0
.rdata$r:00003C23                 db    0
.rdata$r:00003C24                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C24 _rdata$r        ends
.rdata$r:00003C24
.rdata$r:00003C28 ; ===========================================================================
.rdata$r:00003C28
.rdata$r:00003C28 ; Segment type: Pure data
.rdata$r:00003C28 ; Segment permissions: Read
.rdata$r:00003C28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C28                 assume cs:_rdata$r
.rdata$r:00003C28                 ;org 3C28h
.rdata$r:00003C28 ; COMDAT (pick any)
.rdata$r:00003C28                 public ??_R17?0A@EA@IOutArchive@@8
.rdata$r:00003C28 ; IOutArchive::`RTTI Base Class Descriptor at (8, -1, 0, 64)'
.rdata$r:00003C28 ??_R17?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00003C28                                         ; DATA XREF: .rdata$r:00003AA4o
.rdata$r:00003C28                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00003C2C                 db    1
.rdata$r:00003C2D                 db    0
.rdata$r:00003C2E                 db    0
.rdata$r:00003C2F                 db    0
.rdata$r:00003C30                 db    8
.rdata$r:00003C31                 db    0
.rdata$r:00003C32                 db    0
.rdata$r:00003C33                 db    0
.rdata$r:00003C34                 db 0FFh
.rdata$r:00003C35                 db 0FFh
.rdata$r:00003C36                 db 0FFh
.rdata$r:00003C37                 db 0FFh
.rdata$r:00003C38                 db    0
.rdata$r:00003C39                 db    0
.rdata$r:00003C3A                 db    0
.rdata$r:00003C3B                 db    0
.rdata$r:00003C3C                 db  40h ; @
.rdata$r:00003C3D                 db    0
.rdata$r:00003C3E                 db    0
.rdata$r:00003C3F                 db    0
.rdata$r:00003C40                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C40 _rdata$r        ends
.rdata$r:00003C40
.data:00003C44 ; ===========================================================================
.data:00003C44
.data:00003C44 ; Segment type: Pure data
.data:00003C44 ; Segment permissions: Read/Write
.data:00003C44 _data           segment dword public 'DATA' use32
.data:00003C44                 assume cs:_data
.data:00003C44                 ;org 3C44h
.data:00003C44 ; COMDAT (pick any)
.data:00003C44                 public ??_R0?AUIOutArchive@@@8
.data:00003C44 ; struct IOutArchive `RTTI Type Descriptor'
.data:00003C44 ??_R0?AUIOutArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003C44                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'o
.data:00003C44                                         ; .rdata$r:IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003C44                                         ; const type_info::`vftable'
.data:00003C48                 db    0
.data:00003C49                 db    0
.data:00003C4A                 db    0
.data:00003C4B                 db    0
.data:00003C4C                 db  2Eh ; .
.data:00003C4D                 db  3Fh ; ?
.data:00003C4E                 db  41h ; A
.data:00003C4F                 db  55h ; U
.data:00003C50                 db  49h ; I
.data:00003C51                 db  4Fh ; O
.data:00003C52                 db  75h ; u
.data:00003C53                 db  74h ; t
.data:00003C54                 db  41h ; A
.data:00003C55                 db  72h ; r
.data:00003C56                 db  63h ; c
.data:00003C57                 db  68h ; h
.data:00003C58                 db  69h ; i
.data:00003C59                 db  76h ; v
.data:00003C5A                 db  65h ; e
.data:00003C5B                 db  40h ; @
.data:00003C5C                 db  40h ; @
.data:00003C5D                 db    0
.data:00003C5E                 align 10h
.data:00003C5E _data           ends
.data:00003C5E
.rdata$r:00003C60 ; ===========================================================================
.rdata$r:00003C60
.rdata$r:00003C60 ; Segment type: Pure data
.rdata$r:00003C60 ; Segment permissions: Read
.rdata$r:00003C60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C60                 assume cs:_rdata$r
.rdata$r:00003C60                 ;org 3C60h
.rdata$r:00003C60 ; COMDAT (pick any)
.rdata$r:00003C60                 public ??_R3IOutArchive@@8
.rdata$r:00003C60 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C60 ??_R3IOutArchive@@8 db    0             ; DATA XREF: .rdata$r:00003C40o
.rdata$r:00003C60                                         ; .rdata$r:00003C94o ...
.rdata$r:00003C61                 db    0
.rdata$r:00003C62                 db    0
.rdata$r:00003C63                 db    0
.rdata$r:00003C64                 db    0
.rdata$r:00003C65                 db    0
.rdata$r:00003C66                 db    0
.rdata$r:00003C67                 db    0
.rdata$r:00003C68                 db    2
.rdata$r:00003C69                 db    0
.rdata$r:00003C6A                 db    0
.rdata$r:00003C6B                 db    0
.rdata$r:00003C6C                 dd offset ??_R2IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:00003C6C _rdata$r        ends
.rdata$r:00003C6C
.rdata$r:00003C70 ; ===========================================================================
.rdata$r:00003C70
.rdata$r:00003C70 ; Segment type: Pure data
.rdata$r:00003C70 ; Segment permissions: Read
.rdata$r:00003C70 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C70                 assume cs:_rdata$r
.rdata$r:00003C70                 ;org 3C70h
.rdata$r:00003C70 ; COMDAT (pick any)
.rdata$r:00003C70                 public ??_R2IOutArchive@@8
.rdata$r:00003C70 ; IOutArchive::`RTTI Base Class Array'
.rdata$r:00003C70 ??_R2IOutArchive@@8 dd offset ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00003C70                                         ; DATA XREF: .rdata$r:00003C6Co
.rdata$r:00003C70                                         ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C74                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003C78                 db    0
.rdata$r:00003C79                 align 4
.rdata$r:00003C79 _rdata$r        ends
.rdata$r:00003C79
.rdata$r:00003C7C ; ===========================================================================
.rdata$r:00003C7C
.rdata$r:00003C7C ; Segment type: Pure data
.rdata$r:00003C7C ; Segment permissions: Read
.rdata$r:00003C7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C7C                 assume cs:_rdata$r
.rdata$r:00003C7C                 ;org 3C7Ch
.rdata$r:00003C7C ; COMDAT (pick any)
.rdata$r:00003C7C                 public ??_R1A@?0A@EA@IOutArchive@@8
.rdata$r:00003C7C ; IOutArchive::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003C7C ??_R1A@?0A@EA@IOutArchive@@8 dd offset ??_R0?AUIOutArchive@@@8
.rdata$r:00003C7C                                         ; DATA XREF: .rdata$r:IOutArchive::`RTTI Base Class Array'o
.rdata$r:00003C7C                                         ; IOutArchive `RTTI Type Descriptor'
.rdata$r:00003C80                 db    1
.rdata$r:00003C81                 db    0
.rdata$r:00003C82                 db    0
.rdata$r:00003C83                 db    0
.rdata$r:00003C84                 db    0
.rdata$r:00003C85                 db    0
.rdata$r:00003C86                 db    0
.rdata$r:00003C87                 db    0
.rdata$r:00003C88                 db 0FFh
.rdata$r:00003C89                 db 0FFh
.rdata$r:00003C8A                 db 0FFh
.rdata$r:00003C8B                 db 0FFh
.rdata$r:00003C8C                 db    0
.rdata$r:00003C8D                 db    0
.rdata$r:00003C8E                 db    0
.rdata$r:00003C8F                 db    0
.rdata$r:00003C90                 db  40h ; @
.rdata$r:00003C91                 db    0
.rdata$r:00003C92                 db    0
.rdata$r:00003C93                 db    0
.rdata$r:00003C94                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003C94 _rdata$r        ends
.rdata$r:00003C94
.rdata$r:00003C98 ; ===========================================================================
.rdata$r:00003C98
.rdata$r:00003C98 ; Segment type: Pure data
.rdata$r:00003C98 ; Segment permissions: Read
.rdata$r:00003C98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003C98                 assume cs:_rdata$r
.rdata$r:00003C98                 ;org 3C98h
.rdata$r:00003C98 ; COMDAT (pick any)
.rdata$r:00003C98                 public ??_R17?0A@EC@IUnknown@@8
.rdata$r:00003C98 ; IUnknown::`RTTI Base Class Descriptor at (8, -1, 0, 66)'
.rdata$r:00003C98 ??_R17?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003C98                                         ; DATA XREF: .rdata$r:00003AA8o
.rdata$r:00003C98                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003C9C                 align 10h
.rdata$r:00003CA0                 db    8
.rdata$r:00003CA1                 db    0
.rdata$r:00003CA2                 db    0
.rdata$r:00003CA3                 db    0
.rdata$r:00003CA4                 db 0FFh
.rdata$r:00003CA5                 db 0FFh
.rdata$r:00003CA6                 db 0FFh
.rdata$r:00003CA7                 db 0FFh
.rdata$r:00003CA8                 db    0
.rdata$r:00003CA9                 db    0
.rdata$r:00003CAA                 db    0
.rdata$r:00003CAB                 db    0
.rdata$r:00003CAC                 db  42h ; B
.rdata$r:00003CAD                 db    0
.rdata$r:00003CAE                 db    0
.rdata$r:00003CAF                 db    0
.rdata$r:00003CB0                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CB0 _rdata$r        ends
.rdata$r:00003CB0
.rdata$r:00003CB4 ; ===========================================================================
.rdata$r:00003CB4
.rdata$r:00003CB4 ; Segment type: Pure data
.rdata$r:00003CB4 ; Segment permissions: Read
.rdata$r:00003CB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CB4                 assume cs:_rdata$r
.rdata$r:00003CB4                 ;org 3CB4h
.rdata$r:00003CB4 ; COMDAT (pick any)
.rdata$r:00003CB4                 public ??_R1M@?0A@EA@ISetProperties@@8
.rdata$r:00003CB4 ; ISetProperties::`RTTI Base Class Descriptor at (12, -1, 0, 64)'
.rdata$r:00003CB4 ??_R1M@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00003CB4                                         ; DATA XREF: .rdata$r:00003AACo
.rdata$r:00003CB4                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00003CB8                 db    1
.rdata$r:00003CB9                 db    0
.rdata$r:00003CBA                 db    0
.rdata$r:00003CBB                 db    0
.rdata$r:00003CBC                 db  0Ch
.rdata$r:00003CBD                 db    0
.rdata$r:00003CBE                 db    0
.rdata$r:00003CBF                 db    0
.rdata$r:00003CC0                 db 0FFh
.rdata$r:00003CC1                 db 0FFh
.rdata$r:00003CC2                 db 0FFh
.rdata$r:00003CC3                 db 0FFh
.rdata$r:00003CC4                 db    0
.rdata$r:00003CC5                 db    0
.rdata$r:00003CC6                 db    0
.rdata$r:00003CC7                 db    0
.rdata$r:00003CC8                 db  40h ; @
.rdata$r:00003CC9                 db    0
.rdata$r:00003CCA                 db    0
.rdata$r:00003CCB                 db    0
.rdata$r:00003CCC                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CCC _rdata$r        ends
.rdata$r:00003CCC
.data:00003CD0 ; ===========================================================================
.data:00003CD0
.data:00003CD0 ; Segment type: Pure data
.data:00003CD0 ; Segment permissions: Read/Write
.data:00003CD0 _data           segment dword public 'DATA' use32
.data:00003CD0                 assume cs:_data
.data:00003CD0                 ;org 3CD0h
.data:00003CD0 ; COMDAT (pick any)
.data:00003CD0                 public ??_R0?AUISetProperties@@@8
.data:00003CD0 ; struct ISetProperties `RTTI Type Descriptor'
.data:00003CD0 ??_R0?AUISetProperties@@@8 dd offset ??_7type_info@@6B@
.data:00003CD0                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'o
.data:00003CD0                                         ; .rdata$r:ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'o ...
.data:00003CD0                                         ; const type_info::`vftable'
.data:00003CD4                 align 8
.data:00003CD8 a_?auisetproper db '.?AUISetProperties@@',0
.data:00003CED                 align 10h
.data:00003CED _data           ends
.data:00003CED
.rdata$r:00003CF0 ; ===========================================================================
.rdata$r:00003CF0
.rdata$r:00003CF0 ; Segment type: Pure data
.rdata$r:00003CF0 ; Segment permissions: Read
.rdata$r:00003CF0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003CF0                 assume cs:_rdata$r
.rdata$r:00003CF0                 ;org 3CF0h
.rdata$r:00003CF0 ; COMDAT (pick any)
.rdata$r:00003CF0                 public ??_R3ISetProperties@@8
.rdata$r:00003CF0 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003CF0 ??_R3ISetProperties@@8 db    0          ; DATA XREF: .rdata$r:00003CCCo
.rdata$r:00003CF0                                         ; .rdata$r:00003D24o ...
.rdata$r:00003CF1                 db    0
.rdata$r:00003CF2                 db    0
.rdata$r:00003CF3                 db    0
.rdata$r:00003CF4                 db    0
.rdata$r:00003CF5                 db    0
.rdata$r:00003CF6                 db    0
.rdata$r:00003CF7                 db    0
.rdata$r:00003CF8                 db    2
.rdata$r:00003CF9                 db    0
.rdata$r:00003CFA                 db    0
.rdata$r:00003CFB                 db    0
.rdata$r:00003CFC                 dd offset ??_R2ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00003CFC _rdata$r        ends
.rdata$r:00003CFC
.rdata$r:00003D00 ; ===========================================================================
.rdata$r:00003D00
.rdata$r:00003D00 ; Segment type: Pure data
.rdata$r:00003D00 ; Segment permissions: Read
.rdata$r:00003D00 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D00                 assume cs:_rdata$r
.rdata$r:00003D00                 ;org 3D00h
.rdata$r:00003D00 ; COMDAT (pick any)
.rdata$r:00003D00                 public ??_R2ISetProperties@@8
.rdata$r:00003D00 ; ISetProperties::`RTTI Base Class Array'
.rdata$r:00003D00 ??_R2ISetProperties@@8 dd offset ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00003D00                                         ; DATA XREF: .rdata$r:00003CFCo
.rdata$r:00003D00                                         ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D04                 dd offset ??_R1A@?0A@EA@IUnknown@@8 ; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003D08                 db    0
.rdata$r:00003D09                 align 4
.rdata$r:00003D09 _rdata$r        ends
.rdata$r:00003D09
.rdata$r:00003D0C ; ===========================================================================
.rdata$r:00003D0C
.rdata$r:00003D0C ; Segment type: Pure data
.rdata$r:00003D0C ; Segment permissions: Read
.rdata$r:00003D0C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D0C                 assume cs:_rdata$r
.rdata$r:00003D0C                 ;org 3D0Ch
.rdata$r:00003D0C ; COMDAT (pick any)
.rdata$r:00003D0C                 public ??_R1A@?0A@EA@ISetProperties@@8
.rdata$r:00003D0C ; ISetProperties::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003D0C ??_R1A@?0A@EA@ISetProperties@@8 dd offset ??_R0?AUISetProperties@@@8
.rdata$r:00003D0C                                         ; DATA XREF: .rdata$r:ISetProperties::`RTTI Base Class Array'o
.rdata$r:00003D0C                                         ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00003D10                 db    1
.rdata$r:00003D11                 db    0
.rdata$r:00003D12                 db    0
.rdata$r:00003D13                 db    0
.rdata$r:00003D14                 db    0
.rdata$r:00003D15                 db    0
.rdata$r:00003D16                 db    0
.rdata$r:00003D17                 db    0
.rdata$r:00003D18                 db 0FFh
.rdata$r:00003D19                 db 0FFh
.rdata$r:00003D1A                 db 0FFh
.rdata$r:00003D1B                 db 0FFh
.rdata$r:00003D1C                 db    0
.rdata$r:00003D1D                 db    0
.rdata$r:00003D1E                 db    0
.rdata$r:00003D1F                 db    0
.rdata$r:00003D20                 db  40h ; @
.rdata$r:00003D21                 db    0
.rdata$r:00003D22                 db    0
.rdata$r:00003D23                 db    0
.rdata$r:00003D24                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D24 _rdata$r        ends
.rdata$r:00003D24
.rdata$r:00003D28 ; ===========================================================================
.rdata$r:00003D28
.rdata$r:00003D28 ; Segment type: Pure data
.rdata$r:00003D28 ; Segment permissions: Read
.rdata$r:00003D28 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D28                 assume cs:_rdata$r
.rdata$r:00003D28                 ;org 3D28h
.rdata$r:00003D28 ; COMDAT (pick any)
.rdata$r:00003D28                 public ??_R1M@?0A@EC@IUnknown@@8
.rdata$r:00003D28 ; IUnknown::`RTTI Base Class Descriptor at (12, -1, 0, 66)'
.rdata$r:00003D28 ??_R1M@?0A@EC@IUnknown@@8 dd offset ??_R0?AUIUnknown@@@8
.rdata$r:00003D28                                         ; DATA XREF: .rdata$r:00003AB0o
.rdata$r:00003D28                                         ; IUnknown `RTTI Type Descriptor'
.rdata$r:00003D2C                 align 10h
.rdata$r:00003D30                 db  0Ch
.rdata$r:00003D31                 db    0
.rdata$r:00003D32                 db    0
.rdata$r:00003D33                 db    0
.rdata$r:00003D34                 db 0FFh
.rdata$r:00003D35                 db 0FFh
.rdata$r:00003D36                 db 0FFh
.rdata$r:00003D37                 db 0FFh
.rdata$r:00003D38                 db    0
.rdata$r:00003D39                 db    0
.rdata$r:00003D3A                 db    0
.rdata$r:00003D3B                 db    0
.rdata$r:00003D3C                 db  42h ; B
.rdata$r:00003D3D                 db    0
.rdata$r:00003D3E                 db    0
.rdata$r:00003D3F                 db    0
.rdata$r:00003D40                 dd offset ??_R3IUnknown@@8 ; IUnknown::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D40 _rdata$r        ends
.rdata$r:00003D40
.rdata$r:00003D44 ; ===========================================================================
.rdata$r:00003D44
.rdata$r:00003D44 ; Segment type: Pure data
.rdata$r:00003D44 ; Segment permissions: Read
.rdata$r:00003D44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D44                 assume cs:_rdata$r
.rdata$r:00003D44                 ;org 3D44h
.rdata$r:00003D44 ; COMDAT (pick any)
.rdata$r:00003D44                 public ??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:00003D44 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (16, -1, 0, 64)'
.rdata$r:00003D44 ??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8 dd offset ??_R0?AVCMultiMethodProps@NArchive@@@8
.rdata$r:00003D44                                         ; DATA XREF: .rdata$r:00003AB4o
.rdata$r:00003D44                                         ; NArchive::CMultiMethodProps `RTTI Type Descriptor'
.rdata$r:00003D48                 db    0
.rdata$r:00003D49                 db    0
.rdata$r:00003D4A                 db    0
.rdata$r:00003D4B                 db    0
.rdata$r:00003D4C                 db  10h
.rdata$r:00003D4D                 db    0
.rdata$r:00003D4E                 db    0
.rdata$r:00003D4F                 db    0
.rdata$r:00003D50                 db 0FFh
.rdata$r:00003D51                 db 0FFh
.rdata$r:00003D52                 db 0FFh
.rdata$r:00003D53                 db 0FFh
.rdata$r:00003D54                 db    0
.rdata$r:00003D55                 db    0
.rdata$r:00003D56                 db    0
.rdata$r:00003D57                 db    0
.rdata$r:00003D58                 db  40h ; @
.rdata$r:00003D59                 db    0
.rdata$r:00003D5A                 db    0
.rdata$r:00003D5B                 db    0
.rdata$r:00003D5C                 dd offset ??_R3CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D5C _rdata$r        ends
.rdata$r:00003D5C
.data:00003D60 ; ===========================================================================
.data:00003D60
.data:00003D60 ; Segment type: Pure data
.data:00003D60 ; Segment permissions: Read/Write
.data:00003D60 _data           segment dword public 'DATA' use32
.data:00003D60                 assume cs:_data
.data:00003D60                 ;org 3D60h
.data:00003D60 ; COMDAT (pick any)
.data:00003D60                 public ??_R0?AVCMultiMethodProps@NArchive@@@8
.data:00003D60 ; class NArchive::CMultiMethodProps `RTTI Type Descriptor'
.data:00003D60 ??_R0?AVCMultiMethodProps@NArchive@@@8 dd offset ??_7type_info@@6B@
.data:00003D60                                         ; DATA XREF: .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (16,-1,0,64)'o
.data:00003D60                                         ; .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003D60                                         ; const type_info::`vftable'
.data:00003D64                 align 8
.data:00003D68 a_?avcmultimeth db '.?AVCMultiMethodProps@NArchive@@',0
.data:00003D89                 align 4
.data:00003D89 _data           ends
.data:00003D89
.rdata$r:00003D8C ; ===========================================================================
.rdata$r:00003D8C
.rdata$r:00003D8C ; Segment type: Pure data
.rdata$r:00003D8C ; Segment permissions: Read
.rdata$r:00003D8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D8C                 assume cs:_rdata$r
.rdata$r:00003D8C                 ;org 3D8Ch
.rdata$r:00003D8C ; COMDAT (pick any)
.rdata$r:00003D8C                 public ??_R3CMultiMethodProps@NArchive@@8
.rdata$r:00003D8C ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003D8C ??_R3CMultiMethodProps@NArchive@@8 db    0 ; DATA XREF: .rdata$r:00003D5Co
.rdata$r:00003D8C                                         ; .rdata$r:00003DBCo
.rdata$r:00003D8D                 db    0
.rdata$r:00003D8E                 db    0
.rdata$r:00003D8F                 db    0
.rdata$r:00003D90                 db    0
.rdata$r:00003D91                 db    0
.rdata$r:00003D92                 db    0
.rdata$r:00003D93                 db    0
.rdata$r:00003D94                 db    1
.rdata$r:00003D95                 db    0
.rdata$r:00003D96                 db    0
.rdata$r:00003D97                 db    0
.rdata$r:00003D98                 dd offset ??_R2CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Array'
.rdata$r:00003D98 _rdata$r        ends
.rdata$r:00003D98
.rdata$r:00003D9C ; ===========================================================================
.rdata$r:00003D9C
.rdata$r:00003D9C ; Segment type: Pure data
.rdata$r:00003D9C ; Segment permissions: Read
.rdata$r:00003D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003D9C                 assume cs:_rdata$r
.rdata$r:00003D9C                 ;org 3D9Ch
.rdata$r:00003D9C ; COMDAT (pick any)
.rdata$r:00003D9C                 public ??_R2CMultiMethodProps@NArchive@@8
.rdata$r:00003D9C ; NArchive::CMultiMethodProps::`RTTI Base Class Array'
.rdata$r:00003D9C ??_R2CMultiMethodProps@NArchive@@8 dd offset ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:00003D9C                                         ; DATA XREF: .rdata$r:00003D98o
.rdata$r:00003D9C                                         ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003DA0                 db    0
.rdata$r:00003DA1                 align 4
.rdata$r:00003DA1 _rdata$r        ends
.rdata$r:00003DA1
.rdata$r:00003DA4 ; ===========================================================================
.rdata$r:00003DA4
.rdata$r:00003DA4 ; Segment type: Pure data
.rdata$r:00003DA4 ; Segment permissions: Read
.rdata$r:00003DA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DA4                 assume cs:_rdata$r
.rdata$r:00003DA4                 ;org 3DA4h
.rdata$r:00003DA4 ; COMDAT (pick any)
.rdata$r:00003DA4                 public ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8
.rdata$r:00003DA4 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003DA4 ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8 dd offset ??_R0?AVCMultiMethodProps@NArchive@@@8
.rdata$r:00003DA4                                         ; DATA XREF: .rdata$r:NArchive::CMultiMethodProps::`RTTI Base Class Array'o
.rdata$r:00003DA4                                         ; NArchive::CMultiMethodProps `RTTI Type Descriptor'
.rdata$r:00003DA8                 align 10h
.rdata$r:00003DB0                 db 0FFh
.rdata$r:00003DB1                 db 0FFh
.rdata$r:00003DB2                 db 0FFh
.rdata$r:00003DB3                 db 0FFh
.rdata$r:00003DB4                 db    0
.rdata$r:00003DB5                 db    0
.rdata$r:00003DB6                 db    0
.rdata$r:00003DB7                 db    0
.rdata$r:00003DB8                 db  40h ; @
.rdata$r:00003DB9                 db    0
.rdata$r:00003DBA                 db    0
.rdata$r:00003DBB                 db    0
.rdata$r:00003DBC                 dd offset ??_R3CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DBC _rdata$r        ends
.rdata$r:00003DBC
.rdata$r:00003DC0 ; ===========================================================================
.rdata$r:00003DC0
.rdata$r:00003DC0 ; Segment type: Pure data
.rdata$r:00003DC0 ; Segment permissions: Read
.rdata$r:00003DC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DC0                 assume cs:_rdata$r
.rdata$r:00003DC0                 ;org 3DC0h
.rdata$r:00003DC0 ; COMDAT (pick any)
.rdata$r:00003DC0                 public ??_R1FI@?0A@EA@CMyUnknownImp@@8
.rdata$r:00003DC0 ; CMyUnknownImp::`RTTI Base Class Descriptor at (88, -1, 0, 64)'
.rdata$r:00003DC0 ??_R1FI@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003DC0                                         ; DATA XREF: .rdata$r:00003AB8o
.rdata$r:00003DC0                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003DC4                 align 8
.rdata$r:00003DC8                 dd offset unk_58
.rdata$r:00003DCC                 db 0FFh
.rdata$r:00003DCD                 db 0FFh
.rdata$r:00003DCE                 db 0FFh
.rdata$r:00003DCF                 db 0FFh
.rdata$r:00003DD0                 db    0
.rdata$r:00003DD1                 db    0
.rdata$r:00003DD2                 db    0
.rdata$r:00003DD3                 db    0
.rdata$r:00003DD4                 db  40h ; @
.rdata$r:00003DD5                 db    0
.rdata$r:00003DD6                 db    0
.rdata$r:00003DD7                 db    0
.rdata$r:00003DD8                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DD8 _rdata$r        ends
.rdata$r:00003DD8
.data:00003DDC ; ===========================================================================
.data:00003DDC
.data:00003DDC ; Segment type: Pure data
.data:00003DDC ; Segment permissions: Read/Write
.data:00003DDC _data           segment dword public 'DATA' use32
.data:00003DDC                 assume cs:_data
.data:00003DDC                 ;org 3DDCh
.data:00003DDC ; COMDAT (pick any)
.data:00003DDC                 public ??_R0?AVCMyUnknownImp@@@8
.data:00003DDC ; class CMyUnknownImp `RTTI Type Descriptor'
.data:00003DDC ??_R0?AVCMyUnknownImp@@@8 dd offset ??_7type_info@@6B@
.data:00003DDC                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (88,-1,0,64)'o
.data:00003DDC                                         ; .rdata$r:CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data:00003DDC                                         ; const type_info::`vftable'
.data:00003DE0                 db    0
.data:00003DE1                 db    0
.data:00003DE2                 db    0
.data:00003DE3                 db    0
.data:00003DE4                 db  2Eh ; .
.data:00003DE5                 db  3Fh ; ?
.data:00003DE6                 db  41h ; A
.data:00003DE7                 db  56h ; V
.data:00003DE8                 db  43h ; C
.data:00003DE9                 db  4Dh ; M
.data:00003DEA                 db  79h ; y
.data:00003DEB                 db  55h ; U
.data:00003DEC                 db  6Eh ; n
.data:00003DED                 db  6Bh ; k
.data:00003DEE                 db  6Eh ; n
.data:00003DEF                 db  6Fh ; o
.data:00003DF0                 db  77h ; w
.data:00003DF1                 db  6Eh ; n
.data:00003DF2                 db  49h ; I
.data:00003DF3                 db  6Dh ; m
.data:00003DF4                 db  70h ; p
.data:00003DF5                 db  40h ; @
.data:00003DF6                 db  40h ; @
.data:00003DF7                 db    0
.data:00003DF7 _data           ends
.data:00003DF7
.rdata$r:00003DF8 ; ===========================================================================
.rdata$r:00003DF8
.rdata$r:00003DF8 ; Segment type: Pure data
.rdata$r:00003DF8 ; Segment permissions: Read
.rdata$r:00003DF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003DF8                 assume cs:_rdata$r
.rdata$r:00003DF8                 ;org 3DF8h
.rdata$r:00003DF8 ; COMDAT (pick any)
.rdata$r:00003DF8                 public ??_R3CMyUnknownImp@@8
.rdata$r:00003DF8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003DF8 ??_R3CMyUnknownImp@@8 db    0           ; DATA XREF: .rdata$r:00003DD8o
.rdata$r:00003DF8                                         ; .rdata$r:00003E28o
.rdata$r:00003DF9                 db    0
.rdata$r:00003DFA                 db    0
.rdata$r:00003DFB                 db    0
.rdata$r:00003DFC                 db    0
.rdata$r:00003DFD                 db    0
.rdata$r:00003DFE                 db    0
.rdata$r:00003DFF                 db    0
.rdata$r:00003E00                 db    1
.rdata$r:00003E01                 db    0
.rdata$r:00003E02                 db    0
.rdata$r:00003E03                 db    0
.rdata$r:00003E04                 dd offset ??_R2CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00003E04 _rdata$r        ends
.rdata$r:00003E04
.rdata$r:00003E08 ; ===========================================================================
.rdata$r:00003E08
.rdata$r:00003E08 ; Segment type: Pure data
.rdata$r:00003E08 ; Segment permissions: Read
.rdata$r:00003E08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E08                 assume cs:_rdata$r
.rdata$r:00003E08                 ;org 3E08h
.rdata$r:00003E08 ; COMDAT (pick any)
.rdata$r:00003E08                 public ??_R2CMyUnknownImp@@8
.rdata$r:00003E08 ; CMyUnknownImp::`RTTI Base Class Array'
.rdata$r:00003E08 ??_R2CMyUnknownImp@@8 dd offset ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00003E08                                         ; DATA XREF: .rdata$r:00003E04o
.rdata$r:00003E08                                         ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00003E0C                 db    0
.rdata$r:00003E0D                 align 10h
.rdata$r:00003E0D _rdata$r        ends
.rdata$r:00003E0D
.rdata$r:00003E10 ; ===========================================================================
.rdata$r:00003E10
.rdata$r:00003E10 ; Segment type: Pure data
.rdata$r:00003E10 ; Segment permissions: Read
.rdata$r:00003E10 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E10                 assume cs:_rdata$r
.rdata$r:00003E10                 ;org 3E10h
.rdata$r:00003E10 ; COMDAT (pick any)
.rdata$r:00003E10                 public ??_R1A@?0A@EA@CMyUnknownImp@@8
.rdata$r:00003E10 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00003E10 ??_R1A@?0A@EA@CMyUnknownImp@@8 dd offset ??_R0?AVCMyUnknownImp@@@8
.rdata$r:00003E10                                         ; DATA XREF: .rdata$r:CMyUnknownImp::`RTTI Base Class Array'o
.rdata$r:00003E10                                         ; CMyUnknownImp `RTTI Type Descriptor'
.rdata$r:00003E14                 db    0
.rdata$r:00003E15                 db    0
.rdata$r:00003E16                 db    0
.rdata$r:00003E17                 db    0
.rdata$r:00003E18                 db    0
.rdata$r:00003E19                 db    0
.rdata$r:00003E1A                 db    0
.rdata$r:00003E1B                 db    0
.rdata$r:00003E1C                 db 0FFh
.rdata$r:00003E1D                 db 0FFh
.rdata$r:00003E1E                 db 0FFh
.rdata$r:00003E1F                 db 0FFh
.rdata$r:00003E20                 db    0
.rdata$r:00003E21                 db    0
.rdata$r:00003E22                 db    0
.rdata$r:00003E23                 db    0
.rdata$r:00003E24                 db  40h ; @
.rdata$r:00003E25                 db    0
.rdata$r:00003E26                 db    0
.rdata$r:00003E27                 db    0
.rdata$r:00003E28                 dd offset ??_R3CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E28 _rdata$r        ends
.rdata$r:00003E28
.rdata$r:00003E2C ; ===========================================================================
.rdata$r:00003E2C
.rdata$r:00003E2C ; Segment type: Pure data
.rdata$r:00003E2C ; Segment permissions: Read
.rdata$r:00003E2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E2C                 assume cs:_rdata$r
.rdata$r:00003E2C                 ;org 3E2Ch
.rdata$r:00003E2C ; COMDAT (pick any)
.rdata$r:00003E2C                 public ??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@
.rdata$r:00003E2C ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IArchiveOpenSeq'}
.rdata$r:00003E2C ??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ db    0
.rdata$r:00003E2C                                         ; DATA XREF: .rdata:0000362Co
.rdata$r:00003E2D                 db    0
.rdata$r:00003E2E                 db    0
.rdata$r:00003E2F                 db    0
.rdata$r:00003E30                 db    4
.rdata$r:00003E31                 db    0
.rdata$r:00003E32                 db    0
.rdata$r:00003E33                 db    0
.rdata$r:00003E34                 db    0
.rdata$r:00003E35                 db    0
.rdata$r:00003E36                 db    0
.rdata$r:00003E37                 db    0
.rdata$r:00003E38                 dd offset ??_R0?AVCHandler@NXz@NArchive@@@8 ; NArchive::NXz::CHandler `RTTI Type Descriptor'
.rdata$r:00003E3C                 dd offset ??_R3CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E3C _rdata$r        ends
.rdata$r:00003E3C
.rdata$r:00003E40 ; ===========================================================================
.rdata$r:00003E40
.rdata$r:00003E40 ; Segment type: Pure data
.rdata$r:00003E40 ; Segment permissions: Read
.rdata$r:00003E40 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E40                 assume cs:_rdata$r
.rdata$r:00003E40                 ;org 3E40h
.rdata$r:00003E40 ; COMDAT (pick any)
.rdata$r:00003E40                 public ??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@
.rdata$r:00003E40 ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `IOutArchive'}
.rdata$r:00003E40 ??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@ db    0
.rdata$r:00003E40                                         ; DATA XREF: .rdata:00003614o
.rdata$r:00003E41                 db    0
.rdata$r:00003E42                 db    0
.rdata$r:00003E43                 db    0
.rdata$r:00003E44                 db    8
.rdata$r:00003E45                 db    0
.rdata$r:00003E46                 db    0
.rdata$r:00003E47                 db    0
.rdata$r:00003E48                 db    0
.rdata$r:00003E49                 db    0
.rdata$r:00003E4A                 db    0
.rdata$r:00003E4B                 db    0
.rdata$r:00003E4C                 dd offset ??_R0?AVCHandler@NXz@NArchive@@@8 ; NArchive::NXz::CHandler `RTTI Type Descriptor'
.rdata$r:00003E50                 dd offset ??_R3CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E50 _rdata$r        ends
.rdata$r:00003E50
.rdata$r:00003E54 ; ===========================================================================
.rdata$r:00003E54
.rdata$r:00003E54 ; Segment type: Pure data
.rdata$r:00003E54 ; Segment permissions: Read
.rdata$r:00003E54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00003E54                 assume cs:_rdata$r
.rdata$r:00003E54                 ;org 3E54h
.rdata$r:00003E54 ; COMDAT (pick any)
.rdata$r:00003E54                 public ??_R4CHandler@NXz@NArchive@@6BISetProperties@@@
.rdata$r:00003E54 ; const NArchive::NXz::CHandler::`RTTI Complete Object Locator'{for `ISetProperties'}
.rdata$r:00003E54 ??_R4CHandler@NXz@NArchive@@6BISetProperties@@@ db    0
.rdata$r:00003E54                                         ; DATA XREF: .rdata:00003600o
.rdata$r:00003E55                 db    0
.rdata$r:00003E56                 db    0
.rdata$r:00003E57                 db    0
.rdata$r:00003E58                 db  0Ch
.rdata$r:00003E59                 db    0
.rdata$r:00003E5A                 db    0
.rdata$r:00003E5B                 db    0
.rdata$r:00003E5C                 db    0
.rdata$r:00003E5D                 db    0
.rdata$r:00003E5E                 db    0
.rdata$r:00003E5F                 db    0
.rdata$r:00003E60                 dd offset ??_R0?AVCHandler@NXz@NArchive@@@8 ; NArchive::NXz::CHandler `RTTI Type Descriptor'
.rdata$r:00003E64                 dd offset ??_R3CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
.rdata$r:00003E64 _rdata$r        ends
.rdata$r:00003E64
.text:00003E68 ; ===========================================================================
.text:00003E68
.text:00003E68 ; Segment type: Pure code
.text:00003E68 ; Segment permissions: Read/Execute
.text:00003E68 _text           segment para public 'CODE' use32
.text:00003E68                 assume cs:_text
.text:00003E68                 ;org 3E68h
.text:00003E68 ; COMDAT (pick any)
.text:00003E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E68
.text:00003E68 ; =============== S U B R O U T I N E =======================================
.text:00003E68
.text:00003E68 ; Attributes: bp-based frame
.text:00003E68
.text:00003E68 ; _DWORD __thiscall CMyUnknownImp::CMyUnknownImp(CMyUnknownImp *__hidden this)
.text:00003E68                 public ??0CMyUnknownImp@@QAE@XZ
.text:00003E68 ??0CMyUnknownImp@@QAE@XZ proc near      ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+6Ep
.text:00003E68
.text:00003E68 var_4           = dword ptr -4
.text:00003E68
.text:00003E68                 push    ebp
.text:00003E69                 mov     ebp, esp
.text:00003E6B                 push    ecx
.text:00003E6C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E73                 mov     [ebp+var_4], ecx
.text:00003E76                 mov     eax, [ebp+var_4]
.text:00003E79                 mov     dword ptr [eax], 0
.text:00003E7F                 mov     eax, [ebp+var_4]
.text:00003E82                 mov     esp, ebp
.text:00003E84                 pop     ebp
.text:00003E85                 retn
.text:00003E85 ??0CMyUnknownImp@@QAE@XZ endp
.text:00003E85
.text:00003E85 ; ---------------------------------------------------------------------------
.text:00003E86                 align 4
.text:00003E86 _text           ends
.text:00003E86
.text:00003E88 ; ===========================================================================
.text:00003E88
.text:00003E88 ; Segment type: Pure code
.text:00003E88 ; Segment permissions: Read/Execute
.text:00003E88 _text           segment para public 'CODE' use32
.text:00003E88                 assume cs:_text
.text:00003E88                 ;org 3E88h
.text:00003E88 ; COMDAT (pick any)
.text:00003E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003E88
.text:00003E88 ; =============== S U B R O U T I N E =======================================
.text:00003E88
.text:00003E88 ; Attributes: bp-based frame
.text:00003E88
.text:00003E88 ; _DWORD __thiscall AString::~AString(AString *__hidden this)
.text:00003E88                 public ??1AString@@QAE@XZ
.text:00003E88 ??1AString@@QAE@XZ proc near            ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+155p
.text:00003E88                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+37Ap ...
.text:00003E88
.text:00003E88 var_8           = dword ptr -8
.text:00003E88 var_4           = dword ptr -4
.text:00003E88
.text:00003E88                 push    ebp
.text:00003E89                 mov     ebp, esp
.text:00003E8B                 sub     esp, 8
.text:00003E8E                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00003E95                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00003E9C                 mov     [ebp+var_4], ecx
.text:00003E9F                 mov     eax, [ebp+var_4]
.text:00003EA2                 mov     ecx, [eax]
.text:00003EA4                 mov     [ebp+var_8], ecx
.text:00003EA7                 mov     edx, [ebp+var_8]
.text:00003EAA                 push    edx             ; void *
.text:00003EAB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00003EB0                 add     esp, 4
.text:00003EB3                 add     esp, 8
.text:00003EB6                 cmp     ebp, esp
.text:00003EB8                 call    __RTC_CheckEsp
.text:00003EBD                 mov     esp, ebp
.text:00003EBF                 pop     ebp
.text:00003EC0                 retn
.text:00003EC0 ??1AString@@QAE@XZ endp
.text:00003EC0
.text:00003EC0 ; ---------------------------------------------------------------------------
.text:00003EC1                 align 4
.text:00003EC1 _text           ends
.text:00003EC1
.text:00003EC4 ; ===========================================================================
.text:00003EC4
.text:00003EC4 ; Segment type: Pure code
.text:00003EC4 ; Segment permissions: Read/Execute
.text:00003EC4 _text           segment para public 'CODE' use32
.text:00003EC4                 assume cs:_text
.text:00003EC4                 ;org 3EC4h
.text:00003EC4 ; COMDAT (pick any)
.text:00003EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003EC4
.text:00003EC4 ; =============== S U B R O U T I N E =======================================
.text:00003EC4
.text:00003EC4 ; Attributes: bp-based frame
.text:00003EC4
.text:00003EC4 ; _DWORD __thiscall NArchive::CMultiMethodProps::CMultiMethodProps(NArchive::CMultiMethodProps *__hidden this)
.text:00003EC4                 public ??0CMultiMethodProps@NArchive@@QAE@XZ
.text:00003EC4 ??0CMultiMethodProps@NArchive@@QAE@XZ proc near
.text:00003EC4                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+5Cp
.text:00003EC4
.text:00003EC4 var_10          = dword ptr -10h
.text:00003EC4 var_C           = dword ptr -0Ch
.text:00003EC4 var_4           = dword ptr -4
.text:00003EC4
.text:00003EC4                 push    ebp
.text:00003EC5                 mov     ebp, esp
.text:00003EC7                 push    0FFFFFFFFh
.text:00003EC9                 push    offset __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ
.text:00003ECE                 mov     eax, large fs:0
.text:00003ED4                 push    eax
.text:00003ED5                 push    ecx
.text:00003ED6                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003EDD                 mov     eax, dword ptr ds:___security_cookie
.text:00003EE2                 xor     eax, ebp
.text:00003EE4                 push    eax
.text:00003EE5                 lea     eax, [ebp+var_C]
.text:00003EE8                 mov     large fs:0, eax
.text:00003EEE                 mov     [ebp+var_10], ecx
.text:00003EF1                 mov     ecx, [ebp+var_10]
.text:00003EF4                 add     ecx, 14h
.text:00003EF7                 call    ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(void)
.text:00003EFC                 mov     [ebp+var_4], 0
.text:00003F03                 mov     ecx, [ebp+var_10]
.text:00003F06                 add     ecx, 20h ; ' '
.text:00003F09                 call    ??0COneMethodInfo@@QAE@XZ ; COneMethodInfo::COneMethodInfo(void)
.text:00003F0E                 mov     byte ptr [ebp+var_4], 1
.text:00003F12                 mov     ecx, [ebp+var_10] ; this
.text:00003F15                 call    ?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init(void)
.text:00003F1A                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00003F21                 mov     eax, [ebp+var_10]
.text:00003F24                 mov     ecx, [ebp+var_C]
.text:00003F27                 mov     large fs:0, ecx
.text:00003F2E                 pop     ecx
.text:00003F2F                 add     esp, 10h
.text:00003F32                 cmp     ebp, esp
.text:00003F34                 call    __RTC_CheckEsp
.text:00003F39                 mov     esp, ebp
.text:00003F3B                 pop     ebp
.text:00003F3C                 retn
.text:00003F3C ??0CMultiMethodProps@NArchive@@QAE@XZ endp
.text:00003F3C
.text:00003F3C ; ---------------------------------------------------------------------------
.text:00003F3D                 align 10h
.text:00003F3D _text           ends
.text:00003F3D
.text$x:00003F40 ; ===========================================================================
.text$x:00003F40
.text$x:00003F40 ; Segment type: Pure code
.text$x:00003F40 ; Segment permissions: Read/Execute
.text$x:00003F40 _text$x         segment para public 'CODE' use32
.text$x:00003F40                 assume cs:_text$x
.text$x:00003F40                 ;org 3F40h
.text$x:00003F40 ; COMDAT (pick associative to section at 3EC4)
.text$x:00003F40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F40
.text$x:00003F40 ; =============== S U B R O U T I N E =======================================
.text$x:00003F40
.text$x:00003F40
.text$x:00003F40 __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00003F40                                         ; DATA XREF: .xdata$x:00003F78o
.text$x:00003F40                 mov     ecx, [ebp-10h]
.text$x:00003F43                 add     ecx, 14h
.text$x:00003F46                 jmp     ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text$x:00003F46 __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:00003F46
.text$x:00003F4B
.text$x:00003F4B ; =============== S U B R O U T I N E =======================================
.text$x:00003F4B
.text$x:00003F4B
.text$x:00003F4B __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1 proc near
.text$x:00003F4B                                         ; DATA XREF: .xdata$x:00003F80o
.text$x:00003F4B                 mov     ecx, [ebp-10h]
.text$x:00003F4E                 add     ecx, 20h ; ' '  ; this
.text$x:00003F51                 jmp     ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text$x:00003F51 __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1 endp
.text$x:00003F51
.text$x:00003F56
.text$x:00003F56 ; =============== S U B R O U T I N E =======================================
.text$x:00003F56
.text$x:00003F56
.text$x:00003F56 __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ proc near
.text$x:00003F56                                         ; DATA XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+5o
.text$x:00003F56
.text$x:00003F56 arg_4           = dword ptr  8
.text$x:00003F56
.text$x:00003F56                 mov     edx, [esp+arg_4]
.text$x:00003F5A                 lea     eax, [edx+0Ch]
.text$x:00003F5D                 mov     ecx, [edx-8]
.text$x:00003F60                 xor     ecx, eax
.text$x:00003F62                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003F67                 mov     eax, offset __ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ
.text$x:00003F6C                 jmp     ___CxxFrameHandler3
.text$x:00003F6C __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ endp
.text$x:00003F6C
.text$x:00003F6C ; ---------------------------------------------------------------------------
.text$x:00003F71                 align 4
.text$x:00003F71 _text$x         ends
.text$x:00003F71
.xdata$x:00003F74 ; ===========================================================================
.xdata$x:00003F74
.xdata$x:00003F74 ; Segment type: Pure data
.xdata$x:00003F74 ; Segment permissions: Read
.xdata$x:00003F74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00003F74                 assume cs:_xdata$x
.xdata$x:00003F74                 ;org 3F74h
.xdata$x:00003F74 ; COMDAT (pick associative to section at 3EC4)
.xdata$x:00003F74 __unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00003F74                                         ; DATA XREF: .xdata$x:00003F8Co
.xdata$x:00003F75                 db 0FFh
.xdata$x:00003F76                 db 0FFh
.xdata$x:00003F77                 db 0FFh
.xdata$x:00003F78                 dd offset __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00003F7C                 align 10h
.xdata$x:00003F80                 dd offset __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1
.xdata$x:00003F84 __ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00003F84                                         ; DATA XREF: __ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00003F85                 db    5
.xdata$x:00003F86                 db  93h ; ô
.xdata$x:00003F87                 db  19h
.xdata$x:00003F88                 db    2
.xdata$x:00003F89                 db    0
.xdata$x:00003F8A                 db    0
.xdata$x:00003F8B                 db    0
.xdata$x:00003F8C                 dd offset __unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ
.xdata$x:00003F90                 db    0
.xdata$x:00003F91                 db    0
.xdata$x:00003F92                 db    0
.xdata$x:00003F93                 db    0
.xdata$x:00003F94                 db    0
.xdata$x:00003F95                 db    0
.xdata$x:00003F96                 db    0
.xdata$x:00003F97                 db    0
.xdata$x:00003F98                 db    0
.xdata$x:00003F99                 db    0
.xdata$x:00003F9A                 db    0
.xdata$x:00003F9B                 db    0
.xdata$x:00003F9C                 db    0
.xdata$x:00003F9D                 db    0
.xdata$x:00003F9E                 db    0
.xdata$x:00003F9F                 db    0
.xdata$x:00003FA0                 db    0
.xdata$x:00003FA1                 db    0
.xdata$x:00003FA2                 db    0
.xdata$x:00003FA3                 db    0
.xdata$x:00003FA4                 db    1
.xdata$x:00003FA5                 db    0
.xdata$x:00003FA6                 db    0
.xdata$x:00003FA7                 db    0
.xdata$x:00003FA7 _xdata$x        ends
.xdata$x:00003FA7
.text:00003FA8 ; ===========================================================================
.text:00003FA8
.text:00003FA8 ; Segment type: Pure code
.text:00003FA8 ; Segment permissions: Read/Execute
.text:00003FA8 _text           segment para public 'CODE' use32
.text:00003FA8                 assume cs:_text
.text:00003FA8                 ;org 3FA8h
.text:00003FA8 ; COMDAT (pick any)
.text:00003FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00003FA8
.text:00003FA8 ; =============== S U B R O U T I N E =======================================
.text:00003FA8
.text:00003FA8 ; Attributes: bp-based frame
.text:00003FA8
.text:00003FA8 ; public: __thiscall COneMethodInfo::COneMethodInfo(void)
.text:00003FA8                 public ??0COneMethodInfo@@QAE@XZ
.text:00003FA8 ??0COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+45p
.text:00003FA8
.text:00003FA8 var_10          = dword ptr -10h
.text:00003FA8 var_C           = dword ptr -0Ch
.text:00003FA8 var_4           = dword ptr -4
.text:00003FA8
.text:00003FA8                 push    ebp
.text:00003FA9                 mov     ebp, esp
.text:00003FAB                 push    0FFFFFFFFh
.text:00003FAD                 push    offset __ehhandler$??0COneMethodInfo@@QAE@XZ
.text:00003FB2                 mov     eax, large fs:0
.text:00003FB8                 push    eax
.text:00003FB9                 push    ecx
.text:00003FBA                 mov     [ebp+var_10], 0CCCCCCCCh
.text:00003FC1                 mov     eax, dword ptr ds:___security_cookie
.text:00003FC6                 xor     eax, ebp
.text:00003FC8                 push    eax
.text:00003FC9                 lea     eax, [ebp+var_C]
.text:00003FCC                 mov     large fs:0, eax
.text:00003FD2                 mov     [ebp+var_10], ecx
.text:00003FD5                 mov     ecx, [ebp+var_10] ; this
.text:00003FD8                 call    ??0CMethodProps@@QAE@XZ ; CMethodProps::CMethodProps(void)
.text:00003FDD                 mov     [ebp+var_4], 0
.text:00003FE4                 mov     ecx, [ebp+var_10]
.text:00003FE7                 add     ecx, 0Ch
.text:00003FEA                 call    ??0AString@@QAE@XZ ; AString::AString(void)
.text:00003FEF                 mov     byte ptr [ebp+var_4], 1
.text:00003FF3                 mov     ecx, [ebp+var_10]
.text:00003FF6                 add     ecx, 18h        ; this
.text:00003FF9                 call    ??0UString@@QAE@XZ ; UString::UString(void)
.text:00003FFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004005                 mov     eax, [ebp+var_10]
.text:00004008                 mov     ecx, [ebp+var_C]
.text:0000400B                 mov     large fs:0, ecx
.text:00004012                 pop     ecx
.text:00004013                 add     esp, 10h
.text:00004016                 cmp     ebp, esp
.text:00004018                 call    __RTC_CheckEsp
.text:0000401D                 mov     esp, ebp
.text:0000401F                 pop     ebp
.text:00004020                 retn
.text:00004020 ??0COneMethodInfo@@QAE@XZ endp
.text:00004020
.text:00004020 ; ---------------------------------------------------------------------------
.text:00004021                 align 4
.text:00004021 _text           ends
.text:00004021
.text$x:00004024 ; ===========================================================================
.text$x:00004024
.text$x:00004024 ; Segment type: Pure code
.text$x:00004024 ; Segment permissions: Read/Execute
.text$x:00004024 _text$x         segment para public 'CODE' use32
.text$x:00004024                 assume cs:_text$x
.text$x:00004024                 ;org 4024h
.text$x:00004024 ; COMDAT (pick associative to section at 3FA8)
.text$x:00004024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004024
.text$x:00004024 ; =============== S U B R O U T I N E =======================================
.text$x:00004024
.text$x:00004024
.text$x:00004024 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00004024                                         ; DATA XREF: .xdata$x:00004058o
.text$x:00004024                 mov     ecx, [ebp-10h]  ; this
.text$x:00004027                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00004027 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 endp
.text$x:00004027
.text$x:0000402C
.text$x:0000402C ; =============== S U B R O U T I N E =======================================
.text$x:0000402C
.text$x:0000402C
.text$x:0000402C __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
.text$x:0000402C                                         ; DATA XREF: .xdata$x:00004060o
.text$x:0000402C                 mov     ecx, [ebp-10h]
.text$x:0000402F                 add     ecx, 0Ch        ; this
.text$x:00004032                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:00004032 __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 endp
.text$x:00004032
.text$x:00004037
.text$x:00004037 ; =============== S U B R O U T I N E =======================================
.text$x:00004037
.text$x:00004037
.text$x:00004037 __ehhandler$??0COneMethodInfo@@QAE@XZ proc near
.text$x:00004037                                         ; DATA XREF: COneMethodInfo::COneMethodInfo(void)+5o
.text$x:00004037
.text$x:00004037 arg_4           = dword ptr  8
.text$x:00004037
.text$x:00004037                 mov     edx, [esp+arg_4]
.text$x:0000403B                 lea     eax, [edx+0Ch]
.text$x:0000403E                 mov     ecx, [edx-8]
.text$x:00004041                 xor     ecx, eax
.text$x:00004043                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004048                 mov     eax, offset __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
.text$x:0000404D                 jmp     ___CxxFrameHandler3
.text$x:0000404D __ehhandler$??0COneMethodInfo@@QAE@XZ endp
.text$x:0000404D
.text$x:0000404D ; ---------------------------------------------------------------------------
.text$x:00004052                 align 4
.text$x:00004052 _text$x         ends
.text$x:00004052
.xdata$x:00004054 ; ===========================================================================
.xdata$x:00004054
.xdata$x:00004054 ; Segment type: Pure data
.xdata$x:00004054 ; Segment permissions: Read
.xdata$x:00004054 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004054                 assume cs:_xdata$x
.xdata$x:00004054                 ;org 4054h
.xdata$x:00004054 ; COMDAT (pick associative to section at 3FA8)
.xdata$x:00004054 __unwindtable$??0COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00004054                                         ; DATA XREF: .xdata$x:0000406Co
.xdata$x:00004055                 db 0FFh
.xdata$x:00004056                 db 0FFh
.xdata$x:00004057                 db 0FFh
.xdata$x:00004058                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
.xdata$x:0000405C                 align 10h
.xdata$x:00004060                 dd offset __unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
.xdata$x:00004064 __ehfuncinfo$??0COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00004064                                         ; DATA XREF: __ehhandler$??0COneMethodInfo@@QAE@XZ+11o
.xdata$x:00004065                 db    5
.xdata$x:00004066                 db  93h ; ô
.xdata$x:00004067                 db  19h
.xdata$x:00004068                 db    2
.xdata$x:00004069                 db    0
.xdata$x:0000406A                 db    0
.xdata$x:0000406B                 db    0
.xdata$x:0000406C                 dd offset __unwindtable$??0COneMethodInfo@@QAE@XZ
.xdata$x:00004070                 db    0
.xdata$x:00004071                 db    0
.xdata$x:00004072                 db    0
.xdata$x:00004073                 db    0
.xdata$x:00004074                 db    0
.xdata$x:00004075                 db    0
.xdata$x:00004076                 db    0
.xdata$x:00004077                 db    0
.xdata$x:00004078                 db    0
.xdata$x:00004079                 db    0
.xdata$x:0000407A                 db    0
.xdata$x:0000407B                 db    0
.xdata$x:0000407C                 db    0
.xdata$x:0000407D                 db    0
.xdata$x:0000407E                 db    0
.xdata$x:0000407F                 db    0
.xdata$x:00004080                 db    0
.xdata$x:00004081                 db    0
.xdata$x:00004082                 db    0
.xdata$x:00004083                 db    0
.xdata$x:00004084                 db    1
.xdata$x:00004085                 db    0
.xdata$x:00004086                 db    0
.xdata$x:00004087                 db    0
.xdata$x:00004087 _xdata$x        ends
.xdata$x:00004087
.text:00004088 ; ===========================================================================
.text:00004088
.text:00004088 ; Segment type: Pure code
.text:00004088 ; Segment permissions: Read/Execute
.text:00004088 _text           segment para public 'CODE' use32
.text:00004088                 assume cs:_text
.text:00004088                 ;org 4088h
.text:00004088 ; COMDAT (pick any)
.text:00004088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004088
.text:00004088 ; =============== S U B R O U T I N E =======================================
.text:00004088
.text:00004088 ; Attributes: bp-based frame
.text:00004088
.text:00004088 ; _DWORD __thiscall COneMethodInfo::~COneMethodInfo(COneMethodInfo *__hidden this)
.text:00004088                 public ??1COneMethodInfo@@QAE@XZ
.text:00004088 ??1COneMethodInfo@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1+6j
.text:00004088                                         ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)+3Ap ...
.text:00004088
.text:00004088 var_10          = dword ptr -10h
.text:00004088 var_C           = dword ptr -0Ch
.text:00004088 var_4           = dword ptr -4
.text:00004088
.text:00004088                 push    ebp
.text:00004089                 mov     ebp, esp
.text:0000408B                 push    0FFFFFFFFh
.text:0000408D                 push    offset __ehhandler$??1COneMethodInfo@@QAE@XZ
.text:00004092                 mov     eax, large fs:0
.text:00004098                 push    eax
.text:00004099                 push    ecx
.text:0000409A                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000040A1                 mov     eax, dword ptr ds:___security_cookie
.text:000040A6                 xor     eax, ebp
.text:000040A8                 push    eax
.text:000040A9                 lea     eax, [ebp+var_C]
.text:000040AC                 mov     large fs:0, eax
.text:000040B2                 mov     [ebp+var_10], ecx
.text:000040B5                 mov     [ebp+var_4], 1
.text:000040BC                 mov     ecx, [ebp+var_10]
.text:000040BF                 add     ecx, 18h        ; this
.text:000040C2                 call    ??1UString@@QAE@XZ ; UString::~UString(void)
.text:000040C7                 mov     byte ptr [ebp+var_4], 0
.text:000040CB                 mov     ecx, [ebp+var_10]
.text:000040CE                 add     ecx, 0Ch        ; this
.text:000040D1                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:000040D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text:000040DD                 mov     ecx, [ebp+var_10] ; this
.text:000040E0                 call    ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text:000040E5                 mov     ecx, [ebp+var_C]
.text:000040E8                 mov     large fs:0, ecx
.text:000040EF                 pop     ecx
.text:000040F0                 add     esp, 10h
.text:000040F3                 cmp     ebp, esp
.text:000040F5                 call    __RTC_CheckEsp
.text:000040FA                 mov     esp, ebp
.text:000040FC                 pop     ebp
.text:000040FD                 retn
.text:000040FD ??1COneMethodInfo@@QAE@XZ endp
.text:000040FD
.text:000040FD ; ---------------------------------------------------------------------------
.text:000040FE                 align 10h
.text:000040FE _text           ends
.text:000040FE
.text$x:00004100 ; ===========================================================================
.text$x:00004100
.text$x:00004100 ; Segment type: Pure code
.text$x:00004100 ; Segment permissions: Read/Execute
.text$x:00004100 _text$x         segment para public 'CODE' use32
.text$x:00004100                 assume cs:_text$x
.text$x:00004100                 ;org 4100h
.text$x:00004100 ; COMDAT (pick associative to section at 4088)
.text$x:00004100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004100
.text$x:00004100 ; =============== S U B R O U T I N E =======================================
.text$x:00004100
.text$x:00004100
.text$x:00004100 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
.text$x:00004100                                         ; DATA XREF: .xdata$x:00004134o
.text$x:00004100                 mov     ecx, [ebp-10h]  ; this
.text$x:00004103                 jmp     ??1CMethodProps@@QAE@XZ ; CMethodProps::~CMethodProps(void)
.text$x:00004103 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 endp
.text$x:00004103
.text$x:00004108
.text$x:00004108 ; =============== S U B R O U T I N E =======================================
.text$x:00004108
.text$x:00004108
.text$x:00004108 __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
.text$x:00004108                                         ; DATA XREF: .xdata$x:0000413Co
.text$x:00004108                 mov     ecx, [ebp-10h]
.text$x:0000410B                 add     ecx, 0Ch        ; this
.text$x:0000410E                 jmp     ??1AString@@QAE@XZ ; AString::~AString(void)
.text$x:0000410E __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 endp
.text$x:0000410E
.text$x:00004113
.text$x:00004113 ; =============== S U B R O U T I N E =======================================
.text$x:00004113
.text$x:00004113
.text$x:00004113 __ehhandler$??1COneMethodInfo@@QAE@XZ proc near
.text$x:00004113                                         ; DATA XREF: COneMethodInfo::~COneMethodInfo(void)+5o
.text$x:00004113
.text$x:00004113 arg_4           = dword ptr  8
.text$x:00004113
.text$x:00004113                 mov     edx, [esp+arg_4]
.text$x:00004117                 lea     eax, [edx+0Ch]
.text$x:0000411A                 mov     ecx, [edx-8]
.text$x:0000411D                 xor     ecx, eax
.text$x:0000411F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004124                 mov     eax, offset __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
.text$x:00004129                 jmp     ___CxxFrameHandler3
.text$x:00004129 __ehhandler$??1COneMethodInfo@@QAE@XZ endp
.text$x:00004129
.text$x:00004129 ; ---------------------------------------------------------------------------
.text$x:0000412E                 align 10h
.text$x:0000412E _text$x         ends
.text$x:0000412E
.xdata$x:00004130 ; ===========================================================================
.xdata$x:00004130
.xdata$x:00004130 ; Segment type: Pure data
.xdata$x:00004130 ; Segment permissions: Read
.xdata$x:00004130 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004130                 assume cs:_xdata$x
.xdata$x:00004130                 ;org 4130h
.xdata$x:00004130 ; COMDAT (pick associative to section at 4088)
.xdata$x:00004130 __unwindtable$??1COneMethodInfo@@QAE@XZ db 0FFh
.xdata$x:00004130                                         ; DATA XREF: .xdata$x:00004148o
.xdata$x:00004131                 db 0FFh
.xdata$x:00004132                 db 0FFh
.xdata$x:00004133                 db 0FFh
.xdata$x:00004134                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
.xdata$x:00004138                 db    0
.xdata$x:00004139                 db    0
.xdata$x:0000413A                 db    0
.xdata$x:0000413B                 db    0
.xdata$x:0000413C                 dd offset __unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
.xdata$x:00004140 __ehfuncinfo$??1COneMethodInfo@@QAE@XZ db  22h ; "
.xdata$x:00004140                                         ; DATA XREF: __ehhandler$??1COneMethodInfo@@QAE@XZ+11o
.xdata$x:00004141                 db    5
.xdata$x:00004142                 db  93h ; ô
.xdata$x:00004143                 db  19h
.xdata$x:00004144                 db    2
.xdata$x:00004145                 db    0
.xdata$x:00004146                 db    0
.xdata$x:00004147                 db    0
.xdata$x:00004148                 dd offset __unwindtable$??1COneMethodInfo@@QAE@XZ
.xdata$x:0000414C                 align 20h
.xdata$x:00004160                 db    1
.xdata$x:00004161                 db    0
.xdata$x:00004162                 db    0
.xdata$x:00004163                 db    0
.xdata$x:00004163 _xdata$x        ends
.xdata$x:00004163
.text:00004164 ; ===========================================================================
.text:00004164
.text:00004164 ; Segment type: Pure code
.text:00004164 ; Segment permissions: Read/Execute
.text:00004164 _text           segment para public 'CODE' use32
.text:00004164                 assume cs:_text
.text:00004164                 ;org 4164h
.text:00004164 ; COMDAT (pick any)
.text:00004164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004164
.text:00004164 ; =============== S U B R O U T I N E =======================================
.text:00004164
.text:00004164 ; Attributes: bp-based frame
.text:00004164
.text:00004164 ; _DWORD __thiscall UString::~UString(UString *__hidden this)
.text:00004164                 public ??1UString@@QAE@XZ
.text:00004164 ??1UString@@QAE@XZ proc near            ; CODE XREF: COneMethodInfo::~COneMethodInfo(void)+3Ap
.text:00004164
.text:00004164 var_8           = dword ptr -8
.text:00004164 var_4           = dword ptr -4
.text:00004164
.text:00004164                 push    ebp
.text:00004165                 mov     ebp, esp
.text:00004167                 sub     esp, 8
.text:0000416A                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004171                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004178                 mov     [ebp+var_4], ecx
.text:0000417B                 mov     eax, [ebp+var_4]
.text:0000417E                 mov     ecx, [eax]
.text:00004180                 mov     [ebp+var_8], ecx
.text:00004183                 mov     edx, [ebp+var_8]
.text:00004186                 push    edx             ; void *
.text:00004187                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000418C                 add     esp, 4
.text:0000418F                 add     esp, 8
.text:00004192                 cmp     ebp, esp
.text:00004194                 call    __RTC_CheckEsp
.text:00004199                 mov     esp, ebp
.text:0000419B                 pop     ebp
.text:0000419C                 retn
.text:0000419C ??1UString@@QAE@XZ endp
.text:0000419C
.text:0000419C ; ---------------------------------------------------------------------------
.text:0000419D                 align 10h
.text:0000419D _text           ends
.text:0000419D
.text:000041A0 ; ===========================================================================
.text:000041A0
.text:000041A0 ; Segment type: Pure code
.text:000041A0 ; Segment permissions: Read/Execute
.text:000041A0 _text           segment para public 'CODE' use32
.text:000041A0                 assume cs:_text
.text:000041A0                 ;org 41A0h
.text:000041A0 ; COMDAT (pick any)
.text:000041A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041A0
.text:000041A0 ; =============== S U B R O U T I N E =======================================
.text:000041A0
.text:000041A0 ; Attributes: bp-based frame
.text:000041A0
.text:000041A0 ; _DWORD __thiscall CMethodProps::CMethodProps(CMethodProps *__hidden this)
.text:000041A0                 public ??0CMethodProps@@QAE@XZ
.text:000041A0 ??0CMethodProps@@QAE@XZ proc near       ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+30p
.text:000041A0
.text:000041A0 var_4           = dword ptr -4
.text:000041A0
.text:000041A0                 push    ebp
.text:000041A1                 mov     ebp, esp
.text:000041A3                 push    ecx
.text:000041A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041AB                 mov     [ebp+var_4], ecx
.text:000041AE                 mov     ecx, [ebp+var_4] ; this
.text:000041B1                 call    ??0CProps@@QAE@XZ ; CProps::CProps(void)
.text:000041B6                 mov     eax, [ebp+var_4]
.text:000041B9                 add     esp, 4
.text:000041BC                 cmp     ebp, esp
.text:000041BE                 call    __RTC_CheckEsp
.text:000041C3                 mov     esp, ebp
.text:000041C5                 pop     ebp
.text:000041C6                 retn
.text:000041C6 ??0CMethodProps@@QAE@XZ endp
.text:000041C6
.text:000041C6 ; ---------------------------------------------------------------------------
.text:000041C7                 align 4
.text:000041C7 _text           ends
.text:000041C7
.text:000041C8 ; ===========================================================================
.text:000041C8
.text:000041C8 ; Segment type: Pure code
.text:000041C8 ; Segment permissions: Read/Execute
.text:000041C8 _text           segment para public 'CODE' use32
.text:000041C8                 assume cs:_text
.text:000041C8                 ;org 41C8h
.text:000041C8 ; COMDAT (pick any)
.text:000041C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041C8
.text:000041C8 ; =============== S U B R O U T I N E =======================================
.text:000041C8
.text:000041C8 ; Attributes: bp-based frame
.text:000041C8
.text:000041C8 ; _DWORD __thiscall CMethodProps::~CMethodProps(CMethodProps *__hidden this)
.text:000041C8                 public ??1CMethodProps@@QAE@XZ
.text:000041C8 ??1CMethodProps@@QAE@XZ proc near       ; CODE XREF: __unwindfunclet$??0COneMethodInfo@@QAE@XZ$0+3j
.text:000041C8                                         ; COneMethodInfo::~COneMethodInfo(void)+58p ...
.text:000041C8
.text:000041C8 var_4           = dword ptr -4
.text:000041C8
.text:000041C8                 push    ebp
.text:000041C9                 mov     ebp, esp
.text:000041CB                 push    ecx
.text:000041CC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041D3                 mov     [ebp+var_4], ecx
.text:000041D6                 mov     ecx, [ebp+var_4] ; this
.text:000041D9                 call    ??1CProps@@QAE@XZ ; CProps::~CProps(void)
.text:000041DE                 add     esp, 4
.text:000041E1                 cmp     ebp, esp
.text:000041E3                 call    __RTC_CheckEsp
.text:000041E8                 mov     esp, ebp
.text:000041EA                 pop     ebp
.text:000041EB                 retn
.text:000041EB ??1CMethodProps@@QAE@XZ endp
.text:000041EB
.text:000041EB _text           ends
.text:000041EB
.text:000041EC ; ===========================================================================
.text:000041EC
.text:000041EC ; Segment type: Pure code
.text:000041EC ; Segment permissions: Read/Execute
.text:000041EC _text           segment para public 'CODE' use32
.text:000041EC                 assume cs:_text
.text:000041EC                 ;org 41ECh
.text:000041EC ; COMDAT (pick any)
.text:000041EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000041EC
.text:000041EC ; =============== S U B R O U T I N E =======================================
.text:000041EC
.text:000041EC ; Attributes: bp-based frame
.text:000041EC
.text:000041EC ; _DWORD __thiscall CProps::CProps(CProps *__hidden this)
.text:000041EC                 public ??0CProps@@QAE@XZ
.text:000041EC ??0CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::CMethodProps(void)+11p
.text:000041EC
.text:000041EC var_4           = dword ptr -4
.text:000041EC
.text:000041EC                 push    ebp
.text:000041ED                 mov     ebp, esp
.text:000041EF                 push    ecx
.text:000041F0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000041F7                 mov     [ebp+var_4], ecx
.text:000041FA                 mov     ecx, [ebp+var_4]
.text:000041FD                 call    ??0?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::CObjectVector<CProp>(void)
.text:00004202                 mov     eax, [ebp+var_4]
.text:00004205                 add     esp, 4
.text:00004208                 cmp     ebp, esp
.text:0000420A                 call    __RTC_CheckEsp
.text:0000420F                 mov     esp, ebp
.text:00004211                 pop     ebp
.text:00004212                 retn
.text:00004212 ??0CProps@@QAE@XZ endp
.text:00004212
.text:00004212 ; ---------------------------------------------------------------------------
.text:00004213                 align 4
.text:00004213 _text           ends
.text:00004213
.text:00004214 ; ===========================================================================
.text:00004214
.text:00004214 ; Segment type: Pure code
.text:00004214 ; Segment permissions: Read/Execute
.text:00004214 _text           segment para public 'CODE' use32
.text:00004214                 assume cs:_text
.text:00004214                 ;org 4214h
.text:00004214 ; COMDAT (pick any)
.text:00004214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004214
.text:00004214 ; =============== S U B R O U T I N E =======================================
.text:00004214
.text:00004214 ; Attributes: bp-based frame
.text:00004214
.text:00004214 ; _DWORD __thiscall CProps::~CProps(CProps *__hidden this)
.text:00004214                 public ??1CProps@@QAE@XZ
.text:00004214 ??1CProps@@QAE@XZ proc near             ; CODE XREF: CMethodProps::~CMethodProps(void)+11p
.text:00004214
.text:00004214 var_4           = dword ptr -4
.text:00004214
.text:00004214                 push    ebp
.text:00004215                 mov     ebp, esp
.text:00004217                 push    ecx
.text:00004218                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000421F                 mov     [ebp+var_4], ecx
.text:00004222                 mov     ecx, [ebp+var_4]
.text:00004225                 call    ??1?$CObjectVector@UCProp@@@@QAE@XZ ; CObjectVector<CProp>::~CObjectVector<CProp>(void)
.text:0000422A                 add     esp, 4
.text:0000422D                 cmp     ebp, esp
.text:0000422F                 call    __RTC_CheckEsp
.text:00004234                 mov     esp, ebp
.text:00004236                 pop     ebp
.text:00004237                 retn
.text:00004237 ??1CProps@@QAE@XZ endp
.text:00004237
.text:00004237 _text           ends
.text:00004237
.text:00004238 ; ===========================================================================
.text:00004238
.text:00004238 ; Segment type: Pure code
.text:00004238 ; Segment permissions: Read/Execute
.text:00004238 _text           segment para public 'CODE' use32
.text:00004238                 assume cs:_text
.text:00004238                 ;org 4238h
.text:00004238 ; COMDAT (pick any)
.text:00004238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004238
.text:00004238 ; =============== S U B R O U T I N E =======================================
.text:00004238
.text:00004238 ; Attributes: bp-based frame
.text:00004238
.text:00004238 ; _DWORD __thiscall NArchive::NXz::CStatInfo::CStatInfo(NArchive::NXz::CStatInfo *__hidden this)
.text:00004238                 public ??0CStatInfo@NXz@NArchive@@QAE@XZ
.text:00004238 ??0CStatInfo@NXz@NArchive@@QAE@XZ proc near
.text:00004238                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+A0p
.text:00004238                                         ; NArchive::NXz::CDecoder::CDecoder(void)+11p
.text:00004238
.text:00004238 var_4           = dword ptr -4
.text:00004238
.text:00004238                 push    ebp
.text:00004239                 mov     ebp, esp
.text:0000423B                 push    ecx
.text:0000423C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004243                 mov     [ebp+var_4], ecx
.text:00004246                 mov     ecx, [ebp+var_4] ; this
.text:00004249                 call    ?Clear@CStatInfo@NXz@NArchive@@QAEXXZ ; NArchive::NXz::CStatInfo::Clear(void)
.text:0000424E                 mov     eax, [ebp+var_4]
.text:00004251
.text:00004251 loc_4251:                               ; DATA XREF: .rdata:$SG70045o
.text:00004251                 add     esp, 4
.text:00004254                 cmp     ebp, esp
.text:00004256                 call    __RTC_CheckEsp
.text:0000425B                 mov     esp, ebp
.text:0000425D                 pop     ebp
.text:0000425E                 retn
.text:0000425E ??0CStatInfo@NXz@NArchive@@QAE@XZ endp
.text:0000425E
.text:0000425E ; ---------------------------------------------------------------------------
.text:0000425F                 align 10h
.text:0000425F _text           ends
.text:0000425F
.text:00004260 ; ===========================================================================
.text:00004260
.text:00004260 ; Segment type: Pure code
.text:00004260 ; Segment permissions: Read/Execute
.text:00004260 _text           segment para public 'CODE' use32
.text:00004260                 assume cs:_text
.text:00004260                 ;org 4260h
.text:00004260 ; COMDAT (pick any)
.text:00004260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004260
.text:00004260 ; =============== S U B R O U T I N E =======================================
.text:00004260
.text:00004260 ; Attributes: bp-based frame
.text:00004260
.text:00004260 ; void __thiscall NArchive::NXz::CHandler::Init(NArchive::NXz::CHandler *__hidden this)
.text:00004260                 public ?Init@CHandler@NXz@NArchive@@AAEXXZ
.text:00004260 ?Init@CHandler@NXz@NArchive@@AAEXXZ proc near
.text:00004260                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+DEp
.text:00004260                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+48p
.text:00004260
.text:00004260 var_4           = dword ptr -4
.text:00004260
.text:00004260                 push    ebp
.text:00004261                 mov     ebp, esp
.text:00004263                 push    ecx
.text:00004264                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000426B                 mov     [ebp+var_4], ecx
.text:0000426E                 mov     eax, [ebp+var_4]
.text:00004271                 mov     dword ptr [eax+0A4h], 0
.text:0000427B                 mov     ecx, [ebp+var_4]
.text:0000427E                 add     ecx, 10h        ; this
.text:00004281                 call    ?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init(void)
.text:00004286                 add     esp, 4
.text:00004289                 cmp     ebp, esp
.text:0000428B                 call    __RTC_CheckEsp
.text:00004290                 mov     esp, ebp
.text:00004292                 pop     ebp
.text:00004293                 retn
.text:00004293 ?Init@CHandler@NXz@NArchive@@AAEXXZ endp
.text:00004293
.text:00004293 _text           ends
.text:00004293
.text:00004294 ; ===========================================================================
.text:00004294
.text:00004294 ; Segment type: Pure code
.text:00004294 ; Segment permissions: Read/Execute
.text:00004294 _text           segment para public 'CODE' use32
.text:00004294                 assume cs:_text
.text:00004294                 ;org 4294h
.text:00004294 ; COMDAT (pick any)
.text:00004294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004294
.text:00004294 ; =============== S U B R O U T I N E =======================================
.text:00004294
.text:00004294 ; Attributes: bp-based frame
.text:00004294
.text:00004294 ; __int32 __stdcall NArchive::NXz::CHandler::QueryInterface(NArchive::NXz::CHandler *this, const struct _GUID *Buf1, void **)
.text:00004294                 public ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z
.text:00004294 ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z proc near
.text:00004294                                         ; CODE XREF: [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{4}' (_GUID const &,void * *)+5j
.text:00004294                                         ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{8}' (_GUID const &,void * *)+5j ...
.text:00004294
.text:00004294 var_C           = dword ptr -0Ch
.text:00004294 var_8           = dword ptr -8
.text:00004294 var_4           = dword ptr -4
.text:00004294 this            = dword ptr  8
.text:00004294 Buf1            = dword ptr  0Ch
.text:00004294 arg_8           = dword ptr  10h
.text:00004294
.text:00004294                 push    ebp
.text:00004295                 mov     ebp, esp
.text:00004297                 sub     esp, 0Ch
.text:0000429A                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000042A1                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000042A8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000042AF                 mov     eax, [ebp+arg_8]
.text:000042B2                 mov     dword ptr [eax], 0
.text:000042B8                 push    offset _IID_IUnknown ; Buf2
.text:000042BD                 mov     ecx, [ebp+Buf1]
.text:000042C0                 push    ecx             ; Buf1
.text:000042C1                 call    ___@8           ; __(x,x)
.text:000042C6                 test    eax, eax
.text:000042C8                 jz      short loc_42D7
.text:000042CA                 mov     edx, [ebp+arg_8]
.text:000042CD                 mov     eax, [ebp+this]
.text:000042D0                 mov     [edx], eax
.text:000042D2                 jmp     loc_4399
.text:000042D7 ; ---------------------------------------------------------------------------
.text:000042D7
.text:000042D7 loc_42D7:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+34j
.text:000042D7                 push    offset _IID_IInArchive ; Buf2
.text:000042DC                 mov     ecx, [ebp+Buf1]
.text:000042DF                 push    ecx             ; Buf1
.text:000042E0                 call    ___@8           ; __(x,x)
.text:000042E5                 test    eax, eax
.text:000042E7                 jz      short loc_42F6
.text:000042E9                 mov     edx, [ebp+arg_8]
.text:000042EC                 mov     eax, [ebp+this]
.text:000042EF                 mov     [edx], eax
.text:000042F1                 jmp     loc_4399
.text:000042F6 ; ---------------------------------------------------------------------------
.text:000042F6
.text:000042F6 loc_42F6:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+53j
.text:000042F6                 push    offset _IID_IArchiveOpenSeq ; Buf2
.text:000042FB                 mov     ecx, [ebp+Buf1]
.text:000042FE                 push    ecx             ; Buf1
.text:000042FF                 call    ___@8           ; __(x,x)
.text:00004304                 test    eax, eax
.text:00004306                 jz      short loc_432A
.text:00004308                 cmp     [ebp+this], 0
.text:0000430C                 jz      short loc_4319
.text:0000430E                 mov     edx, [ebp+this]
.text:00004311                 add     edx, 4
.text:00004314                 mov     [ebp+var_4], edx
.text:00004317                 jmp     short loc_4320
.text:00004319 ; ---------------------------------------------------------------------------
.text:00004319
.text:00004319 loc_4319:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+78j
.text:00004319                 mov     [ebp+var_4], 0
.text:00004320
.text:00004320 loc_4320:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+83j
.text:00004320                 mov     eax, [ebp+arg_8]
.text:00004323                 mov     ecx, [ebp+var_4]
.text:00004326                 mov     [eax], ecx
.text:00004328                 jmp     short loc_4399
.text:0000432A ; ---------------------------------------------------------------------------
.text:0000432A
.text:0000432A loc_432A:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+72j
.text:0000432A                 push    offset _IID_IOutArchive ; Buf2
.text:0000432F                 mov     edx, [ebp+Buf1]
.text:00004332                 push    edx             ; Buf1
.text:00004333                 call    ___@8           ; __(x,x)
.text:00004338                 test    eax, eax
.text:0000433A                 jz      short loc_435E
.text:0000433C                 cmp     [ebp+this], 0
.text:00004340                 jz      short loc_434D
.text:00004342                 mov     eax, [ebp+this]
.text:00004345                 add     eax, 8
.text:00004348                 mov     [ebp+var_8], eax
.text:0000434B                 jmp     short loc_4354
.text:0000434D ; ---------------------------------------------------------------------------
.text:0000434D
.text:0000434D loc_434D:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+ACj
.text:0000434D                 mov     [ebp+var_8], 0
.text:00004354
.text:00004354 loc_4354:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+B7j
.text:00004354                 mov     ecx, [ebp+arg_8]
.text:00004357                 mov     edx, [ebp+var_8]
.text:0000435A                 mov     [ecx], edx
.text:0000435C                 jmp     short loc_4399
.text:0000435E ; ---------------------------------------------------------------------------
.text:0000435E
.text:0000435E loc_435E:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+A6j
.text:0000435E                 push    offset _IID_ISetProperties ; Buf2
.text:00004363                 mov     eax, [ebp+Buf1]
.text:00004366                 push    eax             ; Buf1
.text:00004367                 call    ___@8           ; __(x,x)
.text:0000436C                 test    eax, eax
.text:0000436E                 jz      short loc_4392
.text:00004370                 cmp     [ebp+this], 0
.text:00004374                 jz      short loc_4381
.text:00004376                 mov     ecx, [ebp+this]
.text:00004379                 add     ecx, 0Ch
.text:0000437C                 mov     [ebp+var_C], ecx
.text:0000437F                 jmp     short loc_4388
.text:00004381 ; ---------------------------------------------------------------------------
.text:00004381
.text:00004381 loc_4381:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+E0j
.text:00004381                 mov     [ebp+var_C], 0
.text:00004388
.text:00004388 loc_4388:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+EBj
.text:00004388                 mov     edx, [ebp+arg_8]
.text:0000438B                 mov     eax, [ebp+var_C]
.text:0000438E                 mov     [edx], eax
.text:00004390                 jmp     short loc_4399
.text:00004392 ; ---------------------------------------------------------------------------
.text:00004392
.text:00004392 loc_4392:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+DAj
.text:00004392                 mov     eax, 80004002h
.text:00004397                 jmp     short loc_43AA
.text:00004399 ; ---------------------------------------------------------------------------
.text:00004399
.text:00004399 loc_4399:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+3Ej
.text:00004399                                         ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+5Dj ...
.text:00004399                 mov     ecx, [ebp+this]
.text:0000439C                 mov     edx, [ecx+58h]
.text:0000439F                 add     edx, 1
.text:000043A2                 mov     eax, [ebp+this]
.text:000043A5                 mov     [eax+58h], edx
.text:000043A8                 xor     eax, eax
.text:000043AA
.text:000043AA loc_43AA:                               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+103j
.text:000043AA                 add     esp, 0Ch
.text:000043AD                 cmp     ebp, esp
.text:000043AF                 call    __RTC_CheckEsp
.text:000043B4                 mov     esp, ebp
.text:000043B6                 pop     ebp
.text:000043B7                 retn    0Ch
.text:000043B7 ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z endp
.text:000043B7
.text:000043B7 ; ---------------------------------------------------------------------------
.text:000043BA                 align 4
.text:000043BA _text           ends
.text:000043BA
.text:000043BC ; ===========================================================================
.text:000043BC
.text:000043BC ; Segment type: Pure code
.text:000043BC ; Segment permissions: Read/Execute
.text:000043BC _text           segment para public 'CODE' use32
.text:000043BC                 assume cs:_text
.text:000043BC                 ;org 43BCh
.text:000043BC ; COMDAT (pick any)
.text:000043BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043BC
.text:000043BC ; =============== S U B R O U T I N E =======================================
.text:000043BC
.text:000043BC ; Attributes: bp-based frame
.text:000043BC
.text:000043BC ; int __stdcall __(void *Buf1, void *Buf2)
.text:000043BC                 public ___@8
.text:000043BC ___@8           proc near               ; CODE XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+2Dp
.text:000043BC                                         ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+4Cp ...
.text:000043BC
.text:000043BC Buf1            = dword ptr  8
.text:000043BC Buf2            = dword ptr  0Ch
.text:000043BC
.text:000043BC                 push    ebp
.text:000043BD                 mov     ebp, esp
.text:000043BF                 mov     eax, [ebp+Buf2]
.text:000043C2                 push    eax             ; Buf2
.text:000043C3                 mov     ecx, [ebp+Buf1]
.text:000043C6                 push    ecx             ; Buf1
.text:000043C7                 call    _IsEqualGUID@8  ; IsEqualGUID(x,x)
.text:000043CC                 cmp     ebp, esp
.text:000043CE                 call    __RTC_CheckEsp
.text:000043D3                 pop     ebp
.text:000043D4                 retn    8
.text:000043D4 ___@8           endp
.text:000043D4
.text:000043D4 ; ---------------------------------------------------------------------------
.text:000043D7                 align 4
.text:000043D7 _text           ends
.text:000043D7
.text:000043D8 ; ===========================================================================
.text:000043D8
.text:000043D8 ; Segment type: Pure code
.text:000043D8 ; Segment permissions: Read/Execute
.text:000043D8 _text           segment para public 'CODE' use32
.text:000043D8                 assume cs:_text
.text:000043D8                 ;org 43D8h
.text:000043D8 ; COMDAT (pick any)
.text:000043D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000043D8
.text:000043D8 ; =============== S U B R O U T I N E =======================================
.text:000043D8
.text:000043D8 ; Attributes: bp-based frame
.text:000043D8
.text:000043D8 ; int __stdcall IsEqualGUID(void *Buf1, void *Buf2)
.text:000043D8                 public _IsEqualGUID@8
.text:000043D8 _IsEqualGUID@8  proc near               ; CODE XREF: __(x,x)+Bp
.text:000043D8
.text:000043D8 Buf1            = dword ptr  8
.text:000043D8 Buf2            = dword ptr  0Ch
.text:000043D8
.text:000043D8                 push    ebp
.text:000043D9                 mov     ebp, esp
.text:000043DB                 push    10h             ; Size
.text:000043DD                 mov     eax, [ebp+Buf2]
.text:000043E0                 push    eax             ; Buf2
.text:000043E1                 mov     ecx, [ebp+Buf1]
.text:000043E4                 push    ecx             ; Buf1
.text:000043E5                 call    _memcmp
.text:000043EA                 add     esp, 0Ch
.text:000043ED                 neg     eax
.text:000043EF                 sbb     eax, eax
.text:000043F1                 add     eax, 1
.text:000043F4                 cmp     ebp, esp
.text:000043F6                 call    __RTC_CheckEsp
.text:000043FB                 pop     ebp
.text:000043FC                 retn    8
.text:000043FC _IsEqualGUID@8  endp
.text:000043FC
.text:000043FC ; ---------------------------------------------------------------------------
.text:000043FF                 align 10h
.text:000043FF _text           ends
.text:000043FF
.text:00004400 ; ===========================================================================
.text:00004400
.text:00004400 ; Segment type: Pure code
.text:00004400 ; Segment permissions: Read/Execute
.text:00004400 _text           segment para public 'CODE' use32
.text:00004400                 assume cs:_text
.text:00004400                 ;org 4400h
.text:00004400 ; COMDAT (pick any)
.text:00004400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004400
.text:00004400 ; =============== S U B R O U T I N E =======================================
.text:00004400
.text:00004400 ; Attributes: bp-based frame
.text:00004400
.text:00004400 ; unsigned __int32 __stdcall NArchive::NXz::CHandler::AddRef(NArchive::NXz::CHandler *this)
.text:00004400                 public ?AddRef@CHandler@NXz@NArchive@@UAGKXZ
.text:00004400 ?AddRef@CHandler@NXz@NArchive@@UAGKXZ proc near
.text:00004400                                         ; CODE XREF: [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{4}' (void)+5j
.text:00004400                                         ; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{8}' (void)+5j ...
.text:00004400
.text:00004400 var_4           = dword ptr -4
.text:00004400 this            = dword ptr  8
.text:00004400
.text:00004400                 push    ebp
.text:00004401                 mov     ebp, esp
.text:00004403                 push    ecx
.text:00004404                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000440B                 mov     eax, [ebp+this]
.text:0000440E                 mov     ecx, [eax+58h]
.text:00004411                 add     ecx, 1
.text:00004414                 mov     [ebp+var_4], ecx
.text:00004417                 mov     edx, [ebp+this]
.text:0000441A                 mov     eax, [ebp+var_4]
.text:0000441D                 mov     [edx+58h], eax
.text:00004420                 mov     eax, [ebp+var_4]
.text:00004423                 mov     esp, ebp
.text:00004425                 pop     ebp
.text:00004426                 retn    4
.text:00004426 ?AddRef@CHandler@NXz@NArchive@@UAGKXZ endp
.text:00004426
.text:00004426 ; ---------------------------------------------------------------------------
.text:00004429                 align 4
.text:00004429 _text           ends
.text:00004429
.text:0000442C ; ===========================================================================
.text:0000442C
.text:0000442C ; Segment type: Pure code
.text:0000442C ; Segment permissions: Read/Execute
.text:0000442C _text           segment para public 'CODE' use32
.text:0000442C                 assume cs:_text
.text:0000442C                 ;org 442Ch
.text:0000442C ; COMDAT (pick any)
.text:0000442C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000442C
.text:0000442C ; =============== S U B R O U T I N E =======================================
.text:0000442C
.text:0000442C ; Attributes: bp-based frame
.text:0000442C
.text:0000442C ; unsigned __int32 __stdcall NArchive::NXz::CHandler::Release(NArchive::NXz::CHandler *this)
.text:0000442C                 public ?Release@CHandler@NXz@NArchive@@UAGKXZ
.text:0000442C ?Release@CHandler@NXz@NArchive@@UAGKXZ proc near
.text:0000442C                                         ; CODE XREF: [thunk]:NArchive::NXz::CHandler::Release`adjustor{4}' (void)+5j
.text:0000442C                                         ; [thunk]:NArchive::NXz::CHandler::Release`adjustor{8}' (void)+5j ...
.text:0000442C
.text:0000442C var_10          = dword ptr -10h
.text:0000442C var_C           = dword ptr -0Ch
.text:0000442C var_8           = dword ptr -8
.text:0000442C var_4           = dword ptr -4
.text:0000442C this            = dword ptr  8
.text:0000442C
.text:0000442C                 push    ebp
.text:0000442D                 mov     ebp, esp
.text:0000442F                 sub     esp, 10h
.text:00004432                 mov     eax, 0CCCCCCCCh
.text:00004437                 mov     [ebp+var_10], eax
.text:0000443A                 mov     [ebp+var_C], eax
.text:0000443D                 mov     [ebp+var_8], eax
.text:00004440                 mov     [ebp+var_4], eax
.text:00004443                 mov     eax, [ebp+this]
.text:00004446                 mov     ecx, [eax+58h]
.text:00004449                 sub     ecx, 1
.text:0000444C                 mov     [ebp+var_C], ecx
.text:0000444F                 mov     edx, [ebp+this]
.text:00004452                 mov     eax, [ebp+var_C]
.text:00004455                 mov     [edx+58h], eax
.text:00004458                 cmp     [ebp+var_C], 0
.text:0000445C                 jz      short loc_4466
.text:0000445E                 mov     ecx, [ebp+this]
.text:00004461                 mov     eax, [ecx+58h]
.text:00004464                 jmp     short loc_4490
.text:00004466 ; ---------------------------------------------------------------------------
.text:00004466
.text:00004466 loc_4466:                               ; CODE XREF: NArchive::NXz::CHandler::Release(void)+30j
.text:00004466                 mov     edx, [ebp+this]
.text:00004469                 mov     [ebp+var_8], edx
.text:0000446C                 mov     eax, [ebp+var_8]
.text:0000446F                 mov     [ebp+var_4], eax
.text:00004472                 cmp     [ebp+var_4], 0
.text:00004476                 jz      short loc_4487
.text:00004478                 push    1
.text:0000447A                 mov     ecx, [ebp+var_4]
.text:0000447D                 call    ??_GCHandler@NXz@NArchive@@QAEPAXI@Z ; NArchive::NXz::CHandler::`scalar deleting destructor'(uint)
.text:00004482                 mov     [ebp+var_10], eax
.text:00004485                 jmp     short loc_448E
.text:00004487 ; ---------------------------------------------------------------------------
.text:00004487
.text:00004487 loc_4487:                               ; CODE XREF: NArchive::NXz::CHandler::Release(void)+4Aj
.text:00004487                 mov     [ebp+var_10], 0
.text:0000448E
.text:0000448E loc_448E:                               ; CODE XREF: NArchive::NXz::CHandler::Release(void)+59j
.text:0000448E                 xor     eax, eax
.text:00004490
.text:00004490 loc_4490:                               ; CODE XREF: NArchive::NXz::CHandler::Release(void)+38j
.text:00004490                 add     esp, 10h
.text:00004493                 cmp     ebp, esp
.text:00004495                 call    __RTC_CheckEsp
.text:0000449A                 mov     esp, ebp
.text:0000449C                 pop     ebp
.text:0000449D                 retn    4
.text:0000449D ?Release@CHandler@NXz@NArchive@@UAGKXZ endp
.text:0000449D
.text:0000449D _text           ends
.text:0000449D
.text:000044A0 ; ===========================================================================
.text:000044A0
.text:000044A0 ; Segment type: Pure code
.text:000044A0 ; Segment permissions: Read/Execute
.text:000044A0 _text           segment para public 'CODE' use32
.text:000044A0                 assume cs:_text
.text:000044A0                 ;org 44A0h
.text:000044A0 ; COMDAT (pick any)
.text:000044A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044A0
.text:000044A0 ; =============== S U B R O U T I N E =======================================
.text:000044A0
.text:000044A0 ; Attributes: bp-based frame
.text:000044A0
.text:000044A0 ; public: void * __thiscall NArchive::NXz::CHandler::`scalar deleting destructor'(unsigned int)
.text:000044A0                 public ??_GCHandler@NXz@NArchive@@QAEPAXI@Z
.text:000044A0 ??_GCHandler@NXz@NArchive@@QAEPAXI@Z proc near
.text:000044A0                                         ; CODE XREF: NArchive::NXz::CHandler::Release(void)+51p
.text:000044A0
.text:000044A0 var_4           = dword ptr -4
.text:000044A0 arg_0           = dword ptr  8
.text:000044A0
.text:000044A0                 push    ebp
.text:000044A1                 mov     ebp, esp
.text:000044A3                 push    ecx
.text:000044A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000044AB                 mov     [ebp+var_4], ecx
.text:000044AE                 mov     ecx, [ebp+var_4] ; this
.text:000044B1                 call    ??1CHandler@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CHandler::~CHandler(void)
.text:000044B6                 mov     eax, [ebp+arg_0]
.text:000044B9                 and     eax, 1
.text:000044BC                 jz      short loc_44CA
.text:000044BE                 mov     ecx, [ebp+var_4]
.text:000044C1                 push    ecx             ; void *
.text:000044C2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:000044C7                 add     esp, 4
.text:000044CA
.text:000044CA loc_44CA:                               ; CODE XREF: NArchive::NXz::CHandler::`scalar deleting destructor'(uint)+1Cj
.text:000044CA                 mov     eax, [ebp+var_4]
.text:000044CD                 add     esp, 4
.text:000044D0                 cmp     ebp, esp
.text:000044D2                 call    __RTC_CheckEsp
.text:000044D7                 mov     esp, ebp
.text:000044D9                 pop     ebp
.text:000044DA                 retn    4
.text:000044DA ??_GCHandler@NXz@NArchive@@QAEPAXI@Z endp
.text:000044DA
.text:000044DA ; ---------------------------------------------------------------------------
.text:000044DD                 align 10h
.text:000044DD _text           ends
.text:000044DD
.text:000044E0 ; ===========================================================================
.text:000044E0
.text:000044E0 ; Segment type: Pure code
.text:000044E0 ; Segment permissions: Read/Execute
.text:000044E0 _text           segment para public 'CODE' use32
.text:000044E0                 assume cs:_text
.text:000044E0                 ;org 44E0h
.text:000044E0 ; COMDAT (pick any)
.text:000044E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000044E0
.text:000044E0 ; =============== S U B R O U T I N E =======================================
.text:000044E0
.text:000044E0 ; Attributes: bp-based frame
.text:000044E0
.text:000044E0 ; _DWORD __thiscall NArchive::NXz::CHandler::~CHandler(NArchive::NXz::CHandler *__hidden this)
.text:000044E0                 public ??1CHandler@NXz@NArchive@@QAE@XZ
.text:000044E0 ??1CHandler@NXz@NArchive@@QAE@XZ proc near
.text:000044E0                                         ; CODE XREF: NArchive::NXz::CHandler::`scalar deleting destructor'(uint)+11p
.text:000044E0
.text:000044E0 var_10          = dword ptr -10h
.text:000044E0 var_C           = dword ptr -0Ch
.text:000044E0 var_4           = dword ptr -4
.text:000044E0
.text:000044E0                 push    ebp
.text:000044E1                 mov     ebp, esp
.text:000044E3                 push    0FFFFFFFFh
.text:000044E5                 push    offset __ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ
.text:000044EA                 mov     eax, large fs:0
.text:000044F0                 push    eax
.text:000044F1                 push    ecx
.text:000044F2                 mov     [ebp+var_10], 0CCCCCCCCh
.text:000044F9                 mov     eax, dword ptr ds:___security_cookie
.text:000044FE                 xor     eax, ebp
.text:00004500                 push    eax
.text:00004501                 lea     eax, [ebp+var_C]
.text:00004504                 mov     large fs:0, eax
.text:0000450A                 mov     [ebp+var_10], ecx
.text:0000450D                 mov     [ebp+var_4], 2
.text:00004514                 mov     ecx, [ebp+var_10]
.text:00004517                 add     ecx, 0A8h ; '¿' ; this
.text:0000451D                 call    ??1AString@@QAE@XZ ; AString::~AString(void)
.text:00004522                 mov     byte ptr [ebp+var_4], 1
.text:00004526                 mov     ecx, [ebp+var_10]
.text:00004529                 add     ecx, 0A0h ; 'á'
.text:0000452F                 call    ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text:00004534                 mov     byte ptr [ebp+var_4], 0
.text:00004538                 mov     ecx, [ebp+var_10]
.text:0000453B                 add     ecx, 9Ch ; '£'
.text:00004541                 call    ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text:00004546                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000454D                 mov     ecx, [ebp+var_10]
.text:00004550                 add     ecx, 10h        ; this
.text:00004553                 call    ??1CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)
.text:00004558                 mov     ecx, [ebp+var_C]
.text:0000455B                 mov     large fs:0, ecx
.text:00004562                 pop     ecx
.text:00004563                 add     esp, 10h
.text:00004566                 cmp     ebp, esp
.text:00004568                 call    __RTC_CheckEsp
.text:0000456D                 mov     esp, ebp
.text:0000456F                 pop     ebp
.text:00004570                 retn
.text:00004570 ??1CHandler@NXz@NArchive@@QAE@XZ endp
.text:00004570
.text:00004570 ; ---------------------------------------------------------------------------
.text:00004571                 align 4
.text:00004571 _text           ends
.text:00004571
.text$x:00004574 ; ===========================================================================
.text$x:00004574
.text$x:00004574 ; Segment type: Pure code
.text$x:00004574 ; Segment permissions: Read/Execute
.text$x:00004574 _text$x         segment para public 'CODE' use32
.text$x:00004574                 assume cs:_text$x
.text$x:00004574                 ;org 4574h
.text$x:00004574 ; COMDAT (pick associative to section at 44E0)
.text$x:00004574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004574
.text$x:00004574 ; =============== S U B R O U T I N E =======================================
.text$x:00004574
.text$x:00004574
.text$x:00004574 __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$0 proc near
.text$x:00004574                                         ; DATA XREF: .xdata$x:000045BCo
.text$x:00004574                 mov     ecx, [ebp-10h]
.text$x:00004577                 add     ecx, 10h        ; this
.text$x:0000457A                 jmp     ??1CMultiMethodProps@NArchive@@QAE@XZ ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)
.text$x:0000457A __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$0 endp
.text$x:0000457A
.text$x:0000457F
.text$x:0000457F ; =============== S U B R O U T I N E =======================================
.text$x:0000457F
.text$x:0000457F
.text$x:0000457F __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$1 proc near
.text$x:0000457F                                         ; DATA XREF: .xdata$x:000045C4o
.text$x:0000457F                 mov     ecx, [ebp-10h]
.text$x:00004582                 add     ecx, 9Ch ; '£'
.text$x:00004588                 jmp     ??1?$CMyComPtr@UIInStream@@@@QAE@XZ ; CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)
.text$x:00004588 __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$1 endp
.text$x:00004588
.text$x:0000458D
.text$x:0000458D ; =============== S U B R O U T I N E =======================================
.text$x:0000458D
.text$x:0000458D
.text$x:0000458D __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$2 proc near
.text$x:0000458D                                         ; DATA XREF: .xdata$x:000045CCo
.text$x:0000458D                 mov     ecx, [ebp-10h]
.text$x:00004590                 add     ecx, 0A0h ; 'á'
.text$x:00004596                 jmp     ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)
.text$x:00004596 __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$2 endp
.text$x:00004596
.text$x:0000459B
.text$x:0000459B ; =============== S U B R O U T I N E =======================================
.text$x:0000459B
.text$x:0000459B
.text$x:0000459B __ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ proc near
.text$x:0000459B                                         ; DATA XREF: NArchive::NXz::CHandler::~CHandler(void)+5o
.text$x:0000459B
.text$x:0000459B arg_4           = dword ptr  8
.text$x:0000459B
.text$x:0000459B                 mov     edx, [esp+arg_4]
.text$x:0000459F                 lea     eax, [edx+0Ch]
.text$x:000045A2                 mov     ecx, [edx-8]
.text$x:000045A5                 xor     ecx, eax
.text$x:000045A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000045AC                 mov     eax, offset __ehfuncinfo$??1CHandler@NXz@NArchive@@QAE@XZ
.text$x:000045B1                 jmp     ___CxxFrameHandler3
.text$x:000045B1 __ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ endp
.text$x:000045B1
.text$x:000045B1 ; ---------------------------------------------------------------------------
.text$x:000045B6                 align 4
.text$x:000045B6 _text$x         ends
.text$x:000045B6
.xdata$x:000045B8 ; ===========================================================================
.xdata$x:000045B8
.xdata$x:000045B8 ; Segment type: Pure data
.xdata$x:000045B8 ; Segment permissions: Read
.xdata$x:000045B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000045B8                 assume cs:_xdata$x
.xdata$x:000045B8                 ;org 45B8h
.xdata$x:000045B8 ; COMDAT (pick associative to section at 44E0)
.xdata$x:000045B8 __unwindtable$??1CHandler@NXz@NArchive@@QAE@XZ db 0FFh
.xdata$x:000045B8                                         ; DATA XREF: .xdata$x:000045D8o
.xdata$x:000045B9                 db 0FFh
.xdata$x:000045BA                 db 0FFh
.xdata$x:000045BB                 db 0FFh
.xdata$x:000045BC                 dd offset __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$0
.xdata$x:000045C0                 db    0
.xdata$x:000045C1                 db    0
.xdata$x:000045C2                 db    0
.xdata$x:000045C3                 db    0
.xdata$x:000045C4                 dd offset __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$1
.xdata$x:000045C8                 db    1
.xdata$x:000045C9                 db    0
.xdata$x:000045CA                 db    0
.xdata$x:000045CB                 db    0
.xdata$x:000045CC                 dd offset __unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$2
.xdata$x:000045D0 __ehfuncinfo$??1CHandler@NXz@NArchive@@QAE@XZ db  22h ; "
.xdata$x:000045D0                                         ; DATA XREF: __ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ+11o
.xdata$x:000045D1                 db    5
.xdata$x:000045D2                 db  93h ; ô
.xdata$x:000045D3                 db  19h
.xdata$x:000045D4                 db    3
.xdata$x:000045D5                 db    0
.xdata$x:000045D6                 db    0
.xdata$x:000045D7                 db    0
.xdata$x:000045D8                 dd offset __unwindtable$??1CHandler@NXz@NArchive@@QAE@XZ
.xdata$x:000045DC                 db    0
.xdata$x:000045DD                 db    0
.xdata$x:000045DE                 db    0
.xdata$x:000045DF                 db    0
.xdata$x:000045E0                 db    0
.xdata$x:000045E1                 db    0
.xdata$x:000045E2                 db    0
.xdata$x:000045E3                 db    0
.xdata$x:000045E4                 db    0
.xdata$x:000045E5                 db    0
.xdata$x:000045E6                 db    0
.xdata$x:000045E7                 db    0
.xdata$x:000045E8                 db    0
.xdata$x:000045E9                 db    0
.xdata$x:000045EA                 db    0
.xdata$x:000045EB                 db    0
.xdata$x:000045EC                 db    0
.xdata$x:000045ED                 db    0
.xdata$x:000045EE                 db    0
.xdata$x:000045EF                 db    0
.xdata$x:000045F0                 db    1
.xdata$x:000045F1                 db    0
.xdata$x:000045F2                 db    0
.xdata$x:000045F3                 db    0
.xdata$x:000045F3 _xdata$x        ends
.xdata$x:000045F3
.text:000045F4 ; ===========================================================================
.text:000045F4
.text:000045F4 ; Segment type: Pure code
.text:000045F4 ; Segment permissions: Read/Execute
.text:000045F4 _text           segment para public 'CODE' use32
.text:000045F4                 assume cs:_text
.text:000045F4                 ;org 45F4h
.text:000045F4 ; COMDAT (pick any)
.text:000045F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000045F4
.text:000045F4 ; =============== S U B R O U T I N E =======================================
.text:000045F4
.text:000045F4 ; Attributes: bp-based frame
.text:000045F4
.text:000045F4 ; _DWORD __thiscall NArchive::CMultiMethodProps::~CMultiMethodProps(NArchive::CMultiMethodProps *__hidden this)
.text:000045F4                 public ??1CMultiMethodProps@NArchive@@QAE@XZ
.text:000045F4 ??1CMultiMethodProps@NArchive@@QAE@XZ proc near
.text:000045F4                                         ; CODE XREF: __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0+6j
.text:000045F4                                         ; NArchive::NXz::CHandler::~CHandler(void)+73p ...
.text:000045F4
.text:000045F4 var_10          = dword ptr -10h
.text:000045F4 var_C           = dword ptr -0Ch
.text:000045F4 var_4           = dword ptr -4
.text:000045F4
.text:000045F4                 push    ebp
.text:000045F5                 mov     ebp, esp
.text:000045F7                 push    0FFFFFFFFh
.text:000045F9                 push    offset __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ
.text:000045FE                 mov     eax, large fs:0
.text:00004604                 push    eax
.text:00004605                 push    ecx
.text:00004606                 mov     [ebp+var_10], 0CCCCCCCCh
.text:0000460D                 mov     eax, dword ptr ds:___security_cookie
.text:00004612                 xor     eax, ebp
.text:00004614                 push    eax
.text:00004615                 lea     eax, [ebp+var_C]
.text:00004618                 mov     large fs:0, eax
.text:0000461E                 mov     [ebp+var_10], ecx
.text:00004621                 mov     [ebp+var_4], 0
.text:00004628                 mov     ecx, [ebp+var_10]
.text:0000462B                 add     ecx, 20h ; ' '  ; this
.text:0000462E                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:00004633                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0000463A                 mov     ecx, [ebp+var_10]
.text:0000463D                 add     ecx, 14h
.text:00004640                 call    ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text:00004645                 mov     ecx, [ebp+var_C]
.text:00004648                 mov     large fs:0, ecx
.text:0000464F                 pop     ecx
.text:00004650                 add     esp, 10h
.text:00004653                 cmp     ebp, esp
.text:00004655                 call    __RTC_CheckEsp
.text:0000465A                 mov     esp, ebp
.text:0000465C                 pop     ebp
.text:0000465D                 retn
.text:0000465D ??1CMultiMethodProps@NArchive@@QAE@XZ endp
.text:0000465D
.text:0000465D ; ---------------------------------------------------------------------------
.text:0000465E                 align 10h
.text:0000465E _text           ends
.text:0000465E
.text$x:00004660 ; ===========================================================================
.text$x:00004660
.text$x:00004660 ; Segment type: Pure code
.text$x:00004660 ; Segment permissions: Read/Execute
.text$x:00004660 _text$x         segment para public 'CODE' use32
.text$x:00004660                 assume cs:_text$x
.text$x:00004660                 ;org 4660h
.text$x:00004660 ; COMDAT (pick associative to section at 45F4)
.text$x:00004660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004660
.text$x:00004660 ; =============== S U B R O U T I N E =======================================
.text$x:00004660
.text$x:00004660
.text$x:00004660 __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0 proc near
.text$x:00004660                                         ; DATA XREF: .xdata$x:0000468Co
.text$x:00004660                 mov     ecx, [ebp-10h]
.text$x:00004663                 add     ecx, 14h
.text$x:00004666                 jmp     ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)
.text$x:00004666 __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0 endp
.text$x:00004666
.text$x:0000466B
.text$x:0000466B ; =============== S U B R O U T I N E =======================================
.text$x:0000466B
.text$x:0000466B
.text$x:0000466B __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ proc near
.text$x:0000466B                                         ; DATA XREF: NArchive::CMultiMethodProps::~CMultiMethodProps(void)+5o
.text$x:0000466B
.text$x:0000466B arg_4           = dword ptr  8
.text$x:0000466B
.text$x:0000466B                 mov     edx, [esp+arg_4]
.text$x:0000466F                 lea     eax, [edx+0Ch]
.text$x:00004672                 mov     ecx, [edx-8]
.text$x:00004675                 xor     ecx, eax
.text$x:00004677                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000467C                 mov     eax, offset __ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ
.text$x:00004681                 jmp     ___CxxFrameHandler3
.text$x:00004681 __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ endp
.text$x:00004681
.text$x:00004681 ; ---------------------------------------------------------------------------
.text$x:00004686                 align 4
.text$x:00004686 _text$x         ends
.text$x:00004686
.xdata$x:00004688 ; ===========================================================================
.xdata$x:00004688
.xdata$x:00004688 ; Segment type: Pure data
.xdata$x:00004688 ; Segment permissions: Read
.xdata$x:00004688 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004688                 assume cs:_xdata$x
.xdata$x:00004688                 ;org 4688h
.xdata$x:00004688 ; COMDAT (pick associative to section at 45F4)
.xdata$x:00004688 __unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ db 0FFh
.xdata$x:00004688                                         ; DATA XREF: .xdata$x:00004698o
.xdata$x:00004689                 db 0FFh
.xdata$x:0000468A                 db 0FFh
.xdata$x:0000468B                 db 0FFh
.xdata$x:0000468C                 dd offset __unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0
.xdata$x:00004690 __ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ db  22h ; "
.xdata$x:00004690                                         ; DATA XREF: __ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ+11o
.xdata$x:00004691                 db    5
.xdata$x:00004692                 db  93h ; ô
.xdata$x:00004693                 db  19h
.xdata$x:00004694                 db    1
.xdata$x:00004695                 db    0
.xdata$x:00004696                 db    0
.xdata$x:00004697                 db    0
.xdata$x:00004698                 dd offset __unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ
.xdata$x:0000469C                 db    0
.xdata$x:0000469D                 db    0
.xdata$x:0000469E                 db    0
.xdata$x:0000469F                 db    0
.xdata$x:000046A0                 db    0
.xdata$x:000046A1                 db    0
.xdata$x:000046A2                 db    0
.xdata$x:000046A3                 db    0
.xdata$x:000046A4                 db    0
.xdata$x:000046A5                 db    0
.xdata$x:000046A6                 db    0
.xdata$x:000046A7                 db    0
.xdata$x:000046A8                 db    0
.xdata$x:000046A9                 db    0
.xdata$x:000046AA                 db    0
.xdata$x:000046AB                 db    0
.xdata$x:000046AC                 db    0
.xdata$x:000046AD                 db    0
.xdata$x:000046AE                 db    0
.xdata$x:000046AF                 db    0
.xdata$x:000046B0                 db    1
.xdata$x:000046B1                 db    0
.xdata$x:000046B2                 db    0
.xdata$x:000046B3                 db    0
.xdata$x:000046B3 _xdata$x        ends
.xdata$x:000046B3
.text:000046B4 ; ===========================================================================
.text:000046B4
.text:000046B4 ; Segment type: Pure code
.text:000046B4 ; Segment permissions: Read/Execute
.text:000046B4 _text           segment para public 'CODE' use32
.text:000046B4                 assume cs:_text
.text:000046B4                 ;org 46B4h
.text:000046B4 ; COMDAT (pick any)
.text:000046B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000046B4
.text:000046B4 ; =============== S U B R O U T I N E =======================================
.text:000046B4
.text:000046B4 ; Attributes: bp-based frame
.text:000046B4
.text:000046B4 ; _DWORD __thiscall IInArchive::IInArchive(IInArchive *__hidden this)
.text:000046B4                 public ??0IInArchive@@QAE@XZ
.text:000046B4 ??0IInArchive@@QAE@XZ proc near         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+30p
.text:000046B4
.text:000046B4 var_4           = dword ptr -4
.text:000046B4
.text:000046B4                 push    ebp
.text:000046B5                 mov     ebp, esp
.text:000046B7                 push    ecx
.text:000046B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000046BF                 mov     [ebp+var_4], ecx
.text:000046C2                 mov     ecx, [ebp+var_4]
.text:000046C5                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000046CA                 mov     eax, [ebp+var_4]
.text:000046CD                 mov     dword ptr [eax], offset ??_7IInArchive@@6B@ ; const IInArchive::`vftable'
.text:000046D3                 mov     eax, [ebp+var_4]
.text:000046D6                 add     esp, 4
.text:000046D9                 cmp     ebp, esp
.text:000046DB                 call    __RTC_CheckEsp
.text:000046E0                 mov     esp, ebp
.text:000046E2                 pop     ebp
.text:000046E3                 retn
.text:000046E3 ??0IInArchive@@QAE@XZ endp
.text:000046E3
.text:000046E3 _text           ends
.text:000046E3
.rdata:000046E4 ; ===========================================================================
.rdata:000046E4
.rdata:000046E4 ; Segment type: Pure data
.rdata:000046E4 ; Segment permissions: Read
.rdata:000046E4 _rdata          segment dword public 'DATA' use32
.rdata:000046E4                 assume cs:_rdata
.rdata:000046E4                 ;org 46E4h
.rdata:000046E4 ; COMDAT (pick largest)
.rdata:000046E4                 dd offset ??_R4IInArchive@@6B@ ; const IInArchive::`RTTI Complete Object Locator'
.rdata:000046E8                 public ??_7IInArchive@@6B@
.rdata:000046E8 ; const IInArchive::`vftable'
.rdata:000046E8 ??_7IInArchive@@6B@ dd offset __purecall
.rdata:000046E8                                         ; DATA XREF: IInArchive::IInArchive(void)+19o
.rdata:000046EC                 dd offset __purecall
.rdata:000046F0                 dd offset __purecall
.rdata:000046F4                 dd offset __purecall
.rdata:000046F8                 dd offset __purecall
.rdata:000046FC                 dd offset __purecall
.rdata:00004700                 dd offset __purecall
.rdata:00004704                 dd offset __purecall
.rdata:00004708                 dd offset __purecall
.rdata:0000470C                 dd offset __purecall
.rdata:00004710                 dd offset __purecall
.rdata:00004714                 dd offset __purecall
.rdata:00004718                 dd offset __purecall
.rdata:00004718 _rdata          ends
.rdata:00004718
.rdata$r:0000471C ; ===========================================================================
.rdata$r:0000471C
.rdata$r:0000471C ; Segment type: Pure data
.rdata$r:0000471C ; Segment permissions: Read
.rdata$r:0000471C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000471C                 assume cs:_rdata$r
.rdata$r:0000471C                 ;org 471Ch
.rdata$r:0000471C ; COMDAT (pick any)
.rdata$r:0000471C                 public ??_R4IInArchive@@6B@
.rdata$r:0000471C ; const IInArchive::`RTTI Complete Object Locator'
.rdata$r:0000471C ??_R4IInArchive@@6B@ db    0            ; DATA XREF: .rdata:000046E4o
.rdata$r:0000471D                 db    0
.rdata$r:0000471E                 db    0
.rdata$r:0000471F                 db    0
.rdata$r:00004720                 db    0
.rdata$r:00004721                 db    0
.rdata$r:00004722                 db    0
.rdata$r:00004723                 db    0
.rdata$r:00004724                 db    0
.rdata$r:00004725                 db    0
.rdata$r:00004726                 db    0
.rdata$r:00004727                 db    0
.rdata$r:00004728                 dd offset ??_R0?AUIInArchive@@@8 ; IInArchive `RTTI Type Descriptor'
.rdata$r:0000472C                 dd offset ??_R3IInArchive@@8 ; IInArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000472C _rdata$r        ends
.rdata$r:0000472C
.text:00004730 ; ===========================================================================
.text:00004730
.text:00004730 ; Segment type: Pure code
.text:00004730 ; Segment permissions: Read/Execute
.text:00004730 _text           segment para public 'CODE' use32
.text:00004730                 assume cs:_text
.text:00004730                 ;org 4730h
.text:00004730 ; COMDAT (pick any)
.text:00004730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004730
.text:00004730 ; =============== S U B R O U T I N E =======================================
.text:00004730
.text:00004730 ; Attributes: bp-based frame
.text:00004730
.text:00004730 ; public: __thiscall IUnknown::IUnknown(void)
.text:00004730                 public ??0IUnknown@@QAE@XZ
.text:00004730 ??0IUnknown@@QAE@XZ proc near           ; CODE XREF: IInArchive::IInArchive(void)+11p
.text:00004730                                         ; IArchiveOpenSeq::IArchiveOpenSeq(void)+11p ...
.text:00004730
.text:00004730 var_4           = dword ptr -4
.text:00004730
.text:00004730                 push    ebp
.text:00004731                 mov     ebp, esp
.text:00004733                 push    ecx
.text:00004734                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000473B                 mov     [ebp+var_4], ecx
.text:0000473E                 mov     eax, [ebp+var_4]
.text:00004741                 mov     esp, ebp
.text:00004743                 pop     ebp
.text:00004744                 retn
.text:00004744 ??0IUnknown@@QAE@XZ endp
.text:00004744
.text:00004744 ; ---------------------------------------------------------------------------
.text:00004745                 align 4
.text:00004745 _text           ends
.text:00004745
.text:00004748 ; ===========================================================================
.text:00004748
.text:00004748 ; Segment type: Pure code
.text:00004748 ; Segment permissions: Read/Execute
.text:00004748 _text           segment para public 'CODE' use32
.text:00004748                 assume cs:_text
.text:00004748                 ;org 4748h
.text:00004748 ; COMDAT (pick any)
.text:00004748                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004748
.text:00004748 ; =============== S U B R O U T I N E =======================================
.text:00004748
.text:00004748 ; Attributes: bp-based frame
.text:00004748
.text:00004748 ; _DWORD __thiscall IArchiveOpenSeq::IArchiveOpenSeq(IArchiveOpenSeq *__hidden this)
.text:00004748                 public ??0IArchiveOpenSeq@@QAE@XZ
.text:00004748 ??0IArchiveOpenSeq@@QAE@XZ proc near    ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+3Bp
.text:00004748
.text:00004748 var_4           = dword ptr -4
.text:00004748
.text:00004748                 push    ebp
.text:00004749                 mov     ebp, esp
.text:0000474B                 push    ecx
.text:0000474C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004753                 mov     [ebp+var_4], ecx
.text:00004756                 mov     ecx, [ebp+var_4]
.text:00004759                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:0000475E                 mov     eax, [ebp+var_4]
.text:00004761                 mov     dword ptr [eax], offset ??_7IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`vftable'
.text:00004767                 mov     eax, [ebp+var_4]
.text:0000476A                 add     esp, 4
.text:0000476D                 cmp     ebp, esp
.text:0000476F                 call    __RTC_CheckEsp
.text:00004774                 mov     esp, ebp
.text:00004776                 pop     ebp
.text:00004777                 retn
.text:00004777 ??0IArchiveOpenSeq@@QAE@XZ endp
.text:00004777
.text:00004777 _text           ends
.text:00004777
.rdata:00004778 ; ===========================================================================
.rdata:00004778
.rdata:00004778 ; Segment type: Pure data
.rdata:00004778 ; Segment permissions: Read
.rdata:00004778 _rdata          segment dword public 'DATA' use32
.rdata:00004778                 assume cs:_rdata
.rdata:00004778                 ;org 4778h
.rdata:00004778 ; COMDAT (pick largest)
.rdata:00004778                 dd offset ??_R4IArchiveOpenSeq@@6B@ ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata:0000477C                 public ??_7IArchiveOpenSeq@@6B@
.rdata:0000477C ; const IArchiveOpenSeq::`vftable'
.rdata:0000477C ??_7IArchiveOpenSeq@@6B@ dd offset __purecall
.rdata:0000477C                                         ; DATA XREF: IArchiveOpenSeq::IArchiveOpenSeq(void)+19o
.rdata:00004780                 dd offset __purecall
.rdata:00004784                 dd offset __purecall
.rdata:00004788                 dd offset __purecall
.rdata:00004788 _rdata          ends
.rdata:00004788
.rdata$r:0000478C ; ===========================================================================
.rdata$r:0000478C
.rdata$r:0000478C ; Segment type: Pure data
.rdata$r:0000478C ; Segment permissions: Read
.rdata$r:0000478C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000478C                 assume cs:_rdata$r
.rdata$r:0000478C                 ;org 478Ch
.rdata$r:0000478C ; COMDAT (pick any)
.rdata$r:0000478C                 public ??_R4IArchiveOpenSeq@@6B@
.rdata$r:0000478C ; const IArchiveOpenSeq::`RTTI Complete Object Locator'
.rdata$r:0000478C ??_R4IArchiveOpenSeq@@6B@ db    0       ; DATA XREF: .rdata:00004778o
.rdata$r:0000478D                 db    0
.rdata$r:0000478E                 db    0
.rdata$r:0000478F                 db    0
.rdata$r:00004790                 db    0
.rdata$r:00004791                 db    0
.rdata$r:00004792                 db    0
.rdata$r:00004793                 db    0
.rdata$r:00004794                 db    0
.rdata$r:00004795                 db    0
.rdata$r:00004796                 db    0
.rdata$r:00004797                 db    0
.rdata$r:00004798                 dd offset ??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq `RTTI Type Descriptor'
.rdata$r:0000479C                 dd offset ??_R3IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000479C _rdata$r        ends
.rdata$r:0000479C
.text:000047A0 ; ===========================================================================
.text:000047A0
.text:000047A0 ; Segment type: Pure code
.text:000047A0 ; Segment permissions: Read/Execute
.text:000047A0 _text           segment para public 'CODE' use32
.text:000047A0                 assume cs:_text
.text:000047A0                 ;org 47A0h
.text:000047A0 ; COMDAT (pick any)
.text:000047A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047A0
.text:000047A0 ; =============== S U B R O U T I N E =======================================
.text:000047A0
.text:000047A0 ; Attributes: bp-based frame
.text:000047A0
.text:000047A0 ; _DWORD __thiscall IOutArchive::IOutArchive(IOutArchive *__hidden this)
.text:000047A0                 public ??0IOutArchive@@QAE@XZ
.text:000047A0 ??0IOutArchive@@QAE@XZ proc near        ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+46p
.text:000047A0
.text:000047A0 var_4           = dword ptr -4
.text:000047A0
.text:000047A0                 push    ebp
.text:000047A1                 mov     ebp, esp
.text:000047A3                 push    ecx
.text:000047A4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000047AB                 mov     [ebp+var_4], ecx
.text:000047AE                 mov     ecx, [ebp+var_4]
.text:000047B1                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:000047B6                 mov     eax, [ebp+var_4]
.text:000047B9                 mov     dword ptr [eax], offset ??_7IOutArchive@@6B@ ; const IOutArchive::`vftable'
.text:000047BF                 mov     eax, [ebp+var_4]
.text:000047C2                 add     esp, 4
.text:000047C5                 cmp     ebp, esp
.text:000047C7                 call    __RTC_CheckEsp
.text:000047CC                 mov     esp, ebp
.text:000047CE                 pop     ebp
.text:000047CF                 retn
.text:000047CF ??0IOutArchive@@QAE@XZ endp
.text:000047CF
.text:000047CF _text           ends
.text:000047CF
.rdata:000047D0 ; ===========================================================================
.rdata:000047D0
.rdata:000047D0 ; Segment type: Pure data
.rdata:000047D0 ; Segment permissions: Read
.rdata:000047D0 _rdata          segment dword public 'DATA' use32
.rdata:000047D0                 assume cs:_rdata
.rdata:000047D0                 ;org 47D0h
.rdata:000047D0 ; COMDAT (pick largest)
.rdata:000047D0                 dd offset ??_R4IOutArchive@@6B@ ; const IOutArchive::`RTTI Complete Object Locator'
.rdata:000047D4                 public ??_7IOutArchive@@6B@
.rdata:000047D4 ; const IOutArchive::`vftable'
.rdata:000047D4 ??_7IOutArchive@@6B@ dd offset __purecall
.rdata:000047D4                                         ; DATA XREF: IOutArchive::IOutArchive(void)+19o
.rdata:000047D8                 dd offset __purecall
.rdata:000047DC                 dd offset __purecall
.rdata:000047E0                 dd offset __purecall
.rdata:000047E4                 dd offset __purecall
.rdata:000047E4 _rdata          ends
.rdata:000047E4
.rdata$r:000047E8 ; ===========================================================================
.rdata$r:000047E8
.rdata$r:000047E8 ; Segment type: Pure data
.rdata$r:000047E8 ; Segment permissions: Read
.rdata$r:000047E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000047E8                 assume cs:_rdata$r
.rdata$r:000047E8                 ;org 47E8h
.rdata$r:000047E8 ; COMDAT (pick any)
.rdata$r:000047E8                 public ??_R4IOutArchive@@6B@
.rdata$r:000047E8 ; const IOutArchive::`RTTI Complete Object Locator'
.rdata$r:000047E8 ??_R4IOutArchive@@6B@ db    0           ; DATA XREF: .rdata:000047D0o
.rdata$r:000047E9                 db    0
.rdata$r:000047EA                 db    0
.rdata$r:000047EB                 db    0
.rdata$r:000047EC                 db    0
.rdata$r:000047ED                 db    0
.rdata$r:000047EE                 db    0
.rdata$r:000047EF                 db    0
.rdata$r:000047F0                 db    0
.rdata$r:000047F1                 db    0
.rdata$r:000047F2                 db    0
.rdata$r:000047F3                 db    0
.rdata$r:000047F4                 dd offset ??_R0?AUIOutArchive@@@8 ; IOutArchive `RTTI Type Descriptor'
.rdata$r:000047F8                 dd offset ??_R3IOutArchive@@8 ; IOutArchive::`RTTI Class Hierarchy Descriptor'
.rdata$r:000047F8 _rdata$r        ends
.rdata$r:000047F8
.text:000047FC ; ===========================================================================
.text:000047FC
.text:000047FC ; Segment type: Pure code
.text:000047FC ; Segment permissions: Read/Execute
.text:000047FC _text           segment para public 'CODE' use32
.text:000047FC                 assume cs:_text
.text:000047FC                 ;org 47FCh
.text:000047FC ; COMDAT (pick any)
.text:000047FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000047FC
.text:000047FC ; =============== S U B R O U T I N E =======================================
.text:000047FC
.text:000047FC ; Attributes: bp-based frame
.text:000047FC
.text:000047FC ; _DWORD __thiscall ISetProperties::ISetProperties(ISetProperties *__hidden this)
.text:000047FC                 public ??0ISetProperties@@QAE@XZ
.text:000047FC ??0ISetProperties@@QAE@XZ proc near     ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+51p
.text:000047FC
.text:000047FC var_4           = dword ptr -4
.text:000047FC
.text:000047FC                 push    ebp
.text:000047FD                 mov     ebp, esp
.text:000047FF                 push    ecx
.text:00004800                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004807                 mov     [ebp+var_4], ecx
.text:0000480A                 mov     ecx, [ebp+var_4]
.text:0000480D                 call    ??0IUnknown@@QAE@XZ ; IUnknown::IUnknown(void)
.text:00004812                 mov     eax, [ebp+var_4]
.text:00004815                 mov     dword ptr [eax], offset ??_7ISetProperties@@6B@ ; const ISetProperties::`vftable'
.text:0000481B                 mov     eax, [ebp+var_4]
.text:0000481E                 add     esp, 4
.text:00004821                 cmp     ebp, esp
.text:00004823                 call    __RTC_CheckEsp
.text:00004828                 mov     esp, ebp
.text:0000482A                 pop     ebp
.text:0000482B                 retn
.text:0000482B ??0ISetProperties@@QAE@XZ endp
.text:0000482B
.text:0000482B _text           ends
.text:0000482B
.rdata:0000482C ; ===========================================================================
.rdata:0000482C
.rdata:0000482C ; Segment type: Pure data
.rdata:0000482C ; Segment permissions: Read
.rdata:0000482C _rdata          segment dword public 'DATA' use32
.rdata:0000482C                 assume cs:_rdata
.rdata:0000482C                 ;org 482Ch
.rdata:0000482C ; COMDAT (pick largest)
.rdata:0000482C                 dd offset ??_R4ISetProperties@@6B@ ; const ISetProperties::`RTTI Complete Object Locator'
.rdata:00004830                 public ??_7ISetProperties@@6B@
.rdata:00004830 ; const ISetProperties::`vftable'
.rdata:00004830 ??_7ISetProperties@@6B@ dd offset __purecall
.rdata:00004830                                         ; DATA XREF: ISetProperties::ISetProperties(void)+19o
.rdata:00004834                 dd offset __purecall
.rdata:00004838                 dd offset __purecall
.rdata:0000483C                 dd offset __purecall
.rdata:0000483C _rdata          ends
.rdata:0000483C
.rdata$r:00004840 ; ===========================================================================
.rdata$r:00004840
.rdata$r:00004840 ; Segment type: Pure data
.rdata$r:00004840 ; Segment permissions: Read
.rdata$r:00004840 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004840                 assume cs:_rdata$r
.rdata$r:00004840                 ;org 4840h
.rdata$r:00004840 ; COMDAT (pick any)
.rdata$r:00004840                 public ??_R4ISetProperties@@6B@
.rdata$r:00004840 ; const ISetProperties::`RTTI Complete Object Locator'
.rdata$r:00004840 ??_R4ISetProperties@@6B@ db    0        ; DATA XREF: .rdata:0000482Co
.rdata$r:00004841                 db    0
.rdata$r:00004842                 db    0
.rdata$r:00004843                 db    0
.rdata$r:00004844                 db    0
.rdata$r:00004845                 db    0
.rdata$r:00004846                 db    0
.rdata$r:00004847                 db    0
.rdata$r:00004848                 db    0
.rdata$r:00004849                 db    0
.rdata$r:0000484A                 db    0
.rdata$r:0000484B                 db    0
.rdata$r:0000484C                 dd offset ??_R0?AUISetProperties@@@8 ; ISetProperties `RTTI Type Descriptor'
.rdata$r:00004850                 dd offset ??_R3ISetProperties@@8 ; ISetProperties::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004850 _rdata$r        ends
.rdata$r:00004850
.text:00004854 ; ===========================================================================
.text:00004854
.text:00004854 ; Segment type: Pure code
.text:00004854 ; Segment permissions: Read/Execute
.text:00004854 _text           segment para public 'CODE' use32
.text:00004854                 assume cs:_text
.text:00004854                 ;org 4854h
.text:00004854 ; COMDAT (pick any)
.text:00004854                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004854
.text:00004854 ; =============== S U B R O U T I N E =======================================
.text:00004854
.text:00004854 ; Attributes: bp-based frame
.text:00004854
.text:00004854 ; bool __thiscall AString::IsEmpty(AString *__hidden this)
.text:00004854                 public ?IsEmpty@AString@@QBE_NXZ
.text:00004854 ?IsEmpty@AString@@QBE_NXZ proc near     ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+122p
.text:00004854                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+BAp ...
.text:00004854
.text:00004854 var_4           = dword ptr -4
.text:00004854
.text:00004854                 push    ebp
.text:00004855                 mov     ebp, esp
.text:00004857                 push    ecx
.text:00004858                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000485F                 mov     [ebp+var_4], ecx
.text:00004862                 mov     eax, [ebp+var_4]
.text:00004865                 xor     ecx, ecx
.text:00004867                 cmp     dword ptr [eax+4], 0
.text:0000486B                 setz    cl
.text:0000486E                 mov     al, cl
.text:00004870                 mov     esp, ebp
.text:00004872                 pop     ebp
.text:00004873                 retn
.text:00004873 ?IsEmpty@AString@@QBE_NXZ endp
.text:00004873
.text:00004873 _text           ends
.text:00004873
.text:00004874 ; ===========================================================================
.text:00004874
.text:00004874 ; Segment type: Pure code
.text:00004874 ; Segment permissions: Read/Execute
.text:00004874 _text           segment para public 'CODE' use32
.text:00004874                 assume cs:_text
.text:00004874                 ;org 4874h
.text:00004874 ; COMDAT (pick any)
.text:00004874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004874
.text:00004874 ; =============== S U B R O U T I N E =======================================
.text:00004874
.text:00004874 ; Attributes: bp-based frame
.text:00004874
.text:00004874 ; public: __thiscall AString::operator char const *(void)const
.text:00004874                 public ??BAString@@QBEPBDXZ
.text:00004874 ??BAString@@QBEPBDXZ proc near          ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+13Bp
.text:00004874                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+D3p ...
.text:00004874
.text:00004874 var_4           = dword ptr -4
.text:00004874
.text:00004874                 push    ebp
.text:00004875                 mov     ebp, esp
.text:00004877                 push    ecx
.text:00004878                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000487F                 mov     [ebp+var_4], ecx
.text:00004882                 mov     eax, [ebp+var_4]
.text:00004885                 mov     eax, [eax]
.text:00004887                 mov     esp, ebp
.text:00004889                 pop     ebp
.text:0000488A                 retn
.text:0000488A ??BAString@@QBEPBDXZ endp
.text:0000488A
.text:0000488A ; ---------------------------------------------------------------------------
.text:0000488B                 align 4
.text:0000488B _text           ends
.text:0000488B
.text:0000488C ; ===========================================================================
.text:0000488C
.text:0000488C ; Segment type: Pure code
.text:0000488C ; Segment permissions: Read/Execute
.text:0000488C _text           segment para public 'CODE' use32
.text:0000488C                 assume cs:_text
.text:0000488C                 ;org 488Ch
.text:0000488C ; COMDAT (pick any)
.text:0000488C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000488C
.text:0000488C ; =============== S U B R O U T I N E =======================================
.text:0000488C
.text:0000488C ; Attributes: bp-based frame
.text:0000488C
.text:0000488C ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:0000488C                 public ??0CPropVariant@NCOM@NWindows@@QAE@XZ
.text:0000488C ??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:0000488C                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+45p
.text:0000488C                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+45p ...
.text:0000488C
.text:0000488C var_4           = dword ptr -4
.text:0000488C
.text:0000488C                 push    ebp
.text:0000488D                 mov     ebp, esp
.text:0000488F                 push    ecx
.text:00004890                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004897                 mov     [ebp+var_4], ecx
.text:0000489A                 xor     eax, eax
.text:0000489C                 mov     ecx, [ebp+var_4]
.text:0000489F                 mov     [ecx], ax
.text:000048A2                 xor     edx, edx
.text:000048A4                 mov     eax, [ebp+var_4]
.text:000048A7                 mov     [eax+2], dx
.text:000048AB                 mov     ecx, [ebp+var_4]
.text:000048AE                 mov     dword ptr [ecx+8], 0
.text:000048B5                 mov     eax, [ebp+var_4]
.text:000048B8                 mov     esp, ebp
.text:000048BA                 pop     ebp
.text:000048BB                 retn
.text:000048BB ??0CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000048BB
.text:000048BB _text           ends
.text:000048BB
.text:000048BC ; ===========================================================================
.text:000048BC
.text:000048BC ; Segment type: Pure code
.text:000048BC ; Segment permissions: Read/Execute
.text:000048BC _text           segment para public 'CODE' use32
.text:000048BC                 assume cs:_text
.text:000048BC                 ;org 48BCh
.text:000048BC ; COMDAT (pick any)
.text:000048BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048BC
.text:000048BC ; =============== S U B R O U T I N E =======================================
.text:000048BC
.text:000048BC ; Attributes: bp-based frame
.text:000048BC
.text:000048BC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::~CPropVariant(NWindows::NCOM::CPropVariant *__hidden this)
.text:000048BC                 public ??1CPropVariant@NCOM@NWindows@@QAE@XZ
.text:000048BC ??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
.text:000048BC                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+22Bp
.text:000048BC                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+101p ...
.text:000048BC
.text:000048BC var_4           = dword ptr -4
.text:000048BC
.text:000048BC                 push    ebp
.text:000048BD                 mov     ebp, esp
.text:000048BF                 push    ecx
.text:000048C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048C7                 mov     [ebp+var_4], ecx
.text:000048CA                 mov     ecx, [ebp+var_4] ; this
.text:000048CD                 call    ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear(void)
.text:000048D2                 add     esp, 4
.text:000048D5                 cmp     ebp, esp
.text:000048D7                 call    __RTC_CheckEsp
.text:000048DC                 mov     esp, ebp
.text:000048DE                 pop     ebp
.text:000048DF                 retn
.text:000048DF ??1CPropVariant@NCOM@NWindows@@QAE@XZ endp
.text:000048DF
.text:000048DF _text           ends
.text:000048DF
.text:000048E0 ; ===========================================================================
.text:000048E0
.text:000048E0 ; Segment type: Pure code
.text:000048E0 ; Segment permissions: Read/Execute
.text:000048E0 _text           segment para public 'CODE' use32
.text:000048E0                 assume cs:_text
.text:000048E0                 ;org 48E0h
.text:000048E0 ; COMDAT (pick any)
.text:000048E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000048E0
.text:000048E0 ; =============== S U B R O U T I N E =======================================
.text:000048E0
.text:000048E0 ; Attributes: bp-based frame
.text:000048E0
.text:000048E0 ; public: class AString & __thiscall AString::operator+=(char)
.text:000048E0                 public ??YAString@@QAEAAV0@D@Z
.text:000048E0 ??YAString@@QAEAAV0@D@Z proc near       ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+E0p
.text:000048E0                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+153p ...
.text:000048E0
.text:000048E0 var_C           = dword ptr -0Ch
.text:000048E0 var_8           = dword ptr -8
.text:000048E0 var_4           = dword ptr -4
.text:000048E0 arg_0           = byte ptr  8
.text:000048E0
.text:000048E0                 push    ebp
.text:000048E1                 mov     ebp, esp
.text:000048E3                 sub     esp, 0Ch
.text:000048E6                 mov     [ebp+var_C], 0CCCCCCCCh
.text:000048ED                 mov     [ebp+var_8], 0CCCCCCCCh
.text:000048F4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000048FB                 mov     [ebp+var_4], ecx
.text:000048FE                 mov     eax, [ebp+var_4]
.text:00004901                 mov     ecx, [ebp+var_4]
.text:00004904                 mov     edx, [eax+8]
.text:00004907                 cmp     edx, [ecx+4]
.text:0000490A                 jnz     short loc_4914
.text:0000490C                 mov     ecx, [ebp+var_4] ; this
.text:0000490F                 call    ?Grow_1@AString@@AAEXXZ ; AString::Grow_1(void)
.text:00004914
.text:00004914 loc_4914:                               ; CODE XREF: AString::operator+=(char)+2Aj
.text:00004914                 mov     eax, [ebp+var_4]
.text:00004917                 mov     ecx, [eax+4]
.text:0000491A                 mov     [ebp+var_8], ecx
.text:0000491D                 mov     edx, [ebp+var_4]
.text:00004920                 mov     eax, [edx]
.text:00004922                 mov     [ebp+var_C], eax
.text:00004925                 mov     ecx, [ebp+var_C]
.text:00004928                 add     ecx, [ebp+var_8]
.text:0000492B                 mov     dl, [ebp+arg_0]
.text:0000492E                 mov     [ecx], dl
.text:00004930                 mov     eax, [ebp+var_8]
.text:00004933                 add     eax, 1
.text:00004936                 mov     [ebp+var_8], eax
.text:00004939                 mov     ecx, [ebp+var_C]
.text:0000493C                 add     ecx, [ebp+var_8]
.text:0000493F                 mov     byte ptr [ecx], 0
.text:00004942                 mov     edx, [ebp+var_4]
.text:00004945                 mov     eax, [ebp+var_8]
.text:00004948                 mov     [edx+4], eax
.text:0000494B                 mov     eax, [ebp+var_4]
.text:0000494E                 add     esp, 0Ch
.text:00004951                 cmp     ebp, esp
.text:00004953                 call    __RTC_CheckEsp
.text:00004958                 mov     esp, ebp
.text:0000495A                 pop     ebp
.text:0000495B                 retn    4
.text:0000495B ??YAString@@QAEAAV0@D@Z endp
.text:0000495B
.text:0000495B ; ---------------------------------------------------------------------------
.text:0000495E                 align 10h
.text:0000495E _text           ends
.text:0000495E
.text:00004960 ; ===========================================================================
.text:00004960
.text:00004960 ; Segment type: Pure code
.text:00004960 ; Segment permissions: Read/Execute
.text:00004960 _text           segment para public 'CODE' use32
.text:00004960                 assume cs:_text
.text:00004960                 ;org 4960h
.text:00004960 ; COMDAT (pick any)
.text:00004960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004960
.text:00004960 ; =============== S U B R O U T I N E =======================================
.text:00004960
.text:00004960 ; Attributes: bp-based frame
.text:00004960
.text:00004960 ; _DWORD __thiscall NArchive::NXz::CXzsCPP::CXzsCPP(NArchive::NXz::CXzsCPP *__hidden this)
.text:00004960                 public ??0CXzsCPP@NXz@NArchive@@QAE@XZ
.text:00004960 ??0CXzsCPP@NXz@NArchive@@QAE@XZ proc near
.text:00004960                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+21Ep
.text:00004960
.text:00004960 var_4           = dword ptr -4
.text:00004960
.text:00004960                 push    ebp
.text:00004961                 mov     ebp, esp
.text:00004963                 push    ecx
.text:00004964                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000496B                 mov     [ebp+var_4], ecx
.text:0000496E                 mov     eax, [ebp+var_4]
.text:00004971                 push    eax
.text:00004972                 call    _Xzs_Construct@4 ; Xzs_Construct(x)
.text:00004977                 mov     eax, [ebp+var_4]
.text:0000497A                 add     esp, 4
.text:0000497D                 cmp     ebp, esp
.text:0000497F                 call    __RTC_CheckEsp
.text:00004984                 mov     esp, ebp
.text:00004986                 pop     ebp
.text:00004987                 retn
.text:00004987 ??0CXzsCPP@NXz@NArchive@@QAE@XZ endp
.text:00004987
.text:00004987 _text           ends
.text:00004987
.text:00004988 ; ===========================================================================
.text:00004988
.text:00004988 ; Segment type: Pure code
.text:00004988 ; Segment permissions: Read/Execute
.text:00004988 _text           segment para public 'CODE' use32
.text:00004988                 assume cs:_text
.text:00004988                 ;org 4988h
.text:00004988 ; COMDAT (pick any)
.text:00004988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004988
.text:00004988 ; =============== S U B R O U T I N E =======================================
.text:00004988
.text:00004988 ; Attributes: bp-based frame
.text:00004988
.text:00004988 ; _DWORD __thiscall NArchive::NXz::CXzsCPP::~CXzsCPP(NArchive::NXz::CXzsCPP *__hidden this)
.text:00004988                 public ??1CXzsCPP@NXz@NArchive@@QAE@XZ
.text:00004988 ??1CXzsCPP@NXz@NArchive@@QAE@XZ proc near
.text:00004988                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+299p
.text:00004988                                         ; NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3BFp ...
.text:00004988
.text:00004988 var_4           = dword ptr -4
.text:00004988
.text:00004988                 push    ebp
.text:00004989                 mov     ebp, esp
.text:0000498B                 push    ecx
.text:0000498C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004993                 mov     [ebp+var_4], ecx
.text:00004996                 push    offset _g_Alloc
.text:0000499B                 mov     eax, [ebp+var_4]
.text:0000499E                 push    eax
.text:0000499F                 call    _Xzs_Free@8     ; Xzs_Free(x,x)
.text:000049A4                 add     esp, 4
.text:000049A7                 cmp     ebp, esp
.text:000049A9                 call    __RTC_CheckEsp
.text:000049AE                 mov     esp, ebp
.text:000049B0                 pop     ebp
.text:000049B1                 retn
.text:000049B1 ??1CXzsCPP@NXz@NArchive@@QAE@XZ endp
.text:000049B1
.text:000049B1 ; ---------------------------------------------------------------------------
.text:000049B2                 align 4
.text:000049B2 _text           ends
.text:000049B2
.text:000049B4 ; ===========================================================================
.text:000049B4
.text:000049B4 ; Segment type: Pure code
.text:000049B4 ; Segment permissions: Read/Execute
.text:000049B4 _text           segment para public 'CODE' use32
.text:000049B4                 assume cs:_text
.text:000049B4                 ;org 49B4h
.text:000049B4 ; COMDAT (pick any)
.text:000049B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049B4
.text:000049B4 ; =============== S U B R O U T I N E =======================================
.text:000049B4
.text:000049B4 ; Attributes: bp-based frame
.text:000049B4
.text:000049B4 ; void __thiscall AString::Empty(AString *__hidden this)
.text:000049B4                 public ?Empty@AString@@QAEXXZ
.text:000049B4 ?Empty@AString@@QAEXXZ proc near        ; CODE XREF: NArchive::NXz::CHandler::Close(void)+35p
.text:000049B4
.text:000049B4 var_4           = dword ptr -4
.text:000049B4
.text:000049B4                 push    ebp
.text:000049B5                 mov     ebp, esp
.text:000049B7                 push    ecx
.text:000049B8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049BF                 mov     [ebp+var_4], ecx
.text:000049C2                 mov     eax, [ebp+var_4]
.text:000049C5                 mov     dword ptr [eax+4], 0
.text:000049CC                 mov     ecx, [ebp+var_4]
.text:000049CF                 mov     edx, [ecx]
.text:000049D1                 mov     byte ptr [edx], 0
.text:000049D4                 mov     esp, ebp
.text:000049D6                 pop     ebp
.text:000049D7                 retn
.text:000049D7 ?Empty@AString@@QAEXXZ endp
.text:000049D7
.text:000049D7 _text           ends
.text:000049D7
.text:000049D8 ; ===========================================================================
.text:000049D8
.text:000049D8 ; Segment type: Pure code
.text:000049D8 ; Segment permissions: Read/Execute
.text:000049D8 _text           segment para public 'CODE' use32
.text:000049D8                 assume cs:_text
.text:000049D8                 ;org 49D8h
.text:000049D8 ; COMDAT (pick any)
.text:000049D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000049D8
.text:000049D8 ; =============== S U B R O U T I N E =======================================
.text:000049D8
.text:000049D8 ; Attributes: bp-based frame
.text:000049D8
.text:000049D8 ; _DWORD __thiscall NArchive::NXz::CDecoder::CDecoder(NArchive::NXz::CDecoder *__hidden this)
.text:000049D8                 public ??0CDecoder@NXz@NArchive@@QAE@XZ
.text:000049D8 ??0CDecoder@NXz@NArchive@@QAE@XZ proc near
.text:000049D8                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+34Bp
.text:000049D8
.text:000049D8 var_4           = dword ptr -4
.text:000049D8
.text:000049D8                 push    ebp
.text:000049D9                 mov     ebp, esp
.text:000049DB                 push    ecx
.text:000049DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000049E3                 mov     [ebp+var_4], ecx
.text:000049E6                 mov     ecx, [ebp+var_4] ; this
.text:000049E9                 call    ??0CStatInfo@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CStatInfo::CStatInfo(void)
.text:000049EE                 mov     ecx, [ebp+var_4]
.text:000049F1                 add     ecx, 38h ; '8'  ; this
.text:000049F4                 call    ??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(void)
.text:000049F9                 mov     eax, [ebp+var_4]
.text:000049FC                 mov     dword ptr [eax+6E0h], 0
.text:00004A06                 mov     eax, [ebp+var_4]
.text:00004A09                 add     esp, 4
.text:00004A0C                 cmp     ebp, esp
.text:00004A0E                 call    __RTC_CheckEsp
.text:00004A13                 mov     esp, ebp
.text:00004A15                 pop     ebp
.text:00004A16                 retn
.text:00004A16 ??0CDecoder@NXz@NArchive@@QAE@XZ endp
.text:00004A16
.text:00004A16 ; ---------------------------------------------------------------------------
.text:00004A17                 align 4
.text:00004A17 _text           ends
.text:00004A17
.text:00004A18 ; ===========================================================================
.text:00004A18
.text:00004A18 ; Segment type: Pure code
.text:00004A18 ; Segment permissions: Read/Execute
.text:00004A18 _text           segment para public 'CODE' use32
.text:00004A18                 assume cs:_text
.text:00004A18                 ;org 4A18h
.text:00004A18 ; COMDAT (pick any)
.text:00004A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A18
.text:00004A18 ; =============== S U B R O U T I N E =======================================
.text:00004A18
.text:00004A18 ; Attributes: bp-based frame
.text:00004A18
.text:00004A18 ; __int32 __thiscall NArchive::NXz::CHandler::Decode2(NArchive::NXz::CHandler *this, struct ISequentialInStream *, struct ISequentialOutStream *, struct NArchive::NXz::CDecoder *, struct ICompressProgressInfo *)
.text:00004A18                 public ?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z
.text:00004A18 ?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z proc near
.text:00004A18                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3A9p
.text:00004A18
.text:00004A18 var_8           = dword ptr -8
.text:00004A18 var_4           = dword ptr -4
.text:00004A18 arg_0           = dword ptr  8
.text:00004A18 arg_4           = dword ptr  0Ch
.text:00004A18 arg_8           = dword ptr  10h
.text:00004A18 arg_C           = dword ptr  14h
.text:00004A18
.text:00004A18                 push    ebp
.text:00004A19                 mov     ebp, esp
.text:00004A1B                 sub     esp, 8
.text:00004A1E                 push    esi
.text:00004A1F                 push    edi
.text:00004A20                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004A27                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A2E                 mov     [ebp+var_4], ecx
.text:00004A31                 mov     eax, [ebp+arg_C]
.text:00004A34                 push    eax             ; struct ICompressProgressInfo *
.text:00004A35                 mov     ecx, [ebp+arg_4]
.text:00004A38                 push    ecx             ; struct ISequentialOutStream *
.text:00004A39                 mov     edx, [ebp+arg_0]
.text:00004A3C                 push    edx             ; struct ISequentialInStream *
.text:00004A3D                 mov     ecx, [ebp+arg_8] ; this
.text:00004A40                 call    ?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)
.text:00004A45                 mov     [ebp+var_8], eax
.text:00004A48                 cmp     [ebp+var_8], 0
.text:00004A4C                 jz      short loc_4A53
.text:00004A4E                 mov     eax, [ebp+var_8]
.text:00004A51                 jmp     short loc_4A6F
.text:00004A53 ; ---------------------------------------------------------------------------
.text:00004A53
.text:00004A53 loc_4A53:                               ; CODE XREF: NArchive::NXz::CHandler::Decode2(ISequentialInStream *,ISequentialOutStream *,NArchive::NXz::CDecoder &,ICompressProgressInfo *)+34j
.text:00004A53                 mov     esi, [ebp+arg_8]
.text:00004A56                 mov     edi, [ebp+var_4]
.text:00004A59                 add     edi, 60h ; '`'
.text:00004A5C                 mov     ecx, 0Eh
.text:00004A61                 rep movsd
.text:00004A63                 mov     eax, [ebp+var_4]
.text:00004A66                 mov     byte ptr [eax+9Ah], 1
.text:00004A6D                 xor     eax, eax
.text:00004A6F
.text:00004A6F loc_4A6F:                               ; CODE XREF: NArchive::NXz::CHandler::Decode2(ISequentialInStream *,ISequentialOutStream *,NArchive::NXz::CDecoder &,ICompressProgressInfo *)+39j
.text:00004A6F                 pop     edi
.text:00004A70                 pop     esi
.text:00004A71                 add     esp, 8
.text:00004A74                 cmp     ebp, esp
.text:00004A76                 call    __RTC_CheckEsp
.text:00004A7B                 mov     esp, ebp
.text:00004A7D                 pop     ebp
.text:00004A7E                 retn    10h
.text:00004A7E ?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z endp
.text:00004A7E
.text:00004A7E ; ---------------------------------------------------------------------------
.text:00004A81                 align 4
.text:00004A81 _text           ends
.text:00004A81
.text:00004A84 ; ===========================================================================
.text:00004A84
.text:00004A84 ; Segment type: Pure code
.text:00004A84 ; Segment permissions: Read/Execute
.text:00004A84 _text           segment para public 'CODE' use32
.text:00004A84                 assume cs:_text
.text:00004A84                 ;org 4A84h
.text:00004A84 ; COMDAT (pick any)
.text:00004A84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004A84
.text:00004A84 ; =============== S U B R O U T I N E =======================================
.text:00004A84
.text:00004A84 ; Attributes: bp-based frame
.text:00004A84
.text:00004A84 ; _DWORD __thiscall NArchive::NXz::CDecoder::~CDecoder(NArchive::NXz::CDecoder *__hidden this)
.text:00004A84                 public ??1CDecoder@NXz@NArchive@@QAE@XZ
.text:00004A84 ??1CDecoder@NXz@NArchive@@QAE@XZ proc near
.text:00004A84                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+3DFp
.text:00004A84                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+466p ...
.text:00004A84
.text:00004A84 var_4           = dword ptr -4
.text:00004A84
.text:00004A84                 push    ebp
.text:00004A85                 mov     ebp, esp
.text:00004A87                 push    ecx
.text:00004A88                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004A8F                 mov     [ebp+var_4], ecx
.text:00004A92                 mov     ecx, [ebp+var_4]
.text:00004A95                 add     ecx, 38h ; '8'  ; this
.text:00004A98                 call    ??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(void)
.text:00004A9D                 add     esp, 4
.text:00004AA0                 cmp     ebp, esp
.text:00004AA2                 call    __RTC_CheckEsp
.text:00004AA7                 mov     esp, ebp
.text:00004AA9                 pop     ebp
.text:00004AAA                 retn
.text:00004AAA ??1CDecoder@NXz@NArchive@@QAE@XZ endp
.text:00004AAA
.text:00004AAA ; ---------------------------------------------------------------------------
.text:00004AAB                 align 4
.text:00004AAB _text           ends
.text:00004AAB
.text:00004AAC ; ===========================================================================
.text:00004AAC
.text:00004AAC ; Segment type: Pure code
.text:00004AAC ; Segment permissions: Read/Execute
.text:00004AAC _text           segment para public 'CODE' use32
.text:00004AAC                 assume cs:_text
.text:00004AAC                 ;org 4AACh
.text:00004AAC ; COMDAT (pick any)
.text:00004AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AAC
.text:00004AAC ; =============== S U B R O U T I N E =======================================
.text:00004AAC
.text:00004AAC ; Attributes: bp-based frame
.text:00004AAC
.text:00004AAC ; bool __stdcall IntToBool(int)
.text:00004AAC                 public ?IntToBool@@YG_NH@Z
.text:00004AAC ?IntToBool@@YG_NH@Z proc near           ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+DDp
.text:00004AAC                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+1A7p
.text:00004AAC
.text:00004AAC arg_0           = dword ptr  8
.text:00004AAC
.text:00004AAC                 push    ebp
.text:00004AAD                 mov     ebp, esp
.text:00004AAF                 xor     eax, eax
.text:00004AB1                 cmp     [ebp+arg_0], 0
.text:00004AB5                 setnz   al
.text:00004AB8                 pop     ebp
.text:00004AB9                 retn    4
.text:00004AB9 ?IntToBool@@YG_NH@Z endp
.text:00004AB9
.text:00004AB9 _text           ends
.text:00004AB9
.text:00004ABC ; ===========================================================================
.text:00004ABC
.text:00004ABC ; Segment type: Pure code
.text:00004ABC ; Segment permissions: Read/Execute
.text:00004ABC _text           segment para public 'CODE' use32
.text:00004ABC                 assume cs:_text
.text:00004ABC                 ;org 4ABCh
.text:00004ABC ; COMDAT (pick any)
.text:00004ABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004ABC
.text:00004ABC ; =============== S U B R O U T I N E =======================================
.text:00004ABC
.text:00004ABC ; Attributes: bp-based frame
.text:00004ABC
.text:00004ABC ; _DWORD __thiscall NWindows::NCOM::CPropVariant::CPropVariant(NWindows::NCOM::CPropVariant *this, unsigned __int64)
.text:00004ABC                 public ??0CPropVariant@NCOM@NWindows@@QAE@_K@Z
.text:00004ABC ??0CPropVariant@NCOM@NWindows@@QAE@_K@Z proc near
.text:00004ABC                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3D4p
.text:00004ABC
.text:00004ABC var_4           = dword ptr -4
.text:00004ABC arg_0           = qword ptr  8
.text:00004ABC
.text:00004ABC                 push    ebp
.text:00004ABD                 mov     ebp, esp
.text:00004ABF                 push    ecx
.text:00004AC0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004AC7                 mov     [ebp+var_4], ecx
.text:00004ACA                 mov     eax, 15h
.text:00004ACF                 mov     ecx, [ebp+var_4]
.text:00004AD2                 mov     [ecx], ax
.text:00004AD5                 xor     edx, edx
.text:00004AD7                 mov     eax, [ebp+var_4]
.text:00004ADA                 mov     [eax+2], dx
.text:00004ADE                 mov     ecx, [ebp+var_4]
.text:00004AE1                 mov     edx, dword ptr [ebp+arg_0]
.text:00004AE4                 mov     [ecx+8], edx
.text:00004AE7                 mov     eax, dword ptr [ebp+arg_0+4]
.text:00004AEA                 mov     [ecx+0Ch], eax
.text:00004AED                 mov     eax, [ebp+var_4]
.text:00004AF0                 mov     esp, ebp
.text:00004AF2                 pop     ebp
.text:00004AF3                 retn    8
.text:00004AF3 ??0CPropVariant@NCOM@NWindows@@QAE@_K@Z endp
.text:00004AF3
.text:00004AF3 ; ---------------------------------------------------------------------------
.text:00004AF6                 align 4
.text:00004AF6 _text           ends
.text:00004AF6
.text:00004AF8 ; ===========================================================================
.text:00004AF8
.text:00004AF8 ; Segment type: Pure code
.text:00004AF8 ; Segment permissions: Read/Execute
.text:00004AF8 _text           segment para public 'CODE' use32
.text:00004AF8                 assume cs:_text
.text:00004AF8                 ;org 4AF8h
.text:00004AF8 ; COMDAT (pick any)
.text:00004AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004AF8
.text:00004AF8 ; =============== S U B R O U T I N E =======================================
.text:00004AF8
.text:00004AF8 ; Attributes: bp-based frame
.text:00004AF8
.text:00004AF8 ; int __thiscall NArchive::CMultiMethodProps::GetLevel(NArchive::CMultiMethodProps *__hidden this)
.text:00004AF8                 public ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ
.text:00004AF8 ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ proc near
.text:00004AF8                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+302p
.text:00004AF8
.text:00004AF8 var_8           = dword ptr -8
.text:00004AF8 var_4           = dword ptr -4
.text:00004AF8
.text:00004AF8                 push    ebp
.text:00004AF9                 mov     ebp, esp
.text:00004AFB                 sub     esp, 8
.text:00004AFE                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B05                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B0C                 mov     [ebp+var_4], ecx
.text:00004B0F                 mov     eax, [ebp+var_4]
.text:00004B12                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:00004B15                 jnz     short loc_4B20
.text:00004B17                 mov     [ebp+var_8], 5
.text:00004B1E                 jmp     short loc_4B28
.text:00004B20 ; ---------------------------------------------------------------------------
.text:00004B20
.text:00004B20 loc_4B20:                               ; CODE XREF: NArchive::CMultiMethodProps::GetLevel(void)+1Dj
.text:00004B20                 mov     ecx, [ebp+var_4]
.text:00004B23                 mov     edx, [ecx]
.text:00004B25                 mov     [ebp+var_8], edx
.text:00004B28
.text:00004B28 loc_4B28:                               ; CODE XREF: NArchive::CMultiMethodProps::GetLevel(void)+26j
.text:00004B28                 mov     eax, [ebp+var_8]
.text:00004B2B                 mov     esp, ebp
.text:00004B2D                 pop     ebp
.text:00004B2E                 retn
.text:00004B2E ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ endp
.text:00004B2E
.text:00004B2E ; ---------------------------------------------------------------------------
.text:00004B2F                 align 10h
.text:00004B2F _text           ends
.text:00004B2F
.text:00004B30 ; ===========================================================================
.text:00004B30
.text:00004B30 ; Segment type: Pure code
.text:00004B30 ; Segment permissions: Read/Execute
.text:00004B30 _text           segment para public 'CODE' use32
.text:00004B30                 assume cs:_text
.text:00004B30                 ;org 4B30h
.text:00004B30 ; COMDAT (pick any)
.text:00004B30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B30
.text:00004B30 ; =============== S U B R O U T I N E =======================================
.text:00004B30
.text:00004B30 ; Attributes: bp-based frame
.text:00004B30
.text:00004B30 ; bool __thiscall AString::IsEqualTo_Ascii_NoCase(AString *this, const char *)
.text:00004B30                 public ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z
.text:00004B30 ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z proc near
.text:00004B30                                         ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+1B6p
.text:00004B30
.text:00004B30 var_4           = dword ptr -4
.text:00004B30 arg_0           = dword ptr  8
.text:00004B30
.text:00004B30                 push    ebp
.text:00004B31                 mov     ebp, esp
.text:00004B33                 push    ecx
.text:00004B34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B3B                 mov     [ebp+var_4], ecx
.text:00004B3E                 mov     eax, [ebp+arg_0]
.text:00004B41                 push    eax             ; char *
.text:00004B42                 mov     ecx, [ebp+var_4]
.text:00004B45                 mov     edx, [ecx]
.text:00004B47                 push    edx             ; char *
.text:00004B48                 call    ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii(char const *,char const *)
.text:00004B4D                 add     esp, 4
.text:00004B50                 cmp     ebp, esp
.text:00004B52                 call    __RTC_CheckEsp
.text:00004B57                 mov     esp, ebp
.text:00004B59                 pop     ebp
.text:00004B5A                 retn    4
.text:00004B5A ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z endp
.text:00004B5A
.text:00004B5A ; ---------------------------------------------------------------------------
.text:00004B5D                 align 10h
.text:00004B5D _text           ends
.text:00004B5D
.text:00004B60 ; ===========================================================================
.text:00004B60
.text:00004B60 ; Segment type: Pure code
.text:00004B60 ; Segment permissions: Read/Execute
.text:00004B60 _text           segment para public 'CODE' use32
.text:00004B60                 assume cs:_text
.text:00004B60                 ;org 4B60h
.text:00004B60 ; COMDAT (pick any)
.text:00004B60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004B60
.text:00004B60 ; =============== S U B R O U T I N E =======================================
.text:00004B60
.text:00004B60 ; Attributes: bp-based frame
.text:00004B60
.text:00004B60 ; unsigned int __thiscall NArchive::CMultiMethodProps::GetNumEmptyMethods(NArchive::CMultiMethodProps *__hidden this)
.text:00004B60                 public ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ
.text:00004B60 ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ proc near
.text:00004B60                                         ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+127p
.text:00004B60
.text:00004B60 var_8           = dword ptr -8
.text:00004B60 var_4           = dword ptr -4
.text:00004B60
.text:00004B60                 push    ebp
.text:00004B61                 mov     ebp, esp
.text:00004B63                 sub     esp, 8
.text:00004B66                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004B6D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004B74                 mov     [ebp+var_4], ecx
.text:00004B77                 mov     [ebp+var_8], 0
.text:00004B7E                 jmp     short loc_4B89
.text:00004B80 ; ---------------------------------------------------------------------------
.text:00004B80
.text:00004B80 loc_4B80:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void):loc_4BB8j
.text:00004B80                 mov     eax, [ebp+var_8]
.text:00004B83                 add     eax, 1
.text:00004B86                 mov     [ebp+var_8], eax
.text:00004B89
.text:00004B89 loc_4B89:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+1Ej
.text:00004B89                 mov     ecx, [ebp+var_4]
.text:00004B8C                 add     ecx, 14h
.text:00004B8F                 call    ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size(void)
.text:00004B94                 cmp     [ebp+var_8], eax
.text:00004B97                 jnb     short loc_4BBA
.text:00004B99                 mov     ecx, [ebp+var_8]
.text:00004B9C                 push    ecx
.text:00004B9D                 mov     ecx, [ebp+var_4]
.text:00004BA0                 add     ecx, 14h
.text:00004BA3                 call    ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[](uint)
.text:00004BA8                 mov     ecx, eax        ; this
.text:00004BAA                 call    ?IsEmpty@COneMethodInfo@@QBE_NXZ ; COneMethodInfo::IsEmpty(void)
.text:00004BAF                 movzx   edx, al
.text:00004BB2                 test    edx, edx
.text:00004BB4                 jnz     short loc_4BB8
.text:00004BB6                 jmp     short loc_4BBA
.text:00004BB8 ; ---------------------------------------------------------------------------
.text:00004BB8
.text:00004BB8 loc_4BB8:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+54j
.text:00004BB8                 jmp     short loc_4B80
.text:00004BBA ; ---------------------------------------------------------------------------
.text:00004BBA
.text:00004BBA loc_4BBA:                               ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+37j
.text:00004BBA                                         ; NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+56j
.text:00004BBA                 mov     eax, [ebp+var_8]
.text:00004BBD                 add     esp, 8
.text:00004BC0                 cmp     ebp, esp
.text:00004BC2                 call    __RTC_CheckEsp
.text:00004BC7                 mov     esp, ebp
.text:00004BC9                 pop     ebp
.text:00004BCA                 retn
.text:00004BCA ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ endp
.text:00004BCA
.text:00004BCA ; ---------------------------------------------------------------------------
.text:00004BCB                 align 4
.text:00004BCB _text           ends
.text:00004BCB
.text:00004BCC ; ===========================================================================
.text:00004BCC
.text:00004BCC ; Segment type: Pure code
.text:00004BCC ; Segment permissions: Read/Execute
.text:00004BCC _text           segment para public 'CODE' use32
.text:00004BCC                 assume cs:_text
.text:00004BCC                 ;org 4BCCh
.text:00004BCC ; COMDAT (pick any)
.text:00004BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004BCC
.text:00004BCC ; =============== S U B R O U T I N E =======================================
.text:00004BCC
.text:00004BCC ; Attributes: bp-based frame
.text:00004BCC
.text:00004BCC ; bool __thiscall COneMethodInfo::IsEmpty(COneMethodInfo *__hidden this)
.text:00004BCC                 public ?IsEmpty@COneMethodInfo@@QBE_NXZ
.text:00004BCC ?IsEmpty@COneMethodInfo@@QBE_NXZ proc near
.text:00004BCC                                         ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+4Ap
.text:00004BCC
.text:00004BCC var_8           = dword ptr -8
.text:00004BCC var_4           = dword ptr -4
.text:00004BCC
.text:00004BCC                 push    ebp
.text:00004BCD                 mov     ebp, esp
.text:00004BCF                 sub     esp, 8
.text:00004BD2                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00004BD9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004BE0                 mov     [ebp+var_4], ecx
.text:00004BE3                 mov     ecx, [ebp+var_4]
.text:00004BE6                 add     ecx, 0Ch        ; this
.text:00004BE9                 call    ?IsEmpty@AString@@QBE_NXZ ; AString::IsEmpty(void)
.text:00004BEE                 movzx   eax, al
.text:00004BF1                 test    eax, eax
.text:00004BF3                 jz      short loc_4C0D
.text:00004BF5                 mov     ecx, [ebp+var_4]
.text:00004BF8                 call    ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ; CObjectVector<CProp>::IsEmpty(void)
.text:00004BFD                 movzx   ecx, al
.text:00004C00                 test    ecx, ecx
.text:00004C02                 jz      short loc_4C0D
.text:00004C04                 mov     [ebp+var_8], 1
.text:00004C0B                 jmp     short loc_4C14
.text:00004C0D ; ---------------------------------------------------------------------------
.text:00004C0D
.text:00004C0D loc_4C0D:                               ; CODE XREF: COneMethodInfo::IsEmpty(void)+27j
.text:00004C0D                                         ; COneMethodInfo::IsEmpty(void)+36j
.text:00004C0D                 mov     [ebp+var_8], 0
.text:00004C14
.text:00004C14 loc_4C14:                               ; CODE XREF: COneMethodInfo::IsEmpty(void)+3Fj
.text:00004C14                 mov     al, byte ptr [ebp+var_8]
.text:00004C17                 add     esp, 8
.text:00004C1A                 cmp     ebp, esp
.text:00004C1C                 call    __RTC_CheckEsp
.text:00004C21                 mov     esp, ebp
.text:00004C23                 pop     ebp
.text:00004C24                 retn
.text:00004C24 ?IsEmpty@COneMethodInfo@@QBE_NXZ endp
.text:00004C24
.text:00004C24 ; ---------------------------------------------------------------------------
.text:00004C25                 align 4
.text:00004C25 _text           ends
.text:00004C25
.text:00004C28 ; ===========================================================================
.text:00004C28
.text:00004C28 ; Segment type: Pure code
.text:00004C28 ; Segment permissions: Read/Execute
.text:00004C28 _text           segment para public 'CODE' use32
.text:00004C28                 assume cs:_text
.text:00004C28                 ;org 4C28h
.text:00004C28 ; COMDAT (pick any)
.text:00004C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C28
.text:00004C28 ; =============== S U B R O U T I N E =======================================
.text:00004C28
.text:00004C28 ; Attributes: bp-based frame
.text:00004C28
.text:00004C28 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::CMyComPtr<struct ICompressProgressInfo>(struct ICompressProgressInfo *)
.text:00004C28                 public ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
.text:00004C28 ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z proc near
.text:00004C28                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+23Ep
.text:00004C28                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+625p ...
.text:00004C28
.text:00004C28 var_4           = dword ptr -4
.text:00004C28 arg_0           = dword ptr  8
.text:00004C28
.text:00004C28                 push    ebp
.text:00004C29                 mov     ebp, esp
.text:00004C2B                 push    ecx
.text:00004C2C                 push    esi
.text:00004C2D                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C34                 mov     [ebp+var_4], ecx
.text:00004C37                 mov     eax, [ebp+var_4]
.text:00004C3A                 mov     ecx, [ebp+arg_0]
.text:00004C3D                 mov     [eax], ecx
.text:00004C3F                 cmp     [ebp+arg_0], 0
.text:00004C43                 jz      short loc_4C5C
.text:00004C45                 mov     edx, [ebp+arg_0]
.text:00004C48                 mov     eax, [edx]
.text:00004C4A                 mov     esi, esp
.text:00004C4C                 mov     ecx, [ebp+arg_0]
.text:00004C4F                 push    ecx
.text:00004C50                 mov     edx, [eax+4]
.text:00004C53                 call    edx
.text:00004C55                 cmp     esi, esp
.text:00004C57                 call    __RTC_CheckEsp
.text:00004C5C
.text:00004C5C loc_4C5C:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>(ICompressProgressInfo *)+1Bj
.text:00004C5C                 mov     eax, [ebp+var_4]
.text:00004C5F                 pop     esi
.text:00004C60                 add     esp, 4
.text:00004C63                 cmp     ebp, esp
.text:00004C65                 call    __RTC_CheckEsp
.text:00004C6A                 mov     esp, ebp
.text:00004C6C                 pop     ebp
.text:00004C6D                 retn    4
.text:00004C6D ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z endp
.text:00004C6D
.text:00004C6D _text           ends
.text:00004C6D
.text:00004C70 ; ===========================================================================
.text:00004C70
.text:00004C70 ; Segment type: Pure code
.text:00004C70 ; Segment permissions: Read/Execute
.text:00004C70 _text           segment para public 'CODE' use32
.text:00004C70                 assume cs:_text
.text:00004C70                 ;org 4C70h
.text:00004C70 ; COMDAT (pick any)
.text:00004C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004C70
.text:00004C70 ; =============== S U B R O U T I N E =======================================
.text:00004C70
.text:00004C70 ; Attributes: bp-based frame
.text:00004C70
.text:00004C70 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::~CMyComPtr<struct ICompressProgressInfo>(void)
.text:00004C70                 public ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
.text:00004C70 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
.text:00004C70                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+297p
.text:00004C70                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+31Dp ...
.text:00004C70
.text:00004C70 var_4           = dword ptr -4
.text:00004C70
.text:00004C70                 push    ebp
.text:00004C71                 mov     ebp, esp
.text:00004C73                 push    ecx
.text:00004C74                 push    esi
.text:00004C75                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004C7C                 mov     [ebp+var_4], ecx
.text:00004C7F                 mov     eax, [ebp+var_4]
.text:00004C82                 cmp     dword ptr [eax], 0
.text:00004C85                 jz      short loc_4CA2
.text:00004C87                 mov     ecx, [ebp+var_4]
.text:00004C8A                 mov     edx, [ecx]
.text:00004C8C                 mov     eax, [ebp+var_4]
.text:00004C8F                 mov     ecx, [eax]
.text:00004C91                 mov     edx, [edx]
.text:00004C93                 mov     esi, esp
.text:00004C95                 push    ecx
.text:00004C96                 mov     eax, [edx+8]
.text:00004C99                 call    eax
.text:00004C9B                 cmp     esi, esp
.text:00004C9D                 call    __RTC_CheckEsp
.text:00004CA2
.text:00004CA2 loc_4CA2:                               ; CODE XREF: CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>(void)+15j
.text:00004CA2                 pop     esi
.text:00004CA3                 add     esp, 4
.text:00004CA6                 cmp     ebp, esp
.text:00004CA8                 call    __RTC_CheckEsp
.text:00004CAD                 mov     esp, ebp
.text:00004CAF                 pop     ebp
.text:00004CB0                 retn
.text:00004CB0 ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ endp
.text:00004CB0
.text:00004CB0 ; ---------------------------------------------------------------------------
.text:00004CB1                 align 4
.text:00004CB1 _text           ends
.text:00004CB1
.text:00004CB4 ; ===========================================================================
.text:00004CB4
.text:00004CB4 ; Segment type: Pure code
.text:00004CB4 ; Segment permissions: Read/Execute
.text:00004CB4 _text           segment para public 'CODE' use32
.text:00004CB4                 assume cs:_text
.text:00004CB4                 ;org 4CB4h
.text:00004CB4 ; COMDAT (pick any)
.text:00004CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CB4
.text:00004CB4 ; =============== S U B R O U T I N E =======================================
.text:00004CB4
.text:00004CB4 ; Attributes: bp-based frame
.text:00004CB4
.text:00004CB4 ; public: __thiscall CMyComPtr<struct ICompressProgressInfo>::operator struct ICompressProgressInfo *(void)const
.text:00004CB4                 public ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
.text:00004CB4 ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
.text:00004CB4                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+35Dp
.text:00004CB4                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+645p ...
.text:00004CB4
.text:00004CB4 var_4           = dword ptr -4
.text:00004CB4
.text:00004CB4                 push    ebp
.text:00004CB5                 mov     ebp, esp
.text:00004CB7                 push    ecx
.text:00004CB8                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CBF                 mov     [ebp+var_4], ecx
.text:00004CC2                 mov     eax, [ebp+var_4]
.text:00004CC5                 mov     eax, [eax]
.text:00004CC7                 mov     esp, ebp
.text:00004CC9                 pop     ebp
.text:00004CCA                 retn
.text:00004CCA ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ endp
.text:00004CCA
.text:00004CCA ; ---------------------------------------------------------------------------
.text:00004CCB                 align 4
.text:00004CCB _text           ends
.text:00004CCB
.text:00004CCC ; ===========================================================================
.text:00004CCC
.text:00004CCC ; Segment type: Pure code
.text:00004CCC ; Segment permissions: Read/Execute
.text:00004CCC _text           segment para public 'CODE' use32
.text:00004CCC                 assume cs:_text
.text:00004CCC                 ;org 4CCCh
.text:00004CCC ; COMDAT (pick any)
.text:00004CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CCC
.text:00004CCC ; =============== S U B R O U T I N E =======================================
.text:00004CCC
.text:00004CCC ; Attributes: bp-based frame
.text:00004CCC
.text:00004CCC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::CMyComPtr<struct ISequentialInStream>(void)
.text:00004CCC                 public ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00004CCC ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00004CCC                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+C0p
.text:00004CCC                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+31Fp
.text:00004CCC
.text:00004CCC var_4           = dword ptr -4
.text:00004CCC
.text:00004CCC                 push    ebp
.text:00004CCD                 mov     ebp, esp
.text:00004CCF                 push    ecx
.text:00004CD0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CD7                 mov     [ebp+var_4], ecx
.text:00004CDA                 mov     eax, [ebp+var_4]
.text:00004CDD                 mov     dword ptr [eax], 0
.text:00004CE3                 mov     eax, [ebp+var_4]
.text:00004CE6                 mov     esp, ebp
.text:00004CE8                 pop     ebp
.text:00004CE9                 retn
.text:00004CE9 ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00004CE9
.text:00004CE9 ; ---------------------------------------------------------------------------
.text:00004CEA                 align 4
.text:00004CEA _text           ends
.text:00004CEA
.text:00004CEC ; ===========================================================================
.text:00004CEC
.text:00004CEC ; Segment type: Pure code
.text:00004CEC ; Segment permissions: Read/Execute
.text:00004CEC _text           segment para public 'CODE' use32
.text:00004CEC                 assume cs:_text
.text:00004CEC                 ;org 4CECh
.text:00004CEC ; COMDAT (pick any)
.text:00004CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004CEC
.text:00004CEC ; =============== S U B R O U T I N E =======================================
.text:00004CEC
.text:00004CEC ; Attributes: bp-based frame
.text:00004CEC
.text:00004CEC ; public: __thiscall CMyComPtr<struct ISequentialInStream>::~CMyComPtr<struct ISequentialInStream>(void)
.text:00004CEC                 public ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
.text:00004CEC ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
.text:00004CEC                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+390p
.text:00004CEC                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+438p ...
.text:00004CEC
.text:00004CEC var_4           = dword ptr -4
.text:00004CEC
.text:00004CEC                 push    ebp
.text:00004CED                 mov     ebp, esp
.text:00004CEF                 push    ecx
.text:00004CF0                 push    esi
.text:00004CF1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004CF8                 mov     [ebp+var_4], ecx
.text:00004CFB                 mov     eax, [ebp+var_4]
.text:00004CFE                 cmp     dword ptr [eax], 0
.text:00004D01                 jz      short loc_4D1E
.text:00004D03                 mov     ecx, [ebp+var_4]
.text:00004D06                 mov     edx, [ecx]
.text:00004D08                 mov     eax, [ebp+var_4]
.text:00004D0B                 mov     ecx, [eax]
.text:00004D0D                 mov     edx, [edx]
.text:00004D0F                 mov     esi, esp
.text:00004D11                 push    ecx
.text:00004D12                 mov     eax, [edx+8]
.text:00004D15                 call    eax
.text:00004D17                 cmp     esi, esp
.text:00004D19                 call    __RTC_CheckEsp
.text:00004D1E
.text:00004D1E loc_4D1E:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>(void)+15j
.text:00004D1E                 pop     esi
.text:00004D1F                 add     esp, 4
.text:00004D22                 cmp     ebp, esp
.text:00004D24                 call    __RTC_CheckEsp
.text:00004D29                 mov     esp, ebp
.text:00004D2B                 pop     ebp
.text:00004D2C                 retn
.text:00004D2C ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ endp
.text:00004D2C
.text:00004D2C ; ---------------------------------------------------------------------------
.text:00004D2D                 align 10h
.text:00004D2D _text           ends
.text:00004D2D
.text:00004D30 ; ===========================================================================
.text:00004D30
.text:00004D30 ; Segment type: Pure code
.text:00004D30 ; Segment permissions: Read/Execute
.text:00004D30 _text           segment para public 'CODE' use32
.text:00004D30                 assume cs:_text
.text:00004D30                 ;org 4D30h
.text:00004D30 ; COMDAT (pick any)
.text:00004D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D30
.text:00004D30 ; =============== S U B R O U T I N E =======================================
.text:00004D30
.text:00004D30 ; Attributes: bp-based frame
.text:00004D30
.text:00004D30 ; public: void __thiscall CMyComPtr<struct ISequentialInStream>::Release(void)
.text:00004D30                 public ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
.text:00004D30 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ proc near
.text:00004D30                                         ; CODE XREF: NArchive::NXz::CHandler::Close(void)+51p
.text:00004D30
.text:00004D30 var_4           = dword ptr -4
.text:00004D30
.text:00004D30                 push    ebp
.text:00004D31                 mov     ebp, esp
.text:00004D33                 push    ecx
.text:00004D34                 push    esi
.text:00004D35                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D3C                 mov     [ebp+var_4], ecx
.text:00004D3F                 mov     eax, [ebp+var_4]
.text:00004D42                 cmp     dword ptr [eax], 0
.text:00004D45                 jz      short loc_4D6B
.text:00004D47                 mov     ecx, [ebp+var_4]
.text:00004D4A                 mov     edx, [ecx]
.text:00004D4C                 mov     eax, [ebp+var_4]
.text:00004D4F                 mov     ecx, [eax]
.text:00004D51                 mov     edx, [edx]
.text:00004D53                 mov     esi, esp
.text:00004D55                 push    ecx
.text:00004D56                 mov     eax, [edx+8]
.text:00004D59                 call    eax
.text:00004D5B                 cmp     esi, esp
.text:00004D5D                 call    __RTC_CheckEsp
.text:00004D62                 mov     ecx, [ebp+var_4]
.text:00004D65                 mov     dword ptr [ecx], 0
.text:00004D6B
.text:00004D6B loc_4D6B:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::Release(void)+15j
.text:00004D6B                 pop     esi
.text:00004D6C                 add     esp, 4
.text:00004D6F                 cmp     ebp, esp
.text:00004D71                 call    __RTC_CheckEsp
.text:00004D76                 mov     esp, ebp
.text:00004D78                 pop     ebp
.text:00004D79                 retn
.text:00004D79 ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ endp
.text:00004D79
.text:00004D79 ; ---------------------------------------------------------------------------
.text:00004D7A                 align 4
.text:00004D7A _text           ends
.text:00004D7A
.text:00004D7C ; ===========================================================================
.text:00004D7C
.text:00004D7C ; Segment type: Pure code
.text:00004D7C ; Segment permissions: Read/Execute
.text:00004D7C _text           segment para public 'CODE' use32
.text:00004D7C                 assume cs:_text
.text:00004D7C                 ;org 4D7Ch
.text:00004D7C ; COMDAT (pick any)
.text:00004D7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D7C
.text:00004D7C ; =============== S U B R O U T I N E =======================================
.text:00004D7C
.text:00004D7C ; Attributes: bp-based frame
.text:00004D7C
.text:00004D7C ; public: __thiscall CMyComPtr<struct ISequentialInStream>::operator struct ISequentialInStream *(void)const
.text:00004D7C                 public ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00004D7C ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00004D7C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+37Fp
.text:00004D7C                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3A6p
.text:00004D7C
.text:00004D7C var_4           = dword ptr -4
.text:00004D7C
.text:00004D7C                 push    ebp
.text:00004D7D                 mov     ebp, esp
.text:00004D7F                 push    ecx
.text:00004D80                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D87                 mov     [ebp+var_4], ecx
.text:00004D8A                 mov     eax, [ebp+var_4]
.text:00004D8D                 mov     eax, [eax]
.text:00004D8F                 mov     esp, ebp
.text:00004D91                 pop     ebp
.text:00004D92                 retn
.text:00004D92 ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00004D92
.text:00004D92 ; ---------------------------------------------------------------------------
.text:00004D93                 align 4
.text:00004D93 _text           ends
.text:00004D93
.text:00004D94 ; ===========================================================================
.text:00004D94
.text:00004D94 ; Segment type: Pure code
.text:00004D94 ; Segment permissions: Read/Execute
.text:00004D94 _text           segment para public 'CODE' use32
.text:00004D94                 assume cs:_text
.text:00004D94                 ;org 4D94h
.text:00004D94 ; COMDAT (pick any)
.text:00004D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004D94
.text:00004D94 ; =============== S U B R O U T I N E =======================================
.text:00004D94
.text:00004D94 ; Attributes: bp-based frame
.text:00004D94
.text:00004D94 ; public: struct ISequentialInStream * * __thiscall CMyComPtr<struct ISequentialInStream>::operator&(void)
.text:00004D94                 public ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
.text:00004D94 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ proc near
.text:00004D94                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+334p
.text:00004D94
.text:00004D94 var_4           = dword ptr -4
.text:00004D94
.text:00004D94                 push    ebp
.text:00004D95                 mov     ebp, esp
.text:00004D97                 push    ecx
.text:00004D98                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004D9F                 mov     [ebp+var_4], ecx
.text:00004DA2                 mov     eax, [ebp+var_4]
.text:00004DA5                 mov     esp, ebp
.text:00004DA7                 pop     ebp
.text:00004DA8                 retn
.text:00004DA8 ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ endp
.text:00004DA8
.text:00004DA8 ; ---------------------------------------------------------------------------
.text:00004DA9                 align 4
.text:00004DA9 _text           ends
.text:00004DA9
.text:00004DAC ; ===========================================================================
.text:00004DAC
.text:00004DAC ; Segment type: Pure code
.text:00004DAC ; Segment permissions: Read/Execute
.text:00004DAC _text           segment para public 'CODE' use32
.text:00004DAC                 assume cs:_text
.text:00004DAC                 ;org 4DACh
.text:00004DAC ; COMDAT (pick any)
.text:00004DAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DAC
.text:00004DAC ; =============== S U B R O U T I N E =======================================
.text:00004DAC
.text:00004DAC ; Attributes: bp-based frame
.text:00004DAC
.text:00004DAC ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator->(void)const
.text:00004DAC                 public ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
.text:00004DAC ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
.text:00004DAC                                         ; CODE XREF: NArchive::NXz::CSeekToSeqStream::Read(void *,uint,uint *)+12p
.text:00004DAC
.text:00004DAC var_4           = dword ptr -4
.text:00004DAC
.text:00004DAC                 push    ebp
.text:00004DAD                 mov     ebp, esp
.text:00004DAF                 push    ecx
.text:00004DB0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DB7                 mov     [ebp+var_4], ecx
.text:00004DBA                 mov     eax, [ebp+var_4]
.text:00004DBD                 mov     eax, [eax]
.text:00004DBF                 mov     esp, ebp
.text:00004DC1                 pop     ebp
.text:00004DC2                 retn
.text:00004DC2 ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ endp
.text:00004DC2
.text:00004DC2 ; ---------------------------------------------------------------------------
.text:00004DC3                 align 4
.text:00004DC3 _text           ends
.text:00004DC3
.text:00004DC4 ; ===========================================================================
.text:00004DC4
.text:00004DC4 ; Segment type: Pure code
.text:00004DC4 ; Segment permissions: Read/Execute
.text:00004DC4 _text           segment para public 'CODE' use32
.text:00004DC4                 assume cs:_text
.text:00004DC4                 ;org 4DC4h
.text:00004DC4 ; COMDAT (pick any)
.text:00004DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004DC4
.text:00004DC4 ; =============== S U B R O U T I N E =======================================
.text:00004DC4
.text:00004DC4 ; Attributes: bp-based frame
.text:00004DC4
.text:00004DC4 ; public: struct ISequentialInStream * __thiscall CMyComPtr<struct ISequentialInStream>::operator=(struct ISequentialInStream *)
.text:00004DC4                 public ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
.text:00004DC4 ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z proc near
.text:00004DC4                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3EBp
.text:00004DC4                                         ; NArchive::NXz::CHandler::OpenSeq(ISequentialInStream *)+2Cp
.text:00004DC4
.text:00004DC4 var_4           = dword ptr -4
.text:00004DC4 arg_0           = dword ptr  8
.text:00004DC4
.text:00004DC4                 push    ebp
.text:00004DC5                 mov     ebp, esp
.text:00004DC7                 push    ecx
.text:00004DC8                 push    esi
.text:00004DC9                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004DD0                 mov     [ebp+var_4], ecx
.text:00004DD3                 cmp     [ebp+arg_0], 0
.text:00004DD7                 jz      short loc_4DF0
.text:00004DD9                 mov     eax, [ebp+arg_0]
.text:00004DDC                 mov     ecx, [eax]
.text:00004DDE                 mov     esi, esp
.text:00004DE0                 mov     edx, [ebp+arg_0]
.text:00004DE3                 push    edx
.text:00004DE4                 mov     eax, [ecx+4]
.text:00004DE7                 call    eax
.text:00004DE9                 cmp     esi, esp
.text:00004DEB                 call    __RTC_CheckEsp
.text:00004DF0
.text:00004DF0 loc_4DF0:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+13j
.text:00004DF0                 mov     ecx, [ebp+var_4]
.text:00004DF3                 cmp     dword ptr [ecx], 0
.text:00004DF6                 jz      short loc_4E13
.text:00004DF8                 mov     edx, [ebp+var_4]
.text:00004DFB                 mov     eax, [edx]
.text:00004DFD                 mov     ecx, [ebp+var_4]
.text:00004E00                 mov     edx, [ecx]
.text:00004E02                 mov     eax, [eax]
.text:00004E04                 mov     esi, esp
.text:00004E06                 push    edx
.text:00004E07                 mov     ecx, [eax+8]
.text:00004E0A                 call    ecx
.text:00004E0C                 cmp     esi, esp
.text:00004E0E                 call    __RTC_CheckEsp
.text:00004E13
.text:00004E13 loc_4E13:                               ; CODE XREF: CMyComPtr<ISequentialInStream>::operator=(ISequentialInStream *)+32j
.text:00004E13                 mov     edx, [ebp+var_4]
.text:00004E16                 mov     eax, [ebp+arg_0]
.text:00004E19                 mov     [edx], eax
.text:00004E1B                 mov     eax, [ebp+arg_0]
.text:00004E1E                 pop     esi
.text:00004E1F                 add     esp, 4
.text:00004E22                 cmp     ebp, esp
.text:00004E24                 call    __RTC_CheckEsp
.text:00004E29                 mov     esp, ebp
.text:00004E2B                 pop     ebp
.text:00004E2C                 retn    4
.text:00004E2C ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z endp
.text:00004E2C
.text:00004E2C ; ---------------------------------------------------------------------------
.text:00004E2F                 align 10h
.text:00004E2F _text           ends
.text:00004E2F
.text:00004E30 ; ===========================================================================
.text:00004E30
.text:00004E30 ; Segment type: Pure code
.text:00004E30 ; Segment permissions: Read/Execute
.text:00004E30 _text           segment para public 'CODE' use32
.text:00004E30                 assume cs:_text
.text:00004E30                 ;org 4E30h
.text:00004E30 ; COMDAT (pick any)
.text:00004E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E30
.text:00004E30 ; =============== S U B R O U T I N E =======================================
.text:00004E30
.text:00004E30 ; Attributes: bp-based frame
.text:00004E30
.text:00004E30 ; public: unsigned int __thiscall CObjectVector<struct CProp>::Size(void)const
.text:00004E30                 public ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
.text:00004E30 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
.text:00004E30                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4F3p
.text:00004E30                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+774p
.text:00004E30
.text:00004E30 var_4           = dword ptr -4
.text:00004E30
.text:00004E30                 push    ebp
.text:00004E31                 mov     ebp, esp
.text:00004E33                 push    ecx
.text:00004E34                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E3B                 mov     [ebp+var_4], ecx
.text:00004E3E                 mov     ecx, [ebp+var_4]
.text:00004E41                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004E46                 add     esp, 4
.text:00004E49                 cmp     ebp, esp
.text:00004E4B                 call    __RTC_CheckEsp
.text:00004E50                 mov     esp, ebp
.text:00004E52                 pop     ebp
.text:00004E53                 retn
.text:00004E53 ?Size@?$CObjectVector@UCProp@@@@QBEIXZ endp
.text:00004E53
.text:00004E53 _text           ends
.text:00004E53
.text:00004E54 ; ===========================================================================
.text:00004E54
.text:00004E54 ; Segment type: Pure code
.text:00004E54 ; Segment permissions: Read/Execute
.text:00004E54 _text           segment para public 'CODE' use32
.text:00004E54                 assume cs:_text
.text:00004E54                 ;org 4E54h
.text:00004E54 ; COMDAT (pick any)
.text:00004E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E54
.text:00004E54 ; =============== S U B R O U T I N E =======================================
.text:00004E54
.text:00004E54 ; Attributes: bp-based frame
.text:00004E54
.text:00004E54 ; public: bool __thiscall CObjectVector<struct CProp>::IsEmpty(void)const
.text:00004E54                 public ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ
.text:00004E54 ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ proc near
.text:00004E54                                         ; CODE XREF: COneMethodInfo::IsEmpty(void)+2Cp
.text:00004E54
.text:00004E54 var_4           = dword ptr -4
.text:00004E54
.text:00004E54                 push    ebp
.text:00004E55                 mov     ebp, esp
.text:00004E57                 push    ecx
.text:00004E58                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E5F                 mov     [ebp+var_4], ecx
.text:00004E62                 mov     ecx, [ebp+var_4]
.text:00004E65                 call    ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ; CRecordVector<void *>::IsEmpty(void)
.text:00004E6A                 add     esp, 4
.text:00004E6D                 cmp     ebp, esp
.text:00004E6F                 call    __RTC_CheckEsp
.text:00004E74                 mov     esp, ebp
.text:00004E76                 pop     ebp
.text:00004E77                 retn
.text:00004E77 ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ endp
.text:00004E77
.text:00004E77 _text           ends
.text:00004E77
.text:00004E78 ; ===========================================================================
.text:00004E78
.text:00004E78 ; Segment type: Pure code
.text:00004E78 ; Segment permissions: Read/Execute
.text:00004E78 _text           segment para public 'CODE' use32
.text:00004E78                 assume cs:_text
.text:00004E78                 ;org 4E78h
.text:00004E78 ; COMDAT (pick any)
.text:00004E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004E78
.text:00004E78 ; =============== S U B R O U T I N E =======================================
.text:00004E78
.text:00004E78 ; Attributes: bp-based frame
.text:00004E78
.text:00004E78 ; public: __thiscall CObjectVector<struct CProp>::CObjectVector<struct CProp>(void)
.text:00004E78                 public ??0?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004E78 ??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00004E78                                         ; CODE XREF: CProps::CProps(void)+11p
.text:00004E78
.text:00004E78 var_4           = dword ptr -4
.text:00004E78
.text:00004E78                 push    ebp
.text:00004E79                 mov     ebp, esp
.text:00004E7B                 push    ecx
.text:00004E7C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004E83                 mov     [ebp+var_4], ecx
.text:00004E86                 mov     ecx, [ebp+var_4]
.text:00004E89                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00004E8E                 mov     eax, [ebp+var_4]
.text:00004E91                 add     esp, 4
.text:00004E94                 cmp     ebp, esp
.text:00004E96                 call    __RTC_CheckEsp
.text:00004E9B                 mov     esp, ebp
.text:00004E9D                 pop     ebp
.text:00004E9E                 retn
.text:00004E9E ??0?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004E9E
.text:00004E9E ; ---------------------------------------------------------------------------
.text:00004E9F                 align 10h
.text:00004E9F _text           ends
.text:00004E9F
.text:00004EA0 ; ===========================================================================
.text:00004EA0
.text:00004EA0 ; Segment type: Pure code
.text:00004EA0 ; Segment permissions: Read/Execute
.text:00004EA0 _text           segment para public 'CODE' use32
.text:00004EA0                 assume cs:_text
.text:00004EA0                 ;org 4EA0h
.text:00004EA0 ; COMDAT (pick any)
.text:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004EA0
.text:00004EA0 ; =============== S U B R O U T I N E =======================================
.text:00004EA0
.text:00004EA0 ; Attributes: bp-based frame
.text:00004EA0
.text:00004EA0 ; public: struct CProp & __thiscall CObjectVector<struct CProp>::operator[](unsigned int)
.text:00004EA0                 public ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z
.text:00004EA0 ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z proc near
.text:00004EA0                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+51Dp
.text:00004EA0                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+79Ep
.text:00004EA0
.text:00004EA0 var_4           = dword ptr -4
.text:00004EA0 arg_0           = dword ptr  8
.text:00004EA0
.text:00004EA0                 push    ebp
.text:00004EA1                 mov     ebp, esp
.text:00004EA3                 push    ecx
.text:00004EA4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004EAB                 mov     [ebp+var_4], ecx
.text:00004EAE                 mov     eax, [ebp+arg_0]
.text:00004EB1                 push    eax
.text:00004EB2                 mov     ecx, [ebp+var_4]
.text:00004EB5                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004EBA                 mov     eax, [eax]
.text:00004EBC                 add     esp, 4
.text:00004EBF                 cmp     ebp, esp
.text:00004EC1                 call    __RTC_CheckEsp
.text:00004EC6                 mov     esp, ebp
.text:00004EC8                 pop     ebp
.text:00004EC9                 retn    4
.text:00004EC9 ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z endp
.text:00004EC9
.text:00004EC9 _text           ends
.text:00004EC9
.text:00004ECC ; ===========================================================================
.text:00004ECC
.text:00004ECC ; Segment type: Pure code
.text:00004ECC ; Segment permissions: Read/Execute
.text:00004ECC _text           segment para public 'CODE' use32
.text:00004ECC                 assume cs:_text
.text:00004ECC                 ;org 4ECCh
.text:00004ECC ; COMDAT (pick any)
.text:00004ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004ECC
.text:00004ECC ; =============== S U B R O U T I N E =======================================
.text:00004ECC
.text:00004ECC ; Attributes: bp-based frame
.text:00004ECC
.text:00004ECC ; public: __thiscall CObjectVector<struct CProp>::~CObjectVector<struct CProp>(void)
.text:00004ECC                 public ??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004ECC ??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text:00004ECC                                         ; CODE XREF: CProps::~CProps(void)+11p
.text:00004ECC
.text:00004ECC var_20          = dword ptr -20h
.text:00004ECC var_1C          = dword ptr -1Ch
.text:00004ECC var_18          = dword ptr -18h
.text:00004ECC var_14          = dword ptr -14h
.text:00004ECC var_10          = dword ptr -10h
.text:00004ECC var_C           = dword ptr -0Ch
.text:00004ECC var_4           = dword ptr -4
.text:00004ECC
.text:00004ECC                 push    ebp
.text:00004ECD                 mov     ebp, esp
.text:00004ECF                 push    0FFFFFFFFh
.text:00004ED1                 push    offset __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text:00004ED6                 mov     eax, large fs:0
.text:00004EDC                 push    eax
.text:00004EDD                 sub     esp, 14h
.text:00004EE0                 mov     eax, 0CCCCCCCCh
.text:00004EE5                 mov     [ebp+var_20], eax
.text:00004EE8                 mov     [ebp+var_1C], eax
.text:00004EEB                 mov     [ebp+var_18], eax
.text:00004EEE                 mov     [ebp+var_14], eax
.text:00004EF1                 mov     [ebp+var_10], eax
.text:00004EF4                 mov     eax, dword ptr ds:___security_cookie
.text:00004EF9                 xor     eax, ebp
.text:00004EFB                 push    eax
.text:00004EFC                 lea     eax, [ebp+var_C]
.text:00004EFF                 mov     large fs:0, eax
.text:00004F05                 mov     [ebp+var_10], ecx
.text:00004F08                 mov     [ebp+var_4], 0
.text:00004F0F                 mov     ecx, [ebp+var_10]
.text:00004F12                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004F17                 mov     [ebp+var_14], eax
.text:00004F1A
.text:00004F1A loc_4F1A:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void):loc_4F5Cj
.text:00004F1A                 cmp     [ebp+var_14], 0
.text:00004F1E                 jz      short loc_4F5E
.text:00004F20                 mov     eax, [ebp+var_14]
.text:00004F23                 sub     eax, 1
.text:00004F26                 mov     [ebp+var_14], eax
.text:00004F29                 mov     ecx, [ebp+var_14]
.text:00004F2C                 push    ecx
.text:00004F2D                 mov     ecx, [ebp+var_10]
.text:00004F30                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:00004F35                 mov     edx, [eax]
.text:00004F37                 mov     [ebp+var_1C], edx
.text:00004F3A                 mov     eax, [ebp+var_1C]
.text:00004F3D                 mov     [ebp+var_18], eax
.text:00004F40                 cmp     [ebp+var_18], 0
.text:00004F44                 jz      short loc_4F55
.text:00004F46                 push    1
.text:00004F48                 mov     ecx, [ebp+var_18]
.text:00004F4B                 call    ??_GCProp@@QAEPAXI@Z ; CProp::`scalar deleting destructor'(uint)
.text:00004F50                 mov     [ebp+var_20], eax
.text:00004F53                 jmp     short loc_4F5C
.text:00004F55 ; ---------------------------------------------------------------------------
.text:00004F55
.text:00004F55 loc_4F55:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+78j
.text:00004F55                 mov     [ebp+var_20], 0
.text:00004F5C
.text:00004F5C loc_4F5C:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+87j
.text:00004F5C                 jmp     short loc_4F1A
.text:00004F5E ; ---------------------------------------------------------------------------
.text:00004F5E
.text:00004F5E loc_4F5E:                               ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+52j
.text:00004F5E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00004F65                 mov     ecx, [ebp+var_10]
.text:00004F68                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:00004F6D                 mov     ecx, [ebp+var_C]
.text:00004F70                 mov     large fs:0, ecx
.text:00004F77                 pop     ecx
.text:00004F78                 add     esp, 20h
.text:00004F7B                 cmp     ebp, esp
.text:00004F7D                 call    __RTC_CheckEsp
.text:00004F82                 mov     esp, ebp
.text:00004F84                 pop     ebp
.text:00004F85                 retn
.text:00004F85 ??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text:00004F85
.text:00004F85 ; ---------------------------------------------------------------------------
.text:00004F86                 align 4
.text:00004F86 _text           ends
.text:00004F86
.text$x:00004F88 ; ===========================================================================
.text$x:00004F88
.text$x:00004F88 ; Segment type: Pure code
.text$x:00004F88 ; Segment permissions: Read/Execute
.text$x:00004F88 _text$x         segment para public 'CODE' use32
.text$x:00004F88                 assume cs:_text$x
.text$x:00004F88                 ;org 4F88h
.text$x:00004F88 ; COMDAT (pick associative to section at 4ECC)
.text$x:00004F88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F88
.text$x:00004F88 ; =============== S U B R O U T I N E =======================================
.text$x:00004F88
.text$x:00004F88
.text$x:00004F88 __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
.text$x:00004F88                                         ; DATA XREF: .xdata$x:00004FB0o
.text$x:00004F88                 mov     ecx, [ebp-10h]
.text$x:00004F8B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:00004F8B __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 endp
.text$x:00004F8B
.text$x:00004F90
.text$x:00004F90 ; =============== S U B R O U T I N E =======================================
.text$x:00004F90
.text$x:00004F90
.text$x:00004F90 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
.text$x:00004F90                                         ; DATA XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+5o
.text$x:00004F90
.text$x:00004F90 arg_4           = dword ptr  8
.text$x:00004F90
.text$x:00004F90                 mov     edx, [esp+arg_4]
.text$x:00004F94                 lea     eax, [edx+0Ch]
.text$x:00004F97                 mov     ecx, [edx-18h]
.text$x:00004F9A                 xor     ecx, eax
.text$x:00004F9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FA1                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
.text$x:00004FA6                 jmp     ___CxxFrameHandler3
.text$x:00004FA6 __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ endp
.text$x:00004FA6
.text$x:00004FA6 ; ---------------------------------------------------------------------------
.text$x:00004FAB                 align 4
.text$x:00004FAB _text$x         ends
.text$x:00004FAB
.xdata$x:00004FAC ; ===========================================================================
.xdata$x:00004FAC
.xdata$x:00004FAC ; Segment type: Pure data
.xdata$x:00004FAC ; Segment permissions: Read
.xdata$x:00004FAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004FAC                 assume cs:_xdata$x
.xdata$x:00004FAC                 ;org 4FACh
.xdata$x:00004FAC ; COMDAT (pick associative to section at 4ECC)
.xdata$x:00004FAC __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ db 0FFh
.xdata$x:00004FAC                                         ; DATA XREF: .xdata$x:00004FBCo
.xdata$x:00004FAD                 db 0FFh
.xdata$x:00004FAE                 db 0FFh
.xdata$x:00004FAF                 db 0FFh
.xdata$x:00004FB0                 dd offset __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
.xdata$x:00004FB4 __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ db  22h ; "
.xdata$x:00004FB4                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ+11o
.xdata$x:00004FB5                 db    5
.xdata$x:00004FB6                 db  93h ; ô
.xdata$x:00004FB7                 db  19h
.xdata$x:00004FB8                 db    1
.xdata$x:00004FB9                 db    0
.xdata$x:00004FBA                 db    0
.xdata$x:00004FBB                 db    0
.xdata$x:00004FBC                 dd offset __unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
.xdata$x:00004FC0                 db    0
.xdata$x:00004FC1                 db    0
.xdata$x:00004FC2                 db    0
.xdata$x:00004FC3                 db    0
.xdata$x:00004FC4                 db    0
.xdata$x:00004FC5                 db    0
.xdata$x:00004FC6                 db    0
.xdata$x:00004FC7                 db    0
.xdata$x:00004FC8                 db    0
.xdata$x:00004FC9                 db    0
.xdata$x:00004FCA                 db    0
.xdata$x:00004FCB                 db    0
.xdata$x:00004FCC                 db    0
.xdata$x:00004FCD                 db    0
.xdata$x:00004FCE                 db    0
.xdata$x:00004FCF                 db    0
.xdata$x:00004FD0                 db    0
.xdata$x:00004FD1                 db    0
.xdata$x:00004FD2                 db    0
.xdata$x:00004FD3                 db    0
.xdata$x:00004FD4                 db    1
.xdata$x:00004FD5                 db    0
.xdata$x:00004FD6                 db    0
.xdata$x:00004FD7                 db    0
.xdata$x:00004FD7 _xdata$x        ends
.xdata$x:00004FD7
.text:00004FD8 ; ===========================================================================
.text:00004FD8
.text:00004FD8 ; Segment type: Pure code
.text:00004FD8 ; Segment permissions: Read/Execute
.text:00004FD8 _text           segment para public 'CODE' use32
.text:00004FD8                 assume cs:_text
.text:00004FD8                 ;org 4FD8h
.text:00004FD8 ; COMDAT (pick any)
.text:00004FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FD8
.text:00004FD8 ; =============== S U B R O U T I N E =======================================
.text:00004FD8
.text:00004FD8 ; Attributes: bp-based frame
.text:00004FD8
.text:00004FD8 ; public: unsigned int __thiscall CObjectVector<class COneMethodInfo>::Size(void)const
.text:00004FD8                 public ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
.text:00004FD8 ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ proc near
.text:00004FD8                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+478p
.text:00004FD8                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+144p ...
.text:00004FD8
.text:00004FD8 var_4           = dword ptr -4
.text:00004FD8
.text:00004FD8                 push    ebp
.text:00004FD9                 mov     ebp, esp
.text:00004FDB                 push    ecx
.text:00004FDC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00004FE3                 mov     [ebp+var_4], ecx
.text:00004FE6                 mov     ecx, [ebp+var_4]
.text:00004FE9                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:00004FEE                 add     esp, 4
.text:00004FF1                 cmp     ebp, esp
.text:00004FF3                 call    __RTC_CheckEsp
.text:00004FF8                 mov     esp, ebp
.text:00004FFA                 pop     ebp
.text:00004FFB                 retn
.text:00004FFB ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ endp
.text:00004FFB
.text:00004FFB _text           ends
.text:00004FFB
.text:00004FFC ; ===========================================================================
.text:00004FFC
.text:00004FFC ; Segment type: Pure code
.text:00004FFC ; Segment permissions: Read/Execute
.text:00004FFC _text           segment para public 'CODE' use32
.text:00004FFC                 assume cs:_text
.text:00004FFC                 ;org 4FFCh
.text:00004FFC ; COMDAT (pick any)
.text:00004FFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00004FFC
.text:00004FFC ; =============== S U B R O U T I N E =======================================
.text:00004FFC
.text:00004FFC ; Attributes: bp-based frame
.text:00004FFC
.text:00004FFC ; public: __thiscall CObjectVector<class COneMethodInfo>::CObjectVector<class COneMethodInfo>(void)
.text:00004FFC                 public ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:00004FFC ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text:00004FFC                                         ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+33p
.text:00004FFC
.text:00004FFC var_4           = dword ptr -4
.text:00004FFC
.text:00004FFC                 push    ebp
.text:00004FFD                 mov     ebp, esp
.text:00004FFF                 push    ecx
.text:00005000                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005007                 mov     [ebp+var_4], ecx
.text:0000500A                 mov     ecx, [ebp+var_4]
.text:0000500D                 call    ??0?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::CRecordVector<void *>(void)
.text:00005012                 mov     eax, [ebp+var_4]
.text:00005015                 add     esp, 4
.text:00005018                 cmp     ebp, esp
.text:0000501A                 call    __RTC_CheckEsp
.text:0000501F                 mov     esp, ebp
.text:00005021                 pop     ebp
.text:00005022                 retn
.text:00005022 ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text:00005022
.text:00005022 ; ---------------------------------------------------------------------------
.text:00005023                 align 4
.text:00005023 _text           ends
.text:00005023
.text:00005024 ; ===========================================================================
.text:00005024
.text:00005024 ; Segment type: Pure code
.text:00005024 ; Segment permissions: Read/Execute
.text:00005024 _text           segment para public 'CODE' use32
.text:00005024                 assume cs:_text
.text:00005024                 ;org 5024h
.text:00005024 ; COMDAT (pick any)
.text:00005024                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005024
.text:00005024 ; =============== S U B R O U T I N E =======================================
.text:00005024
.text:00005024 ; Attributes: bp-based frame
.text:00005024
.text:00005024 ; public: class COneMethodInfo const & __thiscall CObjectVector<class COneMethodInfo>::operator[](unsigned int)const
.text:00005024                 public ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z
.text:00005024 ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z proc near
.text:00005024                                         ; CODE XREF: NArchive::CMultiMethodProps::GetNumEmptyMethods(void)+43p
.text:00005024
.text:00005024 var_4           = dword ptr -4
.text:00005024 arg_0           = dword ptr  8
.text:00005024
.text:00005024                 push    ebp
.text:00005025                 mov     ebp, esp
.text:00005027                 push    ecx
.text:00005028                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000502F                 mov     [ebp+var_4], ecx
.text:00005032                 mov     eax, [ebp+arg_0]
.text:00005035                 push    eax
.text:00005036                 mov     ecx, [ebp+var_4]
.text:00005039                 call    ??A?$CRecordVector@PAX@@QBEABQAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000503E                 mov     eax, [eax]
.text:00005040                 add     esp, 4
.text:00005043                 cmp     ebp, esp
.text:00005045                 call    __RTC_CheckEsp
.text:0000504A                 mov     esp, ebp
.text:0000504C                 pop     ebp
.text:0000504D                 retn    4
.text:0000504D ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z endp
.text:0000504D
.text:0000504D _text           ends
.text:0000504D
.text:00005050 ; ===========================================================================
.text:00005050
.text:00005050 ; Segment type: Pure code
.text:00005050 ; Segment permissions: Read/Execute
.text:00005050 _text           segment para public 'CODE' use32
.text:00005050                 assume cs:_text
.text:00005050                 ;org 5050h
.text:00005050 ; COMDAT (pick any)
.text:00005050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005050
.text:00005050 ; =============== S U B R O U T I N E =======================================
.text:00005050
.text:00005050 ; Attributes: bp-based frame
.text:00005050
.text:00005050 ; public: class COneMethodInfo & __thiscall CObjectVector<class COneMethodInfo>::operator[](unsigned int)
.text:00005050                 public ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
.text:00005050 ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z proc near
.text:00005050                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4A2p
.text:00005050                                         ; NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+178p
.text:00005050
.text:00005050 var_4           = dword ptr -4
.text:00005050 arg_0           = dword ptr  8
.text:00005050
.text:00005050                 push    ebp
.text:00005051                 mov     ebp, esp
.text:00005053                 push    ecx
.text:00005054                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000505B                 mov     [ebp+var_4], ecx
.text:0000505E                 mov     eax, [ebp+arg_0]
.text:00005061                 push    eax
.text:00005062                 mov     ecx, [ebp+var_4]
.text:00005065                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:0000506A                 mov     eax, [eax]
.text:0000506C                 add     esp, 4
.text:0000506F                 cmp     ebp, esp
.text:00005071                 call    __RTC_CheckEsp
.text:00005076                 mov     esp, ebp
.text:00005078                 pop     ebp
.text:00005079                 retn    4
.text:00005079 ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z endp
.text:00005079
.text:00005079 _text           ends
.text:00005079
.text:0000507C ; ===========================================================================
.text:0000507C
.text:0000507C ; Segment type: Pure code
.text:0000507C ; Segment permissions: Read/Execute
.text:0000507C _text           segment para public 'CODE' use32
.text:0000507C                 assume cs:_text
.text:0000507C                 ;org 507Ch
.text:0000507C ; COMDAT (pick any)
.text:0000507C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000507C
.text:0000507C ; =============== S U B R O U T I N E =======================================
.text:0000507C
.text:0000507C ; Attributes: bp-based frame
.text:0000507C
.text:0000507C ; public: __thiscall CObjectVector<class COneMethodInfo>::~CObjectVector<class COneMethodInfo>(void)
.text:0000507C                 public ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:0000507C ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text:0000507C                                         ; CODE XREF: __unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0+6j
.text:0000507C                                         ; NArchive::CMultiMethodProps::~CMultiMethodProps(void)+4Cp ...
.text:0000507C
.text:0000507C var_20          = dword ptr -20h
.text:0000507C var_1C          = dword ptr -1Ch
.text:0000507C var_18          = dword ptr -18h
.text:0000507C var_14          = dword ptr -14h
.text:0000507C var_10          = dword ptr -10h
.text:0000507C var_C           = dword ptr -0Ch
.text:0000507C var_4           = dword ptr -4
.text:0000507C
.text:0000507C                 push    ebp
.text:0000507D                 mov     ebp, esp
.text:0000507F                 push    0FFFFFFFFh
.text:00005081                 push    offset __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text:00005086                 mov     eax, large fs:0
.text:0000508C                 push    eax
.text:0000508D                 sub     esp, 14h
.text:00005090                 mov     eax, 0CCCCCCCCh
.text:00005095                 mov     [ebp+var_20], eax
.text:00005098                 mov     [ebp+var_1C], eax
.text:0000509B                 mov     [ebp+var_18], eax
.text:0000509E                 mov     [ebp+var_14], eax
.text:000050A1                 mov     [ebp+var_10], eax
.text:000050A4                 mov     eax, dword ptr ds:___security_cookie
.text:000050A9                 xor     eax, ebp
.text:000050AB                 push    eax
.text:000050AC                 lea     eax, [ebp+var_C]
.text:000050AF                 mov     large fs:0, eax
.text:000050B5                 mov     [ebp+var_10], ecx
.text:000050B8                 mov     [ebp+var_4], 0
.text:000050BF                 mov     ecx, [ebp+var_10]
.text:000050C2                 call    ?Size@?$CRecordVector@PAX@@QBEIXZ ; CRecordVector<void *>::Size(void)
.text:000050C7                 mov     [ebp+var_14], eax
.text:000050CA
.text:000050CA loc_50CA:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void):loc_510Cj
.text:000050CA                 cmp     [ebp+var_14], 0
.text:000050CE                 jz      short loc_510E
.text:000050D0                 mov     eax, [ebp+var_14]
.text:000050D3                 sub     eax, 1
.text:000050D6                 mov     [ebp+var_14], eax
.text:000050D9                 mov     ecx, [ebp+var_14]
.text:000050DC                 push    ecx
.text:000050DD                 mov     ecx, [ebp+var_10]
.text:000050E0                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000050E5                 mov     edx, [eax]
.text:000050E7                 mov     [ebp+var_1C], edx
.text:000050EA                 mov     eax, [ebp+var_1C]
.text:000050ED                 mov     [ebp+var_18], eax
.text:000050F0                 cmp     [ebp+var_18], 0
.text:000050F4                 jz      short loc_5105
.text:000050F6                 push    1
.text:000050F8                 mov     ecx, [ebp+var_18]
.text:000050FB                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:00005100                 mov     [ebp+var_20], eax
.text:00005103                 jmp     short loc_510C
.text:00005105 ; ---------------------------------------------------------------------------
.text:00005105
.text:00005105 loc_5105:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+78j
.text:00005105                 mov     [ebp+var_20], 0
.text:0000510C
.text:0000510C loc_510C:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+87j
.text:0000510C                 jmp     short loc_50CA
.text:0000510E ; ---------------------------------------------------------------------------
.text:0000510E
.text:0000510E loc_510E:                               ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+52j
.text:0000510E                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00005115                 mov     ecx, [ebp+var_10]
.text:00005118                 call    ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000511D                 mov     ecx, [ebp+var_C]
.text:00005120                 mov     large fs:0, ecx
.text:00005127                 pop     ecx
.text:00005128                 add     esp, 20h
.text:0000512B                 cmp     ebp, esp
.text:0000512D                 call    __RTC_CheckEsp
.text:00005132                 mov     esp, ebp
.text:00005134                 pop     ebp
.text:00005135                 retn
.text:00005135 ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text:00005135
.text:00005135 ; ---------------------------------------------------------------------------
.text:00005136                 align 4
.text:00005136 _text           ends
.text:00005136
.text$x:00005138 ; ===========================================================================
.text$x:00005138
.text$x:00005138 ; Segment type: Pure code
.text$x:00005138 ; Segment permissions: Read/Execute
.text$x:00005138 _text$x         segment para public 'CODE' use32
.text$x:00005138                 assume cs:_text$x
.text$x:00005138                 ;org 5138h
.text$x:00005138 ; COMDAT (pick associative to section at 507C)
.text$x:00005138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005138
.text$x:00005138 ; =============== S U B R O U T I N E =======================================
.text$x:00005138
.text$x:00005138
.text$x:00005138 __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 proc near
.text$x:00005138                                         ; DATA XREF: .xdata$x:00005160o
.text$x:00005138                 mov     ecx, [ebp-10h]
.text$x:0000513B                 jmp     ??1?$CRecordVector@PAX@@QAE@XZ ; CRecordVector<void *>::~CRecordVector<void *>(void)
.text$x:0000513B __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0 endp
.text$x:0000513B
.text$x:00005140
.text$x:00005140 ; =============== S U B R O U T I N E =======================================
.text$x:00005140
.text$x:00005140
.text$x:00005140 __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ proc near
.text$x:00005140                                         ; DATA XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+5o
.text$x:00005140
.text$x:00005140 arg_4           = dword ptr  8
.text$x:00005140
.text$x:00005140                 mov     edx, [esp+arg_4]
.text$x:00005144                 lea     eax, [edx+0Ch]
.text$x:00005147                 mov     ecx, [edx-18h]
.text$x:0000514A                 xor     ecx, eax
.text$x:0000514C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005151                 mov     eax, offset __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.text$x:00005156                 jmp     ___CxxFrameHandler3
.text$x:00005156 __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ endp
.text$x:00005156
.text$x:00005156 ; ---------------------------------------------------------------------------
.text$x:0000515B                 align 4
.text$x:0000515B _text$x         ends
.text$x:0000515B
.xdata$x:0000515C ; ===========================================================================
.xdata$x:0000515C
.xdata$x:0000515C ; Segment type: Pure data
.xdata$x:0000515C ; Segment permissions: Read
.xdata$x:0000515C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000515C                 assume cs:_xdata$x
.xdata$x:0000515C                 ;org 515Ch
.xdata$x:0000515C ; COMDAT (pick associative to section at 507C)
.xdata$x:0000515C __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db 0FFh
.xdata$x:0000515C                                         ; DATA XREF: .xdata$x:0000516Co
.xdata$x:0000515D                 db 0FFh
.xdata$x:0000515E                 db 0FFh
.xdata$x:0000515F                 db 0FFh
.xdata$x:00005160                 dd offset __unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
.xdata$x:00005164 __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ db  22h ; "
.xdata$x:00005164                                         ; DATA XREF: __ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ+11o
.xdata$x:00005165                 db    5
.xdata$x:00005166                 db  93h ; ô
.xdata$x:00005167                 db  19h
.xdata$x:00005168                 db    1
.xdata$x:00005169                 db    0
.xdata$x:0000516A                 db    0
.xdata$x:0000516B                 db    0
.xdata$x:0000516C                 dd offset __unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
.xdata$x:00005170                 db    0
.xdata$x:00005171                 db    0
.xdata$x:00005172                 db    0
.xdata$x:00005173                 db    0
.xdata$x:00005174                 db    0
.xdata$x:00005175                 db    0
.xdata$x:00005176                 db    0
.xdata$x:00005177                 db    0
.xdata$x:00005178                 db    0
.xdata$x:00005179                 db    0
.xdata$x:0000517A                 db    0
.xdata$x:0000517B                 db    0
.xdata$x:0000517C                 db    0
.xdata$x:0000517D                 db    0
.xdata$x:0000517E                 db    0
.xdata$x:0000517F                 db    0
.xdata$x:00005180                 db    0
.xdata$x:00005181                 db    0
.xdata$x:00005182                 db    0
.xdata$x:00005183                 db    0
.xdata$x:00005184                 db    1
.xdata$x:00005185                 db    0
.xdata$x:00005186                 db    0
.xdata$x:00005187                 db    0
.xdata$x:00005187 _xdata$x        ends
.xdata$x:00005187
.text:00005188 ; ===========================================================================
.text:00005188
.text:00005188 ; Segment type: Pure code
.text:00005188 ; Segment permissions: Read/Execute
.text:00005188 _text           segment para public 'CODE' use32
.text:00005188                 assume cs:_text
.text:00005188                 ;org 5188h
.text:00005188 ; COMDAT (pick any)
.text:00005188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005188
.text:00005188 ; =============== S U B R O U T I N E =======================================
.text:00005188
.text:00005188 ; Attributes: bp-based frame
.text:00005188
.text:00005188 ; public: void __thiscall CObjectVector<class COneMethodInfo>::DeleteFrontal(unsigned int)
.text:00005188                 public ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z
.text:00005188 ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z proc near
.text:00005188                                         ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+139p
.text:00005188
.text:00005188 var_14          = dword ptr -14h
.text:00005188 var_10          = dword ptr -10h
.text:00005188 var_C           = dword ptr -0Ch
.text:00005188 var_8           = dword ptr -8
.text:00005188 var_4           = dword ptr -4
.text:00005188 arg_0           = dword ptr  8
.text:00005188
.text:00005188                 push    ebp
.text:00005189                 mov     ebp, esp
.text:0000518B                 sub     esp, 14h
.text:0000518E                 mov     eax, 0CCCCCCCCh
.text:00005193                 mov     [ebp+var_14], eax
.text:00005196                 mov     [ebp+var_10], eax
.text:00005199                 mov     [ebp+var_C], eax
.text:0000519C                 mov     [ebp+var_8], eax
.text:0000519F                 mov     [ebp+var_4], eax
.text:000051A2                 mov     [ebp+var_4], ecx
.text:000051A5                 mov     [ebp+var_8], 0
.text:000051AC                 jmp     short loc_51B7
.text:000051AE ; ---------------------------------------------------------------------------
.text:000051AE
.text:000051AE loc_51AE:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint):loc_51F2j
.text:000051AE                 mov     eax, [ebp+var_8]
.text:000051B1                 add     eax, 1
.text:000051B4                 mov     [ebp+var_8], eax
.text:000051B7
.text:000051B7 loc_51B7:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+24j
.text:000051B7                 mov     ecx, [ebp+var_8]
.text:000051BA                 cmp     ecx, [ebp+arg_0]
.text:000051BD                 jnb     short loc_51F4
.text:000051BF                 mov     edx, [ebp+var_8]
.text:000051C2                 push    edx
.text:000051C3                 mov     ecx, [ebp+var_4]
.text:000051C6                 call    ??A?$CRecordVector@PAX@@QAEAAPAXI@Z ; CRecordVector<void *>::operator[](uint)
.text:000051CB                 mov     eax, [eax]
.text:000051CD                 mov     [ebp+var_10], eax
.text:000051D0                 mov     ecx, [ebp+var_10]
.text:000051D3                 mov     [ebp+var_C], ecx
.text:000051D6                 cmp     [ebp+var_C], 0
.text:000051DA                 jz      short loc_51EB
.text:000051DC                 push    1
.text:000051DE                 mov     ecx, [ebp+var_C]
.text:000051E1                 call    ??_GCOneMethodInfo@@QAEPAXI@Z ; COneMethodInfo::`scalar deleting destructor'(uint)
.text:000051E6                 mov     [ebp+var_14], eax
.text:000051E9                 jmp     short loc_51F2
.text:000051EB ; ---------------------------------------------------------------------------
.text:000051EB
.text:000051EB loc_51EB:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+52j
.text:000051EB                 mov     [ebp+var_14], 0
.text:000051F2
.text:000051F2 loc_51F2:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+61j
.text:000051F2                 jmp     short loc_51AE
.text:000051F4 ; ---------------------------------------------------------------------------
.text:000051F4
.text:000051F4 loc_51F4:                               ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+35j
.text:000051F4                 mov     edx, [ebp+arg_0]
.text:000051F7                 push    edx
.text:000051F8                 mov     ecx, [ebp+var_4]
.text:000051FB                 call    ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal(uint)
.text:00005200                 add     esp, 14h
.text:00005203                 cmp     ebp, esp
.text:00005205                 call    __RTC_CheckEsp
.text:0000520A                 mov     esp, ebp
.text:0000520C                 pop     ebp
.text:0000520D                 retn    4
.text:0000520D ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z endp
.text:0000520D
.text:0000520D _text           ends
.text:0000520D
.text:00005210 ; ===========================================================================
.text:00005210
.text:00005210 ; Segment type: Pure code
.text:00005210 ; Segment permissions: Read/Execute
.text:00005210 _text           segment para public 'CODE' use32
.text:00005210                 assume cs:_text
.text:00005210                 ;org 5210h
.text:00005210 ; COMDAT (pick any)
.text:00005210                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005210
.text:00005210 ; =============== S U B R O U T I N E =======================================
.text:00005210
.text:00005210 ; Attributes: bp-based frame
.text:00005210
.text:00005210 ; public: __thiscall CMyComPtr<struct IInStream>::CMyComPtr<struct IInStream>(void)
.text:00005210                 public ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00005210 ??0?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00005210                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+AEp
.text:00005210
.text:00005210 var_4           = dword ptr -4
.text:00005210
.text:00005210                 push    ebp
.text:00005211                 mov     ebp, esp
.text:00005213                 push    ecx
.text:00005214                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000521B                 mov     [ebp+var_4], ecx
.text:0000521E                 mov     eax, [ebp+var_4]
.text:00005221                 mov     dword ptr [eax], 0
.text:00005227                 mov     eax, [ebp+var_4]
.text:0000522A                 mov     esp, ebp
.text:0000522C                 pop     ebp
.text:0000522D                 retn
.text:0000522D ??0?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:0000522D
.text:0000522D ; ---------------------------------------------------------------------------
.text:0000522E                 align 10h
.text:0000522E _text           ends
.text:0000522E
.text:00005230 ; ===========================================================================
.text:00005230
.text:00005230 ; Segment type: Pure code
.text:00005230 ; Segment permissions: Read/Execute
.text:00005230 _text           segment para public 'CODE' use32
.text:00005230                 assume cs:_text
.text:00005230                 ;org 5230h
.text:00005230 ; COMDAT (pick any)
.text:00005230                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005230
.text:00005230 ; =============== S U B R O U T I N E =======================================
.text:00005230
.text:00005230 ; Attributes: bp-based frame
.text:00005230
.text:00005230 ; public: __thiscall CMyComPtr<struct IInStream>::~CMyComPtr<struct IInStream>(void)
.text:00005230                 public ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
.text:00005230 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ proc near
.text:00005230                                         ; CODE XREF: __unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1+9j
.text:00005230                                         ; NArchive::NXz::CHandler::~CHandler(void)+61p ...
.text:00005230
.text:00005230 var_4           = dword ptr -4
.text:00005230
.text:00005230                 push    ebp
.text:00005231                 mov     ebp, esp
.text:00005233                 push    ecx
.text:00005234                 push    esi
.text:00005235                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000523C                 mov     [ebp+var_4], ecx
.text:0000523F                 mov     eax, [ebp+var_4]
.text:00005242                 cmp     dword ptr [eax], 0
.text:00005245                 jz      short loc_5262
.text:00005247                 mov     ecx, [ebp+var_4]
.text:0000524A                 mov     edx, [ecx]
.text:0000524C                 mov     eax, [ebp+var_4]
.text:0000524F                 mov     ecx, [eax]
.text:00005251                 mov     edx, [edx]
.text:00005253                 mov     esi, esp
.text:00005255                 push    ecx
.text:00005256                 mov     eax, [edx+8]
.text:00005259                 call    eax
.text:0000525B                 cmp     esi, esp
.text:0000525D                 call    __RTC_CheckEsp
.text:00005262
.text:00005262 loc_5262:                               ; CODE XREF: CMyComPtr<IInStream>::~CMyComPtr<IInStream>(void)+15j
.text:00005262                 pop     esi
.text:00005263                 add     esp, 4
.text:00005266                 cmp     ebp, esp
.text:00005268                 call    __RTC_CheckEsp
.text:0000526D                 mov     esp, ebp
.text:0000526F                 pop     ebp
.text:00005270                 retn
.text:00005270 ??1?$CMyComPtr@UIInStream@@@@QAE@XZ endp
.text:00005270
.text:00005270 ; ---------------------------------------------------------------------------
.text:00005271                 align 4
.text:00005271 _text           ends
.text:00005271
.text:00005274 ; ===========================================================================
.text:00005274
.text:00005274 ; Segment type: Pure code
.text:00005274 ; Segment permissions: Read/Execute
.text:00005274 _text           segment para public 'CODE' use32
.text:00005274                 assume cs:_text
.text:00005274                 ;org 5274h
.text:00005274 ; COMDAT (pick any)
.text:00005274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005274
.text:00005274 ; =============== S U B R O U T I N E =======================================
.text:00005274
.text:00005274 ; Attributes: bp-based frame
.text:00005274
.text:00005274 ; public: void __thiscall CMyComPtr<struct IInStream>::Release(void)
.text:00005274                 public ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
.text:00005274 ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ proc near
.text:00005274                                         ; CODE XREF: NArchive::NXz::CHandler::Close(void)+43p
.text:00005274
.text:00005274 var_4           = dword ptr -4
.text:00005274
.text:00005274                 push    ebp
.text:00005275                 mov     ebp, esp
.text:00005277                 push    ecx
.text:00005278                 push    esi
.text:00005279                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005280                 mov     [ebp+var_4], ecx
.text:00005283                 mov     eax, [ebp+var_4]
.text:00005286                 cmp     dword ptr [eax], 0
.text:00005289                 jz      short loc_52AF
.text:0000528B                 mov     ecx, [ebp+var_4]
.text:0000528E                 mov     edx, [ecx]
.text:00005290                 mov     eax, [ebp+var_4]
.text:00005293                 mov     ecx, [eax]
.text:00005295                 mov     edx, [edx]
.text:00005297                 mov     esi, esp
.text:00005299                 push    ecx
.text:0000529A                 mov     eax, [edx+8]
.text:0000529D                 call    eax
.text:0000529F                 cmp     esi, esp
.text:000052A1                 call    __RTC_CheckEsp
.text:000052A6                 mov     ecx, [ebp+var_4]
.text:000052A9                 mov     dword ptr [ecx], 0
.text:000052AF
.text:000052AF loc_52AF:                               ; CODE XREF: CMyComPtr<IInStream>::Release(void)+15j
.text:000052AF                 pop     esi
.text:000052B0                 add     esp, 4
.text:000052B3                 cmp     ebp, esp
.text:000052B5                 call    __RTC_CheckEsp
.text:000052BA                 mov     esp, ebp
.text:000052BC                 pop     ebp
.text:000052BD                 retn
.text:000052BD ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ endp
.text:000052BD
.text:000052BD ; ---------------------------------------------------------------------------
.text:000052BE                 align 10h
.text:000052BE _text           ends
.text:000052BE
.text:000052C0 ; ===========================================================================
.text:000052C0
.text:000052C0 ; Segment type: Pure code
.text:000052C0 ; Segment permissions: Read/Execute
.text:000052C0 _text           segment para public 'CODE' use32
.text:000052C0                 assume cs:_text
.text:000052C0                 ;org 52C0h
.text:000052C0 ; COMDAT (pick any)
.text:000052C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052C0
.text:000052C0 ; =============== S U B R O U T I N E =======================================
.text:000052C0
.text:000052C0 ; Attributes: bp-based frame
.text:000052C0
.text:000052C0 ; public: __thiscall CMyComPtr<struct IInStream>::operator struct IInStream *(void)const
.text:000052C0                 public ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000052C0 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000052C0                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A38p
.text:000052C0                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+BF6p
.text:000052C0
.text:000052C0 var_4           = dword ptr -4
.text:000052C0
.text:000052C0                 push    ebp
.text:000052C1                 mov     ebp, esp
.text:000052C3                 push    ecx
.text:000052C4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052CB                 mov     [ebp+var_4], ecx
.text:000052CE                 mov     eax, [ebp+var_4]
.text:000052D1                 mov     eax, [eax]
.text:000052D3                 mov     esp, ebp
.text:000052D5                 pop     ebp
.text:000052D6                 retn
.text:000052D6 ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000052D6
.text:000052D6 ; ---------------------------------------------------------------------------
.text:000052D7                 align 4
.text:000052D7 _text           ends
.text:000052D7
.text:000052D8 ; ===========================================================================
.text:000052D8
.text:000052D8 ; Segment type: Pure code
.text:000052D8 ; Segment permissions: Read/Execute
.text:000052D8 _text           segment para public 'CODE' use32
.text:000052D8                 assume cs:_text
.text:000052D8                 ;org 52D8h
.text:000052D8 ; COMDAT (pick any)
.text:000052D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052D8
.text:000052D8 ; =============== S U B R O U T I N E =======================================
.text:000052D8
.text:000052D8 ; Attributes: bp-based frame
.text:000052D8
.text:000052D8 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator->(void)const
.text:000052D8                 public ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
.text:000052D8 ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ proc near
.text:000052D8                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+2BCp
.text:000052D8                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+ACAp
.text:000052D8
.text:000052D8 var_4           = dword ptr -4
.text:000052D8
.text:000052D8                 push    ebp
.text:000052D9                 mov     ebp, esp
.text:000052DB                 push    ecx
.text:000052DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052E3                 mov     [ebp+var_4], ecx
.text:000052E6                 mov     eax, [ebp+var_4]
.text:000052E9                 mov     eax, [eax]
.text:000052EB                 mov     esp, ebp
.text:000052ED                 pop     ebp
.text:000052EE                 retn
.text:000052EE ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ endp
.text:000052EE
.text:000052EE ; ---------------------------------------------------------------------------
.text:000052EF                 align 10h
.text:000052EF _text           ends
.text:000052EF
.text:000052F0 ; ===========================================================================
.text:000052F0
.text:000052F0 ; Segment type: Pure code
.text:000052F0 ; Segment permissions: Read/Execute
.text:000052F0 _text           segment para public 'CODE' use32
.text:000052F0                 assume cs:_text
.text:000052F0                 ;org 52F0h
.text:000052F0 ; COMDAT (pick any)
.text:000052F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000052F0
.text:000052F0 ; =============== S U B R O U T I N E =======================================
.text:000052F0
.text:000052F0 ; Attributes: bp-based frame
.text:000052F0
.text:000052F0 ; public: struct IInStream * __thiscall CMyComPtr<struct IInStream>::operator=(struct IInStream *)
.text:000052F0                 public ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
.text:000052F0 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z proc near
.text:000052F0                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+3D9p
.text:000052F0
.text:000052F0 var_4           = dword ptr -4
.text:000052F0 arg_0           = dword ptr  8
.text:000052F0
.text:000052F0                 push    ebp
.text:000052F1                 mov     ebp, esp
.text:000052F3                 push    ecx
.text:000052F4                 push    esi
.text:000052F5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000052FC                 mov     [ebp+var_4], ecx
.text:000052FF                 cmp     [ebp+arg_0], 0
.text:00005303                 jz      short loc_531C
.text:00005305                 mov     eax, [ebp+arg_0]
.text:00005308                 mov     ecx, [eax]
.text:0000530A                 mov     esi, esp
.text:0000530C                 mov     edx, [ebp+arg_0]
.text:0000530F                 push    edx
.text:00005310                 mov     eax, [ecx+4]
.text:00005313                 call    eax
.text:00005315                 cmp     esi, esp
.text:00005317                 call    __RTC_CheckEsp
.text:0000531C
.text:0000531C loc_531C:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+13j
.text:0000531C                 mov     ecx, [ebp+var_4]
.text:0000531F                 cmp     dword ptr [ecx], 0
.text:00005322                 jz      short loc_533F
.text:00005324                 mov     edx, [ebp+var_4]
.text:00005327                 mov     eax, [edx]
.text:00005329                 mov     ecx, [ebp+var_4]
.text:0000532C                 mov     edx, [ecx]
.text:0000532E                 mov     eax, [eax]
.text:00005330                 mov     esi, esp
.text:00005332                 push    edx
.text:00005333                 mov     ecx, [eax+8]
.text:00005336                 call    ecx
.text:00005338                 cmp     esi, esp
.text:0000533A                 call    __RTC_CheckEsp
.text:0000533F
.text:0000533F loc_533F:                               ; CODE XREF: CMyComPtr<IInStream>::operator=(IInStream *)+32j
.text:0000533F                 mov     edx, [ebp+var_4]
.text:00005342                 mov     eax, [ebp+arg_0]
.text:00005345                 mov     [edx], eax
.text:00005347                 mov     eax, [ebp+arg_0]
.text:0000534A                 pop     esi
.text:0000534B                 add     esp, 4
.text:0000534E                 cmp     ebp, esp
.text:00005350                 call    __RTC_CheckEsp
.text:00005355                 mov     esp, ebp
.text:00005357                 pop     ebp
.text:00005358                 retn    4
.text:00005358 ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z endp
.text:00005358
.text:00005358 ; ---------------------------------------------------------------------------
.text:0000535B                 align 4
.text:0000535B _text           ends
.text:0000535B
.text:0000535C ; ===========================================================================
.text:0000535C
.text:0000535C ; Segment type: Pure code
.text:0000535C ; Segment permissions: Read/Execute
.text:0000535C _text           segment para public 'CODE' use32
.text:0000535C                 assume cs:_text
.text:0000535C                 ;org 535Ch
.text:0000535C ; COMDAT (pick any)
.text:0000535C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000535C
.text:0000535C ; =============== S U B R O U T I N E =======================================
.text:0000535C
.text:0000535C ; Attributes: bp-based frame
.text:0000535C
.text:0000535C ; public: bool __thiscall CMyComPtr<struct IInStream>::operator!(void)const
.text:0000535C                 public ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
.text:0000535C ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ proc near
.text:0000535C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+270p
.text:0000535C
.text:0000535C var_4           = dword ptr -4
.text:0000535C
.text:0000535C                 push    ebp
.text:0000535D                 mov     ebp, esp
.text:0000535F                 push    ecx
.text:00005360                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005367                 mov     [ebp+var_4], ecx
.text:0000536A                 mov     eax, [ebp+var_4]
.text:0000536D                 xor     ecx, ecx
.text:0000536F                 cmp     dword ptr [eax], 0
.text:00005372                 setz    cl
.text:00005375                 mov     al, cl
.text:00005377                 mov     esp, ebp
.text:00005379                 pop     ebp
.text:0000537A                 retn
.text:0000537A ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ endp
.text:0000537A
.text:0000537A ; ---------------------------------------------------------------------------
.text:0000537B                 align 4
.text:0000537B _text           ends
.text:0000537B
.text:0000537C ; ===========================================================================
.text:0000537C
.text:0000537C ; Segment type: Pure code
.text:0000537C ; Segment permissions: Read/Execute
.text:0000537C _text           segment para public 'CODE' use32
.text:0000537C                 assume cs:_text
.text:0000537C                 ;org 537Ch
.text:0000537C ; COMDAT (pick any)
.text:0000537C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000537C
.text:0000537C ; =============== S U B R O U T I N E =======================================
.text:0000537C
.text:0000537C ; Attributes: bp-based frame
.text:0000537C
.text:0000537C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::CMyComPtr<struct ISequentialOutStream>(void)
.text:0000537C                 public ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000537C ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000537C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+EFp
.text:0000537C
.text:0000537C var_4           = dword ptr -4
.text:0000537C
.text:0000537C                 push    ebp
.text:0000537D                 mov     ebp, esp
.text:0000537F                 push    ecx
.text:00005380                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005387                 mov     [ebp+var_4], ecx
.text:0000538A                 mov     eax, [ebp+var_4]
.text:0000538D                 mov     dword ptr [eax], 0
.text:00005393                 mov     eax, [ebp+var_4]
.text:00005396                 mov     esp, ebp
.text:00005398                 pop     ebp
.text:00005399                 retn
.text:00005399 ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:00005399
.text:00005399 ; ---------------------------------------------------------------------------
.text:0000539A                 align 4
.text:0000539A _text           ends
.text:0000539A
.text:0000539C ; ===========================================================================
.text:0000539C
.text:0000539C ; Segment type: Pure code
.text:0000539C ; Segment permissions: Read/Execute
.text:0000539C _text           segment para public 'CODE' use32
.text:0000539C                 assume cs:_text
.text:0000539C                 ;org 539Ch
.text:0000539C ; COMDAT (pick any)
.text:0000539C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000539C
.text:0000539C ; =============== S U B R O U T I N E =======================================
.text:0000539C
.text:0000539C ; Attributes: bp-based frame
.text:0000539C
.text:0000539C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::~CMyComPtr<struct ISequentialOutStream>(void)
.text:0000539C                 public ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
.text:0000539C ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
.text:0000539C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+161p
.text:0000539C                                         ; NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1A1p ...
.text:0000539C
.text:0000539C var_4           = dword ptr -4
.text:0000539C
.text:0000539C                 push    ebp
.text:0000539D                 mov     ebp, esp
.text:0000539F                 push    ecx
.text:000053A0                 push    esi
.text:000053A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053A8                 mov     [ebp+var_4], ecx
.text:000053AB                 mov     eax, [ebp+var_4]
.text:000053AE                 cmp     dword ptr [eax], 0
.text:000053B1                 jz      short loc_53CE
.text:000053B3                 mov     ecx, [ebp+var_4]
.text:000053B6                 mov     edx, [ecx]
.text:000053B8                 mov     eax, [ebp+var_4]
.text:000053BB                 mov     ecx, [eax]
.text:000053BD                 mov     edx, [edx]
.text:000053BF                 mov     esi, esp
.text:000053C1                 push    ecx
.text:000053C2                 mov     eax, [edx+8]
.text:000053C5                 call    eax
.text:000053C7                 cmp     esi, esp
.text:000053C9                 call    __RTC_CheckEsp
.text:000053CE
.text:000053CE loc_53CE:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>(void)+15j
.text:000053CE                 pop     esi
.text:000053CF                 add     esp, 4
.text:000053D2                 cmp     ebp, esp
.text:000053D4                 call    __RTC_CheckEsp
.text:000053D9                 mov     esp, ebp
.text:000053DB                 pop     ebp
.text:000053DC                 retn
.text:000053DC ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ endp
.text:000053DC
.text:000053DC ; ---------------------------------------------------------------------------
.text:000053DD                 align 10h
.text:000053DD _text           ends
.text:000053DD
.text:000053E0 ; ===========================================================================
.text:000053E0
.text:000053E0 ; Segment type: Pure code
.text:000053E0 ; Segment permissions: Read/Execute
.text:000053E0 _text           segment para public 'CODE' use32
.text:000053E0                 assume cs:_text
.text:000053E0                 ;org 53E0h
.text:000053E0 ; COMDAT (pick any)
.text:000053E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000053E0
.text:000053E0 ; =============== S U B R O U T I N E =======================================
.text:000053E0
.text:000053E0 ; Attributes: bp-based frame
.text:000053E0
.text:000053E0 ; public: void __thiscall CMyComPtr<struct ISequentialOutStream>::Release(void)
.text:000053E0                 public ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
.text:000053E0 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ proc near
.text:000053E0                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+427p
.text:000053E0
.text:000053E0 var_4           = dword ptr -4
.text:000053E0
.text:000053E0                 push    ebp
.text:000053E1                 mov     ebp, esp
.text:000053E3                 push    ecx
.text:000053E4                 push    esi
.text:000053E5                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000053EC                 mov     [ebp+var_4], ecx
.text:000053EF                 mov     eax, [ebp+var_4]
.text:000053F2                 cmp     dword ptr [eax], 0
.text:000053F5                 jz      short loc_541B
.text:000053F7                 mov     ecx, [ebp+var_4]
.text:000053FA                 mov     edx, [ecx]
.text:000053FC                 mov     eax, [ebp+var_4]
.text:000053FF                 mov     ecx, [eax]
.text:00005401                 mov     edx, [edx]
.text:00005403                 mov     esi, esp
.text:00005405                 push    ecx
.text:00005406                 mov     eax, [edx+8]
.text:00005409                 call    eax
.text:0000540B                 cmp     esi, esp
.text:0000540D                 call    __RTC_CheckEsp
.text:00005412                 mov     ecx, [ebp+var_4]
.text:00005415                 mov     dword ptr [ecx], 0
.text:0000541B
.text:0000541B loc_541B:                               ; CODE XREF: CMyComPtr<ISequentialOutStream>::Release(void)+15j
.text:0000541B                 pop     esi
.text:0000541C                 add     esp, 4
.text:0000541F                 cmp     ebp, esp
.text:00005421                 call    __RTC_CheckEsp
.text:00005426                 mov     esp, ebp
.text:00005428                 pop     ebp
.text:00005429                 retn
.text:00005429 ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ endp
.text:00005429
.text:00005429 ; ---------------------------------------------------------------------------
.text:0000542A                 align 4
.text:0000542A _text           ends
.text:0000542A
.text:0000542C ; ===========================================================================
.text:0000542C
.text:0000542C ; Segment type: Pure code
.text:0000542C ; Segment permissions: Read/Execute
.text:0000542C _text           segment para public 'CODE' use32
.text:0000542C                 assume cs:_text
.text:0000542C                 ;org 542Ch
.text:0000542C ; COMDAT (pick any)
.text:0000542C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000542C
.text:0000542C ; =============== S U B R O U T I N E =======================================
.text:0000542C
.text:0000542C ; Attributes: bp-based frame
.text:0000542C
.text:0000542C ; public: __thiscall CMyComPtr<struct ISequentialOutStream>::operator struct ISequentialOutStream *(void)const
.text:0000542C                 public ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
.text:0000542C ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
.text:0000542C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+36Bp
.text:0000542C
.text:0000542C var_4           = dword ptr -4
.text:0000542C
.text:0000542C                 push    ebp
.text:0000542D                 mov     ebp, esp
.text:0000542F                 push    ecx
.text:00005430                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005437                 mov     [ebp+var_4], ecx
.text:0000543A                 mov     eax, [ebp+var_4]
.text:0000543D                 mov     eax, [eax]
.text:0000543F                 mov     esp, ebp
.text:00005441                 pop     ebp
.text:00005442                 retn
.text:00005442 ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ endp
.text:00005442
.text:00005442 ; ---------------------------------------------------------------------------
.text:00005443                 align 4
.text:00005443 _text           ends
.text:00005443
.text:00005444 ; ===========================================================================
.text:00005444
.text:00005444 ; Segment type: Pure code
.text:00005444 ; Segment permissions: Read/Execute
.text:00005444 _text           segment para public 'CODE' use32
.text:00005444                 assume cs:_text
.text:00005444                 ;org 5444h
.text:00005444 ; COMDAT (pick any)
.text:00005444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005444
.text:00005444 ; =============== S U B R O U T I N E =======================================
.text:00005444
.text:00005444 ; Attributes: bp-based frame
.text:00005444
.text:00005444 ; public: struct ISequentialOutStream * * __thiscall CMyComPtr<struct ISequentialOutStream>::operator&(void)
.text:00005444                 public ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
.text:00005444 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ proc near
.text:00005444                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+10Dp
.text:00005444
.text:00005444 var_4           = dword ptr -4
.text:00005444
.text:00005444                 push    ebp
.text:00005445                 mov     ebp, esp
.text:00005447                 push    ecx
.text:00005448                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000544F                 mov     [ebp+var_4], ecx
.text:00005452                 mov     eax, [ebp+var_4]
.text:00005455                 mov     esp, ebp
.text:00005457                 pop     ebp
.text:00005458                 retn
.text:00005458 ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ endp
.text:00005458
.text:00005458 ; ---------------------------------------------------------------------------
.text:00005459                 align 4
.text:00005459 _text           ends
.text:00005459
.text:0000545C ; ===========================================================================
.text:0000545C
.text:0000545C ; Segment type: Pure code
.text:0000545C ; Segment permissions: Read/Execute
.text:0000545C _text           segment para public 'CODE' use32
.text:0000545C                 assume cs:_text
.text:0000545C                 ;org 545Ch
.text:0000545C ; COMDAT (pick any)
.text:0000545C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000545C
.text:0000545C ; =============== S U B R O U T I N E =======================================
.text:0000545C
.text:0000545C ; Attributes: bp-based frame
.text:0000545C
.text:0000545C ; public: bool __thiscall CMyComPtr<struct ISequentialOutStream>::operator!(void)const
.text:0000545C                 public ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
.text:0000545C ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
.text:0000545C                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+17Ap
.text:0000545C
.text:0000545C var_4           = dword ptr -4
.text:0000545C
.text:0000545C                 push    ebp
.text:0000545D                 mov     ebp, esp
.text:0000545F                 push    ecx
.text:00005460                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005467                 mov     [ebp+var_4], ecx
.text:0000546A                 mov     eax, [ebp+var_4]
.text:0000546D                 xor     ecx, ecx
.text:0000546F                 cmp     dword ptr [eax], 0
.text:00005472                 setz    cl
.text:00005475                 mov     al, cl
.text:00005477                 mov     esp, ebp
.text:00005479                 pop     ebp
.text:0000547A                 retn
.text:0000547A ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ endp
.text:0000547A
.text:0000547A ; ---------------------------------------------------------------------------
.text:0000547B                 align 4
.text:0000547B _text           ends
.text:0000547B
.text:0000547C ; ===========================================================================
.text:0000547C
.text:0000547C ; Segment type: Pure code
.text:0000547C ; Segment permissions: Read/Execute
.text:0000547C _text           segment para public 'CODE' use32
.text:0000547C                 assume cs:_text
.text:0000547C                 ;org 547Ch
.text:0000547C ; COMDAT (pick any)
.text:0000547C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000547C
.text:0000547C ; =============== S U B R O U T I N E =======================================
.text:0000547C
.text:0000547C ; Attributes: bp-based frame
.text:0000547C
.text:0000547C ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000547C                 public ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000547C ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000547C                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+94Ep
.text:0000547C
.text:0000547C var_4           = dword ptr -4
.text:0000547C
.text:0000547C                 push    ebp
.text:0000547D                 mov     ebp, esp
.text:0000547F                 push    ecx
.text:00005480                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005487                 mov     [ebp+var_4], ecx
.text:0000548A                 mov     eax, [ebp+var_4]
.text:0000548D                 mov     dword ptr [eax], 0
.text:00005493                 mov     eax, [ebp+var_4]
.text:00005496                 mov     esp, ebp
.text:00005498                 pop     ebp
.text:00005499                 retn
.text:00005499 ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:00005499
.text:00005499 ; ---------------------------------------------------------------------------
.text:0000549A                 align 4
.text:0000549A _text           ends
.text:0000549A
.text:0000549C ; ===========================================================================
.text:0000549C
.text:0000549C ; Segment type: Pure code
.text:0000549C ; Segment permissions: Read/Execute
.text:0000549C _text           segment para public 'CODE' use32
.text:0000549C                 assume cs:_text
.text:0000549C                 ;org 549Ch
.text:0000549C ; COMDAT (pick any)
.text:0000549C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000549C
.text:0000549C ; =============== S U B R O U T I N E =======================================
.text:0000549C
.text:0000549C ; Attributes: bp-based frame
.text:0000549C
.text:0000549C ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::~CMyComPtr<struct IArchiveUpdateCallbackFile>(void)
.text:0000549C                 public ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
.text:0000549C ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ proc near
.text:0000549C                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+A1Fp
.text:0000549C                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+AB1p ...
.text:0000549C
.text:0000549C var_4           = dword ptr -4
.text:0000549C
.text:0000549C                 push    ebp
.text:0000549D                 mov     ebp, esp
.text:0000549F                 push    ecx
.text:000054A0                 push    esi
.text:000054A1                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054A8                 mov     [ebp+var_4], ecx
.text:000054AB                 mov     eax, [ebp+var_4]
.text:000054AE                 cmp     dword ptr [eax], 0
.text:000054B1                 jz      short loc_54CE
.text:000054B3                 mov     ecx, [ebp+var_4]
.text:000054B6                 mov     edx, [ecx]
.text:000054B8                 mov     eax, [ebp+var_4]
.text:000054BB                 mov     ecx, [eax]
.text:000054BD                 mov     edx, [edx]
.text:000054BF                 mov     esi, esp
.text:000054C1                 push    ecx
.text:000054C2                 mov     eax, [edx+8]
.text:000054C5                 call    eax
.text:000054C7                 cmp     esi, esp
.text:000054C9                 call    __RTC_CheckEsp
.text:000054CE
.text:000054CE loc_54CE:                               ; CODE XREF: CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>(void)+15j
.text:000054CE                 pop     esi
.text:000054CF                 add     esp, 4
.text:000054D2                 cmp     ebp, esp
.text:000054D4                 call    __RTC_CheckEsp
.text:000054D9                 mov     esp, ebp
.text:000054DB                 pop     ebp
.text:000054DC                 retn
.text:000054DC ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ endp
.text:000054DC
.text:000054DC ; ---------------------------------------------------------------------------
.text:000054DD                 align 10h
.text:000054DD _text           ends
.text:000054DD
.text:000054E0 ; ===========================================================================
.text:000054E0
.text:000054E0 ; Segment type: Pure code
.text:000054E0 ; Segment permissions: Read/Execute
.text:000054E0 _text           segment para public 'CODE' use32
.text:000054E0                 assume cs:_text
.text:000054E0                 ;org 54E0h
.text:000054E0 ; COMDAT (pick any)
.text:000054E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054E0
.text:000054E0 ; =============== S U B R O U T I N E =======================================
.text:000054E0
.text:000054E0 ; Attributes: bp-based frame
.text:000054E0
.text:000054E0 ; public: __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator struct IArchiveUpdateCallbackFile *(void)const
.text:000054E0                 public ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:000054E0 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:000054E0                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+996p
.text:000054E0
.text:000054E0 var_4           = dword ptr -4
.text:000054E0
.text:000054E0                 push    ebp
.text:000054E1                 mov     ebp, esp
.text:000054E3                 push    ecx
.text:000054E4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000054EB                 mov     [ebp+var_4], ecx
.text:000054EE                 mov     eax, [ebp+var_4]
.text:000054F1                 mov     eax, [eax]
.text:000054F3                 mov     esp, ebp
.text:000054F5                 pop     ebp
.text:000054F6                 retn
.text:000054F6 ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:000054F6
.text:000054F6 ; ---------------------------------------------------------------------------
.text:000054F7                 align 4
.text:000054F7 _text           ends
.text:000054F7
.text:000054F8 ; ===========================================================================
.text:000054F8
.text:000054F8 ; Segment type: Pure code
.text:000054F8 ; Segment permissions: Read/Execute
.text:000054F8 _text           segment para public 'CODE' use32
.text:000054F8                 assume cs:_text
.text:000054F8                 ;org 54F8h
.text:000054F8 ; COMDAT (pick any)
.text:000054F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000054F8
.text:000054F8 ; =============== S U B R O U T I N E =======================================
.text:000054F8
.text:000054F8 ; Attributes: bp-based frame
.text:000054F8
.text:000054F8 ; public: struct IArchiveUpdateCallbackFile * * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator&(void)
.text:000054F8                 public ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
.text:000054F8 ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:000054F8                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+963p
.text:000054F8
.text:000054F8 var_4           = dword ptr -4
.text:000054F8
.text:000054F8                 push    ebp
.text:000054F9                 mov     ebp, esp
.text:000054FB                 push    ecx
.text:000054FC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005503                 mov     [ebp+var_4], ecx
.text:00005506                 mov     eax, [ebp+var_4]
.text:00005509                 mov     esp, ebp
.text:0000550B                 pop     ebp
.text:0000550C                 retn
.text:0000550C ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ endp
.text:0000550C
.text:0000550C ; ---------------------------------------------------------------------------
.text:0000550D                 align 10h
.text:0000550D _text           ends
.text:0000550D
.text:00005510 ; ===========================================================================
.text:00005510
.text:00005510 ; Segment type: Pure code
.text:00005510 ; Segment permissions: Read/Execute
.text:00005510 _text           segment para public 'CODE' use32
.text:00005510                 assume cs:_text
.text:00005510                 ;org 5510h
.text:00005510 ; COMDAT (pick any)
.text:00005510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005510
.text:00005510 ; =============== S U B R O U T I N E =======================================
.text:00005510
.text:00005510 ; Attributes: bp-based frame
.text:00005510
.text:00005510 ; public: struct IArchiveUpdateCallbackFile * __thiscall CMyComPtr<struct IArchiveUpdateCallbackFile>::operator->(void)const
.text:00005510                 public ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
.text:00005510 ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ proc near
.text:00005510                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+9B4p
.text:00005510
.text:00005510 var_4           = dword ptr -4
.text:00005510
.text:00005510                 push    ebp
.text:00005511                 mov     ebp, esp
.text:00005513                 push    ecx
.text:00005514                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000551B                 mov     [ebp+var_4], ecx
.text:0000551E                 mov     eax, [ebp+var_4]
.text:00005521                 mov     eax, [eax]
.text:00005523                 mov     esp, ebp
.text:00005525                 pop     ebp
.text:00005526                 retn
.text:00005526 ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ endp
.text:00005526
.text:00005526 ; ---------------------------------------------------------------------------
.text:00005527                 align 4
.text:00005527 _text           ends
.text:00005527
.text:00005528 ; ===========================================================================
.text:00005528
.text:00005528 ; Segment type: Pure code
.text:00005528 ; Segment permissions: Read/Execute
.text:00005528 _text           segment para public 'CODE' use32
.text:00005528                 assume cs:_text
.text:00005528                 ;org 5528h
.text:00005528 ; COMDAT (pick any)
.text:00005528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005528
.text:00005528 ; =============== S U B R O U T I N E =======================================
.text:00005528
.text:00005528 ; Attributes: bp-based frame
.text:00005528
.text:00005528 ; public: void * __thiscall CProp::`scalar deleting destructor'(unsigned int)
.text:00005528                 public ??_GCProp@@QAEPAXI@Z
.text:00005528 ??_GCProp@@QAEPAXI@Z proc near          ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+7Fp
.text:00005528
.text:00005528 var_4           = dword ptr -4
.text:00005528 arg_0           = dword ptr  8
.text:00005528
.text:00005528                 push    ebp
.text:00005529                 mov     ebp, esp
.text:0000552B                 push    ecx
.text:0000552C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005533                 mov     [ebp+var_4], ecx
.text:00005536                 mov     ecx, [ebp+var_4] ; this
.text:00005539                 call    ??1CProp@@QAE@XZ ; CProp::~CProp(void)
.text:0000553E                 mov     eax, [ebp+arg_0]
.text:00005541                 and     eax, 1
.text:00005544                 jz      short loc_5552
.text:00005546                 mov     ecx, [ebp+var_4]
.text:00005549                 push    ecx             ; void *
.text:0000554A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000554F                 add     esp, 4
.text:00005552
.text:00005552 loc_5552:                               ; CODE XREF: CProp::`scalar deleting destructor'(uint)+1Cj
.text:00005552                 mov     eax, [ebp+var_4]
.text:00005555                 add     esp, 4
.text:00005558                 cmp     ebp, esp
.text:0000555A                 call    __RTC_CheckEsp
.text:0000555F                 mov     esp, ebp
.text:00005561                 pop     ebp
.text:00005562                 retn    4
.text:00005562 ??_GCProp@@QAEPAXI@Z endp
.text:00005562
.text:00005562 ; ---------------------------------------------------------------------------
.text:00005565                 align 4
.text:00005565 _text           ends
.text:00005565
.text:00005568 ; ===========================================================================
.text:00005568
.text:00005568 ; Segment type: Pure code
.text:00005568 ; Segment permissions: Read/Execute
.text:00005568 _text           segment para public 'CODE' use32
.text:00005568                 assume cs:_text
.text:00005568                 ;org 5568h
.text:00005568 ; COMDAT (pick any)
.text:00005568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005568
.text:00005568 ; =============== S U B R O U T I N E =======================================
.text:00005568
.text:00005568 ; Attributes: bp-based frame
.text:00005568
.text:00005568 ; public: void * __thiscall COneMethodInfo::`scalar deleting destructor'(unsigned int)
.text:00005568                 public ??_GCOneMethodInfo@@QAEPAXI@Z
.text:00005568 ??_GCOneMethodInfo@@QAEPAXI@Z proc near ; CODE XREF: CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>(void)+7Fp
.text:00005568                                         ; CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+59p
.text:00005568
.text:00005568 var_4           = dword ptr -4
.text:00005568 arg_0           = dword ptr  8
.text:00005568
.text:00005568                 push    ebp
.text:00005569                 mov     ebp, esp
.text:0000556B                 push    ecx
.text:0000556C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005573                 mov     [ebp+var_4], ecx
.text:00005576                 mov     ecx, [ebp+var_4] ; this
.text:00005579                 call    ??1COneMethodInfo@@QAE@XZ ; COneMethodInfo::~COneMethodInfo(void)
.text:0000557E                 mov     eax, [ebp+arg_0]
.text:00005581                 and     eax, 1
.text:00005584                 jz      short loc_5592
.text:00005586                 mov     ecx, [ebp+var_4]
.text:00005589                 push    ecx             ; void *
.text:0000558A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0000558F                 add     esp, 4
.text:00005592
.text:00005592 loc_5592:                               ; CODE XREF: COneMethodInfo::`scalar deleting destructor'(uint)+1Cj
.text:00005592                 mov     eax, [ebp+var_4]
.text:00005595                 add     esp, 4
.text:00005598                 cmp     ebp, esp
.text:0000559A                 call    __RTC_CheckEsp
.text:0000559F                 mov     esp, ebp
.text:000055A1                 pop     ebp
.text:000055A2                 retn    4
.text:000055A2 ??_GCOneMethodInfo@@QAEPAXI@Z endp
.text:000055A2
.text:000055A2 ; ---------------------------------------------------------------------------
.text:000055A5                 align 4
.text:000055A5 _text           ends
.text:000055A5
.text:000055A8 ; ===========================================================================
.text:000055A8
.text:000055A8 ; Segment type: Pure code
.text:000055A8 ; Segment permissions: Read/Execute
.text:000055A8 _text           segment para public 'CODE' use32
.text:000055A8                 assume cs:_text
.text:000055A8                 ;org 55A8h
.text:000055A8 ; COMDAT (pick any)
.text:000055A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055A8
.text:000055A8 ; =============== S U B R O U T I N E =======================================
.text:000055A8
.text:000055A8 ; Attributes: bp-based frame
.text:000055A8
.text:000055A8 ; _DWORD __thiscall CProp::~CProp(CProp *__hidden this)
.text:000055A8                 public ??1CProp@@QAE@XZ
.text:000055A8 ??1CProp@@QAE@XZ proc near              ; CODE XREF: CProp::`scalar deleting destructor'(uint)+11p
.text:000055A8
.text:000055A8 var_4           = dword ptr -4
.text:000055A8
.text:000055A8                 push    ebp
.text:000055A9                 mov     ebp, esp
.text:000055AB                 push    ecx
.text:000055AC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055B3                 mov     [ebp+var_4], ecx
.text:000055B6                 mov     ecx, [ebp+var_4]
.text:000055B9                 add     ecx, 8          ; this
.text:000055BC                 call    ??1CPropVariant@NCOM@NWindows@@QAE@XZ ; NWindows::NCOM::CPropVariant::~CPropVariant(void)
.text:000055C1                 add     esp, 4
.text:000055C4                 cmp     ebp, esp
.text:000055C6                 call    __RTC_CheckEsp
.text:000055CB                 mov     esp, ebp
.text:000055CD                 pop     ebp
.text:000055CE                 retn
.text:000055CE ??1CProp@@QAE@XZ endp
.text:000055CE
.text:000055CE ; ---------------------------------------------------------------------------
.text:000055CF                 align 10h
.text:000055CF _text           ends
.text:000055CF
.text:000055D0 ; ===========================================================================
.text:000055D0
.text:000055D0 ; Segment type: Pure code
.text:000055D0 ; Segment permissions: Read/Execute
.text:000055D0 _text           segment para public 'CODE' use32
.text:000055D0                 assume cs:_text
.text:000055D0                 ;org 55D0h
.text:000055D0 ; COMDAT (pick any)
.text:000055D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000055D0
.text:000055D0 ; =============== S U B R O U T I N E =======================================
.text:000055D0
.text:000055D0 ; Attributes: bp-based frame
.text:000055D0
.text:000055D0 ; public: __thiscall CRecordVector<void *>::CRecordVector<void *>(void)
.text:000055D0                 public ??0?$CRecordVector@PAX@@QAE@XZ
.text:000055D0 ??0?$CRecordVector@PAX@@QAE@XZ proc near
.text:000055D0                                         ; CODE XREF: CObjectVector<CProp>::CObjectVector<CProp>(void)+11p
.text:000055D0                                         ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>(void)+11p
.text:000055D0
.text:000055D0 var_4           = dword ptr -4
.text:000055D0
.text:000055D0                 push    ebp
.text:000055D1                 mov     ebp, esp
.text:000055D3                 push    ecx
.text:000055D4                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000055DB                 mov     [ebp+var_4], ecx
.text:000055DE                 mov     eax, [ebp+var_4]
.text:000055E1                 mov     dword ptr [eax], 0
.text:000055E7                 mov     ecx, [ebp+var_4]
.text:000055EA                 mov     dword ptr [ecx+4], 0
.text:000055F1                 mov     edx, [ebp+var_4]
.text:000055F4                 mov     dword ptr [edx+8], 0
.text:000055FB                 mov     eax, [ebp+var_4]
.text:000055FE                 mov     esp, ebp
.text:00005600                 pop     ebp
.text:00005601                 retn
.text:00005601 ??0?$CRecordVector@PAX@@QAE@XZ endp
.text:00005601
.text:00005601 ; ---------------------------------------------------------------------------
.text:00005602                 align 4
.text:00005602 _text           ends
.text:00005602
.text:00005604 ; ===========================================================================
.text:00005604
.text:00005604 ; Segment type: Pure code
.text:00005604 ; Segment permissions: Read/Execute
.text:00005604 _text           segment para public 'CODE' use32
.text:00005604                 assume cs:_text
.text:00005604                 ;org 5604h
.text:00005604 ; COMDAT (pick any)
.text:00005604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005604
.text:00005604 ; =============== S U B R O U T I N E =======================================
.text:00005604
.text:00005604 ; Attributes: bp-based frame
.text:00005604
.text:00005604 ; public: unsigned int __thiscall CRecordVector<void *>::Size(void)const
.text:00005604                 public ?Size@?$CRecordVector@PAX@@QBEIXZ
.text:00005604 ?Size@?$CRecordVector@PAX@@QBEIXZ proc near
.text:00005604                                         ; CODE XREF: CObjectVector<CProp>::Size(void)+11p
.text:00005604                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+46p ...
.text:00005604
.text:00005604 var_4           = dword ptr -4
.text:00005604
.text:00005604                 push    ebp
.text:00005605                 mov     ebp, esp
.text:00005607                 push    ecx
.text:00005608                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000560F                 mov     [ebp+var_4], ecx
.text:00005612                 mov     eax, [ebp+var_4]
.text:00005615                 mov     eax, [eax+4]
.text:00005618                 mov     esp, ebp
.text:0000561A                 pop     ebp
.text:0000561B                 retn
.text:0000561B ?Size@?$CRecordVector@PAX@@QBEIXZ endp
.text:0000561B
.text:0000561B _text           ends
.text:0000561B
.text:0000561C ; ===========================================================================
.text:0000561C
.text:0000561C ; Segment type: Pure code
.text:0000561C ; Segment permissions: Read/Execute
.text:0000561C _text           segment para public 'CODE' use32
.text:0000561C                 assume cs:_text
.text:0000561C                 ;org 561Ch
.text:0000561C ; COMDAT (pick any)
.text:0000561C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000561C
.text:0000561C ; =============== S U B R O U T I N E =======================================
.text:0000561C
.text:0000561C ; Attributes: bp-based frame
.text:0000561C
.text:0000561C ; public: bool __thiscall CRecordVector<void *>::IsEmpty(void)const
.text:0000561C                 public ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
.text:0000561C ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ proc near
.text:0000561C                                         ; CODE XREF: CObjectVector<CProp>::IsEmpty(void)+11p
.text:0000561C
.text:0000561C var_4           = dword ptr -4
.text:0000561C
.text:0000561C                 push    ebp
.text:0000561D                 mov     ebp, esp
.text:0000561F                 push    ecx
.text:00005620                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005627                 mov     [ebp+var_4], ecx
.text:0000562A                 mov     eax, [ebp+var_4]
.text:0000562D                 xor     ecx, ecx
.text:0000562F                 cmp     dword ptr [eax+4], 0
.text:00005633                 setz    cl
.text:00005636                 mov     al, cl
.text:00005638                 mov     esp, ebp
.text:0000563A                 pop     ebp
.text:0000563B                 retn
.text:0000563B ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ endp
.text:0000563B
.text:0000563B _text           ends
.text:0000563B
.text:0000563C ; ===========================================================================
.text:0000563C
.text:0000563C ; Segment type: Pure code
.text:0000563C ; Segment permissions: Read/Execute
.text:0000563C _text           segment para public 'CODE' use32
.text:0000563C                 assume cs:_text
.text:0000563C                 ;org 563Ch
.text:0000563C ; COMDAT (pick any)
.text:0000563C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000563C
.text:0000563C ; =============== S U B R O U T I N E =======================================
.text:0000563C
.text:0000563C ; Attributes: bp-based frame
.text:0000563C
.text:0000563C ; public: __thiscall CRecordVector<void *>::~CRecordVector<void *>(void)
.text:0000563C                 public ??1?$CRecordVector@PAX@@QAE@XZ
.text:0000563C ??1?$CRecordVector@PAX@@QAE@XZ proc near
.text:0000563C                                         ; CODE XREF: CObjectVector<CProp>::~CObjectVector<CProp>(void)+9Cp
.text:0000563C                                         ; __unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0+3j ...
.text:0000563C
.text:0000563C var_8           = dword ptr -8
.text:0000563C var_4           = dword ptr -4
.text:0000563C
.text:0000563C                 push    ebp
.text:0000563D                 mov     ebp, esp
.text:0000563F                 sub     esp, 8
.text:00005642                 mov     [ebp+var_8], 0CCCCCCCCh
.text:00005649                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005650                 mov     [ebp+var_4], ecx
.text:00005653                 mov     eax, [ebp+var_4]
.text:00005656                 mov     ecx, [eax]
.text:00005658                 mov     [ebp+var_8], ecx
.text:0000565B                 mov     edx, [ebp+var_8]
.text:0000565E                 push    edx             ; void *
.text:0000565F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00005664                 add     esp, 4
.text:00005667                 add     esp, 8
.text:0000566A                 cmp     ebp, esp
.text:0000566C                 call    __RTC_CheckEsp
.text:00005671                 mov     esp, ebp
.text:00005673                 pop     ebp
.text:00005674                 retn
.text:00005674 ??1?$CRecordVector@PAX@@QAE@XZ endp
.text:00005674
.text:00005674 ; ---------------------------------------------------------------------------
.text:00005675                 align 4
.text:00005675 _text           ends
.text:00005675
.text:00005678 ; ===========================================================================
.text:00005678
.text:00005678 ; Segment type: Pure code
.text:00005678 ; Segment permissions: Read/Execute
.text:00005678 _text           segment para public 'CODE' use32
.text:00005678                 assume cs:_text
.text:00005678                 ;org 5678h
.text:00005678 ; COMDAT (pick any)
.text:00005678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005678
.text:00005678 ; =============== S U B R O U T I N E =======================================
.text:00005678
.text:00005678 ; Attributes: bp-based frame
.text:00005678
.text:00005678 ; public: void __thiscall CRecordVector<void *>::DeleteFrontal(unsigned int)
.text:00005678                 public ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
.text:00005678 ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z proc near
.text:00005678                                         ; CODE XREF: CObjectVector<COneMethodInfo>::DeleteFrontal(uint)+73p
.text:00005678
.text:00005678 var_4           = dword ptr -4
.text:00005678 arg_0           = dword ptr  8
.text:00005678
.text:00005678                 push    ebp
.text:00005679                 mov     ebp, esp
.text:0000567B                 push    ecx
.text:0000567C                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005683                 mov     [ebp+var_4], ecx
.text:00005686                 cmp     [ebp+arg_0], 0
.text:0000568A                 jz      short loc_56A9
.text:0000568C                 mov     eax, [ebp+arg_0]
.text:0000568F                 push    eax
.text:00005690                 push    0
.text:00005692                 mov     ecx, [ebp+var_4]
.text:00005695                 call    ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems(uint,uint)
.text:0000569A                 mov     ecx, [ebp+var_4]
.text:0000569D                 mov     edx, [ecx+4]
.text:000056A0                 sub     edx, [ebp+arg_0]
.text:000056A3                 mov     eax, [ebp+var_4]
.text:000056A6                 mov     [eax+4], edx
.text:000056A9
.text:000056A9 loc_56A9:                               ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+12j
.text:000056A9                 add     esp, 4
.text:000056AC                 cmp     ebp, esp
.text:000056AE                 call    __RTC_CheckEsp
.text:000056B3                 mov     esp, ebp
.text:000056B5                 pop     ebp
.text:000056B6                 retn    4
.text:000056B6 ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z endp
.text:000056B6
.text:000056B6 ; ---------------------------------------------------------------------------
.text:000056B9                 align 4
.text:000056B9 _text           ends
.text:000056B9
.text:000056BC ; ===========================================================================
.text:000056BC
.text:000056BC ; Segment type: Pure code
.text:000056BC ; Segment permissions: Read/Execute
.text:000056BC _text           segment para public 'CODE' use32
.text:000056BC                 assume cs:_text
.text:000056BC                 ;org 56BCh
.text:000056BC ; COMDAT (pick any)
.text:000056BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056BC
.text:000056BC ; =============== S U B R O U T I N E =======================================
.text:000056BC
.text:000056BC ; Attributes: bp-based frame
.text:000056BC
.text:000056BC ; public: void * const & __thiscall CRecordVector<void *>::operator[](unsigned int)const
.text:000056BC                 public ??A?$CRecordVector@PAX@@QBEABQAXI@Z
.text:000056BC ??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
.text:000056BC                                         ; CODE XREF: CObjectVector<COneMethodInfo>::operator[](uint)+15p
.text:000056BC
.text:000056BC var_4           = dword ptr -4
.text:000056BC arg_0           = dword ptr  8
.text:000056BC
.text:000056BC                 push    ebp
.text:000056BD                 mov     ebp, esp
.text:000056BF                 push    ecx
.text:000056C0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056C7                 mov     [ebp+var_4], ecx
.text:000056CA                 mov     eax, [ebp+var_4]
.text:000056CD                 mov     ecx, [eax]
.text:000056CF                 mov     edx, [ebp+arg_0]
.text:000056D2                 lea     eax, [ecx+edx*4]
.text:000056D5                 mov     esp, ebp
.text:000056D7                 pop     ebp
.text:000056D8                 retn    4
.text:000056D8 ??A?$CRecordVector@PAX@@QBEABQAXI@Z endp
.text:000056D8
.text:000056D8 ; ---------------------------------------------------------------------------
.text:000056DB                 align 4
.text:000056DB _text           ends
.text:000056DB
.text:000056DC ; ===========================================================================
.text:000056DC
.text:000056DC ; Segment type: Pure code
.text:000056DC ; Segment permissions: Read/Execute
.text:000056DC _text           segment para public 'CODE' use32
.text:000056DC                 assume cs:_text
.text:000056DC                 ;org 56DCh
.text:000056DC ; COMDAT (pick any)
.text:000056DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056DC
.text:000056DC ; =============== S U B R O U T I N E =======================================
.text:000056DC
.text:000056DC ; Attributes: bp-based frame
.text:000056DC
.text:000056DC ; public: void * & __thiscall CRecordVector<void *>::operator[](unsigned int)
.text:000056DC                 public ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
.text:000056DC ??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
.text:000056DC                                         ; CODE XREF: CObjectVector<CProp>::operator[](uint)+15p
.text:000056DC                                         ; CObjectVector<CProp>::~CObjectVector<CProp>(void)+64p ...
.text:000056DC
.text:000056DC var_4           = dword ptr -4
.text:000056DC arg_0           = dword ptr  8
.text:000056DC
.text:000056DC                 push    ebp
.text:000056DD                 mov     ebp, esp
.text:000056DF                 push    ecx
.text:000056E0                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000056E7                 mov     [ebp+var_4], ecx
.text:000056EA                 mov     eax, [ebp+var_4]
.text:000056ED                 mov     ecx, [eax]
.text:000056EF                 mov     edx, [ebp+arg_0]
.text:000056F2                 lea     eax, [ecx+edx*4]
.text:000056F5                 mov     esp, ebp
.text:000056F7                 pop     ebp
.text:000056F8                 retn    4
.text:000056F8 ??A?$CRecordVector@PAX@@QAEAAPAXI@Z endp
.text:000056F8
.text:000056F8 ; ---------------------------------------------------------------------------
.text:000056FB                 align 4
.text:000056FB _text           ends
.text:000056FB
.text:000056FC ; ===========================================================================
.text:000056FC
.text:000056FC ; Segment type: Pure code
.text:000056FC ; Segment permissions: Read/Execute
.text:000056FC _text           segment para public 'CODE' use32
.text:000056FC                 assume cs:_text
.text:000056FC                 ;org 56FCh
.text:000056FC ; COMDAT (pick any)
.text:000056FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000056FC
.text:000056FC ; =============== S U B R O U T I N E =======================================
.text:000056FC
.text:000056FC ; Attributes: bp-based frame
.text:000056FC
.text:000056FC ; private: void __thiscall CRecordVector<void *>::MoveItems(unsigned int, unsigned int)
.text:000056FC                 public ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
.text:000056FC ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z proc near
.text:000056FC                                         ; CODE XREF: CRecordVector<void *>::DeleteFrontal(uint)+1Dp
.text:000056FC
.text:000056FC var_4           = dword ptr -4
.text:000056FC arg_0           = dword ptr  8
.text:000056FC arg_4           = dword ptr  0Ch
.text:000056FC
.text:000056FC                 push    ebp
.text:000056FD                 mov     ebp, esp
.text:000056FF                 push    ecx
.text:00005700                 push    esi
.text:00005701                 mov     [ebp+var_4], 0CCCCCCCCh
.text:00005708                 mov     [ebp+var_4], ecx
.text:0000570B                 mov     eax, [ebp+var_4]
.text:0000570E                 mov     ecx, [eax+4]
.text:00005711                 sub     ecx, [ebp+arg_4]
.text:00005714                 shl     ecx, 2
.text:00005717                 mov     esi, esp
.text:00005719                 push    ecx             ; Size
.text:0000571A                 mov     edx, [ebp+var_4]
.text:0000571D                 mov     eax, [edx]
.text:0000571F                 mov     ecx, [ebp+arg_4]
.text:00005722                 lea     edx, [eax+ecx*4]
.text:00005725                 push    edx             ; Src
.text:00005726                 mov     eax, [ebp+var_4]
.text:00005729                 mov     ecx, [eax]
.text:0000572B                 mov     edx, [ebp+arg_0]
.text:0000572E                 lea     eax, [ecx+edx*4]
.text:00005731                 push    eax             ; Dst
.text:00005732                 call    dword ptr ds:__imp__memmove
.text:00005738                 add     esp, 0Ch
.text:0000573B                 cmp     esi, esp
.text:0000573D                 call    __RTC_CheckEsp
.text:00005742                 pop     esi
.text:00005743                 add     esp, 4
.text:00005746                 cmp     ebp, esp
.text:00005748                 call    __RTC_CheckEsp
.text:0000574D                 mov     esp, ebp
.text:0000574F                 pop     ebp
.text:00005750                 retn    8
.text:00005750 ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z endp
.text:00005750
.text:00005750 ; ---------------------------------------------------------------------------
.text:00005753                 align 4
.text:00005753 _text           ends
.text:00005753
.text:00005754 ; ===========================================================================
.text:00005754
.text:00005754 ; Segment type: Pure code
.text:00005754 ; Segment permissions: Read/Execute
.text:00005754 _text           segment para public 'CODE' use32
.text:00005754                 assume cs:_text
.text:00005754                 ;org 5754h
.text:00005754 ; COMDAT (pick any)
.text:00005754                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005754
.text:00005754 ; =============== S U B R O U T I N E =======================================
.text:00005754
.text:00005754
.text:00005754 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::Release`adjustor{4}' (void)
.text:00005754                 public ?Release@CHandler@NXz@NArchive@@W3AGKXZ
.text:00005754 ?Release@CHandler@NXz@NArchive@@W3AGKXZ proc near
.text:00005754                                         ; DATA XREF: .rdata:00003638o
.text:00005754
.text:00005754 arg_0           = dword ptr  4
.text:00005754
.text:00005754                 sub     [esp+arg_0], 4
.text:00005759                 jmp     ?Release@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::Release(void)
.text:00005759 ?Release@CHandler@NXz@NArchive@@W3AGKXZ endp
.text:00005759
.text:00005759 ; ---------------------------------------------------------------------------
.text:0000575E                 align 10h
.text:0000575E _text           ends
.text:0000575E
.text:00005760 ; ===========================================================================
.text:00005760
.text:00005760 ; Segment type: Pure code
.text:00005760 ; Segment permissions: Read/Execute
.text:00005760 _text           segment para public 'CODE' use32
.text:00005760                 assume cs:_text
.text:00005760                 ;org 5760h
.text:00005760 ; COMDAT (pick any)
.text:00005760                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005760
.text:00005760 ; =============== S U B R O U T I N E =======================================
.text:00005760
.text:00005760
.text:00005760 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::Release`adjustor{8}' (void)
.text:00005760                 public ?Release@CHandler@NXz@NArchive@@W7AGKXZ
.text:00005760 ?Release@CHandler@NXz@NArchive@@W7AGKXZ proc near
.text:00005760                                         ; DATA XREF: .rdata:00003620o
.text:00005760
.text:00005760 arg_0           = dword ptr  4
.text:00005760
.text:00005760                 sub     [esp+arg_0], 8
.text:00005765                 jmp     ?Release@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::Release(void)
.text:00005765 ?Release@CHandler@NXz@NArchive@@W7AGKXZ endp
.text:00005765
.text:00005765 ; ---------------------------------------------------------------------------
.text:0000576A                 align 4
.text:0000576A _text           ends
.text:0000576A
.text:0000576C ; ===========================================================================
.text:0000576C
.text:0000576C ; Segment type: Pure code
.text:0000576C ; Segment permissions: Read/Execute
.text:0000576C _text           segment para public 'CODE' use32
.text:0000576C                 assume cs:_text
.text:0000576C                 ;org 576Ch
.text:0000576C ; COMDAT (pick any)
.text:0000576C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000576C
.text:0000576C ; =============== S U B R O U T I N E =======================================
.text:0000576C
.text:0000576C
.text:0000576C ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::Release`adjustor{12}' (void)
.text:0000576C                 public ?Release@CHandler@NXz@NArchive@@WM@AGKXZ
.text:0000576C ?Release@CHandler@NXz@NArchive@@WM@AGKXZ proc near
.text:0000576C                                         ; DATA XREF: .rdata:0000360Co
.text:0000576C
.text:0000576C arg_0           = dword ptr  4
.text:0000576C
.text:0000576C                 sub     [esp+arg_0], 0Ch
.text:00005771                 jmp     ?Release@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::Release(void)
.text:00005771 ?Release@CHandler@NXz@NArchive@@WM@AGKXZ endp
.text:00005771
.text:00005771 ; ---------------------------------------------------------------------------
.text:00005776                 align 4
.text:00005776 _text           ends
.text:00005776
.text:00005778 ; ===========================================================================
.text:00005778
.text:00005778 ; Segment type: Pure code
.text:00005778 ; Segment permissions: Read/Execute
.text:00005778 _text           segment para public 'CODE' use32
.text:00005778                 assume cs:_text
.text:00005778                 ;org 5778h
.text:00005778 ; COMDAT (pick any)
.text:00005778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005778
.text:00005778 ; =============== S U B R O U T I N E =======================================
.text:00005778
.text:00005778
.text:00005778 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::AddRef`adjustor{4}' (void)
.text:00005778                 public ?AddRef@CHandler@NXz@NArchive@@W3AGKXZ
.text:00005778 ?AddRef@CHandler@NXz@NArchive@@W3AGKXZ proc near
.text:00005778                                         ; DATA XREF: .rdata:00003634o
.text:00005778
.text:00005778 arg_0           = dword ptr  4
.text:00005778
.text:00005778                 sub     [esp+arg_0], 4
.text:0000577D                 jmp     ?AddRef@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::AddRef(void)
.text:0000577D ?AddRef@CHandler@NXz@NArchive@@W3AGKXZ endp
.text:0000577D
.text:0000577D ; ---------------------------------------------------------------------------
.text:00005782                 align 4
.text:00005782 _text           ends
.text:00005782
.text:00005784 ; ===========================================================================
.text:00005784
.text:00005784 ; Segment type: Pure code
.text:00005784 ; Segment permissions: Read/Execute
.text:00005784 _text           segment para public 'CODE' use32
.text:00005784                 assume cs:_text
.text:00005784                 ;org 5784h
.text:00005784 ; COMDAT (pick any)
.text:00005784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005784
.text:00005784 ; =============== S U B R O U T I N E =======================================
.text:00005784
.text:00005784
.text:00005784 ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::AddRef`adjustor{8}' (void)
.text:00005784                 public ?AddRef@CHandler@NXz@NArchive@@W7AGKXZ
.text:00005784 ?AddRef@CHandler@NXz@NArchive@@W7AGKXZ proc near
.text:00005784                                         ; DATA XREF: .rdata:0000361Co
.text:00005784
.text:00005784 arg_0           = dword ptr  4
.text:00005784
.text:00005784                 sub     [esp+arg_0], 8
.text:00005789                 jmp     ?AddRef@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::AddRef(void)
.text:00005789 ?AddRef@CHandler@NXz@NArchive@@W7AGKXZ endp
.text:00005789
.text:00005789 ; ---------------------------------------------------------------------------
.text:0000578E                 align 10h
.text:0000578E _text           ends
.text:0000578E
.text:00005790 ; ===========================================================================
.text:00005790
.text:00005790 ; Segment type: Pure code
.text:00005790 ; Segment permissions: Read/Execute
.text:00005790 _text           segment para public 'CODE' use32
.text:00005790                 assume cs:_text
.text:00005790                 ;org 5790h
.text:00005790 ; COMDAT (pick any)
.text:00005790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005790
.text:00005790 ; =============== S U B R O U T I N E =======================================
.text:00005790
.text:00005790
.text:00005790 ; [thunk]:public: virtual long __stdcall NArchive::NXz::CHandler::QueryInterface`adjustor{4}' (struct _GUID const &, void * *)
.text:00005790                 public ?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
.text:00005790 ?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z proc near
.text:00005790                                         ; DATA XREF: .rdata:const NArchive::NXz::CHandler::`vftable'{for `IArchiveOpenSeq'}o
.text:00005790
.text:00005790 arg_0           = dword ptr  4
.text:00005790
.text:00005790                 sub     [esp+arg_0], 4
.text:00005795                 jmp     ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)
.text:00005795 ?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z endp
.text:00005795
.text:00005795 ; ---------------------------------------------------------------------------
.text:0000579A                 align 4
.text:0000579A _text           ends
.text:0000579A
.text:0000579C ; ===========================================================================
.text:0000579C
.text:0000579C ; Segment type: Pure code
.text:0000579C ; Segment permissions: Read/Execute
.text:0000579C _text           segment para public 'CODE' use32
.text:0000579C                 assume cs:_text
.text:0000579C                 ;org 579Ch
.text:0000579C ; COMDAT (pick any)
.text:0000579C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:0000579C
.text:0000579C ; =============== S U B R O U T I N E =======================================
.text:0000579C
.text:0000579C
.text:0000579C ; [thunk]:public: virtual unsigned long __stdcall NArchive::NXz::CHandler::AddRef`adjustor{12}' (void)
.text:0000579C                 public ?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ
.text:0000579C ?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ proc near
.text:0000579C                                         ; DATA XREF: .rdata:00003608o
.text:0000579C
.text:0000579C arg_0           = dword ptr  4
.text:0000579C
.text:0000579C                 sub     [esp+arg_0], 0Ch
.text:000057A1                 jmp     ?AddRef@CHandler@NXz@NArchive@@UAGKXZ ; NArchive::NXz::CHandler::AddRef(void)
.text:000057A1 ?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ endp
.text:000057A1
.text:000057A1 ; ---------------------------------------------------------------------------
.text:000057A6                 align 4
.text:000057A6 _text           ends
.text:000057A6
.text:000057A8 ; ===========================================================================
.text:000057A8
.text:000057A8 ; Segment type: Pure code
.text:000057A8 ; Segment permissions: Read/Execute
.text:000057A8 _text           segment para public 'CODE' use32
.text:000057A8                 assume cs:_text
.text:000057A8                 ;org 57A8h
.text:000057A8 ; COMDAT (pick any)
.text:000057A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057A8
.text:000057A8 ; =============== S U B R O U T I N E =======================================
.text:000057A8
.text:000057A8
.text:000057A8 ; [thunk]:public: virtual long __stdcall NArchive::NXz::CHandler::QueryInterface`adjustor{8}' (struct _GUID const &, void * *)
.text:000057A8                 public ?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
.text:000057A8 ?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z proc near
.text:000057A8                                         ; DATA XREF: .rdata:const NArchive::NXz::CHandler::`vftable'{for `IOutArchive'}o
.text:000057A8
.text:000057A8 arg_0           = dword ptr  4
.text:000057A8
.text:000057A8                 sub     [esp+arg_0], 8
.text:000057AD                 jmp     ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)
.text:000057AD ?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z endp
.text:000057AD
.text:000057AD ; ---------------------------------------------------------------------------
.text:000057B2                 align 4
.text:000057B2 _text           ends
.text:000057B2
.text:000057B4 ; ===========================================================================
.text:000057B4
.text:000057B4 ; Segment type: Pure code
.text:000057B4 ; Segment permissions: Read/Execute
.text:000057B4 _text           segment para public 'CODE' use32
.text:000057B4                 assume cs:_text
.text:000057B4                 ;org 57B4h
.text:000057B4 ; COMDAT (pick any)
.text:000057B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057B4
.text:000057B4 ; =============== S U B R O U T I N E =======================================
.text:000057B4
.text:000057B4
.text:000057B4 ; [thunk]:public: virtual long __stdcall NArchive::NXz::CHandler::QueryInterface`adjustor{12}' (struct _GUID const &, void * *)
.text:000057B4                 public ?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
.text:000057B4 ?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z proc near
.text:000057B4                                         ; DATA XREF: .rdata:const NArchive::NXz::CHandler::`vftable'{for `ISetProperties'}o
.text:000057B4
.text:000057B4 arg_0           = dword ptr  4
.text:000057B4
.text:000057B4                 sub     [esp+arg_0], 0Ch
.text:000057B9                 jmp     ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)
.text:000057B9 ?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z endp
.text:000057B9
.text:000057B9 ; ---------------------------------------------------------------------------
.text:000057BE                 align 10h
.text:000057BE _text           ends
.text:000057BE
.text$yc:000057C0 ; ===========================================================================
.text$yc:000057C0
.text$yc:000057C0 ; Segment type: Pure code
.text$yc:000057C0 ; Segment permissions: Read/Execute
.text$yc:000057C0 _text$yc        segment para public 'CODE' use32
.text$yc:000057C0                 assume cs:_text$yc
.text$yc:000057C0                 ;org 57C0h
.text$yc:000057C0 ; COMDAT (pick any)
.text$yc:000057C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000057C0
.text$yc:000057C0 ; =============== S U B R O U T I N E =======================================
.text$yc:000057C0
.text$yc:000057C0 ; Attributes: bp-based frame
.text$yc:000057C0
.text$yc:000057C0 ; void __cdecl NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit''(void)
.text$yc:000057C0 ??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ proc near
.text$yc:000057C0                                         ; DATA XREF: .CRT$XCU:_g_Crc64TableInit$initializer$o
.text$yc:000057C0                 push    ebp
.text$yc:000057C1                 mov     ebp, esp
.text$yc:000057C3                 mov     ecx, offset ?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A ; this
.text$yc:000057C8                 call    ??0CCrc64Gen@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CCrc64Gen::CCrc64Gen(void)
.text$yc:000057CD                 cmp     ebp, esp
.text$yc:000057CF                 call    __RTC_CheckEsp
.text$yc:000057D4                 pop     ebp
.text$yc:000057D5                 retn
.text$yc:000057D5 ??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ endp
.text$yc:000057D5
.text$yc:000057D5 ; ---------------------------------------------------------------------------
.text$yc:000057D6                 align 4
.text$yc:000057D6 _text$yc        ends
.text$yc:000057D6
.text:000057D8 ; ===========================================================================
.text:000057D8
.text:000057D8 ; Segment type: Pure code
.text:000057D8 ; Segment permissions: Read/Execute
.text:000057D8 _text           segment para public 'CODE' use32
.text:000057D8                 assume cs:_text
.text:000057D8                 ;org 57D8h
.text:000057D8 ; COMDAT (pick any)
.text:000057D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:000057D8
.text:000057D8 ; =============== S U B R O U T I N E =======================================
.text:000057D8
.text:000057D8 ; Attributes: bp-based frame
.text:000057D8
.text:000057D8 ; _DWORD __thiscall NArchive::NXz::CCrc64Gen::CCrc64Gen(NArchive::NXz::CCrc64Gen *__hidden this)
.text:000057D8                 public ??0CCrc64Gen@NXz@NArchive@@QAE@XZ
.text:000057D8 ??0CCrc64Gen@NXz@NArchive@@QAE@XZ proc near
.text:000057D8                                         ; CODE XREF: NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit''(void)+8p
.text:000057D8
.text:000057D8 var_4           = dword ptr -4
.text:000057D8
.text:000057D8                 push    ebp
.text:000057D9                 mov     ebp, esp
.text:000057DB                 push    ecx
.text:000057DC                 mov     [ebp+var_4], 0CCCCCCCCh
.text:000057E3                 mov     [ebp+var_4], ecx
.text:000057E6                 call    @Crc64GenerateTable@0 ; Crc64GenerateTable()
.text:000057EB                 mov     eax, [ebp+var_4]
.text:000057EE                 add     esp, 4
.text:000057F1                 cmp     ebp, esp
.text:000057F3                 call    __RTC_CheckEsp
.text:000057F8                 mov     esp, ebp
.text:000057FA                 pop     ebp
.text:000057FB                 retn
.text:000057FB ??0CCrc64Gen@NXz@NArchive@@QAE@XZ endp
.text:000057FB
.text:000057FB _text           ends
.text:000057FB
.text$yc:000057FC ; ===========================================================================
.text$yc:000057FC
.text$yc:000057FC ; Segment type: Pure code
.text$yc:000057FC ; Segment permissions: Read/Execute
.text$yc:000057FC _text$yc        segment para public 'CODE' use32
.text$yc:000057FC                 assume cs:_text$yc
.text$yc:000057FC                 ;org 57FCh
.text$yc:000057FC ; COMDAT (pick any)
.text$yc:000057FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yc:000057FC
.text$yc:000057FC ; =============== S U B R O U T I N E =======================================
.text$yc:000057FC
.text$yc:000057FC ; Attributes: bp-based frame
.text$yc:000057FC
.text$yc:000057FC ; void __cdecl NArchive::NXz::`dynamic initializer for 'g_RegisterArc''(void)
.text$yc:000057FC ??__Eg_RegisterArc@NXz@NArchive@@YAXXZ proc near
.text$yc:000057FC                                         ; DATA XREF: .CRT$XCU:_g_RegisterArc$initializer$o
.text$yc:000057FC                 push    ebp
.text$yc:000057FD                 mov     ebp, esp
.text$yc:000057FF                 mov     ecx, offset _g_RegisterArc ; this
.text$yc:00005804                 call    ??0CRegisterArc@NXz@NArchive@@QAE@XZ ; NArchive::NXz::CRegisterArc::CRegisterArc(void)
.text$yc:00005809                 cmp     ebp, esp
.text$yc:0000580B                 call    __RTC_CheckEsp
.text$yc:00005810                 pop     ebp
.text$yc:00005811                 retn
.text$yc:00005811 ??__Eg_RegisterArc@NXz@NArchive@@YAXXZ endp
.text$yc:00005811
.text$yc:00005811 ; ---------------------------------------------------------------------------
.text$yc:00005812                 align 4
.text$yc:00005812 _text$yc        ends
.text$yc:00005812
.text:00005814 ; ===========================================================================
.text:00005814
.text:00005814 ; Segment type: Pure code
.text:00005814 ; Segment permissions: Read/Execute
.text:00005814 _text           segment para public 'CODE' use32
.text:00005814                 assume cs:_text
.text:00005814                 ;org 5814h
.text:00005814 ; COMDAT (pick any)
.text:00005814                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text:00005814
.text:00005814 ; =============== S U B R O U T I N E =======================================
.text:00005814
.text:00005814 ; Attributes: bp-based frame
.text:00005814
.text:00005814 ; _DWORD __thiscall NArchive::NXz::CRegisterArc::CRegisterArc(NArchive::NXz::CRegisterArc *__hidden this)
.text:00005814                 public ??0CRegisterArc@NXz@NArchive@@QAE@XZ
.text:00005814 ??0CRegisterArc@NXz@NArchive@@QAE@XZ proc near
.text:00005814                                         ; CODE XREF: NArchive::NXz::`dynamic initializer for 'g_RegisterArc''(void)+8p
.text:00005814
.text:00005814 var_4           = dword ptr -4
.text:00005814
.text:00005814                 push    ebp
.text:00005815                 mov     ebp, esp
.text:00005817                 push    ecx
.text:00005818                 mov     [ebp+var_4], 0CCCCCCCCh
.text:0000581F                 mov     [ebp+var_4], ecx
.text:00005822                 push    offset _g_ArcInfo ; struct CArcInfo *
.text:00005827                 call    ?RegisterArc@@YGXPBUCArcInfo@@@Z ; RegisterArc(CArcInfo const *)
.text:0000582C                 mov     eax, [ebp+var_4]
.text:0000582F                 add     esp, 4
.text:00005832                 cmp     ebp, esp
.text:00005834                 call    __RTC_CheckEsp
.text:00005839                 mov     esp, ebp
.text:0000583B                 pop     ebp
.text:0000583C                 retn
.text:0000583C ??0CRegisterArc@NXz@NArchive@@QAE@XZ endp
.text:0000583C
.text:0000583C ; ---------------------------------------------------------------------------
.text:0000583D                 align 10h
.text:0000583D _text           ends
.text:0000583D
.bss:00005840 ; ===========================================================================
.bss:00005840
.bss:00005840 ; Segment type: Uninitialized
.bss:00005840 ; Segment permissions: Read/Write
.bss:00005840 _bss            segment byte public 'BSS' use32
.bss:00005840                 assume cs:_bss
.bss:00005840                 ;org 5840h
.bss:00005840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00005840                 public ?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A
.bss:00005840 ; NArchive::NXz::CCrc64Gen NArchive::NXz::g_Crc64TableInit
.bss:00005840 ?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A db    ? ;
.bss:00005840                                         ; DATA XREF: NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit''(void)+3o
.bss:00005841 ; NArchive::NXz::CRegisterArc g_RegisterArc
.bss:00005841 _g_RegisterArc  db    ? ;               ; DATA XREF: NArchive::NXz::`dynamic initializer for 'g_RegisterArc''(void)+3o
.bss:00005842                 align 4
.bss:00005842 _bss            ends
.bss:00005842
.CRT$XCU:00005844 ; ===========================================================================
.CRT$XCU:00005844
.CRT$XCU:00005844 ; Segment type: Pure data
.CRT$XCU:00005844 ; Segment permissions: Read
.CRT$XCU:00005844 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00005844                 assume cs:_CRT$XCU
.CRT$XCU:00005844                 ;org 5844h
.CRT$XCU:00005844 _g_Crc64TableInit$initializer$ dd offset ??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ ; NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit''(void)
.CRT$XCU:00005848 _g_RegisterArc$initializer$ dd offset ??__Eg_RegisterArc@NXz@NArchive@@YAXXZ ; NArchive::NXz::`dynamic initializer for 'g_RegisterArc''(void)
.CRT$XCU:00005848 _CRT$XCU        ends
.CRT$XCU:00005848
UNDEF:00005850 ; ===========================================================================
UNDEF:00005850
UNDEF:00005850 ; Segment type: Externs
UNDEF:00005850 ; UNDEF
UNDEF:00005850                 extrn _XZ_SIG:near      ; DATA XREF: .rdata:00000114o
UNDEF:00005854                 extrn __RTC_Shutdown:near
UNDEF:00005854                                         ; DATA XREF: .rtc$TMZ:__RTC_Shutdown_rtc$TMZo
UNDEF:00005858                 extrn __RTC_InitBase:near
UNDEF:00005858                                         ; DATA XREF: .rtc$IMZ:__RTC_InitBase_rtc$IMZo
UNDEF:0000585C ; public: __thiscall AString::AString(void)
UNDEF:0000585C                 extrn ??0AString@@QAE@XZ:near
UNDEF:0000585C                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+D2p
UNDEF:0000585C                                         ; NArchive::NXz::GetCheckString(CXzs const &)+84p ...
UNDEF:00005860                 extrn ___security_cookie:near
UNDEF:00005860                                         ; DATA XREF: NArchive::NXz::CHandler::CHandler(void)+19r
UNDEF:00005860                                         ; NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+27r ...
UNDEF:00005864                 extrn ___CxxFrameHandler3:near
UNDEF:00005864                                         ; CODE XREF: __ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ+16j
UNDEF:00005864                                         ; __ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z+16j ...
UNDEF:00005868 ; __fastcall __security_check_cookie(x)
UNDEF:00005868                 extrn @__security_check_cookie@4:near
UNDEF:00005868                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+43Fp
UNDEF:00005868                                         ; NArchive::NXz::GetMethodString(CXzFilter const &)+1DBp ...
UNDEF:0000586C                 extrn __RTC_CheckEsp:near
UNDEF:0000586C                                         ; CODE XREF: NArchive::NXz::CHandler::CHandler(void)+FDp
UNDEF:0000586C                                         ; NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+27Fp ...
UNDEF:00005870 ; const type_info::`vftable'
UNDEF:00005870                 extrn ??_7type_info@@6B@:near
UNDEF:00005870                                         ; DATA XREF: .data:NArchive::NXz::CHandler `RTTI Type Descriptor'o
UNDEF:00005870                                         ; .data:IInArchive `RTTI Type Descriptor'o ...
UNDEF:00005874 ; void __cdecl operator delete(void *)
UNDEF:00005874                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3+7p
UNDEF:00005874                                         ; __unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6+7p ...
UNDEF:00005878 ; void __thiscall NArchive::CMultiMethodProps::Init(NArchive::CMultiMethodProps *__hidden this)
UNDEF:00005878                 extrn ?Init@CMultiMethodProps@NArchive@@QAEXXZ:near
UNDEF:00005878                                         ; CODE XREF: NArchive::CMultiMethodProps::CMultiMethodProps(void)+51p
UNDEF:00005878                                         ; NArchive::NXz::CHandler::Init(void)+21p
UNDEF:0000587C ; _DWORD __thiscall UString::UString(UString *__hidden this)
UNDEF:0000587C                 extrn ??0UString@@QAE@XZ:near
UNDEF:0000587C                                         ; CODE XREF: COneMethodInfo::COneMethodInfo(void)+51p
UNDEF:00005880                 extrn _IID_ISetProperties:near
UNDEF:00005880                                         ; DATA XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *):loc_435Eo
UNDEF:00005884                 extrn _IID_IOutArchive:near
UNDEF:00005884                                         ; DATA XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *):loc_432Ao
UNDEF:00005888                 extrn _IID_IArchiveOpenSeq:near
UNDEF:00005888                                         ; DATA XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *):loc_42F6o
UNDEF:0000588C                 extrn _IID_IInArchive:near
UNDEF:0000588C                                         ; DATA XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *):loc_42D7o
UNDEF:00005890 ; const IID IID_IUnknown
UNDEF:00005890                 extrn _IID_IUnknown:near
UNDEF:00005890                                         ; DATA XREF: NArchive::NXz::CHandler::QueryInterface(_GUID const &,void * *)+24o
UNDEF:00005894 ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:00005894                 extrn _memcmp:near      ; CODE XREF: IsEqualGUID(x,x)+Dp
UNDEF:00005898                 extrn __purecall:near   ; DATA XREF: .rdata:const IInArchive::`vftable'o
UNDEF:00005898                                         ; .rdata:000046ECo ...
UNDEF:0000589C ; unsigned char const * const k7z_PROPID_To_VARTYPE
UNDEF:0000589C                 extrn ?k7z_PROPID_To_VARTYPE@@3QBEB:near
UNDEF:0000589C                                         ; DATA XREF: NArchive::NXz::CHandler::GetPropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:0000589C                                         ; NArchive::NXz::CHandler::GetArchivePropertyInfo(uint,wchar_t * *,ulong *,ushort *)+24r
UNDEF:000058A0 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Detach(NWindows::NCOM::CPropVariant *__hidden this, struct tagPROPVARIANT *)
UNDEF:000058A0                 extrn ?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:near
UNDEF:000058A0                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+218p
UNDEF:000058A0                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+EEp
UNDEF:000058A4 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned int)
UNDEF:000058A4                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:near
UNDEF:000058A4                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+20Cp
UNDEF:000058A8 ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(char const *)
UNDEF:000058A8                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:near
UNDEF:000058A8                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+14Ap
UNDEF:000058A8                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+E2p
UNDEF:000058AC ; public: class NWindows::NCOM::CPropVariant & __thiscall NWindows::NCOM::CPropVariant::operator=(unsigned __int64)
UNDEF:000058AC                 extrn ??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:near
UNDEF:000058AC                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+97p
UNDEF:000058AC                                         ; NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+BDp ...
UNDEF:000058B0 ; __fastcall _RTC_CheckStackVars(x, x)
UNDEF:000058B0                 extrn @_RTC_CheckStackVars@8:near
UNDEF:000058B0                                         ; CODE XREF: NArchive::NXz::CHandler::GetArchiveProperty(ulong,tagPROPVARIANT *)+265p
UNDEF:000058B0                                         ; NArchive::NXz::CHandler::GetProperty(uint,ulong,tagPROPVARIANT *)+13Bp ...
UNDEF:000058B4 ; __int32 __thiscall NWindows::NCOM::CPropVariant::Clear(NWindows::NCOM::CPropVariant *__hidden this)
UNDEF:000058B4                 extrn ?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:near
UNDEF:000058B4                                         ; CODE XREF: NWindows::NCOM::CPropVariant::~CPropVariant(void)+11p
UNDEF:000058B8 ; __stdcall Xzs_GetNumBlocks(x)
UNDEF:000058B8                 extrn _Xzs_GetNumBlocks@4:near
UNDEF:000058B8                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+313p
UNDEF:000058BC ; __stdcall Xzs_GetUnpackSize(x)
UNDEF:000058BC                 extrn _Xzs_GetUnpackSize@4:near
UNDEF:000058BC                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+2D9p
UNDEF:000058C0 ; __stdcall Xzs_ReadBackward(x, x, x, x, x)
UNDEF:000058C0                 extrn _Xzs_ReadBackward@20:near
UNDEF:000058C0                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+24Bp
UNDEF:000058C4                 extrn _g_Alloc:near     ; DATA XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+22Ao
UNDEF:000058C4                                         ; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(void)+21o ...
UNDEF:000058C8 ; __stdcall LookToRead_Init(x)
UNDEF:000058C8                 extrn _LookToRead_Init@4:near
UNDEF:000058C8                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+204p
UNDEF:000058CC ; __stdcall LookToRead_CreateVTable(x, x)
UNDEF:000058CC                 extrn _LookToRead_CreateVTable@8:near
UNDEF:000058CC                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1ECp
UNDEF:000058D0 ; _DWORD __thiscall CSeekInStreamWrap::CSeekInStreamWrap(CSeekInStreamWrap *__hidden this, struct IInStream *)
UNDEF:000058D0                 extrn ??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z:near
UNDEF:000058D0                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+1DEp
UNDEF:000058D4 ; __stdcall XzBlock_ReadHeader(x, x, x, x)
UNDEF:000058D4                 extrn _XzBlock_ReadHeader@16:near
UNDEF:000058D4                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+9Bp
UNDEF:000058D8 ; __stdcall Xz_ReadHeader(x, x)
UNDEF:000058D8                 extrn _Xz_ReadHeader@8:near
UNDEF:000058D8                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+66p
UNDEF:000058DC ; _DWORD __thiscall CSeqInStreamWrap::CSeqInStreamWrap(CSeqInStreamWrap *__hidden this, struct ISequentialInStream *)
UNDEF:000058DC                 extrn ??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z:near
UNDEF:000058DC                                         ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+59p
UNDEF:000058DC                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3BEp
UNDEF:000058E0                 extrn __chkstk:near     ; CODE XREF: NArchive::NXz::CHandler::Open2(IInStream *,IArchiveOpenCallback *)+16p
UNDEF:000058E4 ; public: __thiscall AString::AString(class AString const &)
UNDEF:000058E4                 extrn ??0AString@@QAE@ABV0@@Z:near
UNDEF:000058E4                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+19Cp
UNDEF:000058E4                                         ; NArchive::NXz::GetCheckString(CXzs const &)+11Fp
UNDEF:000058E8 ; public: __thiscall AString::AString(char const *)
UNDEF:000058E8                 extrn ??0AString@@QAE@PBD@Z:near
UNDEF:000058E8                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+C2p
UNDEF:000058EC ; void __stdcall ConvertUInt64ToString(unsigned __int64, char *)
UNDEF:000058EC                 extrn ?ConvertUInt64ToString@@YGX_KPAD@Z:near
UNDEF:000058EC                                         ; CODE XREF: NArchive::NXz::GetMethodString(CXzFilter const &)+B0p
UNDEF:000058F0 ; void __thiscall AString::Grow_1(AString *__hidden this)
UNDEF:000058F0                 extrn ?Grow_1@AString@@AAEXXZ:near
UNDEF:000058F0                                         ; CODE XREF: AString::operator+=(char)+2Fp
UNDEF:000058F4 ; public: class AString & __thiscall AString::operator+=(char const *)
UNDEF:000058F4                 extrn ??YAString@@QAEAAV0@PBD@Z:near
UNDEF:000058F4                                         ; CODE XREF: NArchive::NXz::AddUInt32ToString(AString &,uint)+3Ep
UNDEF:000058F8 ; void __stdcall ConvertUInt32ToString(unsigned int, char *)
UNDEF:000058F8                 extrn ?ConvertUInt32ToString@@YGXIPAD@Z:near
UNDEF:000058F8                                         ; CODE XREF: NArchive::NXz::AddUInt32ToString(AString &,uint)+32p
UNDEF:000058FC ; public: class AString & __thiscall AString::operator+=(class AString const &)
UNDEF:000058FC                 extrn ??YAString@@QAEAAV0@ABV0@@Z:near
UNDEF:000058FC                                         ; CODE XREF: NArchive::NXz::AddString(AString &,AString const &)+12p
UNDEF:00005900 ; void __thiscall AString::Add_Space_if_NotEmpty(AString *__hidden this)
UNDEF:00005900                 extrn ?Add_Space_if_NotEmpty@AString@@QAEXXZ:near
UNDEF:00005900                                         ; CODE XREF: NArchive::NXz::AddString(AString &,AString const &)+6p
UNDEF:00005904 ; public: class AString & __thiscall AString::operator=(char const *)
UNDEF:00005904                 extrn ??4AString@@QAEAAV0@PBD@Z:near
UNDEF:00005904                                         ; CODE XREF: NArchive::NXz::GetCheckString(CXzs const &)+DCp
UNDEF:00005904                                         ; NArchive::NXz::GetCheckString(CXzs const &)+EBp ...
UNDEF:00005908 ; __stdcall Xzs_Construct(x)
UNDEF:00005908                 extrn _Xzs_Construct@4:near
UNDEF:00005908                                         ; CODE XREF: NArchive::NXz::CXzsCPP::CXzsCPP(void)+12p
UNDEF:0000590C ; __stdcall Xzs_Free(x, x)
UNDEF:0000590C                 extrn _Xzs_Free@8:near  ; CODE XREF: NArchive::NXz::CXzsCPP::~CXzsCPP(void)+17p
UNDEF:00005910 ; __stdcall XzUnpacker_Construct(x, x)
UNDEF:00005910                 extrn _XzUnpacker_Construct@8:near
UNDEF:00005910                                         ; CODE XREF: NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP(void)+2Dp
UNDEF:00005914 ; __stdcall MyFree(x)
UNDEF:00005914                 extrn _MyFree@4:near    ; CODE XREF: NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(void)+20p
UNDEF:00005914                                         ; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(void)+2Cp
UNDEF:00005918 ; __stdcall XzUnpacker_Free(x)
UNDEF:00005918                 extrn _XzUnpacker_Free@4:near
UNDEF:00005918                                         ; CODE XREF: NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP(void)+15p
UNDEF:0000591C ; __stdcall XzUnpacker_IsStreamWasFinished(x)
UNDEF:0000591C                 extrn _XzUnpacker_IsStreamWasFinished@4:near
UNDEF:0000591C                                         ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2DDp
UNDEF:00005920 ; __stdcall XzUnpacker_GetExtraSize(x)
UNDEF:00005920                 extrn _XzUnpacker_GetExtraSize@4:near
UNDEF:00005920                                         ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+2B1p
UNDEF:00005924 ; __int32 __stdcall WriteStream(struct ISequentialOutStream *, const void *, unsigned int)
UNDEF:00005924                 extrn ?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:near
UNDEF:00005924                                         ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+1CAp
UNDEF:00005928 ; __stdcall XzUnpacker_Code(x, x, x, x, x, x, x)
UNDEF:00005928                 extrn _XzUnpacker_Code@28:near
UNDEF:00005928                                         ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+124p
UNDEF:0000592C ; __stdcall MyAlloc(x)
UNDEF:0000592C                 extrn _MyAlloc@4:near   ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+59p
UNDEF:0000592C                                         ; NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+72p
UNDEF:00005930 ; __stdcall XzUnpacker_Init(x)
UNDEF:00005930                 extrn _XzUnpacker_Init@4:near
UNDEF:00005930                                         ; CODE XREF: NArchive::NXz::CDecoder::Decode(ISequentialInStream *,ISequentialOutStream *,ICompressProgressInfo *)+46p
UNDEF:00005934 ; void __thiscall CLocalProgress::Init(CLocalProgress *__hidden this, struct IProgress *, bool)
UNDEF:00005934                 extrn ?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:near
UNDEF:00005934                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+250p
UNDEF:00005934                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+63Ap ...
UNDEF:00005938 ; public: __thiscall CLocalProgress::CLocalProgress(void)
UNDEF:00005938                 extrn ??0CLocalProgress@@QAE@XZ:near
UNDEF:00005938                                         ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1FBp
UNDEF:00005938                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5D9p ...
UNDEF:0000593C ; void *__cdecl operator new(unsigned int)
UNDEF:0000593C                 extrn ??2@YAPAXI@Z:near ; CODE XREF: NArchive::NXz::CHandler::Extract(uint const *,uint,int,IArchiveExtractCallback *)+1CEp
UNDEF:0000593C                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+5ACp ...
UNDEF:00005940 ; __int32 NCompress::CopyStream(NCompress *__hidden this, struct ISequentialInStream *, struct ISequentialOutStream *, struct ICompressProgressInfo *)
UNDEF:00005940                 extrn ?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:near
UNDEF:00005940                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+C13p
UNDEF:00005944                 extrn _IID_IArchiveUpdateCallbackFile:near
UNDEF:00005944                                         ; DATA XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+977o
UNDEF:00005948 ; __stdcall Xz_Encode(x, x, x, x)
UNDEF:00005948                 extrn _Xz_Encode@16:near
UNDEF:00005948                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+895p
UNDEF:0000594C ; __stdcall XzFilterProps_Init(x)
UNDEF:0000594C                 extrn _XzFilterProps_Init@4:near
UNDEF:0000594C                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+675p
UNDEF:00005950 ; __stdcall XzProps_Init(x)
UNDEF:00005950                 extrn _XzProps_Init@4:near
UNDEF:00005950                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+669p
UNDEF:00005954 ; _DWORD __thiscall CCompressProgressWrap::CCompressProgressWrap(CCompressProgressWrap *__hidden this, struct ICompressProgressInfo *)
UNDEF:00005954                 extrn ??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z:near
UNDEF:00005954                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+65Dp
UNDEF:00005958 ; void __thiscall NArchive::CMultiMethodProps::SetGlobalLevelAndThreads(NArchive::CMultiMethodProps *__hidden this, struct COneMethodInfo *, unsigned int)
UNDEF:00005958                 extrn ?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z:near
UNDEF:00005958                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+4CDp
UNDEF:0000595C ; __int32 NCompress::NLzma2::SetLzma2Prop(NCompress::NLzma2 *__hidden this, unsigned __int32, const struct tagPROPVARIANT *, struct CLzma2EncProps *)
UNDEF:0000595C                 extrn ?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z:near
UNDEF:0000595C                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+3F3p
UNDEF:0000595C                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+54Ep
UNDEF:00005960 ; __stdcall Lzma2EncProps_Init(x)
UNDEF:00005960                 extrn _Lzma2EncProps_Init@4:near
UNDEF:00005960                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+2F7p
UNDEF:00005964 ; __int32 __stdcall SResToHRESULT(int)
UNDEF:00005964                 extrn ?SResToHRESULT@@YGJH@Z:near
UNDEF:00005964                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+6Dp
UNDEF:00005964                                         ; NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+904p
UNDEF:00005968 ; __stdcall Xz_EncodeEmpty(x)
UNDEF:00005968                 extrn _Xz_EncodeEmpty@4:near
UNDEF:00005968                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+61p
UNDEF:0000596C ; _DWORD __thiscall CSeqOutStreamWrap::CSeqOutStreamWrap(CSeqOutStreamWrap *__hidden this, struct ISequentialOutStream *)
UNDEF:0000596C                 extrn ??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z:near
UNDEF:0000596C                                         ; CODE XREF: NArchive::NXz::CHandler::UpdateItems(ISequentialOutStream *,uint,IArchiveUpdateCallback *)+52p
UNDEF:00005970 ; bool __stdcall StringsAreEqualNoCase_Ascii(const char *, const char *)
UNDEF:00005970                 extrn ?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z:near
UNDEF:00005970                                         ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+F3p
UNDEF:00005970                                         ; AString::IsEqualTo_Ascii_NoCase(char const *)+18p
UNDEF:00005974 ; __int32 __thiscall NArchive::CMultiMethodProps::SetProperty(NArchive::CMultiMethodProps *__hidden this, const wchar_t *, const struct tagPROPVARIANT *)
UNDEF:00005974                 extrn ?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:near
UNDEF:00005974                                         ; CODE XREF: NArchive::NXz::CHandler::SetProperties(wchar_t const * const *,tagPROPVARIANT const *,uint)+81p
UNDEF:00005978 ; void *__cdecl _memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00005978                 extrn __imp__memmove:near
UNDEF:00005978                                         ; CODE XREF: CRecordVector<void *>::MoveItems(uint,uint)+36p
UNDEF:00005978                                         ; DATA XREF: CRecordVector<void *>::MoveItems(uint,uint)+36r
UNDEF:0000597C ; _DWORD __fastcall Crc64GenerateTable()
UNDEF:0000597C                 extrn @Crc64GenerateTable@0:near
UNDEF:0000597C                                         ; CODE XREF: NArchive::NXz::CCrc64Gen::CCrc64Gen(void)+Ep
UNDEF:00005980 ; void __stdcall RegisterArc(const struct CArcInfo *)
UNDEF:00005980                 extrn ?RegisterArc@@YGXPBUCArcInfo@@@Z:near
UNDEF:00005980                                         ; CODE XREF: NArchive::NXz::CRegisterArc::CRegisterArc(void)+13p
UNDEF:00005980
UNDEF:00005980
UNDEF:00005980                 end